{"sha": "a6e0d593707ae44dec0bdf2bcdc4f539050b46db", "node_id": "C_kwDOANBUbNoAKGE2ZTBkNTkzNzA3YWU0NGRlYzBiZGYyYmNkYzRmNTM5MDUwYjQ2ZGI", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-22T21:29:20Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-22T21:29:20Z"}, "message": "libcpp: Fix _Pragma stringification [PR103165]\n\nAs the testcase show, sometimes _Pragma is turned into CPP_PRAGMA\n.. CPP_PRAGMA_EOL tokens, even when it might still need to be\nstringized later on.  We are then ICEing because we don't handle\nstringification of CPP_PRAGMA or CPP_PRAGMA_EOL, but trying to\nreconstruct the exact tokens with exact spacing after it has been\nlowered is very hard.  So, instead this patch ensures we don't\nlower _Pragma during expand_arg calls, but only later when\ncpp_get_token_1 is called outside of expand_arg.\n\n2021-11-22  Jakub Jelinek  <jakub@redhat.com>\n\t    Tobias Burnus  <tobias@codesourcery.com>\n\n\tPR preprocessor/103165\nlibcpp/\n\t* internal.h (struct lexer_state): Add ignore__Pragma field.\n\t* macro.c (builtin_macro): Don't interpret _Pragma if\n\tpfile->state.ignore__Pragma.\n\t(expand_arg): Temporarily set pfile->state.ignore__Pragma to 1.\ngcc/testsuite/\n\t* c-c++-common/gomp/pragma-3.c: New test.\n\t* c-c++-common/gomp/pragma-4.c: New test.\n\t* c-c++-common/gomp/pragma-5.c: New test.\n\nCo-Authored-By: Tobias Burnus <tobias@codesourcery.com>", "tree": {"sha": "fe7bb778fb701be58becd51ac8c669b2f4bba8a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe7bb778fb701be58becd51ac8c669b2f4bba8a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6e0d593707ae44dec0bdf2bcdc4f539050b46db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6e0d593707ae44dec0bdf2bcdc4f539050b46db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6e0d593707ae44dec0bdf2bcdc4f539050b46db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6e0d593707ae44dec0bdf2bcdc4f539050b46db/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a944b5dec3adb28ed199234d2116145ca9010d6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a944b5dec3adb28ed199234d2116145ca9010d6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a944b5dec3adb28ed199234d2116145ca9010d6a"}], "stats": {"total": 74, "additions": 72, "deletions": 2}, "files": [{"sha": "c1dee1bcc62c7d67119f9551d2da8bc42f8fe9cc", "filename": "gcc/testsuite/c-c++-common/gomp/pragma-3.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6e0d593707ae44dec0bdf2bcdc4f539050b46db/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpragma-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6e0d593707ae44dec0bdf2bcdc4f539050b46db/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpragma-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpragma-3.c?ref=a6e0d593707ae44dec0bdf2bcdc4f539050b46db", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-additional-options \"-fdump-tree-original\" }  */\n+/* PR preprocessor/103165  */\n+\n+#define inner(...) #__VA_ARGS__ ; _Pragma(\"omp error severity(warning) message (\\\"Test\\\") at(compilation)\")\n+#define outer(...) inner(__VA_ARGS__)\n+\n+void\n+f (void)\n+{\n+  const char *str = outer(inner(1,2));  /* { dg-warning \"'pragma omp error' encountered: Test\" } */\n+}\n+\n+#if 0\n+After preprocessing, the expected result are the following three lines:\n+     const char *str = \"\\\"1,2\\\" ; _Pragma(\\\"omp error severity(warning) message (\\\\\\\"Test\\\\\\\") at(compilation)\\\")\" ;\n+#pragma omp error severity(warning) message (\"Test\") at(compilation)\n+                                     ;\n+#endif\n+\n+/* { dg-final { scan-tree-dump \"const char \\\\* str = \\\\(const char \\\\*\\\\) \\\"\\\\\\\\\\\"1,2\\\\\\\\\\\" ; _Pragma\\\\(\\\\\\\\\\\"omp error severity\\\\(warning\\\\) message \\\\(\\\\\\\\\\\\\\\\\\\\\\\\\\\"Test\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\) at\\\\(compilation\\\\)\\\\\\\\\\\"\\\\)\\\";\" \"original\" } }  */"}, {"sha": "419c4ac32f5fea363a9692bfa2b453876a9cb576", "filename": "gcc/testsuite/c-c++-common/gomp/pragma-4.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6e0d593707ae44dec0bdf2bcdc4f539050b46db/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpragma-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6e0d593707ae44dec0bdf2bcdc4f539050b46db/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpragma-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpragma-4.c?ref=a6e0d593707ae44dec0bdf2bcdc4f539050b46db", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-additional-options \"-fdump-tree-original -save-temps\" }  */\n+/* PR preprocessor/103165  */\n+\n+#define inner(...) #__VA_ARGS__ ; _Pragma(\"omp error severity(warning) message (\\\"Test\\\") at(compilation)\")\n+#define outer(...) inner(__VA_ARGS__)\n+\n+void\n+f (void)\n+{\n+  const char *str = outer(inner(1,2));  /* { dg-warning \"'pragma omp error' encountered: Test\" } */\n+}\n+\n+#if 0\n+After preprocessing, the expected result are the following three lines:\n+     const char *str = \"\\\"1,2\\\" ; _Pragma(\\\"omp error severity(warning) message (\\\\\\\"Test\\\\\\\") at(compilation)\\\")\" ;\n+#pragma omp error severity(warning) message (\"Test\") at(compilation)\n+                                     ;\n+#endif\n+\n+/* { dg-final { scan-tree-dump \"const char \\\\* str = \\\\(const char \\\\*\\\\) \\\"\\\\\\\\\\\"1,2\\\\\\\\\\\" ; _Pragma\\\\(\\\\\\\\\\\"omp error severity\\\\(warning\\\\) message \\\\(\\\\\\\\\\\\\\\\\\\\\\\\\\\"Test\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\) at\\\\(compilation\\\\)\\\\\\\\\\\"\\\\)\\\";\" \"original\" } }  */"}, {"sha": "af54b682789ab2e7cdc872bc6b9b9b1c2683c168", "filename": "gcc/testsuite/c-c++-common/gomp/pragma-5.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6e0d593707ae44dec0bdf2bcdc4f539050b46db/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpragma-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6e0d593707ae44dec0bdf2bcdc4f539050b46db/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpragma-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpragma-5.c?ref=a6e0d593707ae44dec0bdf2bcdc4f539050b46db", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-additional-options \"-fdump-tree-original\" }  */\n+/* PR preprocessor/103165  */\n+\n+#define inner(...) #__VA_ARGS__ ; _Pragma   (\t\"   omp\t\terror severity   (warning)\tmessage (\\\"Test\\\") at(compilation)\" )\n+#define outer(...) inner(__VA_ARGS__)\n+\n+void\n+f (void)\n+{\n+  const char *str = outer(inner(1,2));  /* { dg-warning \"'pragma omp error' encountered: Test\" } */\n+}\n+\n+#if 0\n+After preprocessing, the expected result are the following three lines:\n+     const char *str = \"\\\"1,2\\\" ; _Pragma ( \\\"   omp\t\terror severity   (warning)\tmessage (\\\\\\\"Test\\\\\\\") at(compilation)\\\" )\" ;\n+#pragma omp error severity(warning) message (\"Test\") at(compilation)\n+                                     ;\n+#endif\n+\n+/* { dg-final { scan-tree-dump \"const char \\\\* str = \\\\(const char \\\\*\\\\) \\\"\\\\\\\\\\\"1,2\\\\\\\\\\\" ; _Pragma \\\\( \\\\\\\\\\\"   omp\\\\\\\\t\\\\\\\\terror severity   \\\\(warning\\\\)\\\\\\\\tmessage \\\\(\\\\\\\\\\\\\\\\\\\\\\\\\\\"Test\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\) at\\\\(compilation\\\\)\\\\\\\\\\\" \\\\)\\\";\" \"original\" } }  */"}, {"sha": "b72d6160564f30f35eed9c9e8f8b9ed9bfbcfad7", "filename": "libcpp/internal.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6e0d593707ae44dec0bdf2bcdc4f539050b46db/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6e0d593707ae44dec0bdf2bcdc4f539050b46db/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=a6e0d593707ae44dec0bdf2bcdc4f539050b46db", "patch": "@@ -287,6 +287,9 @@ struct lexer_state\n \n   /* Nonzero if the deferred pragma being handled allows macro expansion.  */\n   unsigned char pragma_allow_expansion;\n+\n+  /* Nonzero if _Pragma should not be interpreted.  */\n+  unsigned char ignore__Pragma;\n };\n \n /* Special nodes - identifiers with predefined significance.  */"}, {"sha": "95e5b8be8d51c8fd09ecf66921aef164dcd01348", "filename": "libcpp/macro.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6e0d593707ae44dec0bdf2bcdc4f539050b46db/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6e0d593707ae44dec0bdf2bcdc4f539050b46db/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=a6e0d593707ae44dec0bdf2bcdc4f539050b46db", "patch": "@@ -750,8 +750,10 @@ builtin_macro (cpp_reader *pfile, cpp_hashnode *node,\n   if (node->value.builtin == BT_PRAGMA)\n     {\n       /* Don't interpret _Pragma within directives.  The standard is\n-         not clear on this, but to me this makes most sense.  */\n-      if (pfile->state.in_directive)\n+         not clear on this, but to me this makes most sense.\n+         Similarly, don't interpret _Pragma inside expand_args, we might\n+         need to stringize it later on.  */\n+      if (pfile->state.in_directive || pfile->state.ignore__Pragma)\n \treturn 0;\n \n       return _cpp_do__Pragma (pfile, loc);\n@@ -2648,6 +2650,7 @@ expand_arg (cpp_reader *pfile, macro_arg *arg)\n   size_t capacity;\n   bool saved_warn_trad;\n   bool track_macro_exp_p = CPP_OPTION (pfile, track_macro_expansion);\n+  bool saved_ignore__Pragma;\n \n   if (arg->count == 0\n       || arg->expanded != NULL)\n@@ -2670,6 +2673,9 @@ expand_arg (cpp_reader *pfile, macro_arg *arg)\n     push_ptoken_context (pfile, NULL, NULL,\n \t\t\t arg->first, arg->count + 1);\n \n+  saved_ignore__Pragma = pfile->state.ignore__Pragma;\n+  pfile->state.ignore__Pragma = 1;\n+\n   for (;;)\n     {\n       const cpp_token *token;\n@@ -2692,6 +2698,7 @@ expand_arg (cpp_reader *pfile, macro_arg *arg)\n   _cpp_pop_context (pfile);\n \n   CPP_WTRADITIONAL (pfile) = saved_warn_trad;\n+  pfile->state.ignore__Pragma = saved_ignore__Pragma;\n }\n \n /* Returns the macro associated to the current context if we are in"}]}