{"sha": "5382402614d971f843c144c7a34cd6b075504e45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM4MjQwMjYxNGQ5NzFmODQzYzE0NGM3YTM0Y2Q2YjA3NTUwNGU0NQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2006-04-15T12:40:14Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2006-04-15T12:40:14Z"}, "message": "Make-lang.in (cp/pt.o): Depend on vecprim.h.\n\n\t* Make-lang.in (cp/pt.o): Depend on vecprim.h.\n\t* pt.c: Include vecprim.h.\n\t(inline_parm_levels): Change the type to VEC(int,heap) *.\n\t(inline_parm_levels_used): Remove.\n\t(maybe_begin_member_template_processing,\n\tmaybe_end_member_template_processing): Use VEC instead of\n\tVARRAY.\n\nFrom-SVN: r112969", "tree": {"sha": "da3915f6ba52bb5facf787bf868d494bd0be9dd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da3915f6ba52bb5facf787bf868d494bd0be9dd0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5382402614d971f843c144c7a34cd6b075504e45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5382402614d971f843c144c7a34cd6b075504e45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5382402614d971f843c144c7a34cd6b075504e45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5382402614d971f843c144c7a34cd6b075504e45/comments", "author": null, "committer": null, "parents": [{"sha": "a01de5ece55c8b495118daa649e6ab5eb78912ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a01de5ece55c8b495118daa649e6ab5eb78912ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a01de5ece55c8b495118daa649e6ab5eb78912ca"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "479f21a9fc3230a984c85538bc6328491d5d27f1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5382402614d971f843c144c7a34cd6b075504e45/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5382402614d971f843c144c7a34cd6b075504e45/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5382402614d971f843c144c7a34cd6b075504e45", "patch": "@@ -1,3 +1,13 @@\n+2006-04-15  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* Make-lang.in (cp/pt.o): Depend on vecprim.h.\n+\t* pt.c: Include vecprim.h.\n+\t(inline_parm_levels): Change the type to VEC(int,heap) *.\n+\t(inline_parm_levels_used): Remove.\n+\t(maybe_begin_member_template_processing,\n+\tmaybe_end_member_template_processing): Use VEC instead of\n+\tVARRAY.\n+\n 2006-04-12  Mark Mitchell  <mark@codesourcery.com>\n \n \t* parser.c (cp_parser_init_declarator): Initialize local variables"}, {"sha": "afc80fa888f541d3889b6a2d8e9734ab0d809c70", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5382402614d971f843c144c7a34cd6b075504e45/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5382402614d971f843c144c7a34cd6b075504e45/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=5382402614d971f843c144c7a34cd6b075504e45", "patch": "@@ -270,7 +270,7 @@ cp/except.o: cp/except.c $(CXX_TREE_H) $(TM_H) flags.h $(RTL_H) except.h \\\n cp/expr.o: cp/expr.c $(CXX_TREE_H) $(TM_H) $(RTL_H) flags.h $(EXPR_H) \\\n   toplev.h except.h $(TM_P_H)\n cp/pt.o: cp/pt.c $(CXX_TREE_H) $(TM_H) cp/decl.h cp/cp-objcp-common.h \\\n-  toplev.h $(RTL_H) except.h tree-inline.h pointer-set.h gt-cp-pt.h\n+  toplev.h $(RTL_H) except.h tree-inline.h pointer-set.h gt-cp-pt.h vecprim.h\n cp/error.o: cp/error.c $(CXX_TREE_H) $(TM_H) toplev.h $(DIAGNOSTIC_H) \\\n   flags.h real.h $(LANGHOOKS_DEF_H) $(CXX_PRETTY_PRINT_H)\n cp/repo.o: cp/repo.c $(CXX_TREE_H) $(TM_H) toplev.h diagnostic.h \\"}, {"sha": "83bfd1259240dbe5a452dcf935e97b28d8c8fae6", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5382402614d971f843c144c7a34cd6b075504e45/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5382402614d971f843c144c7a34cd6b075504e45/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=5382402614d971f843c144c7a34cd6b075504e45", "patch": "@@ -45,6 +45,7 @@ Boston, MA 02110-1301, USA.  */\n #include \"rtl.h\"\n #include \"timevar.h\"\n #include \"tree-iterator.h\"\n+#include \"vecprim.h\"\n \n /* The type of functions taking a tree, and some additional data, and\n    returning an int.  */\n@@ -63,8 +64,7 @@ int processing_template_parmlist;\n static int template_header_count;\n \n static GTY(()) tree saved_trees;\n-static GTY(()) varray_type inline_parm_levels;\n-static size_t inline_parm_levels_used;\n+static VEC(int,heap) *inline_parm_levels;\n \n static GTY(()) tree current_tinst_level;\n \n@@ -396,12 +396,7 @@ maybe_begin_member_template_processing (tree decl)\n \n   /* Remember how many levels of template parameters we pushed so that\n      we can pop them later.  */\n-  if (!inline_parm_levels)\n-    VARRAY_INT_INIT (inline_parm_levels, 4, \"inline_parm_levels\");\n-  if (inline_parm_levels_used == inline_parm_levels->num_elements)\n-    VARRAY_GROW (inline_parm_levels, 2 * inline_parm_levels_used);\n-  VARRAY_INT (inline_parm_levels, inline_parm_levels_used) = levels;\n-  ++inline_parm_levels_used;\n+  VEC_safe_push (int, heap, inline_parm_levels, levels);\n }\n \n /* Undo the effects of maybe_begin_member_template_processing.  */\n@@ -410,14 +405,13 @@ void\n maybe_end_member_template_processing (void)\n {\n   int i;\n+  int last;\n \n-  if (!inline_parm_levels_used)\n+  if (VEC_length (int, inline_parm_levels) == 0)\n     return;\n \n-  --inline_parm_levels_used;\n-  for (i = 0;\n-       i < VARRAY_INT (inline_parm_levels, inline_parm_levels_used);\n-       ++i)\n+  last = VEC_pop (int, inline_parm_levels);\n+  for (i = 0; i < last; ++i)\n     {\n       --processing_template_decl;\n       current_template_parms = TREE_CHAIN (current_template_parms);"}]}