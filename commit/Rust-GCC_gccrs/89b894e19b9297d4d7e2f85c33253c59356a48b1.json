{"sha": "89b894e19b9297d4d7e2f85c33253c59356a48b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODliODk0ZTE5YjkyOTdkNGQ3ZTJmODVjMzMyNTNjNTkzNTZhNDhiMQ==", "commit": {"author": {"name": "Per Bothner", "email": "per@bothner.com", "date": "2001-10-11T23:50:49Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2001-10-11T23:50:49Z"}, "message": "parse.y (patch_synchronized_statement): Use a TRY_FINALLY_EXPR rather than a CLEANUP_POINT_EXPR/WITH_CLEANUP_EXPR pair.\n\n\n\t* parse.y (patch_synchronized_statement):  Use a TRY_FINALLY_EXPR\n\trather than a CLEANUP_POINT_EXPR/WITH_CLEANUP_EXPR pair.\n\tThe former is simpler, and jcf-write.c handles it better.\n\t(java_complete_lhs):  No longer need to handle CLEANUP_POINT_EXPR\n\tor WITH_CLEANUP_EXPR.\n\t* jcf-write.c:  Revert Alex's change from 2000-10-18.  It is no\n\tlonger needed, as we already handle empty TRY_FINALLY_EXPR bodies fine.\n\nFrom-SVN: r46209", "tree": {"sha": "9837bfb596fefc897129f0b0c0659bf932161e23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9837bfb596fefc897129f0b0c0659bf932161e23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89b894e19b9297d4d7e2f85c33253c59356a48b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89b894e19b9297d4d7e2f85c33253c59356a48b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89b894e19b9297d4d7e2f85c33253c59356a48b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89b894e19b9297d4d7e2f85c33253c59356a48b1/comments", "author": {"login": "PerBothner", "id": 10293361, "node_id": "MDQ6VXNlcjEwMjkzMzYx", "avatar_url": "https://avatars.githubusercontent.com/u/10293361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PerBothner", "html_url": "https://github.com/PerBothner", "followers_url": "https://api.github.com/users/PerBothner/followers", "following_url": "https://api.github.com/users/PerBothner/following{/other_user}", "gists_url": "https://api.github.com/users/PerBothner/gists{/gist_id}", "starred_url": "https://api.github.com/users/PerBothner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PerBothner/subscriptions", "organizations_url": "https://api.github.com/users/PerBothner/orgs", "repos_url": "https://api.github.com/users/PerBothner/repos", "events_url": "https://api.github.com/users/PerBothner/events{/privacy}", "received_events_url": "https://api.github.com/users/PerBothner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9e2b96271da2e46088221b201054383643ae935b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e2b96271da2e46088221b201054383643ae935b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e2b96271da2e46088221b201054383643ae935b"}], "stats": {"total": 48, "additions": 13, "deletions": 35}, "files": [{"sha": "7ea1bc8c1662a2db4570709234a267e7e1acbb07", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89b894e19b9297d4d7e2f85c33253c59356a48b1/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89b894e19b9297d4d7e2f85c33253c59356a48b1/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=89b894e19b9297d4d7e2f85c33253c59356a48b1", "patch": "@@ -1,5 +1,13 @@\n 2001-10-11  Per Bothner  <per@bothner.com>\n \n+\t* parse.y (patch_synchronized_statement):  Use a TRY_FINALLY_EXPR\n+\trather than a CLEANUP_POINT_EXPR/WITH_CLEANUP_EXPR pair.\n+\tThe former is simpler, and jcf-write.c handles it better.\n+\t(java_complete_lhs):  No longer need to handle CLEANUP_POINT_EXPR\n+\tor WITH_CLEANUP_EXPR.\n+\t* jcf-write.c:  Revert Alex's change from 2000-10-18.  It is no\n+\tlonger needed, as we already handle empty TRY_FINALLY_EXPR bodies fine.\n+\n \t* parse.y (patch_if_else_statement):  If the condition is constant,\n \toptimize away the test.\n "}, {"sha": "5f72b7cf70d7c4df3f106b13ce9e913a26b0c1b9", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89b894e19b9297d4d7e2f85c33253c59356a48b1/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89b894e19b9297d4d7e2f85c33253c59356a48b1/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=89b894e19b9297d4d7e2f85c33253c59356a48b1", "patch": "@@ -57,7 +57,7 @@ char *jcf_write_base_directory = NULL;\n /* Add a 1-byte instruction/operand I to bytecode.data,\n    assuming space has already been RESERVE'd. */\n \n-#define OP1(I) (state->last_bc = *state->bytecode.ptr++ = (I), CHECK_OP(state))\n+#define OP1(I) (*state->bytecode.ptr++ = (I), CHECK_OP(state))\n \n /* Like OP1, but I is a 2-byte big endian integer. */\n \n@@ -275,8 +275,6 @@ struct jcf_partial\n \n   /* Information about the current switch statement. */\n   struct jcf_switch_state *sw_state;\n-\n-  enum java_opcode last_bc;\t/* The last emitted bytecode */\n };\n \n static void generate_bytecode_insns PARAMS ((tree, int, struct jcf_partial *));\n@@ -2167,16 +2165,7 @@ generate_bytecode_insns (exp, target, state)\n \ttree src = TREE_OPERAND (exp, 0);\n \ttree src_type = TREE_TYPE (src);\n \ttree dst_type = TREE_TYPE (exp);\n-\t/* Detect the situation of compiling an empty synchronized\n-\t   block.  A nop should be emitted in order to produce\n-\t   verifiable bytecode. */\n-\tif (exp == empty_stmt_node\n-\t    && state->last_bc == OPCODE_monitorenter\n-\t    && state->labeled_blocks\n-\t    && state->labeled_blocks->pc == PENDING_CLEANUP_PC)\n-\t  OP1 (OPCODE_nop);\n-\telse\n-\t  generate_bytecode_insns (TREE_OPERAND (exp, 0), target, state);\n+\tgenerate_bytecode_insns (TREE_OPERAND (exp, 0), target, state);\n \tif (target == IGNORE_TARGET || src_type == dst_type)\n \t  break;\n \tif (TREE_CODE (dst_type) == POINTER_TYPE)"}, {"sha": "f699c5dc520b2b472bcc2514628a3fba433f3b75", "filename": "gcc/java/parse.y", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89b894e19b9297d4d7e2f85c33253c59356a48b1/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89b894e19b9297d4d7e2f85c33253c59356a48b1/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=89b894e19b9297d4d7e2f85c33253c59356a48b1", "patch": "@@ -11582,21 +11582,6 @@ java_complete_lhs (node)\n       TREE_TYPE (node) = TREE_TYPE (TREE_OPERAND (node, 0));\n       return node;\n \n-    case CLEANUP_POINT_EXPR:\n-      COMPLETE_CHECK_OP_0 (node);\n-      TREE_TYPE (node) = void_type_node;\n-      CAN_COMPLETE_NORMALLY (node) = \n-\tCAN_COMPLETE_NORMALLY (TREE_OPERAND (node, 0));\n-      return node;\n-\n-    case WITH_CLEANUP_EXPR:\n-      COMPLETE_CHECK_OP_0 (node);\n-      COMPLETE_CHECK_OP_1 (node);\n-      CAN_COMPLETE_NORMALLY (node) = \n-\tCAN_COMPLETE_NORMALLY (TREE_OPERAND (node, 0));\n-      TREE_TYPE (node) = void_type_node;\n-      return node;\n-\n     case LABELED_BLOCK_EXPR:\n       PUSH_LABELED_BLOCK (node);\n       if (LABELED_BLOCK_BODY (node))\n@@ -15690,13 +15675,9 @@ patch_synchronized_statement (node, wfl_op1)\n   CAN_COMPLETE_NORMALLY (exit) = 1;\n   assignment = build (MODIFY_EXPR, NULL_TREE, expr_decl, expr);\n   TREE_SIDE_EFFECTS (assignment) = 1;\n-  node = build1 (CLEANUP_POINT_EXPR, NULL_TREE,\n-\t\t build (COMPOUND_EXPR, NULL_TREE,\n-\t\t\tbuild (WITH_CLEANUP_EXPR, NULL_TREE,\n-\t\t\t       build (COMPOUND_EXPR, NULL_TREE,\n-\t\t\t\t      assignment, enter),\n-\t\t\t       exit, NULL_TREE),\n-\t\t\tblock));\n+  node = build (COMPOUND_EXPR, NULL_TREE,\n+\t\tbuild (COMPOUND_EXPR, NULL_TREE, assignment, enter),\n+\t\tbuild (TRY_FINALLY_EXPR, NULL_TREE, block, exit));\n   node = build_expr_block (node, expr_decl);\n \n   return java_complete_tree (node);"}]}