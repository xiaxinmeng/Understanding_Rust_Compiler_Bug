{"sha": "b038e4379c6aa0911c59a677a17e2f4f29abcea8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAzOGU0Mzc5YzZhYTA5MTFjNTlhNjc3YTE3ZTJmNGYyOWFiY2VhOA==", "commit": {"author": {"name": "Xinliang David Li", "email": "davidxl@google.com", "date": "2011-05-02T05:30:59Z"}, "committer": {"name": "Xinliang David Li", "email": "davidxl@gcc.gnu.org", "date": "2011-05-02T05:30:59Z"}, "message": "new tests\n\nFrom-SVN: r173242", "tree": {"sha": "47c3281e8f58b9eaf50e45e4d45f0d9daa753e22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47c3281e8f58b9eaf50e45e4d45f0d9daa753e22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b038e4379c6aa0911c59a677a17e2f4f29abcea8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b038e4379c6aa0911c59a677a17e2f4f29abcea8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b038e4379c6aa0911c59a677a17e2f4f29abcea8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b038e4379c6aa0911c59a677a17e2f4f29abcea8/comments", "author": {"login": "vns-mn", "id": 57157229, "node_id": "MDQ6VXNlcjU3MTU3MjI5", "avatar_url": "https://avatars.githubusercontent.com/u/57157229?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vns-mn", "html_url": "https://github.com/vns-mn", "followers_url": "https://api.github.com/users/vns-mn/followers", "following_url": "https://api.github.com/users/vns-mn/following{/other_user}", "gists_url": "https://api.github.com/users/vns-mn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vns-mn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vns-mn/subscriptions", "organizations_url": "https://api.github.com/users/vns-mn/orgs", "repos_url": "https://api.github.com/users/vns-mn/repos", "events_url": "https://api.github.com/users/vns-mn/events{/privacy}", "received_events_url": "https://api.github.com/users/vns-mn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5bfa2178f223f23aeacaee5ad28e8447b176e2ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bfa2178f223f23aeacaee5ad28e8447b176e2ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bfa2178f223f23aeacaee5ad28e8447b176e2ad"}], "stats": {"total": 95, "additions": 95, "deletions": 0}, "files": [{"sha": "695c8e61851cff5ba979e6b853197dfa6ea00814", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b038e4379c6aa0911c59a677a17e2f4f29abcea8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b038e4379c6aa0911c59a677a17e2f4f29abcea8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b038e4379c6aa0911c59a677a17e2f4f29abcea8", "patch": "@@ -1,3 +1,8 @@\n+2011-05-01  Xinliang David Li  <davidxl@google.com>\n+\t\n+\t* gcc.dg/tree-ssa/integer-addr.c: New test.\n+\t* gcc.dg/tree-ssa/alias_bug.c: New test.\n+\n 2011-05-01  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/48787"}, {"sha": "64fef27874a8ea74c0324a5d62152b7014e4d448", "filename": "gcc/testsuite/gcc.dg/tree-ssa/alias_bug.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b038e4379c6aa0911c59a677a17e2f4f29abcea8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias_bug.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b038e4379c6aa0911c59a677a17e2f4f29abcea8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias_bug.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias_bug.c?ref=b038e4379c6aa0911c59a677a17e2f4f29abcea8", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -fdump-tree-optimized\" } */\n+\n+typedef unsigned u32;\n+typedef unsigned short u16;\n+typedef unsigned char u8;\n+struct biosregs {\n+ union {\n+  struct {\n+   u32 edi;\n+   u32 esi;\n+   u32 ebp;\n+   u32 _esp;\n+   u32 ebx;\n+   u32 edx;\n+   u32 ecx;\n+   u32 eax;\n+   u32 _fsgs;\n+   u32 _dses;\n+   u32 eflags;\n+  };\n+  struct {\n+   u16 di, hdi;\n+   u16 si, hsi;\n+   u16 bp, hbp;\n+   u16 _sp, _hsp;\n+   u16 bx, hbx;\n+   u16 dx, hdx;\n+   u16 cx, hcx;\n+   u16 ax, hax;\n+   u16 gs, fs;\n+   u16 es, ds;\n+   u16 flags, hflags;\n+  };\n+  struct {\n+   u8 dil, dih, edi2, edi3;\n+   u8 sil, sih, esi2, esi3;\n+   u8 bpl, bph, ebp2, ebp3;\n+   u8 _spl, _sph, _esp2, _esp3;\n+   u8 bl, bh, ebx2, ebx3;\n+   u8 dl, dh, edx2, edx3;\n+   u8 cl, ch, ecx2, ecx3;\n+   u8 al, ah, eax2, eax3;\n+  };\n+ };\n+};\n+void initregs(struct biosregs *regs);\n+void intcall(u8 int_no, const struct biosregs *ireg, struct biosregs *oreg);\n+static u32 *const gp = (u32*) 0x32;\n+void keyboard_set_repeat(void)\n+{\n+ struct biosregs ireg;\n+ *gp = 10;\n+ initregs(&ireg);\n+ ireg.ax = 0x0305;\n+ intcall(0x16, &ireg, ((void *)0));\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"ireg.*ax\" 1 \"optimized\"} } */\n+ \n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "b102a7a52e728ac7baa4d758528cdb2e25ae2596", "filename": "gcc/testsuite/gcc.dg/tree-ssa/integer-addr.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b038e4379c6aa0911c59a677a17e2f4f29abcea8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finteger-addr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b038e4379c6aa0911c59a677a17e2f4f29abcea8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finteger-addr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finteger-addr.c?ref=b038e4379c6aa0911c59a677a17e2f4f29abcea8", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized -fno-strict-aliasing\" } */\n+/* Test with fixed address */\n+static int *foo =  (int *) (unsigned long) 0x7800000;\n+\n+int func(void) __attribute__ ((noinline));\n+\n+extern int bar(void);\n+\n+int func(void)\n+{\n+   if (*foo) {\n+      return 1;\n+   }\n+   return 0;\n+\n+}\n+\n+int foobar(void)\n+{\n+\n+   if (func()) {\n+      *foo = 1;\n+   }\n+   return func();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"= func\" 2 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}]}