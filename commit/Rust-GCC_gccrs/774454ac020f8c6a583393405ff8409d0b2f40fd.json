{"sha": "774454ac020f8c6a583393405ff8409d0b2f40fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc0NDU0YWMwMjBmOGM2YTU4MzM5MzQwNWZmODQwOWQwYjJmNDBmZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-23T12:24:22Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-23T12:24:22Z"}, "message": "[multiple changes]\n\n2015-10-23  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_util.adb (Denotes_Iterator): New routine.\n\t(Is_Iterator): Code cleanup. Factor out the detection of a\n\tpredefined iterator.  As a result this fixes a missing case\n\twhere a tagged type implements interface Reversible_Iterator.\n\n2015-10-23  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_attr.adb (Eval_Attribute): Constant-fold 'Enabled if\n\tnot within a generic unit, even if expander is not active, so\n\tthat instances of container packages remain preelaborable in\n\t-gnatc mode.\n\n2015-10-23  Tristan Gingold  <gingold@adacore.com>\n\n\t* init.c (__gnat_sigtramp): New assembly function for arm64-darwin.\n\t(__gnat_error_handler): Use trampoline for arm64.\n\n2015-10-23  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch3.adb (Expand_N_Object_Declaration): if the type of the\n\tobject is a class-wide limited interface type, the expression\n\tis not restricted to the forms specified for limited types.\n\n2015-10-23  Vincent Celier  <celier@adacore.com>\n\n\t* gnatname.adb: Code clean up.\n\t* s-taasde.ads: Fix comment.\n\nFrom-SVN: r229240", "tree": {"sha": "eba1ce95890c8b8d569f9435de42036be9b79836", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eba1ce95890c8b8d569f9435de42036be9b79836"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/774454ac020f8c6a583393405ff8409d0b2f40fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/774454ac020f8c6a583393405ff8409d0b2f40fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/774454ac020f8c6a583393405ff8409d0b2f40fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/774454ac020f8c6a583393405ff8409d0b2f40fd/comments", "author": null, "committer": null, "parents": [{"sha": "eeedaac578d0a649955553e92ac9c2cd29cd40f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeedaac578d0a649955553e92ac9c2cd29cd40f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eeedaac578d0a649955553e92ac9c2cd29cd40f0"}], "stats": {"total": 141, "additions": 117, "deletions": 24}, "files": [{"sha": "882fb8c5059e96c1d60fef33288c134fe4f79d63", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774454ac020f8c6a583393405ff8409d0b2f40fd/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774454ac020f8c6a583393405ff8409d0b2f40fd/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=774454ac020f8c6a583393405ff8409d0b2f40fd", "patch": "@@ -1,3 +1,33 @@\n+2015-10-23  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_util.adb (Denotes_Iterator): New routine.\n+\t(Is_Iterator): Code cleanup. Factor out the detection of a\n+\tpredefined iterator.  As a result this fixes a missing case\n+\twhere a tagged type implements interface Reversible_Iterator.\n+\n+2015-10-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_attr.adb (Eval_Attribute): Constant-fold 'Enabled if\n+\tnot within a generic unit, even if expander is not active, so\n+\tthat instances of container packages remain preelaborable in\n+\t-gnatc mode.\n+\n+2015-10-23  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* init.c (__gnat_sigtramp): New assembly function for arm64-darwin.\n+\t(__gnat_error_handler): Use trampoline for arm64.\n+\n+2015-10-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_N_Object_Declaration): if the type of the\n+\tobject is a class-wide limited interface type, the expression\n+\tis not restricted to the forms specified for limited types.\n+\n+2015-10-23  Vincent Celier  <celier@adacore.com>\n+\n+\t* gnatname.adb: Code clean up.\n+\t* s-taasde.ads: Fix comment.\n+\n 2015-10-23  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_util.adb (Is_Iterator, Is_Reversible_iterator): Use"}, {"sha": "4718ff5f6350ef93b999089d8a03e7528d8c7453", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774454ac020f8c6a583393405ff8409d0b2f40fd/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774454ac020f8c6a583393405ff8409d0b2f40fd/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=774454ac020f8c6a583393405ff8409d0b2f40fd", "patch": "@@ -6916,6 +6916,7 @@ package body Exp_Ch3 is\n             elsif Is_Tagged_Type (Typ)\n               and then Is_Class_Wide_Type (Typ)\n               and then Is_Limited_Record (Typ)\n+              and then not Is_Limited_Interface (Typ)\n             then\n                --  Given that the type is limited we cannot perform a copy. If\n                --  Expr_Q is the reference to a variable we mark the variable"}, {"sha": "d95da85ea07c586813815e2d6b3ecef912f96963", "filename": "gcc/ada/gnatname.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774454ac020f8c6a583393405ff8409d0b2f40fd/gcc%2Fada%2Fgnatname.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774454ac020f8c6a583393405ff8409d0b2f40fd/gcc%2Fada%2Fgnatname.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatname.adb?ref=774454ac020f8c6a583393405ff8409d0b2f40fd", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -434,7 +434,7 @@ procedure Gnatname is\n                elsif Arg = \"-h\" then\n                   Usage_Needed := True;\n \n-               --  -p\n+               --  -P\n \n                elsif Arg'Length >= 2 and then Arg (1 .. 2) = \"-P\" then\n                   if File_Set then"}, {"sha": "c649d6724146836dea7cfb267183057dff2360b4", "filename": "gcc/ada/init.c", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774454ac020f8c6a583393405ff8409d0b2f40fd/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774454ac020f8c6a583393405ff8409d0b2f40fd/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=774454ac020f8c6a583393405ff8409d0b2f40fd", "patch": "@@ -2256,6 +2256,47 @@ char __gnat_alternate_stack[32 * 1024]; /* 1 * MINSIGSTKSZ */\n #include <mach/vm_statistics.h>\n #endif\n \n+#ifdef __arm64__\n+#include <sys/ucontext.h>\n+\n+/* Trampoline inserted before raising the exception.  It modifies the\n+   stack so that PROC (D, M) looks to be called from the fault point.  Note\n+   that LR may be incorrectly set.  */\n+void __gnat_sigtramp (struct Exception_Data *d, const char *m,\n+\t\t      mcontext_t ctxt,\n+\t\t      void (*proc)(struct Exception_Data *, const char *));\n+\n+asm(\"\\n\"\n+\"\t.section\t__TEXT,__text,regular,pure_instructions\\n\"\n+\"\t.align  2\\n\"\n+\"___gnat_sigtramp:\\n\"\n+\"\t.cfi_startproc\\n\"\n+\t/* Restore callee saved registers.  */\n+\"\tldp\tx19, x20, [x2, #168]\\n\"\n+\"\tldp\tx21, x22, [x2, #184]\\n\"\n+\"\tldp\tx23, x24, [x2, #200]\\n\"\n+\"\tldp\tx25, x26, [x2, #216]\\n\"\n+\"\tldp\tx27, x28, [x2, #232]\\n\"\n+\"\tldp\tq8, q9, [x2, #416]\\n\"\n+\"\tldp\tq10, q11, [x2, #448]\\n\"\n+\"\tldp\tq12, q13, [x2, #480]\\n\"\n+\"\tldp\tq14, q15, [x2, #512]\\n\"\n+\t/* Read FP from mcontext.  */\n+\"\tldp\tfp, lr, [x2, #248]\\n\"\n+\t/* Read SP and PC from mcontext.  */\n+\"\tldp\tx6, x7, [x2, #264]\\n\"\n+\"\tadd\tlr, x7, #1\\n\"\n+\"\tmov\tsp, x6\\n\"\n+\t/* Create a standard frame.  */\n+\"\tstp\tfp, lr, [sp, #-16]!\\n\"\n+\"\t.cfi_def_cfa\tw29, 16\\n\"\n+\"\t.cfi_offset\tw30, -8\\n\"\n+\"\t.cfi_offset\tw29, -16\\n\"\n+\"\tbr\tx3\\n\"\n+\"\t.cfi_endproc\\n\"\n+);\n+#endif\n+\n /* Return true if ADDR is within a stack guard area.  */\n static int\n __gnat_is_stack_guard (mach_vm_address_t addr)\n@@ -2363,6 +2404,15 @@ __gnat_error_handler (int sig, siginfo_t *si, void *ucontext)\n \t for the next signal delivery.\n          The stack can't be used in case of stack checking.  */\n       syscall (SYS_sigreturn, NULL, UC_RESET_ALT_STACK);\n+\n+#ifdef __arm64__\n+      /* On arm64, use a trampoline so that the unwinder won't see the\n+\t signal frame.  */\n+      __gnat_sigtramp (exception, msg,\n+\t\t       ((ucontext_t *)ucontext)->uc_mcontext,\n+\t\t       Raise_From_Signal_Handler);\n+      return;\n+#endif\n       break;\n \n     case SIGFPE:"}, {"sha": "11227539dd76381d2d5880071196ea6c1706d242", "filename": "gcc/ada/s-taasde.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774454ac020f8c6a583393405ff8409d0b2f40fd/gcc%2Fada%2Fs-taasde.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774454ac020f8c6a583393405ff8409d0b2f40fd/gcc%2Fada%2Fs-taasde.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taasde.ads?ref=774454ac020f8c6a583393405ff8409d0b2f40fd", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1998-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1998-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -133,7 +133,7 @@ private\n       --  A double linked list\n    end record;\n \n-   --  The above \"overlaying\" of Self_ID and Level to hold other data that has\n+   --  The above \"overlaying\" of Self_Id and Level to hold other data that has\n    --  a non-overlapping lifetime is an unabashed hack to save memory.\n \n    procedure Time_Enqueue"}, {"sha": "948d71af0fa5d23a41fa96825bba78ce6b65b795", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774454ac020f8c6a583393405ff8409d0b2f40fd/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774454ac020f8c6a583393405ff8409d0b2f40fd/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=774454ac020f8c6a583393405ff8409d0b2f40fd", "patch": "@@ -7209,10 +7209,11 @@ package body Sem_Attr is\n          --  We skip evaluation if the expander is not active. This is not just\n          --  an optimization. It is of key importance that we not rewrite the\n          --  attribute in a generic template, since we want to pick up the\n-         --  setting of the check in the instance, and testing expander active\n-         --  is as easy way of doing this as any.\n+         --  setting of the check in the instance, Testing Expander_Active\n+         --  might seem an easy way of doing this, but we need to account for\n+         --  ASIS needs, so check explicitly for a generic context.\n \n-         if Expander_Active then\n+         if not Inside_A_Generic then\n             declare\n                C : constant Check_Id := Get_Check_Id (Chars (P));\n                R : Boolean;"}, {"sha": "a8052000b3118878432556175c8a604df1834f7f", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774454ac020f8c6a583393405ff8409d0b2f40fd/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774454ac020f8c6a583393405ff8409d0b2f40fd/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=774454ac020f8c6a583393405ff8409d0b2f40fd", "patch": "@@ -12114,21 +12114,37 @@ package body Sem_Util is\n    -----------------\n \n    function Is_Iterator (Typ : Entity_Id) return Boolean is\n-      Ifaces_List : Elist_Id;\n-      Iface_Elmt  : Elmt_Id;\n-      Iface       : Entity_Id;\n+      function Denotes_Iterator (Iter_Typ : Entity_Id) return Boolean;\n+      --  Determine whether type Iter_Typ is a predefined forward or reversible\n+      --  iterator.\n+\n+      ----------------------\n+      -- Denotes_Iterator --\n+      ----------------------\n+\n+      function Denotes_Iterator (Iter_Typ : Entity_Id) return Boolean is\n+      begin\n+         return\n+           Nam_In (Chars (Iter_Typ), Name_Forward_Iterator,\n+                                     Name_Reversible_Iterator)\n+             and then Is_Predefined_File_Name\n+                        (Unit_File_Name (Get_Source_Unit (Iter_Typ)));\n+      end Denotes_Iterator;\n+\n+      --  Local variables\n+\n+      Iface_Elmt : Elmt_Id;\n+      Ifaces     : Elist_Id;\n+\n+   --  Start of processing for Is_Iterator\n \n    begin\n       --  The type may be a subtype of a descendant of the proper instance of\n       --  the predefined interface type, so we must use the root type of the\n-      --  given type. The same us done for Is_Reversible_Iterator.\n+      --  given type. The same is done for Is_Reversible_Iterator.\n \n       if Is_Class_Wide_Type (Typ)\n-        and then Nam_In (Chars (Root_Type (Typ)), Name_Forward_Iterator,\n-                                              Name_Reversible_Iterator)\n-        and then\n-          Is_Predefined_File_Name\n-            (Unit_File_Name (Get_Source_Unit (Root_Type (Typ))))\n+        and then Denotes_Iterator (Root_Type (Typ))\n       then\n          return True;\n \n@@ -12139,16 +12155,11 @@ package body Sem_Util is\n          return True;\n \n       else\n-         Collect_Interfaces (Typ, Ifaces_List);\n+         Collect_Interfaces (Typ, Ifaces);\n \n-         Iface_Elmt := First_Elmt (Ifaces_List);\n+         Iface_Elmt := First_Elmt (Ifaces);\n          while Present (Iface_Elmt) loop\n-            Iface := Node (Iface_Elmt);\n-            if Chars (Iface) = Name_Forward_Iterator\n-              and then\n-                Is_Predefined_File_Name\n-                  (Unit_File_Name (Get_Source_Unit (Iface)))\n-            then\n+            if Denotes_Iterator (Node (Iface_Elmt)) then\n                return True;\n             end if;\n "}]}