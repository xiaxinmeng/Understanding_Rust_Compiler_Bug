{"sha": "7daef9aceb80787d9fd64b4e110b175b4d9e5a9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RhZWY5YWNlYjgwNzg3ZDlmZDY0YjRlMTEwYjE3NWI0ZDllNWE5ZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2019-05-28T13:31:16Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2019-05-28T13:31:16Z"}, "message": "[PATCH] Commonize anon-name generation\n\nhttps://gcc.gnu.org/ml/gcc-patches/2019-05/msg01699.html\n\t* tree.h (IDENTIFIER_ANON_P): New.\n\t(anon_aggrname_format, anon_aggname_p): Don't declare.\n\t(make_anon_name): Declare.\n\t* lto-streamer-out.c (DFS::DFS_write_tree_body): Use IDENTIFIER_ANON_P.\n\t(hash_tree): Likewise.\n\t* tree-streamer-out.c (write_ts_decl_minimal_tree): Likewise.\n\t* tree.c (anon_aggrname_p, anon_aggrname_format): Delete.\n\t(anon_cnt, make_anon_name): New.\n\n \tgcc/cp/\n\t* cp-tree.h (make_anon_name): Drop declaration.\n\t(TYPE_UNNAMED_P): Use IDENTIFIER_ANON_P.\n\t* cp-lang.c (cxx_dwarf_name): Likewise.\n\t* class.c (find_flexarrays): Likewise.\n\t* decl.c (name_unnamed_type, xref_tag_1): Likewise.\n\t* error.c (dump_aggr_type): Likewise.\n\t* pt.c (push_template_decl_real): Likewise.\n\t* name-lookup.c (consider_binding_level): Likewise.\n\t(anon_cnt, make_anon_name): Delete.\n\n\tgcc/d/\n\t* types.cc (fixup_anonymous_offset): Use IDENTIFIER_ANON_P.\n\t(layout_aggregate_members): Use make_anon_name.\n\nFrom-SVN: r271702", "tree": {"sha": "e8ff7e7170740fbcd3cf83d7662f6be7b2bf2ee0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8ff7e7170740fbcd3cf83d7662f6be7b2bf2ee0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7daef9aceb80787d9fd64b4e110b175b4d9e5a9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7daef9aceb80787d9fd64b4e110b175b4d9e5a9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7daef9aceb80787d9fd64b4e110b175b4d9e5a9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7daef9aceb80787d9fd64b4e110b175b4d9e5a9e/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3253d4f0266fb7aa4e70cf6afcfac9b690cfed4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3253d4f0266fb7aa4e70cf6afcfac9b690cfed4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3253d4f0266fb7aa4e70cf6afcfac9b690cfed4a"}], "stats": {"total": 166, "additions": 83, "deletions": 83}, "files": [{"sha": "1bbe8950e9942dfb5e973b1c1282538aa300e5dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7daef9aceb80787d9fd64b4e110b175b4d9e5a9e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7daef9aceb80787d9fd64b4e110b175b4d9e5a9e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7daef9aceb80787d9fd64b4e110b175b4d9e5a9e", "patch": "@@ -1,3 +1,14 @@\n+2019-05-28  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* tree.h (IDENTIFIER_ANON_P): New.\n+\t(anon_aggrname_format, anon_aggname_p): Don't declare.\n+\t(make_anon_name): Declare.\n+\t* lto-streamer-out.c (DFS::DFS_write_tree_body): Use IDENTIFIER_ANON_P.\n+\t(hash_tree): Likewise.\n+\t* tree-streamer-out.c (write_ts_decl_minimal_tree): Likewise.\n+\t* tree.c (anon_aggrname_p, anon_aggrname_format): Delete.\n+\t(anon_cnt, make_anon_name): New.\n+\n 2019-05-28  Martin Liska  <mliska@suse.cz>\n \n \tPR other/90315"}, {"sha": "001c53ee1fcf7b1583e7a398ba883347713d9c05", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7daef9aceb80787d9fd64b4e110b175b4d9e5a9e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7daef9aceb80787d9fd64b4e110b175b4d9e5a9e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7daef9aceb80787d9fd64b4e110b175b4d9e5a9e", "patch": "@@ -1,3 +1,15 @@\n+2019-05-28  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (make_anon_name): Drop declaration.\n+\t(TYPE_UNNAMED_P): Use IDENTIFIER_ANON_P.\n+\t* cp-lang.c (cxx_dwarf_name): Likewise.\n+\t* class.c (find_flexarrays): Likewise.\n+\t* decl.c (name_unnamed_type, xref_tag_1): Likewise.\n+\t* error.c (dump_aggr_type): Likewise.\n+\t* pt.c (push_template_decl_real): Likewise.\n+\t* name-lookup.c (consider_binding_level): Likewise.\n+\t(anon_cnt, make_anon_name): Delete.\n+\n 2019-05-25  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/90572 - wrong disambiguation in friend declaration."}, {"sha": "a2585a61f96bfc32617ece38af8f02c176405c5f", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7daef9aceb80787d9fd64b4e110b175b4d9e5a9e/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7daef9aceb80787d9fd64b4e110b175b4d9e5a9e/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=7daef9aceb80787d9fd64b4e110b175b4d9e5a9e", "patch": "@@ -6585,7 +6585,7 @@ find_flexarrays (tree t, flexmems_t *fmem, bool base_p,\n       if (TREE_CODE (fld) == TYPE_DECL\n \t  && DECL_IMPLICIT_TYPEDEF_P (fld)\n \t  && CLASS_TYPE_P (TREE_TYPE (fld))\n-\t  && anon_aggrname_p (DECL_NAME (fld)))\n+\t  && IDENTIFIER_ANON_P (DECL_NAME (fld)))\n \t{\n \t  /* Check the nested unnamed type referenced via a typedef\n \t     independently of FMEM (since it's not a data member of"}, {"sha": "b725dece4bb54232ce88dc611072e4d99aeb6591", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7daef9aceb80787d9fd64b4e110b175b4d9e5a9e/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7daef9aceb80787d9fd64b4e110b175b4d9e5a9e/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=7daef9aceb80787d9fd64b4e110b175b4d9e5a9e", "patch": "@@ -110,7 +110,7 @@ cxx_dwarf_name (tree t, int verbosity)\n   gcc_assert (DECL_P (t));\n \n   if (DECL_NAME (t)\n-      && (anon_aggrname_p (DECL_NAME (t)) || LAMBDA_TYPE_P (t)))\n+      && (IDENTIFIER_ANON_P (DECL_NAME (t)) || LAMBDA_TYPE_P (t)))\n     return NULL;\n   if (verbosity >= 2)\n     return decl_as_dwarf_string (t,"}, {"sha": "7a74fd4fac5696473d960dd09731753b930b5942", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7daef9aceb80787d9fd64b4e110b175b4d9e5a9e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7daef9aceb80787d9fd64b4e110b175b4d9e5a9e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=7daef9aceb80787d9fd64b4e110b175b4d9e5a9e", "patch": "@@ -1937,7 +1937,7 @@ enum languages { lang_c, lang_cplusplus };\n \n /* Nonzero if NODE has no name for linkage purposes.  */\n #define TYPE_UNNAMED_P(NODE) \\\n-  (OVERLOAD_TYPE_P (NODE) && anon_aggrname_p (TYPE_LINKAGE_IDENTIFIER (NODE)))\n+  (OVERLOAD_TYPE_P (NODE) && IDENTIFIER_ANON_P (TYPE_LINKAGE_IDENTIFIER (NODE)))\n \n /* The _DECL for this _TYPE.  */\n #define TYPE_MAIN_DECL(NODE) (TYPE_STUB_DECL (TYPE_MAIN_VARIANT (NODE)))\n@@ -6350,7 +6350,6 @@ extern tree strip_fnptr_conv\t\t\t(tree);\n \n /* in name-lookup.c */\n extern void maybe_push_cleanup_level\t\t(tree);\n-extern tree make_anon_name\t\t\t(void);\n extern tree maybe_push_decl\t\t\t(tree);\n extern tree current_decl_namespace\t\t(void);\n "}, {"sha": "5b22f65ec8d295ba27718b90e71581be9b95190f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7daef9aceb80787d9fd64b4e110b175b4d9e5a9e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7daef9aceb80787d9fd64b4e110b175b4d9e5a9e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=7daef9aceb80787d9fd64b4e110b175b4d9e5a9e", "patch": "@@ -10233,15 +10233,12 @@ name_unnamed_type (tree type, tree decl)\n \n   /* Replace the anonymous name with the real name everywhere.  */\n   for (tree t = TYPE_MAIN_VARIANT (type); t; t = TYPE_NEXT_VARIANT (t))\n-    {\n-      if (anon_aggrname_p (TYPE_IDENTIFIER (t)))\n-\t/* We do not rename the debug info representing the\n-\t   unnamed tagged type because the standard says in\n-\t   [dcl.typedef] that the naming applies only for\n-\t   linkage purposes.  */\n-\t/*debug_hooks->set_name (t, decl);*/\n-\tTYPE_NAME (t) = decl;\n-    }\n+    if (IDENTIFIER_ANON_P (TYPE_IDENTIFIER (t)))\n+      /* We do not rename the debug info representing the unnamed\n+\t tagged type because the standard says in [dcl.typedef] that\n+\t the naming applies only for linkage purposes.  */\n+      /*debug_hooks->set_name (t, decl);*/\n+      TYPE_NAME (t) = decl;\n \n   if (TYPE_LANG_SPECIFIC (type))\n     TYPE_WAS_UNNAMED (type) = 1;\n@@ -14061,7 +14058,7 @@ xref_tag_1 (enum tag_types tag_code, tree name,\n   /* In case of anonymous name, xref_tag is only called to\n      make type node and push name.  Name lookup is not required.  */\n   tree t = NULL_TREE;\n-  if (scope != ts_lambda && !anon_aggrname_p (name))\n+  if (scope != ts_lambda && !IDENTIFIER_ANON_P (name))\n     t = lookup_and_check_tag  (tag_code, name, scope, template_header_p);\n   \n   if (t == error_mark_node)"}, {"sha": "5e7c36d869862c31347b775b5448cf137e938134", "filename": "gcc/cp/error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7daef9aceb80787d9fd64b4e110b175b4d9e5a9e/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7daef9aceb80787d9fd64b4e110b175b4d9e5a9e/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=7daef9aceb80787d9fd64b4e110b175b4d9e5a9e", "patch": "@@ -738,7 +738,7 @@ dump_aggr_type (cxx_pretty_printer *pp, tree t, int flags)\n       name = DECL_NAME (name);\n     }\n \n-  if (name == 0 || anon_aggrname_p (name))\n+  if (!name || IDENTIFIER_ANON_P (name))\n     {\n       if (flags & TFF_CLASS_KEY_OR_ENUM)\n \tpp_string (pp, M_(\"<unnamed>\"));"}, {"sha": "242e30f8a125a971b663d09ec25f26bf3bf7f22f", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7daef9aceb80787d9fd64b4e110b175b4d9e5a9e/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7daef9aceb80787d9fd64b4e110b175b4d9e5a9e/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=7daef9aceb80787d9fd64b4e110b175b4d9e5a9e", "patch": "@@ -3797,25 +3797,9 @@ constructor_name_p (tree name, tree type)\n   return false;\n }\n \n-/* Counter used to create anonymous type names.  */\n-\n-static GTY(()) int anon_cnt;\n-\n-/* Return an IDENTIFIER which can be used as a name for\n-   unnamed structs and unions.  */\n-\n-tree\n-make_anon_name (void)\n-{\n-  char buf[32];\n-\n-  sprintf (buf, anon_aggrname_format (), anon_cnt++);\n-  return get_identifier (buf);\n-}\n-\n-/* This code is practically identical to that for creating\n-   anonymous names, but is just used for lambdas instead.  This isn't really\n-   necessary, but it's convenient to avoid treating lambdas like other\n+/* This code is practically identical to that for creating anonymous\n+   names, but is just used for lambdas instead.  This isn't really\n+   necessary, but it's convenient to avoid mistaking lambdas for other\n    unnamed types.  */\n \n static GTY(()) int lambda_cnt = 0;\n@@ -5982,7 +5966,7 @@ consider_binding_level (tree name, best_match <tree, const char *> &bm,\n \n       /* Don't suggest names that are for anonymous aggregate types, as\n \t they are an implementation detail generated by the compiler.  */\n-      if (anon_aggrname_p (suggestion))\n+      if (IDENTIFIER_ANON_P (suggestion))\n \tcontinue;\n \n       const char *suggestion_str = IDENTIFIER_POINTER (suggestion);"}, {"sha": "e52668ab49d6b80301ccffffbb9d7094d25a964a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7daef9aceb80787d9fd64b4e110b175b4d9e5a9e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7daef9aceb80787d9fd64b4e110b175b4d9e5a9e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=7daef9aceb80787d9fd64b4e110b175b4d9e5a9e", "patch": "@@ -5501,7 +5501,7 @@ push_template_decl_real (tree decl, bool is_friend)\n       if (DECL_CLASS_SCOPE_P (decl))\n \tmember_template_p = true;\n       if (TREE_CODE (decl) == TYPE_DECL\n-\t  && anon_aggrname_p (DECL_NAME (decl)))\n+\t  && IDENTIFIER_ANON_P (DECL_NAME (decl)))\n \t{\n \t  error (\"template class without a name\");\n \t  return error_mark_node;"}, {"sha": "800dcb0abbce925962e0ae0f285d3866c26afd74", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7daef9aceb80787d9fd64b4e110b175b4d9e5a9e/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7daef9aceb80787d9fd64b4e110b175b4d9e5a9e/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=7daef9aceb80787d9fd64b4e110b175b4d9e5a9e", "patch": "@@ -1,3 +1,8 @@\n+2019-05-24  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* types.cc (fixup_anonymous_offset): Use IDENTIFIER_ANON_P.\n+\t(layout_aggregate_members): Use make_anon_name.\n+\n 2019-05-16  Martin Sebor  <msebor@redhat.com>\n \n         * d-builtins.cc (d_init_builtins): Quote keywords, operators,"}, {"sha": "8f0aa37f578b6330bb0dd9e82477229798b92e0d", "filename": "gcc/d/types.cc", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7daef9aceb80787d9fd64b4e110b175b4d9e5a9e/gcc%2Fd%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7daef9aceb80787d9fd64b4e110b175b4d9e5a9e/gcc%2Fd%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Ftypes.cc?ref=7daef9aceb80787d9fd64b4e110b175b4d9e5a9e", "patch": "@@ -239,7 +239,7 @@ fixup_anonymous_offset (tree fields, tree offset)\n       /* Traverse all nested anonymous aggregates to update their offset.\n \t Set the anonymous decl offset to its first member.  */\n       tree ftype = TREE_TYPE (fields);\n-      if (TYPE_NAME (ftype) && anon_aggrname_p (TYPE_IDENTIFIER (ftype)))\n+      if (TYPE_NAME (ftype) && IDENTIFIER_ANON_P (TYPE_IDENTIFIER (ftype)))\n \t{\n \t  tree vfields = TYPE_FIELDS (ftype);\n \t  fixup_anonymous_offset (vfields, offset);\n@@ -324,12 +324,7 @@ layout_aggregate_members (Dsymbols *members, tree context, bool inherited_p)\n       AnonDeclaration *ad = sym->isAnonDeclaration ();\n       if (ad != NULL)\n \t{\n-\t  /* Use a counter to create anonymous type names.  */\n-\t  static int anon_cnt = 0;\n-\t  char buf[32];\n-\t  sprintf (buf, anon_aggrname_format (), anon_cnt++);\n-\n-\t  tree ident = get_identifier (buf);\n+\t  tree ident = make_anon_name ();\n \t  tree type = make_node (ad->isunion ? UNION_TYPE : RECORD_TYPE);\n \t  ANON_AGGR_TYPE_P (type) = 1;\n \t  d_keep (type);"}, {"sha": "b1084f4d3c5598c44b3674728f3c389ab6f63d4e", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7daef9aceb80787d9fd64b4e110b175b4d9e5a9e/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7daef9aceb80787d9fd64b4e110b175b4d9e5a9e/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=7daef9aceb80787d9fd64b4e110b175b4d9e5a9e", "patch": "@@ -782,7 +782,7 @@ DFS::DFS_write_tree_body (struct output_block *ob,\n       /* Drop names that were created for anonymous entities.  */\n       if (DECL_NAME (expr)\n \t  && TREE_CODE (DECL_NAME (expr)) == IDENTIFIER_NODE\n-\t  && anon_aggrname_p (DECL_NAME (expr)))\n+\t  && IDENTIFIER_ANON_P (DECL_NAME (expr)))\n \t;\n       else\n \tDFS_follow_tree_edge (DECL_NAME (expr));\n@@ -1211,7 +1211,7 @@ hash_tree (struct streamer_tree_cache_d *cache, hash_map<tree, hashval_t> *map,\n       /* Drop names that were created for anonymous entities.  */\n       if (DECL_NAME (t)\n \t  && TREE_CODE (DECL_NAME (t)) == IDENTIFIER_NODE\n-\t  && anon_aggrname_p (DECL_NAME (t)))\n+\t  && IDENTIFIER_ANON_P (DECL_NAME (t)))\n \t;\n       else\n \tvisit (DECL_NAME (t));"}, {"sha": "b89cb6547dbc3168fd01371e95f582e75ecb2a2b", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7daef9aceb80787d9fd64b4e110b175b4d9e5a9e/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7daef9aceb80787d9fd64b4e110b175b4d9e5a9e/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=7daef9aceb80787d9fd64b4e110b175b4d9e5a9e", "patch": "@@ -579,7 +579,7 @@ write_ts_decl_minimal_tree_pointers (struct output_block *ob, tree expr,\n   /* Drop names that were created for anonymous entities.  */\n   if (DECL_NAME (expr)\n       && TREE_CODE (DECL_NAME (expr)) == IDENTIFIER_NODE\n-      && anon_aggrname_p (DECL_NAME (expr)))\n+      && IDENTIFIER_ANON_P (DECL_NAME (expr)))\n     stream_write_tree (ob, NULL_TREE, ref_p);\n   else\n     stream_write_tree (ob, DECL_NAME (expr), ref_p);"}, {"sha": "8ca72110526cf7d71fbd9069494393867cf12489", "filename": "gcc/tree.c", "status": "modified", "additions": 26, "deletions": 34, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7daef9aceb80787d9fd64b4e110b175b4d9e5a9e/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7daef9aceb80787d9fd64b4e110b175b4d9e5a9e/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=7daef9aceb80787d9fd64b4e110b175b4d9e5a9e", "patch": "@@ -9747,40 +9747,32 @@ clean_symbol_name (char *p)\n       *p = '_';\n }\n \n-/* For anonymous aggregate types, we need some sort of name to\n-   hold on to.  In practice, this should not appear, but it should\n-   not be harmful if it does.  */\n-bool \n-anon_aggrname_p(const_tree id_node)\n-{\n-#ifndef NO_DOT_IN_LABEL\n- return (IDENTIFIER_POINTER (id_node)[0] == '.'\n-\t && IDENTIFIER_POINTER (id_node)[1] == '_');\n-#else /* NO_DOT_IN_LABEL */\n-#ifndef NO_DOLLAR_IN_LABEL\n-  return (IDENTIFIER_POINTER (id_node)[0] == '$' \\\n-\t  && IDENTIFIER_POINTER (id_node)[1] == '_');\n-#else /* NO_DOLLAR_IN_LABEL */\n-#define ANON_AGGRNAME_PREFIX \"__anon_\"\n-  return (!strncmp (IDENTIFIER_POINTER (id_node), ANON_AGGRNAME_PREFIX, \n-\t\t    sizeof (ANON_AGGRNAME_PREFIX) - 1));\n-#endif\t/* NO_DOLLAR_IN_LABEL */\n-#endif\t/* NO_DOT_IN_LABEL */\n-}\n-\n-/* Return a format for an anonymous aggregate name.  */\n-const char *\n-anon_aggrname_format()\n-{\n-#ifndef NO_DOT_IN_LABEL\n- return \"._%d\";\n-#else /* NO_DOT_IN_LABEL */\n-#ifndef NO_DOLLAR_IN_LABEL\n-  return \"$_%d\";\n-#else /* NO_DOLLAR_IN_LABEL */\n-  return \"__anon_%d\";\n-#endif\t/* NO_DOLLAR_IN_LABEL */\n-#endif\t/* NO_DOT_IN_LABEL */\n+static GTY(()) unsigned anon_cnt = 0; /* Saved for PCH.  */\n+\n+/* Create a unique anonymous identifier.  The identifier is still a\n+   valid assembly label.  */\n+\n+tree\n+make_anon_name ()\n+{\n+  const char *fmt = \n+#if !defined (NO_DOT_IN_LABEL)\n+    \".\"\n+#elif !defined (NO_DOLLAR_IN_LABEL)\n+    \"$\"\n+#else\n+    \"_\"\n+#endif\n+    \"_anon_%d\";\n+\n+  char buf[24];\n+  int len = snprintf (buf, sizeof (buf), fmt, anon_cnt++);\n+  gcc_checking_assert (len < int (sizeof (buf)));\n+\n+  tree id = get_identifier_with_length (buf, len);\n+  IDENTIFIER_ANON_P (id) = true;\n+\n+  return id;\n }\n \n /* Generate a name for a special-purpose function."}, {"sha": "7009c673a1c3464de3f7dbe754ce7f1804d40862", "filename": "gcc/tree.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7daef9aceb80787d9fd64b4e110b175b4d9e5a9e/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7daef9aceb80787d9fd64b4e110b175b4d9e5a9e/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=7daef9aceb80787d9fd64b4e110b175b4d9e5a9e", "patch": "@@ -932,6 +932,11 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n #define TREE_DEPRECATED(NODE) \\\n   ((NODE)->base.deprecated_flag)\n \n+/* Nonzero indicates an IDENTIFIER_NODE that names an anonymous\n+   aggregate, (as created by anon_aggr_name_format).  */\n+#define IDENTIFIER_ANON_P(NODE) \\\n+  (IDENTIFIER_NODE_CHECK (NODE)->base.private_flag)\n+\n /* Nonzero in an IDENTIFIER_NODE if the name is a local alias, whose\n    uses are to be substituted for uses of the TREE_CHAINed identifier.  */\n #define IDENTIFIER_TRANSPARENT_ALIAS(NODE) \\\n@@ -5441,9 +5446,9 @@ target_opts_for_fn (const_tree fndecl)\n \n /* For anonymous aggregate types, we need some sort of name to\n    hold on to.  In practice, this should not appear, but it should\n-   not be harmful if it does.  */\n-extern const char *anon_aggrname_format();\n-extern bool anon_aggrname_p (const_tree);\n+   not be harmful if it does.  Identifiers returned will be\n+   IDENTIFIER_ANON_P.  */\n+extern tree make_anon_name ();\n \n /* The tree and const_tree overload templates.   */\n namespace wi"}]}