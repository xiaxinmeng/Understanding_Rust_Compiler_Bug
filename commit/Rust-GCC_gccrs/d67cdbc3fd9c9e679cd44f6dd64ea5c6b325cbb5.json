{"sha": "d67cdbc3fd9c9e679cd44f6dd64ea5c6b325cbb5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY3Y2RiYzNmZDljOWU2NzljZDQ0ZjZkZDY0ZWE1YzZiMzI1Y2JiNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@casey.cygnus.com", "date": "1999-12-15T01:34:16Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-12-15T01:34:16Z"}, "message": "error.c (dump_decl): operator==, not operator ==.\n\n        * error.c (dump_decl): operator==, not operator ==.\n        (op_to_string): Likewise.\n\n        * decl.c (compute_array_index_type): Handle null name.\n\n        * decl2.c (ambiguous_decl): Fix to match comment.\n        (lookup_using_namespace): Adjust.\n\n        * decl2.c (import_export_class): Don't ignore dllimport.\n\nFrom-SVN: r30935", "tree": {"sha": "710cfe44b75b8c89261643cec26ad7a6f260362b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/710cfe44b75b8c89261643cec26ad7a6f260362b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d67cdbc3fd9c9e679cd44f6dd64ea5c6b325cbb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d67cdbc3fd9c9e679cd44f6dd64ea5c6b325cbb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d67cdbc3fd9c9e679cd44f6dd64ea5c6b325cbb5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d67cdbc3fd9c9e679cd44f6dd64ea5c6b325cbb5/comments", "author": null, "committer": null, "parents": [{"sha": "08b962b08b68b6568cf689d8935c9aa5d410a228", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08b962b08b68b6568cf689d8935c9aa5d410a228", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08b962b08b68b6568cf689d8935c9aa5d410a228"}], "stats": {"total": 46, "additions": 35, "deletions": 11}, "files": [{"sha": "0614ab00eb0a139626314dc1e4677600518085c3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67cdbc3fd9c9e679cd44f6dd64ea5c6b325cbb5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67cdbc3fd9c9e679cd44f6dd64ea5c6b325cbb5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d67cdbc3fd9c9e679cd44f6dd64ea5c6b325cbb5", "patch": "@@ -1,3 +1,15 @@\n+1999-12-14  Jason Merrill  <jason@casey.cygnus.com>\n+\n+\t* error.c (dump_decl): operator==, not operator ==.\n+\t(op_to_string): Likewise.\n+\n+\t* decl.c (compute_array_index_type): Handle null name.\n+\n+\t* decl2.c (ambiguous_decl): Fix to match comment.\n+\t(lookup_using_namespace): Adjust.\n+\n+\t* decl2.c (import_export_class): Don't ignore dllimport.\n+\n 1999-12-14  Mark Mitchell  <mark@codesourcery.com>\n \n \t* class.c (check_field_decls): Split out from ..."}, {"sha": "3f7fe2a59188f0ba01be15d67f811d667ea85d45", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67cdbc3fd9c9e679cd44f6dd64ea5c6b325cbb5/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67cdbc3fd9c9e679cd44f6dd64ea5c6b325cbb5/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d67cdbc3fd9c9e679cd44f6dd64ea5c6b325cbb5", "patch": "@@ -8743,7 +8743,10 @@ compute_array_index_type (name, size)\n       && TREE_CODE (TREE_TYPE (size)) != ENUMERAL_TYPE\n       && TREE_CODE (TREE_TYPE (size)) != BOOLEAN_TYPE)\n     {\n-      cp_error (\"size of array `%D' has non-integer type\", name);\n+      if (name)\n+\tcp_error (\"size of array `%D' has non-integer type\", name);\n+      else\n+\tcp_error (\"size of array has non-integer type\");\n       size = integer_one_node;\n     }\n \n@@ -8762,14 +8765,22 @@ compute_array_index_type (name, size)\n       /* An array must have a positive number of elements.  */\n       if (INT_CST_LT (size, integer_zero_node))\n \t{\n-\t  cp_error (\"size of array `%D' is negative\", name);\n+\t  if (name)\n+\t    cp_error (\"size of array `%D' is negative\", name);\n+\t  else\n+\t    cp_error (\"size of array is negative\");\n \t  size = integer_one_node;\n \t}\n       /* Except that an extension we allow zero-sized arrays.  We\n \t always allow them in system headers because glibc uses \n \t them.  */\n       else if (integer_zerop (size) && pedantic && !in_system_header)\n-\tcp_pedwarn (\"ANSI C++ forbids zero-size array `%D'\", name);\n+\t{\n+\t  if (name)\n+\t    cp_pedwarn (\"ANSI C++ forbids zero-size array `%D'\", name);\n+\t  else\n+\t    cp_pedwarn (\"ANSI C++ forbids zero-size array\");\n+\t}\n     }\n \n   /* Compute the index of the largest element in the array.  It is"}, {"sha": "dbf7ff329312ff4a8777f0232001638badb1046b", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67cdbc3fd9c9e679cd44f6dd64ea5c6b325cbb5/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67cdbc3fd9c9e679cd44f6dd64ea5c6b325cbb5/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=d67cdbc3fd9c9e679cd44f6dd64ea5c6b325cbb5", "patch": "@@ -2458,9 +2458,10 @@ import_export_class (ctype)\n #ifdef VALID_MACHINE_TYPE_ATTRIBUTE\n   /* FIXME this should really use some sort of target-independent macro.  */\n   if (lookup_attribute (\"dllimport\", TYPE_ATTRIBUTES (ctype)))\n-    import_export = -1;\n+    /* Use -2 so we survive the MULTIPLE_SYMBOL_SPACES check below.  */\n+    import_export = -2;\n   else if (lookup_attribute (\"dllexport\", TYPE_ATTRIBUTES (ctype)))\n-    import_export = 1;\n+    import_export = 2;\n #endif\n \n   /* If we got -fno-implicit-templates, we import template classes that\n@@ -4264,7 +4265,7 @@ ambiguous_decl (name, old, new, flags)\n \t\t}\n               cp_error_at (\"  also declared as `%#D' here\", val);\n             }\n-\t  return error_mark_node;\n+\t  BINDING_VALUE (old) = error_mark_node;\n \t}\n     }\n   /* ... and copy the type. */\n@@ -4312,7 +4313,7 @@ lookup_using_namespace (name, val, usings, scope, flags, spacesp)\n \t/* Resolve ambiguities. */\n \tval = ambiguous_decl (name, val, val1, flags);\n       }\n-  return val != error_mark_node;\n+  return BINDING_VALUE (val) != error_mark_node;\n }\n \n /* [namespace.qual]"}, {"sha": "61d127071b7820ee2e5f7a695567b203fa8505c1", "filename": "gcc/cp/error.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67cdbc3fd9c9e679cd44f6dd64ea5c6b325cbb5/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67cdbc3fd9c9e679cd44f6dd64ea5c6b325cbb5/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=d67cdbc3fd9c9e679cd44f6dd64ea5c6b325cbb5", "patch": "@@ -945,7 +945,7 @@ dump_decl (t, flags)\n \telse if (IDENTIFIER_OPNAME_P (t))\n \t  {\n \t    const char *name_string = operator_name_string (t);\n-\t    OB_PUTS (\"operator \");\n+\t    OB_PUTS (\"operator\");\n \t    OB_PUTCP (name_string);\n \t  }\n \telse\n@@ -1276,7 +1276,7 @@ dump_function_name (t, flags)\n   else if (IDENTIFIER_OPNAME_P (name))\n     {\n       const char *name_string = operator_name_string (name);\n-      OB_PUTS (\"operator \");\n+      OB_PUTS (\"operator\");\n       OB_PUTCP (name_string);\n     }\n   else\n@@ -2205,7 +2205,7 @@ decl_to_string (decl, verbose)\n      int verbose;\n {\n   enum tree_string_flags flags = 0;\n-  \n+\n   if (TREE_CODE (decl) == TYPE_DECL || TREE_CODE (decl) == RECORD_TYPE\n       || TREE_CODE (decl) == UNION_TYPE || TREE_CODE (decl) == ENUMERAL_TYPE)\n     flags = TS_AGGR_TAGS;\n@@ -2312,7 +2312,7 @@ op_to_string (p, v)\n   if (p == 0)\n     return \"{unknown}\";\n   \n-  strcpy (buf + 9, opname_tab [p]);\n+  strcpy (buf + 8, opname_tab [p]);\n   return buf;\n }\n "}]}