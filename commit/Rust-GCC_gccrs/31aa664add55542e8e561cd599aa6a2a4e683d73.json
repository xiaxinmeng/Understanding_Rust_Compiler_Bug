{"sha": "31aa664add55542e8e561cd599aa6a2a4e683d73", "node_id": "C_kwDOANBUbNoAKDMxYWE2NjRhZGQ1NTU0MmU4ZTU2MWNkNTk5YWE2YTJhNGU2ODNkNzM", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2022-01-12T01:37:16Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2022-01-12T02:51:16Z"}, "message": "cris: Avoid format-string-related warnings in calls to error functions\n\nThese tweaks are installed to avoid build-warnings for\nconfig/cris/cris.c, like:\n\nx/gcc/config/cris/cris.c: In function 'const char* cris_op_str(rtx)':\nx/gcc/config/cris/cris.c:728:23: warning: unquoted identifier or keyword \\\n'cris_op_str' in format [-Wformat-diag]\n  728 |       internal_error (\"MULT case in cris_op_str\");\n      |                       ^~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file included from ./tm.h:20,\n                 from x/gcc/backend.h:28,\n                 from x/gcc/config/cris/cris.c:26:\nx/gcc/config/cris/cris.c: In function 'void cris_expand_return(bool)':\nx/gcc/config/cris/cris.h:42:33: warning: unquoted operator '->' in \\\nformat [-Wformat-diag]\n   42 |  do { if (!(x)) internal_error (\"CRIS-port assertion failed: \" #x); \\\n} while (0)\nx/gcc/config/cris/cris.c:1862:3: note: in expansion of macro 'CRIS_ASSERT'\n 1862 |   CRIS_ASSERT (cfun->machine->return_type != CRIS_RETINSN_RET \\\n|| !on_stack);\n      |   ^~~~~~~~~~~\nx/gcc/config/cris/cris.c: In function 'void cris_option_override()':\nx/gcc/config/cris/cris.c:2298:9: warning: space followed by punctuation \\\ncharacter ':' [-Wformat-diag]\n 2298 |  error (\"unknown CRIS version specification in %<-march=%> or \"\n      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n 2299 |         \"%<-mcpu=%> : %s\", cris_cpu_str);\n      |         ~~~~~~~~~~~~~~~~~\nx/gcc/config/cris/cris.c:2334:9: warning: space followed by punctuation \\\ncharacter ':' [-Wformat-diag]\n 2334 |  error (\"unknown CRIS cpu version specification in %<-mtune=%> : %s\",\n      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file included from ./tm.h:20,\n                 from x/gcc/backend.h:28,\n                 from x/gcc/config/cris/cris.c:26:\nx/gcc/config/cris/cris.c: In function 'rtx_def* cris_split_movdx(rtx_def**)':\nx/gcc/config/cris/cris.h:42:33: warning: unquoted identifier or keyword \\\n'GET_CODE' in format [-Wformat-diag]\n   42 |  do { if (!(x)) internal_error (\"CRIS-port assertion failed: \" #x); \\\n} while (0)\nx/gcc/config/cris/cris.c:2457:3: note: in expansion of macro 'CRIS_ASSERT'\n 2457 |   CRIS_ASSERT (GET_CODE (dest) != SUBREG && GET_CODE (src) != SUBREG);\n      |   ^~~~~~~~~~~\n\nNot that I therefore agree that operators, identifiers and keywords\nshould have to be dressed up like this for internal error messages;\nthey were more readable without these garments, if only slightly so.\n\n2022-01-11  Hans-Peter Nilsson  <hp@axis.com>\n\n\t* config/cris/cris.c: Quote identifiers in parameters to error\n\tand internal_error, and remove extraneous spaces with punctuation.\n\t* config/cris/cris.h (CRIS_ASSERT): When passing on stringified\n\texpression to internal_error, pass it as a parameter instead of\n\tappending it to the format part.", "tree": {"sha": "51c9ee70212617a03b49572b2cd52ebbe846aa0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51c9ee70212617a03b49572b2cd52ebbe846aa0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31aa664add55542e8e561cd599aa6a2a4e683d73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31aa664add55542e8e561cd599aa6a2a4e683d73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31aa664add55542e8e561cd599aa6a2a4e683d73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31aa664add55542e8e561cd599aa6a2a4e683d73/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8feccb8b08a42fa44caff69c8d82860caef3574", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8feccb8b08a42fa44caff69c8d82860caef3574", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8feccb8b08a42fa44caff69c8d82860caef3574"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "63e6834b9cfbac3de4e24515543a988b8da4dbf3", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31aa664add55542e8e561cd599aa6a2a4e683d73/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31aa664add55542e8e561cd599aa6a2a4e683d73/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=31aa664add55542e8e561cd599aa6a2a4e683d73", "patch": "@@ -725,7 +725,7 @@ cris_op_str (rtx x)\n \t an operator, for immediate output.  If that ever happens for\n \t MULT, we need to apply TARGET_MUL_BUG in the caller.  Make sure\n \t we notice.  */\n-      internal_error (\"MULT case in cris_op_str\");\n+      internal_error (\"MULT case in %<cris_op_str%>\");\n       break;\n \n     case DIV:\n@@ -2213,7 +2213,7 @@ cris_side_effect_mode_ok (enum rtx_code code, rtx *ops,\n     }\n \n   /* If we get here, the caller got its initial tests wrong.  */\n-  internal_error (\"internal error: cris_side_effect_mode_ok with bad operands\");\n+  internal_error (\"internal error: %<cris_side_effect_mode_ok%> with bad operands\");\n }\n \n /* Queue an .ident string in the queue of top-level asm statements.\n@@ -2296,7 +2296,7 @@ cris_option_override (void)\n \n       if (cris_cpu_version < 0 || cris_cpu_version > 10)\n \terror (\"unknown CRIS version specification in %<-march=%> or \"\n-\t       \"%<-mcpu=%> : %s\", cris_cpu_str);\n+\t       \"%<-mcpu=%>: %s\", cris_cpu_str);\n \n       /* Set the target flags.  */\n       if (cris_cpu_version >= CRIS_CPU_ETRAX4)\n@@ -2331,7 +2331,7 @@ cris_option_override (void)\n \tcris_tune = 10;\n \n       if (cris_tune < 0 || cris_tune > 32)\n-\terror (\"unknown CRIS cpu version specification in %<-mtune=%> : %s\",\n+\terror (\"unknown CRIS cpu version specification in %<-mtune=%>: %s\",\n \t       cris_tune_str);\n \n       if (cris_tune >= CRIS_CPU_SVINTO)"}, {"sha": "8235509f2337f1a52aa62b5d945089ac1b63e6fc", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31aa664add55542e8e561cd599aa6a2a4e683d73/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31aa664add55542e8e561cd599aa6a2a4e683d73/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=31aa664add55542e8e561cd599aa6a2a4e683d73", "patch": "@@ -39,7 +39,7 @@ along with GCC; see the file COPYING3.  If not see\n /* We don't want to use gcc_assert for everything, as that can be\n    compiled out.  */\n #define CRIS_ASSERT(x) \\\n- do { if (!(x)) internal_error (\"CRIS-port assertion failed: \" #x); } while (0)\n+ do { if (!(x)) internal_error (\"CRIS-port assertion failed: %s\", #x); } while (0)\n \n /* Replacement for REG_P since it does not match SUBREGs.  Happens for\n    testcase Axis-20000320 with gcc-2.9x.  */"}]}