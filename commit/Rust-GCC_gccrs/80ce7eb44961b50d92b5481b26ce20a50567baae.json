{"sha": "80ce7eb44961b50d92b5481b26ce20a50567baae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBjZTdlYjQ0OTYxYjUwZDkyYjU0ODFiMjZjZTIwYTUwNTY3YmFhZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-12-21T07:01:23Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-12-21T07:01:23Z"}, "message": "poly_int: reload<->ira interface\n\nThis patch uses poly_int64 for:\n\n- ira_reuse_stack_slot\n- ira_mark_new_stack_slot\n- ira_spilled_reg_stack_slot::width\n\nall of which are part of the IRA/reload interface.\n\n2017-12-21  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* ira-int.h (ira_spilled_reg_stack_slot::width): Change from\n\tan unsigned int to a poly_uint64.\n\t* ira.h (ira_reuse_stack_slot, ira_mark_new_stack_slot): Take the\n\tsizes as poly_uint64s rather than unsigned ints.\n\t* ira-color.c (ira_reuse_stack_slot, ira_mark_new_stack_slot):\n\tLikewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r255924", "tree": {"sha": "fcde5a366d334d375f7bb38f79072d075184ebfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fcde5a366d334d375f7bb38f79072d075184ebfb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80ce7eb44961b50d92b5481b26ce20a50567baae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80ce7eb44961b50d92b5481b26ce20a50567baae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80ce7eb44961b50d92b5481b26ce20a50567baae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80ce7eb44961b50d92b5481b26ce20a50567baae/comments", "author": null, "committer": null, "parents": [{"sha": "31ae0e43aac40d1c45d00be9cda260c30d87d154", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31ae0e43aac40d1c45d00be9cda260c30d87d154", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31ae0e43aac40d1c45d00be9cda260c30d87d154"}], "stats": {"total": 35, "additions": 23, "deletions": 12}, "files": [{"sha": "bdfcb0cb66077c3ec9b78192156c661c5c702378", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ce7eb44961b50d92b5481b26ce20a50567baae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ce7eb44961b50d92b5481b26ce20a50567baae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=80ce7eb44961b50d92b5481b26ce20a50567baae", "patch": "@@ -1,3 +1,14 @@\n+2017-12-21  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* ira-int.h (ira_spilled_reg_stack_slot::width): Change from\n+\tan unsigned int to a poly_uint64.\n+\t* ira.h (ira_reuse_stack_slot, ira_mark_new_stack_slot): Take the\n+\tsizes as poly_uint64s rather than unsigned ints.\n+\t* ira-color.c (ira_reuse_stack_slot, ira_mark_new_stack_slot):\n+\tLikewise.\n+\n 2017-12-21  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "cfcdc5b23d68231cc0c517bd0cb1968703e72582", "filename": "gcc/ira-color.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ce7eb44961b50d92b5481b26ce20a50567baae/gcc%2Fira-color.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ce7eb44961b50d92b5481b26ce20a50567baae/gcc%2Fira-color.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-color.c?ref=80ce7eb44961b50d92b5481b26ce20a50567baae", "patch": "@@ -4494,8 +4494,8 @@ ira_reassign_pseudos (int *spilled_pseudo_regs, int num,\n    TOTAL_SIZE.  In the case of failure to find a slot which can be\n    used for REGNO, the function returns NULL.  */\n rtx\n-ira_reuse_stack_slot (int regno, unsigned int inherent_size,\n-\t\t      unsigned int total_size)\n+ira_reuse_stack_slot (int regno, poly_uint64 inherent_size,\n+\t\t      poly_uint64 total_size)\n {\n   unsigned int i;\n   int slot_num, best_slot_num;\n@@ -4508,8 +4508,8 @@ ira_reuse_stack_slot (int regno, unsigned int inherent_size,\n \n   ira_assert (! ira_use_lra_p);\n \n-  ira_assert (inherent_size == PSEUDO_REGNO_BYTES (regno)\n-\t      && inherent_size <= total_size\n+  ira_assert (known_eq (inherent_size, PSEUDO_REGNO_BYTES (regno))\n+\t      && known_le (inherent_size, total_size)\n \t      && ALLOCNO_HARD_REGNO (allocno) < 0);\n   if (! flag_ira_share_spill_slots)\n     return NULL_RTX;\n@@ -4532,8 +4532,8 @@ ira_reuse_stack_slot (int regno, unsigned int inherent_size,\n \t  slot = &ira_spilled_reg_stack_slots[slot_num];\n \t  if (slot->mem == NULL_RTX)\n \t    continue;\n-\t  if (slot->width < total_size\n-\t      || GET_MODE_SIZE (GET_MODE (slot->mem)) < inherent_size)\n+\t  if (maybe_lt (slot->width, total_size)\n+\t      || maybe_lt (GET_MODE_SIZE (GET_MODE (slot->mem)), inherent_size))\n \t    continue;\n \n \t  EXECUTE_IF_SET_IN_BITMAP (&slot->spilled_regs,\n@@ -4585,7 +4585,7 @@ ira_reuse_stack_slot (int regno, unsigned int inherent_size,\n     }\n   if (x != NULL_RTX)\n     {\n-      ira_assert (slot->width >= total_size);\n+      ira_assert (known_ge (slot->width, total_size));\n #ifdef ENABLE_IRA_CHECKING\n       EXECUTE_IF_SET_IN_BITMAP (&slot->spilled_regs,\n \t\t\t\tFIRST_PSEUDO_REGISTER, i, bi)\n@@ -4614,15 +4614,15 @@ ira_reuse_stack_slot (int regno, unsigned int inherent_size,\n    TOTAL_SIZE was allocated for REGNO.  We store this info for\n    subsequent ira_reuse_stack_slot calls.  */\n void\n-ira_mark_new_stack_slot (rtx x, int regno, unsigned int total_size)\n+ira_mark_new_stack_slot (rtx x, int regno, poly_uint64 total_size)\n {\n   struct ira_spilled_reg_stack_slot *slot;\n   int slot_num;\n   ira_allocno_t allocno;\n \n   ira_assert (! ira_use_lra_p);\n \n-  ira_assert (PSEUDO_REGNO_BYTES (regno) <= total_size);\n+  ira_assert (known_le (PSEUDO_REGNO_BYTES (regno), total_size));\n   allocno = ira_regno_allocno_map[regno];\n   slot_num = -ALLOCNO_HARD_REGNO (allocno) - 2;\n   if (slot_num == -1)"}, {"sha": "6cda6b7610648a605a45cdb85fbc11935d7c8271", "filename": "gcc/ira-int.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ce7eb44961b50d92b5481b26ce20a50567baae/gcc%2Fira-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ce7eb44961b50d92b5481b26ce20a50567baae/gcc%2Fira-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-int.h?ref=80ce7eb44961b50d92b5481b26ce20a50567baae", "patch": "@@ -604,7 +604,7 @@ struct ira_spilled_reg_stack_slot\n   /* RTL representation of the stack slot.  */\n   rtx mem;\n   /* Size of the stack slot.  */\n-  unsigned int width;\n+  poly_uint64_pod width;\n };\n \n /* The number of elements in the following array.  */"}, {"sha": "d0c8c6e8c16dec459b9df989e1824815e4e0e397", "filename": "gcc/ira.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ce7eb44961b50d92b5481b26ce20a50567baae/gcc%2Fira.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ce7eb44961b50d92b5481b26ce20a50567baae/gcc%2Fira.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.h?ref=80ce7eb44961b50d92b5481b26ce20a50567baae", "patch": "@@ -200,8 +200,8 @@ extern void ira_mark_allocation_change (int);\n extern void ira_mark_memory_move_deletion (int, int);\n extern bool ira_reassign_pseudos (int *, int, HARD_REG_SET, HARD_REG_SET *,\n \t\t\t\t  HARD_REG_SET *, bitmap);\n-extern rtx ira_reuse_stack_slot (int, unsigned int, unsigned int);\n-extern void ira_mark_new_stack_slot (rtx, int, unsigned int);\n+extern rtx ira_reuse_stack_slot (int, poly_uint64, poly_uint64);\n+extern void ira_mark_new_stack_slot (rtx, int, poly_uint64);\n extern bool ira_better_spill_reload_regno_p (int *, int *, rtx, rtx, rtx_insn *);\n extern bool ira_bad_reload_regno (int, rtx, rtx);\n "}]}