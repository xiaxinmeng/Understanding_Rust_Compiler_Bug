{"sha": "beaecb2d6b2f3c48740b7b8749ee2d2468c8dc14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVhZWNiMmQ2YjJmM2M0ODc0MGI3Yjg3NDllZTJkMjQ2OGM4ZGMxNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-10-31T13:17:42Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-10-31T13:17:42Z"}, "message": "Fix handling of arrays in range access customization points\n\nThis combines the overloads for arrays with the non-array overloads,\nusing if-constexpr to choose between the cases, and also enforces the\nfollowing:\n\n- ADL should only be used for class types and enumeration types.\n- ranges::begin should be ill-formed for rvalue arrays.\n- ranges::end should be ill-formed for rvalue arrays, unbounded\n  arrays, and arrays of incomplete type.\n- ranges::size should be ill-formed for unbounded arrays.\n\n\t* include/bits/range_access.h (ranges::begin): Combine array and\n\tnon-array overloads into one function template. Only use ADL for\n\tclasses and enums\n\t(ranges::end, ranges::size): Likewise. Make unbounded arrays\n\till-formed.\n\t(ranges::rbegin, ranges::rend): Only use ADL for classes and enums.\n\tReformat _S_noexcept() functions to mirror operator() structure.\n\t* testsuite/std/ranges/access/begin.cc: Check incomplete array.\n\t* testsuite/std/ranges/access/end_neg.cc: New test.\n\t* testsuite/std/ranges/access/size.cc: Check array of incomplete type.\n\t* testsuite/std/ranges/access/size_neg.cc: New test.\n\nFrom-SVN: r277666", "tree": {"sha": "d236c984006772b50b0af417599e440fc4027102", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d236c984006772b50b0af417599e440fc4027102"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/beaecb2d6b2f3c48740b7b8749ee2d2468c8dc14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beaecb2d6b2f3c48740b7b8749ee2d2468c8dc14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/beaecb2d6b2f3c48740b7b8749ee2d2468c8dc14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beaecb2d6b2f3c48740b7b8749ee2d2468c8dc14/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9a6144c87bd4c15c855785ced57907d66754861", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9a6144c87bd4c15c855785ced57907d66754861", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9a6144c87bd4c15c855785ced57907d66754861"}], "stats": {"total": 210, "additions": 164, "deletions": 46}, "files": [{"sha": "542a350159287a81a3164c4d27cc5602726402b5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beaecb2d6b2f3c48740b7b8749ee2d2468c8dc14/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beaecb2d6b2f3c48740b7b8749ee2d2468c8dc14/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=beaecb2d6b2f3c48740b7b8749ee2d2468c8dc14", "patch": "@@ -1,5 +1,17 @@\n 2019-10-31  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/range_access.h (ranges::begin): Combine array and\n+\tnon-array overloads into one function template. Only use ADL for\n+\tclasses and enums.\n+\t(ranges::end, ranges::size): Likewise. Make unbounded arrays\n+\till-formed.\n+\t(ranges::rbegin, ranges::rend): Only use ADL for classes and enums.\n+\tReformat _S_noexcept() functions to mirror operator() structure.\n+\t* testsuite/std/ranges/access/begin.cc: Check incomplete array.\n+\t* testsuite/std/ranges/access/end_neg.cc: New test.\n+\t* testsuite/std/ranges/access/size.cc: Check array of incomplete type.\n+\t* testsuite/std/ranges/access/size_neg.cc: New test.\n+\n \t* testsuite/24_iterators/range_access*.cc: Move to ...\n \t* testsuite/24_iterators/range_access/range_access*.cc: ... here.\n \t* testsuite/24_iterators/range_access/range_access_cpp20_neg.cc: New"}, {"sha": "f0a339277e9fb6ef39049aa5148836ac81718d63", "filename": "libstdc++-v3/include/bits/range_access.h", "status": "modified", "additions": 69, "deletions": 44, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beaecb2d6b2f3c48740b7b8749ee2d2468c8dc14/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beaecb2d6b2f3c48740b7b8749ee2d2468c8dc14/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h?ref=beaecb2d6b2f3c48740b7b8749ee2d2468c8dc14", "patch": "@@ -391,39 +391,42 @@ namespace ranges\n     template<typename _Tp> void begin(initializer_list<_Tp>&&) = delete;\n \n     template<typename _Tp>\n-      concept __adl_begin = requires(_Tp&& __t)\n+      concept __adl_begin\n+\t= std::__detail::__class_or_enum<remove_reference_t<_Tp>>\n+\t&& requires(_Tp&& __t)\n \t{\n \t  { __decay_copy(begin(std::forward<_Tp>(__t))) }\n \t    -> input_or_output_iterator;\n \t};\n \n-    template<typename _Tp>\n-      concept __complete_type = requires(_Tp* __p) { __p + 1; };\n-\n     struct _Begin\n     {\n     private:\n       template<typename _Tp>\n \tstatic constexpr bool\n \t_S_noexcept()\n \t{\n-\t  if constexpr (__member_begin<_Tp>)\n+\t  if constexpr (is_array_v<remove_reference_t<_Tp>>)\n+\t    return true;\n+\t  else if constexpr (__member_begin<_Tp>)\n \t    return noexcept(__decay_copy(std::declval<_Tp>().begin()));\n \t  else\n \t    return noexcept(__decay_copy(begin(std::declval<_Tp>())));\n \t}\n \n     public:\n-      template<__complete_type _Tp, size_t _Nm>\n-\tconstexpr _Tp*\n-\toperator()(_Tp (&__e)[_Nm]) const noexcept\n-\t{ return __e; }\n-\n-      template<typename _Tp> requires __member_begin<_Tp> || __adl_begin<_Tp>\n+      template<typename _Tp>\n+\trequires is_array_v<remove_reference_t<_Tp>> || __member_begin<_Tp>\n+\t  || __adl_begin<_Tp>\n \tconstexpr auto\n \toperator()(_Tp&& __e) const noexcept(_S_noexcept<_Tp>())\n \t{\n-\t  if constexpr (__member_begin<_Tp>)\n+\t  if constexpr (is_array_v<remove_reference_t<_Tp>>)\n+\t    {\n+\t      static_assert(is_lvalue_reference_v<_Tp>);\n+\t      return __e;\n+\t    }\n+\t  else if constexpr (__member_begin<_Tp>)\n \t    return __e.begin();\n \t  else\n \t    return begin(std::forward<_Tp>(__e));\n@@ -442,7 +445,9 @@ namespace ranges\n     template<typename _Tp> void end(initializer_list<_Tp>&&) = delete;\n \n     template<typename _Tp>\n-      concept __adl_end = requires(_Tp&& __t)\n+      concept __adl_end\n+\t= std::__detail::__class_or_enum<remove_reference_t<_Tp>>\n+\t&& requires(_Tp&& __t)\n \t{\n \t  { __decay_copy(end(std::forward<_Tp>(__t))) }\n \t    -> sentinel_for<decltype(_Begin{}(std::forward<_Tp>(__t)))>;\n@@ -455,23 +460,28 @@ namespace ranges\n \tstatic constexpr bool\n \t_S_noexcept()\n \t{\n-\t  if constexpr (__member_end<_Tp>)\n+\t  if constexpr (is_array_v<remove_reference_t<_Tp>>)\n+\t    return true;\n+\t  else if constexpr (__member_end<_Tp>)\n \t    return noexcept(__decay_copy(std::declval<_Tp>().end()));\n \t  else\n \t    return noexcept(__decay_copy(end(std::declval<_Tp>())));\n \t}\n \n     public:\n-      template<__complete_type _Tp, size_t _Nm>\n-\tconstexpr _Tp*\n-\toperator()(_Tp (&__e)[_Nm]) const noexcept\n-\t{ return __e + _Nm; }\n-\n-      template<typename _Tp> requires __member_end<_Tp> || __adl_end<_Tp>\n+      template<typename _Tp>\n+\trequires is_array_v<remove_reference_t<_Tp>> || __member_end<_Tp>\n+\t|| __adl_end<_Tp>\n \tconstexpr auto\n \toperator()(_Tp&& __e) const noexcept(_S_noexcept<_Tp>())\n \t{\n-\t  if constexpr (__member_end<_Tp>)\n+\t  if constexpr (is_array_v<remove_reference_t<_Tp>>)\n+\t    {\n+\t      static_assert(is_lvalue_reference_v<_Tp>);\n+\t      static_assert(is_bounded_array_v<remove_reference_t<_Tp>>);\n+\t      return __e + extent_v<remove_reference_t<_Tp>>;\n+\t    }\n+\t  else if constexpr (__member_end<_Tp>)\n \t    return __e.end();\n \t  else\n \t    return end(std::forward<_Tp>(__e));\n@@ -520,7 +530,9 @@ namespace ranges\n     template<typename _Tp> void rbegin(_Tp&&) = delete;\n \n     template<typename _Tp>\n-      concept __adl_rbegin = requires(_Tp&& __t)\n+      concept __adl_rbegin\n+\t= std::__detail::__class_or_enum<remove_reference_t<_Tp>>\n+\t&& requires(_Tp&& __t)\n \t{\n \t  { __decay_copy(rbegin(std::forward<_Tp>(__t))) }\n \t    -> input_or_output_iterator;\n@@ -545,14 +557,17 @@ namespace ranges\n \t    return noexcept(__decay_copy(std::declval<_Tp>().rbegin()));\n \t  else if constexpr (__adl_rbegin<_Tp>)\n \t    return noexcept(__decay_copy(rbegin(std::declval<_Tp>())));\n-\t  else if constexpr (noexcept(_End{}(std::declval<_Tp>())))\n+\t  else\n \t    {\n-\t      using _It = decltype(_End{}(std::declval<_Tp>()));\n-\t      // std::reverse_iterator copy-initializes its member.\n-\t      return is_nothrow_copy_constructible_v<_It>;\n+\t      if constexpr (noexcept(_End{}(std::declval<_Tp>())))\n+\t\t{\n+\t\t  using _It = decltype(_End{}(std::declval<_Tp>()));\n+\t\t  // std::reverse_iterator copy-initializes its member.\n+\t\t  return is_nothrow_copy_constructible_v<_It>;\n+\t\t}\n+\t      else\n+\t\treturn false;\n \t    }\n-\t  else\n-\t    return false;\n \t}\n \n     public:\n@@ -582,7 +597,9 @@ namespace ranges\n     template<typename _Tp> void rend(_Tp&&) = delete;\n \n     template<typename _Tp>\n-      concept __adl_rend = requires(_Tp&& __t)\n+      concept __adl_rend\n+\t= std::__detail::__class_or_enum<remove_reference_t<_Tp>>\n+\t&& requires(_Tp&& __t)\n \t{\n \t  { __decay_copy(rend(std::forward<_Tp>(__t))) }\n \t    -> sentinel_for<decltype(_RBegin{}(std::forward<_Tp>(__t)))>;\n@@ -599,14 +616,17 @@ namespace ranges\n \t    return noexcept(__decay_copy(std::declval<_Tp>().rend()));\n \t  else if constexpr (__adl_rend<_Tp>)\n \t    return noexcept(__decay_copy(rend(std::declval<_Tp>())));\n-\t  else if constexpr (noexcept(_Begin{}(std::declval<_Tp>())))\n+\t  else\n \t    {\n-\t      using _It = decltype(_Begin{}(std::declval<_Tp>()));\n-\t      // std::reverse_iterator copy-initializes its member.\n-\t      return is_nothrow_copy_constructible_v<_It>;\n+\t      if constexpr (noexcept(_Begin{}(std::declval<_Tp>())))\n+\t\t{\n+\t\t  using _It = decltype(_Begin{}(std::declval<_Tp>()));\n+\t\t  // std::reverse_iterator copy-initializes its member.\n+\t\t  return is_nothrow_copy_constructible_v<_It>;\n+\t\t}\n+\t      else\n+\t\treturn false;\n \t    }\n-\t  else\n-\t    return false;\n \t}\n \n     public:\n@@ -660,7 +680,9 @@ namespace ranges\n     template<typename _Tp> void size(_Tp&&) = delete;\n \n     template<typename _Tp>\n-      concept __adl_size = !disable_sized_range<remove_cvref_t<_Tp>>\n+      concept __adl_size\n+\t= std::__detail::__class_or_enum<remove_reference_t<_Tp>>\n+\t&& !disable_sized_range<remove_cvref_t<_Tp>>\n \t&& requires(_Tp&& __t)\n \t{\n \t  { __decay_copy(size(std::forward<_Tp>(__t))) }\n@@ -689,7 +711,9 @@ namespace ranges\n \tstatic constexpr bool\n \t_S_noexcept()\n \t{\n-\t  if constexpr (__member_size<_Tp>)\n+\t  if constexpr (is_array_v<remove_reference_t<_Tp>>)\n+\t    return true;\n+\t  else if constexpr (__member_size<_Tp>)\n \t    return noexcept(__decay_copy(std::declval<_Tp>().size()));\n \t  else if constexpr (__adl_size<_Tp>)\n \t    return noexcept(__decay_copy(size(std::declval<_Tp>())));\n@@ -699,17 +723,18 @@ namespace ranges\n \t}\n \n     public:\n-      template<__complete_type _Tp, size_t _Nm>\n-\tconstexpr size_t\n-\toperator()(_Tp (&__e)[_Nm]) const noexcept\n-\t{ return _Nm; }\n-\n       template<typename _Tp>\n-\trequires __member_size<_Tp> || __adl_size<_Tp> || __sizable<_Tp>\n+\trequires is_array_v<remove_reference_t<_Tp>>\n+\t  || __member_size<_Tp> || __adl_size<_Tp> || __sizable<_Tp>\n \tconstexpr auto\n \toperator()(_Tp&& __e) const noexcept(_S_noexcept<_Tp>())\n \t{\n-\t  if constexpr (__member_size<_Tp>)\n+\t  if constexpr (is_array_v<remove_reference_t<_Tp>>)\n+\t    {\n+\t      static_assert(is_bounded_array_v<remove_reference_t<_Tp>>);\n+\t      return extent_v<remove_reference_t<_Tp>>;\n+\t    }\n+\t  else if constexpr (__member_size<_Tp>)\n \t    return std::forward<_Tp>(__e).size();\n \t  else if constexpr (__adl_size<_Tp>)\n \t    return size(std::forward<_Tp>(__e));"}, {"sha": "100dcf69c6ec8538aa0958f2133b0bb55b1931a0", "filename": "libstdc++-v3/testsuite/std/ranges/access/begin.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beaecb2d6b2f3c48740b7b8749ee2d2468c8dc14/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fbegin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beaecb2d6b2f3c48740b7b8749ee2d2468c8dc14/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fbegin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fbegin.cc?ref=beaecb2d6b2f3c48740b7b8749ee2d2468c8dc14", "patch": "@@ -35,6 +35,11 @@ test01()\n \n   constexpr long b[2] = { };\n   static_assert( std::ranges::begin(b) == (b + 0) );\n+\n+  struct Incomplete;\n+  using A = Incomplete[]; // unbounded array of incomplete type\n+  extern A& f();\n+  static_assert( same_as<decltype(std::ranges::begin(f())), Incomplete*> );\n }\n \n void"}, {"sha": "a2a8fb05f922f0d2b41d06e7be28c6f8eb02b5dc", "filename": "libstdc++-v3/testsuite/std/ranges/access/end_neg.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beaecb2d6b2f3c48740b7b8749ee2d2468c8dc14/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fend_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beaecb2d6b2f3c48740b7b8749ee2d2468c8dc14/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fend_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fend_neg.cc?ref=beaecb2d6b2f3c48740b7b8749ee2d2468c8dc14", "patch": "@@ -0,0 +1,42 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <iterator> // N.B. should be <ranges>\n+\n+extern int unbounded[];\n+\n+auto\n+test01()\n+{\n+  return std::ranges::end(unbounded); // { dg-error \"here\" }\n+}\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 0 }\n+\n+struct incomplete;\n+extern incomplete array[2];\n+\n+auto\n+test02()\n+{\n+  return std::ranges::end(array); // { dg-error \"here\" }\n+}\n+// { dg-error \"incomplete type\" \"\" { target *-*-* } 0 }\n+\n+"}, {"sha": "b0a27ca2a8746337370ebcc46df91dfafef9d1fd", "filename": "libstdc++-v3/testsuite/std/ranges/access/size.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beaecb2d6b2f3c48740b7b8749ee2d2468c8dc14/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fsize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beaecb2d6b2f3c48740b7b8749ee2d2468c8dc14/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fsize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fsize.cc?ref=beaecb2d6b2f3c48740b7b8749ee2d2468c8dc14", "patch": "@@ -32,6 +32,11 @@ test01()\n   int a2[2];\n   VERIFY( std::ranges::size(a2) == 2);\n   static_assert( noexcept(std::ranges::size(a2)) );\n+\n+  struct Incomplete;\n+  using A = Incomplete[2]; // bounded array of incomplete type\n+  extern A& f();\n+  static_assert( std::same_as<decltype(std::ranges::size(f())), std::size_t> );\n }\n \n void\n@@ -84,8 +89,7 @@ test04()\n {\n   int a[] = { 0, 1 };\n   __gnu_test::test_range<int, __gnu_test::random_access_iterator_wrapper> r(a);\n-  auto& rr = r;\n-  VERIFY( std::ranges::size(r) == (std::ranges::end(r) - std::ranges::begin(r)) );\n+  VERIFY( std::ranges::size(r) == unsigned(std::ranges::end(r) - std::ranges::begin(r)) );\n }\n \n struct R5"}, {"sha": "0ba8d81874ff20dc2c1c2ffecb9b66c959d19e19", "filename": "libstdc++-v3/testsuite/std/ranges/access/size_neg.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beaecb2d6b2f3c48740b7b8749ee2d2468c8dc14/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fsize_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beaecb2d6b2f3c48740b7b8749ee2d2468c8dc14/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fsize_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fsize_neg.cc?ref=beaecb2d6b2f3c48740b7b8749ee2d2468c8dc14", "patch": "@@ -0,0 +1,30 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <iterator> // N.B. should be <ranges>\n+\n+extern int unbounded[];\n+\n+auto\n+test01()\n+{\n+  return std::ranges::size(unbounded); // { dg-error \"here\" }\n+}\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 0 }"}]}