{"sha": "c64f7d37140e0769cbb8725da800119d7c6a6fd2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY0ZjdkMzcxNDBlMDc2OWNiYjg3MjVkYTgwMDExOWQ3YzZhNmZkMg==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2016-02-02T17:03:05Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2016-02-02T17:03:05Z"}, "message": "This patch adds support for the TARGET_IRA_CHANGE_PSEUDO_ALLOCNO_CLASS hook. \nWhen the cost of GENERAL_REGS and FP_REGS is identical, the register allocator\nalways uses ALL_REGS even when it has a much higher cost. The hook changes the\nclass to either FP_REGS or GENERAL_REGS depending on the mode of the register.\nThis results in better register allocation overall, fewer spills and reduced\ncodesize - particularly in SPEC2006 gamess.\n\n2016-02-02  Wilco Dijkstra  <wdijkstr@arm.com>\n\n    gcc/\n\t* config/aarch64/aarch64.c\n\t(TARGET_IRA_CHANGE_PSEUDO_ALLOCNO_CLASS): New define.\n\t(aarch64_ira_change_pseudo_allocno_class): New function.\n\n    gcc/testsuite/\n\t* gcc.target/aarch64/scalar_shift_1.c\n\t(test_corners_sisd_di): Improve force to SIMD register.\n\t(test_corners_sisd_si): Likewise.\n\t* gcc.target/aarch64/vect-ld1r-compile-fp.c:\n\tRemove scan-assembler check for ldr.\n\nFrom-SVN: r233083", "tree": {"sha": "3d5dbb501c4b6d12b44117ef9562b9e9467698eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d5dbb501c4b6d12b44117ef9562b9e9467698eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c64f7d37140e0769cbb8725da800119d7c6a6fd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c64f7d37140e0769cbb8725da800119d7c6a6fd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c64f7d37140e0769cbb8725da800119d7c6a6fd2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c64f7d37140e0769cbb8725da800119d7c6a6fd2/comments", "author": null, "committer": null, "parents": [{"sha": "bd78a45fa098849c0596545f072392838e597259", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd78a45fa098849c0596545f072392838e597259", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd78a45fa098849c0596545f072392838e597259"}], "stats": {"total": 41, "additions": 38, "deletions": 3}, "files": [{"sha": "57a7df777f55200a4b0980c1aed70e6a4f37109a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c64f7d37140e0769cbb8725da800119d7c6a6fd2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c64f7d37140e0769cbb8725da800119d7c6a6fd2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c64f7d37140e0769cbb8725da800119d7c6a6fd2", "patch": "@@ -1,3 +1,9 @@\n+2016-02-02  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/aarch64/aarch64.c\n+\t(TARGET_IRA_CHANGE_PSEUDO_ALLOCNO_CLASS): New define.\n+\t(aarch64_ira_change_pseudo_allocno_class): New function.\n+\n 2016-02-02  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/67032"}, {"sha": "e7cfcb6ba7d8d613c154b160eb62e441a90b172c", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c64f7d37140e0769cbb8725da800119d7c6a6fd2/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c64f7d37140e0769cbb8725da800119d7c6a6fd2/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=c64f7d37140e0769cbb8725da800119d7c6a6fd2", "patch": "@@ -724,6 +724,24 @@ aarch64_err_no_fpadvsimd (machine_mode mode, const char *msg)\n     error (\"%qs feature modifier is incompatible with %s %s\", \"+nofp\", mc, msg);\n }\n \n+/* Implement TARGET_IRA_CHANGE_PSEUDO_ALLOCNO_CLASS.\n+   The register allocator chooses ALL_REGS if FP_REGS and GENERAL_REGS have\n+   the same cost even if ALL_REGS has a much larger cost.  This results in bad\n+   allocations and spilling.  To avoid this we force the class to GENERAL_REGS\n+   if the mode is integer.  */\n+\n+static reg_class_t\n+aarch64_ira_change_pseudo_allocno_class (int regno, reg_class_t allocno_class)\n+{\n+  enum machine_mode mode;\n+\n+  if (allocno_class != ALL_REGS)\n+    return allocno_class;\n+\n+  mode = PSEUDO_REGNO_MODE (regno);\n+  return FLOAT_MODE_P (mode) || VECTOR_MODE_P (mode) ? FP_REGS : GENERAL_REGS;\n+}\n+\n static unsigned int\n aarch64_min_divisions_for_recip_mul (enum machine_mode mode)\n {\n@@ -14009,6 +14027,10 @@ aarch64_optab_supported_p (int op, machine_mode, machine_mode,\n #undef  TARGET_INIT_BUILTINS\n #define TARGET_INIT_BUILTINS  aarch64_init_builtins\n \n+#undef TARGET_IRA_CHANGE_PSEUDO_ALLOCNO_CLASS\n+#define TARGET_IRA_CHANGE_PSEUDO_ALLOCNO_CLASS \\\n+  aarch64_ira_change_pseudo_allocno_class\n+\n #undef TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P aarch64_legitimate_address_hook_p\n "}, {"sha": "5229fa1868ffa248bb23f4c0f05ed84ad3c8709c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c64f7d37140e0769cbb8725da800119d7c6a6fd2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c64f7d37140e0769cbb8725da800119d7c6a6fd2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c64f7d37140e0769cbb8725da800119d7c6a6fd2", "patch": "@@ -1,3 +1,11 @@\n+2016-02-02  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* gcc.target/aarch64/scalar_shift_1.c\n+\t(test_corners_sisd_di): Improve force to SIMD register.\n+\t(test_corners_sisd_si): Likewise.\n+\t* gcc.target/aarch64/vect-ld1r-compile-fp.c:\n+\tRemove scan-assembler check for ldr.\n+\n 2016-02-02  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/69595"}, {"sha": "8465c896705dbfd4c76b0815511ea7b4b034e095", "filename": "gcc/testsuite/gcc.target/aarch64/scalar_shift_1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c64f7d37140e0769cbb8725da800119d7c6a6fd2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fscalar_shift_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c64f7d37140e0769cbb8725da800119d7c6a6fd2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fscalar_shift_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fscalar_shift_1.c?ref=c64f7d37140e0769cbb8725da800119d7c6a6fd2", "patch": "@@ -186,9 +186,9 @@ test_corners_sisd_di (Int64x1 b)\n {\n   force_simd_di (b);\n   b = b >> 63;\n+  force_simd_di (b);\n   b = b >> 0;\n   b += b >> 65; /* { dg-warning \"right shift count >= width of type\" } */\n-  force_simd_di (b);\n \n   return b;\n }\n@@ -199,9 +199,9 @@ test_corners_sisd_si (Int32x1 b)\n {\n   force_simd_si (b);\n   b = b >> 31;\n+  force_simd_si (b);\n   b = b >> 0;\n   b += b >> 33; /* { dg-warning \"right shift count >= width of type\" } */\n-  force_simd_si (b);\n \n   return b;\n }"}, {"sha": "4711c612002069bd59c2c9c54cbdfe89cde14f18", "filename": "gcc/testsuite/gcc.target/aarch64/vect-ld1r-compile-fp.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c64f7d37140e0769cbb8725da800119d7c6a6fd2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-ld1r-compile-fp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c64f7d37140e0769cbb8725da800119d7c6a6fd2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-ld1r-compile-fp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-ld1r-compile-fp.c?ref=c64f7d37140e0769cbb8725da800119d7c6a6fd2", "patch": "@@ -8,6 +8,5 @@ DEF (float)\n DEF (double)\n \n /* { dg-final { scan-assembler \"ld1r\\\\t\\{v\\[0-9\\]+\\.4s\"} } */\n-/* { dg-final { scan-assembler \"ldr\\\\t\\x\\[0-9\\]+\"} } */\n /* { dg-final { scan-assembler \"ld1r\\\\t\\{v\\[0-9\\]+\\.2d\"} } */\n "}]}