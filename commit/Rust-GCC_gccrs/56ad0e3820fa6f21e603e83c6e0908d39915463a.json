{"sha": "56ad0e3820fa6f21e603e83c6e0908d39915463a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZhZDBlMzgyMGZhNmYyMWU2MDNlODNjNmUwOTA4ZDM5OTE1NDYzYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-06-24T07:53:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-06-24T07:53:52Z"}, "message": "gimplify.c (gimplify_omp_for): For #pragma omp for simd iterator not mentioned in clauses use private clause if...\n\n\t* gimplify.c (gimplify_omp_for): For #pragma omp for simd iterator\n\tnot mentioned in clauses use private clause if the iterator is\n\tdeclared in #pragma omp for simd, and when adding lastprivate\n\tinstead, add it to the outer #pragma omp for too.  Diagnose\n\tif the variable is private in outer context.  For simd collapse > 1\n\tloops, replace all iterators with temporaries.\n\t* omp-low.c (lower_rec_input_clauses): Handle LINEAR clause the\n\tsame even in collapse > 1 loops.\ngcc/c/\n\t* c-parser.c (c_parser_omp_for_loop): For\n\t#pragma omp parallel for simd move lastprivate clause from parallel\n\tto for rather than simd.\ngcc/cp/\n\t* parser.c (cp_parser_omp_for_loop): For\n\t#pragma omp parallel for simd move lastprivate clause from parallel\n\tto for rather than simd.\nlibgomp/\n\t* testsuite/libgomp.c/for-2.c: Define SC to static for\n\t#pragma omp for simd testing.\n\t* testsuite/libgomp.c/for-2.h (SC): Define if not defined.\n\t(N(f5), N(f6), N(f7), N(f8), N(f10), N(f12), N(f14)): Use\n\tSC macro.\n\t* testsuite/libgomp.c/simd-14.c: New test.\n\t* testsuite/libgomp.c/simd-15.c: New test.\n\t* testsuite/libgomp.c/simd-16.c: New test.\n\t* testsuite/libgomp.c/simd-17.c: New test.\n\t* testsuite/libgomp.c++/for-10.C: Define SC to static for\n\t#pragma omp for simd testing.\n\t* testsuite/libgomp.c++/simd10.C: New test.\n\t* testsuite/libgomp.c++/simd11.C: New test.\n\t* testsuite/libgomp.c++/simd12.C: New test.\n\t* testsuite/libgomp.c++/simd13.C: New test.\n\nFrom-SVN: r211930", "tree": {"sha": "8eeccb0956a7e6b8abafc24234634fa3736769cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8eeccb0956a7e6b8abafc24234634fa3736769cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56ad0e3820fa6f21e603e83c6e0908d39915463a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56ad0e3820fa6f21e603e83c6e0908d39915463a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56ad0e3820fa6f21e603e83c6e0908d39915463a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56ad0e3820fa6f21e603e83c6e0908d39915463a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b46ebd6c7beaf55974973de0f02d39299b733bc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b46ebd6c7beaf55974973de0f02d39299b733bc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b46ebd6c7beaf55974973de0f02d39299b733bc9"}], "stats": {"total": 569, "additions": 536, "deletions": 33}, "files": [{"sha": "b82e84021fb155d443342d6a2dedbb0a07c6aee0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ad0e3820fa6f21e603e83c6e0908d39915463a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ad0e3820fa6f21e603e83c6e0908d39915463a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56ad0e3820fa6f21e603e83c6e0908d39915463a", "patch": "@@ -1,5 +1,14 @@\n 2014-06-24  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* gimplify.c (gimplify_omp_for): For #pragma omp for simd iterator\n+\tnot mentioned in clauses use private clause if the iterator is\n+\tdeclared in #pragma omp for simd, and when adding lastprivate\n+\tinstead, add it to the outer #pragma omp for too.  Diagnose\n+\tif the variable is private in outer context.  For simd collapse > 1\n+\tloops, replace all iterators with temporaries.\n+\t* omp-low.c (lower_rec_input_clauses): Handle LINEAR clause the\n+\tsame even in collapse > 1 loops.\n+\n \t* gimplify.c (gimplify_scan_omp_clauses) <case OMP_CLAUSE_MAP,\n \tOMP_CLAUSE_TO, OMP_CLAUSE_FROM): Make sure OMP_CLAUSE_SIZE is\n \tnon-NULL."}, {"sha": "c937261412289fe351b5b666422c5ac7c22a7ef6", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ad0e3820fa6f21e603e83c6e0908d39915463a/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ad0e3820fa6f21e603e83c6e0908d39915463a/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=56ad0e3820fa6f21e603e83c6e0908d39915463a", "patch": "@@ -1,3 +1,9 @@\n+2014-06-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-parser.c (c_parser_omp_for_loop): For\n+\t#pragma omp parallel for simd move lastprivate clause from parallel\n+\tto for rather than simd.\n+\n 2014-06-23  Marek Polacek  <polacek@redhat.com>\n \n \t* c-typeck.c (parser_build_binary_op): Don't call"}, {"sha": "f83ccb07db4d6dfa94cb0533bc103f8b28ef9b31", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ad0e3820fa6f21e603e83c6e0908d39915463a/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ad0e3820fa6f21e603e83c6e0908d39915463a/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=56ad0e3820fa6f21e603e83c6e0908d39915463a", "patch": "@@ -11910,8 +11910,17 @@ c_parser_omp_for_loop (location_t loc, c_parser *parser, enum tree_code code,\n \t\t\ttree l = build_omp_clause (OMP_CLAUSE_LOCATION (*c),\n \t\t\t\t\t\t   OMP_CLAUSE_LASTPRIVATE);\n \t\t\tOMP_CLAUSE_DECL (l) = OMP_CLAUSE_DECL (*c);\n-\t\t\tOMP_CLAUSE_CHAIN (l) = clauses;\n-\t\t\tclauses = l;\n+\t\t\tif (code == OMP_SIMD)\n+\t\t\t  {\n+\t\t\t    OMP_CLAUSE_CHAIN (l)\n+\t\t\t      = cclauses[C_OMP_CLAUSE_SPLIT_FOR];\n+\t\t\t    cclauses[C_OMP_CLAUSE_SPLIT_FOR] = l;\n+\t\t\t  }\n+\t\t\telse\n+\t\t\t  {\n+\t\t\t    OMP_CLAUSE_CHAIN (l) = clauses;\n+\t\t\t    clauses = l;\n+\t\t\t  }\n \t\t\tOMP_CLAUSE_SET_CODE (*c, OMP_CLAUSE_SHARED);\n \t\t      }\n \t\t  }"}, {"sha": "170b90b7c752fc73cfdc8c508853a071b01b2c2b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ad0e3820fa6f21e603e83c6e0908d39915463a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ad0e3820fa6f21e603e83c6e0908d39915463a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=56ad0e3820fa6f21e603e83c6e0908d39915463a", "patch": "@@ -1,3 +1,9 @@\n+2014-06-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parser.c (cp_parser_omp_for_loop): For\n+\t#pragma omp parallel for simd move lastprivate clause from parallel\n+\tto for rather than simd.\n+\n 2014-06-23  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tDR 577"}, {"sha": "41200a02fb0ce1514d614e91601dbf8fa7e34da6", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ad0e3820fa6f21e603e83c6e0908d39915463a/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ad0e3820fa6f21e603e83c6e0908d39915463a/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=56ad0e3820fa6f21e603e83c6e0908d39915463a", "patch": "@@ -29418,9 +29418,17 @@ cp_parser_omp_for_loop (cp_parser *parser, enum tree_code code, tree clauses,\n \t\t   change it to shared (decl) in OMP_PARALLEL_CLAUSES.  */\n \t\ttree l = build_omp_clause (loc, OMP_CLAUSE_LASTPRIVATE);\n \t\tOMP_CLAUSE_DECL (l) = real_decl;\n-\t\tOMP_CLAUSE_CHAIN (l) = clauses;\n \t\tCP_OMP_CLAUSE_INFO (l) = CP_OMP_CLAUSE_INFO (*c);\n-\t\tclauses = l;\n+\t\tif (code == OMP_SIMD)\n+\t\t  {\n+\t\t    OMP_CLAUSE_CHAIN (l) = cclauses[C_OMP_CLAUSE_SPLIT_FOR];\n+\t\t    cclauses[C_OMP_CLAUSE_SPLIT_FOR] = l;\n+\t\t  }\n+\t\telse\n+\t\t  {\n+\t\t    OMP_CLAUSE_CHAIN (l) = clauses;\n+\t\t    clauses = l;\n+\t\t  }\n \t\tOMP_CLAUSE_SET_CODE (*c, OMP_CLAUSE_SHARED);\n \t\tCP_OMP_CLAUSE_INFO (*c) = NULL;\n \t\tadd_private_clause = false;"}, {"sha": "69f6d5b9c61a1d84febb96f431dfa3e2d7c39310", "filename": "gcc/gimplify.c", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ad0e3820fa6f21e603e83c6e0908d39915463a/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ad0e3820fa6f21e603e83c6e0908d39915463a/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=56ad0e3820fa6f21e603e83c6e0908d39915463a", "patch": "@@ -6810,6 +6810,31 @@ gimplify_omp_for (tree *expr_p, gimple_seq *pre_p)\n \t      bool lastprivate\n \t\t= (!has_decl_expr\n \t\t   || !bitmap_bit_p (has_decl_expr, DECL_UID (decl)));\n+\t      if (lastprivate\n+\t\t  && gimplify_omp_ctxp->outer_context\n+\t\t  && gimplify_omp_ctxp->outer_context->region_type\n+\t\t     == ORT_WORKSHARE\n+\t\t  && gimplify_omp_ctxp->outer_context->combined_loop\n+\t\t  && !gimplify_omp_ctxp->outer_context->distribute)\n+\t\t{\n+\t\t  struct gimplify_omp_ctx *outer\n+\t\t    = gimplify_omp_ctxp->outer_context;\n+\t\t  n = splay_tree_lookup (outer->variables,\n+\t\t\t\t\t (splay_tree_key) decl);\n+\t\t  if (n != NULL\n+\t\t      && (n->value & GOVD_DATA_SHARE_CLASS) == GOVD_LOCAL)\n+\t\t    lastprivate = false;\n+\t\t  else if (omp_check_private (outer, decl, false))\n+\t\t    error (\"lastprivate variable %qE is private in outer \"\n+\t\t\t   \"context\", DECL_NAME (decl));\n+\t\t  else\n+\t\t    {\n+\t\t      omp_add_variable (outer, decl,\n+\t\t\t\t\tGOVD_LASTPRIVATE | GOVD_SEEN);\n+\t\t      if (outer->outer_context)\n+\t\t\tomp_notice_variable (outer->outer_context, decl, true);\n+\t\t    }\n+\t\t}\n \t      c = build_omp_clause (input_location,\n \t\t\t\t    lastprivate ? OMP_CLAUSE_LASTPRIVATE\n \t\t\t\t\t\t: OMP_CLAUSE_PRIVATE);\n@@ -6829,10 +6854,13 @@ gimplify_omp_for (tree *expr_p, gimple_seq *pre_p)\n \n       /* If DECL is not a gimple register, create a temporary variable to act\n \t as an iteration counter.  This is valid, since DECL cannot be\n-\t modified in the body of the loop.  */\n+\t modified in the body of the loop.  Similarly for any iteration vars\n+\t in simd with collapse > 1 where the iterator vars must be\n+\t lastprivate.  */\n       if (orig_for_stmt != for_stmt)\n \tvar = decl;\n-      else if (!is_gimple_reg (decl))\n+      else if (!is_gimple_reg (decl)\n+\t       || (simd && TREE_VEC_LENGTH (OMP_FOR_INIT (for_stmt)) > 1))\n \t{\n \t  var = create_tmp_var (TREE_TYPE (decl), get_name (decl));\n \t  TREE_OPERAND (t, 0) = var;"}, {"sha": "e70970e8230bf7a631ab7c8879aa95b4f2d83ccf", "filename": "gcc/omp-low.c", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ad0e3820fa6f21e603e83c6e0908d39915463a/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ad0e3820fa6f21e603e83c6e0908d39915463a/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=56ad0e3820fa6f21e603e83c6e0908d39915463a", "patch": "@@ -3421,24 +3421,20 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t\t\t\t\t\tOMP_CLAUSE__LOOPTEMP_);\n \t\t      gcc_assert (c);\n \t\t      tree l = OMP_CLAUSE_DECL (c);\n-\t\t      if (fd->collapse == 1)\n-\t\t\t{\n-\t\t\t  tree n1 = fd->loop.n1;\n-\t\t\t  tree step = fd->loop.step;\n-\t\t\t  tree itype = TREE_TYPE (l);\n-\t\t\t  if (POINTER_TYPE_P (itype))\n-\t\t\t    itype = signed_type_for (itype);\n-\t\t\t  l = fold_build2 (MINUS_EXPR, itype, l, n1);\n-\t\t\t  if (TYPE_UNSIGNED (itype)\n-\t\t\t      && fd->loop.cond_code == GT_EXPR)\n-\t\t\t    l = fold_build2 (TRUNC_DIV_EXPR, itype,\n-\t\t\t\t\t     fold_build1 (NEGATE_EXPR,\n-\t\t\t\t\t\t\t  itype, l),\n-\t\t\t\t\t     fold_build1 (NEGATE_EXPR,\n-\t\t\t\t\t\t\t  itype, step));\n-\t\t\t  else\n-\t\t\t    l = fold_build2 (TRUNC_DIV_EXPR, itype, l, step);\n-\t\t\t}\n+\t\t      tree n1 = fd->loop.n1;\n+\t\t      tree step = fd->loop.step;\n+\t\t      tree itype = TREE_TYPE (l);\n+\t\t      if (POINTER_TYPE_P (itype))\n+\t\t\titype = signed_type_for (itype);\n+\t\t      l = fold_build2 (MINUS_EXPR, itype, l, n1);\n+\t\t      if (TYPE_UNSIGNED (itype)\n+\t\t\t  && fd->loop.cond_code == GT_EXPR)\n+\t\t\tl = fold_build2 (TRUNC_DIV_EXPR, itype,\n+\t\t\t\t\t fold_build1 (NEGATE_EXPR, itype, l),\n+\t\t\t\t\t fold_build1 (NEGATE_EXPR,\n+\t\t\t\t\t\t      itype, step));\n+\t\t      else\n+\t\t\tl = fold_build2 (TRUNC_DIV_EXPR, itype, l, step);\n \t\t      t = fold_build2 (MULT_EXPR, stept,\n \t\t\t\t       fold_convert (stept, l), t);\n \t\t      if (POINTER_TYPE_P (TREE_TYPE (x)))"}, {"sha": "1bed6eae8ecebf78ababde1825474d0fb8c9f972", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ad0e3820fa6f21e603e83c6e0908d39915463a/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ad0e3820fa6f21e603e83c6e0908d39915463a/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=56ad0e3820fa6f21e603e83c6e0908d39915463a", "patch": "@@ -1,5 +1,21 @@\n 2014-06-24  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* testsuite/libgomp.c/for-2.c: Define SC to static for\n+\t#pragma omp for simd testing.\n+\t* testsuite/libgomp.c/for-2.h (SC): Define if not defined.\n+\t(N(f5), N(f6), N(f7), N(f8), N(f10), N(f12), N(f14)): Use\n+\tSC macro.\n+\t* testsuite/libgomp.c/simd-14.c: New test.\n+\t* testsuite/libgomp.c/simd-15.c: New test.\n+\t* testsuite/libgomp.c/simd-16.c: New test.\n+\t* testsuite/libgomp.c/simd-17.c: New test.\n+\t* testsuite/libgomp.c++/for-10.C: Define SC to static for\n+\t#pragma omp for simd testing.\n+\t* testsuite/libgomp.c++/simd10.C: New test.\n+\t* testsuite/libgomp.c++/simd11.C: New test.\n+\t* testsuite/libgomp.c++/simd12.C: New test.\n+\t* testsuite/libgomp.c++/simd13.C: New test.\n+\n \t* testsuite/libgomp.fortran/aligned1.f03: New test.\n \t* testsuite/libgomp.fortran/nestedfn5.f90: New test.\n \t* testsuite/libgomp.fortran/target7.f90: Surround loop spawning"}, {"sha": "c67096ac92a70315571ff5c9cb4aee468e7c61ff", "filename": "libgomp/testsuite/libgomp.c++/for-10.C", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ad0e3820fa6f21e603e83c6e0908d39915463a/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Ffor-10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ad0e3820fa6f21e603e83c6e0908d39915463a/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Ffor-10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Ffor-10.C?ref=56ad0e3820fa6f21e603e83c6e0908d39915463a", "patch": "@@ -19,11 +19,14 @@ extern \"C\" void abort ();\n #undef F\n #undef G\n \n+#undef SC\n+#define SC static\n #define F for simd\n #define G f_simd\n #include \"../libgomp.c/for-1.h\"\n #undef F\n #undef G\n+#undef SC\n \n int\n main ()"}, {"sha": "390e65ffea3ec5f0ec0886a918afaff9fab7bafd", "filename": "libgomp/testsuite/libgomp.c++/simd10.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ad0e3820fa6f21e603e83c6e0908d39915463a/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fsimd10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ad0e3820fa6f21e603e83c6e0908d39915463a/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fsimd10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fsimd10.C?ref=56ad0e3820fa6f21e603e83c6e0908d39915463a", "patch": "@@ -0,0 +1,6 @@\n+// { dg-do run }\n+// { dg-options \"-O2\" }\n+// { dg-additional-options \"-msse2\" { target sse2_runtime } }\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+\n+#include \"../libgomp.c/simd-14.c\""}, {"sha": "b966868560128feb903cfdbed5a6f6ba05c630a6", "filename": "libgomp/testsuite/libgomp.c++/simd11.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ad0e3820fa6f21e603e83c6e0908d39915463a/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fsimd11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ad0e3820fa6f21e603e83c6e0908d39915463a/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fsimd11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fsimd11.C?ref=56ad0e3820fa6f21e603e83c6e0908d39915463a", "patch": "@@ -0,0 +1,6 @@\n+// { dg-do run }\n+// { dg-options \"-O2\" }\n+// { dg-additional-options \"-msse2\" { target sse2_runtime } }\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+\n+#include \"../libgomp.c/simd-15.c\""}, {"sha": "ecfc912aeeabba0f5ec7c227eb91dd6c9f8574d1", "filename": "libgomp/testsuite/libgomp.c++/simd12.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ad0e3820fa6f21e603e83c6e0908d39915463a/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fsimd12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ad0e3820fa6f21e603e83c6e0908d39915463a/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fsimd12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fsimd12.C?ref=56ad0e3820fa6f21e603e83c6e0908d39915463a", "patch": "@@ -0,0 +1,6 @@\n+// { dg-do run }\n+// { dg-options \"-O2\" }\n+// { dg-additional-options \"-msse2\" { target sse2_runtime } }\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+\n+#include \"../libgomp.c/simd-16.c\""}, {"sha": "f749620968012ade71872bdf7bfa81b52a8c683a", "filename": "libgomp/testsuite/libgomp.c++/simd13.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ad0e3820fa6f21e603e83c6e0908d39915463a/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fsimd13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ad0e3820fa6f21e603e83c6e0908d39915463a/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fsimd13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fsimd13.C?ref=56ad0e3820fa6f21e603e83c6e0908d39915463a", "patch": "@@ -0,0 +1,6 @@\n+// { dg-do run }\n+// { dg-options \"-O2\" }\n+// { dg-additional-options \"-msse2\" { target sse2_runtime } }\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+\n+#include \"../libgomp.c/simd-17.c\""}, {"sha": "ae81008745461087982834ffa2628b1d3801f5a8", "filename": "libgomp/testsuite/libgomp.c/for-2.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ad0e3820fa6f21e603e83c6e0908d39915463a/libgomp%2Ftestsuite%2Flibgomp.c%2Ffor-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ad0e3820fa6f21e603e83c6e0908d39915463a/libgomp%2Ftestsuite%2Flibgomp.c%2Ffor-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Ffor-2.c?ref=56ad0e3820fa6f21e603e83c6e0908d39915463a", "patch": "@@ -21,11 +21,14 @@ extern void abort (void);\n #undef F\n #undef G\n \n+#undef SC\n+#define SC static\n #define F for simd\n #define G f_simd\n #include \"for-1.h\"\n #undef F\n #undef G\n+#undef SC\n \n int\n main ()"}, {"sha": "920d23b52028c6cfd8c7db7f75db4fb9e92fb765", "filename": "libgomp/testsuite/libgomp.c/for-2.h", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ad0e3820fa6f21e603e83c6e0908d39915463a/libgomp%2Ftestsuite%2Flibgomp.c%2Ffor-2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ad0e3820fa6f21e603e83c6e0908d39915463a/libgomp%2Ftestsuite%2Flibgomp.c%2Ffor-2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Ffor-2.h?ref=56ad0e3820fa6f21e603e83c6e0908d39915463a", "patch": "@@ -8,6 +8,9 @@ noreturn (void)\n   for (;;);\n }\n #endif\n+#ifndef SC\n+#define SC\n+#endif\n \n __attribute__((noinline, noclone)) void\n N(f0) (void)\n@@ -57,7 +60,7 @@ __attribute__((noinline, noclone)) void\n N(f5) (int n11, int n12, int n21, int n22, int n31, int n32,\n        int s1, int s2, int s3)\n {\n-  int v1, v2, v3;\n+  SC int v1, v2, v3;\n #pragma omp F S collapse(3)\n   for (v1 = n11; v1 < n12; v1 += s1)\n     for (v2 = n21; v2 < n22; v2 += s2)\n@@ -69,8 +72,8 @@ __attribute__((noinline, noclone)) void\n N(f6) (int n11, int n12, int n21, int n22, long long n31, long long n32,\n        int s1, int s2, long long int s3)\n {\n-  int v1, v2;\n-  long long v3;\n+  SC int v1, v2;\n+  SC long long v3;\n #pragma omp F S collapse(3)\n   for (v1 = n11; v1 > n12; v1 += s1)\n     for (v2 = n21; v2 > n22; v2 += s2)\n@@ -81,8 +84,8 @@ N(f6) (int n11, int n12, int n21, int n22, long long n31, long long n32,\n __attribute__((noinline, noclone)) void\n N(f7) (void)\n {\n-  unsigned int v1, v3;\n-  unsigned long long v2;\n+  SC unsigned int v1, v3;\n+  SC unsigned long long v2;\n #pragma omp F S collapse(3)\n   for (v1 = 0; v1 < 20; v1 += 2)\n     for (v2 = __LONG_LONG_MAX__ + 16ULL;\n@@ -94,7 +97,7 @@ N(f7) (void)\n __attribute__((noinline, noclone)) void\n N(f8) (void)\n {\n-  long long v1, v2, v3;\n+  SC long long v1, v2, v3;\n #pragma omp F S collapse(3)\n   for (v1 = 0; v1 < 20; v1 += 2)\n     for (v2 = 30; v2 < 20; v2++)\n@@ -118,7 +121,7 @@ N(f9) (void)\n __attribute__((noinline, noclone)) void\n N(f10) (void)\n {\n-  int i;\n+  SC int i;\n #pragma omp F S collapse(3)\n   for (i = 0; i < 10; i++)\n     for (int j = 10; j < 8; j++)\n@@ -146,7 +149,7 @@ N(f11) (int n)\n __attribute__((noinline, noclone)) void\n N(f12) (int n)\n {\n-  int i;\n+  SC int i;\n #pragma omp F S collapse(3)\n   for (i = 0; i < 10; i++)\n     for (int j = n; j < 8; j++)\n@@ -170,7 +173,7 @@ N(f13) (void)\n __attribute__((noinline, noclone)) void\n N(f14) (void)\n {\n-  float *i;\n+  SC float *i;\n #pragma omp F S collapse(3)\n   for (i = &b[0][0][0]; i < &b[0][0][10]; i++)\n     for (float *j = &b[0][15][0]; j > &b[0][0][0]; j -= 10)"}, {"sha": "50e8d5e90117c108c33bb9f01ea967438814fcf7", "filename": "libgomp/testsuite/libgomp.c/simd-14.c", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ad0e3820fa6f21e603e83c6e0908d39915463a/libgomp%2Ftestsuite%2Flibgomp.c%2Fsimd-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ad0e3820fa6f21e603e83c6e0908d39915463a/libgomp%2Ftestsuite%2Flibgomp.c%2Fsimd-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fsimd-14.c?ref=56ad0e3820fa6f21e603e83c6e0908d39915463a", "patch": "@@ -0,0 +1,123 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-additional-options \"-msse2\" { target sse2_runtime } } */\n+/* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n+\n+int\n+main ()\n+{\n+  int i, j, b, c = 0;\n+  i = 4; j = 4; b = 7;\n+  #pragma omp simd linear(b:2) reduction(+:c)\n+  for (i = 0; i < 64; i++)\n+    {\n+      c = c + (b != 7 + 2 * i);\n+      b = b + 2;\n+    }\n+  if (c || i != 64 || b != 7 + 64 * 2)\n+    __builtin_abort ();\n+  i = 4; j = 4; b = 7;\n+  #pragma omp simd linear(b:3) reduction(+:c)\n+  for (i = 0; i < 64; i += 4)\n+    {\n+      c = c + (b != 7 + i / 4 * 3);\n+      b = b + 3;\n+    }\n+  if (c || i != 64 || b != 7 + 16 * 3)\n+    __builtin_abort ();\n+  i = 4; j = 4; b = 7;\n+  #pragma omp simd linear(i) linear(b:2) reduction(+:c)\n+  for (i = 0; i < 64; i++)\n+    {\n+      c = c + (b != 7 + 2 * i);\n+      b = b + 2;\n+    }\n+  if (c || i != 64 || b != 7 + 64 * 2)\n+    __builtin_abort ();\n+  i = 4; j = 4; b = 7;\n+  #pragma omp simd linear(i:4) linear(b:3) reduction(+:c)\n+  for (i = 0; i < 64; i += 4)\n+    {\n+      c = c + (b != 7 + i / 4 * 3);\n+      b = b + 3;\n+    }\n+  if (c || i != 64 || b != 7 + 16 * 3)\n+    __builtin_abort ();\n+  i = 4; j = 4; b = 7;\n+  #pragma omp simd collapse (2) linear(b:2) reduction(+:c)\n+  for (i = 0; i < 8; i++)\n+    for (j = 0; j < 8; j++)\n+      {\n+\tc = c + (b != 7 + 2 * j + 2 * 8 * i);\n+\tb = b + 2;\n+      }\n+  if (c || i != 8 || j != 8 || b != 7 + 64 * 2)\n+    __builtin_abort ();\n+  i = 4; j = 4; b = 7;\n+  #pragma omp simd collapse (2) lastprivate (i, j) linear(b:2) reduction(+:c)\n+  for (i = 0; i < 8; i++)\n+    for (j = 0; j < 8; j++)\n+      {\n+\tc = c + (b != 7 + 2 * j + 2 * 8 * i);\n+\tb = b + 2;\n+      }\n+  if (c || i != 8 || j != 8 || b != 7 + 64 * 2)\n+    __builtin_abort ();\n+  i = 4; j = 4; b = 7;\n+  #pragma omp parallel for simd schedule (static, 4) linear(b:2) reduction(+:c)\n+  for (i = 0; i < 64; i++)\n+    {\n+      c = c + (b != 7 + 2 * i);\n+      b = b + 2;\n+    }\n+  if (c || i != 64 || b != 7 + 64 * 2)\n+    __builtin_abort ();\n+  i = 4; j = 4; b = 7;\n+  #pragma omp parallel for simd schedule (static, 4) linear(b:3) reduction(+:c)\n+  for (i = 0; i < 64; i += 4)\n+    {\n+      c = c + (b != 7 + i / 4 * 3);\n+      b = b + 3;\n+    }\n+  if (c || i != 64 || b != 7 + 16 * 3)\n+    __builtin_abort ();\n+  i = 4; j = 4; b = 7;\n+  #pragma omp parallel for simd schedule (static, 4) linear(i) linear(b:2) reduction(+:c)\n+  for (i = 0; i < 64; i++)\n+    {\n+      c = c + (b != 7 + 2 * i);\n+      b = b + 2;\n+    }\n+  if (c || i != 64 || b != 7 + 64 * 2)\n+    __builtin_abort ();\n+  i = 4; j = 4; b = 7;\n+  #pragma omp parallel for simd schedule (static, 4) linear(i:4) linear(b:3) reduction(+:c)\n+  for (i = 0; i < 64; i += 4)\n+    {\n+      c = c + (b != 7 + i / 4 * 3);\n+      b = b + 3;\n+    }\n+  if (c || i != 64 || b != 7 + 16 * 3)\n+    __builtin_abort ();\n+  i = 4; j = 4; b = 7;\n+  #pragma omp parallel for simd lastprivate (i, j) collapse (2) schedule (static, 4) linear(b:2) reduction(+:c)\n+  for (i = 0; i < 8; i++)\n+    for (j = 0; j < 8; j++)\n+      {\n+\tc = c + (b != 7 + 2 * j + 2 * 8 * i);\n+\tb = b + 2;\n+      }\n+  if (c || i != 8 || j != 8 || b != 7 + 64 * 2)\n+    __builtin_abort ();\n+  i = 4; j = 4; b = 7;\n+  #pragma omp parallel for simd collapse (2) schedule (static, 4) linear(b:2) reduction(+:c)\n+  for (i = 0; i < 8; i++)\n+    for (j = 0; j < 8; j++)\n+      {\n+\tc = c + (b != 7 + 2 * j + 2 * 8 * i);\n+\tb = b + 2;\n+      }\n+  if (c || i != 8 || j != 8 || b != 7 + 64 * 2)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "e474b81fa44fea5eacd487eda6129a8699f7c15c", "filename": "libgomp/testsuite/libgomp.c/simd-15.c", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ad0e3820fa6f21e603e83c6e0908d39915463a/libgomp%2Ftestsuite%2Flibgomp.c%2Fsimd-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ad0e3820fa6f21e603e83c6e0908d39915463a/libgomp%2Ftestsuite%2Flibgomp.c%2Fsimd-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fsimd-15.c?ref=56ad0e3820fa6f21e603e83c6e0908d39915463a", "patch": "@@ -0,0 +1,129 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-additional-options \"-msse2\" { target sse2_runtime } } */\n+/* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n+\n+static inline void\n+foo (int *b, int *i, int *j, int x)\n+{\n+  *b = *b + x + (*i - *i) + (*j - *j);\n+}\n+\n+int\n+main ()\n+{\n+  int i, j, b, c = 0;\n+  i = 4; j = 4; b = 7;\n+  #pragma omp simd linear(b:2) reduction(+:c)\n+  for (i = 0; i < 64; i++)\n+    {\n+      c = c + (b != 7 + 2 * i);\n+      foo (&b, &i, &j, 2);\n+    }\n+  if (c || i != 64 || b != 7 + 64 * 2)\n+    __builtin_abort ();\n+  i = 4; j = 4; b = 7;\n+  #pragma omp simd linear(b:3) reduction(+:c)\n+  for (i = 0; i < 64; i += 4)\n+    {\n+      c = c + (b != 7 + i / 4 * 3);\n+      foo (&b, &i, &j, 3);\n+    }\n+  if (c || i != 64 || b != 7 + 16 * 3)\n+    __builtin_abort ();\n+  i = 4; j = 4; b = 7;\n+  #pragma omp simd linear(i) linear(b:2) reduction(+:c)\n+  for (i = 0; i < 64; i++)\n+    {\n+      c = c + (b != 7 + 2 * i);\n+      foo (&b, &i, &j, 2);\n+    }\n+  if (c || i != 64 || b != 7 + 64 * 2)\n+    __builtin_abort ();\n+  i = 4; j = 4; b = 7;\n+  #pragma omp simd linear(i:4) linear(b:3) reduction(+:c)\n+  for (i = 0; i < 64; i += 4)\n+    {\n+      c = c + (b != 7 + i / 4 * 3);\n+      foo (&b, &i, &j, 3);\n+    }\n+  if (c || i != 64 || b != 7 + 16 * 3)\n+    __builtin_abort ();\n+  i = 4; j = 4; b = 7;\n+  #pragma omp simd collapse (2) linear(b:2) reduction(+:c)\n+  for (i = 0; i < 8; i++)\n+    for (j = 0; j < 8; j++)\n+      {\n+\tc = c + (b != 7 + 2 * j + 2 * 8 * i);\n+\tfoo (&b, &i, &j, 2);\n+      }\n+  if (c || i != 8 || j != 8 || b != 7 + 64 * 2)\n+    __builtin_abort ();\n+  i = 4; j = 4; b = 7;\n+  #pragma omp simd collapse (2) lastprivate (i, j) linear(b:2) reduction(+:c)\n+  for (i = 0; i < 8; i++)\n+    for (j = 0; j < 8; j++)\n+      {\n+\tc = c + (b != 7 + 2 * j + 2 * 8 * i);\n+\tfoo (&b, &i, &j, 2);\n+      }\n+  if (c || i != 8 || j != 8 || b != 7 + 64 * 2)\n+    __builtin_abort ();\n+  i = 4; j = 4; b = 7;\n+  #pragma omp parallel for simd schedule (static, 4) linear(b:2) reduction(+:c)\n+  for (i = 0; i < 64; i++)\n+    {\n+      c = c + (b != 7 + 2 * i);\n+      foo (&b, &i, &j, 2);\n+    }\n+  if (c || i != 64 || b != 7 + 64 * 2)\n+    __builtin_abort ();\n+  i = 4; j = 4; b = 7;\n+  #pragma omp parallel for simd schedule (static, 4) linear(b:3) reduction(+:c)\n+  for (i = 0; i < 64; i += 4)\n+    {\n+      c = c + (b != 7 + i / 4 * 3);\n+      foo (&b, &i, &j, 3);\n+    }\n+  if (c || i != 64 || b != 7 + 16 * 3)\n+    __builtin_abort ();\n+  i = 4; j = 4; b = 7;\n+  #pragma omp parallel for simd schedule (static, 4) linear(i) linear(b:2) reduction(+:c)\n+  for (i = 0; i < 64; i++)\n+    {\n+      c = c + (b != 7 + 2 * i);\n+      foo (&b, &i, &j, 2);\n+    }\n+  if (c || i != 64 || b != 7 + 64 * 2)\n+    __builtin_abort ();\n+  i = 4; j = 4; b = 7;\n+  #pragma omp parallel for simd schedule (static, 4) linear(i:4) linear(b:3) reduction(+:c)\n+  for (i = 0; i < 64; i += 4)\n+    {\n+      c = c + (b != 7 + i / 4 * 3);\n+      foo (&b, &i, &j, 3);\n+    }\n+  if (c || i != 64 || b != 7 + 16 * 3)\n+    __builtin_abort ();\n+  i = 4; j = 4; b = 7;\n+  #pragma omp parallel for simd lastprivate (i, j) collapse (2) schedule (static, 4) linear(b:2) reduction(+:c)\n+  for (i = 0; i < 8; i++)\n+    for (j = 0; j < 8; j++)\n+      {\n+\tc = c + (b != 7 + 2 * j + 2 * 8 * i);\n+\tfoo (&b, &i, &j, 2);\n+      }\n+  if (c || i != 8 || j != 8 || b != 7 + 64 * 2)\n+    __builtin_abort ();\n+  i = 4; j = 4; b = 7;\n+  #pragma omp parallel for simd collapse (2) schedule (static, 4) linear(b:2) reduction(+:c)\n+  for (i = 0; i < 8; i++)\n+    for (j = 0; j < 8; j++)\n+      {\n+\tc = c + (b != 7 + 2 * j + 2 * 8 * i);\n+\tfoo (&b, &i, &j, 2);\n+      }\n+  if (c || i != 8 || j != 8 || b != 7 + 64 * 2)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "c8c29c744d74a66edc1e91f7c0365f7d665b587e", "filename": "libgomp/testsuite/libgomp.c/simd-16.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ad0e3820fa6f21e603e83c6e0908d39915463a/libgomp%2Ftestsuite%2Flibgomp.c%2Fsimd-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ad0e3820fa6f21e603e83c6e0908d39915463a/libgomp%2Ftestsuite%2Flibgomp.c%2Fsimd-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fsimd-16.c?ref=56ad0e3820fa6f21e603e83c6e0908d39915463a", "patch": "@@ -0,0 +1,67 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -std=c99\" } */\n+/* { dg-additional-options \"-msse2\" { target sse2_runtime } } */\n+/* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n+\n+int\n+main ()\n+{\n+  int b, c = 0;\n+  b = 7;\n+  #pragma omp simd linear(b:2) reduction(+:c)\n+  for (int i = 0; i < 64; i++)\n+    {\n+      c = c + (b != 7 + 2 * i);\n+      b = b + 2;\n+    }\n+  if (c || b != 7 + 64 * 2)\n+    __builtin_abort ();\n+  b = 7;\n+  #pragma omp simd linear(b:3) reduction(+:c)\n+  for (int i = 0; i < 64; i += 4)\n+    {\n+      c = c + (b != 7 + i / 4 * 3);\n+      b = b + 3;\n+    }\n+  if (c || b != 7 + 16 * 3)\n+    __builtin_abort ();\n+  b = 7;\n+  #pragma omp simd collapse (2) linear(b:2) reduction(+:c)\n+  for (int i = 0; i < 8; i++)\n+    for (int j = 0; j < 8; j++)\n+      {\n+\tc = c + (b != 7 + 2 * j + 2 * 8 * i);\n+\tb = b + 2;\n+      }\n+  if (c || b != 7 + 64 * 2)\n+    __builtin_abort ();\n+  b = 7;\n+  #pragma omp parallel for simd schedule (static, 4) linear(b:2) reduction(+:c)\n+  for (int i = 0; i < 64; i++)\n+    {\n+      c = c + (b != 7 + 2 * i);\n+      b = b + 2;\n+    }\n+  if (c || b != 7 + 64 * 2)\n+    __builtin_abort ();\n+  b = 7;\n+  #pragma omp parallel for simd schedule (static, 4) linear(b:3) reduction(+:c)\n+  for (int i = 0; i < 64; i += 4)\n+    {\n+      c = c + (b != 7 + i / 4 * 3);\n+      b = b + 3;\n+    }\n+  if (c || b != 7 + 16 * 3)\n+    __builtin_abort ();\n+  b = 7;\n+  #pragma omp parallel for simd collapse (2) schedule (static, 4) linear(b:2) reduction(+:c)\n+  for (int i = 0; i < 8; i++)\n+    for (int j = 0; j < 8; j++)\n+      {\n+\tc = c + (b != 7 + 2 * j + 2 * 8 * i);\n+\tb = b + 2;\n+      }\n+  if (c || b != 7 + 64 * 2)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "136e6e64ade3ac69cc8d6e5d090638f3ccc31527", "filename": "libgomp/testsuite/libgomp.c/simd-17.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ad0e3820fa6f21e603e83c6e0908d39915463a/libgomp%2Ftestsuite%2Flibgomp.c%2Fsimd-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ad0e3820fa6f21e603e83c6e0908d39915463a/libgomp%2Ftestsuite%2Flibgomp.c%2Fsimd-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fsimd-17.c?ref=56ad0e3820fa6f21e603e83c6e0908d39915463a", "patch": "@@ -0,0 +1,73 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -std=c99\" } */\n+/* { dg-additional-options \"-msse2\" { target sse2_runtime } } */\n+/* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n+\n+static inline void\n+foo (int *b, int *i, int *j, int x)\n+{\n+  *b = *b + x + (*i - *i) + (*j - *j);\n+}\n+\n+int\n+main ()\n+{\n+  int b, c = 0;\n+  b = 7;\n+  #pragma omp simd linear(b:2) reduction(+:c)\n+  for (int i = 0; i < 64; i++)\n+    {\n+      c = c + (b != 7 + 2 * i);\n+      foo (&b, &i, &i, 2);\n+    }\n+  if (c || b != 7 + 64 * 2)\n+    __builtin_abort ();\n+  b = 7;\n+  #pragma omp simd linear(b:3) reduction(+:c)\n+  for (int i = 0; i < 64; i += 4)\n+    {\n+      c = c + (b != 7 + i / 4 * 3);\n+      foo (&b, &i, &i, 3);\n+    }\n+  if (c || b != 7 + 16 * 3)\n+    __builtin_abort ();\n+  b = 7;\n+  #pragma omp simd collapse (2) linear(b:2) reduction(+:c)\n+  for (int i = 0; i < 8; i++)\n+    for (int j = 0; j < 8; j++)\n+      {\n+\tc = c + (b != 7 + 2 * j + 2 * 8 * i);\n+\tfoo (&b, &i, &j, 2);\n+      }\n+  if (c || b != 7 + 64 * 2)\n+    __builtin_abort ();\n+  b = 7;\n+  #pragma omp parallel for simd schedule (static, 4) linear(b:2) reduction(+:c)\n+  for (int i = 0; i < 64; i++)\n+    {\n+      c = c + (b != 7 + 2 * i);\n+      foo (&b, &i, &i, 2);\n+    }\n+  if (c || b != 7 + 64 * 2)\n+    __builtin_abort ();\n+  b = 7;\n+  #pragma omp parallel for simd schedule (static, 4) linear(b:3) reduction(+:c)\n+  for (int i = 0; i < 64; i += 4)\n+    {\n+      c = c + (b != 7 + i / 4 * 3);\n+      foo (&b, &i, &i, 3);\n+    }\n+  if (c || b != 7 + 16 * 3)\n+    __builtin_abort ();\n+  b = 7;\n+  #pragma omp parallel for simd collapse (2) schedule (static, 4) linear(b:2) reduction(+:c)\n+  for (int i = 0; i < 8; i++)\n+    for (int j = 0; j < 8; j++)\n+      {\n+\tc = c + (b != 7 + 2 * j + 2 * 8 * i);\n+\tfoo (&b, &i, &j, 2);\n+      }\n+  if (c || b != 7 + 64 * 2)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}