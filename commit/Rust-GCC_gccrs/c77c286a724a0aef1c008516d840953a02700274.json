{"sha": "c77c286a724a0aef1c008516d840953a02700274", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc3YzI4NmE3MjRhMGFlZjFjMDA4NTE2ZDg0MDk1M2EwMjcwMDI3NA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-06-04T18:58:08Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-06-04T18:58:08Z"}, "message": "pa.c (reloc_needed): New function.\n\n        * pa/pa.c (reloc_needed): New function.\n        * pa/pa.h (TEXT_SPACE_P): Variables/constants with initializers\n        requiring relocs never live in the text space.\n\nFrom-SVN: r12156", "tree": {"sha": "c994feeff39dfc47f927fc618fe227af0a8f7e21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c994feeff39dfc47f927fc618fe227af0a8f7e21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c77c286a724a0aef1c008516d840953a02700274", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c77c286a724a0aef1c008516d840953a02700274", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c77c286a724a0aef1c008516d840953a02700274", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c77c286a724a0aef1c008516d840953a02700274/comments", "author": null, "committer": null, "parents": [{"sha": "e4fa6b06f01a3b6074ff446d948e705dccf2af96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4fa6b06f01a3b6074ff446d948e705dccf2af96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4fa6b06f01a3b6074ff446d948e705dccf2af96"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "f2dca71dcee022d2ef060a8ee5e927a9947f4216", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77c286a724a0aef1c008516d840953a02700274/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77c286a724a0aef1c008516d840953a02700274/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=c77c286a724a0aef1c008516d840953a02700274", "patch": "@@ -1182,6 +1182,47 @@ emit_move_sequence (operands, mode, scratch_reg)\n   return 0;\n }\n \n+/* Examine EXP and return nonzero if it contains an ADDR_EXPR (meaning\n+   it will need a link/runtime reloc.  */\n+\n+int\n+reloc_needed (exp)\n+     tree exp;\n+{\n+  int reloc = 0;\n+\n+  switch (TREE_CODE (exp))\n+    {\n+    case ADDR_EXPR:\n+      return 1;\n+\n+    case PLUS_EXPR:\n+    case MINUS_EXPR:\n+      reloc = reloc_needed (TREE_OPERAND (exp, 0));\n+      reloc |= reloc_needed (TREE_OPERAND (exp, 1));\n+      break;\n+\n+    case NOP_EXPR:\n+    case CONVERT_EXPR:\n+    case NON_LVALUE_EXPR:\n+      reloc = reloc_needed (TREE_OPERAND (exp, 0));\n+      break;\n+\n+    case CONSTRUCTOR:\n+      {\n+\tregister tree link;\n+\tfor (link = CONSTRUCTOR_ELTS (exp); link; link = TREE_CHAIN (link))\n+\t  if (TREE_VALUE (link) != 0)\n+\t    reloc |= reloc_needed (TREE_VALUE (link));\n+      }\n+      break;\n+\n+    case ERROR_MARK:\n+      break;\n+    }\n+  return reloc;\n+}\n+\n /* Does operand (which is a symbolic_operand) live in text space? If\n    so SYMBOL_REF_FLAG, which is set by ENCODE_SECTION_INFO, will be true.  */\n "}, {"sha": "c1c082be34f1f1c02aa947091747c039852ee433", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77c286a724a0aef1c008516d840953a02700274/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77c286a724a0aef1c008516d840953a02700274/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=c77c286a724a0aef1c008516d840953a02700274", "patch": "@@ -1530,8 +1530,10 @@ extern struct rtx_def *hppa_legitimize_address ();\n   (TREE_CODE (DECL) == FUNCTION_DECL\t\t\t\t\t\\\n    || (TREE_CODE (DECL) == VAR_DECL\t\t\t\t\t\\\n        && TREE_READONLY (DECL) && ! TREE_SIDE_EFFECTS (DECL)\t\t\\\n+       && (! DECL_INITIAL (DECL) || ! reloc_needed (DECL_INITIAL (DECL))) \\\n        && !flag_pic)\t\t\t\t\t\t\t\\\n    || (*tree_code_type[(int) TREE_CODE (DECL)] == 'c'\t\t\t\\\n+       && (! DECL_INITIAL (DECL) || ! reloc_needed (DECL_INITIAL (DECL))) \\\n        && !(TREE_CODE (DECL) == STRING_CST && flag_writable_strings)))\n \n #define FUNCTION_NAME_P(NAME) \\"}]}