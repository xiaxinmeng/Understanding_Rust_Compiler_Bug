{"sha": "6d553e9bc9739ac67f96f31b6108c25e7a74f3a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ1NTNlOWJjOTczOWFjNjdmOTZmMzFiNjEwOGMyNWU3YTc0ZjNhMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-04-21T08:17:23Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-04-21T08:17:23Z"}, "message": "re PR tree-optimization/80237 (float to double conversion is not optimized away)\n\n2017-04-21  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/80237\n\t* tree-ssa-pre.c (find_leader_in_sets): Add third set argument,\n\tdefaulted to NULL.\n\t(phi_translate_1): Also allow a leader in AVAIL_OUT of pred\n\tfor a simplified result.\n\n\t* gcc.dg/tree-ssa/tailcall-9.c: New testcase.\n\t* gcc.dg/tree-ssa/ldist-pr45948.c: Remove undefined behavior,\n\tadjust expected optimizations.\n\nFrom-SVN: r247049", "tree": {"sha": "1eb7963a3c4fcd8c091d82c031e19a209ed360b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1eb7963a3c4fcd8c091d82c031e19a209ed360b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d553e9bc9739ac67f96f31b6108c25e7a74f3a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d553e9bc9739ac67f96f31b6108c25e7a74f3a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d553e9bc9739ac67f96f31b6108c25e7a74f3a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d553e9bc9739ac67f96f31b6108c25e7a74f3a3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7fd1a7474a04fdf68e3b1645de16bcfa45a915d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fd1a7474a04fdf68e3b1645de16bcfa45a915d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fd1a7474a04fdf68e3b1645de16bcfa45a915d0"}], "stats": {"total": 63, "additions": 53, "deletions": 10}, "files": [{"sha": "c30b09b1061209ba001af138c963027f476dcd66", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d553e9bc9739ac67f96f31b6108c25e7a74f3a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d553e9bc9739ac67f96f31b6108c25e7a74f3a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d553e9bc9739ac67f96f31b6108c25e7a74f3a3", "patch": "@@ -1,3 +1,11 @@\n+2017-04-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/80237\n+\t* tree-ssa-pre.c (find_leader_in_sets): Add third set argument,\n+\tdefaulted to NULL.\n+\t(phi_translate_1): Also allow a leader in AVAIL_OUT of pred\n+\tfor a simplified result.\n+\n 2016-04-21  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-loop-ivcanon.c (constant_after_peeling): Do not require"}, {"sha": "ddee40285f363a246e5cd48cffc16549d49d56e9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d553e9bc9739ac67f96f31b6108c25e7a74f3a3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d553e9bc9739ac67f96f31b6108c25e7a74f3a3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6d553e9bc9739ac67f96f31b6108c25e7a74f3a3", "patch": "@@ -1,3 +1,10 @@\n+2017-04-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/80237\n+\t* gcc.dg/tree-ssa/tailcall-9.c: New testcase.\n+\t* gcc.dg/tree-ssa/ldist-pr45948.c: Remove undefined behavior,\n+\tadjust expected optimizations.\n+\n 2016-04-21  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/vect/no-scevccp-outer-13.c: Adjust to prevent unrolling"}, {"sha": "136eca8c0a55c903a39aac71558ac12419afd365", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ldist-pr45948.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d553e9bc9739ac67f96f31b6108c25e7a74f3a3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-pr45948.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d553e9bc9739ac67f96f31b6108c25e7a74f3a3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-pr45948.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-pr45948.c?ref=6d553e9bc9739ac67f96f31b6108c25e7a74f3a3", "patch": "@@ -1,22 +1,26 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ftree-loop-distribution -ftree-loop-distribute-patterns -fdump-tree-ldist-details\" } */\n+/* { dg-options \"-O2 -ftree-loop-distribution -ftree-loop-distribute-patterns -fdump-tree-ldist-details -fdump-tree-optimized\" } */\n \n extern void bar(int);\n \n void\n-foo (int i, int n)\n+foo (unsigned i, unsigned n)\n {\n   int a[30];\n   int b[30];\n-  for (; i < n; i++)\n+  if (n == 0)\n+    return;\n+  for (i=0; i < n; i++)\n     a[i] = b[i] = 0;\n \n   while (1)\n     if (b[0])\n       bar (a[i - 1]);\n }\n \n-/* We should apply loop distribution and generate 2 memset (0).  */\n+/* We should apply loop distribution and generate 1 memset (0).  PRE optimizes\n+   away a[] completely.  */\n \n-/* { dg-final { scan-tree-dump \"distributed: split to 0 loops and 2 library calls\" \"ldist\" } } */\n-/* { dg-final { scan-tree-dump-times \"generated memset zero\" 2 \"ldist\" } } */\n+/* { dg-final { scan-tree-dump \"distributed: split to 0 loops and 1 library calls\" \"ldist\" } } */\n+/* { dg-final { scan-tree-dump-times \"generated memset zero\" 1 \"ldist\" } } */\n+/* { dg-final { scan-tree-dump-times \"int a\" 0 \"optimized\" } } */"}, {"sha": "c67120fe773ac0e7c686f6a1f99ea4c8ff4f4f48", "filename": "gcc/testsuite/gcc.dg/tree-ssa/tailcall-9.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d553e9bc9739ac67f96f31b6108c25e7a74f3a3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ftailcall-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d553e9bc9739ac67f96f31b6108c25e7a74f3a3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ftailcall-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ftailcall-9.c?ref=6d553e9bc9739ac67f96f31b6108c25e7a74f3a3", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-tailc-details\" } */\n+\n+__attribute__((noinline))\n+static float f(float x)\n+{\n+  return x*x;\n+}\n+\n+static double g(float x)\n+{\n+  return x>0 ? f(x) : x+1.0;\n+}\n+\n+float foo(float x)\n+{\n+  return g(x);\n+}\n+\n+/* { dg-final { scan-tree-dump \"Found tail call\" \"tailc\" } } */"}, {"sha": "2c6405aa7a8bdb2639e9c4b156142227382722f5", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d553e9bc9739ac67f96f31b6108c25e7a74f3a3/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d553e9bc9739ac67f96f31b6108c25e7a74f3a3/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=6d553e9bc9739ac67f96f31b6108c25e7a74f3a3", "patch": "@@ -1313,17 +1313,20 @@ translate_vuse_through_block (vec<vn_reference_op_s> operands,\n }\n \n /* Like bitmap_find_leader, but checks for the value existing in SET1 *or*\n-   SET2.  This is used to avoid making a set consisting of the union\n-   of PA_IN and ANTIC_IN during insert.  */\n+   SET2 *or* SET3.  This is used to avoid making a set consisting of the union\n+   of PA_IN and ANTIC_IN during insert and phi-translation.  */\n \n static inline pre_expr\n-find_leader_in_sets (unsigned int val, bitmap_set_t set1, bitmap_set_t set2)\n+find_leader_in_sets (unsigned int val, bitmap_set_t set1, bitmap_set_t set2,\n+\t\t     bitmap_set_t set3 = NULL)\n {\n   pre_expr result;\n \n   result = bitmap_find_leader (set1, val);\n   if (!result && set2)\n     result = bitmap_find_leader (set2, val);\n+  if (!result && set3)\n+    result = bitmap_find_leader (set3, val);\n   return result;\n }\n \n@@ -1478,7 +1481,8 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \t\t    else\n \t\t      {\n \t\t\tunsigned value_id = get_expr_value_id (constant);\n-\t\t\tconstant = find_leader_in_sets (value_id, set1, set2);\n+\t\t\tconstant = find_leader_in_sets (value_id, set1, set2,\n+\t\t\t\t\t\t\tAVAIL_OUT (pred));\n \t\t\tif (constant)\n \t\t\t  return constant;\n \t\t      }"}]}