{"sha": "0d893a63543e2d476899c2d7c319327eef2dafa5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ4OTNhNjM1NDNlMmQ0NzY4OTljMmQ3YzMxOTMyN2VlZjJkYWZhNQ==", "commit": {"author": {"name": "Matt Kraai", "email": "kraai@alumni.cmu.edu", "date": "2002-06-24T17:21:04Z"}, "committer": {"name": "Matt Kraai", "email": "kraai@gcc.gnu.org", "date": "2002-06-24T17:21:04Z"}, "message": "extend.texi: Change `@dots{}' to `/* @r{@dots{}} */' in examples.\n\n\t* doc/extend.texi: Change `@dots{}' to `/* @r{@dots{}} */'\n\tin examples.\n\nFrom-SVN: r54960", "tree": {"sha": "2986ce122cf3d52da55705da730d1acdd0eb779a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2986ce122cf3d52da55705da730d1acdd0eb779a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d893a63543e2d476899c2d7c319327eef2dafa5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d893a63543e2d476899c2d7c319327eef2dafa5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d893a63543e2d476899c2d7c319327eef2dafa5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d893a63543e2d476899c2d7c319327eef2dafa5/comments", "author": null, "committer": null, "parents": [{"sha": "04a5176aecf0c6d490283ffc3dc9529924457415", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04a5176aecf0c6d490283ffc3dc9529924457415", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04a5176aecf0c6d490283ffc3dc9529924457415"}], "stats": {"total": 49, "additions": 27, "deletions": 22}, "files": [{"sha": "addb5dac2e67fb8a6bac85868e3b119f6d83268a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d893a63543e2d476899c2d7c319327eef2dafa5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d893a63543e2d476899c2d7c319327eef2dafa5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d893a63543e2d476899c2d7c319327eef2dafa5", "patch": "@@ -1,3 +1,8 @@\n+2002-06-24  Matt Kraai  <kraai@alumni.cmu.edu>\n+\n+\t* doc/extend.texi: Change `@dots{}' to `/* @r{@dots{}} */'\n+\tin examples.\n+\t\n 2002-06-24  Art Haas  <ahaas@neosoft.com>\n \n \t* doc/extend.texi (Other Builtins): Change `...' to `@dots{}'."}, {"sha": "37451c47f5fefb8df0f63c65e453bb2ccf0726aa", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d893a63543e2d476899c2d7c319327eef2dafa5/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d893a63543e2d476899c2d7c319327eef2dafa5/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=0d893a63543e2d476899c2d7c319327eef2dafa5", "patch": "@@ -552,7 +552,7 @@ __label__ @var{label};\n or\n \n @example\n-__label__ @var{label1}, @var{label2}, @dots{};\n+__label__ @var{label1}, @var{label2}, /* @r{@dots{}} */;\n @end example\n \n Local label declarations must come at the beginning of the statement\n@@ -603,7 +603,7 @@ wherever a constant of that type is valid.  For example:\n \n @example\n void *ptr;\n-@dots{}\n+/* @r{@dots{}} */\n ptr = &&foo;\n @end example\n \n@@ -698,9 +698,9 @@ bar (int *array, int offset, int size)\n   int access (int *array, int index)\n     @{ return array[index + offset]; @}\n   int i;\n-  @dots{}\n+  /* @r{@dots{}} */\n   for (i = 0; i < size; i++)\n-    @dots{} access (array, i) @dots{}\n+    /* @r{@dots{}} */ access (array, i) /* @r{@dots{}} */\n @}\n @end group\n @end example\n@@ -760,10 +760,10 @@ bar (int *array, int offset, int size)\n       return array[index + offset];\n     @}\n   int i;\n-  @dots{}\n+  /* @r{@dots{}} */\n   for (i = 0; i < size; i++)\n-    @dots{} access (array, i) @dots{}\n-  @dots{}\n+    /* @r{@dots{}} */ access (array, i) /* @r{@dots{}} */\n+  /* @r{@dots{}} */\n   return 0;\n \n  /* @r{Control comes here from @code{access}\n@@ -784,14 +784,14 @@ bar (int *array, int offset, int size)\n @{\n   __label__ failure;\n   auto int access (int *, int);\n-  @dots{}\n+  /* @r{@dots{}} */\n   int access (int *array, int index)\n     @{\n       if (index > size)\n         goto failure;\n       return array[index + offset];\n     @}\n-  @dots{}\n+  /* @r{@dots{}} */\n @}\n @end example\n \n@@ -1354,7 +1354,7 @@ You can also use variable-length arrays as arguments to functions:\n struct entry\n tester (int len, char data[len][len])\n @{\n-  @dots{}\n+  /* @r{@dots{}} */\n @}\n @end example\n \n@@ -1369,7 +1369,7 @@ use a forward declaration in the parameter list---another GNU extension.\n struct entry\n tester (int len; char data[len][len], int len)\n @{\n-  @dots{}\n+  /* @r{@dots{}} */\n @}\n @end example\n \n@@ -1536,7 +1536,7 @@ Here is an example of an initializer with run-time varying elements:\n foo (float f, float g)\n @{\n   float beat_freqs[2] = @{ f-g, f+g @};\n-  @dots{}\n+  /* @r{@dots{}} */\n @}\n @end example\n \n@@ -1825,7 +1825,7 @@ union type is equivalent to storing in a member of the union:\n \n @example\n union foo u;\n-@dots{}\n+/* @r{@dots{}} */\n u = (union foo) x  @equiv{}  u.i = x\n u = (union foo) y  @equiv{}  u.d = y\n @end example\n@@ -1834,7 +1834,7 @@ You can also use the union cast as a function argument:\n \n @example\n void hack (union foo);\n-@dots{}\n+/* @r{@dots{}} */\n hack ((union foo) x);\n @end example\n \n@@ -1850,7 +1850,7 @@ C89 mode.  For example, you could do:\n \n @example\n int i;\n-@dots{}\n+/* @r{@dots{}} */\n i++;\n int j = i + 2;\n @end example\n@@ -1913,9 +1913,9 @@ their own functions that never return.  You can declare them\n void fatal () __attribute__ ((noreturn));\n \n void\n-fatal (@dots{})\n+fatal (/* @r{@dots{}} */)\n @{\n-  @dots{} /* @r{Print error message.} */ @dots{}\n+  /* @r{@dots{}} */ /* @r{Print error message.} */ /* @r{@dots{}} */\n   exit (1);\n @}\n @end group\n@@ -3956,7 +3956,7 @@ extern func () asm (\"FUNC\");\n \n func (x, y)\n      int x, y;\n-@dots{}\n+/* @r{@dots{}} */\n @end example\n \n It is up to you to make sure that the assembler names you choose do not\n@@ -4683,7 +4683,7 @@ data.  For instance, you can write\n @smallexample\n static const int table[] = @{\n    __builtin_constant_p (EXPRESSION) ? (EXPRESSION) : -1,\n-   /* @dots{} */\n+   /* @r{@dots{}} */\n @};\n @end smallexample\n \n@@ -4759,7 +4759,7 @@ for (i = 0; i < n; i++)\n     a[i] = a[i] + b[i];\n     __builtin_prefetch (&a[i+j], 1, 1);\n     __builtin_prefetch (&b[i+j], 0, 1);\n-    /* @dots{} */\n+    /* @r{@dots{}} */\n   @}\n @end smallexample\n \n@@ -6778,7 +6778,7 @@ context.\n @example\n void fn (int *__restrict__ rptr, int &__restrict__ rref)\n @{\n-  @dots{}\n+  /* @r{@dots{}} */\n @}\n @end example\n \n@@ -6792,7 +6792,7 @@ unaliased by using @code{__restrict__} as a member function qualifier.\n @example\n void T::fn () __restrict__\n @{\n-  @dots{}\n+  /* @r{@dots{}} */\n @}\n @end example\n "}]}