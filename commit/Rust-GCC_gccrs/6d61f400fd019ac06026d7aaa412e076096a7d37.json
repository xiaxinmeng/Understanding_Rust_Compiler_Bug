{"sha": "6d61f400fd019ac06026d7aaa412e076096a7d37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ2MWY0MDBmZDAxOWFjMDYwMjZkN2FhYTQxMmUwNzYwOTZhN2QzNw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2000-04-10T16:21:28Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-04-10T16:21:28Z"}, "message": "cxxabi.h (__pointer_type_info): Add restrict and incomplete flags.\n\n\t* inc/cxxabi.h (__pointer_type_info): Add restrict and\n\tincomplete flags.\n\t(__pointer_type_info::__pointer_catch): New virtual function.\n\t(__pointer_to_member_type_info): Derive from\n\t__pointer_type_info. Adjust.\n\t(__pointer_to_member_type_info::__do_catch): Remove.\n\t(__pointer_to_member_type_info::__is_pointer_p): Declare.\n\t(__pointer_to_member_type_info::__pointer_catch): Declare.\n\t* rtti.c (qualifier_flags): Add restrict flag.\n\t(ptmd_initializer): Reorder members.\n\t(create_tinfo_types): Expand comments. Reorder\n\tptmd_desc_type_node members.\n\t* tinfo2.cc (__pointer_to_member_type_info::__is_pointer_p):\n\tImplement.\n\t(__pointer_type_info::__do_catch): Move specific code into\n\t__pointer_catch. Call it.\n\t(__pointer_type_info::__pointer_catch): Non-pointer-to-member\n\tspecific catch checking. Fix void conversion check.\n\t(__pointer_to_member_type_info::__do_catch): Remove.\n\t(__pointer_to_member_type_info::__pointer_catch): Implement.\n\nFrom-SVN: r33061", "tree": {"sha": "3768b8d8cee3530ee2196a4ce4071d1941cdee6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3768b8d8cee3530ee2196a4ce4071d1941cdee6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d61f400fd019ac06026d7aaa412e076096a7d37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d61f400fd019ac06026d7aaa412e076096a7d37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d61f400fd019ac06026d7aaa412e076096a7d37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d61f400fd019ac06026d7aaa412e076096a7d37/comments", "author": null, "committer": null, "parents": [{"sha": "4b7ee6157ab47830d9b198c2f968dbef9388e768", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b7ee6157ab47830d9b198c2f968dbef9388e768", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b7ee6157ab47830d9b198c2f968dbef9388e768"}], "stats": {"total": 123, "additions": 75, "deletions": 48}, "files": [{"sha": "b7c8a05c9fad6babe7bb8d05c03d189df558c34d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d61f400fd019ac06026d7aaa412e076096a7d37/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d61f400fd019ac06026d7aaa412e076096a7d37/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6d61f400fd019ac06026d7aaa412e076096a7d37", "patch": "@@ -1,3 +1,26 @@\n+2000-04-10  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* inc/cxxabi.h (__pointer_type_info): Add restrict and\n+\tincomplete flags.\n+\t(__pointer_type_info::__pointer_catch): New virtual function.\n+\t(__pointer_to_member_type_info): Derive from\n+\t__pointer_type_info. Adjust.\n+\t(__pointer_to_member_type_info::__do_catch): Remove.\n+\t(__pointer_to_member_type_info::__is_pointer_p): Declare.\n+\t(__pointer_to_member_type_info::__pointer_catch): Declare.\n+\t* rtti.c (qualifier_flags): Add restrict flag.\n+\t(ptmd_initializer): Reorder members.\n+\t(create_tinfo_types): Expand comments. Reorder\n+\tptmd_desc_type_node members.\n+\t* tinfo2.cc (__pointer_to_member_type_info::__is_pointer_p):\n+\tImplement.\n+\t(__pointer_type_info::__do_catch): Move specific code into\n+\t__pointer_catch. Call it.\n+\t(__pointer_type_info::__pointer_catch): Non-pointer-to-member\n+\tspecific catch checking. Fix void conversion check.\n+\t(__pointer_to_member_type_info::__do_catch): Remove.\n+\t(__pointer_to_member_type_info::__pointer_catch): Implement.\n+\t\n 2000-04-10  Martin v. L\ufffdwis  <loewis@informatik.hu-berlin.de>\n \n \t* lex.c (init_parse): Remove traces of classof and headof."}, {"sha": "a40482cb15a53713b1c4b3b0bf713306292cabcd", "filename": "gcc/cp/inc/cxxabi.h", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d61f400fd019ac06026d7aaa412e076096a7d37/gcc%2Fcp%2Finc%2Fcxxabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d61f400fd019ac06026d7aaa412e076096a7d37/gcc%2Fcp%2Finc%2Fcxxabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finc%2Fcxxabi.h?ref=6d61f400fd019ac06026d7aaa412e076096a7d37", "patch": "@@ -64,15 +64,22 @@ class __pointer_type_info\n public:\n   enum quals_masks {\n     const_mask = 0x1,\n-    volatile_mask = 0x2\n+    volatile_mask = 0x2,\n+    restrict_mask = 0x4,\n+    incomplete_mask = 0x8\n   };\n \n /* implementation defined member functions */\n protected:\n   virtual bool __is_pointer_p () const;\n protected:\n-  virtual bool __do_catch (const std::type_info *__thr_type, void **__thr_obj,\n+  virtual bool __do_catch (const std::type_info *__thr_type,\n+                           void **__thr_obj,\n                            unsigned __outer) const;\n+protected:\n+  virtual bool __pointer_catch (const __pointer_type_info *__thr_type,\n+                                void **__thr_obj,\n+                                unsigned __outer) const;\n };\n \n /* type information for array objects */\n@@ -120,36 +127,30 @@ class __enum_type_info\n \n /* type information for a pointer to member variable (not function) */\n class __pointer_to_member_type_info\n-  : public std::type_info\n+  : public __pointer_type_info\n {\n /* abi defined member variables */\n public:\n   const __class_type_info *klass;   /* class of the member */\n-  const std::type_info *type;       /* type of the pointed to member */\n-  int quals;                        /* qualifications of the pointed to type */\n \n /* abi defined member functions */\n public:\n   virtual ~__pointer_to_member_type_info ();\n public:\n   explicit __pointer_to_member_type_info (const char *__n,\n-                                          const __class_type_info *__klass,\n+                                          int __quals,\n                                           const std::type_info *__type,\n-                                          int __quals)\n-    : std::type_info (__n), klass (__klass), type (__type), quals (__quals)\n+                                          const __class_type_info *__klass)\n+    : __pointer_type_info (__n, __quals, __type), klass (__klass)\n     { }\n \n-/* implementation defined types */\n-public:\n-  enum quals_masks {\n-    const_mask = 0x1,\n-    volatile_mask = 0x2\n-  };\n-\n /* implementation defined member functions */\n protected:\n-  virtual bool __do_catch (const std::type_info *__thr_type, void **__thr_obj,\n-                         unsigned __outer) const;\n+  virtual bool __is_pointer_p () const;\n+protected:\n+  virtual bool __pointer_catch (const __pointer_type_info *__thr_type,\n+                                void **__thr_obj,\n+                                unsigned __outer) const;\n };\n \n class __class_type_info;"}, {"sha": "029d4d8e9d1c93330b2845aa335a19d6c6fa302d", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d61f400fd019ac06026d7aaa412e076096a7d37/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d61f400fd019ac06026d7aaa412e076096a7d37/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=6d61f400fd019ac06026d7aaa412e076096a7d37", "patch": "@@ -1286,6 +1286,8 @@ qualifier_flags (type)\n     flags |= 1;\n   if (quals & TYPE_QUAL_VOLATILE)\n     flags |= 2;\n+  if (quals & TYPE_QUAL_RESTRICT)\n+    flags |= 4;\n   return flags;\n }\n \n@@ -1369,14 +1371,14 @@ ptmd_initializer (desc, target)\n   tree klass = TYPE_PTRMEM_CLASS_TYPE (target);\n   int flags = qualifier_flags (to);\n   \n-  init = tree_cons (NULL_TREE,\n-                    build_unary_op (ADDR_EXPR, get_tinfo_decl (klass), 0),\n-                    init);  \n+  init = tree_cons (NULL_TREE, build_int_2 (flags, 0), init);\n   init = tree_cons (NULL_TREE,\n                     build_unary_op (ADDR_EXPR,\n                                     get_tinfo_decl (TYPE_MAIN_VARIANT (to)), 0),\n                     init);\n-  init = tree_cons (NULL_TREE, build_int_2 (flags, 0), init);\n+  init = tree_cons (NULL_TREE,\n+                    build_unary_op (ADDR_EXPR, get_tinfo_decl (klass), 0),\n+                    init);  \n   \n   init = build (CONSTRUCTOR, NULL_TREE, NULL_TREE, nreverse (init));\n   TREE_HAS_CONSTRUCTOR (init) = TREE_CONSTANT (init) = TREE_STATIC (init) = 1;\n@@ -1821,7 +1823,8 @@ create_tinfo_types ()\n         (\"__class_type_info\", 0,\n          NULL);\n   \n-  /* Single public non-virtual base class. Add pointer to base class.  */\n+  /* Single public non-virtual base class. Add pointer to base class. \n+     This is really a descendant of __class_type_info.  */\n   si_class_desc_type_node = create_pseudo_type_info\n            (\"__si_class_type_info\", 0,\n             build_lang_decl (FIELD_DECL, NULL_TREE, ptr_type_info),\n@@ -1843,13 +1846,14 @@ create_tinfo_types ()\n   /* General heirarchy is created as necessary in this vector. */\n   vmi_class_desc_type_node = make_tree_vec (10);\n   \n-  /* Pointer to member data type_info.  Add pointer to the class, pointer\n-     to the member's type info and qualifications flags.  */\n+  /* Pointer to member data type_info.  Add qualifications flags,\n+     pointer to the member's type info and pointer to the class.\n+     This is really a descendant of __pointer_type_info.  */\n   ptmd_desc_type_node = create_pseudo_type_info\n        (\"__pointer_to_member_type_info\", 0,\n+        build_lang_decl (FIELD_DECL, NULL_TREE, integer_type_node),\n         build_lang_decl (FIELD_DECL, NULL_TREE, ptr_type_info),\n         build_lang_decl (FIELD_DECL, NULL_TREE, ptr_type_info),\n-        build_lang_decl (FIELD_DECL, NULL_TREE, integer_type_node),\n         NULL);\n \n   pop_nested_namespace (abi_node);"}, {"sha": "3d3c66a61e98af81b7edd11a7b0105be967d6d1c", "filename": "gcc/cp/tinfo2.cc", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d61f400fd019ac06026d7aaa412e076096a7d37/gcc%2Fcp%2Ftinfo2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d61f400fd019ac06026d7aaa412e076096a7d37/gcc%2Fcp%2Ftinfo2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftinfo2.cc?ref=6d61f400fd019ac06026d7aaa412e076096a7d37", "patch": "@@ -138,6 +138,13 @@ __is_function_p () const\n   return true;\n }\n \n+bool __pointer_to_member_type_info::\n+__is_pointer_p () const\n+{\n+  return false;\n+}\n+\n+\n bool __pointer_type_info::\n __do_catch (const type_info *thr_type,\n             void **thr_obj,\n@@ -146,7 +153,7 @@ __do_catch (const type_info *thr_type,\n   if (*this == *thr_type)\n     return true;      // same type\n   if (typeid (*this) != typeid (*thr_type))\n-    return false;     // not both pointers\n+    return false;     // not both same kind of pointers\n   \n   if (!(outer & 1))\n     // We're not the same and our outer pointers are not all const qualified\n@@ -164,41 +171,33 @@ __do_catch (const type_info *thr_type,\n   if (!(quals & const_mask))\n     outer &= ~1;\n   \n+  return __pointer_catch (thrown_type, thr_obj, outer);\n+}\n+\n+bool __pointer_type_info::\n+__pointer_catch (const __pointer_type_info *thrown_type,\n+                 void **thr_obj,\n+                 unsigned outer) const\n+{\n   if (outer < 2 && *type == typeid (void))\n     {\n       // conversion to void\n-      return !thrown_type->__is_function_p ();\n+      return !thrown_type->type->__is_function_p ();\n     }\n   \n   return type->__do_catch (thrown_type->type, thr_obj, outer + 2);\n }\n \n bool __pointer_to_member_type_info::\n-__do_catch (const type_info *thr_type,\n-            void **thr_obj,\n-            unsigned outer) const\n+__pointer_catch (const __pointer_type_info *thr_type,\n+                 void **thr_obj,\n+                 unsigned outer) const\n {\n-  if (*this == *thr_type)\n-    return true;      // same type\n-  if (typeid (*this) != typeid (*thr_type))\n-    return false;     // not both pointers to member\n-  \n-  if (!(outer & 1))\n-    // We're not the same and our outer pointers are not all const qualified\n-    // Therefore there must at least be a qualification conversion involved.\n-    // But for that to be valid, our outer pointers must be const qualified.\n-    return false;\n-  \n+  // This static cast is always valid, as our caller will have determined that\n+  // thr_type is really a __pointer_to_member_type_info.\n   const __pointer_to_member_type_info *thrown_type =\n     static_cast <const __pointer_to_member_type_info *> (thr_type);\n   \n-  if (thrown_type->quals & ~quals)\n-    // We're less qualified.\n-    return false;\n-  \n-  if (!(quals & const_mask))\n-    outer &= ~1;\n-  \n   if (*klass != *thrown_type->klass)\n     return false;     // not pointers to member of same class\n   "}]}