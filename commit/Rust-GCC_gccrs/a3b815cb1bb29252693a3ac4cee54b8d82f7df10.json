{"sha": "a3b815cb1bb29252693a3ac4cee54b8d82f7df10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNiODE1Y2IxYmIyOTI1MjY5M2EzYWM0Y2VlNTRiOGQ4MmY3ZGYxMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2000-09-15T18:10:11Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2000-09-15T18:10:11Z"}, "message": "alpha.h (TARGET_CPU_EV5, [...]): Define.\n\n\t* config/alpha/alpha.h (TARGET_CPU_EV5, TARGET_CPU_EV6): Define.\n\t(TARGET_OPTIONS): Add tune=.\n\t(alpha_tune_string): Declare.\n\t* config/alpha/alpha.c (override_options): Add cpu_table.\n\tUse alpha_cpu_string first to set both alpha_cpu and target_flags\n\tand then alpha_tune_string to set alpha_cpu only.\n\tReplace tests for PROCESSOR_EV* with TARGET_CPU_EV* tests.\n\t* config/alpha/elf.h (ASM_FILE_START): Likewise.\n\t* config/alpha/osf.h (ASM_FILE_START): Likewise.\n\t* config/alpha/openbsd.h (ASM_FILE_START): Likewise.\n\nFrom-SVN: r36443", "tree": {"sha": "6097819cd370473d7f5afcc711ca9b651b3b1725", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6097819cd370473d7f5afcc711ca9b651b3b1725"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3b815cb1bb29252693a3ac4cee54b8d82f7df10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3b815cb1bb29252693a3ac4cee54b8d82f7df10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3b815cb1bb29252693a3ac4cee54b8d82f7df10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3b815cb1bb29252693a3ac4cee54b8d82f7df10/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9076b9c1ac147fc876dc34f0077065e374fdaa09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9076b9c1ac147fc876dc34f0077065e374fdaa09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9076b9c1ac147fc876dc34f0077065e374fdaa09"}], "stats": {"total": 128, "additions": 76, "deletions": 52}, "files": [{"sha": "c823362ca72efd6d8f36c45eb93d4f4b3f2a4851", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3b815cb1bb29252693a3ac4cee54b8d82f7df10/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3b815cb1bb29252693a3ac4cee54b8d82f7df10/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a3b815cb1bb29252693a3ac4cee54b8d82f7df10", "patch": "@@ -1,3 +1,16 @@\n+2000-09-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/alpha/alpha.h (TARGET_CPU_EV5, TARGET_CPU_EV6): Define.\n+\t(TARGET_OPTIONS): Add tune=.\n+\t(alpha_tune_string): Declare.\n+\t* config/alpha/alpha.c (override_options): Add cpu_table.\n+\tUse alpha_cpu_string first to set both alpha_cpu and target_flags\n+\tand then alpha_tune_string to set alpha_cpu only.\n+\tReplace tests for PROCESSOR_EV* with TARGET_CPU_EV* tests.\n+\t* config/alpha/elf.h (ASM_FILE_START): Likewise.\n+\t* config/alpha/osf.h (ASM_FILE_START): Likewise.\n+\t* config/alpha/openbsd.h (ASM_FILE_START): Likewise.\n+\n Fri Sep 15 19:45:55 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \n \t* i386-protos.h (no_comparison_operator, uno_comparison_operator):"}, {"sha": "04d8cc99c448a183c61fdc6cb89b6b874d2bd80f", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 50, "deletions": 44, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3b815cb1bb29252693a3ac4cee54b8d82f7df10/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3b815cb1bb29252693a3ac4cee54b8d82f7df10/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=a3b815cb1bb29252693a3ac4cee54b8d82f7df10", "patch": "@@ -70,6 +70,7 @@ enum alpha_fp_trap_mode alpha_fptm;\n /* Strings decoded into the above options.  */\n \n const char *alpha_cpu_string;\t/* -mcpu= */\n+const char *alpha_tune_string;\t/* -mtune= */\n const char *alpha_tp_string;\t/* -mtrap-precision=[p|s|i] */\n const char *alpha_fprm_string;\t/* -mfp-rounding-mode=[n|m|c|d] */\n const char *alpha_fptm_string;\t/* -mfp-trap-mode=[n|u|su|sui] */\n@@ -146,6 +147,31 @@ static rtx alpha_emit_xfloating_compare\n void\n override_options ()\n {\n+  int i;\n+  static struct cpu_table {\n+    const char *name;\n+    enum processor_type processor;\n+    int flags;\n+  } cpu_table[] = {\n+#define EV5_MASK (MASK_CPU_EV5)\n+#define EV6_MASK (MASK_CPU_EV6|MASK_BWX|MASK_MAX|MASK_FIX)\n+    { \"ev4\",\tPROCESSOR_EV4, 0 },\n+    { \"ev45\",\tPROCESSOR_EV4, 0 },\n+    { \"21064\",\tPROCESSOR_EV4, 0 },\n+    { \"ev5\",\tPROCESSOR_EV5, EV5_MASK },\n+    { \"21164\",\tPROCESSOR_EV5, EV5_MASK },\n+    { \"ev56\",\tPROCESSOR_EV5, EV5_MASK|MASK_BWX },\n+    { \"21164a\",\tPROCESSOR_EV5, EV5_MASK|MASK_BWX },\n+    { \"pca56\",\tPROCESSOR_EV5, EV5_MASK|MASK_BWX|MASK_MAX },\n+    { \"21164PC\",PROCESSOR_EV5, EV5_MASK|MASK_BWX|MASK_MAX },\n+    { \"21164pc\",PROCESSOR_EV5, EV5_MASK|MASK_BWX|MASK_MAX },\n+    { \"ev6\",\tPROCESSOR_EV6, EV6_MASK },\n+    { \"21264\",\tPROCESSOR_EV6, EV6_MASK },\n+    { \"ev67\",\tPROCESSOR_EV6, EV6_MASK|MASK_CIX },\n+    { \"21264a\",\tPROCESSOR_EV6, EV6_MASK|MASK_CIX },\n+    { 0, 0, 0 }\n+  };\n+                  \n   alpha_tp = ALPHA_TP_PROG;\n   alpha_fprm = ALPHA_FPRM_NORM;\n   alpha_fptm = ALPHA_FPTM_N;\n@@ -209,61 +235,41 @@ override_options ()\n \n   if (alpha_cpu_string)\n     {\n-      if (! strcmp (alpha_cpu_string, \"ev4\")\n-\t  || ! strcmp (alpha_cpu_string, \"ev45\")\n-\t  || ! strcmp (alpha_cpu_string, \"21064\"))\n-\t{\n-\t  alpha_cpu = PROCESSOR_EV4;\n-\t  target_flags &= ~ (MASK_BWX | MASK_MAX | MASK_FIX | MASK_CIX);\n-\t}\n-      else if (! strcmp (alpha_cpu_string, \"ev5\")\n-\t       || ! strcmp (alpha_cpu_string, \"21164\"))\n-\t{\n-\t  alpha_cpu = PROCESSOR_EV5;\n-\t  target_flags &= ~ (MASK_BWX | MASK_MAX | MASK_FIX | MASK_CIX);\n-\t}\n-      else if (! strcmp (alpha_cpu_string, \"ev56\")\n-\t       || ! strcmp (alpha_cpu_string, \"21164a\"))\n-\t{\n-\t  alpha_cpu = PROCESSOR_EV5;\n-\t  target_flags |= MASK_BWX;\n-\t  target_flags &= ~ (MASK_MAX | MASK_FIX | MASK_CIX);\n-\t}\n-      else if (! strcmp (alpha_cpu_string, \"pca56\")\n-\t       || ! strcmp (alpha_cpu_string, \"21164PC\")\n-\t       || ! strcmp (alpha_cpu_string, \"21164pc\"))\n-\t{\n-\t  alpha_cpu = PROCESSOR_EV5;\n-\t  target_flags |= MASK_BWX | MASK_MAX;\n-\t  target_flags &= ~ (MASK_FIX | MASK_CIX);\n-\t}\n-      else if (! strcmp (alpha_cpu_string, \"ev6\")\n-\t       || ! strcmp (alpha_cpu_string, \"21264\"))\n-\t{\n-\t  alpha_cpu = PROCESSOR_EV6;\n-\t  target_flags |= MASK_BWX | MASK_MAX | MASK_FIX;\n-\t  target_flags &= ~ (MASK_CIX);\n-\t}\n-      else if (! strcmp (alpha_cpu_string, \"ev67\")\n-\t       || ! strcmp (alpha_cpu_string, \"21264a\"))\n-\t{\n-\t  alpha_cpu = PROCESSOR_EV6;\n-\t  target_flags |= MASK_BWX | MASK_MAX | MASK_FIX | MASK_CIX;\n-\t}\n-      else\n+      for (i = 0; cpu_table [i].name; i++)\n+\tif (! strcmp (alpha_cpu_string, cpu_table [i].name))\n+\t  {\n+\t    alpha_cpu = cpu_table [i].processor;\n+\t    target_flags &= ~ (MASK_BWX | MASK_MAX | MASK_FIX | MASK_CIX\n+\t\t\t       | MASK_CPU_EV5 | MASK_CPU_EV6);\n+\t    target_flags |= cpu_table [i].flags;\n+\t    break;\n+\t  }\n+      if (! cpu_table [i].name)\n \terror (\"bad value `%s' for -mcpu switch\", alpha_cpu_string);\n     }\n \n+  if (alpha_tune_string)\n+    {\n+      for (i = 0; cpu_table [i].name; i++)\n+\tif (! strcmp (alpha_tune_string, cpu_table [i].name))\n+\t  {\n+\t    alpha_cpu = cpu_table [i].processor;\n+\t    break;\n+\t  }\n+      if (! cpu_table [i].name)\n+\terror (\"bad value `%s' for -mcpu switch\", alpha_tune_string);\n+    }\n+\n   /* Do some sanity checks on the above options. */\n \n   if ((alpha_fptm == ALPHA_FPTM_SU || alpha_fptm == ALPHA_FPTM_SUI)\n-      && alpha_tp != ALPHA_TP_INSN && alpha_cpu != PROCESSOR_EV6)\n+      && alpha_tp != ALPHA_TP_INSN && ! TARGET_CPU_EV6)\n     {\n       warning (\"fp software completion requires -mtrap-precision=i\");\n       alpha_tp = ALPHA_TP_INSN;\n     }\n \n-  if (alpha_cpu == PROCESSOR_EV6)\n+  if (TARGET_CPU_EV6)\n     {\n       /* Except for EV6 pass 1 (not released), we always have precise\n \t arithmetic traps.  Which means we can do software completion"}, {"sha": "db8d4076ce9be23065720fe3f15d8b5996c9be9a", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3b815cb1bb29252693a3ac4cee54b8d82f7df10/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3b815cb1bb29252693a3ac4cee54b8d82f7df10/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=a3b815cb1bb29252693a3ac4cee54b8d82f7df10", "patch": "@@ -156,12 +156,14 @@ extern enum alpha_fp_trap_mode alpha_fptm;\n #define MASK_CIX\t(1 << 11)\n #define TARGET_CIX\t(target_flags & MASK_CIX)\n \n-/* This means that the processor is an EV5, EV56, or PCA56.  This is defined\n-   only in TARGET_CPU_DEFAULT.  */\n+/* This means that the processor is an EV5, EV56, or PCA56.\n+   Unlike alpha_cpu this is not affected by -mtune= setting.  */\n #define MASK_CPU_EV5\t(1 << 28)\n+#define TARGET_CPU_EV5\t(target_flags & MASK_CPU_EV5)\n \n /* Likewise for EV6.  */\n #define MASK_CPU_EV6\t(1 << 29)\n+#define TARGET_CPU_EV6\t(target_flags & MASK_CPU_EV6)\n \n /* This means we support the .arch directive in the assembler.  Only\n    defined in TARGET_CPU_DEFAULT.  */\n@@ -249,6 +251,7 @@ extern enum alpha_fp_trap_mode alpha_fptm;\n \t#define TARGET_OPTIONS { { \"short-data-\", &m88k_short_data } }  */\n \n extern const char *alpha_cpu_string;\t/* For -mcpu= */\n+extern const char *alpha_tune_string;\t/* For -mtune= */\n extern const char *alpha_fprm_string;\t/* For -mfp-rounding-mode=[n|m|c|d] */\n extern const char *alpha_fptm_string;\t/* For -mfp-trap-mode=[n|u|su|sui]  */\n extern const char *alpha_tp_string;\t/* For -mtrap-precision=[p|f|i] */\n@@ -257,7 +260,9 @@ extern const char *alpha_mlat_string;\t/* For -mmemory-latency= */\n #define TARGET_OPTIONS\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\\\n   {\"cpu=\",\t\t&alpha_cpu_string,\t\t\\\n-   N_(\"Generate code for a given CPU\")},\t\t\\\n+   N_(\"Use features of and schedule given CPU\")},\t\\\n+  {\"tune=\",\t\t&alpha_tune_string,\t\t\\\n+   N_(\"Schedule given CPU\")},\t\t\t\t\\\n   {\"fp-rounding-mode=\",\t&alpha_fprm_string,\t\t\\\n    N_(\"Control the generated fp rounding mode\")},\t\\\n   {\"fp-trap-mode=\",\t&alpha_fptm_string,\t\t\\"}, {"sha": "e4b633adad7cdb9e86e65da93eeacb084008ff58", "filename": "gcc/config/alpha/elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3b815cb1bb29252693a3ac4cee54b8d82f7df10/gcc%2Fconfig%2Falpha%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3b815cb1bb29252693a3ac4cee54b8d82f7df10/gcc%2Fconfig%2Falpha%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Felf.h?ref=a3b815cb1bb29252693a3ac4cee54b8d82f7df10", "patch": "@@ -61,7 +61,7 @@ do {\t\t\t\t\t\t\t\t\\\n   if (TARGET_BWX | TARGET_MAX | TARGET_FIX | TARGET_CIX)\t\\\n     {\t\t\t\t\t\t\t\t\\\n       fprintf (FILE, \"\\t.arch %s\\n\",\t\t\t\t\\\n-               (alpha_cpu == PROCESSOR_EV6 ? \"ev6\"\t\t\\\n+               (TARGET_CPU_EV6 ? \"ev6\"\t\t\t\t\\\n                 : TARGET_MAX ? \"pca56\" : \"ev56\"));\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n } while (0)"}, {"sha": "72764ff343cb343c4d6ff2ee6e27c262962312c8", "filename": "gcc/config/alpha/openbsd.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3b815cb1bb29252693a3ac4cee54b8d82f7df10/gcc%2Fconfig%2Falpha%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3b815cb1bb29252693a3ac4cee54b8d82f7df10/gcc%2Fconfig%2Falpha%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fopenbsd.h?ref=a3b815cb1bb29252693a3ac4cee54b8d82f7df10", "patch": "@@ -100,8 +100,8 @@ Boston, MA 02111-1307, USA.  */\n   fprintf (FILE, \"\\t.set noat\\n\");\t\t\t\t\\\n   if (TARGET_SUPPORT_ARCH)\t\t\t\t\t\\\n     fprintf (FILE, \"\\t.arch %s\\n\",\t\t\t\t\\\n-             alpha_cpu == PROCESSOR_EV6 ? \"ev6\"\t\t\t\\\n-\t     : (alpha_cpu == PROCESSOR_EV5\t\t\t\\\n+             TARGET_CPU_EV6 ? \"ev6\"\t\t\t\t\\\n+\t     : (TARGET_CPU_EV5\t\t\t\t\t\\\n \t\t? (TARGET_MAX ? \"pca56\" : TARGET_BWX ? \"ev56\" : \"ev5\") \\\n \t\t: \"ev4\"));\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\\"}, {"sha": "100b15314de7ed376dc7f12a6daa10be9f7f3441", "filename": "gcc/config/alpha/osf.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3b815cb1bb29252693a3ac4cee54b8d82f7df10/gcc%2Fconfig%2Falpha%2Fosf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3b815cb1bb29252693a3ac4cee54b8d82f7df10/gcc%2Fconfig%2Falpha%2Fosf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fosf.h?ref=a3b815cb1bb29252693a3ac4cee54b8d82f7df10", "patch": "@@ -70,8 +70,8 @@ Boston, MA 02111-1307, USA.  */\n   fprintf (FILE, \"\\t.set noat\\n\");\t\t\t\t\\\n   if (TARGET_SUPPORT_ARCH)\t\t\t\t\t\\\n     fprintf (FILE, \"\\t.arch %s\\n\",\t\t\t\t\\\n-             alpha_cpu == PROCESSOR_EV6 ? \"ev6\"\t\t\t\\\n-\t     : (alpha_cpu == PROCESSOR_EV5\t\t\t\\\n+             TARGET_CPU_EV6 ? \"ev6\"\t\t\t\t\\\n+\t     : (TARGET_CPU_EV5\t\t\t\t\t\\\n \t\t? (TARGET_MAX ? \"pca56\" : TARGET_BWX ? \"ev56\" : \"ev5\") \\\n \t\t: \"ev4\"));\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\\"}]}