{"sha": "c9c466ea33dd2110fd9b73b05c30dacabff8f85a", "node_id": "C_kwDOANBUbNoAKGM5YzQ2NmVhMzNkZDIxMTBmZDliNzNiMDVjMzBkYWNhYmZmOGY4NWE", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-12-20T15:22:18Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-12-20T15:22:18Z"}, "message": "x86_64: Improve code expanded for highpart multiplications.\n\nWhile working on a middle-end patch to more aggressively use highpart\nmultiplications on targets that support them, I noticed that the RTL\nexpanded by the x86 backend interacts poorly with register allocation\nleading to suboptimal code.\n\nFor the testcase,\ntypedef int __attribute ((mode(TI))) ti_t;\nlong foo(long x)\n{\n  return ((ti_t)x * 19065) >> 64;\n}\n\nwe'd like to avoid:\nfoo:\tmovq    %rdi, %rax\n        movl    $19065, %edx\n        imulq   %rdx\n        movq    %rdx, %rax\n        ret\n\nand would prefer:\nfoo:\tmovl    $19065, %eax\n        imulq   %rdi\n        movq    %rdx, %rax\n        ret\n\nThis patch provides a pair of peephole2 transformations to tweak the\nspills generated by reload, and at the same time replaces the current\ndefine_expand with a define_insn pattern using the new [su]mul_highpart\nRTX codes.\n\n2021-12-20  Roger Sayle  <roger@nextmovesoftware.com>\n\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog\n\t* config/i386/i386.md (any_mul_highpart): New code iterator.\n\t(sgnprefix, s): Add attribute support for [su]mul_highpart.\n\t(<s>mul<mode>3_highpart): Delete expander.\n\t(<s>mul<mode>3_highpart, <s>mulsi32_highpart_zext):\n\tNew define_insn patterns.\n\t(define_peephole2): Tweak the register allocation for the above\n\tinstructions after reload.\n\ngcc/testsuite/ChangeLog\n\t* gcc.target/i386/smuldi3_highpart.c: New test case.", "tree": {"sha": "3487fe3df421d708288efd72756abc3bafba2f58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3487fe3df421d708288efd72756abc3bafba2f58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9c466ea33dd2110fd9b73b05c30dacabff8f85a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9c466ea33dd2110fd9b73b05c30dacabff8f85a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9c466ea33dd2110fd9b73b05c30dacabff8f85a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9c466ea33dd2110fd9b73b05c30dacabff8f85a/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f56dbe2daaa5931356d0018c2c2c17bb4691d0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f56dbe2daaa5931356d0018c2c2c17bb4691d0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f56dbe2daaa5931356d0018c2c2c17bb4691d0e"}], "stats": {"total": 123, "additions": 103, "deletions": 20}, "files": [{"sha": "58b10643fcb73f8ae4fb29a1d5817ee34f973535", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 92, "deletions": 20, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9c466ea33dd2110fd9b73b05c30dacabff8f85a/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9c466ea33dd2110fd9b73b05c30dacabff8f85a/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=c9c466ea33dd2110fd9b73b05c30dacabff8f85a", "patch": "@@ -992,11 +992,16 @@\n ;; Mapping of extend operators\n (define_code_iterator any_extend [sign_extend zero_extend])\n \n+;; Mapping of highpart multiply operators\n+(define_code_iterator any_mul_highpart [smul_highpart umul_highpart])\n+\n ;; Prefix for insn menmonic.\n (define_code_attr sgnprefix [(sign_extend \"i\") (zero_extend \"\")\n+\t\t\t     (smul_highpart \"i\") (umul_highpart \"\")\n \t\t\t     (div \"i\") (udiv \"\")])\n ;; Prefix for define_insn\n-(define_code_attr s [(sign_extend \"s\") (zero_extend \"u\")])\n+(define_code_attr s [(sign_extend \"s\") (zero_extend \"u\")\n+\t\t     (smul_highpart \"s\") (umul_highpart \"u\")])\n (define_code_attr u [(sign_extend \"\") (zero_extend \"u\")\n \t\t     (div \"\") (udiv \"u\")])\n (define_code_attr u_bool [(sign_extend \"false\") (zero_extend \"true\")\n@@ -8433,20 +8438,45 @@\n    (set_attr \"bdver1_decode\" \"direct\")\n    (set_attr \"mode\" \"QI\")])\n \n-(define_expand \"<s>mul<mode>3_highpart\"\n-  [(parallel [(set (match_operand:DWIH 0 \"register_operand\")\n-\t\t   (truncate:DWIH\n-\t\t     (lshiftrt:<DWI>\n-\t\t       (mult:<DWI>\n-\t\t\t (any_extend:<DWI>\n-\t\t\t   (match_operand:DWIH 1 \"nonimmediate_operand\"))\n-\t\t\t (any_extend:<DWI>\n-\t\t\t   (match_operand:DWIH 2 \"register_operand\")))\n-\t\t       (match_dup 3))))\n-\t      (clobber (scratch:DWIH))\n-\t      (clobber (reg:CC FLAGS_REG))])]\n+;; Highpart multiplication patterns\n+(define_insn \"<s>mul<mode>3_highpart\"\n+  [(set (match_operand:DWIH 0 \"register_operand\" \"=d\")\n+\t(any_mul_highpart:DWIH\n+\t  (match_operand:DWIH 1 \"register_operand\" \"%a\")\n+\t  (match_operand:DWIH 2 \"nonimmediate_operand\" \"rm\")))\n+   (clobber (match_scratch:DWIH 3 \"=1\"))\n+   (clobber (reg:CC FLAGS_REG))]\n   \"\"\n-  \"operands[3] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode));\")\n+  \"<sgnprefix>mul{<imodesuffix>}\\t%2\"\n+  [(set_attr \"type\" \"imul\")\n+   (set_attr \"length_immediate\" \"0\")\n+   (set (attr \"athlon_decode\")\n+     (if_then_else (eq_attr \"cpu\" \"athlon\")\n+\t(const_string \"vector\")\n+\t(const_string \"double\")))\n+   (set_attr \"amdfam10_decode\" \"double\")\n+   (set_attr \"bdver1_decode\" \"direct\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*<s>mulsi3_highpart_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+\t(zero_extend:DI \n+\t  (any_mul_highpart:SI\n+\t    (match_operand:SI 1 \"register_operand\" \"%a\")\n+\t    (match_operand:SI 2 \"nonimmediate_operand\" \"rm\"))))\n+   (clobber (match_scratch:SI 3 \"=1\"))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_64BIT\"\n+  \"<sgnprefix>mul{l}\\t%2\"\n+  [(set_attr \"type\" \"imul\")\n+   (set_attr \"length_immediate\" \"0\")\n+   (set (attr \"athlon_decode\")\n+     (if_then_else (eq_attr \"cpu\" \"athlon\")\n+\t(const_string \"vector\")\n+\t(const_string \"double\")))\n+   (set_attr \"amdfam10_decode\" \"double\")\n+   (set_attr \"bdver1_decode\" \"direct\")\n+   (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*<s>muldi3_highpart_1\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n@@ -8467,8 +8497,8 @@\n    (set_attr \"length_immediate\" \"0\")\n    (set (attr \"athlon_decode\")\n      (if_then_else (eq_attr \"cpu\" \"athlon\")\n-        (const_string \"vector\")\n-        (const_string \"double\")))\n+\t(const_string \"vector\")\n+\t(const_string \"double\")))\n    (set_attr \"amdfam10_decode\" \"double\")\n    (set_attr \"bdver1_decode\" \"direct\")\n    (set_attr \"mode\" \"DI\")])\n@@ -8491,8 +8521,8 @@\n    (set_attr \"length_immediate\" \"0\")\n    (set (attr \"athlon_decode\")\n      (if_then_else (eq_attr \"cpu\" \"athlon\")\n-        (const_string \"vector\")\n-        (const_string \"double\")))\n+\t(const_string \"vector\")\n+\t(const_string \"double\")))\n    (set_attr \"amdfam10_decode\" \"double\")\n    (set_attr \"bdver1_decode\" \"direct\")\n    (set_attr \"mode\" \"SI\")])\n@@ -8515,12 +8545,54 @@\n    (set_attr \"length_immediate\" \"0\")\n    (set (attr \"athlon_decode\")\n      (if_then_else (eq_attr \"cpu\" \"athlon\")\n-        (const_string \"vector\")\n-        (const_string \"double\")))\n+\t(const_string \"vector\")\n+\t(const_string \"double\")))\n    (set_attr \"amdfam10_decode\" \"double\")\n    (set_attr \"bdver1_decode\" \"direct\")\n    (set_attr \"mode\" \"SI\")])\n \n+;; Highpart multiplication peephole2s to tweak register allocation.\n+;; mov %rdx,imm; mov %rax,%rdi; imulq %rdx  ->  mov %rax,imm; imulq %rdi\n+(define_peephole2\n+  [(set (match_operand:SWI48 0 \"general_reg_operand\")\n+\t(match_operand:SWI48 1 \"immediate_operand\"))\n+   (set (match_operand:SWI48 2 \"general_reg_operand\")\n+\t(match_operand:SWI48 3 \"general_reg_operand\"))\n+   (parallel [(set (match_operand:SWI48 4 \"general_reg_operand\")\n+\t\t   (any_mul_highpart:SWI48 (match_dup 2) (match_dup 0)))\n+\t      (clobber (match_dup 2))\n+\t      (clobber (reg:CC FLAGS_REG))])]\n+  \"REGNO (operands[0]) != REGNO (operands[2])\n+   && REGNO (operands[0]) != REGNO (operands[3])\n+   && (REGNO (operands[0]) == REGNO (operands[4])\n+       || peep2_reg_dead_p (3, operands[0]))\"\n+  [(set (match_dup 2) (match_dup 1))\n+   (parallel [(set (match_dup 4)\n+\t\t   (any_mul_highpart:SWI48 (match_dup 2) (match_dup 3)))\n+\t      (clobber (match_dup 2))\n+\t      (clobber (reg:CC FLAGS_REG))])])\n+\n+(define_peephole2\n+  [(set (match_operand:SI 0 \"general_reg_operand\")\n+\t(match_operand:SI 1 \"immediate_operand\"))\n+   (set (match_operand:SI 2 \"general_reg_operand\")\n+\t(match_operand:SI 3 \"general_reg_operand\"))\n+   (parallel [(set (match_operand:DI 4 \"general_reg_operand\")\n+\t\t   (zero_extend:DI\n+\t\t     (any_mul_highpart:SI (match_dup 2) (match_dup 0))))\n+\t      (clobber (match_dup 2))\n+\t      (clobber (reg:CC FLAGS_REG))])]\n+  \"REGNO (operands[0]) != REGNO (operands[2])\n+   && REGNO (operands[0]) != REGNO (operands[3])\n+   && (REGNO (operands[0]) == REGNO (operands[4])\n+       || peep2_reg_dead_p (3, operands[0]))\"\n+  [(set (match_dup 2) (match_dup 1))\n+   (parallel [(set (match_dup 4)\n+\t\t   (zero_extend:DI\n+\t\t     (any_mul_highpart:SI (match_dup 2) (match_dup 3))))\n+\t      (clobber (match_dup 2))\n+\t      (clobber (reg:CC FLAGS_REG))])])\n+\n ;; The patterns that match these are at the end of this file.\n \n (define_expand \"mulxf3\""}, {"sha": "8bbd5f5cb8de9e2d532f2e7095f1667192f7cc53", "filename": "gcc/testsuite/gcc.target/i386/smuldi3_highpart.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9c466ea33dd2110fd9b73b05c30dacabff8f85a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsmuldi3_highpart.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9c466ea33dd2110fd9b73b05c30dacabff8f85a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsmuldi3_highpart.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsmuldi3_highpart.c?ref=c9c466ea33dd2110fd9b73b05c30dacabff8f85a", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2\" } */\n+typedef int __attribute ((mode(TI))) ti_t;\n+\n+long foo(long x)\n+{\n+  return ((ti_t)x * 19065) >> 72;\n+}\n+\n+/* { dg-final { scan-assembler \"movl\\[ \\\\t]+\\\\\\$19065, %eax\" } } */\n+/* { dg-final { scan-assembler-times \"movq\" 1 } } */"}]}