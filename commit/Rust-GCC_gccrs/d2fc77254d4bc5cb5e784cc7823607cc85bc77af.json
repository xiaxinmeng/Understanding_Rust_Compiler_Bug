{"sha": "d2fc77254d4bc5cb5e784cc7823607cc85bc77af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJmYzc3MjU0ZDRiYzVjYjVlNzg0Y2M3ODIzNjA3Y2M4NWJjNzdhZg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2003-03-25T10:18:47Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2003-03-25T10:18:47Z"}, "message": "re PR rtl-optimization/8746 (gcc miscompiles Linux kernel ppa driver on x86)\n\n\tPR optimization/8746\n\t* config/i386/i386.md (and promoting splitters): Disable HImode to\n\tSImode promoting when the sign bit matters and is not preserved, or\n\twhen TARGET_FAST_PREFIX is true. Disable promoting when optimizing\n\tfor size.\n\nFrom-SVN: r64840", "tree": {"sha": "97171a6cb94b5038efefa41b68e3e68b36a5edf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97171a6cb94b5038efefa41b68e3e68b36a5edf5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2fc77254d4bc5cb5e784cc7823607cc85bc77af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2fc77254d4bc5cb5e784cc7823607cc85bc77af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2fc77254d4bc5cb5e784cc7823607cc85bc77af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2fc77254d4bc5cb5e784cc7823607cc85bc77af/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9904e2320fd33d0d02d2582a6cb78cbb9f01bff4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9904e2320fd33d0d02d2582a6cb78cbb9f01bff4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9904e2320fd33d0d02d2582a6cb78cbb9f01bff4"}], "stats": {"total": 130, "additions": 119, "deletions": 11}, "files": [{"sha": "2d71171198445d5dc7f3ceba7da04490fd5ffab1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2fc77254d4bc5cb5e784cc7823607cc85bc77af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2fc77254d4bc5cb5e784cc7823607cc85bc77af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d2fc77254d4bc5cb5e784cc7823607cc85bc77af", "patch": "@@ -1,3 +1,11 @@\n+2003-03-25  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR optimization/8746\n+\t* config/i386/i386.md (and promoting splitters): Disable HImode to\n+\tSImode promoting when the sign bit matters and is not preserved, or\n+\twhen TARGET_FAST_PREFIX is true. Disable promoting when optimizing\n+\tfor size.\n+\n 2003-03-24  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/h8300.md (a peephole2): Extend to support loads"}, {"sha": "78663dc37b20979645deae4c013124e932122c3b", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2fc77254d4bc5cb5e784cc7823607cc85bc77af/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2fc77254d4bc5cb5e784cc7823607cc85bc77af/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=d2fc77254d4bc5cb5e784cc7823607cc85bc77af", "patch": "@@ -17628,6 +17628,10 @@\n      operands[2] = gen_lowpart (SImode, operands[2]);\n    PUT_MODE (operands[3], SImode);\")\n \n+; Promote the QImode tests, as i386 has encoding of the AND\n+; instruction with 32-bit sign-extended immediate and thus the\n+; instruction size is unchanged, except in the %eax case for\n+; which it is increased by one byte, hence the ! optimize_size.\n (define_split\n   [(set (reg 17)\n \t(compare (and (match_operand 1 \"aligned_operand\" \"\")\n@@ -17636,12 +17640,11 @@\n    (set (match_operand 0 \"register_operand\" \"\")\n \t(and (match_dup 1) (match_dup 2)))]\n   \"! TARGET_PARTIAL_REG_STALL && reload_completed\n-   && ix86_match_ccmode (insn, CCNOmode)\n-   && (GET_MODE (operands[0]) == HImode\n-       || (GET_MODE (operands[0]) == QImode \n-\t   /* Ensure that the operand will remain sign extended immediate.  */\n-\t   && INTVAL (operands[2]) >= 0\n-\t   && (TARGET_PROMOTE_QImode || optimize_size)))\"\n+   /* Ensure that the operand will remain sign-extended immediate.  */\n+   && ix86_match_ccmode (insn, INTVAL (operands[2]) >= 0 ? CCNOmode : CCZmode)\n+   && ! optimize_size\n+   && ((GET_MODE (operands[0]) == HImode && ! TARGET_FAST_PREFIX)\n+       || (GET_MODE (operands[0]) == QImode && TARGET_PROMOTE_QImode))\"\n   [(parallel [(set (reg:CCNO 17)\n \t\t   (compare:CCNO (and:SI (match_dup 1) (match_dup 2))\n \t\t\t         (const_int 0)))\n@@ -17654,17 +17657,20 @@\n    operands[0] = gen_lowpart (SImode, operands[0]);\n    operands[1] = gen_lowpart (SImode, operands[1]);\")\n \n-; Don't promote the QImode tests, as i386 don't have encoding of\n-; the test instruction with 32bit sign extended immediate and thus\n-; the code grows.\n+; Don't promote the QImode tests, as i386 doesn't have encoding of\n+; the TEST instruction with 32-bit sign-extended immediate and thus\n+; the instruction size would at least double, which is not what we\n+; want even with ! optimize_size.\n (define_split\n   [(set (reg 17)\n \t(compare (and (match_operand:HI 0 \"aligned_operand\" \"\")\n \t\t      (match_operand:HI 1 \"const_int_operand\" \"\"))\n \t\t (const_int 0)))]\n   \"! TARGET_PARTIAL_REG_STALL && reload_completed\n-   && ix86_match_ccmode (insn, CCNOmode)\n-   && GET_MODE (operands[0]) == HImode\"\n+   /* Ensure that the operand will remain sign-extended immediate.  */\n+   && ix86_match_ccmode (insn, INTVAL (operands[1]) >= 0 ? CCNOmode : CCZmode)\n+   && ! TARGET_FAST_PREFIX\n+   && ! optimize_size\"\n   [(set (reg:CCNO 17)\n \t(compare:CCNO (and:SI (match_dup 0) (match_dup 1))\n \t\t      (const_int 0)))]"}, {"sha": "cf70618d46f86e2f4aa227dee9859b3f61b51ab9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2fc77254d4bc5cb5e784cc7823607cc85bc77af/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2fc77254d4bc5cb5e784cc7823607cc85bc77af/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d2fc77254d4bc5cb5e784cc7823607cc85bc77af", "patch": "@@ -1,3 +1,9 @@\n+2003-03-25  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* gcc.dg/i386-signbit-1.c: New test.\n+\t* gcc.dg/i386-signbit-2.c: New test.\n+\t* gcc.dg/i386-signbit-3.c: New test.\n+\n 2003-03-25  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* gcc.dg/ultrasp5.c: Fix options."}, {"sha": "8b8866e92aa228ff1154ebe3fca01e24668cbf32", "filename": "gcc/testsuite/gcc.dg/i386-signbit-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2fc77254d4bc5cb5e784cc7823607cc85bc77af/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-signbit-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2fc77254d4bc5cb5e784cc7823607cc85bc77af/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-signbit-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-signbit-1.c?ref=d2fc77254d4bc5cb5e784cc7823607cc85bc77af", "patch": "@@ -0,0 +1,28 @@\n+/* PR optimization/8746 */\n+/* { dg-do run { target i?86-*-* } } */\n+/* { dg-options \"-O1 -mtune=i586\" } */\n+\n+extern void abort (void);\n+\n+unsigned char r0;\n+\n+int foo(int x)\n+{\n+  unsigned char r = x&0xf0;\n+\n+  if (!(r&0x80))\n+  {\n+    r0 = r;\n+    return 0;\n+  }\n+  else\n+    return 1;\n+}\n+\n+int main(void)\n+{\n+  if (foo(0x80) != 1)\n+    abort();\n+\n+   return 0;\n+}"}, {"sha": "5687d857a0776abacc0b13a9fb0aa4d6ff2ded19", "filename": "gcc/testsuite/gcc.dg/i386-signbit-2.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2fc77254d4bc5cb5e784cc7823607cc85bc77af/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-signbit-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2fc77254d4bc5cb5e784cc7823607cc85bc77af/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-signbit-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-signbit-2.c?ref=d2fc77254d4bc5cb5e784cc7823607cc85bc77af", "patch": "@@ -0,0 +1,28 @@\n+/* PR optimization/8746 */\n+/* { dg-do run { target i?86-*-* } } */\n+/* { dg-options \"-O1 -mtune=i586\" } */\n+\n+extern void abort (void);\n+\n+unsigned short r0;\n+\n+int foo(int x)\n+{\n+  unsigned short r = x&0xf000;\n+\n+  if (!(r&0x8000))\n+  {\n+    r0 = r;\n+    return 0;\n+  }\n+  else\n+    return 1;\n+}\n+\n+int main(void)\n+{\n+  if (foo(0x8000) != 1)\n+    abort();\n+\n+   return 0;\n+}"}, {"sha": "ae97f215603210ad5460ffdeb959f31d15847893", "filename": "gcc/testsuite/gcc.dg/i386-signbit-3.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2fc77254d4bc5cb5e784cc7823607cc85bc77af/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-signbit-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2fc77254d4bc5cb5e784cc7823607cc85bc77af/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-signbit-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-signbit-3.c?ref=d2fc77254d4bc5cb5e784cc7823607cc85bc77af", "patch": "@@ -0,0 +1,32 @@\n+/* PR optimization/8746 */\n+/* { dg-do run { target i?86-*-* } } */\n+/* { dg-options \"-O1 -mtune=i586\" } */\n+\n+extern void abort (void);\n+\n+volatile int j;\n+\n+void f0() { j=0; }\n+void f1() { j=1; }\n+\n+int foo(int x)\n+{\n+  if ((short int)(x&0x8000) > (short int)0)\n+  {\n+    f0();\n+    return 0;\n+  }\n+  else\n+  {\n+    f1();\n+    return 1;\n+  }\n+}\n+\n+int main(void)\n+{\n+  if (foo(0x8000) != 1)\n+    abort();\n+\n+   return 0;\n+}"}]}