{"sha": "b53ef39560d2eed35fbeef8295687cac2eefabee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUzZWYzOTU2MGQyZWVkMzVmYmVlZjgyOTU2ODdjYWMyZWVmYWJlZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2005-03-24T14:09:06Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2005-03-24T14:09:06Z"}, "message": "configure.ac (enable-checking): Add 'runtime' option.\n\n\t* configure.ac (enable-checking): Add 'runtime' option.\n\t* doc/install.texi (enable-checking): Document 'runtime' checking.\n\t* tsystem.h (gcc_assert, gcc_unreachable): Define.\n\t* config.in: Regenerated.\n\t* configure: Regenerated.\n\nFrom-SVN: r96990", "tree": {"sha": "28f4fcc6528302933788606c837a86d7af18eb57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28f4fcc6528302933788606c837a86d7af18eb57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b53ef39560d2eed35fbeef8295687cac2eefabee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b53ef39560d2eed35fbeef8295687cac2eefabee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b53ef39560d2eed35fbeef8295687cac2eefabee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b53ef39560d2eed35fbeef8295687cac2eefabee/comments", "author": null, "committer": null, "parents": [{"sha": "0a2198f5125444acabd8c7c0ef1afcd3842ae27c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a2198f5125444acabd8c7c0ef1afcd3842ae27c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a2198f5125444acabd8c7c0ef1afcd3842ae27c"}], "stats": {"total": 85, "additions": 62, "deletions": 23}, "files": [{"sha": "897acce1c6311f1d64e63ad634758cd06df88daa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b53ef39560d2eed35fbeef8295687cac2eefabee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b53ef39560d2eed35fbeef8295687cac2eefabee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b53ef39560d2eed35fbeef8295687cac2eefabee", "patch": "@@ -1,3 +1,11 @@\n+2005-03-24  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* configure.ac (enable-checking): Add 'runtime' option.\n+\t* doc/install.texi (enable-checking): Document 'runtime' checking.\n+\t* tsystem.h (gcc_assert, gcc_unreachable): Define.\n+\t* config.in: Regenerated.\n+\t* configure: Regenerated.\n+\n 2005-03-23  Uros Bizjak  <uros@kss-loka.si>\n \n \t* optabs.h (enum optab_index): Remove OTI_llrint."}, {"sha": "eb58153d8f8ca04b9c07b1a1b599d096097aa53d", "filename": "gcc/config.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b53ef39560d2eed35fbeef8295687cac2eefabee/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b53ef39560d2eed35fbeef8295687cac2eefabee/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=b53ef39560d2eed35fbeef8295687cac2eefabee", "patch": "@@ -54,6 +54,9 @@\n    that are supported for each access macro. This is relatively cheap. */\n #undef ENABLE_RTL_FLAG_CHECKING\n \n+/* Define if you want runtime assertions enabled. This is a cheap check. */\n+#undef ENABLE_RUNTIME_CHECKING\n+\n /* Define if you want all operations on trees (the basic data structure of the\n    front ends) to be checked for dynamic type safety at runtime. This is\n    moderately expensive. The tree browser debugging routines will also be"}, {"sha": "a8dd3da4cd60f60e5c4815f912660e9cd34c0b6c", "filename": "gcc/configure", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b53ef39560d2eed35fbeef8295687cac2eefabee/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b53ef39560d2eed35fbeef8295687cac2eefabee/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=b53ef39560d2eed35fbeef8295687cac2eefabee", "patch": "@@ -868,7 +868,7 @@ Optional Features:\n \t\t\t  enable expensive run-time checks.  With LIST,\n \t\t\t  enable only specific categories of checks.\n \t\t\t  Categories are: assert,fold,gc,gcac,misc,\n-\t\t\t  rtlflag,rtl,tree,valgrind,release,yes,all;\n+\t\t\t  rtlflag,rtl,runtime,tree,valgrind,release,yes,all;\n   --enable-mapped-location   location_t is fileline integer cookie\n   --enable-coverage=LEVEL\n \t\t\t  enable compiler's code coverage collection.\n@@ -6278,6 +6278,7 @@ ac_checking=\n ac_tree_checking=\n ac_rtl_checking=\n ac_rtlflag_checking=\n+ac_runtime_checking=1\n ac_gc_checking=\n ac_gc_always_collect=\n ac_fold_checking=\n@@ -6287,23 +6288,25 @@ do\n \tcase $check in\n \tyes)\t\tac_assert_checking=1 ; ac_checking=1 ;\n \t\t\tac_tree_checking=1 ; ac_gc_checking=1 ;\n-\t\t\tac_rtlflag_checking=1 ;;\n+\t\t\tac_rtlflag_checking=1 ; ac_runtime_checking=1 ;;\n \tno)\t\tac_assert_checking= ; ac_checking= ;\n \t\t\tac_tree_checking= ; ac_rtl_checking= ;\n \t\t\tac_rtlflag_checking= ; ac_gc_checking= ;\n \t\t\tac_gc_always_collect= ; ac_fold_checking= ;;\n \tall)\t\tac_assert_checking=1 ; ac_checking=1 ;\n \t\t\tac_tree_checking=1 ; ac_rtl_checking=1 ;\n-\t\t\tac_rtlflag_checking=1 ; ac_gc_checking=1 ;\n-\t\t\tac_gc_always_collect=1 ; ac_fold_checking=1 ;;\n-        release)\tac_assert_checking=1 ;;\n+\t\t\tac_rtlflag_checking=1 ; ac_runtime_checking=1;\n+\t\t\tac_gc_checking=1 ; ac_gc_always_collect=1 ;\n+\t\t\tac_fold_checking=1 ;;\n+        release)\tac_assert_checking=1 ; ac_runtime_checking=1 ;;\n \tassert) \tac_assert_checking=1 ;;\n \tfold)\t\tac_fold_checking=1 ;;\n \tgc)\t\tac_gc_checking=1 ;;\n \tgcac)\t\tac_gc_always_collect=1 ;;\n \tmisc)\t\tac_checking=1 ;;\n \trtlflag)\tac_rtlflag_checking=1 ;;\n \trtl)\t\tac_rtl_checking=1 ;;\n+\truntime)\tac_runtime_checking=1 ;;\n \ttree)\t\tac_tree_checking=1 ;;\n \tvalgrind)\tac_checking_valgrind=1 ;;\n \t*)\t{ { echo \"$as_me:$LINENO: error: unknown check category $check\" >&5\n@@ -6329,6 +6332,13 @@ cat >>confdefs.h <<\\_ACEOF\n #define ENABLE_ASSERT_CHECKING 1\n _ACEOF\n \n+fi\n+if test x$ac_runtime_checking != x ; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define ENABLE_RUNTIME_CHECKING 1\n+_ACEOF\n+\n fi\n if test x$ac_tree_checking != x ; then\n "}, {"sha": "1d6ced1868631e2ccfa3074e577c5c2b6642e820", "filename": "gcc/configure.ac", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b53ef39560d2eed35fbeef8295687cac2eefabee/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b53ef39560d2eed35fbeef8295687cac2eefabee/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=b53ef39560d2eed35fbeef8295687cac2eefabee", "patch": "@@ -394,7 +394,7 @@ AC_ARG_ENABLE(checking,\n \t\t\t  enable expensive run-time checks.  With LIST,\n \t\t\t  enable only specific categories of checks.\n \t\t\t  Categories are: assert,fold,gc,gcac,misc,\n-\t\t\t  rtlflag,rtl,tree,valgrind,release,yes,all;],\n+\t\t\t  rtlflag,rtl,runtime,tree,valgrind,release,yes,all;],\n [ac_checking_flags=\"${enableval}\"],[\n # Determine the default checks.\n if test x$is_release = x ; then\n@@ -407,6 +407,7 @@ ac_checking=\n ac_tree_checking=\n ac_rtl_checking=\n ac_rtlflag_checking=\n+ac_runtime_checking=1\n ac_gc_checking=\n ac_gc_always_collect=\n ac_fold_checking=\n@@ -416,23 +417,25 @@ do\n \tcase $check in\n \tyes)\t\tac_assert_checking=1 ; ac_checking=1 ;\n \t\t\tac_tree_checking=1 ; ac_gc_checking=1 ;\n-\t\t\tac_rtlflag_checking=1 ;;\n+\t\t\tac_rtlflag_checking=1 ; ac_runtime_checking=1 ;;\n \tno)\t\tac_assert_checking= ; ac_checking= ;\n \t\t\tac_tree_checking= ; ac_rtl_checking= ;\n \t\t\tac_rtlflag_checking= ; ac_gc_checking= ;\n \t\t\tac_gc_always_collect= ; ac_fold_checking= ;;\n \tall)\t\tac_assert_checking=1 ; ac_checking=1 ;\n \t\t\tac_tree_checking=1 ; ac_rtl_checking=1 ;\n-\t\t\tac_rtlflag_checking=1 ; ac_gc_checking=1 ;\n-\t\t\tac_gc_always_collect=1 ; ac_fold_checking=1 ;;\n-        release)\tac_assert_checking=1 ;;\n+\t\t\tac_rtlflag_checking=1 ; ac_runtime_checking=1;\n+\t\t\tac_gc_checking=1 ; ac_gc_always_collect=1 ;\n+\t\t\tac_fold_checking=1 ;;\n+        release)\tac_assert_checking=1 ; ac_runtime_checking=1 ;;\n \tassert) \tac_assert_checking=1 ;;\n \tfold)\t\tac_fold_checking=1 ;;\n \tgc)\t\tac_gc_checking=1 ;;\n \tgcac)\t\tac_gc_always_collect=1 ;;\n \tmisc)\t\tac_checking=1 ;;\n \trtlflag)\tac_rtlflag_checking=1 ;;\n \trtl)\t\tac_rtl_checking=1 ;;\n+\truntime)\tac_runtime_checking=1 ;;\n \ttree)\t\tac_tree_checking=1 ;;\n \tvalgrind)\tac_checking_valgrind=1 ;;\n \t*)\tAC_MSG_ERROR(unknown check category $check) ;;\n@@ -452,6 +455,10 @@ if test x$ac_assert_checking != x ; then\n   AC_DEFINE(ENABLE_ASSERT_CHECKING, 1,\n [Define if you want assertions enabled.  This is a cheap check.])\n fi\n+if test x$ac_runtime_checking != x ; then\n+  AC_DEFINE(ENABLE_RUNTIME_CHECKING, 1,\n+[Define if you want runtime assertions enabled.  This is a cheap check.])\n+fi\n if test x$ac_tree_checking != x ; then\n   AC_DEFINE(ENABLE_TREE_CHECKING, 1,\n [Define if you want all operations on trees (the basic data"}, {"sha": "471c5a0d36968ca7253fae56cf4dba17c100dc5e", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b53ef39560d2eed35fbeef8295687cac2eefabee/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b53ef39560d2eed35fbeef8295687cac2eefabee/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=b53ef39560d2eed35fbeef8295687cac2eefabee", "patch": "@@ -1114,20 +1114,21 @@ with GCC@.  This is on by default when building from CVS or snapshots,\n but off for releases.  More control over the checks may be had by\n specifying @var{list}; the categories of checks available are\n @samp{release}, @samp{assert}, @samp{misc}, @samp{tree}, @samp{gc},\n-@samp{rtl}, @samp{rtlflag}, @samp{fold}, @samp{gcac} and\n+@samp{rtl}, @samp{rtlflag}, @samp{runtime}, @samp{fold}, @samp{gcac} and\n @samp{valgrind}.  The @samp{release} category enables only those checks\n-suitable for release builds, currently this is just @samp{assert}.  The\n-check @samp{valgrind} requires the external @command{valgrind}\n-simulator, available from @uref{http://valgrind.kde.org/}.  The checks\n-@samp{rtl}, @samp{gcac} and @samp{valgrind} are very expensive.  The\n-default when @var{list} is not specified is\n-@samp{assert,misc,tree,gc,rtlflag}.  That is also the default for\n-development builds, when @samp{--enable-checking} is not specified.  For\n-release builds the default, when @samp{--enable-checking} is not given,\n-is @samp{release}.  To disable all checking, @samp{--disable-checking}\n-must be explicitly requested.  Disabling assertions will make the\n-compiler slightly faster but increase the risk of undetected internal\n-errors causing wrong code to be generated.\n+suitable for release builds, currently this is @samp{assert} and\n+@samp{runtime}.  The check @samp{valgrind} requires the external\n+@command{valgrind} simulator, available from\n+@uref{http://valgrind.kde.org/}.  The checks @samp{rtl}, @samp{gcac} and\n+@samp{valgrind} are very expensive.  The default when @var{list} is not\n+specified is @samp{assert,misc,tree,gc,rtlflag,runtime}.  That is also\n+the default for development builds, when @samp{--enable-checking} is not\n+specified.  For release builds the default, when\n+@samp{--enable-checking} is not given, is @samp{release}.  To disable\n+all checking, @samp{--disable-checking} must be explicitly requested.\n+Disabling assertions will make the compiler and runtime slightly faster\n+but increase the risk of undetected internal errors causing wrong code\n+to be generated.\n \n @item --enable-coverage\n @itemx --enable-coverage=@var{level}"}, {"sha": "5342178c414cbd26265ca8184421cf19cbc238c6", "filename": "gcc/tsystem.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b53ef39560d2eed35fbeef8295687cac2eefabee/gcc%2Ftsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b53ef39560d2eed35fbeef8295687cac2eefabee/gcc%2Ftsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftsystem.h?ref=b53ef39560d2eed35fbeef8295687cac2eefabee", "patch": "@@ -121,4 +121,14 @@ extern int errno;\n #undef alloca\n #define alloca(x) __builtin_alloca(x)\n \n+#ifdef ENABLE_RUNTIME_CHECKING\n+#define gcc_assert(EXPR) ((void)(!(EXPR) ? abort (), 0 : 0))\n+#else\n+/* Include EXPR, so that unused variable warnings do not occur.  */\n+#define gcc_assert(EXPR) ((void)(0 && (EXPR)))\n+#endif\n+/* Use gcc_unreachable() to mark unreachable locations (like an\n+   unreachable default case of a switch.  Do not use gcc_assert(0).  */\n+#define gcc_unreachable() (abort ())\n+\n #endif /* ! GCC_TSYSTEM_H */"}]}