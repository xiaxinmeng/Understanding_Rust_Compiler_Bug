{"sha": "4aa61e08ade43fa1e94dc0e951f11739bbd2ae40", "node_id": "C_kwDOANBUbNoAKDRhYTYxZTA4YWRlNDNmYTFlOTRkYzBlOTUxZjExNzM5YmJkMmFlNDA", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-01T09:48:07Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-04-29T09:10:24Z"}, "message": "Add gsi_after_labels overload for gimple_seq\n\nThe following adds gsi_after_labels for gimple_seq so I do not have\nto open-code it.  I took the liberty to remove the two #defines\nwrapping gsi_start_1 and gsi_last_1 as we now have C++ references.\n\n2022-02-01  Richard Biener  <rguenther@suse.de>\n\n\t* gimple-iterator.h (gsi_after_labels): Add overload for\n\tgimple_seq.\n\t(gsi_start_1): Rename to gsi_start and take a reference.\n\t(gsi_last_1): Likewise.\n\t* gimple-iterator.cc (gsi_for_stmt): Use gsi_start.\n\t* omp-low.cc (lower_rec_input_clauses): Likewise.\n\t(lower_omp_scan): Likewise.", "tree": {"sha": "7af4dfb2a82ccf0898b57415010286021d62d3c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7af4dfb2a82ccf0898b57415010286021d62d3c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4aa61e08ade43fa1e94dc0e951f11739bbd2ae40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aa61e08ade43fa1e94dc0e951f11739bbd2ae40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4aa61e08ade43fa1e94dc0e951f11739bbd2ae40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aa61e08ade43fa1e94dc0e951f11739bbd2ae40/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44b09adb9bad99dd7e3017c5ecefed7f7c9a1590", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44b09adb9bad99dd7e3017c5ecefed7f7c9a1590", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44b09adb9bad99dd7e3017c5ecefed7f7c9a1590"}], "stats": {"total": 45, "additions": 30, "deletions": 15}, "files": [{"sha": "670588157a047b61b1cdfc72680772086ab75ced", "filename": "gcc/gimple-iterator.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aa61e08ade43fa1e94dc0e951f11739bbd2ae40/gcc%2Fgimple-iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aa61e08ade43fa1e94dc0e951f11739bbd2ae40/gcc%2Fgimple-iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-iterator.cc?ref=4aa61e08ade43fa1e94dc0e951f11739bbd2ae40", "patch": "@@ -632,7 +632,7 @@ gsi_for_stmt (gimple *stmt)\n gimple_stmt_iterator\n gsi_for_stmt (gimple *stmt, gimple_seq *seq)\n {\n-  gimple_stmt_iterator i = gsi_start_1 (seq);\n+  gimple_stmt_iterator i = gsi_start (*seq);\n   i.ptr = stmt;\n   return i;\n }\n@@ -934,7 +934,7 @@ gsi_start_phis (basic_block bb)\n {\n   gimple_seq *pseq = phi_nodes_ptr (bb);\n \n-  /* Adapted from gsi_start_1. */\n+  /* Adapted from gsi_start. */\n   gphi_iterator i;\n \n   i.ptr = gimple_seq_first (*pseq);"}, {"sha": "67d95ca71a00405c12da6ee43246b688fc6c9bc0", "filename": "gcc/gimple-iterator.h", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aa61e08ade43fa1e94dc0e951f11739bbd2ae40/gcc%2Fgimple-iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aa61e08ade43fa1e94dc0e951f11739bbd2ae40/gcc%2Fgimple-iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-iterator.h?ref=4aa61e08ade43fa1e94dc0e951f11739bbd2ae40", "patch": "@@ -96,19 +96,17 @@ extern void update_modified_stmts (gimple_seq);\n /* Return a new iterator pointing to GIMPLE_SEQ's first statement.  */\n \n static inline gimple_stmt_iterator\n-gsi_start_1 (gimple_seq *seq)\n+gsi_start (gimple_seq &seq)\n {\n   gimple_stmt_iterator i;\n \n-  i.ptr = gimple_seq_first (*seq);\n-  i.seq = seq;\n+  i.ptr = gimple_seq_first (seq);\n+  i.seq = &seq;\n   i.bb = i.ptr ? gimple_bb (i.ptr) : NULL;\n \n   return i;\n }\n \n-#define gsi_start(x) gsi_start_1 (&(x))\n-\n static inline gimple_stmt_iterator\n gsi_none (void)\n {\n@@ -140,19 +138,17 @@ gimple_stmt_iterator gsi_start_edge (edge e);\n /* Return a new iterator initially pointing to GIMPLE_SEQ's last statement.  */\n \n static inline gimple_stmt_iterator\n-gsi_last_1 (gimple_seq *seq)\n+gsi_last (gimple_seq &seq)\n {\n   gimple_stmt_iterator i;\n \n-  i.ptr = gimple_seq_last (*seq);\n-  i.seq = seq;\n+  i.ptr = gimple_seq_last (seq);\n+  i.seq = &seq;\n   i.bb = i.ptr ? gimple_bb (i.ptr) : NULL;\n \n   return i;\n }\n \n-#define gsi_last(x) gsi_last_1 (&(x))\n-\n /* Return a new iterator pointing to the last statement in basic block BB.  */\n \n static inline gimple_stmt_iterator\n@@ -232,6 +228,25 @@ gsi_after_labels (basic_block bb)\n   return gsi;\n }\n \n+/* Return a statement iterator that points to the first\n+   non-label statement in sequence SEQ.  */\n+\n+static inline gimple_stmt_iterator\n+gsi_after_labels (gimple_seq &seq)\n+{\n+  gimple_stmt_iterator gsi = gsi_start (seq);\n+\n+  for (; !gsi_end_p (gsi); )\n+    {\n+      if (gimple_code (gsi_stmt (gsi)) == GIMPLE_LABEL)\n+\tgsi_next (&gsi);\n+      else\n+\tbreak;\n+    }\n+\n+  return gsi;\n+}\n+\n /* Advance the iterator to the next non-debug gimple statement.  */\n \n static inline void"}, {"sha": "a43fa47e28fd29286ea37b18cca15e6215c6851f", "filename": "gcc/omp-low.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aa61e08ade43fa1e94dc0e951f11739bbd2ae40/gcc%2Fomp-low.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aa61e08ade43fa1e94dc0e951f11739bbd2ae40/gcc%2Fomp-low.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.cc?ref=4aa61e08ade43fa1e94dc0e951f11739bbd2ae40", "patch": "@@ -6232,7 +6232,7 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t\t\t  x = lang_hooks.decls.omp_clause_copy_ctor (c, iv, x);\n \t\t\t  gimplify_and_add (x, ilist);\n \t\t\t  gimple_stmt_iterator gsi\n-\t\t\t    = gsi_start_1 (gimple_omp_body_ptr (ctx->stmt));\n+\t\t\t    = gsi_start (*gimple_omp_body_ptr (ctx->stmt));\n \t\t\t  gassign *g\n \t\t\t    = gimple_build_assign (unshare_expr (lvar), iv);\n \t\t\t  gsi_insert_before_without_update (&gsi, g,\n@@ -6897,7 +6897,7 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t\t\t\t\t      uid, integer_zero_node,\n \t\t\t\t\t      nonconst_simd_if);\n       gimple_call_set_lhs (g, sctx.lane);\n-      gimple_stmt_iterator gsi = gsi_start_1 (gimple_omp_body_ptr (ctx->stmt));\n+      gimple_stmt_iterator gsi = gsi_start (*gimple_omp_body_ptr (ctx->stmt));\n       gsi_insert_before_without_update (&gsi, g, GSI_SAME_STMT);\n       g = gimple_build_assign (sctx.lane, INTEGER_CST,\n \t\t\t       build_int_cst (unsigned_type_node, 0));\n@@ -10324,7 +10324,7 @@ lower_omp_scan (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n   lower_omp (gimple_omp_body_ptr (stmt), octx);\n   if (before)\n     {\n-      gimple_stmt_iterator gsi = gsi_start_1 (gimple_omp_body_ptr (stmt));\n+      gimple_stmt_iterator gsi = gsi_start (*gimple_omp_body_ptr (stmt));\n       gsi_insert_seq_before (&gsi, before, GSI_SAME_STMT);\n     }\n }"}]}