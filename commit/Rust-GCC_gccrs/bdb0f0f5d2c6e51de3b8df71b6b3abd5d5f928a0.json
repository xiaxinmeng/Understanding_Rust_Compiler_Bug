{"sha": "bdb0f0f5d2c6e51de3b8df71b6b3abd5d5f928a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRiMGYwZjVkMmM2ZTUxZGUzYjhkZjcxYjZiM2FiZDVkNWY5MjhhMA==", "commit": {"author": {"name": "Doug Gregor", "email": "dgregor@apple.com", "date": "2003-06-20T22:12:18Z"}, "committer": {"name": "Doug Gregor", "email": "dgregor@gcc.gnu.org", "date": "2003-06-20T22:12:18Z"}, "message": "fix basic_string::replace for integral types\n\nFrom-SVN: r68286", "tree": {"sha": "b6fb501dca2ba86f4b165605f3054bb615e67f0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6fb501dca2ba86f4b165605f3054bb615e67f0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdb0f0f5d2c6e51de3b8df71b6b3abd5d5f928a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdb0f0f5d2c6e51de3b8df71b6b3abd5d5f928a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdb0f0f5d2c6e51de3b8df71b6b3abd5d5f928a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdb0f0f5d2c6e51de3b8df71b6b3abd5d5f928a0/comments", "author": {"login": "DougGregor", "id": 989428, "node_id": "MDQ6VXNlcjk4OTQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/989428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DougGregor", "html_url": "https://github.com/DougGregor", "followers_url": "https://api.github.com/users/DougGregor/followers", "following_url": "https://api.github.com/users/DougGregor/following{/other_user}", "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}", "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions", "organizations_url": "https://api.github.com/users/DougGregor/orgs", "repos_url": "https://api.github.com/users/DougGregor/repos", "events_url": "https://api.github.com/users/DougGregor/events{/privacy}", "received_events_url": "https://api.github.com/users/DougGregor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "49a2166f172a3dfb19b0bdf7f6c7e4ab560efb19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49a2166f172a3dfb19b0bdf7f6c7e4ab560efb19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49a2166f172a3dfb19b0bdf7f6c7e4ab560efb19"}], "stats": {"total": 73, "additions": 54, "deletions": 19}, "files": [{"sha": "8f24748ee8f9173cd1eb0659e70c01fa0b80795c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdb0f0f5d2c6e51de3b8df71b6b3abd5d5f928a0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdb0f0f5d2c6e51de3b8df71b6b3abd5d5f928a0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bdb0f0f5d2c6e51de3b8df71b6b3abd5d5f928a0", "patch": "@@ -1,3 +1,15 @@\n+2003-06-20  Doug Gregor <dgregor@apple.com>\n+\n+\t* include/bits/basic_string.h (basic_string::replace): Dispatch \n+\t_InputIterator version based on _Is_integer.\n+\t* include/bits/basic_string.tcc (basic_string::replace):\n+\tRenamed replace(iterator, iterator, size_type, _CharT) to\n+\t_M_replace_aux.\n+\t* testsuite/21_strings/basic_string/assign/char/1.cc (test01):\n+\tTest basic_string::assign(_InputIterator, _InputIterator),\n+\twhich calls basic_string::replace(iterator, iterator,\n+\t_Input_iterator, _InputIterator).\n+\n 2003-06-20  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/testsuite_performance.h (resource_counter): Don't use"}, {"sha": "7942c7635e2090ec80984bfe0062f7cf7b751e8a", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdb0f0f5d2c6e51de3b8df71b6b3abd5d5f928a0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdb0f0f5d2c6e51de3b8df71b6b3abd5d5f928a0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=bdb0f0f5d2c6e51de3b8df71b6b3abd5d5f928a0", "patch": "@@ -625,14 +625,15 @@ namespace std\n       { return this->replace(__i1, __i2, __s, traits_type::length(__s)); }\n \n       basic_string&\n-      replace(iterator __i1, iterator __i2, size_type __n, _CharT __c);\n+      replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)\n+      { return _M_replace_aux(__i1, __i2, __n, __c); }\n \n       template<class _InputIterator>\n         basic_string&\n         replace(iterator __i1, iterator __i2,\n \t\t_InputIterator __k1, _InputIterator __k2)\n-        { return _M_replace(__i1, __i2, __k1, __k2,\n-\t     typename iterator_traits<_InputIterator>::iterator_category()); }\n+        { typedef typename _Is_integer<_InputIterator>::_Integral _Integral;\n+\t  return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral()); }\n \n       // Specializations for the common case of pointer and iterator:\n       // useful to avoid the overhead of temporary buffering in _M_replace.\n@@ -659,6 +660,25 @@ namespace std\n \t}\n \n     private:\n+      template<class _Integer>\n+\tbasic_string&\n+\t_M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n, \n+\t\t\t    _Integer __val, __true_type)\n+        { return _M_replace_aux(__i1, __i2, __n, __val); }\n+\n+      template<class _InputIterator>\n+\tbasic_string&\n+\t_M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,\n+\t\t\t    _InputIterator __k2, __false_type)\n+        { \n+\t  typedef typename iterator_traits<_InputIterator>::iterator_category\n+\t    _Category;\n+\t  return _M_replace(__i1, __i2, __k1, __k2, _Category());\n+\t}\n+\n+      basic_string&\n+      _M_replace_aux(iterator __i1, iterator __i2, size_type __n2, _CharT __c);\n+\n       template<class _InputIterator>\n         basic_string&\n         _M_replace(iterator __i1, iterator __i2, _InputIterator __k1,"}, {"sha": "a9496c0244a42f4858e14086305aea8da0a56e92", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdb0f0f5d2c6e51de3b8df71b6b3abd5d5f928a0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdb0f0f5d2c6e51de3b8df71b6b3abd5d5f928a0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=bdb0f0f5d2c6e51de3b8df71b6b3abd5d5f928a0", "patch": "@@ -621,6 +621,22 @@ namespace std\n       // else nothing (in particular, avoid calling _M_mutate() unnecessarily.)\n     }\n \n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    basic_string<_CharT, _Traits, _Alloc>&\n+    basic_string<_CharT, _Traits, _Alloc>::\n+    _M_replace_aux(iterator __i1, iterator __i2, size_type __n2, _CharT __c)\n+    {\n+      size_type __n1 = __i2 - __i1;\n+      size_type __off1 = __i1 - _M_ibegin();\n+      if (max_size() - (this->size() - __n1) <= __n2)\n+\t__throw_length_error(\"basic_string::replace\");\n+      _M_mutate (__off1, __n1, __n2);\n+      // Invalidated __i1, __i2\n+      if (__n2)\n+\ttraits_type::assign(_M_data() + __off1, __n2, __c);\n+      return *this;\n+    }\n+\n   // This is the general replace helper, which currently gets instantiated both\n   // for input iterators and reverse iterators. It buffers internally and then\n   // calls _M_replace_safe.\n@@ -760,22 +776,6 @@ namespace std\n       return __str;\n     }\n \n-  template<typename _CharT, typename _Traits, typename _Alloc>\n-    basic_string<_CharT, _Traits, _Alloc>&\n-    basic_string<_CharT, _Traits, _Alloc>::\n-    replace(iterator __i1, iterator __i2, size_type __n2, _CharT __c)\n-    {\n-      const size_type __n1 = __i2 - __i1;\n-      const size_type __off1 = __i1 - _M_ibegin();\n-      if (max_size() - (this->size() - __n1) <= __n2)\n-\t__throw_length_error(\"basic_string::replace\");\n-      _M_mutate (__off1, __n1, __n2);\n-      // Invalidated __i1, __i2\n-      if (__n2)\n-\ttraits_type::assign(_M_data() + __off1, __n2, __c);\n-      return *this;\n-    }\n-  \n   template<typename _CharT, typename _Traits, typename _Alloc>\n     typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     basic_string<_CharT, _Traits, _Alloc>::"}, {"sha": "879d3c139c7f547f97a51de800bdb9d6d5ccd4b6", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/assign/char/1.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdb0f0f5d2c6e51de3b8df71b6b3abd5d5f928a0/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdb0f0f5d2c6e51de3b8df71b6b3abd5d5f928a0/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fchar%2F1.cc?ref=bdb0f0f5d2c6e51de3b8df71b6b3abd5d5f928a0", "patch": "@@ -44,6 +44,9 @@ test01()\n     aux.assign(aux, i + 1, string::npos);\n   VERIFY(aux.c_str()[9] == 'B');\n   VERIFY(aux == \"/Hanalei Bay/Kauai/Hawaii\");\n+\n+  aux.assign(10, 0);\n+  VERIFY(aux.length() == 10);\n }\n \n int main()"}]}