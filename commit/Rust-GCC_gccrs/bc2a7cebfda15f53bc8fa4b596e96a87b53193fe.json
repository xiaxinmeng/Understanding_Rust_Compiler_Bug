{"sha": "bc2a7cebfda15f53bc8fa4b596e96a87b53193fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmMyYTdjZWJmZGExNWY1M2JjOGZhNGI1OTZlOTZhODdiNTMxOTNmZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2017-10-24T07:26:52Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2017-10-24T07:26:52Z"}, "message": "re PR middle-end/82569 (failure in 177.mesa cpu2000 test case after r253530)\n\n\tPR middle-end/82569\n\t* tree-outof-ssa.h (always_initialized_rtx_for_ssa_name_p): Delete.\n\t* expr.c (expand_expr_real_1) <expand_decl_rtl>: Revert latest change.\n\t* loop-iv.c (iv_get_reaching_def): Likewise.\n\t* cfgexpand.c (expand_one_ssa_partition): Initialize the RTX if the \n\tvariable is promoted and the partition contains undefined values.\n\nFrom-SVN: r254037", "tree": {"sha": "5835f9cdd7df1edbcc8445fba0d12041daf92a71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5835f9cdd7df1edbcc8445fba0d12041daf92a71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc2a7cebfda15f53bc8fa4b596e96a87b53193fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc2a7cebfda15f53bc8fa4b596e96a87b53193fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc2a7cebfda15f53bc8fa4b596e96a87b53193fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc2a7cebfda15f53bc8fa4b596e96a87b53193fe/comments", "author": null, "committer": null, "parents": [{"sha": "d32bc875d2297f2f2240e8aad2082be4d1f851d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d32bc875d2297f2f2240e8aad2082be4d1f851d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d32bc875d2297f2f2240e8aad2082be4d1f851d8"}], "stats": {"total": 66, "additions": 26, "deletions": 40}, "files": [{"sha": "f42428c57f27d6ff2e99dbb486c920fb29832397", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2a7cebfda15f53bc8fa4b596e96a87b53193fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2a7cebfda15f53bc8fa4b596e96a87b53193fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bc2a7cebfda15f53bc8fa4b596e96a87b53193fe", "patch": "@@ -1,3 +1,12 @@\n+2017-10-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR middle-end/82569\n+\t* tree-outof-ssa.h (always_initialized_rtx_for_ssa_name_p): Delete.\n+\t* expr.c (expand_expr_real_1) <expand_decl_rtl>: Revert latest change.\n+\t* loop-iv.c (iv_get_reaching_def): Likewise.\n+\t* cfgexpand.c (expand_one_ssa_partition): Initialize the RTX if the \n+\tvariable is promoted and the partition contains undefined values.\n+\n 2017-10-23  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* config/nios2/nios2.c (nios2_rtx_costs): Make costs better"}, {"sha": "ec8c8459d120a9ab99cc59dc6a44657ca33a3e24", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2a7cebfda15f53bc8fa4b596e96a87b53193fe/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2a7cebfda15f53bc8fa4b596e96a87b53193fe/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=bc2a7cebfda15f53bc8fa4b596e96a87b53193fe", "patch": "@@ -1391,10 +1391,18 @@ expand_one_ssa_partition (tree var)\n     }\n \n   machine_mode reg_mode = promote_ssa_mode (var, NULL);\n-\n   rtx x = gen_reg_rtx (reg_mode);\n \n   set_rtl (var, x);\n+\n+  /* For a promoted variable, X will not be used directly but wrapped in a\n+     SUBREG with SUBREG_PROMOTED_VAR_P set, which means that the RTL land\n+     will assume that its upper bits can be inferred from its lower bits.\n+     Therefore, if X isn't initialized on every path from the entry, then\n+     we must do it manually in order to fulfill the above assumption.  */\n+  if (reg_mode != TYPE_MODE (TREE_TYPE (var))\n+      && bitmap_bit_p (SA.partitions_for_undefined_values, part))\n+    emit_move_insn (x, CONST0_RTX (reg_mode));\n }\n \n /* Record the association between the RTL generated for partition PART"}, {"sha": "496d492c9fa167ebb0b0e918144e777cfad1612b", "filename": "gcc/expr.c", "status": "modified", "additions": 7, "deletions": 26, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2a7cebfda15f53bc8fa4b596e96a87b53193fe/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2a7cebfda15f53bc8fa4b596e96a87b53193fe/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=bc2a7cebfda15f53bc8fa4b596e96a87b53193fe", "patch": "@@ -9912,43 +9912,24 @@ expand_expr_real_1 (tree exp, rtx target, machine_mode tmode,\n \t  && GET_MODE (decl_rtl) != dmode)\n \t{\n \t  machine_mode pmode;\n-\t  bool always_initialized_rtx;\n \n \t  /* Get the signedness to be used for this variable.  Ensure we get\n \t     the same mode we got when the variable was declared.  */\n \t  if (code != SSA_NAME)\n-\t    {\n-\t      pmode = promote_decl_mode (exp, &unsignedp);\n-\t      always_initialized_rtx = true;\n-\t    }\n+\t    pmode = promote_decl_mode (exp, &unsignedp);\n \t  else if ((g = SSA_NAME_DEF_STMT (ssa_name))\n \t\t   && gimple_code (g) == GIMPLE_CALL\n \t\t   && !gimple_call_internal_p (g))\n-\t    {\n-\t      pmode = promote_function_mode (type, mode, &unsignedp,\n-\t\t\t\t\t    gimple_call_fntype (g), 2);\n-\t      always_initialized_rtx\n-\t\t= always_initialized_rtx_for_ssa_name_p (ssa_name);\n-\t    }\n+\t    pmode = promote_function_mode (type, mode, &unsignedp,\n+\t\t\t\t\t   gimple_call_fntype (g),\n+\t\t\t\t\t   2);\n \t  else\n-\t    {\n-\t      pmode = promote_ssa_mode (ssa_name, &unsignedp);\n-\t      always_initialized_rtx\n-\t\t= always_initialized_rtx_for_ssa_name_p (ssa_name);\n-\t    }\n-\n+\t    pmode = promote_ssa_mode (ssa_name, &unsignedp);\n \t  gcc_assert (GET_MODE (decl_rtl) == pmode);\n \n \t  temp = gen_lowpart_SUBREG (mode, decl_rtl);\n-\n-\t  /* We cannot assume anything about an existing extension if the\n-\t     register may contain uninitialized bits.  */\n-\t  if (always_initialized_rtx)\n-\t    {\n-\t      SUBREG_PROMOTED_VAR_P (temp) = 1;\n-\t      SUBREG_PROMOTED_SET (temp, unsignedp);\n-\t    }\n-\n+\t  SUBREG_PROMOTED_VAR_P (temp) = 1;\n+\t  SUBREG_PROMOTED_SET (temp, unsignedp);\n \t  return temp;\n \t}\n "}, {"sha": "1d0c66f2b2ffca0cd96689216dfd00ec91303ff3", "filename": "gcc/loop-iv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2a7cebfda15f53bc8fa4b596e96a87b53193fe/gcc%2Floop-iv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2a7cebfda15f53bc8fa4b596e96a87b53193fe/gcc%2Floop-iv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-iv.c?ref=bc2a7cebfda15f53bc8fa4b596e96a87b53193fe", "patch": "@@ -353,7 +353,7 @@ iv_get_reaching_def (rtx_insn *insn, rtx reg, df_ref *def)\n   adef = DF_REF_CHAIN (use)->ref;\n \n   /* We do not handle setting only part of the register.  */\n-  if (DF_REF_FLAGS (adef) & (DF_REF_READ_WRITE | DF_REF_SUBREG))\n+  if (DF_REF_FLAGS (adef) & DF_REF_READ_WRITE)\n     return GRD_INVALID;\n \n   def_insn = DF_REF_INSN (adef);"}, {"sha": "ebbaea1a03e9689f5f6893dc5ba7292f138616a6", "filename": "gcc/tree-outof-ssa.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2a7cebfda15f53bc8fa4b596e96a87b53193fe/gcc%2Ftree-outof-ssa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2a7cebfda15f53bc8fa4b596e96a87b53193fe/gcc%2Ftree-outof-ssa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.h?ref=bc2a7cebfda15f53bc8fa4b596e96a87b53193fe", "patch": "@@ -74,18 +74,6 @@ get_gimple_for_ssa_name (tree exp)\n   return NULL;\n }\n \n-/* Return whether the RTX expression representing the storage of the outof-SSA\n-   partition that the SSA name EXP is a member of is always initialized.  */\n-static inline bool\n-always_initialized_rtx_for_ssa_name_p (tree exp)\n-{\n-  int p = partition_find (SA.map->var_partition, SSA_NAME_VERSION (exp));\n-  if (SA.map->partition_to_view)\n-    p = SA.map->partition_to_view[p];\n-  gcc_assert (p != NO_PARTITION);\n-  return !bitmap_bit_p (SA.partitions_for_undefined_values, p);\n-}\n-\n extern bool ssa_is_replaceable_p (gimple *stmt);\n extern void finish_out_of_ssa (struct ssaexpand *sa);\n extern unsigned int rewrite_out_of_ssa (struct ssaexpand *sa);"}]}