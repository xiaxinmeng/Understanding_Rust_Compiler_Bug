{"sha": "612cf351c700b6216209e3f3f4b3a0959bf2dee7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjEyY2YzNTFjNzAwYjYyMTYyMDllM2YzZjRiM2EwOTU5YmYyZGVlNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-12-22T20:41:56Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-12-23T22:11:05Z"}, "message": "c++: Fix initializing empty base from prvalue [PR97597]\n\nunsafe_return_slot_p wasn't recognizing an empty base as\npotentially-overlapping, which it definitely is.\n\nThe change to build_base_path is to make the virtual conversion also\nrecognized by is_empty_base_ref; unsafe_return_slot_p doesn't to handle\nvirtual conversions, but hypothetical future callers might.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/97597\n\t* class.c (is_empty_base_ref): New.\n\t(build_base_path): Add NOP_EXPR after offset.\n\t* cp-tree.h (is_empty_base_ref): Declare it.\n\t* call.c (unsafe_return_slot_p): Call it.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/97597\n\t* g++.dg/init/empty3.C: New test.", "tree": {"sha": "ea53b09e0d34deb068d7312928a8e2d88fd89924", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea53b09e0d34deb068d7312928a8e2d88fd89924"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/612cf351c700b6216209e3f3f4b3a0959bf2dee7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/612cf351c700b6216209e3f3f4b3a0959bf2dee7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/612cf351c700b6216209e3f3f4b3a0959bf2dee7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/612cf351c700b6216209e3f3f4b3a0959bf2dee7/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3932785450fb74a886b8eb3d6f889de9766b7e8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3932785450fb74a886b8eb3d6f889de9766b7e8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3932785450fb74a886b8eb3d6f889de9766b7e8e"}], "stats": {"total": 54, "additions": 52, "deletions": 2}, "files": [{"sha": "65a4d73a7e04e2d64a6ec2a847197e3ecfced0ea", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/612cf351c700b6216209e3f3f4b3a0959bf2dee7/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/612cf351c700b6216209e3f3f4b3a0959bf2dee7/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=612cf351c700b6216209e3f3f4b3a0959bf2dee7", "patch": "@@ -8426,6 +8426,10 @@ call_copy_ctor (tree a, tsubst_flags_t complain)\n bool\n unsafe_return_slot_p (tree t)\n {\n+  /* Check empty bases separately, they don't have fields.  */\n+  if (is_empty_base_ref (t))\n+    return true;\n+\n   STRIP_NOPS (t);\n   if (TREE_CODE (t) == ADDR_EXPR)\n     t = TREE_OPERAND (t, 0);"}, {"sha": "fc5502aad980b9b1524b220ac3efa07b3e174560", "filename": "gcc/cp/class.c", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/612cf351c700b6216209e3f3f4b3a0959bf2dee7/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/612cf351c700b6216209e3f3f4b3a0959bf2dee7/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=612cf351c700b6216209e3f3f4b3a0959bf2dee7", "patch": "@@ -494,8 +494,6 @@ build_base_path (enum tree_code code,\n   if (want_pointer)\n     target_type = ptr_target_type;\n \n-  expr = build1 (NOP_EXPR, ptr_target_type, expr);\n-\n   if (!integer_zerop (offset))\n     {\n       offset = fold_convert (sizetype, offset);\n@@ -506,6 +504,8 @@ build_base_path (enum tree_code code,\n   else\n     null_test = NULL;\n \n+  expr = build1 (NOP_EXPR, ptr_target_type, expr);\n+\n  indout:\n   if (!want_pointer)\n     {\n@@ -659,6 +659,33 @@ convert_to_base_statically (tree expr, tree base)\n   return expr;\n }\n \n+/* True IFF EXPR is a reference to an empty base class \"subobject\", as built in\n+   convert_to_base_statically.  We look for the result of the fold_convert\n+   call, a NOP_EXPR from one pointer type to another, where the target is an\n+   empty base of the original type.  */\n+\n+bool\n+is_empty_base_ref (tree expr)\n+{\n+  if (TREE_CODE (expr) == INDIRECT_REF)\n+    expr = TREE_OPERAND (expr, 0);\n+  if (TREE_CODE (expr) != NOP_EXPR)\n+    return false;\n+  tree type = TREE_TYPE (expr);\n+  if (!POINTER_TYPE_P (type))\n+    return false;\n+  type = TREE_TYPE (type);\n+  if (!is_empty_class (type))\n+    return false;\n+  STRIP_NOPS (expr);\n+  tree fromtype = TREE_TYPE (expr);\n+  if (!POINTER_TYPE_P (fromtype))\n+    return false;\n+  fromtype = TREE_TYPE (fromtype);\n+  return (CLASS_TYPE_P (fromtype)\n+\t  && !same_type_ignoring_top_level_qualifiers_p (fromtype, type)\n+\t  && DERIVED_FROM_P (type, fromtype));\n+}\n \f\n tree\n build_vfield_ref (tree datum, tree type)"}, {"sha": "fc6a7898475d4fcdaa7fd12b7f4a895ad638f9a9", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/612cf351c700b6216209e3f3f4b3a0959bf2dee7/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/612cf351c700b6216209e3f3f4b3a0959bf2dee7/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=612cf351c700b6216209e3f3f4b3a0959bf2dee7", "patch": "@@ -6484,6 +6484,7 @@ extern tree build_base_path\t\t\t(enum tree_code, tree,\n extern tree convert_to_base\t\t\t(tree, tree, bool, bool,\n \t\t\t\t\t\t tsubst_flags_t);\n extern tree convert_to_base_statically\t\t(tree, tree);\n+extern bool is_empty_base_ref\t\t\t(tree);\n extern tree build_vtbl_ref\t\t\t(tree, tree);\n extern tree build_vfn_ref\t\t\t(tree, tree);\n extern tree get_vtable_decl\t\t\t(tree, int);"}, {"sha": "510338b2a7e36a653d0bfc92c843eba1900e5e8c", "filename": "gcc/testsuite/g++.dg/init/empty3.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/612cf351c700b6216209e3f3f4b3a0959bf2dee7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fempty3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/612cf351c700b6216209e3f3f4b3a0959bf2dee7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fempty3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fempty3.C?ref=612cf351c700b6216209e3f3f4b3a0959bf2dee7", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/97597\n+\n+struct pq {\n+  pq (const pq &);\n+};\n+\n+struct a9 {\n+  operator pq () const;\n+};\n+\n+struct zp : pq {\n+  zp (const a9 &k3) : pq (k3) { }\n+};\n+\n+int main()\n+{\n+  zp z = a9();\n+}"}]}