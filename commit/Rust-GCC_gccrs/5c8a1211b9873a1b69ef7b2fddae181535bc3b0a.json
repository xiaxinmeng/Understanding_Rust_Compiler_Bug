{"sha": "5c8a1211b9873a1b69ef7b2fddae181535bc3b0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM4YTEyMTFiOTg3M2ExYjY5ZWY3YjJmZGRhZTE4MTUzNWJjM2IwYQ==", "commit": {"author": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2020-01-28T20:43:44Z"}, "committer": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2020-01-28T20:47:35Z"}, "message": "Fix for PR93272 - LRA: EH reg allocated to hold local variable\n\n2020-01-28  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/93272\n\t* ira-lives.c (process_out_of_region_eh_regs): New function.\n\t(process_bb_node_lives): Call it.", "tree": {"sha": "3fffef340452bac8d2c4cb01eb1ae11ffbf5fa22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fffef340452bac8d2c4cb01eb1ae11ffbf5fa22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c8a1211b9873a1b69ef7b2fddae181535bc3b0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c8a1211b9873a1b69ef7b2fddae181535bc3b0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c8a1211b9873a1b69ef7b2fddae181535bc3b0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c8a1211b9873a1b69ef7b2fddae181535bc3b0a/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32387f76e8050ba266b91e4d1fa701cbefcf4030", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32387f76e8050ba266b91e4d1fa701cbefcf4030", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32387f76e8050ba266b91e4d1fa701cbefcf4030"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "8d60dcf0864f4c44a1baf97a35bb5e47d034e807", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c8a1211b9873a1b69ef7b2fddae181535bc3b0a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c8a1211b9873a1b69ef7b2fddae181535bc3b0a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c8a1211b9873a1b69ef7b2fddae181535bc3b0a", "patch": "@@ -1,3 +1,9 @@\n+2020-01-28  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/93272\n+\t* ira-lives.c (process_out_of_region_eh_regs): New function.\n+\t(process_bb_node_lives): Call it.\n+\n 2020-01-28  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* coverage.c (read_counts_file): Make error message lowercase."}, {"sha": "f776fd2342f180a53aeaaee14644485b81474330", "filename": "gcc/ira-lives.c", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c8a1211b9873a1b69ef7b2fddae181535bc3b0a/gcc%2Fira-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c8a1211b9873a1b69ef7b2fddae181535bc3b0a/gcc%2Fira-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-lives.c?ref=5c8a1211b9873a1b69ef7b2fddae181535bc3b0a", "patch": "@@ -1160,6 +1160,50 @@ non_conflicting_reg_copy_p (rtx_insn *insn)\n   return SET_SRC (set);\n }\n \n+#ifdef EH_RETURN_DATA_REGNO\n+\n+/* Add EH return hard registers as conflict hard registers to allocnos\n+   living at end of BB.  For most allocnos it is already done in\n+   process_bb_node_lives when we processing input edges but it does\n+   not work when and EH edge is edge out of the current region.  This\n+   function covers such out of region edges. */\n+static void\n+process_out_of_region_eh_regs (basic_block bb)\n+{\n+  edge e;\n+  edge_iterator ei;\n+  unsigned int i;\n+  bitmap_iterator bi;\n+  bool eh_p = false;\n+\n+  FOR_EACH_EDGE (e, ei, bb->succs)\n+    if ((e->flags & EDGE_EH)\n+\t&& IRA_BB_NODE (e->dest)->parent != IRA_BB_NODE (bb)->parent)\n+      eh_p = true;\n+\n+  if (! eh_p)\n+    return;\n+\n+  EXECUTE_IF_SET_IN_BITMAP (df_get_live_out (bb), FIRST_PSEUDO_REGISTER, i, bi)\n+    {\n+      ira_allocno_t a = ira_curr_regno_allocno_map[i];\n+      for (int n = ALLOCNO_NUM_OBJECTS (a) - 1; n >= 0; n--)\n+\t{\n+\t  ira_object_t obj = ALLOCNO_OBJECT (a, n);\n+\t  for (int k = 0; ; k++)\n+\t    {\n+\t      unsigned int regno = EH_RETURN_DATA_REGNO (k);\n+\t      if (regno == INVALID_REGNUM)\n+\t\tbreak;\n+\t      SET_HARD_REG_BIT (OBJECT_CONFLICT_HARD_REGS (obj), regno);\n+\t      SET_HARD_REG_BIT (OBJECT_TOTAL_CONFLICT_HARD_REGS (obj), regno);\n+\t    }\n+\t}\n+    }\n+}\n+\n+#endif\n+\n /* Process insns of the basic block given by its LOOP_TREE_NODE to\n    update allocno live ranges, allocno hard register conflicts,\n    intersected calls, and register pressure info for allocnos for the\n@@ -1213,6 +1257,10 @@ process_bb_node_lives (ira_loop_tree_node_t loop_tree_node)\n       EXECUTE_IF_SET_IN_BITMAP (reg_live_out, FIRST_PSEUDO_REGISTER, j, bi)\n \tmark_pseudo_regno_live (j);\n \n+#ifdef EH_RETURN_DATA_REGNO\n+      process_out_of_region_eh_regs (bb);\n+#endif\n+\n       freq = REG_FREQ_FROM_BB (bb);\n       if (freq == 0)\n \tfreq = 1;"}]}