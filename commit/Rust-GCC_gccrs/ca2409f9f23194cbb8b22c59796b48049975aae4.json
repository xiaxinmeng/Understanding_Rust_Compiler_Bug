{"sha": "ca2409f9f23194cbb8b22c59796b48049975aae4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2EyNDA5ZjlmMjMxOTRjYmI4YjIyYzU5Nzk2YjQ4MDQ5OTc1YWFlNA==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2011-02-22T19:53:13Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2011-02-22T19:53:13Z"}, "message": "re PR c++/47666 (ICE in dfs_walk_once)\n\nFix PR c++/47666\n\ngcc/cp/\n\n\tPR c++/47666\n\t* class.c (dfs_declare_virt_assop_and_dtor)\n\t(declare_virt_assop_and_dtor): New static functions.\n\t(add_implicitly_declared_members): Use\n\tdeclare_virt_assop_and_dtor.\n\ngcc/testsuite/\n\n\tPR c++/47666\n\t* g++.dg/inherit/virtual7.C: New test.\n\nFrom-SVN: r170413", "tree": {"sha": "36ba2eb56446cbf56437f62ff1873e357f6efa71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36ba2eb56446cbf56437f62ff1873e357f6efa71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca2409f9f23194cbb8b22c59796b48049975aae4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca2409f9f23194cbb8b22c59796b48049975aae4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca2409f9f23194cbb8b22c59796b48049975aae4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca2409f9f23194cbb8b22c59796b48049975aae4/comments", "author": null, "committer": null, "parents": [{"sha": "4597541a6819f7c9248acd41c319498fcd364572", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4597541a6819f7c9248acd41c319498fcd364572", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4597541a6819f7c9248acd41c319498fcd364572"}], "stats": {"total": 133, "additions": 105, "deletions": 28}, "files": [{"sha": "b5323718b7cb62e4b38a12bd1d1e00071e7a1dac", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca2409f9f23194cbb8b22c59796b48049975aae4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca2409f9f23194cbb8b22c59796b48049975aae4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ca2409f9f23194cbb8b22c59796b48049975aae4", "patch": "@@ -1,3 +1,11 @@\n+2011-02-22  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/47666\n+\t* class.c (dfs_declare_virt_assop_and_dtor)\n+\t(declare_virt_assop_and_dtor): New static functions.\n+\t(add_implicitly_declared_members): Use\n+\tdeclare_virt_assop_and_dtor.\n+\n 2011-02-21  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/47207"}, {"sha": "0d485fc6ac7ec13af339bd6281324681369af76e", "filename": "gcc/cp/class.c", "status": "modified", "additions": 65, "deletions": 28, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca2409f9f23194cbb8b22c59796b48049975aae4/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca2409f9f23194cbb8b22c59796b48049975aae4/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=ca2409f9f23194cbb8b22c59796b48049975aae4", "patch": "@@ -2637,6 +2637,70 @@ maybe_add_class_template_decl_list (tree type, tree t, int friend_p)\n \t\t   t, CLASSTYPE_DECL_LIST (type));\n }\n \n+/* This function is called from declare_virt_assop_and_dtor via\n+   dfs_walk_all.\n+\n+   DATA is a type that direcly or indirectly inherits the base\n+   represented by BINFO.  If BINFO contains a virtual assignment [copy\n+   assignment or move assigment] operator or a virtual constructor,\n+   declare that function in DATA if it hasn't been already declared.  */\n+\n+static tree\n+dfs_declare_virt_assop_and_dtor (tree binfo, void *data)\n+{\n+  tree bv, fn, t = (tree)data;\n+  tree opname = ansi_assopname (NOP_EXPR);\n+\n+  gcc_assert (t && CLASS_TYPE_P (t));\n+  gcc_assert (binfo && TREE_CODE (binfo) == TREE_BINFO);\n+\n+  if (!TYPE_CONTAINS_VPTR_P (BINFO_TYPE (binfo)))\n+    /* A base without a vtable needs no modification, and its bases\n+       are uninteresting.  */\n+    return dfs_skip_bases;\n+\n+  if (BINFO_PRIMARY_P (binfo))\n+    /* If this is a primary base, then we have already looked at the\n+       virtual functions of its vtable.  */\n+    return NULL_TREE;\n+\n+  for (bv = BINFO_VIRTUALS (binfo); bv; bv = TREE_CHAIN (bv))\n+    {\n+      fn = BV_FN (bv);\n+\n+      if (DECL_NAME (fn) == opname)\n+\t{\n+\t  if (CLASSTYPE_LAZY_COPY_ASSIGN (t))\n+\t    lazily_declare_fn (sfk_copy_assignment, t);\n+\t  if (CLASSTYPE_LAZY_MOVE_ASSIGN (t))\n+\t    lazily_declare_fn (sfk_move_assignment, t);\n+\t}\n+      else if (DECL_DESTRUCTOR_P (fn)\n+\t       && CLASSTYPE_LAZY_DESTRUCTOR (t))\n+\tlazily_declare_fn (sfk_destructor, t);\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n+/* If the class type T has a direct or indirect base that contains a\n+   virtual assignment operator or a virtual destructor, declare that\n+   function in T if it hasn't been already declared.  */\n+\n+static void\n+declare_virt_assop_and_dtor (tree t)\n+{\n+  if (!(TYPE_POLYMORPHIC_P (t)\n+\t&& (CLASSTYPE_LAZY_COPY_ASSIGN (t)\n+\t    || CLASSTYPE_LAZY_MOVE_ASSIGN (t)\n+\t    || CLASSTYPE_LAZY_DESTRUCTOR (t))))\n+    return;\n+\n+  dfs_walk_all (TYPE_BINFO (t),\n+\t\tdfs_declare_virt_assop_and_dtor,\n+\t\tNULL, t);\n+}\n+\n /* Create default constructors, assignment operators, and so forth for\n    the type indicated by T, if they are needed.  CANT_HAVE_CONST_CTOR,\n    and CANT_HAVE_CONST_ASSIGNMENT are nonzero if, for whatever reason,\n@@ -2706,34 +2770,7 @@ add_implicitly_declared_members (tree t,\n \n   /* We can't be lazy about declaring functions that might override\n      a virtual function from a base class.  */\n-  if (TYPE_POLYMORPHIC_P (t)\n-      && (CLASSTYPE_LAZY_COPY_ASSIGN (t)\n-\t  || CLASSTYPE_LAZY_MOVE_ASSIGN (t)\n-\t  || CLASSTYPE_LAZY_DESTRUCTOR (t)))\n-    {\n-      tree binfo = TYPE_BINFO (t);\n-      tree base_binfo;\n-      int ix;\n-      tree opname = ansi_assopname (NOP_EXPR);\n-      for (ix = 0; BINFO_BASE_ITERATE (binfo, ix, base_binfo); ++ix)\n-\t{\n-\t  tree bv;\n-\t  for (bv = BINFO_VIRTUALS (base_binfo); bv; bv = TREE_CHAIN (bv))\n-\t    {\n-\t      tree fn = BV_FN (bv);\n-\t      if (DECL_NAME (fn) == opname)\n-\t\t{\n-\t\t  if (CLASSTYPE_LAZY_COPY_ASSIGN (t))\n-\t\t    lazily_declare_fn (sfk_copy_assignment, t);\n-\t\t  if (CLASSTYPE_LAZY_MOVE_ASSIGN (t))\n-\t\t    lazily_declare_fn (sfk_move_assignment, t);\n-\t\t}\n-\t      else if (DECL_DESTRUCTOR_P (fn)\n-\t\t       && CLASSTYPE_LAZY_DESTRUCTOR (t))\n-\t\tlazily_declare_fn (sfk_destructor, t);\n-\t    }\n-\t}\n-    }\n+  declare_virt_assop_and_dtor (t);\n }\n \n /* Subroutine of finish_struct_1.  Recursively count the number of fields"}, {"sha": "227f290b4eb96787e26432a10ff1566091e2afd4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca2409f9f23194cbb8b22c59796b48049975aae4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca2409f9f23194cbb8b22c59796b48049975aae4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ca2409f9f23194cbb8b22c59796b48049975aae4", "patch": "@@ -1,3 +1,8 @@\n+2011-02-22  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/47666\n+\t* g++.dg/inherit/virtual7.C: New test.\n+\n 2011-02-22  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \tPR objc/47832"}, {"sha": "bcbe71fac95c247710b297dd9316b044e7614f9f", "filename": "gcc/testsuite/g++.dg/inherit/virtual7.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca2409f9f23194cbb8b22c59796b48049975aae4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fvirtual7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca2409f9f23194cbb8b22c59796b48049975aae4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fvirtual7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fvirtual7.C?ref=ca2409f9f23194cbb8b22c59796b48049975aae4", "patch": "@@ -0,0 +1,27 @@\n+// Origin: PR c++/47666\n+// { dg-do \"compile\" }\n+\n+template <typename T>\n+struct A\n+{\n+  int a;\n+};\n+\n+template <typename T>\n+struct B : public A <T>\n+{\n+};\n+\n+class D : public B <D *>\n+{\n+  virtual D & operator= (const D &);\n+};\n+\n+class E : virtual public D\n+{\n+};\n+\n+class F : public E\n+{\n+  virtual void foo ();\n+};"}]}