{"sha": "92a438d13c876561ee189d9eb274f2dd8151ac91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJhNDM4ZDEzYzg3NjU2MWVlMTg5ZDllYjI3NGYyZGQ4MTUxYWM5MQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-09-16T22:20:44Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-09-16T22:20:44Z"}, "message": "system.h (CTYPE_CONV, [...]): New macros.\n\n\t* system.h (CTYPE_CONV, TOUPPER, TOLOWER): New macros.  Use\n\tCTYPE_CONV in all ctype macros.\n\n\t* cccp.c (initialize_char_syntax): Use uppercase ctype macro\n\tfrom system.h.\n\n\t* cexp.y (initialize_random_junk): Likewise.\n\n\t* c4x.c (c4x_interrupt_function_p, c4x_handle_pragma): Likewise.\n\n\t* i370.c (handle_pragma): Likewise.\n\n\t* i370.h (ASM_OUTPUT_LABELREF, ASM_OUTPUT_ASCII): Likewise.\n\n\t* v850.c (override_options): Likewise.\n\n\t* doprint.c (_doprnt): Likewise.\n\n\t* fixinc/fixincl.c (main, quoted_file_exists, extract_quoted_files):\n\tLikewise.\n\n\t* fixinc/server.c (load_data): Likewise.\n\n\t* fold-const.c (real_hex_to_f): Likewise.\n\n\t* genattr.c (write_upcase, gen_attr): Likewise.\n\n\t* genattrtab.c (convert_const_symbol_ref, evaluate_eq_attr,\n\twrite_upcase): Likewise.\n\n\t* genemit.c (print_code): Likewise.\n\n\t* genopinit.c (gen_insn): Likewise.\n\n\t* genpeep.c (print_code): Likewise.\n\n\t* genrecog.c (print_code): Likewise.\n\n\t* optabs.c (init_libfuncs): Likewise.\n\nch:\n\n\t* lex.c (maybe_downcase, getlc, handle_generic_pragma,\n\tcheck_newline): Likewise.\n\nf:\n\n\t* bad.c (ffebad_finish): Likewise.\n\n\t* fini.c (main): Likewise.\n\n\t* intrin.c (ffeintrin_init_0): Likewise.\n\n\t* lex.c (ffelex_hash_): Likewise.\n\n\t* src.c (ffesrc_init_1): Likewise.\n\nFrom-SVN: r29463", "tree": {"sha": "5e3393cc1483b31e95e58de4c913fd832b1ce906", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e3393cc1483b31e95e58de4c913fd832b1ce906"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92a438d13c876561ee189d9eb274f2dd8151ac91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92a438d13c876561ee189d9eb274f2dd8151ac91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92a438d13c876561ee189d9eb274f2dd8151ac91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92a438d13c876561ee189d9eb274f2dd8151ac91/comments", "author": null, "committer": null, "parents": [{"sha": "7bd41ea6c8e6e08d4382230a82e6655c0d0ab477", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bd41ea6c8e6e08d4382230a82e6655c0d0ab477", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bd41ea6c8e6e08d4382230a82e6655c0d0ab477"}], "stats": {"total": 273, "additions": 168, "deletions": 105}, "files": [{"sha": "3b9615e4d4690e24f980cddf05d50362200721e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=92a438d13c876561ee189d9eb274f2dd8151ac91", "patch": "@@ -1,3 +1,45 @@\n+Thu Sep 16 18:06:35 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* system.h (CTYPE_CONV, TOUPPER, TOLOWER): New macros.  Use\n+\tCTYPE_CONV in all ctype macros.\n+\n+\t* cccp.c (initialize_char_syntax): Use uppercase ctype macro\n+\tfrom system.h.\n+\n+\t* cexp.y (initialize_random_junk): Likewise.\n+\n+\t* c4x.c (c4x_interrupt_function_p, c4x_handle_pragma): Likewise.\n+\n+\t* i370.c (handle_pragma): Likewise.\n+\n+\t* i370.h (ASM_OUTPUT_LABELREF, ASM_OUTPUT_ASCII): Likewise.\n+\n+\t* v850.c (override_options): Likewise.\n+\n+\t* doprint.c (_doprnt): Likewise.\n+\n+\t* fixinc/fixincl.c (main, quoted_file_exists, extract_quoted_files):\n+\tLikewise.\n+\n+\t* fixinc/server.c (load_data): Likewise.\n+\n+\t* fold-const.c (real_hex_to_f): Likewise.\n+\n+\t* genattr.c (write_upcase, gen_attr): Likewise.\n+\n+\t* genattrtab.c (convert_const_symbol_ref, evaluate_eq_attr,\n+\twrite_upcase): Likewise.\n+\n+\t* genemit.c (print_code): Likewise.\n+\n+\t* genopinit.c (gen_insn): Likewise.\n+\n+\t* genpeep.c (print_code): Likewise.\n+\n+\t* genrecog.c (print_code): Likewise.\n+\n+\t* optabs.c (init_libfuncs): Likewise.\n+\n Thu Sep 16 14:03:32 1999  Mark Mitchell  <mark@codesourcery.com>\n \n \t* haifa-sched.c (sched_analyze): Keep the list of notes organized"}, {"sha": "4a906486bcd7415303b2b0b6b0da8a3aec9a0435", "filename": "gcc/cccp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=92a438d13c876561ee189d9eb274f2dd8151ac91", "patch": "@@ -10131,9 +10131,9 @@ initialize_char_syntax ()\n    * refer to them.\n    */\n   for (i = 'a'; i <= 'z'; i++) {\n-    is_idchar[toupper(i)] = 1;\n+    is_idchar[TOUPPER(i)] = 1;\n     is_idchar[i] = 1;\n-    is_idstart[toupper(i)] = 1;\n+    is_idstart[TOUPPER(i)] = 1;\n     is_idstart[i] = 1;\n   }\n   for (i = '0'; i <= '9'; i++)"}, {"sha": "fc4d7fce8610c644c7bb7f62674f817f114fb0d4", "filename": "gcc/cexp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Fcexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Fcexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcexp.c?ref=92a438d13c876561ee189d9eb274f2dd8151ac91", "patch": "@@ -2029,9 +2029,9 @@ initialize_random_junk ()\n    * refer to them.\n    */\n   for (i = 'a'; i <= 'z'; i++) {\n-    ++is_idchar[toupper(i)];\n+    ++is_idchar[TOUPPER(i)];\n     ++is_idchar[i];\n-    ++is_idstart[toupper(i)];\n+    ++is_idstart[TOUPPER(i)];\n     ++is_idstart[i];\n   }\n   for (i = '0'; i <= '9'; i++)"}, {"sha": "410f671fbb9860a6a0dc280b1f11ea5ea374727c", "filename": "gcc/cexp.y", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Fcexp.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Fcexp.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcexp.y?ref=92a438d13c876561ee189d9eb274f2dd8151ac91", "patch": "@@ -1113,9 +1113,9 @@ initialize_random_junk ()\n    * refer to them.\n    */\n   for (i = 'a'; i <= 'z'; i++) {\n-    ++is_idchar[toupper(i)];\n+    ++is_idchar[TOUPPER(i)];\n     ++is_idchar[i];\n-    ++is_idstart[toupper(i)];\n+    ++is_idstart[TOUPPER(i)];\n     ++is_idstart[i];\n   }\n   for (i = '0'; i <= '9'; i++)"}, {"sha": "8ab5497315334b282e79f7f7a42400171527c537", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=92a438d13c876561ee189d9eb274f2dd8151ac91", "patch": "@@ -1,3 +1,8 @@\n+1999-09-16  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* lex.c (maybe_downcase, getlc, handle_generic_pragma,\n+\tcheck_newline): Use uppercase ctype macro from system.h.\n+\n 1999-09-15  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* actions.c (warn_unhandled): Use xstrdup, not xmalloc/strcpy."}, {"sha": "44029b99d209b1cce9832d2367f9ae7f6aec1e25", "filename": "gcc/ch/lex.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Fch%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Fch%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Flex.c?ref=92a438d13c876561ee189d9eb274f2dd8151ac91", "patch": "@@ -888,7 +888,7 @@ maybe_downcase (str)\n   while (*str)\n     {\n       if (ISUPPER ((unsigned char) *str))\n-\t*str = tolower ((unsigned char)*str);\n+\t*str = TOLOWER (*str);\n       str++;\n     }\n }\n@@ -1470,8 +1470,8 @@ getlc (file)\n   register int c;\n \n   c = getc (file);  \n-  if (ISUPPER (c) && ignore_case)\n-    c = tolower (c);\n+  if (ignore_case)\n+    c = TOLOWER (c);\n   return c;\n }\n \f\n@@ -1524,7 +1524,7 @@ handle_generic_pragma (buffer)\n \t  * buff ++ = c;\n \t  c = getc (finput);\n \t}\n-      while (c != EOF && isascii (c) && ! isspace (c) && c != '\\n'\n+      while (c != EOF && isascii (c) && ! ISSPACE (c) && c != '\\n'\n \t     && buff < buffer + 128); /* XXX shared knowledge about size of buffer.  */\n       \n       ungetc (c, finput);\n@@ -1577,8 +1577,8 @@ check_newline ()\n      it and ignore it; otherwise, ignore the line, with an error\n      if the word isn't `pragma', `ident', `define', or `undef'.  */\n \n-  if (ISUPPER (c) && ignore_case)\n-    c = tolower (c);\n+  if (ignore_case)\n+    c = TOLOWER (c);\n \n   if (c >= 'a' && c <= 'z')\n     {"}, {"sha": "dafcb19dc9cf7dcf715f8cc5b44e62cbf95f23d4", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=92a438d13c876561ee189d9eb274f2dd8151ac91", "patch": "@@ -682,8 +682,8 @@ c4x_interrupt_function_p ()\n     && current_function_name[2] == 'i'\n     && current_function_name[3] == 'n' \n     && current_function_name[4] == 't'\n-    && isdigit (current_function_name[5])\n-    && isdigit (current_function_name[6]);\n+    && ISDIGIT (current_function_name[5])\n+    && ISDIGIT (current_function_name[6]);\n }\n \n \n@@ -4193,13 +4193,13 @@ c4x_handle_pragma (p_getc, p_ungetc, pname)\n \n   c = p_getc ();\n   while (c == ' ' || c == '\\t') c = p_getc ();\n-  if (! (isalpha(c) || c == '_' || c == '$' || c == '@'))\n+  if (! (ISALPHA(c) || c == '_' || c == '$' || c == '@'))\n     return 0;\n \n   i = 0;\n   namesize = 16;\n   name = xmalloc (namesize);\n-  while (isalnum (c) || c == '_' || c == '$' || c == '@')\n+  while (ISALNUM (c) || c == '_' || c == '$' || c == '@')\n     {\n       if (i >= namesize-1)\n \t{"}, {"sha": "e6830277fda3d9d9e3810e15845b571a01ea39ad", "filename": "gcc/config/i370/i370.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Fconfig%2Fi370%2Fi370.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Fconfig%2Fi370%2Fi370.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.c?ref=92a438d13c876561ee189d9eb274f2dd8151ac91", "patch": "@@ -976,7 +976,7 @@ handle_pragma (finput, node)\n \t  do {\n \t    *s++ = c;\n \t    c = getc (finput);\n-\t  } while (isalnum(c) || c == '_');\n+\t  } while (ISALNUM(c) || c == '_');\n \t  if (c == '\\n')\n \t    goto PRAGMA_WARNING;\n \t  *s = 0;\n@@ -1014,7 +1014,7 @@ handle_pragma (finput, node)\n \t              }\n \t            *s++ = c;\n \t            c = getc (finput);\n-\t            if (isspace(c) || c == ')')\n+\t            if (ISSPACE(c) || c == ')')\n \t              goto PRAGMA_WARNING;\n \t          } while (c != '\"');\n \t          *s = 0;"}, {"sha": "45da9fa7c49baea7f7bcee7e939bf91c6b174a15", "filename": "gcc/config/i370/i370.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Fconfig%2Fi370%2Fi370.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Fconfig%2Fi370%2Fi370.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.h?ref=92a438d13c876561ee189d9eb274f2dd8151ac91", "patch": "@@ -1138,7 +1138,7 @@ enum reg_class\n     ch = '@';\t\t\t\t\t\t\t\t\\\n   for (bp = temp; *bp; bp++)\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      if (islower (*bp)) *bp = toupper (*bp);\t\t\t\t\\\n+      *bp = TOUPPER (*bp);\t\t\t\t\t\t\\\n       else if (*bp == '_') *bp = ch;\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   fprintf (FILE, \"%s\", temp);\t\t\t\t\t\t\\\n@@ -1256,7 +1256,7 @@ enum reg_class\n   for (j = 0, i = 0; i < LEN; j++, i++)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       c = PTR[i];\t\t\t\t\t\t\t\\\n-      if (iscntrl (c) || c == '&')\t\t\t\t\t\\\n+      if (ISCNTRL (c) || c == '&')\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \t  if (j % MVS_ASCII_TEXT_LENGTH != 0 )\t\t\t\t\\\n \t    fprintf (FILE, \"'\\n\");\t\t\t\t\t\\"}, {"sha": "6306cfc164537c0fb9925c4424ff1a8d80b8a04b", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=92a438d13c876561ee189d9eb274f2dd8151ac91", "patch": "@@ -134,7 +134,7 @@ override_options ()\n     {\n       if (small_memory[i].value)\n \t{\n-\t  if (!isdigit (*small_memory[i].value))\n+\t  if (!ISDIGIT (*small_memory[i].value))\n \t    error (\"%s=%s is not numeric.\",\n \t\t   small_memory[i].name,\n \t\t   small_memory[i].value);\n@@ -3022,8 +3022,7 @@ v850_handle_pragma (p_getc, p_ungetc, name)\n \t  /* Read string.  */\n \t  do\n \t    * buff ++ = (c = p_getc ());\n-\t  while (c != EOF && isascii (c)\n-\t\t && (isalnum (c) || c == '_' || c == '.' || c == ' ')\n+\t  while (c != EOF && (ISALNUM (c) || c == '_' || c == '.' || c == ' ')\n \t\t && (buff < buffer + 126));\n \t  \n \t  if (c != '\"')\n@@ -3033,8 +3032,7 @@ v850_handle_pragma (p_getc, p_ungetc, name)\n \t  break;\n \n \tdefault:\n-\t  while (c != EOF && isascii (c)\n-\t\t && (isalnum (c) || c == '_' || c == '.')\n+\t  while (c != EOF && (ISALNUM (c) || c == '_' || c == '.')\n \t\t && (buff < buffer + 126))\n \t    * buff ++ = (c = p_getc ());\n \t  break;"}, {"sha": "9d01f9a008c4524eaf38e653116608f778cdc72c", "filename": "gcc/doprint.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Fdoprint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Fdoprint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoprint.c?ref=92a438d13c876561ee189d9eb274f2dd8151ac91", "patch": "@@ -88,7 +88,7 @@ _doprnt (format, ap, stream)\n \t  if (*ptr == '*')\n \t    COPY_VA_INT;\n \t  else\n-\t    while (isdigit(*ptr)) /* Handle explicit numeric value. */\n+\t    while (ISDIGIT(*ptr)) /* Handle explicit numeric value. */\n \t      *sptr++ = *ptr++;\n \t  \n \t  if (*ptr == '.')\n@@ -97,7 +97,7 @@ _doprnt (format, ap, stream)\n \t      if (*ptr == '*')\n \t\tCOPY_VA_INT;\n \t      else\n-\t\twhile (isdigit(*ptr)) /* Handle explicit numeric value. */\n+\t\twhile (ISDIGIT(*ptr)) /* Handle explicit numeric value. */\n \t\t  *sptr++ = *ptr++;\n \t    }\n \t  while (strchr (\"hlL\", *ptr))"}, {"sha": "8fd19f3a4cf6e626f8e7fcbf0e1fb4c0f3dd5a9f", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=92a438d13c876561ee189d9eb274f2dd8151ac91", "patch": "@@ -1,3 +1,15 @@\n+Thu Sep 16 18:07:11 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* bad.c (ffebad_finish): Use uppercase ctype macro from system.h.\n+\n+\t* fini.c (main): Likewise.\n+\n+\t* intrin.c (ffeintrin_init_0): Likewise.\n+\n+\t* lex.c (ffelex_hash_): Likewise.\n+\n+\t* src.c (ffesrc_init_1): Likewise.\n+\n Tue Sep 14 12:14:28 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* g77spec.c (lang_specific_driver): Remove unnecessary argument in"}, {"sha": "5b42129ebf6c94bbb5438355fc2936046ef010a3", "filename": "gcc/f/bad.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Ff%2Fbad.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Ff%2Fbad.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fbad.c?ref=92a438d13c876561ee189d9eb274f2dd8151ac91", "patch": "@@ -461,7 +461,7 @@ ffebad_finish ()\n \t{\n \t  char c;\n \n-\t  c = toupper (s[0]);\n+\t  c = TOUPPER (s[0]);\n \t  fprintf (stderr, \"%c%s \", c, &s[1]);\n \t}\n       else if (s[0] != '\\0')"}, {"sha": "d09161fdee6d62b2ca5bc1fd92b085bc7c6fb73e", "filename": "gcc/f/fini.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Ff%2Ffini.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Ff%2Ffini.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Ffini.c?ref=92a438d13c876561ee189d9eb274f2dd8151ac91", "patch": "@@ -381,8 +381,8 @@ main (int argc, char **argv)\n \t  cc = buf[i];\n \t  if (ISALPHA (cc))\n \t    {\n-\t      newname->name_uc[i] = toupper (cc);\n-\t      newname->name_lc[i] = tolower (cc);\n+\t      newname->name_uc[i] = TOUPPER (cc);\n+\t      newname->name_lc[i] = TOLOWER (cc);\n \t      newname->name_ic[i] = cc;\n \t    }\n \t  else"}, {"sha": "d59458c60fee1b276908b30b5ad2b19d45fc9490", "filename": "gcc/f/intrin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Ff%2Fintrin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Ff%2Fintrin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fintrin.c?ref=92a438d13c876561ee189d9eb274f2dd8151ac91", "patch": "@@ -1588,7 +1588,7 @@ ffeintrin_init_0 ()\n \t  if ((ISDIGIT (*p1) || (*p1 == '_')) && (*p1 == *p2) && (*p1 == *p3))\n \t    continue;\n \t  if (! ISUPPER ((unsigned char)*p1) || ! ISLOWER ((unsigned char)*p2)\n-\t      || (*p1 != toupper ((unsigned char)*p2))\n+\t      || (*p1 != TOUPPER (*p2))\n \t      || ((*p3 != *p1) && (*p3 != *p2)))\n \t    break;\n \t}"}, {"sha": "b6198b215f1fc17858544f0d78e15f5c69e4a9a0", "filename": "gcc/f/lex.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Ff%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Ff%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Flex.c?ref=92a438d13c876561ee189d9eb274f2dd8151ac91", "patch": "@@ -1126,16 +1126,17 @@ ffelex_hash_ (FILE *finput)\n \t      static char buffer [128];\n \t      char * buff = buffer;\n \n-\t      /* Read the pragma name into a buffer.  */\n-\t      while (isspace (c = getc (finput)))\n+\t      /* Read the pragma name into a buffer.\n+\t\t ISSPACE() may evaluate its argument more than once!  */\n+\t      while (((c = getc (finput)), ISSPACE(c)))\n \t\tcontinue;\n \t      \n \t      do\n \t\t{\n \t\t  * buff ++ = c;\n \t\t  c = getc (finput);\n \t\t}\n-\t      while (c != EOF && ! isspace (c) && c != '\\n'\n+\t      while (c != EOF && ! ISSPACE (c) && c != '\\n'\n \t\t     && buff < buffer + 128);\n \n \t      pragma_ungetc (c);"}, {"sha": "e434fbf95e8ea3258f2c97ab9e2eb1ff2a02d1fa", "filename": "gcc/f/src.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Ff%2Fsrc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Ff%2Fsrc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fsrc.c?ref=92a438d13c876561ee189d9eb274f2dd8151ac91", "patch": "@@ -120,10 +120,10 @@ ffesrc_init_1 ()\n     }\n \n   for (i = 'A'; i <= 'Z'; ++i)\n-    ffesrc_tolower_[i] = tolower (i);\n+    ffesrc_tolower_[i] = TOLOWER (i);\n \n   for (i = 'a'; i <= 'z'; ++i)\n-    ffesrc_toupper_[i] = toupper (i);\n+    ffesrc_toupper_[i] = TOUPPER (i);\n \n   ffesrc_check_symbol_ = (ffe_case_symbol () != FFE_caseNONE);\n \n@@ -153,7 +153,7 @@ ffesrc_init_1 ()\n \n   if (ffesrc_ok_match_init_lower_)\n     for (i = 'a'; i <= 'z'; ++i)\n-      ffesrc_char_match_init_[i] = toupper (i);\n+      ffesrc_char_match_init_[i] = TOUPPER (i);\n   else\n     for (i = 'a'; i <= 'z'; ++i)\n       ffesrc_char_match_init_[i] = FFESRC_INVALID_SYMBOL_CHAR_;\n@@ -164,21 +164,21 @@ ffesrc_init_1 ()\n \n   if (ffesrc_ok_match_noninit_lower_)\n     for (i = 'a'; i <= 'z'; ++i)\n-      ffesrc_char_match_noninit_[i] = toupper (i);\n+      ffesrc_char_match_noninit_[i] = TOUPPER (i);\n   else\n     for (i = 'a'; i <= 'z'; ++i)\n       ffesrc_char_match_noninit_[i] = FFESRC_INVALID_SYMBOL_CHAR_;\n \n   if (ffe_case_source () == FFE_caseLOWER)\n     for (i = 'A'; i <= 'Z'; ++i)\n-      ffesrc_char_source_[i] = tolower (i);\n+      ffesrc_char_source_[i] = TOLOWER (i);\n   else if (ffe_case_source () == FFE_caseUPPER)\n     for (i = 'a'; i <= 'z'; ++i)\n-      ffesrc_char_source_[i] = toupper (i);\n+      ffesrc_char_source_[i] = TOUPPER (i);\n \n   if (ffe_case_match () == FFE_caseLOWER)\n     for (i = 'A'; i <= 'Z'; ++i)\n-      ffesrc_char_internal_init_[i] = tolower (i);\n+      ffesrc_char_internal_init_[i] = TOLOWER (i);\n \n   switch (ffe_case_symbol ())\n     {"}, {"sha": "1a570f23bbaafdfa59cba079f3cf9e4379c6a459", "filename": "gcc/fixinc/fixincl.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Ffixinc%2Ffixincl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Ffixinc%2Ffixincl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixincl.c?ref=92a438d13c876561ee189d9eb274f2dd8151ac91", "patch": "@@ -221,13 +221,13 @@ main (argc, argv)\n           {\n             if (fgets (pz_buf, MAXPATHLEN, stdin) == (char *) NULL)\n               break;\n-            while (isspace (*pz_buf))\n+            while (ISSPACE (*pz_buf))\n               pz_buf++;\n             if ((*pz_buf == '\\0') || (*pz_buf == '#'))\n               continue;\n             apz_names[file_name_ct++] = pz_buf;\n             pz_buf += strlen (pz_buf);\n-            while (isspace (pz_buf[-1]))\n+            while (ISSPACE (pz_buf[-1]))\n               pz_buf--;\n             *pz_buf++ = '\\0';\n           }\n@@ -813,7 +813,7 @@ quoted_file_exists (pz_src_path, pz_file_path, pz_file)\n \n   for (;;) {\n     char ch = *pz_file++;\n-    if (! isgraph( ch ))\n+    if (! ISGRAPH(ch))\n       return 0;\n     if (ch == '\"')\n       break;\n@@ -875,9 +875,10 @@ extract_quoted_files (pz_data, pz_file_name, p_re_match)\n       pz_incl_quot += p_re_match->rm_so;\n \n       /*  Skip forward to the included file name */\n-      while (isspace (*pz_incl_quot))\n+      while (ISSPACE (*pz_incl_quot))\n         pz_incl_quot++;\n-      while (isspace (*++pz_incl_quot))\n+      /* ISSPACE() may evaluate is argument more than once!  */\n+      while ((++pz_incl_quot, ISSPACE (*pz_incl_quot)))\n         ;\n       pz_incl_quot += sizeof (\"include\") - 1;\n       while (*pz_incl_quot++ != '\"')"}, {"sha": "06fa26ac6a6103d8360a738740b53ac2297873a3", "filename": "gcc/fixinc/server.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Ffixinc%2Fserver.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Ffixinc%2Fserver.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Fserver.c?ref=92a438d13c876561ee189d9eb274f2dd8151ac91", "patch": "@@ -163,7 +163,7 @@ load_data (fp)\n       return (char *) NULL;\n     }\n \n-  while ((pz_scan > pz_text) && isspace (pz_scan[-1]))\n+  while ((pz_scan > pz_text) && ISSPACE (pz_scan[-1]))\n     pz_scan--;\n   *pz_scan = NUL;\n   return realloc ((void *) pz_text, strlen (pz_text) + 1);"}, {"sha": "cddcded25ee7869c3a1905cc5b41060caf230cda", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=92a438d13c876561ee189d9eb274f2dd8151ac91", "patch": "@@ -1072,7 +1072,7 @@ real_hex_to_f (s, mode)\n \t     }\n \t   /* Value of exponent.\n \t      The exponent field is a decimal integer.  */\n-\t   while (isdigit(*p))\n+\t   while (ISDIGIT(*p))\n \t     {\n \t       k = (*p++ & 0x7f) - '0';\n \t       expon = 10 * expon + k;"}, {"sha": "4316c3540ba51456b13476a1f907dea4b0c2bad1", "filename": "gcc/genattr.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Fgenattr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Fgenattr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattr.c?ref=92a438d13c876561ee189d9eb274f2dd8151ac91", "patch": "@@ -56,7 +56,7 @@ struct function_unit\n \n static void extend_range PROTO((struct range *, int, int));\n static void init_range PROTO((struct range *));\n-static void write_upcase PROTO((char *));\n+static void write_upcase PROTO((const char *));\n static void gen_attr PROTO((rtx));\n static void write_units PROTO((int, struct range *, struct range *,\n \t\t\t       struct range *, struct range *,\n@@ -81,13 +81,10 @@ init_range (range)\n \n static void\n write_upcase (str)\n-    char *str;\n+    const char *str;\n {\n   for (; *str; str++)\n-    if (ISLOWER(*str))\n-      printf (\"%c\", toupper(*str));\n-    else\n-      printf (\"%c\", *str);\n+    putchar (TOUPPER(*str));\n }\n \n static void\n@@ -117,10 +114,8 @@ gen_attr (attr)\n \t      write_upcase (XSTR (attr, 0));\n \t      printf (\"_\");\n \t    }\n-\t  else if (ISLOWER(*p))\n-\t    printf (\"%c\", toupper(*p));\n \t  else\n-\t    printf (\"%c\", *p);\n+\t    putchar (TOUPPER(*p));\n \t}\n \n       printf (\"};\\n\");"}, {"sha": "f35e0e4a5f1aca709b5b6bc778e70c773960aba5", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=92a438d13c876561ee189d9eb274f2dd8151ac91", "patch": "@@ -434,7 +434,7 @@ static void write_attr_case\tPROTO((struct attr_desc *, struct attr_value *,\n static void write_unit_name\tPROTO((const char *, int, const char *));\n static void write_attr_valueq\tPROTO((struct attr_desc *, char *));\n static void write_attr_value\tPROTO((struct attr_desc *, rtx));\n-static void write_upcase\tPROTO((char *));\n+static void write_upcase\tPROTO((const char *));\n static void write_indent\tPROTO((int));\n static void write_eligible_delay PROTO((const char *));\n static void write_function_unit_info PROTO((void));\n@@ -1354,8 +1354,7 @@ convert_const_symbol_ref (exp, attr)\n       strcat (p, \"_\");\n       strcat (p, XSTR (av->value, 0));\n       for (; *p != '\\0'; p++)\n-\tif (ISLOWER(*p))\n-\t  *p = toupper (*p);\n+\t*p = TOUPPER (*p);\n \n       value = attr_rtx (SYMBOL_REF, string);\n       RTX_UNCHANGING_P (value) = 1;\n@@ -2838,8 +2837,7 @@ evaluate_eq_attr (exp, value, insn_code, insn_index)\n       strcat (string, \"_\");\n       strcat (string, XSTR (exp, 1));\n       for (p = string; *p ; p++)\n-\tif (ISLOWER(*p))\n-\t  *p = toupper (*p);\n+\t*p = TOUPPER (*p);\n       \n       newexp = attr_rtx (EQ, value,\n \t\t\t attr_rtx (SYMBOL_REF,\n@@ -5351,13 +5349,14 @@ write_attr_value (attr, value)\n \n static void\n write_upcase (str)\n-     char *str;\n+     const char *str;\n {\n   while (*str)\n-    if (ISLOWER(*str))\n-      printf (\"%c\", toupper(*str++));\n-    else\n-      printf (\"%c\", *str++);\n+  {\n+    /* The argument of TOUPPER should not have side effects.  */\n+    putchar (TOUPPER(*str));\n+    str++;\n+  }\n }\n \n static void"}, {"sha": "d1b3a1b43274f7e5b4ddeea315c19ddcba9bd45c", "filename": "gcc/genemit.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=92a438d13c876561ee189d9eb274f2dd8151ac91", "patch": "@@ -135,12 +135,7 @@ print_code (code)\n {\n   register const char *p1;\n   for (p1 = GET_RTX_NAME (code); *p1; p1++)\n-    {\n-      if (ISLOWER(*p1))\n-\tputchar (toupper(*p1));\n-      else\n-\tputchar (*p1);\n-    }\n+    putchar (TOUPPER(*p1));\n }\n \n static void"}, {"sha": "58846916f8cf1845b453de63d243203d8f21e542", "filename": "gcc/genopinit.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=92a438d13c876561ee189d9eb274f2dd8151ac91", "patch": "@@ -195,7 +195,7 @@ gen_insn (insn)\n \t\tfor (i = ((int) MAX_MACHINE_MODE) - 1; i >= 0; i--)\n \t\t  {\n \t\t    for (p = GET_MODE_NAME(i), q = np; *p; p++, q++)\n-\t\t      if (tolower ((unsigned char)*p) != *q)\n+\t\t      if (TOLOWER (*p) != *q)\n \t\t\tbreak;\n \n \t\t    if (*p == 0\n@@ -249,11 +249,11 @@ gen_insn (insn)\n \t    break;\n \t  case 'a':\n \t    for (np = GET_MODE_NAME(m1); *np; np++)\n-\t      printf (\"%c\", tolower ((unsigned char)*np));\n+\t      putchar (TOLOWER (*np));\n \t    break;\n \t  case 'b':\n \t    for (np = GET_MODE_NAME(m2); *np; np++)\n-\t      printf (\"%c\", tolower ((unsigned char)*np));\n+\t      putchar (TOLOWER (*np));\n \t    break;\n \t  case 'A':\n \t    printf (\"%smode\", GET_MODE_NAME(m1));\n@@ -266,7 +266,7 @@ gen_insn (insn)\n \t    break;\n \t  case 'C':\n \t    for (np = GET_RTX_NAME(op); *np; np++)\n-\t      printf (\"%c\", toupper ((unsigned char)*np));\n+\t      putchar (TOUPPER (*np));\n \t    break;\n \t  }\n     }"}, {"sha": "e5f4833c3bb1cd7e409064aa7be3359972c61f17", "filename": "gcc/genpeep.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Fgenpeep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Fgenpeep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpeep.c?ref=92a438d13c876561ee189d9eb274f2dd8151ac91", "patch": "@@ -370,12 +370,7 @@ print_code (code)\n {\n   register const char *p1;\n   for (p1 = GET_RTX_NAME (code); *p1; p1++)\n-    {\n-      if (ISLOWER(*p1))\n-\tputchar (toupper(*p1));\n-      else\n-\tputchar (*p1);\n-    }\n+    putchar (TOUPPER(*p1));\n }\n \f\n PTR"}, {"sha": "49d4a4ea8a24df218836839e680e8ee72ee2e688", "filename": "gcc/genrecog.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=92a438d13c876561ee189d9eb274f2dd8151ac91", "patch": "@@ -1639,12 +1639,7 @@ print_code (code)\n {\n   register const char *p1;\n   for (p1 = GET_RTX_NAME (code); *p1; p1++)\n-    {\n-      if (ISLOWER(*p1))\n-\tputchar (toupper(*p1));\n-      else\n-\tputchar (*p1);\n-    }\n+    putchar (TOUPPER(*p1));\n }\n \n static int"}, {"sha": "455a37d65a5ecfd5e6da1d3de04064ade42420a3", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=92a438d13c876561ee189d9eb274f2dd8151ac91", "patch": "@@ -4324,7 +4324,7 @@ init_libfuncs (optable, first_mode, last_mode, opname, suffix)\n       for (q = opname; *q; )\n \t*p++ = *q++;\n       for (q = mname; *q; q++)\n-\t*p++ = tolower ((unsigned char)*q);\n+\t*p++ = TOLOWER (*q);\n       *p++ = suffix;\n       *p++ = '\\0';\n "}, {"sha": "9252098e8ecfd2160947d01ae26c2fbffe7a2a41", "filename": "gcc/system.h", "status": "modified", "additions": 40, "deletions": 15, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a438d13c876561ee189d9eb274f2dd8151ac91/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=92a438d13c876561ee189d9eb274f2dd8151ac91", "patch": "@@ -89,27 +89,52 @@ extern int fputs_unlocked PROTO ((const char *, FILE *));\n # define IN_CTYPE_DOMAIN(c) isascii(c)\n #endif\n \n+/* The ctype functions are often implemented as macros which do\n+   lookups in arrays using the parameter as the offset.  If the ctype\n+   function parameter is a char, then gcc will (appropriately) warn\n+   that a \"subscript has type char\".  Using a (signed) char as a subscript\n+   is bad because you may get negative offsets and thus it is not 8-bit\n+   safe.  The CTYPE_CONV macro ensures that the parameter is cast to an\n+   unsigned char when a char is passed in.  When an int is passed in, the\n+   parameter is left alone so we don't lose EOF.\n+*/\n+\n+#define CTYPE_CONV(CH) \\\n+  (sizeof(CH) == sizeof(unsigned char) ? (int)(unsigned char)(CH) : (int)(CH))\n+\n+\n+/* WARNING!  The argument to the ctype replacement macros below is\n+   evaluated more than once so it must not have side effects!  */\n+\n #ifdef isblank\n-# define ISBLANK(c) (IN_CTYPE_DOMAIN (c) && isblank (c))\n+# define ISBLANK(c) (IN_CTYPE_DOMAIN (c) && isblank (CTYPE_CONV(c)))\n #else\n # define ISBLANK(c) ((c) == ' ' || (c) == '\\t')\n #endif\n #ifdef isgraph\n-# define ISGRAPH(c) (IN_CTYPE_DOMAIN (c) && isgraph (c))\n+# define ISGRAPH(c) (IN_CTYPE_DOMAIN (c) && isgraph (CTYPE_CONV(c)))\n+#else\n+# define ISGRAPH(c) (IN_CTYPE_DOMAIN (c) && isprint (CTYPE_CONV(c)) && !isspace (CTYPE_CONV(c)))\n+#endif\n+\n+#define ISPRINT(c) (IN_CTYPE_DOMAIN (c) && isprint (CTYPE_CONV(c)))\n+#define ISALNUM(c) (IN_CTYPE_DOMAIN (c) && isalnum (CTYPE_CONV(c)))\n+#define ISALPHA(c) (IN_CTYPE_DOMAIN (c) && isalpha (CTYPE_CONV(c)))\n+#define ISCNTRL(c) (IN_CTYPE_DOMAIN (c) && iscntrl (CTYPE_CONV(c)))\n+#define ISLOWER(c) (IN_CTYPE_DOMAIN (c) && islower (CTYPE_CONV(c)))\n+#define ISPUNCT(c) (IN_CTYPE_DOMAIN (c) && ispunct (CTYPE_CONV(c)))\n+#define ISSPACE(c) (IN_CTYPE_DOMAIN (c) && isspace (CTYPE_CONV(c)))\n+#define ISUPPER(c) (IN_CTYPE_DOMAIN (c) && isupper (CTYPE_CONV(c)))\n+#define ISXDIGIT(c) (IN_CTYPE_DOMAIN (c) && isxdigit (CTYPE_CONV(c)))\n+#define ISDIGIT_LOCALE(c) (IN_CTYPE_DOMAIN (c) && isdigit (CTYPE_CONV(c)))\n+\n+#if STDC_HEADERS\n+# define TOLOWER(c) (tolower (CTYPE_CONV(c)))\n+# define TOUPPER(c) (toupper (CTYPE_CONV(c)))\n #else\n-# define ISGRAPH(c) (IN_CTYPE_DOMAIN (c) && isprint (c) && !isspace (c))\n-#endif\n-\n-#define ISPRINT(c) (IN_CTYPE_DOMAIN (c) && isprint (c))\n-#define ISALNUM(c) (IN_CTYPE_DOMAIN (c) && isalnum (c))\n-#define ISALPHA(c) (IN_CTYPE_DOMAIN (c) && isalpha (c))\n-#define ISCNTRL(c) (IN_CTYPE_DOMAIN (c) && iscntrl (c))\n-#define ISLOWER(c) (IN_CTYPE_DOMAIN (c) && islower (c))\n-#define ISPUNCT(c) (IN_CTYPE_DOMAIN (c) && ispunct (c))\n-#define ISSPACE(c) (IN_CTYPE_DOMAIN (c) && isspace (c))\n-#define ISUPPER(c) (IN_CTYPE_DOMAIN (c) && isupper (c))\n-#define ISXDIGIT(c) (IN_CTYPE_DOMAIN (c) && isxdigit (c))\n-#define ISDIGIT_LOCALE(c) (IN_CTYPE_DOMAIN (c) && isdigit (c))\n+# define TOLOWER(c) (ISUPPER (c) ? tolower (CTYPE_CONV(c)) : (c))\n+# define TOUPPER(c) (ISLOWER (c) ? toupper (CTYPE_CONV(c)) : (c))\n+#endif\n \n /* ISDIGIT differs from ISDIGIT_LOCALE, as follows:\n    - Its arg may be any int or unsigned int; it need not be an unsigned char."}]}