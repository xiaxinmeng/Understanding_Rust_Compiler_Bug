{"sha": "e19bb1866c16a9fcd38ab36056c5ca55cf6d9d62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE5YmIxODY2YzE2YTlmY2QzOGFiMzYwNTZjNWNhNTVjZjZkOWQ2Mg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2008-02-26T22:33:35Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2008-02-26T22:33:35Z"}, "message": "re PR fortran/35033 (Valid ASSIGNMENT(=) rejected)\n\n2008-02-26  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/35033\n        * interface.c (check_operator_interface): Show better line for\n        * error\n        messages; fix constrains for user-defined assignment operators.\n        (gfc_extend_assign): Fix constrains for user-defined assignment\n        operators.\n\n2008-02-26  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/35033\n        * gfortran.dg/assignment_2.f90: New.\n\nFrom-SVN: r132689", "tree": {"sha": "491eee3f4bb92adcf2c5327e4178a0792616b4ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/491eee3f4bb92adcf2c5327e4178a0792616b4ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e19bb1866c16a9fcd38ab36056c5ca55cf6d9d62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e19bb1866c16a9fcd38ab36056c5ca55cf6d9d62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e19bb1866c16a9fcd38ab36056c5ca55cf6d9d62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e19bb1866c16a9fcd38ab36056c5ca55cf6d9d62/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f5c630c3126fe4e6e681c4638752b64979b40029", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5c630c3126fe4e6e681c4638752b64979b40029", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5c630c3126fe4e6e681c4638752b64979b40029"}], "stats": {"total": 92, "additions": 80, "deletions": 12}, "files": [{"sha": "ad7013861907eb4638cd826736be1cdcceb1ec93", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19bb1866c16a9fcd38ab36056c5ca55cf6d9d62/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19bb1866c16a9fcd38ab36056c5ca55cf6d9d62/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e19bb1866c16a9fcd38ab36056c5ca55cf6d9d62", "patch": "@@ -1,3 +1,11 @@\n+2008-02-26  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/35033\n+\t* interface.c (check_operator_interface): Show better line for error\n+\tmessages; fix constrains for user-defined assignment operators.\n+\t(gfc_extend_assign): Fix constrains for user-defined assignment\n+\toperators.\n+\n 2008-02-26  Tom Tromey  <tromey@redhat.com>\n \n \t* trans-io.c (set_error_locus): Remove old location code."}, {"sha": "4cee386d3d578362b0a9b27e0c8dcf8c25d568ed", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19bb1866c16a9fcd38ab36056c5ca55cf6d9d62/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19bb1866c16a9fcd38ab36056c5ca55cf6d9d62/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=e19bb1866c16a9fcd38ab36056c5ca55cf6d9d62", "patch": "@@ -561,7 +561,7 @@ check_operator_interface (gfc_interface *intr, gfc_intrinsic_op operator)\n       if (sym == NULL)\n \t{\n \t  gfc_error (\"Alternate return cannot appear in operator \"\n-\t\t     \"interface at %L\", &intr->where);\n+\t\t     \"interface at %L\", &intr->sym->declared_at);\n \t  return;\n \t}\n       if (args == 0)\n@@ -591,7 +591,7 @@ check_operator_interface (gfc_interface *intr, gfc_intrinsic_op operator)\n       || (args == 2 && operator == INTRINSIC_NOT))\n     {\n       gfc_error (\"Operator interface at %L has the wrong number of arguments\",\n-\t\t &intr->where);\n+\t\t &intr->sym->declared_at);\n       return;\n     }\n \n@@ -602,23 +602,28 @@ check_operator_interface (gfc_interface *intr, gfc_intrinsic_op operator)\n       if (!sym->attr.subroutine)\n \t{\n \t  gfc_error (\"Assignment operator interface at %L must be \"\n-\t\t     \"a SUBROUTINE\", &intr->where);\n+\t\t     \"a SUBROUTINE\", &intr->sym->declared_at);\n \t  return;\n \t}\n       if (args != 2)\n \t{\n \t  gfc_error (\"Assignment operator interface at %L must have \"\n-\t\t     \"two arguments\", &intr->where);\n+\t\t     \"two arguments\", &intr->sym->declared_at);\n \t  return;\n \t}\n+\n+      /* Allowed are (per F2003, 12.3.2.1.2 Defined assignments):\n+         - First argument an array with different rank than second,\n+         - Types and kinds do not conform, and\n+         - First argument is of derived type.  */\n       if (sym->formal->sym->ts.type != BT_DERIVED\n-\t  && sym->formal->next->sym->ts.type != BT_DERIVED\n+\t  && (r1 == 0 || r1 == r2)\n \t  && (sym->formal->sym->ts.type == sym->formal->next->sym->ts.type\n \t      || (gfc_numeric_ts (&sym->formal->sym->ts)\n \t\t  && gfc_numeric_ts (&sym->formal->next->sym->ts))))\n \t{\n \t  gfc_error (\"Assignment operator interface at %L must not redefine \"\n-\t\t     \"an INTRINSIC type assignment\", &intr->where);\n+\t\t     \"an INTRINSIC type assignment\", &intr->sym->declared_at);\n \t  return;\n \t}\n     }\n@@ -627,7 +632,7 @@ check_operator_interface (gfc_interface *intr, gfc_intrinsic_op operator)\n       if (!sym->attr.function)\n \t{\n \t  gfc_error (\"Intrinsic operator interface at %L must be a FUNCTION\",\n-\t\t     &intr->where);\n+\t\t     &intr->sym->declared_at);\n \t  return;\n \t}\n     }\n@@ -637,21 +642,21 @@ check_operator_interface (gfc_interface *intr, gfc_intrinsic_op operator)\n     {\n       if (i1 != INTENT_OUT && i1 != INTENT_INOUT)\n \tgfc_error (\"First argument of defined assignment at %L must be \"\n-\t\t   \"INTENT(IN) or INTENT(INOUT)\", &intr->where);\n+\t\t   \"INTENT(OUT) or INTENT(INOUT)\", &intr->sym->declared_at);\n \n       if (i2 != INTENT_IN)\n \tgfc_error (\"Second argument of defined assignment at %L must be \"\n-\t\t   \"INTENT(IN)\", &intr->where);\n+\t\t   \"INTENT(IN)\", &intr->sym->declared_at);\n     }\n   else\n     {\n       if (i1 != INTENT_IN)\n \tgfc_error (\"First argument of operator interface at %L must be \"\n-\t\t   \"INTENT(IN)\", &intr->where);\n+\t\t   \"INTENT(IN)\", &intr->sym->declared_at);\n \n       if (args == 2 && i2 != INTENT_IN)\n \tgfc_error (\"Second argument of operator interface at %L must be \"\n-\t\t   \"INTENT(IN)\", &intr->where);\n+\t\t   \"INTENT(IN)\", &intr->sym->declared_at);\n     }\n \n   /* From now on, all we have to do is check that the operator definition\n@@ -2654,7 +2659,8 @@ gfc_extend_assign (gfc_code *c, gfc_namespace *ns)\n   rhs = c->expr2;\n \n   /* Don't allow an intrinsic assignment to be replaced.  */\n-  if (lhs->ts.type != BT_DERIVED && rhs->ts.type != BT_DERIVED\n+  if (lhs->ts.type != BT_DERIVED\n+      && (rhs->rank == 0 || rhs->rank == lhs->rank)\n       && (lhs->ts.type == rhs->ts.type\n \t  || (gfc_numeric_ts (&lhs->ts) && gfc_numeric_ts (&rhs->ts))))\n     return FAILURE;"}, {"sha": "15853bc81bf2e7ae96e27c6c79f932fd1feb1b85", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19bb1866c16a9fcd38ab36056c5ca55cf6d9d62/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19bb1866c16a9fcd38ab36056c5ca55cf6d9d62/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e19bb1866c16a9fcd38ab36056c5ca55cf6d9d62", "patch": "@@ -1,3 +1,8 @@\n+2008-02-26  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/35033\n+\t* gfortran.dg/assignment_2.f90: New.\n+\n 2008-02-26  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/35315"}, {"sha": "3549fbea98337bd387c74f48c119a3348a5da7c6", "filename": "gcc/testsuite/gfortran.dg/assignment_2.f90", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19bb1866c16a9fcd38ab36056c5ca55cf6d9d62/gcc%2Ftestsuite%2Fgfortran.dg%2Fassignment_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19bb1866c16a9fcd38ab36056c5ca55cf6d9d62/gcc%2Ftestsuite%2Fgfortran.dg%2Fassignment_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassignment_2.f90?ref=e19bb1866c16a9fcd38ab36056c5ca55cf6d9d62", "patch": "@@ -0,0 +1,49 @@\n+! { dg-do compile }\n+!\n+! PR fortran/35033\n+!\n+! The checks for assignments were too strict.\n+!\n+MODULE m1\n+          INTERFACE ASSIGNMENT(=)\n+             SUBROUTINE s(a,b)\n+                 REAL,INTENT(OUT) :: a(1,*)\n+                 REAL,INTENT(IN) :: b(:)\n+             END SUBROUTINE\n+          END Interface\n+contains\n+  subroutine test1()\n+          REAL,POINTER :: p(:,:),q(:)\n+          CALL s(p,q) \n+          p = q\n+  end subroutine test1\n+end module m1\n+\n+MODULE m2\n+          INTERFACE ASSIGNMENT(=)\n+             SUBROUTINE s(a,b)\n+                 REAL,INTENT(OUT),VOLATILE :: a(1,*)\n+                 REAL,INTENT(IN) :: b(:)\n+             END SUBROUTINE\n+          END Interface\n+contains\n+  subroutine test1()\n+          REAL,POINTER :: p(:,:),q(:)\n+          CALL s(p,q) ! { dg-error \"requires an assumed-shape or pointer-array dummy\" }\n+!TODO: The following is rightly rejected but the error message is misleading.\n+! The actual reason is the mismatch between pointer array and VOLATILE\n+          p = q ! { dg-error \"Incompatible ranks\" }\n+  end subroutine test1\n+end module m2\n+\n+MODULE m3\n+          INTERFACE ASSIGNMENT(=)\n+             module procedure s ! { dg-error \"must not redefine an INTRINSIC type\" }\n+          END Interface\n+contains\n+             SUBROUTINE s(a,b)\n+                 REAL,INTENT(OUT),VOLATILE :: a(1,*)\n+                 REAL,INTENT(IN) :: b(:,:)\n+             END SUBROUTINE\n+end module m3\n+"}]}