{"sha": "450997efe0aa70d03d9ef757af4bccf62c4dd321", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDUwOTk3ZWZlMGFhNzBkMDNkOWVmNzU3YWY0YmNjZjYyYzRkZDMyMQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-07-02T09:39:54Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-07-02T09:39:54Z"}, "message": "re PR middle-end/44706 (Failed to build 483.xalancbmk in SPEC CPU 2006)\n\n\n\tPR middle-end/44706\n\t* predict.c (predict_paths_for_bb): Handle case when control dependence\n\tBB has only abnormal edges.\n\t* g++.dg/tree-ssa/pr44706.C: New testcase.\n\nFrom-SVN: r161691", "tree": {"sha": "46403e3bed83c82abaaf936bc88c4c21b1cd0aa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46403e3bed83c82abaaf936bc88c4c21b1cd0aa1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/450997efe0aa70d03d9ef757af4bccf62c4dd321", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/450997efe0aa70d03d9ef757af4bccf62c4dd321", "html_url": "https://github.com/Rust-GCC/gccrs/commit/450997efe0aa70d03d9ef757af4bccf62c4dd321", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/450997efe0aa70d03d9ef757af4bccf62c4dd321/comments", "author": null, "committer": null, "parents": [{"sha": "3fa39831668c00d32632f72860cbacbcf8bef1cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fa39831668c00d32632f72860cbacbcf8bef1cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fa39831668c00d32632f72860cbacbcf8bef1cb"}], "stats": {"total": 83, "additions": 82, "deletions": 1}, "files": [{"sha": "2e208cae8a8bca663a7072fd780b7caf9b431866", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/450997efe0aa70d03d9ef757af4bccf62c4dd321/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/450997efe0aa70d03d9ef757af4bccf62c4dd321/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=450997efe0aa70d03d9ef757af4bccf62c4dd321", "patch": "@@ -1,3 +1,9 @@\n+2010-07-02  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR middle-end/44706\n+\t* predict.c (predict_paths_for_bb): Handle case when control dependence\n+\tBB has only abnormal edges.\n+\n 2010-07-02  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/44748"}, {"sha": "15d573b50a2f9ac39e219885287f7acab2b3e5c6", "filename": "gcc/predict.c", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/450997efe0aa70d03d9ef757af4bccf62c4dd321/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/450997efe0aa70d03d9ef757af4bccf62c4dd321/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=450997efe0aa70d03d9ef757af4bccf62c4dd321", "patch": "@@ -1786,8 +1786,33 @@ predict_paths_for_bb (basic_block cur, basic_block bb,\n     if (e->src->index >= NUM_FIXED_BLOCKS\n \t&& !dominated_by_p (CDI_POST_DOMINATORS, e->src, bb))\n     {\n+      edge e2;\n+      edge_iterator ei2;\n+      bool found = false;\n+\n+      /* Ignore abnormals, we predict them as not taken anyway.  */\n+      if (e->flags & (EDGE_EH | EDGE_FAKE | EDGE_ABNORMAL))\n+\tcontinue;\n       gcc_assert (bb == cur || dominated_by_p (CDI_POST_DOMINATORS, cur, bb));\n-      predict_edge_def (e, pred, taken);\n+\n+      /* See if there is how many edge from e->src that is not abnormal\n+\t and does not lead to BB.  */\n+      FOR_EACH_EDGE (e2, ei2, e->src->succs)\n+\tif (e2 != e\n+\t    && !(e2->flags & (EDGE_EH | EDGE_FAKE | EDGE_ABNORMAL))\n+\t    && !dominated_by_p (CDI_POST_DOMINATORS, e2->dest, bb))\n+\t  {\n+\t    found = true;\n+\t    break;\n+\t  }\n+\n+      /* If there is non-abnormal path leaving e->src, predict edge\n+\t using predictor.  Otherwise we need to look for paths\n+\t leading to e->src.  */\n+      if (found)\n+        predict_edge_def (e, pred, taken);\n+      else\n+\tpredict_paths_for_bb (e->src, e->src, pred, taken);\n     }\n   for (son = first_dom_son (CDI_POST_DOMINATORS, cur);\n        son;"}, {"sha": "651d8b652ba7a6bc327dec349d6cf8fc02251b18", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/450997efe0aa70d03d9ef757af4bccf62c4dd321/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/450997efe0aa70d03d9ef757af4bccf62c4dd321/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=450997efe0aa70d03d9ef757af4bccf62c4dd321", "patch": "@@ -1,3 +1,7 @@\n+2010-07-02  Jan Hubicka  <jh@suse.cz>\n+\n+\t* g++.dg/tree-ssa/pr44706.C: New testcase.\n+\n 2010-07-02  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/44748"}, {"sha": "39904d8b9e091db9e18c9aa7363f3f57149c1e27", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr44706.C", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/450997efe0aa70d03d9ef757af4bccf62c4dd321/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr44706.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/450997efe0aa70d03d9ef757af4bccf62c4dd321/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr44706.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr44706.C?ref=450997efe0aa70d03d9ef757af4bccf62c4dd321", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fdump-tree-fnsplit\" } */\n+class MemoryManager;\n+class XMLExcepts {\n+public : \n+    enum Codes     {\n+      AttrList_BadIndex\n+    };\n+};\n+class XMLException {\n+public:\n+    XMLException(const char* const srcFile, const unsigned int srcLine,\n+MemoryManager* const memoryManager = 0);\n+};\n+class ArrayIndexOutOfBoundsException : public XMLException {\n+public:\n+    ArrayIndexOutOfBoundsException(const char* const srcFile , const unsigned\n+int srcLine , const XMLExcepts::Codes toThrow , MemoryManager* memoryManager =\n+0) : XMLException(srcFile, srcLine, memoryManager) {\n+    }\n+};\n+class XMLAttDef {\n+  bool fExternalAttribute;\n+};\n+class XMLAttDefList {\n+public:\n+    MemoryManager* getMemoryManager() const;\n+};\n+class DTDAttDef : public XMLAttDef {\n+};\n+class DTDAttDefList : public XMLAttDefList {\n+  virtual const XMLAttDef &getAttDef(unsigned int index) const ;\n+  DTDAttDef** fArray;\n+  unsigned int fCount;\n+};\n+const XMLAttDef &DTDAttDefList::getAttDef(unsigned int index) const {\n+  if(index >= fCount) \n+    throw ArrayIndexOutOfBoundsException(\"foo.cpp\", 0,\n+XMLExcepts::AttrList_BadIndex, getMemoryManager());\n+  return *(fArray[index]);\n+}\n+\n+/* Mistake in branch prediction caused us to split away real body of the function keeping\n+   only throw () invokation.   This is bad idea.  */\n+/* { dg-final { scan-tree-dump-not \"Splitting function\" \"fnsplit\"} } */\n+/* { dg-final { cleanup-tree-dump \"fnsplit\" } } */"}]}