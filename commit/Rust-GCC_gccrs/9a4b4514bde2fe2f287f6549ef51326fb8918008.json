{"sha": "9a4b4514bde2fe2f287f6549ef51326fb8918008", "node_id": "C_kwDOANBUbNoAKDlhNGI0NTE0YmRlMmZlMmYyODdmNjU0OWVmNTEzMjZmYjg5MTgwMDg", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-12-14T22:14:48Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-12-14T23:37:14Z"}, "message": "libstdc++: Support old and new T_FMT for en_HK locale [PR103687]\n\nThis checks whether the locale data for en_HK includes %p and adjusts\nthe string being tested accordingly. To account for Jakub's fix to make\n%I parse \"12\" as 0 instead of 12, we need to change the expected value\nfor the case where the locale format doesn't include %p. Also change the\ntime from 12:00:00 to 12:02:01 so we can tell if the minutes and seconds\nget mixed up.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/103687\n\t* testsuite/22_locale/time_get/get_date/wchar_t/4.cc: Restore\n\toriginal locale before returning.\n\t* testsuite/22_locale/time_get/get_time/char/2.cc: Check for %p\n\tin locale's T_FMT and adjust accordingly.\n\t* testsuite/22_locale/time_get/get_time/wchar_t/2.cc: Likewise.", "tree": {"sha": "8a2ce1d493c6b5055caf60da02467faf5c3cd77a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a2ce1d493c6b5055caf60da02467faf5c3cd77a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a4b4514bde2fe2f287f6549ef51326fb8918008", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a4b4514bde2fe2f287f6549ef51326fb8918008", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a4b4514bde2fe2f287f6549ef51326fb8918008", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a4b4514bde2fe2f287f6549ef51326fb8918008/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85a438fc78dd12249ca854a3e5c577fefeb1a5cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85a438fc78dd12249ca854a3e5c577fefeb1a5cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85a438fc78dd12249ca854a3e5c577fefeb1a5cd"}], "stats": {"total": 75, "additions": 65, "deletions": 10}, "files": [{"sha": "f6de882e4bd08539f72ea464e844117738fc259c", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_date/wchar_t/4.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a4b4514bde2fe2f287f6549ef51326fb8918008/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a4b4514bde2fe2f287f6549ef51326fb8918008/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fwchar_t%2F4.cc?ref=9a4b4514bde2fe2f287f6549ef51326fb8918008", "patch": "@@ -39,7 +39,7 @@ void test01()\n \n   wistringstream iss;\n   iss.imbue(loc_tw);\n-  const time_get<wchar_t>& tim_get = use_facet<time_get<wchar_t> >(iss.getloc()); \n+  const time_get<wchar_t>& tim_get = use_facet<time_get<wchar_t> >(iss.getloc());\n \n   const ios_base::iostate good = ios_base::goodbit;\n   ios_base::iostate errorstate = good;\n@@ -66,13 +66,14 @@ void test01()\n static bool debian_date_format()\n {\n #ifdef D_FMT\n+  std::string orig = setlocale(LC_TIME, NULL);\n   if (setlocale(LC_TIME, \"zh_TW.UTF-8\") != NULL)\n   {\n     // See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=31413\n     // and https://gcc.gnu.org/bugzilla/show_bug.cgi?id=71641#c2\n-    if (*nl_langinfo(D_FMT) == '%')\n-      return true;\n-    setlocale(LC_TIME, \"C\");\n+    std::string d_fmt = nl_langinfo(D_FMT);\n+    setlocale(LC_TIME, orig.c_str());\n+    return d_fmt[0] == '%';\n   }\n #endif\n   return false;"}, {"sha": "b40971a9bf7ccd301ed7e9b142231020a266b7ca", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_time/char/2.cc", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a4b4514bde2fe2f287f6549ef51326fb8918008/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a4b4514bde2fe2f287f6549ef51326fb8918008/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fchar%2F2.cc?ref=9a4b4514bde2fe2f287f6549ef51326fb8918008", "patch": "@@ -25,6 +25,8 @@\n #include <sstream>\n #include <testsuite_hooks.h>\n \n+static bool ampm_time_format();\n+\n void test02()\n {\n   using namespace std;\n@@ -36,19 +38,23 @@ void test02()\n   locale loc_hk = locale(ISO_8859(1,en_HK));\n   VERIFY( loc_hk != loc_c );\n \n+  const int pm = ampm_time_format() ? 12 : 0;\n   const string empty;\n-  const tm time_bday = __gnu_test::test_tm(0, 0, 12, 4, 3, 71, 0, 93, 0);\n+  const tm time_bday = __gnu_test::test_tm(1, 2, 0+pm, 4, 3, 71, 0, 93, 0);\n \n   // create an ostream-derived object, cache the time_get facet\n   iterator_type end;\n   istringstream iss;\n-  const time_get<char>& tim_get = use_facet<time_get<char> >(iss.getloc()); \n+  const time_get<char>& tim_get = use_facet<time_get<char> >(iss.getloc());\n   const ios_base::iostate good = ios_base::goodbit;\n   ios_base::iostate errorstate = good;\n \n   // inspection of named locales, en_HK\n   iss.imbue(loc_hk);\n-  iss.str(\"12:00:00 PM PST\"); \n+  if (pm)\n+    iss.str(\"12:02:01 PM PST\");\n+  else\n+    iss.str(\"12:02:01 PST\"); // %I means 12-hour clock, so parsed as 12am\n   // Hong Kong in California! Well, they have Paris in Vegas... this\n   // is all a little disney-esque anyway. Besides, you can get decent\n   // Dim Sum in San Francisco.\n@@ -62,6 +68,27 @@ void test02()\n   VERIFY( errorstate == ios_base::eofbit );\n }\n \n+#include <locale.h>\n+#if __has_include(<langinfo.h>)\n+# include <langinfo.h>\n+#endif\n+#include <string.h>\n+\n+static bool ampm_time_format()\n+{\n+#ifdef T_FMT\n+  std::string orig = setlocale(LC_TIME, NULL);\n+  if (setlocale(LC_TIME, ISO_8859(1,en_HK)) != NULL)\n+  {\n+    // See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=103687\n+    std::string t_fmt = nl_langinfo(T_FMT);\n+    setlocale(LC_TIME, orig.c_str());\n+    return t_fmt.find(\"%p\") != std::string::npos;\n+  }\n+#endif\n+  return false;\n+}\n+\n int main()\n {\n   test02();"}, {"sha": "b74604ef47239c31a66ed7087e83dbd1ac134d4d", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_time/wchar_t/2.cc", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a4b4514bde2fe2f287f6549ef51326fb8918008/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a4b4514bde2fe2f287f6549ef51326fb8918008/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fwchar_t%2F2.cc?ref=9a4b4514bde2fe2f287f6549ef51326fb8918008", "patch": "@@ -25,6 +25,8 @@\n #include <sstream>\n #include <testsuite_hooks.h>\n \n+static bool ampm_time_format();\n+\n void test02()\n {\n   using namespace std;\n@@ -36,19 +38,23 @@ void test02()\n   locale loc_hk = locale(ISO_8859(1,en_HK));\n   VERIFY( loc_hk != loc_c );\n \n+  const int pm = ampm_time_format() ? 12 : 0;\n   const wstring empty;\n-  const tm time_bday = __gnu_test::test_tm(0, 0, 12, 4, 3, 71, 0, 93, 0);\n+  const tm time_bday = __gnu_test::test_tm(1, 2, 0+pm, 4, 3, 71, 0, 93, 0);\n \n   // create an ostream-derived object, cache the time_get facet\n   iterator_type end;\n   wistringstream iss;\n-  const time_get<wchar_t>& tim_get = use_facet<time_get<wchar_t> >(iss.getloc()); \n+  const time_get<wchar_t>& tim_get = use_facet<time_get<wchar_t> >(iss.getloc());\n   const ios_base::iostate good = ios_base::goodbit;\n   ios_base::iostate errorstate = good;\n \n   // inspection of named locales, en_HK\n   iss.imbue(loc_hk);\n-  iss.str(L\"12:00:00 PM PST\"); \n+  if (pm)\n+    iss.str(L\"12:02:01 PM PST\");\n+  else\n+    iss.str(L\"12:02:01 PST\"); // %I means 12-hour clock, so parsed as 12am\n   // Hong Kong in California! Well, they have Paris in Vegas... this\n   // is all a little disney-esque anyway. Besides, you can get decent\n   // Dim Sum in San Francisco.\n@@ -62,6 +68,27 @@ void test02()\n   VERIFY( errorstate == ios_base::eofbit );\n }\n \n+#include <locale.h>\n+#if __has_include(<langinfo.h>)\n+# include <langinfo.h>\n+#endif\n+#include <string.h>\n+\n+static bool ampm_time_format()\n+{\n+#ifdef T_FMT\n+  std::string orig = setlocale(LC_TIME, NULL);\n+  if (setlocale(LC_TIME, ISO_8859(1,en_HK)) != NULL)\n+  {\n+    // See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=103687\n+    std::string t_fmt = nl_langinfo(T_FMT);\n+    setlocale(LC_TIME, orig.c_str());\n+    return t_fmt.find(\"%p\") != std::string::npos;\n+  }\n+#endif\n+  return false;\n+}\n+\n int main()\n {\n   test02();"}]}