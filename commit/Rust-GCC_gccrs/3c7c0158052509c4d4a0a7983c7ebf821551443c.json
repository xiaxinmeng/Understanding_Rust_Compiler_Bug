{"sha": "3c7c0158052509c4d4a0a7983c7ebf821551443c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M3YzAxNTgwNTI1MDljNGQ0YTBhNzk4M2M3ZWJmODIxNTUxNDQzYw==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2010-01-14T08:37:26Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-01-14T08:37:26Z"}, "message": "re PR tree-optimization/42681 (ICE: in build2_stat, at tree.c:3664 with \"-O1 -fgraphite-identity\")\n\nFix PR42681.\n\n2010-01-14  Sebastian Pop  <sebastian.pop@amd.com>\n\n\tPR middle-end/42681\n\t* graphite-clast-to-gimple.c (gloog_error): New static variable.\n\t(clast_to_gcc_expression): Do not build MULT_EXPR of POINTER_TYPE_P.\n\tSet gloog_error when such an expression failed to be built.\n\t(translate_clast): Early return when gloog_error is set.\n\t(gloog): Clear gloog_error.  When gloog_error is set, call\n\tset_ifsese_condition to enable the original code.  Return the status\n\tof the code generation based on gloog_error.\n\t* sese.c (set_ifsese_condition): New.\n\t* sese.h (set_ifsese_condition): Declared.\n\n\t* testsuite/g++.dg/graphite/pr42681.C: New.\n\nFrom-SVN: r155884", "tree": {"sha": "1517ca48e72c65b525def1df518d9d44a6853228", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1517ca48e72c65b525def1df518d9d44a6853228"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c7c0158052509c4d4a0a7983c7ebf821551443c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c7c0158052509c4d4a0a7983c7ebf821551443c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c7c0158052509c4d4a0a7983c7ebf821551443c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c7c0158052509c4d4a0a7983c7ebf821551443c/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd481d83ed240ebbdb706c3e3f3358f46662d4b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd481d83ed240ebbdb706c3e3f3358f46662d4b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd481d83ed240ebbdb706c3e3f3358f46662d4b8"}], "stats": {"total": 79, "additions": 76, "deletions": 3}, "files": [{"sha": "c2bb01e07bd754295d4bf1d8e56309dc2123ade4", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7c0158052509c4d4a0a7983c7ebf821551443c/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7c0158052509c4d4a0a7983c7ebf821551443c/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=3c7c0158052509c4d4a0a7983c7ebf821551443c", "patch": "@@ -1,3 +1,18 @@\n+2010-01-14  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\tPR middle-end/42681\n+\t* graphite-clast-to-gimple.c (gloog_error): New static variable.\n+\t(clast_to_gcc_expression): Do not build MULT_EXPR of POINTER_TYPE_P.\n+\tSet gloog_error when such an expression failed to be built.\n+\t(translate_clast): Early return when gloog_error is set.\n+\t(gloog): Clear gloog_error.  When gloog_error is set, call\n+\tset_ifsese_condition to enable the original code.  Return the status\n+\tof the code generation based on gloog_error.\n+\t* sese.c (set_ifsese_condition): New.\n+\t* sese.h (set_ifsese_condition): Declared.\n+\n+\t* testsuite/g++.dg/graphite/pr42681.C: New.\n+\n 2010-01-14  Sebastian Pop  <sebastian.pop@amd.com>\n \n \tPR middle-end/42732"}, {"sha": "6651e95b48ffb8c7315badb1f8a019279a65c3e2", "filename": "gcc/graphite-clast-to-gimple.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7c0158052509c4d4a0a7983c7ebf821551443c/gcc%2Fgraphite-clast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7c0158052509c4d4a0a7983c7ebf821551443c/gcc%2Fgraphite-clast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-clast-to-gimple.c?ref=3c7c0158052509c4d4a0a7983c7ebf821551443c", "patch": "@@ -52,6 +52,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"graphite-clast-to-gimple.h\"\n #include \"graphite-dependences.h\"\n \n+/* This flag is set when an error occurred during the translation of\n+   CLAST to Gimple.  */\n+static bool gloog_error;\n+\n /* Verifies properties that GRAPHITE should maintain during translation.  */\n \n static inline void\n@@ -294,7 +298,11 @@ clast_to_gcc_expression (tree type, struct clast_expr *e,\n \t\t\t\t\t       newivs_index, params_index);\n \t\ttree cst = gmp_cst_to_tree (type, t->val);\n \t\tname = fold_convert (type, name);\n-\t\treturn fold_build2 (MULT_EXPR, type, cst, name);\n+\t\tif (!POINTER_TYPE_P (type))\n+\t\t  return fold_build2 (MULT_EXPR, type, cst, name);\n+\n+\t\tgloog_error = true;\n+\t\treturn cst;\n \t      }\n \t  }\n \telse\n@@ -944,7 +952,7 @@ translate_clast (sese region, loop_p context_loop, struct clast_stmt *stmt,\n \t\t htab_t newivs_index, htab_t bb_pbb_mapping, int level,\n \t\t htab_t params_index)\n {\n-  if (!stmt)\n+  if (!stmt || gloog_error)\n     return next_e;\n \n   if (CLAST_STMT_IS_A (stmt, stmt_root))\n@@ -1431,6 +1439,7 @@ gloog (scop_p scop, htab_t bb_pbb_mapping)\n   cloog_prog_clast pc;\n \n   timevar_push (TV_GRAPHITE_CODE_GEN);\n+  gloog_error = false;\n \n   pc = scop_to_clast (scop);\n \n@@ -1476,6 +1485,9 @@ gloog (scop_p scop, htab_t bb_pbb_mapping)\n   recompute_all_dominators ();\n   graphite_verify ();\n \n+  if (gloog_error)\n+    set_ifsese_condition (if_region, integer_zero_node);\n+\n   free (if_region->true_region);\n   free (if_region->region);\n   free (if_region);\n@@ -1502,7 +1514,7 @@ gloog (scop_p scop, htab_t bb_pbb_mapping)\n \t       num_no_dependency);\n     }\n \n-  return true;\n+  return !gloog_error;\n }\n \n #endif"}, {"sha": "f959bdb269e21d75d45d539e3a133d7bffc1bd02", "filename": "gcc/sese.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7c0158052509c4d4a0a7983c7ebf821551443c/gcc%2Fsese.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7c0158052509c4d4a0a7983c7ebf821551443c/gcc%2Fsese.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.c?ref=3c7c0158052509c4d4a0a7983c7ebf821551443c", "patch": "@@ -1558,6 +1558,34 @@ move_sese_in_condition (sese region)\n   return if_region;\n }\n \n+/* Replaces the condition of the IF_REGION with CONDITION:\n+   | if (CONDITION)\n+   |   true_region;\n+   | else\n+   |   false_region;\n+*/\n+\n+void\n+set_ifsese_condition (ifsese if_region, tree condition)\n+{\n+  sese region = if_region->region;\n+  edge entry = region->entry;\n+  basic_block bb = entry->dest;\n+  gimple last = last_stmt (bb);\n+  gimple_stmt_iterator gsi = gsi_last_bb (bb);\n+  gimple cond_stmt;\n+\n+  gcc_assert (gimple_code (last) == GIMPLE_COND);\n+\n+  gsi_remove (&gsi, true);\n+  gsi = gsi_last_bb (bb);\n+  condition = force_gimple_operand_gsi (&gsi, condition, true, NULL,\n+\t\t\t\t\tfalse, GSI_NEW_STMT);\n+  cond_stmt = gimple_build_cond_from_tree (condition, NULL_TREE, NULL_TREE);\n+  gsi = gsi_last_bb (bb);\n+  gsi_insert_after (&gsi, cond_stmt, GSI_NEW_STMT);\n+}\n+\n /* Returns the scalar evolution of T in REGION.  Every variable that\n    is not defined in the REGION is considered a parameter.  */\n "}, {"sha": "a54854a7610bd077d40eed14730a138ac272a62f", "filename": "gcc/sese.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7c0158052509c4d4a0a7983c7ebf821551443c/gcc%2Fsese.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7c0158052509c4d4a0a7983c7ebf821551443c/gcc%2Fsese.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.h?ref=3c7c0158052509c4d4a0a7983c7ebf821551443c", "patch": "@@ -229,6 +229,7 @@ extern ifsese create_if_region_on_edge (edge, tree);\n extern ifsese move_sese_in_condition (sese);\n extern edge get_true_edge_from_guard_bb (basic_block);\n extern edge get_false_edge_from_guard_bb (basic_block);\n+extern void set_ifsese_condition (ifsese, tree);\n \n static inline edge\n if_region_entry (ifsese if_region)"}, {"sha": "4593e1be416e495aebef947be8d2420699f32302", "filename": "gcc/testsuite/g++.dg/graphite/pr42681.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7c0158052509c4d4a0a7983c7ebf821551443c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgraphite%2Fpr42681.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7c0158052509c4d4a0a7983c7ebf821551443c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgraphite%2Fpr42681.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgraphite%2Fpr42681.C?ref=3c7c0158052509c4d4a0a7983c7ebf821551443c", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-options \"-O1 -fgraphite-identity -fno-loop-block -fno-loop-interchange -fno-loop-strip-mine\" } */\n+\n+typedef long unsigned int size_t;\n+inline void* operator new(size_t, void* __p) throw() { return __p; }\n+\n+struct A {\n+  int i, j;\n+  A() : i(0) {}\n+};\n+\n+void Init(A *a)\n+{\n+  for (int i = 0; i < 20; i++) {\n+    new (&a[i]) A;\n+    a[i].j = 0;\n+  }\n+}"}]}