{"sha": "fb52b50a920a7571af3de43d679fa42483c56a96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI1MmI1MGE5MjBhNzU3MWFmM2RlNDNkNjc5ZmE0MjQ4M2M1NmE5Ng==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-11-18T16:24:56Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-11-18T16:24:56Z"}, "message": "re PR c/33193 (slopiness in __real/__imag)\n\ngcc/\n\tPR c/33193\n\t* c-typeck.c (build_unary_op): Call build_real_imag_expr for\n\tREALPART_EXPR and IMAGPART_EXPR.\n\ngcc/c-family/\n\tPR c/33193\n\t* c-common.h (build_real_imag_expr): Declare.\n\t* c-semantics.c (build_real_imag_expr): Define.\n\ngcc/cp/\n\tPR c/33193\n\t* typeck.c (cp_build_unary_op): Call build_real_imag_expr for\n\tREALPART_EXPR and IMAGPART_EXPR.\n\ngcc/testsuite/\n\tPR c/33193\n\t* c-c++-common/pr33193.c: New test.\n\nFrom-SVN: r166909", "tree": {"sha": "45ef94c714a23d36859dc3c9c965f946052c1cbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45ef94c714a23d36859dc3c9c965f946052c1cbc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb52b50a920a7571af3de43d679fa42483c56a96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb52b50a920a7571af3de43d679fa42483c56a96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb52b50a920a7571af3de43d679fa42483c56a96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb52b50a920a7571af3de43d679fa42483c56a96/comments", "author": null, "committer": null, "parents": [{"sha": "cfaa55890b6f9fb5fde5c84fc51326427dc48259", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfaa55890b6f9fb5fde5c84fc51326427dc48259", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfaa55890b6f9fb5fde5c84fc51326427dc48259"}], "stats": {"total": 119, "additions": 82, "deletions": 37}, "files": [{"sha": "53750914b661e7a8ca0e69e6c127ab2da3e1686b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb52b50a920a7571af3de43d679fa42483c56a96/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb52b50a920a7571af3de43d679fa42483c56a96/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fb52b50a920a7571af3de43d679fa42483c56a96", "patch": "@@ -1,3 +1,9 @@\n+2010-11-18  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\tPR c/33193\n+\t* c-typeck.c (build_unary_op): Call build_real_imag_expr for\n+\tREALPART_EXPR and IMAGPART_EXPR.\n+\n 2010-11-18  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/46172"}, {"sha": "86fbd1335106e49e6024a9796438437158ebbc05", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb52b50a920a7571af3de43d679fa42483c56a96/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb52b50a920a7571af3de43d679fa42483c56a96/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=fb52b50a920a7571af3de43d679fa42483c56a96", "patch": "@@ -1,3 +1,9 @@\n+2010-11-18  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\tPR c/33193\n+\t* c-common.h (build_real_imag_expr): Declare.\n+\t* c-semantics.c (build_real_imag_expr): Define.\n+\n 2010-11-17  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-opts.c (c_common_parse_file): Take no arguments."}, {"sha": "3de32cf6ddaa5f182edfc0c07ac70d2be0d958dd", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb52b50a920a7571af3de43d679fa42483c56a96/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb52b50a920a7571af3de43d679fa42483c56a96/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=fb52b50a920a7571af3de43d679fa42483c56a96", "patch": "@@ -822,6 +822,7 @@ extern void warn_for_omitted_condop (location_t, tree);\n extern tree do_case (location_t, tree, tree);\n extern tree build_stmt (location_t, enum tree_code, ...);\n extern tree build_case_label (location_t, tree, tree, tree);\n+extern tree build_real_imag_expr (location_t, enum tree_code, tree);\n \n /* These functions must be defined by each front-end which implements\n    a variant of the C language.  They are used in c-common.c.  */"}, {"sha": "d26d8718021b96e1ebf08800113b5833d54011da", "filename": "gcc/c-family/c-semantics.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb52b50a920a7571af3de43d679fa42483c56a96/gcc%2Fc-family%2Fc-semantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb52b50a920a7571af3de43d679fa42483c56a96/gcc%2Fc-family%2Fc-semantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-semantics.c?ref=fb52b50a920a7571af3de43d679fa42483c56a96", "patch": "@@ -140,3 +140,35 @@ build_case_label (location_t loc,\n {\n   return build_stmt (loc, CASE_LABEL_EXPR, low_value, high_value, label_decl);\n }\n+\n+/* Build a REALPART_EXPR or IMAGPART_EXPR, according to CODE, from ARG.  */\n+\n+tree\n+build_real_imag_expr (location_t location, enum tree_code code, tree arg)\n+{\n+  tree ret;\n+  tree arg_type = TREE_TYPE (arg);\n+\n+  gcc_assert (code == REALPART_EXPR || code == IMAGPART_EXPR);\n+\n+  if (TREE_CODE (arg_type) == COMPLEX_TYPE)\n+    {\n+      ret = build1 (code, TREE_TYPE (TREE_TYPE (arg)), arg);\n+      SET_EXPR_LOCATION (ret, location);\n+    }\n+  else if (INTEGRAL_TYPE_P (arg_type) || SCALAR_FLOAT_TYPE_P (arg_type))\n+    {\n+      ret = (code == REALPART_EXPR\n+\t     ? arg\n+\t     : omit_one_operand_loc (location, arg_type,\n+\t\t\t\t     integer_zero_node, arg));\n+    }\n+  else\n+    {\n+      error_at (location, \"wrong type argument to %s\",\n+\t\tcode == REALPART_EXPR ? \"__real\" : \"__imag\");\n+      ret = error_mark_node;\n+    }\n+\n+  return ret;\n+}"}, {"sha": "9aca720fd71a38965276cfcde6577620d799e9f4", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb52b50a920a7571af3de43d679fa42483c56a96/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb52b50a920a7571af3de43d679fa42483c56a96/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=fb52b50a920a7571af3de43d679fa42483c56a96", "patch": "@@ -3561,26 +3561,10 @@ build_unary_op (location_t location,\n       goto return_build_unary_op;\n \n     case REALPART_EXPR:\n-      if (TREE_CODE (arg) == COMPLEX_CST)\n-\tret = TREE_REALPART (arg);\n-      else if (TREE_CODE (TREE_TYPE (arg)) == COMPLEX_TYPE)\n-\tret = fold_build1_loc (location,\n-\t\t\t       REALPART_EXPR, TREE_TYPE (TREE_TYPE (arg)), arg);\n-      else\n-\tret = arg;\n-      if (eptype && TREE_CODE (eptype) == COMPLEX_TYPE)\n-\teptype = TREE_TYPE (eptype);\n-      goto return_build_unary_op;\n-\n     case IMAGPART_EXPR:\n-      if (TREE_CODE (arg) == COMPLEX_CST)\n-\tret = TREE_IMAGPART (arg);\n-      else if (TREE_CODE (TREE_TYPE (arg)) == COMPLEX_TYPE)\n-\tret = fold_build1_loc (location,\n-\t\t\t       IMAGPART_EXPR, TREE_TYPE (TREE_TYPE (arg)), arg);\n-      else\n-\tret = omit_one_operand_loc (location, TREE_TYPE (arg),\n-\t\t\t\tinteger_zero_node, arg);\n+      ret = build_real_imag_expr (location, code, arg);\n+      if (ret == error_mark_node)\n+\treturn error_mark_node;\n       if (eptype && TREE_CODE (eptype) == COMPLEX_TYPE)\n \teptype = TREE_TYPE (eptype);\n       goto return_build_unary_op;"}, {"sha": "6f9bb075f288394dc81cde483b2f5064a474505b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb52b50a920a7571af3de43d679fa42483c56a96/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb52b50a920a7571af3de43d679fa42483c56a96/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fb52b50a920a7571af3de43d679fa42483c56a96", "patch": "@@ -1,3 +1,9 @@\n+2010-11-18  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\tPR c/33193\n+\t* typeck.c (cp_build_unary_op): Call build_real_imag_expr for\n+\tREALPART_EXPR and IMAGPART_EXPR.\n+\n 2010-11-16  Jason Merrill  <jason@redhat.com>\n \n \t* call.c (convert_like_real): Don't make a temp for copy-list-init."}, {"sha": "df31d875dca0a149ebc64fb38dbac3627effea28", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb52b50a920a7571af3de43d679fa42483c56a96/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb52b50a920a7571af3de43d679fa42483c56a96/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=fb52b50a920a7571af3de43d679fa42483c56a96", "patch": "@@ -5098,26 +5098,12 @@ cp_build_unary_op (enum tree_code code, tree xarg, int noconvert,\n       break;\n \n     case REALPART_EXPR:\n-      if (TREE_CODE (arg) == COMPLEX_CST)\n-\treturn TREE_REALPART (arg);\n-      else if (TREE_CODE (TREE_TYPE (arg)) == COMPLEX_TYPE)\n-\t{\n-\t  arg = build1 (REALPART_EXPR, TREE_TYPE (TREE_TYPE (arg)), arg);\n-\t  return fold_if_not_in_template (arg);\n-\t}\n-      else\n-\treturn arg;\n-\n     case IMAGPART_EXPR:\n-      if (TREE_CODE (arg) == COMPLEX_CST)\n-\treturn TREE_IMAGPART (arg);\n-      else if (TREE_CODE (TREE_TYPE (arg)) == COMPLEX_TYPE)\n-\t{\n-\t  arg = build1 (IMAGPART_EXPR, TREE_TYPE (TREE_TYPE (arg)), arg);\n-\t  return fold_if_not_in_template (arg);\n-\t}\n+      arg = build_real_imag_expr (input_location, code, arg);\n+      if (arg == error_mark_node)\n+\treturn arg;\n       else\n-\treturn cp_convert (TREE_TYPE (arg), integer_zero_node);\n+\treturn fold_if_not_in_template (arg);\n \n     case PREINCREMENT_EXPR:\n     case POSTINCREMENT_EXPR:"}, {"sha": "a5b14f964a37bb41fc4ee69e8a239a7b9aae60b5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb52b50a920a7571af3de43d679fa42483c56a96/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb52b50a920a7571af3de43d679fa42483c56a96/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fb52b50a920a7571af3de43d679fa42483c56a96", "patch": "@@ -1,3 +1,8 @@\n+2010-11-18  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\tPR c/33193\n+\t* c-c++-common/pr33193.c: New test.\n+\n 2010-11-18  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/46172"}, {"sha": "2d1929848f881c757889a73fbf5794fb5acbb35e", "filename": "gcc/testsuite/c-c++-common/pr33193.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb52b50a920a7571af3de43d679fa42483c56a96/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr33193.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb52b50a920a7571af3de43d679fa42483c56a96/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr33193.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr33193.c?ref=fb52b50a920a7571af3de43d679fa42483c56a96", "patch": "@@ -0,0 +1,19 @@\n+/* PR c/33193 */\n+/* { dg-do compile } */\n+\n+struct a {float x, y; };\n+\n+float f(struct a b)\n+{\n+  /* The error messages here are different between C and C++, so just\n+     make sure we get an error.  */\n+  float x = __real b;\t\t/* { dg-error \"\" } */\n+  float y = __imag b;\t\t/* { dg-error \"\" } */\n+  return x / y;\n+}\n+int f1(int *b)\n+{\n+  float x = __imag b;\t\t/* { dg-error \"wrong type argument\" } */\n+  float y = __real b;\t\t/* { dg-error \"wrong type argument\" } */\n+  return x - y;\n+}"}]}