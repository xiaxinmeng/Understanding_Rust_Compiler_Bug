{"sha": "a0ee8b5f99e1d646105e0f916ae443f1c512b454", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBlZThiNWY5OWUxZDY0NjEwNWUwZjkxNmFlNDQzZjFjNTEyYjQ1NA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2005-01-14T04:17:13Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2005-01-14T04:17:13Z"}, "message": "simplify-rtx.c (simplify_binary_operation): Optimize (and (sign_extend X) C) into (zero_extend (and X C)).\n\n\n\t* simplify-rtx.c (simplify_binary_operation) <AND>: Optimize\n\t(and (sign_extend X) C) into (zero_extend (and X C)).\n\nFrom-SVN: r93629", "tree": {"sha": "219dd8772e524e69adedf45921c3ce4d94414a50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/219dd8772e524e69adedf45921c3ce4d94414a50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0ee8b5f99e1d646105e0f916ae443f1c512b454", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0ee8b5f99e1d646105e0f916ae443f1c512b454", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0ee8b5f99e1d646105e0f916ae443f1c512b454", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0ee8b5f99e1d646105e0f916ae443f1c512b454/comments", "author": null, "committer": null, "parents": [{"sha": "9201889788a05b22a915f91eb06e6bd9ac0f8f4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9201889788a05b22a915f91eb06e6bd9ac0f8f4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9201889788a05b22a915f91eb06e6bd9ac0f8f4b"}], "stats": {"total": 25, "additions": 23, "deletions": 2}, "files": [{"sha": "d14831920a070b23f4c9bc290d8950e870a8117c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0ee8b5f99e1d646105e0f916ae443f1c512b454/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0ee8b5f99e1d646105e0f916ae443f1c512b454/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a0ee8b5f99e1d646105e0f916ae443f1c512b454", "patch": "@@ -1,8 +1,12 @@\n+2005-01-13  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* simplify-rtx.c (simplify_binary_operation) <AND>: Optimize\n+\t(and (sign_extend X) C) into (zero_extend (and X C)).\n+\n 2005-01-13  David O'Brien  <obrien@FreeBSD.org>\n \n \t* config/freebsd-spec.h:  Make KSE pthread lib logic the default.\n \n-\n 2005-01-13  Richard Henderson  <rth@redhat.com>\n \n \tPR target/19009"}, {"sha": "91df355b9ac7bb4959f789bbb5e2e5940cb48323", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0ee8b5f99e1d646105e0f916ae443f1c512b454/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0ee8b5f99e1d646105e0f916ae443f1c512b454/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=a0ee8b5f99e1d646105e0f916ae443f1c512b454", "patch": "@@ -1,6 +1,6 @@\n /* RTL simplification functions for GNU compiler.\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -1910,6 +1910,23 @@ simplify_binary_operation (enum rtx_code code, enum machine_mode mode,\n \t      && ! side_effects_p (op0)\n \t      && GET_MODE_CLASS (mode) != MODE_CC)\n \t    return const0_rtx;\n+\n+\t  /* Transform (and (extend X) C) into (zero_extend (and X C)) if\n+\t     there are no non-zero bits of C outside of X's mode.  */\n+\t  if ((GET_CODE (op0) == SIGN_EXTEND\n+\t       || GET_CODE (op0) == ZERO_EXTEND)\n+\t      && GET_CODE (trueop1) == CONST_INT\n+\t      && GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_WIDE_INT\n+\t      && (~GET_MODE_MASK (GET_MODE (XEXP (op0, 0)))\n+\t\t  & INTVAL (trueop1)) == 0)\n+\t    {\n+\t      enum machine_mode imode = GET_MODE (XEXP (op0, 0));\n+\t      tem = simplify_gen_binary (AND, imode, XEXP (op0, 0),\n+\t\t\t\t\t gen_int_mode (INTVAL (trueop1),\n+\t\t\t\t\t\t       imode));\n+\t      return simplify_gen_unary (ZERO_EXTEND, mode, tem, imode);\n+\t    }\n+\n \t  /* For constants M and N, if M == (1LL << cst) - 1 && (N & M) == M,\n \t     ((A & N) + B) & M -> (A + B) & M\n \t     Similarly if (N & M) == 0,"}]}