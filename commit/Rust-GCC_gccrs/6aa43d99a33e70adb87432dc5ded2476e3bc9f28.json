{"sha": "6aa43d99a33e70adb87432dc5ded2476e3bc9f28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFhNDNkOTlhMzNlNzBhZGI4NzQzMmRjNWRlZDI0NzZlM2JjOWYyOA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-12-16T19:02:01Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-12-16T19:02:01Z"}, "message": "configure.in (GLIBCPP_ENABLE_DEBUG): Default to none.\n\n\n2002-12-16  Benjamin Kosnik  <bkoz@redhat.com>\n\n        * configure.in (GLIBCPP_ENABLE_DEBUG): Default to none.\n\tCall GLIBCPP_ENABLE_DEBUG_FLAGS.\n        * acinclude.m4 (GLIBCPP_ENABLE_DEBUG): GLIBCPP_BUILD_DEBUG, new\n        conditional if --enable-debug is yes. Rework.\n\t(GLIBCPP_ENABLE_DEBUG_FLAGS): New.\n        * aclocal.m4: Regenerate.\n\t* libio/Makefile.am: Remove DEBUG_FLAGS.\n\t* libio/Makefile.in: Regenerate.\n\t* libsupc++/Makefile.am: Remove DEBUG_FLAGS.\n\t* libsupc++/Makefile.in: Regenerate.\n\t* docs/html/configopts.html: Add docs for --enable-debug,\n\t--enable-debug-flags.\n\n2002-12-16  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tCorrect dependency tracking, build warts.\n\t* configure.in: Correct repeated AC_OUTPUT thrashing by\n\tconfig-ml.in\n\t* configure: Regenerate.\n\t* include/Makefile.am (stamp-target): Stamp in top_builddir.\n\t* include/Makefile.in: Regenerate.\n\t* src/Makefile.am (codecvt_members.cc): New rule.\n\t(collate_members.cc): Same.\n\t(ctype_members.cc): Same.\n\t(messages_members.cc): Same.\n\t(monetary_members.cc): Same.\n\t(numeric_members.cc): Same.\n\t(time_members.cc): Same.\n\t(c++locale.cc): Same.\n\t(basic_file.cc): Same.\n\t* src/Makefile.in: Regenerate.\n\t* acinclude.m4 (CCTYPE_CHAR_CC): Remove.\n\t(CCCODECVT_CC): Don't link, AC_SUBST.\n\t(CCOLLATE_CC): Same.\n\t(CCTYPE_CC): Same.\n\t(CMESSAGES_CC): Same.\n\t(CMONEY_CC): Same.\n\t(CNUMERIC_CC): Same.\n\t(CTIME_CC): Same.\n\t(CLOCALE_CC): Same.\n\t* aclocal.m4: Regenerate.\n\n\t* src/Makefile.am (libstdc___la_LIBADD): Use top_builddir\n\tfor convenience libraries.\n\t(version_arg): Rename linker.map to libstdc++.ver.\n\t(libstdc___la_DEPENDENCIES): Remove linker.map, add\n\tlibstdc++-symbol.ver as a dependency.\n\t(libstdc++-symbol.ver): Add rule.\n\t* acinclude.m4 (GLIBCPP_ENABLE_SYMVERS): Change LINKER_MAP to\n\tSYMVER_MAP. Don't link, AC_SUBST.\n\n\t* include/Makefile.am (target_headers_noinst): New.\n\t(stamp-target): Add CLOCALE_INTERNAL_H.\n\t* acinclude.m4 (GLIBCPP_ENABLE_CLOCALE): Don't link\n\tCLOCALE_INTERNAL_H, AC_SUBST.\n\t* config/locale/gnu/c_locale.cc: Modify c++locale_internal.h\n\tinclude.\n\t* config/locale/gnu/time_members.cc: Same.\n\t* config/locale/gnu/numeric_members.cc: Same.\n\t* config/locale/gnu/monetary_members.cc: Same.\n\t* config/locale/gnu/messages_members.cc: Same.\n\t* config/locale/gnu/ctype_members.cc: Same.\n\t* config/locale/gnu/collate_members.cc: Same.\n\t* config/locale/gnu/codecvt_members.cc: Same.\n\t* config/locale/generic/codecvt_members.cc: Remove.\n\nFrom-SVN: r60177", "tree": {"sha": "68133b7c813ac016c27e0c966c7e8057f49ca7cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68133b7c813ac016c27e0c966c7e8057f49ca7cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6aa43d99a33e70adb87432dc5ded2476e3bc9f28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aa43d99a33e70adb87432dc5ded2476e3bc9f28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6aa43d99a33e70adb87432dc5ded2476e3bc9f28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/comments", "author": null, "committer": null, "parents": [{"sha": "27eaa708737ec9943b7b919433018d56c7c9f68a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27eaa708737ec9943b7b919433018d56c7c9f68a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27eaa708737ec9943b7b919433018d56c7c9f68a"}], "stats": {"total": 3716, "additions": 2102, "deletions": 1614}, "files": [{"sha": "356a5808bf8978a8bee198b728d64e1383e53f89", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6aa43d99a33e70adb87432dc5ded2476e3bc9f28", "patch": "@@ -1,3 +1,71 @@\n+2002-12-16  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+        * configure.in (GLIBCPP_ENABLE_DEBUG): Default to none.\n+\tCall GLIBCPP_ENABLE_DEBUG_FLAGS.\n+        * acinclude.m4 (GLIBCPP_ENABLE_DEBUG): GLIBCPP_BUILD_DEBUG, new\n+        conditional if --enable-debug is yes. Rework.\n+\t(GLIBCPP_ENABLE_DEBUG_FLAGS): New.\n+        * aclocal.m4: Regenerate.\n+\t* libio/Makefile.am: Remove DEBUG_FLAGS.\n+\t* libio/Makefile.in: Regenerate.\t\n+\t* libsupc++/Makefile.am: Remove DEBUG_FLAGS.\n+\t* libsupc++/Makefile.in: Regenerate.\t\n+\t* docs/html/configopts.html: Add docs for --enable-debug,\n+\t--enable-debug-flags.\n+\n+2002-12-16  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tCorrect dependency tracking, build warts.\n+\t* configure.in: Correct repeated AC_OUTPUT thrashing by\n+\tconfig-ml.in\n+\t* configure: Regenerate.\n+\t* include/Makefile.am (stamp-target): Stamp in top_builddir.\n+\t* include/Makefile.in: Regenerate.\n+\t* src/Makefile.am (codecvt_members.cc): New rule.\n+\t(collate_members.cc): Same.\n+\t(ctype_members.cc): Same.\t\n+\t(messages_members.cc): Same.\n+\t(monetary_members.cc): Same.\n+\t(numeric_members.cc): Same.\n+\t(time_members.cc): Same.\n+\t(c++locale.cc): Same.\n+\t(basic_file.cc): Same.\n+\t* src/Makefile.in: Regenerate.\n+\t* acinclude.m4 (CCTYPE_CHAR_CC): Remove.\n+\t(CCCODECVT_CC): Don't link, AC_SUBST.\n+\t(CCOLLATE_CC): Same.\n+\t(CCTYPE_CC): Same.\n+\t(CMESSAGES_CC): Same.\n+\t(CMONEY_CC): Same.\n+\t(CNUMERIC_CC): Same.\n+\t(CTIME_CC): Same.\n+\t(CLOCALE_CC): Same.\n+\t* aclocal.m4: Regenerate.\n+\t\n+\t* src/Makefile.am (libstdc___la_LIBADD): Use top_builddir\n+\tfor convenience libraries.\n+\t(version_arg): Rename linker.map to libstdc++.ver.\n+\t(libstdc___la_DEPENDENCIES): Remove linker.map, add\n+\tlibstdc++-symbol.ver as a dependency.\n+\t(libstdc++-symbol.ver): Add rule.\n+\t* acinclude.m4 (GLIBCPP_ENABLE_SYMVERS): Change LINKER_MAP to\n+\tSYMVER_MAP. Don't link, AC_SUBST.\n+\n+\t* include/Makefile.am (target_headers_noinst): New.\n+\t(stamp-target): Add CLOCALE_INTERNAL_H.\n+\t* acinclude.m4 (GLIBCPP_ENABLE_CLOCALE): Don't link\n+\tCLOCALE_INTERNAL_H, AC_SUBST.\n+\t* config/locale/gnu/c_locale.cc: Modify c++locale_internal.h\n+\tinclude.\n+\t* config/locale/gnu/time_members.cc: Same.\n+\t* config/locale/gnu/numeric_members.cc: Same.\n+\t* config/locale/gnu/monetary_members.cc: Same.\n+\t* config/locale/gnu/messages_members.cc: Same.\n+\t* config/locale/gnu/ctype_members.cc: Same.\n+\t* config/locale/gnu/collate_members.cc: Same.\n+\t* config/locale/gnu/codecvt_members.cc: Same.\n+\t* config/locale/generic/codecvt_members.cc: Remove.\n+\n 2002-12-11  Paolo Carlini  <pcarlini@unitus.it>\n \n \tPR libstdc++/8887"}, {"sha": "55845553da1b7667bfe885b98209528e88367693", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=6aa43d99a33e70adb87432dc5ded2476e3bc9f28", "patch": "@@ -67,14 +67,24 @@ AR = @AR@\n AS = @AS@\n ATOMICITY_INC_SRCDIR = @ATOMICITY_INC_SRCDIR@\n AWK = @AWK@\n+BASIC_FILE_CC = @BASIC_FILE_CC@\n BASIC_FILE_H = @BASIC_FILE_H@\n CC = @CC@\n CCODECVT_C = @CCODECVT_C@\n+CCODECVT_CC = @CCODECVT_CC@\n CCODECVT_H = @CCODECVT_H@\n+CCOLLATE_CC = @CCOLLATE_CC@\n+CCTYPE_CC = @CCTYPE_CC@\n+CLOCALE_CC = @CLOCALE_CC@\n CLOCALE_H = @CLOCALE_H@\n+CLOCALE_INTERNAL_H = @CLOCALE_INTERNAL_H@\n+CMESSAGES_CC = @CMESSAGES_CC@\n CMESSAGES_H = @CMESSAGES_H@\n+CMONEY_CC = @CMONEY_CC@\n+CNUMERIC_CC = @CNUMERIC_CC@\n CPP = @CPP@\n CSTDIO_H = @CSTDIO_H@\n+CTIME_CC = @CTIME_CC@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@\n@@ -106,6 +116,7 @@ RANLIB = @RANLIB@\n SECTION_FLAGS = @SECTION_FLAGS@\n SECTION_LDFLAGS = @SECTION_LDFLAGS@\n STRIP = @STRIP@\n+SYMVER_MAP = @SYMVER_MAP@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n USE_NLS = @USE_NLS@\n VERSION = @VERSION@"}, {"sha": "92554552da2afeaaa862febef35bab280291a9b1", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 83, "deletions": 43, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=6aa43d99a33e70adb87432dc5ded2476e3bc9f28", "patch": "@@ -267,8 +267,7 @@ AC_DEFUN(GLIBCPP_CHECK_COMPILER_FEATURES, [\n     # this is the suspicious part\n     CXXFLAGS=''\n   fi\n-  if test x\"$ac_fdsections\" = x\"yes\" &&\n-     test x\"$enable_debug\" = x\"no\"; then\n+  if test x\"$ac_fdsections\" = x\"yes\"; then\n     SECTION_FLAGS='-ffunction-sections -fdata-sections'\n   fi\n   AC_MSG_RESULT($ac_fdsections)\n@@ -361,7 +360,7 @@ AC_DEFUN(GLIBCPP_CHECK_LINKER_FEATURES, [\n   fi\n \n   # Set linker optimization flags.\n-  if test x\"$with_gnu_ld\" = x\"yes\" && test x\"$enable_debug\" = x\"no\"; then\n+  if test x\"$with_gnu_ld\" = x\"yes\"; then\n     OPT_LDFLAGS=\"-Wl,-O1 $OPT_LDFLAGS\"\n   fi\n \n@@ -911,7 +910,11 @@ AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n     AC_CHECK_FUNCS([__signbitl], , [LIBMATHOBJS=\"$LIBMATHOBJS signbitl.lo\"])\n   fi\n \n+  if test -n \"$LIBMATHOBJS\"; then\n+    need_libmath=yes\n+  fi\n   AC_SUBST(LIBMATHOBJS)\n+  AM_CONDITIONAL(GLIBCPP_BUILD_LIBMATH,  test \"$need_libmath\" = yes)\n ])\n \n \n@@ -1043,14 +1046,20 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n \n \n dnl\n-dnl Check for special debugging mode; not for production use.\n+dnl Check to see if debugging libraries are to be built.\n dnl\n dnl GLIBCPP_ENABLE_DEBUG\n-dnl --enable-debug sets '-ggdb3 -O0'.\n-dnl --disable-debug sets '-g' and whatever optimization options the\n-dnl     compiler can handle.\n-dnl  +  --enable-maintainer-mode automatically defaults this to on.\n-dnl  +  Perhaps -D/-U of NDEBUG, DEBUG, DEBUG_ASSERT, ...?\n+dnl\n+dnl --enable-debug \n+dnl builds a separate set of debugging libraries in addition to the\n+dnl normal (shared, static) libstdc++ binaries.\n+dnl\n+dnl --disable-debug \n+dnl builds only one (non-debug) version of libstdc++.\n+dnl\n+dnl --enable-debug-flags=FLAGS\n+dnl iff --enable-debug == yes, then use FLAGS to build the debug library.\n+dnl\n dnl  +  Usage:  GLIBCPP_ENABLE_DEBUG[(DEFAULT)]\n dnl       Where DEFAULT is either `yes' or `no'.  If ommitted, it\n dnl       defaults to `no'.\n@@ -1066,17 +1075,56 @@ changequote([, ])dnl\n  *)   AC_MSG_ERROR([Unknown argument to enable/disable extra debugging]) ;;\n  esac],\n enable_debug=GLIBCPP_ENABLE_DEBUG_DEFAULT)dnl\n+AC_MSG_CHECKING([for additional debug build])\n+AC_MSG_RESULT($enable_debug)\n+AM_CONDITIONAL(GLIBCPP_BUILD_DEBUG, test \"$enable_debug\" = yes)\t\n+])\n+\n+\n+dnl Check for explicit debug flags.\n+dnl\n+dnl GLIBCPP_ENABLE_DEBUG_FLAGS\n+dnl\n+dnl --enable-debug-flags='-O1' \n+dnl is a general method for passing flags to be used when \n+dnl building debug libraries with --enable-debug.\n+dnl\n+dnl --disable-debug-flags does nothing.\n+dnl  +  Usage:  GLIBCPP_ENABLE_DEBUG_FLAGS(default flags)\n+dnl       If \"default flags\" is an empty string (or \"none\"), the effect is\n+dnl       the same as --disable or --enable=no.\n+AC_DEFUN(GLIBCPP_ENABLE_DEBUG_FLAGS, [dnl\n+define([GLIBCPP_ENABLE_DEBUG_FLAGS_DEFAULT], ifelse($1,,, $1))dnl\n+AC_ARG_ENABLE(debug_flags,\n+changequote(<<, >>)dnl\n+<<  --enable-debug-flags=FLAGS    pass compiler FLAGS when building debug \n+\t                library;[default=>>GLIBCPP_ENABLE_DEBUG_FLAGS_DEFAULT],\n+changequote([, ])dnl\n+[case \"${enableval}\" in\n+ none)  ;;\n+ -*) enable_debug_flags=\"${enableval}\" ;;\n+ *)   AC_MSG_ERROR([Unknown argument to extra debugging flags]) ;;\n+ esac],\n+enable_debug_flags=GLIBCPP_ENABLE_DEBUG_FLAGS_DEFAULT)dnl\n \n dnl Option parsed, now set things appropriately\n-case \"${enable_debug}\" in\n-    yes) \n-        DEBUG_FLAGS='-O0 -ggdb3'                        \n+case x\"$enable_debug\" in\n+    xyes) \n+        case \"$enable_debug_flags\" in\n+\t  none) \n+            DEBUG_FLAGS=\"-g3 -O0\";;\n+\t  -*) #valid input\n+\t    DEBUG_FLAGS=\"${enableval}\"\n+        esac\n         ;; \n-    no)   \n-        DEBUG_FLAGS='-g'\n+    xno)   \n+        DEBUG_FLAGS=\"\"\n         ;;\n esac\n AC_SUBST(DEBUG_FLAGS)\n+\n+AC_MSG_CHECKING([for debug build flags])\n+AC_MSG_RESULT($DEBUG_FLAGS)\n ])\n \n \n@@ -1097,25 +1145,21 @@ dnl       If \"default flags\" is an empty string (or \"none\"), the effect is\n dnl       the same as --disable or --enable=no.\n AC_DEFUN(GLIBCPP_ENABLE_CXX_FLAGS, [dnl\n define([GLIBCPP_ENABLE_CXX_FLAGS_DEFAULT], ifelse($1,,, $1))dnl\n-AC_ARG_ENABLE(cxx-flags,\n+AC_ARG_ENABLE(cxx_flags,\n changequote(<<, >>)dnl\n <<  --enable-cxx-flags=FLAGS      pass compiler FLAGS when building library;\n                                 [default=>>GLIBCPP_ENABLE_CXX_FLAGS_DEFAULT],\n changequote([, ])dnl\n-[case \"x$enableval\" in\n+enable_cxx_flags='GLIBCPP_ENABLE_CXX_FLAGS_DEFAULT')\n+\n+case \"x$enable_cxx_flags\" in\n  xyes)   \n         AC_MSG_ERROR([--enable-cxx-flags needs compiler flags as arguments]) ;;\n- xno|x)  \n+ xno | xnone | x)  \n         enable_cxx_flags='' ;;\n  *)      \n         enable_cxx_flags=\"$enableval\" ;;\n- esac],\n-enable_cxx_flags='GLIBCPP_ENABLE_CXX_FLAGS_DEFAULT')\n-\n-dnl Thinko on my part during design.  This kludge is the workaround.\n-if test \"$enable_cxx_flags\" = \"none\"; then \n-  enable_cxx_flags=''; \n-fi\n+esac\t\n \n dnl Run through flags (either default or command-line) and set anything\n dnl extra (e.g., #defines) that must accompany particular g++ options.\n@@ -1291,23 +1335,19 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n   glibcpp_localedir=${glibcpp_builddir}/po/share/locale\n   AC_SUBST(glibcpp_localedir)\n \n-  # For the time being, transform ctype_noninline.h to ctype_members_char.cc\n-#  CCTYPE_CHAR_CC=config/${os_include_dir}/ctype_noninline.h\n-\n   AC_SUBST(USE_NLS)\n   AC_SUBST(CLOCALE_H)\n   AC_SUBST(CCODECVT_H)\n   AC_SUBST(CMESSAGES_H)\n-  AC_LINK_FILES($CLOCALE_CC, src/c++locale.cc)\n-  AC_LINK_FILES($CCODECVT_CC, src/codecvt_members.cc)\n-  AC_LINK_FILES($CCOLLATE_CC, src/collate_members.cc)\n-#  AC_LINK_FILES($CCTYPE_CHAR_CC, src/ctype_members_char.cc)\n-  AC_LINK_FILES($CCTYPE_CC, src/ctype_members.cc)\n-  AC_LINK_FILES($CMESSAGES_CC, src/messages_members.cc)\n-  AC_LINK_FILES($CMONEY_CC, src/monetary_members.cc)\n-  AC_LINK_FILES($CNUMERIC_CC, src/numeric_members.cc)\n-  AC_LINK_FILES($CTIME_CC, src/time_members.cc)\n-  AC_LINK_FILES($CLOCALE_INTERNAL_H, src/c++locale_internal.h)\n+  AC_SUBST(CCODECVT_CC)\n+  AC_SUBST(CCOLLATE_CC)\n+  AC_SUBST(CCTYPE_CC)\n+  AC_SUBST(CMESSAGES_CC)\n+  AC_SUBST(CMONEY_CC)\n+  AC_SUBST(CNUMERIC_CC)\n+  AC_SUBST(CTIME_CC)\n+  AC_SUBST(CLOCALE_CC)\n+  AC_SUBST(CLOCALE_INTERNAL_H)\n ])\n \n \n@@ -1408,7 +1448,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n   esac\n   AC_SUBST(CSTDIO_H)\n   AC_SUBST(BASIC_FILE_H)\n-  AC_LINK_FILES($BASIC_FILE_CC, src/basic_file.cc)\n+  AC_SUBST(BASIC_FILE_CC)\n \n   # 2000-08-04 bkoz hack\n   CCODECVT_C=config/io/c_io_libio_codecvt.c\n@@ -1727,7 +1767,7 @@ AC_DEFUN(GLIBCPP_ENABLE_LONG_LONG, [dnl\n \n \n dnl\n-dnl Check for what kind of C headers to use.\n+dnl Check for what type of C headers to use.\n dnl\n dnl GLIBCPP_ENABLE_CHEADERS\n dnl --enable-cheaders= [does stuff].\n@@ -1740,7 +1780,7 @@ define([GLIBCPP_ENABLE_CHEADERS_DEFAULT], ifelse($1, c_std, c_std, c_std))dnl\n AC_MSG_CHECKING([for c header strategy to use])\n AC_ARG_ENABLE(cheaders,\n changequote(<<, >>)dnl\n-<<  --enable-cheaders       construct \"C\" header files for g++ [default=>>GLIBCPP_ENABLE_CHEADERS_DEFAULT],\n+<<  --enable-cheaders=MODEL       construct \"C\" header files for g++ [default=>>GLIBCPP_ENABLE_CHEADERS_DEFAULT],\n changequote([, ])\n   [case \"$enableval\" in\n    c) \n@@ -2235,15 +2275,15 @@ fi\n dnl Everything parsed; figure out what file to use.\n case $enable_symvers in\n   no)\n-      LINKER_MAP=config/linker-map.dummy\n+      SYMVER_MAP=config/linker-map.dummy\n       ;;\n   gnu)\n-      LINKER_MAP=config/linker-map.gnu\n+      SYMVER_MAP=config/linker-map.gnu\n       AC_DEFINE(_GLIBCPP_SYMVER)\t\n       ;;\n esac\n \n-AC_LINK_FILES($LINKER_MAP, src/linker.map)\n+AC_SUBST(SYMVER_MAP)\n AM_CONDITIONAL(GLIBCPP_BUILD_VERSIONED_SHLIB, test $enable_symvers != no)\n AC_MSG_CHECKING([versioning on shared library symbols])\n AC_MSG_RESULT($enable_symvers)"}, {"sha": "3d7f84fa95308108ba9e9812ff2d96c1b3c29577", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 83, "deletions": 43, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=6aa43d99a33e70adb87432dc5ded2476e3bc9f28", "patch": "@@ -279,8 +279,7 @@ AC_DEFUN(GLIBCPP_CHECK_COMPILER_FEATURES, [\n     # this is the suspicious part\n     CXXFLAGS=''\n   fi\n-  if test x\"$ac_fdsections\" = x\"yes\" &&\n-     test x\"$enable_debug\" = x\"no\"; then\n+  if test x\"$ac_fdsections\" = x\"yes\"; then\n     SECTION_FLAGS='-ffunction-sections -fdata-sections'\n   fi\n   AC_MSG_RESULT($ac_fdsections)\n@@ -373,7 +372,7 @@ AC_DEFUN(GLIBCPP_CHECK_LINKER_FEATURES, [\n   fi\n \n   # Set linker optimization flags.\n-  if test x\"$with_gnu_ld\" = x\"yes\" && test x\"$enable_debug\" = x\"no\"; then\n+  if test x\"$with_gnu_ld\" = x\"yes\"; then\n     OPT_LDFLAGS=\"-Wl,-O1 $OPT_LDFLAGS\"\n   fi\n \n@@ -923,7 +922,11 @@ AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n     AC_CHECK_FUNCS([__signbitl], , [LIBMATHOBJS=\"$LIBMATHOBJS signbitl.lo\"])\n   fi\n \n+  if test -n \"$LIBMATHOBJS\"; then\n+    need_libmath=yes\n+  fi\n   AC_SUBST(LIBMATHOBJS)\n+  AM_CONDITIONAL(GLIBCPP_BUILD_LIBMATH,  test \"$need_libmath\" = yes)\n ])\n \n \n@@ -1055,14 +1058,20 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n \n \n dnl\n-dnl Check for special debugging mode; not for production use.\n+dnl Check to see if debugging libraries are to be built.\n dnl\n dnl GLIBCPP_ENABLE_DEBUG\n-dnl --enable-debug sets '-ggdb3 -O0'.\n-dnl --disable-debug sets '-g' and whatever optimization options the\n-dnl     compiler can handle.\n-dnl  +  --enable-maintainer-mode automatically defaults this to on.\n-dnl  +  Perhaps -D/-U of NDEBUG, DEBUG, DEBUG_ASSERT, ...?\n+dnl\n+dnl --enable-debug \n+dnl builds a separate set of debugging libraries in addition to the\n+dnl normal (shared, static) libstdc++ binaries.\n+dnl\n+dnl --disable-debug \n+dnl builds only one (non-debug) version of libstdc++.\n+dnl\n+dnl --enable-debug-flags=FLAGS\n+dnl iff --enable-debug == yes, then use FLAGS to build the debug library.\n+dnl\n dnl  +  Usage:  GLIBCPP_ENABLE_DEBUG[(DEFAULT)]\n dnl       Where DEFAULT is either `yes' or `no'.  If ommitted, it\n dnl       defaults to `no'.\n@@ -1078,17 +1087,56 @@ changequote([, ])dnl\n  *)   AC_MSG_ERROR([Unknown argument to enable/disable extra debugging]) ;;\n  esac],\n enable_debug=GLIBCPP_ENABLE_DEBUG_DEFAULT)dnl\n+AC_MSG_CHECKING([for additional debug build])\n+AC_MSG_RESULT($enable_debug)\n+AM_CONDITIONAL(GLIBCPP_BUILD_DEBUG, test \"$enable_debug\" = yes)\t\n+])\n+\n+\n+dnl Check for explicit debug flags.\n+dnl\n+dnl GLIBCPP_ENABLE_DEBUG_FLAGS\n+dnl\n+dnl --enable-debug-flags='-O1' \n+dnl is a general method for passing flags to be used when \n+dnl building debug libraries with --enable-debug.\n+dnl\n+dnl --disable-debug-flags does nothing.\n+dnl  +  Usage:  GLIBCPP_ENABLE_DEBUG_FLAGS(default flags)\n+dnl       If \"default flags\" is an empty string (or \"none\"), the effect is\n+dnl       the same as --disable or --enable=no.\n+AC_DEFUN(GLIBCPP_ENABLE_DEBUG_FLAGS, [dnl\n+define([GLIBCPP_ENABLE_DEBUG_FLAGS_DEFAULT], ifelse($1,,, $1))dnl\n+AC_ARG_ENABLE(debug_flags,\n+changequote(<<, >>)dnl\n+<<  --enable-debug-flags=FLAGS    pass compiler FLAGS when building debug \n+\t                library;[default=>>GLIBCPP_ENABLE_DEBUG_FLAGS_DEFAULT],\n+changequote([, ])dnl\n+[case \"${enableval}\" in\n+ none)  ;;\n+ -*) enable_debug_flags=\"${enableval}\" ;;\n+ *)   AC_MSG_ERROR([Unknown argument to extra debugging flags]) ;;\n+ esac],\n+enable_debug_flags=GLIBCPP_ENABLE_DEBUG_FLAGS_DEFAULT)dnl\n \n dnl Option parsed, now set things appropriately\n-case \"${enable_debug}\" in\n-    yes) \n-        DEBUG_FLAGS='-O0 -ggdb3'                        \n+case x\"$enable_debug\" in\n+    xyes) \n+        case \"$enable_debug_flags\" in\n+\t  none) \n+            DEBUG_FLAGS=\"-g3 -O0\";;\n+\t  -*) #valid input\n+\t    DEBUG_FLAGS=\"${enableval}\"\n+        esac\n         ;; \n-    no)   \n-        DEBUG_FLAGS='-g'\n+    xno)   \n+        DEBUG_FLAGS=\"\"\n         ;;\n esac\n AC_SUBST(DEBUG_FLAGS)\n+\n+AC_MSG_CHECKING([for debug build flags])\n+AC_MSG_RESULT($DEBUG_FLAGS)\n ])\n \n \n@@ -1109,25 +1157,21 @@ dnl       If \"default flags\" is an empty string (or \"none\"), the effect is\n dnl       the same as --disable or --enable=no.\n AC_DEFUN(GLIBCPP_ENABLE_CXX_FLAGS, [dnl\n define([GLIBCPP_ENABLE_CXX_FLAGS_DEFAULT], ifelse($1,,, $1))dnl\n-AC_ARG_ENABLE(cxx-flags,\n+AC_ARG_ENABLE(cxx_flags,\n changequote(<<, >>)dnl\n <<  --enable-cxx-flags=FLAGS      pass compiler FLAGS when building library;\n                                 [default=>>GLIBCPP_ENABLE_CXX_FLAGS_DEFAULT],\n changequote([, ])dnl\n-[case \"x$enableval\" in\n+enable_cxx_flags='GLIBCPP_ENABLE_CXX_FLAGS_DEFAULT')\n+\n+case \"x$enable_cxx_flags\" in\n  xyes)   \n         AC_MSG_ERROR([--enable-cxx-flags needs compiler flags as arguments]) ;;\n- xno|x)  \n+ xno | xnone | x)  \n         enable_cxx_flags='' ;;\n  *)      \n         enable_cxx_flags=\"$enableval\" ;;\n- esac],\n-enable_cxx_flags='GLIBCPP_ENABLE_CXX_FLAGS_DEFAULT')\n-\n-dnl Thinko on my part during design.  This kludge is the workaround.\n-if test \"$enable_cxx_flags\" = \"none\"; then \n-  enable_cxx_flags=''; \n-fi\n+esac\t\n \n dnl Run through flags (either default or command-line) and set anything\n dnl extra (e.g., #defines) that must accompany particular g++ options.\n@@ -1303,23 +1347,19 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n   glibcpp_localedir=${glibcpp_builddir}/po/share/locale\n   AC_SUBST(glibcpp_localedir)\n \n-  # For the time being, transform ctype_noninline.h to ctype_members_char.cc\n-#  CCTYPE_CHAR_CC=config/${os_include_dir}/ctype_noninline.h\n-\n   AC_SUBST(USE_NLS)\n   AC_SUBST(CLOCALE_H)\n   AC_SUBST(CCODECVT_H)\n   AC_SUBST(CMESSAGES_H)\n-  AC_LINK_FILES($CLOCALE_CC, src/c++locale.cc)\n-  AC_LINK_FILES($CCODECVT_CC, src/codecvt_members.cc)\n-  AC_LINK_FILES($CCOLLATE_CC, src/collate_members.cc)\n-#  AC_LINK_FILES($CCTYPE_CHAR_CC, src/ctype_members_char.cc)\n-  AC_LINK_FILES($CCTYPE_CC, src/ctype_members.cc)\n-  AC_LINK_FILES($CMESSAGES_CC, src/messages_members.cc)\n-  AC_LINK_FILES($CMONEY_CC, src/monetary_members.cc)\n-  AC_LINK_FILES($CNUMERIC_CC, src/numeric_members.cc)\n-  AC_LINK_FILES($CTIME_CC, src/time_members.cc)\n-  AC_LINK_FILES($CLOCALE_INTERNAL_H, src/c++locale_internal.h)\n+  AC_SUBST(CCODECVT_CC)\n+  AC_SUBST(CCOLLATE_CC)\n+  AC_SUBST(CCTYPE_CC)\n+  AC_SUBST(CMESSAGES_CC)\n+  AC_SUBST(CMONEY_CC)\n+  AC_SUBST(CNUMERIC_CC)\n+  AC_SUBST(CTIME_CC)\n+  AC_SUBST(CLOCALE_CC)\n+  AC_SUBST(CLOCALE_INTERNAL_H)\n ])\n \n \n@@ -1420,7 +1460,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n   esac\n   AC_SUBST(CSTDIO_H)\n   AC_SUBST(BASIC_FILE_H)\n-  AC_LINK_FILES($BASIC_FILE_CC, src/basic_file.cc)\n+  AC_SUBST(BASIC_FILE_CC)\n \n   # 2000-08-04 bkoz hack\n   CCODECVT_C=config/io/c_io_libio_codecvt.c\n@@ -1739,7 +1779,7 @@ AC_DEFUN(GLIBCPP_ENABLE_LONG_LONG, [dnl\n \n \n dnl\n-dnl Check for what kind of C headers to use.\n+dnl Check for what type of C headers to use.\n dnl\n dnl GLIBCPP_ENABLE_CHEADERS\n dnl --enable-cheaders= [does stuff].\n@@ -1752,7 +1792,7 @@ define([GLIBCPP_ENABLE_CHEADERS_DEFAULT], ifelse($1, c_std, c_std, c_std))dnl\n AC_MSG_CHECKING([for c header strategy to use])\n AC_ARG_ENABLE(cheaders,\n changequote(<<, >>)dnl\n-<<  --enable-cheaders       construct \"C\" header files for g++ [default=>>GLIBCPP_ENABLE_CHEADERS_DEFAULT],\n+<<  --enable-cheaders=MODEL       construct \"C\" header files for g++ [default=>>GLIBCPP_ENABLE_CHEADERS_DEFAULT],\n changequote([, ])\n   [case \"$enableval\" in\n    c) \n@@ -2247,15 +2287,15 @@ fi\n dnl Everything parsed; figure out what file to use.\n case $enable_symvers in\n   no)\n-      LINKER_MAP=config/linker-map.dummy\n+      SYMVER_MAP=config/linker-map.dummy\n       ;;\n   gnu)\n-      LINKER_MAP=config/linker-map.gnu\n+      SYMVER_MAP=config/linker-map.gnu\n       AC_DEFINE(_GLIBCPP_SYMVER)\t\n       ;;\n esac\n \n-AC_LINK_FILES($LINKER_MAP, src/linker.map)\n+AC_SUBST(SYMVER_MAP)\n AM_CONDITIONAL(GLIBCPP_BUILD_VERSIONED_SHLIB, test $enable_symvers != no)\n AC_MSG_CHECKING([versioning on shared library symbols])\n AC_MSG_RESULT($enable_symvers)"}, {"sha": "0abe542883b0d821f0cacda6c525a428c9e6209c", "filename": "libstdc++-v3/config/locale/generic/codecvt_members.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcodecvt_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcodecvt_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcodecvt_members.cc?ref=6aa43d99a33e70adb87432dc5ded2476e3bc9f28", "patch": "@@ -34,7 +34,6 @@\n // Written by Benjamin Kosnik <bkoz@redhat.com>\n \n #include <locale>\n-#include \"c++locale_internal.h\"\n \n namespace std\n {"}, {"sha": "e8169837f25ecc0a717bf2d45986c0d8334eac55", "filename": "libstdc++-v3/config/locale/gnu/c_locale.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc?ref=6aa43d99a33e70adb87432dc5ded2476e3bc9f28", "patch": "@@ -36,7 +36,7 @@\n #include <locale>\n #include <stdexcept>\n #include <langinfo.h>\n-#include \"c++locale_internal.h\"\n+#include <bits/c++locale_internal.h>\n \n namespace std \n {"}, {"sha": "2e71a326d1cc17bdbeb76e910ba5556e8edda37c", "filename": "libstdc++-v3/config/locale/gnu/codecvt_members.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcodecvt_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcodecvt_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcodecvt_members.cc?ref=6aa43d99a33e70adb87432dc5ded2476e3bc9f28", "patch": "@@ -34,7 +34,7 @@\n // Written by Benjamin Kosnik <bkoz@redhat.com>\n \n #include <locale>\n-#include \"c++locale_internal.h\"\n+#include <bits/c++locale_internal.h>\n \n namespace std\n {"}, {"sha": "1ac209467d88ccf29a9791851fee5b0dd9d699f6", "filename": "libstdc++-v3/config/locale/gnu/collate_members.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcollate_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcollate_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcollate_members.cc?ref=6aa43d99a33e70adb87432dc5ded2476e3bc9f28", "patch": "@@ -34,7 +34,7 @@\n // Written by Benjamin Kosnik <bkoz@redhat.com>\n \n #include <locale>\n-#include \"c++locale_internal.h\"\n+#include <bits/c++locale_internal.h>\n \n namespace std\n {"}, {"sha": "e0be949f2cc5d5ea7740813913c420aac86739f6", "filename": "libstdc++-v3/config/locale/gnu/ctype_members.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc?ref=6aa43d99a33e70adb87432dc5ded2476e3bc9f28", "patch": "@@ -34,7 +34,7 @@\n // Written by Benjamin Kosnik <bkoz@redhat.com>\n \n #include <locale>\n-#include \"c++locale_internal.h\"\n+#include <bits/c++locale_internal.h>\n \n namespace std\n {"}, {"sha": "fad01dfabfc4e0245e2227384be8c67b561d4a56", "filename": "libstdc++-v3/config/locale/gnu/messages_members.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.cc?ref=6aa43d99a33e70adb87432dc5ded2476e3bc9f28", "patch": "@@ -34,7 +34,7 @@\n // Written by Benjamin Kosnik <bkoz@redhat.com>\n \n #include <locale>\n-#include \"c++locale_internal.h\"\n+#include <bits/c++locale_internal.h>\n \n namespace std\n {"}, {"sha": "b3ef13b234164071ce2206bb939be1398f26d9e0", "filename": "libstdc++-v3/config/locale/gnu/monetary_members.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc?ref=6aa43d99a33e70adb87432dc5ded2476e3bc9f28", "patch": "@@ -34,7 +34,7 @@\n // Written by Benjamin Kosnik <bkoz@redhat.com>\n \n #include <locale>\n-#include \"c++locale_internal.h\"\n+#include <bits/c++locale_internal.h>\n \n namespace std\n {"}, {"sha": "1aa05293d4cc092e229cdfaf0740baa737a5e657", "filename": "libstdc++-v3/config/locale/gnu/numeric_members.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc?ref=6aa43d99a33e70adb87432dc5ded2476e3bc9f28", "patch": "@@ -34,7 +34,7 @@\n // Written by Benjamin Kosnik <bkoz@redhat.com>\n \n #include <locale>\n-#include \"c++locale_internal.h\"\n+#include <bits/c++locale_internal.h>\n \n namespace std\n {"}, {"sha": "db590efbb9c4750b1560baf84e32f1fa29779ef0", "filename": "libstdc++-v3/config/locale/gnu/time_members.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc?ref=6aa43d99a33e70adb87432dc5ded2476e3bc9f28", "patch": "@@ -35,7 +35,7 @@\n // Written by Benjamin Kosnik <bkoz@redhat.com>\n \n #include <locale>\n-#include \"c++locale_internal.h\"\n+#include <bits/c++locale_internal.h>\n \n namespace std\n {"}, {"sha": "5d0a510a910f62f4cd82ae0d712343bdb82b9095", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1522, "deletions": 1438, "changes": 2960, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=6aa43d99a33e70adb87432dc5ded2476e3bc9f28"}, {"sha": "7f5a96ad79238303ae810cea1a01d0080ff5f2c0", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=6aa43d99a33e70adb87432dc5ded2476e3bc9f28", "patch": "@@ -54,18 +54,19 @@ AC_SUBST(enable_static)\n GLIBCPP_CHECK_GNU_MAKE\n \n # Enable all the variable C++ stuff.  C_MBCHAR must come early.\n-GLIBCPP_ENABLE_DEBUG($USE_MAINTAINER_MODE)\n GLIBCPP_ENABLE_CSTDIO\n GLIBCPP_ENABLE_CLOCALE\n+GLIBCPP_ENABLE_CHEADERS([$c_model])\n GLIBCPP_ENABLE_C_MBCHAR([yes])\n GLIBCPP_ENABLE_C99([yes])\n GLIBCPP_ENABLE_LONG_LONG([yes])\n-GLIBCPP_ENABLE_CHEADERS([$c_model])\n GLIBCPP_ENABLE_THREADS\n-GLIBCPP_ENABLE_CXX_FLAGS([none])\n GLIBCPP_ENABLE_SJLJ_EXCEPTIONS\n GLIBCPP_ENABLE_LIBUNWIND_EXCEPTIONS\n GLIBCPP_ENABLE_CONCEPT_CHECKS\n+GLIBCPP_ENABLE_CXX_FLAGS([none])\n+GLIBCPP_ENABLE_DEBUG([no])\n+GLIBCPP_ENABLE_DEBUG_FLAGS([none])\n \n # Check for headers necessary for libsupc++ using dyn-string.c/cxa_demangle.c\n AC_CHECK_HEADERS(string.h stdlib.h)\n@@ -451,7 +452,7 @@ fi\n # Export all the install information\n GLIBCPP_EXPORT_INSTALL_INFO\n \n-# Export all the include and flag information to makefiles.\n+# Export all the include and flag information to Makefiles.\n GLIBCPP_EXPORT_INCLUDES\n GLIBCPP_EXPORT_FLAGS\n \n@@ -473,11 +474,14 @@ AC_OUTPUT(Makefile \\\n     include/Makefile src/Makefile \\\n     libmath/Makefile libio/Makefile libsupc++/Makefile \\\n     po/Makefile testsuite/Makefile mkcheck testsuite_flags,\n-[if test -n \"$CONFIG_FILES\"; then\n-  LD=\"${ORIGINAL_LD_FOR_MULTILIBS}\"\n-  ac_file=Makefile . ${glibcpp_basedir}/../config-ml.in\n-  grep '^MULTISUBDIR =' Makefile >> src/Makefile\n-  grep '^MULTISUBDIR =' Makefile >> libsupc++/Makefile\n+[test -z \"$CONFIG_HEADERS\" || echo timestamp > stamp-h\n+if test -n \"$CONFIG_FILES\"; then\n+ if test -n \"${with_build_subdir}\" || test -n \"${with_target_subdir}\"; then\n+    LD=\"${ORIGINAL_LD_FOR_MULTILIBS}\"\n+    ac_file=Makefile . ${glibcpp_basedir}/../config-ml.in\n+    grep '^MULTISUBDIR =' Makefile >> src/Makefile\n+    grep '^MULTISUBDIR =' Makefile >> libsupc++/Makefile\n+  fi\n fi\n chmod +x mkcheck\n chmod +x testsuite_flags"}, {"sha": "aec70a602718bf095bec522004169c9ed05c4889", "filename": "libstdc++-v3/docs/html/configopts.html", "status": "modified", "additions": 36, "deletions": 19, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html?ref=6aa43d99a33e70adb87432dc5ded2476e3bc9f28", "patch": "@@ -76,23 +76,11 @@ <h1 class=\"centered\"><a name=\"top\">Interesting <code>configure</code>\n  <dd><p>Adds support for named libstdc++ include directory.  For instance,\n         the following puts all the libstdc++ headers into a directory\n         called &quot;2.97-20001008&quot; instead of the usual\n-        &quot;g++-v3&quot;.\n+        &quot;c++/(version)&quot;.\n      </p>\n         <pre>\n    --with-gxx-include-dir=/foo/H-x86-gcc-3-c-gxx-inc/include/2.97-20001008</pre> </dd>\n \n- <dt><code>--enable-debug  </code></dt>\n- <dd><p>The configure script will automatically detect the highest\n-        level of optimization that the compiler in use can use.\n-        This --enable flag will disable all optimizations and instruct\n-        the compiler to emit as much extra debugging information as it\n-        can, for use inside GDB.  Note this make command, executed in\n-        the build directory, will do much the same thing, without the\n-        configuration difference:\n-        <code>make CXXFLAGS='-g -O0' all</code>\n-     </p>\n- </dd>\n-\n  <dt><code>--enable-cstdio  </code></dt>\n  <dd><p>This is an abbreviated form of <code>'--enable-cstdio=stdio'</code>\n         (described next). This option can change the library ABI.\n@@ -157,6 +145,34 @@ <h1 class=\"centered\"><a name=\"top\">Interesting <code>configure</code>\n      </p>\n  </dd>\n \n+ <dt><code>--enable-debug  </code></dt>\n+ <dd><p>Build separate debug libraries in addition to what is normally built.\n+ \tBy default, the debug libraries are compiled with \n+        <code> CXXFLAGS='-g3 -O0'</code>\n+        , are installed in <code>${libdir}/debug</code>, and have the\n+        same names and versioning information as the non-debug\n+        libraries. This option is off by default.\n+        <p>\n+        Note this make command, executed in\n+        the build directory, will do much the same thing, without the\n+        configuration difference and without building everything twice: \n+        <code>make CXXFLAGS='-g3 -O0' all</code>\n+        </p>\n+     </p>\n+ </dd>\n+\n+ <dt><code>--enable-debug-flags=FLAGS</code></dt>\n+\n+ <dd><p>This option is only valid when <code> --enable-debug </code>\n+        is also specified, and applies to the debug builds only. With\n+        this option, you can pass a specific string of flags to the\n+        compiler to use when building the debug versions of libstdc++.\n+        FLAGS is a quoted string of options, like\n+     </p>\n+        <pre>\n+  --enable-debug-flags='-g3 -O1 -gdwarf-2'</pre>\n+ </dd>\n+\n  <dt><code>--enable-cxx-flags=FLAGS</code></dt>\n  <dd><p>With this option, you can pass a string of -f (functionality)\n         flags to the compiler to use when building libstdc++. This\n@@ -238,12 +254,13 @@ <h1 class=\"centered\"><a name=\"top\">Interesting <code>configure</code>\n  </dd>\n \n  <dt><code>--enable-symvers[=style]  </code></dt>\n- <dd><p>In 3.1, tries to turn on symbol versioning in the shared library (if a\n-        shared library has been requested).  The only 'style' currently\n-        supported is 'gnu' which requires that a recent version of the GNU\n-        linker be in use.  With no style given, the configure script will\n-        try to guess if the 'gnu' style can be used, and if so, will turn it\n-        on.  Hopefully people will volunteer to do other 'style' options.\n+ <dd><p>In 3.1 and later, tries to turn on symbol versioning in the\n+        shared library (if a shared library has been requested).  The\n+        only 'style' currently supported is 'gnu' which requires that\n+        a recent version of the GNU linker be in use.  With no style\n+        given, the configure script will try to guess if the 'gnu'\n+        style can be used, and if so, will turn it on.  Hopefully\n+        people will volunteer to do other 'style' options.\n      </p>\n  </dd>\n </dl>"}, {"sha": "6b50c1d6dcb75a2fbef4a0b4815573a98812d3aa", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=6aa43d99a33e70adb87432dc5ded2476e3bc9f28", "patch": "@@ -312,6 +312,11 @@ target_headers = \\\n \t${target_srcdir}/ctype_noninline.h \\\n \t${target_srcdir}/os_defines.h \\\n \t${glibcpp_srcdir}/@ATOMICITY_INC_SRCDIR@/atomicity.h \n+\n+# Non-installed target_header files.\n+target_headers_noinst = \\\n+\t${glibcpp_srcdir}/@CLOCALE_INTERNAL_H@\n+\n # These target_headers_extra files are all built with ad hoc naming rules.\n target_headers_extra = \\\n \t${target_builddir}/basic_file.h \\\n@@ -331,8 +336,7 @@ thread_target_headers = \\\n # CLEANFILES and all-local are kept up-to-date.\n allstamps = \\\n \tstamp-std stamp-bits stamp-c_base stamp-c_compatibility \\\n-\tstamp-backward stamp-ext \\\n-\t${target_builddir}/stamp-target\n+\tstamp-backward stamp-ext stamp-target\n \n \n # Here are the rules for building the headers\n@@ -400,16 +404,18 @@ stamp-${target_alias}:\n \tfi\n \n # Target includes static.\n-${target_builddir}/stamp-target: ${target_headers} stamp-${target_alias}\n-\t@cd ${target_builddir} ;\\\n-\tif [ ! -f stamp-target ]; then \\\n+# XXX Missing dependency info for {target_headers_extra}\n+stamp-target: ${target_headers} ${target_headers_noinst} stamp-${target_alias}\n+\t@if [ ! -f stamp-target ]; then \\\n+\t  (cd ${target_builddir} ;\\\n \t  @LN_S@ ${target_headers} . || true ;\\\n \t  @LN_S@ ${glibcpp_srcdir}/@BASIC_FILE_H@ basic_file.h || true ;\\\n \t  @LN_S@ ${glibcpp_srcdir}/@CSTDIO_H@ c++io.h || true ;\\\n \t  @LN_S@ ${glibcpp_srcdir}/@CLOCALE_H@ c++locale.h || true ;\\\n+\t  @LN_S@ ${glibcpp_srcdir}/@CLOCALE_INTERNAL_H@ . || true ;\\\n \t  @LN_S@ ${glibcpp_srcdir}/@CMESSAGES_H@ messages_members.h || true ;\\\n-\t  @LN_S@ ${glibcpp_srcdir}/@CCODECVT_H@ codecvt_specializations.h || true ;\\\n-\t  echo `date` > stamp-target; \\\n+\t  @LN_S@ ${glibcpp_srcdir}/@CCODECVT_H@ codecvt_specializations.h || true);\\\n+\t  echo `date` > stamp-target ; \\\n \tfi\n \n # Target includes dynamic."}, {"sha": "83558c3ebf74a0c683a967386913a009892bbc92", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=6aa43d99a33e70adb87432dc5ded2476e3bc9f28", "patch": "@@ -67,14 +67,24 @@ AR = @AR@\n AS = @AS@\n ATOMICITY_INC_SRCDIR = @ATOMICITY_INC_SRCDIR@\n AWK = @AWK@\n+BASIC_FILE_CC = @BASIC_FILE_CC@\n BASIC_FILE_H = @BASIC_FILE_H@\n CC = @CC@\n CCODECVT_C = @CCODECVT_C@\n+CCODECVT_CC = @CCODECVT_CC@\n CCODECVT_H = @CCODECVT_H@\n+CCOLLATE_CC = @CCOLLATE_CC@\n+CCTYPE_CC = @CCTYPE_CC@\n+CLOCALE_CC = @CLOCALE_CC@\n CLOCALE_H = @CLOCALE_H@\n+CLOCALE_INTERNAL_H = @CLOCALE_INTERNAL_H@\n+CMESSAGES_CC = @CMESSAGES_CC@\n CMESSAGES_H = @CMESSAGES_H@\n+CMONEY_CC = @CMONEY_CC@\n+CNUMERIC_CC = @CNUMERIC_CC@\n CPP = @CPP@\n CSTDIO_H = @CSTDIO_H@\n+CTIME_CC = @CTIME_CC@\n CXXCPP = @CXXCPP@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@\n DEBUG_FLAGS = @DEBUG_FLAGS@\n@@ -105,6 +115,7 @@ RANLIB = @RANLIB@\n SECTION_FLAGS = @SECTION_FLAGS@\n SECTION_LDFLAGS = @SECTION_LDFLAGS@\n STRIP = @STRIP@\n+SYMVER_MAP = @SYMVER_MAP@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n USE_NLS = @USE_NLS@\n VERSION = @VERSION@\n@@ -415,6 +426,12 @@ target_headers = \\\n \t${target_srcdir}/os_defines.h \\\n \t${glibcpp_srcdir}/@ATOMICITY_INC_SRCDIR@/atomicity.h \n \n+\n+# Non-installed target_header files.\n+target_headers_noinst = \\\n+\t${glibcpp_srcdir}/@CLOCALE_INTERNAL_H@\n+\n+\n # These target_headers_extra files are all built with ad hoc naming rules.\n target_headers_extra = \\\n \t${target_builddir}/basic_file.h \\\n@@ -436,8 +453,7 @@ thread_target_headers = \\\n # CLEANFILES and all-local are kept up-to-date.\n allstamps = \\\n \tstamp-std stamp-bits stamp-c_base stamp-c_compatibility \\\n-\tstamp-backward stamp-ext \\\n-\t${target_builddir}/stamp-target\n+\tstamp-backward stamp-ext stamp-target\n \n \n # Target includes for threads\n@@ -620,16 +636,18 @@ stamp-${target_alias}:\n \tfi\n \n # Target includes static.\n-${target_builddir}/stamp-target: ${target_headers} stamp-${target_alias}\n-\t@cd ${target_builddir} ;\\\n-\tif [ ! -f stamp-target ]; then \\\n+# XXX Missing dependency info for {target_headers_extra}\n+stamp-target: ${target_headers} ${target_headers_noinst} stamp-${target_alias}\n+\t@if [ ! -f stamp-target ]; then \\\n+\t  (cd ${target_builddir} ;\\\n \t  @LN_S@ ${target_headers} . || true ;\\\n \t  @LN_S@ ${glibcpp_srcdir}/@BASIC_FILE_H@ basic_file.h || true ;\\\n \t  @LN_S@ ${glibcpp_srcdir}/@CSTDIO_H@ c++io.h || true ;\\\n \t  @LN_S@ ${glibcpp_srcdir}/@CLOCALE_H@ c++locale.h || true ;\\\n+\t  @LN_S@ ${glibcpp_srcdir}/@CLOCALE_INTERNAL_H@ . || true ;\\\n \t  @LN_S@ ${glibcpp_srcdir}/@CMESSAGES_H@ messages_members.h || true ;\\\n-\t  @LN_S@ ${glibcpp_srcdir}/@CCODECVT_H@ codecvt_specializations.h || true ;\\\n-\t  echo `date` > stamp-target; \\\n+\t  @LN_S@ ${glibcpp_srcdir}/@CCODECVT_H@ codecvt_specializations.h || true);\\\n+\t  echo `date` > stamp-target ; \\\n \tfi\n \n # Target includes dynamic."}, {"sha": "1d18309f7c28ad1a9b34e5d55a5ea907047126f4", "filename": "libstdc++-v3/libio/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Flibio%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Flibio%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FChangeLog?ref=6aa43d99a33e70adb87432dc5ded2476e3bc9f28", "patch": "@@ -1,3 +1,7 @@\n+2002-12-13  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* Makefile.am (AM_CFLAGS): Remove DEBUG_FLAGS.\n+\n 2001-02-03  Alexandre Oliva  <aoliva@redhat.com>\n             Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n "}, {"sha": "e0496b2fa1b0796af3448d84fc32285f3387058b", "filename": "libstdc++-v3/libio/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Flibio%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Flibio%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.am?ref=6aa43d99a33e70adb87432dc5ded2476e3bc9f28", "patch": "@@ -64,4 +64,4 @@ EXTRA_DIST = iostreamP.h\n libio_la_SOURCES = $(LIBIO_SRCS) $(LIBIO_WSRCS)\n \n \n-AM_CFLAGS = -D_GNU_SOURCE @DEBUG_FLAGS@ \n+AM_CFLAGS = -D_GNU_SOURCE "}, {"sha": "f6e1c401dc6fe2c70256d8bb54e0339f806936d6", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=6aa43d99a33e70adb87432dc5ded2476e3bc9f28", "patch": "@@ -67,14 +67,24 @@ AR = @AR@\n AS = @AS@\n ATOMICITY_INC_SRCDIR = @ATOMICITY_INC_SRCDIR@\n AWK = @AWK@\n+BASIC_FILE_CC = @BASIC_FILE_CC@\n BASIC_FILE_H = @BASIC_FILE_H@\n CC = @CC@\n CCODECVT_C = @CCODECVT_C@\n+CCODECVT_CC = @CCODECVT_CC@\n CCODECVT_H = @CCODECVT_H@\n+CCOLLATE_CC = @CCOLLATE_CC@\n+CCTYPE_CC = @CCTYPE_CC@\n+CLOCALE_CC = @CLOCALE_CC@\n CLOCALE_H = @CLOCALE_H@\n+CLOCALE_INTERNAL_H = @CLOCALE_INTERNAL_H@\n+CMESSAGES_CC = @CMESSAGES_CC@\n CMESSAGES_H = @CMESSAGES_H@\n+CMONEY_CC = @CMONEY_CC@\n+CNUMERIC_CC = @CNUMERIC_CC@\n CPP = @CPP@\n CSTDIO_H = @CSTDIO_H@\n+CTIME_CC = @CTIME_CC@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@\n@@ -104,6 +114,7 @@ RANLIB = @RANLIB@\n SECTION_FLAGS = @SECTION_FLAGS@\n SECTION_LDFLAGS = @SECTION_LDFLAGS@\n STRIP = @STRIP@\n+SYMVER_MAP = @SYMVER_MAP@\n USE_NLS = @USE_NLS@\n VERSION = @VERSION@\n WARN_FLAGS = @WARN_FLAGS@\n@@ -160,7 +171,7 @@ EXTRA_DIST = iostreamP.h\n \n libio_la_SOURCES = $(LIBIO_SRCS) $(LIBIO_WSRCS)\n \n-AM_CFLAGS = -D_GNU_SOURCE @DEBUG_FLAGS@ \n+AM_CFLAGS = -D_GNU_SOURCE \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = \n LTLIBRARIES =  $(noinst_LTLIBRARIES)"}, {"sha": "de3015f8e98f2c2091098dfc92a10ad82242281f", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=6aa43d99a33e70adb87432dc5ded2476e3bc9f28", "patch": "@@ -67,14 +67,24 @@ AR = @AR@\n AS = @AS@\n ATOMICITY_INC_SRCDIR = @ATOMICITY_INC_SRCDIR@\n AWK = @AWK@\n+BASIC_FILE_CC = @BASIC_FILE_CC@\n BASIC_FILE_H = @BASIC_FILE_H@\n CC = @CC@\n CCODECVT_C = @CCODECVT_C@\n+CCODECVT_CC = @CCODECVT_CC@\n CCODECVT_H = @CCODECVT_H@\n+CCOLLATE_CC = @CCOLLATE_CC@\n+CCTYPE_CC = @CCTYPE_CC@\n+CLOCALE_CC = @CLOCALE_CC@\n CLOCALE_H = @CLOCALE_H@\n+CLOCALE_INTERNAL_H = @CLOCALE_INTERNAL_H@\n+CMESSAGES_CC = @CMESSAGES_CC@\n CMESSAGES_H = @CMESSAGES_H@\n+CMONEY_CC = @CMONEY_CC@\n+CNUMERIC_CC = @CNUMERIC_CC@\n CPP = @CPP@\n CSTDIO_H = @CSTDIO_H@\n+CTIME_CC = @CTIME_CC@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@\n@@ -105,6 +115,7 @@ RANLIB = @RANLIB@\n SECTION_FLAGS = @SECTION_FLAGS@\n SECTION_LDFLAGS = @SECTION_LDFLAGS@\n STRIP = @STRIP@\n+SYMVER_MAP = @SYMVER_MAP@\n USE_NLS = @USE_NLS@\n VERSION = @VERSION@\n WARN_FLAGS = @WARN_FLAGS@"}, {"sha": "a14e0b46a25b39df818950c600972ba03c2133e5", "filename": "libstdc++-v3/libsupc++/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am?ref=6aa43d99a33e70adb87432dc5ded2476e3bc9f28", "patch": "@@ -49,7 +49,7 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n CONFIG_CXXFLAGS = \\\n-\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @DEBUG_FLAGS@ \n+\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@\n \n # Warning flags to use.\n WARN_CXXFLAGS = \\"}, {"sha": "107fcfa3019712028ae33eab32c1a7842395b0f6", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=6aa43d99a33e70adb87432dc5ded2476e3bc9f28", "patch": "@@ -67,13 +67,23 @@ AR = @AR@\n AS = @AS@\n ATOMICITY_INC_SRCDIR = @ATOMICITY_INC_SRCDIR@\n AWK = @AWK@\n+BASIC_FILE_CC = @BASIC_FILE_CC@\n BASIC_FILE_H = @BASIC_FILE_H@\n CCODECVT_C = @CCODECVT_C@\n+CCODECVT_CC = @CCODECVT_CC@\n CCODECVT_H = @CCODECVT_H@\n+CCOLLATE_CC = @CCOLLATE_CC@\n+CCTYPE_CC = @CCTYPE_CC@\n+CLOCALE_CC = @CLOCALE_CC@\n CLOCALE_H = @CLOCALE_H@\n+CLOCALE_INTERNAL_H = @CLOCALE_INTERNAL_H@\n+CMESSAGES_CC = @CMESSAGES_CC@\n CMESSAGES_H = @CMESSAGES_H@\n+CMONEY_CC = @CMONEY_CC@\n+CNUMERIC_CC = @CNUMERIC_CC@\n CPP = @CPP@\n CSTDIO_H = @CSTDIO_H@\n+CTIME_CC = @CTIME_CC@\n CXXCPP = @CXXCPP@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@\n DEBUG_FLAGS = @DEBUG_FLAGS@\n@@ -101,6 +111,7 @@ RANLIB = @RANLIB@\n SECTION_FLAGS = @SECTION_FLAGS@\n SECTION_LDFLAGS = @SECTION_LDFLAGS@\n STRIP = @STRIP@\n+SYMVER_MAP = @SYMVER_MAP@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n USE_NLS = @USE_NLS@\n VERSION = @VERSION@\n@@ -153,7 +164,7 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n CONFIG_CXXFLAGS = \\\n-\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @DEBUG_FLAGS@ \n+\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@\n \n \n # Warning flags to use."}, {"sha": "632636ac688e61a20c6d18cc88db4ac326bf13ef", "filename": "libstdc++-v3/po/Makefile.in", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpo%2FMakefile.in?ref=6aa43d99a33e70adb87432dc5ded2476e3bc9f28", "patch": "@@ -67,14 +67,24 @@ AR = @AR@\n AS = @AS@\n ATOMICITY_INC_SRCDIR = @ATOMICITY_INC_SRCDIR@\n AWK = @AWK@\n+BASIC_FILE_CC = @BASIC_FILE_CC@\n BASIC_FILE_H = @BASIC_FILE_H@\n CC = @CC@\n CCODECVT_C = @CCODECVT_C@\n+CCODECVT_CC = @CCODECVT_CC@\n CCODECVT_H = @CCODECVT_H@\n+CCOLLATE_CC = @CCOLLATE_CC@\n+CCTYPE_CC = @CCTYPE_CC@\n+CLOCALE_CC = @CLOCALE_CC@\n CLOCALE_H = @CLOCALE_H@\n+CLOCALE_INTERNAL_H = @CLOCALE_INTERNAL_H@\n+CMESSAGES_CC = @CMESSAGES_CC@\n CMESSAGES_H = @CMESSAGES_H@\n+CMONEY_CC = @CMONEY_CC@\n+CNUMERIC_CC = @CNUMERIC_CC@\n CPP = @CPP@\n CSTDIO_H = @CSTDIO_H@\n+CTIME_CC = @CTIME_CC@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@\n@@ -105,6 +115,7 @@ RANLIB = @RANLIB@\n SECTION_FLAGS = @SECTION_FLAGS@\n SECTION_LDFLAGS = @SECTION_LDFLAGS@\n STRIP = @STRIP@\n+SYMVER_MAP = @SYMVER_MAP@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n USE_NLS = @USE_NLS@\n VERSION = @VERSION@"}, {"sha": "a015000f766dd8bffb0f5c825513b8c6a567e066", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 84, "deletions": 15, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=6aa43d99a33e70adb87432dc5ded2476e3bc9f28", "patch": "@@ -29,19 +29,30 @@ mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n # Cross compiler support.\n CXX = @glibcpp_CXX@\n+glibcpp_srcdir=@glibcpp_srcdir@\n+glibcpp_builddir=@glibcpp_builddir@\n toolexecdir = @glibcpp_toolexecdir@\n toolexeclibdir = @glibcpp_toolexeclibdir@\n toolexeclib_LTLIBRARIES = libstdc++.la\n \n+# Symbol versioning for shared libraries.\n+if GLIBCPP_BUILD_VERSIONED_SHLIB\n+version_arg = -Wl,--version-script=libstdc++-symbol.ver\n+libstdc++-symbol.ver:  ${glibcpp_srcdir}/@SYMVER_MAP@\n+\t@LN_S@  $< ./libstdc++-symbol.ver || true\n+else\n+version_arg =\n+libstdc++-symbol.ver:\n+endif\n+\n # Compile flags that should be constant throughout the build, both for\n # SUBDIRS and for libstdc++-v3 in general.\n OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n \n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n-# NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n CONFIG_CXXFLAGS = \\\n-\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @DEBUG_FLAGS@ \n+\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@\n \n # Warning flags to use.\n WARN_CXXFLAGS = \\\n@@ -60,7 +71,8 @@ INCLUDES = \\\n \t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \\\n \t$(TOPLEVEL_INCLUDES)\n \n-# Source files linked in via configuration magic for a particular target.\n+# Source files linked in via configuration/make substitution for a\n+# particular target.\n target_sources = \\\n \tcodecvt_members.cc \\\n \tcollate_members.cc \\\n@@ -70,12 +82,39 @@ target_sources = \\\n \tnumeric_members.cc \\\n \ttime_members.cc\n \n-# Source files linked in via configuration magic for a particular\n-# target, but with ad hoc naming rules.\n+codecvt_members.cc: ${glibcpp_srcdir}/@CCODECVT_CC@\n+\t@LN_S@ $< . || true\n+\n+collate_members.cc: ${glibcpp_srcdir}/@CCOLLATE_CC@\n+\t@LN_S@ $< . || true\n+\n+ctype_members.cc: ${glibcpp_srcdir}/@CCTYPE_CC@\n+\t@LN_S@ $< . || true\n+\n+messages_members.cc: ${glibcpp_srcdir}/@CMESSAGES_CC@\n+\t@LN_S@ $< . || true\n+\n+monetary_members.cc: ${glibcpp_srcdir}/@CMONEY_CC@\n+\t@LN_S@ $< . || true\n+\n+numeric_members.cc: ${glibcpp_srcdir}/@CNUMERIC_CC@\n+\t@LN_S@ $< . || true\n+\n+time_members.cc: ${glibcpp_srcdir}/@CTIME_CC@\n+\t@LN_S@ $< . || true\n+\n+# Source files linked in via configuration/make substitution for a\n+# particular target, but with ad hoc naming rules.\n target_sources_extra = \\\n \tbasic_file.cc \\\n \tc++locale.cc \n \n+c++locale.cc: ${glibcpp_srcdir}/@CLOCALE_CC@\n+\t@LN_S@ $< ./$@ || true\n+\n+basic_file.cc: ${glibcpp_srcdir}/@BASIC_FILE_CC@\n+\t@LN_S@ $< ./$@ || true\n+\n # Sources present in the src directory.\n sources = \\\n \tbitset.cc \\\n@@ -114,20 +153,15 @@ VPATH = $(top_srcdir)/src:$(top_srcdir)\n libstdc___la_SOURCES = $(sources)\n \n libstdc___la_LIBADD = \\\n-\t../libmath/libmath.la @libio_la@ \\\n-\t../libsupc++/libsupc++convenience.la\n+\t$(top_builddir)/libmath/libmath.la @libio_la@ \\\n+\t$(top_builddir)/libsupc++/libsupc++convenience.la\n \n-if GLIBCPP_BUILD_VERSIONED_SHLIB\n-version_arg=-Wl,--version-script=linker.map\n-else\n-version_arg=\n-endif\n+libstdc___la_DEPENDENCIES = libstdc++-symbol.ver $(libstdc___la_LIBADD)\n \n libstdc___la_LDFLAGS = \\\n \t-version-info @libtool_VERSION@ ${version_arg} \\\n \t-lm @LIBUNWIND_FLAG@ \n \n-libstdc___la_DEPENDENCIES = $(libstdc___la_LIBADD) linker.map\n \n # Use special rules for the deprecated source files so that they find\n # deprecated include files.\n@@ -150,13 +184,13 @@ concept-inst.o: concept-inst.cc\n # modified in a per-library or per-sub-library way.  Need to manually\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n-# as the occasion call for it. (ie, --enable-debug)\n+# as the occasion call for it. \n AM_CXXFLAGS = \\\n \t-fno-implicit-templates \\\n \t$(LIBSUPCXX_CXXFLAGS) \\\n \t$(WARN_CXXFLAGS) \\\n \t$(OPTIMIZE_CXXFLAGS) \\\n-\t$(CONFIG_CXXFLAGS) \n+\t$(CONFIG_CXXFLAGS)  \n \n \n # libstdc++ libtool notes\n@@ -188,3 +222,38 @@ LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n # compilation driver.\n CXXLINK = $(LIBTOOL) --tag CXX --mode=link $(CXX) \\\n \t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+\n+\n+# Added bits to build debug library.\n+if GLIBCPP_BUILD_DEBUG\n+all-local: build_debug\n+install-data-local: install_debug\n+else\n+all-local:\n+install-data-local: \n+endif\n+\n+debugdir = debug\n+\n+# Build parallel set of debug objects here.\n+stamp-debug: \n+\tif test ! -d ${debugdir}; then \\\n+\t  mkdir -p ${debugdir}; \\\n+\t  (cd ${debugdir}; \\\n+\t  cp ../Makefile .; \\\n+\t  sed 's/top_builddir = ../top_builddir = ..\\/../g' \\\n+\t  < Makefile > temp.1; \\\n+\t  sed 's/all-local: build_debug/all-local:/g' < temp.1 > temp.2; \\\n+\t  sed 's/install-data-local: install_debug/install-data-local:/g' \\\n+\t  < temp.2 > temp.3; \\\n+          mv temp.3 Makefile) ; \\\n+\tfi; \\\n+\techo `date` > stamp-debug; \n+\n+build_debug: stamp-debug\n+\t(cd ${debugdir} && $(MAKE) CXXFLAGS='@DEBUG_FLAGS@' all)\n+\n+# Install debug library here.\n+install_debug: \n+\t(cd ${debugdir} && $(MAKE) \\\n+\ttoolexeclibdir=@glibcpp_toolexeclibdir@/debug install)"}, {"sha": "e1fbad9e1f22b7dc5fc25da3d4c12c2202e46ed6", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 93, "deletions": 20, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=6aa43d99a33e70adb87432dc5ded2476e3bc9f28", "patch": "@@ -66,14 +66,24 @@ AR = @AR@\n AS = @AS@\n ATOMICITY_INC_SRCDIR = @ATOMICITY_INC_SRCDIR@\n AWK = @AWK@\n+BASIC_FILE_CC = @BASIC_FILE_CC@\n BASIC_FILE_H = @BASIC_FILE_H@\n CC = @CC@\n CCODECVT_C = @CCODECVT_C@\n+CCODECVT_CC = @CCODECVT_CC@\n CCODECVT_H = @CCODECVT_H@\n+CCOLLATE_CC = @CCOLLATE_CC@\n+CCTYPE_CC = @CCTYPE_CC@\n+CLOCALE_CC = @CLOCALE_CC@\n CLOCALE_H = @CLOCALE_H@\n+CLOCALE_INTERNAL_H = @CLOCALE_INTERNAL_H@\n+CMESSAGES_CC = @CMESSAGES_CC@\n CMESSAGES_H = @CMESSAGES_H@\n+CMONEY_CC = @CMONEY_CC@\n+CNUMERIC_CC = @CNUMERIC_CC@\n CPP = @CPP@\n CSTDIO_H = @CSTDIO_H@\n+CTIME_CC = @CTIME_CC@\n CXXCPP = @CXXCPP@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@\n DEBUG_FLAGS = @DEBUG_FLAGS@\n@@ -99,6 +109,7 @@ RANLIB = @RANLIB@\n SECTION_FLAGS = @SECTION_FLAGS@\n SECTION_LDFLAGS = @SECTION_LDFLAGS@\n STRIP = @STRIP@\n+SYMVER_MAP = @SYMVER_MAP@\n USE_NLS = @USE_NLS@\n VERSION = @VERSION@\n WARN_FLAGS = @WARN_FLAGS@\n@@ -111,10 +122,8 @@ glibcpp_CXX = @glibcpp_CXX@\n glibcpp_MOFILES = @glibcpp_MOFILES@\n glibcpp_POFILES = @glibcpp_POFILES@\n glibcpp_basedir = @glibcpp_basedir@\n-glibcpp_builddir = @glibcpp_builddir@\n glibcpp_localedir = @glibcpp_localedir@\n glibcpp_prefixdir = @glibcpp_prefixdir@\n-glibcpp_srcdir = @glibcpp_srcdir@\n glibcpp_thread_h = @glibcpp_thread_h@\n glibcpp_toolexecdir = @glibcpp_toolexecdir@\n glibcpp_toolexeclibdir = @glibcpp_toolexeclibdir@\n@@ -131,19 +140,22 @@ mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n # Cross compiler support.\n CXX = @glibcpp_CXX@\n+glibcpp_srcdir = @glibcpp_srcdir@\n+glibcpp_builddir = @glibcpp_builddir@\n toolexecdir = @glibcpp_toolexecdir@\n toolexeclibdir = @glibcpp_toolexeclibdir@\n toolexeclib_LTLIBRARIES = libstdc++.la\n+@GLIBCPP_BUILD_VERSIONED_SHLIB_TRUE@version_arg = @GLIBCPP_BUILD_VERSIONED_SHLIB_TRUE@-Wl,--version-script=libstdc++-symbol.ver\n+@GLIBCPP_BUILD_VERSIONED_SHLIB_FALSE@version_arg = \n \n # Compile flags that should be constant throughout the build, both for\n # SUBDIRS and for libstdc++-v3 in general.\n OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n \n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n-# NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n CONFIG_CXXFLAGS = \\\n-\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @DEBUG_FLAGS@ \n+\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@\n \n \n # Warning flags to use.\n@@ -165,7 +177,8 @@ INCLUDES = \\\n \t$(TOPLEVEL_INCLUDES)\n \n \n-# Source files linked in via configuration magic for a particular target.\n+# Source files linked in via configuration/make substitution for a\n+# particular target.\n target_sources = \\\n \tcodecvt_members.cc \\\n \tcollate_members.cc \\\n@@ -176,8 +189,8 @@ target_sources = \\\n \ttime_members.cc\n \n \n-# Source files linked in via configuration magic for a particular\n-# target, but with ad hoc naming rules.\n+# Source files linked in via configuration/make substitution for a\n+# particular target, but with ad hoc naming rules.\n target_sources_extra = \\\n \tbasic_file.cc \\\n \tc++locale.cc \n@@ -222,19 +235,17 @@ VPATH = $(top_srcdir)/src:$(top_srcdir)\n libstdc___la_SOURCES = $(sources)\n \n libstdc___la_LIBADD = \\\n-\t../libmath/libmath.la @libio_la@ \\\n-\t../libsupc++/libsupc++convenience.la\n+\t$(top_builddir)/libmath/libmath.la @libio_la@ \\\n+\t$(top_builddir)/libsupc++/libsupc++convenience.la\n \n-@GLIBCPP_BUILD_VERSIONED_SHLIB_TRUE@version_arg = @GLIBCPP_BUILD_VERSIONED_SHLIB_TRUE@-Wl,--version-script=linker.map\n-@GLIBCPP_BUILD_VERSIONED_SHLIB_FALSE@version_arg = \n+\n+libstdc___la_DEPENDENCIES = libstdc++-symbol.ver $(libstdc___la_LIBADD)\n \n libstdc___la_LDFLAGS = \\\n \t-version-info @libtool_VERSION@ ${version_arg} \\\n \t-lm @LIBUNWIND_FLAG@ \n \n \n-libstdc___la_DEPENDENCIES = $(libstdc___la_LIBADD) linker.map\n-\n # Use special rules for the deprecated source files so that they find\n # deprecated include files.\n GLIBCPP_INCLUDE_DIR = @glibcpp_builddir@/include\n@@ -249,7 +260,7 @@ AM_CXXFLAGS = \\\n \t$(LIBSUPCXX_CXXFLAGS) \\\n \t$(WARN_CXXFLAGS) \\\n \t$(OPTIMIZE_CXXFLAGS) \\\n-\t$(CONFIG_CXXFLAGS) \n+\t$(CONFIG_CXXFLAGS)  \n \n \n # libstdc++ libtool notes\n@@ -283,6 +294,8 @@ LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n CXXLINK = $(LIBTOOL) --tag CXX --mode=link $(CXX) \\\n \t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n+\n+debugdir = debug\n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = \n LTLIBRARIES =  $(toolexeclib_LTLIBRARIES)\n@@ -460,15 +473,15 @@ install-info: install-info-am\n install-exec-am: install-toolexeclibLTLIBRARIES\n install-exec: install-exec-am\n \n-install-data-am:\n+install-data-am: install-data-local\n install-data: install-data-am\n \n install-am: all-am\n \t@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am\n install: install-am\n uninstall-am: uninstall-toolexeclibLTLIBRARIES\n uninstall: uninstall-am\n-all-am: Makefile $(LTLIBRARIES)\n+all-am: Makefile $(LTLIBRARIES) all-local\n all-redirect: all-am\n install-strip:\n \t$(MAKE) $(AM_MAKEFLAGS) AM_INSTALL_PROGRAM_FLAGS=-s install\n@@ -521,11 +534,42 @@ maintainer-clean-compile mostlyclean-libtool distclean-libtool \\\n clean-libtool maintainer-clean-libtool tags mostlyclean-tags \\\n distclean-tags clean-tags maintainer-clean-tags distdir info-am info \\\n dvi-am dvi check check-am installcheck-am installcheck install-info-am \\\n-install-info install-exec-am install-exec install-data-am install-data \\\n-install-am install uninstall-am uninstall all-redirect all-am all \\\n-installdirs mostlyclean-generic distclean-generic clean-generic \\\n-maintainer-clean-generic clean mostlyclean distclean maintainer-clean\n+install-info install-exec-am install-exec install-data-local \\\n+install-data-am install-data install-am install uninstall-am uninstall \\\n+all-local all-redirect all-am all installdirs mostlyclean-generic \\\n+distclean-generic clean-generic maintainer-clean-generic clean \\\n+mostlyclean distclean maintainer-clean\n+\n+@GLIBCPP_BUILD_VERSIONED_SHLIB_TRUE@libstdc++-symbol.ver:  ${glibcpp_srcdir}/@SYMVER_MAP@\n+@GLIBCPP_BUILD_VERSIONED_SHLIB_TRUE@\t@LN_S@  $< ./libstdc++-symbol.ver || true\n+@GLIBCPP_BUILD_VERSIONED_SHLIB_FALSE@libstdc++-symbol.ver:\n \n+codecvt_members.cc: ${glibcpp_srcdir}/@CCODECVT_CC@\n+\t@LN_S@ $< . || true\n+\n+collate_members.cc: ${glibcpp_srcdir}/@CCOLLATE_CC@\n+\t@LN_S@ $< . || true\n+\n+ctype_members.cc: ${glibcpp_srcdir}/@CCTYPE_CC@\n+\t@LN_S@ $< . || true\n+\n+messages_members.cc: ${glibcpp_srcdir}/@CMESSAGES_CC@\n+\t@LN_S@ $< . || true\n+\n+monetary_members.cc: ${glibcpp_srcdir}/@CMONEY_CC@\n+\t@LN_S@ $< . || true\n+\n+numeric_members.cc: ${glibcpp_srcdir}/@CNUMERIC_CC@\n+\t@LN_S@ $< . || true\n+\n+time_members.cc: ${glibcpp_srcdir}/@CTIME_CC@\n+\t@LN_S@ $< . || true\n+\n+c++locale.cc: ${glibcpp_srcdir}/@CLOCALE_CC@\n+\t@LN_S@ $< ./$@ || true\n+\n+basic_file.cc: ${glibcpp_srcdir}/@BASIC_FILE_CC@\n+\t@LN_S@ $< ./$@ || true\n strstream.lo: strstream.cc\n \t$(LTCXXCOMPILE) -I$(GLIBCPP_INCLUDE_DIR)/backward -Wno-deprecated -c $<\n strstream.o: strstream.cc\n@@ -539,6 +583,35 @@ concept-inst.lo: concept-inst.cc\n concept-inst.o: concept-inst.cc\n \t$(CXXCOMPILE) -D_GLIBCPP_CONCEPT_CHECKS -fimplicit-templates -c $<\n \n+# Added bits to build debug library.\n+@GLIBCPP_BUILD_DEBUG_TRUE@all-local: build_debug\n+@GLIBCPP_BUILD_DEBUG_TRUE@install-data-local: install_debug\n+@GLIBCPP_BUILD_DEBUG_FALSE@all-local:\n+@GLIBCPP_BUILD_DEBUG_FALSE@install-data-local: \n+\n+# Build parallel set of debug objects here.\n+stamp-debug: \n+\tif test ! -d ${debugdir}; then \\\n+\t  mkdir -p ${debugdir}; \\\n+\t  (cd ${debugdir}; \\\n+\t  cp ../Makefile .; \\\n+\t  sed 's/top_builddir = ../top_builddir = ..\\/../g' \\\n+\t  < Makefile > temp.1; \\\n+\t  sed 's/all-local: build_debug/all-local:/g' < temp.1 > temp.2; \\\n+\t  sed 's/install-data-local: install_debug/install-data-local:/g' \\\n+\t  < temp.2 > temp.3; \\\n+          mv temp.3 Makefile) ; \\\n+\tfi; \\\n+\techo `date` > stamp-debug; \n+\n+build_debug: stamp-debug\n+\t(cd ${debugdir} && $(MAKE) CXXFLAGS='@DEBUG_FLAGS@' all)\n+\n+# Install debug library here.\n+install_debug: \n+\t(cd ${debugdir} && $(MAKE) \\\n+\ttoolexeclibdir=@glibcpp_toolexeclibdir@/debug install)\n+\n # Tell versions [3.59,3.63) of GNU make to not export all variables.\n # Otherwise a system limit (for SysV at least) may be exceeded.\n .NOEXPORT:"}, {"sha": "3034ef29c29bd024a7d5471d0609ac419077dd17", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa43d99a33e70adb87432dc5ded2476e3bc9f28/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=6aa43d99a33e70adb87432dc5ded2476e3bc9f28", "patch": "@@ -67,14 +67,24 @@ AR = @AR@\n AS = @AS@\n ATOMICITY_INC_SRCDIR = @ATOMICITY_INC_SRCDIR@\n AWK = @AWK@\n+BASIC_FILE_CC = @BASIC_FILE_CC@\n BASIC_FILE_H = @BASIC_FILE_H@\n CC = @CC@\n CCODECVT_C = @CCODECVT_C@\n+CCODECVT_CC = @CCODECVT_CC@\n CCODECVT_H = @CCODECVT_H@\n+CCOLLATE_CC = @CCOLLATE_CC@\n+CCTYPE_CC = @CCTYPE_CC@\n+CLOCALE_CC = @CLOCALE_CC@\n CLOCALE_H = @CLOCALE_H@\n+CLOCALE_INTERNAL_H = @CLOCALE_INTERNAL_H@\n+CMESSAGES_CC = @CMESSAGES_CC@\n CMESSAGES_H = @CMESSAGES_H@\n+CMONEY_CC = @CMONEY_CC@\n+CNUMERIC_CC = @CNUMERIC_CC@\n CPP = @CPP@\n CSTDIO_H = @CSTDIO_H@\n+CTIME_CC = @CTIME_CC@\n CXXCPP = @CXXCPP@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@\n DEBUG_FLAGS = @DEBUG_FLAGS@\n@@ -105,6 +115,7 @@ RANLIB = @RANLIB@\n SECTION_FLAGS = @SECTION_FLAGS@\n SECTION_LDFLAGS = @SECTION_LDFLAGS@\n STRIP = @STRIP@\n+SYMVER_MAP = @SYMVER_MAP@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n USE_NLS = @USE_NLS@\n VERSION = @VERSION@"}]}