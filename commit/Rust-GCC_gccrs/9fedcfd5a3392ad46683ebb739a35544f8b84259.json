{"sha": "9fedcfd5a3392ad46683ebb739a35544f8b84259", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZlZGNmZDVhMzM5MmFkNDY2ODNlYmI3MzlhMzU1NDRmOGI4NDI1OQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@purist.soma.redhat.com", "date": "2000-10-21T19:40:17Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-10-21T19:40:17Z"}, "message": "acinclude.m4 (GLIBCPP_ENABLE_LONG_DOUBLE): New macro.\n\n\n2000-10-21  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n\n\t* acinclude.m4 (GLIBCPP_ENABLE_LONG_DOUBLE): New macro.\n\t* aclocal.m4: Regenerate.\n\t* configure.in: Use it.\n\t* configure: Regenerate.\n\t* src/complexl.cc: Fixup.\n\t* include/c_std/bits/std_cmath.h: Fixup.\n\t* include/c/bits/std_cmath.h: Fixup.\n\nFrom-SVN: r36998", "tree": {"sha": "e262e052d287527aff2f852296b4f535f8998b30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e262e052d287527aff2f852296b4f535f8998b30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fedcfd5a3392ad46683ebb739a35544f8b84259", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fedcfd5a3392ad46683ebb739a35544f8b84259", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fedcfd5a3392ad46683ebb739a35544f8b84259", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fedcfd5a3392ad46683ebb739a35544f8b84259/comments", "author": null, "committer": null, "parents": [{"sha": "4037042b88c4b223545d79e04b7d5348cf278e36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4037042b88c4b223545d79e04b7d5348cf278e36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4037042b88c4b223545d79e04b7d5348cf278e36"}], "stats": {"total": 2236, "additions": 1236, "deletions": 1000}, "files": [{"sha": "1ae3a33b6e36e3e8922ee40841e17f08d6626bf9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fedcfd5a3392ad46683ebb739a35544f8b84259/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fedcfd5a3392ad46683ebb739a35544f8b84259/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9fedcfd5a3392ad46683ebb739a35544f8b84259", "patch": "@@ -1,5 +1,13 @@\n 2000-10-21  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n \n+\t* acinclude.m4 (GLIBCPP_ENABLE_LONG_DOUBLE): New macro.\n+\t* aclocal.m4: Regenerate.\n+\t* configure.in: Use it.\n+\t* configure: Regenerate.\n+\t* src/complexl.cc: Fixup.\n+\t* include/c_std/bits/std_cmath.h: Fixup.\n+\t* include/c/bits/std_cmath.h: Fixup.\n+\t\n \t* docs/links.html: Add links to defects list, standards FAQ.\n \n \t* testsuite/21_strings/ctor_copy_dtor.cc (test01): Disable tests"}, {"sha": "48924791f1a0e9da5c5f9e0664dcc5dd2afb5d76", "filename": "libstdc++-v3/acconfig.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fedcfd5a3392ad46683ebb739a35544f8b84259/libstdc%2B%2B-v3%2Facconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fedcfd5a3392ad46683ebb739a35544f8b84259/libstdc%2B%2B-v3%2Facconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facconfig.h?ref=9fedcfd5a3392ad46683ebb739a35544f8b84259", "patch": "@@ -3,6 +3,9 @@\n // Include support for 'long long' and 'unsigned long long'.\n #undef _GLIBCPP_USE_LONG_LONG\n \n+// Include support for 'long double'.\n+#undef _GLIBCPP_USE_LONG_DOUBLE\n+\n // Include support for shadow headers, ie --enable-cshadow-headers.\n #undef _GLIBCPP_USE_SHADOW_HEADERS\n "}, {"sha": "ff8894637576ffde529fa029e34b5df9d9442736", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fedcfd5a3392ad46683ebb739a35544f8b84259/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fedcfd5a3392ad46683ebb739a35544f8b84259/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=9fedcfd5a3392ad46683ebb739a35544f8b84259", "patch": "@@ -1411,6 +1411,50 @@ AC_DEFUN(GLIBCPP_ENABLE_LONG_LONG, [dnl\n ])\n \n \n+dnl\n+dnl Check for template specializations for the 'long double' type extension.\n+dnl\n+dnl GLIBCPP_ENABLE_LONG_DOUBLE\n+dnl --enable-long-long defines _GLIBCPP_USE_LONG_DOUBLE\n+dnl --disable-long-long leaves _GLIBCPP_USE_LONG_DOUBLE undefined\n+dnl  +  Usage:  GLIBCPP_ENABLE_LONG_DOUBLE[(DEFAULT)]\n+dnl       Where DEFAULT is either `yes' or `no'.  If ommitted, it\n+dnl       defaults to `no'.\n+dnl  +  If 'long long' stuff is not available, ignores DEFAULT and sets `no'.\n+dnl\n+dnl GLIBCPP_ENABLE_LONG_DOUBLE\n+AC_DEFUN(GLIBCPP_ENABLE_LONG_DOUBLE, [dnl\n+  define([GLIBCPP_ENABLE_LONG_DOUBLE_DEFAULT], ifelse($1, yes, yes, no))dnl\n+\n+  AC_ARG_ENABLE(long-double,\n+  changequote(<<, >>)dnl\n+  <<--enable-long-double      turns on 'long double' [default=>>GLIBCPP_ENABLE_LONG_LONG_DEFAULT],\n+  changequote([, ])dnl\n+  [case \"$enableval\" in\n+   yes) enable_long_double=yes ;;\n+   no)  enable_long_double=no ;;\n+   *)   AC_MSG_ERROR([Unknown argument to enable/disable long double]) ;;\n+   esac],\n+  enable_long_double=GLIBCPP_ENABLE_LONG_DOUBLE_DEFAULT)dnl\n+\n+  # Check for the existance of functions used if long double is enabled.\n+  AC_CHECK_FUNC(cosl,,ac_cosl=no)\n+  AC_CHECK_FUNC(sinl,,ac_sinl=no)\n+\n+  AC_MSG_CHECKING([for enabled long double])\n+  if test x\"$ac_cosl\" = xno || test x\"$ac_sinl\" = xno; then \n+    enable_long_double=no; \n+  fi; \n+  AC_MSG_RESULT($enable_long_double)\n+\n+  dnl Option parsed, now set things appropriately\n+  case \"$enable_long_double\" in\n+    yes)  AC_DEFINE(_GLIBCPP_USE_LONG_DOUBLE)\n+          ;;\n+  esac\n+])\n+\n+\n dnl\n dnl Check for whether or not to do shadowed C headers.\n dnl"}, {"sha": "30ab518ca259c988f1cfd6b00b8d92fd1e5a2cca", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fedcfd5a3392ad46683ebb739a35544f8b84259/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fedcfd5a3392ad46683ebb739a35544f8b84259/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=9fedcfd5a3392ad46683ebb739a35544f8b84259", "patch": "@@ -1423,6 +1423,50 @@ AC_DEFUN(GLIBCPP_ENABLE_LONG_LONG, [dnl\n ])\n \n \n+dnl\n+dnl Check for template specializations for the 'long double' type extension.\n+dnl\n+dnl GLIBCPP_ENABLE_LONG_DOUBLE\n+dnl --enable-long-long defines _GLIBCPP_USE_LONG_DOUBLE\n+dnl --disable-long-long leaves _GLIBCPP_USE_LONG_DOUBLE undefined\n+dnl  +  Usage:  GLIBCPP_ENABLE_LONG_DOUBLE[(DEFAULT)]\n+dnl       Where DEFAULT is either `yes' or `no'.  If ommitted, it\n+dnl       defaults to `no'.\n+dnl  +  If 'long long' stuff is not available, ignores DEFAULT and sets `no'.\n+dnl\n+dnl GLIBCPP_ENABLE_LONG_DOUBLE\n+AC_DEFUN(GLIBCPP_ENABLE_LONG_DOUBLE, [dnl\n+  define([GLIBCPP_ENABLE_LONG_DOUBLE_DEFAULT], ifelse($1, yes, yes, no))dnl\n+\n+  AC_ARG_ENABLE(long-double,\n+  changequote(<<, >>)dnl\n+  <<--enable-long-double      turns on 'long double' [default=>>GLIBCPP_ENABLE_LONG_LONG_DEFAULT],\n+  changequote([, ])dnl\n+  [case \"$enableval\" in\n+   yes) enable_long_double=yes ;;\n+   no)  enable_long_double=no ;;\n+   *)   AC_MSG_ERROR([Unknown argument to enable/disable long double]) ;;\n+   esac],\n+  enable_long_double=GLIBCPP_ENABLE_LONG_DOUBLE_DEFAULT)dnl\n+\n+  # Check for the existance of functions used if long double is enabled.\n+  AC_CHECK_FUNC(cosl,,ac_cosl=no)\n+  AC_CHECK_FUNC(sinl,,ac_sinl=no)\n+\n+  AC_MSG_CHECKING([for enabled long double])\n+  if test x\"$ac_cosl\" = xno || test x\"$ac_sinl\" = xno; then \n+    enable_long_double=no; \n+  fi; \n+  AC_MSG_RESULT($enable_long_double)\n+\n+  dnl Option parsed, now set things appropriately\n+  case \"$enable_long_double\" in\n+    yes)  AC_DEFINE(_GLIBCPP_USE_LONG_DOUBLE)\n+          ;;\n+  esac\n+])\n+\n+\n dnl\n dnl Check for whether or not to do shadowed C headers.\n dnl"}, {"sha": "b3328a420e553a75084cd6789a5bf972f84fa772", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fedcfd5a3392ad46683ebb739a35544f8b84259/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fedcfd5a3392ad46683ebb739a35544f8b84259/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=9fedcfd5a3392ad46683ebb739a35544f8b84259", "patch": "@@ -6,6 +6,9 @@\n // Include support for 'long long' and 'unsigned long long'.\n #undef _GLIBCPP_USE_LONG_LONG\n \n+// Include support for 'long double'.\n+#undef _GLIBCPP_USE_LONG_DOUBLE\n+\n // Include support for shadow headers, ie --enable-cshadow-headers.\n #undef _GLIBCPP_USE_SHADOW_HEADERS\n "}, {"sha": "7a6bd46ddaca80957e3635591071aad94e21adb2", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1125, "deletions": 995, "changes": 2120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fedcfd5a3392ad46683ebb739a35544f8b84259/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fedcfd5a3392ad46683ebb739a35544f8b84259/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=9fedcfd5a3392ad46683ebb739a35544f8b84259"}, {"sha": "64db24bf5676fffaeee4f9dfa2abf87db716664b", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fedcfd5a3392ad46683ebb739a35544f8b84259/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fedcfd5a3392ad46683ebb739a35544f8b84259/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=9fedcfd5a3392ad46683ebb739a35544f8b84259", "patch": "@@ -35,6 +35,7 @@ AC_CACHE_SAVE\n GLIBCPP_ENABLE_DEBUG($USE_MAINTAINER_MODE)\n GLIBCPP_ENABLE_CSTDIO\n GLIBCPP_ENABLE_LONG_LONG(yes)\n+GLIBCPP_ENABLE_LONG_DOUBLE(yes)\n GLIBCPP_ENABLE_SHADOW(no)\n GLIBCPP_ENABLE_THREADS\n GLIBCPP_ENABLE_ATOMICITY"}, {"sha": "0db16240001d4e49a470047ebfb395aaadbda57e", "filename": "libstdc++-v3/include/c/bits/std_cmath.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fedcfd5a3392ad46683ebb739a35544f8b84259/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fedcfd5a3392ad46683ebb739a35544f8b84259/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cmath.h?ref=9fedcfd5a3392ad46683ebb739a35544f8b84259", "patch": "@@ -367,6 +367,7 @@ namespace std {\n     //\n     // long double\n     //\n+#ifdef _GLIBCPP_USE_LONG_DOUBLE\n #if _GLIBCPP_HAVE___BUILTIN_FABSL\n     inline long double abs(long double __x)\n       { return __builtin_fabsl(__x); }\n@@ -499,6 +500,7 @@ namespace std {\n       { return ::tanhl(__x); }\n #endif\n \n+#endif // _GLIBCPP_USE_LONG_DOUBLE\n } // std\n \n #endif // _CPP_CMATH"}, {"sha": "dcc5103bbdbd3c23725fe9ce5d48843d11aef3f4", "filename": "libstdc++-v3/include/c_std/bits/std_cmath.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fedcfd5a3392ad46683ebb739a35544f8b84259/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fedcfd5a3392ad46683ebb739a35544f8b84259/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cmath.h?ref=9fedcfd5a3392ad46683ebb739a35544f8b84259", "patch": "@@ -330,7 +330,7 @@ namespace _C_legacy {\n   inline double \n   _CPP_tanh_capture(double __x) { return tanh(__x); }\n \n-\n+#ifdef _GLIBCPP_USE_LONG_DOUBLE\n #if _GLIBCPP_HAVE_ACOSL\n   inline long double \n   _CPP_acos_capture(long double __x) { return acosl(__x); }\n@@ -535,9 +535,7 @@ namespace _C_legacy {\n   inline long double \n   _CPP_tanh_capture(long double __x) { return tanh(static_cast<double>(__x)); }\n #endif\n-\n-  namespace _C_shadow { }\n-\n+#endif // _GLIBCPP_USE_LONG_DOUBLE\n } // namespace _C_legacy\n \n # undef abs\n@@ -720,6 +718,7 @@ namespace std {\n   inline double \n   tanh(double __x) { return _C_legacy::_CPP_tanh_capture(__x); }\n \n+#ifdef _GLIBCPP_USE_LONG_DOUBLE\n   inline long double \n   abs(long double __x) { return _C_legacy::_CPP_fabs_capture(__x); }\n \n@@ -797,6 +796,8 @@ namespace std {\n \n   inline long double \n   tanh(long double __x) { return _C_legacy::_CPP_tanh_capture(__x); }\n+#endif // _GLIBCPP_USE_LONG_DOUBLE\n+\n } // namespace std\n \n # undef _IN_C_LEGACY_"}, {"sha": "d0ebb6236c2a845fa71e139c8c3135be31579983", "filename": "libstdc++-v3/src/complexl.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fedcfd5a3392ad46683ebb739a35544f8b84259/libstdc%2B%2B-v3%2Fsrc%2Fcomplexl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fedcfd5a3392ad46683ebb739a35544f8b84259/libstdc%2B%2B-v3%2Fsrc%2Fcomplexl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcomplexl.cc?ref=9fedcfd5a3392ad46683ebb739a35544f8b84259", "patch": "@@ -1,5 +1,5 @@\n #include <bits/c++config.h>\n-#ifdef _GLIBCPP_USE_LONG_LONG\n+#ifdef _GLIBCPP_USE_LONG_DOUBLE\n /* We compile these functions only when we have the long double functions\n    available.  */\n #define FLT long double"}]}