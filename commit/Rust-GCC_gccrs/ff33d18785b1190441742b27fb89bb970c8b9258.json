{"sha": "ff33d18785b1190441742b27fb89bb970c8b9258", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYzM2QxODc4NWIxMTkwNDQxNzQyYjI3ZmI4OWJiOTcwYzhiOTI1OA==", "commit": {"author": {"name": "Kwok Cheung Yeung", "email": "kcy@codesourcery.com", "date": "2019-11-07T00:07:04Z"}, "committer": {"name": "Kwok Cheung Yeung", "email": "kcy@gcc.gnu.org", "date": "2019-11-07T00:07:04Z"}, "message": "Support using multiple registers to hold the frame pointer\n\nWhen multiple hard registers are required to hold the frame pointer,\nensure that the registers after the first are marked as non-allocatable,\nlive and eliminable as well.\n\n2019-11-07  Kwok Cheung Yeung  <kcy@codesourcery.com>\n\n\tgcc/\n\t* ira.c (setup_alloc_regs): Setup no_unit_alloc_regs for\n\tframe pointer in multiple registers.\n\t(ira_setup_eliminable_regset): Setup eliminable_regset,\n\tira_no_alloc_regs and regs_ever_live for frame pointer in\n\tmultiple registers.\n\nFrom-SVN: r277895", "tree": {"sha": "550dfd60b511c26ceb38535232227e59225ef6c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/550dfd60b511c26ceb38535232227e59225ef6c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff33d18785b1190441742b27fb89bb970c8b9258", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff33d18785b1190441742b27fb89bb970c8b9258", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff33d18785b1190441742b27fb89bb970c8b9258", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff33d18785b1190441742b27fb89bb970c8b9258/comments", "author": {"login": "k-yeung", "id": 16960193, "node_id": "MDQ6VXNlcjE2OTYwMTkz", "avatar_url": "https://avatars.githubusercontent.com/u/16960193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/k-yeung", "html_url": "https://github.com/k-yeung", "followers_url": "https://api.github.com/users/k-yeung/followers", "following_url": "https://api.github.com/users/k-yeung/following{/other_user}", "gists_url": "https://api.github.com/users/k-yeung/gists{/gist_id}", "starred_url": "https://api.github.com/users/k-yeung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/k-yeung/subscriptions", "organizations_url": "https://api.github.com/users/k-yeung/orgs", "repos_url": "https://api.github.com/users/k-yeung/repos", "events_url": "https://api.github.com/users/k-yeung/events{/privacy}", "received_events_url": "https://api.github.com/users/k-yeung/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7b88f66de61f4533bbd7ae0124c4260c2959f1e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b88f66de61f4533bbd7ae0124c4260c2959f1e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b88f66de61f4533bbd7ae0124c4260c2959f1e0"}], "stats": {"total": 41, "additions": 28, "deletions": 13}, "files": [{"sha": "f5ef703927dd36c2db0629698d1694b3b265ab12", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff33d18785b1190441742b27fb89bb970c8b9258/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff33d18785b1190441742b27fb89bb970c8b9258/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff33d18785b1190441742b27fb89bb970c8b9258", "patch": "@@ -1,3 +1,11 @@\n+2019-11-07  Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\n+\t* ira.c (setup_alloc_regs): Setup no_unit_alloc_regs for\n+\tframe pointer in multiple registers.\n+\t(ira_setup_eliminable_regset): Setup eliminable_regset,\n+\tira_no_alloc_regs and regs_ever_live for frame pointer in\n+\tmultiple registers.\n+\n 2019-11-06  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \t* config/rs6000/vsx.md (xxswapd_<mode>): Add support for V2DF and"}, {"sha": "5df995364dd94a33c5dd6fa6d7a011a636e240d8", "filename": "gcc/ira.c", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff33d18785b1190441742b27fb89bb970c8b9258/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff33d18785b1190441742b27fb89bb970c8b9258/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=ff33d18785b1190441742b27fb89bb970c8b9258", "patch": "@@ -515,7 +515,8 @@ setup_alloc_regs (bool use_hard_frame_p)\n #endif\n   no_unit_alloc_regs = fixed_nonglobal_reg_set;\n   if (! use_hard_frame_p)\n-    SET_HARD_REG_BIT (no_unit_alloc_regs, HARD_FRAME_POINTER_REGNUM);\n+    add_to_hard_reg_set (&no_unit_alloc_regs, Pmode,\n+\t\t\t HARD_FRAME_POINTER_REGNUM);\n   setup_class_hard_regs ();\n }\n \n@@ -2248,6 +2249,7 @@ ira_setup_eliminable_regset (void)\n {\n   int i;\n   static const struct {const int from, to; } eliminables[] = ELIMINABLE_REGS;\n+  int fp_reg_count = hard_regno_nregs (HARD_FRAME_POINTER_REGNUM, Pmode);\n \n   /* Setup is_leaf as frame_pointer_required may use it.  This function\n      is called by sched_init before ira if scheduling is enabled.  */\n@@ -2276,7 +2278,8 @@ ira_setup_eliminable_regset (void)\n        frame pointer in LRA.  */\n \n   if (frame_pointer_needed)\n-    df_set_regs_ever_live (HARD_FRAME_POINTER_REGNUM, true);\n+    for (i = 0; i < fp_reg_count; i++)\n+      df_set_regs_ever_live (HARD_FRAME_POINTER_REGNUM + i, true);\n     \n   ira_no_alloc_regs = no_unit_alloc_regs;\n   CLEAR_HARD_REG_SET (eliminable_regset);\n@@ -2306,17 +2309,21 @@ ira_setup_eliminable_regset (void)\n     }\n   if (!HARD_FRAME_POINTER_IS_FRAME_POINTER)\n     {\n-      if (!TEST_HARD_REG_BIT (crtl->asm_clobbers, HARD_FRAME_POINTER_REGNUM))\n-\t{\n-\t  SET_HARD_REG_BIT (eliminable_regset, HARD_FRAME_POINTER_REGNUM);\n-\t  if (frame_pointer_needed)\n-\t    SET_HARD_REG_BIT (ira_no_alloc_regs, HARD_FRAME_POINTER_REGNUM);\n-\t}\n-      else if (frame_pointer_needed)\n-\terror (\"%s cannot be used in %<asm%> here\",\n-\t       reg_names[HARD_FRAME_POINTER_REGNUM]);\n-      else\n-\tdf_set_regs_ever_live (HARD_FRAME_POINTER_REGNUM, true);\n+      for (i = 0; i < fp_reg_count; i++)\n+\tif (!TEST_HARD_REG_BIT (crtl->asm_clobbers,\n+\t\t\t\tHARD_FRAME_POINTER_REGNUM + i))\n+\t  {\n+\t    SET_HARD_REG_BIT (eliminable_regset,\n+\t\t\t      HARD_FRAME_POINTER_REGNUM + i);\n+\t    if (frame_pointer_needed)\n+\t      SET_HARD_REG_BIT (ira_no_alloc_regs,\n+\t\t\t\tHARD_FRAME_POINTER_REGNUM + i);\n+\t  }\n+\telse if (frame_pointer_needed)\n+\t  error (\"%s cannot be used in %<asm%> here\",\n+\t\t reg_names[HARD_FRAME_POINTER_REGNUM + i]);\n+\telse\n+\t  df_set_regs_ever_live (HARD_FRAME_POINTER_REGNUM + i, true);\n     }\n }\n "}]}