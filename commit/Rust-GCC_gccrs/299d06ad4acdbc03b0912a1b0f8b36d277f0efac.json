{"sha": "299d06ad4acdbc03b0912a1b0f8b36d277f0efac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk5ZDA2YWQ0YWNkYmMwM2IwOTEyYTFiMGY4YjM2ZDI3N2YwZWZhYw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-01-19T22:39:31Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-01-19T22:39:31Z"}, "message": "arm-protos.h: PROTO -> PARAMS.\n\n        * config/arm/arm-protos.h: PROTO -> PARAMS.\n        * config/arm/arm.c: Likewise.\n        * config/c4x/c4x.c: Likewise.\n        * config/fr30/fr30-protos.h: Likewise.\n        * config/nextstep.c: Likewise.\n        * config/pa/pa.c: Likewise.\n        * config/pj/pj.c: Likewise.\n        * config/rs6000/rs6000.c: Likewise.\n        * config/v850/v850-protos.h: Likewise.\n        * config/v850/v850.c: Likewise.\n\nFrom-SVN: r31520", "tree": {"sha": "5242ef01e32f682cb45faf7c68589df1967ce35b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5242ef01e32f682cb45faf7c68589df1967ce35b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/299d06ad4acdbc03b0912a1b0f8b36d277f0efac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/299d06ad4acdbc03b0912a1b0f8b36d277f0efac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/299d06ad4acdbc03b0912a1b0f8b36d277f0efac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/299d06ad4acdbc03b0912a1b0f8b36d277f0efac/comments", "author": null, "committer": null, "parents": [{"sha": "f50ec635fc7b60d4c95b13750991c3ba8b77bc04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f50ec635fc7b60d4c95b13750991c3ba8b77bc04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f50ec635fc7b60d4c95b13750991c3ba8b77bc04"}], "stats": {"total": 473, "additions": 243, "deletions": 230}, "files": [{"sha": "bd37cb07d08eb2878756dc726c0c43a035dcb972", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299d06ad4acdbc03b0912a1b0f8b36d277f0efac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299d06ad4acdbc03b0912a1b0f8b36d277f0efac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=299d06ad4acdbc03b0912a1b0f8b36d277f0efac", "patch": "@@ -1,3 +1,16 @@\n+2000-01-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* config/arm/arm-protos.h: PROTO -> PARAMS.\n+\t* config/arm/arm.c: Likewise.\n+\t* config/c4x/c4x.c: Likewise.\n+\t* config/fr30/fr30-protos.h: Likewise.\n+\t* config/nextstep.c: Likewise.\n+\t* config/pa/pa.c: Likewise.\n+\t* config/pj/pj.c: Likewise.\n+\t* config/rs6000/rs6000.c: Likewise.\n+\t* config/v850/v850-protos.h: Likewise.\n+\t* config/v850/v850.c: Likewise.\n+\n 2000-01-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* i370-protos.h: New file."}, {"sha": "3277395937b1e874134e973b64384b41eac25bc7", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 112, "deletions": 112, "changes": 224, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299d06ad4acdbc03b0912a1b0f8b36d277f0efac/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299d06ad4acdbc03b0912a1b0f8b36d277f0efac/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=299d06ad4acdbc03b0912a1b0f8b36d277f0efac", "patch": "@@ -20,134 +20,134 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-extern void   arm_expand_prologue\t\tPROTO ((void));\n-extern void   arm_finalize_pic \t\t\tPROTO ((void));\n-extern char * arm_output_epilogue\t\tPROTO ((void));\n-extern void   arm_override_options \t\tPROTO ((void));\n-extern void   arm_poke_function_name \t\tPROTO ((FILE *, char *));\n-extern int    arm_process_pragma\t\tPROTO ((int (*)(void), void (*) (int), char *));\n-extern int    arm_regno_class \t\t\tPROTO ((int));\n-extern int    arm_volatile_func\t\t\tPROTO ((void));\n-extern int    const_ok_for_arm\t\t\tPROTO ((HOST_WIDE_INT));\n-extern void   output_arm_prologue\t\tPROTO ((FILE *, int));\n-extern void   output_ascii_pseudo_op\t\tPROTO ((FILE *, unsigned char *, int));\n-extern void   output_func_epilogue\t\tPROTO ((int));\n-extern void   output_func_prologue\t\tPROTO ((FILE *, int));\n-extern int    use_return_insn\t\t\tPROTO ((int));\n+extern void   arm_expand_prologue\t\tPARAMS ((void));\n+extern void   arm_finalize_pic \t\t\tPARAMS ((void));\n+extern char * arm_output_epilogue\t\tPARAMS ((void));\n+extern void   arm_override_options \t\tPARAMS ((void));\n+extern void   arm_poke_function_name \t\tPARAMS ((FILE *, char *));\n+extern int    arm_process_pragma\t\tPARAMS ((int (*)(void), void (*) (int), char *));\n+extern int    arm_regno_class \t\t\tPARAMS ((int));\n+extern int    arm_volatile_func\t\t\tPARAMS ((void));\n+extern int    const_ok_for_arm\t\t\tPARAMS ((HOST_WIDE_INT));\n+extern void   output_arm_prologue\t\tPARAMS ((FILE *, int));\n+extern void   output_ascii_pseudo_op\t\tPARAMS ((FILE *, unsigned char *, int));\n+extern void   output_func_epilogue\t\tPARAMS ((int));\n+extern void   output_func_prologue\t\tPARAMS ((FILE *, int));\n+extern int    use_return_insn\t\t\tPARAMS ((int));\n #if defined AOF_ASSEMBLER \n-extern void   aof_add_import\t\t\tPROTO ((char *));\n-extern char * aof_data_section\t\t\tPROTO ((void));\n-extern void   aof_delete_import\t\t\tPROTO ((char *));\n-extern void   aof_dump_imports\t\t\tPROTO ((FILE *));\n-extern void   aof_dump_pic_table\t\tPROTO ((FILE *));\n-extern char * aof_text_section\t\t\tPROTO ((void));\n+extern void   aof_add_import\t\t\tPARAMS ((char *));\n+extern char * aof_data_section\t\t\tPARAMS ((void));\n+extern void   aof_delete_import\t\t\tPARAMS ((char *));\n+extern void   aof_dump_imports\t\t\tPARAMS ((FILE *));\n+extern void   aof_dump_pic_table\t\tPARAMS ((FILE *));\n+extern char * aof_text_section\t\t\tPARAMS ((void));\n #endif /* AOF_ASSEMBLER */\n /* Defined in pe.c */\n-extern int    arm_dllexport_name_p \t\tPROTO ((char *));\n-extern int    arm_dllimport_name_p \t\tPROTO ((char *));\n+extern int    arm_dllexport_name_p \t\tPARAMS ((char *));\n+extern int    arm_dllimport_name_p \t\tPARAMS ((char *));\n \n #define Mmode enum machine_mode\n \n #ifdef TREE_CODE\n-extern int    arm_comp_type_attributes\t\tPROTO ((tree, tree));\n-extern int    arm_return_in_memory\t\tPROTO ((tree));\n-extern int    arm_valid_machine_decl_attribute\tPROTO ((tree, tree, tree));\n-extern int    arm_valid_type_attribute_p \tPROTO ((tree, tree, tree, tree));\n+extern int    arm_comp_type_attributes\t\tPARAMS ((tree, tree));\n+extern int    arm_return_in_memory\t\tPARAMS ((tree));\n+extern int    arm_valid_machine_decl_attribute\tPARAMS ((tree, tree, tree));\n+extern int    arm_valid_type_attribute_p \tPARAMS ((tree, tree, tree, tree));\n /* Defined in pe.c */\n-extern int    arm_dllexport_p \t\t\tPROTO ((tree));\n-extern int    arm_dllimport_p \t\t\tPROTO ((tree));\n-extern void   arm_mark_dllexport \t\tPROTO ((tree));\n-extern void   arm_mark_dllimport \t\tPROTO ((tree));\n-extern void   arm_pe_encode_section_info \tPROTO ((tree));\n-extern tree   arm_pe_merge_machine_decl_attributes PROTO ((tree, tree));\n-extern void   arm_pe_unique_section \t\tPROTO ((tree, int));\n-extern int    arm_pe_valid_machine_decl_attribute PROTO ((tree, tree, tree, tree));\n+extern int    arm_dllexport_p \t\t\tPARAMS ((tree));\n+extern int    arm_dllimport_p \t\t\tPARAMS ((tree));\n+extern void   arm_mark_dllexport \t\tPARAMS ((tree));\n+extern void   arm_mark_dllimport \t\tPARAMS ((tree));\n+extern void   arm_pe_encode_section_info \tPARAMS ((tree));\n+extern tree   arm_pe_merge_machine_decl_attributes PARAMS ((tree, tree));\n+extern void   arm_pe_unique_section \t\tPARAMS ((tree, int));\n+extern int    arm_pe_valid_machine_decl_attribute PARAMS ((tree, tree, tree, tree));\n #endif\n \n #ifdef RTX_CODE\n-extern int    adjacent_mem_locations\t\tPROTO ((rtx, rtx));\n-extern char * arithmetic_instr\t\t\tPROTO ((rtx, int));\n-extern int    arm_adjust_cost\t\t\tPROTO ((rtx, rtx, rtx, int));\n-extern RTX_CODE arm_canonicalize_comparison \tPROTO ((RTX_CODE, rtx *));\n-extern int    arm_debugger_arg_offset\t\tPROTO ((int, rtx));\n-extern void   arm_final_prescan_insn\t\tPROTO ((rtx));\n-extern rtx    arm_gen_load_multiple\t\tPROTO ((int, int, rtx, int, int, int, int, int));\n-extern int    arm_gen_movstrqi\t\t\tPROTO ((rtx *));\n-extern rtx    arm_gen_store_multiple\t\tPROTO ((int, int, rtx, int, int, int, int, int));\n-extern void   arm_print_operand\t\t\tPROTO ((FILE *, rtx, int));\n-extern void   arm_reload_in_hi\t\t\tPROTO ((rtx *));\n-extern void   arm_reload_out_hi\t\t\tPROTO ((rtx *));\n-extern void   arm_reorg\t\t\t\tPROTO ((rtx));\n-extern int    arm_rtx_costs\t\t\tPROTO ((rtx, RTX_CODE));\n-extern Mmode  arm_select_cc_mode \t\tPROTO ((RTX_CODE, rtx, rtx));\n-extern int    const_double_rtx_ok_for_fpu\tPROTO ((rtx));\n-extern int    const_ok_for_arm\t\t\tPROTO ((HOST_WIDE_INT));\n-extern char * emit_ldm_seq\t\t\tPROTO ((rtx *, int));\n-extern char * emit_stm_seq\t\t\tPROTO ((rtx *, int));\n-extern char * fp_immediate_constant\t\tPROTO ((rtx));\n-extern rtx    gen_compare_reg\t\t\tPROTO ((RTX_CODE, rtx, rtx));\n-extern rtx    gen_rotated_half_load\t\tPROTO ((rtx));\n-extern int    is_pic\t\t\t\tPROTO ((rtx));\n-extern int    label_mentioned_p \t\tPROTO ((rtx));\n-extern int    legitimate_pic_operand_p\t\tPROTO ((rtx));\n-extern int    load_multiple_sequence\t\tPROTO ((rtx *, int, int *, int *, HOST_WIDE_INT *));\n-extern RTX_CODE minmax_code\t\t\tPROTO ((rtx));\n-extern int    neg_const_double_rtx_ok_for_fpu\tPROTO ((rtx));\n-extern char * output_add_immediate\t\tPROTO ((rtx *));\n-extern char * output_call\t\t\tPROTO ((rtx *));\n-extern char * output_call_mem\t\t\tPROTO ((rtx *));\n-extern char * output_mov_double_arm_from_fpu    PROTO ((rtx *));\n-extern char * output_mov_double_fpu_from_arm    PROTO ((rtx *));\n-extern char * output_mov_immediate\t\tPROTO ((rtx *));\n-extern char * output_mov_long_double_arm_from_arm PROTO ((rtx *));\n-extern char * output_mov_long_double_arm_from_fpu PROTO ((rtx *));\n-extern char * output_mov_long_double_fpu_from_arm PROTO ((rtx *));\n-extern char * output_move_double\t\tPROTO ((rtx *));\n-extern char * output_return_instruction\t\tPROTO ((rtx, int, int));\n-extern int    store_multiple_sequence\t\tPROTO ((rtx *, int, int *, int *, HOST_WIDE_INT *));\n-extern int    symbol_mentioned_p\t\tPROTO ((rtx));\n+extern int    adjacent_mem_locations\t\tPARAMS ((rtx, rtx));\n+extern char * arithmetic_instr\t\t\tPARAMS ((rtx, int));\n+extern int    arm_adjust_cost\t\t\tPARAMS ((rtx, rtx, rtx, int));\n+extern RTX_CODE arm_canonicalize_comparison \tPARAMS ((RTX_CODE, rtx *));\n+extern int    arm_debugger_arg_offset\t\tPARAMS ((int, rtx));\n+extern void   arm_final_prescan_insn\t\tPARAMS ((rtx));\n+extern rtx    arm_gen_load_multiple\t\tPARAMS ((int, int, rtx, int, int, int, int, int));\n+extern int    arm_gen_movstrqi\t\t\tPARAMS ((rtx *));\n+extern rtx    arm_gen_store_multiple\t\tPARAMS ((int, int, rtx, int, int, int, int, int));\n+extern void   arm_print_operand\t\t\tPARAMS ((FILE *, rtx, int));\n+extern void   arm_reload_in_hi\t\t\tPARAMS ((rtx *));\n+extern void   arm_reload_out_hi\t\t\tPARAMS ((rtx *));\n+extern void   arm_reorg\t\t\t\tPARAMS ((rtx));\n+extern int    arm_rtx_costs\t\t\tPARAMS ((rtx, RTX_CODE));\n+extern Mmode  arm_select_cc_mode \t\tPARAMS ((RTX_CODE, rtx, rtx));\n+extern int    const_double_rtx_ok_for_fpu\tPARAMS ((rtx));\n+extern int    const_ok_for_arm\t\t\tPARAMS ((HOST_WIDE_INT));\n+extern char * emit_ldm_seq\t\t\tPARAMS ((rtx *, int));\n+extern char * emit_stm_seq\t\t\tPARAMS ((rtx *, int));\n+extern char * fp_immediate_constant\t\tPARAMS ((rtx));\n+extern rtx    gen_compare_reg\t\t\tPARAMS ((RTX_CODE, rtx, rtx));\n+extern rtx    gen_rotated_half_load\t\tPARAMS ((rtx));\n+extern int    is_pic\t\t\t\tPARAMS ((rtx));\n+extern int    label_mentioned_p \t\tPARAMS ((rtx));\n+extern int    legitimate_pic_operand_p\t\tPARAMS ((rtx));\n+extern int    load_multiple_sequence\t\tPARAMS ((rtx *, int, int *, int *, HOST_WIDE_INT *));\n+extern RTX_CODE minmax_code\t\t\tPARAMS ((rtx));\n+extern int    neg_const_double_rtx_ok_for_fpu\tPARAMS ((rtx));\n+extern char * output_add_immediate\t\tPARAMS ((rtx *));\n+extern char * output_call\t\t\tPARAMS ((rtx *));\n+extern char * output_call_mem\t\t\tPARAMS ((rtx *));\n+extern char * output_mov_double_arm_from_fpu    PARAMS ((rtx *));\n+extern char * output_mov_double_fpu_from_arm    PARAMS ((rtx *));\n+extern char * output_mov_immediate\t\tPARAMS ((rtx *));\n+extern char * output_mov_long_double_arm_from_arm PARAMS ((rtx *));\n+extern char * output_mov_long_double_arm_from_fpu PARAMS ((rtx *));\n+extern char * output_mov_long_double_fpu_from_arm PARAMS ((rtx *));\n+extern char * output_move_double\t\tPARAMS ((rtx *));\n+extern char * output_return_instruction\t\tPARAMS ((rtx, int, int));\n+extern int    store_multiple_sequence\t\tPARAMS ((rtx *, int, int *, int *, HOST_WIDE_INT *));\n+extern int    symbol_mentioned_p\t\tPARAMS ((rtx));\n #if defined AOF_ASSEMBLER \n-extern rtx    aof_pic_entry\t\t\tPROTO ((rtx));\n+extern rtx    aof_pic_entry\t\t\tPARAMS ((rtx));\n #endif /* AOF_ASSEMBLER */\n \n #ifdef HAVE_MACHINE_MODES\n-extern int    alignable_memory_operand\t\tPROTO ((rtx, Mmode));\n-extern int    arm_add_operand\t\t\tPROTO ((rtx, Mmode));\n-extern int    arm_go_if_legitimate_address \tPROTO ((Mmode, rtx));\n-extern int    arm_not_operand\t\t\tPROTO ((rtx, Mmode));\n-extern int    arm_reload_memory_operand\t\tPROTO ((rtx, Mmode));\n-extern int    arm_rhs_operand\t\t\tPROTO ((rtx, Mmode));\n-extern int    arm_rhsm_operand\t\t\tPROTO ((rtx, Mmode));\n-extern Mmode  arm_select_cc_mode \t\tPROTO ((RTX_CODE, rtx, rtx));\n-extern int    arm_split_constant\t\tPROTO ((RTX_CODE, Mmode, HOST_WIDE_INT, rtx, rtx, int));\n-extern int    bad_signed_byte_operand\t\tPROTO ((rtx, Mmode));\n-extern int    cc_register\t\t\tPROTO ((rtx, Mmode));\n-extern int    const_shift_operand\t\tPROTO ((rtx, Mmode));\n-extern int    di_operand\t\t\tPROTO ((rtx, Mmode));\n-extern int    dominant_cc_register\t\tPROTO ((rtx, Mmode));\n-extern int    equality_operator\t\t\tPROTO ((rtx, Mmode));\n-extern int    f_register_operand\t\tPROTO ((rtx, Mmode));\n-extern int    fpu_add_operand\t\t\tPROTO ((rtx, Mmode));\n-extern int    fpu_rhs_operand\t\t\tPROTO ((rtx, Mmode));\n-extern int    index_operand\t\t\tPROTO ((rtx, Mmode));\n-extern rtx    legitimize_pic_address\t\tPROTO ((rtx, Mmode, rtx));\n-extern int    load_multiple_operation\t\tPROTO ((rtx, Mmode));\n-extern int    logical_binary_operator\t\tPROTO ((rtx, Mmode));\n-extern int    minmax_operator\t\t\tPROTO ((rtx, Mmode));\n-extern int    multi_register_push\t\tPROTO ((rtx, Mmode));\n-extern int    nonimmediate_di_operand\t\tPROTO ((rtx, Mmode));\n-extern int    nonimmediate_soft_df_operand \tPROTO ((rtx, Mmode));\n-extern int    offsettable_memory_operand \tPROTO ((rtx, Mmode));\n-extern int    power_of_two_operand\t\tPROTO ((rtx, Mmode));\n-extern int    reg_or_int_operand\t\tPROTO ((rtx, Mmode));\n-extern int    s_register_operand\t\tPROTO ((rtx, Mmode));\n-extern int    shift_operator\t\t\tPROTO ((rtx, Mmode));\n-extern int    shiftable_operator\t\tPROTO ((rtx, Mmode));\n-extern int    soft_df_operand\t\t\tPROTO ((rtx, Mmode));\n-extern int    store_multiple_operation\t\tPROTO ((rtx, Mmode));\n+extern int    alignable_memory_operand\t\tPARAMS ((rtx, Mmode));\n+extern int    arm_add_operand\t\t\tPARAMS ((rtx, Mmode));\n+extern int    arm_go_if_legitimate_address \tPARAMS ((Mmode, rtx));\n+extern int    arm_not_operand\t\t\tPARAMS ((rtx, Mmode));\n+extern int    arm_reload_memory_operand\t\tPARAMS ((rtx, Mmode));\n+extern int    arm_rhs_operand\t\t\tPARAMS ((rtx, Mmode));\n+extern int    arm_rhsm_operand\t\t\tPARAMS ((rtx, Mmode));\n+extern Mmode  arm_select_cc_mode \t\tPARAMS ((RTX_CODE, rtx, rtx));\n+extern int    arm_split_constant\t\tPARAMS ((RTX_CODE, Mmode, HOST_WIDE_INT, rtx, rtx, int));\n+extern int    bad_signed_byte_operand\t\tPARAMS ((rtx, Mmode));\n+extern int    cc_register\t\t\tPARAMS ((rtx, Mmode));\n+extern int    const_shift_operand\t\tPARAMS ((rtx, Mmode));\n+extern int    di_operand\t\t\tPARAMS ((rtx, Mmode));\n+extern int    dominant_cc_register\t\tPARAMS ((rtx, Mmode));\n+extern int    equality_operator\t\t\tPARAMS ((rtx, Mmode));\n+extern int    f_register_operand\t\tPARAMS ((rtx, Mmode));\n+extern int    fpu_add_operand\t\t\tPARAMS ((rtx, Mmode));\n+extern int    fpu_rhs_operand\t\t\tPARAMS ((rtx, Mmode));\n+extern int    index_operand\t\t\tPARAMS ((rtx, Mmode));\n+extern rtx    legitimize_pic_address\t\tPARAMS ((rtx, Mmode, rtx));\n+extern int    load_multiple_operation\t\tPARAMS ((rtx, Mmode));\n+extern int    logical_binary_operator\t\tPARAMS ((rtx, Mmode));\n+extern int    minmax_operator\t\t\tPARAMS ((rtx, Mmode));\n+extern int    multi_register_push\t\tPARAMS ((rtx, Mmode));\n+extern int    nonimmediate_di_operand\t\tPARAMS ((rtx, Mmode));\n+extern int    nonimmediate_soft_df_operand \tPARAMS ((rtx, Mmode));\n+extern int    offsettable_memory_operand \tPARAMS ((rtx, Mmode));\n+extern int    power_of_two_operand\t\tPARAMS ((rtx, Mmode));\n+extern int    reg_or_int_operand\t\tPARAMS ((rtx, Mmode));\n+extern int    s_register_operand\t\tPARAMS ((rtx, Mmode));\n+extern int    shift_operator\t\t\tPARAMS ((rtx, Mmode));\n+extern int    shiftable_operator\t\tPARAMS ((rtx, Mmode));\n+extern int    soft_df_operand\t\t\tPARAMS ((rtx, Mmode));\n+extern int    store_multiple_operation\t\tPARAMS ((rtx, Mmode));\n #if defined TREE_CODE\n-extern rtx    arm_function_arg\t\t\tPROTO ((CUMULATIVE_ARGS *, Mmode, tree, int));\n-extern void   arm_init_cumulative_args\t\tPROTO ((CUMULATIVE_ARGS *, tree, rtx, int));\n+extern rtx    arm_function_arg\t\t\tPARAMS ((CUMULATIVE_ARGS *, Mmode, tree, int));\n+extern void   arm_init_cumulative_args\t\tPARAMS ((CUMULATIVE_ARGS *, tree, rtx, int));\n #endif /* TREE_CODE */\n #endif /* HAVE_MACHINE_MODES */\n #endif /* RTX_CODE */"}, {"sha": "aa4801e11c57cbb1933404c76598c2bb6f5352a4", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299d06ad4acdbc03b0912a1b0f8b36d277f0efac/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299d06ad4acdbc03b0912a1b0f8b36d277f0efac/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=299d06ad4acdbc03b0912a1b0f8b36d277f0efac", "patch": "@@ -53,28 +53,28 @@ extern FILE * asm_out_file;\n #define Mmode enum machine_mode\n #endif\n \n-static HOST_WIDE_INT int_log2 \t\tPROTO ((HOST_WIDE_INT));\n-static char * output_multi_immediate \tPROTO ((rtx *, char *, char *, int, HOST_WIDE_INT));\n-static int arm_gen_constant \t\tPROTO ((enum rtx_code, Mmode, HOST_WIDE_INT, rtx, rtx, int, int));\n-static int arm_naked_function_p \tPROTO ((tree));\n-static void init_fpa_table \t\tPROTO ((void));\n-static enum machine_mode select_dominance_cc_mode PROTO ((rtx, rtx, HOST_WIDE_INT));\n-static HOST_WIDE_INT add_minipool_constant PROTO ((rtx, Mmode));\n-static void dump_minipool \t\tPROTO ((rtx));\n-static rtx find_barrier \t\tPROTO ((rtx, int));\n-static void push_minipool_fix \t\tPROTO ((rtx, int, rtx *, Mmode, rtx));\n-static void push_minipool_barrier \tPROTO ((rtx, int));\n-static void note_invalid_constants \tPROTO ((rtx, int));\n-static char * fp_const_from_val \tPROTO ((REAL_VALUE_TYPE *));\n-static int eliminate_lr2ip \t\tPROTO ((rtx *));\n-static char * shift_op \t\t\tPROTO ((rtx, HOST_WIDE_INT *));\n-static int pattern_really_clobbers_lr \tPROTO ((rtx));\n-static int function_really_clobbers_lr \tPROTO ((rtx));\n-static void emit_multi_reg_push \tPROTO ((int));\n-static void emit_sfm \t\t\tPROTO ((int, int));\n-static enum arm_cond_code get_arm_condition_code PROTO ((rtx));\n-static int const_ok_for_op \t\tPROTO ((HOST_WIDE_INT, enum rtx_code));\n-static void arm_add_gc_roots \t\tPROTO ((void));\n+static HOST_WIDE_INT int_log2 \t\tPARAMS ((HOST_WIDE_INT));\n+static char * output_multi_immediate \tPARAMS ((rtx *, char *, char *, int, HOST_WIDE_INT));\n+static int arm_gen_constant \t\tPARAMS ((enum rtx_code, Mmode, HOST_WIDE_INT, rtx, rtx, int, int));\n+static int arm_naked_function_p \tPARAMS ((tree));\n+static void init_fpa_table \t\tPARAMS ((void));\n+static enum machine_mode select_dominance_cc_mode PARAMS ((rtx, rtx, HOST_WIDE_INT));\n+static HOST_WIDE_INT add_minipool_constant PARAMS ((rtx, Mmode));\n+static void dump_minipool \t\tPARAMS ((rtx));\n+static rtx find_barrier \t\tPARAMS ((rtx, int));\n+static void push_minipool_fix \t\tPARAMS ((rtx, int, rtx *, Mmode, rtx));\n+static void push_minipool_barrier \tPARAMS ((rtx, int));\n+static void note_invalid_constants \tPARAMS ((rtx, int));\n+static char * fp_const_from_val \tPARAMS ((REAL_VALUE_TYPE *));\n+static int eliminate_lr2ip \t\tPARAMS ((rtx *));\n+static char * shift_op \t\t\tPARAMS ((rtx, HOST_WIDE_INT *));\n+static int pattern_really_clobbers_lr \tPARAMS ((rtx));\n+static int function_really_clobbers_lr \tPARAMS ((rtx));\n+static void emit_multi_reg_push \tPARAMS ((int));\n+static void emit_sfm \t\t\tPARAMS ((int, int));\n+static enum arm_cond_code get_arm_condition_code PARAMS ((rtx));\n+static int const_ok_for_op \t\tPARAMS ((HOST_WIDE_INT, enum rtx_code));\n+static void arm_add_gc_roots \t\tPARAMS ((void));\n \n /* True if we are currently building a constant table. */\n int making_const_table;"}, {"sha": "294e9121cd8f5e0e96ca3bb36daedfe68f84c9bd", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299d06ad4acdbc03b0912a1b0f8b36d277f0efac/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299d06ad4acdbc03b0912a1b0f8b36d277f0efac/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=299d06ad4acdbc03b0912a1b0f8b36d277f0efac", "patch": "@@ -4223,8 +4223,8 @@ c4x_operand_subword (op, i, validate_address, mode)\n \n int\n c4x_handle_pragma (p_getc, p_ungetc, pname)\n-     int (* p_getc) PROTO ((void));\n-     void (* p_ungetc) PROTO ((int)) ATTRIBUTE_UNUSED;\n+     int (* p_getc) PARAMS ((void));\n+     void (* p_ungetc) PARAMS ((int)) ATTRIBUTE_UNUSED;\n      char *pname;\n {\n   int i;"}, {"sha": "5d725a5ae342f61639dbd66a16d636a1196cb7c6", "filename": "gcc/config/fr30/fr30-protos.h", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299d06ad4acdbc03b0912a1b0f8b36d277f0efac/gcc%2Fconfig%2Ffr30%2Ffr30-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299d06ad4acdbc03b0912a1b0f8b36d277f0efac/gcc%2Fconfig%2Ffr30%2Ffr30-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30-protos.h?ref=299d06ad4acdbc03b0912a1b0f8b36d277f0efac", "patch": "@@ -18,30 +18,30 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-extern void  fr30_expand_prologue PROTO ((void));\n-extern void  fr30_expand_epilogue PROTO ((void));\n-extern unsigned int fr30_compute_frame_size PROTO ((int, int));\n+extern void  fr30_expand_prologue PARAMS ((void));\n+extern void  fr30_expand_epilogue PARAMS ((void));\n+extern unsigned int fr30_compute_frame_size PARAMS ((int, int));\n \n #ifdef RTX_CODE\n-extern int   fr30_check_multiple_regs   PROTO ((rtx *, int, int));\n-extern void  fr30_print_operand         PROTO ((FILE *, rtx, int));\n-extern void  fr30_print_operand_address PROTO ((FILE *, rtx));\n+extern int   fr30_check_multiple_regs   PARAMS ((rtx *, int, int));\n+extern void  fr30_print_operand         PARAMS ((FILE *, rtx, int));\n+extern void  fr30_print_operand_address PARAMS ((FILE *, rtx));\n #ifdef TREE_CODE\n-extern rtx   fr30_va_arg                PROTO ((tree, tree));\n+extern rtx   fr30_va_arg                PARAMS ((tree, tree));\n #endif /* TREE_CODE */\n #ifdef HAVE_MACHINE_MODES\n #define Mmode enum machine_mode\n-extern int   stack_add_operand          PROTO ((rtx, Mmode));\n-extern int   add_immediate_operand      PROTO ((rtx, Mmode));\n-extern int   high_register_operand      PROTO ((rtx, Mmode));\n-extern int   low_register_operand       PROTO ((rtx, Mmode));\n-extern int   call_operand               PROTO ((rtx, Mmode));\n+extern int   stack_add_operand          PARAMS ((rtx, Mmode));\n+extern int   add_immediate_operand      PARAMS ((rtx, Mmode));\n+extern int   high_register_operand      PARAMS ((rtx, Mmode));\n+extern int   low_register_operand       PARAMS ((rtx, Mmode));\n+extern int   call_operand               PARAMS ((rtx, Mmode));\n #undef Mmode\n #endif /* HAVE_MACHINE_MODES */\n #endif /* RTX_CODE */\n \n #ifdef TREE_CODE\n-extern int   fr30_num_arg_regs               PROTO ((int, tree));\n-extern int   fr30_function_arg_partial_nregs PROTO ((CUMULATIVE_ARGS, int, tree, int));\n-extern void  fr30_setup_incoming_varargs     PROTO ((CUMULATIVE_ARGS, int, tree, int *));\n+extern int   fr30_num_arg_regs               PARAMS ((int, tree));\n+extern int   fr30_function_arg_partial_nregs PARAMS ((CUMULATIVE_ARGS, int, tree, int));\n+extern void  fr30_setup_incoming_varargs     PARAMS ((CUMULATIVE_ARGS, int, tree, int *));\n #endif /* TREE_CODE */"}, {"sha": "a36d899a1d5e9b000eb5f11ca5fb6f18b764a0c1", "filename": "gcc/config/nextstep.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299d06ad4acdbc03b0912a1b0f8b36d277f0efac/gcc%2Fconfig%2Fnextstep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299d06ad4acdbc03b0912a1b0f8b36d277f0efac/gcc%2Fconfig%2Fnextstep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnextstep.c?ref=299d06ad4acdbc03b0912a1b0f8b36d277f0efac", "patch": "@@ -46,8 +46,8 @@ extern char *get_directive_line ();\n \n int\n handle_pragma (p_getc, p_ungetc, pname)\n-     int (*  p_getc) PROTO ((void));\n-     void (* p_ungetc) PROTO ((int));\n+     int (*  p_getc) PARAMS ((void));\n+     void (* p_ungetc) PARAMS ((int));\n      char * pname;\n {\n   int retval = 0;"}, {"sha": "c3123d96c620dacc022b11950dc8bf1e42d8db89", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299d06ad4acdbc03b0912a1b0f8b36d277f0efac/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299d06ad4acdbc03b0912a1b0f8b36d277f0efac/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=299d06ad4acdbc03b0912a1b0f8b36d277f0efac", "patch": "@@ -42,20 +42,20 @@ Boston, MA 02111-1307, USA.  */\n #include \"recog.h\"\n #include \"tm_p.h\"\n \n-static void restore_unscaled_index_insn_codes\t\tPROTO((rtx));\n-static void record_unscaled_index_insn_codes\t\tPROTO((rtx));\n-static void pa_combine_instructions\t\t\tPROTO((rtx));\n-static int pa_can_combine_p\tPROTO((rtx, rtx, rtx, int, rtx, rtx, rtx));\n-static int forward_branch_p\t\t\t\tPROTO((rtx));\n-static int shadd_constant_p\t\t\t\tPROTO((int));\n-static void pa_add_gc_roots                             PROTO((void));\n-static void mark_deferred_plabels                       PROTO((void *));\n-static void compute_zdepwi_operands\t\t\tPROTO((unsigned HOST_WIDE_INT, unsigned *));\n-static int compute_movstrsi_length\t\t\tPROTO((rtx));\n-static void remove_useless_addtr_insns\t\t\tPROTO((rtx, int));\n-static void store_reg\t\t\t\t\tPROTO((int, int, int));\n-static void load_reg\t\t\t\t\tPROTO((int, int, int));\n-static void set_reg_plus_d\t\t\t\tPROTO((int, int, int));\n+static void restore_unscaled_index_insn_codes\t\tPARAMS ((rtx));\n+static void record_unscaled_index_insn_codes\t\tPARAMS ((rtx));\n+static void pa_combine_instructions\t\t\tPARAMS ((rtx));\n+static int pa_can_combine_p\tPARAMS ((rtx, rtx, rtx, int, rtx, rtx, rtx));\n+static int forward_branch_p\t\t\t\tPARAMS ((rtx));\n+static int shadd_constant_p\t\t\t\tPARAMS ((int));\n+static void pa_add_gc_roots                             PARAMS ((void));\n+static void mark_deferred_plabels                       PARAMS ((void *));\n+static void compute_zdepwi_operands\t\t\tPARAMS ((unsigned HOST_WIDE_INT, unsigned *));\n+static int compute_movstrsi_length\t\t\tPARAMS ((rtx));\n+static void remove_useless_addtr_insns\t\t\tPARAMS ((rtx, int));\n+static void store_reg\t\t\t\t\tPARAMS ((int, int, int));\n+static void load_reg\t\t\t\t\tPARAMS ((int, int, int));\n+static void set_reg_plus_d\t\t\t\tPARAMS ((int, int, int));\n \n /* Save the operands last given to a compare for use when we\n    generate a scc or bcc insn.  */\n@@ -4049,7 +4049,7 @@ output_deferred_plabels (file)\n    Keep track of which ones we have used.  */\n \n enum millicodes { remI, remU, divI, divU, mulI, mulU, end1000 };\n-static void import_milli\t\t\tPROTO((enum millicodes));\n+static void import_milli\t\t\tPARAMS ((enum millicodes));\n static char imported[(int)end1000];\n static const char * const milli_names[] = {\"remI\", \"remU\", \"divI\", \"divU\", \"mulI\", \"mulU\"};\n static char import_string[] = \".IMPORT $$....,MILLICODE\";"}, {"sha": "1ba8e5605298969e7038eb65011ad02947eedf77", "filename": "gcc/config/pj/pj.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299d06ad4acdbc03b0912a1b0f8b36d277f0efac/gcc%2Fconfig%2Fpj%2Fpj.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299d06ad4acdbc03b0912a1b0f8b36d277f0efac/gcc%2Fconfig%2Fpj%2Fpj.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpj%2Fpj.c?ref=299d06ad4acdbc03b0912a1b0f8b36d277f0efac", "patch": "@@ -107,8 +107,8 @@ rtx pj_cmp_op0;\n rtx pj_cmp_op1;\n enum machine_mode pj_cmp_mode;\n \n-static void pj_output_rval PROTO ((rtx, enum machine_mode, rtx));\n-static void pj_output_store_into_lval PROTO ((enum machine_mode mode, rtx op));\n+static void pj_output_rval PARAMS ((rtx, enum machine_mode, rtx));\n+static void pj_output_store_into_lval PARAMS ((enum machine_mode mode, rtx op));\n \n /* These vectors turn a register number into an offset from the vars\n    pointer register.  */\n@@ -132,8 +132,8 @@ int pj_stuff_on_line;\n  %X              - address constant.\n  %<alpha><digit> - operand <digit> passed to pj_print_operand with code <alpha>.  */\n \n-static void pj_printf\n-VPROTO ((const char *template, ...))\n+static void\n+pj_printf VPARAMS ((const char *template, ...))\n {\n #ifndef ANSI_PROTOTYPES\n   const char *template;"}, {"sha": "af661bffe2f5d48a1fa10833655b5f198dbc2e1f", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299d06ad4acdbc03b0912a1b0f8b36d277f0efac/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299d06ad4acdbc03b0912a1b0f8b36d277f0efac/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=299d06ad4acdbc03b0912a1b0f8b36d277f0efac", "patch": "@@ -112,7 +112,7 @@ int rs6000_debug_arg;\t\t/* debug argument handling */\n /* Flag to say the TOC is initialized */\n int toc_initialized;\n \n-static void rs6000_add_gc_roots PROTO ((void));\n+static void rs6000_add_gc_roots PARAMS ((void));\n \n \f\n /* Default register names.  */"}, {"sha": "e26d0698a7826afe8b876bfcb8c63fd421a459b2", "filename": "gcc/config/v850/v850-protos.h", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299d06ad4acdbc03b0912a1b0f8b36d277f0efac/gcc%2Fconfig%2Fv850%2Fv850-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299d06ad4acdbc03b0912a1b0f8b36d277f0efac/gcc%2Fconfig%2Fv850%2Fv850-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850-protos.h?ref=299d06ad4acdbc03b0912a1b0f8b36d277f0efac", "patch": "@@ -22,61 +22,61 @@ Boston, MA 02111-1307, USA.  */\n    compilcations.  */\n #define Mmode enum machine_mode\n \n-extern void   expand_prologue               PROTO ((void));\n-extern void   expand_epilogue               PROTO ((void));\n-extern void   sdata_section                 PROTO ((void));\n-extern void   rosdata_section               PROTO ((void));\n-extern void   sbss_section                  PROTO ((void));\n-extern void   tdata_section                 PROTO ((void));\n-extern void   zdata_section                 PROTO ((void));\n-extern void   rozdata_section               PROTO ((void));\n-extern void   zbss_section                  PROTO ((void));\n-extern int    v850_handle_pragma            PROTO ((int (*)(void), void (*)(int), char *));\n-extern void   asm_file_start                PROTO ((FILE *));\n-extern void   override_options              PROTO ((void));\n-extern int    compute_register_save_size    PROTO ((long *));\n-extern int    compute_frame_size            PROTO ((int, long *));\n+extern void   expand_prologue               PARAMS ((void));\n+extern void   expand_epilogue               PARAMS ((void));\n+extern void   sdata_section                 PARAMS ((void));\n+extern void   rosdata_section               PARAMS ((void));\n+extern void   sbss_section                  PARAMS ((void));\n+extern void   tdata_section                 PARAMS ((void));\n+extern void   zdata_section                 PARAMS ((void));\n+extern void   rozdata_section               PARAMS ((void));\n+extern void   zbss_section                  PARAMS ((void));\n+extern int    v850_handle_pragma            PARAMS ((int (*)(void), void (*)(int), char *));\n+extern void   asm_file_start                PARAMS ((FILE *));\n+extern void   override_options              PARAMS ((void));\n+extern int    compute_register_save_size    PARAMS ((long *));\n+extern int    compute_frame_size            PARAMS ((int, long *));\n \n #ifdef RTX_CODE\n-extern void   print_operand                 PROTO ((FILE *, rtx, int ));\n-extern void   print_operand_address         PROTO ((FILE *, rtx));\n-extern int    const_costs                   PROTO ((rtx, enum rtx_code));\n-extern char * output_move_double            PROTO ((rtx *));\n-extern char * output_move_single            PROTO ((rtx *));\n-extern void   v850_reorg                    PROTO ((rtx));\n-extern void   notice_update_cc              PROTO ((rtx, rtx));\n-extern char * construct_save_jarl           PROTO ((rtx));\n-extern char * construct_restore_jr          PROTO ((rtx));\n+extern void   print_operand                 PARAMS ((FILE *, rtx, int ));\n+extern void   print_operand_address         PARAMS ((FILE *, rtx));\n+extern int    const_costs                   PARAMS ((rtx, enum rtx_code));\n+extern char * output_move_double            PARAMS ((rtx *));\n+extern char * output_move_single            PARAMS ((rtx *));\n+extern void   v850_reorg                    PARAMS ((rtx));\n+extern void   notice_update_cc              PARAMS ((rtx, rtx));\n+extern char * construct_save_jarl           PARAMS ((rtx));\n+extern char * construct_restore_jr          PARAMS ((rtx));\n #ifdef HAVE_MACHINE_MODES\n-extern int    ep_memory_operand             PROTO ((rtx, Mmode, int));\n-extern int    reg_or_0_operand              PROTO ((rtx, Mmode));\n-extern int    reg_or_int5_operand           PROTO ((rtx, Mmode));\n-extern int    call_address_operand          PROTO ((rtx, Mmode));\n-extern int    movsi_source_operand          PROTO ((rtx, Mmode));\n-extern int    power_of_two_operand          PROTO ((rtx, Mmode));\n-extern int    not_power_of_two_operand      PROTO ((rtx, Mmode));\n-extern int    special_symbolref_operand     PROTO ((rtx, Mmode));\n-extern int    pattern_is_ok_for_prologue    PROTO ((rtx, Mmode));\n-extern int    pattern_is_ok_for_epilogue    PROTO ((rtx, Mmode));\n-extern int    register_is_ok_for_epilogue   PROTO ((rtx, Mmode));\n+extern int    ep_memory_operand             PARAMS ((rtx, Mmode, int));\n+extern int    reg_or_0_operand              PARAMS ((rtx, Mmode));\n+extern int    reg_or_int5_operand           PARAMS ((rtx, Mmode));\n+extern int    call_address_operand          PARAMS ((rtx, Mmode));\n+extern int    movsi_source_operand          PARAMS ((rtx, Mmode));\n+extern int    power_of_two_operand          PARAMS ((rtx, Mmode));\n+extern int    not_power_of_two_operand      PARAMS ((rtx, Mmode));\n+extern int    special_symbolref_operand     PARAMS ((rtx, Mmode));\n+extern int    pattern_is_ok_for_prologue    PARAMS ((rtx, Mmode));\n+extern int    pattern_is_ok_for_epilogue    PARAMS ((rtx, Mmode));\n+extern int    register_is_ok_for_epilogue   PARAMS ((rtx, Mmode));\n #ifdef TREE_CODE\n-extern rtx    function_arg                  PROTO ((CUMULATIVE_ARGS *, Mmode, tree, int));\n-extern rtx    v850_va_arg                   PROTO ((tree, tree));\n+extern rtx    function_arg                  PARAMS ((CUMULATIVE_ARGS *, Mmode, tree, int));\n+extern rtx    v850_va_arg                   PARAMS ((tree, tree));\n #endif\n #endif\n #endif /* TREE_CODE */\n \n #ifdef TREE_CODE\n-extern int    v850_valid_machine_decl_attribute  PROTO ((tree, tree, tree));\n-extern void   v850_encode_data_area         PROTO ((tree));\n-extern void   v850_set_default_decl_attr    PROTO ((tree));\n-extern int    v850_interrupt_function_p     PROTO ((tree));\n-extern void   v850_output_aligned_bss       PROTO ((FILE *, tree, char *, int, int));\n-extern void   v850_output_common            PROTO ((FILE *, tree, char *, int, int));\n-extern void   v850_output_local             PROTO ((FILE *, tree, char *, int, int));\n-extern v850_data_area v850_get_data_area    PROTO ((tree));\n+extern int    v850_valid_machine_decl_attribute  PARAMS ((tree, tree, tree));\n+extern void   v850_encode_data_area         PARAMS ((tree));\n+extern void   v850_set_default_decl_attr    PARAMS ((tree));\n+extern int    v850_interrupt_function_p     PARAMS ((tree));\n+extern void   v850_output_aligned_bss       PARAMS ((FILE *, tree, char *, int, int));\n+extern void   v850_output_common            PARAMS ((FILE *, tree, char *, int, int));\n+extern void   v850_output_local             PARAMS ((FILE *, tree, char *, int, int));\n+extern v850_data_area v850_get_data_area    PARAMS ((tree));\n #ifdef HAVE_MACHINE_MODES\n-extern int    function_arg_partial_nregs    PROTO ((CUMULATIVE_ARGS *, Mmode, tree, int));\n+extern int    function_arg_partial_nregs    PARAMS ((CUMULATIVE_ARGS *, Mmode, tree, int));\n #endif\n #endif\n "}, {"sha": "c5a9b379d129d321ba5212f0a5eb33a63ef7b404", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299d06ad4acdbc03b0912a1b0f8b36d277f0efac/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299d06ad4acdbc03b0912a1b0f8b36d277f0efac/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=299d06ad4acdbc03b0912a1b0f8b36d277f0efac", "patch": "@@ -45,15 +45,15 @@ Boston, MA 02111-1307, USA.  */\n \n /* Function prototypes for stupid compilers:  */\n static void const_double_split\n-  PROTO ((rtx, HOST_WIDE_INT *, HOST_WIDE_INT *));\n-static int  const_costs_int        PROTO ((HOST_WIDE_INT, int));\n-static void substitute_ep_register PROTO ((rtx, rtx, int, int, rtx *, rtx *));\n-static int  push_data_area         PROTO ((v850_data_area));\n-static int  pop_data_area          PROTO ((v850_data_area));\n-static int  parse_ghs_pragma_token PROTO ((char *));\n-static int  ep_memory_offset       PROTO ((enum machine_mode, int));\n-static int  mark_current_function_as_interrupt PROTO ((void));\n-static void v850_set_data_area     PROTO ((tree, v850_data_area));\n+  PARAMS ((rtx, HOST_WIDE_INT *, HOST_WIDE_INT *));\n+static int  const_costs_int        PARAMS ((HOST_WIDE_INT, int));\n+static void substitute_ep_register PARAMS ((rtx, rtx, int, int, rtx *, rtx *));\n+static int  push_data_area         PARAMS ((v850_data_area));\n+static int  pop_data_area          PARAMS ((v850_data_area));\n+static int  parse_ghs_pragma_token PARAMS ((char *));\n+static int  ep_memory_offset       PARAMS ((enum machine_mode, int));\n+static int  mark_current_function_as_interrupt PARAMS ((void));\n+static void v850_set_data_area     PARAMS ((tree, v850_data_area));\n \n /* True if the current function has anonymous arguments.  */\n int current_function_anonymous_args;\n@@ -88,7 +88,7 @@ void\n override_options ()\n {\n   int i;\n-  extern int atoi PROTO ((const char *));\n+  extern int atoi PARAMS ((const char *));\n \n   /* Parse -m{s,t,z}da=nnn switches */\n   for (i = 0; i < (int)SMALL_MEMORY_max; i++)\n@@ -2926,8 +2926,8 @@ parse_ghs_pragma_token (string)\n /* Handle the parsing of an entire GHS pragma.  */\n int\n v850_handle_pragma (p_getc, p_ungetc, name)\n-     int (*  p_getc) PROTO ((void));\n-     void (* p_ungetc) PROTO ((int));\n+     int (*  p_getc) PARAMS ((void));\n+     void (* p_ungetc) PARAMS ((int));\n      char *  name;\n {\n   /* Parse characters in the input stream until:"}]}