{"sha": "d93d4205f1090161c32033c608dec5ac67016ab9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDkzZDQyMDVmMTA5MDE2MWMzMjAzM2M2MDhkZWM1YWM2NzAxNmFiOQ==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1994-07-08T20:45:14Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1994-07-08T20:45:14Z"}, "message": "fix temp lifetime (FOR TARGET_EXPRs only)\n\nFrom-SVN: r7681", "tree": {"sha": "cb70ced3c3a2abd4edd8e1ae1c3303cc21d9e561", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb70ced3c3a2abd4edd8e1ae1c3303cc21d9e561"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d93d4205f1090161c32033c608dec5ac67016ab9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d93d4205f1090161c32033c608dec5ac67016ab9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d93d4205f1090161c32033c608dec5ac67016ab9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d93d4205f1090161c32033c608dec5ac67016ab9/comments", "author": null, "committer": null, "parents": [{"sha": "311862c8bed5ff4d37ae5e5e2fab91e7b69bab8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/311862c8bed5ff4d37ae5e5e2fab91e7b69bab8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/311862c8bed5ff4d37ae5e5e2fab91e7b69bab8b"}], "stats": {"total": 42, "additions": 36, "deletions": 6}, "files": [{"sha": "256f46faf080839a085cae6c75432738b0ed26fd", "filename": "gcc/expr.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d93d4205f1090161c32033c608dec5ac67016ab9/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d93d4205f1090161c32033c608dec5ac67016ab9/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=d93d4205f1090161c32033c608dec5ac67016ab9", "patch": "@@ -95,6 +95,12 @@ int inhibit_defer_pop;\n    function calls being expanded by expand_call.  */\n tree cleanups_this_call;\n \n+/* When temporaries are created by TARGET_EXPRs, they are created at\n+   this level of temp_slot_level, so that they can remain allocated\n+   until no longer needed.  CLEANUP_POINT_EXPRs define the lifetime\n+   of TARGET_EXPRs.  */\n+int target_temp_slot_level;\n+\n /* Nonzero means __builtin_saveregs has already been done in this function.\n    The value is the pseudoreg containing the value __builtin_saveregs\n    returned.  */\n@@ -4623,9 +4629,17 @@ expand_expr (exp, target, tmode, modifier)\n \n     case CLEANUP_POINT_EXPR:\n       {\n+\textern int temp_slot_level;\n \ttree old_cleanups = cleanups_this_call;\n+\tint old_temp_level = target_temp_slot_level;\n+\tpush_temp_slots ();\n+\ttarget_temp_slot_level = temp_slot_level;\n \top0 = expand_expr (TREE_OPERAND (exp, 0), target, VOIDmode, modifier);\n \texpand_cleanups_to (old_cleanups);\n+\tpreserve_temp_slots (op0);\n+\tfree_temp_slots ();\n+\tpop_temp_slots ();\n+\ttarget_temp_slot_level = old_temp_level;\n       }\n       return op0;\n \n@@ -5695,7 +5709,7 @@ expand_expr (exp, target, tmode, modifier)\n \t      }\n \t    else\n \t      {\n-\t\ttarget = assign_stack_temp (mode, int_size_in_bytes (type), 0);\n+\t\ttarget = assign_stack_temp (mode, int_size_in_bytes (type), 2);\n \t\t/* All temp slots at this level must not conflict.  */\n \t\tpreserve_temp_slots (target);\n \t\tDECL_RTL (slot) = target;"}, {"sha": "3bb94907e1e115213f01089f7dfe2e54021b22f1", "filename": "gcc/expr.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d93d4205f1090161c32033c608dec5ac67016ab9/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d93d4205f1090161c32033c608dec5ac67016ab9/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=d93d4205f1090161c32033c608dec5ac67016ab9", "patch": "@@ -119,6 +119,12 @@ extern int pending_stack_adjust;\n #ifdef TREE_CODE   /* Don't lose if tree.h not included.  */\n extern tree cleanups_this_call;\n #endif\n+\n+/* When temporaries are created by TARGET_EXPRs, they are created at\n+   this level of temp_slot_level, so that they can remain allocated\n+   until no longer needed.  CLEANUP_POINT_EXPRs define the lifetime\n+   of TARGET_EXPRs.  */\n+extern int target_temp_slot_level;\n \f\n #ifdef TREE_CODE /* Don't lose if tree.h not included.  */\n /* Structure to record the size of a sequence of arguments"}, {"sha": "16d4a935b83a3b376a56374f9a3d102c504b9b32", "filename": "gcc/function.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d93d4205f1090161c32033c608dec5ac67016ab9/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d93d4205f1090161c32033c608dec5ac67016ab9/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=d93d4205f1090161c32033c608dec5ac67016ab9", "patch": "@@ -771,9 +771,10 @@ assign_outer_stack_local (mode, size, align, function)\n    SIZE is the size in units of the space required.  We do no rounding here\n    since assign_stack_local will do any required rounding.\n \n-   KEEP is non-zero if this slot is to be retained after a call to\n-   free_temp_slots.  Automatic variables for a block are allocated with this\n-   flag.  */\n+   KEEP is 1 if this slot is to be retained after a call to\n+   free_temp_slots.  Automatic variables for a block are allocated\n+   with this flag.  KEEP is 2, if we allocate a longer term temporary,\n+   whose lifetime is controlled by CLEANUP_POINT_EXPRs.  */\n \n rtx\n assign_stack_temp (mode, size, keep)\n@@ -845,8 +846,16 @@ assign_stack_temp (mode, size, keep)\n \n   p->in_use = 1;\n   p->rtl_expr = sequence_rtl_expr;\n-  p->level = temp_slot_level;\n-  p->keep = keep;\n+  if (keep == 2)\n+    {\n+      p->level = target_temp_slot_level;\n+      p->keep = 0;\n+    }\n+  else\n+    {\n+      p->level = temp_slot_level;\n+      p->keep = keep;\n+    }\n   return p->slot;\n }\n \n@@ -4615,6 +4624,7 @@ init_function_start (subr, filename, line)\n   /* We have not allocated any temporaries yet.  */\n   temp_slots = 0;\n   temp_slot_level = 0;\n+  target_temp_slot_level = 0;\n \n   /* Within function body, compute a type's size as soon it is laid out.  */\n   immediate_size_expand++;"}]}