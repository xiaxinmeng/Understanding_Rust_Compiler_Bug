{"sha": "7004b11bf0d1b4a58baccfd38bdbff9365f0e87b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzAwNGIxMWJmMGQxYjRhNThiYWNjZmQzOGJkYmZmOTM2NWYwZTg3Yg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-02-12T16:30:08Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-02-12T16:30:08Z"}, "message": "regclass.c (init_reg_sets_1): Optimize calculation of move_cost arrays.\n\n\n\t* regclass.c (init_reg_sets_1): Optimize calculation of move_cost\n\tarrays.\n\nFrom-SVN: r39606", "tree": {"sha": "5e807b64787ceb0dcd02fb57a9b08c9ab2fecc77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e807b64787ceb0dcd02fb57a9b08c9ab2fecc77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7004b11bf0d1b4a58baccfd38bdbff9365f0e87b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7004b11bf0d1b4a58baccfd38bdbff9365f0e87b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7004b11bf0d1b4a58baccfd38bdbff9365f0e87b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7004b11bf0d1b4a58baccfd38bdbff9365f0e87b/comments", "author": null, "committer": null, "parents": [{"sha": "45abaea89ceed7cbd6128a841605430da841064a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45abaea89ceed7cbd6128a841605430da841064a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45abaea89ceed7cbd6128a841605430da841064a"}], "stats": {"total": 88, "additions": 61, "deletions": 27}, "files": [{"sha": "c36eaf943d0dc8f96da2816886393461b4b8f8c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7004b11bf0d1b4a58baccfd38bdbff9365f0e87b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7004b11bf0d1b4a58baccfd38bdbff9365f0e87b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7004b11bf0d1b4a58baccfd38bdbff9365f0e87b", "patch": "@@ -1,3 +1,8 @@\n+Mon Feb 12 17:28:48 CET 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* regclass.c (init_reg_sets_1): Optimize calculation of move_cost\n+\tarrays.\n+\n 2001-02-12  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* extend.texi (Deprecated): Deprecate new initializer lists."}, {"sha": "da16edc2988038e0b59aa3a4900a6fab09211fc1", "filename": "gcc/regclass.c", "status": "modified", "additions": 56, "deletions": 27, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7004b11bf0d1b4a58baccfd38bdbff9365f0e87b/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7004b11bf0d1b4a58baccfd38bdbff9365f0e87b/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=7004b11bf0d1b4a58baccfd38bdbff9365f0e87b", "patch": "@@ -288,6 +288,8 @@ init_reg_sets_1 ()\n {\n   register unsigned int i, j;\n   register unsigned int /* enum machine_mode */ m;\n+  char contains_reg_of_mode [LIM_REG_CLASSES] [MAX_MACHINE_MODE];\n+  char allocatable_regs_of_mode [MAX_MACHINE_MODE];\n \n   /* This macro allows the fixed or call-used registers\n      and the register classes to depend on target flags.  */\n@@ -423,44 +425,71 @@ init_reg_sets_1 ()\n       if (CLASS_LIKELY_SPILLED_P (REGNO_REG_CLASS (i)))\n \tSET_HARD_REG_BIT (losing_caller_save_reg_set, i);\n     }\n+  memset (contains_reg_of_mode, 0, sizeof (contains_reg_of_mode));\n+  memset (allocatable_regs_of_mode, 0, sizeof (allocatable_regs_of_mode));\n+  for (m = 0; m < MAX_MACHINE_MODE; m++)\n+    for (i = 0; i < N_REG_CLASSES; i++)\n+      for (j = 0; j < FIRST_PSEUDO_REGISTER; j++)\n+\tif (!fixed_regs [j] && TEST_HARD_REG_BIT (reg_class_contents[i], j)\n+\t    && HARD_REGNO_MODE_OK (j, m))\n+\t   {\n+\t     contains_reg_of_mode [i][m] = 1;\n+\t     allocatable_regs_of_mode [m] = 1;\n+\t     break;\n+\t   }\n \n   /* Initialize the move cost table.  Find every subset of each class\n      and take the maximum cost of moving any subset to any other.  */\n \n   for (m = 0; m < MAX_MACHINE_MODE; m++)\n-    for (i = 0; i < N_REG_CLASSES; i++)\n-      for (j = 0; j < N_REG_CLASSES; j++)\n-\t{\n-\t  int cost = i == j ? 2 : REGISTER_MOVE_COST (m, i, j);\n-\t  enum reg_class *p1, *p2;\n+    if (allocatable_regs_of_mode [m])\n+      for (i = 0; i < N_REG_CLASSES; i++)\n+\tif (contains_reg_of_mode [i][m])\n+\t  for (j = 0; j < N_REG_CLASSES; j++)\n+\t    {\n+\t      int cost;\n+\t      enum reg_class *p1, *p2;\n \n-\t  for (p2 = &reg_class_subclasses[j][0]; *p2 != LIM_REG_CLASSES; p2++)\n-\t    if (*p2 != i)\n-\t      cost = MAX (cost, REGISTER_MOVE_COST (m, i, *p2));\n+\t      if (!contains_reg_of_mode [j][m])\n+\t\t{\n+\t\t  move_cost[m][i][j] = 65536;\n+\t\t  may_move_in_cost[m][i][j] = 65536;\n+\t\t  may_move_out_cost[m][i][j] = 65536;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  cost = i == j ? 2 : REGISTER_MOVE_COST (m, i, j);\n \n-\t  for (p1 = &reg_class_subclasses[i][0]; *p1 != LIM_REG_CLASSES; p1++)\n-\t    {\n-\t      if (*p1 != j)\n-\t\tcost = MAX (cost, REGISTER_MOVE_COST (m, *p1, j));\n+\t\t  for (p2 = &reg_class_subclasses[j][0]; *p2 != LIM_REG_CLASSES;\n+\t\t       p2++)\n+\t\t    if (*p2 != i && contains_reg_of_mode [*p1][m])\n+\t\t      cost = MAX (cost, move_cost [m][i][*p2]);\n \n-\t      for (p2 = &reg_class_subclasses[j][0];\n-\t\t   *p2 != LIM_REG_CLASSES; p2++)\n-\t\tif (*p1 != *p2)\n-\t\t  cost = MAX (cost, REGISTER_MOVE_COST (m, *p1, *p2));\n-\t    }\n+\t\t  for (p1 = &reg_class_subclasses[i][0]; *p1 != LIM_REG_CLASSES;\n+\t\t       p1++)\n+\t\t    if (*p1 != j && contains_reg_of_mode [*p1][m])\n+\t\t      cost = MAX (cost, move_cost [m][*p1][j]);\n \n-\t  move_cost[m][i][j] = cost;\n+\t\t  move_cost[m][i][j] = cost;\n \n-\t  if (reg_class_subset_p (i, j))\n-\t    may_move_in_cost[m][i][j] = 0;\n-\t  else\n-\t    may_move_in_cost[m][i][j] = cost;\n+\t\t  if (reg_class_subset_p (i, j))\n+\t\t    may_move_in_cost[m][i][j] = 0;\n+\t\t  else\n+\t\t    may_move_in_cost[m][i][j] = cost;\n \n-\t  if (reg_class_subset_p (j, i))\n-\t    may_move_out_cost[m][i][j] = 0;\n-\t  else\n-\t    may_move_out_cost[m][i][j] = cost;\n-\t}\n+\t\t  if (reg_class_subset_p (j, i))\n+\t\t    may_move_out_cost[m][i][j] = 0;\n+\t\t  else\n+\t\t    may_move_out_cost[m][i][j] = cost;\n+\t\t}\n+\t    }\n+\telse\n+\t  for (j = 0; j < N_REG_CLASSES; j++)\n+\t    {\n+\t      move_cost[m][i][j] = 65536;\n+\t      may_move_in_cost[m][i][j] = 65536;\n+\t      may_move_out_cost[m][i][j] = 65536;\n+\t    }\n \n #ifdef CLASS_CANNOT_CHANGE_MODE\n   {"}]}