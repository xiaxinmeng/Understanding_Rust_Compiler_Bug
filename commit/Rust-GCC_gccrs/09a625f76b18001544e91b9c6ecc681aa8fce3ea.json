{"sha": "09a625f76b18001544e91b9c6ecc681aa8fce3ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDlhNjI1Zjc2YjE4MDAxNTQ0ZTkxYjljNmVjYzY4MWFhOGZjZTNlYQ==", "commit": {"author": {"name": "Tom Rix", "email": "trix@redhat.com", "date": "2001-12-09T07:23:05Z"}, "committer": {"name": "Tom Rix", "email": "trix@gcc.gnu.org", "date": "2001-12-09T07:23:05Z"}, "message": "Fix rs6000 -maix64 -mstring\n\nFrom-SVN: r47806", "tree": {"sha": "6063750d9c7ed22e8a9e5cc7396b44cdb48b7b41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6063750d9c7ed22e8a9e5cc7396b44cdb48b7b41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09a625f76b18001544e91b9c6ecc681aa8fce3ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09a625f76b18001544e91b9c6ecc681aa8fce3ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09a625f76b18001544e91b9c6ecc681aa8fce3ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09a625f76b18001544e91b9c6ecc681aa8fce3ea/comments", "author": {"login": "trixirt", "id": 7824193, "node_id": "MDQ6VXNlcjc4MjQxOTM=", "avatar_url": "https://avatars.githubusercontent.com/u/7824193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/trixirt", "html_url": "https://github.com/trixirt", "followers_url": "https://api.github.com/users/trixirt/followers", "following_url": "https://api.github.com/users/trixirt/following{/other_user}", "gists_url": "https://api.github.com/users/trixirt/gists{/gist_id}", "starred_url": "https://api.github.com/users/trixirt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/trixirt/subscriptions", "organizations_url": "https://api.github.com/users/trixirt/orgs", "repos_url": "https://api.github.com/users/trixirt/repos", "events_url": "https://api.github.com/users/trixirt/events{/privacy}", "received_events_url": "https://api.github.com/users/trixirt/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0854b1c4ba58aa17726e704c4dc79133c4516db3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0854b1c4ba58aa17726e704c4dc79133c4516db3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0854b1c4ba58aa17726e704c4dc79133c4516db3"}], "stats": {"total": 98, "additions": 93, "deletions": 5}, "files": [{"sha": "490a579a36f4a7fef8ab8a84b95758d1a224f6f6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09a625f76b18001544e91b9c6ecc681aa8fce3ea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09a625f76b18001544e91b9c6ecc681aa8fce3ea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=09a625f76b18001544e91b9c6ecc681aa8fce3ea", "patch": "@@ -1,3 +1,14 @@\n+2001-12-08  Tom Rix  <trix@redhat.com>\n+\n+\t* config/rs6000/aix43.h (NON_POWERPC_MASKS): Delete MASK_STRING.\n+\t* config/rs6000/aix51.h (NON_POWERPC_MASKS): Same.\n+ \t* config/rs6000/rs6000.md (load_multiple, store_multiple): Do not use \n+ \tfor powerpc64.\n+ \t* config/rs6000/rs6000.md (movstrsi_8reg, movstrsi_6reg, \n+ \tmovstrsi_4reg, movstrsi_1_reg): Add powerpc64.\n+\t* config/rs6000/rs6000.c (expand_block_move): Do not use \n+\tgen_movstrsi_2reg and powerpc64.\n+\n 2001-10-08  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* c-common.h (rid): Add RID_CHOOSE_EXPR and"}, {"sha": "93e186ca2a0f57e863e30cd5a1f4782dcafa3fb7", "filename": "gcc/config/rs6000/aix43.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09a625f76b18001544e91b9c6ecc681aa8fce3ea/gcc%2Fconfig%2Frs6000%2Faix43.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09a625f76b18001544e91b9c6ecc681aa8fce3ea/gcc%2Fconfig%2Frs6000%2Faix43.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix43.h?ref=09a625f76b18001544e91b9c6ecc681aa8fce3ea", "patch": "@@ -40,7 +40,7 @@ Boston, MA 02111-1307, USA.  */\n    The macro SUBTARGET_OVERRIDE_OPTIONS is provided for subtargets, to\n    get control.  */\n \n-#define NON_POWERPC_MASKS (MASK_POWER | MASK_POWER2 | MASK_STRING)\n+#define NON_POWERPC_MASKS (MASK_POWER | MASK_POWER2)\n #define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_64BIT && (target_flags & NON_POWERPC_MASKS))\t\t\\"}, {"sha": "ae01440f5d345542eab0bec1739c6d15a1267e81", "filename": "gcc/config/rs6000/aix51.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09a625f76b18001544e91b9c6ecc681aa8fce3ea/gcc%2Fconfig%2Frs6000%2Faix51.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09a625f76b18001544e91b9c6ecc681aa8fce3ea/gcc%2Fconfig%2Frs6000%2Faix51.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix51.h?ref=09a625f76b18001544e91b9c6ecc681aa8fce3ea", "patch": "@@ -40,7 +40,7 @@ Boston, MA 02111-1307, USA.  */\n    The macro SUBTARGET_OVERRIDE_OPTIONS is provided for subtargets, to\n    get control.  */\n \n-#define NON_POWERPC_MASKS (MASK_POWER | MASK_POWER2 | MASK_STRING)\n+#define NON_POWERPC_MASKS (MASK_POWER | MASK_POWER2)\n #define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_64BIT && (target_flags & NON_POWERPC_MASKS))\t\t\\"}, {"sha": "0cabac305cc9886eff75b9be0721889a196418b6", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09a625f76b18001544e91b9c6ecc681aa8fce3ea/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09a625f76b18001544e91b9c6ecc681aa8fce3ea/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=09a625f76b18001544e91b9c6ecc681aa8fce3ea", "patch": "@@ -4074,7 +4074,7 @@ expand_block_move (operands)\n \t\t\t\t\t\t     dest_reg, orig_dest),\n \t\t\t      tmp_reg);\n \t    }\n-\t  else if (bytes > 4)\n+\t  else if (bytes > 4 && !TARGET_POWERPC64)\n \t    {\t\t\t/* move up to 8 bytes at a time */\n \t      move_bytes = (bytes > 8) ? 8 : bytes;\n \t      emit_insn (gen_movstrsi_2reg (expand_block_move_mem (BLKmode,"}, {"sha": "b0c89191213e719748d47f64ac1918cc452174dd", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 79, "deletions": 2, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09a625f76b18001544e91b9c6ecc681aa8fce3ea/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09a625f76b18001544e91b9c6ecc681aa8fce3ea/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=09a625f76b18001544e91b9c6ecc681aa8fce3ea", "patch": "@@ -8568,7 +8568,7 @@\n   [(match_par_dup 3 [(set (match_operand:SI 0 \"\" \"\")\n \t\t\t  (match_operand:SI 1 \"\" \"\"))\n \t\t     (use (match_operand:SI 2 \"\" \"\"))])]\n-  \"TARGET_STRING\"\n+  \"TARGET_STRING && !TARGET_POWERPC64\"\n   \"\n {\n   int regno;\n@@ -8664,7 +8664,7 @@\n \t\t\t  (match_operand:SI 1 \"\" \"\"))\n \t\t     (clobber (scratch:SI))\n \t\t     (use (match_operand:SI 2 \"\" \"\"))])]\n-  \"TARGET_STRING\"\n+  \"TARGET_STRING && !TARGET_POWERPC64\"\n   \"\n {\n   int regno;\n@@ -8810,6 +8810,30 @@\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"8\")])\n \n+(define_insn \"\"\n+  [(set (mem:BLK (match_operand:DI 0 \"gpc_reg_operand\" \"b\"))\n+\t(mem:BLK (match_operand:DI 1 \"gpc_reg_operand\" \"b\")))\n+   (use (match_operand:SI 2 \"immediate_operand\" \"i\"))\n+   (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n+   (clobber (match_operand:SI 4 \"gpc_reg_operand\" \"=r\"))\n+   (clobber (reg:SI  6))\n+   (clobber (reg:SI  7))\n+   (clobber (reg:SI  8))\n+   (clobber (reg:SI  9))\n+   (clobber (reg:SI 10))\n+   (clobber (reg:SI 11))\n+   (clobber (reg:SI 12))\n+   (clobber (match_scratch:SI 5 \"X\"))]\n+  \"TARGET_STRING && TARGET_POWERPC64\n+   && ((INTVAL (operands[2]) > 24 && INTVAL (operands[2]) < 32)\n+       || INTVAL (operands[2]) == 0)\n+   && (REGNO (operands[0]) < 5 || REGNO (operands[0]) > 12)\n+   && (REGNO (operands[1]) < 5 || REGNO (operands[1]) > 12)\n+   && REGNO (operands[4]) == 5\"\n+  \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"length\" \"8\")])\n+\n ;; Move up to 24 bytes at a time.  The fixed registers are needed because the\n ;; register allocator doesn't have a clue about allocating 6 word registers.\n ;; rD/rS = r5 is preferred, efficient form.\n@@ -8870,6 +8894,27 @@\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"8\")])\n \n+(define_insn \"\"\n+  [(set (mem:BLK (match_operand:DI 0 \"gpc_reg_operand\" \"b\"))\n+\t(mem:BLK (match_operand:DI 1 \"gpc_reg_operand\" \"b\")))\n+   (use (match_operand:SI 2 \"immediate_operand\" \"i\"))\n+   (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n+   (clobber (match_operand:SI 4 \"gpc_reg_operand\" \"=r\"))\n+   (clobber (reg:SI  6))\n+   (clobber (reg:SI  7))\n+   (clobber (reg:SI  8))\n+   (clobber (reg:SI  9))\n+   (clobber (reg:SI 10))\n+   (clobber (match_scratch:SI 5 \"X\"))]\n+  \"TARGET_STRING && TARGET_POWERPC64\n+   && INTVAL (operands[2]) > 16 && INTVAL (operands[2]) <= 32\n+   && (REGNO (operands[0]) < 5 || REGNO (operands[0]) > 10)\n+   && (REGNO (operands[1]) < 5 || REGNO (operands[1]) > 10)\n+   && REGNO (operands[4]) == 5\"\n+  \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"length\" \"8\")])\n+\n ;; Move up to 16 bytes at a time, using 4 fixed registers to avoid spill\n ;; problems with TImode.\n ;; rD/rS = r5 is preferred, efficient form.\n@@ -8924,6 +8969,25 @@\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"8\")])\n \n+(define_insn \"\"\n+  [(set (mem:BLK (match_operand:DI 0 \"gpc_reg_operand\" \"b\"))\n+\t(mem:BLK (match_operand:DI 1 \"gpc_reg_operand\" \"b\")))\n+   (use (match_operand:SI 2 \"immediate_operand\" \"i\"))\n+   (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n+   (clobber (match_operand:SI 4 \"gpc_reg_operand\" \"=r\"))\n+   (clobber (reg:SI 6))\n+   (clobber (reg:SI 7))\n+   (clobber (reg:SI 8))\n+   (clobber (match_scratch:SI 5 \"X\"))]\n+  \"TARGET_STRING && TARGET_POWERPC64\n+   && INTVAL (operands[2]) > 8 && INTVAL (operands[2]) <= 16\n+   && (REGNO (operands[0]) < 5 || REGNO (operands[0]) > 8)\n+   && (REGNO (operands[1]) < 5 || REGNO (operands[1]) > 8)\n+   && REGNO (operands[4]) == 5\"\n+  \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"length\" \"8\")])\n+\n ;; Move up to 8 bytes at a time.\n (define_expand \"movstrsi_2reg\"\n   [(parallel [(set (match_operand 0 \"\" \"\")\n@@ -8998,6 +9062,19 @@\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"8\")])\n \n+(define_insn \"\"\n+  [(set (mem:BLK (match_operand:DI 0 \"gpc_reg_operand\" \"b\"))\n+\t(mem:BLK (match_operand:DI 1 \"gpc_reg_operand\" \"b\")))\n+   (use (match_operand:SI 2 \"immediate_operand\" \"i\"))\n+   (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n+   (clobber (match_scratch:SI 4 \"=&r\"))\n+   (clobber (match_scratch:SI 5 \"X\"))]\n+  \"TARGET_STRING && TARGET_POWERPC64\n+   && INTVAL (operands[2]) > 0 && INTVAL (operands[2]) <= 4\"\n+  \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"length\" \"8\")])\n+\n \f\n ;; Define insns that do load or store with update.  Some of these we can\n ;; get by using pre-decrement or pre-increment, but the hardware can also"}]}