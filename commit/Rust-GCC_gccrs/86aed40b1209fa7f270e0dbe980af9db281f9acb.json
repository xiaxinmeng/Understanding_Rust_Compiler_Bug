{"sha": "86aed40b1209fa7f270e0dbe980af9db281f9acb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODZhZWQ0MGIxMjA5ZmE3ZjI3MGUwZGJlOTgwYWY5ZGIyODFmOWFjYg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-02-27T19:13:55Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-02-27T19:13:55Z"}, "message": "(simple_cst_equal): New default case handles most tree codes based on TREE_CODE_CLASS.\n\n(simple_cst_equal): New default case handles most\ntree codes based on TREE_CODE_CLASS.  Delete newly redundant cases\nfor specific tree codes.\n\nFrom-SVN: r3559", "tree": {"sha": "29d7a9beecac8c7e6cf4c7adcc5fe3cae4f742ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29d7a9beecac8c7e6cf4c7adcc5fe3cae4f742ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86aed40b1209fa7f270e0dbe980af9db281f9acb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86aed40b1209fa7f270e0dbe980af9db281f9acb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86aed40b1209fa7f270e0dbe980af9db281f9acb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86aed40b1209fa7f270e0dbe980af9db281f9acb/comments", "author": null, "committer": null, "parents": [{"sha": "ac4b1974463f134a9940e43163e652f63074982e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac4b1974463f134a9940e43163e652f63074982e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac4b1974463f134a9940e43163e652f63074982e"}], "stats": {"total": 57, "additions": 25, "deletions": 32}, "files": [{"sha": "cc2219b9b2f5d1e4cd91295229a043f4ec2852cf", "filename": "gcc/tree.c", "status": "modified", "additions": 25, "deletions": 32, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86aed40b1209fa7f270e0dbe980af9db281f9acb/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86aed40b1209fa7f270e0dbe980af9db281f9acb/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=86aed40b1209fa7f270e0dbe980af9db281f9acb", "patch": "@@ -2587,42 +2587,36 @@ simple_cst_equal (t1, t2)\n \treturn simple_cst_equal (TREE_OPERAND (t1, 0), TREE_OPERAND (t2, 0));\n       return 0;\n \n-    case BIT_FIELD_REF:\n-      return (simple_cst_equal (TREE_OPERAND (t1, 0), TREE_OPERAND (t2, 0))\n-\t      && simple_cst_equal (TREE_OPERAND (t1, 1), TREE_OPERAND (t2, 1))\n-\t      && simple_cst_equal (TREE_OPERAND (t1, 2), TREE_OPERAND (t2, 2)));\n-\n     case VAR_DECL:\n     case PARM_DECL:\n     case CONST_DECL:\n     case FUNCTION_DECL:\n       return 0;\n+    }\n \n-    case PLUS_EXPR:\n-    case MINUS_EXPR:\n-    case MULT_EXPR:\n-    case TRUNC_DIV_EXPR:\n-    case TRUNC_MOD_EXPR:\n-    case LSHIFT_EXPR:\n-    case RSHIFT_EXPR:\n-      cmp = simple_cst_equal (TREE_OPERAND (t1, 0), TREE_OPERAND (t2, 0));\n-      if (cmp <= 0)\n-\treturn cmp;\n-      return simple_cst_equal (TREE_OPERAND (t1, 1), TREE_OPERAND (t2, 1));\n-\n-    case NEGATE_EXPR:\n-    case ADDR_EXPR:\n-    case REFERENCE_EXPR:\n-    case INDIRECT_REF:\n-      return simple_cst_equal (TREE_OPERAND (t1, 0), TREE_OPERAND (t2, 0));\n+  /* This general rule works for most tree codes.\n+     All exceptions should be handled above.  */\n \n-    default:\n-#if 0\n-      return lang_simple_cst_equal (t1, t2);\n-#else\n-      return -1;\n-#endif\n+  switch (TREE_CODE_CLASS (code1))\n+    {\n+      int i;\n+    case '1':\n+    case '2':\n+    case '<':\n+    case 'e':\n+    case 'r':\n+    case 's':\n+      cmp = 1;\n+      for (i=0; i<tree_code_length[(int) code1]; ++i)\n+\t{\n+\t  cmp = simple_cst_equal (TREE_OPERAND (t1, i), TREE_OPERAND (t2, i));\n+\t  if (cmp <= 0)\n+\t    return cmp;\n+\t}\n+      return cmp;\n     }\n+\n+  return -1;\n }\n \f\n /* Constructors for pointer, array and function types.\n@@ -2896,10 +2890,9 @@ build_method_type (basetype, type)\n   return t;\n }\n \n-/* Construct, lay out and return the type of methods belonging to class\n-   BASETYPE and whose arguments and values are described by TYPE.\n-   If that type exists already, reuse it.\n-   TYPE must be a FUNCTION_TYPE node.  */\n+/* Construct, lay out and return the type of offsets to a value\n+   of type TYPE, within an object of type BASETYPE.\n+   If a suitable offset type exists already, reuse it.  */\n \n tree\n build_offset_type (basetype, type)"}]}