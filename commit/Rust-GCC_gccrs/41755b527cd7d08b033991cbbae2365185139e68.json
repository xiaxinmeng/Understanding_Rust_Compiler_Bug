{"sha": "41755b527cd7d08b033991cbbae2365185139e68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE3NTViNTI3Y2Q3ZDA4YjAzMzk5MWNiYmFlMjM2NTE4NTEzOWU2OA==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2014-09-24T08:05:17Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-09-24T08:05:17Z"}, "message": "AVX-512. Add vpshuf[lh]w insn patterns.\n\ngcc/\n\t* config/i386/sse.md\n\t(define_c_enum \"unspec\"): Add UNSPEC_PSHUFHW, UNSPEC_PSHUFLW.\n\t(define_insn \"<mask_codefor>avx512bw_pshuflwv32hi<mask_name>\"): New.\n\t(define_expand \"avx512vl_pshuflwv3_mask\"): Ditto.\n\t(define_insn \"avx2_pshuflw_1<mask_name>\"): Add masking.\n\t(define_expand \"avx512vl_pshuflw_mask\"): New.\n\t(define_insn \"sse2_pshuflw_1<mask_name>\"): Add masking.\n\t(define_insn \"<mask_codefor>avx512bw_pshufhwv32hi<mask_name>\"): New.\n\t(define_expand \"avx512vl_pshufhwv3_mask\"): Ditto.\n\t(define_insn \"avx2_pshufhw_1<mask_name>\"): Add masking.\n\t(define_expand \"avx512vl_pshufhw_mask\"): New.\n\t(define_insn \"sse2_pshufhw_1<mask_name>\"): Add masking.\n\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\n\nFrom-SVN: r215544", "tree": {"sha": "098f48bfcac23006d051cf00bc1e69d4159991e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/098f48bfcac23006d051cf00bc1e69d4159991e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41755b527cd7d08b033991cbbae2365185139e68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41755b527cd7d08b033991cbbae2365185139e68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41755b527cd7d08b033991cbbae2365185139e68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41755b527cd7d08b033991cbbae2365185139e68/comments", "author": null, "committer": null, "parents": [{"sha": "d286410b07e03534c89c323e4fa0c432d048f224", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d286410b07e03534c89c323e4fa0c432d048f224", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d286410b07e03534c89c323e4fa0c432d048f224"}], "stats": {"total": 172, "additions": 152, "deletions": 20}, "files": [{"sha": "a9707a3b8ac650cf4879a106ddc0083ff4543a2d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41755b527cd7d08b033991cbbae2365185139e68/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41755b527cd7d08b033991cbbae2365185139e68/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=41755b527cd7d08b033991cbbae2365185139e68", "patch": "@@ -1,3 +1,25 @@\n+2014-09-24  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* config/i386/sse.md\n+\t(define_c_enum \"unspec\"): Add UNSPEC_PSHUFHW, UNSPEC_PSHUFLW.\n+\t(define_insn \"<mask_codefor>avx512bw_pshuflwv32hi<mask_name>\"): New.\n+\t(define_expand \"avx512vl_pshuflwv3_mask\"): Ditto.\n+\t(define_insn \"avx2_pshuflw_1<mask_name>\"): Add masking.\n+\t(define_expand \"avx512vl_pshuflw_mask\"): New.\n+\t(define_insn \"sse2_pshuflw_1<mask_name>\"): Add masking.\n+\t(define_insn \"<mask_codefor>avx512bw_pshufhwv32hi<mask_name>\"): New.\n+\t(define_expand \"avx512vl_pshufhwv3_mask\"): Ditto.\n+\t(define_insn \"avx2_pshufhw_1<mask_name>\"): Add masking.\n+\t(define_expand \"avx512vl_pshufhw_mask\"): New.\n+\t(define_insn \"sse2_pshufhw_1<mask_name>\"): Add masking.\n+\n 2014-09-24  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Anna Tikhonova  <anna.tikhonova@intel.com>"}, {"sha": "d1c399c57557e88c9ee3bedddf9b86671f13181c", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 130, "deletions": 20, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41755b527cd7d08b033991cbbae2365185139e68/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41755b527cd7d08b033991cbbae2365185139e68/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=41755b527cd7d08b033991cbbae2365185139e68", "patch": "@@ -129,6 +129,10 @@\n   UNSPEC_SHA256MSG2\n   UNSPEC_SHA256RNDS2\n \n+  ;; For AVX512BW support\n+  UNSPEC_PSHUFHW\n+  UNSPEC_PSHUFLW\n+\n   ;; For AVX512DQ support\n   UNSPEC_REDUCE\n   UNSPEC_FPCLASS\n@@ -11789,6 +11793,40 @@\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn \"<mask_codefor>avx512bw_pshuflwv32hi<mask_name>\"\n+  [(set (match_operand:V32HI 0 \"register_operand\" \"=v\")\n+\t(unspec:V32HI\n+\t  [(match_operand:V32HI 1 \"nonimmediate_operand\" \"vm\")\n+\t   (match_operand:SI 2 \"const_0_to_255_operand\" \"n\")]\n+\t  UNSPEC_PSHUFLW))]\n+  \"TARGET_AVX512BW\"\n+  \"vpshuflw\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n+(define_expand \"avx512vl_pshuflwv3_mask\"\n+  [(match_operand:V16HI 0 \"register_operand\")\n+   (match_operand:V16HI 1 \"nonimmediate_operand\")\n+   (match_operand:SI 2 \"const_0_to_255_operand\")\n+   (match_operand:V16HI 3 \"register_operand\")\n+   (match_operand:HI 4 \"register_operand\")]\n+  \"TARGET_AVX512VL && TARGET_AVX512BW\"\n+{\n+  int mask = INTVAL (operands[2]);\n+  emit_insn (gen_avx2_pshuflw_1_mask (operands[0], operands[1],\n+\t\t\t\t GEN_INT ((mask >> 0) & 3),\n+\t\t\t\t GEN_INT ((mask >> 2) & 3),\n+\t\t\t\t GEN_INT ((mask >> 4) & 3),\n+\t\t\t\t GEN_INT ((mask >> 6) & 3),\n+\t\t\t\t GEN_INT (((mask >> 0) & 3) + 8),\n+\t\t\t\t GEN_INT (((mask >> 2) & 3) + 8),\n+\t\t\t\t GEN_INT (((mask >> 4) & 3) + 8),\n+\t\t\t\t GEN_INT (((mask >> 6) & 3) + 8),\n+                 operands[3], operands[4]));\n+  DONE;\n+})\n+\n (define_expand \"avx2_pshuflwv3\"\n   [(match_operand:V16HI 0 \"register_operand\")\n    (match_operand:V16HI 1 \"nonimmediate_operand\")\n@@ -11808,10 +11846,10 @@\n   DONE;\n })\n \n-(define_insn \"avx2_pshuflw_1\"\n-  [(set (match_operand:V16HI 0 \"register_operand\" \"=x\")\n+(define_insn \"avx2_pshuflw_1<mask_name>\"\n+  [(set (match_operand:V16HI 0 \"register_operand\" \"=v\")\n \t(vec_select:V16HI\n-\t  (match_operand:V16HI 1 \"nonimmediate_operand\" \"xm\")\n+\t  (match_operand:V16HI 1 \"nonimmediate_operand\" \"vm\")\n \t  (parallel [(match_operand 2 \"const_0_to_3_operand\")\n \t\t     (match_operand 3 \"const_0_to_3_operand\")\n \t\t     (match_operand 4 \"const_0_to_3_operand\")\n@@ -11829,6 +11867,7 @@\n \t\t     (const_int 14)\n \t\t     (const_int 15)])))]\n   \"TARGET_AVX2\n+   && <mask_avx512bw_condition> && <mask_avx512vl_condition>\n    && INTVAL (operands[2]) + 8 == INTVAL (operands[6])\n    && INTVAL (operands[3]) + 8 == INTVAL (operands[7])\n    && INTVAL (operands[4]) + 8 == INTVAL (operands[8])\n@@ -11841,13 +11880,31 @@\n   mask |= INTVAL (operands[5]) << 6;\n   operands[2] = GEN_INT (mask);\n \n-  return \"vpshuflw\\t{%2, %1, %0|%0, %1, %2}\";\n+  return \"vpshuflw\\t{%2, %1, %0<mask_operand10>|%0<mask_operand10>, %1, %2}\";\n }\n   [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"prefix\" \"maybe_evex\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"OI\")])\n \n+(define_expand \"avx512vl_pshuflw_mask\"\n+  [(match_operand:V8HI 0 \"register_operand\")\n+   (match_operand:V8HI 1 \"nonimmediate_operand\")\n+   (match_operand:SI 2 \"const_0_to_255_operand\")\n+   (match_operand:V8HI 3 \"register_operand\")\n+   (match_operand:QI 4 \"register_operand\")]\n+  \"TARGET_AVX512VL && TARGET_AVX512BW\"\n+{\n+  int mask = INTVAL (operands[2]);\n+  emit_insn (gen_sse2_pshuflw_1_mask (operands[0], operands[1],\n+\t\t\t\t GEN_INT ((mask >> 0) & 3),\n+\t\t\t\t GEN_INT ((mask >> 2) & 3),\n+\t\t\t\t GEN_INT ((mask >> 4) & 3),\n+\t\t\t\t GEN_INT ((mask >> 6) & 3),\n+                 operands[3], operands[4]));\n+  DONE;\n+})\n+\n (define_expand \"sse2_pshuflw\"\n   [(match_operand:V8HI 0 \"register_operand\")\n    (match_operand:V8HI 1 \"nonimmediate_operand\")\n@@ -11863,10 +11920,10 @@\n   DONE;\n })\n \n-(define_insn \"sse2_pshuflw_1\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n+(define_insn \"sse2_pshuflw_1<mask_name>\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n \t(vec_select:V8HI\n-\t  (match_operand:V8HI 1 \"nonimmediate_operand\" \"xm\")\n+\t  (match_operand:V8HI 1 \"nonimmediate_operand\" \"vm\")\n \t  (parallel [(match_operand 2 \"const_0_to_3_operand\")\n \t\t     (match_operand 3 \"const_0_to_3_operand\")\n \t\t     (match_operand 4 \"const_0_to_3_operand\")\n@@ -11875,7 +11932,7 @@\n \t\t     (const_int 5)\n \t\t     (const_int 6)\n \t\t     (const_int 7)])))]\n-  \"TARGET_SSE2\"\n+  \"TARGET_SSE2 && <mask_avx512bw_condition> && <mask_avx512vl_condition>\"\n {\n   int mask = 0;\n   mask |= INTVAL (operands[2]) << 0;\n@@ -11884,7 +11941,7 @@\n   mask |= INTVAL (operands[5]) << 6;\n   operands[2] = GEN_INT (mask);\n \n-  return \"%vpshuflw\\t{%2, %1, %0|%0, %1, %2}\";\n+  return \"%vpshuflw\\t{%2, %1, %0<mask_operand6>|%0<mask_operand6>, %1, %2}\";\n }\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_data16\" \"0\")\n@@ -11912,10 +11969,44 @@\n   DONE;\n })\n \n-(define_insn \"avx2_pshufhw_1\"\n-  [(set (match_operand:V16HI 0 \"register_operand\" \"=x\")\n+(define_insn \"<mask_codefor>avx512bw_pshufhwv32hi<mask_name>\"\n+  [(set (match_operand:V32HI 0 \"register_operand\" \"=v\")\n+\t(unspec:V32HI\n+\t  [(match_operand:V32HI 1 \"nonimmediate_operand\" \"vm\")\n+\t   (match_operand:SI 2 \"const_0_to_255_operand\" \"n\")]\n+\t  UNSPEC_PSHUFHW))]\n+  \"TARGET_AVX512BW\"\n+  \"vpshufhw\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n+(define_expand \"avx512vl_pshufhwv3_mask\"\n+  [(match_operand:V16HI 0 \"register_operand\")\n+   (match_operand:V16HI 1 \"nonimmediate_operand\")\n+   (match_operand:SI 2 \"const_0_to_255_operand\")\n+   (match_operand:V16HI 3 \"register_operand\")\n+   (match_operand:HI 4 \"register_operand\")]\n+  \"TARGET_AVX512VL && TARGET_AVX512BW\"\n+{\n+  int mask = INTVAL (operands[2]);\n+  emit_insn (gen_avx2_pshufhw_1_mask (operands[0], operands[1],\n+\t\t\t\t GEN_INT (((mask >> 0) & 3) + 4),\n+\t\t\t\t GEN_INT (((mask >> 2) & 3) + 4),\n+\t\t\t\t GEN_INT (((mask >> 4) & 3) + 4),\n+\t\t\t\t GEN_INT (((mask >> 6) & 3) + 4),\n+\t\t\t\t GEN_INT (((mask >> 0) & 3) + 12),\n+\t\t\t\t GEN_INT (((mask >> 2) & 3) + 12),\n+\t\t\t\t GEN_INT (((mask >> 4) & 3) + 12),\n+\t\t\t\t GEN_INT (((mask >> 6) & 3) + 12),\n+                 operands[3], operands[4]));\n+  DONE;\n+})\n+\n+(define_insn \"avx2_pshufhw_1<mask_name>\"\n+  [(set (match_operand:V16HI 0 \"register_operand\" \"=v\")\n \t(vec_select:V16HI\n-\t  (match_operand:V16HI 1 \"nonimmediate_operand\" \"xm\")\n+\t  (match_operand:V16HI 1 \"nonimmediate_operand\" \"vm\")\n \t  (parallel [(const_int 0)\n \t\t     (const_int 1)\n \t\t     (const_int 2)\n@@ -11933,6 +12024,7 @@\n \t\t     (match_operand 8 \"const_12_to_15_operand\")\n \t\t     (match_operand 9 \"const_12_to_15_operand\")])))]\n   \"TARGET_AVX2\n+   && <mask_avx512bw_condition> && <mask_avx512vl_condition>\n    && INTVAL (operands[2]) + 8 == INTVAL (operands[6])\n    && INTVAL (operands[3]) + 8 == INTVAL (operands[7])\n    && INTVAL (operands[4]) + 8 == INTVAL (operands[8])\n@@ -11945,13 +12037,31 @@\n   mask |= (INTVAL (operands[5]) - 4) << 6;\n   operands[2] = GEN_INT (mask);\n \n-  return \"vpshufhw\\t{%2, %1, %0|%0, %1, %2}\";\n+  return \"vpshufhw\\t{%2, %1, %0<mask_operand10>|%0<mask_operand10>, %1, %2}\";\n }\n   [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"prefix\" \"maybe_evex\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"OI\")])\n \n+(define_expand \"avx512vl_pshufhw_mask\"\n+  [(match_operand:V8HI 0 \"register_operand\")\n+   (match_operand:V8HI 1 \"nonimmediate_operand\")\n+   (match_operand:SI 2 \"const_0_to_255_operand\")\n+   (match_operand:V8HI 3 \"register_operand\")\n+   (match_operand:QI 4 \"register_operand\")]\n+  \"TARGET_AVX512VL && TARGET_AVX512BW\"\n+{\n+  int mask = INTVAL (operands[2]);\n+  emit_insn (gen_sse2_pshufhw_1_mask (operands[0], operands[1],\n+\t\t\t\t GEN_INT (((mask >> 0) & 3) + 4),\n+\t\t\t\t GEN_INT (((mask >> 2) & 3) + 4),\n+\t\t\t\t GEN_INT (((mask >> 4) & 3) + 4),\n+\t\t\t\t GEN_INT (((mask >> 6) & 3) + 4),\n+                 operands[3], operands[4]));\n+  DONE;\n+})\n+\n (define_expand \"sse2_pshufhw\"\n   [(match_operand:V8HI 0 \"register_operand\")\n    (match_operand:V8HI 1 \"nonimmediate_operand\")\n@@ -11967,10 +12077,10 @@\n   DONE;\n })\n \n-(define_insn \"sse2_pshufhw_1\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n+(define_insn \"sse2_pshufhw_1<mask_name>\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n \t(vec_select:V8HI\n-\t  (match_operand:V8HI 1 \"nonimmediate_operand\" \"xm\")\n+\t  (match_operand:V8HI 1 \"nonimmediate_operand\" \"vm\")\n \t  (parallel [(const_int 0)\n \t\t     (const_int 1)\n \t\t     (const_int 2)\n@@ -11979,7 +12089,7 @@\n \t\t     (match_operand 3 \"const_4_to_7_operand\")\n \t\t     (match_operand 4 \"const_4_to_7_operand\")\n \t\t     (match_operand 5 \"const_4_to_7_operand\")])))]\n-  \"TARGET_SSE2\"\n+  \"TARGET_SSE2 && <mask_avx512bw_condition> && <mask_avx512vl_condition>\"\n {\n   int mask = 0;\n   mask |= (INTVAL (operands[2]) - 4) << 0;\n@@ -11988,7 +12098,7 @@\n   mask |= (INTVAL (operands[5]) - 4) << 6;\n   operands[2] = GEN_INT (mask);\n \n-  return \"%vpshufhw\\t{%2, %1, %0|%0, %1, %2}\";\n+  return \"%vpshufhw\\t{%2, %1, %0<mask_operand6>|%0<mask_operand6>, %1, %2}\";\n }\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_rep\" \"1\")"}]}