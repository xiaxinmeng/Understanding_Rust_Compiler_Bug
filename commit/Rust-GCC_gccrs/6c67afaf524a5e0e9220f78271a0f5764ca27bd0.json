{"sha": "6c67afaf524a5e0e9220f78271a0f5764ca27bd0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM2N2FmYWY1MjRhNWUwZTkyMjBmNzgyNzFhMGY1NzY0Y2EyN2JkMA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-05-27T12:46:45Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-05-27T12:47:52Z"}, "message": "i386: Add XOP comparisons for 4- and 8-byte vectors [PR100637]\n\n2021-05-27  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/\n\tPR target/100637\n\t* config/i386/i386-expand.c (ix86_expand_int_sse_cmp):\n\tFor TARGET_XOP bypass SSE comparisons for all supported vector modes.\n\t* config/i386/mmx.md (*xop_maskcmp<MMXMODEI:mode>3): New insn pattern.\n\t(*xop_maskcmp<VI_32:mode>3): Ditto.\n\t(*xop_maskcmp_uns<MMXMODEI:mode>3): Ditto.\n\t(*xop_maskcmp_uns<VI_32:mode>3): Ditto.", "tree": {"sha": "1f98fa1cf0723080fc3b0b54c0d16e8830baf7bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f98fa1cf0723080fc3b0b54c0d16e8830baf7bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c67afaf524a5e0e9220f78271a0f5764ca27bd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c67afaf524a5e0e9220f78271a0f5764ca27bd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c67afaf524a5e0e9220f78271a0f5764ca27bd0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c67afaf524a5e0e9220f78271a0f5764ca27bd0/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71d7dc6cd09b603bcc58d5d1747a86eb498bb147", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71d7dc6cd09b603bcc58d5d1747a86eb498bb147", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71d7dc6cd09b603bcc58d5d1747a86eb498bb147"}], "stats": {"total": 60, "additions": 58, "deletions": 2}, "files": [{"sha": "4185f58eed5a735454520620aed5f145f475730a", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c67afaf524a5e0e9220f78271a0f5764ca27bd0/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c67afaf524a5e0e9220f78271a0f5764ca27bd0/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=6c67afaf524a5e0e9220f78271a0f5764ca27bd0", "patch": "@@ -4124,8 +4124,8 @@ ix86_expand_int_sse_cmp (rtx dest, enum rtx_code code, rtx cop0, rtx cop1,\n \n   /* XOP supports all of the comparisons on all 128-bit vector int types.  */\n   if (TARGET_XOP\n-      && (mode == V16QImode || mode == V8HImode\n-\t  || mode == V4SImode || mode == V2DImode))\n+      && GET_MODE_CLASS (mode) == MODE_VECTOR_INT\n+      && GET_MODE_SIZE (mode) <= 16)\n     ;\n   /* AVX512F supports all of the comparsions\n      on all 128/256/512-bit vector int types.  */"}, {"sha": "35e4123fa2576e9409ae3a16adf4f59aca0af5ba", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c67afaf524a5e0e9220f78271a0f5764ca27bd0/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c67afaf524a5e0e9220f78271a0f5764ca27bd0/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=6c67afaf524a5e0e9220f78271a0f5764ca27bd0", "patch": "@@ -2121,6 +2121,62 @@\n    (set_attr \"type\" \"ssecmp\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn \"*xop_maskcmp<mode>3\"\n+  [(set (match_operand:MMXMODEI 0 \"register_operand\" \"=x\")\n+\t(match_operator:MMXMODEI 1 \"ix86_comparison_int_operator\"\n+\t [(match_operand:MMXMODEI 2 \"register_operand\" \"x\")\n+\t  (match_operand:MMXMODEI 3 \"register_operand\" \"x\")]))]\n+  \"TARGET_XOP\"\n+  \"vpcom%Y1<mmxvecsize>\\t{%3, %2, %0|%0, %2, %3}\"\n+  [(set_attr \"type\" \"sse4arg\")\n+   (set_attr \"prefix_data16\" \"0\")\n+   (set_attr \"prefix_rep\" \"0\")\n+   (set_attr \"prefix_extra\" \"2\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"*xop_maskcmp<mode>3\"\n+  [(set (match_operand:VI_32 0 \"register_operand\" \"=x\")\n+\t(match_operator:VI_32 1 \"ix86_comparison_int_operator\"\n+\t [(match_operand:VI_32 2 \"register_operand\" \"x\")\n+\t  (match_operand:VI_32 3 \"register_operand\" \"x\")]))]\n+  \"TARGET_XOP\"\n+  \"vpcom%Y1<mmxvecsize>\\t{%3, %2, %0|%0, %2, %3}\"\n+  [(set_attr \"type\" \"sse4arg\")\n+   (set_attr \"prefix_data16\" \"0\")\n+   (set_attr \"prefix_rep\" \"0\")\n+   (set_attr \"prefix_extra\" \"2\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"*xop_maskcmp_uns<mode>3\"\n+  [(set (match_operand:MMXMODEI 0 \"register_operand\" \"=x\")\n+\t(match_operator:MMXMODEI 1 \"ix86_comparison_uns_operator\"\n+\t [(match_operand:MMXMODEI 2 \"register_operand\" \"x\")\n+\t  (match_operand:MMXMODEI 3 \"register_operand\" \"x\")]))]\n+  \"TARGET_XOP\"\n+  \"vpcom%Y1u<mmxvecsize>\\t{%3, %2, %0|%0, %2, %3}\"\n+  [(set_attr \"type\" \"ssecmp\")\n+   (set_attr \"prefix_data16\" \"0\")\n+   (set_attr \"prefix_rep\" \"0\")\n+   (set_attr \"prefix_extra\" \"2\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"*xop_maskcmp_uns<mode>3\"\n+  [(set (match_operand:VI_32 0 \"register_operand\" \"=x\")\n+\t(match_operator:VI_32 1 \"ix86_comparison_uns_operator\"\n+\t [(match_operand:VI_32 2 \"register_operand\" \"x\")\n+\t  (match_operand:VI_32 3 \"register_operand\" \"x\")]))]\n+  \"TARGET_XOP\"\n+  \"vpcom%Y1u<mmxvecsize>\\t{%3, %2, %0|%0, %2, %3}\"\n+  [(set_attr \"type\" \"ssecmp\")\n+   (set_attr \"prefix_data16\" \"0\")\n+   (set_attr \"prefix_rep\" \"0\")\n+   (set_attr \"prefix_extra\" \"2\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"mode\" \"TI\")])\n+\n (define_expand \"vec_cmp<mode><mode>\"\n   [(set (match_operand:MMXMODEI 0 \"register_operand\")\n \t(match_operator:MMXMODEI 1 \"\""}]}