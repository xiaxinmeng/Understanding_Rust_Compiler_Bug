{"sha": "f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjYzZDFiZjc3NWU4YzE1Yzg3N2Y1YTliZjBlM2Y2ZmJiMDIxNjg2Yg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-10-28T12:42:06Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-10-28T12:42:06Z"}, "message": "ChangeLog.0, [...]: Fix spelling errors.\n\n\t* ChangeLog.0, ChangeLog.1, ChangeLog.2, ChangeLog.3, ChangeLog.4,\n\tChangeLog.5, ChangeLog, ChangeLog.lib, FSFChangeLog.10, ONEWS,\n\tc-common.c, caller-save.c, cfg.c, cfgcleanup.c, cfgrtl.c,\n\tcollect2.c, df.h, diagnostic.h, final.c, gcse.c, gthr.h,\n\thaifa-sched.c, jump.c, local-alloc.c, profile.c, protoize.c,\n\tregmove.c, reload1.c, rtlanal.c, sched-vis.c, ssa.c, stmt.c,\n\tsystem.h, toplev.c: Fix spelling errors.\n\nFrom-SVN: r46580", "tree": {"sha": "5147904e5bf678349cb97df457fd5f0fafc4363e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5147904e5bf678349cb97df457fd5f0fafc4363e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63f6bcd791a4efb738523b32ebc8be2b56377041", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63f6bcd791a4efb738523b32ebc8be2b56377041", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63f6bcd791a4efb738523b32ebc8be2b56377041"}], "stats": {"total": 122, "additions": 66, "deletions": 56}, "files": [{"sha": "d811f929304998af930b8f3448030f8df21f36a5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b", "patch": "@@ -1,3 +1,13 @@\n+2001-10-28  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* ChangeLog.0, ChangeLog.1, ChangeLog.2, ChangeLog.3, ChangeLog.4,\n+\tChangeLog.5, ChangeLog, ChangeLog.lib, FSFChangeLog.10, ONEWS,\n+\tc-common.c, caller-save.c, cfg.c, cfgcleanup.c, cfgrtl.c,\n+\tcollect2.c, df.h, diagnostic.h, final.c, gcse.c, gthr.h,\n+\thaifa-sched.c, jump.c, local-alloc.c, profile.c, protoize.c,\n+\tregmove.c, reload1.c, rtlanal.c, sched-vis.c, ssa.c, stmt.c,\n+\tsystem.h, toplev.c: Fix spelling errors.\n+\n Sat Oct 27 17:32:04 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* gcse.c (insert_insn_end_bb): Don't assume PAT is a SET.\n@@ -4974,7 +4984,7 @@ Thu Aug 30 18:50:37 2001  J\"orn Rennecke <amylaar@redhat.com>\n 2001-08-30  Kazu Hirata  <kazu@hxi.com>\n \n \t* config/h8300/h8300.md (zero_extendqihi2): Changes to\n-\tdefine_expand to accomodate target-specific attributes.\n+\tdefine_expand to accommodate target-specific attributes.\n \t(anonymous zero_extendqihi2 patterns): New.\n \n Thu Aug 30 18:10:56 2001  J\"orn Rennecke <amylaar@redhat.com>\n@@ -5714,7 +5724,7 @@ Thu Aug 23 17:21:43 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* final.c (LABEL_ALIGN_AFTER_BARRIER): Default to no alignment.\n \t(final_scan_insn): Consider jump tables data even if we have no\n-\tindependant text section if !JUMP_TABLES_IN_TEXT_SECTION.  Use\n+\tindependent text section if !JUMP_TABLES_IN_TEXT_SECTION.  Use\n \tADDR_VEC_ALIGN.\n \t* config/ia64/ia64.h (JUMP_TABLES_IN_TEXT_SECTION): Remove.\n \t(ASM_OUTPUT_CASE_END): Remove.\n@@ -6174,7 +6184,7 @@ Mon Aug 20 01:44:50 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n 2001-08-18  Graham Stott  <grahams@redhat.com>\n \n-\t* config/mips/mips.md (adddi3_internal_2+1): Remove contraints from\n+\t* config/mips/mips.md (adddi3_internal_2+1): Remove constraints from\n \tdefine_split.\n \t(adddi3_internal_2+2): Likewise.\n \t(eh_set_lr_di+1): Likewise.\n@@ -8485,9 +8495,9 @@ Tue Jul 31 15:33:27 CEST 2001  Jan Hubicka  <jh@suse.cz>\n 2001-07-31 Hartmut Penner <hpenner@de.ibm.com>\n \n \t* doc/install.texi: Add s390 and s390x as new targets.\n-\t* doc/invoke.texi: Add documantation of S/390 and zSeries\n+\t* doc/invoke.texi: Add documentation of S/390 and zSeries\n \ttarget options.\n-\t* doc/md.texi: Add documantation of S/390 and zSeries constraints.\n+\t* doc/md.texi: Add documentation of S/390 and zSeries constraints.\n \n 2001-07-30  Roman Zippel  <zippel@linux-m68k.org>\n "}, {"sha": "208bf676e1794cc46caf850e8962c070db811492", "filename": "gcc/ChangeLog.0", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2FChangeLog.0", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2FChangeLog.0", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.0?ref=f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b", "patch": "@@ -3651,7 +3651,7 @@ Thu May 14 16:30:47 1998  Andrew MacLeod  <amacleod@cygnus.com>\n \tnow that we don't automatically know what the labels might be.\n \tLet scan_region() remove unreferenced EH BEGIN/END labels.\n \t* integrate.c (get_label_from_map): Put inlined labels onto the\n-\tpermanent obstack since we dont know which ones might be exception\n+\tpermanent obstack since we don't know which ones might be exception\n \tlabels.\n \t(save_for_inline_copying): Make new copies of all the handlers.\n \t(expand_inline_function): Make new copies of all the handlers."}, {"sha": "75b824581f81d54b3585eb1205009105b0b7a7e5", "filename": "gcc/ChangeLog.1", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2FChangeLog.1", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2FChangeLog.1", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.1?ref=f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b", "patch": "@@ -448,7 +448,7 @@ Mon May  3 22:38:41 1999  David Edelsohn  <edelsohn@gnu.org>\n \n Mon May  3 14:45:23 1999  Jeffrey A Law  (law@cygnus.com)\n \n-\t* mn10200.md (btst insns): btst does not leave cc0 in a useable\n+\t* mn10200.md (btst insns): btst does not leave cc0 in a usable\n \tstate for redundant tst eliminatino.\n \t* mn10300.md (btst insns): Likewise.\n "}, {"sha": "13855853d45dc845f9a5abff87d4af06be7efebc", "filename": "gcc/ChangeLog.2", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2FChangeLog.2", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2FChangeLog.2", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.2?ref=f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b", "patch": "@@ -10993,7 +10993,7 @@ Tue Aug 10 10:47:42 EDT 1999  Andrew MacLeod  <amacleod@cygnus.com>\n \ta rethrow symbol instead of an integer exception region number.\n \t* flow.c (Make_edges): Use new exception nesting routines to determine\n \twhich handlers are reachable from a CALL or asynchronous insn.\n-\tDont add an edge for calls with a REG_EH_REGION of -1 to non-local\n+\tDon't add an edge for calls with a REG_EH_REGION of -1 to non-local\n \tgoto receivers.\n \t(delete_eh_regions): Update rethrow labels, and don't delete\n \tregions which are the target of a rethrow."}, {"sha": "997f3511c35fdc444d9c60644f147b0a29ede520", "filename": "gcc/ChangeLog.3", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2FChangeLog.3", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2FChangeLog.3", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.3?ref=f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b", "patch": "@@ -366,7 +366,7 @@ Tue Jun 27 12:03:03 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \toffset, plus handle DW_CFA_def_cfa_expression.\n \t(def_cfa_1): Use to be dwarf2out_def_cfa, only now it uses a\n \tcfa_loc record.\n-\t(dwarf2out_def_cfa): Entry point maintained for compatability.\n+\t(dwarf2out_def_cfa): Entry point maintained for compatibility.\n \t(dwarf_cfi_name): Add DW_CFA_def_cfa_expression.\n \t(cfa_reg, cfa_offset): Replace with cfa_loc record 'cfa'.\n \t(cfa_store_reg, cfa_store_offset): Replace with cfa_loc 'cfa_store'.\n@@ -7928,7 +7928,7 @@ Thu Apr  6 19:11:47 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n Thu Apr  6 00:30:50 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n-\t* sh.h (FUNCTION_ARG_PARTIAL_NREGS): Accomodate an unsigned\n+\t* sh.h (FUNCTION_ARG_PARTIAL_NREGS): Accommodate an unsigned\n \tGET_MODE_SIZE.\n \n Wed Apr  5 23:17:10 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n@@ -13338,7 +13338,7 @@ Sat Feb 12 01:44:26 MET 2000  Jan Hubicka  <jh@suse.cz>\n \t(arm_valid_type_attribute_p): New function: Return true if the\n \tattribute is a valid, arm specific, attribute.\n \t(arm_comp_type_attribute): New function: Return true if the\n-\ttwo types have compatable, arm specific, attributes.\n+\ttwo types have compatible, arm specific, attributes.\n \n \t* config/arm/arm.h (CUMULATIVE_ARGS): Redefine to be a\n \tstructure.\n@@ -13774,7 +13774,7 @@ Tue Feb  8 15:51:50 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n Tue Feb  8 07:53:55 2000  Jan Hubicka  <jh@suse.cz>\n \n-\t* i386.md (addqi3_cc): Fix contraints.\n+\t* i386.md (addqi3_cc): Fix constraints.\n \n Tue Feb  8 01:39:45 2000  Hans-Peter Nilsson  <hp@bitrange.com>\n \n@@ -14858,7 +14858,7 @@ Mon Jan 24 16:56:10 2000  Jim Wilson  <wilson@cygnus.com>\n \n 2000-01-24  Christopher Faylor <cgf@cygnus.com>\n \n-\t* config/i386/t-cygwin: Accomodate new winsup directory layout\n+\t* config/i386/t-cygwin: Accommodate new winsup directory layout\n \twhen searching for include files.\n \n 2000-01-24  Richard Henderson  <rth@cygnus.com>"}, {"sha": "844730a631c54f4750a602035043d625cab184a3", "filename": "gcc/ChangeLog.4", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2FChangeLog.4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2FChangeLog.4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.4?ref=f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b", "patch": "@@ -4017,7 +4017,7 @@ Tue Nov 14 12:34:56 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n 2000-11-12  Mark Mitchell  <mark@codesourcery.com>\n \n-\t* jump.c (delete_computation): Don't assume that just becuase an\n+\t* jump.c (delete_computation): Don't assume that just because an\n \tinstruction sets a register, that register is dead.\n \n 2000-11-12  Neil Booth  <neilb@earthling.net>\n@@ -6719,8 +6719,8 @@ Tue Oct 10 23:14:33 2000  Denis Chertykov  <denisc@overta.ru>\n 2000-10-07  Will Cohen  <wcohen@redhat.com>, Kazu Hirata  <kazu@hxi.com>\n \n \t* config/h8300/h8300.md: Remove the memory alternative and correct\n-\tthe insn lengths in the templates for sign extention and zero\n-\textention.\n+\tthe insn lengths in the templates for sign extension and zero\n+\textension.\n \n 2000-10-07  Richard Henderson  <rth@cygnus.com>\n \n@@ -13466,7 +13466,7 @@ Tue Jul 25 23:08:33 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n 2000-07-24  Nick Clifton  <nickc@cygnus.com>\n \n \t* config/arm/arm.c (emit_multi_reg_push): Generate a\n-\tREG_FRAME_RELEATED_NOTE that is compatable with the code in\n+\tREG_FRAME_RELEATED_NOTE that is compatible with the code in\n \tdwarf2out_debug_frame_expr.\n \n 2000-07-24  Jason Merrill  <jason@redhat.com>"}, {"sha": "d1003c9baefcfd37e2d94780de9da8afff6c745d", "filename": "gcc/ChangeLog.5", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2FChangeLog.5", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2FChangeLog.5", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.5?ref=f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b", "patch": "@@ -6180,7 +6180,7 @@ Tue Apr 10 17:45:50 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t(next_ls_expr): Next expression in the list.\n \t(simple_mem): Check if expression qualifies for ld/st expression list.\n \t(invalidate_any_buried_refs): Remove from expression list if its\n-\tused in some other way we dont understand.\n+\tused in some other way we don't understand.\n \t(compute_ld_motion_mems): Find all potential enhanced load motion\n \texpression.\n \t(trim_ld_motion_mems): Remove any expressions which are invalid.\n@@ -9315,7 +9315,7 @@ Fri Mar  2 11:59:43 CET 2001  Jan Hubicka  <jh@suse.cz>\n \tnull terminated.  Use the new search_from member variable\n \tof cpp_buffer.\n \t(_cpp_compare_file_date): Similarly.\n-\t(search_from): New function, similiar to actual_directory.\n+\t(search_from): New function, similar to actual_directory.\n \t(actual_directory): Delete.\n \t(remap_filename): Update.  loc->name may not be null terminated.\n \t(struct file_name_list): Rename search_path.  Update.\n@@ -12210,7 +12210,7 @@ Tue Jan 16 17:20:43 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t* config/i386/i386.c (asm_output_function_prefix): Remove.\n \t(ix86_asm_file_end): New.\n \t(load_pic_register): Generate pic_label_name into a\n-\tstaticly allocated buffer.\n+\tstatically allocated buffer.\n \t* config/i386/i386-protos.h: Update.\n \t* config/i386/i386.h (ASM_OUTPUT_FUNCTION_PREFIX): Remove.\n \t(ASM_FILE_END): New.\n@@ -13931,7 +13931,7 @@ Fri Jan  5 16:29:49 MET 2001  Jan Hubicka  <jh@suse.cz>\n 2001-01-05  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* config/sh/sh.md (prget, prset): New insn types.\n-\t(return delay slot): Dont' allow prset.\n+\t(return delay slot): Don't allow prset.\n \t(call, sfunc delay slot): Don't allow prget.\n \t(movsi_i, movsi_ie, movsi_i_lowpart): Create separate alternatives\n \tfor prset and prget."}, {"sha": "7b85b56879cf737e3e56960f0f99aee922abd382", "filename": "gcc/ChangeLog.lib", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2FChangeLog.lib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2FChangeLog.lib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.lib?ref=f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b", "patch": "@@ -43,7 +43,7 @@ Mon Sep 29 12:27:59 1997  Ian Lance Taylor  <ian@cygnus.com>\n Wed Sep 10 15:14:20 1997  Jeffrey A Law  (law@cygnus.com)\n \n \t* config.sub: Use \"amigaos\" instread of \"amigados\".  Still\n-\trecognize \"amigados\" for backward compatability.\n+\trecognize \"amigados\" for backward compatibility.\n \n Tue Sep  9 18:23:57 1997  Doug Evans  <dje@cygnus.com>\n "}, {"sha": "ce1f216da8e1c0881ec22d8d424c4ca708729d56", "filename": "gcc/FSFChangeLog.10", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2FFSFChangeLog.10", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2FFSFChangeLog.10", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FFSFChangeLog.10?ref=f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b", "patch": "@@ -807,7 +807,7 @@ Tue Mar  5 02:27:35 1996  Jeffrey A. Law  <law@cygnus.com\n \t(hppa_expand_prologue): If optimizing for space, emit an out of\n \tline prologue.\n \t(hppa_expand_epilogue): Similarly.\n-\t(override_options): Optimizing for space is not compatable with\n+\t(override_options): Optimizing for space is not compatible with\n \teither profiling or PIC code generation.\n \t* pa.md (outline_prologue_call): New pattern.\n \t(outline_epilogue_call): Likewise.\n@@ -7968,7 +7968,7 @@ Tue May  9 18:25:34 1995  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n Tue May  9 15:52:05 1995  Michael Meissner  <meissner@cygnus.com>\n \n-\t* config.sub: Recognize powerpcle as the little endian varient of\n+\t* config.sub: Recognize powerpcle as the little endian variant of\n \tthe PowerPC.  Recgonize ppc as a PowerPC variant, and ppcle as a\n \tpowerpcle variant.  Convert pentium into i586, not i486.  Add p5\n \talias for i586.  Map new x86 variants p6, k5, nexgen into i586"}, {"sha": "4d4b54b65c13dd935ffbd563e578a84922fa687b", "filename": "gcc/ONEWS", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2FONEWS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2FONEWS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FONEWS?ref=f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b", "patch": "@@ -57,7 +57,7 @@ do not have integer mul/div or floating point support on-chip.\n \n GCC now supports a \"--help\" option to print detailed help information.\n \n-cpplib has been greatly improved.  It is probably useable for some sites now\n+cpplib has been greatly improved.  It is probably usable for some sites now\n (major missing feature is trigraphs).\n \n Memory footprint for the compiler has been significantly reduced for certain"}, {"sha": "285d7069a822980c4666c7f63d61a381a9b0599b", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b", "patch": "@@ -465,7 +465,7 @@ fname_string (rid)\n    now. RID indicates how it should be formatted and IDENTIFIER_NODE\n    ID is its name (unfortunately C and C++ hold the RID values of\n    keywords in different places, so we can't derive RID from ID in\n-   this language independant code.  */\n+   this language independent code.  */\n \n tree\n fname_decl (rid, id)"}, {"sha": "e2d84b7f65777ec7db724664a9260d21da9bed2c", "filename": "gcc/caller-save.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b", "patch": "@@ -399,7 +399,7 @@ save_call_clobbered_regs ()\n \t\t regs are live during the call.  */\n \t      REG_SET_TO_HARD_REG_SET (hard_regs_to_save,\n \t\t\t\t       &chain->live_throughout);\n-\t      /* Save hard registers always in the widest mode availble.  */\n+\t      /* Save hard registers always in the widest mode available.  */\n \t      for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n \t\tif (TEST_HARD_REG_BIT (hard_regs_to_save, regno))\n \t\t  save_mode [regno] = regno_save_mode [regno][1];"}, {"sha": "7c6aa527ff30ce744d6ffdbdc6c18bbb5980b04d", "filename": "gcc/cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b", "patch": "@@ -569,7 +569,7 @@ dump_edge_info (file, e, do_succ)\n     }\n }\n \f\n-/* Simple routies to easilly allocate AUX fields of basic blocks.  */\n+/* Simple routies to easily allocate AUX fields of basic blocks.  */\n static struct obstack block_aux_obstack;\n static void *first_block_aux_obj = 0;\n static struct obstack edge_aux_obstack;"}, {"sha": "bd5a3ed95e93e4042cbce790ee989af08e21e9e1", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b", "patch": "@@ -1009,7 +1009,7 @@ try_crossjump_bb (mode, bb)\n   edge e, e2, nexte2, nexte, fallthru;\n   bool changed;\n \n-  /* Nothing to do if there is not at least two incomming edges.  */\n+  /* Nothing to do if there is not at least two incoming edges.  */\n   if (!bb->pred || !bb->pred->pred_next)\n     return false;\n "}, {"sha": "6abac76fc6ab244f2c2b6dd1f47eddfcf147a5df", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b", "patch": "@@ -1133,7 +1133,7 @@ split_edge (edge_in)\n \n   /* Create the basic block note.\n \n-     Where we place the note can have a noticable impact on the generated\n+     Where we place the note can have a noticeable impact on the generated\n      code.  Consider this cfg:\n \n \t\t        E\n@@ -1504,7 +1504,7 @@ print_rtl_with_bb (outf, rtx_first)\n    - overlapping of basic blocks\n    - edge list correctness\n    - headers of basic blocks (the NOTE_INSN_BASIC_BLOCK note)\n-   - tails of basic blocks (ensure that boundary is necesary)\n+   - tails of basic blocks (ensure that boundary is necessary)\n    - scans body of the basic block for JUMP_INSN, CODE_LABEL\n      and NOTE_INSN_BASIC_BLOCK\n    - check that all insns are in the basic blocks"}, {"sha": "1bd8a45811bdc1e29c18d76640c1a9f96e6d8033", "filename": "gcc/collect2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b", "patch": "@@ -863,7 +863,7 @@ main (argc, argv)\n   putenv (xstrdup (\"COLLECT_NO_DEMANGLE=\"));\n \n #if defined (COLLECT2_HOST_INITIALIZATION)\n-  /* Perform system dependent initialization, if neccessary.  */\n+  /* Perform system dependent initialization, if necessary.  */\n   COLLECT2_HOST_INITIALIZATION;\n #endif\n "}, {"sha": "068461d8ac45f877625c5166fb6bef40c10d1021", "filename": "gcc/df.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Fdf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Fdf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.h?ref=f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b", "patch": "@@ -68,7 +68,7 @@ struct insn_info\n   struct df_link *defs;\t\t/* Head of insn-def chain.  */\n   struct df_link *uses;\t\t/* Head of insn-use chain.  */\n   /* ???? The following luid field should be considerd private so that\n-     we can change it on the fly to accomodate new insns?  */\n+     we can change it on the fly to accommodate new insns?  */\n   int luid;\t\t\t/* Logical UID.  */\n #if 0\n   rtx insn;\t\t\t/* Backpointer to the insn.  */"}, {"sha": "377b0e9452b8f5cbd7f4d209ca4d9c5bb8be3c3b", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b", "patch": "@@ -221,7 +221,7 @@ struct diagnostic_context\n    displayed.  */\n #define diagnostic_finalizer(DC) (DC)->end_diagnostic\n \n-/* Extention hook for client.  */\n+/* Extension hook for client.  */\n #define diagnostic_auxiliary_data(DC) (DC)->x_data\n \n /* Client supplied function used to decode formats.  Can operate on both"}, {"sha": "8ab79eff46f23fc7829f892c9ca7d9b51fedda9f", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b", "patch": "@@ -991,7 +991,7 @@ compute_alignments ()\n \t    branch_frequency += EDGE_FREQUENCY (e);\n \t}\n \n-      /* There are two purposes to align block with no fallthru incomming edge:\n+      /* There are two purposes to align block with no fallthru incoming edge:\n \t 1) to avoid fetch stalls when branch destination is near cache boundary\n \t 2) to improve cache effciency in case the previous block is not executed\n \t    (so it does not need to be in the cache)."}, {"sha": "4630eaa1c434b0b68b42beea64aa745ec9f57a33", "filename": "gcc/gcse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b", "patch": "@@ -5251,7 +5251,7 @@ delete_null_pointer_checks_1 (delete_list, block_reg, nonnull_avin,\n \t      continue;\n \t    }\n \n-\t  /* See if we've got a useable memory load.  We handle it first\n+\t  /* See if we've got a usable memory load.  We handle it first\n \t     in case it uses its address register as a dest (which kills\n \t     the nonnull property).  */\n \t  if (GET_CODE (SET_SRC (set)) == MEM\n@@ -6063,7 +6063,7 @@ invalidate_any_buried_refs (x)\n /* Find all the 'simple' MEMs which are used in LOADs and STORES. Simple\n    being defined as MEM loads and stores to symbols, with no\n    side effects and no registers in the expression. If there are any \n-   uses/defs which dont match this criteria, it is invalidated and\n+   uses/defs which don't match this criteria, it is invalidated and\n    trimmed out later.  */\n \n static void "}, {"sha": "ba3a3be71d6e9d92a039873f3783214cf944a2d4", "filename": "gcc/gthr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Fgthr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Fgthr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr.h?ref=f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b", "patch": "@@ -49,7 +49,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n      \t\tto initialize __gthread_mutex_t to get a fast\n \t\tnon-recursive mutex.\n      __GTHREAD_MUTEX_INIT_FUNCTION\n-     \t\tsome systems can't initalize a mutex without a\n+     \t\tsome systems can't initialize a mutex without a\n \t\tfunction call.  On such systems, define this to a\n \t\tfunction which looks like this:\n \t\t  void __GTHREAD_MUTEX_INIT_FUNCTION (__gthread_mutex_t *)"}, {"sha": "7b9a2e821268e0a217c02a23322e9af2e6a539ae", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b", "patch": "@@ -1958,7 +1958,7 @@ sched_init (dump_file)\n \t}\n     }\n \n-  /* Find units used in this fuction, for visualization.  */\n+  /* Find units used in this function, for visualization.  */\n   if (sched_verbose)\n     init_target_units ();\n "}, {"sha": "63ac3ae6cf58665ae49321a4e63759e6c1a0b167", "filename": "gcc/jump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b", "patch": "@@ -742,7 +742,7 @@ reversed_comparison_code_parts (code, arg0, arg1, insn)\n \t\t    mode = GET_MODE (XEXP (comparison, 1));\n \t\t  break;\n \t\t}\n-\t      /* We can get past reg-reg moves.  This may be usefull for model\n+\t      /* We can get past reg-reg moves.  This may be useful for model\n \t         of i387 comparisons that first move flag registers around.  */\n \t      if (REG_P (src))\n \t\t{"}, {"sha": "9945b45d14b130aa18e9b2a5883b40383bbc13ac", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b", "patch": "@@ -1586,7 +1586,7 @@ block_alloc (b)\n \t     discourage the register allocator from creating false\n \t     dependencies.\n \n-\t     The adjustment value is choosen to indicate that this qty\n+\t     The adjustment value is chosen to indicate that this qty\n \t     conflicts with all the qtys in the instructions immediately\n \t     before and after the lifetime of this qty.\n "}, {"sha": "bda2dc5b46755bab5187579006b1f5384580cf90", "filename": "gcc/profile.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b", "patch": "@@ -697,7 +697,7 @@ branch_prob ()\n \n   /* Create spanning tree from basic block graph, mark each edge that is\n      on the spanning tree.  We insert as many abnormal and critical edges\n-     as possible to minimize number of edge splits necesary.  */\n+     as possible to minimize number of edge splits necessary.  */\n \n   find_spanning_tree (el);\n "}, {"sha": "6c6ceee3039b94198bdad6975bd3f0d3019c643a", "filename": "gcc/protoize.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b", "patch": "@@ -655,7 +655,7 @@ safe_read (desc, ptr, len)\n       }\n     if (nchars == 0)\n       break;\n-    /* Arithmetic on void pointers is a gcc extention.  */\n+    /* Arithmetic on void pointers is a gcc extension.  */\n     ptr = (char *) ptr + nchars;\n     left -= nchars;\n   }\n@@ -685,7 +685,7 @@ safe_write (desc, ptr, len, out_fname)\n \t\tpname, shortpath (NULL, out_fname), xstrerror (errno_val));\n \treturn;\n       }\n-    /* Arithmetic on void pointers is a gcc extention.  */\n+    /* Arithmetic on void pointers is a gcc extension.  */\n     ptr = (char *) ptr + written;\n     len -= written;\n   }"}, {"sha": "a34b05a95d3d6cb6131fda30ff0227f5a9ef7d06", "filename": "gcc/regmove.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b", "patch": "@@ -2290,7 +2290,7 @@ record_stack_memrefs (xp, data)\n       if (!reg_mentioned_p (stack_pointer_rtx, x))\n \treturn -1;\n       /* We are not able to handle correctly all possible memrefs containing\n-         stack pointer, so this check is neccesary.  */\n+         stack pointer, so this check is necessary.  */\n       if (stack_memref_p (x))\n \t{\n \t  d->memlist = record_one_stack_memref (d->insn, xp, d->memlist);"}, {"sha": "2947f1aecb6435d03866d5ac36a7de8d90f9c66c", "filename": "gcc/reload1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b", "patch": "@@ -8580,7 +8580,7 @@ reload_combine ()\n   int min_labelno, n_labels;\n   HARD_REG_SET ever_live_at_start, *label_live;\n \n-  /* If reg+reg can be used in offsetable memory adresses, the main chunk of\n+  /* If reg+reg can be used in offsetable memory addresses, the main chunk of\n      reload has already used it where appropriate, so there is no use in\n      trying to generate it now.  */\n   if (double_reg_address_ok && INDEX_REG_CLASS != NO_REGS)"}, {"sha": "90531f89901dc6d781d2b3f5f5b7fed499a100fd", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b", "patch": "@@ -923,7 +923,7 @@ single_set_2 (insn, pat)\n \t      /* We can consider insns having multiple sets, where all\n \t\t but one are dead as single set insns.  In common case\n \t\t only single set is present in the pattern so we want\n-\t\t to avoid checking for REG_UNUSED notes unless neccesary.\n+\t\t to avoid checking for REG_UNUSED notes unless necessary.\n \n \t\t When we reach set first time, we just expect this is\n \t\t the single set we are looking for and only when more\n@@ -2595,7 +2595,7 @@ commutative_operand_precedence (op)\n   return 0;\n }\n \n-/* Return 1 iff it is neccesary to swap operands of commutative operation\n+/* Return 1 iff it is necessary to swap operands of commutative operation\n    in order to canonicalize expression.  */\n \n int"}, {"sha": "7c1134f5a0206a5b18492491102dbd2b46ec58ce", "filename": "gcc/sched-vis.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Fsched-vis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Fsched-vis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-vis.c?ref=f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b", "patch": "@@ -90,7 +90,7 @@ int n_vis_no_unit;\n #define MAX_VISUAL_NO_UNIT 20\n rtx vis_no_unit[MAX_VISUAL_NO_UNIT];\n \n-/* Finds units that are in use in this fuction.  Required only\n+/* Finds units that are in use in this function.  Required only\n    for visualization.  */\n \n void"}, {"sha": "e86d87811ecc1172511a0629c2670127b701ca87", "filename": "gcc/ssa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Fssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Fssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fssa.c?ref=f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b", "patch": "@@ -1366,7 +1366,7 @@ eliminate_phi (e, reg_partition)\n   if (n_nodes == 0)\n     return;\n \n-  /* Build the auxilliary graph R(B). \n+  /* Build the auxiliary graph R(B). \n \n      The nodes of the graph are the members of the register partition\n      present in Phi(B).  There is an edge from FIND(T0)->FIND(T1) for"}, {"sha": "6bc227f07420531a7fd99d87145b2d1c993d0e91", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b", "patch": "@@ -1520,7 +1520,7 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n #ifdef MD_ASM_CLOBBERS\n   /* Sometimes we wish to automatically clobber registers across an asm.\n      Case in point is when the i386 backend moved from cc0 to a hard reg --\n-     maintaining source-level compatability means automatically clobbering\n+     maintaining source-level compatibility means automatically clobbering\n      the flags register.  */\n   MD_ASM_CLOBBERS (clobbers);\n #endif"}, {"sha": "aaec2f883547ad2d1c7664551642cdb9f3ecac48", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b", "patch": "@@ -510,7 +510,7 @@ extern void abort PARAMS ((void));\n \n /* Traditional C cannot initialize union members of structs.  Provide\n    a macro which expands appropriately to handle it.  This only works\n-   if you intend to initalize the union member to zero since it relies\n+   if you intend to initialize the union member to zero since it relies\n    on default initialization to zero in the traditional C case.  */\n #ifdef __STDC__\n #define UNION_INIT_ZERO , {0}"}, {"sha": "c68a446ba29b9431b1912d32931e49646df7d73c", "filename": "gcc/toplev.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=f63d1bf775e8c15c877f5a9bf0e3f6fbb021686b", "patch": "@@ -4007,7 +4007,7 @@ display_target_options ()\n     }\n }\n \f\n-/* Parse a -d... comand line switch.  */\n+/* Parse a -d... command line switch.  */\n \n static void\n decode_d_option (arg)\n@@ -4060,7 +4060,7 @@ decode_d_option (arg)\n       }\n }\n \n-/* Parse a -f... comand line switch.  ARG is the value after the -f.\n+/* Parse a -f... command line switch.  ARG is the value after the -f.\n    It is safe to access 'ARG - 2' to generate the full switch name.\n    Return the number of strings consumed.  */\n \n@@ -4164,7 +4164,7 @@ decode_f_option (arg)\n   return 1;\n }\n \n-/* Parse a -W... comand line switch.  ARG is the value after the -W.\n+/* Parse a -W... command line switch.  ARG is the value after the -W.\n    It is safe to access 'ARG - 2' to generate the full switch name.\n    Return the number of strings consumed.  */\n \n@@ -4215,7 +4215,7 @@ decode_W_option (arg)\n   return 1;\n }\n \n-/* Parse a -g... comand line switch.  ARG is the value after the -g.\n+/* Parse a -g... command line switch.  ARG is the value after the -g.\n    It is safe to access 'ARG - 2' to generate the full switch name.\n    Return the number of strings consumed.  */\n "}]}