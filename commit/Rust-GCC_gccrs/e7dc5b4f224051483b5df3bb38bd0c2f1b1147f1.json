{"sha": "e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdkYzViNGYyMjQwNTE0ODNiNWRmM2JiMzhiZDBjMmYxYjExNDdmMQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-01-23T14:36:26Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-01-23T14:36:26Z"}, "message": "data.c, [...]: Fix comment typos.\n\n\t* data.c, dependency.c, f95-lang.c, io.c, trans-array.c,\n\ttrans-decl.c, trans-expr.c, trans-intrinsic.c, trans-io.c,\n\ttrans-stmt.c, trans-types.c, trans.h: Fix comment typos.\n\tFollow spelling conventions.\n\nFrom-SVN: r94111", "tree": {"sha": "26302ea8d257615a5e90cc5c33f29c1651caa55b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26302ea8d257615a5e90cc5c33f29c1651caa55b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1/comments", "author": null, "committer": null, "parents": [{"sha": "dae245345ddb0d20837dab43c9b2bac848c86aa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dae245345ddb0d20837dab43c9b2bac848c86aa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dae245345ddb0d20837dab43c9b2bac848c86aa7"}], "stats": {"total": 67, "additions": 37, "deletions": 30}, "files": [{"sha": "19688624bfa576177cd2aeb42f929804059905b2", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1", "patch": "@@ -1,3 +1,10 @@\n+2005-01-23  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* data.c, dependency.c, f95-lang.c, io.c, trans-array.c,\n+\ttrans-decl.c, trans-expr.c, trans-intrinsic.c, trans-io.c,\n+\ttrans-stmt.c, trans-types.c, trans.h: Fix comment typos.\n+\tFollow spelling conventions.\n+\n 2005-01-22  Bud Davis  <bdavis9659@comcast.net>\n \n \tPR fortran/19313"}, {"sha": "5a74516c75857e74d18713d3c76075c92b59678c", "filename": "gcc/fortran/data.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1/gcc%2Ffortran%2Fdata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1/gcc%2Ffortran%2Fdata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdata.c?ref=e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1", "patch": "@@ -1,5 +1,5 @@\n /* Supporting functions for resolving DATA statement.\n-   Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n    Contributed by Lifang Zeng <zlf605@hotmail.com>\n \n This file is part of GCC.\n@@ -26,7 +26,7 @@ Software Foundation, 59 Temple Place - Suite 330,Boston, MA\n    during resolveing DATA statement. Refer to check_data_variable and\n    traverse_data_list in resolve.c.\n                                                                                \n-   The complexity exists in the handleing of array section, implied do\n+   The complexity exists in the handling of array section, implied do\n    and array of struct appeared in DATA statement.\n                                                                                \n    We call gfc_conv_structure, gfc_con_array_array_initializer,"}, {"sha": "fb0c5764d4517ac7ef9d756ffea6adf5f8351d1b", "filename": "gcc/fortran/dependency.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1/gcc%2Ffortran%2Fdependency.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1/gcc%2Ffortran%2Fdependency.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdependency.c?ref=e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1", "patch": "@@ -1,5 +1,5 @@\n /* Dependency analysis\n-   Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001, 2002, 2005 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of GCC.\n@@ -382,7 +382,7 @@ get_deps (mpz_t x1, mpz_t x2, mpz_t y)\n    (l_start:l_end:l_stride) -> (0:no_of_elements)\n    (r_start:r_end:r_stride) -> (X1:X2)\n    Where r_end is implicit as both sections must have the same number of\n-   elelments.\n+   elements.\n    Returns 0 on success, 1 of the transformation failed.  */\n /* TODO: Should this be (0:no_of_elements-1) */\n "}, {"sha": "b406bf041a0ff42d64e1ff4854282614071e341f", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1", "patch": "@@ -779,7 +779,7 @@ gfc_init_builtin_functions (void)\n \n #include \"mathbuiltins.def\"\n \n-  /* We define these seperately as the fortran versions have different\n+  /* We define these separately as the fortran versions have different\n      semantics (they return an integer type) */\n   gfc_define_builtin (\"__builtin_floor\", mfunc_double[0], \n \t\t      BUILT_IN_FLOOR, \"floor\", true);"}, {"sha": "8230fa99cd02bfb6c6e830c61fe4909c26e20ada", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1", "patch": "@@ -1098,7 +1098,7 @@ gfc_resolve_open (gfc_open * open)\n }\n \n \n-/* Match an OPEN statmement.  */\n+/* Match an OPEN statement.  */\n \n match\n gfc_match_open (void)\n@@ -1178,7 +1178,7 @@ gfc_free_close (gfc_close * close)\n }\n \n \n-/* Match elements of a CLOSE statment.  */\n+/* Match elements of a CLOSE statement.  */\n \n static match\n match_close_element (gfc_close * close)\n@@ -1425,7 +1425,7 @@ gfc_match_rewind (void)\n }\n \n \n-/******************** Data Transfer Statments *********************/\n+/******************** Data Transfer Statements *********************/\n \n typedef enum\n { M_READ, M_WRITE, M_PRINT, M_INQUIRE }"}, {"sha": "e281619741d34dff0f4f13d63dbc2f3503f24a64", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1", "patch": "@@ -516,7 +516,7 @@ gfc_trans_allocate_array_storage (gfc_loopinfo * loop, gfc_ss_info * info,\n \n \n /* Generate code to allocate and initialize the descriptor for a temporary\n-   array.  This is used for both temporaries needed by the scaparizer, and\n+   array.  This is used for both temporaries needed by the scalarizer, and\n    functions returning arrays.  Adjusts the loop variables to be zero-based,\n    and calculates the loop bounds for callee allocated arrays.\n    Also fills in the descriptor, data and offset fields of info if known.\n@@ -1305,7 +1305,7 @@ gfc_init_loopinfo (gfc_loopinfo * loop)\n }\n \n \n-/* Copies the loop variable info to a gfc_se sructure. Does not copy the SS\n+/* Copies the loop variable info to a gfc_se structure. Does not copy the SS\n    chain.  */\n \n void\n@@ -1534,7 +1534,7 @@ gfc_conv_vector_array_index (gfc_se * se, tree index, gfc_ss * ss)\n \n \n /* Return the offset for an index.  Performs bound checking for elemental\n-   dimensions.  Single element references are processed seperately.  */\n+   dimensions.  Single element references are processed separately.  */\n \n static tree\n gfc_conv_array_index_offset (gfc_se * se, gfc_ss_info * info, int dim, int i,\n@@ -1653,7 +1653,7 @@ gfc_conv_array_ref (gfc_se * se, gfc_array_ref * ar)\n   tree fault;\n   gfc_se indexse;\n \n-  /* Handle scalarized references seperately.  */\n+  /* Handle scalarized references separately.  */\n   if (ar->type != AR_ELEMENT)\n     {\n       gfc_conv_scalarized_array_ref (se, ar);\n@@ -1811,7 +1811,7 @@ gfc_trans_preloop_setup (gfc_loopinfo * loop, int dim, int flag,\n \t  info->offset = gfc_evaluate_now (info->offset, pblock);\n \t}\n \n-      /* Remeber this offset for the second loop.  */\n+      /* Remember this offset for the second loop.  */\n       if (dim == loop->temp_dim - 1)\n         info->saved_offset = info->offset;\n     }\n@@ -3590,7 +3590,7 @@ gfc_conv_expr_descriptor (gfc_se * se, gfc_expr * expr, gfc_ss * ss)\n       /* A transformational function return value will be a temporary\n \t array descriptor.  We still need to go through the scalarizer\n \t to create the descriptor.  Elemental functions ar handled as\n-\t arbitary expressions, i.e. copy to a temporary.  */\n+\t arbitrary expressions, i.e. copy to a temporary.  */\n       secss = ss;\n       /* Look for the SS for this function.  */\n       while (secss != gfc_ss_terminator\n@@ -3761,7 +3761,7 @@ gfc_conv_expr_descriptor (gfc_se * se, gfc_expr * expr, gfc_ss * ss)\n          {parm, parmtype, dim} refer to the new one.\n          {desc, type, n, secss, loop} refer to the original, which maybe\n          a descriptorless array.\n-         The bounds of the scaralization are the bounds of the section.\n+         The bounds of the scalarization are the bounds of the section.\n          We don't have to worry about numeric overflows when calculating\n          the offsets because all elements are within the array data.  */\n \n@@ -4357,7 +4357,7 @@ gfc_walk_function_expr (gfc_ss * ss, gfc_expr * expr)\n   if (sym->attr.elemental)\n     return gfc_walk_elemental_function_args (ss, expr, GFC_SS_REFERENCE);\n \n-  /* Scalar functions are OK as these are evaluated outside the scalarisation\n+  /* Scalar functions are OK as these are evaluated outside the scalarization\n      loop.  Pass back and let the caller deal with it.  */\n   return ss;\n }"}, {"sha": "65ba867948a27852118cb436f9b8fb788b09f01d", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1", "patch": "@@ -1,5 +1,5 @@\n /* Backend function setup\n-   Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n    Contributed by Paul Brook\n \n This file is part of GCC.\n@@ -1998,7 +1998,7 @@ gfc_create_module_variable (gfc_symbol * sym)\n       internal_error (\"module symbol %s in wrong namespace\", sym->name);\n     }\n \n-  /* Only output variables and array valued parametes.  */\n+  /* Only output variables and array valued parameters.  */\n   if (sym->attr.flavor != FL_VARIABLE\n       && (sym->attr.flavor != FL_PARAMETER || sym->attr.dimension == 0))\n     return;"}, {"sha": "494faa44135d26c8ee46f04b09a3707377e6ff49", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1", "patch": "@@ -1194,7 +1194,7 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n       gfc_add_block_to_block (&se->pre, &parmse.pre);\n       gfc_add_block_to_block (&se->post, &parmse.post);\n \n-      /* Character strings are passed as two paramarers, a length and a\n+      /* Character strings are passed as two parameters, a length and a\n          pointer.  */\n       if (parmse.string_length != NULL_TREE)\n         stringargs = gfc_chainon_list (stringargs, parmse.string_length);"}, {"sha": "dcabd4112fe737bebd58f16cfc65bf078727f007", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1", "patch": "@@ -2368,7 +2368,7 @@ prepare_arg_info (gfc_se * se, gfc_expr * expr,\n    gfc_add_modify_expr(&se->pre, arg, tmp);\n    rcs->arg = arg;\n \n-   /* Caculate the numbers of bits of exponent, fraction and word  */\n+   /* Calculate the numbers of bits of exponent, fraction and word  */\n    n = gfc_validate_kind (a1->ts.type, a1->ts.kind, false);\n    tmp = build_int_cst (NULL_TREE, gfc_real_kinds[n].digits - 1);\n    rcs->fdigits = convert (masktype, tmp);\n@@ -2796,7 +2796,7 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n       gfc_conv_intrinsic_conversion (se, expr);\n       break;\n \n-      /* Integer conversions are handled seperately to make sure we get the\n+      /* Integer conversions are handled separately to make sure we get the\n          correct rounding mode.  */\n     case GFC_ISYM_INT:\n       gfc_conv_intrinsic_int (se, expr, FIX_TRUNC_EXPR);"}, {"sha": "67fc796f86fefb0575d0d6f7ad3f9bcc1e2ffc4d", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1", "patch": "@@ -1046,7 +1046,7 @@ build_dt (tree * function, gfc_code * code)\n \n /* Translate the IOLENGTH form of an INQUIRE statement.  We treat\n    this as a third sort of data transfer statement, except that\n-   lengths are summed instead of actually transfering any data.  */\n+   lengths are summed instead of actually transferring any data.  */\n \n tree\n gfc_trans_iolength (gfc_code * code)"}, {"sha": "2d2fe8bf8b7f26c3dce8e6f217fbeef12c8816c1", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1", "patch": "@@ -2187,7 +2187,7 @@ gfc_trans_pointer_assign_need_temp (gfc_expr * expr1, gfc_expr * expr2,\n       e<i> = f<i>\n       g<i> = h<i>\n     end forall\n-   (where e,f,g,h<i> are arbitary expressions possibly involving i)\n+   (where e,f,g,h<i> are arbitrary expressions possibly involving i)\n    Translates to:\n     count = ((end + 1 - start) / staride)\n     masktmp(:) = maskexpr(:)\n@@ -3082,7 +3082,7 @@ gfc_trans_cycle (gfc_code * code)\n }\n \n \n-/* EXIT a DO loop. Similair to CYCLE, but now the label is in\n+/* EXIT a DO loop. Similar to CYCLE, but now the label is in\n    TREE_VALUE (backend_decl) of the gfc_code node at the head of the\n    loop.  */\n "}, {"sha": "7bd0011ce8a270999631dfdb7ee2a53ac7b76e1a", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1", "patch": "@@ -1409,7 +1409,7 @@ gfc_get_derived_type (gfc_symbol * derived)\n \t  if (c->pointer)\n \t    {\n \t      /* Pointers to arrays aren't actually pointer types.  The\n-\t         descriptors are seperate, but the data is common.  */\n+\t         descriptors are separate, but the data is common.  */\n \t      field_type = gfc_build_array_type (field_type, c->as);\n \t    }\n \t  else"}, {"sha": "b670f7a3888d679a5ef5113ea37b94d99bc3995e", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=e7dc5b4f224051483b5df3bb38bd0c2f1b1147f1", "patch": "@@ -1,5 +1,5 @@\n /* Header for code translation functions\n-   Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n    Contributed by Paul Brook\n \n This file is part of GCC.\n@@ -75,7 +75,7 @@ typedef struct gfc_se\n gfc_se;\n \n \n-/* Scalarisation State chain.  Created by walking an expression tree before\n+/* Scalarization State chain.  Created by walking an expression tree before\n    creating the scalarization loops. Then passed as part of a gfc_se structure\n    to translate the expression inside the loop.  Note that these chains are\n    terminated by gfc_se_terminator, not NULL.  A NULL pointer in a gfc_se\n@@ -106,7 +106,7 @@ typedef struct gfc_ss_info\n   tree stride[GFC_MAX_DIMENSIONS];\n   tree delta[GFC_MAX_DIMENSIONS];\n \n-  /* Translation from scalariser dimensions to actual dimensions.\n+  /* Translation from scalarizer dimensions to actual dimensions.\n      actual = dim[scalarizer]  */\n   int dim[GFC_MAX_DIMENSIONS];\n }\n@@ -191,7 +191,7 @@ typedef struct gfc_ss\n   struct gfc_ss *loop_chain;\n   struct gfc_ss *next;\n \n-  /* This is used by assignments requiring teporaries. The bits specify which\n+  /* This is used by assignments requiring temporaries. The bits specify which\n      loops the terms appear in.  This will be 1 for the RHS expressions,\n      2 for the LHS expressions, and 3(=1|2) for the temporary.  */\n   unsigned useflags:2;\n@@ -213,7 +213,7 @@ typedef struct gfc_loopinfo\n \n   /* All the SS involved with this loop.  */\n   gfc_ss *ss;\n-  /* The SS describing the teporary used in an assignment.  */\n+  /* The SS describing the temporary used in an assignment.  */\n   gfc_ss *temp_ss;\n \n   /* The scalarization loop index variables.  */"}]}