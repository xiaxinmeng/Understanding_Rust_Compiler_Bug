{"sha": "91f0226f7c244dc65396fd1a6e61e2e7464c8da1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFmMDIyNmY3YzI0NGRjNjUzOTZmZDFhNmU2MWUyZTc0NjRjOGRhMQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1994-08-28T03:22:52Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1994-08-28T03:22:52Z"}, "message": "Fix indexing off arg ptr & push of byte values.\n\nFrom-SVN: r7994", "tree": {"sha": "59d6e2a028cdb5a679da1a68641cba260a2b395a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59d6e2a028cdb5a679da1a68641cba260a2b395a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91f0226f7c244dc65396fd1a6e61e2e7464c8da1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91f0226f7c244dc65396fd1a6e61e2e7464c8da1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91f0226f7c244dc65396fd1a6e61e2e7464c8da1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91f0226f7c244dc65396fd1a6e61e2e7464c8da1/comments", "author": null, "committer": null, "parents": [{"sha": "e9954ee434e38d801b463328d9cf2d7fbba24f9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9954ee434e38d801b463328d9cf2d7fbba24f9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9954ee434e38d801b463328d9cf2d7fbba24f9a"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "ddfb4ee64ea1442d4088a52e7d496a360b9f5d0c", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91f0226f7c244dc65396fd1a6e61e2e7464c8da1/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91f0226f7c244dc65396fd1a6e61e2e7464c8da1/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=91f0226f7c244dc65396fd1a6e61e2e7464c8da1", "patch": "@@ -1076,6 +1076,15 @@ legitimate_address_p (mode, addr, strict)\n   else\n     disp = addr;\t\t\t\t/* displacement */\n \n+  /* Allow arg pointer and stack pointer as index if there is not scaling */\n+  if (base && indx && !scale\n+      && (indx == arg_pointer_rtx || indx == stack_pointer_rtx))\n+    {\n+      rtx tmp = base;\n+      base = indx;\n+      indx = tmp;\n+    }\n+\n   /* Validate base register */\n   if (base)\n     {"}, {"sha": "1bc8048f81d7ae19d6500bb08b88786d60cba3c9", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91f0226f7c244dc65396fd1a6e61e2e7464c8da1/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91f0226f7c244dc65396fd1a6e61e2e7464c8da1/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=91f0226f7c244dc65396fd1a6e61e2e7464c8da1", "patch": "@@ -498,7 +498,7 @@ enum reg_class\n      0x3,\t\t\t/* AD_REGS */\t\t\t\\\n      0xf,\t\t\t/* Q_REGS */\t\t\t\\\n     0x10,   0x20,\t\t/* SIREG, DIREG */\t\t\\\n- 0x1007f,\t\t\t/* INDEX_REGS */\t\t\\\n+ 0x07f,\t\t\t\t/* INDEX_REGS */\t\t\\\n  0x100ff,\t\t\t/* GENERAL_REGS */\t\t\\\n   0x0100, 0x0200,\t\t/* FP_TOP_REG, FP_SECOND_REG */\t\\\n   0xff00,\t\t\t/* FLOAT_REGS */\t\t\\"}, {"sha": "1b6017e3b3b19edf58df64180b82e6f9f96ab66b", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91f0226f7c244dc65396fd1a6e61e2e7464c8da1/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91f0226f7c244dc65396fd1a6e61e2e7464c8da1/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=91f0226f7c244dc65396fd1a6e61e2e7464c8da1", "patch": "@@ -778,8 +778,7 @@\n   else if (TARGET_MOVE\n \t   && (reload_in_progress | reload_completed) == 0\n \t   && GET_CODE (operands[0]) == MEM\n-\t   && GET_CODE (operands[1]) == MEM\n-\t   && (!TARGET_386 || !push_operand (operands[0], SImode)))\n+\t   && GET_CODE (operands[1]) == MEM)\n     {\n       operands[1] = force_reg (SImode, operands[1]);\n     }\n@@ -842,8 +841,7 @@\n   if (TARGET_MOVE\n       && (reload_in_progress | reload_completed) == 0\n       && GET_CODE (operands[0]) == MEM\n-      && GET_CODE (operands[1]) == MEM\n-      && (!TARGET_386 || !push_operand (operands[0], HImode)))\n+      && GET_CODE (operands[1]) == MEM)\n     {\n       operands[1] = force_reg (HImode, operands[1]);\n     }\n@@ -892,8 +890,7 @@\n   if (TARGET_MOVE\n       && (reload_in_progress | reload_completed) == 0\n       && GET_CODE (operands[0]) == MEM\n-      && GET_CODE (operands[1]) == MEM\n-      && (!TARGET_386 || !push_operand (operands[0], HImode)))\n+      && GET_CODE (operands[1]) == MEM)\n     {\n       operands[1] = force_reg (HImode, operands[1]);\n     }\n@@ -969,8 +966,7 @@\n   if (TARGET_MOVE\n       && (reload_in_progress | reload_completed) == 0\n       && GET_CODE (operands[0]) == MEM\n-      && GET_CODE (operands[1]) == MEM\n-      && (!TARGET_386 || !push_operand (operands[0], QImode)))\n+      && GET_CODE (operands[1]) == MEM)\n     {\n       operands[1] = force_reg (QImode, operands[1]);\n     }\n@@ -1024,8 +1020,7 @@\n   if (TARGET_MOVE\n       && (reload_in_progress | reload_completed) == 0\n       && GET_CODE (operands[0]) == MEM\n-      && GET_CODE (operands[1]) == MEM\n-      && (!TARGET_386 || !push_operand (operands[0], QImode)))\n+      && GET_CODE (operands[1]) == MEM)\n     {\n       operands[1] = force_reg (QImode, operands[1]);\n     }\n@@ -1384,8 +1379,7 @@\n   if (TARGET_MOVE\n       && (reload_in_progress | reload_completed) == 0\n       && GET_CODE (operands[0]) == MEM\n-      && GET_CODE (operands[1]) == MEM\n-      && (!TARGET_386 || !push_operand (operands[0], QImode)))\n+      && GET_CODE (operands[1]) == MEM)\n     {\n       operands[1] = force_reg (DImode, operands[1]);\n     }"}]}