{"sha": "58691d4a04c2c8d81298441a7621e6e6df69b21a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg2OTFkNGEwNGMyYzhkODEyOTg0NDFhNzYyMWU2ZTZkZjY5YjIxYQ==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2018-07-31T08:30:41Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2018-07-31T08:30:41Z"}, "message": "getenv_spec_function to prepend / to value for undef var\n\nSo the value can be used in places where an absolute path\nis expected.\n\n2018-07-31  Olivier Hainque  <hainque@adacore.com>\n\n        * gcc.c (getenv_spec_function): Prepend '/' to value for\n\tallowed undefined variables.\n\nFrom-SVN: r263081", "tree": {"sha": "2a59e72d1ad06f17e361ff67a641947ba95d60fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a59e72d1ad06f17e361ff67a641947ba95d60fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58691d4a04c2c8d81298441a7621e6e6df69b21a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58691d4a04c2c8d81298441a7621e6e6df69b21a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58691d4a04c2c8d81298441a7621e6e6df69b21a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58691d4a04c2c8d81298441a7621e6e6df69b21a/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c89b64d7eb41cc750829db403f9e82549ce5e605", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c89b64d7eb41cc750829db403f9e82549ce5e605", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c89b64d7eb41cc750829db403f9e82549ce5e605"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "e2eb1c69fd054243ac6079f275fa2639f2731a1d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58691d4a04c2c8d81298441a7621e6e6df69b21a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58691d4a04c2c8d81298441a7621e6e6df69b21a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58691d4a04c2c8d81298441a7621e6e6df69b21a", "patch": "@@ -1,3 +1,8 @@\n+2018-07-31  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* gcc.c (getenv_spec_function): Prepend '/' to value for allowed\n+\tundefined variables.\n+\n 2018-07-30  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR target/86640"}, {"sha": "48689ed398a2d411eb19df1b5d1f5f660d8ac2ee", "filename": "gcc/gcc.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58691d4a04c2c8d81298441a7621e6e6df69b21a/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58691d4a04c2c8d81298441a7621e6e6df69b21a/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=58691d4a04c2c8d81298441a7621e6e6df69b21a", "patch": "@@ -9244,7 +9244,11 @@ print_multilib_info (void)\n    Returns the value of the environment variable given by its first argument,\n    concatenated with the second argument.  If the variable is not defined, a\n    fatal error is issued unless such undefs are internally allowed, in which\n-   case the variable name is used as the variable value.  */\n+   case the variable name prefixed by a '/' is used as the variable value.\n+\n+   The leading '/' allows using the result at a spot where a full path would\n+   normally be expected and when the actual value doesn't really matter since\n+   undef vars are allowed.  */\n \n static const char *\n getenv_spec_function (int argc, const char **argv)\n@@ -9262,8 +9266,15 @@ getenv_spec_function (int argc, const char **argv)\n   varname = argv[0];\n   value = env.get (varname);\n \n+  /* If the variable isn't defined and this is allowed, craft our expected\n+     return value.  Assume variable names used in specs strings don't contain\n+     any active spec character so don't need escaping.  */\n   if (!value && spec_undefvar_allowed)\n-    value = varname;\n+    {\n+      result = XNEWVAR (char, strlen(varname) + 2);\n+      sprintf (result, \"/%s\", varname);\n+      return result;\n+    }\n \n   if (!value)\n     fatal_error (input_location,"}]}