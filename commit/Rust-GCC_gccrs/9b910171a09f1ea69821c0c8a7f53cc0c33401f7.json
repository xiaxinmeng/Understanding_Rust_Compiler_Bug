{"sha": "9b910171a09f1ea69821c0c8a7f53cc0c33401f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI5MTAxNzFhMDlmMWVhNjk4MjFjMGM4YTdmNTNjYzBjMzM0MDFmNw==", "commit": {"author": {"name": "Lee Millward", "email": "lee.millward@codesourcery.com", "date": "2006-09-25T19:58:10Z"}, "committer": {"name": "Lee Millward", "email": "lmillward@gcc.gnu.org", "date": "2006-09-25T19:58:10Z"}, "message": "re PR c++/27667 (ICE with in-class specialization)\n\n        PR c++/27667\n        * cp-tree.h (begin_specialization): Return bool instead of void.\n        * pt.c (check_specialization_scope): Likwise. Adjust comment.\n        Return false if a specialization isn't permitted in the current scope,.\n        (begin_specialization): Use the return value of  \n        check_specialization_scope.\n        * parser.c (cp_parser_explicit_specialization): If\n        begin_specialization returned false, skip the rest of the\n        specialization.\n\n        * g++.dg/template/spec33.C: New test.\n        * g++.old-deja/g++.pt/spec20.C: Adjust error markers.\n\nFrom-SVN: r117206", "tree": {"sha": "2c56dcc26e3d0df9849f035f979db2f24b1c0063", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c56dcc26e3d0df9849f035f979db2f24b1c0063"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b910171a09f1ea69821c0c8a7f53cc0c33401f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b910171a09f1ea69821c0c8a7f53cc0c33401f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b910171a09f1ea69821c0c8a7f53cc0c33401f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b910171a09f1ea69821c0c8a7f53cc0c33401f7/comments", "author": null, "committer": null, "parents": [{"sha": "60feef2c2dd41cc6c6e9cd492c3e1199595326d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60feef2c2dd41cc6c6e9cd492c3e1199595326d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60feef2c2dd41cc6c6e9cd492c3e1199595326d8"}], "stats": {"total": 60, "additions": 49, "deletions": 11}, "files": [{"sha": "46bfeb876d37666ce64e3559484dfcb3874ed43e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b910171a09f1ea69821c0c8a7f53cc0c33401f7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b910171a09f1ea69821c0c8a7f53cc0c33401f7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9b910171a09f1ea69821c0c8a7f53cc0c33401f7", "patch": "@@ -8,6 +8,18 @@\n \tReturn false on error.\n         * decl.c (xref_tag): Return error_mark_node if\n \tredeclare_class_template returned false.\n+\n+\tPR c++/27667\n+        * cp-tree.h (begin_specialization): Return bool \n+\tinstead of void.\n+        * pt.c (check_specialization_scope): Likwise. \n+\tAdjust comment. Return false if a specialization \n+\tisn't permitted in the current scope.\n+        (begin_specialization): Use the return value of  \n+        check_specialization_scope.\n+        * parser.c (cp_parser_explicit_specialization): If\n+        begin_specialization returned false, skip the rest \n+\tof the specialization.\n \t\n 2006-09-21  Mark Mitchell  <mark@codesourcery.com>\n "}, {"sha": "93c4053ccd6e9cc2da7e6996234c2daf02fd2277", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b910171a09f1ea69821c0c8a7f53cc0c33401f7/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b910171a09f1ea69821c0c8a7f53cc0c33401f7/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=9b910171a09f1ea69821c0c8a7f53cc0c33401f7", "patch": "@@ -4086,7 +4086,7 @@ extern void maybe_begin_member_template_processing (tree);\n extern void maybe_end_member_template_processing (void);\n extern tree finish_member_template_decl\t\t(tree);\n extern void begin_template_parm_list\t\t(void);\n-extern void begin_specialization\t\t(void);\n+extern bool begin_specialization\t\t(void);\n extern void reset_specialization\t\t(void);\n extern void end_specialization\t\t\t(void);\n extern void begin_explicit_instantiation\t(void);"}, {"sha": "0b7dd3cde476fdc58794003a1ea503ec37790401", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b910171a09f1ea69821c0c8a7f53cc0c33401f7/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b910171a09f1ea69821c0c8a7f53cc0c33401f7/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=9b910171a09f1ea69821c0c8a7f53cc0c33401f7", "patch": "@@ -9455,7 +9455,13 @@ cp_parser_explicit_specialization (cp_parser* parser)\n   else\n     need_lang_pop = false;\n   /* Let the front end know that we are beginning a specialization.  */\n-  begin_specialization ();\n+  if (!begin_specialization ())\n+    {\n+      end_specialization ();\n+      cp_parser_skip_to_end_of_block_or_statement (parser);\n+      return;\n+    }\n+\n   /* If the next keyword is `template', we need to figure out whether\n      or not we're looking a template-declaration.  */\n   if (cp_lexer_next_token_is_keyword (parser->lexer, RID_TEMPLATE))"}, {"sha": "4e8fad66e5c352090cca48bd513daccd2df719e1", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b910171a09f1ea69821c0c8a7f53cc0c33401f7/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b910171a09f1ea69821c0c8a7f53cc0c33401f7/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=9b910171a09f1ea69821c0c8a7f53cc0c33401f7", "patch": "@@ -142,7 +142,7 @@ static tree most_specialized_class (tree, tree);\n static tree tsubst_aggr_type (tree, tree, tsubst_flags_t, tree, int);\n static tree tsubst_arg_types (tree, tree, tsubst_flags_t, tree);\n static tree tsubst_function_type (tree, tree, tsubst_flags_t, tree);\n-static void check_specialization_scope (void);\n+static bool check_specialization_scope (void);\n static tree process_partial_specialization (tree);\n static void set_current_access_from_decl (tree);\n static void check_default_tmpl_args (tree, tree, int, int);\n@@ -535,9 +535,10 @@ begin_template_parm_list (void)\n }\n \n /* This routine is called when a specialization is declared.  If it is\n-   invalid to declare a specialization here, an error is reported.  */\n+   invalid to declare a specialization here, an error is reported and\n+   false is returned, otherwise this routine will return true.  */\n \n-static void\n+static bool\n check_specialization_scope (void)\n {\n   tree scope = current_scope ();\n@@ -552,7 +553,10 @@ check_specialization_scope (void)\n      shall be declared in the namespace of which the class template\n      is a member.  */\n   if (scope && TREE_CODE (scope) != NAMESPACE_DECL)\n-    error (\"explicit specialization in non-namespace scope %qD\", scope);\n+    {\n+      error (\"explicit specialization in non-namespace scope %qD\", scope);\n+      return false;\n+    }\n \n   /* [temp.expl.spec]\n \n@@ -563,17 +567,22 @@ check_specialization_scope (void)\n      explicitly specialize a class member template if its enclosing\n      class templates are not explicitly specialized as well.  */\n   if (current_template_parms)\n-    error (\"enclosing class templates are not explicitly specialized\");\n+    {\n+      error (\"enclosing class templates are not explicitly specialized\");\n+      return false;\n+    }\n+\n+  return true;\n }\n \n /* We've just seen template <>.  */\n \n-void\n+bool\n begin_specialization (void)\n {\n   begin_scope (sk_template_spec, NULL);\n   note_template_header (1);\n-  check_specialization_scope ();\n+  return check_specialization_scope ();\n }\n \n /* Called at then end of processing a declaration preceded by"}, {"sha": "4fc16e5f23df88c611d8111c16cb026af8aba6ab", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b910171a09f1ea69821c0c8a7f53cc0c33401f7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b910171a09f1ea69821c0c8a7f53cc0c33401f7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9b910171a09f1ea69821c0c8a7f53cc0c33401f7", "patch": "@@ -9,6 +9,10 @@\n \n         PR c++/27329\n         * g++.dg/template/crash59.C: New test.\n+\n+\tPR c++/27667\n+        * g++.dg/template/spec33.C: New test.\n+        * g++.old-deja/g++.pt/spec20.C: Adjust error markers.\n \t\n 2006-09-24  Zdenek Dvorak <dvorakz@suse.cz>\n \t    Adam Nemet  <anemet@caviumnetworks.com>"}, {"sha": "809d4f012c1ad886c9f4449c675cecadbd99ca55", "filename": "gcc/testsuite/g++.dg/template/spec33.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b910171a09f1ea69821c0c8a7f53cc0c33401f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec33.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b910171a09f1ea69821c0c8a7f53cc0c33401f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec33.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec33.C?ref=9b910171a09f1ea69821c0c8a7f53cc0c33401f7", "patch": "@@ -0,0 +1,7 @@\n+//PR c++/27667\n+\n+struct A\n+{\n+    template<int> static void foo   () {}\n+    template<>    static void foo<0>() {}  // { dg-error \"explicit\" }\n+}; "}, {"sha": "b6148e5ded99fba0fde5a91ef360aabc24da9cd3", "filename": "gcc/testsuite/g++.old-deja/g++.pt/spec20.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b910171a09f1ea69821c0c8a7f53cc0c33401f7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b910171a09f1ea69821c0c8a7f53cc0c33401f7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec20.C?ref=9b910171a09f1ea69821c0c8a7f53cc0c33401f7", "patch": "@@ -10,7 +10,7 @@ struct S {\n   template <class U> void f(U);\n   template <> void f<int>(int); // { dg-error \"\" } invalid specialization\n \n-  template <class V> struct I {};\n-  template <class V> struct I<V*> {};\n+  template <class V> struct I {};      // { dg-error \"template\" }\n+  template <class V> struct I<V*> {};  // { dg-error \"template\" }\n   template <> struct I<int>; // { dg-error \"\" } invalid specialization\n };"}]}