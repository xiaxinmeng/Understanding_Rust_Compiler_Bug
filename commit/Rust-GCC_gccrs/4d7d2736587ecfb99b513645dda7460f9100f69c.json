{"sha": "4d7d2736587ecfb99b513645dda7460f9100f69c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ3ZDI3MzY1ODdlY2ZiOTliNTEzNjQ1ZGRhNzQ2MGY5MTAwZjY5Yw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-08-12T08:58:57Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-12T08:58:57Z"}, "message": "[Ada] Add special bypass for obsolete code pattern\n\nThis change prevents the analysis phase of the front-end from setting\nthe Do_Range_Check flag in the very peculiar case of the source of a\nconversion whose result is passed by reference to a \"valued procedure\",\nbecause the expansion phase would not be able to generate the check.\n\nThis pattern appears in the ancient DEC Starlet package and it doesn't\nseem to be useful at this point to change the expander to deal with it,\nso instead the analysis phase is adjusted.  Morever the compiler already\nissues a warning in this case so this is probably good enough.\n\n2019-08-12  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* sem_res.adb: Add with & use clause for Sem_Mech and\n\talphabetize.\n\t(Resolve_Actuals): Do not apply a scalar range check for the\n\tsource of a conversion whose result is passed by reference to a\n\tvalued procedure.\n\nFrom-SVN: r274281", "tree": {"sha": "fa7e14aea5b6d687c59bc5644db06520bf642baf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa7e14aea5b6d687c59bc5644db06520bf642baf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d7d2736587ecfb99b513645dda7460f9100f69c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d7d2736587ecfb99b513645dda7460f9100f69c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d7d2736587ecfb99b513645dda7460f9100f69c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d7d2736587ecfb99b513645dda7460f9100f69c/comments", "author": null, "committer": null, "parents": [{"sha": "13931a38fcab143344c90378c3688d089a4efbec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13931a38fcab143344c90378c3688d089a4efbec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13931a38fcab143344c90378c3688d089a4efbec"}], "stats": {"total": 34, "additions": 27, "deletions": 7}, "files": [{"sha": "315b4f64d63fa39cd4ba702feaaf6bcca0482a73", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d7d2736587ecfb99b513645dda7460f9100f69c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d7d2736587ecfb99b513645dda7460f9100f69c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4d7d2736587ecfb99b513645dda7460f9100f69c", "patch": "@@ -1,3 +1,11 @@\n+2019-08-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_res.adb: Add with & use clause for Sem_Mech and\n+\talphabetize.\n+\t(Resolve_Actuals): Do not apply a scalar range check for the\n+\tsource of a conversion whose result is passed by reference to a\n+\tvalued procedure.\n+\n 2019-08-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* checks.adb (Insert_Valid_Check): Reset the Do_Range_Check flag"}, {"sha": "ecd8bc094ff14d3557060a4abc8e5a114f556183", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d7d2736587ecfb99b513645dda7460f9100f69c/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d7d2736587ecfb99b513645dda7460f9100f69c/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=4d7d2736587ecfb99b513645dda7460f9100f69c", "patch": "@@ -30,9 +30,9 @@ with Debug_A;  use Debug_A;\n with Einfo;    use Einfo;\n with Errout;   use Errout;\n with Expander; use Expander;\n-with Exp_Disp; use Exp_Disp;\n with Exp_Ch6;  use Exp_Ch6;\n with Exp_Ch7;  use Exp_Ch7;\n+with Exp_Disp; use Exp_Disp;\n with Exp_Tss;  use Exp_Tss;\n with Exp_Util; use Exp_Util;\n with Freeze;   use Freeze;\n@@ -51,12 +51,12 @@ with Restrict; use Restrict;\n with Rident;   use Rident;\n with Rtsfind;  use Rtsfind;\n with Sem;      use Sem;\n-with Sem_Aux;  use Sem_Aux;\n with Sem_Aggr; use Sem_Aggr;\n with Sem_Attr; use Sem_Attr;\n+with Sem_Aux;  use Sem_Aux;\n with Sem_Cat;  use Sem_Cat;\n-with Sem_Ch4;  use Sem_Ch4;\n with Sem_Ch3;  use Sem_Ch3;\n+with Sem_Ch4;  use Sem_Ch4;\n with Sem_Ch6;  use Sem_Ch6;\n with Sem_Ch8;  use Sem_Ch8;\n with Sem_Ch13; use Sem_Ch13;\n@@ -67,16 +67,17 @@ with Sem_Elab; use Sem_Elab;\n with Sem_Elim; use Sem_Elim;\n with Sem_Eval; use Sem_Eval;\n with Sem_Intr; use Sem_Intr;\n-with Sem_Util; use Sem_Util;\n-with Targparm; use Targparm;\n+with Sem_Mech; use Sem_Mech;\n with Sem_Type; use Sem_Type;\n+with Sem_Util; use Sem_Util;\n with Sem_Warn; use Sem_Warn;\n with Sinfo;    use Sinfo;\n with Sinfo.CN; use Sinfo.CN;\n with Snames;   use Snames;\n with Stand;    use Stand;\n with Stringt;  use Stringt;\n with Style;    use Style;\n+with Targparm; use Targparm;\n with Tbuild;   use Tbuild;\n with Uintp;    use Uintp;\n with Urealp;   use Urealp;\n@@ -4613,8 +4614,19 @@ package body Sem_Res is\n \n                if Nkind (A) = N_Type_Conversion then\n                   if Is_Scalar_Type (A_Typ) then\n-                     Apply_Scalar_Range_Check\n-                       (Expression (A), Etype (Expression (A)), A_Typ);\n+\n+                     --  Special case here tailored to Exp_Ch6.Is_Legal_Copy,\n+                     --  which would prevent the check from being generated.\n+                     --  This is for Starlet only though, so long obsolete.\n+\n+                     if Mechanism (F) = By_Reference\n+                       and then Is_Valued_Procedure (Nam)\n+                     then\n+                        null;\n+                     else\n+                        Apply_Scalar_Range_Check\n+                          (Expression (A), Etype (Expression (A)), A_Typ);\n+                     end if;\n \n                      --  In addition the return value must meet the constraints\n                      --  of the object type (see the comment below)."}]}