{"sha": "7910ae0cde83554100eefaca68a506bb25655498", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzkxMGFlMGNkZTgzNTU0MTAwZWVmYWNhNjhhNTA2YmIyNTY1NTQ5OA==", "commit": {"author": {"name": "Dorit Nuzman", "email": "dorit@il.ibm.com", "date": "2008-08-08T19:00:36Z"}, "committer": {"name": "Dorit Nuzman", "email": "dorit@gcc.gnu.org", "date": "2008-08-08T19:00:36Z"}, "message": "tree-vect-transform.c (vectorizable_conversion): Pass the integral type to vectorize.builtin_conversion.\n\n2008-08-08  Dorit Nuzman  <dorit@il.ibm.com>\n\n        * tree-vect-transform.c (vectorizable_conversion): Pass the integral\n        type to vectorize.builtin_conversion.\n        (vectorizable_conversion): Likewise.\n        * config/i386/i386.c (ix86_vectorize_builtin_conversion): Always takes\n        integral type as input.\n        * config/rs6000/rs6000.c (rs6000_builtin_conversion): Add case for\n        FIX_TRUNC_EXPR.\n        (rs6000_expand_builtin): Add case for ALTIVEC_BUILTIN_VCTUXS\n        and ALTIVEC_BUILTIN_VCTSXS.\n        (rs6000_builtin_mul_widen_even. rs6000_builtin_mul_widen_odd): Fix\n        formatting.\n\nFrom-SVN: r138885", "tree": {"sha": "aa8655be46a1806b9692a464a4fabff43b1eb1b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa8655be46a1806b9692a464a4fabff43b1eb1b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7910ae0cde83554100eefaca68a506bb25655498", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7910ae0cde83554100eefaca68a506bb25655498", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7910ae0cde83554100eefaca68a506bb25655498", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7910ae0cde83554100eefaca68a506bb25655498/comments", "author": null, "committer": null, "parents": [{"sha": "f6fad28ea1317a6aa30869b40c427ad56c6950c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6fad28ea1317a6aa30869b40c427ad56c6950c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6fad28ea1317a6aa30869b40c427ad56c6950c5"}], "stats": {"total": 90, "additions": 67, "deletions": 23}, "files": [{"sha": "1558f03779d76eef7fad1f4a8b7e27a199ec3a10", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7910ae0cde83554100eefaca68a506bb25655498/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7910ae0cde83554100eefaca68a506bb25655498/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7910ae0cde83554100eefaca68a506bb25655498", "patch": "@@ -1,3 +1,17 @@\n+2008-08-08  Dorit Nuzman  <dorit@il.ibm.com>\n+\n+\t* tree-vect-transform.c (vectorizable_conversion): Pass the integral\n+\ttype to vectorize.builtin_conversion.\n+\t(vectorizable_conversion): Likewise.\n+\t* config/i386/i386.c (ix86_vectorize_builtin_conversion): Always takes\n+\tintegral type as input.\n+\t* config/rs6000/rs6000.c (rs6000_builtin_conversion): Add case for\n+\tFIX_TRUNC_EXPR.\n+\t(rs6000_expand_builtin): Add case for ALTIVEC_BUILTIN_VCTUXS\n+\tand ALTIVEC_BUILTIN_VCTSXS.\n+\t(rs6000_builtin_mul_widen_even. rs6000_builtin_mul_widen_odd): Fix\n+\tformatting. \n+\n 2008-08-08  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-ccp.c (likely_value): Calls are not all varying."}, {"sha": "206ee418c5d9c0a1eeefef1ac6e72132cfb66abb", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7910ae0cde83554100eefaca68a506bb25655498/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7910ae0cde83554100eefaca68a506bb25655498/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=7910ae0cde83554100eefaca68a506bb25655498", "patch": "@@ -23148,8 +23148,10 @@ ix86_veclibabi_acml (enum built_in_function fn, tree type_out, tree type_in)\n }\n \n \n-/* Returns a decl of a function that implements conversion of the\n-   input vector of type TYPE, or NULL_TREE if it is not available.  */\n+/* Returns a decl of a function that implements conversion of an integer vector\n+   into a floating-point vector, or vice-versa. TYPE is the type of the integer\n+   side of the conversion.\n+   Return NULL_TREE if it is not available.  */\n \n static tree\n ix86_vectorize_builtin_conversion (unsigned int code, tree type)\n@@ -23171,7 +23173,7 @@ ix86_vectorize_builtin_conversion (unsigned int code, tree type)\n     case FIX_TRUNC_EXPR:\n       switch (TYPE_MODE (type))\n \t{\n-\tcase V4SFmode:\n+\tcase V4SImode:\n \t  return ix86_builtins[IX86_BUILTIN_CVTTPS2DQ];\n \tdefault:\n \t  return NULL_TREE;"}, {"sha": "38fb43c7d26b06273a3644822ee082f4af81cc49", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 35, "deletions": 17, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7910ae0cde83554100eefaca68a506bb25655498/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7910ae0cde83554100eefaca68a506bb25655498/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=7910ae0cde83554100eefaca68a506bb25655498", "patch": "@@ -1960,7 +1960,11 @@ rs6000_builtin_mask_for_load (void)\n     return 0;\n }\n \n-/* Implement targetm.vectorize.builtin_conversion.  */\n+/* Implement targetm.vectorize.builtin_conversion.\n+   Returns a decl of a function that implements conversion of an integer vector\n+   into a floating-point vector, or vice-versa. TYPE is the type of the integer\n+   side of the conversion.\n+   Return NULL_TREE if it is not available.  */\n static tree\n rs6000_builtin_conversion (enum tree_code code, tree type)\n {\n@@ -1969,16 +1973,28 @@ rs6000_builtin_conversion (enum tree_code code, tree type)\n \n   switch (code)\n     {\n+    case FIX_TRUNC_EXPR:\n+      switch (TYPE_MODE (type))\n+\t{\n+\tcase V4SImode:\n+\t  return TYPE_UNSIGNED (type)\n+\t    ? rs6000_builtin_decls[ALTIVEC_BUILTIN_VCTUXS]\n+\t    : rs6000_builtin_decls[ALTIVEC_BUILTIN_VCTSXS];\n+\tdefault:\n+\t  return NULL_TREE;\n+\t}\n+\n     case FLOAT_EXPR:\n       switch (TYPE_MODE (type))\n \t{\n \tcase V4SImode:\n-\t  return TYPE_UNSIGNED (type) ?\n-\t    rs6000_builtin_decls[ALTIVEC_BUILTIN_VCFUX] :\n-\t    rs6000_builtin_decls[ALTIVEC_BUILTIN_VCFSX];\n+\t  return TYPE_UNSIGNED (type)\n+\t    ? rs6000_builtin_decls[ALTIVEC_BUILTIN_VCFUX]\n+\t    : rs6000_builtin_decls[ALTIVEC_BUILTIN_VCFSX];\n \tdefault:\n \t  return NULL_TREE;\n \t}\n+\n     default:\n       return NULL_TREE;\n     }\n@@ -1994,14 +2010,14 @@ rs6000_builtin_mul_widen_even (tree type)\n   switch (TYPE_MODE (type))\n     {\n     case V8HImode:\n-      return TYPE_UNSIGNED (type) ?\n-            rs6000_builtin_decls[ALTIVEC_BUILTIN_VMULEUH] :\n-            rs6000_builtin_decls[ALTIVEC_BUILTIN_VMULESH];\n+      return TYPE_UNSIGNED (type)\n+            ? rs6000_builtin_decls[ALTIVEC_BUILTIN_VMULEUH]\n+            : rs6000_builtin_decls[ALTIVEC_BUILTIN_VMULESH];\n \n     case V16QImode:\n-      return TYPE_UNSIGNED (type) ?\n-            rs6000_builtin_decls[ALTIVEC_BUILTIN_VMULEUB] :\n-            rs6000_builtin_decls[ALTIVEC_BUILTIN_VMULESB];\n+      return TYPE_UNSIGNED (type)\n+            ? rs6000_builtin_decls[ALTIVEC_BUILTIN_VMULEUB]\n+            : rs6000_builtin_decls[ALTIVEC_BUILTIN_VMULESB];\n     default:\n       return NULL_TREE;\n     }\n@@ -2017,14 +2033,14 @@ rs6000_builtin_mul_widen_odd (tree type)\n   switch (TYPE_MODE (type))\n     {\n     case V8HImode:\n-      return TYPE_UNSIGNED (type) ?\n-            rs6000_builtin_decls[ALTIVEC_BUILTIN_VMULOUH] :\n-            rs6000_builtin_decls[ALTIVEC_BUILTIN_VMULOSH];\n+      return TYPE_UNSIGNED (type)\n+            ? rs6000_builtin_decls[ALTIVEC_BUILTIN_VMULOUH]\n+            : rs6000_builtin_decls[ALTIVEC_BUILTIN_VMULOSH];\n \n     case V16QImode:\n-      return TYPE_UNSIGNED (type) ?\n-            rs6000_builtin_decls[ALTIVEC_BUILTIN_VMULOUB] :\n-            rs6000_builtin_decls[ALTIVEC_BUILTIN_VMULOSB];\n+      return TYPE_UNSIGNED (type)\n+            ? rs6000_builtin_decls[ALTIVEC_BUILTIN_VMULOUB]\n+            : rs6000_builtin_decls[ALTIVEC_BUILTIN_VMULOSB];\n     default:\n       return NULL_TREE;\n     }\n@@ -9102,7 +9118,9 @@ rs6000_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n   /* FIXME: There's got to be a nicer way to handle this case than\n      constructing a new CALL_EXPR.  */\n   if (fcode == ALTIVEC_BUILTIN_VCFUX\n-      || fcode == ALTIVEC_BUILTIN_VCFSX)\n+      || fcode == ALTIVEC_BUILTIN_VCFSX\n+      || fcode == ALTIVEC_BUILTIN_VCTUXS\n+      || fcode == ALTIVEC_BUILTIN_VCTSXS)\n     {\n       if (call_expr_nargs (exp) == 1)\n \texp = build_call_nary (TREE_TYPE (exp), CALL_EXPR_FN (exp),"}, {"sha": "0d9eb93a2ccb3042a4db69f9114a118ace7886b2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7910ae0cde83554100eefaca68a506bb25655498/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7910ae0cde83554100eefaca68a506bb25655498/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7910ae0cde83554100eefaca68a506bb25655498", "patch": "@@ -1,3 +1,8 @@\n+2008-08-08  Dorit Nuzman  <dorit@il.ibm.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_vect_floatint_cvt): \n+\tAdd powerpc. \n+\n 2008-08-08  Daniel Kraft  <d@domob.eu>\n \n \t* gfortran.dg/finalize_9.f03:  New test."}, {"sha": "33c8c71cb0eab1740f83ea5c8bf770f7711d69cc", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7910ae0cde83554100eefaca68a506bb25655498/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7910ae0cde83554100eefaca68a506bb25655498/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=7910ae0cde83554100eefaca68a506bb25655498", "patch": "@@ -1203,6 +1203,8 @@ proc check_effective_target_vect_floatint_cvt { } {\n     } else {\n         set et_vect_floatint_cvt_saved 0\n         if { [istarget i?86-*-*]\n+              || ([istarget powerpc*-*-*]\n+                   && ![istarget powerpc-*-linux*paired*])\n               || [istarget x86_64-*-*] } {\n            set et_vect_floatint_cvt_saved 1\n         }"}, {"sha": "9e2814fb13c372b31a40d108f031b41085ce67eb", "filename": "gcc/tree-vect-transform.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7910ae0cde83554100eefaca68a506bb25655498/gcc%2Ftree-vect-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7910ae0cde83554100eefaca68a506bb25655498/gcc%2Ftree-vect-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-transform.c?ref=7910ae0cde83554100eefaca68a506bb25655498", "patch": "@@ -3456,6 +3456,7 @@ vectorizable_conversion (gimple stmt, gimple_stmt_iterator *gsi,\n   int i;\n   VEC(tree,heap) *vec_oprnds0 = NULL;\n   tree vop0;\n+  tree integral_type;\n \n   /* Is STMT a vectorizable conversion?   */\n \n@@ -3508,6 +3509,8 @@ vectorizable_conversion (gimple stmt, gimple_stmt_iterator *gsi,\n       || (!INTEGRAL_TYPE_P (rhs_type) && !INTEGRAL_TYPE_P (lhs_type)))\n     return false;\n \n+  integral_type = INTEGRAL_TYPE_P (rhs_type) ? vectype_in : vectype_out;\n+\n   if (modifier == NARROW)\n     ncopies = LOOP_VINFO_VECT_FACTOR (loop_vinfo) / nunits_out;\n   else\n@@ -3540,7 +3543,7 @@ vectorizable_conversion (gimple stmt, gimple_stmt_iterator *gsi,\n \n   /* Supportable by target?  */\n   if ((modifier == NONE\n-       && !targetm.vectorize.builtin_conversion (code, vectype_in))\n+       && !targetm.vectorize.builtin_conversion (code, integral_type))\n       || (modifier == WIDEN\n \t  && !supportable_widening_operation (code, stmt, vectype_in,\n \t\t\t\t\t      &decl1, &decl2,\n@@ -3550,7 +3553,7 @@ vectorizable_conversion (gimple stmt, gimple_stmt_iterator *gsi,\n \t\t\t\t\t       &code1)))\n     {\n       if (vect_print_dump_info (REPORT_DETAILS))\n-        fprintf (vect_dump, \"op not supported by target.\");\n+        fprintf (vect_dump, \"conversion not supported by target.\");\n       return false;\n     }\n \n@@ -3593,7 +3596,7 @@ vectorizable_conversion (gimple stmt, gimple_stmt_iterator *gsi,\n \t    vect_get_vec_defs_for_stmt_copy (dt, &vec_oprnds0, NULL);\n \n \t  builtin_decl =\n-\t    targetm.vectorize.builtin_conversion (code, vectype_in);\n+\t    targetm.vectorize.builtin_conversion (code, integral_type);\n \t  for (i = 0; VEC_iterate (tree, vec_oprnds0, i, vop0); i++)\n \t    { \n \t      /* Arguments are ready. create the new vector stmt.  */"}]}