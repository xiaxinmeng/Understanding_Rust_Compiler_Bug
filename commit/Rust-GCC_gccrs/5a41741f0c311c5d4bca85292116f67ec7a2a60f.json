{"sha": "5a41741f0c311c5d4bca85292116f67ec7a2a60f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE0MTc0MWYwYzMxMWM1ZDRiY2E4NTI5MjExNmY2N2VjN2EyYTYwZg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-09-13T08:09:31Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-09-13T08:09:31Z"}, "message": "tree-cfg.c (verify_gimple_assign_binary): Add verification for WIDEN_SUM_EXPR...\n\n2017-09-13  Richard Biener  <rguenther@suse.de>\n\n\t* tree-cfg.c (verify_gimple_assign_binary): Add verification\n\tfor WIDEN_SUM_EXPR, VEC_WIDEN_MULT_{HI,LO,EVEN,ODD}_EXPR,\n\tVEC_PACK_{TRUNC,SAT,FIX_TRUNC}_EXPR.\n\t(verify_gimple_assign_ternary): Add verification for DOT_PROD_EXPR.\n\nFrom-SVN: r252061", "tree": {"sha": "f039f40bcb575cd3c140da30d35323d5cc94edab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f039f40bcb575cd3c140da30d35323d5cc94edab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a41741f0c311c5d4bca85292116f67ec7a2a60f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a41741f0c311c5d4bca85292116f67ec7a2a60f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a41741f0c311c5d4bca85292116f67ec7a2a60f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a41741f0c311c5d4bca85292116f67ec7a2a60f/comments", "author": null, "committer": null, "parents": [{"sha": "663628e38dd16a29e074f472065b27a9c9a823d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/663628e38dd16a29e074f472065b27a9c9a823d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/663628e38dd16a29e074f472065b27a9c9a823d0"}], "stats": {"total": 101, "additions": 97, "deletions": 4}, "files": [{"sha": "26a7b75a45e337610dcd3abbdaf41639357cca64", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a41741f0c311c5d4bca85292116f67ec7a2a60f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a41741f0c311c5d4bca85292116f67ec7a2a60f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a41741f0c311c5d4bca85292116f67ec7a2a60f", "patch": "@@ -1,8 +1,15 @@\n+2017-09-13  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-cfg.c (verify_gimple_assign_binary): Add verification\n+\tfor WIDEN_SUM_EXPR, VEC_WIDEN_MULT_{HI,LO,EVEN,ODD}_EXPR,\n+\tVEC_PACK_{TRUNC,SAT,FIX_TRUNC}_EXPR.\n+\t(verify_gimple_assign_ternary): Add verification for DOT_PROD_EXPR.\n+\n 2017-09-13  Kugan Vivekanandarajah  <kuganv@linaro.org>\n \n \t* config/aarch64/aarch64.c (aarch64_override_options_after_change_1):\n-\tDisable pc relative literal load irrespective of TARGET_FIX_ERR_A53_84341\n-\tfor default.\n+\tDisable pc relative literal load irrespective of\n+\tTARGET_FIX_ERR_A53_84341 for default.\n \n 2017-09-12  Eric Botcazou  <ebotcazou@adacore.com>\n "}, {"sha": "99d1f1e1af82ebf0b8cfe9a08956da841ac63458", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 88, "deletions": 2, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a41741f0c311c5d4bca85292116f67ec7a2a60f/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a41741f0c311c5d4bca85292116f67ec7a2a60f/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=5a41741f0c311c5d4bca85292116f67ec7a2a60f", "patch": "@@ -4013,15 +4013,80 @@ verify_gimple_assign_binary (gassign *stmt)\n \t      || (TYPE_PRECISION (rhs1_type) != TYPE_PRECISION (rhs2_type)));\n \n     case WIDEN_SUM_EXPR:\n+      {\n+        if (((TREE_CODE (rhs1_type) != VECTOR_TYPE\n+\t      || TREE_CODE (lhs_type) != VECTOR_TYPE)\n+\t     && ((!INTEGRAL_TYPE_P (rhs1_type)\n+\t\t  && !SCALAR_FLOAT_TYPE_P (rhs1_type))\n+\t\t || (!INTEGRAL_TYPE_P (lhs_type)\n+\t\t     && !SCALAR_FLOAT_TYPE_P (lhs_type))))\n+\t    || !useless_type_conversion_p (lhs_type, rhs2_type)\n+\t    || (GET_MODE_SIZE (element_mode (rhs2_type))\n+\t\t< 2 * GET_MODE_SIZE (element_mode (rhs1_type))))\n+          {\n+            error (\"type mismatch in widening sum reduction\");\n+            debug_generic_expr (lhs_type);\n+            debug_generic_expr (rhs1_type);\n+            debug_generic_expr (rhs2_type);\n+            return true;\n+          }\n+        return false;\n+      }\n+\n     case VEC_WIDEN_MULT_HI_EXPR:\n     case VEC_WIDEN_MULT_LO_EXPR:\n     case VEC_WIDEN_MULT_EVEN_EXPR:\n     case VEC_WIDEN_MULT_ODD_EXPR:\n+      {\n+        if (TREE_CODE (rhs1_type) != VECTOR_TYPE\n+            || TREE_CODE (lhs_type) != VECTOR_TYPE\n+\t    || !types_compatible_p (rhs1_type, rhs2_type)\n+            || (GET_MODE_SIZE (element_mode (lhs_type))\n+\t\t!= 2 * GET_MODE_SIZE (element_mode (rhs1_type))))\n+          {\n+            error (\"type mismatch in vector widening multiplication\");\n+            debug_generic_expr (lhs_type);\n+            debug_generic_expr (rhs1_type);\n+            debug_generic_expr (rhs2_type);\n+            return true;\n+          }\n+        return false;\n+      }\n+\n     case VEC_PACK_TRUNC_EXPR:\n+      /* ???  We currently use VEC_PACK_TRUNC_EXPR to simply concat\n+\t vector boolean types.  */\n+      if (VECTOR_BOOLEAN_TYPE_P (lhs_type)\n+\t  && VECTOR_BOOLEAN_TYPE_P (rhs1_type)\n+\t  && types_compatible_p (rhs1_type, rhs2_type)\n+\t  && (TYPE_VECTOR_SUBPARTS (lhs_type)\n+\t      == 2 * TYPE_VECTOR_SUBPARTS (rhs1_type)))\n+\treturn false;\n+\n+      /* Fallthru.  */\n     case VEC_PACK_SAT_EXPR:\n     case VEC_PACK_FIX_TRUNC_EXPR:\n-      /* FIXME.  */\n-      return false;\n+      {\n+        if (TREE_CODE (rhs1_type) != VECTOR_TYPE\n+            || TREE_CODE (lhs_type) != VECTOR_TYPE\n+            || !((rhs_code == VEC_PACK_FIX_TRUNC_EXPR\n+\t\t  && SCALAR_FLOAT_TYPE_P (TREE_TYPE (rhs1_type))\n+\t\t  && INTEGRAL_TYPE_P (TREE_TYPE (lhs_type)))\n+\t\t || (INTEGRAL_TYPE_P (TREE_TYPE (rhs1_type))\n+\t\t     == INTEGRAL_TYPE_P (TREE_TYPE (lhs_type))))\n+\t    || !types_compatible_p (rhs1_type, rhs2_type)\n+            || (GET_MODE_SIZE (element_mode (rhs1_type))\n+\t\t!= 2 * GET_MODE_SIZE (element_mode (lhs_type))))\n+          {\n+            error (\"type mismatch in vector pack expression\");\n+            debug_generic_expr (lhs_type);\n+            debug_generic_expr (rhs1_type);\n+            debug_generic_expr (rhs2_type);\n+            return true;\n+          }\n+\n+        return false;\n+      }\n \n     case MULT_EXPR:\n     case MULT_HIGHPART_EXPR:\n@@ -4281,6 +4346,27 @@ verify_gimple_assign_ternary (gassign *stmt)\n       return false;\n \n     case DOT_PROD_EXPR:\n+      {\n+        if (((TREE_CODE (rhs1_type) != VECTOR_TYPE\n+\t      || TREE_CODE (lhs_type) != VECTOR_TYPE)\n+\t     && ((!INTEGRAL_TYPE_P (rhs1_type)\n+\t\t  && !SCALAR_FLOAT_TYPE_P (rhs1_type))\n+\t\t || (!INTEGRAL_TYPE_P (lhs_type)\n+\t\t     && !SCALAR_FLOAT_TYPE_P (lhs_type))))\n+\t    || !types_compatible_p (rhs1_type, rhs2_type)\n+\t    || !useless_type_conversion_p (lhs_type, rhs3_type)\n+\t    || (GET_MODE_SIZE (element_mode (rhs3_type))\n+\t\t< 2 * GET_MODE_SIZE (element_mode (rhs1_type))))\n+          {\n+            error (\"type mismatch in dot product reduction\");\n+            debug_generic_expr (lhs_type);\n+            debug_generic_expr (rhs1_type);\n+            debug_generic_expr (rhs2_type);\n+            return true;\n+          }\n+        return false;\n+      }\n+\n     case REALIGN_LOAD_EXPR:\n       /* FIXME.  */\n       return false;"}]}