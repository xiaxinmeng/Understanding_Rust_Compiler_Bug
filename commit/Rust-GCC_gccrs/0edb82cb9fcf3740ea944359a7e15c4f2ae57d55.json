{"sha": "0edb82cb9fcf3740ea944359a7e15c4f2ae57d55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVkYjgyY2I5ZmNmMzc0MGVhOTQ0MzU5YTdlMTVjNGYyYWU1N2Q1NQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-06-25T21:06:20Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-06-25T21:06:20Z"}, "message": "re PR target/36627 (X86: wrong mode in subqi_2)\n\n\tPR target/36627\n\t* config/i386/i386.md : Change constraints of HImode and QImode\n\timmediate operands from \"i\" to \"n\".  Change SImode \"ni\" constraint to\n\t\"i\" and SImode \"rmi\" constraint to \"g\".  Remove all constraints\n\tfrom const0_operand and const1_operand predicated operands.\n\t(i): Change QImode and HImode attribute from \"i\" to \"n\".\n\t(*subqi_2): Change HImode operands to QImode.\n\t(*subqi_3): Ditto.\n\nFrom-SVN: r137122", "tree": {"sha": "5cc700189e4d094177e40539086dc14458884462", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cc700189e4d094177e40539086dc14458884462"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0edb82cb9fcf3740ea944359a7e15c4f2ae57d55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0edb82cb9fcf3740ea944359a7e15c4f2ae57d55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0edb82cb9fcf3740ea944359a7e15c4f2ae57d55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0edb82cb9fcf3740ea944359a7e15c4f2ae57d55/comments", "author": null, "committer": null, "parents": [{"sha": "76cc1b7060c843c4dc7b0fd56fa3338a658f5e22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22"}], "stats": {"total": 177, "additions": 94, "deletions": 83}, "files": [{"sha": "e89ede7c0d14787bf6b02e3e23e7fe8909fa2acb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0edb82cb9fcf3740ea944359a7e15c4f2ae57d55/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0edb82cb9fcf3740ea944359a7e15c4f2ae57d55/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0edb82cb9fcf3740ea944359a7e15c4f2ae57d55", "patch": "@@ -1,3 +1,14 @@\n+2008-06-25 Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/36627\n+\t* config/i386/i386.md : Change constraints of HImode and QImode\n+\timmediate operands from \"i\" to \"n\".  Change SImode \"ni\" constraint to\n+\t\"i\" and SImode \"rmi\" constraint to \"g\".  Remove all constraints\n+\tfrom const0_operand and const1_operand predicated operands.\n+\t(i): Change QImode and HImode attribute from \"i\" to \"n\".\n+\t(*subqi_2): Change HImode operands to QImode.\n+\t(*subqi_3): Ditto.\n+\n 2008-06-25  Olivier Hainque  <hainque@adacore.com>\n \n \t* Makefile.in (GTFILES_H): Use | instead of ; as separator in\n@@ -51,7 +62,7 @@\n \tthe memory instead of the memory itself for the save area.\n \n 2008-06-24  Olivier Hainque  <hainque@adacore.com>\n-            Nicolas Roche  <roche@adacore.com>\n+\t    Nicolas Roche  <roche@adacore.com>\n \n \t* gengtype.c (srcdir_len): size_t instead of int.\n \t(get_file_realbasename): New function.  For F a filename, the real\n@@ -79,7 +90,7 @@\n \n 2008-06-23  Uros Bizjak  <ubizjak@gmail.com>\n \n-\tPR middle-end/PR36584\n+\tPR middle-end/36584\n \t* calls.c (expand_call): Increase alignment for recursive functions.\n \n 2008-06-23  Anatoly Sokolov  <aesok@post.ru>"}, {"sha": "b3b9e90d57b7c686c069ed098dba422f9fed7f6d", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 80, "deletions": 80, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0edb82cb9fcf3740ea944359a7e15c4f2ae57d55/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0edb82cb9fcf3740ea944359a7e15c4f2ae57d55/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=0edb82cb9fcf3740ea944359a7e15c4f2ae57d55", "patch": "@@ -597,7 +597,7 @@\n (define_mode_attr r [(QI \"q\") (HI \"r\") (SI \"r\") (DI \"r\")])\n \n ;; Immediate operand constraint for integer modes.\n-(define_mode_attr i [(QI \"i\") (HI \"i\") (SI \"i\") (DI \"e\")])\n+(define_mode_attr i [(QI \"n\") (HI \"n\") (SI \"i\") (DI \"e\")])\n \n ;; General operand predicate for integer modes.\n (define_mode_attr general_operand\n@@ -725,7 +725,7 @@\n (define_insn \"cmpdi_ccno_1_rex64\"\n   [(set (reg FLAGS_REG)\n \t(compare (match_operand:DI 0 \"nonimmediate_operand\" \"r,?mr\")\n-\t\t (match_operand:DI 1 \"const0_operand\" \"n,n\")))]\n+\t\t (match_operand:DI 1 \"const0_operand\" \"\")))]\n   \"TARGET_64BIT && ix86_match_ccmode (insn, CCNOmode)\"\n   \"@\n    test{q}\\t%0, %0\n@@ -764,7 +764,7 @@\n (define_insn \"*cmpsi_ccno_1\"\n   [(set (reg FLAGS_REG)\n \t(compare (match_operand:SI 0 \"nonimmediate_operand\" \"r,?mr\")\n-\t\t (match_operand:SI 1 \"const0_operand\" \"n,n\")))]\n+\t\t (match_operand:SI 1 \"const0_operand\" \"\")))]\n   \"ix86_match_ccmode (insn, CCNOmode)\"\n   \"@\n    test{l}\\t%0, %0\n@@ -803,7 +803,7 @@\n (define_insn \"*cmphi_ccno_1\"\n   [(set (reg FLAGS_REG)\n \t(compare (match_operand:HI 0 \"nonimmediate_operand\" \"r,?mr\")\n-\t\t (match_operand:HI 1 \"const0_operand\" \"n,n\")))]\n+\t\t (match_operand:HI 1 \"const0_operand\" \"\")))]\n   \"ix86_match_ccmode (insn, CCNOmode)\"\n   \"@\n    test{w}\\t%0, %0\n@@ -815,7 +815,7 @@\n (define_insn \"*cmphi_minus_1\"\n   [(set (reg FLAGS_REG)\n \t(compare (minus:HI (match_operand:HI 0 \"nonimmediate_operand\" \"rm,r\")\n-\t\t\t   (match_operand:HI 1 \"general_operand\" \"ri,mr\"))\n+\t\t\t   (match_operand:HI 1 \"general_operand\" \"rn,mr\"))\n \t\t (const_int 0)))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\"\n   \"cmp{w}\\t{%1, %0|%0, %1}\"\n@@ -825,7 +825,7 @@\n (define_insn \"*cmphi_1\"\n   [(set (reg FLAGS_REG)\n \t(compare (match_operand:HI 0 \"nonimmediate_operand\" \"rm,r\")\n-\t\t (match_operand:HI 1 \"general_operand\" \"ri,mr\")))]\n+\t\t (match_operand:HI 1 \"general_operand\" \"rn,mr\")))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && ix86_match_ccmode (insn, CCmode)\"\n   \"cmp{w}\\t{%1, %0|%0, %1}\"\n@@ -835,7 +835,7 @@\n (define_insn \"*cmpqi_ccno_1\"\n   [(set (reg FLAGS_REG)\n \t(compare (match_operand:QI 0 \"nonimmediate_operand\" \"q,?mq\")\n-\t\t (match_operand:QI 1 \"const0_operand\" \"n,n\")))]\n+\t\t (match_operand:QI 1 \"const0_operand\" \"\")))]\n   \"ix86_match_ccmode (insn, CCNOmode)\"\n   \"@\n    test{b}\\t%0, %0\n@@ -847,7 +847,7 @@\n (define_insn \"*cmpqi_1\"\n   [(set (reg FLAGS_REG)\n \t(compare (match_operand:QI 0 \"nonimmediate_operand\" \"qm,q\")\n-\t\t (match_operand:QI 1 \"general_operand\" \"qi,mq\")))]\n+\t\t (match_operand:QI 1 \"general_operand\" \"qn,mq\")))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n     && ix86_match_ccmode (insn, CCmode)\"\n   \"cmp{b}\\t{%1, %0|%0, %1}\"\n@@ -857,7 +857,7 @@\n (define_insn \"*cmpqi_minus_1\"\n   [(set (reg FLAGS_REG)\n \t(compare (minus:QI (match_operand:QI 0 \"nonimmediate_operand\" \"qm,q\")\n-\t\t\t   (match_operand:QI 1 \"general_operand\" \"qi,mq\"))\n+\t\t\t   (match_operand:QI 1 \"general_operand\" \"qn,mq\"))\n \t\t (const_int 0)))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\"\n   \"cmp{b}\\t{%1, %0|%0, %1}\"\n@@ -900,7 +900,7 @@\n \t      (match_operand 0 \"ext_register_operand\" \"Q\")\n \t      (const_int 8)\n \t      (const_int 8)) 0)\n-\t  (match_operand:QI 1 \"const0_operand\" \"n\")))]\n+\t  (match_operand:QI 1 \"const0_operand\" \"\")))]\n   \"ix86_match_ccmode (insn, CCNOmode)\"\n   \"test{b}\\t%h0, %h0\"\n   [(set_attr \"type\" \"test\")\n@@ -1006,7 +1006,7 @@\n \t(unspec:HI\n \t  [(compare:CCFP\n \t     (match_operand 1 \"register_operand\" \"f\")\n-\t     (match_operand 2 \"const0_operand\" \"X\"))]\n+\t     (match_operand 2 \"const0_operand\" \"\"))]\n \tUNSPEC_FNSTSW))]\n   \"X87_FLOAT_MODE_P (GET_MODE (operands[1]))\n    && GET_MODE (operands[1]) == GET_MODE (operands[2])\"\n@@ -1025,7 +1025,7 @@\n   [(set (reg:CCFP FLAGS_REG)\n \t(compare:CCFP\n \t  (match_operand 1 \"register_operand\" \"f\")\n-\t  (match_operand 2 \"const0_operand\" \"X\")))\n+\t  (match_operand 2 \"const0_operand\" \"\")))\n    (clobber (match_operand:HI 0 \"register_operand\" \"=a\"))]\n   \"X87_FLOAT_MODE_P (GET_MODE (operands[1]))\n    && TARGET_SAHF && !TARGET_CMOVE\n@@ -1415,7 +1415,7 @@\n \n (define_insn \"*movsi_xor\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(match_operand:SI 1 \"const0_operand\" \"i\"))\n+\t(match_operand:SI 1 \"const0_operand\" \"\"))\n    (clobber (reg:CC FLAGS_REG))]\n   \"reload_completed && (!TARGET_USE_MOV0 || optimize_size)\"\n   \"xor{l}\\t%0, %0\"\n@@ -1440,9 +1440,9 @@\n \n (define_insn \"*movsi_1\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\"\n-\t\t\t\"=r  ,m  ,*y,*y,?rm,?*y,*x,*x,?r ,m ,?*Yi,*x\")\n+\t\t\t\"=r,m ,*y,*y,?rm,?*y,*x,*x,?r ,m ,?*Yi,*x\")\n \t(match_operand:SI 1 \"general_operand\"\n-\t\t\t\"rinm,rin,C ,*y,*y ,rm ,C ,*x,*Yi,*x,r   ,m \"))]\n+\t\t\t\"g ,ri,C ,*y,*y ,rm ,C ,*x,*Yi,*x,r   ,m \"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n   switch (get_attr_type (insn))\n@@ -1571,7 +1571,7 @@\n ;; For 64BIT abi we always round up to 8 bytes.\n (define_insn \"*pushhi2_rex64\"\n   [(set (match_operand:HI 0 \"push_operand\" \"=X\")\n-\t(match_operand:HI 1 \"nonmemory_no_elim_operand\" \"ri\"))]\n+\t(match_operand:HI 1 \"nonmemory_no_elim_operand\" \"rn\"))]\n   \"TARGET_64BIT\"\n   \"push{q}\\t%q1\"\n   [(set_attr \"type\" \"push\")\n@@ -1706,7 +1706,7 @@\n \n (define_insn \"*movstricthi_xor\"\n   [(set (strict_low_part (match_operand:HI 0 \"register_operand\" \"+r\"))\n-\t(match_operand:HI 1 \"const0_operand\" \"i\"))\n+\t(match_operand:HI 1 \"const0_operand\" \"\"))\n    (clobber (reg:CC FLAGS_REG))]\n   \"reload_completed\n    && ((!TARGET_USE_MOV0 && !TARGET_PARTIAL_REG_STALL) || optimize_size)\"\n@@ -1736,7 +1736,7 @@\n ;; For 64BIT abi we always round up to 8 bytes.\n (define_insn \"*pushqi2_rex64\"\n   [(set (match_operand:QI 0 \"push_operand\" \"=X\")\n-\t(match_operand:QI 1 \"nonmemory_no_elim_operand\" \"qi\"))]\n+\t(match_operand:QI 1 \"nonmemory_no_elim_operand\" \"qn\"))]\n   \"TARGET_64BIT\"\n   \"push{q}\\t%q1\"\n   [(set_attr \"type\" \"push\")\n@@ -1863,7 +1863,7 @@\n \n (define_insn \"*movstrictqi_xor\"\n   [(set (strict_low_part (match_operand:QI 0 \"q_regs_operand\" \"+q\"))\n-\t(match_operand:QI 1 \"const0_operand\" \"i\"))\n+\t(match_operand:QI 1 \"const0_operand\" \"\"))\n    (clobber (reg:CC FLAGS_REG))]\n   \"reload_completed && (!TARGET_USE_MOV0 || optimize_size)\"\n   \"xor{b}\\t%0, %0\"\n@@ -2189,7 +2189,7 @@\n \n (define_insn \"*movdi_xor_rex64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(match_operand:DI 1 \"const0_operand\" \"i\"))\n+\t(match_operand:DI 1 \"const0_operand\" \"\"))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && (!TARGET_USE_MOV0 || optimize_size)\n    && reload_completed\"\n@@ -5606,7 +5606,7 @@\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,q\")\n \t  (plus:QI (plus:QI (match_operand:QI 3 \"ix86_carry_flag_operator\" \"\")\n \t\t\t    (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0\"))\n-\t\t   (match_operand:QI 2 \"general_operand\" \"qi,qm\")))\n+\t\t   (match_operand:QI 2 \"general_operand\" \"qn,qm\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (PLUS, QImode, operands)\"\n   \"adc{b}\\t{%2, %0|%0, %2}\"\n@@ -5618,7 +5618,7 @@\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,r\")\n \t  (plus:HI (plus:HI (match_operand:HI 3 \"ix86_carry_flag_operator\" \"\")\n \t\t\t    (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\"))\n-\t\t   (match_operand:HI 2 \"general_operand\" \"ri,rm\")))\n+\t\t   (match_operand:HI 2 \"general_operand\" \"rn,rm\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (PLUS, HImode, operands)\"\n   \"adc{w}\\t{%2, %0|%0, %2}\"\n@@ -5666,7 +5666,7 @@\n (define_insn \"addqi3_cc\"\n   [(set (reg:CC FLAGS_REG)\n \t(unspec:CC [(match_operand:QI 1 \"nonimmediate_operand\" \"%0,0\")\n-\t\t    (match_operand:QI 2 \"general_operand\" \"qi,qm\")]\n+\t\t    (match_operand:QI 2 \"general_operand\" \"qn,qm\")]\n \t\t   UNSPEC_ADD_CARRY))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,q\")\n \t(plus:QI (match_dup 1) (match_dup 2)))]\n@@ -6144,7 +6144,7 @@\n (define_insn \"*addsi_1\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,rm,r\")\n \t(plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,r\")\n-\t\t (match_operand:SI 2 \"general_operand\" \"rmni,rni,lni\")))\n+\t\t (match_operand:SI 2 \"general_operand\" \"g,ri,li\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (PLUS, SImode, operands)\"\n {\n@@ -6228,7 +6228,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(zero_extend:DI\n \t  (plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,r\")\n-\t\t   (match_operand:SI 2 \"general_operand\" \"rmni,lni\"))))\n+\t\t   (match_operand:SI 2 \"general_operand\" \"g,li\"))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && ix86_binary_operator_ok (PLUS, SImode, operands)\"\n {\n@@ -6294,7 +6294,7 @@\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0\")\n-\t\t   (match_operand:SI 2 \"general_operand\" \"rmni,rni\"))\n+\t\t   (match_operand:SI 2 \"general_operand\" \"g,ri\"))\n \t  (const_int 0)))\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,rm\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n@@ -6342,7 +6342,7 @@\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")\n-\t\t   (match_operand:SI 2 \"general_operand\" \"rmni\"))\n+\t\t   (match_operand:SI 2 \"general_operand\" \"g\"))\n \t  (const_int 0)))\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI (plus:SI (match_dup 1) (match_dup 2))))]\n@@ -6385,7 +6385,7 @@\n \n (define_insn \"*addsi_3\"\n   [(set (reg FLAGS_REG)\n-\t(compare (neg:SI (match_operand:SI 2 \"general_operand\" \"rmni\"))\n+\t(compare (neg:SI (match_operand:SI 2 \"general_operand\" \"g\"))\n \t\t (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")))\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"ix86_match_ccmode (insn, CCZmode)\n@@ -6430,7 +6430,7 @@\n ;; See comment for addsi_1_zext why we do use nonimmediate_operand\n (define_insn \"*addsi_3_zext\"\n   [(set (reg FLAGS_REG)\n-\t(compare (neg:SI (match_operand:SI 2 \"general_operand\" \"rmni\"))\n+\t(compare (neg:SI (match_operand:SI 2 \"general_operand\" \"g\"))\n \t\t (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")))\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI (plus:SI (match_dup 1) (match_dup 2))))]\n@@ -6520,7 +6520,7 @@\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")\n-\t\t   (match_operand:SI 2 \"general_operand\" \"rmni\"))\n+\t\t   (match_operand:SI 2 \"general_operand\" \"g\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n@@ -6577,7 +6577,7 @@\n (define_insn \"*addhi_1_lea\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,r,r\")\n \t(plus:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0,r\")\n-\t\t (match_operand:HI 2 \"general_operand\" \"ri,rm,lni\")))\n+\t\t (match_operand:HI 2 \"general_operand\" \"rn,rm,ln\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!TARGET_PARTIAL_REG_STALL\n    && ix86_binary_operator_ok (PLUS, HImode, operands)\"\n@@ -6620,7 +6620,7 @@\n (define_insn \"*addhi_1\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,r\")\n \t(plus:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\")\n-\t\t (match_operand:HI 2 \"general_operand\" \"ri,rm\")))\n+\t\t (match_operand:HI 2 \"general_operand\" \"rn,rm\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_PARTIAL_REG_STALL\n    && ix86_binary_operator_ok (PLUS, HImode, operands)\"\n@@ -6660,7 +6660,7 @@\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (plus:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\")\n-\t\t   (match_operand:HI 2 \"general_operand\" \"rmni,rni\"))\n+\t\t   (match_operand:HI 2 \"general_operand\" \"rmn,rn\"))\n \t  (const_int 0)))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,rm\")\n \t(plus:HI (match_dup 1) (match_dup 2)))]\n@@ -6700,7 +6700,7 @@\n \n (define_insn \"*addhi_3\"\n   [(set (reg FLAGS_REG)\n-\t(compare (neg:HI (match_operand:HI 2 \"general_operand\" \"rmni\"))\n+\t(compare (neg:HI (match_operand:HI 2 \"general_operand\" \"rmn\"))\n \t\t (match_operand:HI 1 \"nonimmediate_operand\" \"%0\")))\n    (clobber (match_scratch:HI 0 \"=r\"))]\n   \"ix86_match_ccmode (insn, CCZmode)\n@@ -6780,7 +6780,7 @@\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (plus:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0\")\n-\t\t   (match_operand:HI 2 \"general_operand\" \"rmni\"))\n+\t\t   (match_operand:HI 2 \"general_operand\" \"rmn\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:HI 0 \"=r\"))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n@@ -6966,7 +6966,7 @@\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (plus:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0\")\n-\t\t   (match_operand:QI 2 \"general_operand\" \"qmni,qni\"))\n+\t\t   (match_operand:QI 2 \"general_operand\" \"qmn,qn\"))\n \t  (const_int 0)))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=q,qm\")\n \t(plus:QI (match_dup 1) (match_dup 2)))]\n@@ -7005,7 +7005,7 @@\n \n (define_insn \"*addqi_3\"\n   [(set (reg FLAGS_REG)\n-\t(compare (neg:QI (match_operand:QI 2 \"general_operand\" \"qmni\"))\n+\t(compare (neg:QI (match_operand:QI 2 \"general_operand\" \"qmn\"))\n \t\t (match_operand:QI 1 \"nonimmediate_operand\" \"%0\")))\n    (clobber (match_scratch:QI 0 \"=q\"))]\n   \"ix86_match_ccmode (insn, CCZmode)\n@@ -7084,7 +7084,7 @@\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (plus:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0\")\n-\t\t   (match_operand:QI 2 \"general_operand\" \"qmni\"))\n+\t\t   (match_operand:QI 2 \"general_operand\" \"qmn\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:QI 0 \"=q\"))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n@@ -7348,7 +7348,7 @@\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,q\")\n \t  (minus:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0\")\n \t    (plus:QI (match_operand:QI 3 \"ix86_carry_flag_operator\" \"\")\n-\t       (match_operand:QI 2 \"general_operand\" \"qi,qm\"))))\n+\t       (match_operand:QI 2 \"general_operand\" \"qn,qm\"))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (MINUS, QImode, operands)\"\n   \"sbb{b}\\t{%2, %0|%0, %2}\"\n@@ -7360,7 +7360,7 @@\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,r\")\n \t  (minus:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0,0\")\n \t    (plus:HI (match_operand:HI 3 \"ix86_carry_flag_operator\" \"\")\n-\t       (match_operand:HI 2 \"general_operand\" \"ri,rm\"))))\n+\t       (match_operand:HI 2 \"general_operand\" \"rn,rm\"))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (MINUS, HImode, operands)\"\n   \"sbb{w}\\t{%2, %0|%0, %2}\"\n@@ -7489,7 +7489,7 @@\n (define_insn \"*subhi_1\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,r\")\n \t(minus:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0,0\")\n-\t\t  (match_operand:HI 2 \"general_operand\" \"ri,rm\")))\n+\t\t  (match_operand:HI 2 \"general_operand\" \"rn,rm\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (MINUS, HImode, operands)\"\n   \"sub{w}\\t{%2, %0|%0, %2}\"\n@@ -7500,7 +7500,7 @@\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (minus:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0,0\")\n-\t\t    (match_operand:HI 2 \"general_operand\" \"ri,rm\"))\n+\t\t    (match_operand:HI 2 \"general_operand\" \"rn,rm\"))\n \t  (const_int 0)))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,r\")\n \t(minus:HI (match_dup 1) (match_dup 2)))]\n@@ -7513,7 +7513,7 @@\n (define_insn \"*subhi_3\"\n   [(set (reg FLAGS_REG)\n \t(compare (match_operand:HI 1 \"nonimmediate_operand\" \"0,0\")\n-\t\t (match_operand:HI 2 \"general_operand\" \"ri,rm\")))\n+\t\t (match_operand:HI 2 \"general_operand\" \"rn,rm\")))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,r\")\n \t(minus:HI (match_dup 1) (match_dup 2)))]\n   \"ix86_match_ccmode (insn, CCmode)\n@@ -7533,7 +7533,7 @@\n (define_insn \"*subqi_1\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,q\")\n \t(minus:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0\")\n-\t\t  (match_operand:QI 2 \"general_operand\" \"qn,qmn\")))\n+\t\t  (match_operand:QI 2 \"general_operand\" \"qn,qm\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (MINUS, QImode, operands)\"\n   \"sub{b}\\t{%2, %0|%0, %2}\"\n@@ -7543,7 +7543,7 @@\n (define_insn \"*subqi_1_slp\"\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm,q\"))\n \t(minus:QI (match_dup 0)\n-\t\t  (match_operand:QI 1 \"general_operand\" \"qn,qmn\")))\n+\t\t  (match_operand:QI 1 \"general_operand\" \"qn,qm\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n@@ -7555,10 +7555,10 @@\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (minus:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0\")\n-\t\t    (match_operand:QI 2 \"general_operand\" \"qi,qm\"))\n+\t\t    (match_operand:QI 2 \"general_operand\" \"qn,qm\"))\n \t  (const_int 0)))\n-   (set (match_operand:HI 0 \"nonimmediate_operand\" \"=qm,q\")\n-\t(minus:HI (match_dup 1) (match_dup 2)))]\n+   (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,q\")\n+\t(minus:QI (match_dup 1) (match_dup 2)))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (MINUS, QImode, operands)\"\n   \"sub{b}\\t{%2, %0|%0, %2}\"\n@@ -7568,9 +7568,9 @@\n (define_insn \"*subqi_3\"\n   [(set (reg FLAGS_REG)\n \t(compare (match_operand:QI 1 \"nonimmediate_operand\" \"0,0\")\n-\t\t (match_operand:QI 2 \"general_operand\" \"qi,qm\")))\n-   (set (match_operand:HI 0 \"nonimmediate_operand\" \"=qm,q\")\n-\t(minus:HI (match_dup 1) (match_dup 2)))]\n+\t\t (match_operand:QI 2 \"general_operand\" \"qn,qm\")))\n+   (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,q\")\n+\t(minus:QI (match_dup 1) (match_dup 2)))]\n   \"ix86_match_ccmode (insn, CCmode)\n    && ix86_binary_operator_ok (MINUS, QImode, operands)\"\n   \"sub{b}\\t{%2, %0|%0, %2}\"\n@@ -7732,7 +7732,7 @@\n (define_insn \"*mulhi3_1\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r,r\")\n \t(mult:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%rm,rm,0\")\n-\t\t (match_operand:HI 2 \"general_operand\" \"K,i,mr\")))\n+\t\t (match_operand:HI 2 \"general_operand\" \"K,n,mr\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"@\n@@ -8543,7 +8543,7 @@\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (and:SI (match_operand:SI 0 \"nonimmediate_operand\" \"%!*a,r,rm\")\n-\t\t  (match_operand:SI 1 \"general_operand\" \"in,in,rin\"))\n+\t\t  (match_operand:SI 1 \"general_operand\" \"i,i,ri\"))\n \t  (const_int 0)))]\n   \"ix86_match_ccmode (insn, CCNOmode)\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n@@ -9044,7 +9044,7 @@\n (define_insn \"*andhi_1\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,r,r\")\n \t(and:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0,qm\")\n-\t\t(match_operand:HI 2 \"general_operand\" \"ri,rm,L\")))\n+\t\t(match_operand:HI 2 \"general_operand\" \"rn,rm,L\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (AND, HImode, operands)\"\n {\n@@ -9068,7 +9068,7 @@\n (define_insn \"*andhi_2\"\n   [(set (reg FLAGS_REG)\n \t(compare (and:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\")\n-\t\t\t (match_operand:HI 2 \"general_operand\" \"g,ri\"))\n+\t\t\t (match_operand:HI 2 \"general_operand\" \"rmn,rn\"))\n \t\t (const_int 0)))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,rm\")\n \t(and:HI (match_dup 1) (match_dup 2)))]\n@@ -9090,7 +9090,7 @@\n (define_insn \"*andqi_1\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,q,r\")\n \t(and:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0\")\n-\t\t(match_operand:QI 2 \"general_operand\" \"qi,qmi,ri\")))\n+\t\t(match_operand:QI 2 \"general_operand\" \"qn,qmn,rn\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (AND, QImode, operands)\"\n   \"@\n@@ -9103,7 +9103,7 @@\n (define_insn \"*andqi_1_slp\"\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm,q\"))\n \t(and:QI (match_dup 0)\n-\t\t(match_operand:QI 1 \"general_operand\" \"qi,qmi\")))\n+\t\t(match_operand:QI 1 \"general_operand\" \"qn,qmn\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n@@ -9115,7 +9115,7 @@\n   [(set (reg FLAGS_REG)\n \t(compare (and:QI\n \t\t      (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0\")\n-\t\t      (match_operand:QI 2 \"general_operand\" \"qim,qi,i\"))\n+\t\t      (match_operand:QI 2 \"general_operand\" \"qmn,qn,n\"))\n \t\t (const_int 0)))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=q,qm,*r\")\n \t(and:QI (match_dup 1) (match_dup 2)))]\n@@ -9139,7 +9139,7 @@\n   [(set (reg FLAGS_REG)\n \t(compare (and:QI\n \t\t   (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0\")\n-\t\t   (match_operand:QI 2 \"general_operand\" \"qim,qi\"))\n+\t\t   (match_operand:QI 2 \"general_operand\" \"qmn,qn\"))\n \t\t (const_int 0)))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=q,qm\")\n \t(and:QI (match_dup 1) (match_dup 2)))]\n@@ -9153,7 +9153,7 @@\n   [(set (reg FLAGS_REG)\n \t(compare (and:QI\n \t\t   (match_operand:QI 0 \"nonimmediate_operand\" \"+q,qm\")\n-\t\t   (match_operand:QI 1 \"nonimmediate_operand\" \"qmi,qi\"))\n+\t\t   (match_operand:QI 1 \"nonimmediate_operand\" \"qmn,qn\"))\n \t\t (const_int 0)))\n    (set (strict_low_part (match_dup 0))\n \t(and:QI (match_dup 0) (match_dup 1)))]\n@@ -9470,7 +9470,7 @@\n (define_insn \"*iorhi_1\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,m\")\n \t(ior:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\")\n-\t\t(match_operand:HI 2 \"general_operand\" \"g,ri\")))\n+\t\t(match_operand:HI 2 \"general_operand\" \"rmn,rn\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (IOR, HImode, operands)\"\n   \"or{w}\\t{%2, %0|%0, %2}\"\n@@ -9480,7 +9480,7 @@\n (define_insn \"*iorhi_2\"\n   [(set (reg FLAGS_REG)\n \t(compare (ior:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\")\n-\t\t\t (match_operand:HI 2 \"general_operand\" \"g,ri\"))\n+\t\t\t (match_operand:HI 2 \"general_operand\" \"rmn,rn\"))\n \t\t (const_int 0)))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,rm\")\n \t(ior:HI (match_dup 1) (match_dup 2)))]\n@@ -9493,7 +9493,7 @@\n (define_insn \"*iorhi_3\"\n   [(set (reg FLAGS_REG)\n \t(compare (ior:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0\")\n-\t\t\t (match_operand:HI 2 \"general_operand\" \"g\"))\n+\t\t\t (match_operand:HI 2 \"general_operand\" \"rmn\"))\n \t\t (const_int 0)))\n    (clobber (match_scratch:HI 0 \"=r\"))]\n   \"ix86_match_ccmode (insn, CCNOmode)\n@@ -9514,7 +9514,7 @@\n (define_insn \"*iorqi_1\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=q,m,r\")\n \t(ior:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0\")\n-\t\t(match_operand:QI 2 \"general_operand\" \"qmi,qi,ri\")))\n+\t\t(match_operand:QI 2 \"general_operand\" \"qmn,qn,rn\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (IOR, QImode, operands)\"\n   \"@\n@@ -9527,7 +9527,7 @@\n (define_insn \"*iorqi_1_slp\"\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+q,m\"))\n \t(ior:QI (match_dup 0)\n-\t\t(match_operand:QI 1 \"general_operand\" \"qmi,qi\")))\n+\t\t(match_operand:QI 1 \"general_operand\" \"qmn,qn\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n@@ -9538,7 +9538,7 @@\n (define_insn \"*iorqi_2\"\n   [(set (reg FLAGS_REG)\n \t(compare (ior:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0\")\n-\t\t\t (match_operand:QI 2 \"general_operand\" \"qim,qi\"))\n+\t\t\t (match_operand:QI 2 \"general_operand\" \"qmn,qn\"))\n \t\t (const_int 0)))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=q,qm\")\n \t(ior:QI (match_dup 1) (match_dup 2)))]\n@@ -9551,7 +9551,7 @@\n (define_insn \"*iorqi_2_slp\"\n   [(set (reg FLAGS_REG)\n \t(compare (ior:QI (match_operand:QI 0 \"nonimmediate_operand\" \"+q,qm\")\n-\t\t\t (match_operand:QI 1 \"general_operand\" \"qim,qi\"))\n+\t\t\t (match_operand:QI 1 \"general_operand\" \"qmn,qn\"))\n \t\t (const_int 0)))\n    (set (strict_low_part (match_dup 0))\n \t(ior:QI (match_dup 0) (match_dup 1)))]\n@@ -9565,7 +9565,7 @@\n (define_insn \"*iorqi_3\"\n   [(set (reg FLAGS_REG)\n \t(compare (ior:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0\")\n-\t\t\t (match_operand:QI 2 \"general_operand\" \"qim\"))\n+\t\t\t (match_operand:QI 2 \"general_operand\" \"qmn\"))\n \t\t (const_int 0)))\n    (clobber (match_scratch:QI 0 \"=q\"))]\n   \"ix86_match_ccmode (insn, CCNOmode)\n@@ -9843,7 +9843,7 @@\n (define_insn \"*xorhi_1\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,m\")\n \t(xor:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\")\n-\t\t(match_operand:HI 2 \"general_operand\" \"g,ri\")))\n+\t\t(match_operand:HI 2 \"general_operand\" \"rmn,rn\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (XOR, HImode, operands)\"\n   \"xor{w}\\t{%2, %0|%0, %2}\"\n@@ -9853,7 +9853,7 @@\n (define_insn \"*xorhi_2\"\n   [(set (reg FLAGS_REG)\n \t(compare (xor:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\")\n-\t\t\t (match_operand:HI 2 \"general_operand\" \"g,ri\"))\n+\t\t\t (match_operand:HI 2 \"general_operand\" \"rmn,rn\"))\n \t\t (const_int 0)))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,rm\")\n \t(xor:HI (match_dup 1) (match_dup 2)))]\n@@ -9866,7 +9866,7 @@\n (define_insn \"*xorhi_3\"\n   [(set (reg FLAGS_REG)\n \t(compare (xor:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0\")\n-\t\t\t (match_operand:HI 2 \"general_operand\" \"g\"))\n+\t\t\t (match_operand:HI 2 \"general_operand\" \"rmn\"))\n \t\t (const_int 0)))\n    (clobber (match_scratch:HI 0 \"=r\"))]\n   \"ix86_match_ccmode (insn, CCNOmode)\n@@ -9887,7 +9887,7 @@\n (define_insn \"*xorqi_1\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=q,m,r\")\n \t(xor:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0\")\n-\t\t(match_operand:QI 2 \"general_operand\" \"qmi,qi,ri\")))\n+\t\t(match_operand:QI 2 \"general_operand\" \"qmn,qn,rn\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (XOR, QImode, operands)\"\n   \"@\n@@ -9900,7 +9900,7 @@\n (define_insn \"*xorqi_1_slp\"\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm,q\"))\n \t(xor:QI (match_dup 0)\n-\t\t(match_operand:QI 1 \"general_operand\" \"qi,qmi\")))\n+\t\t(match_operand:QI 1 \"general_operand\" \"qn,qmn\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n@@ -9985,7 +9985,7 @@\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (xor:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0\")\n-\t\t  (match_operand:QI 2 \"general_operand\" \"qim,qi\"))\n+\t\t  (match_operand:QI 2 \"general_operand\" \"qmn,qn\"))\n \t  (const_int 0)))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=q,qm\")\n \t(xor:QI (match_dup 1) (match_dup 2)))]\n@@ -9998,7 +9998,7 @@\n (define_insn \"*xorqi_2_slp\"\n   [(set (reg FLAGS_REG)\n \t(compare (xor:QI (match_operand:QI 0 \"nonimmediate_operand\" \"+q,qm\")\n-\t\t\t (match_operand:QI 1 \"general_operand\" \"qim,qi\"))\n+\t\t\t (match_operand:QI 1 \"general_operand\" \"qmn,qn\"))\n \t\t (const_int 0)))\n    (set (strict_low_part (match_dup 0))\n \t(xor:QI (match_dup 0) (match_dup 1)))]\n@@ -10013,7 +10013,7 @@\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (xor:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0\")\n-\t\t  (match_operand:QI 2 \"general_operand\" \"qim\"))\n+\t\t  (match_operand:QI 2 \"general_operand\" \"qmn\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:QI 0 \"=q\"))]\n   \"ix86_match_ccmode (insn, CCNOmode)\n@@ -12492,7 +12492,7 @@\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (ashiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n-\t\t       (match_operand:QI 2 \"const1_operand\" \"I\"))\n+\t\t       (match_operand:QI 2 \"const1_operand\" \"\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:QI 0 \"=q\"))]\n   \"(TARGET_SHIFT1 || optimize_size)\n@@ -14040,7 +14040,7 @@\n   [(set (pc)\n \t(if_then_else (match_operator 1 \"comparison_operator\"\n \t\t\t[(match_operand:SWI 2 \"register_operand\" \"<r>\")\n-\t\t\t (match_operand:SWI 3 \"const0_operand\" \"n\")])\n+\t\t\t (match_operand:SWI 3 \"const0_operand\" \"\")])\n \t (label_ref (match_operand 0 \"\" \"\"))\n \t (pc)))]\n   \"TARGET_FUSE_CMP_AND_BRANCH && !TARGET_64BIT\"\n@@ -14055,7 +14055,7 @@\n   [(set (pc)\n \t(if_then_else (match_operator 1 \"comparison_operator\"\n \t\t\t[(match_operand:SWI 2 \"register_operand\" \"<r>\")\n-\t\t\t (match_operand:SWI 3 \"const0_operand\" \"n\")])\n+\t\t\t (match_operand:SWI 3 \"const0_operand\" \"\")])\n \t (pc)\n \t (label_ref (match_operand 0 \"\" \"\"))))]\n   \"TARGET_FUSE_CMP_AND_BRANCH && !TARGET_64BIT\"\n@@ -14510,7 +14510,7 @@\n   [(set (pc)\n \t(if_then_else (match_operator 0 \"comparison_operator\"\n \t\t\t[(match_operand 1 \"register_operand\" \"f\")\n-\t\t\t (match_operand 2 \"const0_operand\" \"X\")])\n+\t\t\t (match_operand 2 \"const0_operand\" \"\")])\n \t  (label_ref (match_operand 3 \"\" \"\"))\n \t  (pc)))\n    (clobber (reg:CCFP FPSR_REG))"}, {"sha": "c7a274334f8877a9723f4b75c4ac26a734f22284", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0edb82cb9fcf3740ea944359a7e15c4f2ae57d55/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0edb82cb9fcf3740ea944359a7e15c4f2ae57d55/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0edb82cb9fcf3740ea944359a7e15c4f2ae57d55", "patch": "@@ -22,7 +22,7 @@\n \n 2008-06-23  Uros Bizjak  <ubizjak@gmail.com>\n \n-\tPR middle-end/PR36584\n+\tPR middle-end/36584\n \t* testsuite/gcc.dg/pr36584.c: New test.\n \t* testsuite/gcc.target/i386/local2.c: Remove invalid test.\n "}]}