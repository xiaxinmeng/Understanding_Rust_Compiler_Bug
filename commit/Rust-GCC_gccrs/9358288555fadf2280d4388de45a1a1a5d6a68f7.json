{"sha": "9358288555fadf2280d4388de45a1a1a5d6a68f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM1ODI4ODU1NWZhZGYyMjgwZDQzODhkZTQ1YTFhMWE1ZDZhNjhmNw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2014-04-28T14:58:28Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-04-28T14:58:28Z"}, "message": "exp_dbug.ads (Get_External_Name): Add 'False' default to Has_Suffix, add 'Suffix' parameter and adjust comment.\n\n\t* exp_dbug.ads (Get_External_Name): Add 'False' default to Has_Suffix,\n\tadd 'Suffix' parameter and adjust comment.\n\t(Get_External_Name_With_Suffix): Delete.\n\t* exp_dbug.adb (Get_External_Name_With_Suffix): Merge into...\n\t(Get_External_Name): ...here.  Add 'False' default to Has_Suffix, add\n\t'Suffix' parameter.\n\t(Get_Encoded_Name): Remove 2nd argument in call to Get_External_Name.\n\tCall Get_External_Name instead of Get_External_Name_With_Suffix.\n\t(Get_Secondary_DT_External_Name): Likewise.\n\t* exp_cg.adb (Write_Call_Info): Likewise.\n\t* exp_disp.adb (Export_DT): Likewise.\n\t(Import_DT): Likewise.\n\t* comperr.ads (Compiler_Abort): Remove Code parameter and add From_GCC\n\tparameter with False default.\n\t* comperr.adb (Compiler_Abort): Likewise.  Adjust accordingly.\n\t* types.h (Fat_Pointer): Rename into...\n\t(String_Pointer): ...this.  Add comment on interfacing rules.\n\t* fe.h (Compiler_Abort): Adjust for above renaming.\n\t(Error_Msg_N): Likewise.\n\t(Error_Msg_NE): Likewise.\n\t(Get_External_Name): Likewise.  Add third parameter.\n\t(Get_External_Name_With_Suffix): Delete.\n\t* gcc-interface/decl.c (STDCALL_PREFIX): Define.\n\t(create_concat_name): Adjust call to Get_External_Name, remove call to\n\tGet_External_Name_With_Suffix, use STDCALL_PREFIX, adjust for renaming.\n\t* gcc-interface/trans.c (post_error): Likewise.\n\t(post_error_ne): Likewise.\n\t* gcc-interface/misc.c (internal_error_function): Likewise.\n\nFrom-SVN: r209866", "tree": {"sha": "070c0a9f1408dc8f96b33e0f56b694a77fc5232e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/070c0a9f1408dc8f96b33e0f56b694a77fc5232e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9358288555fadf2280d4388de45a1a1a5d6a68f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9358288555fadf2280d4388de45a1a1a5d6a68f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9358288555fadf2280d4388de45a1a1a5d6a68f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9358288555fadf2280d4388de45a1a1a5d6a68f7/comments", "author": null, "committer": null, "parents": [{"sha": "9ba5fb4309f1632c52c37d2b2a922a6a4fc406f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ba5fb4309f1632c52c37d2b2a922a6a4fc406f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ba5fb4309f1632c52c37d2b2a922a6a4fc406f7"}], "stats": {"total": 273, "additions": 138, "deletions": 135}, "files": [{"sha": "d9b038dc811e251d36b6acb079bc83b8152e5720", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9358288555fadf2280d4388de45a1a1a5d6a68f7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9358288555fadf2280d4388de45a1a1a5d6a68f7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9358288555fadf2280d4388de45a1a1a5d6a68f7", "patch": "@@ -1,3 +1,34 @@\n+2014-04-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_dbug.ads (Get_External_Name): Add 'False' default to Has_Suffix,\n+\tadd 'Suffix' parameter and adjust comment.\n+\t(Get_External_Name_With_Suffix): Delete.\n+\t* exp_dbug.adb (Get_External_Name_With_Suffix): Merge into...\n+\t(Get_External_Name): ...here.  Add 'False' default to Has_Suffix, add\n+\t'Suffix' parameter.\n+\t(Get_Encoded_Name): Remove 2nd argument in call to Get_External_Name.\n+\tCall Get_External_Name instead of Get_External_Name_With_Suffix.\n+\t(Get_Secondary_DT_External_Name): Likewise.\n+\t* exp_cg.adb (Write_Call_Info): Likewise.\n+\t* exp_disp.adb (Export_DT): Likewise.\n+\t(Import_DT): Likewise.\n+\t* comperr.ads (Compiler_Abort): Remove Code parameter and add From_GCC\n+\tparameter with False default.\n+\t* comperr.adb (Compiler_Abort): Likewise.  Adjust accordingly.\n+\t* types.h (Fat_Pointer): Rename into...\n+\t(String_Pointer): ...this.  Add comment on interfacing rules.\n+\t* fe.h (Compiler_Abort): Adjust for above renaming.\n+\t(Error_Msg_N): Likewise.\n+\t(Error_Msg_NE): Likewise.\n+\t(Get_External_Name): Likewise.  Add third parameter.\n+\t(Get_External_Name_With_Suffix): Delete.\n+\t* gcc-interface/decl.c (STDCALL_PREFIX): Define.\n+\t(create_concat_name): Adjust call to Get_External_Name, remove call to\n+\tGet_External_Name_With_Suffix, use STDCALL_PREFIX, adjust for renaming.\n+\t* gcc-interface/trans.c (post_error): Likewise.\n+\t(post_error_ne): Likewise.\n+\t* gcc-interface/misc.c (internal_error_function): Likewise.\n+\n 2014-04-28  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/60092"}, {"sha": "7a9d7070cde2a1031e1836e32ff5c2965eaaed71", "filename": "gcc/ada/comperr.adb", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9358288555fadf2280d4388de45a1a1a5d6a68f7/gcc%2Fada%2Fcomperr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9358288555fadf2280d4388de45a1a1a5d6a68f7/gcc%2Fada%2Fcomperr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcomperr.adb?ref=9358288555fadf2280d4388de45a1a1a5d6a68f7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -74,8 +74,8 @@ package body Comperr is\n \n    procedure Compiler_Abort\n      (X            : String;\n-      Code         : Integer := 0;\n-      Fallback_Loc : String := \"\")\n+      Fallback_Loc : String  := \"\";\n+      From_GCC     : Boolean := False)\n    is\n       --  The procedures below output a \"bug box\" with information about\n       --  the cause of the compiler abort and about the preferred method\n@@ -206,7 +206,7 @@ package body Comperr is\n          Write_Str (\") \");\n \n          if X'Length + Column > 76 then\n-            if Code < 0 then\n+            if From_GCC then\n                Write_Str (\"GCC error:\");\n             end if;\n \n@@ -235,11 +235,7 @@ package body Comperr is\n             Write_Str (X);\n          end if;\n \n-         if Code > 0 then\n-            Write_Str (\", Code=\");\n-            Write_Int (Int (Code));\n-\n-         elsif Code = 0 then\n+         if not From_GCC then\n \n             --  For exception case, get exception message from the TSD. Note\n             --  that it would be neater and cleaner to pass the exception"}, {"sha": "dccd8ef343309b679d266e7935968d1ddae46454", "filename": "gcc/ada/comperr.ads", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9358288555fadf2280d4388de45a1a1a5d6a68f7/gcc%2Fada%2Fcomperr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9358288555fadf2280d4388de45a1a1a5d6a68f7/gcc%2Fada%2Fcomperr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcomperr.ads?ref=9358288555fadf2280d4388de45a1a1a5d6a68f7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,8 +31,8 @@ package Comperr is\n \n    procedure Compiler_Abort\n      (X            : String;\n-      Code         : Integer := 0;\n-      Fallback_Loc : String := \"\");\n+      Fallback_Loc : String  := \"\";\n+      From_GCC     : Boolean := False);\n    pragma No_Return (Compiler_Abort);\n    --  Signals an internal compiler error. Never returns control. Depending on\n    --  processing may end up raising Unrecoverable_Error, or exiting directly.\n@@ -46,10 +46,9 @@ package Comperr is\n    --  Note that this is only used at the outer level (to handle constraint\n    --  errors or assert errors etc.) In the normal logic of the compiler we\n    --  always use pragma Assert to check for errors, and if necessary an\n-   --  explicit abort is achieved by pragma Assert (False). Code is positive\n-   --  for a gigi abort (giving the gigi abort code), zero for a front\n-   --  end exception (with possible message stored in TSD.Current_Excep,\n-   --  and negative (an unused value) for a GCC abort.\n+   --  explicit abort is achieved by pragma Assert (False). From_GCC is true\n+   --  for a GCC abort and false for a front end exception (with a possible\n+   --  message stored in TSD.Current_Excep).\n \n    procedure Delete_SCIL_Files;\n    --  Delete SCIL files associated with the main unit"}, {"sha": "483f174efc6275b1ae9acb1f9542ab767293a75a", "filename": "gcc/ada/exp_cg.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9358288555fadf2280d4388de45a1a1a5d6a68f7/gcc%2Fada%2Fexp_cg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9358288555fadf2280d4388de45a1a1a5d6a68f7/gcc%2Fada%2Fexp_cg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_cg.adb?ref=9358288555fadf2280d4388de45a1a1a5d6a68f7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2010-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2010-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -437,10 +437,10 @@ package body Exp_CG is\n       if Nkind (P) = N_Subprogram_Body\n         and then not Acts_As_Spec (P)\n       then\n-         Get_External_Name (Corresponding_Spec (P), Has_Suffix => False);\n+         Get_External_Name (Corresponding_Spec (P));\n \n       else\n-         Get_External_Name (Defining_Entity (P), Has_Suffix => False);\n+         Get_External_Name (Defining_Entity (P));\n       end if;\n \n       Write_Str (Name_Buffer (1 .. Name_Len));"}, {"sha": "13620290815a779f1091932dda2c7cb7d0ba1dde", "filename": "gcc/ada/exp_dbug.adb", "status": "modified", "additions": 33, "deletions": 44, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9358288555fadf2280d4388de45a1a1a5d6a68f7/gcc%2Fada%2Fexp_dbug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9358288555fadf2280d4388de45a1a1a5d6a68f7/gcc%2Fada%2Fexp_dbug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.adb?ref=9358288555fadf2280d4388de45a1a1a5d6a68f7", "patch": "@@ -507,8 +507,8 @@ package body Exp_Dbug is\n    begin\n       --  If not generating code, there is no need to create encoded names, and\n       --  problems when the back-end is called to annotate types without full\n-      --  code generation. See comments in Get_External_Name_With_Suffix for\n-      --  additional details.\n+      --  code generation. See comments in Get_External_Name for additional\n+      --  details.\n \n       --  However we do create encoded names if the back end is active, even\n       --  if Operating_Mode got reset. Otherwise any serious error reported\n@@ -556,7 +556,7 @@ package body Exp_Dbug is\n       --  Fixed-point case\n \n       if Is_Fixed_Point_Type (E) then\n-         Get_External_Name_With_Suffix (E, \"XF_\");\n+         Get_External_Name (E, True, \"XF_\");\n          Add_Real_To_Buffer (Delta_Value (E));\n \n          if Small_Value (E) /= Delta_Value (E) then\n@@ -568,14 +568,14 @@ package body Exp_Dbug is\n \n       elsif Vax_Float (E) then\n          if Digits_Value (Base_Type (E)) = 6 then\n-            Get_External_Name_With_Suffix (E, \"XFF\");\n+            Get_External_Name (E, True, \"XFF\");\n \n          elsif Digits_Value (Base_Type (E)) = 9 then\n-            Get_External_Name_With_Suffix (E, \"XFF\");\n+            Get_External_Name (E, True, \"XFF\");\n \n          else\n             pragma Assert (Digits_Value (Base_Type (E)) = 15);\n-            Get_External_Name_With_Suffix (E, \"XFG\");\n+            Get_External_Name (E, True, \"XFG\");\n          end if;\n \n       --  Discrete case where bounds do not match size\n@@ -607,9 +607,9 @@ package body Exp_Dbug is\n \n          begin\n             if Biased then\n-               Get_External_Name_With_Suffix (E, \"XB\");\n+               Get_External_Name (E, True, \"XB\");\n             else\n-               Get_External_Name_With_Suffix (E, \"XD\");\n+               Get_External_Name (E, True, \"XD\");\n             end if;\n \n             if Lo_Encode or Hi_Encode then\n@@ -649,7 +649,7 @@ package body Exp_Dbug is\n \n       else\n          Has_Suffix := False;\n-         Get_External_Name (E, Has_Suffix);\n+         Get_External_Name (E);\n       end if;\n \n       if Debug_Flag_B and then Has_Suffix then\n@@ -667,7 +667,11 @@ package body Exp_Dbug is\n    -- Get_External_Name --\n    -----------------------\n \n-   procedure Get_External_Name (Entity : Entity_Id; Has_Suffix : Boolean) is\n+   procedure Get_External_Name\n+     (Entity     : Entity_Id;\n+      Has_Suffix : Boolean := False;\n+      Suffix     : String := \"\")\n+   is\n       E    : Entity_Id := Entity;\n       Kind : Entity_Kind;\n \n@@ -704,6 +708,20 @@ package body Exp_Dbug is\n    --  Start of processing for Get_External_Name\n \n    begin\n+      --  If we are not in code generation mode, this procedure may still be\n+      --  called from Back_End (more specifically - from gigi for doing type\n+      --  representation annotation or some representation-specific checks).\n+      --  But in this mode there is no need to mess with external names.\n+\n+      --  Furthermore, the call causes difficulties in this case because the\n+      --  string representing the homonym number is not correctly reset as a\n+      --  part of the call to Output_Homonym_Numbers_Suffix (which is not\n+      --  called in gigi).\n+\n+      if Operating_Mode /= Generate_Code then\n+         return;\n+      end if;\n+\n       Reset_Buffers;\n \n       --  If this is a child unit, we want the child\n@@ -762,42 +780,13 @@ package body Exp_Dbug is\n          Get_Qualified_Name_And_Append (E);\n       end if;\n \n-      Name_Buffer (Name_Len + 1) := ASCII.NUL;\n-   end Get_External_Name;\n-\n-   -----------------------------------\n-   -- Get_External_Name_With_Suffix --\n-   -----------------------------------\n-\n-   procedure Get_External_Name_With_Suffix\n-     (Entity : Entity_Id;\n-      Suffix : String)\n-   is\n-      Has_Suffix : constant Boolean := (Suffix /= \"\");\n-\n-   begin\n-      --  If we are not in code generation mode, this procedure may still be\n-      --  called from Back_End (more specifically - from gigi for doing type\n-      --  representation annotation or some representation-specific checks).\n-      --  But in this mode there is no need to mess with external names.\n-\n-      --  Furthermore, the call causes difficulties in this case because the\n-      --  string representing the homonym number is not correctly reset as a\n-      --  part of the call to Output_Homonym_Numbers_Suffix (which is not\n-      --  called in gigi).\n-\n-      if Operating_Mode /= Generate_Code then\n-         return;\n-      end if;\n-\n-      Get_External_Name (Entity, Has_Suffix);\n-\n       if Has_Suffix then\n          Add_Str_To_Name_Buffer (\"___\");\n          Add_Str_To_Name_Buffer (Suffix);\n-         Name_Buffer (Name_Len + 1) := ASCII.NUL;\n       end if;\n-   end Get_External_Name_With_Suffix;\n+\n+      Name_Buffer (Name_Len + 1) := ASCII.NUL;\n+   end Get_External_Name;\n \n    --------------------------\n    -- Get_Variant_Encoding --\n@@ -944,15 +933,15 @@ package body Exp_Dbug is\n       Suffix_Index : Int)\n    is\n    begin\n-      Get_External_Name (Typ, Has_Suffix => False);\n+      Get_External_Name (Typ);\n \n       if Ancestor_Typ /= Typ then\n          declare\n             Len      : constant Natural := Name_Len;\n             Save_Str : constant String (1 .. Name_Len)\n                          := Name_Buffer (1 .. Name_Len);\n          begin\n-            Get_External_Name (Ancestor_Typ, Has_Suffix => False);\n+            Get_External_Name (Ancestor_Typ);\n \n             --  Append the extended name of the ancestor to the\n             --  extended name of Typ"}, {"sha": "6f27bfe0e3d24582be7dc7b315d2baea86f51cef", "filename": "gcc/ada/exp_dbug.ads", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9358288555fadf2280d4388de45a1a1a5d6a68f7/gcc%2Fada%2Fexp_dbug.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9358288555fadf2280d4388de45a1a1a5d6a68f7/gcc%2Fada%2Fexp_dbug.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.ads?ref=9358288555fadf2280d4388de45a1a1a5d6a68f7", "patch": "@@ -413,10 +413,11 @@ package Exp_Dbug is\n \n    procedure Get_External_Name\n      (Entity     : Entity_Id;\n-      Has_Suffix : Boolean);\n-   --  Set Name_Buffer and Name_Len to the external name of entity E. The\n+      Has_Suffix : Boolean := False;\n+      Suffix     : String := \"\");\n+   --  Set Name_Buffer and Name_Len to the external name of the entity. The\n    --  external name is the Interface_Name, if specified, unless the entity\n-   --  has an address clause or a suffix.\n+   --  has an address clause or Has_Suffix is true.\n    --\n    --  If the Interface is not present, or not used, the external name is the\n    --  concatenation of:\n@@ -428,26 +429,11 @@ package Exp_Dbug is\n    --    - the string \"$\" (or \"__\" if target does not allow \"$\"), followed\n    --        by homonym suffix, if the entity is an overloaded subprogram\n    --        or is defined within an overloaded subprogram.\n-\n-   procedure Get_External_Name_With_Suffix\n-     (Entity : Entity_Id;\n-      Suffix : String);\n-   --  Set Name_Buffer and Name_Len to the external name of entity E. If\n-   --  Suffix is the empty string the external name is as above, otherwise\n-   --  the external name is the concatenation of:\n-   --\n-   --    - the string \"_ada_\", if the entity is a library subprogram,\n-   --    - the names of any enclosing scopes, each followed by \"__\",\n-   --        or \"X_\" if the next entity is a subunit)\n-   --    - the name of the entity\n-   --    - the string \"$\" (or \"__\" if target does not allow \"$\"), followed\n-   --        by homonym suffix, if the entity is an overloaded subprogram\n-   --        or is defined within an overloaded subprogram.\n-   --    - the string \"___\" followed by Suffix\n+   --    - the string \"___\" followed by Suffix if Has_Suffix is true.\n    --\n    --  Note that a call to this procedure has no effect if we are not\n    --  generating code, since the necessary information for computing the\n-   --  proper encoded name is not available in this case.\n+   --  proper external name is not available in this case.\n \n    --------------------------------------------\n    -- Subprograms for Handling Qualification --"}, {"sha": "da2b55d3d9a9cb8789fbfecf546fcfe4a620ea02", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9358288555fadf2280d4388de45a1a1a5d6a68f7/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9358288555fadf2280d4388de45a1a1a5d6a68f7/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=9358288555fadf2280d4388de45a1a1a5d6a68f7", "patch": "@@ -3913,10 +3913,7 @@ package body Exp_Disp is\n \n          pragma Assert (Related_Type (Node (Elmt)) = Typ);\n \n-         Get_External_Name\n-           (Entity     => Node (Elmt),\n-            Has_Suffix => True);\n-\n+         Get_External_Name (Node (Elmt));\n          Set_Interface_Name (DT,\n            Make_String_Literal (Loc,\n              Strval => String_From_Name_Buffer));\n@@ -7088,7 +7085,7 @@ package body Exp_Disp is\n \n          Set_Scope (DT, Current_Scope);\n \n-         Get_External_Name (DT, True);\n+         Get_External_Name (DT);\n          Set_Interface_Name (DT,\n            Make_String_Literal (Loc, Strval => String_From_Name_Buffer));\n "}, {"sha": "3d670dc7bc3c6ada3b8479cfac29e85fffe9a193", "filename": "gcc/ada/fe.h", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9358288555fadf2280d4388de45a1a1a5d6a68f7/gcc%2Fada%2Ffe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9358288555fadf2280d4388de45a1a1a5d6a68f7/gcc%2Fada%2Ffe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffe.h?ref=9358288555fadf2280d4388de45a1a1a5d6a68f7", "patch": "@@ -29,17 +29,20 @@\n  *                                                                          *\n  ****************************************************************************/\n \n-/* This file contains definitions to access front-end functions and\n-   variables used by gigi.  */\n+/* This file contains declarations to access front-end functions and variables\n+   used by gigi.\n+\n+   WARNING: functions taking String_Pointer parameters must abide by the rule\n+   documented alongside the definition of String_Pointer in types.h.  */\n \n #ifdef __cplusplus\n extern \"C\" {\n #endif\n \n-/* comperr:  */\n+/* comperr: */\n \n #define Compiler_Abort comperr__compiler_abort\n-extern int Compiler_Abort (Fat_Pointer, int, Fat_Pointer) ATTRIBUTE_NORETURN;\n+extern int Compiler_Abort (String_Pointer, String_Pointer, Boolean) ATTRIBUTE_NORETURN;\n \n /* csets: */\n \n@@ -72,8 +75,6 @@ extern void Set_Mechanism\t\t(Entity_Id, Mechanism_Type);\n extern void Set_RM_Size\t\t\t(Entity_Id, Uint);\n extern void Set_Present_Expr\t\t(Node_Id, Uint);\n \n-/* Test if the node N is the name of an entity (i.e. is an identifier,\n-   expanded name, or an attribute reference that returns an entity).  */\n #define Is_Entity_Name einfo__is_entity_name\n extern Boolean Is_Entity_Name\t\t(Node_Id);\n \n@@ -90,8 +91,8 @@ extern Node_Id Get_Attribute_Definition_Clause (Entity_Id, char);\n #define Error_Msg_NE              errout__error_msg_ne\n #define Set_Identifier_Casing     errout__set_identifier_casing\n \n-extern void Error_Msg_N\t          (Fat_Pointer, Node_Id);\n-extern void Error_Msg_NE          (Fat_Pointer, Node_Id, Entity_Id);\n+extern void Error_Msg_N\t          (String_Pointer, Node_Id);\n+extern void Error_Msg_NE          (String_Pointer, Node_Id, Entity_Id);\n extern void Set_Identifier_Casing (Char *, const Char *);\n \n /* err_vars: */\n@@ -147,11 +148,9 @@ extern void Setup_Asm_Outputs\t\t(Node_Id);\n \n #define Get_Encoded_Name exp_dbug__get_encoded_name\n #define Get_External_Name exp_dbug__get_external_name\n-#define Get_External_Name_With_Suffix exp_dbug__get_external_name_with_suffix\n \n-extern void Get_Encoded_Name\t\t\t(Entity_Id);\n-extern void Get_External_Name\t\t\t(Entity_Id, Boolean);\n-extern void Get_External_Name_With_Suffix\t(Entity_Id, Fat_Pointer);\n+extern void Get_Encoded_Name\t(Entity_Id);\n+extern void Get_External_Name\t(Entity_Id, Boolean, String_Pointer);\n \n /* exp_util: */\n "}, {"sha": "73945f10ec52c8e63d250ccbf7841daa9d0a7801", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9358288555fadf2280d4388de45a1a1a5d6a68f7/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9358288555fadf2280d4388de45a1a1a5d6a68f7/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=9358288555fadf2280d4388de45a1a1a5d6a68f7", "patch": "@@ -72,6 +72,8 @@\n #define Has_Thiscall_Convention(E) 0\n #endif\n \n+#define STDCALL_PREFIX \"_imp__\"\n+\n /* Stack realignment is necessary for functions with foreign conventions when\n    the ABI doesn't mandate as much as what the compiler assumes - that is, up\n    to PREFERRED_STACK_BOUNDARY.\n@@ -8856,26 +8858,22 @@ get_entity_name (Entity_Id gnat_entity)\n tree\n create_concat_name (Entity_Id gnat_entity, const char *suffix)\n {\n-  Entity_Kind kind = Ekind (gnat_entity);\n+  const Entity_Kind kind = Ekind (gnat_entity);\n+  const bool has_suffix = (suffix != NULL);\n+  String_Template temp = {1, has_suffix ? strlen (suffix) : 0};\n+  String_Pointer sp = {suffix, &temp};\n \n-  if (suffix)\n-    {\n-      String_Template temp = {1, (int) strlen (suffix)};\n-      Fat_Pointer fp = {suffix, &temp};\n-      Get_External_Name_With_Suffix (gnat_entity, fp);\n-    }\n-  else\n-    Get_External_Name (gnat_entity, 0);\n+  Get_External_Name (gnat_entity, has_suffix, sp);\n \n   /* A variable using the Stdcall convention lives in a DLL.  We adjust\n      its name to use the jump table, the _imp__NAME contains the address\n      for the NAME variable.  */\n   if ((kind == E_Variable || kind == E_Constant)\n       && Has_Stdcall_Convention (gnat_entity))\n     {\n-      const int len = 6 + Name_Len;\n+      const int len = strlen (STDCALL_PREFIX) + Name_Len;\n       char *new_name = (char *) alloca (len + 1);\n-      strcpy (new_name, \"_imp__\");\n+      strcpy (new_name, STDCALL_PREFIX);\n       strcat (new_name, Name_Buffer);\n       return get_identifier_with_length (new_name, len);\n     }"}, {"sha": "fe44c6d5b3f15e5c934ad126f26e8b662fe94845", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9358288555fadf2280d4388de45a1a1a5d6a68f7/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9358288555fadf2280d4388de45a1a1a5d6a68f7/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=9358288555fadf2280d4388de45a1a1a5d6a68f7", "patch": "@@ -283,8 +283,8 @@ internal_error_function (diagnostic_context *context,\n   text_info tinfo;\n   char *buffer, *p, *loc;\n   String_Template temp, temp_loc;\n-  Fat_Pointer fp, fp_loc;\n-  expanded_location s;\n+  String_Pointer sp, sp_loc;\n+  expanded_location xloc;\n \n   /* Warn if plugins present.  */\n   warn_if_plugins ();\n@@ -311,21 +311,21 @@ internal_error_function (diagnostic_context *context,\n \n   temp.Low_Bound = 1;\n   temp.High_Bound = p - buffer;\n-  fp.Bounds = &temp;\n-  fp.Array = buffer;\n+  sp.Bounds = &temp;\n+  sp.Array = buffer;\n \n-  s = expand_location (input_location);\n-  if (context->show_column && s.column != 0)\n-    asprintf (&loc, \"%s:%d:%d\", s.file, s.line, s.column);\n+  xloc = expand_location (input_location);\n+  if (context->show_column && xloc.column != 0)\n+    asprintf (&loc, \"%s:%d:%d\", xloc.file, xloc.line, xloc.column);\n   else\n-    asprintf (&loc, \"%s:%d\", s.file, s.line);\n+    asprintf (&loc, \"%s:%d\", xloc.file, xloc.line);\n   temp_loc.Low_Bound = 1;\n   temp_loc.High_Bound = strlen (loc);\n-  fp_loc.Bounds = &temp_loc;\n-  fp_loc.Array = loc;\n+  sp_loc.Bounds = &temp_loc;\n+  sp_loc.Array = loc;\n \n   Current_Error_Node = error_gnat_node;\n-  Compiler_Abort (fp, -1, fp_loc);\n+  Compiler_Abort (sp, sp_loc, true);\n }\n \n /* Perform all the initialization steps that are language-specific.  */"}, {"sha": "11b89825c2390b3fd0af4ac51a926e0c04f40c60", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9358288555fadf2280d4388de45a1a1a5d6a68f7/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9358288555fadf2280d4388de45a1a1a5d6a68f7/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=9358288555fadf2280d4388de45a1a1a5d6a68f7", "patch": "@@ -9356,16 +9356,16 @@ void\n post_error (const char *msg, Node_Id node)\n {\n   String_Template temp;\n-  Fat_Pointer fp;\n+  String_Pointer sp;\n \n   if (No (node))\n     return;\n \n   temp.Low_Bound = 1;\n   temp.High_Bound = strlen (msg);\n-  fp.Bounds = &temp;\n-  fp.Array = msg;\n-  Error_Msg_N (fp, node);\n+  sp.Bounds = &temp;\n+  sp.Array = msg;\n+  Error_Msg_N (sp, node);\n }\n \n /* Similar to post_error, but NODE is the node at which to post the error and\n@@ -9375,16 +9375,16 @@ void\n post_error_ne (const char *msg, Node_Id node, Entity_Id ent)\n {\n   String_Template temp;\n-  Fat_Pointer fp;\n+  String_Pointer sp;\n \n   if (No (node))\n     return;\n \n   temp.Low_Bound = 1;\n   temp.High_Bound = strlen (msg);\n-  fp.Bounds = &temp;\n-  fp.Array = msg;\n-  Error_Msg_NE (fp, node, ent);\n+  sp.Bounds = &temp;\n+  sp.Array = msg;\n+  Error_Msg_NE (sp, node, ent);\n }\n \n /* Similar to post_error_ne, but NUM is the number to use for the '^'.  */"}, {"sha": "1330730b71b7a8fdf4e9d61f1d21365f28e93e06", "filename": "gcc/ada/types.h", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9358288555fadf2280d4388de45a1a1a5d6a68f7/gcc%2Fada%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9358288555fadf2280d4388de45a1a1a5d6a68f7/gcc%2Fada%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.h?ref=9358288555fadf2280d4388de45a1a1a5d6a68f7", "patch": "@@ -76,11 +76,19 @@ typedef Char *Str;\n /* Pointer to string of Chars */\n typedef Char *Str_Ptr;\n \n-/* Types for the fat pointer used for strings and the template it\n-   points to.  */\n-typedef struct {int Low_Bound, High_Bound; } String_Template;\n-typedef struct {const char *Array; String_Template *Bounds; }\n-\t__attribute ((aligned (sizeof (char *) * 2))) Fat_Pointer;\n+/* Types for the fat pointer used for strings and the template it points to.\n+   The fat pointer is conceptually a couple of pointers, but it is wrapped\n+   up in a special record type.  On the Ada side, the record is naturally\n+   aligned (i.e. given pointer alignment) on regular platforms, but it is\n+   given twice this alignment on strict-alignment platforms for performance\n+   reasons.  On the C side, for the sake of portability and simplicity, we\n+   overalign it on all platforms (so the machine mode is always the same as\n+   on the Ada side) but arrange to pass it in an even scalar position as a\n+   parameter to functions (so the scalar parameter alignment is always the\n+   same as on the Ada side).  */\n+typedef struct { int Low_Bound, High_Bound; } String_Template;\n+typedef struct { const char *Array; String_Template *Bounds; }\n+\t__attribute ((aligned (sizeof (char *) * 2))) String_Pointer;\n \n /* Types for Node/Entity Kinds:  */\n "}]}