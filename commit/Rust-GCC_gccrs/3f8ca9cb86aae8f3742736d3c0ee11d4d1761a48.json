{"sha": "3f8ca9cb86aae8f3742736d3c0ee11d4d1761a48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y4Y2E5Y2I4NmFhZThmMzc0MjczNmQzYzBlZTExZDRkMTc2MWE0OA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-07-10T00:16:28Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-07-10T00:16:28Z"}, "message": "Daily bump.", "tree": {"sha": "2e0ddedd6514ae19e7efb9f76be7ff507e37626b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e0ddedd6514ae19e7efb9f76be7ff507e37626b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f8ca9cb86aae8f3742736d3c0ee11d4d1761a48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f8ca9cb86aae8f3742736d3c0ee11d4d1761a48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f8ca9cb86aae8f3742736d3c0ee11d4d1761a48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f8ca9cb86aae8f3742736d3c0ee11d4d1761a48/comments", "author": null, "committer": null, "parents": [{"sha": "0d00fe404c162ad0cf922ca8455aa23a74042b63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d00fe404c162ad0cf922ca8455aa23a74042b63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d00fe404c162ad0cf922ca8455aa23a74042b63"}], "stats": {"total": 322, "additions": 321, "deletions": 1}, "files": [{"sha": "056de895c9a2ce3e883fb8e165127aaac8269697", "filename": "gcc/ChangeLog", "status": "modified", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8ca9cb86aae8f3742736d3c0ee11d4d1761a48/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8ca9cb86aae8f3742736d3c0ee11d4d1761a48/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f8ca9cb86aae8f3742736d3c0ee11d4d1761a48", "patch": "@@ -1,3 +1,167 @@\n+2020-07-09  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\tPR target/96125\n+\t* config/rs6000/rs6000-call.c (rs6000_init_builtins): Define the MMA\n+\tspecific types __vector_quad and __vector_pair, and initialize the\n+\tMMA built-ins if TARGET_EXTRA_BUILTINS is set.\n+\t(mma_init_builtins): Don't test for mask set in rs6000_builtin_mask.\n+\tRemove now unneeded mask variable.\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Add the\n+\tOPTION_MASK_MMA flag for power10 if not already set.\n+\n+2020-07-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/96133\n+\t* tree-vect-slp.c (vect_build_slp_tree_1): Compare load_p\n+\tstatus between stmts.\n+\n+2020-07-09  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/88713\n+\t* config/i386/i386-expand.c (ix86_emit_swsqrtsf): Enable FMA.\n+\t* config/i386/sse.md (VF_AVX512VL_VF1_128_256): New.\n+\t(rsqrt<mode>2): Replace VF1_128_256 with VF_AVX512VL_VF1_128_256.\n+\t(rsqrtv16sf2): Removed.\n+\n+2020-07-09  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vectorizer.h (vect_verify_datarefs_alignment): Remove.\n+\t(vect_slp_analyze_and_verify_instance_alignment): Rename to ...\n+\t(vect_slp_analyze_instance_alignment): ... this.\n+\t* tree-vect-data-refs.c (verify_data_ref_alignment): Remove.\n+\t(vect_verify_datarefs_alignment): Likewise.\n+\t(vect_enhance_data_refs_alignment): Do not call\n+\tvect_verify_datarefs_alignment.\n+\t(vect_slp_analyze_node_alignment): Rename from\n+\tvect_slp_analyze_and_verify_node_alignment and do not\n+\tcall verify_data_ref_alignment.\n+\t(vect_slp_analyze_instance_alignment): Rename from\n+\tvect_slp_analyze_and_verify_instance_alignment.\n+\t* tree-vect-stmts.c (vectorizable_store): Dump when\n+\twe vectorize an unaligned access.\n+\t(vectorizable_load): Likewise.\n+\t* tree-vect-loop.c (vect_analyze_loop_2): Do not call\n+\tvect_verify_datarefs_alignment.\n+\t* tree-vect-slp.c (vect_slp_analyze_bb_1): Adjust.\n+\n+2020-07-09  Bin Cheng  <bin.cheng@linux.alibaba.com>\n+\n+\tPR tree-optimization/95804\n+\t* tree-loop-distribution.c (break_alias_scc_partitions): Force\n+\tnegative post order to reduction partition.\n+\n+2020-07-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* omp-general.h (struct omp_for_data): Add min_inner_iterations\n+\tand factor members.\n+\t* omp-general.c (omp_extract_for_data): Initialize them and remember\n+\tthem in OMP_CLAUSE_COLLAPSE_COUNT if needed and restore from there.\n+\t* omp-expand.c (expand_omp_for_init_counts): Fix up computation of\n+\tcounts[fd->last_nonrect] if fd->loop.n2 is INTEGER_CST.\n+\t(expand_omp_for_init_vars): For\n+\tfd->first_nonrect + 1 == fd->last_nonrect loops with for now\n+\tINTEGER_CST fd->loop.n2 find quadratic equation roots instead of\n+\tusing fallback method when possible.\n+\n+2020-07-09  Omar Tahir  <omar.tahir@arm.com>\n+\n+\t* ira.c (move_unallocated_pseudos): Zero first_moveable_pseudo and\n+\tlast_moveable_pseudo before returning.\n+\n+2020-07-09  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n+\n+\t* config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins): Add\n+\t__ARM_FEATURE_BTI_DEFAULT support.\n+\n+2020-07-09  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (aarch64_indirect_call_asm):\n+\tNew declaration.\n+\t* config/aarch64/aarch64.c (aarch64_regno_regclass): Handle new\n+\tstub registers class.\n+\t(aarch64_class_max_nregs): Likewise.\n+\t(aarch64_register_move_cost): Likewise.\n+\t(aarch64_sls_shared_thunks): Global array to store stub labels.\n+\t(aarch64_sls_emit_function_stub): New.\n+\t(aarch64_create_blr_label): New.\n+\t(aarch64_sls_emit_blr_function_thunks): New.\n+\t(aarch64_sls_emit_shared_blr_thunks): New.\n+\t(aarch64_asm_file_end): New.\n+\t(aarch64_indirect_call_asm): New.\n+\t(TARGET_ASM_FILE_END): Use aarch64_asm_file_end.\n+\t(TARGET_ASM_FUNCTION_EPILOGUE): Use\n+\taarch64_sls_emit_blr_function_thunks.\n+\t* config/aarch64/aarch64.h (STB_REGNUM_P): New.\n+\t(enum reg_class): Add STUB_REGS class.\n+\t(machine_function): Introduce `call_via` array for\n+\tfunction-local stub labels.\n+\t* config/aarch64/aarch64.md (*call_insn, *call_value_insn): Use\n+\taarch64_indirect_call_asm to emit code when hardening BLR\n+\tinstructions.\n+\t* config/aarch64/constraints.md (Ucr): New constraint\n+\trepresenting registers for indirect calls.  Is GENERAL_REGS\n+\tusually, and STUB_REGS when hardening BLR instruction against\n+\tSLS.\n+\t* config/aarch64/predicates.md (aarch64_general_reg): STUB_REGS class\n+\tis also a general register.\n+\n+2020-07-09  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (aarch64_sls_barrier): New.\n+\t* config/aarch64/aarch64.c (aarch64_output_casesi): Emit\n+\tspeculation barrier after BR instruction if needs be.\n+\t(aarch64_trampoline_init): Handle ptr_mode value & adjust size\n+\tof code copied.\n+\t(aarch64_sls_barrier): New.\n+\t(aarch64_asm_trampoline_template): Add needed barriers.\n+\t* config/aarch64/aarch64.h (AARCH64_ISA_SB): New.\n+\t(TARGET_SB): New.\n+\t(TRAMPOLINE_SIZE): Account for barrier.\n+\t* config/aarch64/aarch64.md (indirect_jump, *casesi_dispatch,\n+\tsimple_return, *do_return, *sibcall_insn, *sibcall_value_insn):\n+\tEmit barrier if needs be, also account for possible barrier using\n+\t\"sls_length\" attribute.\n+\t(sls_length): New attribute.\n+\t(length): Determine default using any non-default sls_length\n+\tvalue.\n+\n+2020-07-09  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (aarch64_harden_sls_retbr_p):\n+\tNew.\n+\t(aarch64_harden_sls_blr_p): New.\n+\t* config/aarch64/aarch64.c (enum aarch64_sls_hardening_type):\n+\tNew.\n+\t(aarch64_harden_sls_retbr_p): New.\n+\t(aarch64_harden_sls_blr_p): New.\n+\t(aarch64_validate_sls_mitigation): New.\n+\t(aarch64_override_options): Parse options for SLS mitigation.\n+\t* config/aarch64/aarch64.opt (-mharden-sls): New option.\n+\t* doc/invoke.texi: Document new option.\n+\n+2020-07-09  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* tree-vect-stmts.c (vectorizable_condition): Prohibit vectorization\n+\twith partial vectors explicitly excepting for EXTRACT_LAST_REDUCTION\n+\tor nested-cycle reduction.\n+\n+2020-07-09  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* tree-vect-loop.c (vect_analyze_loop_2): Update dumping string\n+\tfor fully masking to be more common.\n+\n+2020-07-09  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* config/riscv/riscv.md (get_thread_pointer<mode>): New.\n+\t(TP_REGNUM): Ditto.\n+\t* doc/extend.texi (Target Builtins): Add RISC-V built-in section.\n+\tDocument __builtin_thread_pointer.\n+\n+2020-07-09  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* config/riscv/riscv-sr.c (riscv_remove_unneeded_save_restore_calls):\n+\tAbort if any arguments on stack.\n+\n 2020-07-08  Eric Botcazou  <ebotcazou@gcc.gnu.org>\n \n \t* gimple-fold.c (gimple_fold_builtin_memory_op): Do not fold if"}, {"sha": "ffe0f79eae466bfb67b9a24527511bd59c722095", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8ca9cb86aae8f3742736d3c0ee11d4d1761a48/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8ca9cb86aae8f3742736d3c0ee11d4d1761a48/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=3f8ca9cb86aae8f3742736d3c0ee11d4d1761a48", "patch": "@@ -1 +1 @@\n-20200709\n+20200710"}, {"sha": "8e179a30c5d093e5d03290fc4f65d93606a2fb90", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8ca9cb86aae8f3742736d3c0ee11d4d1761a48/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8ca9cb86aae8f3742736d3c0ee11d4d1761a48/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=3f8ca9cb86aae8f3742736d3c0ee11d4d1761a48", "patch": "@@ -1,3 +1,10 @@\n+2020-07-09  Julian Brown  <julian@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR middle-end/95270\n+\t* c-typeck.c (c_finish_omp_clauses): Set OMP_CLAUSE_SIZE (bias) to zero\n+\tfor standalone attach/detach clauses.\n+\n 2020-07-08  Eric Botcazou  <ebotcazou@gcc.gnu.org>\n \n \t* c-typeck.c (convert_for_assignment): If -Wscalar-storage-order is"}, {"sha": "4d2ac959daa6a6e1bbe2825350332a636b667e20", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8ca9cb86aae8f3742736d3c0ee11d4d1761a48/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8ca9cb86aae8f3742736d3c0ee11d4d1761a48/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3f8ca9cb86aae8f3742736d3c0ee11d4d1761a48", "patch": "@@ -1,3 +1,16 @@\n+2020-07-09  Julian Brown  <julian@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR middle-end/95270\n+\t* semantics.c (finish_omp_clauses): Likewise.\n+\n+2020-07-09  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/96132\n+\t* constexpr.c (potential_constant_expression_1) <case PARM_DECL>:\n+\tRestore dependent_type_p check that guarded the call to\n+\tis_really_empty_class.\n+\n 2020-07-08  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/95497"}, {"sha": "80a76fe81e361203597f184e1d69a8458173701c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8ca9cb86aae8f3742736d3c0ee11d4d1761a48/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8ca9cb86aae8f3742736d3c0ee11d4d1761a48/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3f8ca9cb86aae8f3742736d3c0ee11d4d1761a48", "patch": "@@ -1,3 +1,8 @@\n+2020-07-09  Julian Brown  <julian@codesourcery.com>\n+\n+\t* trans-openmp.c (gfc_trans_omp_clauses): Use 'inner' not 'decl' for\n+\tderived type members which themselves have derived types.\n+\n 2020-07-08  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/96085"}, {"sha": "17191ee3b069395ff07259cf6770974ba991bcb2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8ca9cb86aae8f3742736d3c0ee11d4d1761a48/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8ca9cb86aae8f3742736d3c0ee11d4d1761a48/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3f8ca9cb86aae8f3742736d3c0ee11d4d1761a48", "patch": "@@ -1,3 +1,78 @@\n+2020-07-09  Julian Brown  <julian@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR middle-end/95270\n+\t* c-c++-common/goacc/mdc-1.c: Update expected dump output for zero\n+\tbias.\n+\n+2020-07-09  Julian Brown  <julian@codesourcery.com>\n+\n+\t* gfortran.dg/goacc/mapping-tests-3.f90: New test.\n+\t* gfortran.dg/goacc/mapping-tests-4.f90: New test.\n+\n+2020-07-09  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\tPR target/96125\n+\t* gcc.target/powerpc/pr96125.c: New test.\n+\n+2020-07-09  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/96132\n+\t* g++.dg/template/incomplete12.C: New test.\n+\n+2020-07-09  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/88713\n+\t* gcc.target/i386/pr88713-1.c: New test.\n+\t* gcc.target/i386/pr88713-2.c: Likewise.\n+\n+2020-07-09  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/bb-slp-10.c: Adjust.\n+\t* gcc.dg/vect/slp-45.c: Likewise.\n+\t* gcc.dg/vect/vect-109.c: Likewise.\n+\n+2020-07-09  Bin Cheng  <bin.cheng@linux.alibaba.com>\n+\n+\tPR tree-optimization/95804\n+\t* gcc.dg/tree-ssa/pr95804.c: New test.\n+\n+2020-07-09  Omar Tahir  <omar.tahir@arm.com>\n+\n+\t* gcc.target/aarch64/nospill.c: New test.\n+\n+2020-07-09  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* gcc.target/aarch64/sls-mitigation/sls-miti-blr-bti.c: New test.\n+\t* gcc.target/aarch64/sls-mitigation/sls-miti-blr.c: New test.\n+\n+2020-07-09  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* gcc.target/aarch64/sls-mitigation/sls-miti-retbr.c: New test.\n+\t* gcc.target/aarch64/sls-mitigation/sls-miti-retbr-pacret.c:\n+\tNew test.\n+\t* gcc.target/aarch64/sls-mitigation/sls-mitigation.exp: New file.\n+\t* lib/target-supports.exp (check_effective_target_aarch64_asm_sb_ok):\n+\tNew proc.\n+\n+2020-07-09  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* gcc.target/aarch64/sve/clastb_1.c: Update dumping string.\n+\t* gcc.target/aarch64/sve/clastb_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/clastb_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/clastb_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/clastb_5.c: Likewise.\n+\t* gcc.target/aarch64/sve/clastb_6.c: Likewise.\n+\t* gcc.target/aarch64/sve/clastb_7.c: Likewise.\n+\n+2020-07-09  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* gcc.target/riscv/read-thread-pointer.c: New.\n+\n+2020-07-09  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* gcc.target/riscv/save-restore-9.c: New.\n+\n 2020-07-08  Eric Botcazou  <ebotcazou@gcc.gnu.org>\n \n \t* gcc.dg/sso-11.c: New test."}, {"sha": "9ee006dd088c92aa5cd76477e3f26e195797eb5b", "filename": "include/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8ca9cb86aae8f3742736d3c0ee11d4d1761a48/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8ca9cb86aae8f3742736d3c0ee11d4d1761a48/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=3f8ca9cb86aae8f3742736d3c0ee11d4d1761a48", "patch": "@@ -1,3 +1,14 @@\n+2020-07-09  Julian Brown  <julian@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR middle-end/95270\n+\t* gomp-constants.h (gomp_map_kind): Expand comment for attach/detach\n+\tmapping kinds.\n+\n+2020-07-09  Julian Brown  <julian@codesourcery.com>\n+\n+\t* gomp-constants.h (gomp_map_kind): Update comment for GOMP_MAP_TO_PSET.\n+\n 2020-06-26  Nick Clifton  <nickc@redhat.com>\n \n \t* libiberty.h (bsearch_r): Remove use of the register keyword from"}, {"sha": "602c90761e7d8de7fa18f41ec7a9fe2b0435eda8", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8ca9cb86aae8f3742736d3c0ee11d4d1761a48/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8ca9cb86aae8f3742736d3c0ee11d4d1761a48/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=3f8ca9cb86aae8f3742736d3c0ee11d4d1761a48", "patch": "@@ -1,3 +1,13 @@\n+2020-07-09  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n+\n+\tPR target/96001\n+\t* config/aarch64/lse.S: Add BTI marking and related definitions,\n+\tand add BTI c to function entries.\n+\n+2020-07-09  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n+\n+\t* config/aarch64/lse.S: Add stack note.\n+\n 2020-07-02  Martin Liska  <mliska@suse.cz>\n \n \tPR gcov-profile/95348"}, {"sha": "f8d58139fbcb7501972ad2d22bc154d3c728f676", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8ca9cb86aae8f3742736d3c0ee11d4d1761a48/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8ca9cb86aae8f3742736d3c0ee11d4d1761a48/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=3f8ca9cb86aae8f3742736d3c0ee11d4d1761a48", "patch": "@@ -1,3 +1,29 @@\n+2020-07-09  Julian Brown  <julian@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR middle-end/95270\n+\t* testsuite/libgomp.oacc-c-c++-common/pr95270-1.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/pr95270-2.c: New test.\n+\n+2020-07-09  Julian Brown  <julian@codesourcery.com>\n+\n+\t* oacc-mem.c (find_group_last): Group data-movement clauses\n+\t(GOMP_MAP_TO_PSET, GOMP_MAP_TO, etc.) together with a subsequent\n+\tGOMP_MAP_ATTACH.  Allow standalone GOMP_MAP_ATTACH also.\n+\n+2020-07-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* testsuite/libgomp.c/loop-19.c: New test.\n+\t* testsuite/libgomp.c/loop-20.c: New test.\n+\n+2020-07-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* omp.h.in (omp_alloctrait_value_t): Change omp_atv_default from\n+\t2 to -1.  Add omp_atv_serialized and define omp_atv_sequential using\n+\tit.  Remove __omp_alloctrait_value_max__.\n+\t* allocator.c (omp_init_allocator): Handle omp_atv_default for\n+\tomp_atk_alignment and omp_atk_pool_size.\n+\n 2020-07-03  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* oacc-mem.c (goacc_exit_data_internal): Revert always-copyfrom"}, {"sha": "fd543388f6d60d75327f44429575d284fb80f8fc", "filename": "libitm/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8ca9cb86aae8f3742736d3c0ee11d4d1761a48/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8ca9cb86aae8f3742736d3c0ee11d4d1761a48/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=3f8ca9cb86aae8f3742736d3c0ee11d4d1761a48", "patch": "@@ -1,3 +1,12 @@\n+2020-07-09  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n+\n+\t* config/aarch64/sjlj.S: Add BTI marking and related definitions,\n+\tand add BTI c to function entries.\n+\n+2020-07-09  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n+\n+\t* config/aarch64/sjlj.S: Add stack note if __FreeBSD__ is defined.\n+\n 2020-05-29  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR bootstrap/95413"}]}