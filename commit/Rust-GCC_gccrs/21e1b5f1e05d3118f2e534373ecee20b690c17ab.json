{"sha": "21e1b5f1e05d3118f2e534373ecee20b690c17ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFlMWI1ZjFlMDVkMzExOGYyZTUzNDM3M2VjZWUyMGI2OTBjMTdhYg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2001-09-25T14:59:36Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2001-09-25T14:59:36Z"}, "message": "SSE/MMX builtins bugfixes\n\nFrom-SVN: r45806", "tree": {"sha": "585c52b1c88a2fc3df2012d9fd2dc22c6311b653", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/585c52b1c88a2fc3df2012d9fd2dc22c6311b653"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21e1b5f1e05d3118f2e534373ecee20b690c17ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21e1b5f1e05d3118f2e534373ecee20b690c17ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21e1b5f1e05d3118f2e534373ecee20b690c17ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21e1b5f1e05d3118f2e534373ecee20b690c17ab/comments", "author": null, "committer": null, "parents": [{"sha": "eeb06b1bda88e2f16a75d75d8095753bdd3966c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeb06b1bda88e2f16a75d75d8095753bdd3966c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eeb06b1bda88e2f16a75d75d8095753bdd3966c0"}], "stats": {"total": 45, "additions": 30, "deletions": 15}, "files": [{"sha": "2f8878ed992458f0e693931cc01d740709c50e69", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21e1b5f1e05d3118f2e534373ecee20b690c17ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21e1b5f1e05d3118f2e534373ecee20b690c17ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=21e1b5f1e05d3118f2e534373ecee20b690c17ab", "patch": "@@ -10,6 +10,22 @@\n \t(bdesc_2srg): Likewise.\n \t(bdesc_1arg): Likewise.\n \n+\t* config/i386/i386.c (ix86_init_builtins): Correct return type \n+\tbuilding v4hi_ftype_v4hi_int_int tree node.\n+\t(ix86_expand_sse_comi): Fix typo swapping operands.\n+\tDon't swap comparision condition, it is already swapped.\n+\t(ix86_expand_sse_compare): Before swapping operands\n+\tmove operand 1 into new rtx and not the target rtx.\n+\tDon't swap comparison condition, it is already swapped.\n+\tAlways check whether we need to create a new TARGET.\n+\n+\t* config/i386/i386.md: (sse_comi) Fix typos.\n+\t(sse_ucomi): Likewise.\n+\t(cvtss2si): Fix operand 0 contraint.\n+\t(cvttss2si): Likewise.\n+\t(sse_unpckhps): Fix mode for operand 2.\n+\t(sse_unpcklps): Likewise.\n+\n 2001-09-25  Graham Stott  <grahams@redhat.com>\n \n \t* sibcall.c (skip_copy_to_return_value): Tighten return value"}, {"sha": "76370067b1c1e736e9d55028a765481cabe5152f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21e1b5f1e05d3118f2e534373ecee20b690c17ab/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21e1b5f1e05d3118f2e534373ecee20b690c17ab/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=21e1b5f1e05d3118f2e534373ecee20b690c17ab", "patch": "@@ -10416,7 +10416,7 @@ ix86_init_mmx_sse_builtins ()\n \t\t\t   tree_cons (NULL_TREE, integer_type_node,\n \t\t\t\t      endlink));\n   tree v4sf_ftype_v4sf_int\n-    = build_function_type (integer_type_node,\n+    = build_function_type (V4SF_type_node,\n \t\t\t   tree_cons (NULL_TREE, V4SF_type_node,\n \t\t\t\t      tree_cons (NULL_TREE, integer_type_node,\n \t\t\t\t\t\t endlink)));\n@@ -10915,15 +10915,15 @@ ix86_expand_sse_compare (d, arglist, target)\n      hardware.  */\n   if (d->flag)\n     {\n-      target = gen_reg_rtx (tmode);\n-      emit_move_insn (target, op1);\n+      rtx tmp = gen_reg_rtx (mode1);\n+      emit_move_insn (tmp, op1);\n       op1 = op0;\n-      op0 = target;\n-      comparison = swap_condition (comparison);\n+      op0 = tmp;\n     }\n-  else if (! target\n-\t   || GET_MODE (target) != tmode\n-\t   || ! (*insn_data[d->icode].operand[0].predicate) (target, tmode))\n+\n+  if (! target\n+      || GET_MODE (target) != tmode\n+      || ! (*insn_data[d->icode].operand[0].predicate) (target, tmode))\n     target = gen_reg_rtx (tmode);\n \n   if (! (*insn_data[d->icode].operand[1].predicate) (op0, mode0))\n@@ -10969,7 +10969,6 @@ ix86_expand_sse_comi (d, arglist, target)\n       rtx tmp = op1;\n       op1 = op0;\n       op0 = tmp;\n-      comparison = swap_condition (comparison);\n     }\n \n   target = gen_reg_rtx (SImode);"}, {"sha": "8021f39b33f2f0be624a5f9e65318efd19bab95c", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21e1b5f1e05d3118f2e534373ecee20b690c17ab/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21e1b5f1e05d3118f2e534373ecee20b690c17ab/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=21e1b5f1e05d3118f2e534373ecee20b690c17ab", "patch": "@@ -18239,7 +18239,7 @@\n \t\t\t  (match_operand:V4SF 1 \"register_operand\" \"x\")\n \t\t\t  (parallel [(const_int 0)]))]))]\n   \"TARGET_SSE\"\n-  \"comiss\\t{%2, %0|%0, %2}\"\n+  \"comiss\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sse\")])\n \n (define_insn \"sse_ucomi\"\n@@ -18252,7 +18252,7 @@\n \t\t\t  (match_operand:V4SF 1 \"register_operand\" \"x\")\n \t\t\t  (parallel [(const_int 0)]))]))]\n   \"TARGET_SSE\"\n-  \"ucomiss\\t{%2, %0|%0, %2}\"\n+  \"ucomiss\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sse\")])\n \n \n@@ -18266,7 +18266,7 @@\n \t\t\t\t     (const_int 0)\n \t\t\t\t     (const_int 3)\n \t\t\t\t     (const_int 1)]))\n-\t (vec_select:V8QI (match_operand:V8QI 2 \"register_operand\" \"x\")\n+\t (vec_select:V4SF (match_operand:V4SF 2 \"register_operand\" \"x\")\n \t\t\t  (parallel [(const_int 0)\n \t\t\t\t     (const_int 2)\n \t\t\t\t     (const_int 1)\n@@ -18284,7 +18284,7 @@\n \t\t\t\t     (const_int 2)\n \t\t\t\t     (const_int 1)\n \t\t\t\t     (const_int 3)]))\n-\t (vec_select:V8QI (match_operand:V8QI 2 \"register_operand\" \"x\")\n+\t (vec_select:V4SF (match_operand:V4SF 2 \"register_operand\" \"x\")\n \t\t\t  (parallel [(const_int 2)\n \t\t\t\t     (const_int 0)\n \t\t\t\t     (const_int 3)\n@@ -18377,15 +18377,15 @@\n   [(set_attr \"type\" \"sse\")])\n \n (define_insn \"cvtss2si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=y\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(vec_select:SI (fix:V4SI (match_operand:V4SF 1 \"register_operand\" \"xm\"))\n \t\t       (parallel [(const_int 0)])))]\n   \"TARGET_SSE\"\n   \"cvtss2si\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sse\")])\n \n (define_insn \"cvttss2si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=y\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(vec_select:SI (unspec:V4SI [(match_operand:V4SF 1 \"register_operand\" \"xm\")] 30)\n \t\t       (parallel [(const_int 0)])))]\n   \"TARGET_SSE\""}]}