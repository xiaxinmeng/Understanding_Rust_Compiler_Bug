{"sha": "5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQxYzhlNzdjZmNjMDA3YzIxYmZkZjIwNzdhZmZmY2I3MjBhNDhiMg==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2011-11-02T15:28:43Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2011-11-02T15:28:43Z"}, "message": "Move gthr to toplevel libgcc\n\n\tgcc:\n\t* gthr-single.h, gthr.h: Move to ../libgcc.\n\t* gthr-aix.h: Move to ../libgcc/config/rs6000.\n\t* gthr-dce.h: Move to ../libgcc/config/pa.\n\t* gthr-lynx.h: Move to ../libgcc/config.\n\t* gthr-mipssde.h: Move to ../libgcc/config/mips.\n\t* gthr-posix.h: Move to ../libgcc/config.\n\t* gthr-rtems.h: Likewise.\n\t* gthr-tpf.h: Move to ../libgcc/config/s390.\n\t* gthr-vxworks.h: Move to ../libgcc/config.\n\t* gthr-win32.h: Move to ../libgcc/config/i386.\n\t* configure.ac (gthread_flags): Remove\n\t(gthr-default.h): Don't create.\n\t(thread_file): Don't substitute.\n\t* configure: Regenerate.\n\t* Makefile.in (GCC_THREAD_FILE): Remove.\n\t(GTHREAD_FLAGS): Remove.\n\t(libgcc.mvars): Remove GTHREAD_FLAGS.\n\t* config/t-vxworks (EXTRA_HEADERS): Remove.\n\n\tgcc/po:\n\t* EXCLUDES (gthr-aix.h, gthr-dce.h, gthr-posix.c, gthr-posix.h)\n\t(gthr-rtems.h, gthr-single.h, gthr-solaris.h, gthr-vxworks.h)\n\t(gthr-win32.h, gthr.h): Remove.\n\n\tlibgcc:\n\t* gthr-single.h, gthr.h: New files.\n\t* config/gthr-lynx.h, config/gthr-posix.h., config/gthr-rtems.h,\n\tconfig/gthr-vxworks.h, config/i386/gthr-win32.h,\n\tconfig/mips/gthr-mipssde.h, config/pa/gthr-dce.h,\n\tconfig/rs6000/gthr-aix.h, config/s390/gthr-tpf.h: New files.\n\t* config/i386/gthr-win32.c: Include \"gthr-win32.h\".\n\t* configure.ac (thread_header): New variable.\n\tSet it depending on target_thread_file.\n\t(gthr-default.h): Link from $thread_header.\n\t* configure: Regenerate.\n\t* Makefile.in (LIBGCC2_CFLAGS): Remove $(GTHREAD_FLAGS).\n\n\tlibgfortran:\n\t* Makefile.am (AM_CPPFLAGS): Add\n\t-I$(srcdir)/$(MULTISRCTOP)../libgcc, -I$(MULTIBUILDTOP)../libgcc.\n\t* Makefile.in: Regenerate.\n\t* acinclude.m4 (LIBGFOR_CHECK_GTHR_DEFAULT): Remove.\n\t* configure.ac (LIBGFOR_CHECK_GTHR_DEFAULT): Likewise.\n\t* configure: Regenerate.\n\t* config.h.in: Regenerate.\n\n\tlibobjc:\n\t* Makefile.in (INCLUDES): Add -I$(MULTIBUILDTOP)../libgcc.\n\t* configure.ac (target_thread_file, HAVE_GTHR_DEFAULT): Remove.\n\t* configure: Regenerate.\n\t* config.h.in: Regenerate.\n\n\tlibstdc++-v3:\n\t* acinclude.m4 (GLIBCXX_CONFIGURE): Determine and substitute\n\ttoplevel_builddir.\n\t(GLIBCXX_ENABLE_THREADS): Remove glibcxx_thread_h,\n\tHAVE_GTHR_DEFAULT, enable_thread.\n\t(GLIBCXX_CHECK_GTHREADS): Reflect gthr move to libgcc.\n\t* include/Makefile.am (thread_host_headers): Remove\n\t${host_builddir}/gthr-tpf.h.\n\t(${host_builddir}/gthr.h): Reflect gthr move to libgcc.\n\tUse $<.\n\t(${host_builddir}/gthr-single.h): Likewise.\n\t(${host_builddir}/gthr-posix.h): Likewise.\n\t(${host_builddir}/gthr-tpf.h): Remove.\n\t(${host_builddir}/gthr-default.h): Likewise.\n\t* configure, config.h.in: Regenerate.\n\t* Makefile.in, doc/Makefile.in, include/Makefile.in,\n\tlibsupc++/Makefile.in, po/Makefile.in, python/Makefile.in,\n\tsrc/Makefile.intestsuite/Makefile.in: Regenerate.\n\nFrom-SVN: r180776", "tree": {"sha": "cf3984b6d1138277f5083eed6653ca512143e59c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf3984b6d1138277f5083eed6653ca512143e59c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "852b75ed97493f2742b9747d08129eb5f255735c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/852b75ed97493f2742b9747d08129eb5f255735c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/852b75ed97493f2742b9747d08129eb5f255735c"}], "stats": {"total": 452, "additions": 192, "deletions": 260}, "files": [{"sha": "817abbde2143a808fbb7e782f4c145d8fbf33e79", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -1,3 +1,24 @@\n+2011-11-02  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* gthr-single.h, gthr.h: Move to ../libgcc.\n+\t* gthr-aix.h: Move to ../libgcc/config/rs6000.\n+\t* gthr-dce.h: Move to ../libgcc/config/pa.\n+\t* gthr-lynx.h: Move to ../libgcc/config.\n+\t* gthr-mipssde.h: Move to ../libgcc/config/mips.\n+\t* gthr-posix.h: Move to ../libgcc/config.\n+\t* gthr-rtems.h: Likewise.\n+\t* gthr-tpf.h: Move to ../libgcc/config/s390.\n+\t* gthr-vxworks.h: Move to ../libgcc/config.\n+\t* gthr-win32.h: Move to ../libgcc/config/i386.\n+\t* configure.ac (gthread_flags): Remove\n+\t(gthr-default.h): Don't create.\n+\t(thread_file): Don't substitute.\n+\t* configure: Regenerate.\n+\t* Makefile.in (GCC_THREAD_FILE): Remove.\n+\t(GTHREAD_FLAGS): Remove.\n+\t(libgcc.mvars): Remove GTHREAD_FLAGS.\n+\t* config/t-vxworks (EXTRA_HEADERS): Remove.\n+\n 2011-11-02  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \t    Paolo Bonzini  <bonzini@gnu.org>\n "}, {"sha": "229e8c10fce46aac33c831a364cb56c12c1fc54c", "filename": "gcc/Makefile.in", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -532,9 +532,7 @@ lang_opt_files=@lang_opt_files@ $(srcdir)/c-family/c.opt $(srcdir)/common.opt\n lang_specs_files=@lang_specs_files@\n lang_tree_files=@lang_tree_files@\n target_cpu_default=@target_cpu_default@\n-GCC_THREAD_FILE=@thread_file@\n OBJC_BOEHM_GC=@objc_boehm_gc@\n-GTHREAD_FLAGS=@gthread_flags@\n extra_modes_file=@extra_modes_file@\n extra_opt_files=@extra_opt_files@\n host_hook_obj=@out_host_hook_obj@\n@@ -1808,7 +1806,6 @@ libgcc-support: libgcc.mvars stmp-int-hdrs $(TCONFIG_H) \\\n libgcc.mvars: config.status Makefile specs xgcc$(exeext)\n \t: > tmp-libgcc.mvars\n \techo GCC_CFLAGS = '$(GCC_CFLAGS)' >> tmp-libgcc.mvars\n-\techo GTHREAD_FLAGS = '$(GTHREAD_FLAGS)' >> tmp-libgcc.mvars\n \techo INHIBIT_LIBC_CFLAGS = '$(INHIBIT_LIBC_CFLAGS)' >> tmp-libgcc.mvars\n \techo TARGET_SYSTEM_ROOT = '$(TARGET_SYSTEM_ROOT)' >> tmp-libgcc.mvars\n "}, {"sha": "61d6e710acadbc5e58a119f7d8f280fc5822a175", "filename": "gcc/config/t-vxworks", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/gcc%2Fconfig%2Ft-vxworks", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/gcc%2Fconfig%2Ft-vxworks", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-vxworks?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -17,10 +17,6 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-# Some runtime modules need these.  Can't set extra_headers in config.gcc\n-# because the paths are always made absolute to the cpu config dir.\n-EXTRA_HEADERS += $(srcdir)/gthr-vxworks.h gthr-default.h\n-\n # Both the kernel and RTP headers provide limits.h.\n LIMITS_H_TEST = true\n "}, {"sha": "3b0b39b484aebc2f36dee7c224027a6b44745e4f", "filename": "gcc/configure", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -621,7 +621,6 @@ tm_p_file_list\n tm_defines\n tm_include_list\n tm_file_list\n-thread_file\n common_out_object_file\n common_out_file\n out_object_file\n@@ -724,7 +723,6 @@ LIBINTL\n USE_NLS\n extra_opt_files\n extra_modes_file\n-gthread_flags\n NATIVE_SYSTEM_HEADER_DIR\n objext\n manext\n@@ -11353,19 +11351,6 @@ if test x${thread_file} = x; then\n   thread_file=${target_thread_file}\n fi\n \n-# Make gthr-default.h if we have a thread file.\n-gthread_flags=\n-if test $thread_file != single; then\n-  echo \"#include \\\"gthr-${thread_file}.h\\\"\" > gthr-default.h-t\n-  if diff gthr-default.h-t gthr-default.h 2>/dev/null; then\n-    rm -f gthr-default.h-t\n-  else\n-    mv -f gthr-default.h-t gthr-default.h\n-  fi\n-  gthread_flags=-DHAVE_GTHR_DEFAULT\n-fi\n-\n-\n # --------\n # UNSORTED\n # --------\n@@ -18059,7 +18044,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18062 \"configure\"\n+#line 18047 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -18165,7 +18150,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18168 \"configure\"\n+#line 18153 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -27005,7 +26990,6 @@ fi\n \n \n \n-\n \n \n # Echo link setup."}, {"sha": "dd6cf2f17f3ecd2946eb891e5b498378feb754de", "filename": "gcc/configure.ac", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -1416,19 +1416,6 @@ if test x${thread_file} = x; then\n   thread_file=${target_thread_file}\n fi\n \n-# Make gthr-default.h if we have a thread file.\n-gthread_flags=\n-if test $thread_file != single; then\n-  echo \"#include \\\"gthr-${thread_file}.h\\\"\" > gthr-default.h-t\n-  if diff gthr-default.h-t gthr-default.h 2>/dev/null; then\n-    rm -f gthr-default.h-t\n-  else\n-    mv -f gthr-default.h-t gthr-default.h\n-  fi\n-  gthread_flags=-DHAVE_GTHR_DEFAULT\n-fi\n-AC_SUBST(gthread_flags)\n-\n # --------\n # UNSORTED\n # --------\n@@ -4961,7 +4948,6 @@ AC_SUBST(out_file)\n AC_SUBST(out_object_file)\n AC_SUBST(common_out_file)\n AC_SUBST(common_out_object_file)\n-AC_SUBST(thread_file)\n AC_SUBST(tm_file_list)\n AC_SUBST(tm_include_list)\n AC_SUBST(tm_defines)"}, {"sha": "c7164125d0ccf501243adc6e58b44084a602e1b2", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -1,3 +1,9 @@\n+2011-11-02  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* EXCLUDES (gthr-aix.h, gthr-dce.h, gthr-posix.c, gthr-posix.h)\n+\t(gthr-rtems.h, gthr-single.h, gthr-solaris.h, gthr-vxworks.h)\n+\t(gthr-win32.h, gthr.h): Remove.\n+\n 2011-11-02  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* EXCLUDES (config/vxlib.c, gbl-ctors.h, libgcc2.c, libgcc2.h)"}, {"sha": "e04b923936305c7367a9c5c5a00422b30ac7faf2", "filename": "gcc/po/EXCLUDES", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/gcc%2Fpo%2FEXCLUDES", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/gcc%2Fpo%2FEXCLUDES", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FEXCLUDES?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -24,16 +24,6 @@\n #   These files are part of libgcc, or target headers provided by gcc.\n gcov-io.h\n gcov-iov.c\n-gthr-aix.h\n-gthr-dce.h\n-gthr-posix.c\n-gthr-posix.h\n-gthr-rtems.h\n-gthr-single.h\n-gthr-solaris.h\n-gthr-vxworks.h\n-gthr-win32.h\n-gthr.h\n limitx.h\n limity.h\n "}, {"sha": "1bbe29afd05ce3c37bea16b8cb1982ec421768ce", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -1,3 +1,17 @@\n+2011-11-02  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* gthr-single.h, gthr.h: New files.\n+\t* config/gthr-lynx.h, config/gthr-posix.h., config/gthr-rtems.h,\n+\tconfig/gthr-vxworks.h, config/i386/gthr-win32.h,\n+\tconfig/mips/gthr-mipssde.h, config/pa/gthr-dce.h,\n+\tconfig/rs6000/gthr-aix.h, config/s390/gthr-tpf.h: New files.\n+\t* config/i386/gthr-win32.c: Include \"gthr-win32.h\".\n+\t* configure.ac (thread_header): New variable.\n+\tSet it depending on target_thread_file.\n+\t(gthr-default.h): Link from $thread_header.\n+\t* configure: Regenerate.\n+\t* Makefile.in (LIBGCC2_CFLAGS): Remove $(GTHREAD_FLAGS).\n+\n 2011-11-02  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* configure.ac (tm_file_): New variable."}, {"sha": "8f0c02ff3ec06bd8a2b7ff968d4c70da91035204", "filename": "libgcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FMakefile.in?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -223,8 +223,7 @@ endif\n #\n LIBGCC2_DEBUG_CFLAGS = -g\n LIBGCC2_CFLAGS = -O2 $(LIBGCC2_INCLUDES) $(GCC_CFLAGS) $(HOST_LIBGCC2_CFLAGS) \\\n-\t\t $(LIBGCC2_DEBUG_CFLAGS) $(GTHREAD_FLAGS) \\\n-\t\t -DIN_LIBGCC2 \\\n+\t\t $(LIBGCC2_DEBUG_CFLAGS) -DIN_LIBGCC2 \\\n \t\t -fbuilding-libgcc -fno-stack-protector \\\n \t\t $(INHIBIT_LIBC_CFLAGS)\n "}, {"sha": "c98c2e6693e6deede1c10ef14b3cb6c37ffac478", "filename": "libgcc/config/gthr-lynx.h", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgcc%2Fconfig%2Fgthr-lynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgcc%2Fconfig%2Fgthr-lynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fgthr-lynx.h?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -1,7 +1,7 @@\n /* Threads compatibility routines for libgcc2 and libobjc for\n    LynxOS.  */\n /* Compile this one with gcc.  */\n-/* Copyright (C) 2004, 2008, 2009 Free Software Foundation, Inc.\n+/* Copyright (C) 2004, 2008, 2009, 2011 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -52,7 +52,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #undef  GTHREAD_USE_WEAK\n #define GTHREAD_USE_WEAK 0\n \n-#include \"gthr-posix.h\"\n+#include \"config/gthr-posix.h\"\n \n #else\n #include \"gthr-single.h\"", "previous_filename": "gcc/gthr-lynx.h"}, {"sha": "46054f6a7c212a054879952932d8e598da686674", "filename": "libgcc/config/gthr-posix.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgcc%2Fconfig%2Fgthr-posix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgcc%2Fconfig%2Fgthr-posix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fgthr-posix.h?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "previous_filename": "gcc/gthr-posix.h"}, {"sha": "c5bd52292cf0a8f63714d2da633fe19a3aec8aec", "filename": "libgcc/config/gthr-rtems.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgcc%2Fconfig%2Fgthr-rtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgcc%2Fconfig%2Fgthr-rtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fgthr-rtems.h?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "previous_filename": "gcc/gthr-rtems.h"}, {"sha": "2346b5286608df4db98578c7f04a7086e10244db", "filename": "libgcc/config/gthr-vxworks.h", "status": "renamed", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgcc%2Fconfig%2Fgthr-vxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgcc%2Fconfig%2Fgthr-vxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fgthr-vxworks.h?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -1,6 +1,7 @@\n /* Threads compatibility routines for libgcc2 and libobjc for VxWorks.  */\n /* Compile this one with gcc.  */\n-/* Copyright (C) 1997, 1999, 2000, 2008, 2009 Free Software Foundation, Inc.\n+/* Copyright (C) 1997, 1999, 2000, 2008, 2009, 2011\n+   Free Software Foundation, Inc.\n    Contributed by Mike Stump <mrs@wrs.com>.\n \n This file is part of GCC.\n@@ -30,7 +31,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #ifdef _LIBOBJC\n \n /* libobjc requires the optional pthreads component.  */\n-#include \"gthr-posix.h\"\n+#include \"config/gthr-posix.h\"\n \n #else\n #ifdef __cplusplus", "previous_filename": "gcc/gthr-vxworks.h"}, {"sha": "ab1b69fd4cf411bec7170966a66631179703255a", "filename": "libgcc/config/i386/gthr-win32.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgcc%2Fconfig%2Fi386%2Fgthr-win32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgcc%2Fconfig%2Fi386%2Fgthr-win32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fgthr-win32.c?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -1,7 +1,8 @@\n /* Implementation of W32-specific threads compatibility routines for\n    libgcc2.  */\n \n-/* Copyright (C) 1999, 2000, 2002, 2004, 2008, 2009 Free Software Foundation, Inc.\n+/* Copyright (C) 1999, 2000, 2002, 2004, 2008, 2009, 2011\n+   Free Software Foundation, Inc.\n    Contributed by Mumit Khan <khan@xraylith.wisc.edu>.\n    Modified and moved to separate file by Danny Smith\n    <dannysmith@users.sourceforge.net>.\n@@ -33,7 +34,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #endif\n #undef  __GTHREAD_I486_INLINE_LOCK_PRIMITIVES\n #define __GTHREAD_I486_INLINE_LOCK_PRIMITIVES\n-#include <gthr-win32.h>\n+#include \"gthr-win32.h\"\n \n /* Windows32 threads specific definitions. The windows32 threading model\n    does not map well into pthread-inspired gcc's threading model, and so "}, {"sha": "53f8396cc8135ae24e2be3eaa69647a9d5fc3a12", "filename": "libgcc/config/i386/gthr-win32.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgcc%2Fconfig%2Fi386%2Fgthr-win32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgcc%2Fconfig%2Fi386%2Fgthr-win32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fgthr-win32.h?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "previous_filename": "gcc/gthr-win32.h"}, {"sha": "34f9b6cf54b5c2d089827ccc91f45e1a3fb0f00c", "filename": "libgcc/config/mips/gthr-mipssde.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgcc%2Fconfig%2Fmips%2Fgthr-mipssde.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgcc%2Fconfig%2Fmips%2Fgthr-mipssde.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmips%2Fgthr-mipssde.h?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "previous_filename": "gcc/gthr-mipssde.h"}, {"sha": "d32155a9352b581a9ef67ef487400aa3cd2d4deb", "filename": "libgcc/config/pa/gthr-dce.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgcc%2Fconfig%2Fpa%2Fgthr-dce.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgcc%2Fconfig%2Fpa%2Fgthr-dce.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fpa%2Fgthr-dce.h?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "previous_filename": "gcc/gthr-dce.h"}, {"sha": "342f09187f031939a26c6e45a6adfa8773a1d4d9", "filename": "libgcc/config/rs6000/gthr-aix.h", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgcc%2Fconfig%2Frs6000%2Fgthr-aix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgcc%2Fconfig%2Frs6000%2Fgthr-aix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Fgthr-aix.h?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -1,6 +1,6 @@\n /* Threads compatibility routines for libgcc2 and libobjc.  */\n /* Compile this one with gcc.  */\n-/* Copyright (C) 2000, 2009 Free Software Foundation, Inc.\n+/* Copyright (C) 2000, 2009, 2011 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -27,7 +27,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define GCC_GTHR_AIX_H\n \n #ifdef _THREAD_SAFE\n-#include \"gthr-posix.h\"\n+#include \"config/gthr-posix.h\"\n #else\n #include \"gthr-single.h\"\n #endif", "previous_filename": "gcc/gthr-aix.h"}, {"sha": "fb23e91cfcd4d37f5a18eb2c1f8514a392b95676", "filename": "libgcc/config/s390/gthr-tpf.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgcc%2Fconfig%2Fs390%2Fgthr-tpf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgcc%2Fconfig%2Fs390%2Fgthr-tpf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fs390%2Fgthr-tpf.h?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "previous_filename": "gcc/gthr-tpf.h"}, {"sha": "0d91645ed67bc660de3122bc7fee7ada07d14983", "filename": "libgcc/configure", "status": "modified", "additions": 34, "deletions": 18, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -2273,7 +2273,7 @@ case $host_os in *\\ *) host_os=`echo \"$host_os\" | sed 's/ /-/g'`;; esac\n \n \n \n-  # FIXME: Do we need something for CFLAGS below?\n+\n \n case \"${host}\" in\n     # PIC is the default on some targets or must not be used.\n@@ -2288,24 +2288,23 @@ case \"${host}\" in\n     hppa*64*-*-hpux*)\n \t# PIC is the default for 64-bit PA HP-UX.\n \t;;\n-    i3456786-*-cygwin* | i3456786-*-mingw* | x86_64-*-mingw*)\n+    i[34567]86-*-cygwin* | i[34567]86-*-mingw* | x86_64-*-mingw*)\n \t;;\n-    i3456786-*-interix3*)\n+    i[34567]86-*-interix3*)\n \t# Interix 3.x gcc -fpic/-fPIC options generate broken code.\n \t# Instead, we relocate shared libraries at runtime.\n \t;;\n-    i3456786-*-nto-qnx*)\n+    i[34567]86-*-nto-qnx*)\n \t# QNX uses GNU C++, but need to define -shared option too, otherwise\n \t# it will coredump.\n \tPICFLAG='-fPIC -shared'\n \t;;\n-    i3456786-pc-msdosdjgpp*)\n+    i[34567]86-pc-msdosdjgpp*)\n \t# DJGPP does not support shared libraries at all.\n \t;;\n     ia64*-*-hpux*)\n \t# On IA64 HP-UX, PIC is the default but the pic flag\n \t# sets the default TLS model and affects inlining.\n-\t# FIXME: Still in gcc 4.7?\n \tPICFLAG=-fPIC\n \t;;\n     mips-sgi-irix6*)\n@@ -2317,7 +2316,7 @@ case \"${host}\" in\n \n     # Some targets support both -fPIC and -fpic, but prefer the latter.\n     # FIXME: Why?\n-    i3456786-*-* | x86_64-*-*)\n+    i[34567]86-*-* | x86_64-*-*)\n \tPICFLAG=-fpic\n \t;;\n     m68k-*-*)\n@@ -2327,30 +2326,30 @@ case \"${host}\" in\n \tPICFLAG=-fpic\n \t;;\n     # FIXME: Override -fPIC default in libgcc only?\n-    sh-*-linux* | sh2346lbe*-*-linux*)\n+    sh-*-linux* | sh[2346lbe]*-*-linux*)\n \tPICFLAG=-fpic\n \t;;\n     # FIXME: Simplify to sh*-*-netbsd*?\n     sh-*-netbsdelf* | shl*-*-netbsdelf* | sh5-*-netbsd* | sh5l*-*-netbsd* | \\\n       sh64-*-netbsd* | sh64l*-*-netbsd*)\n \tPICFLAG=-fpic\n \t;;\n-    sparc*-*-*)\n-\t# FIXME: This could be done everywhere -fpic and -fPIC differ.\n-\tcase \"${CFLAGS}\" in\n-\t    *-fpic*)\n-\t\tPICFLAG=-fpic\n-\t\t;;\n-\t    *)\n-\t\tPICFLAG=-fPIC\n-\t\t;;\n-\tesac ;;\n     # Default to -fPIC unless specified otherwise.\n     *)\n \tPICFLAG=-fPIC\n \t;;\n esac\n \n+# If the user explicitly uses -fpic/-fPIC, keep that.\n+case \"${CFLAGS}\" in\n+    *-fpic*)\n+\tPICFLAG=-fpic\n+\t;;\n+    *-fPIC*)\n+\tPICFLAG=-fPIC\n+\t;;\n+esac\n+\n \n \n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for --enable-version-specific-runtime-libs\" >&5\n@@ -4797,6 +4796,20 @@ tm_file=\"${tm_file_}\"\n \n \n \n+# Map from thread model to thread header.\n+case $target_thread_file in\n+    aix)\tthread_header=config/rs6000/gthr-aix.h ;;\n+    dce)\tthread_header=config/pa/gthr-dce.h ;;\n+    lynx)\tthread_header=config/gthr-lynx.h ;;\n+    mipssde)\tthread_header=config/mips/gthr-mipssde.h ;;\n+    posix)\tthread_header=config/gthr-posix.h ;;\n+    rtems)\tthread_header=config/gthr-rtems.h ;;\n+    single)\tthread_header=gthr-single.h ;;\n+    tpf)\tthread_header=config/s390/gthr-tpf.h ;;\n+    vxworks)\tthread_header=config/gthr-vxworks.h ;;\n+    win32)\tthread_header=config/i386/gthr-win32.h ;;\n+esac\n+\n # Substitute configuration variables\n \n \n@@ -4809,6 +4822,8 @@ ac_config_links=\"$ac_config_links md-unwind-support.h:config/$md_unwind_header\"\n \n ac_config_links=\"$ac_config_links sfp-machine.h:config/$sfp_machine_header\"\n \n+ac_config_links=\"$ac_config_links gthr-default.h:$thread_header\"\n+\n \n # We need multilib support.\n ac_config_files=\"$ac_config_files Makefile\"\n@@ -5538,6 +5553,7 @@ do\n     \"unwind.h\") CONFIG_LINKS=\"$CONFIG_LINKS unwind.h:$unwind_header\" ;;\n     \"md-unwind-support.h\") CONFIG_LINKS=\"$CONFIG_LINKS md-unwind-support.h:config/$md_unwind_header\" ;;\n     \"sfp-machine.h\") CONFIG_LINKS=\"$CONFIG_LINKS sfp-machine.h:config/$sfp_machine_header\" ;;\n+    \"gthr-default.h\") CONFIG_LINKS=\"$CONFIG_LINKS gthr-default.h:$thread_header\" ;;\n     \"Makefile\") CONFIG_FILES=\"$CONFIG_FILES Makefile\" ;;\n     \"default\") CONFIG_COMMANDS=\"$CONFIG_COMMANDS default\" ;;\n "}, {"sha": "a505257ac2334a6c9f6cf620cf2cf65767e27f37", "filename": "libgcc/configure.ac", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure.ac?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -364,6 +364,20 @@ tm_file=\"${tm_file_}\"\n AC_SUBST(tm_file)\n AC_SUBST(tm_defines)\n \n+# Map from thread model to thread header.\n+case $target_thread_file in\n+    aix)\tthread_header=config/rs6000/gthr-aix.h ;;\n+    dce)\tthread_header=config/pa/gthr-dce.h ;;\n+    lynx)\tthread_header=config/gthr-lynx.h ;;\n+    mipssde)\tthread_header=config/mips/gthr-mipssde.h ;;\n+    posix)\tthread_header=config/gthr-posix.h ;;\n+    rtems)\tthread_header=config/gthr-rtems.h ;;\n+    single)\tthread_header=gthr-single.h ;;\n+    tpf)\tthread_header=config/s390/gthr-tpf.h ;;\n+    vxworks)\tthread_header=config/gthr-vxworks.h ;;\n+    win32)\tthread_header=config/i386/gthr-win32.h ;;\n+esac\n+\n # Substitute configuration variables\n AC_SUBST(cpu_type)\n AC_SUBST(extra_parts)\n@@ -372,6 +386,7 @@ AC_CONFIG_LINKS([enable-execute-stack.c:$enable_execute_stack])\n AC_CONFIG_LINKS([unwind.h:$unwind_header])\n AC_CONFIG_LINKS([md-unwind-support.h:config/$md_unwind_header])\n AC_CONFIG_LINKS([sfp-machine.h:config/$sfp_machine_header])\n+AC_CONFIG_LINKS([gthr-default.h:$thread_header])\n \n # We need multilib support.\n AC_CONFIG_FILES([Makefile])"}, {"sha": "357528ad1f16d4aa54518b12498d249ea178b252", "filename": "libgcc/gthr-single.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgcc%2Fgthr-single.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgcc%2Fgthr-single.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fgthr-single.h?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "previous_filename": "gcc/gthr-single.h"}, {"sha": "607c26eb563f5353886f393586e87896b89115eb", "filename": "libgcc/gthr.h", "status": "renamed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgcc%2Fgthr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgcc%2Fgthr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fgthr.h?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -132,35 +132,15 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n                                              __gthread_recursive_mutex_t *mutex,\n                                              const __gthread_time_t *abs_time)\n \n-   Currently supported threads packages are\n-     TPF threads with -D__tpf__\n-     POSIX/Unix98 threads with -D_PTHREADS\n-     DCE threads with -D_DCE_THREADS\n-\n */\n \n-/* Check first for thread specific defines.  */\n-#if defined (__tpf__)\n-#include \"gthr-tpf.h\"\n-#elif _PTHREADS\n-#include \"gthr-posix.h\"\n-#elif _DCE_THREADS\n-#include \"gthr-dce.h\"\n-\n-/* Include GTHREAD_FILE if one is defined.  */\n-#elif defined(HAVE_GTHR_DEFAULT)\n #if SUPPORTS_WEAK\n #ifndef GTHREAD_USE_WEAK\n #define GTHREAD_USE_WEAK 1\n #endif\n #endif\n #include \"gthr-default.h\"\n \n-/* Fallback to single thread definitions.  */\n-#else\n-#include \"gthr-single.h\"\n-#endif\n-\n #ifndef HIDE_EXPORTS\n #pragma GCC visibility pop\n #endif", "previous_filename": "gcc/gthr.h"}, {"sha": "264f196d9df454aafca1bb7f85fdb5c1ce964b62", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -1,3 +1,13 @@\n+2011-11-02  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* Makefile.am (AM_CPPFLAGS): Add\n+\t-I$(srcdir)/$(MULTISRCTOP)../libgcc, -I$(MULTIBUILDTOP)../libgcc.\n+\t* Makefile.in: Regenerate.\n+\t* acinclude.m4 (LIBGFOR_CHECK_GTHR_DEFAULT): Remove.\n+\t* configure.ac (LIBGFOR_CHECK_GTHR_DEFAULT): Likewise.\n+\t* configure: Regenerate.\n+\t* config.h.in: Regenerate.\n+\n 2011-11-01  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \t* io/io.h (next_available_newunit): Remove prototype."}, {"sha": "350b71610590dcd1c61a49b251e858b8d57d81b9", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -56,7 +56,9 @@ libcaf_single_la_LINK = $(LINK) $(libcaf_single_la_LDFLAGS)\n ## use -iquote\n AM_CPPFLAGS = -iquote$(srcdir)/io -I$(srcdir)/$(MULTISRCTOP)../gcc \\\n \t      -I$(srcdir)/$(MULTISRCTOP)../gcc/config $(LIBQUADINCLUDE) \\\n-\t      -I$(MULTIBUILDTOP)../../$(host_subdir)/gcc\n+\t      -I$(MULTIBUILDTOP)../../$(host_subdir)/gcc \\\n+\t      -I$(srcdir)/$(MULTISRCTOP)../libgcc \\\n+\t      -I$(MULTIBUILDTOP)../libgcc\n \n # Fortran rules for complex multiplication and division\n AM_CFLAGS += -fcx-fortran-rules"}, {"sha": "80a6c60968de5f19498158d9f0e3cf8451c0eda2", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -506,7 +506,9 @@ libcaf_single_la_DEPENDENCIES = caf/libcaf.h\n libcaf_single_la_LINK = $(LINK) $(libcaf_single_la_LDFLAGS)\n AM_CPPFLAGS = -iquote$(srcdir)/io -I$(srcdir)/$(MULTISRCTOP)../gcc \\\n \t      -I$(srcdir)/$(MULTISRCTOP)../gcc/config $(LIBQUADINCLUDE) \\\n-\t      -I$(MULTIBUILDTOP)../../$(host_subdir)/gcc\n+\t      -I$(MULTIBUILDTOP)../../$(host_subdir)/gcc \\\n+\t      -I$(srcdir)/$(MULTISRCTOP)../libgcc \\\n+\t      -I$(MULTIBUILDTOP)../libgcc\n \n gfor_io_src = \\\n io/close.c \\"}, {"sha": "b6cb40430afe0b978a2163a1d4aeb4921ef2ee98", "filename": "libgfortran/acinclude.m4", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgfortran%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgfortran%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Facinclude.m4?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -83,17 +83,6 @@ if (foovar > 10) return __sync_add_and_fetch (&foovar, -1);]])],\n \t      [Define to 1 if the target supports __sync_fetch_and_add])\n   fi])\n \n-dnl Check if threads are supported.\n-AC_DEFUN([LIBGFOR_CHECK_GTHR_DEFAULT], [\n-  AC_CACHE_CHECK([configured target thread model],\n-\t\t libgfor_cv_target_thread_file, [\n-libgfor_cv_target_thread_file=`$CC -v 2>&1 | sed -n 's/^Thread model: //p'`])\n-\n-  if test $libgfor_cv_target_thread_file != single; then\n-    AC_DEFINE(HAVE_GTHR_DEFAULT, 1,\n-\t      [Define if the compiler has a thread header that is non single.])\n-  fi])\n-\n dnl Check for pragma weak.\n AC_DEFUN([LIBGFOR_GTHREAD_WEAK], [\n   AC_CACHE_CHECK([whether pragma weak works],"}, {"sha": "708ec7cd02dd55f9032e4628cdba4556e887efde", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -483,9 +483,6 @@\n /* Define to 1 if you have the `gmtime_r' function. */\n #undef HAVE_GMTIME_R\n \n-/* Define if the compiler has a thread header that is non single. */\n-#undef HAVE_GTHR_DEFAULT\n-\n /* libm includes hypot */\n #undef HAVE_HYPOT\n "}, {"sha": "3a1174a1237ac7f8917e4e4b14b27776ce9d74c4", "filename": "libgfortran/configure", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -25704,25 +25704,6 @@ $as_echo \"#define HAVE_SYNC_FETCH_AND_ADD 1\" >>confdefs.h\n \n   fi\n \n-# Check out thread support.\n-\n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking configured target thread model\" >&5\n-$as_echo_n \"checking configured target thread model... \" >&6; }\n-if test \"${libgfor_cv_target_thread_file+set}\" = set; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-\n-libgfor_cv_target_thread_file=`$CC -v 2>&1 | sed -n 's/^Thread model: //p'`\n-fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgfor_cv_target_thread_file\" >&5\n-$as_echo \"$libgfor_cv_target_thread_file\" >&6; }\n-\n-  if test $libgfor_cv_target_thread_file != single; then\n-\n-$as_echo \"#define HAVE_GTHR_DEFAULT 1\" >>confdefs.h\n-\n-  fi\n-\n # Check out #pragma weak.\n \n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether pragma weak works\" >&5"}, {"sha": "447ea9df998e4b073ea6e92233cc11c2cfcb614e", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -550,9 +550,6 @@ LIBGFOR_CHECK_ATTRIBUTE_ALIAS\n # Check out sync builtins support.\n LIBGFOR_CHECK_SYNC_FETCH_AND_ADD\n \n-# Check out thread support.\n-LIBGFOR_CHECK_GTHR_DEFAULT\n-\n # Check out #pragma weak.\n LIBGFOR_GTHREAD_WEAK\n "}, {"sha": "474849480e012d6d733015fdbff24e0c34b0fc84", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -1,3 +1,10 @@\n+2011-11-02  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* Makefile.in (INCLUDES): Add -I$(MULTIBUILDTOP)../libgcc.\n+\t* configure.ac (target_thread_file, HAVE_GTHR_DEFAULT): Remove.\n+\t* configure: Regenerate.\n+\t* config.h.in: Regenerate.\n+\n 2011-10-17  Paul Brook  <paul@codesourcery.com>\n \t    Matthias Klose  <doko@ubuntu.com>\n "}, {"sha": "1427bac43b27437d5501f1a880dd7877f10188f3", "filename": "libobjc/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libobjc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libobjc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FMakefile.in?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -102,6 +102,7 @@ INCLUDES = -I$(srcdir)/$(MULTISRCTOP)../gcc \\\n   -I$(srcdir)/$(MULTISRCTOP)../gcc/config \\\n   -I$(MULTIBUILDTOP)../../$(host_subdir)/gcc \\\n   -I$(srcdir)/$(MULTISRCTOP)../libgcc \\\n+  -I$(MULTIBUILDTOP)../libgcc \\\n   -I$(srcdir)/$(MULTISRCTOP)../include \\\n   $(OBJC_BOEHM_GC_INCLUDES)\n "}, {"sha": "c055e7c19093483943b3bc0105fa33ace387800e", "filename": "libobjc/config.h.in", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libobjc%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libobjc%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fconfig.h.in?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -6,9 +6,6 @@\n /* Define to 1 if you have the <dlfcn.h> header file. */\n #undef HAVE_DLFCN_H\n \n-/* Define if the compiler has a thread header that is non single. */\n-#undef HAVE_GTHR_DEFAULT\n-\n /* Define to 1 if you have the <inttypes.h> header file. */\n #undef HAVE_INTTYPES_H\n "}, {"sha": "59e3d98a7a5bafb0b8eb0be801ccea3cacc411b7", "filename": "libobjc/configure", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libobjc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libobjc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fconfigure?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -11248,18 +11248,6 @@ done\n # Miscellanea\n # -----------\n \n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for thread model used by GCC\" >&5\n-$as_echo_n \"checking for thread model used by GCC... \" >&6; }\n-target_thread_file=`$CC -v 2>&1 | sed -n 's/^Thread model: //p'`\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $target_thread_file\" >&5\n-$as_echo \"$target_thread_file\" >&6; }\n-\n-if test $target_thread_file != single; then\n-\n-$as_echo \"#define HAVE_GTHR_DEFAULT 1\" >>confdefs.h\n-\n-fi\n-\n # Check if we have thread-local storage\n \n \n@@ -11483,7 +11471,7 @@ if test \"${enable_sjlj_exceptions+set}\" = set; then :\n   enableval=$enable_sjlj_exceptions; :\n else\n   cat > conftest.$ac_ext << EOF\n-#line 11486 \"configure\"\n+#line 11474 \"configure\"\n @interface Frob\n @end\n @implementation Frob"}, {"sha": "52599e6019e1c4dbe5ea9fe22ed93af55b6b0bd8", "filename": "libobjc/configure.ac", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libobjc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libobjc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fconfigure.ac?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -217,15 +217,6 @@ AC_CHECK_HEADERS(sched.h)\n # Miscellanea\n # -----------\n \n-AC_MSG_CHECKING([for thread model used by GCC])\n-target_thread_file=`$CC -v 2>&1 | sed -n 's/^Thread model: //p'`\n-AC_MSG_RESULT([$target_thread_file]) \n-\n-if test $target_thread_file != single; then\n-  AC_DEFINE(HAVE_GTHR_DEFAULT, 1,\n-        [Define if the compiler has a thread header that is non single.])\n-fi \n-\n # Check if we have thread-local storage\n GCC_CHECK_TLS\n "}, {"sha": "7e00e2a382b3c95c871990177f2634c998971329", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -27,6 +27,26 @@\n \t* testsuite/26_numerics/random/shuffle_order_engine/\n \toperators/serialize.cc: Likewise.\n \n+2011-11-02  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* acinclude.m4 (GLIBCXX_CONFIGURE): Determine and substitute\n+\ttoplevel_builddir.\n+\t(GLIBCXX_ENABLE_THREADS): Remove glibcxx_thread_h,\n+\tHAVE_GTHR_DEFAULT, enable_thread.\n+\t(GLIBCXX_CHECK_GTHREADS): Reflect gthr move to libgcc.\n+\t* include/Makefile.am (thread_host_headers): Remove\n+\t${host_builddir}/gthr-tpf.h.\n+\t(${host_builddir}/gthr.h): Reflect gthr move to libgcc.\n+\tUse $<.\n+\t(${host_builddir}/gthr-single.h): Likewise.\n+\t(${host_builddir}/gthr-posix.h): Likewise.\n+\t(${host_builddir}/gthr-tpf.h): Remove.\n+\t(${host_builddir}/gthr-default.h): Likewise.\n+\t* configure, config.h.in: Regenerate.\n+\t* Makefile.in, doc/Makefile.in, include/Makefile.in,\n+\tlibsupc++/Makefile.in, po/Makefile.in, python/Makefile.in,\n+\tsrc/Makefile.intestsuite/Makefile.in: Regenerate.\n+\n 2011-11-02  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/bits/c++config: Add tr2 to versioned namespaces."}, {"sha": "2284126ab0692f8fa78d1f98297dbdf626e833d9", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -239,7 +239,6 @@ glibcxx_builddir = @glibcxx_builddir@\n glibcxx_localedir = @glibcxx_localedir@\n glibcxx_prefixdir = @glibcxx_prefixdir@\n glibcxx_srcdir = @glibcxx_srcdir@\n-glibcxx_thread_h = @glibcxx_thread_h@\n glibcxx_toolexecdir = @glibcxx_toolexecdir@\n glibcxx_toolexeclibdir = @glibcxx_toolexeclibdir@\n gxx_include_dir = @gxx_include_dir@\n@@ -279,6 +278,7 @@ target_vendor = @target_vendor@\n top_build_prefix = @top_build_prefix@\n top_builddir = @top_builddir@\n top_srcdir = @top_srcdir@\n+toplevel_builddir = @toplevel_builddir@\n toplevel_srcdir = @toplevel_srcdir@\n \n # May be used by various substitution variables."}, {"sha": "684a2958ce807d946d969274de3ac3f26bab9c29", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 5, "deletions": 25, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -35,6 +35,7 @@ dnl  SUBDIRS\n dnl Substs:\n dnl  glibcxx_builddir     (absolute path)\n dnl  glibcxx_srcdir       (absolute path)\n+dnl  toplevel_builddir    (absolute path)\n dnl  toplevel_srcdir      (absolute path)\n dnl  with_cross_host\n dnl  with_newlib\n@@ -59,9 +60,11 @@ AC_DEFUN([GLIBCXX_CONFIGURE], [\n     [\\\\/$]* | ?:[\\\\/]*) glibcxx_srcdir=${srcdir} ;;\n     *) glibcxx_srcdir=`cd \"$srcdir\" && ${PWDCMD-pwd} || echo \"$srcdir\"` ;;\n   esac\n+  toplevel_builddir=${glibcxx_builddir}/..\n   toplevel_srcdir=${glibcxx_srcdir}/..\n   AC_SUBST(glibcxx_builddir)\n   AC_SUBST(glibcxx_srcdir)\n+  AC_SUBST(toplevel_builddir)\n   AC_SUBST(toplevel_srcdir)\n \n   # We use these options to decide which functions to include.  They are\n@@ -3315,34 +3318,10 @@ dnl having to write complex code (the sed commands to clean the macro\n dnl namespace are complex and fragile enough as it is).  We must also\n dnl add a relative path so that -I- is supported properly.\n dnl\n-dnl Substs:\n-dnl  glibcxx_thread_h\n-dnl\n-dnl Defines:\n-dnl  HAVE_GTHR_DEFAULT\n-dnl\n AC_DEFUN([GLIBCXX_ENABLE_THREADS], [\n   AC_MSG_CHECKING([for thread model used by GCC])\n   target_thread_file=`$CXX -v 2>&1 | sed -n 's/^Thread model: //p'`\n   AC_MSG_RESULT([$target_thread_file])\n-\n-  if test $target_thread_file != single; then\n-    AC_DEFINE(HAVE_GTHR_DEFAULT, 1,\n-\t      [Define if gthr-default.h exists\n-\t      (meaning that threading support is enabled).])\n-  fi\n-\n-  glibcxx_thread_h=gthr-$target_thread_file.h\n-\n-  dnl Check for __GTHREADS define.\n-  gthread_file=${toplevel_srcdir}/gcc/${glibcxx_thread_h}\n-  if grep __GTHREADS $gthread_file >/dev/null 2>&1 ; then\n-    enable_thread=yes\n-  else\n-   enable_thread=no\n-  fi\n-\n-  AC_SUBST(glibcxx_thread_h)\n ])\n \n \n@@ -3356,7 +3335,8 @@ AC_DEFUN([GLIBCXX_CHECK_GTHREADS], [\n   AC_LANG_CPLUSPLUS\n \n   ac_save_CXXFLAGS=\"$CXXFLAGS\"\n-  CXXFLAGS=\"$CXXFLAGS -fno-exceptions -I${toplevel_srcdir}/gcc\"\n+  CXXFLAGS=\"$CXXFLAGS -fno-exceptions \\\n+\t-I${toplevel_srcdir}/libgcc -I${toplevel_builddir}/libgcc\"\n \n   target_thread_file=`$CXX -v 2>&1 | sed -n 's/^Thread model: //p'`\n   case $target_thread_file in"}, {"sha": "f82d91ad41723ca4f32a19ea826849d859b62b4f", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -171,10 +171,6 @@\n /* Define if _Unwind_GetIPInfo is available. */\n #undef HAVE_GETIPINFO\n \n-/* Define if gthr-default.h exists (meaning that threading support is\n-   enabled). */\n-#undef HAVE_GTHR_DEFAULT\n-\n /* Define to 1 if you have the `hypot' function. */\n #undef HAVE_HYPOT\n "}, {"sha": "428cdc5bd805076260956f4b7d8a7a5a4dda3b48", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 15, "deletions": 29, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -707,7 +707,6 @@ BASIC_FILE_H\n CSTDIO_H\n SECTION_FLAGS\n WERROR\n-glibcxx_thread_h\n glibcxx_PCHFLAGS\n GLIBCXX_BUILD_PCH_FALSE\n GLIBCXX_BUILD_PCH_TRUE\n@@ -741,6 +740,7 @@ AR\n AS\n LN_S\n toplevel_srcdir\n+toplevel_builddir\n glibcxx_srcdir\n glibcxx_builddir\n ac_ct_CXX\n@@ -4870,11 +4870,13 @@ $as_echo \"$ac_cv_path_EGREP\" >&6; }\n     \\\\/$* | ?:\\\\/*) glibcxx_srcdir=${srcdir} ;;\n     *) glibcxx_srcdir=`cd \"$srcdir\" && ${PWDCMD-pwd} || echo \"$srcdir\"` ;;\n   esac\n+  toplevel_builddir=${glibcxx_builddir}/..\n   toplevel_srcdir=${glibcxx_srcdir}/..\n \n \n \n \n+\n   # We use these options to decide which functions to include.  They are\n   # set from the top level.\n \n@@ -11485,7 +11487,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11488 \"configure\"\n+#line 11490 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11591,7 +11593,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11594 \"configure\"\n+#line 11596 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -14949,7 +14951,7 @@ fi\n     #\n     # Fake what AC_TRY_COMPILE does.  XXX Look at redoing this new-style.\n     cat > conftest.$ac_ext << EOF\n-#line 14952 \"configure\"\n+#line 14954 \"configure\"\n struct S { ~S(); };\n void bar();\n void foo()\n@@ -15077,23 +15079,6 @@ $as_echo_n \"checking for thread model used by GCC... \" >&6; }\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $target_thread_file\" >&5\n $as_echo \"$target_thread_file\" >&6; }\n \n-  if test $target_thread_file != single; then\n-\n-$as_echo \"#define HAVE_GTHR_DEFAULT 1\" >>confdefs.h\n-\n-  fi\n-\n-  glibcxx_thread_h=gthr-$target_thread_file.h\n-\n-    gthread_file=${toplevel_srcdir}/gcc/${glibcxx_thread_h}\n-  if grep __GTHREADS $gthread_file >/dev/null 2>&1 ; then\n-    enable_thread=yes\n-  else\n-   enable_thread=no\n-  fi\n-\n-\n-\n \n \n   ac_ext=cpp\n@@ -15317,7 +15302,7 @@ $as_echo \"$glibcxx_cv_atomic_long_long\" >&6; }\n   # Fake what AC_TRY_COMPILE does.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15320 \"configure\"\n+#line 15305 \"configure\"\n int main()\n {\n   typedef bool atomic_type;\n@@ -15354,7 +15339,7 @@ $as_echo \"$glibcxx_cv_atomic_bool\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15357 \"configure\"\n+#line 15342 \"configure\"\n int main()\n {\n   typedef short atomic_type;\n@@ -15391,7 +15376,7 @@ $as_echo \"$glibcxx_cv_atomic_short\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15394 \"configure\"\n+#line 15379 \"configure\"\n int main()\n {\n   // NB: _Atomic_word not necessarily int.\n@@ -15429,7 +15414,7 @@ $as_echo \"$glibcxx_cv_atomic_int\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15432 \"configure\"\n+#line 15417 \"configure\"\n int main()\n {\n   typedef long long atomic_type;\n@@ -15505,7 +15490,7 @@ $as_echo \"$as_me: WARNING: Performance of certain classes will degrade as a resu\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15508 \"configure\"\n+#line 15493 \"configure\"\n int main()\n {\n   _Decimal32 d1;\n@@ -15547,7 +15532,7 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15550 \"configure\"\n+#line 15535 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };\n@@ -15581,7 +15566,7 @@ $as_echo \"$enable_int128\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15584 \"configure\"\n+#line 15569 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };\n@@ -19821,7 +19806,8 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n \n \n   ac_save_CXXFLAGS=\"$CXXFLAGS\"\n-  CXXFLAGS=\"$CXXFLAGS -fno-exceptions -I${toplevel_srcdir}/gcc\"\n+  CXXFLAGS=\"$CXXFLAGS -fno-exceptions \\\n+\t-I${toplevel_srcdir}/libgcc -I${toplevel_builddir}/libgcc\"\n \n   target_thread_file=`$CXX -v 2>&1 | sed -n 's/^Thread model: //p'`\n   case $target_thread_file in"}, {"sha": "8c38839bff7fdcd9d48a7022703fa17db9fc5b93", "filename": "libstdc++-v3/doc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libstdc%2B%2B-v3%2Fdoc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libstdc%2B%2B-v3%2Fdoc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2FMakefile.in?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -215,7 +215,6 @@ glibcxx_builddir = @glibcxx_builddir@\n glibcxx_localedir = @glibcxx_localedir@\n glibcxx_prefixdir = @glibcxx_prefixdir@\n glibcxx_srcdir = @glibcxx_srcdir@\n-glibcxx_thread_h = @glibcxx_thread_h@\n glibcxx_toolexecdir = @glibcxx_toolexecdir@\n glibcxx_toolexeclibdir = @glibcxx_toolexeclibdir@\n gxx_include_dir = @gxx_include_dir@\n@@ -263,6 +262,7 @@ target_vendor = @target_vendor@\n top_build_prefix = @top_build_prefix@\n top_builddir = @top_builddir@\n top_srcdir = @top_srcdir@\n+toplevel_builddir = @toplevel_builddir@\n toplevel_srcdir = @toplevel_srcdir@\n \n # May be used by various substitution variables."}, {"sha": "c342528fe466e830e5b942bf7c164d53808a5560", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -855,7 +855,6 @@ thread_host_headers = \\\n \t${host_builddir}/gthr.h \\\n \t${host_builddir}/gthr-single.h \\\n \t${host_builddir}/gthr-posix.h \\\n-\t${host_builddir}/gthr-tpf.h \\\n \t${host_builddir}/gthr-default.h\n \n \n@@ -1122,43 +1121,35 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n # Host includes for threads\n uppercase = [ABCDEFGHIJKLMNOPQRSTUVWXYZ_]\n \n-${host_builddir}/gthr.h: ${toplevel_srcdir}/gcc/gthr.h stamp-${host_alias}\n+${host_builddir}/gthr.h: ${toplevel_srcdir}/libgcc/gthr.h stamp-${host_alias}\n \tsed -e '/^#pragma/b' \\\n \t    -e '/^#/s/\\(${uppercase}${uppercase}*\\)/_GLIBCXX_\\1/g' \\\n \t    -e 's/_GLIBCXX_SUPPORTS_WEAK/__GXX_WEAK__/g' \\\n \t    -e 's,^#include \"\\(.*\\)\",#include <bits/\\1>,g' \\\n-\t    < ${toplevel_srcdir}/gcc/gthr.h > $@\n+\t    < $< > $@\n \n-${host_builddir}/gthr-single.h: ${toplevel_srcdir}/gcc/gthr-single.h \\\n+${host_builddir}/gthr-single.h: ${toplevel_srcdir}/libgcc/gthr-single.h \\\n \t\t\t\t  stamp-${host_alias}\n \tsed -e 's/\\(UNUSED\\)/_GLIBCXX_\\1/g' \\\n \t    -e 's/\\(GCC${uppercase}*_H\\)/_GLIBCXX_\\1/g' \\\n-\t    < ${toplevel_srcdir}/gcc/gthr-single.h > $@\n+\t    < $< > $@\n \n-${host_builddir}/gthr-posix.h: ${toplevel_srcdir}/gcc/gthr-posix.h \\\n+${host_builddir}/gthr-posix.h: ${toplevel_srcdir}/libgcc/config/gthr-posix.h \\\n \t\t\t\t   stamp-${host_alias}\n \tsed -e 's/\\(UNUSED\\)/_GLIBCXX_\\1/g' \\\n \t    -e 's/\\(GCC${uppercase}*_H\\)/_GLIBCXX_\\1/g' \\\n \t    -e 's/SUPPORTS_WEAK/__GXX_WEAK__/g' \\\n \t    -e 's/\\(${uppercase}*USE_WEAK\\)/_GLIBCXX_\\1/g' \\\n-\t    < ${toplevel_srcdir}/gcc/gthr-posix.h > $@\n+\t    < $< > $@\n \n-${host_builddir}/gthr-tpf.h: ${toplevel_srcdir}/gcc/gthr-tpf.h \\\n-\t\t\t\t   stamp-${host_alias}\n-\tsed -e 's/\\(UNUSED\\)/_GLIBCXX_\\1/g' \\\n-\t    -e 's/\\(GCC${uppercase}*_H\\)/_GLIBCXX_\\1/g' \\\n-\t    -e 's/SUPPORTS_WEAK/__GXX_WEAK__/g' \\\n-\t    -e 's/\\(${uppercase}*USE_WEAK\\)/_GLIBCXX_\\1/g' \\\n-\t    < ${toplevel_srcdir}/gcc/gthr-tpf.h > $@\n-\n-${host_builddir}/gthr-default.h: ${toplevel_srcdir}/gcc/${glibcxx_thread_h} \\\n+${host_builddir}/gthr-default.h: ${toplevel_builddir}/libgcc/gthr-default.h \\\n \t\t\t\t   stamp-${host_alias}\n \tsed -e 's/\\(UNUSED\\)/_GLIBCXX_\\1/g' \\\n \t    -e 's/\\(GCC${uppercase}*_H\\)/_GLIBCXX_\\1/g' \\\n \t    -e 's/SUPPORTS_WEAK/__GXX_WEAK__/g' \\\n \t    -e 's/\\(${uppercase}*USE_WEAK\\)/_GLIBCXX_\\1/g' \\\n \t    -e 's,^#include \"\\(.*\\)\",#include <bits/\\1>,g' \\\n-\t    < ${toplevel_srcdir}/gcc/${glibcxx_thread_h} > $@\n+\t    < $< > $@\n \n # Build two precompiled C++ includes, stdc++.h.gch/*.gch\n ${pch1a_output}: ${allstamped} ${host_builddir}/c++config.h ${pch1_source}"}, {"sha": "40dfb99c6892b6cf4c391ff1720e2a0998bb5459", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -213,7 +213,6 @@ glibcxx_builddir = @glibcxx_builddir@\n glibcxx_localedir = @glibcxx_localedir@\n glibcxx_prefixdir = @glibcxx_prefixdir@\n glibcxx_srcdir = @glibcxx_srcdir@\n-glibcxx_thread_h = @glibcxx_thread_h@\n glibcxx_toolexecdir = @glibcxx_toolexecdir@\n glibcxx_toolexeclibdir = @glibcxx_toolexeclibdir@\n gxx_include_dir = @gxx_include_dir@\n@@ -253,6 +252,7 @@ target_vendor = @target_vendor@\n top_build_prefix = @top_build_prefix@\n top_builddir = @top_builddir@\n top_srcdir = @top_srcdir@\n+toplevel_builddir = @toplevel_builddir@\n toplevel_srcdir = @toplevel_srcdir@\n \n # May be used by various substitution variables.\n@@ -1099,7 +1099,6 @@ thread_host_headers = \\\n \t${host_builddir}/gthr.h \\\n \t${host_builddir}/gthr-single.h \\\n \t${host_builddir}/gthr-posix.h \\\n-\t${host_builddir}/gthr-tpf.h \\\n \t${host_builddir}/gthr-default.h\n \n pch1_source = ${glibcxx_srcdir}/include/precompiled/stdc++.h\n@@ -1510,43 +1509,35 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \techo \"\" >> $@ ;\\\n \techo \"#endif // _GLIBCXX_CXX_CONFIG_H\" >> $@\n \n-${host_builddir}/gthr.h: ${toplevel_srcdir}/gcc/gthr.h stamp-${host_alias}\n+${host_builddir}/gthr.h: ${toplevel_srcdir}/libgcc/gthr.h stamp-${host_alias}\n \tsed -e '/^#pragma/b' \\\n \t    -e '/^#/s/\\(${uppercase}${uppercase}*\\)/_GLIBCXX_\\1/g' \\\n \t    -e 's/_GLIBCXX_SUPPORTS_WEAK/__GXX_WEAK__/g' \\\n \t    -e 's,^#include \"\\(.*\\)\",#include <bits/\\1>,g' \\\n-\t    < ${toplevel_srcdir}/gcc/gthr.h > $@\n+\t    < $< > $@\n \n-${host_builddir}/gthr-single.h: ${toplevel_srcdir}/gcc/gthr-single.h \\\n+${host_builddir}/gthr-single.h: ${toplevel_srcdir}/libgcc/gthr-single.h \\\n \t\t\t\t  stamp-${host_alias}\n \tsed -e 's/\\(UNUSED\\)/_GLIBCXX_\\1/g' \\\n \t    -e 's/\\(GCC${uppercase}*_H\\)/_GLIBCXX_\\1/g' \\\n-\t    < ${toplevel_srcdir}/gcc/gthr-single.h > $@\n+\t    < $< > $@\n \n-${host_builddir}/gthr-posix.h: ${toplevel_srcdir}/gcc/gthr-posix.h \\\n+${host_builddir}/gthr-posix.h: ${toplevel_srcdir}/libgcc/config/gthr-posix.h \\\n \t\t\t\t   stamp-${host_alias}\n \tsed -e 's/\\(UNUSED\\)/_GLIBCXX_\\1/g' \\\n \t    -e 's/\\(GCC${uppercase}*_H\\)/_GLIBCXX_\\1/g' \\\n \t    -e 's/SUPPORTS_WEAK/__GXX_WEAK__/g' \\\n \t    -e 's/\\(${uppercase}*USE_WEAK\\)/_GLIBCXX_\\1/g' \\\n-\t    < ${toplevel_srcdir}/gcc/gthr-posix.h > $@\n+\t    < $< > $@\n \n-${host_builddir}/gthr-tpf.h: ${toplevel_srcdir}/gcc/gthr-tpf.h \\\n-\t\t\t\t   stamp-${host_alias}\n-\tsed -e 's/\\(UNUSED\\)/_GLIBCXX_\\1/g' \\\n-\t    -e 's/\\(GCC${uppercase}*_H\\)/_GLIBCXX_\\1/g' \\\n-\t    -e 's/SUPPORTS_WEAK/__GXX_WEAK__/g' \\\n-\t    -e 's/\\(${uppercase}*USE_WEAK\\)/_GLIBCXX_\\1/g' \\\n-\t    < ${toplevel_srcdir}/gcc/gthr-tpf.h > $@\n-\n-${host_builddir}/gthr-default.h: ${toplevel_srcdir}/gcc/${glibcxx_thread_h} \\\n+${host_builddir}/gthr-default.h: ${toplevel_builddir}/libgcc/gthr-default.h \\\n \t\t\t\t   stamp-${host_alias}\n \tsed -e 's/\\(UNUSED\\)/_GLIBCXX_\\1/g' \\\n \t    -e 's/\\(GCC${uppercase}*_H\\)/_GLIBCXX_\\1/g' \\\n \t    -e 's/SUPPORTS_WEAK/__GXX_WEAK__/g' \\\n \t    -e 's/\\(${uppercase}*USE_WEAK\\)/_GLIBCXX_\\1/g' \\\n \t    -e 's,^#include \"\\(.*\\)\",#include <bits/\\1>,g' \\\n-\t    < ${toplevel_srcdir}/gcc/${glibcxx_thread_h} > $@\n+\t    < $< > $@\n \n # Build two precompiled C++ includes, stdc++.h.gch/*.gch\n ${pch1a_output}: ${allstamped} ${host_builddir}/c++config.h ${pch1_source}"}, {"sha": "9ef5e683af8516372344998380ca3a007b0002e0", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -272,7 +272,6 @@ glibcxx_builddir = @glibcxx_builddir@\n glibcxx_localedir = @glibcxx_localedir@\n glibcxx_prefixdir = @glibcxx_prefixdir@\n glibcxx_srcdir = @glibcxx_srcdir@\n-glibcxx_thread_h = @glibcxx_thread_h@\n glibcxx_toolexecdir = @glibcxx_toolexecdir@\n glibcxx_toolexeclibdir = @glibcxx_toolexeclibdir@\n gxx_include_dir = @gxx_include_dir@\n@@ -312,6 +311,7 @@ target_vendor = @target_vendor@\n top_build_prefix = @top_build_prefix@\n top_builddir = @top_builddir@\n top_srcdir = @top_srcdir@\n+toplevel_builddir = @toplevel_builddir@\n toplevel_srcdir = @toplevel_srcdir@\n \n # May be used by various substitution variables."}, {"sha": "0226b894a6e49092d28a7a87a7e872e5ad94895b", "filename": "libstdc++-v3/po/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpo%2FMakefile.in?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -213,7 +213,6 @@ glibcxx_builddir = @glibcxx_builddir@\n glibcxx_localedir = @glibcxx_localedir@\n glibcxx_prefixdir = @glibcxx_prefixdir@\n glibcxx_srcdir = @glibcxx_srcdir@\n-glibcxx_thread_h = @glibcxx_thread_h@\n glibcxx_toolexecdir = @glibcxx_toolexecdir@\n glibcxx_toolexeclibdir = @glibcxx_toolexeclibdir@\n gxx_include_dir = @gxx_include_dir@\n@@ -253,6 +252,7 @@ target_vendor = @target_vendor@\n top_build_prefix = @top_build_prefix@\n top_builddir = @top_builddir@\n top_srcdir = @top_srcdir@\n+toplevel_builddir = @toplevel_builddir@\n toplevel_srcdir = @toplevel_srcdir@\n \n # May be used by various substitution variables."}, {"sha": "ca046cf0a334b79d2b6535986b1e7575b7293202", "filename": "libstdc++-v3/python/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libstdc%2B%2B-v3%2Fpython%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libstdc%2B%2B-v3%2Fpython%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2FMakefile.in?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -237,7 +237,6 @@ glibcxx_builddir = @glibcxx_builddir@\n glibcxx_localedir = @glibcxx_localedir@\n glibcxx_prefixdir = @glibcxx_prefixdir@\n glibcxx_srcdir = @glibcxx_srcdir@\n-glibcxx_thread_h = @glibcxx_thread_h@\n glibcxx_toolexecdir = @glibcxx_toolexecdir@\n glibcxx_toolexeclibdir = @glibcxx_toolexeclibdir@\n gxx_include_dir = @gxx_include_dir@\n@@ -277,6 +276,7 @@ target_vendor = @target_vendor@\n top_build_prefix = @top_build_prefix@\n top_builddir = @top_builddir@\n top_srcdir = @top_srcdir@\n+toplevel_builddir = @toplevel_builddir@\n toplevel_srcdir = @toplevel_srcdir@\n \n # May be used by various substitution variables."}, {"sha": "c52e5c4df6178089aa09efc5a2cef5fae941262c", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -277,7 +277,6 @@ glibcxx_builddir = @glibcxx_builddir@\n glibcxx_localedir = @glibcxx_localedir@\n glibcxx_prefixdir = @glibcxx_prefixdir@\n glibcxx_srcdir = @glibcxx_srcdir@\n-glibcxx_thread_h = @glibcxx_thread_h@\n glibcxx_toolexecdir = @glibcxx_toolexecdir@\n glibcxx_toolexeclibdir = @glibcxx_toolexeclibdir@\n gxx_include_dir = @gxx_include_dir@\n@@ -317,6 +316,7 @@ target_vendor = @target_vendor@\n top_build_prefix = @top_build_prefix@\n top_builddir = @top_builddir@\n top_srcdir = @top_srcdir@\n+toplevel_builddir = @toplevel_builddir@\n toplevel_srcdir = @toplevel_srcdir@\n \n # May be used by various substitution variables."}, {"sha": "af161ea5d269b1e4712e71b7512b404c8d619984", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1c8e77cfcc007c21bfdf2077afffcb720a48b2/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=5d1c8e77cfcc007c21bfdf2077afffcb720a48b2", "patch": "@@ -213,7 +213,6 @@ glibcxx_builddir = @glibcxx_builddir@\n glibcxx_localedir = @glibcxx_localedir@\n glibcxx_prefixdir = @glibcxx_prefixdir@\n glibcxx_srcdir = @glibcxx_srcdir@\n-glibcxx_thread_h = @glibcxx_thread_h@\n glibcxx_toolexecdir = @glibcxx_toolexecdir@\n glibcxx_toolexeclibdir = @glibcxx_toolexeclibdir@\n gxx_include_dir = @gxx_include_dir@\n@@ -253,6 +252,7 @@ target_vendor = @target_vendor@\n top_build_prefix = @top_build_prefix@\n top_builddir = @top_builddir@\n top_srcdir = @top_srcdir@\n+toplevel_builddir = @toplevel_builddir@\n toplevel_srcdir = @toplevel_srcdir@\n AUTOMAKE_OPTIONS = nostdinc\n RUNTESTDEFAULTFLAGS = --tool $$tool --srcdir $$srcdir"}]}