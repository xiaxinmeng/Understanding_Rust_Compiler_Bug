{"sha": "29eb4ac9ad2c2429469e965192c9021a0f250781", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjllYjRhYzlhZDJjMjQyOTQ2OWU5NjUxOTJjOTAyMWEwZjI1MDc4MQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-11-14T12:53:30Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-11-14T12:53:30Z"}, "message": "c-common.c (walk_stmt_tree): Remove.\n\n\t* c-common.c (walk_stmt_tree): Remove.\n\t* c-common.h: Remove the corresponding prototype.\n\nFrom-SVN: r90618", "tree": {"sha": "35c56416f888923b533b8b1bcb57d4f9a406e695", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35c56416f888923b533b8b1bcb57d4f9a406e695"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29eb4ac9ad2c2429469e965192c9021a0f250781", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29eb4ac9ad2c2429469e965192c9021a0f250781", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29eb4ac9ad2c2429469e965192c9021a0f250781", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29eb4ac9ad2c2429469e965192c9021a0f250781/comments", "author": null, "committer": null, "parents": [{"sha": "6b870fa9f4de2ec9f2c30caae5f9af662ab1697c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b870fa9f4de2ec9f2c30caae5f9af662ab1697c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b870fa9f4de2ec9f2c30caae5f9af662ab1697c"}], "stats": {"total": 76, "additions": 5, "deletions": 71}, "files": [{"sha": "32f9fc90f86056f9eda7f54010401942c6a09716", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29eb4ac9ad2c2429469e965192c9021a0f250781/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29eb4ac9ad2c2429469e965192c9021a0f250781/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=29eb4ac9ad2c2429469e965192c9021a0f250781", "patch": "@@ -1,3 +1,8 @@\n+2004-11-14  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* c-common.c (walk_stmt_tree): Remove.\n+\t* c-common.h: Remove the corresponding prototype.\n+\n 2004-11-13  Richard Henderson  <rth@redhat.com>\n \n \t* calls.c (precompute_register_parameters): Force all PARALLELs"}, {"sha": "c82a8a4fc6d4c0e8e55cf07eeb7537886e504f71", "filename": "gcc/c-common.c", "status": "modified", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29eb4ac9ad2c2429469e965192c9021a0f250781/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29eb4ac9ad2c2429469e965192c9021a0f250781/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=29eb4ac9ad2c2429469e965192c9021a0f250781", "patch": "@@ -3398,76 +3398,6 @@ strip_pointer_operator (tree t)\n   return t;\n }\n \n-/* Walk the statement tree, rooted at *tp.  Apply FUNC to all the\n-   sub-trees of *TP in a pre-order traversal.  FUNC is called with the\n-   DATA and the address of each sub-tree.  If FUNC returns a non-NULL\n-   value, the traversal is aborted, and the value returned by FUNC is\n-   returned.  If FUNC sets WALK_SUBTREES to zero, then the subtrees of\n-   the node being visited are not walked.\n-\n-   We don't need a without_duplicates variant of this one because the\n-   statement tree is a tree, not a graph.  */\n-\n-tree\n-walk_stmt_tree (tree *tp, walk_tree_fn func, void *data)\n-{\n-  enum tree_code code;\n-  int walk_subtrees;\n-  tree result;\n-  int i, len;\n-\n-#define WALK_SUBTREE(NODE)\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      result = walk_stmt_tree (&(NODE), func, data);\t\\\n-      if (result)\t\t\t\t\t\\\n-\treturn result;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\\\n-  while (0)\n-\n-  /* Skip empty subtrees.  */\n-  if (!*tp)\n-    return NULL_TREE;\n-\n-  /* Skip subtrees below non-statement nodes.  */\n-  if (!STATEMENT_CODE_P (TREE_CODE (*tp)))\n-    return NULL_TREE;\n-\n-  /* Call the function.  */\n-  walk_subtrees = 1;\n-  result = (*func) (tp, &walk_subtrees, data);\n-\n-  /* If we found something, return it.  */\n-  if (result)\n-    return result;\n-\n-  /* FUNC may have modified the tree, recheck that we're looking at a\n-     statement node.  */\n-  code = TREE_CODE (*tp);\n-  if (!STATEMENT_CODE_P (code))\n-    return NULL_TREE;\n-\n-  /* Visit the subtrees unless FUNC decided that there was nothing\n-     interesting below this point in the tree.  */\n-  if (walk_subtrees)\n-    {\n-      /* Walk over all the sub-trees of this operand.  Statement nodes\n-\t never contain RTL, and we needn't worry about TARGET_EXPRs.  */\n-      len = TREE_CODE_LENGTH (code);\n-\n-      /* Go through the subtrees.  We need to do this in forward order so\n-\t that the scope of a FOR_EXPR is handled properly.  */\n-      for (i = 0; i < len; ++i)\n-\tWALK_SUBTREE (TREE_OPERAND (*tp, i));\n-    }\n-\n-  /* Finally visit the chain.  This can be tail-recursion optimized if\n-     we write it this way.  */\n-  return walk_stmt_tree (&TREE_CHAIN (*tp), func, data);\n-\n-#undef WALK_SUBTREE\n-}\n-\n /* Used to compare case labels.  K1 and K2 are actually tree nodes\n    representing case labels, or NULL_TREE for a `default' label.\n    Returns -1 if K1 is ordered before K2, -1 if K1 is ordered after"}, {"sha": "8a788702682ad2b105becd7090285d2107ffd853", "filename": "gcc/c-common.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29eb4ac9ad2c2429469e965192c9021a0f250781/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29eb4ac9ad2c2429469e965192c9021a0f250781/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=29eb4ac9ad2c2429469e965192c9021a0f250781", "patch": "@@ -299,7 +299,6 @@ extern tree pop_stmt_list (tree);\n extern tree add_stmt (tree);\n extern void push_cleanup (tree, tree, bool);\n \n-extern tree walk_stmt_tree (tree *, walk_tree_fn, void *);\n extern int c_expand_decl (tree);\n \n extern int field_decl_cmp (const void *, const void *);"}]}