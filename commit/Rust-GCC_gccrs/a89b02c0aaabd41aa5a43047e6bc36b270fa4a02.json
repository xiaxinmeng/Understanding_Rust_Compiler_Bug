{"sha": "a89b02c0aaabd41aa5a43047e6bc36b270fa4a02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg5YjAyYzBhYWFiZDQxYWE1YTQzMDQ3ZTZiYzM2YjI3MGZhNGEwMg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2014-07-03T15:12:23Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2014-07-03T15:12:23Z"}, "message": "arm.md (arch): Add armv6_or_vfpv3.\n\n\t* arm.md (arch): Add armv6_or_vfpv3.\n\t(arch_enabled): Add test for the above.\n\t* vfp.md (divsf_vfp, divdf_vfp): Add earlyclobber when code can run\n\ton VFP9.\n\t(sqrtsf_vfp, sqrtdf_vfp): Likewise.\n\nFrom-SVN: r212265", "tree": {"sha": "e4998b8398e80bc80fab242463c839024cdc532e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4998b8398e80bc80fab242463c839024cdc532e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a89b02c0aaabd41aa5a43047e6bc36b270fa4a02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a89b02c0aaabd41aa5a43047e6bc36b270fa4a02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a89b02c0aaabd41aa5a43047e6bc36b270fa4a02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a89b02c0aaabd41aa5a43047e6bc36b270fa4a02/comments", "author": null, "committer": null, "parents": [{"sha": "00a7ba584062ce49f20fd9e10e5396b296b0a7b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00a7ba584062ce49f20fd9e10e5396b296b0a7b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00a7ba584062ce49f20fd9e10e5396b296b0a7b5"}], "stats": {"total": 47, "additions": 35, "deletions": 12}, "files": [{"sha": "6f83e8c42d3c666dfb3f59db1fe47bfe53a9e5ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a89b02c0aaabd41aa5a43047e6bc36b270fa4a02/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a89b02c0aaabd41aa5a43047e6bc36b270fa4a02/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a89b02c0aaabd41aa5a43047e6bc36b270fa4a02", "patch": "@@ -1,3 +1,11 @@\n+2014-07-03  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm.md (arch): Add armv6_or_vfpv3.\n+\t(arch_enabled): Add test for the above.\n+\t* vfp.md (divsf_vfp, divdf_vfp): Add earlyclobber when code can run\n+\ton VFP9.\n+\t(sqrtsf_vfp, sqrtdf_vfp): Likewise.\n+\t\n 2014-07-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcov-io.c (gcov_read_words): Don't call memmove if excess is 0."}, {"sha": "65ed25d25f9bb1e26236b30706db03f938aff4fa", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a89b02c0aaabd41aa5a43047e6bc36b270fa4a02/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a89b02c0aaabd41aa5a43047e6bc36b270fa4a02/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=a89b02c0aaabd41aa5a43047e6bc36b270fa4a02", "patch": "@@ -127,7 +127,7 @@\n ; for ARM or Thumb-2 with arm_arch6, and nov6 for ARM without\n ; arm_arch6.  This attribute is used to compute attribute \"enabled\",\n ; use type \"any\" to enable an alternative in all cases.\n-(define_attr \"arch\" \"any,a,t,32,t1,t2,v6,nov6,neon_for_64bits,avoid_neon_for_64bits,iwmmxt,iwmmxt2\"\n+(define_attr \"arch\" \"any,a,t,32,t1,t2,v6,nov6,neon_for_64bits,avoid_neon_for_64bits,iwmmxt,iwmmxt2,armv6_or_vfpv3\"\n   (const_string \"any\"))\n \n (define_attr \"arch_enabled\" \"no,yes\"\n@@ -174,7 +174,12 @@\n \n \t (and (eq_attr \"arch\" \"iwmmxt2\")\n \t      (match_test \"TARGET_REALLY_IWMMXT2\"))\n-\t (const_string \"yes\")]\n+\t (const_string \"yes\")\n+\n+\t (and (eq_attr \"arch\" \"armv6_or_vfpv3\")\n+\t      (match_test \"arm_arch6 || TARGET_VFP3\"))\n+\t (const_string \"yes\")\n+\t]\n \n \t(const_string \"no\")))\n "}, {"sha": "ab502ad13c23ca4422bed352d0a0b14ae1fbcf88", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a89b02c0aaabd41aa5a43047e6bc36b270fa4a02/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a89b02c0aaabd41aa5a43047e6bc36b270fa4a02/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=a89b02c0aaabd41aa5a43047e6bc36b270fa4a02", "patch": "@@ -714,25 +714,30 @@\n \n ;; Division insns\n \n+; VFP9 Erratum 760019: It's potentially unsafe to overwrite the input\n+; operands, so mark the output as early clobber for VFPv2 on ARMv5 or\n+; earlier.\n (define_insn \"*divsf3_vfp\"\n-  [(set (match_operand:SF\t  0 \"s_register_operand\" \"=t\")\n-\t(div:SF (match_operand:SF 1 \"s_register_operand\" \"t\")\n-\t\t(match_operand:SF 2 \"s_register_operand\" \"t\")))]\n+  [(set (match_operand:SF\t  0 \"s_register_operand\" \"=&t,t\")\n+\t(div:SF (match_operand:SF 1 \"s_register_operand\" \"t,t\")\n+\t\t(match_operand:SF 2 \"s_register_operand\" \"t,t\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_VFP\"\n   \"fdivs%?\\\\t%0, %1, %2\"\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")\n+   (set_attr \"arch\" \"*,armv6_or_vfpv3\")\n    (set_attr \"type\" \"fdivs\")]\n )\n \n (define_insn \"*divdf3_vfp\"\n-  [(set (match_operand:DF\t  0 \"s_register_operand\" \"=w\")\n-\t(div:DF (match_operand:DF 1 \"s_register_operand\" \"w\")\n-\t\t(match_operand:DF 2 \"s_register_operand\" \"w\")))]\n+  [(set (match_operand:DF\t  0 \"s_register_operand\" \"=&w,w\")\n+\t(div:DF (match_operand:DF 1 \"s_register_operand\" \"w,w\")\n+\t\t(match_operand:DF 2 \"s_register_operand\" \"w,w\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_VFP_DOUBLE\"\n   \"fdivd%?\\\\t%P0, %P1, %P2\"\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")\n+   (set_attr \"arch\" \"*,armv6_or_vfpv3\")\n    (set_attr \"type\" \"fdivd\")]\n )\n \n@@ -1070,23 +1075,28 @@\n \n ;; Sqrt insns.\n \n+; VFP9 Erratum 760019: It's potentially unsafe to overwrite the input\n+; operands, so mark the output as early clobber for VFPv2 on ARMv5 or\n+; earlier.\n (define_insn \"*sqrtsf2_vfp\"\n-  [(set (match_operand:SF\t   0 \"s_register_operand\" \"=t\")\n-\t(sqrt:SF (match_operand:SF 1 \"s_register_operand\" \"t\")))]\n+  [(set (match_operand:SF\t   0 \"s_register_operand\" \"=&t,t\")\n+\t(sqrt:SF (match_operand:SF 1 \"s_register_operand\" \"t,t\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_VFP\"\n   \"fsqrts%?\\\\t%0, %1\"\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")\n+   (set_attr \"arch\" \"*,armv6_or_vfpv3\")\n    (set_attr \"type\" \"fsqrts\")]\n )\n \n (define_insn \"*sqrtdf2_vfp\"\n-  [(set (match_operand:DF\t   0 \"s_register_operand\" \"=w\")\n-\t(sqrt:DF (match_operand:DF 1 \"s_register_operand\" \"w\")))]\n+  [(set (match_operand:DF\t   0 \"s_register_operand\" \"=&w,w\")\n+\t(sqrt:DF (match_operand:DF 1 \"s_register_operand\" \"w,w\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_VFP_DOUBLE\"\n   \"fsqrtd%?\\\\t%P0, %P1\"\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")\n+   (set_attr \"arch\" \"*,armv6_or_vfpv3\")\n    (set_attr \"type\" \"fsqrtd\")]\n )\n "}]}