{"sha": "a00cc15e3d1142b14dc26805c90f16e7dba0d6ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAwY2MxNWUzZDExNDJiMTRkYzI2ODA1YzkwZjE2ZTdkYmEwZDZhZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2012-04-11T22:54:53Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2012-04-11T22:54:53Z"}, "message": "re PR c++/52924 (Using an std::function object as deleter of shared_ptr in C++0x mode does not compile)\n\n\tPR libstdc++/52924\n\t* include/bits/shared_ptr_base.h (_Sp_counted_deleter): Add\n\tuser-defined destructor.\n\t(_Sp_counted_inplace): Likewise.\n\t* testsuite/20_util/shared_ptr/cons/52924.cc: New.\n\t* testsuite/20_util/shared_ptr/cons/43820_neg.cc: Adjust dg-error\n\tline numbers.\n\nFrom-SVN: r186363", "tree": {"sha": "a171912fc91de104e6d145e1d73aa047873dacdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a171912fc91de104e6d145e1d73aa047873dacdf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a00cc15e3d1142b14dc26805c90f16e7dba0d6ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a00cc15e3d1142b14dc26805c90f16e7dba0d6ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a00cc15e3d1142b14dc26805c90f16e7dba0d6ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a00cc15e3d1142b14dc26805c90f16e7dba0d6ad/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85000c08fedc99b8daed3c31320bf61da103d22e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85000c08fedc99b8daed3c31320bf61da103d22e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85000c08fedc99b8daed3c31320bf61da103d22e"}], "stats": {"total": 62, "additions": 60, "deletions": 2}, "files": [{"sha": "a8cc2b7d3346975c30f57ac15868e14025882131", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a00cc15e3d1142b14dc26805c90f16e7dba0d6ad/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a00cc15e3d1142b14dc26805c90f16e7dba0d6ad/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a00cc15e3d1142b14dc26805c90f16e7dba0d6ad", "patch": "@@ -1,3 +1,13 @@\n+2012-04-10  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tPR libstdc++/52924\n+\t* include/bits/shared_ptr_base.h (_Sp_counted_deleter): Add\n+\tuser-defined destructor.\n+\t(_Sp_counted_inplace): Likewise.\n+\t* testsuite/20_util/shared_ptr/cons/52924.cc: New.\n+\t* testsuite/20_util/shared_ptr/cons/43820_neg.cc: Adjust dg-error\n+\tline numbers.\n+\n 2012-04-11  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* doc/xml/manual/debug.xml (Debug Versions of Library Binary Files):"}, {"sha": "39449f1b4bbb3a28e339c6897b7bf8b71115845e", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a00cc15e3d1142b14dc26805c90f16e7dba0d6ad/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a00cc15e3d1142b14dc26805c90f16e7dba0d6ad/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=a00cc15e3d1142b14dc26805c90f16e7dba0d6ad", "patch": "@@ -343,6 +343,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a)\n       : _M_ptr(__p), _M_del(__d, __a) { }\n \n+      ~_Sp_counted_deleter() noexcept { }\n+\n       virtual void\n       _M_dispose() noexcept\n       { _M_del._M_del(_M_ptr); }\n@@ -401,6 +403,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      std::forward<_Args>(__args)...); // might throw\n \t}\n \n+      ~_Sp_counted_ptr_inplace() noexcept { }\n+\n       virtual void\n       _M_dispose() noexcept\n       { allocator_traits<_Alloc>::destroy(_M_impl, _M_impl._M_ptr); }"}, {"sha": "d2110ca8b3921904465fda69a8f3c45baa76e438", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/43820_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a00cc15e3d1142b14dc26805c90f16e7dba0d6ad/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a00cc15e3d1142b14dc26805c90f16e7dba0d6ad/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc?ref=a00cc15e3d1142b14dc26805c90f16e7dba0d6ad", "patch": "@@ -32,9 +32,9 @@ void test01()\n {\n   X* px = 0;\n   std::shared_ptr<X> p1(px);   // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 771 }\n+  // { dg-error \"incomplete\" \"\" { target *-*-* } 775 }\n \n   std::shared_ptr<X> p9(ap());  // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 865 }\n+  // { dg-error \"incomplete\" \"\" { target *-*-* } 869 }\n \n }"}, {"sha": "0cd6bad6401a46a3a24a7f35901100d67f97d555", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/52924.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a00cc15e3d1142b14dc26805c90f16e7dba0d6ad/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F52924.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a00cc15e3d1142b14dc26805c90f16e7dba0d6ad/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F52924.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F52924.cc?ref=a00cc15e3d1142b14dc26805c90f16e7dba0d6ad", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2012 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <memory>\n+\n+// libstdc++/52924\n+\n+struct A { } a;\n+\n+struct D {\n+  ~D() noexcept(false) { }\n+  void operator()(A*) { }\n+} d;\n+\n+auto sp = std::shared_ptr<A>(&a, d);\n+\n+template<typename T>\n+struct Alloc : std::allocator<T>\n+{\n+  Alloc() = default;\n+  ~Alloc() noexcept(false) { }\n+  template<typename U> Alloc(const Alloc<U>&) { }\n+};\n+\n+Alloc<A> al;\n+\n+auto as = std::allocate_shared<A>(al);"}]}