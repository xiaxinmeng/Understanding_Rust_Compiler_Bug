{"sha": "3c742621ed28540cf42d4cfbc2bf03433cd26738", "node_id": "C_kwDOANBUbNoAKDNjNzQyNjIxZWQyODU0MGNmNDJkNGNmYmMyYmYwMzQzM2NkMjY3Mzg", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-04-12T16:56:45Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-04-12T21:38:31Z"}, "message": "libstdc++: Prefer to use mmap instead of malloc in libbacktrace\n\nAs reported in PR libbacktrace/105240, libbacktrace leaks memory when\nusing malloc for allocations. I originally thought it would be simpler\nto just use malloc unconditionally (because it's supported on all\ntargets) but the leaks make that problematic.\n\nThis adds libbacktrace's detection for mmap to the libstdc++\nconfigury, so that we use mmap.c and mmapio.c when possible. This avoids\nthe leaks seen previously, at least on linux.\n\nlibstdc++-v3/ChangeLog:\n\n\t* acinclude.m4 (GLIBCXX_ENABLE_BACKTRACE): Check for mmap.\n\t* config.h.in: Regenerate.\n\t* configure: Regenerate.", "tree": {"sha": "fb0b6e89fda4b8eeffd65d81304b4e118691e188", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb0b6e89fda4b8eeffd65d81304b4e118691e188"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c742621ed28540cf42d4cfbc2bf03433cd26738", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c742621ed28540cf42d4cfbc2bf03433cd26738", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c742621ed28540cf42d4cfbc2bf03433cd26738", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c742621ed28540cf42d4cfbc2bf03433cd26738/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2c007b87dcd5db5d59447de2081777aea66f35f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2c007b87dcd5db5d59447de2081777aea66f35f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2c007b87dcd5db5d59447de2081777aea66f35f"}], "stats": {"total": 97, "additions": 83, "deletions": 14}, "files": [{"sha": "eac8aeda48bece69c85fe53ba57b4cb2414aa7b2", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c742621ed28540cf42d4cfbc2bf03433cd26738/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c742621ed28540cf42d4cfbc2bf03433cd26738/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=3c742621ed28540cf42d4cfbc2bf03433cd26738", "patch": "@@ -5003,18 +5003,41 @@ elf64) elfsize=64 ;;\n esac\n BACKTRACE_CPPFLAGS=\"$BACKTRACE_CPPFLAGS -DBACKTRACE_ELF_SIZE=$elfsize\"\n \n-  ALLOC_FILE=alloc.lo\n-  AC_SUBST(ALLOC_FILE)\n-  VIEW_FILE=read.lo\n-  AC_SUBST(VIEW_FILE)\n-\n   AC_MSG_CHECKING([whether to build libbacktrace support])\n   if test \"$enable_libstdcxx_backtrace\" == \"auto\"; then\n     enable_libstdcxx_backtrace=no\n   fi\n   if test \"$enable_libstdcxx_backtrace\" == \"yes\"; then\n     BACKTRACE_SUPPORTED=1\n-    BACKTRACE_USES_MALLOC=1\n+\n+    AC_CHECK_HEADERS(sys/mman.h)\n+    case \"${host}\" in\n+      *-*-msdosdjgpp) # DJGPP has sys/man.h, but no mmap\n+\thave_mmap=no ;;\n+      *-*-*)\n+\thave_mmap=\"$ac_cv_header_sys_mman_h\" ;;\n+    esac\n+\n+    if test \"$have_mmap\" = \"no\"; then\n+      VIEW_FILE=read.lo\n+      ALLOC_FILE=alloc.lo\n+    else\n+      VIEW_FILE=mmapio.lo\n+      AC_PREPROC_IFELSE([AC_LANG_SOURCE([\n+    #include <sys/mman.h>\n+    #if !defined(MAP_ANONYMOUS) && !defined(MAP_ANON)\n+      #error no MAP_ANONYMOUS\n+    #endif\n+    ])], [ALLOC_FILE=mmap.lo], [ALLOC_FILE=alloc.lo])\n+    fi\n+    AC_SUBST(VIEW_FILE)\n+    AC_SUBST(ALLOC_FILE)\n+\n+    BACKTRACE_USES_MALLOC=0\n+    if test \"$ALLOC_FILE\" = \"alloc.lo\"; then\n+      BACKTRACE_USES_MALLOC=1\n+    fi\n+\n     if test \"$ac_has_gthreads\" = \"yes\"; then\n       BACKTRACE_SUPPORTS_THREADS=1\n     else"}, {"sha": "f30a8c51c458c86ab0d5d28468d6556799ad9252", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c742621ed28540cf42d4cfbc2bf03433cd26738/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c742621ed28540cf42d4cfbc2bf03433cd26738/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=3c742621ed28540cf42d4cfbc2bf03433cd26738", "patch": "@@ -420,6 +420,9 @@\n /* Define to 1 if you have the <sys/machine.h> header file. */\n #undef HAVE_SYS_MACHINE_H\n \n+/* Define to 1 if you have the <sys/mman.h> header file. */\n+#undef HAVE_SYS_MMAN_H\n+\n /* Define to 1 if you have the <sys/param.h> header file. */\n #undef HAVE_SYS_PARAM_H\n "}, {"sha": "35dc3f49383abe9633249eaa32d33037ebf936e4", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 51, "deletions": 8, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c742621ed28540cf42d4cfbc2bf03433cd26738/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c742621ed28540cf42d4cfbc2bf03433cd26738/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=3c742621ed28540cf42d4cfbc2bf03433cd26738", "patch": "@@ -681,8 +681,8 @@ BACKTRACE_SUPPORTS_THREADS\n BACKTRACE_USES_MALLOC\n BACKTRACE_SUPPORTED\n BACKTRACE_CPPFLAGS\n-VIEW_FILE\n ALLOC_FILE\n+VIEW_FILE\n FORMAT_FILE\n ENABLE_FILESYSTEM_TS_FALSE\n ENABLE_FILESYSTEM_TS_TRUE\n@@ -16190,7 +16190,7 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n \n     ac_save_CXXFLAGS=\"$CXXFLAGS\"\n \n-        cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+                cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n \n     #if ! defined __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2\n@@ -77463,19 +77463,62 @@ elf64) elfsize=64 ;;\n esac\n BACKTRACE_CPPFLAGS=\"$BACKTRACE_CPPFLAGS -DBACKTRACE_ELF_SIZE=$elfsize\"\n \n-  ALLOC_FILE=alloc.lo\n-\n-  VIEW_FILE=read.lo\n-\n-\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether to build libbacktrace support\" >&5\n $as_echo_n \"checking whether to build libbacktrace support... \" >&6; }\n   if test \"$enable_libstdcxx_backtrace\" == \"auto\"; then\n     enable_libstdcxx_backtrace=no\n   fi\n   if test \"$enable_libstdcxx_backtrace\" == \"yes\"; then\n     BACKTRACE_SUPPORTED=1\n-    BACKTRACE_USES_MALLOC=1\n+\n+    for ac_header in sys/mman.h\n+do :\n+  ac_fn_c_check_header_mongrel \"$LINENO\" \"sys/mman.h\" \"ac_cv_header_sys_mman_h\" \"$ac_includes_default\"\n+if test \"x$ac_cv_header_sys_mman_h\" = xyes; then :\n+  cat >>confdefs.h <<_ACEOF\n+#define HAVE_SYS_MMAN_H 1\n+_ACEOF\n+\n+fi\n+\n+done\n+\n+    case \"${host}\" in\n+      *-*-msdosdjgpp) # DJGPP has sys/man.h, but no mmap\n+\thave_mmap=no ;;\n+      *-*-*)\n+\thave_mmap=\"$ac_cv_header_sys_mman_h\" ;;\n+    esac\n+\n+    if test \"$have_mmap\" = \"no\"; then\n+      VIEW_FILE=read.lo\n+      ALLOC_FILE=alloc.lo\n+    else\n+      VIEW_FILE=mmapio.lo\n+      cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+    #include <sys/mman.h>\n+    #if !defined(MAP_ANONYMOUS) && !defined(MAP_ANON)\n+      #error no MAP_ANONYMOUS\n+    #endif\n+\n+_ACEOF\n+if ac_fn_c_try_cpp \"$LINENO\"; then :\n+  ALLOC_FILE=mmap.lo\n+else\n+  ALLOC_FILE=alloc.lo\n+fi\n+rm -f conftest.err conftest.i conftest.$ac_ext\n+    fi\n+\n+\n+\n+    BACKTRACE_USES_MALLOC=0\n+    if test \"$ALLOC_FILE\" = \"alloc.lo\"; then\n+      BACKTRACE_USES_MALLOC=1\n+    fi\n+\n     if test \"$ac_has_gthreads\" = \"yes\"; then\n       BACKTRACE_SUPPORTS_THREADS=1\n     else"}]}