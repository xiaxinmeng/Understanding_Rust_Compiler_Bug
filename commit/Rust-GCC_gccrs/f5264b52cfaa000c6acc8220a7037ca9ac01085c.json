{"sha": "f5264b52cfaa000c6acc8220a7037ca9ac01085c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjUyNjRiNTJjZmFhMDAwYzZhY2M4MjIwYTcwMzdjYTlhYzAxMDg1Yw==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2002-10-09T04:28:12Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2002-10-09T04:28:12Z"}, "message": "rs6000.md (movdf splitter): Use gen_int_mode on 64-bit hosts.\n\n\t* config/rs6000/rs6000.md (movdf splitter): Use gen_int_mode on\n        64-bit hosts.\n        (movtf_internal): Reference correct displacement for second value\n        in memory.\n        (movtf splitter): Correct generation of constants in 64-bit mode.\n\nFrom-SVN: r57969", "tree": {"sha": "9681731359eac18e0648c7af61349538bd60b0e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9681731359eac18e0648c7af61349538bd60b0e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5264b52cfaa000c6acc8220a7037ca9ac01085c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5264b52cfaa000c6acc8220a7037ca9ac01085c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5264b52cfaa000c6acc8220a7037ca9ac01085c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5264b52cfaa000c6acc8220a7037ca9ac01085c/comments", "author": null, "committer": null, "parents": [{"sha": "8d15eebcb0583a8613a94739baa56ad2ab0414aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d15eebcb0583a8613a94739baa56ad2ab0414aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d15eebcb0583a8613a94739baa56ad2ab0414aa"}], "stats": {"total": 35, "additions": 27, "deletions": 8}, "files": [{"sha": "87408b9d28a63701b8f8fc34a60861477a718037", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5264b52cfaa000c6acc8220a7037ca9ac01085c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5264b52cfaa000c6acc8220a7037ca9ac01085c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5264b52cfaa000c6acc8220a7037ca9ac01085c", "patch": "@@ -1,3 +1,11 @@\n+2002-10-09  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/rs6000.md (movdf splitter): Use gen_int_mode on\n+\t64-bit hosts.\n+\t(movtf_internal): Reference correct displacement for second value\n+\tin memory.\n+\t(movtf splitter): Correct generation of constants in 64-bit mode.\n+\n 2002-10-09  Alan Modra  <amodra@bigpond.net.au>\n \n \t* libgcc2.c (__floatdisf): Properly cure double rounding."}, {"sha": "be20469157933f349039c6654675d3775a1a6ff9", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5264b52cfaa000c6acc8220a7037ca9ac01085c/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5264b52cfaa000c6acc8220a7037ca9ac01085c/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=f5264b52cfaa000c6acc8220a7037ca9ac01085c", "patch": "@@ -8519,7 +8519,7 @@\n   val = ((HOST_WIDE_INT)(unsigned long)l[endian] << 32 |\n         ((HOST_WIDE_INT)(unsigned long)l[1 - endian]));\n \n-  operands[3] = immed_double_const (val, -(val < 0), DImode);\n+  operands[3] = gen_int_mode (val, DImode);\n #else\n   operands[3] = immed_double_const (l[1 - endian], l[endian], DImode);\n #endif\n@@ -8729,9 +8729,9 @@\n       else\n \treturn \\\"fmr %0,%1\\;fmr %L0,%L1\\\";\n     case 1:\n-      return \\\"lfd %0,%1\\;lfd %L0,%L1\\\";\n+      return \\\"lfd %0,%1\\;lfd %L0,%Y1\\\";\n     case 2:\n-      return \\\"stfd %1,%0\\;stfd %L1,%L0\\\";\n+      return \\\"stfd %1,%0\\;stfd %L1,%Y0\\\";\n     case 3:\n     case 4:\n     case 5:\n@@ -8743,7 +8743,7 @@\n \n (define_split\n   [(set (match_operand:TF 0 \"gpc_reg_operand\" \"\")\n-\t(match_operand:TF 1 \"const_double_operand\" \"\"))]\n+\t(match_operand:TF 1 \"easy_fp_constant\" \"\"))]\n   \"(DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_DARWIN)\n    && TARGET_HARD_FLOAT && TARGET_FPRS && ! TARGET_POWERPC64\n    && TARGET_LONG_DOUBLE_128 && reload_completed\n@@ -8789,14 +8789,25 @@\n {\n   long l[4];\n   REAL_VALUE_TYPE rv;\n+  HOST_WIDE_INT val;\n \n   REAL_VALUE_FROM_CONST_DOUBLE (rv, operands[1]);\n   REAL_VALUE_TO_TARGET_LONG_DOUBLE (rv, l);\n \n-  operands[2] = operand_subword (operands[0], 0, 0, TFmode);\n-  operands[3] = operand_subword (operands[0], 1, 0, TFmode);\n-  operands[4] = gen_int_mode (l[0], DImode);\n-  operands[5] = gen_int_mode (l[1], DImode);\n+  operands[2] = gen_lowpart (DImode, operands[0]);\n+  operands[3] = gen_highpart (DImode, operands[0]);\n+#if HOST_BITS_PER_WIDE_INT >= 64\n+  val = ((HOST_WIDE_INT)(unsigned long)l[0] << 32 |\n+        ((HOST_WIDE_INT)(unsigned long)l[1]));\n+  operands[4] = gen_int_mode (val, DImode);\n+\n+  val = ((HOST_WIDE_INT)(unsigned long)l[2] << 32 |\n+        ((HOST_WIDE_INT)(unsigned long)l[3]));\n+  operands[5] = gen_int_mode (val, DImode);\n+#else\n+  operands[4] = immed_double_const (l[1], l[0], DImode);\n+  operands[5] = immed_double_const (l[3], l[2], DImode);\n+#endif\n }\")\n \n (define_insn_and_split \"extenddftf2\""}]}