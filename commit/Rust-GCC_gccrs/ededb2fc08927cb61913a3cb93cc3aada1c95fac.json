{"sha": "ededb2fc08927cb61913a3cb93cc3aada1c95fac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRlZGIyZmMwODkyN2NiNjE5MTNhM2NiOTNjYzNhYWRhMWM5NWZhYw==", "commit": {"author": {"name": "Robert Lipe", "email": "robertl@dgii.com", "date": "1998-02-07T23:00:07Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-02-07T23:00:07Z"}, "message": "gcc.c: Include <strings.h>/<string.h>, <stdlib.h>, <unistd.h>, <fcntl.h>.\n\n        * gcc.c: Include <strings.h>/<string.h>, <stdlib.h>, <unistd.h>,\n        <fcntl.h>.\n        (free_path_suffix): Remove unreferenced static function.\n        (process_command): Remove unused variable temp.\n        (default_arg): Remove unused variable i.\n        (do_spec_1):  Add parens for assignment used as truth value.\n        (main): Likewise.\n        (validate_all_switches): Likewise.\n        (main): Remove unused variables i, first_time>\n\nFrom-SVN: r17768", "tree": {"sha": "fcddbe55e6ea6d26a8ac887dd900414dbb1b342b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fcddbe55e6ea6d26a8ac887dd900414dbb1b342b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ededb2fc08927cb61913a3cb93cc3aada1c95fac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ededb2fc08927cb61913a3cb93cc3aada1c95fac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ededb2fc08927cb61913a3cb93cc3aada1c95fac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ededb2fc08927cb61913a3cb93cc3aada1c95fac/comments", "author": null, "committer": null, "parents": [{"sha": "42374971ba108548b080453c189b43c9a537442f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42374971ba108548b080453c189b43c9a537442f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42374971ba108548b080453c189b43c9a537442f"}], "stats": {"total": 65, "additions": 36, "deletions": 29}, "files": [{"sha": "df18bbf785f65256fb664a6fc096c7dec9ab98ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ededb2fc08927cb61913a3cb93cc3aada1c95fac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ededb2fc08927cb61913a3cb93cc3aada1c95fac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ededb2fc08927cb61913a3cb93cc3aada1c95fac", "patch": "@@ -1,5 +1,15 @@\n Sat Feb  7 23:54:29 1998   Robert Lipe  <robertl@dgii.com>\n \n+\t* gcc.c: Include <strings.h>/<string.h>, <stdlib.h>, <unistd.h>,\n+\t<fcntl.h>.\n+\t(free_path_suffix): Remove unreferenced static function.\n+\t(process_command): Remove unused variable temp.\n+\t(default_arg): Remove unused variable i.\n+\t(do_spec_1):  Add parens for assignment used as truth value.\n+\t(main): Likewise.\n+\t(validate_all_switches): Likewise.\n+\t(main): Remove unused variables i, first_time>\n+\n \t* c-common.c: Include <stdlib.h> and <string.h>/<strings.h>.\n \n         * calls.c (expand_call): Remove unused variables funtree,"}, {"sha": "b98990521760ee04c8fe744025ccc70ed1fa2b3e", "filename": "gcc/gcc.c", "status": "modified", "additions": 26, "deletions": 29, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ededb2fc08927cb61913a3cb93cc3aada1c95fac/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ededb2fc08927cb61913a3cb93cc3aada1c95fac/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=ededb2fc08927cb61913a3cb93cc3aada1c95fac", "patch": "@@ -53,6 +53,26 @@ compilation is specified by a string called a \"spec\".  */\n #endif\n #include <stdio.h>\n \n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#else\n+#ifdef HAVE_STRINGS_H\n+#include <strings.h>\n+#endif\n+#endif\n+\n+#ifdef HAVE_UNISTD_H\n+#include <unistd.h>\n+#endif\n+\n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+\n+#ifdef HAVE_FCNTL_H\n+#include <fcntl.h>\n+#endif\n+\n #ifndef R_OK\n #define R_OK 4\n #define W_OK 2\n@@ -2101,25 +2121,6 @@ unused_prefix_warnings (pprefix)\n     }\n }\n \n-/* Get rid of all prefixes built up so far in *PLISTP.  */\n-\n-static void\n-free_path_prefix (pprefix)\n-     struct path_prefix *pprefix;\n-{\n-  struct prefix_list *pl = pprefix->plist;\n-  struct prefix_list *temp;\n-\n-  while (pl)\n-    {\n-      temp = pl;\n-      pl = pl->next;\n-      free (temp->prefix);\n-      free ((char *) temp);\n-    }\n-\n-  pprefix->plist = (struct prefix_list *) 0;\n-}\n \f\n /* Execute the command specified by the arguments on the current line of spec.\n    When using pipes, this includes several piped-together commands\n@@ -2697,7 +2698,6 @@ process_command (argc, argv)\n \n \t    case 'B':\n \t      {\n-\t\tint *temp = (int *) xmalloc (sizeof (int));\n \t\tchar *value;\n \t\tif (p[1] == 0 && i + 1 == argc)\n \t\t  fatal (\"argument to `-B' is missing\");\n@@ -3136,7 +3136,7 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n   char *string;\n   int value;\n \n-  while (c = *p++)\n+  while ((c = *p++))\n     /* If substituting a switch, treat all chars like letters.\n        Otherwise, NL, SPC, TAB and % are special.  */\n     switch (inswitch ? 'a' : c)\n@@ -4450,7 +4450,7 @@ main (argc, argv)\n \tfirst_time = FALSE;\n \tobstack_grow (&collect_obstack, \"'-\", 2);\n         q = switches[i].part1;\n-\twhile (p = (char *) index (q,'\\''))\n+\twhile ((p = (char *) index (q,'\\'')))\n           {\n             obstack_grow (&collect_obstack, q, p-q);\n             obstack_grow (&collect_obstack, \"'\\\\''\", 4);\n@@ -4463,7 +4463,7 @@ main (argc, argv)\n \t  {\n \t    obstack_grow (&collect_obstack, \" '\", 2);\n \t    q = *args;\n-\t    while (p = (char *) index (q,'\\''))\n+\t    while ((p = (char *) index (q,'\\'')))\n \t      {\n \t\tobstack_grow (&collect_obstack, q, p-q);\n \t\tobstack_grow (&collect_obstack, \"'\\\\''\", 4);\n@@ -4774,8 +4774,6 @@ main (argc, argv)\n   if (error_count == 0)\n     {\n       int tmp = execution_count;\n-      int i;\n-      int first_time;\n \n       /* Rebuild the COMPILER_PATH and LIBRARY_PATH environment variables\n \t for collect.  */\n@@ -5090,7 +5088,7 @@ validate_all_switches ()\n       for (i = 0; i < sizeof comp->spec / sizeof comp->spec[0] && comp->spec[i]; i++)\n \t{\n \t  p = comp->spec[i];\n-\t  while (c = *p++)\n+\t  while ((c = *p++))\n \t    if (c == '%' && *p == '{')\n \t      /* We have a switch spec.  */\n \t      validate_switches (p + 1);\n@@ -5101,14 +5099,14 @@ validate_all_switches ()\n   for (spec = specs; spec ; spec = spec->next)\n     {\n       p = *(spec->ptr_spec);\n-      while (c = *p++)\n+      while ((c = *p++))\n \tif (c == '%' && *p == '{')\n \t  /* We have a switch spec.  */\n \t  validate_switches (p + 1);\n     }\n \n   p = link_command_spec;\n-  while (c = *p++)\n+  while ((c = *p++))\n     if (c == '%' && *p == '{')\n       /* We have a switch spec.  */\n       validate_switches (p + 1);\n@@ -5257,7 +5255,6 @@ default_arg (p, len)\n      int len;\n {\n   char *start, *end;\n-  int i;\n \n   for (start = multilib_defaults; *start != '\\0'; start = end+1)\n     {"}]}