{"sha": "5c609842d13a4c9c6be1a10f7980a74d27daeb85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM2MDk4NDJkMTNhNGM5YzZiZTFhMTBmNzk4MGE3NGQyN2RhZWI4NQ==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2019-07-25T08:49:36Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-09-28T12:30:30Z"}, "message": "Enable GCC support for AMX-TILE,AMX-INT8,AMX-BF16.\n\nAMX-TILE:ldtilecfg/sttilecfg/tileloadd/tileloaddt1/tilezero/tilerelease\nAMX-INT8:tdpbssd/tdpbsud/tdpbusd/tdpbuud\nAMX-BF16:tdpbf16ps\n\ngcc/ChangeLog\n\n\t* common/config/i386/i386-common.c (OPTION_MASK_ISA2_AMX_TILE_SET,\n\tOPTION_MASK_ISA2_AMX_INT8_SET, OPTION_MASK_ISA2_AMX_BF16_SET,\n\tOPTION_MASK_ISA2_AMX_TILE_UNSET, OPTION_MASK_ISA2_AMX_INT8_UNSET,\n\tOPTION_MASK_ISA2_AMX_BF16_UNSET, OPTION_MASK_ISA2_XSAVE_UNSET):\n\tNew marcos.\n\t(ix86_handle_option): Hanlde -mamx-tile, -mamx-int8, -mamx-bf16.\n\t* common/config/i386/i386-cpuinfo.h (processor_types): Add\n\tFEATURE_AMX_TILE, FEATURE_AMX_INT8, FEATURE_AMX_BF16.\n\t* common/config/i386/cpuinfo.h (XSTATE_TILECFG,\n\tXSTATE_TILEDATA, XCR_AMX_ENABLED_MASK): New macro.\n\t(get_available_features): Enable AMX features only if\n\ttheir states are suoorited by OSXSAVE.\n\t* common/config/i386/i386-isas.h: Add ISA_NAME_TABLE_ENTRY\n\tfor amx-tile, amx-int8, amx-bf16.\n\t* config.gcc: Add amxtileintrin.h, amxint8intrin.h,\n\tamxbf16intrin.h to extra headers.\n\t* config/i386/amxbf16intrin.h: New file.\n\t* config/i386/amxint8intrin.h: Ditto.\n\t* config/i386/amxtileintrin.h: Ditto.\n\t* config/i386/cpuid.h (bit_AMX_BF16, bit_AMX_TILE, bit_AMX_INT8):\n\tNew macro.\n\t* config/i386/i386-c.c (ix86_target_macros_internal): Define\n\t__AMX_TILE__, __AMX_INT8__, AMX_BF16__.\n\t* config/i386/i386-options.c (ix86_target_string): Add\n\t-mamx-tile, -mamx-int8, -mamx-bf16.\n\t(ix86_option_override_internal): Handle AMX-TILE,\n\tAMX-INT8, AMX-BF16.\n\t* config/i386/i386.h (TARGET_AMX_TILE, TARGET_AMX_TILE_P,\n\tTARGET_AMX_INT8, TARGET_AMX_INT8_P, TARGET_AMX_BF16_P,\n\tPTA_AMX_TILE, PTA_AMX_INT8, PTA_AMX_BF16): New macros.\n\t* config/i386/i386.opt: Add -mamx-tile, -mamx-int8, -mamx-bf16.\n\t* config/i386/immintrin.h: Include amxtileintrin.h,\n\tamxint8intrin.h, amxbf16intrin.h.\n\t* doc/invoke.texi: Document -mamx-tile, -mamx-int8, -mamx-bf16.\n\t* doc/extend.texi: Document amx-tile, amx-int8, amx-bf16.\n\t* doc/sourcebuild.texi ((Effective-Target Keywords, Other\n\thardware attributes): Document amx_int8, amx_tile, amx_bf16.\n\ngcc/testsuite/ChangeLog\n\n\t* lib/target-supports.exp (check_effective_target_amx_tile,\n\tcheck_effective_target_amx_int8,\n\tcheck_effective_target_amx_bf16): New proc.\n\t* g++.dg/other/i386-2.C: Add -mamx-tile, -mamx-int8, -mamx-bf16.\n\t* g++.dg/other/i386-3.C: Ditto.\n\t* gcc.target/i386/sse-12.c: Ditto.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-14.c: Ditto.\n\t* gcc.target/i386/sse-22.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* gcc.target/i386/funcspec-56.inc: Add new target attribute.\n\t* gcc.target/i386/amx-check.h: New header file.\n\t* gcc.target/i386/amxbf16-asmatt-1.c: New test.\n\t* gcc.target/i386/amxint8-asmatt-1.c: New test.\n\t* gcc.target/i386/amxtile-asmatt-1.c: Ditto.\n\t* gcc.target/i386/amxbf16-asmintel-1.c: Ditto.\n\t* gcc.target/i386/amxint8-asmintel-1.c: Ditto.\n\t* gcc.target/i386/amxtile-asmintel-1.c: Ditto.\n\t* gcc.target/i386/amxbf16-dpbf16ps-2.c: Ditto.\n\t* gcc.target/i386/amxint8-dpbssd-2.c: Ditto.\n\t* gcc.target/i386/amxint8-dpbsud-2.c: Ditto.\n\t* gcc.target/i386/amxint8-dpbusd-2.c: Ditto.\n\t* gcc.target/i386/amxint8-dpbuud-2.c: Ditto.\n\t* gcc.target/i386/amxtile-2.c: Ditto.", "tree": {"sha": "07c87896cb1402fbdd84d01ca81e5f0404783824", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07c87896cb1402fbdd84d01ca81e5f0404783824"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c609842d13a4c9c6be1a10f7980a74d27daeb85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c609842d13a4c9c6be1a10f7980a74d27daeb85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c609842d13a4c9c6be1a10f7980a74d27daeb85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c609842d13a4c9c6be1a10f7980a74d27daeb85/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92f0d3d03a78a8aabe62e4c1e1b300b01516732f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92f0d3d03a78a8aabe62e4c1e1b300b01516732f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92f0d3d03a78a8aabe62e4c1e1b300b01516732f"}], "stats": {"total": 1045, "additions": 1032, "deletions": 13}, "files": [{"sha": "c96455ce64f2b4b91eae79d5ad43435d38a406ce", "filename": "gcc/common/config/i386/cpuinfo.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h?ref=5c609842d13a4c9c6be1a10f7980a74d27daeb85", "patch": "@@ -509,15 +509,20 @@ get_available_features (struct __processor_model *cpu_model,\n #define XSTATE_OPMASK\t\t\t0x20\n #define XSTATE_ZMM\t\t\t0x40\n #define XSTATE_HI_ZMM\t\t\t0x80\n+#define XSTATE_TILECFG\t\t\t0x20000\n+#define XSTATE_TILEDATA\t\t0x40000\n \n #define XCR_AVX_ENABLED_MASK \\\n   (XSTATE_SSE | XSTATE_YMM)\n #define XCR_AVX512F_ENABLED_MASK \\\n   (XSTATE_SSE | XSTATE_YMM | XSTATE_OPMASK | XSTATE_ZMM | XSTATE_HI_ZMM)\n+#define XCR_AMX_ENABLED_MASK \\\n+  (XSTATE_TILECFG | XSTATE_TILEDATA)\n \n   /* Check if AVX and AVX512 are usable.  */\n   int avx_usable = 0;\n   int avx512_usable = 0;\n+  int amx_usable = 0;\n   if ((ecx & bit_OSXSAVE))\n     {\n       /* Check if XMM, YMM, OPMASK, upper 256 bits of ZMM0-ZMM15 and\n@@ -533,6 +538,8 @@ get_available_features (struct __processor_model *cpu_model,\n \t  avx512_usable = ((xcrlow & XCR_AVX512F_ENABLED_MASK)\n \t\t\t   == XCR_AVX512F_ENABLED_MASK);\n \t}\n+      amx_usable = ((xcrlow & XCR_AMX_ENABLED_MASK)\n+\t\t    == XCR_AMX_ENABLED_MASK);\n     }\n \n #define set_feature(f) \\\n@@ -651,6 +658,15 @@ get_available_features (struct __processor_model *cpu_model,\n \tset_feature (FEATURE_PCONFIG);\n       if (edx & bit_IBT)\n \tset_feature (FEATURE_IBT);\n+      if (amx_usable)\n+\t{\n+\t  if (edx & bit_AMX_TILE)\n+\t    set_feature (FEATURE_AMX_TILE);\n+\t  if (edx & bit_AMX_INT8)\n+\t    set_feature (FEATURE_AMX_INT8);\n+\t  if (edx & bit_AMX_BF16)\n+\t    set_feature (FEATURE_AMX_BF16);\n+\t}\n       if (avx512_usable)\n \t{\n \t  if (ebx & bit_AVX512F)"}, {"sha": "10142149115d10e53237e4f153c2058ebd5e5f61", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=5c609842d13a4c9c6be1a10f7980a74d27daeb85", "patch": "@@ -101,6 +101,9 @@ along with GCC; see the file COPYING3.  If not see\n   (OPTION_MASK_ISA_XSAVEC | OPTION_MASK_ISA_XSAVE_SET)\n #define OPTION_MASK_ISA_CLWB_SET OPTION_MASK_ISA_CLWB\n #define OPTION_MASK_ISA2_AVX512VP2INTERSECT_SET OPTION_MASK_ISA2_AVX512VP2INTERSECT\n+#define OPTION_MASK_ISA2_AMX_TILE_SET OPTION_MASK_ISA2_AMX_TILE\n+#define OPTION_MASK_ISA2_AMX_INT8_SET OPTION_MASK_ISA2_AMX_INT8\n+#define OPTION_MASK_ISA2_AMX_BF16_SET OPTION_MASK_ISA2_AMX_BF16\n \n /* SSE4 includes both SSE4.1 and SSE4.2. -msse4 should be the same\n    as -msse4.2.  */\n@@ -194,6 +197,7 @@ along with GCC; see the file COPYING3.  If not see\n   (OPTION_MASK_ISA_XSAVE | OPTION_MASK_ISA_XSAVEOPT_UNSET \\\n    | OPTION_MASK_ISA_XSAVES_UNSET | OPTION_MASK_ISA_XSAVEC_UNSET \\\n    | OPTION_MASK_ISA_AVX_UNSET)\n+#define OPTION_MASK_ISA2_XSAVE_UNSET OPTION_MASK_ISA2_AMX_TILE_UNSET\n #define OPTION_MASK_ISA_XSAVEOPT_UNSET OPTION_MASK_ISA_XSAVEOPT\n #define OPTION_MASK_ISA_AVX2_UNSET \\\n   (OPTION_MASK_ISA_AVX2 | OPTION_MASK_ISA_AVX512F_UNSET)\n@@ -247,6 +251,9 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA2_SERIALIZE_UNSET OPTION_MASK_ISA2_SERIALIZE\n #define OPTION_MASK_ISA2_AVX512VP2INTERSECT_UNSET OPTION_MASK_ISA2_AVX512VP2INTERSECT\n #define OPTION_MASK_ISA2_TSXLDTRK_UNSET OPTION_MASK_ISA2_TSXLDTRK\n+#define OPTION_MASK_ISA2_AMX_TILE_UNSET OPTION_MASK_ISA2_AMX_TILE\n+#define OPTION_MASK_ISA2_AMX_INT8_UNSET OPTION_MASK_ISA2_AMX_INT8\n+#define OPTION_MASK_ISA2_AMX_BF16_UNSET OPTION_MASK_ISA2_AMX_BF16\n \n /* SSE4 includes both SSE4.1 and SSE4.2.  -mno-sse4 should the same\n    as -mno-sse4.1. */\n@@ -931,6 +938,47 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mamx_tile:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA2_AMX_TILE_SET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AMX_TILE_SET;\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_XSAVE_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_XSAVE_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_AMX_TILE_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AMX_TILE_UNSET;\n+\t}\n+      return true;\n+\n+    case OPT_mamx_int8:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA2_AMX_INT8_SET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AMX_INT8_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_AMX_INT8_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AMX_INT8_UNSET;\n+\t}\n+      return true;\n+\n+    case OPT_mamx_bf16:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA2_AMX_BF16_SET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AMX_BF16_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_AMX_BF16_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AMX_BF16_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_mfma:\n       if (value)\n \t{\n@@ -1265,6 +1313,8 @@ ix86_handle_option (struct gcc_options *opts,\n \t{\n \t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_XSAVE_UNSET;\n \t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_XSAVE_UNSET;\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_XSAVE_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_XSAVE_UNSET;\n \t}\n       return true;\n "}, {"sha": "5b94b1f1df7760106e424c0394e6b04f65163af7", "filename": "gcc/common/config/i386/i386-cpuinfo.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h?ref=5c609842d13a4c9c6be1a10f7980a74d27daeb85", "patch": "@@ -216,6 +216,9 @@ enum processor_features\n   FEATURE_XSAVEC,\n   FEATURE_XSAVEOPT,\n   FEATURE_XSAVES,\n+  FEATURE_AMX_TILE,\n+  FEATURE_AMX_INT8,\n+  FEATURE_AMX_BF16,\n   CPU_FEATURE_MAX\n };\n "}, {"sha": "3c830ea08ff23258a5f0dfe7a869face73b3dc2b", "filename": "gcc/common/config/i386/i386-isas.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h?ref=5c609842d13a4c9c6be1a10f7980a74d27daeb85", "patch": "@@ -160,4 +160,7 @@ ISA_NAMES_TABLE_START\n   ISA_NAMES_TABLE_ENTRY(\"xsaveopt\", FEATURE_XSAVEOPT, P_NONE,\n \t\t\t\"-mxsaveopt\")\n   ISA_NAMES_TABLE_ENTRY(\"xsaves\", FEATURE_XSAVES, P_NONE, \"-mxsaves\")\n+  ISA_NAMES_TABLE_ENTRY(\"amx-tile\", FEATURE_AMX_TILE, P_NONE, \"-mamx-tile\")\n+  ISA_NAMES_TABLE_ENTRY(\"amx-int8\", FEATURE_AMX_INT8, P_NONE, \"-mamx-int8\")\n+  ISA_NAMES_TABLE_ENTRY(\"amx-bf16\", FEATURE_AMX_BF16, P_NONE, \"-mamx-bf16\")\n ISA_NAMES_TABLE_END"}, {"sha": "2d0cfde284b924a2f64c71ed60f3902fecda9726", "filename": "gcc/config.gcc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=5c609842d13a4c9c6be1a10f7980a74d27daeb85", "patch": "@@ -412,7 +412,8 @@ i[34567]86-*-*)\n \t\t       waitpkgintrin.h cldemoteintrin.h avx512bf16vlintrin.h\n \t\t       avx512bf16intrin.h enqcmdintrin.h serializeintrin.h\n \t\t       avx512vp2intersectintrin.h avx512vp2intersectvlintrin.h\n-\t\t       tsxldtrkintrin.h\"\n+\t\t       tsxldtrkintrin.h amxtileintrin.h amxint8intrin.h\n+\t\t       amxbf16intrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -447,7 +448,8 @@ x86_64-*-*)\n \t\t       waitpkgintrin.h cldemoteintrin.h avx512bf16vlintrin.h\n \t\t       avx512bf16intrin.h enqcmdintrin.h serializeintrin.h\n \t\t       avx512vp2intersectintrin.h avx512vp2intersectvlintrin.h\n-\t\t       tsxldtrkintrin.h\"\n+\t\t       tsxldtrkintrin.h amxtileintrin.h amxint8intrin.h\n+\t\t       amxbf16intrin.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "b162096394409c0aecc5e784dc9db9b85cf29c33", "filename": "gcc/config/i386/amxbf16intrin.h", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Fconfig%2Fi386%2Famxbf16intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Fconfig%2Fi386%2Famxbf16intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Famxbf16intrin.h?ref=5c609842d13a4c9c6be1a10f7980a74d27daeb85", "patch": "@@ -0,0 +1,29 @@\n+#if !defined _IMMINTRIN_H_INCLUDED\n+#error \"Never use <amxbf16intrin.h> directly; include <immintrin.h> instead.\"\n+#endif\n+\n+#ifndef _AMXBF16INTRIN_H_INCLUDED\n+#define _AMXBF16INTRIN_H_INCLUDED\n+\n+#if !defined(__AMX_BF16__)\n+#pragma GCC push_options\n+#pragma GCC target(\"amx-bf16\")\n+#define __DISABLE_AMX_BF16__\n+#endif /* __AMX_BF16__ */\n+\n+#if defined(__x86_64__) && defined(__AMX_BF16__)\n+#define _tile_dpbf16ps_internal(dst,src1,src2)\t\t\t\t\t\\\n+  __asm__ volatile\\\n+  (\"{tdpbf16ps\\t%%tmm\"#src2\", %%tmm\"#src1\", %%tmm\"#dst\"|tdpbf16ps\\t%%tmm\"#dst\", %%tmm\"#src1\", %%tmm\"#src2\"}\" ::)\n+\n+#define _tile_dpbf16ps(dst,src1,src2)\t\t\t\t\t\\\n+  _tile_dpbf16ps_internal (dst, src1, src2)\n+\n+#endif\n+\n+#ifdef __DISABLE_AMX_BF16__\n+#undef __DISABLE_AMX_BF16__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_AMX_BF16__ */\n+\n+#endif /* _AMXBF16INTRIN_H_INCLUDED */"}, {"sha": "11adc1f1295fa5d74d01b5d427664e4a66fb10fa", "filename": "gcc/config/i386/amxint8intrin.h", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Fconfig%2Fi386%2Famxint8intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Fconfig%2Fi386%2Famxint8intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Famxint8intrin.h?ref=5c609842d13a4c9c6be1a10f7980a74d27daeb85", "patch": "@@ -0,0 +1,38 @@\n+#if !defined _IMMINTRIN_H_INCLUDED\n+#error \"Never use <amxint8intrin.h> directly; include <immintrin.h> instead.\"\n+#endif\n+\n+#ifndef _AMXINT8INTRIN_H_INCLUDED\n+#define _AMXINT8INTRIN_H_INCLUDED\n+\n+#if !defined(__AMX_INT8__)\n+#pragma GCC push_options\n+#pragma GCC target(\"amx-int8\")\n+#define __DISABLE_AMX_INT8__\n+#endif /* __AMX_INT8__ */\n+\n+#if defined(__x86_64__) && defined(__AMX_INT8__)\n+#define _tile_int8_dp_internal(name,dst,src1,src2)\t\t\t\t\t\\\n+  __asm__ volatile\t\t\t\t\t\t\t\\\n+  (\"{\"#name\"\\t%%tmm\"#src2\", %%tmm\"#src1\", %%tmm\"#dst\"|\"#name\"\\t%%tmm\"#dst\", %%tmm\"#src1\", %%tmm\"#src2\"}\" ::)\n+\n+#define _tile_dpbssd(dst,src1,src2)\t\t\t\t\t\\\n+  _tile_int8_dp_internal (tdpbssd, dst, src1, src2)\n+\n+#define _tile_dpbsud(dst,src1,src2)\t\t\t\t\t\\\n+  _tile_int8_dp_internal (tdpbsud, dst, src1, src2)\n+\n+#define _tile_dpbusd(dst,src1,src2)\t\t\t\t\t\\\n+  _tile_int8_dp_internal (tdpbusd, dst, src1, src2)\n+\n+#define _tile_dpbuud(dst,src1,src2)\t\t\t\t\t\\\n+  _tile_int8_dp_internal (tdpbuud, dst, src1, src2)\n+\n+#endif\n+\n+#ifdef __DISABLE_AMX_INT8__\n+#undef __DISABLE_AMX_INT8__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_AMX_INT8__ */\n+\n+#endif /* _AMXINT8INTRIN_H_INCLUDED */"}, {"sha": "e78e5c04909c0beb6fbd0db2a3f13194e362cba2", "filename": "gcc/config/i386/amxtileintrin.h", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Fconfig%2Fi386%2Famxtileintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Fconfig%2Fi386%2Famxtileintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Famxtileintrin.h?ref=5c609842d13a4c9c6be1a10f7980a74d27daeb85", "patch": "@@ -0,0 +1,75 @@\n+#if !defined _IMMINTRIN_H_INCLUDED\n+#error \"Never use <amxtileintrin.h> directly; include <immintrin.h> instead.\"\n+#endif\n+\n+#ifndef _AMXTILEINTRIN_H_INCLUDED\n+#define _AMXTILEINTRIN_H_INCLUDED\n+\n+#if !defined(__AMX_TILE__)\n+#pragma GCC push_options\n+#pragma GCC target(\"amx-tile\")\n+#define __DISABLE_AMX_TILE__\n+#endif /* __AMX_TILE__ */\n+\n+#if defined(__x86_64__) && defined(__AMX_TILE__)\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_tile_loadconfig (const void *__config)\n+{\n+  __asm__ volatile (\"ldtilecfg\\t%X0\" :: \"m\" (*((const void **)__config)));\n+}\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_tile_storeconfig (void *__config)\n+{\n+  __asm__ volatile (\"sttilecfg\\t%X0\" : \"=m\" (*((void **)__config)));\n+}\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_tile_release (void)\n+{\n+  __asm__ volatile (\"tilerelease\" ::);\n+}\n+\n+#define _tile_loadd(dst,base,stride)\t\t\\\n+  _tile_loadd_internal (dst, base, stride)\n+\n+#define _tile_loadd_internal(dst,base,stride)\t\t\t\t\\\n+  __asm__ volatile\t\t\t\t\t\t\t\\\n+  (\"{tileloadd\\t(%0,%1,1), %%tmm\"#dst\"|tileloadd\\t%%tmm\"#dst\", [%0+%1*1]}\" \\\n+   :: \"r\" ((const void*) base), \"r\" ((long) stride))\n+\n+#define _tile_stream_loadd(dst,base,stride)\t\t\\\n+  _tile_stream_loadd_internal (dst, base, stride)\n+\n+#define _tile_stream_loadd_internal(dst,base,stride)\t\t\t\\\n+  __asm__ volatile\t\t\t\t\t\t\t\\\n+  (\"{tileloaddt1\\t(%0,%1,1), %%tmm\"#dst\"|tileloaddt1\\t%%tmm\"#dst\", [%0+%1*1]}\" \\\n+   :: \"r\" ((const void*) base), \"r\" ((long) stride))\n+\n+#define _tile_stored(dst,base,stride)\t\t\\\n+  _tile_stored_internal (dst, base, stride)\n+\n+#define _tile_stored_internal(src,base,stride)\t\t\t\t\\\n+  __asm__ volatile\t\t\t\t\t\t\t\\\n+  (\"{tilestored\\t%%tmm\"#src\", (%0,%1,1)|tilestored\\t[%0+%1*1], %%tmm\"#src\"}\" \\\n+   :: \"r\" ((void*) base), \"r\" ((long) stride) \\\n+   : \"memory\")\n+\n+#define _tile_zero(dst)\t\t\t\t\\\n+  _tile_zero_internal (dst)\n+\n+#define _tile_zero_internal(dst)\t\t\\\n+  __asm__ volatile\t\t\t\t\\\n+  (\"tilezero\\t%%tmm\"#dst ::)\n+\n+#endif\n+\n+#ifdef __DISABLE_AMX_TILE__\n+#undef __DISABLE_AMX_TILE__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_AMX_TILE__ */\n+\n+#endif /* _AMXTILEINTRIN_H_INCLUDED */"}, {"sha": "4598434fd02ffd55fccf7b88523a141301033b5b", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=5c609842d13a4c9c6be1a10f7980a74d27daeb85", "patch": "@@ -127,6 +127,9 @@\n #define bit_PCONFIG\t(1 << 18)\n #define bit_SERIALIZE\t(1 << 14)\n #define bit_TSXLDTRK    (1 << 16)\n+#define bit_AMX_BF16    (1 << 22)\n+#define bit_AMX_TILE    (1 << 24)\n+#define bit_AMX_INT8    (1 << 25)\n \n /* XFEATURE_ENABLED_MASK register bits (%eax == 0xd, %ecx == 0) */\n #define bit_BNDREGS     (1 << 3)"}, {"sha": "9da682ab05c92f205fa25af7f8c9e3f80e4d34ea", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=5c609842d13a4c9c6be1a10f7980a74d27daeb85", "patch": "@@ -588,6 +588,13 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__ENQCMD__\");\n   if (isa_flag2 & OPTION_MASK_ISA2_TSXLDTRK)\n     def_or_undef (parse_in, \"__TSXLDTRK__\");\n+  if (isa_flag2 & OPTION_MASK_ISA2_AMX_TILE)\n+    def_or_undef (parse_in, \"__AMX_TILE__\");\n+  if (isa_flag2 & OPTION_MASK_ISA2_AMX_INT8)\n+    def_or_undef (parse_in, \"__AMX_INT8__\");\n+  if (isa_flag2 & OPTION_MASK_ISA2_AMX_BF16)\n+    def_or_undef (parse_in, \"__AMX_BF16__\");\n+\n   if (TARGET_IAMCU)\n     {\n       def_or_undef (parse_in, \"__iamcu\");"}, {"sha": "597de533fbd4e895a351930f1b3efecb24b0df9c", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=5c609842d13a4c9c6be1a10f7980a74d27daeb85", "patch": "@@ -209,7 +209,10 @@ static struct ix86_target_opts isa2_opts[] =\n   { \"-mavx512bf16\",\tOPTION_MASK_ISA2_AVX512BF16 },\n   { \"-menqcmd\",\t\tOPTION_MASK_ISA2_ENQCMD },\n   { \"-mserialize\",\tOPTION_MASK_ISA2_SERIALIZE },\n-  { \"-mtsxldtrk\",\tOPTION_MASK_ISA2_TSXLDTRK }\n+  { \"-mtsxldtrk\",\tOPTION_MASK_ISA2_TSXLDTRK },\n+  { \"-mamx-tile\",\tOPTION_MASK_ISA2_AMX_TILE },\n+  { \"-mamx-int8\",\tOPTION_MASK_ISA2_AMX_INT8 },\n+  { \"-mamx-bf16\",\tOPTION_MASK_ISA2_AMX_BF16 }\n };\n static struct ix86_target_opts isa_opts[] =\n {\n@@ -1033,6 +1036,9 @@ ix86_valid_target_attribute_inner_p (tree fndecl, tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"enqcmd\", OPT_menqcmd),\n     IX86_ATTR_ISA (\"serialize\", OPT_mserialize),\n     IX86_ATTR_ISA (\"tsxldtrk\", OPT_mtsxldtrk),\n+    IX86_ATTR_ISA (\"amx-tile\", OPT_mamx_tile),\n+    IX86_ATTR_ISA (\"amx-int8\", OPT_mamx_int8),\n+    IX86_ATTR_ISA (\"amx-bf16\", OPT_mamx_bf16),\n \n     /* enum options */\n     IX86_ATTR_ENUM (\"fpmath=\",\tOPT_mfpmath_),\n@@ -2258,6 +2264,18 @@ ix86_option_override_internal (bool main_args_p,\n \t    && !(opts->x_ix86_isa_flags2_explicit\n \t\t & OPTION_MASK_ISA2_AVX512BF16))\n \t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA2_AVX512BF16;\n+\tif (((processor_alias_table[i].flags & PTA_AMX_TILE) != 0)\n+\t    && !(opts->x_ix86_isa_flags2_explicit\n+\t\t & OPTION_MASK_ISA2_AMX_TILE))\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA2_AMX_TILE;\n+\tif (((processor_alias_table[i].flags & PTA_AMX_INT8) != 0)\n+\t    && !(opts->x_ix86_isa_flags2_explicit\n+\t\t & OPTION_MASK_ISA2_AMX_INT8))\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA2_AMX_INT8;\n+\tif (((processor_alias_table[i].flags & PTA_AMX_BF16) != 0)\n+\t    && !(opts->x_ix86_isa_flags2_explicit\n+\t\t & OPTION_MASK_ISA2_AMX_BF16))\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA2_AMX_BF16;\n         if (((processor_alias_table[i].flags & PTA_MOVDIRI) != 0)\n             && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_MOVDIRI))\n           opts->x_ix86_isa_flags |= OPTION_MASK_ISA_MOVDIRI;"}, {"sha": "a449653cc3e6592fe162ad9e21b1fd742c317d37", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=5c609842d13a4c9c6be1a10f7980a74d27daeb85", "patch": "@@ -203,6 +203,12 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_SERIALIZE_P(x) TARGET_ISA2_SERIALIZE_P(x)\n #define TARGET_TSXLDTRK\tTARGET_ISA2_TSXLDTRK\n #define TARGET_TSXLDTRK_P(x) TARGET_ISA2_TSXLDTRK_P(x)\n+#define TARGET_AMX_TILE TARGET_ISA2_AMX_TILE\n+#define TARGET_AMX_TILE_P(x) TARGET_ISA2_AMX_TILE(x)\n+#define TARGET_AMX_INT8 TARGET_ISA2_AMX_INT8\n+#define TARGET_AMX_INT8_P(x) TARGET_ISA2_AMX_INT8(x)\n+#define TARGET_AMX_BF16 TARGET_ISA2_AMX_BF16\n+#define TARGET_AMX_BF16_P(x) TARGET_ISA2_AMX_BF16(x)\n \n #define TARGET_LP64\tTARGET_ABI_64\n #define TARGET_LP64_P(x)\tTARGET_ABI_64_P(x)\n@@ -2466,6 +2472,9 @@ const wide_int_bitmask PTA_ENQCMD (0, HOST_WIDE_INT_1U << 15);\n const wide_int_bitmask PTA_CLDEMOTE (0, HOST_WIDE_INT_1U << 16);\n const wide_int_bitmask PTA_SERIALIZE (0, HOST_WIDE_INT_1U << 17);\n const wide_int_bitmask PTA_TSXLDTRK (0, HOST_WIDE_INT_1U << 18);\n+const wide_int_bitmask PTA_AMX_TILE(0, HOST_WIDE_INT_1U << 19);\n+const wide_int_bitmask PTA_AMX_INT8(0, HOST_WIDE_INT_1U << 20);\n+const wide_int_bitmask PTA_AMX_BF16(0, HOST_WIDE_INT_1U << 21);\n \n const wide_int_bitmask PTA_CORE2 = PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2\n   | PTA_SSE3 | PTA_SSSE3 | PTA_CX16 | PTA_FXSR;\n@@ -2499,7 +2508,8 @@ const wide_int_bitmask PTA_TIGERLAKE = PTA_ICELAKE_CLIENT | PTA_MOVDIRI\n   | PTA_MOVDIR64B | PTA_CLWB | PTA_AVX512VP2INTERSECT;\n const wide_int_bitmask PTA_SAPPHIRERAPIDS = PTA_COOPERLAKE | PTA_MOVDIRI\n   | PTA_MOVDIR64B | PTA_AVX512VP2INTERSECT | PTA_ENQCMD | PTA_CLDEMOTE\n-  | PTA_PTWRITE | PTA_WAITPKG | PTA_SERIALIZE | PTA_TSXLDTRK;\n+  | PTA_PTWRITE | PTA_WAITPKG | PTA_SERIALIZE | PTA_TSXLDTRK | PTA_AMX_TILE\n+  | PTA_AMX_INT8 | PTA_AMX_BF16;\n const wide_int_bitmask PTA_ALDERLAKE = PTA_SKYLAKE | PTA_CLDEMOTE | PTA_PTWRITE\n   | PTA_WAITPKG | PTA_SERIALIZE;\n const wide_int_bitmask PTA_KNL = PTA_BROADWELL | PTA_AVX512PF | PTA_AVX512ER"}, {"sha": "9389dc24948370cce38c9c64b7b71a3251aca5b5", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=5c609842d13a4c9c6be1a10f7980a74d27daeb85", "patch": "@@ -1114,4 +1114,16 @@ Support SERIALIZE built-in functions and code generation.\n \n mtsxldtrk\n Target Report Mask(ISA2_TSXLDTRK) Var(ix86_isa_flags2) Save\n-Support TSXLDTRK built-in functions and code generation.\n\\ No newline at end of file\n+Support TSXLDTRK built-in functions and code generation.\n+\n+mamx-tile\n+Target Report Mask(ISA2_AMX_TILE) Var(ix86_isa_flags2) Save\n+Support AMX-TILE built-in functions and code generation.\n+\n+mamx-int8\n+Target Report Mask(ISA2_AMX_INT8) Var(ix86_isa_flags2) Save\n+Support AMX-INT8 built-in functions and code generation.\n+\n+mamx-bf16\n+Target Report Mask(ISA2_AMX_BF16) Var(ix86_isa_flags2) Save\n+Support AMX-BF16 built-in functions and code generation."}, {"sha": "6d25f44c30368d49fb3a21fd58b8f8ec3043be3b", "filename": "gcc/config/i386/immintrin.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fimmintrin.h?ref=5c609842d13a4c9c6be1a10f7980a74d27daeb85", "patch": "@@ -144,6 +144,12 @@\n \n #include <tsxldtrkintrin.h>\n \n+#include <amxtileintrin.h>\n+\n+#include <amxint8intrin.h>\n+\n+#include <amxbf16intrin.h>\n+\n #include <rdseedintrin.h>\n \n #include <prfchwintrin.h>"}, {"sha": "c9f72991bba91e1adf2941e8cd1165a18a3cd04a", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=5c609842d13a4c9c6be1a10f7980a74d27daeb85", "patch": "@@ -6623,6 +6623,21 @@ Enable/disable the generation of the XSAVEOPT instructions.\n @cindex @code{target(\"xsaves\")} function attribute, x86\n Enable/disable the generation of the XSAVES instructions.\n \n+@item amx-tile\n+@itemx no-amx-tile\n+@cindex @code{target(\"amx-tile\")} function attribute, x86\n+Enable/disable the generation of the AMX-TILE instructions.\n+\n+@item amx-int8\n+@itemx no-amx-int8\n+@cindex @code{target(\"amx-int8\")} function attribute, x86\n+Enable/disable the generation of the AMX-INT8 instructions.\n+\n+@item amx-bf16\n+@itemx no-amx-bf16\n+@cindex @code{target(\"amx-bf16\")} function attribute, x86\n+Enable/disable the generation of the AMX-BF16 instructions.\n+\n @item cld\n @itemx no-cld\n @cindex @code{target(\"cld\")} function attribute, x86"}, {"sha": "3e087b6e0d9556d636e240c6603277bf1e5d6154", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=5c609842d13a4c9c6be1a10f7980a74d27daeb85", "patch": "@@ -1362,6 +1362,7 @@ See RS/6000 and PowerPC Options.\n -mvpclmulqdq  -mavx512bitalg  -mmovdiri  -mmovdir64b  -mavx512vpopcntdq @gol\n -mavx5124fmaps  -mavx512vnni  -mavx5124vnniw  -mprfchw  -mrdpid @gol\n -mrdseed  -msgx -mavx512vp2intersect -mserialize -mtsxldtrk@gol\n+-mamx-tile  -mamx-int8  -mamx-bf16@gol\n -mcldemote  -mms-bitfields  -mno-align-stringops  -minline-all-stringops @gol\n -minline-stringops-dynamically  -mstringop-strategy=@var{alg} @gol\n -mmemcpy-strategy=@var{strategy}  -mmemset-strategy=@var{strategy} @gol\n@@ -30205,6 +30206,15 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @need 200\n @itemx -mserialize\n @opindex mserialize\n+@need 200\n+@itemx -mamx-tile\n+@opindex mamx-tile\n+@need 200\n+@itemx -mamx-int8\n+@opindex mamx-int8\n+@need 200\n+@itemx -mamx-bf16\n+@opindex mamx-bf16\n These switches enable the use of instructions in the MMX, SSE,\n SSE2, SSE3, SSSE3, SSE4, SSE4A, SSE4.1, SSE4.2, AVX, AVX2, AVX512F, AVX512PF,\n AVX512ER, AVX512CD, AVX512VL, AVX512BW, AVX512DQ, AVX512IFMA, AVX512VBMI, SHA,"}, {"sha": "b625f1e9f680b63a91874c41f631dac8340f4d0f", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=5c609842d13a4c9c6be1a10f7980a74d27daeb85", "patch": "@@ -2249,6 +2249,15 @@ Target supports the execution of @code{avx512f} instructions.\n @item avx512vp2intersect\n Target supports the execution of @code{avx512vp2intersect} instructions.\n \n+@item amx_tile\n+Target supports the execution of @code{amx-tile} instructions.\n+\n+@item amx_int8\n+Target supports the execution of @code{amx-int8} instructions.\n+\n+@item amx_bf16\n+Target supports the execution of @code{amx-bf16} instructions.\n+\n @item cell_hw\n Test system can execute AltiVec and Cell PPU instructions.\n "}, {"sha": "449f30dbacec631d62593693537770bc24afc7ad", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=5c609842d13a4c9c6be1a10f7980a74d27daeb85", "patch": "@@ -1,11 +1,12 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,\n    popcntintrin.h, fmaintrin.h, pkuintrin.h, avx5124fmapsintrin.h,\n    avx5124vnniwintrin.h, avx512vpopcntdqintrin.h gfniintrin.h\n    avx512bitalgintrin.h, avx512vp2intersectintrin.h, tsxldtrkintrin.h,\n+   amxtileintrin.h, amxint8intrin.h, amxbf16intrin.h,\n    avx512vp2intersectvlintrin.h and mm_malloc.h.h are usable\n    with -O -pedantic-errors.  */\n "}, {"sha": "29e98919386c2a428d82fbfb01c0106479bbbdc3", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=5c609842d13a4c9c6be1a10f7980a74d27daeb85", "patch": "@@ -1,11 +1,12 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,\n    popcntintrin.h, fmaintrin.h, pkuintrin.h, avx5124fmapsintrin.h,\n    avx5124vnniwintrin.h, avx512vpopcntdqintrin.h gfniintrin.h\n    avx512bitalgintrin.h, avx512vp2intersectintrin.h, tsxldtrkintrin.h,\n+   amxtileintrin.h, amxint8intrin.h, amxbf16intrin.h,\n    avx512vp2intersectvlintrin.h and mm_malloc.h are usable\n    with -O -fkeep-inline-functions.  */\n "}, {"sha": "03616ff0b8e2fd3ffd5211cf508f4c96fbd1ea4f", "filename": "gcc/testsuite/gcc.target/i386/amx-check.h", "status": "added", "additions": 185, "deletions": 0, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famx-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famx-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famx-check.h?ref=5c609842d13a4c9c6be1a10f7980a74d27daeb85", "patch": "@@ -0,0 +1,185 @@\n+#ifndef AMX_CHECK_H_INCLUDED\n+#define AMX_CHECK_H_INCLUDED\n+\n+#include <stdlib.h>\n+#include <string.h>\n+#include <stdint.h>\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+#include \"cpuid.h\"\n+\n+/* TODO: The tmm emulation is temporary for current\n+   AMX implementation with no tmm regclass, should\n+   be changed in the future. */\n+typedef struct __tile_config\n+{\n+  uint8_t palette_id; \n+  uint8_t start_row;   \n+  uint8_t reserved_0[14];\n+  uint16_t colsb[8]; /* Colum size of each tmm register in bytes */\n+  uint16_t reserved_1[8];\n+  uint8_t rows[8]; /* Row size of each tmm reg in bytes */\n+  uint8_t reserved_2[8];\n+} __tilecfg;\n+\n+typedef union __union_tile_config\n+{\n+  __tilecfg s;\n+  uint8_t a[64];\n+} __tilecfg_u;\n+\n+typedef struct __tile\n+{\n+  /* Max size of tile register */\n+  uint8_t buf[1024];\n+  int rows;\n+  int colsb;\n+} __tile;\n+\n+/* Maxium col/row size in bytes */\n+#define MAX_ROWS 16\n+#define MAX_COLS 64\n+\n+/* Stride (colum width in byte) used for tileload/store */\n+#define _STRIDE 64\n+\n+/* Initialize tile config by setting all tmm size to 16x64 */\n+void init_tile_config (__tilecfg_u *dst)\n+{\n+  int i;\n+\n+  dst->s.palette_id = 1;\n+  dst->s.start_row = 0;\n+\n+  for (i = 0; i < 14; i++)\n+    dst->s.reserved_0[i] = 0;\n+\n+  for (i = 0; i < 8; i++)\n+  {\n+    dst->s.colsb[i] = _STRIDE;\n+    dst->s.rows[i] = 16;\n+    dst->s.reserved_1[i] = 0;\n+    dst->s.reserved_2[i] = 0;\n+  }\n+\n+  _tile_loadconfig (dst->a);\n+}\n+\n+/* Init __tile variable that going to be store to register\n+   w/o extra buffer. If buffer exists, it should be the same\n+   size matrix as corresponding tmm register.\n+   Should execute init_tile_config first */\n+void init_tile_src (const int tmm_num, __tile *src, uint8_t *buffer)\n+{\n+  int rows, colsb, i, j;\n+  __tilecfg_u tmp;\n+\n+  _tile_storeconfig (tmp.a);\n+\n+  src->rows = rows = tmp.s.rows[tmm_num];\n+  src->colsb = colsb = tmp.s.colsb[tmm_num];\n+\n+  for (i = 0; i < rows; i++)\n+    for (j = 0; j < colsb; j++)\n+    {\n+      if(buffer)\n+\tsrc->buf[i * colsb + j] = buffer[i * colsb + j];\n+      else\n+\tsrc->buf[i * colsb + j] = (i + 11 * j) % 256;\n+    }\n+\n+}\n+\n+/* Init __tile src and corresponding tmm register */\n+#define init_tile_reg_and_src(tmm_num, src)   \\\n+{\t\t\t\t\t      \\\n+  init_tile_src (tmm_num, &src, NULL);\t      \\\n+  _tile_loadd (tmm_num, src.buf, _STRIDE);   \\\n+}\n+\n+#define init_tile_reg_and_src_with_buffer(tmm_num, src, buffer) \\\n+{\t\t\t\t\t\t\t\t\\\n+  init_tile_src (tmm_num, &src, buffer);\t\t\t\t\\\n+  _tile_loadd (tmm_num, src.buf, _STRIDE);\t\t\t\\\n+}\n+\n+/* Zero __tile src. It should be init first. */\n+void zero_tile_src (__tile *src)\n+{\n+  int i, j;\n+\n+  for (i = 0; i < src->rows; i++)\n+    for (j = 0; j < src->colsb; j++)\n+      src->buf[i * src->colsb + j] = 0;\n+}\n+\n+/* Compare tile config value with __tilecfg_u dst */\n+int check_tile_config (__tilecfg_u *src, __tilecfg_u *dst)\n+{\n+  size_t size = sizeof(__tilecfg);\n+  uint8_t *pa_src = (uint8_t *) src->a;\n+  uint8_t *pa_dst = (uint8_t *) dst->a;\n+\n+  for (int i = 0; i < size; i++)\n+    if (pa_src[i] != pa_dst[i])\n+      return 0;\n+\n+  return 1;\n+}\n+\n+/* Compare tile register value with __tile variable */\n+int check_tile_register (__tile* ref, __tile* target)\n+{\n+  /* Tile register should be stored from tmm to\n+     memory and compare with emulation results. */\n+  int rows = target->rows;\n+  int colsb = target->colsb;\n+  int i, j;\n+\n+  for (i = 0; i < rows; i++)\n+    for (j = 0; j < colsb; j++)\n+\tif (ref->buf[i * colsb + j] != target->buf[i * colsb + j])\n+\t    return 0;\n+\n+  return 1;\n+}\n+\n+#ifndef DO_TEST\n+#define DO_TEST do_test\n+static void test_amx (void);\n+__attribute__ ((noinline))\n+static void\n+do_test (void)\n+{\n+  test_amx ();\n+}\n+#endif\n+\n+int\n+main ()\n+{\n+  /* Check cpu support for AMX */\n+  if (__builtin_cpu_supports (\"amx-tile\")\n+#ifdef AMX_INT8\n+      && __builtin_cpu_supports (\"amx-int8\")\n+#endif\n+#ifdef AMX_BF16\n+      && __builtin_cpu_supports (\"amx-bf16\")\n+#endif\n+      )\n+    {\n+      DO_TEST ();\n+#ifdef DEBUG\n+      printf (\"PASSED\\n\");\n+#endif\n+    }\n+#ifdef DEBUG\n+  else\n+    printf (\"SKIPPED\\n\");\n+#endif\n+\n+  return 0;\n+}\n+\n+#endif"}, {"sha": "a5e5bddedac5d2013ae093d57f1628cc32d70dd3", "filename": "gcc/testsuite/gcc.target/i386/amxbf16-asmatt-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxbf16-asmatt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxbf16-asmatt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxbf16-asmatt-1.c?ref=5c609842d13a4c9c6be1a10f7980a74d27daeb85", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mamx-bf16\" } */\n+/* { dg-final { scan-assembler \"tdpbf16ps\\[ \\\\t]+\\[^\\n\\]*%tmm3+\\[^\\n\\]*%tmm2+\\[^\\n\\]*%tmm1\"  } } */\n+#include <immintrin.h>\n+\n+#define TMM1 1\n+#define TMM2 2\n+#define TMM3 3\n+\n+void TEST ()\n+{\n+  _tile_dpbf16ps (TMM1, TMM2, TMM3);\n+}"}, {"sha": "c2d6074387a1ac26a6c209870932ef5e36168487", "filename": "gcc/testsuite/gcc.target/i386/amxbf16-asmintel-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxbf16-asmintel-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxbf16-asmintel-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxbf16-asmintel-1.c?ref=5c609842d13a4c9c6be1a10f7980a74d27daeb85", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mamx-bf16 -masm=intel\" } */\n+/* { dg-final { scan-assembler \"tdpbf16ps\\[ \\\\t]+\\[^\\n\\]*%tmm1+\\[^\\n\\]*%tmm2+\\[^\\n\\]*%tmm3\"  } } */\n+#include <immintrin.h>\n+\n+void TEST ()\n+{\n+  _tile_dpbf16ps (1, 2, 3);\n+}"}, {"sha": "c819113897d2baeab1628fba8f213493fec12f8d", "filename": "gcc/testsuite/gcc.target/i386/amxbf16-dpbf16ps-2.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxbf16-dpbf16ps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxbf16-dpbf16ps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxbf16-dpbf16ps-2.c?ref=5c609842d13a4c9c6be1a10f7980a74d27daeb85", "patch": "@@ -0,0 +1,83 @@\n+/* { dg-do run { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mamx-tile -mamx-bf16\" } */\n+#include <immintrin.h>\n+\n+#define AMX_BF16\n+#define DO_TEST test_amx_bf16_dpbf16ps\n+void test_amx_bf16_dpbf16ps ();\n+#include \"amx-check.h\"\n+\n+/* Transformation functions between bf16/float */\n+static uint16_t make_bf16 (float f)\n+{\n+  uint32_t u = (uint32_t)f;\n+  u = (u >> 16) & 0xffff;\n+  return (uint16_t)u;\n+}\n+\n+static float make_f32 (uint16_t bf)\n+{\n+  uint32_t u = (uint32_t)(bf << 16);\n+  return (float)u;\n+}\n+\n+/* Init tile buffer with bf16 pairs */\n+void init_bf16_max_tile_buffer (uint8_t *buf)\n+{ \n+  int i, j;\n+  uint16_t *ptr = (uint16_t *)buf;\n+\n+  for(i = 0; i < 16; i++)\n+    for(j = 0; j < 32; j++)\n+      {\t\n+\tfloat f = 16.1f * i + 3.4f * j;\n+\tptr[i * 32 + j] = make_bf16(f);\n+      }\n+}\n+\n+void calc_matrix_dpbf16ps (__tile *dst, __tile *src1, __tile *src2)\n+{\n+  uint16_t *src1_buf = (uint16_t *)src1->buf;\n+  uint16_t *src2_buf = (uint16_t *)src2->buf;\n+  float *dst_buf = (float *)dst->buf;\n+  \n+  int M = src1->rows;\n+  int N = src1->colsb / 4;\n+  int K = src2->colsb / 4;\n+  int i, j, k, t;\n+\n+  for (i = 0; i < M; i++)\n+    for (j = 0; j < N; j++)\n+      for (k = 0; k < K; k++)\n+\tfor (t = 0; t < 2; t+=2)\n+\t  {    \n+\t    dst_buf[i * N + k] += \n+\t      (make_f32(src1_buf[i * 4 * N + 4 * j + t]) *\n+\t      make_f32(src2_buf[j * 4 * K + 4 * k + t])) +\n+\t      (make_f32(src1_buf[i * 4 * N + 4 * j + t + 1]) *\n+\t      make_f32(src1_buf[i * 4 * N + 4 * j + t + 1]));\n+\t  }\n+\n+}\n+\n+void test_amx_bf16_dpbf16ps ()\n+{\n+  __tilecfg_u cfg;\n+  __tile dst, dst_ref, src1, src2;\n+  uint8_t tmp_dst_buf[1024];\n+\n+  init_bf16_max_tile_buffer (tmp_dst_buf);\n+  \n+  init_tile_config (&cfg);\n+  init_tile_reg_and_src_with_buffer (1, dst, tmp_dst_buf);\n+  init_tile_reg_and_src_with_buffer (2, dst, tmp_dst_buf);\n+  init_tile_reg_and_src_with_buffer (3, dst, tmp_dst_buf);\n+\n+  calc_matrix_dpbf16ps (&dst, &src1, &src2);\n+  \n+  _tile_dpbf16ps (1, 2, 3);\n+  _tile_stored (1, dst_ref.buf, _STRIDE);\n+\n+  if (!check_tile_register (&dst_ref, &dst))\n+        abort();\n+}"}, {"sha": "1842c234be8a0b35d0013b004bc9dc8271eeab72", "filename": "gcc/testsuite/gcc.target/i386/amxint8-asmatt-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxint8-asmatt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxint8-asmatt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxint8-asmatt-1.c?ref=5c609842d13a4c9c6be1a10f7980a74d27daeb85", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mamx-int8\" } */\n+/* { dg-final { scan-assembler \"tdpbssd\\[ \\\\t]+\\[^\\n\\]*%tmm3+\\[^\\n\\]*%tmm2+\\[^\\n\\]*%tmm1\"  } } */\n+/* { dg-final { scan-assembler \"tdpbsud\\[ \\\\t]+\\[^\\n\\]*%tmm3+\\[^\\n\\]*%tmm2+\\[^\\n\\]*%tmm1\"  } } *\n+/* { dg-final { scan-assembler \"tdpbusd\\[ \\\\t]+\\[^\\n\\]*%tmm3+\\[^\\n\\]*%tmm2+\\[^\\n\\]*%tmm1\"  } } */\n+/* { dg-final { scan-assembler \"tdpbuud\\[ \\\\t]+\\[^\\n\\]*%tmm3+\\[^\\n\\]*%tmm2+\\[^\\n\\]*%tmm1\"  } } */\n+#include <immintrin.h>\n+\n+#define TMM1 1\n+#define TMM2 2\n+#define TMM3 3\n+\n+void TEST ()\n+{\n+  _tile_dpbssd (TMM1, TMM2, TMM3);\n+  _tile_dpbsud (TMM1, TMM2, TMM3);\n+  _tile_dpbusd (TMM1, TMM2, TMM3);\n+  _tile_dpbuud (TMM1, TMM2, TMM3);\n+}"}, {"sha": "bcfbb3fa5edd868db1529fa04c1552ff2ca051db", "filename": "gcc/testsuite/gcc.target/i386/amxint8-asmintel-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxint8-asmintel-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxint8-asmintel-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxint8-asmintel-1.c?ref=5c609842d13a4c9c6be1a10f7980a74d27daeb85", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mamx-int8 -masm=intel\" } */\n+/* { dg-final { scan-assembler \"tdpbssd\\[ \\\\t]+\\[^\\n\\]*%tmm1+\\[^\\n\\]*%tmm2+\\[^\\n\\]*%tmm3\"  } } */\n+/* { dg-final { scan-assembler \"tdpbsud\\[ \\\\t]+\\[^\\n\\]*%tmm1+\\[^\\n\\]*%tmm2+\\[^\\n\\]*%tmm3\"  } } *\n+/* { dg-final { scan-assembler \"tdpbusd\\[ \\\\t]+\\[^\\n\\]*%tmm1+\\[^\\n\\]*%tmm2+\\[^\\n\\]*%tmm3\"  } } */\n+/* { dg-final { scan-assembler \"tdpbuud\\[ \\\\t]+\\[^\\n\\]*%tmm1+\\[^\\n\\]*%tmm2+\\[^\\n\\]*%tmm3\"  } } */\n+#include <immintrin.h>\n+\n+void TEST ()\n+{\n+  _tile_dpbssd (1, 2, 3);\n+  _tile_dpbsud (1, 2, 3);\n+  _tile_dpbusd (1, 2, 3);\n+  _tile_dpbuud (1, 2, 3);\n+}"}, {"sha": "62d31ce3e81853059d12c9f77b075d944de9c9ce", "filename": "gcc/testsuite/gcc.target/i386/amxint8-dpbssd-2.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxint8-dpbssd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxint8-dpbssd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxint8-dpbssd-2.c?ref=5c609842d13a4c9c6be1a10f7980a74d27daeb85", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mamx-tile -mamx-int8\" } */\n+#include <immintrin.h>\n+\n+#define AMX_INT8\n+#define DO_TEST test_amx_int8_dpbssd\n+void test_amx_int8_dpbssd ();\n+#include \"amx-check.h\"\n+\n+/* Init tile buffer with int32 value*/\n+void init_i32_max_tile_buffer (uint8_t *buf)\n+{\n+  int i, j;\n+  int *ptr = (int *)buf;\n+  for (i = 0; i < 16; i++)\n+    for (j = 0; j < 16; j++)\n+      ptr[i * 16 + j] = 2 * i - (16 - j);\n+}\n+\n+void calc_matrix_dpbssd (__tile *dst, __tile *src1, __tile *src2)\n+{\n+  int8_t *src1_buf = (int8_t *)src1->buf;\n+  int8_t *src2_buf = (int8_t *)src2->buf;\n+  int *dst_buf = (int *)dst->buf;\n+\n+  int M = src1->rows;\n+  int N = src1->colsb / 4;\n+  int K = src2->colsb / 4;\n+  int i, j, k, t;\n+\n+  for (i = 0; i < M; i++)\n+    for (j = 0; j < N; j++)\n+      for (k = 0; k < K; k++)\n+\tfor (t = 0; t < 4; t++)\n+\t  {\n+\t    dst_buf[i * N + k] +=  \n+\t      ((int) src1_buf[i * 4 * N + 4 * j + t]) *\n+\t      ((int) src2_buf[j * 4 * K + 4 * k + t]);\n+\t  }\n+}\n+\n+void test_amx_int8_dpbssd ()\n+{\n+  __tilecfg_u cfg;\n+  __tile dst, dst_ref, src1, src2;\n+  uint8_t tmp_dst_buf[1024];\n+  \n+  init_i32_max_tile_buffer (tmp_dst_buf);\n+\n+  init_tile_config (&cfg);\n+  init_tile_reg_and_src_with_buffer (1, dst, tmp_dst_buf);\n+  init_tile_reg_and_src (2, src1);\n+  init_tile_reg_and_src (3, src2);\n+\n+  calc_matrix_dpbssd (&dst, &src1, &src2);\n+\n+  _tile_dpbssd (1, 2, 3);\n+  _tile_stored (1, dst_ref.buf, _STRIDE);\n+  \n+  if (!check_tile_register (&dst_ref, &dst))\n+      abort();\n+}"}, {"sha": "5007ee917f56a34c3e27aa5c3465252b2c080c73", "filename": "gcc/testsuite/gcc.target/i386/amxint8-dpbsud-2.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxint8-dpbsud-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxint8-dpbsud-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxint8-dpbsud-2.c?ref=5c609842d13a4c9c6be1a10f7980a74d27daeb85", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do run { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mamx-tile -mamx-int8\" } */\n+#include <immintrin.h>\n+\n+#define AMX_INT8\n+#define DO_TEST test_amx_int8_dpbsud\n+void test_amx_int8_dpbsud ();\n+#include \"amx-check.h\"\n+\n+/* Init tile buffer with int32 value*/\n+void init_i32_max_tile_buffer (uint8_t *buf)\n+{\n+  int i, j;\n+  int *ptr = (int *)buf;\n+  for (i = 0; i < 16; i++)\n+    for (j = 0; j < 16; j++)\n+      ptr[i * 16 + j] = 2 * i - (16 - j);\n+}\n+\n+void calc_matrix_dpbsud (__tile *dst, __tile *src1, __tile *src2)\n+{\n+  int8_t *src1_buf = (int8_t *)src1->buf;\n+  uint8_t *src2_buf = (uint8_t *)src2->buf;\n+  int *dst_buf = (int *)dst->buf;\n+\n+  int M = src1->rows;\n+  int N = src1->colsb / 4;\n+  int K = src2->colsb / 4;\n+  int i, j, k, t;\n+\n+  for (i = 0; i < M; i++)\n+    for (j = 0; j < N; j++)\n+      for (k = 0; k < K; k++)\n+\tfor (t = 0; t < 4; t++)\n+\t  {\n+\t    dst_buf[i * N + k] += \n+\t      ((int) src1_buf[i * 4 * N + 4 * j + t]) *\n+\t      ((unsigned) src2_buf[j * 4 * K + 4 * k + t]);\n+\t  }\n+}\n+\n+void test_amx_int8_dpbsud ()\n+{\n+  __tilecfg_u cfg;\n+  __tile dst, dst_ref, src1, src2;\n+  uint8_t tmp_dst_buf[1024];\n+  \n+  init_i32_max_tile_buffer (tmp_dst_buf);\n+\n+  init_tile_config (&cfg);\n+  init_tile_reg_and_src_with_buffer (1, dst, tmp_dst_buf);\n+  init_tile_reg_and_src (2, src1);\n+  init_tile_reg_and_src (3, src2);\n+\n+  calc_matrix_dpbsud (&dst, &src1, &src2);\n+  _tile_dpbsud (1, 2, 3);\n+  _tile_stored (1, dst_ref.buf, _STRIDE);\n+  \n+  if (!check_tile_register (&dst_ref, &dst))\n+      abort();\n+}"}, {"sha": "17888e26116497d50c15a476060603c047cc1338", "filename": "gcc/testsuite/gcc.target/i386/amxint8-dpbusd-2.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxint8-dpbusd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxint8-dpbusd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxint8-dpbusd-2.c?ref=5c609842d13a4c9c6be1a10f7980a74d27daeb85", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do run { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mamx-tile -mamx-int8\" } */\n+#include <immintrin.h>\n+\n+#define AMX_INT8\n+#define DO_TEST test_amx_int8_dpbusd\n+void test_amx_int8_dpbusd ();\n+#include \"amx-check.h\"\n+\n+/* Init tile buffer with int32 value*/\n+void init_i32_max_tile_buffer (uint8_t *buf)\n+{\n+  int i, j;\n+  int *ptr = (int *)buf;\n+  for (i = 0; i < 16; i++)\n+    for (j = 0; j < 16; j++)\n+      ptr[i * 16 + j] = 2 * i - (16 - j);\n+}\n+\n+void calc_matrix_dpbusd (__tile *dst, __tile *src1, __tile *src2)\n+{\n+  uint8_t *src1_buf = (uint8_t *)src1->buf;\n+  int8_t *src2_buf = (int8_t *)src2->buf;\n+  int *dst_buf = (int *)dst->buf;\n+\n+  int M = src1->rows;\n+  int N = src1->colsb / 4;\n+  int K = src2->colsb / 4;\n+  int i, j, k, t;\n+\n+  for (i = 0; i < M; i++)\n+    for (j = 0; j < N; j++)\n+      for (k = 0; k < K; k++)\n+\tfor (t = 0; t < 4; t++)\n+\t  {\n+\t    dst_buf[i * N + k] += \n+\t      ((unsigned) src1_buf[i * 4 * N + 4 * j + t]) *\n+\t      ((int) src2_buf[j * 4 * K + 4 * k + t]);\n+\t  }\n+}\n+\n+void test_amx_int8_dpbusd ()\n+{\n+  __tilecfg_u cfg;\n+  __tile dst, dst_ref, src1, src2;\n+  uint8_t tmp_dst_buf[1024];\n+  \n+  init_i32_max_tile_buffer (tmp_dst_buf);\n+\n+  init_tile_config (&cfg);\n+  init_tile_reg_and_src_with_buffer (1, dst, tmp_dst_buf);\n+  init_tile_reg_and_src (2, src1);\n+  init_tile_reg_and_src (3, src2);\n+\n+  calc_matrix_dpbusd (&dst, &src1, &src2);\n+  _tile_dpbusd (1, 2, 3);\n+  _tile_stored (1, dst_ref.buf, _STRIDE);\n+  \n+  if (!check_tile_register (&dst_ref, &dst))\n+      abort();\n+}"}, {"sha": "c39666c3643a320bb2d22246dac5627abd99b959", "filename": "gcc/testsuite/gcc.target/i386/amxint8-dpbuud-2.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxint8-dpbuud-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxint8-dpbuud-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxint8-dpbuud-2.c?ref=5c609842d13a4c9c6be1a10f7980a74d27daeb85", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do run { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mamx-tile -mamx-int8\" } */\n+#include <immintrin.h>\n+\n+#define AMX_INT8\n+#define DO_TEST test_amx_int8_dpbuud\n+void test_amx_int8_dpbuud ();\n+#include \"amx-check.h\"\n+\n+/* Init tile buffer with int32 value*/\n+void init_i32_max_tile_buffer (uint8_t *buf)\n+{\n+  int i, j;\n+  int *ptr = (int *)buf;\n+  for (i = 0; i < 16; i++)\n+    for (j = 0; j < 16; j++)\n+      ptr[i * 16 + j] = 2 * i - (16 - j);\n+}\n+\n+void calc_matrix_dpbuud (__tile *dst, __tile *src1, __tile *src2)\n+{\n+  uint8_t *src1_buf = (uint8_t *)src1->buf;\n+  uint8_t *src2_buf = (uint8_t *)src2->buf;\n+  int *dst_buf = (int *)dst->buf;\n+\n+  int M = src1->rows;\n+  int N = src1->colsb / 4;\n+  int K = src2->colsb / 4;\n+  int i, j, k, t;\n+\n+  for (i = 0; i < M; i++)\n+    for (j = 0; j < N; j++)\n+      for (k = 0; k < K; k++)\n+\tfor (t = 0; t < 4; t++)\n+\t  {\n+\t    dst_buf[i * N + k] += \n+\t      ((unsigned) src1_buf[i * 4 * N + 4 * j + t]) *\n+\t      ((unsigned) src2_buf[j * 4 * K + 4 * k + t]);\n+\t  }\n+}\n+\n+void test_amx_int8_dpbuud ()\n+{\n+  __tilecfg_u cfg;\n+  __tile dst, dst_ref, src1, src2;\n+  uint8_t tmp_dst_buf[1024];\n+  \n+  init_i32_max_tile_buffer (tmp_dst_buf);\n+\n+  init_tile_config (&cfg);\n+  init_tile_reg_and_src_with_buffer (1, dst, tmp_dst_buf);\n+  init_tile_reg_and_src (2, src1);\n+  init_tile_reg_and_src (3, src2);\n+\n+  calc_matrix_dpbuud (&dst, &src1, &src2);\n+  _tile_dpbuud (1, 2, 3);\n+  _tile_stored (1, dst_ref.buf, _STRIDE);\n+  \n+  if (!check_tile_register (&dst_ref, &dst))\n+      abort();\n+}"}, {"sha": "cef84f9f479ac4880de2c8299f77099d45b201ba", "filename": "gcc/testsuite/gcc.target/i386/amxtile-2.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxtile-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxtile-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxtile-2.c?ref=5c609842d13a4c9c6be1a10f7980a74d27daeb85", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mamx-tile \" } */\n+#include <immintrin.h>\n+\n+#define DO_TEST test_amx_tile\n+void test_amx_tile ();\n+#include \"amx-check.h\"\n+\n+void test_amx_tile ()\n+{\n+  __tilecfg_u cfg_src, cfg_dst;\n+  __tile reg_src1, reg_src2, reg_ref;\n+\n+  /* check tile config load & store. */\n+  init_tile_config (&cfg_src);\n+  _tile_storeconfig (cfg_dst.a);\n+\n+  if (!check_tile_config (&cfg_src, &cfg_dst))\n+    abort ();\n+\n+  /* check tile register load & store. */\n+  init_tile_reg_and_src (1, reg_src1);\n+  _tile_stored (1, reg_ref.buf, _STRIDE);\n+  if (!check_tile_register (&reg_ref, &reg_src1))\n+    abort ();\n+\n+  /* check tile stream load instruction */\n+  init_tile_src (2, &reg_src2, NULL);\n+  _tile_stream_loadd (2, reg_src2.buf, _STRIDE);\n+  _tile_stored (2, reg_ref.buf, _STRIDE);\n+  if (!check_tile_register (&reg_ref, &reg_src2))\n+    abort ();\n+\n+  /* check tile register zeroing */\n+  zero_tile_src (&reg_src2);\n+  _tile_zero (2);\n+  _tile_stored (2, reg_ref.buf, _STRIDE);\n+  if (!check_tile_register (&reg_ref, &reg_src2))\n+    abort ();\n+\n+  /* check tile cfg zeroing */\n+  memset (cfg_dst.a, 0, sizeof(__tilecfg));\n+  _tile_release ();\n+  _tile_storeconfig (cfg_src.a);\n+  if (!check_tile_config (&cfg_src, &cfg_dst))\n+    abort ();\n+}"}, {"sha": "ceb5fa4bde33b1b2003b60f7ff0fe47f013f26cb", "filename": "gcc/testsuite/gcc.target/i386/amxtile-asmatt-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxtile-asmatt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxtile-asmatt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxtile-asmatt-1.c?ref=5c609842d13a4c9c6be1a10f7980a74d27daeb85", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mamx-tile \" } */\n+/* { dg-final { scan-assembler \"ldtilecfg\\[ \\\\t]+\\(\\[^\\)\\n\\]*\\)\"  } } */\n+/* { dg-final { scan-assembler \"sttilecfg\\[ \\\\t]+\\(\\[^\\)\\n\\]*\\)\"  } } */\n+/* { dg-final { scan-assembler \"tilerelease\"  } } */\n+/* { dg-final { scan-assembler \"tileloadd\\[ \\\\t]+\\[^\\n\\]*\\\\(%\\[a-z0-9]*\\,%\\[a-z0-9\\]*\\,\\[124\\]\\\\)+\\[^\\n\\]*%tmm\\[0-9\\]\"  } } */\n+/* { dg-final { scan-assembler \"tileloaddt1\\[ \\\\t]+\\[^\\n\\]*\\\\(%\\[a-z0-9]*\\,%\\[a-z0-9\\]*\\,\\[124\\]\\\\)+\\[^\\n\\]*%tmm\\[0-9\\]\"  } } */\n+/* { dg-final { scan-assembler \"tilestored\\[ \\\\t]+\\[^\\n\\]*%tmm\\[0-9\\]+\\[^\\n\\]*\\\\(%\\[a-z0-9]*\\,%\\[a-z0-9\\]*\\,\\[124\\]\\\\)\"  } } */\n+/* { dg-final { scan-assembler \"tilezero\\[ \\\\t]+\\[^\\n\\]*%tmm\\[0-9\\]\"  } } */\n+#include <immintrin.h>\n+\n+extern int a[];\n+extern const void* base;\n+extern const int stride;\n+\n+#define TMM0 0\n+#define TMM1 1\n+#define TMM2 2\n+#define TMM3 3\n+\n+void TEST ()\n+{\n+  _tile_loadconfig (a);\n+  _tile_storeconfig (a);\n+  _tile_release ();\n+  _tile_loadd (TMM3, base, stride);\n+  _tile_stream_loadd (TMM2, base, stride);\n+  _tile_stored (TMM1, base, stride);\n+  _tile_zero (TMM0);\n+}"}, {"sha": "88ef612ed14b070bcb00a8e47fe4f5f4a01b2dc1", "filename": "gcc/testsuite/gcc.target/i386/amxtile-asmintel-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxtile-asmintel-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxtile-asmintel-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxtile-asmintel-1.c?ref=5c609842d13a4c9c6be1a10f7980a74d27daeb85", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mamx-tile -masm=intel \" } */\n+/* { dg-final { scan-assembler \"ldtilecfg\\[ \\\\t]\"  } } */\n+/* { dg-final { scan-assembler \"sttilecfg\\[ \\\\t]\"  } } */\n+/* { dg-final { scan-assembler \"tilerelease\"  } } */\n+/* { dg-final { scan-assembler \"tileloadd\\[ \\\\t]%tmm\\[0-9\\]\"  } } */\n+/* { dg-final { scan-assembler \"tileloaddt1\\[ \\\\t]%tmm\\[0-9\\]\"  } } */\n+/* { dg-final { scan-assembler \"tilestored\\[ \\\\t]\\[^\\n\\]+\\[^\\n\\]*%tmm\\[0-9\\]\"  } } */\n+/* { dg-final { scan-assembler \"tilezero\\[ \\\\t]+\\[^\\n\\]*%tmm\\[0-9\\]\"  } } */\n+#include <immintrin.h>\n+\n+extern int a[];\n+extern const void* base;\n+extern const int stride;\n+void TEST ()\n+{\n+  _tile_loadconfig (a);\n+  _tile_storeconfig (a);\n+  _tile_release ();\n+  _tile_loadd (5, base, stride);\n+  _tile_stream_loadd (4, base, stride);\n+  _tile_stored (3, base, stride);\n+  _tile_zero (2);\n+}"}, {"sha": "8e669f1221515ba8479d860581e04e6f54605199", "filename": "gcc/testsuite/gcc.target/i386/funcspec-56.inc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc?ref=5c609842d13a4c9c6be1a10f7980a74d27daeb85", "patch": "@@ -71,6 +71,9 @@ extern void test_tsxldtrk (void)\t\t__attribute__((__target__(\"tsxldtrk\")));\n extern void test_enqcmd (void)\t\t\t__attribute__((__target__(\"enqcmd\")));\n extern void test_avx512bf16 (void)\t\t__attribute__((__target__(\"avx512bf16\")));\n extern void test_avx512vp2intersect (void)\t__attribute__((__target__(\"avx512vp2intersect\")));\n+extern void test_amx_tile (void)\t\t__attribute__((__target__(\"amx-tile\")));\n+extern void test_amx_int8 (void)\t\t__attribute__((__target__(\"amx-int8\")));\n+extern void test_amx_bf16 (void)\t\t__attribute__((__target__(\"amx-bf16\")));\n \n extern void test_no_sgx (void)\t\t\t__attribute__((__target__(\"no-sgx\")));\n extern void test_no_avx5124fmaps(void)\t\t__attribute__((__target__(\"no-avx5124fmaps\")));\n@@ -143,6 +146,9 @@ extern void test_no_tsxldtrk (void)\t\t__attribute__((__target__(\"no-tsxldtrk\")));\n extern void test_no_enqcmd (void)\t\t__attribute__((__target__(\"no-enqcmd\")));\n extern void test_no_avx512bf16 (void)\t\t__attribute__((__target__(\"no-avx512bf16\")));\n extern void test_no_avx512vp2intersect (void)\t__attribute__((__target__(\"no-avx512vp2intersect\")));\n+extern void test_no_amx_tile (void)\t\t__attribute__((__target__(\"no-amx-tile\")));\n+extern void test_no_amx_int8 (void)\t\t__attribute__((__target__(\"no-amx-int8\")));\n+extern void test_no_amx_bf16 (void)\t\t__attribute__((__target__(\"no-amx-bf16\")));\n \n extern void test_arch_nocona (void)\t\t__attribute__((__target__(\"arch=nocona\")));\n extern void test_arch_core2 (void)\t\t__attribute__((__target__(\"arch=core2\")));"}, {"sha": "61146b2b30afee3a26eba4893d093e3177a8f422", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=5c609842d13a4c9c6be1a10f7980a74d27daeb85", "patch": "@@ -3,7 +3,7 @@\n    popcntintrin.h gfniintrin.h and mm_malloc.h are usable\n    with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "4d6c9b3a17a1f730ae0053f9405a726c7ff3e698", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=5c609842d13a4c9c6be1a10f7980a74d27daeb85", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mavx512vp2intersect -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mserialize -mtsxldtrk\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mavx512vp2intersect -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "837b51c53e6bf4239d69ef8314a545562af95c8c", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=5c609842d13a4c9c6be1a10f7980a74d27daeb85", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mpconfig -mwbnoinvd -mavx512vl -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mpconfig -mwbnoinvd -mavx512vl -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "fc75669f41b093b62f81bb59eb7c8a2171ccb776", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=5c609842d13a4c9c6be1a10f7980a74d27daeb85", "patch": "@@ -11,6 +11,7 @@\n    tbmintrin.h, lwpintrin.h, popcntintrin.h, fmaintrin.h, tsxldtrkintrin.h,\n    avx5124fmapsintrin.h, avx5124vnniwintrin.h, avx512vpopcntdqintrin.h,\n    avx512bitalgintrin.h, avx512vp2intersectintrin.h,\n+   amxtileintrin.h, amxint8intrin.h, amxbf16intrin.h,\n    avx512vp2intersectvlintrin.h and mm_malloc.h that reference the proper\n    builtin functions.\n    Defining away \"extern\" and \"__inline\" results in all of them being\n@@ -102,7 +103,7 @@\n \n \n #ifndef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512vbmi,avx512vbmi2,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512vbmi,avx512vbmi2,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16\")\n #endif\n \n /* Following intrinsics require immediate arguments.  They\n@@ -219,7 +220,7 @@ test_4 (_mm_cmpestrz, int, __m128i, int, __m128i, int, 1)\n \n /* immintrin.h (AVX/AVX2/RDRND/FSGSBASE/F16C/RTM/AVX512F/SHA) */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma,avx512vbmi,avx512vbmi2,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk\")\n+#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma,avx512vbmi,avx512vbmi2,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16\")\n #endif\n #include <immintrin.h>\n test_1 (_cvtss_sh, unsigned short, float, 1)"}, {"sha": "9ca7c5d919d2376bc92c9bccf7f3bb25f6cb1f25", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=5c609842d13a4c9c6be1a10f7980a74d27daeb85", "patch": "@@ -10,6 +10,7 @@\n    tbmintrin.h, lwpintrin.h, popcntintrin.h, fmaintrin.h, tsxtrkintrin.h,\n    avx5124fmapsintrin.h, avx5124vnniwintrin.h, avx512vpopcntdqintrin.h,\n    avx512bitalgintrin.h, avx512vp2intersectintrin.h,\n+   amxtileintrin.h, amxint8intrin.h, amxbf16intrin.h,\n    avx512vp2intersectvlintrin.h and mm_malloc.h that reference the proper\n    builtin functions.\n    Defining away \"extern\" and \"__inline\" results in all of them being\n@@ -697,6 +698,6 @@\n #define __builtin_ia32_vpclmulqdq_v2di(A, B, C)  __builtin_ia32_vpclmulqdq_v2di(A, B, 1) \n #define __builtin_ia32_vpclmulqdq_v8di(A, B, C)  __builtin_ia32_vpclmulqdq_v8di(A, B, 1) \n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq,avx512bitalg,pconfig,wbnoinvd,avx512bf16,enqcmd,avx512vp2intersect,serialize,tsxldtrk\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq,avx512bitalg,pconfig,wbnoinvd,avx512bf16,enqcmd,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16\")\n \n #include <x86intrin.h>"}, {"sha": "8314e443c437fd14292de6876c2786945fff3393", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c609842d13a4c9c6be1a10f7980a74d27daeb85/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=5c609842d13a4c9c6be1a10f7980a74d27daeb85", "patch": "@@ -8956,6 +8956,39 @@ proc check_effective_target_avx512vaes { } {\n     } \"-mvaes\" ]\n }\n \n+# Return 1 if amx-tile instructions can be compiled.\n+proc check_effective_target_amx_tile { } {\n+    return [check_no_compiler_messages amx_tile object {\n+\tvoid\n+\tfoo ()\n+\t{\n+\t    __asm__ volatile (\"tilerelease\" ::);\n+\t}\n+    } \"-mamx-tile\" ]\n+}\n+\n+# Return 1 if amx-int8 instructions can be compiled.\n+proc check_effective_target_amx_int8 { } {\n+    return [check_no_compiler_messages amx_int8 object {\n+\tvoid\n+\tfoo ()\n+\t{\n+\t    __asm__ volatile (\"tdpbssd\\t%%tmm1, %%tmm2, %%tmm3\" ::);\n+\t}\n+    } \"-mamx-int8\" ]\n+}\n+\n+# Return 1 if amx-bf16 instructions can be compiled.\n+proc check_effective_target_amx_bf16 { } {\n+    return [check_no_compiler_messages amx_bf16 object {\n+\tvoid\n+\tfoo ()\n+\t{\n+\t    __asm__ volatile (\"tdpbf16ps\\t%%tmm1, %%tmm2, %%tmm3\" ::);\n+\t}\n+    } \"-mamx-bf16\" ]\n+}\n+\n # Return 1 if vpclmulqdq instructions can be compiled.\n proc check_effective_target_vpclmulqdq { } {\n     return [check_no_compiler_messages vpclmulqdq object {"}]}