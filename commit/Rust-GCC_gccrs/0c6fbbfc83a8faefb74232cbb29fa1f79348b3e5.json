{"sha": "0c6fbbfc83a8faefb74232cbb29fa1f79348b3e5", "node_id": "C_kwDOANBUbNoAKDBjNmZiYmZjODNhOGZhZWZiNzQyMzJjYmIyOWZhMWY3OTM0OGIzZTU", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-12-18T21:36:40Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-01-10T09:38:46Z"}, "message": "[Ada] Make pragma Inspection_Point work for constants\n\ngcc/ada/\n\n\t* gcc-interface/trans.c (lvalue_required_p) <N_Pragma>: New case.\n\t<N_Pragma_Argument_Association>: Likewise.\n\t(Pragma_to_gnu) <Pragma_Inspection_Point>: Fetch the corresponding\n\tvariable of a constant before marking it as addressable.", "tree": {"sha": "bdb381f46e17c444ffdd96cac5989847a7f727e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bdb381f46e17c444ffdd96cac5989847a7f727e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c6fbbfc83a8faefb74232cbb29fa1f79348b3e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c6fbbfc83a8faefb74232cbb29fa1f79348b3e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c6fbbfc83a8faefb74232cbb29fa1f79348b3e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c6fbbfc83a8faefb74232cbb29fa1f79348b3e5/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6eae6a9bbf83ada3aab7f5a2a74e7024889d237", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6eae6a9bbf83ada3aab7f5a2a74e7024889d237", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6eae6a9bbf83ada3aab7f5a2a74e7024889d237"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "47fbbc9672e6a265b4bcb17c4edfff0dfcc59b24", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6fbbfc83a8faefb74232cbb29fa1f79348b3e5/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6fbbfc83a8faefb74232cbb29fa1f79348b3e5/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=0c6fbbfc83a8faefb74232cbb29fa1f79348b3e5", "patch": "@@ -865,6 +865,20 @@ lvalue_required_p (Node_Id gnat_node, tree gnu_type, bool constant,\n \t      || must_pass_by_ref (gnu_type)\n \t      || default_pass_by_ref (gnu_type));\n \n+    case N_Pragma_Argument_Association:\n+      return lvalue_required_p (gnat_parent, gnu_type, constant,\n+\t\t\t\taddress_of_constant);\n+\n+    case N_Pragma:\n+      if (Is_Pragma_Name (Chars (Pragma_Identifier (gnat_parent))))\n+\t{\n+\t  const unsigned char id\n+\t    = Get_Pragma_Id (Chars (Pragma_Identifier (gnat_parent)));\n+\t  return id == Pragma_Inspection_Point;\n+\t}\n+      else\n+\treturn 0;\n+\n     case N_Indexed_Component:\n       /* Only the array expression can require an lvalue.  */\n       if (Prefix (gnat_parent) != gnat_node)\n@@ -1387,6 +1401,9 @@ Pragma_to_gnu (Node_Id gnat_node)\n \t  char *comment;\n #endif\n \t  gnu_expr = maybe_unconstrained_array (gnu_expr);\n+\t  if (TREE_CODE (gnu_expr) == CONST_DECL\n+\t      && DECL_CONST_CORRESPONDING_VAR (gnu_expr))\n+\t    gnu_expr = DECL_CONST_CORRESPONDING_VAR (gnu_expr);\n \t  gnat_mark_addressable (gnu_expr);\n \n #ifdef ASM_COMMENT_START"}]}