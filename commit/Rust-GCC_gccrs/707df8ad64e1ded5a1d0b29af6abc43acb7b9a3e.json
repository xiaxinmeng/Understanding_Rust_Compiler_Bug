{"sha": "707df8ad64e1ded5a1d0b29af6abc43acb7b9a3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA3ZGY4YWQ2NGUxZGVkNWExZDBiMjlhZjZhYmM0M2FjYjdiOWEzZQ==", "commit": {"author": {"name": "Adam Butcher", "email": "adam@jessamine.co.uk", "date": "2013-09-23T22:43:06Z"}, "committer": {"name": "Adam Butcher", "email": "abutcher@gcc.gnu.org", "date": "2013-09-23T22:43:06Z"}, "message": "Use translation-unit-global rather than parameter-list-local counter for generic type names to facilitate nested implicit function templates.\n\n\t* parser.c (make_generic_type_name): Use global count rather than\n\tparameter and ...\n\t(add_implicit_template_parms): ... propagate interface change here.\n\nFrom-SVN: r202847", "tree": {"sha": "3fb82c1510cbd98174829e68b18c4124f4149cd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fb82c1510cbd98174829e68b18c4124f4149cd9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/707df8ad64e1ded5a1d0b29af6abc43acb7b9a3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/707df8ad64e1ded5a1d0b29af6abc43acb7b9a3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/707df8ad64e1ded5a1d0b29af6abc43acb7b9a3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/707df8ad64e1ded5a1d0b29af6abc43acb7b9a3e/comments", "author": {"login": "abutcher-gh", "id": 10379705, "node_id": "MDQ6VXNlcjEwMzc5NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/10379705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abutcher-gh", "html_url": "https://github.com/abutcher-gh", "followers_url": "https://api.github.com/users/abutcher-gh/followers", "following_url": "https://api.github.com/users/abutcher-gh/following{/other_user}", "gists_url": "https://api.github.com/users/abutcher-gh/gists{/gist_id}", "starred_url": "https://api.github.com/users/abutcher-gh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abutcher-gh/subscriptions", "organizations_url": "https://api.github.com/users/abutcher-gh/orgs", "repos_url": "https://api.github.com/users/abutcher-gh/repos", "events_url": "https://api.github.com/users/abutcher-gh/events{/privacy}", "received_events_url": "https://api.github.com/users/abutcher-gh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5e8586d720eb9481a09cbe07eb40590fbc86c89f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e8586d720eb9481a09cbe07eb40590fbc86c89f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e8586d720eb9481a09cbe07eb40590fbc86c89f"}], "stats": {"total": 33, "additions": 21, "deletions": 12}, "files": [{"sha": "7de3018ea70d130aa35b72ddda399d39adbe0a2b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/707df8ad64e1ded5a1d0b29af6abc43acb7b9a3e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/707df8ad64e1ded5a1d0b29af6abc43acb7b9a3e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=707df8ad64e1ded5a1d0b29af6abc43acb7b9a3e", "patch": "@@ -1,3 +1,9 @@\n+2013-09-23  Adam Butcher  <adam@jessamine.co.uk>\n+\n+\t* parser.c (make_generic_type_name): Use global count rather than\n+\tparameter and ...\n+\t(add_implicit_template_parms): ... propagate interface change here.\n+\n 2013-09-20  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/58481"}, {"sha": "fac3808e424ad2a5ffb0102852e01ffbdd024ed7", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/707df8ad64e1ded5a1d0b29af6abc43acb7b9a3e/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/707df8ad64e1ded5a1d0b29af6abc43acb7b9a3e/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=707df8ad64e1ded5a1d0b29af6abc43acb7b9a3e", "patch": "@@ -28897,11 +28897,12 @@ c_parse_file (void)\n /* Create an identifier for a generic parameter type (a synthesized\n    template parameter implied by `auto' or a concept identifier). */\n \n+static GTY(()) int generic_parm_count;\n static tree\n-make_generic_type_name (int i)\n+make_generic_type_name ()\n {\n   char buf[32];\n-  sprintf (buf, \"__GenT%d\", i);\n+  sprintf (buf, \"__GenT%d\", ++generic_parm_count);\n   return get_identifier (buf);\n }\n \n@@ -28915,14 +28916,14 @@ tree_type_is_auto_or_concept (const_tree t)\n   return TREE_TYPE (t) && is_auto_or_concept (TREE_TYPE (t));\n }\n \n-/* Add COUNT implicit template parameters gleaned from the generic\n-   type parameters in PARAMETERS to the CURRENT_TEMPLATE_PARMS\n-   (creating a new template parameter list if necessary).  Returns\n-   PARAMETERS suitably rewritten to reference the newly created types\n-   or ERROR_MARK_NODE on failure.  */\n+/* Add EXPECT_COUNT implicit template parameters gleaned from the generic\n+   type parameters in PARAMETERS to the CURRENT_TEMPLATE_PARMS (creating a new\n+   template parameter list if necessary).  Returns PARAMETERS suitably rewritten\n+   to reference the newly created types or ERROR_MARK_NODE on failure.  */\n \n tree\n-add_implicit_template_parms (cp_parser *parser, size_t count, tree parameters)\n+add_implicit_template_parms (cp_parser *parser, size_t expect_count,\n+\t\t\t     tree parameters)\n {\n   gcc_assert (current_binding_level->kind == sk_function_parms);\n \n@@ -28931,7 +28932,7 @@ add_implicit_template_parms (cp_parser *parser, size_t count, tree parameters)\n   bool become_template =\n     fn_parms_scope->level_chain->kind != sk_template_parms;\n \n-  size_t synth_idx = 0;\n+  size_t synth_count = 0;\n \n   /* Roll back a scope level and either introduce a new template parameter list\n      or update an existing one.  The function scope is added back after template\n@@ -28973,15 +28974,17 @@ add_implicit_template_parms (cp_parser *parser, size_t count, tree parameters)\n       ++processing_template_parmlist;\n     }\n \n-  for (tree p = parameters; p && synth_idx < count; p = TREE_CHAIN (p))\n+  for (tree p = parameters; p && synth_count < expect_count; p = TREE_CHAIN (p))\n     {\n       tree generic_type_ptr\n \t= find_type_usage (TREE_VALUE (p), tree_type_is_auto_or_concept);\n \n       if (!generic_type_ptr)\n \tcontinue;\n \n-      tree synth_id = make_generic_type_name (synth_idx++);\n+      ++synth_count;\n+\n+      tree synth_id = make_generic_type_name ();\n       tree synth_tmpl_parm = finish_template_type_parm (class_type_node,\n \t\t\t\t\t\t\tsynth_id);\n       tparms = process_template_parm (tparms, DECL_SOURCE_LOCATION (TREE_VALUE\n@@ -29004,7 +29007,7 @@ add_implicit_template_parms (cp_parser *parser, size_t count, tree parameters)\n \tcur_type = new_type;\n     }\n \n-  gcc_assert (synth_idx == count);\n+  gcc_assert (synth_count == expect_count);\n \n   push_binding_level (fn_parms_scope);\n "}]}