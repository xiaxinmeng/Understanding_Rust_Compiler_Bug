{"sha": "f5f8d79dec035521d9c869e65b37636d934f66a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVmOGQ3OWRlYzAzNTUyMWQ5Yzg2OWU2NWIzNzYzNmQ5MzRmNjZhMw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-12-04T21:47:13Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-12-04T21:47:13Z"}, "message": "cse.c (lookup_as_function): Delete mode frobbing code.\n\n\t* cse.c (lookup_as_function): Delete mode frobbing code.\n\t(equiv_constant): Re-implement it there for SUBREGs.\n\nCo-Authored-By: Gary Funck <gary@intrepid.com>\n\nFrom-SVN: r142443", "tree": {"sha": "77e1652f735ed18f6ab1eb91f6bcdb8d0f99468b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77e1652f735ed18f6ab1eb91f6bcdb8d0f99468b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5f8d79dec035521d9c869e65b37636d934f66a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5f8d79dec035521d9c869e65b37636d934f66a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5f8d79dec035521d9c869e65b37636d934f66a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5f8d79dec035521d9c869e65b37636d934f66a3/comments", "author": null, "committer": null, "parents": [{"sha": "f782c65c3da796b4eb907daa55a160f1203ee5e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f782c65c3da796b4eb907daa55a160f1203ee5e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f782c65c3da796b4eb907daa55a160f1203ee5e6"}], "stats": {"total": 88, "additions": 75, "deletions": 13}, "files": [{"sha": "e46adae3a5358e0531162136e2514a0ea7c2325e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5f8d79dec035521d9c869e65b37636d934f66a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5f8d79dec035521d9c869e65b37636d934f66a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5f8d79dec035521d9c869e65b37636d934f66a3", "patch": "@@ -1,3 +1,9 @@\n+2008-12-04  Eric Botcazou  <ebotcazou@adacore.com>\n+            Gary Funck  <gary@intrepid.com>\n+\n+\t* cse.c (lookup_as_function): Delete mode frobbing code.\n+\t(equiv_constant): Re-implement it there for SUBREGs.\n+\n 2008-12-04  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/36509"}, {"sha": "91cb108e94c7cf0133f9d9b39f4dc767fa6c08d5", "filename": "gcc/cse.c", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5f8d79dec035521d9c869e65b37636d934f66a3/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5f8d79dec035521d9c869e65b37636d934f66a3/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=f5f8d79dec035521d9c869e65b37636d934f66a3", "patch": "@@ -1364,17 +1364,6 @@ lookup_as_function (rtx x, enum rtx_code code)\n   struct table_elt *p\n     = lookup (x, SAFE_HASH (x, VOIDmode), GET_MODE (x));\n \n-  /* If we are looking for a CONST_INT, the mode doesn't really matter, as\n-     long as we are narrowing.  So if we looked in vain for a mode narrower\n-     than word_mode before, look for word_mode now.  */\n-  if (p == 0 && code == CONST_INT\n-      && GET_MODE_SIZE (GET_MODE (x)) < GET_MODE_SIZE (word_mode))\n-    {\n-      x = copy_rtx (x);\n-      PUT_MODE (x, word_mode);\n-      p = lookup (x, SAFE_HASH (x, VOIDmode), word_mode);\n-    }\n-\n   if (p == 0)\n     return 0;\n \n@@ -3641,6 +3630,8 @@ equiv_constant (rtx x)\n \n   if (GET_CODE (x) == SUBREG)\n     {\n+      enum machine_mode mode = GET_MODE (x);\n+      enum machine_mode imode = GET_MODE (SUBREG_REG (x));\n       rtx new_rtx;\n \n       /* See if we previously assigned a constant value to this SUBREG.  */\n@@ -3649,10 +3640,25 @@ equiv_constant (rtx x)\n           || (new_rtx = lookup_as_function (x, CONST_FIXED)) != 0)\n         return new_rtx;\n \n+      /* If we didn't and if doing so makes sense, see if we previously\n+\t assigned a constant value to the enclosing word mode SUBREG.  */\n+      if (GET_MODE_SIZE (mode) < GET_MODE_SIZE (word_mode)\n+\t  && GET_MODE_SIZE (word_mode) < GET_MODE_SIZE (imode))\n+\t{\n+\t  int byte = SUBREG_BYTE (x) - subreg_lowpart_offset (mode, word_mode);\n+\t  if (byte >= 0 && (byte % UNITS_PER_WORD) == 0)\n+\t    {\n+\t      rtx y = gen_rtx_SUBREG (word_mode, SUBREG_REG (x), byte);\n+\t      new_rtx = lookup_as_function (y, CONST_INT);\n+\t      if (new_rtx)\n+\t\treturn gen_lowpart (mode, new_rtx);\n+\t    }\n+\t}\n+\n+      /* Otherwise see if we already have a constant for the inner REG.  */\n       if (REG_P (SUBREG_REG (x))\n \t  && (new_rtx = equiv_constant (SUBREG_REG (x))) != 0)\n-        return simplify_subreg (GET_MODE (x), new_rtx,\n-\t\t\t\tGET_MODE (SUBREG_REG (x)), SUBREG_BYTE (x));\n+        return simplify_subreg (mode, new_rtx, imode, SUBREG_BYTE (x));\n \n       return 0;\n     }"}, {"sha": "715ecd67264da29c2cbec6dd5563bed039a22237", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5f8d79dec035521d9c869e65b37636d934f66a3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5f8d79dec035521d9c869e65b37636d934f66a3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f5f8d79dec035521d9c869e65b37636d934f66a3", "patch": "@@ -1,3 +1,7 @@\n+2008-12-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.dg/union-5.c: New test.\n+\n 2008-12-04  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/37906"}, {"sha": "ac5322b2c31245b3ec7e3b4cc044a2f010acbcbc", "filename": "gcc/testsuite/gcc.dg/union-5.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5f8d79dec035521d9c869e65b37636d934f66a3/gcc%2Ftestsuite%2Fgcc.dg%2Funion-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5f8d79dec035521d9c869e65b37636d934f66a3/gcc%2Ftestsuite%2Fgcc.dg%2Funion-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funion-5.c?ref=f5f8d79dec035521d9c869e65b37636d934f66a3", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O -fgcse -fno-split-wide-types\" } */\n+\n+extern void abort(void);\n+\n+typedef unsigned short int uint16_t;\n+typedef unsigned int uint32_t;\n+typedef unsigned long long uint64_t;\n+\n+typedef struct\n+{\n+  uint16_t thread;\n+  uint16_t phase;\n+} s32;\n+\n+typedef union\n+{\n+  uint32_t i;\n+  s32 s;\n+} u32;\n+\n+typedef union\n+{\n+  uint64_t i;\n+  u32 u;\n+} u64;\n+\n+static __attribute__((noinline))\n+void foo(int val)\n+{\n+  u64 data;\n+  uint32_t thread;\n+\n+  data.u.i = 0x10000L;\n+  thread = data.u.s.thread;\n+  if (val)\n+    abort ();\n+  if (thread)\n+    abort ();\n+}\n+\n+int main(void)\n+{\n+  foo (0);\n+  return 0;\n+}"}]}