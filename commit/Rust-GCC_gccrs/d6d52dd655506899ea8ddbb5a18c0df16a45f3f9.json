{"sha": "d6d52dd655506899ea8ddbb5a18c0df16a45f3f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZkNTJkZDY1NTUwNjg5OWVhOGRkYmI1YTE4YzBkZjE2YTQ1ZjNmOQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-01-13T18:39:26Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-01-13T18:39:26Z"}, "message": "cppfiles.c (_cpp_fake_include): New function.\n\n        * cppfiles.c (_cpp_fake_include): New function.\n        * cpphash.h (_cpp_fake_include): New.\n        * cpplib.c (do_line): Call _cpp_fake_include when entering\n        header files in preprocessed input.\n        * cppmain.c (cb_pragma_implementation): Remove handling.\n\t(setup_callbacks): Don't register pragmas.\n\nFrom-SVN: r38987", "tree": {"sha": "842229d5e9effcad193597ab41fcfb2eb4a902bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/842229d5e9effcad193597ab41fcfb2eb4a902bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6d52dd655506899ea8ddbb5a18c0df16a45f3f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6d52dd655506899ea8ddbb5a18c0df16a45f3f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6d52dd655506899ea8ddbb5a18c0df16a45f3f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6d52dd655506899ea8ddbb5a18c0df16a45f3f9/comments", "author": null, "committer": null, "parents": [{"sha": "ccd96f0ad82a526127150a8d254fbf70f3c93030", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccd96f0ad82a526127150a8d254fbf70f3c93030", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccd96f0ad82a526127150a8d254fbf70f3c93030"}], "stats": {"total": 90, "additions": 40, "deletions": 50}, "files": [{"sha": "91d328aef1e62d11f6bfa635d33280722203a45f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6d52dd655506899ea8ddbb5a18c0df16a45f3f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6d52dd655506899ea8ddbb5a18c0df16a45f3f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d6d52dd655506899ea8ddbb5a18c0df16a45f3f9", "patch": "@@ -1,3 +1,12 @@\n+2001-01-13  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+        * cppfiles.c (_cpp_fake_include): New function.\n+        * cpphash.h (_cpp_fake_include): New.\n+        * cpplib.c (do_line): Call _cpp_fake_include when entering\n+        header files in preprocessed input.\n+        * cppmain.c (cb_pragma_implementation): Remove handling.\n+\t(setup_callbacks): Don't register pragmas.\n+\n 2001-01-13  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* extend.texi: Udate for CPP."}, {"sha": "c480cb456c034ff1bbdce4c013cdb9aecb6c169f", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6d52dd655506899ea8ddbb5a18c0df16a45f3f9/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6d52dd655506899ea8ddbb5a18c0df16a45f3f9/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=d6d52dd655506899ea8ddbb5a18c0df16a45f3f9", "patch": "@@ -1,6 +1,6 @@\n /* Part of CPP library.  (include file handling)\n    Copyright (C) 1986, 1987, 1989, 1992, 1993, 1994, 1995, 1998,\n-   1999, 2000 Free Software Foundation, Inc.\n+   1999, 2000, 2001 Free Software Foundation, Inc.\n    Written by Per Bothner, 1994.\n    Based on CCCP program by Paul Rubin, June 1986\n    Adapted to ANSI C, Richard Stallman, Jan 1987\n@@ -117,6 +117,7 @@ destroy_include_file_node (v)\n      splay_tree_value v;\n {\n   struct include_file *f = (struct include_file *)v;\n+\n   if (f)\n     {\n       purge_cache (f);\n@@ -149,6 +150,26 @@ _cpp_never_reread (file)\n   file->cmacro = NEVER_REREAD;\n }\n \n+/* Put a file name in the splay tree, for the sake of cpp_included ().\n+   Assume that FNAME has already had its path simplified.  */\n+void\n+_cpp_fake_include (pfile, fname)\n+     cpp_reader *pfile;\n+     const char *fname;\n+{\n+  splay_tree_node nd;\n+\n+  nd = splay_tree_lookup (pfile->all_include_files, (splay_tree_key) fname);\n+  if (! nd)\n+    {\n+      struct include_file *file = xcnew (struct include_file);\n+      file->name = xstrdup (fname);\n+      splay_tree_insert (pfile->all_include_files,\n+\t\t\t (splay_tree_key) file->name,\n+\t\t\t (splay_tree_value) file);\n+    }\n+}\n+\n /* Given a file name, look it up in the cache; if there is no entry,\n    create one with a non-NULL value (regardless of success in opening\n    the file).  If the file doesn't exist or is inaccessible, this"}, {"sha": "380f12581e6760963adb2bf2f41c6af5a2f32f4d", "filename": "gcc/cpphash.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6d52dd655506899ea8ddbb5a18c0df16a45f3f9/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6d52dd655506899ea8ddbb5a18c0df16a45f3f9/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=d6d52dd655506899ea8ddbb5a18c0df16a45f3f9", "patch": "@@ -1,5 +1,5 @@\n /* Part of CPP library.\n-   Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify it\n under the terms of the GNU General Public License as published by the\n@@ -400,6 +400,7 @@ extern cpp_hashnode *_cpp_lookup_with_hash PARAMS ((cpp_reader*, size_t,\n \t\t\t\t\t\t    unsigned int));\n \n /* In cppfiles.c */\n+extern void _cpp_fake_include\t\tPARAMS ((cpp_reader *, const char *));\n extern void _cpp_never_reread\t\tPARAMS ((struct include_file *));\n extern void _cpp_simplify_pathname\tPARAMS ((char *));\n extern int _cpp_read_file\t\tPARAMS ((cpp_reader *, const char *));"}, {"sha": "78045e31fc33de398e141857c90024c93ed8a7d1", "filename": "gcc/cpplib.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6d52dd655506899ea8ddbb5a18c0df16a45f3f9/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6d52dd655506899ea8ddbb5a18c0df16a45f3f9/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=d6d52dd655506899ea8ddbb5a18c0df16a45f3f9", "patch": "@@ -1,6 +1,6 @@\n /* CPP Library. (Directive handling.)\n    Copyright (C) 1986, 1987, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000 Free Software Foundation, Inc.\n+   1999, 2000, 2001 Free Software Foundation, Inc.\n    Contributed by Per Bothner, 1994-95.\n    Based on CCCP program by Paul Rubin, June 1986\n    Adapted to ANSI C, Richard Stallman, Jan 1987\n@@ -716,6 +716,7 @@ do_line (pfile)\n     \n       _cpp_simplify_pathname (fname);\n \n+      /* Only accept flags for the # 55 form.  */\n       if (! pfile->state.line_extension)\n \tcheck_eol (pfile);\n       else\n@@ -743,7 +744,10 @@ do_line (pfile)\n \n \t  if (reason == FC_ENTER)\n \t    {\n+\t      /* Fake a buffer stack for diagnostics.  */\n \t      cpp_push_buffer (pfile, 0, 0, BUF_FAKE, fname);\n+\t      /* Fake an include for cpp_included.  */\n+\t      _cpp_fake_include (pfile, fname);\n \t      buffer = pfile->buffer;\n \t    }\n \t  else if (reason == FC_LEAVE)"}, {"sha": "d575f9fba51e96249576f4b2e35c532eda6f11d2", "filename": "gcc/cppmain.c", "status": "modified", "additions": 2, "deletions": 47, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6d52dd655506899ea8ddbb5a18c0df16a45f3f9/gcc%2Fcppmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6d52dd655506899ea8ddbb5a18c0df16a45f3f9/gcc%2Fcppmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmain.c?ref=d6d52dd655506899ea8ddbb5a18c0df16a45f3f9", "patch": "@@ -1,5 +1,6 @@\n /* CPP main program, using CPP Library.\n-   Copyright (C) 1995, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1995, 1997, 1998, 1999, 2000, 2001\n+   Free Software Foundation, Inc.\n    Written by Per Bothner, 1994-95.\n \n This program is free software; you can redistribute it and/or modify it\n@@ -58,7 +59,6 @@ static void cb_include\tPARAMS ((cpp_reader *, const unsigned char *,\n static void cb_ident\t  PARAMS ((cpp_reader *, const cpp_string *));\n static void cb_file_change PARAMS ((cpp_reader *, const cpp_file_change *));\n static void cb_def_pragma PARAMS ((cpp_reader *));\n-static void do_pragma_implementation PARAMS ((cpp_reader *));\n \n const char *progname;\t\t/* Needs to be global.  */\n static cpp_reader *pfile;\t/* An opaque handle.  */\n@@ -177,10 +177,6 @@ setup_callbacks ()\n       cb->undef  = cb_undef;\n       cb->poison = cb_def_pragma;\n     }\n-\n-  /* Register one #pragma which needs special handling.  */\n-  cpp_register_pragma(pfile, 0, \"implementation\", do_pragma_implementation);\n-  cpp_register_pragma(pfile, \"GCC\", \"implementation\", do_pragma_implementation);\n }\n \n /* Writes out the preprocessed file.  Alternates between two tokens,\n@@ -419,47 +415,6 @@ cb_def_pragma (pfile)\n   print.lineno++;\n }\n \n-static void\n-do_pragma_implementation (pfile)\n-     cpp_reader *pfile;\n-{\n-  /* Be quiet about `#pragma implementation' for a file only if it hasn't\n-     been included yet.  */\n-  cpp_token token;\n-\n-  cpp_start_lookahead (pfile);\n-  cpp_get_token (pfile, &token);\n-  cpp_stop_lookahead (pfile, 0);\n-\n-  /* If it's not a string, pass it through and let the front end complain.  */\n-  if (token.type == CPP_STRING)\n-    {\n-     /* Make a NUL-terminated copy of the string.  */\n-      char *filename = alloca (token.val.str.len + 1);\n-      memcpy (filename, token.val.str.text, token.val.str.len);\n-      filename[token.val.str.len] = '\\0';\n-      if (cpp_included (pfile, filename))\n-\tcpp_warning (pfile,\n-\t     \"#pragma GCC implementation for \\\"%s\\\" appears after file is included\",\n-\t\t     filename);\n-    }\n-  else if (token.type != CPP_EOF)\n-    {\n-      cpp_error (pfile, \"malformed #pragma GCC implementation\");\n-      return;\n-    }\n-\n-  /* Output?  This is nasty, but we don't have [GCC] implementation in\n-     the buffer.  */\n-  if (cb->def_pragma)\n-    {\n-      maybe_print_line (cpp_get_line (pfile)->output_line);\n-      fputs (\"#pragma GCC implementation \", print.outf);\n-      cpp_output_line (pfile, print.outf);\n-      print.lineno++;\n-    }\n-}\n-\n /* Dump out the hash table.  */\n static int\n dump_macro (pfile, node, v)"}]}