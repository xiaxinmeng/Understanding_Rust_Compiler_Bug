{"sha": "8752c357c583c5e7d1c31aa171c334002d4b0004", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc1MmMzNTdjNTgzYzVlN2QxYzMxYWExNzFjMzM0MDAyZDRiMDAwNA==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@suse.de", "date": "2001-01-14T07:30:29Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2001-01-14T07:30:29Z"}, "message": "i386.c (ix86_split_fp_branch): Remove unused variables.\n\n\t* config/i386/i386.c (ix86_split_fp_branch): Remove unused\n\tvariables.\n\t(ix86_fp_compare_mode): Add unused attribute.\n\t(ix86_expand_fp_movcc): Remove unused variable.\n\t(ix86_expand_builtin): Make fcode unsigned.\n\n\t* expr.c (MOVE_BY_PIECES_P): Cast MOVE_RATIO to unsigned.\n\t(expand_expr): Add cast to avoid signed warning.\n\t(store_field): Likewise.\n\t(store_constructor_field): Likewise.\n\t(store_constructor): Likewise.\n\t(store_expr): Likewise.\n\t(clear_storage): Likewise.\n\t(emit_group_store): Likewise.\n\t(emit_group_load): Likewise.\n\nFrom-SVN: r39000", "tree": {"sha": "81a3bb643171791eed6e6a30852fb7b50a015fc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81a3bb643171791eed6e6a30852fb7b50a015fc6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8752c357c583c5e7d1c31aa171c334002d4b0004", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8752c357c583c5e7d1c31aa171c334002d4b0004", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8752c357c583c5e7d1c31aa171c334002d4b0004", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8752c357c583c5e7d1c31aa171c334002d4b0004/comments", "author": {"login": "ajaeger", "id": 16867, "node_id": "MDQ6VXNlcjE2ODY3", "avatar_url": "https://avatars.githubusercontent.com/u/16867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajaeger", "html_url": "https://github.com/ajaeger", "followers_url": "https://api.github.com/users/ajaeger/followers", "following_url": "https://api.github.com/users/ajaeger/following{/other_user}", "gists_url": "https://api.github.com/users/ajaeger/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajaeger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajaeger/subscriptions", "organizations_url": "https://api.github.com/users/ajaeger/orgs", "repos_url": "https://api.github.com/users/ajaeger/repos", "events_url": "https://api.github.com/users/ajaeger/events{/privacy}", "received_events_url": "https://api.github.com/users/ajaeger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "04ae6c5985b9a4a4dcbba4832ca7680225d747ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04ae6c5985b9a4a4dcbba4832ca7680225d747ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04ae6c5985b9a4a4dcbba4832ca7680225d747ce"}], "stats": {"total": 55, "additions": 36, "deletions": 19}, "files": [{"sha": "8ec52e193e871b1b4cbbef28bd01c25a1465ee00", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8752c357c583c5e7d1c31aa171c334002d4b0004/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8752c357c583c5e7d1c31aa171c334002d4b0004/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8752c357c583c5e7d1c31aa171c334002d4b0004", "patch": "@@ -1,3 +1,21 @@\n+2001-01-14  Andreas Jaeger  <aj@suse.de>\n+\n+\t* config/i386/i386.c (ix86_split_fp_branch): Remove unused\n+\tvariables.\n+\t(ix86_fp_compare_mode): Add unused attribute.\n+\t(ix86_expand_fp_movcc): Remove unused variable.\n+\t(ix86_expand_builtin): Make fcode unsigned.\n+\n+\t* expr.c (MOVE_BY_PIECES_P): Cast MOVE_RATIO to unsigned.\n+\t(expand_expr): Add cast to avoid signed warning.\n+\t(store_field): Likewise.\n+\t(store_constructor_field): Likewise.\n+\t(store_constructor): Likewise.\n+\t(store_expr): Likewise.\n+\t(clear_storage): Likewise.\n+\t(emit_group_store): Likewise.\n+\t(emit_group_load): Likewise.\n+\n 2001-01-13  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* c-common.c: Move format checking code to ..."}, {"sha": "eb8a852272c337abd058c558471f79904bdf1e76", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8752c357c583c5e7d1c31aa171c334002d4b0004/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8752c357c583c5e7d1c31aa171c334002d4b0004/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=8752c357c583c5e7d1c31aa171c334002d4b0004", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines used for code generation on IA-32.\n-   Copyright (C) 1988, 1992, 1994, 1995, 1996, 1997, 1998, 1999, 2000\n+   Copyright (C) 1988, 1992, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001\n    Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n@@ -4651,7 +4651,7 @@ ix86_expand_int_compare (code, op0, op1)\n \n enum machine_mode\n ix86_fp_compare_mode (code)\n-     enum rtx_code code;\n+     enum rtx_code code ATTRIBUTE_UNUSED;\n {\n   /* ??? In order to make all comparisons reversible, we do all comparisons\n      non-trapping when compiling for IEEE.  Once gcc is able to distinguish\n@@ -5355,7 +5355,6 @@ ix86_split_fp_branch (condition, op1, op2, target1, target2, tmp)\n   rtx second, bypass;\n   rtx label = NULL_RTX;\n   enum rtx_code code = GET_CODE (condition);\n-  enum rtx_code bypass_code, second_code, first;\n \n   if (target2 != pc_rtx)\n     {\n@@ -5811,7 +5810,6 @@ ix86_expand_fp_movcc (operands)\n      rtx operands[];\n {\n   enum rtx_code code;\n-  enum machine_mode mode;\n   rtx tmp;\n   rtx compare_op;\n \n@@ -8156,7 +8154,7 @@ ix86_expand_builtin (exp, target, subtarget, mode, ignore)\n   tree arg0, arg1, arg2, arg3;\n   rtx op0, op1, op2, pat;\n   enum machine_mode tmode, mode0, mode1, mode2;\n-  int fcode = DECL_FUNCTION_CODE (fndecl);\n+  unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n \n   switch (fcode)\n     {"}, {"sha": "49b1c3e7e097f10f81506494af5f2fdf6ef1d448", "filename": "gcc/expr.c", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8752c357c583c5e7d1c31aa171c334002d4b0004/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8752c357c583c5e7d1c31aa171c334002d4b0004/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=8752c357c583c5e7d1c31aa171c334002d4b0004", "patch": "@@ -1,6 +1,6 @@\n /* Convert tree expression to rtl instructions, for GNU compiler.\n-   Copyright (C) 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n+   2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -212,7 +212,7 @@ static char direct_store[NUM_MACHINE_MODES];\n    to perform a structure copy.  */\n #ifndef MOVE_BY_PIECES_P\n #define MOVE_BY_PIECES_P(SIZE, ALIGN) \\\n-  (move_by_pieces_ninsns (SIZE, ALIGN) < MOVE_RATIO)\n+  (move_by_pieces_ninsns (SIZE, ALIGN) < (unsigned int) MOVE_RATIO)\n #endif\n \n /* This array records the insn_code of insns to perform block moves.  */\n@@ -1967,7 +1967,7 @@ emit_group_load (dst, orig_src, ssize, align)\n       int shift = 0;\n \n       /* Handle trailing fragments that run over the size of the struct.  */\n-      if (ssize >= 0 && bytepos + bytelen > ssize)\n+      if (ssize >= 0 && bytepos + (HOST_WIDE_INT) bytelen > ssize)\n \t{\n \t  shift = (bytelen - (ssize - bytepos)) * BITS_PER_UNIT;\n \t  bytelen = ssize - bytepos;\n@@ -1992,7 +1992,7 @@ emit_group_load (dst, orig_src, ssize, align)\n \t  if (bytepos == 0\n \t      && bytelen == GET_MODE_SIZE (GET_MODE (XEXP (src, 0))))\n \t    tmps[i] = XEXP (src, 0);\n-\t  else if (bytepos == GET_MODE_SIZE (GET_MODE (XEXP (src, 0)))\n+\t  else if (bytepos == (HOST_WIDE_INT) GET_MODE_SIZE (GET_MODE (XEXP (src, 0)))\n \t\t   && bytelen == GET_MODE_SIZE (GET_MODE (XEXP (src, 1))))\n \t    tmps[i] = XEXP (src, 1);\n \t  else\n@@ -2090,7 +2090,7 @@ emit_group_store (orig_dst, src, ssize, align)\n       unsigned int bytelen = GET_MODE_SIZE (mode);\n \n       /* Handle trailing fragments that run over the size of the struct.  */\n-      if (ssize >= 0 && bytepos + bytelen > ssize)\n+      if (ssize >= 0 && bytepos + (HOST_WIDE_INT) bytelen > ssize)\n \t{\n \t  if (BYTES_BIG_ENDIAN)\n \t    {\n@@ -2539,7 +2539,7 @@ clear_storage (object, size, align)\n      just move a zero.  Otherwise, do this a piece at a time.  */\n   if (GET_MODE (object) != BLKmode\n       && GET_CODE (size) == CONST_INT\n-      && GET_MODE_SIZE (GET_MODE (object)) == INTVAL (size))\n+      && GET_MODE_SIZE (GET_MODE (object)) == (unsigned int) INTVAL (size))\n     emit_move_insn (object, CONST0_RTX (GET_MODE (object)));\n   else\n     {\n@@ -4151,9 +4151,10 @@ store_expr (exp, target, want_value)\n \t\t{\n \t\t  addr = plus_constant (addr, TREE_STRING_LENGTH (exp));\n \t\t  size = plus_constant (size, -TREE_STRING_LENGTH (exp));\n-\t\t  align = MIN (align, (BITS_PER_UNIT\n-\t\t\t\t       * (INTVAL (copy_size_rtx)\n-\t\t\t\t\t  & - INTVAL (copy_size_rtx))));\n+\t\t  align = MIN (align,\n+\t\t\t       (unsigned int) (BITS_PER_UNIT\n+\t\t\t\t\t       * (INTVAL (copy_size_rtx)\n+\t\t\t\t\t\t  & - INTVAL (copy_size_rtx))));\n \t\t}\n \t      else\n \t\t{\n@@ -4343,7 +4344,7 @@ store_constructor_field (target, bitsize, bitpos,\n       /* Show the alignment may no longer be what it was and update the alias\n \t set, if required.  */\n       if (bitpos != 0)\n-\talign = MIN (align, bitpos & - bitpos);\n+\talign = MIN (align, (unsigned int) bitpos & - bitpos);\n       if (GET_CODE (target) == MEM)\n \tMEM_ALIAS_SET (target) = alias_set;\n \n@@ -4429,7 +4430,7 @@ store_constructor (exp, target, align, cleared, size)\n \t\t    != fields_length (type))\n \t\t   || mostly_zeros_p (exp))\n \t       && (GET_CODE (target) != REG\n-\t\t   || GET_MODE_SIZE (GET_MODE (target)) == size))\n+\t\t   || (HOST_WIDE_INT) GET_MODE_SIZE (GET_MODE (target)) == size))\n \t{\n \t  if (! cleared)\n \t    clear_storage (target, GEN_INT (size), align);\n@@ -5040,7 +5041,7 @@ store_field (target, bitsize, bitpos, mode, exp, value_mode,\n \n       PUT_MODE (blk_object, BLKmode);\n \n-      if (bitsize != GET_MODE_BITSIZE (GET_MODE (target)))\n+      if (bitsize != (HOST_WIDE_INT) GET_MODE_BITSIZE (GET_MODE (target)))\n \temit_move_insn (object, target);\n \n       store_field (blk_object, bitsize, bitpos, mode, exp, VOIDmode, 0,\n@@ -7287,7 +7288,7 @@ expand_expr (exp, target, tmode, modifier)\n \t\t\t MIN ((int_size_in_bytes (TREE_TYPE\n \t\t\t\t\t\t  (TREE_OPERAND (exp, 0)))\n \t\t\t       * BITS_PER_UNIT),\n-\t\t\t      GET_MODE_BITSIZE (mode)),\n+\t\t\t      (HOST_WIDE_INT) GET_MODE_BITSIZE (mode)),\n \t\t\t 0, TYPE_MODE (valtype), TREE_OPERAND (exp, 0),\n \t\t\t VOIDmode, 0, BITS_PER_UNIT,\n \t\t\t int_size_in_bytes (type), 0);"}]}