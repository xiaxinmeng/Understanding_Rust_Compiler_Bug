{"sha": "2076e69bf92fae8efb0ee11a205a69ad8b4854a8", "node_id": "C_kwDOANBUbNoAKDIwNzZlNjliZjkyZmFlOGVmYjBlZTExYTIwNWE2OWFkOGI0ODU0YTg", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-04-12T14:03:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-12T14:03:11Z"}, "message": "Merge #1108\n\n1108: Add missing unify rules for inference variables r=philberty a=philberty\n\nInference variables can unify with anything so this includes these\r\ncovariant types like references/slices etc. This patch is needed for more\r\ncomplex type-checking in libcore and generics.\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "8bc359709578d1610dd282a4333d35e14d092638", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bc359709578d1610dd282a4333d35e14d092638"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2076e69bf92fae8efb0ee11a205a69ad8b4854a8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiVYafCRBK7hj4Ov3rIwAAEqcIADBgDkqwVIILr4YQofpdCDa3\nczCIsDldLp4XM59nwazWI4b5Zg5UzDoSxXIf+QRo0fg0/+Y2Tg5tda9zRnfQumiZ\nPyi7hw3+K3icnzbNrD+kguYt2EnGASwzqfSHUY8SS55JgII+qHAkRWlnwZx5EbIZ\nVSwT153XjXIbCa7Q8mg5EiH9GdnggxAxsGvzju7nkkJf5K61JG5KmSS5L3JtF/3a\ndMBMh2nGnCjs6BIET+cVTYbfB+8rgyFh4oIUyXBpFBw0MiFJFWG8JrJ9NToIWWa6\nmF+SCL+RBBr31zCHXSVmHaJ05xbQyrs4rQleJnuCK5nJ1hxeIaHIClR4WTC/j3A=\n=uWJB\n-----END PGP SIGNATURE-----\n", "payload": "tree 8bc359709578d1610dd282a4333d35e14d092638\nparent c494f30766b569f6bebaf715ae6368c0335b0025\nparent 7609dfc63e021117c194544f83b2edce34a81520\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1649772191 +0000\ncommitter GitHub <noreply@github.com> 1649772191 +0000\n\nMerge #1108\n\n1108: Add missing unify rules for inference variables r=philberty a=philberty\n\nInference variables can unify with anything so this includes these\r\ncovariant types like references/slices etc. This patch is needed for more\r\ncomplex type-checking in libcore and generics.\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2076e69bf92fae8efb0ee11a205a69ad8b4854a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2076e69bf92fae8efb0ee11a205a69ad8b4854a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2076e69bf92fae8efb0ee11a205a69ad8b4854a8/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c494f30766b569f6bebaf715ae6368c0335b0025", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c494f30766b569f6bebaf715ae6368c0335b0025", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c494f30766b569f6bebaf715ae6368c0335b0025"}, {"sha": "7609dfc63e021117c194544f83b2edce34a81520", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7609dfc63e021117c194544f83b2edce34a81520", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7609dfc63e021117c194544f83b2edce34a81520"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "f95e7bf7cd183698fb418915b974b7c1cb25fb35", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2076e69bf92fae8efb0ee11a205a69ad8b4854a8/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2076e69bf92fae8efb0ee11a205a69ad8b4854a8/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=2076e69bf92fae8efb0ee11a205a69ad8b4854a8", "patch": "@@ -867,6 +867,18 @@ class ArrayRules : public BaseRules\n \t\t       TyVar (base_resolved->get_ref ()));\n   }\n \n+  void visit (InferType &type) override\n+  {\n+    if (type.get_infer_kind () != InferType::InferTypeKind::GENERAL)\n+      {\n+\tBaseRules::visit (type);\n+\treturn;\n+      }\n+\n+    resolved = base->clone ();\n+    resolved->set_ref (type.get_ref ());\n+  }\n+\n private:\n   BaseType *get_base () override { return base; }\n \n@@ -896,6 +908,18 @@ class SliceRules : public BaseRules\n \t\t\t      TyVar (base_resolved->get_ref ()));\n   }\n \n+  void visit (InferType &type) override\n+  {\n+    if (type.get_infer_kind () != InferType::InferTypeKind::GENERAL)\n+      {\n+\tBaseRules::visit (type);\n+\treturn;\n+      }\n+\n+    resolved = base->clone ();\n+    resolved->set_ref (type.get_ref ());\n+  }\n+\n private:\n   BaseType *get_base () override { return base; }\n \n@@ -1140,6 +1164,18 @@ class TupleRules : public BaseRules\n \t\t\t\t    type.get_ident ().locus, fields);\n   }\n \n+  void visit (InferType &type) override\n+  {\n+    if (type.get_infer_kind () != InferType::InferTypeKind::GENERAL)\n+      {\n+\tBaseRules::visit (type);\n+\treturn;\n+      }\n+\n+    resolved = base->clone ();\n+    resolved->set_ref (type.get_ref ());\n+  }\n+\n private:\n   BaseType *get_base () override { return base; }\n \n@@ -1263,6 +1299,18 @@ class ReferenceRules : public BaseRules\n \t\t\t\t  base->mutability ());\n   }\n \n+  void visit (InferType &type) override\n+  {\n+    if (type.get_infer_kind () != InferType::InferTypeKind::GENERAL)\n+      {\n+\tBaseRules::visit (type);\n+\treturn;\n+      }\n+\n+    resolved = base->clone ();\n+    resolved->set_ref (type.get_ref ());\n+  }\n+\n private:\n   BaseType *get_base () override { return base; }\n \n@@ -1303,6 +1351,18 @@ class PointerRules : public BaseRules\n \t\t\t\tbase->mutability ());\n   }\n \n+  void visit (InferType &type) override\n+  {\n+    if (type.get_infer_kind () != InferType::InferTypeKind::GENERAL)\n+      {\n+\tBaseRules::visit (type);\n+\treturn;\n+      }\n+\n+    resolved = base->clone ();\n+    resolved->set_ref (type.get_ref ());\n+  }\n+\n private:\n   BaseType *get_base () override { return base; }\n "}]}