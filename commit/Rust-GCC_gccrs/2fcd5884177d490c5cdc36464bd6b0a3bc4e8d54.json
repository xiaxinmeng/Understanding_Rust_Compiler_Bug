{"sha": "2fcd5884177d490c5cdc36464bd6b0a3bc4e8d54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZjZDU4ODQxNzdkNDkwYzVjZGMzNjQ2NGJkNmIwYTNiYzRlOGQ1NA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2017-10-07T21:14:06Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2017-10-07T21:14:06Z"}, "message": "re PR fortran/82375 (PDT components in PDT declarations fail to compile)\n\n2017-10-07  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/82375\n\t* class.c (gfc_find_derived_vtab): Return NULL for a passed\n\tpdt template to prevent bad procedures from being written.\n\t* decl.c (gfc_get_pdt_instance): Do not use the default\n\tinitializer for pointer and allocatable pdt type components. If\n\tthe component is allocatbale, set the 'alloc_comp' attribute of\n\t'instance'.\n\t* module.c : Add a prototype for 'mio_actual_arglist'. Add a\n\tboolean argument 'pdt'.\n\t(mio_component): Call it for the parameter list of pdt type\n\tcomponents with 'pdt' set to true.\n\t(mio_actual_arg): Add the boolean 'pdt' and, if it is set, call\n\tmio_integer for the 'spec_type'.\n\t(mio_actual_arglist): Add the boolean 'pdt' and use it in the\n\tcall to mio_actual_arg.\n\t(mio_expr, mio_omp_udr_expr): Call mio_actual_arglist with\n\t'pdt' set false.\n\t* resolve.c (get_pdt_spec_expr): Add the parameter name to the\n\tKIND parameter error.\n\t(get_pdt_constructor): Check that cons->expr is non-null.\n\t* trans-array.c (structure_alloc_comps): For deallocation of\n\tallocatable components, ensure that parameterized components\n\tare deallocated first. Likewise, when parameterized components\n\tare allocated, nullify allocatable components first. Do not\n\trecurse into pointer or allocatable pdt components while\n\tallocating or deallocating parameterized components. Test that\n\tparameterized arrays or strings are allocated before freeing\n\tthem.\n\t(gfc_trans_pointer_assignment): Call the new function. Tidy up\n\ta minor whitespace issue.\n\ttrans-decl.c (gfc_trans_deferred_vars): Set 'tmp' to NULL_TREE\n\tto prevent the expression from being used a second time.\n\n2017-10-07  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/82375\n\t* gfortran.dg/pdt_13.f03 : New test.\n\t* gfortran.dg/pdt_14.f03 : New test.\n\t* gfortran.dg/pdt_15.f03 : New test.\n\nFrom-SVN: r253514", "tree": {"sha": "f35dd21ab87d1b52f109109851b7511d6da2144c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f35dd21ab87d1b52f109109851b7511d6da2144c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fcd5884177d490c5cdc36464bd6b0a3bc4e8d54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fcd5884177d490c5cdc36464bd6b0a3bc4e8d54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fcd5884177d490c5cdc36464bd6b0a3bc4e8d54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fcd5884177d490c5cdc36464bd6b0a3bc4e8d54/comments", "author": null, "committer": null, "parents": [{"sha": "12b9f3ac928e1ed7e3aa92cab42beb6317b27981", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12b9f3ac928e1ed7e3aa92cab42beb6317b27981", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12b9f3ac928e1ed7e3aa92cab42beb6317b27981"}], "stats": {"total": 399, "additions": 386, "deletions": 13}, "files": [{"sha": "c9e81aa238ca6d17b4c10893d5148e053976de15", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fcd5884177d490c5cdc36464bd6b0a3bc4e8d54/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fcd5884177d490c5cdc36464bd6b0a3bc4e8d54/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2fcd5884177d490c5cdc36464bd6b0a3bc4e8d54", "patch": "@@ -1,3 +1,38 @@\n+2017-10-07  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/82375\n+\t* class.c (gfc_find_derived_vtab): Return NULL for a passed\n+\tpdt template to prevent bad procedures from being written.\n+\t* decl.c (gfc_get_pdt_instance): Do not use the default\n+\tinitializer for pointer and allocatable pdt type components. If\n+\tthe component is allocatbale, set the 'alloc_comp' attribute of\n+\t'instance'.\n+\t* module.c : Add a prototype for 'mio_actual_arglist'. Add a\n+\tboolean argument 'pdt'.\n+\t(mio_component): Call it for the parameter list of pdt type\n+\tcomponents with 'pdt' set to true.\n+\t(mio_actual_arg): Add the boolean 'pdt' and, if it is set, call\n+\tmio_integer for the 'spec_type'.\n+\t(mio_actual_arglist): Add the boolean 'pdt' and use it in the\n+\tcall to mio_actual_arg.\n+\t(mio_expr, mio_omp_udr_expr): Call mio_actual_arglist with\n+\t'pdt' set false.\n+\t* resolve.c (get_pdt_spec_expr): Add the parameter name to the\n+\tKIND parameter error.\n+\t(get_pdt_constructor): Check that cons->expr is non-null.\n+\t* trans-array.c (structure_alloc_comps): For deallocation of\n+\tallocatable components, ensure that parameterized components\n+\tare deallocated first. Likewise, when parameterized components\n+\tare allocated, nullify allocatable components first. Do not\n+\trecurse into pointer or allocatable pdt components while\n+\tallocating or deallocating parameterized components. Test that\n+\tparameterized arrays or strings are allocated before freeing\n+\tthem.\n+\t(gfc_trans_pointer_assignment): Call the new function. Tidy up\n+\ta minor whitespace issue.\n+\ttrans-decl.c (gfc_trans_deferred_vars): Set 'tmp' to NULL_TREE\n+\tto prevent the expression from being used a second time.\n+\n 2017-10-07  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/49232"}, {"sha": "ebbd41b0d96ef2832d6073391ef177db563018a5", "filename": "gcc/fortran/class.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fcd5884177d490c5cdc36464bd6b0a3bc4e8d54/gcc%2Ffortran%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fcd5884177d490c5cdc36464bd6b0a3bc4e8d54/gcc%2Ffortran%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fclass.c?ref=2fcd5884177d490c5cdc36464bd6b0a3bc4e8d54", "patch": "@@ -2211,6 +2211,9 @@ gfc_find_derived_vtab (gfc_symbol *derived)\n   gfc_gsymbol *gsym = NULL;\n   gfc_symbol *dealloc = NULL, *arg = NULL;\n \n+  if (derived->attr.pdt_template)\n+    return NULL;\n+\n   /* Find the top-level namespace.  */\n   for (ns = gfc_current_ns; ns; ns = ns->parent)\n     if (!ns->parent)"}, {"sha": "5bf56c4d4b04d655d8f8befb82a5fdbe2fd13827", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fcd5884177d490c5cdc36464bd6b0a3bc4e8d54/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fcd5884177d490c5cdc36464bd6b0a3bc4e8d54/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=2fcd5884177d490c5cdc36464bd6b0a3bc4e8d54", "patch": "@@ -3570,7 +3570,11 @@ gfc_get_pdt_instance (gfc_actual_arglist *param_list, gfc_symbol **sym,\n \t  type_param_spec_list = old_param_spec_list;\n \n \t  c2->param_list = params;\n-\t  c2->initializer = gfc_default_initializer (&c2->ts);\n+\t  if (!(c2->attr.pointer || c2->attr.allocatable))\n+\t    c2->initializer = gfc_default_initializer (&c2->ts);\n+\n+\t  if (c2->attr.allocatable)\n+\t    instance->attr.alloc_comp = 1;\n \t}\n     }\n "}, {"sha": "3f19a02160969f4c564ca2eb588a349934757970", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fcd5884177d490c5cdc36464bd6b0a3bc4e8d54/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fcd5884177d490c5cdc36464bd6b0a3bc4e8d54/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=2fcd5884177d490c5cdc36464bd6b0a3bc4e8d54", "patch": "@@ -2788,6 +2788,7 @@ mio_component_ref (gfc_component **cp)\n static void mio_namespace_ref (gfc_namespace **nsp);\n static void mio_formal_arglist (gfc_formal_arglist **formal);\n static void mio_typebound_proc (gfc_typebound_proc** proc);\n+static void mio_actual_arglist (gfc_actual_arglist **ap, bool pdt);\n \n static void\n mio_component (gfc_component *c, int vtype)\n@@ -2819,6 +2820,9 @@ mio_component (gfc_component *c, int vtype)\n   /* PDT templates store the expression for the kind of a component here.  */\n   mio_expr (&c->kind_expr);\n \n+  /* PDT types store component specification list here. */\n+  mio_actual_arglist (&c->param_list, true);\n+\n   mio_symbol_attribute (&c->attr);\n   if (c->ts.type == BT_CLASS)\n     c->attr.class_ok = 1;\n@@ -2874,17 +2878,19 @@ mio_component_list (gfc_component **cp, int vtype)\n \n \n static void\n-mio_actual_arg (gfc_actual_arglist *a)\n+mio_actual_arg (gfc_actual_arglist *a, bool pdt)\n {\n   mio_lparen ();\n   mio_pool_string (&a->name);\n   mio_expr (&a->expr);\n+  if (pdt)\n+    mio_integer ((int *)&a->spec_type);\n   mio_rparen ();\n }\n \n \n static void\n-mio_actual_arglist (gfc_actual_arglist **ap)\n+mio_actual_arglist (gfc_actual_arglist **ap, bool pdt)\n {\n   gfc_actual_arglist *a, *tail;\n \n@@ -2893,7 +2899,7 @@ mio_actual_arglist (gfc_actual_arglist **ap)\n   if (iomode == IO_OUTPUT)\n     {\n       for (a = *ap; a; a = a->next)\n-\tmio_actual_arg (a);\n+\tmio_actual_arg (a, pdt);\n \n     }\n   else\n@@ -2913,7 +2919,7 @@ mio_actual_arglist (gfc_actual_arglist **ap)\n \t    tail->next = a;\n \n \t  tail = a;\n-\t  mio_actual_arg (a);\n+\t  mio_actual_arg (a, pdt);\n \t}\n     }\n \n@@ -3538,7 +3544,7 @@ mio_expr (gfc_expr **ep)\n \n     case EXPR_FUNCTION:\n       mio_symtree_ref (&e->symtree);\n-      mio_actual_arglist (&e->value.function.actual);\n+      mio_actual_arglist (&e->value.function.actual, false);\n \n       if (iomode == IO_OUTPUT)\n \t{\n@@ -4203,7 +4209,7 @@ mio_omp_udr_expr (gfc_omp_udr *udr, gfc_symbol **sym1, gfc_symbol **sym2,\n \t  int flag;\n \t  mio_name (1, omp_declare_reduction_stmt);\n \t  mio_symtree_ref (&ns->code->symtree);\n-\t  mio_actual_arglist (&ns->code->ext.actual);\n+\t  mio_actual_arglist (&ns->code->ext.actual, false);\n \n \t  flag = ns->code->resolved_isym != NULL;\n \t  mio_integer (&flag);\n@@ -4245,7 +4251,7 @@ mio_omp_udr_expr (gfc_omp_udr *udr, gfc_symbol **sym1, gfc_symbol **sym2,\n \t  int flag;\n \t  ns->code = gfc_get_code (EXEC_CALL);\n \t  mio_symtree_ref (&ns->code->symtree);\n-\t  mio_actual_arglist (&ns->code->ext.actual);\n+\t  mio_actual_arglist (&ns->code->ext.actual, false);\n \n \t  mio_integer (&flag);\n \t  if (flag)"}, {"sha": "bd316344813c6fd783c6ac30e5f0847fca5b114b", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fcd5884177d490c5cdc36464bd6b0a3bc4e8d54/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fcd5884177d490c5cdc36464bd6b0a3bc4e8d54/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=2fcd5884177d490c5cdc36464bd6b0a3bc4e8d54", "patch": "@@ -1161,8 +1161,8 @@ get_pdt_spec_expr (gfc_component *c, gfc_expr *expr)\n       param_tail->spec_type = SPEC_ASSUMED;\n       if (c->attr.pdt_kind)\n \t{\n-\t  gfc_error (\"The KIND parameter in the PDT constructor \"\n-\t\t     \"at %C has no value\");\n+\t  gfc_error (\"The KIND parameter %qs in the PDT constructor \"\n+\t\t     \"at %C has no value\", param->name);\n \t  return false;\n \t}\n     }\n@@ -1188,7 +1188,8 @@ get_pdt_constructor (gfc_expr *expr, gfc_constructor **constr,\n \n   for (; comp && cons; comp = comp->next, cons = gfc_constructor_next (cons))\n     {\n-      if (cons->expr->expr_type == EXPR_STRUCTURE\n+      if (cons->expr\n+\t  && cons->expr->expr_type == EXPR_STRUCTURE\n \t  && comp->ts.type == BT_DERIVED)\n \t{\n \t  t = get_pdt_constructor (cons->expr, NULL, comp->ts.u.derived);"}, {"sha": "a357389ae646ee30500bc158ac7077fcd0ad2d41", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fcd5884177d490c5cdc36464bd6b0a3bc4e8d54/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fcd5884177d490c5cdc36464bd6b0a3bc4e8d54/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=2fcd5884177d490c5cdc36464bd6b0a3bc4e8d54", "patch": "@@ -8400,6 +8400,19 @@ structure_alloc_comps (gfc_symbol * der_type, tree decl,\n       return tmp;\n     }\n \n+  if (purpose == DEALLOCATE_ALLOC_COMP && der_type->attr.pdt_type)\n+    {\n+      tmp = structure_alloc_comps (der_type, decl, NULL_TREE, rank,\n+\t\t\t\t   DEALLOCATE_PDT_COMP, 0);\n+      gfc_add_expr_to_block (&fnblock, tmp);\n+    }\n+  else if (purpose == ALLOCATE_PDT_COMP && der_type->attr.alloc_comp)\n+    {\n+      tmp = structure_alloc_comps (der_type, decl, NULL_TREE, rank,\n+\t\t\t\t   NULLIFY_ALLOC_COMP, 0);\n+      gfc_add_expr_to_block (&fnblock, tmp);\n+    }\n+\n   /* Otherwise, act on the components or recursively call self to\n      act on a chain of components.  */\n   for (c = der_type->components; c; c = c->next)\n@@ -9072,7 +9085,8 @@ structure_alloc_comps (gfc_symbol * der_type, tree decl,\n \n \t  /* Recurse in to PDT components.  */\n \t  if ((c->ts.type == BT_DERIVED || c->ts.type == BT_CLASS)\n-\t      && c->ts.u.derived && c->ts.u.derived->attr.pdt_type)\n+\t      && c->ts.u.derived && c->ts.u.derived->attr.pdt_type\n+\t      && !(c->attr.pointer || c->attr.allocatable))\n \t    {\n \t      bool is_deferred = false;\n \t      gfc_actual_arglist *tail = c->param_list;\n@@ -9106,7 +9120,8 @@ structure_alloc_comps (gfc_symbol * der_type, tree decl,\n \n \t  /* Recurse in to PDT components.  */\n \t  if ((c->ts.type == BT_DERIVED || c->ts.type == BT_CLASS)\n-\t      && c->ts.u.derived && c->ts.u.derived->attr.pdt_type)\n+\t      && c->ts.u.derived && c->ts.u.derived->attr.pdt_type\n+\t      && (!c->attr.pointer && !c->attr.allocatable))\n \t    {\n \t      tmp = gfc_deallocate_pdt_comp (c->ts.u.derived, comp,\n \t\t\t\t\t     c->as ? c->as->rank : 0);\n@@ -9116,13 +9131,23 @@ structure_alloc_comps (gfc_symbol * der_type, tree decl,\n \t  if (c->attr.pdt_array)\n \t    {\n \t      tmp = gfc_conv_descriptor_data_get (comp);\n+\t      null_cond = fold_build2_loc (input_location, NE_EXPR,\n+\t\t\t\t\t   boolean_type_node, tmp,\n+\t\t\t\t\t   build_int_cst (TREE_TYPE (tmp), 0));\n \t      tmp = gfc_call_free (tmp);\n+\t      tmp = build3_v (COND_EXPR, null_cond, tmp,\n+\t\t\t      build_empty_stmt (input_location));\n \t      gfc_add_expr_to_block (&fnblock, tmp);\n \t      gfc_conv_descriptor_data_set (&fnblock, comp, null_pointer_node);\n \t    }\n \t  else if (c->attr.pdt_string)\n \t    {\n+\t      null_cond = fold_build2_loc (input_location, NE_EXPR,\n+\t\t\t\t\t   boolean_type_node, comp,\n+\t\t\t\t\t   build_int_cst (TREE_TYPE (comp), 0));\n \t      tmp = gfc_call_free (comp);\n+\t      tmp = build3_v (COND_EXPR, null_cond, tmp,\n+\t\t\t      build_empty_stmt (input_location));\n \t      gfc_add_expr_to_block (&fnblock, tmp);\n \t      tmp = fold_convert (TREE_TYPE (comp), null_pointer_node);\n \t      gfc_add_modify (&fnblock, comp, tmp);"}, {"sha": "019b8035b6f4db98b28325a1056eb1a5b42093eb", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fcd5884177d490c5cdc36464bd6b0a3bc4e8d54/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fcd5884177d490c5cdc36464bd6b0a3bc4e8d54/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=2fcd5884177d490c5cdc36464bd6b0a3bc4e8d54", "patch": "@@ -4634,6 +4634,10 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n \t\t}\n \n \t      gfc_add_init_cleanup (block, gfc_finish_block (&init), tmp);\n+\t      /* TODO find out why this is necessary to stop double calls to\n+\t\t free.  Somebody is reusing the expression in 'tmp' because\n+\t\t it is being used unititialized.  */\n+\t      tmp = NULL_TREE;\n \t    }\n \t}\n       else if (sym->ts.type == BT_CHARACTER && sym->ts.deferred)"}, {"sha": "932a67f9855fb687275e527f73b91b50546d08b3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fcd5884177d490c5cdc36464bd6b0a3bc4e8d54/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fcd5884177d490c5cdc36464bd6b0a3bc4e8d54/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2fcd5884177d490c5cdc36464bd6b0a3bc4e8d54", "patch": "@@ -1,3 +1,10 @@\n+2017-10-07  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/82375\n+\t* gfortran.dg/pdt_13.f03 : New test.\n+\t* gfortran.dg/pdt_14.f03 : New test.\n+\t* gfortran.dg/pdt_15.f03 : New test.\n+\n 2017-10-07  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* gcc.dg/cold-1.c: New testcase."}, {"sha": "e53d0b7440b5b57b38705c427e2a891c851721dc", "filename": "gcc/testsuite/gfortran.dg/pdt_13.f03", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fcd5884177d490c5cdc36464bd6b0a3bc4e8d54/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_13.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fcd5884177d490c5cdc36464bd6b0a3bc4e8d54/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_13.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_13.f03?ref=2fcd5884177d490c5cdc36464bd6b0a3bc4e8d54", "patch": "@@ -0,0 +1,92 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR82375\n+!\n+! Based on contribution by Ian Chivers  <ian@rhymneyconsulting.co.uk>\n+!\n+module precision_module\n+  implicit none\n+  integer, parameter :: sp = selected_real_kind(6, 37)\n+  integer, parameter :: dp = selected_real_kind(15, 307)\n+  integer, parameter :: qp = selected_real_kind( 30, 291)\n+end module precision_module\n+\n+module link_module\n+  use precision_module\n+\n+  type link(real_kind)\n+    integer, kind :: real_kind\n+    real (kind=real_kind) :: n\n+    type (link(real_kind)), pointer :: next => NULL()\n+  end type link\n+\n+contains\n+\n+  function push_8 (self, arg) result(current)\n+    real(dp) :: arg\n+    type (link(real_kind=dp)), pointer :: self\n+    type (link(real_kind=dp)), pointer :: current\n+\n+    if (associated (self)) then\n+      current => self\n+      do while (associated (current%next))\n+        current => current%next\n+      end do\n+\n+      allocate (current%next)\n+      current => current%next\n+    else\n+      allocate (current)\n+      self => current\n+    end if\n+\n+    current%n = arg\n+    current%next => NULL ()\n+  end function push_8\n+\n+  function pop_8 (self) result(res)\n+    type (link(real_kind=dp)), pointer :: self\n+    type (link(real_kind=dp)), pointer :: current => NULL()\n+    type (link(real_kind=dp)), pointer :: previous => NULL()\n+    real(dp) :: res\n+\n+    res = 0.0_8\n+    if (associated (self)) then\n+      current => self\n+      do while (associated (current) .and. associated (current%next))\n+         previous => current\n+         current => current%next\n+      end do\n+\n+      previous%next => NULL ()\n+\n+      res = current%n\n+      if (associated (self, current)) then\n+        deallocate (self)\n+      else\n+        deallocate (current)\n+      end if\n+\n+    end if\n+  end function pop_8\n+\n+end module link_module\n+\n+program ch2701\n+  use precision_module\n+  use link_module\n+  implicit none\n+  integer, parameter :: wp = dp\n+  type (link(real_kind=wp)), pointer :: root => NULL()\n+  type (link(real_kind=wp)), pointer :: current\n+\n+  current => push_8 (root, 1.0_8)\n+  current => push_8 (root, 2.0_8)\n+  current => push_8 (root, 3.0_8)\n+\n+  if (int (pop_8 (root)) .ne. 3) call abort\n+  if (int (pop_8 (root)) .ne. 2) call abort\n+  if (int (pop_8 (root)) .ne. 1) call abort\n+  if (int (pop_8 (root)) .ne. 0) call abort\n+\n+end program ch2701"}, {"sha": "749789848e4c8e9a8fc8e704362b4a11d0e0b169", "filename": "gcc/testsuite/gfortran.dg/pdt_14.f03", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fcd5884177d490c5cdc36464bd6b0a3bc4e8d54/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_14.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fcd5884177d490c5cdc36464bd6b0a3bc4e8d54/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_14.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_14.f03?ref=2fcd5884177d490c5cdc36464bd6b0a3bc4e8d54", "patch": "@@ -0,0 +1,90 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR82375. This is the allocatable version of pdt_13.f03.\n+!\n+! Based on contribution by Ian Chivers  <ian@rhymneyconsulting.co.uk>\n+!\n+module precision_module\n+  implicit none\n+  integer, parameter :: sp = selected_real_kind(6, 37)\n+  integer, parameter :: dp = selected_real_kind(15, 307)\n+  integer, parameter :: qp = selected_real_kind( 30, 291)\n+end module precision_module\n+\n+module link_module\n+  use precision_module\n+\n+  type link(real_kind)\n+    integer, kind :: real_kind\n+    real (kind=real_kind) :: n\n+    type (link(real_kind)), allocatable :: next\n+  end type link\n+\n+contains\n+\n+  function push_8 (self, arg) result(current)\n+    real(dp) :: arg\n+    type (link(real_kind=dp)), allocatable, target :: self\n+    type (link(real_kind=dp)), pointer :: current\n+\n+    if (allocated (self)) then\n+      current => self\n+      do while (allocated (current%next))\n+        current => current%next\n+      end do\n+\n+      allocate (current%next)\n+      current => current%next\n+    else\n+      allocate (self)\n+      current => self\n+    end if\n+\n+    current%n = arg\n+\n+  end function push_8\n+\n+  function pop_8 (self) result(res)\n+    type (link(real_kind=dp)), allocatable, target :: self\n+    type (link(real_kind=dp)), pointer:: current\n+    type (link(real_kind=dp)), pointer :: previous\n+    real(dp) :: res\n+\n+    res = 0.0_8\n+    if (allocated (self)) then\n+      current => self\n+      previous => self\n+      do while (allocated (current%next))\n+         previous => current\n+         current => current%next\n+      end do\n+      res = current%n\n+      if (.not.allocated (previous%next)) then\n+        deallocate (self)\n+      else\n+        deallocate (previous%next)\n+      end if\n+\n+    end if\n+  end function pop_8\n+\n+end module link_module\n+\n+program ch2701\n+  use precision_module\n+  use link_module\n+  implicit none\n+  integer, parameter :: wp = dp\n+  type (link(real_kind=wp)), allocatable :: root\n+  type (link(real_kind=wp)), pointer :: current\n+\n+  current => push_8 (root, 1.0_8)\n+  current => push_8 (root, 2.0_8)\n+  current => push_8 (root, 3.0_8)\n+\n+  if (int (pop_8 (root)) .ne. 3) call abort\n+  if (int (pop_8 (root)) .ne. 2) call abort\n+  if (int (pop_8 (root)) .ne. 1) call abort\n+  if (int (pop_8 (root)) .ne. 0) call abort\n+\n+end program ch2701"}, {"sha": "bbf140ea59bc14e7ead1e4c3b2ab48b98658c6d5", "filename": "gcc/testsuite/gfortran.dg/pdt_15.f03", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fcd5884177d490c5cdc36464bd6b0a3bc4e8d54/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_15.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fcd5884177d490c5cdc36464bd6b0a3bc4e8d54/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_15.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_15.f03?ref=2fcd5884177d490c5cdc36464bd6b0a3bc4e8d54", "patch": "@@ -0,0 +1,106 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original\" }\n+!\n+! Test the fix for PR82375. This is a wrinkle on the the allocatable\n+! version of pdt_13.f03, pdt_14.f03, whereby 'root' is now declared\n+! in a subroutine so that it should be cleaned up automatically. This\n+! is best tested with valgrind or its like.\n+! In addition, the field 'n' has now become a parameterized length\n+! array to verify that the combination of allocatable components and\n+! parameterization works correctly.\n+!\n+! Based on contribution by Ian Chivers  <ian@rhymneyconsulting.co.uk>\n+!\n+module precision_module\n+  implicit none\n+  integer, parameter :: sp = selected_real_kind(6, 37)\n+  integer, parameter :: dp = selected_real_kind(15, 307)\n+  integer, parameter :: qp = selected_real_kind( 30, 291)\n+end module precision_module\n+\n+module link_module\n+  use precision_module\n+\n+  type link(real_kind, mat_len)\n+    integer, kind :: real_kind\n+    integer, len :: mat_len\n+    real (kind=real_kind) :: n(mat_len)\n+    type (link(real_kind, :)), allocatable :: next\n+  end type link\n+\n+contains\n+\n+  function push_8 (self, arg) result(current)\n+    real(dp) :: arg\n+    type (link(real_kind=dp, mat_len=:)), allocatable, target :: self\n+    type (link(real_kind=dp, mat_len=:)), pointer :: current\n+\n+    if (allocated (self)) then\n+      current => self\n+      do while (allocated (current%next))\n+        current => current%next\n+      end do\n+\n+      allocate (link(real_kind=dp, mat_len=1) :: current%next)\n+      current => current%next\n+    else\n+      allocate (link(real_kind=dp, mat_len=1) :: self)\n+      current => self\n+    end if\n+\n+    current%n(1) = arg\n+\n+  end function push_8\n+\n+  function pop_8 (self) result(res)\n+    type (link(real_kind=dp, mat_len=:)), allocatable, target :: self\n+    type (link(real_kind=dp, mat_len=:)), pointer:: current => NULL()\n+    type (link(real_kind=dp, mat_len=:)), pointer :: previous => NULL()\n+    real(dp) :: res\n+\n+    res = 0.0_8\n+    if (allocated (self)) then\n+      current => self\n+      previous => self\n+      do while (allocated (current%next))\n+         previous => current\n+         current => current%next\n+      end do\n+      res = current%n(1)\n+      if (.not.allocated (previous%next)) then\n+        deallocate (self)\n+      else\n+        deallocate (previous%next)\n+      end if\n+\n+    end if\n+  end function pop_8\n+\n+end module link_module\n+\n+program ch2701\n+  use precision_module\n+  use link_module\n+  implicit none\n+  integer, parameter :: wp = dp\n+\n+  call foo\n+contains\n+\n+  subroutine foo\n+    type (link(real_kind=wp, mat_len=:)), allocatable :: root\n+    type (link(real_kind=wp, mat_len=:)), pointer :: current => NULL()\n+\n+    current => push_8 (root, 1.0_8)\n+    current => push_8 (root, 2.0_8)\n+    current => push_8 (root, 3.0_8)\n+\n+    if (int (pop_8 (root)) .ne. 3) call abort\n+    if (int (pop_8 (root)) .ne. 2) call abort\n+    if (int (pop_8 (root)) .ne. 1) call abort\n+!    if (int (pop_8 (root)) .ne. 0) call abort\n+  end subroutine\n+end program ch2701\n+! { dg-final { scan-tree-dump-times \"Pdtlink_8._deallocate \" 5 \"original\" } }\n+! { dg-final { scan-tree-dump-times \".n.data = 0B\" 7 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_free\" 14 \"original\" } }"}]}