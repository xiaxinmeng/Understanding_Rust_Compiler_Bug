{"sha": "e327d1a362b29d605f15678072700ffb39fc4917", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTMyN2QxYTM2MmIyOWQ2MDVmMTU2NzgwNzI3MDBmZmIzOWZjNDkxNw==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2012-08-17T19:59:46Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2012-08-17T19:59:46Z"}, "message": "Define MAX_FIXED_MODE_SIZE/TARGET_MEMBER_TYPE_FORCES_BLK for i386\n\ngcc/\n\n\tPR target/20020\n\t* config/i386/i386.c (ix86_member_type_forces_blk): New function.\n\t(TARGET_MEMBER_TYPE_FORCES_BLK): New macro.\n\n\t* config/i386/i386.h (MAX_FIXED_MODE_SIZE): New macro.\n\ngcc/testsuite/\n\n\tPR target/20020\n\t* gcc.target/i386/pr20020-1.c: New test.\n\t* gcc.target/i386/pr20020-2.c: Likewise.\n\t* gcc.target/i386/pr20020-3.c: Likewise.\n\nCo-Authored-By: Gary Funck <gary@intrepid.com>\n\nFrom-SVN: r190492", "tree": {"sha": "d902841c2eca9a88099aa1d1eb5c78d290b11b71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d902841c2eca9a88099aa1d1eb5c78d290b11b71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e327d1a362b29d605f15678072700ffb39fc4917", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e327d1a362b29d605f15678072700ffb39fc4917", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e327d1a362b29d605f15678072700ffb39fc4917", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e327d1a362b29d605f15678072700ffb39fc4917/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fd9da2c807e91636a3faaf381c9d37a6c3f9a216", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd9da2c807e91636a3faaf381c9d37a6c3f9a216", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd9da2c807e91636a3faaf381c9d37a6c3f9a216"}], "stats": {"total": 113, "additions": 113, "deletions": 0}, "files": [{"sha": "ce7c0e07f177a3c150df4c454d7645f89a839fda", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e327d1a362b29d605f15678072700ffb39fc4917/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e327d1a362b29d605f15678072700ffb39fc4917/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e327d1a362b29d605f15678072700ffb39fc4917", "patch": "@@ -1,3 +1,12 @@\n+2012-08-17  H.J. Lu  <hongjiu.lu@intel.com>\n+\t    Gary Funck <gary@intrepid.com>\n+\n+\tPR target/20020\n+\t* config/i386/i386.c (ix86_member_type_forces_blk): New function.\n+\t(TARGET_MEMBER_TYPE_FORCES_BLK): New macro.\n+\n+\t* config/i386/i386.h (MAX_FIXED_MODE_SIZE): New macro.\n+\n 2012-08-17  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* simplify-rtx.c (simplify_binary_operation_1): Optimize shuffle of"}, {"sha": "5da4da2b8a9f0640f70642ed30275e1f286e80f9", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e327d1a362b29d605f15678072700ffb39fc4917/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e327d1a362b29d605f15678072700ffb39fc4917/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e327d1a362b29d605f15678072700ffb39fc4917", "patch": "@@ -7545,6 +7545,18 @@ ix86_promote_function_mode (const_tree type, enum machine_mode mode,\n \t\t\t\t\tfor_return);\n }\n \n+/* Return true if a structure, union or array with MODE containing FIELD\n+   should be accessed using BLKmode.  */\n+\n+static bool\n+ix86_member_type_forces_blk (const_tree field, enum machine_mode mode)\n+{\n+  /* Union with XFmode must be in BLKmode.  */\n+  return (mode == XFmode\n+\t  && (TREE_CODE (DECL_FIELD_CONTEXT (field)) == UNION_TYPE\n+\t      || TREE_CODE (DECL_FIELD_CONTEXT (field)) == QUAL_UNION_TYPE));\n+}\n+\n rtx\n ix86_libcall_value (enum machine_mode mode)\n {\n@@ -40725,6 +40737,9 @@ ix86_memmodel_check (unsigned HOST_WIDE_INT val)\n #undef TARGET_PROMOTE_FUNCTION_MODE\n #define TARGET_PROMOTE_FUNCTION_MODE ix86_promote_function_mode\n \n+#undef TARGET_MEMBER_TYPE_FORCES_BLK\n+#define TARGET_MEMBER_TYPE_FORCES_BLK ix86_member_type_forces_blk\n+\n #undef TARGET_SECONDARY_RELOAD\n #define TARGET_SECONDARY_RELOAD ix86_secondary_reload\n "}, {"sha": "11f79e3f670afa0e56c16b58ff32ccf87b572469", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e327d1a362b29d605f15678072700ffb39fc4917/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e327d1a362b29d605f15678072700ffb39fc4917/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=e327d1a362b29d605f15678072700ffb39fc4917", "patch": "@@ -1816,6 +1816,10 @@ do {\t\t\t\t\t\t\t\\\n #define BRANCH_COST(speed_p, predictable_p) \\\n   (!(speed_p) ? 2 : (predictable_p) ? 0 : ix86_branch_cost)\n \n+/* An integer expression for the size in bits of the largest integer machine\n+   mode that should actually be used.  We allow pairs of registers.  */\n+#define MAX_FIXED_MODE_SIZE GET_MODE_BITSIZE (TARGET_64BIT ? TImode : DImode)\n+\n /* Define this macro as a C expression which is nonzero if accessing\n    less than a word of memory (i.e. a `char' or a `short') is no\n    faster than accessing a word of memory, i.e., if such access"}, {"sha": "8dccf8bc48f0077688ef780fe8ed40512ecdf42a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e327d1a362b29d605f15678072700ffb39fc4917/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e327d1a362b29d605f15678072700ffb39fc4917/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e327d1a362b29d605f15678072700ffb39fc4917", "patch": "@@ -1,3 +1,11 @@\n+2012-08-17  H.J. Lu  <hongjiu.lu@intel.com>\n+\t    Gary Funck <gary@intrepid.com>\n+\n+\tPR target/20020\n+\t* gcc.target/i386/pr20020-1.c: New test.\n+\t* gcc.target/i386/pr20020-2.c: Likewise.\n+\t* gcc.target/i386/pr20020-3.c: Likewise.\n+\n 2012-08-17  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* gcc.target/i386/perm-concat.c: New test."}, {"sha": "3f10970a943271de9420c4ae201b585e988c576b", "filename": "gcc/testsuite/gcc.target/i386/pr20020-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e327d1a362b29d605f15678072700ffb39fc4917/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr20020-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e327d1a362b29d605f15678072700ffb39fc4917/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr20020-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr20020-1.c?ref=e327d1a362b29d605f15678072700ffb39fc4917", "patch": "@@ -0,0 +1,26 @@\n+/* Check that 128-bit struct's are represented as TImode values.  */\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -fdump-rtl-expand\" } */\n+\n+struct shared_ptr_struct\n+{\n+  unsigned long long phase:48;\n+  unsigned short thread:16;\n+  union\n+    {\n+      void *addr;\n+      unsigned long long pad;\n+    };\n+};\n+typedef struct shared_ptr_struct sptr_t;\n+\n+sptr_t S;\n+\n+sptr_t\n+sptr_result (void)\n+{\n+  return S;\n+}\n+/* { dg-final { scan-rtl-dump \"\\\\\\(set \\\\\\(reg:TI \\[0-9\\]* \\\\\\[ <retval> \\\\\\]\\\\\\)\" \"expand\" } } */\n+/* { dg-final { scan-rtl-dump \"\\\\\\(set \\\\\\(reg/i:TI 0 ax\\\\\\)\" \"expand\" } } */\n+/* { dg-final { cleanup-rtl-dump \"expand\" } } */"}, {"sha": "e8c5b3d06a4c97248550b149b87dce6b5d04be3d", "filename": "gcc/testsuite/gcc.target/i386/pr20020-2.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e327d1a362b29d605f15678072700ffb39fc4917/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr20020-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e327d1a362b29d605f15678072700ffb39fc4917/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr20020-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr20020-2.c?ref=e327d1a362b29d605f15678072700ffb39fc4917", "patch": "@@ -0,0 +1,24 @@\n+/* Check that 128-bit struct's are represented as TImode values.  */\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -fdump-rtl-expand\" } */\n+\n+struct shared_ptr_struct\n+{\n+  unsigned long long phase:48;\n+  unsigned short thread:16;\n+  union\n+    {\n+      void *addr;\n+      unsigned long long pad;\n+    };\n+};\n+typedef struct shared_ptr_struct sptr_t;\n+\n+void\n+copy_sptr (sptr_t *dest, sptr_t src)\n+{\n+  *dest = src;\n+}\n+\n+/* { dg-final { scan-rtl-dump \"\\\\\\(set \\\\\\(reg:TI \\[0-9\\]*\" \"expand\" } } */\n+/* { dg-final { cleanup-rtl-dump \"expand\" } } */"}, {"sha": "b1cc9260ec8b54e6b7d708a049df88057df186d1", "filename": "gcc/testsuite/gcc.target/i386/pr20020-3.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e327d1a362b29d605f15678072700ffb39fc4917/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr20020-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e327d1a362b29d605f15678072700ffb39fc4917/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr20020-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr20020-3.c?ref=e327d1a362b29d605f15678072700ffb39fc4917", "patch": "@@ -0,0 +1,27 @@\n+/* Check that 128-bit struct's are represented as TImode values.  */\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -fdump-rtl-expand\" } */\n+\n+struct shared_ptr_struct\n+{\n+  unsigned long long phase:48;\n+  unsigned short thread:16;\n+  union\n+    {\n+      void *addr;\n+      unsigned long long pad;\n+    };\n+};\n+typedef struct shared_ptr_struct sptr_t;\n+\n+sptr_t sptr_1, sptr_2;\n+\n+void\n+copy_sptr (void)\n+{\n+  sptr_1 = sptr_2;  \n+}\n+\n+/* { dg-final { scan-rtl-dump \"\\\\\\(set \\\\\\(reg:TI \\[0-9\\]*\" \"expand\" } } */\n+/* { dg-final { scan-rtl-dump \"\\\\\\(set \\\\\\(mem/c:TI\" \"expand\" } } */\n+/* { dg-final { cleanup-rtl-dump \"expand\" } } */"}]}