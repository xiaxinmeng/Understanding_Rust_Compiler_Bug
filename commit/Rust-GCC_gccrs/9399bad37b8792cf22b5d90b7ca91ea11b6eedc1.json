{"sha": "9399bad37b8792cf22b5d90b7ca91ea11b6eedc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM5OWJhZDM3Yjg3OTJjZjIyYjVkOTBiN2NhOTFlYTExYjZlZWRjMQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-11-25T19:50:51Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-11-25T19:50:51Z"}, "message": "method.c (build_mangled_C9x_name): Rename to build_mangled_C99_name.\n\ncp:\n\t* method.c (build_mangled_C9x_name): Rename to\n\tbuild_mangled_C99_name.  Change C9X references in comments to\n\trefer to C99.\n\ntestsuite:\n\t* gcc.c-torture/execute/memcheck/driver.c,\n\tgcc.c-torture/execute/memcheck/driver.h, gcc.dg/cpp/if-3.c: Change\n\tC9X references to refer to C99.\n\nFrom-SVN: r37745", "tree": {"sha": "c6471f0b655a3207a31c554a529697d31a2dd54e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6471f0b655a3207a31c554a529697d31a2dd54e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9399bad37b8792cf22b5d90b7ca91ea11b6eedc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9399bad37b8792cf22b5d90b7ca91ea11b6eedc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9399bad37b8792cf22b5d90b7ca91ea11b6eedc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9399bad37b8792cf22b5d90b7ca91ea11b6eedc1/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "163686bd6db39384a0248ea9586a7a0b3f0c2958", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/163686bd6db39384a0248ea9586a7a0b3f0c2958", "html_url": "https://github.com/Rust-GCC/gccrs/commit/163686bd6db39384a0248ea9586a7a0b3f0c2958"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "1cc9c5f343007482a2da0ef62218505594e179ae", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9399bad37b8792cf22b5d90b7ca91ea11b6eedc1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9399bad37b8792cf22b5d90b7ca91ea11b6eedc1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9399bad37b8792cf22b5d90b7ca91ea11b6eedc1", "patch": "@@ -1,3 +1,9 @@\n+2000-11-25  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* method.c (build_mangled_C9x_name): Rename to\n+\tbuild_mangled_C99_name.  Change C9X references in comments to\n+\trefer to C99.\n+\n 2000-11-24  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* parse.y (unary_expr): Move VA_ARG from here ..."}, {"sha": "3a959585343c3d0b97885a090c89b908c72b4758", "filename": "gcc/cp/method.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9399bad37b8792cf22b5d90b7ca91ea11b6eedc1/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9399bad37b8792cf22b5d90b7ca91ea11b6eedc1/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=9399bad37b8792cf22b5d90b7ca91ea11b6eedc1", "patch": "@@ -92,7 +92,7 @@ static int issue_ktype PARAMS ((tree));\n static void build_overload_scope_ref PARAMS ((tree));\n static void build_mangled_template_parm_index PARAMS ((const char *, tree));\n #if HOST_BITS_PER_WIDE_INT >= 64\n-static void build_mangled_C9x_name PARAMS ((int));\n+static void build_mangled_C99_name PARAMS ((int));\n #endif\n static int is_back_referenceable_type PARAMS ((tree));\n static int check_btype PARAMS ((tree));\n@@ -652,7 +652,7 @@ build_mangled_template_parm_index (s, index)\n }\n \n \n-/* Mangling for C9X integer types (and Cygnus extensions for 128-bit\n+/* Mangling for C99 integer types (and Cygnus extensions for 128-bit\n    and other types) is based on the letter \"I\" followed by the hex\n    representations of the bitsize for the type in question. For\n    encodings that result in larger than two digits, a leading and\n@@ -674,7 +674,7 @@ build_mangled_template_parm_index (s, index)\n \n #if HOST_BITS_PER_WIDE_INT >= 64\n static void\n-build_mangled_C9x_name (bits)\n+build_mangled_C99_name (bits)\n      int bits;\n {\n   char mangled[10] = \"\";\n@@ -1454,7 +1454,7 @@ process_overload_item (parmtype, extra_Gcode)\n       else\n \t{\n \t  int bits = TREE_INT_CST_LOW (TYPE_SIZE (parmtype));\n-\t  build_mangled_C9x_name (bits);\n+\t  build_mangled_C99_name (bits);\n \t}\n #else\n       else"}, {"sha": "1cec4704921b5ab95e132248857fb88bf8a0233f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9399bad37b8792cf22b5d90b7ca91ea11b6eedc1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9399bad37b8792cf22b5d90b7ca91ea11b6eedc1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9399bad37b8792cf22b5d90b7ca91ea11b6eedc1", "patch": "@@ -1,3 +1,9 @@\n+2000-11-25  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.c-torture/execute/memcheck/driver.c,\n+\tgcc.c-torture/execute/memcheck/driver.h, gcc.dg/cpp/if-3.c: Change\n+\tC9X references to refer to C99.\n+\n 2000-11-25  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/ultrasp3.c: New test."}, {"sha": "26803d84b34978d13712c4c1cd69cbc968751dbd", "filename": "gcc/testsuite/gcc.c-torture/execute/memcheck/driver.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9399bad37b8792cf22b5d90b7ca91ea11b6eedc1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Fdriver.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9399bad37b8792cf22b5d90b7ca91ea11b6eedc1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Fdriver.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Fdriver.c?ref=9399bad37b8792cf22b5d90b7ca91ea11b6eedc1", "patch": "@@ -1,6 +1,6 @@\n /* GNU C dependencies:\n    Checker support hooks\n-   ISO C 9x array element initialization\n+   ISO C99 array element initialization\n    void-pointer arithmetic */\n \n #include \"driver.h\""}, {"sha": "33086598cc91bcab481ab473dbaaa280791df573", "filename": "gcc/testsuite/gcc.c-torture/execute/memcheck/driver.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9399bad37b8792cf22b5d90b7ca91ea11b6eedc1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Fdriver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9399bad37b8792cf22b5d90b7ca91ea11b6eedc1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Fdriver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Fdriver.h?ref=9399bad37b8792cf22b5d90b7ca91ea11b6eedc1", "patch": "@@ -1,6 +1,6 @@\n /* GNU C dependencies:\n    Checker support hooks\n-   ISO C 9x array element initialization\n+   ISO C99 array element initialization\n    void-pointer arithmetic */\n \n typedef __SIZE_TYPE__ size_t;"}, {"sha": "674b91b949388fea656c3eceb40d589a20c084fd", "filename": "gcc/testsuite/gcc.dg/cpp/if-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9399bad37b8792cf22b5d90b7ca91ea11b6eedc1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fif-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9399bad37b8792cf22b5d90b7ca91ea11b6eedc1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fif-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fif-3.c?ref=9399bad37b8792cf22b5d90b7ca91ea11b6eedc1", "patch": "@@ -1,5 +1,5 @@\n /* Test that the preprocessor is capable of 64-bit arithmetic.\n-   (Must turn off -pedantic, since `LL' constants are only in C9x.)  */\n+   (Must turn off -pedantic, since `LL' constants are only in C99.)  */\n /* { dg-do preprocess } */\n /* { dg-options \"\" } */\n "}]}