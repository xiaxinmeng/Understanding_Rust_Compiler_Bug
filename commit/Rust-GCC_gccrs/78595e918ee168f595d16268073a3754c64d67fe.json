{"sha": "78595e918ee168f595d16268073a3754c64d67fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg1OTVlOTE4ZWUxNjhmNTk1ZDE2MjY4MDczYTM3NTRjNjRkNjdmZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-01-07T15:00:38Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-01-07T15:00:38Z"}, "message": "gimple-isel: Fall back to using vcond_mask [PR98560]\n\nPR98560 is about a case in which the vectoriser initially generates:\n\n  mask_1 = a < 0;\n  mask_2 = mask_1 & ...;\n  res = VEC_COND_EXPR <mask_2, b, c>;\n\nThe vectoriser thus expects res to be calculated using vcond_mask.\nHowever, we later manage to fold mask_2 to mask_1, leaving:\n\n  mask_1 = a < 0;\n  res = VEC_COND_EXPR <mask_1, b, c>;\n\ngimple-isel then required a combined vcond to exist.\n\nOn most targets, it's not too onerous to provide all possible\n(compare x select) combinations.  For each data mode, you just\nneed to provide unsigned comparisons, signed comparisons, and\nfloating-point comparisons, with the data mode and type of\ncomparison uniquely determining the mode of the compared values.\nBut for targets like SVE that support \u201cunpacked\u201d vectors,\nit's not that simple: the level of unpacking adds another\ndegree of freedom.\n\nRather than insist that the combined versions exist, I think\nwe should be prepared to fall back to using separate comparisons\nand vcond_masks.  I think that makes more sense on targets like\nAArch64 and AArch32 in which compares and selects are fundementally\nseparate operations anyway.\n\ngcc/\n\tPR tree-optimization/98560\n\t* gimple-isel.cc (gimple_expand_vec_cond_expr): If we fail to use\n\tIFN_VCOND{,U,EQ}, fall back on IFN_VCOND_MASK.\n\ngcc/testsuite/\n\tPR tree-optimization/98560\n\t* gcc.dg/vect/pr98560-1.c: New test.", "tree": {"sha": "914c3e89c396d7605ea24d6dd356e0e5bc0d7944", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/914c3e89c396d7605ea24d6dd356e0e5bc0d7944"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78595e918ee168f595d16268073a3754c64d67fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78595e918ee168f595d16268073a3754c64d67fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78595e918ee168f595d16268073a3754c64d67fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78595e918ee168f595d16268073a3754c64d67fe/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d54be5ad210b05274fbe43f9f61f9e903aabefb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d54be5ad210b05274fbe43f9f61f9e903aabefb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d54be5ad210b05274fbe43f9f61f9e903aabefb0"}], "stats": {"total": 43, "additions": 36, "deletions": 7}, "files": [{"sha": "0f3d6bba2293c31e21aa5bde55122a76b7bd1434", "filename": "gcc/gimple-isel.cc", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78595e918ee168f595d16268073a3754c64d67fe/gcc%2Fgimple-isel.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78595e918ee168f595d16268073a3754c64d67fe/gcc%2Fgimple-isel.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-isel.cc?ref=78595e918ee168f595d16268073a3754c64d67fe", "patch": "@@ -154,6 +154,7 @@ gimple_expand_vec_cond_expr (gimple_stmt_iterator *gsi,\n       return gimple_build_assign (lhs, tem3);\n     }\n \n+  bool can_compute_op0 = true;\n   gcc_assert (!COMPARISON_CLASS_P (op0));\n   if (TREE_CODE (op0) == SSA_NAME)\n     {\n@@ -184,24 +185,27 @@ gimple_expand_vec_cond_expr (gimple_stmt_iterator *gsi,\n \n \t  tree op0_type = TREE_TYPE (op0);\n \t  tree op0a_type = TREE_TYPE (op0a);\n+\t  if (TREE_CODE_CLASS (tcode) == tcc_comparison)\n+\t    can_compute_op0 = expand_vec_cmp_expr_p (op0a_type, op0_type,\n+\t\t\t\t\t\t     tcode);\n \n \t  /* Try to fold x CMP y ? -1 : 0 to x CMP y.  */\n \n-\t  if (integer_minus_onep (op1)\n+\t  if (can_compute_op0\n+\t      && integer_minus_onep (op1)\n \t      && integer_zerop (op2)\n-\t      && TYPE_MODE (TREE_TYPE (lhs)) == TYPE_MODE (TREE_TYPE (op0))\n-\t      && expand_vec_cmp_expr_p (op0a_type, op0_type, tcode))\n+\t      && TYPE_MODE (TREE_TYPE (lhs)) == TYPE_MODE (TREE_TYPE (op0)))\n \t    {\n \t      tree conv_op = build1 (VIEW_CONVERT_EXPR, TREE_TYPE (lhs), op0);\n \t      gassign *new_stmt = gimple_build_assign (lhs, conv_op);\n \t      gsi_replace (gsi, new_stmt, true);\n \t      return new_stmt;\n \t    }\n \n-\t  if (used_vec_cond_exprs >= 2\n+\t  if (can_compute_op0\n+\t      && used_vec_cond_exprs >= 2\n \t      && (get_vcond_mask_icode (mode, TYPE_MODE (op0_type))\n-\t\t  != CODE_FOR_nothing)\n-\t      && expand_vec_cmp_expr_p (op0a_type, op0_type, tcode))\n+\t\t  != CODE_FOR_nothing))\n \t    {\n \t      /* Keep the SSA name and use vcond_mask.  */\n \t      tcode = TREE_CODE (op0);\n@@ -254,7 +258,15 @@ gimple_expand_vec_cond_expr (gimple_stmt_iterator *gsi,\n \t}\n     }\n \n-  gcc_assert (icode != CODE_FOR_nothing);\n+  if (icode == CODE_FOR_nothing)\n+    {\n+      gcc_assert (VECTOR_BOOLEAN_TYPE_P (TREE_TYPE (op0))\n+\t\t  && can_compute_op0\n+\t\t  && (get_vcond_mask_icode (mode, TYPE_MODE (TREE_TYPE (op0)))\n+\t\t      != CODE_FOR_nothing));\n+      return gimple_build_call_internal (IFN_VCOND_MASK, 3, op0, op1, op2);\n+    }\n+\n   tree tcode_tree = build_int_cst (integer_type_node, tcode);\n   return gimple_build_call_internal (unsignedp ? IFN_VCONDU : IFN_VCOND,\n \t\t\t\t     5, op0a, op0b, op1, op2, tcode_tree);"}, {"sha": "2583fc48f8a892d88113530ad240c902641089fb", "filename": "gcc/testsuite/gcc.dg/vect/pr98560-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78595e918ee168f595d16268073a3754c64d67fe/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr98560-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78595e918ee168f595d16268073a3754c64d67fe/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr98560-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr98560-1.c?ref=78595e918ee168f595d16268073a3754c64d67fe", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O3 -fno-tree-vrp -fno-tree-fre -fno-tree-pre -fno-code-hoisting -fvect-cost-model=dynamic\" } */\n+/* { dg-additional-options \"-msve-vector-bits=128\" { target aarch64_sve } } */\n+\n+#include <stdint.h>\n+\n+void\n+f (uint16_t *restrict dst, uint32_t *restrict src1, float *restrict src2)\n+{\n+  int i = 0;\n+  for (int j = 0; j < 4; ++j)\n+    {\n+      uint16_t tmp = src1[i] >> 1;\n+      dst[i] = (uint16_t) (src2[i] < 0 && i < 4 ? tmp : 1);\n+      i += 1;\n+    }\n+}"}]}