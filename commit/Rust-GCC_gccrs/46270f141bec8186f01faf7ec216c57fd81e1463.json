{"sha": "46270f141bec8186f01faf7ec216c57fd81e1463", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDYyNzBmMTQxYmVjODE4NmYwMWZhZjdlYzIxNmM1N2ZkODFlMTQ2Mw==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-12-18T20:28:07Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-12-18T20:28:07Z"}, "message": "In gcc/: 2010-12-18 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn gcc/:\n2010-12-18  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* c-parser.c (c_parser_objc_try_catch_finally_statement): Call\n\tobjc_maybe_warn_exceptions.\n\t(c_parser_objc_synchronized_statement): Call\n\tobjc_maybe_warn_exceptions.\n\t\nIn gcc/cp/:\n2010-12-18  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* parser.c (cp_parser_objc_try_catch_finally_statement): Call\n\tobjc_maybe_warn_exceptions.\n\t(cp_parser_objc_synchronized_statement): Same change.\n\nIn gcc/c-family/:\n2010-12-18  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* c-objc.h (objc_maybe_warn_exceptions): New.\n\t* stub-objc.c (objc_maybe_warn_exceptions): New.\t\n\t\nIn gcc/objc/:\n2010-12-18  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* objc-act.c (objc_init): Call using_eh_for_cleanups.\n\t(objc_init_exceptions): Renamed to objc_maybe_warn_exceptions.  Do\n\tnot call using_eh_for_cleanups.\n\t(objc_begin_try_stmt): Do not call objc_init_exceptions.\n\t(objc_build_throw_stmt): Updated call to\n\tobjc_maybe_warn_exceptions.\n\nIn gcc/testsuite/:\n2010-12-18  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* objc.dg/fobjc-exceptions-1.m: Updated.\n\t* objc.dg/fobjc-exceptions-2.m: New.\n\t* objc.dg/fobjc-exceptions-3.m: New.\n\t* obj-c++.dg/fobjc-exceptions-1.mm: New.\n\t* obj-c++.dg/fobjc-exceptions-2.mm: New.\n\t* obj-c++.dg/fobjc-exceptions-3.mm: New.\n\nFrom-SVN: r168032", "tree": {"sha": "7e133229359caed0887f2fb805a0c54ecaa63de2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e133229359caed0887f2fb805a0c54ecaa63de2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46270f141bec8186f01faf7ec216c57fd81e1463", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46270f141bec8186f01faf7ec216c57fd81e1463", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46270f141bec8186f01faf7ec216c57fd81e1463", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46270f141bec8186f01faf7ec216c57fd81e1463/comments", "author": null, "committer": null, "parents": [{"sha": "b5dca6ea71c1de8775d723d5af41618c3581ae68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5dca6ea71c1de8775d723d5af41618c3581ae68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5dca6ea71c1de8775d723d5af41618c3581ae68"}], "stats": {"total": 237, "additions": 213, "deletions": 24}, "files": [{"sha": "cf8d786f6127f7408b26560591f5f9368ee18e46", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46270f141bec8186f01faf7ec216c57fd81e1463/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46270f141bec8186f01faf7ec216c57fd81e1463/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46270f141bec8186f01faf7ec216c57fd81e1463", "patch": "@@ -1,3 +1,10 @@\n+2010-12-18  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* c-parser.c (c_parser_objc_try_catch_finally_statement): Call\n+\tobjc_maybe_warn_exceptions.\n+\t(c_parser_objc_synchronized_statement): Call\n+\tobjc_maybe_warn_exceptions.\n+\t\n 2010-12-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/46985"}, {"sha": "4be312d359e36c7db13419efaeb0d5f891be4444", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46270f141bec8186f01faf7ec216c57fd81e1463/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46270f141bec8186f01faf7ec216c57fd81e1463/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=46270f141bec8186f01faf7ec216c57fd81e1463", "patch": "@@ -1,3 +1,8 @@\n+2010-12-18  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* c-objc.h (objc_maybe_warn_exceptions): New.\n+\t* stub-objc.c (objc_maybe_warn_exceptions): New.\t\n+\n 2010-12-10  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* c-common.h (readonly_error): Declare."}, {"sha": "afe7fcca7e3d82bb920511d11eb9493944edb0a6", "filename": "gcc/c-family/c-objc.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46270f141bec8186f01faf7ec216c57fd81e1463/gcc%2Fc-family%2Fc-objc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46270f141bec8186f01faf7ec216c57fd81e1463/gcc%2Fc-family%2Fc-objc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-objc.h?ref=46270f141bec8186f01faf7ec216c57fd81e1463", "patch": "@@ -106,6 +106,7 @@ extern bool objc_is_property_ref (tree);\n extern bool objc_string_ref_type_p (tree);\n extern void objc_check_format_arg (tree, tree);\n extern void objc_finish_function (void);\n+extern void objc_maybe_warn_exceptions (location_t);\n \n /* The following are provided by the C and C++ front-ends, and called by\n    ObjC/ObjC++.  */"}, {"sha": "e3aa98d26ba86182557e9c9cabc9cdc864f2db1f", "filename": "gcc/c-family/stub-objc.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46270f141bec8186f01faf7ec216c57fd81e1463/gcc%2Fc-family%2Fstub-objc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46270f141bec8186f01faf7ec216c57fd81e1463/gcc%2Fc-family%2Fstub-objc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fstub-objc.c?ref=46270f141bec8186f01faf7ec216c57fd81e1463", "patch": "@@ -455,3 +455,8 @@ void\n objc_finish_function (void)\n {\n }\n+\n+void\n+objc_maybe_warn_exceptions (location_t ARG_UNUSED (loc))\n+{\n+}"}, {"sha": "4eaf8680f67ad86e06d54d331c582a03e0d222aa", "filename": "gcc/c-parser.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46270f141bec8186f01faf7ec216c57fd81e1463/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46270f141bec8186f01faf7ec216c57fd81e1463/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=46270f141bec8186f01faf7ec216c57fd81e1463", "patch": "@@ -7547,6 +7547,7 @@ c_parser_objc_try_catch_finally_statement (c_parser *parser)\n   gcc_assert (c_parser_next_token_is_keyword (parser, RID_AT_TRY));\n   c_parser_consume_token (parser);\n   location = c_parser_peek_token (parser)->location;\n+  objc_maybe_warn_exceptions (location);\n   stmt = c_parser_compound_statement (parser);\n   objc_begin_try_stmt (location, stmt);\n \n@@ -7628,6 +7629,7 @@ c_parser_objc_synchronized_statement (c_parser *parser)\n   gcc_assert (c_parser_next_token_is_keyword (parser, RID_AT_SYNCHRONIZED));\n   c_parser_consume_token (parser);\n   loc = c_parser_peek_token (parser)->location;\n+  objc_maybe_warn_exceptions (loc);\n   if (c_parser_require (parser, CPP_OPEN_PAREN, \"expected %<(%>\"))\n     {\n       expr = c_parser_expression (parser).value;"}, {"sha": "872cd0617cbb99f42464a0266f4df75e38305e39", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46270f141bec8186f01faf7ec216c57fd81e1463/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46270f141bec8186f01faf7ec216c57fd81e1463/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=46270f141bec8186f01faf7ec216c57fd81e1463", "patch": "@@ -1,3 +1,9 @@\n+2010-12-18  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* parser.c (cp_parser_objc_try_catch_finally_statement): Call\n+\tobjc_maybe_warn_exceptions.\n+\t(cp_parser_objc_synchronized_statement): Same change.\n+\t\n 2010-12-18  Joseph Myers  <joseph@codesourcery.com>\n \n \t* pt.c (most_specialized_class): Use ngettext to determine"}, {"sha": "1a2d4253c7787dd6643a2d6ff1d1b6437d48ae2d", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46270f141bec8186f01faf7ec216c57fd81e1463/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46270f141bec8186f01faf7ec216c57fd81e1463/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=46270f141bec8186f01faf7ec216c57fd81e1463", "patch": "@@ -22692,6 +22692,7 @@ cp_parser_objc_try_catch_finally_statement (cp_parser *parser)\n \n   cp_parser_require_keyword (parser, RID_AT_TRY, RT_AT_TRY);\n   location = cp_lexer_peek_token (parser->lexer)->location;\n+  objc_maybe_warn_exceptions (location);\n   /* NB: The @try block needs to be wrapped in its own STATEMENT_LIST\n      node, lest it get absorbed into the surrounding block.  */\n   stmt = push_stmt_list ();\n@@ -22784,6 +22785,7 @@ cp_parser_objc_synchronized_statement (cp_parser *parser)\n   cp_parser_require_keyword (parser, RID_AT_SYNCHRONIZED, RT_AT_SYNCHRONIZED);\n \n   location = cp_lexer_peek_token (parser->lexer)->location;\n+  objc_maybe_warn_exceptions (location);\n   cp_parser_require (parser, CPP_OPEN_PAREN, RT_OPEN_PAREN);\n   lock = cp_parser_expression (parser, false, NULL);\n   cp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN);"}, {"sha": "d519ad7732739b70cf9baab3785fe70a3dd05b91", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46270f141bec8186f01faf7ec216c57fd81e1463/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46270f141bec8186f01faf7ec216c57fd81e1463/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=46270f141bec8186f01faf7ec216c57fd81e1463", "patch": "@@ -1,3 +1,12 @@\n+2010-12-18  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc-act.c (objc_init): Call using_eh_for_cleanups.\n+\t(objc_init_exceptions): Renamed to objc_maybe_warn_exceptions.  Do\n+\tnot call using_eh_for_cleanups.\n+\t(objc_begin_try_stmt): Do not call objc_init_exceptions.\n+\t(objc_build_throw_stmt): Updated call to\n+\tobjc_maybe_warn_exceptions.\n+\n 2010-12-18  Iain Sandoe  <iains@gcc.gnu.org>\n \n \t* objc/objc-act.c (objc_eh_personality): Select personality name on"}, {"sha": "2076111c4d6ff41d855a26f7e2623b5081953932", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46270f141bec8186f01faf7ec216c57fd81e1463/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46270f141bec8186f01faf7ec216c57fd81e1463/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=46270f141bec8186f01faf7ec216c57fd81e1463", "patch": "@@ -626,6 +626,11 @@ objc_init (void)\n   if (print_struct_values && !flag_compare_debug)\n     generate_struct_by_value_array ();\n \n+#ifndef OBJCPLUS\n+  if (flag_objc_exceptions && !flag_objc_sjlj_exceptions)\n+    using_eh_for_cleanups ();\n+#endif\n+\n   return true;\n }\n \n@@ -5036,32 +5041,26 @@ objc_eh_personality (void)\n }\n #endif\n \n-static void\n-objc_init_exceptions (location_t loc)\n+void\n+objc_maybe_warn_exceptions (location_t loc)\n {\n-  static bool done = false;\n-\n   /* -fobjc-exceptions is required to enable Objective-C exceptions.\n      For example, on Darwin, ObjC exceptions require a sufficiently\n      recent version of the runtime, so the user must ask for them\n      explicitly.  On other platforms, at the moment -fobjc-exceptions\n      triggers -fexceptions which again is required for exceptions to\n-     work.\n-  */\n-  /* TODO: we only really need one error message when the flag is missing.  */\n+     work.  */\n   if (!flag_objc_exceptions)\n     {\n-      error_at (loc, \"%<-fobjc-exceptions%> is required to enable Objective-C exception syntax\");\n-    }\n+      /* Warn only once per compilation unit.  */\n+      static bool warned = false;\n \n-  if (done)\n-    return;\n-  done = true;\n-\n-#ifndef OBJCPLUS\n-  if (!flag_objc_sjlj_exceptions)\n-    using_eh_for_cleanups ();\n-#endif\n+      if (!warned)\n+\t{\n+\t  error_at (loc, \"%<-fobjc-exceptions%> is required to enable Objective-C exception syntax\");\n+\t  warned = true;\n+\t}\n+    }\n }\n \n /* Build __builtin_eh_pointer, or the moral equivalent.  In the case\n@@ -5365,8 +5364,6 @@ objc_begin_try_stmt (location_t try_locus, tree body)\n   c->end_try_locus = input_location;\n   cur_try_context = c;\n \n-  objc_init_exceptions (try_locus);\n-\n   /* Collect the list of local variables.  We'll mark them as volatile\n      at the end of compilation of this function to prevent them being\n      clobbered by setjmp/longjmp.  */\n@@ -5573,7 +5570,7 @@ objc_build_throw_stmt (location_t loc, tree throw_expr)\n {\n   tree args;\n \n-  objc_init_exceptions (loc); \n+  objc_maybe_warn_exceptions (loc);\n \n   if (throw_expr == NULL)\n     {"}, {"sha": "594bf0635ed8fac7ad7edcac549b5f8671380102", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46270f141bec8186f01faf7ec216c57fd81e1463/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46270f141bec8186f01faf7ec216c57fd81e1463/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=46270f141bec8186f01faf7ec216c57fd81e1463", "patch": "@@ -1,3 +1,12 @@\n+2010-12-18  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc.dg/fobjc-exceptions-1.m: Updated.\n+\t* objc.dg/fobjc-exceptions-2.m: New.\n+\t* objc.dg/fobjc-exceptions-3.m: New.\n+\t* obj-c++.dg/fobjc-exceptions-1.mm: New.\n+\t* obj-c++.dg/fobjc-exceptions-2.mm: New.\n+\t* obj-c++.dg/fobjc-exceptions-3.mm: New.\n+\t\n 2010-12-18  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/46974\n@@ -15,7 +24,7 @@\n \n 2010-12-18  Iain Sandoe  <iains@gcc.gnu.org>\n \n-\t* fobjc-exceptions.m: Update dg-error syntax.\n+\t* objc.dg/fobjc-exceptions.m: Update dg-error syntax.\n \n 2010-12-18  Kai Tietz  <kai.tietz@onevision.com>\n "}, {"sha": "8cee4d849099d019b9df7887f661fa5224c3a3a4", "filename": "gcc/testsuite/obj-c++.dg/fobjc-exceptions-1.mm", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46270f141bec8186f01faf7ec216c57fd81e1463/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ffobjc-exceptions-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46270f141bec8186f01faf7ec216c57fd81e1463/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ffobjc-exceptions-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ffobjc-exceptions-1.mm?ref=46270f141bec8186f01faf7ec216c57fd81e1463", "patch": "@@ -7,19 +7,19 @@ int dummy (int number, Object *o)\n {\n   @try {            /* { dg-error \".-fobjc-exceptions. is required to enable Objective-C exception syntax\" } */\n     number++;\n-    @throw o;     /* { dg-error \".-fobjc-exceptions. is required to enable Objective-C exception syntax\" } */\n+    @throw o;       /* Nothing, error has already been produced.  */\n   }\n   @catch (id object)\n     {\n       number++;\n-      @throw;       /* { dg-error \".-fobjc-exceptions. is required to enable Objective-C exception syntax\" } */\n+      @throw;       /* Nothing, error has already been produced.  */\n     }\n   @finally\n     {\n       number++;\n     }\n   \n-  @synchronized (o) /* { dg-error \".-fobjc-exceptions. is required to enable Objective-C exception syntax\" } */\n+  @synchronized (o) /* Nothing, error has already been produced.  */\n     {\n       number++;\n     }", "previous_filename": "gcc/testsuite/objc.dg/fobjc-exceptions.m"}, {"sha": "32b3506ec207be8cf075746bac4bab162a680706", "filename": "gcc/testsuite/obj-c++.dg/fobjc-exceptions-2.mm", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46270f141bec8186f01faf7ec216c57fd81e1463/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ffobjc-exceptions-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46270f141bec8186f01faf7ec216c57fd81e1463/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ffobjc-exceptions-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ffobjc-exceptions-2.mm?ref=46270f141bec8186f01faf7ec216c57fd81e1463", "patch": "@@ -0,0 +1,29 @@\n+/* Test that Objective-C exceptions cause an error with -fobjc-exceptions.  */\n+/* { dg-do compile } */\n+\n+@class Object;\n+\n+int dummy (int number, Object *o)\n+{\n+  @synchronized (o) /* { dg-error \".-fobjc-exceptions. is required to enable Objective-C exception syntax\" } */\n+    {\n+      number++;\n+    }\n+\n+  @try {            /* Nothing, error has already been produced.  */\n+    number++;\n+    @throw o;       /* Nothing, error has already been produced.  */\n+  }\n+  @catch (id object)\n+    {\n+      number++;\n+      @throw;       /* Nothing, error has already been produced.  */\n+    }\n+  @finally\n+    {\n+      number++;\n+    }\n+  \n+  \n+  return number;\n+}"}, {"sha": "d3d6453df640ac38e92f9db359dce3751eda5d91", "filename": "gcc/testsuite/obj-c++.dg/fobjc-exceptions-3.mm", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46270f141bec8186f01faf7ec216c57fd81e1463/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ffobjc-exceptions-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46270f141bec8186f01faf7ec216c57fd81e1463/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ffobjc-exceptions-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ffobjc-exceptions-3.mm?ref=46270f141bec8186f01faf7ec216c57fd81e1463", "patch": "@@ -0,0 +1,30 @@\n+/* Test that Objective-C exceptions cause an error with -fobjc-exceptions.  */\n+/* { dg-do compile } */\n+\n+@class Object;\n+\n+int dummy (int number, Object *o)\n+{\n+  @throw o;           /* { dg-error \".-fobjc-exceptions. is required to enable Objective-C exception syntax\" } */\n+\n+  @try {              /* Nothing, error has already been produced.  */\n+    number++;\n+    @throw o;         /* Nothing, error has already been produced.  */\n+  }\n+  @catch (id object)\n+    {\n+      number++;\n+      @throw;        /* Nothing, error has already been produced.  */\n+    }\n+  @finally\n+    {\n+      number++;\n+    }\n+  \n+  @synchronized (o)   /* Nothing, error has already been produced.  */\n+    {\n+      number++;\n+    }\n+  \n+  return number;\n+}"}, {"sha": "8cee4d849099d019b9df7887f661fa5224c3a3a4", "filename": "gcc/testsuite/objc.dg/fobjc-exceptions-1.m", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46270f141bec8186f01faf7ec216c57fd81e1463/gcc%2Ftestsuite%2Fobjc.dg%2Ffobjc-exceptions-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46270f141bec8186f01faf7ec216c57fd81e1463/gcc%2Ftestsuite%2Fobjc.dg%2Ffobjc-exceptions-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ffobjc-exceptions-1.m?ref=46270f141bec8186f01faf7ec216c57fd81e1463", "patch": "@@ -0,0 +1,28 @@\n+/* Test that Objective-C exceptions cause an error with -fobjc-exceptions.  */\n+/* { dg-do compile } */\n+\n+@class Object;\n+\n+int dummy (int number, Object *o)\n+{\n+  @try {            /* { dg-error \".-fobjc-exceptions. is required to enable Objective-C exception syntax\" } */\n+    number++;\n+    @throw o;       /* Nothing, error has already been produced.  */\n+  }\n+  @catch (id object)\n+    {\n+      number++;\n+      @throw;       /* Nothing, error has already been produced.  */\n+    }\n+  @finally\n+    {\n+      number++;\n+    }\n+  \n+  @synchronized (o) /* Nothing, error has already been produced.  */\n+    {\n+      number++;\n+    }\n+  \n+  return number;\n+}"}, {"sha": "32b3506ec207be8cf075746bac4bab162a680706", "filename": "gcc/testsuite/objc.dg/fobjc-exceptions-2.m", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46270f141bec8186f01faf7ec216c57fd81e1463/gcc%2Ftestsuite%2Fobjc.dg%2Ffobjc-exceptions-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46270f141bec8186f01faf7ec216c57fd81e1463/gcc%2Ftestsuite%2Fobjc.dg%2Ffobjc-exceptions-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ffobjc-exceptions-2.m?ref=46270f141bec8186f01faf7ec216c57fd81e1463", "patch": "@@ -0,0 +1,29 @@\n+/* Test that Objective-C exceptions cause an error with -fobjc-exceptions.  */\n+/* { dg-do compile } */\n+\n+@class Object;\n+\n+int dummy (int number, Object *o)\n+{\n+  @synchronized (o) /* { dg-error \".-fobjc-exceptions. is required to enable Objective-C exception syntax\" } */\n+    {\n+      number++;\n+    }\n+\n+  @try {            /* Nothing, error has already been produced.  */\n+    number++;\n+    @throw o;       /* Nothing, error has already been produced.  */\n+  }\n+  @catch (id object)\n+    {\n+      number++;\n+      @throw;       /* Nothing, error has already been produced.  */\n+    }\n+  @finally\n+    {\n+      number++;\n+    }\n+  \n+  \n+  return number;\n+}"}, {"sha": "d3d6453df640ac38e92f9db359dce3751eda5d91", "filename": "gcc/testsuite/objc.dg/fobjc-exceptions-3.m", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46270f141bec8186f01faf7ec216c57fd81e1463/gcc%2Ftestsuite%2Fobjc.dg%2Ffobjc-exceptions-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46270f141bec8186f01faf7ec216c57fd81e1463/gcc%2Ftestsuite%2Fobjc.dg%2Ffobjc-exceptions-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ffobjc-exceptions-3.m?ref=46270f141bec8186f01faf7ec216c57fd81e1463", "patch": "@@ -0,0 +1,30 @@\n+/* Test that Objective-C exceptions cause an error with -fobjc-exceptions.  */\n+/* { dg-do compile } */\n+\n+@class Object;\n+\n+int dummy (int number, Object *o)\n+{\n+  @throw o;           /* { dg-error \".-fobjc-exceptions. is required to enable Objective-C exception syntax\" } */\n+\n+  @try {              /* Nothing, error has already been produced.  */\n+    number++;\n+    @throw o;         /* Nothing, error has already been produced.  */\n+  }\n+  @catch (id object)\n+    {\n+      number++;\n+      @throw;        /* Nothing, error has already been produced.  */\n+    }\n+  @finally\n+    {\n+      number++;\n+    }\n+  \n+  @synchronized (o)   /* Nothing, error has already been produced.  */\n+    {\n+      number++;\n+    }\n+  \n+  return number;\n+}"}]}