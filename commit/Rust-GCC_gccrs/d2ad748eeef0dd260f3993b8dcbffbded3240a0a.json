{"sha": "d2ad748eeef0dd260f3993b8dcbffbded3240a0a", "node_id": "C_kwDOANBUbNoAKGQyYWQ3NDhlZWVmMGRkMjYwZjM5OTNiOGRjYmZmYmRlZDMyNDBhMGE", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2022-01-20T21:29:48Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2022-01-20T21:29:48Z"}, "message": "Fortran: Fix scope for OMP AFFINITY clause iterator variables [PR103695]\n\ngfc_finish_var_decl was confused by the undocumented overloading of\nthe proc_name field in struct gfc_namespace to contain iterator\nvariables for the OpenMP AFFINITY clause, causing it to insert the\ndecls in the wrong scope.  This patch adds a new distinct field to\nhold these variables.\n\n2022-01-20  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tPR fortran/103695\n\tPR fortran/102621\n\n\tgcc/fortran\n\t* gfortran.h (struct gfc_namespace) Add omp_affinity_iterator\n\tfield.\n\t* dump-parse-tree.cc (show_iterator): Use it.\n\t* openmp.cc (gfc_match_iterator): Likewise.\n\t(resolve_omp_clauses): Likewise.\n\t* trans-decl.cc (gfc_finish_var_decl): Likewise.\n\t* trans-openmp.cc (handle_iterator): Likewise.\n\n\tgcc/testsuite/\n\t* gfortran.dg/gomp/affinity-clause-3.f90: Adjust pattern.\n\t* gfortran.dg/gomp/pr102621.f90: New.\n\t* gfortran.dg/gomp/pr103695.f90: New.", "tree": {"sha": "ccc475f58a559c1f528b3fef13530640b18160c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccc475f58a559c1f528b3fef13530640b18160c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2ad748eeef0dd260f3993b8dcbffbded3240a0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2ad748eeef0dd260f3993b8dcbffbded3240a0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2ad748eeef0dd260f3993b8dcbffbded3240a0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2ad748eeef0dd260f3993b8dcbffbded3240a0a/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc01cd9397fe99e707bcc5b98bb33d807ba610d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc01cd9397fe99e707bcc5b98bb33d807ba610d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc01cd9397fe99e707bcc5b98bb33d807ba610d7"}], "stats": {"total": 50, "additions": 43, "deletions": 7}, "files": [{"sha": "3112caec0537af9ce3fe47a5af3e2b7fa7b3a152", "filename": "gcc/fortran/dump-parse-tree.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ad748eeef0dd260f3993b8dcbffbded3240a0a/gcc%2Ffortran%2Fdump-parse-tree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ad748eeef0dd260f3993b8dcbffbded3240a0a/gcc%2Ffortran%2Fdump-parse-tree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdump-parse-tree.cc?ref=d2ad748eeef0dd260f3993b8dcbffbded3240a0a", "patch": "@@ -1302,10 +1302,10 @@ show_code (int level, gfc_code *c)\n static void\n show_iterator (gfc_namespace *ns)\n {\n-  for (gfc_symbol *sym = ns->proc_name; sym; sym = sym->tlink)\n+  for (gfc_symbol *sym = ns->omp_affinity_iterators; sym; sym = sym->tlink)\n     {\n       gfc_constructor *c;\n-      if (sym != ns->proc_name)\n+      if (sym != ns->omp_affinity_iterators)\n \tfputc (',', dumpfile);\n       fputs (sym->name, dumpfile);\n       fputc ('=', dumpfile);"}, {"sha": "993879feda434a40d254d81c0d7ae1f5919110f6", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ad748eeef0dd260f3993b8dcbffbded3240a0a/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ad748eeef0dd260f3993b8dcbffbded3240a0a/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=d2ad748eeef0dd260f3993b8dcbffbded3240a0a", "patch": "@@ -2107,6 +2107,9 @@ typedef struct gfc_namespace\n   /* !$ACC ROUTINE clauses.  */\n   gfc_omp_clauses *oacc_routine_clauses;\n \n+  /* !$ACC TASK AFFINITY iterator symbols.  */\n+  gfc_symbol *omp_affinity_iterators;\n+\n   /* !$ACC ROUTINE names.  */\n   gfc_oacc_routine_name *oacc_routine_names;\n "}, {"sha": "073e5a16da55026c6032e24843d2421c12596692", "filename": "gcc/fortran/openmp.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ad748eeef0dd260f3993b8dcbffbded3240a0a/gcc%2Ffortran%2Fopenmp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ad748eeef0dd260f3993b8dcbffbded3240a0a/gcc%2Ffortran%2Fopenmp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.cc?ref=d2ad748eeef0dd260f3993b8dcbffbded3240a0a", "patch": "@@ -1123,7 +1123,7 @@ gfc_match_iterator (gfc_namespace **ns, bool permit_var)\n       if (last)\n \tlast->tlink = sym;\n       else\n-\t(*ns)->proc_name = sym;\n+\t(*ns)->omp_affinity_iterators = sym;\n       last = sym;\n       sym->declared_at = prev_loc;\n       sym->ts = ts;\n@@ -6832,8 +6832,8 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n \t\t    && n->u2.ns && !n->u2.ns->resolved)\n \t\t  {\n \t\t    n->u2.ns->resolved = 1;\n-\t\t    for (gfc_symbol *sym = n->u2.ns->proc_name; sym;\n-\t\t\t sym = sym->tlink)\n+\t\t    for (gfc_symbol *sym = n->u2.ns->omp_affinity_iterators;\n+\t\t\t sym; sym = sym->tlink)\n \t\t      {\n \t\t\tgfc_constructor *c;\n \t\t\tc = gfc_constructor_first (sym->value->value.constructor);"}, {"sha": "6493cc2f6b1d1061840ce1f87264aaa2c3f4869b", "filename": "gcc/fortran/trans-decl.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ad748eeef0dd260f3993b8dcbffbded3240a0a/gcc%2Ffortran%2Ftrans-decl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ad748eeef0dd260f3993b8dcbffbded3240a0a/gcc%2Ffortran%2Ftrans-decl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.cc?ref=d2ad748eeef0dd260f3993b8dcbffbded3240a0a", "patch": "@@ -647,6 +647,9 @@ gfc_finish_var_decl (tree decl, gfc_symbol * sym)\n \t       && sym->ns->proc_name->attr.flavor == FL_LABEL)\n \t/* This is a BLOCK construct.  */\n \tadd_decl_as_local (decl);\n+      else if (sym->ns->omp_affinity_iterators)\n+\t/* This is a block-local iterator.  */\n+\tadd_decl_as_local (decl);\n       else\n \tgfc_add_decl_to_parent_function (decl);\n     }"}, {"sha": "d5a6b2d6ee35ae552434f54e111aa192483d614e", "filename": "gcc/fortran/trans-openmp.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ad748eeef0dd260f3993b8dcbffbded3240a0a/gcc%2Ffortran%2Ftrans-openmp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ad748eeef0dd260f3993b8dcbffbded3240a0a/gcc%2Ffortran%2Ftrans-openmp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.cc?ref=d2ad748eeef0dd260f3993b8dcbffbded3240a0a", "patch": "@@ -2483,7 +2483,7 @@ static tree\n handle_iterator (gfc_namespace *ns, stmtblock_t *iter_block, tree block)\n {\n   tree list = NULL_TREE;\n-  for (gfc_symbol *sym = ns->proc_name; sym; sym = sym->tlink)\n+  for (gfc_symbol *sym = ns->omp_affinity_iterators; sym; sym = sym->tlink)\n     {\n       gfc_constructor *c;\n       gfc_se se;"}, {"sha": "eebe4dddafcfa31085d514abdbf547974d0ece7b", "filename": "gcc/testsuite/gfortran.dg/gomp/affinity-clause-3.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ad748eeef0dd260f3993b8dcbffbded3240a0a/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Faffinity-clause-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ad748eeef0dd260f3993b8dcbffbded3240a0a/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Faffinity-clause-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Faffinity-clause-3.f90?ref=d2ad748eeef0dd260f3993b8dcbffbded3240a0a", "patch": "@@ -11,4 +11,4 @@ end function ibar\n   !$omp end task\n end\n ! { dg-final { scan-tree-dump-times \"= ibar \\\\(&C\\\\.\" 3 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"= ibar \\\\(j\\\\.\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"= ibar \\\\(&j\" 1 \"gimple\" } }"}, {"sha": "ca1e2d44d20bf21f15c17f734cecff905c914355", "filename": "gcc/testsuite/gfortran.dg/gomp/pr102621.f90", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ad748eeef0dd260f3993b8dcbffbded3240a0a/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr102621.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ad748eeef0dd260f3993b8dcbffbded3240a0a/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr102621.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr102621.f90?ref=d2ad748eeef0dd260f3993b8dcbffbded3240a0a", "patch": "@@ -0,0 +1,12 @@\n+! This program used to ICE in convert_nonlocal_reference_op due to\n+! incorrect scoping of AFFINITY clause iterator variables.\n+\n+program p\n+   integer :: a(8)\n+   !$omp task affinity (iterator(j=1:8) : a(j))\n+   !$omp end task\n+contains\n+   integer function f(x)\n+      class(*) :: x\n+   end\n+end"}, {"sha": "cc9764e07a5644c63ee2822c6712cc7c189451b4", "filename": "gcc/testsuite/gfortran.dg/gomp/pr103695.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ad748eeef0dd260f3993b8dcbffbded3240a0a/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr103695.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ad748eeef0dd260f3993b8dcbffbded3240a0a/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr103695.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr103695.f90?ref=d2ad748eeef0dd260f3993b8dcbffbded3240a0a", "patch": "@@ -0,0 +1,18 @@\n+! This test case used to ICE in verify_ssa due to the iterator variable j\n+! incorrectly being inserted into program scope.\n+\n+program p\n+   integer :: i\n+   do i = 1, 3\n+      call sub (s(i))\n+   end do\n+contains\n+   function s(n) result(z)\n+      integer, target, intent(in) :: n\n+      integer, pointer :: z\n+      integer :: a(8), b(8), c(8)\n+      !$omp task affinity (iterator(j=1:8) : a(j), b(j), c(j))\n+      !$omp end task\n+      z => n\n+   end\n+end"}]}