{"sha": "04b99da898a9817e72fedb4063589648b7961ac5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRiOTlkYTg5OGE5ODE3ZTcyZmVkYjQwNjM1ODk2NDhiNzk2MWFjNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-10-01T13:12:35Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-10-01T13:58:29Z"}, "message": "tree-optimization/97236 - fix bad use of VMAT_CONTIGUOUS\n\nThis avoids using VMAT_CONTIGUOUS with single-element interleaving\nwhen using V1mode vectors.  Instead keep VMAT_ELEMENTWISE but\ncontinue to avoid load-lanes and gathers.\n\n2020-10-01  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/97236\n\t* tree-vect-stmts.c (get_group_load_store_type): Keep\n\tVMAT_ELEMENTWISE for single-element vectors.\n\n\t* gcc.dg/vect/pr97236.c: New testcase.", "tree": {"sha": "2c8558417f423a2cb1e0c416d6453d5e34bd3422", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c8558417f423a2cb1e0c416d6453d5e34bd3422"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04b99da898a9817e72fedb4063589648b7961ac5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04b99da898a9817e72fedb4063589648b7961ac5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04b99da898a9817e72fedb4063589648b7961ac5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04b99da898a9817e72fedb4063589648b7961ac5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80a9c584e339c4f87a3f48ca6397d4a29b7e4ab6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80a9c584e339c4f87a3f48ca6397d4a29b7e4ab6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80a9c584e339c4f87a3f48ca6397d4a29b7e4ab6"}], "stats": {"total": 63, "additions": 52, "deletions": 11}, "files": [{"sha": "9d3dc20d953d06732229f693f03ed0c465230c26", "filename": "gcc/testsuite/gcc.dg/vect/pr97236.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04b99da898a9817e72fedb4063589648b7961ac5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr97236.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04b99da898a9817e72fedb4063589648b7961ac5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr97236.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr97236.c?ref=04b99da898a9817e72fedb4063589648b7961ac5", "patch": "@@ -0,0 +1,43 @@\n+typedef unsigned char __uint8_t;\n+typedef __uint8_t uint8_t;\n+typedef struct plane_t {\n+  uint8_t *p_pixels;\n+  int i_lines;\n+  int i_pitch;\n+} plane_t;\n+\n+typedef struct {\n+  plane_t p[5];\n+} picture_t;\n+\n+#define N 4\n+\n+void __attribute__((noipa))\n+picture_Clone(picture_t *picture, picture_t *res)\n+{\n+  for (int i = 0; i < N; i++) {\n+    res->p[i].p_pixels = picture->p[i].p_pixels;\n+    res->p[i].i_lines = picture->p[i].i_lines;\n+    res->p[i].i_pitch = picture->p[i].i_pitch;\n+  }\n+}\n+\n+int\n+main()\n+{\n+  picture_t aaa, bbb;\n+  uint8_t pixels[10] = {1, 1, 1, 1, 1, 1, 1, 1};\n+\n+  for (unsigned i = 0; i < N; i++)\n+    aaa.p[i].p_pixels = pixels;\n+\n+  picture_Clone (&aaa, &bbb);\n+\n+  uint8_t c = 0;\n+  for (unsigned i = 0; i < N; i++)\n+    c += bbb.p[i].p_pixels[0];\n+\n+  if (c != N)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "3575f25241f3550e63d783a19bb3cfb237a41760", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04b99da898a9817e72fedb4063589648b7961ac5/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04b99da898a9817e72fedb4063589648b7961ac5/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=04b99da898a9817e72fedb4063589648b7961ac5", "patch": "@@ -2235,25 +2235,23 @@ get_group_load_store_type (vec_info *vinfo, stmt_vec_info stmt_info,\n \t  /* First cope with the degenerate case of a single-element\n \t     vector.  */\n \t  if (known_eq (TYPE_VECTOR_SUBPARTS (vectype), 1U))\n-\t    *memory_access_type = VMAT_CONTIGUOUS;\n+\t    ;\n \n \t  /* Otherwise try using LOAD/STORE_LANES.  */\n-\t  if (*memory_access_type == VMAT_ELEMENTWISE\n-\t      && (vls_type == VLS_LOAD\n-\t\t  ? vect_load_lanes_supported (vectype, group_size, masked_p)\n-\t\t  : vect_store_lanes_supported (vectype, group_size,\n-\t\t\t\t\t\tmasked_p)))\n+\t  else if (vls_type == VLS_LOAD\n+\t\t   ? vect_load_lanes_supported (vectype, group_size, masked_p)\n+\t\t   : vect_store_lanes_supported (vectype, group_size,\n+\t\t\t\t\t\t masked_p))\n \t    {\n \t      *memory_access_type = VMAT_LOAD_STORE_LANES;\n \t      overrun_p = would_overrun_p;\n \t    }\n \n \t  /* If that fails, try using permuting loads.  */\n-\t  if (*memory_access_type == VMAT_ELEMENTWISE\n-\t      && (vls_type == VLS_LOAD\n-\t\t  ? vect_grouped_load_supported (vectype, single_element_p,\n-\t\t\t\t\t\t group_size)\n-\t\t  : vect_grouped_store_supported (vectype, group_size)))\n+\t  else if (vls_type == VLS_LOAD\n+\t\t   ? vect_grouped_load_supported (vectype, single_element_p,\n+\t\t\t\t\t\t  group_size)\n+\t\t   : vect_grouped_store_supported (vectype, group_size))\n \t    {\n \t      *memory_access_type = VMAT_CONTIGUOUS_PERMUTE;\n \t      overrun_p = would_overrun_p;"}]}