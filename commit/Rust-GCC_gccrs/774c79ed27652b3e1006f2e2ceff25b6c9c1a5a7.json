{"sha": "774c79ed27652b3e1006f2e2ceff25b6c9c1a5a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc0Yzc5ZWQyNzY1MmIzZTEwMDZmMmUyY2VmZjI1YjZjOWMxYTVhNw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-07-06T17:42:14Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-07-06T17:42:14Z"}, "message": "gslice_array.h, [...]: Do not paste anything after 'operator' keyword.\n\n\t* std/gslice_array.h, std/indirect_array.h, std/mask_array.h,\n\tstd/slice_array.h, std/std_valarray.h, std/valarray_meta.h:\n\tDo not paste anything after 'operator' keyword.\n\nFrom-SVN: r34890", "tree": {"sha": "f550435d2d6add47e36d5b9e6c42f6fa198bdc90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f550435d2d6add47e36d5b9e6c42f6fa198bdc90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/774c79ed27652b3e1006f2e2ceff25b6c9c1a5a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/774c79ed27652b3e1006f2e2ceff25b6c9c1a5a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/774c79ed27652b3e1006f2e2ceff25b6c9c1a5a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/774c79ed27652b3e1006f2e2ceff25b6c9c1a5a7/comments", "author": null, "committer": null, "parents": [{"sha": "54c6909334dcb567804859c03930d61b162f04d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54c6909334dcb567804859c03930d61b162f04d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54c6909334dcb567804859c03930d61b162f04d8"}], "stats": {"total": 66, "additions": 36, "deletions": 30}, "files": [{"sha": "36751914e5f0cdc9d76b7b1d26fcafcb51f4c85d", "filename": "libstdc++/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774c79ed27652b3e1006f2e2ceff25b6c9c1a5a7/libstdc%2B%2B%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774c79ed27652b3e1006f2e2ceff25b6c9c1a5a7/libstdc%2B%2B%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2FChangeLog?ref=774c79ed27652b3e1006f2e2ceff25b6c9c1a5a7", "patch": "@@ -1,3 +1,9 @@\n+2000-07-06  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* std/gslice_array.h, std/indirect_array.h, std/mask_array.h,\n+\tstd/slice_array.h, std/std_valarray.h, std/valarray_meta.h:\n+\tDo not paste anything after 'operator' keyword.\n+\n 2000-05-15  David Edelsohn  <edelsohn@gnu.org>\n \n \t* Makefile.in: Change \"pic\" to depend on $(PICFLAG), not"}, {"sha": "9ea61ffc03c237ed89c4a6c5eab7676d12effb79", "filename": "libstdc++/std/gslice_array.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774c79ed27652b3e1006f2e2ceff25b6c9c1a5a7/libstdc%2B%2B%2Fstd%2Fgslice_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774c79ed27652b3e1006f2e2ceff25b6c9c1a5a7/libstdc%2B%2B%2Fstd%2Fgslice_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstd%2Fgslice_array.h?ref=774c79ed27652b3e1006f2e2ceff25b6c9c1a5a7", "patch": "@@ -133,15 +133,15 @@ gslice_array<_Tp>::operator= (const _Expr<E, _Tp>& __e) const\n #define _DEFINE_VALARRAY_OPERATOR(op, name)\t\t\t\t\\\n template<typename _Tp>\t\t\t\t\t\t\t\\\n inline void\t\t\t\t\t\t\t\t\\\n-gslice_array<_Tp>::operator##op##= (const valarray<_Tp>& __v) const\t\\\n+gslice_array<_Tp>::operator op##= (const valarray<_Tp>& __v) const\t\\\n {\t\t\t\t\t\t\t\t\t\\\n     _Array_augmented_##name (_M_array, _Array<size_t>(_M_index),\t\\\n                               _Array<_Tp> (__v), __v.size ());\t\t\\\n }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n template<typename _Tp> template<class E>        \t\t\t\\\n inline void \t\t\t\t\t\t\t\t\\\n-gslice_array<_Tp>::operator##op##= (const _Expr<E, _Tp>& __e) const\t\\\n+gslice_array<_Tp>::operator op##= (const _Expr<E, _Tp>& __e) const\t\\\n {\t\t\t\t\t\t\t\t\t\\\n     _Array_augmented_##name (_M_array, _Array<size_t>(_M_index), __e,\t\\\n                               _M_index.size());\t\t\t\t\\"}, {"sha": "7a1d3c2b0d137daf9c61bd91460202ef863bed49", "filename": "libstdc++/std/indirect_array.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774c79ed27652b3e1006f2e2ceff25b6c9c1a5a7/libstdc%2B%2B%2Fstd%2Findirect_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774c79ed27652b3e1006f2e2ceff25b6c9c1a5a7/libstdc%2B%2B%2Fstd%2Findirect_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstd%2Findirect_array.h?ref=774c79ed27652b3e1006f2e2ceff25b6c9c1a5a7", "patch": "@@ -123,14 +123,14 @@ indirect_array<_Tp>::operator= (const _Expr<_Dom,_Tp>& __e) const\n #define _DEFINE_VALARRAY_OPERATOR(op, name)\t\t\t\t\\\n template<typename _Tp>\t\t\t\t\t\t\t\\\n inline void\t\t\t\t\t\t\t\t\\\n-indirect_array<_Tp>::operator##op##= (const valarray<_Tp>& __v) const\t\\\n+indirect_array<_Tp>::operator op##= (const valarray<_Tp>& __v) const\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   _Array_augmented_##name (_M_array, _M_index, _Array<_Tp> (__v), _M_sz); \\\n }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n template<typename _Tp> template<class _Dom>\t\t\t\t\\\n inline void\t\t\t\t\t\t\t\t\\\n-indirect_array<_Tp>::operator##op##= (const _Expr<_Dom,_Tp>& __e) const \\\n+indirect_array<_Tp>::operator op##= (const _Expr<_Dom,_Tp>& __e) const  \\\n {\t\t\t\t\t\t\t\t\t\\\n   _Array_augmented_##name (_M_array, _M_index, __e, _M_sz);\t\t\\\n }"}, {"sha": "95f6518505948234d82d118c6a86a581a170bb74", "filename": "libstdc++/std/mask_array.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774c79ed27652b3e1006f2e2ceff25b6c9c1a5a7/libstdc%2B%2B%2Fstd%2Fmask_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774c79ed27652b3e1006f2e2ceff25b6c9c1a5a7/libstdc%2B%2B%2Fstd%2Fmask_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstd%2Fmask_array.h?ref=774c79ed27652b3e1006f2e2ceff25b6c9c1a5a7", "patch": "@@ -119,15 +119,15 @@ mask_array<_T>::operator= (const _Expr<E, _T>& __e) const\n #define _DEFINE_VALARRAY_OPERATOR(op, name)\t\t\t\t\\\n template<typename _T>\t\t\t\t\t\t\t\\\n inline void\t\t\t\t\t\t\t\t\\\n-mask_array<_T>::operator##op##= (const valarray<_T>& __v) const\t\t\\\n+mask_array<_T>::operator op##= (const valarray<_T>& __v) const\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   _Array_augmented_##name (_M_array, _M_mask, \t\t\t\t\\\n                            _Array<_T> (__v), __v.size ());\t\t\\\n }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n template<typename _T> template<class E>\t\t\t\t\t\\\n inline void\t\t\t\t\t\t\t\t\\\n-mask_array<_T>::operator##op##= (const _Expr<E, _T>& __e) const\t\t\\\n+mask_array<_T>::operator op##= (const _Expr<E, _T>& __e) const\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   _Array_augmented_##name (_M_array, _M_mask, __e, __e.size ());\t\\\n }"}, {"sha": "96ecf6a3bc8d83c28cfbfc3481135d1ac579cec6", "filename": "libstdc++/std/slice_array.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774c79ed27652b3e1006f2e2ceff25b6c9c1a5a7/libstdc%2B%2B%2Fstd%2Fslice_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774c79ed27652b3e1006f2e2ceff25b6c9c1a5a7/libstdc%2B%2B%2Fstd%2Fslice_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstd%2Fslice_array.h?ref=774c79ed27652b3e1006f2e2ceff25b6c9c1a5a7", "patch": "@@ -121,18 +121,18 @@ slice_array<_T>::operator= (const _Expr<_Dom,_T>& __e) const\n #define _DEFINE_VALARRAY_OPERATOR(op, name)\t\t\t\t\\\n template<typename _T>\t\t\t\t\t\t\t\\\n inline void\t\t\t\t\t\t\t\t\\\n-slice_array<_T>::operator##op##= (const valarray<_T>& __v) const\t\\\n+slice_array<_T>::operator op##= (const valarray<_T>& __v) const\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   _Array_augmented_##name (_M_array, _M_sz, _M_stride, _Array<_T> (__v));\\\n }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n template<typename _T> template<class _Dom>\t\t\t\t\\\n inline void\t\t\t\t\t\t\t\t\\\n-slice_array<_T>::operator##op##= (const _Expr<_Dom,_T>& __e) const\t\\\n+slice_array<_T>::operator op##= (const _Expr<_Dom,_T>& __e) const\t\\\n {\t\t\t\t\t\t\t\t\t\\\n     _Array_augmented_##name (_M_array, _M_stride, __e, _M_sz);\t\t\\\n }\n-        \n+\n \n _DEFINE_VALARRAY_OPERATOR(*, multiplies)\n _DEFINE_VALARRAY_OPERATOR(/, divides)"}, {"sha": "0e47c776950f3450467700a48263dacad9a50b6c", "filename": "libstdc++/std/std_valarray.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774c79ed27652b3e1006f2e2ceff25b6c9c1a5a7/libstdc%2B%2B%2Fstd%2Fstd_valarray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774c79ed27652b3e1006f2e2ceff25b6c9c1a5a7/libstdc%2B%2B%2Fstd%2Fstd_valarray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstd%2Fstd_valarray.h?ref=774c79ed27652b3e1006f2e2ceff25b6c9c1a5a7", "patch": "@@ -567,7 +567,7 @@ valarray<_Tp>::apply (_Tp func (const _Tp &)) const\n #define _DEFINE_VALARRAY_UNARY_OPERATOR(_Op, _Name)                     \\\n   template<typename _Tp>\t\t\t\t\t\t\\\n   inline _Expr<_UnClos<_Name,_ValArray,_Tp>, _Tp>               \t\\\n-  valarray<_Tp>::operator##_Op() const\t\t\t\t\t\\\n+  valarray<_Tp>::operator _Op() const\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n       typedef _UnClos<_Name,_ValArray,_Tp> _Closure;\t                \\\n       return _Expr<_Closure, _Tp> (_Closure (*this));\t\t\t\\\n@@ -590,15 +590,15 @@ valarray<_Tp>::apply (_Tp func (const _Tp &)) const\n #define _DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(_Op, _Name)               \\\n   template<class _Tp>\t\t\t\t\t\t\t\\\n   inline valarray<_Tp> &\t\t\t\t\t\t\\\n-  valarray<_Tp>::operator##_Op##= (const _Tp &__t)\t\t\t\\\n+  valarray<_Tp>::operator _Op##= (const _Tp &__t)\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n       _Array_augmented_##_Name (_Array<_Tp>(_M_data), _M_size, __t);\t\\\n       return *this;\t\t\t\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   template<class _Tp>\t\t\t\t\t\t\t\\\n   inline valarray<_Tp> &\t\t\t\t\t\t\\\n-  valarray<_Tp>::operator##_Op##= (const valarray<_Tp> &__v)\t\t\\\n+  valarray<_Tp>::operator _Op##= (const valarray<_Tp> &__v)\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n       _Array_augmented_##_Name (_Array<_Tp>(_M_data), _M_size, \t\t\\\n                                _Array<_Tp>(__v._M_data));\t\t\\\n@@ -622,7 +622,7 @@ _DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(>>, shift_right)\n #define _DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(_Op, _Name)          \\\n   template<class _Tp> template<class _Dom>\t\t\t\t\\\n   inline valarray<_Tp> &\t\t\t\t\t\t\\\n-  valarray<_Tp>::operator##_Op##= (const _Expr<_Dom,_Tp> &__e)\t\t\\\n+  valarray<_Tp>::operator _Op##= (const _Expr<_Dom,_Tp> &__e)\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n       _Array_augmented_##_Name (_Array<_Tp>(_M_data), __e, _M_size);\t\\\n       return *this;\t\t\t\t\t\t\t\\\n@@ -645,23 +645,23 @@ _DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(>>, shift_right)\n #define _DEFINE_BINARY_OPERATOR(_Op, _Name)\t\t\t\t\\\n   template<typename _Tp>\t\t\t\t\t\t\\\n   inline _Expr<_BinClos<_Name,_ValArray,_ValArray,_Tp,_Tp>, _Tp>        \\\n-  operator##_Op (const valarray<_Tp> &__v, const valarray<_Tp> &__w)\t\\\n+  operator _Op (const valarray<_Tp> &__v, const valarray<_Tp> &__w)\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n       typedef _BinClos<_Name,_ValArray,_ValArray,_Tp,_Tp> _Closure;     \\\n       return _Expr<_Closure, _Tp> (_Closure (__v, __w));\t\t\\\n   }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   template<typename _Tp>\t\t\t\t\t\t\\\n   inline _Expr<_BinClos<_Name,_ValArray,_Constant,_Tp,_Tp>,_Tp>         \\\n-  operator##_Op (const valarray<_Tp> &__v, const _Tp &__t)\t\t\\\n+  operator _Op (const valarray<_Tp> &__v, const _Tp &__t)\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n       typedef _BinClos<_Name,_ValArray,_Constant,_Tp,_Tp> _Closure;\t\\\n       return _Expr<_Closure, _Tp> (_Closure (__v, __t));\t        \\\n   }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   template<typename _Tp>\t\t\t\t\t\t\\\n   inline _Expr<_BinClos<_Name,_Constant,_ValArray,_Tp,_Tp>,_Tp>         \\\n-  operator##_Op (const _Tp &__t, const valarray<_Tp> &__v)\t\t\\\n+  operator _Op (const _Tp &__t, const valarray<_Tp> &__v)\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n       typedef _BinClos<_Name,_Constant,_ValArray,_Tp,_Tp> _Closure;     \\\n       return _Expr<_Closure, _Tp> (_Closure (__t, __v));        \t\\\n@@ -683,23 +683,23 @@ _DEFINE_BINARY_OPERATOR(>>, _Shift_right)\n #define _DEFINE_LOGICAL_OPERATOR(_Op, _Name)\t\t\t\t\\\n   template<typename _Tp>\t\t\t\t\t\t\\\n   inline _Expr<_BinClos<_Name,_ValArray,_ValArray,_Tp,_Tp>,bool>        \\\n-  operator##_Op (const valarray<_Tp> &__v, const valarray<_Tp> &__w)\t\\\n+  operator _Op (const valarray<_Tp> &__v, const valarray<_Tp> &__w)\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n       typedef _BinClos<_Name,_ValArray,_ValArray,_Tp,_Tp> _Closure;     \\\n       return _Expr<_Closure, bool> (_Closure (__v, __w));               \\\n   }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   template<class _Tp>\t\t\t\t\t\t\t\\\n   inline _Expr<_BinClos<_Name,_ValArray,_Constant,_Tp,_Tp>,bool>        \\\n-  operator##_Op (const valarray<_Tp> &__v, const _Tp &__t)\t\t\\\n+  operator _Op (const valarray<_Tp> &__v, const _Tp &__t)\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n       typedef _BinClos<_Name,_ValArray,_Constant,_Tp,_Tp> _Closure;     \\\n       return _Expr<_Closure, bool> (_Closure (__v, __t));       \t\\\n   }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   template<class _Tp>\t\t\t\t\t\t\t\\\n   inline _Expr<_BinClos<_Name,_Constant,_ValArray,_Tp,_Tp>,bool>        \\\n-  operator##_Op (const _Tp &__t, const valarray<_Tp> &__v)\t\t\\\n+  operator _Op (const _Tp &__t, const valarray<_Tp> &__v)\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n       typedef _BinClos<_Name,_Constant,_ValArray,_Tp,_Tp> _Closure;     \\\n       return _Expr<_Closure, bool> (_Closure (__t, __v));\t        \\"}, {"sha": "9ad026587070f98e7c5b021da07f5488c71a56aa", "filename": "libstdc++/std/valarray_meta.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774c79ed27652b3e1006f2e2ceff25b6c9c1a5a7/libstdc%2B%2B%2Fstd%2Fvalarray_meta.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774c79ed27652b3e1006f2e2ceff25b6c9c1a5a7/libstdc%2B%2B%2Fstd%2Fvalarray_meta.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstd%2Fvalarray_meta.h?ref=774c79ed27652b3e1006f2e2ceff25b6c9c1a5a7", "patch": "@@ -755,7 +755,7 @@ _Expr<_Dom,_Tp>::operator! () const\n #define _DEFINE_EXPR_UNARY_OPERATOR(_Op, _Name)                         \\\n template<class _Dom, typename _Tp>                                      \\\n inline _Expr<_UnClos<_Name,_Expr,_Dom>,_Tp>                             \\\n-_Expr<_Dom,_Tp>::operator##_Op () const                                 \\\n+_Expr<_Dom,_Tp>::operator _Op () const                                 \\\n {                                                                       \\\n     typedef _UnClos<_Name,_Expr,_Dom> _Closure;                         \\\n     return _Expr<_Closure,_Tp> (_Closure (this->_M_closure));           \\\n@@ -772,7 +772,7 @@ _Expr<_Dom,_Tp>::operator##_Op () const                                 \\\n template<class _Dom1, class _Dom2>\t\t\t\t\t\\\n inline _Expr<_BinClos<_Name,_Expr,_Expr,_Dom1,_Dom2>,                   \\\n              typename _Name<typename _Dom1::value_type>::result_type>   \\\n-operator##_Op (const _Expr<_Dom1,typename _Dom1::value_type>& __v,      \\\n+operator _Op (const _Expr<_Dom1,typename _Dom1::value_type>& __v,      \\\n               const _Expr<_Dom2,typename _Dom2::value_type>& __w)       \\\n {                                                                       \\\n     typedef typename _Dom1::value_type _Arg;                            \\\n@@ -784,7 +784,7 @@ operator##_Op (const _Expr<_Dom1,typename _Dom1::value_type>& __v,      \\\n template<class _Dom>                                                    \\\n inline _Expr<_BinClos<_Name,_Expr,_Constant,_Dom,typename _Dom::value_type>, \\\n              typename _Name<typename _Dom::value_type>::result_type>    \\\n-operator##_Op (const _Expr<_Dom,typename _Dom::value_type>& __v,        \\\n+operator _Op (const _Expr<_Dom,typename _Dom::value_type>& __v,        \\\n               const typename _Dom::value_type& __t)                     \\\n {                                                                       \\\n     typedef typename _Dom::value_type _Arg;                             \\\n@@ -796,7 +796,7 @@ operator##_Op (const _Expr<_Dom,typename _Dom::value_type>& __v,        \\\n template<class _Dom>                                                    \\\n inline _Expr<_BinClos<_Name,_Constant,_Expr,typename _Dom::value_type,_Dom>, \\\n              typename _Name<typename _Dom::value_type>::result_type>    \\\n-operator##_Op (const typename _Dom::value_type& __t,                    \\\n+operator _Op (const typename _Dom::value_type& __t,                    \\\n                const _Expr<_Dom,typename _Dom::value_type>& __v)        \\\n {                                                                       \\\n     typedef typename _Dom::value_type _Arg;                             \\\n@@ -808,7 +808,7 @@ operator##_Op (const typename _Dom::value_type& __t,                    \\\n template<class _Dom>                                                    \\\n inline _Expr<_BinClos<_Name,_Expr,_ValArray,_Dom,typename _Dom::value_type>, \\\n              typename _Name<typename _Dom::value_type>::result_type>    \\\n-operator##_Op (const _Expr<_Dom,typename _Dom::value_type>& __e,        \\\n+operator _Op (const _Expr<_Dom,typename _Dom::value_type>& __e,        \\\n                const valarray<typename _Dom::value_type>& __v)          \\\n {                                                                       \\\n     typedef typename _Dom::value_type _Arg;                             \\\n@@ -820,7 +820,7 @@ operator##_Op (const _Expr<_Dom,typename _Dom::value_type>& __e,        \\\n template<class _Dom>                                                    \\\n inline _Expr<_BinClos<_Name,_ValArray,_Expr,typename _Dom::value_type,_Dom>, \\\n              typename _Name<typename _Dom::value_type>::result_type>    \\\n-operator##_Op (const valarray<typename _Dom::value_type>& __v,          \\\n+operator _Op (const valarray<typename _Dom::value_type>& __v,          \\\n                const _Expr<_Dom,typename _Dom::value_type>& __e)        \\\n {                                                                       \\\n     typedef typename _Dom::value_type _Tp;                              \\\n@@ -845,7 +845,7 @@ operator##_Op (const valarray<typename _Dom::value_type>& __v,          \\\n #define _DEFINE_EXPR_RELATIONAL_OPERATOR(_Op, _Name)                    \\\n template<class _Dom1, class _Dom2>\t\t\t\t\t\\\n inline _Expr<_BinClos<_Name,_Expr,_Expr,_Dom1,_Dom2>, bool>             \\\n-operator##_Op (const _Expr<_Dom1,typename _Dom1::value_type>& __v,      \\\n+operator _Op (const _Expr<_Dom1,typename _Dom1::value_type>& __v,       \\\n               const _Expr<_Dom2,typename _Dom2::value_type>& __w)       \\\n {                                                                       \\\n     typedef typename _Dom1::value_type _Arg;                            \\\n@@ -856,7 +856,7 @@ operator##_Op (const _Expr<_Dom1,typename _Dom1::value_type>& __v,      \\\n template<class _Dom>                                                    \\\n inline _Expr<_BinClos<_Name,_Expr,_Constant,_Dom,typename _Dom::value_type>, \\\n              bool>                                                      \\\n-operator##_Op (const _Expr<_Dom,typename _Dom::value_type>& __v,        \\\n+operator _Op (const _Expr<_Dom,typename _Dom::value_type>& __v,         \\\n               const typename _Dom::value_type& __t)                     \\\n {                                                                       \\\n     typedef typename _Dom::value_type _Arg;                             \\\n@@ -867,7 +867,7 @@ operator##_Op (const _Expr<_Dom,typename _Dom::value_type>& __v,        \\\n template<class _Dom>                                                    \\\n inline _Expr<_BinClos<_Name,_Constant,_Expr,typename _Dom::value_type,_Dom>, \\\n              bool>                                                      \\\n-operator##_Op (const typename _Dom::value_type& __t,                    \\\n+operator _Op (const typename _Dom::value_type& __t,                     \\\n                const _Expr<_Dom,typename _Dom::value_type>& __v)        \\\n {                                                                       \\\n     typedef typename _Dom::value_type _Arg;                             \\\n@@ -878,7 +878,7 @@ operator##_Op (const typename _Dom::value_type& __t,                    \\\n template<class _Dom>                                                    \\\n inline _Expr<_BinClos<_Name,_Expr,_ValArray,_Dom,typename _Dom::value_type>, \\\n              bool>                                                      \\\n-operator##_Op (const _Expr<_Dom,typename _Dom::value_type>& __e,        \\\n+operator _Op (const _Expr<_Dom,typename _Dom::value_type>& __e,         \\\n                const valarray<typename _Dom::value_type>& __v)          \\\n {                                                                       \\\n     typedef typename _Dom::value_type _Tp;                              \\\n@@ -889,7 +889,7 @@ operator##_Op (const _Expr<_Dom,typename _Dom::value_type>& __e,        \\\n template<class _Dom>                                                    \\\n inline _Expr<_BinClos<_Name,_ValArray,_Expr,typename _Dom::value_type,_Dom>, \\\n              bool>                                                      \\\n-operator##_Op (const valarray<typename _Dom::value_type>& __v,          \\\n+operator _Op (const valarray<typename _Dom::value_type>& __v,           \\\n                const _Expr<_Dom,typename _Dom::value_type>& __e)        \\\n {                                                                       \\\n     typedef typename _Dom::value_type _Tp;                              \\"}]}