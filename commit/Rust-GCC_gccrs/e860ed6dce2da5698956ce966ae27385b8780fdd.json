{"sha": "e860ed6dce2da5698956ce966ae27385b8780fdd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg2MGVkNmRjZTJkYTU2OTg5NTZjZTk2NmFlMjczODViODc4MGZkZA==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@rr.iij4u.or.jp", "date": "2003-06-13T02:23:26Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2003-06-13T02:23:26Z"}, "message": "Makefile.am: Add SHmedia support.\n\n\t* Makefile.am: Add SHmedia support.  Fix a typo of SH support.\n\t* Makefile.in: Regenerate.\n\t* configure.in (sh64-*-linux*, sh5*-*-linux*): Add target.\n\t* configure: Regenerate.\n\t* include/ffi.h.in: Add SHmedia support.\n\t* src/sh64/ffi.c: New file.\n\t* src/sh64/sysv.S: New file.\n\nFrom-SVN: r67869", "tree": {"sha": "a6d4e22bff230a2a4dcb77057a9505cb785a58a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6d4e22bff230a2a4dcb77057a9505cb785a58a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e860ed6dce2da5698956ce966ae27385b8780fdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e860ed6dce2da5698956ce966ae27385b8780fdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e860ed6dce2da5698956ce966ae27385b8780fdd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e860ed6dce2da5698956ce966ae27385b8780fdd/comments", "author": {"login": "kazkojima", "id": 14949970, "node_id": "MDQ6VXNlcjE0OTQ5OTcw", "avatar_url": "https://avatars.githubusercontent.com/u/14949970?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kazkojima", "html_url": "https://github.com/kazkojima", "followers_url": "https://api.github.com/users/kazkojima/followers", "following_url": "https://api.github.com/users/kazkojima/following{/other_user}", "gists_url": "https://api.github.com/users/kazkojima/gists{/gist_id}", "starred_url": "https://api.github.com/users/kazkojima/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kazkojima/subscriptions", "organizations_url": "https://api.github.com/users/kazkojima/orgs", "repos_url": "https://api.github.com/users/kazkojima/repos", "events_url": "https://api.github.com/users/kazkojima/events{/privacy}", "received_events_url": "https://api.github.com/users/kazkojima/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "55c8af0b0919d624b82248a695700f359f134332", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55c8af0b0919d624b82248a695700f359f134332", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55c8af0b0919d624b82248a695700f359f134332"}], "stats": {"total": 997, "additions": 993, "deletions": 4}, "files": [{"sha": "cbdc18353c27a2a5b320e2527b9215671e61dd33", "filename": "libffi/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e860ed6dce2da5698956ce966ae27385b8780fdd/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e860ed6dce2da5698956ce966ae27385b8780fdd/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=e860ed6dce2da5698956ce966ae27385b8780fdd", "patch": "@@ -1,3 +1,13 @@\n+2003-06-13  Kaz Kojima  <kkojima@rr.iij4u.or.jp>\n+\n+\t* Makefile.am: Add SHmedia support.  Fix a typo of SH support.\n+\t* Makefile.in: Regenerate.\n+\t* configure.in (sh64-*-linux*, sh5*-*-linux*): Add target.\n+\t* configure: Regenerate.\n+\t* include/ffi.h.in: Add SHmedia support.\n+\t* src/sh64/ffi.c: New file.\n+\t* src/sh64/sysv.S: New file.\n+\n 2003-05-16  Jakub Jelinek  <jakub@redhat.com>\n \n \t* configure.in (HAVE_RO_EH_FRAME): Check whether .eh_frame section"}, {"sha": "d015026f2f9db1c036bfcebcc9cb9fe32594800c", "filename": "libffi/Makefile.am", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e860ed6dce2da5698956ce966ae27385b8780fdd/libffi%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e860ed6dce2da5698956ce966ae27385b8780fdd/libffi%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FMakefile.am?ref=e860ed6dce2da5698956ce966ae27385b8780fdd", "patch": "@@ -19,7 +19,8 @@ EXTRA_DIST = LICENSE ChangeLog.v1 src/mips/ffi.c src/mips/n32.S \\\n \t\tsrc/powerpc/darwin_closure.S src/powerpc/aix_closure.S \\\n \t\tsrc/arm/ffi.c src/arm/sysv.S \\\n \t\tsrc/s390/ffi.c src/s390/sysv.S \\\n-\t\tsrc/sh/ffi.c src/sh/sysv.S\n+\t\tsrc/sh/ffi.c src/sh/sysv.S \\\n+\t\tsrc/sh64/ffi.c src/sh64/sysv.S\n \n VPATH = @srcdir@:@srcdir@/src:@srcdir@/src/@TARGETDIR@\n \n@@ -102,6 +103,7 @@ TARGET_SRC_ARM =  src/arm/sysv.S src/arm/ffi.c\n TARGET_SRC_S390 =  src/s390/sysv.S src/s390/ffi.c\n TARGET_SRC_X86_64 = src/x86/ffi64.c src/x86/unix64.S src/x86/ffi.c src/x86/sysv.S\n TARGET_SRC_SH =  src/sh/sysv.S src/sh/ffi.c\n+TARGET_SRC_SH64 =  src/sh64/sysv.S src/sh64/ffi.c\n \n ##libffi_la_SOURCES = src/debug.c src/prep_cif.c src/types.c $(TARGET_SRC_@TARGET@)\n ## Work around automake deficiency\n@@ -169,7 +171,11 @@ libffi_convenience_la_SOURCES = $(libffi_la_common_SOURCES) $(TARGET_SRC_X86_64)\n endif\n if SH\n libffi_la_SOURCES = $(libffi_la_common_SOURCES) $(TARGET_SRC_SH)\n-libfficonvenience_la_SOURCES = $(libffi_la_common_SOURCES) $(TARGET_SRC_SH)\n+libffi_convenience_la_SOURCES = $(libffi_la_common_SOURCES) $(TARGET_SRC_SH)\n+endif\n+if SH64\n+libffi_la_SOURCES = $(libffi_la_common_SOURCES) $(TARGET_SRC_SH64)\n+libffi_convenience_la_SOURCES = $(libffi_la_common_SOURCES) $(TARGET_SRC_SH64)\n endif\n \n AM_CFLAGS = -fexceptions"}, {"sha": "4e4e4616bcfaa3fba834192df4fcabbe081e773b", "filename": "libffi/Makefile.in", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e860ed6dce2da5698956ce966ae27385b8780fdd/libffi%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e860ed6dce2da5698956ce966ae27385b8780fdd/libffi%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FMakefile.in?ref=e860ed6dce2da5698956ce966ae27385b8780fdd", "patch": "@@ -102,7 +102,8 @@ EXTRA_DIST = LICENSE ChangeLog.v1 src/mips/ffi.c src/mips/n32.S \\\n \t\tsrc/powerpc/darwin_closure.S src/powerpc/aix_closure.S \\\n \t\tsrc/arm/ffi.c src/arm/sysv.S \\\n \t\tsrc/s390/ffi.c src/s390/sysv.S \\\n-\t\tsrc/sh/ffi.c src/sh/sysv.S\n+\t\tsrc/sh/ffi.c src/sh/sysv.S \\\n+\t\tsrc/sh64/ffi.c src/sh64/sysv.S\n \n \n VPATH = @srcdir@:@srcdir@/src:@srcdir@/src/@TARGETDIR@\n@@ -181,6 +182,7 @@ TARGET_SRC_ARM = src/arm/sysv.S src/arm/ffi.c\n TARGET_SRC_S390 = src/s390/sysv.S src/s390/ffi.c\n TARGET_SRC_X86_64 = src/x86/ffi64.c src/x86/unix64.S src/x86/ffi.c src/x86/sysv.S\n TARGET_SRC_SH = src/sh/sysv.S src/sh/ffi.c\n+TARGET_SRC_SH64 = src/sh64/sysv.S src/sh64/ffi.c\n \n libffi_la_common_SOURCES = src/debug.c src/prep_cif.c src/types.c \\\n \t\tsrc/raw_api.c src/java_raw_api.c\n@@ -201,6 +203,7 @@ libffi_la_common_SOURCES = src/debug.c src/prep_cif.c src/types.c \\\n @S390_TRUE@libffi_la_SOURCES = @S390_TRUE@$(libffi_la_common_SOURCES) $(TARGET_SRC_S390)\n @X86_64_TRUE@libffi_la_SOURCES = @X86_64_TRUE@$(libffi_la_common_SOURCES) $(TARGET_SRC_X86_64)\n @SH_TRUE@libffi_la_SOURCES = @SH_TRUE@$(libffi_la_common_SOURCES) $(TARGET_SRC_SH)\n+@SH64_TRUE@libffi_la_SOURCES = @SH64_TRUE@$(libffi_la_common_SOURCES) $(TARGET_SRC_SH64)\n @MIPS_GCC_TRUE@libffi_convenience_la_SOURCES = @MIPS_GCC_TRUE@$(libffi_la_common_SOURCES) $(TARGET_SRC_MIPS_GCC)\n @MIPS_LINUX_TRUE@libffi_convenience_la_SOURCES = @MIPS_LINUX_TRUE@$(libffi_la_common_SOURCES) $(TARGET_SRC_MIPS_LINUX)\n @MIPS_SGI_TRUE@libffi_convenience_la_SOURCES = @MIPS_SGI_TRUE@$(libffi_la_common_SOURCES) $(TARGET_SRC_MIPS_SGI)\n@@ -216,7 +219,8 @@ libffi_la_common_SOURCES = src/debug.c src/prep_cif.c src/types.c \\\n @ARM_TRUE@libffi_convenience_la_SOURCES = @ARM_TRUE@$(libffi_la_common_SOURCES) $(TARGET_SRC_ARM)\n @S390_TRUE@libffi_convenience_la_SOURCES = @S390_TRUE@$(libffi_la_common_SOURCES) $(TARGET_SRC_S390)\n @X86_64_TRUE@libffi_convenience_la_SOURCES = @X86_64_TRUE@$(libffi_la_common_SOURCES) $(TARGET_SRC_X86_64)\n-@SH_TRUE@libfficonvenience_la_SOURCES = @SH_TRUE@$(libffi_la_common_SOURCES) $(TARGET_SRC_SH)\n+@SH_TRUE@libffi_convenience_la_SOURCES = @SH_TRUE@$(libffi_la_common_SOURCES) $(TARGET_SRC_SH)\n+@SH64_TRUE@libffi_convenience_la_SOURCES = @SH64_TRUE@$(libffi_la_common_SOURCES) $(TARGET_SRC_SH64)\n \n AM_CFLAGS = -fexceptions\n \n@@ -270,6 +274,12 @@ libffi_convenience_la_LIBADD =\n @X86_64_TRUE@src/prep_cif.lo src/types.lo src/raw_api.lo \\\n @X86_64_TRUE@src/java_raw_api.lo src/x86/ffi64.lo src/x86/unix64.lo \\\n @X86_64_TRUE@src/x86/ffi.lo src/x86/sysv.lo\n+@SH_TRUE@libffi_convenience_la_OBJECTS =  src/debug.lo src/prep_cif.lo \\\n+@SH_TRUE@src/types.lo src/raw_api.lo src/java_raw_api.lo src/sh/sysv.lo \\\n+@SH_TRUE@src/sh/ffi.lo\n+@SH64_TRUE@libffi_convenience_la_OBJECTS =  src/debug.lo src/prep_cif.lo \\\n+@SH64_TRUE@src/types.lo src/raw_api.lo src/java_raw_api.lo \\\n+@SH64_TRUE@src/sh64/sysv.lo src/sh64/ffi.lo\n @SPARC_TRUE@libffi_convenience_la_OBJECTS =  src/debug.lo \\\n @SPARC_TRUE@src/prep_cif.lo src/types.lo src/raw_api.lo \\\n @SPARC_TRUE@src/java_raw_api.lo src/sparc/ffi.lo src/sparc/v8.lo \\\n@@ -294,6 +304,9 @@ libffi_la_LIBADD =\n @SH_TRUE@libffi_la_OBJECTS =  src/debug.lo src/prep_cif.lo src/types.lo \\\n @SH_TRUE@src/raw_api.lo src/java_raw_api.lo src/sh/sysv.lo \\\n @SH_TRUE@src/sh/ffi.lo\n+@SH64_TRUE@libffi_la_OBJECTS =  src/debug.lo src/prep_cif.lo src/types.lo \\\n+@SH64_TRUE@src/raw_api.lo src/java_raw_api.lo src/sh64/sysv.lo \\\n+@SH64_TRUE@src/sh64/ffi.lo\n @IA64_TRUE@libffi_la_OBJECTS =  src/debug.lo src/prep_cif.lo \\\n @IA64_TRUE@src/types.lo src/raw_api.lo src/java_raw_api.lo \\\n @IA64_TRUE@src/ia64/ffi.lo src/ia64/unix.lo"}, {"sha": "8689a37be29a6ca45c264a752f5755f6b2aab019", "filename": "libffi/configure", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e860ed6dce2da5698956ce966ae27385b8780fdd/libffi%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e860ed6dce2da5698956ce966ae27385b8780fdd/libffi%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fconfigure?ref=e860ed6dce2da5698956ce966ae27385b8780fdd", "patch": "@@ -2480,6 +2480,7 @@ s390-*-linux-*) TARGET=S390; TARGETDIR=s390;;\n s390x-*-linux-*) TARGET=S390; TARGETDIR=s390;;\n x86_64-*-linux*) TARGET=X86_64; TARGETDIR=x86;;\n sh-*-linux* | sh[34]*-*-linux*) TARGET=SH; TARGETDIR=sh;;\n+sh64-*-linux* | sh5*-*-linux*) TARGET=SH64; TARGETDIR=sh64;;\n esac\n \n if test $TARGETDIR = unknown; then\n@@ -2631,6 +2632,14 @@ else\n   SH_FALSE=\n fi\n \n+if test x$TARGET = xSH64; then\n+  SH64_TRUE=\n+  SH64_FALSE='#'\n+else\n+  SH64_TRUE='#'\n+  SH64_FALSE=\n+fi\n+\n if test x$TARGET = xMIPS_LINUX; then\n   TARGET=MIPS\n fi\n@@ -3938,6 +3947,8 @@ s%@X86_64_TRUE@%$X86_64_TRUE%g\n s%@X86_64_FALSE@%$X86_64_FALSE%g\n s%@SH_TRUE@%$SH_TRUE%g\n s%@SH_FALSE@%$SH_FALSE%g\n+s%@SH64_TRUE@%$SH64_TRUE%g\n+s%@SH64_FALSE@%$SH64_FALSE%g\n s%@CPP@%$CPP%g\n s%@ALLOCA@%$ALLOCA%g\n s%@TARGET@%$TARGET%g"}, {"sha": "25b097391cd0e7e68422390966d667a1cc3bfce6", "filename": "libffi/configure.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e860ed6dce2da5698956ce966ae27385b8780fdd/libffi%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e860ed6dce2da5698956ce966ae27385b8780fdd/libffi%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fconfigure.in?ref=e860ed6dce2da5698956ce966ae27385b8780fdd", "patch": "@@ -75,6 +75,7 @@ s390-*-linux-*) TARGET=S390; TARGETDIR=s390;;\n s390x-*-linux-*) TARGET=S390; TARGETDIR=s390;;\n x86_64-*-linux*) TARGET=X86_64; TARGETDIR=x86;;\n sh-*-linux* | sh[[34]]*-*-linux*) TARGET=SH; TARGETDIR=sh;;\n+sh64-*-linux* | sh5*-*-linux*) TARGET=SH64; TARGETDIR=sh64;;\n esac\n \n if test $TARGETDIR = unknown; then\n@@ -97,6 +98,7 @@ AM_CONDITIONAL(ARM, test x$TARGET = xARM)\n AM_CONDITIONAL(S390, test x$TARGET = xS390)\n AM_CONDITIONAL(X86_64, test x$TARGET = xX86_64)\n AM_CONDITIONAL(SH, test x$TARGET = xSH)\n+AM_CONDITIONAL(SH64, test x$TARGET = xSH64)\n \n if test x$TARGET = xMIPS_LINUX; then\n   TARGET=MIPS"}, {"sha": "fe32ea2527fcae811e55b1fb6f5e020f46878ef4", "filename": "libffi/include/ffi.h.in", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e860ed6dce2da5698956ce966ae27385b8780fdd/libffi%2Finclude%2Fffi.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e860ed6dce2da5698956ce966ae27385b8780fdd/libffi%2Finclude%2Fffi.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Finclude%2Fffi.h.in?ref=e860ed6dce2da5698956ce966ae27385b8780fdd", "patch": "@@ -302,6 +302,12 @@ typedef enum ffi_abi {\n   FFI_DEFAULT_ABI = FFI_SYSV,\n #endif\n \n+  /* ---- SuperH - SHmedia --------- */\n+#ifdef SH64\n+  FFI_SYSV,\n+  FFI_DEFAULT_ABI = FFI_SYSV,\n+#endif\n+\n   /* Leave this for debugging purposes */\n   FFI_LAST_ABI\n \n@@ -356,6 +362,10 @@ typedef struct {\n #endif\n #endif\n \n+#ifdef SH64\n+  long long flags2;\n+#endif\n+\n } ffi_cif;\n \n #if SIZEOF_ARG == 4\n@@ -501,6 +511,12 @@ struct ffi_ia64_trampoline_struct {\n #define FFI_TRAMPOLINE_SIZE 16\n #define FFI_NATIVE_RAW_API 0\n \n+#elif defined(SH64)\n+\n+#define FFI_CLOSURES 1\n+#define FFI_TRAMPOLINE_SIZE 32\n+#define FFI_NATIVE_RAW_API 0\n+\n #elif defined(__x86_64__)\n \n #define FFI_CLOSURES 1"}, {"sha": "77096035e5b997cc190a1db1ed8c7f82b257eb71", "filename": "libffi/src/sh64/ffi.c", "status": "added", "additions": 448, "deletions": 0, "changes": 448, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e860ed6dce2da5698956ce966ae27385b8780fdd/libffi%2Fsrc%2Fsh64%2Fffi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e860ed6dce2da5698956ce966ae27385b8780fdd/libffi%2Fsrc%2Fsh64%2Fffi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fsh64%2Fffi.c?ref=e860ed6dce2da5698956ce966ae27385b8780fdd", "patch": "@@ -0,0 +1,448 @@\n+/* -----------------------------------------------------------------------\n+   ffi.c - Copyright (c) 2003 Kaz Kojima\n+   \n+   SuperH SHmedia Foreign Function Interface \n+\n+   Permission is hereby granted, free of charge, to any person obtaining\n+   a copy of this software and associated documentation files (the\n+   ``Software''), to deal in the Software without restriction, including\n+   without limitation the rights to use, copy, modify, merge, publish,\n+   distribute, sublicense, and/or sell copies of the Software, and to\n+   permit persons to whom the Software is furnished to do so, subject to\n+   the following conditions:\n+\n+   The above copyright notice and this permission notice shall be included\n+   in all copies or substantial portions of the Software.\n+\n+   THE SOFTWARE IS PROVIDED ``AS IS'', WITHOUT WARRANTY OF ANY KIND, EXPRESS\n+   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n+   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n+   IN NO EVENT SHALL CYGNUS SOLUTIONS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n+   OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n+   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n+   OTHER DEALINGS IN THE SOFTWARE.\n+   ----------------------------------------------------------------------- */\n+\n+#include <ffi.h>\n+#include <ffi_common.h>\n+\n+#include <stdlib.h>\n+\n+#define NGREGARG 8\n+#define NFREGARG 12\n+\n+/* If the structure has essentialy an unique element, return its type.  */\n+static int\n+simple_type (ffi_type *arg)\n+{\n+  if (arg->type != FFI_TYPE_STRUCT)\n+    return arg->type;\n+  else if (arg->elements[1])\n+    return FFI_TYPE_STRUCT;\n+\n+  return simple_type (arg->elements[0]);\n+}\n+\n+static int\n+return_type (ffi_type *arg)\n+{\n+  unsigned short type;\n+\n+  if (arg->type != FFI_TYPE_STRUCT)\n+    return arg->type;\n+\n+  type = simple_type (arg->elements[0]);\n+  if (! arg->elements[1])\n+    {\n+      switch (type)\n+\t{\n+\tcase FFI_TYPE_SINT8:\n+\tcase FFI_TYPE_UINT8:\n+\tcase FFI_TYPE_SINT16:\n+\tcase FFI_TYPE_UINT16:\n+\tcase FFI_TYPE_SINT32:\n+\tcase FFI_TYPE_UINT32:\n+\tcase FFI_TYPE_SINT64:\n+\tcase FFI_TYPE_UINT64:\n+\t  return FFI_TYPE_UINT64;\n+\n+\tdefault:\n+\t  return type;\n+\t}\n+    }\n+\n+  /* gcc uses r2 if the result can be packed in on register.  */\n+  if (arg->size <= sizeof (UINT64))\n+    return FFI_TYPE_UINT64;\n+\n+  return FFI_TYPE_STRUCT;\n+}\n+\n+/* ffi_prep_args is called by the assembly routine once stack space\n+   has been allocated for the function's arguments */\n+\n+/*@-exportheader@*/\n+void ffi_prep_args(char *stack, extended_cif *ecif)\n+/*@=exportheader@*/\n+{\n+  register unsigned int i;\n+  register unsigned int avn;\n+  register void **p_argv;\n+  register char *argp;\n+  register ffi_type **p_arg;\n+\n+  argp = stack;\n+\n+  if (return_type (ecif->cif->rtype) == FFI_TYPE_STRUCT)\n+    {\n+      *(void **) argp = ecif->rvalue;\n+      argp += sizeof (UINT64);\n+    }\n+\n+  avn = ecif->cif->nargs;\n+  p_argv = ecif->avalue;\n+\n+  for (i = 0, p_arg = ecif->cif->arg_types; i < avn; i++, p_arg++, p_argv++)\n+    {\n+      size_t z;\n+\n+      z = (*p_arg)->size;\n+      if (z < sizeof (UINT32))\n+\t{\n+\t  switch ((*p_arg)->type)\n+\t    {\n+\t    case FFI_TYPE_SINT8:\n+\t      *(SINT64 *) argp = (SINT64) *(SINT8 *)(*p_argv);\n+\t      break;\n+  \n+\t    case FFI_TYPE_UINT8:\n+\t      *(UINT64 *) argp = (UINT64) *(UINT8 *)(*p_argv);\n+\t      break;\n+  \n+\t    case FFI_TYPE_SINT16:\n+\t      *(SINT64 *) argp = (SINT64) *(SINT16 *)(*p_argv);\n+\t      break;\n+  \n+\t    case FFI_TYPE_UINT16:\n+\t      *(UINT64 *) argp = (UINT64) *(UINT16 *)(*p_argv);\n+\t      break;\n+  \n+\t    case FFI_TYPE_STRUCT:\n+\t      *(UINT64 *) argp = (UINT64) *(UINT32 *)(*p_argv);\n+\t      break;\n+\n+\t    default:\n+\t      FFI_ASSERT(0);\n+\t    }\n+\t  argp += sizeof (UINT64);\n+\t}\n+      else if (z == sizeof (UINT32))\n+\t{\n+\t  *(UINT64 *) argp = (UINT64) *(UINT32 *) (*p_argv);\n+\t  argp += sizeof (UINT64);\n+\t}\n+      else if (z == sizeof (UINT64))\n+\t{\n+\t  *(UINT64 *) argp = *(UINT64 *) (*p_argv);\n+\t  argp += sizeof (UINT64);\n+\t}\n+      else\n+\t{\n+\t  int n = (z + sizeof (UINT64) - 1) / sizeof (UINT64);\n+\n+\t  memcpy (argp, *p_argv, z);\n+\t  argp += n * sizeof (UINT64);\n+\t}\n+    }\n+\n+  return;\n+}\n+\n+/* Perform machine dependent cif processing */\n+ffi_status ffi_prep_cif_machdep(ffi_cif *cif)\n+{\n+  int i, j;\n+  int size, type;\n+  int n, m;\n+  int greg;\n+  int freg;\n+\n+  greg = (return_type (cif->rtype) == FFI_TYPE_STRUCT ? 1 : 0);\n+  freg = 0;\n+  cif->flags2 = 0;\n+\n+  for (i = j = 0; i < cif->nargs; i++)\n+    {\n+      type = (cif->arg_types)[i]->type;\n+      switch (type)\n+\t{\n+\tcase FFI_TYPE_FLOAT:\n+\t  greg++;\n+\t  cif->bytes += sizeof (UINT64) - sizeof (float);\n+\t  if (freg >= NFREGARG - 1)\n+\t    continue;\n+\t  freg++;\n+\t  cif->flags2 += ((cif->arg_types)[i]->type) << (2 * j++);\n+\t  break;\n+\n+\tcase FFI_TYPE_DOUBLE:\n+\t  if (greg++ >= NGREGARG && (freg + 1) >= NFREGARG)\n+\t    continue;\n+\t  if ((freg + 1) < NFREGARG)\n+\t    {\n+\t      freg = (freg + 1) & ~1;\n+\t      freg += 2;\n+\t      cif->flags2 += ((cif->arg_types)[i]->type) << (2 * j++);\n+\t    }\n+\t  else\n+\t    cif->flags2 += FFI_TYPE_INT << (2 * j++);\n+\t  break;\n+\t      \n+\tdefault:\n+\t  size = (cif->arg_types)[i]->size;\n+\t  if (size < sizeof (UINT64))\n+\t    cif->bytes += sizeof (UINT64) - size;\n+\t  n = (size + sizeof (UINT64) - 1) / sizeof (UINT64);\n+\t  if (greg >= NGREGARG)\n+\t    continue;\n+\t  else if (greg + n - 1 >= NGREGARG)\n+\t    greg = NGREGARG;\n+\t  else\n+\t    greg += n;\n+\t  for (m = 0; m < n; m++)\n+\t    cif->flags2 += FFI_TYPE_INT << (2 * j++);\n+\t  break;\n+\t}\n+    }\n+\n+  /* Set the return type flag */\n+  switch (cif->rtype->type)\n+    {\n+    case FFI_TYPE_STRUCT:\n+      cif->flags = return_type (cif->rtype);\n+      break;\n+\n+    case FFI_TYPE_VOID:\n+    case FFI_TYPE_FLOAT:\n+    case FFI_TYPE_DOUBLE:\n+    case FFI_TYPE_SINT64:\n+    case FFI_TYPE_UINT64:\n+      cif->flags = cif->rtype->type;\n+      break;\n+\n+    default:\n+      cif->flags = FFI_TYPE_INT;\n+      break;\n+    }\n+\n+  return FFI_OK;\n+}\n+\n+/*@-declundef@*/\n+/*@-exportheader@*/\n+extern void ffi_call_SYSV(void (*)(char *, extended_cif *), \n+\t\t\t  /*@out@*/ extended_cif *, \n+\t\t\t  unsigned, unsigned, long long,\n+\t\t\t  /*@out@*/ unsigned *, \n+\t\t\t  void (*fn)());\n+/*@=declundef@*/\n+/*@=exportheader@*/\n+\n+void ffi_call(/*@dependent@*/ ffi_cif *cif, \n+\t      void (*fn)(), \n+\t      /*@out@*/ void *rvalue, \n+\t      /*@dependent@*/ void **avalue)\n+{\n+  extended_cif ecif;\n+\n+  ecif.cif = cif;\n+  ecif.avalue = avalue;\n+  \n+  /* If the return value is a struct and we don't have a return\t*/\n+  /* value address then we need to make one\t\t        */\n+\n+  if ((rvalue == NULL) && \n+      (cif->rtype->type == FFI_TYPE_STRUCT))\n+    {\n+      /*@-sysunrecog@*/\n+      ecif.rvalue = alloca(cif->rtype->size);\n+      /*@=sysunrecog@*/\n+    }\n+  else\n+    ecif.rvalue = rvalue;\n+\n+  switch (cif->abi) \n+    {\n+    case FFI_SYSV:\n+      /*@-usedef@*/\n+      ffi_call_SYSV(ffi_prep_args, &ecif, cif->bytes, \n+\t\t    cif->flags, cif->flags2, ecif.rvalue, fn);\n+      /*@=usedef@*/\n+      break;\n+    default:\n+      FFI_ASSERT(0);\n+      break;\n+    }\n+}\n+\n+extern void ffi_closure_SYSV (void);\n+extern void __ic_invalidate (void *line);\n+\n+ffi_status\n+ffi_prep_closure (ffi_closure *closure,\n+\t\t  ffi_cif *cif,\n+\t\t  void (*fun)(ffi_cif*, void*, void**, void*),\n+\t\t  void *user_data)\n+{\n+  unsigned int *tramp;\n+\n+  FFI_ASSERT (cif->abi == FFI_GCC_SYSV);\n+\n+  tramp = (unsigned int *) &closure->tramp[0];\n+  /* Since ffi_closure is an aligned object, the ffi trampoline is\n+     called as an SHcompact code.  Sigh.\n+     SHcompact part:\n+     mova @(1,pc),r0; add #1,r0; jmp @r0; nop;\n+     SHmedia part:\n+     movi fnaddr >> 16,r1; shori fnaddr,r1; ptabs/l r1,tr0\n+     movi cxt >> 16,r1; shori cxt,r1; blink tr0,r63  */\n+#ifdef __LITTLE_ENDIAN__\n+  tramp[0] = 0x7001c701;\n+  tramp[1] = 0x0009402b;\n+#else\n+  tramp[0] = 0xc7017001;\n+  tramp[1] = 0x402b0009;\n+#endif\n+  tramp[2] = 0xcc000010 | (((UINT32) ffi_closure_SYSV) >> 16) << 10;\n+  tramp[3] = 0xc8000010 | (((UINT32) ffi_closure_SYSV) & 0xffff) << 10;\n+  tramp[4] = 0x6bf10600;\n+  tramp[5] = 0xcc000010 | (((UINT32) closure) >> 16) << 10;\n+  tramp[6] = 0xc8000010 | (((UINT32) closure) & 0xffff) << 10;\n+  tramp[7] = 0x4401fff0;\n+\n+  closure->cif = cif;\n+  closure->fun = fun;\n+  closure->user_data = user_data;\n+\n+  /* Flush the icache.  */\n+  asm volatile (\"ocbwb %0,0; synco; icbi %0,0; synci\" : : \"r\" (tramp));\n+\n+  return FFI_OK;\n+}\n+\n+/* Basically the trampoline invokes ffi_closure_SYSV, and on \n+ * entry, r3 holds the address of the closure.\n+ * After storing the registers that could possibly contain\n+ * parameters to be passed into the stack frame and setting\n+ * up space for a return value, ffi_closure_SYSV invokes the \n+ * following helper function to do most of the work.\n+ */\n+\n+int\n+ffi_closure_helper_SYSV (ffi_closure *closure, UINT64 *rvalue, \n+\t\t\t UINT64 *pgr, UINT64 *pfr, UINT64 *pst)\n+{\n+  void **avalue;\n+  ffi_type **p_arg;\n+  int i, avn;\n+  int greg, freg;\n+  ffi_cif *cif;\n+\n+  cif = closure->cif;\n+  avalue = alloca (cif->nargs * sizeof (void *));\n+\n+  /* Copy the caller's structure return value address so that the closure\n+     returns the data directly to the caller.  */\n+  if (cif->rtype->type == FFI_TYPE_STRUCT)\n+    {\n+      rvalue = *pgr;\n+      greg = 1;\n+    }\n+  else\n+    greg = 0;\n+\n+  freg = 0;\n+  cif = closure->cif;\n+  avn = cif->nargs;\n+\n+  /* Grab the addresses of the arguments from the stack frame.  */\n+  for (i = 0, p_arg = cif->arg_types; i < avn; i++, p_arg++)\n+    {\n+      size_t z;\n+      void *p;\n+\n+      z = (*p_arg)->size;\n+      if (z < sizeof (UINT32))\n+\t{\n+\t  p = pgr + greg++;\n+\n+\t  switch ((*p_arg)->type)\n+\t    {\n+\t    case FFI_TYPE_SINT8:\n+\t    case FFI_TYPE_UINT8:\n+\t    case FFI_TYPE_SINT16:\n+\t    case FFI_TYPE_UINT16:\n+\t    case FFI_TYPE_STRUCT:\n+#ifdef __LITTLE_ENDIAN__\n+\t      avalue[i] = p;\n+#else\n+\t      avalue[i] = ((char *) p) + sizeof (UINT32) - z;\n+#endif\n+\t      break;\n+\n+\t    default:\n+\t      FFI_ASSERT(0);\n+\t    }\n+\t}\n+      else if (z == sizeof (UINT32))\n+\t{\n+\t  if ((*p_arg)->type == FFI_TYPE_FLOAT)\n+\t    {\n+\t      if (freg < NFREGARG - 1)\n+#ifdef __LITTLE_ENDIAN__\n+\t\tavalue[i] = (UINT32 *) pfr + (1 ^ freg++);\n+#else\n+\t\tavalue[i] = (UINT32 *) pfr + freg++;\n+#endif\n+\t      else\n+#ifdef __LITTLE_ENDIAN__\n+\t\tavalue[i] = pgr + greg;\n+#else\n+\t\tavalue[i] = (UINT32 *) (pgr + greg) + 1;\n+#endif\n+\t    }\n+\t  else\n+#ifdef __LITTLE_ENDIAN__\n+\t    avalue[i] = pgr + greg;\n+#else\n+\t    avalue[i] = (UINT32 *) (pgr + greg) + 1;\n+#endif\n+\t  greg++;\n+\t}\n+      else if ((*p_arg)->type == FFI_TYPE_DOUBLE)\n+\t{\n+\t  if (freg + 1 >= NFREGARG)\n+\t    avalue[i] = pgr + greg;\n+\t  else\n+\t    {\n+\t      freg = (freg + 1) & ~1;\n+\t      avalue[i] = pfr + (freg >> 1);\n+\t      freg += 2;\n+\t    }\n+\t  greg++;\n+\t}\n+      else\n+\t{\n+\t  int n = (z + sizeof (UINT64) - 1) / sizeof (UINT64);\n+\n+\t  avalue[i] = pgr + greg;\n+\t  greg += n;\n+\t}\n+    }\n+\n+  (closure->fun) (cif, rvalue, avalue, closure->user_data);\n+\n+  /* Tell ffi_closure_SYSV how to perform return type promotions.  */\n+  return cif->rtype->type;\n+}\n+"}, {"sha": "e478ced57fe957ec6f7861592e3fd559d2762d29", "filename": "libffi/src/sh64/sysv.S", "status": "added", "additions": 483, "deletions": 0, "changes": 483, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e860ed6dce2da5698956ce966ae27385b8780fdd/libffi%2Fsrc%2Fsh64%2Fsysv.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e860ed6dce2da5698956ce966ae27385b8780fdd/libffi%2Fsrc%2Fsh64%2Fsysv.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fsh64%2Fsysv.S?ref=e860ed6dce2da5698956ce966ae27385b8780fdd", "patch": "@@ -0,0 +1,483 @@\n+/* -----------------------------------------------------------------------\n+   sysv.S - Copyright (c) 2003 Kaz Kojima\n+   \n+   SuperH SHmedia Foreign Function Interface \n+\n+   Permission is hereby granted, free of charge, to any person obtaining\n+   a copy of this software and associated documentation files (the\n+   ``Software''), to deal in the Software without restriction, including\n+   without limitation the rights to use, copy, modify, merge, publish,\n+   distribute, sublicense, and/or sell copies of the Software, and to\n+   permit persons to whom the Software is furnished to do so, subject to\n+   the following conditions:\n+\n+   The above copyright notice and this permission notice shall be included\n+   in all copies or substantial portions of the Software.\n+\n+   THE SOFTWARE IS PROVIDED ``AS IS'', WITHOUT WARRANTY OF ANY KIND, EXPRESS\n+   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n+   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n+   IN NO EVENT SHALL CYGNUS SOLUTIONS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n+   OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n+   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n+   OTHER DEALINGS IN THE SOFTWARE.\n+   ----------------------------------------------------------------------- */\n+\n+#define LIBFFI_ASM\t\n+#include <ffi.h>\n+#ifdef HAVE_MACHINE_ASM_H\n+#include <machine/asm.h>\n+#else\n+/* XXX these lose for some platforms, I'm sure. */\n+#define CNAME(x) x\n+#define ENTRY(x) .globl CNAME(x); .type CNAME(x),%function; CNAME(x):\n+#endif\n+\n+#ifdef __LITTLE_ENDIAN__\n+#define OFS_FLT\t0\n+#else\n+#define OFS_FLT\t4\n+#endif\n+\n+\t.section\t.text..SHmedia32,\"ax\"\n+\n+\t# r2:\tffi_prep_args\n+\t# r3:\t&ecif\n+\t# r4:\tbytes\n+\t# r5:\tflags\n+\t# r6:\tflags2\n+\t# r7:\trvalue\n+\t# r8:\tfn\n+\n+\t# This assumes we are using gas.\n+\t.align\t5\n+ENTRY(ffi_call_SYSV)\n+\t# Save registers\n+.LFB1:\n+\taddi.l\tr15, -48, r15\n+.LCFI0:\n+\tst.q\tr15, 40, r32\n+\tst.q\tr15, 32, r31\n+\tst.q\tr15, 24, r30\n+\tst.q\tr15, 16, r29\n+\tst.q\tr15, 8, r28\n+\tst.l\tr15, 4, r18\n+\tst.l\tr15, 0, r14\n+\tadd.l\tr15, r63, r14\n+.LCFI1:\n+#\tadd\tr4, r63, r28\n+\tadd\tr5, r63, r29\n+\tadd\tr6, r63, r30\n+\tadd\tr7, r63, r31\n+\tadd\tr8, r63, r32\n+\n+\taddi\tr4, (64 + 7), r4\n+\tandi\tr4, ~7, r4\n+\tsub.l\tr15, r4, r15\n+\n+\tptabs/l\tr2, tr0\n+\tadd\tr15, r63, r2\n+\tblink\ttr0, r18\n+\n+\taddi\tr15, 64, r22\n+\tmovi\t0, r0\n+\tmovi\t0, r1\n+\n+\tpt/l\t1f, tr1\n+\tbnei/l\tr29, FFI_TYPE_STRUCT, tr1\n+\tld.l\tr15, 0, r19\n+\taddi\tr15, 8, r15\n+\taddi\tr0, 1, r0\n+1:\n+\n+.L_pass:\n+\tandi\tr30, 3, r20\n+\tshlri\tr30, 2, r30\n+\n+\tpt/l\t.L_call_it, tr0\n+\tpt/l\t.L_pass_i, tr1\n+\tpt/l\t.L_pass_f, tr2\n+\n+\tbeqi/l\tr20, FFI_TYPE_VOID, tr0\n+\tbeqi/l\tr20, FFI_TYPE_INT, tr1\n+\tbeqi/l\tr20, FFI_TYPE_FLOAT, tr2\n+\n+.L_pass_d:\n+\taddi\tr0, 1, r0\n+\taddi\tr1, 1, r1\n+\tandi\tr1, ~1, r1\n+\n+\tpt/l\t3f, tr0\n+\tmovi\t12, r20\n+\tbge/l\tr1, r20, tr0\n+\n+\tpt/l\t.L_pop_d, tr1\n+\tpt/l\t2f, tr0\n+\tblink\ttr1, r63\n+2:\n+\taddi.l\tr15, 8, r15\n+3:\n+\tpt/l\t.L_pass, tr0\n+\taddi\tr1, 2, r1\n+\tblink\ttr0, r63\n+\n+.L_pop_d:\n+\tpt/l\t.L_pop_d_tbl, tr1\n+\tgettr\ttr1, r20\n+\tshlli\tr1, 2, r21\n+\tadd\tr20, r21, r20\n+\tptabs/l\tr20, tr1\n+\tblink\ttr1, r63\n+\n+.L_pop_d_tbl:\n+\tfld.d\tr15, 0, dr0\n+\tblink\ttr0, r63\n+\tfld.d\tr15, 0, dr2\n+\tblink\ttr0, r63\n+\tfld.d\tr15, 0, dr4\n+\tblink\ttr0, r63\n+\tfld.d\tr15, 0, dr6\n+\tblink\ttr0, r63\n+\tfld.d\tr15, 0, dr8\n+\tblink\ttr0, r63\n+\tfld.d\tr15, 0, dr10\n+\tblink\ttr0, r63\n+\n+.L_pass_f:\n+\taddi\tr0, 1, r0\n+\tpt/l\t3f, tr0\n+\tmovi\t12, r20\n+\tbge/l\tr1, r20, tr0\n+\n+\tpt/l\t.L_pop_f, tr1\n+\tpt/l\t2f, tr0\n+\tblink\ttr1, r63\n+2:\n+\taddi.l\tr15, 8, r15\n+3:\n+\tpt/l\t.L_pass, tr0\n+\taddi\tr1, 1, r1\n+\tblink\ttr0, r63\n+\n+.L_pop_f:\n+\tpt/l\t.L_pop_f_tbl, tr1\n+\tgettr\ttr1, r20\n+\tshlli\tr1, 3, r21\n+\tadd\tr20, r21, r20\n+\tptabs/l\tr20, tr1\n+\tblink\ttr1, r63\n+\n+.L_pop_f_tbl:\n+\tfld.s\tr15, OFS_FLT, fr0\n+\tblink\ttr0, r63\n+\tfld.s\tr15, OFS_FLT, fr1\n+\tblink\ttr0, r63\n+\tfld.s\tr15, OFS_FLT, fr2\n+\tblink\ttr0, r63\n+\tfld.s\tr15, OFS_FLT, fr3\n+\tblink\ttr0, r63\n+\tfld.s\tr15, OFS_FLT, fr4\n+\tblink\ttr0, r63\n+\tfld.s\tr15, OFS_FLT, fr5\n+\tblink\ttr0, r63\n+\tfld.s\tr15, OFS_FLT, fr6\n+\tblink\ttr0, r63\n+\tfld.s\tr15, OFS_FLT, fr7\n+\tblink\ttr0, r63\n+\tfld.s\tr15, OFS_FLT, fr8\n+\tblink\ttr0, r63\n+\tfld.s\tr15, OFS_FLT, fr9\n+\tblink\ttr0, r63\n+\tfld.s\tr15, OFS_FLT, fr10\n+\tblink\ttr0, r63\n+\tfld.s\tr15, OFS_FLT, fr11\n+\tblink\ttr0, r63\n+\n+.L_pass_i:\n+\tpt/l\t3f, tr0\n+\tmovi\t8, r20\n+\tbge/l\tr0, r20, tr0\n+\n+\tpt/l\t.L_pop_i, tr1\n+\tpt/l\t2f, tr0\n+\tblink\ttr1, r63\n+2:\n+\taddi.l\tr15, 8, r15\n+3:\n+\tpt/l\t.L_pass, tr0\n+\taddi\tr0, 1, r0\n+\tblink\ttr0, r63\n+\n+.L_pop_i:\n+\tpt/l\t.L_pop_i_tbl, tr1\n+\tgettr\ttr1, r20\n+\tshlli\tr0, 3, r21\n+\tadd\tr20, r21, r20\n+\tptabs/l\tr20, tr1\n+\tblink\ttr1, r63\n+\n+.L_pop_i_tbl:\n+\tld.q\tr15, 0, r2\n+\tblink\ttr0, r63\n+\tld.q\tr15, 0, r3\n+\tblink\ttr0, r63\n+\tld.q\tr15, 0, r4\n+\tblink\ttr0, r63\n+\tld.q\tr15, 0, r5\n+\tblink\ttr0, r63\n+\tld.q\tr15, 0, r6\n+\tblink\ttr0, r63\n+\tld.q\tr15, 0, r7\n+\tblink\ttr0, r63\n+\tld.q\tr15, 0, r8\n+\tblink\ttr0, r63\n+\tld.q\tr15, 0, r9\n+\tblink\ttr0, r63\n+\n+.L_call_it:\n+\t# call function\n+\tpt/l\t1f, tr1\n+\tbnei/l\tr29, FFI_TYPE_STRUCT, tr1\n+\tadd\tr19, r63, r2\n+1:\n+\tadd\tr22, r63, r15\n+\tptabs/l\tr32, tr0\n+\tblink\ttr0, r18\n+\n+\tpt/l\t.L_ret_i, tr0\n+\tpt/l\t.L_ret_ll, tr1\n+\tpt/l\t.L_ret_d, tr2\n+\tpt/l\t.L_ret_f, tr3\n+\tpt/l\t.L_epilogue, tr4\n+\n+\tbeqi/l\tr29, FFI_TYPE_INT, tr0\n+\tbeqi/l\tr29, FFI_TYPE_SINT64, tr1\n+\tbeqi/l\tr29, FFI_TYPE_UINT64, tr1\n+\tbeqi/l\tr29, FFI_TYPE_DOUBLE, tr2\n+\tbeqi/l\tr29, FFI_TYPE_FLOAT, tr3\n+\tblink\ttr4, r63\n+\n+.L_ret_d:\n+\tfst.d\tr31, 0, dr0\n+\tblink\ttr4, r63\n+\n+.L_ret_ll:\n+\tst.q\tr31, 0, r2\n+\tblink\ttr4, r63\n+\n+.L_ret_f:\n+\tfst.s\tr31, OFS_FLT, fr0\n+\tblink\ttr4, r63\n+\n+.L_ret_i:\n+\tst.l\tr31, 0, r2\n+\t# Fall\n+\n+.L_epilogue:\n+\t# Remove the space we pushed for the args\n+\tadd\tr14, r63, r15\n+\n+\tld.l\tr15, 0, r14\n+\tld.l\tr15, 4, r18\n+\tld.q\tr15, 8, r28\n+\tld.q\tr15, 16, r29\n+\tld.q\tr15, 24, r30\n+\tld.q\tr15, 32, r31\n+\tld.q\tr15, 40, r32\n+\taddi.l\tr15, 48, r15\n+\tptabs\tr18, tr0\n+\tblink\ttr0, r63\n+\n+.LFE1:\n+.ffi_call_SYSV_end:\n+\t.size\t CNAME(ffi_call_SYSV),.ffi_call_SYSV_end-CNAME(ffi_call_SYSV)\n+\n+\t.align\t5\n+ENTRY(ffi_closure_SYSV)\n+.LFB2:\n+\taddi.l\tr15, -136, r15\n+.LCFI2:\n+\tst.l\tr15, 12, r18\n+\tst.l\tr15, 8, r14\n+\tst.l\tr15, 4, r12\n+\tadd\tr15, r63, r14\n+.LCFI3:\n+\t/* Stack layout:\t\n+\t   ...\n+\t   64 bytes (register parameters)\n+\t   48 bytes (floating register parameters)\n+\t    8 bytes (result)\n+\t    4 bytes (r18)\n+\t    4 bytes (r14)\n+\t    4 bytes (r12)\n+\t    4 bytes (for align)\n+\t   <- new stack pointer\n+\t*/\n+\tfst.d\tr14, 24, dr0\n+\tfst.d\tr14, 32, dr2\n+\tfst.d\tr14, 40, dr4\n+\tfst.d\tr14, 48, dr6\n+\tfst.d\tr14, 56, dr8\n+\tfst.d\tr14, 64, dr10\n+\tst.q\tr14, 72, r2\n+\tst.q\tr14, 80, r3\n+\tst.q\tr14, 88, r4\n+\tst.q\tr14, 96, r5\n+\tst.q\tr14, 104, r6\n+\tst.q\tr14, 112, r7\n+\tst.q\tr14, 120, r8\n+\tst.q\tr14, 128, r9\n+\n+\tadd\tr1, r63, r2\n+\taddi\tr14, 16, r3\n+\taddi\tr14, 72, r4\n+\taddi\tr14, 24, r5\n+\taddi\tr14, 136, r6\n+#ifdef PIC\n+\tmovi\t(((datalabel _GLOBAL_OFFSET_TABLE_-(.LPCS0-.)) >> 16) & 65535), r12\n+        shori\t((datalabel _GLOBAL_OFFSET_TABLE_-(.LPCS0-.)) & 65535), r12\n+.LPCS0:\tptrel/u r12, tr0\n+\tmovi\t((ffi_closure_helper_SYSV@GOTPLT) & 65535), r1\n+\tgettr\ttr0, r12\n+\tldx.l\tr1, r12, r1\n+\tptabs\tr1, tr0\n+#else\n+\tpt/l\tffi_closure_helper_SYSV, tr0\n+#endif\n+\tblink\ttr0, r18\n+\n+\tshlli\tr2, 1, r1\n+        movi    (((datalabel .L_table) >> 16) & 65535), r2\n+        shori   ((datalabel .L_table) & 65535), r2\n+        ldx.w   r2, r1, r1\n+        add     r1, r2, r1\n+\tpt/l\t.L_case_v, tr1\n+        ptabs   r1, tr0\n+        blink   tr0, r63\n+\n+        .align 2\n+.L_table:\n+\t.word\t.L_case_v - datalabel .L_table\t/* FFI_TYPE_VOID */\n+\t.word\t.L_case_i - datalabel .L_table\t/* FFI_TYPE_INT */\n+\t.word\t.L_case_f - datalabel .L_table\t/* FFI_TYPE_FLOAT */\n+\t.word\t.L_case_d - datalabel .L_table\t/* FFI_TYPE_DOUBLE */\n+\t.word\t.L_case_d - datalabel .L_table\t/* FFI_TYPE_LONGDOUBLE */\n+\t.word\t.L_case_uq - datalabel .L_table\t/* FFI_TYPE_UINT8 */\n+\t.word\t.L_case_q - datalabel .L_table\t/* FFI_TYPE_SINT8 */\n+\t.word\t.L_case_uh - datalabel .L_table\t/* FFI_TYPE_UINT16 */\n+\t.word\t.L_case_h - datalabel .L_table\t/* FFI_TYPE_SINT16 */\n+\t.word\t.L_case_i - datalabel .L_table\t/* FFI_TYPE_UINT32 */\n+\t.word\t.L_case_i - datalabel .L_table\t/* FFI_TYPE_SINT32 */\n+\t.word\t.L_case_ll - datalabel .L_table\t/* FFI_TYPE_UINT64 */\n+\t.word\t.L_case_ll - datalabel .L_table\t/* FFI_TYPE_SINT64 */\n+\t.word\t.L_case_v - datalabel .L_table\t/* FFI_TYPE_STRUCT */\n+\t.word\t.L_case_i - datalabel .L_table\t/* FFI_TYPE_POINTER */\n+\n+        .align 2\n+.L_case_d:\n+\tfld.d\tr14, 16, dr0\n+\tblink\ttr1, r63\n+.L_case_f:\n+\tfld.s\tr14, 16, fr0\n+\tblink\ttr1, r63\n+.L_case_ll:\n+\tld.q\tr14, 16, r2\n+\tblink\ttr1, r63\n+.L_case_i:\n+\tld.l\tr14, 16, r2\n+\tblink\ttr1, r63\n+.L_case_q:\n+\tld.b\tr14, 16, r2\n+\tblink\ttr1, r63\n+.L_case_uq:\n+\tld.ub\tr14, 16, r2\n+\tblink\ttr1, r63\n+.L_case_h:\n+\tld.w\tr14, 16, r2\n+\tblink\ttr1, r63\n+.L_case_uh:\n+\tld.uw\tr14, 16, r2\n+\tblink\ttr1, r63\n+.L_case_v:\n+\tadd.l\tr14, r63, r15\n+\tld.l\tr15, 4, r12\n+\tld.l\tr15, 8, r14\n+\tld.l\tr15, 12, r18\n+\taddi.l\tr15, 136, r15\n+\tptabs\tr18, tr0\n+\tblink\ttr0, r63\n+\n+.LFE2:\n+.ffi_closure_SYSV_end:\n+\t.size\t CNAME(ffi_closure_SYSV),.ffi_closure_SYSV_end-CNAME(ffi_closure_SYSV)\n+\n+\t.section\t\".eh_frame\",\"aw\",@progbits\n+__FRAME_BEGIN__:\n+\t.4byte\t.LECIE1-.LSCIE1\t/* Length of Common Information Entry */\n+.LSCIE1:\n+\t.4byte\t0x0\t/* CIE Identifier Tag */\n+\t.byte\t0x1\t/* CIE Version */\n+\t.ascii \"zR\\0\"\t/* CIE Augmentation */\n+\t.uleb128 0x1\t/* CIE Code Alignment Factor */\n+\t.sleb128 -4\t/* CIE Data Alignment Factor */\n+\t.byte\t0x12\t/* CIE RA Column */\n+\t.uleb128 0x1\t/* Augmentation size */\n+\t.byte\t0x1b\t/* FDE Encoding (pcrel sdata4) */\n+\t.byte\t0xc\t/* DW_CFA_def_cfa */\n+\t.uleb128 0xf\n+\t.uleb128 0x0\n+\t.align\t2\n+.LECIE1:\n+.LSFDE1:\n+\t.4byte\tdatalabel .LEFDE1-datalabel .LASFDE1\t/* FDE Length */\n+.LASFDE1:\n+\t.4byte\tdatalabel .LASFDE1-datalabel __FRAME_BEGIN__\n+\t.4byte\tdatalabel .LFB1-.\t\t/* FDE initial location */\n+\t.4byte\tdatalabel .LFE1-datalabel .LFB1\t/* FDE address range */\n+\t.byte\t0x4\t/* DW_CFA_advance_loc4 */\n+\t.4byte\tdatalabel .LCFI0-datalabel .LFB1\n+\t.byte\t0xe\t/* DW_CFA_def_cfa_offset */\n+\t.uleb128 0x30\n+\t.byte\t0x4\t/* DW_CFA_advance_loc4 */\n+\t.4byte\tdatalabel .LCFI1-datalabel .LCFI0\n+\t.byte   0x8e\t/* DW_CFA_offset, column 0xe */\n+\t.uleb128 0xc\n+\t.byte   0x92\t/* DW_CFA_offset, column 0x12 */\n+\t.uleb128 0xb\n+\t.byte   0x9c\t/* DW_CFA_offset, column 0x1c */\n+\t.uleb128 0xa\n+\t.byte   0x9d\t/* DW_CFA_offset, column 0x1d */\n+\t.uleb128 0x8\n+\t.byte   0x9e\t/* DW_CFA_offset, column 0x1e */\n+\t.uleb128 0x6\n+\t.byte   0x9f\t/* DW_CFA_offset, column 0x1f */\n+\t.uleb128 0x4\n+\t.byte   0xa0\t/* DW_CFA_offset, column 0x20 */\n+\t.uleb128 0x2\n+\t.byte\t0xd\t/* DW_CFA_def_cfa_register */\n+\t.uleb128 0xe\n+\t.align\t2\n+.LEFDE1:\n+\n+.LSFDE3:\n+\t.4byte\tdatalabel .LEFDE3-datalabel .LASFDE3\t/* FDE Length */\n+.LASFDE3:\n+\t.4byte\tdatalabel .LASFDE3-datalabel __FRAME_BEGIN__\n+\t.4byte\tdatalabel .LFB2-.\t\t/* FDE initial location */\n+\t.4byte\tdatalabel .LFE2-datalabel .LFB2\t/* FDE address range */\n+\t.byte\t0x4\t/* DW_CFA_advance_loc4 */\n+\t.4byte\tdatalabel .LCFI2-datalabel .LFB2\n+\t.byte\t0xe\t/* DW_CFA_def_cfa_offset */\n+\t.uleb128 0x88\n+\t.byte\t0x4\t/* DW_CFA_advance_loc4 */\n+\t.4byte\tdatalabel .LCFI3-datalabel .LCFI2\n+\t.byte   0x8c\t/* DW_CFA_offset, column 0xc */\n+\t.uleb128 0x21\n+\t.byte   0x8e\t/* DW_CFA_offset, column 0xe */\n+\t.uleb128 0x20\n+\t.byte   0x92\t/* DW_CFA_offset, column 0x12 */\n+\t.uleb128 0x1f\n+\t.byte\t0xd\t/* DW_CFA_def_cfa_register */\n+\t.uleb128 0xe\n+\t.align\t2\n+.LEFDE3:"}]}