{"sha": "1e6850841fb52252a7e793ac6fd70a8daa1c8860", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU2ODUwODQxZmI1MjI1MmE3ZTc5M2FjNmZkNzBhOGRhYTFjODg2MA==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2019-03-20T05:24:58Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-18T07:00:11Z"}, "message": "AVX512FP16: Add vfmaddsub[132,213,231]ph/vfmsubadd[132,213,231]ph.\n\ngcc/ChangeLog:\n\n\t* config/i386/avx512fp16intrin.h (_mm512_fmaddsub_ph):\n\tNew intrinsic.\n\t(_mm512_mask_fmaddsub_ph): Likewise.\n\t(_mm512_mask3_fmaddsub_ph): Likewise.\n\t(_mm512_maskz_fmaddsub_ph): Likewise.\n\t(_mm512_fmaddsub_round_ph): Likewise.\n\t(_mm512_mask_fmaddsub_round_ph): Likewise.\n\t(_mm512_mask3_fmaddsub_round_ph): Likewise.\n\t(_mm512_maskz_fmaddsub_round_ph): Likewise.\n\t(_mm512_mask_fmsubadd_ph): Likewise.\n\t(_mm512_mask3_fmsubadd_ph): Likewise.\n\t(_mm512_maskz_fmsubadd_ph): Likewise.\n\t(_mm512_fmsubadd_round_ph): Likewise.\n\t(_mm512_mask_fmsubadd_round_ph): Likewise.\n\t(_mm512_mask3_fmsubadd_round_ph): Likewise.\n\t(_mm512_maskz_fmsubadd_round_ph): Likewise.\n\t* config/i386/avx512fp16vlintrin.h (_mm256_fmaddsub_ph):\n\tNew intrinsic.\n\t(_mm256_mask_fmaddsub_ph): Likewise.\n\t(_mm256_mask3_fmaddsub_ph): Likewise.\n\t(_mm256_maskz_fmaddsub_ph): Likewise.\n\t(_mm_fmaddsub_ph): Likewise.\n\t(_mm_mask_fmaddsub_ph): Likewise.\n\t(_mm_mask3_fmaddsub_ph): Likewise.\n\t(_mm_maskz_fmaddsub_ph): Likewise.\n\t(_mm256_fmsubadd_ph): Likewise.\n\t(_mm256_mask_fmsubadd_ph): Likewise.\n\t(_mm256_mask3_fmsubadd_ph): Likewise.\n\t(_mm256_maskz_fmsubadd_ph): Likewise.\n\t(_mm_fmsubadd_ph): Likewise.\n\t(_mm_mask_fmsubadd_ph): Likewise.\n\t(_mm_mask3_fmsubadd_ph): Likewise.\n\t(_mm_maskz_fmsubadd_ph): Likewise.\n\t* config/i386/i386-builtin.def: Add corresponding new builtins.\n\t* config/i386/sse.md (VFH_SF_AVX512VL): New mode iterator.\n\t* (<avx512>_fmsubadd_<mode>_maskz<round_expand_name>): New expander.\n\t* (<avx512>_fmaddsub_<mode>_maskz<round_expand_name>): Use\n\tVFH_SF_AVX512VL.\n\t* (<sd_mask_codefor>fma_fmaddsub_<mode><sd_maskz_name><round_name>):\n\tDitto.\n\t* (<avx512>_fmaddsub_<mode>_mask<round_name>): Ditto.\n\t* (<avx512>_fmaddsub_<mode>_mask3<round_name>): Ditto.\n\t* (<sd_mask_codefor>fma_fmsubadd_<mode><sd_maskz_name><round_name>):\n\tDitto.\n\t* (<avx512>_fmsubadd_<mode>_mask<round_name>): Ditto.\n\t* (<avx512>_fmsubadd_<mode>_mask3<round_name>): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx-1.c: Add test for new builtins.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* gcc.target/i386/sse-14.c: Add test for new intrinsics.\n\t* gcc.target/i386/sse-22.c: Ditto.", "tree": {"sha": "890ba23e3503bd1c2b739ffe40bd753eab750bf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/890ba23e3503bd1c2b739ffe40bd753eab750bf7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e6850841fb52252a7e793ac6fd70a8daa1c8860", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e6850841fb52252a7e793ac6fd70a8daa1c8860", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e6850841fb52252a7e793ac6fd70a8daa1c8860", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e6850841fb52252a7e793ac6fd70a8daa1c8860/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7afcb534239014a713e1f234c8734644245e5c38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7afcb534239014a713e1f234c8734644245e5c38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7afcb534239014a713e1f234c8734644245e5c38"}], "stats": {"total": 565, "additions": 524, "deletions": 41}, "files": [{"sha": "16c6b1aceb507b8df8e1fdf2aac145d8f986b676", "filename": "gcc/config/i386/avx512fp16intrin.h", "status": "modified", "additions": 228, "deletions": 0, "changes": 228, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e6850841fb52252a7e793ac6fd70a8daa1c8860/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e6850841fb52252a7e793ac6fd70a8daa1c8860/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h?ref=1e6850841fb52252a7e793ac6fd70a8daa1c8860", "patch": "@@ -5043,6 +5043,234 @@ _mm_maskz_cvt_roundsd_sh (__mmask8 __A, __m128h __B, __m128d __C,\n \n #endif /* __OPTIMIZE__ */\n \n+/* Intrinsics vfmaddsub[132,213,231]ph.  */\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_fmaddsub_ph (__m512h __A, __m512h __B, __m512h __C)\n+{\n+  return (__m512h)\n+    __builtin_ia32_vfmaddsubph512_mask ((__v32hf) __A,\n+\t\t\t\t\t(__v32hf) __B,\n+\t\t\t\t\t(__v32hf) __C,\n+\t\t\t\t\t(__mmask32) -1,\n+\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_fmaddsub_ph (__m512h __A, __mmask32 __U, __m512h __B, __m512h __C)\n+{\n+  return (__m512h)\n+    __builtin_ia32_vfmaddsubph512_mask ((__v32hf) __A,\n+\t\t\t\t\t(__v32hf) __B,\n+\t\t\t\t\t(__v32hf) __C,\n+\t\t\t\t\t(__mmask32) __U,\n+\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask3_fmaddsub_ph (__m512h __A, __m512h __B, __m512h __C, __mmask32 __U)\n+{\n+  return (__m512h)\n+    __builtin_ia32_vfmaddsubph512_mask3 ((__v32hf) __A,\n+\t\t\t\t\t (__v32hf) __B,\n+\t\t\t\t\t (__v32hf) __C,\n+\t\t\t\t\t (__mmask32) __U,\n+\t\t\t\t\t _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_fmaddsub_ph (__mmask32 __U, __m512h __A, __m512h __B, __m512h __C)\n+{\n+  return (__m512h)\n+    __builtin_ia32_vfmaddsubph512_maskz ((__v32hf) __A,\n+\t\t\t\t\t (__v32hf) __B,\n+\t\t\t\t\t (__v32hf) __C,\n+\t\t\t\t\t (__mmask32) __U,\n+\t\t\t\t\t _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_fmaddsub_round_ph (__m512h __A, __m512h __B, __m512h __C, const int __R)\n+{\n+  return (__m512h)\n+    __builtin_ia32_vfmaddsubph512_mask ((__v32hf) __A,\n+\t\t\t\t\t(__v32hf) __B,\n+\t\t\t\t\t(__v32hf) __C,\n+\t\t\t\t\t(__mmask32) -1, __R);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_fmaddsub_round_ph (__m512h __A, __mmask32 __U, __m512h __B,\n+\t\t\t       __m512h __C, const int __R)\n+{\n+  return (__m512h)\n+    __builtin_ia32_vfmaddsubph512_mask ((__v32hf) __A,\n+\t\t\t\t\t(__v32hf) __B,\n+\t\t\t\t\t(__v32hf) __C,\n+\t\t\t\t\t(__mmask32) __U, __R);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask3_fmaddsub_round_ph (__m512h __A, __m512h __B, __m512h __C,\n+\t\t\t\t__mmask32 __U, const int __R)\n+{\n+  return (__m512h)\n+    __builtin_ia32_vfmaddsubph512_mask3 ((__v32hf) __A,\n+\t\t\t\t\t (__v32hf) __B,\n+\t\t\t\t\t (__v32hf) __C,\n+\t\t\t\t\t (__mmask32) __U, __R);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_fmaddsub_round_ph (__mmask32 __U, __m512h __A, __m512h __B,\n+\t\t\t\t__m512h __C, const int __R)\n+{\n+  return (__m512h)\n+    __builtin_ia32_vfmaddsubph512_maskz ((__v32hf) __A,\n+\t\t\t\t\t (__v32hf) __B,\n+\t\t\t\t\t (__v32hf) __C,\n+\t\t\t\t\t (__mmask32) __U, __R);\n+}\n+\n+#else\n+#define _mm512_fmaddsub_round_ph(A, B, C, R)\t\t\t\t\\\n+  ((__m512h)__builtin_ia32_vfmaddsubph512_mask ((A), (B), (C), -1, (R)))\n+\n+#define _mm512_mask_fmaddsub_round_ph(A, U, B, C, R)\t\t\t\\\n+  ((__m512h)__builtin_ia32_vfmaddsubph512_mask ((A), (B), (C), (U), (R)))\n+\n+#define _mm512_mask3_fmaddsub_round_ph(A, B, C, U, R)\t\t\t\\\n+  ((__m512h)__builtin_ia32_vfmaddsubph512_mask3 ((A), (B), (C), (U), (R)))\n+\n+#define _mm512_maskz_fmaddsub_round_ph(U, A, B, C, R)\t\t\t\\\n+  ((__m512h)__builtin_ia32_vfmaddsubph512_maskz ((A), (B), (C), (U), (R)))\n+\n+#endif /* __OPTIMIZE__ */\n+\n+/* Intrinsics vfmsubadd[132,213,231]ph.  */\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+  _mm512_fmsubadd_ph (__m512h __A, __m512h __B, __m512h __C)\n+{\n+  return (__m512h)\n+    __builtin_ia32_vfmsubaddph512_mask ((__v32hf) __A,\n+\t\t\t\t\t(__v32hf) __B,\n+\t\t\t\t\t(__v32hf) __C,\n+\t\t\t\t\t(__mmask32) -1,\n+\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_fmsubadd_ph (__m512h __A, __mmask32 __U,\n+\t\t\t __m512h __B, __m512h __C)\n+{\n+  return (__m512h)\n+    __builtin_ia32_vfmsubaddph512_mask ((__v32hf) __A,\n+\t\t\t\t\t(__v32hf) __B,\n+\t\t\t\t\t(__v32hf) __C,\n+\t\t\t\t\t(__mmask32) __U,\n+\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask3_fmsubadd_ph (__m512h __A, __m512h __B,\n+\t\t\t  __m512h __C, __mmask32 __U)\n+{\n+  return (__m512h)\n+    __builtin_ia32_vfmsubaddph512_mask3 ((__v32hf) __A,\n+\t\t\t\t\t (__v32hf) __B,\n+\t\t\t\t\t (__v32hf) __C,\n+\t\t\t\t\t (__mmask32) __U,\n+\t\t\t\t\t _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_fmsubadd_ph (__mmask32 __U, __m512h __A,\n+\t\t\t  __m512h __B, __m512h __C)\n+{\n+  return (__m512h)\n+    __builtin_ia32_vfmsubaddph512_maskz ((__v32hf) __A,\n+\t\t\t\t\t (__v32hf) __B,\n+\t\t\t\t\t (__v32hf) __C,\n+\t\t\t\t\t (__mmask32) __U,\n+\t\t\t\t\t _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_fmsubadd_round_ph (__m512h __A, __m512h __B,\n+\t\t\t  __m512h __C, const int __R)\n+{\n+  return (__m512h)\n+    __builtin_ia32_vfmsubaddph512_mask ((__v32hf) __A,\n+\t\t\t\t\t(__v32hf) __B,\n+\t\t\t\t\t(__v32hf) __C,\n+\t\t\t\t\t(__mmask32) -1, __R);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_fmsubadd_round_ph (__m512h __A, __mmask32 __U, __m512h __B,\n+\t\t\t       __m512h __C, const int __R)\n+{\n+  return (__m512h)\n+    __builtin_ia32_vfmsubaddph512_mask ((__v32hf) __A,\n+\t\t\t\t\t(__v32hf) __B,\n+\t\t\t\t\t(__v32hf) __C,\n+\t\t\t\t\t(__mmask32) __U, __R);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask3_fmsubadd_round_ph (__m512h __A, __m512h __B, __m512h __C,\n+\t\t\t\t__mmask32 __U, const int __R)\n+{\n+  return (__m512h)\n+    __builtin_ia32_vfmsubaddph512_mask3 ((__v32hf) __A,\n+\t\t\t\t\t (__v32hf) __B,\n+\t\t\t\t\t (__v32hf) __C,\n+\t\t\t\t\t (__mmask32) __U, __R);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_fmsubadd_round_ph (__mmask32 __U, __m512h __A, __m512h __B,\n+\t\t\t\t__m512h __C, const int __R)\n+{\n+  return (__m512h)\n+    __builtin_ia32_vfmsubaddph512_maskz ((__v32hf) __A,\n+\t\t\t\t\t (__v32hf) __B,\n+\t\t\t\t\t (__v32hf) __C,\n+\t\t\t\t\t (__mmask32) __U, __R);\n+}\n+\n+#else\n+#define _mm512_fmsubadd_round_ph(A, B, C, R)\t\t\t\t\\\n+  ((__m512h)__builtin_ia32_vfmsubaddph512_mask ((A), (B), (C), -1, (R)))\n+\n+#define _mm512_mask_fmsubadd_round_ph(A, U, B, C, R)\t\t\t\\\n+  ((__m512h)__builtin_ia32_vfmsubaddph512_mask ((A), (B), (C), (U), (R)))\n+\n+#define _mm512_mask3_fmsubadd_round_ph(A, B, C, U, R)\t\t\t\\\n+  ((__m512h)__builtin_ia32_vfmsubaddph512_mask3 ((A), (B), (C), (U), (R)))\n+\n+#define _mm512_maskz_fmsubadd_round_ph(U, A, B, C, R)\t\t\t\\\n+  ((__m512h)__builtin_ia32_vfmsubaddph512_maskz ((A), (B), (C), (U), (R)))\n+\n+#endif /* __OPTIMIZE__ */\n+\n #ifdef __DISABLE_AVX512FP16__\n #undef __DISABLE_AVX512FP16__\n #pragma GCC pop_options"}, {"sha": "ef097901a695e1adb533d460707e3b7458bd010b", "filename": "gcc/config/i386/avx512fp16vlintrin.h", "status": "modified", "additions": 182, "deletions": 0, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e6850841fb52252a7e793ac6fd70a8daa1c8860/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e6850841fb52252a7e793ac6fd70a8daa1c8860/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h?ref=1e6850841fb52252a7e793ac6fd70a8daa1c8860", "patch": "@@ -2269,6 +2269,188 @@ _mm256_maskz_cvtpd_ph (__mmask8 __A, __m256d __B)\n \t\t\t\t\t   __A);\n }\n \n+/* Intrinsics vfmaddsub[132,213,231]ph.  */\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_fmaddsub_ph (__m256h __A, __m256h __B, __m256h __C)\n+{\n+  return (__m256h)__builtin_ia32_vfmaddsubph256_mask ((__v16hf)__A,\n+\t\t\t\t\t\t      (__v16hf)__B,\n+\t\t\t\t\t\t      (__v16hf)__C,\n+\t\t\t\t\t\t      (__mmask16)-1);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_fmaddsub_ph (__m256h __A, __mmask16 __U, __m256h __B,\n+\t\t\t __m256h __C)\n+{\n+  return (__m256h) __builtin_ia32_vfmaddsubph256_mask ((__v16hf) __A,\n+\t\t\t\t\t\t       (__v16hf) __B,\n+\t\t\t\t\t\t       (__v16hf) __C,\n+\t\t\t\t\t\t       (__mmask16) __U);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask3_fmaddsub_ph (__m256h __A, __m256h __B, __m256h __C,\n+\t\t\t  __mmask16 __U)\n+{\n+  return (__m256h) __builtin_ia32_vfmaddsubph256_mask3 ((__v16hf) __A,\n+\t\t\t\t\t\t\t(__v16hf) __B,\n+\t\t\t\t\t\t\t(__v16hf) __C,\n+\t\t\t\t\t\t\t(__mmask16)\n+\t\t\t\t\t\t\t__U);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_fmaddsub_ph (__mmask16 __U, __m256h __A, __m256h __B,\n+\t\t\t  __m256h __C)\n+{\n+  return (__m256h) __builtin_ia32_vfmaddsubph256_maskz ((__v16hf) __A,\n+\t\t\t\t\t\t\t(__v16hf) __B,\n+\t\t\t\t\t\t\t(__v16hf) __C,\n+\t\t\t\t\t\t\t(__mmask16)\n+\t\t\t\t\t\t\t__U);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fmaddsub_ph (__m128h __A, __m128h __B, __m128h __C)\n+{\n+  return (__m128h)__builtin_ia32_vfmaddsubph128_mask ((__v8hf)__A,\n+\t\t\t\t\t\t      (__v8hf)__B,\n+\t\t\t\t\t\t      (__v8hf)__C,\n+\t\t\t\t\t\t      (__mmask8)-1);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_fmaddsub_ph (__m128h __A, __mmask8 __U, __m128h __B,\n+\t\t      __m128h __C)\n+{\n+  return (__m128h) __builtin_ia32_vfmaddsubph128_mask ((__v8hf) __A,\n+\t\t\t\t\t\t       (__v8hf) __B,\n+\t\t\t\t\t\t       (__v8hf) __C,\n+\t\t\t\t\t\t       (__mmask8) __U);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask3_fmaddsub_ph (__m128h __A, __m128h __B, __m128h __C,\n+\t\t       __mmask8 __U)\n+{\n+  return (__m128h) __builtin_ia32_vfmaddsubph128_mask3 ((__v8hf) __A,\n+\t\t\t\t\t\t\t(__v8hf) __B,\n+\t\t\t\t\t\t\t(__v8hf) __C,\n+\t\t\t\t\t\t\t(__mmask8)\n+\t\t\t\t\t\t\t__U);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_fmaddsub_ph (__mmask8 __U, __m128h __A, __m128h __B,\n+\t\t       __m128h __C)\n+{\n+  return (__m128h) __builtin_ia32_vfmaddsubph128_maskz ((__v8hf) __A,\n+\t\t\t\t\t\t\t(__v8hf) __B,\n+\t\t\t\t\t\t\t(__v8hf) __C,\n+\t\t\t\t\t\t\t(__mmask8)\n+\t\t\t\t\t\t\t__U);\n+}\n+\n+/* Intrinsics vfmsubadd[132,213,231]ph.  */\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_fmsubadd_ph (__m256h __A, __m256h __B, __m256h __C)\n+{\n+  return (__m256h) __builtin_ia32_vfmsubaddph256_mask ((__v16hf) __A,\n+\t\t\t\t\t\t       (__v16hf) __B,\n+\t\t\t\t\t\t       (__v16hf) __C,\n+\t\t\t\t\t\t       (__mmask16) -1);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_fmsubadd_ph (__m256h __A, __mmask16 __U, __m256h __B,\n+\t\t\t __m256h __C)\n+{\n+  return (__m256h) __builtin_ia32_vfmsubaddph256_mask ((__v16hf) __A,\n+\t\t\t\t\t\t       (__v16hf) __B,\n+\t\t\t\t\t\t       (__v16hf) __C,\n+\t\t\t\t\t\t       (__mmask16) __U);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask3_fmsubadd_ph (__m256h __A, __m256h __B, __m256h __C,\n+\t\t\t  __mmask16 __U)\n+{\n+  return (__m256h) __builtin_ia32_vfmsubaddph256_mask3 ((__v16hf) __A,\n+\t\t\t\t\t\t\t(__v16hf) __B,\n+\t\t\t\t\t\t\t(__v16hf) __C,\n+\t\t\t\t\t\t\t(__mmask16)\n+\t\t\t\t\t\t\t__U);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_fmsubadd_ph (__mmask16 __U, __m256h __A, __m256h __B,\n+\t\t\t  __m256h __C)\n+{\n+  return (__m256h) __builtin_ia32_vfmsubaddph256_maskz ((__v16hf) __A,\n+\t\t\t\t\t\t\t(__v16hf) __B,\n+\t\t\t\t\t\t\t(__v16hf) __C,\n+\t\t\t\t\t\t\t(__mmask16)\n+\t\t\t\t\t\t\t__U);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fmsubadd_ph (__m128h __A, __m128h __B, __m128h __C)\n+{\n+  return (__m128h) __builtin_ia32_vfmsubaddph128_mask ((__v8hf) __A,\n+\t\t\t\t\t\t       (__v8hf) __B,\n+\t\t\t\t\t\t       (__v8hf) __C,\n+\t\t\t\t\t\t       (__mmask8) -1);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_fmsubadd_ph (__m128h __A, __mmask8 __U, __m128h __B,\n+\t\t      __m128h __C)\n+{\n+  return (__m128h) __builtin_ia32_vfmsubaddph128_mask ((__v8hf) __A,\n+\t\t\t\t\t\t       (__v8hf) __B,\n+\t\t\t\t\t\t       (__v8hf) __C,\n+\t\t\t\t\t\t       (__mmask8) __U);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask3_fmsubadd_ph (__m128h __A, __m128h __B, __m128h __C,\n+\t\t       __mmask8 __U)\n+{\n+  return (__m128h) __builtin_ia32_vfmsubaddph128_mask3 ((__v8hf) __A,\n+\t\t\t\t\t\t\t(__v8hf) __B,\n+\t\t\t\t\t\t\t(__v8hf) __C,\n+\t\t\t\t\t\t\t(__mmask8)\n+\t\t\t\t\t\t\t__U);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_fmsubadd_ph (__mmask8 __U, __m128h __A, __m128h __B,\n+\t\t       __m128h __C)\n+{\n+  return (__m128h) __builtin_ia32_vfmsubaddph128_maskz ((__v8hf) __A,\n+\t\t\t\t\t\t\t(__v8hf) __B,\n+\t\t\t\t\t\t\t(__v8hf) __C,\n+\t\t\t\t\t\t\t(__mmask8)\n+\t\t\t\t\t\t\t__U);\n+}\n+\n #ifdef __DISABLE_AVX512FP16VL__\n #undef __DISABLE_AVX512FP16VL__\n #pragma GCC pop_options"}, {"sha": "eec614829f25afdc713fdf87dd0016ff51320378", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e6850841fb52252a7e793ac6fd70a8daa1c8860/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e6850841fb52252a7e793ac6fd70a8daa1c8860/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=1e6850841fb52252a7e793ac6fd70a8daa1c8860", "patch": "@@ -2875,6 +2875,18 @@ BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp1\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtps2ph_v8sf_mask, \"__builtin_ia32_vcvtps2phx256_mask\", IX86_BUILTIN_VCVTPS2PHX256_MASK, UNKNOWN, (int) V8HF_FTYPE_V8SF_V8HF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtpd2ph_v2df_mask, \"__builtin_ia32_vcvtpd2ph128_mask\", IX86_BUILTIN_VCVTPD2PH128_MASK, UNKNOWN, (int) V8HF_FTYPE_V2DF_V8HF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtpd2ph_v4df_mask, \"__builtin_ia32_vcvtpd2ph256_mask\", IX86_BUILTIN_VCVTPD2PH256_MASK, UNKNOWN, (int) V8HF_FTYPE_V4DF_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512vl_fmaddsub_v16hf_mask, \"__builtin_ia32_vfmaddsubph256_mask\", IX86_BUILTIN_VFMADDSUBPH256_MASK, UNKNOWN, (int) V16HF_FTYPE_V16HF_V16HF_V16HF_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512vl_fmaddsub_v16hf_mask3, \"__builtin_ia32_vfmaddsubph256_mask3\", IX86_BUILTIN_VFMADDSUBPH256_MASK3, UNKNOWN, (int) V16HF_FTYPE_V16HF_V16HF_V16HF_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512vl_fmaddsub_v16hf_maskz, \"__builtin_ia32_vfmaddsubph256_maskz\", IX86_BUILTIN_VFMADDSUBPH256_MASKZ, UNKNOWN, (int) V16HF_FTYPE_V16HF_V16HF_V16HF_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fmaddsub_v8hf_mask, \"__builtin_ia32_vfmaddsubph128_mask\", IX86_BUILTIN_VFMADDSUBPH128_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fmaddsub_v8hf_mask3, \"__builtin_ia32_vfmaddsubph128_mask3\", IX86_BUILTIN_VFMADDSUBPH128_MASK3, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fmaddsub_v8hf_maskz, \"__builtin_ia32_vfmaddsubph128_maskz\", IX86_BUILTIN_VFMADDSUBPH128_MASKZ, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512vl_fmsubadd_v16hf_mask, \"__builtin_ia32_vfmsubaddph256_mask\", IX86_BUILTIN_VFMSUBADDPH256_MASK, UNKNOWN, (int) V16HF_FTYPE_V16HF_V16HF_V16HF_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512vl_fmsubadd_v16hf_mask3, \"__builtin_ia32_vfmsubaddph256_mask3\", IX86_BUILTIN_VFMSUBADDPH256_MASK3, UNKNOWN, (int) V16HF_FTYPE_V16HF_V16HF_V16HF_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512vl_fmsubadd_v16hf_maskz, \"__builtin_ia32_vfmsubaddph256_maskz\", IX86_BUILTIN_VFMSUBADDPH256_MASKZ, UNKNOWN, (int) V16HF_FTYPE_V16HF_V16HF_V16HF_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fmsubadd_v8hf_mask, \"__builtin_ia32_vfmsubaddph128_mask\", IX86_BUILTIN_VFMSUBADDPH128_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fmsubadd_v8hf_mask3, \"__builtin_ia32_vfmsubaddph128_mask3\", IX86_BUILTIN_VFMSUBADDPH128_MASK3, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fmsubadd_v8hf_maskz, \"__builtin_ia32_vfmsubaddph128_maskz\", IX86_BUILTIN_VFMSUBADDPH128_MASKZ, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n \n /* Builtins with rounding support.  */\n BDESC_END (ARGS, ROUND_ARGS)\n@@ -3140,6 +3152,12 @@ BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtsh2ss_mask_round,\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtsh2sd_mask_round, \"__builtin_ia32_vcvtsh2sd_mask_round\", IX86_BUILTIN_VCVTSH2SD_MASK_ROUND, UNKNOWN, (int) V2DF_FTYPE_V8HF_V2DF_V2DF_UQI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtss2sh_mask_round, \"__builtin_ia32_vcvtss2sh_mask_round\", IX86_BUILTIN_VCVTSS2SH_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V4SF_V8HF_V8HF_UQI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtsd2sh_mask_round, \"__builtin_ia32_vcvtsd2sh_mask_round\", IX86_BUILTIN_VCVTSD2SH_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V2DF_V8HF_V8HF_UQI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_fmaddsub_v32hf_mask_round, \"__builtin_ia32_vfmaddsubph512_mask\", IX86_BUILTIN_VFMADDSUBPH512_MASK, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_USI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_fmaddsub_v32hf_mask3_round, \"__builtin_ia32_vfmaddsubph512_mask3\", IX86_BUILTIN_VFMADDSUBPH512_MASK3, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_USI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_fmaddsub_v32hf_maskz_round, \"__builtin_ia32_vfmaddsubph512_maskz\", IX86_BUILTIN_VFMADDSUBPH512_MASKZ, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_USI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_fmsubadd_v32hf_mask_round, \"__builtin_ia32_vfmsubaddph512_mask\", IX86_BUILTIN_VFMSUBADDPH512_MASK, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_USI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_fmsubadd_v32hf_mask3_round, \"__builtin_ia32_vfmsubaddph512_mask3\", IX86_BUILTIN_VFMSUBADDPH512_MASK3, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_USI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_fmsubadd_v32hf_maskz_round, \"__builtin_ia32_vfmsubaddph512_maskz\", IX86_BUILTIN_VFMSUBADDPH512_MASKZ, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_USI_INT)\n \n BDESC_END (ROUND_ARGS, MULTI_ARG)\n "}, {"sha": "55533557e4f863b2e270b3fe9a6d75c0c0713224", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 62, "deletions": 41, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e6850841fb52252a7e793ac6fd70a8daa1c8860/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e6850841fb52252a7e793ac6fd70a8daa1c8860/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=1e6850841fb52252a7e793ac6fd70a8daa1c8860", "patch": "@@ -4724,6 +4724,13 @@\n   [SF V16SF (V8SF \"TARGET_AVX512VL\") (V4SF \"TARGET_AVX512VL\")\n    DF V8DF (V4DF \"TARGET_AVX512VL\") (V2DF \"TARGET_AVX512VL\")])\n \n+(define_mode_iterator VFH_SF_AVX512VL\n+  [(V32HF \"TARGET_AVX512FP16\")\n+   (V16HF \"TARGET_AVX512FP16 && TARGET_AVX512VL\")\n+   (V8HF \"TARGET_AVX512FP16 && TARGET_AVX512VL\")\n+   SF V16SF (V8SF \"TARGET_AVX512VL\") (V4SF \"TARGET_AVX512VL\")\n+   DF V8DF (V4DF \"TARGET_AVX512VL\") (V2DF \"TARGET_AVX512VL\")])\n+\n (define_insn \"<sd_mask_codefor>fma_fmadd_<mode><sd_maskz_name><round_name>\"\n   [(set (match_operand:VF_SF_AVX512VL 0 \"register_operand\" \"=v,v,v\")\n \t(fma:VF_SF_AVX512VL\n@@ -5145,10 +5152,10 @@\n   \"TARGET_FMA || TARGET_FMA4 || TARGET_AVX512F\")\n \n (define_expand \"<avx512>_fmaddsub_<mode>_maskz<round_expand_name>\"\n-  [(match_operand:VF_AVX512VL 0 \"register_operand\")\n-   (match_operand:VF_AVX512VL 1 \"<round_expand_nimm_predicate>\")\n-   (match_operand:VF_AVX512VL 2 \"<round_expand_nimm_predicate>\")\n-   (match_operand:VF_AVX512VL 3 \"<round_expand_nimm_predicate>\")\n+  [(match_operand:VFH_AVX512VL 0 \"register_operand\")\n+   (match_operand:VFH_AVX512VL 1 \"<round_expand_nimm_predicate>\")\n+   (match_operand:VFH_AVX512VL 2 \"<round_expand_nimm_predicate>\")\n+   (match_operand:VFH_AVX512VL 3 \"<round_expand_nimm_predicate>\")\n    (match_operand:<avx512fmaskmode> 4 \"register_operand\")]\n   \"TARGET_AVX512F\"\n {\n@@ -5158,6 +5165,20 @@\n   DONE;\n })\n \n+(define_expand \"<avx512>_fmsubadd_<mode>_maskz<round_expand_name>\"\n+  [(match_operand:VFH_AVX512VL 0 \"register_operand\")\n+   (match_operand:VFH_AVX512VL 1 \"<round_expand_nimm_predicate>\")\n+   (match_operand:VFH_AVX512VL 2 \"<round_expand_nimm_predicate>\")\n+   (match_operand:VFH_AVX512VL 3 \"<round_expand_nimm_predicate>\")\n+   (match_operand:<avx512fmaskmode> 4 \"register_operand\")]\n+  \"TARGET_AVX512F\"\n+{\n+  emit_insn (gen_fma_fmsubadd_<mode>_maskz_1<round_expand_name> (\n+    operands[0], operands[1], operands[2], operands[3],\n+    CONST0_RTX (<MODE>mode), operands[4]<round_expand_operand>));\n+  DONE;\n+})\n+\n (define_insn \"*fma_fmaddsub_<mode>\"\n   [(set (match_operand:VF_128_256 0 \"register_operand\" \"=v,v,v,x,x\")\n \t(unspec:VF_128_256\n@@ -5177,11 +5198,11 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"<sd_mask_codefor>fma_fmaddsub_<mode><sd_maskz_name><round_name>\"\n-  [(set (match_operand:VF_SF_AVX512VL 0 \"register_operand\" \"=v,v,v\")\n-\t(unspec:VF_SF_AVX512VL\n-\t  [(match_operand:VF_SF_AVX512VL 1 \"<round_nimm_predicate>\" \"%0,0,v\")\n-\t   (match_operand:VF_SF_AVX512VL 2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>\")\n-\t   (match_operand:VF_SF_AVX512VL 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0\")]\n+  [(set (match_operand:VFH_SF_AVX512VL 0 \"register_operand\" \"=v,v,v\")\n+\t(unspec:VFH_SF_AVX512VL\n+\t  [(match_operand:VFH_SF_AVX512VL 1 \"<round_nimm_predicate>\" \"%0,0,v\")\n+\t   (match_operand:VFH_SF_AVX512VL 2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>\")\n+\t   (match_operand:VFH_SF_AVX512VL 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0\")]\n \t  UNSPEC_FMADDSUB))]\n   \"TARGET_AVX512F && <sd_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"@\n@@ -5192,12 +5213,12 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"<avx512>_fmaddsub_<mode>_mask<round_name>\"\n-  [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v,v\")\n-\t(vec_merge:VF_AVX512VL\n-\t  (unspec:VF_AVX512VL\n-\t    [(match_operand:VF_AVX512VL 1 \"register_operand\" \"0,0\")\n-\t     (match_operand:VF_AVX512VL 2 \"<round_nimm_predicate>\" \"<round_constraint>,v\")\n-\t     (match_operand:VF_AVX512VL 3 \"<round_nimm_predicate>\" \"v,<round_constraint>\")]\n+  [(set (match_operand:VFH_AVX512VL 0 \"register_operand\" \"=v,v\")\n+\t(vec_merge:VFH_AVX512VL\n+\t  (unspec:VFH_AVX512VL\n+\t    [(match_operand:VFH_AVX512VL 1 \"register_operand\" \"0,0\")\n+\t     (match_operand:VFH_AVX512VL 2 \"<round_nimm_predicate>\" \"<round_constraint>,v\")\n+\t     (match_operand:VFH_AVX512VL 3 \"<round_nimm_predicate>\" \"v,<round_constraint>\")]\n \t    UNSPEC_FMADDSUB)\n \t  (match_dup 1)\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk,Yk\")))]\n@@ -5209,12 +5230,12 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"<avx512>_fmaddsub_<mode>_mask3<round_name>\"\n-  [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v\")\n-\t(vec_merge:VF_AVX512VL\n-\t  (unspec:VF_AVX512VL\n-\t    [(match_operand:VF_AVX512VL 1 \"register_operand\" \"v\")\n-\t     (match_operand:VF_AVX512VL 2 \"<round_nimm_predicate>\" \"<round_constraint>\")\n-\t     (match_operand:VF_AVX512VL 3 \"register_operand\" \"0\")]\n+  [(set (match_operand:VFH_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VFH_AVX512VL\n+\t  (unspec:VFH_AVX512VL\n+\t    [(match_operand:VFH_AVX512VL 1 \"register_operand\" \"v\")\n+\t     (match_operand:VFH_AVX512VL 2 \"<round_nimm_predicate>\" \"<round_constraint>\")\n+\t     (match_operand:VFH_AVX512VL 3 \"register_operand\" \"0\")]\n \t    UNSPEC_FMADDSUB)\n \t  (match_dup 3)\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")))]\n@@ -5243,12 +5264,12 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"<sd_mask_codefor>fma_fmsubadd_<mode><sd_maskz_name><round_name>\"\n-  [(set (match_operand:VF_SF_AVX512VL 0 \"register_operand\" \"=v,v,v\")\n-\t(unspec:VF_SF_AVX512VL\n-\t  [(match_operand:VF_SF_AVX512VL   1 \"<round_nimm_predicate>\" \"%0,0,v\")\n-\t   (match_operand:VF_SF_AVX512VL   2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>\")\n-\t   (neg:VF_SF_AVX512VL\n-\t     (match_operand:VF_SF_AVX512VL 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0\"))]\n+  [(set (match_operand:VFH_SF_AVX512VL 0 \"register_operand\" \"=v,v,v\")\n+\t(unspec:VFH_SF_AVX512VL\n+\t  [(match_operand:VFH_SF_AVX512VL   1 \"<round_nimm_predicate>\" \"%0,0,v\")\n+\t   (match_operand:VFH_SF_AVX512VL   2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>\")\n+\t   (neg:VFH_SF_AVX512VL\n+\t     (match_operand:VFH_SF_AVX512VL 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0\"))]\n \t  UNSPEC_FMADDSUB))]\n   \"TARGET_AVX512F && <sd_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"@\n@@ -5259,13 +5280,13 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"<avx512>_fmsubadd_<mode>_mask<round_name>\"\n-  [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v,v\")\n-\t(vec_merge:VF_AVX512VL\n-\t  (unspec:VF_AVX512VL\n-\t    [(match_operand:VF_AVX512VL 1 \"register_operand\" \"0,0\")\n-\t     (match_operand:VF_AVX512VL 2 \"<round_nimm_predicate>\" \"<round_constraint>,v\")\n-\t     (neg:VF_AVX512VL\n-\t       (match_operand:VF_AVX512VL 3 \"<round_nimm_predicate>\" \"v,<round_constraint>\"))]\n+  [(set (match_operand:VFH_AVX512VL 0 \"register_operand\" \"=v,v\")\n+\t(vec_merge:VFH_AVX512VL\n+\t  (unspec:VFH_AVX512VL\n+\t    [(match_operand:VFH_AVX512VL 1 \"register_operand\" \"0,0\")\n+\t     (match_operand:VFH_AVX512VL 2 \"<round_nimm_predicate>\" \"<round_constraint>,v\")\n+\t     (neg:VFH_AVX512VL\n+\t       (match_operand:VFH_AVX512VL 3 \"<round_nimm_predicate>\" \"v,<round_constraint>\"))]\n \t    UNSPEC_FMADDSUB)\n \t  (match_dup 1)\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk,Yk\")))]\n@@ -5277,13 +5298,13 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"<avx512>_fmsubadd_<mode>_mask3<round_name>\"\n-  [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v\")\n-\t(vec_merge:VF_AVX512VL\n-\t  (unspec:VF_AVX512VL\n-\t    [(match_operand:VF_AVX512VL 1 \"register_operand\" \"v\")\n-\t     (match_operand:VF_AVX512VL 2 \"<round_nimm_predicate>\" \"<round_constraint>\")\n-\t     (neg:VF_AVX512VL\n-\t       (match_operand:VF_AVX512VL 3 \"register_operand\" \"0\"))]\n+  [(set (match_operand:VFH_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VFH_AVX512VL\n+\t  (unspec:VFH_AVX512VL\n+\t    [(match_operand:VFH_AVX512VL 1 \"register_operand\" \"v\")\n+\t     (match_operand:VFH_AVX512VL 2 \"<round_nimm_predicate>\" \"<round_constraint>\")\n+\t     (neg:VFH_AVX512VL\n+\t       (match_operand:VFH_AVX512VL 3 \"register_operand\" \"0\"))]\n \t    UNSPEC_FMADDSUB)\n \t  (match_dup 3)\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")))]"}, {"sha": "5f474caf565b3a7f1dc49364aa1abfacd545ac06", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e6850841fb52252a7e793ac6fd70a8daa1c8860/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e6850841fb52252a7e793ac6fd70a8daa1c8860/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=1e6850841fb52252a7e793ac6fd70a8daa1c8860", "patch": "@@ -757,6 +757,12 @@\n #define __builtin_ia32_vcvtsh2sd_mask_round(A, B, C, D, E) __builtin_ia32_vcvtsh2sd_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_vcvtss2sh_mask_round(A, B, C, D, E) __builtin_ia32_vcvtss2sh_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_vcvtsd2sh_mask_round(A, B, C, D, E) __builtin_ia32_vcvtsd2sh_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsubph512_mask(A, B, C, D, E) __builtin_ia32_vfmaddsubph512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsubph512_mask3(A, B, C, D, E) __builtin_ia32_vfmaddsubph512_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsubph512_maskz(A, B, C, D, E) __builtin_ia32_vfmaddsubph512_maskz(A, B, C, D, 8)\n+#define __builtin_ia32_vfmsubaddph512_mask(A, B, C, D, E) __builtin_ia32_vfmsubaddph512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfmsubaddph512_mask3(A, B, C, D, E) __builtin_ia32_vfmsubaddph512_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmsubaddph512_maskz(A, B, C, D, E) __builtin_ia32_vfmsubaddph512_maskz(A, B, C, D, 8)\n \n /* avx512fp16vlintrin.h */\n #define __builtin_ia32_cmpph128_mask(A, B, C, D) __builtin_ia32_cmpph128_mask(A, B, 1, D)"}, {"sha": "876fe3c6bb6ea4a98671f959023d8a2cc30aa24a", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e6850841fb52252a7e793ac6fd70a8daa1c8860/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e6850841fb52252a7e793ac6fd70a8daa1c8860/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=1e6850841fb52252a7e793ac6fd70a8daa1c8860", "patch": "@@ -774,6 +774,12 @@\n #define __builtin_ia32_vcvtsh2sd_mask_round(A, B, C, D, E) __builtin_ia32_vcvtsh2sd_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_vcvtss2sh_mask_round(A, B, C, D, E) __builtin_ia32_vcvtss2sh_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_vcvtsd2sh_mask_round(A, B, C, D, E) __builtin_ia32_vcvtsd2sh_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsubph512_mask(A, B, C, D, E) __builtin_ia32_vfmaddsubph512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsubph512_mask3(A, B, C, D, E) __builtin_ia32_vfmaddsubph512_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsubph512_maskz(A, B, C, D, E) __builtin_ia32_vfmaddsubph512_maskz(A, B, C, D, 8)\n+#define __builtin_ia32_vfmsubaddph512_mask(A, B, C, D, E) __builtin_ia32_vfmsubaddph512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfmsubaddph512_mask3(A, B, C, D, E) __builtin_ia32_vfmsubaddph512_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmsubaddph512_maskz(A, B, C, D, E) __builtin_ia32_vfmsubaddph512_maskz(A, B, C, D, 8)\n \n /* avx512fp16vlintrin.h */\n #define __builtin_ia32_cmpph128_mask(A, B, C, D) __builtin_ia32_cmpph128_mask(A, B, 1, D)"}, {"sha": "48895e0dd0ddbcfb098a1449b22ac64646529bda", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e6850841fb52252a7e793ac6fd70a8daa1c8860/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e6850841fb52252a7e793ac6fd70a8daa1c8860/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=1e6850841fb52252a7e793ac6fd70a8daa1c8860", "patch": "@@ -836,6 +836,8 @@ test_3 (_mm_maskz_cvt_roundsh_ss, __m128, __mmask8, __m128, __m128h, 8)\n test_3 (_mm_maskz_cvt_roundsh_sd, __m128d, __mmask8, __m128d, __m128h, 8)\n test_3 (_mm_maskz_cvt_roundss_sh, __m128h, __mmask8, __m128h, __m128, 8)\n test_3 (_mm_maskz_cvt_roundsd_sh, __m128h, __mmask8, __m128h, __m128d, 8)\n+test_3 (_mm512_fmaddsub_round_ph, __m512h, __m512h, __m512h, __m512h, 9)\n+test_3 (_mm512_fmsubadd_round_ph, __m512h, __m512h, __m512h, __m512h, 9)\n test_3x (_mm512_mask_cmp_round_ph_mask, __mmask32, __mmask32, __m512h, __m512h, 1, 8)\n test_3x (_mm_mask_cmp_round_sh_mask, __mmask8, __mmask8, __m128h, __m128h, 1, 8)\n test_3x (_mm512_mask_reduce_round_ph, __m512h, __m512h, __mmask32, __m512h, 123, 8)\n@@ -868,6 +870,12 @@ test_4 (_mm_mask_cvt_roundsh_ss, __m128, __m128, __mmask8, __m128, __m128h, 8)\n test_4 (_mm_mask_cvt_roundsh_sd, __m128d, __m128d, __mmask8, __m128d, __m128h, 8)\n test_4 (_mm_mask_cvt_roundss_sh, __m128h, __m128h, __mmask8, __m128h, __m128, 8)\n test_4 (_mm_mask_cvt_roundsd_sh, __m128h, __m128h, __mmask8, __m128h, __m128d, 8)\n+test_4 (_mm512_mask_fmaddsub_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 9)\n+test_4 (_mm512_mask3_fmaddsub_round_ph, __m512h, __m512h, __m512h, __m512h, __mmask32, 9)\n+test_4 (_mm512_maskz_fmaddsub_round_ph, __m512h, __mmask32, __m512h, __m512h, __m512h, 9)\n+test_4 (_mm512_mask3_fmsubadd_round_ph, __m512h, __m512h, __m512h, __m512h, __mmask32, 9)\n+test_4 (_mm512_mask_fmsubadd_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 9)\n+test_4 (_mm512_maskz_fmsubadd_round_ph, __m512h, __mmask32, __m512h, __m512h, __m512h, 9)\n test_4x (_mm_mask_reduce_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 123, 8)\n test_4x (_mm_mask_roundscale_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 123, 8)\n test_4x (_mm_mask_getmant_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 1, 1)"}, {"sha": "bc530da388be857ee2686508ef54cde156f6b629", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e6850841fb52252a7e793ac6fd70a8daa1c8860/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e6850841fb52252a7e793ac6fd70a8daa1c8860/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=1e6850841fb52252a7e793ac6fd70a8daa1c8860", "patch": "@@ -939,6 +939,8 @@ test_3 (_mm_maskz_cvt_roundsh_ss, __m128, __mmask8, __m128, __m128h, 8)\n test_3 (_mm_maskz_cvt_roundsh_sd, __m128d, __mmask8, __m128d, __m128h, 8)\n test_3 (_mm_maskz_cvt_roundss_sh, __m128h, __mmask8, __m128h, __m128, 8)\n test_3 (_mm_maskz_cvt_roundsd_sh, __m128h, __mmask8, __m128h, __m128d, 8)\n+test_3 (_mm512_fmaddsub_round_ph, __m512h, __m512h, __m512h, __m512h, 9)\n+test_3 (_mm512_fmsubadd_round_ph, __m512h, __m512h, __m512h, __m512h, 9)\n test_3x (_mm512_mask_cmp_round_ph_mask, __mmask32, __mmask32, __m512h, __m512h, 1, 8)\n test_3x (_mm_mask_cmp_round_sh_mask, __mmask8, __mmask8, __m128h, __m128h, 1, 8)\n test_3x (_mm512_mask_reduce_round_ph, __m512h, __m512h, __mmask32, __m512h, 123, 8)\n@@ -970,6 +972,12 @@ test_4 (_mm_mask_cvt_roundsh_ss, __m128, __m128, __mmask8, __m128, __m128h, 8)\n test_4 (_mm_mask_cvt_roundsh_sd, __m128d, __m128d, __mmask8, __m128d, __m128h, 8)\n test_4 (_mm_mask_cvt_roundss_sh, __m128h, __m128h, __mmask8, __m128h, __m128, 8)\n test_4 (_mm_mask_cvt_roundsd_sh, __m128h, __m128h, __mmask8, __m128h, __m128d, 8)\n+test_4 (_mm512_mask_fmaddsub_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 9)\n+test_4 (_mm512_mask3_fmaddsub_round_ph, __m512h, __m512h, __m512h, __m512h, __mmask32, 9)\n+test_4 (_mm512_maskz_fmaddsub_round_ph, __m512h, __mmask32, __m512h, __m512h, __m512h, 9)\n+test_4 (_mm512_mask3_fmsubadd_round_ph, __m512h, __m512h, __m512h, __m512h, __mmask32, 9)\n+test_4 (_mm512_mask_fmsubadd_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 9)\n+test_4 (_mm512_maskz_fmsubadd_round_ph, __m512h, __mmask32, __m512h, __m512h, __m512h, 9)\n test_4x (_mm_mask_reduce_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 123, 8)\n test_4x (_mm_mask_roundscale_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 123, 8)\n test_4x (_mm_mask_getmant_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 1, 1)"}, {"sha": "072e4ea7498f5bb1a0ebdfdff760d355ad390502", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e6850841fb52252a7e793ac6fd70a8daa1c8860/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e6850841fb52252a7e793ac6fd70a8daa1c8860/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=1e6850841fb52252a7e793ac6fd70a8daa1c8860", "patch": "@@ -775,6 +775,12 @@\n #define __builtin_ia32_vcvtsh2sd_mask_round(A, B, C, D, E) __builtin_ia32_vcvtsh2sd_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_vcvtss2sh_mask_round(A, B, C, D, E) __builtin_ia32_vcvtss2sh_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_vcvtsd2sh_mask_round(A, B, C, D, E) __builtin_ia32_vcvtsd2sh_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsubph512_mask(A, B, C, D, E) __builtin_ia32_vfmaddsubph512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsubph512_mask3(A, B, C, D, E) __builtin_ia32_vfmaddsubph512_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsubph512_maskz(A, B, C, D, E) __builtin_ia32_vfmaddsubph512_maskz(A, B, C, D, 8)\n+#define __builtin_ia32_vfmsubaddph512_mask(A, B, C, D, E) __builtin_ia32_vfmsubaddph512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfmsubaddph512_mask3(A, B, C, D, E) __builtin_ia32_vfmsubaddph512_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmsubaddph512_maskz(A, B, C, D, E) __builtin_ia32_vfmsubaddph512_maskz(A, B, C, D, 8)\n \n /* avx512fp16vlintrin.h */\n #define __builtin_ia32_cmpph128_mask(A, B, C, D) __builtin_ia32_cmpph128_mask(A, B, 1, D)"}]}