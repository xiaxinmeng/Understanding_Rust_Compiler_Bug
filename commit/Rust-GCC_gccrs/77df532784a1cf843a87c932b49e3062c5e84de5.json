{"sha": "77df532784a1cf843a87c932b49e3062c5e84de5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdkZjUzMjc4NGExY2Y4NDNhODdjOTMyYjQ5ZTMwNjJjNWU4NGRlNQ==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2015-01-14T21:30:39Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "2015-01-14T21:30:39Z"}, "message": "builtins.c (expand_builtin_atomic_exchange): Remove error when memory model is CONSUME.\n\n\n2015-01-14  Andrew MacLeod  <amacleod@redhat.com>\n\n\t* builtins.c (expand_builtin_atomic_exchange): Remove error when\n\tmemory model is CONSUME.\n\t(expand_builtin_atomic_compare_exchange, expand_builtin_atomic_load,\n\texpand_builtin_atomic_store): Change invalid memory model errors to\n\twarnings.\n\t(expand_builtin_atomic_clear): Change invalid model errors to warnings\n\tand issue warning for CONSUME.\n\t* testsuite/gcc.dg/atomic-invalid.c: Check for invalid memory model\n\twarnings instead of errors.\n\n\n\nM    gcc/ChangeLog\nM    gcc/builtins.c\nM    gcc/testsuite/ChangeLog\nM    gcc/testsuite/gcc.dg/atomic-invalid.c\n\nFrom-SVN: r219615", "tree": {"sha": "139a6cc39626bb130c35f360a73c2e8a39d370cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/139a6cc39626bb130c35f360a73c2e8a39d370cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77df532784a1cf843a87c932b49e3062c5e84de5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77df532784a1cf843a87c932b49e3062c5e84de5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77df532784a1cf843a87c932b49e3062c5e84de5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77df532784a1cf843a87c932b49e3062c5e84de5/comments", "author": null, "committer": null, "parents": [{"sha": "2ead7928a24970eb69b5c9716a46673cde2c783b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ead7928a24970eb69b5c9716a46673cde2c783b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ead7928a24970eb69b5c9716a46673cde2c783b"}], "stats": {"total": 83, "additions": 52, "deletions": 31}, "files": [{"sha": "9c4c83b3638c1fd0f70f1bd9797d56e3a7891f3e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77df532784a1cf843a87c932b49e3062c5e84de5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77df532784a1cf843a87c932b49e3062c5e84de5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=77df532784a1cf843a87c932b49e3062c5e84de5", "patch": "@@ -1,3 +1,13 @@\n+2015-01-14  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* builtins.c (expand_builtin_atomic_exchange): Remove error when\n+\tmemory model is CONSUME.\n+\t(expand_builtin_atomic_compare_exchange, expand_builtin_atomic_load,\n+\texpand_builtin_atomic_store): Change invalid memory model errors to\n+\twarnings.\n+\t(expand_builtin_atomic_clear): Change invalid model errors to warnings\n+\tand issue warning for CONSUME.\n+\n 2015-01-14  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* lto-cgraph: Update function comments for"}, {"sha": "23d183a1c2522a6d7e2e82a3f5506e2cd5c97735", "filename": "gcc/builtins.c", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77df532784a1cf843a87c932b49e3062c5e84de5/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77df532784a1cf843a87c932b49e3062c5e84de5/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=77df532784a1cf843a87c932b49e3062c5e84de5", "patch": "@@ -5385,11 +5385,6 @@ expand_builtin_atomic_exchange (machine_mode mode, tree exp, rtx target)\n   enum memmodel model;\n \n   model = get_memmodel (CALL_EXPR_ARG (exp, 2));\n-  if ((model & MEMMODEL_MASK) == MEMMODEL_CONSUME)\n-    {\n-      error (\"invalid memory model for %<__atomic_exchange%>\");\n-      return NULL_RTX;\n-    }\n \n   if (!flag_inline_atomics)\n     return NULL_RTX;\n@@ -5422,20 +5417,25 @@ expand_builtin_atomic_compare_exchange (machine_mode mode, tree exp,\n   success = get_memmodel (CALL_EXPR_ARG (exp, 4));\n   failure = get_memmodel (CALL_EXPR_ARG (exp, 5));\n \n+  if (failure > success)\n+    {\n+      warning (OPT_Winvalid_memory_model,\n+\t       \"failure memory model cannot be stronger than success memory \"\n+\t       \"model for %<__atomic_compare_exchange%>\");\n+      success = MEMMODEL_SEQ_CST;\n+    }\n+ \n   if ((failure & MEMMODEL_MASK) == MEMMODEL_RELEASE\n       || (failure & MEMMODEL_MASK) == MEMMODEL_ACQ_REL)\n     {\n-      error (\"invalid failure memory model for %<__atomic_compare_exchange%>\");\n-      return NULL_RTX;\n+      warning (OPT_Winvalid_memory_model,\n+\t       \"invalid failure memory model for \"\n+\t       \"%<__atomic_compare_exchange%>\");\n+      failure = MEMMODEL_SEQ_CST;\n+      success = MEMMODEL_SEQ_CST;\n     }\n \n-  if (failure > success)\n-    {\n-      error (\"failure memory model cannot be stronger than success \"\n-\t     \"memory model for %<__atomic_compare_exchange%>\");\n-      return NULL_RTX;\n-    }\n-  \n+ \n   if (!flag_inline_atomics)\n     return NULL_RTX;\n \n@@ -5491,8 +5491,9 @@ expand_builtin_atomic_load (machine_mode mode, tree exp, rtx target)\n   if ((model & MEMMODEL_MASK) == MEMMODEL_RELEASE\n       || (model & MEMMODEL_MASK) == MEMMODEL_ACQ_REL)\n     {\n-      error (\"invalid memory model for %<__atomic_load%>\");\n-      return NULL_RTX;\n+      warning (OPT_Winvalid_memory_model,\n+\t       \"invalid memory model for %<__atomic_load%>\");\n+      model = MEMMODEL_SEQ_CST;\n     }\n \n   if (!flag_inline_atomics)\n@@ -5521,8 +5522,9 @@ expand_builtin_atomic_store (machine_mode mode, tree exp)\n       && (model & MEMMODEL_MASK) != MEMMODEL_SEQ_CST\n       && (model & MEMMODEL_MASK) != MEMMODEL_RELEASE)\n     {\n-      error (\"invalid memory model for %<__atomic_store%>\");\n-      return NULL_RTX;\n+      warning (OPT_Winvalid_memory_model,\n+\t       \"invalid memory model for %<__atomic_store%>\");\n+      model = MEMMODEL_SEQ_CST;\n     }\n \n   if (!flag_inline_atomics)\n@@ -5625,11 +5627,13 @@ expand_builtin_atomic_clear (tree exp)\n   mem = get_builtin_sync_mem (CALL_EXPR_ARG (exp, 0), mode);\n   model = get_memmodel (CALL_EXPR_ARG (exp, 1));\n \n-  if ((model & MEMMODEL_MASK) == MEMMODEL_ACQUIRE\n+  if ((model & MEMMODEL_MASK) == MEMMODEL_CONSUME\n+      || (model & MEMMODEL_MASK) == MEMMODEL_ACQUIRE\n       || (model & MEMMODEL_MASK) == MEMMODEL_ACQ_REL)\n     {\n-      error (\"invalid memory model for %<__atomic_store%>\");\n-      return const0_rtx;\n+      warning (OPT_Winvalid_memory_model,\n+\t       \"invalid memory model for %<__atomic_store%>\");\n+      model = MEMMODEL_SEQ_CST;\n     }\n \n   if (HAVE_atomic_clear)"}, {"sha": "644aa862975387f988d7df4f6ef8d881cf1bed40", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77df532784a1cf843a87c932b49e3062c5e84de5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77df532784a1cf843a87c932b49e3062c5e84de5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=77df532784a1cf843a87c932b49e3062c5e84de5", "patch": "@@ -1,3 +1,9 @@\n+2015-01-14  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/atomic-invalid.c: Check for invalid memory model\n+\twarnings instead of errors.\n+\n+\n 2015-01-14  Ilya Verbin  <ilya.verbin@intel.com>\n \n \t* lib/target-supports.exp (check_effective_target_lto): Check for -flto"}, {"sha": "f2adcdfbfa85bdccd88cd3569a30121a081b0a75", "filename": "gcc/testsuite/gcc.dg/atomic-invalid.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77df532784a1cf843a87c932b49e3062c5e84de5/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-invalid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77df532784a1cf843a87c932b49e3062c5e84de5/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-invalid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-invalid.c?ref=77df532784a1cf843a87c932b49e3062c5e84de5", "patch": "@@ -13,23 +13,24 @@ bool x;\n int\n main ()\n {\n-  __atomic_compare_exchange_n (&i, &e, 1, 0, __ATOMIC_RELAXED, __ATOMIC_SEQ_CST); /* { dg-error \"failure memory model cannot be stronger\" } */\n-  __atomic_compare_exchange_n (&i, &e, 1, 0, __ATOMIC_SEQ_CST, __ATOMIC_RELEASE); /* { dg-error \"invalid failure memory\" } */\n-  __atomic_compare_exchange_n (&i, &e, 1, 1, __ATOMIC_SEQ_CST, __ATOMIC_ACQ_REL); /* { dg-error \"invalid failure memory\" } */\n+  __atomic_compare_exchange_n (&i, &e, 1, 0, __ATOMIC_RELAXED, __ATOMIC_SEQ_CST); /* { dg-warning \"failure memory model cannot be stronger\" } */\n+  __atomic_compare_exchange_n (&i, &e, 1, 0, __ATOMIC_SEQ_CST, __ATOMIC_RELEASE); /* { dg-warning \"invalid failure memory\" } */\n+  __atomic_compare_exchange_n (&i, &e, 1, 1, __ATOMIC_SEQ_CST, __ATOMIC_ACQ_REL); /* { dg-warning \"invalid failure memory\" } */\n \n-  __atomic_load_n (&i, __ATOMIC_RELEASE); /* { dg-error \"invalid memory model\" } */\n-  __atomic_load_n (&i, __ATOMIC_ACQ_REL); /* { dg-error \"invalid memory model\" } */\n+  __atomic_load_n (&i, __ATOMIC_RELEASE); /* { dg-warning \"invalid memory model\" } */\n+  __atomic_load_n (&i, __ATOMIC_ACQ_REL); /* { dg-warning \"invalid memory model\" } */\n \n-  __atomic_store_n (&i, 1, __ATOMIC_ACQUIRE); /* { dg-error \"invalid memory model\" } */\n-  __atomic_store_n (&i, 1, __ATOMIC_CONSUME); /* { dg-error \"invalid memory model\" } */\n-  __atomic_store_n (&i, 1, __ATOMIC_ACQ_REL); /* { dg-error \"invalid memory model\" } */\n+  __atomic_store_n (&i, 1, __ATOMIC_ACQUIRE); /* { dg-warning \"invalid memory model\" } */\n+  __atomic_store_n (&i, 1, __ATOMIC_CONSUME); /* { dg-warning \"invalid memory model\" } */\n+  __atomic_store_n (&i, 1, __ATOMIC_ACQ_REL); /* { dg-warning \"invalid memory model\" } */\n \n   i = __atomic_always_lock_free (s, NULL); /* { dg-error \"non-constant argument\" } */\n \n   __atomic_load_n (&i, 44); /* { dg-warning \"invalid memory model\" } */\n \n-  __atomic_clear (&x, __ATOMIC_ACQUIRE); /* { dg-error \"invalid memory model\" } */\n+  __atomic_clear (&x, __ATOMIC_CONSUME); /* { dg-warning \"invalid memory model\" } */\n+  __atomic_clear (&x, __ATOMIC_ACQUIRE); /* { dg-warning \"invalid memory model\" } */\n \n-  __atomic_clear (&x, __ATOMIC_ACQ_REL); /* { dg-error \"invalid memory model\" } */\n+  __atomic_clear (&x, __ATOMIC_ACQ_REL); /* { dg-warning \"invalid memory model\" } */\n \n }"}]}