{"sha": "ffb632517fc446474baba10ee2ff13a218ec2c7b", "node_id": "C_kwDOANBUbNoAKGZmYjYzMjUxN2ZjNDQ2NDc0YmFiYTEwZWUyZmYxM2EyMThlYzJjN2I", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-12-10T11:44:29Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-12-10T14:05:46Z"}, "message": "libstdc++: Guard mutex and condvar with gthreads macro [PR103638]\n\nA mutex and condition variable is used for timed waits on atomics if\nthere is no \"platform wait\" (e.g. futex) supported. But the use of those\ntypes wasn't guarded by the _GLIBCXX_HAS_GTHREADS macro, causing errors\nfor --disable-threads builds. This fix allows <atomic> to work on\ntargets with futexes but no gthreads.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/103638\n\t* include/bits/atomic_timed_wait.h: Check _GLIBCXX_HAS_GTHREADS\n\tbefore using std::mutex and std::__condvar.", "tree": {"sha": "20272c96a5d891dfd272cbd390c67b4bb4ba3f09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20272c96a5d891dfd272cbd390c67b4bb4ba3f09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffb632517fc446474baba10ee2ff13a218ec2c7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffb632517fc446474baba10ee2ff13a218ec2c7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffb632517fc446474baba10ee2ff13a218ec2c7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffb632517fc446474baba10ee2ff13a218ec2c7b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca1c7065e9de04ceb521a0b409071275c5690341", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca1c7065e9de04ceb521a0b409071275c5690341", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca1c7065e9de04ceb521a0b409071275c5690341"}], "stats": {"total": 4, "additions": 4, "deletions": 0}, "files": [{"sha": "ba83398285c05eea4548a36ce2c83819ccf1674a", "filename": "libstdc++-v3/include/bits/atomic_timed_wait.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb632517fc446474baba10ee2ff13a218ec2c7b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_timed_wait.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb632517fc446474baba10ee2ff13a218ec2c7b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_timed_wait.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_timed_wait.h?ref=ffb632517fc446474baba10ee2ff13a218ec2c7b", "patch": "@@ -137,6 +137,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n // (e.g. __ulock_wait())which is better than pthread_cond_clockwait\n #endif // ! PLATFORM_TIMED_WAIT\n \n+#ifdef _GLIBCXX_HAS_GTHREADS\n     // Returns true if wait ended before timeout.\n     // _Clock must be either steady_clock or system_clock.\n     template<typename _Clock, typename _Dur>\n@@ -192,6 +193,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    return false;\n \t  }\n       }\n+#endif // _GLIBCXX_HAS_GTHREADS\n \n     struct __timed_waiter_pool : __waiter_pool_base\n     {\n@@ -239,6 +241,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tif (_M_deadline <= __now)\n \t  return false;\n \n+\t// FIXME: this_thread::sleep_for not available #ifdef _GLIBCXX_NO_SLEEP\n+\n \tauto __elapsed = __now - _M_t0;\n \tif (__elapsed > 128ms)\n \t  {"}]}