{"sha": "ec97333e0964727112d5304b07980b9e0cdd94d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM5NzMzM2UwOTY0NzI3MTEyZDUzMDRiMDc5ODBiOWUwY2RkOTRkNA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-07-04T02:32:25Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-07-04T02:32:25Z"}, "message": "Install correct hunks\n\nFrom-SVN: r43746", "tree": {"sha": "764b04902c76a690613dc1bf1e3cca54862b9ab8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/764b04902c76a690613dc1bf1e3cca54862b9ab8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec97333e0964727112d5304b07980b9e0cdd94d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec97333e0964727112d5304b07980b9e0cdd94d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec97333e0964727112d5304b07980b9e0cdd94d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec97333e0964727112d5304b07980b9e0cdd94d4/comments", "author": null, "committer": null, "parents": [{"sha": "17ab7c59ba7fbc508855b0b8db98fbad255587f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17ab7c59ba7fbc508855b0b8db98fbad255587f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17ab7c59ba7fbc508855b0b8db98fbad255587f6"}], "stats": {"total": 6, "additions": 2, "deletions": 4}, "files": [{"sha": "1acb834709a82e6ec1aac5adb181d4ae244a57ae", "filename": "gcc/explow.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec97333e0964727112d5304b07980b9e0cdd94d4/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec97333e0964727112d5304b07980b9e0cdd94d4/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=ec97333e0964727112d5304b07980b9e0cdd94d4", "patch": "@@ -610,12 +610,10 @@ validize_mem (ref)\n {\n   if (GET_CODE (ref) != MEM)\n     return ref;\n-  if (! (flag_force_addr && CONSTANT_ADDRESS_P (XEXP (ref, 0)))\n-      || memory_address_p (GET_MODE (ref), XEXP (ref, 0)))\n+  if (memory_address_p (GET_MODE (ref), XEXP (ref, 0)))\n     return ref;\n-\n   /* Don't alter REF itself, since that is probably a stack slot.  */\n-  return replace_equiv_address (ref, XEXP (ref, 0));\n+  return change_address (ref, GET_MODE (ref), XEXP (ref, 0));\n }\n \f\n /* Given REF, either a MEM or a REG, and T, either the type of X or"}]}