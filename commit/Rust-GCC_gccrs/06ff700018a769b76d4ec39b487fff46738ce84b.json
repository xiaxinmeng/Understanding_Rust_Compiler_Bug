{"sha": "06ff700018a769b76d4ec39b487fff46738ce84b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZmZjcwMDAxOGE3NjliNzZkNGVjMzliNDg3ZmZmNDY3MzhjZTg0Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-02-12T11:59:00Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-02-12T11:59:00Z"}, "message": "re PR ipa/69241 (ICE with noreturn and function that return non-POD)\n\n\tPR ipa/69241\n\t* ipa-split.c (split_function): If split part returns TREE_ADDRESSABLE\n\ttype by reference, force lhs on the call.\n\n\t* g++.dg/ipa/pr69241-4.C: New test.\n\nFrom-SVN: r233375", "tree": {"sha": "0247bb31639a9cd236d1d18a2093f70a95038354", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0247bb31639a9cd236d1d18a2093f70a95038354"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06ff700018a769b76d4ec39b487fff46738ce84b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06ff700018a769b76d4ec39b487fff46738ce84b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06ff700018a769b76d4ec39b487fff46738ce84b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06ff700018a769b76d4ec39b487fff46738ce84b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b69539cbf58a1d0c918759dc12cf384922661753", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b69539cbf58a1d0c918759dc12cf384922661753", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b69539cbf58a1d0c918759dc12cf384922661753"}], "stats": {"total": 75, "additions": 74, "deletions": 1}, "files": [{"sha": "642f7d3a80e12c721e6d87f541e8e9a105f72b10", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06ff700018a769b76d4ec39b487fff46738ce84b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06ff700018a769b76d4ec39b487fff46738ce84b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=06ff700018a769b76d4ec39b487fff46738ce84b", "patch": "@@ -1,5 +1,9 @@\n 2016-02-12  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR ipa/69241\n+\t* ipa-split.c (split_function): If split part returns TREE_ADDRESSABLE\n+\ttype by reference, force lhs on the call.\n+\n \tPR ipa/68672\n \t* ipa-split.c (split_function): Don't compute/use main_part_return_p.\n \tCompute retval and retbnd early in all cases if split_part_return_p"}, {"sha": "ac8b4787b100394845772fa0211078a1add3aeb9", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06ff700018a769b76d4ec39b487fff46738ce84b/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06ff700018a769b76d4ec39b487fff46738ce84b/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=06ff700018a769b76d4ec39b487fff46738ce84b", "patch": "@@ -629,7 +629,18 @@ consider_split (struct split_point *current, bitmap non_ssa_vars,\n        4) For non-SSA we need to look where the var is computed. */\n   retval = find_retval (return_bb);\n   if (!retval)\n-    current->split_part_set_retval = true;\n+    {\n+      /* If there is a return_bb with no return value in function returning\n+\t value by reference, also make the split part return void, otherwise\n+\t we expansion would try to create a non-POD temporary, which is\n+\t invalid.  */\n+      if (return_bb != EXIT_BLOCK_PTR_FOR_FN (cfun)\n+\t  && DECL_RESULT (current_function_decl)\n+\t  && DECL_BY_REFERENCE (DECL_RESULT (current_function_decl)))\n+\tcurrent->split_part_set_retval = false;\n+      else\n+\tcurrent->split_part_set_retval = true;\n+    }\n   else if (is_gimple_min_invariant (retval))\n     current->split_part_set_retval = false;\n   /* Special case is value returned by reference we record as if it was non-ssa"}, {"sha": "33d2f2227ba5a3344b8ea28f091867e9ee8928cc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06ff700018a769b76d4ec39b487fff46738ce84b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06ff700018a769b76d4ec39b487fff46738ce84b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=06ff700018a769b76d4ec39b487fff46738ce84b", "patch": "@@ -1,5 +1,8 @@\n 2016-02-12  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR ipa/69241\n+\t* g++.dg/ipa/pr69241-4.C: New test.\n+\n \tPR ipa/68672\n \t* g++.dg/ipa/pr68672-1.C: New test.\n \t* g++.dg/ipa/pr68672-2.C: New test."}, {"sha": "2805b0cd67541d1b4407209f03267af7d03b9c71", "filename": "gcc/testsuite/g++.dg/ipa/pr69241-4.C", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06ff700018a769b76d4ec39b487fff46738ce84b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr69241-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06ff700018a769b76d4ec39b487fff46738ce84b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr69241-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr69241-4.C?ref=06ff700018a769b76d4ec39b487fff46738ce84b", "patch": "@@ -0,0 +1,55 @@\n+// PR ipa/69241\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-O2 -Wno-return-type\" }\n+\n+template <typename> class A;\n+struct B {\n+  using pointer = int *;\n+};\n+template <typename _CharT, typename = A<_CharT>> class basic_string {\n+  long _M_string_length;\n+  enum { _S_local_capacity = 15 } _M_local_buf[_S_local_capacity];\n+  B::pointer _M_local_data;\n+\n+public:\n+  ~basic_string();\n+};\n+template <typename _CharT, typename _Traits, typename _Alloc>\n+int operator<<(_Traits, basic_string<_CharT, _Alloc>);\n+class C {\n+  basic_string<A<char>> _M_string;\n+};\n+class D {\n+  C _M_stringbuf;\n+};\n+class F {\n+  int stream;\n+  D stream_;\n+};\n+class G {\n+public:\n+  void operator&(int);\n+};\n+class H {\n+public:\n+  H(unsigned);\n+  H(H &&);\n+  bool m_fn1();\n+};\n+class I {\n+  void m_fn2(const int &&);\n+  static H m_fn3(const int &);\n+};\n+template <typename Functor> void Bind(Functor);\n+class J {\n+public:\n+  static basic_string<char> m_fn4();\n+};\n+int a;\n+void I::m_fn2(const int &&) { Bind(m_fn3); }\n+H I::m_fn3(const int &) {\n+  !false ? (void)0 : G() & F() << J::m_fn4();\n+  H b(a);\n+  if (b.m_fn1())\n+    F();\n+}"}]}