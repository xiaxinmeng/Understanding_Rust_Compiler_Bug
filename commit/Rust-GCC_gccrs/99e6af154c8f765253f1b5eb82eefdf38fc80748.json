{"sha": "99e6af154c8f765253f1b5eb82eefdf38fc80748", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTllNmFmMTU0YzhmNzY1MjUzZjFiNWViODJlZWZkZjM4ZmM4MDc0OA==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2013-11-20T12:12:02Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2013-11-20T12:12:02Z"}, "message": "[AArch64] Remove \"mode\", \"mode2\" attributes\n\ngcc/\n\t* config/aarch64/aarch64.md: Remove \"mode\" and \"mode2\" attributes\n\tfrom all insns.\n\nFrom-SVN: r205105", "tree": {"sha": "95b8b4dff45aaad1274a61628a04b4ddfa4900f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95b8b4dff45aaad1274a61628a04b4ddfa4900f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99e6af154c8f765253f1b5eb82eefdf38fc80748", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99e6af154c8f765253f1b5eb82eefdf38fc80748", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99e6af154c8f765253f1b5eb82eefdf38fc80748", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99e6af154c8f765253f1b5eb82eefdf38fc80748/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "324cf3e44fb375d019d4aaa116efed568a883976", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/324cf3e44fb375d019d4aaa116efed568a883976", "html_url": "https://github.com/Rust-GCC/gccrs/commit/324cf3e44fb375d019d4aaa116efed568a883976"}], "stats": {"total": 598, "additions": 206, "deletions": 392}, "files": [{"sha": "039274ab38ec6d1511306d3ad3f4e66f2c76c5d0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e6af154c8f765253f1b5eb82eefdf38fc80748/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e6af154c8f765253f1b5eb82eefdf38fc80748/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=99e6af154c8f765253f1b5eb82eefdf38fc80748", "patch": "@@ -1,3 +1,8 @@\n+2013-11-20  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/aarch64.md: Remove \"mode\" and \"mode2\" attributes\n+\tfrom all insns.\n+\n 2013-11-20  Yuri Rumyantsev  <ysrumyan@gmail.com>\n \n \tPR target/57756"}, {"sha": "8b3dbd7550e8e9037de1a1384276bee28d21cb3d", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 201, "deletions": 392, "changes": 593, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e6af154c8f765253f1b5eb82eefdf38fc80748/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e6af154c8f765253f1b5eb82eefdf38fc80748/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=99e6af154c8f765253f1b5eb82eefdf38fc80748", "patch": "@@ -117,14 +117,6 @@\n ;; Instruction types and attributes\n ;; -------------------------------------------------------------------\n \n-;; Main data types used by the insntructions\n-\n-(define_attr \"mode\" \"unknown,none,QI,HI,SI,DI,TI,SF,DF,TF\"\n-  (const_string \"unknown\"))\n-\n-(define_attr \"mode2\" \"unknown,none,QI,HI,SI,DI,TI,SF,DF,TF\"\n-  (const_string \"unknown\"))\n-\n ; The \"type\" attribute is is included here from AArch32 backend to be able\n ; to share pipeline descriptions.\n (include \"../arm/types.md\")\n@@ -378,7 +370,6 @@\n   return \\\"<tbz>\\\\t%<w>0, %1, %l2\\\";\n   \"\n   [(set_attr \"type\" \"branch\")\n-   (set_attr \"mode\" \"<MODE>\")\n    (set (attr \"length\")\n \t(if_then_else (and (ge (minus (match_dup 2) (pc)) (const_int -32768))\n \t\t\t   (lt (minus (match_dup 2) (pc)) (const_int 32764)))\n@@ -399,7 +390,6 @@\n   return \\\"<tbz>\\\\t%<w>0, <sizem1>, %l1\\\";\n   \"\n   [(set_attr \"type\" \"branch\")\n-   (set_attr \"mode\" \"<MODE>\")\n    (set (attr \"length\")\n \t(if_then_else (and (ge (minus (match_dup 1) (pc)) (const_int -32768))\n \t\t\t   (lt (minus (match_dup 1) (pc)) (const_int 32764)))\n@@ -630,8 +620,7 @@\n }\n   [(set_attr \"type\" \"mov_reg,mov_imm,mov_imm,load1,load1,store1,store1,\\\n                      neon_from_gp<q>,neon_from_gp<q>, neon_dup\")\n-   (set_attr \"simd\" \"*,*,yes,*,*,*,*,yes,yes,yes\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+   (set_attr \"simd\" \"*,*,yes,*,*,*,*,yes,yes,yes\")]\n )\n \n (define_expand \"mov<mode>\"\n@@ -671,7 +660,6 @@\n    fmov\\\\t%s0, %s1\"\n   [(set_attr \"type\" \"mov_reg,mov_reg,mov_reg,mov_imm,load1,load1,store1,store1,\\\n                      adr,adr,fmov,fmov,fmov\")\n-   (set_attr \"mode\" \"SI\")\n    (set_attr \"fp\" \"*,*,*,*,*,yes,*,yes,*,*,yes,yes,yes\")]\n )\n \n@@ -697,7 +685,6 @@\n    movi\\\\t%d0, %1\"\n   [(set_attr \"type\" \"mov_reg,mov_reg,mov_reg,mov_imm,load1,load1,store1,store1,\\\n                      adr,adr,fmov,fmov,fmov,fmov\")\n-   (set_attr \"mode\" \"DI\")\n    (set_attr \"fp\" \"*,*,*,*,*,yes,*,yes,*,*,yes,yes,yes,*\")\n    (set_attr \"simd\" \"*,*,*,*,*,*,*,*,*,*,*,*,*,yes\")]\n )\n@@ -710,8 +697,7 @@\n   \"UINTVAL (operands[1]) < GET_MODE_BITSIZE (<MODE>mode)\n    && UINTVAL (operands[1]) % 16 == 0\"\n   \"movk\\\\t%<w>0, %X2, lsl %1\"\n-  [(set_attr \"type\" \"mov_imm\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"mov_imm\")]\n )\n \n (define_expand \"movti\"\n@@ -743,7 +729,6 @@\n    str\\\\t%q1, %0\"\n   [(set_attr \"type\" \"multiple,f_mcr,f_mrc,neon_logic_q, \\\n \t\t             load2,store2,store2,f_loadd,f_stored\")\n-   (set_attr \"mode\" \"DI,DI,DI,TI,DI,DI,DI,TI,TI\")\n    (set_attr \"length\" \"8,8,8,4,4,4,4,4,4\")\n    (set_attr \"simd\" \"*,*,*,yes,*,*,*,*,*\")\n    (set_attr \"fp\" \"*,*,*,*,*,*,*,yes,yes\")]\n@@ -794,8 +779,7 @@\n    str\\\\t%w1, %0\n    mov\\\\t%w0, %w1\"\n   [(set_attr \"type\" \"f_mcr,f_mrc,fmov,fconsts,\\\n-                     f_loads,f_stores,f_loads,f_stores,fmov\")\n-   (set_attr \"mode\" \"SF\")]\n+                     f_loads,f_stores,f_loads,f_stores,fmov\")]\n )\n \n (define_insn \"*movdf_aarch64\"\n@@ -814,8 +798,7 @@\n    str\\\\t%x1, %0\n    mov\\\\t%x0, %x1\"\n   [(set_attr \"type\" \"f_mcr,f_mrc,fmov,fconstd,\\\n-                     f_loadd,f_stored,f_loadd,f_stored,mov_reg\")\n-   (set_attr \"mode\" \"DF\")]\n+                     f_loadd,f_stored,f_loadd,f_stored,mov_reg\")]\n )\n \n (define_expand \"movtf\"\n@@ -854,7 +837,6 @@\n    stp\\\\t%1, %H1, %0\"\n   [(set_attr \"type\" \"logic_reg,multiple,f_mcr,f_mrc,fconstd,fconstd,\\\n                      f_loadd,f_stored,neon_load1_2reg,neon_store1_2reg\")\n-   (set_attr \"mode\" \"DF,DF,DF,DF,DF,DF,TF,TF,DF,DF\")\n    (set_attr \"length\" \"4,8,8,8,4,4,4,4,4,4\")\n    (set_attr \"fp\" \"*,*,yes,yes,*,yes,yes,yes,*,*\")\n    (set_attr \"simd\" \"yes,*,*,*,yes,*,*,*,*,*\")]\n@@ -883,8 +865,7 @@\n \t\t\t       XEXP (operands[1], 0),\n \t\t\t       GET_MODE_SIZE (<MODE>mode)))\"\n   \"ldp\\\\t%<w>0, %<w>2, %1\"\n-  [(set_attr \"type\" \"load2\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"load2\")]\n )\n \n ;; Operands 0 and 2 are tied together by the final condition; so we allow\n@@ -899,8 +880,7 @@\n \t\t\t       XEXP (operands[0], 0),\n \t\t\t       GET_MODE_SIZE (<MODE>mode)))\"\n   \"stp\\\\t%<w>1, %<w>3, %0\"\n-  [(set_attr \"type\" \"store2\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"store2\")]\n )\n \n ;; Operands 1 and 3 are tied together by the final condition; so we allow\n@@ -915,8 +895,7 @@\n \t\t\t       XEXP (operands[1], 0),\n \t\t\t       GET_MODE_SIZE (<MODE>mode)))\"\n   \"ldp\\\\t%<w>0, %<w>2, %1\"\n-  [(set_attr \"type\" \"neon_load1_2reg<q>\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"neon_load1_2reg<q>\")]\n )\n \n ;; Operands 0 and 2 are tied together by the final condition; so we allow\n@@ -931,8 +910,7 @@\n \t\t\t       XEXP (operands[0], 0),\n \t\t\t       GET_MODE_SIZE (<MODE>mode)))\"\n   \"stp\\\\t%<w>1, %<w>3, %0\"\n-  [(set_attr \"type\" \"neon_store1_2reg<q>\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"neon_store1_2reg<q>\")]\n )\n \n ;; Load pair with writeback.  This is primarily used in function epilogues\n@@ -950,8 +928,7 @@\n                    (match_operand:P 5 \"const_int_operand\" \"n\"))))])]\n   \"INTVAL (operands[5]) == INTVAL (operands[4]) + GET_MODE_SIZE (<GPI:MODE>mode)\"\n   \"ldp\\\\t%<w>2, %<w>3, [%1], %4\"\n-  [(set_attr \"type\" \"load2\")\n-   (set_attr \"mode\" \"<GPI:MODE>\")]\n+  [(set_attr \"type\" \"load2\")]\n )\n \n ;; Store pair with writeback.  This is primarily used in function prologues\n@@ -969,8 +946,7 @@\n           (match_operand:GPI 3 \"register_operand\" \"r\"))])]\n   \"INTVAL (operands[5]) == INTVAL (operands[4]) + GET_MODE_SIZE (<GPI:MODE>mode)\"\n   \"stp\\\\t%<w>2, %<w>3, [%0, %4]!\"\n-  [(set_attr \"type\" \"store2\")\n-   (set_attr \"mode\" \"<GPI:MODE>\")]\n+  [(set_attr \"type\" \"store2\")]\n )\n \n ;; -------------------------------------------------------------------\n@@ -990,8 +966,7 @@\n   \"@\n    sxtw\\t%0, %w1\n    ldrsw\\t%0, %1\"\n-  [(set_attr \"type\" \"extend,load1\")\n-   (set_attr \"mode\" \"DI\")]\n+  [(set_attr \"type\" \"extend,load1\")]\n )\n \n (define_insn \"*zero_extendsidi2_aarch64\"\n@@ -1001,8 +976,7 @@\n   \"@\n    uxtw\\t%0, %w1\n    ldr\\t%w0, %1\"\n-  [(set_attr \"type\" \"extend,load1\")\n-   (set_attr \"mode\" \"DI\")]\n+  [(set_attr \"type\" \"extend,load1\")]\n )\n \n (define_expand \"<ANY_EXTEND:optab><SHORT:mode><GPI:mode>2\"\n@@ -1018,8 +992,7 @@\n   \"@\n    sxt<SHORT:size>\\t%<GPI:w>0, %w1\n    ldrs<SHORT:size>\\t%<GPI:w>0, %1\"\n-  [(set_attr \"type\" \"extend,load1\")\n-   (set_attr \"mode\" \"<GPI:MODE>\")]\n+  [(set_attr \"type\" \"extend,load1\")]\n )\n \n (define_insn \"*zero_extend<SHORT:mode><GPI:mode>2_aarch64\"\n@@ -1030,8 +1003,7 @@\n    uxt<SHORT:size>\\t%<GPI:w>0, %w1\n    ldr<SHORT:size>\\t%w0, %1\n    ldr\\t%<SHORT:size>0, %1\"\n-  [(set_attr \"type\" \"extend,load1,load1\")\n-   (set_attr \"mode\" \"<GPI:MODE>\")]\n+  [(set_attr \"type\" \"extend,load1,load1\")]\n )\n \n (define_expand \"<optab>qihi2\"\n@@ -1047,8 +1019,7 @@\n   \"@\n    <su>xtb\\t%w0, %w1\n    <ldrxt>b\\t%w0, %1\"\n-  [(set_attr \"type\" \"extend,load1\")\n-   (set_attr \"mode\" \"HI\")]\n+  [(set_attr \"type\" \"extend,load1\")]\n )\n \n ;; -------------------------------------------------------------------\n@@ -1091,8 +1062,7 @@\n   add\\\\t%w0, %w1, %2\n   add\\\\t%w0, %w1, %w2\n   sub\\\\t%w0, %w1, #%n2\"\n-  [(set_attr \"type\" \"alu_imm,alu_reg,alu_imm\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"alu_imm,alu_reg,alu_imm\")]\n )\n \n ;; zero_extend version of above\n@@ -1107,8 +1077,7 @@\n   add\\\\t%w0, %w1, %2\n   add\\\\t%w0, %w1, %w2\n   sub\\\\t%w0, %w1, #%n2\"\n-  [(set_attr \"type\" \"alu_imm,alu_reg,alu_imm\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"alu_imm,alu_reg,alu_imm\")]\n )\n \n (define_insn \"*adddi3_aarch64\"\n@@ -1124,7 +1093,6 @@\n   sub\\\\t%x0, %x1, #%n2\n   add\\\\t%d0, %d1, %d2\"\n   [(set_attr \"type\" \"alu_imm,alu_reg,alu_imm,alu_reg\")\n-   (set_attr \"mode\" \"DI\")\n    (set_attr \"simd\" \"*,*,*,yes\")]\n )\n \n@@ -1141,8 +1109,7 @@\n   adds\\\\t%<w>0, %<w>1, %<w>2\n   adds\\\\t%<w>0, %<w>1, %<w>2\n   subs\\\\t%<w>0, %<w>1, #%n2\"\n-  [(set_attr \"type\" \"alus_reg,alus_imm,alus_imm\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"alus_reg,alus_imm,alus_imm\")]\n )\n \n ;; zero_extend version of above\n@@ -1159,8 +1126,7 @@\n   adds\\\\t%w0, %w1, %w2\n   adds\\\\t%w0, %w1, %w2\n   subs\\\\t%w0, %w1, #%n2\"\n-  [(set_attr \"type\" \"alus_reg,alus_imm,alus_imm\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"alus_reg,alus_imm,alus_imm\")]\n )\n \n (define_insn \"*adds_mul_imm_<mode>\"\n@@ -1176,8 +1142,7 @@\n \t\t  (match_dup 3)))]\n   \"\"\n   \"adds\\\\t%<w>0, %<w>3, %<w>1, lsl %p2\"\n-  [(set_attr \"type\" \"alus_shift_imm\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"alus_shift_imm\")]\n )\n \n (define_insn \"*subs_mul_imm_<mode>\"\n@@ -1193,8 +1158,7 @@\n \t\t   (mult:GPI (match_dup 2) (match_dup 3))))]\n   \"\"\n   \"subs\\\\t%<w>0, %<w>1, %<w>2, lsl %p3\"\n-  [(set_attr \"type\" \"alus_shift_imm\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"alus_shift_imm\")]\n )\n \n (define_insn \"*adds_<optab><ALLX:mode>_<GPI:mode>\"\n@@ -1208,8 +1172,7 @@\n \t(plus:GPI (ANY_EXTEND:GPI (match_dup 1)) (match_dup 2)))]\n   \"\"\n   \"adds\\\\t%<GPI:w>0, %<GPI:w>2, %<GPI:w>1, <su>xt<ALLX:size>\"\n-  [(set_attr \"type\" \"alus_ext\")\n-   (set_attr \"mode\" \"<GPI:MODE>\")]\n+  [(set_attr \"type\" \"alus_ext\")]\n )\n \n (define_insn \"*subs_<optab><ALLX:mode>_<GPI:mode>\"\n@@ -1223,8 +1186,7 @@\n \t(minus:GPI (match_dup 1) (ANY_EXTEND:GPI (match_dup 2))))]\n   \"\"\n   \"subs\\\\t%<GPI:w>0, %<GPI:w>1, %<GPI:w>2, <su>xt<ALLX:size>\"\n-  [(set_attr \"type\" \"alus_ext\")\n-   (set_attr \"mode\" \"<GPI:MODE>\")]\n+  [(set_attr \"type\" \"alus_ext\")]\n )\n \n (define_insn \"*adds_<optab><mode>_multp2\"\n@@ -1244,8 +1206,7 @@\n \t\t  (match_dup 4)))]\n   \"aarch64_is_extend_from_extract (<MODE>mode, operands[2], operands[3])\"\n   \"adds\\\\t%<w>0, %<w>4, %<w>1, <su>xt%e3 %p2\"\n-  [(set_attr \"type\" \"alus_ext\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"alus_ext\")]\n )\n \n (define_insn \"*subs_<optab><mode>_multp2\"\n@@ -1265,8 +1226,7 @@\n \t\t\t\t  (const_int 0))))]\n   \"aarch64_is_extend_from_extract (<MODE>mode, operands[2], operands[3])\"\n   \"subs\\\\t%<w>0, %<w>4, %<w>1, <su>xt%e3 %p2\"\n-  [(set_attr \"type\" \"alus_ext\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"alus_ext\")]\n )\n \n (define_insn \"*add<mode>3nr_compare0\"\n@@ -1280,8 +1240,7 @@\n   cmn\\\\t%<w>0, %<w>1\n   cmn\\\\t%<w>0, %<w>1\n   cmp\\\\t%<w>0, #%n1\"\n-  [(set_attr \"type\" \"alus_reg,alus_imm,alus_imm\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"alus_reg,alus_imm,alus_imm\")]\n )\n \n (define_insn \"*compare_neg<mode>\"\n@@ -1291,8 +1250,7 @@\n \t (match_operand:GPI 1 \"register_operand\" \"r\")))]\n   \"\"\n   \"cmn\\\\t%<w>1, %<w>0\"\n-  [(set_attr \"type\" \"alus_reg\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"alus_reg\")]\n )\n \n (define_insn \"*add_<shift>_<mode>\"\n@@ -1302,8 +1260,7 @@\n \t\t  (match_operand:GPI 3 \"register_operand\" \"r\")))]\n   \"\"\n   \"add\\\\t%<w>0, %<w>3, %<w>1, <shift> %2\"\n-  [(set_attr \"type\" \"alu_shift_imm\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"alu_shift_imm\")]\n )\n \n ;; zero_extend version of above\n@@ -1315,8 +1272,7 @@\n \t\t  (match_operand:SI 3 \"register_operand\" \"r\"))))]\n   \"\"\n   \"add\\\\t%w0, %w3, %w1, <shift> %2\"\n-  [(set_attr \"type\" \"alu_shift_imm\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"alu_shift_imm\")]\n )\n \n (define_insn \"*add_mul_imm_<mode>\"\n@@ -1326,8 +1282,7 @@\n \t\t  (match_operand:GPI 3 \"register_operand\" \"r\")))]\n   \"\"\n   \"add\\\\t%<w>0, %<w>3, %<w>1, lsl %p2\"\n-  [(set_attr \"type\" \"alu_shift_imm\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"alu_shift_imm\")]\n )\n \n (define_insn \"*add_<optab><ALLX:mode>_<GPI:mode>\"\n@@ -1336,8 +1291,7 @@\n \t\t  (match_operand:GPI 2 \"register_operand\" \"r\")))]\n   \"\"\n   \"add\\\\t%<GPI:w>0, %<GPI:w>2, %<GPI:w>1, <su>xt<ALLX:size>\"\n-  [(set_attr \"type\" \"alu_ext\")\n-   (set_attr \"mode\" \"<GPI:MODE>\")]\n+  [(set_attr \"type\" \"alu_ext\")]\n )\n \n ;; zero_extend version of above\n@@ -1348,8 +1302,7 @@\n \t\t  (match_operand:GPI 2 \"register_operand\" \"r\"))))]\n   \"\"\n   \"add\\\\t%w0, %w2, %w1, <su>xt<SHORT:size>\"\n-  [(set_attr \"type\" \"alu_ext\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"alu_ext\")]\n )\n \n (define_insn \"*add_<optab><ALLX:mode>_shft_<GPI:mode>\"\n@@ -1360,8 +1313,7 @@\n \t\t  (match_operand:GPI 3 \"register_operand\" \"r\")))]\n   \"\"\n   \"add\\\\t%<GPI:w>0, %<GPI:w>3, %<GPI:w>1, <su>xt<ALLX:size> %2\"\n-  [(set_attr \"type\" \"alu_ext\")\n-   (set_attr \"mode\" \"<GPI:MODE>\")]\n+  [(set_attr \"type\" \"alu_ext\")]\n )\n \n ;; zero_extend version of above\n@@ -1374,8 +1326,7 @@\n \t\t  (match_operand:SI 3 \"register_operand\" \"r\"))))]\n   \"\"\n   \"add\\\\t%w0, %w3, %w1, <su>xt<SHORT:size> %2\"\n-  [(set_attr \"type\" \"alu_ext\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"alu_ext\")]\n )\n \n (define_insn \"*add_<optab><ALLX:mode>_mult_<GPI:mode>\"\n@@ -1386,8 +1337,7 @@\n \t\t  (match_operand:GPI 3 \"register_operand\" \"r\")))]\n   \"\"\n   \"add\\\\t%<GPI:w>0, %<GPI:w>3, %<GPI:w>1, <su>xt<ALLX:size> %p2\"\n-  [(set_attr \"type\" \"alu_ext\")\n-   (set_attr \"mode\" \"<GPI:MODE>\")]\n+  [(set_attr \"type\" \"alu_ext\")]\n )\n \n ;; zero_extend version of above\n@@ -1399,8 +1349,7 @@\n \t\t  (match_operand:SI 3 \"register_operand\" \"r\"))))]\n   \"\"\n   \"add\\\\t%w0, %w3, %w1, <su>xt<SHORT:size> %p2\"\n-  [(set_attr \"type\" \"alu_ext\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"alu_ext\")]\n )\n \n (define_insn \"*add_<optab><mode>_multp2\"\n@@ -1413,8 +1362,7 @@\n \t\t  (match_operand:GPI 4 \"register_operand\" \"r\")))]\n   \"aarch64_is_extend_from_extract (<MODE>mode, operands[2], operands[3])\"\n   \"add\\\\t%<w>0, %<w>4, %<w>1, <su>xt%e3 %p2\"\n-  [(set_attr \"type\" \"alu_ext\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"alu_ext\")]\n )\n \n ;; zero_extend version of above\n@@ -1429,8 +1377,7 @@\n \t\t  (match_operand:SI 4 \"register_operand\" \"r\"))))]\n   \"aarch64_is_extend_from_extract (SImode, operands[2], operands[3])\"\n   \"add\\\\t%w0, %w4, %w1, <su>xt%e3 %p2\"\n-  [(set_attr \"type\" \"alu_ext\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"alu_ext\")]\n )\n \n (define_insn \"*add<mode>3_carryin\"\n@@ -1442,8 +1389,7 @@\n \t\t(match_operand:GPI 2 \"register_operand\" \"r\"))))]\n    \"\"\n    \"adc\\\\t%<w>0, %<w>1, %<w>2\"\n-  [(set_attr \"type\" \"adc_reg\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"adc_reg\")]\n )\n \n ;; zero_extend version of above\n@@ -1457,8 +1403,7 @@\n \t       (match_operand:SI 2 \"register_operand\" \"r\")))))]\n    \"\"\n    \"adc\\\\t%w0, %w1, %w2\"\n-  [(set_attr \"type\" \"adc_reg\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"adc_reg\")]\n )\n \n (define_insn \"*add<mode>3_carryin_alt1\"\n@@ -1470,8 +1415,7 @@\n               (geu:GPI (reg:CC CC_REGNUM) (const_int 0))))]\n    \"\"\n    \"adc\\\\t%<w>0, %<w>1, %<w>2\"\n-  [(set_attr \"type\" \"adc_reg\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"adc_reg\")]\n )\n \n ;; zero_extend version of above\n@@ -1485,8 +1429,7 @@\n               (geu:SI (reg:CC CC_REGNUM) (const_int 0)))))]\n    \"\"\n    \"adc\\\\t%w0, %w1, %w2\"\n-  [(set_attr \"type\" \"adc_reg\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"adc_reg\")]\n )\n \n (define_insn \"*add<mode>3_carryin_alt2\"\n@@ -1498,8 +1441,7 @@\n \t      (match_operand:GPI 2 \"register_operand\" \"r\")))]\n    \"\"\n    \"adc\\\\t%<w>0, %<w>1, %<w>2\"\n-  [(set_attr \"type\" \"adc_reg\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"adc_reg\")]\n )\n \n ;; zero_extend version of above\n@@ -1513,8 +1455,7 @@\n \t      (match_operand:SI 2 \"register_operand\" \"r\"))))]\n    \"\"\n    \"adc\\\\t%w0, %w1, %w2\"\n-  [(set_attr \"type\" \"adc_reg\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"adc_reg\")]\n )\n \n (define_insn \"*add<mode>3_carryin_alt3\"\n@@ -1526,8 +1467,7 @@\n \t      (match_operand:GPI 1 \"register_operand\" \"r\")))]\n    \"\"\n    \"adc\\\\t%<w>0, %<w>1, %<w>2\"\n-  [(set_attr \"type\" \"adc_reg\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"adc_reg\")]\n )\n \n ;; zero_extend version of above\n@@ -1541,8 +1481,7 @@\n \t      (match_operand:SI 1 \"register_operand\" \"r\"))))]\n    \"\"\n    \"adc\\\\t%w0, %w1, %w2\"\n-  [(set_attr \"type\" \"adc_reg\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"adc_reg\")]\n )\n \n (define_insn \"*add_uxt<mode>_multp2\"\n@@ -1557,8 +1496,7 @@\n   operands[3] = GEN_INT (aarch64_uxt_size (exact_log2 (INTVAL (operands[2])),\n \t\t\t\t\t   INTVAL (operands[3])));\n   return \\\"add\\t%<w>0, %<w>4, %<w>1, uxt%e3 %p2\\\";\"\n-  [(set_attr \"type\" \"alu_ext\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"alu_ext\")]\n )\n \n ;; zero_extend version of above\n@@ -1575,8 +1513,7 @@\n   operands[3] = GEN_INT (aarch64_uxt_size (exact_log2 (INTVAL (operands[2])),\n \t\t\t\t\t   INTVAL (operands[3])));\n   return \\\"add\\t%w0, %w4, %w1, uxt%e3 %p2\\\";\"\n-  [(set_attr \"type\" \"alu_ext\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"alu_ext\")]\n )\n \n (define_insn \"subsi3\"\n@@ -1585,8 +1522,7 @@\n \t\t   (match_operand:SI 2 \"register_operand\" \"r\")))]\n   \"\"\n   \"sub\\\\t%w0, %w1, %w2\"\n-  [(set_attr \"type\" \"alu_reg\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"alu_reg\")]\n )\n \n ;; zero_extend version of above\n@@ -1597,8 +1533,7 @@\n \t\t   (match_operand:SI 2 \"register_operand\" \"r\"))))]\n   \"\"\n   \"sub\\\\t%w0, %w1, %w2\"\n-  [(set_attr \"type\" \"alu_reg\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"alu_reg\")]\n )\n \n (define_insn \"subdi3\"\n@@ -1610,7 +1545,6 @@\n    sub\\\\t%x0, %x1, %x2\n    sub\\\\t%d0, %d1, %d2\"\n   [(set_attr \"type\" \"alu_reg, neon_sub\")\n-   (set_attr \"mode\" \"DI\")\n    (set_attr \"simd\" \"*,yes\")]\n )\n \n@@ -1624,8 +1558,7 @@\n \t(minus:GPI (match_dup 1) (match_dup 2)))]\n   \"\"\n   \"subs\\\\t%<w>0, %<w>1, %<w>2\"\n-  [(set_attr \"type\" \"alus_reg\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"alus_reg\")]\n )\n \n ;; zero_extend version of above\n@@ -1638,8 +1571,7 @@\n \t(zero_extend:DI (minus:SI (match_dup 1) (match_dup 2))))]\n   \"\"\n   \"subs\\\\t%w0, %w1, %w2\"\n-  [(set_attr \"type\" \"alus_reg\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"alus_reg\")]\n )\n \n (define_insn \"*sub_<shift>_<mode>\"\n@@ -1650,8 +1582,7 @@\n \t\t    (match_operand:QI 2 \"aarch64_shift_imm_<mode>\" \"n\"))))]\n   \"\"\n   \"sub\\\\t%<w>0, %<w>3, %<w>1, <shift> %2\"\n-  [(set_attr \"type\" \"alu_shift_imm\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"alu_shift_imm\")]\n )\n \n ;; zero_extend version of above\n@@ -1664,8 +1595,7 @@\n \t\t    (match_operand:QI 2 \"aarch64_shift_imm_si\" \"n\")))))]\n   \"\"\n   \"sub\\\\t%w0, %w3, %w1, <shift> %2\"\n-  [(set_attr \"type\" \"alu_shift_imm\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"alu_shift_imm\")]\n )\n \n (define_insn \"*sub_mul_imm_<mode>\"\n@@ -1676,8 +1606,7 @@\n \t\t    (match_operand:QI 2 \"aarch64_pwr_2_<mode>\" \"n\"))))]\n   \"\"\n   \"sub\\\\t%<w>0, %<w>3, %<w>1, lsl %p2\"\n-  [(set_attr \"type\" \"alu_shift_imm\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"alu_shift_imm\")]\n )\n \n ;; zero_extend version of above\n@@ -1690,8 +1619,7 @@\n \t\t    (match_operand:QI 2 \"aarch64_pwr_2_si\" \"n\")))))]\n   \"\"\n   \"sub\\\\t%w0, %w3, %w1, lsl %p2\"\n-  [(set_attr \"type\" \"alu_shift_imm\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"alu_shift_imm\")]\n )\n \n (define_insn \"*sub_<optab><ALLX:mode>_<GPI:mode>\"\n@@ -1701,8 +1629,7 @@\n \t\t    (match_operand:ALLX 2 \"register_operand\" \"r\"))))]\n   \"\"\n   \"sub\\\\t%<GPI:w>0, %<GPI:w>1, %<GPI:w>2, <su>xt<ALLX:size>\"\n-  [(set_attr \"type\" \"alu_ext\")\n-   (set_attr \"mode\" \"<GPI:MODE>\")]\n+  [(set_attr \"type\" \"alu_ext\")]\n )\n \n ;; zero_extend version of above\n@@ -1714,8 +1641,7 @@\n \t\t    (match_operand:SHORT 2 \"register_operand\" \"r\")))))]\n   \"\"\n   \"sub\\\\t%w0, %w1, %w2, <su>xt<SHORT:size>\"\n-  [(set_attr \"type\" \"alu_ext\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"alu_ext\")]\n )\n \n (define_insn \"*sub_<optab><ALLX:mode>_shft_<GPI:mode>\"\n@@ -1726,8 +1652,7 @@\n \t\t\t       (match_operand 3 \"aarch64_imm3\" \"Ui3\"))))]\n   \"\"\n   \"sub\\\\t%<GPI:w>0, %<GPI:w>1, %<GPI:w>2, <su>xt<ALLX:size> %3\"\n-  [(set_attr \"type\" \"alu_ext\")\n-   (set_attr \"mode\" \"<GPI:MODE>\")]\n+  [(set_attr \"type\" \"alu_ext\")]\n )\n \n ;; zero_extend version of above\n@@ -1740,8 +1665,7 @@\n \t\t\t      (match_operand 3 \"aarch64_imm3\" \"Ui3\")))))]\n   \"\"\n   \"sub\\\\t%w0, %w1, %w2, <su>xt<SHORT:size> %3\"\n-  [(set_attr \"type\" \"alu_ext\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"alu_ext\")]\n )\n \n (define_insn \"*sub_<optab><mode>_multp2\"\n@@ -1754,8 +1678,7 @@\n \t\t    (const_int 0))))]\n   \"aarch64_is_extend_from_extract (<MODE>mode, operands[2], operands[3])\"\n   \"sub\\\\t%<w>0, %<w>4, %<w>1, <su>xt%e3 %p2\"\n-  [(set_attr \"type\" \"alu_ext\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"alu_ext\")]\n )\n \n ;; zero_extend version of above\n@@ -1770,8 +1693,7 @@\n \t\t    (const_int 0)))))]\n   \"aarch64_is_extend_from_extract (SImode, operands[2], operands[3])\"\n   \"sub\\\\t%w0, %w4, %w1, <su>xt%e3 %p2\"\n-  [(set_attr \"type\" \"alu_ext\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"alu_ext\")]\n )\n \n (define_insn \"*sub<mode>3_carryin\"\n@@ -1783,8 +1705,7 @@\n \t       (match_operand:GPI 2 \"register_operand\" \"r\")))]\n    \"\"\n    \"sbc\\\\t%<w>0, %<w>1, %<w>2\"\n-  [(set_attr \"type\" \"adc_reg\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"adc_reg\")]\n )\n \n ;; zero_extend version of the above\n@@ -1798,8 +1719,7 @@\n \t       (match_operand:SI 2 \"register_operand\" \"r\"))))]\n    \"\"\n    \"sbc\\\\t%w0, %w1, %w2\"\n-  [(set_attr \"type\" \"adc_reg\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"adc_reg\")]\n )\n \n (define_insn \"*sub_uxt<mode>_multp2\"\n@@ -1814,8 +1734,7 @@\n   operands[3] = GEN_INT (aarch64_uxt_size (exact_log2 (INTVAL (operands[2])),\n \t\t\t\t\t   INTVAL (operands[3])));\n   return \\\"sub\\t%<w>0, %<w>4, %<w>1, uxt%e3 %p2\\\";\"\n-  [(set_attr \"type\" \"alu_ext\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"alu_ext\")]\n )\n \n ;; zero_extend version of above\n@@ -1832,8 +1751,7 @@\n   operands[3] = GEN_INT (aarch64_uxt_size (exact_log2 (INTVAL (operands[2])),\n \t\t\t\t\t   INTVAL (operands[3])));\n   return \\\"sub\\t%w0, %w4, %w1, uxt%e3 %p2\\\";\"\n-  [(set_attr \"type\" \"alu_ext\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"alu_ext\")]\n )\n \n (define_insn_and_split \"absdi2\"\n@@ -1864,8 +1782,7 @@\n \t\t\t\t\t\t\t     GEN_INT (63)))));\n     DONE;\n   }\n-  [(set_attr \"type\" \"alu_reg\")\n-   (set_attr \"mode\" \"DI\")]\n+  [(set_attr \"type\" \"alu_reg\")]\n )\n \n (define_insn \"neg<mode>2\"\n@@ -1876,8 +1793,7 @@\n    neg\\\\t%<w>0, %<w>1\n    neg\\\\t%<rtn>0<vas>, %<rtn>1<vas>\"\n   [(set_attr \"type\" \"alu_reg, neon_neg<q>\")\n-   (set_attr \"simd\" \"*,yes\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+   (set_attr \"simd\" \"*,yes\")]\n )\n \n ;; zero_extend version of above\n@@ -1886,8 +1802,7 @@\n \t(zero_extend:DI (neg:SI (match_operand:SI 1 \"register_operand\" \"r\"))))]\n   \"\"\n   \"neg\\\\t%w0, %w1\"\n-  [(set_attr \"type\" \"alu_reg\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"alu_reg\")]\n )\n \n (define_insn \"*ngc<mode>\"\n@@ -1896,8 +1811,7 @@\n \t\t   (match_operand:GPI 1 \"register_operand\" \"r\")))]\n   \"\"\n   \"ngc\\\\t%<w>0, %<w>1\"\n-  [(set_attr \"type\" \"adc_reg\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"adc_reg\")]\n )\n \n (define_insn \"*ngcsi_uxtw\"\n@@ -1907,8 +1821,7 @@\n \t\t   (match_operand:SI 1 \"register_operand\" \"r\"))))]\n   \"\"\n   \"ngc\\\\t%w0, %w1\"\n-  [(set_attr \"type\" \"adc_reg\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"adc_reg\")]\n )\n \n (define_insn \"*neg<mode>2_compare0\"\n@@ -1919,8 +1832,7 @@\n \t(neg:GPI (match_dup 1)))]\n   \"\"\n   \"negs\\\\t%<w>0, %<w>1\"\n-  [(set_attr \"type\" \"alus_reg\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"alus_reg\")]\n )\n \n ;; zero_extend version of above\n@@ -1932,8 +1844,7 @@\n \t(zero_extend:DI (neg:SI (match_dup 1))))]\n   \"\"\n   \"negs\\\\t%w0, %w1\"\n-  [(set_attr \"type\" \"alus_reg\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"alus_reg\")]\n )\n \n (define_insn \"*neg_<shift><mode>3_compare0\"\n@@ -1947,8 +1858,7 @@\n \t(neg:GPI (ASHIFT:GPI (match_dup 1) (match_dup 2))))]\n   \"\"\n   \"negs\\\\t%<w>0, %<w>1, <shift> %2\"\n-  [(set_attr \"type\" \"alus_shift_imm\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"alus_shift_imm\")]\n )\n \n (define_insn \"*neg_<shift>_<mode>2\"\n@@ -1958,8 +1868,7 @@\n \t\t  (match_operand:QI 2 \"aarch64_shift_imm_<mode>\" \"n\"))))]\n   \"\"\n   \"neg\\\\t%<w>0, %<w>1, <shift> %2\"\n-  [(set_attr \"type\" \"alu_shift_imm\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"alu_shift_imm\")]\n )\n \n ;; zero_extend version of above\n@@ -1971,8 +1880,7 @@\n \t\t  (match_operand:QI 2 \"aarch64_shift_imm_si\" \"n\")))))]\n   \"\"\n   \"neg\\\\t%w0, %w1, <shift> %2\"\n-  [(set_attr \"type\" \"alu_shift_imm\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"alu_shift_imm\")]\n )\n \n (define_insn \"*neg_mul_imm_<mode>2\"\n@@ -1982,8 +1890,7 @@\n \t\t  (match_operand:QI 2 \"aarch64_pwr_2_<mode>\" \"n\"))))]\n   \"\"\n   \"neg\\\\t%<w>0, %<w>1, lsl %p2\"\n-  [(set_attr \"type\" \"alu_shift_imm\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"alu_shift_imm\")]\n )\n \n ;; zero_extend version of above\n@@ -1995,8 +1902,7 @@\n \t\t  (match_operand:QI 2 \"aarch64_pwr_2_si\" \"n\")))))]\n   \"\"\n   \"neg\\\\t%w0, %w1, lsl %p2\"\n-  [(set_attr \"type\" \"alu_shift_imm\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"alu_shift_imm\")]\n )\n \n (define_insn \"mul<mode>3\"\n@@ -2005,8 +1911,7 @@\n \t\t  (match_operand:GPI 2 \"register_operand\" \"r\")))]\n   \"\"\n   \"mul\\\\t%<w>0, %<w>1, %<w>2\"\n-  [(set_attr \"type\" \"mul\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"mul\")]\n )\n \n ;; zero_extend version of above\n@@ -2017,8 +1922,7 @@\n \t\t  (match_operand:SI 2 \"register_operand\" \"r\"))))]\n   \"\"\n   \"mul\\\\t%w0, %w1, %w2\"\n-  [(set_attr \"type\" \"mul\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"mul\")]\n )\n \n (define_insn \"*madd<mode>\"\n@@ -2028,8 +1932,7 @@\n \t\t  (match_operand:GPI 3 \"register_operand\" \"r\")))]\n   \"\"\n   \"madd\\\\t%<w>0, %<w>1, %<w>2, %<w>3\"\n-  [(set_attr \"type\" \"mla\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"mla\")]\n )\n \n ;; zero_extend version of above\n@@ -2041,8 +1944,7 @@\n \t\t  (match_operand:SI 3 \"register_operand\" \"r\"))))]\n   \"\"\n   \"madd\\\\t%w0, %w1, %w2, %w3\"\n-  [(set_attr \"type\" \"mla\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"mla\")]\n )\n \n (define_insn \"*msub<mode>\"\n@@ -2053,8 +1955,7 @@\n \n   \"\"\n   \"msub\\\\t%<w>0, %<w>1, %<w>2, %<w>3\"\n-  [(set_attr \"type\" \"mla\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"mla\")]\n )\n \n ;; zero_extend version of above\n@@ -2067,8 +1968,7 @@\n \n   \"\"\n   \"msub\\\\t%w0, %w1, %w2, %w3\"\n-  [(set_attr \"type\" \"mla\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"mla\")]\n )\n \n (define_insn \"*mul<mode>_neg\"\n@@ -2078,8 +1978,7 @@\n \n   \"\"\n   \"mneg\\\\t%<w>0, %<w>1, %<w>2\"\n-  [(set_attr \"type\" \"mul\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"mul\")]\n )\n \n ;; zero_extend version of above\n@@ -2091,8 +1990,7 @@\n \n   \"\"\n   \"mneg\\\\t%w0, %w1, %w2\"\n-  [(set_attr \"type\" \"mul\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"mul\")]\n )\n \n (define_insn \"<su_optab>mulsidi3\"\n@@ -2101,8 +1999,7 @@\n \t\t (ANY_EXTEND:DI (match_operand:SI 2 \"register_operand\" \"r\"))))]\n   \"\"\n   \"<su>mull\\\\t%0, %w1, %w2\"\n-  [(set_attr \"type\" \"<su>mull\")\n-   (set_attr \"mode\" \"DI\")]\n+  [(set_attr \"type\" \"<su>mull\")]\n )\n \n (define_insn \"<su_optab>maddsidi4\"\n@@ -2113,8 +2010,7 @@\n \t\t (match_operand:DI 3 \"register_operand\" \"r\")))]\n   \"\"\n   \"<su>maddl\\\\t%0, %w1, %w2, %3\"\n-  [(set_attr \"type\" \"<su>mlal\")\n-   (set_attr \"mode\" \"DI\")]\n+  [(set_attr \"type\" \"<su>mlal\")]\n )\n \n (define_insn \"<su_optab>msubsidi4\"\n@@ -2126,8 +2022,7 @@\n \t\t   (match_operand:SI 2 \"register_operand\" \"r\")))))]\n   \"\"\n   \"<su>msubl\\\\t%0, %w1, %w2, %3\"\n-  [(set_attr \"type\" \"<su>mlal\")\n-   (set_attr \"mode\" \"DI\")]\n+  [(set_attr \"type\" \"<su>mlal\")]\n )\n \n (define_insn \"*<su_optab>mulsidi_neg\"\n@@ -2137,8 +2032,7 @@\n \t\t  (ANY_EXTEND:DI (match_operand:SI 2 \"register_operand\" \"r\"))))]\n   \"\"\n   \"<su>mnegl\\\\t%0, %w1, %w2\"\n-  [(set_attr \"type\" \"<su>mull\")\n-   (set_attr \"mode\" \"DI\")]\n+  [(set_attr \"type\" \"<su>mull\")]\n )\n \n (define_insn \"<su>muldi3_highpart\"\n@@ -2151,8 +2045,7 @@\n \t  (const_int 64))))]\n   \"\"\n   \"<su>mulh\\\\t%0, %1, %2\"\n-  [(set_attr \"type\" \"<su>mull\")\n-   (set_attr \"mode\" \"DI\")]\n+  [(set_attr \"type\" \"<su>mull\")]\n )\n \n (define_insn \"<su_optab>div<mode>3\"\n@@ -2161,8 +2054,7 @@\n \t\t     (match_operand:GPI 2 \"register_operand\" \"r\")))]\n   \"\"\n   \"<su>div\\\\t%<w>0, %<w>1, %<w>2\"\n-  [(set_attr \"type\" \"<su>div\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"<su>div\")]\n )\n \n ;; zero_extend version of above\n@@ -2173,8 +2065,7 @@\n \t\t     (match_operand:SI 2 \"register_operand\" \"r\"))))]\n   \"\"\n   \"<su>div\\\\t%w0, %w1, %w2\"\n-  [(set_attr \"type\" \"<su>div\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"<su>div\")]\n )\n \n ;; -------------------------------------------------------------------\n@@ -2190,8 +2081,7 @@\n    cmp\\\\t%<w>0, %<w>1\n    cmp\\\\t%<w>0, %<w>1\n    cmn\\\\t%<w>0, #%n1\"\n-  [(set_attr \"type\" \"alus_reg,alus_imm,alus_imm\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"alus_reg,alus_imm,alus_imm\")]\n )\n \n (define_insn \"*cmp<mode>\"\n@@ -2202,8 +2092,7 @@\n    \"@\n     fcmp\\\\t%<s>0, #0.0\n     fcmp\\\\t%<s>0, %<s>1\"\n-  [(set_attr \"type\" \"fcmp<s>\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"fcmp<s>\")]\n )\n \n (define_insn \"*cmpe<mode>\"\n@@ -2214,8 +2103,7 @@\n    \"@\n     fcmpe\\\\t%<s>0, #0.0\n     fcmpe\\\\t%<s>0, %<s>1\"\n-  [(set_attr \"type\" \"fcmp<s>\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"fcmp<s>\")]\n )\n \n (define_insn \"*cmp_swp_<shift>_reg<mode>\"\n@@ -2226,8 +2114,7 @@\n \t\t\t(match_operand:GPI 2 \"aarch64_reg_or_zero\" \"rZ\")))]\n   \"\"\n   \"cmp\\\\t%<w>2, %<w>0, <shift> %1\"\n-  [(set_attr \"type\" \"alus_shift_imm\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"alus_shift_imm\")]\n )\n \n (define_insn \"*cmp_swp_<optab><ALLX:mode>_reg<GPI:mode>\"\n@@ -2237,8 +2124,7 @@\n \t\t\t(match_operand:GPI 1 \"register_operand\" \"r\")))]\n   \"\"\n   \"cmp\\\\t%<GPI:w>1, %<GPI:w>0, <su>xt<ALLX:size>\"\n-  [(set_attr \"type\" \"alus_ext\")\n-   (set_attr \"mode\" \"<GPI:MODE>\")]\n+  [(set_attr \"type\" \"alus_ext\")]\n )\n \n (define_insn \"*cmp_swp_<optab><ALLX:mode>_shft_<GPI:mode>\"\n@@ -2250,8 +2136,7 @@\n \t(match_operand:GPI 2 \"register_operand\" \"r\")))]\n   \"\"\n   \"cmp\\\\t%<GPI:w>2, %<GPI:w>0, <su>xt<ALLX:size> %1\"\n-  [(set_attr \"type\" \"alus_ext\")\n-   (set_attr \"mode\" \"<GPI:MODE>\")]\n+  [(set_attr \"type\" \"alus_ext\")]\n )\n \n ;; -------------------------------------------------------------------\n@@ -2290,8 +2175,7 @@\n \t [(match_operand 2 \"cc_register\" \"\") (const_int 0)]))]\n   \"\"\n   \"cset\\\\t%<w>0, %m1\"\n-  [(set_attr \"type\" \"csel\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"csel\")]\n )\n \n ;; zero_extend version of the above\n@@ -2302,8 +2186,7 @@\n \t  [(match_operand 2 \"cc_register\" \"\") (const_int 0)])))]\n   \"\"\n   \"cset\\\\t%w0, %m1\"\n-  [(set_attr \"type\" \"csel\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"csel\")]\n )\n \n (define_insn \"cstore<mode>_neg\"\n@@ -2312,8 +2195,7 @@\n \t\t  [(match_operand 2 \"cc_register\" \"\") (const_int 0)])))]\n   \"\"\n   \"csetm\\\\t%<w>0, %m1\"\n-  [(set_attr \"type\" \"csel\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"csel\")]\n )\n \n ;; zero_extend version of the above\n@@ -2324,8 +2206,7 @@\n \t\t  [(match_operand 2 \"cc_register\" \"\") (const_int 0)]))))]\n   \"\"\n   \"csetm\\\\t%w0, %m1\"\n-  [(set_attr \"type\" \"csel\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"csel\")]\n )\n \n (define_expand \"cmov<mode>6\"\n@@ -2378,8 +2259,7 @@\n    csinc\\\\t%<w>0, %<w>4, <w>zr, %M1\n    mov\\\\t%<w>0, -1\n    mov\\\\t%<w>0, 1\"\n-  [(set_attr \"type\" \"csel\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"csel\")]\n )\n \n ;; zero_extend version of above\n@@ -2402,8 +2282,7 @@\n    csinc\\\\t%w0, %w4, wzr, %M1\n    mov\\\\t%w0, -1\n    mov\\\\t%w0, 1\"\n-  [(set_attr \"type\" \"csel\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"csel\")]\n )\n \n (define_insn \"*cmov<mode>_insn\"\n@@ -2415,8 +2294,7 @@\n \t (match_operand:GPF 4 \"register_operand\" \"w\")))]\n   \"TARGET_FLOAT\"\n   \"fcsel\\\\t%<s>0, %<s>3, %<s>4, %m1\"\n-  [(set_attr \"type\" \"fcsel\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"fcsel\")]\n )\n \n (define_expand \"mov<mode>cc\"\n@@ -2464,8 +2342,8 @@\n \t\t (match_operand:GPI 1 \"register_operand\" \"r\")))]\n   \"\"\n   \"csinc\\\\t%<w>0, %<w>1, %<w>1, %M2\"\n-  [(set_attr \"type\" \"csel\")\n-   (set_attr \"mode\" \"<MODE>\")])\n+  [(set_attr \"type\" \"csel\")]\n+)\n \n (define_insn \"csinc3<mode>_insn\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n@@ -2477,8 +2355,7 @@\n \t  (match_operand:GPI 4 \"aarch64_reg_or_zero\" \"rZ\")))]\n   \"\"\n   \"csinc\\\\t%<w>0, %<w>4, %<w>3, %M1\"\n-  [(set_attr \"type\" \"csel\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"csel\")]\n )\n \n (define_insn \"*csinv3<mode>_insn\"\n@@ -2490,8 +2367,8 @@\n \t  (match_operand:GPI 4 \"aarch64_reg_or_zero\" \"rZ\")))]\n   \"\"\n   \"csinv\\\\t%<w>0, %<w>4, %<w>3, %M1\"\n-  [(set_attr \"type\" \"csel\")\n-   (set_attr \"mode\" \"<MODE>\")])\n+  [(set_attr \"type\" \"csel\")]\n+)\n \n (define_insn \"*csneg3<mode>_insn\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n@@ -2502,8 +2379,8 @@\n \t  (match_operand:GPI 4 \"aarch64_reg_or_zero\" \"rZ\")))]\n   \"\"\n   \"csneg\\\\t%<w>0, %<w>4, %<w>3, %M1\"\n-  [(set_attr \"type\" \"csel\")\n-   (set_attr \"mode\" \"<MODE>\")])\n+  [(set_attr \"type\" \"csel\")]\n+)\n \n ;; -------------------------------------------------------------------\n ;; Logical operations\n@@ -2515,8 +2392,8 @@\n \t\t     (match_operand:GPI 2 \"aarch64_logical_operand\" \"r,<lconst>\")))]\n   \"\"\n   \"<logical>\\\\t%<w>0, %<w>1, %<w>2\"\n-  [(set_attr \"type\" \"logic_reg,logic_imm\")\n-   (set_attr \"mode\" \"<MODE>\")])\n+  [(set_attr \"type\" \"logic_reg,logic_imm\")]\n+)\n \n ;; zero_extend version of above\n (define_insn \"*<optab>si3_uxtw\"\n@@ -2526,8 +2403,8 @@\n \t\t     (match_operand:SI 2 \"aarch64_logical_operand\" \"r,K\"))))]\n   \"\"\n   \"<logical>\\\\t%w0, %w1, %w2\"\n-  [(set_attr \"type\" \"logic_reg,logic_imm\")\n-   (set_attr \"mode\" \"SI\")])\n+  [(set_attr \"type\" \"logic_reg,logic_imm\")]\n+)\n \n (define_insn \"*and<mode>3_compare0\"\n   [(set (reg:CC_NZ CC_REGNUM)\n@@ -2539,8 +2416,7 @@\n \t(and:GPI (match_dup 1) (match_dup 2)))]\n   \"\"\n   \"ands\\\\t%<w>0, %<w>1, %<w>2\"\n-  [(set_attr \"type\" \"logics_reg,logics_imm\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"logics_reg,logics_imm\")]\n )\n \n ;; zero_extend version of above\n@@ -2554,8 +2430,7 @@\n \t(zero_extend:DI (and:SI (match_dup 1) (match_dup 2))))]\n   \"\"\n   \"ands\\\\t%w0, %w1, %w2\"\n-  [(set_attr \"type\" \"logics_reg,logics_imm\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"logics_reg,logics_imm\")]\n )\n \n (define_insn \"*and_<SHIFT:optab><mode>3_compare0\"\n@@ -2570,8 +2445,7 @@\n \t(and:GPI (SHIFT:GPI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n   \"\"\n   \"ands\\\\t%<w>0, %<w>3, %<w>1, <SHIFT:shift> %2\"\n-  [(set_attr \"type\" \"logics_shift_imm\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"logics_shift_imm\")]\n )\n \n ;; zero_extend version of above\n@@ -2588,8 +2462,7 @@\n \t\t\t\t(match_dup 3))))]\n   \"\"\n   \"ands\\\\t%w0, %w3, %w1, <SHIFT:shift> %2\"\n-  [(set_attr \"type\" \"logics_shift_imm\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"logics_shift_imm\")]\n )\n \n (define_insn \"*<LOGICAL:optab>_<SHIFT:optab><mode>3\"\n@@ -2600,8 +2473,8 @@\n \t\t     (match_operand:GPI 3 \"register_operand\" \"r\")))]\n   \"\"\n   \"<LOGICAL:logical>\\\\t%<w>0, %<w>3, %<w>1, <SHIFT:shift> %2\"\n-  [(set_attr \"type\" \"logic_shift_imm\")\n-   (set_attr \"mode\" \"<MODE>\")])\n+  [(set_attr \"type\" \"logic_shift_imm\")]\n+)\n \n ;; zero_extend version of above\n (define_insn \"*<LOGICAL:optab>_<SHIFT:optab>si3_uxtw\"\n@@ -2613,25 +2486,25 @@\n \t\t     (match_operand:SI 3 \"register_operand\" \"r\"))))]\n   \"\"\n   \"<LOGICAL:logical>\\\\t%w0, %w3, %w1, <SHIFT:shift> %2\"\n-  [(set_attr \"type\" \"logic_shift_imm\")\n-   (set_attr \"mode\" \"SI\")])\n+  [(set_attr \"type\" \"logic_shift_imm\")]\n+)\n \n (define_insn \"one_cmpl<mode>2\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n \t(not:GPI (match_operand:GPI 1 \"register_operand\" \"r\")))]\n   \"\"\n   \"mvn\\\\t%<w>0, %<w>1\"\n-  [(set_attr \"type\" \"logic_reg\")\n-   (set_attr \"mode\" \"<MODE>\")])\n+  [(set_attr \"type\" \"logic_reg\")]\n+)\n \n (define_insn \"*one_cmpl_<optab><mode>2\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n \t(not:GPI (SHIFT:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n \t\t\t    (match_operand:QI 2 \"aarch64_shift_imm_<mode>\" \"n\"))))]\n   \"\"\n   \"mvn\\\\t%<w>0, %<w>1, <shift> %2\"\n-  [(set_attr \"type\" \"logic_shift_imm\")\n-   (set_attr \"mode\" \"<MODE>\")])\n+  [(set_attr \"type\" \"logic_shift_imm\")]\n+)\n \n (define_insn \"*<LOGICAL:optab>_one_cmpl<mode>3\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n@@ -2640,8 +2513,8 @@\n \t\t     (match_operand:GPI 2 \"register_operand\" \"r\")))]\n   \"\"\n   \"<LOGICAL:nlogical>\\\\t%<w>0, %<w>2, %<w>1\"\n-  [(set_attr \"type\" \"logic_reg\")\n-   (set_attr \"mode\" \"<MODE>\")])\n+  [(set_attr \"type\" \"logic_reg\")]\n+)\n \n (define_insn \"*and_one_cmpl<mode>3_compare0\"\n   [(set (reg:CC_NZ CC_REGNUM)\n@@ -2654,8 +2527,8 @@\n \t(and:GPI (not:GPI (match_dup 1)) (match_dup 2)))]\n   \"\"\n   \"bics\\\\t%<w>0, %<w>2, %<w>1\"\n-  [(set_attr \"type\" \"logics_reg\")\n-   (set_attr \"mode\" \"<MODE>\")])\n+  [(set_attr \"type\" \"logics_reg\")]\n+)\n \n ;; zero_extend version of above\n (define_insn \"*and_one_cmplsi3_compare0_uxtw\"\n@@ -2669,8 +2542,8 @@\n \t(zero_extend:DI (and:SI (not:SI (match_dup 1)) (match_dup 2))))]\n   \"\"\n   \"bics\\\\t%w0, %w2, %w1\"\n-  [(set_attr \"type\" \"logics_reg\")\n-   (set_attr \"mode\" \"SI\")])\n+  [(set_attr \"type\" \"logics_reg\")]\n+)\n \n (define_insn \"*<LOGICAL:optab>_one_cmpl_<SHIFT:optab><mode>3\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n@@ -2681,8 +2554,8 @@\n \t\t     (match_operand:GPI 3 \"register_operand\" \"r\")))]\n   \"\"\n   \"<LOGICAL:nlogical>\\\\t%<w>0, %<w>3, %<w>1, <SHIFT:shift> %2\"\n-  [(set_attr \"type\" \"logics_shift_imm\")\n-   (set_attr \"mode\" \"<MODE>\")])\n+  [(set_attr \"type\" \"logics_shift_imm\")]\n+)\n \n (define_insn \"*and_one_cmpl_<SHIFT:optab><mode>3_compare0\"\n   [(set (reg:CC_NZ CC_REGNUM)\n@@ -2699,8 +2572,8 @@\n \t\t   (match_dup 1) (match_dup 2))) (match_dup 3)))]\n   \"\"\n   \"bics\\\\t%<w>0, %<w>3, %<w>1, <SHIFT:shift> %2\"\n-  [(set_attr \"type\" \"logics_shift_imm\")\n-   (set_attr \"mode\" \"<MODE>\")])\n+  [(set_attr \"type\" \"logics_shift_imm\")]\n+)\n \n ;; zero_extend version of above\n (define_insn \"*and_one_cmpl_<SHIFT:optab>si3_compare0_uxtw\"\n@@ -2718,16 +2591,16 @@\n \t\t\t  (SHIFT:SI (match_dup 1) (match_dup 2))) (match_dup 3))))]\n   \"\"\n   \"bics\\\\t%w0, %w3, %w1, <SHIFT:shift> %2\"\n-  [(set_attr \"type\" \"logics_shift_imm\")\n-   (set_attr \"mode\" \"SI\")])\n+  [(set_attr \"type\" \"logics_shift_imm\")]\n+)\n \n (define_insn \"clz<mode>2\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n \t(clz:GPI (match_operand:GPI 1 \"register_operand\" \"r\")))]\n   \"\"\n   \"clz\\\\t%<w>0, %<w>1\"\n-  [(set_attr \"type\" \"clz\")\n-   (set_attr \"mode\" \"<MODE>\")])\n+  [(set_attr \"type\" \"clz\")]\n+)\n \n (define_expand \"ffs<mode>2\"\n   [(match_operand:GPI 0 \"register_operand\")\n@@ -2749,16 +2622,16 @@\n \t(unspec:GPI [(match_operand:GPI 1 \"register_operand\" \"r\")] UNSPEC_CLS))]\n   \"\"\n   \"cls\\\\t%<w>0, %<w>1\"\n-  [(set_attr \"type\" \"clz\")\n-   (set_attr \"mode\" \"<MODE>\")])\n+  [(set_attr \"type\" \"clz\")]\n+)\n \n (define_insn \"rbit<mode>2\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n \t(unspec:GPI [(match_operand:GPI 1 \"register_operand\" \"r\")] UNSPEC_RBIT))]\n   \"\"\n   \"rbit\\\\t%<w>0, %<w>1\"\n-  [(set_attr \"type\" \"rbit\")\n-   (set_attr \"mode\" \"<MODE>\")])\n+  [(set_attr \"type\" \"rbit\")]\n+)\n \n (define_expand \"ctz<mode>2\"\n   [(match_operand:GPI 0 \"register_operand\")\n@@ -2779,8 +2652,8 @@\n \t (const_int 0)))]\n   \"\"\n   \"tst\\\\t%<w>0, %<w>1\"\n-  [(set_attr \"type\" \"logics_reg\")\n-   (set_attr \"mode\" \"<MODE>\")])\n+  [(set_attr \"type\" \"logics_reg\")]\n+)\n \n (define_insn \"*and_<SHIFT:optab><mode>3nr_compare0\"\n   [(set (reg:CC_NZ CC_REGNUM)\n@@ -2792,8 +2665,8 @@\n \t(const_int 0)))]\n   \"\"\n   \"tst\\\\t%<w>2, %<w>0, <SHIFT:shift> %1\"\n-  [(set_attr \"type\" \"logics_shift_imm\")\n-   (set_attr \"mode\" \"<MODE>\")])\n+  [(set_attr \"type\" \"logics_shift_imm\")]\n+)\n \n ;; -------------------------------------------------------------------\n ;; Shifts\n@@ -2894,8 +2767,7 @@\n    ushl\\t%<rtn>0<vas>, %<rtn>1<vas>, %<rtn>2<vas>\n    lsl\\t%<w>0, %<w>1, %<w>2\"\n   [(set_attr \"simd\" \"yes,yes,no\")\n-   (set_attr \"type\" \"neon_shift_imm<q>, neon_shift_reg<q>,shift_reg\")\n-   (set_attr \"mode\" \"*,*,<MODE>\")]\n+   (set_attr \"type\" \"neon_shift_imm<q>, neon_shift_reg<q>,shift_reg\")]\n )\n \n ;; Logical right shift using SISD or Integer instruction\n@@ -2910,8 +2782,7 @@\n    #\n    lsr\\t%<w>0, %<w>1, %<w>2\"\n   [(set_attr \"simd\" \"yes,yes,no\")\n-   (set_attr \"type\" \"neon_shift_imm<q>,neon_shift_reg<q>,shift_reg\")\n-   (set_attr \"mode\" \"*,*,<MODE>\")]\n+   (set_attr \"type\" \"neon_shift_imm<q>,neon_shift_reg<q>,shift_reg\")]\n )\n \n (define_split\n@@ -2952,8 +2823,7 @@\n    #\n    asr\\t%<w>0, %<w>1, %<w>2\"\n   [(set_attr \"simd\" \"yes,yes,no\")\n-   (set_attr \"type\" \"neon_shift_imm<q>,neon_shift_reg<q>,shift_reg\")\n-   (set_attr \"mode\" \"*,*,<MODE>\")]\n+   (set_attr \"type\" \"neon_shift_imm<q>,neon_shift_reg<q>,shift_reg\")]\n )\n \n (define_split\n@@ -3044,8 +2914,7 @@\n           (match_operand:QI 2 \"aarch64_reg_or_shift_imm_<mode>\" \"rUs<cmode>\")))]\n   \"\"\n   \"ror\\\\t%<w>0, %<w>1, %<w>2\"\n-  [(set_attr \"type\" \"shift_reg\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"shift_reg\")]\n )\n \n ;; zero_extend version of above\n@@ -3056,8 +2925,7 @@\n \t (match_operand:QI 2 \"aarch64_reg_or_shift_imm_si\" \"rUss\"))))]\n   \"\"\n   \"<shift>\\\\t%w0, %w1, %w2\"\n-  [(set_attr \"type\" \"shift_reg\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"shift_reg\")]\n )\n \n (define_insn \"*ashl<mode>3_insn\"\n@@ -3066,8 +2934,7 @@\n \t\t      (match_operand:QI 2 \"aarch64_reg_or_shift_imm_si\" \"rUss\")))]\n   \"\"\n   \"lsl\\\\t%<w>0, %<w>1, %<w>2\"\n-  [(set_attr \"type\" \"shift_reg\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"shift_reg\")]\n )\n \n (define_insn \"*<optab><mode>3_insn\"\n@@ -3079,8 +2946,7 @@\n   operands[3] = GEN_INT (<sizen> - UINTVAL (operands[2]));\n   return \"<bfshift>\\t%w0, %w1, %2, %3\";\n }\n-  [(set_attr \"type\" \"bfm\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"bfm\")]\n )\n \n (define_insn \"*extr<mode>5_insn\"\n@@ -3092,8 +2958,7 @@\n   \"UINTVAL (operands[3]) < GET_MODE_BITSIZE (<MODE>mode) &&\n    (UINTVAL (operands[3]) + UINTVAL (operands[4]) == GET_MODE_BITSIZE (<MODE>mode))\"\n   \"extr\\\\t%<w>0, %<w>1, %<w>2, %4\"\n-  [(set_attr \"type\" \"shift_imm\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"shift_imm\")]\n )\n \n ;; zero_extend version of the above\n@@ -3107,8 +2972,7 @@\n   \"UINTVAL (operands[3]) < 32 &&\n    (UINTVAL (operands[3]) + UINTVAL (operands[4]) == 32)\"\n   \"extr\\\\t%w0, %w1, %w2, %4\"\n-  [(set_attr \"type\" \"shift_imm\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"shift_imm\")]\n )\n \n (define_insn \"*ror<mode>3_insn\"\n@@ -3120,8 +2984,7 @@\n   operands[3] = GEN_INT (<sizen> - UINTVAL (operands[2]));\n   return \"ror\\\\t%<w>0, %<w>1, %3\";\n }\n-  [(set_attr \"type\" \"shift_imm\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"shift_imm\")]\n )\n \n ;; zero_extend version of the above\n@@ -3135,8 +2998,7 @@\n   operands[3] = GEN_INT (32 - UINTVAL (operands[2]));\n   return \"ror\\\\t%w0, %w1, %3\";\n }\n-  [(set_attr \"type\" \"shift_imm\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"shift_imm\")]\n )\n \n (define_insn \"*<ANY_EXTEND:optab><GPI:mode>_ashl<SHORT:mode>\"\n@@ -3149,8 +3011,7 @@\n   operands[3] = GEN_INT (<SHORT:sizen> - UINTVAL (operands[2]));\n   return \"<su>bfiz\\t%<GPI:w>0, %<GPI:w>1, %2, %3\";\n }\n-  [(set_attr \"type\" \"bfm\")\n-   (set_attr \"mode\" \"<GPI:MODE>\")]\n+  [(set_attr \"type\" \"bfm\")]\n )\n \n (define_insn \"*zero_extend<GPI:mode>_lshr<SHORT:mode>\"\n@@ -3163,8 +3024,7 @@\n   operands[3] = GEN_INT (<SHORT:sizen> - UINTVAL (operands[2]));\n   return \"ubfx\\t%<GPI:w>0, %<GPI:w>1, %2, %3\";\n }\n-  [(set_attr \"type\" \"bfm\")\n-   (set_attr \"mode\" \"<GPI:MODE>\")]\n+  [(set_attr \"type\" \"bfm\")]\n )\n \n (define_insn \"*extend<GPI:mode>_ashr<SHORT:mode>\"\n@@ -3177,8 +3037,7 @@\n   operands[3] = GEN_INT (<SHORT:sizen> - UINTVAL (operands[2]));\n   return \"sbfx\\\\t%<GPI:w>0, %<GPI:w>1, %2, %3\";\n }\n-  [(set_attr \"type\" \"bfm\")\n-   (set_attr \"mode\" \"<GPI:MODE>\")]\n+  [(set_attr \"type\" \"bfm\")]\n )\n \n ;; -------------------------------------------------------------------\n@@ -3201,8 +3060,7 @@\n \t\t\t (match_operand 3 \"const_int_operand\" \"n\")))]\n   \"\"\n   \"<su>bfx\\\\t%<w>0, %<w>1, %3, %2\"\n-  [(set_attr \"type\" \"bfm\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"bfm\")]\n )\n \n ;; Bitfield Insert (insv)\n@@ -3245,8 +3103,7 @@\n      || (UINTVAL (operands[2]) + UINTVAL (operands[1])\n \t > GET_MODE_BITSIZE (<MODE>mode)))\"\n   \"bfi\\\\t%<w>0, %<w>3, %2, %1\"\n-  [(set_attr \"type\" \"bfm\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"bfm\")]\n )\n \n (define_insn \"*extr_insv_lower_reg<mode>\"\n@@ -3260,8 +3117,7 @@\n      || (UINTVAL (operands[3]) + UINTVAL (operands[1])\n \t > GET_MODE_BITSIZE (<MODE>mode)))\"\n   \"bfxil\\\\t%<w>0, %<w>2, %3, %1\"\n-  [(set_attr \"type\" \"bfm\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"bfm\")]\n )\n \n (define_insn \"*<optab><ALLX:mode>_shft_<GPI:mode>\"\n@@ -3276,8 +3132,7 @@\n \t      : GEN_INT (<GPI:sizen> - UINTVAL (operands[2]));\n   return \"<su>bfiz\\t%<GPI:w>0, %<GPI:w>1, %2, %3\";\n }\n-  [(set_attr \"type\" \"bfm\")\n-   (set_attr \"mode\" \"<GPI:MODE>\")]\n+  [(set_attr \"type\" \"bfm\")]\n )\n \n ;; XXX We should match (any_extend (ashift)) here, like (and (ashift)) below\n@@ -3290,26 +3145,23 @@\n   \"exact_log2 ((INTVAL (operands[3]) >> INTVAL (operands[2])) + 1) >= 0\n    && (INTVAL (operands[3]) & ((1 << INTVAL (operands[2])) - 1)) == 0\"\n   \"ubfiz\\\\t%<w>0, %<w>1, %2, %P3\"\n-  [(set_attr \"type\" \"bfm\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"bfm\")]\n )\n \n (define_insn \"bswap<mode>2\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n         (bswap:GPI (match_operand:GPI 1 \"register_operand\" \"r\")))]\n   \"\"\n   \"rev\\\\t%<w>0, %<w>1\"\n-  [(set_attr \"type\" \"rev\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"rev\")]\n )\n \n (define_insn \"bswaphi2\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n         (bswap:HI (match_operand:HI 1 \"register_operand\" \"r\")))]\n   \"\"\n   \"rev16\\\\t%w0, %w1\"\n-  [(set_attr \"type\" \"rev\")\n-   (set_attr \"mode\" \"HI\")]\n+  [(set_attr \"type\" \"rev\")]\n )\n \n ;; zero_extend version of above\n@@ -3318,8 +3170,7 @@\n         (zero_extend:DI (bswap:SI (match_operand:SI 1 \"register_operand\" \"r\"))))]\n   \"\"\n   \"rev\\\\t%w0, %w1\"\n-  [(set_attr \"type\" \"rev\")\n-   (set_attr \"mode\" \"SI\")]\n+  [(set_attr \"type\" \"rev\")]\n )\n \n ;; -------------------------------------------------------------------\n@@ -3335,8 +3186,7 @@\n \t FRINT))]\n   \"TARGET_FLOAT\"\n   \"frint<frint_suffix>\\\\t%<s>0, %<s>1\"\n-  [(set_attr \"type\" \"f_rint<s>\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"f_rint<s>\")]\n )\n \n ;; frcvt floating-point round to integer and convert standard patterns.\n@@ -3347,9 +3197,7 @@\n \t\t      FCVT)))]\n   \"TARGET_FLOAT\"\n   \"fcvt<frint_suffix><su>\\\\t%<GPI:w>0, %<GPF:s>1\"\n-  [(set_attr \"type\" \"f_cvtf2i\")\n-   (set_attr \"mode\" \"<GPF:MODE>\")\n-   (set_attr \"mode2\" \"<GPI:MODE>\")]\n+  [(set_attr \"type\" \"f_cvtf2i\")]\n )\n \n ;; fma - no throw\n@@ -3361,8 +3209,7 @@\n \t\t (match_operand:GPF 3 \"register_operand\" \"w\")))]\n   \"TARGET_FLOAT\"\n   \"fmadd\\\\t%<s>0, %<s>1, %<s>2, %<s>3\"\n-  [(set_attr \"type\" \"fmac<s>\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"fmac<s>\")]\n )\n \n (define_insn \"fnma<mode>4\"\n@@ -3372,8 +3219,7 @@\n \t\t (match_operand:GPF 3 \"register_operand\" \"w\")))]\n   \"TARGET_FLOAT\"\n   \"fmsub\\\\t%<s>0, %<s>1, %<s>2, %<s>3\"\n-  [(set_attr \"type\" \"fmac<s>\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"fmac<s>\")]\n )\n \n (define_insn \"fms<mode>4\"\n@@ -3383,8 +3229,7 @@\n \t\t (neg:GPF (match_operand:GPF 3 \"register_operand\" \"w\"))))]\n   \"TARGET_FLOAT\"\n   \"fnmsub\\\\t%<s>0, %<s>1, %<s>2, %<s>3\"\n-  [(set_attr \"type\" \"fmac<s>\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"fmac<s>\")]\n )\n \n (define_insn \"fnms<mode>4\"\n@@ -3394,8 +3239,7 @@\n \t\t (neg:GPF (match_operand:GPF 3 \"register_operand\" \"w\"))))]\n   \"TARGET_FLOAT\"\n   \"fnmadd\\\\t%<s>0, %<s>1, %<s>2, %<s>3\"\n-  [(set_attr \"type\" \"fmac<s>\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"fmac<s>\")]\n )\n \n ;; If signed zeros are ignored, -(a * b + c) = -a * b - c.\n@@ -3406,8 +3250,7 @@\n \t\t\t  (match_operand:GPF 3 \"register_operand\" \"w\"))))]\n   \"!HONOR_SIGNED_ZEROS (<MODE>mode) && TARGET_FLOAT\"\n   \"fnmadd\\\\t%<s>0, %<s>1, %<s>2, %<s>3\"\n-  [(set_attr \"type\" \"fmac<s>\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"fmac<s>\")]\n )\n \n ;; -------------------------------------------------------------------\n@@ -3419,59 +3262,47 @@\n         (float_extend:DF (match_operand:SF 1 \"register_operand\" \"w\")))]\n   \"TARGET_FLOAT\"\n   \"fcvt\\\\t%d0, %s1\"\n-  [(set_attr \"type\" \"f_cvt\")\n-   (set_attr \"mode\" \"DF\")\n-   (set_attr \"mode2\" \"SF\")]\n+  [(set_attr \"type\" \"f_cvt\")]\n )\n \n (define_insn \"truncdfsf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=w\")\n         (float_truncate:SF (match_operand:DF 1 \"register_operand\" \"w\")))]\n   \"TARGET_FLOAT\"\n   \"fcvt\\\\t%s0, %d1\"\n-  [(set_attr \"type\" \"f_cvt\")\n-   (set_attr \"mode\" \"SF\")\n-   (set_attr \"mode2\" \"DF\")]\n+  [(set_attr \"type\" \"f_cvt\")]\n )\n \n (define_insn \"fix_trunc<GPF:mode><GPI:mode>2\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n         (fix:GPI (match_operand:GPF 1 \"register_operand\" \"w\")))]\n   \"TARGET_FLOAT\"\n   \"fcvtzs\\\\t%<GPI:w>0, %<GPF:s>1\"\n-  [(set_attr \"type\" \"f_cvtf2i\")\n-   (set_attr \"mode\" \"<GPF:MODE>\")\n-   (set_attr \"mode2\" \"<GPI:MODE>\")]\n+  [(set_attr \"type\" \"f_cvtf2i\")]\n )\n \n (define_insn \"fixuns_trunc<GPF:mode><GPI:mode>2\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n         (unsigned_fix:GPI (match_operand:GPF 1 \"register_operand\" \"w\")))]\n   \"TARGET_FLOAT\"\n   \"fcvtzu\\\\t%<GPI:w>0, %<GPF:s>1\"\n-  [(set_attr \"type\" \"f_cvtf2i\")\n-   (set_attr \"mode\" \"<GPF:MODE>\")\n-   (set_attr \"mode2\" \"<GPI:MODE>\")]\n+  [(set_attr \"type\" \"f_cvtf2i\")]\n )\n \n (define_insn \"float<GPI:mode><GPF:mode>2\"\n   [(set (match_operand:GPF 0 \"register_operand\" \"=w\")\n         (float:GPF (match_operand:GPI 1 \"register_operand\" \"r\")))]\n   \"TARGET_FLOAT\"\n   \"scvtf\\\\t%<GPF:s>0, %<GPI:w>1\"\n-  [(set_attr \"type\" \"f_cvti2f\")\n-   (set_attr \"mode\" \"<GPF:MODE>\")\n-   (set_attr \"mode2\" \"<GPI:MODE>\")]\n+  [(set_attr \"type\" \"f_cvti2f\")]\n )\n \n (define_insn \"floatuns<GPI:mode><GPF:mode>2\"\n   [(set (match_operand:GPF 0 \"register_operand\" \"=w\")\n         (unsigned_float:GPF (match_operand:GPI 1 \"register_operand\" \"r\")))]\n   \"TARGET_FLOAT\"\n   \"ucvtf\\\\t%<GPF:s>0, %<GPI:w>1\"\n-  [(set_attr \"type\" \"f_cvt\")\n-   (set_attr \"mode\" \"<GPF:MODE>\")\n-   (set_attr \"mode2\" \"<GPI:MODE>\")]\n+  [(set_attr \"type\" \"f_cvt\")]\n )\n \n ;; -------------------------------------------------------------------\n@@ -3485,8 +3316,7 @@\n          (match_operand:GPF 2 \"register_operand\" \"w\")))]\n   \"TARGET_FLOAT\"\n   \"fadd\\\\t%<s>0, %<s>1, %<s>2\"\n-  [(set_attr \"type\" \"fadd<s>\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"fadd<s>\")]\n )\n \n (define_insn \"sub<mode>3\"\n@@ -3496,8 +3326,7 @@\n          (match_operand:GPF 2 \"register_operand\" \"w\")))]\n   \"TARGET_FLOAT\"\n   \"fsub\\\\t%<s>0, %<s>1, %<s>2\"\n-  [(set_attr \"type\" \"fadd<s>\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"fadd<s>\")]\n )\n \n (define_insn \"mul<mode>3\"\n@@ -3507,8 +3336,7 @@\n          (match_operand:GPF 2 \"register_operand\" \"w\")))]\n   \"TARGET_FLOAT\"\n   \"fmul\\\\t%<s>0, %<s>1, %<s>2\"\n-  [(set_attr \"type\" \"fmul<s>\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"fmul<s>\")]\n )\n \n (define_insn \"*fnmul<mode>3\"\n@@ -3518,8 +3346,7 @@\n \t\t (match_operand:GPF 2 \"register_operand\" \"w\")))]\n   \"TARGET_FLOAT\"\n   \"fnmul\\\\t%<s>0, %<s>1, %<s>2\"\n-  [(set_attr \"type\" \"fmul<s>\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"fmul<s>\")]\n )\n \n (define_insn \"div<mode>3\"\n@@ -3529,35 +3356,31 @@\n          (match_operand:GPF 2 \"register_operand\" \"w\")))]\n   \"TARGET_FLOAT\"\n   \"fdiv\\\\t%<s>0, %<s>1, %<s>2\"\n-  [(set_attr \"type\" \"fdiv<s>\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"fdiv<s>\")]\n )\n \n (define_insn \"neg<mode>2\"\n   [(set (match_operand:GPF 0 \"register_operand\" \"=w\")\n         (neg:GPF (match_operand:GPF 1 \"register_operand\" \"w\")))]\n   \"TARGET_FLOAT\"\n   \"fneg\\\\t%<s>0, %<s>1\"\n-  [(set_attr \"type\" \"ffarith<s>\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"ffarith<s>\")]\n )\n \n (define_insn \"sqrt<mode>2\"\n   [(set (match_operand:GPF 0 \"register_operand\" \"=w\")\n         (sqrt:GPF (match_operand:GPF 1 \"register_operand\" \"w\")))]\n   \"TARGET_FLOAT\"\n   \"fsqrt\\\\t%<s>0, %<s>1\"\n-  [(set_attr \"type\" \"fsqrt<s>\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"fsqrt<s>\")]\n )\n \n (define_insn \"abs<mode>2\"\n   [(set (match_operand:GPF 0 \"register_operand\" \"=w\")\n         (abs:GPF (match_operand:GPF 1 \"register_operand\" \"w\")))]\n   \"TARGET_FLOAT\"\n   \"fabs\\\\t%<s>0, %<s>1\"\n-  [(set_attr \"type\" \"ffarith<s>\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"ffarith<s>\")]\n )\n \n ;; Given that smax/smin do not specify the result when either input is NaN,\n@@ -3570,8 +3393,7 @@\n \t\t  (match_operand:GPF 2 \"register_operand\" \"w\")))]\n   \"TARGET_FLOAT\"\n   \"fmaxnm\\\\t%<s>0, %<s>1, %<s>2\"\n-  [(set_attr \"type\" \"f_minmax<s>\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"f_minmax<s>\")]\n )\n \n (define_insn \"smin<mode>3\"\n@@ -3580,8 +3402,7 @@\n \t\t  (match_operand:GPF 2 \"register_operand\" \"w\")))]\n   \"TARGET_FLOAT\"\n   \"fminnm\\\\t%<s>0, %<s>1, %<s>2\"\n-  [(set_attr \"type\" \"f_minmax<s>\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"f_minmax<s>\")]\n )\n \n ;; -------------------------------------------------------------------\n@@ -3614,7 +3435,6 @@\n   \"reload_completed || reload_in_progress\"\n   \"fmov\\\\t%x0, %d1\"\n   [(set_attr \"type\" \"f_mrc\")\n-   (set_attr \"mode\"   \"DI\")\n    (set_attr \"length\" \"4\")\n   ])\n \n@@ -3626,7 +3446,6 @@\n   \"reload_completed || reload_in_progress\"\n   \"fmov\\\\t%x0, %1.d[1]\"\n   [(set_attr \"type\" \"f_mrc\")\n-   (set_attr \"mode\"   \"DI\")\n    (set_attr \"length\" \"4\")\n   ])\n \n@@ -3637,7 +3456,6 @@\n   \"reload_completed || reload_in_progress\"\n   \"fmov\\\\t%0.d[1], %x1\"\n   [(set_attr \"type\" \"f_mcr\")\n-   (set_attr \"mode\"   \"DI\")\n    (set_attr \"length\" \"4\")\n   ])\n \n@@ -3647,7 +3465,6 @@\n   \"reload_completed || reload_in_progress\"\n   \"fmov\\\\t%d0, %x1\"\n   [(set_attr \"type\" \"f_mcr\")\n-   (set_attr \"mode\"   \"DI\")\n    (set_attr \"length\" \"4\")\n   ])\n \n@@ -3658,7 +3475,6 @@\n   \"reload_completed || reload_in_progress\"\n   \"fmov\\\\t%d0, %d1\"\n   [(set_attr \"type\" \"f_mcr\")\n-   (set_attr \"mode\"   \"DI\")\n    (set_attr \"length\" \"4\")\n   ])\n \n@@ -3689,8 +3505,7 @@\n \t\t  (match_operand 2 \"aarch64_valid_symref\" \"S\")))]\n   \"\"\n   \"add\\\\t%<w>0, %<w>1, :lo12:%a2\"\n-  [(set_attr \"type\" \"alu_reg\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"alu_reg\")]\n )\n \n (define_insn \"ldr_got_small_<mode>\"\n@@ -3701,8 +3516,7 @@\n \t\t    UNSPEC_GOTSMALLPIC))]\n   \"\"\n   \"ldr\\\\t%<w>0, [%1, #:got_lo12:%a2]\"\n-  [(set_attr \"type\" \"load1\")\n-   (set_attr \"mode\" \"<MODE>\")]\n+  [(set_attr \"type\" \"load1\")]\n )\n \n (define_insn \"ldr_got_small_sidi\"\n@@ -3714,8 +3528,7 @@\n \t\t    UNSPEC_GOTSMALLPIC)))]\n   \"TARGET_ILP32\"\n   \"ldr\\\\t%w0, [%1, #:got_lo12:%a2]\"\n-  [(set_attr \"type\" \"load1\")\n-   (set_attr \"mode\" \"DI\")]\n+  [(set_attr \"type\" \"load1\")]\n )\n \n (define_insn \"ldr_got_tiny\"\n@@ -3724,17 +3537,15 @@\n \t\t   UNSPEC_GOTTINYPIC))]\n   \"\"\n   \"ldr\\\\t%0, %L1\"\n-  [(set_attr \"type\" \"load1\")\n-   (set_attr \"mode\" \"DI\")]\n+  [(set_attr \"type\" \"load1\")]\n )\n \n (define_insn \"aarch64_load_tp_hard\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(unspec:DI [(const_int 0)] UNSPEC_TLS))]\n   \"\"\n   \"mrs\\\\t%0, tpidr_el0\"\n-  [(set_attr \"type\" \"mrs\")\n-   (set_attr \"mode\" \"DI\")]\n+  [(set_attr \"type\" \"mrs\")]\n )\n \n ;; The TLS ABI specifically requires that the compiler does not schedule\n@@ -3768,7 +3579,6 @@\n   \"\"\n   \"adrp\\\\t%0, %A1\\;ldr\\\\t%0, [%0, #%L1]\"\n   [(set_attr \"type\" \"load1\")\n-   (set_attr \"mode\" \"DI\")\n    (set_attr \"length\" \"8\")]\n )\n \n@@ -3780,7 +3590,6 @@\n   \"\"\n   \"add\\\\t%0, %1, #%G2\\;add\\\\t%0, %0, #%L2\"\n   [(set_attr \"type\" \"alu_reg\")\n-   (set_attr \"mode\" \"DI\")\n    (set_attr \"length\" \"8\")]\n )\n "}]}