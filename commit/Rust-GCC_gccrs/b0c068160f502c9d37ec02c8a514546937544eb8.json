{"sha": "b0c068160f502c9d37ec02c8a514546937544eb8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBjMDY4MTYwZjUwMmM5ZDM3ZWMwMmM4YTUxNDU0NjkzNzU0NGViOA==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2009-05-16T16:53:02Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2009-05-16T16:53:02Z"}, "message": "re PR fortran/31243 (Detect strings longer than 2**32 characters)\n\n\tPR fortran/31243\n\n\t* resolve.c (resolve_substring): Don't allow too large substring\n\tindexes.\n\t(gfc_resolve_substring_charlen): Fix typo.\n\t(gfc_resolve_character_operator): Fix typo.\n\t(resolve_charlen): Catch unreasonably large string lengths.\n\t* simplify.c (gfc_simplify_len): Don't error out on LEN\n\trange checks.\n\n\t* gcc/testsuite/gfortran.dg/string_1.f90: New test.\n\t* gcc/testsuite/gfortran.dg/string_2.f90: New test.\n\t* gcc/testsuite/gfortran.dg/string_3.f90: New test.\n\nFrom-SVN: r147619", "tree": {"sha": "c2d721e1845abbc3569797c630078a90a7ba5746", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2d721e1845abbc3569797c630078a90a7ba5746"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0c068160f502c9d37ec02c8a514546937544eb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0c068160f502c9d37ec02c8a514546937544eb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0c068160f502c9d37ec02c8a514546937544eb8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0c068160f502c9d37ec02c8a514546937544eb8/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ab8a8c260784fef348ec8cdae76a859a6b0081c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ab8a8c260784fef348ec8cdae76a859a6b0081c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ab8a8c260784fef348ec8cdae76a859a6b0081c"}], "stats": {"total": 107, "additions": 102, "deletions": 5}, "files": [{"sha": "0b8146430a425d2d34a61c4b461c91e5850ccd01", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c068160f502c9d37ec02c8a514546937544eb8/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c068160f502c9d37ec02c8a514546937544eb8/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b0c068160f502c9d37ec02c8a514546937544eb8", "patch": "@@ -1,3 +1,14 @@\n+2009-05-16  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/31243\n+\t* resolve.c (resolve_substring): Don't allow too large substring\n+\tindexes.\n+\t(gfc_resolve_substring_charlen): Fix typo.\n+\t(gfc_resolve_character_operator): Fix typo.\n+\t(resolve_charlen): Catch unreasonably large string lengths.\n+\t* simplify.c (gfc_simplify_len): Don't error out on LEN\n+\trange checks.\n+\n 2009-05-16  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/36031"}, {"sha": "836aeb046ac950211eb96dc867d399a6a58df8dc", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c068160f502c9d37ec02c8a514546937544eb8/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c068160f502c9d37ec02c8a514546937544eb8/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=b0c068160f502c9d37ec02c8a514546937544eb8", "patch": "@@ -3897,6 +3897,8 @@ resolve_array_ref (gfc_array_ref *ar)\n static gfc_try\n resolve_substring (gfc_ref *ref)\n {\n+  int k = gfc_validate_kind (BT_INTEGER, gfc_charlen_int_kind, false);\n+\n   if (ref->u.ss.start != NULL)\n     {\n       if (gfc_resolve_expr (ref->u.ss.start) == FAILURE)\n@@ -3954,6 +3956,16 @@ resolve_substring (gfc_ref *ref)\n \t\t     &ref->u.ss.start->where);\n \t  return FAILURE;\n \t}\n+\n+      if (compare_bound_mpz_t (ref->u.ss.end,\n+\t\t\t       gfc_integer_kinds[k].huge) == CMP_GT\n+\t  && (compare_bound (ref->u.ss.end, ref->u.ss.start) == CMP_EQ\n+\t      || compare_bound (ref->u.ss.end, ref->u.ss.start) == CMP_GT))\n+\t{\n+\t  gfc_error (\"Substring end index at %L is too large\",\n+\t\t     &ref->u.ss.end->where);\n+\t  return FAILURE;\n+\t}\n     }\n \n   return SUCCESS;\n@@ -4016,7 +4028,7 @@ gfc_resolve_substring_charlen (gfc_expr *e)\n   e->ts.cl->length = gfc_add (e->ts.cl->length, gfc_int_expr (1));\n \n   e->ts.cl->length->ts.type = BT_INTEGER;\n-  e->ts.cl->length->ts.kind = gfc_charlen_int_kind;;\n+  e->ts.cl->length->ts.kind = gfc_charlen_int_kind;\n \n   /* Make sure that the length is simplified.  */\n   gfc_simplify_expr (e->ts.cl->length, 1);\n@@ -4475,7 +4487,7 @@ gfc_resolve_character_operator (gfc_expr *e)\n \n   e->ts.cl->length = gfc_add (e1, e2);\n   e->ts.cl->length->ts.type = BT_INTEGER;\n-  e->ts.cl->length->ts.kind = gfc_charlen_int_kind;;\n+  e->ts.cl->length->ts.kind = gfc_charlen_int_kind;\n   gfc_simplify_expr (e->ts.cl->length, 0);\n   gfc_resolve_expr (e->ts.cl->length);\n \n@@ -7383,7 +7395,7 @@ resolve_index_expr (gfc_expr *e)\n static gfc_try\n resolve_charlen (gfc_charlen *cl)\n {\n-  int i;\n+  int i, k;\n \n   if (cl->resolved)\n     return SUCCESS;\n@@ -7407,6 +7419,16 @@ resolve_charlen (gfc_charlen *cl)\n       gfc_replace_expr (cl->length, gfc_int_expr (0));\n     }\n \n+  /* Check that the character length is not too large.  */\n+  k = gfc_validate_kind (BT_INTEGER, gfc_charlen_int_kind, false);\n+  if (cl->length && cl->length->expr_type == EXPR_CONSTANT\n+      && cl->length->ts.type == BT_INTEGER\n+      && mpz_cmp (cl->length->value.integer, gfc_integer_kinds[k].huge) > 0)\n+    {\n+      gfc_error (\"String length at %L is too large\", &cl->length->where);\n+      return FAILURE;\n+    }\n+\n   return SUCCESS;\n }\n "}, {"sha": "68ebb56d5f227794f4161d4469738cfbee70d562", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c068160f502c9d37ec02c8a514546937544eb8/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c068160f502c9d37ec02c8a514546937544eb8/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=b0c068160f502c9d37ec02c8a514546937544eb8", "patch": "@@ -2433,7 +2433,13 @@ gfc_simplify_len (gfc_expr *e, gfc_expr *kind)\n     {\n       result = gfc_constant_result (BT_INTEGER, k, &e->where);\n       mpz_set_si (result->value.integer, e->value.character.length);\n-      return range_check (result, \"LEN\");\n+      if (gfc_range_check (result) == ARITH_OK)\n+\treturn result;\n+      else\n+\t{\n+\t  gfc_free_expr (result);\n+\t  return NULL;\n+\t}\n     }\n \n   if (e->ts.cl != NULL && e->ts.cl->length != NULL\n@@ -2442,7 +2448,13 @@ gfc_simplify_len (gfc_expr *e, gfc_expr *kind)\n     {\n       result = gfc_constant_result (BT_INTEGER, k, &e->where);\n       mpz_set (result->value.integer, e->ts.cl->length->value.integer);\n-      return range_check (result, \"LEN\");\n+      if (gfc_range_check (result) == ARITH_OK)\n+\treturn result;\n+      else\n+\t{\n+\t  gfc_free_expr (result);\n+\t  return NULL;\n+\t}\n     }\n \n   return NULL;"}, {"sha": "478ba1f0e892cf31164f57dca6e3c78e43a7b04d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c068160f502c9d37ec02c8a514546937544eb8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c068160f502c9d37ec02c8a514546937544eb8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b0c068160f502c9d37ec02c8a514546937544eb8", "patch": "@@ -1,3 +1,10 @@\n+2009-05-16  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/31243\n+\t* gcc/testsuite/gfortran.dg/string_1.f90: New test.\n+\t* gcc/testsuite/gfortran.dg/string_2.f90: New test.\n+\t* gcc/testsuite/gfortran.dg/string_3.f90: New test.\n+\n 2009-05-16  David Billinghurst <billingd@gcc.gnu.org>\n \n \t* gfortran.dg/default_format_denormal_1.f90: XFAIL on cygwin."}, {"sha": "11dc5b7a3401150ae062423ef649c1b172a526de", "filename": "gcc/testsuite/gfortran.dg/string_1.f90", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c068160f502c9d37ec02c8a514546937544eb8/gcc%2Ftestsuite%2Fgfortran.dg%2Fstring_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c068160f502c9d37ec02c8a514546937544eb8/gcc%2Ftestsuite%2Fgfortran.dg%2Fstring_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fstring_1.f90?ref=b0c068160f502c9d37ec02c8a514546937544eb8", "patch": "@@ -0,0 +1,14 @@\n+! { dg-do compile }\n+!\n+program main\n+  implicit none\n+  integer(kind=8), parameter :: l1 = 2_8**32_8\n+  character (len=2_8**32_8+4_8), parameter :: s = \"\" ! { dg-error \"too large\" }\n+  character (len=2_8**32_8+4_8) :: ch ! { dg-error \"too large\" }\n+  character (len=l1 + 1_8) :: v ! { dg-error \"too large\" }\n+  character (len=int(huge(0_4),kind=8) + 1_8) :: z ! { dg-error \"too large\" }\n+  character (len=int(huge(0_4),kind=8) + 0_8) :: w\n+\n+  print *, len(s)\n+\n+end program main"}, {"sha": "c94c4141bc50874e6ed4c6f1915d31f802acf4a4", "filename": "gcc/testsuite/gfortran.dg/string_2.f90", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c068160f502c9d37ec02c8a514546937544eb8/gcc%2Ftestsuite%2Fgfortran.dg%2Fstring_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c068160f502c9d37ec02c8a514546937544eb8/gcc%2Ftestsuite%2Fgfortran.dg%2Fstring_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fstring_2.f90?ref=b0c068160f502c9d37ec02c8a514546937544eb8", "patch": "@@ -0,0 +1,12 @@\n+! { dg-do compile }\n+!\n+program main\n+  implicit none\n+  character(len=10) :: s\n+\n+  s = ''\n+  print *, s(1:2_8**32_8+3_8) ! { dg-error \"exceeds the string length\" }\n+  print *, s(2_8**32_8+3_8:2_8**32_8+4_8) ! { dg-error \"exceeds the string length\" }\n+  print *, len(s(1:2_8**32_8+3_8)) ! { dg-error \"exceeds the string length\" }\n+\n+end program main"}, {"sha": "7daf8d31ae665285594f99314ce182f0aaf664fe", "filename": "gcc/testsuite/gfortran.dg/string_3.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c068160f502c9d37ec02c8a514546937544eb8/gcc%2Ftestsuite%2Fgfortran.dg%2Fstring_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c068160f502c9d37ec02c8a514546937544eb8/gcc%2Ftestsuite%2Fgfortran.dg%2Fstring_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fstring_3.f90?ref=b0c068160f502c9d37ec02c8a514546937544eb8", "patch": "@@ -0,0 +1,19 @@\n+! { dg-do compile }\n+!\n+subroutine foo(i)\n+  implicit none\n+  integer, intent(in) :: i\n+  character(len=i) :: s\n+\n+  s = ''\n+  print *, s(1:2_8**32_8+3_8) ! { dg-error \"too large\" }\n+  print *, s(2_8**32_8+3_8:2_8**32_8+4_8) ! { dg-error \"too large\" }\n+  print *, len(s(1:2_8**32_8+3_8)) ! { dg-error \"too large\" }\n+  print *, len(s(2_8**32_8+3_8:2_8**32_8+4_8)) ! { dg-error \"too large\" }\n+\n+  print *, s(2_8**32_8+3_8:1)\n+  print *, s(2_8**32_8+4_8:2_8**32_8+3_8)\n+  print *, len(s(2_8**32_8+3_8:1))\n+  print *, len(s(2_8**32_8+4_8:2_8**32_8+3_8))\n+\n+end subroutine"}]}