{"sha": "05e0b2f47cf953ec7db7d9dede697420c9e48748", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVlMGIyZjQ3Y2Y5NTNlYzdkYjdkOWRlZGU2OTc0MjBjOWU0ODc0OA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1999-05-10T12:12:58Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-05-10T12:12:58Z"}, "message": "init.c (build_offset_ref): Wrap baselinks in OFFSET_REF, too.\n\n\t* init.c (build_offset_ref): Wrap baselinks in OFFSET_REF, too.\n\tDon't bother wrapping an OFFSET_TYPE around unknown_type_node.\n\t(resolve_offset_ref): Don't handle a raw baselink.\n\t* cvt.c (build_expr_type_conversion): Likewise.\n\t* typeck.c (decay_conversion, build_c_cast, convert_for_assignment,\n\tconvert_for_initialization): Likewise.\n\t* class.c (instantiate_type): Handle seeing a baselink under an\n\tOFFSET_REF.\n\t* error.c (dump_expr): Likewise.\n\t* pt.c (for_each_template_parm): Likewise.\n\t(resolve_overloaded_unification): Likewise.\n\t* tree.c (is_overloaded_fn, really_overloaded_fn): Likewise.\n\t* typeck.c (expr_sizeof): Also complain about other permutations\n\tof overloaded functions.\n\nFrom-SVN: r26861", "tree": {"sha": "4c4c13cc516a94f39270103f3ada6235e9817a60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c4c13cc516a94f39270103f3ada6235e9817a60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05e0b2f47cf953ec7db7d9dede697420c9e48748", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05e0b2f47cf953ec7db7d9dede697420c9e48748", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05e0b2f47cf953ec7db7d9dede697420c9e48748", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05e0b2f47cf953ec7db7d9dede697420c9e48748/comments", "author": null, "committer": null, "parents": [{"sha": "0ca40216d79d8b9bcf03e9c51d00357621750781", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ca40216d79d8b9bcf03e9c51d00357621750781", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ca40216d79d8b9bcf03e9c51d00357621750781"}], "stats": {"total": 88, "additions": 63, "deletions": 25}, "files": [{"sha": "929a33f74fd10216c801b213ffdeed919f504c71", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05e0b2f47cf953ec7db7d9dede697420c9e48748/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05e0b2f47cf953ec7db7d9dede697420c9e48748/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=05e0b2f47cf953ec7db7d9dede697420c9e48748", "patch": "@@ -1,3 +1,20 @@\n+1999-05-10  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* init.c (build_offset_ref): Wrap baselinks in OFFSET_REF, too.\n+\tDon't bother wrapping an OFFSET_TYPE around unknown_type_node.\n+\t(resolve_offset_ref): Don't handle a raw baselink.\n+\t* cvt.c (build_expr_type_conversion): Likewise.\n+\t* typeck.c (decay_conversion, build_c_cast, convert_for_assignment,\n+\tconvert_for_initialization): Likewise.\n+\t* class.c (instantiate_type): Handle seeing a baselink under an\n+\tOFFSET_REF.\n+\t* error.c (dump_expr): Likewise.\t\n+\t* pt.c (for_each_template_parm): Likewise.\n+\t(resolve_overloaded_unification): Likewise.\n+\t* tree.c (is_overloaded_fn, really_overloaded_fn): Likewise.\n+\t* typeck.c (expr_sizeof): Also complain about other permutations\n+\tof overloaded functions.\n+\n 1999-05-07  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* init.c (resolve_offset_ref): Don't return a raw method."}, {"sha": "b546f577716dc581207e51030daef0bd29a55fce", "filename": "gcc/cp/class.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05e0b2f47cf953ec7db7d9dede697420c9e48748/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05e0b2f47cf953ec7db7d9dede697420c9e48748/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=05e0b2f47cf953ec7db7d9dede697420c9e48748", "patch": "@@ -5004,11 +5004,14 @@ instantiate_type (lhstype, rhs, flags)\n       }\n \n     case OFFSET_REF:\n+      rhs = TREE_OPERAND (rhs, 1);\n+      if (BASELINK_P (rhs))\n+\treturn instantiate_type (lhstype, TREE_VALUE (rhs), flags);\n+\n       /* This can happen if we are forming a pointer-to-member for a\n \t member template.  */\n-      rhs = TREE_OPERAND (rhs, 1);\n       my_friendly_assert (TREE_CODE (rhs) == TEMPLATE_ID_EXPR, 0);\n-\t\n+\n       /* Fall through.  */\n \n     case TEMPLATE_ID_EXPR:"}, {"sha": "708272660d03484227322fbcb7e9ef62b26697b6", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05e0b2f47cf953ec7db7d9dede697420c9e48748/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05e0b2f47cf953ec7db7d9dede697420c9e48748/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=05e0b2f47cf953ec7db7d9dede697420c9e48748", "patch": "@@ -976,7 +976,7 @@ build_expr_type_conversion (desires, expr, complain)\n       && !(desires & WANT_NULL))\n     cp_warning (\"converting NULL to non-pointer type\");\n     \n-  if (TREE_CODE (expr) == OFFSET_REF || BASELINK_P (expr))\n+  if (TREE_CODE (expr) == OFFSET_REF)\n     expr = resolve_offset_ref (expr);\n   expr = convert_from_reference (expr);\n   basetype = TREE_TYPE (expr);"}, {"sha": "3e68c60fd23d894b101f0b649637ff944458805f", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05e0b2f47cf953ec7db7d9dede697420c9e48748/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05e0b2f47cf953ec7db7d9dede697420c9e48748/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=05e0b2f47cf953ec7db7d9dede697420c9e48748", "patch": "@@ -4772,6 +4772,8 @@ arg_assoc (k, n)\n     n = TREE_OPERAND (n, 0);\n   if (TREE_CODE (n) == COMPONENT_REF)\n     n = TREE_OPERAND (n, 1);\n+  if (TREE_CODE (n) == OFFSET_REF)\n+    n = TREE_OPERAND (n, 1);\n   while (TREE_CODE (n) == TREE_LIST)\n     n = TREE_VALUE (n);\n "}, {"sha": "ed316e1dafcdbc24b18bb1bc64b76ccdc33c8c2f", "filename": "gcc/cp/error.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05e0b2f47cf953ec7db7d9dede697420c9e48748/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05e0b2f47cf953ec7db7d9dede697420c9e48748/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=05e0b2f47cf953ec7db7d9dede697420c9e48748", "patch": "@@ -1680,11 +1680,14 @@ dump_expr (t, nop)\n \ttree ob = TREE_OPERAND (t, 0);\n \tif (is_dummy_object (ob))\n \t  {\n-\t    if (TREE_CODE (TREE_OPERAND (t, 1)) == FUNCTION_DECL)\n+\t    t = TREE_OPERAND (t, 1);\n+\t    if (TREE_CODE (t) == FUNCTION_DECL)\n \t      /* A::f */\n-\t      dump_expr (TREE_OPERAND (t, 1), 0);\n+\t      dump_expr (t, 0);\n+\t    else if (BASELINK_P (t))\n+\t      dump_expr (OVL_CURRENT (TREE_VALUE (t)), 0);\n \t    else\n-\t      dump_decl (TREE_OPERAND (t, 1), 0);\n+\t      dump_decl (t, 0);\n \t  }\n \telse\n \t  {"}, {"sha": "39736ce9199623652ac577be0bf744fd85e84f92", "filename": "gcc/cp/init.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05e0b2f47cf953ec7db7d9dede697420c9e48748/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05e0b2f47cf953ec7db7d9dede697420c9e48748/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=05e0b2f47cf953ec7db7d9dede697420c9e48748", "patch": "@@ -1604,7 +1604,7 @@ build_offset_ref (type, name)\n \t    t = ovl_cons (t, NULL_TREE);\n \t  \n \t  return build (OFFSET_REF, \n-\t\t\tbuild_offset_type (type, unknown_type_node),\n+\t\t\tunknown_type_node,\n \t\t\tdecl,\n \t\t\tbuild (TEMPLATE_ID_EXPR, \n \t\t\t       TREE_TYPE (t),\n@@ -1638,8 +1638,8 @@ build_offset_ref (type, name)\n \t  && ! allocation_temporary_p ())\n \tfnfields = copy_list (fnfields);\n \n-      TREE_TYPE (fnfields) = build_offset_type (type, unknown_type_node);\n-      return fnfields;\n+      TREE_TYPE (fnfields) = unknown_type_node;\n+      return build (OFFSET_REF, unknown_type_node, decl, fnfields);\n     }\n \n   t = member;\n@@ -1692,12 +1692,6 @@ resolve_offset_ref (exp)\n   tree member;\n   tree basetype, addr;\n \n-  if (BASELINK_P (exp))\n-    {\n-      cp_pedwarn (\"assuming & on overloaded member function\");\n-      return build_unary_op (ADDR_EXPR, exp, 0);\n-    }\n-\n   if (TREE_CODE (exp) == OFFSET_REF)\n     {\n       member = TREE_OPERAND (exp, 1);\n@@ -1716,6 +1710,18 @@ resolve_offset_ref (exp)\n       base = current_class_ref;\n     }\n \n+  if (BASELINK_P (member))\n+    {\n+      cp_pedwarn (\"assuming & on overloaded member function\");\n+      return build_unary_op (ADDR_EXPR, exp, 0);\n+    }\n+\n+  if (TREE_CODE (TREE_TYPE (member)) == METHOD_TYPE)\n+    {\n+      cp_pedwarn (\"assuming & on `%E'\", member);\n+      return build_unary_op (ADDR_EXPR, exp, 0);\n+    }\n+\n   if ((TREE_CODE (member) == VAR_DECL\n        && ! TYPE_PTRMEMFUNC_P (TREE_TYPE (member))\n        && ! TYPE_PTRMEM_P (TREE_TYPE (member)))\n@@ -1727,12 +1733,6 @@ resolve_offset_ref (exp)\n       return member;\n     }\n \n-  if (TREE_CODE (TREE_TYPE (member)) == METHOD_TYPE)\n-    {\n-      cp_pedwarn (\"assuming & on `%E'\", member);\n-      return build_unary_op (ADDR_EXPR, exp, 0);\n-    }\n-\n   if (TREE_CODE (TREE_TYPE (member)) == POINTER_TYPE\n       && TREE_CODE (TREE_TYPE (TREE_TYPE (member))) == METHOD_TYPE)\n     return member;"}, {"sha": "442f1b0495322a0efea9fbf5526caa33bdffa9e3", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05e0b2f47cf953ec7db7d9dede697420c9e48748/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05e0b2f47cf953ec7db7d9dede697420c9e48748/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=05e0b2f47cf953ec7db7d9dede697420c9e48748", "patch": "@@ -4030,6 +4030,7 @@ for_each_template_parm (t, fn, data)\n       return for_each_template_parm (TREE_TYPE (t), fn, data);\n \n     case ARRAY_REF:\n+    case OFFSET_REF:\n       return (for_each_template_parm (TREE_OPERAND (t, 0), fn, data)\n \t      || for_each_template_parm (TREE_OPERAND (t, 1), fn, data));\n \n@@ -7662,6 +7663,9 @@ resolve_overloaded_unification (tparms, targs, parm, arg, strict,\n        function name.  */\n     arg = TREE_OPERAND (arg, 1);\n \n+  if (TREE_CODE (arg) == OFFSET_REF)\n+    arg = TREE_OPERAND (arg, 1);\n+\n   /* Strip baselink information.  */\n   while (TREE_CODE (arg) == TREE_LIST)\n     arg = TREE_VALUE (arg);"}, {"sha": "9012810d051d5cc3d3a600267a4bf80638e21faa", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05e0b2f47cf953ec7db7d9dede697420c9e48748/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05e0b2f47cf953ec7db7d9dede697420c9e48748/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=05e0b2f47cf953ec7db7d9dede697420c9e48748", "patch": "@@ -1224,6 +1224,8 @@ is_overloaded_fn (x)\n      tree x;\n {\n   /* A baselink is also considered an overloaded function.  */\n+  if (TREE_CODE (x) == OFFSET_REF)\n+    x = TREE_OPERAND (x, 1);\n   if (BASELINK_P (x))\n     x = TREE_VALUE (x);\n   return (TREE_CODE (x) == FUNCTION_DECL\n@@ -1237,6 +1239,8 @@ really_overloaded_fn (x)\n      tree x;\n {     \n   /* A baselink is also considered an overloaded function.  */\n+  if (TREE_CODE (x) == OFFSET_REF)\n+    x = TREE_OPERAND (x, 1);\n   if (BASELINK_P (x))\n     x = TREE_VALUE (x);\n   return (TREE_CODE (x) == OVERLOAD "}, {"sha": "4822dbda4eace8ac90c2c15bed2ec70dc9e4a021", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05e0b2f47cf953ec7db7d9dede697420c9e48748/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05e0b2f47cf953ec7db7d9dede697420c9e48748/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=05e0b2f47cf953ec7db7d9dede697420c9e48748", "patch": "@@ -1638,6 +1638,11 @@ expr_sizeof (e)\n       pedwarn (\"ANSI C++ forbids taking the sizeof a function type\");\n       return size_int (1);\n     }\n+  else if (type_unknown_p (e))\n+    {\n+      incomplete_type_error (e, TREE_TYPE (e));\n+      return size_int (1);\n+    }\n \n   return c_sizeof (TREE_TYPE (e));\n }\n@@ -1717,7 +1722,7 @@ decay_conversion (exp)\n   register tree type;\n   register enum tree_code code;\n \n-  if (TREE_CODE (exp) == OFFSET_REF || BASELINK_P (exp))\n+  if (TREE_CODE (exp) == OFFSET_REF)\n     exp = resolve_offset_ref (exp);\n \n   type = TREE_TYPE (exp);\n@@ -5731,7 +5736,7 @@ build_c_cast (type, expr)\n       && TREE_TYPE (value) == TREE_TYPE (TREE_OPERAND (value, 0)))\n     value = TREE_OPERAND (value, 0);\n \n-  if (TREE_CODE (value) == OFFSET_REF || BASELINK_P (value))\n+  if (TREE_CODE (value) == OFFSET_REF)\n     value = resolve_offset_ref (value);\n \n   if (TREE_CODE (type) == ARRAY_TYPE)\n@@ -6703,7 +6708,7 @@ convert_for_assignment (type, rhs, errtype, fndecl, parmnum)\n   if (codel == OFFSET_TYPE)\n     my_friendly_abort (990505);\n \n-  if (TREE_CODE (rhs) == OFFSET_REF || BASELINK_P (rhs))\n+  if (TREE_CODE (rhs) == OFFSET_REF)\n     rhs = resolve_offset_ref (rhs);\n \n   /* Strip NON_LVALUE_EXPRs since we aren't using as an lvalue.  */\n@@ -7133,7 +7138,7 @@ convert_for_initialization (exp, type, rhs, flags, errtype, fndecl, parmnum)\n       || (TREE_CODE (rhs) == TREE_LIST && TREE_VALUE (rhs) == error_mark_node))\n     return error_mark_node;\n \n-  if (TREE_CODE (rhs) == OFFSET_REF || BASELINK_P (rhs))\n+  if (TREE_CODE (rhs) == OFFSET_REF)\n     {\n       rhs = resolve_offset_ref (rhs);\n       if (rhs == error_mark_node)"}]}