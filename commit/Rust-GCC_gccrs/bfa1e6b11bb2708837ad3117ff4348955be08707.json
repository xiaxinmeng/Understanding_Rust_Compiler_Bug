{"sha": "bfa1e6b11bb2708837ad3117ff4348955be08707", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZhMWU2YjExYmIyNzA4ODM3YWQzMTE3ZmY0MzQ4OTU1YmUwODcwNw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-05-31T12:14:56Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-05-31T12:14:56Z"}, "message": "acconfig.h (_GLIBCPP_BUGGY_FLOAT_COMPLEX): Remove.\n\n\n2001-05-30  Benjamin Kosnik  <bkoz@redat.com>\n\n\t* acconfig.h (_GLIBCPP_BUGGY_FLOAT_COMPLEX): Remove.\n\t(_GLIBCPP_BUGGY_COMPLEX): Remove.\n\t* config.h.in: Regenerate.\n\t* acinclude.m4 (GLIBCPP_CHECK_COMPLEX_MATH_COMPILER_SUPPORT): Remove.\n\t* aclocal.m4: Regenerate.\n\t* configure.in: Don't call it.\n\t* configure: Regenerate.\n\n\tlibstdc++/2970\n\t* src/complex_io.cc (operator<<(ostream&, const complex&): Fix.\n\t* testsuite/26_numerics/complex_inserters_extractors.cc (test01):\n\tNew test.\n\n\tlibstdc++/2985\n\t* include/bits/std_complex.h: Include sstream. Put definitions for\n\tcomplex inserters and extractors here, and remove them from...\n\t* src/complex_io.cc: ...here.\n\t* include/bits/basic_ios.h (basic_ios::__numput_type): Add _Traits\n\tparameter.\n\t(basic_ios::__numget_type): Same.\n\t* include/bits/std_istream.h: Same.\n\t* include/bits/std_ostream.h: Same.\n\t* include/bits/sbuf_iter.h (ostreambuf_iterator): Fix typo in base\n\tclass iterator template arguments.\n\t* src/locale-inst.cc: Add explicit has_facet instantiations.\n\t* include/bits/basic_ios.h (basic_ios::_M_get_fctype_ios): Remove.\n\t(_M_get_fnumput): Remove.\n\t(_M_get_fnumget): Remove.\n\t(basic_ios::_M_check_facet): New function.\n\t(basic_ios::_M_cache_facets): New function.\n\t* include/bits/basic_ios.tcc: Definition for _M_cache_facets.\n\t(basic_ios::imbue): Call _M_cache_facets.\n\t(basic_ios::init): Same.\n\t* include/bits/istream.tcc: Format, use _M_check_facet.\n\t* include/bits/ostream.tcc: Same.\n\t* include/bits/locale_facets.tcc (__output_float): Change\n\tsignature, add _Traits.\n\t* testsuite/26_numerics/complex_inserters_extractors.cc (test02):\n\tNew test.\n\nFrom-SVN: r42743", "tree": {"sha": "ceaaac0bdc60dd79d70b07301e7aa375cd843bb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ceaaac0bdc60dd79d70b07301e7aa375cd843bb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfa1e6b11bb2708837ad3117ff4348955be08707", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfa1e6b11bb2708837ad3117ff4348955be08707", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfa1e6b11bb2708837ad3117ff4348955be08707", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfa1e6b11bb2708837ad3117ff4348955be08707/comments", "author": null, "committer": null, "parents": [{"sha": "20293b4c1b6b6de3e77775c119f32bfcec41f869", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20293b4c1b6b6de3e77775c119f32bfcec41f869", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20293b4c1b6b6de3e77775c119f32bfcec41f869"}], "stats": {"total": 3512, "additions": 1636, "deletions": 1876}, "files": [{"sha": "041ba92622afd3bbe51aceedd9fd00220f66bba6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bfa1e6b11bb2708837ad3117ff4348955be08707", "patch": "@@ -1,3 +1,45 @@\n+2001-05-30  Benjamin Kosnik  <bkoz@redat.com>\n+\n+\t* acconfig.h (_GLIBCPP_BUGGY_FLOAT_COMPLEX): Remove.\n+\t(_GLIBCPP_BUGGY_COMPLEX): Remove.\n+\t* config.h.in: Regenerate.\n+\t* acinclude.m4 (GLIBCPP_CHECK_COMPLEX_MATH_COMPILER_SUPPORT): Remove.\n+\t* aclocal.m4: Regenerate.\n+\t* configure.in: Don't call it.\n+\t* configure: Regenerate.\n+\n+\tlibstdc++/2970\n+\t* src/complex_io.cc (operator<<(ostream&, const complex&): Fix.\n+\t* testsuite/26_numerics/complex_inserters_extractors.cc (test01):\n+\tNew test.\n+\n+\tlibstdc++/2985\n+\t* include/bits/std_complex.h: Include sstream. Put definitions for\n+\tcomplex inserters and extractors here, and remove them from...\n+\t* src/complex_io.cc: ...here.\n+\t* include/bits/basic_ios.h (basic_ios::__numput_type): Add _Traits\n+\tparameter.\n+\t(basic_ios::__numget_type): Same.\n+\t* include/bits/std_istream.h: Same.\n+\t* include/bits/std_ostream.h: Same.\n+\t* include/bits/sbuf_iter.h (ostreambuf_iterator): Fix typo in base\n+\tclass iterator template arguments.\n+\t* src/locale-inst.cc: Add explicit has_facet instantiations.\n+\t* include/bits/basic_ios.h (basic_ios::_M_get_fctype_ios): Remove.\n+\t(_M_get_fnumput): Remove.\n+\t(_M_get_fnumget): Remove.\n+\t(basic_ios::_M_check_facet): New function.\n+\t(basic_ios::_M_cache_facets): New function.\n+\t* include/bits/basic_ios.tcc: Definition for _M_cache_facets.\n+\t(basic_ios::imbue): Call _M_cache_facets.\n+\t(basic_ios::init): Same.\n+\t* include/bits/istream.tcc: Format, use _M_check_facet.\n+\t* include/bits/ostream.tcc: Same.\n+\t* include/bits/locale_facets.tcc (__output_float): Change\n+\tsignature, add _Traits.\n+\t* testsuite/26_numerics/complex_inserters_extractors.cc (test02):\n+\tNew test.\n+\n 2001-05-30  Loren J. Rittle  <ljrittle@acm.org>\n \n \t* include/bits/c++config (__USE_MALLOC): Do not define it."}, {"sha": "c81faa079d8183506f28315d47741a9a02ae07c9", "filename": "libstdc++-v3/acconfig.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2Facconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2Facconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facconfig.h?ref=bfa1e6b11bb2708837ad3117ff4348955be08707", "patch": "@@ -1,11 +1,5 @@\n // acconfig.h symbols and macros for libstdc++ v3 -*- C++ -*-\n \n-// Define if GCC support for __complex__ float is buggy.\n-#undef _GLIBCPP_BUGGY_FLOAT_COMPLEX\n-\n-// Define if GCC support for __complex__ is buggy.\n-#undef _GLIBCPP_BUGGY_COMPLEX\n-\n // Include support for multiple threads, e.g., in the I/O package.\n #undef _GLIBCPP_USE_THREADS\n "}, {"sha": "a2fb5ec97e5affac8a14c6153a25a9f8bf3bb24d", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=bfa1e6b11bb2708837ad3117ff4348955be08707", "patch": "@@ -863,75 +863,6 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n ])\n \n \n-dnl\n-dnl Check to see if this version of GNU C++ is afflicted by bugs in\n-dnl __complex__ float support.\n-dnl\n-dnl Define _GLIBCPP_BUGGY_FLOAT_COMPLEX if buggy.\n-dnl\n-dnl Check to see if this version of GNU C++ is afflicted by bugs in \n-dnl __complex__ support.Check for buggy __complex__ that will cause ICE in\n-dnl gcc-2.95.x when using the library, unless we define the default copy\n-dnl ctor in the specializations of complex<>. \n-dnl \n-dnl Define _GLIBCPP_BUGGY_COMPLEX if buggy.\n-dnl GLIBCPP_CHECK_COMPLEX_MATH_COMPILER_SUPPORT\n-AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_COMPILER_SUPPORT, [\n-  AC_REQUIRE([AC_PROG_CXX])\n-\n-  AC_MSG_CHECKING([for GNU C++ __complex__ support])\n-  AC_CACHE_VAL(glibcpp_cv_complex, [\n-    AC_LANG_SAVE\n-    AC_LANG_CPLUSPLUS\n-    AC_TRY_COMPILE([struct dcomplex { __complex__ double x; }; \\\n-                    dcomplex f(const dcomplex& x) { return dcomplex(x); }], \\\n-                    [ dcomplex x; f(x); ],\n-      glibcpp_cv_complex=ok,\n-      glibcpp_cv_complex=buggy\n-    )\n-    AC_LANG_RESTORE\n-  ])\n-  AC_MSG_RESULT($glibcpp_cv_complex)\n-  if test $glibcpp_cv_complex = buggy; then\n-    AC_DEFINE(_GLIBCPP_BUGGY_COMPLEX)\n-  fi\n-\n-  AC_MSG_CHECKING([for GNU C++ __complex__ float support])\n-  AC_CACHE_VAL(glibcpp_cv_float_complex, [\n-    AC_LANG_SAVE\n-    AC_LANG_CPLUSPLUS\n-    rm -f conftest.h\n-    cat > conftest.h <<EOB\n-      //\n-      // Check for buggy __complex__ that causes ICE in most versions of egcs\n-      // and gcc-2.95.x on certain platforms (eg., x86-win32).\n-      //\n-      // See http://gcc.gnu.org/ml/gcc-bugs/1999-07n/msg00845.html for\n-      // more info on the bug itself.\n-      //\n-      struct\n-      float_complex\n-      {\n-       __complex__ float m_value;\n-       float_complex (float = 0.0f, float = 0.0f);\n-       float_complex (__complex__ float val) : m_value (val) {}\n-       float_complex foo (const float_complex &val)\n-         { return float_complex (~val.m_value); }\n-      };\n-EOB\n-    AC_TRY_COMPILE([#include \"conftest.h\"], ,\n-      glibcpp_cv_float_complex=ok,\n-      glibcpp_cv_float_complex=buggy\n-    )\n-    AC_LANG_RESTORE\n-  ])\n-  AC_MSG_RESULT($glibcpp_cv_float_complex)\n-  if test $glibcpp_cv_float_complex = buggy; then\n-    AC_DEFINE(_GLIBCPP_BUGGY_FLOAT_COMPLEX)\n-  fi\n-])\n-\n-\n dnl\n dnl Check for special debugging mode; not for production use.\n dnl"}, {"sha": "17c97b39499f8728b0550bc2b2e280865eb1f4f8", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=bfa1e6b11bb2708837ad3117ff4348955be08707", "patch": "@@ -875,75 +875,6 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n ])\n \n \n-dnl\n-dnl Check to see if this version of GNU C++ is afflicted by bugs in\n-dnl __complex__ float support.\n-dnl\n-dnl Define _GLIBCPP_BUGGY_FLOAT_COMPLEX if buggy.\n-dnl\n-dnl Check to see if this version of GNU C++ is afflicted by bugs in \n-dnl __complex__ support.Check for buggy __complex__ that will cause ICE in\n-dnl gcc-2.95.x when using the library, unless we define the default copy\n-dnl ctor in the specializations of complex<>. \n-dnl \n-dnl Define _GLIBCPP_BUGGY_COMPLEX if buggy.\n-dnl GLIBCPP_CHECK_COMPLEX_MATH_COMPILER_SUPPORT\n-AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_COMPILER_SUPPORT, [\n-  AC_REQUIRE([AC_PROG_CXX])\n-\n-  AC_MSG_CHECKING([for GNU C++ __complex__ support])\n-  AC_CACHE_VAL(glibcpp_cv_complex, [\n-    AC_LANG_SAVE\n-    AC_LANG_CPLUSPLUS\n-    AC_TRY_COMPILE([struct dcomplex { __complex__ double x; }; \\\n-                    dcomplex f(const dcomplex& x) { return dcomplex(x); }], \\\n-                    [ dcomplex x; f(x); ],\n-      glibcpp_cv_complex=ok,\n-      glibcpp_cv_complex=buggy\n-    )\n-    AC_LANG_RESTORE\n-  ])\n-  AC_MSG_RESULT($glibcpp_cv_complex)\n-  if test $glibcpp_cv_complex = buggy; then\n-    AC_DEFINE(_GLIBCPP_BUGGY_COMPLEX)\n-  fi\n-\n-  AC_MSG_CHECKING([for GNU C++ __complex__ float support])\n-  AC_CACHE_VAL(glibcpp_cv_float_complex, [\n-    AC_LANG_SAVE\n-    AC_LANG_CPLUSPLUS\n-    rm -f conftest.h\n-    cat > conftest.h <<EOB\n-      //\n-      // Check for buggy __complex__ that causes ICE in most versions of egcs\n-      // and gcc-2.95.x on certain platforms (eg., x86-win32).\n-      //\n-      // See http://gcc.gnu.org/ml/gcc-bugs/1999-07n/msg00845.html for\n-      // more info on the bug itself.\n-      //\n-      struct\n-      float_complex\n-      {\n-       __complex__ float m_value;\n-       float_complex (float = 0.0f, float = 0.0f);\n-       float_complex (__complex__ float val) : m_value (val) {}\n-       float_complex foo (const float_complex &val)\n-         { return float_complex (~val.m_value); }\n-      };\n-EOB\n-    AC_TRY_COMPILE([#include \"conftest.h\"], ,\n-      glibcpp_cv_float_complex=ok,\n-      glibcpp_cv_float_complex=buggy\n-    )\n-    AC_LANG_RESTORE\n-  ])\n-  AC_MSG_RESULT($glibcpp_cv_float_complex)\n-  if test $glibcpp_cv_float_complex = buggy; then\n-    AC_DEFINE(_GLIBCPP_BUGGY_FLOAT_COMPLEX)\n-  fi\n-])\n-\n-\n dnl\n dnl Check for special debugging mode; not for production use.\n dnl"}, {"sha": "a7231d4d6ed528521d7ac0e1575d39bedf748d55", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=bfa1e6b11bb2708837ad3117ff4348955be08707", "patch": "@@ -3,12 +3,6 @@\n /* Define if you have a working `mmap' system call.  */\n #undef HAVE_MMAP\n \n-// Define if GCC support for __complex__ float is buggy.\n-#undef _GLIBCPP_BUGGY_FLOAT_COMPLEX\n-\n-// Define if GCC support for __complex__ is buggy.\n-#undef _GLIBCPP_BUGGY_COMPLEX\n-\n // Include support for multiple threads, e.g., in the I/O package.\n #undef _GLIBCPP_USE_THREADS\n "}, {"sha": "53f051a0f95beeb9e215cc732c0c1f0897b269fe", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 838, "deletions": 1105, "changes": 1943, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=bfa1e6b11bb2708837ad3117ff4348955be08707"}, {"sha": "5ad6a9629b378f73f7fd30fa05b063395de9d3e6", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=bfa1e6b11bb2708837ad3117ff4348955be08707", "patch": "@@ -169,7 +169,6 @@ if test -n \"$with_cross_host\"; then\n \t  AC_DEFINE(HAVE_TANHL)\n \tfi\n \tGLIBCPP_CHECK_COMPLEX_MATH_SUPPORT\n-\tGLIBCPP_CHECK_COMPLEX_MATH_COMPILER_SUPPORT\n \tGLIBCPP_CHECK_WCHAR_T_SUPPORT\n \tos_include_dir=\"config/os/gnu-linux\"\n \t# GLIBCPP_CHECK_STDLIB_SUPPORT\n@@ -189,8 +188,6 @@ if test -n \"$with_cross_host\"; then\n \n \tos_include_dir=\"config/os/newlib\"\n \n-\tAC_DEFINE(_GLIBCPP_BUGGY_FLOAT_COMPLEX)\n-\tAC_DEFINE(_GLIBCPP_BUGGY_COMPLEX)\n \t# need to check for faster f versions of math functions, ie sinf?\n \t;;\n   esac\n@@ -213,7 +210,6 @@ else\n   GLIBCPP_CHECK_BUILTIN_MATH_SUPPORT\n   GLIBCPP_CHECK_MATH_SUPPORT\n   GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT\n-  GLIBCPP_CHECK_COMPLEX_MATH_COMPILER_SUPPORT\n   GLIBCPP_CHECK_WCHAR_T_SUPPORT\n   GLIBCPP_CHECK_STDLIB_SUPPORT\n "}, {"sha": "7eb6d7a2244e03b8c1b9c9933416802864eb93f3", "filename": "libstdc++-v3/include/bits/basic_ios.h", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h?ref=bfa1e6b11bb2708837ad3117ff4348955be08707", "patch": "@@ -35,14 +35,13 @@\n #include <bits/sbuf_iter.h>\n #include <bits/locale_facets.h>\n \n-namespace std {\n-\n+namespace std \n+{\n   // 27.4.5  Template class basic_ios\n   template<typename _CharT, typename _Traits>\n     class basic_ios : public ios_base\n     {\n     public:\n-\n       // Types:\n       typedef _CharT \t\t\t\tchar_type;\n       typedef typename _Traits::int_type \tint_type;\n@@ -51,11 +50,10 @@ namespace std {\n       typedef _Traits \t\t\t\ttraits_type;\n \n       // Non-standard Types:\n-      typedef ctype<_CharT>           \t\t__ctype_type;\n-      // From ostream\n-      typedef ostreambuf_iterator<_CharT>\t\t__ostreambuf_iter;\n+      typedef ctype<_CharT>           \t\t\t__ctype_type;\n+      typedef ostreambuf_iterator<_CharT, _Traits>      __ostreambuf_iter;\n       typedef num_put<_CharT, __ostreambuf_iter>        __numput_type;\n-      typedef istreambuf_iterator<_CharT>\t\t__istreambuf_iter;\n+      typedef istreambuf_iterator<_CharT, _Traits>\t__istreambuf_iter;\n       typedef num_get<_CharT, __istreambuf_iter>        __numget_type;\n       \n       // Data members:\n@@ -76,19 +74,10 @@ namespace std {\n       const __numget_type* \t\t_M_fnumget;\n \n     public:\n-\n       inline const __ctype_type*\t\n       _M_get_fctype_ios(void)\n       { return _M_ios_fctype; }\n \n-      inline const __numget_type* \n-      _M_get_fnumget(void)\n-      { return _M_fnumget; }\n-\n-      inline const __numput_type* \n-      _M_get_fnumput(void)\n-      { return _M_fnumput; }\n-\n       operator void*() const \n       { return this->fail() ? 0 : const_cast<basic_ios*>(this); }\n \n@@ -202,8 +191,21 @@ namespace std {\n \n       void \n       init(basic_streambuf<_CharT, _Traits>* __sb);\n+\n+      bool\n+      _M_check_facet(const locale::facet* __f)\n+      {\n+\tbool __ret = false;\n+\tif (__f)\n+\t  __ret = true;\n+\telse\n+\t  __throw_bad_cast();\n+\treturn __ret;\n+      }\n+\n+      void\n+      _M_cache_facets(const locale& __loc);\n     };\n-  \n } // namespace std\n \n #ifdef _GLIBCPP_NO_TEMPLATE_EXPORT"}, {"sha": "6a3db778c20d2235f84b8149ca5a385c012e280b", "filename": "libstdc++-v3/include/bits/basic_ios.tcc", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc?ref=bfa1e6b11bb2708837ad3117ff4348955be08707", "patch": "@@ -105,9 +105,7 @@ namespace std {\n     {\n       locale __old(this->getloc());\n       ios_base::imbue(__loc);\n-      _M_ios_fctype = &use_facet<__ctype_type>(__loc);\n-      _M_fnumput = &use_facet<__numput_type>(__loc); \n-      _M_fnumget = &use_facet<__numget_type>(__loc); \n+      _M_cache_facets(__loc);\n       if (this->rdbuf() != 0)\n \tthis->rdbuf()->pubimbue(__loc);\n       return __old;\n@@ -119,19 +117,29 @@ namespace std {\n     {\n       // NB: This may be called more than once on the same object.\n       ios_base::_M_init();\n-      _M_ios_fctype = &use_facet<__ctype_type>(_M_ios_locale);\n-      // Should be filled in by ostream and istream, respectively.\n-      _M_fnumput = &use_facet<__numput_type>(_M_ios_locale); \n-      _M_fnumget = &use_facet<__numget_type>(_M_ios_locale); \n+      _M_cache_facets(_M_ios_locale);\n       _M_tie = 0;\n       _M_fill = this->widen(' ');\n       _M_exception = goodbit;\n       _M_streambuf = __sb;\n       _M_streambuf_state = __sb ? goodbit : badbit;\n     }\n \n+  template<typename _CharT, typename _Traits>\n+    void\n+    basic_ios<_CharT, _Traits>::_M_cache_facets(const locale& __loc)\n+    {\n+      if (has_facet<__ctype_type>(__loc))\n+\t_M_ios_fctype = &use_facet<__ctype_type>(__loc);\n+      // Should be filled in by ostream and istream, respectively.\n+      if (has_facet<__numput_type>(__loc))\n+\t_M_fnumput = &use_facet<__numput_type>(__loc); \n+      if (has_facet<__numget_type>(__loc))\n+\t_M_fnumget = &use_facet<__numget_type>(__loc); \n+    }\n } // namespace std\n \n #endif // _CPP_BITS_BASICIOS_TCC\n \n \n+"}, {"sha": "45f8ed2267c443fa965c897bd16693bb26dd0f63", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 548, "deletions": 481, "changes": 1029, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=bfa1e6b11bb2708837ad3117ff4348955be08707", "patch": "@@ -31,8 +31,8 @@\n \n #include <bits/std_locale.h>\n \n-namespace std {\n-\n+namespace std \n+{\n   template<typename _CharT, typename _Traits>\n     basic_istream<_CharT, _Traits>::sentry::\n     sentry(basic_istream<_CharT, _Traits>& __in, bool __noskipws)\n@@ -103,18 +103,21 @@ namespace std {\n       sentry __cerb(*this, false);\n       if (__cerb) \n \t{\n-\t  try {\n-\t    ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t    _M_fnumget->get(*this, 0, *this, __err, __n);\n-\t    this->setstate(__err);\n-\t  }\n-\t  catch(exception& __fail){\n-\t    // 27.6.1.2.1 Common requirements.\n-\t    // Turn this on without causing an ios::failure to be thrown.\n-\t    this->setstate(ios_base::badbit);\n-\t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      __throw_exception_again;\n-\t  }\n+\t  try \n+\t    {\n+\t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t      if (_M_check_facet(_M_fnumget))\n+\t\t_M_fnumget->get(*this, 0, *this, __err, __n);\n+\t      this->setstate(__err);\n+\t    }\n+\t  catch(exception& __fail)\n+\t    {\n+\t      // 27.6.1.2.1 Common requirements.\n+\t      // Turn this on without causing an ios::failure to be thrown.\n+\t      this->setstate(ios_base::badbit);\n+\t      if ((this->exceptions() & ios_base::badbit) != 0)\n+\t\t__throw_exception_again;\n+\t    }\n \t}\n       return *this;\n     }\n@@ -127,18 +130,21 @@ namespace std {\n       sentry __cerb(*this, false);\n       if (__cerb) \n \t{\n-\t  try {\n-\t    ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t    _M_fnumget->get(*this, 0, *this, __err, __n);\n-\t    this->setstate(__err);\n-\t  }\n-\t  catch(exception& __fail){\n-\t    // 27.6.1.2.1 Common requirements.\n-\t    // Turn this on without causing an ios::failure to be thrown.\n-\t    this->setstate(ios_base::badbit);\n-\t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      __throw_exception_again;\n-\t  }\n+\t  try \n+\t    {\n+\t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t      if (_M_check_facet(_M_fnumget))\n+\t\t_M_fnumget->get(*this, 0, *this, __err, __n);\n+\t      this->setstate(__err);\n+\t    }\n+\t  catch(exception& __fail)\n+\t    {\n+\t      // 27.6.1.2.1 Common requirements.\n+\t      // Turn this on without causing an ios::failure to be thrown.\n+\t      this->setstate(ios_base::badbit);\n+\t      if ((this->exceptions() & ios_base::badbit) != 0)\n+\t\t__throw_exception_again;\n+\t    }\n \t}\n       return *this;\n     }\n@@ -151,18 +157,21 @@ namespace std {\n       sentry __cerb(*this, false);\n       if (__cerb) \n \t{\n-\t  try {\n-\t    ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t    _M_fnumget->get(*this, 0, *this, __err, __n);\n-\t    this->setstate(__err);\n-\t  }\n-\t  catch(exception& __fail){\n-\t    // 27.6.1.2.1 Common requirements.\n-\t    // Turn this on without causing an ios::failure to be thrown.\n-\t    this->setstate(ios_base::badbit);\n-\t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      __throw_exception_again;\n-\t  }\n+\t  try \n+\t    {\n+\t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t      if (_M_check_facet(_M_fnumget))\n+\t\t_M_fnumget->get(*this, 0, *this, __err, __n);\n+\t      this->setstate(__err);\n+\t    }\n+\t  catch(exception& __fail)\n+\t    {\n+\t      // 27.6.1.2.1 Common requirements.\n+\t      // Turn this on without causing an ios::failure to be thrown.\n+\t      this->setstate(ios_base::badbit);\n+\t      if ((this->exceptions() & ios_base::badbit) != 0)\n+\t\t__throw_exception_again;\n+\t    }\n \t}\n       return *this;\n     }\n@@ -175,18 +184,21 @@ namespace std {\n       sentry __cerb(*this, false);\n       if (__cerb) \n \t{\n-\t  try {\n-\t    ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t    _M_fnumget->get(*this, 0, *this, __err, __n);\n-\t    this->setstate(__err);\n-\t  }\n-\t  catch(exception& __fail){\n-\t    // 27.6.1.2.1 Common requirements.\n-\t    // Turn this on without causing an ios::failure to be thrown.\n-\t    this->setstate(ios_base::badbit);\n-\t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      __throw_exception_again;\n-\t  }\n+\t  try \n+\t    {\n+\t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t      if (_M_check_facet(_M_fnumget))\n+\t\t_M_fnumget->get(*this, 0, *this, __err, __n);\n+\t      this->setstate(__err);\n+\t    }\n+\t  catch(exception& __fail)\n+\t    {\n+\t      // 27.6.1.2.1 Common requirements.\n+\t      // Turn this on without causing an ios::failure to be thrown.\n+\t      this->setstate(ios_base::badbit);\n+\t      if ((this->exceptions() & ios_base::badbit) != 0)\n+\t\t__throw_exception_again;\n+\t    }\n \t}\n       return *this;\n     }\n@@ -199,18 +211,21 @@ namespace std {\n       sentry __cerb(*this, false);\n       if (__cerb) \n \t{\n-\t  try {\n-\t    ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t    _M_fnumget->get(*this, 0, *this, __err, __n);\n-\t    this->setstate(__err);\n-\t  }\n-\t  catch(exception& __fail){\n-\t    // 27.6.1.2.1 Common requirements.\n-\t    // Turn this on without causing an ios::failure to be thrown.\n-\t    this->setstate(ios_base::badbit);\n-\t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      __throw_exception_again;\n-\t  }\n+\t  try \n+\t    {\n+\t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t      if (_M_check_facet(_M_fnumget))\n+\t\t_M_fnumget->get(*this, 0, *this, __err, __n);\n+\t      this->setstate(__err);\n+\t    }\n+\t  catch(exception& __fail)\n+\t    {\n+\t      // 27.6.1.2.1 Common requirements.\n+\t      // Turn this on without causing an ios::failure to be thrown.\n+\t      this->setstate(ios_base::badbit);\n+\t      if ((this->exceptions() & ios_base::badbit) != 0)\n+\t\t__throw_exception_again;\n+\t    }\n \t}\n       return *this;\n     }\n@@ -223,18 +238,21 @@ namespace std {\n       sentry __cerb(*this, false);\n       if (__cerb) \n \t{\n-\t  try {\n-\t    ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t    _M_fnumget->get(*this, 0, *this, __err, __n);\n-\t    this->setstate(__err);\n-\t  }\n-\t  catch(exception& __fail){\n-\t    // 27.6.1.2.1 Common requirements.\n-\t    // Turn this on without causing an ios::failure to be thrown.\n-\t    this->setstate(ios_base::badbit);\n-\t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      __throw_exception_again;\n-\t  }\n+\t  try \n+\t    {\n+\t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t      if (_M_check_facet(_M_fnumget))\n+\t\t_M_fnumget->get(*this, 0, *this, __err, __n);\n+\t      this->setstate(__err);\n+\t    }\n+\t  catch(exception& __fail)\n+\t    {\n+\t      // 27.6.1.2.1 Common requirements.\n+\t      // Turn this on without causing an ios::failure to be thrown.\n+\t      this->setstate(ios_base::badbit);\n+\t      if ((this->exceptions() & ios_base::badbit) != 0)\n+\t\t__throw_exception_again;\n+\t    }\n \t}\n       return *this;\n     }\n@@ -247,18 +265,21 @@ namespace std {\n       sentry __cerb(*this, false);\n       if (__cerb) \n \t{\n-\t  try {\n-\t    ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t    _M_fnumget->get(*this, 0, *this, __err, __n);\n-\t    this->setstate(__err);\n-\t  }\n-\t  catch(exception& __fail){\n-\t    // 27.6.1.2.1 Common requirements.\n-\t    // Turn this on without causing an ios::failure to be thrown.\n-\t    this->setstate(ios_base::badbit);\n-\t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      __throw_exception_again;\n-\t  }\n+\t  try \n+\t    {\n+\t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t      if (_M_check_facet(_M_fnumget))\n+\t\t_M_fnumget->get(*this, 0, *this, __err, __n);\n+\t      this->setstate(__err);\n+\t    }\n+\t  catch(exception& __fail)\n+\t    {\n+\t      // 27.6.1.2.1 Common requirements.\n+\t      // Turn this on without causing an ios::failure to be thrown.\n+\t      this->setstate(ios_base::badbit);\n+\t      if ((this->exceptions() & ios_base::badbit) != 0)\n+\t\t__throw_exception_again;\n+\t    }\n \t}\n       return *this;\n     }\n@@ -272,18 +293,21 @@ namespace std {\n       sentry __cerb(*this, false);\n       if (__cerb) \n \t{\n-\t  try {\n-\t    ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t    _M_fnumget->get(*this, 0, *this, __err, __n);\n-\t    this->setstate(__err);\n-\t  }\n-\t  catch(exception& __fail){\n-\t    // 27.6.1.2.1 Common requirements.\n-\t    // Turn this on without causing an ios::failure to be thrown.\n-\t    this->setstate(ios_base::badbit);\n-\t    if ((this->exceptions() & ios_base::badbit) != 0)\n+\t  try \n+\t    {\n+\t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t      if (_M_check_facet(_M_fnumget))\n+\t\t_M_fnumget->get(*this, 0, *this, __err, __n);\n+\t      this->setstate(__err);\n+\t    }\n+\t  catch(exception& __fail)\n+\t    {\n+\t      // 27.6.1.2.1 Common requirements.\n+\t      // Turn this on without causing an ios::failure to be thrown.\n+\t      this->setstate(ios_base::badbit);\n+\t      if ((this->exceptions() & ios_base::badbit) != 0)\n \t      __throw_exception_again;\n-\t  }\n+\t    }\n \t}\n       return *this;\n     }\n@@ -296,18 +320,21 @@ namespace std {\n       sentry __cerb(*this, false);\n       if (__cerb) \n \t{\n-\t  try {\n-\t    ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t    _M_fnumget->get(*this, 0, *this, __err, __n);\n-\t    this->setstate(__err);\n-\t  }\n-\t  catch(exception& __fail){\n-\t    // 27.6.1.2.1 Common requirements.\n-\t    // Turn this on without causing an ios::failure to be thrown.\n-\t    this->setstate(ios_base::badbit);\n-\t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      __throw_exception_again;\n-\t  }\n+\t  try \n+\t    {\n+\t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t      if (_M_check_facet(_M_fnumget))\n+\t\t_M_fnumget->get(*this, 0, *this, __err, __n);\n+\t      this->setstate(__err);\n+\t    }\n+\t  catch(exception& __fail)\n+\t    {\n+\t      // 27.6.1.2.1 Common requirements.\n+\t      // Turn this on without causing an ios::failure to be thrown.\n+\t      this->setstate(ios_base::badbit);\n+\t      if ((this->exceptions() & ios_base::badbit) != 0)\n+\t\t__throw_exception_again;\n+\t    }\n \t}\n       return *this;\n     }\n@@ -321,18 +348,21 @@ namespace std {\n       sentry __cerb(*this, false);\n       if (__cerb) \n \t{\n-\t  try {\n-\t    ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t    _M_fnumget->get(*this, 0, *this, __err, __n);\n-\t    this->setstate(__err);\n-\t  }\n-\t  catch(exception& __fail){\n-\t    // 27.6.1.2.1 Common requirements.\n-\t    // Turn this on without causing an ios::failure to be thrown.\n-\t    this->setstate(ios_base::badbit);\n-\t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      __throw_exception_again;\n-\t  }\n+\t  try \n+\t    {\n+\t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t      if (_M_check_facet(_M_fnumget))\n+\t\t_M_fnumget->get(*this, 0, *this, __err, __n);\n+\t      this->setstate(__err);\n+\t    }\n+\t  catch(exception& __fail)\n+\t    {\n+\t      // 27.6.1.2.1 Common requirements.\n+\t      // Turn this on without causing an ios::failure to be thrown.\n+\t      this->setstate(ios_base::badbit);\n+\t      if ((this->exceptions() & ios_base::badbit) != 0)\n+\t\t__throw_exception_again;\n+\t    }\n \t}\n       return *this;\n     }\n@@ -345,18 +375,21 @@ namespace std {\n       sentry __cerb(*this, false);\n       if (__cerb) \n \t{\n-\t  try {\n-\t    ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t    _M_fnumget->get(*this, 0, *this, __err, __n);\n-\t    this->setstate(__err);\n-\t  }\n-\t  catch(exception& __fail){\n-\t    // 27.6.1.2.1 Common requirements.\n-\t    // Turn this on without causing an ios::failure to be thrown.\n-\t    this->setstate(ios_base::badbit);\n-\t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      __throw_exception_again;\n-\t  }\n+\t  try \n+\t    {\n+\t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t      if (_M_check_facet(_M_fnumget))\n+\t\t_M_fnumget->get(*this, 0, *this, __err, __n);\n+\t      this->setstate(__err);\n+\t    }\n+\t  catch(exception& __fail)\n+\t    {\n+\t      // 27.6.1.2.1 Common requirements.\n+\t      // Turn this on without causing an ios::failure to be thrown.\n+\t      this->setstate(ios_base::badbit);\n+\t      if ((this->exceptions() & ios_base::badbit) != 0)\n+\t\t__throw_exception_again;\n+\t    }\n \t}\n       return *this;\n     }\n@@ -369,18 +402,21 @@ namespace std {\n       sentry __cerb(*this, false);\n       if (__cerb) \n \t{\n-\t  try {\n-\t    ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t    _M_fnumget->get(*this, 0, *this, __err, __n);\n-\t    this->setstate(__err);\n-\t  }\n-\t  catch(exception& __fail){\n-\t    // 27.6.1.2.1 Common requirements.\n-\t    // Turn this on without causing an ios::failure to be thrown.\n-\t    this->setstate(ios_base::badbit);\n-\t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      __throw_exception_again;\n-\t  }\n+\t  try \n+\t    {\n+\t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t      if (_M_check_facet(_M_fnumget))\n+\t\t_M_fnumget->get(*this, 0, *this, __err, __n);\n+\t      this->setstate(__err);\n+\t    }\n+\t  catch(exception& __fail)\n+\t    {\n+\t      // 27.6.1.2.1 Common requirements.\n+\t      // Turn this on without causing an ios::failure to be thrown.\n+\t      this->setstate(ios_base::badbit);\n+\t      if ((this->exceptions() & ios_base::badbit) != 0)\n+\t\t__throw_exception_again;\n+\t    }\n \t}\n       return *this;\n     }\n@@ -393,18 +429,21 @@ namespace std {\n       sentry __cerb(*this, false);\n       if (__cerb) \n \t{\n-\t  try {\n-\t    ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t    _M_fnumget->get(*this, 0, *this, __err, __n);\n-\t    this->setstate(__err);\n-\t  }\n-\t  catch(exception& __fail){\n-\t    // 27.6.1.2.1 Common requirements.\n-\t    // Turn this on without causing an ios::failure to be thrown.\n-\t    this->setstate(ios_base::badbit);\n-\t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      __throw_exception_again;\n-\t  }\n+\t  try \n+\t    {\n+\t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t      if (_M_check_facet(_M_fnumget))\n+\t\t_M_fnumget->get(*this, 0, *this, __err, __n);\n+\t      this->setstate(__err);\n+\t    }\n+\t  catch(exception& __fail)\n+\t    {\n+\t      // 27.6.1.2.1 Common requirements.\n+\t      // Turn this on without causing an ios::failure to be thrown.\n+\t      this->setstate(ios_base::badbit);\n+\t      if ((this->exceptions() & ios_base::badbit) != 0)\n+\t\t__throw_exception_again;\n+\t    }\n \t}\n       return *this;\n     }\n@@ -435,21 +474,23 @@ namespace std {\n       sentry __cerb(*this, true);\n       if (__cerb) \n \t{\n-\t  try {\n-\t    __c = this->rdbuf()->sbumpc();\n-\t    // 27.6.1.1 paragraph 3\n-\t    if (__c != __eof)\n-\t      _M_gcount = 1;\n-\t    else\n-\t      this->setstate(ios_base::eofbit | ios_base::failbit);\n-\t  }\n-\t  catch(exception& __fail){\n-\t    // 27.6.1.3 paragraph 1\n-\t    // Turn this on without causing an ios::failure to be thrown.\n-\t    this->setstate(ios_base::badbit);\n-\t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      __throw_exception_again;\n-\t  }\n+\t  try \n+\t    {\n+\t      __c = this->rdbuf()->sbumpc();\n+\t      // 27.6.1.1 paragraph 3\n+\t      if (__c != __eof)\n+\t\t_M_gcount = 1;\n+\t      else\n+\t\tthis->setstate(ios_base::eofbit | ios_base::failbit);\n+\t    }\n+\t  catch(exception& __fail)\n+\t    {\n+\t      // 27.6.1.3 paragraph 1\n+\t      // Turn this on without causing an ios::failure to be thrown.\n+\t      this->setstate(ios_base::badbit);\n+\t      if ((this->exceptions() & ios_base::badbit) != 0)\n+\t\t__throw_exception_again;\n+\t    }\n \t}\n       return __c;\n     }\n@@ -463,25 +504,27 @@ namespace std {\n       sentry __cerb(*this, true);\n       if (__cerb) \n \t{\n- \t  try {\n-\t    const int_type __eof = traits_type::eof();\n-\t    int_type __bufval = this->rdbuf()->sbumpc();\n-\t    // 27.6.1.1 paragraph 3\n-\t    if (__bufval != __eof)\n-\t      {\n-\t\t_M_gcount = 1;\n-\t\t__c = traits_type::to_char_type(__bufval);\n-\t      }\n-\t    else\n-\t      this->setstate(ios_base::eofbit | ios_base::failbit);\n-\t  }\n-\t  catch(exception& __fail){\n-\t    // 27.6.1.3 paragraph 1\n-\t    // Turn this on without causing an ios::failure to be thrown.\n-\t    this->setstate(ios_base::badbit);\n-\t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      __throw_exception_again;\n-\t  }\n+ \t  try \n+\t    {\n+\t      const int_type __eof = traits_type::eof();\n+\t      int_type __bufval = this->rdbuf()->sbumpc();\n+\t      // 27.6.1.1 paragraph 3\n+\t      if (__bufval != __eof)\n+\t\t{\n+\t\t  _M_gcount = 1;\n+\t\t  __c = traits_type::to_char_type(__bufval);\n+\t\t}\n+\t      else\n+\t\tthis->setstate(ios_base::eofbit | ios_base::failbit);\n+\t    }\n+\t  catch(exception& __fail)\n+\t    {\n+\t      // 27.6.1.3 paragraph 1\n+\t      // Turn this on without causing an ios::failure to be thrown.\n+\t      this->setstate(ios_base::badbit);\n+\t      if ((this->exceptions() & ios_base::badbit) != 0)\n+\t\t__throw_exception_again;\n+\t    }\n \t}\n       return *this;\n     }\n@@ -495,34 +538,36 @@ namespace std {\n       sentry __cerb(*this, true);\n       if (__cerb && __n > 1) \n \t{\n-\t  try {\n-\t    const int_type __idelim = traits_type::to_int_type(__delim);\n-\t    const int_type __eof = traits_type::eof();\n-\t    __streambuf_type* __sb = this->rdbuf();\n-\t    int_type __c = __sb->sbumpc();\t\n-\t    bool __testdelim = __c == __idelim;\n-\t    bool __testeof =  __c == __eof;\n-\t    \n-\t    while (_M_gcount < __n - 1 && !__testeof && !__testdelim)\n-\t      {\n-\t\t*__s++ = traits_type::to_char_type(__c);\n-\t\t++_M_gcount;\n-\t\t__c = __sb->sbumpc();\n-\t\t__testeof = __c == __eof;\n-\t\t__testdelim = __c == __idelim;\n-\t      }\n-\t    if (__testdelim || _M_gcount == __n - 1)\n-\t      __sb->sputbackc(__c);\n-\t    if (__testeof)\n-\t      this->setstate(ios_base::eofbit);\n-\t  }\n-\t  catch(exception& __fail){\n-\t    // 27.6.1.3 paragraph 1\n-\t    // Turn this on without causing an ios::failure to be thrown.\n-\t    this->setstate(ios_base::badbit);\n-\t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      __throw_exception_again;\n-\t  }\n+\t  try \n+\t    {\n+\t      const int_type __idelim = traits_type::to_int_type(__delim);\n+\t      const int_type __eof = traits_type::eof();\n+\t      __streambuf_type* __sb = this->rdbuf();\n+\t      int_type __c = __sb->sbumpc();\t\n+\t      bool __testdelim = __c == __idelim;\n+\t      bool __testeof =  __c == __eof;\n+\t      \n+\t      while (_M_gcount < __n - 1 && !__testeof && !__testdelim)\n+\t\t{\n+\t\t  *__s++ = traits_type::to_char_type(__c);\n+\t\t  ++_M_gcount;\n+\t\t  __c = __sb->sbumpc();\n+\t\t  __testeof = __c == __eof;\n+\t\t  __testdelim = __c == __idelim;\n+\t\t}\n+\t      if (__testdelim || _M_gcount == __n - 1)\n+\t\t__sb->sputbackc(__c);\n+\t      if (__testeof)\n+\t\tthis->setstate(ios_base::eofbit);\n+\t    }\n+\t  catch(exception& __fail)\n+\t    {\n+\t      // 27.6.1.3 paragraph 1\n+\t      // Turn this on without causing an ios::failure to be thrown.\n+\t      this->setstate(ios_base::badbit);\n+\t      if ((this->exceptions() & ios_base::badbit) != 0)\n+\t\t__throw_exception_again;\n+\t    }\n \t}\n       *__s = char_type(NULL);\n       if (!_M_gcount)\n@@ -541,32 +586,34 @@ namespace std {\n \t{\n \t  int_type __c;\n \t  __streambuf_type* __this_sb = this->rdbuf();\n-\t  try {\n-\t    const int_type __idelim = traits_type::to_int_type(__delim);\n-\t    const int_type __eof = traits_type::eof();\t      \n-\t    __c = __this_sb->sbumpc();\n-\t    bool __testdelim = __c == __idelim;\n-\t    bool __testeof =  __c == __eof;\n-\t    bool __testput = true;\n-\n-\t    while (!__testeof && !__testdelim \n-\t\t   && (__testput = __sb.sputc(traits_type::to_char_type(__c)) \n-\t\t       != __eof))\n-\t      {\n-\t\t++_M_gcount;\n-\t\t__c = __this_sb->sbumpc();\n-\t\t__testeof = __c == __eof;\n-\t\t__testdelim = __c == __idelim;\n-\t      }\n-\t    if (__testdelim || !__testput)\n+\t  try \n+\t    {\n+\t      const int_type __idelim = traits_type::to_int_type(__delim);\n+\t      const int_type __eof = traits_type::eof();\t      \n+\t      __c = __this_sb->sbumpc();\n+\t      bool __testdelim = __c == __idelim;\n+\t      bool __testeof =  __c == __eof;\n+\t      bool __testput = true;\n+\t      \n+\t      while (!__testeof && !__testdelim \n+\t\t    && (__testput = __sb.sputc(traits_type::to_char_type(__c)) \n+\t\t\t != __eof))\n+\t\t{\n+\t\t  ++_M_gcount;\n+\t\t  __c = __this_sb->sbumpc();\n+\t\t  __testeof = __c == __eof;\n+\t\t  __testdelim = __c == __idelim;\n+\t\t}\n+\t      if (__testdelim || !__testput)\n+\t\t__this_sb->sputbackc(traits_type::to_char_type(__c));\n+\t      if (__testeof)\n+\t\tthis->setstate(ios_base::eofbit);\n+\t    }\n+\t  catch(exception& __fail)\n+\t    {\n+\t      // Exception may result from sputc->overflow.\n \t      __this_sb->sputbackc(traits_type::to_char_type(__c));\n-\t    if (__testeof)\n-\t      this->setstate(ios_base::eofbit);\n-\t  }\n-\t  catch(exception& __fail){\n-\t    // Exception may result from sputc->overflow.\n-\t    __this_sb->sputbackc(traits_type::to_char_type(__c));\n-\t  }\n+\t    }\n \t}\n       if (!_M_gcount)\n \tthis->setstate(ios_base::failbit);\n@@ -582,43 +629,45 @@ namespace std {\n       sentry __cerb(*this, true);\n       if (__cerb) \n \t{\n-          try {\n-\t    __streambuf_type* __sb = this->rdbuf();\n-\t    int_type __c = __sb->sbumpc();\n-\t    ++_M_gcount;\n-            const int_type __idelim = traits_type::to_int_type(__delim);\n-            const int_type __eof = traits_type::eof();\n-\t    bool __testdelim = __c == __idelim;\n-\t    bool __testeof =  __c == __eof;\n-\t    \n-\t    while (_M_gcount < __n && !__testeof && !__testdelim)\n-\t      {\n-\t\t*__s++ = traits_type::to_char_type(__c);\n-\t\t__c = __sb->sbumpc();\n-\t\t++_M_gcount;\n-\t\t__testeof = __c == __eof;\n-\t\t__testdelim = __c == __idelim;\n-\t      }\n+          try \n+\t    {\n+\t      __streambuf_type* __sb = this->rdbuf();\n+\t      int_type __c = __sb->sbumpc();\n+\t      ++_M_gcount;\n+\t      const int_type __idelim = traits_type::to_int_type(__delim);\n+\t      const int_type __eof = traits_type::eof();\n+\t      bool __testdelim = __c == __idelim;\n+\t      bool __testeof =  __c == __eof;\n \t    \n-\t    if (__testeof)\n-\t      {\n-\t\t--_M_gcount;\n-\t\tthis->setstate(ios_base::eofbit);\n-\t      }\n-\t    else if (!__testdelim)\n-\t      {\n-\t\t--_M_gcount;\n-\t\t__sb->sputbackc(traits_type::to_char_type(__c));\n-\t\tthis->setstate(ios_base::failbit);\n-\t      }\n-\t  }\n-\t  catch(exception& __fail){\n-\t    // 27.6.1.3 paragraph 1\n-\t    // Turn this on without causing an ios::failure to be thrown.\n-\t    this->setstate(ios_base::badbit);\n-\t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      __throw_exception_again;\n-\t  }\n+\t      while (_M_gcount < __n && !__testeof && !__testdelim)\n+\t\t{\n+\t\t  *__s++ = traits_type::to_char_type(__c);\n+\t\t  __c = __sb->sbumpc();\n+\t\t  ++_M_gcount;\n+\t\t  __testeof = __c == __eof;\n+\t\t  __testdelim = __c == __idelim;\n+\t\t}\n+\t      \n+\t      if (__testeof)\n+\t\t{\n+\t\t  --_M_gcount;\n+\t\t  this->setstate(ios_base::eofbit);\n+\t\t}\n+\t      else if (!__testdelim)\n+\t\t{\n+\t\t  --_M_gcount;\n+\t\t  __sb->sputbackc(traits_type::to_char_type(__c));\n+\t\t  this->setstate(ios_base::failbit);\n+\t\t}\n+\t    }\n+\t  catch(exception& __fail)\n+\t    {\n+\t      // 27.6.1.3 paragraph 1\n+\t      // Turn this on without causing an ios::failure to be thrown.\n+\t      this->setstate(ios_base::badbit);\n+\t      if ((this->exceptions() & ios_base::badbit) != 0)\n+\t\t__throw_exception_again;\n+\t    }\n \t}\n       *__s = char_type(NULL);\n       if (!_M_gcount)\n@@ -635,34 +684,36 @@ namespace std {\n       sentry __cerb(*this, true);\n       if (__cerb && __n > 0) \n \t{\n-\t  try {\n-\t    const int_type __idelim = traits_type::to_int_type(__delim);\n-\t    const int_type __eof = traits_type::eof();\n-\t    __streambuf_type* __sb = this->rdbuf();\n-\t    int_type __c = __sb->sbumpc();\t\n-\t    bool __testdelim = __c == __idelim;\n-\t    bool __testeof =  __c == __eof;\n-\t    \t\t\n-\t    __n = min(__n, numeric_limits<streamsize>::max());\n-\t    while (_M_gcount < __n - 1 && !__testeof && !__testdelim)\n-\t      {\n+\t  try \n+\t    {\n+\t      const int_type __idelim = traits_type::to_int_type(__delim);\n+\t      const int_type __eof = traits_type::eof();\n+\t      __streambuf_type* __sb = this->rdbuf();\n+\t      int_type __c = __sb->sbumpc();\t\n+\t      bool __testdelim = __c == __idelim;\n+\t      bool __testeof =  __c == __eof;\n+\t      \n+\t      __n = min(__n, numeric_limits<streamsize>::max());\n+\t      while (_M_gcount < __n - 1 && !__testeof && !__testdelim)\n+\t\t{\n+\t\t  ++_M_gcount;\n+\t\t  __c = __sb->sbumpc();\n+\t\t  __testeof = __c == __eof;\n+\t\t  __testdelim = __c == __idelim;\n+\t\t}\n+\t      if ((_M_gcount == __n - 1 && !__testeof) || __testdelim)\n \t\t++_M_gcount;\n-\t\t__c = __sb->sbumpc();\n-\t\t__testeof = __c == __eof;\n-\t\t__testdelim = __c == __idelim;\n-\t      }\n-\t    if ((_M_gcount == __n - 1 && !__testeof) || __testdelim)\n-\t      ++_M_gcount;\n-\t    if (__testeof)\n-\t      this->setstate(ios_base::eofbit);\n-\t  }\n-\t  catch(exception& __fail){\n-\t    // 27.6.1.3 paragraph 1\n-\t    // Turn this on without causing an ios::failure to be thrown.\n-\t    this->setstate(ios_base::badbit);\n-\t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      __throw_exception_again;\n-\t  }\n+\t      if (__testeof)\n+\t\tthis->setstate(ios_base::eofbit);\n+\t    }\n+\t  catch(exception& __fail)\n+\t    {\n+\t      // 27.6.1.3 paragraph 1\n+\t      // Turn this on without causing an ios::failure to be thrown.\n+\t      this->setstate(ios_base::badbit);\n+\t      if ((this->exceptions() & ios_base::badbit) != 0)\n+\t\t__throw_exception_again;\n+\t    }\n \t}\n       return *this;\n     }\n@@ -677,16 +728,16 @@ namespace std {\n       sentry __cerb(*this, true);\n       if (__cerb)\n \t{\n-\t  try {\n-\t    __c = this->rdbuf()->sgetc();\n-\t  }\n-\t  catch(exception& __fail){\n-\t    // 27.6.1.3 paragraph 1\n-\t    // Turn this on without causing an ios::failure to be thrown.\n-\t    this->setstate(ios_base::badbit);\n-\t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      __throw_exception_again;\n-\t  }\n+\t  try \n+\t    { __c = this->rdbuf()->sgetc(); }\n+\t  catch(exception& __fail)\n+\t    {\n+\t      // 27.6.1.3 paragraph 1\n+\t      // Turn this on without causing an ios::failure to be thrown.\n+\t      this->setstate(ios_base::badbit);\n+\t      if ((this->exceptions() & ios_base::badbit) != 0)\n+\t\t__throw_exception_again;\n+\t    }\n \t} \n       return __c;\n     }\n@@ -702,35 +753,37 @@ namespace std {\n \t{\n \t  if (__n > 0)\n \t    {\n-\t      try {\n-\t\tconst int_type __eof = traits_type::eof();\n-\t\t__streambuf_type* __sb = this->rdbuf();\n-\t\tint_type __c = __sb->sbumpc();\t\n-\t\tbool __testeof =  __c == __eof;\n-\t\t\n-\t\twhile (_M_gcount < __n - 1 && !__testeof)\n-\t\t  {\n-\t\t    *__s++ = traits_type::to_char_type(__c);\n-\t\t    ++_M_gcount;\n-\t\t    __c = __sb->sbumpc();\n-\t\t    __testeof = __c == __eof;\n-\t\t  }\n-\t\tif (__testeof)\n-\t\t  this->setstate(ios_base::eofbit | ios_base::failbit);\n-\t\telse\n-\t\t  {\n-\t\t    // _M_gcount == __n - 1\n-\t\t    *__s++ = traits_type::to_char_type(__c);\n-\t\t    ++_M_gcount;\n-\t\t  }\t    \n-\t      }\n-\t      catch(exception& __fail){\n-\t\t// 27.6.1.3 paragraph 1\n-\t\t// Turn this on without causing an ios::failure to be thrown.\n-\t\tthis->setstate(ios_base::badbit);\n-\t\tif ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t  __throw_exception_again;\n-\t      }\n+\t      try \n+\t\t{\n+\t\t  const int_type __eof = traits_type::eof();\n+\t\t  __streambuf_type* __sb = this->rdbuf();\n+\t\t  int_type __c = __sb->sbumpc();\t\n+\t\t  bool __testeof =  __c == __eof;\n+\t\t  \n+\t\t  while (_M_gcount < __n - 1 && !__testeof)\n+\t\t    {\n+\t\t      *__s++ = traits_type::to_char_type(__c);\n+\t\t      ++_M_gcount;\n+\t\t      __c = __sb->sbumpc();\n+\t\t      __testeof = __c == __eof;\n+\t\t    }\n+\t\t  if (__testeof)\n+\t\t    this->setstate(ios_base::eofbit | ios_base::failbit);\n+\t\t  else\n+\t\t    {\n+\t\t      // _M_gcount == __n - 1\n+\t\t      *__s++ = traits_type::to_char_type(__c);\n+\t\t      ++_M_gcount;\n+\t\t    }\t    \n+\t\t}\n+\t      catch(exception& __fail)\n+\t\t{\n+\t\t  // 27.6.1.3 paragraph 1\n+\t\t  // Turn this on without causing an ios::failure to be thrown.\n+\t\t  this->setstate(ios_base::badbit);\n+\t\t  if ((this->exceptions() & ios_base::badbit) != 0)\n+\t\t    __throw_exception_again;\n+\t\t}\n \t    }\n \t}\n       else\n@@ -750,24 +803,25 @@ namespace std {\n \t{\n \t  if (__n > 0)\n \t    {\n-\t      try {\n-\t\tstreamsize __num = this->rdbuf()->in_avail();\n-\t\tif (__num != static_cast<streamsize>(__eof))\n-\t\t  {\n-\t\t    __num = min(__num, __n);\n-\t\t    _M_gcount = this->rdbuf()->sgetn(__s, __num);\n-\t\t  }\n-\t\telse\n-\t\t  this->setstate(ios_base::eofbit);\t\t    \n-\t      }\n-\n-\t      catch(exception& __fail){\n-\t\t// 27.6.1.3 paragraph 1\n-\t\t// Turn this on without causing an ios::failure to be thrown.\n-\t\tthis->setstate(ios_base::badbit);\n-\t\tif ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t  __throw_exception_again;\n-\t      }\n+\t      try \n+\t\t{\n+\t\t  streamsize __num = this->rdbuf()->in_avail();\n+\t\t  if (__num != static_cast<streamsize>(__eof))\n+\t\t    {\n+\t\t      __num = min(__num, __n);\n+\t\t      _M_gcount = this->rdbuf()->sgetn(__s, __num);\n+\t\t    }\n+\t\t  else\n+\t\t    this->setstate(ios_base::eofbit);\t\t    \n+\t\t}\n+\t      catch(exception& __fail)\n+\t\t{\n+\t\t  // 27.6.1.3 paragraph 1\n+\t\t  // Turn this on without causing an ios::failure to be thrown.\n+\t\t  this->setstate(ios_base::badbit);\n+\t\t  if ((this->exceptions() & ios_base::badbit) != 0)\n+\t\t    __throw_exception_again;\n+\t\t}\n \t    }\n \t}\n       else\n@@ -783,19 +837,21 @@ namespace std {\n       sentry __cerb(*this, true);\n       if (__cerb) \n \t{\n-\t  try {\n-\t    const int_type __eof = traits_type::eof();\n-\t    __streambuf_type* __sb = this->rdbuf();\n-\t    if (!__sb || __sb->sputbackc(__c) == __eof) \n-\t      this->setstate(ios_base::badbit);\t\t    \n-\t  }\n-\t  catch(exception& __fail){\n-\t    // 27.6.1.3 paragraph 1\n-\t    // Turn this on without causing an ios::failure to be thrown.\n-\t    this->setstate(ios_base::badbit);\n-\t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      __throw_exception_again;\n-\t  }\n+\t  try \n+\t    {\n+\t      const int_type __eof = traits_type::eof();\n+\t      __streambuf_type* __sb = this->rdbuf();\n+\t      if (!__sb || __sb->sputbackc(__c) == __eof) \n+\t\tthis->setstate(ios_base::badbit);\t\t    \n+\t    }\n+\t  catch(exception& __fail)\n+\t    {\n+\t      // 27.6.1.3 paragraph 1\n+\t      // Turn this on without causing an ios::failure to be thrown.\n+\t      this->setstate(ios_base::badbit);\n+\t      if ((this->exceptions() & ios_base::badbit) != 0)\n+\t\t__throw_exception_again;\n+\t    }\n \t}\n       else\n \tthis->setstate(ios_base::failbit);\n@@ -811,19 +867,21 @@ namespace std {\n       sentry __cerb(*this, true);\n       if (__cerb) \n \t{\n-\t  try {\n-\t    const int_type __eof = traits_type::eof();\n-\t    __streambuf_type* __sb = this->rdbuf();\n-\t    if (!__sb || __eof == __sb->sungetc())\n-\t      this->setstate(ios_base::badbit);\t\t    \n-\t  }\n-\t  catch(exception& __fail){\n-\t    // 27.6.1.3 paragraph 1\n-\t    // Turn this on without causing an ios::failure to be thrown.\n-\t    this->setstate(ios_base::badbit);\n-\t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      __throw_exception_again;\n-\t  }\n+\t  try \n+\t    {\n+\t      const int_type __eof = traits_type::eof();\n+\t      __streambuf_type* __sb = this->rdbuf();\n+\t      if (!__sb || __eof == __sb->sungetc())\n+\t\tthis->setstate(ios_base::badbit);\t\t    \n+\t    }\n+\t  catch(exception& __fail)\n+\t    {\n+\t      // 27.6.1.3 paragraph 1\n+\t      // Turn this on without causing an ios::failure to be thrown.\n+\t      this->setstate(ios_base::badbit);\n+\t      if ((this->exceptions() & ios_base::badbit) != 0)\n+\t\t__throw_exception_again;\n+\t    }\n \t}\n       else\n \tthis->setstate(ios_base::failbit);\n@@ -840,20 +898,22 @@ namespace std {\n       sentry __cerb(*this, true);\n       if (__cerb) \n \t{\n-\t  try {\n-\t    __streambuf_type* __sb = this->rdbuf();\n-\t    if (!__sb || __ret == __sb->pubsync())\n-\t      this->setstate(ios_base::badbit);\t\t    \n-\t    else \n-\t      __ret = 0;\n-\t  }\n-\t  catch(exception& __fail){\n-\t    // 27.6.1.3 paragraph 1\n-\t    // Turn this on without causing an ios::failure to be thrown.\n-\t    this->setstate(ios_base::badbit);\n-\t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      __throw_exception_again;\n-\t  }\n+\t  try \n+\t    {\n+\t      __streambuf_type* __sb = this->rdbuf();\n+\t      if (!__sb || __ret == __sb->pubsync())\n+\t\tthis->setstate(ios_base::badbit);\t\t    \n+\t      else \n+\t\t__ret = 0;\n+\t    }\n+\t  catch(exception& __fail)\n+\t    {\n+\t      // 27.6.1.3 paragraph 1\n+\t      // Turn this on without causing an ios::failure to be thrown.\n+\t      this->setstate(ios_base::badbit);\n+\t      if ((this->exceptions() & ios_base::badbit) != 0)\n+\t\t__throw_exception_again;\n+\t    }\n \t}\n       return __ret;\n     }\n@@ -868,16 +928,18 @@ namespace std {\n       sentry __cerb(*this, true);\n       if (__cerb) \n \t{\n-\t  try {\n-\t    __ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::in);\n-\t  }\n-\t  catch(exception& __fail){\n-\t    // 27.6.1.3 paragraph 1\n-\t    // Turn this on without causing an ios::failure to be thrown.\n-\t    this->setstate(ios_base::badbit);\n-\t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      __throw_exception_again;\n-\t  }\n+\t  try \n+\t    {\n+\t     __ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::in);\n+\t    }\n+\t  catch(exception& __fail)\n+\t    {\n+\t      // 27.6.1.3 paragraph 1\n+\t      // Turn this on without causing an ios::failure to be thrown.\n+\t      this->setstate(ios_base::badbit);\n+\t      if ((this->exceptions() & ios_base::badbit) != 0)\n+\t\t__throw_exception_again;\n+\t    }\n \t}\n       return __ret;\n     }\n@@ -892,19 +954,21 @@ namespace std {\n       sentry __cerb(*this, true);\n       if (__cerb) \n \t{\n-\t  try {\n+\t  try \n+\t    {\n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n // 136.  seekp, seekg setting wrong streams?\n-\t    this->rdbuf()->pubseekpos(__pos, ios_base::in);\n+\t      this->rdbuf()->pubseekpos(__pos, ios_base::in);\n #endif\n-\t  }\n-\t  catch(exception& __fail){\n-\t    // 27.6.1.3 paragraph 1\n-\t    // Turn this on without causing an ios::failure to be thrown.\n-\t    this->setstate(ios_base::badbit);\n-\t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      __throw_exception_again;\n-\t  }\n+\t    }\n+\t  catch(exception& __fail)\n+\t    {\n+\t      // 27.6.1.3 paragraph 1\n+\t      // Turn this on without causing an ios::failure to be thrown.\n+\t      this->setstate(ios_base::badbit);\n+\t      if ((this->exceptions() & ios_base::badbit) != 0)\n+\t\t__throw_exception_again;\n+\t    }\n \t}\n       return *this;\n     }\n@@ -918,19 +982,21 @@ namespace std {\n       sentry __cerb(*this, true);\n       if (__cerb) \n \t{\n-\t  try {\n+\t  try \n+\t    {\n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n // 136.  seekp, seekg setting wrong streams?\n-\t    this->rdbuf()->pubseekoff(__off, __dir, ios_base::in);\n+\t      this->rdbuf()->pubseekoff(__off, __dir, ios_base::in);\n #endif\n-\t  }\n-\t  catch(exception& __fail){\n-\t    // 27.6.1.3 paragraph 1\n-\t    // Turn this on without causing an ios::failure to be thrown.\n-\t    this->setstate(ios_base::badbit);\n-\t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      __throw_exception_again;\n-\t  }\n+\t    }\n+\t  catch(exception& __fail)\n+\t    {\n+\t      // 27.6.1.3 paragraph 1\n+\t      // Turn this on without causing an ios::failure to be thrown.\n+\t      this->setstate(ios_base::badbit);\n+\t      if ((this->exceptions() & ios_base::badbit) != 0)\n+\t\t__throw_exception_again;\n+\t    }\n \t}\n       return *this;\n     }\n@@ -944,16 +1010,16 @@ namespace std {\n       typename __istream_type::sentry __cerb(__in, false);\n       if (__cerb)\n \t{\n-\t  try {\n-\t    __in.get(__c);\n-\t  }\n-\t  catch(exception& __fail){\n-\t    // 27.6.1.2.1 Common requirements.\n-\t    // Turn this on without causing an ios::failure to be thrown.\n-\t    __in.setstate(ios_base::badbit);\n-\t    if ((__in.exceptions() & ios_base::badbit) != 0)\n-\t      __throw_exception_again;\n-\t  }\n+\t  try \n+\t    { __in.get(__c); }\n+\t  catch(exception& __fail)\n+\t    {\n+\t      // 27.6.1.2.1 Common requirements.\n+\t      // Turn this on without causing an ios::failure to be thrown.\n+\t      __in.setstate(ios_base::badbit);\n+\t      if ((__in.exceptions() & ios_base::badbit) != 0)\n+\t\t__throw_exception_again;\n+\t    }\n \t}\n       else\n \t__in.setstate(ios_base::failbit);\n@@ -974,46 +1040,48 @@ namespace std {\n       typename __istream_type::sentry __cerb(__in, false);\n       if (__cerb)\n \t{\n-\t  try {\n-\t    // Figure out how many characters to extract.\n-\t    streamsize __num = __in.width();\n-\t    if (__num == 0)\n-\t      __num = numeric_limits<streamsize>::max();\n-\n-\t    __streambuf_type* __sb = __in.rdbuf();\n-\t    const __ctype_type* __ctype = __in._M_get_fctype_ios();\n-\t    int_type __c = __sb->sbumpc();\n-\t    const int_type __eof = _Traits::eof();\n-\t    bool __testsp = __ctype->is(ctype_base::space, __c);\n-\t    bool __testeof =  __c == __eof;\n-\t    \n-\t    while (__extracted < __num - 1 && !__testeof && !__testsp)\n-\t      {\n-\t\t*__s++ = __c;\n-\t\t++__extracted;\n-\t\t__c = __sb->sbumpc();\n-\t\t__testeof = __c == __eof;\n-\t\t__testsp = __ctype->is(ctype_base::space, __c);\n-\t      }\n-\t    \n-\t    if (!__testeof)\n-\t      __sb->sputbackc(__c);\n-\t    else\n-\t      __in.setstate(ios_base::eofbit);\n+\t  try \n+\t    {\n+\t      // Figure out how many characters to extract.\n+\t      streamsize __num = __in.width();\n+\t      if (__num == 0)\n+\t\t__num = numeric_limits<streamsize>::max();\n+\t      \n+\t      __streambuf_type* __sb = __in.rdbuf();\n+\t      const __ctype_type* __ctype = __in._M_get_fctype_ios();\n+\t      int_type __c = __sb->sbumpc();\n+\t      const int_type __eof = _Traits::eof();\n+\t      bool __testsp = __ctype->is(ctype_base::space, __c);\n+\t      bool __testeof =  __c == __eof;\n+\t      \n+\t      while (__extracted < __num - 1 && !__testeof && !__testsp)\n+\t\t{\n+\t\t  *__s++ = __c;\n+\t\t  ++__extracted;\n+\t\t  __c = __sb->sbumpc();\n+\t\t  __testeof = __c == __eof;\n+\t\t  __testsp = __ctype->is(ctype_base::space, __c);\n+\t\t}\n+\t      \n+\t      if (!__testeof)\n+\t\t__sb->sputbackc(__c);\n+\t      else\n+\t\t__in.setstate(ios_base::eofbit);\n \n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n //68.  Extractors for char* should store null at end\n-\t    *__s = char_type();\n+\t      *__s = char_type();\n #endif\n-\t    __in.width(0);\n-\t  }\n-\t  catch(exception& __fail){\n-\t    // 27.6.1.2.1 Common requirements.\n-\t    // Turn this on without causing an ios::failure to be thrown.\n-\t    __in.setstate(ios_base::badbit);\n-\t    if ((__in.exceptions() & ios_base::badbit) != 0)\n-\t      __throw_exception_again;\n-\t  }\n+\t      __in.width(0);\n+\t    }\n+\t  catch(exception& __fail)\n+\t    {\n+\t      // 27.6.1.2.1 Common requirements.\n+\t      // Turn this on without causing an ios::failure to be thrown.\n+\t      __in.setstate(ios_base::badbit);\n+\t      if ((__in.exceptions() & ios_base::badbit) != 0)\n+\t\t__throw_exception_again;\n+\t    }\n \t}\n       if (!__extracted)\n \t__in.setstate(ios_base::failbit);\n@@ -1153,7 +1221,6 @@ namespace std {\n     getline(basic_istream<_CharT, _Traits>& __in, \n \t    basic_string<_CharT,_Traits,_Alloc>& __str)\n     { return getline(__in, __str, __in.widen('\\n')); }\n-\n } // namespace std\n \n // Local Variables:"}, {"sha": "1b7ff88895eaa82f5cc9829eeb210218570cf5c7", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=bfa1e6b11bb2708837ad3117ff4348955be08707", "patch": "@@ -964,7 +964,7 @@ namespace std\n #endif\n \n   // Generic helper function\n-  template<typename _CharT, typename _OutIter>\n+  template<typename _CharT, typename _Traits, typename _OutIter>\n     _OutIter\n     __output_float(_OutIter __s, ios_base& __io, _CharT __fill,\n                     const char* __sptr, size_t __slen)\n@@ -974,10 +974,10 @@ namespace std\n     }\n \n   // Partial specialization for ostreambuf_iterator.\n-  template<typename _CharT>\n-    ostreambuf_iterator<_CharT>\n-    __output_float(ostreambuf_iterator<_CharT> __s, ios_base& __io, \n-\t\t    _CharT __fill, const char* __sptr, size_t __slen)\n+  template<typename _CharT, typename _Traits>\n+    ostreambuf_iterator<_CharT, _Traits>\n+    __output_float(ostreambuf_iterator<_CharT, _Traits> __s, ios_base& __io, \n+\t\t   _CharT __fill, const char* __sptr, size_t __slen)\n     {\n       size_t __padding = __io.width() > streamsize(__slen) ?\n                          __io.width() -__slen : 0;\n@@ -1037,7 +1037,7 @@ namespace std\n       if (__prec > __max_prec)\n         __prec = __max_prec;\n       // The *2 provides for signs, exp, 'E', and pad.\n-      char __sbuf[__max_prec*2];\n+      char __sbuf[__max_prec * 2];\n       size_t __slen;\n       // Long enough for the max format spec.\n       char __fbuf[16];\n@@ -1061,7 +1061,7 @@ namespace std\n       if (__prec > __max_prec)\n         __prec = __max_prec;\n       // The *2 provides for signs, exp, 'E', and pad.\n-      char __sbuf[__max_prec*2];\n+      char __sbuf[__max_prec * 2];\n       size_t __slen;\n       // Long enough for the max format spec.\n       char __fbuf[16];"}, {"sha": "60294c308fc6dc0ce84390efc0190be0e966403d", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 47, "deletions": 29, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=bfa1e6b11bb2708837ad3117ff4348955be08707", "patch": "@@ -118,8 +118,9 @@ namespace std\n \t{\n \t  try \n \t    {\n-\t      if (_M_fnumput->put(*this, *this, this->fill(), __n).failed())\n-\t\tthis->setstate(ios_base::badbit);\n+\t      if (_M_check_facet(_M_fnumput))\n+\t\tif (_M_fnumput->put(*this, *this, this->fill(), __n).failed())\n+\t\t  this->setstate(ios_base::badbit);\n \t    }\n \t  catch(exception& __fail)\n \t    {\n@@ -142,16 +143,21 @@ namespace std\n \t{\n \t  try \n \t    {\n-\t      bool __f;\n+\t      char_type __c = this->fill();\n \t      ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;\n-\t      if (__fmt & ios_base::oct || __fmt & ios_base::hex)\n-\t\t__f = _M_fnumput->put(*this, *this, this->fill(), \n-\t\t\t\t     static_cast<unsigned long>(__n)).failed();\n-\t      else\n-\t\t__f = _M_fnumput->put(*this, *this, this->fill(), __n).failed();\n-\n-\t      if (__f)  \n-\t\tthis->setstate(ios_base::badbit);\n+\t      if (_M_check_facet(_M_fnumput))\n+\t\t{\n+\t\t  bool __b = false;\n+\t\t  if (__fmt & ios_base::oct || __fmt & ios_base::hex)\n+\t\t    {\n+\t\t      unsigned long __l = static_cast<unsigned long>(__n);\n+\t\t      __b = _M_fnumput->put(*this, *this, __c, __l).failed();\n+\t\t    }\n+\t\t  else\n+\t\t    __b = _M_fnumput->put(*this, *this, __c, __n).failed();\n+\t\t  if (__b)  \n+\t\t    this->setstate(ios_base::badbit);\n+\t\t}\n \t    }\n \t  catch(exception& __fail)\n \t    {\n@@ -174,8 +180,9 @@ namespace std\n \t{\n \t  try \n \t    {\n-\t      if (_M_fnumput->put(*this, *this, this->fill(), __n).failed())\n-\t\tthis->setstate(ios_base::badbit);\n+\t      if (_M_check_facet(_M_fnumput))\n+\t\tif (_M_fnumput->put(*this, *this, this->fill(), __n).failed())\n+\t\t  this->setstate(ios_base::badbit);\n \t    }\n \t  catch(exception& __fail)\n \t    {\n@@ -199,15 +206,22 @@ namespace std\n \t{\n \t  try \n \t    {\n-\t      bool __f;\n+\t      char_type __c = this->fill();\n \t      ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;\n-\t      if (__fmt & ios_base::oct || __fmt & ios_base::hex)\n-\t\t__f = _M_fnumput->put(*this, *this, this->fill(), \n-\t\t\t\tstatic_cast<unsigned long long>(__n)).failed();\n-\t      else\n-\t\t__f = _M_fnumput->put(*this, *this, this->fill(), __n).failed();\n-\t      if (__f)  \n-\t\tthis->setstate(ios_base::badbit);\n+\t      if (_M_check_facet(_M_fnumput))\n+\t\t{\n+\t\t  bool __b = false;\n+\t\t  if (__fmt & ios_base::oct || __fmt & ios_base::hex)\n+\t\t    {\n+\t\t      unsigned long long __l;\n+\t\t      __l = static_cast<unsigned long long>(__n);\n+\t\t      __b = _M_fnumput->put(*this, *this, __c, __l).failed();\n+\t\t    }\n+\t\t  else\n+\t\t    __b = _M_fnumput->put(*this, *this, __c, __n).failed();\n+\t\t  if (__b)  \n+\t\t    this->setstate(ios_base::badbit);\n+\t\t}\n \t    }\n \t  catch(exception& __fail)\n \t    {\n@@ -230,8 +244,9 @@ namespace std\n \t{\n \t  try \n \t    {\n-\t      if (_M_fnumput->put(*this, *this, this->fill(), __n).failed())\n-\t\tthis->setstate(ios_base::badbit);\n+\t      if (_M_check_facet(_M_fnumput))\n+\t\tif (_M_fnumput->put(*this, *this, this->fill(), __n).failed())\n+\t\t  this->setstate(ios_base::badbit);\n \t    }\n \t  catch(exception& __fail)\n \t    {\n@@ -255,8 +270,9 @@ namespace std\n \t{\n \t  try \n \t    {\n-\t      if (_M_fnumput->put(*this, *this, this->fill(), __n).failed())\n-\t\tthis->setstate(ios_base::badbit);\n+\t      if (_M_check_facet(_M_fnumput))\n+\t\tif (_M_fnumput->put(*this, *this, this->fill(), __n).failed())\n+\t\t  this->setstate(ios_base::badbit);\n \t    }\n \t  catch(exception& __fail)\n \t    {\n@@ -279,8 +295,9 @@ namespace std\n \t{\n \t  try \n \t    {\n-\t      if (_M_fnumput->put(*this, *this, this->fill(), __n).failed())\n-\t\tthis->setstate(ios_base::badbit);\n+\t      if (_M_check_facet(_M_fnumput))\n+\t\tif (_M_fnumput->put(*this, *this, this->fill(), __n).failed())\n+\t\t  this->setstate(ios_base::badbit);\n \t    }\n \t  catch(exception& __fail)\n \t    {\n@@ -303,8 +320,9 @@ namespace std\n \t{\n \t  try \n \t    {\n-\t      if (_M_fnumput->put(*this, *this, this->fill(), __n).failed())\n-\t\tthis->setstate(ios_base::badbit);\n+\t      if (_M_check_facet(_M_fnumput))\n+\t\tif (_M_fnumput->put(*this, *this, this->fill(), __n).failed())\n+\t\t  this->setstate(ios_base::badbit);\n \t    }\n \t  catch(exception& __fail)\n \t    {"}, {"sha": "0f2c36db30a77840efb6e18f8a6049c9d90cce91", "filename": "libstdc++-v3/include/bits/sbuf_iter.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsbuf_iter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsbuf_iter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsbuf_iter.h?ref=bfa1e6b11bb2708837ad3117ff4348955be08707", "patch": "@@ -38,7 +38,7 @@ namespace std\n {\n   template<typename _CharT, typename _Traits>\n     class ostreambuf_iterator\n-    : public iterator<output_iterator_tag, _CharT, void, void, void>\n+    : public iterator<output_iterator_tag, void, void, void, void>\n     {\n     public:\n       // Types:"}, {"sha": "e16a3bd2c800f5fcb3e0f0cc4360b7e7f1663152", "filename": "libstdc++-v3/include/bits/std_complex.h", "status": "modified", "additions": 39, "deletions": 4, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_complex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_complex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_complex.h?ref=bfa1e6b11bb2708837ad3117ff4348955be08707", "patch": "@@ -41,11 +41,10 @@\n \n #include <bits/c++config.h>\n #include <bits/std_cmath.h>\n-#include <bits/std_iosfwd.h>\n+#include <bits/std_sstream.h>\n \n namespace std\n {\n-\n   // Forward declarations\n   template<typename _Tp> class complex;\n   template<> class complex<float>;\n@@ -346,11 +345,47 @@ namespace std\n \n   template<typename _Tp, typename _CharT, class _Traits>\n     basic_istream<_CharT, _Traits>&\n-    operator>>(basic_istream<_CharT, _Traits>&, complex<_Tp>&);\n+    operator>>(basic_istream<_CharT, _Traits>& __is, complex<_Tp>& __x)\n+    {\n+      _Tp __re_x, __im_x;\n+      _CharT __ch;\n+      __is >> __ch;\n+      if (__ch == '(') \n+\t{\n+\t  __is >> __re_x >> __ch;\n+\t  if (__ch == ',') \n+\t    {\n+\t      __is >> __im_x >> __ch;\n+\t      if (__ch == ')') \n+\t\t__x = complex<_Tp>(__re_x, __im_x);\n+\t      else\n+\t\t__is.setstate(ios_base::failbit);\n+\t    }\n+\t  else if (__ch == ')') \n+\t    __x = complex<_Tp>(__re_x, _Tp(0));\n+\t  else\n+\t    __is.setstate(ios_base::failbit);\n+\t}\n+      else \n+\t{\n+\t  __is.putback(__ch);\n+\t  __is >> __re_x;\n+\t  __x = complex<_Tp>(__re_x, _Tp(0));\n+\t}\n+      return __is;\n+    }\n \n   template<typename _Tp, typename _CharT, class _Traits>\n     basic_ostream<_CharT, _Traits>&\n-    operator<<(basic_ostream<_CharT, _Traits>&, const complex<_Tp>&);\n+    operator<<(basic_ostream<_CharT, _Traits>& __os, const complex<_Tp>& __x)\n+    {\n+      basic_ostringstream<_CharT, _Traits> __s;\n+      __s.flags(__os.flags());\n+      __s.imbue(__os.getloc());\n+      __s.precision(__os.precision());\n+      __s << '(' << __x.real() << \",\" << __x.imag() << ')';\n+      return __os << __s.str();\n+    }\n \n   // Values\n   template<typename _Tp>"}, {"sha": "9d2dbc2a2d187ec3250c911aeff5ee6cd6be66d6", "filename": "libstdc++-v3/include/bits/std_iosfwd.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iosfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iosfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iosfwd.h?ref=bfa1e6b11bb2708837ad3117ff4348955be08707", "patch": "@@ -129,3 +129,8 @@ namespace std\n } // namespace std\n \n #endif\t// _CPP_IOSFWD\n+\n+\n+\n+\n+"}, {"sha": "ec3791e24d6efed018a5031103dc0d2691c25286", "filename": "libstdc++-v3/include/bits/std_istream.h", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_istream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_istream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_istream.h?ref=bfa1e6b11bb2708837ad3117ff4348955be08707", "patch": "@@ -41,7 +41,6 @@\n \n namespace std\n {\n-\n   // 27.6.1.1 Template class basic_istream\n   template<typename _CharT, typename _Traits>\n     class basic_istream : virtual public basic_ios<_CharT, _Traits>\n@@ -59,7 +58,7 @@ namespace std\n       typedef basic_streambuf<_CharT, _Traits> \t\t__streambuf_type;\n       typedef basic_ios<_CharT, _Traits>\t\t__ios_type;\n       typedef basic_istream<_CharT, _Traits>\t\t__istream_type;\n-      typedef istreambuf_iterator<_CharT>\t\t__istreambuf_iter;\n+      typedef istreambuf_iterator<_CharT, _Traits>\t__istreambuf_iter;\n       typedef num_get<_CharT, __istreambuf_iter>        __numget_type;\n       typedef ctype<_CharT>           \t\t\t__ctype_type;\n \n@@ -78,10 +77,7 @@ namespace std\n \n       virtual \n       ~basic_istream() \n-      {\n-\t_M_gcount = streamsize(0);\n-\t_M_fnumget = NULL; \n-      }\n+      { _M_gcount = streamsize(0); }\n \n       // 27.6.1.1.2 Prefix/suffix:\n       class sentry;\n@@ -289,7 +285,6 @@ namespace std\n   template<typename _CharT, typename _Traits>\n     basic_istream<_CharT, _Traits>& \n     ws(basic_istream<_CharT, _Traits>& __is);\n-\n } // namespace std\n \n #ifdef _GLIBCPP_NO_TEMPLATE_EXPORT"}, {"sha": "e8efb3b249e4e187768a9f667aca9594ad54eafb", "filename": "libstdc++-v3/include/bits/std_ostream.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_ostream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_ostream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_ostream.h?ref=bfa1e6b11bb2708837ad3117ff4348955be08707", "patch": "@@ -57,7 +57,7 @@ namespace std\n       typedef basic_streambuf<_CharT, _Traits> \t\t__streambuf_type;\n       typedef basic_ios<_CharT, _Traits>\t\t__ios_type;\n       typedef basic_ostream<_CharT, _Traits>\t\t__ostream_type;\n-      typedef ostreambuf_iterator<_CharT>\t\t__ostreambuf_iter;\n+      typedef ostreambuf_iterator<_CharT, _Traits>\t__ostreambuf_iter;\n       typedef num_put<_CharT, __ostreambuf_iter>        __numput_type;\n       typedef ctype<_CharT>           \t\t\t__ctype_type;\n \n@@ -67,8 +67,7 @@ namespace std\n       { this->init(__sb); }\n \n       virtual \n-      ~basic_ostream() \n-      { _M_fnumput = NULL; }\n+      ~basic_ostream() { }\n \n       // 27.6.2.3 Prefix/suffix:\n       class sentry;"}, {"sha": "8cc674d70397aba7c3dba694cf847a4a580cda5a", "filename": "libstdc++-v3/include/bits/std_streambuf.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_streambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_streambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_streambuf.h?ref=bfa1e6b11bb2708837ad3117ff4348955be08707", "patch": "@@ -277,7 +277,6 @@ namespace std\n \t_M_buf_size_opt = 0;\n \t_M_mode = ios_base::openmode(0);\n \t_M_buf_locale_init = false;\n-\n       }\n \n       // Locales:"}, {"sha": "c4b8a95b5f85df742ce7452ca4e82917a25742b5", "filename": "libstdc++-v3/src/complex_io.cc", "status": "modified", "additions": 3, "deletions": 58, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2Fsrc%2Fcomplex_io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2Fsrc%2Fcomplex_io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcomplex_io.cc?ref=bfa1e6b11bb2708837ad3117ff4348955be08707", "patch": "@@ -1,6 +1,6 @@\n // The template and inlines for the -*- C++ -*- complex number classes.\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,66 +28,9 @@\n // the GNU General Public License.\n \n #include <bits/std_complex.h>\n-#include <bits/std_istream.h>\n-#include <bits/std_ostream.h>\n-#include <bits/std_sstream.h>\n \n namespace std\n {\n-    \n-  template<typename _Tp, typename _CharT, class _Traits>\n-    basic_istream <_CharT, _Traits> &\n-    operator>>(basic_istream<_CharT, _Traits>& __is, complex<_Tp>& __x)\n-    {\n-#if !defined(_GLIBCPP_BUGGY_FLOAT_COMPLEX) && !defined(_GLIBCPP_BUGGY_COMPLEX)\n-      _Tp __re_x, __im_x;\n-      _CharT __ch;\n-      __is >> __ch;\n-      if (__ch == '(') \n-\t{\n-\t  __is >> __re_x >> __ch;\n-\t  if (__ch == ',') \n-\t    {\n-\t      __is >> __im_x >> __ch;\n-\t      if (__ch == ')') \n-\t\t{\n-\t\t  __x = complex<_Tp>(__re_x, __im_x);\n-\t\t  return __is;\n-\t\t}\n-\t    }\n-\t  else if (__ch == ')') \n-\t    {\n-\t      __x = complex<_Tp>(__re_x, _Tp(0));\n-\t      return __is;\n-\t    }\n-\t}\n-      else \n-\t{\n-\t  __is.putback(__ch);\n-\t  __is >> __re_x;\n-\t  __x = complex<_Tp>(__re_x, _Tp(0));\n-\t  return __is;\n-\t}\n-      __is.setstate(ios_base::failbit);\n-#else\n-      __x = complex<_Tp>(_Tp(0), _Tp(0));\n-#endif\n-      return __is;\n-    }\n-\n-  template<typename _Tp, typename _CharT, class _Traits>\n-    basic_ostream<_CharT, _Traits>&\n-    operator<<(basic_ostream<_CharT, _Traits>& __os, const complex<_Tp>& __x)\n-    {\n-      basic_ostringstream<_CharT, _Traits> __s;\n-      __s.flags(__os.flags());\n-      __s.imbue(__os.getloc());\n-      __s.precision (__os.precision());\n-      __s << '(' << __x.real() << \",\" << __x.imag() << ')' << ends;\n-      return __os << __s.str();\n-    }\n-\n-\n   template\n     basic_istream<char, char_traits<char> >&\n     operator>>(basic_istream<char, char_traits<char> >&, complex<float>&);\n@@ -149,3 +92,5 @@ namespace std\n #endif //_GLIBCPP_USE_WCHAR_T\n } // namespace std\n \n+\n+"}, {"sha": "0b9cf7564ea37128d2c2677a765a79595a876c59", "filename": "libstdc++-v3/src/locale-inst.cc", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc?ref=bfa1e6b11bb2708837ad3117ff4348955be08707", "patch": "@@ -170,11 +170,30 @@ namespace std\n   // has_facet\n   template \n     bool\n-    has_facet<numpunct<char> >(const locale &);\n+    has_facet<numpunct<char> >(const locale&);\n+  template \n+    bool\n+    has_facet<num_put<char> >(const locale&);\n+  template \n+    bool\n+    has_facet<num_get<char> >(const locale&);\n+  template \n+    bool\n+    has_facet<ctype<char> >(const locale&);\n+\n #ifdef _GLIBCPP_USE_WCHAR_T\n   template \n     bool\n-    has_facet<numpunct<wchar_t> >(const locale &);\n+    has_facet<numpunct<wchar_t> >(const locale&);\n+  template \n+    bool\n+    has_facet<num_put<wchar_t> >(const locale&);\n+  template \n+    bool\n+    has_facet<num_get<wchar_t> >(const locale&);\n+  template \n+    bool\n+    has_facet<ctype<wchar_t> >(const locale&);\n #endif\n \n   //"}, {"sha": "71ac48d456a1a4870c9c128e46b32b2f4f73dc5d", "filename": "libstdc++-v3/testsuite/26_numerics/complex_inserters_extractors.cc", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex_inserters_extractors.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfa1e6b11bb2708837ad3117ff4348955be08707/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex_inserters_extractors.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex_inserters_extractors.cc?ref=bfa1e6b11bb2708837ad3117ff4348955be08707", "patch": "@@ -88,11 +88,58 @@ testall()\n   return 0;\n }\n \n+// libstdc++/2970\n+void test01()\n+{\n+  using namespace std;\n+  bool test = true;\n+  \n+  complex<float> cf01(-1.1, -333.2);\n+  stringstream ss;\n+  ss << cf01;\n+  string str = ss.str();\n+  VERIFY( str == \"(-1.1,-333.2)\" );\n+}\n+\n+// libstdc++/2985\n+struct gnu_char_traits : public std::char_traits<char>\n+{ };\n+\n+typedef std::basic_ostringstream<char, gnu_char_traits> gnu_sstream;\n+\n+void test02()\n+{\n+  bool test = true;\n+\n+  // Construct locale with specialized facets.\n+  typedef gnu_sstream::__numput_type numput_type;\n+  typedef gnu_sstream::__numget_type numget_type;\n+  std::locale loc_c = std::locale::classic();\n+  std::locale loc_1(loc_c, new numput_type);\n+  std::locale loc_2(loc_1, new numget_type);\n+  VERIFY( std::has_facet<numput_type>(loc_2) );\n+  VERIFY( std::has_facet<numget_type>(loc_2) );\n+\n+  gnu_sstream sstr;\n+  std::basic_ios<char, gnu_char_traits>* pios = &sstr;\n+  sstr.imbue(loc_2);\n+\n+\n+  std::complex<double> x(3, 4);\n+  sstr << x; \n+  VERIFY( sstr.str() == \"(3,4)\" );\n+}\n+\n int\n main()\n {\n   testall<float>();\n   testall<double>();\n   testall<long double>();\n+\n+  test01();\n+  test02();\n+\n   return 0;\n }\n+"}]}