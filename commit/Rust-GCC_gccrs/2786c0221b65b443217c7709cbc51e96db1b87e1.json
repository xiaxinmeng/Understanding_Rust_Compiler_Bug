{"sha": "2786c0221b65b443217c7709cbc51e96db1b87e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc4NmMwMjIxYjY1YjQ0MzIxN2M3NzA5Y2JjNTFlOTZkYjFiODdlMQ==", "commit": {"author": {"name": "Stefan Schulze Frielinghaus", "email": "stefansf@linux.ibm.com", "date": "2020-04-26T15:10:51Z"}, "committer": {"name": "Stefan Schulze Frielinghaus", "email": "stefansf@linux.ibm.com", "date": "2020-04-30T06:12:42Z"}, "message": "var-tracking.c: Fix possible use of uninitialized variable pre\n\nWhile bootstrapping GCC on S/390 the following warning/error is raised:\n\ngcc/var-tracking.c:10239:34: error: 'pre' may be used uninitialized in this function [-Werror=maybe-uninitialized]\n10239 |       VTI (bb)->out.stack_adjust += pre;\n      |                                  ^\n\nThe lines of interest are:\n\n  HOST_WIDE_INT pre, post = 0;\n  // ...\n  if (!frame_pointer_needed)\n    {\n      insn_stack_adjust_offset_pre_post (insn, &pre, &post);\n      // ...\n    }\n\n  // ...\n  adjust_insn (bb, insn);\n\n  if (!frame_pointer_needed && pre)\n    VTI (bb)->out.stack_adjust += pre;\n\nBoth if statements depend on global variable frame_pointer_needed.  In function\ninsn_stack_adjust_offset_pre_post local variable pre is initialized.  The\nproblematic part is the function call between both if statements.  Since\nadjust_insn also calls functions which are defined in a different compilation\nunit, we are not able to prove that global variable frame_pointer_needed is not\naltered by adjust_insn and its siblings.  Thus we must assume that\nframe_pointer_needed may be true before the call and false afterwards which\nrenders the warning true (admitted the location hint is not totally perfect).\nBy initialising pre we silence the warning.\n\ngcc/ChangeLog:\n\n2020-04-30  Stefan Schulze Frielinghaus  <stefansf@linux.ibm.com>\n\n        * var-tracking.c (vt_initialize): Move variables pre and post\n        into inner block and initialize both in order to fix warning\n        about uninitialized use.  Remove unnecessary checks for\n        frame_pointer_needed.", "tree": {"sha": "0a8cc325a797c0bb831da895deee70bf1947c062", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a8cc325a797c0bb831da895deee70bf1947c062"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2786c0221b65b443217c7709cbc51e96db1b87e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2786c0221b65b443217c7709cbc51e96db1b87e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2786c0221b65b443217c7709cbc51e96db1b87e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2786c0221b65b443217c7709cbc51e96db1b87e1/comments", "author": {"login": "stefan-sf-ibm", "id": 73470131, "node_id": "MDQ6VXNlcjczNDcwMTMx", "avatar_url": "https://avatars.githubusercontent.com/u/73470131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stefan-sf-ibm", "html_url": "https://github.com/stefan-sf-ibm", "followers_url": "https://api.github.com/users/stefan-sf-ibm/followers", "following_url": "https://api.github.com/users/stefan-sf-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/stefan-sf-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/stefan-sf-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stefan-sf-ibm/subscriptions", "organizations_url": "https://api.github.com/users/stefan-sf-ibm/orgs", "repos_url": "https://api.github.com/users/stefan-sf-ibm/repos", "events_url": "https://api.github.com/users/stefan-sf-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/stefan-sf-ibm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "stefan-sf-ibm", "id": 73470131, "node_id": "MDQ6VXNlcjczNDcwMTMx", "avatar_url": "https://avatars.githubusercontent.com/u/73470131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stefan-sf-ibm", "html_url": "https://github.com/stefan-sf-ibm", "followers_url": "https://api.github.com/users/stefan-sf-ibm/followers", "following_url": "https://api.github.com/users/stefan-sf-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/stefan-sf-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/stefan-sf-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stefan-sf-ibm/subscriptions", "organizations_url": "https://api.github.com/users/stefan-sf-ibm/orgs", "repos_url": "https://api.github.com/users/stefan-sf-ibm/repos", "events_url": "https://api.github.com/users/stefan-sf-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/stefan-sf-ibm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c9450bf5c5c71945ec4474cd0f8bf830e431806", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c9450bf5c5c71945ec4474cd0f8bf830e431806", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c9450bf5c5c71945ec4474cd0f8bf830e431806"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "563d42cc694653d1feaa32880be6ee3d2b21d4ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2786c0221b65b443217c7709cbc51e96db1b87e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2786c0221b65b443217c7709cbc51e96db1b87e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2786c0221b65b443217c7709cbc51e96db1b87e1", "patch": "@@ -1,3 +1,10 @@\n+2020-04-30  Stefan Schulze Frielinghaus  <stefansf@linux.ibm.com>\n+\n+\t* var-tracking.c (vt_initialize): Move variables pre and post\n+\tinto inner block and initialize both in order to fix warning\n+\tabout uninitialized use.  Remove unnecessary checks for\n+\tframe_pointer_needed.\n+\n 2020-04-30  Stefan Schulze Frielinghaus  <stefansf@linux.ibm.com>\n \n \t* toplev.c (output_stack_usage_1): Ensure that first"}, {"sha": "fc861a0d8ce0e389e8680f83f12acdfb4ab80de6", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2786c0221b65b443217c7709cbc51e96db1b87e1/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2786c0221b65b443217c7709cbc51e96db1b87e1/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=2786c0221b65b443217c7709cbc51e96db1b87e1", "patch": "@@ -10171,7 +10171,6 @@ vt_initialize (void)\n   FOR_EACH_BB_FN (bb, cfun)\n     {\n       rtx_insn *insn;\n-      HOST_WIDE_INT pre, post = 0;\n       basic_block first_bb, last_bb;\n \n       if (MAY_HAVE_DEBUG_BIND_INSNS)\n@@ -10216,6 +10215,8 @@ vt_initialize (void)\n \t    {\n \t      if (INSN_P (insn))\n \t\t{\n+\t\t  HOST_WIDE_INT pre = 0, post = 0;\n+\n \t\t  if (!frame_pointer_needed)\n \t\t    {\n \t\t      insn_stack_adjust_offset_pre_post (insn, &pre, &post);\n@@ -10235,7 +10236,7 @@ vt_initialize (void)\n \t\t  cselib_hook_called = false;\n \t\t  adjust_insn (bb, insn);\n \n-\t\t  if (!frame_pointer_needed && pre)\n+\t\t  if (pre)\n \t\t    VTI (bb)->out.stack_adjust += pre;\n \n \t\t  if (DEBUG_MARKER_INSN_P (insn))\n@@ -10262,7 +10263,7 @@ vt_initialize (void)\n \t\t    add_with_sets (insn, 0, 0);\n \t\t  cancel_changes (0);\n \n-\t\t  if (!frame_pointer_needed && post)\n+\t\t  if (post)\n \t\t    {\n \t\t      micro_operation mo;\n \t\t      mo.type = MO_ADJUST;"}]}