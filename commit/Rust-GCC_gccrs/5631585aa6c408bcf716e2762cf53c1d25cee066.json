{"sha": "5631585aa6c408bcf716e2762cf53c1d25cee066", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTYzMTU4NWFhNmM0MDhiY2Y3MTZlMjc2MmNmNTNjMWQyNWNlZTA2Ng==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2015-05-06T20:13:50Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2015-05-06T20:13:50Z"}, "message": "jit: add test-benchmark.c\n\ngcc/testsuite/ChangeLog:\n\t* jit.dg/harness.h (set_options): Wrap with\n\t#ifndef TEST_ESCHEWS_SET_OPTIONS.\n\t* jit.dg/jit.exp (is_testcase_meant_to_generate_a_reproducer):\n\tSpecial-case test-benchmark.c as a negative.\n\t* jit.dg/test-benchmark.c: New file.\n\nFrom-SVN: r222863", "tree": {"sha": "38dc583b177d23ba42df471e92d9432f90d42c5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38dc583b177d23ba42df471e92d9432f90d42c5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5631585aa6c408bcf716e2762cf53c1d25cee066", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5631585aa6c408bcf716e2762cf53c1d25cee066", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5631585aa6c408bcf716e2762cf53c1d25cee066", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5631585aa6c408bcf716e2762cf53c1d25cee066/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d2463960a40d5ce16499da8b4d5317ace514586d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2463960a40d5ce16499da8b4d5317ace514586d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2463960a40d5ce16499da8b4d5317ace514586d"}], "stats": {"total": 256, "additions": 255, "deletions": 1}, "files": [{"sha": "669efb56af314855f3d1a6e0f3726f876f4ab049", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5631585aa6c408bcf716e2762cf53c1d25cee066/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5631585aa6c408bcf716e2762cf53c1d25cee066/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5631585aa6c408bcf716e2762cf53c1d25cee066", "patch": "@@ -1,3 +1,11 @@\n+2015-05-06  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* jit.dg/harness.h (set_options): Wrap with\n+\t#ifndef TEST_ESCHEWS_SET_OPTIONS.\n+\t* jit.dg/jit.exp (is_testcase_meant_to_generate_a_reproducer):\n+\tSpecial-case test-benchmark.c as a negative.\n+\t* jit.dg/test-benchmark.c: New file.\n+\n 2015-05-06  Yvan Roux  <yvan.roux@linaro.org>\n \n \tPR target/64208"}, {"sha": "6b59fb57aaefa5b8fd862b1e60b5477071c5bbb0", "filename": "gcc/testsuite/jit.dg/harness.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5631585aa6c408bcf716e2762cf53c1d25cee066/gcc%2Ftestsuite%2Fjit.dg%2Fharness.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5631585aa6c408bcf716e2762cf53c1d25cee066/gcc%2Ftestsuite%2Fjit.dg%2Fharness.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Fharness.h?ref=5631585aa6c408bcf716e2762cf53c1d25cee066", "patch": "@@ -230,6 +230,7 @@ check_string_contains (const char *funcname,\n \ttest, funcname, name, expected_substring);\n }\n \n+#ifndef TEST_ESCHEWS_SET_OPTIONS\n static void set_options (gcc_jit_context *ctxt, const char *argv0)\n {\n   /* Set up options.  */\n@@ -262,6 +263,7 @@ static void set_options (gcc_jit_context *ctxt, const char *argv0)\n     GCC_JIT_BOOL_OPTION_DUMP_SUMMARY,\n     0);\n }\n+#endif /* #ifndef TEST_ESCHEWS_SET_OPTIONS */\n \n /* Concatenate two strings.  The result must be released using \"free\".  */\n "}, {"sha": "39e37c2da826d19dd7a86766d53954fc0a513b16", "filename": "gcc/testsuite/jit.dg/jit.exp", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5631585aa6c408bcf716e2762cf53c1d25cee066/gcc%2Ftestsuite%2Fjit.dg%2Fjit.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5631585aa6c408bcf716e2762cf53c1d25cee066/gcc%2Ftestsuite%2Fjit.dg%2Fjit.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Fjit.exp?ref=5631585aa6c408bcf716e2762cf53c1d25cee066", "patch": "@@ -308,12 +308,16 @@ verbose \"tests: $tests\"\n proc is_testcase_meant_to_generate_a_reproducer {name} {\n     # We expect most testcases to generate a reproducer.\n     # The exceptions are the tutorials (which don't have a \"test-\"\n-    # prefix), and test-threads.c (which is unique).\n+    # prefix), and test-threads.c and test-benchmark.c (which are each\n+    # unique).\n     verbose \"is_testcase_meant_to_generate_a_reproducer: $name\"\n     if { [string match \"*test-*\" $name] } {\n \tif { [string match \"*test-threads.c\" $name] } {\n \t    return 0\n \t}\n+\tif { [string match \"*test-benchmark.c\" $name] } {\n+\t    return 0\n+\t}\n \treturn 1\n     }\n     return 0"}, {"sha": "324ba933b70b0dfdb2d59ed3343a123fe7978137", "filename": "gcc/testsuite/jit.dg/test-benchmark.c", "status": "added", "additions": 240, "deletions": 0, "changes": 240, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5631585aa6c408bcf716e2762cf53c1d25cee066/gcc%2Ftestsuite%2Fjit.dg%2Ftest-benchmark.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5631585aa6c408bcf716e2762cf53c1d25cee066/gcc%2Ftestsuite%2Fjit.dg%2Ftest-benchmark.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-benchmark.c?ref=5631585aa6c408bcf716e2762cf53c1d25cee066", "patch": "@@ -0,0 +1,240 @@\n+/* A simple benchmark: how long does it take to use libgccjit to\n+   compile and run a simple function?  */\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <string.h>\n+#include <sys/times.h>\n+\n+#include \"libgccjit.h\"\n+\n+#define TEST_ESCHEWS_SET_OPTIONS\n+#define TEST_ESCHEWS_TEST_JIT\n+#define TEST_PROVIDES_MAIN\n+#include \"harness.h\"\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  /*\n+    Simple sum-of-squares, to test conditionals and looping\n+\n+    int loop_test (int n)\n+    {\n+      int i;\n+      int sum = 0;\n+      for (i = 0; i < n ; i ++)\n+      {\n+\tsum += i * i;\n+      }\n+      return sum;\n+   */\n+  gcc_jit_type *the_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_INT);\n+  gcc_jit_type *return_type = the_type;\n+\n+  gcc_jit_param *n =\n+    gcc_jit_context_new_param (ctxt, NULL, the_type, \"n\");\n+  gcc_jit_param *params[1] = {n};\n+  gcc_jit_function *func =\n+    gcc_jit_context_new_function (ctxt, NULL,\n+\t\t\t\t  GCC_JIT_FUNCTION_EXPORTED,\n+\t\t\t\t  return_type,\n+\t\t\t\t  \"loop_test\",\n+\t\t\t\t  1, params, 0);\n+\n+  /* Build locals:  */\n+  gcc_jit_lvalue *i =\n+    gcc_jit_function_new_local (func, NULL, the_type, \"i\");\n+  gcc_jit_lvalue *sum =\n+    gcc_jit_function_new_local (func, NULL, the_type, \"sum\");\n+\n+  gcc_jit_block *initial =\n+    gcc_jit_function_new_block (func, \"initial\");\n+  gcc_jit_block *loop_cond =\n+    gcc_jit_function_new_block (func, \"loop_cond\");\n+  gcc_jit_block *loop_body =\n+    gcc_jit_function_new_block (func, \"loop_body\");\n+  gcc_jit_block *after_loop =\n+    gcc_jit_function_new_block (func, \"after_loop\");\n+\n+  /* sum = 0; */\n+  gcc_jit_block_add_assignment (\n+    initial, NULL,\n+    sum,\n+    gcc_jit_context_new_rvalue_from_int (ctxt, the_type, 0));\n+\n+  /* i = 0; */\n+  gcc_jit_block_add_assignment (\n+    initial, NULL,\n+    i,\n+    gcc_jit_context_new_rvalue_from_int (ctxt, the_type, 0));\n+\n+  gcc_jit_block_end_with_jump (initial, NULL, loop_cond);\n+\n+  /* if (i >= n) */\n+  gcc_jit_block_end_with_conditional (\n+    loop_cond, NULL,\n+    gcc_jit_context_new_comparison (\n+       ctxt, NULL,\n+       GCC_JIT_COMPARISON_GE,\n+       gcc_jit_lvalue_as_rvalue (i),\n+       gcc_jit_param_as_rvalue (n)),\n+    after_loop,\n+    loop_body);\n+\n+  /* sum += i * i */\n+  gcc_jit_block_add_assignment (\n+    loop_body, NULL,\n+    sum,\n+    gcc_jit_context_new_binary_op (\n+      ctxt, NULL,\n+      GCC_JIT_BINARY_OP_PLUS, the_type,\n+      gcc_jit_lvalue_as_rvalue (sum),\n+      gcc_jit_context_new_binary_op (\n+\t ctxt, NULL,\n+\t GCC_JIT_BINARY_OP_MULT, the_type,\n+\t gcc_jit_lvalue_as_rvalue (i),\n+\t gcc_jit_lvalue_as_rvalue (i))));\n+\n+  /* i++ */\n+  gcc_jit_block_add_assignment (\n+    loop_body, NULL,\n+    i,\n+    gcc_jit_context_new_binary_op (\n+      ctxt, NULL,\n+      GCC_JIT_BINARY_OP_PLUS, the_type,\n+      gcc_jit_lvalue_as_rvalue (i),\n+      gcc_jit_context_new_rvalue_from_int (\n+\tctxt,\n+\tthe_type,\n+\t1)));\n+\n+  gcc_jit_block_end_with_jump (loop_body, NULL, loop_cond);\n+\n+  /* return sum */\n+  gcc_jit_block_end_with_return (\n+    after_loop,\n+    NULL,\n+    gcc_jit_lvalue_as_rvalue (sum));\n+}\n+\n+void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  typedef int (*loop_test_fn_type) (int);\n+  if (!result)\n+    {\n+      fail (\"%s: %s: !result\", test, __func__);\n+      return;\n+    }\n+  loop_test_fn_type loop_test =\n+    (loop_test_fn_type)gcc_jit_result_get_code (result, \"loop_test\");\n+  if (!loop_test)\n+    {\n+      fail (\"%s: %s: !loop_test\", test, __func__);\n+      return;\n+    }\n+  int val = loop_test (100);\n+  if (val != 328350)\n+    fail (\"%s: %s: val != 328350\", test, __func__);\n+}\n+\n+/* Run one iteration of the test.  */\n+static void\n+test_jit (const char *argv0, int opt_level)\n+{\n+  gcc_jit_context *ctxt;\n+  gcc_jit_result *result;\n+\n+  ctxt = gcc_jit_context_acquire ();\n+  if (!ctxt)\n+    {\n+      fail (\"gcc_jit_context_acquire failed\");\n+      return;\n+    }\n+\n+  /* Set up options.  */\n+  gcc_jit_context_set_str_option (\n+    ctxt,\n+    GCC_JIT_STR_OPTION_PROGNAME,\n+    argv0);\n+\n+  /* Set up options for benchmarking.  */\n+  gcc_jit_context_set_int_option (\n+    ctxt,\n+    GCC_JIT_INT_OPTION_OPTIMIZATION_LEVEL,\n+    opt_level);\n+  /* Generating debuginfo takes time; turn it off.  */\n+  gcc_jit_context_set_bool_option (\n+    ctxt,\n+    GCC_JIT_BOOL_OPTION_DEBUGINFO,\n+    0);\n+  /* This option is extremely slow; turn it off.  */\n+  gcc_jit_context_set_bool_option (\n+    ctxt,\n+    GCC_JIT_BOOL_OPTION_SELFCHECK_GC,\n+    0);\n+\n+  /* Turn this on to get detailed timings.  */\n+  if (0)\n+    gcc_jit_context_set_bool_option (\n+      ctxt,\n+      GCC_JIT_BOOL_OPTION_DUMP_SUMMARY,\n+      1);\n+\n+  create_code (ctxt, NULL);\n+\n+  result = gcc_jit_context_compile (ctxt);\n+  verify_code (ctxt, result);\n+\n+  gcc_jit_context_release (ctxt);\n+  gcc_jit_result_release (result);\n+}\n+\n+/* Taken from timevar.c.  */\n+static double ticks_to_msec;\n+#define TICKS_PER_SECOND sysconf (_SC_CLK_TCK) /* POSIX 1003.1-1996 */\n+#define TICKS_TO_MSEC (1 / (double)TICKS_PER_SECOND)\n+static double get_wallclock_time (void)\n+{\n+  struct tms tms;\n+  return times (&tms) * ticks_to_msec;\n+}\n+\n+/* Time 100 iterations, at each optimization level\n+   (for 400 iterations in all).  */\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int opt_level;\n+  int num_iterations = 100;\n+\n+  ticks_to_msec = TICKS_TO_MSEC;\n+\n+  for (opt_level = 0; opt_level < 4; opt_level++)\n+    {\n+      int i;\n+      double start_time, end_time, elapsed_time;\n+      start_time = get_wallclock_time ();\n+      for (i = 1; i <= num_iterations; i++)\n+\t{\n+\t  snprintf (test, sizeof (test),\n+\t\t    \"%s iteration %d of %d\",\n+\t\t    extract_progname (argv[0]),\n+\t\t    i, num_iterations);\n+\t  test_jit (argv[0], opt_level);\n+\t}\n+      end_time = get_wallclock_time ();\n+      elapsed_time = end_time - start_time;\n+      pass (\"%s: survived %i iterations at optlevel %i\",\n+\t    argv[0], num_iterations, opt_level);\n+      note ((\"%s: %i iterations at optlevel %i\"\n+\t     \" took a total of %.3fs (%.3fs per iteration)\"),\n+\t    argv[0], num_iterations, opt_level,\n+\t    elapsed_time, elapsed_time / num_iterations);\n+    }\n+  totals ();\n+\n+  return 0;\n+}"}]}