{"sha": "13a43a90aea368a25da50762eba4873bafb4e448", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNhNDNhOTBhZWEzNjhhMjVkYTUwNzYyZWJhNDg3M2JhZmI0ZTQ0OA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-09-01T09:49:39Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-09-01T10:56:13Z"}, "message": "tree-optimization/93491 - avoid PRE of trapping calls across exits\n\nThis makes us avoid PREing calls that could trap across other\ncalls that might not return.  The PR88087 testcase has exactly\nsuch case so I've refactored the testcase to contain a valid PRE.\nI've also adjusted PRE to not consider pure calls possibly\nnot returning in line with what we do elsewhere.\n\nNote we don't have a good idea whether a function always returns\nnormally or whether its body is known to never trap.  That's\nsomething IPA could compute.\n\n2021-09-01  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/93491\n\t* tree-ssa-pre.c (compute_avail): Set BB_MAY_NOTRETURN\n\tafter processing the stmt itself.  Do not consider\n\tpure functions possibly not returning.  Properly avoid\n\tadding possibly trapping calls to EXP_GEN when there's\n\ta preceeding possibly not returning call.\n\t* tree-ssa-sccvn.c (vn_reference_may_trap): Conservatively\n\tnot handle calls.\n\n\t* gcc.dg/torture/pr93491.c: New testcase.\n\t* gcc.dg/tree-ssa/pr88087.c: Change to valid PRE opportunity.", "tree": {"sha": "a6f2dbe2ca31cfcfb047ed7384745ed48eb519ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6f2dbe2ca31cfcfb047ed7384745ed48eb519ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13a43a90aea368a25da50762eba4873bafb4e448", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13a43a90aea368a25da50762eba4873bafb4e448", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13a43a90aea368a25da50762eba4873bafb4e448", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13a43a90aea368a25da50762eba4873bafb4e448/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "153766ec8351d55cfe8bd6d69bdfc0c2cef71e56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/153766ec8351d55cfe8bd6d69bdfc0c2cef71e56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/153766ec8351d55cfe8bd6d69bdfc0c2cef71e56"}], "stats": {"total": 76, "additions": 60, "deletions": 16}, "files": [{"sha": "2cb4c0ca7afe5da7fc5a13bb592682ddd65effb1", "filename": "gcc/testsuite/gcc.dg/torture/pr93491.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13a43a90aea368a25da50762eba4873bafb4e448/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr93491.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13a43a90aea368a25da50762eba4873bafb4e448/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr93491.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr93491.c?ref=13a43a90aea368a25da50762eba4873bafb4e448", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+\n+extern void exit (int);\n+\n+__attribute__((noipa))\n+void f(int i)\n+{\n+  exit(i);\n+}\n+\n+__attribute__((const,noipa))\n+int g(int i)\n+{\n+  return 1 / i;\n+}\n+\n+int main()\n+{\n+  while (1)\n+    {\n+      f(0);\n+      f(g(0));\n+    }\n+}"}, {"sha": "c48dba5bf21c339197d337b616f5fd71a08cd45e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr88087.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13a43a90aea368a25da50762eba4873bafb4e448/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr88087.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13a43a90aea368a25da50762eba4873bafb4e448/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr88087.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr88087.c?ref=13a43a90aea368a25da50762eba4873bafb4e448", "patch": "@@ -1,17 +1,17 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-pre-stats\" } */\n+/* { dg-options \"-O2 -fno-code-hoisting -fdump-tree-pre-stats\" } */\n \n int f();\n int d;\n-void c()\n+void c(int x)\n {\n-  for (;;)\n-    {\n-      f();\n-      int (*fp)() __attribute__((const)) = (void *)f;\n-      d = fp();\n-    }\n+  int (*fp)() __attribute__((const)) = (void *)f;\n+  if (x)\n+    d = fp ();\n+  int tem = fp ();\n+  f();\n+  d = tem;\n }\n \n-/* We shouldn't ICE and hoist the const call of fp out of the loop.  */\n+/* We shouldn't ICE and PRE the const call.  */\n /* { dg-final { scan-tree-dump \"Eliminated: 1\" \"pre\" } } */"}, {"sha": "769aadb2315ab39acab82d26397443e94a918d52", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13a43a90aea368a25da50762eba4873bafb4e448/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13a43a90aea368a25da50762eba4873bafb4e448/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=13a43a90aea368a25da50762eba4873bafb4e448", "patch": "@@ -3957,6 +3957,7 @@ compute_avail (function *fun)\n \n       /* Now compute value numbers and populate value sets with all\n \t the expressions computed in BLOCK.  */\n+      bool set_bb_may_notreturn = false;\n       for (gimple_stmt_iterator gsi = gsi_start_bb (block); !gsi_end_p (gsi);\n \t   gsi_next (&gsi))\n \t{\n@@ -3965,6 +3966,12 @@ compute_avail (function *fun)\n \n \t  stmt = gsi_stmt (gsi);\n \n+\t  if (set_bb_may_notreturn)\n+\t    {\n+\t      BB_MAY_NOTRETURN (block) = 1;\n+\t      set_bb_may_notreturn = false;\n+\t    }\n+\n \t  /* Cache whether the basic-block has any non-visible side-effect\n \t     or control flow.\n \t     If this isn't a call or it is the last stmt in the\n@@ -3976,10 +3983,12 @@ compute_avail (function *fun)\n \t\t that forbids hoisting possibly trapping expressions\n \t\t before it.  */\n \t      int flags = gimple_call_flags (stmt);\n-\t      if (!(flags & ECF_CONST)\n+\t      if (!(flags & (ECF_CONST|ECF_PURE))\n \t\t  || (flags & ECF_LOOPING_CONST_OR_PURE)\n \t\t  || stmt_can_throw_external (fun, stmt))\n-\t\tBB_MAY_NOTRETURN (block) = 1;\n+\t\t/* Defer setting of BB_MAY_NOTRETURN to avoid it\n+\t\t   influencing the processing of the call itself.  */\n+\t\tset_bb_may_notreturn = true;\n \t    }\n \n \t  FOR_EACH_SSA_TREE_OPERAND (op, stmt, iter, SSA_OP_DEF)\n@@ -4030,11 +4039,16 @@ compute_avail (function *fun)\n \t\t/* If the value of the call is not invalidated in\n \t\t   this block until it is computed, add the expression\n \t\t   to EXP_GEN.  */\n-\t\tif (!gimple_vuse (stmt)\n-\t\t    || gimple_code\n-\t\t         (SSA_NAME_DEF_STMT (gimple_vuse (stmt))) == GIMPLE_PHI\n-\t\t    || gimple_bb (SSA_NAME_DEF_STMT\n-\t\t\t\t    (gimple_vuse (stmt))) != block)\n+\t\tif ((!gimple_vuse (stmt)\n+\t\t     || gimple_code\n+\t\t\t  (SSA_NAME_DEF_STMT (gimple_vuse (stmt))) == GIMPLE_PHI\n+\t\t     || gimple_bb (SSA_NAME_DEF_STMT\n+\t\t\t\t   (gimple_vuse (stmt))) != block)\n+\t\t    /* If the REFERENCE traps and there was a preceding\n+\t\t       point in the block that might not return avoid\n+\t\t       adding the reference to EXP_GEN.  */\n+\t\t    && (!BB_MAY_NOTRETURN (block)\n+\t\t\t|| !vn_reference_may_trap (ref)))\n \t\t  {\n \t\t    result = get_or_alloc_expr_for_reference\n \t\t\t       (ref, gimple_location (stmt));\n@@ -4220,6 +4234,11 @@ compute_avail (function *fun)\n \t      break;\n \t    }\n \t}\n+      if (set_bb_may_notreturn)\n+\t{\n+\t  BB_MAY_NOTRETURN (block) = 1;\n+\t  set_bb_may_notreturn = false;\n+\t}\n \n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{"}, {"sha": "2357bbdbf9022c4ee540f97e323ad81073a3ec3e", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13a43a90aea368a25da50762eba4873bafb4e448/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13a43a90aea368a25da50762eba4873bafb4e448/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=13a43a90aea368a25da50762eba4873bafb4e448", "patch": "@@ -5851,6 +5851,7 @@ vn_reference_may_trap (vn_reference_t ref)\n     case MODIFY_EXPR:\n     case CALL_EXPR:\n       /* We do not handle calls.  */\n+      return true;\n     case ADDR_EXPR:\n       /* And toplevel address computations never trap.  */\n       return false;"}]}