{"sha": "daf8c6f03b7b7ae33e2e8e301d367eb8cce80e5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFmOGM2ZjAzYjdiN2FlMzNlMmU4ZTMwMWQzNjdlYjhjY2U4MGU1Yw==", "commit": {"author": {"name": "Daniel Franke", "email": "franke.daniel@gmail.com", "date": "2010-05-19T16:35:34Z"}, "committer": {"name": "Daniel Franke", "email": "dfranke@gcc.gnu.org", "date": "2010-05-19T16:35:34Z"}, "message": "re PR fortran/44055 (Warn (-Wconversion*) when converting single to double precision)\n\ngcc/fortran/:\n2010-05-19  Daniel Franke  <franke.daniel@gmail.com>\n\n\tPR fortran/44055\n\t* lang.opt (Wconversion-extra): New option.\n\t* gfortran.h (gfc_option_t): Add warn_conversion_extra.\n\t* options.c (gfc_init_options): Disable -Wconversion-extra by default.\n\t(set_Wall): Enable -Wconversion.\n\t(gfc_handle_option): Set warn_conversion_extra.\n\t* intrinsic.c (gfc_convert_type_warn): Ignore kind conditions\n\tintroduced for -Wconversion if -Wconversion-extra is present.\n\t* invoke.texi: Add -Wconversion to -Wall; document new behaviour of\n\t-Wconversion; document -Wconversion-extra.\n\ngcc/testsuite/:\n2010-05-19  Daniel Franke  <franke.daniel@gmail.com>\n\n\tPR fortran/44055\n\t* gfortran.dg/c_sizeof_2.f90: Add -Wno-conversion to dg-options;\n\tFixed scope of C_SIZEOF.\n\t* gfortran.dg/warn_conversion_2.f90: New.\n\nFrom-SVN: r159586", "tree": {"sha": "64411c68c4c176fc8f0be9929910e6ff86e28d23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64411c68c4c176fc8f0be9929910e6ff86e28d23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/daf8c6f03b7b7ae33e2e8e301d367eb8cce80e5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daf8c6f03b7b7ae33e2e8e301d367eb8cce80e5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/daf8c6f03b7b7ae33e2e8e301d367eb8cce80e5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daf8c6f03b7b7ae33e2e8e301d367eb8cce80e5c/comments", "author": {"login": "dfranke76", "id": 15729164, "node_id": "MDQ6VXNlcjE1NzI5MTY0", "avatar_url": "https://avatars.githubusercontent.com/u/15729164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfranke76", "html_url": "https://github.com/dfranke76", "followers_url": "https://api.github.com/users/dfranke76/followers", "following_url": "https://api.github.com/users/dfranke76/following{/other_user}", "gists_url": "https://api.github.com/users/dfranke76/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfranke76/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfranke76/subscriptions", "organizations_url": "https://api.github.com/users/dfranke76/orgs", "repos_url": "https://api.github.com/users/dfranke76/repos", "events_url": "https://api.github.com/users/dfranke76/events{/privacy}", "received_events_url": "https://api.github.com/users/dfranke76/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f311c3b4a64ad8752904a0261a306bf191e5fcdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f311c3b4a64ad8752904a0261a306bf191e5fcdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f311c3b4a64ad8752904a0261a306bf191e5fcdc"}], "stats": {"total": 104, "additions": 86, "deletions": 18}, "files": [{"sha": "0d8fa4373481542d2ca5fa478d90541d5da357d7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daf8c6f03b7b7ae33e2e8e301d367eb8cce80e5c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daf8c6f03b7b7ae33e2e8e301d367eb8cce80e5c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=daf8c6f03b7b7ae33e2e8e301d367eb8cce80e5c", "patch": "@@ -1,3 +1,16 @@\n+2010-05-19  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/44055\n+\t* lang.opt (Wconversion-extra): New option.\n+\t* gfortran.h (gfc_option_t): Add warn_conversion_extra.\n+\t* options.c (gfc_init_options): Disable -Wconversion-extra by default.\n+\t(set_Wall): Enable -Wconversion.\n+\t(gfc_handle_option): Set warn_conversion_extra.\n+\t* intrinsic.c (gfc_convert_type_warn): Ignore kind conditions\n+\tintroduced for -Wconversion if -Wconversion-extra is present.\n+\t* invoke.texi: Add -Wconversion to -Wall; document new behaviour of\n+\t-Wconversion; document -Wconversion-extra.\n+\n 2010-05-19  Daniel Franke  <franke.daniel@gmail.com>\n \n \tPR fortran/42360"}, {"sha": "15f2728f2285d9faf8e1c8bed55d0e0f262454ec", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daf8c6f03b7b7ae33e2e8e301d367eb8cce80e5c/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daf8c6f03b7b7ae33e2e8e301d367eb8cce80e5c/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=daf8c6f03b7b7ae33e2e8e301d367eb8cce80e5c", "patch": "@@ -2105,6 +2105,7 @@ typedef struct\n   int warn_aliasing;\n   int warn_ampersand;\n   int warn_conversion;\n+  int warn_conversion_extra;\n   int warn_implicit_interface;\n   int warn_implicit_procedure;\n   int warn_line_truncation;"}, {"sha": "a92b5b54519e0a3787246bed2df530565e8249fe", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 35, "deletions": 12, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daf8c6f03b7b7ae33e2e8e301d367eb8cce80e5c/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daf8c6f03b7b7ae33e2e8e301d367eb8cce80e5c/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=daf8c6f03b7b7ae33e2e8e301d367eb8cce80e5c", "patch": "@@ -4015,18 +4015,38 @@ gfc_convert_type_warn (gfc_expr *expr, gfc_typespec *ts, int eflag, int wflag)\n \n   /* At this point, a conversion is necessary. A warning may be needed.  */\n   if ((gfc_option.warn_std & sym->standard) != 0)\n-    gfc_warning_now (\"Extension: Conversion from %s to %s at %L\",\n-\t\t     gfc_typename (&from_ts), gfc_typename (ts), &expr->where);\n-  else if (wflag && gfc_option.warn_conversion)\n     {\n+      gfc_warning_now (\"Extension: Conversion from %s to %s at %L\",\n+\t\t       gfc_typename (&from_ts), gfc_typename (ts),\n+\t\t       &expr->where);\n+    }\n+  else if (wflag)\n+    {\n+      /* Two modes of warning:\n+\t  - gfc_option.warn_conversion tries to be more intelligent\n+\t    about the warnings raised and omits those where smaller\n+\t    kinds are promoted to larger ones without change in the\n+\t    value\n+\t  - gfc_option.warn_conversion_extra does not take the kinds\n+\t    into account and also warns for coversions like\n+\t    REAL(4) -> REAL(8)\n+\n+\t NOTE: Possible enhancement for warn_conversion\n+\t If converting from a smaller to a larger kind, check if the\n+\t value is constant and if yes, whether the value still fits\n+\t in the smaller kind. If yes, omit the warning.\n+      */\n+\n       /* If the types are the same (but not LOGICAL), and if from-kind\n \t is larger than to-kind, this may indicate a loss of precision.\n \t The same holds for conversions from REAL to COMPLEX.  */\n       if (((from_ts.type == ts->type && from_ts.type != BT_LOGICAL)\n-\t     && from_ts.kind > ts->kind)\n+           && ((gfc_option.warn_conversion && from_ts.kind > ts->kind)\n+\t       || gfc_option.warn_conversion_extra))\n \t  || ((from_ts.type == BT_REAL && ts->type == BT_COMPLEX)\n-\t      && from_ts.kind > ts->kind))\n-\tgfc_warning_now (\"Possible loss of precision in conversion \"\n+\t      && ((gfc_option.warn_conversion && from_ts.kind > ts->kind)\n+\t\t  || gfc_option.warn_conversion_extra)))\n+\tgfc_warning_now (\"Possible change of value in conversion \"\n \t\t\t \"from %s to %s at %L\", gfc_typename (&from_ts),\n \t\t\t gfc_typename (ts), &expr->where);\n \n@@ -4037,18 +4057,21 @@ gfc_convert_type_warn (gfc_expr *expr, gfc_typespec *ts, int eflag, int wflag)\n \t an overflow error with range checking. */\n       else if (from_ts.type == BT_INTEGER\n \t       && (ts->type == BT_REAL || ts->type == BT_COMPLEX)\n-\t       && from_ts.kind > ts->kind)\n-\tgfc_warning_now (\"Possible loss of digits in conversion \"\n+\t       && ((gfc_option.warn_conversion && from_ts.kind > ts->kind)\n+\t\t   || gfc_option.warn_conversion_extra))\n+\tgfc_warning_now (\"Possible change of value in conversion \"\n \t\t\t \"from %s to %s at %L\", gfc_typename (&from_ts),\n \t\t\t gfc_typename (ts), &expr->where);\n \n       /* If REAL/COMPLEX is converted to INTEGER, or COMPLEX is converted\n         to REAL we almost certainly have a loss of digits, regardless of\n         the respective kinds.  */\n-      else if (((from_ts.type == BT_REAL || from_ts.type == BT_COMPLEX)\n-\t\t && ts->type == BT_INTEGER)\n-\t       || (from_ts.type == BT_COMPLEX && ts->type == BT_REAL))\n-\tgfc_warning_now (\"Likely loss of digits in conversion from\"\n+      else if ((((from_ts.type == BT_REAL || from_ts.type == BT_COMPLEX)\n+\t\t  && ts->type == BT_INTEGER)\n+\t\t|| (from_ts.type == BT_COMPLEX && ts->type == BT_REAL))\n+\t       && (gfc_option.warn_conversion\n+\t           || gfc_option.warn_conversion_extra))\n+\tgfc_warning_now (\"Possible change of value in conversion from \"\n \t\t\t\"%s to %s at %L\", gfc_typename (&from_ts),\n \t\t\tgfc_typename (ts), &expr->where);\n     }"}, {"sha": "1b14cef8db2fcd9bcf4f868102a0fa0f03ee4f28", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daf8c6f03b7b7ae33e2e8e301d367eb8cce80e5c/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daf8c6f03b7b7ae33e2e8e301d367eb8cce80e5c/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=daf8c6f03b7b7ae33e2e8e301d367eb8cce80e5c", "patch": "@@ -688,8 +688,8 @@ warnings.\n @cindex warnings, all\n Enables commonly used warning options pertaining to usage that\n we recommend avoiding and that we believe are easy to avoid.\n-This currently includes @option{-Waliasing},\n-@option{-Wampersand}, @option{-Wsurprising}, @option{-Wintrinsics-std},\n+This currently includes @option{-Waliasing}, @option{-Wampersand}, \n+@option{-Wconversion}, @option{-Wsurprising}, @option{-Wintrinsics-std},\n @option{-Wno-tabs}, @option{-Wintrinsic-shadow} and @option{-Wline-truncation}.\n \n @item -Waliasing\n@@ -746,7 +746,14 @@ Warn when a source code line will be truncated.\n @opindex @code{Wconversion}\n @cindex warnings, conversion\n @cindex conversion\n-Warn about implicit conversions between different types.\n+Warn about implicit conversions that are likely to change the value of \n+the expression after conversion. Implied by @option{-Wall}.\n+\n+@item -Wconversion-extra\n+@opindex @code{Wconversion-extra}\n+@cindex warnings, conversion\n+@cindex conversion\n+Warn about implicit conversions between different types and kinds.\n \n @item -Wimplicit-interface\n @opindex @code{Wimplicit-interface}"}, {"sha": "57ac4293351c3a49e31b0fe5d3728c3058d4f64b", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daf8c6f03b7b7ae33e2e8e301d367eb8cce80e5c/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daf8c6f03b7b7ae33e2e8e301d367eb8cce80e5c/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=daf8c6f03b7b7ae33e2e8e301d367eb8cce80e5c", "patch": "@@ -92,6 +92,10 @@ Wconversion\n Fortran Warning\n ; Documented in C\n \n+Wconversion-extra\n+Fortran Warning\n+Warn about most implicit conversions\n+\n Wimplicit-interface\n Fortran Warning\n Warn about calls with implicit interface"}, {"sha": "320dc722b2c04bb487d0332824a33b45e59f88fb", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daf8c6f03b7b7ae33e2e8e301d367eb8cce80e5c/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daf8c6f03b7b7ae33e2e8e301d367eb8cce80e5c/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=daf8c6f03b7b7ae33e2e8e301d367eb8cce80e5c", "patch": "@@ -78,6 +78,7 @@ gfc_init_options (unsigned int argc, const char **argv)\n   gfc_option.warn_character_truncation = 0;\n   gfc_option.warn_array_temp = 0;\n   gfc_option.warn_conversion = 0;\n+  gfc_option.warn_conversion_extra = 0;\n   gfc_option.warn_implicit_interface = 0;\n   gfc_option.warn_line_truncation = 0;\n   gfc_option.warn_surprising = 0;\n@@ -402,6 +403,7 @@ set_Wall (int setting)\n {\n   gfc_option.warn_aliasing = setting;\n   gfc_option.warn_ampersand = setting;\n+  gfc_option.warn_conversion = setting;\n   gfc_option.warn_line_truncation = setting;\n   gfc_option.warn_surprising = setting;\n   gfc_option.warn_tabs = !setting;\n@@ -568,6 +570,10 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       gfc_option.warn_conversion = value;\n       break;\n \n+    case OPT_Wconversion_extra:\n+      gfc_option.warn_conversion_extra = value;\n+      break;\n+\n     case OPT_Wimplicit_interface:\n       gfc_option.warn_implicit_interface = value;\n       break;"}, {"sha": "84c0dd71d1b89dd994f4f14324a9bb83e73b7351", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daf8c6f03b7b7ae33e2e8e301d367eb8cce80e5c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daf8c6f03b7b7ae33e2e8e301d367eb8cce80e5c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=daf8c6f03b7b7ae33e2e8e301d367eb8cce80e5c", "patch": "@@ -1,3 +1,10 @@\n+2010-05-19  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/44055\n+\t* gfortran.dg/c_sizeof_2.f90: Add -Wno-conversion to dg-options;\n+\tFixed scope of C_SIZEOF.\n+\t* gfortran.dg/warn_conversion_2.f90: New.\n+\n 2010-05-19  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* lib/target-supports.exp (check_effective_target_sse2): New proc."}, {"sha": "fb65adce5f0e1a91cef637afdbf140945c4463a8", "filename": "gcc/testsuite/gfortran.dg/c_sizeof_2.f90", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daf8c6f03b7b7ae33e2e8e301d367eb8cce80e5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_sizeof_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daf8c6f03b7b7ae33e2e8e301d367eb8cce80e5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_sizeof_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_sizeof_2.f90?ref=daf8c6f03b7b7ae33e2e8e301d367eb8cce80e5c", "patch": "@@ -1,8 +1,9 @@\n ! { dg-do compile }\n-! { dg-options \"-std=f2003 -Wall\" }\n+! { dg-options \"-std=f2003 -Wall -Wno-conversion\" }\n ! Support F2008's c_sizeof()\n !\n-integer(4) :: i\n-i = c_sizeof(i) ! { dg-warning \"Fortran 2008\" }\n+USE ISO_C_BINDING\n+integer(C_SIZE_T) :: i\n+i = c_sizeof(i)           ! { dg-warning \"Fortran 2008\" }\n end\n "}, {"sha": "cb3b760a5e2b5099c1bf6d4249ef78dd075122d8", "filename": "gcc/testsuite/gfortran.dg/warn_conversion_2.f90", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daf8c6f03b7b7ae33e2e8e301d367eb8cce80e5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_conversion_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daf8c6f03b7b7ae33e2e8e301d367eb8cce80e5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_conversion_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_conversion_2.f90?ref=daf8c6f03b7b7ae33e2e8e301d367eb8cce80e5c", "patch": "@@ -0,0 +1,6 @@\n+! { dg-do \"compile\" }\n+! { dg-options \"-Wconversion-extra\" }\n+\n+  real(8) :: sqrt2\n+  sqrt2 = sqrt(2.0)      ! { dg-warning \"conversion\" }\n+end"}]}