{"sha": "70238876c799943407ff6717b7fd9d98b8cb9080", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzAyMzg4NzZjNzk5OTQzNDA3ZmY2NzE3YjdmZDlkOThiOGNiOTA4MA==", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2019-10-12T20:37:37Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2019-10-12T20:37:37Z"}, "message": "pa.c (pa_output_call): Load descriptor address to register %r22.\n\n\t* config/pa/pa.c (pa_output_call): Load descriptor address to register\n\t%r22.  Load function address before global pointer.\n\t(pa_attr_length_indirect_call): Adjust length of inline versions of\n\t$$dyncall.\n\t(pa_output_indirect_call): Remove fast inline version of $$dyncall\n\tbefore normal cases.  Update inline $$dyncall sequences to preserve\n\tfunction descriptor address in register %r22.\n\t(TRAMPOLINE_CODE_SIZE): Adjust.\n\t(pa_asm_trampoline_template): Revise 32-bit trampoline.  Don't assume\n\tregister %r22 contains trampoline address.\n\t(pa_trampoline_init): Adjust offsets.\n\t(pa_trampoline_adjust_address): Likewise.\n\t* config/pa/pa.h (TRAMPOLINE_SIZE): Adjust 32-bit size.\n\nFrom-SVN: r276928", "tree": {"sha": "cceb9c80d335056d23eaeeb7f0a846c16af58394", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cceb9c80d335056d23eaeeb7f0a846c16af58394"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70238876c799943407ff6717b7fd9d98b8cb9080", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70238876c799943407ff6717b7fd9d98b8cb9080", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70238876c799943407ff6717b7fd9d98b8cb9080", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70238876c799943407ff6717b7fd9d98b8cb9080/comments", "author": null, "committer": null, "parents": [{"sha": "c89d7d19a2aa333684e5bf744ae3b813c6054d63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c89d7d19a2aa333684e5bf744ae3b813c6054d63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c89d7d19a2aa333684e5bf744ae3b813c6054d63"}], "stats": {"total": 181, "additions": 103, "deletions": 78}, "files": [{"sha": "3cd90c7f5666bdde1aaea6d5047db95438160853", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70238876c799943407ff6717b7fd9d98b8cb9080/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70238876c799943407ff6717b7fd9d98b8cb9080/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=70238876c799943407ff6717b7fd9d98b8cb9080", "patch": "@@ -1,3 +1,19 @@\n+2019-10-12  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* config/pa/pa.c (pa_output_call): Load descriptor address to register\n+\t%r22.  Load function address before global pointer.\n+\t(pa_attr_length_indirect_call): Adjust length of inline versions of\n+\t$$dyncall.\n+\t(pa_output_indirect_call): Remove fast inline version of $$dyncall\n+\tbefore normal cases.  Update inline $$dyncall sequences to preserve\n+\tfunction descriptor address in register %r22.\n+\t(TRAMPOLINE_CODE_SIZE): Adjust.\n+\t(pa_asm_trampoline_template): Revise 32-bit trampoline.  Don't assume\n+\tregister %r22 contains trampoline address.\n+\t(pa_trampoline_init): Adjust offsets.\n+\t(pa_trampoline_adjust_address): Likewise.\n+\t* config/pa/pa.h (TRAMPOLINE_SIZE): Adjust 32-bit size.\n+\n 2019-10-12  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR target/67183"}, {"sha": "d8aff717ed8c374df949b260ac77ce7a86a42b18", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 86, "deletions": 77, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70238876c799943407ff6717b7fd9d98b8cb9080/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70238876c799943407ff6717b7fd9d98b8cb9080/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=70238876c799943407ff6717b7fd9d98b8cb9080", "patch": "@@ -8027,20 +8027,22 @@ pa_output_call (rtx_insn *insn, rtx call_dest, int sibcall)\n \t\t    {\n \t\t      output_asm_insn (\"addil LT'%0,%%r19\", xoperands);\n \t\t      output_asm_insn (\"ldw RT'%0(%%r1),%%r1\", xoperands);\n-\t\t      output_asm_insn (\"ldw 0(%%r1),%%r1\", xoperands);\n+\t\t      output_asm_insn (\"ldw 0(%%r1),%%r22\", xoperands);\n \t\t    }\n \t\t  else\n \t\t    {\n \t\t      output_asm_insn (\"addil LR'%0-$global$,%%r27\",\n \t\t\t\t       xoperands);\n-\t\t      output_asm_insn (\"ldw RR'%0-$global$(%%r1),%%r1\",\n+\t\t      output_asm_insn (\"ldw RR'%0-$global$(%%r1),%%r22\",\n \t\t\t\t       xoperands);\n \t\t    }\n \n-\t\t  output_asm_insn (\"bb,>=,n %%r1,30,.+16\", xoperands);\n-\t\t  output_asm_insn (\"depi 0,31,2,%%r1\", xoperands);\n-\t\t  output_asm_insn (\"ldw 4(%%sr0,%%r1),%%r19\", xoperands);\n-\t\t  output_asm_insn (\"ldw 0(%%sr0,%%r1),%%r1\", xoperands);\n+\t\t  output_asm_insn (\"bb,>=,n %%r22,30,.+16\", xoperands);\n+\t\t  output_asm_insn (\"depi 0,31,2,%%r22\", xoperands);\n+\t\t  /* Should this be an ordered load to ensure the target\n+\t             address is loaded before the global pointer?  */\n+\t\t  output_asm_insn (\"ldw 0(%%r22),%%r1\", xoperands);\n+\t\t  output_asm_insn (\"ldw 4(%%r22),%%r19\", xoperands);\n \n \t\t  if (!sibcall && !TARGET_PA_20)\n \t\t    {\n@@ -8133,10 +8135,6 @@ pa_attr_length_indirect_call (rtx_insn *insn)\n   if (TARGET_PORTABLE_RUNTIME)\n     return 16;\n \n-  /* Inline version of $$dyncall.  */\n-  if ((TARGET_NO_SPACE_REGS || TARGET_PA_20) && !optimize_size)\n-    return 20;\n-\n   if (!TARGET_LONG_CALLS\n       && ((TARGET_PA_20 && !TARGET_SOM && distance < 7600000)\n \t  || distance < MAX_PCREL17F_OFFSET))\n@@ -8146,12 +8144,15 @@ pa_attr_length_indirect_call (rtx_insn *insn)\n   if (!flag_pic)\n     return 12;\n \n-  /* Inline version of $$dyncall.  */\n-  if (TARGET_NO_SPACE_REGS || TARGET_PA_20)\n-    return 20;\n-\n+  /* Inline versions of $$dyncall.  */\n   if (!optimize_size)\n-    return 36;\n+    {\n+      if (TARGET_NO_SPACE_REGS)\n+\treturn 28;\n+\n+      if (TARGET_PA_20)\n+\treturn 32;\n+    }\n \n   /* Long PIC pc-relative call.  */\n   return 20;\n@@ -8189,22 +8190,6 @@ pa_output_indirect_call (rtx_insn *insn, rtx call_dest)\n       return \"blr %%r0,%%r2\\n\\tbv,n %%r0(%%r31)\";\n     }\n \n-  /* Maybe emit a fast inline version of $$dyncall.  */\n-  if ((TARGET_NO_SPACE_REGS || TARGET_PA_20) && !optimize_size)\n-    {\n-      output_asm_insn (\"bb,>=,n %%r22,30,.+12\\n\\t\"\n-\t\t       \"ldw 2(%%r22),%%r19\\n\\t\"\n-\t\t       \"ldw -2(%%r22),%%r22\", xoperands);\n-      pa_output_arg_descriptor (insn);\n-      if (TARGET_NO_SPACE_REGS)\n-\t{\n-\t  if (TARGET_PA_20)\n-\t    return \"bve,l,n (%%r22),%%r2\\n\\tnop\";\n-\t  return \"ble 0(%%sr4,%%r22)\\n\\tcopy %%r31,%%r2\";\n-\t}\n-      return \"bve,l (%%r22),%%r2\\n\\tstw %%r2,-24(%%sp)\";\n-    }\n-\n   /* Now the normal case -- we can reach $$dyncall directly or\n      we're sure that we can get there via a long-branch stub. \n \n@@ -8233,35 +8218,40 @@ pa_output_indirect_call (rtx_insn *insn, rtx call_dest)\n       return \"ble R'$$dyncall(%%sr4,%%r2)\\n\\tcopy %%r31,%%r2\";\n     }\n \n-  /* Maybe emit a fast inline version of $$dyncall.  The long PIC\n-     pc-relative call sequence is five instructions.  The inline PA 2.0\n-     version of $$dyncall is also five instructions.  The PA 1.X versions\n-     are longer but still an overall win.  */\n-  if (TARGET_NO_SPACE_REGS || TARGET_PA_20 || !optimize_size)\n+  /* The long PIC pc-relative call sequence is five instructions.  So,\n+     let's use an inline version of $$dyncall when the calling sequence\n+     has a roughly similar number of instructions and we are not optimizing\n+     for size.  We need two instructions to load the return pointer plus\n+     the $$dyncall implementation.  */\n+  if (!optimize_size)\n     {\n-      output_asm_insn (\"bb,>=,n %%r22,30,.+12\\n\\t\"\n-\t\t       \"ldw 2(%%r22),%%r19\\n\\t\"\n-\t\t       \"ldw -2(%%r22),%%r22\", xoperands);\n       if (TARGET_NO_SPACE_REGS)\n \t{\n \t  pa_output_arg_descriptor (insn);\n-\t  if (TARGET_PA_20)\n-\t    return \"bve,l,n (%%r22),%%r2\\n\\tnop\";\n-\t  return \"ble 0(%%sr4,%%r22)\\n\\tcopy %%r31,%%r2\";\n+\t  output_asm_insn (\"bl .+8,%rp\\b\\t\"\n+\t\t\t   \"ldo 20(%r2),%r2\\n\\t\"\n+\t\t\t   \"extru,<> %r22,30,1,%r0\\n\\t\"\n+\t\t\t   \"bv,n %%r0(%r22)\\n\\t\"\n+\t\t\t   \"ldw -2(%%r22),%%r21\\n\\t\"\n+\t\t\t   \"bv %%r0(%r21)\\n\\t\"\n+\t\t\t   \"ldw 2(%%r22),%%r19\", xoperands);\n+\t  return \"\";\n \t}\n       if (TARGET_PA_20)\n \t{\n \t  pa_output_arg_descriptor (insn);\n-\t  return \"bve,l (%%r22),%%r2\\n\\tstw %%r2,-24(%%sp)\";\n+\t  output_asm_insn (\"bl .+8,%%r2\\b\\t\"\n+\t\t\t   \"ldo 24(%%r2),%%r2\\n\\t\"\n+\t\t\t   \"stw %%r2,-24(%%sp)\\n\\t\"\n+\t\t\t   \"extru,<> %r22,30,1,%r0\\n\\t\"\n+\t\t\t   \"bve,n (%%r22)\\n\\t\"\n+\t\t\t   \"ldw -2(%%r22),%%r21\\n\\t\"\n+\t\t\t   \"bve (%%r21)\\n\\t\"\n+\t\t\t   \"ldw 2(%%r22),%%r19\", xoperands);\n+\t  return \"\";\n \t}\n-      output_asm_insn (\"bl .+8,%%r2\\n\\t\"\n-\t\t       \"ldo 16(%%r2),%%r2\\n\\t\"\n-\t\t       \"ldsid (%%r22),%%r1\\n\\t\"\n-\t\t       \"mtsp %%r1,%%sr0\", xoperands);\n-      pa_output_arg_descriptor (insn);\n-      return \"be 0(%%sr0,%%r22)\\n\\tstw %%r2,-24(%%sp)\";\n     }\n- \n+\n   /* We need a long PIC call to $$dyncall.  */\n   xoperands[0] = gen_rtx_SYMBOL_REF (Pmode, \"$$dyncall\");\n   xoperands[1] = gen_rtx_REG (Pmode, 2);\n@@ -10025,7 +10015,7 @@ pa_modes_tieable_p (machine_mode mode1, machine_mode mode2)\n \f\n /* Length in units of the trampoline instruction code.  */\n \n-#define TRAMPOLINE_CODE_SIZE (TARGET_64BIT ? 24 : (TARGET_PA_20 ? 32 : 40))\n+#define TRAMPOLINE_CODE_SIZE (TARGET_64BIT ? 24 : (TARGET_PA_20 ? 36 : 48))\n \n \n /* Output assembler code for a block containing the constant parts\n@@ -10046,27 +10036,46 @@ pa_asm_trampoline_template (FILE *f)\n {\n   if (!TARGET_64BIT)\n     {\n-      fputs (\"\\tldw\t36(%r22),%r21\\n\", f);\n-      fputs (\"\\tbb,>=,n\t%r21,30,.+16\\n\", f);\n-      if (ASSEMBLER_DIALECT == 0)\n-\tfputs (\"\\tdepi\t0,31,2,%r21\\n\", f);\n-      else\n-\tfputs (\"\\tdepwi\t0,31,2,%r21\\n\", f);\n-      fputs (\"\\tldw\t4(%r21),%r19\\n\", f);\n-      fputs (\"\\tldw\t0(%r21),%r21\\n\", f);\n       if (TARGET_PA_20)\n \t{\n-\t  fputs (\"\\tbve\t(%r21)\\n\", f);\n-\t  fputs (\"\\tldw\t40(%r22),%r29\\n\", f);\n+\t  fputs (\"\\tmfia\t%r20\\n\", f);\n+\t  fputs (\"\\tldw\t\t48(%r20),%r22\\n\", f);\n+\t  fputs (\"\\tcopy\t%r22,%r21\\n\", f);\n+\t  fputs (\"\\tbb,>=,n\t%r22,30,.+16\\n\", f);\n+\t  fputs (\"\\tdepwi\t0,31,2,%r22\\n\", f);\n+\t  fputs (\"\\tldw\t\t0(%r22),%r21\\n\", f);\n+\t  fputs (\"\\tldw\t\t4(%r22),%r19\\n\", f);\n+\t  fputs (\"\\tbve\t\t(%r21)\\n\", f);\n+\t  fputs (\"\\tldw\t\t52(%r1),%r29\\n\", f);\n+\t  fputs (\"\\t.word\t0\\n\", f);\n \t  fputs (\"\\t.word\t0\\n\", f);\n \t  fputs (\"\\t.word\t0\\n\", f);\n \t}\n       else\n \t{\n+\t  if (ASSEMBLER_DIALECT == 0)\n+\t    {\n+\t      fputs (\"\\tbl\t.+8,%r20\\n\", f);\n+\t      fputs (\"\\tdepi\t0,31,2,%r20\\n\", f);\n+\t    }\n+\t  else\n+\t    {\n+\t      fputs (\"\\tb,l\t.+8,%r20\\n\", f);\n+\t      fputs (\"\\tdepwi\t0,31,2,%r20\\n\", f);\n+\t    }\n+\t  fputs (\"\\tldw\t\t40(%r20),%r22\\n\", f);\n+\t  fputs (\"\\tcopy\t%r22,%r21\\n\", f);\n+\t  fputs (\"\\tbb,>=,n\t%r22,30,.+16\\n\", f);\n+\t  if (ASSEMBLER_DIALECT == 0)\n+\t    fputs (\"\\tdepi\t0,31,2,%r22\\n\", f);\n+\t  else\n+\t    fputs (\"\\tdepwi\t0,31,2,%r22\\n\", f);\n+\t  fputs (\"\\tldw\t\t0(%r22),%r21\\n\", f);\n+\t  fputs (\"\\tldw\t\t4(%r22),%r19\\n\", f);\n \t  fputs (\"\\tldsid\t(%r21),%r1\\n\", f);\n \t  fputs (\"\\tmtsp\t%r1,%sr0\\n\", f);\n-\t  fputs (\"\\tbe\t0(%sr0,%r21)\\n\", f);\n-\t  fputs (\"\\tldw\t40(%r22),%r29\\n\", f);\n+\t  fputs (\"\\tbe\t\t0(%sr0,%r21)\\n\", f);\n+\t  fputs (\"\\tldw\t\t44(%r20),%r29\\n\", f);\n \t}\n       fputs (\"\\t.word\t0\\n\", f);\n       fputs (\"\\t.word\t0\\n\", f);\n@@ -10080,11 +10089,11 @@ pa_asm_trampoline_template (FILE *f)\n       fputs (\"\\t.dword 0\\n\", f);\n       fputs (\"\\t.dword 0\\n\", f);\n       fputs (\"\\tmfia\t%r31\\n\", f);\n-      fputs (\"\\tldd\t24(%r31),%r1\\n\", f);\n-      fputs (\"\\tldd\t24(%r1),%r27\\n\", f);\n-      fputs (\"\\tldd\t16(%r1),%r1\\n\", f);\n-      fputs (\"\\tbve\t(%r1)\\n\", f);\n+      fputs (\"\\tldd\t24(%r31),%r27\\n\", f);\n       fputs (\"\\tldd\t32(%r31),%r31\\n\", f);\n+      fputs (\"\\tldd\t16(%r27),%r1\\n\", f);\n+      fputs (\"\\tbve\t(%r1)\\n\", f);\n+      fputs (\"\\tldd\t24(%r27),%r27\\n\", f);\n       fputs (\"\\t.dword 0  ; fptr\\n\", f);\n       fputs (\"\\t.dword 0  ; static link\\n\", f);\n     }\n@@ -10094,10 +10103,10 @@ pa_asm_trampoline_template (FILE *f)\n    FNADDR is an RTX for the address of the function's pure code.\n    CXT is an RTX for the static chain value for the function.\n \n-   Move the function address to the trampoline template at offset 36.\n-   Move the static chain value to trampoline template at offset 40.\n-   Move the trampoline address to trampoline template at offset 44.\n-   Move r19 to trampoline template at offset 48.  The latter two\n+   Move the function address to the trampoline template at offset 48.\n+   Move the static chain value to trampoline template at offset 52.\n+   Move the trampoline address to trampoline template at offset 56.\n+   Move r19 to trampoline template at offset 60.  The latter two\n    words create a plabel for the indirect call to the trampoline.\n \n    A similar sequence is used for the 64-bit port but the plabel is\n@@ -10123,15 +10132,15 @@ pa_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n \n   if (!TARGET_64BIT)\n     {\n-      tmp = adjust_address (m_tramp, Pmode, 36);\n+      tmp = adjust_address (m_tramp, Pmode, 48);\n       emit_move_insn (tmp, fnaddr);\n-      tmp = adjust_address (m_tramp, Pmode, 40);\n+      tmp = adjust_address (m_tramp, Pmode, 52);\n       emit_move_insn (tmp, chain_value);\n \n       /* Create a fat pointer for the trampoline.  */\n-      tmp = adjust_address (m_tramp, Pmode, 44);\n+      tmp = adjust_address (m_tramp, Pmode, 56);\n       emit_move_insn (tmp, r_tramp);\n-      tmp = adjust_address (m_tramp, Pmode, 48);\n+      tmp = adjust_address (m_tramp, Pmode, 60);\n       emit_move_insn (tmp, gen_rtx_REG (Pmode, 19));\n \n       /* fdc and fic only use registers for the address to flush,\n@@ -10190,13 +10199,13 @@ pa_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n \n /* Perform any machine-specific adjustment in the address of the trampoline.\n    ADDR contains the address that was passed to pa_trampoline_init.\n-   Adjust the trampoline address to point to the plabel at offset 44.  */\n+   Adjust the trampoline address to point to the plabel at offset 56.  */\n \n static rtx\n pa_trampoline_adjust_address (rtx addr)\n {\n   if (!TARGET_64BIT)\n-    addr = memory_address (Pmode, plus_constant (Pmode, addr, 46));\n+    addr = memory_address (Pmode, plus_constant (Pmode, addr, 58));\n   return addr;\n }\n "}, {"sha": "4d6c425a08524ddcc5e41d84d7c90d6c268239cf", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70238876c799943407ff6717b7fd9d98b8cb9080/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70238876c799943407ff6717b7fd9d98b8cb9080/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=70238876c799943407ff6717b7fd9d98b8cb9080", "patch": "@@ -688,7 +688,7 @@ extern int may_call_alloca;\n \n /* Length in units of the trampoline for entering a nested function.  */\n \n-#define TRAMPOLINE_SIZE (TARGET_64BIT ? 72 : 52)\n+#define TRAMPOLINE_SIZE (TARGET_64BIT ? 72 : 64)\n \n /* Alignment required by the trampoline.  */\n "}]}