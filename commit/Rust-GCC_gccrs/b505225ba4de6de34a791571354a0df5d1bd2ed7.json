{"sha": "b505225ba4de6de34a791571354a0df5d1bd2ed7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUwNTIyNWJhNGRlNmRlMzRhNzkxNTcxMzU0YTBkZjVkMWJkMmVkNw==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2016-07-28T11:01:49Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2016-07-28T11:01:49Z"}, "message": "merge adjust_cost and adjust_cost_2 target hooks\n\ngcc/ChangeLog:\n\n2016-07-28  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* config/alpha/alpha.c (alpha_adjust_cost): Adjust.\n\t* config/arm/arm-protos.h (struct tune_params): Likewise.\n\t* config/arm/arm.c (xscale_sched_adjust_cost): Likewise.\n\t(cortex_a9_sched_adjust_cost): Likewise.\n\t(fa726te_sched_adjust_cost): Likewise.\n\t(arm_adjust_cost): Likewise.\n\t* config/bfin/bfin.c (bfin_adjust_cost): Likewise.\n\t* config/c6x/c6x.c (c6x_adjust_cost): Likewise.\n\t* config/epiphany/epiphany.c (epiphany_adjust_cost): Likewise.\n\t* config/i386/i386.c (ix86_adjust_cost): Likewise.\n\t* config/ia64/ia64.c: Likewise.\n\t* config/m68k/m68k.c: Likewise.\n\t* config/mep/mep.c (mep_adjust_cost): Likewise.\n\t* config/microblaze/microblaze.c (microblaze_adjust_cost):\n\t* Likewise.\n\t* config/mips/mips.c (mips_adjust_cost): Likewise.\n\t* config/mn10300/mn10300.c (mn10300_adjust_sched_cost):\n\t* Likewise.\n\t* config/pa/pa.c (pa_adjust_cost): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_adjust_cost): Likewise.\n\t(rs6000_debug_adjust_cost): Likewise.\n\t* config/sh/sh.c (sh_adjust_cost): Likewise.\n\t* config/sparc/sparc.c (supersparc_adjust_cost): Likewise.\n\t(hypersparc_adjust_cost): Likewise.\n\t(sparc_adjust_cost): Likewise.\n\t* config/spu/spu.c (spu_sched_adjust_cost): Likewise.\n\t* config/tilegx/tilegx.c (tilegx_sched_adjust_cost): Likewise.\n\t* config/tilepro/tilepro.c (tilepro_sched_adjust_cost):\n\t* Likewise.\n\t* config/visium/visium.c (visium_adjust_cost): Likewise.\n\t* doc/tm.texi: Regenerate.\n\t* haifa-sched.c (dep_cost_1): Adjust.\n\t* target.def: Merge adjust_cost and adjust_cost_2.\n\nFrom-SVN: r238814", "tree": {"sha": "c3175e77ad651f051240997ebc08f6f780632249", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3175e77ad651f051240997ebc08f6f780632249"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b505225ba4de6de34a791571354a0df5d1bd2ed7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b505225ba4de6de34a791571354a0df5d1bd2ed7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b505225ba4de6de34a791571354a0df5d1bd2ed7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b505225ba4de6de34a791571354a0df5d1bd2ed7/comments", "author": null, "committer": null, "parents": [{"sha": "30a7199a198072cc5026ba878c2c9d15842e07dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30a7199a198072cc5026ba878c2c9d15842e07dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30a7199a198072cc5026ba878c2c9d15842e07dc"}], "stats": {"total": 293, "additions": 158, "deletions": 135}, "files": [{"sha": "56d4fb719206890c96870bcda0f0fad9282734a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b505225ba4de6de34a791571354a0df5d1bd2ed7", "patch": "@@ -1,3 +1,39 @@\n+2016-07-28  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* config/alpha/alpha.c (alpha_adjust_cost): Adjust.\n+\t* config/arm/arm-protos.h (struct tune_params): Likewise.\n+\t* config/arm/arm.c (xscale_sched_adjust_cost): Likewise.\n+\t(cortex_a9_sched_adjust_cost): Likewise.\n+\t(fa726te_sched_adjust_cost): Likewise.\n+\t(arm_adjust_cost): Likewise.\n+\t* config/bfin/bfin.c (bfin_adjust_cost): Likewise.\n+\t* config/c6x/c6x.c (c6x_adjust_cost): Likewise.\n+\t* config/epiphany/epiphany.c (epiphany_adjust_cost): Likewise.\n+\t* config/i386/i386.c (ix86_adjust_cost): Likewise.\n+\t* config/ia64/ia64.c: Likewise.\n+\t* config/m68k/m68k.c: Likewise.\n+\t* config/mep/mep.c (mep_adjust_cost): Likewise.\n+\t* config/microblaze/microblaze.c (microblaze_adjust_cost):\n+\t* Likewise.\n+\t* config/mips/mips.c (mips_adjust_cost): Likewise.\n+\t* config/mn10300/mn10300.c (mn10300_adjust_sched_cost):\n+\t* Likewise.\n+\t* config/pa/pa.c (pa_adjust_cost): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_adjust_cost): Likewise.\n+\t(rs6000_debug_adjust_cost): Likewise.\n+\t* config/sh/sh.c (sh_adjust_cost): Likewise.\n+\t* config/sparc/sparc.c (supersparc_adjust_cost): Likewise.\n+\t(hypersparc_adjust_cost): Likewise.\n+\t(sparc_adjust_cost): Likewise.\n+\t* config/spu/spu.c (spu_sched_adjust_cost): Likewise.\n+\t* config/tilegx/tilegx.c (tilegx_sched_adjust_cost): Likewise.\n+\t* config/tilepro/tilepro.c (tilepro_sched_adjust_cost):\n+\t* Likewise.\n+\t* config/visium/visium.c (visium_adjust_cost): Likewise.\n+\t* doc/tm.texi: Regenerate.\n+\t* haifa-sched.c (dep_cost_1): Adjust.\n+\t* target.def: Merge adjust_cost and adjust_cost_2.\n+\n 2016-07-28  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* haifa-sched.c (add_to_speculative_block): Make twins a vector."}, {"sha": "702cd277ede8860c53d3ce4c03a8c6d81f7b5c5b", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=b505225ba4de6de34a791571354a0df5d1bd2ed7", "patch": "@@ -4758,14 +4758,15 @@ alpha_split_atomic_exchange_12 (rtx operands[])\n    a dependency LINK or INSN on DEP_INSN.  COST is the current cost.  */\n \n static int\n-alpha_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost)\n+alpha_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep_insn, int cost,\n+\t\t   unsigned int)\n {\n   enum attr_type dep_insn_type;\n \n   /* If the dependence is an anti-dependence, there is no cost.  For an\n      output dependence, there is sometimes a cost, but it doesn't seem\n      worth handling those few cases.  */\n-  if (REG_NOTE_KIND (link) != 0)\n+  if (dep_type != 0)\n     return cost;\n \n   /* If we can't recognize the insns, we can't really do anything.  */"}, {"sha": "3975612f94be38853dd2db4fff518ce7c2503e20", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=b505225ba4de6de34a791571354a0df5d1bd2ed7", "patch": "@@ -260,7 +260,7 @@ struct tune_params\n {\n   bool (*rtx_costs) (rtx, RTX_CODE, RTX_CODE, int *, bool);\n   const struct cpu_cost_table *insn_extra_cost;\n-  bool (*sched_adjust_cost) (rtx_insn *, rtx, rtx_insn *, int *);\n+  bool (*sched_adjust_cost) (rtx_insn *, int, rtx_insn *, int *);\n   int (*branch_cost) (bool, bool);\n   /* Vectorizer costs.  */\n   const struct cpu_vec_costs* vec_costs;"}, {"sha": "a6afdcc168c534aeb54d60ba04aefa0b43dee8d0", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=b505225ba4de6de34a791571354a0df5d1bd2ed7", "patch": "@@ -138,7 +138,7 @@ static void arm_output_function_epilogue (FILE *, HOST_WIDE_INT);\n static void arm_output_function_prologue (FILE *, HOST_WIDE_INT);\n static int arm_comp_type_attributes (const_tree, const_tree);\n static void arm_set_default_type_attributes (tree);\n-static int arm_adjust_cost (rtx_insn *, rtx, rtx_insn *, int);\n+static int arm_adjust_cost (rtx_insn *, int, rtx_insn *, int, unsigned int);\n static int arm_sched_reorder (FILE *, int, rtx_insn **, int *, int);\n static int optimal_immediate_sequence (enum rtx_code code,\n \t\t\t\t       unsigned HOST_WIDE_INT val,\n@@ -257,9 +257,9 @@ static void arm_asm_trampoline_template (FILE *);\n static void arm_trampoline_init (rtx, tree, rtx);\n static rtx arm_trampoline_adjust_address (rtx);\n static rtx arm_pic_static_addr (rtx orig, rtx reg);\n-static bool cortex_a9_sched_adjust_cost (rtx_insn *, rtx, rtx_insn *, int *);\n-static bool xscale_sched_adjust_cost (rtx_insn *, rtx, rtx_insn *, int *);\n-static bool fa726te_sched_adjust_cost (rtx_insn *, rtx, rtx_insn *, int *);\n+static bool cortex_a9_sched_adjust_cost (rtx_insn *, int, rtx_insn *, int *);\n+static bool xscale_sched_adjust_cost (rtx_insn *, int, rtx_insn *, int *);\n+static bool fa726te_sched_adjust_cost (rtx_insn *, int, rtx_insn *, int *);\n static bool arm_array_mode_supported_p (machine_mode,\n \t\t\t\t\tunsigned HOST_WIDE_INT);\n static machine_mode arm_preferred_simd_mode (machine_mode);\n@@ -11669,11 +11669,12 @@ arm_address_cost (rtx x, machine_mode mode ATTRIBUTE_UNUSED,\n \n /* Adjust cost hook for XScale.  */\n static bool\n-xscale_sched_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep, int * cost)\n+xscale_sched_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep,\n+\t\t\t  int * cost)\n {\n   /* Some true dependencies can have a higher cost depending\n      on precisely how certain input operands are used.  */\n-  if (REG_NOTE_KIND(link) == 0\n+  if (dep_type == 0\n       && recog_memoized (insn) >= 0\n       && recog_memoized (dep) >= 0)\n     {\n@@ -11730,9 +11731,10 @@ xscale_sched_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep, int * cost)\n \n /* Adjust cost hook for Cortex A9.  */\n static bool\n-cortex_a9_sched_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep, int * cost)\n+cortex_a9_sched_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep,\n+\t\t\t     int * cost)\n {\n-  switch (REG_NOTE_KIND (link))\n+  switch (dep_type)\n     {\n     case REG_DEP_ANTI:\n       *cost = 0;\n@@ -11772,15 +11774,15 @@ cortex_a9_sched_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep, int * cost\n \t\t\t    && (attr_type_dep == TYPE_FMACS\n \t\t\t\t|| attr_type_dep == TYPE_FMACD))\n \t\t\t  {\n-\t\t\t    if (REG_NOTE_KIND (link) == REG_DEP_OUTPUT)\n+\t\t\t    if (dep_type == REG_DEP_OUTPUT)\n \t\t\t      *cost = insn_default_latency (dep) - 3;\n \t\t\t    else\n \t\t\t      *cost = insn_default_latency (dep);\n \t\t\t    return false;\n \t\t\t  }\n \t\t\telse\n \t\t\t  {\n-\t\t\t    if (REG_NOTE_KIND (link) == REG_DEP_OUTPUT)\n+\t\t\t    if (dep_type == REG_DEP_OUTPUT)\n \t\t\t      *cost = insn_default_latency (dep) + 1;\n \t\t\t    else\n \t\t\t      *cost = insn_default_latency (dep);\n@@ -11801,11 +11803,12 @@ cortex_a9_sched_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep, int * cost\n \n /* Adjust cost hook for FA726TE.  */\n static bool\n-fa726te_sched_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep, int * cost)\n+fa726te_sched_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep,\n+\t\t\t   int * cost)\n {\n   /* For FA726TE, true dependency on CPSR (i.e. set cond followed by predicated)\n      have penalty of 3.  */\n-  if (REG_NOTE_KIND (link) == REG_DEP_TRUE\n+  if (dep_type == REG_DEP_TRUE\n       && recog_memoized (insn) >= 0\n       && recog_memoized (dep) >= 0\n       && get_attr_conds (dep) == CONDS_SET)\n@@ -12149,33 +12152,34 @@ arm_sched_reorder (FILE *file, int verbose, rtx_insn **ready, int *n_readyp,\n    adjust_cost function. Only put bits of code into arm_adjust_cost that\n    are common across all cores.  */\n static int\n-arm_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep, int cost)\n+arm_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep, int cost,\n+\t\t unsigned int)\n {\n   rtx i_pat, d_pat;\n \n  /* When generating Thumb-1 code, we want to place flag-setting operations\n     close to a conditional branch which depends on them, so that we can\n     omit the comparison. */\n   if (TARGET_THUMB1\n-      && REG_NOTE_KIND (link) == 0\n+      && dep_type == 0\n       && recog_memoized (insn) == CODE_FOR_cbranchsi4_insn\n       && recog_memoized (dep) >= 0\n       && get_attr_conds (dep) == CONDS_SET)\n     return 0;\n \n   if (current_tune->sched_adjust_cost != NULL)\n     {\n-      if (!current_tune->sched_adjust_cost (insn, link, dep, &cost))\n+      if (!current_tune->sched_adjust_cost (insn, dep_type, dep, &cost))\n \treturn cost;\n     }\n \n   /* XXX Is this strictly true?  */\n-  if (REG_NOTE_KIND (link) == REG_DEP_ANTI\n-      || REG_NOTE_KIND (link) == REG_DEP_OUTPUT)\n+  if (dep_type == REG_DEP_ANTI\n+      || dep_type == REG_DEP_OUTPUT)\n     return 0;\n \n   /* Call insns don't incur a stall, even if they follow a load.  */\n-  if (REG_NOTE_KIND (link) == 0\n+  if (dep_type == 0\n       && CALL_P (insn))\n     return 1;\n "}, {"sha": "086d5482706be2b17b792d92ec322fe4fc7d117f", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=b505225ba4de6de34a791571354a0df5d1bd2ed7", "patch": "@@ -3301,13 +3301,14 @@ bfin_issue_rate (void)\n }\n \n static int\n-bfin_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost)\n+bfin_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep_insn, int cost,\n+\t\t  unsigned int)\n {\n   enum attr_type dep_insn_type;\n   int dep_insn_code_number;\n \n   /* Anti and output dependencies have zero cost.  */\n-  if (REG_NOTE_KIND (link) != 0)\n+  if (dep_type != 0)\n     return 0;\n \n   dep_insn_code_number = recog_memoized (dep_insn);"}, {"sha": "d75948260fca694420850c7f75b083d9298fdf26", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=b505225ba4de6de34a791571354a0df5d1bd2ed7", "patch": "@@ -4471,7 +4471,8 @@ c6x_variable_issue (FILE *dump ATTRIBUTE_UNUSED,\n    anti- and output dependencies.  */\n \n static int\n-c6x_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost)\n+c6x_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep_insn, int cost,\n+\t\t unsigned int)\n {\n   enum attr_type insn_type = TYPE_UNKNOWN, dep_insn_type = TYPE_UNKNOWN;\n   int dep_insn_code_number, insn_code_number;\n@@ -4486,7 +4487,7 @@ c6x_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost)\n   if (insn_code_number >= 0)\n     insn_type = get_attr_type (insn);\n \n-  kind = REG_NOTE_KIND (link);\n+  kind = (reg_note) dep_type;\n   if (kind == 0)\n     {\n       /* If we have a dependency on a load, and it's not for the result of"}, {"sha": "25cbdfc69827f03d7abbaa553f96ee6943f3f1ea", "filename": "gcc/config/epiphany/epiphany.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.c?ref=b505225ba4de6de34a791571354a0df5d1bd2ed7", "patch": "@@ -1983,9 +1983,10 @@ epiphany_issue_rate (void)\n    the same cost as a data-dependence.  The return value should be\n    the new value for COST.  */\n static int\n-epiphany_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost)\n+epiphany_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep_insn,\n+\t\t      int cost, unsigned int)\n {\n-  if (REG_NOTE_KIND (link) == 0)\n+  if (dep_type == 0)\n     {\n       rtx dep_set;\n "}, {"sha": "246c6b5164df83b70cb5a80eb425db46d5098116", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b505225ba4de6de34a791571354a0df5d1bd2ed7", "patch": "@@ -28790,15 +28790,16 @@ exact_store_load_dependency (rtx_insn *store, rtx_insn *load)\n }\n \n static int\n-ix86_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost)\n+ix86_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep_insn, int cost,\n+\t\t  unsigned int)\n {\n   enum attr_type insn_type, dep_insn_type;\n   enum attr_memory memory;\n   rtx set, set2;\n   int dep_insn_code_number;\n \n   /* Anti and output dependencies have zero cost on all CPUs.  */\n-  if (REG_NOTE_KIND (link) != 0)\n+  if (dep_type != 0)\n     return 0;\n \n   dep_insn_code_number = recog_memoized (dep_insn);"}, {"sha": "4fd7c84a18da94fca901db38b16fb9493b2a9010", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=b505225ba4de6de34a791571354a0df5d1bd2ed7", "patch": "@@ -240,7 +240,7 @@ static void ia64_print_operand_address (FILE *, machine_mode, rtx);\n static bool ia64_print_operand_punct_valid_p (unsigned char code);\n \n static int ia64_issue_rate (void);\n-static int ia64_adjust_cost_2 (rtx_insn *, int, rtx_insn *, int, dw_t);\n+static int ia64_adjust_cost (rtx_insn *, int, rtx_insn *, int, dw_t);\n static void ia64_sched_init (FILE *, int, int);\n static void ia64_sched_init_global (FILE *, int, int);\n static void ia64_sched_finish_global (FILE *, int);\n@@ -419,8 +419,8 @@ static const struct attribute_spec ia64_attribute_table[] =\n #undef TARGET_IN_SMALL_DATA_P\n #define TARGET_IN_SMALL_DATA_P  ia64_in_small_data_p\n \n-#undef TARGET_SCHED_ADJUST_COST_2\n-#define TARGET_SCHED_ADJUST_COST_2 ia64_adjust_cost_2\n+#undef TARGET_SCHED_ADJUST_COST\n+#define TARGET_SCHED_ADJUST_COST ia64_adjust_cost\n #undef TARGET_SCHED_ISSUE_RATE\n #define TARGET_SCHED_ISSUE_RATE ia64_issue_rate\n #undef TARGET_SCHED_VARIABLE_ISSUE\n@@ -7190,8 +7190,8 @@ ia64_single_set (rtx_insn *insn)\n    Return the new cost of a dependency of type DEP_TYPE or INSN on DEP_INSN.\n    COST is the current cost, DW is dependency weakness.  */\n static int\n-ia64_adjust_cost_2 (rtx_insn *insn, int dep_type1, rtx_insn *dep_insn,\n-\t\t    int cost, dw_t dw)\n+ia64_adjust_cost (rtx_insn *insn, int dep_type1, rtx_insn *dep_insn,\n+\t\t  int cost, dw_t dw)\n {\n   enum reg_note dep_type = (enum reg_note) dep_type1;\n   enum attr_itanium_class dep_class;"}, {"sha": "7cee0f595297a72d1e2b5bb4c7073cafe7ee9724", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=b505225ba4de6de34a791571354a0df5d1bd2ed7", "patch": "@@ -138,7 +138,8 @@ struct m68k_address {\n   int scale;\n };\n \n-static int m68k_sched_adjust_cost (rtx_insn *, rtx, rtx_insn *, int);\n+static int m68k_sched_adjust_cost (rtx_insn *, int, rtx_insn *, int,\n+\t\t\t\t   unsigned int);\n static int m68k_sched_issue_rate (void);\n static int m68k_sched_variable_issue (FILE *, int, rtx_insn *, int);\n static void m68k_sched_md_init_global (FILE *, int, int);\n@@ -5917,8 +5918,8 @@ static state_t sched_adjust_cost_state;\n /* Implement adjust_cost scheduler hook.\n    Return adjusted COST of dependency LINK between DEF_INSN and INSN.  */\n static int\n-m68k_sched_adjust_cost (rtx_insn *insn, rtx link ATTRIBUTE_UNUSED,\n-\t\t\trtx_insn *def_insn, int cost)\n+m68k_sched_adjust_cost (rtx_insn *insn, int, rtx_insn *def_insn, int cost,\n+\t\t\tunsigned int)\n {\n   int delay;\n "}, {"sha": "735dff52db20ddb99cd2a8ed1216d7282d79defe", "filename": "gcc/config/microblaze/microblaze.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c?ref=b505225ba4de6de34a791571354a0df5d1bd2ed7", "patch": "@@ -3561,14 +3561,12 @@ microblaze_function_value (const_tree valtype,\n \n /* Implement TARGET_SCHED_ADJUST_COST.  */\n static int\n-microblaze_adjust_cost (rtx_insn *insn ATTRIBUTE_UNUSED, rtx link,\n-\t\t\trtx_insn *dep ATTRIBUTE_UNUSED, int cost)\n+microblaze_adjust_cost (rtx_insn *, int dep_type, rtx_insn *, int cost,\n+\t\t\tunsigned int)\n {\n-  if (REG_NOTE_KIND (link) == REG_DEP_OUTPUT)\n+  if (dep_type == REG_DEP_OUTPUT || dep_type == 0)\n     return cost;\n-  if (REG_NOTE_KIND (link) != 0)\n-    return 0;\n-  return cost;\n+  return 0;\n }\n \n /* Implement TARGET_LEGITIMATE_CONSTANT_P."}, {"sha": "57b7633b0d135516b964197580194b8c263460c7", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=b505225ba4de6de34a791571354a0df5d1bd2ed7", "patch": "@@ -14451,13 +14451,9 @@ static struct\n    is treated like input-dependence.  */\n \n static int\n-mips_adjust_cost (rtx_insn *insn ATTRIBUTE_UNUSED, rtx link,\n-\t\t  rtx_insn *dep ATTRIBUTE_UNUSED, int cost)\n+mips_adjust_cost (rtx_insn *, int dep_type, rtx_insn *, int cost, unsigned int)\n {\n-  if (REG_NOTE_KIND (link) == REG_DEP_OUTPUT\n-      && TUNE_20KC)\n-    return cost;\n-  if (REG_NOTE_KIND (link) != 0)\n+  if (dep_type != 0 && (dep_type != REG_DEP_OUTPUT || !TUNE_20KC))\n     return 0;\n   return cost;\n }"}, {"sha": "6e590cd6a33d03d5f8ad786d7e6e79db2ddd1a59", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=b505225ba4de6de34a791571354a0df5d1bd2ed7", "patch": "@@ -2758,7 +2758,8 @@ set_is_store_p (rtx set)\n    COST is the current cycle cost for DEP.  */\n \n static int\n-mn10300_adjust_sched_cost (rtx_insn *insn, rtx link, rtx_insn *dep, int cost)\n+mn10300_adjust_sched_cost (rtx_insn *insn, int dep_type, rtx_insn *dep,\n+\t\t\t   int cost, unsigned int)\n {\n   rtx insn_set;\n   rtx dep_set;\n@@ -2807,7 +2808,7 @@ mn10300_adjust_sched_cost (rtx_insn *insn, rtx link, rtx_insn *dep, int cost)\n     return cost;\n \n   /* If a data dependence already exists then the cost is correct.  */\n-  if (REG_NOTE_KIND (link) == 0)\n+  if (dep_type == 0)\n     return cost;\n \n   /* Check that the instruction about to scheduled is an FPU instruction.  */"}, {"sha": "251c1ada392af48cebd0ba74cdc41a4bf1c4578e", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=b505225ba4de6de34a791571354a0df5d1bd2ed7", "patch": "@@ -117,7 +117,7 @@ static bool pa_function_value_regno_p (const unsigned int);\n static void pa_output_function_prologue (FILE *, HOST_WIDE_INT);\n static void update_total_code_bytes (unsigned int);\n static void pa_output_function_epilogue (FILE *, HOST_WIDE_INT);\n-static int pa_adjust_cost (rtx_insn *, rtx, rtx_insn *, int);\n+static int pa_adjust_cost (rtx_insn *, int, rtx_insn *, int, unsigned int);\n static int pa_adjust_priority (rtx_insn *, int);\n static int pa_issue_rate (void);\n static int pa_reloc_rw_mask (void);\n@@ -4759,21 +4759,22 @@ pa_emit_bcond_fp (rtx operands[])\n    a dependency LINK or INSN on DEP_INSN.  COST is the current cost.  */\n \n static int\n-pa_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost)\n+pa_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep_insn, int cost,\n+\t\tunsigned int)\n {\n   enum attr_type attr_type;\n \n   /* Don't adjust costs for a pa8000 chip, also do not adjust any\n      true dependencies as they are described with bypasses now.  */\n-  if (pa_cpu >= PROCESSOR_8000 || REG_NOTE_KIND (link) == 0)\n+  if (pa_cpu >= PROCESSOR_8000 || dep_type == 0)\n     return cost;\n \n   if (! recog_memoized (insn))\n     return 0;\n \n   attr_type = get_attr_type (insn);\n \n-  switch (REG_NOTE_KIND (link))\n+  switch (dep_type)\n     {\n     case REG_DEP_ANTI:\n       /* Anti dependency; DEP_INSN reads a register that INSN writes some"}, {"sha": "e5d8ad0719867d2c7254c7ac61fd4d91bcd48163", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=b505225ba4de6de34a791571354a0df5d1bd2ed7", "patch": "@@ -1230,7 +1230,8 @@ static int rs6000_memory_move_cost (machine_mode, reg_class_t, bool);\n static bool rs6000_debug_rtx_costs (rtx, machine_mode, int, int, int *, bool);\n static int rs6000_debug_address_cost (rtx, machine_mode, addr_space_t,\n \t\t\t\t      bool);\n-static int rs6000_debug_adjust_cost (rtx_insn *, rtx, rtx_insn *, int);\n+static int rs6000_debug_adjust_cost (rtx_insn *, int, rtx_insn *, int,\n+\t\t\t\t     unsigned int);\n static bool is_microcoded_insn (rtx_insn *);\n static bool is_nonpipeline_insn (rtx_insn *);\n static bool is_cracked_insn (rtx_insn *);\n@@ -30077,14 +30078,15 @@ rs6000_variable_issue (FILE *stream, int verbose, rtx_insn *insn, int more)\n    a dependency LINK or INSN on DEP_INSN.  COST is the current cost.  */\n \n static int\n-rs6000_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost)\n+rs6000_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep_insn, int cost,\n+\t\t    unsigned int)\n {\n   enum attr_type attr_type;\n \n   if (recog_memoized (insn) < 0 || recog_memoized (dep_insn) < 0)\n     return cost;\n \n-  switch (REG_NOTE_KIND (link))\n+  switch (dep_type)\n     {\n     case REG_DEP_TRUE:\n       {\n@@ -30349,16 +30351,16 @@ rs6000_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost)\n /* Debug version of rs6000_adjust_cost.  */\n \n static int\n-rs6000_debug_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn,\n-\t\t\t  int cost)\n+rs6000_debug_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep_insn,\n+\t\t\t  int cost, unsigned int dw)\n {\n-  int ret = rs6000_adjust_cost (insn, link, dep_insn, cost);\n+  int ret = rs6000_adjust_cost (insn, dep_type, dep_insn, cost, dw);\n \n   if (ret != cost)\n     {\n       const char *dep;\n \n-      switch (REG_NOTE_KIND (link))\n+      switch (dep_type)\n \t{\n \tdefault:\t     dep = \"unknown depencency\"; break;\n \tcase REG_DEP_TRUE:   dep = \"data dependency\";\t break;"}, {"sha": "10b5a2875d7a34d6e18e5126660e05cc40b97913", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=b505225ba4de6de34a791571354a0df5d1bd2ed7", "patch": "@@ -213,7 +213,7 @@ static void sh_output_function_epilogue (FILE *, HOST_WIDE_INT);\n static void sh_insert_attributes (tree, tree *);\n static const char *sh_check_pch_target_flags (int);\n static int sh_register_move_cost (machine_mode, reg_class_t, reg_class_t);\n-static int sh_adjust_cost (rtx_insn *, rtx, rtx_insn *, int);\n+static int sh_adjust_cost (rtx_insn *, int, rtx_insn *, int, unsigned int);\n static int sh_issue_rate (void);\n static int sh_dfa_new_cycle (FILE *, int, rtx_insn *, int, int, int *sort_p);\n static short find_set_regmode_weight (rtx, machine_mode);\n@@ -9455,12 +9455,12 @@ sh_hard_regno_rename_ok (unsigned int old_reg ATTRIBUTE_UNUSED,\n    the same cost as a data-dependence.  The return value should be\n    the new value for COST.  */\n static int\n-sh_adjust_cost (rtx_insn *insn, rtx link ATTRIBUTE_UNUSED,\n-\t\trtx_insn *dep_insn, int cost)\n+sh_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep_insn, int cost,\n+\t\tunsigned int)\n {\n   rtx reg, use_pat;\n \n-  if (REG_NOTE_KIND (link) == 0)\n+  if (dep_type == 0)\n     {\n       if (recog_memoized (insn) < 0\n \t  || recog_memoized (dep_insn) < 0)\n@@ -9577,7 +9577,7 @@ sh_adjust_cost (rtx_insn *insn, rtx link ATTRIBUTE_UNUSED,\n   /* An anti-dependence penalty of two applies if the first insn is a double\n      precision fadd / fsub / fmul.  */\n   else if (!TARGET_SH4_300\n-\t   && REG_NOTE_KIND (link) == REG_DEP_ANTI\n+\t   && dep_type == REG_DEP_ANTI\n \t   && recog_memoized (dep_insn) >= 0\n \t   && (get_attr_type (dep_insn) == TYPE_DFP_ARITH\n \t       || get_attr_type (dep_insn) == TYPE_DFP_MUL)"}, {"sha": "f5cc113dc0f73189aafd4238f422e7f4e2637b40", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=b505225ba4de6de34a791571354a0df5d1bd2ed7", "patch": "@@ -545,8 +545,8 @@ static void sparc_init_modes (void);\n static int function_arg_slotno (const CUMULATIVE_ARGS *, machine_mode,\n \t\t\t\tconst_tree, bool, bool, int *, int *);\n \n-static int supersparc_adjust_cost (rtx_insn *, rtx, rtx_insn *, int);\n-static int hypersparc_adjust_cost (rtx_insn *, rtx, rtx_insn *, int);\n+static int supersparc_adjust_cost (rtx_insn *, int, rtx_insn *, int);\n+static int hypersparc_adjust_cost (rtx_insn *, int, rtx_insn *, int);\n \n static void sparc_emit_set_const32 (rtx, rtx);\n static void sparc_emit_set_const64 (rtx, rtx);\n@@ -565,7 +565,7 @@ static void sparc_asm_function_epilogue (FILE *, HOST_WIDE_INT);\n static void sparc_solaris_elf_asm_named_section (const char *, unsigned int,\n \t\t\t\t\t\t tree) ATTRIBUTE_UNUSED;\n #endif\n-static int sparc_adjust_cost (rtx_insn *, rtx, rtx_insn *, int);\n+static int sparc_adjust_cost (rtx_insn *, int, rtx_insn *, int, unsigned int);\n static int sparc_issue_rate (void);\n static void sparc_sched_init (FILE *, int, int);\n static int sparc_use_sched_lookahead (void);\n@@ -9353,7 +9353,8 @@ sparc_trampoline_init (rtx m_tramp, tree fndecl, rtx cxt)\n    a dependency LINK or INSN on DEP_INSN.  COST is the current cost.  */\n \n static int\n-supersparc_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost)\n+supersparc_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep_insn,\n+\t\t\tint cost)\n {\n   enum attr_type insn_type;\n \n@@ -9362,7 +9363,7 @@ supersparc_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost)\n \n   insn_type = get_attr_type (insn);\n \n-  if (REG_NOTE_KIND (link) == 0)\n+  if (dep_type == 0)\n     {\n       /* Data dependency; DEP_INSN writes a register that INSN reads some\n \t cycles later.  */\n@@ -9414,7 +9415,8 @@ supersparc_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost)\n }\n \n static int\n-hypersparc_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost)\n+hypersparc_adjust_cost (rtx_insn *insn, int dtype, rtx_insn *dep_insn,\n+\t\t\tint cost)\n {\n   enum attr_type insn_type, dep_type;\n   rtx pat = PATTERN(insn);\n@@ -9426,7 +9428,7 @@ hypersparc_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost)\n   insn_type = get_attr_type (insn);\n   dep_type = get_attr_type (dep_insn);\n \n-  switch (REG_NOTE_KIND (link))\n+  switch (dtype)\n     {\n     case 0:\n       /* Data dependency; DEP_INSN writes a register that INSN reads some\n@@ -9491,16 +9493,17 @@ hypersparc_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost)\n }\n \n static int\n-sparc_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep, int cost)\n+sparc_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep, int cost,\n+\t\t   unsigned int)\n {\n   switch (sparc_cpu)\n     {\n     case PROCESSOR_SUPERSPARC:\n-      cost = supersparc_adjust_cost (insn, link, dep, cost);\n+      cost = supersparc_adjust_cost (insn, dep_type, dep, cost);\n       break;\n     case PROCESSOR_HYPERSPARC:\n     case PROCESSOR_SPARCLITE86X:\n-      cost = hypersparc_adjust_cost (insn, link, dep, cost);\n+      cost = hypersparc_adjust_cost (insn, dep_type, dep, cost);\n       break;\n     default:\n       break;"}, {"sha": "fc791f5515b246b13223f048ea12f8ae171360d7", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=b505225ba4de6de34a791571354a0df5d1bd2ed7", "patch": "@@ -2983,7 +2983,8 @@ spu_sched_reorder (FILE *file ATTRIBUTE_UNUSED, int verbose ATTRIBUTE_UNUSED,\n \n /* INSN is dependent on DEP_INSN. */\n static int\n-spu_sched_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost)\n+spu_sched_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep_insn,\n+\t\t       int cost, unsigned int)\n {\n   rtx set;\n \n@@ -3044,7 +3045,7 @@ spu_sched_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost)\n      scheduler makes every insn in a block anti-dependent on the final\n      jump_insn.  We adjust here so higher cost insns will get scheduled\n      earlier. */\n-  if (JUMP_P (insn) && REG_NOTE_KIND (link) == REG_DEP_ANTI)\n+  if (JUMP_P (insn) && dep_type == REG_DEP_ANTI)\n     return insn_cost (dep_insn) - 3;\n \n   return cost;"}, {"sha": "5508ed8a724eb6eb0666d9ba7fa7ccae822688fd", "filename": "gcc/config/tilegx/tilegx.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.c?ref=b505225ba4de6de34a791571354a0df5d1bd2ed7", "patch": "@@ -4419,15 +4419,15 @@ get_jump_target (rtx branch)\n \n /* Implement TARGET_SCHED_ADJUST_COST.  */\n static int\n-tilegx_sched_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn,\n-\t\t\t  int cost)\n+tilegx_sched_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep_insn,\n+\t\t\t  int cost, unsigned int)\n {\n   /* If we have a true dependence, INSN is a call, and DEP_INSN\n      defines a register that is needed by the call (argument or stack\n      pointer) , set its latency to 0 so that it can be bundled with\n      the call.  Explicitly check for and exclude the case when\n      DEP_INSN defines the target of the jump.  */\n-  if (CALL_P (insn) && REG_NOTE_KIND (link) == REG_DEP_TRUE)\n+  if (CALL_P (insn) && dep_type == REG_DEP_TRUE)\n     {\n       rtx target = get_jump_target (insn);\n       if (!REG_P (target) || !set_of (target, dep_insn))"}, {"sha": "7237a60033389e719bdeaadf6f6b228c34d56cbd", "filename": "gcc/config/tilepro/tilepro.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Ftilepro.c?ref=b505225ba4de6de34a791571354a0df5d1bd2ed7", "patch": "@@ -3944,15 +3944,15 @@ get_jump_target (rtx branch)\n \n /* Implement TARGET_SCHED_ADJUST_COST.  */\n static int\n-tilepro_sched_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn,\n-\t\t\t   int cost)\n+tilepro_sched_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep_insn,\n+\t\t\t   int cost, unsigned int)\n {\n   /* If we have a true dependence, INSN is a call, and DEP_INSN\n      defines a register that is needed by the call (argument or stack\n      pointer), set its latency to 0 so that it can be bundled with\n      the call.  Explicitly check for and exclude the case when\n      DEP_INSN defines the target of the jump.  */\n-  if (CALL_P (insn) && REG_NOTE_KIND (link) == REG_DEP_TRUE)\n+  if (CALL_P (insn) && dep_type == REG_DEP_TRUE)\n     {\n       rtx target = get_jump_target (insn);\n       if (!REG_P (target) || !set_of (target, dep_insn))"}, {"sha": "360a6740c78341ea8249fed22d23ba520ca36fe5", "filename": "gcc/config/visium/visium.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fconfig%2Fvisium%2Fvisium.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fconfig%2Fvisium%2Fvisium.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.c?ref=b505225ba4de6de34a791571354a0df5d1bd2ed7", "patch": "@@ -211,7 +211,7 @@ static int visium_issue_rate (void);\n \n static int visium_adjust_priority (rtx_insn *, int);\n \n-static int visium_adjust_cost (rtx_insn *, rtx, rtx_insn *, int);\n+static int visium_adjust_cost (rtx_insn *, int, rtx_insn *, int, unsigned int);\n \n static int visium_register_move_cost (enum machine_mode, reg_class_t,\n \t\t\t\t      reg_class_t);\n@@ -528,14 +528,15 @@ visium_adjust_priority (rtx_insn *insn, int priority)\n    a dependency LINK of INSN on DEP_INSN.  COST is the current cost.  */\n \n static int\n-visium_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost)\n+visium_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep_insn, int cost,\n+\t\t    unsigned int)\n {\n   enum attr_type attr_type;\n \n   /* Don't adjust costs for true dependencies as they are described with\n      bypasses.  But we make an exception for the first scheduling pass to\n      help the subsequent postreload compare elimination pass.  */\n-  if (REG_NOTE_KIND (link) == REG_DEP_TRUE)\n+  if (dep_type == REG_DEP_TRUE)\n     {\n       if (!reload_completed\n \t  && recog_memoized (insn) >= 0\n@@ -576,7 +577,7 @@ visium_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost)\n \n   /* Anti dependency: DEP_INSN reads a register that INSN writes some\n      cycles later.  */\n-  if (REG_NOTE_KIND (link) == REG_DEP_ANTI)\n+  if (dep_type == REG_DEP_ANTI)\n     {\n       /* On the GR5, the latency of FP instructions needs to be taken into\n \t account for every dependency involving a write.  */\n@@ -637,7 +638,7 @@ visium_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost)\n \n   /* Output dependency: DEP_INSN writes a register that INSN writes some\n      cycles later.  */\n-  else if (REG_NOTE_KIND (link) == REG_DEP_OUTPUT)\n+  else if (dep_type == REG_DEP_OUTPUT)\n     {\n       /* On the GR5, the latency of FP instructions needs to be taken into\n \t account for every dependency involving a write.  */"}, {"sha": "9edb006cb067a0f68af7579d1ac7409fad12c105", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=b505225ba4de6de34a791571354a0df5d1bd2ed7", "patch": "@@ -6590,14 +6590,14 @@ debug output to.  @var{verbose} is the verbose level provided by\n was scheduled.\n @end deftypefn\n \n-@deftypefn {Target Hook} int TARGET_SCHED_ADJUST_COST (rtx_insn *@var{insn}, rtx @var{link}, rtx_insn *@var{dep_insn}, int @var{cost})\n+@deftypefn {Target Hook} int TARGET_SCHED_ADJUST_COST (rtx_insn *@var{insn}, int @var{dep_type1}, rtx_insn *@var{dep_insn}, int @var{cost}, unsigned int @var{dw})\n This function corrects the value of @var{cost} based on the\n-relationship between @var{insn} and @var{dep_insn} through the\n-dependence @var{link}.  It should return the new value.  The default\n-is to make no adjustment to @var{cost}.  This can be used for example\n-to specify to the scheduler using the traditional pipeline description\n-that an output- or anti-dependence does not incur the same cost as a\n-data-dependence.  If the scheduler using the automaton based pipeline\n+relationship between @var{insn} and @var{dep_insn} through a\n+dependence of type dep_type, and strength @var{dw}.  It should return the new\n+value.  The default is to make no adjustment to @var{cost}.  This can be\n+used for example to specify to the scheduler using the traditional pipeline\n+description that an output- or anti-dependence does not incur the same cost\n+as a data-dependence.  If the scheduler using the automaton based pipeline\n description, the cost of anti-dependence is zero and the cost of\n output-dependence is maximum of one and the difference of latency\n times of the first and the second insns.  If these values are not"}, {"sha": "84e42c0ac9bc1f5f3ffda12283c8c86931704454", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=b505225ba4de6de34a791571354a0df5d1bd2ed7", "patch": "@@ -1483,28 +1483,9 @@ dep_cost_1 (dep_t link, dw_t dw)\n \t}\n \n \n-      if (targetm.sched.adjust_cost_2)\n-\tcost = targetm.sched.adjust_cost_2 (used, (int) dep_type, insn, cost,\n-\t\t\t\t\t    dw);\n-      else if (targetm.sched.adjust_cost != NULL)\n-\t{\n-\t  /* This variable is used for backward compatibility with the\n-\t     targets.  */\n-\t  rtx_insn_list *dep_cost_rtx_link =\n-\t    alloc_INSN_LIST (NULL_RTX, NULL);\n-\n-\t  /* Make it self-cycled, so that if some tries to walk over this\n-\t     incomplete list he/she will be caught in an endless loop.  */\n-\t  XEXP (dep_cost_rtx_link, 1) = dep_cost_rtx_link;\n-\n-\t  /* Targets use only REG_NOTE_KIND of the link.  */\n-\t  PUT_REG_NOTE_KIND (dep_cost_rtx_link, DEP_TYPE (link));\n-\n-\t  cost = targetm.sched.adjust_cost (used, dep_cost_rtx_link,\n-\t\t\t\t\t    insn, cost);\n-\n-\t  free_INSN_LIST_node (dep_cost_rtx_link);\n-\t}\n+      if (targetm.sched.adjust_cost)\n+\tcost = targetm.sched.adjust_cost (used, (int) dep_type, insn, cost,\n+\t\t\t\t\t  dw);\n \n       if (cost < 0)\n \tcost = 0;"}, {"sha": "929d9ea05a84711cae200e79a2c6580de50c4b73", "filename": "gcc/target.def", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=b505225ba4de6de34a791571354a0df5d1bd2ed7", "patch": "@@ -932,18 +932,20 @@ HOOK_VECTOR (TARGET_SCHED, sched)\n DEFHOOK\n (adjust_cost,\n  \"This function corrects the value of @var{cost} based on the\\n\\\n-relationship between @var{insn} and @var{dep_insn} through the\\n\\\n-dependence @var{link}.  It should return the new value.  The default\\n\\\n-is to make no adjustment to @var{cost}.  This can be used for example\\n\\\n-to specify to the scheduler using the traditional pipeline description\\n\\\n-that an output- or anti-dependence does not incur the same cost as a\\n\\\n-data-dependence.  If the scheduler using the automaton based pipeline\\n\\\n+relationship between @var{insn} and @var{dep_insn} through a\\n\\\n+dependence of type dep_type, and strength @var{dw}.  It should return the new\\n\\\n+value.  The default is to make no adjustment to @var{cost}.  This can be\\n\\\n+used for example to specify to the scheduler using the traditional pipeline\\n\\\n+description that an output- or anti-dependence does not incur the same cost\\n\\\n+as a data-dependence.  If the scheduler using the automaton based pipeline\\n\\\n description, the cost of anti-dependence is zero and the cost of\\n\\\n output-dependence is maximum of one and the difference of latency\\n\\\n times of the first and the second insns.  If these values are not\\n\\\n acceptable, you could use the hook to modify them too.  See also\\n\\\n @pxref{Processor pipeline description}.\",\n- int, (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost), NULL)\n+ int, (rtx_insn *insn, int dep_type1, rtx_insn *dep_insn, int cost,\n+       unsigned int dw),\n+ NULL)\n \n /* Adjust the priority of an insn as you see fit.  Returns the new priority.  */\n DEFHOOK\n@@ -1346,15 +1348,6 @@ closer to one another---i.e., closer than the dependence distance;  however,\\n\\\n not in cases of ``costly dependences'', which this hooks allows to define.\",\n  bool, (struct _dep *_dep, int cost, int distance), NULL)\n \n-DEFHOOK_UNDOC\n-(adjust_cost_2,\n- \"Given the current cost, @var{cost}, of an insn, @var{insn}, calculate and\\\n- return a new cost based on its relationship to @var{dep_insn} through the\\\n- dependence of weakness @var{dw}.  The default is to make no adjustment.\",\n- int, (rtx_insn *insn, int dep_type1, rtx_insn *dep_insn, int cost,\n-       unsigned int dw),\n- NULL)\n-\n /* The following member value is a pointer to a function called\n    by the insn scheduler. This hook is called to notify the backend\n    that new instructions were emitted.  */"}]}