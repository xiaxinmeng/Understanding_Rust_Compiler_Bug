{"sha": "f4d43ef08641f6ffd48532a165a043eead1e4b3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRkNDNlZjA4NjQxZjZmZmQ0ODUzMmExNjVhMDQzZWVhZDFlNGIzYQ==", "commit": {"author": {"name": "Thomas Preud'homme", "email": "thomas.preudhomme@arm.com", "date": "2018-04-04T17:31:46Z"}, "committer": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2018-04-04T17:31:46Z"}, "message": "[ARM] Fix PR85203: cmse_nonsecure_caller returns wrong result\n\n__builtin_cmse_nonsecure_caller implementation returns true in almost\nall cases due to 2 separate bugs:\n\n* gen_addsi is used instead of gen_andsi to retrieve the lsb\n* the lsb boolean value is not negated but the specification says\n  the intrinsic should return true for a nonsecure caller and a\n  nonsecure caller is characterized with LR's lsb being 0\n\nThis was not caught due to (1) lack of runtime test and (2) the existing\nRTL scan not taking into account that '.' matches newline in Tcl regular\nexpressions.\n\nThis commit fixes the implementation issues and improves testing of\ncmse_nonsecure_caller by (1) adding a runtime test for the secure caller\ncase and (2) looking for an SET insn of an AND expression in the right\nfunction. This leaves the nonsecure caller case only partly tested\nsince the exact value being AND and the negation are not covered by the\nscan and the existing test infrastructure does not allow 2 separate\ncompilation and link to be performed. It is enough though to catch the\ncurrent incorrect behavior.\n\nThe commit also reorganize the scan directives in cmse-1.c to more\neasily identify what function they are intended to test in the file.\n\n2018-04-04  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\ngcc/\n    PR target/85203\n    * config/arm/arm-builtins.c (arm_expand_builtin): Change\n    expansion to perform a bitwise AND of the argument followed by a\n    boolean negation of the result.\n\ngcc/testsuite/\n    PR target/85203\n    * gcc.target/arm/cmse/cmse-1.c: Tighten cmse_nonsecure_caller RTL scan\n    to match a single insn of the baz function.  Move scan directives at\n    the end of the file below the functions they are trying to test for\n    better readability.\n    * gcc.target/arm/cmse/cmse-16.c: New testcase.\n\nFrom-SVN: r259097", "tree": {"sha": "e9e5adf2d4f7c429d7e3c97af13680720a9c12f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9e5adf2d4f7c429d7e3c97af13680720a9c12f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4d43ef08641f6ffd48532a165a043eead1e4b3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4d43ef08641f6ffd48532a165a043eead1e4b3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4d43ef08641f6ffd48532a165a043eead1e4b3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4d43ef08641f6ffd48532a165a043eead1e4b3a/comments", "author": {"login": "RoboTux", "id": 272327, "node_id": "MDQ6VXNlcjI3MjMyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/272327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoboTux", "html_url": "https://github.com/RoboTux", "followers_url": "https://api.github.com/users/RoboTux/followers", "following_url": "https://api.github.com/users/RoboTux/following{/other_user}", "gists_url": "https://api.github.com/users/RoboTux/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoboTux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoboTux/subscriptions", "organizations_url": "https://api.github.com/users/RoboTux/orgs", "repos_url": "https://api.github.com/users/RoboTux/repos", "events_url": "https://api.github.com/users/RoboTux/events{/privacy}", "received_events_url": "https://api.github.com/users/RoboTux/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c5c4b2ae6e33f8541d6d6300276fff3381706d81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5c4b2ae6e33f8541d6d6300276fff3381706d81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5c4b2ae6e33f8541d6d6300276fff3381706d81"}], "stats": {"total": 66, "additions": 56, "deletions": 10}, "files": [{"sha": "e0902309dd726ba5170e2bcde7a019a42422dc4f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4d43ef08641f6ffd48532a165a043eead1e4b3a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4d43ef08641f6ffd48532a165a043eead1e4b3a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f4d43ef08641f6ffd48532a165a043eead1e4b3a", "patch": "@@ -1,3 +1,10 @@\n+2018-04-04  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\tPR target/85203\n+\t* config/arm/arm-builtins.c (arm_expand_builtin): Change\n+\texpansion to perform a bitwise AND of the argument followed by a\n+\tboolean negation of the result.\n+\n 2018-04-04  Peter Bergner  <bergner@vnet.ibm.com>\n \n \tPR rtl-optimization/84878"}, {"sha": "184eb2a934308717b6e1054e376487a297f8d5de", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4d43ef08641f6ffd48532a165a043eead1e4b3a/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4d43ef08641f6ffd48532a165a043eead1e4b3a/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=f4d43ef08641f6ffd48532a165a043eead1e4b3a", "patch": "@@ -2600,7 +2600,9 @@ arm_expand_builtin (tree exp,\n     case ARM_BUILTIN_CMSE_NONSECURE_CALLER:\n       target = gen_reg_rtx (SImode);\n       op0 = arm_return_addr (0, NULL_RTX);\n-      emit_insn (gen_addsi3 (target, op0, const1_rtx));\n+      emit_insn (gen_andsi3 (target, op0, const1_rtx));\n+      op1 = gen_rtx_EQ (SImode, target, const0_rtx);\n+      emit_insn (gen_cstoresi4 (target, op1, target, const0_rtx));\n       return target;\n \n     case ARM_BUILTIN_TEXTRMSB:"}, {"sha": "ef7e77271a1cf50403af75a2a121264427e35b7f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4d43ef08641f6ffd48532a165a043eead1e4b3a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4d43ef08641f6ffd48532a165a043eead1e4b3a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f4d43ef08641f6ffd48532a165a043eead1e4b3a", "patch": "@@ -1,3 +1,12 @@\n+2018-04-04  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\tPR target/85203\n+\t* gcc.target/arm/cmse/cmse-1.c: Tighten cmse_nonsecure_caller RTL scan\n+\tto match a single insn of the baz function.  Move scan directives at\n+\tthe end of the file below the functions they are trying to test for\n+\tbetter readability.\n+\t* gcc.target/arm/cmse/cmse-16.c: New testcase.\n+\n 2018-04-04  Peter Bergner  <bergner@vnet.ibm.com>\n \n \tPR rtl-optimization/84878"}, {"sha": "f764153cb17b796ccd0d20abb78d5cf56be52911", "filename": "gcc/testsuite/gcc.target/arm/cmse/cmse-1.c", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4d43ef08641f6ffd48532a165a043eead1e4b3a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4d43ef08641f6ffd48532a165a043eead1e4b3a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-1.c?ref=f4d43ef08641f6ffd48532a165a043eead1e4b3a", "patch": "@@ -71,6 +71,20 @@ baz (void)\n {\n   return cmse_nonsecure_caller ();\n }\n+/* { dg-final { scan-assembler \"baz:\" } } */\n+/* { dg-final { scan-assembler \"__acle_se_baz:\" } } */\n+/* { dg-final { scan-assembler-not \"\\tcmse_nonsecure_caller\" } } */\n+/* Look for an andsi of 1 with a register in function baz, ie.\n+\n+;; Function baz<anything>\n+<any line without '('>\n+(insn <anything but '('> (set (reg<any register modifier>:SI <anything but ')'>)\n+     (and:SI (reg<any register modifier>:SI <anything but ')'>)\n+\t     (const_int 1 <anything but ')'>)<anything but '('>\n+   <optional: (nil)<anything but '('>>\n+(insn\n+*/\n+/* { dg-final { scan-rtl-dump \"\\n;; Function baz\\[^\\n\\]*\\[^(\\]+\\[^;\\]*\\n\\\\(insn \\[^(\\]+ \\\\(set \\\\(reg\\[^:\\]*:SI \\[^)\\]+\\\\)\\[^(\\]*\\\\(and:SI \\\\(reg\\[^:\\]*:SI \\[^)\\]+\\\\)\\[^(\\]*\\\\((const_int 1|reg\\[^:\\]*:SI) \\[^)\\]+\\\\)\\[^(\\]+(\\\\(nil\\\\)\\[^(\\]+)?\\\\(insn\" expand } } */\n \n typedef int __attribute__ ((cmse_nonsecure_call)) (int_nsfunc_t) (void);\n \n@@ -86,6 +100,11 @@ qux (int_nsfunc_t * callback)\n {\n   fp = cmse_nsfptr_create (callback);\n }\n+/* { dg-final { scan-assembler \"qux:\" } } */\n+/* { dg-final { scan-assembler \"__acle_se_qux:\" } } */\n+/* { dg-final { scan-assembler \"bic\" } } */\n+/* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6\" } } */\n+/* { dg-final { scan-assembler \"msr\\tAPSR_nzcvq\" } } */\n \n int call_callback (void)\n {\n@@ -94,13 +113,4 @@ int call_callback (void)\n   else\n     return default_callback ();\n }\n-/* { dg-final { scan-assembler \"baz:\" } } */\n-/* { dg-final { scan-assembler \"__acle_se_baz:\" } } */\n-/* { dg-final { scan-assembler \"qux:\" } } */\n-/* { dg-final { scan-assembler \"__acle_se_qux:\" } } */\n-/* { dg-final { scan-assembler-not \"\\tcmse_nonsecure_caller\" } } */\n-/* { dg-final { scan-rtl-dump \"and.*reg.*const_int 1\" expand } } */\n-/* { dg-final { scan-assembler \"bic\" } } */\n-/* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6\" } } */\n-/* { dg-final { scan-assembler \"msr\\tAPSR_nzcvq\" } } */\n /* { dg-final { scan-assembler-times \"bl\\\\s+__gnu_cmse_nonsecure_call\" 1 } } */"}, {"sha": "3fb0380afaafa506cdb68f4d3c1dd7b535d43f26", "filename": "gcc/testsuite/gcc.target/arm/cmse/cmse-16.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4d43ef08641f6ffd48532a165a043eead1e4b3a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4d43ef08641f6ffd48532a165a043eead1e4b3a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-16.c?ref=f4d43ef08641f6ffd48532a165a043eead1e4b3a", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run } */\n+/* { dg-options \"-Os -mcmse\" }  */\n+\n+#include <arm_cmse.h>\n+\n+int\n+foo (void)\n+{\n+  return cmse_nonsecure_caller ();\n+}\n+\n+int\n+main (void)\n+{\n+  /* Return success (0) if main is secure, ie if cmse_nonsecure_caller/foo\n+     returns false (0).  */\n+  return foo ();\n+}"}]}