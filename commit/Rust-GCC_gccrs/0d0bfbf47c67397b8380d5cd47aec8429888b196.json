{"sha": "0d0bfbf47c67397b8380d5cd47aec8429888b196", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQwYmZiZjQ3YzY3Mzk3YjgzODBkNWNkNDdhZWM4NDI5ODg4YjE5Ng==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2016-11-15T19:31:50Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2016-11-15T19:31:50Z"}, "message": "libiberty: Fix some demangler crashes caused by reading past end of input.\n\nIn various situations the cplus_demangle () function could read past the\nend of input causing crashes. Add checks in various places to not advance\nthe demangle string location and fail early when end of string is reached.\nAdd various examples of input strings to the testsuite that would crash\ntest-demangle before the fixes.\n\nFound by using the American Fuzzy Lop (afl) fuzzer.\n\nlibiberty/ChangeLog:\n\n       * cplus-dem.c (demangle_signature): After 'H', template function,\n       no success and don't advance position if end of string reached.\n       (demangle_template): After 'z', template name, return zero on\n       premature end of string.\n       (gnu_special): Guard strchr against searching for zero characters.\n       (do_type): If member, only advance mangled string when 'F' found.\n       * testsuite/demangle-expected: Add examples of strings that could\n       crash the demangler by reading past end of input.\n\nFrom-SVN: r242450", "tree": {"sha": "ac9185a03f861536fecb6507dcd0afa92608b55d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac9185a03f861536fecb6507dcd0afa92608b55d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d0bfbf47c67397b8380d5cd47aec8429888b196", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d0bfbf47c67397b8380d5cd47aec8429888b196", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d0bfbf47c67397b8380d5cd47aec8429888b196", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d0bfbf47c67397b8380d5cd47aec8429888b196/comments", "author": null, "committer": null, "parents": [{"sha": "6f959acccbe249ca2cb24a473a132ab089c0f7eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f959acccbe249ca2cb24a473a132ab089c0f7eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f959acccbe249ca2cb24a473a132ab089c0f7eb"}], "stats": {"total": 45, "additions": 41, "deletions": 4}, "files": [{"sha": "8a1aad953090975bb767dbd81965ceffc77b52cc", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d0bfbf47c67397b8380d5cd47aec8429888b196/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d0bfbf47c67397b8380d5cd47aec8429888b196/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=0d0bfbf47c67397b8380d5cd47aec8429888b196", "patch": "@@ -1,3 +1,14 @@\n+2016-11-14  Mark Wielaard  <mark@klomp.org>\n+\n+\t* cplus-dem.c (demangle_signature): After 'H', template function,\n+\tno success and don't advance position if end of string reached.\n+\t(demangle_template): After 'z', template name, return zero on\n+\tpremature end of string.\n+\t(gnu_special): Guard strchr against searching for zero characters.\n+\t(do_type): If member, only advance mangled string when 'F' found.\n+\t* testsuite/demangle-expected: Add examples of strings that could\n+\tcrash the demangler by reading past end of input.\n+\n 2016-11-06  Mark Wielaard  <mark@klomp.org>\n \n \t* configure.ac (ac_libiberty_warn_cflags): Add -Wshadow=local."}, {"sha": "3125a457b9d9800095ea863cacb0d0ba013c5f30", "filename": "libiberty/cplus-dem.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d0bfbf47c67397b8380d5cd47aec8429888b196/libiberty%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d0bfbf47c67397b8380d5cd47aec8429888b196/libiberty%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcplus-dem.c?ref=0d0bfbf47c67397b8380d5cd47aec8429888b196", "patch": "@@ -1654,7 +1654,10 @@ demangle_signature (struct work_stuff *work,\n \t\t\t\t\t   0);\n \t      if (!(work->constructor & 1))\n \t\texpect_return_type = 1;\n-\t      (*mangled)++;\n+\t      if (!**mangled)\n+\t\tsuccess = 0;\n+\t      else\n+\t        (*mangled)++;\n \t      break;\n \t    }\n \t  /* fall through */\n@@ -2133,6 +2136,8 @@ demangle_template (struct work_stuff *work, const char **mangled,\n \t{\n \t  int idx;\n \t  (*mangled)++;\n+\t  if (**mangled == '\\0')\n+\t    return (0);\n \t  (*mangled)++;\n \n \t  idx = consume_count_with_underscores (mangled);\n@@ -2977,7 +2982,7 @@ gnu_special (struct work_stuff *work, const char **mangled, string *declp)\n   int success = 1;\n   const char *p;\n \n-  if ((*mangled)[0] == '_'\n+  if ((*mangled)[0] == '_' && (*mangled)[1] != '\\0'\n       && strchr (cplus_markers, (*mangled)[1]) != NULL\n       && (*mangled)[2] == '_')\n     {\n@@ -2991,7 +2996,7 @@ gnu_special (struct work_stuff *work, const char **mangled, string *declp)\n \t\t&& (*mangled)[3] == 't'\n \t\t&& (*mangled)[4] == '_')\n \t       || ((*mangled)[1] == 'v'\n-\t\t   && (*mangled)[2] == 't'\n+\t\t   && (*mangled)[2] == 't' && (*mangled)[3] != '\\0'\n \t\t   && strchr (cplus_markers, (*mangled)[3]) != NULL)))\n     {\n       /* Found a GNU style virtual table, get past \"_vt<CPLUS_MARKER>\"\n@@ -3761,11 +3766,12 @@ do_type (struct work_stuff *work, const char **mangled, string *result)\n \t\t    break;\n \t\t  }\n \n-\t\tif (*(*mangled)++ != 'F')\n+\t\tif (*(*mangled) != 'F')\n \t\t  {\n \t\t    success = 0;\n \t\t    break;\n \t\t  }\n+\t\t(*mangled)++;\n \t      }\n \t    if ((member && !demangle_nested_args (work, mangled, &decl))\n \t\t|| **mangled != '_')"}, {"sha": "236161c2fe378fc29b766627fae110d9d37ee67b", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d0bfbf47c67397b8380d5cd47aec8429888b196/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d0bfbf47c67397b8380d5cd47aec8429888b196/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=0d0bfbf47c67397b8380d5cd47aec8429888b196", "patch": "@@ -4606,3 +4606,23 @@ void f<void, int, false>(void (*)(int) noexcept)\n \n _Z1fIvJiELb0EEvPDwiEFT_DpT0_E\n void f<void, int, false>(void (*)(int) throw(int))\n+\n+# Could crash\n+_\n+_\n+\n+# Could crash\n+_vt\n+_vt\n+\n+# Could crash\n+_$_1Acitz\n+_$_1Acitz\n+\n+# Could crash\n+_$_H1R\n+_$_H1R\n+\n+# Could crash\n+_Q8ccQ4M2e.\n+_Q8ccQ4M2e."}]}