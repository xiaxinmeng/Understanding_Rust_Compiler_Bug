{"sha": "0bd675183d94e6bca100c3aaaf87ee9676fb3c26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJkNjc1MTgzZDk0ZTZiY2ExMDBjM2FhYWY4N2VlOTY3NmZiM2MyNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-12T13:49:57Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-12T13:49:57Z"}, "message": "match.pd: Add ~(X - Y) -> ~X + Y simplification [PR96685]\n\nThis patch adds the ~(X - Y) -> ~X + Y simplification requested\nin the PR (plus also ~(X + C) -> ~X + (-C) for constants C that can\nbe safely negated.\n\nThe first two simplify blocks is what has been requested in the PR\nand that makes the first testcase pass.\nUnfortunately, that change also breaks the second testcase, because\nwhile the same expressions appearing in the same stmt and split\nacross multiple stmts has been folded (not really) before, with\nthis optimization fold-const.c optimizes ~X + Y further into\n(Y - X) - 1 in fold_binary_loc associate: code, but we have nothing\nlike that in GIMPLE and so end up with different expressions.\n\nThe last simplify is an attempt to deal with just this case,\nhad to rule out there the Y == -1U case, because then we\nreached infinite recursion as ~X + -1U was canonicalized by\nthe pattern into (-1U - X) + -1U but there is a canonicalization\n-1 - A -> ~A that turns it back.  Furthermore, had to make it #if\nGIMPLE only, because it otherwise resulted in infinite recursion\nwhen interacting with the associate: optimization.\nThe end result is that we pass all 3 testcases and thus canonizalize\nthe 3 possible forms of writing the same thing.\n\n2020-12-12  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/96685\n\t* match.pd (~(X - Y) -> ~X + Y): New optimization.\n\t(~X + Y -> (Y - X) - 1): Likewise.\n\n\t* gcc.dg/tree-ssa/pr96685-1.c: New test.\n\t* gcc.dg/tree-ssa/pr96685-2.c: New test.\n\t* gcc.dg/tree-ssa/pr96685-3.c: New test.", "tree": {"sha": "26b6b8215a5698abd61ab4832ee02ef55ab477fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26b6b8215a5698abd61ab4832ee02ef55ab477fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bd675183d94e6bca100c3aaaf87ee9676fb3c26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bd675183d94e6bca100c3aaaf87ee9676fb3c26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bd675183d94e6bca100c3aaaf87ee9676fb3c26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bd675183d94e6bca100c3aaaf87ee9676fb3c26/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe78528c05fdd562f21e12675781473b0fbe892e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe78528c05fdd562f21e12675781473b0fbe892e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe78528c05fdd562f21e12675781473b0fbe892e"}], "stats": {"total": 163, "additions": 163, "deletions": 0}, "files": [{"sha": "8f3edfa2fa62845cdf6ac4f71e49510399e08aea", "filename": "gcc/match.pd", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd675183d94e6bca100c3aaaf87ee9676fb3c26/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd675183d94e6bca100c3aaaf87ee9676fb3c26/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=0bd675183d94e6bca100c3aaaf87ee9676fb3c26", "patch": "@@ -1074,6 +1074,34 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n  (bit_not (plus:c (bit_not @0) @1))\n  (minus @0 @1))\n \n+/* ~(X - Y) -> ~X + Y.  */\n+(simplify\n+ (bit_not (minus:s @0 @1))\n+ (plus (bit_not @0) @1))\n+(simplify\n+ (bit_not (plus:s @0 INTEGER_CST@1))\n+ (if ((INTEGRAL_TYPE_P (type)\n+       && TYPE_UNSIGNED (type))\n+      || (!TYPE_OVERFLOW_SANITIZED (type)\n+\t  && may_negate_without_overflow_p (@1)))\n+  (plus (bit_not @0) { const_unop (NEGATE_EXPR, type, @1); })))\n+\n+#if GIMPLE\n+/* ~X + Y -> (Y - X) - 1.  */\n+(simplify\n+ (plus:c (bit_not @0) @1)\n+  (if (ANY_INTEGRAL_TYPE_P (type)\n+       && TYPE_OVERFLOW_WRAPS (type)\n+       /* -1 - X is folded to ~X, so we'd recurse endlessly.  */\n+       && !integer_all_onesp (@1))\n+   (plus (minus @1 @0) { build_minus_one_cst (type); })\n+   (if (INTEGRAL_TYPE_P (type)\n+\t&& TREE_CODE (@1) == INTEGER_CST\n+\t&& wi::to_wide (@1) != wi::min_value (TYPE_PRECISION (type),\n+\t\t\t\t\t      SIGNED))\n+    (minus (plus @1 { build_minus_one_cst (type); }) @0))))\n+#endif\n+\n /* x + (x & 1) -> (x + 1) & ~1 */\n (simplify\n  (plus:c @0 (bit_and:s @0 integer_onep@1))"}, {"sha": "eb3b1ea8dd6f3e4af55b2097af4280da1314e869", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr96685-1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd675183d94e6bca100c3aaaf87ee9676fb3c26/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96685-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd675183d94e6bca100c3aaaf87ee9676fb3c26/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96685-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96685-1.c?ref=0bd675183d94e6bca100c3aaaf87ee9676fb3c26", "patch": "@@ -0,0 +1,52 @@\n+/* PR tree-optimization/96685 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"return 1;\" 6 \"optimized\" } } */\n+\n+unsigned\n+f1 (unsigned x, unsigned y)\n+{\n+  unsigned a = ~(x - y);\n+  unsigned b = ~x + y;\n+  return a == b;\n+}\n+\n+unsigned\n+f2 (unsigned x)\n+{\n+  unsigned a = ~(x + -124U);\n+  unsigned b = ~x + 124U;\n+  return a == b;\n+}\n+\n+unsigned\n+f3 (unsigned x)\n+{\n+  unsigned a = ~(x + 124U);\n+  unsigned b = ~x + -124U;\n+  return a == b;\n+}\n+\n+int\n+f4 (int x, int y)\n+{\n+  int a = ~(x - y);\n+  int b = ~x + y;\n+  return a == b;\n+}\n+\n+int\n+f5 (int x)\n+{\n+  int a = ~(x + -124);\n+  int b = ~x + 124;\n+  return a == b;\n+}\n+\n+int\n+f6 (int x)\n+{\n+  int a = ~(x + 124);\n+  int b = ~x + -124;\n+  return a == b;\n+}"}, {"sha": "e3c1ac79ff4e77b91cad3ebac924062efc0627ba", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr96685-2.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd675183d94e6bca100c3aaaf87ee9676fb3c26/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96685-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd675183d94e6bca100c3aaaf87ee9676fb3c26/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96685-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96685-2.c?ref=0bd675183d94e6bca100c3aaaf87ee9676fb3c26", "patch": "@@ -0,0 +1,40 @@\n+/* PR tree-optimization/96685 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"return 1;\" 4 \"optimized\" } } */\n+\n+int\n+f1 (unsigned x, unsigned y)\n+{\n+  unsigned int r1 = (x - y);\n+  r1 = ~r1;\n+  unsigned int r2 = ~(x - y);\n+  return r1 == r2;\n+}\n+\n+int\n+f2 (unsigned x, unsigned y)\n+{\n+  unsigned int r1 = (x - 23);\n+  r1 = ~r1;\n+  unsigned int r2 = ~(x - 23);\n+  return r1 == r2;\n+}\n+\n+int\n+f3 (int x, int y)\n+{\n+  int r1 = (x - y);\n+  r1 = ~r1;\n+  int r2 = ~(x - y);\n+  return r1 == r2;\n+}\n+\n+int\n+f4 (int x, int y)\n+{\n+  int r1 = (x - 23);\n+  r1 = ~r1;\n+  int r2 = ~(x - 23);\n+  return r1 == r2;\n+}"}, {"sha": "b3c185530bdda0c481dae58eaf38d15e34127ec4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr96685-3.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd675183d94e6bca100c3aaaf87ee9676fb3c26/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96685-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd675183d94e6bca100c3aaaf87ee9676fb3c26/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96685-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96685-3.c?ref=0bd675183d94e6bca100c3aaaf87ee9676fb3c26", "patch": "@@ -0,0 +1,43 @@\n+/* PR tree-optimization/96685 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"return 1;\" 4 \"optimized\" } } */\n+\n+int\n+f1 (unsigned x, unsigned y)\n+{\n+  unsigned int r1 = (x - y);\n+  r1 = ~r1;\n+  unsigned int r2 = (y - x);\n+  r2 = r2 - 1;\n+  return r1 == r2;\n+}\n+\n+int\n+f2 (unsigned x, unsigned y)\n+{\n+  unsigned int r1 = (x - 23);\n+  r1 = ~r1;\n+  unsigned int r2 = (23 - x);\n+  r2 = r2 - 1;\n+  return r1 == r2;\n+}\n+\n+int\n+f3 (int x, int y)\n+{\n+  int r1 = (x - 23);\n+  r1 = ~r1;\n+  int r2 = (23 - x);\n+  --r2;\n+  return r1 == r2;\n+}\n+\n+int\n+f4 (int x, int y)\n+{\n+  int r1 = (x - 23);\n+  r1 = ~r1;\n+  int r2 = (22 - x);\n+  return r1 == r2;\n+}"}]}