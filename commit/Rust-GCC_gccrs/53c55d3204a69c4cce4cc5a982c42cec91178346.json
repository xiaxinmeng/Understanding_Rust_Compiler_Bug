{"sha": "53c55d3204a69c4cce4cc5a982c42cec91178346", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNjNTVkMzIwNGE2OWM0Y2NlNGNjNWE5ODJjNDJjZWM5MTE3ODM0Ng==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde@tbsaunde.org", "date": "2021-06-12T23:36:38Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@tbsaunde.org", "date": "2021-06-17T08:43:28Z"}, "message": "return auto_vec from more dominance functions\n\nThis ensures the vector gets cleaned up by the caller when appropriate.\n\nSigned-off-by: Trevor Saunders <tbsaunde@tbsaunde.org>\n\ngcc/ChangeLog:\n\n\t* dominance.c (get_dominated_to_depth): Return auto_vec<basic_block>.\n\t* dominance.h (get_dominated_to_depth): Likewise.\n\t(get_all_dominated_blocks): Likewise.\n\t* cfgcleanup.c (delete_unreachable_blocks): Adjust.\n\t* gcse.c (hoist_code): Likewise.\n\t* tree-cfg.c (remove_edge_and_dominated_blocks): Likewise.\n\t* tree-parloops.c (oacc_entry_exit_ok): Likewise.\n\t* tree-ssa-dce.c (eliminate_unnecessary_stmts): Likewise.\n\t* tree-ssa-phiprop.c (pass_phiprop::execute): Likewise.", "tree": {"sha": "7dd382841cab32c6800d475aa17e5f11fdf31bc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7dd382841cab32c6800d475aa17e5f11fdf31bc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53c55d3204a69c4cce4cc5a982c42cec91178346", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53c55d3204a69c4cce4cc5a982c42cec91178346", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53c55d3204a69c4cce4cc5a982c42cec91178346", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53c55d3204a69c4cce4cc5a982c42cec91178346/comments", "author": {"login": "tbsaunde", "id": 349840, "node_id": "MDQ6VXNlcjM0OTg0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/349840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbsaunde", "html_url": "https://github.com/tbsaunde", "followers_url": "https://api.github.com/users/tbsaunde/followers", "following_url": "https://api.github.com/users/tbsaunde/following{/other_user}", "gists_url": "https://api.github.com/users/tbsaunde/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbsaunde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbsaunde/subscriptions", "organizations_url": "https://api.github.com/users/tbsaunde/orgs", "repos_url": "https://api.github.com/users/tbsaunde/repos", "events_url": "https://api.github.com/users/tbsaunde/events{/privacy}", "received_events_url": "https://api.github.com/users/tbsaunde/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbsaunde", "id": 349840, "node_id": "MDQ6VXNlcjM0OTg0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/349840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbsaunde", "html_url": "https://github.com/tbsaunde", "followers_url": "https://api.github.com/users/tbsaunde/followers", "following_url": "https://api.github.com/users/tbsaunde/following{/other_user}", "gists_url": "https://api.github.com/users/tbsaunde/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbsaunde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbsaunde/subscriptions", "organizations_url": "https://api.github.com/users/tbsaunde/orgs", "repos_url": "https://api.github.com/users/tbsaunde/repos", "events_url": "https://api.github.com/users/tbsaunde/events{/privacy}", "received_events_url": "https://api.github.com/users/tbsaunde/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4541b5ec16178a1954066c54cd9220b7c8f74309", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4541b5ec16178a1954066c54cd9220b7c8f74309", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4541b5ec16178a1954066c54cd9220b7c8f74309"}], "stats": {"total": 47, "additions": 19, "deletions": 28}, "files": [{"sha": "7b1e1ba6e80e4225972a8b725033c1652a08352e", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53c55d3204a69c4cce4cc5a982c42cec91178346/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53c55d3204a69c4cce4cc5a982c42cec91178346/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=53c55d3204a69c4cce4cc5a982c42cec91178346", "patch": "@@ -3027,7 +3027,7 @@ delete_unreachable_blocks (void)\n \t\tdelete_basic_block (b);\n \t      else\n \t\t{\n-\t\t  vec<basic_block> h\n+\t\t  auto_vec<basic_block> h\n \t\t    = get_all_dominated_blocks (CDI_DOMINATORS, b);\n \n \t\t  while (h.length ())\n@@ -3040,8 +3040,6 @@ delete_unreachable_blocks (void)\n \n \t\t      delete_basic_block (b);\n \t\t    }\n-\n-\t\t  h.release ();\n \t\t}\n \n \t      changed = true;"}, {"sha": "6a262ce828395232abfcc533efaea79ad9eebb27", "filename": "gcc/dominance.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53c55d3204a69c4cce4cc5a982c42cec91178346/gcc%2Fdominance.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53c55d3204a69c4cce4cc5a982c42cec91178346/gcc%2Fdominance.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdominance.c?ref=53c55d3204a69c4cce4cc5a982c42cec91178346", "patch": "@@ -933,10 +933,10 @@ get_dominated_by_region (enum cdi_direction dir, basic_block *region,\n    produce a vector containing all dominated blocks.  The vector will be sorted\n    in preorder.  */\n \n-vec<basic_block> \n+auto_vec<basic_block> \n get_dominated_to_depth (enum cdi_direction dir, basic_block bb, int depth)\n {\n-  vec<basic_block> bbs = vNULL;\n+  auto_vec<basic_block> bbs;\n   unsigned i;\n   unsigned next_level_start;\n \n@@ -965,7 +965,7 @@ get_dominated_to_depth (enum cdi_direction dir, basic_block bb, int depth)\n /* Returns the list of basic blocks including BB dominated by BB, in the\n    direction DIR.  The vector will be sorted in preorder.  */\n \n-vec<basic_block> \n+auto_vec<basic_block> \n get_all_dominated_blocks (enum cdi_direction dir, basic_block bb)\n {\n   return get_dominated_to_depth (dir, bb, 0);"}, {"sha": "1a8c248ee9816451db6d0f65eb2f4de29713c9a6", "filename": "gcc/dominance.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53c55d3204a69c4cce4cc5a982c42cec91178346/gcc%2Fdominance.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53c55d3204a69c4cce4cc5a982c42cec91178346/gcc%2Fdominance.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdominance.h?ref=53c55d3204a69c4cce4cc5a982c42cec91178346", "patch": "@@ -50,10 +50,10 @@ extern auto_vec<basic_block> get_dominated_by (enum cdi_direction, basic_block);\n extern auto_vec<basic_block> get_dominated_by_region (enum cdi_direction,\n \t\t\t\t\t\t\t basic_block *,\n \t\t\t\t\t\t\t unsigned);\n-extern vec<basic_block> get_dominated_to_depth (enum cdi_direction,\n-\t\t\t\t\t\t\tbasic_block, int);\n-extern vec<basic_block> get_all_dominated_blocks (enum cdi_direction,\n-\t\t\t\t\t\t\t  basic_block);\n+extern auto_vec<basic_block> get_dominated_to_depth (enum cdi_direction,\n+\t\t\t\t\t\t     basic_block, int);\n+extern auto_vec<basic_block> get_all_dominated_blocks (enum cdi_direction,\n+\t\t\t\t\t\t       basic_block);\n extern void redirect_immediate_dominators (enum cdi_direction, basic_block,\n \t\t\t\t\t   basic_block);\n extern basic_block nearest_common_dominator (enum cdi_direction,"}, {"sha": "ecf7e51aac535634834a973a8e8379e006310bae", "filename": "gcc/gcse.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53c55d3204a69c4cce4cc5a982c42cec91178346/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53c55d3204a69c4cce4cc5a982c42cec91178346/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=53c55d3204a69c4cce4cc5a982c42cec91178346", "patch": "@@ -3050,9 +3050,7 @@ static int\n hoist_code (void)\n {\n   basic_block bb, dominated;\n-  vec<basic_block> dom_tree_walk;\n   unsigned int dom_tree_walk_index;\n-  vec<basic_block> domby;\n   unsigned int i, j, k;\n   struct gcse_expr **index_map;\n   struct gcse_expr *expr;\n@@ -3106,15 +3104,16 @@ hoist_code (void)\n   if (flag_ira_hoist_pressure)\n     hoisted_bbs = BITMAP_ALLOC (NULL);\n \n-  dom_tree_walk = get_all_dominated_blocks (CDI_DOMINATORS,\n-\t\t\t\t\t    ENTRY_BLOCK_PTR_FOR_FN (cfun)->next_bb);\n+  auto_vec<basic_block> dom_tree_walk\n+  = get_all_dominated_blocks (CDI_DOMINATORS,\n+\t\t\t      ENTRY_BLOCK_PTR_FOR_FN (cfun)->next_bb);\n \n   /* Walk over each basic block looking for potentially hoistable\n      expressions, nothing gets hoisted from the entry block.  */\n   FOR_EACH_VEC_ELT (dom_tree_walk, dom_tree_walk_index, bb)\n     {\n-      domby = get_dominated_to_depth (CDI_DOMINATORS, bb,\n-\t\t\t\t      param_max_hoist_depth);\n+      auto_vec<basic_block> domby\n+\t= get_dominated_to_depth (CDI_DOMINATORS, bb, param_max_hoist_depth);\n \n       if (domby.length () == 0)\n \tcontinue;\n@@ -3315,10 +3314,8 @@ hoist_code (void)\n \t      bitmap_clear (from_bbs);\n \t    }\n \t}\n-      domby.release ();\n     }\n \n-  dom_tree_walk.release ();\n   BITMAP_FREE (from_bbs);\n   if (flag_ira_hoist_pressure)\n     BITMAP_FREE (hoisted_bbs);"}, {"sha": "4c32f83257f3284d3413904c2c5a8332db482f3f", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53c55d3204a69c4cce4cc5a982c42cec91178346/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53c55d3204a69c4cce4cc5a982c42cec91178346/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=53c55d3204a69c4cce4cc5a982c42cec91178346", "patch": "@@ -8683,7 +8683,6 @@ gimple_flow_call_edges_add (sbitmap blocks)\n void\n remove_edge_and_dominated_blocks (edge e)\n {\n-  vec<basic_block> bbs_to_remove = vNULL;\n   vec<basic_block> bbs_to_fix_dom = vNULL;\n   edge f;\n   edge_iterator ei;\n@@ -8734,6 +8733,7 @@ remove_edge_and_dominated_blocks (edge e)\n     }\n \n   auto_bitmap df, df_idom;\n+  auto_vec<basic_block> bbs_to_remove;\n   if (none_removed)\n     bitmap_set_bit (df_idom,\n \t\t    get_immediate_dominator (CDI_DOMINATORS, e->dest)->index);\n@@ -8800,7 +8800,6 @@ remove_edge_and_dominated_blocks (edge e)\n \n   iterate_fix_dominators (CDI_DOMINATORS, bbs_to_fix_dom, true);\n \n-  bbs_to_remove.release ();\n   bbs_to_fix_dom.release ();\n }\n "}, {"sha": "fe1baef32a7fef10a260978ba543e83f2d4e174a", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53c55d3204a69c4cce4cc5a982c42cec91178346/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53c55d3204a69c4cce4cc5a982c42cec91178346/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=53c55d3204a69c4cce4cc5a982c42cec91178346", "patch": "@@ -3949,7 +3949,7 @@ oacc_entry_exit_ok (class loop *loop,\n \t\t    reduction_info_table_type *reduction_list)\n {\n   basic_block *loop_bbs = get_loop_body_in_dom_order (loop);\n-  vec<basic_block> region_bbs\n+  auto_vec<basic_block> region_bbs\n     = get_all_dominated_blocks (CDI_DOMINATORS, ENTRY_BLOCK_PTR_FOR_FN (cfun));\n \n   bitmap in_loop_bbs = BITMAP_ALLOC (NULL);\n@@ -3972,7 +3972,6 @@ oacc_entry_exit_ok (class loop *loop,\n \t}\n     }\n \n-  region_bbs.release ();\n   free (loop_bbs);\n \n   BITMAP_FREE (in_loop_bbs);"}, {"sha": "e2d3b63a30c67f21f67c09798bb0509014ee9ef5", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53c55d3204a69c4cce4cc5a982c42cec91178346/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53c55d3204a69c4cce4cc5a982c42cec91178346/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=53c55d3204a69c4cce4cc5a982c42cec91178346", "patch": "@@ -1275,7 +1275,6 @@ eliminate_unnecessary_stmts (void)\n   gimple_stmt_iterator gsi, psi;\n   gimple *stmt;\n   tree call;\n-  vec<basic_block> h;\n   auto_vec<edge> to_remove_edges;\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n@@ -1306,6 +1305,7 @@ eliminate_unnecessary_stmts (void)\n \n      as desired.  */\n   gcc_assert (dom_info_available_p (CDI_DOMINATORS));\n+  auto_vec<basic_block> h;\n   h = get_all_dominated_blocks (CDI_DOMINATORS,\n \t\t\t\tsingle_succ (ENTRY_BLOCK_PTR_FOR_FN (cfun)));\n \n@@ -1460,7 +1460,6 @@ eliminate_unnecessary_stmts (void)\n       something_changed |= remove_dead_phis (bb);\n     }\n \n-  h.release ();\n \n   /* Since we don't track liveness of virtual PHI nodes, it is possible that we\n      rendered some PHI nodes unreachable while they are still in use."}, {"sha": "78b0461c839d7787bcaf31dd55c0c385f4d79caa", "filename": "gcc/tree-ssa-phiprop.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53c55d3204a69c4cce4cc5a982c42cec91178346/gcc%2Ftree-ssa-phiprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53c55d3204a69c4cce4cc5a982c42cec91178346/gcc%2Ftree-ssa-phiprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiprop.c?ref=53c55d3204a69c4cce4cc5a982c42cec91178346", "patch": "@@ -484,7 +484,6 @@ class pass_phiprop : public gimple_opt_pass\n unsigned int\n pass_phiprop::execute (function *fun)\n {\n-  vec<basic_block> bbs;\n   struct phiprop_d *phivn;\n   bool did_something = false;\n   basic_block bb;\n@@ -499,8 +498,9 @@ pass_phiprop::execute (function *fun)\n   phivn = XCNEWVEC (struct phiprop_d, n);\n \n   /* Walk the dominator tree in preorder.  */\n-  bbs = get_all_dominated_blocks (CDI_DOMINATORS,\n-\t\t\t\t  single_succ (ENTRY_BLOCK_PTR_FOR_FN (fun)));\n+  auto_vec<basic_block> bbs\n+  = get_all_dominated_blocks (CDI_DOMINATORS,\n+\t\t\t      single_succ (ENTRY_BLOCK_PTR_FOR_FN (fun)));\n   FOR_EACH_VEC_ELT (bbs, i, bb)\n     {\n       /* Since we're going to move dereferences across predecessor\n@@ -514,7 +514,6 @@ pass_phiprop::execute (function *fun)\n   if (did_something)\n     gsi_commit_edge_inserts ();\n \n-  bbs.release ();\n   free (phivn);\n \n   free_dominance_info (CDI_POST_DOMINATORS);"}]}