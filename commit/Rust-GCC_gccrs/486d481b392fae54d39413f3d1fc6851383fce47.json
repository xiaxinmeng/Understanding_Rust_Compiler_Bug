{"sha": "486d481b392fae54d39413f3d1fc6851383fce47", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg2ZDQ4MWIzOTJmYWU1NGQzOTQxM2YzZDFmYzY4NTEzODNmY2U0Nw==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2011-05-14T18:13:23Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-05-14T18:13:23Z"}, "message": "Implement final on class.\n\n\t* class.c (check_bases): Diagnose derivation from a final class.\n\t* cp-tree.h (lang_type_class): Add is_final and adjust dummy.\n\t(CLASSTYPE_FINAL): New.\n\t* parser.c (cp_parser_class_head): Parse class-virt-specifier, set\n\tCLASSTYPE_FINAL.\n\t* pt.c (instantiate_class_template_1): Copy CLASSTYPE_FINAL.\n\nFrom-SVN: r173761", "tree": {"sha": "6e71c4f8224656772ee33335e93d1fb8eb7d983e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e71c4f8224656772ee33335e93d1fb8eb7d983e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/486d481b392fae54d39413f3d1fc6851383fce47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/486d481b392fae54d39413f3d1fc6851383fce47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/486d481b392fae54d39413f3d1fc6851383fce47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/486d481b392fae54d39413f3d1fc6851383fce47/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ade2e40389bd3c76031c486991005ffffa1493bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ade2e40389bd3c76031c486991005ffffa1493bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ade2e40389bd3c76031c486991005ffffa1493bf"}], "stats": {"total": 97, "additions": 93, "deletions": 4}, "files": [{"sha": "f0371ad8b0164459494d3e942fe979dbe35c7f14", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/486d481b392fae54d39413f3d1fc6851383fce47/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/486d481b392fae54d39413f3d1fc6851383fce47/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=486d481b392fae54d39413f3d1fc6851383fce47", "patch": "@@ -1,3 +1,13 @@\n+2011-05-13  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tImplement final on class.\n+\t* class.c (check_bases): Diagnose derivation from a final class.\n+\t* cp-tree.h (lang_type_class): Add is_final and adjust dummy.\n+\t(CLASSTYPE_FINAL): New.\n+\t* parser.c (cp_parser_class_head): Parse class-virt-specifier, set\n+\tCLASSTYPE_FINAL.\n+\t* pt.c (instantiate_class_template_1): Copy CLASSTYPE_FINAL.\n+\n 2011-05-13  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/48969"}, {"sha": "dc2c509a8cf29feaef4cc905d8f7ab3e158f08ec", "filename": "gcc/cp/class.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/486d481b392fae54d39413f3d1fc6851383fce47/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/486d481b392fae54d39413f3d1fc6851383fce47/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=486d481b392fae54d39413f3d1fc6851383fce47", "patch": "@@ -1268,6 +1268,10 @@ check_bases (tree t,\n \n       gcc_assert (COMPLETE_TYPE_P (basetype));\n \n+      if (CLASSTYPE_FINAL (basetype))\n+        error (\"cannot derive from %<final%> base %qT in derived type %qT\",\n+               basetype, t);\n+\n       /* If any base class is non-literal, so is the derived class.  */\n       if (!CLASSTYPE_LITERAL_P (basetype))\n         CLASSTYPE_LITERAL_P (t) = false;"}, {"sha": "c0b52908883b6924514c0990c17a8a22544bc3c6", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/486d481b392fae54d39413f3d1fc6851383fce47/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/486d481b392fae54d39413f3d1fc6851383fce47/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=486d481b392fae54d39413f3d1fc6851383fce47", "patch": "@@ -1322,6 +1322,7 @@ struct GTY(()) lang_type_class {\n   unsigned has_complex_move_ctor : 1;\n   unsigned has_complex_move_assign : 1;\n   unsigned has_constexpr_ctor : 1;\n+  unsigned is_final : 1;\n \n   /* When adding a flag here, consider whether or not it ought to\n      apply to a template instance if it applies to the template.  If\n@@ -1330,7 +1331,7 @@ struct GTY(()) lang_type_class {\n   /* There are some bits left to fill out a 32-bit word.  Keep track\n      of this by updating the size of this bitfield whenever you add or\n      remove a flag.  */\n-  unsigned dummy : 3;\n+  unsigned dummy : 2;\n \n   tree primary_base;\n   VEC(tree_pair_s,gc) *vcall_indices;\n@@ -1438,6 +1439,11 @@ struct GTY((variable_size)) lang_type {\n #define CLASSTYPE_LAZY_DESTRUCTOR(NODE) \\\n   (LANG_TYPE_CLASS_CHECK (NODE)->lazy_destructor)\n \n+/* Nonzero means that NODE (a class type) is final */\n+#define CLASSTYPE_FINAL(NODE) \\\n+  (LANG_TYPE_CLASS_CHECK (NODE)->is_final)\n+\n+\n /* Nonzero means that this _CLASSTYPE node overloads operator=(X&).  */\n #define TYPE_HAS_COPY_ASSIGN(NODE) (LANG_TYPE_CLASS_CHECK (NODE)->has_copy_assign)\n "}, {"sha": "a77d4ffb6ac4508b1e2556964e129f5de2a5ad56", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/486d481b392fae54d39413f3d1fc6851383fce47/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/486d481b392fae54d39413f3d1fc6851383fce47/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=486d481b392fae54d39413f3d1fc6851383fce47", "patch": "@@ -17082,10 +17082,13 @@ cp_parser_class_specifier (cp_parser* parser)\n \n    class-head:\n      class-key identifier [opt] base-clause [opt]\n-     class-key nested-name-specifier identifier base-clause [opt]\n+     class-key nested-name-specifier identifier class-virt-specifier [opt] base-clause [opt]\n      class-key nested-name-specifier [opt] template-id\n        base-clause [opt]\n \n+   class-virt-specifier:\n+     final\n+\n    GNU Extensions:\n      class-key attributes identifier [opt] base-clause [opt]\n      class-key attributes nested-name-specifier identifier base-clause [opt]\n@@ -17117,6 +17120,7 @@ cp_parser_class_head (cp_parser* parser,\n   tree id = NULL_TREE;\n   tree type = NULL_TREE;\n   tree attributes;\n+  cp_virt_specifiers virt_specifiers = VIRT_SPEC_UNSPECIFIED;\n   bool template_id_p = false;\n   bool qualified_p = false;\n   bool invalid_nested_name_p = false;\n@@ -17260,8 +17264,11 @@ cp_parser_class_head (cp_parser* parser,\n   pop_deferring_access_checks ();\n \n   if (id)\n-    cp_parser_check_for_invalid_template_id (parser, id,\n-\t\t\t\t\t     type_start_token->location);\n+    {\n+      cp_parser_check_for_invalid_template_id (parser, id,\n+                                               type_start_token->location);\n+      virt_specifiers = cp_parser_virt_specifier_seq_opt (parser);\n+    }\n \n   /* If it's not a `:' or a `{' then we can't really be looking at a\n      class-head, since a class-head only appears as part of a\n@@ -17277,6 +17284,13 @@ cp_parser_class_head (cp_parser* parser,\n   /* At this point, we're going ahead with the class-specifier, even\n      if some other problem occurs.  */\n   cp_parser_commit_to_tentative_parse (parser);\n+  if (virt_specifiers & VIRT_SPEC_OVERRIDE)\n+    {\n+      cp_parser_error (parser,\n+                       \"cannot specify %<override%> for a class\");\n+      type = error_mark_node;\n+      goto out;\n+    }\n   /* Issue the error about the overly-qualified name now.  */\n   if (qualified_p)\n     {\n@@ -17493,6 +17507,8 @@ cp_parser_class_head (cp_parser* parser,\n   if (type)\n     DECL_SOURCE_LOCATION (TYPE_NAME (type)) = type_start_token->location;\n   *attributes_p = attributes;\n+  if (type && (virt_specifiers & VIRT_SPEC_FINAL))\n+    CLASSTYPE_FINAL (type) = 1;\n  out:\n   parser->colon_corrects_to_scope_p = saved_colon_corrects_to_scope_p;\n   return type;"}, {"sha": "e441a706d653b386caa2c8188af0f3068484ef63", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/486d481b392fae54d39413f3d1fc6851383fce47/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/486d481b392fae54d39413f3d1fc6851383fce47/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=486d481b392fae54d39413f3d1fc6851383fce47", "patch": "@@ -8209,6 +8209,7 @@ instantiate_class_template_1 (tree type)\n       CLASSTYPE_VISIBILITY_SPECIFIED (type) = 1;\n       CLASSTYPE_VISIBILITY (type) = CLASSTYPE_VISIBILITY (pattern);\n     }\n+  CLASSTYPE_FINAL (type) = CLASSTYPE_FINAL (pattern);\n \n   pbinfo = TYPE_BINFO (pattern);\n "}, {"sha": "b7a8f50d593cd31c5eea9cb3dde4ea3a47a3e4ca", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/486d481b392fae54d39413f3d1fc6851383fce47/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/486d481b392fae54d39413f3d1fc6851383fce47/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=486d481b392fae54d39413f3d1fc6851383fce47", "patch": "@@ -1,3 +1,8 @@\n+2011-05-13  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\t* g++.dg/cpp0x/override1.C: Move from inherit/virtual9.C.\n+\t* g++.dg/cpp0x/override2.C: New.\n+\n 2011-05-14  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/18918"}, {"sha": "83e04790873f770bb0946af5db1f11681d195d77", "filename": "gcc/testsuite/g++.dg/cpp0x/override1.C", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/486d481b392fae54d39413f3d1fc6851383fce47/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverride1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/486d481b392fae54d39413f3d1fc6851383fce47/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverride1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverride1.C?ref=486d481b392fae54d39413f3d1fc6851383fce47", "previous_filename": "gcc/testsuite/g++.dg/inherit/virtual9.C"}, {"sha": "7f17504fae20d34dd85e701a6eff555bec6a4350", "filename": "gcc/testsuite/g++.dg/cpp0x/override2.C", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/486d481b392fae54d39413f3d1fc6851383fce47/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverride2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/486d481b392fae54d39413f3d1fc6851383fce47/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverride2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverride2.C?ref=486d481b392fae54d39413f3d1fc6851383fce47", "patch": "@@ -0,0 +1,47 @@\n+// { dg-do compile }\n+// { dg-options \"--std=c++0x\" }\n+struct B1 {};\n+\n+struct B2 final {};\n+\n+struct D1 : B1 {};\n+\n+struct D2 : B2 {}; // { dg-error \"cannot derive from 'final' base\" }\n+\n+template<class T> struct D3 : T {};\n+\n+template<class T> struct D4 : T {}; // { dg-error \"cannot derive from 'final' base\" }\n+\n+template <class T> struct B3 {};\n+\n+template <class T> struct B4 final {};\n+\n+template <class T> struct B5 final {};\n+\n+struct undeclared<int> final { }; // { dg-error \"not a template\" }\n+\n+struct D5 : B3<D5> {};\n+\n+struct D6 : B4<D6> {}; // { dg-error \"cannot derive from 'final' base\" }\n+\n+struct B6 final final {}; // { dg-error \"duplicate virt-specifier\" }\n+\n+struct B7 override {}; // { dg-error \"cannot specify 'override' for a class\" }\n+\n+int main()\n+{\n+  D3<B1> d;\n+  D4<B2> d2;\n+  struct B2 final{}; // { dg-error \"previous definition\" }\n+  B2 final; // { dg-error \"has a previous declaration|previously declared here\" }\n+  B2 final2 = final;\n+  struct B2 {}; // { dg-error \"redefinition\" }\n+  struct B2 final; // { dg-error \"redeclaration\" }\n+  struct B2 override; // { dg-error \"previously declared here\" }\n+  struct B2 final {}; // { dg-error \"redefinition\" }\n+  struct B2 override {}; // { dg-error \"cannot specify 'override' for a class\" }\n+  B2 override{}; // { dg-error \"redeclaration\" }\n+  struct foo final {}; // { dg-error \"previous definition\" }\n+  struct foo final {}; // { dg-error \"redefinition\" }\n+  foo final; // { dg-error \"conflicting declaration\" }\n+}"}]}