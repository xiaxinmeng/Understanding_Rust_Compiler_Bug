{"sha": "0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRhODBkN2RiYmJkOGU3NzJjZjMwZjg4NjZiNGZkYzAyY2I5YzY0Zg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-05T13:51:33Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-05T13:51:33Z"}, "message": "[multiple changes]\n\n2011-08-05  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch7.adb (Is_Init_Call): Reimplemented to avoid character\n\tcomparison and rely on concrete entities instead.\n\n2011-08-05  Ed Schonberg  <schonberg@adacore.com>\n\n\t* einfo.ads, einfo.adb (Has_Implicit_Dereference): new flag on types\n\tand discriminants, to indicate that the type has an access discriminant\n\tthat supports implicit dereference.\n\t* snames.ads-tmpl: Add names of aspects and attributes related to\n\tAda2012 iterators: constant_indexing, default_iterator,\n\titerator_element, implicit_dereference, variable_indexing.\n\t* aspects.ads, aspects.adb: entries for iterator-related aspects.\n\t* sem_ch13.adb (Analyze_aspect_specifications): dummy entries for\n\titerator-related aspects.\n\t* sem_attr.adb, exp_attr.adb Dummy entries for iterator-related aspects.\n\n2011-08-05  Sergey Rybin  <rybin@adacore.com>\n\n\t* gnat_ugn.texi, vms_data.ads: Extend the subsection about coupling\n\tmetrics in gnatmetric to cover new kinds of coupling mentrics.\n\n2011-08-05  Steve Baird  <baird@adacore.com>\n\n\t* bindgen.adb (Gen_CodePeer_Wrapper): Call Ada_Main_Program instead\n\tof calling the user-defined main subprogram. \n\t(Gen_Main):  Declare Ada_Main_Program and (if CodePeer_Mode\n\tis set) Call_Main_Subprogram ahead of, as opposed to\n\tinside of, Main.\n\t(Gen_Output_File_Ada): Remove CodePeer_Mode-conditional\n\tgeneration of a \"with\" of the user-defined main subprogram.\n\tRemove CodePeer_Mode-conditional call to Gen_CodePeer_Wrapper\n\t(which is now called from Gen_Main instead).\n\nFrom-SVN: r177436", "tree": {"sha": "5544d8f20cf86096570992334334c7b367abf57a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5544d8f20cf86096570992334334c7b367abf57a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f/comments", "author": null, "committer": null, "parents": [{"sha": "7324247364df0b8e4be9038eea1d8cfc032de677", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7324247364df0b8e4be9038eea1d8cfc032de677", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7324247364df0b8e4be9038eea1d8cfc032de677"}], "stats": {"total": 523, "additions": 360, "deletions": 163}, "files": [{"sha": "a1ba74ccab5d99e845a772c380351e0240700977", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f", "patch": "@@ -1,3 +1,38 @@\n+2011-08-05  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch7.adb (Is_Init_Call): Reimplemented to avoid character\n+\tcomparison and rely on concrete entities instead.\n+\n+2011-08-05  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* einfo.ads, einfo.adb (Has_Implicit_Dereference): new flag on types\n+\tand discriminants, to indicate that the type has an access discriminant\n+\tthat supports implicit dereference.\n+\t* snames.ads-tmpl: Add names of aspects and attributes related to\n+\tAda2012 iterators: constant_indexing, default_iterator,\n+\titerator_element, implicit_dereference, variable_indexing.\n+\t* aspects.ads, aspects.adb: entries for iterator-related aspects.\n+\t* sem_ch13.adb (Analyze_aspect_specifications): dummy entries for\n+\titerator-related aspects.\n+\t* sem_attr.adb, exp_attr.adb Dummy entries for iterator-related aspects.\n+\n+2011-08-05  Sergey Rybin  <rybin@adacore.com>\n+\n+\t* gnat_ugn.texi, vms_data.ads: Extend the subsection about coupling\n+\tmetrics in gnatmetric to cover new kinds of coupling mentrics.\n+\n+2011-08-05  Steve Baird  <baird@adacore.com>\n+\n+\t* bindgen.adb (Gen_CodePeer_Wrapper): Call Ada_Main_Program instead\n+\tof calling the user-defined main subprogram. \n+\t(Gen_Main):  Declare Ada_Main_Program and (if CodePeer_Mode\n+\tis set) Call_Main_Subprogram ahead of, as opposed to\n+\tinside of, Main.\n+\t(Gen_Output_File_Ada): Remove CodePeer_Mode-conditional\n+\tgeneration of a \"with\" of the user-defined main subprogram.\n+\tRemove CodePeer_Mode-conditional call to Gen_CodePeer_Wrapper\n+\t(which is now called from Gen_Main instead).\n+\n 2011-08-05  Emmanuel Briot  <briot@adacore.com>\n \n \t* projects.texi: Added reference to the Makefile package."}, {"sha": "82649db56ab40abe7be023646834d9864fba549d", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f", "patch": "@@ -179,14 +179,18 @@ package body Aspects is\n     Aspect_Atomic_Components            => Aspect_Atomic_Components,\n     Aspect_Bit_Order                    => Aspect_Bit_Order,\n     Aspect_Component_Size               => Aspect_Component_Size,\n+    Aspect_Constant_Indexing            => Aspect_Constant_Indexing,\n     Aspect_Default_Component_Value      => Aspect_Default_Component_Value,\n+    Aspect_Default_Iterator             => Aspect_Default_Iterator,\n     Aspect_Default_Value                => Aspect_Default_Value,\n     Aspect_Discard_Names                => Aspect_Discard_Names,\n     Aspect_Dynamic_Predicate            => Aspect_Predicate,\n     Aspect_External_Tag                 => Aspect_External_Tag,\n     Aspect_Favor_Top_Level              => Aspect_Favor_Top_Level,\n+    Aspect_Implicit_Dereference         => Aspect_Implicit_Dereference,\n     Aspect_Inline                       => Aspect_Inline,\n     Aspect_Inline_Always                => Aspect_Inline,\n+    Aspect_Iterator_Element             => Aspect_Iterator_Element,\n     Aspect_All_Calls_Remote             => Aspect_All_Calls_Remote,\n     Aspect_Compiler_Unit                => Aspect_Compiler_Unit,\n     Aspect_Elaborate_Body               => Aspect_Elaborate_Body,\n@@ -230,6 +234,7 @@ package body Aspects is\n     Aspect_Unreferenced                 => Aspect_Unreferenced,\n     Aspect_Unreferenced_Objects         => Aspect_Unreferenced_Objects,\n     Aspect_Unsuppress                   => Aspect_Unsuppress,\n+    Aspect_Variable_Indexing            => Aspect_Variable_Indexing,\n     Aspect_Value_Size                   => Aspect_Value_Size,\n     Aspect_Volatile                     => Aspect_Volatile,\n     Aspect_Volatile_Components          => Aspect_Volatile_Components,"}, {"sha": "af4448f3ce95e85b9986e50ccb60f2a04611c4f2", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f", "patch": "@@ -48,12 +48,16 @@ package Aspects is\n       Aspect_Alignment,\n       Aspect_Bit_Order,\n       Aspect_Component_Size,\n+      Aspect_Constant_Indexing,\n       Aspect_Default_Component_Value,\n+      Aspect_Default_Iterator,\n       Aspect_Default_Value,\n       Aspect_Dynamic_Predicate,\n       Aspect_External_Tag,\n+      Aspect_Implicit_Dereference,\n       Aspect_Input,\n       Aspect_Invariant,\n+      Aspect_Iterator_Element,\n       Aspect_Machine_Radix,\n       Aspect_Object_Size,                   -- GNAT\n       Aspect_Output,\n@@ -73,6 +77,7 @@ package Aspects is\n       Aspect_Type_Invariant,\n       Aspect_Unsuppress,\n       Aspect_Value_Size,                    -- GNAT\n+      Aspect_Variable_Indexing,\n       Aspect_Warnings,\n       Aspect_Write,\n \n@@ -172,12 +177,16 @@ package Aspects is\n                         Aspect_Alignment               => Expression,\n                         Aspect_Bit_Order               => Expression,\n                         Aspect_Component_Size          => Expression,\n+                        Aspect_Constant_Indexing       => Name,\n                         Aspect_Default_Component_Value => Expression,\n+                        Aspect_Default_Iterator        => Name,\n                         Aspect_Default_Value           => Expression,\n                         Aspect_Dynamic_Predicate       => Expression,\n                         Aspect_External_Tag            => Expression,\n+                        Aspect_Implicit_Dereference    => Name,\n                         Aspect_Input                   => Name,\n                         Aspect_Invariant               => Expression,\n+                        Aspect_Iterator_Element        => Name,\n                         Aspect_Machine_Radix           => Expression,\n                         Aspect_Object_Size             => Expression,\n                         Aspect_Output                  => Name,\n@@ -197,6 +206,7 @@ package Aspects is\n                         Aspect_Type_Invariant          => Expression,\n                         Aspect_Unsuppress              => Name,\n                         Aspect_Value_Size              => Expression,\n+                        Aspect_Variable_Indexing       => Name,\n                         Aspect_Warnings                => Name,\n                         Aspect_Write                   => Name,\n \n@@ -221,17 +231,21 @@ package Aspects is\n      Aspect_Bit_Order                    => Name_Bit_Order,\n      Aspect_Compiler_Unit                => Name_Compiler_Unit,\n      Aspect_Component_Size               => Name_Component_Size,\n+     Aspect_Constant_Indexing            => Name_Constant_Indexing,\n+     Aspect_Default_Iterator             => Name_Default_Iterator,\n      Aspect_Default_Value                => Name_Default_Value,\n      Aspect_Default_Component_Value      => Name_Default_Component_Value,\n      Aspect_Discard_Names                => Name_Discard_Names,\n      Aspect_Dynamic_Predicate            => Name_Dynamic_Predicate,\n      Aspect_Elaborate_Body               => Name_Elaborate_Body,\n      Aspect_External_Tag                 => Name_External_Tag,\n      Aspect_Favor_Top_Level              => Name_Favor_Top_Level,\n+     Aspect_Implicit_Dereference         => Name_Implicit_Dereference,\n      Aspect_Inline                       => Name_Inline,\n      Aspect_Inline_Always                => Name_Inline_Always,\n      Aspect_Input                        => Name_Input,\n      Aspect_Invariant                    => Name_Invariant,\n+     Aspect_Iterator_Element             => Name_Iterator_Element,\n      Aspect_Machine_Radix                => Name_Machine_Radix,\n      Aspect_No_Return                    => Name_No_Return,\n      Aspect_Object_Size                  => Name_Object_Size,\n@@ -271,6 +285,7 @@ package Aspects is\n      Aspect_Unreferenced_Objects         => Name_Unreferenced_Objects,\n      Aspect_Unsuppress                   => Name_Unsuppress,\n      Aspect_Value_Size                   => Name_Value_Size,\n+     Aspect_Variable_Indexing            => Name_Variable_Indexing,\n      Aspect_Volatile                     => Name_Volatile,\n      Aspect_Volatile_Components          => Name_Volatile_Components,\n      Aspect_Warnings                     => Name_Warnings,"}, {"sha": "856a4de1a6ce581f77ff5a487ea65147e9b7e10f", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 54, "deletions": 80, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f", "patch": "@@ -928,28 +928,18 @@ package body Bindgen is\n    --------------------------\n \n    procedure Gen_CodePeer_Wrapper is\n+      Callee_Name : constant String := \"Ada_Main_Program\";\n    begin\n-      Get_Name_String (Units.Table (First_Unit_Entry).Uname);\n-\n-      declare\n-         --  Bypass Ada_Main_Program; its Import pragma confuses CodePeer\n-\n-         Callee_Name : String renames Name_Buffer (1 .. Name_Len - 2);\n-         --  Strip trailing \"%b\"\n-\n-      begin\n-         if ALIs.Table (ALIs.First).Main_Program = Proc then\n-            WBI (\"   procedure \" & CodePeer_Wrapper_Name & \" is \");\n-            WBI (\"   begin\");\n-            WBI (\"      \" & Callee_Name & \";\");\n+      if ALIs.Table (ALIs.First).Main_Program = Proc then\n+         WBI (\"   procedure \" & CodePeer_Wrapper_Name & \" is \");\n+         WBI (\"   begin\");\n+         WBI (\"      \" & Callee_Name & \";\");\n \n-         else\n-            WBI\n-              (\"   function \" & CodePeer_Wrapper_Name & \" return Integer is\");\n-            WBI (\"   begin\");\n-            WBI (\"      return \" & Callee_Name & \";\");\n-         end if;\n-      end;\n+      else\n+         WBI (\"   function \" & CodePeer_Wrapper_Name & \" return Integer is\");\n+         WBI (\"   begin\");\n+         WBI (\"      return \" & Callee_Name & \";\");\n+      end if;\n \n       WBI (\"   end \" & CodePeer_Wrapper_Name & \";\");\n       WBI (\"\");\n@@ -1481,6 +1471,42 @@ package body Bindgen is\n \n    procedure Gen_Main is\n    begin\n+      if not No_Main_Subprogram then\n+         --  To call the main program, we declare it using a pragma Import\n+         --  Ada with the right link name.\n+\n+         --  It might seem more obvious to \"with\" the main program, and call\n+         --  it in the normal Ada manner. We do not do this for three\n+         --  reasons:\n+\n+         --    1. It is more efficient not to recompile the main program\n+         --    2. We are not entitled to assume the source is accessible\n+         --    3. We don't know what options to use to compile it\n+\n+         --  It is really reason 3 that is most critical (indeed we used\n+         --  to generate the \"with\", but several regression tests failed).\n+\n+         if ALIs.Table (ALIs.First).Main_Program = Func then\n+            WBI (\"   function Ada_Main_Program return Integer;\");\n+\n+         else\n+            WBI (\"   procedure Ada_Main_Program;\");\n+         end if;\n+\n+         Set_String (\"   pragma Import (Ada, Ada_Main_Program, \"\"\");\n+         Get_Name_String (Units.Table (First_Unit_Entry).Uname);\n+         Set_Main_Program_Name;\n+         Set_String (\"\"\");\");\n+\n+         Write_Statement_Buffer;\n+         WBI (\"\");\n+\n+         --  For CodePeer, declare a wrapper for the user-defined main program\n+         if CodePeer_Mode then\n+            Gen_CodePeer_Wrapper;\n+         end if;\n+      end if;\n+\n       if Exit_Status_Supported_On_Target then\n          Set_String (\"   function \");\n       else\n@@ -1551,51 +1577,17 @@ package body Bindgen is\n       --  Deal with declarations for main program case\n \n       if not No_Main_Subprogram then\n-         if CodePeer_Mode then\n-            if ALIs.Table (ALIs.First).Main_Program = Func then\n-               WBI (\"      Result : Integer;\");\n-            end if;\n-\n-         else\n-            --  To call the main program, we declare it using a pragma Import\n-            --  Ada with the right link name.\n-\n-            --  It might seem more obvious to \"with\" the main program, and call\n-            --  it in the normal Ada manner. We do not do this for three\n-            --  reasons:\n-\n-            --    1. It is more efficient not to recompile the main program\n-            --    2. We are not entitled to assume the source is accessible\n-            --    3. We don't know what options to use to compile it\n-\n-            --  It is really reason 3 that is most critical (indeed we used\n-            --  to generate the \"with\", but several regression tests failed).\n-\n+         if ALIs.Table (ALIs.First).Main_Program = Func then\n+            WBI (\"      Result : Integer;\");\n             WBI (\"\");\n+         end if;\n \n-            if ALIs.Table (ALIs.First).Main_Program = Func then\n-               WBI (\"      Result : Integer;\");\n-               WBI (\"\");\n-               WBI (\"      function Ada_Main_Program return Integer;\");\n-\n-            else\n-               WBI (\"      procedure Ada_Main_Program;\");\n-            end if;\n-\n-            Set_String (\"      pragma Import (Ada, Ada_Main_Program, \"\"\");\n-            Get_Name_String (Units.Table (First_Unit_Entry).Uname);\n-            Set_Main_Program_Name;\n-            Set_String (\"\"\");\");\n-\n-            Write_Statement_Buffer;\n+         if Bind_Main_Program\n+           and then not Suppress_Standard_Library_On_Target\n+           and then not CodePeer_Mode\n+         then\n+            WBI (\"      SEH : aliased array (1 .. 2) of Integer;\");\n             WBI (\"\");\n-\n-            if Bind_Main_Program\n-              and then not Suppress_Standard_Library_On_Target\n-            then\n-               WBI (\"      SEH : aliased array (1 .. 2) of Integer;\");\n-               WBI (\"\");\n-            end if;\n          end if;\n       end if;\n \n@@ -2310,17 +2302,6 @@ package body Bindgen is\n          WBI (\"with Ada.Exceptions;\");\n       end if;\n \n-      if CodePeer_Mode then\n-\n-         --  For CodePeer, main program is not called via an Import pragma\n-\n-         Get_Name_String (Units.Table (First_Unit_Entry).Uname);\n-\n-         --  Note: trailing \"%b\" is stripped.\n-\n-         WBI (\"with \" & Name_Buffer (1 .. Name_Len - 2) & \";\");\n-      end if;\n-\n       WBI (\"\");\n       WBI (\"package body \" & Ada_Main & \" is\");\n       WBI (\"   pragma Warnings (Off);\");\n@@ -2379,13 +2360,6 @@ package body Bindgen is\n       Gen_Adainit;\n \n       if Bind_Main_Program and then VM_Target = No_VM then\n-\n-         --  For CodePeer, declare a wrapper for the user-defined main program\n-\n-         if CodePeer_Mode then\n-            Gen_CodePeer_Wrapper;\n-         end if;\n-\n          Gen_Main;\n       end if;\n "}, {"sha": "b10b4267a426bbca17884e26880d0b4a823088d8", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f", "patch": "@@ -522,8 +522,7 @@ package body Einfo is\n    --    Is_Processed_Transient          Flag252\n    --    Is_Postcondition_Proc           Flag253\n \n-   --    (unused)                        Flag151\n-   --    (unused)                        Flag251\n+   --    (Has_Implicit_Dereference)      Flag251\n    --    (unused)                        Flag254\n \n    -----------------------\n@@ -1308,6 +1307,11 @@ package body Einfo is\n       return Flag56 (Id);\n    end Has_Homonym;\n \n+   function Has_Implicit_Dereference (Id : E) return B is\n+   begin\n+      return Flag251 (Id);\n+   end Has_Implicit_Dereference;\n+\n    function Has_Inheritable_Invariants (Id : E) return B is\n    begin\n       pragma Assert (Is_Type (Id));\n@@ -3795,6 +3799,11 @@ package body Einfo is\n       Set_Flag56 (Id, V);\n    end Set_Has_Homonym;\n \n+   procedure Set_Has_Implicit_Dereference (Id : E; V : B := True) is\n+   begin\n+      Set_Flag251 (Id, V);\n+   end Set_Has_Implicit_Dereference;\n+\n    procedure Set_Has_Inheritable_Invariants (Id : E; V : B := True) is\n    begin\n       pragma Assert (Is_Type (Id));\n@@ -7429,6 +7438,7 @@ package body Einfo is\n       W (\"Has_Fully_Qualified_Name\",        Flag173 (Id));\n       W (\"Has_Gigi_Rep_Item\",               Flag82  (Id));\n       W (\"Has_Homonym\",                     Flag56  (Id));\n+      W (\"Has_Implicit_Dereference\",        Flag251 (Id));\n       W (\"Has_Inheritable_Invariants\",      Flag248 (Id));\n       W (\"Has_Initial_Value\",               Flag219 (Id));\n       W (\"Has_Invariants\",                  Flag232 (Id));"}, {"sha": "2b82567667e79ac4ed2743a116ce58fc47a35348", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f", "patch": "@@ -1508,6 +1508,11 @@ package Einfo is\n --       Present in all entities. Set if an entity has a homonym in the same\n --       scope. Used by Gigi to generate unique names for such entities.\n \n+--    Has_Implicit_Dereference (Flag251)\n+--       Present in types and discriminants. Set if the type has an aspect\n+--       Implicit_Dereference. Set also on the discriminant named in the aspect\n+--       clause, to simplify type resolution.\n+\n --    Has_Initial_Value (Flag219)\n --       Present in entities for variables and out parameters. Set if there\n --       is an explicit initial value expression in the declaration of the\n@@ -6093,6 +6098,7 @@ package Einfo is\n    function Has_Fully_Qualified_Name            (Id : E) return B;\n    function Has_Gigi_Rep_Item                   (Id : E) return B;\n    function Has_Homonym                         (Id : E) return B;\n+   function Has_Implicit_Dereference            (Id : E) return B;\n    function Has_Inheritable_Invariants          (Id : E) return B;\n    function Has_Initial_Value                   (Id : E) return B;\n    function Has_Invariants                      (Id : E) return B;\n@@ -6680,6 +6686,7 @@ package Einfo is\n    procedure Set_Has_Fully_Qualified_Name        (Id : E; V : B := True);\n    procedure Set_Has_Gigi_Rep_Item               (Id : E; V : B := True);\n    procedure Set_Has_Homonym                     (Id : E; V : B := True);\n+   procedure Set_Has_Implicit_Dereference        (Id : E; V : B := True);\n    procedure Set_Has_Inheritable_Invariants      (Id : E; V : B := True);\n    procedure Set_Has_Initial_Value               (Id : E; V : B := True);\n    procedure Set_Has_Invariants                  (Id : E; V : B := True);\n@@ -7376,6 +7383,7 @@ package Einfo is\n    pragma Inline (Has_Fully_Qualified_Name);\n    pragma Inline (Has_Gigi_Rep_Item);\n    pragma Inline (Has_Homonym);\n+   pragma Inline (Has_Implicit_Dereference);\n    pragma Inline (Has_Inheritable_Invariants);\n    pragma Inline (Has_Initial_Value);\n    pragma Inline (Has_Invariants);\n@@ -7819,6 +7827,7 @@ package Einfo is\n    pragma Inline (Set_Has_Fully_Qualified_Name);\n    pragma Inline (Set_Has_Gigi_Rep_Item);\n    pragma Inline (Set_Has_Homonym);\n+   pragma Inline (Set_Has_Implicit_Dereference);\n    pragma Inline (Set_Has_Inheritable_Invariants);\n    pragma Inline (Set_Has_Initial_Value);\n    pragma Inline (Set_Has_Invariants);"}, {"sha": "c0129d8ab54c83373bcb59883725a398ee71577a", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f", "patch": "@@ -678,6 +678,14 @@ package body Exp_Attr is\n \n       case Id is\n \n+         --  Attributes related to Ada2012 iterators (Placeholder)\n+\n+         when Attribute_Constant_Indexing => null;\n+         when Attribute_Default_Iterator => null;\n+         when Attribute_Implicit_Dereference => null;\n+         when Attribute_Iterator_Element => null;\n+         when Attribute_Variable_Indexing => null;\n+\n       ------------\n       -- Access --\n       ------------"}, {"sha": "1c84e6b94f7dc1e42f24f6cfd94d449d63d302e9", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f", "patch": "@@ -2289,7 +2289,7 @@ package body Exp_Ch7 is\n                  and then Nkind (Name (N)) = N_Identifier\n                then\n                   declare\n-                     Call_Nam  : constant Name_Id := Chars (Entity (Name (N)));\n+                     Call_Ent  : constant Entity_Id := Entity (Name (N));\n                      Deep_Init : constant Entity_Id :=\n                                    TSS (Typ, TSS_Deep_Initialize);\n                      Init      : Entity_Id := Empty;\n@@ -2304,10 +2304,10 @@ package body Exp_Ch7 is\n \n                      return\n                          (Present (Deep_Init)\n-                           and then Chars (Deep_Init) = Call_Nam)\n+                           and then Call_Ent = Deep_Init)\n                        or else\n                          (Present (Init)\n-                           and then Chars (Init) = Call_Nam);\n+                           and then Call_Ent = Init);\n                   end;\n                end if;\n "}, {"sha": "2dedf85bd993839cab090abb19c311a997a25f08", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 108, "deletions": 50, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f", "patch": "@@ -14106,7 +14106,7 @@ explicitly specified metrics are reported.\n * Line Metrics Control::\n * Syntax Metrics Control::\n * Complexity Metrics Control::\n-* Object-Oriented Metrics Control::\n+* Coupling Metrics Control::\n @end menu\n \n @node Line Metrics Control\n@@ -14515,30 +14515,69 @@ Do not report the extra exit points for subprogram bodies\n @end table\n \n \n-@node Object-Oriented Metrics Control\n-@subsubsection Object-Oriented Metrics Control\n-@cindex Object-Oriented metrics control in @command{gnatmetric}\n+@node Coupling Metrics Control\n+@subsubsection Coupling Metrics Control\n+@cindex Coupling metrics control in @command{gnatmetric}\n \n @noindent\n @cindex Coupling metrics (in in @command{gnatmetric})\n-Coupling metrics are object-oriented metrics that measure the\n-dependencies between a given class (or a group of classes) and the\n-``external world'' (that is, the other classes in the program). In this\n-subsection the term ``class'' is used in its\n-traditional object-oriented programming sense\n-(an instantiable module that contains data and/or method members).\n-A @emph{category} (of classes)\n-is a group of closely related classes that are reused and/or\n-modified together.\n-\n-A class @code{K}'s @emph{efferent coupling} is the number of classes\n+Coupling metrics measure the dependencies between a given entity and other\n+entities the program consists of. The goal of these metrics is to estimate the\n+stability of the whole program considered as the collection of entities\n+(modules, classes etc.).\n+\n+Gnatmetric computes the following coupling metrics:\n+\n+@itemize @bullet\n+\n+@item\n+@emph{object-oriented coupling} - for classes in traditional object-oriented\n+sense;\n+\n+@item\n+emph{unit coupling} - for all the program units making up a program;\n+\n+@item\n+emph{control coupling} - this metric counts dependencies between a unit and\n+only those units that define subprograms;\n+@end itemize\n+\n+@noindent\n+Two kinds of coupling metrics are computed:\n+\n+@table @asis\n+@item fan-out coupling (efferent coupling)\n+@cindex fan-out coupling\n+@cindex efferent coupling\n+the number of entities the given entity depends upon. It\n+estimates in what extent the given entity depends on the changes in\n+``external world''\n+\n+@item fan-in coupling (afferent coupling)\n+@cindex fan-in coupling\n+@cindex afferent coupling\n+the number of entities that depend on a given entity.\n+It estimates in what extent the ``external world'' depends on the changes in a\n+given entity\n+@end table\n+\n+@noindent\n+\n+Object-oriented coupling metrics are metrics that measure the dependencies\n+between a given class (or a group of classes) and the other classes in the\n+program. In this subsection the term ``class'' is used in its traditional\n+object-oriented programming sense (an instantiable module that contains data\n+and/or method members). A @emph{category} (of classes) is a group of closely\n+related classes that are reused and/or modified together.\n+\n+A class @code{K}'s fan-out coupling is the number of classes\n that @code{K} depends upon.\n-A category's efferent coupling is the number of classes outside the\n+A category's fan-out coupling is the number of classes outside the\n category that the classes inside the category depend upon.\n \n-A class @code{K}'s @emph{afferent coupling} is the number of classes\n+A class @code{K}'s fan-in coupling is the number of classes\n that depend upon @code{K}.\n-A category's afferent coupling is the number of classes outside the\n+A category's fan-in coupling is the number of classes outside the\n category that depend on classes belonging to the category.\n \n Ada's implementation of the object-oriented paradigm does not use the\n@@ -14552,32 +14591,55 @@ that define a tagged type or an interface type are\n considered to be a class. A category consists of a library package (or\n a library generic package) that defines a tagged or an interface type,\n together with all its descendant (generic) packages that define tagged\n-or interface types. For any package counted as a class,\n-its body and subunits (if any) are considered\n-together with its spec when counting the dependencies, and coupling\n-metrics are reported for spec units only. For dependencies\n-between classes, the Ada semantic dependencies are considered.\n-For coupling metrics, only dependencies on units that are considered as\n-classes, are considered.\n+or interface types. That is a\n+category is an Ada hierarchy of library-level program units. So class coupling\n+in case of Ada is called as tagged coupling, and category coupling - as\n+hierarchy coupling.\n+\n+For any package counted as a class, its body and subunits (if any) are\n+considered together with its spec when counting the dependencies, and coupling\n+metrics are reported for spec units only. For dependencies between classes,\n+the Ada semantic dependencies are considered. For object-oriented coupling\n+metrics, only dependencies on units that are considered as classes, are\n+considered.\n+\n+For unit and control coupling also not compilation units but program units are\n+counted. That is, for a package, its spec, its body and its subunits (if any)\n+are considered as making up one unit, and the dependencies that are counted\n+are the dependencies of all these compilation units collected together as\n+the dependencies as a (whole) unit. And metrics are reported for spec\n+compilation units only (or for a subprogram body unit in case if there is no\n+separate spec for the given subprogram).\n+\n+For unit coupling, dependencies between all kinds of program units are\n+considered. For control coupling, for each unit the dependencies of this unit\n+upon units that define subprograms are counted, so control fan-out coupling\n+is reported for all units, but control fan-in coupling - only for the units\n+that define subprograms.\n+\n+\n+\n+\n+\n \n When computing coupling metrics, @command{gnatmetric} counts only\n dependencies between units that are arguments of the gnatmetric call.\n Coupling metrics are program-wide (or project-wide) metrics, so to\n get a valid result, you should call @command{gnatmetric} for\n the whole set of sources that make up your program. It can be done\n by calling @command{gnatmetric} from the GNAT driver with @option{-U}\n-option (see See @ref{The GNAT Driver and Project Files} for details.\n+option (see @ref{The GNAT Driver and Project Files} for details).\n \n By default, all the coupling metrics are disabled. You can use the following\n switches to specify the coupling metrics to be computed and reported:\n \n @table @option\n \n @ifclear vms\n-@cindex @option{--package@var{x}} (@command{gnatmetric})\n-@cindex @option{--no-package@var{x}} (@command{gnatmetric})\n-@cindex @option{--category@var{x}} (@command{gnatmetric})\n-@cindex @option{--no-category@var{x}} (@command{gnatmetric})\n+@cindex @option{--tagged-coupling@var{x}} (@command{gnatmetric})\n+@cindex @option{--hierarchy-coupling@var{x}} (@command{gnatmetric})\n+@cindex @option{--unit-coupling@var{x}} (@command{gnatmetric})\n+@cindex @option{--control-coupling@var{x}} (@command{gnatmetric})\n @end ifclear\n \n @ifset vms\n@@ -14587,33 +14649,29 @@ switches to specify the coupling metrics to be computed and reported:\n @item ^--coupling-all^/COUPLING_METRICS=ALL^\n Report all the coupling metrics\n \n-@item ^--no-coupling-all^/COUPLING_METRICS=NONE^\n-Do not report any of  metrics\n-\n-@item ^--package-efferent-coupling^/COUPLING_METRICS=PACKAGE_EFFERENT^\n-Report package efferent coupling\n-\n-@item ^--no-package-efferent-coupling^/COUPLING_METRICS=NOPACKAGE_EFFERENT^\n-Do not report package efferent coupling\n+@item ^--tagged-coupling-out^/COUPLING_METRICS=TAGGED_OUT^\n+Report tagged (class) fan-out coupling\n \n-@item ^--package-afferent-coupling^/COUPLING_METRICS=PACKAGE_AFFERENT^\n-Report package afferent coupling\n+@item ^--tagged-coupling-in^/COUPLING_METRICS=TAGGED_IN^\n+Report tagged (class) fan-in coupling\n \n-@item ^--no-package-afferent-coupling^/COUPLING_METRICS=NOPACKAGE_AFFERENT^\n-Do not report package afferent coupling\n+@item ^--hierarchy-coupling-out^/COUPLING_METRICS=HIERARCHY_OUT^\n+Report hierarchy (category) fan-out coupling\n \n-@item ^--category-efferent-coupling^/COUPLING_METRICS=CATEGORY_EFFERENT^\n-Report category efferent coupling\n+@item ^--hierarchy-coupling-in^/COUPLING_METRICS=HIERARCHY_IN^\n+Report hierarchy (category) fan-in coupling\n \n-@item ^--no-category-efferent-coupling^/COUPLING_METRICS=NOCATEGORY_EFFERENT^\n-Do not report category efferent coupling\n+@item ^--unit-coupling-out^/COUPLING_METRICS=UNIT_OUT^\n+Report unit fan-out coupling\n \n-@item ^--category-afferent-coupling^/COUPLING_METRICS=CATEGORY_AFFERENT^\n-Report category afferent coupling\n+@item ^--unit-coupling-in^/COUPLING_METRICS=UNIT_IN^\n+Report unit fan-in coupling\n \n-@item ^--no-category-afferent-coupling^/COUPLING_METRICS=NOCATEGORY_AFFERENT^\n-Do not report category afferent coupling\n+@item ^--control-coupling-out^/COUPLING_METRICS=CONTROL_OUT^\n+Report control fan-out coupling\n \n+@item ^--control-coupling-in^/COUPLING_METRICS=CONTROL_IN^\n+Report control fan-in coupling\n @end table\n \n @node Other gnatmetric Switches"}, {"sha": "b4b0f2073cc066ed8c75d7c5d4b772dbd4d044bd", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f", "patch": "@@ -2110,6 +2110,14 @@ package body Sem_Attr is\n \n       case Attr_Id is\n \n+         --  Attributes related to Ada2012 iterators (Placeholder).\n+\n+         when Attribute_Constant_Indexing => null;\n+         when Attribute_Default_Iterator => null;\n+         when Attribute_Implicit_Dereference => null;\n+         when Attribute_Iterator_Element => null;\n+         when Attribute_Variable_Indexing => null;\n+\n       ------------------\n       -- Abort_Signal --\n       ------------------\n@@ -5969,6 +5977,14 @@ package body Sem_Attr is\n \n       case Id is\n \n+         --  Attributes related to Ada2012 iterators (Placeholder).\n+\n+         when Attribute_Constant_Indexing => null;\n+         when Attribute_Default_Iterator => null;\n+         when Attribute_Implicit_Dereference => null;\n+         when Attribute_Iterator_Element => null;\n+         when Attribute_Variable_Indexing => null;\n+\n       --------------\n       -- Adjacent --\n       --------------"}, {"sha": "15ae76666fb8f874e5fe5af2048a548bdb4143bb", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f", "patch": "@@ -946,6 +946,50 @@ package body Sem_Ch13 is\n \n                   Delay_Required := False;\n \n+               --  Aspects related to container iterators.\n+\n+               when Aspect_Constant_Indexing    |\n+                    Aspect_Default_Iterator     |\n+                    Aspect_Iterator_Element     |\n+                    Aspect_Variable_Indexing    =>\n+                  null;\n+\n+               when Aspect_Implicit_Dereference =>\n+\n+                  if not Is_Type (E)\n+                    or else not Has_Discriminants (E)\n+                  then\n+                     Error_Msg_N\n+                       (\"Aspect must apply to a type with discriminants\", N);\n+                     goto Continue;\n+\n+                  else\n+                     declare\n+                        Disc : Entity_Id;\n+\n+                     begin\n+                        Disc := First_Discriminant (E);\n+                        while Present (Disc) loop\n+                           if Chars (Expr) = Chars (Disc)\n+                             and then Ekind (Etype (Disc)) =\n+                               E_Anonymous_Access_Type\n+                           then\n+                              Set_Has_Implicit_Dereference (E);\n+                              Set_Has_Implicit_Dereference (Disc);\n+                              goto Continue;\n+                           end if;\n+                           Next_Discriminant (Disc);\n+                        end loop;\n+\n+                        --  Error if no proper access discriminant.\n+\n+                        Error_Msg_NE\n+                         (\"not an access discriminant of&\", Expr, E);\n+                     end;\n+\n+                     goto Continue;\n+                  end if;\n+\n                --  Aspects corresponding to attribute definition clauses\n \n                when Aspect_Address        |\n@@ -2263,6 +2307,13 @@ package body Sem_Ch13 is\n             end if;\n          end External_Tag;\n \n+         --------------------------\n+         -- Implicit_Dereference --\n+         --------------------------\n+         when Attribute_Implicit_Dereference =>\n+            --  Legality checks already performed above.\n+            null;   --  TBD\n+\n          -----------\n          -- Input --\n          -----------\n@@ -5431,6 +5482,13 @@ package body Sem_Ch13 is\n               Aspect_Value_Size     =>\n             T := Any_Integer;\n \n+         when Aspect_Constant_Indexing    |\n+              Aspect_Default_Iterator     |\n+              Aspect_Iterator_Element     |\n+              Aspect_Implicit_Dereference |\n+              Aspect_Variable_Indexing    =>\n+            null;\n+\n          --  Stream attribute. Special case, the expression is just an entity\n          --  that does not need any resolution, so just analyze.\n "}, {"sha": "6b0e9f344b65dd1c6698204fb4a16b61b392774e", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f", "patch": "@@ -731,9 +731,11 @@ package Snames is\n    Name_Compiler_Version               : constant Name_Id := N + $; -- GNAT\n    Name_Component_Size                 : constant Name_Id := N + $;\n    Name_Compose                        : constant Name_Id := N + $;\n+   Name_Constant_Indexing              : constant Name_Id := N + $; -- GNAT\n    Name_Constrained                    : constant Name_Id := N + $;\n    Name_Count                          : constant Name_Id := N + $;\n    Name_Default_Bit_Order              : constant Name_Id := N + $; -- GNAT\n+   Name_Default_Iterator               : constant Name_Id := N + $; -- GNAT\n    Name_Definite                       : constant Name_Id := N + $;\n    Name_Delta                          : constant Name_Id := N + $;\n    Name_Denorm                         : constant Name_Id := N + $;\n@@ -756,8 +758,10 @@ package Snames is\n    Name_Has_Tagged_Values              : constant Name_Id := N + $; -- GNAT\n    Name_Identity                       : constant Name_Id := N + $;\n    Name_Img                            : constant Name_Id := N + $; -- GNAT\n+   Name_Implicit_Dereference           : constant Name_Id := N + $; -- GNAT\n    Name_Integer_Value                  : constant Name_Id := N + $; -- GNAT\n    Name_Invalid_Value                  : constant Name_Id := N + $; -- GNAT\n+   Name_Iterator_Element               : constant Name_Id := N + $; -- GNAT\n    Name_Large                          : constant Name_Id := N + $; -- Ada 83\n    Name_Last                           : constant Name_Id := N + $;\n    Name_Last_Bit                       : constant Name_Id := N + $;\n@@ -825,6 +829,7 @@ package Snames is\n    Name_Val                            : constant Name_Id := N + $;\n    Name_Valid                          : constant Name_Id := N + $;\n    Name_Value_Size                     : constant Name_Id := N + $; -- GNAT\n+   Name_Variable_Indexing              : constant Name_Id := N + $; -- GNAT\n    Name_Version                        : constant Name_Id := N + $;\n    Name_Wchar_T_Size                   : constant Name_Id := N + $; -- GNAT\n    Name_Wide_Wide_Width                : constant Name_Id := N + $; -- Ada 05\n@@ -1263,9 +1268,11 @@ package Snames is\n       Attribute_Compiler_Version,\n       Attribute_Component_Size,\n       Attribute_Compose,\n+      Attribute_Constant_Indexing,\n       Attribute_Constrained,\n       Attribute_Count,\n       Attribute_Default_Bit_Order,\n+      Attribute_Default_Iterator,\n       Attribute_Definite,\n       Attribute_Delta,\n       Attribute_Denorm,\n@@ -1288,8 +1295,10 @@ package Snames is\n       Attribute_Has_Tagged_Values,\n       Attribute_Identity,\n       Attribute_Img,\n+      Attribute_Implicit_Dereference,\n       Attribute_Integer_Value,\n       Attribute_Invalid_Value,\n+      Attribute_Iterator_Element,\n       Attribute_Large,\n       Attribute_Last,\n       Attribute_Last_Bit,\n@@ -1357,6 +1366,7 @@ package Snames is\n       Attribute_Val,\n       Attribute_Valid,\n       Attribute_Value_Size,\n+      Attribute_Variable_Indexing,\n       Attribute_Version,\n       Attribute_Wchar_T_Size,\n       Attribute_Wide_Wide_Width,"}, {"sha": "573cc5151553ee97e65b9fd8af86dceedde94a7a", "filename": "gcc/ada/vms_data.ads", "status": "modified", "additions": 27, "deletions": 28, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f/gcc%2Fada%2Fvms_data.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f/gcc%2Fada%2Fvms_data.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_data.ads?ref=0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f", "patch": "@@ -5403,41 +5403,40 @@ package VMS_Data is\n    S_Metric_Coupling : aliased constant S := \"/COUPLING_METRICS=\"             &\n                                            \"ALL \"                             &\n                                            \"--coupling-all \"                  &\n-                                           \"NONE \"                            &\n-                                           \"--no-coupling-all \"               &\n-                                           \"PACKAGE_EFFERENT \"                &\n-                                           \"--package-efferent-coupling \"     &\n-                                           \"NOPACKAGE_EFFERENT \"              &\n-                                           \"--no-package-efferent-coupling \"  &\n-                                           \"PACKAGE_AFFERENT \"                &\n-                                           \"--package-afferent-coupling \"     &\n-                                           \"NOPACKAGE_AFFERENT \"              &\n-                                           \"--no-package-afferent-coupling \"  &\n-                                           \"CATEGORY_EFFERENT \"               &\n-                                           \"--category-efferent-coupling \"    &\n-                                           \"NOCATEGORY_EFFERENT \"             &\n-                                           \"--no-category-efferent-coupling \" &\n-                                           \"CATEGORY_AFFERENT \"               &\n-                                           \"--category-afferent-coupling \"    &\n-                                           \"NOCATEGORY_AFFERENT \"             &\n-                                           \"--no-category-afferent-coupling\";\n+                                           \"TAGGED_OUT \"                      &\n+                                           \"--tagged-coupling-out \"           &\n+                                           \"TAGGED_IN \"                       &\n+                                           \"--tagged-coupling-in \"            &\n+                                           \"HIERARCHY_OUT \"                   &\n+                                           \"--hierarchy-coupling-out \"        &\n+                                           \"HIERARCHY_IN \"                    &\n+                                           \"--hierarchy-coupling-in \"         &\n+                                           \"UNIT_OUT \"                        &\n+                                           \"--unit-coupling-out \"             &\n+                                           \"UNIT_IN \"                         &\n+                                           \"--unit-coupling-in \"              &\n+                                           \"CONTROL_OUT \"                     &\n+                                           \"--control-coupling-out \"          &\n+                                           \"CONTROL_IN \"                      &\n+                                           \"--control-coupling-in\";\n \n    --      /COUPLING_METRICS=(option, option ...)\n \n    --   Specifies the coupling metrics to be computed.\n    --\n    --   option may be one of the following:\n    --\n-   --     ALL                   All the coupling metrics are computed\n-   --     NONE (D)              None of coupling metrics is computed\n-   --     PACKAGE_EFFERENT      Compute package efferent coupling\n-   --     NOPACKAGE_EFFERENT    Do not compute package efferent coupling\n-   --     PACKAGE_AFFERENT      Compute package afferent coupling\n-   --     NOPACKAGE_AFFERENT    Do not compute package afferent coupling\n-   --     CATEGORY_EFFERENT     Compute category efferent coupling\n-   --     NOCATEGORY_EFFERENT   Do not compute category efferent coupling\n-   --     CATEGORY_AFFERENT     Compute category afferent coupling\n-   --     NOCATEGORY_AFFERENT   Do not compute category afferent coupling\n+   --     ALL            All the coupling metrics are computed\n+   --     NOALL (D)      None of coupling metrics is computed\n+   --     TAGGED_OUT     Compute tagged (class) far-out coupling\n+   --     TAGGED_IN      Compute tagged (class) far-in coupling\n+   --     HIERARCHY_OUT  Compute hieraqrchy (category) far-out coupling\n+   --     HIERARCHY_IN   Compute hieraqrchy (category) far-in coupling\n+   --     UNIT_OUT       Compute unit far-out coupling\n+   --     UNIT_IN        Compute unit far-in coupling\n+   --     CONTROL_OUT    Compute control far-out coupling\n+   --     CONTROL_IN     Compute control far-in coupling\n+\n    --\n    --   All combinations of coupling metrics options are allowed.\n "}]}