{"sha": "41f701ba9451ed054d81d4235aa19e05a116924c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFmNzAxYmE5NDUxZWQwNTRkODFkNDIzNWFhMTllMDVhMTE2OTI0Yw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2007-07-26T19:07:32Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2007-07-26T19:07:32Z"}, "message": "java-tree.h (push_labeled_block, [...]): Remove.\n\n\t* java-tree.h (push_labeled_block, pop_labeled_block): Remove.\n\t(LABELED_BLOCK_LABEL, LABELED_BLOCK_BODY,\n\tEXIT_BLOCK_LABELED_BLOCK): Likewise.\n\t* lang.c (java_tree_inlining_walk_subtrees): Update.\n\t(java_dump_tree): Likewise.\n\t* java-tree.def (LABELED_BLOCK_EXPR, EXIT_BLOCK_EXPR, TRY_EXPR):\n\tRemove.\n\t* decl.c (push_labeled_block, pop_labeled_block): Remove.\n\t* java-gimplify.c (java_gimplify_labeled_block_expr,\n\tjava_gimplify_exit_block_expr, java_gimplify_try_expr): Remove.\n\t(java_gimplify_expr): Update.\n\nFrom-SVN: r126962", "tree": {"sha": "825383d140588a6133ad9e64f3dc43cf6e5e304c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/825383d140588a6133ad9e64f3dc43cf6e5e304c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41f701ba9451ed054d81d4235aa19e05a116924c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41f701ba9451ed054d81d4235aa19e05a116924c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41f701ba9451ed054d81d4235aa19e05a116924c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41f701ba9451ed054d81d4235aa19e05a116924c/comments", "author": null, "committer": null, "parents": [{"sha": "8fee41c2fecbc35041abd164b869ff6a4b92b318", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fee41c2fecbc35041abd164b869ff6a4b92b318", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fee41c2fecbc35041abd164b869ff6a4b92b318"}], "stats": {"total": 161, "additions": 14, "deletions": 147}, "files": [{"sha": "44eec2a495f36559a53d0a58d03955da501c6855", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41f701ba9451ed054d81d4235aa19e05a116924c/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41f701ba9451ed054d81d4235aa19e05a116924c/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=41f701ba9451ed054d81d4235aa19e05a116924c", "patch": "@@ -1,3 +1,17 @@\n+2007-07-26  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java-tree.h (push_labeled_block, pop_labeled_block): Remove.\n+\t(LABELED_BLOCK_LABEL, LABELED_BLOCK_BODY,\n+\tEXIT_BLOCK_LABELED_BLOCK): Likewise.\n+\t* lang.c (java_tree_inlining_walk_subtrees): Update.\n+\t(java_dump_tree): Likewise.\n+\t* java-tree.def (LABELED_BLOCK_EXPR, EXIT_BLOCK_EXPR, TRY_EXPR):\n+\tRemove.\n+\t* decl.c (push_labeled_block, pop_labeled_block): Remove.\n+\t* java-gimplify.c (java_gimplify_labeled_block_expr,\n+\tjava_gimplify_exit_block_expr, java_gimplify_try_expr): Remove.\n+\t(java_gimplify_expr): Update.\n+\n 2007-07-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* class.c (java_treetreehash_hash, java_treetreehash_compare):"}, {"sha": "8822c9ebab8193b9739b7dc6f23a50274211d384", "filename": "gcc/java/decl.c", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41f701ba9451ed054d81d4235aa19e05a116924c/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41f701ba9451ed054d81d4235aa19e05a116924c/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=41f701ba9451ed054d81d4235aa19e05a116924c", "patch": "@@ -1126,41 +1126,6 @@ lookup_name_current_level (tree name)\n   return t;\n }\n \n-/* Use a binding level to record a labeled block declaration */\n-\n-void\n-push_labeled_block (tree lb)\n-{\n-  tree name = DECL_NAME (LABELED_BLOCK_LABEL (lb));\n-  struct binding_level *b = current_binding_level;\n-  tree oldlocal = IDENTIFIER_LOCAL_VALUE (name);\n-  if (oldlocal != 0)\n-      b->shadowed = tree_cons (name, oldlocal, b->shadowed);\n-  TREE_CHAIN (lb) = b->names;\n-  b->names = lb;\n-  IDENTIFIER_LOCAL_VALUE (name) = lb;\n-}\n-\n-/* Pop the current binding level, reinstalling values for the previous\n-   labeled block */\n-\n-void\n-pop_labeled_block (void)\n-{\n-  struct binding_level *b = current_binding_level;\n-  tree label =  b->names;\n-  IDENTIFIER_LOCAL_VALUE (DECL_NAME (LABELED_BLOCK_LABEL (label))) = \n-    NULL_TREE;\n-  if (b->shadowed)\n-    IDENTIFIER_LOCAL_VALUE (TREE_PURPOSE (b->shadowed)) = \n-      TREE_VALUE (b->shadowed);\n-\n-  /* Pop the current level, and free the structure for reuse.  */\n-  current_binding_level = current_binding_level->level_chain;\n-  b->level_chain = free_binding_level;\n-  free_binding_level = b;\n-}\n-\n /* Record a decl-node X as belonging to the current lexical scope.\n    Check for errors (such as an incompatible declaration for the same\n    name already seen in the same scope)."}, {"sha": "5873f84ab7553fefb26a13056371058e14325540", "filename": "gcc/java/java-gimplify.c", "status": "modified", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41f701ba9451ed054d81d4235aa19e05a116924c/gcc%2Fjava%2Fjava-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41f701ba9451ed054d81d4235aa19e05a116924c/gcc%2Fjava%2Fjava-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-gimplify.c?ref=41f701ba9451ed054d81d4235aa19e05a116924c", "patch": "@@ -32,10 +32,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"tree-gimple.h\"\n #include \"toplev.h\"\n \n-static tree java_gimplify_labeled_block_expr (tree);\n-static tree java_gimplify_exit_block_expr (tree);\n static tree java_gimplify_block (tree);\n-static tree java_gimplify_try_expr (tree);\n static enum gimplify_status java_gimplify_modify_expr (tree*, tree*, tree *);\n static enum gimplify_status java_gimplify_component_ref (tree*, tree*, tree *);\n static enum gimplify_status java_gimplify_self_mod_expr (tree*, tree*, tree *);\n@@ -69,18 +66,6 @@ java_gimplify_expr (tree *expr_p, tree *pre_p ATTRIBUTE_UNUSED,\n       *expr_p = java_gimplify_block (*expr_p);\n       break;\n \n-    case LABELED_BLOCK_EXPR:\n-      *expr_p = java_gimplify_labeled_block_expr (*expr_p);\n-      break;\n-\n-    case EXIT_BLOCK_EXPR:\n-      *expr_p = java_gimplify_exit_block_expr (*expr_p);\n-      break;\n-\n-    case TRY_EXPR:\n-      *expr_p = java_gimplify_try_expr (*expr_p);\n-      break;\n-\n     case VAR_DECL:\n       *expr_p = java_replace_reference (*expr_p, /* want_lvalue */ false);\n       return GS_UNHANDLED;\n@@ -144,41 +129,6 @@ java_gimplify_expr (tree *expr_p, tree *pre_p ATTRIBUTE_UNUSED,\n   return GS_OK;\n }\n \n-/* Gimplify a LABELED_BLOCK_EXPR into a LABEL_EXPR following\n-   a (possibly empty) body.  */\n-\n-static tree\n-java_gimplify_labeled_block_expr (tree expr)\n-{\n-  tree body = LABELED_BLOCK_BODY (expr);\n-  tree label = LABELED_BLOCK_LABEL (expr);\n-  tree t;\n-\n-  DECL_CONTEXT (label) = current_function_decl;\n-  t = build1 (LABEL_EXPR, void_type_node, label);\n-  if (body != NULL_TREE)\n-    t = build2 (COMPOUND_EXPR, void_type_node, body, t);\n-  return t;\n-}\n-\n-/* Gimplify a EXIT_BLOCK_EXPR into a GOTO_EXPR.  */\n-\n-static tree\n-java_gimplify_exit_block_expr (tree expr)\n-{\n-  tree labeled_block = EXIT_BLOCK_LABELED_BLOCK (expr);\n-  tree label;\n-\n-  /* First operand must be a LABELED_BLOCK_EXPR, which should\n-     already be lowered (or partially lowered) when we get here.  */\n-  gcc_assert (TREE_CODE (labeled_block) == LABELED_BLOCK_EXPR);\n-\n-  label = LABELED_BLOCK_LABEL (labeled_block);\n-  return build1 (GOTO_EXPR, void_type_node, label);\n-}\n-\n-\n-\n static enum gimplify_status\n java_gimplify_component_ref (tree *expr_p, tree *pre_p, tree *post_p)\n {\n@@ -347,30 +297,6 @@ java_gimplify_block (tree java_block)\n   return build3 (BIND_EXPR, TREE_TYPE (java_block), decls, body, block);\n }\n \n-static tree\n-java_gimplify_try_expr (tree try_expr)\n-{\n-  tree body = TREE_OPERAND (try_expr, 0);\n-  tree handler = TREE_OPERAND (try_expr, 1);\n-  tree catch = NULL_TREE;\n-\n-  /* Build a CATCH_EXPR for each handler.  */\n-  while (handler)\n-    {\n-      tree java_catch = TREE_OPERAND (handler, 0);\n-      tree catch_type = TREE_TYPE (TREE_TYPE (BLOCK_EXPR_DECLS (java_catch)));\n-      tree expr = build2 (CATCH_EXPR, void_type_node,\n-\t\t\t  prepare_eh_table_type (catch_type),\n-\t\t\t  handler);\n-      if (catch)\n-\tcatch = build2 (COMPOUND_EXPR, void_type_node, catch, expr);\n-      else\n-\tcatch = expr;\n-      handler = TREE_CHAIN (handler);\n-    }\n-  return build2 (TRY_CATCH_EXPR, void_type_node, body, catch);\n-}\n-\n /* Dump a tree of some kind.  This is a convenience wrapper for the\n    dump_* functions in tree-dump.c.  */\n static void"}, {"sha": "5b15a1abc6449b19177228c3f72b73e67f22251f", "filename": "gcc/java/java-tree.def", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41f701ba9451ed054d81d4235aa19e05a116924c/gcc%2Fjava%2Fjava-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41f701ba9451ed054d81d4235aa19e05a116924c/gcc%2Fjava%2Fjava-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.def?ref=41f701ba9451ed054d81d4235aa19e05a116924c", "patch": "@@ -32,19 +32,6 @@ DEFTREECODE (COMPARE_L_EXPR, \"compare_l_expr\", tcc_binary, 2)\n /* Same as COMPARE_EXPR, but if either value is NaN, the result is 1. */\n DEFTREECODE (COMPARE_G_EXPR, \"compare_g_expr\", tcc_binary, 2)\n \n-/* A labeled block. Operand 0 is the label that will be generated to\n-   mark the end of the block.  Operand 1 is the labeled block body.  */\n-DEFTREECODE (LABELED_BLOCK_EXPR, \"labeled_block_expr\", tcc_expression, 2)\n-\n-/* Exit a labeled block, possibly returning a value.  Operand 0 is a\n-   LABELED_BLOCK_EXPR to exit.  */\n-DEFTREECODE (EXIT_BLOCK_EXPR, \"exit_block_expr\", tcc_statement, 1)\n-\n-/* Try expression\n-   Operand 0 is the tried block,\n-   Operand 1 contains chained catch nodes. */\n-DEFTREECODE (TRY_EXPR, \"try-catch\", tcc_expression, 2)\n-\n /*\n Local variables:\n mode:c"}, {"sha": "f769c937fc8c0954d42939580ef17a9022b83c2c", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41f701ba9451ed054d81d4235aa19e05a116924c/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41f701ba9451ed054d81d4235aa19e05a116924c/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=41f701ba9451ed054d81d4235aa19e05a116924c", "patch": "@@ -1198,12 +1198,10 @@ extern tree java_check_reference (tree, int);\n extern tree build_get_class (tree);\n extern tree build_instanceof (tree, tree);\n extern tree create_label_decl (tree);\n-extern void push_labeled_block (tree);\n extern tree prepare_eh_table_type (tree);\n extern void java_expand_catch_classes (tree);\n extern tree build_exception_object_ref (tree);\n extern tree generate_name (void);\n-extern void pop_labeled_block (void);\n extern const char *lang_printable_name (tree, int);\n extern tree maybe_add_interface (tree, tree);\n extern void set_super_info (int, tree, tree, int);\n@@ -1666,16 +1664,6 @@ enum\n \n #undef DEBUG_JAVA_BINDING_LEVELS\n \n-/* In a LABELED_BLOCK_EXPR node.  */\n-#define LABELED_BLOCK_LABEL(NODE) \\\n-  TREE_OPERAND_CHECK_CODE (NODE, LABELED_BLOCK_EXPR, 0)\n-#define LABELED_BLOCK_BODY(NODE) \\\n-  TREE_OPERAND_CHECK_CODE (NODE, LABELED_BLOCK_EXPR, 1)\n-\n-/* In an EXIT_BLOCK_EXPR node.  */\n-#define EXIT_BLOCK_LABELED_BLOCK(NODE) \\\n-  TREE_OPERAND_CHECK_CODE (NODE, EXIT_BLOCK_EXPR, 0)\n-\n extern void java_genericize (tree);\n extern int java_gimplify_expr (tree *, tree *, tree *);\n "}, {"sha": "693193df474561178445262f3489f0f2ada96dff", "filename": "gcc/java/lang.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41f701ba9451ed054d81d4235aa19e05a116924c/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41f701ba9451ed054d81d4235aa19e05a116924c/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=41f701ba9451ed054d81d4235aa19e05a116924c", "patch": "@@ -721,10 +721,6 @@ java_tree_inlining_walk_subtrees (tree *tp ATTRIBUTE_UNUSED,\n       WALK_SUBTREE (BLOCK_EXPR_BODY (t));\n       return NULL_TREE;\n \n-    case EXIT_BLOCK_EXPR:\n-      *subtrees = 0;\n-      return NULL_TREE;\n-\n     default:\n       return NULL_TREE;\n     }\n@@ -906,15 +902,6 @@ java_dump_tree (void *dump_info, tree t)\n       dump_child (\"label\", TREE_OPERAND (t, 0));\n       return true;\n \n-    case LABELED_BLOCK_EXPR:\n-      dump_child (\"label\", LABELED_BLOCK_LABEL (t));\n-      dump_child (\"block\", LABELED_BLOCK_BODY (t));\n-      return true;\n-\n-    case EXIT_BLOCK_EXPR:\n-      dump_child (\"block\", EXIT_BLOCK_LABELED_BLOCK (t));\n-      return true;\n-\n     case BLOCK:\n       if (BLOCK_EXPR_BODY (t))\n \t{"}]}