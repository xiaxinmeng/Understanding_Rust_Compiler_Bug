{"sha": "aaf3ce3e553c3bb85fe447691c9309f9522facb5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFmM2NlM2U1NTNjM2JiODVmZTQ0NzY5MWM5MzA5Zjk1MjJmYWNiNQ==", "commit": {"author": {"name": "Dale Johannesen", "email": "dalej@apple.com", "date": "2003-12-22T18:23:15Z"}, "committer": {"name": "Dale Johannesen", "email": "dalej@gcc.gnu.org", "date": "2003-12-22T18:23:15Z"}, "message": "re PR rtl-optimization/12828 (-floop-optimize is unstable on PowerPC (float to int conversion problem))\n\n\n2003-12-21  Dale Johannesen  <dalej@apple.com>\n\n        PR optimization/12828\n        * loop.c:  Add find_regs_nested to look inside CLOBBER(MEM).\n        (scan_loop):  Call it.\n        * regclass.c (reg_scan_mark_regs):  Look inside CLOBBER(MEM).\n\nFrom-SVN: r74935", "tree": {"sha": "54dffb12fe06c5056af9026e7ba7552d76a17f05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54dffb12fe06c5056af9026e7ba7552d76a17f05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aaf3ce3e553c3bb85fe447691c9309f9522facb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaf3ce3e553c3bb85fe447691c9309f9522facb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aaf3ce3e553c3bb85fe447691c9309f9522facb5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaf3ce3e553c3bb85fe447691c9309f9522facb5/comments", "author": null, "committer": null, "parents": [{"sha": "af3fbed11080efd038c3c6185b51891a72852b31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af3fbed11080efd038c3c6185b51891a72852b31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af3fbed11080efd038c3c6185b51891a72852b31"}], "stats": {"total": 44, "additions": 43, "deletions": 1}, "files": [{"sha": "6d077413ed3e63252abff825fa435af3a97c2b10", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf3ce3e553c3bb85fe447691c9309f9522facb5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf3ce3e553c3bb85fe447691c9309f9522facb5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aaf3ce3e553c3bb85fe447691c9309f9522facb5", "patch": "@@ -1,3 +1,10 @@\n+2003-12-22  Dale Johannesen  <dalej@apple.com>\n+\n+        PR optimization/12828\n+        * loop.c:  Add find_regs_nested to look inside CLOBBER(MEM).\n+        (scan_loop):  Call it.\n+        * regclass.c (reg_scan_mark_regs):  Look inside CLOBBER(MEM).\n+\n 2003-12-22  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR c/9163"}, {"sha": "4ee83447a6998eaac83c4599e73cf58f325d443d", "filename": "gcc/loop.c", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf3ce3e553c3bb85fe447691c9309f9522facb5/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf3ce3e553c3bb85fe447691c9309f9522facb5/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=aaf3ce3e553c3bb85fe447691c9309f9522facb5", "patch": "@@ -255,6 +255,7 @@ static void count_one_set (struct loop_regs *, rtx, rtx, rtx *);\n static void note_addr_stored (rtx, rtx, void *);\n static void note_set_pseudo_multiple_uses (rtx, rtx, void *);\n static int loop_reg_used_before_p (const struct loop *, rtx, rtx);\n+static rtx find_regs_nested (rtx, rtx);\n static void scan_loop (struct loop*, int);\n #if 0\n static void replace_call_address (rtx, rtx, rtx);\n@@ -573,6 +574,32 @@ next_insn_in_loop (const struct loop *loop, rtx insn)\n   return insn;\n }\n \n+/* Find any register references hidden inside X and add them to\n+   the dependency list DEPS.  This is used to look inside CLOBBER (MEM\n+   when checking whether a PARALLEL can be pulled out of a loop.  */\n+\n+static rtx\n+find_regs_nested (rtx deps, rtx x)\n+{\n+  enum rtx_code code = GET_CODE (x);\n+  if (code == REG)\n+    deps = gen_rtx_EXPR_LIST (VOIDmode, x, deps);\n+  else\n+    {\n+      const char *fmt = GET_RTX_FORMAT (code);\n+      int i, j;\n+      for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n+\t{\n+\t  if (fmt[i] == 'e')\n+\t    deps = find_regs_nested (deps, XEXP (x, i));\n+\t  else if (fmt[i] == 'E')\n+\t    for (j = 0; j < XVECLEN (x, i); j++)\n+\t      deps = find_regs_nested (deps, XVECEXP (x, i, j));\n+\t}\n+    }\n+  return deps;\n+}\n+\n /* Optimize one loop described by LOOP.  */\n \n /* ??? Could also move memory writes out of loops if the destination address\n@@ -776,7 +803,9 @@ scan_loop (struct loop *loop, int flags)\n \t\t}\n \n \t      /* For parallels, add any possible uses to the dependencies, as\n-\t\t we can't move the insn without resolving them first.  */\n+\t\t we can't move the insn without resolving them first.\n+\t\t MEMs inside CLOBBERs may also reference registers; these\n+\t\t count as implicit uses.  */\n \t      if (GET_CODE (PATTERN (p)) == PARALLEL)\n \t\t{\n \t\t  for (i = 0; i < XVECLEN (PATTERN (p), 0); i++)\n@@ -786,6 +815,10 @@ scan_loop (struct loop *loop, int flags)\n \t\t\tdependencies\n \t\t\t  = gen_rtx_EXPR_LIST (VOIDmode, XEXP (x, 0),\n \t\t\t\t\t       dependencies);\n+\t\t      else if (GET_CODE (x) == CLOBBER \n+\t\t\t       && GET_CODE (XEXP (x, 0)) == MEM)\n+\t\t\tdependencies = find_regs_nested (dependencies, \n+\t\t\t\t\t\t  XEXP (XEXP (x, 0), 0));\n \t\t    }\n \t\t}\n "}, {"sha": "2e4dc61be32fd6a1698aa9ecec9d226a5f6e27ae", "filename": "gcc/regclass.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf3ce3e553c3bb85fe447691c9309f9522facb5/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf3ce3e553c3bb85fe447691c9309f9522facb5/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=aaf3ce3e553c3bb85fe447691c9309f9522facb5", "patch": "@@ -2406,6 +2406,8 @@ reg_scan_mark_refs (rtx x, rtx insn, int note_flag, unsigned int min_regno)\n \t    REG_N_SETS (REGNO (reg))++;\n \t    REG_N_REFS (REGNO (reg))++;\n \t  }\n+\telse if (GET_CODE (reg) == MEM)\n+\t  reg_scan_mark_refs (XEXP (reg, 0), insn, note_flag, min_regno);\n       }\n       break;\n "}]}