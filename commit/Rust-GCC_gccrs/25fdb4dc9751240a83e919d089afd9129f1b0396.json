{"sha": "25fdb4dc9751240a83e919d089afd9129f1b0396", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVmZGI0ZGM5NzUxMjQwYTgzZTkxOWQwODlhZmQ5MTI5ZjFiMDM5Ng==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-11-27T06:13:23Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-11-27T06:13:23Z"}, "message": "c-common.c (handle_visibility_attribute): Accept \"default\".\n\n\t* c-common.c (handle_visibility_attribute): Accept \"default\".\n\t* tree.h (enum symbol_visibility): New.\n\t(decl_visibility): Declare.\n\t* target.h (gcc_target.visibility): Take visibility arg as integer.\n\t* varasm.c (default_assemble_visibility): Likewise.\n\t(decl_visibility): New.\n\t(maybe_assemble_visibility): Use it.\n\t* output.h (default_assemble_visibility): Update prototype.\n\t* config/rs6000/rs6000.c (rs6000_assemble_visibility): Take\n\tvisibility arg as integer.\n\nFrom-SVN: r59559", "tree": {"sha": "81aceb060743bb202f3bdc25d65782869844092b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81aceb060743bb202f3bdc25d65782869844092b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25fdb4dc9751240a83e919d089afd9129f1b0396", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25fdb4dc9751240a83e919d089afd9129f1b0396", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25fdb4dc9751240a83e919d089afd9129f1b0396", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25fdb4dc9751240a83e919d089afd9129f1b0396/comments", "author": null, "committer": null, "parents": [{"sha": "02077425b78dddfa059082e3e2b243fbc4c2fd6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02077425b78dddfa059082e3e2b243fbc4c2fd6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02077425b78dddfa059082e3e2b243fbc4c2fd6a"}], "stats": {"total": 104, "additions": 81, "deletions": 23}, "files": [{"sha": "94e48a5bbda4a66527186ba22cc6fad924ea9ef1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25fdb4dc9751240a83e919d089afd9129f1b0396/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25fdb4dc9751240a83e919d089afd9129f1b0396/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=25fdb4dc9751240a83e919d089afd9129f1b0396", "patch": "@@ -1,3 +1,16 @@\n+2002-11-26  Richard Henderson  <rth@redhat.com>\n+\n+\t* c-common.c (handle_visibility_attribute): Accept \"default\".\n+\t* tree.h (enum symbol_visibility): New.\n+\t(decl_visibility): Declare.\n+\t* target.h (gcc_target.visibility): Take visibility arg as integer.\n+\t* varasm.c (default_assemble_visibility): Likewise.\n+\t(decl_visibility): New.\n+\t(maybe_assemble_visibility): Use it.\n+\t* output.h (default_assemble_visibility): Update prototype.\n+\t* config/rs6000/rs6000.c (rs6000_assemble_visibility): Take\n+\tvisibility arg as integer.\n+\n 2002-11-26  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/h8300.c: Adjust spacing."}, {"sha": "f32456d455bd021c389056ed8c6c744fd7844e57", "filename": "gcc/c-common.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25fdb4dc9751240a83e919d089afd9129f1b0396/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25fdb4dc9751240a83e919d089afd9129f1b0396/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=25fdb4dc9751240a83e919d089afd9129f1b0396", "patch": "@@ -5891,9 +5891,10 @@ handle_visibility_attribute (node, name, args, flags, no_add_attrs)\n \t}\n       if (strcmp (TREE_STRING_POINTER (id), \"hidden\")\n \t  && strcmp (TREE_STRING_POINTER (id), \"protected\")\n-\t  && strcmp (TREE_STRING_POINTER (id), \"internal\"))\n+\t  && strcmp (TREE_STRING_POINTER (id), \"internal\")\n+\t  && strcmp (TREE_STRING_POINTER (id), \"default\"))\n \t{\n-\t  error (\"visibility arg must be one of \\\"hidden\\\", \\\"protected\\\" or \\\"internal\\\"\");\n+\t  error (\"visibility arg must be one of \\\"default\\\", \\\"hidden\\\", \\\"protected\\\" or \\\"internal\\\"\");\n \t  *no_add_attrs = true;\n \t  return NULL_TREE;\n \t}"}, {"sha": "bb9dcff116a09c0b0271c4e4f8b2e42c7861d0a3", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25fdb4dc9751240a83e919d089afd9129f1b0396/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25fdb4dc9751240a83e919d089afd9129f1b0396/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=25fdb4dc9751240a83e919d089afd9129f1b0396", "patch": "@@ -186,7 +186,7 @@ static int constant_pool_expr_1 PARAMS ((rtx, int *, int *));\n static struct machine_function * rs6000_init_machine_status PARAMS ((void));\n static bool rs6000_assemble_integer PARAMS ((rtx, unsigned int, int));\n #ifdef HAVE_GAS_HIDDEN\n-static void rs6000_assemble_visibility PARAMS ((tree, const char *));\n+static void rs6000_assemble_visibility PARAMS ((tree, int));\n #endif\n static int rs6000_ra_ever_killed PARAMS ((void));\n static tree rs6000_handle_longcall_attribute PARAMS ((tree *, tree, tree, int, bool *));\n@@ -8157,23 +8157,29 @@ rs6000_assemble_integer (x, size, aligned_p)\n    VISIBILITY_TYPE.  */\n \n static void\n-rs6000_assemble_visibility (decl, visibility_type)\n+rs6000_assemble_visibility (decl, vis)\n      tree decl;\n-     const char *visibility_type;\n+     int vis;\n {\n-  default_assemble_visibility (decl, visibility_type);\n-\n   /* Functions need to have their entry point symbol visibility set as\n      well as their descriptor symbol visibility.  */\n   if (DEFAULT_ABI == ABI_AIX && TREE_CODE (decl) == FUNCTION_DECL)\n     {\n-      const char *name;\n+      static const char * const visibility_types[] = {\n+        NULL, \"internal\", \"hidden\", \"protected\"\n+      };\n+\n+      const char *name, *type;\n \n       name = ((* targetm.strip_name_encoding)\n \t      (IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl))));\n+      type = visibility_types[vis];\n \n-      fprintf (asm_out_file, \"\\t.%s\\t.%s\\n\", visibility_type, name);\n+      fprintf (asm_out_file, \"\\t.%s\\t%s\\n\", type, name);\n+      fprintf (asm_out_file, \"\\t.%s\\t.%s\\n\", type, name);\n     }\n+  else\n+    default_assemble_visibility (decl, vis);\n }\n #endif\n \f"}, {"sha": "dd2e4d61b47d0b640f64879751d92e7d9199e53b", "filename": "gcc/output.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25fdb4dc9751240a83e919d089afd9129f1b0396/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25fdb4dc9751240a83e919d089afd9129f1b0396/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=25fdb4dc9751240a83e919d089afd9129f1b0396", "patch": "@@ -253,7 +253,7 @@ extern void assemble_constant_align\tPARAMS ((tree));\n \n extern void assemble_alias\t\tPARAMS ((tree, tree));\n \n-extern void default_assemble_visibility\tPARAMS ((tree, const char *));\n+extern void default_assemble_visibility\tPARAMS ((tree, int));\n \n /* Output a string of literal assembler code\n    for an `asm' keyword used between functions.  */"}, {"sha": "d9475625414fee46bc8e93eeea289397d73dbfc7", "filename": "gcc/target.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25fdb4dc9751240a83e919d089afd9129f1b0396/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25fdb4dc9751240a83e919d089afd9129f1b0396/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=25fdb4dc9751240a83e919d089afd9129f1b0396", "patch": "@@ -74,7 +74,7 @@ struct gcc_target\n \n     /* Emit an assembler directive to set visibility for the symbol\n        associated with the tree decl.  */\n-    void (* visibility) PARAMS ((tree, const char *));\n+    void (* visibility) PARAMS ((tree, int));\n \n     /* Output the assembler code for entry to a function.  */\n     void (* function_prologue) PARAMS ((FILE *, HOST_WIDE_INT));"}, {"sha": "abe070369ed46d3516b83060acabcb3bd8a6d2ba", "filename": "gcc/tree.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25fdb4dc9751240a83e919d089afd9129f1b0396/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25fdb4dc9751240a83e919d089afd9129f1b0396/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=25fdb4dc9751240a83e919d089afd9129f1b0396", "patch": "@@ -2133,6 +2133,16 @@ enum tls_model {\n };\n \n extern enum tls_model flag_tls_default;\n+\n+/* Enumerate visibility settings.  */\n+\n+enum symbol_visibility\n+{\n+  VISIBILITY_DEFAULT,\n+  VISIBILITY_INTERNAL,\n+  VISIBILITY_HIDDEN,\n+  VISIBILITY_PROTECTED\n+};\n \f\n /* A pointer-to-function member type looks like:\n \n@@ -3043,6 +3053,7 @@ extern void make_decl_one_only\t\tPARAMS ((tree));\n extern int supports_one_only\t\tPARAMS ((void));\n extern void variable_section\t\tPARAMS ((tree, int));\n enum tls_model decl_tls_model\t\tPARAMS ((tree));\n+enum symbol_visibility decl_visibility\tPARAMS ((tree));\n \n /* In fold-const.c */\n extern int div_and_round_double\t\tPARAMS ((enum tree_code, int,"}, {"sha": "2ac3da5338c8962fd958b19bef32c8a9d0bab635", "filename": "gcc/varasm.c", "status": "modified", "additions": 39, "deletions": 12, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25fdb4dc9751240a83e919d089afd9129f1b0396/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25fdb4dc9751240a83e919d089afd9129f1b0396/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=25fdb4dc9751240a83e919d089afd9129f1b0396", "patch": "@@ -4643,20 +4643,25 @@ assemble_alias (decl, target)\n }\n \n /* Emit an assembler directive to set symbol for DECL visibility to\n-   VISIBILITY_TYPE.  */\n+   the visibility type VIS, which must not be VISIBILITY_DEFAULT.  */\n \n void\n-default_assemble_visibility (decl, visibility_type)\n+default_assemble_visibility (decl, vis)\n      tree decl;\n-     const char *visibility_type ATTRIBUTE_UNUSED;\n+     int vis;\n {\n-  const char *name;\n+  static const char * const visibility_types[] = {\n+    NULL, \"internal\", \"hidden\", \"protected\"\n+  };\n+\n+  const char *name, *type;\n \n   name = (* targetm.strip_name_encoding)\n \t (IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)));\n+  type = visibility_types[vis];\n \n #ifdef HAVE_GAS_HIDDEN\n-  fprintf (asm_out_file, \"\\t.%s\\t%s\\n\", visibility_type, name);\n+  fprintf (asm_out_file, \"\\t.%s\\t%s\\n\", type, name);\n #else\n   warning (\"visibility attribute not supported in this configuration; ignored\");\n #endif\n@@ -4668,13 +4673,10 @@ static void\n maybe_assemble_visibility (decl)\n      tree decl;\n {\n-  tree visibility = lookup_attribute (\"visibility\", DECL_ATTRIBUTES (decl));\n-  if (visibility)\n-    {\n-      const char *type\n-\t= TREE_STRING_POINTER (TREE_VALUE (TREE_VALUE (visibility)));\n-      (* targetm.asm_out.visibility) (decl, type);\n-    }\n+  enum symbol_visibility vis = decl_visibility (decl);\n+\n+  if (vis != VISIBILITY_DEFAULT)\n+    (* targetm.asm_out.visibility) (decl, vis);\n }\n \n /* Returns 1 if the target configuration supports defining public symbols\n@@ -4775,6 +4777,31 @@ decl_tls_model (decl)\n   return kind;\n }\n \n+enum symbol_visibility\n+decl_visibility (decl)\n+     tree decl;\n+{\n+  tree attr = lookup_attribute (\"visibility\", DECL_ATTRIBUTES (decl));\n+\n+  if (attr)\n+    {\n+      const char *which = TREE_STRING_POINTER (TREE_VALUE (TREE_VALUE (attr)));\n+\n+      if (strcmp (which, \"default\") == 0)\n+\treturn VISIBILITY_DEFAULT;\n+      if (strcmp (which, \"internal\") == 0)\n+\treturn VISIBILITY_INTERNAL;\n+      if (strcmp (which, \"hidden\") == 0)\n+\treturn VISIBILITY_HIDDEN;\n+      if (strcmp (which, \"protected\") == 0)\n+\treturn VISIBILITY_PROTECTED;\n+\n+      abort ();\n+    }\n+\n+  return VISIBILITY_DEFAULT;\n+}\n+\n /* Select a set of attributes for section NAME based on the properties\n    of DECL and whether or not RELOC indicates that DECL's initializer\n    might contain runtime relocations."}]}