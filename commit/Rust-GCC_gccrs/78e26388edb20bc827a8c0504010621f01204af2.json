{"sha": "78e26388edb20bc827a8c0504010621f01204af2", "node_id": "C_kwDOANBUbNoAKDc4ZTI2Mzg4ZWRiMjBiYzgyN2E4YzA1MDQwMTA2MjFmMDEyMDRhZjI", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2022-02-25T09:39:57Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-13T08:04:45Z"}, "message": "[Ada] Only use alternate stack when needed\n\nIf we're not going to install a signal handler for SIGSEGV then we do\nnot need an alternate stack to handle this signal (and e.g. stack\noverflows).\n\ngcc/ada/\n\n\t* libgnarl/s-taprop__linux.adb (Initialize): Do not use an\n\talternate stack if no handler for SEGV is installed.", "tree": {"sha": "45983969bf72eccb0c0640be8c1291bf80edcb12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45983969bf72eccb0c0640be8c1291bf80edcb12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78e26388edb20bc827a8c0504010621f01204af2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78e26388edb20bc827a8c0504010621f01204af2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78e26388edb20bc827a8c0504010621f01204af2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78e26388edb20bc827a8c0504010621f01204af2/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8150f295ec3b9b147c1355d136609c8226300375", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8150f295ec3b9b147c1355d136609c8226300375", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8150f295ec3b9b147c1355d136609c8226300375"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "42a95ea8de038d87e862a352976e0e6505b08bea", "filename": "gcc/ada/libgnarl/s-taprop__linux.adb", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e26388edb20bc827a8c0504010621f01204af2/gcc%2Fada%2Flibgnarl%2Fs-taprop__linux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e26388edb20bc827a8c0504010621f01204af2/gcc%2Fada%2Flibgnarl%2Fs-taprop__linux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taprop__linux.adb?ref=78e26388edb20bc827a8c0504010621f01204af2", "patch": "@@ -96,7 +96,7 @@ package body System.Task_Primitives.Operations is\n    Foreign_Task_Elaborated : aliased Boolean := True;\n    --  Used to identified fake tasks (i.e., non-Ada Threads)\n \n-   Use_Alternate_Stack : constant Boolean := Alternate_Stack_Size /= 0;\n+   Use_Alternate_Stack : Boolean := Alternate_Stack_Size /= 0;\n    --  Whether to use an alternate signal stack for stack overflows\n \n    Abort_Handler_Installed : Boolean := False;\n@@ -1375,9 +1375,9 @@ package body System.Task_Primitives.Operations is\n       function State\n         (Int : System.Interrupt_Management.Interrupt_ID) return Character;\n       pragma Import (C, State, \"__gnat_get_interrupt_state\");\n-      --  Get interrupt state.  Defined in a-init.c\n-      --  The input argument is the interrupt number,\n-      --  and the result is one of the following:\n+      --  Get interrupt state. Defined in init.c.\n+      --  The input argument is the interrupt number, and the result is one of\n+      --  the following:\n \n       Default : constant Character := 's';\n       --    'n'   this interrupt not set by any Interrupt_State pragma\n@@ -1409,6 +1409,12 @@ package body System.Task_Primitives.Operations is\n \n       Specific.Initialize (Environment_Task);\n \n+      --  Do not use an alternate stack if no handler for SEGV is installed\n+\n+      if State (SIGSEGV) = Default then\n+         Use_Alternate_Stack := False;\n+      end if;\n+\n       if Use_Alternate_Stack then\n          Environment_Task.Common.Task_Alternate_Stack :=\n            Alternate_Stack'Address;"}]}