{"sha": "49ac143dfb97cc28f3dfb3b61eb9724259d3a3a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDlhYzE0M2RmYjk3Y2MyOGYzZGZiM2I2MWViOTcyNDI1OWQzYTNhMw==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2011-02-15T12:44:31Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2011-02-15T12:44:31Z"}, "message": "make frv use constraints.md\n\n\tmake frv use constraints.md\n\t* config/frv/constraints.md: New file.\n\t* config/frv/predicates.md: Include it.\n\t* config/frv/frv.c (reg_class_from_letter): Delete.\n\t(frv_option_override): Don't initialize it.\n\t* config/frv/frv.h (REG_CLASS_FROM_LETTER): Delete.\n\t(CONST_OK_FOR_I, CONST_OK_FOR_J, CONST_OK_FOR_K): Delete.\n\t(CONST_OK_FOR_L, CONST_OK_FOR_M, CONST_OK_FOR_N): Delete.\n\t(CONST_OK_FOR_O, CONST_OK_FOR_P, CONST_OK_FOR_LETTER_P): Delete.\n\t(CONST_DOUBLE_OK_FOR_G, CONST_DOUBLE_OK_FOR_H): Delete.\n\t(CONST_DOUBLE_OK_FOR_LETTER_P): Delete.\n\t(EXTRA_CONSTRAINT_FOR_Q, EXTRA_CONSTRAINT_FOR_R): Delete.\n\t(EXTRA_CONSTRAINT_FOR_S, EXTRA_CONSTRAINT_FOR_T): Delete.\n\t(EXTRA_CONSTRAINT_FOR_U, EXTRA_CONSTRAINT): Delete.\n\t(EXTRA_MEMORY_CONSTRAINT, CONSTRAINT_LEN): Delete.\n\t(REG_CLASS_FROM_CONSTRAINT): Delete.\n\nFrom-SVN: r170171", "tree": {"sha": "146fb4e801af4b9eec3007e7dd2bfd7ac65f981f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/146fb4e801af4b9eec3007e7dd2bfd7ac65f981f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49ac143dfb97cc28f3dfb3b61eb9724259d3a3a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49ac143dfb97cc28f3dfb3b61eb9724259d3a3a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49ac143dfb97cc28f3dfb3b61eb9724259d3a3a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49ac143dfb97cc28f3dfb3b61eb9724259d3a3a3/comments", "author": null, "committer": null, "parents": [{"sha": "c95f9494fe67feaccfbb33f7d066f21427ce8ed6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c95f9494fe67feaccfbb33f7d066f21427ce8ed6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c95f9494fe67feaccfbb33f7d066f21427ce8ed6"}], "stats": {"total": 375, "additions": 193, "deletions": 182}, "files": [{"sha": "0db9e5504ebceaac0f5e33bce87b1820ea124459", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49ac143dfb97cc28f3dfb3b61eb9724259d3a3a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49ac143dfb97cc28f3dfb3b61eb9724259d3a3a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=49ac143dfb97cc28f3dfb3b61eb9724259d3a3a3", "patch": "@@ -1,3 +1,21 @@\n+2011-02-15  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/frv/constraints.md: New file.\n+\t* config/frv/predicates.md: Include it.\n+\t* config/frv/frv.c (reg_class_from_letter): Delete.\n+\t(frv_option_override): Don't initialize it.\n+\t* config/frv/frv.h (REG_CLASS_FROM_LETTER): Delete.\n+\t(CONST_OK_FOR_I, CONST_OK_FOR_J, CONST_OK_FOR_K): Delete.\n+\t(CONST_OK_FOR_L, CONST_OK_FOR_M, CONST_OK_FOR_N): Delete.\n+\t(CONST_OK_FOR_O, CONST_OK_FOR_P, CONST_OK_FOR_LETTER_P): Delete.\n+\t(CONST_DOUBLE_OK_FOR_G, CONST_DOUBLE_OK_FOR_H): Delete.\n+\t(CONST_DOUBLE_OK_FOR_LETTER_P): Delete.\n+\t(EXTRA_CONSTRAINT_FOR_Q, EXTRA_CONSTRAINT_FOR_R): Delete.\n+\t(EXTRA_CONSTRAINT_FOR_S, EXTRA_CONSTRAINT_FOR_T): Delete.\n+\t(EXTRA_CONSTRAINT_FOR_U, EXTRA_CONSTRAINT): Delete.\n+\t(EXTRA_MEMORY_CONSTRAINT, CONSTRAINT_LEN): Delete.\n+\t(REG_CLASS_FROM_CONSTRAINT): Delete.\n+\n 2011-02-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/47581"}, {"sha": "792706b0333163fbb5b4c237a5c618578273bc15", "filename": "gcc/config/frv/constraints.md", "status": "added", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49ac143dfb97cc28f3dfb3b61eb9724259d3a3a3/gcc%2Fconfig%2Ffrv%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49ac143dfb97cc28f3dfb3b61eb9724259d3a3a3/gcc%2Fconfig%2Ffrv%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Fconstraints.md?ref=49ac143dfb97cc28f3dfb3b61eb9724259d3a3a3", "patch": "@@ -0,0 +1,174 @@\n+;; Constraint definitions for FRV.\n+;; Copyright (C) 2001 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+;; Register constraints.\n+(define_register_constraint \"a\" \"ACC_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"b\" \"EVEN_ACC_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"c\" \"CC_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"d\" \"GPR_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"e\" \"EVEN_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"f\" \"FPR_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"h\" \"FEVEN_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"l\" \"LR_REG\"\n+  \"@internal\")\n+\n+(define_register_constraint \"q\" \"QUAD_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"t\" \"ICC_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"u\" \"FCC_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"v\" \"ICR_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"w\" \"FCR_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"x\" \"QUAD_FPR_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"y\" \"LCR_REG\"\n+  \"@internal\")\n+\n+(define_register_constraint \"z\" \"SPR_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"A\" \"QUAD_ACC_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"B\" \"ACCG_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"C\" \"CR_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"D89\" \"GR89_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"D09\" \"GR9_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"D08\" \"GR8_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"D14\" \"FDPIC_FPTR_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"D15\" \"FDPIC_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"W\" \"FDPIC_CALL_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"Z\" \"FDPIC_REGS\"\n+  \"@internal\")\n+\n+;; Integer constraints.\n+(define_constraint \"I\"\n+  \"A signed 6-bit immediate.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, -32, 31)\")))\n+\n+(define_constraint \"J\"\n+  \"A signed 10-bit immediate.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, -512, 511)\")))\n+\n+(define_constraint \"K\"\n+  \"@internal\"\n+  ;; Unused.\n+  (and (match_code \"const_int\")\n+       (match_test \"0\")))\n+\n+(define_constraint \"L\"\n+  \"A signed 16-bit immediate.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, -32768, 32767)\")))\n+\n+(define_constraint \"M\"\n+  \"An unsigned 16-bit immediate.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, 0, 65535)\")))\n+\n+(define_constraint \"N\"\n+  \"A signed 12-bit immediate that is negative.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, -2048, -1)\")))\n+\n+(define_constraint \"O\"\n+  \"Zero.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival == 0\")))\n+\n+(define_constraint \"P\"\n+  \"A signed 12-bit immediate that is positive.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, 1, 2047)\")))\n+\n+;; Floating-point constraints.\n+(define_constraint \"G\"\n+  \"Floating-point zero.\"\n+  (and (match_code \"const_double\")\n+       (ior (and (match_test \"mode == VOIDmode\")\n+\t\t (match_test \"hval == 0 && lval == 0\"))\n+\t    (and (match_test \"mode == SFmode || mode == DFmode\")\n+\t\t (match_test \"op == CONST0_RTX (mode)\")))))\n+\n+(define_constraint \"H\"\n+  \"@internal\"\n+  ;; Unused.\n+  (and (match_code \"const_double\")\n+       (match_test \"0\")))\n+\n+(define_constraint \"Q\"\n+  \"12-bit relocations.\"\n+  (match_test \"got12_operand (op, mode)\"))\n+\n+(define_memory_constraint \"R\"\n+  \"Double word memory ops that take one instruction.\"\n+  (match_test \"dbl_memory_one_insn_operand (op, mode)\"))\n+\n+(define_constraint \"S\"\n+  \"SYMBOL_REF.\"\n+  (match_test \"CONSTANT_P (op) && call_operand (op, VOIDmode)\"))\n+\n+(define_memory_constraint \"T\"\n+  \"Double word memory ops that take two instructions.\"\n+  (match_test \"dbl_memory_two_insn_operand (op, mode)\"))\n+\n+(define_memory_constraint \"U\"\n+  \"Memory operand for conditional execution.\"\n+  (match_test \"condexec_memory_operand (op, mode)\"))"}, {"sha": "229b9feb7354d80867286612cd56693542d0dd7d", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49ac143dfb97cc28f3dfb3b61eb9724259d3a3a3/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49ac143dfb97cc28f3dfb3b61eb9724259d3a3a3/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=49ac143dfb97cc28f3dfb3b61eb9724259d3a3a3", "patch": "@@ -252,9 +252,6 @@ static /* GTY(()) */ frv_ifcvt_t frv_ifcvt;\n /* Map register number to smallest register class.  */\n enum reg_class regno_reg_class[FIRST_PSEUDO_REGISTER];\n \n-/* Map class letter into register class.  */\n-enum reg_class reg_class_from_letter[256];\n-\n /* Cached value of frv_stack_info.  */\n static frv_stack_t *frv_stack_cache = (frv_stack_t *)0;\n \n@@ -809,48 +806,6 @@ frv_option_override (void)\n   if (!global_options_set.x_g_switch_value && !TARGET_LIBPIC)\n     g_switch_value = SDATA_DEFAULT_SIZE;\n \n-  /* A C expression which defines the machine-dependent operand\n-     constraint letters for register classes.  If CHAR is such a\n-     letter, the value should be the register class corresponding to\n-     it.  Otherwise, the value should be `NO_REGS'.  The register\n-     letter `r', corresponding to class `GENERAL_REGS', will not be\n-     passed to this macro; you do not need to handle it.\n-\n-     The following letters are unavailable, due to being used as\n-     constraints:\n-\t'0'..'9'\n-\t'<', '>'\n-\t'E', 'F', 'G', 'H'\n-\t'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P'\n-\t'Q', 'R', 'S', 'T', 'U'\n-\t'V', 'X'\n-\t'g', 'i', 'm', 'n', 'o', 'p', 'r', 's' */\n-\n-  for (i = 0; i < 256; i++)\n-    reg_class_from_letter[i] = NO_REGS;\n-\n-  reg_class_from_letter['a'] = ACC_REGS;\n-  reg_class_from_letter['b'] = EVEN_ACC_REGS;\n-  reg_class_from_letter['c'] = CC_REGS;\n-  reg_class_from_letter['d'] = GPR_REGS;\n-  reg_class_from_letter['e'] = EVEN_REGS;\n-  reg_class_from_letter['f'] = FPR_REGS;\n-  reg_class_from_letter['h'] = FEVEN_REGS;\n-  reg_class_from_letter['l'] = LR_REG;\n-  reg_class_from_letter['q'] = QUAD_REGS;\n-  reg_class_from_letter['t'] = ICC_REGS;\n-  reg_class_from_letter['u'] = FCC_REGS;\n-  reg_class_from_letter['v'] = ICR_REGS;\n-  reg_class_from_letter['w'] = FCR_REGS;\n-  reg_class_from_letter['x'] = QUAD_FPR_REGS;\n-  reg_class_from_letter['y'] = LCR_REG;\n-  reg_class_from_letter['z'] = SPR_REGS;\n-  reg_class_from_letter['A'] = QUAD_ACC_REGS;\n-  reg_class_from_letter['B'] = ACCG_REGS;\n-  reg_class_from_letter['C'] = CR_REGS;\n-  reg_class_from_letter['W'] = FDPIC_CALL_REGS; /* gp14+15 */\n-  reg_class_from_letter['Z'] = FDPIC_REGS; /* gp15 */\n-\n   /* There is no single unaligned SI op for PIC code.  Sometimes we\n      need to use \".4byte\" and sometimes we need to use \".picptr\".\n      See frv_assemble_integer for details.  */"}, {"sha": "299a85676ba785a196470e9d333e88ee45a5da8e", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 0, "deletions": 137, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49ac143dfb97cc28f3dfb3b61eb9724259d3a3a3/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49ac143dfb97cc28f3dfb3b61eb9724259d3a3a3/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=49ac143dfb97cc28f3dfb3b61eb9724259d3a3a3", "patch": "@@ -1003,25 +1003,6 @@ extern enum reg_class regno_reg_class[];\n    (as well as added to a displacement).  */\n #define INDEX_REG_CLASS GPR_REGS\n \n-/* A C expression which defines the machine-dependent operand constraint\n-   letters for register classes.  If CHAR is such a letter, the value should be\n-   the register class corresponding to it.  Otherwise, the value should be\n-   `NO_REGS'.  The register letter `r', corresponding to class `GENERAL_REGS',\n-   will not be passed to this macro; you do not need to handle it.\n-\n-   The following letters are unavailable, due to being used as\n-   constraints:\n-\t'0'..'9'\n-\t'<', '>'\n-\t'E', 'F', 'G', 'H'\n-\t'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P'\n-\t'Q', 'R', 'S', 'T', 'U'\n-\t'V', 'X'\n-\t'g', 'i', 'm', 'n', 'o', 'p', 'r', 's' */\n-\n-extern enum reg_class reg_class_from_letter[];\n-#define REG_CLASS_FROM_LETTER(CHAR) reg_class_from_letter [(unsigned char)(CHAR)]\n-\n /* A C expression which is nonzero if register number NUM is suitable for use\n    as a base register in operand addresses.  It may be either a suitable hard\n    register or a pseudo register that has been allocated such a hard register.  */\n@@ -1067,124 +1048,6 @@ extern enum reg_class reg_class_from_letter[];\n \n #define ZERO_P(x) (x == CONST0_RTX (GET_MODE (x)))\n \n-/* 6-bit signed immediate.  */\n-#define CONST_OK_FOR_I(VALUE) IN_RANGE (VALUE, -32, 31)\n-/* 10-bit signed immediate.  */\n-#define CONST_OK_FOR_J(VALUE) IN_RANGE (VALUE, -512, 511)\n-/* Unused */\n-#define CONST_OK_FOR_K(VALUE)  0\n-/* 16-bit signed immediate.  */\n-#define CONST_OK_FOR_L(VALUE) IN_RANGE (VALUE, -32768, 32767)\n-/* 16-bit unsigned immediate.  */\n-#define CONST_OK_FOR_M(VALUE) IN_RANGE (VALUE, 0, 65535)\n-/* 12-bit signed immediate that is negative.  */\n-#define CONST_OK_FOR_N(VALUE) IN_RANGE (VALUE, -2048, -1)\n-/* Zero */\n-#define CONST_OK_FOR_O(VALUE) ((VALUE) == 0)\n-/* 12-bit signed immediate that is negative.  */\n-#define CONST_OK_FOR_P(VALUE) IN_RANGE (VALUE, 1, 2047)\n-\n-/* A C expression that defines the machine-dependent operand constraint letters\n-   (`I', `J', `K', .. 'P') that specify particular ranges of integer values.\n-   If C is one of those letters, the expression should check that VALUE, an\n-   integer, is in the appropriate range and return 1 if so, 0 otherwise.  If C\n-   is not one of those letters, the value should be 0 regardless of VALUE.  */\n-#define CONST_OK_FOR_LETTER_P(VALUE, C)\t\t\\\n-  (  (C) == 'I' ? CONST_OK_FOR_I (VALUE)        \\\n-   : (C) == 'J' ? CONST_OK_FOR_J (VALUE)        \\\n-   : (C) == 'K' ? CONST_OK_FOR_K (VALUE)        \\\n-   : (C) == 'L' ? CONST_OK_FOR_L (VALUE)        \\\n-   : (C) == 'M' ? CONST_OK_FOR_M (VALUE)        \\\n-   : (C) == 'N' ? CONST_OK_FOR_N (VALUE)        \\\n-   : (C) == 'O' ? CONST_OK_FOR_O (VALUE)        \\\n-   : (C) == 'P' ? CONST_OK_FOR_P (VALUE)        \\\n-   : 0)\n-\n-\n-/* A C expression that defines the machine-dependent operand constraint letters\n-   (`G', `H') that specify particular ranges of `const_double' values.\n-\n-   If C is one of those letters, the expression should check that VALUE, an RTX\n-   of code `const_double', is in the appropriate range and return 1 if so, 0\n-   otherwise.  If C is not one of those letters, the value should be 0\n-   regardless of VALUE.\n-\n-   `const_double' is used for all floating-point constants and for `DImode'\n-   fixed-point constants.  A given letter can accept either or both kinds of\n-   values.  It can use `GET_MODE' to distinguish between these kinds.  */\n-\n-#define CONST_DOUBLE_OK_FOR_G(VALUE)\t\t\t\t\t\\\n-  ((GET_MODE (VALUE) == VOIDmode \t\t\t\t\t\\\n-    && CONST_DOUBLE_LOW (VALUE) == 0\t\t\t\t\t\\\n-    && CONST_DOUBLE_HIGH (VALUE) == 0)\t\t\t\t\t\\\n-   || ((GET_MODE (VALUE) == SFmode\t\t\t\t\t\\\n-        || GET_MODE (VALUE) == DFmode)\t\t\t\t\t\\\n-       && (VALUE) == CONST0_RTX (GET_MODE (VALUE))))\n-\n-#define CONST_DOUBLE_OK_FOR_H(VALUE) 0\n-\n-#define CONST_DOUBLE_OK_FOR_LETTER_P(VALUE, C)\t\t\t\t\\\n-  (  (C) == 'G' ? CONST_DOUBLE_OK_FOR_G (VALUE)\t\t\t\t\\\n-   : (C) == 'H' ? CONST_DOUBLE_OK_FOR_H (VALUE)\t\t\t\t\\\n-   : 0)\n-\n-/* A C expression that defines the optional machine-dependent constraint\n-   letters (`Q', `R', `S', `T', `U') that can be used to segregate specific\n-   types of operands, usually memory references, for the target machine.\n-   Normally this macro will not be defined.  If it is required for a particular\n-   target machine, it should return 1 if VALUE corresponds to the operand type\n-   represented by the constraint letter C.  If C is not defined as an extra\n-   constraint, the value returned should be 0 regardless of VALUE.\n-\n-   For example, on the ROMP, load instructions cannot have their output in r0\n-   if the memory reference contains a symbolic address.  Constraint letter `Q'\n-   is defined as representing a memory address that does *not* contain a\n-   symbolic address.  An alternative is specified with a `Q' constraint on the\n-   input and `r' on the output.  The next alternative specifies `m' on the\n-   input and a register class that does not include r0 on the output.  */\n-\n-/* 12-bit relocations.  */\n-#define EXTRA_CONSTRAINT_FOR_Q(VALUE)\t\t\t\t\t\\\n-  (got12_operand (VALUE, GET_MODE (VALUE)))\n-\n-/* Double word memory ops that take one instruction.  */\n-#define EXTRA_CONSTRAINT_FOR_R(VALUE)\t\t\t\t\t\\\n-  (dbl_memory_one_insn_operand (VALUE, GET_MODE (VALUE)))\n-\n-/* SYMBOL_REF */\n-#define EXTRA_CONSTRAINT_FOR_S(VALUE) \\\n-  (CONSTANT_P (VALUE) && call_operand (VALUE, VOIDmode))\n-\n-/* Double word memory ops that take two instructions.  */\n-#define EXTRA_CONSTRAINT_FOR_T(VALUE)\t\t\t\t\t\\\n-  (dbl_memory_two_insn_operand (VALUE, GET_MODE (VALUE)))\n-\n-/* Memory operand for conditional execution.  */\n-#define EXTRA_CONSTRAINT_FOR_U(VALUE)\t\t\t\t\t\\\n-  (condexec_memory_operand (VALUE, GET_MODE (VALUE)))\n-\n-#define EXTRA_CONSTRAINT(VALUE, C)\t\t\t\t\t\\\n-  (  (C) == 'Q'   ? EXTRA_CONSTRAINT_FOR_Q (VALUE)\t\t\t\\\n-   : (C) == 'R' ? EXTRA_CONSTRAINT_FOR_R (VALUE)\t\t\t\\\n-   : (C) == 'S' ? EXTRA_CONSTRAINT_FOR_S (VALUE)\t\t\t\\\n-   : (C) == 'T' ? EXTRA_CONSTRAINT_FOR_T (VALUE)\t\t\t\\\n-   : (C) == 'U' ? EXTRA_CONSTRAINT_FOR_U (VALUE)\t\t\t\\\n-   : 0)\n-\n-#define EXTRA_MEMORY_CONSTRAINT(C,STR) \\\n-  ((C) == 'U' || (C) == 'R' || (C) == 'T')\n-\n-#define CONSTRAINT_LEN(C, STR) \\\n-  ((C) == 'D' ? 3 : DEFAULT_CONSTRAINT_LEN ((C), (STR)))\n-\n-#define REG_CLASS_FROM_CONSTRAINT(C, STR) \\\n-  (((C) == 'D' && (STR)[1] == '8' && (STR)[2] == '9') ? GR89_REGS : \\\n-   ((C) == 'D' && (STR)[1] == '0' && (STR)[2] == '9') ? GR9_REGS : \\\n-   ((C) == 'D' && (STR)[1] == '0' && (STR)[2] == '8') ? GR8_REGS : \\\n-   ((C) == 'D' && (STR)[1] == '1' && (STR)[2] == '4') ? FDPIC_FPTR_REGS : \\\n-   ((C) == 'D' && (STR)[1] == '1' && (STR)[2] == '5') ? FDPIC_REGS : \\\n-   REG_CLASS_FROM_LETTER ((C)))\n-\n \f\n /* Basic Stack Layout.  */\n "}, {"sha": "cc4a491417f2d932486f771bd74e4d558e48c66f", "filename": "gcc/config/frv/frv.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49ac143dfb97cc28f3dfb3b61eb9724259d3a3a3/gcc%2Fconfig%2Ffrv%2Ffrv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49ac143dfb97cc28f3dfb3b61eb9724259d3a3a3/gcc%2Fconfig%2Ffrv%2Ffrv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.md?ref=49ac143dfb97cc28f3dfb3b61eb9724259d3a3a3", "patch": "@@ -1519,6 +1519,7 @@\n ;;\n \n (include \"predicates.md\")\n+(include \"constraints.md\")\n \f\n ;; ::::::::::::::::::::\n ;; ::"}]}