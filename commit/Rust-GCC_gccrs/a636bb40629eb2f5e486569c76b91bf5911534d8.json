{"sha": "a636bb40629eb2f5e486569c76b91bf5911534d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTYzNmJiNDA2MjllYjJmNWU0ODY1NjljNzZiOTFiZjU5MTE1MzRkOA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2014-08-07T14:27:59Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2014-08-07T14:27:59Z"}, "message": "[AArch64] Restrict usage of FP/SIMD registers for TImode reload and absdi2 patterns for non-float/simd targets.\n\n\t* config/aarch64/aarch64.md (absdi2): Set simd attribute.\n\t(aarch64_reload_mov<mode>): Predicate on TARGET_FLOAT.\n\t(aarch64_movdi_<mode>high): Likewise.\n\t(aarch64_mov<mode>high_di): Likewise.\n\t(aarch64_movdi_<mode>low): Likewise.\n\t(aarch64_mov<mode>low_di): Likewise.\n\t(aarch64_movtilow_tilow): Likewise.\n\tAdd comment explaining usage of fp,simd attributes and of\n\tTARGET_FLOAT and TARGET_SIMD.\n\nFrom-SVN: r213712", "tree": {"sha": "8c3638d77e5e300610293152b2c1cb81573ed56a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c3638d77e5e300610293152b2c1cb81573ed56a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a636bb40629eb2f5e486569c76b91bf5911534d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a636bb40629eb2f5e486569c76b91bf5911534d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a636bb40629eb2f5e486569c76b91bf5911534d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a636bb40629eb2f5e486569c76b91bf5911534d8/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c747993a621cc69309e3a9e9fddeba09f470fb86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c747993a621cc69309e3a9e9fddeba09f470fb86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c747993a621cc69309e3a9e9fddeba09f470fb86"}], "stats": {"total": 43, "additions": 33, "deletions": 10}, "files": [{"sha": "311ff0245578300102f9feb4724f290616aa070b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a636bb40629eb2f5e486569c76b91bf5911534d8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a636bb40629eb2f5e486569c76b91bf5911534d8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a636bb40629eb2f5e486569c76b91bf5911534d8", "patch": "@@ -1,3 +1,15 @@\n+2014-08-07  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.md (absdi2): Set simd attribute.\n+\t(aarch64_reload_mov<mode>): Predicate on TARGET_FLOAT.\n+\t(aarch64_movdi_<mode>high): Likewise.\n+\t(aarch64_mov<mode>high_di): Likewise.\n+\t(aarch64_movdi_<mode>low): Likewise.\n+\t(aarch64_mov<mode>low_di): Likewise.\n+\t(aarch64_movtilow_tilow): Likewise.\n+\tAdd comment explaining usage of fp,simd attributes and of\n+\tTARGET_FLOAT and TARGET_SIMD.\n+\n 2014-08-07  Ian Bolton  <ian.bolton@arm.com>\n             Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n "}, {"sha": "3c51fd367e954d513aac1180ec4025f15d46c87e", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a636bb40629eb2f5e486569c76b91bf5911534d8/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a636bb40629eb2f5e486569c76b91bf5911534d8/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=a636bb40629eb2f5e486569c76b91bf5911534d8", "patch": "@@ -141,12 +141,22 @@\n ; to share pipeline descriptions.\n (include \"../arm/types.md\")\n \n+;; It is important to set the fp or simd attributes to yes when a pattern\n+;; alternative uses the FP or SIMD register files, usually signified by use of\n+;; the 'w' constraint.  This will ensure that the alternative will be\n+;; disabled when compiling with -mgeneral-regs-only or with the +nofp/+nosimd\n+;; architecture extensions.  If all the alternatives in a pattern use the\n+;; FP or SIMD registers then the pattern predicate should include TARGET_FLOAT\n+;; or TARGET_SIMD.\n+\n ;; Attribute that specifies whether or not the instruction touches fp\n-;; registers.\n+;; registers.  When this is set to yes for an alternative, that alternative\n+;; will be disabled when !TARGET_FLOAT.\n (define_attr \"fp\" \"no,yes\" (const_string \"no\"))\n \n ;; Attribute that specifies whether or not the instruction touches simd\n-;; registers.\n+;; registers.  When this is set to yes for an alternative, that alternative\n+;; will be disabled when !TARGET_SIMD.\n (define_attr \"simd\" \"no,yes\" (const_string \"no\"))\n \n (define_attr \"length\" \"\"\n@@ -1954,7 +1964,8 @@\n \t\t\t\t\t\t\t     GEN_INT (63)))));\n     DONE;\n   }\n-  [(set_attr \"type\" \"alu_sreg\")]\n+  [(set_attr \"type\" \"alu_sreg\")\n+   (set_attr \"simd\" \"no,yes\")]\n )\n \n (define_insn \"neg<mode>2\"\n@@ -3728,7 +3739,7 @@\n         (match_operand:TX 1 \"register_operand\" \"w\"))\n    (clobber (match_operand:DI 2 \"register_operand\" \"=&r\"))\n   ]\n-  \"\"\n+  \"TARGET_FLOAT\"\n   {\n     rtx op0 = simplify_gen_subreg (TImode, operands[0], <MODE>mode, 0);\n     rtx op1 = simplify_gen_subreg (TImode, operands[1], <MODE>mode, 0);\n@@ -3746,7 +3757,7 @@\n (define_insn \"aarch64_movdi_<mode>low\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (truncate:DI (match_operand:TX 1 \"register_operand\" \"w\")))]\n-  \"reload_completed || reload_in_progress\"\n+  \"TARGET_FLOAT && (reload_completed || reload_in_progress)\"\n   \"fmov\\\\t%x0, %d1\"\n   [(set_attr \"type\" \"f_mrc\")\n    (set_attr \"length\" \"4\")\n@@ -3757,7 +3768,7 @@\n         (truncate:DI\n \t  (lshiftrt:TX (match_operand:TX 1 \"register_operand\" \"w\")\n \t\t       (const_int 64))))]\n-  \"reload_completed || reload_in_progress\"\n+  \"TARGET_FLOAT && (reload_completed || reload_in_progress)\"\n   \"fmov\\\\t%x0, %1.d[1]\"\n   [(set_attr \"type\" \"f_mrc\")\n    (set_attr \"length\" \"4\")\n@@ -3767,7 +3778,7 @@\n   [(set (zero_extract:TX (match_operand:TX 0 \"register_operand\" \"+w\")\n                          (const_int 64) (const_int 64))\n         (zero_extend:TX (match_operand:DI 1 \"register_operand\" \"r\")))]\n-  \"reload_completed || reload_in_progress\"\n+  \"TARGET_FLOAT && (reload_completed || reload_in_progress)\"\n   \"fmov\\\\t%0.d[1], %x1\"\n   [(set_attr \"type\" \"f_mcr\")\n    (set_attr \"length\" \"4\")\n@@ -3776,17 +3787,17 @@\n (define_insn \"aarch64_mov<mode>low_di\"\n   [(set (match_operand:TX 0 \"register_operand\" \"=w\")\n         (zero_extend:TX (match_operand:DI 1 \"register_operand\" \"r\")))]\n-  \"reload_completed || reload_in_progress\"\n+  \"TARGET_FLOAT && (reload_completed || reload_in_progress)\"\n   \"fmov\\\\t%d0, %x1\"\n   [(set_attr \"type\" \"f_mcr\")\n    (set_attr \"length\" \"4\")\n   ])\n \n (define_insn \"aarch64_movtilow_tilow\"\n   [(set (match_operand:TI 0 \"register_operand\" \"=w\")\n-        (zero_extend:TI \n+        (zero_extend:TI\n \t  (truncate:DI (match_operand:TI 1 \"register_operand\" \"w\"))))]\n-  \"reload_completed || reload_in_progress\"\n+  \"TARGET_FLOAT && (reload_completed || reload_in_progress)\"\n   \"fmov\\\\t%d0, %d1\"\n   [(set_attr \"type\" \"fmov\")\n    (set_attr \"length\" \"4\")"}]}