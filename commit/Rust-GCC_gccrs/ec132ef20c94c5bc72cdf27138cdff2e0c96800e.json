{"sha": "ec132ef20c94c5bc72cdf27138cdff2e0c96800e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWMxMzJlZjIwYzk0YzViYzcyY2RmMjcxMzhjZGZmMmUwYzk2ODAwZQ==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2017-11-17T15:53:51Z"}, "committer": {"name": "Tamar Christina", "email": "tnfchris@gcc.gnu.org", "date": "2017-11-17T15:53:51Z"}, "message": "re PR target/82641 (Unable to enable crc32 for a certain function with target attribute on ARM (aarch32))\n\n2017-11-17  Tamar Christina  <tamar.christina@arm.com>\n\n\tPR target/82641\n\t* config/arm/arm.c (arm_valid_target_attribute_rec):\n\tParse \"arch=\" and \"+<ext>\".\n\t(arm_valid_target_attribute_tree): Re-init global options.\n\t(arm_option_override): Make non-static.\n\t(arm_options_perform_arch_sanity_checks): Make errors fatal.\n\t* gcc/config/arm/arm-c.c (__ARM_FEATURE_CMSE): Support undef.\n\t(__ARM_FEATURE_CRC32): Support undef.\n\t* config/arm/arm_acle.h (__ARM_FEATURE_CRC32): Replace with pragma.\n\t* doc/extend.texi (ARM Function Attributes): Add pragma and target.\n\ngcc/testsuite/\n2017-11-17  Tamar Christina  <tamar.christina@arm.com>\n\n\tPR target/82641\n\t* gcc.target/arm/pragma_arch_attribute.c: New.\n\nFrom-SVN: r254878", "tree": {"sha": "66a6b83e440593a102ad9a175aebacd673e801b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66a6b83e440593a102ad9a175aebacd673e801b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec132ef20c94c5bc72cdf27138cdff2e0c96800e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec132ef20c94c5bc72cdf27138cdff2e0c96800e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec132ef20c94c5bc72cdf27138cdff2e0c96800e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec132ef20c94c5bc72cdf27138cdff2e0c96800e/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6e72eb34e279a97e997b59494f8d47170efb03be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e72eb34e279a97e997b59494f8d47170efb03be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e72eb34e279a97e997b59494f8d47170efb03be"}], "stats": {"total": 144, "additions": 139, "deletions": 5}, "files": [{"sha": "a7954d2dbc3710a4190593e6de72bbf70e34b37c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec132ef20c94c5bc72cdf27138cdff2e0c96800e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec132ef20c94c5bc72cdf27138cdff2e0c96800e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ec132ef20c94c5bc72cdf27138cdff2e0c96800e", "patch": "@@ -1,3 +1,16 @@\n+2017-11-17  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR target/82641\n+\t* config/arm/arm.c (arm_valid_target_attribute_rec):\n+\tParse \"arch=\" and \"+<ext>\".\n+\t(arm_valid_target_attribute_tree): Re-init global options.\n+\t(arm_option_override): Make non-static.\n+\t(arm_options_perform_arch_sanity_checks): Make errors fatal.\n+\t* gcc/config/arm/arm-c.c (__ARM_FEATURE_CMSE): Support undef.\n+\t(__ARM_FEATURE_CRC32): Support undef.\n+\t* config/arm/arm_acle.h (__ARM_FEATURE_CRC32): Replace with pragma.\n+\t* doc/extend.texi (ARM Function Attributes): Add pragma and target.\n+\n 2017-11-17  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gdbinit.in (break-on-diagnostic): New command."}, {"sha": "1c2f8fa8f80caf3c6d4db50490ddbe1f12dc70f6", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec132ef20c94c5bc72cdf27138cdff2e0c96800e/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec132ef20c94c5bc72cdf27138cdff2e0c96800e/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=ec132ef20c94c5bc72cdf27138cdff2e0c96800e", "patch": "@@ -3297,6 +3297,7 @@ arm_configure_build_target (struct arm_build_target *target,\n   target->tune_flags = tune_data->tune_flags;\n   target->tune = tune_data->tune;\n   target->tune_core = tune_data->scheduler;\n+  arm_option_reconfigure_globals ();\n }\n \n /* Fix up any incompatible options that the user has specified.  */\n@@ -30653,7 +30654,7 @@ arm_valid_target_attribute_rec (tree args, struct gcc_options *opts)\n \t  if (! opt_enum_arg_to_value (OPT_mfpu_, q+4,\n \t\t\t\t       &fpu_index, CL_TARGET))\n \t    {\n-\t      error (\"invalid fpu for attribute(target(\\\"%s\\\"))\", q);\n+\t      error (\"invalid fpu for target attribute or pragma %qs\", q);\n \t      return false;\n \t    }\n \t  if (fpu_index == TARGET_FPU_auto)\n@@ -30666,9 +30667,29 @@ arm_valid_target_attribute_rec (tree args, struct gcc_options *opts)\n \t    }\n \t  opts->x_arm_fpu_index = (enum fpu_type) fpu_index;\n \t}\n+      else if (!strncmp (q, \"arch=\", 5))\n+\t{\n+\t  char* arch = q+5;\n+\t  const arch_option *arm_selected_arch\n+\t     = arm_parse_arch_option_name (all_architectures, \"arch\", arch);\n+\n+\t  if (!arm_selected_arch)\n+\t    {\n+\t      error (\"invalid architecture for target attribute or pragma %qs\",\n+\t\t     q);\n+\t      return false;\n+\t    }\n+\n+\t  opts->x_arm_arch_string = xstrndup (arch, strlen (arch));\n+\t}\n+      else if (q[0] == '+')\n+\t{\n+\t  opts->x_arm_arch_string\n+\t    = xasprintf (\"%s%s\", opts->x_arm_arch_string, q);\n+\t}\n       else\n \t{\n-\t  error (\"attribute(target(\\\"%s\\\")) is unknown\", q);\n+\t  error (\"unknown target attribute or pragma %qs\", q);\n \t  return false;\n \t}\n     }\n@@ -30690,7 +30711,10 @@ arm_valid_target_attribute_tree (tree args, struct gcc_options *opts,\n   cl_target_option_save (&cl_opts, opts);\n   arm_configure_build_target (&arm_active_target, &cl_opts, opts_set, false);\n   arm_option_check_internal (opts);\n-  /* Do any overrides, such as global options arch=xxx.  */\n+  /* Do any overrides, such as global options arch=xxx.\n+     We do this since arm_active_target was overridden.  */\n+  arm_option_reconfigure_globals ();\n+  arm_options_perform_arch_sanity_checks ();\n   arm_option_override_internal (opts, opts_set);\n \n   return build_target_option_node (opts);"}, {"sha": "ad28a45866df8dadd7d4c830efc7e8494f41716a", "filename": "gcc/config/arm/arm_acle.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec132ef20c94c5bc72cdf27138cdff2e0c96800e/gcc%2Fconfig%2Farm%2Farm_acle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec132ef20c94c5bc72cdf27138cdff2e0c96800e/gcc%2Fconfig%2Farm%2Farm_acle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_acle.h?ref=ec132ef20c94c5bc72cdf27138cdff2e0c96800e", "patch": "@@ -173,7 +173,10 @@ __arm_mrrc2 (const unsigned int __coproc, const unsigned int __opc1,\n #endif /*  __ARM_ARCH >= 5.  */\n #endif /* (!__thumb__ || __thumb2__) &&  __ARM_ARCH >= 4.  */\n \n-#ifdef __ARM_FEATURE_CRC32\n+#pragma GCC push_options\n+#if __ARM_ARCH >= 8\n+#pragma GCC target (\"arch=armv8-a+crc\")\n+\n __extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n __crc32b (uint32_t __a, uint8_t __b)\n {\n@@ -232,7 +235,8 @@ __crc32cd (uint32_t __a, uint64_t __b)\n }\n #endif\n \n-#endif\n+#endif /* __ARM_ARCH >= 8.  */\n+#pragma GCC pop_options\n \n #ifdef __cplusplus\n }"}, {"sha": "50bda9140f834f61ca2e706b7cf85553b67484c5", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec132ef20c94c5bc72cdf27138cdff2e0c96800e/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec132ef20c94c5bc72cdf27138cdff2e0c96800e/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=ec132ef20c94c5bc72cdf27138cdff2e0c96800e", "patch": "@@ -3858,6 +3858,40 @@ Specifies the fpu for which to tune the performance of this function.\n The behavior and permissible arguments are the same as for the @option{-mfpu=}\n command-line option.\n \n+@item arch=\n+@cindex @code{arch=} function attribute, ARM\n+Specifies the architecture version and architectural extensions to use\n+for this function.  The behavior and permissible arguments are the same as\n+for the @option{-march=} command-line option.\n+\n+The above target attributes can be specified as follows:\n+\n+@smallexample\n+__attribute__((target(\"arch=armv8-a+crc\")))\n+int\n+f (int a)\n+@{\n+  return a + 5;\n+@}\n+@end smallexample\n+\n+Additionally, the architectural extension string may be specified on its\n+own.  This can be used to turn on and off particular architectural extensions\n+without having to specify a particular architecture version or core.  Example:\n+\n+@smallexample\n+__attribute__((target(\"+crc+nocrypto\")))\n+int\n+foo (int a)\n+@{\n+  return a + 5;\n+@}\n+@end smallexample\n+\n+In this example @code{target(\"+crc+nocrypto\")} enables the @code{crc}\n+extension and disables the @code{crypto} extension for the function @code{foo}\n+without modifying an existing @option{-march=} or @option{-mcpu} option.\n+\n @end table\n \n @end table"}, {"sha": "eed45d2775ca362f261d82967bd0614ce3332d73", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec132ef20c94c5bc72cdf27138cdff2e0c96800e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec132ef20c94c5bc72cdf27138cdff2e0c96800e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ec132ef20c94c5bc72cdf27138cdff2e0c96800e", "patch": "@@ -1,3 +1,8 @@\n+2017-11-17  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR target/82641\n+\t* gcc.target/arm/pragma_arch_attribute.c: New.\n+\n 2017-11-17  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* gcc.target/powerpc/altivec-macros.c: Include \"-:\" in the messages"}, {"sha": "a06dbf04037384e98b6b9eaf5ab90b04a09a6d07", "filename": "gcc/testsuite/gcc.target/arm/pragma_arch_attribute.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec132ef20c94c5bc72cdf27138cdff2e0c96800e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpragma_arch_attribute.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec132ef20c94c5bc72cdf27138cdff2e0c96800e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpragma_arch_attribute.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpragma_arch_attribute.c?ref=ec132ef20c94c5bc72cdf27138cdff2e0c96800e", "patch": "@@ -0,0 +1,54 @@\n+/* Test for #pragma target macros.  */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_arch_v8a_ok } */\n+/* { dg-add-options arm_arch_v8a } */\n+\n+#include <arm_acle.h>\n+\n+#ifdef __ARM_FEATURE_CRC32\n+# error \"__ARM_FEATURE_CRC32 is already defined.\"\n+#endif\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8-a+crc\")\n+#ifndef __ARM_FEATURE_CRC32\n+# error \"__ARM_FEATURE_CRC32 is not defined in push 1.\"\n+#endif\n+#pragma GCC pop_options\n+\n+#ifdef __ARM_FEATURE_CRC32\n+# error \"__ARM_FEATURE_CRC32 is defined after pop 1.\"\n+#endif\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"+crc\")\n+#ifndef __ARM_FEATURE_CRC32\n+# error \"__ARM_FEATURE_CRC32 is not defined in push 2.\"\n+#endif\n+#pragma GCC pop_options\n+\n+#ifdef __ARM_FEATURE_CRC32\n+# error \"__ARM_FEATURE_CRC32 is defined after pop 2.\"\n+#endif\n+\n+__attribute__((target(\"+crc\")))\n+void test_crc_unknown_ok_attr_1 ()\n+{\n+\t__crc32b (0, 0);\n+}\n+\n+#ifdef __ARM_FEATURE_CRC32\n+# error \"__ARM_FEATURE_CRC32 is defined after attribute set 1.\"\n+#endif\n+\n+__attribute__((target(\"arch=armv8-a+crc\")))\n+void test_crc_unknown_ok_attr_2 ()\n+{\n+\t__crc32b (0, 0);\n+}\n+\n+#ifdef __ARM_FEATURE_CRC32\n+# error \"__ARM_FEATURE_CRC32 is defined after attribute set 2.\"\n+#endif\n+\n+#pragma GCC reset_options\n\\ No newline at end of file"}]}