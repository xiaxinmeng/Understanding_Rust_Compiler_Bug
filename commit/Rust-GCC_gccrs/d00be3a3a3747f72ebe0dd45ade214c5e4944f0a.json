{"sha": "d00be3a3a3747f72ebe0dd45ade214c5e4944f0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDAwYmUzYTNhMzc0N2Y3MmViZTBkZDQ1YWRlMjE0YzVlNDk0NGYwYQ==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2013-01-05T13:20:08Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2013-01-05T13:20:08Z"}, "message": "re PR fortran/55827 (ICE with multiple fortran modules and character lenght determined by an interfaced pure function)\n\n2013-01-05  Steven G. Kargl  <kargl@gcc.gnu.org>\n\t    Mikael Morin  <mikael@gcc.gnu.org>\n\n\tPR fortran/55827\n\t* class.c (gfc_fix_class_refs): Adapt ts initialization for the case\n\te->symtree == NULL.\n\t* trans-expr.c (gfc_conv_function_expr): Init sym earlier. Use it.\n\n2013-01-05  Steven G. Kargl  <kargl@gcc.gnu.org>\n\t    Mikael Morin  <mikael@gcc.gnu.org>\n\n\tPR fortran/55827\n\t* gfortran.dg/use_22.f90: New test.\n\n\nCo-Authored-By: Mikael Morin <mikael@gcc.gnu.org>\n\nFrom-SVN: r194928", "tree": {"sha": "38bcf78f6b520d21c46b008748295d557020b2a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38bcf78f6b520d21c46b008748295d557020b2a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d00be3a3a3747f72ebe0dd45ade214c5e4944f0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d00be3a3a3747f72ebe0dd45ade214c5e4944f0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d00be3a3a3747f72ebe0dd45ade214c5e4944f0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d00be3a3a3747f72ebe0dd45ade214c5e4944f0a/comments", "author": null, "committer": null, "parents": [{"sha": "9e04287b861dc1cc8f19dce11b9c3147213c34b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e04287b861dc1cc8f19dce11b9c3147213c34b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e04287b861dc1cc8f19dce11b9c3147213c34b7"}], "stats": {"total": 79, "additions": 71, "deletions": 8}, "files": [{"sha": "78ecf9adb1bef7181cca4b38e22af25fac8b987b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d00be3a3a3747f72ebe0dd45ade214c5e4944f0a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d00be3a3a3747f72ebe0dd45ade214c5e4944f0a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d00be3a3a3747f72ebe0dd45ade214c5e4944f0a", "patch": "@@ -1,3 +1,10 @@\n+2013-01-05  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\t    Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\t* class.c (gfc_fix_class_refs): Adapt ts initialization for the case\n+\te->symtree == NULL.\n+\t* trans-expr.c (gfc_conv_function_expr): Init sym earlier. Use it.\n+\n 2013-01-05  Tobias Burnus  <burnus@net-b.de>\n \n \t* class.c (finalize_component): Used passed offset expr."}, {"sha": "0d34e78e5de3c13223a471f15b22a6ea9a0d17d2", "filename": "gcc/fortran/class.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d00be3a3a3747f72ebe0dd45ade214c5e4944f0a/gcc%2Ffortran%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d00be3a3a3747f72ebe0dd45ade214c5e4944f0a/gcc%2Ffortran%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fclass.c?ref=d00be3a3a3747f72ebe0dd45ade214c5e4944f0a", "patch": "@@ -165,7 +165,23 @@ gfc_fix_class_refs (gfc_expr *e)\n \t  && e->value.function.isym != NULL))\n     return;\n \n-  ts = &e->symtree->n.sym->ts;\n+  if (e->expr_type == EXPR_VARIABLE)\n+    ts = &e->symtree->n.sym->ts;\n+  else\n+    {\n+      gfc_symbol *func;\n+\n+      gcc_assert (e->expr_type == EXPR_FUNCTION);\n+      if (e->value.function.esym != NULL)\n+\tfunc = e->value.function.esym;\n+      else\n+\tfunc = e->symtree->n.sym;\n+\n+      if (func->result != NULL)\n+\tts = &func->result->ts;\n+      else\n+\tts = &func->ts;\n+    }\n \n   for (ref = &e->ref; *ref != NULL; ref = &(*ref)->next)\n     {"}, {"sha": "01d3595ae65b1240e7e755cfeab0d289b9354820", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d00be3a3a3747f72ebe0dd45ade214c5e4944f0a/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d00be3a3a3747f72ebe0dd45ade214c5e4944f0a/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=d00be3a3a3747f72ebe0dd45ade214c5e4944f0a", "patch": "@@ -5525,20 +5525,20 @@ gfc_conv_function_expr (gfc_se * se, gfc_expr * expr)\n       return;\n     }\n \n+  /* expr.value.function.esym is the resolved (specific) function symbol for\n+     most functions.  However this isn't set for dummy procedures.  */\n+  sym = expr->value.function.esym;\n+  if (!sym)\n+    sym = expr->symtree->n.sym;\n+\n   /* We distinguish statement functions from general functions to improve\n      runtime performance.  */\n-  if (expr->symtree->n.sym->attr.proc == PROC_ST_FUNCTION)\n+  if (sym->attr.proc == PROC_ST_FUNCTION)\n     {\n       gfc_conv_statement_function (se, expr);\n       return;\n     }\n \n-  /* expr.value.function.esym is the resolved (specific) function symbol for\n-     most functions.  However this isn't set for dummy procedures.  */\n-  sym = expr->value.function.esym;\n-  if (!sym)\n-    sym = expr->symtree->n.sym;\n-\n   gfc_conv_procedure_call (se, sym, expr->value.function.actual, expr,\n \t\t\t   NULL);\n }"}, {"sha": "e730140f5b117910b8e2e5b8cf07debd8fe98520", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d00be3a3a3747f72ebe0dd45ade214c5e4944f0a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d00be3a3a3747f72ebe0dd45ade214c5e4944f0a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d00be3a3a3747f72ebe0dd45ade214c5e4944f0a", "patch": "@@ -1,3 +1,8 @@\n+2013-01-05  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\t    Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\t* gfortran.dg/use_22.f90: New test.\n+\n 2013-01-04  Andrew Pinski  <apinski@cavium.com>\n \n \t* gcc.target/aarch64/cmp-1.c: New testcase."}, {"sha": "d61df6713228f393273251c121eb34ecdbb68d31", "filename": "gcc/testsuite/gfortran.dg/use_22.f90", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d00be3a3a3747f72ebe0dd45ade214c5e4944f0a/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_22.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d00be3a3a3747f72ebe0dd45ade214c5e4944f0a/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_22.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_22.f90?ref=d00be3a3a3747f72ebe0dd45ade214c5e4944f0a", "patch": "@@ -0,0 +1,35 @@\n+! { dg-do compile }\n+!\n+! PR fortran/55827\n+! gfortran used to ICE with the call to `tostring' depending on how the\n+! `tostring' symbol was USE-associated.\n+!\n+! Contributed by Lorenz H\u00fcdepohl <bugs@stellardeath.org>\n+\n+module stringutils\n+  interface\n+    pure function strlen(handle) result(len)\n+      integer, intent(in) :: handle\n+      integer :: len\n+    end function\n+  end interface\n+end module\n+module intermediate ! does not die if this module is merged with stringutils\n+  contains\n+  function tostring(handle) result(string)\n+    use stringutils\n+    integer, intent(in) :: handle\n+    character(len=strlen(handle)) :: string\n+  end function\n+end module\n+module usage\n+  contains\n+  subroutine dies_here(handle)\n+    use stringutils ! does not die if this unnecessary line is omitted or placed after \"use intermediate\"\n+    use intermediate\n+    integer :: handle\n+    write(*,*) tostring(handle) ! ICE\n+  end subroutine\n+end module\n+\n+"}]}