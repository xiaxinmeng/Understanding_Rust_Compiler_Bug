{"sha": "ad6003f260068a46bd378c5601604bc1cf077e74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ2MDAzZjI2MDA2OGE0NmJkMzc4YzU2MDE2MDRiYzFjZjA3N2U3NA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-03-20T23:14:35Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-03-20T23:14:35Z"}, "message": "tree-scalar-evolution.c (chrec_contains_symbols_defined_in_loop): Use is_gimple_min_invariant instead of TREE_INVARIANT.\n\n2008-03-21  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-scalar-evolution.c (chrec_contains_symbols_defined_in_loop):\n\tUse is_gimple_min_invariant instead of TREE_INVARIANT.\n\t* tree-ssa-loop-ivopts.c (force_expr_to_var_cost): Likewise.\n\t* tree-ssa-dom.c (record_equality): Likewise.\n\t* tree-inline.c (copy_body_r): Likewise.\n\t* tree-ssa-pre.c (make_values_for_stmt): Remove test for\n\tTREE_INVARIANT.\n\nFrom-SVN: r133403", "tree": {"sha": "1118cd00df41aae6eb9b333544d174fc12d3fc3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1118cd00df41aae6eb9b333544d174fc12d3fc3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad6003f260068a46bd378c5601604bc1cf077e74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad6003f260068a46bd378c5601604bc1cf077e74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad6003f260068a46bd378c5601604bc1cf077e74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad6003f260068a46bd378c5601604bc1cf077e74/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2acdc1fb2d1f9b72672256ba3aa5fd74d1436223", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2acdc1fb2d1f9b72672256ba3aa5fd74d1436223", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2acdc1fb2d1f9b72672256ba3aa5fd74d1436223"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "25d73b87eb0786cd57429d8d40e06f47ad6a6b70", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad6003f260068a46bd378c5601604bc1cf077e74/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad6003f260068a46bd378c5601604bc1cf077e74/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad6003f260068a46bd378c5601604bc1cf077e74", "patch": "@@ -1,3 +1,13 @@\n+2008-03-21  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-scalar-evolution.c (chrec_contains_symbols_defined_in_loop):\n+\tUse is_gimple_min_invariant instead of TREE_INVARIANT.\n+\t* tree-ssa-loop-ivopts.c (force_expr_to_var_cost): Likewise.\n+\t* tree-ssa-dom.c (record_equality): Likewise.\n+\t* tree-inline.c (copy_body_r): Likewise.\n+\t* tree-ssa-pre.c (make_values_for_stmt): Remove test for\n+\tTREE_INVARIANT.\n+\n 2008-03-20  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* config/sh/sh.c (split_branches): Pass zero to\tredirect_jump"}, {"sha": "216e3b4664d8a262bee8e76bb20e00558ad99d80", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad6003f260068a46bd378c5601604bc1cf077e74/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad6003f260068a46bd378c5601604bc1cf077e74/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=ad6003f260068a46bd378c5601604bc1cf077e74", "patch": "@@ -773,7 +773,7 @@ copy_body_r (tree *tp, int *walk_subtrees, void *data)\n \t and friends are up-to-date.  */\n       else if (TREE_CODE (*tp) == ADDR_EXPR)\n \t{\n-\t  int invariant = TREE_INVARIANT (*tp);\n+\t  int invariant = is_gimple_min_invariant (*tp);\n \t  walk_tree (&TREE_OPERAND (*tp, 0), copy_body_r, id, NULL);\n \t  /* Handle the case where we substituted an INDIRECT_REF\n \t     into the operand of the ADDR_EXPR.  */\n@@ -783,7 +783,7 @@ copy_body_r (tree *tp, int *walk_subtrees, void *data)\n \t    recompute_tree_invariant_for_addr_expr (*tp);\n \t  /* If this used to be invariant, but is not any longer,\n \t     then regimplification is probably needed.  */\n-\t  if (invariant && !TREE_INVARIANT (*tp))\n+\t  if (invariant && !is_gimple_min_invariant (*tp))\n \t    id->regimplify = true;\n \t  *walk_subtrees = 0;\n \t}"}, {"sha": "29f0dcf8f4c3eb65d740e0859bb9ef7cc9d7d85d", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad6003f260068a46bd378c5601604bc1cf077e74/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad6003f260068a46bd378c5601604bc1cf077e74/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=ad6003f260068a46bd378c5601604bc1cf077e74", "patch": "@@ -360,7 +360,7 @@ chrec_contains_symbols_defined_in_loop (const_tree chrec, unsigned loop_nb)\n   if (chrec == NULL_TREE)\n     return false;\n \n-  if (TREE_INVARIANT (chrec))\n+  if (is_gimple_min_invariant (chrec))\n     return false;\n \n   if (TREE_CODE (chrec) == VAR_DECL"}, {"sha": "64ff4efca852cb43424c4d3daa1c160bdff6b1a2", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad6003f260068a46bd378c5601604bc1cf077e74/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad6003f260068a46bd378c5601604bc1cf077e74/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=ad6003f260068a46bd378c5601604bc1cf077e74", "patch": "@@ -1146,11 +1146,12 @@ record_equality (tree x, tree y)\n      (by depth), then use that.\n      Otherwise it doesn't matter which value we choose, just so\n      long as we canonicalize on one value.  */\n-  if (TREE_INVARIANT (y))\n+  if (is_gimple_min_invariant (y))\n     ;\n-  else if (TREE_INVARIANT (x) || (loop_depth_of_name (x) <= loop_depth_of_name (y)))\n+  else if (is_gimple_min_invariant (x)\n+\t   || (loop_depth_of_name (x) <= loop_depth_of_name (y)))\n     prev_x = x, x = y, y = prev_x, prev_x = prev_y;\n-  else if (prev_x && TREE_INVARIANT (prev_x))\n+  else if (prev_x && is_gimple_min_invariant (prev_x))\n     x = y, y = prev_x, prev_x = prev_y;\n   else if (prev_y && TREE_CODE (prev_y) != VALUE_HANDLE)\n     y = prev_y;"}, {"sha": "93f3be6b502dfc3873310a126564cb17a810ed10", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad6003f260068a46bd378c5601604bc1cf077e74/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad6003f260068a46bd378c5601604bc1cf077e74/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=ad6003f260068a46bd378c5601604bc1cf077e74", "patch": "@@ -3222,7 +3222,7 @@ force_expr_to_var_cost (tree expr)\n   if (SSA_VAR_P (expr))\n     return zero_cost;\n \n-  if (TREE_INVARIANT (expr))\n+  if (is_gimple_min_invariant (expr))\n     {\n       if (TREE_CODE (expr) == INTEGER_CST)\n \treturn new_cost (integer_cost, 0);"}, {"sha": "13c4e979b7de2e2ba7b4f921f297eebba069ab97", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad6003f260068a46bd378c5601604bc1cf077e74/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad6003f260068a46bd378c5601604bc1cf077e74/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=ad6003f260068a46bd378c5601604bc1cf077e74", "patch": "@@ -3369,7 +3369,6 @@ make_values_for_stmt (tree stmt, basic_block block)\n \t    && !SSA_NAME_OCCURS_IN_ABNORMAL_PHI (rhs))\n \t   || is_gimple_min_invariant (rhs)\n \t   || TREE_CODE (rhs) == ADDR_EXPR\n-\t   || TREE_INVARIANT (rhs)\n \t   || DECL_P (rhs))\n     {\n "}]}