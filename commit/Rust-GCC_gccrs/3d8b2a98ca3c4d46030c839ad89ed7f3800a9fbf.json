{"sha": "3d8b2a98ca3c4d46030c839ad89ed7f3800a9fbf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q4YjJhOThjYTNjNGQ0NjAzMGM4MzlhZDg5ZWQ3ZjM4MDBhOWZiZg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2009-06-12T19:43:25Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2009-06-12T19:43:25Z"}, "message": "cpplib.h (struct cpp_options): Add warn_cxx_operator_names field.\n\nlibcpp/:\n\t* include/cpplib.h (struct cpp_options): Add\n\twarn_cxx_operator_names field.\n\t(NODE_WARN_OPERATOR): Define.\n\t(struct cpp_hashnode): Increase flags field to 10 bits, decrease\n\ttype to 6 bits.\n\t* init.c (mark_named_operators): Add flags parameter.\n\t(cpp_post_options): Pick flags value to pass to\n\tmark_named_operators.\n\t* lex.c (lex_identifier): If NODE_WARN_OPERATOR is set, warn that\n\tidentifier is an operator name in C++.\ngcc/:\n\t* fold-const.c (fold_unary): Rename local variable and to\n\tand_expr.\n\t* c-opts.c (c_common_handle_option): For -Wc++-compat set\n\tcpp_opts->warn_cxx_operator_names.\ngcc/testsuite/:\n\t* gcc.dg/Wcxx-compat-13.c: New testcase.\n\nFrom-SVN: r148438", "tree": {"sha": "b9bfc85db3cdd44094798b79ced86e5d51c66281", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9bfc85db3cdd44094798b79ced86e5d51c66281"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d8b2a98ca3c4d46030c839ad89ed7f3800a9fbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d8b2a98ca3c4d46030c839ad89ed7f3800a9fbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d8b2a98ca3c4d46030c839ad89ed7f3800a9fbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d8b2a98ca3c4d46030c839ad89ed7f3800a9fbf/comments", "author": null, "committer": null, "parents": [{"sha": "737142ced7510afcd0144c866d9169ac7cbf3fb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/737142ced7510afcd0144c866d9169ac7cbf3fb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/737142ced7510afcd0144c866d9169ac7cbf3fb6"}], "stats": {"total": 93, "additions": 82, "deletions": 11}, "files": [{"sha": "d8c08aa99203e4ac6de3994b3dc79d3f3b1ac600", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d8b2a98ca3c4d46030c839ad89ed7f3800a9fbf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d8b2a98ca3c4d46030c839ad89ed7f3800a9fbf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d8b2a98ca3c4d46030c839ad89ed7f3800a9fbf", "patch": "@@ -1,3 +1,11 @@\n+2009-06-12  Ian Lance Taylor  <iant@google.com>\n+\n+\t* fold-const.c (fold_unary): Rename local variable and to\n+\tand_expr.\n+\n+\t* c-opts.c (c_common_handle_option): For -Wc++-compat set\n+\tcpp_opts->warn_cxx_operator_names.\n+\n 2009-06-12  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR tree-opt/38865"}, {"sha": "0050ab558390f610a8b06007a8232e7b08ebe8d6", "filename": "gcc/c-opts.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d8b2a98ca3c4d46030c839ad89ed7f3800a9fbf/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d8b2a98ca3c4d46030c839ad89ed7f3800a9fbf/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=3d8b2a98ca3c4d46030c839ad89ed7f3800a9fbf", "patch": "@@ -445,6 +445,7 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n \t implies -Wenum-compare.  */\n       if (warn_enum_compare == -1 && value)\n \twarn_enum_compare = value;\n+      cpp_opts->warn_cxx_operator_names = value;\n       break;\n \n     case OPT_Wdeprecated:"}, {"sha": "433ec6085ab10d1986cb6dac7ece4d4e4314eda3", "filename": "gcc/fold-const.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d8b2a98ca3c4d46030c839ad89ed7f3800a9fbf/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d8b2a98ca3c4d46030c839ad89ed7f3800a9fbf/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=3d8b2a98ca3c4d46030c839ad89ed7f3800a9fbf", "patch": "@@ -8290,13 +8290,14 @@ fold_unary (enum tree_code code, tree type, tree op0)\n \t  && TREE_CODE (op0) == BIT_AND_EXPR\n \t  && TREE_CODE (TREE_OPERAND (op0, 1)) == INTEGER_CST)\n \t{\n-\t  tree and = op0;\n-\t  tree and0 = TREE_OPERAND (and, 0), and1 = TREE_OPERAND (and, 1);\n+\t  tree and_expr = op0;\n+\t  tree and0 = TREE_OPERAND (and_expr, 0);\n+\t  tree and1 = TREE_OPERAND (and_expr, 1);\n \t  int change = 0;\n \n-\t  if (TYPE_UNSIGNED (TREE_TYPE (and))\n+\t  if (TYPE_UNSIGNED (TREE_TYPE (and_expr))\n \t      || (TYPE_PRECISION (type)\n-\t\t  <= TYPE_PRECISION (TREE_TYPE (and))))\n+\t\t  <= TYPE_PRECISION (TREE_TYPE (and_expr))))\n \t    change = 1;\n \t  else if (TYPE_PRECISION (TREE_TYPE (and1))\n \t\t   <= HOST_BITS_PER_WIDE_INT"}, {"sha": "8904945838fda71b51efd771819cff6ac14bf2a0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d8b2a98ca3c4d46030c839ad89ed7f3800a9fbf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d8b2a98ca3c4d46030c839ad89ed7f3800a9fbf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3d8b2a98ca3c4d46030c839ad89ed7f3800a9fbf", "patch": "@@ -1,3 +1,7 @@\n+2009-06-12  Ian Lance Taylor  <iant@google.com>\n+\n+\t* gcc.dg/Wcxx-compat-13.c: New testcase.\n+\n 2009-06-12  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR tree-opt/38865"}, {"sha": "188239644609a6fd13cddfebb5b784c66bbe963e", "filename": "gcc/testsuite/gcc.dg/Wcxx-compat-13.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d8b2a98ca3c4d46030c839ad89ed7f3800a9fbf/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d8b2a98ca3c4d46030c839ad89ed7f3800a9fbf/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-13.c?ref=3d8b2a98ca3c4d46030c839ad89ed7f3800a9fbf", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wc++-compat\" } */\n+\n+int and;\t\t\t/* { dg-warning \"operator\" } */\n+int and_eq;\t\t\t/* { dg-warning \"operator\" } */\n+int bitand;\t\t\t/* { dg-warning \"operator\" } */\n+int bitor;\t\t\t/* { dg-warning \"operator\" } */\n+int compl;\t\t\t/* { dg-warning \"operator\" } */\n+int not;\t\t\t/* { dg-warning \"operator\" } */\n+int not_eq;\t\t\t/* { dg-warning \"operator\" } */\n+int or;\t\t\t\t/* { dg-warning \"operator\" } */\n+int or_eq;\t\t\t/* { dg-warning \"operator\" } */\n+int xor;\t\t\t/* { dg-warning \"operator\" } */\n+int xor_eq;\t\t\t/* { dg-warning \"operator\" } */\n+\n+#define M1 and\t\t\t/* { dg-warning \"operator\" } */\n+#define M2 and_eq\t\t/* { dg-warning \"operator\" } */\n+#define M3 bitand\t\t/* { dg-warning \"operator\" } */\n+#define M4 bitor\t\t/* { dg-warning \"operator\" } */\n+#define M5 compl\t\t/* { dg-warning \"operator\" } */\n+#define M6 not\t\t\t/* { dg-warning \"operator\" } */\n+#define M7 not_eq\t\t/* { dg-warning \"operator\" } */\n+#define M8 or\t\t\t/* { dg-warning \"operator\" } */\n+#define M9 or_eq\t\t/* { dg-warning \"operator\" } */\n+#define M10 xor\t\t\t/* { dg-warning \"operator\" } */\n+#define M11 xor_eq\t\t/* { dg-warning \"operator\" } */"}, {"sha": "263d8441cc94fb333efc75e446bdaf6628df1505", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d8b2a98ca3c4d46030c839ad89ed7f3800a9fbf/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d8b2a98ca3c4d46030c839ad89ed7f3800a9fbf/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=3d8b2a98ca3c4d46030c839ad89ed7f3800a9fbf", "patch": "@@ -1,3 +1,16 @@\n+2009-06-12  Ian Lance Taylor  <iant@google.com>\n+\n+\t* include/cpplib.h (struct cpp_options): Add\n+\twarn_cxx_operator_names field.\n+\t(NODE_WARN_OPERATOR): Define.\n+\t(struct cpp_hashnode): Increase flags field to 10 bits, decrease\n+\ttype to 6 bits.\n+\t* init.c (mark_named_operators): Add flags parameter.\n+\t(cpp_post_options): Pick flags value to pass to\n+\tmark_named_operators.\n+\t* lex.c (lex_identifier): If NODE_WARN_OPERATOR is set, warn that\n+\tidentifier is an operator name in C++.\n+\n 2009-06-01  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* include/line-map.h (LAST_SOURCE_COLUMN): New."}, {"sha": "a91f1552158603e6431df4c0686a824b3bfb63d1", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d8b2a98ca3c4d46030c839ad89ed7f3800a9fbf/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d8b2a98ca3c4d46030c839ad89ed7f3800a9fbf/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=3d8b2a98ca3c4d46030c839ad89ed7f3800a9fbf", "patch": "@@ -397,6 +397,9 @@ struct cpp_options\n   /* Nonzero means handle C++ alternate operator names.  */\n   unsigned char operator_names;\n \n+  /* Nonzero means warn about use of C++ alternate operator names.  */\n+  unsigned char warn_cxx_operator_names;\n+\n   /* True for traditional preprocessing.  */\n   unsigned char traditional;\n \n@@ -555,7 +558,8 @@ extern const char *progname;\n    identifier that behaves like an operator such as \"xor\".\n    NODE_DIAGNOSTIC is for speed in lex_token: it indicates a\n    diagnostic may be required for this node.  Currently this only\n-   applies to __VA_ARGS__ and poisoned identifiers.  */\n+   applies to __VA_ARGS__, poisoned identifiers, and -Wc++-compat\n+   warnings about NODE_OPERATOR.  */\n \n /* Hash node flags.  */\n #define NODE_OPERATOR\t(1 << 0)\t/* C++ named operator.  */\n@@ -567,6 +571,7 @@ extern const char *progname;\n #define NODE_MACRO_ARG\t(1 << 6)\t/* Used during #define processing.  */\n #define NODE_USED\t(1 << 7)\t/* Dumped with -dU.  */\n #define NODE_CONDITIONAL (1 << 8)\t/* Conditional macro */\n+#define NODE_WARN_OPERATOR (1 << 9)\t/* Warn about C++ named operator.  */\n \n /* Different flavors of hash node.  */\n enum node_type\n@@ -636,8 +641,8 @@ struct GTY(()) cpp_hashnode {\n \t\t\t\t\t   then index into directive table.\n \t\t\t\t\t   Otherwise, a NODE_OPERATOR.  */\n   unsigned char rid_code;\t\t/* Rid code - for front ends.  */\n-  ENUM_BITFIELD(node_type) type : 7;\t/* CPP node type.  */\n-  unsigned int flags : 9;\t\t/* CPP flags.  */\n+  ENUM_BITFIELD(node_type) type : 6;\t/* CPP node type.  */\n+  unsigned int flags : 10;\t\t/* CPP flags.  */\n \n   union _cpp_hashnode_value GTY ((desc (\"CPP_HASHNODE_VALUE_IDX (%1)\"))) value;\n };"}, {"sha": "e5be4e2b1b46375dceaf9d2064d4e53bf09e02af", "filename": "libcpp/init.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d8b2a98ca3c4d46030c839ad89ed7f3800a9fbf/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d8b2a98ca3c4d46030c839ad89ed7f3800a9fbf/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=3d8b2a98ca3c4d46030c839ad89ed7f3800a9fbf", "patch": "@@ -28,7 +28,7 @@ along with this program; see the file COPYING3.  If not see\n #include \"localedir.h\"\n \n static void init_library (void);\n-static void mark_named_operators (cpp_reader *);\n+static void mark_named_operators (cpp_reader *, int);\n static void read_original_filename (cpp_reader *);\n static void read_original_directory (cpp_reader *);\n static void post_options (cpp_reader *);\n@@ -366,7 +366,7 @@ static const struct builtin_operator operator_array[] =\n \n /* Mark the C++ named operators in the hash table.  */\n static void\n-mark_named_operators (cpp_reader *pfile)\n+mark_named_operators (cpp_reader *pfile, int flags)\n {\n   const struct builtin_operator *b;\n \n@@ -375,7 +375,7 @@ mark_named_operators (cpp_reader *pfile)\n        b++)\n     {\n       cpp_hashnode *hp = cpp_lookup (pfile, b->name, b->len);\n-      hp->flags |= NODE_OPERATOR;\n+      hp->flags |= flags;\n       hp->is_directive = 0;\n       hp->directive_index = b->value;\n     }\n@@ -512,13 +512,20 @@ static void sanity_checks (cpp_reader *pfile)\n void\n cpp_post_options (cpp_reader *pfile)\n {\n+  int flags;\n+\n   sanity_checks (pfile);\n \n   post_options (pfile);\n \n   /* Mark named operators before handling command line macros.  */\n+  flags = 0;\n   if (CPP_OPTION (pfile, cplusplus) && CPP_OPTION (pfile, operator_names))\n-    mark_named_operators (pfile);\n+    flags |= NODE_OPERATOR;\n+  if (CPP_OPTION (pfile, warn_cxx_operator_names))\n+    flags |= NODE_DIAGNOSTIC | NODE_WARN_OPERATOR;\n+  if (flags != 0)\n+    mark_named_operators (pfile, flags);\n }\n \n /* Setup for processing input from the file named FNAME, or stdin if"}, {"sha": "bab14a4baa3d761f34f512f0f677071f3abef372", "filename": "libcpp/lex.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d8b2a98ca3c4d46030c839ad89ed7f3800a9fbf/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d8b2a98ca3c4d46030c839ad89ed7f3800a9fbf/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=3d8b2a98ca3c4d46030c839ad89ed7f3800a9fbf", "patch": "@@ -560,6 +560,12 @@ lex_identifier (cpp_reader *pfile, const uchar *base, bool starts_ucn,\n \tcpp_error (pfile, CPP_DL_PEDWARN,\n \t\t   \"__VA_ARGS__ can only appear in the expansion\"\n \t\t   \" of a C99 variadic macro\");\n+\n+      /* For -Wc++-compat, warn about use of C++ named operators.  */\n+      if (result->flags & NODE_WARN_OPERATOR)\n+\tcpp_error (pfile, CPP_DL_WARNING,\n+\t\t   \"identifier \\\"%s\\\" is a special operator name in C++\",\n+\t\t   NODE_NAME (result));\n     }\n \n   return result;"}]}