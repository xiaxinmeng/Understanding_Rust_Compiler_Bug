{"sha": "62663034afa8c50adf7128eb459999a8d70b665d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI2NjMwMzRhZmE4YzUwYWRmNzEyOGViNDU5OTk5YThkNzBiNjY1ZA==", "commit": {"author": {"name": "Tony Reix", "email": "tony.reix@atos.net", "date": "2017-08-30T14:08:00Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-08-30T14:08:00Z"}, "message": "simple-object-xcoff.c (simple_object_xcoff_find_sections): Improve .go_export csect handling.\n\n\t* simple-object-xcoff.c (simple_object_xcoff_find_sections):\n\tImprove .go_export csect handling.  Don't make assumptions\n\ton containing section or number of auxiliary entries.\n\nFrom-SVN: r251533", "tree": {"sha": "960426202fef060cee6cbc9e679d029ca223779a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/960426202fef060cee6cbc9e679d029ca223779a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62663034afa8c50adf7128eb459999a8d70b665d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62663034afa8c50adf7128eb459999a8d70b665d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62663034afa8c50adf7128eb459999a8d70b665d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62663034afa8c50adf7128eb459999a8d70b665d/comments", "author": {"login": "trex58", "id": 5690106, "node_id": "MDQ6VXNlcjU2OTAxMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/5690106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/trex58", "html_url": "https://github.com/trex58", "followers_url": "https://api.github.com/users/trex58/followers", "following_url": "https://api.github.com/users/trex58/following{/other_user}", "gists_url": "https://api.github.com/users/trex58/gists{/gist_id}", "starred_url": "https://api.github.com/users/trex58/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/trex58/subscriptions", "organizations_url": "https://api.github.com/users/trex58/orgs", "repos_url": "https://api.github.com/users/trex58/repos", "events_url": "https://api.github.com/users/trex58/events{/privacy}", "received_events_url": "https://api.github.com/users/trex58/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6cc30cb4ff182583ffbebe9819973b5b693322fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cc30cb4ff182583ffbebe9819973b5b693322fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cc30cb4ff182583ffbebe9819973b5b693322fd"}], "stats": {"total": 138, "additions": 93, "deletions": 45}, "files": [{"sha": "e8165a0911a9b68dc20e66b5092bf82fe66210e6", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62663034afa8c50adf7128eb459999a8d70b665d/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62663034afa8c50adf7128eb459999a8d70b665d/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=62663034afa8c50adf7128eb459999a8d70b665d", "patch": "@@ -1,3 +1,9 @@\n+2017-08-29  Tony Reix  <tony.reix@atos.net>\n+\n+\t* simple-object-xcoff.c (simple_object_xcoff_find_sections):\n+\tImprove .go_export csect handling.  Don't make assumptions\n+\ton containing section or number of auxiliary entries.\n+\n 2017-08-28  Richard Biener  <rguenther@suse.de>\n \n \tPR lto/81968"}, {"sha": "9a8f581563f0e9c83828c3ec1742e4773c37a2a0", "filename": "libiberty/simple-object-xcoff.c", "status": "modified", "additions": 87, "deletions": 45, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62663034afa8c50adf7128eb459999a8d70b665d/libiberty%2Fsimple-object-xcoff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62663034afa8c50adf7128eb459999a8d70b665d/libiberty%2Fsimple-object-xcoff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fsimple-object-xcoff.c?ref=62663034afa8c50adf7128eb459999a8d70b665d", "patch": "@@ -255,10 +255,14 @@ union external_auxent\n #define IMAGE_SYM_TYPE \\\n   ((IMAGE_SYM_DTYPE_NULL << 4) | IMAGE_SYM_TYPE_NULL)\n \n+#define C_EXT\t\t(2)\n #define C_STAT\t\t(3)\n #define C_FILE\t\t(103)\n+#define C_HIDEXT\t(107)\n \n-#define DBXMASK\t\t0x80\n+#define XTY_SD\t\t(1)\t/* section definition */\n+\n+#define XMC_XO\t\t(7)\t/* extended operation */\n \n /* Private data for an simple_object_read.  */\n \n@@ -400,14 +404,14 @@ simple_object_xcoff_find_sections (simple_object_read *sobj,\n   size_t scnhdr_size;\n   unsigned char *scnbuf;\n   const char *errmsg;\n+  unsigned short (*fetch_16) (const unsigned char *);\n   unsigned int (*fetch_32) (const unsigned char *);\n   ulong_type (*fetch_64) (const unsigned char *);\n   unsigned int nscns;\n   char *strtab;\n   size_t strtab_size;\n   struct external_syment *symtab = NULL;\n   unsigned int i;\n-  off_t textptr = 0;\n \n   scnhdr_size = u64 ? SCNHSZ64 : SCNHSZ32;\n   scnbuf = XNEWVEC (unsigned char, scnhdr_size * ocr->nscns);\n@@ -420,6 +424,7 @@ simple_object_xcoff_find_sections (simple_object_read *sobj,\n       return errmsg;\n     }\n \n+  fetch_16 = simple_object_fetch_big_16;\n   fetch_32 = simple_object_fetch_big_32;\n   fetch_64 = simple_object_fetch_big_64;\n \n@@ -433,7 +438,7 @@ simple_object_xcoff_find_sections (simple_object_read *sobj,\n       char namebuf[SCNNMLEN + 1];\n       char *name;\n       off_t scnptr;\n-      unsigned int size;\n+      off_t size;\n \n       scnhdr = scnbuf + i * scnhdr_size;\n       scnname = scnhdr + offsetof (struct external_scnhdr, s_name);\n@@ -489,24 +494,24 @@ simple_object_xcoff_find_sections (simple_object_read *sobj,\n \t\t\t\t\t      u.xcoff32.s_size));\n \t}\n \n-      if (strcmp (name, \".text\") == 0)\n-\ttextptr = scnptr;\n       if (!(*pfn) (data, name, scnptr, size))\n \tbreak;\n     }\n \n-  /* Special handling for .go_export CSECT. */\n-  if (textptr != 0 && ocr->nsyms > 0)\n+  /* Special handling for .go_export csect.  */\n+  if (ocr->nsyms > 0)\n     {\n-      unsigned char *sym, *aux;\n+      unsigned char *sym;\n       const char *n_name;\n-      unsigned long n_value, n_offset, n_zeroes, x_scnlen;\n+      off_t size, n_value;\n+      unsigned int n_numaux, n_offset, n_zeroes;\n+      short n_scnum;\n \n-      /* Read symbol table. */\n+      /* Read symbol table.  */\n       symtab = XNEWVEC (struct external_syment, ocr->nsyms * SYMESZ);\n       if (!simple_object_internal_read (sobj->descriptor,\n \t\t\t\t\tsobj->offset + ocr->symptr,\n-\t\t\t\t\t(unsigned char *)symtab,\n+\t\t\t\t\t(unsigned char *) symtab,\n \t\t\t\t\tocr->nsyms * SYMESZ,\n \t\t\t\t\t&errmsg, err))\n \t{\n@@ -515,17 +520,25 @@ simple_object_xcoff_find_sections (simple_object_read *sobj,\n \t  return NULL;\n \t}\n \n-      /* Search in symbol table if we have a \".go_export\" symbol. */\n-      for (i = 0; i < ocr->nsyms; ++i)\n+      /* Search in symbol table if we have a \".go_export\" symbol.  */\n+      for (i = 0; i < ocr->nsyms; i += n_numaux + 1)\n \t{\n-\t  sym = (unsigned char *)&symtab[i];\n+\t  sym = (unsigned char *) &symtab[i];\n+\t  n_numaux = symtab[i].n_numaux[0];\n+\n+\t  if (symtab[i].n_sclass[0] != C_EXT\n+\t      && symtab[i].n_sclass[0] != C_HIDEXT)\n+\t    continue;\n+\n+\t  /* Must have at least one csect auxiliary entry.  */\n+\t  if (n_numaux < 1 || i + n_numaux >= ocr->nsyms)\n+\t    continue;\n+\n+\t  n_scnum = fetch_16 (sym + offsetof (struct external_syment,\n+\t\t\t\t\t      n_scnum));\n+\t  if (n_scnum < 1 || (unsigned int) n_scnum > nscns)\n+\t    continue;\n \n-\t  if (symtab[i].n_sclass[0] & DBXMASK)\n-\t    {\n-\t      /* Skip debug symbols whose names are in stabs. */\n-\t      i += symtab[i].n_numaux[0];\n-\t      continue;\n-\t    }\n \t  if (u64)\n \t    {\n \t      n_value = fetch_64 (sym + offsetof (struct external_syment,\n@@ -535,67 +548,96 @@ simple_object_xcoff_find_sections (simple_object_read *sobj,\n \t    }\n \t  else\n \t    {\n-\t      /* \".go_export\" is longer than N_SYMNMLEN */\n+\t      /* \".go_export\" is longer than N_SYMNMLEN.  */\n \t      n_zeroes = fetch_32 (sym + offsetof (struct external_syment,\n \t\t\t\t\t\t   u.xcoff32.n.n.n_zeroes));\n \t      if (n_zeroes != 0)\n-\t\t{\n-\t\t  /* Skip auxiliary entries. */\n-\t\t  i += symtab[i].n_numaux[0];\n-\t\t  continue;\n-\t\t}\n+\t\tcontinue;\n+\n \t      n_value = fetch_32 (sym + offsetof (struct external_syment,\n \t\t\t\t\t\t  u.xcoff32.n_value));\n \t      n_offset = fetch_32 (sym + offsetof (struct external_syment,\n \t\t\t\t\t\t   u.xcoff32.n.n.n_offset));\n \t    }\n \n-\t  /* The real section name is found in the string table.  */\n+\t  /* The real symbol name is found in the string table.  */\n \t  if (strtab == NULL)\n \t    {\n \t      strtab = simple_object_xcoff_read_strtab (sobj,\n-\t  \t\t\t\t\t        &strtab_size,\n+\t  \t\t\t\t\t\t&strtab_size,\n \t\t\t\t\t\t\t&errmsg, err);\n \t      if (strtab == NULL)\n-\t        {\n-                  XDELETEVEC (symtab);\n-\t          XDELETEVEC (scnbuf);\n+\t\t{\n+\t\t  XDELETEVEC (symtab);\n+\t\t  XDELETEVEC (scnbuf);\n \t\t  return errmsg;\n-\t        }\n+\t\t}\n \t    }\n \n \t  if (n_offset >= strtab_size)\n-            {\n+\t    {\n \t      XDELETEVEC (strtab);\n \t      XDELETEVEC (symtab);\n \t      XDELETEVEC (scnbuf);\n \t      *err = 0;\n-   \t      return \"section string index out of range\";\n-            }\n-          n_name = strtab + n_offset;\n+\t      return \"symbol string index out of range\";\n+\t    }\n+\t  n_name = strtab + n_offset;\n \n-\t  if (!strcmp(n_name, \".go_export\"))\n+\t  if (!strcmp (n_name, \".go_export\"))\n \t    {\n-\t      /* Found .go_export symbol, read auxiliary entry. */\n-\t      if (i + 1 >= ocr->nsyms)\n-\t\tbreak;\n-\n-\t      aux = (unsigned char *)&symtab[i + 1];\n+\t      union external_auxent *auxent;\n+\t      unsigned char *aux, *scnhdr;\n+\t      off_t scnptr, x_scnlen;\n+\n+\t      /* Found .go_export symbol, read its csect auxiliary entry.\n+\t\t By convention, it is the last auxiliary entry.  */\n+\t      auxent = (union external_auxent *) &symtab[i + n_numaux];\n+\t      aux = (unsigned char *) auxent;\n \t      if (u64)\n \t\t{\n+\t\t  if ((auxent->u.xcoff64.x_csect.x_smtyp & 0x7) != XTY_SD\n+\t\t      || auxent->u.xcoff64.x_csect.x_smclas != XMC_XO)\n+\t\t    continue;\n+\n \t\t  x_scnlen = fetch_32 (aux + offsetof (union external_auxent,\n+\t\t\t\t\t\t       u.xcoff64.x_csect.x_scnlen_hi));\n+\t\t  x_scnlen = x_scnlen << 32\n+\t\t\t   | fetch_32 (aux + offsetof (union external_auxent,\n \t\t\t\t\t\t       u.xcoff64.x_csect.x_scnlen_lo));\n \t\t}\n \t      else\n \t\t{\n+\t\t  if ((auxent->u.xcoff32.x_csect.x_smtyp & 0x7) != XTY_SD\n+\t\t      || auxent->u.xcoff32.x_csect.x_smclas != XMC_XO)\n+\t\t    continue;\n+\n \t\t  x_scnlen = fetch_32 (aux + offsetof (union external_auxent,\n \t\t\t\t\t\t       u.xcoff32.x_csect.x_scnlen));\n \t\t}\n-\t      (*pfn) (data, \".go_export\", textptr + n_value, x_scnlen);\n+\n+\t      /* Get header of containing section.  */\n+\t      scnhdr = scnbuf + (n_scnum - 1) * scnhdr_size;\n+\t      if (u64)\n+\t\t{\n+\t\t  scnptr = fetch_64 (scnhdr + offsetof (struct external_scnhdr,\n+\t\t\t\t\t\t\tu.xcoff64.s_scnptr));\n+\t\t  size = fetch_64 (scnhdr + offsetof (struct external_scnhdr,\n+\t\t\t\t\t\t      u.xcoff64.s_size));\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  scnptr = fetch_32 (scnhdr + offsetof (struct external_scnhdr,\n+\t\t\t\t\t\t\tu.xcoff32.s_scnptr));\n+\t\t  size = fetch_32 (scnhdr + offsetof (struct external_scnhdr,\n+\t\t\t\t\t\t      u.xcoff32.s_size));\n+\t\t}\n+\t      if (n_value + x_scnlen > size)\n+\t\tbreak;\n+\n+\t      (*pfn) (data, \".go_export\", scnptr + n_value, x_scnlen);\n \t      break;\n \t    }\n-\t  /* Skip auxiliary entries. */\n-\t  i += symtab[i].n_numaux[0];\n \t}\n     }\n "}]}