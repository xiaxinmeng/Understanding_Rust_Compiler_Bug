{"sha": "6b916b36f11df5c86b437f7bf6e38aab437006c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI5MTZiMzZmMTFkZjVjODZiNDM3ZjdiZjZlMzhhYWI0MzcwMDZjNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-01-15T15:13:08Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-01-15T15:13:08Z"}, "message": "re PR tree-optimization/59822 (ice in compute_live_loop_exits with -O3)\n\n2014-01-15  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/59822\n\t* tree-vect-stmts.c (hoist_defs_of_uses): New function.\n\t(vectorizable_load): Use it to hoist defs of uses of invariant\n\tloads out of the loop.\n\n\t* g++.dg/torture/pr59822.C: New testcase.\n\nFrom-SVN: r206630", "tree": {"sha": "2ce49f0eb56f8261c3d8f328a8bea6e3fe3e6e99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ce49f0eb56f8261c3d8f328a8bea6e3fe3e6e99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b916b36f11df5c86b437f7bf6e38aab437006c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b916b36f11df5c86b437f7bf6e38aab437006c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b916b36f11df5c86b437f7bf6e38aab437006c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b916b36f11df5c86b437f7bf6e38aab437006c5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "17c77f44b188b16f24b43bfdde90a4a069d65d95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17c77f44b188b16f24b43bfdde90a4a069d65d95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17c77f44b188b16f24b43bfdde90a4a069d65d95"}], "stats": {"total": 82, "additions": 81, "deletions": 1}, "files": [{"sha": "7ddff7560577640211dba1153f5b3607b544853e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b916b36f11df5c86b437f7bf6e38aab437006c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b916b36f11df5c86b437f7bf6e38aab437006c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b916b36f11df5c86b437f7bf6e38aab437006c5", "patch": "@@ -1,3 +1,10 @@\n+2014-01-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/59822\n+\t* tree-vect-stmts.c (hoist_defs_of_uses): New function.\n+\t(vectorizable_load): Use it to hoist defs of uses of invariant\n+\tloads out of the loop.\n+\n 2014-01-15  Matthew Gretton-Dann  <matthew.gretton-dann@linaro.org>\n             Kugan Vivekanandarajah  <kuganv@linaro.org>\n "}, {"sha": "1df5c3a66c268e4b4360c338f9258b8b37f886a6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b916b36f11df5c86b437f7bf6e38aab437006c5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b916b36f11df5c86b437f7bf6e38aab437006c5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6b916b36f11df5c86b437f7bf6e38aab437006c5", "patch": "@@ -1,3 +1,8 @@\n+2014-01-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/59822\n+\t* g++.dg/torture/pr59822.C: New testcase.\n+\n 2014-01-15  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n \tPR target/59808"}, {"sha": "7357b6dc383a8588606062be37341e5509925b8b", "filename": "gcc/testsuite/g++.dg/torture/pr59822.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b916b36f11df5c86b437f7bf6e38aab437006c5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr59822.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b916b36f11df5c86b437f7bf6e38aab437006c5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr59822.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr59822.C?ref=6b916b36f11df5c86b437f7bf6e38aab437006c5", "patch": "@@ -0,0 +1,14 @@\n+// { dg-do compile }\n+\n+typedef struct rtvec_def *rtvec;\n+enum machine_mode { VOIDmode };\n+struct rtvec_def { void *elem[1]; };\n+extern void *const_tiny_rtx[2];\n+void\n+ix86_build_const_vector (enum machine_mode mode, bool vect,\n+\t\t\t void *value, rtvec v, int n_elt)\n+{\n+  int i;\n+  for (i = 1; i < n_elt; ++i)\n+    ((v)->elem[i]) = vect ? value : (const_tiny_rtx[(int) (mode)]);\n+}"}, {"sha": "820df7eddba4a068d42ded10a83297637c431608", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b916b36f11df5c86b437f7bf6e38aab437006c5/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b916b36f11df5c86b437f7bf6e38aab437006c5/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=6b916b36f11df5c86b437f7bf6e38aab437006c5", "patch": "@@ -5480,6 +5480,59 @@ permute_vec_elements (tree x, tree y, tree mask_vec, gimple stmt,\n   return data_ref;\n }\n \n+/* Hoist the definitions of all SSA uses on STMT out of the loop LOOP,\n+   inserting them on the loops preheader edge.  Returns true if we\n+   were successful in doing so (and thus STMT can be moved then),\n+   otherwise returns false.  */\n+\n+static bool\n+hoist_defs_of_uses (gimple stmt, struct loop *loop)\n+{\n+  ssa_op_iter i;\n+  tree op;\n+  bool any = false;\n+\n+  FOR_EACH_SSA_TREE_OPERAND (op, stmt, i, SSA_OP_USE)\n+    {\n+      gimple def_stmt = SSA_NAME_DEF_STMT (op);\n+      if (!gimple_nop_p (def_stmt)\n+\t  && flow_bb_inside_loop_p (loop, gimple_bb (def_stmt)))\n+\t{\n+\t  /* Make sure we don't need to recurse.  While we could do\n+\t     so in simple cases when there are more complex use webs\n+\t     we don't have an easy way to preserve stmt order to fulfil\n+\t     dependencies within them.  */\n+\t  tree op2;\n+\t  ssa_op_iter i2;\n+\t  FOR_EACH_SSA_TREE_OPERAND (op2, def_stmt, i2, SSA_OP_USE)\n+\t    {\n+\t      gimple def_stmt2 = SSA_NAME_DEF_STMT (op2);\n+\t      if (!gimple_nop_p (def_stmt2)\n+\t\t  && flow_bb_inside_loop_p (loop, gimple_bb (def_stmt2)))\n+\t\treturn false;\n+\t    }\n+\t  any = true;\n+\t}\n+    }\n+\n+  if (!any)\n+    return true;\n+\n+  FOR_EACH_SSA_TREE_OPERAND (op, stmt, i, SSA_OP_USE)\n+    {\n+      gimple def_stmt = SSA_NAME_DEF_STMT (op);\n+      if (!gimple_nop_p (def_stmt)\n+\t  && flow_bb_inside_loop_p (loop, gimple_bb (def_stmt)))\n+\t{\n+\t  gimple_stmt_iterator gsi = gsi_for_stmt (def_stmt);\n+\t  gsi_remove (&gsi, false);\n+\t  gsi_insert_on_edge_immediate (loop_preheader_edge (loop), def_stmt);\n+\t}\n+    }\n+\n+  return true;\n+}\n+\n /* vectorizable_load.\n \n    Check if STMT reads a non scalar data-ref (array/pointer/structure) that\n@@ -6384,7 +6437,8 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t\t  /* If we have versioned for aliasing then we are sure\n \t\t     this is a loop invariant load and thus we can insert\n \t\t     it on the preheader edge.  */\n-\t\t  if (LOOP_REQUIRES_VERSIONING_FOR_ALIAS (loop_vinfo))\n+\t\t  if (LOOP_REQUIRES_VERSIONING_FOR_ALIAS (loop_vinfo)\n+\t\t      && hoist_defs_of_uses (stmt, loop))\n \t\t    {\n \t\t      if (dump_enabled_p ())\n \t\t\t{"}]}