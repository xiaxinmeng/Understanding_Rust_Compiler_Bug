{"sha": "e6c0c44b5b43c4fef77f3a566d035db5c589ff99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZjMGM0NGI1YjQzYzRmZWY3N2YzYTU2NmQwMzVkYjVjNTg5ZmY5OQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2016-02-01T07:32:01Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2016-02-01T07:32:01Z"}, "message": "re PR rtl-optimization/69535 (wrong code with -O -fno-tree-bit-ccp -fno-tree-reassoc due to use of uninitialised value)\n\nPR rtl-opt/69535\n\n  * combine.c (make_compound_operation): When looking through a\n  subreg, make sure to re-extend to the width of the outer mode.\n\nFrom-SVN: r233032", "tree": {"sha": "1a823e636b4518bcd0082dd43b0cca0e2f504118", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a823e636b4518bcd0082dd43b0cca0e2f504118"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6c0c44b5b43c4fef77f3a566d035db5c589ff99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6c0c44b5b43c4fef77f3a566d035db5c589ff99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6c0c44b5b43c4fef77f3a566d035db5c589ff99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6c0c44b5b43c4fef77f3a566d035db5c589ff99/comments", "author": null, "committer": null, "parents": [{"sha": "2c0055380610a6430b885a2312175b71a47527a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c0055380610a6430b885a2312175b71a47527a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c0055380610a6430b885a2312175b71a47527a3"}], "stats": {"total": 70, "additions": 65, "deletions": 5}, "files": [{"sha": "bf63f26202d748078d493a272fc7599875c19fbb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6c0c44b5b43c4fef77f3a566d035db5c589ff99/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6c0c44b5b43c4fef77f3a566d035db5c589ff99/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e6c0c44b5b43c4fef77f3a566d035db5c589ff99", "patch": "@@ -1,3 +1,9 @@\n+2016-02-01  Richard Henderson  <rth@redhat.com>\n+\n+\tPR rtl-opt/69535\n+\t* combine.c (make_compound_operation): When looking through a\n+\tsubreg, make sure to re-extend to the width of the outer mode.\n+\n 2016-01-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/69546"}, {"sha": "c307793a495a8f003fa7ce002c0450eb0bf9cc5d", "filename": "gcc/combine.c", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6c0c44b5b43c4fef77f3a566d035db5c589ff99/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6c0c44b5b43c4fef77f3a566d035db5c589ff99/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=e6c0c44b5b43c4fef77f3a566d035db5c589ff99", "patch": "@@ -7887,11 +7887,25 @@ make_compound_operation (rtx x, enum rtx_code in_code)\n \t       && GET_CODE (SUBREG_REG (XEXP (x, 0))) == LSHIFTRT\n \t       && (i = exact_log2 (UINTVAL (XEXP (x, 1)) + 1)) >= 0)\n \t{\n-\t  new_rtx = make_compound_operation (XEXP (SUBREG_REG (XEXP (x, 0)), 0),\n-\t\t\t\t\t next_code);\n-\t  new_rtx = make_extraction (GET_MODE (SUBREG_REG (XEXP (x, 0))), new_rtx, 0,\n-\t\t\t\t XEXP (SUBREG_REG (XEXP (x, 0)), 1), i, 1,\n-\t\t\t\t 0, in_code == COMPARE);\n+\t  rtx inner_x0 = SUBREG_REG (XEXP (x, 0));\n+\t  machine_mode inner_mode = GET_MODE (inner_x0);\n+\t  new_rtx = make_compound_operation (XEXP (inner_x0, 0), next_code);\n+\t  new_rtx = make_extraction (inner_mode, new_rtx, 0,\n+\t\t\t\t     XEXP (inner_x0, 1),\n+\t\t\t\t     i, 1, 0, in_code == COMPARE);\n+\n+\t  if (new_rtx)\n+\t    {\n+\t      /* If we narrowed the mode when dropping the subreg, then\n+\t\t we must zero-extend to keep the semantics of the AND.  */\n+\t      if (GET_MODE_SIZE (inner_mode) >= GET_MODE_SIZE (mode))\n+\t\t;\n+\t      else if (SCALAR_INT_MODE_P (inner_mode))\n+\t\tnew_rtx = simplify_gen_unary (ZERO_EXTEND, mode,\n+\t\t\t\t\t      new_rtx, inner_mode);\n+\t      else\n+\t\tnew_rtx = NULL;\n+\t    }\n \n \t  /* If that didn't give anything, see if the AND simplifies on\n \t     its own.  */"}, {"sha": "d05a689e7b2ed53e3d93a76e02c2cb8c357188a8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6c0c44b5b43c4fef77f3a566d035db5c589ff99/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6c0c44b5b43c4fef77f3a566d035db5c589ff99/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e6c0c44b5b43c4fef77f3a566d035db5c589ff99", "patch": "@@ -1,3 +1,7 @@\n+2016-02-01  Richard Henderson  <rth@redhat.com>\n+\n+\t* gcc.dg/pr69535.c: New test.\n+\n 2016-01-31  John David Anglin  <danglin@gcc.gnu.org>\n \n \tPR testsuite/69584"}, {"sha": "4b4dad154daff004506672fe7096704d2fc7dbe0", "filename": "gcc/testsuite/gcc.dg/pr69535.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6c0c44b5b43c4fef77f3a566d035db5c589ff99/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69535.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6c0c44b5b43c4fef77f3a566d035db5c589ff99/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69535.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69535.c?ref=e6c0c44b5b43c4fef77f3a566d035db5c589ff99", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run { target int128 } } */\n+/* { dg-options \"-O -fno-tree-bit-ccp -fno-tree-reassoc\" } */\n+\n+typedef unsigned char u8;\n+typedef unsigned short u16;\n+typedef unsigned int u32;\n+typedef unsigned long long u64;\n+typedef unsigned __int128 u128;\n+\n+void __attribute__((noinline, noclone))\n+dirtify_stack(void)\n+{\n+  volatile char a[] = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n+                      \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n+                      \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n+                      \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\n+}\n+\n+u128 __attribute__ ((noinline, noclone))\n+foo(u32 u32_1, u64 u64_1, u128 u128_1, u8 u8_2, u16 u16_2, u32 u32_2, u8 u8_3)\n+{\n+  u128_1 /= ~u128_1 | 1;\n+  u8_3 = ((u8_3 << 2) >> 1) << 7;\n+  u32_2 >>= u8_3;\n+  return u128_1 + u32_2 + u8_3;\n+}\n+\n+int\n+main ()\n+{\n+  dirtify_stack();\n+  u128 x = foo(1, 1, 1, 1, 1, 1, 0);\n+  if (x != 1)\n+    __builtin_abort();\n+  return 0;\n+}"}]}