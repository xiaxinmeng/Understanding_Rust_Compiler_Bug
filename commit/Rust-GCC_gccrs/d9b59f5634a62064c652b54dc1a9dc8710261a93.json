{"sha": "d9b59f5634a62064c652b54dc1a9dc8710261a93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDliNTlmNTYzNGE2MjA2NGM2NTJiNTRkYzFhOWRjODcxMDI2MWE5Mw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2011-10-02T17:46:11Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2011-10-02T17:46:11Z"}, "message": "mips.c (mips_frame_barrier): New function.\n\ngcc/\n\t* config/mips/mips.c (mips_frame_barrier): New function.\n\t(mips_expand_prologue): Call it after allocating stack space.\n\t(mips_deallocate_stack): New function.\n\t(mips_expand_epilogue): Call mips_frame_barrier and\n\tmips_deallocate_stack.\n\ngcc/testsuite/\n\t* gcc.target/mips/stack-1.c: New test.\n\nFrom-SVN: r179432", "tree": {"sha": "f4f721790d5f713ce0d49c08edba1191d96636be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4f721790d5f713ce0d49c08edba1191d96636be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9b59f5634a62064c652b54dc1a9dc8710261a93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9b59f5634a62064c652b54dc1a9dc8710261a93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9b59f5634a62064c652b54dc1a9dc8710261a93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9b59f5634a62064c652b54dc1a9dc8710261a93/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "31045a25f33215ed30bfc4f7166c461a2cc92094", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31045a25f33215ed30bfc4f7166c461a2cc92094", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31045a25f33215ed30bfc4f7166c461a2cc92094"}], "stats": {"total": 117, "additions": 76, "deletions": 41}, "files": [{"sha": "5a30b57dc993fd4c249e055200ede6dabba1a394", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9b59f5634a62064c652b54dc1a9dc8710261a93/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9b59f5634a62064c652b54dc1a9dc8710261a93/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9b59f5634a62064c652b54dc1a9dc8710261a93", "patch": "@@ -1,3 +1,11 @@\n+2011-10-02  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* config/mips/mips.c (mips_frame_barrier): New function.\n+\t(mips_expand_prologue): Call it after allocating stack space.\n+\t(mips_deallocate_stack): New function.\n+\t(mips_expand_epilogue): Call mips_frame_barrier and\n+\tmips_deallocate_stack.\n+\n 2011-10-02  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \tPR target/49696"}, {"sha": "ff72e28a35c2db3abedb6b0b9343938b8cafc81a", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 53, "deletions": 41, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9b59f5634a62064c652b54dc1a9dc8710261a93/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9b59f5634a62064c652b54dc1a9dc8710261a93/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=d9b59f5634a62064c652b54dc1a9dc8710261a93", "patch": "@@ -9892,6 +9892,14 @@ mips_output_function_epilogue (FILE *file ATTRIBUTE_UNUSED,\n   mips_end_function_definition (fnname);\n }\n \f\n+/* Emit an optimisation barrier for accesses to the current frame.  */\n+\n+static void\n+mips_frame_barrier (void)\n+{\n+  emit_clobber (gen_frame_mem (BLKmode, stack_pointer_rtx));\n+}\n+\n /* Save register REG to MEM.  Make the instruction frame-related.  */\n \n static void\n@@ -10035,6 +10043,7 @@ mips_expand_prologue (void)\n \t  insn = mips16e_build_save_restore (false, &mask, &offset,\n \t\t\t\t\t     nargs, step1);\n \t  RTX_FRAME_RELATED_P (emit_insn (insn)) = 1;\n+\t  mips_frame_barrier ();\n  \t  size -= step1;\n \n  \t  /* Check if we need to save other registers.  */\n@@ -10075,6 +10084,7 @@ mips_expand_prologue (void)\n \t      insn = gen_add3_insn (stack_pointer_rtx, stack_pointer_rtx,\n \t\t\t\t    GEN_INT (-step1));\n \t      RTX_FRAME_RELATED_P (emit_insn (insn)) = 1;\n+\t      mips_frame_barrier ();\n \t      size -= step1;\n \n \t      /* Start at the uppermost location for saving.  */\n@@ -10135,6 +10145,7 @@ mips_expand_prologue (void)\n \t\t\t\t    stack_pointer_rtx,\n \t\t\t\t    GEN_INT (-step1));\n \t      RTX_FRAME_RELATED_P (emit_insn (insn)) = 1;\n+\t      mips_frame_barrier ();\n \t      size -= step1;\n \t    }\n \t  mips_for_each_saved_acc (size, mips_save_reg);\n@@ -10175,6 +10186,7 @@ mips_expand_prologue (void)\n \t    (gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n \t\t\t  plus_constant (stack_pointer_rtx, -size)));\n \t}\n+      mips_frame_barrier ();\n     }\n \n   /* Set up the frame pointer, if we're using one.  */\n@@ -10315,6 +10327,35 @@ mips_restore_reg (rtx reg, rtx mem)\n \t\t\t   mips_epilogue.cfa_restore_sp_offset);\n }\n \n+/* Emit code to set the stack pointer to BASE + OFFSET, given that\n+   BASE + OFFSET is NEW_FRAME_SIZE bytes below the top of the frame.\n+   BASE, if not the stack pointer, is available as a temporary.  */\n+\n+static void\n+mips_deallocate_stack (rtx base, rtx offset, HOST_WIDE_INT new_frame_size)\n+{\n+  if (base == stack_pointer_rtx && offset == const0_rtx)\n+    return;\n+\n+  mips_frame_barrier ();\n+  if (offset == const0_rtx)\n+    {\n+      emit_move_insn (stack_pointer_rtx, base);\n+      mips_epilogue_set_cfa (stack_pointer_rtx, new_frame_size);\n+    }\n+  else if (TARGET_MIPS16 && base != stack_pointer_rtx)\n+    {\n+      emit_insn (gen_add3_insn (base, base, offset));\n+      mips_epilogue_set_cfa (base, new_frame_size);\n+      emit_move_insn (stack_pointer_rtx, base);\n+    }\n+  else\n+    {\n+      emit_insn (gen_add3_insn (stack_pointer_rtx, base, offset));\n+      mips_epilogue_set_cfa (stack_pointer_rtx, new_frame_size);\n+    }\n+}\n+\n /* Emit any instructions needed before a return.  */\n \n void\n@@ -10341,7 +10382,7 @@ mips_expand_epilogue (bool sibcall_p)\n {\n   const struct mips_frame_info *frame;\n   HOST_WIDE_INT step1, step2;\n-  rtx base, target, insn;\n+  rtx base, adjust, insn;\n \n   if (!sibcall_p && mips_can_use_return_insn ())\n     {\n@@ -10384,31 +10425,14 @@ mips_expand_epilogue (bool sibcall_p)\n       step1 -= step2;\n     }\n \n-  /* Set TARGET to BASE + STEP1.  */\n-  target = base;\n-  if (step1 > 0)\n+  /* Get an rtx for STEP1 that we can add to BASE.  */\n+  adjust = GEN_INT (step1);\n+  if (!SMALL_OPERAND (step1))\n     {\n-      rtx adjust;\n-\n-      /* Get an rtx for STEP1 that we can add to BASE.  */\n-      adjust = GEN_INT (step1);\n-      if (!SMALL_OPERAND (step1))\n-\t{\n-\t  mips_emit_move (MIPS_EPILOGUE_TEMP (Pmode), adjust);\n-\t  adjust = MIPS_EPILOGUE_TEMP (Pmode);\n-\t}\n-\n-      /* Normal mode code can copy the result straight into $sp.  */\n-      if (!TARGET_MIPS16)\n-\ttarget = stack_pointer_rtx;\n-\n-      emit_insn (gen_add3_insn (target, base, adjust));\n-      mips_epilogue_set_cfa (target, step2);\n+      mips_emit_move (MIPS_EPILOGUE_TEMP (Pmode), adjust);\n+      adjust = MIPS_EPILOGUE_TEMP (Pmode);\n     }\n-\n-  /* Copy TARGET into the stack pointer.  */\n-  if (target != stack_pointer_rtx)\n-    mips_emit_move (stack_pointer_rtx, target);\n+  mips_deallocate_stack (base, adjust, step2);\n \n   /* If we're using addressing macros, $gp is implicitly used by all\n      SYMBOL_REFs.  We must emit a blockage insn before restoring $gp\n@@ -10437,6 +10461,7 @@ mips_expand_epilogue (bool sibcall_p)\n \n       /* Restore the remaining registers and deallocate the final bit\n \t of the frame.  */\n+      mips_frame_barrier ();\n       emit_insn (restore);\n       mips_epilogue_set_cfa (stack_pointer_rtx, 0);\n     }\n@@ -10473,13 +10498,8 @@ mips_expand_epilogue (bool sibcall_p)\n \t  offset -= UNITS_PER_WORD;\n \n \t  /* If we don't use shoadow register set, we need to update SP.  */\n-\t  if (!cfun->machine->use_shadow_register_set_p && step2 > 0)\n-\t    {\n-\t      emit_insn (gen_add3_insn (stack_pointer_rtx,\n-\t\t\t\t\tstack_pointer_rtx,\n-\t\t\t\t\tGEN_INT (step2)));\n-\t      mips_epilogue_set_cfa (stack_pointer_rtx, 0);\n-\t    }\n+\t  if (!cfun->machine->use_shadow_register_set_p)\n+\t    mips_deallocate_stack (stack_pointer_rtx, GEN_INT (step2), 0);\n \t  else\n \t    /* The choice of position is somewhat arbitrary in this case.  */\n \t    mips_epilogue_emit_cfa_restores ();\n@@ -10489,16 +10509,8 @@ mips_expand_epilogue (bool sibcall_p)\n \t\t\t\t    gen_rtx_REG (SImode, K0_REG_NUM)));\n \t}\n       else\n-\t{\n-\t  /* Deallocate the final bit of the frame.  */\n-\t  if (step2 > 0)\n-\t    {\n-\t      emit_insn (gen_add3_insn (stack_pointer_rtx,\n-\t\t\t\t\tstack_pointer_rtx,\n-\t\t\t\t\tGEN_INT (step2)));\n-\t      mips_epilogue_set_cfa (stack_pointer_rtx, 0);\n-\t    }\n-\t}\n+\t/* Deallocate the final bit of the frame.  */\n+\tmips_deallocate_stack (stack_pointer_rtx, GEN_INT (step2), 0);\n     }\n   gcc_assert (!mips_epilogue.cfa_restores);\n "}, {"sha": "f6829f0ce3fcad539fb9efa2edc01592aa53c1e2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9b59f5634a62064c652b54dc1a9dc8710261a93/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9b59f5634a62064c652b54dc1a9dc8710261a93/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d9b59f5634a62064c652b54dc1a9dc8710261a93", "patch": "@@ -1,3 +1,7 @@\n+2011-10-02  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* gcc.target/mips/stack-1.c: New test.\n+\n 2011-10-02  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* gcc.dg/pr49696.c: New test."}, {"sha": "3d495453dd75314ada44cebd8185f6a1e79330e7", "filename": "gcc/testsuite/gcc.target/mips/stack-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9b59f5634a62064c652b54dc1a9dc8710261a93/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fstack-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9b59f5634a62064c652b54dc1a9dc8710261a93/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fstack-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fstack-1.c?ref=d9b59f5634a62064c652b54dc1a9dc8710261a93", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler \"addiu\\t(\\\\\\$sp,)?\\\\\\$sp,\\[1-9\\]\" } } */\n+/* { dg-final { scan-assembler \"\\tlw\\t\" } } */\n+/* { dg-final { scan-assembler-not \"addiu\\t(\\\\\\$sp,)?\\\\\\$sp,\\[1-9\\].*\\tlw\\t\" } } */\n+\n+int foo (int y)\n+{\n+  volatile int a = y;\n+  volatile int *volatile b = &a;\n+  return *b;\n+}"}]}