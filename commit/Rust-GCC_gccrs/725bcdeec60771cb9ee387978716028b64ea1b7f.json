{"sha": "725bcdeec60771cb9ee387978716028b64ea1b7f", "node_id": "C_kwDOANBUbNoAKDcyNWJjZGVlYzYwNzcxY2I5ZWUzODc5Nzg3MTYwMjhiNjRlYTFiN2Y", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2023-04-10T03:32:27Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2023-04-10T03:34:08Z"}, "message": "Do not generate vmaddfp and vnmsubfp\n\nThis is version 3 of the patch.  This is essentially version 1 with the removal\nof changes to altivec.md, and cleanup of the comments.\n\nVersion 2 generated the vmaddfp and vnmsubfp instructions if -Ofast was used,\nand those changes are deleted in this patch.\n\nThe Altivec instructions vmaddfp and vnmsubfp have different rounding behaviors\nthan the VSX xvmaddsp and xvnmsubsp instructions due to VSCR[NJ] and other\ncorner cases.  In particular, generating these instructions seems to break\nEigen on big endian systems.\n\n2023-04-09   Michael Meissner  <meissner@linux.ibm.com>\n\ngcc/\n\n\tPR target/70243\n\t* config/rs6000/vsx.md (vsx_fmav4sf4): Do not generate vmaddfp.\n\t(vsx_nfmsv4sf4): Do not generate vnmsubfp.\n\ngcc/testsuite/\n\n\tPR target/70243\n\t* gcc.target/powerpc/pr70243.c: New test.", "tree": {"sha": "8efc92d73bcccbac46e0e8dfcbeff395ddf2d757", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8efc92d73bcccbac46e0e8dfcbeff395ddf2d757"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/725bcdeec60771cb9ee387978716028b64ea1b7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/725bcdeec60771cb9ee387978716028b64ea1b7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/725bcdeec60771cb9ee387978716028b64ea1b7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/725bcdeec60771cb9ee387978716028b64ea1b7f/comments", "author": null, "committer": null, "parents": [{"sha": "afa87bd5f7b126e20268aa959441cde2e02bba0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afa87bd5f7b126e20268aa959441cde2e02bba0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afa87bd5f7b126e20268aa959441cde2e02bba0e"}], "stats": {"total": 75, "additions": 58, "deletions": 17}, "files": [{"sha": "806ee4386e36473fe3b0c84c34ef8be5216b1b24", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725bcdeec60771cb9ee387978716028b64ea1b7f/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725bcdeec60771cb9ee387978716028b64ea1b7f/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=725bcdeec60771cb9ee387978716028b64ea1b7f", "patch": "@@ -2009,22 +2009,23 @@\n   \"x<VSv>tsqrt<sd>p %0,%x1\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n-;; Fused vector multiply/add instructions. Support the classical Altivec\n-;; versions of fma, which allows the target to be a separate register from the\n-;; 3 inputs.  Under VSX, the target must be either the addend or the first\n-;; multiply.\n-\n+;; Fused vector multiply/add instructions. Do not generate the Altivec versions\n+;; of fma (vmaddfp and vnmsubfp).  These instructions allows the target to be a\n+;; separate register from the 3 inputs, which can possibly save an extra move\n+;; being generated (assuming all registers are AltiVec registers).  However,\n+;; vmaddfp and vnmsubfp can have different behaviors than the VSX instructions\n+;; in some corner cases due to VSCR[NJ] being set or if the addend is +0.0\n+;; instead of -0.0.\n (define_insn \"*vsx_fmav4sf4\"\n-  [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=wa,wa,v\")\n+  [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=wa,wa\")\n \t(fma:V4SF\n-\t  (match_operand:V4SF 1 \"vsx_register_operand\" \"%wa,wa,v\")\n-\t  (match_operand:V4SF 2 \"vsx_register_operand\" \"wa,0,v\")\n-\t  (match_operand:V4SF 3 \"vsx_register_operand\" \"0,wa,v\")))]\n+\t  (match_operand:V4SF 1 \"vsx_register_operand\" \"%wa,wa\")\n+\t  (match_operand:V4SF 2 \"vsx_register_operand\" \"wa,0\")\n+\t  (match_operand:V4SF 3 \"vsx_register_operand\" \"0,wa\")))]\n   \"VECTOR_UNIT_VSX_P (V4SFmode)\"\n   \"@\n    xvmaddasp %x0,%x1,%x2\n-   xvmaddmsp %x0,%x1,%x3\n-   vmaddfp %0,%1,%2,%3\"\n+   xvmaddmsp %x0,%x1,%x3\"\n   [(set_attr \"type\" \"vecfloat\")])\n \n (define_insn \"*vsx_fmav2df4\"\n@@ -2066,18 +2067,17 @@\n   [(set_attr \"type\" \"<VStype_mul>\")])\n \n (define_insn \"*vsx_nfmsv4sf4\"\n-  [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=wa,wa,v\")\n+  [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=wa,wa\")\n \t(neg:V4SF\n \t (fma:V4SF\n-\t   (match_operand:V4SF 1 \"vsx_register_operand\" \"%wa,wa,v\")\n-\t   (match_operand:V4SF 2 \"vsx_register_operand\" \"wa,0,v\")\n+\t   (match_operand:V4SF 1 \"vsx_register_operand\" \"%wa,wa\")\n+\t   (match_operand:V4SF 2 \"vsx_register_operand\" \"wa,0\")\n \t   (neg:V4SF\n-\t     (match_operand:V4SF 3 \"vsx_register_operand\" \"0,wa,v\")))))]\n+\t     (match_operand:V4SF 3 \"vsx_register_operand\" \"0,wa\")))))]\n   \"VECTOR_UNIT_VSX_P (V4SFmode)\"\n   \"@\n    xvnmsubasp %x0,%x1,%x2\n-   xvnmsubmsp %x0,%x1,%x3\n-   vnmsubfp %0,%1,%2,%3\"\n+   xvnmsubmsp %x0,%x1,%x3\"\n   [(set_attr \"type\" \"vecfloat\")])\n \n (define_insn \"*vsx_nfmsv2df4\""}, {"sha": "18a5ce7879218edbc078b61124f091e840c31667", "filename": "gcc/testsuite/gcc.target/powerpc/pr70243.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725bcdeec60771cb9ee387978716028b64ea1b7f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr70243.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725bcdeec60771cb9ee387978716028b64ea1b7f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr70243.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr70243.c?ref=725bcdeec60771cb9ee387978716028b64ea1b7f", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+\n+/* PR 70423, Make sure we don't generate vmaddfp or vnmsubfp.  These\n+   instructions have different rounding modes than the VSX instructions\n+   xvmaddsp and xvnmsubsp.  These tests are written where the 3 inputs and\n+   target are all separate registers.  Because vmaddfp and vnmsubfp are no\n+   longer generated the compiler will have to generate an xsmaddsp or xsnmsubsp\n+   instruction followed by a move operation.  */\n+\n+#include <altivec.h>\n+\n+vector float\n+do_add1 (vector float dummy, vector float a, vector float b, vector float c)\n+{\n+  return (a * b) + c;\n+}\n+\n+vector float\n+do_nsub1 (vector float dummy, vector float a, vector float b, vector float c)\n+{\n+  return -((a * b) - c);\n+}\n+\n+vector float\n+do_add2 (vector float dummy, vector float a, vector float b, vector float c)\n+{\n+  return vec_madd (a, b, c);\n+}\n+\n+vector float\n+do_nsub2 (vector float dummy, vector float a, vector float b, vector float c)\n+{\n+  return vec_nmsub (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler     {\\mxvmadd[am]sp\\M}  } } */\n+/* { dg-final { scan-assembler     {\\mxvnmsub[am]sp\\M} } } */\n+/* { dg-final { scan-assembler-not {\\mvmaddfp\\M}       } } */\n+/* { dg-final { scan-assembler-not {\\mvnmsubfp\\M}      } } */"}]}