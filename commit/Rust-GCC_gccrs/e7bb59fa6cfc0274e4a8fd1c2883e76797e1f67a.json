{"sha": "e7bb59fa6cfc0274e4a8fd1c2883e76797e1f67a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdiYjU5ZmE2Y2ZjMDI3NGU0YThmZDFjMjg4M2U3Njc5N2UxZjY3YQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-03-16T22:41:57Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-03-16T22:41:57Z"}, "message": "(FIXED_REGNO_P): Remove previous change; all callers but one already check.\n\n(CHEAP_REG): Only call FIXED_REGNO_P for hard regs.\n(fold_rtx): Clarify comments.\n\nFrom-SVN: r3762", "tree": {"sha": "e840423296265db6e8590827991dc675195d65e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e840423296265db6e8590827991dc675195d65e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7bb59fa6cfc0274e4a8fd1c2883e76797e1f67a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7bb59fa6cfc0274e4a8fd1c2883e76797e1f67a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7bb59fa6cfc0274e4a8fd1c2883e76797e1f67a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7bb59fa6cfc0274e4a8fd1c2883e76797e1f67a/comments", "author": null, "committer": null, "parents": [{"sha": "0a7b7709ebf8c7d7250700e367bc685dcdeecb6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a7b7709ebf8c7d7250700e367bc685dcdeecb6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a7b7709ebf8c7d7250700e367bc685dcdeecb6f"}], "stats": {"total": 17, "additions": 7, "deletions": 10}, "files": [{"sha": "207c51daaddc1a18e3b8625a19a1a84c65b56d28", "filename": "gcc/cse.c", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7bb59fa6cfc0274e4a8fd1c2883e76797e1f67a/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7bb59fa6cfc0274e4a8fd1c2883e76797e1f67a/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=e7bb59fa6cfc0274e4a8fd1c2883e76797e1f67a", "patch": "@@ -438,13 +438,11 @@ struct table_elt\n    but not if it is an overlapping register.  */\n #ifdef OVERLAPPING_REGNO_P\n #define FIXED_REGNO_P(N)  \\\n-  (((N) == FRAME_POINTER_REGNUM\t\t\t\t\\\n-    || ((N) < FIRST_PSEUDO_REGISTER && fixed_regs[N]))\t\\\n+  (((N) == FRAME_POINTER_REGNUM || fixed_regs[N])\t\\\n    && ! OVERLAPPING_REGNO_P ((N)))\n #else\n #define FIXED_REGNO_P(N)  \\\n-  ((N) == FRAME_POINTER_REGNUM\t\t\t\t\\\n-   || ((N) < FIRST_PSEUDO_REGISTER && fixed_regs[N]))\n+  ((N) == FRAME_POINTER_REGNUM || fixed_regs[N])\n #endif\n \n /* Compute cost of X, as stored in the `cost' field of a table_elt.  Fixed\n@@ -456,7 +454,8 @@ struct table_elt\n   ((N) == FRAME_POINTER_REGNUM || (N) == STACK_POINTER_REGNUM \\\n    || (N) == ARG_POINTER_REGNUM\t\t\t\t\\\n    || (N) >= FIRST_VIRTUAL_REGISTER && (N) <= LAST_VIRTUAL_REGISTER  \\\n-   || (FIXED_REGNO_P (N) && REGNO_REG_CLASS (N) != NO_REGS))\n+   || ((N) < FIRST_PSEUDO_REGISTER\t\t\t\\\n+       && FIXED_REGNO_P (N) && REGNO_REG_CLASS (N) != NO_REGS))\n \n #define COST(X)\t\t\t\t\t\t\\\n   (GET_CODE (X) == REG\t\t\t\t\t\\\n@@ -4474,11 +4473,9 @@ simplify_ternary_operation (code, mode, op0_mode, op0, op1, op2)\n    Otherwise, return X, possibly with one or more operands\n    modified by recursive calls to this function.\n \n-   If X is a register whose contents are known, we may or may not\n-   return those contents.  An instruction that uses a register is usually\n-   faster than one that uses a constant.  But on machines with few hard\n-   regs, using a register instead of a constant increases register life,\n-   hurting register allocation.\n+   If X is a register whose contents are known, we do NOT\n+   return those contents here.  equiv_constant is called to\n+   perform that task.\n \n    INSN is the insn that we may be modifying.  If it is 0, make a copy\n    of X before modifying it.  */"}]}