{"sha": "9bbe08fea9c6684ccc7b0c8fcd46be8be9809116", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJiZTA4ZmVhOWM2Njg0Y2NjN2IwYzhmY2Q0NmJlOGJlOTgwOTExNg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2014-11-24T10:50:45Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2014-11-24T10:50:45Z"}, "message": "[AArch64][2/5] Implement adrp+add fusion\n\n\t* config/aarch64/aarch64.c: Include tm-constrs.h\n\t(AARCH64_FUSE_ADRP_ADD): Define.\n\t(cortexa57_tunings): Add AARCH64_FUSE_ADRP_ADD to fuseable_ops.\n\t(cortexa53_tunings): Likewise.\n\t(aarch_macro_fusion_pair_p): Handle AARCH64_FUSE_ADRP_ADD.\n\nFrom-SVN: r218010", "tree": {"sha": "e8bc4135b5343ec38e4ccde7ce084166d2dde127", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8bc4135b5343ec38e4ccde7ce084166d2dde127"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bbe08fea9c6684ccc7b0c8fcd46be8be9809116", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bbe08fea9c6684ccc7b0c8fcd46be8be9809116", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bbe08fea9c6684ccc7b0c8fcd46be8be9809116", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bbe08fea9c6684ccc7b0c8fcd46be8be9809116/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f0e1509b859c5b16ca62d367dc6816c4a9569349", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0e1509b859c5b16ca62d367dc6816c4a9569349", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0e1509b859c5b16ca62d367dc6816c4a9569349"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "0835501cf30824df2118260e6905484fe8a7b7ee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bbe08fea9c6684ccc7b0c8fcd46be8be9809116/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bbe08fea9c6684ccc7b0c8fcd46be8be9809116/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9bbe08fea9c6684ccc7b0c8fcd46be8be9809116", "patch": "@@ -1,3 +1,11 @@\n+2014-11-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.c: Include tm-constrs.h\n+\t(AARCH64_FUSE_ADRP_ADD): Define.\n+\t(cortexa57_tunings): Add AARCH64_FUSE_ADRP_ADD to fuseable_ops.\n+\t(cortexa53_tunings): Likewise.\n+\t(aarch_macro_fusion_pair_p): Handle AARCH64_FUSE_ADRP_ADD.\n+\n 2014-11-24  Martin Liska  <mliska@suse.cz>\n \n \t* ipa-inline.c (edge_badness): long is replaced by sreal"}, {"sha": "0388e42278fcda5fb8f5044b49087166fe129c5a", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bbe08fea9c6684ccc7b0c8fcd46be8be9809116/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bbe08fea9c6684ccc7b0c8fcd46be8be9809116/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=9bbe08fea9c6684ccc7b0c8fcd46be8be9809116", "patch": "@@ -77,6 +77,7 @@\n #include \"dumpfile.h\"\n #include \"builtins.h\"\n #include \"rtl-iter.h\"\n+#include \"tm-constrs.h\"\n \n /* Defined for convenience.  */\n #define POINTER_BYTES (POINTER_SIZE / BITS_PER_UNIT)\n@@ -306,6 +307,7 @@ static const struct cpu_vector_cost cortexa57_vector_cost =\n \n #define AARCH64_FUSE_NOTHING\t(0)\n #define AARCH64_FUSE_MOV_MOVK\t(1 << 0)\n+#define AARCH64_FUSE_ADRP_ADD\t(1 << 1)\n \n #if HAVE_DESIGNATED_INITIALIZERS && GCC_VERSION >= 2007\n __extension__\n@@ -329,7 +331,7 @@ static const struct tune_params cortexa53_tunings =\n   &generic_vector_cost,\n   NAMED_PARAM (memmov_cost, 4),\n   NAMED_PARAM (issue_rate, 2),\n-  NAMED_PARAM (fuseable_ops, AARCH64_FUSE_MOV_MOVK)\n+  NAMED_PARAM (fuseable_ops, (AARCH64_FUSE_MOV_MOVK | AARCH64_FUSE_ADRP_ADD))\n };\n \n static const struct tune_params cortexa57_tunings =\n@@ -340,7 +342,7 @@ static const struct tune_params cortexa57_tunings =\n   &cortexa57_vector_cost,\n   NAMED_PARAM (memmov_cost, 4),\n   NAMED_PARAM (issue_rate, 3),\n-  NAMED_PARAM (fuseable_ops, AARCH64_FUSE_MOV_MOVK)\n+  NAMED_PARAM (fuseable_ops, (AARCH64_FUSE_MOV_MOVK | AARCH64_FUSE_ADRP_ADD))\n };\n \n static const struct tune_params thunderx_tunings =\n@@ -10427,6 +10429,32 @@ aarch_macro_fusion_pair_p (rtx_insn *prev, rtx_insn *curr)\n         }\n     }\n \n+  if (simple_sets_p\n+      && (aarch64_tune_params->fuseable_ops & AARCH64_FUSE_ADRP_ADD))\n+    {\n+\n+      /*  We're trying to match:\n+          prev (adrp) == (set (reg r1)\n+                              (high (symbol_ref (\"SYM\"))))\n+          curr (add) == (set (reg r0)\n+                             (lo_sum (reg r1)\n+                                     (symbol_ref (\"SYM\"))))\n+          Note that r0 need not necessarily be the same as r1, especially\n+          during pre-regalloc scheduling.  */\n+\n+      if (satisfies_constraint_Ush (SET_SRC (prev_set))\n+          && REG_P (SET_DEST (prev_set)) && REG_P (SET_DEST (curr_set)))\n+        {\n+          if (GET_CODE (SET_SRC (curr_set)) == LO_SUM\n+              && REG_P (XEXP (SET_SRC (curr_set), 0))\n+              && REGNO (XEXP (SET_SRC (curr_set), 0))\n+                 == REGNO (SET_DEST (prev_set))\n+              && rtx_equal_p (XEXP (SET_SRC (prev_set), 0),\n+                              XEXP (SET_SRC (curr_set), 1)))\n+            return true;\n+        }\n+    }\n+\n   return false;\n }\n "}]}