{"sha": "5bd624fbde5f6307fb71041a38aa0914eab9f6f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJkNjI0ZmJkZTVmNjMwN2ZiNzEwNDFhMzhhYTA5MTRlYWI5ZjZmOQ==", "commit": {"author": {"name": "Edward Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2018-11-30T16:26:02Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2018-11-30T16:26:02Z"}, "message": "Implement P0457R2 String Prefix and Suffix Checking.\n\n2018-11-30  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\tImplement P0457R2 String Prefix and Suffix Checking.\n\t* include/bits/basic_string.h: Add starts_with, ends_with members.\n\t* include/std/string_view: Ditto.\n\t* testsuite/21_strings/basic_string/operations/starts_with/\n\tchar/1.cc: New test.\n\t* testsuite/21_strings/basic_string/operations/starts_with/\n\twchar_t/1.cc: New test.\n\t* testsuite/21_strings/basic_string/operations/ends_with/\n\tchar/1.cc: New test.\n\t* testsuite/21_strings/basic_string/operations/ends_with/\n\twchar_t/1.cc: New test.\n\t* testsuite/21_strings/basic_string_view/operations/starts_with/\n\tchar/1.cc: New test.\n\t* testsuite/21_strings/basic_string_view/operations/starts_with/\n\twchar_t/1.cc: New test.\n\t* testsuite/21_strings/basic_string_view/operations/ends_with/\n\tchar/1.cc: New test.\n\t* testsuite/21_strings/basic_string_view/operations/ends_with/\n\twchar_t/1.cc: New test.\n\nFrom-SVN: r266674", "tree": {"sha": "01193230aea60bdb4ff7b238211492b084f6b0ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01193230aea60bdb4ff7b238211492b084f6b0ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bd624fbde5f6307fb71041a38aa0914eab9f6f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bd624fbde5f6307fb71041a38aa0914eab9f6f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bd624fbde5f6307fb71041a38aa0914eab9f6f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bd624fbde5f6307fb71041a38aa0914eab9f6f9/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "32bbb362efbc5d0a9269c8f32258360c622121db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32bbb362efbc5d0a9269c8f32258360c622121db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32bbb362efbc5d0a9269c8f32258360c622121db"}], "stats": {"total": 524, "additions": 523, "deletions": 1}, "files": [{"sha": "73d5b1c460e25016b9683d84e2e3aca758b055f6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bd624fbde5f6307fb71041a38aa0914eab9f6f9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bd624fbde5f6307fb71041a38aa0914eab9f6f9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5bd624fbde5f6307fb71041a38aa0914eab9f6f9", "patch": "@@ -1,3 +1,25 @@\n+2018-11-30  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tImplement P0457R2 String Prefix and Suffix Checking.\n+\t* include/bits/basic_string.h: Add starts_with, ends_with members.\n+\t* include/std/string_view: Ditto.\n+\t* testsuite/21_strings/basic_string/operations/starts_with/\n+\tchar/1.cc: New test.\n+\t* testsuite/21_strings/basic_string/operations/starts_with/\n+\twchar_t/1.cc: New test.\n+\t* testsuite/21_strings/basic_string/operations/ends_with/\n+\tchar/1.cc: New test.\n+\t* testsuite/21_strings/basic_string/operations/ends_with/\n+\twchar_t/1.cc: New test.\n+\t* testsuite/21_strings/basic_string_view/operations/starts_with/\n+\tchar/1.cc: New test.\n+\t* testsuite/21_strings/basic_string_view/operations/starts_with/\n+\twchar_t/1.cc: New test.\n+\t* testsuite/21_strings/basic_string_view/operations/ends_with/\n+\tchar/1.cc: New test.\n+\t* testsuite/21_strings/basic_string_view/operations/ends_with/\n+\twchar_t/1.cc: New test.\n+\n 2018-11-30  Edward Smith-Rowland  <3dw4rd@verizon.net>\n \n \tPre-emptively support P0646R1 for std container erasure.\n@@ -10,6 +32,7 @@\n \t* include/std/unordered_map (): Ditto.\n \t* include/std/unordered_set (): Ditto.\n \t* include/std/vector (): Ditto.\n+\t* include/std/deque (): Ditto.\n \t* testsuite/21_strings/basic_string/erasure.cc: Test number of erasures.\n \t* testsuite/23_containers/deque/erasure.cc: Ditto.\n \t* testsuite/23_containers/forward_list/erasure.cc: Ditto."}, {"sha": "a2573d382b04eaa6f193f446bba02d3d8af9c938", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bd624fbde5f6307fb71041a38aa0914eab9f6f9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bd624fbde5f6307fb71041a38aa0914eab9f6f9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=5bd624fbde5f6307fb71041a38aa0914eab9f6f9", "patch": "@@ -3038,6 +3038,32 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       compare(size_type __pos, size_type __n1, const _CharT* __s,\n \t      size_type __n2) const;\n \n+#if __cplusplus > 201703L\n+      bool\n+      starts_with(basic_string_view<_CharT, _Traits> __x) const noexcept\n+      { return __sv_type(this->data(), this->size()).starts_with(__x); }\n+\n+      bool\n+      starts_with(_CharT __x) const noexcept\n+      { return __sv_type(this->data(), this->size()).starts_with(__x); }\n+\n+      bool\n+      starts_with(const _CharT* __x) const noexcept\n+      { return __sv_type(this->data(), this->size()).starts_with(__x); }\n+\n+      bool\n+      ends_with(basic_string_view<_CharT, _Traits> __x) const noexcept\n+      { return __sv_type(this->data(), this->size()).ends_with(__x); }\n+\n+      bool\n+      ends_with(_CharT __x) const noexcept\n+      { return __sv_type(this->data(), this->size()).ends_with(__x); }\n+\n+      bool\n+      ends_with(const _CharT* __x) const noexcept\n+      { return __sv_type(this->data(), this->size()).ends_with(__x); }\n+#endif // C++20\n+\n       // Allow basic_stringbuf::__xfer_bufptrs to call _M_length:\n       template<typename, typename, typename> friend class basic_stringbuf;\n     };\n@@ -5884,6 +5910,32 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       compare(size_type __pos, size_type __n1, const _CharT* __s,\n \t      size_type __n2) const;\n \n+#if __cplusplus > 201703L\n+      bool\n+      starts_with(basic_string_view<_CharT, _Traits> __x) const noexcept\n+      { return __sv_type(this->data(), this->size()).starts_with(__x); }\n+\n+      bool\n+      starts_with(_CharT __x) const noexcept\n+      { return __sv_type(this->data(), this->size()).starts_with(__x); }\n+\n+      bool\n+      starts_with(const _CharT* __x) const noexcept\n+      { return __sv_type(this->data(), this->size()).starts_with(__x); }\n+\n+      bool\n+      ends_with(basic_string_view<_CharT, _Traits> __x) const noexcept\n+      { return __sv_type(this->data(), this->size()).ends_with(__x); }\n+\n+      bool\n+      ends_with(_CharT __x) const noexcept\n+      { return __sv_type(this->data(), this->size()).ends_with(__x); }\n+\n+      bool\n+      ends_with(const _CharT* __x) const noexcept\n+      { return __sv_type(this->data(), this->size()).ends_with(__x); }\n+#endif // C++20\n+\n # ifdef _GLIBCXX_TM_TS_INTERNAL\n       friend void\n       ::_txnal_cow_string_C1_for_exceptions(void* that, const char* s,"}, {"sha": "28d3fa46718ff8a688a3b022284d551b837787c1", "filename": "libstdc++-v3/include/std/string_view", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bd624fbde5f6307fb71041a38aa0914eab9f6f9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bd624fbde5f6307fb71041a38aa0914eab9f6f9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view?ref=5bd624fbde5f6307fb71041a38aa0914eab9f6f9", "patch": "@@ -227,7 +227,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__sv = __tmp;\n       }\n \n-\n       // [string.view.ops], string operations:\n \n       size_type\n@@ -387,6 +386,38 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t      traits_type::length(__str));\n       }\n \n+#if __cplusplus > 201703L\n+      constexpr bool\n+      starts_with(basic_string_view __x) const noexcept\n+      {\n+\treturn this->size() >= __x.size()\n+\t    && this->compare(0, __x.size(), __x) == 0;\n+      }\n+\n+      constexpr bool\n+      starts_with(_CharT __x) const noexcept\n+      { return this->starts_with(basic_string_view(&__x, 1)); }\n+\n+      constexpr bool\n+      starts_with(const _CharT* __x) const noexcept\n+      { return this->starts_with(basic_string_view(__x)); }\n+\n+      constexpr bool\n+      ends_with(basic_string_view __x) const noexcept\n+      {\n+\treturn this->size() >= __x.size()\n+\t    && this->compare(this->size() - __x.size(), npos, __x) == 0;\n+      }\n+\n+      constexpr bool\n+      ends_with(_CharT __x) const noexcept\n+      { return this->ends_with(basic_string_view(&__x, 1)); }\n+\n+      constexpr bool\n+      ends_with(const _CharT* __x) const noexcept\n+      { return this->ends_with(basic_string_view(__x)); }\n+#endif // C++20\n+\n       constexpr size_type\n       _M_check(size_type __pos, const char* __s) const noexcept(false)\n       {"}, {"sha": "1b0bdae811681073384d706925e2503c1ea4d0f5", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/ends_with/char/1.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bd624fbde5f6307fb71041a38aa0914eab9f6f9/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fends_with%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bd624fbde5f6307fb71041a38aa0914eab9f6f9/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fends_with%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fends_with%2Fchar%2F1.cc?ref=5bd624fbde5f6307fb71041a38aa0914eab9f6f9", "patch": "@@ -0,0 +1,56 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string ends_with\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  const char cstr_suf[] = \".jpg\";\n+  const std::string_view sv_suf(\".jpg\");\n+  const char cstr_suf2[] = \".rgb\";\n+  const std::string_view sv_suf2(\".rgb\");\n+\n+  const std::string s_test(\"slugs/slimy.jpg\");\n+\n+  const auto cstr_in_slugs = s_test.ends_with(cstr_suf);\n+  VERIFY( cstr_in_slugs );\n+  const auto sv_in_slugs = s_test.ends_with(sv_suf);\n+  VERIFY( sv_in_slugs );\n+  const auto char_g = s_test.ends_with('g');\n+  VERIFY( char_g );\n+\n+  const auto cstr_in_worms = s_test.ends_with(cstr_suf2);\n+  VERIFY( !cstr_in_worms );\n+  const auto sv_in_worms = s_test.ends_with(sv_suf2);\n+  VERIFY( !sv_in_worms );\n+  const auto char_b = s_test.ends_with('b');\n+  VERIFY( !char_b );\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+  return 0;\n+}"}, {"sha": "0e95da34dce298588686cd3553ed8fd034f8057d", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/ends_with/wchar_t/1.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bd624fbde5f6307fb71041a38aa0914eab9f6f9/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fends_with%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bd624fbde5f6307fb71041a38aa0914eab9f6f9/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fends_with%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fends_with%2Fwchar_t%2F1.cc?ref=5bd624fbde5f6307fb71041a38aa0914eab9f6f9", "patch": "@@ -0,0 +1,56 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string ends_with\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  const wchar_t cstr_suf[] = L\".jpg\";\n+  const std::wstring_view sv_suf(L\".jpg\");\n+  const wchar_t cstr_suf2[] = L\".rgb\";\n+  const std::wstring_view sv_suf2(L\".rgb\");\n+\n+  const std::wstring s_test(L\"slugs/slimy.jpg\");\n+\n+  const auto cstr_in_slugs = s_test.ends_with(cstr_suf);\n+  VERIFY( cstr_in_slugs );\n+  const auto sv_in_slugs = s_test.ends_with(sv_suf);\n+  VERIFY( sv_in_slugs );\n+  const auto char_g = s_test.ends_with(L'g');\n+  VERIFY( char_g );\n+\n+  const auto cstr_in_worms = s_test.ends_with(cstr_suf2);\n+  VERIFY( !cstr_in_worms );\n+  const auto sv_in_worms = s_test.ends_with(sv_suf2);\n+  VERIFY( !sv_in_worms );\n+  const auto char_b = s_test.ends_with(L'b');\n+  VERIFY( !char_b );\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+  return 0;\n+}"}, {"sha": "233bf948efddca4124e7206e18c7ea9c5fd4c3fc", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/starts_with/char/1.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bd624fbde5f6307fb71041a38aa0914eab9f6f9/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fstarts_with%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bd624fbde5f6307fb71041a38aa0914eab9f6f9/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fstarts_with%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fstarts_with%2Fchar%2F1.cc?ref=5bd624fbde5f6307fb71041a38aa0914eab9f6f9", "patch": "@@ -0,0 +1,56 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string begins_with\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  const char cstr_dir[] = \"slugs/\";\n+  const std::string_view sv_dir(\"slugs/\");\n+  const char cstr_dir2[] = \"worms/\";\n+  const std::string_view sv_dir2(\"worms/\");\n+\n+  const std::string s_test(\"slugs/slimy.jpg\");\n+\n+  const auto cstr_in_slugs = s_test.starts_with(cstr_dir);\n+  VERIFY( cstr_in_slugs );\n+  const auto sv_in_slugs = s_test.starts_with(sv_dir);\n+  VERIFY( sv_in_slugs );\n+  const auto char_s = s_test.starts_with('s');\n+  VERIFY( char_s );\n+\n+  const auto cstr_in_worms = s_test.starts_with(cstr_dir2);\n+  VERIFY( !cstr_in_worms );\n+  const auto sv_in_worms = s_test.starts_with(sv_dir2);\n+  VERIFY( !sv_in_worms );\n+  const auto char_w = s_test.starts_with('w');\n+  VERIFY( !char_w );\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+  return 0;\n+}"}, {"sha": "92f269a14a966f02c4a3f781eb70686991fd84de", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/starts_with/wchar_t/1.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bd624fbde5f6307fb71041a38aa0914eab9f6f9/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fstarts_with%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bd624fbde5f6307fb71041a38aa0914eab9f6f9/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fstarts_with%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fstarts_with%2Fwchar_t%2F1.cc?ref=5bd624fbde5f6307fb71041a38aa0914eab9f6f9", "patch": "@@ -0,0 +1,56 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string begins_with\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  const wchar_t cstr_dir[] = L\"slugs/\";\n+  const std::wstring_view sv_dir(L\"slugs/\");\n+  const wchar_t cstr_dir2[] = L\"worms/\";\n+  const std::wstring_view sv_dir2(L\"worms/\");\n+\n+  const std::wstring s_test(L\"slugs/slimy.jpg\");\n+\n+  const auto cstr_in_slugs = s_test.starts_with(cstr_dir);\n+  VERIFY( cstr_in_slugs );\n+  const auto sv_in_slugs = s_test.starts_with(sv_dir);\n+  VERIFY( sv_in_slugs );\n+  const auto char_s = s_test.starts_with(L's');\n+  VERIFY( char_s );\n+\n+  const auto cstr_in_worms = s_test.starts_with(cstr_dir2);\n+  VERIFY( !cstr_in_worms );\n+  const auto sv_in_worms = s_test.starts_with(sv_dir2);\n+  VERIFY( !sv_in_worms );\n+  const auto char_w = s_test.starts_with(L'w');\n+  VERIFY( !char_w );\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+  return 0;\n+}"}, {"sha": "90d5d6c6d89cd84e16579d12693cfaea1f151c53", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/ends_with/char/1.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bd624fbde5f6307fb71041a38aa0914eab9f6f9/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fends_with%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bd624fbde5f6307fb71041a38aa0914eab9f6f9/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fends_with%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fends_with%2Fchar%2F1.cc?ref=5bd624fbde5f6307fb71041a38aa0914eab9f6f9", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view ends_with\n+\n+#include <string_view>\n+\n+void\n+test01()\n+{\n+  constexpr char cstr_suf[] = \".jpg\";\n+  constexpr std::string_view sv_suf(\".jpg\");\n+  constexpr char cstr_suf2[] = \".rgb\";\n+  constexpr std::string_view sv_suf2(\".rgb\");\n+\n+  constexpr std::string_view sv_test(\"slugs/slimy.jpg\");\n+\n+  constexpr auto cstr_in_slugs = sv_test.ends_with(cstr_suf);\n+  static_assert(cstr_in_slugs);\n+  constexpr auto sv_in_slugs = sv_test.ends_with(sv_suf);\n+  static_assert(sv_in_slugs);\n+  constexpr auto char_g = sv_test.ends_with('g');\n+  static_assert(char_g);\n+\n+  constexpr auto cstr_in_worms = sv_test.ends_with(cstr_suf2);\n+  static_assert(!cstr_in_worms);\n+  constexpr auto sv_in_worms = sv_test.ends_with(sv_suf2);\n+  static_assert(!sv_in_worms);\n+  constexpr auto char_b = sv_test.ends_with('b');\n+  static_assert(!char_b);\n+}"}, {"sha": "c23ac6079a0a48b8a8f91628324bb7b5e57492d4", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/ends_with/wchar_t/1.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bd624fbde5f6307fb71041a38aa0914eab9f6f9/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fends_with%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bd624fbde5f6307fb71041a38aa0914eab9f6f9/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fends_with%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fends_with%2Fwchar_t%2F1.cc?ref=5bd624fbde5f6307fb71041a38aa0914eab9f6f9", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view ends_with\n+\n+#include <string_view>\n+\n+void\n+test01()\n+{\n+  constexpr wchar_t cstr_suf[] = L\".jpg\";\n+  constexpr std::wstring_view sv_suf(L\".jpg\");\n+  constexpr wchar_t cstr_suf2[] = L\".rgb\";\n+  constexpr std::wstring_view sv_suf2(L\".rgb\");\n+\n+  constexpr std::wstring_view sv_test(L\"slugs/slimy.jpg\");\n+\n+  constexpr auto cstr_in_slugs = sv_test.ends_with(cstr_suf);\n+  static_assert(cstr_in_slugs);\n+  constexpr auto sv_in_slugs = sv_test.ends_with(sv_suf);\n+  static_assert(sv_in_slugs);\n+  constexpr auto char_g = sv_test.ends_with(L'g');\n+  static_assert(char_g);\n+\n+  constexpr auto cstr_in_worms = sv_test.ends_with(cstr_suf2);\n+  static_assert(!cstr_in_worms);\n+  constexpr auto sv_in_worms = sv_test.ends_with(sv_suf2);\n+  static_assert(!sv_in_worms);\n+  constexpr auto char_b = sv_test.ends_with(L'b');\n+  static_assert(!char_b);\n+}"}, {"sha": "3d77276b6395700bf068331f85a1c21847e95909", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/starts_with/char/1.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bd624fbde5f6307fb71041a38aa0914eab9f6f9/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fstarts_with%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bd624fbde5f6307fb71041a38aa0914eab9f6f9/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fstarts_with%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fstarts_with%2Fchar%2F1.cc?ref=5bd624fbde5f6307fb71041a38aa0914eab9f6f9", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view begins_with\n+\n+#include <string_view>\n+\n+void\n+test01()\n+{\n+  constexpr char cstr_dir[] = \"slugs/\";\n+  constexpr std::string_view sv_dir(\"slugs/\");\n+  constexpr char cstr_dir2[] = \"worms/\";\n+  constexpr std::string_view sv_dir2(\"worms/\");\n+\n+  constexpr std::string_view sv_test(\"slugs/slimy.jpg\");\n+\n+  constexpr auto cstr_in_slugs = sv_test.starts_with(cstr_dir);\n+  static_assert(cstr_in_slugs);\n+  constexpr auto sv_in_slugs = sv_test.starts_with(sv_dir);\n+  static_assert(sv_in_slugs);\n+  constexpr auto char_s = sv_test.starts_with('s');\n+  static_assert(char_s);\n+\n+  constexpr auto cstr_in_worms = sv_test.starts_with(cstr_dir2);\n+  static_assert(!cstr_in_worms);\n+  constexpr auto sv_in_worms = sv_test.starts_with(sv_dir2);\n+  static_assert(!sv_in_worms);\n+  constexpr auto char_w = sv_test.starts_with('w');\n+  static_assert(!char_w);\n+}"}, {"sha": "854efb8eb042de32d64be194b15ed119fdf731e4", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/starts_with/wchar_t/1.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bd624fbde5f6307fb71041a38aa0914eab9f6f9/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fstarts_with%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bd624fbde5f6307fb71041a38aa0914eab9f6f9/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fstarts_with%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fstarts_with%2Fwchar_t%2F1.cc?ref=5bd624fbde5f6307fb71041a38aa0914eab9f6f9", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view begins_with\n+\n+#include <string_view>\n+\n+void\n+test01()\n+{\n+  constexpr wchar_t cstr_dir[] = L\"slugs/\";\n+  constexpr std::wstring_view sv_dir(L\"slugs/\");\n+  constexpr wchar_t cstr_dir2[] = L\"worms/\";\n+  constexpr std::wstring_view sv_dir2(L\"worms/\");\n+\n+  constexpr std::wstring_view sv_test(L\"slugs/slimy.jpg\");\n+\n+  constexpr auto cstr_in_slugs = sv_test.starts_with(cstr_dir);\n+  static_assert(cstr_in_slugs);\n+  constexpr auto sv_in_slugs = sv_test.starts_with(sv_dir);\n+  static_assert(sv_in_slugs);\n+  constexpr auto char_s = sv_test.starts_with(L's');\n+  static_assert(char_s);\n+\n+  constexpr auto cstr_in_worms = sv_test.starts_with(cstr_dir2);\n+  static_assert(!cstr_in_worms);\n+  constexpr auto sv_in_worms = sv_test.starts_with(sv_dir2);\n+  static_assert(!sv_in_worms);\n+  constexpr auto char_w = sv_test.starts_with(L'w');\n+  static_assert(!char_w);\n+}"}]}