{"sha": "f835e9f6562dda9c8a1384be2c9d4e45c112ed8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjgzNWU5ZjY1NjJkZGE5YzhhMTM4NGJlMmM5ZDRlNDVjMTEyZWQ4ZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-11-30T17:15:47Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-11-30T17:15:47Z"}, "message": "dse: Cope with bigger-than-integer modes [PR98037]\n\ndse.c:find_shift_sequence tries to represent a store and load\nback as a shift right followed by a truncation.  It therefore\nneeds to find an integer mode in which to do the shift right.\nThe loop it uses has the form:\n\n  FOR_EACH_MODE_FROM (new_mode_iter,\n\t\t      smallest_int_mode_for_size (GET_MODE_BITSIZE (read_mode)))\n\nwhich implicitly assumes that read_mode has an equivalent integer mode.\nAs shown in the testcase, not all modes have such an integer mode.\n\nThis patch just makes the code start from the smallest integer mode and\nskip modes that are too small.  The loop already breaks at the first\nmode wider than word_mode.\n\ngcc/\n\tPR rtl-optimization/98037\n\t* dse.c (find_shift_sequence): Iterate over all integers and\n\tskip modes that are too small.\n\ngcc/testsuite/\n\tPR rtl-optimization/98037\n\t* gcc.target/aarch64/sve/acle/general/pr98037.c: New test.", "tree": {"sha": "b3bcb6699585eb436eefd158a7a49722e65b0c43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3bcb6699585eb436eefd158a7a49722e65b0c43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f835e9f6562dda9c8a1384be2c9d4e45c112ed8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f835e9f6562dda9c8a1384be2c9d4e45c112ed8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f835e9f6562dda9c8a1384be2c9d4e45c112ed8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f835e9f6562dda9c8a1384be2c9d4e45c112ed8e/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28a7fdd81e857057f18f87a3c9dd180ad99b77f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28a7fdd81e857057f18f87a3c9dd180ad99b77f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28a7fdd81e857057f18f87a3c9dd180ad99b77f6"}], "stats": {"total": 11, "additions": 9, "deletions": 2}, "files": [{"sha": "651e6e7e71ed435f03da16f239f0fec701ceddd1", "filename": "gcc/dse.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f835e9f6562dda9c8a1384be2c9d4e45c112ed8e/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f835e9f6562dda9c8a1384be2c9d4e45c112ed8e/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=f835e9f6562dda9c8a1384be2c9d4e45c112ed8e", "patch": "@@ -1757,8 +1757,7 @@ find_shift_sequence (poly_int64 access_size,\n      the machine.  */\n \n   opt_scalar_int_mode new_mode_iter;\n-  FOR_EACH_MODE_FROM (new_mode_iter,\n-\t\t      smallest_int_mode_for_size (GET_MODE_BITSIZE (read_mode)))\n+  FOR_EACH_MODE_IN_CLASS (new_mode_iter, MODE_INT)\n     {\n       rtx target, new_reg, new_lhs;\n       rtx_insn *shift_seq, *insn;\n@@ -1767,6 +1766,8 @@ find_shift_sequence (poly_int64 access_size,\n       new_mode = new_mode_iter.require ();\n       if (GET_MODE_BITSIZE (new_mode) > BITS_PER_WORD)\n \tbreak;\n+      if (maybe_lt (GET_MODE_SIZE (new_mode), GET_MODE_SIZE (read_mode)))\n+\tcontinue;\n \n       /* Try a wider mode if truncating the store mode to NEW_MODE\n \t requires a real instruction.  */"}, {"sha": "b91e940b18ecaf4bf8d98a9098cca7cc2b9afd7f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general/pr98037.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f835e9f6562dda9c8a1384be2c9d4e45c112ed8e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fpr98037.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f835e9f6562dda9c8a1384be2c9d4e45c112ed8e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fpr98037.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fpr98037.c?ref=f835e9f6562dda9c8a1384be2c9d4e45c112ed8e", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-options \"-msve-vector-bits=1024 -O3\" } */\n+\n+typedef __SVInt8_t vec __attribute__((arm_sve_vector_bits(1024)));\n+struct pair { vec v[2]; };\n+void use (struct pair *);\n+vec f (struct pair p) { vec v = p.v[1]; use (&p); return v; }"}]}