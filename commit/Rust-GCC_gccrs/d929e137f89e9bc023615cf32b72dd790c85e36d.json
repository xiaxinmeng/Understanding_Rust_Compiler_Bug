{"sha": "d929e137f89e9bc023615cf32b72dd790c85e36d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDkyOWUxMzdmODllOWJjMDIzNjE1Y2YzMmI3MmRkNzkwYzg1ZTM2ZA==", "commit": {"author": {"name": "Stafford Horne", "email": "shorne@gmail.com", "date": "2018-11-09T12:09:15Z"}, "committer": {"name": "Stafford Horne", "email": "shorne@gcc.gnu.org", "date": "2018-11-09T12:09:15Z"}, "message": "or1k: libgcc: initial support for openrisc\n\nlibgcc/ChangeLog:\n\n2018-11-09  Stafford Horne  <shorne@gmail.com>\n\t    Richard Henderson  <rth@twiddle.net>\n\n\t* config.host: Add OpenRISC support.\n\t* config/or1k/*: New.\n\n\nCo-Authored-By: Richard Henderson <rth@twiddle.net>\n\nFrom-SVN: r265961", "tree": {"sha": "de853271f0d7ac08bd2f3ec1144a18bc59cdc167", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de853271f0d7ac08bd2f3ec1144a18bc59cdc167"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d929e137f89e9bc023615cf32b72dd790c85e36d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d929e137f89e9bc023615cf32b72dd790c85e36d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d929e137f89e9bc023615cf32b72dd790c85e36d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d929e137f89e9bc023615cf32b72dd790c85e36d/comments", "author": {"login": "stffrdhrn", "id": 2404255, "node_id": "MDQ6VXNlcjI0MDQyNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/2404255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stffrdhrn", "html_url": "https://github.com/stffrdhrn", "followers_url": "https://api.github.com/users/stffrdhrn/followers", "following_url": "https://api.github.com/users/stffrdhrn/following{/other_user}", "gists_url": "https://api.github.com/users/stffrdhrn/gists{/gist_id}", "starred_url": "https://api.github.com/users/stffrdhrn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stffrdhrn/subscriptions", "organizations_url": "https://api.github.com/users/stffrdhrn/orgs", "repos_url": "https://api.github.com/users/stffrdhrn/repos", "events_url": "https://api.github.com/users/stffrdhrn/events{/privacy}", "received_events_url": "https://api.github.com/users/stffrdhrn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "69104d52ddfe7a10ba45729935562e4e1a1176c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69104d52ddfe7a10ba45729935562e4e1a1176c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69104d52ddfe7a10ba45729935562e4e1a1176c1"}], "stats": {"total": 403, "additions": 403, "deletions": 0}, "files": [{"sha": "cba324428bab44685cd949a5de41ad4778863d57", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d929e137f89e9bc023615cf32b72dd790c85e36d/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d929e137f89e9bc023615cf32b72dd790c85e36d/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=d929e137f89e9bc023615cf32b72dd790c85e36d", "patch": "@@ -1,3 +1,9 @@\n+2018-11-09  Stafford Horne  <shorne@gmail.com>\n+\t    Richard Henderson  <rth@twiddle.net>\n+\n+\t* config.host: Add OpenRISC support.\n+\t* config/or1k/*: New.\n+\n 2018-11-08  Kito Cheng  <kito@andestech.com>\n \n \t* soft-fp/adddf3.c: Update from glibc."}, {"sha": "1cbc8aca1cb01e5b5554352afdb0b4e2477583d7", "filename": "libgcc/config.host", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d929e137f89e9bc023615cf32b72dd790c85e36d/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d929e137f89e9bc023615cf32b72dd790c85e36d/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=d929e137f89e9bc023615cf32b72dd790c85e36d", "patch": "@@ -165,6 +165,9 @@ nds32*-*)\n nios2*-*-*)\n \tcpu_type=nios2\n \t;;\n+or1k*-*-*)\n+\tcpu_type=or1k\n+\t;;\n powerpc*-*-*)\n \tcpu_type=rs6000\n \t;;\n@@ -1039,6 +1042,15 @@ nios2-*-*)\n \ttmake_file=\"$tmake_file nios2/t-nios2 t-softfp-sfdf t-softfp-excl t-softfp\"\n \textra_parts=\"$extra_parts crti.o crtn.o\"\n \t;;\n+or1k-*-linux*)\n+\ttmake_file=\"$tmake_file or1k/t-or1k\"\n+\ttmake_file=\"$tmake_file t-softfp-sfdf t-softfp\"\n+\tmd_unwind_header=or1k/linux-unwind.h\n+\t;;\n+or1k-*-*)\n+\ttmake_file=\"$tmake_file or1k/t-or1k\"\n+\ttmake_file=\"$tmake_file t-softfp-sfdf t-softfp\"\n+\t;;\n pdp11-*-*)\n \ttmake_file=\"pdp11/t-pdp11 t-fdpbit\"\n \t;;"}, {"sha": "0ec41c3eba12702954b1859d46c3bbb748b54bd8", "filename": "libgcc/config/or1k/lib1funcs.S", "status": "added", "additions": 222, "deletions": 0, "changes": 222, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d929e137f89e9bc023615cf32b72dd790c85e36d/libgcc%2Fconfig%2For1k%2Flib1funcs.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d929e137f89e9bc023615cf32b72dd790c85e36d/libgcc%2Fconfig%2For1k%2Flib1funcs.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2For1k%2Flib1funcs.S?ref=d929e137f89e9bc023615cf32b72dd790c85e36d", "patch": "@@ -0,0 +1,222 @@\n+/* Copyright (C) 2018 Free Software Foundation, Inc.\n+\n+This file is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 3, or (at your option) any\n+later version.\n+\n+This file is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+\n+#ifdef L__mulsi3\n+\t.balign 4\n+\t.globl\t__mulsi3\n+\t.type\t__mulsi3, @function\n+__mulsi3:\n+\tl.movhi\t\tr11, 0\t\t\t/* initial r */\n+\n+\t/* Given R = X * Y ... */\n+1:\tl.sfeq\t\tr4, r0\t\t\t/* while (y != 0) */\n+\tl.bf\t\t2f\n+\t l.andi\t\tr5, r4, 1\t\t/* if (y & 1) ... */\n+\tl.add\t\tr12, r11, r3\n+\tl.sfne\t\tr5, r0\n+#if defined(__or1k_cmov__)\n+\tl.cmov\t\tr11, r12, r11\t\t/* ... r += x. */\n+\tl.srli\t\tr4, r4, 1\t\t/* y >>= 1 */\n+#else\n+\tl.bnf\t\t3f\n+\t l.srli\t\tr4, r4, 1\t\t/* y >>= 1 */\n+\tl.ori\t\tr11, r12, 0\n+3:\n+#endif\n+\tl.j\t\t1b\n+\t l.add\t\tr3, r3, r3\t\t/* x <<= 1 */\n+\n+2:\tl.jr\t\tr9\n+\t l.nop\n+\n+\t.size\t__mulsi3, . - __mulsi3\n+#endif\n+\n+#if defined(L__udivsi3) || defined(L__umodsi3) \\\n+    || defined(L__divsi3) || defined(L__modsi3)\n+\t.global\t__udivmodsi3_internal\n+\t.hidden\t__udivmodsi3_internal\n+\t.type\t__udivmodsi3_internal, @function\n+#endif\n+\n+#ifdef L__udivsi3\n+\t.balign\t4\n+\t.global\t__udivsi3\n+\t.type\t__udivsi3, @function\n+__udivsi3:\n+__udivmodsi3_internal:\n+\t/* Note that the other division routines assume that r13\n+\t   is not clobbered by this routine, and use that as to\n+\t   save a return address without creating a stack frame.  */\n+\n+\tl.sfeqi\t\tr4, 0\t\t/* division by zero; return 0.  */\n+\tl.ori\t\tr11, r0, 0\t/* initial quotient */\n+\tl.bf\t\t9f\n+\t l.ori\t\tr12, r3, 0\t/* initial remainder */\n+\n+\t/* Given X/Y, shift Y left until Y >= X.  */\n+\tl.ori\t\tr6, r0, 1\t/* mask = 1 */\n+1:\tl.sfltsi\tr4, 0\t\t/* y has msb set */\n+\tl.bf\t\t2f\n+\t l.sfltu\tr4, r12\t\t/* y < x */\n+\tl.add\t\tr4, r4, r4\t/* y <<= 1 */\n+\tl.bnf\t\t1b\n+\t l.add\t\tr6, r6, r6\t/* mask <<= 1 */\n+\n+\t/* Shift Y back to the right again, subtracting from X.  */\n+2:\tl.add\t\tr7, r11, r6\t/* tmp1 = quot + mask */\n+3:\tl.srli\t\tr6, r6, 1\t/* mask >>= 1 */\n+\tl.sub\t\tr8, r12, r4\t/* tmp2 = x - y */\n+\tl.sfleu\t\tr4, r12\t\t/* y <= x */\n+\tl.srli\t\tr4, r4, 1\t/* y >>= 1 */\n+#if defined(__or1k_cmov__)\n+\tl.cmov\t\tr11, r7, r11\t/* if (y <= x) quot = tmp1 */\n+\tl.cmov\t\tr12, r8, r12\t/* if (y <= x) x = tmp2 */\n+#else\n+\tl.bnf\t\t4f\n+\t l.nop\n+\tl.ori\t\tr11, r7, 0\n+\tl.ori\t\tr12, r8, 0\n+4:\n+#endif\n+\tl.sfne\t\tr6, r0\t\t/* loop until mask == 0 */\n+\tl.bf\t\t3b\n+\t l.add\t\tr7, r11, r6\t/* delay fill from loop start */\n+\n+9:\tl.jr\t\tr9\n+\t l.nop\n+\n+\t.size\t__udivsi3, . - __udivsi3\n+\t.size\t__udivmodsi3_internal, . - __udivmodsi3_internal\n+#endif\n+\n+#ifdef L__umodsi3\n+\t.balign\t4\n+\t.global\t__umodsi3\n+\t.type\t__umodsi3, @function\n+\t.cfi_startproc\n+__umodsi3:\n+\t/* Know that __udivmodsi3_internal does not clobber r13.  */\n+\tl.ori\t\tr13, r9, 0\n+\t.cfi_register\t9, 13\n+\tl.jal\t\t__udivmodsi3_internal\n+\t l.nop\n+\tl.jr\t\tr13\t\t/* return to saved lr */\n+\t l.ori\t\tr11, r12, 0\t/* move remainder to rv */\n+\n+\t.cfi_endproc\n+\t.size\t__umodsi3, . - __umodsi3\n+#endif\n+\n+/* For signed division we do:\n+\n+     -x / y = x / -y = -(x / y)\n+     -x % y = -(x % y)\n+      x % -y = x % y\n+\n+   which has the property that (x/y)*y + (x%y) = x.  */\n+\n+#ifdef L__divsi3\n+\t.balign\t4\n+\t.global\t__divsi3\n+\t.type\t__divsi3, @function\n+\t.cfi_startproc\n+__divsi3:\n+\tl.xor\t\tr6, r3, r4\t/* need result negate?  */\n+\n+\tl.sflts\t\tr3, r0\t\t/* abs(x) */\n+#if defined(__or1k_cmov__)\n+\tl.sub\t\tr5, r0, r3\n+\tl.cmov\t\tr3, r5, r3\n+#else\n+\tl.bnf\t\t1f\n+\t l.sub\t\tr5, r0, r3\n+\tl.ori\t\tr3, r5, 0\n+1:\n+#endif\n+\tl.sflts\t\tr4, r0\t\t/* abs(y) */\n+#if defined(__or1k_cmov__)\n+\tl.sub\t\tr5, r0, r4\n+\tl.cmov\t\tr4, r5, r4\n+#else\n+\tl.bnf\t\t2f\n+\t l.sub\t\tr5, r0, r4\n+\tl.ori\t\tr4, r5, 0\n+2:\n+#endif\n+\n+\t/* If the result will not require sign flip, tail call.  */\n+\tl.sflts\t\tr6, r0\n+\tl.bnf\t\t__udivmodsi3_internal\n+\t l.ori\t\tr13, r9, 0\t/* save lr */\n+\n+\t/* Otherwise, know that __udivmodsi3_internal does not clobber r13.\n+\t   Perform a normal call, then negate and return via saved lr.  */\n+\t.cfi_register\t9, 13\n+\tl.jal\t\t__udivmodsi3_internal\n+\t l.nop\n+\tl.jr\t\tr13\n+\t l.sub\t\tr11, r0, r11\n+\n+\t.cfi_endproc\n+\t.size\t__divsi3, . - __divsi3\n+#endif\n+\n+#ifdef L__modsi3\n+\t.balign\t4\n+\t.global\t__modsi3\n+\t.type\t__modsi3, @function\n+\t.cfi_startproc\n+__modsi3:\n+\tl.sflts\t\tr4, r0\t\t/* abs(y) */\n+#if defined(__or1k_cmov__)\n+\tl.sub\t\tr5, r0, r4\n+\tl.cmov\t\tr4, r5, r4\n+#else\n+\tl.bnf\t\t2f\n+\t l.sub\t\tr5, r0, r4\n+\tl.ori\t\tr4, r5, 0\n+2:\n+#endif\n+\n+\tl.sflts\t\tr3, r0\t\t/* x negative? */\n+\tl.bf\t\t1f\n+\t l.ori\t\tr13, r9, 0\t/* save lr */\n+\n+\t/* Know that __udivmodsi3_internal does not clobber r13.  */\n+\t.cfi_register\t9, 13\n+\n+\t/* X positive; no negate of the result required.  */\n+\tl.jal\t\t__udivmodsi3_internal\n+\t l.nop\n+\tl.jr\t\tr13\t\t/* return to saved lr */\n+\t l.ori\t\tr11, r12, 0\t/* move remainder to rv */\n+\n+\t/* X negative; negate both X and the result.  */\n+1:\tl.jal\t\t__udivmodsi3_internal\n+\t l.sub\t\tr3, r0, r3\n+\tl.jr\t\tr13\t\t/* return to saved lr */\n+\t l.sub\t\tr11, r0, r12\t/* negate remainder to rv */\n+\n+\t.cfi_endproc\n+\t.size __modsi3, .- __modsi3\n+#endif"}, {"sha": "e80e9e0f309ff3d4d41943ab54843efec58d474f", "filename": "libgcc/config/or1k/linux-unwind.h", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d929e137f89e9bc023615cf32b72dd790c85e36d/libgcc%2Fconfig%2For1k%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d929e137f89e9bc023615cf32b72dd790c85e36d/libgcc%2Fconfig%2For1k%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2For1k%2Flinux-unwind.h?ref=d929e137f89e9bc023615cf32b72dd790c85e36d", "patch": "@@ -0,0 +1,87 @@\n+/* DWARF2 EH unwinding support for OpenRISC Linux.\n+   Copyright (C) 2018 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef inhibit_libc\n+/* Do code reading to identify a signal frame, and set the frame\n+   state data appropriately.  See unwind-dw2.c for the structs.  */\n+\n+#include <signal.h>\n+#include <sys/ucontext.h>\n+\n+#define MD_FALLBACK_FRAME_STATE_FOR or1k_fallback_frame_state\n+\n+static _Unwind_Reason_Code\n+or1k_fallback_frame_state (struct _Unwind_Context *context,\n+\t\t\t   _Unwind_FrameState *fs)\n+{\n+  unsigned int *pc = context->ra;\n+  struct rt_sigframe {\n+    siginfo_t info;\n+    ucontext_t uc;\n+  } *rt;\n+  struct sigcontext *sc;\n+  long new_cfa;\n+  int i;\n+\n+  if (pc[0] != 0xa960008b\t\t/* l.ori r11, r0, NR_rt_sigreturn */\n+      || pc[1] != 0x20000001)\t\t/* l.sys 1 */\n+    return _URC_END_OF_STACK;\n+  if (context->cfa == 0)\n+    return _URC_END_OF_STACK;\n+\n+  rt = context->cfa;\n+  sc = &rt->uc.uc_mcontext;\n+\n+  new_cfa = sc->regs.gpr[1];\n+  fs->regs.cfa_how = CFA_REG_OFFSET;\n+  fs->regs.cfa_reg = 1;\n+  fs->regs.cfa_offset = new_cfa - (long) context->cfa;\n+  for (i = 2; i < 32; ++i)\n+    {\n+      fs->regs.reg[i].how = REG_SAVED_OFFSET;\n+      fs->regs.reg[i].loc.offset = (long) &sc->regs.gpr[i] - new_cfa;\n+    }\n+  fs->regs.reg[32].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[32].loc.offset = (long)&sc->regs.pc - new_cfa;\n+  fs->retaddr_column = 32;\n+  fs->signal_frame = 1;\n+\n+  return _URC_NO_REASON;\n+}\n+\n+#define MD_FROB_UPDATE_CONTEXT or1k_frob_update_context\n+\n+/* Fix up for signal handlers that don't have S flag set.  */\n+\n+static void\n+or1k_frob_update_context (struct _Unwind_Context *context,\n+\t\t\t   _Unwind_FrameState *fs ATTRIBUTE_UNUSED)\n+{\n+  unsigned int *pc = context->ra;\n+\n+  if (pc[0] == 0xa960008b\t\t/* l.ori r11, r0, NR_rt_sigreturn */\n+      && pc[1] == 0x20000001)\t\t/* l.sys 1 */\n+    _Unwind_SetSignalFrame (context, 1);\n+}\n+#endif"}, {"sha": "5da9e84990d6dc495ad1858ad0a3bfd2124903c5", "filename": "libgcc/config/or1k/sfp-machine.h", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d929e137f89e9bc023615cf32b72dd790c85e36d/libgcc%2Fconfig%2For1k%2Fsfp-machine.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d929e137f89e9bc023615cf32b72dd790c85e36d/libgcc%2Fconfig%2For1k%2Fsfp-machine.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2For1k%2Fsfp-machine.h?ref=d929e137f89e9bc023615cf32b72dd790c85e36d", "patch": "@@ -0,0 +1,54 @@\n+#define _FP_W_TYPE_SIZE\t\t32\n+#define _FP_W_TYPE\t\tunsigned long\n+#define _FP_WS_TYPE\t\tsigned long\n+#define _FP_I_TYPE\t\tlong\n+\n+#define _FP_MUL_MEAT_S(R,X,Y)\t\t\t\t\\\n+  _FP_MUL_MEAT_1_wide(_FP_WFRACBITS_S,R,X,Y,umul_ppmm)\n+#define _FP_MUL_MEAT_D(R,X,Y)\t\t\t\t\\\n+  _FP_MUL_MEAT_2_wide(_FP_WFRACBITS_D,R,X,Y,umul_ppmm)\n+#define _FP_MUL_MEAT_Q(R,X,Y)\t\t\t\t\\\n+  _FP_MUL_MEAT_4_wide(_FP_WFRACBITS_Q,R,X,Y,umul_ppmm)\n+\n+#define _FP_DIV_MEAT_S(R,X,Y)\t_FP_DIV_MEAT_1_loop(S,R,X,Y)\n+#define _FP_DIV_MEAT_D(R,X,Y)\t_FP_DIV_MEAT_2_udiv(D,R,X,Y)\n+#define _FP_DIV_MEAT_Q(R,X,Y)\t_FP_DIV_MEAT_4_udiv(Q,R,X,Y)\n+\n+#define _FP_NANFRAC_S\t\t((_FP_QNANBIT_S << 1) - 1)\n+#define _FP_NANFRAC_D\t\t((_FP_QNANBIT_D << 1) - 1), -1\n+#define _FP_NANFRAC_Q\t\t((_FP_QNANBIT_Q << 1) - 1), -1, -1, -1\n+#define _FP_NANSIGN_S\t\t0\n+#define _FP_NANSIGN_D\t\t0\n+#define _FP_NANSIGN_Q\t\t0\n+\n+#define _FP_KEEPNANFRACP 1\n+#define _FP_QNANNEGATEDP 0\n+\n+/* Someone please check this.  */\n+#define _FP_CHOOSENAN(fs, wc, R, X, Y, OP)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\\\n+    if ((_FP_FRAC_HIGH_RAW_##fs(X) & _FP_QNANBIT_##fs)\t\t\\\n+\t&& !(_FP_FRAC_HIGH_RAW_##fs(Y) & _FP_QNANBIT_##fs))\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tR##_s = Y##_s;\t\t\t\t\t\t\\\n+\t_FP_FRAC_COPY_##wc(R,Y);\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    else\t\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tR##_s = X##_s;\t\t\t\t\t\t\\\n+\t_FP_FRAC_COPY_##wc(R,X);\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    R##_c = FP_CLS_NAN;\t\t\t\t\t\t\\\n+  } while (0)\n+\n+#define\t__LITTLE_ENDIAN\t1234\n+#define\t__BIG_ENDIAN\t4321\n+\n+#define __BYTE_ORDER __BIG_ENDIAN\n+\n+#define _FP_TININESS_AFTER_ROUNDING 0\n+\n+/* Define ALIASNAME as a strong alias for NAME.  */\n+# define strong_alias(name, aliasname) _strong_alias(name, aliasname)\n+# define _strong_alias(name, aliasname) \\\n+  extern __typeof (name) aliasname __attribute__ ((alias (#name)));"}, {"sha": "73a703ac58dca0482c6b128cfb406c544f3b091a", "filename": "libgcc/config/or1k/t-or1k", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d929e137f89e9bc023615cf32b72dd790c85e36d/libgcc%2Fconfig%2For1k%2Ft-or1k", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d929e137f89e9bc023615cf32b72dd790c85e36d/libgcc%2Fconfig%2For1k%2Ft-or1k", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2For1k%2Ft-or1k?ref=d929e137f89e9bc023615cf32b72dd790c85e36d", "patch": "@@ -0,0 +1,22 @@\n+# Libgcc Makefile fragment for OpenRISC\n+# Copyright (C) 2018 Free Software Foundation, Inc.\n+# Contributed by Stafford Horne.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify it\n+# under the terms of the GNU General Public License as published\n+# by the Free Software Foundation; either version 3, or (at your\n+# option) any later version.\n+#\n+# GCC is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+# License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+LIB1ASMSRC = or1k/lib1funcs.S\n+LIB1ASMFUNCS = __mulsi3 __udivsi3 __divsi3 __umodsi3 __modsi3"}]}