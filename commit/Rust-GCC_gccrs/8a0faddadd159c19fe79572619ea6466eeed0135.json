{"sha": "8a0faddadd159c19fe79572619ea6466eeed0135", "node_id": "C_kwDOANBUbNoAKDhhMGZhZGRhZGQxNTljMTlmZTc5NTcyNjE5ZWE2NDY2ZWVlZDAxMzU", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-10-19T18:57:49Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-10-22T10:48:45Z"}, "message": "Disregard incoming equivalences to a path when defining a new one.\n\nThe equivalence oracle creates a new equiv set at each def point,\nkilling any incoming equivalences, however in the path sensitive\noracle we create brand new equivalences at each PHI:\n\n   BB4:\n\n   BB8:\n      x_5 = PHI <y_8(4)>\n\nHere we note that x_5 == y_8 at the end of the path.\n\nThe current code is intersecting this new equivalence with previously\nknown equivalences coming into the path.  This is incorrect, as this\nis a new definition.  This patch kills any known equivalence before we\nregister a new one.\n\nThis hasn't caused problems so far, but upcoming changes to the\npipeline has us threading more aggressively and triggering corner\ncases where this causes incorrect code.\n\nI have tested this patch with the usual regstrap cycle.  I have also\nhacked a compiler comparing the old and new behavior to see if we were\npreviously threading paths where the decision was made due to invalid\nequivalences.  Luckily, there were no such paths, but there were 22\npaths in a set of .ii files where disregarding incoming relations\nallowed us to thread the path.  This is a miniscule improvement,\nbut we moved a handful of thredable paths earlier in the pipeline,\nwhich is always good.\n\nTested on x86-64 Linux.\n\nCo-authored-by: Andrew MacLeod <amacleod@redhat.com>\n\ngcc/ChangeLog:\n\n\t* gimple-range-path.cc (path_range_query::compute_phi_relations):\n\tKill any global relations we may know before registering a new\n\tone.\n\t* value-relation.cc (path_oracle::killing_def): New.\n\t* value-relation.h (path_oracle::killing_def): New.", "tree": {"sha": "5f151ad5046a4a3d3e5189a631afc8d76959060f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f151ad5046a4a3d3e5189a631afc8d76959060f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a0faddadd159c19fe79572619ea6466eeed0135", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a0faddadd159c19fe79572619ea6466eeed0135", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a0faddadd159c19fe79572619ea6466eeed0135", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a0faddadd159c19fe79572619ea6466eeed0135/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe8475c500939011b90504304aec61bf6f48ac7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe8475c500939011b90504304aec61bf6f48ac7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe8475c500939011b90504304aec61bf6f48ac7d"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "557338993aed8338eb1959336d52a653402bf1d8", "filename": "gcc/gimple-range-path.cc", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a0faddadd159c19fe79572619ea6466eeed0135/gcc%2Fgimple-range-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a0faddadd159c19fe79572619ea6466eeed0135/gcc%2Fgimple-range-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-path.cc?ref=8a0faddadd159c19fe79572619ea6466eeed0135", "patch": "@@ -698,7 +698,15 @@ path_range_query::compute_phi_relations (basic_block bb, basic_block prev)\n \t    tree arg = gimple_phi_arg_def (phi, i);\n \n \t    if (gimple_range_ssa_p (arg))\n-\t      m_oracle->register_relation (entry, EQ_EXPR, arg, result);\n+\t      {\n+\t\tif (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t  fprintf (dump_file, \"  from bb%d:\", bb->index);\n+\n+\t\t// Throw away any previous relation.\n+\t\tget_path_oracle ()->killing_def (result);\n+\n+\t\tm_oracle->register_relation (entry, EQ_EXPR, arg, result);\n+\t      }\n \n \t    break;\n \t  }"}, {"sha": "2acf375ca9aa2aacd218c9cdc0ec4167e87705e5", "filename": "gcc/value-relation.cc", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a0faddadd159c19fe79572619ea6466eeed0135/gcc%2Fvalue-relation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a0faddadd159c19fe79572619ea6466eeed0135/gcc%2Fvalue-relation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-relation.cc?ref=8a0faddadd159c19fe79572619ea6466eeed0135", "patch": "@@ -1285,6 +1285,29 @@ path_oracle::register_equiv (basic_block bb, tree ssa1, tree ssa2)\n   bitmap_ior_into (m_equiv.m_names, b);\n }\n \n+// Register killing definition of an SSA_NAME.\n+\n+void\n+path_oracle::killing_def (tree ssa)\n+{\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    {\n+      fprintf (dump_file, \" Registering killing_def (path_oracle) \");\n+      print_generic_expr (dump_file, ssa, TDF_SLIM);\n+      fprintf (dump_file, \"\\n\");\n+    }\n+\n+  bitmap b = BITMAP_ALLOC (&m_bitmaps);\n+  bitmap_set_bit (b, SSA_NAME_VERSION (ssa));\n+  equiv_chain *ptr = (equiv_chain *) obstack_alloc (&m_chain_obstack,\n+\t\t\t\t\t\t    sizeof (equiv_chain));\n+  ptr->m_names = b;\n+  ptr->m_bb = NULL;\n+  ptr->m_next = m_equiv.m_next;\n+  m_equiv.m_next = ptr;\n+  bitmap_ior_into (m_equiv.m_names, b);\n+}\n+\n // Register relation K between SSA1 and SSA2, resolving unknowns by\n // querying from BB.\n "}, {"sha": "97be325114459eb29c1572d8681c2bc799554621", "filename": "gcc/value-relation.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a0faddadd159c19fe79572619ea6466eeed0135/gcc%2Fvalue-relation.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a0faddadd159c19fe79572619ea6466eeed0135/gcc%2Fvalue-relation.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-relation.h?ref=8a0faddadd159c19fe79572619ea6466eeed0135", "patch": "@@ -222,6 +222,7 @@ class path_oracle : public relation_oracle\n   ~path_oracle ();\n   const_bitmap equiv_set (tree, basic_block);\n   void register_relation (basic_block, relation_kind, tree, tree);\n+  void killing_def (tree);\n   relation_kind query_relation (basic_block, tree, tree);\n   relation_kind query_relation (basic_block, const_bitmap, const_bitmap);\n   void reset_path ();"}]}