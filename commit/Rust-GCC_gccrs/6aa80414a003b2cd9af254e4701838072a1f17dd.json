{"sha": "6aa80414a003b2cd9af254e4701838072a1f17dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFhODA0MTRhMDAzYjJjZDlhZjI1NGU0NzAxODM4MDcyYTFmMTdkZA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-11-20T14:39:00Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-11-20T14:39:00Z"}, "message": "[PR c++/82878] pass-by-invisiref in lambda\n\nhttps://gcc.gnu.org/ml/gcc-patches/2017-11/msg01115.html\n\tPR c++/82878\n\tPR c++/78495\n\t* call.c (build_call_a): Don't set CALL_FROM_THUNK_P for inherited\n\tctor.\n\t* cp-gimplify.c\t(cp_genericize_r): Restore THUNK dereference\n\tinhibibition check removed in previous c++/78495 change.\n\n\tPR c++/82878\n\t* g++.dg/cpp0x/pr82878.C: New.\n\t* g++.dg/cpp1z/inh-ctor38.C: Check moves too.\n\nFrom-SVN: r254958", "tree": {"sha": "ba5912c09897e80e79f8a222c41d3dfae9c08ccd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba5912c09897e80e79f8a222c41d3dfae9c08ccd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6aa80414a003b2cd9af254e4701838072a1f17dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aa80414a003b2cd9af254e4701838072a1f17dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6aa80414a003b2cd9af254e4701838072a1f17dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aa80414a003b2cd9af254e4701838072a1f17dd/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7b7b60c83047db2e4bde9e7f40ce3f1738694789", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b7b60c83047db2e4bde9e7f40ce3f1738694789", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b7b60c83047db2e4bde9e7f40ce3f1738694789"}], "stats": {"total": 72, "additions": 58, "deletions": 14}, "files": [{"sha": "e1e9d7238a68d35778df3b11f2b2e35bced3614e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa80414a003b2cd9af254e4701838072a1f17dd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa80414a003b2cd9af254e4701838072a1f17dd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6aa80414a003b2cd9af254e4701838072a1f17dd", "patch": "@@ -1,3 +1,12 @@\n+2017-11-20  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/82878\n+\tPR c++/78495\n+\t* call.c (build_call_a): Don't set CALL_FROM_THUNK_P for inherited\n+\tctor.\n+\t* cp-gimplify.c\t(cp_genericize_r): Restore THUNK dereference\n+\tinhibibition check removed in previous c++/78495 change.\n+\n 2017-11-20   Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/82781"}, {"sha": "d242b07a06bcb4bf2a84fde860876a0983ded0b2", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa80414a003b2cd9af254e4701838072a1f17dd/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa80414a003b2cd9af254e4701838072a1f17dd/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=6aa80414a003b2cd9af254e4701838072a1f17dd", "patch": "@@ -376,18 +376,10 @@ build_call_a (tree function, int n, tree *argarray)\n \n   TREE_HAS_CONSTRUCTOR (function) = (decl && DECL_CONSTRUCTOR_P (decl));\n \n-  if (current_function_decl && decl\n-      && flag_new_inheriting_ctors\n-      && DECL_INHERITED_CTOR (current_function_decl)\n-      && (DECL_INHERITED_CTOR (current_function_decl)\n-\t  == DECL_CLONED_FUNCTION (decl)))\n-    /* Pass arguments directly to the inherited constructor.  */\n-    CALL_FROM_THUNK_P (function) = true;\n-\n   /* Don't pass empty class objects by value.  This is useful\n      for tags in STL, which are used to control overload resolution.\n      We don't need to handle other cases of copying empty classes.  */\n-  else if (! decl || ! DECL_BUILT_IN (decl))\n+  if (! decl || ! DECL_BUILT_IN (decl))\n     for (i = 0; i < n; i++)\n       {\n \ttree arg = CALL_EXPR_ARG (function, i);"}, {"sha": "201a59505916269e16886bfb2fe63d88bcaa654d", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa80414a003b2cd9af254e4701838072a1f17dd/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa80414a003b2cd9af254e4701838072a1f17dd/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=6aa80414a003b2cd9af254e4701838072a1f17dd", "patch": "@@ -1078,6 +1078,14 @@ cp_genericize_r (tree *stmt_p, int *walk_subtrees, void *data)\n       && omp_var_to_track (stmt))\n     omp_cxx_notice_variable (wtd->omp_ctx, stmt);\n \n+  /* Don't dereference parms in a thunk, pass the references through. */\n+  if ((TREE_CODE (stmt) == CALL_EXPR && CALL_FROM_THUNK_P (stmt))\n+      || (TREE_CODE (stmt) == AGGR_INIT_EXPR && AGGR_INIT_FROM_THUNK_P (stmt)))\n+    {\n+      *walk_subtrees = 0;\n+      return NULL;\n+    }\n+\n   /* Dereference invisible reference parms.  */\n   if (wtd->handle_invisiref_parm_p && is_invisiref_parm (stmt))\n     {"}, {"sha": "76a839ce73046caf8b7f7a06f0e51541942fd34c", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa80414a003b2cd9af254e4701838072a1f17dd/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa80414a003b2cd9af254e4701838072a1f17dd/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=6aa80414a003b2cd9af254e4701838072a1f17dd", "patch": "@@ -1103,7 +1103,6 @@ maybe_add_lambda_conv_op (tree type)\n       }\n   }\n \n-\n   if (generic_lambda_p)\n     {\n       if (decltype_call)"}, {"sha": "ba7426a38a44e9fbe8e293eb686951ece071926a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa80414a003b2cd9af254e4701838072a1f17dd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa80414a003b2cd9af254e4701838072a1f17dd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6aa80414a003b2cd9af254e4701838072a1f17dd", "patch": "@@ -1,3 +1,9 @@\n+2017-11-20  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/82878\n+\t* g++.dg/cpp0x/pr82878.C: New.\n+\t* g++.dg/cpp1z/inh-ctor38.C: Check moves too.\n+\n 2017-11-20  Bin Cheng  <bin.cheng@arm.com>\n \n \t* gcc.dg/tree-ssa/predcom-dse-12.c: New test."}, {"sha": "d05c9760709a9fe23da38beb825d6e79384c0e9d", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-switch.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa80414a003b2cd9af254e4701838072a1f17dd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-switch.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa80414a003b2cd9af254e4701838072a1f17dd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-switch.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-switch.C?ref=6aa80414a003b2cd9af254e4701838072a1f17dd", "patch": "@@ -20,7 +20,7 @@ main ()\n \t    {\n \t    case 3:\t\t// { dg-error \"case\" }\n \t      break;\t\t// { dg-error \"break\" }\n-\t    };\n+\t    };\t\t// { dg-warning \"statement will never be executed\" }\n \t}\n     }\n }"}, {"sha": "c75e93b56c301f32192758d349912254d6f46aca", "filename": "gcc/testsuite/g++.dg/cpp0x/pr82878.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa80414a003b2cd9af254e4701838072a1f17dd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr82878.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa80414a003b2cd9af254e4701838072a1f17dd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr82878.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr82878.C?ref=6aa80414a003b2cd9af254e4701838072a1f17dd", "patch": "@@ -0,0 +1,20 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-additional-options \"-O\" }\n+// pr 82878 erroneously unwrapped a reference parm in the lambda::_FUN\n+// thunk.\n+\n+struct A {\n+  ~A();\n+  operator int ();\n+};\n+\n+void baz ();\n+\n+void\n+bar (A b)\n+{\n+  void (*lam) (A) = [](A) { baz (); };\n+\n+  if (auto c = b)\n+    lam (c);\n+}"}, {"sha": "356c36f5ff61d5041589dc0a999aa539c30b15a0", "filename": "gcc/testsuite/g++.dg/cpp1z/inh-ctor38.C", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa80414a003b2cd9af254e4701838072a1f17dd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finh-ctor38.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa80414a003b2cd9af254e4701838072a1f17dd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finh-ctor38.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finh-ctor38.C?ref=6aa80414a003b2cd9af254e4701838072a1f17dd", "patch": "@@ -1,17 +1,19 @@\n // { dg-do run { target c++11 } }\n // PR78495 failed to propagate pass-by-value struct to base ctor.\n \n+static int moves = 0;\n+\n struct Ptr {\n   void *ptr = 0;\n \n   Ptr() {}\n   Ptr(Ptr const&) = delete;\n-  Ptr(Ptr&& other) : ptr (other.ptr) {}\n+  Ptr(Ptr&& other) : ptr (other.ptr) {moves++;}\n };\n \n struct Base {\n   Ptr val;\n-  Base(Ptr val_) : val(static_cast<Ptr&&>(val_)) {}\n+  Base(Ptr val_);\n };\n \n struct Derived: Base {\n@@ -27,5 +29,13 @@ void *Foo () {\n }\n \n int main () {\n-  return Foo () != 0;\n+  if (Foo ())\n+    return 1;\n+\n+  if (moves != 2)\n+    return 2;\n+\n+  return 0;\n }\n+\n+Base::Base(Ptr val_) : val(static_cast<Ptr&&>(val_)) {}"}]}