{"sha": "04bc3c93bec894ca85bc448b40af42545a280928", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRiYzNjOTNiZWM4OTRjYTg1YmM0NDhiNDBhZjQyNTQ1YTI4MDkyOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2017-05-15T08:00:41Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2017-05-15T08:00:41Z"}, "message": "decl.c (gnat_to_gnu_entity): When there is a representation clause on an extension...\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Record_Type>: When there\n\tis a representation clause on an extension, propagate the alignment of\n\tthe parent type only if the platform requires strict alignment.\n\nFrom-SVN: r248049", "tree": {"sha": "7db7d7873d883dbf77ccfcf3bcc36170a3139c3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7db7d7873d883dbf77ccfcf3bcc36170a3139c3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04bc3c93bec894ca85bc448b40af42545a280928", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04bc3c93bec894ca85bc448b40af42545a280928", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04bc3c93bec894ca85bc448b40af42545a280928", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04bc3c93bec894ca85bc448b40af42545a280928/comments", "author": null, "committer": null, "parents": [{"sha": "c39d309a2551b68af40f88f024771c61d7644d1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c39d309a2551b68af40f88f024771c61d7644d1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c39d309a2551b68af40f88f024771c61d7644d1b"}], "stats": {"total": 22, "additions": 20, "deletions": 2}, "files": [{"sha": "dc2916e5278f02354451b07bd5d21882dae171d4", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04bc3c93bec894ca85bc448b40af42545a280928/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04bc3c93bec894ca85bc448b40af42545a280928/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=04bc3c93bec894ca85bc448b40af42545a280928", "patch": "@@ -1,3 +1,9 @@\n+2017-05-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Record_Type>: When there\n+\tis a representation clause on an extension, propagate the alignment of\n+\tthe parent type only if the platform requires strict alignment.\n+\n 2017-05-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* system-linux-arm.ads (Memory_Size): Use Long_Integer'Size"}, {"sha": "b39b75a852b106f817101c777cafb311c888c5bc", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04bc3c93bec894ca85bc448b40af42545a280928/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04bc3c93bec894ca85bc448b40af42545a280928/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=04bc3c93bec894ca85bc448b40af42545a280928", "patch": "@@ -204,6 +204,7 @@ static tree elaborate_expression_2 (tree, Entity_Id, const char *, bool, bool,\n static tree elaborate_reference (tree, Entity_Id, bool, tree *);\n static tree gnat_to_gnu_component_type (Entity_Id, bool, bool);\n static tree gnat_to_gnu_subprog_type (Entity_Id, bool, bool, tree *);\n+static int adjust_packed (tree, tree, int);\n static tree gnat_to_gnu_field (Entity_Id, tree, int, bool, bool);\n static tree gnu_ext_name_for_subprog (Entity_Id, tree);\n static tree change_qualified_type (tree, int);\n@@ -3094,6 +3095,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t    Entity_Id gnat_parent = Parent_Subtype (gnat_entity);\n \t    tree gnu_dummy_parent_type = make_node (RECORD_TYPE);\n \t    tree gnu_parent;\n+\t    int parent_packed = 0;\n \n \t    /* A major complexity here is that the parent subtype will\n \t       reference our discriminants in its Stored_Constraint list.\n@@ -3172,7 +3174,17 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t       be created with a component clause below, then we need\n \t       to apply the same adjustment as in gnat_to_gnu_field.  */\n \t    if (has_rep && TYPE_ALIGN (gnu_type) < TYPE_ALIGN (gnu_parent))\n-\t      SET_TYPE_ALIGN (gnu_type, TYPE_ALIGN (gnu_parent));\n+\t      {\n+\t\t/* ??? For historical reasons, we do it on strict-alignment\n+\t\t   platforms only, where it is really required.  This means\n+\t\t   that a confirming representation clause will change the\n+\t\t   behavior of the compiler on the other platforms.  */\n+\t\tif (STRICT_ALIGNMENT)\n+\t\t  SET_TYPE_ALIGN (gnu_type, TYPE_ALIGN (gnu_parent));\n+\t\telse\n+\t\t  parent_packed\n+\t\t    = adjust_packed (gnu_parent, gnu_type, parent_packed);\n+\t      }\n \n \t    /* Finally we fix up both kinds of twisted COMPONENT_REF we have\n \t       initially built.  The discriminants must reference the fields\n@@ -3218,7 +3230,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t\t\t\t   ? TYPE_SIZE (gnu_parent) : NULL_TREE,\n \t\t\t\t   has_rep\n \t\t\t\t   ? bitsize_zero_node : NULL_TREE,\n-\t\t\t\t   0, 1);\n+\t\t\t\t   parent_packed, 1);\n \t    DECL_INTERNAL_P (gnu_field) = 1;\n \t    TREE_OPERAND (gnu_get_parent, 1) = gnu_field;\n \t    TYPE_FIELDS (gnu_type) = gnu_field;"}]}