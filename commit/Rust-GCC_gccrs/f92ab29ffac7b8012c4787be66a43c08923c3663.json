{"sha": "f92ab29ffac7b8012c4787be66a43c08923c3663", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjkyYWIyOWZmYWM3YjgwMTJjNDc4N2JlNjZhNDNjMDg5MjNjMzY2Mw==", "commit": {"author": {"name": "Chris Gregory", "email": "czipperz@gmail.com", "date": "2016-04-29T16:11:43Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-04-29T16:11:43Z"}, "message": "Remove trailing whitespace from libstdc++-v3 files\n\n2016-04-29  Chris Gregory  <czipperz@gmail.com>\n\n\t* config/*: Remove trailing whitespace.\n\t* src/*: Likewise.\n\t* testsuite/tr1/*: Likewise.\n\t* testsuite/util/*: Likewise.\n\nFrom-SVN: r235645", "tree": {"sha": "6fc3bcf79e417c6b1b8b408b428be97042699596", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fc3bcf79e417c6b1b8b408b428be97042699596"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f92ab29ffac7b8012c4787be66a43c08923c3663", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f92ab29ffac7b8012c4787be66a43c08923c3663", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f92ab29ffac7b8012c4787be66a43c08923c3663", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f92ab29ffac7b8012c4787be66a43c08923c3663/comments", "author": {"login": "czipperz", "id": 10054343, "node_id": "MDQ6VXNlcjEwMDU0MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/10054343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/czipperz", "html_url": "https://github.com/czipperz", "followers_url": "https://api.github.com/users/czipperz/followers", "following_url": "https://api.github.com/users/czipperz/following{/other_user}", "gists_url": "https://api.github.com/users/czipperz/gists{/gist_id}", "starred_url": "https://api.github.com/users/czipperz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/czipperz/subscriptions", "organizations_url": "https://api.github.com/users/czipperz/orgs", "repos_url": "https://api.github.com/users/czipperz/repos", "events_url": "https://api.github.com/users/czipperz/events{/privacy}", "received_events_url": "https://api.github.com/users/czipperz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8960db319597b6efca5063e70a787fcc822129fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8960db319597b6efca5063e70a787fcc822129fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8960db319597b6efca5063e70a787fcc822129fe"}], "stats": {"total": 24927, "additions": 12467, "deletions": 12460}, "files": [{"sha": "39d599291cdb99eb11aaffdfca67ca4a154dbbe4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -1,3 +1,10 @@\n+2016-04-29  Chris Gregory  <czipperz@gmail.com>\n+\n+\t* config/*: Remove trailing whitespace.\n+\t* src/*: Likewise.\n+\t* testsuite/tr1/*: Likewise.\n+\t* testsuite/util/*: Likewise.\n+\n 2016-04-28  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/70766"}, {"sha": "d1c37bde97c1c9f87e76b446483e58b0af32f849", "filename": "libstdc++-v3/config/abi/compatibility.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fcompatibility.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fcompatibility.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fcompatibility.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -28,15 +28,15 @@\n  */\n \n // Switch for symbol version macro.\n-#ifndef _GLIBCXX_APPLY_SYMVER \n+#ifndef _GLIBCXX_APPLY_SYMVER\n #error must define _GLIBCXX_APPLY_SYMVER before including __FILE__\n #endif\n \n /* gcc-3.4.4\n _ZNSt19istreambuf_iteratorIcSt11char_traitsIcEEppEv\n _ZNSt19istreambuf_iteratorIwSt11char_traitsIwEEppEv\n  */\n-namespace \n+namespace\n {\n _GLIBCXX_APPLY_SYMVER(_ZNSt21istreambuf_iteratorXXIcSt11char_traitsIcEEppEv,\n \t\t      _ZNSt19istreambuf_iteratorIcSt11char_traitsIcEEppEv)\n@@ -76,7 +76,7 @@ _ZNSt13basic_istreamIwSt11char_traitsIwEE6ignoreEv\n _ZNSt11char_traitsIcE2eqERKcS2_\n _ZNSt11char_traitsIwE2eqERKwS2_\n  */\n-namespace \n+namespace\n {\n _GLIBCXX_APPLY_SYMVER(_ZNSt11char_traitsIcE4eqXXERKcS2_,\n \t\t      _ZNSt11char_traitsIcE2eqERKcS2_)"}, {"sha": "8304dee089c99514c792de63bfb8fbf452f39d75", "filename": "libstdc++-v3/config/abi/pre/gnu-versioned-namespace.ver", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu-versioned-namespace.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu-versioned-namespace.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu-versioned-namespace.ver?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -77,7 +77,7 @@ GLIBCXX_7.0 {\n     # locale\n     _ZNSt3__79has_facetINS_*;\n \n-    # hash \n+    # hash\n     _ZNSt8__detail3__712__prime_listE;\n     _ZNSt3tr18__detail3__712__prime_listE;\n \n@@ -110,7 +110,7 @@ GLIBCXX_7.0 {\n     _ZN9__gnu_cxx3__76__poolILb[01]EE10_M_destroyEv;\n     _ZN9__gnu_cxx3__76__poolILb1EE16_M_get_thread_idEv;\n \n-    _ZN9__gnu_cxx3__717__pool_alloc_base9_M_refillE[jmy];    \n+    _ZN9__gnu_cxx3__717__pool_alloc_base9_M_refillE[jmy];\n     _ZN9__gnu_cxx3__717__pool_alloc_base16_M_get_free_listE[jmy];\n     _ZN9__gnu_cxx3__717__pool_alloc_base12_M_get_mutexEv;\n "}, {"sha": "91287008c39b4829d8f757668abba522acf7202d", "filename": "libstdc++-v3/config/abi/pre/none.ver", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fnone.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fnone.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fnone.ver?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -1,6 +1,6 @@\n-# \n+#\n # This is a placeholder file.  It does nothing and is not used.\n-# \n+#\n # If you are seeing this file as your linker script (named\n # libstdc++-symbols.ver), then either 1) the configuration process\n # determined that symbol versioning should not be done, or 2) you"}, {"sha": "177590c8929a46c96165132f4582d43aaccb0691", "filename": "libstdc++-v3/config/cpu/arm/cxxabi_tweaks.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Farm%2Fcxxabi_tweaks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Farm%2Fcxxabi_tweaks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Farm%2Fcxxabi_tweaks.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -33,7 +33,7 @@\n #ifdef __cplusplus\n namespace __cxxabiv1\n {\n-  extern \"C\" \n+  extern \"C\"\n   {\n #endif\n \n@@ -49,7 +49,7 @@ namespace __cxxabiv1\n \n   // We also want the element size in array cookies.\n #define _GLIBCXX_ELTSIZE_IN_COOKIE 1\n-  \n+\n   // __cxa_vec_ctor should return a pointer to the array.\n   typedef void * __cxa_vec_ctor_return_type;\n #define _GLIBCXX_CXA_VEC_CTOR_RETURN(x) return x\n@@ -79,4 +79,4 @@ namespace __cxxabiv1\n } // namespace __cxxabiv1\n #endif\n \n-#endif \n+#endif"}, {"sha": "3536d845cc33dec39fcdbd9ca9f0667092232d39", "filename": "libstdc++-v3/config/cpu/cris/atomic_word.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fcris%2Fatomic_word.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fcris%2Fatomic_word.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fcris%2Fatomic_word.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -28,4 +28,4 @@\n // This entity must not cross a page boundary.\n typedef int _Atomic_word __attribute__ ((__aligned__ (4)));\n \n-#endif \n+#endif"}, {"sha": "e3f015ea9898010b844f9471f21797cc9a3b6925", "filename": "libstdc++-v3/config/cpu/generic/atomic_word.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomic_word.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomic_word.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomic_word.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -37,4 +37,4 @@ typedef int _Atomic_word;\n // This is a memory order release fence.\n #define _GLIBCXX_WRITE_MEM_BARRIER __atomic_thread_fence (__ATOMIC_RELEASE)\n \n-#endif \n+#endif"}, {"sha": "9b7431bebd748debd85ad04204a8b878dc7370eb", "filename": "libstdc++-v3/config/cpu/generic/atomicity_builtins/atomicity.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity_builtins%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity_builtins%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity_builtins%2Fatomicity.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -30,7 +30,7 @@ namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  _Atomic_word \n+  _Atomic_word\n   __attribute__ ((__unused__))\n   __exchange_and_add(volatile _Atomic_word* __mem, int __val) throw ()\n   { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }"}, {"sha": "be128722473f90bc20755c73d9571d05a1c93e8e", "filename": "libstdc++-v3/config/cpu/generic/atomicity_mutex/atomicity.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity_mutex%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity_mutex%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity_mutex%2Fatomicity.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -25,7 +25,7 @@\n #include <ext/atomicity.h>\n #include <ext/concurrence.h>\n \n-namespace \n+namespace\n {\n   __gnu_cxx::__mutex&\n   get_atomic_mutex()"}, {"sha": "16e9237b42ae59ccf19b8fe8857d87e5a0e101ea", "filename": "libstdc++-v3/config/cpu/generic/cxxabi_tweaks.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fcxxabi_tweaks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fcxxabi_tweaks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fcxxabi_tweaks.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -33,7 +33,7 @@\n #ifdef __cplusplus\n namespace __cxxabiv1\n {\n-  extern \"C\" \n+  extern \"C\"\n   {\n #endif\n \n@@ -56,4 +56,4 @@ namespace __cxxabiv1\n } // namespace __cxxabiv1\n #endif\n \n-#endif \n+#endif"}, {"sha": "364715b7f977ecaca11d1d484d13cb38350a3d14", "filename": "libstdc++-v3/config/cpu/hppa/atomicity.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fhppa%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fhppa%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fhppa%2Fatomicity.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -34,7 +34,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       static volatile int _S_atomicity_lock;\n     };\n-  \n+\n   template<int _Inst>\n   volatile int\n   _Atomicity_lock<_Inst>::_S_atomicity_lock __attribute__ ((aligned (16))) = 1;\n@@ -50,7 +50,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _Atomic_word result;\n     int tmp;\n     volatile int& lock = _Atomicity_lock<0>::_S_atomicity_lock;\n-    \n+\n     __asm__ __volatile__ (\"ldcw 0(%1),%0\\n\\t\"\n \t\t\t  \"cmpib,<>,n 0,%0,.+20\\n\\t\"\n \t\t\t  \"ldw 0(%1),%0\\n\\t\"\n@@ -60,21 +60,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t  : \"=&r\" (tmp)\n \t\t\t  : \"r\" (&lock)\n \t\t\t  : \"memory\");\n-    \n+\n     result = *__mem;\n     *__mem = result + __val;\n     __asm__ __volatile__ (\"stw %1,0(%0)\"\n \t\t\t  : : \"r\" (&lock), \"r\" (tmp) : \"memory\");\n     return result;\n   }\n-  \n+\n   void\n   __attribute__ ((__unused__))\n   __atomic_add(volatile _Atomic_word* __mem, int __val) throw ()\n   {\n     int tmp;\n     volatile int& lock = _Atomicity_lock<0>::_S_atomicity_lock;\n-    \n+\n     __asm__ __volatile__ (\"ldcw 0(%1),%0\\n\\t\"\n \t\t\t  \"cmpib,<>,n 0,%0,.+20\\n\\t\"\n \t\t\t  \"ldw 0(%1),%0\\n\\t\"\n@@ -84,7 +84,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t  : \"=&r\" (tmp)\n \t\t\t  : \"r\" (&lock)\n \t\t\t  : \"memory\");\n-    \n+\n     *__mem += __val;\n     __asm__ __volatile__ (\"stw %1,0(%0)\"\n \t\t\t  : : \"r\" (&lock), \"r\" (tmp) : \"memory\");"}, {"sha": "35818f51923cf1a424be953afc0dd2c14b3847d3", "filename": "libstdc++-v3/config/cpu/i386/atomicity.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi386%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi386%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi386%2Fatomicity.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -38,32 +38,32 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   volatile _Atomic_word _Atomicity_lock<__inst>::_S_atomicity_lock = 0;\n \n   template volatile _Atomic_word _Atomicity_lock<0>::_S_atomicity_lock;\n-  \n-  _Atomic_word \n+\n+  _Atomic_word\n   __attribute__ ((__unused__))\n   __exchange_and_add(volatile _Atomic_word* __mem, int __val) throw ()\n   {\n     register _Atomic_word __result, __tmp = 1;\n-    \n+\n     // Obtain the atomic exchange/add spin lock.\n-    do \n+    do\n       {\n \t__asm__ __volatile__ (\"xchg{l} {%0,%1|%1,%0}\"\n \t\t\t      : \"=m\" (_Atomicity_lock<0>::_S_atomicity_lock),\n \t\t\t      \"+r\" (__tmp)\n \t\t\t      : \"m\" (_Atomicity_lock<0>::_S_atomicity_lock));\n-      } \n+      }\n     while (__tmp);\n-    \n+\n     __result = *__mem;\n     *__mem += __val;\n-    \n+\n     // Release spin lock.\n     _Atomicity_lock<0>::_S_atomicity_lock = 0;\n-    \n+\n     return __result;\n   }\n-  \n+\n   void\n   __attribute__ ((__unused__))\n   __atomic_add(volatile _Atomic_word* __mem, int __val) throw ()"}, {"sha": "6068d9b40bfbe8b39bb2c904a5755e5572262d57", "filename": "libstdc++-v3/config/cpu/i486/atomicity.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi486%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi486%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi486%2Fatomicity.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -28,17 +28,17 @@ namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  _Atomic_word \n+  _Atomic_word\n   __attribute__ ((__unused__))\n   __exchange_and_add(volatile _Atomic_word* __mem, int __val) throw ()\n   {\n     register _Atomic_word __result;\n     __asm__ __volatile__ (\"lock; xadd{l} {%0,%1|%1,%0}\"\n-\t\t\t  : \"=r\" (__result), \"=m\" (*__mem) \n+\t\t\t  : \"=r\" (__result), \"=m\" (*__mem)\n \t\t\t  : \"0\" (__val), \"m\" (*__mem));\n     return __result;\n   }\n-  \n+\n   void\n   __attribute__ ((__unused__))\n   __atomic_add(volatile _Atomic_word* __mem, int __val) throw ()"}, {"sha": "e5dfbb9b2a026e00c78851c4e7d98a60f17a87ca", "filename": "libstdc++-v3/config/cpu/i486/opt/bits/opt_random.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi486%2Fopt%2Fbits%2Fopt_random.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi486%2Fopt%2Fbits%2Fopt_random.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi486%2Fopt%2Fbits%2Fopt_random.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -170,7 +170,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t  }\n \t\t      }\n \t\t    while (__v2 > __maskval || __v2 < __tmp);\n-\t\t    \n+\n \t\t    __v.__i = _mm_set_epi64x(__v1, __v2);\n \t\t  }\n "}, {"sha": "f421330242473dc586d7041b372f80c6c7504554", "filename": "libstdc++-v3/config/cpu/m68k/atomicity.h", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fm68k%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fm68k%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fm68k%2Fatomicity.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -32,7 +32,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       || defined(__mc68040__) || defined(__mc68060__) ) \\\n     && !defined(__mcpu32__)\n   // These variants support compare-and-swap.\n-  _Atomic_word \n+  _Atomic_word\n   __attribute__ ((__unused__))\n   __exchange_and_add(volatile _Atomic_word* __mem, int __val) throw ()\n   {\n@@ -58,16 +58,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     short __level, __tmpsr;\n     __asm__ __volatile__ (\"move%.w %%sr,%0\\n\\tor%.l %0,%1\\n\\tmove%.w %1,%%sr\"\n \t\t\t  : \"=d\"(__level), \"=d\"(__tmpsr) : \"1\"(0x700));\n-    \n+\n     __result = *__mem;\n-    *__mem = __result + __val;    \n+    *__mem = __result + __val;\n     __asm__ __volatile__ (\"move%.w %0,%%sr\" : : \"d\"(__level));\n-    \n+\n     return __result;\n   }\n \n #else\n-  \n+\n   template<int __inst>\n     struct _Atomicity_lock\n     {\n@@ -76,29 +76,29 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<int __inst>\n   volatile unsigned char _Atomicity_lock<__inst>::_S_atomicity_lock = 0;\n-  \n+\n   template volatile unsigned char _Atomicity_lock<0>::_S_atomicity_lock;\n-  \n-  _Atomic_word \n+\n+  _Atomic_word\n   __attribute__ ((__unused__))\n   __exchange_and_add(volatile _Atomic_word* __mem, int __val) throw ()\n   {\n     _Atomic_word __result;\n-    \n+\n     // bset with no immediate addressing (not SMP-safe)\n #if defined(__mcfisaa__) || defined(__mcfisaaplus__)\n     __asm__ __volatile__(\"1: bset.b #7,%0@\\n\\tjbne 1b\"\n \t\t\t : /* no outputs */\n \t\t\t : \"a\"(&_Atomicity_lock<0>::_S_atomicity_lock)\n \t\t\t : \"cc\", \"memory\");\n-    \n+\n     // CPU32 and CF ISAs B & C support test-and-set (SMP-safe).\n #elif defined(__mcpu32__) || defined(__mcfisab__) || defined (__mcfisac__)\n     __asm__ __volatile__(\"1: tas %0\\n\\tjbne 1b\"\n \t\t\t : \"+m\"(_Atomicity_lock<0>::_S_atomicity_lock)\n \t\t\t : /* none */\n \t\t\t : \"cc\");\n-    \n+\n     // Use bset with immediate addressing for 68000/68010 (not SMP-safe)\n     // NOTE: TAS is available on the 68000, but unsupported by some Amiga\n     // memory controllers.\n@@ -108,15 +108,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t : /* none */\n \t\t\t : \"cc\");\n #endif\n-    \n+\n     __result = *__mem;\n     *__mem = __result + __val;\n-    \n+\n     _Atomicity_lock<0>::_S_atomicity_lock = 0;\n-    \n+\n     return __result;\n   }\n-  \n+\n #endif /* TAS / BSET */\n \n   void"}, {"sha": "19211cacc4bcdc40f737c1ec2a30648c24c75807", "filename": "libstdc++-v3/config/cpu/sparc/atomic_word.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsparc%2Fatomic_word.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsparc%2Fatomic_word.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsparc%2Fatomic_word.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -45,4 +45,4 @@\n \n #endif\n \n-#endif \n+#endif"}, {"sha": "01bef57ceb2d247f133fab65fe1081282bc0c54e", "filename": "libstdc++-v3/config/cpu/sparc/atomicity.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsparc%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsparc%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsparc%2Fatomicity.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -46,14 +46,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t : \"r\" (__mem), \"r\" (__val_extended), \"m\" (*__mem));\n     return __tmp2;\n   }\n-  \n+\n   void\n   __attribute__ ((__unused__))\n   __atomic_add(volatile _Atomic_word* __mem, int __val) throw ()\n   {\n     _Atomic_word __tmp1, __tmp2;\n     _Atomic_word __val_extended = __val;\n-    \n+\n     __asm__ __volatile__(\"1:\tldx\t[%3], %0\\n\\t\"\n \t\t\t \"\tadd\t%0, %4, %1\\n\\t\"\n \t\t\t \"\tcasx\t[%3], %0, %1\\n\\t\"\n@@ -63,7 +63,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t : \"=&r\" (__tmp1), \"=&r\" (__tmp2), \"=m\" (*__mem)\n \t\t\t : \"r\" (__mem), \"r\" (__val_extended), \"m\" (*__mem));\n   }\n-  \n+\n #else /* __arch32__ */\n \n   template<int __inst>\n@@ -74,15 +74,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<int __inst>\n   unsigned char _Atomicity_lock<__inst>::_S_atomicity_lock = 0;\n-  \n+\n   template unsigned char _Atomicity_lock<0>::_S_atomicity_lock;\n-  \n+\n   _Atomic_word\n   __attribute__ ((__unused__))\n   __exchange_and_add(volatile _Atomic_word* __mem, int __val) throw ()\n   {\n     _Atomic_word __result, __tmp;\n-    \n+\n     __asm__ __volatile__(\"1:\tldstub\t[%1], %0\\n\\t\"\n \t\t\t \"\tcmp\t%0, 0\\n\\t\"\n \t\t\t \"\tbne\t1b\\n\\t\"\n@@ -98,13 +98,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t : \"memory\");\n     return __result;\n   }\n-  \n+\n   void\n   __attribute__ ((__unused__))\n   __atomic_add(volatile _Atomic_word* __mem, int __val) throw ()\n   {\n     _Atomic_word __tmp;\n-    \n+\n     __asm__ __volatile__(\"1:\tldstub\t[%1], %0\\n\\t\"\n \t\t\t \"\tcmp\t%0, 0\\n\\t\"\n \t\t\t \"\tbne\t1b\\n\\t\"\n@@ -117,7 +117,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t : /* no outputs */\n \t\t\t : \"r\" (&_Atomicity_lock<0>::_S_atomicity_lock)\n \t\t\t : \"memory\");\n-  }  \n+  }\n #endif /* __arch32__ */\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "1349dc75f89d6de4c4c476f48bc62c9123b9f14f", "filename": "libstdc++-v3/config/io/basic_file_stdio.cc", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -41,7 +41,7 @@\n \n // Pick up FIONREAD on Solaris 2\n #ifdef _GLIBCXX_HAVE_SYS_IOCTL_H\n-#define BSD_COMP \n+#define BSD_COMP\n #include <sys/ioctl.h>\n #endif\n \n@@ -65,14 +65,14 @@\n \n #include <limits> // For <off_t>::max() and min() and <streamsize>::max()\n \n-namespace \n+namespace\n {\n   // Map ios_base::openmode flags to a string for use in fopen().\n   // Table of valid combinations as given in [lib.filebuf.members]/2.\n   static const char*\n   fopen_mode(std::ios_base::openmode mode)\n   {\n-    enum \n+    enum\n       {\n \tin     = std::ios_base::in,\n \tout    = std::ios_base::out,\n@@ -167,7 +167,7 @@ namespace\n \t    __nleft -= xwrite(__fd, __s2 + __off, __n2 - __off);\n \t    break;\n \t  }\n-\t\n+\n \t__s1 += __ret;\n \t__n1_left -= __ret;\n       }\n@@ -188,15 +188,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   __basic_file<char>::~__basic_file()\n   { this->close(); }\n-      \n+\n   __basic_file<char>*\n-  __basic_file<char>::sys_open(__c_file* __file, ios_base::openmode) \n+  __basic_file<char>::sys_open(__c_file* __file, ios_base::openmode)\n   {\n     __basic_file* __ret = NULL;\n     if (!this->is_open() && __file)\n       {\n \tint __err;\n-\terrno = 0;\t\n+\terrno = 0;\n \tdo\n \t  __err = this->sync();\n \twhile (__err && errno == EINTR);\n@@ -209,7 +209,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n     return __ret;\n   }\n-  \n+\n   __basic_file<char>*\n   __basic_file<char>::sys_open(int __fd, ios_base::openmode __mode) throw ()\n   {\n@@ -225,9 +225,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n     return __ret;\n   }\n-  \n-  __basic_file<char>* \n-  __basic_file<char>::open(const char* __name, ios_base::openmode __mode, \n+\n+  __basic_file<char>*\n+  __basic_file<char>::open(const char* __name, ios_base::openmode __mode,\n \t\t\t   int /*__prot*/)\n   {\n     __basic_file* __ret = NULL;\n@@ -246,22 +246,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n     return __ret;\n   }\n-  \n-  bool \n+\n+  bool\n   __basic_file<char>::is_open() const throw ()\n   { return _M_cfile != 0; }\n-  \n-  int \n+\n+  int\n   __basic_file<char>::fd() throw ()\n   { return fileno(_M_cfile); }\n-  \n+\n   __c_file*\n   __basic_file<char>::file() throw ()\n   { return _M_cfile; }\n-  \n-  __basic_file<char>* \n+\n+  __basic_file<char>*\n   __basic_file<char>::close()\n-  { \n+  {\n     __basic_file* __ret = static_cast<__basic_file*>(NULL);\n     if (this->is_open())\n       {\n@@ -283,8 +283,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n     return __ret;\n   }\n- \n-  streamsize \n+\n+  streamsize\n   __basic_file<char>::xsgetn(char* __s, streamsize __n)\n   {\n     streamsize __ret;\n@@ -294,11 +294,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     return __ret;\n   }\n \n-  streamsize \n+  streamsize\n   __basic_file<char>::xsputn(const char* __s, streamsize __n)\n   { return xwrite(this->fd(), __s, __n); }\n \n-  streamsize \n+  streamsize\n   __basic_file<char>::xsputn_2(const char* __s1, streamsize __n1,\n \t\t\t       const char* __s2, streamsize __n2)\n   {\n@@ -328,20 +328,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n   }\n \n-  int \n-  __basic_file<char>::sync() \n+  int\n+  __basic_file<char>::sync()\n   { return fflush(_M_cfile); }\n \n   streamsize\n   __basic_file<char>::showmanyc()\n   {\n #ifndef _GLIBCXX_NO_IOCTL\n #ifdef FIONREAD\n-    // Pipes and sockets.    \n+    // Pipes and sockets.\n     int __num = 0;\n     int __r = ioctl(this->fd(), FIONREAD, &__num);\n     if (!__r && __num >= 0)\n-      return __num; \n+      return __num;\n #endif\n #endif\n \n@@ -352,7 +352,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __pfd[0].events = POLLIN;\n     if (poll(__pfd, 1, 0) <= 0)\n       return 0;\n-#endif   \n+#endif\n \n #if defined(_GLIBCXX_HAVE_S_ISREG) || defined(_GLIBCXX_HAVE_S_IFREG)\n     // Regular files."}, {"sha": "47ae9e8ae4970a739686a675fa42a9a1a35d57e0", "filename": "libstdc++-v3/config/io/basic_file_stdio.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -47,7 +47,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Generic declaration.\n   template<typename _CharT>\n-    class __basic_file; \n+    class __basic_file;\n \n   // Specialization.\n   template<>\n@@ -81,7 +81,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n #endif\n \n-      __basic_file* \n+      __basic_file*\n       open(const char* __name, ios_base::openmode __mode, int __prot = 0664);\n \n       __basic_file*\n@@ -90,34 +90,34 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __basic_file*\n       sys_open(int __fd, ios_base::openmode __mode) throw ();\n \n-      __basic_file* \n-      close(); \n+      __basic_file*\n+      close();\n \n-      _GLIBCXX_PURE bool \n+      _GLIBCXX_PURE bool\n       is_open() const throw ();\n \n-      _GLIBCXX_PURE int \n+      _GLIBCXX_PURE int\n       fd() throw ();\n \n       _GLIBCXX_PURE __c_file*\n       file() throw ();\n \n       ~__basic_file();\n \n-      streamsize \n+      streamsize\n       xsputn(const char* __s, streamsize __n);\n \n-      streamsize \n+      streamsize\n       xsputn_2(const char* __s1, streamsize __n1,\n \t       const char* __s2, streamsize __n2);\n \n-      streamsize \n+      streamsize\n       xsgetn(char* __s, streamsize __n);\n \n       streamoff\n       seekoff(streamoff __off, ios_base::seekdir __way) throw ();\n \n-      int \n+      int\n       sync();\n \n       streamsize\n@@ -127,4 +127,4 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n-#endif\t\n+#endif"}, {"sha": "5fa78b3d7215a62cf4524bdc0fb81600170cd76e", "filename": "libstdc++-v3/config/locale/darwin/ctype_members.cc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdarwin%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdarwin%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdarwin%2Fctype_members.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -40,27 +40,27 @@ namespace std _GLIBCXX_VISIBILITY(default)\n   // various /config/os/* files.\n \n   ctype_byname<char>::ctype_byname(const char* __s, size_t __refs)\n-  : ctype<char>(0, false, __refs) \n-  { \t\t\n+  : ctype<char>(0, false, __refs)\n+  {\n     if (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n       {\n \tthis->_S_destroy_c_locale(this->_M_c_locale_ctype);\n-\tthis->_S_create_c_locale(this->_M_c_locale_ctype, __s); \n+\tthis->_S_create_c_locale(this->_M_c_locale_ctype, __s);\n       }\n   }\n \n   ctype_byname<char>::~ctype_byname()\n   { }\n \n-#ifdef _GLIBCXX_USE_WCHAR_T  \n+#ifdef _GLIBCXX_USE_WCHAR_T\n   ctype<wchar_t>::__wmask_type\n   ctype<wchar_t>::_M_convert_to_wmask(const mask __m) const throw()\n   {\n     // Darwin uses the same codes for 'char' as 'wchar_t', so this routine\n     // never gets called.\n     return __m;\n   };\n-  \n+\n   wchar_t\n   ctype<wchar_t>::do_toupper(wchar_t __c) const\n   { return towupper(__c); }\n@@ -75,11 +75,11 @@ namespace std _GLIBCXX_VISIBILITY(default)\n       }\n     return __hi;\n   }\n-  \n+\n   wchar_t\n   ctype<wchar_t>::do_tolower(wchar_t __c) const\n   { return towlower(__c); }\n-  \n+\n   const wchar_t*\n   ctype<wchar_t>::do_tolower(wchar_t* __lo, const wchar_t* __hi) const\n   {\n@@ -96,7 +96,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n   do_widen(char __c) const\n   { return _M_widen[static_cast<unsigned char>(__c)]; }\n \n-  const char* \n+  const char*\n   ctype<wchar_t>::\n   do_widen(const char* __lo, const char* __hi, wchar_t* __dest) const\n   {\n@@ -112,16 +112,16 @@ namespace std _GLIBCXX_VISIBILITY(default)\n   char\n   ctype<wchar_t>::\n   do_narrow(wchar_t __wc, char __dfault) const\n-  { \n+  {\n     if (__wc >= 0 && __wc < 128 && _M_narrow_ok)\n       return _M_narrow[__wc];\n     const int __c = wctob(__wc);\n-    return (__c == EOF ? __dfault : static_cast<char>(__c)); \n+    return (__c == EOF ? __dfault : static_cast<char>(__c));\n   }\n \n   const wchar_t*\n   ctype<wchar_t>::\n-  do_narrow(const wchar_t* __lo, const wchar_t* __hi, char __dfault, \n+  do_narrow(const wchar_t* __lo, const wchar_t* __hi, char __dfault,\n \t    char* __dest) const\n   {\n     if (_M_narrow_ok)"}, {"sha": "42698a90c00bfb7bf8445bc8297a519f6978b05e", "filename": "libstdc++-v3/config/locale/dragonfly/codecvt_members.cc", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdragonfly%2Fcodecvt_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdragonfly%2Fcodecvt_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdragonfly%2Fcodecvt_members.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -42,7 +42,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #ifdef _GLIBCXX_USE_WCHAR_T\n   codecvt_base::result\n   codecvt<wchar_t, char, mbstate_t>::\n-  do_out(state_type& __state, const intern_type* __from, \n+  do_out(state_type& __state, const intern_type* __from,\n \t const intern_type* __from_end, const intern_type*& __from_next,\n \t extern_type* __to, extern_type* __to_end,\n \t extern_type*& __to_next) const\n@@ -108,12 +108,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     uselocale((locale_t)__old);\n \n-    return __ret; \n+    return __ret;\n   }\n-  \n+\n   codecvt_base::result\n   codecvt<wchar_t, char, mbstate_t>::\n-  do_in(state_type& __state, const extern_type* __from, \n+  do_in(state_type& __state, const extern_type* __from,\n \tconst extern_type* __from_end, const extern_type*& __from_next,\n \tintern_type* __to, intern_type* __to_end,\n \tintern_type*& __to_next) const\n@@ -155,12 +155,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t  break;\n \t      }\n \t    __from_next = __from;\n-\t    __state = __tmp_state;\t    \n+\t    __state = __tmp_state;\n \t    __ret = error;\n \t  }\n \telse if (__from_next && __from_next < __from_chunk_end)\n \t  {\n-\t    // It is unclear what to return in this case (see DR 382). \n+\t    // It is unclear what to return in this case (see DR 382).\n \t    __to_next += __conv;\n \t    __ret = partial;\n \t  }\n@@ -175,7 +175,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    if (__to_next < __to_end)\n \t      {\n \t\t// XXX Probably wrong for stateful encodings\n-\t\t__tmp_state = __state;\t\t\n+\t\t__tmp_state = __state;\n \t\t++__from_next;\n \t\t*__to_next++ = L'\\0';\n \t      }\n@@ -186,10 +186,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     uselocale((locale_t)__old);\n \n-    return __ret; \n+    return __ret;\n   }\n \n-  int \n+  int\n   codecvt<wchar_t, char, mbstate_t>::\n   do_encoding() const throw()\n   {\n@@ -201,9 +201,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __ret = 1;\n     uselocale((locale_t)__old);\n     return __ret;\n-  }  \n+  }\n \n-  int \n+  int\n   codecvt<wchar_t, char, mbstate_t>::\n   do_max_length() const throw()\n   {\n@@ -213,8 +213,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     uselocale((locale_t)__old);\n     return __ret;\n   }\n-  \n-  int \n+\n+  int\n   codecvt<wchar_t, char, mbstate_t>::\n   do_length(state_type& __state, const extern_type* __from,\n \t    const extern_type* __end, size_t __max) const\n@@ -227,10 +227,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     // mbsnrtowcs is *very* fast but stops if encounters NUL characters:\n     // in case we advance past it and then continue, in a loop.\n     // NB: mbsnrtowcs is a GNU extension\n-  \n+\n     // A dummy internal buffer is needed in order for mbsnrtocws to consider\n     // its fourth parameter (it wouldn't with NULL as first parameter).\n-    wchar_t* __to = static_cast<wchar_t*>(__builtin_alloca(sizeof(wchar_t) \n+    wchar_t* __to = static_cast<wchar_t*>(__builtin_alloca(sizeof(wchar_t)\n \t\t\t\t\t\t\t   * __max));\n     while (__from < __end && __max)\n       {\n@@ -264,7 +264,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  }\n \tif (!__from)\n \t  __from = __from_chunk_end;\n-\t\n+\n \t__ret += __from - __tmp_from;\n \t__max -= __conv;\n \n@@ -280,7 +280,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     uselocale((locale_t)__old);\n \n-    return __ret; \n+    return __ret;\n   }\n #endif\n "}, {"sha": "979f501a0f826148c36471da81b7d53fbbe012bc", "filename": "libstdc++-v3/config/locale/dragonfly/collate_members.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdragonfly%2Fcollate_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdragonfly%2Fcollate_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdragonfly%2Fcollate_members.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -39,30 +39,30 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // These are basically extensions to char_traits, and perhaps should\n   // be put there instead of here.\n   template<>\n-    int \n-    collate<char>::_M_compare(const char* __one, \n+    int\n+    collate<char>::_M_compare(const char* __one,\n \t\t\t      const char* __two) const throw()\n-    { \n+    {\n       int __cmp = strcoll_l(__one, __two, (locale_t)_M_c_locale_collate);\n       return (__cmp >> (8 * sizeof (int) - 2)) | (__cmp != 0);\n     }\n-  \n+\n   template<>\n     size_t\n-    collate<char>::_M_transform(char* __to, const char* __from, \n+    collate<char>::_M_transform(char* __to, const char* __from,\n \t\t\t\tsize_t __n) const throw()\n     { return strxfrm_l(__to, __from, __n, (locale_t)_M_c_locale_collate); }\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n   template<>\n-    int \n-    collate<wchar_t>::_M_compare(const wchar_t* __one, \n+    int\n+    collate<wchar_t>::_M_compare(const wchar_t* __one,\n \t\t\t\t const wchar_t* __two) const throw()\n     {\n       int __cmp = wcscoll_l(__one, __two, (locale_t)_M_c_locale_collate);\n       return (__cmp >> (8 * sizeof (int) - 2)) | (__cmp != 0);\n     }\n-  \n+\n   template<>\n     size_t\n     collate<wchar_t>::_M_transform(wchar_t* __to, const wchar_t* __from,"}, {"sha": "fbe220d782906c954e82d68276c835e73600163f", "filename": "libstdc++-v3/config/locale/dragonfly/ctype_members.cc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdragonfly%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdragonfly%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdragonfly%2Fctype_members.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -44,19 +44,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // NB: The other ctype<char> specializations are in src/locale.cc and\n   // various /config/os/* files.\n   ctype_byname<char>::ctype_byname(const char* __s, size_t __refs)\n-  : ctype<char>(0, false, __refs) \n-  { \t\t\n+  : ctype<char>(0, false, __refs)\n+  {\n     if (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n       {\n \tthis->_S_destroy_c_locale(this->_M_c_locale_ctype);\n-\tthis->_S_create_c_locale(this->_M_c_locale_ctype, __s); \n+\tthis->_S_create_c_locale(this->_M_c_locale_ctype, __s);\n       }\n   }\n \n   ctype_byname<char>::~ctype_byname()\n   { }\n \n-#ifdef _GLIBCXX_USE_WCHAR_T  \n+#ifdef _GLIBCXX_USE_WCHAR_T\n   ctype<wchar_t>::__wmask_type\n   ctype<wchar_t>::_M_convert_to_wmask(const mask __m) const throw()\n   {\n@@ -104,7 +104,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n     return __ret;\n   }\n-  \n+\n   wchar_t\n   ctype<wchar_t>::do_toupper(wchar_t __c) const\n   { return towupper_l(__c, (locale_t)_M_c_locale_ctype); }\n@@ -119,11 +119,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n     return __hi;\n   }\n-  \n+\n   wchar_t\n   ctype<wchar_t>::do_tolower(wchar_t __c) const\n   { return towlower_l(__c, (locale_t)_M_c_locale_ctype); }\n-  \n+\n   const wchar_t*\n   ctype<wchar_t>::do_tolower(wchar_t* __lo, const wchar_t* __hi) const\n   {\n@@ -140,7 +140,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   do_widen(char __c) const\n   { return _M_widen[static_cast<unsigned char>(__c)]; }\n \n-  const char* \n+  const char*\n   ctype<wchar_t>::\n   do_widen(const char* __lo, const char* __hi, wchar_t* __dest) const\n   {\n@@ -162,12 +162,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __c_locale __old = (__c_locale)uselocale((locale_t)_M_c_locale_ctype);\n     const int __c = wctob(__wc);\n     uselocale((locale_t)__old);\n-    return (__c == EOF ? __dfault : static_cast<char>(__c)); \n+    return (__c == EOF ? __dfault : static_cast<char>(__c));\n   }\n \n   const wchar_t*\n   ctype<wchar_t>::\n-  do_narrow(const wchar_t* __lo, const wchar_t* __hi, char __dfault, \n+  do_narrow(const wchar_t* __lo, const wchar_t* __hi, char __dfault,\n \t    char* __dest) const\n   {\n     __c_locale __old = (__c_locale)uselocale((locale_t)_M_c_locale_ctype);"}, {"sha": "f9a04fbba7e130ce073893e6f8454f5e23db68c6", "filename": "libstdc++-v3/config/locale/dragonfly/monetary_members.cc", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdragonfly%2Fmonetary_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdragonfly%2Fmonetary_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdragonfly%2Fmonetary_members.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -44,17 +44,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Construct and return valid pattern consisting of some combination of:\n   // space none symbol sign value\n   money_base::pattern\n-  money_base::_S_construct_pattern(char __precedes, char __space, \n+  money_base::_S_construct_pattern(char __precedes, char __space,\n \t\t\t\t   char __posn) throw()\n-  { \n+  {\n     pattern __ret;\n \n     // This insanely complicated routine attempts to construct a valid\n     // pattern for use with moneypunct. A couple of invariants:\n \n     // if (__precedes) symbol -> value\n     // else value -> symbol\n-    \n+\n     // if (__space) space\n     // else none\n \n@@ -139,15 +139,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tif (__precedes)\n \t  {\n \t    __ret.field[0] = sign;\n-\t    __ret.field[1] = symbol;\t    \n+\t    __ret.field[1] = symbol;\n \t    if (__space)\n \t      {\n \t\t__ret.field[2] = space;\n \t\t__ret.field[3] = value;\n \t      }\n \t    else\n \t      {\n-\t\t__ret.field[2] = value;\t\t\n+\t\t__ret.field[2] = value;\n \t\t__ret.field[3] = none;\n \t      }\n \t  }\n@@ -211,7 +211,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<>\n     void\n-    moneypunct<char, true>::_M_initialize_moneypunct(__c_locale __cloc, \n+    moneypunct<char, true>::_M_initialize_moneypunct(__c_locale __cloc,\n \t\t\t\t\t\t     const char*)\n     {\n       if (!_M_data)\n@@ -270,7 +270,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  __try\n \t    {\n \t      size_t __len;\n-\t      \n+\n \t      // Check for NULL, which implies no grouping.\n \t      if (lc->mon_thousands_sep == NULL ||\n \t          lc->mon_thousands_sep[0] == '\\0')\n@@ -365,7 +365,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<>\n     void\n-    moneypunct<char, false>::_M_initialize_moneypunct(__c_locale __cloc, \n+    moneypunct<char, false>::_M_initialize_moneypunct(__c_locale __cloc,\n \t\t\t\t\t\t      const char*)\n     {\n       if (!_M_data)\n@@ -550,7 +550,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #ifdef _GLIBCXX_USE_WCHAR_T\n   template<>\n     void\n-    moneypunct<wchar_t, true>::_M_initialize_moneypunct(__c_locale __cloc, \n+    moneypunct<wchar_t, true>::_M_initialize_moneypunct(__c_locale __cloc,\n \t\t\t\t\t\t\tconst char*)\n     {\n       if (!_M_data)\n@@ -652,9 +652,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t}\n \t      else\n \t\t_M_data->_M_positive_sign = L\"\";\n-\t      _M_data->_M_positive_sign_size = \n+\t      _M_data->_M_positive_sign_size =\n \t\twcslen(_M_data->_M_positive_sign);\n-\t      \n+\n \t      __len = strlen(__cnegsign);\n \t      if (!__nposn)\n \t\t_M_data->_M_negative_sign = L\"()\";\n@@ -667,9 +667,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t}\n \t      else\n \t\t_M_data->_M_negative_sign = L\"\";\n-\t      _M_data->_M_negative_sign_size = \n+\t      _M_data->_M_negative_sign_size =\n \t\twcslen(_M_data->_M_negative_sign);\n-\t      \n+\n \t      // _Intl == true.\n \t      __len = strlen(__ccurr);\n \t      if (__len)\n@@ -689,11 +689,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      _M_data = 0;\n \t      delete [] __group;\n \t      delete [] __wcs_ps;\n-\t      delete [] __wcs_ns;\t      \n+\t      delete [] __wcs_ns;\n \t      uselocale((locale_t)__old);\n \t      __throw_exception_again;\n-\t    } \n-\t  \n+\t    }\n+\n \t  char __pprecedes = lc->int_p_cs_precedes;\n \t  char __pspace = lc->int_p_sep_by_space;\n \t  char __pposn = lc->int_p_sign_posn;\n@@ -812,7 +812,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t}\n \t      else\n \t\t_M_data->_M_positive_sign = L\"\";\n-              _M_data->_M_positive_sign_size = \n+              _M_data->_M_positive_sign_size =\n \t\twcslen(_M_data->_M_positive_sign);\n \n \t      __len = strlen(__cnegsign);\n@@ -827,7 +827,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t}\n \t      else\n \t\t_M_data->_M_negative_sign = L\"\";\n-              _M_data->_M_negative_sign_size = \n+              _M_data->_M_negative_sign_size =\n \t\twcslen(_M_data->_M_negative_sign);\n \n \t      // _Intl == true.\n@@ -849,7 +849,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n               _M_data = 0;\n \t      delete [] __group;\n \t      delete [] __wcs_ps;\n-\t      delete [] __wcs_ns;\t      \n+\t      delete [] __wcs_ns;\n \t      uselocale((locale_t)__old);\n               __throw_exception_again;\n \t    }"}, {"sha": "29c9fc9202a305aa00f640280a9c5effe52efe84", "filename": "libstdc++-v3/config/locale/dragonfly/numeric_members.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdragonfly%2Fnumeric_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdragonfly%2Fnumeric_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdragonfly%2Fnumeric_members.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -37,7 +37,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  template<> \n+  template<>\n     void\n     numpunct<char>::_M_initialize_numpunct(__c_locale __cloc)\n     {\n@@ -123,17 +123,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_data->_M_falsename = \"false\";\n       _M_data->_M_falsename_size = 5;\n     }\n- \n-  template<> \n+\n+  template<>\n     numpunct<char>::~numpunct()\n     {\n       if (_M_data->_M_grouping_size)\n \tdelete [] _M_data->_M_grouping;\n       delete _M_data;\n     }\n-   \n+\n #ifdef _GLIBCXX_USE_WCHAR_T\n-  template<> \n+  template<>\n     void\n     numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc)\n     {\n@@ -222,7 +222,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_data->_M_falsename_size = 5;\n     }\n \n-  template<> \n+  template<>\n     numpunct<wchar_t>::~numpunct()\n     {\n       if (_M_data->_M_grouping_size)"}, {"sha": "c1a1f3d5b4cfc872981620f66aa8fc3f5c7cc21b", "filename": "libstdc++-v3/config/locale/dragonfly/time_members.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdragonfly%2Ftime_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdragonfly%2Ftime_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdragonfly%2Ftime_members.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -44,7 +44,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<>\n     void\n     __timepunct<char>::\n-    _M_put(char* __s, size_t __maxlen, const char* __format, \n+    _M_put(char* __s, size_t __maxlen, const char* __format,\n \t   const tm* __tm) const throw()\n     {\n       const size_t __len = strftime_l(__s, __maxlen, __format, __tm,\n@@ -54,7 +54,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__s[0] = '\\0';\n     }\n \n-  template<> \n+  template<>\n     void\n     __timepunct<char>::_M_initialize_timepunct(__c_locale __cloc)\n     {\n@@ -124,7 +124,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n       else\n \t{\n-\t  _M_c_locale_timepunct = _S_clone_c_locale(__cloc); \n+\t  _M_c_locale_timepunct = _S_clone_c_locale(__cloc);\n \n \t  _M_data->_M_date_format = nl_langinfo_l(D_FMT, (locale_t)__cloc);\n \t  _M_data->_M_date_era_format = nl_langinfo_l(ERA_D_FMT,\n@@ -193,7 +193,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<>\n     void\n     __timepunct<wchar_t>::\n-    _M_put(wchar_t* __s, size_t __maxlen, const wchar_t* __format, \n+    _M_put(wchar_t* __s, size_t __maxlen, const wchar_t* __format,\n \t   const tm* __tm) const throw()\n     {\n       const size_t __len = wcsftime_l(__s, __maxlen, __format, __tm,\n@@ -211,7 +211,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tlangstring[fmtlen] = L'\\0'; \\\n \t_M_data->M = langstring;\n \n-  template<> \n+  template<>\n     void\n     __timepunct<wchar_t>::_M_initialize_timepunct(__c_locale __cloc)\n     {\n@@ -285,7 +285,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  wchar_t holder[128];\n \t  size_t fmtlen;\n \n-\t  _M_c_locale_timepunct = _S_clone_c_locale(__cloc); \n+\t  _M_c_locale_timepunct = _S_clone_c_locale(__cloc);\n \n \t  WIDE_LANGINFO(_M_date_format, D_FMT)\n \t  WIDE_LANGINFO(_M_date_era_format, ERA_D_FMT)\n@@ -345,7 +345,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n     }\n \n-  template<> \n+  template<>\n     __timepunct<wchar_t>::~__timepunct()\n     {\n       delete [] _M_data->_M_date_format;"}, {"sha": "0fa16e19df30c3ec1379a2510fdeae25f74e27c5", "filename": "libstdc++-v3/config/locale/dragonfly/time_members.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdragonfly%2Ftime_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdragonfly%2Ftime_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdragonfly%2Ftime_members.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -40,21 +40,21 @@ namespace std _GLIBCXX_VISIBILITY(default)\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _CharT>\n-    __timepunct<_CharT>::__timepunct(size_t __refs) \n-    : facet(__refs), _M_data(0), _M_c_locale_timepunct(0), \n+    __timepunct<_CharT>::__timepunct(size_t __refs)\n+    : facet(__refs), _M_data(0), _M_c_locale_timepunct(0),\n       _M_name_timepunct(_S_get_c_name())\n     { _M_initialize_timepunct(); }\n \n   template<typename _CharT>\n-    __timepunct<_CharT>::__timepunct(__cache_type* __cache, size_t __refs) \n-    : facet(__refs), _M_data(__cache), _M_c_locale_timepunct(0), \n+    __timepunct<_CharT>::__timepunct(__cache_type* __cache, size_t __refs)\n+    : facet(__refs), _M_data(__cache), _M_c_locale_timepunct(0),\n       _M_name_timepunct(_S_get_c_name())\n     { _M_initialize_timepunct(); }\n \n   template<typename _CharT>\n     __timepunct<_CharT>::__timepunct(__c_locale __cloc, const char* __s,\n-\t\t\t\t     size_t __refs) \n-    : facet(__refs), _M_data(0), _M_c_locale_timepunct(0), \n+\t\t\t\t     size_t __refs)\n+    : facet(__refs), _M_data(0), _M_c_locale_timepunct(0),\n       _M_name_timepunct(0)\n     {\n       if (__builtin_strcmp(__s, _S_get_c_name()) != 0)\n@@ -79,11 +79,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _CharT>\n     __timepunct<_CharT>::~__timepunct()\n-    { \n+    {\n       if (_M_name_timepunct != _S_get_c_name())\n \tdelete [] _M_name_timepunct;\n-      delete _M_data; \n-      _S_destroy_c_locale(_M_c_locale_timepunct); \n+      delete _M_data;\n+      _S_destroy_c_locale(_M_c_locale_timepunct);\n     }\n \n   // specialization"}, {"sha": "6a750de2d7148ae0457f4b9daa7793f36612fc4d", "filename": "libstdc++-v3/config/locale/generic/c_locale.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -53,7 +53,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // fall back to the unsafe vsprintf which, in general, can be dangerous\n   // and should be avoided.\n   inline int\n-  __convert_from_v(const __c_locale&, char* __out, \n+  __convert_from_v(const __c_locale&, char* __out,\n \t\t   const int __size __attribute__((__unused__)),\n \t\t   const char* __fmt, ...)\n   {"}, {"sha": "3204474e4a9d59324f1dfe98e33e2219ebd80bc4", "filename": "libstdc++-v3/config/locale/generic/codecvt_members.cc", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcodecvt_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcodecvt_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcodecvt_members.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -41,7 +41,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #ifdef _GLIBCXX_USE_WCHAR_T\n   codecvt_base::result\n   codecvt<wchar_t, char, mbstate_t>::\n-  do_out(state_type& __state, const intern_type* __from, \n+  do_out(state_type& __state, const intern_type* __from,\n \t const intern_type* __from_end, const intern_type*& __from_next,\n \t extern_type* __to, extern_type* __to_end,\n \t extern_type*& __to_next) const\n@@ -88,7 +88,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t__ret = partial;\n \t\tbreak;\n \t      }\n-\t    \n+\n \t    memcpy(__to, __buf, __conv);\n \t    __state = __tmp_state;\n \t    __to += __conv;\n@@ -101,12 +101,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     __from_next = __from;\n     __to_next = __to;\n-    return __ret; \n+    return __ret;\n   }\n-  \n+\n   codecvt_base::result\n   codecvt<wchar_t, char, mbstate_t>::\n-  do_in(state_type& __state, const extern_type* __from, \n+  do_in(state_type& __state, const extern_type* __from,\n \tconst extern_type* __from_end, const extern_type*& __from_next,\n \tintern_type* __to, intern_type* __to_end,\n \tintern_type*& __to_next) const\n@@ -153,10 +153,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     __from_next = __from;\n     __to_next = __to;\n-    return __ret; \n+    return __ret;\n   }\n \n-  int \n+  int\n   codecvt<wchar_t, char, mbstate_t>::\n   do_encoding() const throw()\n   {\n@@ -166,18 +166,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     if (MB_CUR_MAX == 1)\n       __ret = 1;\n     return __ret;\n-  }  \n+  }\n \n-  int \n+  int\n   codecvt<wchar_t, char, mbstate_t>::\n   do_max_length() const throw()\n   {\n     // XXX Probably wrong for stateful encodings.\n     int __ret = MB_CUR_MAX;\n     return __ret;\n   }\n-  \n-  int \n+\n+  int\n   codecvt<wchar_t, char, mbstate_t>::\n   do_length(state_type& __state, const extern_type* __from,\n \t    const extern_type* __end, size_t __max) const\n@@ -211,7 +211,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__max--;\n       }\n \n-    return __ret; \n+    return __ret;\n   }\n #endif\n "}, {"sha": "0d0d247288522a1a7ddd22e6f1d70b840de70b4b", "filename": "libstdc++-v3/config/locale/generic/collate_members.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcollate_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcollate_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcollate_members.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -38,30 +38,30 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // These are basically extensions to char_traits, and perhaps should\n   // be put there instead of here.\n   template<>\n-    int \n-    collate<char>::_M_compare(const char* __one, \n+    int\n+    collate<char>::_M_compare(const char* __one,\n \t\t\t      const char* __two) const throw()\n-    { \n+    {\n       int __cmp = strcoll(__one, __two);\n       return (__cmp >> (8 * sizeof (int) - 2)) | (__cmp != 0);\n     }\n-  \n+\n   template<>\n     size_t\n-    collate<char>::_M_transform(char* __to, const char* __from, \n+    collate<char>::_M_transform(char* __to, const char* __from,\n \t\t\t\tsize_t __n) const throw()\n     { return strxfrm(__to, __from, __n); }\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n   template<>\n-    int \n-    collate<wchar_t>::_M_compare(const wchar_t* __one, \n+    int\n+    collate<wchar_t>::_M_compare(const wchar_t* __one,\n \t\t\t\t const wchar_t* __two) const throw()\n     {\n       int __cmp = wcscoll(__one, __two);\n       return (__cmp >> (8 * sizeof (int) - 2)) | (__cmp != 0);\n     }\n-  \n+\n   template<>\n     size_t\n     collate<wchar_t>::_M_transform(wchar_t* __to, const wchar_t* __from,"}, {"sha": "8eadb4a333f7a2540fb8620e3553922925b7c346", "filename": "libstdc++-v3/config/locale/generic/ctype_members.cc", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -40,19 +40,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // NB: The other ctype<char> specializations are in src/locale.cc and\n   // various /config/os/* files.\n   ctype_byname<char>::ctype_byname(const char* __s, size_t __refs)\n-  : ctype<char>(0, false, __refs) \n-  { \t\n+  : ctype<char>(0, false, __refs)\n+  {\n     if (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n       {\n \tthis->_S_destroy_c_locale(this->_M_c_locale_ctype);\n-\tthis->_S_create_c_locale(this->_M_c_locale_ctype, __s); \n+\tthis->_S_create_c_locale(this->_M_c_locale_ctype, __s);\n       }\n   }\n \n   ctype_byname<char>::~ctype_byname()\n   { }\n \n-#ifdef _GLIBCXX_USE_WCHAR_T  \n+#ifdef _GLIBCXX_USE_WCHAR_T\n   ctype<wchar_t>::__wmask_type\n   ctype<wchar_t>::_M_convert_to_wmask(const mask __m) const throw()\n   {\n@@ -102,7 +102,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n     return __ret;\n   };\n-  \n+\n   wchar_t\n   ctype<wchar_t>::do_toupper(wchar_t __c) const\n   { return towupper(__c); }\n@@ -117,11 +117,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n     return __hi;\n   }\n-  \n+\n   wchar_t\n   ctype<wchar_t>::do_tolower(wchar_t __c) const\n   { return towlower(__c); }\n-  \n+\n   const wchar_t*\n   ctype<wchar_t>::do_tolower(wchar_t* __lo, const wchar_t* __hi) const\n   {\n@@ -136,30 +136,30 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   bool\n   ctype<wchar_t>::\n   do_is(mask __m, char_type __c) const\n-  { \n+  {\n     bool __ret = false;\n     // Generically, 15 (instead of 11) since we don't know the numerical\n     // encoding of the various categories in /usr/include/ctype.h.\n-    const size_t __bitmasksize = 15; \n+    const size_t __bitmasksize = 15;\n     for (size_t __bitcur = 0; __bitcur <= __bitmasksize; ++__bitcur)\n       if (__m & _M_bit[__bitcur]\n \t  && iswctype(__c, _M_wmask[__bitcur]))\n \t{\n \t  __ret = true;\n \t  break;\n \t}\n-    return __ret;    \n+    return __ret;\n   }\n-  \n-  const wchar_t* \n+\n+  const wchar_t*\n   ctype<wchar_t>::\n   do_is(const wchar_t* __lo, const wchar_t* __hi, mask* __vec) const\n   {\n     for (;__lo < __hi; ++__vec, ++__lo)\n       {\n \t// Generically, 15 (instead of 11) since we don't know the numerical\n \t// encoding of the various categories in /usr/include/ctype.h.\n-\tconst size_t __bitmasksize = 15; \n+\tconst size_t __bitmasksize = 15;\n \tmask __m = 0;\n \tfor (size_t __bitcur = 0; __bitcur <= __bitmasksize; ++__bitcur)\n \t  if (iswctype(*__lo, _M_wmask[__bitcur]))\n@@ -168,8 +168,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n     return __hi;\n   }\n-  \n-  const wchar_t* \n+\n+  const wchar_t*\n   ctype<wchar_t>::\n   do_scan_is(mask __m, const wchar_t* __lo, const wchar_t* __hi) const\n   {\n@@ -191,8 +191,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   ctype<wchar_t>::\n   do_widen(char __c) const\n   { return _M_widen[static_cast<unsigned char>(__c)]; }\n-  \n-  const char* \n+\n+  const char*\n   ctype<wchar_t>::\n   do_widen(const char* __lo, const char* __hi, wchar_t* __dest) const\n   {\n@@ -208,16 +208,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   char\n   ctype<wchar_t>::\n   do_narrow(wchar_t __wc, char __dfault) const\n-  { \n+  {\n     if (__wc >= 0 && __wc < 128 && _M_narrow_ok)\n       return _M_narrow[__wc];\n     const int __c = wctob(__wc);\n-    return (__c == EOF ? __dfault : static_cast<char>(__c)); \n+    return (__c == EOF ? __dfault : static_cast<char>(__c));\n   }\n \n   const wchar_t*\n   ctype<wchar_t>::\n-  do_narrow(const wchar_t* __lo, const wchar_t* __hi, char __dfault, \n+  do_narrow(const wchar_t* __lo, const wchar_t* __hi, char __dfault,\n \t    char* __dest) const\n   {\n     if (_M_narrow_ok)\n@@ -265,10 +265,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_widen[__i] = btowc(__i);\n \n     for (size_t __i = 0; __i <= 15; ++__i)\n-      { \n+      {\n \t_M_bit[__i] = static_cast<mask>(1 << __i);\n \t_M_wmask[__i] = _M_convert_to_wmask(_M_bit[__i]);\n-      }  \n+      }\n   }\n #endif //  _GLIBCXX_USE_WCHAR_T\n "}, {"sha": "fe1d3df96424cd93dbc39927b1ee7993da93eaed", "filename": "libstdc++-v3/config/locale/generic/messages_members.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmessages_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmessages_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmessages_members.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -44,13 +44,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n      { _M_c_locale_messages = _S_get_c_locale(); }\n \n   template<typename _CharT>\n-     messages<_CharT>::messages(__c_locale, const char*, size_t __refs) \n+     messages<_CharT>::messages(__c_locale, const char*, size_t __refs)\n      : facet(__refs)\n      { _M_c_locale_messages = _S_get_c_locale(); }\n \n   template<typename _CharT>\n-    typename messages<_CharT>::catalog \n-    messages<_CharT>::open(const basic_string<char>& __s, const locale& __loc, \n+    typename messages<_CharT>::catalog\n+    messages<_CharT>::open(const basic_string<char>& __s, const locale& __loc,\n \t\t\t   const char*) const\n     { return this->do_open(__s, __loc); }\n \n@@ -60,31 +60,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { _S_destroy_c_locale(_M_c_locale_messages); }\n \n   template<typename _CharT>\n-    typename messages<_CharT>::catalog \n+    typename messages<_CharT>::catalog\n     messages<_CharT>::do_open(const basic_string<char>&, const locale&) const\n     { return 0; }\n \n   template<typename _CharT>\n-    typename messages<_CharT>::string_type  \n-    messages<_CharT>::do_get(catalog, int, int, \n+    typename messages<_CharT>::string_type\n+    messages<_CharT>::do_get(catalog, int, int,\n \t\t\t     const string_type& __dfault) const\n     { return __dfault; }\n \n   template<typename _CharT>\n-    void    \n-    messages<_CharT>::do_close(catalog) const \n+    void\n+    messages<_CharT>::do_close(catalog) const\n     { }\n \n    // messages_byname\n    template<typename _CharT>\n      messages_byname<_CharT>::messages_byname(const char* __s, size_t __refs)\n-     : messages<_CharT>(__refs) \n-     { \n+     : messages<_CharT>(__refs)\n+     {\n \tif (__builtin_strcmp(__s, \"C\") != 0\n \t    && __builtin_strcmp(__s, \"POSIX\") != 0)\n \t  {\n \t    this->_S_destroy_c_locale(this->_M_c_locale_messages);\n-\t    this->_S_create_c_locale(this->_M_c_locale_messages, __s); \n+\t    this->_S_create_c_locale(this->_M_c_locale_messages, __s);\n \t  }\n      }\n "}, {"sha": "f45f7c2846a536a42ce5eab3226d7c12053ec95f", "filename": "libstdc++-v3/config/locale/generic/numeric_members.cc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fnumeric_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fnumeric_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fnumeric_members.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -34,7 +34,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  template<> \n+  template<>\n     void\n     numpunct<char>::_M_initialize_numpunct(__c_locale)\n     {\n@@ -48,10 +48,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       _M_data->_M_decimal_point = '.';\n       _M_data->_M_thousands_sep = ',';\n-      \n+\n       for (size_t __i = 0; __i < __num_base::_S_oend; ++__i)\n \t_M_data->_M_atoms_out[__i] = __num_base::_S_atoms_out[__i];\n-      \n+\n       for (size_t __i = 0; __i < __num_base::_S_iend; ++__i)\n \t_M_data->_M_atoms_in[__i] = __num_base::_S_atoms_in[__i];\n \n@@ -61,12 +61,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_data->_M_falsename_size = 5;\n     }\n \n-  template<> \n+  template<>\n     numpunct<char>::~numpunct()\n     { delete _M_data; }\n-      \n+\n #ifdef _GLIBCXX_USE_WCHAR_T\n-  template<> \n+  template<>\n     void\n     numpunct<wchar_t>::_M_initialize_numpunct(__c_locale)\n     {\n@@ -77,15 +77,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_data->_M_grouping = \"\";\n       _M_data->_M_grouping_size = 0;\n       _M_data->_M_use_grouping = false;\n-      \n+\n       _M_data->_M_decimal_point = L'.';\n       _M_data->_M_thousands_sep = L',';\n-      \n+\n       // Use ctype::widen code without the facet...\n       for (size_t __i = 0; __i < __num_base::_S_oend; ++__i)\n \t_M_data->_M_atoms_out[__i] =\n \t  static_cast<wchar_t>(__num_base::_S_atoms_out[__i]);\n-      \n+\n       for (size_t __i = 0; __i < __num_base::_S_iend; ++__i)\n \t_M_data->_M_atoms_in[__i] =\n \t  static_cast<wchar_t>(__num_base::_S_atoms_in[__i]);\n@@ -96,7 +96,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_data->_M_falsename_size = 5;\n     }\n \n-  template<> \n+  template<>\n     numpunct<wchar_t>::~numpunct()\n     { delete _M_data; }\n #endif"}, {"sha": "1d626df5f0fc46114fb2ad3ad3d4e90f8953c7ba", "filename": "libstdc++-v3/config/locale/generic/time_members.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -39,24 +39,24 @@ namespace std _GLIBCXX_VISIBILITY(default)\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _CharT>\n-    __timepunct<_CharT>::__timepunct(size_t __refs) \n+    __timepunct<_CharT>::__timepunct(size_t __refs)\n     : facet(__refs), _M_data(0)\n-    { \n+    {\n       _M_name_timepunct = _S_get_c_name();\n-      _M_initialize_timepunct(); \n+      _M_initialize_timepunct();\n     }\n \n   template<typename _CharT>\n-    __timepunct<_CharT>::__timepunct(__cache_type* __cache, size_t __refs) \n+    __timepunct<_CharT>::__timepunct(__cache_type* __cache, size_t __refs)\n     : facet(__refs), _M_data(__cache)\n-    { \n+    {\n       _M_name_timepunct = _S_get_c_name();\n-      _M_initialize_timepunct(); \n+      _M_initialize_timepunct();\n     }\n \n   template<typename _CharT>\n-    __timepunct<_CharT>::__timepunct(__c_locale __cloc, const char* __s, \n-\t\t\t\t     size_t __refs) \n+    __timepunct<_CharT>::__timepunct(__c_locale __cloc, const char* __s,\n+\t\t\t\t     size_t __refs)\n     : facet(__refs), _M_data(0)\n     {\n       if (__builtin_strcmp(__s, _S_get_c_name()) != 0)\n@@ -81,11 +81,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _CharT>\n     __timepunct<_CharT>::~__timepunct()\n-    { \n+    {\n       if (_M_name_timepunct != _S_get_c_name())\n \tdelete [] _M_name_timepunct;\n       delete _M_data;\n-      _S_destroy_c_locale(_M_c_locale_timepunct); \n+      _S_destroy_c_locale(_M_c_locale_timepunct);\n     }\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "8a9b938483d204060058e369d8eb05f2b1ebdbbd", "filename": "libstdc++-v3/config/locale/gnu/c++locale_internal.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc%2B%2Blocale_internal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc%2B%2Blocale_internal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc%2B%2Blocale_internal.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -63,7 +63,7 @@ extern \"C\" __typeof(wcscoll_l) __wcscoll_l;\n extern \"C\" __typeof(wcsftime_l) __wcsftime_l;\n extern \"C\" __typeof(wcsxfrm_l) __wcsxfrm_l;\n extern \"C\" __typeof(wctype_l) __wctype_l;\n-#endif \n+#endif\n \n #endif // GLIBC 2.3 and later\n "}, {"sha": "58e4f84ca1816bf66db4c3e008890b4e31f36dcf", "filename": "libstdc++-v3/config/locale/gnu/c_locale.cc", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -43,7 +43,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<>\n     void\n-    __convert_to_v(const char* __s, float& __v, ios_base::iostate& __err, \n+    __convert_to_v(const char* __s, float& __v, ios_base::iostate& __err,\n \t\t   const __c_locale& __cloc) throw()\n     {\n       char* __sanity;\n@@ -70,7 +70,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<>\n     void\n-    __convert_to_v(const char* __s, double& __v, ios_base::iostate& __err, \n+    __convert_to_v(const char* __s, double& __v, ios_base::iostate& __err,\n \t\t   const __c_locale& __cloc) throw()\n     {\n       char* __sanity;\n@@ -129,7 +129,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   void\n-  locale::facet::_S_create_c_locale(__c_locale& __cloc, const char* __s, \n+  locale::facet::_S_create_c_locale(__c_locale& __cloc, const char* __s,\n \t\t\t\t    __c_locale __old)\n   {\n     __cloc = __newlocale(1 << LC_ALL, __s, __old);\n@@ -145,7 +145,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   locale::facet::_S_destroy_c_locale(__c_locale& __cloc)\n   {\n     if (__cloc && _S_get_c_locale() != __cloc)\n-      __freelocale(__cloc); \n+      __freelocale(__cloc);\n   }\n \n   __c_locale\n@@ -261,18 +261,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   const char* const category_names[6 + _GLIBCXX_NUM_CATEGORIES] =\n     {\n-      \"LC_CTYPE\", \n+      \"LC_CTYPE\",\n       \"LC_NUMERIC\",\n-      \"LC_TIME\", \n-      \"LC_COLLATE\", \n+      \"LC_TIME\",\n+      \"LC_COLLATE\",\n       \"LC_MONETARY\",\n-      \"LC_MESSAGES\", \n-      \"LC_PAPER\", \n-      \"LC_NAME\", \n+      \"LC_MESSAGES\",\n+      \"LC_PAPER\",\n+      \"LC_NAME\",\n       \"LC_ADDRESS\",\n-      \"LC_TELEPHONE\", \n-      \"LC_MEASUREMENT\", \n-      \"LC_IDENTIFICATION\" \n+      \"LC_TELEPHONE\",\n+      \"LC_MEASUREMENT\",\n+      \"LC_IDENTIFICATION\"\n     };\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "dc1c5d6ba4db73d2a449a40648ba4fb499d4d1aa", "filename": "libstdc++-v3/config/locale/gnu/codecvt_members.cc", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcodecvt_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcodecvt_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcodecvt_members.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -41,7 +41,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #ifdef _GLIBCXX_USE_WCHAR_T\n   codecvt_base::result\n   codecvt<wchar_t, char, mbstate_t>::\n-  do_out(state_type& __state, const intern_type* __from, \n+  do_out(state_type& __state, const intern_type* __from,\n \t const intern_type* __from_end, const intern_type*& __from_next,\n \t extern_type* __to, extern_type* __to_end,\n \t extern_type*& __to_next) const\n@@ -111,12 +111,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __uselocale(__old);\n #endif\n \n-    return __ret; \n+    return __ret;\n   }\n-  \n+\n   codecvt_base::result\n   codecvt<wchar_t, char, mbstate_t>::\n-  do_in(state_type& __state, const extern_type* __from, \n+  do_in(state_type& __state, const extern_type* __from,\n \tconst extern_type* __from_end, const extern_type*& __from_next,\n \tintern_type* __to, intern_type* __to_end,\n \tintern_type*& __to_next) const\n@@ -160,12 +160,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t  break;\n \t      }\n \t    __from_next = __from;\n-\t    __state = __tmp_state;\t    \n+\t    __state = __tmp_state;\n \t    __ret = error;\n \t  }\n \telse if (__from_next && __from_next < __from_chunk_end)\n \t  {\n-\t    // It is unclear what to return in this case (see DR 382). \n+\t    // It is unclear what to return in this case (see DR 382).\n \t    __to_next += __conv;\n \t    __ret = partial;\n \t  }\n@@ -180,7 +180,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    if (__to_next < __to_end)\n \t      {\n \t\t// XXX Probably wrong for stateful encodings\n-\t\t__tmp_state = __state;\t\t\n+\t\t__tmp_state = __state;\n \t\t++__from_next;\n \t\t*__to_next++ = L'\\0';\n \t      }\n@@ -193,10 +193,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __uselocale(__old);\n #endif\n \n-    return __ret; \n+    return __ret;\n   }\n \n-  int \n+  int\n   codecvt<wchar_t, char, mbstate_t>::\n   do_encoding() const throw()\n   {\n@@ -212,9 +212,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __uselocale(__old);\n #endif\n     return __ret;\n-  }  \n+  }\n \n-  int \n+  int\n   codecvt<wchar_t, char, mbstate_t>::\n   do_max_length() const throw()\n   {\n@@ -228,8 +228,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n     return __ret;\n   }\n-  \n-  int \n+\n+  int\n   codecvt<wchar_t, char, mbstate_t>::\n   do_length(state_type& __state, const extern_type* __from,\n \t    const extern_type* __end, size_t __max) const\n@@ -244,10 +244,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     // mbsnrtowcs is *very* fast but stops if encounters NUL characters:\n     // in case we advance past it and then continue, in a loop.\n     // NB: mbsnrtowcs is a GNU extension\n-  \n+\n     // A dummy internal buffer is needed in order for mbsnrtocws to consider\n     // its fourth parameter (it wouldn't with NULL as first parameter).\n-    wchar_t* __to = static_cast<wchar_t*>(__builtin_alloca(sizeof(wchar_t) \n+    wchar_t* __to = static_cast<wchar_t*>(__builtin_alloca(sizeof(wchar_t)\n \t\t\t\t\t\t\t   * __max));\n     while (__from < __end && __max)\n       {\n@@ -281,7 +281,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  }\n \tif (!__from)\n \t  __from = __from_chunk_end;\n-\t\n+\n \t__ret += __from - __tmp_from;\n \t__max -= __conv;\n \n@@ -299,7 +299,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __uselocale(__old);\n #endif\n \n-    return __ret; \n+    return __ret;\n   }\n #endif\n "}, {"sha": "ad9ece4ff827a898030d81eb376ddb232b5af321", "filename": "libstdc++-v3/config/locale/gnu/collate_members.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcollate_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcollate_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcollate_members.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -38,30 +38,30 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // These are basically extensions to char_traits, and perhaps should\n   // be put there instead of here.\n   template<>\n-    int \n-    collate<char>::_M_compare(const char* __one, \n+    int\n+    collate<char>::_M_compare(const char* __one,\n \t\t\t      const char* __two) const throw()\n-    { \n+    {\n       int __cmp = __strcoll_l(__one, __two, _M_c_locale_collate);\n       return (__cmp >> (8 * sizeof (int) - 2)) | (__cmp != 0);\n     }\n-  \n+\n   template<>\n     size_t\n-    collate<char>::_M_transform(char* __to, const char* __from, \n+    collate<char>::_M_transform(char* __to, const char* __from,\n \t\t\t\tsize_t __n) const throw()\n     { return __strxfrm_l(__to, __from, __n, _M_c_locale_collate); }\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n   template<>\n-    int \n-    collate<wchar_t>::_M_compare(const wchar_t* __one, \n+    int\n+    collate<wchar_t>::_M_compare(const wchar_t* __one,\n \t\t\t\t const wchar_t* __two) const throw()\n     {\n       int __cmp = __wcscoll_l(__one, __two, _M_c_locale_collate);\n       return (__cmp >> (8 * sizeof (int) - 2)) | (__cmp != 0);\n     }\n-  \n+\n   template<>\n     size_t\n     collate<wchar_t>::_M_transform(wchar_t* __to, const wchar_t* __from,"}, {"sha": "1aafc12449ad1e0e3e0bc3f10cc4b266b6015a1d", "filename": "libstdc++-v3/config/locale/gnu/ctype_members.cc", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -39,12 +39,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // NB: The other ctype<char> specializations are in src/locale.cc and\n   // various /config/os/* files.\n   ctype_byname<char>::ctype_byname(const char* __s, size_t __refs)\n-  : ctype<char>(0, false, __refs) \n-  { \t\t\n+  : ctype<char>(0, false, __refs)\n+  {\n     if (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n       {\n \tthis->_S_destroy_c_locale(this->_M_c_locale_ctype);\n-\tthis->_S_create_c_locale(this->_M_c_locale_ctype, __s); \n+\tthis->_S_create_c_locale(this->_M_c_locale_ctype, __s);\n \tthis->_M_toupper = this->_M_c_locale_ctype->__ctype_toupper;\n \tthis->_M_tolower = this->_M_c_locale_ctype->__ctype_tolower;\n \tthis->_M_table = this->_M_c_locale_ctype->__ctype_b;\n@@ -54,7 +54,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   ctype_byname<char>::~ctype_byname()\n   { }\n \n-#ifdef _GLIBCXX_USE_WCHAR_T  \n+#ifdef _GLIBCXX_USE_WCHAR_T\n   ctype<wchar_t>::__wmask_type\n   ctype<wchar_t>::_M_convert_to_wmask(const mask __m) const throw()\n   {\n@@ -102,7 +102,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n     return __ret;\n   }\n-  \n+\n   wchar_t\n   ctype<wchar_t>::do_toupper(wchar_t __c) const\n   { return __towupper_l(__c, _M_c_locale_ctype); }\n@@ -117,11 +117,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n     return __hi;\n   }\n-  \n+\n   wchar_t\n   ctype<wchar_t>::do_tolower(wchar_t __c) const\n   { return __towlower_l(__c, _M_c_locale_ctype); }\n-  \n+\n   const wchar_t*\n   ctype<wchar_t>::do_tolower(wchar_t* __lo, const wchar_t* __hi) const\n   {\n@@ -136,7 +136,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   bool\n   ctype<wchar_t>::\n   do_is(mask __m, wchar_t __c) const\n-  { \n+  {\n     // The case of __m == ctype_base::space is particularly important,\n     // due to its use in many istream functions.  Therefore we deal with\n     // it first, exploiting the knowledge that on GNU systems _M_bit[5]\n@@ -161,17 +161,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\tbreak;\n \t    }\n       }\n-    return __ret;    \n+    return __ret;\n   }\n \n-  const wchar_t* \n+  const wchar_t*\n   ctype<wchar_t>::\n   do_is(const wchar_t* __lo, const wchar_t* __hi, mask* __vec) const\n   {\n     for (; __lo < __hi; ++__vec, ++__lo)\n       {\n \t// Highest bitmask in ctype_base == 11\n-\tconst size_t __bitmasksize = 11; \n+\tconst size_t __bitmasksize = 11;\n \tmask __m = 0;\n \tfor (size_t __bitcur = 0; __bitcur <= __bitmasksize; ++__bitcur)\n \t  if (__iswctype_l(*__lo, _M_wmask[__bitcur], _M_c_locale_ctype))\n@@ -180,8 +180,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n     return __hi;\n   }\n-  \n-  const wchar_t* \n+\n+  const wchar_t*\n   ctype<wchar_t>::\n   do_scan_is(mask __m, const wchar_t* __lo, const wchar_t* __hi) const\n   {\n@@ -204,7 +204,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   do_widen(char __c) const\n   { return _M_widen[static_cast<unsigned char>(__c)]; }\n \n-  const char* \n+  const char*\n   ctype<wchar_t>::\n   do_widen(const char* __lo, const char* __hi, wchar_t* __dest) const\n   {\n@@ -230,12 +230,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n     __uselocale(__old);\n #endif\n-    return (__c == EOF ? __dfault : static_cast<char>(__c)); \n+    return (__c == EOF ? __dfault : static_cast<char>(__c));\n   }\n \n   const wchar_t*\n   ctype<wchar_t>::\n-  do_narrow(const wchar_t* __lo, const wchar_t* __hi, char __dfault, \n+  do_narrow(const wchar_t* __lo, const wchar_t* __hi, char __dfault,\n \t    char* __dest) const\n   {\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n@@ -292,7 +292,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_widen[__j] = btowc(__j);\n \n     for (size_t __k = 0; __k <= 11; ++__k)\n-      { \n+      {\n \t_M_bit[__k] = static_cast<mask>(_ISbit(__k));\n \t_M_wmask[__k] = _M_convert_to_wmask(_M_bit[__k]);\n       }"}, {"sha": "95cb112d9f1d480d35470ba61ac556952b162a16", "filename": "libstdc++-v3/config/locale/gnu/monetary_members.cc", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -42,17 +42,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Construct and return valid pattern consisting of some combination of:\n   // space none symbol sign value\n   money_base::pattern\n-  money_base::_S_construct_pattern(char __precedes, char __space, \n+  money_base::_S_construct_pattern(char __precedes, char __space,\n \t\t\t\t   char __posn) throw()\n-  { \n+  {\n     pattern __ret;\n \n     // This insanely complicated routine attempts to construct a valid\n     // pattern for use with monyepunct. A couple of invariants:\n \n     // if (__precedes) symbol -> value\n     // else value -> symbol\n-    \n+\n     // if (__space) space\n     // else none\n \n@@ -137,15 +137,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tif (__precedes)\n \t  {\n \t    __ret.field[0] = sign;\n-\t    __ret.field[1] = symbol;\t    \n+\t    __ret.field[1] = symbol;\n \t    if (__space)\n \t      {\n \t\t__ret.field[2] = space;\n \t\t__ret.field[3] = value;\n \t      }\n \t    else\n \t      {\n-\t\t__ret.field[2] = value;\t\t\n+\t\t__ret.field[2] = value;\n \t\t__ret.field[3] = none;\n \t      }\n \t  }\n@@ -207,9 +207,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   }\n #endif\n \n-  template<> \n+  template<>\n     void\n-    moneypunct<char, true>::_M_initialize_moneypunct(__c_locale __cloc, \n+    moneypunct<char, true>::_M_initialize_moneypunct(__c_locale __cloc,\n \t\t\t\t\t\t     const char*)\n     {\n       if (!_M_data)\n@@ -239,9 +239,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       else\n \t{\n \t  // Named locale.\n-\t  _M_data->_M_decimal_point = *(__nl_langinfo_l(__MON_DECIMAL_POINT, \n+\t  _M_data->_M_decimal_point = *(__nl_langinfo_l(__MON_DECIMAL_POINT,\n \t\t\t\t\t\t\t__cloc));\n-\t  _M_data->_M_thousands_sep = *(__nl_langinfo_l(__MON_THOUSANDS_SEP, \n+\t  _M_data->_M_thousands_sep = *(__nl_langinfo_l(__MON_THOUSANDS_SEP,\n \t\t\t\t\t\t\t__cloc));\n \n \t  // Check for NULL, which implies no fractional digits.\n@@ -252,7 +252,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      _M_data->_M_decimal_point = '.';\n \t    }\n \t  else\n-\t    _M_data->_M_frac_digits = *(__nl_langinfo_l(__INT_FRAC_DIGITS, \n+\t    _M_data->_M_frac_digits = *(__nl_langinfo_l(__INT_FRAC_DIGITS,\n \t\t\t\t\t\t\t__cloc));\n \n \t  const char* __cgroup = __nl_langinfo_l(__MON_GROUPING, __cloc);\n@@ -264,11 +264,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  char* __group = 0;\n \t  char* __ps = 0;\n \t  char* __ns = 0;\n-\t  const char __nposn = *(__nl_langinfo_l(__INT_N_SIGN_POSN, __cloc));\t  \n+\t  const char __nposn = *(__nl_langinfo_l(__INT_N_SIGN_POSN, __cloc));\n \t  __try\n \t    {\n \t      size_t __len;\n-\t      \n+\n \t      // Check for NULL, which implies no grouping.\n \t      if (_M_data->_M_thousands_sep == '\\0')\n \t\t{\n@@ -358,9 +358,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n     }\n \n-  template<> \n+  template<>\n     void\n-    moneypunct<char, false>::_M_initialize_moneypunct(__c_locale __cloc, \n+    moneypunct<char, false>::_M_initialize_moneypunct(__c_locale __cloc,\n \t\t\t\t\t\t      const char*)\n     {\n       if (!_M_data)\n@@ -390,9 +390,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       else\n \t{\n \t  // Named locale.\n-\t  _M_data->_M_decimal_point = *(__nl_langinfo_l(__MON_DECIMAL_POINT, \n+\t  _M_data->_M_decimal_point = *(__nl_langinfo_l(__MON_DECIMAL_POINT,\n \t\t\t\t\t\t\t__cloc));\n-\t  _M_data->_M_thousands_sep = *(__nl_langinfo_l(__MON_THOUSANDS_SEP, \n+\t  _M_data->_M_thousands_sep = *(__nl_langinfo_l(__MON_THOUSANDS_SEP,\n \t\t\t\t\t\t\t__cloc));\n \n \t  // Check for NULL, which implies no fractional digits.\n@@ -509,7 +509,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n     }\n \n-  template<> \n+  template<>\n     moneypunct<char, true>::~moneypunct()\n     {\n       if (_M_data->_M_grouping_size)\n@@ -524,7 +524,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       delete _M_data;\n     }\n \n-  template<> \n+  template<>\n     moneypunct<char, false>::~moneypunct()\n     {\n       if (_M_data->_M_grouping_size)\n@@ -540,9 +540,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n-  template<> \n+  template<>\n     void\n-    moneypunct<wchar_t, true>::_M_initialize_moneypunct(__c_locale __cloc, \n+    moneypunct<wchar_t, true>::_M_initialize_moneypunct(__c_locale __cloc,\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n \t\t\t\t\t\t\tconst char*)\n #else\n@@ -604,7 +604,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      _M_data->_M_decimal_point = L'.';\n \t    }\n \t  else\n-\t    _M_data->_M_frac_digits = *(__nl_langinfo_l(__INT_FRAC_DIGITS, \n+\t    _M_data->_M_frac_digits = *(__nl_langinfo_l(__INT_FRAC_DIGITS,\n \t\t\t\t\t\t\t__cloc));\n \n \t  const char* __cgroup = __nl_langinfo_l(__MON_GROUPING, __cloc);\n@@ -657,9 +657,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t}\n \t      else\n \t\t_M_data->_M_positive_sign = L\"\";\n-\t      _M_data->_M_positive_sign_size = \n+\t      _M_data->_M_positive_sign_size =\n \t\twcslen(_M_data->_M_positive_sign);\n-\t      \n+\n \t      __len = strlen(__cnegsign);\n \t      if (!__nposn)\n \t\t_M_data->_M_negative_sign = L\"()\";\n@@ -672,9 +672,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t}\n \t      else\n \t\t_M_data->_M_negative_sign = L\"\";\n-\t      _M_data->_M_negative_sign_size = \n+\t      _M_data->_M_negative_sign_size =\n \t\twcslen(_M_data->_M_negative_sign);\n-\t      \n+\n \t      // _Intl == true.\n \t      __len = strlen(__ccurr);\n \t      if (__len)\n@@ -694,16 +694,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      _M_data = 0;\n \t      delete [] __group;\n \t      delete [] __wcs_ps;\n-\t      delete [] __wcs_ns;\t      \n+\t      delete [] __wcs_ns;\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n \t      __uselocale(__old);\n #else\n \t      setlocale(LC_ALL, __sav);\n \t      delete [] __sav;\n #endif\n \t      __throw_exception_again;\n-\t    } \n-\t  \n+\t    }\n+\n \t  char __pprecedes = *(__nl_langinfo_l(__INT_P_CS_PRECEDES, __cloc));\n \t  char __pspace = *(__nl_langinfo_l(__INT_P_SEP_BY_SPACE, __cloc));\n \t  char __pposn = *(__nl_langinfo_l(__INT_P_SIGN_POSN, __cloc));\n@@ -723,7 +723,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n     }\n \n-  template<> \n+  template<>\n   void\n   moneypunct<wchar_t, false>::_M_initialize_moneypunct(__c_locale __cloc,\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n@@ -840,7 +840,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t}\n \t      else\n \t\t_M_data->_M_positive_sign = L\"\";\n-              _M_data->_M_positive_sign_size = \n+              _M_data->_M_positive_sign_size =\n \t\twcslen(_M_data->_M_positive_sign);\n \n \t      __len = strlen(__cnegsign);\n@@ -855,7 +855,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t}\n \t      else\n \t\t_M_data->_M_negative_sign = L\"\";\n-              _M_data->_M_negative_sign_size = \n+              _M_data->_M_negative_sign_size =\n \t\twcslen(_M_data->_M_negative_sign);\n \n \t      // _Intl == true.\n@@ -877,7 +877,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n               _M_data = 0;\n \t      delete [] __group;\n \t      delete [] __wcs_ps;\n-\t      delete [] __wcs_ns;\t      \n+\t      delete [] __wcs_ns;\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n \t      __uselocale(__old);\n #else\n@@ -906,7 +906,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n     }\n \n-  template<> \n+  template<>\n     moneypunct<wchar_t, true>::~moneypunct()\n     {\n       if (_M_data->_M_grouping_size)\n@@ -921,7 +921,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       delete _M_data;\n     }\n \n-  template<> \n+  template<>\n     moneypunct<wchar_t, false>::~moneypunct()\n     {\n       if (_M_data->_M_grouping_size)"}, {"sha": "6fbf0896a012ea2f060c3a179d02f2a437d88e42", "filename": "libstdc++-v3/config/locale/gnu/numeric_members.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -35,7 +35,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  template<> \n+  template<>\n     void\n     numpunct<char>::_M_initialize_numpunct(__c_locale __cloc)\n     {\n@@ -61,9 +61,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       else\n \t{\n \t  // Named locale.\n-\t  _M_data->_M_decimal_point = *(__nl_langinfo_l(DECIMAL_POINT, \n+\t  _M_data->_M_decimal_point = *(__nl_langinfo_l(DECIMAL_POINT,\n \t\t\t\t\t\t\t__cloc));\n-\t  _M_data->_M_thousands_sep = *(__nl_langinfo_l(THOUSANDS_SEP, \n+\t  _M_data->_M_thousands_sep = *(__nl_langinfo_l(THOUSANDS_SEP,\n \t\t\t\t\t\t\t__cloc));\n \n \t  // Check for NULL, which implies no grouping.\n@@ -111,17 +111,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_data->_M_falsename = \"false\";\n       _M_data->_M_falsename_size = 5;\n     }\n- \n-  template<> \n+\n+  template<>\n     numpunct<char>::~numpunct()\n     {\n       if (_M_data->_M_grouping_size)\n \tdelete [] _M_data->_M_grouping;\n       delete _M_data;\n     }\n-   \n+\n #ifdef _GLIBCXX_USE_WCHAR_T\n-  template<> \n+  template<>\n     void\n     numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc)\n     {\n@@ -204,7 +204,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_data->_M_falsename_size = 5;\n     }\n \n-  template<> \n+  template<>\n     numpunct<wchar_t>::~numpunct()\n     {\n       if (_M_data->_M_grouping_size)"}, {"sha": "2e7f7324e4ec363f3e26fc61b850da0e1b7aa80a", "filename": "libstdc++-v3/config/locale/gnu/time_members.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -39,15 +39,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<>\n     void\n     __timepunct<char>::\n-    _M_put(char* __s, size_t __maxlen, const char* __format, \n+    _M_put(char* __s, size_t __maxlen, const char* __format,\n \t   const tm* __tm) const throw()\n     {\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n       const size_t __len = __strftime_l(__s, __maxlen, __format, __tm,\n \t\t\t\t\t_M_c_locale_timepunct);\n #else\n       char* __old = setlocale(LC_ALL, 0);\n-      const size_t __llen = strlen(__old) + 1;  \n+      const size_t __llen = strlen(__old) + 1;\n       char* __sav = new char[__llen];\n       memcpy(__sav, __old, __llen);\n       setlocale(LC_ALL, _M_name_timepunct);\n@@ -60,7 +60,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__s[0] = '\\0';\n     }\n \n-  template<> \n+  template<>\n     void\n     __timepunct<char>::_M_initialize_timepunct(__c_locale __cloc)\n     {\n@@ -130,7 +130,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n       else\n \t{\n-\t  _M_c_locale_timepunct = _S_clone_c_locale(__cloc); \n+\t  _M_c_locale_timepunct = _S_clone_c_locale(__cloc);\n \n \t  _M_data->_M_date_format = __nl_langinfo_l(D_FMT, __cloc);\n \t  _M_data->_M_date_era_format = __nl_langinfo_l(ERA_D_FMT, __cloc);\n@@ -195,7 +195,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<>\n     void\n     __timepunct<wchar_t>::\n-    _M_put(wchar_t* __s, size_t __maxlen, const wchar_t* __format, \n+    _M_put(wchar_t* __s, size_t __maxlen, const wchar_t* __format,\n \t   const tm* __tm) const throw()\n     {\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n@@ -216,7 +216,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__s[0] = L'\\0';\n     }\n \n-  template<> \n+  template<>\n     void\n     __timepunct<wchar_t>::_M_initialize_timepunct(__c_locale __cloc)\n     {\n@@ -286,7 +286,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n       else\n \t{\n-\t  _M_c_locale_timepunct = _S_clone_c_locale(__cloc); \n+\t  _M_c_locale_timepunct = _S_clone_c_locale(__cloc);\n \n \t  union { char *__s; wchar_t *__w; } __u;\n "}, {"sha": "51d260e36d222a67fb353e4addb5521f952120d4", "filename": "libstdc++-v3/config/locale/gnu/time_members.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -39,21 +39,21 @@ namespace std _GLIBCXX_VISIBILITY(default)\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _CharT>\n-    __timepunct<_CharT>::__timepunct(size_t __refs) \n-    : facet(__refs), _M_data(0), _M_c_locale_timepunct(0), \n+    __timepunct<_CharT>::__timepunct(size_t __refs)\n+    : facet(__refs), _M_data(0), _M_c_locale_timepunct(0),\n       _M_name_timepunct(_S_get_c_name())\n     { _M_initialize_timepunct(); }\n \n   template<typename _CharT>\n-    __timepunct<_CharT>::__timepunct(__cache_type* __cache, size_t __refs) \n-    : facet(__refs), _M_data(__cache), _M_c_locale_timepunct(0), \n+    __timepunct<_CharT>::__timepunct(__cache_type* __cache, size_t __refs)\n+    : facet(__refs), _M_data(__cache), _M_c_locale_timepunct(0),\n       _M_name_timepunct(_S_get_c_name())\n     { _M_initialize_timepunct(); }\n \n   template<typename _CharT>\n     __timepunct<_CharT>::__timepunct(__c_locale __cloc, const char* __s,\n-\t\t\t\t     size_t __refs) \n-    : facet(__refs), _M_data(0), _M_c_locale_timepunct(0), \n+\t\t\t\t     size_t __refs)\n+    : facet(__refs), _M_data(0), _M_c_locale_timepunct(0),\n       _M_name_timepunct(0)\n     {\n       if (__builtin_strcmp(__s, _S_get_c_name()) != 0)\n@@ -78,11 +78,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _CharT>\n     __timepunct<_CharT>::~__timepunct()\n-    { \n+    {\n       if (_M_name_timepunct != _S_get_c_name())\n \tdelete [] _M_name_timepunct;\n-      delete _M_data; \n-      _S_destroy_c_locale(_M_c_locale_timepunct); \n+      delete _M_data;\n+      _S_destroy_c_locale(_M_c_locale_timepunct);\n     }\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "7c6ecfaba37011372991056339e366e2df6431d9", "filename": "libstdc++-v3/config/locale/ieee_1003.1-2001/c_locale.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fc_locale.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -30,7 +30,7 @@\n \n #include <locale>\n \n-namespace std _GLIBCXX_VISIBILITY(default) \n+namespace std _GLIBCXX_VISIBILITY(default)\n {\n   void\n   locale::facet::_S_create_c_locale(__c_locale&, const char*, __c_locale*)\n@@ -44,7 +44,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n   locale::facet::_S_clone_c_locale(__c_locale&) throw()\n   { return __c_locale(); }\n \n-  template<> \n+  template<>\n     void\n     numpunct<char>::_M_initialize_numpunct(__c_locale)\n     {\n@@ -55,9 +55,9 @@ namespace std _GLIBCXX_VISIBILITY(default)\n       _M_truename = \"true\";\n       _M_falsename = \"false\";\n     }\n-      \n+\n #ifdef _GLIBCXX_USE_WCHAR_T\n-  template<> \n+  template<>\n     void\n     numpunct<wchar_t>::_M_initialize_numpunct(__c_locale)\n     {\n@@ -70,7 +70,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n     }\n #endif\n \n-  template<> \n+  template<>\n     void\n     moneypunct<char>::_M_initialize_moneypunct(__c_locale)\n     {\n@@ -87,7 +87,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n     }\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n-  template<> \n+  template<>\n     void\n     moneypunct<wchar_t>::_M_initialize_moneypunct(__c_locale)\n     {"}, {"sha": "412a82c6ee1d547d2b611a6f48b941a7527b5172", "filename": "libstdc++-v3/config/locale/ieee_1003.1-2001/messages_members.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fmessages_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fmessages_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fmessages_members.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -35,11 +35,11 @@ namespace std _GLIBCXX_VISIBILITY(default)\n   // Specializations\n   template<>\n     string\n-    messages<char>::do_get(catalog __c, int __setid, int __msgid, \n+    messages<char>::do_get(catalog __c, int __setid, int __msgid,\n \t\t\t   const string& __dfault) const\n     {\n       nl_catd __nlc = reinterpret_cast<nl_catd>(__c);\n-      return string(catgets(__nlc, __setid, __msgid, __dfault.c_str())); \n+      return string(catgets(__nlc, __setid, __msgid, __dfault.c_str()));\n     }\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n@@ -48,7 +48,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n     messages<wchar_t>::do_get(catalog, int, int, const wstring& __dfault) const\n     {\n       nl_catd __nlc = reinterpret_cast<nl_catd>(__c);\n-      char* __msg = catgets(__nlc, __setid, __msgid, \n+      char* __msg = catgets(__nlc, __setid, __msgid,\n \t\t\t    _M_convert_to_char(__dfault));\n       return _M_convert_from_char(__msg);\n     }"}, {"sha": "18184a2f7073e0bdb48fbc44f6b35678cecf47b6", "filename": "libstdc++-v3/config/locale/ieee_1003.1-2001/messages_members.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fmessages_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fmessages_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fmessages_members.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -39,8 +39,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Non-virtual member functions.\n   template<typename _CharT>\n-    typename messages<_CharT>::catalog \n-    messages<_CharT>::open(const basic_string<char>& __s, const locale& __loc, \n+    typename messages<_CharT>::catalog\n+    messages<_CharT>::open(const basic_string<char>& __s, const locale& __loc,\n \t\t\t   const char*) const\n     { return this->do_open(__s, __loc); }\n \n@@ -50,25 +50,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { }\n \n   template<typename _CharT>\n-    typename messages<_CharT>::catalog \n-    messages<_CharT>::do_open(const basic_string<char>& __s, \n+    typename messages<_CharT>::catalog\n+    messages<_CharT>::do_open(const basic_string<char>& __s,\n \t\t\t      const locale&) const\n     { return reinterpret_cast<catalog>(catopen(__s.c_str(), NL_CAT_LOCALE)); }\n \n   template<typename _CharT>\n-    typename messages<_CharT>::string_type  \n-    messages<_CharT>::do_get(catalog __c, int __setid, int __msgid, \n+    typename messages<_CharT>::string_type\n+    messages<_CharT>::do_get(catalog __c, int __setid, int __msgid,\n \t\t\t     const string_type& __dfault) const\n     {\n       nl_catd __nlc = reinterpret_cast<nl_catd>(__c);\n-      char* __msg = catgets(__nlc, __setid, __msgid, \n+      char* __msg = catgets(__nlc, __setid, __msgid,\n \t\t\t    _M_convert_to_char(__dfault));\n       return _M_convert_from_char(__msg);\n     }\n \n   template<typename _CharT>\n-    void    \n-    messages<_CharT>::do_close(catalog __c) const \n+    void\n+    messages<_CharT>::do_close(catalog __c) const\n     { catclose(reinterpret_cast<nl_catd>(__c)); }\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "c7d4e052bfde73e714b0d0338fdebc48cf8cae80", "filename": "libstdc++-v3/config/os/aix/ctype_base.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fctype_base.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -25,9 +25,9 @@\n //\n // ISO C++ 14882: 22.1  Locales\n //\n-  \n+\n // Information as gleaned from /usr/include/ctype.h\n-  \n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION"}, {"sha": "2ecd857c553aa7f40c3d354779b6fe3af2312b35", "filename": "libstdc++-v3/config/os/aix/ctype_inline.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fctype_inline.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -41,7 +41,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   bool\n   ctype<char>::\n   is(mask __m, char __c) const\n-  { \n+  {\n     if(_M_table)\n       return _M_table[static_cast<unsigned char>(__c)] & __m;\n     else"}, {"sha": "85dabcfe96e8e5d74de9fe45afe9f518681cb31e", "filename": "libstdc++-v3/config/os/bsd/darwin/ctype_base.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdarwin%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdarwin%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdarwin%2Fctype_base.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -25,11 +25,11 @@\n //\n // ISO C++ 14882: 22.1  Locales\n //\n-  \n+\n // Information as gleaned from /usr/include/ctype.h on FreeBSD 3.4,\n // 4.0 and all versions of the CVS managed file at:\n // :pserver:anoncvs@anoncvs.freebsd.org:/home/ncvs/src/include/ctype.h\n-  \n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION"}, {"sha": "9f35532ee895731ad8346658630c0c7d34a74c3d", "filename": "libstdc++-v3/config/os/bsd/darwin/ctype_configure_char.cc", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdarwin%2Fctype_configure_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdarwin%2Fctype_configure_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdarwin%2Fctype_configure_char.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -37,28 +37,28 @@ namespace std _GLIBCXX_VISIBILITY(default)\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n // Information as gleaned from /usr/include/ctype.h\n-  \n+\n   const ctype_base::mask*\n   ctype<char>::classic_table() throw()\n   { return 0; }\n \n-  ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n-\t\t     size_t __refs) \n-  : facet(__refs), _M_del(__table != 0 && __del), \n-  _M_toupper(NULL), _M_tolower(NULL), \n-  _M_table(__table ? __table : classic_table()) \n-  { \n+  ctype<char>::ctype(__c_locale, const mask* __table, bool __del,\n+\t\t     size_t __refs)\n+  : facet(__refs), _M_del(__table != 0 && __del),\n+  _M_toupper(NULL), _M_tolower(NULL),\n+  _M_table(__table ? __table : classic_table())\n+  {\n     memset(_M_widen, 0, sizeof(_M_widen));\n     _M_widen_ok = 0;\n     memset(_M_narrow, 0, sizeof(_M_narrow));\n     _M_narrow_ok = 0;\n   }\n \n-  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n-  : facet(__refs), _M_del(__table != 0 && __del), \n-  _M_toupper(NULL), _M_tolower(NULL), \n-  _M_table(__table ? __table : classic_table()) \n-  { \n+  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n+  : facet(__refs), _M_del(__table != 0 && __del),\n+  _M_toupper(NULL), _M_tolower(NULL),\n+  _M_table(__table ? __table : classic_table())\n+  {\n     memset(_M_widen, 0, sizeof(_M_widen));\n     _M_widen_ok = 0;\n     memset(_M_narrow, 0, sizeof(_M_narrow));\n@@ -84,7 +84,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   ctype<char>::do_tolower(char __c) const\n   { return ::tolower((int) __c); }\n \n-  const char* \n+  const char*\n   ctype<char>::do_tolower(char* __low, const char* __high) const\n   {\n     while (__low < __high)"}, {"sha": "8ac8847ab7ceecf5e6c87fae5753c6111d10cef8", "filename": "libstdc++-v3/config/os/bsd/darwin/ctype_inline.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdarwin%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdarwin%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdarwin%2Fctype_inline.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -30,18 +30,18 @@\n //\n // ISO C++ 14882: 22.1  Locales\n //\n-  \n+\n // ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n // functions go in ctype.cc\n-  \n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   bool\n   ctype<char>::\n   is(mask __m, char __c) const\n-  { \n+  {\n     if (_M_table)\n       return _M_table[static_cast<unsigned char>(__c)] & __m;\n     else\n@@ -111,15 +111,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     return __low;\n   }\n \n-#ifdef _GLIBCXX_USE_WCHAR_T  \n+#ifdef _GLIBCXX_USE_WCHAR_T\n   inline bool\n   ctype<wchar_t>::\n   do_is(mask __m, wchar_t __c) const\n   {\n     return __istype (__c, __m);\n   }\n \n-  inline const wchar_t* \n+  inline const wchar_t*\n   ctype<wchar_t>::\n   do_is(const wchar_t* __lo, const wchar_t* __hi, mask* __vec) const\n   {\n@@ -129,8 +129,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t   | blank);\n     return __hi;\n   }\n-  \n-  inline const wchar_t* \n+\n+  inline const wchar_t*\n   ctype<wchar_t>::\n   do_scan_is(mask __m, const wchar_t* __lo, const wchar_t* __hi) const\n   {"}, {"sha": "cdd9a80e09b64ba5532465986b4fe01aa5f6376d", "filename": "libstdc++-v3/config/os/bsd/netbsd/ctype_base.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fctype_base.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -25,12 +25,12 @@\n //\n // ISO C++ 14882: 22.1  Locales\n //\n-  \n+\n // Information as gleaned from /usr/include/ctype.h on NetBSD.\n // Full details can be found from the CVS files at:\n //   anoncvs@anoncvs.netbsd.org:/cvsroot/basesrc/include/ctype.h\n // See www.netbsd.org for details of access.\n-  \n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION"}, {"sha": "bf11c9c67f2458414e6e54cc5e9d52b8f6f7a5b5", "filename": "libstdc++-v3/config/os/bsd/netbsd/ctype_configure_char.cc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fctype_configure_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fctype_configure_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fctype_configure_char.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -44,23 +44,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   ctype<char>::classic_table() throw()\n   { return _C_ctype_ + 1; }\n \n-  ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n-\t\t     size_t __refs) \n-  : facet(__refs), _M_del(__table != 0 && __del), \n-  _M_toupper(NULL), _M_tolower(NULL), \n+  ctype<char>::ctype(__c_locale, const mask* __table, bool __del,\n+\t\t     size_t __refs)\n+  : facet(__refs), _M_del(__table != 0 && __del),\n+  _M_toupper(NULL), _M_tolower(NULL),\n   _M_table(__table ? __table : classic_table())\n-  { \n+  {\n     memset(_M_widen, 0, sizeof(_M_widen));\n     _M_widen_ok = 0;\n     memset(_M_narrow, 0, sizeof(_M_narrow));\n     _M_narrow_ok = 0;\n   }\n \n-  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n-  : facet(__refs), _M_del(__table != 0 && __del), \n-  _M_toupper(NULL), _M_tolower(NULL), \n+  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n+  : facet(__refs), _M_del(__table != 0 && __del),\n+  _M_toupper(NULL), _M_tolower(NULL),\n   _M_table(__table ? __table : classic_table())\n-  { \n+  {\n     memset(_M_widen, 0, sizeof(_M_widen));\n     _M_widen_ok = 0;\n     memset(_M_narrow, 0, sizeof(_M_narrow));\n@@ -86,7 +86,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   ctype<char>::do_tolower(char __c) const\n   { return ::tolower((int) __c); }\n \n-  const char* \n+  const char*\n   ctype<char>::do_tolower(char* __low, const char* __high) const\n   {\n     while (__low < __high)"}, {"sha": "88a1e09fd9911aaf66e58a29dae76141ce14593d", "filename": "libstdc++-v3/config/os/bsd/netbsd/ctype_inline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fctype_inline.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -30,10 +30,10 @@\n //\n // ISO C++ 14882: 22.1  Locales\n //\n-  \n+\n // ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n // functions go in ctype.cc\n-  \n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION"}, {"sha": "451973af6d71f935254b711ee3e185523e7021a2", "filename": "libstdc++-v3/config/os/djgpp/ctype_base.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fctype_base.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -25,7 +25,7 @@\n //\n // ISO C++ 14882: 22.1  Locales\n //\n-  \n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -34,7 +34,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   struct ctype_base\n   {\n     typedef unsigned short \tmask;\n-    \n+\n     // Non-standard typedefs.\n     typedef unsigned char *     __to_type;\n "}, {"sha": "41b266a9b0e443cc5581e97c0e38ff3ff164d69e", "filename": "libstdc++-v3/config/os/djgpp/error_constants.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Ferror_constants.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Ferror_constants.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Ferror_constants.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -93,10 +93,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       no_lock_available = \t\t\tENOLCK,\n \n #ifdef _GLIBCXX_HAVE_ENODATA\n-      no_message_available = \t\t\tENODATA, \n+      no_message_available = \t\t\tENODATA,\n #endif\n \n-//    no_message = \t\t\t\tENOMSG, \n+//    no_message = \t\t\t\tENOMSG,\n //    no_protocol_option = \t\t\tENOPROTOOPT,\n       no_space_on_device = \t\t\tENOSPC,\n "}, {"sha": "9f35532ee895731ad8346658630c0c7d34a74c3d", "filename": "libstdc++-v3/config/os/generic/ctype_configure_char.cc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fctype_configure_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fctype_configure_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fctype_configure_char.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -42,23 +42,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   ctype<char>::classic_table() throw()\n   { return 0; }\n \n-  ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n-\t\t     size_t __refs) \n-  : facet(__refs), _M_del(__table != 0 && __del), \n-  _M_toupper(NULL), _M_tolower(NULL), \n-  _M_table(__table ? __table : classic_table()) \n-  { \n+  ctype<char>::ctype(__c_locale, const mask* __table, bool __del,\n+\t\t     size_t __refs)\n+  : facet(__refs), _M_del(__table != 0 && __del),\n+  _M_toupper(NULL), _M_tolower(NULL),\n+  _M_table(__table ? __table : classic_table())\n+  {\n     memset(_M_widen, 0, sizeof(_M_widen));\n     _M_widen_ok = 0;\n     memset(_M_narrow, 0, sizeof(_M_narrow));\n     _M_narrow_ok = 0;\n   }\n \n-  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n-  : facet(__refs), _M_del(__table != 0 && __del), \n-  _M_toupper(NULL), _M_tolower(NULL), \n+  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n+  : facet(__refs), _M_del(__table != 0 && __del),\n+  _M_toupper(NULL), _M_tolower(NULL),\n   _M_table(__table ? __table : classic_table())\n-  { \n+  {\n     memset(_M_widen, 0, sizeof(_M_widen));\n     _M_widen_ok = 0;\n     memset(_M_narrow, 0, sizeof(_M_narrow));\n@@ -84,7 +84,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   ctype<char>::do_tolower(char __c) const\n   { return ::tolower((int) __c); }\n \n-  const char* \n+  const char*\n   ctype<char>::do_tolower(char* __low, const char* __high) const\n   {\n     while (__low < __high)"}, {"sha": "2ec02ae9ac9dd79f49e9a1e6fa18dbb1d807aeeb", "filename": "libstdc++-v3/config/os/generic/ctype_inline.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fctype_inline.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -30,10 +30,10 @@\n //\n // ISO C++ 14882: 22.1  Locales\n //\n-  \n+\n // ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n // functions go in ctype.cc\n-  \n+\n // The following definitions are portable, but insanely slow. If one\n // cares at all about performance, then specialized ctype\n // functionality should be added for the native os in question: see\n@@ -48,13 +48,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   bool\n   ctype<char>::\n   is(mask __m, char __c) const\n-  { \n+  {\n     if (_M_table)\n       return _M_table[static_cast<unsigned char>(__c)] & __m;\n     else\n       {\n \tbool __ret = false;\n-\tconst size_t __bitmasksize = 15; \n+\tconst size_t __bitmasksize = 15;\n \tsize_t __bitcur = 0; // Lowest bitmask in ctype_base == 0\n \tfor (; __bitcur <= __bitmasksize; ++__bitcur)\n \t  {\n@@ -112,7 +112,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __ret;\n       }\n   }\n-   \n+\n   const char*\n   ctype<char>::\n   is(const char* __low, const char* __high, mask* __vec) const\n@@ -123,12 +123,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     else\n       {\n \t// Highest bitmask in ctype_base == 11.\n-\tconst size_t __bitmasksize = 15; \n+\tconst size_t __bitmasksize = 15;\n \tfor (;__low < __high; ++__vec, ++__low)\n \t  {\n \t    mask __m = 0;\n \t    // Lowest bitmask in ctype_base == 0\n-\t    size_t __i = 0; \n+\t    size_t __i = 0;\n \t    for (;__i <= __bitmasksize; ++__i)\n \t      {\n \t\tconst mask __bit = static_cast<mask>(1 << __i);"}, {"sha": "57e97f809ee47bbe8a7828d150bc6b5445fa43ab", "filename": "libstdc++-v3/config/os/generic/error_constants.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Ferror_constants.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Ferror_constants.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Ferror_constants.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -93,10 +93,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       no_lock_available = \t\t\tENOLCK,\n \n #ifdef _GLIBCXX_HAVE_ENODATA\n-      no_message_available = \t\t\tENODATA, \n+      no_message_available = \t\t\tENODATA,\n #endif\n \n-      no_message = \t\t\t\tENOMSG, \n+      no_message = \t\t\t\tENOMSG,\n       no_protocol_option = \t\t\tENOPROTOOPT,\n       no_space_on_device = \t\t\tENOSPC,\n "}, {"sha": "cfe8e907e8561f776646ba2068649563c1582610", "filename": "libstdc++-v3/config/os/hpux/ctype_base.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fctype_base.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -25,9 +25,9 @@\n //\n // ISO C++ 14882: 22.1  Locales\n //\n-  \n+\n // Default information, may not be appropriate for specific host.\n-  \n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -40,7 +40,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     // NB: Offsets into ctype<char>::_M_table force a particular size\n     // on the mask type. Because of this, we don't use an enum.\n-    typedef unsigned int        mask;   \n+    typedef unsigned int        mask;\n     static const mask upper     = _ISUPPER;\n     static const mask lower     = _ISLOWER;\n     static const mask alpha     = _ISALPHA;"}, {"sha": "02f8e32720838415e6cd582887f2d6b8542467b2", "filename": "libstdc++-v3/config/os/hpux/ctype_configure_char.cc", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fctype_configure_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fctype_configure_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fctype_configure_char.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -42,23 +42,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   ctype<char>::classic_table() throw()\n   { return __SB_masks; }\n \n-  ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n-\t\t     size_t __refs) \n-  : facet(__refs), _M_del(__table != 0 && __del), \n-  _M_toupper(NULL), _M_tolower(NULL), \n-  _M_table(__table ? __table : (const mask *) __SB_masks) \n-  { \n+  ctype<char>::ctype(__c_locale, const mask* __table, bool __del,\n+\t\t     size_t __refs)\n+  : facet(__refs), _M_del(__table != 0 && __del),\n+  _M_toupper(NULL), _M_tolower(NULL),\n+  _M_table(__table ? __table : (const mask *) __SB_masks)\n+  {\n     memset(_M_widen, 0, sizeof(_M_widen));\n     _M_widen_ok = 0;\n     memset(_M_narrow, 0, sizeof(_M_narrow));\n     _M_narrow_ok = 0;\n   }\n \n-  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n-  : facet(__refs), _M_del(__table != 0 && __del), \n-  _M_toupper(NULL), _M_tolower(NULL), \n-  _M_table(__table ? __table : (const mask *) __SB_masks) \n-  { \n+  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n+  : facet(__refs), _M_del(__table != 0 && __del),\n+  _M_toupper(NULL), _M_tolower(NULL),\n+  _M_table(__table ? __table : (const mask *) __SB_masks)\n+  {\n     memset(_M_widen, 0, sizeof(_M_widen));\n     _M_widen_ok = 0;\n     memset(_M_narrow, 0, sizeof(_M_narrow));\n@@ -84,7 +84,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   ctype<char>::do_tolower(char __c) const\n   { return ::tolower((int) __c); }\n \n-  const char* \n+  const char*\n   ctype<char>::do_tolower(char* __low, const char* __high) const\n   {\n     while (__low < __high)"}, {"sha": "e62f5f313530125f442889b87180d95a813a6b00", "filename": "libstdc++-v3/config/os/hpux/ctype_inline.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fctype_inline.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -21,7 +21,7 @@\n // a copy of the GCC Runtime Library Exception along with this program;\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n-  \n+\n /** @file bits/ctype_inline.h\n  *  This is an internal header file, included by other library headers.\n  *  Do not attempt to use it directly. @headername{locale}\n@@ -33,7 +33,7 @@\n \n // ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n // functions go in ctype.cc\n-  \n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -56,7 +56,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   ctype<char>::\n   scan_is(mask __m, const char* __low, const char* __high) const\n   {\n-    while (__low < __high \n+    while (__low < __high\n \t   && !(_M_table[static_cast<unsigned char>(*__low)] & __m))\n       ++__low;\n     return __low;\n@@ -66,7 +66,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   ctype<char>::\n   scan_not(mask __m, const char* __low, const char* __high) const\n   {\n-    while (__low < __high \n+    while (__low < __high\n \t   && (_M_table[static_cast<unsigned char>(*__low)] & __m) != 0)\n       ++__low;\n     return __low;"}, {"sha": "528b7b7301a2c271a3ecd5246066633b5bcdabc6", "filename": "libstdc++-v3/config/os/hpux/os_defines.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fos_defines.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -43,7 +43,7 @@\n    everyone else, they put them into a non-standard header\n    <inttypes.h>.  Ugh.\n \n-   <inttypes.h> defines a variety of things, some of which we \n+   <inttypes.h> defines a variety of things, some of which we\n    probably do not want.  So we don't want to include it here.\n \n    Luckily we can just declare strtoll and strtoull with the\n@@ -60,7 +60,7 @@\n #ifdef __cplusplus\n namespace std\n {\n-  extern \"C\" \n+  extern \"C\"\n   {\n #ifndef __LP64__\n   __extension__ long long strtoll (const char *, char **, int)\n@@ -80,7 +80,7 @@ namespace std\n #define _GLIBCXX_USE_LONG_LONG 1\n \n // HPUX on IA64 requires vtable to be 64 bit aligned even at 32 bit\n-// mode.  We need to pad the vtable structure to achieve this.  \n+// mode.  We need to pad the vtable structure to achieve this.\n #if !defined(_LP64) && defined (__ia64__)\n #define _GLIBCXX_VTABLE_PADDING 8\n typedef long int __padding_type;\n@@ -105,7 +105,7 @@ typedef long int __padding_type;\n // The strtold function is obsolete and not C99 conformant on PA HP-UX.\n // It returns plus or minus _LDBL_MAX instead of plus or minus HUGE_VALL\n // if the correct value would cause overflow.  It doesn't handle \"inf\",\n-// \"infinity\" and \"nan\".  It is not thread safe. \n+// \"infinity\" and \"nan\".  It is not thread safe.\n #if defined (__hppa__)\n #define _GLIBCXX_HAVE_BROKEN_STRTOLD 1\n #endif"}, {"sha": "ef17a30d02e6796e1a4858071c741f01b7c936bd", "filename": "libstdc++-v3/config/os/mingw32-w64/ctype_base.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32-w64%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32-w64%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32-w64%2Fctype_base.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -46,7 +46,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     // NB: Offsets into ctype<char>::_M_table force a particular size\n     // on the mask type. Because of this, we don't use an enum.\n-    typedef unsigned short \tmask;   \n+    typedef unsigned short \tmask;\n     static const mask upper\t= 1 << 0;\n     static const mask lower\t= 1 << 1;\n     static const mask alpha\t= 1 << 2;"}, {"sha": "ef17a30d02e6796e1a4858071c741f01b7c936bd", "filename": "libstdc++-v3/config/os/mingw32/ctype_base.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fctype_base.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -46,7 +46,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     // NB: Offsets into ctype<char>::_M_table force a particular size\n     // on the mask type. Because of this, we don't use an enum.\n-    typedef unsigned short \tmask;   \n+    typedef unsigned short \tmask;\n     static const mask upper\t= 1 << 0;\n     static const mask lower\t= 1 << 1;\n     static const mask alpha\t= 1 << 2;"}, {"sha": "717303e37031f8e3554837037978b53628240bc5", "filename": "libstdc++-v3/config/os/newlib/ctype_base.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fctype_base.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -25,7 +25,7 @@\n //\n // ISO C++ 14882: 22.1  Locales\n //\n-  \n+\n // Information as gleaned from /usr/include/ctype.h\n \n namespace std _GLIBCXX_VISIBILITY(default)"}, {"sha": "cadfeca04e22c4e4feaa86259991286b5173d61f", "filename": "libstdc++-v3/config/os/qnx/qnx6.1/ctype_configure_char.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fqnx%2Fqnx6.1%2Fctype_configure_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fqnx%2Fqnx6.1%2Fctype_configure_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fqnx%2Fqnx6.1%2Fctype_configure_char.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -37,26 +37,26 @@ namespace std _GLIBCXX_VISIBILITY(default)\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n // Information as gleaned from /usr/include/ctype.h\n-  \n+\n   const ctype_base::mask*\n   ctype<char>::classic_table() throw()\n   { return 0; }\n \n-  ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n-\t\t     size_t __refs) \n-  : facet(__refs), _M_del(__table != 0 && __del), \n+  ctype<char>::ctype(__c_locale, const mask* __table, bool __del,\n+\t\t     size_t __refs)\n+  : facet(__refs), _M_del(__table != 0 && __del),\n   _M_toupper(NULL), _M_tolower(NULL), _M_table(__table ? __table : _Ctype)\n-  { \n+  {\n     memset(_M_widen, 0, sizeof(_M_widen));\n     _M_widen_ok = 0;\n     memset(_M_narrow, 0, sizeof(_M_narrow));\n     _M_narrow_ok = 0;\n   }\n \n-  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n-  : facet(__refs), _M_del(__table != 0 && __del), \n+  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n+  : facet(__refs), _M_del(__table != 0 && __del),\n   _M_toupper(NULL), _M_tolower(NULL), _M_table(__table ? __table : _Ctype)\n-  { \n+  {\n     memset(_M_widen, 0, sizeof(_M_widen));\n     _M_widen_ok = 0;\n     memset(_M_narrow, 0, sizeof(_M_narrow));\n@@ -82,7 +82,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   ctype<char>::do_tolower(char __c) const\n   { return ::tolower((int) __c); }\n \n-  const char* \n+  const char*\n   ctype<char>::do_tolower(char* __low, const char* __high) const\n   {\n     while (__low < __high)"}, {"sha": "c6c7a1f37d2194a0308b5855cf8399d60513b7dc", "filename": "libstdc++-v3/config/os/qnx/qnx6.1/ctype_inline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fqnx%2Fqnx6.1%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fqnx%2Fqnx6.1%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fqnx%2Fqnx6.1%2Fctype_inline.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -30,10 +30,10 @@\n //\n // ISO C++ 14882: 22.1  Locales\n //\n-  \n+\n // ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n // functions go in ctype.cc\n-  \n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION"}, {"sha": "470d9dac811dbd8faf0872850470be4f5f71847a", "filename": "libstdc++-v3/config/os/solaris/solaris2.10/ctype_base.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.10%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.10%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.10%2Fctype_base.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -25,7 +25,7 @@\n //\n // ISO C++ 14882: 22.1  Locales\n //\n-  \n+\n // Information as gleaned from /usr/include/ctype.h. Looks like this\n // only works with solaris2.7 and solaris2.8. Thanks for not changing\n // things, sun engineers!\n@@ -42,7 +42,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     // NB: Offsets into ctype<char>::_M_table force a particular size\n     // on the mask type. Because of this, we don't use an enum.\n-    typedef unsigned int \tmask;   \n+    typedef unsigned int \tmask;\n     static const mask upper    \t= _ISUPPER;\n     static const mask lower \t= _ISLOWER;\n     static const mask alpha \t= _ISALPHA;"}, {"sha": "148b9f6853267f935c7d7431ee777fd8d78a1d05", "filename": "libstdc++-v3/config/os/solaris/solaris2.10/ctype_configure_char.cc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.10%2Fctype_configure_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.10%2Fctype_configure_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.10%2Fctype_configure_char.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -37,28 +37,28 @@ namespace std _GLIBCXX_VISIBILITY(default)\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n // Information as gleaned from /usr/include/ctype.h\n-  \n-  const ctype_base::mask* \n+\n+  const ctype_base::mask*\n   ctype<char>::classic_table() throw()\n   { return __ctype_mask; }\n \n-  ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n+  ctype<char>::ctype(__c_locale, const mask* __table, bool __del,\n \t\t     size_t __refs)\n-  : facet(__refs), _M_del(__table != 0 && __del), \n+  : facet(__refs), _M_del(__table != 0 && __del),\n   _M_toupper(__trans_upper), _M_tolower(__trans_lower),\n-  _M_table(__table ? __table : classic_table()) \n-  { \n+  _M_table(__table ? __table : classic_table())\n+  {\n     memset(_M_widen, 0, sizeof(_M_widen));\n     _M_widen_ok = 0;\n     memset(_M_narrow, 0, sizeof(_M_narrow));\n     _M_narrow_ok = 0;\n   }\n \n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n-  : facet(__refs), _M_del(__table != 0 && __del), \n+  : facet(__refs), _M_del(__table != 0 && __del),\n   _M_toupper(__trans_upper), _M_tolower(__trans_lower),\n-  _M_table(__table ? __table : classic_table()) \n-  { \n+  _M_table(__table ? __table : classic_table())\n+  {\n     memset(_M_widen, 0, sizeof(_M_widen));\n     _M_widen_ok = 0;\n     memset(_M_narrow, 0, sizeof(_M_narrow));\n@@ -84,7 +84,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   ctype<char>::do_tolower(char __c) const\n   { return _M_tolower[static_cast<unsigned char>(__c)]; }\n \n-  const char* \n+  const char*\n   ctype<char>::do_tolower(char* __low, const char* __high) const\n   {\n     while (__low < __high)"}, {"sha": "e62f5f313530125f442889b87180d95a813a6b00", "filename": "libstdc++-v3/config/os/solaris/solaris2.10/ctype_inline.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.10%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.10%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.10%2Fctype_inline.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -21,7 +21,7 @@\n // a copy of the GCC Runtime Library Exception along with this program;\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n-  \n+\n /** @file bits/ctype_inline.h\n  *  This is an internal header file, included by other library headers.\n  *  Do not attempt to use it directly. @headername{locale}\n@@ -33,7 +33,7 @@\n \n // ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n // functions go in ctype.cc\n-  \n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -56,7 +56,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   ctype<char>::\n   scan_is(mask __m, const char* __low, const char* __high) const\n   {\n-    while (__low < __high \n+    while (__low < __high\n \t   && !(_M_table[static_cast<unsigned char>(*__low)] & __m))\n       ++__low;\n     return __low;\n@@ -66,7 +66,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   ctype<char>::\n   scan_not(mask __m, const char* __low, const char* __high) const\n   {\n-    while (__low < __high \n+    while (__low < __high\n \t   && (_M_table[static_cast<unsigned char>(*__low)] & __m) != 0)\n       ++__low;\n     return __low;"}, {"sha": "8e5be5f27cde57b2475cbceb467b71f7734739f2", "filename": "libstdc++-v3/config/os/tpf/ctype_base.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Ftpf%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Ftpf%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Ftpf%2Fctype_base.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -25,9 +25,9 @@\n //\n // ISO C++ 14882: 22.1  Locales\n //\n-  \n+\n // Information as gleaned from /usr/include/ctype.h\n-  \n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -40,7 +40,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     // NB: Offsets into ctype<char>::_M_table force a particular size\n     // on the mask type. Because of this, we don't use an enum.\n-    typedef unsigned short \tmask;   \n+    typedef unsigned short \tmask;\n     static const mask upper    \t= _ISupper;\n     static const mask lower \t= _ISlower;\n     static const mask alpha \t= _ISalpha;"}, {"sha": "7dc9569ca4c71aa4d67720347c43f0743d5d55bc", "filename": "libstdc++-v3/config/os/tpf/ctype_configure_char.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Ftpf%2Fctype_configure_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Ftpf%2Fctype_configure_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Ftpf%2Fctype_configure_char.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -53,8 +53,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     return __ret;\n   }\n \n-  ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n-\t\t     size_t __refs) \n+  ctype<char>::ctype(__c_locale, const mask* __table, bool __del,\n+\t\t     size_t __refs)\n   : facet(__refs), _M_del(__table != 0 && __del)\n   {\n     char* __old = setlocale(LC_CTYPE, NULL);\n@@ -105,7 +105,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   ctype<char>::do_tolower(char __c) const\n   { return _M_tolower[static_cast<unsigned char>(__c)]; }\n \n-  const char* \n+  const char*\n   ctype<char>::do_tolower(char* __low, const char* __high) const\n   {\n     while (__low < __high)"}, {"sha": "6621715dcd14658afc514fc23677a95f65d2a690", "filename": "libstdc++-v3/config/os/tpf/ctype_inline.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Ftpf%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Ftpf%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Ftpf%2Fctype_inline.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -30,10 +30,10 @@\n //\n // ISO C++ 14882: 22.1  Locales\n //\n-  \n+\n // ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n // functions go in ctype.cc\n-  \n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -56,7 +56,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   ctype<char>::\n   scan_is(mask __m, const char* __low, const char* __high) const\n   {\n-    while (__low < __high \n+    while (__low < __high\n \t   && !(_M_table[static_cast<unsigned char>(*__low)] & __m))\n       ++__low;\n     return __low;\n@@ -66,7 +66,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   ctype<char>::\n   scan_not(mask __m, const char* __low, const char* __high) const\n   {\n-    while (__low < __high \n+    while (__low < __high\n \t   && (_M_table[static_cast<unsigned char>(*__low)] & __m) != 0)\n       ++__low;\n     return __low;"}, {"sha": "c712a702eef22569fc00139b8c2aa584ec3b7384", "filename": "libstdc++-v3/config/os/uclibc/ctype_configure_char.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fuclibc%2Fctype_configure_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fuclibc%2Fctype_configure_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fuclibc%2Fctype_configure_char.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -42,9 +42,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   ctype<char>::classic_table() throw()\n   { return __C_ctype_b; }\n \n-  ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n-\t\t     size_t __refs) \n-  : facet(__refs), _M_c_locale_ctype(_S_get_c_locale()), \n+  ctype<char>::ctype(__c_locale, const mask* __table, bool __del,\n+\t\t     size_t __refs)\n+  : facet(__refs), _M_c_locale_ctype(_S_get_c_locale()),\n   _M_del(__table != 0 && __del), _M_widen_ok(0), _M_narrow_ok(0)\n   {\n     _M_toupper = __C_ctype_toupper;\n@@ -55,7 +55,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   }\n \n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n-  : facet(__refs), _M_c_locale_ctype(_S_get_c_locale()), \n+  : facet(__refs), _M_c_locale_ctype(_S_get_c_locale()),\n   _M_del(__table != 0 && __del), _M_widen_ok(0), _M_narrow_ok(0)\n   {\n     _M_toupper = __C_ctype_toupper;\n@@ -84,7 +84,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   ctype<char>::do_tolower(char __c) const\n   { return _M_tolower[static_cast<unsigned char>(__c)]; }\n \n-  const char* \n+  const char*\n   ctype<char>::do_tolower(char* __low, const char* __high) const\n   {\n     while (__low < __high)"}, {"sha": "d965645cd8b7620e5b823e1a1b2dc1507f68c438", "filename": "libstdc++-v3/config/os/vxworks/ctype_base.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fctype_base.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -25,9 +25,9 @@\n //\n // ISO C++ 14882: 22.1  Locales\n //\n-  \n+\n // Information extracted from target/h/ctype.h.\n-  \n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -40,7 +40,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     // NB: Offsets into ctype<char>::_M_table force a particular size\n     // on the mask type. Because of this, we don't use an enum.\n-    typedef unsigned char \tmask;   \n+    typedef unsigned char \tmask;\n     static const mask upper    \t= _C_UPPER;\n     static const mask lower \t= _C_LOWER;\n     static const mask alpha \t= _C_UPPER | _C_LOWER;"}, {"sha": "dc0f7b003ceaaef5c8212df7104864237b6f9e38", "filename": "libstdc++-v3/config/os/vxworks/ctype_configure_char.cc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fctype_configure_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fctype_configure_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fctype_configure_char.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -42,23 +42,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   ctype<char>::classic_table() throw()\n   { return __ctype; }\n \n-  ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n-\t\t     size_t __refs) \n-  : facet(__refs), _M_del(__table != 0 && __del), \n-  _M_toupper(NULL), _M_tolower(NULL), \n-  _M_table(__table ? __table : classic_table()) \n-  { \n+  ctype<char>::ctype(__c_locale, const mask* __table, bool __del,\n+\t\t     size_t __refs)\n+  : facet(__refs), _M_del(__table != 0 && __del),\n+  _M_toupper(NULL), _M_tolower(NULL),\n+  _M_table(__table ? __table : classic_table())\n+  {\n     memset(_M_widen, 0, sizeof(_M_widen));\n     _M_widen_ok = 0;\n     memset(_M_narrow, 0, sizeof(_M_narrow));\n     _M_narrow_ok = 0;\n   }\n \n-  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n-  : facet(__refs), _M_del(__table != 0 && __del), \n-  _M_toupper(NULL), _M_tolower(NULL), \n+  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n+  : facet(__refs), _M_del(__table != 0 && __del),\n+  _M_toupper(NULL), _M_tolower(NULL),\n   _M_table(__table ? __table : classic_table())\n-  { \n+  {\n     memset(_M_widen, 0, sizeof(_M_widen));\n     _M_widen_ok = 0;\n     memset(_M_narrow, 0, sizeof(_M_narrow));\n@@ -84,7 +84,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   ctype<char>::do_tolower(char __c) const\n   { return __tolower(__c); }\n \n-  const char* \n+  const char*\n   ctype<char>::do_tolower(char* __low, const char* __high) const\n   {\n     while (__low < __high)"}, {"sha": "49a4c19435488a551b2a928016a062fe0bb71990", "filename": "libstdc++-v3/config/os/vxworks/ctype_inline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fctype_inline.h?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -30,7 +30,7 @@\n //\n // ISO C++ 14882: 22.1  Locales\n //\n-  \n+\n // Information as gleaned from target/h/ctype.h\n \n // ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n@@ -58,7 +58,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   ctype<char>::\n   scan_is(mask __m, const char* __low, const char* __high) const\n   {\n-    while (__low < __high \n+    while (__low < __high\n \t   && !(__ctype[static_cast<unsigned char>(*__low)] & __m))\n       ++__low;\n     return __low;"}, {"sha": "00a6168508df4fc36ecffabf9c43f0214f6ad377", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -77,7 +77,7 @@ cxx98_sources = \\\n \tcompatibility.cc \\\n \tcompatibility-debug_list.cc \\\n \tcompatibility-debug_list-2.cc \\\n-\t${ldbl_compat_sources} \n+\t${ldbl_compat_sources}\n \n cxx11_sources = \\\n \tcompatibility-c++0x.cc \\\n@@ -141,7 +141,7 @@ compatibility-condvar.o: compatibility-condvar.cc\n \t$(CXXCOMPILE) -std=gnu++11 -c $<\n \n # A note on compatibility and static libraries.\n-# \n+#\n # static lib == linked against only this version, should not need compat\n # shared lib == linked against potentially all compat versions\n #\n@@ -150,7 +150,7 @@ compatibility-condvar.o: compatibility-condvar.cc\n #\n # In the sub-directories of libsupc++, src/c++98, src/c++11, only\n # -prefer-pic objects are generated for the convenience libraries.\n-# \n+#\n # In the main src directory, make shared and static objects just for\n # the compat libraries. Shared objects are compiled with -prefer-pic\n # -D_GLIBCXX_SHARED and in the .libs sub-directory, static objects are\n@@ -187,7 +187,7 @@ AM_CXXFLAGS = \\\n # correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n # attempt to infer which configuration to use.\n-# \n+#\n # The second tag argument, `--tag disable-shared` means that libtool\n # only compiles each source once, for static objects. In actuality,\n # glibcxx_lt_pic_flag and glibcxx_compiler_shared_flag are added to"}, {"sha": "09fe24eab67c8602ad2c3c681f645ad5a444702c", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -402,7 +402,7 @@ cxx98_sources = \\\n \tcompatibility.cc \\\n \tcompatibility-debug_list.cc \\\n \tcompatibility-debug_list-2.cc \\\n-\t${ldbl_compat_sources} \n+\t${ldbl_compat_sources}\n \n cxx11_sources = \\\n \tcompatibility-c++0x.cc \\\n@@ -430,7 +430,7 @@ libstdc___la_LDFLAGS = \\\n libstdc___la_LINK = $(CXXLINK) $(libstdc___la_LDFLAGS)\n \n # A note on compatibility and static libraries.\n-# \n+#\n # static lib == linked against only this version, should not need compat\n # shared lib == linked against potentially all compat versions\n #\n@@ -439,7 +439,7 @@ libstdc___la_LINK = $(CXXLINK) $(libstdc___la_LDFLAGS)\n #\n # In the sub-directories of libsupc++, src/c++98, src/c++11, only\n # -prefer-pic objects are generated for the convenience libraries.\n-# \n+#\n # In the main src directory, make shared and static objects just for\n # the compat libraries. Shared objects are compiled with -prefer-pic\n # -D_GLIBCXX_SHARED and in the .libs sub-directory, static objects are\n@@ -477,7 +477,7 @@ AM_CXXFLAGS = \\\n # correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n # attempt to infer which configuration to use.\n-# \n+#\n # The second tag argument, `--tag disable-shared` means that libtool\n # only compiles each source once, for static objects. In actuality,\n # glibcxx_lt_pic_flag and glibcxx_compiler_shared_flag are added to"}, {"sha": "ee619a878f3a92d428350a79f452cc5810940ca1", "filename": "libstdc++-v3/src/c++11/Makefile.am", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.am?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -115,7 +115,7 @@ vpath % $(top_srcdir)/src/c++11\n libc__11convenience_la_SOURCES = $(sources)  $(inst_sources)\n \n # Use special rules for the hashtable.cc file so that all\n-# the generated template functions are also instantiated. \n+# the generated template functions are also instantiated.\n hashtable_c++0x.lo: hashtable_c++0x.cc\n \t$(LTCXXCOMPILE) -fimplicit-templates -c $<\n hashtable_c++0x.o: hashtable_c++0x.cc\n@@ -149,7 +149,7 @@ AM_MAKEFLAGS = \\\n # correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n # attempt to infer which configuration to use.\n-# \n+#\n # The second tag argument, `--tag disable-shared` means that libtool\n # only compiles each source once, for static objects. In actuality,\n # glibcxx_lt_pic_flag and glibcxx_compiler_shared_flag are added to"}, {"sha": "30c4a23b87a5d96ea4525d60225e29f27eb7b6c1", "filename": "libstdc++-v3/src/c++11/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -449,7 +449,7 @@ AM_MAKEFLAGS = \\\n # correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n # attempt to infer which configuration to use.\n-# \n+#\n # The second tag argument, `--tag disable-shared` means that libtool\n # only compiles each source once, for static objects. In actuality,\n # glibcxx_lt_pic_flag and glibcxx_compiler_shared_flag are added to\n@@ -729,7 +729,7 @@ ctype_members.cc: ${glibcxx_srcdir}/$(CCTYPE_CC)\n vpath % $(top_srcdir)/src/c++11\n \n # Use special rules for the hashtable.cc file so that all\n-# the generated template functions are also instantiated. \n+# the generated template functions are also instantiated.\n hashtable_c++0x.lo: hashtable_c++0x.cc\n \t$(LTCXXCOMPILE) -fimplicit-templates -c $<\n hashtable_c++0x.o: hashtable_c++0x.cc"}, {"sha": "1e08bd84e9e3a878d614d06c3b6baa922240bf88", "filename": "libstdc++-v3/src/c++11/chrono.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fchrono.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fchrono.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fchrono.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -75,7 +75,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n #endif\n     }\n \n-    \n+\n     constexpr bool steady_clock::is_steady;\n \n     steady_clock::time_point"}, {"sha": "3190d89185f512d8a4a6c702bca5a03b30312d14", "filename": "libstdc++-v3/src/c++11/compatibility-atomic-c++0x.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-atomic-c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-atomic-c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-atomic-c%2B%2B0x.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -64,7 +64,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n      bool\n      test_and_set(memory_order) noexcept;\n-     \n+\n      void\n      clear(memory_order) noexcept;\n     };"}, {"sha": "5cff53895be937f241de0445371df9042496742b", "filename": "libstdc++-v3/src/c++11/compatibility-c++0x.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-c%2B%2B0x.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -86,7 +86,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n #ifdef _GLIBCXX_USE_WCHAR_T\n   template<>\n     struct hash<wstring>\n-    { \n+    {\n       size_t operator()(wstring) const;\n     };\n "}, {"sha": "1f611aca4ed555237e199044ea4d0d8dd585eb4c", "filename": "libstdc++-v3/src/c++11/compatibility-chrono.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-chrono.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-chrono.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-chrono.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -41,7 +41,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n   namespace chrono\n   {\n   _GLIBCXX_BEGIN_NAMESPACE_VERSION\n- \n+\n     // NB: Default configuration was no realtime.\n     struct system_clock\n     {"}, {"sha": "83c9733de1c37b736d955e6358af910b754626b8", "filename": "libstdc++-v3/src/c++11/cow-locale_init.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-locale_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-locale_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-locale_init.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -32,7 +32,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-namespace \n+namespace\n {\n   typedef char fake_collate_c[sizeof(std::collate<char>)]\n   __attribute__ ((aligned(__alignof__(std::collate<char>))));\n@@ -50,7 +50,7 @@ namespace\n   typedef char fake_money_get_c[sizeof(money_get<char>)]\n   __attribute__ ((aligned(__alignof__(money_get<char>))));\n   fake_money_get_c money_get_c;\n-  \n+\n   typedef char fake_money_put_c[sizeof(money_put<char>)]\n   __attribute__ ((aligned(__alignof__(money_put<char>))));\n   fake_money_put_c money_put_c;\n@@ -80,7 +80,7 @@ namespace\n   typedef char fake_money_get_w[sizeof(money_get<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(money_get<wchar_t>))));\n   fake_money_get_w money_get_w;\n-  \n+\n   typedef char fake_money_put_w[sizeof(money_put<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(money_put<wchar_t>))));\n   fake_money_put_w money_put_w;\n@@ -161,7 +161,7 @@ namespace\n     _M_init_facet_unchecked(new money_put<wchar_t>);\n     _M_init_facet_unchecked(new time_get<wchar_t>);\n     _M_init_facet_unchecked(new std::messages<wchar_t>(__cloc, __s));\n-#endif\t  \n+#endif\n   }\n \n // TODO should be in another file\n@@ -178,7 +178,7 @@ namespace\n \t__ret.reserve(128);\n \t__ret += _S_categories[0];\n \t__ret += '=';\n-\t__ret += _M_impl->_M_names[0]; \n+\t__ret += _M_impl->_M_names[0];\n \tfor (size_t __i = 1; __i < _S_categories_size; ++__i)\n \t  {\n \t    __ret += ';';"}, {"sha": "137760b2fa1220027884858a8aab0420a5f7c58f", "filename": "libstdc++-v3/src/c++11/cow-string-inst.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-string-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-string-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-string-inst.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -42,17 +42,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // These came from c++98/misc-inst.cc, repeat them for COW string\n   // string related to iostreams.\n-  template \n-    basic_istream<char>& \n+  template\n+    basic_istream<char>&\n     operator>>(basic_istream<char>&, string&);\n-  template \n-    basic_ostream<char>& \n+  template\n+    basic_ostream<char>&\n     operator<<(basic_ostream<char>&, const string&);\n-  template \n-    basic_istream<char>& \n+  template\n+    basic_istream<char>&\n     getline(basic_istream<char>&, string&, char);\n-  template \n-    basic_istream<char>& \n+  template\n+    basic_istream<char>&\n     getline(basic_istream<char>&, string&);\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "26bc7174dd0b718215530c1d75e5eb7975453f78", "filename": "libstdc++-v3/src/c++11/cow-wstring-inst.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-wstring-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-wstring-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-wstring-inst.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -46,17 +46,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // XXX these came from c++98/misc-inst.cc, repeat them for COW string\n   // string related to iostreams\n-  template \n-    basic_istream<wchar_t>& \n+  template\n+    basic_istream<wchar_t>&\n     operator>>(basic_istream<wchar_t>&, wstring&);\n-  template \n-    basic_ostream<wchar_t>& \n+  template\n+    basic_ostream<wchar_t>&\n     operator<<(basic_ostream<wchar_t>&, const wstring&);\n-  template \n-    basic_istream<wchar_t>& \n+  template\n+    basic_istream<wchar_t>&\n     getline(basic_istream<wchar_t>&, wstring&, wchar_t);\n-  template \n-    basic_istream<wchar_t>& \n+  template\n+    basic_istream<wchar_t>&\n     getline(basic_istream<wchar_t>&, wstring&);\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "c802791c4fa82262a97c5f947faa39d78439a49e", "filename": "libstdc++-v3/src/c++11/ctype.cc", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fctype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fctype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fctype.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -45,17 +45,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Definitions for locale::id of standard facets that are specialized.\n   locale::id ctype<char>::id;\n \n-#ifdef _GLIBCXX_USE_WCHAR_T  \n+#ifdef _GLIBCXX_USE_WCHAR_T\n   locale::id ctype<wchar_t>::id;\n #endif\n \n   const size_t ctype<char>::table_size;\n \n   ctype<char>::~ctype()\n-  { \n+  {\n     _S_destroy_c_locale(_M_c_locale_ctype);\n-    if (_M_del) \n-      delete[] this->table(); \n+    if (_M_del)\n+      delete[] this->table();\n   }\n \n   // Fill in the narrowing cache and flag whether all values are\n@@ -69,7 +69,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     for (size_t __i = 0; __i < sizeof(_M_narrow); ++__i)\n       __tmp[__i] = __i;\n     do_narrow(__tmp, __tmp + sizeof(__tmp), 0, _M_narrow);\n-    \n+\n     _M_narrow_ok = 1;\n     if (__builtin_memcmp(__tmp, _M_narrow, sizeof(_M_narrow)))\n       _M_narrow_ok = 2;\n@@ -92,30 +92,30 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     for (size_t __i = 0; __i < sizeof(_M_widen); ++__i)\n       __tmp[__i] = __i;\n     do_widen(__tmp, __tmp + sizeof(__tmp), _M_widen);\n-    \n+\n     _M_widen_ok = 1;\n     // Set _M_widen_ok to 2 if memcpy can't be used.\n     if (__builtin_memcmp(__tmp, _M_widen, sizeof(_M_widen)))\n       _M_widen_ok = 2;\n   }\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n-  ctype<wchar_t>::ctype(size_t __refs) \n-  : __ctype_abstract_base<wchar_t>(__refs), \n+  ctype<wchar_t>::ctype(size_t __refs)\n+  : __ctype_abstract_base<wchar_t>(__refs),\n   _M_c_locale_ctype(_S_get_c_locale()), _M_narrow_ok(false)\n   { _M_initialize_ctype(); }\n \n-  ctype<wchar_t>::ctype(__c_locale __cloc, size_t __refs) \n+  ctype<wchar_t>::ctype(__c_locale __cloc, size_t __refs)\n   : __ctype_abstract_base<wchar_t>(__refs),\n   _M_c_locale_ctype(_S_clone_c_locale(__cloc)), _M_narrow_ok(false)\n   { _M_initialize_ctype(); }\n \n-  ctype<wchar_t>::~ctype() \n+  ctype<wchar_t>::~ctype()\n   { _S_destroy_c_locale(_M_c_locale_ctype); }\n \n   ctype_byname<wchar_t>::ctype_byname(const char* __s, size_t __refs)\n-  : ctype<wchar_t>(__refs) \n-  { \t\t\n+  : ctype<wchar_t>(__refs)\n+  {\n     if (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n       {\n \tthis->_S_destroy_c_locale(this->_M_c_locale_ctype);\n@@ -124,7 +124,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n   }\n \n-  ctype_byname<wchar_t>::~ctype_byname() \n+  ctype_byname<wchar_t>::~ctype_byname()\n   { }\n \n #endif"}, {"sha": "506468012cad4df44e2d8cfb5d29241e7ffe916a", "filename": "libstdc++-v3/src/c++11/ios.cc", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fios.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -74,38 +74,38 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   bool ios_base::Init::_S_synced_with_stdio = true;\n \n   ios_base::ios_base() throw()\n-  : _M_precision(), _M_width(), _M_flags(), _M_exception(), \n-  _M_streambuf_state(), _M_callbacks(0), _M_word_zero(), \n+  : _M_precision(), _M_width(), _M_flags(), _M_exception(),\n+  _M_streambuf_state(), _M_callbacks(0), _M_word_zero(),\n   _M_word_size(_S_local_word_size), _M_word(_M_local_word), _M_ios_locale()\n   {\n-    // Do nothing: basic_ios::init() does it.  \n+    // Do nothing: basic_ios::init() does it.\n     // NB: _M_callbacks and _M_word must be zero for non-initialized\n     // ios_base to go through ~ios_base gracefully.\n   }\n-  \n+\n   // 27.4.2.7  ios_base constructors/destructors\n   ios_base::~ios_base()\n   {\n     _M_call_callbacks(erase_event);\n     _M_dispose_callbacks();\n-    if (_M_word != _M_local_word) \n+    if (_M_word != _M_local_word)\n       {\n \tdelete [] _M_word;\n \t_M_word = 0;\n       }\n   }\n \n   // 27.4.2.5  ios_base storage functions\n-  int \n+  int\n   ios_base::xalloc() throw()\n   {\n     // Implementation note: Initialize top to zero to ensure that\n     // initialization occurs before main() is started.\n-    static _Atomic_word _S_top = 0; \n+    static _Atomic_word _S_top = 0;\n     return __gnu_cxx::__exchange_and_add_dispatch(&_S_top, 1) + 4;\n   }\n \n-  void \n+  void\n   ios_base::register_callback(event_callback __fn, int __index)\n   { _M_callbacks = new _Callback_list(__fn, __index, _M_callbacks); }\n \n@@ -140,9 +140,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t  _M_word_zero._M_pword = 0;\n \t\treturn _M_word_zero;\n \t      }\n-\t    for (int __i = 0; __i < _M_word_size; __i++) \n+\t    for (int __i = 0; __i < _M_word_size; __i++)\n \t      __words[__i] = _M_word[__i];\n-\t    if (_M_word && _M_word != _M_local_word) \n+\t    if (_M_word && _M_word != _M_local_word)\n \t      {\n \t\tdelete [] _M_word;\n \t\t_M_word = 0;\n@@ -165,21 +165,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     return _M_word[__ix];\n   }\n \n-  void \n+  void\n   ios_base::_M_call_callbacks(event __e) throw()\n   {\n     _Callback_list* __p = _M_callbacks;\n     while (__p)\n       {\n-\t__try \n-\t  { (*__p->_M_fn) (__e, *this, __p->_M_index); } \n-\t__catch(...) \n+\t__try\n+\t  { (*__p->_M_fn) (__e, *this, __p->_M_index); }\n+\t__catch(...)\n \t  { }\n \t__p = __p->_M_next;\n       }\n   }\n \n-  void \n+  void\n   ios_base::_M_dispose_callbacks(void) throw()\n   {\n     _Callback_list* __p = _M_callbacks;"}, {"sha": "f564ba84caf9db2225243c2273fa789f97fa4fda", "filename": "libstdc++-v3/src/c++11/iostream-inst.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fiostream-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fiostream-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fiostream-inst.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -40,7 +40,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #ifdef _GLIBCXX_USE_WCHAR_T\n   template class _Setfill<wchar_t>;\n   template _Setfill<wchar_t> setfill(wchar_t);\n-  template class basic_iostream<wchar_t>; \n+  template class basic_iostream<wchar_t>;\n #endif\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "2fa9c5f2ee350dcb2d236b5a9fd1533758e52157", "filename": "libstdc++-v3/src/c++11/istream-inst.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fistream-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fistream-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fistream-inst.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -50,7 +50,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template istream& operator>>(istream&, _Setw);\n \n   template istream& istream::_M_extract(unsigned short&);\n-  template istream& istream::_M_extract(unsigned int&);  \n+  template istream& istream::_M_extract(unsigned int&);\n   template istream& istream::_M_extract(long&);\n   template istream& istream::_M_extract(unsigned long&);\n   template istream& istream::_M_extract(bool&);\n@@ -77,7 +77,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template wistream& operator>>(wistream&, _Setw);\n \n   template wistream& wistream::_M_extract(unsigned short&);\n-  template wistream& wistream::_M_extract(unsigned int&);  \n+  template wistream& wistream::_M_extract(unsigned int&);\n   template wistream& wistream::_M_extract(long&);\n   template wistream& wistream::_M_extract(unsigned long&);\n   template wistream& wistream::_M_extract(bool&);"}, {"sha": "cc70f01509efcc97387002b141f69091d6d2d8bc", "filename": "libstdc++-v3/src/c++11/limits.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Flimits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Flimits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Flimits.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -163,7 +163,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // wchar_t\n   // This used to be problematic...\n-#ifdef _GLIBCXX_USE_WCHAR_T  \n+#ifdef _GLIBCXX_USE_WCHAR_T\n   const bool numeric_limits<wchar_t>::is_specialized;\n   const int  numeric_limits<wchar_t>::digits;\n   const int  numeric_limits<wchar_t>::digits10;"}, {"sha": "ff41948fe7fe23564793c07a2d1bb49de1941b9f", "filename": "libstdc++-v3/src/c++11/locale-inst.cc", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Flocale-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Flocale-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Flocale-inst.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -76,13 +76,13 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11\n   template\n     ostreambuf_iterator<C>\n     money_put<C, ostreambuf_iterator<C> >::\n-    _M_insert<true>(ostreambuf_iterator<C>, ios_base&, C, \n+    _M_insert<true>(ostreambuf_iterator<C>, ios_base&, C,\n \t\t    const string_type&) const;\n \n   template\n     ostreambuf_iterator<C>\n     money_put<C, ostreambuf_iterator<C> >::\n-    _M_insert<false>(ostreambuf_iterator<C>, ios_base&, C, \n+    _M_insert<false>(ostreambuf_iterator<C>, ios_base&, C,\n \t\t     const string_type&) const;\n _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11\n \n@@ -110,7 +110,7 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL\n     istreambuf_iterator<C>\n     num_get<C, istreambuf_iterator<C> >::\n     _M_extract_int(istreambuf_iterator<C>, istreambuf_iterator<C>,\n-\t\t   ios_base&, ios_base::iostate&, \n+\t\t   ios_base&, ios_base::iostate&,\n \t\t   unsigned short&) const;\n \n   template\n@@ -149,39 +149,39 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL\n   template\n     ostreambuf_iterator<C>\n     num_put<C, ostreambuf_iterator<C> >::\n-    _M_insert_int(ostreambuf_iterator<C>, ios_base&, C, \n+    _M_insert_int(ostreambuf_iterator<C>, ios_base&, C,\n \t\t  long) const;\n \n   template\n     ostreambuf_iterator<C>\n     num_put<C, ostreambuf_iterator<C> >::\n-    _M_insert_int(ostreambuf_iterator<C>, ios_base&, C, \n+    _M_insert_int(ostreambuf_iterator<C>, ios_base&, C,\n \t\t  unsigned long) const;\n \n #ifdef _GLIBCXX_USE_LONG_LONG\n   template\n     ostreambuf_iterator<C>\n     num_put<C, ostreambuf_iterator<C> >::\n-    _M_insert_int(ostreambuf_iterator<C>, ios_base&, C, \n+    _M_insert_int(ostreambuf_iterator<C>, ios_base&, C,\n \t\t  long long) const;\n \n   template\n     ostreambuf_iterator<C>\n     num_put<C, ostreambuf_iterator<C> >::\n-    _M_insert_int(ostreambuf_iterator<C>, ios_base&, C, \n+    _M_insert_int(ostreambuf_iterator<C>, ios_base&, C,\n \t\t  unsigned long long) const;\n #endif\n \n   template\n     ostreambuf_iterator<C>\n     num_put<C, ostreambuf_iterator<C> >::\n-    _M_insert_float(ostreambuf_iterator<C>, ios_base&, C, char, \n+    _M_insert_float(ostreambuf_iterator<C>, ios_base&, C, char,\n \t\t    double) const;\n \n   template\n     ostreambuf_iterator<C>\n     num_put<C, ostreambuf_iterator<C> >::\n-    _M_insert_float(ostreambuf_iterator<C>, ios_base&, C, char, \n+    _M_insert_float(ostreambuf_iterator<C>, ios_base&, C, char,\n \t\t    long double) const;\n #endif\n _GLIBCXX_END_NAMESPACE_LDBL\n@@ -206,7 +206,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   template class messages<C>;\n   template class messages_byname<C>;\n _GLIBCXX_END_NAMESPACE_CXX11\n-  \n+\n   // ctype\n   ctype_byname<C>::ctype_byname(const string& __s, size_t __refs)\n   : ctype_byname(__s.c_str(), __refs) { }\n@@ -215,7 +215,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n   inline template class __ctype_abstract_base<C>;\n   template class ctype_byname<C>;\n #endif\n-  \n+\n   // codecvt\n #if ! _GLIBCXX_USE_CXX11_ABI\n   inline template class __codecvt_abstract_base<C, char, mbstate_t>;\n@@ -230,126 +230,126 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   template class collate<C>;\n   template class collate_byname<C>;\n _GLIBCXX_END_NAMESPACE_CXX11\n-    \n+\n   // use_facet\n #if ! _GLIBCXX_USE_CXX11_ABI\n   template\n-    const ctype<C>& \n+    const ctype<C>&\n     use_facet<ctype<C> >(const locale&);\n \n   template\n-    const codecvt<C, char, mbstate_t>& \n+    const codecvt<C, char, mbstate_t>&\n     use_facet<codecvt<C, char, mbstate_t> >(const locale&);\n #endif\n \n   template\n-    const collate<C>& \n+    const collate<C>&\n     use_facet<collate<C> >(const locale&);\n \n   template\n-    const numpunct<C>& \n+    const numpunct<C>&\n     use_facet<numpunct<C> >(const locale&);\n \n #if ! _GLIBCXX_USE_CXX11_ABI\n-  template \n-    const num_put<C>& \n+  template\n+    const num_put<C>&\n     use_facet<num_put<C> >(const locale&);\n \n-  template \n-    const num_get<C>& \n+  template\n+    const num_get<C>&\n     use_facet<num_get<C> >(const locale&);\n #endif\n \n   template\n-    const moneypunct<C, true>& \n+    const moneypunct<C, true>&\n     use_facet<moneypunct<C, true> >(const locale&);\n \n   template\n-    const moneypunct<C, false>& \n+    const moneypunct<C, false>&\n     use_facet<moneypunct<C, false> >(const locale&);\n \n-  template \n-    const money_put<C>& \n+  template\n+    const money_put<C>&\n     use_facet<money_put<C> >(const locale&);\n \n-  template \n-    const money_get<C>& \n+  template\n+    const money_get<C>&\n     use_facet<money_get<C> >(const locale&);\n \n #if ! _GLIBCXX_USE_CXX11_ABI\n   template\n-    const __timepunct<C>& \n+    const __timepunct<C>&\n     use_facet<__timepunct<C> >(const locale&);\n \n-  template \n-    const time_put<C>& \n+  template\n+    const time_put<C>&\n     use_facet<time_put<C> >(const locale&);\n #endif\n \n-  template \n-    const time_get<C>& \n+  template\n+    const time_get<C>&\n     use_facet<time_get<C> >(const locale&);\n \n-  template \n-    const messages<C>& \n+  template\n+    const messages<C>&\n     use_facet<messages<C> >(const locale&);\n \n   // has_facet\n #if ! _GLIBCXX_USE_CXX11_ABI\n-  template \n+  template\n     bool\n     has_facet<ctype<C> >(const locale&);\n \n-  template \n+  template\n     bool\n     has_facet<codecvt<C, char, mbstate_t> >(const locale&);\n #endif\n \n-  template \n+  template\n     bool\n     has_facet<collate<C> >(const locale&);\n \n-  template \n+  template\n     bool\n     has_facet<numpunct<C> >(const locale&);\n \n #if ! _GLIBCXX_USE_CXX11_ABI\n-  template \n+  template\n     bool\n     has_facet<num_put<C> >(const locale&);\n \n-  template \n+  template\n     bool\n     has_facet<num_get<C> >(const locale&);\n #endif\n \n-  template \n+  template\n     bool\n     has_facet<moneypunct<C> >(const locale&);\n \n-  template \n+  template\n     bool\n     has_facet<money_put<C> >(const locale&);\n \n-  template \n+  template\n     bool\n     has_facet<money_get<C> >(const locale&);\n \n #if ! _GLIBCXX_USE_CXX11_ABI\n-  template \n+  template\n     bool\n     has_facet<__timepunct<C> >(const locale&);\n \n-  template \n+  template\n     bool\n     has_facet<time_put<C> >(const locale&);\n #endif\n \n-  template \n+  template\n     bool\n     has_facet<time_get<C> >(const locale&);\n \n-  template \n+  template\n     bool\n     has_facet<messages<C> >(const locale&);\n \n@@ -358,7 +358,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n   // locale functions.\n   template\n     C*\n-    __add_grouping<C>(C*, C, char const*, size_t, \n+    __add_grouping<C>(C*, C, char const*, size_t,\n \t\t\t C const*, C const*);\n \n   template class __pad<C, char_traits<C> >;\n@@ -371,7 +371,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n #ifdef _GLIBCXX_USE_LONG_LONG\n   template\n     int\n-    __int_to_char(C*, unsigned long long, const C*, \n+    __int_to_char(C*, unsigned long long, const C*,\n \t\t  ios_base::fmtflags, bool);\n #endif\n #endif"}, {"sha": "516698df4fbd29c07f1eb95659229f5ea1bd5c98", "filename": "libstdc++-v3/src/c++11/placeholders.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fplaceholders.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fplaceholders.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fplaceholders.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -30,7 +30,7 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-  namespace placeholders \n+  namespace placeholders\n   {\n   _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     extern const _Placeholder<1> _1{};"}, {"sha": "5b6428e82f862b7c280bbb81117a074c93d96baf", "filename": "libstdc++-v3/src/c++11/sstream-inst.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsstream-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsstream-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsstream-inst.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -44,9 +44,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n   template class basic_stringbuf<wchar_t>;\n-  template class basic_istringstream<wchar_t>; \n-  template class basic_ostringstream<wchar_t>; \n-  template class basic_stringstream<wchar_t>; \n+  template class basic_istringstream<wchar_t>;\n+  template class basic_ostringstream<wchar_t>;\n+  template class basic_stringstream<wchar_t>;\n #endif\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "95f47d6f4804e7f0c7a4216315e9689f2fceb812", "filename": "libstdc++-v3/src/c++11/string-inst.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fstring-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fstring-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fstring-inst.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -53,7 +53,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template S operator+(C, const S&);\n   template S operator+(const S&, const S&);\n \n-  // Only one template keyword allowed here. \n+  // Only one template keyword allowed here.\n   // See core issue #46 (NAD)\n   // http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_closed.html#46\n   template\n@@ -62,17 +62,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template\n     S::basic_string(const C*, const C*, const allocator<C>&);\n \n-  template \n+  template\n     S::basic_string(S::iterator, S::iterator, const allocator<C>&);\n \n #if _GLIBCXX_USE_CXX11_ABI\n-  template \n+  template\n     void\n     S::_M_construct(S::iterator, S::iterator, forward_iterator_tag);\n \n-  template \n+  template\n     void\n-    S::_M_construct(S::const_iterator, S::const_iterator, \n+    S::_M_construct(S::const_iterator, S::const_iterator,\n \t\t    forward_iterator_tag);\n \n   template\n@@ -85,9 +85,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #else // !_GLIBCXX_USE_CXX11_ABI\n \n-  template \n-    C* \n-    S::_S_construct(S::iterator, S::iterator, \n+  template\n+    C*\n+    S::_S_construct(S::iterator, S::iterator,\n \t\t    const allocator<C>&, forward_iterator_tag);\n \n   template"}, {"sha": "c0a9839964e96d80226eb0d9923d12d94c40e4ca", "filename": "libstdc++-v3/src/c++11/system_error.cc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsystem_error.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsystem_error.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsystem_error.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -33,16 +33,16 @@\n \n namespace\n {\n-  using std::string; \n-  \n+  using std::string;\n+\n   struct generic_error_category : public std::error_category\n   {\n     virtual const char*\n     name() const noexcept\n     { return \"generic\"; }\n \n     _GLIBCXX_DEFAULT_ABI_TAG\n-    virtual string \n+    virtual string\n     message(int i) const\n     {\n       // XXX locale issues: how does one get or set loc.\n@@ -77,28 +77,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   error_category::~error_category() noexcept = default;\n \n-  const error_category& \n+  const error_category&\n   _V2::system_category() noexcept { return system_category_instance; }\n \n-  const error_category& \n+  const error_category&\n   _V2::generic_category() noexcept { return generic_category_instance; }\n-  \n+\n   system_error::~system_error() noexcept = default;\n \n-  error_condition \n+  error_condition\n   error_category::default_error_condition(int __i) const noexcept\n   { return error_condition(__i, *this); }\n \n-  bool \n+  bool\n   error_category::equivalent(int __i,\n \t\t\t     const error_condition& __cond) const noexcept\n   { return default_error_condition(__i) == __cond; }\n \n-  bool \n+  bool\n   error_category::equivalent(const error_code& __code, int __i) const noexcept\n   { return *this == __code.category() && __code.value() == __i; }\n \n-  error_condition \n+  error_condition\n   error_code::default_error_condition() const noexcept\n   { return category().default_error_condition(value()); }\n "}, {"sha": "7e840023ddea7dee7a5a67818095e83f9bf2870a", "filename": "libstdc++-v3/src/c++98/Makefile.am", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.am?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -23,7 +23,7 @@\n include $(top_srcdir)/fragment.am\n \n # Convenience library for C++98 runtime.\n-noinst_LTLIBRARIES = libc++98convenience.la \n+noinst_LTLIBRARIES = libc++98convenience.la\n \n headers =\n \n@@ -209,7 +209,7 @@ concept-inst.o: concept-inst.cc\n \t$(CXXCOMPILE) -D_GLIBCXX_CONCEPT_CHECKS -fimplicit-templates -c $<\n \n # Use special rules for parallel mode compilation.\n-PARALLEL_FLAGS = -D_GLIBCXX_PARALLEL \n+PARALLEL_FLAGS = -D_GLIBCXX_PARALLEL\n parallel_settings.lo: parallel_settings.cc\n \t$(LTCXXCOMPILE) $(PARALLEL_FLAGS) -c $<\n parallel_settings.o: parallel_settings.cc\n@@ -243,7 +243,7 @@ AM_MAKEFLAGS = \\\n # correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n # attempt to infer which configuration to use.\n-# \n+#\n # The second tag argument, `--tag disable-shared` means that libtool\n # only compiles each source once, for static objects. In actuality,\n # glibcxx_lt_pic_flag and glibcxx_compiler_shared_flag are added to"}, {"sha": "931f8793216368a3f7451d331984a11100e41695", "filename": "libstdc++-v3/src/c++98/Makefile.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.in?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -347,7 +347,7 @@ WARN_CXXFLAGS = \\\n AM_CPPFLAGS = $(GLIBCXX_INCLUDES) $(CPPFLAGS)\n \n # Convenience library for C++98 runtime.\n-noinst_LTLIBRARIES = libc++98convenience.la \n+noinst_LTLIBRARIES = libc++98convenience.la\n headers = \n @ENABLE_DUAL_ABI_TRUE@cow_string_host_sources = \\\n @ENABLE_DUAL_ABI_TRUE@\tcollate_members_cow.cc \\\n@@ -435,7 +435,7 @@ libc__98convenience_la_SOURCES = $(sources)\n GLIBCXX_INCLUDE_DIR = $(glibcxx_builddir)/include\n \n # Use special rules for parallel mode compilation.\n-PARALLEL_FLAGS = -D_GLIBCXX_PARALLEL \n+PARALLEL_FLAGS = -D_GLIBCXX_PARALLEL\n \n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n # modified in a per-library or per-sub-library way.  Need to manually\n@@ -466,7 +466,7 @@ AM_MAKEFLAGS = \\\n # correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n # attempt to infer which configuration to use.\n-# \n+#\n # The second tag argument, `--tag disable-shared` means that libtool\n # only compiles each source once, for static objects. In actuality,\n # glibcxx_lt_pic_flag and glibcxx_compiler_shared_flag are added to"}, {"sha": "ebda0e8364e55af7a9008a2bd99a856d108c64c0", "filename": "libstdc++-v3/src/c++98/bitmap_allocator.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fbitmap_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fbitmap_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fbitmap_allocator.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -39,7 +39,7 @@ namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n \n     template class __mini_vector<size_t*>;\n \n-    template size_t** __lower_bound(size_t**, size_t**, size_t const&, \n+    template size_t** __lower_bound(size_t**, size_t**, size_t const&,\n \t\t\t\t    free_list::_LT_pointer_compare);\n   _GLIBCXX_END_NAMESPACE_VERSION\n   }\n@@ -56,7 +56,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n     const vector_type& __free_list = _M_get_free_list();\n     using __gnu_cxx::__detail::__lower_bound;\n-    iterator __tmp = __lower_bound(__free_list.begin(), __free_list.end(), \n+    iterator __tmp = __lower_bound(__free_list.begin(), __free_list.end(),\n \t\t\t\t   __sz, _LT_pointer_compare());\n \n     if (__tmp == __free_list.end() || !_M_should_i_give(**__tmp, __sz))"}, {"sha": "5f56f04f40b9a553689b88ee8255ab63d9356945", "filename": "libstdc++-v3/src/c++98/codecvt.cc", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fcodecvt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fcodecvt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fcodecvt.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -31,7 +31,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Definitions for locale::id of standard facets that are specialized.\n  locale::id codecvt<char, char, mbstate_t>::id;\n \n-#ifdef _GLIBCXX_USE_WCHAR_T  \n+#ifdef _GLIBCXX_USE_WCHAR_T\n   locale::id codecvt<wchar_t, char, mbstate_t>::id;\n #endif\n \n@@ -50,69 +50,69 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   codecvt<char, char, mbstate_t>::\n   ~codecvt()\n   { _S_destroy_c_locale(_M_c_locale_codecvt); }\n-  \n+\n   codecvt_base::result\n   codecvt<char, char, mbstate_t>::\n-  do_out(state_type&, const intern_type* __from, \n+  do_out(state_type&, const intern_type* __from,\n \t const intern_type*, const intern_type*& __from_next,\n-\t extern_type* __to, extern_type*, \n+\t extern_type* __to, extern_type*,\n \t extern_type*& __to_next) const\n-  { \n+  {\n     // _GLIBCXX_RESOLVE_LIB_DEFECTS\n     // According to the resolution of DR19, \"If returns noconv [...]\n     // there are no changes to the values in [to, to_limit).\"\n-    __from_next = __from; \n+    __from_next = __from;\n     __to_next = __to;\n-    return noconv;  \n+    return noconv;\n   }\n-  \n+\n   codecvt_base::result\n   codecvt<char, char, mbstate_t>::\n   do_unshift(state_type&, extern_type* __to,\n              extern_type*, extern_type*& __to_next) const\n-  { \n-    __to_next = __to; \n-    return noconv; \n+  {\n+    __to_next = __to;\n+    return noconv;\n   }\n-  \n+\n   codecvt_base::result\n   codecvt<char, char, mbstate_t>::\n-  do_in(state_type&, const extern_type* __from, \n+  do_in(state_type&, const extern_type* __from,\n \tconst extern_type*, const extern_type*& __from_next,\n \tintern_type* __to, intern_type*, intern_type*& __to_next) const\n   {\n     // _GLIBCXX_RESOLVE_LIB_DEFECTS\n     // According to the resolution of DR19, \"If returns noconv [...]\n     // there are no changes to the values in [to, to_limit).\"\n-    __from_next = __from; \n+    __from_next = __from;\n     __to_next = __to;\n-    return noconv;  \n+    return noconv;\n   }\n \n-  int \n+  int\n   codecvt<char, char, mbstate_t>::\n-  do_encoding() const throw() \n+  do_encoding() const throw()\n   { return 1; }\n-  \n-  bool \n+\n+  bool\n   codecvt<char, char, mbstate_t>::\n-  do_always_noconv() const throw() \n+  do_always_noconv() const throw()\n   { return true; }\n-  \n-  int \n+\n+  int\n   codecvt<char, char, mbstate_t>::\n   do_length (state_type&, const extern_type* __from,\n \t     const extern_type* __end, size_t __max) const\n-  { \n+  {\n     size_t __d = static_cast<size_t>(__end - __from);\n-    return std::min(__max, __d); \n+    return std::min(__max, __d);\n   }\n-  \n-  int \n+\n+  int\n   codecvt<char, char, mbstate_t>::\n-  do_max_length() const throw() \n+  do_max_length() const throw()\n   { return 1; }\n-  \n+\n #ifdef _GLIBCXX_USE_WCHAR_T\n   // codecvt<wchar_t, char, mbstate_t> required specialization\n   codecvt<wchar_t, char, mbstate_t>::\n@@ -130,7 +130,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   codecvt<wchar_t, char, mbstate_t>::\n   ~codecvt()\n   { _S_destroy_c_locale(_M_c_locale_codecvt); }\n-  \n+\n   codecvt_base::result\n   codecvt<wchar_t, char, mbstate_t>::\n   do_unshift(state_type&, extern_type* __to,\n@@ -140,8 +140,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __to_next = __to;\n     return noconv;\n   }\n-  \n-  bool \n+\n+  bool\n   codecvt<wchar_t, char, mbstate_t>::\n   do_always_noconv() const throw()\n   { return false; }"}, {"sha": "c434db13f9cb88d570932f52df8039169a0849f7", "filename": "libstdc++-v3/src/c++98/compatibility.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fcompatibility.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fcompatibility.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fcompatibility.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -62,7 +62,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       if (__n == 1)\n \treturn ignore();\n-      \n+\n       _M_gcount = 0;\n       sentry __cerb(*this, true);\n       if ( __n > 0 && __cerb)\n@@ -94,7 +94,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t{\n \t\t\t  ++_M_gcount;\n \t\t\t  __c = __sb->snextc();\n-\t\t\t} \n+\t\t\t}\n \t\t    }\n \t\t  if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max\n \t\t      && !traits_type::eq_int_type(__c, __eof))\n@@ -124,7 +124,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    this->setstate(__err);\n \t}\n       return *this;\n-    } \n+    }\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n   template<>\n@@ -134,7 +134,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       if (__n == 1)\n \treturn ignore();\n-      \n+\n       _M_gcount = 0;\n       sentry __cerb(*this, true);\n       if (__n > 0 && __cerb)\n@@ -296,7 +296,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // std::istream\n   template\n     basic_istream<char>&\n-    basic_istream<char>::ignore(); \n+    basic_istream<char>::ignore();\n \n   template\n     bool\n@@ -332,7 +332,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template\n     void\n-    basic_string<wchar_t>::_M_check_length(size_t, size_t, \n+    basic_string<wchar_t>::_M_check_length(size_t, size_t,\n \t\t\t\t\t   const char*) const;\n \n   template\n@@ -341,7 +341,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template\n     basic_istream<wchar_t>&\n-    basic_istream<wchar_t>::ignore(); \n+    basic_istream<wchar_t>::ignore();\n \n   template\n     bool\n@@ -396,7 +396,7 @@ _ZN10__gnu_norm15_List_node_base6unhookEv;\n _ZN10__gnu_norm15_List_node_base7reverseEv;\n _ZN10__gnu_norm15_List_node_base8transferEPS0_S1_;\n */\n-#include \"list.cc\"  \n+#include \"list.cc\"\n _GLIBCXX_ASM_SYMVER(_ZNSt8__detail17_List_node_baseXX7_M_hookEPS0_, \\\n _ZN10__gnu_norm15_List_node_base4hookEPS0_, \\\n GLIBCXX_3.4)\n@@ -419,7 +419,7 @@ GLIBCXX_3.4)\n #undef _List_node_base\n \n // gcc-4.1.0\n-// Long double versions of \"C\" math functions. \n+// Long double versions of \"C\" math functions.\n #if defined (_GLIBCXX_LONG_DOUBLE_COMPAT) \\\n     || (defined (__arm__) && defined (__linux__) && defined (__ARM_EABI__)) \\\n     || (defined (__hppa__) && defined (__linux__)) \\"}, {"sha": "2306f61f14ca18c7d818e1e2cbf124272a9daab7", "filename": "libstdc++-v3/src/c++98/complex_io.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fcomplex_io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fcomplex_io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fcomplex_io.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -34,7 +34,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template\n     basic_ostream<char, char_traits<char> >&\n-    operator<<(basic_ostream<char, char_traits<char> >&, \n+    operator<<(basic_ostream<char, char_traits<char> >&,\n \t       const complex<float>&);\n \n   template\n@@ -43,12 +43,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template\n     basic_ostream<char, char_traits<char> >&\n-    operator<<(basic_ostream<char, char_traits<char> >&, \n+    operator<<(basic_ostream<char, char_traits<char> >&,\n \t       const complex<double>&);\n \n   template\n     basic_istream<char, char_traits<char> >&\n-    operator>>(basic_istream<char, char_traits<char> >&, \n+    operator>>(basic_istream<char, char_traits<char> >&,\n \t       complex<long double>&);\n \n   template"}, {"sha": "4f181dde0f426b99a06b4860ae87e25165fb8cb7", "filename": "libstdc++-v3/src/c++98/ext-inst.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fext-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fext-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fext-inst.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -38,7 +38,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   }\n \n   template\n-    const unsigned long \n+    const unsigned long\n     rope<char, std::allocator<char> >::_S_min_len[min_len];\n \n   template\n@@ -48,7 +48,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n   template\n-    const unsigned long \n+    const unsigned long\n     rope<wchar_t, std::allocator<wchar_t> >::_S_min_len[min_len];\n \n   template"}, {"sha": "ed1e32b8f8ede826bb20c7e9bbe4d987ade9520c", "filename": "libstdc++-v3/src/c++98/globals_io.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fglobals_io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fglobals_io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fglobals_io.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -38,7 +38,7 @@\n // NB: asm directives can rename these non-exported, namespace\n // __gnu_cxx symbols into exported, namespace std symbols with the\n // appropriate symbol version name.\n-// The rename syntax is \n+// The rename syntax is\n //   asm (\".symver currentname,oldname@@GLIBCXX_3.2\")\n // In macro form:\n // _GLIBCXX_ASM_SYMVER(currentname, oldname, GLIBCXX_3.2)\n@@ -51,17 +51,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // NB: Iff <iostream> is included, these definitions become wonky.\n   typedef char fake_istream[sizeof(istream)]\n   __attribute__ ((aligned(__alignof__(istream))));\n-  typedef char fake_ostream[sizeof(ostream)] \n+  typedef char fake_ostream[sizeof(ostream)]\n   __attribute__ ((aligned(__alignof__(ostream))));\n   fake_istream cin;\n   fake_ostream cout;\n   fake_ostream cerr;\n   fake_ostream clog;\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n-  typedef char fake_wistream[sizeof(wistream)] \n+  typedef char fake_wistream[sizeof(wistream)]\n   __attribute__ ((aligned(__alignof__(wistream))));\n-  typedef char fake_wostream[sizeof(wostream)] \n+  typedef char fake_wostream[sizeof(wostream)]\n   __attribute__ ((aligned(__alignof__(wostream))));\n   fake_wistream wcin;\n   fake_wostream wcout;"}, {"sha": "50cfe6ff2447482974b94e9c318ef4162e8257b6", "filename": "libstdc++-v3/src/c++98/hash-long-double-tr1-aux.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fhash-long-double-tr1-aux.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fhash-long-double-tr1-aux.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fhash-long-double-tr1-aux.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -24,7 +24,7 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-  namespace tr1 \n+  namespace tr1\n   {\n     // For long double, careful with random padding bits (e.g., on x86,\n     // 10 bytes -> 12 bytes) and resort to frexp."}, {"sha": "f4fe611a595c9563f07af717f93571db2b37e1b5", "filename": "libstdc++-v3/src/c++98/hash_tr1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fhash_tr1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fhash_tr1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fhash_tr1.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -30,7 +30,7 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-  namespace tr1 \n+  namespace tr1\n   {\n #ifndef _GLIBCXX_LONG_DOUBLE_COMPAT_IMPL\n   template<>"}, {"sha": "6be2b9be726df3d3681406fa1c6840f5263ca8d3", "filename": "libstdc++-v3/src/c++98/hashtable_tr1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fhashtable_tr1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fhashtable_tr1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fhashtable_tr1.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -26,7 +26,7 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-  namespace tr1 \n+  namespace tr1\n   {\n #include \"../shared/hashtable-aux.cc\"\n   }"}, {"sha": "1edb7af780af3fbc3cd6e25ebdae5080f36c1a1a", "filename": "libstdc++-v3/src/c++98/ios_failure.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fios_failure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fios_failure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fios_failure.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -38,7 +38,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   ios_base::failure::~failure() throw()\n   { }\n-  \n+\n   const char*\n   ios_base::failure::what() const throw()\n   { return _M_msg.c_str(); }"}, {"sha": "64d678391198334d0496e6d6569592de1098a830", "filename": "libstdc++-v3/src/c++98/ios_init.cc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fios_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fios_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fios_init.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -62,7 +62,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using namespace __gnu_internal;\n-  \n+\n   extern istream cin;\n   extern ostream cout;\n   extern ostream cerr;\n@@ -109,9 +109,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tnew (&wclog) wostream(&buf_wcerr_sync);\n \twcin.tie(&wcout);\n \twcerr.setf(ios_base::unitbuf);\n-\twcerr.tie(&wcout);\t\n+\twcerr.tie(&wcout);\n #endif\n-\t\n+\n \t// NB: Have to set refcount above one, so that standard\n \t// streams are not re-initialized with uses of ios_base::Init\n \t// besides <iostream> static object, ie just using <ios> with\n@@ -129,26 +129,26 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&_S_refcount);\n \t// Catch any exceptions thrown by basic_ostream::flush()\n \t__try\n-\t  { \n+\t  {\n \t    // Flush standard output streams as required by 27.4.2.1.6\n \t    cout.flush();\n \t    cerr.flush();\n \t    clog.flush();\n-    \n+\n #ifdef _GLIBCXX_USE_WCHAR_T\n \t    wcout.flush();\n \t    wcerr.flush();\n-\t    wclog.flush();    \n+\t    wclog.flush();\n #endif\n \t  }\n \t__catch(...)\n \t  { }\n       }\n-  } \n+  }\n \n-  bool \n+  bool\n   ios_base::sync_with_stdio(bool __sync)\n-  { \n+  {\n     // _GLIBCXX_RESOLVE_LIB_DEFECTS\n     // 49.  Underspecification of ios_base::sync_with_stdio\n     bool __ret = ios_base::Init::_S_synced_with_stdio;\n@@ -185,7 +185,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tcin.rdbuf(&buf_cin);\n \tcerr.rdbuf(&buf_cerr);\n \tclog.rdbuf(&buf_cerr);\n-    \n+\n #ifdef _GLIBCXX_USE_WCHAR_T\n \tnew (&buf_wcout) stdio_filebuf<wchar_t>(stdout, ios_base::out);\n \tnew (&buf_wcin) stdio_filebuf<wchar_t>(stdin, ios_base::in);\n@@ -196,7 +196,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \twclog.rdbuf(&buf_wcerr);\n #endif\n       }\n-    return __ret; \n+    return __ret;\n   }\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "93fa12e8872a41cc2a78962e144844d6c46c634c", "filename": "libstdc++-v3/src/c++98/istream.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fistream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fistream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fistream.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -48,7 +48,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      const int_type __eof = traits_type::eof();\n \t      __streambuf_type* __sb = this->rdbuf();\n \t      int_type __c = __sb->sgetc();\n-\t      \n+\n \t      while (_M_gcount + 1 < __n\n \t\t     && !traits_type::eq_int_type(__c, __eof)\n \t\t     && !traits_type::eq_int_type(__c, __idelim))\n@@ -82,7 +82,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t__err |= ios_base::eofbit;\n \t      else if (traits_type::eq_int_type(__c, __idelim))\n \t\t{\n-\t\t  ++_M_gcount;\t\t  \n+\t\t  ++_M_gcount;\n \t\t  __sb->sbumpc();\n \t\t}\n \t      else\n@@ -290,7 +290,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      const int_type __eof = traits_type::eof();\n \t      __streambuf_type* __sb = this->rdbuf();\n \t      int_type __c = __sb->sgetc();\n-\t      \n+\n \t      while (_M_gcount + 1 < __n\n \t\t     && !traits_type::eq_int_type(__c, __eof)\n \t\t     && !traits_type::eq_int_type(__c, __idelim))\n@@ -324,7 +324,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t__err |= ios_base::eofbit;\n \t      else if (traits_type::eq_int_type(__c, __idelim))\n \t\t{\n-\t\t  ++_M_gcount;\t\t  \n+\t\t  ++_M_gcount;\n \t\t  __sb->sbumpc();\n \t\t}\n \t      else"}, {"sha": "00a972d86918c80ba3574c1cb382239563fdbfeb", "filename": "libstdc++-v3/src/c++98/locale.cc", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -69,7 +69,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // These are no longer exported.\n   locale::_Impl*                locale::_S_classic;\n-  locale::_Impl* \t\tlocale::_S_global; \n+  locale::_Impl* \t\tlocale::_S_global;\n \n #ifdef __GTHREADS\n   __gthread_once_t \t\tlocale::_S_once = __GTHREAD_ONCE_INIT;\n@@ -132,7 +132,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__ret.reserve(128);\n \t__ret += _S_categories[0];\n \t__ret += '=';\n-\t__ret += _M_impl->_M_names[0]; \n+\t__ret += _M_impl->_M_names[0];\n \tfor (size_t __i = 1; __i < _S_categories_size; ++__i)\n \t  {\n \t    __ret += ';';\n@@ -145,7 +145,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   }\n \n   locale::category\n-  locale::_S_normalize_category(category __cat) \n+  locale::_S_normalize_category(category __cat)\n   {\n     int __ret = 0;\n     if (__cat == none || ((__cat & all) && !(__cat & ~all)))\n@@ -155,27 +155,27 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t// NB: May be a C-style \"LC_ALL\" category; convert.\n \tswitch (__cat)\n \t  {\n-\t  case LC_COLLATE:  \n-\t    __ret = collate; \n+\t  case LC_COLLATE:\n+\t    __ret = collate;\n \t    break;\n-\t  case LC_CTYPE:    \n+\t  case LC_CTYPE:\n \t    __ret = ctype;\n \t    break;\n-\t  case LC_MONETARY: \n+\t  case LC_MONETARY:\n \t    __ret = monetary;\n \t    break;\n-\t  case LC_NUMERIC:  \n+\t  case LC_NUMERIC:\n \t    __ret = numeric;\n \t    break;\n-\t  case LC_TIME:     \n-\t    __ret = time; \n+\t  case LC_TIME:\n+\t    __ret = time;\n \t    break;\n #ifdef _GLIBCXX_HAVE_LC_MESSAGES\n-\t  case LC_MESSAGES: \n+\t  case LC_MESSAGES:\n \t    __ret = messages;\n \t    break;\n-#endif\t\n-\t  case LC_ALL:      \n+#endif\n+\t  case LC_ALL:\n \t    __ret = all;\n \t    break;\n \t  default:\n@@ -237,12 +237,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     if (_M_caches)\n       for (size_t __i = 0; __i < _M_facets_size; ++__i)\n \tif (_M_caches[__i])\n-\t  _M_caches[__i]->_M_remove_reference(); \n+\t  _M_caches[__i]->_M_remove_reference();\n     delete [] _M_caches;\n \n     if (_M_names)\n       for (size_t __i = 0; __i < _S_categories_size; ++__i)\n-\tdelete [] _M_names[__i];  \n+\tdelete [] _M_names[__i];\n     delete [] _M_names;\n   }\n \n@@ -266,7 +266,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  {\n \t    _M_caches[__j] = __imp._M_caches[__j];\n \t    if (_M_caches[__j])\n-\t      _M_caches[__j]->_M_add_reference(); \t\n+\t      _M_caches[__j]->_M_add_reference();\n \t  }\n \t_M_names = new char*[_S_categories_size];\n \tfor (size_t __k = 0; __k < _S_categories_size; ++__k)\n@@ -290,22 +290,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   void\n   locale::_Impl::\n-  _M_replace_category(const _Impl* __imp, \n+  _M_replace_category(const _Impl* __imp,\n \t\t      const locale::id* const* __idpp)\n   {\n     for (; *__idpp; ++__idpp)\n       _M_replace_facet(__imp, *__idpp);\n   }\n-  \n+\n   void\n   locale::_Impl::\n   _M_replace_facet(const _Impl* __imp, const locale::id* __idp)\n   {\n     size_t __index = __idp->_M_id();\n-    if ((__index > (__imp->_M_facets_size - 1)) \n+    if ((__index > (__imp->_M_facets_size - 1))\n \t|| !__imp->_M_facets[__index])\n       __throw_runtime_error(__N(\"locale::_Impl::_M_replace_facet\"));\n-    _M_install_facet(__idp, __imp->_M_facets[__index]); \n+    _M_install_facet(__idp, __imp->_M_facets[__index]);\n   }\n \n   void\n@@ -324,7 +324,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    // New facet array.\n \t    const facet** __oldf = _M_facets;\n \t    const facet** __newf;\n-\t    __newf = new const facet*[__new_size]; \n+\t    __newf = new const facet*[__new_size];\n \t    for (size_t __i = 0; __i < _M_facets_size; ++__i)\n \t      __newf[__i] = _M_facets[__i];\n \t    for (size_t __l = _M_facets_size; __l < __new_size; ++__l)"}, {"sha": "4819a29eb09cae571a9d6d80f6ed8840b3ca5aa1", "filename": "libstdc++-v3/src/c++98/locale_facets.cc", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale_facets.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale_facets.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale_facets.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -28,26 +28,26 @@ namespace std _GLIBCXX_VISIBILITY(default)\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Definitions for static const data members of time_base.\n-  template<> \n+  template<>\n     const char*\n     __timepunct_cache<char>::_S_timezones[14] =\n-    { \n-      \"GMT\", \"HST\", \"AKST\", \"PST\", \"MST\", \"CST\", \"EST\", \"AST\", \"NST\", \"CET\", \n-      \"IST\", \"EET\", \"CST\", \"JST\"  \n+    {\n+      \"GMT\", \"HST\", \"AKST\", \"PST\", \"MST\", \"CST\", \"EST\", \"AST\", \"NST\", \"CET\",\n+      \"IST\", \"EET\", \"CST\", \"JST\"\n     };\n- \n+\n #ifdef _GLIBCXX_USE_WCHAR_T\n-  template<> \n+  template<>\n     const wchar_t*\n     __timepunct_cache<wchar_t>::_S_timezones[14] =\n-    { \n-      L\"GMT\", L\"HST\", L\"AKST\", L\"PST\", L\"MST\", L\"CST\", L\"EST\", L\"AST\", \n-      L\"NST\", L\"CET\", L\"IST\", L\"EET\", L\"CST\", L\"JST\"  \n+    {\n+      L\"GMT\", L\"HST\", L\"AKST\", L\"PST\", L\"MST\", L\"CST\", L\"EST\", L\"AST\",\n+      L\"NST\", L\"CET\", L\"IST\", L\"EET\", L\"CST\", L\"JST\"\n     };\n #endif\n \n   // Definitions for static const data members of money_base.\n-  const money_base::pattern \n+  const money_base::pattern\n   money_base::_S_default_pattern =  { {symbol, sign, none, value} };\n \n   const char* money_base::_S_atoms = \"-0123456789\";\n@@ -59,7 +59,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // According to the resolution of DR 231, about 22.2.2.2.2, p11,\n   // \"str.precision() is specified in the conversion specification\".\n   void\n-  __num_base::_S_format_float(const ios_base& __io, char* __fptr, \n+  __num_base::_S_format_float(const ios_base& __io, char* __fptr,\n \t\t\t      char __mod) throw()\n   {\n     ios_base::fmtflags __flags = __io.flags();\n@@ -108,7 +108,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     const size_t __min = std::min(__n, size_t(__grouping_size - 1));\n     size_t __i = __n;\n     bool __test = true;\n-    \n+\n     // Parsed number groupings have to match the\n     // numpunct::grouping string exactly, starting at the\n     // right-most point of the parsed sequence of elements ..."}, {"sha": "169068c51ba518be8ce1ffd2fb0f05a2d839df42", "filename": "libstdc++-v3/src/c++98/locale_init.cc", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale_init.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -55,7 +55,7 @@ _GLIBCXX_LOC_ID(_ZNSt8messagesIwE2idE);\n #endif\n \n \n-namespace \n+namespace\n {\n   const int num_facets = _GLIBCXX_NUM_FACETS + _GLIBCXX_NUM_UNICODE_FACETS\n     + (_GLIBCXX_USE_DUAL_ABI ? _GLIBCXX_NUM_CXX11_FACETS : 0);\n@@ -125,7 +125,7 @@ namespace\n   typedef char fake_money_get_c[sizeof(money_get<char>)]\n   __attribute__ ((aligned(__alignof__(money_get<char>))));\n   fake_money_get_c money_get_c;\n-  \n+\n   typedef char fake_money_put_c[sizeof(money_put<char>)]\n   __attribute__ ((aligned(__alignof__(money_put<char>))));\n   fake_money_put_c money_put_c;\n@@ -179,7 +179,7 @@ namespace\n   typedef char fake_money_get_w[sizeof(money_get<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(money_get<wchar_t>))));\n   fake_money_get_w money_get_w;\n-  \n+\n   typedef char fake_money_put_w[sizeof(money_put<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(money_put<wchar_t>))));\n   fake_money_put_w money_put_w;\n@@ -246,7 +246,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   locale::locale() throw() : _M_impl(0)\n-  { \n+  {\n     _S_initialize();\n \n     // Checked locking to optimize the common case where _S_global\n@@ -294,7 +294,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   const locale&\n   locale::classic()\n-  { \n+  {\n     _S_initialize();\n     return *(new (&c_locale) locale(_S_classic));\n   }\n@@ -305,10 +305,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     // 2 references.\n     // One reference for _S_classic, one for _S_global\n     _S_classic = new (&c_locale_impl) _Impl(2);\n-    _S_global = _S_classic; \t    \n+    _S_global = _S_classic;\n   }\n \n-  void  \n+  void\n   locale::_S_initialize()\n   {\n #ifdef __GTHREADS\n@@ -323,7 +323,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   const locale::id* const\n   locale::_Impl::_S_id_ctype[] =\n   {\n-    &std::ctype<char>::id, \n+    &std::ctype<char>::id,\n     &codecvt<char, char, mbstate_t>::id,\n #ifdef _GLIBCXX_USE_WCHAR_T\n     &std::ctype<wchar_t>::id,\n@@ -339,17 +339,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   const locale::id* const\n   locale::_Impl::_S_id_numeric[] =\n   {\n-    &num_get<char>::id,  \n-    &num_put<char>::id,  \n-    &numpunct<char>::id, \n+    &num_get<char>::id,\n+    &num_put<char>::id,\n+    &numpunct<char>::id,\n #ifdef _GLIBCXX_USE_WCHAR_T\n     &num_get<wchar_t>::id,\n     &num_put<wchar_t>::id,\n     &numpunct<wchar_t>::id,\n #endif\n     0\n   };\n-  \n+\n   const locale::id* const\n   locale::_Impl::_S_id_collate[] =\n   {\n@@ -363,24 +363,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   const locale::id* const\n   locale::_Impl::_S_id_time[] =\n   {\n-    &__timepunct<char>::id, \n-    &time_get<char>::id, \n-    &time_put<char>::id, \n+    &__timepunct<char>::id,\n+    &time_get<char>::id,\n+    &time_put<char>::id,\n #ifdef _GLIBCXX_USE_WCHAR_T\n-    &__timepunct<wchar_t>::id, \n+    &__timepunct<wchar_t>::id,\n     &time_get<wchar_t>::id,\n     &time_put<wchar_t>::id,\n #endif\n     0\n   };\n-  \n+\n   const locale::id* const\n   locale::_Impl::_S_id_monetary[] =\n   {\n-    &money_get<char>::id,        \n-    &money_put<char>::id,        \n-    &moneypunct<char, false>::id, \n-    &moneypunct<char, true >::id, \n+    &money_get<char>::id,\n+    &money_put<char>::id,\n+    &moneypunct<char, false>::id,\n+    &moneypunct<char, true >::id,\n #ifdef _GLIBCXX_USE_WCHAR_T\n     &money_get<wchar_t>::id,\n     &money_put<wchar_t>::id,\n@@ -393,7 +393,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   const locale::id* const\n   locale::_Impl::_S_id_messages[] =\n   {\n-    &std::messages<char>::id, \n+    &std::messages<char>::id,\n #ifdef _GLIBCXX_USE_WCHAR_T\n     &std::messages<wchar_t>::id,\n #endif\n@@ -457,9 +457,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Construct \"C\" _Impl.\n   locale::_Impl::\n-  _Impl(size_t __refs) throw() \n+  _Impl(size_t __refs) throw()\n   : _M_refcount(__refs), _M_facets(0), _M_facets_size(num_facets),\n-  _M_caches(0), _M_names(0)    \n+  _M_caches(0), _M_names(0)\n   {\n     _M_facets = new (&facet_vec) const facet*[_M_facets_size]();\n     _M_caches = new (&cache_vec) const facet*[_M_facets_size]();\n@@ -503,7 +503,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     _M_init_facet(new (&time_get_c) time_get<char>(1));\n     _M_init_facet(new (&time_put_c) time_put<char>(1));\n-    _M_init_facet(new (&messages_c) std::messages<char>(1));\t\n+    _M_init_facet(new (&messages_c) std::messages<char>(1));\n \n #ifdef  _GLIBCXX_USE_WCHAR_T\n     _M_init_facet(new (&ctype_w) std::ctype<wchar_t>(1));"}, {"sha": "c610b1886b692a710bda6f2634705b0c51925e96", "filename": "libstdc++-v3/src/c++98/localename.cc", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocalename.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -36,7 +36,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   {\n     if (__s)\n       {\n-\t_S_initialize(); \n+\t_S_initialize();\n \tif (std::strcmp(__s, \"C\") == 0 || std::strcmp(__s, \"POSIX\") == 0)\n \t  (_M_impl = _S_classic)->_M_add_reference();\n \telse if (std::strcmp(__s, \"\") != 0)\n@@ -48,7 +48,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    // If LC_ALL is set we are done.\n \t    if (__env && std::strcmp(__env, \"\") != 0)\n \t      {\n-\t\tif (std::strcmp(__env, \"C\") == 0 \n+\t\tif (std::strcmp(__env, \"C\") == 0\n \t\t    || std::strcmp(__env, \"POSIX\") == 0)\n \t\t  (_M_impl = _S_classic)->_M_add_reference();\n \t\telse\n@@ -59,22 +59,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t// LANG may set a default different from \"C\".\n \t\tstring __lang;\n \t\t__env = std::getenv(\"LANG\");\n-\t\tif (!__env || std::strcmp(__env, \"\") == 0 \n-\t\t    || std::strcmp(__env, \"C\") == 0 \n+\t\tif (!__env || std::strcmp(__env, \"\") == 0\n+\t\t    || std::strcmp(__env, \"C\") == 0\n \t\t    || std::strcmp(__env, \"POSIX\") == 0)\n \t\t  __lang = \"C\";\n-\t\telse \n+\t\telse\n \t\t  __lang = __env;\n-\t\t\n+\n \t\t// Scan the categories looking for the first one\n \t\t// different from LANG.\n \t\tsize_t __i = 0;\n \t\tif (__lang == \"C\")\n \t\t  for (; __i < _S_categories_size; ++__i)\n \t\t    {\n \t\t      __env = std::getenv(_S_categories[__i]);\n-\t\t      if (__env && std::strcmp(__env, \"\") != 0 \n-\t\t\t  && std::strcmp(__env, \"C\") != 0 \n+\t\t      if (__env && std::strcmp(__env, \"\") != 0\n+\t\t\t  && std::strcmp(__env, \"C\") != 0\n \t\t\t  && std::strcmp(__env, \"POSIX\") != 0)\n \t\t\tbreak;\n \t\t    }\n@@ -86,7 +86,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t  && __lang != __env)\n \t\t\tbreak;\n \t\t    }\n-\t\n+\n \t\t// If one is found, build the complete string of\n \t\t// the form LC_CTYPE=xxx;LC_NUMERIC=yyy; and so on...\n \t\tif (__i < _S_categories_size)\n@@ -143,7 +143,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   locale::locale(const locale& __base, const char* __s, category __cat)\n   : _M_impl(0)\n-  { \n+  {\n     // NB: There are complicated, yet more efficient ways to do\n     // this. Building up locales on a per-category way is tedious, so\n     // let's do it this way until people complain.\n@@ -156,17 +156,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { _M_coalesce(__base, __add, __cat); }\n \n   void\n-  locale::_M_coalesce(const locale& __base, const locale& __add, \n+  locale::_M_coalesce(const locale& __base, const locale& __add,\n \t\t      category __cat)\n   {\n-    __cat = _S_normalize_category(__cat);  \n-    _M_impl = new _Impl(*__base._M_impl, 1);  \n+    __cat = _S_normalize_category(__cat);\n+    _M_impl = new _Impl(*__base._M_impl, 1);\n \n-    __try \n+    __try\n       { _M_impl->_M_replace_categories(__add._M_impl, __cat); }\n-    __catch(...) \n-      { \n-\t_M_impl->_M_remove_reference(); \n+    __catch(...)\n+      {\n+\t_M_impl->_M_remove_reference();\n \t__throw_exception_again;\n       }\n   }\n@@ -235,7 +235,7 @@ const int num_facets = _GLIBCXX_NUM_FACETS + _GLIBCXX_NUM_UNICODE_FACETS\n \t\t\t\t\t\t\t      __smon);\n \t      }\n \t  }\n- \n+\n \t// Construct all standard facets and add them to _M_facets.\n \t_M_init_facet(new std::ctype<char>(__cloc, 0, false));\n \t_M_init_facet(new codecvt<char, char, mbstate_t>(__cloc));\n@@ -251,7 +251,7 @@ const int num_facets = _GLIBCXX_NUM_FACETS + _GLIBCXX_NUM_UNICODE_FACETS\n \t_M_init_facet(new time_get<char>);\n \t_M_init_facet(new time_put<char>);\n \t_M_init_facet(new std::messages<char>(__cloc, __s));\n-\t\n+\n #ifdef  _GLIBCXX_USE_WCHAR_T\n \t_M_init_facet(new std::ctype<wchar_t>(__cloc));\n \t_M_init_facet(new codecvt<wchar_t, char, mbstate_t>(__cloc));\n@@ -289,7 +289,7 @@ const int num_facets = _GLIBCXX_NUM_FACETS + _GLIBCXX_NUM_UNICODE_FACETS\n \t  locale::facet::_S_destroy_c_locale(__clocm);\n \tthis->~_Impl();\n \t__throw_exception_again;\n-      }\t\n+      }\n   }\n \n   void"}, {"sha": "4434a6800e551722cd430babb48070afca58f9ae", "filename": "libstdc++-v3/src/c++98/math_stubs_float.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fmath_stubs_float.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fmath_stubs_float.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fmath_stubs_float.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -28,7 +28,7 @@\n // we use the following crude approximations. We keep saying that we'll do\n // better later, but never do.\n \n-extern \"C\" \n+extern \"C\"\n {\n #ifndef _GLIBCXX_HAVE_FABSF\n   float"}, {"sha": "6aeebadbe775d19282659f849451660d7302a6ad", "filename": "libstdc++-v3/src/c++98/math_stubs_long_double.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fmath_stubs_long_double.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fmath_stubs_long_double.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fmath_stubs_long_double.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -28,7 +28,7 @@\n // we use the following crude approximations. We keep saying that we'll do\n // better later, but never do.\n \n-extern \"C\" \n+extern \"C\"\n {\n #ifndef _GLIBCXX_HAVE_FABSL\n   long double"}, {"sha": "bc22e12af08d6244034b2f8847f1b072699ae556", "filename": "libstdc++-v3/src/c++98/misc-inst.cc", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fmisc-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fmisc-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fmisc-inst.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -37,30 +37,30 @@ namespace std _GLIBCXX_VISIBILITY(default)\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // string related to iostreams\n-  template \n-    basic_istream<char>& \n+  template\n+    basic_istream<char>&\n     operator>>(basic_istream<char>&, string&);\n-  template \n-    basic_ostream<char>& \n+  template\n+    basic_ostream<char>&\n     operator<<(basic_ostream<char>&, const string&);\n-  template \n-    basic_istream<char>& \n+  template\n+    basic_istream<char>&\n     getline(basic_istream<char>&, string&, char);\n-  template \n-    basic_istream<char>& \n+  template\n+    basic_istream<char>&\n     getline(basic_istream<char>&, string&);\n #ifdef _GLIBCXX_USE_WCHAR_T\n-  template \n-    basic_istream<wchar_t>& \n+  template\n+    basic_istream<wchar_t>&\n     operator>>(basic_istream<wchar_t>&, wstring&);\n-  template \n-    basic_ostream<wchar_t>& \n+  template\n+    basic_ostream<wchar_t>&\n     operator<<(basic_ostream<wchar_t>&, const wstring&);\n-  template \n-    basic_istream<wchar_t>& \n+  template\n+    basic_istream<wchar_t>&\n     getline(basic_istream<wchar_t>&, wstring&, wchar_t);\n-  template \n-    basic_istream<wchar_t>& \n+  template\n+    basic_istream<wchar_t>&\n     getline(basic_istream<wchar_t>&, wstring&);\n #endif\n "}, {"sha": "efc694a0a7e261dc94bd87f0c105109f14d61245", "filename": "libstdc++-v3/src/c++98/mt_allocator.cc", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fmt_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fmt_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fmt_allocator.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -72,15 +72,15 @@ namespace\n     return freelist_mutex;\n   }\n \n-  static void \n+  static void\n   _M_destroy_thread_key(void* __id)\n   {\n     // Return this thread id record to the front of thread_freelist.\n     __freelist& freelist = get_freelist();\n     {\n       __gnu_cxx::__scoped_lock sentry(get_freelist_mutex());\n       uintptr_t _M_id = reinterpret_cast<uintptr_t>(__id);\n-      \n+\n       typedef __gnu_cxx::__pool<true>::_Thread_record _Thread_record;\n       _Thread_record* __tr = &freelist._M_thread_freelist_array[_M_id - 1];\n       __tr->_M_next = freelist._M_thread_freelist;\n@@ -124,23 +124,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     char* __c = __p - _M_get_align();\n     _Block_record* __block = reinterpret_cast<_Block_record*>(__c);\n-      \n+\n     // Single threaded application - return to global pool.\n     __block->_M_next = __bin._M_first[0];\n     __bin._M_first[0] = __block;\n   }\n \n-  char* \n+  char*\n   __pool<false>::_M_reserve_block(size_t __bytes, const size_t __thread_id)\n   {\n     // Round up to power of 2 and figure out which bin to use.\n     const size_t __which = _M_binmap[__bytes];\n     _Bin_record& __bin = _M_bin[__which];\n     const _Tune& __options = _M_get_options();\n-    const size_t __bin_size = (__options._M_min_bin << __which) \n+    const size_t __bin_size = (__options._M_min_bin << __which)\n \t\t\t       + __options._M_align;\n     size_t __block_count = __options._M_chunk_size - sizeof(_Block_address);\n-    __block_count /= __bin_size;\t  \n+    __block_count /= __bin_size;\n \n     // Get a new block dynamically, set it up for use.\n     void* __v = ::operator new(__options._M_chunk_size);\n@@ -174,12 +174,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     // _M_force_new must not change after the first allocate(), which\n     // in turn calls this method, so if it's false, it's false forever\n     // and we don't need to return here ever again.\n-    if (_M_options._M_force_new) \n+    if (_M_options._M_force_new)\n       {\n \t_M_init = true;\n \treturn;\n       }\n-      \n+\n     // Create the bins.\n     // Calculate the number of bins required based on _M_max_bytes.\n     // _M_bin_size is statically-initialized to one.\n@@ -189,7 +189,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__bin_size <<= 1;\n \t++_M_bin_size;\n       }\n-      \n+\n     // Setup the bin map for quick lookup of the relevant bin.\n     const size_t __j = (_M_options._M_max_bytes + 1) * sizeof(_Binmap_type);\n     _M_binmap = static_cast<_Binmap_type*>(::operator new(__j));\n@@ -205,7 +205,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  }\n \t*__bp++ = __bint;\n       }\n-      \n+\n     // Initialize _M_bin and its members.\n     void* __v = ::operator new(sizeof(_Bin_record) * _M_bin_size);\n     _M_bin = static_cast<_Bin_record*>(__v);\n@@ -220,7 +220,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _M_init = true;\n   }\n \n-  \n+\n #ifdef __GTHREADS\n   void\n   __pool<true>::_M_destroy() throw()\n@@ -279,7 +279,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t// in order to avoid too much contention we wait until the\n \t// number of records is \"high enough\".\n \tconst size_t __thread_id = _M_get_thread_id();\n-\tconst _Tune& __options = _M_get_options();\t\n+\tconst _Tune& __options = _M_get_options();\n \tconst size_t __limit = (100 * (_M_bin_size - __which)\n \t\t\t\t* __options._M_freelist_headroom);\n \n@@ -319,7 +319,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      __tmp = __tmp->_M_next;\n \t    __bin._M_first[__thread_id] = __tmp->_M_next;\n \t    __bin._M_free[__thread_id] -= __removed;\n-\t    \n+\n \t    __gthread_mutex_lock(__bin._M_mutex);\n \t    __tmp->_M_next = __bin._M_first[0];\n \t    __bin._M_first[0] = __first;\n@@ -336,7 +336,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n \t__block->_M_next = __bin._M_first[__thread_id];\n \t__bin._M_first[__thread_id] = __block;\n-\t\n+\n \t++__bin._M_free[__thread_id];\n       }\n     else\n@@ -348,7 +348,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n   }\n \n-  char* \n+  char*\n   __pool<true>::_M_reserve_block(size_t __bytes, const size_t __thread_id)\n   {\n     // Round up to power of 2 and figure out which bin to use.\n@@ -357,13 +357,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     const size_t __bin_size = ((__options._M_min_bin << __which)\n \t\t\t       + __options._M_align);\n     size_t __block_count = __options._M_chunk_size - sizeof(_Block_address);\n-    __block_count /= __bin_size;\t  \n-    \n+    __block_count /= __bin_size;\n+\n     // Are we using threads?\n     // - Yes, check if there are free blocks on the global\n     //   list. If so, grab up to __block_count blocks in one\n-    //   lock and change ownership. If the global list is \n-    //   empty, we allocate a new chunk and add those blocks \n+    //   lock and change ownership. If the global list is\n+    //   empty, we allocate a new chunk and add those blocks\n     //   directly to our own freelist (with us as owner).\n     // - No, all operations are made directly to global pool 0\n     //   no need to lock or change ownership but check for free\n@@ -449,7 +449,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  }\n \t__block->_M_next = 0;\n       }\n-      \n+\n     __block = __bin._M_first[__thread_id];\n     __bin._M_first[__thread_id] = __block->_M_next;\n \n@@ -471,7 +471,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     // _M_force_new must not change after the first allocate(),\n     // which in turn calls this method, so if it's false, it's false\n     // forever and we don't need to return here ever again.\n-    if (_M_options._M_force_new) \n+    if (_M_options._M_force_new)\n       {\n \t_M_init = true;\n \treturn;\n@@ -486,7 +486,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__bin_size <<= 1;\n \t++_M_bin_size;\n       }\n-      \n+\n     // Setup the bin map for quick lookup of the relevant bin.\n     const size_t __j = (_M_options._M_max_bytes + 1) * sizeof(_Binmap_type);\n     _M_binmap = static_cast<_Binmap_type*>(::operator new(__j));\n@@ -502,11 +502,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  }\n \t*__bp++ = __bint;\n       }\n-      \n+\n     // Initialize _M_bin and its members.\n     void* __v = ::operator new(sizeof(_Bin_record) * _M_bin_size);\n     _M_bin = static_cast<_Bin_record*>(__v);\n-      \n+\n     // If __gthread_active_p() create and initialize the list of\n     // free thread ids. Single threaded applications use thread id 0\n     // directly and have no need for this.\n@@ -577,7 +577,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  {\n \t    _Bin_record& __bin = _M_bin[__n];\n \t    __v = ::operator new(sizeof(_Block_record*) * __max_threads);\n-\t    std::memset(__v, 0, sizeof(_Block_record*) * __max_threads);    \n+\t    std::memset(__v, 0, sizeof(_Block_record*) * __max_threads);\n \t    __bin._M_first = static_cast<_Block_record**>(__v);\n \n \t    __bin._M_address = 0;\n@@ -592,10 +592,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    std::memset(__v, 0, (sizeof(size_t) * __max_threads\n \t\t\t\t + sizeof(_Atomic_word) * __max_threads));\n \t    __bin._M_used = static_cast<size_t*>(__v);\n-\t      \n+\n \t    __v = ::operator new(sizeof(__gthread_mutex_t));\n \t    __bin._M_mutex = static_cast<__gthread_mutex_t*>(__v);\n-\t      \n+\n #ifdef __GTHREAD_MUTEX_INIT\n \t    {\n \t      // Do not copy a POSIX/gthr mutex once in use.\n@@ -656,7 +656,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   }\n \n   // XXX GLIBCXX_ABI Deprecated\n-  void \n+  void\n   __pool<true>::_M_destroy_thread_key(void*) throw () { }\n \n   // XXX GLIBCXX_ABI Deprecated\n@@ -666,7 +666,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     // _M_force_new must not change after the first allocate(),\n     // which in turn calls this method, so if it's false, it's false\n     // forever and we don't need to return here ever again.\n-    if (_M_options._M_force_new) \n+    if (_M_options._M_force_new)\n       {\n \t_M_init = true;\n \treturn;\n@@ -681,7 +681,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__bin_size <<= 1;\n \t++_M_bin_size;\n       }\n-      \n+\n     // Setup the bin map for quick lookup of the relevant bin.\n     const size_t __j = (_M_options._M_max_bytes + 1) * sizeof(_Binmap_type);\n     _M_binmap = static_cast<_Binmap_type*>(::operator new(__j));\n@@ -697,11 +697,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  }\n \t*__bp++ = __bint;\n       }\n-      \n+\n     // Initialize _M_bin and its members.\n     void* __v = ::operator new(sizeof(_Bin_record) * _M_bin_size);\n     _M_bin = static_cast<_Bin_record*>(__v);\n-      \n+\n     // If __gthread_active_p() create and initialize the list of\n     // free thread ids. Single threaded applications use thread id 0\n     // directly and have no need for this.\n@@ -737,7 +737,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t{\n \t\t  // Initialize per thread key to hold pointer to\n \t\t  // _M_thread_freelist.\n-\t\t  __gthread_key_create(&freelist._M_key, \n+\t\t  __gthread_key_create(&freelist._M_key,\n \t\t\t\t       ::_M_destroy_thread_key);\n \t\t  freelist._M_thread_freelist = _M_thread_freelist;\n \t\t}\n@@ -780,16 +780,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    __v = ::operator new(sizeof(size_t) * __max_threads);\n \t    std::memset(__v, 0, sizeof(size_t) * __max_threads);\n \t    __bin._M_free = static_cast<size_t*>(__v);\n-\t      \n-\t    __v = ::operator new(sizeof(size_t) * __max_threads + \n+\n+\t    __v = ::operator new(sizeof(size_t) * __max_threads +\n \t\t\t\t sizeof(_Atomic_word) * __max_threads);\n \t    std::memset(__v, 0, (sizeof(size_t) * __max_threads\n \t\t\t\t + sizeof(_Atomic_word) * __max_threads));\n \t    __bin._M_used = static_cast<size_t*>(__v);\n \n \t    __v = ::operator new(sizeof(__gthread_mutex_t));\n \t    __bin._M_mutex = static_cast<__gthread_mutex_t*>(__v);\n-\t      \n+\n #ifdef __GTHREAD_MUTEX_INIT\n \t    {\n \t      // Do not copy a POSIX/gthr mutex once in use."}, {"sha": "bce7ded59f120e21dc08ba7e2ba32ecb46364f3e", "filename": "libstdc++-v3/src/c++98/pool_allocator.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fpool_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fpool_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fpool_allocator.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -47,7 +47,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Definitions for __pool_alloc_base.\n   __pool_alloc_base::_Obj* volatile*\n   __pool_alloc_base::_M_get_free_list(size_t __bytes) throw ()\n-  { \n+  {\n     size_t __i = ((__bytes + (size_t)_S_align - 1) / (size_t)_S_align - 1);\n     return _S_free_list + __i;\n   }\n@@ -65,7 +65,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     char* __result;\n     size_t __total_bytes = __n * __nobjs;\n     size_t __bytes_left = _S_end_free - _S_start_free;\n-    \n+\n     if (__bytes_left >= __total_bytes)\n       {\n \t__result = _S_start_free;\n@@ -89,7 +89,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    ((_Obj*)(void*)_S_start_free)->_M_free_list_link = *__free_list;\n \t    *__free_list = (_Obj*)(void*)_S_start_free;\n \t  }\n-\t\n+\n \tsize_t __bytes_to_get = (2 * __total_bytes\n \t\t\t\t + _M_round_up(_S_heap_size >> 4));\n \t__try\n@@ -125,7 +125,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn _M_allocate_chunk(__n, __nobjs);\n       }\n   }\n-  \n+\n   // Returns an object of size __n, and optionally adds to \"size\n   // __n\"'s free list.  We assume that __n is properly aligned.  We\n   // hold the allocation lock.\n@@ -138,11 +138,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _Obj* __result;\n     _Obj* __current_obj;\n     _Obj* __next_obj;\n-    \n+\n     if (__nobjs == 1)\n       return __chunk;\n     __free_list = _M_get_free_list(__n);\n-    \n+\n     // Build free list in chunk.\n     __result = (_Obj*)(void*)__chunk;\n     *__free_list = __next_obj = (_Obj*)(void*)(__chunk + __n);\n@@ -162,11 +162,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   }\n \n   __pool_alloc_base::_Obj* volatile __pool_alloc_base::_S_free_list[_S_free_list_size];\n-  \n+\n   char* __pool_alloc_base::_S_start_free = 0;\n-  \n+\n   char* __pool_alloc_base::_S_end_free = 0;\n-  \n+\n   size_t __pool_alloc_base::_S_heap_size = 0;\n \n   // Instantiations."}, {"sha": "bf616962bf63fe1322282349d266e638a7659c09", "filename": "libstdc++-v3/src/c++98/strstream.cc", "status": "modified", "additions": 60, "deletions": 60, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fstrstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fstrstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fstrstream.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -53,61 +53,61 @@ namespace std _GLIBCXX_VISIBILITY(default)\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   strstreambuf::strstreambuf(streamsize initial_capacity)\n-  : _Base(), _M_alloc_fun(0), _M_free_fun(0), _M_dynamic(true), \n+  : _Base(), _M_alloc_fun(0), _M_free_fun(0), _M_dynamic(true),\n     _M_frozen(false), _M_constant(false)\n   {\n     streamsize n = std::max(initial_capacity, streamsize(16));\n-    \n+\n     char* buf = _M_alloc(n);\n-    if (buf) \n+    if (buf)\n       {\n \tsetp(buf, buf + n);\n \tsetg(buf, buf, buf);\n       }\n   }\n \n   strstreambuf::strstreambuf(void* (*alloc_f)(size_t), void (*free_f)(void*))\n-  : _Base(), _M_alloc_fun(alloc_f), _M_free_fun(free_f), _M_dynamic(true), \n+  : _Base(), _M_alloc_fun(alloc_f), _M_free_fun(free_f), _M_dynamic(true),\n     _M_frozen(false), _M_constant(false)\n   {\n     streamsize n = 16;\n \n     char* buf = _M_alloc(n);\n-    if (buf) \n+    if (buf)\n       {\n \tsetp(buf, buf + n);\n \tsetg(buf, buf, buf);\n       }\n   }\n \n   strstreambuf::strstreambuf(char* get, streamsize n, char* put) throw ()\n-  : _Base(), _M_alloc_fun(0), _M_free_fun(0), _M_dynamic(false), \n+  : _Base(), _M_alloc_fun(0), _M_free_fun(0), _M_dynamic(false),\n     _M_frozen(false), _M_constant(false)\n   { _M_setup(get, put, n); }\n \n   strstreambuf::strstreambuf(signed char* get, streamsize n, signed char* put) throw ()\n-  : _Base(), _M_alloc_fun(0), _M_free_fun(0), _M_dynamic(false), \n+  : _Base(), _M_alloc_fun(0), _M_free_fun(0), _M_dynamic(false),\n   _M_frozen(false), _M_constant(false)\n   { _M_setup(reinterpret_cast<char*>(get), reinterpret_cast<char*>(put), n); }\n \n-  strstreambuf::strstreambuf(unsigned char* get, streamsize n, \n+  strstreambuf::strstreambuf(unsigned char* get, streamsize n,\n \t\t\t     unsigned char* put) throw ()\n-  : _Base(), _M_alloc_fun(0), _M_free_fun(0), _M_dynamic(false), \n+  : _Base(), _M_alloc_fun(0), _M_free_fun(0), _M_dynamic(false),\n     _M_frozen(false), _M_constant(false)\n   { _M_setup(reinterpret_cast<char*>(get), reinterpret_cast<char*>(put), n); }\n \n   strstreambuf::strstreambuf(const char* get, streamsize n) throw ()\n-  : _Base(), _M_alloc_fun(0), _M_free_fun(0), _M_dynamic(false), \n+  : _Base(), _M_alloc_fun(0), _M_free_fun(0), _M_dynamic(false),\n     _M_frozen(false), _M_constant(true)\n   { _M_setup(const_cast<char*>(get), 0, n); }\n \n   strstreambuf::strstreambuf(const signed char* get, streamsize n) throw ()\n-  : _Base(), _M_alloc_fun(0), _M_free_fun(0), _M_dynamic(false), \n+  : _Base(), _M_alloc_fun(0), _M_free_fun(0), _M_dynamic(false),\n     _M_frozen(false), _M_constant(true)\n   { _M_setup(reinterpret_cast<char*>(const_cast<signed char*>(get)), 0, n); }\n \n   strstreambuf::strstreambuf(const unsigned char* get, streamsize n) throw ()\n-  : _Base(), _M_alloc_fun(0), _M_free_fun(0), _M_dynamic(false), \n+  : _Base(), _M_alloc_fun(0), _M_free_fun(0), _M_dynamic(false),\n     _M_frozen(false), _M_constant(true)\n   { _M_setup(reinterpret_cast<char*>(const_cast<unsigned char*>(get)), 0, n); }\n \n@@ -117,61 +117,61 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_free(eback());\n   }\n \n-  void \n+  void\n   strstreambuf::freeze(bool frozenflag) throw ()\n   {\n     if (_M_dynamic)\n       _M_frozen = frozenflag;\n   }\n \n-  char* \n+  char*\n   strstreambuf::str() throw ()\n   {\n     freeze(true);\n     return eback();\n   }\n \n-  int \n+  int\n   strstreambuf::pcount() const throw ()\n   { return pptr() ? pptr() - pbase() : 0; }\n \n-  strstreambuf::int_type \n-  strstreambuf::overflow(int_type c) \n+  strstreambuf::int_type\n+  strstreambuf::overflow(int_type c)\n   {\n     if (c == traits_type::eof())\n       return traits_type::not_eof(c);\n-    \n+\n     // Try to expand the buffer.\n-    if (pptr() == epptr() && _M_dynamic && !_M_frozen && !_M_constant) \n+    if (pptr() == epptr() && _M_dynamic && !_M_frozen && !_M_constant)\n       {\n \tptrdiff_t old_size = epptr() - pbase();\n \tptrdiff_t new_size = std::max(ptrdiff_t(2 * old_size), ptrdiff_t(1));\n-\t\n+\n \tchar* buf = _M_alloc(new_size);\n-\tif (buf) \n+\tif (buf)\n \t  {\n \t    memcpy(buf, pbase(), old_size);\n \t    char* old_buffer = pbase();\n \t    bool reposition_get = false;\n \t    ptrdiff_t old_get_offset;\n-\t    if (gptr() != 0) \n+\t    if (gptr() != 0)\n \t      {\n \t\treposition_get = true;\n \t\told_get_offset = gptr() - eback();\n \t      }\n-\t    \n+\n \t    setp(buf, buf + new_size);\n \t    __safe_pbump(old_size);\n \n \t    if (reposition_get)\n-\t      setg(buf, buf + old_get_offset, buf + \n+\t      setg(buf, buf + old_get_offset, buf +\n \t\t   std::max(old_get_offset, old_size));\n \n \t    _M_free(old_buffer);\n \t  }\n       }\n-    \n-    if (pptr() != epptr()) \n+\n+    if (pptr() != epptr())\n       {\n \t*pptr() = c;\n \tpbump(1);\n@@ -181,22 +181,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return traits_type::eof();\n   }\n \n-  strstreambuf::int_type \n+  strstreambuf::int_type\n   strstreambuf::pbackfail(int_type c)\n   {\n-    if (gptr() != eback()) \n+    if (gptr() != eback())\n       {\n-      if (c == _Traits::eof()) \n+      if (c == _Traits::eof())\n \t{\n \t  gbump(-1);\n \t  return _Traits::not_eof(c);\n \t}\n-      else if (c == _Traits::to_int_type(gptr()[-1])) \n+      else if (c == _Traits::to_int_type(gptr()[-1]))\n \t{  // KLUDGE\n \t  gbump(-1);\n \t  return c;\n \t}\n-      else if (!_M_constant) \n+      else if (!_M_constant)\n \t{\n \t  gbump(-1);\n \t  *gptr() = c;\n@@ -206,12 +206,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     return _Traits::eof();\n   }\n \n-  strstreambuf::int_type \n+  strstreambuf::int_type\n   strstreambuf::underflow()\n   {\n     if (gptr() == egptr() && pptr() && pptr() > egptr())\n       setg(eback(), gptr(), pptr());\n-    \n+\n     if (gptr() != egptr())\n       return (unsigned char) *gptr();\n     else\n@@ -223,13 +223,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return this; }\n \n   strstreambuf::pos_type\n-  strstreambuf::seekoff(off_type off, ios_base::seekdir dir, \n+  strstreambuf::seekoff(off_type off, ios_base::seekdir dir,\n \t\t\tios_base::openmode mode)\n   {\n     bool do_get = false;\n     bool do_put = false;\n \n-    if ((mode & (ios_base::in | ios_base::out)) \n+    if ((mode & (ios_base::in | ios_base::out))\n \t== (ios_base::in | ios_base::out) &&\n \t(dir == ios_base::beg || dir == ios_base::end))\n       do_get = do_put = true;\n@@ -247,7 +247,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     char* seekhigh = epptr() ? epptr() : egptr();\n \n     off_type newoff;\n-    switch (dir) \n+    switch (dir)\n       {\n       case ios_base::beg:\n \tnewoff = 0;\n@@ -261,25 +261,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       default:\n \treturn pos_type(off_type(-1));\n       }\n-    \n+\n     off += newoff;\n     if (off < 0 || off > seekhigh - seeklow)\n       return pos_type(off_type(-1));\n \n-    if (do_put) \n+    if (do_put)\n       {\n-\tif (seeklow + off < pbase()) \n+\tif (seeklow + off < pbase())\n \t  {\n \t    setp(seeklow, epptr());\n \t    __safe_pbump(off);\n \t  }\n-\telse \n+\telse\n \t  {\n \t    setp(pbase(), epptr());\n \t    __safe_pbump(off - (pbase() - seeklow));\n \t  }\n       }\n-    if (do_get) \n+    if (do_get)\n       {\n \tif (off <= egptr() - seeklow)\n \t  setg(seeklow, seeklow + off, egptr());\n@@ -295,7 +295,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   strstreambuf::seekpos(pos_type pos, ios_base::openmode mode)\n   { return seekoff(pos - pos_type(off_type(0)), ios_base::beg, mode); }\n \n-  char* \n+  char*\n   strstreambuf::_M_alloc(size_t n)\n   {\n     if (_M_alloc_fun)\n@@ -304,7 +304,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return new char[n];\n   }\n \n-  void \n+  void\n   strstreambuf::_M_free(char* p)\n   {\n     if (p)\n@@ -316,19 +316,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n   }\n \n-  void \n+  void\n   strstreambuf::_M_setup(char* get, char* put, streamsize n) throw ()\n   {\n-    if (get) \n+    if (get)\n       {\n \tsize_t N = n > 0 ? size_t(n) : n == 0 ? strlen(get) : size_t(INT_MAX);\n-\t\n-\tif (put) \n+\n+\tif (put)\n \t  {\n \t    setg(get, get, put);\n \t    setp(put, put + N);\n \t  }\n-\telse \n+\telse\n \t  setg(get, get, get + N);\n       }\n   }\n@@ -351,11 +351,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   istrstream::~istrstream() { }\n \n-  strstreambuf* \n+  strstreambuf*\n   istrstream::rdbuf() const throw ()\n   { return const_cast<strstreambuf*>(&_M_buf); }\n \n-  char* \n+  char*\n   istrstream::str() throw ()\n   { return _M_buf.str(); }\n \n@@ -364,25 +364,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { basic_ios<char>::init(&_M_buf); }\n \n   ostrstream::ostrstream(char* s, int n, ios_base::openmode mode)\n-  : basic_ios<char>(), basic_ostream<char>(0), \n+  : basic_ios<char>(), basic_ostream<char>(0),\n     _M_buf(s, n, mode & ios_base::app ? s + strlen(s) : s)\n   { basic_ios<char>::init(&_M_buf); }\n \n   ostrstream::~ostrstream() {}\n \n-  strstreambuf* \n+  strstreambuf*\n   ostrstream::rdbuf() const throw ()\n   { return const_cast<strstreambuf*>(&_M_buf); }\n \n-  void \n+  void\n   ostrstream::freeze(bool freezeflag) throw ()\n   { _M_buf.freeze(freezeflag); }\n \n-  char* \n+  char*\n   ostrstream::str() throw ()\n   { return _M_buf.str(); }\n \n-  int \n+  int\n   ostrstream::pcount() const throw ()\n   { return _M_buf.pcount(); }\n \n@@ -391,25 +391,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { basic_ios<char>::init(&_M_buf); }\n \n   strstream::strstream(char* s, int n, ios_base::openmode mode)\n-  : basic_ios<char>(), basic_iostream<char>(0), \n+  : basic_ios<char>(), basic_iostream<char>(0),\n     _M_buf(s, n, mode & ios_base::app ? s + strlen(s) : s)\n   { basic_ios<char>::init(&_M_buf); }\n \n   strstream::~strstream() { }\n \n-  strstreambuf* \n+  strstreambuf*\n   strstream::rdbuf() const throw ()\n   { return const_cast<strstreambuf*>(&_M_buf); }\n \n-  void \n+  void\n   strstream::freeze(bool freezeflag) throw ()\n   { _M_buf.freeze(freezeflag); }\n \n-  int \n+  int\n   strstream::pcount() const throw ()\n   { return _M_buf.pcount(); }\n \n-  char* \n+  char*\n   strstream::str() throw ()\n   { return _M_buf.str(); }\n "}, {"sha": "d771cd8e66b9abd323221f16e7467b95fe4faafe", "filename": "libstdc++-v3/src/c++98/tree.cc", "status": "modified", "additions": 68, "deletions": 68, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Ftree.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -59,16 +59,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   static _Rb_tree_node_base*\n   local_Rb_tree_increment(_Rb_tree_node_base* __x) throw ()\n   {\n-    if (__x->_M_right != 0) \n+    if (__x->_M_right != 0)\n       {\n         __x = __x->_M_right;\n         while (__x->_M_left != 0)\n           __x = __x->_M_left;\n       }\n-    else \n+    else\n       {\n         _Rb_tree_node_base* __y = __x->_M_parent;\n-        while (__x == __y->_M_right) \n+        while (__x == __y->_M_right)\n           {\n             __x = __y;\n             __y = __y->_M_parent;\n@@ -94,20 +94,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   static _Rb_tree_node_base*\n   local_Rb_tree_decrement(_Rb_tree_node_base* __x) throw ()\n   {\n-    if (__x->_M_color == _S_red \n+    if (__x->_M_color == _S_red\n         && __x->_M_parent->_M_parent == __x)\n       __x = __x->_M_right;\n-    else if (__x->_M_left != 0) \n+    else if (__x->_M_left != 0)\n       {\n         _Rb_tree_node_base* __y = __x->_M_left;\n         while (__y->_M_right != 0)\n           __y = __y->_M_right;\n         __x = __y;\n       }\n-    else \n+    else\n       {\n         _Rb_tree_node_base* __y = __x->_M_parent;\n-        while (__x == __y->_M_left) \n+        while (__x == __y->_M_left)\n           {\n             __x = __y;\n             __y = __y->_M_parent;\n@@ -129,8 +129,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     return local_Rb_tree_decrement(const_cast<_Rb_tree_node_base*>(__x));\n   }\n \n-  static void \n-  local_Rb_tree_rotate_left(_Rb_tree_node_base* const __x, \n+  static void\n+  local_Rb_tree_rotate_left(_Rb_tree_node_base* const __x,\n \t\t             _Rb_tree_node_base*& __root)\n   {\n     _Rb_tree_node_base* const __y = __x->_M_right;\n@@ -139,7 +139,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     if (__y->_M_left !=0)\n       __y->_M_left->_M_parent = __x;\n     __y->_M_parent = __x->_M_parent;\n-    \n+\n     if (__x == __root)\n       __root = __y;\n     else if (__x == __x->_M_parent->_M_left)\n@@ -153,15 +153,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /* Static keyword was missing on _Rb_tree_rotate_left.\n      Export the symbol for backward compatibility until\n      next ABI change.  */\n-  void \n-  _Rb_tree_rotate_left(_Rb_tree_node_base* const __x, \n+  void\n+  _Rb_tree_rotate_left(_Rb_tree_node_base* const __x,\n \t\t       _Rb_tree_node_base*& __root)\n   {\n     local_Rb_tree_rotate_left (__x, __root);\n   }\n \n-  static void \n-  local_Rb_tree_rotate_right(_Rb_tree_node_base* const __x, \n+  static void\n+  local_Rb_tree_rotate_right(_Rb_tree_node_base* const __x,\n \t\t\t     _Rb_tree_node_base*& __root)\n   {\n     _Rb_tree_node_base* const __y = __x->_M_left;\n@@ -184,14 +184,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /* Static keyword was missing on _Rb_tree_rotate_right\n      Export the symbol for backward compatibility until\n      next ABI change.  */\n-  void \n-  _Rb_tree_rotate_right(_Rb_tree_node_base* const __x, \n+  void\n+  _Rb_tree_rotate_right(_Rb_tree_node_base* const __x,\n \t\t\t_Rb_tree_node_base*& __root)\n   {\n     local_Rb_tree_rotate_right (__x, __root);\n   }\n \n-  void \n+  void\n   _Rb_tree_insert_and_rebalance(const bool          __insert_left,\n                                 _Rb_tree_node_base* __x,\n                                 _Rb_tree_node_base* __p,\n@@ -229,24 +229,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n           __header._M_right = __x; // maintain rightmost pointing to max node\n       }\n     // Rebalance.\n-    while (__x != __root \n-\t   && __x->_M_parent->_M_color == _S_red) \n+    while (__x != __root\n+\t   && __x->_M_parent->_M_color == _S_red)\n       {\n \t_Rb_tree_node_base* const __xpp = __x->_M_parent->_M_parent;\n \n-\tif (__x->_M_parent == __xpp->_M_left) \n+\tif (__x->_M_parent == __xpp->_M_left)\n \t  {\n \t    _Rb_tree_node_base* const __y = __xpp->_M_right;\n-\t    if (__y && __y->_M_color == _S_red) \n+\t    if (__y && __y->_M_color == _S_red)\n \t      {\n \t\t__x->_M_parent->_M_color = _S_black;\n \t\t__y->_M_color = _S_black;\n \t\t__xpp->_M_color = _S_red;\n \t\t__x = __xpp;\n \t      }\n-\t    else \n+\t    else\n \t      {\n-\t\tif (__x == __x->_M_parent->_M_right) \n+\t\tif (__x == __x->_M_parent->_M_right)\n \t\t  {\n \t\t    __x = __x->_M_parent;\n \t\t    local_Rb_tree_rotate_left(__x, __root);\n@@ -256,19 +256,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\tlocal_Rb_tree_rotate_right(__xpp, __root);\n \t      }\n \t  }\n-\telse \n+\telse\n \t  {\n \t    _Rb_tree_node_base* const __y = __xpp->_M_left;\n-\t    if (__y && __y->_M_color == _S_red) \n+\t    if (__y && __y->_M_color == _S_red)\n \t      {\n \t\t__x->_M_parent->_M_color = _S_black;\n \t\t__y->_M_color = _S_black;\n \t\t__xpp->_M_color = _S_red;\n \t\t__x = __xpp;\n \t      }\n-\t    else \n+\t    else\n \t      {\n-\t\tif (__x == __x->_M_parent->_M_left) \n+\t\tif (__x == __x->_M_parent->_M_left)\n \t\t  {\n \t\t    __x = __x->_M_parent;\n \t\t    local_Rb_tree_rotate_right(__x, __root);\n@@ -283,7 +283,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   }\n \n   _Rb_tree_node_base*\n-  _Rb_tree_rebalance_for_erase(_Rb_tree_node_base* const __z, \n+  _Rb_tree_rebalance_for_erase(_Rb_tree_node_base* const __z,\n \t\t\t       _Rb_tree_node_base& __header) throw ()\n   {\n     _Rb_tree_node_base *& __root = __header._M_parent;\n@@ -298,20 +298,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     else\n       if (__y->_M_right == 0)  // __z has exactly one non-null child. y == z.\n \t__x = __y->_M_left;    // __x is not null.\n-      else \n+      else\n \t{\n \t  // __z has two non-null children.  Set __y to\n \t  __y = __y->_M_right;   //   __z's successor.  __x might be null.\n \t  while (__y->_M_left != 0)\n \t    __y = __y->_M_left;\n \t  __x = __y->_M_right;\n \t}\n-    if (__y != __z) \n+    if (__y != __z)\n       {\n \t// relink y in place of z.  y is z's successor\n-\t__z->_M_left->_M_parent = __y; \n+\t__z->_M_left->_M_parent = __y;\n \t__y->_M_left = __z->_M_left;\n-\tif (__y != __z->_M_right) \n+\tif (__y != __z->_M_right)\n \t  {\n \t    __x_parent = __y->_M_parent;\n \t    if (__x) __x->_M_parent = __y->_M_parent;\n@@ -320,73 +320,73 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    __z->_M_right->_M_parent = __y;\n \t  }\n \telse\n-\t  __x_parent = __y;  \n+\t  __x_parent = __y;\n \tif (__root == __z)\n \t  __root = __y;\n \telse if (__z->_M_parent->_M_left == __z)\n \t  __z->_M_parent->_M_left = __y;\n-\telse \n+\telse\n \t  __z->_M_parent->_M_right = __y;\n \t__y->_M_parent = __z->_M_parent;\n \tstd::swap(__y->_M_color, __z->_M_color);\n \t__y = __z;\n \t// __y now points to node to be actually deleted\n       }\n-    else \n+    else\n       {                        // __y == __z\n \t__x_parent = __y->_M_parent;\n-\tif (__x) \n-\t  __x->_M_parent = __y->_M_parent;   \n+\tif (__x)\n+\t  __x->_M_parent = __y->_M_parent;\n \tif (__root == __z)\n \t  __root = __x;\n-\telse \n+\telse\n \t  if (__z->_M_parent->_M_left == __z)\n \t    __z->_M_parent->_M_left = __x;\n \t  else\n \t    __z->_M_parent->_M_right = __x;\n-\tif (__leftmost == __z) \n+\tif (__leftmost == __z)\n \t  {\n \t    if (__z->_M_right == 0)        // __z->_M_left must be null also\n \t      __leftmost = __z->_M_parent;\n \t    // makes __leftmost == _M_header if __z == __root\n \t    else\n \t      __leftmost = _Rb_tree_node_base::_S_minimum(__x);\n \t  }\n-\tif (__rightmost == __z)  \n+\tif (__rightmost == __z)\n \t  {\n \t    if (__z->_M_left == 0)         // __z->_M_right must be null also\n-\t      __rightmost = __z->_M_parent;  \n+\t      __rightmost = __z->_M_parent;\n \t    // makes __rightmost == _M_header if __z == __root\n \t    else                      // __x == __z->_M_left\n \t      __rightmost = _Rb_tree_node_base::_S_maximum(__x);\n \t  }\n       }\n-    if (__y->_M_color != _S_red) \n-      { \n+    if (__y->_M_color != _S_red)\n+      {\n \twhile (__x != __root && (__x == 0 || __x->_M_color == _S_black))\n-\t  if (__x == __x_parent->_M_left) \n+\t  if (__x == __x_parent->_M_left)\n \t    {\n \t      _Rb_tree_node_base* __w = __x_parent->_M_right;\n-\t      if (__w->_M_color == _S_red) \n+\t      if (__w->_M_color == _S_red)\n \t\t{\n \t\t  __w->_M_color = _S_black;\n \t\t  __x_parent->_M_color = _S_red;\n \t\t  local_Rb_tree_rotate_left(__x_parent, __root);\n \t\t  __w = __x_parent->_M_right;\n \t\t}\n-\t      if ((__w->_M_left == 0 || \n+\t      if ((__w->_M_left == 0 ||\n \t\t   __w->_M_left->_M_color == _S_black) &&\n-\t\t  (__w->_M_right == 0 || \n-\t\t   __w->_M_right->_M_color == _S_black)) \n+\t\t  (__w->_M_right == 0 ||\n+\t\t   __w->_M_right->_M_color == _S_black))\n \t\t{\n \t\t  __w->_M_color = _S_red;\n \t\t  __x = __x_parent;\n \t\t  __x_parent = __x_parent->_M_parent;\n-\t\t} \n-\t      else \n+\t\t}\n+\t      else\n \t\t{\n-\t\t  if (__w->_M_right == 0 \n-\t\t      || __w->_M_right->_M_color == _S_black) \n+\t\t  if (__w->_M_right == 0\n+\t\t      || __w->_M_right->_M_color == _S_black)\n \t\t    {\n \t\t      __w->_M_left->_M_color = _S_black;\n \t\t      __w->_M_color = _S_red;\n@@ -395,35 +395,35 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t    }\n \t\t  __w->_M_color = __x_parent->_M_color;\n \t\t  __x_parent->_M_color = _S_black;\n-\t\t  if (__w->_M_right) \n+\t\t  if (__w->_M_right)\n \t\t    __w->_M_right->_M_color = _S_black;\n \t\t  local_Rb_tree_rotate_left(__x_parent, __root);\n \t\t  break;\n \t\t}\n-\t    } \n-\t  else \n-\t    {   \n+\t    }\n+\t  else\n+\t    {\n \t      // same as above, with _M_right <-> _M_left.\n \t      _Rb_tree_node_base* __w = __x_parent->_M_left;\n-\t      if (__w->_M_color == _S_red) \n+\t      if (__w->_M_color == _S_red)\n \t\t{\n \t\t  __w->_M_color = _S_black;\n \t\t  __x_parent->_M_color = _S_red;\n \t\t  local_Rb_tree_rotate_right(__x_parent, __root);\n \t\t  __w = __x_parent->_M_left;\n \t\t}\n-\t      if ((__w->_M_right == 0 || \n+\t      if ((__w->_M_right == 0 ||\n \t\t   __w->_M_right->_M_color == _S_black) &&\n-\t\t  (__w->_M_left == 0 || \n-\t\t   __w->_M_left->_M_color == _S_black)) \n+\t\t  (__w->_M_left == 0 ||\n+\t\t   __w->_M_left->_M_color == _S_black))\n \t\t{\n \t\t  __w->_M_color = _S_red;\n \t\t  __x = __x_parent;\n \t\t  __x_parent = __x_parent->_M_parent;\n-\t\t} \n-\t      else \n+\t\t}\n+\t      else\n \t\t{\n-\t\t  if (__w->_M_left == 0 || __w->_M_left->_M_color == _S_black) \n+\t\t  if (__w->_M_left == 0 || __w->_M_left->_M_color == _S_black)\n \t\t    {\n \t\t      __w->_M_right->_M_color = _S_black;\n \t\t      __w->_M_color = _S_red;\n@@ -432,7 +432,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t    }\n \t\t  __w->_M_color = __x_parent->_M_color;\n \t\t  __x_parent->_M_color = _S_black;\n-\t\t  if (__w->_M_left) \n+\t\t  if (__w->_M_left)\n \t\t    __w->_M_left->_M_color = _S_black;\n \t\t  local_Rb_tree_rotate_right(__x_parent, __root);\n \t\t  break;\n@@ -450,14 +450,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     if (__node == 0)\n       return 0;\n     unsigned int __sum = 0;\n-    do \n+    do\n       {\n-\tif (__node->_M_color == _S_black) \n+\tif (__node->_M_color == _S_black)\n \t  ++__sum;\n-\tif (__node == __root) \n+\tif (__node == __root)\n \t  break;\n \t__node = __node->_M_parent;\n-      } \n+      }\n     while (1);\n     return __sum;\n   }"}, {"sha": "7ca8fe98ceb5b2c4e0a8b82cc0d0ba80146dc53d", "filename": "libstdc++-v3/src/c++98/valarray.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fvalarray.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fvalarray.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fvalarray.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -35,10 +35,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Some explicit instantiations.\n   template void\n      __valarray_fill(size_t* __restrict__, size_t, const size_t&);\n-  \n+\n   template void\n      __valarray_copy(const size_t* __restrict__, size_t, size_t* __restrict__);\n-  \n+\n   template valarray<size_t>::valarray(size_t);\n   template valarray<size_t>::valarray(const valarray<size_t>&);\n   template valarray<size_t>::~valarray();\n@@ -55,7 +55,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     valarray<size_t>& __t = const_cast<valarray<size_t>&>(__a);\n     return __valarray_product(&__t[0], &__t[0] + __n);\n   }\n-  \n+\n   // Map a gslice, described by its multidimensional LENGTHS\n   // and corresponding STRIDES, to a linear array of INDEXES\n   // for the purpose of indexing a flat, one-dimensional array\n@@ -96,12 +96,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n           }\n       }\n   }\n-  \n+\n   gslice::_Indexer::_Indexer(size_t __o, const valarray<size_t>& __l,\n                              const valarray<size_t>& __s)\n   : _M_count(1), _M_start(__o), _M_size(__l), _M_stride(__s),\n     _M_index(__l.size() == 0 ? 0 : __valarray_product(__l))\n-  { __gslice_to_index(__o, __l, __s, _M_index); }  \n+  { __gslice_to_index(__o, __l, __s, _M_index); }\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "b599640fb9b708b6e50dd6e942c3dd033deebefd", "filename": "libstdc++-v3/src/filesystem/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2FMakefile.am?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -73,7 +73,7 @@ AM_MAKEFLAGS = \\\n # correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n # attempt to infer which configuration to use.\n-# \n+#\n # The second tag argument, `--tag disable-shared` means that libtool\n # only compiles each source once, for static objects. In actuality,\n # glibcxx_lt_pic_flag and glibcxx_compiler_shared_flag are added to"}, {"sha": "7e77aa55b8bf58b2432b17956799a6d77811d6ab", "filename": "libstdc++-v3/src/filesystem/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2FMakefile.in?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -399,7 +399,7 @@ AM_MAKEFLAGS = \\\n # correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n # attempt to infer which configuration to use.\n-# \n+#\n # The second tag argument, `--tag disable-shared` means that libtool\n # only compiles each source once, for static objects. In actuality,\n # glibcxx_lt_pic_flag and glibcxx_compiler_shared_flag are added to"}, {"sha": "0847a5125fd4b86a0cccb7baa8ab633e9cc562f0", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/enable_shared_from_this/not_shared.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fenable_shared_from_this%2Fnot_shared.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fenable_shared_from_this%2Fnot_shared.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fenable_shared_from_this%2Fnot_shared.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -50,7 +50,7 @@ test01()\n   return 0;\n }\n \n-int \n+int\n main()\n {\n   test01();"}, {"sha": "be7ae4fdba165bb4d147cf19d48e03d88e4719a0", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/enable_shared_from_this/not_shared2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fenable_shared_from_this%2Fnot_shared2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fenable_shared_from_this%2Fnot_shared2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fenable_shared_from_this%2Fnot_shared2.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -52,7 +52,7 @@ test01()\n   return 0;\n }\n \n-int \n+int\n main()\n {\n   test01();"}, {"sha": "c137197ea630b0e2720b9c8d6dcc95a7ff1a892d", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/enable_shared_from_this/not_shared3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fenable_shared_from_this%2Fnot_shared3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fenable_shared_from_this%2Fnot_shared3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fenable_shared_from_this%2Fnot_shared3.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -54,7 +54,7 @@ test01()\n }\n \n \n-int \n+int\n main()\n {\n   test01();"}, {"sha": "74944191fd03d4e82b365f45fd4fa337691a2069", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/enable_shared_from_this/shared.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fenable_shared_from_this%2Fshared.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fenable_shared_from_this%2Fshared.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fenable_shared_from_this%2Fshared.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -37,7 +37,7 @@ test01()\n   return 0;\n }\n \n-int \n+int\n main()\n {\n   test01();"}, {"sha": "52ba876833d13226f857aa94cb50ce20b0710597", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/enable_shared_from_this/still_shared.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fenable_shared_from_this%2Fstill_shared.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fenable_shared_from_this%2Fstill_shared.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fenable_shared_from_this%2Fstill_shared.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -46,7 +46,7 @@ test01()\n   return 0;\n }\n \n-int \n+int\n main()\n {\n   test01();"}, {"sha": "7b5e99a6d235b20ce6764f298b61d637dda95d70", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/shared_ptr/assign/assign.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fassign%2Fassign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fassign%2Fassign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fassign%2Fassign.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -62,7 +62,7 @@ test01()\n   VERIFY( A::dtor_count == 1 );\n }\n \n-int \n+int\n main()\n {\n   test01();"}, {"sha": "6d607b438e008938d135f8ac3369a02b0f61c59e", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/shared_ptr/assign/auto_ptr.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fassign%2Fauto_ptr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fassign%2Fauto_ptr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fassign%2Fauto_ptr.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -77,7 +77,7 @@ test01()\n   return 0;\n }\n \n-int \n+int\n main()\n {\n   test01();"}, {"sha": "6f9c0323b6f7781124d89a094d474e63e0e9cb2a", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/shared_ptr/assign/auto_ptr_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fassign%2Fauto_ptr_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fassign%2Fauto_ptr_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fassign%2Fauto_ptr_neg.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -42,7 +42,7 @@ test01()\n   return 0;\n }\n \n-int \n+int\n main()\n {\n   test01();"}, {"sha": "01178a8b9ee72f2bcaf559a526274307f4a7a9e0", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/shared_ptr/assign/auto_ptr_rvalue_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fassign%2Fauto_ptr_rvalue_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fassign%2Fauto_ptr_rvalue_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fassign%2Fauto_ptr_rvalue_neg.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -41,7 +41,7 @@ test01()\n   return 0;\n }\n \n-int \n+int\n main()\n {\n   test01();"}, {"sha": "9c3b30f17e50453e55fb6569b08aaa0278d35a36", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/shared_ptr/assign/shared_ptr.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fassign%2Fshared_ptr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fassign%2Fshared_ptr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fassign%2Fshared_ptr.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -86,7 +86,7 @@ test01()\n   VERIFY( B::dtor_count == 0 );\n }\n \n-int \n+int\n main()\n {\n   test01();"}, {"sha": "a41a806e9a90def728387ee4d8aeeb69c4d0c207", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/shared_ptr/assign/shared_ptr_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fassign%2Fshared_ptr_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fassign%2Fshared_ptr_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fassign%2Fshared_ptr_neg.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -40,7 +40,7 @@ test01()\n   return 0;\n }\n \n-int \n+int\n main()\n {\n   test01();"}, {"sha": "25dc08939d2b9840af9a90bfd2132de82dc56b78", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/shared_ptr/casts/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fcasts%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fcasts%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fcasts%2F1.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -41,5 +41,5 @@ int main()\n \n   check_ret_type<shared_ptr<void> >(static_pointer_cast<void>(spd));\n   check_ret_type<shared_ptr<int> >(const_pointer_cast<int>(spci));\n-  check_ret_type<shared_ptr<MyDP> >(static_pointer_cast<MyDP>(spa));  \n+  check_ret_type<shared_ptr<MyDP> >(static_pointer_cast<MyDP>(spa));\n }"}, {"sha": "9e3856660ce9a7d955df67a029b1fa14888d2a9e", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/shared_ptr/comparison/cmp.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fcomparison%2Fcmp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fcomparison%2Fcmp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fcomparison%2Fcmp.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -73,7 +73,7 @@ test02()\n   return 0;\n }\n \n-int \n+int\n main()\n {\n   test01();"}, {"sha": "d5ab66b13899a625c36646b5a7fa9433f127163a", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/shared_ptr/cons/auto_ptr_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fcons%2Fauto_ptr_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fcons%2Fauto_ptr_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fcons%2Fauto_ptr_neg.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -40,7 +40,7 @@ test01()\n   return 0;\n }\n \n-int \n+int\n main()\n {\n   test01();"}, {"sha": "b2003d9cb0e7ce77711d44e14aca199bbe4eadc8", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/shared_ptr/misc/io.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fmisc%2Fio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fmisc%2Fio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fmisc%2Fio.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -42,7 +42,7 @@ test01()\n   return 0;\n }\n \n-int \n+int\n main()\n {\n   test01();"}, {"sha": "8d4734bce5b4fb7347b6b4131fdf860b8c8ef786", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/shared_ptr/misc/swap.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fmisc%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fmisc%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fmisc%2Fswap.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -41,7 +41,7 @@ test01()\n   return 0;\n }\n \n-int \n+int\n main()\n {\n   test01();"}, {"sha": "9127a37f72c8312244695bef1561fc53d6e83269", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/shared_ptr/modifiers/reset.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fmodifiers%2Freset.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fmodifiers%2Freset.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fmodifiers%2Freset.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -75,7 +75,7 @@ test03()\n   VERIFY( D::delete_count == 1 );\n \n   return 0;\n-}   \n+}\n \n int\n main()"}, {"sha": "411ba71161537f0a68b5ac96755aed501ecb8b3d", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/shared_ptr/modifiers/swap.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fmodifiers%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fmodifiers%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fmodifiers%2Fswap.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -41,7 +41,7 @@ test01()\n   return 0;\n }\n \n-int \n+int\n main()\n {\n   test01();"}, {"sha": "751729bc6b6808d78e044b37e9678fce6c5c3229", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/shared_ptr/modifiers/swap_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fmodifiers%2Fswap_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fmodifiers%2Fswap_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fmodifiers%2Fswap_neg.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -39,7 +39,7 @@ test01()\n   return 0;\n }\n \n-int \n+int\n main()\n {\n   test01();"}, {"sha": "f89970ae760944d4447c14acaa31de53b5539e1d", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/shared_ptr/observers/bool_conv.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fobservers%2Fbool_conv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fobservers%2Fbool_conv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fobservers%2Fbool_conv.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -69,7 +69,7 @@ test03()\n }\n \n \n-int \n+int\n main()\n {\n   test01();"}, {"sha": "558cc62fc300df3e6fcbe9ca2260729f5dd53ba2", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/shared_ptr/observers/get.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fobservers%2Fget.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fobservers%2Fget.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fobservers%2Fget.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -69,7 +69,7 @@ test03()\n }\n \n \n-int \n+int\n main()\n {\n   test01();"}, {"sha": "3a630d8b9c4aa2dec3dcb801b94b944efbe2ab0b", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/shared_ptr/observers/unique.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fobservers%2Funique.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fobservers%2Funique.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fobservers%2Funique.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -69,7 +69,7 @@ test03()\n }\n \n \n-int \n+int\n main()\n {\n   test01();"}, {"sha": "228b2dd35e91e14714769e9a79fb0fe28300e32b", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/shared_ptr/observers/use_count.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fobservers%2Fuse_count.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fobservers%2Fuse_count.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fobservers%2Fuse_count.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -68,7 +68,7 @@ test03()\n }\n \n \n-int \n+int\n main()\n {\n   test01();"}, {"sha": "066811afaeab038c652278489c7521881a3db081", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/shared_ptr/thread/default_weaktoshared.cc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fthread%2Fdefault_weaktoshared.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fthread%2Fdefault_weaktoshared.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fthread%2Fdefault_weaktoshared.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -73,7 +73,7 @@ struct shared_and_weak_pools\n {\n   sp_vector_t& shared_pool;\n   wp_vector_t& weak_pool;\n-  \n+\n   shared_and_weak_pools(sp_vector_t& _shared_pool, wp_vector_t& _weak_pool)\n     : shared_pool(_shared_pool), weak_pool(_weak_pool)\n     { }\n@@ -88,10 +88,10 @@ void* thread_hammer_and_kill(void* opaque_pools)\n     0x9908b0dful, 11, 7,\n     0x9d2c5680ul, 15,\n     0xefc60000ul, 18> rng;\n-  \n+\n   sp_vector_t::iterator cur_shared = pools.shared_pool.begin();\n   wp_vector_t::iterator cur_weak = pools.weak_pool.begin();\n-  \n+\n   for (unsigned int i = 0; i < HAMMER_REPEAT; ++i)\n     {\n       try\n@@ -104,7 +104,7 @@ void* thread_hammer_and_kill(void* opaque_pools)\n         if (cur_weak == pools.weak_pool.end())\n           break;\n       }\n-      \n+\n       if (rng() % KILL_ONE_IN == 0)\n       {\n         cur_shared->reset();\n@@ -146,20 +146,20 @@ test01()\n {\n   bool test __attribute__((unused)) = true;\n   sp_vector_t obj_pool(POOL_SIZE);\n-  \n+\n   for(sp_vector_t::iterator cur = obj_pool.begin(); cur != obj_pool.end(); ++cur)\n   {\n     cur->reset(new A);\n   }\n   // Obtain weak references.\n   std::vector<wp_vector_t> weak_pool(HAMMER_MAX_THREADS, wp_vector_t(obj_pool.begin(), obj_pool.end()));\n-  \n+\n   // Launch threads with pointer to weak reference.\n   pthread_t threads[HAMMER_MAX_THREADS];\n #if defined(__sun) && defined(__svr4__) && _XOPEN_VERSION >= 500\n   pthread_setconcurrency (HAMMER_MAX_THREADS);\n #endif\n-  \n+\n   pthread_attr_t tattr;\n   pthread_attr_init(&tattr);\n \n@@ -179,13 +179,13 @@ test01()\n \tstd::abort();\n     }\n   obj_pool.clear();\n-  \n+\n   VERIFY( A::counter == 0 );\n-  \n+\n   return 0;\n }\n \n-int \n+int\n main()\n {\n   test01();"}, {"sha": "4ba74345cfa356f1d2b19d61468218aa8ec9115e", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/shared_ptr/thread/mutex_weaktoshared.cc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fthread%2Fmutex_weaktoshared.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fthread%2Fmutex_weaktoshared.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fthread%2Fmutex_weaktoshared.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -75,7 +75,7 @@ struct shared_and_weak_pools\n {\n   sp_vector_t& shared_pool;\n   wp_vector_t& weak_pool;\n-  \n+\n   shared_and_weak_pools(sp_vector_t& _shared_pool, wp_vector_t& _weak_pool)\n     : shared_pool(_shared_pool), weak_pool(_weak_pool)\n     { }\n@@ -90,10 +90,10 @@ void* thread_hammer_and_kill(void* opaque_pools)\n     0x9908b0dful, 11, 7,\n     0x9d2c5680ul, 15,\n     0xefc60000ul, 18> rng;\n-  \n+\n   sp_vector_t::iterator cur_shared = pools.shared_pool.begin();\n   wp_vector_t::iterator cur_weak = pools.weak_pool.begin();\n-  \n+\n   for (unsigned int i = 0; i < HAMMER_REPEAT; ++i)\n     {\n       try\n@@ -106,7 +106,7 @@ void* thread_hammer_and_kill(void* opaque_pools)\n         if (cur_weak == pools.weak_pool.end())\n           break;\n       }\n-      \n+\n       if (rng() % KILL_ONE_IN == 0)\n       {\n         cur_shared->reset();\n@@ -148,20 +148,20 @@ test01()\n {\n   bool test __attribute__((unused)) = true;\n   sp_vector_t obj_pool(POOL_SIZE);\n-  \n+\n   for(sp_vector_t::iterator cur = obj_pool.begin(); cur != obj_pool.end(); ++cur)\n   {\n     cur->reset(new A);\n   }\n   // Obtain weak references.\n   std::vector<wp_vector_t> weak_pool(HAMMER_MAX_THREADS, wp_vector_t(obj_pool.begin(), obj_pool.end()));\n-  \n+\n   // Launch threads with pointer to weak reference.\n   pthread_t threads[HAMMER_MAX_THREADS];\n #if defined(__sun) && defined(__svr4__) && _XOPEN_VERSION >= 500\n   pthread_setconcurrency (HAMMER_MAX_THREADS);\n #endif\n-  \n+\n   pthread_attr_t tattr;\n   pthread_attr_init(&tattr);\n \n@@ -181,13 +181,13 @@ test01()\n \tstd::abort();\n     }\n   obj_pool.clear();\n-  \n+\n   VERIFY( A::counter == 0 );\n-  \n+\n   return 0;\n }\n \n-int \n+int\n main()\n {\n   test01();"}, {"sha": "5d675a905cc76b291e336d75beb84daf5b8b9f9e", "filename": "libstdc++-v3/testsuite/tr1/3_function_objects/headers/functional/synopsis.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Fheaders%2Ffunctional%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Fheaders%2Ffunctional%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Fheaders%2Ffunctional%2Fsynopsis.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -37,10 +37,10 @@ namespace tr1 {\n   template<class T> struct is_placeholder;\n \n #if 0\n-  template<class F, class T1, ..., class TN> \n+  template<class F, class T1, ..., class TN>\n   unspecified bind(F f, T1 t1, ..., TN tN);\n \n-  template<class R, class F, class T1, ..., class Tn > \n+  template<class R, class F, class T1, ..., class Tn >\n   unspecified bind(F f, T1 t1, ..., TN tN);\n \n   namespace placeholders {"}, {"sha": "7edf0adacad3591063ff4a62ee73ee76bf6b2503", "filename": "libstdc++-v3/testsuite/tr1/3_function_objects/mem_fn.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Fmem_fn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Fmem_fn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Fmem_fn.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -68,7 +68,7 @@ void test01(int r = 0)\n   const int& bypc = mem_fn(&X::bar)(ypc);\n   const int& byd = mem_fn(&X::bar)(yd);\n   const int& bydc = mem_fn(&X::bar)(ydc);\n-  \n+\n   // Avoid unused variable warnings.\n   r = bx + bxc + bxp + bxpc + bxd + bxdc + by + byc + byp + bypc + byd + bydc;\n }"}, {"sha": "3a674e3339c0be09b41d2ce8a1d17ef9c5459186", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/add_reference/value.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fadd_reference%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fadd_reference%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fadd_reference%2Fvalue.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -38,7 +38,7 @@ void test01()\n   VERIFY( (is_same<add_reference<ClassType>::type, ClassType&>::value) );\n \n   VERIFY( (is_same<add_reference<void>::type, void>::value) );\n-  VERIFY( (is_same<add_reference<const void>::type, const void>::value) );  \n+  VERIFY( (is_same<add_reference<const void>::type, const void>::value) );\n }\n \n int main()"}, {"sha": "440dc60bcb14c15c4f9ff864b37e5bb04a393ecf", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/aligned_storage/value.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Faligned_storage%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Faligned_storage%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Faligned_storage%2Fvalue.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -29,7 +29,7 @@ void test01()\n   using std::tr1::aligned_storage;\n   using std::tr1::alignment_of;\n   using namespace __gnu_test;\n-  \n+\n   const std::size_t align_c = alignment_of<char>::value;\n   VERIFY( (sizeof(aligned_storage<4, align_c>::type) >= 4) );\n   VERIFY( (__alignof__(aligned_storage<4, align_c>::type) == align_c) );"}, {"sha": "863cc102f2b55721cc699acf5b36038eb50eb330", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/alignment_of/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Falignment_of%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Falignment_of%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Falignment_of%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "83c6153010bea9a0c44f800b9c55996d83e95adf", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/extent/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fextent%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fextent%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fextent%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "f11d58aa151646902ba54714aa66c243ed2aeb83", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/has_nothrow_assign/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fhas_nothrow_assign%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fhas_nothrow_assign%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fhas_nothrow_assign%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "1d41b0e38d4cefa5e412431b677c5c7238ed1689", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/has_nothrow_assign/value.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fhas_nothrow_assign%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fhas_nothrow_assign%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fhas_nothrow_assign%2Fvalue.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -43,7 +43,7 @@ void test01()\n   VERIFY( (test_category<has_nothrow_assign, int*[3]>(true)) );\n   VERIFY( (test_category<has_nothrow_assign, int(*[][2])(int)>(true)) );\n   VERIFY( (test_category<has_nothrow_assign, int (ClassType::*[2][3])>(true)) );\n-  VERIFY( (test_category<has_nothrow_assign, \n+  VERIFY( (test_category<has_nothrow_assign,\n \t   int (ClassType::*[][2][3]) (int)>(true)) );\n }\n "}, {"sha": "651972dd3fc62ab2a8094c33b817da9c705d8e66", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/has_nothrow_constructor/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fhas_nothrow_constructor%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fhas_nothrow_constructor%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fhas_nothrow_constructor%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "3d945bd18c6f362959cb271071b27c4e909794c2", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/has_nothrow_copy/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fhas_nothrow_copy%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fhas_nothrow_copy%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fhas_nothrow_copy%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "ae0baf89ca578086340ac4d58a077f02f1c369a0", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/has_trivial_assign/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fhas_trivial_assign%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fhas_trivial_assign%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fhas_trivial_assign%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "8fb9cca4b6ea9f91fedd7460c41b2440276ebfb5", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/has_trivial_constructor/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fhas_trivial_constructor%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fhas_trivial_constructor%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fhas_trivial_constructor%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "2f723dc64a3313a52482849f7a24bed93f4db4a9", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/has_trivial_copy/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fhas_trivial_copy%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fhas_trivial_copy%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fhas_trivial_copy%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "ab120bca6c7b1fab5ffd090a89451d3d8efb3124", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/has_trivial_destructor/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fhas_trivial_destructor%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fhas_trivial_destructor%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fhas_trivial_destructor%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "1c904224651c9f73ecea317255a207e07375bcc6", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/has_virtual_destructor/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fhas_virtual_destructor%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fhas_virtual_destructor%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fhas_virtual_destructor%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "42ed234f3d6f799f5be2a000d009c2c8d2451045", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/integral_constant/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fintegral_constant%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fintegral_constant%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fintegral_constant%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "696fa297c31157a601f2a2948ffe21499ff8f5cd", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/integral_constant/true_false_type_typedefs.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fintegral_constant%2Ftrue_false_type_typedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fintegral_constant%2Ftrue_false_type_typedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fintegral_constant%2Ftrue_false_type_typedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>\n@@ -34,7 +34,7 @@ void test01()\n   typedef true_type::type                     true_type;\n   typedef true_type::type::value_type         true_type_value_type;\n   typedef true_type::type::type               true_type_type;\n-  \n+\n   typedef false_type::value_type              false_value_type;\n   typedef false_type::type                    false_type;\n   typedef false_type::type::value_type        false_type_value_type;"}, {"sha": "11bb88500fb92ba1489e957c38837edb0504fdc9", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/integral_constant/true_false_value.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fintegral_constant%2Ftrue_false_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fintegral_constant%2Ftrue_false_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fintegral_constant%2Ftrue_false_value.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -31,7 +31,7 @@ void test01()\n   VERIFY( true_type::value == true );\n   VERIFY( false_type::value == false );\n   VERIFY( true_type::type::value == true );\n-  VERIFY( false_type::type::value == false );  \n+  VERIFY( false_type::type::value == false );\n }\n \n int main()"}, {"sha": "40382e2b64a2d529e4c76355257e40f2ee489519", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_abstract/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_abstract%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_abstract%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_abstract%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "1dbbe98d13ba4be4fc65ccde0f049ecb34aa33c6", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_abstract/value.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_abstract%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_abstract%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_abstract%2Fvalue.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -36,9 +36,9 @@ void test01()\n   VERIFY( (test_category<is_abstract, void>(false)) );\n   VERIFY( (test_category<is_abstract, int (int)>(false)) );\n   VERIFY( (test_category<is_abstract, int&>(false)) );\n-  \n+\n   // Sanity check.\n-  VERIFY( (test_category<is_abstract, ClassType>(false)) );  \n+  VERIFY( (test_category<is_abstract, ClassType>(false)) );\n }\n \n int main()"}, {"sha": "af3e1f5b4ca4ed949ea9b495d6c22372a4f07df3", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_arithmetic/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_arithmetic%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_arithmetic%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_arithmetic%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "de6a12111fe82dc86e828ce7d67caca1f0cd0f6f", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_arithmetic/value.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_arithmetic%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_arithmetic%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_arithmetic%2Fvalue.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -28,7 +28,7 @@ void test01()\n   bool test __attribute__((unused)) = true;\n   using std::tr1::is_arithmetic;\n   using namespace __gnu_test;\n-  \n+\n   VERIFY( (test_category<is_arithmetic, void>(false)) );\n \n   VERIFY( (test_category<is_arithmetic, char>(true)) );"}, {"sha": "904e9dae10115ef3c5be78ade290110b65ebd413", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_array/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_array%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_array%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_array%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "e746db7989022f4ebf8919849d7d1563d4c605f7", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_base_of/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_base_of%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_base_of%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_base_of%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "5c9dccd290400a3d2d7e291bf98eb1b2a6ee2f80", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_base_of/value.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_base_of%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_base_of%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_base_of%2Fvalue.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -37,7 +37,7 @@ class DerivedHiddenCons\n };\n \n class MultiDerivedHiddenCons\n-: private HiddenCons, private __gnu_test::ClassType \n+: private HiddenCons, private __gnu_test::ClassType\n {\n   MultiDerivedHiddenCons();\n   MultiDerivedHiddenCons(const MultiDerivedHiddenCons&);\n@@ -58,7 +58,7 @@ void test01()\n   VERIFY( (test_relationship<is_base_of, ClassType, DerivedType>(true)) );\n   VERIFY( (test_relationship<is_base_of, ClassType, const DerivedType>(true)) );\n   VERIFY( (test_relationship<is_base_of, volatile ClassType,\n-\t   volatile DerivedType>(true)) );  \n+\t   volatile DerivedType>(true)) );\n   VERIFY( (test_relationship<is_base_of, PolymorphicClass,\n \t   DerivedPolymorphic>(true)) );\n   VERIFY( (test_relationship<is_base_of, HiddenCons,\n@@ -74,7 +74,7 @@ void test01()\n \t   UnionType>(false)) );\n   VERIFY( (test_relationship<is_base_of, int&, ClassType>(false)) );\n   VERIFY( (test_relationship<is_base_of, AbstractClass, ClassType>(false)) );\n-  VERIFY( (test_relationship<is_base_of, ClassType, AbstractClass>(false)) );  \n+  VERIFY( (test_relationship<is_base_of, ClassType, AbstractClass>(false)) );\n   VERIFY( (test_relationship<is_base_of, DerivedType, ClassType>(false)) );\n   VERIFY( (test_relationship<is_base_of, DerivedPolymorphic,\n \t   PolymorphicClass>(false)) );"}, {"sha": "d16eab2974b6cda7177d8a7a7a2534ebf8c28f18", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_class/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_class%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_class%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_class%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "079947c230d5cfff2f39452479fd9fc943df7694", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_compound/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_compound%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_compound%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_compound%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "ba8ab21b4a1d3117c1e6eb149b61f9b9c6c4b48a", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_compound/value.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_compound%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_compound%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_compound%2Fvalue.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -28,7 +28,7 @@ void test01()\n   bool test __attribute__((unused)) = true;\n   using std::tr1::is_compound;\n   using namespace __gnu_test;\n-  \n+\n   VERIFY( (test_category<is_compound, void>(false)) );\n   VERIFY( (test_category<is_compound, char>(false)) );\n   VERIFY( (test_category<is_compound, signed char>(false)) );"}, {"sha": "83387208c1f6554410af9a81517ea9e60d836915", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_const/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_const%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_const%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_const%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "2177d13c92cc80a96c9dbd47bd9b0c10087f245b", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_convertible/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_convertible%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_convertible%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_convertible%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "be6228ba213db5c71b75e9cc5d033e1e1f2240e7", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_convertible/value.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_convertible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_convertible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_convertible%2Fvalue.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -40,7 +40,7 @@ void test01()\n   VERIFY( (test_relationship<is_convertible, int*, void*>(true)) );\n   VERIFY( (test_relationship<is_convertible, int[4], int*>(true)) );\n   VERIFY( (test_relationship<is_convertible, float&, int>(true)) );\n-  VERIFY( (test_relationship<is_convertible, int, const int&>(true)) ); \n+  VERIFY( (test_relationship<is_convertible, int, const int&>(true)) );\n   VERIFY( (test_relationship<is_convertible, const int&, int>(true)) );\n   VERIFY( (test_relationship<is_convertible, float, const int&>(true)) );\n   VERIFY( (test_relationship<is_convertible, float, volatile float&>(true)) );\n@@ -55,15 +55,15 @@ void test01()\n \n   VERIFY( (test_relationship<is_convertible, void, void>(true)) );\n   VERIFY( (test_relationship<is_convertible, int, void>(true)) );\n-  VERIFY( (test_relationship<is_convertible, int[4], void>(true)) );  \n+  VERIFY( (test_relationship<is_convertible, int[4], void>(true)) );\n \n   // Negative tests.\n   VERIFY( (test_relationship<is_convertible, const int*, int*>(false)) );\n   VERIFY( (test_relationship<is_convertible, int*, float*>(false)) );\n   VERIFY( (test_relationship<is_convertible, const int[4], int*>(false)) );\n   VERIFY( (test_relationship<is_convertible, int[4], int[4]>(false)) );\n   VERIFY( (test_relationship<is_convertible, const int&, int&>(false)) );\n-  VERIFY( (test_relationship<is_convertible, float&, int&>(false)) );  \n+  VERIFY( (test_relationship<is_convertible, float&, int&>(false)) );\n   VERIFY( (test_relationship<is_convertible, float, volatile int&>(false)) );\n   VERIFY( (test_relationship<is_convertible, int(int), int(int)>(false)) );\n   VERIFY( (test_relationship<is_convertible, int(int), int(*)(void)>(false)) );\n@@ -75,8 +75,8 @@ void test01()\n   VERIFY( (test_relationship<is_convertible, ClassType&, DerivedType&>(false)) );\n \n   VERIFY( (test_relationship<is_convertible, void, int>(false)) );\n-  VERIFY( (test_relationship<is_convertible, void, float>(false)) );  \n-  VERIFY( (test_relationship<is_convertible, void, int(*)(int)>(false)) );  \n+  VERIFY( (test_relationship<is_convertible, void, float>(false)) );\n+  VERIFY( (test_relationship<is_convertible, void, int(*)(int)>(false)) );\n }\n \n int main()"}, {"sha": "f6c51d833d0395bfea9e1ff8ae049ab0a3a76541", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_empty/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_empty%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_empty%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_empty%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "6912119a705c7986e15dff6797e0259ef8e116ac", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_empty/value.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_empty%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_empty%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_empty%2Fvalue.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -65,7 +65,7 @@ void test01()\n \n   VERIFY( (test_category<is_empty, AbstractClass>(false)) );\n   VERIFY( (test_category<is_empty, NonEmptyClassOne>(false)) );\n-  VERIFY( (test_category<is_empty, NonEmptyClassTwo>(false)) );  \n+  VERIFY( (test_category<is_empty, NonEmptyClassTwo>(false)) );\n }\n \n int main()"}, {"sha": "f2624f6280f02fe381dab1277f43f83dc1dfbef1", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_enum/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_enum%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_enum%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_enum%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "3a9ad91371dd8bf7ba19f2d8f896db1bf0564c7a", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_floating_point/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_floating_point%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_floating_point%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_floating_point%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "a32e19b0cea66c53db9e5a373e143e321ed52727", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_function/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_function%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_function%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_function%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "89a733eeb2fdd5e5789d330f77b78b56f02d9aed", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_function/value.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_function%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_function%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_function%2Fvalue.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -42,7 +42,7 @@ void test01()\n \n   VERIFY( (test_category<is_function, AbstractClass>(false)) );\n   VERIFY( (test_category<is_function, int(&)(int)>(false)) );\n-  \n+\n   // Sanity check.\n   VERIFY( (test_category<is_function, ClassType>(false)) );\n }"}, {"sha": "4765ab84f29b8a2ebb81d64df1bd4acee359e7ac", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_fundamental/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_fundamental%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_fundamental%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_fundamental%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "615c1c8318fc8ce6fc8c4d6e39dd5b8a99f35718", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_fundamental/value.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_fundamental%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_fundamental%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_fundamental%2Fvalue.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -28,7 +28,7 @@ void test01()\n   bool test __attribute__((unused)) = true;\n   using std::tr1::is_fundamental;\n   using namespace __gnu_test;\n-  \n+\n   VERIFY( (test_category<is_fundamental, void>(true)) );\n   VERIFY( (test_category<is_fundamental, char>(true)) );\n   VERIFY( (test_category<is_fundamental, signed char>(true)) );"}, {"sha": "f0372b84f3684443a523138c54e388ef821015ef", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_integral/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_integral%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_integral%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_integral%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "c9c4b8d96502a5b93fb202403550a2a07da0eeaf", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_integral/value.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_integral%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_integral%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_integral%2Fvalue.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -28,9 +28,9 @@ void test01()\n   bool test __attribute__((unused)) = true;\n   using std::tr1::is_integral;\n   using namespace __gnu_test;\n-  \n+\n   VERIFY( (test_category<is_integral, void>(false)) );\n-  \n+\n   VERIFY( (test_category<is_integral, char>(true)) );\n   VERIFY( (test_category<is_integral, signed char>(true)) );\n   VERIFY( (test_category<is_integral, unsigned char>(true)) );"}, {"sha": "4cd01c4fbd839e5dd5d5043929951c3f242bf899", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_member_function_pointer/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_member_function_pointer%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_member_function_pointer%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_member_function_pointer%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "f2cb94331dd00af2e7cf010f591b13469e00fc55", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_member_function_pointer/value.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_member_function_pointer%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_member_function_pointer%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_member_function_pointer%2Fvalue.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -48,7 +48,7 @@ void test01()\n \t   const int (ClassType::*)>(false)) );\n   VERIFY( (test_category<is_member_function_pointer,\n \t   ClassType (ClassType::*)>(false)) );\n-  \n+\n   // Sanity check.\n   VERIFY( (test_category<is_member_function_pointer, ClassType>(false)) );\n }"}, {"sha": "c892adb156f41702b705a336a4732f37dc08ca6a", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_member_object_pointer/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_member_object_pointer%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_member_object_pointer%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_member_object_pointer%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "0b31abfc0a2284d32c8d799e7b6246909b867d86", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_member_pointer/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_member_pointer%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_member_pointer%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_member_pointer%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "0996d080c0597f1337286c4722442d8bbf747f54", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_member_pointer/value.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_member_pointer%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_member_pointer%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_member_pointer%2Fvalue.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -43,7 +43,7 @@ void test01()\n \t   ClassType (ClassType::*) (ClassType)>(true)) );\n   VERIFY( (test_category<is_member_pointer,\n \t   float (ClassType::*) (int, float, int[], int&)>(true)) );\n-  \n+\n   // Sanity check.\n   VERIFY( (test_category<is_member_pointer, ClassType>(false)) );\n }"}, {"sha": "68573f6bc694d48714bc47f646504bb1c5694c40", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_object/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_object%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_object%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_object%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "5bc9268b1f39a2c8a2fe01168bed22462080fc58", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_object/value.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_object%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_object%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_object%2Fvalue.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -28,7 +28,7 @@ void test01()\n   bool test __attribute__((unused)) = true;\n   using std::tr1::is_object;\n   using namespace __gnu_test;\n-  \n+\n   VERIFY( (test_category<is_object, int (int)>(false)) );\n   VERIFY( (test_category<is_object, ClassType (ClassType)>(false)) );\n   VERIFY( (test_category<is_object, float (int, float, int[], int&)>(false)) );"}, {"sha": "289ca549603a31e0d8c60b7be48b3f2bb29ef803", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_pod/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_pod%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_pod%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_pod%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "38ab90f82d5bb80a7edd1608705fad23495fff84", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_pointer/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_pointer%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_pointer%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_pointer%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "c1515748ee6296f1bcb8a9cad141336a19c9d1fa", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_polymorphic/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_polymorphic%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_polymorphic%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_polymorphic%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "a43c8d758bc8262287cef68b592d731be540a0ef", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_reference/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_reference%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_reference%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_reference%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "64cf599003d82cb46062d2408f91913971ad2cf3", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_same/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_same%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_same%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_same%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "9af9a0f3acb8e6856c878eda3fdd43886c414fc1", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_scalar/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_scalar%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_scalar%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_scalar%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "53ec4636648daf59e0d9057752e412de12523ab9", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_signed/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_signed%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_signed%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_signed%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "c10db944901c1d10851b914a365357558ebaf70d", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_signed/value.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_signed%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_signed%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_signed%2Fvalue.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -28,9 +28,9 @@ void test01()\n   bool test __attribute__((unused)) = true;\n   using std::tr1::is_signed;\n   using namespace __gnu_test;\n-  \n+\n   VERIFY( (test_category<is_signed, void>(false)) );\n-  \n+\n   VERIFY( (test_category<is_signed, char>(false)) );\n   VERIFY( (test_category<is_signed, signed char>(true)) );\n   VERIFY( (test_category<is_signed, unsigned char>(false)) );"}, {"sha": "d46d1c99a84dd527049cc3f0d55e0932e6a6a9cf", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_union/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_union%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_union%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_union%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "a6e9f53add12d187a3860a5e591128b76cf5216b", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_unsigned/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_unsigned%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_unsigned%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_unsigned%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "b661f5c79d5606cf53d03fe111fc9062d035a0f5", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_unsigned/value.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_unsigned%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_unsigned%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_unsigned%2Fvalue.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -28,9 +28,9 @@ void test01()\n   bool test __attribute__((unused)) = true;\n   using std::tr1::is_unsigned;\n   using namespace __gnu_test;\n-  \n+\n   VERIFY( (test_category<is_unsigned, void>(false)) );\n-  \n+\n   VERIFY( (test_category<is_unsigned, char>(false)) );\n   VERIFY( (test_category<is_unsigned, signed char>(false)) );\n   VERIFY( (test_category<is_unsigned, unsigned char>(true)) );"}, {"sha": "3c131992e7f3644deb3c86b158078e76bfa896cf", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_void/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_void%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_void%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_void%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "9e5b0fceedc1c4771f635f33940cd3b051d004da", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_void/value.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_void%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_void%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_void%2Fvalue.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -30,7 +30,7 @@ void test01()\n   using namespace __gnu_test;\n \n   VERIFY( (test_category<is_void, void>(true)) );\n-  \n+\n   VERIFY( (test_category<is_void, char>(false)) );\n   VERIFY( (test_category<is_void, signed char>(false)) );\n   VERIFY( (test_category<is_void, unsigned char>(false)) );"}, {"sha": "6109c54c6832c01ba6b7c71cb8ba2616786f00c7", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_volatile/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_volatile%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_volatile%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_volatile%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "788c9c2b7bc66ce22712596f8c063f5bb91c2c8d", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/rank/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Frank%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Frank%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Frank%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// \n+//\n // NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n \n #include <tr1/type_traits>"}, {"sha": "3c119045da4de670d4aa07c5bf8420a3958634e9", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/bernoulli_distribution/requirements/typedefs.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fbernoulli_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fbernoulli_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fbernoulli_distribution%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -25,8 +25,8 @@\n #include <tr1/random>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   using namespace std::tr1;\n \n   typedef bernoulli_distribution test_type;"}, {"sha": "bcaf3a4c5b6818f72267d14dd67f0ce2fa2482c8", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/binomial_distribution/requirements/typedefs.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fbinomial_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fbinomial_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fbinomial_distribution%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -25,8 +25,8 @@\n #include <tr1/random>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   using namespace std::tr1;\n \n   typedef binomial_distribution<int, double> test_type;"}, {"sha": "d979309b17907131a82c66cf94a294cc7be41c8d", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/discard_block/operators/equal.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fdiscard_block%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fdiscard_block%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fdiscard_block%2Foperators%2Fequal.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -36,7 +36,7 @@ test01()\n     > u, v;\n \n   VERIFY( u == v );\n-  \n+\n   for (int i = 0; i < 100; ++i)\n     {\n       u();"}, {"sha": "3315269886b4ff860e4e5177f4444eb751c4c8e5", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/discard_block/operators/serialize.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fdiscard_block%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fdiscard_block%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fdiscard_block%2Foperators%2Fserialize.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -37,12 +37,12 @@ test01()\n     subtract_with_carry<long, (1 << 24), 10, 24>,\n     389, 24\n     > u, v;\n-  \n+\n   u(); // advance\n   str << u;\n-  \n+\n   VERIFY( u != v );\n-  \n+\n   str >> v;\n   VERIFY( u == v );\n }"}, {"sha": "06bf731a9514a43a669df4189b48c85a7ff391a7", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/discard_block/requirements/typedefs.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fdiscard_block%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fdiscard_block%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fdiscard_block%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -25,15 +25,15 @@\n #include <tr1/random>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   using namespace std::tr1;\n-  \n+\n   typedef discard_block\n     <\n     subtract_with_carry<long, (1 << 24), 10, 24>,\n     389, 24\n     > test_type;\n-  \n+\n   typedef test_type::result_type result_type;\n }"}, {"sha": "21dc15b56363c12bbc1e5f872f51a4090ec2a533", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/exponential_distribution/requirements/typedefs.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fexponential_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fexponential_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fexponential_distribution%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -25,8 +25,8 @@\n #include <tr1/random>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   using namespace std::tr1;\n \n   typedef exponential_distribution<double> test_type;"}, {"sha": "64c03d7716c19ac3577978f618c443524eb051a5", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/gamma_distribution/requirements/typedefs.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fgamma_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fgamma_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fgamma_distribution%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -25,8 +25,8 @@\n #include <tr1/random>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   using namespace std::tr1;\n \n   typedef gamma_distribution<double> test_type;"}, {"sha": "7f834c858a141ed000951a8dac3cfb2d63681ae9", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/geometric_distribution/requirements/typedefs.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fgeometric_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fgeometric_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fgeometric_distribution%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -25,8 +25,8 @@\n #include <tr1/random>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   using namespace std::tr1;\n \n   typedef geometric_distribution<int, double> test_type;"}, {"sha": "a480bbb37afafd887bc9541fffd050e712821d29", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/linear_congruential/cons/default.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Flinear_congruential%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Flinear_congruential%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Flinear_congruential%2Fcons%2Fdefault.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -24,11 +24,11 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n+test01()\n {\n   bool test __attribute__((unused)) = true;\n   using namespace std::tr1;\n-  \n+\n   linear_congruential<unsigned long, 48271, 0, 2147483647> x;\n   VERIFY( x.min() == 1 );\n   VERIFY( x.max() == 2147483647-1 );"}, {"sha": "50e0227792bbfcfd706c152c54509d896fd96442", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/linear_congruential/cons/gen1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Flinear_congruential%2Fcons%2Fgen1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Flinear_congruential%2Fcons%2Fgen1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Flinear_congruential%2Fcons%2Fgen1.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -38,7 +38,7 @@ test01()\n {\n   bool test __attribute__((unused)) = true;\n   using namespace std::tr1;\n-\t\n+\n   linear_congruential<unsigned long, 48271, 0, 2147483647> x(gen);\n   VERIFY( x.min() == 1 );\n   VERIFY( x.max() == 2147483647-1 );"}, {"sha": "d4ca873b824652f30edfe002a1129680f4094d48", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/linear_congruential/cons/seed1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Flinear_congruential%2Fcons%2Fseed1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Flinear_congruential%2Fcons%2Fseed1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Flinear_congruential%2Fcons%2Fseed1.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -27,7 +27,7 @@ void\n test01()\n {\n   using namespace std::tr1;\n-  \n+\n   unsigned long seed = 2;\n   linear_congruential<unsigned long, 48271, 0, 2147483647> x(seed);\n }"}, {"sha": "45804ed50a70b0e769459b404b50dc99f6caa7d5", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/linear_congruential/cons/seed2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Flinear_congruential%2Fcons%2Fseed2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Flinear_congruential%2Fcons%2Fseed2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Flinear_congruential%2Fcons%2Fseed2.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -27,7 +27,7 @@ void\n test01()\n {\n   using namespace std::tr1;\n-  \n+\n   double seed = 2.0;\n   linear_congruential<unsigned long, 48271, 0, 2147483647> x(seed);\n }"}, {"sha": "d53c55b7ff1fa6058c42db549c2863e42e11d0cf", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/linear_congruential/operators/equal.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Flinear_congruential%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Flinear_congruential%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Flinear_congruential%2Foperators%2Fequal.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -24,14 +24,14 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n+test01()\n {\n   bool test __attribute__((unused)) = true;\n \n   std::tr1::minstd_rand0 a;\n   std::tr1::minstd_rand0 b;\n   std::tr1::minstd_rand0 c(120);\n-  \n+\n   VERIFY( a == b );\n   VERIFY( !(a == c) );\n }"}, {"sha": "bd4af8a82afa43e5f7cf0e06d2689793c216f1a5", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/linear_congruential/operators/not_equal.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Flinear_congruential%2Foperators%2Fnot_equal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Flinear_congruential%2Foperators%2Fnot_equal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Flinear_congruential%2Foperators%2Fnot_equal.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -24,10 +24,10 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   bool test __attribute__((unused)) = true;\n-\t\n+\n   std::tr1::minstd_rand0 a;\n   std::tr1::minstd_rand0 b;\n   std::tr1::minstd_rand0 c(120);"}, {"sha": "3b202d044c7387e5f584374ff3683bff239e7cd5", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/linear_congruential/operators/serialize.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Flinear_congruential%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Flinear_congruential%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Flinear_congruential%2Foperators%2Fserialize.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -25,19 +25,19 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n+test01()\n {\n   bool test __attribute__((unused)) = true;\n- \n+\n   std::stringstream str;\n   std::tr1::minstd_rand0 a;\n   std::tr1::minstd_rand0 b;\n-  \n+\n   a(); // advance\n   str << a;\n-  \n+\n   VERIFY( a != b );\n-  \n+\n   str >> b;\n   VERIFY( a == b );\n }"}, {"sha": "33bf768b775a9b2158a50ab0618dc0f069bd93d4", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/linear_congruential/requirements/non_uint_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Flinear_congruential%2Frequirements%2Fnon_uint_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Flinear_congruential%2Frequirements%2Fnon_uint_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Flinear_congruential%2Frequirements%2Fnon_uint_neg.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -25,5 +25,5 @@\n // 5.1.4.1 [4]\n \n #include <tr1/random>\n- \n+\n std::tr1::linear_congruential<double, 48271, 0, 2147483647> x;"}, {"sha": "cbb23b349a57e7ccc9c0a72285c650a2ada9e7dc", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/linear_congruential/requirements/typedefs.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Flinear_congruential%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Flinear_congruential%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Flinear_congruential%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -25,9 +25,9 @@\n #include <tr1/random>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   typedef std::tr1::linear_congruential<unsigned long, 2, 0, 4> test_type;\n-  \n+\n   typedef test_type::result_type result_type;\n }"}, {"sha": "6164d9ebf4b667a8ba07be0180a584c1c1e2fd58", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/mersenne_twister/cons/default.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fmersenne_twister%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fmersenne_twister%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fmersenne_twister%2Fcons%2Fdefault.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -24,7 +24,7 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n+test01()\n {\n   bool test __attribute__((unused)) = true;\n \n@@ -34,7 +34,7 @@ test01()\n     0x9908b0dful, 11, 7,\n     0x9d2c5680ul, 15,\n     0xefc60000ul, 18> x;\n-  \n+\n   VERIFY( x.min() == 0 );\n   VERIFY( x.max() == 4294967295ul );\n   VERIFY( x() == 3499211612ul );"}, {"sha": "3dd52d20d54f5435adef8714d924ad44cd0ad42f", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/mersenne_twister/cons/gen1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fmersenne_twister%2Fcons%2Fgen1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fmersenne_twister%2Fcons%2Fgen1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fmersenne_twister%2Fcons%2Fgen1.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -34,7 +34,7 @@ gen()\n }\n \n void\n-test01() \n+test01()\n {\n   bool test __attribute__((unused)) = true;\n   using namespace std::tr1;"}, {"sha": "598c228a3b48be8eacb3d09dddf81cfc45fc1b4c", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/mersenne_twister/cons/seed1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fmersenne_twister%2Fcons%2Fseed1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fmersenne_twister%2Fcons%2Fseed1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fmersenne_twister%2Fcons%2Fseed1.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -27,7 +27,7 @@ void\n test01()\n {\n   using namespace std::tr1;\n-  \n+\n   unsigned long seed = 2;\n   mersenne_twister<\n     unsigned long, 32, 624, 397, 31,"}, {"sha": "126d612be50023d77b44c1e6eddc1f840f0000fc", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/mersenne_twister/cons/seed2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fmersenne_twister%2Fcons%2Fseed2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fmersenne_twister%2Fcons%2Fseed2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fmersenne_twister%2Fcons%2Fseed2.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -28,7 +28,7 @@ void\n test01()\n {\n   using namespace std::tr1;\n-  \n+\n   double seed = 2.0;\n   mersenne_twister<\n     unsigned long, 32, 624, 397, 31,"}, {"sha": "b68fba8f323fa1c908e64993702e95ba7dcc6f1a", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/mersenne_twister/operators/equal.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fmersenne_twister%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fmersenne_twister%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fmersenne_twister%2Foperators%2Fequal.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -36,7 +36,7 @@ test01()\n     0xefc60000ul, 18> u, v;\n \n   VERIFY( u == v );\n-  \n+\n   for (int i = 0; i < 100; ++i)\n     {\n       u();"}, {"sha": "4d98f1f0984c49e6db85c0660aaf57ca12e8259a", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/mersenne_twister/operators/not_equal.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fmersenne_twister%2Foperators%2Fnot_equal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fmersenne_twister%2Foperators%2Fnot_equal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fmersenne_twister%2Foperators%2Fnot_equal.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -40,7 +40,7 @@ test01()\n     0x9908b0dful, 11, 7,\n     0x9d2c5680ul, 15,\n     0xefc60000ul, 18> v(2);\n-  \n+\n   VERIFY( u != v );\n }\n "}, {"sha": "a8f5119d205554ce3fcb6ca4c2ace72774e78b06", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/mersenne_twister/operators/serialize.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fmersenne_twister%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fmersenne_twister%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fmersenne_twister%2Foperators%2Fserialize.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -36,12 +36,12 @@ test01()\n     0x9908b0dful, 11, 7,\n     0x9d2c5680ul, 15,\n     0xefc60000ul, 18> u, v;\n-  \n+\n   u(); // advance\n   str << u;\n-  \n+\n   VERIFY( u != v );\n-  \n+\n   str >> v;\n   VERIFY( u == v );\n }"}, {"sha": "a31b4d524cbafd87cb8df892e2c9d1906f8d342e", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/mersenne_twister/requirements/typedefs.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fmersenne_twister%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fmersenne_twister%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fmersenne_twister%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -25,13 +25,13 @@\n #include <tr1/random>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   typedef std::tr1::mersenne_twister<unsigned long,\n     32, 624, 397, 31,\n     0x9908b0df, 11, 7,\n     0x9d2c5680, 15,\n     0xefc60000, 18> test_type;\n-  \n+\n   typedef test_type::result_type result_type;\n }"}, {"sha": "e118168a6d096a559a7c8071ca1d3ad11a9f77c5", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/minstd_rand.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fminstd_rand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fminstd_rand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fminstd_rand.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -24,14 +24,14 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n+test01()\n {\n   bool test __attribute__((unused)) = true;\n \n   std::tr1::minstd_rand a;\n   for (int i = 0; i < 9999; ++i)\n     a();\n-  \n+\n   VERIFY( a() == 399268537 );\n }\n "}, {"sha": "df4270cdbdb2fbc5cdc9714b4ff3bd28c06c2c54", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/minstd_rand0.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fminstd_rand0.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fminstd_rand0.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fminstd_rand0.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -24,7 +24,7 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n+test01()\n {\n   bool test __attribute__((unused)) = true;\n "}, {"sha": "0e0d7d424c98fa0b4c4fea8de71c69b25018c964", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/mt19937.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fmt19937.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fmt19937.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fmt19937.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -24,14 +24,14 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n+test01()\n {\n   bool test __attribute__((unused)) = true;\n \n   std::tr1::mt19937 a;\n   for (int i = 0; i < 9999; ++i)\n     a();\n-  \n+\n   VERIFY( a() == 4123659995ul );\n }\n "}, {"sha": "9541e19660d36f9ae4d1a7b2e12a1f230f2a0b8e", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/normal_distribution/requirements/typedefs.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fnormal_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fnormal_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fnormal_distribution%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -25,8 +25,8 @@\n #include <tr1/random>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   using namespace std::tr1;\n \n   typedef normal_distribution<double> test_type;"}, {"sha": "91f672854c105da962df85bc6fee4fe1f1c32d1d", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/poisson_distribution/requirements/typedefs.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fpoisson_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fpoisson_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fpoisson_distribution%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -25,8 +25,8 @@\n #include <tr1/random>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   using namespace std::tr1;\n \n   typedef poisson_distribution<int, double> test_type;"}, {"sha": "6055271e333e7205677fdabe5fdf408600cd3536", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/random_device/cons/default.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Frandom_device%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Frandom_device%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Frandom_device%2Fcons%2Fdefault.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -24,13 +24,13 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n+test01()\n {\n   bool test __attribute__((unused)) = true;\n \n   using namespace std::tr1;\n   random_device x;\n-  \n+\n   VERIFY( x.min() == std::numeric_limits<random_device::result_type>::min() );\n   VERIFY( x.max() == std::numeric_limits<random_device::result_type>::max() );\n }"}, {"sha": "9af86b3b184cf0ed952f4478a2fe93fdd109b083", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/random_device/cons/token.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Frandom_device%2Fcons%2Ftoken.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Frandom_device%2Fcons%2Ftoken.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Frandom_device%2Fcons%2Ftoken.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -24,7 +24,7 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n+test01()\n {\n   bool test __attribute__((unused)) = true;\n   using namespace std::tr1;"}, {"sha": "f8290ac95919242e231920be5c63e4ab384f9521", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/random_device/requirements/typedefs.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Frandom_device%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Frandom_device%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Frandom_device%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -24,8 +24,8 @@\n #include <tr1/random>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   typedef std::tr1::random_device test_type;\n   typedef test_type::result_type result_type;\n }"}, {"sha": "e9c1b329e0ca7fc73cb19a282494a343d20776cc", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/ranlux3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Franlux3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Franlux3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Franlux3.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -25,7 +25,7 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n+test01()\n {\n   bool test __attribute__((unused)) = true;\n "}, {"sha": "2a3ab83c52b2d0f2505d23bed9b8c7571a8f7e8f", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/ranlux3_01.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Franlux3_01.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Franlux3_01.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Franlux3_01.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -25,7 +25,7 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n+test01()\n {\n   bool test __attribute__((unused)) = true;\n "}, {"sha": "b2394dbdaa9d1f5dbd7277924718ba3d540055c7", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/ranlux4.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Franlux4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Franlux4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Franlux4.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -24,7 +24,7 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n+test01()\n {\n   bool test __attribute__((unused)) = true;\n "}, {"sha": "d9a830aaf30b0c49aa5374d0f95bda05e2eb8374", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/ranlux4_01.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Franlux4_01.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Franlux4_01.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Franlux4_01.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -24,7 +24,7 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n+test01()\n {\n   bool test __attribute__((unused)) = true;\n "}, {"sha": "c38e3c0e4094ea9ee59e42dbc74110bf655b7dfc", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/subtract_with_carry/cons/default.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Fcons%2Fdefault.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -24,7 +24,7 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n+test01()\n {\n   bool test __attribute__((unused)) = true;\n   using namespace std::tr1;"}, {"sha": "68914e75cf33c017819038c7a6637c6cc6af189d", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/subtract_with_carry/cons/gen1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Fcons%2Fgen1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Fcons%2Fgen1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Fcons%2Fgen1.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -34,7 +34,7 @@ gen()\n }\n \n void\n-test01() \n+test01()\n {\n   bool test __attribute__((unused)) = true;\n   using namespace std::tr1;"}, {"sha": "df6a74ea92cae658581191b650f50bfbc016cfe3", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/subtract_with_carry/cons/seed1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Fcons%2Fseed1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Fcons%2Fseed1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Fcons%2Fseed1.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -24,8 +24,8 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   using namespace std::tr1;\n \n   unsigned long seed = 2;"}, {"sha": "e14ac627cde76804bd1ef3eedb1729a26389d09c", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/subtract_with_carry/cons/seed2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Fcons%2Fseed2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Fcons%2Fseed2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Fcons%2Fseed2.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -25,8 +25,8 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   using namespace std::tr1;\n \n   double seed = 2.0;"}, {"sha": "f02db92ea7e55ec7bdf099145ccfcb093d6eef95", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/subtract_with_carry/operators/equal.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Foperators%2Fequal.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -33,7 +33,7 @@ test01()\n   subtract_with_carry<unsigned long, (1UL << 24), 10, 24> v;\n \n   VERIFY( u == v );\n-  \n+\n   for (int i = 0; i < 100; ++i)\n     {\n       u();"}, {"sha": "49e7a3e73296711d1dfa437e325d37d9a258dab4", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/subtract_with_carry/operators/not_equal.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Foperators%2Fnot_equal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Foperators%2Fnot_equal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Foperators%2Fnot_equal.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -31,7 +31,7 @@ test01()\n \n   subtract_with_carry<unsigned long, (1UL << 24), 10, 24> u(1);\n   subtract_with_carry<unsigned long, (1UL << 24), 10, 24> v(2);\n-  \n+\n   VERIFY( u != v );\n }\n "}, {"sha": "aecb59eee74f894723f415481e162728f5e5479b", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/subtract_with_carry/operators/serialize.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Foperators%2Fserialize.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -33,12 +33,12 @@ test01()\n   std::stringstream str;\n   subtract_with_carry<unsigned long, (1UL << 24), 10, 24> u;\n   subtract_with_carry<unsigned long, (1UL << 24), 10, 24> v;\n-  \n+\n   u(); // advance\n   str << u;\n-  \n+\n   VERIFY( u != v );\n-  \n+\n   str >> v;\n   VERIFY( u == v );\n }"}, {"sha": "1dec108550ee67e737823073be2389d4eff9571a", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/subtract_with_carry_01/cons/default.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Fcons%2Fdefault.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -24,7 +24,7 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n+test01()\n {\n   bool test __attribute__((unused)) = true;\n   using namespace std::tr1;"}, {"sha": "8f476a9cf0d3de6ca4fd7f3ae5e149534b24cc0b", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/subtract_with_carry_01/cons/gen1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Fcons%2Fgen1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Fcons%2Fgen1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Fcons%2Fgen1.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -34,7 +34,7 @@ gen()\n }\n \n void\n-test01() \n+test01()\n {\n   bool test __attribute__((unused)) = true;\n   using namespace std::tr1;"}, {"sha": "68b1f2291ee16e481e375afb971bf3e465fcabec", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/subtract_with_carry_01/cons/seed1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Fcons%2Fseed1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Fcons%2Fseed1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Fcons%2Fseed1.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -24,8 +24,8 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   using namespace std::tr1;\n \n   unsigned long seed = 2;"}, {"sha": "c6722329bcee669cb200f6337867e4b57da563d4", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/subtract_with_carry_01/cons/seed2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Fcons%2Fseed2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Fcons%2Fseed2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Fcons%2Fseed2.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -25,8 +25,8 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   using namespace std::tr1;\n \n   double seed = 2.0;"}, {"sha": "571873ebefb0193ceaf4cdd98b4520edbeb2dd23", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/subtract_with_carry_01/operators/equal.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Foperators%2Fequal.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -33,7 +33,7 @@ test01()\n   subtract_with_carry_01<float, 24, 10, 24> v;\n \n   VERIFY( u == v );\n-  \n+\n   for (int i = 0; i < 100; ++i)\n     {\n       u();"}, {"sha": "a4fa1c17a1750f0a2708db2b448d771dffc658c8", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/subtract_with_carry_01/operators/not_equal.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Foperators%2Fnot_equal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Foperators%2Fnot_equal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Foperators%2Fnot_equal.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -31,7 +31,7 @@ test01()\n \n   subtract_with_carry_01<float, 24, 10, 24> u(1);\n   subtract_with_carry_01<float, 24, 10, 24> v(2);\n-  \n+\n   VERIFY( u != v );\n }\n "}, {"sha": "0f9d8d70af0d84f71c8c1c12e95ab8224f8585f2", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/subtract_with_carry_01/operators/serialize.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Foperators%2Fserialize.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -33,12 +33,12 @@ test01()\n   std::stringstream str;\n   subtract_with_carry_01<float, 24, 10, 24> u;\n   subtract_with_carry_01<float, 24, 10, 24> v;\n-  \n+\n   u(); // advance\n   str << u;\n-  \n+\n   VERIFY( u != v );\n-  \n+\n   str >> v;\n   VERIFY( u == v );\n }"}, {"sha": "ab1433f3d6f9ac625cb801e07c6f3aba4e152225", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/uniform_int/requirements/typedefs.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Funiform_int%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Funiform_int%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Funiform_int%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -25,12 +25,12 @@\n #include <tr1/random>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   using namespace std::tr1;\n \n   typedef uniform_int<int> test_type;\n-  \n+\n   typedef test_type::input_type  input_type;\n   typedef test_type::result_type result_type;\n }"}, {"sha": "14e25e429f53f52893d4b0f7a82ff156bc491eb5", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/uniform_real/requirements/typedefs.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Funiform_real%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Funiform_real%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Funiform_real%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -25,8 +25,8 @@\n #include <tr1/random>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   using namespace std::tr1;\n \n   typedef uniform_real<double> test_type;"}, {"sha": "eebd50aa6c941b7493ec7855fdead6fb7213dcb2", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/variate_generator/requirements/typedefs.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fvariate_generator%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fvariate_generator%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fvariate_generator%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -24,8 +24,8 @@\n #include <tr1/random>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   using namespace std::tr1;\n \n   typedef variate_generator"}, {"sha": "cc22b972e031d7dbab2230dc30e53e06f6a128b5", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/xor_combine/cons/default.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fxor_combine%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fxor_combine%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fxor_combine%2Fcons%2Fdefault.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -24,7 +24,7 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n+test01()\n {\n   bool test __attribute__((unused)) = true;\n "}, {"sha": "f6185cb06e257cd08076db8f128f02b07acb8f11", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/xor_combine/operators/equal.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fxor_combine%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fxor_combine%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fxor_combine%2Foperators%2Fequal.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -36,7 +36,7 @@ test01()\n     > u, v;\n \n   VERIFY( u == v );\n-  \n+\n   for (int i = 0; i < 100; ++i)\n     {\n       u();"}, {"sha": "724f413867fe3afbe82574aa70918826d8bfda6a", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/xor_combine/operators/serialize.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fxor_combine%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fxor_combine%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fxor_combine%2Foperators%2Fserialize.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -38,12 +38,12 @@ test01()\n     minstd_rand, 1,\n     mt19937, 2\n     > u, v;\n- \n+\n   u(); // advance\n   str << u;\n-  \n+\n   VERIFY( u != v );\n-  \n+\n   str >> v;\n   VERIFY( u == v );\n }"}, {"sha": "4a5336b7fc8cac705c37507288df30beb736060e", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/xor_combine/requirements/typedefs.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fxor_combine%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fxor_combine%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fxor_combine%2Frequirements%2Ftypedefs.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -25,8 +25,8 @@\n #include <tr1/random>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   using namespace std::tr1;\n \n   typedef xor_combine"}, {"sha": "363561065cc846434d628765d9f7d5df8a9c9622", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/01_assoc_laguerre/check_value.cc", "status": "modified", "additions": 704, "deletions": 704, "changes": 1408, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F01_assoc_laguerre%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F01_assoc_laguerre%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F01_assoc_laguerre%2Fcheck_value.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -41,27 +41,27 @@ if (!(A)) \\\n \n // Test data for n=0, m=0.\n testcase_assoc_laguerre<double> data001[] = {\n-  { 1.0000000000000000, 0, 0, \n+  { 1.0000000000000000, 0, 0,\n           0.0000000000000000 },\n-  { 1.0000000000000000, 0, 0, \n+  { 1.0000000000000000, 0, 0,\n           10.000000000000000 },\n-  { 1.0000000000000000, 0, 0, \n+  { 1.0000000000000000, 0, 0,\n           20.000000000000000 },\n-  { 1.0000000000000000, 0, 0, \n+  { 1.0000000000000000, 0, 0,\n           30.000000000000000 },\n-  { 1.0000000000000000, 0, 0, \n+  { 1.0000000000000000, 0, 0,\n           40.000000000000000 },\n-  { 1.0000000000000000, 0, 0, \n+  { 1.0000000000000000, 0, 0,\n           50.000000000000000 },\n-  { 1.0000000000000000, 0, 0, \n+  { 1.0000000000000000, 0, 0,\n           60.000000000000000 },\n-  { 1.0000000000000000, 0, 0, \n+  { 1.0000000000000000, 0, 0,\n           70.000000000000000 },\n-  { 1.0000000000000000, 0, 0, \n+  { 1.0000000000000000, 0, 0,\n           80.000000000000000 },\n-  { 1.0000000000000000, 0, 0, \n+  { 1.0000000000000000, 0, 0,\n           90.000000000000000 },\n-  { 1.0000000000000000, 0, 0, \n+  { 1.0000000000000000, 0, 0,\n           100.00000000000000 },\n };\n \n@@ -95,27 +95,27 @@ void test001()\n \n // Test data for n=0, m=1.\n testcase_assoc_laguerre<double> data002[] = {\n-  { 1.0000000000000000, 0, 1, \n+  { 1.0000000000000000, 0, 1,\n           0.0000000000000000 },\n-  { 1.0000000000000000, 0, 1, \n+  { 1.0000000000000000, 0, 1,\n           10.000000000000000 },\n-  { 1.0000000000000000, 0, 1, \n+  { 1.0000000000000000, 0, 1,\n           20.000000000000000 },\n-  { 1.0000000000000000, 0, 1, \n+  { 1.0000000000000000, 0, 1,\n           30.000000000000000 },\n-  { 1.0000000000000000, 0, 1, \n+  { 1.0000000000000000, 0, 1,\n           40.000000000000000 },\n-  { 1.0000000000000000, 0, 1, \n+  { 1.0000000000000000, 0, 1,\n           50.000000000000000 },\n-  { 1.0000000000000000, 0, 1, \n+  { 1.0000000000000000, 0, 1,\n           60.000000000000000 },\n-  { 1.0000000000000000, 0, 1, \n+  { 1.0000000000000000, 0, 1,\n           70.000000000000000 },\n-  { 1.0000000000000000, 0, 1, \n+  { 1.0000000000000000, 0, 1,\n           80.000000000000000 },\n-  { 1.0000000000000000, 0, 1, \n+  { 1.0000000000000000, 0, 1,\n           90.000000000000000 },\n-  { 1.0000000000000000, 0, 1, \n+  { 1.0000000000000000, 0, 1,\n           100.00000000000000 },\n };\n \n@@ -149,27 +149,27 @@ void test002()\n \n // Test data for n=0, m=2.\n testcase_assoc_laguerre<double> data003[] = {\n-  { 1.0000000000000000, 0, 2, \n+  { 1.0000000000000000, 0, 2,\n           0.0000000000000000 },\n-  { 1.0000000000000000, 0, 2, \n+  { 1.0000000000000000, 0, 2,\n           10.000000000000000 },\n-  { 1.0000000000000000, 0, 2, \n+  { 1.0000000000000000, 0, 2,\n           20.000000000000000 },\n-  { 1.0000000000000000, 0, 2, \n+  { 1.0000000000000000, 0, 2,\n           30.000000000000000 },\n-  { 1.0000000000000000, 0, 2, \n+  { 1.0000000000000000, 0, 2,\n           40.000000000000000 },\n-  { 1.0000000000000000, 0, 2, \n+  { 1.0000000000000000, 0, 2,\n           50.000000000000000 },\n-  { 1.0000000000000000, 0, 2, \n+  { 1.0000000000000000, 0, 2,\n           60.000000000000000 },\n-  { 1.0000000000000000, 0, 2, \n+  { 1.0000000000000000, 0, 2,\n           70.000000000000000 },\n-  { 1.0000000000000000, 0, 2, \n+  { 1.0000000000000000, 0, 2,\n           80.000000000000000 },\n-  { 1.0000000000000000, 0, 2, \n+  { 1.0000000000000000, 0, 2,\n           90.000000000000000 },\n-  { 1.0000000000000000, 0, 2, \n+  { 1.0000000000000000, 0, 2,\n           100.00000000000000 },\n };\n \n@@ -203,27 +203,27 @@ void test003()\n \n // Test data for n=0, m=5.\n testcase_assoc_laguerre<double> data004[] = {\n-  { 1.0000000000000000, 0, 5, \n+  { 1.0000000000000000, 0, 5,\n           0.0000000000000000 },\n-  { 1.0000000000000000, 0, 5, \n+  { 1.0000000000000000, 0, 5,\n           10.000000000000000 },\n-  { 1.0000000000000000, 0, 5, \n+  { 1.0000000000000000, 0, 5,\n           20.000000000000000 },\n-  { 1.0000000000000000, 0, 5, \n+  { 1.0000000000000000, 0, 5,\n           30.000000000000000 },\n-  { 1.0000000000000000, 0, 5, \n+  { 1.0000000000000000, 0, 5,\n           40.000000000000000 },\n-  { 1.0000000000000000, 0, 5, \n+  { 1.0000000000000000, 0, 5,\n           50.000000000000000 },\n-  { 1.0000000000000000, 0, 5, \n+  { 1.0000000000000000, 0, 5,\n           60.000000000000000 },\n-  { 1.0000000000000000, 0, 5, \n+  { 1.0000000000000000, 0, 5,\n           70.000000000000000 },\n-  { 1.0000000000000000, 0, 5, \n+  { 1.0000000000000000, 0, 5,\n           80.000000000000000 },\n-  { 1.0000000000000000, 0, 5, \n+  { 1.0000000000000000, 0, 5,\n           90.000000000000000 },\n-  { 1.0000000000000000, 0, 5, \n+  { 1.0000000000000000, 0, 5,\n           100.00000000000000 },\n };\n \n@@ -257,27 +257,27 @@ void test004()\n \n // Test data for n=0, m=10.\n testcase_assoc_laguerre<double> data005[] = {\n-  { 1.0000000000000000, 0, 10, \n+  { 1.0000000000000000, 0, 10,\n           0.0000000000000000 },\n-  { 1.0000000000000000, 0, 10, \n+  { 1.0000000000000000, 0, 10,\n           10.000000000000000 },\n-  { 1.0000000000000000, 0, 10, \n+  { 1.0000000000000000, 0, 10,\n           20.000000000000000 },\n-  { 1.0000000000000000, 0, 10, \n+  { 1.0000000000000000, 0, 10,\n           30.000000000000000 },\n-  { 1.0000000000000000, 0, 10, \n+  { 1.0000000000000000, 0, 10,\n           40.000000000000000 },\n-  { 1.0000000000000000, 0, 10, \n+  { 1.0000000000000000, 0, 10,\n           50.000000000000000 },\n-  { 1.0000000000000000, 0, 10, \n+  { 1.0000000000000000, 0, 10,\n           60.000000000000000 },\n-  { 1.0000000000000000, 0, 10, \n+  { 1.0000000000000000, 0, 10,\n           70.000000000000000 },\n-  { 1.0000000000000000, 0, 10, \n+  { 1.0000000000000000, 0, 10,\n           80.000000000000000 },\n-  { 1.0000000000000000, 0, 10, \n+  { 1.0000000000000000, 0, 10,\n           90.000000000000000 },\n-  { 1.0000000000000000, 0, 10, \n+  { 1.0000000000000000, 0, 10,\n           100.00000000000000 },\n };\n \n@@ -311,27 +311,27 @@ void test005()\n \n // Test data for n=0, m=20.\n testcase_assoc_laguerre<double> data006[] = {\n-  { 1.0000000000000000, 0, 20, \n+  { 1.0000000000000000, 0, 20,\n           0.0000000000000000 },\n-  { 1.0000000000000000, 0, 20, \n+  { 1.0000000000000000, 0, 20,\n           10.000000000000000 },\n-  { 1.0000000000000000, 0, 20, \n+  { 1.0000000000000000, 0, 20,\n           20.000000000000000 },\n-  { 1.0000000000000000, 0, 20, \n+  { 1.0000000000000000, 0, 20,\n           30.000000000000000 },\n-  { 1.0000000000000000, 0, 20, \n+  { 1.0000000000000000, 0, 20,\n           40.000000000000000 },\n-  { 1.0000000000000000, 0, 20, \n+  { 1.0000000000000000, 0, 20,\n           50.000000000000000 },\n-  { 1.0000000000000000, 0, 20, \n+  { 1.0000000000000000, 0, 20,\n           60.000000000000000 },\n-  { 1.0000000000000000, 0, 20, \n+  { 1.0000000000000000, 0, 20,\n           70.000000000000000 },\n-  { 1.0000000000000000, 0, 20, \n+  { 1.0000000000000000, 0, 20,\n           80.000000000000000 },\n-  { 1.0000000000000000, 0, 20, \n+  { 1.0000000000000000, 0, 20,\n           90.000000000000000 },\n-  { 1.0000000000000000, 0, 20, \n+  { 1.0000000000000000, 0, 20,\n           100.00000000000000 },\n };\n \n@@ -365,27 +365,27 @@ void test006()\n \n // Test data for n=0, m=50.\n testcase_assoc_laguerre<double> data007[] = {\n-  { 1.0000000000000000, 0, 50, \n+  { 1.0000000000000000, 0, 50,\n           0.0000000000000000 },\n-  { 1.0000000000000000, 0, 50, \n+  { 1.0000000000000000, 0, 50,\n           10.000000000000000 },\n-  { 1.0000000000000000, 0, 50, \n+  { 1.0000000000000000, 0, 50,\n           20.000000000000000 },\n-  { 1.0000000000000000, 0, 50, \n+  { 1.0000000000000000, 0, 50,\n           30.000000000000000 },\n-  { 1.0000000000000000, 0, 50, \n+  { 1.0000000000000000, 0, 50,\n           40.000000000000000 },\n-  { 1.0000000000000000, 0, 50, \n+  { 1.0000000000000000, 0, 50,\n           50.000000000000000 },\n-  { 1.0000000000000000, 0, 50, \n+  { 1.0000000000000000, 0, 50,\n           60.000000000000000 },\n-  { 1.0000000000000000, 0, 50, \n+  { 1.0000000000000000, 0, 50,\n           70.000000000000000 },\n-  { 1.0000000000000000, 0, 50, \n+  { 1.0000000000000000, 0, 50,\n           80.000000000000000 },\n-  { 1.0000000000000000, 0, 50, \n+  { 1.0000000000000000, 0, 50,\n           90.000000000000000 },\n-  { 1.0000000000000000, 0, 50, \n+  { 1.0000000000000000, 0, 50,\n           100.00000000000000 },\n };\n \n@@ -419,27 +419,27 @@ void test007()\n \n // Test data for n=0, m=100.\n testcase_assoc_laguerre<double> data008[] = {\n-  { 1.0000000000000000, 0, 100, \n+  { 1.0000000000000000, 0, 100,\n           0.0000000000000000 },\n-  { 1.0000000000000000, 0, 100, \n+  { 1.0000000000000000, 0, 100,\n           10.000000000000000 },\n-  { 1.0000000000000000, 0, 100, \n+  { 1.0000000000000000, 0, 100,\n           20.000000000000000 },\n-  { 1.0000000000000000, 0, 100, \n+  { 1.0000000000000000, 0, 100,\n           30.000000000000000 },\n-  { 1.0000000000000000, 0, 100, \n+  { 1.0000000000000000, 0, 100,\n           40.000000000000000 },\n-  { 1.0000000000000000, 0, 100, \n+  { 1.0000000000000000, 0, 100,\n           50.000000000000000 },\n-  { 1.0000000000000000, 0, 100, \n+  { 1.0000000000000000, 0, 100,\n           60.000000000000000 },\n-  { 1.0000000000000000, 0, 100, \n+  { 1.0000000000000000, 0, 100,\n           70.000000000000000 },\n-  { 1.0000000000000000, 0, 100, \n+  { 1.0000000000000000, 0, 100,\n           80.000000000000000 },\n-  { 1.0000000000000000, 0, 100, \n+  { 1.0000000000000000, 0, 100,\n           90.000000000000000 },\n-  { 1.0000000000000000, 0, 100, \n+  { 1.0000000000000000, 0, 100,\n           100.00000000000000 },\n };\n \n@@ -473,27 +473,27 @@ void test008()\n \n // Test data for n=1, m=0.\n testcase_assoc_laguerre<double> data009[] = {\n-  { 1.0000000000000000, 1, 0, \n+  { 1.0000000000000000, 1, 0,\n           0.0000000000000000 },\n-  { -9.0000000000000000, 1, 0, \n+  { -9.0000000000000000, 1, 0,\n           10.000000000000000 },\n-  { -19.000000000000000, 1, 0, \n+  { -19.000000000000000, 1, 0,\n           20.000000000000000 },\n-  { -29.000000000000000, 1, 0, \n+  { -29.000000000000000, 1, 0,\n           30.000000000000000 },\n-  { -39.000000000000000, 1, 0, \n+  { -39.000000000000000, 1, 0,\n           40.000000000000000 },\n-  { -49.000000000000000, 1, 0, \n+  { -49.000000000000000, 1, 0,\n           50.000000000000000 },\n-  { -59.000000000000000, 1, 0, \n+  { -59.000000000000000, 1, 0,\n           60.000000000000000 },\n-  { -69.000000000000000, 1, 0, \n+  { -69.000000000000000, 1, 0,\n           70.000000000000000 },\n-  { -79.000000000000000, 1, 0, \n+  { -79.000000000000000, 1, 0,\n           80.000000000000000 },\n-  { -89.000000000000000, 1, 0, \n+  { -89.000000000000000, 1, 0,\n           90.000000000000000 },\n-  { -99.000000000000000, 1, 0, \n+  { -99.000000000000000, 1, 0,\n           100.00000000000000 },\n };\n \n@@ -527,27 +527,27 @@ void test009()\n \n // Test data for n=1, m=1.\n testcase_assoc_laguerre<double> data010[] = {\n-  { 2.0000000000000000, 1, 1, \n+  { 2.0000000000000000, 1, 1,\n           0.0000000000000000 },\n-  { -8.0000000000000000, 1, 1, \n+  { -8.0000000000000000, 1, 1,\n           10.000000000000000 },\n-  { -18.000000000000000, 1, 1, \n+  { -18.000000000000000, 1, 1,\n           20.000000000000000 },\n-  { -28.000000000000000, 1, 1, \n+  { -28.000000000000000, 1, 1,\n           30.000000000000000 },\n-  { -38.000000000000000, 1, 1, \n+  { -38.000000000000000, 1, 1,\n           40.000000000000000 },\n-  { -48.000000000000000, 1, 1, \n+  { -48.000000000000000, 1, 1,\n           50.000000000000000 },\n-  { -58.000000000000000, 1, 1, \n+  { -58.000000000000000, 1, 1,\n           60.000000000000000 },\n-  { -68.000000000000000, 1, 1, \n+  { -68.000000000000000, 1, 1,\n           70.000000000000000 },\n-  { -78.000000000000000, 1, 1, \n+  { -78.000000000000000, 1, 1,\n           80.000000000000000 },\n-  { -88.000000000000000, 1, 1, \n+  { -88.000000000000000, 1, 1,\n           90.000000000000000 },\n-  { -98.000000000000000, 1, 1, \n+  { -98.000000000000000, 1, 1,\n           100.00000000000000 },\n };\n \n@@ -581,27 +581,27 @@ void test010()\n \n // Test data for n=1, m=2.\n testcase_assoc_laguerre<double> data011[] = {\n-  { 3.0000000000000000, 1, 2, \n+  { 3.0000000000000000, 1, 2,\n           0.0000000000000000 },\n-  { -7.0000000000000000, 1, 2, \n+  { -7.0000000000000000, 1, 2,\n           10.000000000000000 },\n-  { -17.000000000000000, 1, 2, \n+  { -17.000000000000000, 1, 2,\n           20.000000000000000 },\n-  { -27.000000000000000, 1, 2, \n+  { -27.000000000000000, 1, 2,\n           30.000000000000000 },\n-  { -37.000000000000000, 1, 2, \n+  { -37.000000000000000, 1, 2,\n           40.000000000000000 },\n-  { -47.000000000000000, 1, 2, \n+  { -47.000000000000000, 1, 2,\n           50.000000000000000 },\n-  { -57.000000000000000, 1, 2, \n+  { -57.000000000000000, 1, 2,\n           60.000000000000000 },\n-  { -67.000000000000000, 1, 2, \n+  { -67.000000000000000, 1, 2,\n           70.000000000000000 },\n-  { -77.000000000000000, 1, 2, \n+  { -77.000000000000000, 1, 2,\n           80.000000000000000 },\n-  { -87.000000000000000, 1, 2, \n+  { -87.000000000000000, 1, 2,\n           90.000000000000000 },\n-  { -97.000000000000000, 1, 2, \n+  { -97.000000000000000, 1, 2,\n           100.00000000000000 },\n };\n \n@@ -635,27 +635,27 @@ void test011()\n \n // Test data for n=1, m=5.\n testcase_assoc_laguerre<double> data012[] = {\n-  { 6.0000000000000000, 1, 5, \n+  { 6.0000000000000000, 1, 5,\n           0.0000000000000000 },\n-  { -4.0000000000000000, 1, 5, \n+  { -4.0000000000000000, 1, 5,\n           10.000000000000000 },\n-  { -14.000000000000000, 1, 5, \n+  { -14.000000000000000, 1, 5,\n           20.000000000000000 },\n-  { -24.000000000000000, 1, 5, \n+  { -24.000000000000000, 1, 5,\n           30.000000000000000 },\n-  { -34.000000000000000, 1, 5, \n+  { -34.000000000000000, 1, 5,\n           40.000000000000000 },\n-  { -44.000000000000000, 1, 5, \n+  { -44.000000000000000, 1, 5,\n           50.000000000000000 },\n-  { -54.000000000000000, 1, 5, \n+  { -54.000000000000000, 1, 5,\n           60.000000000000000 },\n-  { -64.000000000000000, 1, 5, \n+  { -64.000000000000000, 1, 5,\n           70.000000000000000 },\n-  { -74.000000000000000, 1, 5, \n+  { -74.000000000000000, 1, 5,\n           80.000000000000000 },\n-  { -84.000000000000000, 1, 5, \n+  { -84.000000000000000, 1, 5,\n           90.000000000000000 },\n-  { -94.000000000000000, 1, 5, \n+  { -94.000000000000000, 1, 5,\n           100.00000000000000 },\n };\n \n@@ -689,27 +689,27 @@ void test012()\n \n // Test data for n=1, m=10.\n testcase_assoc_laguerre<double> data013[] = {\n-  { 11.000000000000000, 1, 10, \n+  { 11.000000000000000, 1, 10,\n           0.0000000000000000 },\n-  { 1.0000000000000000, 1, 10, \n+  { 1.0000000000000000, 1, 10,\n           10.000000000000000 },\n-  { -9.0000000000000000, 1, 10, \n+  { -9.0000000000000000, 1, 10,\n           20.000000000000000 },\n-  { -19.000000000000000, 1, 10, \n+  { -19.000000000000000, 1, 10,\n           30.000000000000000 },\n-  { -29.000000000000000, 1, 10, \n+  { -29.000000000000000, 1, 10,\n           40.000000000000000 },\n-  { -39.000000000000000, 1, 10, \n+  { -39.000000000000000, 1, 10,\n           50.000000000000000 },\n-  { -49.000000000000000, 1, 10, \n+  { -49.000000000000000, 1, 10,\n           60.000000000000000 },\n-  { -59.000000000000000, 1, 10, \n+  { -59.000000000000000, 1, 10,\n           70.000000000000000 },\n-  { -69.000000000000000, 1, 10, \n+  { -69.000000000000000, 1, 10,\n           80.000000000000000 },\n-  { -79.000000000000000, 1, 10, \n+  { -79.000000000000000, 1, 10,\n           90.000000000000000 },\n-  { -89.000000000000000, 1, 10, \n+  { -89.000000000000000, 1, 10,\n           100.00000000000000 },\n };\n \n@@ -743,27 +743,27 @@ void test013()\n \n // Test data for n=1, m=20.\n testcase_assoc_laguerre<double> data014[] = {\n-  { 21.000000000000000, 1, 20, \n+  { 21.000000000000000, 1, 20,\n           0.0000000000000000 },\n-  { 11.000000000000000, 1, 20, \n+  { 11.000000000000000, 1, 20,\n           10.000000000000000 },\n-  { 1.0000000000000000, 1, 20, \n+  { 1.0000000000000000, 1, 20,\n           20.000000000000000 },\n-  { -9.0000000000000000, 1, 20, \n+  { -9.0000000000000000, 1, 20,\n           30.000000000000000 },\n-  { -19.000000000000000, 1, 20, \n+  { -19.000000000000000, 1, 20,\n           40.000000000000000 },\n-  { -29.000000000000000, 1, 20, \n+  { -29.000000000000000, 1, 20,\n           50.000000000000000 },\n-  { -39.000000000000000, 1, 20, \n+  { -39.000000000000000, 1, 20,\n           60.000000000000000 },\n-  { -49.000000000000000, 1, 20, \n+  { -49.000000000000000, 1, 20,\n           70.000000000000000 },\n-  { -59.000000000000000, 1, 20, \n+  { -59.000000000000000, 1, 20,\n           80.000000000000000 },\n-  { -69.000000000000000, 1, 20, \n+  { -69.000000000000000, 1, 20,\n           90.000000000000000 },\n-  { -79.000000000000000, 1, 20, \n+  { -79.000000000000000, 1, 20,\n           100.00000000000000 },\n };\n \n@@ -797,27 +797,27 @@ void test014()\n \n // Test data for n=1, m=50.\n testcase_assoc_laguerre<double> data015[] = {\n-  { 51.000000000000000, 1, 50, \n+  { 51.000000000000000, 1, 50,\n           0.0000000000000000 },\n-  { 41.000000000000000, 1, 50, \n+  { 41.000000000000000, 1, 50,\n           10.000000000000000 },\n-  { 31.000000000000000, 1, 50, \n+  { 31.000000000000000, 1, 50,\n           20.000000000000000 },\n-  { 21.000000000000000, 1, 50, \n+  { 21.000000000000000, 1, 50,\n           30.000000000000000 },\n-  { 11.000000000000000, 1, 50, \n+  { 11.000000000000000, 1, 50,\n           40.000000000000000 },\n-  { 1.0000000000000000, 1, 50, \n+  { 1.0000000000000000, 1, 50,\n           50.000000000000000 },\n-  { -9.0000000000000000, 1, 50, \n+  { -9.0000000000000000, 1, 50,\n           60.000000000000000 },\n-  { -19.000000000000000, 1, 50, \n+  { -19.000000000000000, 1, 50,\n           70.000000000000000 },\n-  { -29.000000000000000, 1, 50, \n+  { -29.000000000000000, 1, 50,\n           80.000000000000000 },\n-  { -39.000000000000000, 1, 50, \n+  { -39.000000000000000, 1, 50,\n           90.000000000000000 },\n-  { -49.000000000000000, 1, 50, \n+  { -49.000000000000000, 1, 50,\n           100.00000000000000 },\n };\n \n@@ -851,27 +851,27 @@ void test015()\n \n // Test data for n=1, m=100.\n testcase_assoc_laguerre<double> data016[] = {\n-  { 101.00000000000000, 1, 100, \n+  { 101.00000000000000, 1, 100,\n           0.0000000000000000 },\n-  { 91.000000000000000, 1, 100, \n+  { 91.000000000000000, 1, 100,\n           10.000000000000000 },\n-  { 81.000000000000000, 1, 100, \n+  { 81.000000000000000, 1, 100,\n           20.000000000000000 },\n-  { 71.000000000000000, 1, 100, \n+  { 71.000000000000000, 1, 100,\n           30.000000000000000 },\n-  { 61.000000000000000, 1, 100, \n+  { 61.000000000000000, 1, 100,\n           40.000000000000000 },\n-  { 51.000000000000000, 1, 100, \n+  { 51.000000000000000, 1, 100,\n           50.000000000000000 },\n-  { 41.000000000000000, 1, 100, \n+  { 41.000000000000000, 1, 100,\n           60.000000000000000 },\n-  { 31.000000000000000, 1, 100, \n+  { 31.000000000000000, 1, 100,\n           70.000000000000000 },\n-  { 21.000000000000000, 1, 100, \n+  { 21.000000000000000, 1, 100,\n           80.000000000000000 },\n-  { 11.000000000000000, 1, 100, \n+  { 11.000000000000000, 1, 100,\n           90.000000000000000 },\n-  { 1.0000000000000000, 1, 100, \n+  { 1.0000000000000000, 1, 100,\n           100.00000000000000 },\n };\n \n@@ -905,27 +905,27 @@ void test016()\n \n // Test data for n=2, m=0.\n testcase_assoc_laguerre<double> data017[] = {\n-  { 1.0000000000000000, 2, 0, \n+  { 1.0000000000000000, 2, 0,\n           0.0000000000000000 },\n-  { 31.000000000000000, 2, 0, \n+  { 31.000000000000000, 2, 0,\n           10.000000000000000 },\n-  { 161.00000000000000, 2, 0, \n+  { 161.00000000000000, 2, 0,\n           20.000000000000000 },\n-  { 391.00000000000000, 2, 0, \n+  { 391.00000000000000, 2, 0,\n           30.000000000000000 },\n-  { 721.00000000000000, 2, 0, \n+  { 721.00000000000000, 2, 0,\n           40.000000000000000 },\n-  { 1151.0000000000000, 2, 0, \n+  { 1151.0000000000000, 2, 0,\n           50.000000000000000 },\n-  { 1681.0000000000000, 2, 0, \n+  { 1681.0000000000000, 2, 0,\n           60.000000000000000 },\n-  { 2311.0000000000000, 2, 0, \n+  { 2311.0000000000000, 2, 0,\n           70.000000000000000 },\n-  { 3041.0000000000000, 2, 0, \n+  { 3041.0000000000000, 2, 0,\n           80.000000000000000 },\n-  { 3871.0000000000000, 2, 0, \n+  { 3871.0000000000000, 2, 0,\n           90.000000000000000 },\n-  { 4801.0000000000000, 2, 0, \n+  { 4801.0000000000000, 2, 0,\n           100.00000000000000 },\n };\n \n@@ -959,27 +959,27 @@ void test017()\n \n // Test data for n=2, m=1.\n testcase_assoc_laguerre<double> data018[] = {\n-  { 3.0000000000000000, 2, 1, \n+  { 3.0000000000000000, 2, 1,\n           0.0000000000000000 },\n-  { 23.000000000000000, 2, 1, \n+  { 23.000000000000000, 2, 1,\n           10.000000000000000 },\n-  { 143.00000000000000, 2, 1, \n+  { 143.00000000000000, 2, 1,\n           20.000000000000000 },\n-  { 363.00000000000000, 2, 1, \n+  { 363.00000000000000, 2, 1,\n           30.000000000000000 },\n-  { 683.00000000000000, 2, 1, \n+  { 683.00000000000000, 2, 1,\n           40.000000000000000 },\n-  { 1103.0000000000000, 2, 1, \n+  { 1103.0000000000000, 2, 1,\n           50.000000000000000 },\n-  { 1623.0000000000000, 2, 1, \n+  { 1623.0000000000000, 2, 1,\n           60.000000000000000 },\n-  { 2243.0000000000000, 2, 1, \n+  { 2243.0000000000000, 2, 1,\n           70.000000000000000 },\n-  { 2963.0000000000000, 2, 1, \n+  { 2963.0000000000000, 2, 1,\n           80.000000000000000 },\n-  { 3783.0000000000000, 2, 1, \n+  { 3783.0000000000000, 2, 1,\n           90.000000000000000 },\n-  { 4703.0000000000000, 2, 1, \n+  { 4703.0000000000000, 2, 1,\n           100.00000000000000 },\n };\n \n@@ -1013,27 +1013,27 @@ void test018()\n \n // Test data for n=2, m=2.\n testcase_assoc_laguerre<double> data019[] = {\n-  { 6.0000000000000000, 2, 2, \n+  { 6.0000000000000000, 2, 2,\n           0.0000000000000000 },\n-  { 16.000000000000000, 2, 2, \n+  { 16.000000000000000, 2, 2,\n           10.000000000000000 },\n-  { 126.00000000000000, 2, 2, \n+  { 126.00000000000000, 2, 2,\n           20.000000000000000 },\n-  { 336.00000000000000, 2, 2, \n+  { 336.00000000000000, 2, 2,\n           30.000000000000000 },\n-  { 646.00000000000000, 2, 2, \n+  { 646.00000000000000, 2, 2,\n           40.000000000000000 },\n-  { 1056.0000000000000, 2, 2, \n+  { 1056.0000000000000, 2, 2,\n           50.000000000000000 },\n-  { 1566.0000000000000, 2, 2, \n+  { 1566.0000000000000, 2, 2,\n           60.000000000000000 },\n-  { 2176.0000000000000, 2, 2, \n+  { 2176.0000000000000, 2, 2,\n           70.000000000000000 },\n-  { 2886.0000000000000, 2, 2, \n+  { 2886.0000000000000, 2, 2,\n           80.000000000000000 },\n-  { 3696.0000000000000, 2, 2, \n+  { 3696.0000000000000, 2, 2,\n           90.000000000000000 },\n-  { 4606.0000000000000, 2, 2, \n+  { 4606.0000000000000, 2, 2,\n           100.00000000000000 },\n };\n \n@@ -1067,27 +1067,27 @@ void test019()\n \n // Test data for n=2, m=5.\n testcase_assoc_laguerre<double> data020[] = {\n-  { 21.000000000000000, 2, 5, \n+  { 21.000000000000000, 2, 5,\n           0.0000000000000000 },\n-  { 0.99999999999999645, 2, 5, \n+  { 0.99999999999999645, 2, 5,\n           10.000000000000000 },\n-  { 81.000000000000000, 2, 5, \n+  { 81.000000000000000, 2, 5,\n           20.000000000000000 },\n-  { 261.00000000000000, 2, 5, \n+  { 261.00000000000000, 2, 5,\n           30.000000000000000 },\n-  { 541.00000000000000, 2, 5, \n+  { 541.00000000000000, 2, 5,\n           40.000000000000000 },\n-  { 921.00000000000000, 2, 5, \n+  { 921.00000000000000, 2, 5,\n           50.000000000000000 },\n-  { 1401.0000000000000, 2, 5, \n+  { 1401.0000000000000, 2, 5,\n           60.000000000000000 },\n-  { 1981.0000000000000, 2, 5, \n+  { 1981.0000000000000, 2, 5,\n           70.000000000000000 },\n-  { 2661.0000000000000, 2, 5, \n+  { 2661.0000000000000, 2, 5,\n           80.000000000000000 },\n-  { 3441.0000000000000, 2, 5, \n+  { 3441.0000000000000, 2, 5,\n           90.000000000000000 },\n-  { 4321.0000000000000, 2, 5, \n+  { 4321.0000000000000, 2, 5,\n           100.00000000000000 },\n };\n \n@@ -1121,27 +1121,27 @@ void test020()\n \n // Test data for n=2, m=10.\n testcase_assoc_laguerre<double> data021[] = {\n-  { 66.000000000000000, 2, 10, \n+  { 66.000000000000000, 2, 10,\n           0.0000000000000000 },\n-  { -4.0000000000000089, 2, 10, \n+  { -4.0000000000000089, 2, 10,\n           10.000000000000000 },\n-  { 25.999999999999964, 2, 10, \n+  { 25.999999999999964, 2, 10,\n           20.000000000000000 },\n-  { 156.00000000000000, 2, 10, \n+  { 156.00000000000000, 2, 10,\n           30.000000000000000 },\n-  { 386.00000000000000, 2, 10, \n+  { 386.00000000000000, 2, 10,\n           40.000000000000000 },\n-  { 716.00000000000000, 2, 10, \n+  { 716.00000000000000, 2, 10,\n           50.000000000000000 },\n-  { 1146.0000000000000, 2, 10, \n+  { 1146.0000000000000, 2, 10,\n           60.000000000000000 },\n-  { 1676.0000000000000, 2, 10, \n+  { 1676.0000000000000, 2, 10,\n           70.000000000000000 },\n-  { 2306.0000000000000, 2, 10, \n+  { 2306.0000000000000, 2, 10,\n           80.000000000000000 },\n-  { 3036.0000000000000, 2, 10, \n+  { 3036.0000000000000, 2, 10,\n           90.000000000000000 },\n-  { 3866.0000000000000, 2, 10, \n+  { 3866.0000000000000, 2, 10,\n           100.00000000000000 },\n };\n \n@@ -1175,27 +1175,27 @@ void test021()\n \n // Test data for n=2, m=20.\n testcase_assoc_laguerre<double> data022[] = {\n-  { 231.00000000000000, 2, 20, \n+  { 231.00000000000000, 2, 20,\n           0.0000000000000000 },\n-  { 61.000000000000206, 2, 20, \n+  { 61.000000000000206, 2, 20,\n           10.000000000000000 },\n-  { -8.9999999999999982, 2, 20, \n+  { -8.9999999999999982, 2, 20,\n           20.000000000000000 },\n-  { 21.000000000000135, 2, 20, \n+  { 21.000000000000135, 2, 20,\n           30.000000000000000 },\n-  { 151.00000000000054, 2, 20, \n+  { 151.00000000000054, 2, 20,\n           40.000000000000000 },\n-  { 381.00000000000000, 2, 20, \n+  { 381.00000000000000, 2, 20,\n           50.000000000000000 },\n-  { 711.00000000000000, 2, 20, \n+  { 711.00000000000000, 2, 20,\n           60.000000000000000 },\n-  { 1141.0000000000000, 2, 20, \n+  { 1141.0000000000000, 2, 20,\n           70.000000000000000 },\n-  { 1670.9999999999998, 2, 20, \n+  { 1670.9999999999998, 2, 20,\n           80.000000000000000 },\n-  { 2301.0000000000000, 2, 20, \n+  { 2301.0000000000000, 2, 20,\n           90.000000000000000 },\n-  { 3031.0000000000000, 2, 20, \n+  { 3031.0000000000000, 2, 20,\n           100.00000000000000 },\n };\n \n@@ -1229,27 +1229,27 @@ void test022()\n \n // Test data for n=2, m=50.\n testcase_assoc_laguerre<double> data023[] = {\n-  { 1326.0000000000000, 2, 50, \n+  { 1326.0000000000000, 2, 50,\n           0.0000000000000000 },\n-  { 855.99999999999716, 2, 50, \n+  { 855.99999999999716, 2, 50,\n           10.000000000000000 },\n-  { 485.99999999999829, 2, 50, \n+  { 485.99999999999829, 2, 50,\n           20.000000000000000 },\n-  { 215.99999999999935, 2, 50, \n+  { 215.99999999999935, 2, 50,\n           30.000000000000000 },\n-  { 45.999999999999787, 2, 50, \n+  { 45.999999999999787, 2, 50,\n           40.000000000000000 },\n-  { -23.999999999999684, 2, 50, \n+  { -23.999999999999684, 2, 50,\n           50.000000000000000 },\n-  { 6.0000000000001217, 2, 50, \n+  { 6.0000000000001217, 2, 50,\n           60.000000000000000 },\n-  { 135.99999999999972, 2, 50, \n+  { 135.99999999999972, 2, 50,\n           70.000000000000000 },\n-  { 365.99999999999892, 2, 50, \n+  { 365.99999999999892, 2, 50,\n           80.000000000000000 },\n-  { 695.99999999999784, 2, 50, \n+  { 695.99999999999784, 2, 50,\n           90.000000000000000 },\n-  { 1125.9999999999964, 2, 50, \n+  { 1125.9999999999964, 2, 50,\n           100.00000000000000 },\n };\n \n@@ -1283,27 +1283,27 @@ void test023()\n \n // Test data for n=2, m=100.\n testcase_assoc_laguerre<double> data024[] = {\n-  { 5151.0000000000000, 2, 100, \n+  { 5151.0000000000000, 2, 100,\n           0.0000000000000000 },\n-  { 4181.0000000000655, 2, 100, \n+  { 4181.0000000000655, 2, 100,\n           10.000000000000000 },\n-  { 3311.0000000000518, 2, 100, \n+  { 3311.0000000000518, 2, 100,\n           20.000000000000000 },\n-  { 2541.0000000000400, 2, 100, \n+  { 2541.0000000000400, 2, 100,\n           30.000000000000000 },\n-  { 1871.0000000000291, 2, 100, \n+  { 1871.0000000000291, 2, 100,\n           40.000000000000000 },\n-  { 1301.0000000000207, 2, 100, \n+  { 1301.0000000000207, 2, 100,\n           50.000000000000000 },\n-  { 831.00000000001364, 2, 100, \n+  { 831.00000000001364, 2, 100,\n           60.000000000000000 },\n-  { 461.00000000000682, 2, 100, \n+  { 461.00000000000682, 2, 100,\n           70.000000000000000 },\n-  { 191.00000000000227, 2, 100, \n+  { 191.00000000000227, 2, 100,\n           80.000000000000000 },\n-  { 21.000000000000128, 2, 100, \n+  { 21.000000000000128, 2, 100,\n           90.000000000000000 },\n-  { -49.000000000000369, 2, 100, \n+  { -49.000000000000369, 2, 100,\n           100.00000000000000 },\n };\n \n@@ -1337,27 +1337,27 @@ void test024()\n \n // Test data for n=5, m=0.\n testcase_assoc_laguerre<double> data025[] = {\n-  { 1.0000000000000000, 5, 0, \n+  { 1.0000000000000000, 5, 0,\n           0.0000000000000000 },\n-  { 34.333333333333329, 5, 0, \n+  { 34.333333333333329, 5, 0,\n           10.000000000000000 },\n-  { -4765.6666666666670, 5, 0, \n+  { -4765.6666666666670, 5, 0,\n           20.000000000000000 },\n-  { -74399.000000000000, 5, 0, \n+  { -74399.000000000000, 5, 0,\n           30.000000000000000 },\n-  { -418865.66666666663, 5, 0, \n+  { -418865.66666666663, 5, 0,\n           40.000000000000000 },\n-  { -1498165.6666666665, 5, 0, \n+  { -1498165.6666666665, 5, 0,\n           50.000000000000000 },\n-  { -4122299.0000000000, 5, 0, \n+  { -4122299.0000000000, 5, 0,\n           60.000000000000000 },\n-  { -9551265.6666666679, 5, 0, \n+  { -9551265.6666666679, 5, 0,\n           70.000000000000000 },\n-  { -19595065.666666664, 5, 0, \n+  { -19595065.666666664, 5, 0,\n           80.000000000000000 },\n-  { -36713699.000000000, 5, 0, \n+  { -36713699.000000000, 5, 0,\n           90.000000000000000 },\n-  { -64117165.666666664, 5, 0, \n+  { -64117165.666666664, 5, 0,\n           100.00000000000000 },\n };\n \n@@ -1391,27 +1391,27 @@ void test025()\n \n // Test data for n=5, m=1.\n testcase_assoc_laguerre<double> data026[] = {\n-  { 6.0000000000000000, 5, 1, \n+  { 6.0000000000000000, 5, 1,\n           0.0000000000000000 },\n-  { 22.666666666666661, 5, 1, \n+  { 22.666666666666661, 5, 1,\n           10.000000000000000 },\n-  { -2960.6666666666661, 5, 1, \n+  { -2960.6666666666661, 5, 1,\n           20.000000000000000 },\n-  { -58944.000000000000, 5, 1, \n+  { -58944.000000000000, 5, 1,\n           30.000000000000000 },\n-  { -357927.33333333326, 5, 1, \n+  { -357927.33333333326, 5, 1,\n           40.000000000000000 },\n-  { -1329910.6666666665, 5, 1, \n+  { -1329910.6666666665, 5, 1,\n           50.000000000000000 },\n-  { -3744894.0000000000, 5, 1, \n+  { -3744894.0000000000, 5, 1,\n           60.000000000000000 },\n-  { -8812877.3333333321, 5, 1, \n+  { -8812877.3333333321, 5, 1,\n           70.000000000000000 },\n-  { -18283860.666666664, 5, 1, \n+  { -18283860.666666664, 5, 1,\n           80.000000000000000 },\n-  { -34547844.000000000, 5, 1, \n+  { -34547844.000000000, 5, 1,\n           90.000000000000000 },\n-  { -60734827.333333336, 5, 1, \n+  { -60734827.333333336, 5, 1,\n           100.00000000000000 },\n };\n \n@@ -1445,27 +1445,27 @@ void test026()\n \n // Test data for n=5, m=2.\n testcase_assoc_laguerre<double> data027[] = {\n-  { 21.000000000000000, 5, 2, \n+  { 21.000000000000000, 5, 2,\n           0.0000000000000000 },\n-  { 4.3333333333333339, 5, 2, \n+  { 4.3333333333333339, 5, 2,\n           10.000000000000000 },\n-  { -1679.0000000000000, 5, 2, \n+  { -1679.0000000000000, 5, 2,\n           20.000000000000000 },\n-  { -46029.000000000000, 5, 2, \n+  { -46029.000000000000, 5, 2,\n           30.000000000000000 },\n-  { -304045.66666666669, 5, 2, \n+  { -304045.66666666669, 5, 2,\n           40.000000000000000 },\n-  { -1176729.0000000002, 5, 2, \n+  { -1176729.0000000002, 5, 2,\n           50.000000000000000 },\n-  { -3395079.0000000000, 5, 2, \n+  { -3395079.0000000000, 5, 2,\n           60.000000000000000 },\n-  { -8120095.6666666660, 5, 2, \n+  { -8120095.6666666660, 5, 2,\n           70.000000000000000 },\n-  { -17042778.999999996, 5, 2, \n+  { -17042778.999999996, 5, 2,\n           80.000000000000000 },\n-  { -32484129.000000000, 5, 2, \n+  { -32484129.000000000, 5, 2,\n           90.000000000000000 },\n-  { -57495145.666666664, 5, 2, \n+  { -57495145.666666664, 5, 2,\n           100.00000000000000 },\n };\n \n@@ -1499,27 +1499,27 @@ void test027()\n \n // Test data for n=5, m=5.\n testcase_assoc_laguerre<double> data028[] = {\n-  { 252.00000000000000, 5, 5, \n+  { 252.00000000000000, 5, 5,\n           0.0000000000000000 },\n-  { -14.666666666666657, 5, 5, \n+  { -14.666666666666657, 5, 5,\n           10.000000000000000 },\n-  { 51.999999999999957, 5, 5, \n+  { 51.999999999999957, 5, 5,\n           20.000000000000000 },\n-  { -19548.000000000000, 5, 5, \n+  { -19548.000000000000, 5, 5,\n           30.000000000000000 },\n-  { -178814.66666666660, 5, 5, \n+  { -178814.66666666660, 5, 5,\n           40.000000000000000 },\n-  { -797747.99999999977, 5, 5, \n+  { -797747.99999999977, 5, 5,\n           50.000000000000000 },\n-  { -2496348.0000000000, 5, 5, \n+  { -2496348.0000000000, 5, 5,\n           60.000000000000000 },\n-  { -6294614.6666666660, 5, 5, \n+  { -6294614.6666666660, 5, 5,\n           70.000000000000000 },\n-  { -13712547.999999996, 5, 5, \n+  { -13712547.999999996, 5, 5,\n           80.000000000000000 },\n-  { -26870147.999999993, 5, 5, \n+  { -26870147.999999993, 5, 5,\n           90.000000000000000 },\n-  { -48587414.666666672, 5, 5, \n+  { -48587414.666666672, 5, 5,\n           100.00000000000000 },\n };\n \n@@ -1553,27 +1553,27 @@ void test028()\n \n // Test data for n=5, m=10.\n testcase_assoc_laguerre<double> data029[] = {\n-  { 3003.0000000000000, 5, 10, \n+  { 3003.0000000000000, 5, 10,\n           0.0000000000000000 },\n-  { 19.666666666666668, 5, 10, \n+  { 19.666666666666668, 5, 10,\n           10.000000000000000 },\n-  { 36.333333333333272, 5, 10, \n+  { 36.333333333333272, 5, 10,\n           20.000000000000000 },\n-  { -1947.0000000000000, 5, 10, \n+  { -1947.0000000000000, 5, 10,\n           30.000000000000000 },\n-  { -60930.333333333314, 5, 10, \n+  { -60930.333333333314, 5, 10,\n           40.000000000000000 },\n-  { -381913.66666666651, 5, 10, \n+  { -381913.66666666651, 5, 10,\n           50.000000000000000 },\n-  { -1419897.0000000000, 5, 10, \n+  { -1419897.0000000000, 5, 10,\n           60.000000000000000 },\n-  { -3979880.3333333330, 5, 10, \n+  { -3979880.3333333330, 5, 10,\n           70.000000000000000 },\n-  { -9316863.6666666642, 5, 10, \n+  { -9316863.6666666642, 5, 10,\n           80.000000000000000 },\n-  { -19235847.000000000, 5, 10, \n+  { -19235847.000000000, 5, 10,\n           90.000000000000000 },\n-  { -36191830.333333328, 5, 10, \n+  { -36191830.333333328, 5, 10,\n           100.00000000000000 },\n };\n \n@@ -1607,27 +1607,27 @@ void test029()\n \n // Test data for n=5, m=20.\n testcase_assoc_laguerre<double> data030[] = {\n-  { 53130.000000000000, 5, 20, \n+  { 53130.000000000000, 5, 20,\n           0.0000000000000000 },\n-  { 1213.3333333333335, 5, 20, \n+  { 1213.3333333333335, 5, 20,\n           10.000000000000000 },\n-  { 129.99999999999963, 5, 20, \n+  { 129.99999999999963, 5, 20,\n           20.000000000000000 },\n-  { -119.99999999999974, 5, 20, \n+  { -119.99999999999974, 5, 20,\n           30.000000000000000 },\n-  { 463.33333333333320, 5, 20, \n+  { 463.33333333333320, 5, 20,\n           40.000000000000000 },\n-  { -48120.000000000015, 5, 20, \n+  { -48120.000000000015, 5, 20,\n           50.000000000000000 },\n-  { -345870.00000000017, 5, 20, \n+  { -345870.00000000017, 5, 20,\n           60.000000000000000 },\n-  { -1342786.6666666667, 5, 20, \n+  { -1342786.6666666667, 5, 20,\n           70.000000000000000 },\n-  { -3838870.0000000009, 5, 20, \n+  { -3838870.0000000009, 5, 20,\n           80.000000000000000 },\n-  { -9084120.0000000000, 5, 20, \n+  { -9084120.0000000000, 5, 20,\n           90.000000000000000 },\n-  { -18878536.666666668, 5, 20, \n+  { -18878536.666666668, 5, 20,\n           100.00000000000000 },\n };\n \n@@ -1661,27 +1661,27 @@ void test030()\n \n // Test data for n=5, m=50.\n testcase_assoc_laguerre<double> data031[] = {\n-  { 3478761.0000000000, 5, 50, \n+  { 3478761.0000000000, 5, 50,\n           0.0000000000000000 },\n-  { 1154544.3333333335, 5, 50, \n+  { 1154544.3333333335, 5, 50,\n           10.000000000000000 },\n-  { 264661.00000000006, 5, 50, \n+  { 264661.00000000006, 5, 50,\n           20.000000000000000 },\n-  { 24111.000000000000, 5, 50, \n+  { 24111.000000000000, 5, 50,\n           30.000000000000000 },\n-  { -2105.6666666666665, 5, 50, \n+  { -2105.6666666666665, 5, 50,\n           40.000000000000000 },\n-  { 1011.0000000000000, 5, 50, \n+  { 1011.0000000000000, 5, 50,\n           50.000000000000000 },\n-  { -1538.9999999999955, 5, 50, \n+  { -1538.9999999999955, 5, 50,\n           60.000000000000000 },\n-  { 5244.3333333333449, 5, 50, \n+  { 5244.3333333333449, 5, 50,\n           70.000000000000000 },\n-  { -13639.000000000015, 5, 50, \n+  { -13639.000000000015, 5, 50,\n           80.000000000000000 },\n-  { -243189.00000000006, 5, 50, \n+  { -243189.00000000006, 5, 50,\n           90.000000000000000 },\n-  { -1118405.6666666667, 5, 50, \n+  { -1118405.6666666667, 5, 50,\n           100.00000000000000 },\n };\n \n@@ -1715,27 +1715,27 @@ void test031()\n \n // Test data for n=5, m=100.\n testcase_assoc_laguerre<double> data032[] = {\n-  { 96560646.000000000, 5, 100, \n+  { 96560646.000000000, 5, 100,\n           0.0000000000000000 },\n-  { 57264262.666666649, 5, 100, \n+  { 57264262.666666649, 5, 100,\n           10.000000000000000 },\n-  { 31841379.333333332, 5, 100, \n+  { 31841379.333333332, 5, 100,\n           20.000000000000000 },\n-  { 16281996.000000000, 5, 100, \n+  { 16281996.000000000, 5, 100,\n           30.000000000000000 },\n-  { 7426112.6666666670, 5, 100, \n+  { 7426112.6666666670, 5, 100,\n           40.000000000000000 },\n-  { 2863729.3333333330, 5, 100, \n+  { 2863729.3333333330, 5, 100,\n           50.000000000000000 },\n-  { 834846.00000000000, 5, 100, \n+  { 834846.00000000000, 5, 100,\n           60.000000000000000 },\n-  { 129462.66666666663, 5, 100, \n+  { 129462.66666666663, 5, 100,\n           70.000000000000000 },\n-  { -12420.666666666666, 5, 100, \n+  { -12420.666666666666, 5, 100,\n           80.000000000000000 },\n-  { -804.00000000000000, 5, 100, \n+  { -804.00000000000000, 5, 100,\n           90.000000000000000 },\n-  { 4312.6666666666661, 5, 100, \n+  { 4312.6666666666661, 5, 100,\n           100.00000000000000 },\n };\n \n@@ -1769,27 +1769,27 @@ void test032()\n \n // Test data for n=10, m=0.\n testcase_assoc_laguerre<double> data033[] = {\n-  { 1.0000000000000000, 10, 0, \n+  { 1.0000000000000000, 10, 0,\n           0.0000000000000000 },\n-  { 27.984126984126981, 10, 0, \n+  { 27.984126984126981, 10, 0,\n           10.000000000000000 },\n-  { 3227.8077601410932, 10, 0, \n+  { 3227.8077601410932, 10, 0,\n           20.000000000000000 },\n-  { 15129.571428571489, 10, 0, \n+  { 15129.571428571489, 10, 0,\n           30.000000000000000 },\n-  { 79724066.608465582, 10, 0, \n+  { 79724066.608465582, 10, 0,\n           40.000000000000000 },\n-  { 2037190065.3738980, 10, 0, \n+  { 2037190065.3738980, 10, 0,\n           50.000000000000000 },\n-  { 21804200401.000000, 10, 0, \n+  { 21804200401.000000, 10, 0,\n           60.000000000000000 },\n-  { 144688291819.51855, 10, 0, \n+  { 144688291819.51855, 10, 0,\n           70.000000000000000 },\n-  { 703324772760.08276, 10, 0, \n+  { 703324772760.08276, 10, 0,\n           80.000000000000000 },\n-  { 2741055412243.8569, 10, 0, \n+  { 2741055412243.8569, 10, 0,\n           90.000000000000000 },\n-  { 9051283795429.5723, 10, 0, \n+  { 9051283795429.5723, 10, 0,\n           100.00000000000000 },\n };\n \n@@ -1823,27 +1823,27 @@ void test033()\n \n // Test data for n=10, m=1.\n testcase_assoc_laguerre<double> data034[] = {\n-  { 11.000000000000000, 10, 1, \n+  { 11.000000000000000, 10, 1,\n           0.0000000000000000 },\n-  { 14.791887125220455, 10, 1, \n+  { 14.791887125220455, 10, 1,\n           10.000000000000000 },\n-  { 2704.6507936507933, 10, 1, \n+  { 2704.6507936507933, 10, 1,\n           20.000000000000000 },\n-  { -182924.71428571426, 10, 1, \n+  { -182924.71428571426, 10, 1,\n           30.000000000000000 },\n-  { 48066036.749559075, 10, 1, \n+  { 48066036.749559075, 10, 1,\n           40.000000000000000 },\n-  { 1486264192.2169311, 10, 1, \n+  { 1486264192.2169311, 10, 1,\n           50.000000000000000 },\n-  { 17239562282.428574, 10, 1, \n+  { 17239562282.428574, 10, 1,\n           60.000000000000000 },\n-  { 119837491630.13579, 10, 1, \n+  { 119837491630.13579, 10, 1,\n           70.000000000000000 },\n-  { 600681375251.21167, 10, 1, \n+  { 600681375251.21167, 10, 1,\n           80.000000000000000 },\n-  { 2392908405632.4287, 10, 1, \n+  { 2392908405632.4287, 10, 1,\n           90.000000000000000 },\n-  { 8033035722509.2373, 10, 1, \n+  { 8033035722509.2373, 10, 1,\n           100.00000000000000 },\n };\n \n@@ -1877,27 +1877,27 @@ void test034()\n \n // Test data for n=10, m=2.\n testcase_assoc_laguerre<double> data035[] = {\n-  { 66.000000000000000, 10, 2, \n+  { 66.000000000000000, 10, 2,\n           0.0000000000000000 },\n-  { -14.511463844797174, 10, 2, \n+  { -14.511463844797174, 10, 2,\n           10.000000000000000 },\n-  { 1064.5890652557318, 10, 2, \n+  { 1064.5890652557318, 10, 2,\n           20.000000000000000 },\n-  { -194569.71428571426, 10, 2, \n+  { -194569.71428571426, 10, 2,\n           30.000000000000000 },\n-  { 27343569.350970022, 10, 2, \n+  { 27343569.350970022, 10, 2,\n           40.000000000000000 },\n-  { 1067807661.6790125, 10, 2, \n+  { 1067807661.6790125, 10, 2,\n           50.000000000000000 },\n-  { 13529451580.285713, 10, 2, \n+  { 13529451580.285713, 10, 2,\n           60.000000000000000 },\n-  { 98812724224.641937, 10, 2, \n+  { 98812724224.641937, 10, 2,\n           70.000000000000000 },\n-  { 511482736187.34021, 10, 2, \n+  { 511482736187.34021, 10, 2,\n           80.000000000000000 },\n-  { 2084478393087.4285, 10, 2, \n+  { 2084478393087.4285, 10, 2,\n           90.000000000000000 },\n-  { 7117724862237.0752, 10, 2, \n+  { 7117724862237.0752, 10, 2,\n           100.00000000000000 },\n };\n \n@@ -1931,27 +1931,27 @@ void test035()\n \n // Test data for n=10, m=5.\n testcase_assoc_laguerre<double> data036[] = {\n-  { 3003.0000000000000, 10, 5, \n+  { 3003.0000000000000, 10, 5,\n           0.0000000000000000 },\n-  { 11.641975308642024, 10, 5, \n+  { 11.641975308642024, 10, 5,\n           10.000000000000000 },\n-  { -1137.5643738977069, 10, 5, \n+  { -1137.5643738977069, 10, 5,\n           20.000000000000000 },\n-  { -9254.1428571428605, 10, 5, \n+  { -9254.1428571428605, 10, 5,\n           30.000000000000000 },\n-  { 2121878.8377425023, 10, 5, \n+  { 2121878.8377425023, 10, 5,\n           40.000000000000000 },\n-  { 352060171.43033499, 10, 5, \n+  { 352060171.43033499, 10, 5,\n           50.000000000000000 },\n-  { 6212028560.1428576, 10, 5, \n+  { 6212028560.1428576, 10, 5,\n           60.000000000000000 },\n-  { 53782171674.604919, 10, 5, \n+  { 53782171674.604919, 10, 5,\n           70.000000000000000 },\n-  { 309720255837.56775, 10, 5, \n+  { 309720255837.56775, 10, 5,\n           80.000000000000000 },\n-  { 1359043035731.5713, 10, 5, \n+  { 1359043035731.5713, 10, 5,\n           90.000000000000000 },\n-  { 4900625954398.9434, 10, 5, \n+  { 4900625954398.9434, 10, 5,\n           100.00000000000000 },\n };\n \n@@ -1985,27 +1985,27 @@ void test036()\n \n // Test data for n=10, m=10.\n testcase_assoc_laguerre<double> data037[] = {\n-  { 184756.00000000000, 10, 10, \n+  { 184756.00000000000, 10, 10,\n           0.0000000000000000 },\n-  { -210.84303350970018, 10, 10, \n+  { -210.84303350970018, 10, 10,\n           10.000000000000000 },\n-  { 508.38095238095184, 10, 10, \n+  { 508.38095238095184, 10, 10,\n           20.000000000000000 },\n-  { 2098.8571428571431, 10, 10, \n+  { 2098.8571428571431, 10, 10,\n           30.000000000000000 },\n-  { -536338.88536155189, 10, 10, \n+  { -536338.88536155189, 10, 10,\n           40.000000000000000 },\n-  { 24865988.804232784, 10, 10, \n+  { 24865988.804232784, 10, 10,\n           50.000000000000000 },\n-  { 1343756013.1428571, 10, 10, \n+  { 1343756013.1428571, 10, 10,\n           60.000000000000000 },\n-  { 17298791247.358025, 10, 10, \n+  { 17298791247.358025, 10, 10,\n           70.000000000000000 },\n-  { 124528450897.79892, 10, 10, \n+  { 124528450897.79892, 10, 10,\n           80.000000000000000 },\n-  { 632674413641.71423, 10, 10, \n+  { 632674413641.71423, 10, 10,\n           90.000000000000000 },\n-  { 2533008935405.0298, 10, 10, \n+  { 2533008935405.0298, 10, 10,\n           100.00000000000000 },\n };\n \n@@ -2039,27 +2039,27 @@ void test037()\n \n // Test data for n=10, m=20.\n testcase_assoc_laguerre<double> data038[] = {\n-  { 30045014.999999993, 10, 20, \n+  { 30045014.999999993, 10, 20,\n           0.0000000000000000 },\n-  { -23087.733686067022, 10, 20, \n+  { -23087.733686067022, 10, 20,\n           10.000000000000000 },\n-  { 207.23985890652347, 10, 20, \n+  { 207.23985890652347, 10, 20,\n           20.000000000000000 },\n-  { 1407.8571428571497, 10, 20, \n+  { 1407.8571428571497, 10, 20,\n           30.000000000000000 },\n-  { -44618.156966490329, 10, 20, \n+  { -44618.156966490329, 10, 20,\n           40.000000000000000 },\n-  { 158690.04409171085, 10, 20, \n+  { 158690.04409171085, 10, 20,\n           50.000000000000000 },\n-  { -6870413.5714285728, 10, 20, \n+  { -6870413.5714285728, 10, 20,\n           60.000000000000000 },\n-  { 793841351.41975331, 10, 20, \n+  { 793841351.41975331, 10, 20,\n           70.000000000000000 },\n-  { 13358288958.562618, 10, 20, \n+  { 13358288958.562618, 10, 20,\n           80.000000000000000 },\n-  { 106073722407.85715, 10, 20, \n+  { 106073722407.85715, 10, 20,\n           90.000000000000000 },\n-  { 566337213392.42493, 10, 20, \n+  { 566337213392.42493, 10, 20,\n           100.00000000000000 },\n };\n \n@@ -2093,27 +2093,27 @@ void test038()\n \n // Test data for n=10, m=50.\n testcase_assoc_laguerre<double> data039[] = {\n-  { 75394027566.000000, 10, 50, \n+  { 75394027566.000000, 10, 50,\n           0.0000000000000000 },\n-  { 8048106183.3721361, 10, 50, \n+  { 8048106183.3721361, 10, 50,\n           10.000000000000000 },\n-  { 328045023.84832466, 10, 50, \n+  { 328045023.84832466, 10, 50,\n           20.000000000000000 },\n-  { -2568769.7142857141, 10, 50, \n+  { -2568769.7142857141, 10, 50,\n           30.000000000000000 },\n-  { 6971.9964726631733, 10, 50, \n+  { 6971.9964726631733, 10, 50,\n           40.000000000000000 },\n-  { 136111.41446208110, 10, 50, \n+  { 136111.41446208110, 10, 50,\n           50.000000000000000 },\n-  { -62462.571428570242, 10, 50, \n+  { -62462.571428570242, 10, 50,\n           60.000000000000000 },\n-  { -248167.95061728527, 10, 50, \n+  { -248167.95061728527, 10, 50,\n           70.000000000000000 },\n-  { 1941270.4091710777, 10, 50, \n+  { 1941270.4091710777, 10, 50,\n           80.000000000000000 },\n-  { -8643512.5714285783, 10, 50, \n+  { -8643512.5714285783, 10, 50,\n           90.000000000000000 },\n-  { -140863522.18342155, 10, 50, \n+  { -140863522.18342155, 10, 50,\n           100.00000000000000 },\n };\n \n@@ -2147,27 +2147,27 @@ void test039()\n \n // Test data for n=10, m=100.\n testcase_assoc_laguerre<double> data040[] = {\n-  { 46897636623981.000, 10, 100, \n+  { 46897636623981.000, 10, 100,\n           0.0000000000000000 },\n-  { 16444031323272.084, 10, 100, \n+  { 16444031323272.084, 10, 100,\n           10.000000000000000 },\n-  { 5020343986463.5391, 10, 100, \n+  { 5020343986463.5391, 10, 100,\n           20.000000000000000 },\n-  { 1270977490645.2859, 10, 100, \n+  { 1270977490645.2859, 10, 100,\n           30.000000000000000 },\n-  { 244835756822.62262, 10, 100, \n+  { 244835756822.62262, 10, 100,\n           40.000000000000000 },\n-  { 29786827693.962963, 10, 100, \n+  { 29786827693.962963, 10, 100,\n           50.000000000000000 },\n-  { 1127612095.2857144, 10, 100, \n+  { 1127612095.2857144, 10, 100,\n           60.000000000000000 },\n-  { -66370555.419753075, 10, 100, \n+  { -66370555.419753075, 10, 100,\n           70.000000000000000 },\n-  { 10420852.957671957, 10, 100, \n+  { 10420852.957671957, 10, 100,\n           80.000000000000000 },\n-  { -3373097.5714285718, 10, 100, \n+  { -3373097.5714285718, 10, 100,\n           90.000000000000000 },\n-  { 2065423.6807760142, 10, 100, \n+  { 2065423.6807760142, 10, 100,\n           100.00000000000000 },\n };\n \n@@ -2201,27 +2201,27 @@ void test040()\n \n // Test data for n=20, m=0.\n testcase_assoc_laguerre<double> data041[] = {\n-  { 1.0000000000000000, 20, 0, \n+  { 1.0000000000000000, 20, 0,\n           0.0000000000000000 },\n-  { -11.961333867812119, 20, 0, \n+  { -11.961333867812119, 20, 0,\n           10.000000000000000 },\n-  { 2829.4728613531738, 20, 0, \n+  { 2829.4728613531738, 20, 0,\n           20.000000000000000 },\n-  { -18439.424502520938, 20, 0, \n+  { -18439.424502520938, 20, 0,\n           30.000000000000000 },\n-  { 24799805.877530701, 20, 0, \n+  { 24799805.877530701, 20, 0,\n           40.000000000000000 },\n-  { 7551960453.7672529, 20, 0, \n+  { 7551960453.7672529, 20, 0,\n           50.000000000000000 },\n-  { -1379223608444.9155, 20, 0, \n+  { -1379223608444.9155, 20, 0,\n           60.000000000000000 },\n-  { 165423821874449.94, 20, 0, \n+  { 165423821874449.94, 20, 0,\n           70.000000000000000 },\n-  { 29500368536981676., 20, 0, \n+  { 29500368536981676., 20, 0,\n           80.000000000000000 },\n-  { 1.1292309514432899e+18, 20, 0, \n+  { 1.1292309514432899e+18, 20, 0,\n           90.000000000000000 },\n-  { 2.2061882785931735e+19, 20, 0, \n+  { 2.2061882785931735e+19, 20, 0,\n           100.00000000000000 },\n };\n \n@@ -2255,27 +2255,27 @@ void test041()\n \n // Test data for n=20, m=1.\n testcase_assoc_laguerre<double> data042[] = {\n-  { 21.000000000000000, 20, 1, \n+  { 21.000000000000000, 20, 1,\n           0.0000000000000000 },\n-  { 19.900488129734079, 20, 1, \n+  { 19.900488129734079, 20, 1,\n           10.000000000000000 },\n-  { 2208.0318569557589, 20, 1, \n+  { 2208.0318569557589, 20, 1,\n           20.000000000000000 },\n-  { 263690.96303121914, 20, 1, \n+  { 263690.96303121914, 20, 1,\n           30.000000000000000 },\n-  { 40667285.630564235, 20, 1, \n+  { 40667285.630564235, 20, 1,\n           40.000000000000000 },\n-  { 1737442572.8115418, 20, 1, \n+  { 1737442572.8115418, 20, 1,\n           50.000000000000000 },\n-  { -588280953643.28125, 20, 1, \n+  { -588280953643.28125, 20, 1,\n           60.000000000000000 },\n-  { 45617733778241.359, 20, 1, \n+  { 45617733778241.359, 20, 1,\n           70.000000000000000 },\n-  { 17293487114876860., 20, 1, \n+  { 17293487114876860., 20, 1,\n           80.000000000000000 },\n-  { 7.6219135858585024e+17, 20, 1, \n+  { 7.6219135858585024e+17, 20, 1,\n           90.000000000000000 },\n-  { 1.6037288204336759e+19, 20, 1, \n+  { 1.6037288204336759e+19, 20, 1,\n           100.00000000000000 },\n };\n \n@@ -2309,27 +2309,27 @@ void test042()\n \n // Test data for n=20, m=2.\n testcase_assoc_laguerre<double> data043[] = {\n-  { 231.00000000000003, 20, 2, \n+  { 231.00000000000003, 20, 2,\n           0.0000000000000000 },\n-  { 47.009338065112935, 20, 2, \n+  { 47.009338065112935, 20, 2,\n           10.000000000000000 },\n-  { -652.51305461728566, 20, 2, \n+  { -652.51305461728566, 20, 2,\n           20.000000000000000 },\n-  { 285388.25895069109, 20, 2, \n+  { 285388.25895069109, 20, 2,\n           30.000000000000000 },\n-  { 28664069.685624726, 20, 2, \n+  { 28664069.685624726, 20, 2,\n           40.000000000000000 },\n-  { -1399631966.3144732, 20, 2, \n+  { -1399631966.3144732, 20, 2,\n           50.000000000000000 },\n-  { -115357373248.28198, 20, 2, \n+  { -115357373248.28198, 20, 2,\n           60.000000000000000 },\n-  { -3357730872975.8545, 20, 2, \n+  { -3357730872975.8545, 20, 2,\n           70.000000000000000 },\n-  { 9765808962855122.0, 20, 2, \n+  { 9765808962855122.0, 20, 2,\n           80.000000000000000 },\n-  { 5.0717292945559181e+17, 20, 2, \n+  { 5.0717292945559181e+17, 20, 2,\n           90.000000000000000 },\n-  { 1.1564665701334458e+19, 20, 2, \n+  { 1.1564665701334458e+19, 20, 2,\n           100.00000000000000 },\n };\n \n@@ -2363,27 +2363,27 @@ void test043()\n \n // Test data for n=20, m=5.\n testcase_assoc_laguerre<double> data044[] = {\n-  { 53130.000000000000, 20, 5, \n+  { 53130.000000000000, 20, 5,\n           0.0000000000000000 },\n-  { -158.69554500944145, 20, 5, \n+  { -158.69554500944145, 20, 5,\n           10.000000000000000 },\n-  { 334.08012288038969, 20, 5, \n+  { 334.08012288038969, 20, 5,\n           20.000000000000000 },\n-  { -198372.47662554169, 20, 5, \n+  { -198372.47662554169, 20, 5,\n           30.000000000000000 },\n-  { -13627144.088579427, 20, 5, \n+  { -13627144.088579427, 20, 5,\n           40.000000000000000 },\n-  { -780579985.44731593, 20, 5, \n+  { -780579985.44731593, 20, 5,\n           50.000000000000000 },\n-  { 116648634237.73526, 20, 5, \n+  { 116648634237.73526, 20, 5,\n           60.000000000000000 },\n-  { -12347348707739.742, 20, 5, \n+  { -12347348707739.742, 20, 5,\n           70.000000000000000 },\n-  { 1199516248034090.8, 20, 5, \n+  { 1199516248034090.8, 20, 5,\n           80.000000000000000 },\n-  { 1.3451503195078531e+17, 20, 5, \n+  { 1.3451503195078531e+17, 20, 5,\n           90.000000000000000 },\n-  { 4.1058904276111483e+18, 20, 5, \n+  { 4.1058904276111483e+18, 20, 5,\n           100.00000000000000 },\n };\n \n@@ -2417,27 +2417,27 @@ void test044()\n \n // Test data for n=20, m=10.\n testcase_assoc_laguerre<double> data045[] = {\n-  { 30045015.000000000, 20, 10, \n+  { 30045015.000000000, 20, 10,\n           0.0000000000000000 },\n-  { -1755.6226861258590, 20, 10, \n+  { -1755.6226861258590, 20, 10,\n           10.000000000000000 },\n-  { -9081.6726644737901, 20, 10, \n+  { -9081.6726644737901, 20, 10,\n           20.000000000000000 },\n-  { 95771.650912113109, 20, 10, \n+  { 95771.650912113109, 20, 10,\n           30.000000000000000 },\n-  { 5089151.9272779226, 20, 10, \n+  { 5089151.9272779226, 20, 10,\n           40.000000000000000 },\n-  { 97400399.450206712, 20, 10, \n+  { 97400399.450206712, 20, 10,\n           50.000000000000000 },\n-  { -16009352450.477026, 20, 10, \n+  { -16009352450.477026, 20, 10,\n           60.000000000000000 },\n-  { 842271286905.01038, 20, 10, \n+  { 842271286905.01038, 20, 10,\n           70.000000000000000 },\n-  { -79901725466796.938, 20, 10, \n+  { -79901725466796.938, 20, 10,\n           80.000000000000000 },\n-  { 7944103675858638.0, 20, 10, \n+  { 7944103675858638.0, 20, 10,\n           90.000000000000000 },\n-  { 5.7429821893388288e+17, 20, 10, \n+  { 5.7429821893388288e+17, 20, 10,\n           100.00000000000000 },\n };\n \n@@ -2471,27 +2471,27 @@ void test045()\n \n // Test data for n=20, m=20.\n testcase_assoc_laguerre<double> data046[] = {\n-  { 137846528819.99994, 20, 20, \n+  { 137846528819.99994, 20, 20,\n           0.0000000000000000 },\n-  { -136976.49571333214, 20, 20, \n+  { -136976.49571333214, 20, 20,\n           10.000000000000000 },\n-  { 113878.49908041637, 20, 20, \n+  { 113878.49908041637, 20, 20,\n           20.000000000000000 },\n-  { -342529.21778796182, 20, 20, \n+  { -342529.21778796182, 20, 20,\n           30.000000000000000 },\n-  { -350112.66981443466, 20, 20, \n+  { -350112.66981443466, 20, 20,\n           40.000000000000000 },\n-  { -10791735.172977794, 20, 20, \n+  { -10791735.172977794, 20, 20,\n           50.000000000000000 },\n-  { -1038073940.0811402, 20, 20, \n+  { -1038073940.0811402, 20, 20,\n           60.000000000000000 },\n-  { 667312550.63616371, 20, 20, \n+  { 667312550.63616371, 20, 20,\n           70.000000000000000 },\n-  { 741537869902.29028, 20, 20, \n+  { 741537869902.29028, 20, 20,\n           80.000000000000000 },\n-  { -32378376755737.418, 20, 20, \n+  { -32378376755737.418, 20, 20,\n           90.000000000000000 },\n-  { -601760332167934.75, 20, 20, \n+  { -601760332167934.75, 20, 20,\n           100.00000000000000 },\n };\n \n@@ -2525,27 +2525,27 @@ void test046()\n \n // Test data for n=20, m=50.\n testcase_assoc_laguerre<double> data047[] = {\n-  { 1.6188460366265789e+17, 20, 50, \n+  { 1.6188460366265789e+17, 20, 50,\n           0.0000000000000000 },\n-  { 1599011936804291.5, 20, 50, \n+  { 1599011936804291.5, 20, 50,\n           10.000000000000000 },\n-  { -131273880831.42412, 20, 50, \n+  { -131273880831.42412, 20, 50,\n           20.000000000000000 },\n-  { -3133213093.6903501, 20, 50, \n+  { -3133213093.6903501, 20, 50,\n           30.000000000000000 },\n-  { -213935628.04985175, 20, 50, \n+  { -213935628.04985175, 20, 50,\n           40.000000000000000 },\n-  { -47375578.495921209, 20, 50, \n+  { -47375578.495921209, 20, 50,\n           50.000000000000000 },\n-  { -115731015.14034875, 20, 50, \n+  { -115731015.14034875, 20, 50,\n           60.000000000000000 },\n-  { -737415147.29420292, 20, 50, \n+  { -737415147.29420292, 20, 50,\n           70.000000000000000 },\n-  { -2123455626.8621781, 20, 50, \n+  { -2123455626.8621781, 20, 50,\n           80.000000000000000 },\n-  { 29801266858.608925, 20, 50, \n+  { 29801266858.608925, 20, 50,\n           90.000000000000000 },\n-  { -132886631026.82561, 20, 50, \n+  { -132886631026.82561, 20, 50,\n           100.00000000000000 },\n };\n \n@@ -2579,27 +2579,27 @@ void test047()\n \n // Test data for n=20, m=100.\n testcase_assoc_laguerre<double> data048[] = {\n-  { 2.9462227291176643e+22, 20, 100, \n+  { 2.9462227291176643e+22, 20, 100,\n           0.0000000000000000 },\n-  { 3.5777890748701244e+21, 20, 100, \n+  { 3.5777890748701244e+21, 20, 100,\n           10.000000000000000 },\n-  { 3.1584925521456765e+20, 20, 100, \n+  { 3.1584925521456765e+20, 20, 100,\n           20.000000000000000 },\n-  { 1.7389599388424860e+19, 20, 100, \n+  { 1.7389599388424860e+19, 20, 100,\n           30.000000000000000 },\n-  { 4.1401342745980646e+17, 20, 100, \n+  { 4.1401342745980646e+17, 20, 100,\n           40.000000000000000 },\n-  { -79359706102062.672, 20, 100, \n+  { -79359706102062.672, 20, 100,\n           50.000000000000000 },\n-  { 22736203650743.145, 20, 100, \n+  { 22736203650743.145, 20, 100,\n           60.000000000000000 },\n-  { 65679006380.095215, 20, 100, \n+  { 65679006380.095215, 20, 100,\n           70.000000000000000 },\n-  { -236263257610.77969, 20, 100, \n+  { -236263257610.77969, 20, 100,\n           80.000000000000000 },\n-  { -38072644585.303085, 20, 100, \n+  { -38072644585.303085, 20, 100,\n           90.000000000000000 },\n-  { 68236474365.173950, 20, 100, \n+  { 68236474365.173950, 20, 100,\n           100.00000000000000 },\n };\n \n@@ -2633,27 +2633,27 @@ void test048()\n \n // Test data for n=50, m=0.\n testcase_assoc_laguerre<double> data049[] = {\n-  { 1.0000000000000000, 50, 0, \n+  { 1.0000000000000000, 50, 0,\n           0.0000000000000000 },\n-  { 17.534183446338233, 50, 0, \n+  { 17.534183446338233, 50, 0,\n           10.000000000000000 },\n-  { 980.26961889790766, 50, 0, \n+  { 980.26961889790766, 50, 0,\n           20.000000000000000 },\n-  { 293000.50735962350, 50, 0, \n+  { 293000.50735962350, 50, 0,\n           30.000000000000000 },\n-  { -14896937.968694847, 50, 0, \n+  { -14896937.968694847, 50, 0,\n           40.000000000000000 },\n-  { 2513677852.6916885, 50, 0, \n+  { 2513677852.6916885, 50, 0,\n           50.000000000000000 },\n-  { -883876565337.99207, 50, 0, \n+  { -883876565337.99207, 50, 0,\n           60.000000000000000 },\n-  { -80967880733583.219, 50, 0, \n+  { -80967880733583.219, 50, 0,\n           70.000000000000000 },\n-  { -8217471769564850.0, 50, 0, \n+  { -8217471769564850.0, 50, 0,\n           80.000000000000000 },\n-  { -2.1140031308048906e+18, 50, 0, \n+  { -2.1140031308048906e+18, 50, 0,\n           90.000000000000000 },\n-  { -3.9710103487094673e+20, 50, 0, \n+  { -3.9710103487094673e+20, 50, 0,\n           100.00000000000000 },\n };\n \n@@ -2687,27 +2687,27 @@ void test049()\n \n // Test data for n=50, m=1.\n testcase_assoc_laguerre<double> data050[] = {\n-  { 51.000000000000021, 50, 1, \n+  { 51.000000000000021, 50, 1,\n           0.0000000000000000 },\n-  { 1.4214573271640045, 50, 1, \n+  { 1.4214573271640045, 50, 1,\n           10.000000000000000 },\n-  { -2574.8072295127863, 50, 1, \n+  { -2574.8072295127863, 50, 1,\n           20.000000000000000 },\n-  { 35846.479728359256, 50, 1, \n+  { 35846.479728359256, 50, 1,\n           30.000000000000000 },\n-  { -48263698.768318526, 50, 1, \n+  { -48263698.768318526, 50, 1,\n           40.000000000000000 },\n-  { 6161525870.2738571, 50, 1, \n+  { 6161525870.2738571, 50, 1,\n           50.000000000000000 },\n-  { -382655486658.47101, 50, 1, \n+  { -382655486658.47101, 50, 1,\n           60.000000000000000 },\n-  { -109635579833241.69, 50, 1, \n+  { -109635579833241.69, 50, 1,\n           70.000000000000000 },\n-  { -14623805817283476., 50, 1, \n+  { -14623805817283476., 50, 1,\n           80.000000000000000 },\n-  { -2.0666847190878118e+18, 50, 1, \n+  { -2.0666847190878118e+18, 50, 1,\n           90.000000000000000 },\n-  { -1.4385187953997626e+20, 50, 1, \n+  { -1.4385187953997626e+20, 50, 1,\n           100.00000000000000 },\n };\n \n@@ -2741,27 +2741,27 @@ void test050()\n \n // Test data for n=50, m=2.\n testcase_assoc_laguerre<double> data051[] = {\n-  { 1326.0000000000000, 50, 2, \n+  { 1326.0000000000000, 50, 2,\n           0.0000000000000000 },\n-  { -87.860732516444671, 50, 2, \n+  { -87.860732516444671, 50, 2,\n           10.000000000000000 },\n-  { -5203.2351191780890, 50, 2, \n+  { -5203.2351191780890, 50, 2,\n           20.000000000000000 },\n-  { -461059.50012538873, 50, 2, \n+  { -461059.50012538873, 50, 2,\n           30.000000000000000 },\n-  { -30476695.327440601, 50, 2, \n+  { -30476695.327440601, 50, 2,\n           40.000000000000000 },\n-  { 3720804977.9338136, 50, 2, \n+  { 3720804977.9338136, 50, 2,\n           50.000000000000000 },\n-  { 362262002434.51440, 50, 2, \n+  { 362262002434.51440, 50, 2,\n           60.000000000000000 },\n-  { -52210917867820.273, 50, 2, \n+  { -52210917867820.273, 50, 2,\n           70.000000000000000 },\n-  { -9567965136901918.0, 50, 2, \n+  { -9567965136901918.0, 50, 2,\n           80.000000000000000 },\n-  { -8.9171277517712806e+17, 50, 2, \n+  { -8.9171277517712806e+17, 50, 2,\n           90.000000000000000 },\n-  { 5.7231129448807039e+19, 50, 2, \n+  { 5.7231129448807039e+19, 50, 2,\n           100.00000000000000 },\n };\n \n@@ -2795,27 +2795,27 @@ void test051()\n \n // Test data for n=50, m=5.\n testcase_assoc_laguerre<double> data052[] = {\n-  { 3478761.0000000000, 50, 5, \n+  { 3478761.0000000000, 50, 5,\n           0.0000000000000000 },\n-  { 1055.8381917651493, 50, 5, \n+  { 1055.8381917651493, 50, 5,\n           10.000000000000000 },\n-  { 15264.646660345048, 50, 5, \n+  { 15264.646660345048, 50, 5,\n           20.000000000000000 },\n-  { 1229651.8966600855, 50, 5, \n+  { 1229651.8966600855, 50, 5,\n           30.000000000000000 },\n-  { 39270451.823656857, 50, 5, \n+  { 39270451.823656857, 50, 5,\n           40.000000000000000 },\n-  { -4424062601.1152067, 50, 5, \n+  { -4424062601.1152067, 50, 5,\n           50.000000000000000 },\n-  { -186017434284.19220, 50, 5, \n+  { -186017434284.19220, 50, 5,\n           60.000000000000000 },\n-  { 50972853949302.602, 50, 5, \n+  { 50972853949302.602, 50, 5,\n           70.000000000000000 },\n-  { 6530702754012518.0, 50, 5, \n+  { 6530702754012518.0, 50, 5,\n           80.000000000000000 },\n-  { 6.8387592714678016e+17, 50, 5, \n+  { 6.8387592714678016e+17, 50, 5,\n           90.000000000000000 },\n-  { 3.9198742504338366e+19, 50, 5, \n+  { 3.9198742504338366e+19, 50, 5,\n           100.00000000000000 },\n };\n \n@@ -2849,27 +2849,27 @@ void test052()\n \n // Test data for n=50, m=10.\n testcase_assoc_laguerre<double> data053[] = {\n-  { 75394027565.999985, 50, 10, \n+  { 75394027565.999985, 50, 10,\n           0.0000000000000000 },\n-  { 91833.924098770134, 50, 10, \n+  { 91833.924098770134, 50, 10,\n           10.000000000000000 },\n-  { 330501.87929778261, 50, 10, \n+  { 330501.87929778261, 50, 10,\n           20.000000000000000 },\n-  { 3625088.1635972545, 50, 10, \n+  { 3625088.1635972545, 50, 10,\n           30.000000000000000 },\n-  { 213954727.28632003, 50, 10, \n+  { 213954727.28632003, 50, 10,\n           40.000000000000000 },\n-  { -9381006937.7517643, 50, 10, \n+  { -9381006937.7517643, 50, 10,\n           50.000000000000000 },\n-  { 535333683777.48627, 50, 10, \n+  { 535333683777.48627, 50, 10,\n           60.000000000000000 },\n-  { 18824406573722.156, 50, 10, \n+  { 18824406573722.156, 50, 10,\n           70.000000000000000 },\n-  { -533858276780012.81, 50, 10, \n+  { -533858276780012.81, 50, 10,\n           80.000000000000000 },\n-  { -52995774666704024., 50, 10, \n+  { -52995774666704024., 50, 10,\n           90.000000000000000 },\n-  { 6.0504182862448855e+18, 50, 10, \n+  { 6.0504182862448855e+18, 50, 10,\n           100.00000000000000 },\n };\n \n@@ -2903,27 +2903,27 @@ void test053()\n \n // Test data for n=50, m=20.\n testcase_assoc_laguerre<double> data054[] = {\n-  { 1.6188460366265779e+17, 50, 20, \n+  { 1.6188460366265779e+17, 50, 20,\n           0.0000000000000000 },\n-  { -307637087.25169420, 50, 20, \n+  { -307637087.25169420, 50, 20,\n           10.000000000000000 },\n-  { 12524651.102974579, 50, 20, \n+  { 12524651.102974579, 50, 20,\n           20.000000000000000 },\n-  { -315460483.86210549, 50, 20, \n+  { -315460483.86210549, 50, 20,\n           30.000000000000000 },\n-  { -1889683587.3459976, 50, 20, \n+  { -1889683587.3459976, 50, 20,\n           40.000000000000000 },\n-  { 37457044404.200340, 50, 20, \n+  { 37457044404.200340, 50, 20,\n           50.000000000000000 },\n-  { -843831858224.71826, 50, 20, \n+  { -843831858224.71826, 50, 20,\n           60.000000000000000 },\n-  { -92231643172.313248, 50, 20, \n+  { -92231643172.313248, 50, 20,\n           70.000000000000000 },\n-  { 904211757769501.25, 50, 20, \n+  { 904211757769501.25, 50, 20,\n           80.000000000000000 },\n-  { 46508193600283288., 50, 20, \n+  { 46508193600283288., 50, 20,\n           90.000000000000000 },\n-  { 2.3216887928162714e+18, 50, 20, \n+  { 2.3216887928162714e+18, 50, 20,\n           100.00000000000000 },\n };\n \n@@ -2957,27 +2957,27 @@ void test054()\n \n // Test data for n=50, m=50.\n testcase_assoc_laguerre<double> data055[] = {\n-  { 1.0089134454556417e+29, 50, 50, \n+  { 1.0089134454556417e+29, 50, 50,\n           0.0000000000000000 },\n-  { 1.3822795753070569e+23, 50, 50, \n+  { 1.3822795753070569e+23, 50, 50,\n           10.000000000000000 },\n-  { 95817260381628416., 50, 50, \n+  { 95817260381628416., 50, 50,\n           20.000000000000000 },\n-  { -910798580856013.88, 50, 50, \n+  { -910798580856013.88, 50, 50,\n           30.000000000000000 },\n-  { 50513254049166.719, 50, 50, \n+  { 50513254049166.719, 50, 50,\n           40.000000000000000 },\n-  { 84159703903349.859, 50, 50, \n+  { 84159703903349.859, 50, 50,\n           50.000000000000000 },\n-  { -138805244691822.69, 50, 50, \n+  { -138805244691822.69, 50, 50,\n           60.000000000000000 },\n-  { 181046391269246.25, 50, 50, \n+  { 181046391269246.25, 50, 50,\n           70.000000000000000 },\n-  { 2086884905317107.2, 50, 50, \n+  { 2086884905317107.2, 50, 50,\n           80.000000000000000 },\n-  { -2765620139862432.5, 50, 50, \n+  { -2765620139862432.5, 50, 50,\n           90.000000000000000 },\n-  { -1.3706751678146291e+17, 50, 50, \n+  { -1.3706751678146291e+17, 50, 50,\n           100.00000000000000 },\n };\n \n@@ -3011,27 +3011,27 @@ void test055()\n \n // Test data for n=50, m=100.\n testcase_assoc_laguerre<double> data056[] = {\n-  { 2.0128660909731929e+40, 50, 100, \n+  { 2.0128660909731929e+40, 50, 100,\n           0.0000000000000000 },\n-  { 9.3675094807695474e+37, 50, 100, \n+  { 9.3675094807695474e+37, 50, 100,\n           10.000000000000000 },\n-  { 1.3009321481877196e+35, 50, 100, \n+  { 1.3009321481877196e+35, 50, 100,\n           20.000000000000000 },\n-  { 7.3720026893233823e+30, 50, 100, \n+  { 7.3720026893233823e+30, 50, 100,\n           30.000000000000000 },\n-  { -6.0824679079634607e+25, 50, 100, \n+  { -6.0824679079634607e+25, 50, 100,\n           40.000000000000000 },\n-  { -6.0053188793543624e+23, 50, 100, \n+  { -6.0053188793543624e+23, 50, 100,\n           50.000000000000000 },\n-  { 1.4178129287264701e+22, 50, 100, \n+  { 1.4178129287264701e+22, 50, 100,\n           60.000000000000000 },\n-  { -5.4652099341566765e+20, 50, 100, \n+  { -5.4652099341566765e+20, 50, 100,\n           70.000000000000000 },\n-  { -1.0817271759263398e+20, 50, 100, \n+  { -1.0817271759263398e+20, 50, 100,\n           80.000000000000000 },\n-  { 3.8058734007924187e+19, 50, 100, \n+  { 3.8058734007924187e+19, 50, 100,\n           90.000000000000000 },\n-  { 4.7439240848028353e+19, 50, 100, \n+  { 4.7439240848028353e+19, 50, 100,\n           100.00000000000000 },\n };\n \n@@ -3065,27 +3065,27 @@ void test056()\n \n // Test data for n=100, m=0.\n testcase_assoc_laguerre<double> data057[] = {\n-  { 1.0000000000000000, 100, 0, \n+  { 1.0000000000000000, 100, 0,\n           0.0000000000000000 },\n-  { 13.277662844303402, 100, 0, \n+  { 13.277662844303402, 100, 0,\n           10.000000000000000 },\n-  { 1854.0367283243393, 100, 0, \n+  { 1854.0367283243393, 100, 0,\n           20.000000000000000 },\n-  { 170141.86987046539, 100, 0, \n+  { 170141.86987046539, 100, 0,\n           30.000000000000000 },\n-  { -7272442.3156007063, 100, 0, \n+  { -7272442.3156007063, 100, 0,\n           40.000000000000000 },\n-  { 4847420871.2690468, 100, 0, \n+  { 4847420871.2690468, 100, 0,\n           50.000000000000000 },\n-  { 693492765740.29736, 100, 0, \n+  { 693492765740.29736, 100, 0,\n           60.000000000000000 },\n-  { 17125518672239.707, 100, 0, \n+  { 17125518672239.707, 100, 0,\n           70.000000000000000 },\n-  { -13763178176383754., 100, 0, \n+  { -13763178176383754., 100, 0,\n           80.000000000000000 },\n-  { 2.1307220490380198e+18, 100, 0, \n+  { 2.1307220490380198e+18, 100, 0,\n           90.000000000000000 },\n-  { -2.6292260693068920e+20, 100, 0, \n+  { -2.6292260693068920e+20, 100, 0,\n           100.00000000000000 },\n };\n \n@@ -3119,27 +3119,27 @@ void test057()\n \n // Test data for n=100, m=1.\n testcase_assoc_laguerre<double> data058[] = {\n-  { 101.00000000000003, 100, 1, \n+  { 101.00000000000003, 100, 1,\n           0.0000000000000000 },\n-  { -14.650661983680466, 100, 1, \n+  { -14.650661983680466, 100, 1,\n           10.000000000000000 },\n-  { 1626.5010939361609, 100, 1, \n+  { 1626.5010939361609, 100, 1,\n           20.000000000000000 },\n-  { 417884.77658268705, 100, 1, \n+  { 417884.77658268705, 100, 1,\n           30.000000000000000 },\n-  { -55617646.951649830, 100, 1, \n+  { -55617646.951649830, 100, 1,\n           40.000000000000000 },\n-  { 884829874.26626098, 100, 1, \n+  { 884829874.26626098, 100, 1,\n           50.000000000000000 },\n-  { 154466082750.32114, 100, 1, \n+  { 154466082750.32114, 100, 1,\n           60.000000000000000 },\n-  { -101423973484646.05, 100, 1, \n+  { -101423973484646.05, 100, 1,\n           70.000000000000000 },\n-  { -1388352348671755.5, 100, 1, \n+  { -1388352348671755.5, 100, 1,\n           80.000000000000000 },\n-  { 7.8048705513268326e+17, 100, 1, \n+  { 7.8048705513268326e+17, 100, 1,\n           90.000000000000000 },\n-  { 1.6948925059042787e+19, 100, 1, \n+  { 1.6948925059042787e+19, 100, 1,\n           100.00000000000000 },\n };\n \n@@ -3173,27 +3173,27 @@ void test058()\n \n // Test data for n=100, m=2.\n testcase_assoc_laguerre<double> data059[] = {\n-  { 5151.0000000000055, 100, 2, \n+  { 5151.0000000000055, 100, 2,\n           0.0000000000000000 },\n-  { -150.22012290951341, 100, 2, \n+  { -150.22012290951341, 100, 2,\n           10.000000000000000 },\n-  { -7655.0593294049440, 100, 2, \n+  { -7655.0593294049440, 100, 2,\n           20.000000000000000 },\n-  { -140996.69276179170, 100, 2, \n+  { -140996.69276179170, 100, 2,\n           30.000000000000000 },\n-  { -38645171.278549291, 100, 2, \n+  { -38645171.278549291, 100, 2,\n           40.000000000000000 },\n-  { -8889263688.2118778, 100, 2, \n+  { -8889263688.2118778, 100, 2,\n           50.000000000000000 },\n-  { -1010338971533.3397, 100, 2, \n+  { -1010338971533.3397, 100, 2,\n           60.000000000000000 },\n-  { -127582564332943.91, 100, 2, \n+  { -127582564332943.91, 100, 2,\n           70.000000000000000 },\n-  { 15970305694654336., 100, 2, \n+  { 15970305694654336., 100, 2,\n           80.000000000000000 },\n-  { -1.6019844992862840e+18, 100, 2, \n+  { -1.6019844992862840e+18, 100, 2,\n           90.000000000000000 },\n-  { 2.8267024730962919e+20, 100, 2, \n+  { 2.8267024730962919e+20, 100, 2,\n           100.00000000000000 },\n };\n \n@@ -3227,27 +3227,27 @@ void test059()\n \n // Test data for n=100, m=5.\n testcase_assoc_laguerre<double> data060[] = {\n-  { 96560646.000000030, 100, 5, \n+  { 96560646.000000030, 100, 5,\n           0.0000000000000000 },\n-  { 2430.6732236677576, 100, 5, \n+  { 2430.6732236677576, 100, 5,\n           10.000000000000000 },\n-  { 111162.32026994640, 100, 5, \n+  { 111162.32026994640, 100, 5,\n           20.000000000000000 },\n-  { 4036708.2599413753, 100, 5, \n+  { 4036708.2599413753, 100, 5,\n           30.000000000000000 },\n-  { -34055982.664405435, 100, 5, \n+  { -34055982.664405435, 100, 5,\n           40.000000000000000 },\n-  { 30110688343.562344, 100, 5, \n+  { 30110688343.562344, 100, 5,\n           50.000000000000000 },\n-  { 2651429940558.2920, 100, 5, \n+  { 2651429940558.2920, 100, 5,\n           60.000000000000000 },\n-  { 192108556058942.84, 100, 5, \n+  { 192108556058942.84, 100, 5,\n           70.000000000000000 },\n-  { -25410533973455528., 100, 5, \n+  { -25410533973455528., 100, 5,\n           80.000000000000000 },\n-  { 2.1072955633564431e+18, 100, 5, \n+  { 2.1072955633564431e+18, 100, 5,\n           90.000000000000000 },\n-  { -2.9434005355877260e+20, 100, 5, \n+  { -2.9434005355877260e+20, 100, 5,\n           100.00000000000000 },\n };\n \n@@ -3281,27 +3281,27 @@ void test060()\n \n // Test data for n=100, m=10.\n testcase_assoc_laguerre<double> data061[] = {\n-  { 46897636623981.039, 100, 10, \n+  { 46897636623981.039, 100, 10,\n           0.0000000000000000 },\n-  { 529208.11550990446, 100, 10, \n+  { 529208.11550990446, 100, 10,\n           10.000000000000000 },\n-  { 7402892.1748803742, 100, 10, \n+  { 7402892.1748803742, 100, 10,\n           20.000000000000000 },\n-  { 88369632.083243459, 100, 10, \n+  { 88369632.083243459, 100, 10,\n           30.000000000000000 },\n-  { 822187797.59096730, 100, 10, \n+  { 822187797.59096730, 100, 10,\n           40.000000000000000 },\n-  { 180231446033.06866, 100, 10, \n+  { 180231446033.06866, 100, 10,\n           50.000000000000000 },\n-  { 7922942703798.1309, 100, 10, \n+  { 7922942703798.1309, 100, 10,\n           60.000000000000000 },\n-  { 784424250559043.38, 100, 10, \n+  { 784424250559043.38, 100, 10,\n           70.000000000000000 },\n-  { -16325634720239362., 100, 10, \n+  { -16325634720239362., 100, 10,\n           80.000000000000000 },\n-  { -1.0879588307443181e+18, 100, 10, \n+  { -1.0879588307443181e+18, 100, 10,\n           90.000000000000000 },\n-  { 3.0114394463610495e+19, 100, 10, \n+  { 3.0114394463610495e+19, 100, 10,\n           100.00000000000000 },\n };\n \n@@ -3335,27 +3335,27 @@ void test061()\n \n // Test data for n=100, m=20.\n testcase_assoc_laguerre<double> data062[] = {\n-  { 2.9462227291176614e+22, 100, 20, \n+  { 2.9462227291176614e+22, 100, 20,\n           0.0000000000000000 },\n-  { 313694958939.90436, 100, 20, \n+  { 313694958939.90436, 100, 20,\n           10.000000000000000 },\n-  { 45396489338.096252, 100, 20, \n+  { 45396489338.096252, 100, 20,\n           20.000000000000000 },\n-  { -7215826758.0078783, 100, 20, \n+  { -7215826758.0078783, 100, 20,\n           30.000000000000000 },\n-  { 825949194005.88831, 100, 20, \n+  { 825949194005.88831, 100, 20,\n           40.000000000000000 },\n-  { -2764742119971.0747, 100, 20, \n+  { -2764742119971.0747, 100, 20,\n           50.000000000000000 },\n-  { -219802198273516.03, 100, 20, \n+  { -219802198273516.03, 100, 20,\n           60.000000000000000 },\n-  { -1699053306145266.0, 100, 20, \n+  { -1699053306145266.0, 100, 20,\n           70.000000000000000 },\n-  { 3.5495709345023853e+17, 100, 20, \n+  { 3.5495709345023853e+17, 100, 20,\n           80.000000000000000 },\n-  { -9.6128675110292439e+18, 100, 20, \n+  { -9.6128675110292439e+18, 100, 20,\n           90.000000000000000 },\n-  { 4.3619868422072153e+20, 100, 20, \n+  { 4.3619868422072153e+20, 100, 20,\n           100.00000000000000 },\n };\n \n@@ -3389,27 +3389,27 @@ void test062()\n \n // Test data for n=100, m=50.\n testcase_assoc_laguerre<double> data063[] = {\n-  { 2.0128660909731931e+40, 100, 50, \n+  { 2.0128660909731931e+40, 100, 50,\n           0.0000000000000000 },\n-  { -4.0151443913473681e+28, 100, 50, \n+  { -4.0151443913473681e+28, 100, 50,\n           10.000000000000000 },\n-  { 3.2199632594552201e+22, 100, 50, \n+  { 3.2199632594552201e+22, 100, 50,\n           20.000000000000000 },\n-  { -2.7568702092659717e+20, 100, 50, \n+  { -2.7568702092659717e+20, 100, 50,\n           30.000000000000000 },\n-  { 7.5553066015421530e+19, 100, 50, \n+  { 7.5553066015421530e+19, 100, 50,\n           40.000000000000000 },\n-  { -2.7651625252388041e+19, 100, 50, \n+  { -2.7651625252388041e+19, 100, 50,\n           50.000000000000000 },\n-  { -5.8963680147283821e+19, 100, 50, \n+  { -5.8963680147283821e+19, 100, 50,\n           60.000000000000000 },\n-  { -1.8082798163033126e+20, 100, 50, \n+  { -1.8082798163033126e+20, 100, 50,\n           70.000000000000000 },\n-  { -3.9044276986817249e+20, 100, 50, \n+  { -3.9044276986817249e+20, 100, 50,\n           80.000000000000000 },\n-  { 6.9926310700401904e+21, 100, 50, \n+  { 6.9926310700401904e+21, 100, 50,\n           90.000000000000000 },\n-  { -5.5727272809923697e+22, 100, 50, \n+  { -5.5727272809923697e+22, 100, 50,\n           100.00000000000000 },\n };\n \n@@ -3443,27 +3443,27 @@ void test063()\n \n // Test data for n=100, m=100.\n testcase_assoc_laguerre<double> data064[] = {\n-  { 9.0548514656103225e+58, 100, 100, \n+  { 9.0548514656103225e+58, 100, 100,\n           0.0000000000000000 },\n-  { 1.3334078033060576e+54, 100, 100, \n+  { 1.3334078033060576e+54, 100, 100,\n           10.000000000000000 },\n-  { 2.1002639254211231e+46, 100, 100, \n+  { 2.1002639254211231e+46, 100, 100,\n           20.000000000000000 },\n-  { -1.1073158068796240e+39, 100, 100, \n+  { -1.1073158068796240e+39, 100, 100,\n           30.000000000000000 },\n-  { -8.3640937363981405e+35, 100, 100, \n+  { -8.3640937363981405e+35, 100, 100,\n           40.000000000000000 },\n-  { -6.5879339429312671e+32, 100, 100, \n+  { -6.5879339429312671e+32, 100, 100,\n           50.000000000000000 },\n-  { -2.4190645077698453e+30, 100, 100, \n+  { -2.4190645077698453e+30, 100, 100,\n           60.000000000000000 },\n-  { -7.9224960465662002e+29, 100, 100, \n+  { -7.9224960465662002e+29, 100, 100,\n           70.000000000000000 },\n-  { -2.8605772478408853e+29, 100, 100, \n+  { -2.8605772478408853e+29, 100, 100,\n           80.000000000000000 },\n-  { 2.4149589189610125e+28, 100, 100, \n+  { 2.4149589189610125e+28, 100, 100,\n           90.000000000000000 },\n-  { 5.1146476014859003e+28, 100, 100, \n+  { 5.1146476014859003e+28, 100, 100,\n           100.00000000000000 },\n };\n "}, {"sha": "b523b41a070c9eaaaebbc0f80a974300b868130b", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/02_assoc_legendre/check_value.cc", "status": "modified", "additions": 756, "deletions": 756, "changes": 1512, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F02_assoc_legendre%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F02_assoc_legendre%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F02_assoc_legendre%2Fcheck_value.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -41,47 +41,47 @@ if (!(A)) \\\n \n // Test data for l=0, m=0.\n testcase_assoc_legendre<double> data001[] = {\n-  { 1.0000000000000000, 0, 0, \n+  { 1.0000000000000000, 0, 0,\n           -1.0000000000000000 },\n-  { 1.0000000000000000, 0, 0, \n+  { 1.0000000000000000, 0, 0,\n           -0.90000000000000002 },\n-  { 1.0000000000000000, 0, 0, \n+  { 1.0000000000000000, 0, 0,\n           -0.80000000000000004 },\n-  { 1.0000000000000000, 0, 0, \n+  { 1.0000000000000000, 0, 0,\n           -0.69999999999999996 },\n-  { 1.0000000000000000, 0, 0, \n+  { 1.0000000000000000, 0, 0,\n           -0.59999999999999998 },\n-  { 1.0000000000000000, 0, 0, \n+  { 1.0000000000000000, 0, 0,\n           -0.50000000000000000 },\n-  { 1.0000000000000000, 0, 0, \n+  { 1.0000000000000000, 0, 0,\n           -0.40000000000000002 },\n-  { 1.0000000000000000, 0, 0, \n+  { 1.0000000000000000, 0, 0,\n           -0.30000000000000004 },\n-  { 1.0000000000000000, 0, 0, \n+  { 1.0000000000000000, 0, 0,\n           -0.19999999999999996 },\n-  { 1.0000000000000000, 0, 0, \n+  { 1.0000000000000000, 0, 0,\n           -0.099999999999999978 },\n-  { 1.0000000000000000, 0, 0, \n+  { 1.0000000000000000, 0, 0,\n           0.0000000000000000 },\n-  { 1.0000000000000000, 0, 0, \n+  { 1.0000000000000000, 0, 0,\n           0.10000000000000009 },\n-  { 1.0000000000000000, 0, 0, \n+  { 1.0000000000000000, 0, 0,\n           0.19999999999999996 },\n-  { 1.0000000000000000, 0, 0, \n+  { 1.0000000000000000, 0, 0,\n           0.30000000000000004 },\n-  { 1.0000000000000000, 0, 0, \n+  { 1.0000000000000000, 0, 0,\n           0.39999999999999991 },\n-  { 1.0000000000000000, 0, 0, \n+  { 1.0000000000000000, 0, 0,\n           0.50000000000000000 },\n-  { 1.0000000000000000, 0, 0, \n+  { 1.0000000000000000, 0, 0,\n           0.60000000000000009 },\n-  { 1.0000000000000000, 0, 0, \n+  { 1.0000000000000000, 0, 0,\n           0.69999999999999996 },\n-  { 1.0000000000000000, 0, 0, \n+  { 1.0000000000000000, 0, 0,\n           0.80000000000000004 },\n-  { 1.0000000000000000, 0, 0, \n+  { 1.0000000000000000, 0, 0,\n           0.89999999999999991 },\n-  { 1.0000000000000000, 0, 0, \n+  { 1.0000000000000000, 0, 0,\n           1.0000000000000000 },\n };\n \n@@ -115,47 +115,47 @@ void test001()\n \n // Test data for l=1, m=0.\n testcase_assoc_legendre<double> data002[] = {\n-  { -1.0000000000000000, 1, 0, \n+  { -1.0000000000000000, 1, 0,\n           -1.0000000000000000 },\n-  { -0.90000000000000002, 1, 0, \n+  { -0.90000000000000002, 1, 0,\n           -0.90000000000000002 },\n-  { -0.80000000000000004, 1, 0, \n+  { -0.80000000000000004, 1, 0,\n           -0.80000000000000004 },\n-  { -0.69999999999999996, 1, 0, \n+  { -0.69999999999999996, 1, 0,\n           -0.69999999999999996 },\n-  { -0.59999999999999998, 1, 0, \n+  { -0.59999999999999998, 1, 0,\n           -0.59999999999999998 },\n-  { -0.50000000000000000, 1, 0, \n+  { -0.50000000000000000, 1, 0,\n           -0.50000000000000000 },\n-  { -0.40000000000000002, 1, 0, \n+  { -0.40000000000000002, 1, 0,\n           -0.40000000000000002 },\n-  { -0.30000000000000004, 1, 0, \n+  { -0.30000000000000004, 1, 0,\n           -0.30000000000000004 },\n-  { -0.19999999999999996, 1, 0, \n+  { -0.19999999999999996, 1, 0,\n           -0.19999999999999996 },\n-  { -0.099999999999999978, 1, 0, \n+  { -0.099999999999999978, 1, 0,\n           -0.099999999999999978 },\n-  { 0.0000000000000000, 1, 0, \n+  { 0.0000000000000000, 1, 0,\n           0.0000000000000000 },\n-  { 0.10000000000000009, 1, 0, \n+  { 0.10000000000000009, 1, 0,\n           0.10000000000000009 },\n-  { 0.19999999999999996, 1, 0, \n+  { 0.19999999999999996, 1, 0,\n           0.19999999999999996 },\n-  { 0.30000000000000004, 1, 0, \n+  { 0.30000000000000004, 1, 0,\n           0.30000000000000004 },\n-  { 0.39999999999999991, 1, 0, \n+  { 0.39999999999999991, 1, 0,\n           0.39999999999999991 },\n-  { 0.50000000000000000, 1, 0, \n+  { 0.50000000000000000, 1, 0,\n           0.50000000000000000 },\n-  { 0.60000000000000009, 1, 0, \n+  { 0.60000000000000009, 1, 0,\n           0.60000000000000009 },\n-  { 0.69999999999999996, 1, 0, \n+  { 0.69999999999999996, 1, 0,\n           0.69999999999999996 },\n-  { 0.80000000000000004, 1, 0, \n+  { 0.80000000000000004, 1, 0,\n           0.80000000000000004 },\n-  { 0.89999999999999991, 1, 0, \n+  { 0.89999999999999991, 1, 0,\n           0.89999999999999991 },\n-  { 1.0000000000000000, 1, 0, \n+  { 1.0000000000000000, 1, 0,\n           1.0000000000000000 },\n };\n \n@@ -189,47 +189,47 @@ void test002()\n \n // Test data for l=1, m=1.\n testcase_assoc_legendre<double> data003[] = {\n-  { -0.0000000000000000, 1, 1, \n+  { -0.0000000000000000, 1, 1,\n           -1.0000000000000000 },\n-  { -0.43588989435406728, 1, 1, \n+  { -0.43588989435406728, 1, 1,\n           -0.90000000000000002 },\n-  { -0.59999999999999987, 1, 1, \n+  { -0.59999999999999987, 1, 1,\n           -0.80000000000000004 },\n-  { -0.71414284285428509, 1, 1, \n+  { -0.71414284285428509, 1, 1,\n           -0.69999999999999996 },\n-  { -0.80000000000000004, 1, 1, \n+  { -0.80000000000000004, 1, 1,\n           -0.59999999999999998 },\n-  { -0.86602540378443860, 1, 1, \n+  { -0.86602540378443860, 1, 1,\n           -0.50000000000000000 },\n-  { -0.91651513899116799, 1, 1, \n+  { -0.91651513899116799, 1, 1,\n           -0.40000000000000002 },\n-  { -0.95393920141694577, 1, 1, \n+  { -0.95393920141694577, 1, 1,\n           -0.30000000000000004 },\n-  { -0.97979589711327120, 1, 1, \n+  { -0.97979589711327120, 1, 1,\n           -0.19999999999999996 },\n-  { -0.99498743710661997, 1, 1, \n+  { -0.99498743710661997, 1, 1,\n           -0.099999999999999978 },\n-  { -1.0000000000000000, 1, 1, \n+  { -1.0000000000000000, 1, 1,\n           0.0000000000000000 },\n-  { -0.99498743710661997, 1, 1, \n+  { -0.99498743710661997, 1, 1,\n           0.10000000000000009 },\n-  { -0.97979589711327120, 1, 1, \n+  { -0.97979589711327120, 1, 1,\n           0.19999999999999996 },\n-  { -0.95393920141694577, 1, 1, \n+  { -0.95393920141694577, 1, 1,\n           0.30000000000000004 },\n-  { -0.91651513899116799, 1, 1, \n+  { -0.91651513899116799, 1, 1,\n           0.39999999999999991 },\n-  { -0.86602540378443860, 1, 1, \n+  { -0.86602540378443860, 1, 1,\n           0.50000000000000000 },\n-  { -0.79999999999999993, 1, 1, \n+  { -0.79999999999999993, 1, 1,\n           0.60000000000000009 },\n-  { -0.71414284285428509, 1, 1, \n+  { -0.71414284285428509, 1, 1,\n           0.69999999999999996 },\n-  { -0.59999999999999987, 1, 1, \n+  { -0.59999999999999987, 1, 1,\n           0.80000000000000004 },\n-  { -0.43588989435406750, 1, 1, \n+  { -0.43588989435406750, 1, 1,\n           0.89999999999999991 },\n-  { -0.0000000000000000, 1, 1, \n+  { -0.0000000000000000, 1, 1,\n           1.0000000000000000 },\n };\n \n@@ -263,47 +263,47 @@ void test003()\n \n // Test data for l=2, m=0.\n testcase_assoc_legendre<double> data004[] = {\n-  { 1.0000000000000000, 2, 0, \n+  { 1.0000000000000000, 2, 0,\n           -1.0000000000000000 },\n-  { 0.71500000000000008, 2, 0, \n+  { 0.71500000000000008, 2, 0,\n           -0.90000000000000002 },\n-  { 0.46000000000000019, 2, 0, \n+  { 0.46000000000000019, 2, 0,\n           -0.80000000000000004 },\n-  { 0.23499999999999982, 2, 0, \n+  { 0.23499999999999982, 2, 0,\n           -0.69999999999999996 },\n-  { 0.039999999999999925, 2, 0, \n+  { 0.039999999999999925, 2, 0,\n           -0.59999999999999998 },\n-  { -0.12500000000000000, 2, 0, \n+  { -0.12500000000000000, 2, 0,\n           -0.50000000000000000 },\n-  { -0.25999999999999995, 2, 0, \n+  { -0.25999999999999995, 2, 0,\n           -0.40000000000000002 },\n-  { -0.36499999999999994, 2, 0, \n+  { -0.36499999999999994, 2, 0,\n           -0.30000000000000004 },\n-  { -0.44000000000000000, 2, 0, \n+  { -0.44000000000000000, 2, 0,\n           -0.19999999999999996 },\n-  { -0.48499999999999999, 2, 0, \n+  { -0.48499999999999999, 2, 0,\n           -0.099999999999999978 },\n-  { -0.50000000000000000, 2, 0, \n+  { -0.50000000000000000, 2, 0,\n           0.0000000000000000 },\n-  { -0.48499999999999999, 2, 0, \n+  { -0.48499999999999999, 2, 0,\n           0.10000000000000009 },\n-  { -0.44000000000000000, 2, 0, \n+  { -0.44000000000000000, 2, 0,\n           0.19999999999999996 },\n-  { -0.36499999999999994, 2, 0, \n+  { -0.36499999999999994, 2, 0,\n           0.30000000000000004 },\n-  { -0.26000000000000012, 2, 0, \n+  { -0.26000000000000012, 2, 0,\n           0.39999999999999991 },\n-  { -0.12500000000000000, 2, 0, \n+  { -0.12500000000000000, 2, 0,\n           0.50000000000000000 },\n-  { 0.040000000000000160, 2, 0, \n+  { 0.040000000000000160, 2, 0,\n           0.60000000000000009 },\n-  { 0.23499999999999982, 2, 0, \n+  { 0.23499999999999982, 2, 0,\n           0.69999999999999996 },\n-  { 0.46000000000000019, 2, 0, \n+  { 0.46000000000000019, 2, 0,\n           0.80000000000000004 },\n-  { 0.71499999999999975, 2, 0, \n+  { 0.71499999999999975, 2, 0,\n           0.89999999999999991 },\n-  { 1.0000000000000000, 2, 0, \n+  { 1.0000000000000000, 2, 0,\n           1.0000000000000000 },\n };\n \n@@ -337,47 +337,47 @@ void test004()\n \n // Test data for l=2, m=1.\n testcase_assoc_legendre<double> data005[] = {\n-  { 0.0000000000000000, 2, 1, \n+  { 0.0000000000000000, 2, 1,\n           -1.0000000000000000 },\n-  { 1.1769027147559816, 2, 1, \n+  { 1.1769027147559816, 2, 1,\n           -0.90000000000000002 },\n-  { 1.4399999999999999, 2, 1, \n+  { 1.4399999999999999, 2, 1,\n           -0.80000000000000004 },\n-  { 1.4996999699939983, 2, 1, \n+  { 1.4996999699939983, 2, 1,\n           -0.69999999999999996 },\n-  { 1.4399999999999999, 2, 1, \n+  { 1.4399999999999999, 2, 1,\n           -0.59999999999999998 },\n-  { 1.2990381056766580, 2, 1, \n+  { 1.2990381056766580, 2, 1,\n           -0.50000000000000000 },\n-  { 1.0998181667894018, 2, 1, \n+  { 1.0998181667894018, 2, 1,\n           -0.40000000000000002 },\n-  { 0.85854528127525132, 2, 1, \n+  { 0.85854528127525132, 2, 1,\n           -0.30000000000000004 },\n-  { 0.58787753826796263, 2, 1, \n+  { 0.58787753826796263, 2, 1,\n           -0.19999999999999996 },\n-  { 0.29849623113198592, 2, 1, \n+  { 0.29849623113198592, 2, 1,\n           -0.099999999999999978 },\n-  { -0.0000000000000000, 2, 1, \n+  { -0.0000000000000000, 2, 1,\n           0.0000000000000000 },\n-  { -0.29849623113198626, 2, 1, \n+  { -0.29849623113198626, 2, 1,\n           0.10000000000000009 },\n-  { -0.58787753826796263, 2, 1, \n+  { -0.58787753826796263, 2, 1,\n           0.19999999999999996 },\n-  { -0.85854528127525132, 2, 1, \n+  { -0.85854528127525132, 2, 1,\n           0.30000000000000004 },\n-  { -1.0998181667894014, 2, 1, \n+  { -1.0998181667894014, 2, 1,\n           0.39999999999999991 },\n-  { -1.2990381056766580, 2, 1, \n+  { -1.2990381056766580, 2, 1,\n           0.50000000000000000 },\n-  { -1.4400000000000002, 2, 1, \n+  { -1.4400000000000002, 2, 1,\n           0.60000000000000009 },\n-  { -1.4996999699939983, 2, 1, \n+  { -1.4996999699939983, 2, 1,\n           0.69999999999999996 },\n-  { -1.4399999999999999, 2, 1, \n+  { -1.4399999999999999, 2, 1,\n           0.80000000000000004 },\n-  { -1.1769027147559821, 2, 1, \n+  { -1.1769027147559821, 2, 1,\n           0.89999999999999991 },\n-  { -0.0000000000000000, 2, 1, \n+  { -0.0000000000000000, 2, 1,\n           1.0000000000000000 },\n };\n \n@@ -411,47 +411,47 @@ void test005()\n \n // Test data for l=2, m=2.\n testcase_assoc_legendre<double> data006[] = {\n-  { 0.0000000000000000, 2, 2, \n+  { 0.0000000000000000, 2, 2,\n           -1.0000000000000000 },\n-  { 0.56999999999999984, 2, 2, \n+  { 0.56999999999999984, 2, 2,\n           -0.90000000000000002 },\n-  { 1.0799999999999996, 2, 2, \n+  { 1.0799999999999996, 2, 2,\n           -0.80000000000000004 },\n-  { 1.5300000000000005, 2, 2, \n+  { 1.5300000000000005, 2, 2,\n           -0.69999999999999996 },\n-  { 1.9200000000000004, 2, 2, \n+  { 1.9200000000000004, 2, 2,\n           -0.59999999999999998 },\n-  { 2.2500000000000000, 2, 2, \n+  { 2.2500000000000000, 2, 2,\n           -0.50000000000000000 },\n-  { 2.5200000000000000, 2, 2, \n+  { 2.5200000000000000, 2, 2,\n           -0.40000000000000002 },\n-  { 2.7300000000000004, 2, 2, \n+  { 2.7300000000000004, 2, 2,\n           -0.30000000000000004 },\n-  { 2.8799999999999999, 2, 2, \n+  { 2.8799999999999999, 2, 2,\n           -0.19999999999999996 },\n-  { 2.9700000000000002, 2, 2, \n+  { 2.9700000000000002, 2, 2,\n           -0.099999999999999978 },\n-  { 3.0000000000000000, 2, 2, \n+  { 3.0000000000000000, 2, 2,\n           0.0000000000000000 },\n-  { 2.9700000000000002, 2, 2, \n+  { 2.9700000000000002, 2, 2,\n           0.10000000000000009 },\n-  { 2.8799999999999999, 2, 2, \n+  { 2.8799999999999999, 2, 2,\n           0.19999999999999996 },\n-  { 2.7300000000000004, 2, 2, \n+  { 2.7300000000000004, 2, 2,\n           0.30000000000000004 },\n-  { 2.5200000000000000, 2, 2, \n+  { 2.5200000000000000, 2, 2,\n           0.39999999999999991 },\n-  { 2.2500000000000000, 2, 2, \n+  { 2.2500000000000000, 2, 2,\n           0.50000000000000000 },\n-  { 1.9199999999999997, 2, 2, \n+  { 1.9199999999999997, 2, 2,\n           0.60000000000000009 },\n-  { 1.5300000000000005, 2, 2, \n+  { 1.5300000000000005, 2, 2,\n           0.69999999999999996 },\n-  { 1.0799999999999996, 2, 2, \n+  { 1.0799999999999996, 2, 2,\n           0.80000000000000004 },\n-  { 0.57000000000000040, 2, 2, \n+  { 0.57000000000000040, 2, 2,\n           0.89999999999999991 },\n-  { 0.0000000000000000, 2, 2, \n+  { 0.0000000000000000, 2, 2,\n           1.0000000000000000 },\n };\n \n@@ -485,47 +485,47 @@ void test006()\n \n // Test data for l=5, m=0.\n testcase_assoc_legendre<double> data007[] = {\n-  { -1.0000000000000000, 5, 0, \n+  { -1.0000000000000000, 5, 0,\n           -1.0000000000000000 },\n-  { 0.041141249999999997, 5, 0, \n+  { 0.041141249999999997, 5, 0,\n           -0.90000000000000002 },\n-  { 0.39951999999999993, 5, 0, \n+  { 0.39951999999999993, 5, 0,\n           -0.80000000000000004 },\n-  { 0.36519874999999991, 5, 0, \n+  { 0.36519874999999991, 5, 0,\n           -0.69999999999999996 },\n-  { 0.15263999999999994, 5, 0, \n+  { 0.15263999999999994, 5, 0,\n           -0.59999999999999998 },\n-  { -0.089843750000000000, 5, 0, \n+  { -0.089843750000000000, 5, 0,\n           -0.50000000000000000 },\n-  { -0.27063999999999988, 5, 0, \n+  { -0.27063999999999988, 5, 0,\n           -0.40000000000000002 },\n-  { -0.34538624999999995, 5, 0, \n+  { -0.34538624999999995, 5, 0,\n           -0.30000000000000004 },\n-  { -0.30751999999999996, 5, 0, \n+  { -0.30751999999999996, 5, 0,\n           -0.19999999999999996 },\n-  { -0.17882874999999995, 5, 0, \n+  { -0.17882874999999995, 5, 0,\n           -0.099999999999999978 },\n-  { 0.0000000000000000, 5, 0, \n+  { 0.0000000000000000, 5, 0,\n           0.0000000000000000 },\n-  { 0.17882875000000015, 5, 0, \n+  { 0.17882875000000015, 5, 0,\n           0.10000000000000009 },\n-  { 0.30751999999999996, 5, 0, \n+  { 0.30751999999999996, 5, 0,\n           0.19999999999999996 },\n-  { 0.34538624999999995, 5, 0, \n+  { 0.34538624999999995, 5, 0,\n           0.30000000000000004 },\n-  { 0.27064000000000010, 5, 0, \n+  { 0.27064000000000010, 5, 0,\n           0.39999999999999991 },\n-  { 0.089843750000000000, 5, 0, \n+  { 0.089843750000000000, 5, 0,\n           0.50000000000000000 },\n-  { -0.15264000000000022, 5, 0, \n+  { -0.15264000000000022, 5, 0,\n           0.60000000000000009 },\n-  { -0.36519874999999991, 5, 0, \n+  { -0.36519874999999991, 5, 0,\n           0.69999999999999996 },\n-  { -0.39951999999999993, 5, 0, \n+  { -0.39951999999999993, 5, 0,\n           0.80000000000000004 },\n-  { -0.041141250000000407, 5, 0, \n+  { -0.041141250000000407, 5, 0,\n           0.89999999999999991 },\n-  { 1.0000000000000000, 5, 0, \n+  { 1.0000000000000000, 5, 0,\n           1.0000000000000000 },\n };\n \n@@ -559,47 +559,47 @@ void test007()\n \n // Test data for l=5, m=1.\n testcase_assoc_legendre<double> data008[] = {\n-  { 0.0000000000000000, 5, 1, \n+  { 0.0000000000000000, 5, 1,\n           -1.0000000000000000 },\n-  { -2.8099369608350973, 5, 1, \n+  { -2.8099369608350973, 5, 1,\n           -0.90000000000000002 },\n-  { -0.72180000000000089, 5, 1, \n+  { -0.72180000000000089, 5, 1,\n           -0.80000000000000004 },\n-  { 1.0951826834447254, 5, 1, \n+  { 1.0951826834447254, 5, 1,\n           -0.69999999999999996 },\n-  { 1.9775999999999998, 5, 1, \n+  { 1.9775999999999998, 5, 1,\n           -0.59999999999999998 },\n-  { 1.9282596881137892, 5, 1, \n+  { 1.9282596881137892, 5, 1,\n           -0.50000000000000000 },\n-  { 1.2070504380513685, 5, 1, \n+  { 1.2070504380513685, 5, 1,\n           -0.40000000000000002 },\n-  { 0.16079837663884430, 5, 1, \n+  { 0.16079837663884430, 5, 1,\n           -0.30000000000000004 },\n-  { -0.87005875663658538, 5, 1, \n+  { -0.87005875663658538, 5, 1,\n           -0.19999999999999996 },\n-  { -1.6083350053680323, 5, 1, \n+  { -1.6083350053680323, 5, 1,\n           -0.099999999999999978 },\n-  { -1.8750000000000000, 5, 1, \n+  { -1.8750000000000000, 5, 1,\n           0.0000000000000000 },\n-  { -1.6083350053680314, 5, 1, \n+  { -1.6083350053680314, 5, 1,\n           0.10000000000000009 },\n-  { -0.87005875663658538, 5, 1, \n+  { -0.87005875663658538, 5, 1,\n           0.19999999999999996 },\n-  { 0.16079837663884430, 5, 1, \n+  { 0.16079837663884430, 5, 1,\n           0.30000000000000004 },\n-  { 1.2070504380513674, 5, 1, \n+  { 1.2070504380513674, 5, 1,\n           0.39999999999999991 },\n-  { 1.9282596881137892, 5, 1, \n+  { 1.9282596881137892, 5, 1,\n           0.50000000000000000 },\n-  { 1.9775999999999996, 5, 1, \n+  { 1.9775999999999996, 5, 1,\n           0.60000000000000009 },\n-  { 1.0951826834447254, 5, 1, \n+  { 1.0951826834447254, 5, 1,\n           0.69999999999999996 },\n-  { -0.72180000000000089, 5, 1, \n+  { -0.72180000000000089, 5, 1,\n           0.80000000000000004 },\n-  { -2.8099369608350959, 5, 1, \n+  { -2.8099369608350959, 5, 1,\n           0.89999999999999991 },\n-  { 0.0000000000000000, 5, 1, \n+  { 0.0000000000000000, 5, 1,\n           1.0000000000000000 },\n };\n \n@@ -633,47 +633,47 @@ void test008()\n \n // Test data for l=5, m=2.\n testcase_assoc_legendre<double> data009[] = {\n-  { 0.0000000000000000, 5, 2, \n+  { 0.0000000000000000, 5, 2,\n           -1.0000000000000000 },\n-  { -12.837824999999995, 5, 2, \n+  { -12.837824999999995, 5, 2,\n           -0.90000000000000002 },\n-  { -13.910399999999997, 5, 2, \n+  { -13.910399999999997, 5, 2,\n           -0.80000000000000004 },\n-  { -8.8089749999999984, 5, 2, \n+  { -8.8089749999999984, 5, 2,\n           -0.69999999999999996 },\n-  { -1.6128000000000009, 5, 2, \n+  { -1.6128000000000009, 5, 2,\n           -0.59999999999999998 },\n-  { 4.9218750000000000, 5, 2, \n+  { 4.9218750000000000, 5, 2,\n           -0.50000000000000000 },\n-  { 9.1728000000000005, 5, 2, \n+  { 9.1728000000000005, 5, 2,\n           -0.40000000000000002 },\n-  { 10.462725000000001, 5, 2, \n+  { 10.462725000000001, 5, 2,\n           -0.30000000000000004 },\n-  { 8.8703999999999983, 5, 2, \n+  { 8.8703999999999983, 5, 2,\n           -0.19999999999999996 },\n-  { 5.0415749999999999, 5, 2, \n+  { 5.0415749999999999, 5, 2,\n           -0.099999999999999978 },\n-  { -0.0000000000000000, 5, 2, \n+  { -0.0000000000000000, 5, 2,\n           0.0000000000000000 },\n-  { -5.0415750000000044, 5, 2, \n+  { -5.0415750000000044, 5, 2,\n           0.10000000000000009 },\n-  { -8.8703999999999983, 5, 2, \n+  { -8.8703999999999983, 5, 2,\n           0.19999999999999996 },\n-  { -10.462725000000001, 5, 2, \n+  { -10.462725000000001, 5, 2,\n           0.30000000000000004 },\n-  { -9.1728000000000005, 5, 2, \n+  { -9.1728000000000005, 5, 2,\n           0.39999999999999991 },\n-  { -4.9218750000000000, 5, 2, \n+  { -4.9218750000000000, 5, 2,\n           0.50000000000000000 },\n-  { 1.6128000000000071, 5, 2, \n+  { 1.6128000000000071, 5, 2,\n           0.60000000000000009 },\n-  { 8.8089749999999984, 5, 2, \n+  { 8.8089749999999984, 5, 2,\n           0.69999999999999996 },\n-  { 13.910399999999997, 5, 2, \n+  { 13.910399999999997, 5, 2,\n           0.80000000000000004 },\n-  { 12.837825000000004, 5, 2, \n+  { 12.837825000000004, 5, 2,\n           0.89999999999999991 },\n-  { 0.0000000000000000, 5, 2, \n+  { 0.0000000000000000, 5, 2,\n           1.0000000000000000 },\n };\n \n@@ -707,47 +707,47 @@ void test009()\n \n // Test data for l=5, m=5.\n testcase_assoc_legendre<double> data010[] = {\n-  { -0.0000000000000000, 5, 5, \n+  { -0.0000000000000000, 5, 5,\n           -1.0000000000000000 },\n-  { -14.870165800941818, 5, 5, \n+  { -14.870165800941818, 5, 5,\n           -0.90000000000000002 },\n-  { -73.483199999999925, 5, 5, \n+  { -73.483199999999925, 5, 5,\n           -0.80000000000000004 },\n-  { -175.53238298794764, 5, 5, \n+  { -175.53238298794764, 5, 5,\n           -0.69999999999999996 },\n-  { -309.65760000000006, 5, 5, \n+  { -309.65760000000006, 5, 5,\n           -0.59999999999999998 },\n-  { -460.34662869916559, 5, 5, \n+  { -460.34662869916559, 5, 5,\n           -0.50000000000000000 },\n-  { -611.12496255819883, 5, 5, \n+  { -611.12496255819883, 5, 5,\n           -0.40000000000000002 },\n-  { -746.50941479523760, 5, 5, \n+  { -746.50941479523760, 5, 5,\n           -0.30000000000000004 },\n-  { -853.31600434671316, 5, 5, \n+  { -853.31600434671316, 5, 5,\n           -0.19999999999999996 },\n-  { -921.55189181724734, 5, 5, \n+  { -921.55189181724734, 5, 5,\n           -0.099999999999999978 },\n-  { -945.00000000000000, 5, 5, \n+  { -945.00000000000000, 5, 5,\n           0.0000000000000000 },\n-  { -921.55189181724734, 5, 5, \n+  { -921.55189181724734, 5, 5,\n           0.10000000000000009 },\n-  { -853.31600434671316, 5, 5, \n+  { -853.31600434671316, 5, 5,\n           0.19999999999999996 },\n-  { -746.50941479523760, 5, 5, \n+  { -746.50941479523760, 5, 5,\n           0.30000000000000004 },\n-  { -611.12496255819883, 5, 5, \n+  { -611.12496255819883, 5, 5,\n           0.39999999999999991 },\n-  { -460.34662869916559, 5, 5, \n+  { -460.34662869916559, 5, 5,\n           0.50000000000000000 },\n-  { -309.65759999999989, 5, 5, \n+  { -309.65759999999989, 5, 5,\n           0.60000000000000009 },\n-  { -175.53238298794764, 5, 5, \n+  { -175.53238298794764, 5, 5,\n           0.69999999999999996 },\n-  { -73.483199999999925, 5, 5, \n+  { -73.483199999999925, 5, 5,\n           0.80000000000000004 },\n-  { -14.870165800941855, 5, 5, \n+  { -14.870165800941855, 5, 5,\n           0.89999999999999991 },\n-  { -0.0000000000000000, 5, 5, \n+  { -0.0000000000000000, 5, 5,\n           1.0000000000000000 },\n };\n \n@@ -781,47 +781,47 @@ void test010()\n \n // Test data for l=10, m=0.\n testcase_assoc_legendre<double> data011[] = {\n-  { 1.0000000000000000, 10, 0, \n+  { 1.0000000000000000, 10, 0,\n           -1.0000000000000000 },\n-  { -0.26314561785585977, 10, 0, \n+  { -0.26314561785585977, 10, 0,\n           -0.90000000000000002 },\n-  { 0.30052979559999998, 10, 0, \n+  { 0.30052979559999998, 10, 0,\n           -0.80000000000000004 },\n-  { 0.085805795531640333, 10, 0, \n+  { 0.085805795531640333, 10, 0,\n           -0.69999999999999996 },\n-  { -0.24366274560000006, 10, 0, \n+  { -0.24366274560000006, 10, 0,\n           -0.59999999999999998 },\n-  { -0.18822860717773438, 10, 0, \n+  { -0.18822860717773438, 10, 0,\n           -0.50000000000000000 },\n-  { 0.096839064399999869, 10, 0, \n+  { 0.096839064399999869, 10, 0,\n           -0.40000000000000002 },\n-  { 0.25147634951601561, 10, 0, \n+  { 0.25147634951601561, 10, 0,\n           -0.30000000000000004 },\n-  { 0.12907202559999989, 10, 0, \n+  { 0.12907202559999989, 10, 0,\n           -0.19999999999999996 },\n-  { -0.12212499738710947, 10, 0, \n+  { -0.12212499738710947, 10, 0,\n           -0.099999999999999978 },\n-  { -0.24609375000000000, 10, 0, \n+  { -0.24609375000000000, 10, 0,\n           0.0000000000000000 },\n-  { -0.12212499738710922, 10, 0, \n+  { -0.12212499738710922, 10, 0,\n           0.10000000000000009 },\n-  { 0.12907202559999989, 10, 0, \n+  { 0.12907202559999989, 10, 0,\n           0.19999999999999996 },\n-  { 0.25147634951601561, 10, 0, \n+  { 0.25147634951601561, 10, 0,\n           0.30000000000000004 },\n-  { 0.096839064400000258, 10, 0, \n+  { 0.096839064400000258, 10, 0,\n           0.39999999999999991 },\n-  { -0.18822860717773438, 10, 0, \n+  { -0.18822860717773438, 10, 0,\n           0.50000000000000000 },\n-  { -0.24366274559999987, 10, 0, \n+  { -0.24366274559999987, 10, 0,\n           0.60000000000000009 },\n-  { 0.085805795531640333, 10, 0, \n+  { 0.085805795531640333, 10, 0,\n           0.69999999999999996 },\n-  { 0.30052979559999998, 10, 0, \n+  { 0.30052979559999998, 10, 0,\n           0.80000000000000004 },\n-  { -0.26314561785585888, 10, 0, \n+  { -0.26314561785585888, 10, 0,\n           0.89999999999999991 },\n-  { 1.0000000000000000, 10, 0, \n+  { 1.0000000000000000, 10, 0,\n           1.0000000000000000 },\n };\n \n@@ -855,47 +855,47 @@ void test011()\n \n // Test data for l=10, m=1.\n testcase_assoc_legendre<double> data012[] = {\n-  { -0.0000000000000000, 10, 1, \n+  { -0.0000000000000000, 10, 1,\n           -1.0000000000000000 },\n-  { -3.0438748781479061, 10, 1, \n+  { -3.0438748781479061, 10, 1,\n           -0.90000000000000002 },\n-  { -0.87614260800000199, 10, 1, \n+  { -0.87614260800000199, 10, 1,\n           -0.80000000000000004 },\n-  { 2.9685359952934522, 10, 1, \n+  { 2.9685359952934522, 10, 1,\n           -0.69999999999999996 },\n-  { 1.2511825919999990, 10, 1, \n+  { 1.2511825919999990, 10, 1,\n           -0.59999999999999998 },\n-  { -2.0066877394361260, 10, 1, \n+  { -2.0066877394361260, 10, 1,\n           -0.50000000000000000 },\n-  { -2.4822196173476661, 10, 1, \n+  { -2.4822196173476661, 10, 1,\n           -0.40000000000000002 },\n-  { -0.12309508907433941, 10, 1, \n+  { -0.12309508907433941, 10, 1,\n           -0.30000000000000004 },\n-  { 2.2468221751958408, 10, 1, \n+  { 2.2468221751958408, 10, 1,\n           -0.19999999999999996 },\n-  { 2.2472659777983512, 10, 1, \n+  { 2.2472659777983512, 10, 1,\n           -0.099999999999999978 },\n-  { -0.0000000000000000, 10, 1, \n+  { -0.0000000000000000, 10, 1,\n           0.0000000000000000 },\n-  { -2.2472659777983530, 10, 1, \n+  { -2.2472659777983530, 10, 1,\n           0.10000000000000009 },\n-  { -2.2468221751958408, 10, 1, \n+  { -2.2468221751958408, 10, 1,\n           0.19999999999999996 },\n-  { 0.12309508907433941, 10, 1, \n+  { 0.12309508907433941, 10, 1,\n           0.30000000000000004 },\n-  { 2.4822196173476643, 10, 1, \n+  { 2.4822196173476643, 10, 1,\n           0.39999999999999991 },\n-  { 2.0066877394361260, 10, 1, \n+  { 2.0066877394361260, 10, 1,\n           0.50000000000000000 },\n-  { -1.2511825920000037, 10, 1, \n+  { -1.2511825920000037, 10, 1,\n           0.60000000000000009 },\n-  { -2.9685359952934522, 10, 1, \n+  { -2.9685359952934522, 10, 1,\n           0.69999999999999996 },\n-  { 0.87614260800000199, 10, 1, \n+  { 0.87614260800000199, 10, 1,\n           0.80000000000000004 },\n-  { 3.0438748781479110, 10, 1, \n+  { 3.0438748781479110, 10, 1,\n           0.89999999999999991 },\n-  { 0.0000000000000000, 10, 1, \n+  { 0.0000000000000000, 10, 1,\n           1.0000000000000000 },\n };\n \n@@ -929,47 +929,47 @@ void test012()\n \n // Test data for l=10, m=2.\n testcase_assoc_legendre<double> data013[] = {\n-  { 0.0000000000000000, 10, 2, \n+  { 0.0000000000000000, 10, 2,\n           -1.0000000000000000 },\n-  { 16.376387762496122, 10, 2, \n+  { 16.376387762496122, 10, 2,\n           -0.90000000000000002 },\n-  { -35.394657803999991, 10, 2, \n+  { -35.394657803999991, 10, 2,\n           -0.80000000000000004 },\n-  { -3.6191429423788892, 10, 2, \n+  { -3.6191429423788892, 10, 2,\n           -0.69999999999999996 },\n-  { 28.679675904000010, 10, 2, \n+  { 28.679675904000010, 10, 2,\n           -0.59999999999999998 },\n-  { 18.388023376464844, 10, 2, \n+  { 18.388023376464844, 10, 2,\n           -0.50000000000000000 },\n-  { -12.818955995999996, 10, 2, \n+  { -12.818955995999996, 10, 2,\n           -0.40000000000000002 },\n-  { -27.739821675972660, 10, 2, \n+  { -27.739821675972660, 10, 2,\n           -0.30000000000000004 },\n-  { -13.280661503999987, 10, 2, \n+  { -13.280661503999987, 10, 2,\n           -0.19999999999999996 },\n-  { 13.885467170308596, 10, 2, \n+  { 13.885467170308596, 10, 2,\n           -0.099999999999999978 },\n-  { 27.070312500000000, 10, 2, \n+  { 27.070312500000000, 10, 2,\n           0.0000000000000000 },\n-  { 13.885467170308573, 10, 2, \n+  { 13.885467170308573, 10, 2,\n           0.10000000000000009 },\n-  { -13.280661503999987, 10, 2, \n+  { -13.280661503999987, 10, 2,\n           0.19999999999999996 },\n-  { -27.739821675972660, 10, 2, \n+  { -27.739821675972660, 10, 2,\n           0.30000000000000004 },\n-  { -12.818955996000019, 10, 2, \n+  { -12.818955996000019, 10, 2,\n           0.39999999999999991 },\n-  { 18.388023376464844, 10, 2, \n+  { 18.388023376464844, 10, 2,\n           0.50000000000000000 },\n-  { 28.679675903999982, 10, 2, \n+  { 28.679675903999982, 10, 2,\n           0.60000000000000009 },\n-  { -3.6191429423788892, 10, 2, \n+  { -3.6191429423788892, 10, 2,\n           0.69999999999999996 },\n-  { -35.394657803999991, 10, 2, \n+  { -35.394657803999991, 10, 2,\n           0.80000000000000004 },\n-  { 16.376387762495984, 10, 2, \n+  { 16.376387762495984, 10, 2,\n           0.89999999999999991 },\n-  { 0.0000000000000000, 10, 2, \n+  { 0.0000000000000000, 10, 2,\n           1.0000000000000000 },\n };\n \n@@ -1003,47 +1003,47 @@ void test013()\n \n // Test data for l=10, m=5.\n testcase_assoc_legendre<double> data014[] = {\n-  { 0.0000000000000000, 10, 5, \n+  { 0.0000000000000000, 10, 5,\n           -1.0000000000000000 },\n-  { 21343.618518164669, 10, 5, \n+  { 21343.618518164669, 10, 5,\n           -0.90000000000000002 },\n-  { 40457.016407807983, 10, 5, \n+  { 40457.016407807983, 10, 5,\n           -0.80000000000000004 },\n-  { 20321.279317331318, 10, 5, \n+  { 20321.279317331318, 10, 5,\n           -0.69999999999999996 },\n-  { -14410.820616192013, 10, 5, \n+  { -14410.820616192013, 10, 5,\n           -0.59999999999999998 },\n-  { -30086.169706116176, 10, 5, \n+  { -30086.169706116176, 10, 5,\n           -0.50000000000000000 },\n-  { -17177.549337582859, 10, 5, \n+  { -17177.549337582859, 10, 5,\n           -0.40000000000000002 },\n-  { 9272.5119495412346, 10, 5, \n+  { 9272.5119495412346, 10, 5,\n           -0.30000000000000004 },\n-  { 26591.511184414714, 10, 5, \n+  { 26591.511184414714, 10, 5,\n           -0.19999999999999996 },\n-  { 21961.951238504211, 10, 5, \n+  { 21961.951238504211, 10, 5,\n           -0.099999999999999978 },\n-  { -0.0000000000000000, 10, 5, \n+  { -0.0000000000000000, 10, 5,\n           0.0000000000000000 },\n-  { -21961.951238504229, 10, 5, \n+  { -21961.951238504229, 10, 5,\n           0.10000000000000009 },\n-  { -26591.511184414714, 10, 5, \n+  { -26591.511184414714, 10, 5,\n           0.19999999999999996 },\n-  { -9272.5119495412346, 10, 5, \n+  { -9272.5119495412346, 10, 5,\n           0.30000000000000004 },\n-  { 17177.549337582830, 10, 5, \n+  { 17177.549337582830, 10, 5,\n           0.39999999999999991 },\n-  { 30086.169706116176, 10, 5, \n+  { 30086.169706116176, 10, 5,\n           0.50000000000000000 },\n-  { 14410.820616191975, 10, 5, \n+  { 14410.820616191975, 10, 5,\n           0.60000000000000009 },\n-  { -20321.279317331318, 10, 5, \n+  { -20321.279317331318, 10, 5,\n           0.69999999999999996 },\n-  { -40457.016407807983, 10, 5, \n+  { -40457.016407807983, 10, 5,\n           0.80000000000000004 },\n-  { -21343.618518164698, 10, 5, \n+  { -21343.618518164698, 10, 5,\n           0.89999999999999991 },\n-  { 0.0000000000000000, 10, 5, \n+  { 0.0000000000000000, 10, 5,\n           1.0000000000000000 },\n };\n \n@@ -1077,47 +1077,47 @@ void test014()\n \n // Test data for l=10, m=10.\n testcase_assoc_legendre<double> data015[] = {\n-  { 0.0000000000000000, 10, 10, \n+  { 0.0000000000000000, 10, 10,\n           -1.0000000000000000 },\n-  { 162117.40078784220, 10, 10, \n+  { 162117.40078784220, 10, 10,\n           -0.90000000000000002 },\n-  { 3958896.3481267113, 10, 10, \n+  { 3958896.3481267113, 10, 10,\n           -0.80000000000000004 },\n-  { 22589806.343887307, 10, 10, \n+  { 22589806.343887307, 10, 10,\n           -0.69999999999999996 },\n-  { 70300999.121633321, 10, 10, \n+  { 70300999.121633321, 10, 10,\n           -0.59999999999999998 },\n-  { 155370278.54003900, 10, 10, \n+  { 155370278.54003900, 10, 10,\n           -0.50000000000000000 },\n-  { 273815518.20150518, 10, 10, \n+  { 273815518.20150518, 10, 10,\n           -0.40000000000000002 },\n-  { 408571989.13158917, 10, 10, \n+  { 408571989.13158917, 10, 10,\n           -0.30000000000000004 },\n-  { 533848212.07990247, 10, 10, \n+  { 533848212.07990247, 10, 10,\n           -0.19999999999999996 },\n-  { 622640835.70523083, 10, 10, \n+  { 622640835.70523083, 10, 10,\n           -0.099999999999999978 },\n-  { 654729075.00000000, 10, 10, \n+  { 654729075.00000000, 10, 10,\n           0.0000000000000000 },\n-  { 622640835.70523083, 10, 10, \n+  { 622640835.70523083, 10, 10,\n           0.10000000000000009 },\n-  { 533848212.07990247, 10, 10, \n+  { 533848212.07990247, 10, 10,\n           0.19999999999999996 },\n-  { 408571989.13158917, 10, 10, \n+  { 408571989.13158917, 10, 10,\n           0.30000000000000004 },\n-  { 273815518.20150518, 10, 10, \n+  { 273815518.20150518, 10, 10,\n           0.39999999999999991 },\n-  { 155370278.54003900, 10, 10, \n+  { 155370278.54003900, 10, 10,\n           0.50000000000000000 },\n-  { 70300999.121633217, 10, 10, \n+  { 70300999.121633217, 10, 10,\n           0.60000000000000009 },\n-  { 22589806.343887307, 10, 10, \n+  { 22589806.343887307, 10, 10,\n           0.69999999999999996 },\n-  { 3958896.3481267113, 10, 10, \n+  { 3958896.3481267113, 10, 10,\n           0.80000000000000004 },\n-  { 162117.40078784304, 10, 10, \n+  { 162117.40078784304, 10, 10,\n           0.89999999999999991 },\n-  { 0.0000000000000000, 10, 10, \n+  { 0.0000000000000000, 10, 10,\n           1.0000000000000000 },\n };\n \n@@ -1151,47 +1151,47 @@ void test015()\n \n // Test data for l=20, m=0.\n testcase_assoc_legendre<double> data016[] = {\n-  { 1.0000000000000000, 20, 0, \n+  { 1.0000000000000000, 20, 0,\n           -1.0000000000000000 },\n-  { -0.14930823530984821, 20, 0, \n+  { -0.14930823530984821, 20, 0,\n           -0.90000000000000002 },\n-  { 0.22420460541741344, 20, 0, \n+  { 0.22420460541741344, 20, 0,\n           -0.80000000000000004 },\n-  { -0.20457394463834172, 20, 0, \n+  { -0.20457394463834172, 20, 0,\n           -0.69999999999999996 },\n-  { 0.15916752910098114, 20, 0, \n+  { 0.15916752910098114, 20, 0,\n           -0.59999999999999998 },\n-  { -0.048358381067373557, 20, 0, \n+  { -0.048358381067373557, 20, 0,\n           -0.50000000000000000 },\n-  { -0.10159261558628156, 20, 0, \n+  { -0.10159261558628156, 20, 0,\n           -0.40000000000000002 },\n-  { 0.18028715947998047, 20, 0, \n+  { 0.18028715947998047, 20, 0,\n           -0.30000000000000004 },\n-  { -0.098042194344594741, 20, 0, \n+  { -0.098042194344594741, 20, 0,\n           -0.19999999999999996 },\n-  { -0.082077130944527649, 20, 0, \n+  { -0.082077130944527649, 20, 0,\n           -0.099999999999999978 },\n-  { 0.17619705200195312, 20, 0, \n+  { 0.17619705200195312, 20, 0,\n           0.0000000000000000 },\n-  { -0.082077130944528037, 20, 0, \n+  { -0.082077130944528037, 20, 0,\n           0.10000000000000009 },\n-  { -0.098042194344594741, 20, 0, \n+  { -0.098042194344594741, 20, 0,\n           0.19999999999999996 },\n-  { 0.18028715947998047, 20, 0, \n+  { 0.18028715947998047, 20, 0,\n           0.30000000000000004 },\n-  { -0.10159261558628112, 20, 0, \n+  { -0.10159261558628112, 20, 0,\n           0.39999999999999991 },\n-  { -0.048358381067373557, 20, 0, \n+  { -0.048358381067373557, 20, 0,\n           0.50000000000000000 },\n-  { 0.15916752910098084, 20, 0, \n+  { 0.15916752910098084, 20, 0,\n           0.60000000000000009 },\n-  { -0.20457394463834172, 20, 0, \n+  { -0.20457394463834172, 20, 0,\n           0.69999999999999996 },\n-  { 0.22420460541741344, 20, 0, \n+  { 0.22420460541741344, 20, 0,\n           0.80000000000000004 },\n-  { -0.14930823530984949, 20, 0, \n+  { -0.14930823530984949, 20, 0,\n           0.89999999999999991 },\n-  { 1.0000000000000000, 20, 0, \n+  { 1.0000000000000000, 20, 0,\n           1.0000000000000000 },\n };\n \n@@ -1225,47 +1225,47 @@ void test016()\n \n // Test data for l=20, m=1.\n testcase_assoc_legendre<double> data017[] = {\n-  { 0.0000000000000000, 20, 1, \n+  { 0.0000000000000000, 20, 1,\n           -1.0000000000000000 },\n-  { 4.3838334818220490, 20, 1, \n+  { 4.3838334818220490, 20, 1,\n           -0.90000000000000002 },\n-  { -0.63138296146340556, 20, 1, \n+  { -0.63138296146340556, 20, 1,\n           -0.80000000000000004 },\n-  { 0.72274871413391228, 20, 1, \n+  { 0.72274871413391228, 20, 1,\n           -0.69999999999999996 },\n-  { -2.3203528743824893, 20, 1, \n+  { -2.3203528743824893, 20, 1,\n           -0.59999999999999998 },\n-  { 3.7399919228791405, 20, 1, \n+  { 3.7399919228791405, 20, 1,\n           -0.50000000000000000 },\n-  { -3.1692202279270028, 20, 1, \n+  { -3.1692202279270028, 20, 1,\n           -0.40000000000000002 },\n-  { 0.15804468835344049, 20, 1, \n+  { 0.15804468835344049, 20, 1,\n           -0.30000000000000004 },\n-  { 3.0366182393271162, 20, 1, \n+  { 3.0366182393271162, 20, 1,\n           -0.19999999999999996 },\n-  { -3.2115523815580209, 20, 1, \n+  { -3.2115523815580209, 20, 1,\n           -0.099999999999999978 },\n-  { 0.0000000000000000, 20, 1, \n+  { 0.0000000000000000, 20, 1,\n           0.0000000000000000 },\n-  { 3.2115523815580160, 20, 1, \n+  { 3.2115523815580160, 20, 1,\n           0.10000000000000009 },\n-  { -3.0366182393271162, 20, 1, \n+  { -3.0366182393271162, 20, 1,\n           0.19999999999999996 },\n-  { -0.15804468835344049, 20, 1, \n+  { -0.15804468835344049, 20, 1,\n           0.30000000000000004 },\n-  { 3.1692202279270076, 20, 1, \n+  { 3.1692202279270076, 20, 1,\n           0.39999999999999991 },\n-  { -3.7399919228791405, 20, 1, \n+  { -3.7399919228791405, 20, 1,\n           0.50000000000000000 },\n-  { 2.3203528743825008, 20, 1, \n+  { 2.3203528743825008, 20, 1,\n           0.60000000000000009 },\n-  { -0.72274871413391228, 20, 1, \n+  { -0.72274871413391228, 20, 1,\n           0.69999999999999996 },\n-  { 0.63138296146340556, 20, 1, \n+  { 0.63138296146340556, 20, 1,\n           0.80000000000000004 },\n-  { -4.3838334818220304, 20, 1, \n+  { -4.3838334818220304, 20, 1,\n           0.89999999999999991 },\n-  { 0.0000000000000000, 20, 1, \n+  { 0.0000000000000000, 20, 1,\n           1.0000000000000000 },\n };\n \n@@ -1299,47 +1299,47 @@ void test017()\n \n // Test data for l=20, m=2.\n testcase_assoc_legendre<double> data018[] = {\n-  { 0.0000000000000000, 20, 2, \n+  { 0.0000000000000000, 20, 2,\n           -1.0000000000000000 },\n-  { 80.812425587310116, 20, 2, \n+  { 80.812425587310116, 20, 2,\n           -0.90000000000000002 },\n-  { -95.849622172549317, 20, 2, \n+  { -95.849622172549317, 20, 2,\n           -0.80000000000000004 },\n-  { 87.337927630325510, 20, 2, \n+  { 87.337927630325510, 20, 2,\n           -0.69999999999999996 },\n-  { -70.330891533985834, 20, 2, \n+  { -70.330891533985834, 20, 2,\n           -0.59999999999999998 },\n-  { 24.629090735179489, 20, 2, \n+  { 24.629090735179489, 20, 2,\n           -0.50000000000000000 },\n-  { 39.902576338912418, 20, 2, \n+  { 39.902576338912418, 20, 2,\n           -0.40000000000000002 },\n-  { -75.621201471396589, 20, 2, \n+  { -75.621201471396589, 20, 2,\n           -0.30000000000000004 },\n-  { 42.417415829726487, 20, 2, \n+  { 42.417415829726487, 20, 2,\n           -0.19999999999999996 },\n-  { 33.826848678871301, 20, 2, \n+  { 33.826848678871301, 20, 2,\n           -0.099999999999999978 },\n-  { -74.002761840820312, 20, 2, \n+  { -74.002761840820312, 20, 2,\n           0.0000000000000000 },\n-  { 33.826848678871457, 20, 2, \n+  { 33.826848678871457, 20, 2,\n           0.10000000000000009 },\n-  { 42.417415829726487, 20, 2, \n+  { 42.417415829726487, 20, 2,\n           0.19999999999999996 },\n-  { -75.621201471396589, 20, 2, \n+  { -75.621201471396589, 20, 2,\n           0.30000000000000004 },\n-  { 39.902576338912240, 20, 2, \n+  { 39.902576338912240, 20, 2,\n           0.39999999999999991 },\n-  { 24.629090735179489, 20, 2, \n+  { 24.629090735179489, 20, 2,\n           0.50000000000000000 },\n-  { -70.330891533985664, 20, 2, \n+  { -70.330891533985664, 20, 2,\n           0.60000000000000009 },\n-  { 87.337927630325510, 20, 2, \n+  { 87.337927630325510, 20, 2,\n           0.69999999999999996 },\n-  { -95.849622172549317, 20, 2, \n+  { -95.849622172549317, 20, 2,\n           0.80000000000000004 },\n-  { 80.812425587310585, 20, 2, \n+  { 80.812425587310585, 20, 2,\n           0.89999999999999991 },\n-  { 0.0000000000000000, 20, 2, \n+  { 0.0000000000000000, 20, 2,\n           1.0000000000000000 },\n };\n \n@@ -1373,47 +1373,47 @@ void test018()\n \n // Test data for l=20, m=5.\n testcase_assoc_legendre<double> data019[] = {\n-  { -0.0000000000000000, 20, 5, \n+  { -0.0000000000000000, 20, 5,\n           -1.0000000000000000 },\n-  { -315702.32715134107, 20, 5, \n+  { -315702.32715134107, 20, 5,\n           -0.90000000000000002 },\n-  { 503060.91484852595, 20, 5, \n+  { 503060.91484852595, 20, 5,\n           -0.80000000000000004 },\n-  { -298127.28360361949, 20, 5, \n+  { -298127.28360361949, 20, 5,\n           -0.69999999999999996 },\n-  { -114444.61447464002, 20, 5, \n+  { -114444.61447464002, 20, 5,\n           -0.59999999999999998 },\n-  { 543428.40914592857, 20, 5, \n+  { 543428.40914592857, 20, 5,\n           -0.50000000000000000 },\n-  { -613842.07728185481, 20, 5, \n+  { -613842.07728185481, 20, 5,\n           -0.40000000000000002 },\n-  { 143765.42411270953, 20, 5, \n+  { 143765.42411270953, 20, 5,\n           -0.30000000000000004 },\n-  { 472600.45321372297, 20, 5, \n+  { 472600.45321372297, 20, 5,\n           -0.19999999999999996 },\n-  { -563861.76771496492, 20, 5, \n+  { -563861.76771496492, 20, 5,\n           -0.099999999999999978 },\n-  { 0.0000000000000000, 20, 5, \n+  { 0.0000000000000000, 20, 5,\n           0.0000000000000000 },\n-  { 563861.76771496458, 20, 5, \n+  { 563861.76771496458, 20, 5,\n           0.10000000000000009 },\n-  { -472600.45321372297, 20, 5, \n+  { -472600.45321372297, 20, 5,\n           0.19999999999999996 },\n-  { -143765.42411270953, 20, 5, \n+  { -143765.42411270953, 20, 5,\n           0.30000000000000004 },\n-  { 613842.07728185505, 20, 5, \n+  { 613842.07728185505, 20, 5,\n           0.39999999999999991 },\n-  { -543428.40914592857, 20, 5, \n+  { -543428.40914592857, 20, 5,\n           0.50000000000000000 },\n-  { 114444.61447464184, 20, 5, \n+  { 114444.61447464184, 20, 5,\n           0.60000000000000009 },\n-  { 298127.28360361949, 20, 5, \n+  { 298127.28360361949, 20, 5,\n           0.69999999999999996 },\n-  { -503060.91484852595, 20, 5, \n+  { -503060.91484852595, 20, 5,\n           0.80000000000000004 },\n-  { 315702.32715134590, 20, 5, \n+  { 315702.32715134590, 20, 5,\n           0.89999999999999991 },\n-  { 0.0000000000000000, 20, 5, \n+  { 0.0000000000000000, 20, 5,\n           1.0000000000000000 },\n };\n \n@@ -1447,47 +1447,47 @@ void test019()\n \n // Test data for l=20, m=10.\n testcase_assoc_legendre<double> data020[] = {\n-  { -0.0000000000000000, 20, 10, \n+  { -0.0000000000000000, 20, 10,\n           -1.0000000000000000 },\n-  { 990017476694.99084, 20, 10, \n+  { 990017476694.99084, 20, 10,\n           -0.90000000000000002 },\n-  { 2392757933281.0503, 20, 10, \n+  { 2392757933281.0503, 20, 10,\n           -0.80000000000000004 },\n-  { -1548364524949.5808, 20, 10, \n+  { -1548364524949.5808, 20, 10,\n           -0.69999999999999996 },\n-  { -424471915195.05609, 20, 10, \n+  { -424471915195.05609, 20, 10,\n           -0.59999999999999998 },\n-  { 1744502295946.2065, 20, 10, \n+  { 1744502295946.2065, 20, 10,\n           -0.50000000000000000 },\n-  { -899973487310.55212, 20, 10, \n+  { -899973487310.55212, 20, 10,\n           -0.40000000000000002 },\n-  { -1092420454297.7164, 20, 10, \n+  { -1092420454297.7164, 20, 10,\n           -0.30000000000000004 },\n-  { 1466609267659.8816, 20, 10, \n+  { 1466609267659.8816, 20, 10,\n           -0.19999999999999996 },\n-  { 356041756390.71661, 20, 10, \n+  { 356041756390.71661, 20, 10,\n           -0.099999999999999978 },\n-  { -1612052956674.3164, 20, 10, \n+  { -1612052956674.3164, 20, 10,\n           0.0000000000000000 },\n-  { 356041756390.71985, 20, 10, \n+  { 356041756390.71985, 20, 10,\n           0.10000000000000009 },\n-  { 1466609267659.8816, 20, 10, \n+  { 1466609267659.8816, 20, 10,\n           0.19999999999999996 },\n-  { -1092420454297.7164, 20, 10, \n+  { -1092420454297.7164, 20, 10,\n           0.30000000000000004 },\n-  { -899973487310.55469, 20, 10, \n+  { -899973487310.55469, 20, 10,\n           0.39999999999999991 },\n-  { 1744502295946.2065, 20, 10, \n+  { 1744502295946.2065, 20, 10,\n           0.50000000000000000 },\n-  { -424471915195.05914, 20, 10, \n+  { -424471915195.05914, 20, 10,\n           0.60000000000000009 },\n-  { -1548364524949.5808, 20, 10, \n+  { -1548364524949.5808, 20, 10,\n           0.69999999999999996 },\n-  { 2392757933281.0503, 20, 10, \n+  { 2392757933281.0503, 20, 10,\n           0.80000000000000004 },\n-  { 990017476694.99353, 20, 10, \n+  { 990017476694.99353, 20, 10,\n           0.89999999999999991 },\n-  { 0.0000000000000000, 20, 10, \n+  { 0.0000000000000000, 20, 10,\n           1.0000000000000000 },\n };\n \n@@ -1521,47 +1521,47 @@ void test020()\n \n // Test data for l=20, m=20.\n testcase_assoc_legendre<double> data021[] = {\n-  { 0.0000000000000000, 20, 20, \n+  { 0.0000000000000000, 20, 20,\n           -1.0000000000000000 },\n-  { 19609049712023808., 20, 20, \n+  { 19609049712023808., 20, 20,\n           -0.90000000000000002 },\n-  { 1.1693527616833221e+19, 20, 20, \n+  { 1.1693527616833221e+19, 20, 20,\n           -0.80000000000000004 },\n-  { 3.8073455880620691e+20, 20, 20, \n+  { 3.8073455880620691e+20, 20, 20,\n           -0.69999999999999996 },\n-  { 3.6874002249007927e+21, 20, 20, \n+  { 3.6874002249007927e+21, 20, 20,\n           -0.59999999999999998 },\n-  { 1.8010806978179592e+22, 20, 20, \n+  { 1.8010806978179592e+22, 20, 20,\n           -0.50000000000000000 },\n-  { 5.5938832584012466e+22, 20, 20, \n+  { 5.5938832584012466e+22, 20, 20,\n           -0.40000000000000002 },\n-  { 1.2454734132297811e+23, 20, 20, \n+  { 1.2454734132297811e+23, 20, 20,\n           -0.30000000000000004 },\n-  { 2.1263407800797497e+23, 20, 20, \n+  { 2.1263407800797497e+23, 20, 20,\n           -0.19999999999999996 },\n-  { 2.8924941146976873e+23, 20, 20, \n+  { 2.8924941146976873e+23, 20, 20,\n           -0.099999999999999978 },\n-  { 3.1983098677287775e+23, 20, 20, \n+  { 3.1983098677287775e+23, 20, 20,\n           0.0000000000000000 },\n-  { 2.8924941146976873e+23, 20, 20, \n+  { 2.8924941146976873e+23, 20, 20,\n           0.10000000000000009 },\n-  { 2.1263407800797497e+23, 20, 20, \n+  { 2.1263407800797497e+23, 20, 20,\n           0.19999999999999996 },\n-  { 1.2454734132297811e+23, 20, 20, \n+  { 1.2454734132297811e+23, 20, 20,\n           0.30000000000000004 },\n-  { 5.5938832584012466e+22, 20, 20, \n+  { 5.5938832584012466e+22, 20, 20,\n           0.39999999999999991 },\n-  { 1.8010806978179592e+22, 20, 20, \n+  { 1.8010806978179592e+22, 20, 20,\n           0.50000000000000000 },\n-  { 3.6874002249007807e+21, 20, 20, \n+  { 3.6874002249007807e+21, 20, 20,\n           0.60000000000000009 },\n-  { 3.8073455880620691e+20, 20, 20, \n+  { 3.8073455880620691e+20, 20, 20,\n           0.69999999999999996 },\n-  { 1.1693527616833221e+19, 20, 20, \n+  { 1.1693527616833221e+19, 20, 20,\n           0.80000000000000004 },\n-  { 19609049712024020., 20, 20, \n+  { 19609049712024020., 20, 20,\n           0.89999999999999991 },\n-  { 0.0000000000000000, 20, 20, \n+  { 0.0000000000000000, 20, 20,\n           1.0000000000000000 },\n };\n \n@@ -1595,47 +1595,47 @@ void test021()\n \n // Test data for l=50, m=0.\n testcase_assoc_legendre<double> data022[] = {\n-  { 1.0000000000000000, 50, 0, \n+  { 1.0000000000000000, 50, 0,\n           -1.0000000000000000 },\n-  { -0.17003765994383685, 50, 0, \n+  { -0.17003765994383685, 50, 0,\n           -0.90000000000000002 },\n-  { 0.13879737345093118, 50, 0, \n+  { 0.13879737345093118, 50, 0,\n           -0.80000000000000004 },\n-  { -0.014572731645892805, 50, 0, \n+  { -0.014572731645892805, 50, 0,\n           -0.69999999999999996 },\n-  { -0.058860798844002173, 50, 0, \n+  { -0.058860798844002173, 50, 0,\n           -0.59999999999999998 },\n-  { -0.031059099239609828, 50, 0, \n+  { -0.031059099239609828, 50, 0,\n           -0.50000000000000000 },\n-  { 0.041569033381825368, 50, 0, \n+  { 0.041569033381825368, 50, 0,\n           -0.40000000000000002 },\n-  { 0.10911051574714808, 50, 0, \n+  { 0.10911051574714808, 50, 0,\n           -0.30000000000000004 },\n-  { 0.083432272204197466, 50, 0, \n+  { 0.083432272204197466, 50, 0,\n           -0.19999999999999996 },\n-  { -0.038205812661313579, 50, 0, \n+  { -0.038205812661313579, 50, 0,\n           -0.099999999999999978 },\n-  { -0.11227517265921705, 50, 0, \n+  { -0.11227517265921705, 50, 0,\n           0.0000000000000000 },\n-  { -0.038205812661314169, 50, 0, \n+  { -0.038205812661314169, 50, 0,\n           0.10000000000000009 },\n-  { 0.083432272204197466, 50, 0, \n+  { 0.083432272204197466, 50, 0,\n           0.19999999999999996 },\n-  { 0.10911051574714808, 50, 0, \n+  { 0.10911051574714808, 50, 0,\n           0.30000000000000004 },\n-  { 0.041569033381824647, 50, 0, \n+  { 0.041569033381824647, 50, 0,\n           0.39999999999999991 },\n-  { -0.031059099239609828, 50, 0, \n+  { -0.031059099239609828, 50, 0,\n           0.50000000000000000 },\n-  { -0.058860798844001430, 50, 0, \n+  { -0.058860798844001430, 50, 0,\n           0.60000000000000009 },\n-  { -0.014572731645892805, 50, 0, \n+  { -0.014572731645892805, 50, 0,\n           0.69999999999999996 },\n-  { 0.13879737345093118, 50, 0, \n+  { 0.13879737345093118, 50, 0,\n           0.80000000000000004 },\n-  { -0.17003765994383663, 50, 0, \n+  { -0.17003765994383663, 50, 0,\n           0.89999999999999991 },\n-  { 1.0000000000000000, 50, 0, \n+  { 1.0000000000000000, 50, 0,\n           1.0000000000000000 },\n };\n \n@@ -1669,47 +1669,47 @@ void test022()\n \n // Test data for l=50, m=1.\n testcase_assoc_legendre<double> data023[] = {\n-  { 0.0000000000000000, 50, 1, \n+  { 0.0000000000000000, 50, 1,\n           -1.0000000000000000 },\n-  { -0.13424149984450387, 50, 1, \n+  { -0.13424149984450387, 50, 1,\n           -0.90000000000000002 },\n-  { 2.2011219672413085, 50, 1, \n+  { 2.2011219672413085, 50, 1,\n           -0.80000000000000004 },\n-  { 6.6622414993232013, 50, 1, \n+  { 6.6622414993232013, 50, 1,\n           -0.69999999999999996 },\n-  { 5.5772846936919231, 50, 1, \n+  { 5.5772846936919231, 50, 1,\n           -0.59999999999999998 },\n-  { 5.8787148815607617, 50, 1, \n+  { 5.8787148815607617, 50, 1,\n           -0.50000000000000000 },\n-  { 5.5473459458634000, 50, 1, \n+  { 5.5473459458634000, 50, 1,\n           -0.40000000000000002 },\n-  { 1.8444956647619912, 50, 1, \n+  { 1.8444956647619912, 50, 1,\n           -0.30000000000000004 },\n-  { -3.8722014306642150, 50, 1, \n+  { -3.8722014306642150, 50, 1,\n           -0.19999999999999996 },\n-  { -5.3488751322285593, 50, 1, \n+  { -5.3488751322285593, 50, 1,\n           -0.099999999999999978 },\n-  { -0.0000000000000000, 50, 1, \n+  { -0.0000000000000000, 50, 1,\n           0.0000000000000000 },\n-  { 5.3488751322285459, 50, 1, \n+  { 5.3488751322285459, 50, 1,\n           0.10000000000000009 },\n-  { 3.8722014306642150, 50, 1, \n+  { 3.8722014306642150, 50, 1,\n           0.19999999999999996 },\n-  { -1.8444956647619912, 50, 1, \n+  { -1.8444956647619912, 50, 1,\n           0.30000000000000004 },\n-  { -5.5473459458634098, 50, 1, \n+  { -5.5473459458634098, 50, 1,\n           0.39999999999999991 },\n-  { -5.8787148815607617, 50, 1, \n+  { -5.8787148815607617, 50, 1,\n           0.50000000000000000 },\n-  { -5.5772846936919489, 50, 1, \n+  { -5.5772846936919489, 50, 1,\n           0.60000000000000009 },\n-  { -6.6622414993232013, 50, 1, \n+  { -6.6622414993232013, 50, 1,\n           0.69999999999999996 },\n-  { -2.2011219672413085, 50, 1, \n+  { -2.2011219672413085, 50, 1,\n           0.80000000000000004 },\n-  { 0.13424149984460862, 50, 1, \n+  { 0.13424149984460862, 50, 1,\n           0.89999999999999991 },\n-  { 0.0000000000000000, 50, 1, \n+  { 0.0000000000000000, 50, 1,\n           1.0000000000000000 },\n };\n \n@@ -1743,47 +1743,47 @@ void test023()\n \n // Test data for l=50, m=2.\n testcase_assoc_legendre<double> data024[] = {\n-  { 0.0000000000000000, 50, 2, \n+  { 0.0000000000000000, 50, 2,\n           -1.0000000000000000 },\n-  { 433.04168483713448, 50, 2, \n+  { 433.04168483713448, 50, 2,\n           -0.90000000000000002 },\n-  { -348.06364372056390, 50, 2, \n+  { -348.06364372056390, 50, 2,\n           -0.80000000000000004 },\n-  { 50.221071418108465, 50, 2, \n+  { 50.221071418108465, 50, 2,\n           -0.69999999999999996 },\n-  { 158.46096409274341, 50, 2, \n+  { 158.46096409274341, 50, 2,\n           -0.59999999999999998 },\n-  { 85.988858299721414, 50, 2, \n+  { 85.988858299721414, 50, 2,\n           -0.50000000000000000 },\n-  { -101.15891460879277, 50, 2, \n+  { -101.15891460879277, 50, 2,\n           -0.40000000000000002 },\n-  { -277.07168105316612, 50, 2, \n+  { -277.07168105316612, 50, 2,\n           -0.30000000000000004 },\n-  { -214.33311373510401, 50, 2, \n+  { -214.33311373510401, 50, 2,\n           -0.19999999999999996 },\n-  { 96.349657930951722, 50, 2, \n+  { 96.349657930951722, 50, 2,\n           -0.099999999999999978 },\n-  { 286.30169028100346, 50, 2, \n+  { 286.30169028100346, 50, 2,\n           0.0000000000000000 },\n-  { 96.349657930953285, 50, 2, \n+  { 96.349657930953285, 50, 2,\n           0.10000000000000009 },\n-  { -214.33311373510401, 50, 2, \n+  { -214.33311373510401, 50, 2,\n           0.19999999999999996 },\n-  { -277.07168105316612, 50, 2, \n+  { -277.07168105316612, 50, 2,\n           0.30000000000000004 },\n-  { -101.15891460879106, 50, 2, \n+  { -101.15891460879106, 50, 2,\n           0.39999999999999991 },\n-  { 85.988858299721414, 50, 2, \n+  { 85.988858299721414, 50, 2,\n           0.50000000000000000 },\n-  { 158.46096409274131, 50, 2, \n+  { 158.46096409274131, 50, 2,\n           0.60000000000000009 },\n-  { 50.221071418108465, 50, 2, \n+  { 50.221071418108465, 50, 2,\n           0.69999999999999996 },\n-  { -348.06364372056390, 50, 2, \n+  { -348.06364372056390, 50, 2,\n           0.80000000000000004 },\n-  { 433.04168483713414, 50, 2, \n+  { 433.04168483713414, 50, 2,\n           0.89999999999999991 },\n-  { 0.0000000000000000, 50, 2, \n+  { 0.0000000000000000, 50, 2,\n           1.0000000000000000 },\n };\n \n@@ -1817,47 +1817,47 @@ void test024()\n \n // Test data for l=50, m=5.\n testcase_assoc_legendre<double> data025[] = {\n-  { -0.0000000000000000, 50, 5, \n+  { -0.0000000000000000, 50, 5,\n           -1.0000000000000000 },\n-  { -27340473.952132788, 50, 5, \n+  { -27340473.952132788, 50, 5,\n           -0.90000000000000002 },\n-  { 27753716.768532373, 50, 5, \n+  { 27753716.768532373, 50, 5,\n           -0.80000000000000004 },\n-  { 40808153.913493626, 50, 5, \n+  { 40808153.913493626, 50, 5,\n           -0.69999999999999996 },\n-  { 32071189.035790101, 50, 5, \n+  { 32071189.035790101, 50, 5,\n           -0.59999999999999998 },\n-  { 36265736.218529105, 50, 5, \n+  { 36265736.218529105, 50, 5,\n           -0.50000000000000000 },\n-  { 37089596.700204894, 50, 5, \n+  { 37089596.700204894, 50, 5,\n           -0.40000000000000002 },\n-  { 14562029.629244510, 50, 5, \n+  { 14562029.629244510, 50, 5,\n           -0.30000000000000004 },\n-  { -23686895.217517227, 50, 5, \n+  { -23686895.217517227, 50, 5,\n           -0.19999999999999996 },\n-  { -34878992.965676002, 50, 5, \n+  { -34878992.965676002, 50, 5,\n           -0.099999999999999978 },\n-  { -0.0000000000000000, 50, 5, \n+  { -0.0000000000000000, 50, 5,\n           0.0000000000000000 },\n-  { 34878992.965675950, 50, 5, \n+  { 34878992.965675950, 50, 5,\n           0.10000000000000009 },\n-  { 23686895.217517227, 50, 5, \n+  { 23686895.217517227, 50, 5,\n           0.19999999999999996 },\n-  { -14562029.629244510, 50, 5, \n+  { -14562029.629244510, 50, 5,\n           0.30000000000000004 },\n-  { -37089596.700204931, 50, 5, \n+  { -37089596.700204931, 50, 5,\n           0.39999999999999991 },\n-  { -36265736.218529105, 50, 5, \n+  { -36265736.218529105, 50, 5,\n           0.50000000000000000 },\n-  { -32071189.035790265, 50, 5, \n+  { -32071189.035790265, 50, 5,\n           0.60000000000000009 },\n-  { -40808153.913493626, 50, 5, \n+  { -40808153.913493626, 50, 5,\n           0.69999999999999996 },\n-  { -27753716.768532373, 50, 5, \n+  { -27753716.768532373, 50, 5,\n           0.80000000000000004 },\n-  { 27340473.952133406, 50, 5, \n+  { 27340473.952133406, 50, 5,\n           0.89999999999999991 },\n-  { 0.0000000000000000, 50, 5, \n+  { 0.0000000000000000, 50, 5,\n           1.0000000000000000 },\n };\n \n@@ -1891,47 +1891,47 @@ void test025()\n \n // Test data for l=50, m=10.\n testcase_assoc_legendre<double> data026[] = {\n-  { -0.0000000000000000, 50, 10, \n+  { -0.0000000000000000, 50, 10,\n           -1.0000000000000000 },\n-  { -8994661710093158.0, 50, 10, \n+  { -8994661710093158.0, 50, 10,\n           -0.90000000000000002 },\n-  { 932311375306557.00, 50, 10, \n+  { 932311375306557.00, 50, 10,\n           -0.80000000000000004 },\n-  { 12153535011507012., 50, 10, \n+  { 12153535011507012., 50, 10,\n           -0.69999999999999996 },\n-  { 12176690755542244., 50, 10, \n+  { 12176690755542244., 50, 10,\n           -0.59999999999999998 },\n-  { 9180035388465752.0, 50, 10, \n+  { 9180035388465752.0, 50, 10,\n           -0.50000000000000000 },\n-  { 889201701866911.12, 50, 10, \n+  { 889201701866911.12, 50, 10,\n           -0.40000000000000002 },\n-  { -9451384032851600.0, 50, 10, \n+  { -9451384032851600.0, 50, 10,\n           -0.30000000000000004 },\n-  { -9926439446673564.0, 50, 10, \n+  { -9926439446673564.0, 50, 10,\n           -0.19999999999999996 },\n-  { 2794368162749970.5, 50, 10, \n+  { 2794368162749970.5, 50, 10,\n           -0.099999999999999978 },\n-  { 11452238249246346., 50, 10, \n+  { 11452238249246346., 50, 10,\n           0.0000000000000000 },\n-  { 2794368162750031.0, 50, 10, \n+  { 2794368162750031.0, 50, 10,\n           0.10000000000000009 },\n-  { -9926439446673564.0, 50, 10, \n+  { -9926439446673564.0, 50, 10,\n           0.19999999999999996 },\n-  { -9451384032851600.0, 50, 10, \n+  { -9451384032851600.0, 50, 10,\n           0.30000000000000004 },\n-  { 889201701866976.25, 50, 10, \n+  { 889201701866976.25, 50, 10,\n           0.39999999999999991 },\n-  { 9180035388465752.0, 50, 10, \n+  { 9180035388465752.0, 50, 10,\n           0.50000000000000000 },\n-  { 12176690755542216., 50, 10, \n+  { 12176690755542216., 50, 10,\n           0.60000000000000009 },\n-  { 12153535011507012., 50, 10, \n+  { 12153535011507012., 50, 10,\n           0.69999999999999996 },\n-  { 932311375306557.00, 50, 10, \n+  { 932311375306557.00, 50, 10,\n           0.80000000000000004 },\n-  { -8994661710093322.0, 50, 10, \n+  { -8994661710093322.0, 50, 10,\n           0.89999999999999991 },\n-  { 0.0000000000000000, 50, 10, \n+  { 0.0000000000000000, 50, 10,\n           1.0000000000000000 },\n };\n \n@@ -1965,47 +1965,47 @@ void test026()\n \n // Test data for l=50, m=20.\n testcase_assoc_legendre<double> data027[] = {\n-  { 0.0000000000000000, 50, 20, \n+  { 0.0000000000000000, 50, 20,\n           -1.0000000000000000 },\n-  { 1.6630925158645460e+33, 50, 20, \n+  { 1.6630925158645460e+33, 50, 20,\n           -0.90000000000000002 },\n-  { 1.0622676657892043e+33, 50, 20, \n+  { 1.0622676657892043e+33, 50, 20,\n           -0.80000000000000004 },\n-  { 8.6022521164717170e+32, 50, 20, \n+  { 8.6022521164717170e+32, 50, 20,\n           -0.69999999999999996 },\n-  { 4.0860128756808430e+32, 50, 20, \n+  { 4.0860128756808430e+32, 50, 20,\n           -0.59999999999999998 },\n-  { -4.0169860814274409e+32, 50, 20, \n+  { -4.0169860814274409e+32, 50, 20,\n           -0.50000000000000000 },\n-  { -8.2324325279774008e+32, 50, 20, \n+  { -8.2324325279774008e+32, 50, 20,\n           -0.40000000000000002 },\n-  { -4.0054067236243299e+31, 50, 20, \n+  { -4.0054067236243299e+31, 50, 20,\n           -0.30000000000000004 },\n-  { 7.9309266056434309e+32, 50, 20, \n+  { 7.9309266056434309e+32, 50, 20,\n           -0.19999999999999996 },\n-  { 5.4151358290899148e+31, 50, 20, \n+  { 5.4151358290899148e+31, 50, 20,\n           -0.099999999999999978 },\n-  { -7.8735935697332210e+32, 50, 20, \n+  { -7.8735935697332210e+32, 50, 20,\n           0.0000000000000000 },\n-  { 5.4151358290895032e+31, 50, 20, \n+  { 5.4151358290895032e+31, 50, 20,\n           0.10000000000000009 },\n-  { 7.9309266056434309e+32, 50, 20, \n+  { 7.9309266056434309e+32, 50, 20,\n           0.19999999999999996 },\n-  { -4.0054067236243299e+31, 50, 20, \n+  { -4.0054067236243299e+31, 50, 20,\n           0.30000000000000004 },\n-  { -8.2324325279773965e+32, 50, 20, \n+  { -8.2324325279773965e+32, 50, 20,\n           0.39999999999999991 },\n-  { -4.0169860814274409e+32, 50, 20, \n+  { -4.0169860814274409e+32, 50, 20,\n           0.50000000000000000 },\n-  { 4.0860128756807882e+32, 50, 20, \n+  { 4.0860128756807882e+32, 50, 20,\n           0.60000000000000009 },\n-  { 8.6022521164717170e+32, 50, 20, \n+  { 8.6022521164717170e+32, 50, 20,\n           0.69999999999999996 },\n-  { 1.0622676657892043e+33, 50, 20, \n+  { 1.0622676657892043e+33, 50, 20,\n           0.80000000000000004 },\n-  { 1.6630925158645483e+33, 50, 20, \n+  { 1.6630925158645483e+33, 50, 20,\n           0.89999999999999991 },\n-  { 0.0000000000000000, 50, 20, \n+  { 0.0000000000000000, 50, 20,\n           1.0000000000000000 },\n };\n \n@@ -2039,47 +2039,47 @@ void test027()\n \n // Test data for l=50, m=50.\n testcase_assoc_legendre<double> data028[] = {\n-  { 0.0000000000000000, 50, 50, \n+  { 0.0000000000000000, 50, 50,\n           -1.0000000000000000 },\n-  { 2.5366994974431341e+60, 50, 50, \n+  { 2.5366994974431341e+60, 50, 50,\n           -0.90000000000000002 },\n-  { 2.2028834403101213e+67, 50, 50, \n+  { 2.2028834403101213e+67, 50, 50,\n           -0.80000000000000004 },\n-  { 1.3325496559566651e+71, 50, 50, \n+  { 1.3325496559566651e+71, 50, 50,\n           -0.69999999999999996 },\n-  { 3.8898096431781969e+73, 50, 50, \n+  { 3.8898096431781969e+73, 50, 50,\n           -0.59999999999999998 },\n-  { 2.0509760257037188e+75, 50, 50, \n+  { 2.0509760257037188e+75, 50, 50,\n           -0.50000000000000000 },\n-  { 3.4866724533443283e+76, 50, 50, \n+  { 3.4866724533443283e+76, 50, 50,\n           -0.40000000000000002 },\n-  { 2.5790740224150207e+77, 50, 50, \n+  { 2.5790740224150207e+77, 50, 50,\n           -0.30000000000000004 },\n-  { 9.8222237931680989e+77, 50, 50, \n+  { 9.8222237931680989e+77, 50, 50,\n           -0.19999999999999996 },\n-  { 2.1198682190366617e+78, 50, 50, \n+  { 2.1198682190366617e+78, 50, 50,\n           -0.099999999999999978 },\n-  { 2.7253921397507295e+78, 50, 50, \n+  { 2.7253921397507295e+78, 50, 50,\n           0.0000000000000000 },\n-  { 2.1198682190366617e+78, 50, 50, \n+  { 2.1198682190366617e+78, 50, 50,\n           0.10000000000000009 },\n-  { 9.8222237931680989e+77, 50, 50, \n+  { 9.8222237931680989e+77, 50, 50,\n           0.19999999999999996 },\n-  { 2.5790740224150207e+77, 50, 50, \n+  { 2.5790740224150207e+77, 50, 50,\n           0.30000000000000004 },\n-  { 3.4866724533443283e+76, 50, 50, \n+  { 3.4866724533443283e+76, 50, 50,\n           0.39999999999999991 },\n-  { 2.0509760257037188e+75, 50, 50, \n+  { 2.0509760257037188e+75, 50, 50,\n           0.50000000000000000 },\n-  { 3.8898096431781724e+73, 50, 50, \n+  { 3.8898096431781724e+73, 50, 50,\n           0.60000000000000009 },\n-  { 1.3325496559566651e+71, 50, 50, \n+  { 1.3325496559566651e+71, 50, 50,\n           0.69999999999999996 },\n-  { 2.2028834403101213e+67, 50, 50, \n+  { 2.2028834403101213e+67, 50, 50,\n           0.80000000000000004 },\n-  { 2.5366994974431990e+60, 50, 50, \n+  { 2.5366994974431990e+60, 50, 50,\n           0.89999999999999991 },\n-  { 0.0000000000000000, 50, 50, \n+  { 0.0000000000000000, 50, 50,\n           1.0000000000000000 },\n };\n \n@@ -2113,47 +2113,47 @@ void test028()\n \n // Test data for l=100, m=0.\n testcase_assoc_legendre<double> data029[] = {\n-  { 1.0000000000000000, 100, 0, \n+  { 1.0000000000000000, 100, 0,\n           -1.0000000000000000 },\n-  { 0.10226582055871908, 100, 0, \n+  { 0.10226582055871908, 100, 0,\n           -0.90000000000000002 },\n-  { 0.050861167913584124, 100, 0, \n+  { 0.050861167913584124, 100, 0,\n           -0.80000000000000004 },\n-  { -0.077132507199778780, 100, 0, \n+  { -0.077132507199778780, 100, 0,\n           -0.69999999999999996 },\n-  { -0.023747023905133110, 100, 0, \n+  { -0.023747023905133110, 100, 0,\n           -0.59999999999999998 },\n-  { -0.060518025961861198, 100, 0, \n+  { -0.060518025961861198, 100, 0,\n           -0.50000000000000000 },\n-  { -0.072258202125684429, 100, 0, \n+  { -0.072258202125684429, 100, 0,\n           -0.40000000000000002 },\n-  { 0.057127392202801719, 100, 0, \n+  { 0.057127392202801719, 100, 0,\n           -0.30000000000000004 },\n-  { 0.014681835355659636, 100, 0, \n+  { 0.014681835355659636, 100, 0,\n           -0.19999999999999996 },\n-  { -0.063895098434750303, 100, 0, \n+  { -0.063895098434750303, 100, 0,\n           -0.099999999999999978 },\n-  { 0.079589237387178727, 100, 0, \n+  { 0.079589237387178727, 100, 0,\n           0.0000000000000000 },\n-  { -0.063895098434749775, 100, 0, \n+  { -0.063895098434749775, 100, 0,\n           0.10000000000000009 },\n-  { 0.014681835355659636, 100, 0, \n+  { 0.014681835355659636, 100, 0,\n           0.19999999999999996 },\n-  { 0.057127392202801719, 100, 0, \n+  { 0.057127392202801719, 100, 0,\n           0.30000000000000004 },\n-  { -0.072258202125685012, 100, 0, \n+  { -0.072258202125685012, 100, 0,\n           0.39999999999999991 },\n-  { -0.060518025961861198, 100, 0, \n+  { -0.060518025961861198, 100, 0,\n           0.50000000000000000 },\n-  { -0.023747023905134217, 100, 0, \n+  { -0.023747023905134217, 100, 0,\n           0.60000000000000009 },\n-  { -0.077132507199778780, 100, 0, \n+  { -0.077132507199778780, 100, 0,\n           0.69999999999999996 },\n-  { 0.050861167913584124, 100, 0, \n+  { 0.050861167913584124, 100, 0,\n           0.80000000000000004 },\n-  { 0.10226582055871723, 100, 0, \n+  { 0.10226582055871723, 100, 0,\n           0.89999999999999991 },\n-  { 1.0000000000000000, 100, 0, \n+  { 1.0000000000000000, 100, 0,\n           1.0000000000000000 },\n };\n \n@@ -2187,47 +2187,47 @@ void test029()\n \n // Test data for l=100, m=1.\n testcase_assoc_legendre<double> data030[] = {\n-  { -0.0000000000000000, 100, 1, \n+  { -0.0000000000000000, 100, 1,\n           -1.0000000000000000 },\n-  { 6.5200167187780309, 100, 1, \n+  { 6.5200167187780309, 100, 1,\n           -0.90000000000000002 },\n-  { 9.0065170007027540, 100, 1, \n+  { 9.0065170007027540, 100, 1,\n           -0.80000000000000004 },\n-  { -5.4690908541181056, 100, 1, \n+  { -5.4690908541181056, 100, 1,\n           -0.69999999999999996 },\n-  { -8.6275439170430861, 100, 1, \n+  { -8.6275439170430861, 100, 1,\n           -0.59999999999999998 },\n-  { -6.0909031663448499, 100, 1, \n+  { -6.0909031663448499, 100, 1,\n           -0.50000000000000000 },\n-  { 4.1160338699561265, 100, 1, \n+  { 4.1160338699561265, 100, 1,\n           -0.40000000000000002 },\n-  { 5.8491043010758004, 100, 1, \n+  { 5.8491043010758004, 100, 1,\n           -0.30000000000000004 },\n-  { -7.9435138723089826, 100, 1, \n+  { -7.9435138723089826, 100, 1,\n           -0.19999999999999996 },\n-  { 4.7996285823989346, 100, 1, \n+  { 4.7996285823989346, 100, 1,\n           -0.099999999999999978 },\n-  { 0.0000000000000000, 100, 1, \n+  { 0.0000000000000000, 100, 1,\n           0.0000000000000000 },\n-  { -4.7996285823990057, 100, 1, \n+  { -4.7996285823990057, 100, 1,\n           0.10000000000000009 },\n-  { 7.9435138723089826, 100, 1, \n+  { 7.9435138723089826, 100, 1,\n           0.19999999999999996 },\n-  { -5.8491043010758004, 100, 1, \n+  { -5.8491043010758004, 100, 1,\n           0.30000000000000004 },\n-  { -4.1160338699560359, 100, 1, \n+  { -4.1160338699560359, 100, 1,\n           0.39999999999999991 },\n-  { 6.0909031663448499, 100, 1, \n+  { 6.0909031663448499, 100, 1,\n           0.50000000000000000 },\n-  { 8.6275439170430559, 100, 1, \n+  { 8.6275439170430559, 100, 1,\n           0.60000000000000009 },\n-  { 5.4690908541181056, 100, 1, \n+  { 5.4690908541181056, 100, 1,\n           0.69999999999999996 },\n-  { -9.0065170007027540, 100, 1, \n+  { -9.0065170007027540, 100, 1,\n           0.80000000000000004 },\n-  { -6.5200167187783133, 100, 1, \n+  { -6.5200167187783133, 100, 1,\n           0.89999999999999991 },\n-  { 0.0000000000000000, 100, 1, \n+  { 0.0000000000000000, 100, 1,\n           1.0000000000000000 },\n };\n \n@@ -2261,47 +2261,47 @@ void test030()\n \n // Test data for l=100, m=2.\n testcase_assoc_legendre<double> data031[] = {\n-  { 0.0000000000000000, 100, 2, \n+  { 0.0000000000000000, 100, 2,\n           -1.0000000000000000 },\n-  { -1005.9604880761007, 100, 2, \n+  { -1005.9604880761007, 100, 2,\n           -0.90000000000000002 },\n-  { -489.68041725865896, 100, 2, \n+  { -489.68041725865896, 100, 2,\n           -0.80000000000000004 },\n-  { 768.31676011669970, 100, 2, \n+  { 768.31676011669970, 100, 2,\n           -0.69999999999999996 },\n-  { 226.90362556628003, 100, 2, \n+  { 226.90362556628003, 100, 2,\n           -0.59999999999999998 },\n-  { 604.19889304940330, 100, 2, \n+  { 604.19889304940330, 100, 2,\n           -0.50000000000000000 },\n-  { 733.40061037838029, 100, 2, \n+  { 733.40061037838029, 100, 2,\n           -0.40000000000000002 },\n-  { -573.30774483996402, 100, 2, \n+  { -573.30774483996402, 100, 2,\n           -0.30000000000000004 },\n-  { -151.52946305080897, 100, 2, \n+  { -151.52946305080897, 100, 2,\n           -0.19999999999999996 },\n-  { 646.30525583588019, 100, 2, \n+  { 646.30525583588019, 100, 2,\n           -0.099999999999999978 },\n-  { -803.85129761050518, 100, 2, \n+  { -803.85129761050518, 100, 2,\n           0.0000000000000000 },\n-  { 646.30525583587439, 100, 2, \n+  { 646.30525583587439, 100, 2,\n           0.10000000000000009 },\n-  { -151.52946305080897, 100, 2, \n+  { -151.52946305080897, 100, 2,\n           0.19999999999999996 },\n-  { -573.30774483996402, 100, 2, \n+  { -573.30774483996402, 100, 2,\n           0.30000000000000004 },\n-  { 733.40061037838507, 100, 2, \n+  { 733.40061037838507, 100, 2,\n           0.39999999999999991 },\n-  { 604.19889304940330, 100, 2, \n+  { 604.19889304940330, 100, 2,\n           0.50000000000000000 },\n-  { 226.90362556629168, 100, 2, \n+  { 226.90362556629168, 100, 2,\n           0.60000000000000009 },\n-  { 768.31676011669970, 100, 2, \n+  { 768.31676011669970, 100, 2,\n           0.69999999999999996 },\n-  { -489.68041725865896, 100, 2, \n+  { -489.68041725865896, 100, 2,\n           0.80000000000000004 },\n-  { -1005.9604880760811, 100, 2, \n+  { -1005.9604880760811, 100, 2,\n           0.89999999999999991 },\n-  { 0.0000000000000000, 100, 2, \n+  { 0.0000000000000000, 100, 2,\n           1.0000000000000000 },\n };\n \n@@ -2335,47 +2335,47 @@ void test031()\n \n // Test data for l=100, m=5.\n testcase_assoc_legendre<double> data032[] = {\n-  { 0.0000000000000000, 100, 5, \n+  { 0.0000000000000000, 100, 5,\n           -1.0000000000000000 },\n-  { 900551126.09653592, 100, 5, \n+  { 900551126.09653592, 100, 5,\n           -0.90000000000000002 },\n-  { 988567431.55756044, 100, 5, \n+  { 988567431.55756044, 100, 5,\n           -0.80000000000000004 },\n-  { -645646451.90344620, 100, 5, \n+  { -645646451.90344620, 100, 5,\n           -0.69999999999999996 },\n-  { -897114585.29920745, 100, 5, \n+  { -897114585.29920745, 100, 5,\n           -0.59999999999999998 },\n-  { -661710744.42483830, 100, 5, \n+  { -661710744.42483830, 100, 5,\n           -0.50000000000000000 },\n-  { 380163158.51425594, 100, 5, \n+  { 380163158.51425594, 100, 5,\n           -0.40000000000000002 },\n-  { 617391071.36632609, 100, 5, \n+  { 617391071.36632609, 100, 5,\n           -0.30000000000000004 },\n-  { -805288801.85509181, 100, 5, \n+  { -805288801.85509181, 100, 5,\n           -0.19999999999999996 },\n-  { 481041740.16728652, 100, 5, \n+  { 481041740.16728652, 100, 5,\n           -0.099999999999999978 },\n-  { 0.0000000000000000, 100, 5, \n+  { 0.0000000000000000, 100, 5,\n           0.0000000000000000 },\n-  { -481041740.16729414, 100, 5, \n+  { -481041740.16729414, 100, 5,\n           0.10000000000000009 },\n-  { 805288801.85509181, 100, 5, \n+  { 805288801.85509181, 100, 5,\n           0.19999999999999996 },\n-  { -617391071.36632609, 100, 5, \n+  { -617391071.36632609, 100, 5,\n           0.30000000000000004 },\n-  { -380163158.51424748, 100, 5, \n+  { -380163158.51424748, 100, 5,\n           0.39999999999999991 },\n-  { 661710744.42483830, 100, 5, \n+  { 661710744.42483830, 100, 5,\n           0.50000000000000000 },\n-  { 897114585.29920506, 100, 5, \n+  { 897114585.29920506, 100, 5,\n           0.60000000000000009 },\n-  { 645646451.90344620, 100, 5, \n+  { 645646451.90344620, 100, 5,\n           0.69999999999999996 },\n-  { -988567431.55756044, 100, 5, \n+  { -988567431.55756044, 100, 5,\n           0.80000000000000004 },\n-  { -900551126.09655809, 100, 5, \n+  { -900551126.09655809, 100, 5,\n           0.89999999999999991 },\n-  { 0.0000000000000000, 100, 5, \n+  { 0.0000000000000000, 100, 5,\n           1.0000000000000000 },\n };\n \n@@ -2409,47 +2409,47 @@ void test032()\n \n // Test data for l=100, m=10.\n testcase_assoc_legendre<double> data033[] = {\n-  { 0.0000000000000000, 100, 10, \n+  { 0.0000000000000000, 100, 10,\n           -1.0000000000000000 },\n-  { 2.5643395957658915e+17, 100, 10, \n+  { 2.5643395957658915e+17, 100, 10,\n           -0.90000000000000002 },\n-  { 1.5778673545673316e+18, 100, 10, \n+  { 1.5778673545673316e+18, 100, 10,\n           -0.80000000000000004 },\n-  { 4.4355048487496776e+18, 100, 10, \n+  { 4.4355048487496776e+18, 100, 10,\n           -0.69999999999999996 },\n-  { -9.5936111659124493e+17, 100, 10, \n+  { -9.5936111659124493e+17, 100, 10,\n           -0.59999999999999998 },\n-  { 4.2387123021963372e+18, 100, 10, \n+  { 4.2387123021963372e+18, 100, 10,\n           -0.50000000000000000 },\n-  { 8.2370834618426563e+18, 100, 10, \n+  { 8.2370834618426563e+18, 100, 10,\n           -0.40000000000000002 },\n-  { -4.9089358388052890e+18, 100, 10, \n+  { -4.9089358388052890e+18, 100, 10,\n           -0.30000000000000004 },\n-  { -2.3468810358091279e+18, 100, 10, \n+  { -2.3468810358091279e+18, 100, 10,\n           -0.19999999999999996 },\n-  { 6.8627855225034568e+18, 100, 10, \n+  { 6.8627855225034568e+18, 100, 10,\n           -0.099999999999999978 },\n-  { -8.2494597181670380e+18, 100, 10, \n+  { -8.2494597181670380e+18, 100, 10,\n           0.0000000000000000 },\n-  { 6.8627855225034056e+18, 100, 10, \n+  { 6.8627855225034056e+18, 100, 10,\n           0.10000000000000009 },\n-  { -2.3468810358091279e+18, 100, 10, \n+  { -2.3468810358091279e+18, 100, 10,\n           0.19999999999999996 },\n-  { -4.9089358388052890e+18, 100, 10, \n+  { -4.9089358388052890e+18, 100, 10,\n           0.30000000000000004 },\n-  { 8.2370834618426747e+18, 100, 10, \n+  { 8.2370834618426747e+18, 100, 10,\n           0.39999999999999991 },\n-  { 4.2387123021963372e+18, 100, 10, \n+  { 4.2387123021963372e+18, 100, 10,\n           0.50000000000000000 },\n-  { -9.5936111659112115e+17, 100, 10, \n+  { -9.5936111659112115e+17, 100, 10,\n           0.60000000000000009 },\n-  { 4.4355048487496776e+18, 100, 10, \n+  { 4.4355048487496776e+18, 100, 10,\n           0.69999999999999996 },\n-  { 1.5778673545673316e+18, 100, 10, \n+  { 1.5778673545673316e+18, 100, 10,\n           0.80000000000000004 },\n-  { 2.5643395957690282e+17, 100, 10, \n+  { 2.5643395957690282e+17, 100, 10,\n           0.89999999999999991 },\n-  { 0.0000000000000000, 100, 10, \n+  { 0.0000000000000000, 100, 10,\n           1.0000000000000000 },\n };\n \n@@ -2483,47 +2483,47 @@ void test033()\n \n // Test data for l=100, m=20.\n testcase_assoc_legendre<double> data034[] = {\n-  { 0.0000000000000000, 100, 20, \n+  { 0.0000000000000000, 100, 20,\n           -1.0000000000000000 },\n-  { 7.1604344878778576e+37, 100, 20, \n+  { 7.1604344878778576e+37, 100, 20,\n           -0.90000000000000002 },\n-  { -8.3963895116962035e+38, 100, 20, \n+  { -8.3963895116962035e+38, 100, 20,\n           -0.80000000000000004 },\n-  { 7.9022236853110024e+38, 100, 20, \n+  { 7.9022236853110024e+38, 100, 20,\n           -0.69999999999999996 },\n-  { 8.2680005574120908e+38, 100, 20, \n+  { 8.2680005574120908e+38, 100, 20,\n           -0.59999999999999998 },\n-  { 3.0750497039999469e+38, 100, 20, \n+  { 3.0750497039999469e+38, 100, 20,\n           -0.50000000000000000 },\n-  { -7.6120586043843874e+38, 100, 20, \n+  { -7.6120586043843874e+38, 100, 20,\n           -0.40000000000000002 },\n-  { 1.1474496891901873e+38, 100, 20, \n+  { 1.1474496891901873e+38, 100, 20,\n           -0.30000000000000004 },\n-  { 4.3966251307444218e+38, 100, 20, \n+  { 4.3966251307444218e+38, 100, 20,\n           -0.19999999999999996 },\n-  { -7.0503266451702621e+38, 100, 20, \n+  { -7.0503266451702621e+38, 100, 20,\n           -0.099999999999999978 },\n-  { 7.7727439836159581e+38, 100, 20, \n+  { 7.7727439836159581e+38, 100, 20,\n           0.0000000000000000 },\n-  { -7.0503266451702213e+38, 100, 20, \n+  { -7.0503266451702213e+38, 100, 20,\n           0.10000000000000009 },\n-  { 4.3966251307444218e+38, 100, 20, \n+  { 4.3966251307444218e+38, 100, 20,\n           0.19999999999999996 },\n-  { 1.1474496891901873e+38, 100, 20, \n+  { 1.1474496891901873e+38, 100, 20,\n           0.30000000000000004 },\n-  { -7.6120586043843511e+38, 100, 20, \n+  { -7.6120586043843511e+38, 100, 20,\n           0.39999999999999991 },\n-  { 3.0750497039999469e+38, 100, 20, \n+  { 3.0750497039999469e+38, 100, 20,\n           0.50000000000000000 },\n-  { 8.2680005574120424e+38, 100, 20, \n+  { 8.2680005574120424e+38, 100, 20,\n           0.60000000000000009 },\n-  { 7.9022236853110024e+38, 100, 20, \n+  { 7.9022236853110024e+38, 100, 20,\n           0.69999999999999996 },\n-  { -8.3963895116962035e+38, 100, 20, \n+  { -8.3963895116962035e+38, 100, 20,\n           0.80000000000000004 },\n-  { 7.1604344878809460e+37, 100, 20, \n+  { 7.1604344878809460e+37, 100, 20,\n           0.89999999999999991 },\n-  { 0.0000000000000000, 100, 20, \n+  { 0.0000000000000000, 100, 20,\n           1.0000000000000000 },\n };\n \n@@ -2557,47 +2557,47 @@ void test034()\n \n // Test data for l=100, m=50.\n testcase_assoc_legendre<double> data035[] = {\n-  { 0.0000000000000000, 100, 50, \n+  { 0.0000000000000000, 100, 50,\n           -1.0000000000000000 },\n-  { 9.3231278516893773e+96, 100, 50, \n+  { 9.3231278516893773e+96, 100, 50,\n           -0.90000000000000002 },\n-  { -1.1029797977454331e+98, 100, 50, \n+  { -1.1029797977454331e+98, 100, 50,\n           -0.80000000000000004 },\n-  { 1.8089333903465883e+97, 100, 50, \n+  { 1.8089333903465883e+97, 100, 50,\n           -0.69999999999999996 },\n-  { 5.9364045925669389e+97, 100, 50, \n+  { 5.9364045925669389e+97, 100, 50,\n           -0.59999999999999998 },\n-  { -8.2252620339727163e+97, 100, 50, \n+  { -8.2252620339727163e+97, 100, 50,\n           -0.50000000000000000 },\n-  { 7.1431385093739848e+97, 100, 50, \n+  { 7.1431385093739848e+97, 100, 50,\n           -0.40000000000000002 },\n-  { -3.3520602067479374e+97, 100, 50, \n+  { -3.3520602067479374e+97, 100, 50,\n           -0.30000000000000004 },\n-  { -2.7791149588121386e+97, 100, 50, \n+  { -2.7791149588121386e+97, 100, 50,\n           -0.19999999999999996 },\n-  { 9.0119338550180433e+97, 100, 50, \n+  { 9.0119338550180433e+97, 100, 50,\n           -0.099999999999999978 },\n-  { -1.1712145031578381e+98, 100, 50, \n+  { -1.1712145031578381e+98, 100, 50,\n           0.0000000000000000 },\n-  { 9.0119338550181176e+97, 100, 50, \n+  { 9.0119338550181176e+97, 100, 50,\n           0.10000000000000009 },\n-  { -2.7791149588121386e+97, 100, 50, \n+  { -2.7791149588121386e+97, 100, 50,\n           0.19999999999999996 },\n-  { -3.3520602067479374e+97, 100, 50, \n+  { -3.3520602067479374e+97, 100, 50,\n           0.30000000000000004 },\n-  { 7.1431385093740728e+97, 100, 50, \n+  { 7.1431385093740728e+97, 100, 50,\n           0.39999999999999991 },\n-  { -8.2252620339727163e+97, 100, 50, \n+  { -8.2252620339727163e+97, 100, 50,\n           0.50000000000000000 },\n-  { 5.9364045925668061e+97, 100, 50, \n+  { 5.9364045925668061e+97, 100, 50,\n           0.60000000000000009 },\n-  { 1.8089333903465883e+97, 100, 50, \n+  { 1.8089333903465883e+97, 100, 50,\n           0.69999999999999996 },\n-  { -1.1029797977454331e+98, 100, 50, \n+  { -1.1029797977454331e+98, 100, 50,\n           0.80000000000000004 },\n-  { 9.3231278516894892e+96, 100, 50, \n+  { 9.3231278516894892e+96, 100, 50,\n           0.89999999999999991 },\n-  { 0.0000000000000000, 100, 50, \n+  { 0.0000000000000000, 100, 50,\n           1.0000000000000000 },\n };\n \n@@ -2631,47 +2631,47 @@ void test035()\n \n // Test data for l=100, m=100.\n testcase_assoc_legendre<double> data036[] = {\n-  { 0.0000000000000000, 100, 100, \n+  { 0.0000000000000000, 100, 100,\n           -1.0000000000000000 },\n-  { 5.7751792255758316e+150, 100, 100, \n+  { 5.7751792255758316e+150, 100, 100,\n           -0.90000000000000002 },\n-  { 4.3552236041585515e+164, 100, 100, \n+  { 4.3552236041585515e+164, 100, 100,\n           -0.80000000000000004 },\n-  { 1.5936546850595123e+172, 100, 100, \n+  { 1.5936546850595123e+172, 100, 100,\n           -0.69999999999999996 },\n-  { 1.3579510590289176e+177, 100, 100, \n+  { 1.3579510590289176e+177, 100, 100,\n           -0.59999999999999998 },\n-  { 3.7752749682889513e+180, 100, 100, \n+  { 3.7752749682889513e+180, 100, 100,\n           -0.50000000000000000 },\n-  { 1.0910627330458913e+183, 100, 100, \n+  { 1.0910627330458913e+183, 100, 100,\n           -0.40000000000000002 },\n-  { 5.9697347526822483e+184, 100, 100, \n+  { 5.9697347526822483e+184, 100, 100,\n           -0.30000000000000004 },\n-  { 8.6585879147526714e+185, 100, 100, \n+  { 8.6585879147526714e+185, 100, 100,\n           -0.19999999999999996 },\n-  { 4.0331571908057011e+186, 100, 100, \n+  { 4.0331571908057011e+186, 100, 100,\n           -0.099999999999999978 },\n-  { 6.6663086700729543e+186, 100, 100, \n+  { 6.6663086700729543e+186, 100, 100,\n           0.0000000000000000 },\n-  { 4.0331571908057011e+186, 100, 100, \n+  { 4.0331571908057011e+186, 100, 100,\n           0.10000000000000009 },\n-  { 8.6585879147526714e+185, 100, 100, \n+  { 8.6585879147526714e+185, 100, 100,\n           0.19999999999999996 },\n-  { 5.9697347526822483e+184, 100, 100, \n+  { 5.9697347526822483e+184, 100, 100,\n           0.30000000000000004 },\n-  { 1.0910627330458913e+183, 100, 100, \n+  { 1.0910627330458913e+183, 100, 100,\n           0.39999999999999991 },\n-  { 3.7752749682889513e+180, 100, 100, \n+  { 3.7752749682889513e+180, 100, 100,\n           0.50000000000000000 },\n-  { 1.3579510590289000e+177, 100, 100, \n+  { 1.3579510590289000e+177, 100, 100,\n           0.60000000000000009 },\n-  { 1.5936546850595123e+172, 100, 100, \n+  { 1.5936546850595123e+172, 100, 100,\n           0.69999999999999996 },\n-  { 4.3552236041585515e+164, 100, 100, \n+  { 4.3552236041585515e+164, 100, 100,\n           0.80000000000000004 },\n-  { 5.7751792255761289e+150, 100, 100, \n+  { 5.7751792255761289e+150, 100, 100,\n           0.89999999999999991 },\n-  { 0.0000000000000000, 100, 100, \n+  { 0.0000000000000000, 100, 100,\n           1.0000000000000000 },\n };\n "}, {"sha": "369a977234ada3013e5ef24f5c83714ac8b8d42f", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/07_conf_hyperg/check_value.cc", "status": "modified", "additions": 1469, "deletions": 1469, "changes": 2938, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F07_conf_hyperg%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F07_conf_hyperg%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F07_conf_hyperg%2Fcheck_value.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663"}, {"sha": "c98169edce4e25d7b2f246398245ca469a6c8003", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/14_ellint_3/check_value.cc", "status": "modified", "additions": 1900, "deletions": 1900, "changes": 3800, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F14_ellint_3%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F14_ellint_3%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F14_ellint_3%2Fcheck_value.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663"}, {"sha": "69a3a63ef56fcecc75f3ad14318c36771a4ae698", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/17_hyperg/check_value.cc", "status": "modified", "additions": 4655, "deletions": 4655, "changes": 9310, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F17_hyperg%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F17_hyperg%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F17_hyperg%2Fcheck_value.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663"}, {"sha": "eadb171057fa99906e3cd9cc31d3fed9506d580f", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/22_sph_legendre/check_value.cc", "status": "modified", "additions": 756, "deletions": 756, "changes": 1512, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F22_sph_legendre%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F22_sph_legendre%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F22_sph_legendre%2Fcheck_value.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -41,47 +41,47 @@ if (!(A)) \\\n \n // Test data for l=0, m=0.\n testcase_sph_legendre<double> data001[] = {\n-  { 0.28209479177387814, 0, 0, \n+  { 0.28209479177387814, 0, 0,\n           0.0000000000000000 },\n-  { 0.28209479177387814, 0, 0, \n+  { 0.28209479177387814, 0, 0,\n           0.15707963267948966 },\n-  { 0.28209479177387814, 0, 0, \n+  { 0.28209479177387814, 0, 0,\n           0.31415926535897931 },\n-  { 0.28209479177387814, 0, 0, \n+  { 0.28209479177387814, 0, 0,\n           0.47123889803846897 },\n-  { 0.28209479177387814, 0, 0, \n+  { 0.28209479177387814, 0, 0,\n           0.62831853071795862 },\n-  { 0.28209479177387814, 0, 0, \n+  { 0.28209479177387814, 0, 0,\n           0.78539816339744828 },\n-  { 0.28209479177387814, 0, 0, \n+  { 0.28209479177387814, 0, 0,\n           0.94247779607693793 },\n-  { 0.28209479177387814, 0, 0, \n+  { 0.28209479177387814, 0, 0,\n           1.0995574287564276 },\n-  { 0.28209479177387814, 0, 0, \n+  { 0.28209479177387814, 0, 0,\n           1.2566370614359172 },\n-  { 0.28209479177387814, 0, 0, \n+  { 0.28209479177387814, 0, 0,\n           1.4137166941154069 },\n-  { 0.28209479177387814, 0, 0, \n+  { 0.28209479177387814, 0, 0,\n           1.5707963267948966 },\n-  { 0.28209479177387814, 0, 0, \n+  { 0.28209479177387814, 0, 0,\n           1.7278759594743860 },\n-  { 0.28209479177387814, 0, 0, \n+  { 0.28209479177387814, 0, 0,\n           1.8849555921538759 },\n-  { 0.28209479177387814, 0, 0, \n+  { 0.28209479177387814, 0, 0,\n           2.0420352248333655 },\n-  { 0.28209479177387814, 0, 0, \n+  { 0.28209479177387814, 0, 0,\n           2.1991148575128552 },\n-  { 0.28209479177387814, 0, 0, \n+  { 0.28209479177387814, 0, 0,\n           2.3561944901923448 },\n-  { 0.28209479177387814, 0, 0, \n+  { 0.28209479177387814, 0, 0,\n           2.5132741228718345 },\n-  { 0.28209479177387814, 0, 0, \n+  { 0.28209479177387814, 0, 0,\n           2.6703537555513241 },\n-  { 0.28209479177387814, 0, 0, \n+  { 0.28209479177387814, 0, 0,\n           2.8274333882308138 },\n-  { 0.28209479177387814, 0, 0, \n+  { 0.28209479177387814, 0, 0,\n           2.9845130209103035 },\n-  { 0.28209479177387814, 0, 0, \n+  { 0.28209479177387814, 0, 0,\n           3.1415926535897931 },\n };\n \n@@ -115,47 +115,47 @@ void test001()\n \n // Test data for l=1, m=0.\n testcase_sph_legendre<double> data002[] = {\n-  { 0.48860251190291992, 1, 0, \n+  { 0.48860251190291992, 1, 0,\n           0.0000000000000000 },\n-  { 0.48258700419201100, 1, 0, \n+  { 0.48258700419201100, 1, 0,\n           0.15707963267948966 },\n-  { 0.46468860282345231, 1, 0, \n+  { 0.46468860282345231, 1, 0,\n           0.31415926535897931 },\n-  { 0.43534802584032634, 1, 0, \n+  { 0.43534802584032634, 1, 0,\n           0.47123889803846897 },\n-  { 0.39528773562374975, 1, 0, \n+  { 0.39528773562374975, 1, 0,\n           0.62831853071795862 },\n-  { 0.34549414947133544, 1, 0, \n+  { 0.34549414947133544, 1, 0,\n           0.78539816339744828 },\n-  { 0.28719335072959390, 1, 0, \n+  { 0.28719335072959390, 1, 0,\n           0.94247779607693793 },\n-  { 0.22182089855280451, 1, 0, \n+  { 0.22182089855280451, 1, 0,\n           1.0995574287564276 },\n-  { 0.15098647967228984, 1, 0, \n+  { 0.15098647967228984, 1, 0,\n           1.2566370614359172 },\n-  { 0.076434272566846345, 1, 0, \n+  { 0.076434272566846345, 1, 0,\n           1.4137166941154069 },\n-  { 2.9918275112863369e-17, 1, 0, \n+  { 2.9918275112863369e-17, 1, 0,\n           1.5707963267948966 },\n-  { -0.076434272566846179, 1, 0, \n+  { -0.076434272566846179, 1, 0,\n           1.7278759594743860 },\n-  { -0.15098647967228976, 1, 0, \n+  { -0.15098647967228976, 1, 0,\n           1.8849555921538759 },\n-  { -0.22182089855280446, 1, 0, \n+  { -0.22182089855280446, 1, 0,\n           2.0420352248333655 },\n-  { -0.28719335072959390, 1, 0, \n+  { -0.28719335072959390, 1, 0,\n           2.1991148575128552 },\n-  { -0.34549414947133544, 1, 0, \n+  { -0.34549414947133544, 1, 0,\n           2.3561944901923448 },\n-  { -0.39528773562374969, 1, 0, \n+  { -0.39528773562374969, 1, 0,\n           2.5132741228718345 },\n-  { -0.43534802584032628, 1, 0, \n+  { -0.43534802584032628, 1, 0,\n           2.6703537555513241 },\n-  { -0.46468860282345231, 1, 0, \n+  { -0.46468860282345231, 1, 0,\n           2.8274333882308138 },\n-  { -0.48258700419201095, 1, 0, \n+  { -0.48258700419201095, 1, 0,\n           2.9845130209103035 },\n-  { -0.48860251190291992, 1, 0, \n+  { -0.48860251190291992, 1, 0,\n           3.1415926535897931 },\n };\n \n@@ -189,47 +189,47 @@ void test002()\n \n // Test data for l=1, m=1.\n testcase_sph_legendre<double> data003[] = {\n-  { 0.0000000000000000, 1, 1, \n+  { 0.0000000000000000, 1, 1,\n           0.0000000000000000 },\n-  { -0.054047192447077917, 1, 1, \n+  { -0.054047192447077917, 1, 1,\n           0.15707963267948966 },\n-  { -0.10676356364376104, 1, 1, \n+  { -0.10676356364376104, 1, 1,\n           0.31415926535897931 },\n-  { -0.15685106157558129, 1, 1, \n+  { -0.15685106157558129, 1, 1,\n           0.47123889803846897 },\n-  { -0.20307636581258243, 1, 1, \n+  { -0.20307636581258243, 1, 1,\n           0.62831853071795862 },\n-  { -0.24430125595146013, 1, 1, \n+  { -0.24430125595146013, 1, 1,\n           0.78539816339744828 },\n-  { -0.27951063837942880, 1, 1, \n+  { -0.27951063837942880, 1, 1,\n           0.94247779607693793 },\n-  { -0.30783754124787122, 1, 1, \n+  { -0.30783754124787122, 1, 1,\n           1.0995574287564276 },\n-  { -0.32858446219656551, 1, 1, \n+  { -0.32858446219656551, 1, 1,\n           1.2566370614359172 },\n-  { -0.34124054317667202, 1, 1, \n+  { -0.34124054317667202, 1, 1,\n           1.4137166941154069 },\n-  { -0.34549414947133567, 1, 1, \n+  { -0.34549414947133567, 1, 1,\n           1.5707963267948966 },\n-  { -0.34124054317667202, 1, 1, \n+  { -0.34124054317667202, 1, 1,\n           1.7278759594743860 },\n-  { -0.32858446219656556, 1, 1, \n+  { -0.32858446219656556, 1, 1,\n           1.8849555921538759 },\n-  { -0.30783754124787127, 1, 1, \n+  { -0.30783754124787127, 1, 1,\n           2.0420352248333655 },\n-  { -0.27951063837942880, 1, 1, \n+  { -0.27951063837942880, 1, 1,\n           2.1991148575128552 },\n-  { -0.24430125595146013, 1, 1, \n+  { -0.24430125595146013, 1, 1,\n           2.3561944901923448 },\n-  { -0.20307636581258248, 1, 1, \n+  { -0.20307636581258248, 1, 1,\n           2.5132741228718345 },\n-  { -0.15685106157558140, 1, 1, \n+  { -0.15685106157558140, 1, 1,\n           2.6703537555513241 },\n-  { -0.10676356364376104, 1, 1, \n+  { -0.10676356364376104, 1, 1,\n           2.8274333882308138 },\n-  { -0.054047192447078167, 1, 1, \n+  { -0.054047192447078167, 1, 1,\n           2.9845130209103035 },\n-  { 0.0000000000000000, 1, 1, \n+  { 0.0000000000000000, 1, 1,\n           3.1415926535897931 },\n };\n \n@@ -263,47 +263,47 @@ void test003()\n \n // Test data for l=2, m=0.\n testcase_sph_legendre<double> data004[] = {\n-  { 0.63078313050504009, 2, 0, \n+  { 0.63078313050504009, 2, 0,\n           0.0000000000000000 },\n-  { 0.60762858760316607, 2, 0, \n+  { 0.60762858760316607, 2, 0,\n           0.15707963267948966 },\n-  { 0.54043148688396569, 2, 0, \n+  { 0.54043148688396569, 2, 0,\n           0.31415926535897931 },\n-  { 0.43576954875556589, 2, 0, \n+  { 0.43576954875556589, 2, 0,\n           0.47123889803846897 },\n-  { 0.30388781294457579, 2, 0, \n+  { 0.30388781294457579, 2, 0,\n           0.62831853071795862 },\n-  { 0.15769578262625994, 2, 0, \n+  { 0.15769578262625994, 2, 0,\n           0.78539816339744828 },\n-  { 0.011503752307944235, 2, 0, \n+  { 0.011503752307944235, 2, 0,\n           0.94247779607693793 },\n-  { -0.12037798350304565, 2, 0, \n+  { -0.12037798350304565, 2, 0,\n           1.0995574287564276 },\n-  { -0.22503992163144573, 2, 0, \n+  { -0.22503992163144573, 2, 0,\n           1.2566370614359172 },\n-  { -0.29223702235064597, 2, 0, \n+  { -0.29223702235064597, 2, 0,\n           1.4137166941154069 },\n-  { -0.31539156525252005, 2, 0, \n+  { -0.31539156525252005, 2, 0,\n           1.5707963267948966 },\n-  { -0.29223702235064608, 2, 0, \n+  { -0.29223702235064608, 2, 0,\n           1.7278759594743860 },\n-  { -0.22503992163144584, 2, 0, \n+  { -0.22503992163144584, 2, 0,\n           1.8849555921538759 },\n-  { -0.12037798350304577, 2, 0, \n+  { -0.12037798350304577, 2, 0,\n           2.0420352248333655 },\n-  { 0.011503752307944235, 2, 0, \n+  { 0.011503752307944235, 2, 0,\n           2.1991148575128552 },\n-  { 0.15769578262625994, 2, 0, \n+  { 0.15769578262625994, 2, 0,\n           2.3561944901923448 },\n-  { 0.30388781294457567, 2, 0, \n+  { 0.30388781294457567, 2, 0,\n           2.5132741228718345 },\n-  { 0.43576954875556562, 2, 0, \n+  { 0.43576954875556562, 2, 0,\n           2.6703537555513241 },\n-  { 0.54043148688396569, 2, 0, \n+  { 0.54043148688396569, 2, 0,\n           2.8274333882308138 },\n-  { 0.60762858760316585, 2, 0, \n+  { 0.60762858760316585, 2, 0,\n           2.9845130209103035 },\n-  { 0.63078313050504009, 2, 0, \n+  { 0.63078313050504009, 2, 0,\n           3.1415926535897931 },\n };\n \n@@ -337,47 +337,47 @@ void test004()\n \n // Test data for l=2, m=1.\n testcase_sph_legendre<double> data005[] = {\n-  { 0.0000000000000000, 2, 1, \n+  { 0.0000000000000000, 2, 1,\n           0.0000000000000000 },\n-  { -0.11936529291378727, 2, 1, \n+  { -0.11936529291378727, 2, 1,\n           0.15707963267948966 },\n-  { -0.22704627929027449, 2, 1, \n+  { -0.22704627929027449, 2, 1,\n           0.31415926535897931 },\n-  { -0.31250239392538215, 2, 1, \n+  { -0.31250239392538215, 2, 1,\n           0.47123889803846897 },\n-  { -0.36736859691086526, 2, 1, \n+  { -0.36736859691086526, 2, 1,\n           0.62831853071795862 },\n-  { -0.38627420202318979, 2, 1, \n+  { -0.38627420202318979, 2, 1,\n           0.78539816339744828 },\n-  { -0.36736859691086526, 2, 1, \n+  { -0.36736859691086526, 2, 1,\n           0.94247779607693793 },\n-  { -0.31250239392538226, 2, 1, \n+  { -0.31250239392538226, 2, 1,\n           1.0995574287564276 },\n-  { -0.22704627929027435, 2, 1, \n+  { -0.22704627929027435, 2, 1,\n           1.2566370614359172 },\n-  { -0.11936529291378740, 2, 1, \n+  { -0.11936529291378740, 2, 1,\n           1.4137166941154069 },\n-  { -4.7304946510089748e-17, 2, 1, \n+  { -4.7304946510089748e-17, 2, 1,\n           1.5707963267948966 },\n-  { 0.11936529291378714, 2, 1, \n+  { 0.11936529291378714, 2, 1,\n           1.7278759594743860 },\n-  { 0.22704627929027429, 2, 1, \n+  { 0.22704627929027429, 2, 1,\n           1.8849555921538759 },\n-  { 0.31250239392538226, 2, 1, \n+  { 0.31250239392538226, 2, 1,\n           2.0420352248333655 },\n-  { 0.36736859691086526, 2, 1, \n+  { 0.36736859691086526, 2, 1,\n           2.1991148575128552 },\n-  { 0.38627420202318979, 2, 1, \n+  { 0.38627420202318979, 2, 1,\n           2.3561944901923448 },\n-  { 0.36736859691086526, 2, 1, \n+  { 0.36736859691086526, 2, 1,\n           2.5132741228718345 },\n-  { 0.31250239392538232, 2, 1, \n+  { 0.31250239392538232, 2, 1,\n           2.6703537555513241 },\n-  { 0.22704627929027449, 2, 1, \n+  { 0.22704627929027449, 2, 1,\n           2.8274333882308138 },\n-  { 0.11936529291378781, 2, 1, \n+  { 0.11936529291378781, 2, 1,\n           2.9845130209103035 },\n-  { 0.0000000000000000, 2, 1, \n+  { 0.0000000000000000, 2, 1,\n           3.1415926535897931 },\n };\n \n@@ -411,47 +411,47 @@ void test005()\n \n // Test data for l=2, m=2.\n testcase_sph_legendre<double> data006[] = {\n-  { 0.0000000000000000, 2, 2, \n+  { 0.0000000000000000, 2, 2,\n           0.0000000000000000 },\n-  { 0.0094528025561622549, 2, 2, \n+  { 0.0094528025561622549, 2, 2,\n           0.15707963267948966 },\n-  { 0.036885904048903795, 2, 2, \n+  { 0.036885904048903795, 2, 2,\n           0.31415926535897931 },\n-  { 0.079613961366457681, 2, 2, \n+  { 0.079613961366457681, 2, 2,\n           0.47123889803846897 },\n-  { 0.13345445455470123, 2, 2, \n+  { 0.13345445455470123, 2, 2,\n           0.62831853071795862 },\n-  { 0.19313710101159492, 2, 2, \n+  { 0.19313710101159492, 2, 2,\n           0.78539816339744828 },\n-  { 0.25281974746848851, 2, 2, \n+  { 0.25281974746848851, 2, 2,\n           0.94247779607693793 },\n-  { 0.30666024065673203, 2, 2, \n+  { 0.30666024065673203, 2, 2,\n           1.0995574287564276 },\n-  { 0.34938829797428600, 2, 2, \n+  { 0.34938829797428600, 2, 2,\n           1.2566370614359172 },\n-  { 0.37682139946702747, 2, 2, \n+  { 0.37682139946702747, 2, 2,\n           1.4137166941154069 },\n-  { 0.38627420202318979, 2, 2, \n+  { 0.38627420202318979, 2, 2,\n           1.5707963267948966 },\n-  { 0.37682139946702753, 2, 2, \n+  { 0.37682139946702753, 2, 2,\n           1.7278759594743860 },\n-  { 0.34938829797428606, 2, 2, \n+  { 0.34938829797428606, 2, 2,\n           1.8849555921538759 },\n-  { 0.30666024065673209, 2, 2, \n+  { 0.30666024065673209, 2, 2,\n           2.0420352248333655 },\n-  { 0.25281974746848851, 2, 2, \n+  { 0.25281974746848851, 2, 2,\n           2.1991148575128552 },\n-  { 0.19313710101159492, 2, 2, \n+  { 0.19313710101159492, 2, 2,\n           2.3561944901923448 },\n-  { 0.13345445455470126, 2, 2, \n+  { 0.13345445455470126, 2, 2,\n           2.5132741228718345 },\n-  { 0.079613961366457764, 2, 2, \n+  { 0.079613961366457764, 2, 2,\n           2.6703537555513241 },\n-  { 0.036885904048903795, 2, 2, \n+  { 0.036885904048903795, 2, 2,\n           2.8274333882308138 },\n-  { 0.0094528025561623433, 2, 2, \n+  { 0.0094528025561623433, 2, 2,\n           2.9845130209103035 },\n-  { 0.0000000000000000, 2, 2, \n+  { 0.0000000000000000, 2, 2,\n           3.1415926535897931 },\n };\n \n@@ -485,47 +485,47 @@ void test006()\n \n // Test data for l=5, m=0.\n testcase_sph_legendre<double> data007[] = {\n-  { 0.93560257962738880, 5, 0, \n+  { 0.93560257962738880, 5, 0,\n           0.0000000000000000 },\n-  { 0.77014422942080019, 5, 0, \n+  { 0.77014422942080019, 5, 0,\n           0.15707963267948966 },\n-  { 0.35892185032365215, 5, 0, \n+  { 0.35892185032365215, 5, 0,\n           0.31415926535897931 },\n-  { -0.090214932090594183, 5, 0, \n+  { -0.090214932090594183, 5, 0,\n           0.47123889803846897 },\n-  { -0.36214460396518888, 5, 0, \n+  { -0.36214460396518888, 5, 0,\n           0.62831853071795862 },\n-  { -0.35145955579226890, 5, 0, \n+  { -0.35145955579226890, 5, 0,\n           0.78539816339744828 },\n-  { -0.11441703594725168, 5, 0, \n+  { -0.11441703594725168, 5, 0,\n           0.94247779607693793 },\n-  { 0.17248966720808098, 5, 0, \n+  { 0.17248966720808098, 5, 0,\n           1.0995574287564276 },\n-  { 0.32128384287200523, 5, 0, \n+  { 0.32128384287200523, 5, 0,\n           1.2566370614359172 },\n-  { 0.24377632246714948, 5, 0, \n+  { 0.24377632246714948, 5, 0,\n           1.4137166941154069 },\n-  { 1.0741712853887702e-16, 5, 0, \n+  { 1.0741712853887702e-16, 5, 0,\n           1.5707963267948966 },\n-  { -0.24377632246714906, 5, 0, \n+  { -0.24377632246714906, 5, 0,\n           1.7278759594743860 },\n-  { -0.32128384287200534, 5, 0, \n+  { -0.32128384287200534, 5, 0,\n           1.8849555921538759 },\n-  { -0.17248966720808118, 5, 0, \n+  { -0.17248966720808118, 5, 0,\n           2.0420352248333655 },\n-  { 0.11441703594725168, 5, 0, \n+  { 0.11441703594725168, 5, 0,\n           2.1991148575128552 },\n-  { 0.35145955579226890, 5, 0, \n+  { 0.35145955579226890, 5, 0,\n           2.3561944901923448 },\n-  { 0.36214460396518910, 5, 0, \n+  { 0.36214460396518910, 5, 0,\n           2.5132741228718345 },\n-  { 0.090214932090594724, 5, 0, \n+  { 0.090214932090594724, 5, 0,\n           2.6703537555513241 },\n-  { -0.35892185032365215, 5, 0, \n+  { -0.35892185032365215, 5, 0,\n           2.8274333882308138 },\n-  { -0.77014422942079797, 5, 0, \n+  { -0.77014422942079797, 5, 0,\n           2.9845130209103035 },\n-  { -0.93560257962738880, 5, 0, \n+  { -0.93560257962738880, 5, 0,\n           3.1415926535897931 },\n };\n \n@@ -559,47 +559,47 @@ void test007()\n \n // Test data for l=5, m=1.\n testcase_sph_legendre<double> data008[] = {\n-  { 0.0000000000000000, 5, 1, \n+  { 0.0000000000000000, 5, 1,\n           0.0000000000000000 },\n-  { -0.36712373713318258, 5, 1, \n+  { -0.36712373713318258, 5, 1,\n           0.15707963267948966 },\n-  { -0.54610329010534753, 5, 1, \n+  { -0.54610329010534753, 5, 1,\n           0.31415926535897931 },\n-  { -0.45381991493631785, 5, 1, \n+  { -0.45381991493631785, 5, 1,\n           0.47123889803846897 },\n-  { -0.15679720635769953, 5, 1, \n+  { -0.15679720635769953, 5, 1,\n           0.62831853071795862 },\n-  { 0.16985499419838637, 5, 1, \n+  { 0.16985499419838637, 5, 1,\n           0.78539816339744828 },\n-  { 0.34468004499725180, 5, 1, \n+  { 0.34468004499725180, 5, 1,\n           0.94247779607693793 },\n-  { 0.28349471119605985, 5, 1, \n+  { 0.28349471119605985, 5, 1,\n           1.0995574287564276 },\n-  { 0.044286619339675856, 5, 1, \n+  { 0.044286619339675856, 5, 1,\n           1.2566370614359172 },\n-  { -0.21193784177193470, 5, 1, \n+  { -0.21193784177193470, 5, 1,\n           1.4137166941154069 },\n-  { -0.32028164857621527, 5, 1, \n+  { -0.32028164857621527, 5, 1,\n           1.5707963267948966 },\n-  { -0.21193784177193514, 5, 1, \n+  { -0.21193784177193514, 5, 1,\n           1.7278759594743860 },\n-  { 0.044286619339675606, 5, 1, \n+  { 0.044286619339675606, 5, 1,\n           1.8849555921538759 },\n-  { 0.28349471119605979, 5, 1, \n+  { 0.28349471119605979, 5, 1,\n           2.0420352248333655 },\n-  { 0.34468004499725180, 5, 1, \n+  { 0.34468004499725180, 5, 1,\n           2.1991148575128552 },\n-  { 0.16985499419838637, 5, 1, \n+  { 0.16985499419838637, 5, 1,\n           2.3561944901923448 },\n-  { -0.15679720635769920, 5, 1, \n+  { -0.15679720635769920, 5, 1,\n           2.5132741228718345 },\n-  { -0.45381991493631757, 5, 1, \n+  { -0.45381991493631757, 5, 1,\n           2.6703537555513241 },\n-  { -0.54610329010534753, 5, 1, \n+  { -0.54610329010534753, 5, 1,\n           2.8274333882308138 },\n-  { -0.36712373713318397, 5, 1, \n+  { -0.36712373713318397, 5, 1,\n           2.9845130209103035 },\n-  { 0.0000000000000000, 5, 1, \n+  { 0.0000000000000000, 5, 1,\n           3.1415926535897931 },\n };\n \n@@ -633,47 +633,47 @@ void test008()\n \n // Test data for l=5, m=2.\n testcase_sph_legendre<double> data009[] = {\n-  { 0.0000000000000000, 5, 2, \n+  { 0.0000000000000000, 5, 2,\n           0.0000000000000000 },\n-  { 0.078919441745546146, 5, 2, \n+  { 0.078919441745546146, 5, 2,\n           0.15707963267948966 },\n-  { 0.26373799140437981, 5, 2, \n+  { 0.26373799140437981, 5, 2,\n           0.31415926535897931 },\n-  { 0.43002359842080096, 5, 2, \n+  { 0.43002359842080096, 5, 2,\n           0.47123889803846897 },\n-  { 0.45642486439050994, 5, 2, \n+  { 0.45642486439050994, 5, 2,\n           0.62831853071795862 },\n-  { 0.29959604906083276, 5, 2, \n+  { 0.29959604906083276, 5, 2,\n           0.78539816339744828 },\n-  { 0.023781239849532242, 5, 2, \n+  { 0.023781239849532242, 5, 2,\n           0.94247779607693793 },\n-  { -0.23313989334673815, 5, 2, \n+  { -0.23313989334673815, 5, 2,\n           1.0995574287564276 },\n-  { -0.33799912776303714, 5, 2, \n+  { -0.33799912776303714, 5, 2,\n           1.2566370614359172 },\n-  { -0.23964508489529743, 5, 2, \n+  { -0.23964508489529743, 5, 2,\n           1.4137166941154069 },\n-  { -1.0377480524338170e-16, 5, 2, \n+  { -1.0377480524338170e-16, 5, 2,\n           1.5707963267948966 },\n-  { 0.23964508489529704, 5, 2, \n+  { 0.23964508489529704, 5, 2,\n           1.7278759594743860 },\n-  { 0.33799912776303714, 5, 2, \n+  { 0.33799912776303714, 5, 2,\n           1.8849555921538759 },\n-  { 0.23313989334673837, 5, 2, \n+  { 0.23313989334673837, 5, 2,\n           2.0420352248333655 },\n-  { -0.023781239849532242, 5, 2, \n+  { -0.023781239849532242, 5, 2,\n           2.1991148575128552 },\n-  { -0.29959604906083276, 5, 2, \n+  { -0.29959604906083276, 5, 2,\n           2.3561944901923448 },\n-  { -0.45642486439050978, 5, 2, \n+  { -0.45642486439050978, 5, 2,\n           2.5132741228718345 },\n-  { -0.43002359842080118, 5, 2, \n+  { -0.43002359842080118, 5, 2,\n           2.6703537555513241 },\n-  { -0.26373799140437981, 5, 2, \n+  { -0.26373799140437981, 5, 2,\n           2.8274333882308138 },\n-  { -0.078919441745546867, 5, 2, \n+  { -0.078919441745546867, 5, 2,\n           2.9845130209103035 },\n-  { 0.0000000000000000, 5, 2, \n+  { 0.0000000000000000, 5, 2,\n           3.1415926535897931 },\n };\n \n@@ -707,47 +707,47 @@ void test009()\n \n // Test data for l=5, m=5.\n testcase_sph_legendre<double> data010[] = {\n-  { 0.0000000000000000, 5, 5, \n+  { 0.0000000000000000, 5, 5,\n           0.0000000000000000 },\n-  { -4.3481439097909148e-05, 5, 5, \n+  { -4.3481439097909148e-05, 5, 5,\n           0.15707963267948966 },\n-  { -0.0013078367086431812, 5, 5, \n+  { -0.0013078367086431812, 5, 5,\n           0.31415926535897931 },\n-  { -0.0089510818191922761, 5, 5, \n+  { -0.0089510818191922761, 5, 5,\n           0.47123889803846897 },\n-  { -0.032563803777573896, 5, 5, \n+  { -0.032563803777573896, 5, 5,\n           0.62831853071795862 },\n-  { -0.082047757105021310, 5, 5, \n+  { -0.082047757105021310, 5, 5,\n           0.78539816339744828 },\n-  { -0.16085328164143819, 5, 5, \n+  { -0.16085328164143819, 5, 5,\n           0.94247779607693793 },\n-  { -0.26064303436645375, 5, 5, \n+  { -0.26064303436645375, 5, 5,\n           1.0995574287564276 },\n-  { -0.36113811790820566, 5, 5, \n+  { -0.36113811790820566, 5, 5,\n           1.2566370614359172 },\n-  { -0.43625592459446139, 5, 5, \n+  { -0.43625592459446139, 5, 5,\n           1.4137166941154069 },\n-  { -0.46413220344085809, 5, 5, \n+  { -0.46413220344085809, 5, 5,\n           1.5707963267948966 },\n-  { -0.43625592459446155, 5, 5, \n+  { -0.43625592459446155, 5, 5,\n           1.7278759594743860 },\n-  { -0.36113811790820577, 5, 5, \n+  { -0.36113811790820577, 5, 5,\n           1.8849555921538759 },\n-  { -0.26064303436645381, 5, 5, \n+  { -0.26064303436645381, 5, 5,\n           2.0420352248333655 },\n-  { -0.16085328164143819, 5, 5, \n+  { -0.16085328164143819, 5, 5,\n           2.1991148575128552 },\n-  { -0.082047757105021310, 5, 5, \n+  { -0.082047757105021310, 5, 5,\n           2.3561944901923448 },\n-  { -0.032563803777573924, 5, 5, \n+  { -0.032563803777573924, 5, 5,\n           2.5132741228718345 },\n-  { -0.0089510818191923004, 5, 5, \n+  { -0.0089510818191923004, 5, 5,\n           2.6703537555513241 },\n-  { -0.0013078367086431812, 5, 5, \n+  { -0.0013078367086431812, 5, 5,\n           2.8274333882308138 },\n-  { -4.3481439097910151e-05, 5, 5, \n+  { -4.3481439097910151e-05, 5, 5,\n           2.9845130209103035 },\n-  { 0.0000000000000000, 5, 5, \n+  { 0.0000000000000000, 5, 5,\n           3.1415926535897931 },\n };\n \n@@ -781,47 +781,47 @@ void test010()\n \n // Test data for l=10, m=0.\n testcase_sph_legendre<double> data011[] = {\n-  { 1.2927207364566027, 10, 0, \n+  { 1.2927207364566027, 10, 0,\n           0.0000000000000000 },\n-  { 0.55288895150522632, 10, 0, \n+  { 0.55288895150522632, 10, 0,\n           0.15707963267948966 },\n-  { -0.44874428379711506, 10, 0, \n+  { -0.44874428379711506, 10, 0,\n           0.31415926535897931 },\n-  { -0.25532095827149692, 10, 0, \n+  { -0.25532095827149692, 10, 0,\n           0.47123889803846897 },\n-  { 0.36625249688013967, 10, 0, \n+  { 0.36625249688013967, 10, 0,\n           0.62831853071795862 },\n-  { 0.14880806329084145, 10, 0, \n+  { 0.14880806329084145, 10, 0,\n           0.78539816339744828 },\n-  { -0.33533356797848746, 10, 0, \n+  { -0.33533356797848746, 10, 0,\n           0.94247779607693793 },\n-  { -0.080639967662335818, 10, 0, \n+  { -0.080639967662335818, 10, 0,\n           1.0995574287564276 },\n-  { 0.32197986450174521, 10, 0, \n+  { 0.32197986450174521, 10, 0,\n           1.2566370614359172 },\n-  { 0.025713542103667848, 10, 0, \n+  { 0.025713542103667848, 10, 0,\n           1.4137166941154069 },\n-  { -0.31813049373736707, 10, 0, \n+  { -0.31813049373736707, 10, 0,\n           1.5707963267948966 },\n-  { 0.025713542103666668, 10, 0, \n+  { 0.025713542103666668, 10, 0,\n           1.7278759594743860 },\n-  { 0.32197986450174532, 10, 0, \n+  { 0.32197986450174532, 10, 0,\n           1.8849555921538759 },\n-  { -0.080639967662335416, 10, 0, \n+  { -0.080639967662335416, 10, 0,\n           2.0420352248333655 },\n-  { -0.33533356797848746, 10, 0, \n+  { -0.33533356797848746, 10, 0,\n           2.1991148575128552 },\n-  { 0.14880806329084145, 10, 0, \n+  { 0.14880806329084145, 10, 0,\n           2.3561944901923448 },\n-  { 0.36625249688013994, 10, 0, \n+  { 0.36625249688013994, 10, 0,\n           2.5132741228718345 },\n-  { -0.25532095827149576, 10, 0, \n+  { -0.25532095827149576, 10, 0,\n           2.6703537555513241 },\n-  { -0.44874428379711506, 10, 0, \n+  { -0.44874428379711506, 10, 0,\n           2.8274333882308138 },\n-  { 0.55288895150521977, 10, 0, \n+  { 0.55288895150521977, 10, 0,\n           2.9845130209103035 },\n-  { 1.2927207364566027, 10, 0, \n+  { 1.2927207364566027, 10, 0,\n           3.1415926535897931 },\n };\n \n@@ -855,47 +855,47 @@ void test011()\n \n // Test data for l=10, m=1.\n testcase_sph_legendre<double> data012[] = {\n-  { 0.0000000000000000, 10, 1, \n+  { 0.0000000000000000, 10, 1,\n           0.0000000000000000 },\n-  { -0.74373723919063905, 10, 1, \n+  { -0.74373723919063905, 10, 1,\n           0.15707963267948966 },\n-  { -0.29035110456209551, 10, 1, \n+  { -0.29035110456209551, 10, 1,\n           0.31415926535897931 },\n-  { 0.42219282075271497, 10, 1, \n+  { 0.42219282075271497, 10, 1,\n           0.47123889803846897 },\n-  { 0.17109256898931269, 10, 1, \n+  { 0.17109256898931269, 10, 1,\n           0.62831853071795862 },\n-  { -0.35583574648544292, 10, 1, \n+  { -0.35583574648544292, 10, 1,\n           0.78539816339744828 },\n-  { -0.10089212303543979, 10, 1, \n+  { -0.10089212303543979, 10, 1,\n           0.94247779607693793 },\n-  { 0.32997652649321085, 10, 1, \n+  { 0.32997652649321085, 10, 1,\n           1.0995574287564276 },\n-  { 0.047416376890033113, 10, 1, \n+  { 0.047416376890033113, 10, 1,\n           1.2566370614359172 },\n-  { -0.31999356750295654, 10, 1, \n+  { -0.31999356750295654, 10, 1,\n           1.4137166941154069 },\n-  { -2.0430664782290766e-16, 10, 1, \n+  { -2.0430664782290766e-16, 10, 1,\n           1.5707963267948966 },\n-  { 0.31999356750295660, 10, 1, \n+  { 0.31999356750295660, 10, 1,\n           1.7278759594743860 },\n-  { -0.047416376890032523, 10, 1, \n+  { -0.047416376890032523, 10, 1,\n           1.8849555921538759 },\n-  { -0.32997652649321102, 10, 1, \n+  { -0.32997652649321102, 10, 1,\n           2.0420352248333655 },\n-  { 0.10089212303543979, 10, 1, \n+  { 0.10089212303543979, 10, 1,\n           2.1991148575128552 },\n-  { 0.35583574648544292, 10, 1, \n+  { 0.35583574648544292, 10, 1,\n           2.3561944901923448 },\n-  { -0.17109256898931186, 10, 1, \n+  { -0.17109256898931186, 10, 1,\n           2.5132741228718345 },\n-  { -0.42219282075271553, 10, 1, \n+  { -0.42219282075271553, 10, 1,\n           2.6703537555513241 },\n-  { 0.29035110456209551, 10, 1, \n+  { 0.29035110456209551, 10, 1,\n           2.8274333882308138 },\n-  { 0.74373723919064028, 10, 1, \n+  { 0.74373723919064028, 10, 1,\n           2.9845130209103035 },\n-  { 0.0000000000000000, 10, 1, \n+  { 0.0000000000000000, 10, 1,\n           3.1415926535897931 },\n };\n \n@@ -929,47 +929,47 @@ void test012()\n \n // Test data for l=10, m=2.\n testcase_sph_legendre<double> data013[] = {\n-  { 0.0000000000000000, 10, 2, \n+  { 0.0000000000000000, 10, 2,\n           0.0000000000000000 },\n-  { 0.34571695599980284, 10, 2, \n+  { 0.34571695599980284, 10, 2,\n           0.15707963267948966 },\n-  { 0.62485535978198059, 10, 2, \n+  { 0.62485535978198059, 10, 2,\n           0.31415926535897931 },\n-  { 0.098210039644716363, 10, 2, \n+  { 0.098210039644716363, 10, 2,\n           0.47123889803846897 },\n-  { -0.41494799233049656, 10, 2, \n+  { -0.41494799233049656, 10, 2,\n           0.62831853071795862 },\n-  { -0.081698973831472149, 10, 2, \n+  { -0.081698973831472149, 10, 2,\n           0.78539816339744828 },\n-  { 0.35253132222271272, 10, 2, \n+  { 0.35253132222271272, 10, 2,\n           0.94247779607693793 },\n-  { 0.049026298555981063, 10, 2, \n+  { 0.049026298555981063, 10, 2,\n           1.0995574287564276 },\n-  { -0.32791246874130797, 10, 2, \n+  { -0.32791246874130797, 10, 2,\n           1.2566370614359172 },\n-  { -0.016196782433946910, 10, 2, \n+  { -0.016196782433946910, 10, 2,\n           1.4137166941154069 },\n-  { 0.32106263400438328, 10, 2, \n+  { 0.32106263400438328, 10, 2,\n           1.5707963267948966 },\n-  { -0.016196782433945765, 10, 2, \n+  { -0.016196782433945765, 10, 2,\n           1.7278759594743860 },\n-  { -0.32791246874130797, 10, 2, \n+  { -0.32791246874130797, 10, 2,\n           1.8849555921538759 },\n-  { 0.049026298555980702, 10, 2, \n+  { 0.049026298555980702, 10, 2,\n           2.0420352248333655 },\n-  { 0.35253132222271272, 10, 2, \n+  { 0.35253132222271272, 10, 2,\n           2.1991148575128552 },\n-  { -0.081698973831472149, 10, 2, \n+  { -0.081698973831472149, 10, 2,\n           2.3561944901923448 },\n-  { -0.41494799233049667, 10, 2, \n+  { -0.41494799233049667, 10, 2,\n           2.5132741228718345 },\n-  { 0.098210039644714753, 10, 2, \n+  { 0.098210039644714753, 10, 2,\n           2.6703537555513241 },\n-  { 0.62485535978198059, 10, 2, \n+  { 0.62485535978198059, 10, 2,\n           2.8274333882308138 },\n-  { 0.34571695599980551, 10, 2, \n+  { 0.34571695599980551, 10, 2,\n           2.9845130209103035 },\n-  { 0.0000000000000000, 10, 2, \n+  { 0.0000000000000000, 10, 2,\n           3.1415926535897931 },\n };\n \n@@ -1003,47 +1003,47 @@ void test013()\n \n // Test data for l=10, m=5.\n testcase_sph_legendre<double> data014[] = {\n-  { 0.0000000000000000, 10, 5, \n+  { 0.0000000000000000, 10, 5,\n           0.0000000000000000 },\n-  { -0.0030300124052750187, 10, 5, \n+  { -0.0030300124052750187, 10, 5,\n           0.15707963267948966 },\n-  { -0.070348585248056830, 10, 5, \n+  { -0.070348585248056830, 10, 5,\n           0.31415926535897931 },\n-  { -0.30055029290703639, 10, 5, \n+  { -0.30055029290703639, 10, 5,\n           0.47123889803846897 },\n-  { -0.49987818144009166, 10, 5, \n+  { -0.49987818144009166, 10, 5,\n           0.62831853071795862 },\n-  { -0.28108771757150086, 10, 5, \n+  { -0.28108771757150086, 10, 5,\n           0.78539816339744828 },\n-  { 0.22068081187249308, 10, 5, \n+  { 0.22068081187249308, 10, 5,\n           0.94247779607693793 },\n-  { 0.33689502212592115, 10, 5, \n+  { 0.33689502212592115, 10, 5,\n           1.0995574287564276 },\n-  { -0.086095515520763985, 10, 5, \n+  { -0.086095515520763985, 10, 5,\n           1.2566370614359172 },\n-  { -0.33935827318511558, 10, 5, \n+  { -0.33935827318511558, 10, 5,\n           1.4137166941154069 },\n-  { -1.9213014340664578e-16, 10, 5, \n+  { -1.9213014340664578e-16, 10, 5,\n           1.5707963267948966 },\n-  { 0.33935827318511552, 10, 5, \n+  { 0.33935827318511552, 10, 5,\n           1.7278759594743860 },\n-  { 0.086095515520764526, 10, 5, \n+  { 0.086095515520764526, 10, 5,\n           1.8849555921538759 },\n-  { -0.33689502212592098, 10, 5, \n+  { -0.33689502212592098, 10, 5,\n           2.0420352248333655 },\n-  { -0.22068081187249308, 10, 5, \n+  { -0.22068081187249308, 10, 5,\n           2.1991148575128552 },\n-  { 0.28108771757150086, 10, 5, \n+  { 0.28108771757150086, 10, 5,\n           2.3561944901923448 },\n-  { 0.49987818144009155, 10, 5, \n+  { 0.49987818144009155, 10, 5,\n           2.5132741228718345 },\n-  { 0.30055029290703678, 10, 5, \n+  { 0.30055029290703678, 10, 5,\n           2.6703537555513241 },\n-  { 0.070348585248056830, 10, 5, \n+  { 0.070348585248056830, 10, 5,\n           2.8274333882308138 },\n-  { 0.0030300124052750855, 10, 5, \n+  { 0.0030300124052750855, 10, 5,\n           2.9845130209103035 },\n-  { 0.0000000000000000, 10, 5, \n+  { 0.0000000000000000, 10, 5,\n           3.1415926535897931 },\n };\n \n@@ -1077,47 +1077,47 @@ void test014()\n \n // Test data for l=10, m=10.\n testcase_sph_legendre<double> data015[] = {\n-  { 0.0000000000000000, 10, 10, \n+  { 0.0000000000000000, 10, 10,\n           0.0000000000000000 },\n-  { 4.7624282733343473e-09, 10, 10, \n+  { 4.7624282733343473e-09, 10, 10,\n           0.15707963267948966 },\n-  { 4.3085156534549772e-06, 10, 10, \n+  { 4.3085156534549772e-06, 10, 10,\n           0.31415926535897931 },\n-  { 0.00020182347649472368, 10, 10, \n+  { 0.00020182347649472368, 10, 10,\n           0.47123889803846897 },\n-  { 0.0026711045506511684, 10, 10, \n+  { 0.0026711045506511684, 10, 10,\n           0.62831853071795862 },\n-  { 0.016957196623256943, 10, 10, \n+  { 0.016957196623256943, 10, 10,\n           0.78539816339744828 },\n-  { 0.065174916004990341, 10, 10, \n+  { 0.065174916004990341, 10, 10,\n           0.94247779607693793 },\n-  { 0.17112476903017843, 10, 10, \n+  { 0.17112476903017843, 10, 10,\n           1.0995574287564276 },\n-  { 0.32852414199733548, 10, 10, \n+  { 0.32852414199733548, 10, 10,\n           1.2566370614359172 },\n-  { 0.47940582314838287, 10, 10, \n+  { 0.47940582314838287, 10, 10,\n           1.4137166941154069 },\n-  { 0.54263029194422152, 10, 10, \n+  { 0.54263029194422152, 10, 10,\n           1.5707963267948966 },\n-  { 0.47940582314838309, 10, 10, \n+  { 0.47940582314838309, 10, 10,\n           1.7278759594743860 },\n-  { 0.32852414199733571, 10, 10, \n+  { 0.32852414199733571, 10, 10,\n           1.8849555921538759 },\n-  { 0.17112476903017854, 10, 10, \n+  { 0.17112476903017854, 10, 10,\n           2.0420352248333655 },\n-  { 0.065174916004990341, 10, 10, \n+  { 0.065174916004990341, 10, 10,\n           2.1991148575128552 },\n-  { 0.016957196623256943, 10, 10, \n+  { 0.016957196623256943, 10, 10,\n           2.3561944901923448 },\n-  { 0.0026711045506511706, 10, 10, \n+  { 0.0026711045506511706, 10, 10,\n           2.5132741228718345 },\n-  { 0.00020182347649472493, 10, 10, \n+  { 0.00020182347649472493, 10, 10,\n           2.6703537555513241 },\n-  { 4.3085156534549772e-06, 10, 10, \n+  { 4.3085156534549772e-06, 10, 10,\n           2.8274333882308138 },\n-  { 4.7624282733345673e-09, 10, 10, \n+  { 4.7624282733345673e-09, 10, 10,\n           2.9845130209103035 },\n-  { 0.0000000000000000, 10, 10, \n+  { 0.0000000000000000, 10, 10,\n           3.1415926535897931 },\n };\n \n@@ -1151,47 +1151,47 @@ void test015()\n \n // Test data for l=20, m=0.\n testcase_sph_legendre<double> data016[] = {\n-  { 1.8062879984608917, 20, 0, \n+  { 1.8062879984608917, 20, 0,\n           0.0000000000000000 },\n-  { -0.58906549291415966, 20, 0, \n+  { -0.58906549291415966, 20, 0,\n           0.15707963267948966 },\n-  { 0.45624611402342408, 20, 0, \n+  { 0.45624611402342408, 20, 0,\n           0.31415926535897931 },\n-  { -0.39955402700466724, 20, 0, \n+  { -0.39955402700466724, 20, 0,\n           0.47123889803846897 },\n-  { 0.36818552901640750, 20, 0, \n+  { 0.36818552901640750, 20, 0,\n           0.62831853071795862 },\n-  { -0.34873131330857787, 20, 0, \n+  { -0.34873131330857787, 20, 0,\n           0.78539816339744828 },\n-  { 0.33600882829186501, 20, 0, \n+  { 0.33600882829186501, 20, 0,\n           0.94247779607693793 },\n-  { -0.32759286308122904, 20, 0, \n+  { -0.32759286308122904, 20, 0,\n           1.0995574287564276 },\n-  { 0.32222458068091320, 20, 0, \n+  { 0.32222458068091320, 20, 0,\n           1.2566370614359172 },\n-  { -0.31922731037135960, 20, 0, \n+  { -0.31922731037135960, 20, 0,\n           1.4137166941154069 },\n-  { 0.31826262039531755, 20, 0, \n+  { 0.31826262039531755, 20, 0,\n           1.5707963267948966 },\n-  { -0.31922731037135965, 20, 0, \n+  { -0.31922731037135965, 20, 0,\n           1.7278759594743860 },\n-  { 0.32222458068091336, 20, 0, \n+  { 0.32222458068091336, 20, 0,\n           1.8849555921538759 },\n-  { -0.32759286308122937, 20, 0, \n+  { -0.32759286308122937, 20, 0,\n           2.0420352248333655 },\n-  { 0.33600882829186501, 20, 0, \n+  { 0.33600882829186501, 20, 0,\n           2.1991148575128552 },\n-  { -0.34873131330857787, 20, 0, \n+  { -0.34873131330857787, 20, 0,\n           2.3561944901923448 },\n-  { 0.36818552901640839, 20, 0, \n+  { 0.36818552901640839, 20, 0,\n           2.5132741228718345 },\n-  { -0.39955402700466852, 20, 0, \n+  { -0.39955402700466852, 20, 0,\n           2.6703537555513241 },\n-  { 0.45624611402342408, 20, 0, \n+  { 0.45624611402342408, 20, 0,\n           2.8274333882308138 },\n-  { -0.58906549291416699, 20, 0, \n+  { -0.58906549291416699, 20, 0,\n           2.9845130209103035 },\n-  { 1.8062879984608917, 20, 0, \n+  { 1.8062879984608917, 20, 0,\n           3.1415926535897931 },\n };\n \n@@ -1225,47 +1225,47 @@ void test016()\n \n // Test data for l=20, m=1.\n testcase_sph_legendre<double> data017[] = {\n-  { 0.0000000000000000, 20, 1, \n+  { 0.0000000000000000, 20, 1,\n           0.0000000000000000 },\n-  { -0.45905213045060206, 20, 1, \n+  { -0.45905213045060206, 20, 1,\n           0.15707963267948966 },\n-  { 0.31166370423309170, 20, 1, \n+  { 0.31166370423309170, 20, 1,\n           0.31415926535897931 },\n-  { -0.23278757741246814, 20, 1, \n+  { -0.23278757741246814, 20, 1,\n           0.47123889803846897 },\n-  { 0.17937240823504183, 20, 1, \n+  { 0.17937240823504183, 20, 1,\n           0.62831853071795862 },\n-  { -0.13857299972299736, 20, 1, \n+  { -0.13857299972299736, 20, 1,\n           0.78539816339744828 },\n-  { 0.10495324841927710, 20, 1, \n+  { 0.10495324841927710, 20, 1,\n           0.94247779607693793 },\n-  { -0.075707774352164178, 20, 1, \n+  { -0.075707774352164178, 20, 1,\n           1.0995574287564276 },\n-  { 0.049168697683476620, 20, 1, \n+  { 0.049168697683476620, 20, 1,\n           1.2566370614359172 },\n-  { -0.024216050551253254, 20, 1, \n+  { -0.024216050551253254, 20, 1,\n           1.4137166941154069 },\n-  { 3.9938443510694349e-16, 20, 1, \n+  { 3.9938443510694349e-16, 20, 1,\n           1.5707963267948966 },\n-  { 0.024216050551250898, 20, 1, \n+  { 0.024216050551250898, 20, 1,\n           1.7278759594743860 },\n-  { -0.049168697683475482, 20, 1, \n+  { -0.049168697683475482, 20, 1,\n           1.8849555921538759 },\n-  { 0.075707774352163332, 20, 1, \n+  { 0.075707774352163332, 20, 1,\n           2.0420352248333655 },\n-  { -0.10495324841927710, 20, 1, \n+  { -0.10495324841927710, 20, 1,\n           2.1991148575128552 },\n-  { 0.13857299972299736, 20, 1, \n+  { 0.13857299972299736, 20, 1,\n           2.3561944901923448 },\n-  { -0.17937240823504039, 20, 1, \n+  { -0.17937240823504039, 20, 1,\n           2.5132741228718345 },\n-  { 0.23278757741246658, 20, 1, \n+  { 0.23278757741246658, 20, 1,\n           2.6703537555513241 },\n-  { -0.31166370423309170, 20, 1, \n+  { -0.31166370423309170, 20, 1,\n           2.8274333882308138 },\n-  { 0.45905213045059318, 20, 1, \n+  { 0.45905213045059318, 20, 1,\n           2.9845130209103035 },\n-  { 0.0000000000000000, 20, 1, \n+  { 0.0000000000000000, 20, 1,\n           3.1415926535897931 },\n };\n \n@@ -1299,47 +1299,47 @@ void test017()\n \n // Test data for l=20, m=2.\n testcase_sph_legendre<double> data018[] = {\n-  { 0.0000000000000000, 20, 2, \n+  { 0.0000000000000000, 20, 2,\n           0.0000000000000000 },\n-  { 0.87399805141574682, 20, 2, \n+  { 0.87399805141574682, 20, 2,\n           0.15707963267948966 },\n-  { -0.55116854080894984, 20, 2, \n+  { -0.55116854080894984, 20, 2,\n           0.31415926535897931 },\n-  { 0.44520137308557534, 20, 2, \n+  { 0.44520137308557534, 20, 2,\n           0.47123889803846897 },\n-  { -0.39321637877908228, 20, 2, \n+  { -0.39321637877908228, 20, 2,\n           0.62831853071795862 },\n-  { 0.36312025711350970, 20, 2, \n+  { 0.36312025711350970, 20, 2,\n           0.78539816339744828 },\n-  { -0.34427103004873094, 20, 2, \n+  { -0.34427103004873094, 20, 2,\n           0.94247779607693793 },\n-  { 0.33214917638387625, 20, 2, \n+  { 0.33214917638387625, 20, 2,\n           1.0995574287564276 },\n-  { -0.32455734448839091, 20, 2, \n+  { -0.32455734448839091, 20, 2,\n           1.2566370614359172 },\n-  { 0.32036529628513238, 20, 2, \n+  { 0.32036529628513238, 20, 2,\n           1.4137166941154069 },\n-  { -0.31902310563819986, 20, 2, \n+  { -0.31902310563819986, 20, 2,\n           1.5707963267948966 },\n-  { 0.32036529628513266, 20, 2, \n+  { 0.32036529628513266, 20, 2,\n           1.7278759594743860 },\n-  { -0.32455734448839102, 20, 2, \n+  { -0.32455734448839102, 20, 2,\n           1.8849555921538759 },\n-  { 0.33214917638387670, 20, 2, \n+  { 0.33214917638387670, 20, 2,\n           2.0420352248333655 },\n-  { -0.34427103004873094, 20, 2, \n+  { -0.34427103004873094, 20, 2,\n           2.1991148575128552 },\n-  { 0.36312025711350970, 20, 2, \n+  { 0.36312025711350970, 20, 2,\n           2.3561944901923448 },\n-  { -0.39321637877908278, 20, 2, \n+  { -0.39321637877908278, 20, 2,\n           2.5132741228718345 },\n-  { 0.44520137308557639, 20, 2, \n+  { 0.44520137308557639, 20, 2,\n           2.6703537555513241 },\n-  { -0.55116854080894984, 20, 2, \n+  { -0.55116854080894984, 20, 2,\n           2.8274333882308138 },\n-  { 0.87399805141574360, 20, 2, \n+  { 0.87399805141574360, 20, 2,\n           2.9845130209103035 },\n-  { 0.0000000000000000, 20, 2, \n+  { 0.0000000000000000, 20, 2,\n           3.1415926535897931 },\n };\n \n@@ -1373,47 +1373,47 @@ void test018()\n \n // Test data for l=20, m=5.\n testcase_sph_legendre<double> data019[] = {\n-  { 0.0000000000000000, 20, 5, \n+  { 0.0000000000000000, 20, 5,\n           0.0000000000000000 },\n-  { -0.10024848623504846, 20, 5, \n+  { -0.10024848623504846, 20, 5,\n           0.15707963267948966 },\n-  { -0.68115361075940595, 20, 5, \n+  { -0.68115361075940595, 20, 5,\n           0.31415926535897931 },\n-  { 0.31774532551156237, 20, 5, \n+  { 0.31774532551156237, 20, 5,\n           0.47123889803846897 },\n-  { -0.16011868165390564, 20, 5, \n+  { -0.16011868165390564, 20, 5,\n           0.62831853071795862 },\n-  { 0.085844143304116230, 20, 5, \n+  { 0.085844143304116230, 20, 5,\n           0.78539816339744828 },\n-  { -0.047467540840864686, 20, 5, \n+  { -0.047467540840864686, 20, 5,\n           0.94247779607693793 },\n-  { 0.026283575189471282, 20, 5, \n+  { 0.026283575189471282, 20, 5,\n           1.0995574287564276 },\n-  { -0.013891104052597331, 20, 5, \n+  { -0.013891104052597331, 20, 5,\n           1.2566370614359172 },\n-  { 0.0059873308239496931, 20, 5, \n+  { 0.0059873308239496931, 20, 5,\n           1.4137166941154069 },\n-  { 3.9355286582083095e-16, 20, 5, \n+  { 3.9355286582083095e-16, 20, 5,\n           1.5707963267948966 },\n-  { -0.0059873308239519040, 20, 5, \n+  { -0.0059873308239519040, 20, 5,\n           1.7278759594743860 },\n-  { 0.013891104052598531, 20, 5, \n+  { 0.013891104052598531, 20, 5,\n           1.8849555921538759 },\n-  { -0.026283575189472212, 20, 5, \n+  { -0.026283575189472212, 20, 5,\n           2.0420352248333655 },\n-  { 0.047467540840864686, 20, 5, \n+  { 0.047467540840864686, 20, 5,\n           2.1991148575128552 },\n-  { -0.085844143304116230, 20, 5, \n+  { -0.085844143304116230, 20, 5,\n           2.3561944901923448 },\n-  { 0.16011868165390636, 20, 5, \n+  { 0.16011868165390636, 20, 5,\n           2.5132741228718345 },\n-  { -0.31774532551156448, 20, 5, \n+  { -0.31774532551156448, 20, 5,\n           2.6703537555513241 },\n-  { 0.68115361075940595, 20, 5, \n+  { 0.68115361075940595, 20, 5,\n           2.8274333882308138 },\n-  { 0.10024848623505037, 20, 5, \n+  { 0.10024848623505037, 20, 5,\n           2.9845130209103035 },\n-  { 0.0000000000000000, 20, 5, \n+  { 0.0000000000000000, 20, 5,\n           3.1415926535897931 },\n };\n \n@@ -1447,47 +1447,47 @@ void test019()\n \n // Test data for l=20, m=10.\n testcase_sph_legendre<double> data020[] = {\n-  { 0.0000000000000000, 20, 10, \n+  { 0.0000000000000000, 20, 10,\n           0.0000000000000000 },\n-  { 3.0595797603706485e-05, 20, 10, \n+  { 3.0595797603706485e-05, 20, 10,\n           0.15707963267948966 },\n-  { 0.015924453916397008, 20, 10, \n+  { 0.015924453916397008, 20, 10,\n           0.31415926535897931 },\n-  { 0.26588079118745700, 20, 10, \n+  { 0.26588079118745700, 20, 10,\n           0.47123889803846897 },\n-  { 0.54045081420686825, 20, 10, \n+  { 0.54045081420686825, 20, 10,\n           0.62831853071795862 },\n-  { -0.28215279394285597, 20, 10, \n+  { -0.28215279394285597, 20, 10,\n           0.78539816339744828 },\n-  { 0.0085297337582246665, 20, 10, \n+  { 0.0085297337582246665, 20, 10,\n           0.94247779607693793 },\n-  { 0.16930127953533775, 20, 10, \n+  { 0.16930127953533775, 20, 10,\n           1.0995574287564276 },\n-  { -0.27215134048018352, 20, 10, \n+  { -0.27215134048018352, 20, 10,\n           1.2566370614359172 },\n-  { 0.32456597088029526, 20, 10, \n+  { 0.32456597088029526, 20, 10,\n           1.4137166941154069 },\n-  { -0.34057893241353715, 20, 10, \n+  { -0.34057893241353715, 20, 10,\n           1.5707963267948966 },\n-  { 0.32456597088029449, 20, 10, \n+  { 0.32456597088029449, 20, 10,\n           1.7278759594743860 },\n-  { -0.27215134048018308, 20, 10, \n+  { -0.27215134048018308, 20, 10,\n           1.8849555921538759 },\n-  { 0.16930127953533725, 20, 10, \n+  { 0.16930127953533725, 20, 10,\n           2.0420352248333655 },\n-  { 0.0085297337582246665, 20, 10, \n+  { 0.0085297337582246665, 20, 10,\n           2.1991148575128552 },\n-  { -0.28215279394285597, 20, 10, \n+  { -0.28215279394285597, 20, 10,\n           2.3561944901923448 },\n-  { 0.54045081420686658, 20, 10, \n+  { 0.54045081420686658, 20, 10,\n           2.5132741228718345 },\n-  { 0.26588079118745822, 20, 10, \n+  { 0.26588079118745822, 20, 10,\n           2.6703537555513241 },\n-  { 0.015924453916397008, 20, 10, \n+  { 0.015924453916397008, 20, 10,\n           2.8274333882308138 },\n-  { 3.0595797603707854e-05, 20, 10, \n+  { 3.0595797603707854e-05, 20, 10,\n           2.9845130209103035 },\n-  { 0.0000000000000000, 20, 10, \n+  { 0.0000000000000000, 20, 10,\n           3.1415926535897931 },\n };\n \n@@ -1521,47 +1521,47 @@ void test020()\n \n // Test data for l=20, m=20.\n testcase_sph_legendre<double> data021[] = {\n-  { 0.0000000000000000, 20, 20, \n+  { 0.0000000000000000, 20, 20,\n           0.0000000000000000 },\n-  { 4.9264471419245886e-17, 20, 20, \n+  { 4.9264471419245886e-17, 20, 20,\n           0.15707963267948966 },\n-  { 4.0321091681531780e-11, 20, 20, \n+  { 4.0321091681531780e-11, 20, 20,\n           0.31415926535897931 },\n-  { 8.8474944184471664e-08, 20, 20, \n+  { 8.8474944184471664e-08, 20, 20,\n           0.47123889803846897 },\n-  { 1.5497395129387764e-05, 20, 20, \n+  { 1.5497395129387764e-05, 20, 20,\n           0.62831853071795862 },\n-  { 0.00062457564282984723, 20, 20, \n+  { 0.00062457564282984723, 20, 20,\n           0.78539816339744828 },\n-  { 0.0092265192458967603, 20, 20, \n+  { 0.0092265192458967603, 20, 20,\n           0.94247779607693793 },\n-  { 0.063606673236323269, 20, 20, \n+  { 0.063606673236323269, 20, 20,\n           1.0995574287564276 },\n-  { 0.23442909509776308, 20, 20, \n+  { 0.23442909509776308, 20, 20,\n           1.2566370614359172 },\n-  { 0.49921030481087009, 20, 20, \n+  { 0.49921030481087009, 20, 20,\n           1.4137166941154069 },\n-  { 0.63956545825776223, 20, 20, \n+  { 0.63956545825776223, 20, 20,\n           1.5707963267948966 },\n-  { 0.49921030481087064, 20, 20, \n+  { 0.49921030481087064, 20, 20,\n           1.7278759594743860 },\n-  { 0.23442909509776344, 20, 20, \n+  { 0.23442909509776344, 20, 20,\n           1.8849555921538759 },\n-  { 0.063606673236323352, 20, 20, \n+  { 0.063606673236323352, 20, 20,\n           2.0420352248333655 },\n-  { 0.0092265192458967603, 20, 20, \n+  { 0.0092265192458967603, 20, 20,\n           2.1991148575128552 },\n-  { 0.00062457564282984723, 20, 20, \n+  { 0.00062457564282984723, 20, 20,\n           2.3561944901923448 },\n-  { 1.5497395129387818e-05, 20, 20, \n+  { 1.5497395129387818e-05, 20, 20,\n           2.5132741228718345 },\n-  { 8.8474944184472617e-08, 20, 20, \n+  { 8.8474944184472617e-08, 20, 20,\n           2.6703537555513241 },\n-  { 4.0321091681531780e-11, 20, 20, \n+  { 4.0321091681531780e-11, 20, 20,\n           2.8274333882308138 },\n-  { 4.9264471419250786e-17, 20, 20, \n+  { 4.9264471419250786e-17, 20, 20,\n           2.9845130209103035 },\n-  { 0.0000000000000000, 20, 20, \n+  { 0.0000000000000000, 20, 20,\n           3.1415926535897931 },\n };\n \n@@ -1595,47 +1595,47 @@ void test021()\n \n // Test data for l=50, m=0.\n testcase_sph_legendre<double> data022[] = {\n-  { 2.8350175706934717, 50, 0, \n+  { 2.8350175706934717, 50, 0,\n           0.0000000000000000 },\n-  { 0.53157537495174845, 50, 0, \n+  { 0.53157537495174845, 50, 0,\n           0.15707963267948966 },\n-  { -0.46056183476301349, 50, 0, \n+  { -0.46056183476301349, 50, 0,\n           0.31415926535897931 },\n-  { -0.24876032079677909, 50, 0, \n+  { -0.24876032079677909, 50, 0,\n           0.47123889803846897 },\n-  { 0.36926172901532522, 50, 0, \n+  { 0.36926172901532522, 50, 0,\n           0.62831853071795862 },\n-  { 0.14571730283563306, 50, 0, \n+  { 0.14571730283563306, 50, 0,\n           0.78539816339744828 },\n-  { -0.33636199170850811, 50, 0, \n+  { -0.33636199170850811, 50, 0,\n           0.94247779607693793 },\n-  { -0.079132716267092035, 50, 0, \n+  { -0.079132716267092035, 50, 0,\n           1.0995574287564276 },\n-  { 0.32232921941301440, 50, 0, \n+  { 0.32232921941301440, 50, 0,\n           1.2566370614359172 },\n-  { 0.025253991969481446, 50, 0, \n+  { 0.025253991969481446, 50, 0,\n           1.4137166941154069 },\n-  { -0.31830208724152359, 50, 0, \n+  { -0.31830208724152359, 50, 0,\n           1.5707963267948966 },\n-  { 0.025253991969476128, 50, 0, \n+  { 0.025253991969476128, 50, 0,\n           1.7278759594743860 },\n-  { 0.32232921941301479, 50, 0, \n+  { 0.32232921941301479, 50, 0,\n           1.8849555921538759 },\n-  { -0.079132716267090078, 50, 0, \n+  { -0.079132716267090078, 50, 0,\n           2.0420352248333655 },\n-  { -0.33636199170850811, 50, 0, \n+  { -0.33636199170850811, 50, 0,\n           2.1991148575128552 },\n-  { 0.14571730283563306, 50, 0, \n+  { 0.14571730283563306, 50, 0,\n           2.3561944901923448 },\n-  { 0.36926172901532717, 50, 0, \n+  { 0.36926172901532717, 50, 0,\n           2.5132741228718345 },\n-  { -0.24876032079677393, 50, 0, \n+  { -0.24876032079677393, 50, 0,\n           2.6703537555513241 },\n-  { -0.46056183476301349, 50, 0, \n+  { -0.46056183476301349, 50, 0,\n           2.8274333882308138 },\n-  { 0.53157537495172380, 50, 0, \n+  { 0.53157537495172380, 50, 0,\n           2.9845130209103035 },\n-  { 2.8350175706934717, 50, 0, \n+  { 2.8350175706934717, 50, 0,\n           3.1415926535897931 },\n };\n \n@@ -1669,47 +1669,47 @@ void test022()\n \n // Test data for l=50, m=1.\n testcase_sph_legendre<double> data023[] = {\n-  { 0.0000000000000000, 50, 1, \n+  { 0.0000000000000000, 50, 1,\n           0.0000000000000000 },\n-  { -0.63751752155226116, 50, 1, \n+  { -0.63751752155226116, 50, 1,\n           0.15707963267948966 },\n-  { -0.32616619317604312, 50, 1, \n+  { -0.32616619317604312, 50, 1,\n           0.31415926535897931 },\n-  { 0.40649930826162706, 50, 1, \n+  { 0.40649930826162706, 50, 1,\n           0.47123889803846897 },\n-  { 0.18473991408344026, 50, 1, \n+  { 0.18473991408344026, 50, 1,\n           0.62831853071795862 },\n-  { -0.35083930302013211, 50, 1, \n+  { -0.35083930302013211, 50, 1,\n           0.78539816339744828 },\n-  { -0.10755382110947098, 50, 1, \n+  { -0.10755382110947098, 50, 1,\n           0.94247779607693793 },\n-  { 0.32822568316499862, 50, 1, \n+  { 0.32822568316499862, 50, 1,\n           1.0995574287564276 },\n-  { 0.050286056609798180, 50, 1, \n+  { 0.050286056609798180, 50, 1,\n           1.2566370614359172 },\n-  { -0.31935368562159638, 50, 1, \n+  { -0.31935368562159638, 50, 1,\n           1.4137166941154069 },\n-  { -9.8421602686195941e-16, 50, 1, \n+  { -9.8421602686195941e-16, 50, 1,\n           1.5707963267948966 },\n-  { 0.31935368562159705, 50, 1, \n+  { 0.31935368562159705, 50, 1,\n           1.7278759594743860 },\n-  { -0.050286056609795383, 50, 1, \n+  { -0.050286056609795383, 50, 1,\n           1.8849555921538759 },\n-  { -0.32822568316499923, 50, 1, \n+  { -0.32822568316499923, 50, 1,\n           2.0420352248333655 },\n-  { 0.10755382110947098, 50, 1, \n+  { 0.10755382110947098, 50, 1,\n           2.1991148575128552 },\n-  { 0.35083930302013211, 50, 1, \n+  { 0.35083930302013211, 50, 1,\n           2.3561944901923448 },\n-  { -0.18473991408343632, 50, 1, \n+  { -0.18473991408343632, 50, 1,\n           2.5132741228718345 },\n-  { -0.40649930826163039, 50, 1, \n+  { -0.40649930826163039, 50, 1,\n           2.6703537555513241 },\n-  { 0.32616619317604312, 50, 1, \n+  { 0.32616619317604312, 50, 1,\n           2.8274333882308138 },\n-  { 0.63751752155227837, 50, 1, \n+  { 0.63751752155227837, 50, 1,\n           2.9845130209103035 },\n-  { 0.0000000000000000, 50, 1, \n+  { 0.0000000000000000, 50, 1,\n           3.1415926535897931 },\n };\n \n@@ -1743,47 +1743,47 @@ void test023()\n \n // Test data for l=50, m=2.\n testcase_sph_legendre<double> data024[] = {\n-  { 0.0000000000000000, 50, 2, \n+  { 0.0000000000000000, 50, 2,\n           0.0000000000000000 },\n-  { -0.37230261163839168, 50, 2, \n+  { -0.37230261163839168, 50, 2,\n           0.15707963267948966 },\n-  { 0.50051599680315972, 50, 2, \n+  { 0.50051599680315972, 50, 2,\n           0.31415926535897931 },\n-  { 0.21724795180329545, 50, 2, \n+  { 0.21724795180329545, 50, 2,\n           0.47123889803846897 },\n-  { -0.37948127307610940, 50, 2, \n+  { -0.37948127307610940, 50, 2,\n           0.62831853071795862 },\n-  { -0.13187372121003119, 50, 2, \n+  { -0.13187372121003119, 50, 2,\n           0.78539816339744828 },\n-  { 0.33959009162400194, 50, 2, \n+  { 0.33959009162400194, 50, 2,\n           0.94247779607693793 },\n-  { 0.072537503112490409, 50, 2, \n+  { 0.072537503112490409, 50, 2,\n           1.0995574287564276 },\n-  { -0.32310306941855271, 50, 2, \n+  { -0.32310306941855271, 50, 2,\n           1.2566370614359172 },\n-  { -0.023259822816436588, 50, 2, \n+  { -0.023259822816436588, 50, 2,\n           1.4137166941154069 },\n-  { 0.31842698506357275, 50, 2, \n+  { 0.31842698506357275, 50, 2,\n           1.5707963267948966 },\n-  { -0.023259822816431144, 50, 2, \n+  { -0.023259822816431144, 50, 2,\n           1.7278759594743860 },\n-  { -0.32310306941855299, 50, 2, \n+  { -0.32310306941855299, 50, 2,\n           1.8849555921538759 },\n-  { 0.072537503112488369, 50, 2, \n+  { 0.072537503112488369, 50, 2,\n           2.0420352248333655 },\n-  { 0.33959009162400194, 50, 2, \n+  { 0.33959009162400194, 50, 2,\n           2.1991148575128552 },\n-  { -0.13187372121003119, 50, 2, \n+  { -0.13187372121003119, 50, 2,\n           2.3561944901923448 },\n-  { -0.37948127307611074, 50, 2, \n+  { -0.37948127307611074, 50, 2,\n           2.5132741228718345 },\n-  { 0.21724795180328935, 50, 2, \n+  { 0.21724795180328935, 50, 2,\n           2.6703537555513241 },\n-  { 0.50051599680315972, 50, 2, \n+  { 0.50051599680315972, 50, 2,\n           2.8274333882308138 },\n-  { -0.37230261163836298, 50, 2, \n+  { -0.37230261163836298, 50, 2,\n           2.9845130209103035 },\n-  { 0.0000000000000000, 50, 2, \n+  { 0.0000000000000000, 50, 2,\n           3.1415926535897931 },\n };\n \n@@ -1817,47 +1817,47 @@ void test024()\n \n // Test data for l=50, m=5.\n testcase_sph_legendre<double> data025[] = {\n-  { 0.0000000000000000, 50, 5, \n+  { 0.0000000000000000, 50, 5,\n           0.0000000000000000 },\n-  { -0.57750385903193069, 50, 5, \n+  { -0.57750385903193069, 50, 5,\n           0.15707963267948966 },\n-  { 0.077360497065584566, 50, 5, \n+  { 0.077360497065584566, 50, 5,\n           0.31415926535897931 },\n-  { 0.47707267400540210, 50, 5, \n+  { 0.47707267400540210, 50, 5,\n           0.47123889803846897 },\n-  { 0.055370615126630537, 50, 5, \n+  { 0.055370615126630537, 50, 5,\n           0.62831853071795862 },\n-  { -0.37629451847202855, 50, 5, \n+  { -0.37629451847202855, 50, 5,\n           0.78539816339744828 },\n-  { -0.048042277801960624, 50, 5, \n+  { -0.048042277801960624, 50, 5,\n           0.94247779607693793 },\n-  { 0.33619379362228685, 50, 5, \n+  { 0.33619379362228685, 50, 5,\n           1.0995574287564276 },\n-  { 0.025265227185719726, 50, 5, \n+  { 0.025265227185719726, 50, 5,\n           1.2566370614359172 },\n-  { -0.32083679430964518, 50, 5, \n+  { -0.32083679430964518, 50, 5,\n           1.4137166941154069 },\n-  { -9.8189201019751884e-16, 50, 5, \n+  { -9.8189201019751884e-16, 50, 5,\n           1.5707963267948966 },\n-  { 0.32083679430964590, 50, 5, \n+  { 0.32083679430964590, 50, 5,\n           1.7278759594743860 },\n-  { -0.025265227185716856, 50, 5, \n+  { -0.025265227185716856, 50, 5,\n           1.8849555921538759 },\n-  { -0.33619379362228730, 50, 5, \n+  { -0.33619379362228730, 50, 5,\n           2.0420352248333655 },\n-  { 0.048042277801960624, 50, 5, \n+  { 0.048042277801960624, 50, 5,\n           2.1991148575128552 },\n-  { 0.37629451847202855, 50, 5, \n+  { 0.37629451847202855, 50, 5,\n           2.3561944901923448 },\n-  { -0.055370615126626936, 50, 5, \n+  { -0.055370615126626936, 50, 5,\n           2.5132741228718345 },\n-  { -0.47707267400540210, 50, 5, \n+  { -0.47707267400540210, 50, 5,\n           2.6703537555513241 },\n-  { -0.077360497065584566, 50, 5, \n+  { -0.077360497065584566, 50, 5,\n           2.8274333882308138 },\n-  { 0.57750385903191004, 50, 5, \n+  { 0.57750385903191004, 50, 5,\n           2.9845130209103035 },\n-  { 0.0000000000000000, 50, 5, \n+  { 0.0000000000000000, 50, 5,\n           3.1415926535897931 },\n };\n \n@@ -1891,47 +1891,47 @@ void test025()\n \n // Test data for l=50, m=10.\n testcase_sph_legendre<double> data026[] = {\n-  { 0.0000000000000000, 50, 10, \n+  { 0.0000000000000000, 50, 10,\n           0.0000000000000000 },\n-  { 0.15606941844800759, 50, 10, \n+  { 0.15606941844800759, 50, 10,\n           0.15707963267948966 },\n-  { -0.53748868836814601, 50, 10, \n+  { -0.53748868836814601, 50, 10,\n           0.31415926535897931 },\n-  { -0.49304919025183896, 50, 10, \n+  { -0.49304919025183896, 50, 10,\n           0.47123889803846897 },\n-  { -0.26267582750428264, 50, 10, \n+  { -0.26267582750428264, 50, 10,\n           0.62831853071795862 },\n-  { 0.22058983666314402, 50, 10, \n+  { 0.22058983666314402, 50, 10,\n           0.78539816339744828 },\n-  { 0.32936725160671759, 50, 10, \n+  { 0.32936725160671759, 50, 10,\n           0.94247779607693793 },\n-  { -0.092053311559446988, 50, 10, \n+  { -0.092053311559446988, 50, 10,\n           1.0995574287564276 },\n-  { -0.32542913495935555, 50, 10, \n+  { -0.32542913495935555, 50, 10,\n           1.2566370614359172 },\n-  { 0.025673223789103500, 50, 10, \n+  { 0.025673223789103500, 50, 10,\n           1.4137166941154069 },\n-  { 0.32150019350255743, 50, 10, \n+  { 0.32150019350255743, 50, 10,\n           1.5707963267948966 },\n-  { 0.025673223789108864, 50, 10, \n+  { 0.025673223789108864, 50, 10,\n           1.7278759594743860 },\n-  { -0.32542913495935494, 50, 10, \n+  { -0.32542913495935494, 50, 10,\n           1.8849555921538759 },\n-  { -0.092053311559448570, 50, 10, \n+  { -0.092053311559448570, 50, 10,\n           2.0420352248333655 },\n-  { 0.32936725160671759, 50, 10, \n+  { 0.32936725160671759, 50, 10,\n           2.1991148575128552 },\n-  { 0.22058983666314402, 50, 10, \n+  { 0.22058983666314402, 50, 10,\n           2.3561944901923448 },\n-  { -0.26267582750427909, 50, 10, \n+  { -0.26267582750427909, 50, 10,\n           2.5132741228718345 },\n-  { -0.49304919025184119, 50, 10, \n+  { -0.49304919025184119, 50, 10,\n           2.6703537555513241 },\n-  { -0.53748868836814601, 50, 10, \n+  { -0.53748868836814601, 50, 10,\n           2.8274333882308138 },\n-  { 0.15606941844801259, 50, 10, \n+  { 0.15606941844801259, 50, 10,\n           2.9845130209103035 },\n-  { 0.0000000000000000, 50, 10, \n+  { 0.0000000000000000, 50, 10,\n           3.1415926535897931 },\n };\n \n@@ -1965,47 +1965,47 @@ void test026()\n \n // Test data for l=50, m=20.\n testcase_sph_legendre<double> data027[] = {\n-  { 0.0000000000000000, 50, 20, \n+  { 0.0000000000000000, 50, 20,\n           0.0000000000000000 },\n-  { 3.0409598712833082e-07, 50, 20, \n+  { 3.0409598712833082e-07, 50, 20,\n           0.15707963267948966 },\n-  { 0.030940518122882305, 50, 20, \n+  { 0.030940518122882305, 50, 20,\n           0.31415926535897931 },\n-  { 0.64134588721659935, 50, 20, \n+  { 0.64134588721659935, 50, 20,\n           0.47123889803846897 },\n-  { 0.29895244392136394, 50, 20, \n+  { 0.29895244392136394, 50, 20,\n           0.62831853071795862 },\n-  { 0.25309324781874065, 50, 20, \n+  { 0.25309324781874065, 50, 20,\n           0.78539816339744828 },\n-  { 0.34368634714931712, 50, 20, \n+  { 0.34368634714931712, 50, 20,\n           0.94247779607693793 },\n-  { 0.33996764360663956, 50, 20, \n+  { 0.33996764360663956, 50, 20,\n           1.0995574287564276 },\n-  { 0.12866267745104118, 50, 20, \n+  { 0.12866267745104118, 50, 20,\n           1.2566370614359172 },\n-  { -0.18201114398922874, 50, 20, \n+  { -0.18201114398922874, 50, 20,\n           1.4137166941154069 },\n-  { -0.33216683431510857, 50, 20, \n+  { -0.33216683431510857, 50, 20,\n           1.5707963267948966 },\n-  { -0.18201114398923304, 50, 20, \n+  { -0.18201114398923304, 50, 20,\n           1.7278759594743860 },\n-  { 0.12866267745103846, 50, 20, \n+  { 0.12866267745103846, 50, 20,\n           1.8849555921538759 },\n-  { 0.33996764360663906, 50, 20, \n+  { 0.33996764360663906, 50, 20,\n           2.0420352248333655 },\n-  { 0.34368634714931712, 50, 20, \n+  { 0.34368634714931712, 50, 20,\n           2.1991148575128552 },\n-  { 0.25309324781874065, 50, 20, \n+  { 0.25309324781874065, 50, 20,\n           2.3561944901923448 },\n-  { 0.29895244392136738, 50, 20, \n+  { 0.29895244392136738, 50, 20,\n           2.5132741228718345 },\n-  { 0.64134588721659791, 50, 20, \n+  { 0.64134588721659791, 50, 20,\n           2.6703537555513241 },\n-  { 0.030940518122882305, 50, 20, \n+  { 0.030940518122882305, 50, 20,\n           2.8274333882308138 },\n-  { 3.0409598712835877e-07, 50, 20, \n+  { 3.0409598712835877e-07, 50, 20,\n           2.9845130209103035 },\n-  { 0.0000000000000000, 50, 20, \n+  { 0.0000000000000000, 50, 20,\n           3.1415926535897931 },\n };\n \n@@ -2039,47 +2039,47 @@ void test027()\n \n // Test data for l=50, m=50.\n testcase_sph_legendre<double> data028[] = {\n-  { 0.0000000000000000, 50, 50, \n+  { 0.0000000000000000, 50, 50,\n           0.0000000000000000 },\n-  { 4.1649039898151844e-41, 50, 50, \n+  { 4.1649039898151844e-41, 50, 50,\n           0.15707963267948966 },\n-  { 2.5240684647724192e-26, 50, 50, \n+  { 2.5240684647724192e-26, 50, 50,\n           0.31415926535897931 },\n-  { 5.6927376423967334e-18, 50, 50, \n+  { 5.6927376423967334e-18, 50, 50,\n           0.47123889803846897 },\n-  { 2.3116239814797057e-12, 50, 50, \n+  { 2.3116239814797057e-12, 50, 50,\n           0.62831853071795862 },\n-  { 2.3835981241325311e-08, 50, 50, \n+  { 2.3835981241325311e-08, 50, 50,\n           0.78539816339744828 },\n-  { 1.9992410287270356e-05, 50, 50, \n+  { 1.9992410287270356e-05, 50, 50,\n           0.94247779607693793 },\n-  { 0.0024947505670829791, 50, 50, \n+  { 0.0024947505670829791, 50, 50,\n           1.0995574287564276 },\n-  { 0.065057774647971175, 50, 50, \n+  { 0.065057774647971175, 50, 50,\n           1.2566370614359172 },\n-  { 0.43050607056732243, 50, 50, \n+  { 0.43050607056732243, 50, 50,\n           1.4137166941154069 },\n-  { 0.79980281171531975, 50, 50, \n+  { 0.79980281171531975, 50, 50,\n           1.5707963267948966 },\n-  { 0.43050607056732360, 50, 50, \n+  { 0.43050607056732360, 50, 50,\n           1.7278759594743860 },\n-  { 0.065057774647971384, 50, 50, \n+  { 0.065057774647971384, 50, 50,\n           1.8849555921538759 },\n-  { 0.0024947505670829856, 50, 50, \n+  { 0.0024947505670829856, 50, 50,\n           2.0420352248333655 },\n-  { 1.9992410287270356e-05, 50, 50, \n+  { 1.9992410287270356e-05, 50, 50,\n           2.1991148575128552 },\n-  { 2.3835981241325311e-08, 50, 50, \n+  { 2.3835981241325311e-08, 50, 50,\n           2.3561944901923448 },\n-  { 2.3116239814797222e-12, 50, 50, \n+  { 2.3116239814797222e-12, 50, 50,\n           2.5132741228718345 },\n-  { 5.6927376423968544e-18, 50, 50, \n+  { 5.6927376423968544e-18, 50, 50,\n           2.6703537555513241 },\n-  { 2.5240684647724192e-26, 50, 50, \n+  { 2.5240684647724192e-26, 50, 50,\n           2.8274333882308138 },\n-  { 4.1649039898161316e-41, 50, 50, \n+  { 4.1649039898161316e-41, 50, 50,\n           2.9845130209103035 },\n-  { 0.0000000000000000, 50, 50, \n+  { 0.0000000000000000, 50, 50,\n           3.1415926535897931 },\n };\n \n@@ -2113,47 +2113,47 @@ void test028()\n \n // Test data for l=100, m=0.\n testcase_sph_legendre<double> data029[] = {\n-  { 3.9993839251484076, 100, 0, \n+  { 3.9993839251484076, 100, 0,\n           0.0000000000000000 },\n-  { -0.60770160285935471, 100, 0, \n+  { -0.60770160285935471, 100, 0,\n           0.15707963267948966 },\n-  { 0.46193027883956100, 100, 0, \n+  { 0.46193027883956100, 100, 0,\n           0.31415926535897931 },\n-  { -0.40218718869815234, 100, 0, \n+  { -0.40218718869815234, 100, 0,\n           0.47123889803846897 },\n-  { 0.36960201406910737, 100, 0, \n+  { 0.36960201406910737, 100, 0,\n           0.62831853071795862 },\n-  { -0.34953726547378611, 100, 0, \n+  { -0.34953726547378611, 100, 0,\n           0.78539816339744828 },\n-  { 0.33646959352497846, 100, 0, \n+  { 0.33646959352497846, 100, 0,\n           0.94247779607693793 },\n-  { -0.32784733067663169, 100, 0, \n+  { -0.32784733067663169, 100, 0,\n           1.0995574287564276 },\n-  { 0.32235624474047936, 100, 0, \n+  { 0.32235624474047936, 100, 0,\n           1.2566370614359172 },\n-  { -0.31929330706601283, 100, 0, \n+  { -0.31929330706601283, 100, 0,\n           1.4137166941154069 },\n-  { 0.31830791662110325, 100, 0, \n+  { 0.31830791662110325, 100, 0,\n           1.5707963267948966 },\n-  { -0.31929330706601389, 100, 0, \n+  { -0.31929330706601389, 100, 0,\n           1.7278759594743860 },\n-  { 0.32235624474048052, 100, 0, \n+  { 0.32235624474048052, 100, 0,\n           1.8849555921538759 },\n-  { -0.32784733067663291, 100, 0, \n+  { -0.32784733067663291, 100, 0,\n           2.0420352248333655 },\n-  { 0.33646959352497846, 100, 0, \n+  { 0.33646959352497846, 100, 0,\n           2.1991148575128552 },\n-  { -0.34953726547378611, 100, 0, \n+  { -0.34953726547378611, 100, 0,\n           2.3561944901923448 },\n-  { 0.36960201406911114, 100, 0, \n+  { 0.36960201406911114, 100, 0,\n           2.5132741228718345 },\n-  { -0.40218718869815695, 100, 0, \n+  { -0.40218718869815695, 100, 0,\n           2.6703537555513241 },\n-  { 0.46193027883956100, 100, 0, \n+  { 0.46193027883956100, 100, 0,\n           2.8274333882308138 },\n-  { -0.60770160285939478, 100, 0, \n+  { -0.60770160285939478, 100, 0,\n           2.9845130209103035 },\n-  { 3.9993839251484076, 100, 0, \n+  { 3.9993839251484076, 100, 0,\n           3.1415926535897931 },\n };\n \n@@ -2187,47 +2187,47 @@ void test029()\n \n // Test data for l=100, m=1.\n testcase_sph_legendre<double> data030[] = {\n-  { 0.0000000000000000, 100, 1, \n+  { 0.0000000000000000, 100, 1,\n           0.0000000000000000 },\n-  { -0.50851949013719622, 100, 1, \n+  { -0.50851949013719622, 100, 1,\n           0.15707963267948966 },\n-  { 0.33129641402221310, 100, 1, \n+  { 0.33129641402221310, 100, 1,\n           0.31415926535897931 },\n-  { -0.24390405750942562, 100, 1, \n+  { -0.24390405750942562, 100, 1,\n           0.47123889803846897 },\n-  { 0.18659755088414165, 100, 1, \n+  { 0.18659755088414165, 100, 1,\n           0.62831853071795862 },\n-  { -0.14355908970516640, 100, 1, \n+  { -0.14355908970516640, 100, 1,\n           0.78539816339744828 },\n-  { 0.10844906813251093, 100, 1, \n+  { 0.10844906813251093, 100, 1,\n           0.94247779607693793 },\n-  { -0.078100088690859812, 100, 1, \n+  { -0.078100088690859812, 100, 1,\n           1.0995574287564276 },\n-  { 0.050670002998304528, 100, 1, \n+  { 0.050670002998304528, 100, 1,\n           1.2566370614359172 },\n-  { -0.024941251747138762, 100, 1, \n+  { -0.024941251747138762, 100, 1,\n           1.4137166941154069 },\n-  { 1.9587949830851639e-15, 100, 1, \n+  { 1.9587949830851639e-15, 100, 1,\n           1.5707963267948966 },\n-  { 0.024941251747127649, 100, 1, \n+  { 0.024941251747127649, 100, 1,\n           1.7278759594743860 },\n-  { -0.050670002998298595, 100, 1, \n+  { -0.050670002998298595, 100, 1,\n           1.8849555921538759 },\n-  { 0.078100088690855676, 100, 1, \n+  { 0.078100088690855676, 100, 1,\n           2.0420352248333655 },\n-  { -0.10844906813251093, 100, 1, \n+  { -0.10844906813251093, 100, 1,\n           2.1991148575128552 },\n-  { 0.14355908970516640, 100, 1, \n+  { 0.14355908970516640, 100, 1,\n           2.3561944901923448 },\n-  { -0.18659755088413349, 100, 1, \n+  { -0.18659755088413349, 100, 1,\n           2.5132741228718345 },\n-  { 0.24390405750941485, 100, 1, \n+  { 0.24390405750941485, 100, 1,\n           2.6703537555513241 },\n-  { -0.33129641402221310, 100, 1, \n+  { -0.33129641402221310, 100, 1,\n           2.8274333882308138 },\n-  { 0.50851949013714548, 100, 1, \n+  { 0.50851949013714548, 100, 1,\n           2.9845130209103035 },\n-  { 0.0000000000000000, 100, 1, \n+  { 0.0000000000000000, 100, 1,\n           3.1415926535897931 },\n };\n \n@@ -2261,47 +2261,47 @@ void test030()\n \n // Test data for l=100, m=2.\n testcase_sph_legendre<double> data031[] = {\n-  { 0.0000000000000000, 100, 2, \n+  { 0.0000000000000000, 100, 2,\n           0.0000000000000000 },\n-  { 0.67166274297194040, 100, 2, \n+  { 0.67166274297194040, 100, 2,\n           0.15707963267948966 },\n-  { -0.48226933687995144, 100, 2, \n+  { -0.48226933687995144, 100, 2,\n           0.31415926535897931 },\n-  { 0.41175421895715447, 100, 2, \n+  { 0.41175421895715447, 100, 2,\n           0.47123889803846897 },\n-  { -0.37475021787822460, 100, 2, \n+  { -0.37475021787822460, 100, 2,\n           0.62831853071795862 },\n-  { 0.35242909383605475, 100, 2, \n+  { 0.35242909383605475, 100, 2,\n           0.78539816339744828 },\n-  { -0.33807110409160002, 100, 2, \n+  { -0.33807110409160002, 100, 2,\n           0.94247779607693793 },\n-  { 0.32867180390709999, 100, 2, \n+  { 0.32867180390709999, 100, 2,\n           1.0995574287564276 },\n-  { -0.32271583790278469, 100, 2, \n+  { -0.32271583790278469, 100, 2,\n           1.2566370614359172 },\n-  { 0.31940354677687433, 100, 2, \n+  { 0.31940354677687433, 100, 2,\n           1.4137166941154069 },\n-  { -0.31833943693772526, 100, 2, \n+  { -0.31833943693772526, 100, 2,\n           1.5707963267948966 },\n-  { 0.31940354677687521, 100, 2, \n+  { 0.31940354677687521, 100, 2,\n           1.7278759594743860 },\n-  { -0.32271583790278524, 100, 2, \n+  { -0.32271583790278524, 100, 2,\n           1.8849555921538759 },\n-  { 0.32867180390710143, 100, 2, \n+  { 0.32867180390710143, 100, 2,\n           2.0420352248333655 },\n-  { -0.33807110409160002, 100, 2, \n+  { -0.33807110409160002, 100, 2,\n           2.1991148575128552 },\n-  { 0.35242909383605475, 100, 2, \n+  { 0.35242909383605475, 100, 2,\n           2.3561944901923448 },\n-  { -0.37475021787822771, 100, 2, \n+  { -0.37475021787822771, 100, 2,\n           2.5132741228718345 },\n-  { 0.41175421895716069, 100, 2, \n+  { 0.41175421895716069, 100, 2,\n           2.6703537555513241 },\n-  { -0.48226933687995144, 100, 2, \n+  { -0.48226933687995144, 100, 2,\n           2.8274333882308138 },\n-  { 0.67166274297196804, 100, 2, \n+  { 0.67166274297196804, 100, 2,\n           2.9845130209103035 },\n-  { 0.0000000000000000, 100, 2, \n+  { 0.0000000000000000, 100, 2,\n           3.1415926535897931 },\n };\n \n@@ -2335,47 +2335,47 @@ void test031()\n \n // Test data for l=100, m=5.\n testcase_sph_legendre<double> data032[] = {\n-  { 0.0000000000000000, 100, 5, \n+  { 0.0000000000000000, 100, 5,\n           0.0000000000000000 },\n-  { 0.062564361105907143, 100, 5, \n+  { 0.062564361105907143, 100, 5,\n           0.15707963267948966 },\n-  { 0.14179554455880186, 100, 5, \n+  { 0.14179554455880186, 100, 5,\n           0.31415926535897931 },\n-  { -0.14356866942906019, 100, 5, \n+  { -0.14356866942906019, 100, 5,\n           0.47123889803846897 },\n-  { 0.12355483388448507, 100, 5, \n+  { 0.12355483388448507, 100, 5,\n           0.62831853071795862 },\n-  { -0.10090029999681098, 100, 5, \n+  { -0.10090029999681098, 100, 5,\n           0.78539816339744828 },\n-  { 0.078905134460230564, 100, 5, \n+  { 0.078905134460230564, 100, 5,\n           0.94247779607693793 },\n-  { -0.058040182398187236, 100, 5, \n+  { -0.058040182398187236, 100, 5,\n           1.0995574287564276 },\n-  { 0.038142759389484152, 100, 5, \n+  { 0.038142759389484152, 100, 5,\n           1.2566370614359172 },\n-  { -0.018906264170660277, 100, 5, \n+  { -0.018906264170660277, 100, 5,\n           1.4137166941154069 },\n-  { 1.9576303042914544e-15, 100, 5, \n+  { 1.9576303042914544e-15, 100, 5,\n           1.5707963267948966 },\n-  { 0.018906264170649747, 100, 5, \n+  { 0.018906264170649747, 100, 5,\n           1.7278759594743860 },\n-  { -0.038142759389478524, 100, 5, \n+  { -0.038142759389478524, 100, 5,\n           1.8849555921538759 },\n-  { 0.058040182398182996, 100, 5, \n+  { 0.058040182398182996, 100, 5,\n           2.0420352248333655 },\n-  { -0.078905134460230564, 100, 5, \n+  { -0.078905134460230564, 100, 5,\n           2.1991148575128552 },\n-  { 0.10090029999681098, 100, 5, \n+  { 0.10090029999681098, 100, 5,\n           2.3561944901923448 },\n-  { -0.12355483388447780, 100, 5, \n+  { -0.12355483388447780, 100, 5,\n           2.5132741228718345 },\n-  { 0.14356866942904903, 100, 5, \n+  { 0.14356866942904903, 100, 5,\n           2.6703537555513241 },\n-  { -0.14179554455880186, 100, 5, \n+  { -0.14179554455880186, 100, 5,\n           2.8274333882308138 },\n-  { -0.062564361105959004, 100, 5, \n+  { -0.062564361105959004, 100, 5,\n           2.9845130209103035 },\n-  { 0.0000000000000000, 100, 5, \n+  { 0.0000000000000000, 100, 5,\n           3.1415926535897931 },\n };\n \n@@ -2409,47 +2409,47 @@ void test032()\n \n // Test data for l=100, m=10.\n testcase_sph_legendre<double> data033[] = {\n-  { 0.0000000000000000, 100, 10, \n+  { 0.0000000000000000, 100, 10,\n           0.0000000000000000 },\n-  { -0.75366545187995670, 100, 10, \n+  { -0.75366545187995670, 100, 10,\n           0.15707963267948966 },\n-  { -0.35914570017277186, 100, 10, \n+  { -0.35914570017277186, 100, 10,\n           0.31415926535897931 },\n-  { 0.43480692911578245, 100, 10, \n+  { 0.43480692911578245, 100, 10,\n           0.47123889803846897 },\n-  { -0.40862111080315705, 100, 10, \n+  { -0.40862111080315705, 100, 10,\n           0.62831853071795862 },\n-  { 0.37832688692909400, 100, 10, \n+  { 0.37832688692909400, 100, 10,\n           0.78539816339744828 },\n-  { -0.35484056194773472, 100, 10, \n+  { -0.35484056194773472, 100, 10,\n           0.94247779607693793 },\n-  { 0.33821981171196336, 100, 10, \n+  { 0.33821981171196336, 100, 10,\n           1.0995574287564276 },\n-  { -0.32729120767830605, 100, 10, \n+  { -0.32729120767830605, 100, 10,\n           1.2566370614359172 },\n-  { 0.32110336937091455, 100, 10, \n+  { 0.32110336937091455, 100, 10,\n           1.4137166941154069 },\n-  { -0.31910064020036194, 100, 10, \n+  { -0.31910064020036194, 100, 10,\n           1.5707963267948966 },\n-  { 0.32110336937091488, 100, 10, \n+  { 0.32110336937091488, 100, 10,\n           1.7278759594743860 },\n-  { -0.32729120767830577, 100, 10, \n+  { -0.32729120767830577, 100, 10,\n           1.8849555921538759 },\n-  { 0.33821981171196341, 100, 10, \n+  { 0.33821981171196341, 100, 10,\n           2.0420352248333655 },\n-  { -0.35484056194773472, 100, 10, \n+  { -0.35484056194773472, 100, 10,\n           2.1991148575128552 },\n-  { 0.37832688692909400, 100, 10, \n+  { 0.37832688692909400, 100, 10,\n           2.3561944901923448 },\n-  { -0.40862111080315433, 100, 10, \n+  { -0.40862111080315433, 100, 10,\n           2.5132741228718345 },\n-  { 0.43480692911577806, 100, 10, \n+  { 0.43480692911577806, 100, 10,\n           2.6703537555513241 },\n-  { -0.35914570017277186, 100, 10, \n+  { -0.35914570017277186, 100, 10,\n           2.8274333882308138 },\n-  { -0.75366545187998180, 100, 10, \n+  { -0.75366545187998180, 100, 10,\n           2.9845130209103035 },\n-  { 0.0000000000000000, 100, 10, \n+  { 0.0000000000000000, 100, 10,\n           3.1415926535897931 },\n };\n \n@@ -2483,47 +2483,47 @@ void test033()\n \n // Test data for l=100, m=20.\n testcase_sph_legendre<double> data034[] = {\n-  { 0.0000000000000000, 100, 20, \n+  { 0.0000000000000000, 100, 20,\n           0.0000000000000000 },\n-  { 0.053569660841553138, 100, 20, \n+  { 0.053569660841553138, 100, 20,\n           0.15707963267948966 },\n-  { 0.57154926874732426, 100, 20, \n+  { 0.57154926874732426, 100, 20,\n           0.31415926535897931 },\n-  { 0.47536909969585828, 100, 20, \n+  { 0.47536909969585828, 100, 20,\n           0.47123889803846897 },\n-  { -0.28882554564109014, 100, 20, \n+  { -0.28882554564109014, 100, 20,\n           0.62831853071795862 },\n-  { 0.020116179014049645, 100, 20, \n+  { 0.020116179014049645, 100, 20,\n           0.78539816339744828 },\n-  { 0.14752195931706580, 100, 20, \n+  { 0.14752195931706580, 100, 20,\n           0.94247779607693793 },\n-  { -0.24069428588868527, 100, 20, \n+  { -0.24069428588868527, 100, 20,\n           1.0995574287564276 },\n-  { 0.29031796025014395, 100, 20, \n+  { 0.29031796025014395, 100, 20,\n           1.2566370614359172 },\n-  { -0.31437256851143475, 100, 20, \n+  { -0.31437256851143475, 100, 20,\n           1.4137166941154069 },\n-  { 0.32153954851141792, 100, 20, \n+  { 0.32153954851141792, 100, 20,\n           1.5707963267948966 },\n-  { -0.31437256851143192, 100, 20, \n+  { -0.31437256851143192, 100, 20,\n           1.7278759594743860 },\n-  { 0.29031796025014112, 100, 20, \n+  { 0.29031796025014112, 100, 20,\n           1.8849555921538759 },\n-  { -0.24069428588868211, 100, 20, \n+  { -0.24069428588868211, 100, 20,\n           2.0420352248333655 },\n-  { 0.14752195931706580, 100, 20, \n+  { 0.14752195931706580, 100, 20,\n           2.1991148575128552 },\n-  { 0.020116179014049645, 100, 20, \n+  { 0.020116179014049645, 100, 20,\n           2.3561944901923448 },\n-  { -0.28882554564109658, 100, 20, \n+  { -0.28882554564109658, 100, 20,\n           2.5132741228718345 },\n-  { 0.47536909969585378, 100, 20, \n+  { 0.47536909969585378, 100, 20,\n           2.6703537555513241 },\n-  { 0.57154926874732426, 100, 20, \n+  { 0.57154926874732426, 100, 20,\n           2.8274333882308138 },\n-  { 0.053569660841557065, 100, 20, \n+  { 0.053569660841557065, 100, 20,\n           2.9845130209103035 },\n-  { 0.0000000000000000, 100, 20, \n+  { 0.0000000000000000, 100, 20,\n           3.1415926535897931 },\n };\n \n@@ -2557,47 +2557,47 @@ void test034()\n \n // Test data for l=100, m=50.\n testcase_sph_legendre<double> data035[] = {\n-  { 0.0000000000000000, 100, 50, \n+  { 0.0000000000000000, 100, 50,\n           0.0000000000000000 },\n-  { 3.3047910392590630e-21, 100, 50, \n+  { 3.3047910392590630e-21, 100, 50,\n           0.15707963267948966 },\n-  { 1.0592655372554983e-07, 100, 50, \n+  { 1.0592655372554983e-07, 100, 50,\n           0.31415926535897931 },\n-  { 0.080418744223952635, 100, 50, \n+  { 0.080418744223952635, 100, 50,\n           0.47123889803846897 },\n-  { -0.56450600580393062, 100, 50, \n+  { -0.56450600580393062, 100, 50,\n           0.62831853071795862 },\n-  { 0.33338739844741766, 100, 50, \n+  { 0.33338739844741766, 100, 50,\n           0.78539816339744828 },\n-  { 0.39741714816514678, 100, 50, \n+  { 0.39741714816514678, 100, 50,\n           0.94247779607693793 },\n-  { 0.35223993750972293, 100, 50, \n+  { 0.35223993750972293, 100, 50,\n           1.0995574287564276 },\n-  { 0.17885891940721749, 100, 50, \n+  { 0.17885891940721749, 100, 50,\n           1.2566370614359172 },\n-  { -0.15341660126461953, 100, 50, \n+  { -0.15341660126461953, 100, 50,\n           1.4137166941154069 },\n-  { -0.34175924303503102, 100, 50, \n+  { -0.34175924303503102, 100, 50,\n           1.5707963267948966 },\n-  { -0.15341660126462864, 100, 50, \n+  { -0.15341660126462864, 100, 50,\n           1.7278759594743860 },\n-  { 0.17885891940721332, 100, 50, \n+  { 0.17885891940721332, 100, 50,\n           1.8849555921538759 },\n-  { 0.35223993750972149, 100, 50, \n+  { 0.35223993750972149, 100, 50,\n           2.0420352248333655 },\n-  { 0.39741714816514678, 100, 50, \n+  { 0.39741714816514678, 100, 50,\n           2.1991148575128552 },\n-  { 0.33338739844741766, 100, 50, \n+  { 0.33338739844741766, 100, 50,\n           2.3561944901923448 },\n-  { -0.56450600580392785, 100, 50, \n+  { -0.56450600580392785, 100, 50,\n           2.5132741228718345 },\n-  { 0.080418744223953439, 100, 50, \n+  { 0.080418744223953439, 100, 50,\n           2.6703537555513241 },\n-  { 1.0592655372554983e-07, 100, 50, \n+  { 1.0592655372554983e-07, 100, 50,\n           2.8274333882308138 },\n-  { 3.3047910392597871e-21, 100, 50, \n+  { 3.3047910392597871e-21, 100, 50,\n           2.9845130209103035 },\n-  { 0.0000000000000000, 100, 50, \n+  { 0.0000000000000000, 100, 50,\n           3.1415926535897931 },\n };\n \n@@ -2631,47 +2631,47 @@ void test035()\n \n // Test data for l=100, m=100.\n testcase_sph_legendre<double> data036[] = {\n-  { 0.0000000000000000, 100, 100, \n+  { 0.0000000000000000, 100, 100,\n           0.0000000000000000 },\n-  { 2.5744136608862186e-81, 100, 100, \n+  { 2.5744136608862186e-81, 100, 100,\n           0.15707963267948966 },\n-  { 9.4551974868956498e-52, 100, 100, \n+  { 9.4551974868956498e-52, 100, 100,\n           0.31415926535897931 },\n-  { 4.8096190703396912e-35, 100, 100, \n+  { 4.8096190703396912e-35, 100, 100,\n           0.47123889803846897 },\n-  { 7.9305393636343450e-24, 100, 100, \n+  { 7.9305393636343450e-24, 100, 100,\n           0.62831853071795862 },\n-  { 8.4320740610946652e-16, 100, 100, \n+  { 8.4320740610946652e-16, 100, 100,\n           0.78539816339744828 },\n-  { 5.9319660146027522e-10, 100, 100, \n+  { 5.9319660146027522e-10, 100, 100,\n           0.94247779607693793 },\n-  { 9.2368225946796921e-06, 100, 100, \n+  { 9.2368225946796921e-06, 100, 100,\n           1.0995574287564276 },\n-  { 0.0062815489742043982, 100, 100, \n+  { 0.0062815489742043982, 100, 100,\n           1.2566370614359172 },\n-  { 0.27505966018176986, 100, 100, \n+  { 0.27505966018176986, 100, 100,\n           1.4137166941154069 },\n-  { 0.94936713998764621, 100, 100, \n+  { 0.94936713998764621, 100, 100,\n           1.5707963267948966 },\n-  { 0.27505966018177136, 100, 100, \n+  { 0.27505966018177136, 100, 100,\n           1.7278759594743860 },\n-  { 0.0062815489742044433, 100, 100, \n+  { 0.0062815489742044433, 100, 100,\n           1.8849555921538759 },\n-  { 9.2368225946797582e-06, 100, 100, \n+  { 9.2368225946797582e-06, 100, 100,\n           2.0420352248333655 },\n-  { 5.9319660146027522e-10, 100, 100, \n+  { 5.9319660146027522e-10, 100, 100,\n           2.1991148575128552 },\n-  { 8.4320740610946652e-16, 100, 100, \n+  { 8.4320740610946652e-16, 100, 100,\n           2.3561944901923448 },\n-  { 7.9305393636344581e-24, 100, 100, \n+  { 7.9305393636344581e-24, 100, 100,\n           2.5132741228718345 },\n-  { 4.8096190703399648e-35, 100, 100, \n+  { 4.8096190703399648e-35, 100, 100,\n           2.6703537555513241 },\n-  { 9.4551974868956498e-52, 100, 100, \n+  { 9.4551974868956498e-52, 100, 100,\n           2.8274333882308138 },\n-  { 2.5744136608873895e-81, 100, 100, \n+  { 2.5744136608873895e-81, 100, 100,\n           2.9845130209103035 },\n-  { 0.0000000000000000, 100, 100, \n+  { 0.0000000000000000, 100, 100,\n           3.1415926535897931 },\n };\n "}, {"sha": "eb3782f575e4ca2277999b4e3f3c06c8134a7ff8", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/capacity/empty.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcapacity%2Fempty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcapacity%2Fempty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcapacity%2Fempty.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -23,8 +23,8 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   {\n     const size_t len = 5;\n     typedef std::tr1::array<int, len> array_type;"}, {"sha": "2b69c7ed674bd9464f99a12b2a8ae0fc5036d201", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/capacity/max_size.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcapacity%2Fmax_size.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcapacity%2Fmax_size.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcapacity%2Fmax_size.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -23,8 +23,8 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   {\n     const size_t len = 5;\n     typedef std::tr1::array<int, len> array_type;"}, {"sha": "adbbeb24e21c78d52841b54a013143511ad5b323", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/capacity/size.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcapacity%2Fsize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcapacity%2Fsize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcapacity%2Fsize.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -23,8 +23,8 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   {\n     const size_t len = 5;\n     typedef std::tr1::array<int, len> array_type;"}, {"sha": "3b4995a6fb9876f9dd6392436fddc7daac12a216", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/comparison_operators/equal.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcomparison_operators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcomparison_operators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcomparison_operators%2Fequal.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -23,8 +23,8 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   const size_t len = 5;\n   typedef std::tr1::array<int, len> array_type;\n   bool test __attribute__((unused)) = true;"}, {"sha": "c761f5370e16fbeea3868cbfd50e45b5d11adf62", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/comparison_operators/greater.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcomparison_operators%2Fgreater.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcomparison_operators%2Fgreater.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcomparison_operators%2Fgreater.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -23,8 +23,8 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   const size_t len = 5;\n   typedef std::tr1::array<int, len> array_type;\n   bool test __attribute__((unused)) = true;"}, {"sha": "721e4ca99a9d21a76a3d51265f7b06595bfd1778", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/comparison_operators/greater_or_equal.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcomparison_operators%2Fgreater_or_equal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcomparison_operators%2Fgreater_or_equal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcomparison_operators%2Fgreater_or_equal.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -23,8 +23,8 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   const size_t len = 5;\n   typedef std::tr1::array<int, len> array_type;\n   bool test __attribute__((unused)) = true;"}, {"sha": "4eb026cf2cc7afcc975b41aabfd5381d2482f5aa", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/comparison_operators/less.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcomparison_operators%2Fless.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcomparison_operators%2Fless.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcomparison_operators%2Fless.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -23,8 +23,8 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   const size_t len = 5;\n   typedef std::tr1::array<int, len> array_type;\n   bool test __attribute__((unused)) = true;"}, {"sha": "2d3a2447d78851ef70262ef1d80144d0211324c1", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/comparison_operators/less_or_equal.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcomparison_operators%2Fless_or_equal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcomparison_operators%2Fless_or_equal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcomparison_operators%2Fless_or_equal.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -23,8 +23,8 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   const size_t len = 5;\n   typedef std::tr1::array<int, len> array_type;\n   bool test __attribute__((unused)) = true;"}, {"sha": "d84a3e4fe02064281bd380152a26f42db3792aa8", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/comparison_operators/not_equal.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcomparison_operators%2Fnot_equal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcomparison_operators%2Fnot_equal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcomparison_operators%2Fnot_equal.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -23,8 +23,8 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   const size_t len = 5;\n   typedef std::tr1::array<int, len> array_type;\n   bool test __attribute__((unused)) = true;"}, {"sha": "a4b1a5442aa65ef4379ace654b809852e95bdb5a", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/cons/aggregate_initialization.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcons%2Faggregate_initialization.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcons%2Faggregate_initialization.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcons%2Faggregate_initialization.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -24,8 +24,8 @@\n #include <tr1/array>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   typedef std::tr1::array<int, 5> array_type;\n \n   array_type a = { { 0, 1, 2, 3, 4 } };"}, {"sha": "c05e581d462715a2478281f8d59403aeff5eead0", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/element_access/at_out_of_range.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Felement_access%2Fat_out_of_range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Felement_access%2Fat_out_of_range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Felement_access%2Fat_out_of_range.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -24,8 +24,8 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   const size_t len = 5;\n   typedef std::tr1::array<int, len> array_type;\n   bool test __attribute__((unused)) = true;"}, {"sha": "a6064b8642e4682772bde1b061626cd42fd3175a", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/element_access/back.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Felement_access%2Fback.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Felement_access%2Fback.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Felement_access%2Fback.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -23,13 +23,13 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   bool test __attribute__((unused)) = true;\n \n   const size_t len = 5;\n   typedef std::tr1::array<int, len> array_type;\n-  \n+\n   {\n     array_type a = { { 0, 1, 2, 3, 4 } };\n     int& ri = a.back();"}, {"sha": "a094c91d94e97c592dbf3c2e5fe2fb32c37f607c", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/element_access/data.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Felement_access%2Fdata.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Felement_access%2Fdata.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Felement_access%2Fdata.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -23,13 +23,13 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   bool test __attribute__((unused)) = true;\n \n   const size_t len = 5;\n   typedef std::tr1::array<int, len> array_type;\n-  \n+\n   {\n     array_type a = { { 0, 1, 2, 3, 4 } };\n     int* pi = a.data();"}, {"sha": "d3ac16148405be87623fc7d3ac124a53531f9b01", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/element_access/front.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Felement_access%2Ffront.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Felement_access%2Ffront.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Felement_access%2Ffront.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -23,13 +23,13 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   bool test __attribute__((unused)) = true;\n \n   const size_t len = 5;\n   typedef std::tr1::array<int, len> array_type;\n-  \n+\n   {\n     array_type a = { { 0, 1, 2, 3, 4 } };\n     int& ri = a.front();"}, {"sha": "755f8dec53b2f7fa1a477932a839375bb453c420", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/iterators/end_is_one_past.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fiterators%2Fend_is_one_past.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fiterators%2Fend_is_one_past.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fiterators%2Fend_is_one_past.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -24,8 +24,8 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   const size_t len = 5;\n   typedef std::tr1::array<int, len> array_type;\n   bool test __attribute__((unused)) = true;"}, {"sha": "7ce811e9cc9579610d5be718b640a852829ad6cb", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/requirements/assign.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Frequirements%2Fassign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Frequirements%2Fassign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Frequirements%2Fassign.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -23,8 +23,8 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   bool test __attribute__((unused)) = true;\n \n   const size_t len = 3;\n@@ -36,7 +36,7 @@ test01()\n   a.assign(value);\n   VERIFY( a[0] == value );\n   VERIFY( a[1] == value );\n-  VERIFY( a[2] == value );  \n+  VERIFY( a[2] == value );\n }\n \n int main()"}, {"sha": "3cb9a7299cd0eee2c154aca40becf1e7a617e317", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/requirements/contiguous.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Frequirements%2Fcontiguous.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Frequirements%2Fcontiguous.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Frequirements%2Fcontiguous.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -23,8 +23,8 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   const size_t len = 5;\n   typedef std::tr1::array<int, len> array_type;\n   bool test __attribute__((unused)) = true;"}, {"sha": "2ba237bf6986d21e741f9dfb4e09923ba4f30763", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/requirements/member_swap.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Frequirements%2Fmember_swap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Frequirements%2Fmember_swap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Frequirements%2Fmember_swap.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -23,8 +23,8 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   bool test __attribute__((unused)) = true;\n \n   const size_t len = 5;"}, {"sha": "d597e605af0ef81c31d5d1ad8aa8d3514c5d2863", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/requirements/zero_sized_arrays.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Frequirements%2Fzero_sized_arrays.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Frequirements%2Fzero_sized_arrays.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Frequirements%2Fzero_sized_arrays.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -23,8 +23,8 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   const size_t len = 0;\n   typedef std::tr1::array<int, len> array_type;\n   bool test __attribute__((unused)) = true;"}, {"sha": "5e85416e08c3acc1147154c6abba778871dde28e", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/specialized_algorithms/swap.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fspecialized_algorithms%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fspecialized_algorithms%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fspecialized_algorithms%2Fswap.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -23,8 +23,8 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   bool test __attribute__((unused)) = true;\n \n   const size_t len = 5;"}, {"sha": "94bf937c0c73db9a860e70bd24d49fc01882e4db", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/tuple_interface/get.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Ftuple_interface%2Fget.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92ab29ffac7b8012c4787be66a43c08923c3663/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Ftuple_interface%2Fget.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Ftuple_interface%2Fget.cc?ref=f92ab29ffac7b8012c4787be66a43c08923c3663", "patch": "@@ -23,8 +23,8 @@\n #include <testsuite_hooks.h>\n \n void\n-test01() \n-{ \n+test01()\n+{\n   bool test __attribute__((unused)) = true;\n   using namespace std::tr1;\n "}]}