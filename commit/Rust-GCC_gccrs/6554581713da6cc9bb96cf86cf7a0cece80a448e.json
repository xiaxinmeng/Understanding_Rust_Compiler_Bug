{"sha": "6554581713da6cc9bb96cf86cf7a0cece80a448e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU1NDU4MTcxM2RhNmNjOWJiOTZjZjg2Y2Y3YTBjZWNlODBhNDQ4ZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2014-12-13T20:44:06Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-12-13T20:44:06Z"}, "message": "Post-Urbana updates to Library Fundamentals v1.\n\n\t* include/experimental/any (any): Remove allocator support and update\n\tfeature-testing macro.\n\t* include/experimental/functional: Update feature-testing macro.\n\t* include/experimental/optional (optional::_M_get()): Add constexpr.\n\t(optional::operator*(), optional::value()): Overload and add\n\tref-qualifiers. Update feature-testing macro.\n\t* include/experimental/string_view (basic_string_view::clear): Remove\n\tand update feature-testing macro.\n\t* testsuite/experimental/any/cons/3.cc: Remove.\n\t* testsuite/experimental/any/cons/4.cc: Remove.\n\t* testsuite/experimental/any/misc/any_cast.cc: Remove allocator tests.\n\t* testsuite/experimental/any/misc/any_cast_neg.cc: Adjust dg-error.\n\t* testsuite/experimental/string_view/capacity/1.cc: Don't test clear().\n\nFrom-SVN: r218709", "tree": {"sha": "5652a60d71016c53bbb0aac1ef275c4b2a0d0115", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5652a60d71016c53bbb0aac1ef275c4b2a0d0115"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6554581713da6cc9bb96cf86cf7a0cece80a448e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6554581713da6cc9bb96cf86cf7a0cece80a448e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6554581713da6cc9bb96cf86cf7a0cece80a448e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6554581713da6cc9bb96cf86cf7a0cece80a448e/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d64474d27f8ebcff61eecfff88182c5e9bd1622f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d64474d27f8ebcff61eecfff88182c5e9bd1622f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d64474d27f8ebcff61eecfff88182c5e9bd1622f"}], "stats": {"total": 440, "additions": 64, "deletions": 376}, "files": [{"sha": "0df6b3b910740962913fb3438a1e5cf4d31f2783", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6554581713da6cc9bb96cf86cf7a0cece80a448e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6554581713da6cc9bb96cf86cf7a0cece80a448e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6554581713da6cc9bb96cf86cf7a0cece80a448e", "patch": "@@ -1,3 +1,19 @@\n+2014-12-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/experimental/any (any): Remove allocator support and update\n+\tfeature-testing macro.\n+\t* include/experimental/functional: Update feature-testing macro.\n+\t* include/experimental/optional (optional::_M_get()): Add constexpr.\n+\t(optional::operator*(), optional::value()): Overload and add\n+\tref-qualifiers. Update feature-testing macro.\n+\t* include/experimental/string_view (basic_string_view::clear): Remove\n+\tand update feature-testing macro.\n+\t* testsuite/experimental/any/cons/3.cc: Remove.\n+\t* testsuite/experimental/any/cons/4.cc: Remove.\n+\t* testsuite/experimental/any/misc/any_cast.cc: Remove allocator tests.\n+\t* testsuite/experimental/any/misc/any_cast_neg.cc: Adjust dg-error.\n+\t* testsuite/experimental/string_view/capacity/1.cc: Don't test clear().\n+\n 2014-12-13  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/58594"}, {"sha": "3af925fd50dd0ea3b28db68e183ea44c8c11f308", "filename": "libstdc++-v3/include/experimental/any", "status": "modified", "additions": 3, "deletions": 172, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6554581713da6cc9bb96cf86cf7a0cece80a448e/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6554581713da6cc9bb96cf86cf7a0cece80a448e/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany?ref=6554581713da6cc9bb96cf86cf7a0cece80a448e", "patch": "@@ -36,11 +36,9 @@\n #else\n \n #include <typeinfo>\n-#include <memory>\n+#include <new>\n #include <utility>\n #include <type_traits>\n-#include <bits/alloc_traits.h>\n-#include <bits/uses_allocator.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -60,7 +58,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * @{\n    */\n \n-#define __cpp_lib_experimental_any 201402\n+#define __cpp_lib_experimental_any 201411\n \n   /**\n    *  @brief Exception class thrown by a failed @c any_cast\n@@ -96,7 +94,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       std::aligned_storage<sizeof(_M_ptr), sizeof(_M_ptr)>::type _M_buffer;\n     };\n \n-    template<typename _Tp, typename _Safe = is_nothrow_copy_constructible<_Tp>,\n+    template<typename _Tp, typename _Safe = is_nothrow_move_constructible<_Tp>,\n \t     bool _Fits = (sizeof(_Tp) <= sizeof(_Storage))>\n       using _Internal = std::integral_constant<bool, _Safe::value && _Fits>;\n \n@@ -111,19 +109,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t     _Manager_internal<_Tp>,\n \t\t\t\t     _Manager_external<_Tp>>;\n \n-#if __cpp_rtti\n-    // When RTTI is disabled __any_caster assumes the manager is either\n-    // _Manager_internal or _Manager_external, so this type must not be used.\n-    template<typename _Tp, typename _Alloc>\n-      struct _Manager_alloc; // creates contained object using an allocator\n-\n-    template<typename _Tp, typename _Alloc,\n-\t     typename _TpAlloc = __alloc_rebind<_Alloc, _Tp>>\n-      using _ManagerAlloc = conditional_t<_Internal<_Tp>::value,\n-\t\t\t\t\t  _Manager_internal<_Tp>,\n-\t\t\t\t\t  _Manager_alloc<_Tp, _TpAlloc>>;\n-#endif\n-\n     template<typename _Tp, typename _Decayed = decay_t<_Tp>>\n       using _Decay = enable_if_t<!is_same<_Decayed, any>::value, _Decayed>;\n \n@@ -165,35 +150,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t      \"The contained object must be CopyConstructible\");\n       }\n \n-    /// Allocator-extended default constructor (the allocator is ignored).\n-    template <typename _Allocator>\n-      any(allocator_arg_t, const _Allocator&) noexcept : any() { }\n-\n-#if __cpp_rtti\n-    /// Construct with a copy of @p __value as the contained object.\n-    template <typename _Allocator, typename _ValueType,\n-\t      typename _Tp = _Decay<_ValueType>,\n-\t      typename _Mgr = _ManagerAlloc<_Tp, _Allocator>>\n-      any(allocator_arg_t, const _Allocator& __a, _ValueType&& __value)\n-      : _M_manager(&_Mgr::_S_manage),\n-        _M_storage(_Mgr::_S_alloc(__a, std::forward<_ValueType>(__value)))\n-      {\n-\tstatic_assert(is_copy_constructible<_Tp>::value,\n-\t\t      \"The contained object must be CopyConstructible\");\n-      }\n-#endif\n-\n-    /* TODO: implement this somehow\n-    /// Allocator-extended copy constructor.\n-    template <class _Allocator>\n-      any(allocator_arg_t, const _Allocator& __a, const any& __other);\n-    */\n-\n-    /// Allocator-extended move constructor (the allocator is ignored).\n-    template <typename _Allocator>\n-      any(allocator_arg_t, const _Allocator&, any&& __other) noexcept\n-      : any(std::move(__other)) { }\n-\n     /// Destructor, calls @c clear()\n     ~any() { clear(); }\n \n@@ -281,13 +237,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     template<typename _Tp>\n       friend void* __any_caster(const any* __any)\n       {\n-#if __cpp_rtti\n-\tif (__any->type() != typeid(_Tp))\n-\t  return nullptr;\n-#else\n \tif (__any->_M_manager != &_Manager<decay_t<_Tp>>::_S_manage)\n \t  return nullptr;\n-#endif\n \t_Arg __arg;\n \t__any->_M_manager(_Op_access, __any, &__arg);\n \treturn __arg._M_obj;\n@@ -334,29 +285,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    return __storage;\n \t  }\n       };\n-\n-#if __cpp_rtti\n-    // Manage external contained object using an allocator\n-    template<typename _Tp, typename _Alloc>\n-      struct _Manager_alloc\n-      {\n-\tstatic_assert(std::is_same<_Tp, typename _Alloc::value_type>::value,\n-\t\t      \"Allocator's value_type is correct\");\n-\n-\t// Type that holds contained object and allocator\n-\tstruct _Data;\n-\n-\tusing _Traits = typename std::allocator_traits<_Alloc>::template\n-\t  rebind_traits<_Data>;\n-\n-\tstatic void\n-\t_S_manage(_Op __which, const any* __anyp, _Arg* __arg);\n-\n-\ttemplate<typename _Up>\n-\t  static _Storage\n-\t  _S_alloc(const _Alloc& __a, _Up&& __value);\n-      };\n-#endif\n   };\n \n   /// Exchange the states of two @c any objects.\n@@ -446,71 +374,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n   // @}\n \n-#if __cpp_rtti\n-  template<typename _Tp, typename _Alloc>\n-    struct any::_Manager_alloc<_Tp, _Alloc>::_Data\n-    {\n-      using _Traits = std::allocator_traits<_Alloc>;\n-\n-      std::tuple<__gnu_cxx::__aligned_buffer<_Tp>, _Alloc> _M_data;\n-\n-      _Alloc&       _M_alloc()       { return std::get<1>(_M_data); }\n-      const _Alloc& _M_alloc() const { return std::get<1>(_M_data); }\n-\n-      _Tp*       _M_obj()       { return std::get<0>(_M_data)._M_ptr(); }\n-      const _Tp* _M_obj() const { return std::get<0>(_M_data)._M_ptr(); }\n-\n-      template<typename _Up>\n-\t_Data(const _Alloc& __a, _Up&& __val) : _M_data(nullptr, __a)\n-\t{\n-\t  this->_M_construct(std::__use_alloc<_Tp, _Alloc, _Up&&>(_M_alloc()),\n-\t\t\t     std::forward<_Up>(__val));\n-\t}\n-\n-      ~_Data() { _Traits::destroy(_M_alloc(), _M_obj()); }\n-\n-      template<typename _Up>\n-\tvoid\n-\t_M_construct(__uses_alloc0, _Up&& __val)\n-\t{\n-\t  _Traits::construct(_M_alloc(), _M_obj(),\n-\t\t\t     std::forward<_Up>(__val));\n-\t}\n-\n-      template<typename _Up>\n-\tvoid\n-\t_M_construct(__uses_alloc1<_Alloc> __a, _Up&& __val)\n-\t{\n-\t  _Traits::construct(_M_alloc(), _M_obj(),\n-\t\t\t     std::allocator_arg, *__a._M_a,\n-\t\t\t     std::forward<_Up>(__val));\n-\t}\n-\n-      template<typename _Up>\n-\tvoid\n-\t_M_construct(__uses_alloc2<_Alloc> __a, _Up&& __val)\n-\t{\n-\t  _Traits::construct(_M_alloc(), _M_obj(),\n-\t\t\t     std::forward<_Up>(__val), *__a._M_a);\n-\t}\n-    };\n-\n-  template<typename _Tp, typename _Alloc>\n-  template<typename _Up>\n-    any::_Storage\n-    any::_Manager_alloc<_Tp, _Alloc>::\n-    _S_alloc(const _Alloc& __a, _Up&& __value)\n-    {\n-      typename _Traits::allocator_type __a2(__a);\n-      auto __guard = std::__allocate_guarded(__a2);\n-      any::_Storage __storage;\n-      __storage._M_ptr = __guard.get();\n-      ::new(__storage._M_ptr) _Data{__a, std::forward<_Up>(__value)};\n-      __guard = nullptr;\n-      return __storage;\n-    }\n-#endif\n-\n   template<typename _Tp>\n     void\n     any::_Manager_internal<_Tp>::\n@@ -563,38 +426,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n     }\n \n-#if __cpp_rtti\n-  template<typename _Tp, typename _Alloc>\n-    void\n-    any::_Manager_alloc<_Tp, _Alloc>::\n-    _S_manage(_Op __which, const any* __any, _Arg* __arg)\n-    {\n-      // The contained object is at _M_storage._M_ptr->_M_obj()\n-      auto __ptr = static_cast<const _Data*>(__any->_M_storage._M_ptr);\n-      switch (__which)\n-      {\n-      case _Op_access:\n-\t__arg->_M_obj = const_cast<_Tp*>(__ptr->_M_obj());\n-\tbreak;\n-      case _Op_get_type_info:\n-\t__arg->_M_typeinfo = &typeid(_Tp);\n-\tbreak;\n-      case _Op_clone:\n-\t__arg->_M_any->_M_storage\n-\t  = _S_alloc(__ptr->_M_alloc(), *__ptr->_M_obj());\n-\tbreak;\n-      case _Op_destroy:\n-\t{\n-\t  using _Alloc2 = typename _Traits::allocator_type;\n-\t  _Alloc2 __a(__ptr->_M_alloc());\n-\t  __allocated_ptr<_Alloc2> __guard{__a, const_cast<_Data*>(__ptr)};\n-\t  __ptr->~_Data();\n-\t}\n-\tbreak;\n-      }\n-    }\n-#endif\n-\n   // @} group any\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace fundamentals_v1"}, {"sha": "5202e89cd61cb0a6c8113738225dab88b2fcfeab", "filename": "libstdc++-v3/include/experimental/functional", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6554581713da6cc9bb96cf86cf7a0cece80a448e/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6554581713da6cc9bb96cf86cf7a0cece80a448e/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ffunctional?ref=6554581713da6cc9bb96cf86cf7a0cece80a448e", "patch": "@@ -61,7 +61,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     constexpr int is_placeholder_v = std::is_placeholder<_Tp>::value;\n \n-#define __cpp_lib_experimental_boyer_moore_searching 201402\n+#define __cpp_lib_experimental_boyer_moore_searching 201411\n \n   // Searchers\n "}, {"sha": "e87a1d4c6521fc52e0cfe0a2988a5f616af0373f", "filename": "libstdc++-v3/include/experimental/optional", "status": "modified", "additions": 40, "deletions": 12, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6554581713da6cc9bb96cf86cf7a0cece80a448e/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Foptional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6554581713da6cc9bb96cf86cf7a0cece80a448e/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Foptional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Foptional?ref=6554581713da6cc9bb96cf86cf7a0cece80a448e", "patch": "@@ -67,7 +67,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * @{\n    */\n \n-#define __cpp_lib_experimental_optional 201406\n+#define __cpp_lib_experimental_optional 201411\n \n   // All subsequent [X.Y.n] references are against n3793.\n \n@@ -290,7 +290,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return this->_M_engaged; }\n \n       // The _M_get operations have _M_engaged as a precondition.\n-      _Tp&\n+      constexpr _Tp&\n       _M_get() noexcept\n       { return _M_payload; }\n \n@@ -574,18 +574,26 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return std::__addressof(this->_M_get()); }\n \n       constexpr const _Tp&\n-      operator*() const\n+      operator*() const&\n       { return this->_M_get(); }\n \n-      _Tp&\n-      operator*()\n+      constexpr _Tp&\n+      operator*()&\n       { return this->_M_get(); }\n \n+      constexpr _Tp&&\n+      operator*()&&\n+      { return std::move(this->_M_get()); }\n+\n+      constexpr const _Tp&&\n+      operator*() const&&\n+      { return std::move(this->_M_get()); }\n+\n       constexpr explicit operator bool() const noexcept\n       { return this->_M_is_engaged(); }\n \n       constexpr const _Tp&\n-      value() const\n+      value() const&\n       {\n \treturn this->_M_is_engaged()\n \t  ?  this->_M_get()\n@@ -594,14 +602,34 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t     this->_M_get());\n       }\n \n-      _Tp&\n-      value()\n+      constexpr _Tp&\n+      value()&\n       {\n-        if (this->_M_is_engaged())\n-          return this->_M_get();\n+\treturn this->_M_is_engaged()\n+\t  ?  this->_M_get()\n+\t  : (__throw_bad_optional_access(\"Attempt to access value of a \"\n+\t\t                         \"disengaged optional object\"),\n+\t     this->_M_get());\n+      }\n \n-        __throw_bad_optional_access(\"Attempt to access value of a \"\n-\t\t\t\t    \"disengaged optional object\");\n+      constexpr _Tp&&\n+      value()&&\n+      {\n+\treturn this->_M_is_engaged()\n+\t  ?  std::move(this->_M_get())\n+\t  : (__throw_bad_optional_access(\"Attempt to access value of a \"\n+\t\t                         \"disengaged optional object\"),\n+\t     std::move(this->_M_get()));\n+      }\n+\n+      constexpr const _Tp&&\n+      value() const&&\n+      {\n+\treturn this->_M_is_engaged()\n+\t  ?  std::move(this->_M_get())\n+\t  : (__throw_bad_optional_access(\"Attempt to access value of a \"\n+\t\t                         \"disengaged optional object\"),\n+\t     std::move(this->_M_get()));\n       }\n \n       template<typename _Up>"}, {"sha": "6e1dd5a9ee1c78c23c805a8211d365f3fd5f37a8", "filename": "libstdc++-v3/include/experimental/string_view", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6554581713da6cc9bb96cf86cf7a0cece80a448e/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6554581713da6cc9bb96cf86cf7a0cece80a448e/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view?ref=6554581713da6cc9bb96cf86cf7a0cece80a448e", "patch": "@@ -50,7 +50,7 @@ inline namespace fundamentals_v1\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-#define __cpp_lib_experimental_string_view 201402\n+#define __cpp_lib_experimental_string_view 201411\n \n   /**\n    *  @class basic_string_view <experimental/string_view>\n@@ -218,13 +218,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // [string.view.modifiers], modifiers:\n \n-      void\n-      clear() noexcept\n-      {\n-\tthis->_M_len = 0;\n-\tthis->_M_str = nullptr;\n-      }\n-\n       void\n       remove_prefix(size_type __n)\n       {"}, {"sha": "671a178bca2a7c1108b1a7eceef0cf975629de3a", "filename": "libstdc++-v3/testsuite/experimental/any/cons/3.cc", "status": "removed", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d64474d27f8ebcff61eecfff88182c5e9bd1622f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fcons%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d64474d27f8ebcff61eecfff88182c5e9bd1622f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fcons%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fcons%2F3.cc?ref=d64474d27f8ebcff61eecfff88182c5e9bd1622f", "patch": "@@ -1,83 +0,0 @@\n-// { dg-options \"-std=gnu++14\" }\n-// { dg-do run }\n-\n-// Copyright (C) 2014 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-#include <experimental/any>\n-#include <testsuite_allocator.h>\n-\n-using std::experimental::any;\n-using __gnu_test::CustomPointerAlloc;\n-using __gnu_test::tracker_allocator;\n-using __gnu_test::tracker_allocator_counter;\n-\n-struct NotSmall { char c[64]; };\n-\n-bool test [[gnu::unused]] = true;\n-\n-void test01()\n-{\n-  CustomPointerAlloc<int> alloc;\n-\n-  any x(std::allocator_arg, alloc, 1);\n-  VERIFY( !x.empty() );\n-\n-  any y(std::allocator_arg, alloc, std::move(x));\n-  VERIFY( x.empty() );\n-  VERIFY( !y.empty() );\n-}\n-\n-void test02()\n-{\n-  tracker_allocator<int> alloc;\n-\n-  any x(std::allocator_arg, alloc, 1);\n-  auto allocated = tracker_allocator_counter::get_allocation_count();\n-  VERIFY( allocated == 0 );  // no allocation for small object\n-\n-  any y(std::allocator_arg, alloc, std::move(x));\n-  VERIFY( tracker_allocator_counter::get_allocation_count() == 0 );\n-\n-  y = {};\n-  VERIFY( tracker_allocator_counter::get_deallocation_count() == 0 );\n-}\n-\n-void test03()\n-{\n-  tracker_allocator<int> alloc;\n-\n-\n-  any x(std::allocator_arg, alloc, NotSmall{});\n-  auto allocated = tracker_allocator_counter::get_allocation_count();\n-  __builtin_printf(\"ALLOCATED %lu\\n\", (unsigned long)allocated);\n-  VERIFY( allocated >= sizeof(NotSmall) );\n-\n-  any y(std::allocator_arg, alloc, std::move(x));\n-  VERIFY( tracker_allocator_counter::get_allocation_count() == allocated );\n-\n-  y = {};\n-  VERIFY( tracker_allocator_counter::get_deallocation_count() == allocated );\n-}\n-\n-\n-int main()\n-{\n-  test01();\n-  test02();\n-  test03();\n-}"}, {"sha": "6e5e01972e3b5f1b21cd75dbd75617bae5006242", "filename": "libstdc++-v3/testsuite/experimental/any/cons/4.cc", "status": "removed", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d64474d27f8ebcff61eecfff88182c5e9bd1622f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fcons%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d64474d27f8ebcff61eecfff88182c5e9bd1622f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fcons%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fcons%2F4.cc?ref=d64474d27f8ebcff61eecfff88182c5e9bd1622f", "patch": "@@ -1,73 +0,0 @@\n-// { dg-options \"-std=gnu++14\" }\n-// { dg-do run }\n-\n-// Copyright (C) 2014 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-#include <experimental/any>\n-#include <memory>\n-#include <testsuite_hooks.h>\n-\n-using std::experimental::any;\n-\n-struct NotSmall\n-{\n-  char c[64];  // prevent small-object optimization\n-};\n-\n-struct T1\n-{\n-  using allocator_type = std::allocator<char>;\n-\n-  T1() = default;\n-  T1(const T1&) : used_alloc(false) { }\n-  T1(const T1&, const allocator_type&) : used_alloc(true) { }\n-\n-  bool used_alloc;\n-\n-  NotSmall x;\n-};\n-\n-struct T2\n-{\n-  using allocator_type = std::allocator<char>;\n-\n-  T2() = default;\n-  T2(const T2&) : used_alloc(false) { }\n-  T2(std::allocator_arg_t, const allocator_type&, const T2&) : used_alloc(true)\n-  { }\n-\n-  bool used_alloc;\n-\n-  NotSmall x;\n-};\n-\n-bool test [[gnu::unused]] = true;\n-\n-void test01()\n-{\n-  any x1(std::allocator_arg, std::allocator<char>{}, T1{});\n-  VERIFY( std::experimental::any_cast<T1&>(x1).used_alloc );\n-\n-  any x2(std::allocator_arg, std::allocator<char>{}, T2{});\n-  VERIFY( std::experimental::any_cast<T2&>(x2).used_alloc );\n-}\n-\n-int main()\n-{\n-  test01();\n-}"}, {"sha": "edb67c30fb22960c22b38d7ca1445c93b2ea62f4", "filename": "libstdc++-v3/testsuite/experimental/any/misc/any_cast.cc", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6554581713da6cc9bb96cf86cf7a0cece80a448e/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fmisc%2Fany_cast.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6554581713da6cc9bb96cf86cf7a0cece80a448e/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fmisc%2Fany_cast.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fmisc%2Fany_cast.cc?ref=6554581713da6cc9bb96cf86cf7a0cece80a448e", "patch": "@@ -77,32 +77,8 @@ void test02()\n   }\n }\n \n-void test03()\n-{\n-  using std::experimental::bad_any_cast;\n-  any x(std::allocator_arg, std::allocator<double>{}, 1);\n-  auto p = any_cast<double>(&x);\n-  VERIFY(p == nullptr);\n-\n-  x = any(std::allocator_arg, std::allocator<int>{}, 1.0);\n-  p = any_cast<double>(&x);\n-  VERIFY(p != nullptr);\n-\n-  x = any(std::allocator_arg, std::allocator<char>{});\n-  p = any_cast<double>(&x);\n-  VERIFY(p == nullptr);\n-\n-  try {\n-    any_cast<double>(x);\n-    VERIFY(false);\n-  } catch (const bad_any_cast&) {\n-  }\n-}\n-\n-\n int main()\n {\n   test01();\n   test02();\n-  test03();\n }"}, {"sha": "026acb06e7708456acb8fedd8ee4782f2ff4812a", "filename": "libstdc++-v3/testsuite/experimental/any/misc/any_cast_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6554581713da6cc9bb96cf86cf7a0cece80a448e/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fmisc%2Fany_cast_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6554581713da6cc9bb96cf86cf7a0cece80a448e/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fmisc%2Fany_cast_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fmisc%2Fany_cast_neg.cc?ref=6554581713da6cc9bb96cf86cf7a0cece80a448e", "patch": "@@ -26,5 +26,5 @@ void test01()\n   using std::experimental::any_cast;\n \n   const any y(1);\n-  any_cast<int&>(y); // { dg-error \"qualifiers\" \"\" { target { *-*-* } } 382 }\n+  any_cast<int&>(y); // { dg-error \"qualifiers\" \"\" { target { *-*-* } } 310 }\n }"}, {"sha": "1aa055eea56ed43ae9aecfb07a187222583c9ff1", "filename": "libstdc++-v3/testsuite/experimental/string_view/capacity/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6554581713da6cc9bb96cf86cf7a0cece80a448e/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fcapacity%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6554581713da6cc9bb96cf86cf7a0cece80a448e/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fcapacity%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fcapacity%2F1.cc?ref=6554581713da6cc9bb96cf86cf7a0cece80a448e", "patch": "@@ -133,7 +133,7 @@ test01()\n   size_type_o sz03;\n   size_type_o sz04;\n \n-  // non-POD types: size, length, max_size, clear(), empty()\n+  // non-POD types: size, length, max_size, empty()\n   bool b01 = str02.empty();  \n   VERIFY( b01 == true );\n   sz03 = str02.size();\n@@ -148,7 +148,7 @@ test01()\n   VERIFY( sz03 >= sz04 );\n \n   sz03 = str02.size();\n-  str02.clear();  \n+  str02 = {};\n   b01 = str02.empty(); \n   VERIFY( b01 == true );\n   sz04 = str02.size();  "}]}