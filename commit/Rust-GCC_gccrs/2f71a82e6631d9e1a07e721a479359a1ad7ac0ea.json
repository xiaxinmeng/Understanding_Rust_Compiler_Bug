{"sha": "2f71a82e6631d9e1a07e721a479359a1ad7ac0ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY3MWE4MmU2NjMxZDllMWEwN2U3MjFhNDc5MzU5YTFhZDdhYzBlYQ==", "commit": {"author": {"name": "James E Wilson", "email": "wilson@specifixinc.com", "date": "2004-11-11T21:20:22Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2004-11-11T21:20:22Z"}, "message": "Fix complex long double testsuite failures.\n\n* config/ia64/ia64.h (HARD_REGNO_NREGS): Handle XCmode.\n(HARD_REGNO_MODE_OK, MODES_TIEABLE_P, SECONDARY_MEMORY_NEEDED,\nCLASS_MAX_NREGS): Likewise.\n\nFrom-SVN: r90495", "tree": {"sha": "2e5edf58382783e440dc0ff3b369b0a42ec468b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e5edf58382783e440dc0ff3b369b0a42ec468b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f71a82e6631d9e1a07e721a479359a1ad7ac0ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f71a82e6631d9e1a07e721a479359a1ad7ac0ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f71a82e6631d9e1a07e721a479359a1ad7ac0ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f71a82e6631d9e1a07e721a479359a1ad7ac0ea/comments", "author": null, "committer": null, "parents": [{"sha": "fb60d5d766e38b1a48c69821fabd6f3d1ab5781e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb60d5d766e38b1a48c69821fabd6f3d1ab5781e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb60d5d766e38b1a48c69821fabd6f3d1ab5781e"}], "stats": {"total": 19, "additions": 15, "deletions": 4}, "files": [{"sha": "3d9f2503db99f79c98449aad0a303b4e1739d377", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f71a82e6631d9e1a07e721a479359a1ad7ac0ea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f71a82e6631d9e1a07e721a479359a1ad7ac0ea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f71a82e6631d9e1a07e721a479359a1ad7ac0ea", "patch": "@@ -1,3 +1,9 @@\n+2004-11-11  James E. Wilson  <wilson@specifixinc.com>\n+\n+\t* config/ia64/ia64.h (HARD_REGNO_NREGS): Handle XCmode.\n+\t(HARD_REGNO_MODE_OK, MODES_TIEABLE_P, SECONDARY_MEMORY_NEEDED,\n+\tCLASS_MAX_NREGS): Likewise.\n+\n 2004-11-11  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \tPR tree-optimization/17742"}, {"sha": "bc03a1efa1a34de57a5c312ec978eeb94ce1bf00", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f71a82e6631d9e1a07e721a479359a1ad7ac0ea/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f71a82e6631d9e1a07e721a479359a1ad7ac0ea/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=2f71a82e6631d9e1a07e721a479359a1ad7ac0ea", "patch": "@@ -814,6 +814,7 @@ while (0)\n    : PR_REGNO_P (REGNO) && (MODE) == BImode ? 2\t\t\t\t\\\n    : PR_REGNO_P (REGNO) && (MODE) == CCImode ? 1\t\t\t\\\n    : FR_REGNO_P (REGNO) && (MODE) == XFmode ? 1\t\t\t\t\\\n+   : FR_REGNO_P (REGNO) && (MODE) == XCmode ? 2\t\t\t\t\\\n    : (GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n \n /* A C expression that is nonzero if it is permissible to store a value of mode\n@@ -828,7 +829,8 @@ while (0)\n      (MODE) != TFmode \t\t\t\t\t\t\\\n    : PR_REGNO_P (REGNO) ?\t\t\t\t\t\\\n      (MODE) == BImode || GET_MODE_CLASS (MODE) == MODE_CC\t\\\n-   : GR_REGNO_P (REGNO) ? (MODE) != CCImode && (MODE) != XFmode\t\\\n+   : GR_REGNO_P (REGNO) ?\t\t\t\t\t\\\n+     (MODE) != CCImode && (MODE) != XFmode && (MODE) != XCmode\t\\\n    : AR_REGNO_P (REGNO) ? (MODE) == DImode\t\t\t\\\n    : BR_REGNO_P (REGNO) ? (MODE) == DImode\t\t\t\\\n    : 0)\n@@ -845,7 +847,8 @@ while (0)\n    we can't tie it with any other modes.  */\n #define MODES_TIEABLE_P(MODE1, MODE2)\t\t\t\\\n   (GET_MODE_CLASS (MODE1) == GET_MODE_CLASS (MODE2)\t\\\n-   && (((MODE1) == XFmode) == ((MODE2) == XFmode))\t\\\n+   && ((((MODE1) == XFmode) || ((MODE1) == XCmode))\t\\\n+       == (((MODE2) == XFmode) || ((MODE2) == XCmode)))\t\\\n    && (((MODE1) == BImode) == ((MODE2) == BImode)))\n \n /* Specify the modes required to caller save a given hard regno.\n@@ -1057,8 +1060,9 @@ enum reg_class\n    with unions should be solved with the addressof fiddling done by\n    movxf and friends.  */\n #define SECONDARY_MEMORY_NEEDED(CLASS1, CLASS2, MODE)\t\t\t\\\n-  ((MODE) == XFmode && (((CLASS1) == GR_REGS && (CLASS2) == FR_REGS)\t\\\n-\t\t\t|| ((CLASS1) == FR_REGS && (CLASS2) == GR_REGS)))\n+  (((MODE) == XFmode || (MODE) == XCmode)\t\t\t\t\\\n+   && (((CLASS1) == GR_REGS && (CLASS2) == FR_REGS)\t\t\t\\\n+       || ((CLASS1) == FR_REGS && (CLASS2) == GR_REGS)))\n #endif\n \n /* A C expression for the maximum number of consecutive registers of\n@@ -1068,6 +1072,7 @@ enum reg_class\n #define CLASS_MAX_NREGS(CLASS, MODE) \\\n   ((MODE) == BImode && (CLASS) == PR_REGS ? 2\t\t\t\\\n    : ((CLASS) == FR_REGS && (MODE) == XFmode) ? 1\t\t\\\n+   : ((CLASS) == FR_REGS && (MODE) == XCmode) ? 2\t\t\\\n    : (GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n \n /* In FP regs, we can't change FP values to integer values and vice"}]}