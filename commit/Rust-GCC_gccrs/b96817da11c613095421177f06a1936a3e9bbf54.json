{"sha": "b96817da11c613095421177f06a1936a3e9bbf54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk2ODE3ZGExMWM2MTMwOTU0MjExNzdmMDZhMTkzNmEzZTliYmY1NA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-11-23T22:14:56Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-11-23T22:14:56Z"}, "message": "bitset (bitset<>::all): Add, per DR 693 [Ready].\n\n2007-11-23  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/std/bitset (bitset<>::all): Add, per DR 693 [Ready].\n\t(_Base_bitset<>::_M_are_all_aux()): Add.\n\t* include/debug/bitset (bitset<>::all): Add.\n\t* testsuite/23_containers/bitset/all/1.cc: New.\n\t* docs/html/ext/howto.html: Add an entry for DR 693.\n\t\n\t* include/std/bitset (bitset<0>::set, reset, flip, test): Remove,\n\tnot necessary anymore.\n\nFrom-SVN: r130384", "tree": {"sha": "f16dc3eecc9e9271a4876d22bcbf54c119f7810f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f16dc3eecc9e9271a4876d22bcbf54c119f7810f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b96817da11c613095421177f06a1936a3e9bbf54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b96817da11c613095421177f06a1936a3e9bbf54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b96817da11c613095421177f06a1936a3e9bbf54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b96817da11c613095421177f06a1936a3e9bbf54/comments", "author": null, "committer": null, "parents": [{"sha": "b6f63e898498e62e78b51ee135fd8dc686c11d60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6f63e898498e62e78b51ee135fd8dc686c11d60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6f63e898498e62e78b51ee135fd8dc686c11d60"}], "stats": {"total": 182, "additions": 133, "deletions": 49}, "files": [{"sha": "635bb1e59727cd67f7a6f34b6ff6e8556d608ea0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b96817da11c613095421177f06a1936a3e9bbf54/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b96817da11c613095421177f06a1936a3e9bbf54/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b96817da11c613095421177f06a1936a3e9bbf54", "patch": "@@ -1,3 +1,14 @@\n+2007-11-23  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/std/bitset (bitset<>::all): Add, per DR 693 [Ready].\n+\t(_Base_bitset<>::_M_are_all_aux()): Add.\n+\t* include/debug/bitset (bitset<>::all): Add.\n+\t* testsuite/23_containers/bitset/all/1.cc: New.\n+\t* docs/html/ext/howto.html: Add an entry for DR 693.\n+\t\n+\t* include/std/bitset (bitset<0>::set, reset, flip, test): Remove,\n+\tnot necessary anymore.\n+\n 2007-11-23  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/stl_list.h (insert(iterator, value_type&&)): Just"}, {"sha": "3171355ff87ba6fdd4deb8a0c6f60ea339872fa9", "filename": "libstdc++-v3/docs/html/ext/howto.html", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b96817da11c613095421177f06a1936a3e9bbf54/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b96817da11c613095421177f06a1936a3e9bbf54/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html?ref=b96817da11c613095421177f06a1936a3e9bbf54", "patch": "@@ -639,6 +639,12 @@ <h2><a name=\"5\">LWG Issues</a></h2>\n     <dd>Add the missing operations.\n     </dd>\n \n+    <dt><a href=\"lwg-active.html#693\">693</a>:\n+        <em>std::bitset::all() missing</em>\n+    </dt>\n+    <dd>Add it, consistently with the discussion.\n+    </dd>\n+\n     <dt><a href=\"lwg-active.html#695\">695</a>:\n         <em>ctype&lt;char&gt;::classic_table() not accessible</em>\n     </dt>"}, {"sha": "db4b3c075d005b2054f81b23b5003834f4a90399", "filename": "libstdc++-v3/include/debug/bitset", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b96817da11c613095421177f06a1936a3e9bbf54/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b96817da11c613095421177f06a1936a3e9bbf54/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset?ref=b96817da11c613095421177f06a1936a3e9bbf54", "patch": "@@ -1,7 +1,6 @@\n // Debugging bitset implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005\n-// Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -279,6 +278,7 @@ namespace __debug\n       { return _M_base() != __rhs; }\n \n       using _Base::test;\n+      using _Base::all;\n       using _Base::any;\n       using _Base::none;\n "}, {"sha": "9a984d03d2ed61fc172dedda992d6bdde69630fb", "filename": "libstdc++-v3/include/std/bitset", "status": "modified", "additions": 33, "deletions": 47, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b96817da11c613095421177f06a1936a3e9bbf54/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b96817da11c613095421177f06a1936a3e9bbf54/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset?ref=b96817da11c613095421177f06a1936a3e9bbf54", "patch": "@@ -170,21 +170,27 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       _M_is_equal(const _Base_bitset<_Nw>& __x) const\n       {\n \tfor (size_t __i = 0; __i < _Nw; ++__i)\n-\t  {\n-\t    if (_M_w[__i] != __x._M_w[__i])\n-\t      return false;\n-\t  }\n+\t  if (_M_w[__i] != __x._M_w[__i])\n+\t    return false;\n \treturn true;\n       }\n \n+      size_t\n+      _M_are_all_aux() const\n+      {\n+\tfor (size_t __i = 0; __i < _Nw - 1; __i++)\n+\t  if (_M_w[__i] != ~static_cast<_WordT>(0))\n+\t    return 0;\n+\treturn ((_Nw - 1) * _GLIBCXX_BITSET_BITS_PER_WORD\n+\t\t+ __builtin_popcountl(_M_hiword()));\n+      }\n+\n       bool\n       _M_is_any() const\n       {\n \tfor (size_t __i = 0; __i < _Nw; __i++)\n-\t  {\n-\t    if (_M_w[__i] != static_cast<_WordT>(0))\n-\t      return true;\n-\t  }\n+\t  if (_M_w[__i] != static_cast<_WordT>(0))\n+\t    return true;\n \treturn false;\n       }\n \n@@ -412,6 +418,10 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       _M_is_equal(const _Base_bitset<1>& __x) const\n       { return _M_w == __x._M_w; }\n \n+      size_t\n+      _M_are_all_aux() const\n+      { return __builtin_popcountl(_M_w); }\n+\n       bool\n       _M_is_any() const\n       { return _M_w != 0; }\n@@ -540,6 +550,10 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       _M_is_equal(const _Base_bitset<0>&) const\n       { return true; }\n \n+      size_t\n+      _M_are_all_aux() const\n+      { return 0; }\n+\n       bool\n       _M_is_any() const\n       { return false; }\n@@ -1089,7 +1103,17 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t  __throw_out_of_range(__N(\"bitset::test\"));\n \treturn _Unchecked_test(__position);\n       }\n-      \n+\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // DR 693. std::bitset::all() missing.\n+      /**\n+       *  @brief Tests whether all the bits are on.\n+       *  @return  True if all the bits are set.\n+       */\n+      bool\n+      all() const\n+      { return this->_M_are_all_aux() == _Nb; }\n+\n       /**\n        *  @brief Tests whether any of the bits are on.\n        *  @return  True if at least one bit is set.\n@@ -1298,44 +1322,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       __x._M_copy_to_string(__tmp);\n       return __os << __tmp;\n     }\n-\n-  // Specializations for zero-sized bitsets, to avoid \"unsigned comparison\n-  // with zero\" warnings.\n-  template<>\n-    inline bitset<0>&\n-    bitset<0>::\n-    set(size_t, bool)\n-    {\n-      __throw_out_of_range(__N(\"bitset::set\"));\n-      return *this;\n-    }\n-      \n-  template<>\n-    inline bitset<0>&\n-    bitset<0>::\n-    reset(size_t)\n-    {\n-      __throw_out_of_range(__N(\"bitset::reset\"));\n-      return *this;\n-    }\n-      \n-  template<>\n-    inline bitset<0>&\n-    bitset<0>::\n-    flip(size_t)\n-    {\n-      __throw_out_of_range(__N(\"bitset::flip\"));\n-      return *this;\n-    }\n-      \n-  template<>\n-    inline bool\n-    bitset<0>::\n-    test(size_t) const\n-    {\n-      __throw_out_of_range(__N(\"bitset::test\"));\n-      return false;\n-    }\n   //@}\n \n _GLIBCXX_END_NESTED_NAMESPACE"}, {"sha": "1464510fdbfc2a5a5ee7a3689f4cccb498d7e37e", "filename": "libstdc++-v3/testsuite/23_containers/bitset/all/1.cc", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b96817da11c613095421177f06a1936a3e9bbf54/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fall%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b96817da11c613095421177f06a1936a3e9bbf54/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fall%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fall%2F1.cc?ref=b96817da11c613095421177f06a1936a3e9bbf54", "patch": "@@ -0,0 +1,81 @@\n+// 2007-11-23  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 23.3.5.2 bitset members\n+\n+#include <bitset>\n+#include <testsuite_hooks.h>\n+\n+// DR 693. std::bitset::all() missing.\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::bitset<0> z1;\n+  VERIFY( z1.all() );\n+  z1.set();\n+  VERIFY( z1.all() );\n+\n+  std::bitset<8> z2;\n+  VERIFY( !z2.all() );\n+  z2.set();\n+  VERIFY( z2.all() );\n+\n+  std::bitset<16> z3;\n+  VERIFY( !z3.all() );\n+  z3.set();\n+  VERIFY( z3.all() );\n+\n+  std::bitset<32> z4;\n+  VERIFY( !z4.all() );\n+  z4.set();\n+  VERIFY( z4.all() );\n+\n+  std::bitset<64> z5;\n+  VERIFY( !z5.all() );\n+  z5.set();\n+  VERIFY( z5.all() );\n+\n+  std::bitset<96> z6;\n+  VERIFY( !z6.all() );\n+  z6.set();\n+  VERIFY( z6.all() );\n+\n+  std::bitset<128> z7;\n+  VERIFY( !z7.all() );\n+  z7.set();\n+  VERIFY( z7.all() );\n+\n+  std::bitset<192> z8;\n+  VERIFY( !z8.all() );\n+  z8.set();\n+  VERIFY( z8.all() );\n+\n+  std::bitset<1024> z9;\n+  VERIFY( !z9.all() );\n+  z9.set();\n+  VERIFY( z9.all() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}