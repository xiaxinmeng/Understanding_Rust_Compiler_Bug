{"sha": "97f6e72f229d19e8871a53fd9f553d1a2ccd8e9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdmNmU3MmYyMjlkMTllODg3MWE1M2ZkOWY1NTNkMWEyY2NkOGU5Zg==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@mhpcc.edu", "date": "1999-01-19T11:52:49Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "1999-01-19T11:52:49Z"}, "message": "rs6000.c (offsettable_addr_operand): Delete.\n\n\t* rs6000.c (offsettable_addr_operand): Delete.\n\t(offsettable_mem_operand): New function.\n\t* rs6000.h (PREDICATE_CODES): Reflect function change.\n\t(RS6000_SAVE_TOC): Represent address as MEM.\n\t* win-nt.h (RS6000_SAVE_TOC): Same.\n\t* rs6000.md (indirect calls): Change offsettable address parameter\n\tto offsettable memory parameter.\n\nFrom-SVN: r24762", "tree": {"sha": "0c2d32cd593b3fe881878e508c8d4b0592d428d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c2d32cd593b3fe881878e508c8d4b0592d428d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97f6e72f229d19e8871a53fd9f553d1a2ccd8e9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97f6e72f229d19e8871a53fd9f553d1a2ccd8e9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97f6e72f229d19e8871a53fd9f553d1a2ccd8e9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97f6e72f229d19e8871a53fd9f553d1a2ccd8e9f/comments", "author": null, "committer": null, "parents": [{"sha": "e2213efb9d5fcf1db3fe35d08a827c82fccbd6a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2213efb9d5fcf1db3fe35d08a827c82fccbd6a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2213efb9d5fcf1db3fe35d08a827c82fccbd6a7"}], "stats": {"total": 53, "additions": 34, "deletions": 19}, "files": [{"sha": "a8f8ecb355412634a6361d8518d528bf1c558752", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97f6e72f229d19e8871a53fd9f553d1a2ccd8e9f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97f6e72f229d19e8871a53fd9f553d1a2ccd8e9f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97f6e72f229d19e8871a53fd9f553d1a2ccd8e9f", "patch": "@@ -1,3 +1,13 @@\n+Tue Jan 19 14:51:36 1999  David Edelsohn  <edelsohn@mhpcc.edu>\n+\n+\t* rs6000.c (offsettable_addr_operand): Delete.\n+\t(offsettable_mem_operand): New function.\n+\t* rs6000.h (PREDICATE_CODES): Reflect function change.\n+\t(RS6000_SAVE_TOC): Represent address as MEM.\n+\t* win-nt.h (RS6000_SAVE_TOC): Same.\n+\t* rs6000.md (indirect calls): Change offsettable address parameter\n+\tto offsettable memory parameter.\n+\n Tue Jan 19 10:24:53 1999  Mark Mitchell  <mark@markmitchell.com>\n \n \t* rtl.h (rtx_def): Update documentation."}, {"sha": "2b95156c71f76fd7f03e38b13a2e54318926f7b5", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97f6e72f229d19e8871a53fd9f553d1a2ccd8e9f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97f6e72f229d19e8871a53fd9f553d1a2ccd8e9f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=97f6e72f229d19e8871a53fd9f553d1a2ccd8e9f", "patch": "@@ -832,15 +832,16 @@ volatile_mem_operand (op, mode)\n   return memory_address_p (mode, XEXP (op, 0));\n }\n \n-/* Return 1 if the operand is an offsettable memory address.  */\n+/* Return 1 if the operand is an offsettable memory operand.  */\n \n int\n-offsettable_addr_operand (op, mode)\n+offsettable_mem_operand (op, mode)\n      register rtx op;\n      enum machine_mode mode;\n {\n-  return offsettable_address_p (reload_completed | reload_in_progress,\n-\t\t\t\tmode, op);\n+  return ((GET_CODE (op) == MEM)\n+\t  && offsettable_address_p (reload_completed | reload_in_progress,\n+\t\t\t\t    mode, XEXP (op, 0)));\n }\n \n /* Return 1 if the operand is either an easy FP constant (see above) or"}, {"sha": "10e6687c8888f1582459d931723f3dae53f2aa68", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97f6e72f229d19e8871a53fd9f553d1a2ccd8e9f/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97f6e72f229d19e8871a53fd9f553d1a2ccd8e9f/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=97f6e72f229d19e8871a53fd9f553d1a2ccd8e9f", "patch": "@@ -1249,8 +1249,10 @@ typedef struct rs6000_stack {\n /* Size of the fixed area on the stack */\n #define RS6000_SAVE_AREA (TARGET_32BIT ? 24 : 48)\n \n-/* Address to save the TOC register */\n-#define RS6000_SAVE_TOC plus_constant (stack_pointer_rtx, (TARGET_32BIT ? 20 : 40))\n+/* MEM representing address to save the TOC register */\n+#define RS6000_SAVE_TOC gen_rtx_MEM (Pmode, \\\n+\t\t\t\t     plus_constant (stack_pointer_rtx, \\\n+\t\t\t\t\t\t    (TARGET_32BIT ? 20 : 40)))\n \n /* Offset & size for fpmem stack locations used for converting between\n    float and integral types.  */\n@@ -3204,7 +3206,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n   {\"reg_or_mem_operand\", {SUBREG, MEM, REG}},\t\t\t\\\n   {\"lwa_operand\", {SUBREG, MEM, REG}},\t\t\t\t\\\n   {\"volatile_mem_operand\", {MEM}},\t\t\t\t\\\n-  {\"offsettable_addr_operand\", {REG, SUBREG, PLUS}},\t\t\\\n+  {\"offsettable_mem_operand\", {MEM}},\t\t\t\t\\\n   {\"mem_or_easy_const_operand\", {SUBREG, MEM, CONST_DOUBLE}},\t\\\n   {\"add_operand\", {SUBREG, REG, CONST_INT}},\t\t\t\\\n   {\"non_add_cint_operand\", {CONST_INT}},\t\t\t\\"}, {"sha": "47dcc113fe450d2b7dccaad53bc9d08b6a37534c", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97f6e72f229d19e8871a53fd9f553d1a2ccd8e9f/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97f6e72f229d19e8871a53fd9f553d1a2ccd8e9f/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=97f6e72f229d19e8871a53fd9f553d1a2ccd8e9f", "patch": "@@ -7356,29 +7356,29 @@\n   [(call (mem:SI (match_operand:SI 0 \"register_operand\" \"b\"))\n \t (match_operand 1 \"const_int_operand\" \"n\"))\n    (use (match_operand 2 \"const_int_operand\" \"n\"))\n-   (use (match_operand 3 \"offsettable_addr_operand\" \"p\"))\n+   (use (match_operand 3 \"offsettable_mem_operand\" \"o\"))\n    (use (match_operand 4 \"register_operand\" \"r\"))\n    (clobber (match_operand 5 \"register_operand\" \"=r\"))\n    (clobber (match_scratch:SI 6 \"=&r\"))\n    (clobber (match_scratch:SI 7 \"=l\"))]\n   \"DEFAULT_ABI == ABI_AIX\n    && (INTVAL (operands[2]) == CALL_NORMAL || (INTVAL (operands[2]) & CALL_LONG) != 0)\"\n-  \"{st|stw} %4,%a3\\;{l|lwz} %6,0(%0)\\;{l|lwz} %4,4(%0)\\;mt%7 %6\\;{l|lwz} %5,8(%0)\\;{brl|blrl}\\;{l|lwz} %4,%a3\"\n+  \"{st|stw} %4,%3\\;{l|lwz} %6,0(%0)\\;{l|lwz} %4,4(%0)\\;mt%7 %6\\;{l|lwz} %5,8(%0)\\;{brl|blrl}\\;{l|lwz} %4,%3\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"28\")])\n \n (define_insn \"call_indirect_aix64\"\n   [(call (mem:SI (match_operand:DI 0 \"register_operand\" \"b\"))\n \t (match_operand 1 \"const_int_operand\" \"n\"))\n    (use (match_operand 2 \"const_int_operand\" \"n\"))\n-   (use (match_operand 3 \"offsettable_addr_operand\" \"p\"))\n+   (use (match_operand 3 \"offsettable_mem_operand\" \"o\"))\n    (use (match_operand 4 \"register_operand\" \"r\"))\n    (clobber (match_operand 5 \"register_operand\" \"=r\"))\n    (clobber (match_scratch:SI 6 \"=&r\"))\n    (clobber (match_scratch:SI 7 \"=l\"))]\n   \"TARGET_64BIT && DEFAULT_ABI == ABI_AIX\n    && (INTVAL (operands[2]) == CALL_NORMAL || (INTVAL (operands[2]) & CALL_LONG) != 0)\"\n-  \"std %4,%a3\\;ld %6,0(%0)\\;ld %4,8(%0)\\;mt%7 %6\\;ld %5,16(%0)\\;blrl\\;ld %4,%a3\"\n+  \"std %4,%3\\;ld %6,0(%0)\\;ld %4,8(%0)\\;mt%7 %6\\;ld %5,16(%0)\\;blrl\\;ld %4,%3\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"28\")])\n \n@@ -7387,14 +7387,14 @@\n \t(call (mem:SI (match_operand:SI 1 \"register_operand\" \"b\"))\n \t      (match_operand 2 \"const_int_operand\" \"n\")))\n    (use (match_operand 3 \"const_int_operand\" \"n\"))\n-   (use (match_operand 4 \"offsettable_addr_operand\" \"p\"))\n+   (use (match_operand 4 \"offsettable_mem_operand\" \"o\"))\n    (use (match_operand 5 \"register_operand\" \"r\"))\n    (clobber (match_operand 6 \"register_operand\" \"=r\"))\n    (clobber (match_scratch:SI 7 \"=&r\"))\n    (clobber (match_scratch:SI 8 \"=l\"))]\n   \"DEFAULT_ABI == ABI_AIX\n    && (INTVAL (operands[3]) == CALL_NORMAL || (INTVAL (operands[3]) & CALL_LONG) != 0)\"\n-  \"{st|stw} %5,%a4\\;{l|lwz} %7,0(%1)\\;{l|lwz} %5,4(%1)\\;mt%8 %7\\;{l|lwz} %6,8(%1)\\;{brl|blrl}\\;{l|lwz} %5,%a4\"\n+  \"{st|stw} %5,%4\\;{l|lwz} %7,0(%1)\\;{l|lwz} %5,4(%1)\\;mt%8 %7\\;{l|lwz} %6,8(%1)\\;{brl|blrl}\\;{l|lwz} %5,%4\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"28\")])\n \n@@ -7403,14 +7403,14 @@\n \t(call (mem:SI (match_operand:DI 1 \"register_operand\" \"b\"))\n \t      (match_operand 2 \"const_int_operand\" \"n\")))\n    (use (match_operand 3 \"const_int_operand\" \"n\"))\n-   (use (match_operand 4 \"offsettable_addr_operand\" \"p\"))\n+   (use (match_operand 4 \"offsettable_mem_operand\" \"o\"))\n    (use (match_operand 5 \"register_operand\" \"r\"))\n    (clobber (match_operand 6 \"register_operand\" \"=r\"))\n    (clobber (match_scratch:SI 7 \"=&r\"))\n    (clobber (match_scratch:SI 8 \"=l\"))]\n   \"TARGET_64BIT && DEFAULT_ABI == ABI_AIX\n    && (INTVAL (operands[3]) == CALL_NORMAL || (INTVAL (operands[3]) & CALL_LONG) != 0)\"\n-  \"std %5,%a4\\;ld %7,0(%1)\\;ld %5,8(%1)\\;mt%8 %7\\;ld %6,16(%1)\\;blrl\\;ld %5,%a4\"\n+  \"std %5,%4\\;ld %7,0(%1)\\;ld %5,8(%1)\\;mt%8 %7\\;ld %6,16(%1)\\;blrl\\;ld %5,%4\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"28\")])\n \n@@ -7432,7 +7432,7 @@\n   [(call (mem:SI (match_operand:SI 0 \"register_operand\" \"b\"))\n \t (match_operand 1 \"const_int_operand\" \"n\"))\n    (use (match_operand 2 \"const_int_operand\" \"n\"))\n-   (use (match_operand 3 \"offsettable_addr_operand\" \"p\"))\n+   (use (match_operand 3 \"offsettable_mem_operand\" \"o\"))\n    (use (match_operand 4 \"register_operand\" \"r\"))\n    (clobber (match_scratch:SI 5 \"=&r\"))\n    (clobber (match_scratch:SI 6 \"=l\"))]\n@@ -7447,7 +7447,7 @@\n \t(call (mem:SI (match_operand:SI 1 \"register_operand\" \"b\"))\n \t      (match_operand 2 \"const_int_operand\" \"n\")))\n    (use (match_operand 3 \"const_int_operand\" \"n\"))\n-   (use (match_operand 4 \"offsettable_addr_operand\" \"p\"))\n+   (use (match_operand 4 \"offsettable_mem_operand\" \"o\"))\n    (use (match_operand 5 \"register_operand\" \"r\"))\n    (clobber (match_scratch:SI 6 \"=&r\"))\n    (clobber (match_scratch:SI 7 \"=l\"))]"}, {"sha": "796e487b0debd22fbec8ec97aee6747bda902869", "filename": "gcc/config/rs6000/win-nt.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97f6e72f229d19e8871a53fd9f553d1a2ccd8e9f/gcc%2Fconfig%2Frs6000%2Fwin-nt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97f6e72f229d19e8871a53fd9f553d1a2ccd8e9f/gcc%2Fconfig%2Frs6000%2Fwin-nt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fwin-nt.h?ref=97f6e72f229d19e8871a53fd9f553d1a2ccd8e9f", "patch": "@@ -119,9 +119,11 @@ Boston, MA 02111-1307, USA.  */\n #undef TARGET_DEFAULT \n #define TARGET_DEFAULT (MASK_POWERPC | MASK_NEW_MNEMONICS | MASK_NO_FP_IN_TOC | MASK_NO_SUM_IN_TOC)\n \n-/* Address to save the TOC register */\n+/* MEM representing address to save the TOC register */\n #undef\tRS6000_SAVE_TOC\n-#define RS6000_SAVE_TOC plus_constant (virtual_incoming_args_rtx, -RS6000_SAVE_AREA - 8)\n+#define RS6000_SAVE_TOC gen_rtx_MEM (Pmode, \\\n+\t\t\t\t     plus_constant (virtual_incoming_args_rtx,\n+\t\t\t\t\t\t    -RS6000_SAVE_AREA - 8))\n \n /* Windows NT specifies that r13 is reserved to the OS, so it is not available\n    to the normal user.  */"}]}