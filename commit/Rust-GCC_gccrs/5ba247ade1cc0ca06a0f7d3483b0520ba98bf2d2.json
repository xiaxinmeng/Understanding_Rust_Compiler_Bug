{"sha": "5ba247ade1cc0ca06a0f7d3483b0520ba98bf2d2", "node_id": "C_kwDOANBUbNoAKDViYTI0N2FkZTFjYzBjYTA2YTBmN2QzNDgzYjA1MjBiYTk4YmYyZDI", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-11-10T15:10:09Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-11-10T15:10:09Z"}, "message": "AArch64: Remove shuffle pattern for rounding variant.\n\nThis removed the patterns to optimize the rounding shift and narrow.\nThe optimization is valid only for the truncating rounding shift and narrow,\nfor the rounding shift and narrow we need a different pattern that I will submit\nseparately.\n\nThis wasn't noticed before as the benchmarks did not run conformance as part of\nthe run, which we now do and this now passes again.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-simd.md (*aarch64_topbits_shuffle<mode>_le\n\t,*aarch64_topbits_shuffle<mode>_be): Remove.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/shrn-combine-8.c: Update.\n\t* gcc.target/aarch64/shrn-combine-9.c: Update.", "tree": {"sha": "aae776b0a50ce68a9c73d1de60a969a302d2d772", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aae776b0a50ce68a9c73d1de60a969a302d2d772"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ba247ade1cc0ca06a0f7d3483b0520ba98bf2d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ba247ade1cc0ca06a0f7d3483b0520ba98bf2d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ba247ade1cc0ca06a0f7d3483b0520ba98bf2d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ba247ade1cc0ca06a0f7d3483b0520ba98bf2d2/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "992644c3511acd58248db784f1ac43e2f053ebcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/992644c3511acd58248db784f1ac43e2f053ebcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/992644c3511acd58248db784f1ac43e2f053ebcc"}], "stats": {"total": 36, "additions": 2, "deletions": 34}, "files": [{"sha": "54d7ca4ba0a3e170567ca7acf562d3ba569d75f2", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ba247ade1cc0ca06a0f7d3483b0520ba98bf2d2/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ba247ade1cc0ca06a0f7d3483b0520ba98bf2d2/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=5ba247ade1cc0ca06a0f7d3483b0520ba98bf2d2", "patch": "@@ -1887,22 +1887,6 @@\n   [(set_attr \"type\" \"neon_permute<q>\")]\n )\n \n-(define_insn \"*aarch64_topbits_shuffle<mode>_le\"\n-  [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n-\t(vec_concat:<VNARROWQ2>\n-          (unspec:<VNARROWQ> [\n-              (match_operand:VQN 1 \"register_operand\" \"w\")\n-\t      (match_operand:VQN 2 \"aarch64_simd_shift_imm_vec_exact_top\")\n-\t     ] UNSPEC_RSHRN)\n-\t  (unspec:<VNARROWQ> [\n-\t      (match_operand:VQN 3 \"register_operand\" \"w\")\n-\t      (match_dup 2)\n-\t     ] UNSPEC_RSHRN)))]\n-  \"TARGET_SIMD && !BYTES_BIG_ENDIAN\"\n-  \"uzp2\\\\t%0.<V2ntype>, %1.<V2ntype>, %3.<V2ntype>\"\n-  [(set_attr \"type\" \"neon_permute<q>\")]\n-)\n-\n (define_insn \"*aarch64_<srn_op>topbits_shuffle<mode>_be\"\n   [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n \t(vec_concat:<VNARROWQ2>\n@@ -1917,22 +1901,6 @@\n   [(set_attr \"type\" \"neon_permute<q>\")]\n )\n \n-(define_insn \"*aarch64_topbits_shuffle<mode>_be\"\n-  [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n-\t(vec_concat:<VNARROWQ2>\n-\t  (unspec:<VNARROWQ> [\n-\t      (match_operand:VQN 3 \"register_operand\" \"w\")\n-\t      (match_operand:VQN 2 \"aarch64_simd_shift_imm_vec_exact_top\")\n-\t     ] UNSPEC_RSHRN)\n-          (unspec:<VNARROWQ> [\n-              (match_operand:VQN 1 \"register_operand\" \"w\")\n-\t      (match_dup 2)\n-\t     ] UNSPEC_RSHRN)))]\n-  \"TARGET_SIMD && BYTES_BIG_ENDIAN\"\n-  \"uzp2\\\\t%0.<V2ntype>, %1.<V2ntype>, %3.<V2ntype>\"\n-  [(set_attr \"type\" \"neon_permute<q>\")]\n-)\n-\n (define_expand \"aarch64_shrn<mode>\"\n   [(set (match_operand:<VNARROWQ> 0 \"register_operand\")\n \t(truncate:<VNARROWQ>"}, {"sha": "c93c179632156c07f05e6067e63804db35cc436b", "filename": "gcc/testsuite/gcc.target/aarch64/shrn-combine-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ba247ade1cc0ca06a0f7d3483b0520ba98bf2d2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrn-combine-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ba247ade1cc0ca06a0f7d3483b0520ba98bf2d2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrn-combine-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrn-combine-8.c?ref=5ba247ade1cc0ca06a0f7d3483b0520ba98bf2d2", "patch": "@@ -6,7 +6,7 @@\n \n uint8x16_t foo (uint16x8_t a, uint16x8_t b)\n {\n-  return vrshrn_high_n_u16 (vrshrn_n_u16 (a, 8), b, 8);\n+  return vshrn_high_n_u16 (vshrn_n_u16 (a, 8), b, 8);\n }\n \n /* { dg-final { scan-assembler-times {\\tuzp2\\t} 1 } } */"}, {"sha": "bdb3c13e5a2f89d62b6a24c2abe3535656399cac", "filename": "gcc/testsuite/gcc.target/aarch64/shrn-combine-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ba247ade1cc0ca06a0f7d3483b0520ba98bf2d2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrn-combine-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ba247ade1cc0ca06a0f7d3483b0520ba98bf2d2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrn-combine-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrn-combine-9.c?ref=5ba247ade1cc0ca06a0f7d3483b0520ba98bf2d2", "patch": "@@ -6,7 +6,7 @@\n \n uint16x8_t foo (uint32x4_t a, uint32x4_t b)\n {\n-  return vrshrn_high_n_u32 (vrshrn_n_u32 (a, 16), b, 16);\n+  return vshrn_high_n_u32 (vshrn_n_u32 (a, 16), b, 16);\n }\n \n /* { dg-final { scan-assembler-times {\\tuzp2\\t} 1 } } */"}]}