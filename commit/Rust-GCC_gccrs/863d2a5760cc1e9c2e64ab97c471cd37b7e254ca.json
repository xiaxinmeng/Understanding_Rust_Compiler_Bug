{"sha": "863d2a5760cc1e9c2e64ab97c471cd37b7e254ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYzZDJhNTc2MGNjMWU5YzJlNjRhYjk3YzQ3MWNkMzdiN2UyNTRjYQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-12-13T14:22:23Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-12-13T14:22:23Z"}, "message": "re PR middle-end/34450 (compile takes up 1.8 GB RAM at -O1)\n\n2007-12-13  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/34450\n\t* params.def (PARAM_SCCVN_MAX_SCC_SIZE): New param.\n\t* invoke.texi (sccvn-max-scc-size): Document.\n\t* Makefile.in (tree-ssa-sccvn.o): Add $(PARAMS_H) dependency.\n\t* tree-ssa-sccvn.h (run_scc_vn): Return true on success, false\n\ton error.\n\t* tree-ssa-sccvn.c (params.h): Include.\n\t(DFS): Return true if all went well, return false as soon as\n\ta SCC exceeds the size of PARAM_SCCVN_MAX_SCC_SIZE.\n\t(run_scc_vn): Return true if all went well, return false if\n\twe aborted during DFS.\n\t* tree-ssa-pre.c (execute_pre): Check if SCCVN finished\n\tsuccessfully, otherwise bail out.\n\nFrom-SVN: r130895", "tree": {"sha": "e093a6851a7defde4e02f4c80a5cdb3acacf2c70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e093a6851a7defde4e02f4c80a5cdb3acacf2c70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/863d2a5760cc1e9c2e64ab97c471cd37b7e254ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/863d2a5760cc1e9c2e64ab97c471cd37b7e254ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/863d2a5760cc1e9c2e64ab97c471cd37b7e254ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/863d2a5760cc1e9c2e64ab97c471cd37b7e254ca/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3905a1b25a31c60a66b3736af9c71bc3cad8cdc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3905a1b25a31c60a66b3736af9c71bc3cad8cdc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3905a1b25a31c60a66b3736af9c71bc3cad8cdc2"}], "stats": {"total": 82, "additions": 74, "deletions": 8}, "files": [{"sha": "96a5d642d13483da178d49ea7d1e37985c61112c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/863d2a5760cc1e9c2e64ab97c471cd37b7e254ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/863d2a5760cc1e9c2e64ab97c471cd37b7e254ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=863d2a5760cc1e9c2e64ab97c471cd37b7e254ca", "patch": "@@ -1,3 +1,19 @@\n+2007-12-13  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/34450\n+\t* params.def (PARAM_SCCVN_MAX_SCC_SIZE): New param.\n+\t* invoke.texi (sccvn-max-scc-size): Document.\n+\t* Makefile.in (tree-ssa-sccvn.o): Add $(PARAMS_H) dependency.\n+\t* tree-ssa-sccvn.h (run_scc_vn): Return true on success, false\n+\ton error.\n+\t* tree-ssa-sccvn.c (params.h): Include.\n+\t(DFS): Return true if all went well, return false as soon as\n+\ta SCC exceeds the size of PARAM_SCCVN_MAX_SCC_SIZE.\n+\t(run_scc_vn): Return true if all went well, return false if\n+\twe aborted during DFS.\n+\t* tree-ssa-pre.c (execute_pre): Check if SCCVN finished\n+\tsuccessfully, otherwise bail out.\n+\n 2007-12-13  Olga Golovanevsky  <olga@il.ibm.com>\n \n \t* ipa-struct-reorg.c (is_candidate): Print information to dump "}, {"sha": "fa8509e245562ca4e515d99a47f405e7709a608d", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/863d2a5760cc1e9c2e64ab97c471cd37b7e254ca/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/863d2a5760cc1e9c2e64ab97c471cd37b7e254ca/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=863d2a5760cc1e9c2e64ab97c471cd37b7e254ca", "patch": "@@ -2075,7 +2075,8 @@ tree-ssa-sccvn.o : tree-ssa-sccvn.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(TREE_H) $(GGC_H) $(DIAGNOSTIC_H) $(TIMEVAR_H) \\\n    $(TM_H) coretypes.h $(TREE_DUMP_H) tree-pass.h $(FLAGS_H) $(CFGLOOP_H) \\\n    alloc-pool.h $(BASIC_BLOCK_H) bitmap.h $(HASHTAB_H) $(TREE_GIMPLE_H) \\\n-   $(TREE_INLINE_H) tree-iterator.h tree-ssa-propagate.h tree-ssa-sccvn.h\n+   $(TREE_INLINE_H) tree-iterator.h tree-ssa-propagate.h tree-ssa-sccvn.h \\\n+   $(PARAMS_H)\n tree-vn.o : tree-vn.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(GGC_H) \\\n    $(TREE_H) $(TREE_FLOW_H) $(HASHTAB_H) langhooks.h tree-pass.h \\\n    $(TREE_DUMP_H) $(DIAGNOSTIC_H) tree-ssa-sccvn.h"}, {"sha": "b6c7665353439ba7a2f9bca9928f0f07d1d5a45e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/863d2a5760cc1e9c2e64ab97c471cd37b7e254ca/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/863d2a5760cc1e9c2e64ab97c471cd37b7e254ca/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=863d2a5760cc1e9c2e64ab97c471cd37b7e254ca", "patch": "@@ -7182,6 +7182,12 @@ parameter sets a limit on the length of the sets that are computed,\n which prevents the runaway behaviour.  Setting a value of 0 for\n this paramter will allow an unlimited set length.\n \n+@item sccvn-max-scc-size\n+Maximum size of a strongly connected component (SCC) during SCCVN\n+processing.  If this limit is hit, SCCVN processing for the whole\n+function will not be done and optimizations depending on it will\n+be disabled.  The default maximum SCC size is 10000.\n+\n @end table\n @end table\n "}, {"sha": "1915727e28b342f50eac0624667f8f99a456cd25", "filename": "gcc/params.def", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/863d2a5760cc1e9c2e64ab97c471cd37b7e254ca/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/863d2a5760cc1e9c2e64ab97c471cd37b7e254ca/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=863d2a5760cc1e9c2e64ab97c471cd37b7e254ca", "patch": "@@ -713,6 +713,17 @@ DEFPARAM (PARAM_MAX_PARTIAL_ANTIC_LENGTH,\n \t  \"Maximum length of partial antic set when performing tree pre optimization\",\n \t  100, 0, 0)\n \n+/* The following is used as a stop-gap limit for cases where really huge\n+   SCCs blow up memory and compile-time use too much.  If we hit this limit,\n+   SCCVN and such FRE and PRE will be not done at all for the current\n+   function.  */\n+\n+DEFPARAM (PARAM_SCCVN_MAX_SCC_SIZE,\n+\t  \"sccvn-max-scc-size\",\n+\t  \"Maximum size of a SCC before SCCVN stops processing a function\",\n+\t  10000, 10, 0)\n+\n+\n /*\n Local variables:\n mode:c"}, {"sha": "c947e0f45d1ad31320d32442e96e413e0a4f14cd", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/863d2a5760cc1e9c2e64ab97c471cd37b7e254ca/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/863d2a5760cc1e9c2e64ab97c471cd37b7e254ca/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=863d2a5760cc1e9c2e64ab97c471cd37b7e254ca", "patch": "@@ -3933,7 +3933,13 @@ execute_pre (bool do_fre)\n     insert_fake_stores ();\n \n   /* Collect and value number expressions computed in each basic block.  */\n-  run_scc_vn ();\n+  if (!run_scc_vn ())\n+    {\n+      if (!do_fre)\n+\tremove_dead_inserted_code ();\n+      fini_pre ();\n+      return;\n+    }\n   switch_to_PRE_table ();\n   compute_avail ();\n "}, {"sha": "a14c2a749cf0bea147f7fc0687eca24c6821ea56", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/863d2a5760cc1e9c2e64ab97c471cd37b7e254ca/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/863d2a5760cc1e9c2e64ab97c471cd37b7e254ca/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=863d2a5760cc1e9c2e64ab97c471cd37b7e254ca", "patch": "@@ -42,6 +42,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"bitmap.h\"\n #include \"langhooks.h\"\n #include \"cfgloop.h\"\n+#include \"params.h\"\n #include \"tree-ssa-propagate.h\"\n #include \"tree-ssa-sccvn.h\"\n \n@@ -1837,9 +1838,11 @@ process_scc (VEC (tree, heap) *scc)\n /* Depth first search on NAME to discover and process SCC's in the SSA\n    graph.\n    Execution of this algorithm relies on the fact that the SCC's are\n-   popped off the stack in topological order.  */\n+   popped off the stack in topological order.\n+   Returns true if successful, false if we stopped processing SCC's due\n+   to ressource constraints.  */\n \n-static void\n+static bool\n DFS (tree name)\n {\n   ssa_op_iter iter;\n@@ -1870,7 +1873,8 @@ DFS (tree name)\n \n \t  if (! (VN_INFO (use)->visited))\n \t    {\n-\t      DFS (use);\n+\t      if (!DFS (use))\n+\t\treturn false;\n \t      VN_INFO (name)->low = MIN (VN_INFO (name)->low,\n \t\t\t\t\t VN_INFO (use)->low);\n \t    }\n@@ -1899,6 +1903,17 @@ DFS (tree name)\n \t  VEC_safe_push (tree, heap, scc, x);\n \t} while (x != name);\n \n+      /* Bail out of SCCVN in case a SCC turns out to be incredibly large.  */\n+      if (VEC_length (tree, scc)\n+\t    > (unsigned)PARAM_VALUE (PARAM_SCCVN_MAX_SCC_SIZE))\n+\t{\n+\t  if (dump_file)\n+\t    fprintf (dump_file, \"WARNING: Giving up with SCCVN due to \"\n+\t\t     \"SCC size %u exceeding %u\\n\", VEC_length (tree, scc),\n+\t\t     (unsigned)PARAM_VALUE (PARAM_SCCVN_MAX_SCC_SIZE));\n+\t  return false;\n+\t}\n+\n       if (VEC_length (tree, scc) > 1)\n \tsort_scc (scc);\n \n@@ -1909,6 +1924,8 @@ DFS (tree name)\n \n       VEC_free (tree, heap, scc);\n     }\n+\n+  return true;\n }\n \n static void\n@@ -2074,7 +2091,10 @@ free_scc_vn (void)\n     }\n }\n \n-void\n+/* Do SCCVN.  Returns true if it finished, false if we bailed out\n+   due to ressource constraints.  */\n+\n+bool\n run_scc_vn (void)\n {\n   size_t i;\n@@ -2100,7 +2120,11 @@ run_scc_vn (void)\n       if (name\n \t  && VN_INFO (name)->visited == false\n \t  && !has_zero_uses (name))\n-\tDFS (name);\n+\tif (!DFS (name))\n+\t  {\n+\t    free_scc_vn ();\n+\t    return false;\n+\t  }\n     }\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n@@ -2123,4 +2147,6 @@ run_scc_vn (void)\n \t    }\n \t}\n     }\n+\n+  return true;\n }"}, {"sha": "f434e95f276d335f4cf8c385cb932c3cdb4d4c6a", "filename": "gcc/tree-ssa-sccvn.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/863d2a5760cc1e9c2e64ab97c471cd37b7e254ca/gcc%2Ftree-ssa-sccvn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/863d2a5760cc1e9c2e64ab97c471cd37b7e254ca/gcc%2Ftree-ssa-sccvn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.h?ref=863d2a5760cc1e9c2e64ab97c471cd37b7e254ca", "patch": "@@ -48,7 +48,7 @@ typedef struct vn_ssa_aux\n /* Return the value numbering info for an SSA_NAME.  */\n extern vn_ssa_aux_t VN_INFO (tree);\n extern vn_ssa_aux_t VN_INFO_GET (tree);\n-void run_scc_vn (void);\n+bool run_scc_vn (void);\n void free_scc_vn (void);\n void switch_to_PRE_table (void);\n tree vn_binary_op_lookup (tree);"}]}