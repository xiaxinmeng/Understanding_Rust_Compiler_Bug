{"sha": "7f7364108f7441e6bd6f6f79a2d991e4e0f71b28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y3MzY0MTA4Zjc0NDFlNmJkNmY2Zjc5YTJkOTkxZTRlMGY3MWIyOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-07-23T07:50:15Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-07-23T07:50:15Z"}, "message": "openmp: Add support for __has_attribute(omp::directive) and __has_attribute(omp::sequence)\n\nNow that the C++ FE supports these attributes, but not through registering\nthem in the attributes tables (they work quite differently from other\nattributes), this teaches c_common_has_attributes about those.\n\n2021-07-23  Jakub Jelinek  <jakub@redhat.com>\n\n\t* c-lex.c (c_common_has_attribute): Call canonicalize_attr_name also\n\ton attr_id.  Return 1 for omp::directive or omp::sequence in C++11\n\tand later.\n\n\t* c-c++-common/gomp/attrs-1.c: New test.\n\t* c-c++-common/gomp/attrs-2.c: New test.\n\t* c-c++-common/gomp/attrs-3.c: New test.", "tree": {"sha": "2be09c88daca7fffbe70c1f7dcafa99e168efe23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2be09c88daca7fffbe70c1f7dcafa99e168efe23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f7364108f7441e6bd6f6f79a2d991e4e0f71b28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f7364108f7441e6bd6f6f79a2d991e4e0f71b28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f7364108f7441e6bd6f6f79a2d991e4e0f71b28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f7364108f7441e6bd6f6f79a2d991e4e0f71b28/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c5d803d03209478b4f060785c6f6ba2f0de88ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c5d803d03209478b4f060785c6f6ba2f0de88ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c5d803d03209478b4f060785c6f6ba2f0de88ad"}], "stats": {"total": 381, "additions": 380, "deletions": 1}, "files": [{"sha": "4b04e71e83de98d894facd0656d57f322d4a6669", "filename": "gcc/c-family/c-lex.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f7364108f7441e6bd6f6f79a2d991e4e0f71b28/gcc%2Fc-family%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f7364108f7441e6bd6f6f79a2d991e4e0f71b28/gcc%2Fc-family%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.c?ref=7f7364108f7441e6bd6f6f79a2d991e4e0f71b28", "patch": "@@ -338,7 +338,20 @@ c_common_has_attribute (cpp_reader *pfile, bool std_syntax)\n \t      tree attr_id\n \t\t= get_identifier ((const char *)\n \t\t\t\t  cpp_token_as_text (pfile, nxt_token));\n-\t      attr_name = build_tree_list (attr_ns, attr_id);\n+\t      attr_id = canonicalize_attr_name (attr_id);\n+\t      if (c_dialect_cxx ())\n+\t\t{\n+\t\t  /* OpenMP attributes need special handling.  */\n+\t\t  if ((flag_openmp || flag_openmp_simd)\n+\t\t      && is_attribute_p (\"omp\", attr_ns)\n+\t\t      && (is_attribute_p (\"directive\", attr_id)\n+\t\t\t  || is_attribute_p (\"sequence\", attr_id)))\n+\t\t    result = 1;\n+\t\t}\n+\t      if (result)\n+\t\tattr_name = NULL_TREE;\n+\t      else\n+\t\tattr_name = build_tree_list (attr_ns, attr_id);\n \t    }\n \t  else\n \t    {"}, {"sha": "e3c0fa6379429a01022f99732fd015760bf696b2", "filename": "gcc/testsuite/c-c++-common/gomp/attrs-1.c", "status": "added", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f7364108f7441e6bd6f6f79a2d991e4e0f71b28/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fattrs-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f7364108f7441e6bd6f6f79a2d991e4e0f71b28/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fattrs-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fattrs-1.c?ref=7f7364108f7441e6bd6f6f79a2d991e4e0f71b28", "patch": "@@ -0,0 +1,146 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fopenmp\" } */\n+\n+#if __has_attribute(omp::directive)\n+#ifndef __cplusplus\n+#error omp::directive supported in C\n+#endif\n+#else\n+#ifdef __cplusplus\n+#error omp::directive not supported in C++\n+#endif\n+#endif\n+\n+#if __has_attribute(omp::sequence)\n+#ifndef __cplusplus\n+#error omp::sequence supported in C\n+#endif\n+#else\n+#ifdef __cplusplus\n+#error omp::sequence not supported in C++\n+#endif\n+#endif\n+\n+#if __has_attribute(omp::unknown)\n+#error omp::unknown supported\n+#endif\n+\n+#if __has_cpp_attribute(omp::directive)\n+#ifndef __cplusplus\n+#error omp::directive supported in C\n+#endif\n+#else\n+#ifdef __cplusplus\n+#error omp::directive not supported in C++\n+#endif\n+#endif\n+\n+#if __has_cpp_attribute(omp::sequence)\n+#ifndef __cplusplus\n+#error omp::sequence supported in C\n+#endif\n+#else\n+#ifdef __cplusplus\n+#error omp::sequence not supported in C++\n+#endif\n+#endif\n+\n+#if __has_cpp_attribute(omp::unknown)\n+#error omp::unknown supported\n+#endif\n+\n+#if __has_attribute(__omp__::__directive__)\n+#ifndef __cplusplus\n+#error __omp__::__directive__ supported in C\n+#endif\n+#else\n+#ifdef __cplusplus\n+#error __omp__::__directive__ not supported in C++\n+#endif\n+#endif\n+\n+#if __has_attribute(__omp__::__sequence__)\n+#ifndef __cplusplus\n+#error __omp__::__sequence__ supported in C\n+#endif\n+#else\n+#ifdef __cplusplus\n+#error __omp__::__sequence__ not supported in C++\n+#endif\n+#endif\n+\n+#if __has_attribute(__omp__::__unknown__)\n+#error __omp__::__unknown__ supported\n+#endif\n+\n+#if __has_cpp_attribute(__omp__::__directive__)\n+#ifndef __cplusplus\n+#error __omp__::__directive__ supported in C\n+#endif\n+#else\n+#ifdef __cplusplus\n+#error __omp__::__directive__ not supported in C++\n+#endif\n+#endif\n+\n+#if __has_cpp_attribute(__omp__::__sequence__)\n+#ifndef __cplusplus\n+#error __omp__::__sequence__ supported in C\n+#endif\n+#else\n+#ifdef __cplusplus\n+#error __omp__::__sequence__ not supported in C++\n+#endif\n+#endif\n+\n+#if __has_cpp_attribute(__omp__::__unknown__)\n+#error __omp__::__unknown__ supported\n+#endif\n+\n+#if __has_attribute(omp::__directive__)\n+#ifndef __cplusplus\n+#error omp::__directive__ supported in C\n+#endif\n+#else\n+#ifdef __cplusplus\n+#error omp::__directive__ not supported in C++\n+#endif\n+#endif\n+\n+#if __has_attribute(__omp__::sequence)\n+#ifndef __cplusplus\n+#error __omp__::sequence supported in C\n+#endif\n+#else\n+#ifdef __cplusplus\n+#error __omp__::sequence not supported in C++\n+#endif\n+#endif\n+\n+#if __has_attribute(omp::__unknown__)\n+#error omp::__unknown__ supported\n+#endif\n+\n+#if __has_cpp_attribute(__omp__::directive)\n+#ifndef __cplusplus\n+#error __omp__::directive supported in C\n+#endif\n+#else\n+#ifdef __cplusplus\n+#error __omp__::directive not supported in C++\n+#endif\n+#endif\n+\n+#if __has_cpp_attribute(omp::__sequence__)\n+#ifndef __cplusplus\n+#error omp::__sequence__ supported in C\n+#endif\n+#else\n+#ifdef __cplusplus\n+#error omp::__sequence__ not supported in C++\n+#endif\n+#endif\n+\n+#if __has_cpp_attribute(__omp__::unknown)\n+#error __omp__::unknown supported\n+#endif"}, {"sha": "21abcddcd34e4cd9421ca76239e36088ca623938", "filename": "gcc/testsuite/c-c++-common/gomp/attrs-2.c", "status": "added", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f7364108f7441e6bd6f6f79a2d991e4e0f71b28/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fattrs-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f7364108f7441e6bd6f6f79a2d991e4e0f71b28/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fattrs-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fattrs-2.c?ref=7f7364108f7441e6bd6f6f79a2d991e4e0f71b28", "patch": "@@ -0,0 +1,146 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fno-openmp -fopenmp-simd\" } */\n+\n+#if __has_attribute(omp::directive)\n+#ifndef __cplusplus\n+#error omp::directive supported in C\n+#endif\n+#else\n+#ifdef __cplusplus\n+#error omp::directive not supported in C++\n+#endif\n+#endif\n+\n+#if __has_attribute(omp::sequence)\n+#ifndef __cplusplus\n+#error omp::sequence supported in C\n+#endif\n+#else\n+#ifdef __cplusplus\n+#error omp::sequence not supported in C++\n+#endif\n+#endif\n+\n+#if __has_attribute(omp::unknown)\n+#error omp::unknown supported\n+#endif\n+\n+#if __has_cpp_attribute(omp::directive)\n+#ifndef __cplusplus\n+#error omp::directive supported in C\n+#endif\n+#else\n+#ifdef __cplusplus\n+#error omp::directive not supported in C++\n+#endif\n+#endif\n+\n+#if __has_cpp_attribute(omp::sequence)\n+#ifndef __cplusplus\n+#error omp::sequence supported in C\n+#endif\n+#else\n+#ifdef __cplusplus\n+#error omp::sequence not supported in C++\n+#endif\n+#endif\n+\n+#if __has_cpp_attribute(omp::unknown)\n+#error omp::unknown supported\n+#endif\n+\n+#if __has_attribute(__omp__::__directive__)\n+#ifndef __cplusplus\n+#error __omp__::__directive__ supported in C\n+#endif\n+#else\n+#ifdef __cplusplus\n+#error __omp__::__directive__ not supported in C++\n+#endif\n+#endif\n+\n+#if __has_attribute(__omp__::__sequence__)\n+#ifndef __cplusplus\n+#error __omp__::__sequence__ supported in C\n+#endif\n+#else\n+#ifdef __cplusplus\n+#error __omp__::__sequence__ not supported in C++\n+#endif\n+#endif\n+\n+#if __has_attribute(__omp__::__unknown__)\n+#error __omp__::__unknown__ supported\n+#endif\n+\n+#if __has_cpp_attribute(__omp__::__directive__)\n+#ifndef __cplusplus\n+#error __omp__::__directive__ supported in C\n+#endif\n+#else\n+#ifdef __cplusplus\n+#error __omp__::__directive__ not supported in C++\n+#endif\n+#endif\n+\n+#if __has_cpp_attribute(__omp__::__sequence__)\n+#ifndef __cplusplus\n+#error __omp__::__sequence__ supported in C\n+#endif\n+#else\n+#ifdef __cplusplus\n+#error __omp__::__sequence__ not supported in C++\n+#endif\n+#endif\n+\n+#if __has_cpp_attribute(__omp__::__unknown__)\n+#error __omp__::__unknown__ supported\n+#endif\n+\n+#if __has_attribute(omp::__directive__)\n+#ifndef __cplusplus\n+#error omp::__directive__ supported in C\n+#endif\n+#else\n+#ifdef __cplusplus\n+#error omp::__directive__ not supported in C++\n+#endif\n+#endif\n+\n+#if __has_attribute(__omp__::sequence)\n+#ifndef __cplusplus\n+#error __omp__::sequence supported in C\n+#endif\n+#else\n+#ifdef __cplusplus\n+#error __omp__::sequence not supported in C++\n+#endif\n+#endif\n+\n+#if __has_attribute(omp::__unknown__)\n+#error omp::__unknown__ supported\n+#endif\n+\n+#if __has_cpp_attribute(__omp__::directive)\n+#ifndef __cplusplus\n+#error __omp__::directive supported in C\n+#endif\n+#else\n+#ifdef __cplusplus\n+#error __omp__::directive not supported in C++\n+#endif\n+#endif\n+\n+#if __has_cpp_attribute(omp::__sequence__)\n+#ifndef __cplusplus\n+#error omp::__sequence__ supported in C\n+#endif\n+#else\n+#ifdef __cplusplus\n+#error omp::__sequence__ not supported in C++\n+#endif\n+#endif\n+\n+#if __has_cpp_attribute(__omp__::unknown)\n+#error __omp__::unknown supported\n+#endif"}, {"sha": "5900244b9f7e8003d88085d586e41990d5c31e5f", "filename": "gcc/testsuite/c-c++-common/gomp/attrs-3.c", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f7364108f7441e6bd6f6f79a2d991e4e0f71b28/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fattrs-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f7364108f7441e6bd6f6f79a2d991e4e0f71b28/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fattrs-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fattrs-3.c?ref=7f7364108f7441e6bd6f6f79a2d991e4e0f71b28", "patch": "@@ -0,0 +1,74 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fno-openmp -fno-openmp-simd\" } */\n+\n+#if __has_attribute(omp::directive)\n+#error omp::directive supported even when -fno-openmp{,-simd}\n+#endif\n+\n+#if __has_attribute(omp::sequence)\n+#error omp::sequence supported even when -fno-openmp{,-simd}\n+#endif\n+\n+#if __has_attribute(omp::unknown)\n+#error omp::unknown supported\n+#endif\n+\n+#if __has_cpp_attribute(omp::directive)\n+#error omp::directive supported even when -fno-openmp{,-simd}\n+#endif\n+\n+#if __has_cpp_attribute(omp::sequence)\n+#error omp::sequence supported even when -fno-openmp{,-simd}\n+#endif\n+\n+#if __has_cpp_attribute(omp::unknown)\n+#error omp::unknown supported\n+#endif\n+\n+#if __has_attribute(__omp__::__directive__)\n+#error __omp__::__directive__ supported even when -fno-openmp{,-simd}\n+#endif\n+\n+#if __has_attribute(__omp__::__sequence__)\n+#error __omp__::__sequence__ supported even when -fno-openmp{,-simd}\n+#endif\n+\n+#if __has_attribute(__omp__::__unknown__)\n+#error __omp__::__unknown__ supported\n+#endif\n+\n+#if __has_cpp_attribute(__omp__::__directive__)\n+#error __omp__::__directive__ supported even when -fno-openmp{,-simd}\n+#endif\n+\n+#if __has_cpp_attribute(__omp__::__sequence__)\n+#error __omp__::__sequence__ supported even when -fno-openmp{,-simd}\n+#endif\n+\n+#if __has_cpp_attribute(__omp__::__unknown__)\n+#error __omp__::__unknown__ supported\n+#endif\n+\n+#if __has_attribute(omp::__directive__)\n+#error omp::__directive__ supported even when -fno-openmp{,-simd}\n+#endif\n+\n+#if __has_attribute(__omp__::sequence)\n+#error __omp__::sequence supported even when -fno-openmp{,-simd}\n+#endif\n+\n+#if __has_attribute(omp::__unknown__)\n+#error omp::__unknown__ supported\n+#endif\n+\n+#if __has_cpp_attribute(__omp__::directive)\n+#error __omp__::directive supported even when -fno-openmp{,-simd}\n+#endif\n+\n+#if __has_cpp_attribute(omp::__sequence__)\n+#error omp::__sequence__ supported even when -fno-openmp{,-simd}\n+#endif\n+\n+#if __has_cpp_attribute(__omp__::unknown)\n+#error __omp__::unknown supported\n+#endif"}]}