{"sha": "d76473618c43c7a073359a300113fa5cf21fd999", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc2NDczNjE4YzQzYzdhMDczMzU5YTMwMDExM2ZhNWNmMjFmZDk5OQ==", "commit": {"author": {"name": "Kyle Galloway", "email": "kgallowa@redhat.com", "date": "2007-04-23T17:30:29Z"}, "committer": {"name": "Kyle Galloway", "email": "kgallowa@gcc.gnu.org", "date": "2007-04-23T17:30:29Z"}, "message": "java-interp.h (_Jv_InterpFrame): Add pointer to the interpreter PC.\n\n2007-04-23  Kyle Galloway  <kgallowa@redhat.com>\n\n\t* include/java-interp.h (_Jv_InterpFrame): Add pointer to the\n\tinterpreter PC.\n\t(<init>): Add a pointer to the interpreter PC as a parameter with\n\tdefault value NULL.\n\t(get_pc): New method.\n\t* interpret-run.cc: If debugging, pass a pointer to the PC when\n\tcreating the stack frame.\n\t* jvmti.cc (_Jv_JVMTI_GetStackTrace): Call _Jv_InterpFrame::get_pc\n\tto get the PC.\n\nFrom-SVN: r124076", "tree": {"sha": "81048b7fa6e216d50f6149770c8a5fe429e8072d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81048b7fa6e216d50f6149770c8a5fe429e8072d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d76473618c43c7a073359a300113fa5cf21fd999", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d76473618c43c7a073359a300113fa5cf21fd999", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d76473618c43c7a073359a300113fa5cf21fd999", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d76473618c43c7a073359a300113fa5cf21fd999/comments", "author": null, "committer": null, "parents": [{"sha": "34a7526e36dae962cea221b99fb4124b79895fce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34a7526e36dae962cea221b99fb4124b79895fce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34a7526e36dae962cea221b99fb4124b79895fce"}], "stats": {"total": 45, "additions": 40, "deletions": 5}, "files": [{"sha": "b93bb3cd0a426c17a8ac39deb75acdaaf79105b2", "filename": "libjava/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76473618c43c7a073359a300113fa5cf21fd999/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76473618c43c7a073359a300113fa5cf21fd999/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=d76473618c43c7a073359a300113fa5cf21fd999", "patch": "@@ -1,3 +1,15 @@\n+2007-04-23  Kyle Galloway  <kgallowa@redhat.com>\n+\n+\t* include/java-interp.h (_Jv_InterpFrame): Add pointer to the\n+\tinterpreter PC.\n+\t(<init>): Add a pointer to the interpreter PC as a parameter with\n+\tdefault value NULL.\n+\t(get_pc): New method.\n+\t* interpret-run.cc: If debugging, pass a pointer to the PC when\n+\tcreating the stack frame.\n+\t* jvmti.cc (_Jv_JVMTI_GetStackTrace): Call _Jv_InterpFrame::get_pc\n+\tto get the PC.\n+\n 2007-04-23  Kyle Galloway  <kgallowa@redhat.com>\n \n \t* gnu/classpath/jdwp/natVMVirtualMachine.cc (getSourceFile): Check"}, {"sha": "8da0584af8e453075609cb831b49d14bfae997ce", "filename": "libjava/include/java-interp.h", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76473618c43c7a073359a300113fa5cf21fd999/libjava%2Finclude%2Fjava-interp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76473618c43c7a073359a300113fa5cf21fd999/libjava%2Finclude%2Fjava-interp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjava-interp.h?ref=d76473618c43c7a073359a300113fa5cf21fd999", "patch": "@@ -422,6 +422,9 @@ class _Jv_InterpFrame : public _Jv_Frame\n     pc_t pc;\n     jclass proxyClass;\n   };\n+  \n+  // Pointer to the actual pc value.\n+  pc_t *pc_ptr;\n \n   //Debug info for local variables.\n   _Jv_word *locals;\n@@ -430,14 +433,16 @@ class _Jv_InterpFrame : public _Jv_Frame\n   // Object pointer for this frame (\"this\")\n   jobject obj_ptr;\n \n-  _Jv_InterpFrame (void *meth, java::lang::Thread *thr, jclass proxyCls = NULL)\n+  _Jv_InterpFrame (void *meth, java::lang::Thread *thr, jclass proxyCls = NULL,\n+                   pc_t *pc = NULL)\n   : _Jv_Frame (reinterpret_cast<_Jv_MethodBase *> (meth), thr,\n \t             frame_interpreter)\n   {\n     next_interp = (_Jv_InterpFrame *) thr->interp_frame;\n     proxyClass = proxyCls;\n     thr->interp_frame = (gnu::gcj::RawData *) this;\n     obj_ptr = NULL;\n+    pc_ptr = pc;\n   }\n \n   ~_Jv_InterpFrame ()\n@@ -448,7 +453,20 @@ class _Jv_InterpFrame : public _Jv_Frame\n   jobject get_this_ptr ()\n   {\n     return obj_ptr;\n-  } \n+  }\n+  \n+  pc_t get_pc ()\n+  {\n+    pc_t pc;\n+    \n+    // If the PC_PTR is NULL, we are not debugging.\n+    if (pc_ptr == NULL)\n+      pc = 0;\n+    else\n+      pc = *pc_ptr;\n+    \n+    return pc;\n+  }\n };\n \n // A native frame in the call stack really just a placeholder"}, {"sha": "9e1ed2e9c4e0b59a9769bcaf44f807c87bc53d91", "filename": "libjava/interpret-run.cc", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76473618c43c7a073359a300113fa5cf21fd999/libjava%2Finterpret-run.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76473618c43c7a073359a300113fa5cf21fd999/libjava%2Finterpret-run.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finterpret-run.cc?ref=d76473618c43c7a073359a300113fa5cf21fd999", "patch": "@@ -12,6 +12,8 @@ details.  */\n  * compiled directly.\t*/\n \n   using namespace java::lang::reflect;\n+  \n+  pc_t pc = NULL;\n \n   // FRAME_DESC registers this particular invocation as the top-most\n   // interpreter frame.  This lets the stack tracing code (for\n@@ -20,7 +22,12 @@ details.  */\n   // destructor so it cleans up automatically when the interpreter\n   // returns.\n   java::lang::Thread *thread = java::lang::Thread::currentThread();\n+  \n+#ifdef DEBUG\n+  _Jv_InterpFrame frame_desc (meth, thread, NULL, &pc);\n+#else\n   _Jv_InterpFrame frame_desc (meth, thread);\n+#endif\n \n   _Jv_word stack[meth->max_stack];\n   _Jv_word *sp = stack;\n@@ -334,8 +341,6 @@ details.  */\n #endif\n   };\n \n-  pc_t pc;\n-\n #ifdef DIRECT_THREADED\n \n #ifdef DEBUG"}, {"sha": "c13bb5aa3970b029bbb19edaaedd056431d10cf5", "filename": "libjava/jvmti.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76473618c43c7a073359a300113fa5cf21fd999/libjava%2Fjvmti.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76473618c43c7a073359a300113fa5cf21fd999/libjava%2Fjvmti.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjvmti.cc?ref=d76473618c43c7a073359a300113fa5cf21fd999", "patch": "@@ -1245,7 +1245,7 @@ _Jv_JVMTI_GetStackTrace (MAYBE_UNUSED jvmtiEnv *env, jthread thread,\n             = static_cast<_Jv_InterpMethod *> (frame->self);\n           _Jv_InterpFrame *interp_frame \n             = static_cast<_Jv_InterpFrame *> (frame);\n-          frames[i].location = imeth->insn_index (interp_frame->pc);\n+          frames[i].location = imeth->insn_index (interp_frame->get_pc ());\n         }\n       else\n         frames[i].location = -1;"}]}