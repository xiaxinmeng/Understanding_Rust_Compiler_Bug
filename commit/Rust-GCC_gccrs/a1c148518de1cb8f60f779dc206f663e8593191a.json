{"sha": "a1c148518de1cb8f60f779dc206f663e8593191a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFjMTQ4NTE4ZGUxY2I4ZjYwZjc3OWRjMjA2ZjY2M2U4NTkzMTkxYQ==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-05-12T16:50:57Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-05-12T16:50:57Z"}, "message": "Add the identifier to part of fntype signitures\n\nTracking the identifier helps ensure fntypes are distinct and do not\noverlap.", "tree": {"sha": "268a9a1ad2ba21bd18ab61b0847e6a49c971b897", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/268a9a1ad2ba21bd18ab61b0847e6a49c971b897"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1c148518de1cb8f60f779dc206f663e8593191a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1c148518de1cb8f60f779dc206f663e8593191a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1c148518de1cb8f60f779dc206f663e8593191a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1c148518de1cb8f60f779dc206f663e8593191a/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17258c94f8c996c26ccde103afd1c0a8a343301b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17258c94f8c996c26ccde103afd1c0a8a343301b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17258c94f8c996c26ccde103afd1c0a8a343301b"}], "stats": {"total": 36, "additions": 24, "deletions": 12}, "files": [{"sha": "2f54d0cbe60301ea60165ab778652f39e636c6b5", "filename": "gcc/rust/typecheck/rust-hir-type-check-implitem.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1c148518de1cb8f60f779dc206f663e8593191a/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1c148518de1cb8f60f779dc206f663e8593191a/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h?ref=a1c148518de1cb8f60f779dc206f663e8593191a", "patch": "@@ -112,7 +112,8 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n       }\n \n     auto fnType = new TyTy::FnType (function.get_mappings ().get_hirid (),\n-\t\t\t\t    false, std::move (params), ret_type,\n+\t\t\t\t    function.get_function_name (), false,\n+\t\t\t\t    std::move (params), ret_type,\n \t\t\t\t    std::move (substitutions));\n     context->insert_type (function.get_mappings (), fnType);\n   }\n@@ -189,9 +190,10 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n \tcontext->insert_type (param.get_mappings (), param_tyty);\n       }\n \n-    auto fnType = new TyTy::FnType (method.get_mappings ().get_hirid (), true,\n-\t\t\t\t    std::move (params), ret_type,\n-\t\t\t\t    std::move (substitutions));\n+    auto fnType\n+      = new TyTy::FnType (method.get_mappings ().get_hirid (),\n+\t\t\t  method.get_method_name (), true, std::move (params),\n+\t\t\t  ret_type, std::move (substitutions));\n     context->insert_type (method.get_mappings (), fnType);\n   }\n "}, {"sha": "e01b46fc5ec1892dc47ab7556ab1890d3bce3875", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1c148518de1cb8f60f779dc206f663e8593191a/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1c148518de1cb8f60f779dc206f663e8593191a/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h?ref=a1c148518de1cb8f60f779dc206f663e8593191a", "patch": "@@ -229,7 +229,8 @@ class TypeCheckTopLevel : public TypeCheckBase\n       }\n \n     auto fnType = new TyTy::FnType (function.get_mappings ().get_hirid (),\n-\t\t\t\t    false, std::move (params), ret_type,\n+\t\t\t\t    function.get_function_name (), false,\n+\t\t\t\t    std::move (params), ret_type,\n \t\t\t\t    std::move (substitutions));\n     context->insert_type (function.get_mappings (), fnType);\n   }"}, {"sha": "0859570e44f4f2c1083d36544885a22f15a3c69d", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1c148518de1cb8f60f779dc206f663e8593191a/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1c148518de1cb8f60f779dc206f663e8593191a/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=a1c148518de1cb8f60f779dc206f663e8593191a", "patch": "@@ -679,6 +679,9 @@ FnType::is_equal (const BaseType &other) const\n     return false;\n \n   auto other2 = static_cast<const FnType &> (other);\n+  if (get_identifier ().compare (other2.get_identifier ()) != 0)\n+    return false;\n+\n   if (!get_return_type ()->is_equal (*other2.get_return_type ()))\n     return false;\n \n@@ -712,9 +715,10 @@ FnType::clone ()\n     cloned_params.push_back (\n       std::pair<HIR::Pattern *, BaseType *> (p.first, p.second->clone ()));\n \n-  return new FnType (get_ref (), get_ty_ref (), is_method_flag,\n-\t\t     std::move (cloned_params), get_return_type ()->clone (),\n-\t\t     clone_substs (), get_combined_refs ());\n+  return new FnType (get_ref (), get_ty_ref (), get_identifier (),\n+\t\t     is_method_flag, std::move (cloned_params),\n+\t\t     get_return_type ()->clone (), clone_substs (),\n+\t\t     get_combined_refs ());\n }\n \n FnType *"}, {"sha": "5acc9e7805d59bc034abb3695198ff6eea3e302e", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1c148518de1cb8f60f779dc206f663e8593191a/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1c148518de1cb8f60f779dc206f663e8593191a/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=a1c148518de1cb8f60f779dc206f663e8593191a", "patch": "@@ -855,24 +855,26 @@ class ADTType : public BaseType, public SubstitutionRef\n class FnType : public BaseType, public SubstitutionRef\n {\n public:\n-  FnType (HirId ref, bool is_method,\n+  FnType (HirId ref, std::string identifier, bool is_method,\n \t  std::vector<std::pair<HIR::Pattern *, BaseType *> > params,\n \t  BaseType *type, std::vector<SubstitutionParamMapping> subst_refs,\n \t  std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ref, TypeKind::FNDEF, refs),\n       SubstitutionRef (std::move (subst_refs),\n \t\t       SubstitutionArgumentMappings::error ()),\n-      params (std::move (params)), type (type), is_method_flag (is_method)\n+      params (std::move (params)), type (type), is_method_flag (is_method),\n+      identifier (identifier)\n   {}\n \n-  FnType (HirId ref, HirId ty_ref, bool is_method,\n+  FnType (HirId ref, HirId ty_ref, std::string identifier, bool is_method,\n \t  std::vector<std::pair<HIR::Pattern *, BaseType *> > params,\n \t  BaseType *type, std::vector<SubstitutionParamMapping> subst_refs,\n \t  std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ty_ref, TypeKind::FNDEF, refs),\n       SubstitutionRef (std::move (subst_refs),\n \t\t       SubstitutionArgumentMappings::error ()),\n-      params (params), type (type), is_method_flag (is_method)\n+      params (params), type (type), is_method_flag (is_method),\n+      identifier (identifier)\n   {}\n \n   void accept_vis (TyVisitor &vis) override;\n@@ -881,6 +883,8 @@ class FnType : public BaseType, public SubstitutionRef\n \n   std::string get_name () const override final { return as_string (); }\n \n+  std::string get_identifier () const { return identifier; }\n+\n   BaseType *unify (BaseType *other) override;\n   bool can_eq (BaseType *other) override;\n \n@@ -947,6 +951,7 @@ class FnType : public BaseType, public SubstitutionRef\n   std::vector<std::pair<HIR::Pattern *, BaseType *> > params;\n   BaseType *type;\n   bool is_method_flag;\n+  std::string identifier;\n };\n \n class FnPtr : public BaseType"}]}