{"sha": "8967ee52ea92c865801d6137600e33e4a32cd2ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk2N2VlNTJlYTkyYzg2NTgwMWQ2MTM3NjAwZTMzZTRhMzJjZDJlYw==", "commit": {"author": {"name": "Ghjuvan Lacambre", "email": "lacambre@adacore.com", "date": "2021-06-21T09:47:59Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-09-20T12:31:29Z"}, "message": "[Ada] Refactor scan_backend_switch to share logic across backends\n\ngcc/ada/\n\n\t* adabkend.adb (Scan_Back_End_Switches): Replace switch-scanning\n\tlogic with call to Backend_Utils.Scan_Common_Back_End_Switches.\n\t* back_end.adb (Scan_Back_End_Switches): Replace switch-scanning\n\tlogic with call to Backend_Utils.Scan_Common_Back_End_Switches.\n\t* backend_utils.adb: New file.\n\t* backend_utils.ads: New file.\n\t* gcc-interface/Make-lang.in: Add ada/backend_utils.o.", "tree": {"sha": "42ccd25ab111e6d198e2da96aca647f095db6339", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42ccd25ab111e6d198e2da96aca647f095db6339"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8967ee52ea92c865801d6137600e33e4a32cd2ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8967ee52ea92c865801d6137600e33e4a32cd2ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8967ee52ea92c865801d6137600e33e4a32cd2ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8967ee52ea92c865801d6137600e33e4a32cd2ec/comments", "author": {"login": "glacambre", "id": 11534587, "node_id": "MDQ6VXNlcjExNTM0NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/11534587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glacambre", "html_url": "https://github.com/glacambre", "followers_url": "https://api.github.com/users/glacambre/followers", "following_url": "https://api.github.com/users/glacambre/following{/other_user}", "gists_url": "https://api.github.com/users/glacambre/gists{/gist_id}", "starred_url": "https://api.github.com/users/glacambre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glacambre/subscriptions", "organizations_url": "https://api.github.com/users/glacambre/orgs", "repos_url": "https://api.github.com/users/glacambre/repos", "events_url": "https://api.github.com/users/glacambre/events{/privacy}", "received_events_url": "https://api.github.com/users/glacambre/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3afd5368f50f7a5060fddd652a41b141691172d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3afd5368f50f7a5060fddd652a41b141691172d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3afd5368f50f7a5060fddd652a41b141691172d1"}], "stats": {"total": 286, "additions": 176, "deletions": 110}, "files": [{"sha": "118ca95ee06d784c6c06276eb286d69da0b9d79d", "filename": "gcc/ada/adabkend.adb", "status": "modified", "additions": 11, "deletions": 47, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8967ee52ea92c865801d6137600e33e4a32cd2ec/gcc%2Fada%2Fadabkend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8967ee52ea92c865801d6137600e33e4a32cd2ec/gcc%2Fada%2Fadabkend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadabkend.adb?ref=8967ee52ea92c865801d6137600e33e4a32cd2ec", "patch": "@@ -22,15 +22,16 @@\n \n --  This is the version of the Back_End package for back ends written in Ada\n \n-with Atree;    use Atree;\n+with Atree;         use Atree;\n+with Backend_Utils; use Backend_Utils;\n with Debug;\n with Lib;\n-with Opt;      use Opt;\n-with Output;   use Output;\n-with Osint;    use Osint;\n-with Osint.C;  use Osint.C;\n-with Switch.C; use Switch.C;\n-with Types;    use Types;\n+with Opt;           use Opt;\n+with Output;        use Output;\n+with Osint;         use Osint;\n+with Osint.C;       use Osint.C;\n+with Switch.C;      use Switch.C;\n+with Types;         use Types;\n \n with System.OS_Lib; use System.OS_Lib;\n \n@@ -182,48 +183,11 @@ package body Adabkend is\n \n             return;\n \n-         --  Special check, the back-end switch -fno-inline also sets the\n-         --  front end flags to entirely inhibit all inlining. So we store it\n-         --  and set the appropriate flags.\n-\n-         elsif Switch_Chars (First .. Last) = \"fno-inline\" then\n-            Lib.Store_Compilation_Switch (Switch_Chars);\n-            Opt.Disable_FE_Inline := True;\n-            return;\n-\n-         --  Similar processing for -fpreserve-control-flow\n-\n-         elsif Switch_Chars (First .. Last) = \"fpreserve-control-flow\" then\n-            Lib.Store_Compilation_Switch (Switch_Chars);\n-            Opt.Suppress_Control_Flow_Optimizations := True;\n-            return;\n-\n-         --  Recognize -gxxx switches\n-\n-         elsif Switch_Chars (First) = 'g' then\n-            Debugger_Level := 2;\n-\n-            if First < Last then\n-               case Switch_Chars (First + 1) is\n-                  when '0' =>\n-                     Debugger_Level := 0;\n-                  when '1' =>\n-                     Debugger_Level := 1;\n-                  when '2' =>\n-                     Debugger_Level := 2;\n-                  when '3' =>\n-                     Debugger_Level := 3;\n-                  when others =>\n-                     null;\n-               end case;\n-            end if;\n-\n-         elsif Switch_Chars (First .. Last) = \"S\" then\n-            Generate_Asm := True;\n-\n          --  Ignore all other back-end switches\n \n-         elsif Is_Back_End_Switch (Switch_Chars) then\n+         elsif Scan_Common_Back_End_Switch (Switch_Chars)\n+            or else Is_Back_End_Switch (Switch_Chars)\n+         then\n             null;\n \n          --  Give error for junk switch"}, {"sha": "abbd5eda3551662ddeaa3ab490d6706b01508958", "filename": "gcc/ada/back_end.adb", "status": "modified", "additions": 32, "deletions": 63, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8967ee52ea92c865801d6137600e33e4a32cd2ec/gcc%2Fada%2Fback_end.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8967ee52ea92c865801d6137600e33e4a32cd2ec/gcc%2Fada%2Fback_end.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fback_end.adb?ref=8967ee52ea92c865801d6137600e33e4a32cd2ec", "patch": "@@ -25,23 +25,24 @@\n \n --  This is the version of the Back_End package for GCC back ends\n \n-with Atree;    use Atree;\n-with Debug;    use Debug;\n-with Elists;   use Elists;\n-with Errout;   use Errout;\n-with Lib;      use Lib;\n-with Osint;    use Osint;\n-with Opt;      use Opt;\n-with Osint.C;  use Osint.C;\n-with Namet;    use Namet;\n-with Nlists;   use Nlists;\n-with Stand;    use Stand;\n-with Sinput;   use Sinput;\n-with Stringt;  use Stringt;\n-with Switch;   use Switch;\n-with Switch.C; use Switch.C;\n-with System;   use System;\n-with Types;    use Types;\n+with Atree;         use Atree;\n+with Backend_Utils; use Backend_Utils;\n+with Debug;         use Debug;\n+with Elists;        use Elists;\n+with Errout;        use Errout;\n+with Lib;           use Lib;\n+with Osint;         use Osint;\n+with Opt;           use Opt;\n+with Osint.C;       use Osint.C;\n+with Namet;         use Namet;\n+with Nlists;        use Nlists;\n+with Stand;         use Stand;\n+with Sinput;        use Sinput;\n+with Stringt;       use Stringt;\n+with Switch;        use Switch;\n+with Switch.C;      use Switch.C;\n+with System;        use System;\n+with Types;         use Types;\n \n with System.OS_Lib; use System.OS_Lib;\n \n@@ -266,52 +267,20 @@ package body Back_End is\n          --  specific switches that the Ada front-end knows about.\n \n          else\n-            Store_Compilation_Switch (Switch_Chars);\n-\n-            --  For gcc back ends, -fno-inline disables Inline pragmas only,\n-            --  not Inline_Always to remain consistent with the always_inline\n-            --  attribute behavior.\n-\n-            if Switch_Chars (First .. Last) = \"fno-inline\" then\n-               Opt.Disable_FE_Inline := True;\n-\n-            --  Back end switch -fpreserve-control-flow also sets the front end\n-            --  flag that inhibits improper control flow transformations.\n-\n-            elsif Switch_Chars (First .. Last) = \"fpreserve-control-flow\" then\n-               Opt.Suppress_Control_Flow_Optimizations := True;\n-\n-            --  Back end switch -fdiagnostics-format=json tells the frontend to\n-            --  output its error and warning messages in the same format GCC\n-            --  uses when passed -fdiagnostics-format=json.\n-\n-            elsif Switch_Chars (First .. Last) = \"fdiagnostics-format=json\"\n-            then\n-               Opt.JSON_Output := True;\n-\n-            --  Back end switch -fdump-scos, which exists primarily for C, is\n-            --  also accepted for Ada as a synonym of -gnateS.\n-\n-            elsif Switch_Chars (First .. Last) = \"fdump-scos\" then\n-               Opt.Generate_SCO := True;\n-               Opt.Generate_SCO_Instance_Table := True;\n-\n-            elsif Switch_Chars (First) = 'g' then\n-               Debugger_Level := 2;\n-\n-               if First < Last then\n-                  case Switch_Chars (First + 1) is\n-                     when '0' =>\n-                        Debugger_Level := 0;\n-                     when '1' =>\n-                        Debugger_Level := 1;\n-                     when '2' =>\n-                        Debugger_Level := 2;\n-                     when '3' =>\n-                        Debugger_Level := 3;\n-                     when others =>\n-                        null;\n-                  end case;\n+\n+            if not Scan_Common_Back_End_Switch (Switch_Chars) then\n+\n+               --  Store compilation switch, as Scan_Common_Back_End_Switch\n+               --  only stores switches it recognizes.\n+\n+               Store_Compilation_Switch (Switch_Chars);\n+\n+               --  Back end switch -fdump-scos, which exists primarily for C,\n+               --  is also accepted for Ada as a synonym of -gnateS.\n+\n+               if Switch_Chars (First .. Last) = \"fdump-scos\" then\n+                  Opt.Generate_SCO := True;\n+                  Opt.Generate_SCO_Instance_Table := True;\n                end if;\n             end if;\n          end if;"}, {"sha": "6f492fd4edc3021686685080a901b921b74239cd", "filename": "gcc/ada/backend_utils.adb", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8967ee52ea92c865801d6137600e33e4a32cd2ec/gcc%2Fada%2Fbackend_utils.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8967ee52ea92c865801d6137600e33e4a32cd2ec/gcc%2Fada%2Fbackend_utils.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbackend_utils.adb?ref=8967ee52ea92c865801d6137600e33e4a32cd2ec", "patch": "@@ -0,0 +1,96 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                         B A C K E N D _ U T I L S                        --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--          Copyright (C) 2021-2021, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n+-- http://www.gnu.org/licenses for a complete copy of the license.          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with Lib;\n+with Opt;    use Opt;\n+with Switch; use Switch;\n+\n+package body Backend_Utils is\n+\n+   ---------------------------------\n+   -- Scan_Common_Back_End_Switch --\n+   ---------------------------------\n+\n+   function Scan_Common_Back_End_Switch (Switch_Chars : String) return Boolean\n+   is\n+      First : constant Positive := Switch_Chars'First + 1;\n+      Last  : constant Natural  := Switch_Last (Switch_Chars);\n+   begin\n+\n+      --  Recognize -gxxx switches\n+\n+      if Switch_Chars (First) = 'g' then\n+         Debugger_Level := 2;\n+\n+         if First < Last then\n+            case Switch_Chars (First + 1) is\n+               when '0' =>\n+                  Debugger_Level := 0;\n+               when '1' =>\n+                  Debugger_Level := 1;\n+               when '2' =>\n+                  Debugger_Level := 2;\n+               when '3' =>\n+                  Debugger_Level := 3;\n+               when others =>\n+                  null;\n+            end case;\n+         end if;\n+\n+      --  Back end switch -fdiagnostics-format=json tells the frontend to\n+      --  output its error and warning messages in the same format GCC\n+      --  uses when passed -fdiagnostics-format=json.\n+\n+      elsif Switch_Chars (First .. Last) = \"fdiagnostics-format=json\" then\n+         Opt.JSON_Output := True;\n+\n+      --  Back-end switch -fno-inline also sets the front end flags to entirely\n+      --  inhibit all inlining. So we store it and set the appropriate\n+      --  flags.\n+      --  For gcc back ends, -fno-inline disables Inline pragmas only,\n+      --  not Inline_Always to remain consistent with the always_inline\n+      --  attribute behavior.\n+\n+      elsif Switch_Chars (First .. Last) = \"fno-inline\" then\n+         Opt.Disable_FE_Inline := True;\n+\n+      --  Back end switch -fpreserve-control-flow also sets the front end\n+      --  flag that inhibits improper control flow transformations.\n+\n+      elsif Switch_Chars (First .. Last) = \"fpreserve-control-flow\" then\n+         Opt.Suppress_Control_Flow_Optimizations := True;\n+\n+      elsif Switch_Chars (First .. Last) = \"S\" then\n+         Generate_Asm := True;\n+\n+      else\n+         return False;\n+      end if;\n+\n+      Lib.Store_Compilation_Switch (Switch_Chars);\n+      return True;\n+   end Scan_Common_Back_End_Switch;\n+\n+end Backend_Utils;"}, {"sha": "71321ef6182c00a95435391bf55b54333d59a422", "filename": "gcc/ada/backend_utils.ads", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8967ee52ea92c865801d6137600e33e4a32cd2ec/gcc%2Fada%2Fbackend_utils.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8967ee52ea92c865801d6137600e33e4a32cd2ec/gcc%2Fada%2Fbackend_utils.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbackend_utils.ads?ref=8967ee52ea92c865801d6137600e33e4a32cd2ec", "patch": "@@ -0,0 +1,36 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                         B A C K E N D _ U T I L S                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--          Copyright (C) 2021-2021, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n+-- http://www.gnu.org/licenses for a complete copy of the license.          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Procedures and functions used by both the Adabkend and Back_End packages.\n+\n+package Backend_Utils is\n+\n+   function Scan_Common_Back_End_Switch (Switch_Chars : String) return Boolean;\n+   --  Scan back-end switches which are common to all back-ends and have an\n+   --  effect in the front-end. Call Store_Compilation_Switch and return True\n+   --  if Switch_Chars is recognized as a common back end switch. Return False\n+   --  otherwise.\n+\n+end Backend_Utils;"}, {"sha": "c341e2df237a165002519ffe415003836162c438", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8967ee52ea92c865801d6137600e33e4a32cd2ec/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8967ee52ea92c865801d6137600e33e4a32cd2ec/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=8967ee52ea92c865801d6137600e33e4a32cd2ec", "patch": "@@ -298,6 +298,7 @@ GNAT_ADA_OBJS =\t\\\n  ada/alloc.o\t\\\n  ada/aspects.o  \\\n  ada/atree.o\t\\\n+ ada/backend_utils.o\t\\\n  ada/butil.o\t\\\n  ada/casing.o\t\\\n  ada/checks.o\t\\"}]}