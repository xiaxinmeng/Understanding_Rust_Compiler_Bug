{"sha": "5c1817565f2c0f669634fab893d03cc83c215a4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMxODE3NTY1ZjJjMGY2Njk2MzRmYWI4OTNkMDNjYzgzYzIxNWE0Zg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2002-02-25T13:25:11Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2002-02-25T13:25:11Z"}, "message": "gcc.c (init_gcc_specs): Get -shared-libgcc along with -shared to link with shared_name only.\n\n* gcc.c (init_gcc_specs): Get -shared-libgcc along with -shared to\nlink with shared_name only.\n* doc/invoke.texi (Link Options): Document new behavior.\n\nFrom-SVN: r50025", "tree": {"sha": "29cb77e79aa665ff931f60954f69d12aa92ba88f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29cb77e79aa665ff931f60954f69d12aa92ba88f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c1817565f2c0f669634fab893d03cc83c215a4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c1817565f2c0f669634fab893d03cc83c215a4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c1817565f2c0f669634fab893d03cc83c215a4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c1817565f2c0f669634fab893d03cc83c215a4f/comments", "author": null, "committer": null, "parents": [{"sha": "f36bcb2d6bfa52ba2db71bfdff8f247086945fc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f36bcb2d6bfa52ba2db71bfdff8f247086945fc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f36bcb2d6bfa52ba2db71bfdff8f247086945fc2"}], "stats": {"total": 69, "additions": 39, "deletions": 30}, "files": [{"sha": "385826c2a6b8383f5fad8c1da00ad8c1c6cf0258", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1817565f2c0f669634fab893d03cc83c215a4f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1817565f2c0f669634fab893d03cc83c215a4f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c1817565f2c0f669634fab893d03cc83c215a4f", "patch": "@@ -1,3 +1,9 @@\n+2002-02-25  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* gcc.c (init_gcc_specs): Get -shared-libgcc along with -shared to\n+\tlink with shared_name only.\n+\t* doc/invoke.texi (Link Options): Document new behavior.\n+\n 2002-02-25  Aldy Hernandez  <aldyh@redhat.com>\n \n         * c-typeck.c (push_init_level): Handle vectors."}, {"sha": "760c19520189ff4195ea2e848c457db2f9da571e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1817565f2c0f669634fab893d03cc83c215a4f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1817565f2c0f669634fab893d03cc83c215a4f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=5c1817565f2c0f669634fab893d03cc83c215a4f", "patch": "@@ -4428,15 +4428,26 @@ of these is when the application wishes to throw and catch exceptions\n across different shared libraries.  In that case, each of the libraries\n as well as the application itself should use the shared @file{libgcc}.\n \n-Therefore, whenever you specify the @option{-shared} option, the GCC\n-driver automatically adds @option{-shared-libgcc}, unless you explicitly\n-specify @option{-static-libgcc}.  The G++ driver automatically adds\n-@option{-shared-libgcc} when you build a main executable as well because\n-for C++ programs that is typically the right thing to do.\n-(Exception-handling will not work reliably otherwise.)\n-\n-However, when linking a main executable written in C, you must\n-explicitly say @option{-shared-libgcc} if you want to use the shared\n+Therefore, the G++ and GCJ drivers automatically add\n+@option{-shared-libgcc} whenever you build a shared library or a main\n+executable, because C++ and Java programs typically use exceptions, so\n+this is the right thing to do.\n+\n+If, instead, you use the GCC driver to create shared libraries, you may\n+find that they will not always be linked with the shared @file{libgcc}.\n+If GCC finds, at its configuration time, that you have a GNU linker that\n+does not support option @option{--eh-frame-hdr}, it will link the shared\n+version of @file{libgcc} into shared libraries by default.  Otherwise,\n+it will take advantage of the linker and optimize away the linking with\n+the shared version of @file{libgcc}, linking with the static version of\n+libgcc by default.  This allows exceptions to propagate through such\n+shared libraries, without incurring relocation costs at library load\n+time.\n+\n+However, if a library or main executable is supposed to throw or catch\n+exceptions, you must link it using the G++ or GCJ driver, as appropriate\n+for the languages used in the program, or using the option\n+@option{-shared-libgcc}, such that it is linked with the shared\n @file{libgcc}.\n \n @item -symbolic"}, {"sha": "267bfa3195746c08c16659e75917668283dae208", "filename": "gcc/gcc.c", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1817565f2c0f669634fab893d03cc83c215a4f/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1817565f2c0f669634fab893d03cc83c215a4f/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=5c1817565f2c0f669634fab893d03cc83c215a4f", "patch": "@@ -1414,31 +1414,23 @@ init_gcc_specs (obstack, shared_name, static_name, eh_name)\n      const char *static_name;\n      const char *eh_name;\n {\n-  char buffer[128];\n-  const char *p;\n+  char *buf;\n \n-  /* If we see -shared-libgcc, then use the shared version.  */\n-  sprintf (buffer, \"%%{shared-libgcc:%s %s}\", shared_name, static_name);\n-  obstack_grow (obstack, buffer, strlen (buffer));\n-  /* If we see -static-libgcc, then use the static version.  */\n-  sprintf (buffer, \"%%{static-libgcc:%s %s}\", static_name, eh_name);\n-  obstack_grow (obstack, buffer, strlen (buffer));\n-  /* Otherwise, if we see -shared, then use the shared version\n-     if using EH registration routines or static version without\n-     exception handling routines otherwise.  */\n-  p = \"%{!shared-libgcc:%{!static-libgcc:%{shared:\";\n-  obstack_grow (obstack, p, strlen (p));\n+  buf = concat (\"%{!shared:%{!shared-libgcc:\", static_name, \" \",\n+\t\teh_name, \"}%{shared-libgcc:\", shared_name, \" \",\n+\t\tstatic_name, \"}}\",\n+\t\t\"%{shared:%{static-libgcc:\", static_name, \" \",\n+\t\teh_name, \"}%{!static-libgcc:\",\n #ifdef LINK_EH_SPEC\n-  sprintf (buffer, \"%s}}}\", static_name);\n+\t\t\"%{shared-libgcc:\", shared_name,\n+\t\t\"}%{!shared-libgcc:\", static_name, \"}\",\n #else\n-  sprintf (buffer, \"%s}}}\", shared_name);\n+\t\tshared_name,\n #endif\n-  obstack_grow (obstack, buffer, strlen (buffer));\n-  /* Otherwise, use the static version.  */\n-  sprintf (buffer, \n-\t   \"%%{!shared-libgcc:%%{!static-libgcc:%%{!shared:%s %s}}}\", \n-\t   static_name, eh_name);\n-  obstack_grow (obstack, buffer, strlen (buffer));\n+\t\t\"}}\", NULL);\n+\n+  obstack_grow (obstack, buf, strlen (buf));\n+  free (buf);\n }\n #endif /* ENABLE_SHARED_LIBGCC */\n "}]}