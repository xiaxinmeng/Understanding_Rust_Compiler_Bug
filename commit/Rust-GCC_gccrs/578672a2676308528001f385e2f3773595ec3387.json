{"sha": "578672a2676308528001f385e2f3773595ec3387", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc4NjcyYTI2NzYzMDg1MjgwMDFmMzg1ZTJmMzc3MzU5NWVjMzM4Nw==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@TechFak.Uni-Bielefeld.DE", "date": "2001-08-02T12:26:00Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2001-08-02T12:26:00Z"}, "message": "re PR java/227 (mips-tfile:internal error (when compiling java code))\n\n\t* gcc.c (set_collect_gcc_options): New function, split out from\n\tmain.\n\tIgnore elided switches.\n\t(do_spec_1): Invoke before executing command.\n\t(set_input): Export.\n\tMove declaration ...\n\t* gcc.h (set_input): ... here.\n\t* config/alpha/osf.h (ASM_FINAL_SPEC): Use %U.s to refer to input\n\tfile.\n\n\tjava:\n\t* jvspec.c (jvgenmain_spec): Cannot use %umain, breaks\n\tASM_FINAL_SPEC.\n\t(lang_specific_pre_link): Use set_input to set input_filename.\n\tAppend `main' here.\n\t* jvgenmain.c (usage): Append literal `main' to CLASSNAME.\n\t(main): Fix definition.\n\tStrip `main' from classname.\n\tFixes PR java/227.\n\nFrom-SVN: r44572", "tree": {"sha": "9d31c155fc6533acc82d406f6aeb96eb7ad549f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d31c155fc6533acc82d406f6aeb96eb7ad549f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/578672a2676308528001f385e2f3773595ec3387", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/578672a2676308528001f385e2f3773595ec3387", "html_url": "https://github.com/Rust-GCC/gccrs/commit/578672a2676308528001f385e2f3773595ec3387", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/578672a2676308528001f385e2f3773595ec3387/comments", "author": null, "committer": null, "parents": [{"sha": "1dbb6023c73cfb340b24d8c81cf31f41f8f1805b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dbb6023c73cfb340b24d8c81cf31f41f8f1805b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dbb6023c73cfb340b24d8c81cf31f41f8f1805b"}], "stats": {"total": 170, "additions": 110, "deletions": 60}, "files": [{"sha": "59f1526e94c96e910bd825154aadd52a035f0c82", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/578672a2676308528001f385e2f3773595ec3387/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/578672a2676308528001f385e2f3773595ec3387/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=578672a2676308528001f385e2f3773595ec3387", "patch": "@@ -1,3 +1,15 @@\n+2001-08-02  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n+\n+\t* gcc.c (set_collect_gcc_options): New function, split out from\n+\tmain.\n+\tIgnore elided switches.\n+\t(do_spec_1): Invoke before executing command.\n+\t(set_input): Export.\n+\tMove declaration ...\n+\t* gcc.h (set_input): ... here.\n+\t* config/alpha/osf.h (ASM_FINAL_SPEC): Use %U.s to refer to input\n+\tfile.\n+\n 2001-08-02  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tKill -fhonor-std."}, {"sha": "4386f561bc653c18a277f7a75f3a832ba3267996", "filename": "gcc/config/alpha/osf.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/578672a2676308528001f385e2f3773595ec3387/gcc%2Fconfig%2Falpha%2Fosf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/578672a2676308528001f385e2f3773595ec3387/gcc%2Fconfig%2Falpha%2Fosf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fosf.h?ref=578672a2676308528001f385e2f3773595ec3387", "patch": "@@ -121,7 +121,7 @@ Boston, MA 02111-1307, USA.  */\n \t\t%{K: -I %b.o~} \\\n \t\t%{!K: %{save-temps: -I %b.o~}} \\\n \t\t%{c:%W{o*}%{!o*:-o %b.o}}%{!c:-o %U.o} \\\n-\t\t%{.s:%i} %{!.s:%g.s}}}\"\n+\t\t%{.s:%i} %{!.s:%U.s}}}\"\n \n #else\n #define ASM_FINAL_SPEC \"\\\n@@ -130,7 +130,7 @@ Boston, MA 02111-1307, USA.  */\n \t\t%{K: -I %b.o~} \\\n \t\t%{!K: %{save-temps: -I %b.o~}} \\\n \t\t%{c:%W{o*}%{!o*:-o %b.o}}%{!c:-o %U.o} \\\n-\t\t%{.s:%i} %{!.s:%g.s}}}\"\n+\t\t%{.s:%i} %{!.s:%U.s}}}\"\n \n #endif\n "}, {"sha": "ed86fa0c2f2a6b195a08ac85d30c1d851c15f4f8", "filename": "gcc/gcc.c", "status": "modified", "additions": 61, "deletions": 48, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/578672a2676308528001f385e2f3773595ec3387/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/578672a2676308528001f385e2f3773595ec3387/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=578672a2676308528001f385e2f3773595ec3387", "patch": "@@ -289,6 +289,7 @@ static void clear_failure_queue PARAMS ((void));\n static int check_live_switch\tPARAMS ((int, int));\n static const char *handle_braces PARAMS ((const char *));\n static char *save_string\tPARAMS ((const char *, int));\n+static void set_collect_gcc_options PARAMS ((void));\n static int do_spec_1\t\tPARAMS ((const char *, int, const char *));\n static const char *find_file\tPARAMS ((const char *));\n static int is_directory\t\tPARAMS ((const char *, const char *, int));\n@@ -312,7 +313,6 @@ static void process_command\t\tPARAMS ((int, const char *const *));\n static int execute\t\t\tPARAMS ((void));\n static void clear_args\t\t\tPARAMS ((void));\n static void fatal_error\t\t\tPARAMS ((int));\n-static void set_input\t\t\tPARAMS ((const char *));\n static void init_gcc_specs              PARAMS ((struct obstack *,\n \t\t\t\t\t\t const char *,\n \t\t\t\t\t\t const char *));\n@@ -3960,6 +3960,63 @@ process_command (argc, argv)\n   switches[n_switches].part1 = 0;\n   infiles[n_infiles].name = 0;\n }\n+\n+/* Store switches not filtered out but %{<S} in spec in COLLECT_GCC_OPTIONS\n+   and place that in the environment.  */\n+\n+static void\n+set_collect_gcc_options ()\n+{\n+  int i;\n+  int first_time;\n+\n+  /* Build COLLECT_GCC_OPTIONS to have all of the options specified to\n+     the compiler.  */\n+  obstack_grow (&collect_obstack, \"COLLECT_GCC_OPTIONS=\",\n+\t\tsizeof (\"COLLECT_GCC_OPTIONS=\") - 1);\n+\n+  first_time = TRUE;\n+  for (i = 0; (int) i < n_switches; i++)\n+    {\n+      const char *const *args;\n+      const char *p, *q;\n+      if (!first_time)\n+\tobstack_grow (&collect_obstack, \" \", 1);\n+\n+      first_time = FALSE;\n+\n+      /* Ignore elided switches.  */\n+      if (switches[i].live_cond == SWITCH_IGNORE)\n+\tcontinue;\n+\n+      obstack_grow (&collect_obstack, \"'-\", 2);\n+      q = switches[i].part1;\n+      while ((p = strchr (q, '\\'')))\n+\t{\n+\t  obstack_grow (&collect_obstack, q, p - q);\n+\t  obstack_grow (&collect_obstack, \"'\\\\''\", 4);\n+\t  q = ++p;\n+\t}\n+      obstack_grow (&collect_obstack, q, strlen (q));\n+      obstack_grow (&collect_obstack, \"'\", 1);\n+\n+      for (args = switches[i].args; args && *args; args++)\n+\t{\n+\t  obstack_grow (&collect_obstack, \" '\", 2);\n+\t  q = *args;\n+\t  while ((p = strchr (q, '\\'')))\n+\t    {\n+\t      obstack_grow (&collect_obstack, q, p - q);\n+\t      obstack_grow (&collect_obstack, \"'\\\\''\", 4);\n+\t      q = ++p;\n+\t    }\n+\t  obstack_grow (&collect_obstack, q, strlen (q));\n+\t  obstack_grow (&collect_obstack, \"'\", 1);\n+\t}\n+    }\n+  obstack_grow (&collect_obstack, \"\\0\", 1);\n+  putenv (obstack_finish (&collect_obstack));\n+}\n \f\n /* Process a spec string, accumulating and running commands.  */\n \n@@ -4103,6 +4160,8 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t      argbuf_index--;\n \t  }\n \n+\tset_collect_gcc_options ();\n+\n \tif (argbuf_index > 0)\n \t  {\n \t    value = execute ();\n@@ -5486,7 +5545,7 @@ is_directory (path1, path2, linker)\n /* Set up the various global variables to indicate that we're processing\n    the input file named FILENAME.  */\n \n-static void\n+void\n set_input (filename)\n      const char *filename;\n {\n@@ -5659,52 +5718,6 @@ main (argc, argv)\n \n   process_command (argc, argv);\n \n-  {\n-    int first_time;\n-\n-    /* Build COLLECT_GCC_OPTIONS to have all of the options specified to\n-       the compiler.  */\n-    obstack_grow (&collect_obstack, \"COLLECT_GCC_OPTIONS=\",\n-\t\t  sizeof (\"COLLECT_GCC_OPTIONS=\") - 1);\n-\n-    first_time = TRUE;\n-    for (i = 0; (int) i < n_switches; i++)\n-      {\n-\tconst char *const *args;\n-\tconst char *p, *q;\n-\tif (!first_time)\n-\t  obstack_grow (&collect_obstack, \" \", 1);\n-\n-\tfirst_time = FALSE;\n-\tobstack_grow (&collect_obstack, \"'-\", 2);\n-\tq = switches[i].part1;\n-\twhile ((p = strchr (q, '\\'')))\n-\t  {\n-\t    obstack_grow (&collect_obstack, q, p - q);\n-\t    obstack_grow (&collect_obstack, \"'\\\\''\", 4);\n-\t    q = ++p;\n-\t  }\n-\tobstack_grow (&collect_obstack, q, strlen (q));\n-\tobstack_grow (&collect_obstack, \"'\", 1);\n-\n-\tfor (args = switches[i].args; args && *args; args++)\n-\t  {\n-\t    obstack_grow (&collect_obstack, \" '\", 2);\n-\t    q = *args;\n-\t    while ((p = strchr (q, '\\'')))\n-\t      {\n-\t\tobstack_grow (&collect_obstack, q, p - q);\n-\t\tobstack_grow (&collect_obstack, \"'\\\\''\", 4);\n-\t\tq = ++p;\n-\t      }\n-\t    obstack_grow (&collect_obstack, q, strlen (q));\n-\t    obstack_grow (&collect_obstack, \"'\", 1);\n-\t  }\n-      }\n-    obstack_grow (&collect_obstack, \"\\0\", 1);\n-    putenv (obstack_finish (&collect_obstack));\n-  }\n-\n   /* Initialize the vector of specs to just the default.\n      This means one element containing 0s, as a terminator.  */\n "}, {"sha": "55a79a90fa950964268227c6331660c57a49d872", "filename": "gcc/gcc.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/578672a2676308528001f385e2f3773595ec3387/gcc%2Fgcc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/578672a2676308528001f385e2f3773595ec3387/gcc%2Fgcc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.h?ref=578672a2676308528001f385e2f3773595ec3387", "patch": "@@ -1,5 +1,5 @@\n /* Header file for modules that link with gcc.c\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -33,6 +33,7 @@ extern void fatal PARAMS ((const char *, ...))\n      ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n extern void error PARAMS ((const char *, ...)) ATTRIBUTE_PRINTF_1;\n extern void pfatal_with_name PARAMS ((const char *)) ATTRIBUTE_NORETURN;\n+extern void set_input PARAMS ((const char *));\n \n /* Spec files linked with gcc.c must provide definitions for these. */\n "}, {"sha": "24f5c40ee8e75883335dd9a3539ca54d1b189c05", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/578672a2676308528001f385e2f3773595ec3387/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/578672a2676308528001f385e2f3773595ec3387/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=578672a2676308528001f385e2f3773595ec3387", "patch": "@@ -22,6 +22,17 @@\n \tsyntax error encountered during class definition.\n \tFixes PR java/2956\n \n+2001-08-02  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n+\n+\t* jvspec.c (jvgenmain_spec): Cannot use %umain, breaks\n+\tASM_FINAL_SPEC.\n+\t(lang_specific_pre_link): Use set_input to set input_filename.\n+\tAppend `main' here.\n+\t* jvgenmain.c (usage): Append literal `main' to CLASSNAME.\n+\t(main): Fix definition.\n+\tStrip `main' from classname.\n+\tFixes PR java/227.\n+\n 2001-07-18  Tom Tromey  <tromey@redhat.com>\n \n \tFor PR java/2812:"}, {"sha": "9a425715066180edad4b8d8578f8ede0175302ad", "filename": "gcc/java/jvgenmain.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/578672a2676308528001f385e2f3773595ec3387/gcc%2Fjava%2Fjvgenmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/578672a2676308528001f385e2f3773595ec3387/gcc%2Fjava%2Fjvgenmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjvgenmain.c?ref=578672a2676308528001f385e2f3773595ec3387", "patch": "@@ -61,14 +61,14 @@ static void usage (const char *) ATTRIBUTE_NORETURN;\n static void\n usage (const char *name)\n {\n-  fprintf (stderr, \"Usage: %s [OPTIONS]... CLASSNAME [OUTFILE]\\n\", name);\n+  fprintf (stderr, \"Usage: %s [OPTIONS]... CLASSNAMEmain [OUTFILE]\\n\", name);\n   exit (1);\n }\n \n int\n-main (int argc, const char **argv)\n+main (int argc, char **argv)\n {\n-  const char *classname;\n+  char *classname, *p;\n   FILE *stream;\n   const char *mangled_classname;\n   int i, last_arg;\n@@ -92,6 +92,13 @@ main (int argc, const char **argv)\n \n   classname = argv[i];\n \n+  /* gcj always appends `main' to classname.  We need to strip this here.  */\n+  p = strrchr (classname, 'm');\n+  if (p == NULL || p == classname || strcmp (p, \"main\") != 0)\n+    usage (argv[0]);\n+  else\n+    *p = '\\0';\n+\n   gcc_obstack_init (mangle_obstack);\n   mangled_classname = do_mangle_classname (classname);\n "}, {"sha": "761c580310dc7714a6aa058dc3b5717db901fee3", "filename": "gcc/java/jvspec.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/578672a2676308528001f385e2f3773595ec3387/gcc%2Fjava%2Fjvspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/578672a2676308528001f385e2f3773595ec3387/gcc%2Fjava%2Fjvspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjvspec.c?ref=578672a2676308528001f385e2f3773595ec3387", "patch": "@@ -52,8 +52,8 @@ int lang_specific_extra_outfiles = 0;\n int shared_libgcc = 1;\n \n const char jvgenmain_spec[] =\n-  \"jvgenmain %{D*} %i %{!pipe:%umain.i} |\\n\\\n-   cc1 %{!pipe:%Umain.i} %1 \\\n+  \"jvgenmain %{D*} %b %{!pipe:%u.i} |\\n\\\n+   cc1 %{!pipe:%U.i} %1 \\\n \t\t   %{!Q:-quiet} -dumpbase %b.c %{d*} %{m*} %{a*}\\\n \t\t   %{g*} %{O*} \\\n \t\t   %{v:-version} %{pg:-p} %{p}\\\n@@ -68,8 +68,8 @@ const char jvgenmain_spec[] =\n \t\t   %{f*} -fdollars-in-identifiers\\\n \t\t   %{aux-info*}\\\n \t\t   %{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n-\t\t   %{S:%W{o*}%{!o*:-o %b.s}}%{!S:-o %{|!pipe:%Umain.s}} |\\n\\\n-              %{!S:as %a %Y -o %d%w%umain%O %{!pipe:%Umain.s} %A\\n }\";\n+\t\t   %{S:%W{o*}%{!o*:-o %b.s}}%{!S:-o %{|!pipe:%U.s}} |\\n\\\n+              %{!S:as %a %Y -o %d%w%u%O %{!pipe:%U.s} %A\\n }\";\n \n /* Return full path name of spec file if it is in DIR, or NULL if\n    not.  */\n@@ -529,8 +529,14 @@ lang_specific_pre_link ()\n   int err;\n   if (main_class_name == NULL)\n     return 0;\n-  input_filename = main_class_name;\n-  input_filename_length = strlen (main_class_name);\n+  /* Append `main' to make the filename unique and allow\n+\n+\tgcj --main=hello -save-temps hello.java\n+\n+     to work.  jvgenmain needs to strip this `main' to arrive at the correct\n+     class name.  Append dummy `.c' that can be stripped by set_input so %b\n+     is correct.  */ \n+  set_input (concat (main_class_name, \"main.c\", NULL));\n   err = do_spec (jvgenmain_spec);\n   if (err == 0)\n     {"}]}