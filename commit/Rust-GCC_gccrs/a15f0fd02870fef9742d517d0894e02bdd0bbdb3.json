{"sha": "a15f0fd02870fef9742d517d0894e02bdd0bbdb3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTE1ZjBmZDAyODcwZmVmOTc0MmQ1MTdkMDg5NGUwMmJkZDBiYmRiMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-02-27T09:09:05Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-02-27T09:09:05Z"}, "message": "re PR c++/35368 (With #pragma visibility, `vtable for __cxxabiv1::__class_type_info' is emitted as a hidden-visibility relocation)\n\n\tPR c++/35368\n\t* rtti.c: Include c-pragma.h.\n\t(push_abi_namespace, pop_abi_namespace): New functions.\n\t(build_dynamic_cast_1, tinfo_base_init, get_pseudo_ti_index,\n\tcreate_tinfo_types, emit_support_tinfos): Use them.\n\t* Make-lang.in (cp/rtti.o): Depend on $(C_PRAGMA_H).\n\n\t* g++.dg/ext/visibility/typeinfo2.C: New test.\n\t* g++.dg/ext/visibility/typeinfo3.C: New test.\n\nFrom-SVN: r132704", "tree": {"sha": "97535cb1416f0c61b24f8abab63efa4d6d05f959", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97535cb1416f0c61b24f8abab63efa4d6d05f959"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a15f0fd02870fef9742d517d0894e02bdd0bbdb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a15f0fd02870fef9742d517d0894e02bdd0bbdb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a15f0fd02870fef9742d517d0894e02bdd0bbdb3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a15f0fd02870fef9742d517d0894e02bdd0bbdb3/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a25a8f3be322fe0f838947b679f73d6efc2a412c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a25a8f3be322fe0f838947b679f73d6efc2a412c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a25a8f3be322fe0f838947b679f73d6efc2a412c"}], "stats": {"total": 99, "additions": 86, "deletions": 13}, "files": [{"sha": "fe719cdf03205c01b0c14342b489d84ef34a02ba", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f0fd02870fef9742d517d0894e02bdd0bbdb3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f0fd02870fef9742d517d0894e02bdd0bbdb3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a15f0fd02870fef9742d517d0894e02bdd0bbdb3", "patch": "@@ -1,3 +1,12 @@\n+2008-02-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/35368\n+\t* rtti.c: Include c-pragma.h.\n+\t(push_abi_namespace, pop_abi_namespace): New functions.\n+\t(build_dynamic_cast_1, tinfo_base_init, get_pseudo_ti_index,\n+\tcreate_tinfo_types, emit_support_tinfos): Use them.\n+\t* Make-lang.in (cp/rtti.o): Depend on $(C_PRAGMA_H).\n+\n 2008-02-26  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/35315"}, {"sha": "6207ed13dd67178515dfa9a93551efdbc9010226", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f0fd02870fef9742d517d0894e02bdd0bbdb3/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f0fd02870fef9742d517d0894e02bdd0bbdb3/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=a15f0fd02870fef9742d517d0894e02bdd0bbdb3", "patch": "@@ -264,7 +264,7 @@ cp/tree.o: cp/tree.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) toplev.h $(RTL_H) \\\n   $(TARGET_H) debug.h $(TREE_FLOW_H)\n cp/ptree.o: cp/ptree.c $(CXX_TREE_H) $(TM_H)\n cp/rtti.o: cp/rtti.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) toplev.h convert.h \\\n-  $(TARGET_H) gt-cp-rtti.h\n+  $(TARGET_H) $(C_PRAGMA_H) gt-cp-rtti.h\n cp/except.o: cp/except.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) $(RTL_H) except.h \\\n   toplev.h cp/cfns.h $(EXPR_H) libfuncs.h $(TREE_INLINE_H) $(TARGET_H)\n cp/expr.o: cp/expr.c $(CXX_TREE_H) $(TM_H) $(RTL_H) $(FLAGS_H) $(EXPR_H) \\"}, {"sha": "f2085e4f26ac3a9d3165a067888ef60022ec6c5b", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f0fd02870fef9742d517d0894e02bdd0bbdb3/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f0fd02870fef9742d517d0894e02bdd0bbdb3/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=a15f0fd02870fef9742d517d0894e02bdd0bbdb3", "patch": "@@ -1,6 +1,6 @@\n /* RunTime Type Identification\n    Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n-   2005, 2006, 2007\n+   2005, 2006, 2007, 2008\n    Free Software Foundation, Inc.\n    Mostly written by Jason Merrill (jason@cygnus.com).\n \n@@ -32,6 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"toplev.h\"\n #include \"convert.h\"\n #include \"target.h\"\n+#include \"c-pragma.h\"\n \n /* C++ returns type information to the user in struct type_info\n    objects. We also use type information to implement dynamic_cast and\n@@ -124,6 +125,19 @@ static bool typeinfo_in_lib_p (tree);\n \n static int doing_runtime = 0;\n \f\n+static void\n+push_abi_namespace (void)\n+{\n+  push_nested_namespace (abi_node);\n+  push_visibility (\"default\");\n+}\n+\n+static void\n+pop_abi_namespace (void)\n+{\n+  pop_visibility ();\n+  pop_nested_namespace (abi_node);\n+}\n \n /* Declare language defined type_info type and a pointer to const\n    type_info.  This is incomplete here, and will be completed when\n@@ -669,10 +683,9 @@ build_dynamic_cast_1 (tree type, tree expr)\n \t    {\n \t      tree tmp;\n \t      tree tinfo_ptr;\n-\t      tree ns = abi_node;\n \t      const char *name;\n \n-\t      push_nested_namespace (ns);\n+\t      push_abi_namespace ();\n \t      tinfo_ptr = xref_tag (class_type,\n \t\t\t\t    get_identifier (\"__class_type_info\"),\n \t\t\t\t    /*tag_scope=*/ts_current, false);\n@@ -689,7 +702,7 @@ build_dynamic_cast_1 (tree type, tree expr)\n \t      tmp = build_function_type (ptr_type_node, tmp);\n \t      dcast_fn = build_library_fn_ptr (name, tmp);\n \t      DECL_IS_PURE (dcast_fn) = 1;\n-\t      pop_nested_namespace (ns);\n+\t      pop_abi_namespace ();\n \t      dynamic_cast_node = dcast_fn;\n \t    }\n \t  result = build_cxx_call (dcast_fn, 4, elems);\n@@ -848,10 +861,10 @@ tinfo_base_init (tinfo_s *ti, tree target)\n   if (!vtable_ptr)\n     {\n       tree real_type;\n-      push_nested_namespace (abi_node);\n+      push_abi_namespace ();\n       real_type = xref_tag (class_type, ti->name,\n \t\t\t    /*tag_scope=*/ts_current, false);\n-      pop_nested_namespace (abi_node);\n+      pop_abi_namespace ();\n \n       if (!COMPLETE_TYPE_P (real_type))\n \t{\n@@ -1268,14 +1281,14 @@ get_pseudo_ti_index (tree type)\n \t\t\t\t\t     TK_BASE_TYPE)->type,\n \t\t\t\t  array_domain);\n \n-\t      push_nested_namespace (abi_node);\n+\t      push_abi_namespace ();\n \t      create_pseudo_type_info\n \t\t(ix, \"__vmi_class_type_info\",\n \t\t build_decl (FIELD_DECL, NULL_TREE, integer_type_node),\n \t\t build_decl (FIELD_DECL, NULL_TREE, integer_type_node),\n \t\t build_decl (FIELD_DECL, NULL_TREE, base_array),\n \t\t NULL);\n-\t      pop_nested_namespace (abi_node);\n+\t      pop_abi_namespace ();\n \t      break;\n \t    }\n \t}\n@@ -1298,7 +1311,7 @@ create_tinfo_types (void)\n \n   VEC_safe_grow (tinfo_s, gc, tinfo_descs, TK_FIXED);\n \n-  push_nested_namespace (abi_node);\n+  push_abi_namespace ();\n \n   /* Create the internal type_info structure. This is used as a base for\n      the other structures.  */\n@@ -1376,7 +1389,7 @@ create_tinfo_types (void)\n \tbuild_decl (FIELD_DECL, NULL_TREE, type_info_ptr_type),\n \tNULL);\n \n-  pop_nested_namespace (abi_node);\n+  pop_abi_namespace ();\n }\n \n /* Emit the type_info descriptors which are guaranteed to be in the runtime\n@@ -1404,11 +1417,11 @@ emit_support_tinfos (void)\n   int ix;\n   tree bltn_type, dtor;\n \n-  push_nested_namespace (abi_node);\n+  push_abi_namespace ();\n   bltn_type = xref_tag (class_type,\n \t\t\tget_identifier (\"__fundamental_type_info\"),\n \t\t\t/*tag_scope=*/ts_current, false);\n-  pop_nested_namespace (abi_node);\n+  pop_abi_namespace ();\n   if (!COMPLETE_TYPE_P (bltn_type))\n     return;\n   dtor = CLASSTYPE_DESTRUCTORS (bltn_type);"}, {"sha": "8f652d21218f3744f1432763a1c9c72a557a20ec", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f0fd02870fef9742d517d0894e02bdd0bbdb3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f0fd02870fef9742d517d0894e02bdd0bbdb3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a15f0fd02870fef9742d517d0894e02bdd0bbdb3", "patch": "@@ -2,6 +2,10 @@\n \n \t* gcc.dg/gomp/preprocess-1.c: New test.\n \n+\tPR c++/35368\n+\t* g++.dg/ext/visibility/typeinfo2.C: New test.\n+\t* g++.dg/ext/visibility/typeinfo3.C: New test.\n+\n 2008-02-26  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/bf-ms-attrib.c (main): Return 0."}, {"sha": "54f541d850075a2afb84a712b7584c3e4db8ff38", "filename": "gcc/testsuite/g++.dg/ext/visibility/typeinfo2.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f0fd02870fef9742d517d0894e02bdd0bbdb3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Ftypeinfo2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f0fd02870fef9742d517d0894e02bdd0bbdb3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Ftypeinfo2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Ftypeinfo2.C?ref=a15f0fd02870fef9742d517d0894e02bdd0bbdb3", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/35368\n+// { dg-require-visibility \"\" }\n+\n+#pragma GCC visibility push (hidden)\n+\n+struct A\n+{\n+  A();\n+  virtual ~A() { }\n+};\n+\n+A::A()\n+{\n+}\n+\n+void foo(A *a)\n+{\n+  delete a;\n+}\n+\n+// { dg-final { scan-not-hidden \"_ZTVN10__cxxabiv117__class_type_infoE\" } }\n+// { dg-final { scan-hidden \"_ZTI1A\" } }\n+// { dg-final { scan-hidden \"_ZTV1A\" } }"}, {"sha": "5102b649216bc18974acf62854d662321a83c831", "filename": "gcc/testsuite/g++.dg/ext/visibility/typeinfo3.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f0fd02870fef9742d517d0894e02bdd0bbdb3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Ftypeinfo3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f0fd02870fef9742d517d0894e02bdd0bbdb3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Ftypeinfo3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Ftypeinfo3.C?ref=a15f0fd02870fef9742d517d0894e02bdd0bbdb3", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/35368\n+// { dg-require-visibility \"\" }\n+\n+#pragma GCC visibility push (hidden)\n+\n+#include <typeinfo>\n+\n+const std::type_info& info1 = typeid(int []);\n+const std::type_info& info2 = typeid(int);\n+enum E { e = 0 };\n+const std::type_info& info3 = typeid(E);\n+struct S { S (); };\n+const std::type_info& info4 = typeid(S);\n+const std::type_info& info5 = typeid(int *);\n+\n+// { dg-final { scan-not-hidden \"_ZTVN10__cxxabiv117__array_type_infoE\" } }\n+// { dg-final { scan-not-hidden \"_ZTVN10__cxxabiv116__enum_type_infoE\" } }\n+// { dg-final { scan-hidden \"_ZTI1S\" } }\n+// { dg-final { scan-hidden \"_ZTS1S\" } }\n+// { dg-final { scan-hidden \"info1\" } }\n+// { dg-final { scan-hidden \"info2\" } }\n+// { dg-final { scan-hidden \"info3\" } }\n+// { dg-final { scan-hidden \"info4\" } }\n+// { dg-final { scan-hidden \"info5\" } }"}]}