{"sha": "1184bb7825fa52042b4243b73ca16769033f10e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE4NGJiNzgyNWZhNTIwNDJiNDI0M2I3M2NhMTY3NjkwMzNmMTBlMw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-10-08T17:10:00Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-10-08T17:10:00Z"}, "message": "ipa-polymorphic-call.c (extr_type_from_vtbl_store): Do better pattern matching of MEM_REF.\n\n\n\n\t* ipa-polymorphic-call.c (extr_type_from_vtbl_store): Do better\n\tpattern matching of MEM_REF.\n\t(check_stmt_for_type_change): Update.\n\nFrom-SVN: r216010", "tree": {"sha": "eb288703f5f812013a51e2ee02fed77547fb203c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb288703f5f812013a51e2ee02fed77547fb203c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1184bb7825fa52042b4243b73ca16769033f10e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1184bb7825fa52042b4243b73ca16769033f10e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1184bb7825fa52042b4243b73ca16769033f10e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1184bb7825fa52042b4243b73ca16769033f10e3/comments", "author": null, "committer": null, "parents": [{"sha": "9a7451a5a502f5a2714b06677ce61ecef23539d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a7451a5a502f5a2714b06677ce61ecef23539d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a7451a5a502f5a2714b06677ce61ecef23539d0"}], "stats": {"total": 56, "additions": 42, "deletions": 14}, "files": [{"sha": "eefb8fc31309e9e643175d4f05cccc50ce999d5a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1184bb7825fa52042b4243b73ca16769033f10e3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1184bb7825fa52042b4243b73ca16769033f10e3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1184bb7825fa52042b4243b73ca16769033f10e3", "patch": "@@ -1,3 +1,9 @@\n+2014-10-07  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-polymorphic-call.c (extr_type_from_vtbl_store): Do better\n+\tpattern matching of MEM_REF.\n+\t(check_stmt_for_type_change): Update.\n+\n 2014-10-08  Steve Ellcey  <sellcey@mips.com>\n \n \t* config/mips/linux64.h: Remove."}, {"sha": "51c6709a86555ff0ffc684bc59b696c099ae6cab", "filename": "gcc/ipa-polymorphic-call.c", "status": "modified", "additions": 36, "deletions": 14, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1184bb7825fa52042b4243b73ca16769033f10e3/gcc%2Fipa-polymorphic-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1184bb7825fa52042b4243b73ca16769033f10e3/gcc%2Fipa-polymorphic-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-polymorphic-call.c?ref=1184bb7825fa52042b4243b73ca16769033f10e3", "patch": "@@ -1140,7 +1140,8 @@ noncall_stmt_may_be_vtbl_ptr_store (gimple stmt)\n \n /* If STMT can be proved to be an assignment to the virtual method table\n    pointer of ANALYZED_OBJ and the type associated with the new table\n-   identified, return the type.  Otherwise return NULL_TREE.  */\n+   identified, return the type.  Otherwise return NULL_TREE if type changes\n+   in unknown way or ERROR_MARK_NODE if type is unchanged.  */\n \n static tree\n extr_type_from_vtbl_ptr_store (gimple stmt, struct type_change_info *tci,\n@@ -1167,15 +1168,6 @@ extr_type_from_vtbl_ptr_store (gimple stmt, struct type_change_info *tci,\n   else\n     {\n       base = get_ref_base_and_extent (lhs, &offset, &size, &max_size);\n-      if (offset != tci->offset\n-\t  || size != POINTER_SIZE\n-\t  || max_size != POINTER_SIZE)\n-\t{\n-\t  if (dump_file)\n-\t    fprintf (dump_file, \"    wrong offset %i!=%i or size %i\\n\",\n-\t\t     (int)offset, (int)tci->offset, (int)size);\n-\t  return NULL_TREE;\n-\t}\n       if (DECL_P (tci->instance))\n \t{\n \t  if (base != tci->instance)\n@@ -1193,19 +1185,35 @@ extr_type_from_vtbl_ptr_store (gimple stmt, struct type_change_info *tci,\n \t}\n       else if (TREE_CODE (base) == MEM_REF)\n \t{\n-\t  if (!operand_equal_p (tci->instance, TREE_OPERAND (base, 0), 0)\n-\t      || !integer_zerop (TREE_OPERAND (base, 1)))\n+\t  if (!operand_equal_p (tci->instance, TREE_OPERAND (base, 0), 0))\n \t    {\n \t      if (dump_file)\n \t\t{\n \t\t  fprintf (dump_file, \"    base mem ref:\");\n \t\t  print_generic_expr (dump_file, base, TDF_SLIM);\n-\t\t  fprintf (dump_file, \" has nonzero offset or does not match instance:\");\n+\t\t  fprintf (dump_file, \" does not match instance:\");\n \t\t  print_generic_expr (dump_file, tci->instance, TDF_SLIM);\n \t\t  fprintf (dump_file, \"\\n\");\n \t\t}\n \t      return NULL_TREE;\n \t    }\n+\t  if (!integer_zerop (TREE_OPERAND (base, 1)))\n+\t    {\n+\t      if (!tree_fits_shwi_p (TREE_OPERAND (base, 1)))\n+\t\t{\n+\t\t  if (dump_file)\n+\t\t    {\n+\t\t      fprintf (dump_file, \"    base mem ref:\");\n+\t\t      print_generic_expr (dump_file, base, TDF_SLIM);\n+\t\t      fprintf (dump_file, \" has non-representable offset:\");\n+\t\t      print_generic_expr (dump_file, tci->instance, TDF_SLIM);\n+\t\t      fprintf (dump_file, \"\\n\");\n+\t\t    }\n+\t\t  return NULL_TREE;\n+\t\t}\n+\t      else\n+\t        offset += tree_to_shwi (TREE_OPERAND (base, 1)) * BITS_PER_UNIT;\n+\t    }\n \t}\n       else if (!operand_equal_p (tci->instance, base, 0)\n \t       || tci->offset)\n@@ -1218,7 +1226,19 @@ extr_type_from_vtbl_ptr_store (gimple stmt, struct type_change_info *tci,\n \t      print_generic_expr (dump_file, tci->instance, TDF_SLIM);\n \t      fprintf (dump_file, \" with offset %i\\n\", (int)tci->offset);\n \t    }\n-\t  return NULL_TREE;\n+\t  return tci->offset > GET_MODE_BITSIZE (Pmode) ? error_mark_node : NULL_TREE;\n+\t}\n+      if (offset != tci->offset\n+\t  || size != POINTER_SIZE\n+\t  || max_size != POINTER_SIZE)\n+\t{\n+\t  if (dump_file)\n+\t    fprintf (dump_file, \"    wrong offset %i!=%i or size %i\\n\",\n+\t\t     (int)offset, (int)tci->offset, (int)size);\n+\t  return offset + GET_MODE_BITSIZE (Pmode) <= offset\n+\t         || (max_size != -1\n+\t\t     && tci->offset + GET_MODE_BITSIZE (Pmode) > offset + max_size)\n+\t\t ? error_mark_node : NULL;\n \t}\n     }\n \n@@ -1405,6 +1425,8 @@ check_stmt_for_type_change (ao_ref *ao ATTRIBUTE_UNUSED, tree vdef, void *data)\n \n       type = extr_type_from_vtbl_ptr_store (stmt, tci, &offset);\n       gcc_assert (!type || TYPE_MAIN_VARIANT (type) == type);\n+      if (type == error_mark_node)\n+\treturn false;\n       if (!type)\n \t{\n \t  if (dump_file)"}]}