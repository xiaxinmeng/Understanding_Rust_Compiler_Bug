{"sha": "1a45573d3d7b0098116f4ccde5d9be5d32b5653a", "node_id": "C_kwDOANBUbNoAKDFhNDU1NzNkM2Q3YjAwOTgxMTZmNGNjZGU1ZDliZTVkMzJiNTY1M2E", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2023-02-22T17:35:20Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2023-02-22T17:38:17Z"}, "message": "testsuite: Accept pmf-vbit-in-delta extra warning\n\ncp_build_binary_op, that issues -Waddress warnings, issues an extra\nwarning on arm targets, that g++.dg/warn/Waddress-5.C does not expect\nwhen comparing a pointer-to-member-function literal with null.\n\nThe reason for the extra warning is that, on arm targets,\nTARGET_PTRMEMFUNC_VBIT_LOCATION == ptrmemfunc_vbit_in_delta, which\ncauses a different path to be taken, that extracts the\npointer-to-function and the delta fields (minus the vbit) and compares\neach one with zero.  It's when comparing this pointer-to-function with\nzero, in a recursive cp_build_binary_op, that another warning is\nissued.\n\nI suppose there should be a way to skip the warning in this recursive\ncall, without disabling other warnings that might be issued there, but\nthis patch only arranges for the test to tolerate the extra warning.\n\n\nfor  gcc/testsuite/ChangeLog\n\n\t* g++.dg/warn/Waddress-5.C: Tolerate extra -Waddress warning.", "tree": {"sha": "737e7c6283c1c42a7ad1aa8734c237ff30f82917", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/737e7c6283c1c42a7ad1aa8734c237ff30f82917"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a45573d3d7b0098116f4ccde5d9be5d32b5653a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a45573d3d7b0098116f4ccde5d9be5d32b5653a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a45573d3d7b0098116f4ccde5d9be5d32b5653a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a45573d3d7b0098116f4ccde5d9be5d32b5653a/comments", "author": null, "committer": null, "parents": [{"sha": "d70f49e98245f80fcf8b2e68a9f06955f52e1de7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d70f49e98245f80fcf8b2e68a9f06955f52e1de7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d70f49e98245f80fcf8b2e68a9f06955f52e1de7"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "1de88076f7767d769acb185ece6647adc3d0036b", "filename": "gcc/testsuite/g++.dg/warn/Waddress-5.C", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a45573d3d7b0098116f4ccde5d9be5d32b5653a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWaddress-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a45573d3d7b0098116f4ccde5d9be5d32b5653a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWaddress-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWaddress-5.C?ref=1a45573d3d7b0098116f4ccde5d9be5d32b5653a", "patch": "@@ -23,7 +23,11 @@ void T (bool);\n void warn_memptr_if ()\n {\n   // Exercise warnings for addresses of nonstatic member functions.\n-  if (&A::f == 0)         // { dg-warning \"the address '&A::f'\" }\n+  // On targets with TARGET_PTRMEMFUNC_VBIT_LOCATION ==\n+  // ptrmemfunc_vbit_in_delta, cp_build_binary_op recurses to compare\n+  // the pfn from the ptrmemfunc with null, so we get two warnings.\n+  // This matches both.  ??? Should we disable one of them?\n+  if (&A::f == 0)         // { dg-warning \"A::f\" }\n     T (0);\n \n   if (&A::vf)             // { dg-warning \"-Waddress\" }"}]}