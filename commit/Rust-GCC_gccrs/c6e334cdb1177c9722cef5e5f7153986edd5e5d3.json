{"sha": "c6e334cdb1177c9722cef5e5f7153986edd5e5d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZlMzM0Y2RiMTE3N2M5NzIyY2VmNWU1ZjcxNTM5ODZlZGQ1ZTVkMw==", "commit": {"author": {"name": "Pekka J\u00e4\u00e4skel\u00e4inen", "email": "visit0r@gcc.gnu.org", "date": "2017-05-04T05:50:21Z"}, "committer": {"name": "Pekka J\u00e4\u00e4skel\u00e4inen", "email": "visit0r@gcc.gnu.org", "date": "2017-05-04T05:50:21Z"}, "message": "Minor BRIG/HSAIL frontend updates and bug fixes:\n\n* brig-builtins.def: Added a builtin for class_f64.\n* builtin-types.def: Added a builtin type needed by class_f64.\n* brigfrontend/brig-code-entry-handler.cc\n (brig_code_entry_handler::build_address_operand): Fix a bug\n with reg+offset addressing on 32b segments. In large mode,\n the offset is treated as 32bits unless it's global, readonly or\n kernarg address space.\n* rt/workitems.c: Removed a leftover comment.\n* rt/arithmetic.c (__hsail_class_f32, __hsail_class_f64): Fix the\n check for signaling/non-signalling NaN. Add class_f64 default\n implementation.\n\nFrom-SVN: r247576", "tree": {"sha": "f572c282c5f13374d670fc370b9d69d10a340c7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f572c282c5f13374d670fc370b9d69d10a340c7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6e334cdb1177c9722cef5e5f7153986edd5e5d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6e334cdb1177c9722cef5e5f7153986edd5e5d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6e334cdb1177c9722cef5e5f7153986edd5e5d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6e334cdb1177c9722cef5e5f7153986edd5e5d3/comments", "author": null, "committer": null, "parents": [{"sha": "1738af6048162cadc20913d41320a38b40a50fc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1738af6048162cadc20913d41320a38b40a50fc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1738af6048162cadc20913d41320a38b40a50fc4"}], "stats": {"total": 90, "additions": 75, "deletions": 15}, "files": [{"sha": "8ab62c6a919535d04fd9e9e099fb44a9e26ec7ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e334cdb1177c9722cef5e5f7153986edd5e5d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e334cdb1177c9722cef5e5f7153986edd5e5d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6e334cdb1177c9722cef5e5f7153986edd5e5d3", "patch": "@@ -1,3 +1,8 @@\n+2017-05-04  Pekka J\u00e4\u00e4skel\u00e4inen  <pekka.jaaskelainen@parmance.com>\n+\n+\t* brig-builtins.def: Added a builtin for class_f64.\n+\t* builtin-types.def: Added a builtin type needed by class_f64.\n+\n 2017-05-03  Jason Merrill  <jason@redhat.com>\n \n \t* timevar.def: Add TV_CONSTEXPR.\n@@ -71,6 +76,7 @@\n \t* ipa-inline.h (inline_summary): Add ctor.\n \t(create_ggc): Do not use ggc_cleared_alloc.\n \n+>>>>>>> .r247575\n 2017-05-03  Jeff Downs  <heydowns@somuchpressure.net>\n \t    Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n "}, {"sha": "f525610863520681272dbf7c704d0c549fa87f78", "filename": "gcc/brig-builtins.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e334cdb1177c9722cef5e5f7153986edd5e5d3/gcc%2Fbrig-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e334cdb1177c9722cef5e5f7153986edd5e5d3/gcc%2Fbrig-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig-builtins.def?ref=c6e334cdb1177c9722cef5e5f7153986edd5e5d3", "patch": "@@ -222,6 +222,10 @@ DEF_HSAIL_BUILTIN (BUILT_IN_HSAIL_CLASS_F32, BRIG_OPCODE_CLASS,\n \t\t  BRIG_TYPE_F32, \"__hsail_class_f32\", BT_FN_UINT_FLOAT_UINT,\n \t\t  ATTR_PURE_NOTHROW_LEAF_LIST)\n \n+DEF_HSAIL_BUILTIN (BUILT_IN_HSAIL_CLASS_F64, BRIG_OPCODE_CLASS,\n+\t\t  BRIG_TYPE_F64, \"__hsail_class_f64\", BT_FN_UINT_DOUBLE_UINT,\n+\t\t  ATTR_PURE_NOTHROW_LEAF_LIST)\n+\n DEF_HSAIL_BUILTIN (BUILT_IN_HSAIL_CLASS_F32_F16, BRIG_OPCODE_CLASS,\n \t\t  BRIG_TYPE_F16, \"__hsail_class_f32_f16\", BT_FN_UINT_FLOAT_UINT,\n \t\t  ATTR_PURE_NOTHROW_LEAF_LIST)"}, {"sha": "338873e8cac9b7b872b167ce1713f1d21dcbb403", "filename": "gcc/brig/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e334cdb1177c9722cef5e5f7153986edd5e5d3/gcc%2Fbrig%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e334cdb1177c9722cef5e5f7153986edd5e5d3/gcc%2Fbrig%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig%2FChangeLog?ref=c6e334cdb1177c9722cef5e5f7153986edd5e5d3", "patch": "@@ -1,3 +1,11 @@\n+2017-05-03  Pekka J\u00e4\u00e4skel\u00e4inen  <visit0r@kamu>\n+\n+\t* brigfrontend/brig-code-entry-handler.cc\n+\t(brig_code_entry_handler::build_address_operand): Fix a bug\n+\twith reg+offset addressing on 32b segments. In large mode,\n+\tthe offset is treated as 32bits unless it's global, readonly or\n+\tkernarg address space.\n+\n 2016-02-01  Pekka J\u00e4\u00e4skel\u00e4inen  <pekka.jaaskelainen@parmance.com>\n \n \t* brigfrontend/brig-code-entry-handler.cc: fix address"}, {"sha": "3abd80e241a9a7a5ea8bd483233bcd112852ab48", "filename": "gcc/brig/brigfrontend/brig-code-entry-handler.cc", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e334cdb1177c9722cef5e5f7153986edd5e5d3/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-code-entry-handler.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e334cdb1177c9722cef5e5f7153986edd5e5d3/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-code-entry-handler.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-code-entry-handler.cc?ref=c6e334cdb1177c9722cef5e5f7153986edd5e5d3", "patch": "@@ -464,7 +464,24 @@ brig_code_entry_handler::build_address_operand\n   uint64_t offs = gccbrig_to_uint64_t (addr_operand.offset);\n   if (offs > 0 || addr == NULL_TREE)\n     {\n-      tree const_offset_2 = build_int_cst (size_type_node, offs);\n+      /* In large mode, the offset is treated as 32bits unless it's\n+\t global, readonly or kernarg address space.\n+\t See:\n+\t http://www.hsafoundation.com/html_spec111/HSA_Library.htm\n+\t #PRM/Topics/02_ProgModel/small_and_large_machine_models.htm\n+\t #table_machine_model_data_sizes */\n+\n+      int is64b_offset = segment == BRIG_SEGMENT_GLOBAL\n+\t|| segment == BRIG_SEGMENT_READONLY\n+\t|| segment == BRIG_SEGMENT_KERNARG;\n+\n+      /* The original offset is signed and should be sign\n+\t extended for the pointer arithmetics.  */\n+      tree const_offset_2 = is64b_offset\n+        ? build_int_cst (size_type_node, offs)\n+        : convert (long_integer_type_node,\n+                   build_int_cst (integer_type_node, offs));\n+\n       if (addr == NULL_TREE)\n \taddr = const_offset_2;\n       else\n@@ -1265,6 +1282,10 @@ brig_code_entry_handler::build_operands (const BrigInstBase &brig_inst)\n \t  operand_type = uint32_type_node;\n \t  half_to_float = false;\n \t}\n+      else if (brig_inst.opcode == BRIG_OPCODE_ACTIVELANEPERMUTE && i == 4)\n+\t{\n+\t  operand_type = uint32_type_node;\n+\t}\n       else if (half_to_float)\n \t/* Treat the operands as the storage type at this point.  */\n \toperand_type = half_storage_type;"}, {"sha": "2a51d2583553dd2364833b5a8b9a5e38bd1db728", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e334cdb1177c9722cef5e5f7153986edd5e5d3/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e334cdb1177c9722cef5e5f7153986edd5e5d3/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=c6e334cdb1177c9722cef5e5f7153986edd5e5d3", "patch": "@@ -348,6 +348,8 @@ DEF_FUNCTION_TYPE_2 (BT_FN_INT_INT_INT,\n \t\t     BT_INT, BT_INT, BT_INT)\n DEF_FUNCTION_TYPE_2 (BT_FN_UINT_FLOAT_UINT,\n \t\t     BT_UINT, BT_FLOAT, BT_UINT)\n+DEF_FUNCTION_TYPE_2 (BT_FN_UINT_DOUBLE_UINT,\n+\t\t     BT_UINT, BT_DOUBLE, BT_UINT)\n DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT_UINT_UINT,\n \t\t     BT_FLOAT, BT_UINT, BT_UINT)\n DEF_FUNCTION_TYPE_2 (BT_FN_ULONG_UINT_UINT,"}, {"sha": "31ffff694c7a9f50ad8655bf5dbf2dd949ffc3f8", "filename": "libhsail-rt/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e334cdb1177c9722cef5e5f7153986edd5e5d3/libhsail-rt%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e334cdb1177c9722cef5e5f7153986edd5e5d3/libhsail-rt%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libhsail-rt%2FChangeLog?ref=c6e334cdb1177c9722cef5e5f7153986edd5e5d3", "patch": "@@ -1,3 +1,10 @@\n+2017-05-03  Pekka J\u00e4\u00e4skel\u00e4inen  <pekka.jaaskelainen@parmance.com>\n+\n+\t* rt/workitems.c: Removed a leftover comment.\n+\t* rt/arithmetic.c (__hsail_class_f32, __hsail_class_f64): Fix the\n+\tcheck for signaling/non-signalling NaN. Add class_f64 default\n+\timplementation.\n+\n 2017-02-01  Jakub Jelinek  <jakub@redhat.com>\n \n \t* configure.tgt: Fix i?86-*-linux* entry."}, {"sha": "80852d5883327da1b2cecc4be9020a89242c02c0", "filename": "libhsail-rt/rt/arithmetic.c", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e334cdb1177c9722cef5e5f7153986edd5e5d3/libhsail-rt%2Frt%2Farithmetic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e334cdb1177c9722cef5e5f7153986edd5e5d3/libhsail-rt%2Frt%2Farithmetic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libhsail-rt%2Frt%2Farithmetic.c?ref=c6e334cdb1177c9722cef5e5f7153986edd5e5d3", "patch": "@@ -424,18 +424,34 @@ __hsail_fract_f64 (double a)\n uint32_t\n __hsail_class_f32 (float a, uint32_t flags)\n {\n-  return (flags & 0x0001 && isnan (a) && !(*(uint32_t *) &a & 0x40000000))\n-\t || (flags & 0x0002 && isnan (a) && (*(uint32_t *) &a & 0x40000000))\n-\t || (flags & 0x0004 && isinf (a) && a < 0.0f)\n-\t || (flags & 0x0008 && isnormal (a) && signbit (a))\n-\t || (flags & 0x0010 && a < 0.0f && a > -FLT_MIN)\n-\t || (flags & 0x0020 && a == 0.0f && signbit (a))\n-\t || (flags & 0x0040 && a == 0.0f && !signbit (a))\n-\t || (flags & 0x0080 && a > 0.0f && a < FLT_MIN)\n-\t || (flags & 0x0100 && isnormal (a) && !signbit (a))\n-\t || (flags & 0x0200 && isinf (a) && a >= 0.0f);\n+  return (flags & 0x0001 && isnan (a) && !(*(uint32_t *) &a & (1ul << 22)))\n+    || (flags & 0x0002 && isnan (a) && (*(uint32_t *) &a & (1ul << 22)))\n+    || (flags & 0x0004 && isinf (a) && a < 0.0f)\n+    || (flags & 0x0008 && isnormal (a) && signbit (a))\n+    || (flags & 0x0010 && a < 0.0f && a > -FLT_MIN)\n+    || (flags & 0x0020 && a == 0.0f && signbit (a))\n+    || (flags & 0x0040 && a == 0.0f && !signbit (a))\n+    || (flags & 0x0080 && a > 0.0f && a < FLT_MIN)\n+    || (flags & 0x0100 && isnormal (a) && !signbit (a))\n+    || (flags & 0x0200 && isinf (a) && a >= 0.0f);\n }\n \n+uint32_t\n+__hsail_class_f64 (double a, uint32_t flags)\n+{\n+  return (flags & 0x0001 && isnan (a) && !(*(uint64_t *) &a & (1ul << 51)))\n+    || (flags & 0x0002 && isnan (a) && (*(uint64_t *) &a & (1ul << 51)))\n+    || (flags & 0x0004 && isinf (a) && a < 0.0f)\n+    || (flags & 0x0008 && isnormal (a) && signbit (a))\n+    || (flags & 0x0010 && a < 0.0f && a > -FLT_MIN)\n+    || (flags & 0x0020 && a == 0.0f && signbit (a))\n+    || (flags & 0x0040 && a == 0.0f && !signbit (a))\n+    || (flags & 0x0080 && a > 0.0f && a < FLT_MIN)\n+    || (flags & 0x0100 && isnormal (a) && !signbit (a))\n+    || (flags & 0x0200 && isinf (a) && a >= 0.0f);\n+}\n+\n+\n /* 'class' for a f32-converted f16 which should otherwise be treated like f32\n  except for its limits.  */\n "}, {"sha": "e2c2373757ad6521f1ecc36102b9cad07deb9370", "filename": "libhsail-rt/rt/workitems.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e334cdb1177c9722cef5e5f7153986edd5e5d3/libhsail-rt%2Frt%2Fworkitems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e334cdb1177c9722cef5e5f7153986edd5e5d3/libhsail-rt%2Frt%2Fworkitems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libhsail-rt%2Frt%2Fworkitems.c?ref=c6e334cdb1177c9722cef5e5f7153986edd5e5d3", "patch": "@@ -63,10 +63,6 @@ static clock_t start_time;\n #define FIBER_STACK_SIZE (64*1024)\n #define GROUP_SEGMENT_ALIGN 256\n \n-/* HSA requires WGs to be executed in flat work-group id order.  Enabling\n-   the following macro can reveal test cases that rely on the ordering,\n-   but is not useful for much else.  */\n-\n uint32_t __hsail_workitemabsid (uint32_t dim, PHSAWorkItem *context);\n \n uint32_t __hsail_workitemid (uint32_t dim, PHSAWorkItem *context);"}]}