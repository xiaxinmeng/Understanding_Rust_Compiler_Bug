{"sha": "182ce042e7325a05a87fb34d2eaf6db3666fbd7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTgyY2UwNDJlNzMyNWEwNWE4N2ZiMzRkMmVhZjZkYjM2NjZmYmQ3Zg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-26T23:40:43Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-31T14:00:57Z"}, "message": "calls.c: refactor special_function_p for use by analyzer (v2)\n\nThis patch refactors some code in special_function_p that checks for\nthe function being sane to match by name, splitting it out into a new\nmaybe_special_function_p, and using it it two places in the analyzer.\n\ngcc/analyzer/ChangeLog:\n\t* analyzer.cc (is_named_call_p): Replace tests for fndecl being\n\textern at file scope and having a non-NULL DECL_NAME with a call\n\tto maybe_special_function_p.\n\t* function-set.cc (function_set::contains_decl_p): Add call to\n\tmaybe_special_function_p.\n\ngcc/ChangeLog:\n\t* calls.c (special_function_p): Split out the check for DECL_NAME\n\tbeing non-NULL and fndecl being extern at file scope into a\n\tnew maybe_special_function_p and call it.  Drop check for fndecl\n\tbeing non-NULL that was after a usage of DECL_NAME (fndecl).\n\t* tree.h (maybe_special_function_p): New inline function.", "tree": {"sha": "d9b9ba23a26d11ec85cf122c6d369c6c1b53c4e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9b9ba23a26d11ec85cf122c6d369c6c1b53c4e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/182ce042e7325a05a87fb34d2eaf6db3666fbd7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/182ce042e7325a05a87fb34d2eaf6db3666fbd7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/182ce042e7325a05a87fb34d2eaf6db3666fbd7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/182ce042e7325a05a87fb34d2eaf6db3666fbd7f/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45eb3e4944ba93b1d4e9070c703068cfa7aaace4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45eb3e4944ba93b1d4e9070c703068cfa7aaace4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45eb3e4944ba93b1d4e9070c703068cfa7aaace4"}], "stats": {"total": 67, "additions": 46, "deletions": 21}, "files": [{"sha": "8b7ad4a9f3806f9449875b4128a021857b7b71e8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182ce042e7325a05a87fb34d2eaf6db3666fbd7f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182ce042e7325a05a87fb34d2eaf6db3666fbd7f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=182ce042e7325a05a87fb34d2eaf6db3666fbd7f", "patch": "@@ -1,3 +1,11 @@\n+2020-01-31  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* calls.c (special_function_p): Split out the check for DECL_NAME\n+\tbeing non-NULL and fndecl being extern at file scope into a\n+\tnew maybe_special_function_p and call it.  Drop check for fndecl\n+\tbeing non-NULL that was after a usage of DECL_NAME (fndecl).\n+\t* tree.h (maybe_special_function_p): New inline function.\n+\n 2020-01-30  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* config/gcn/gcn-valu.md (gather<mode>_exec): Move contents ..."}, {"sha": "a46ee269f653b3e80bca95dcdfc99add47588118", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182ce042e7325a05a87fb34d2eaf6db3666fbd7f/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182ce042e7325a05a87fb34d2eaf6db3666fbd7f/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=182ce042e7325a05a87fb34d2eaf6db3666fbd7f", "patch": "@@ -1,3 +1,11 @@\n+2020-01-31  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* analyzer.cc (is_named_call_p): Replace tests for fndecl being\n+\textern at file scope and having a non-NULL DECL_NAME with a call\n+\tto maybe_special_function_p.\n+\t* function-set.cc (function_set::contains_decl_p): Add call to\n+\tmaybe_special_function_p.\n+\n 2020-01-31  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93450"}, {"sha": "5cf745ea632804d606dd59f41289f045c74a3aae", "filename": "gcc/analyzer/analyzer.cc", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182ce042e7325a05a87fb34d2eaf6db3666fbd7f/gcc%2Fanalyzer%2Fanalyzer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182ce042e7325a05a87fb34d2eaf6db3666fbd7f/gcc%2Fanalyzer%2Fanalyzer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer.cc?ref=182ce042e7325a05a87fb34d2eaf6db3666fbd7f", "patch": "@@ -65,18 +65,10 @@ is_named_call_p (tree fndecl, const char *funcname)\n   gcc_assert (fndecl);\n   gcc_assert (funcname);\n \n-  /* Exclude functions not at the file scope, or not `extern',\n-     since they are not the magic functions we would otherwise\n-     think they are.  */\n-  if (!((DECL_CONTEXT (fndecl) == NULL_TREE\n-\t || TREE_CODE (DECL_CONTEXT (fndecl)) == TRANSLATION_UNIT_DECL)\n-\t&& TREE_PUBLIC (fndecl)))\n+  if (!maybe_special_function_p (fndecl))\n     return false;\n \n   tree identifier = DECL_NAME (fndecl);\n-  if (identifier == NULL)\n-    return false;\n-\n   const char *name = IDENTIFIER_POINTER (identifier);\n   const char *tname = name;\n "}, {"sha": "1b6b5d9f9c110d5cc3e631352ac5ac17f717dc48", "filename": "gcc/analyzer/function-set.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182ce042e7325a05a87fb34d2eaf6db3666fbd7f/gcc%2Fanalyzer%2Ffunction-set.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182ce042e7325a05a87fb34d2eaf6db3666fbd7f/gcc%2Fanalyzer%2Ffunction-set.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Ffunction-set.cc?ref=182ce042e7325a05a87fb34d2eaf6db3666fbd7f", "patch": "@@ -59,6 +59,8 @@ bool\n function_set::contains_decl_p (tree fndecl) const\n {\n   gcc_assert (fndecl && DECL_P (fndecl));\n+  if (!maybe_special_function_p (fndecl))\n+    return false;\n   return contains_name_p (IDENTIFIER_POINTER (DECL_NAME (fndecl)));\n }\n "}, {"sha": "d1c531711767d5ff6de336108db4a49abd8a9ebb", "filename": "gcc/calls.c", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182ce042e7325a05a87fb34d2eaf6db3666fbd7f/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182ce042e7325a05a87fb34d2eaf6db3666fbd7f/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=182ce042e7325a05a87fb34d2eaf6db3666fbd7f", "patch": "@@ -586,18 +586,8 @@ special_function_p (const_tree fndecl, int flags)\n {\n   tree name_decl = DECL_NAME (fndecl);\n \n-  if (fndecl && name_decl\n-      && IDENTIFIER_LENGTH (name_decl) <= 11\n-      /* Exclude functions not at the file scope, or not `extern',\n-\t since they are not the magic functions we would otherwise\n-\t think they are.\n-\t FIXME: this should be handled with attributes, not with this\n-\t hacky imitation of DECL_ASSEMBLER_NAME.  It's (also) wrong\n-\t because you can declare fork() inside a function if you\n-\t wish.  */\n-      && (DECL_CONTEXT (fndecl) == NULL_TREE\n-\t  || TREE_CODE (DECL_CONTEXT (fndecl)) == TRANSLATION_UNIT_DECL)\n-      && TREE_PUBLIC (fndecl))\n+  if (maybe_special_function_p (fndecl)\n+      && IDENTIFIER_LENGTH (name_decl) <= 11)\n     {\n       const char *name = IDENTIFIER_POINTER (name_decl);\n       const char *tname = name;"}, {"sha": "85ce6b3bd6a5fc07dcbf43630224d34428d77a4b", "filename": "gcc/tree.h", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182ce042e7325a05a87fb34d2eaf6db3666fbd7f/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182ce042e7325a05a87fb34d2eaf6db3666fbd7f/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=182ce042e7325a05a87fb34d2eaf6db3666fbd7f", "patch": "@@ -5611,6 +5611,31 @@ builtin_decl_declared_p (enum built_in_function fncode)\n \t  && builtin_info[uns_fncode].declared_p);\n }\n \n+/* Determine if the function identified by FNDECL is one that\n+   makes sense to match by name, for those places where we detect\n+   \"magic\" functions by name.\n+\n+   Return true if FNDECL has a name and is an extern fndecl at file scope.\n+   FNDECL must be a non-NULL decl.\n+\n+   Avoid using this, as it's generally better to use attributes rather\n+   than to check for functions by name.  */\n+\n+static inline bool\n+maybe_special_function_p (const_tree fndecl)\n+{\n+  tree name_decl = DECL_NAME (fndecl);\n+  if (name_decl\n+      /* Exclude functions not at the file scope, or not `extern',\n+\t since they are not the magic functions we would otherwise\n+\t think they are.  */\n+      && (DECL_CONTEXT (fndecl) == NULL_TREE\n+\t  || TREE_CODE (DECL_CONTEXT (fndecl)) == TRANSLATION_UNIT_DECL)\n+      && TREE_PUBLIC (fndecl))\n+    return true;\n+  return false;\n+}\n+\n /* Return true if T (assumed to be a DECL) is a global variable.\n    A variable is considered global if its storage is not automatic.  */\n "}]}