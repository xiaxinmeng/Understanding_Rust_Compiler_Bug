{"sha": "3bb4d746a037f9ebea8f91a32b8785223c4e2d33", "node_id": "C_kwDOANBUbNoAKDNiYjRkNzQ2YTAzN2Y5ZWJlYThmOTFhMzJiODc4NTIyM2M0ZTJkMzM", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-12T13:25:37Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-12T13:25:37Z"}, "message": "privacy: reachability: Add `maybe_get_vis_item` helper static function", "tree": {"sha": "837d3b7e3a3fcf7e10ee610e7fbdd9cd49c42999", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/837d3b7e3a3fcf7e10ee610e7fbdd9cd49c42999"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bb4d746a037f9ebea8f91a32b8785223c4e2d33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bb4d746a037f9ebea8f91a32b8785223c4e2d33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bb4d746a037f9ebea8f91a32b8785223c4e2d33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bb4d746a037f9ebea8f91a32b8785223c4e2d33/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23fc3ff7fe9405797d5961f7792540d3f487a287", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23fc3ff7fe9405797d5961f7792540d3f487a287", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23fc3ff7fe9405797d5961f7792540d3f487a287"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "bbd04341b5949a8bf85a07a51c65368070c611f8", "filename": "gcc/rust/privacy/rust-reachability.cc", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb4d746a037f9ebea8f91a32b8785223c4e2d33/gcc%2Frust%2Fprivacy%2Frust-reachability.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb4d746a037f9ebea8f91a32b8785223c4e2d33/gcc%2Frust%2Fprivacy%2Frust-reachability.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-reachability.cc?ref=3bb4d746a037f9ebea8f91a32b8785223c4e2d33", "patch": "@@ -20,20 +20,28 @@\n \n namespace Rust {\n namespace Privacy {\n+\n+static HIR::VisItem *\n+maybe_get_vis_item (std::unique_ptr<HIR::Item> &item)\n+{\n+  if (item->get_hir_kind () != HIR::VIS_ITEM)\n+    return nullptr;\n+\n+  return static_cast<HIR::VisItem *> (item.get ());\n+}\n+\n void\n ReachabilityVisitor::visit (HIR::Module &mod)\n {\n   for (auto &item : mod.get_items ())\n     {\n-      // FIXME: How do we refactor this pattern into something more ergonomic?\n-      // FIXME: Add helper functions\n       // FIXME: Is that what we want to do? Yes? Only visit the items with\n       // visibility?\n-      if (item->get_hir_kind () == HIR::VIS_ITEM)\n-\t{\n-\t  auto vis_item = static_cast<HIR::VisItem *> (item.get ());\n-\t  vis_item->accept_vis (*this);\n-\t}\n+      //\n+      // Imagine if we had `maybe_get_vis_item(item)?->accept_vis(*this)` ;)\n+      auto vis_item = maybe_get_vis_item (item);\n+      if (vis_item)\n+\tvis_item->accept_vis (*this);\n     }\n }\n \n@@ -60,7 +68,7 @@ ReachabilityVisitor::visit (HIR::StructStruct &struct_item)\n   // FIXME: This feels very wrong. Should we check for `has_visibility`\n   // beforehand? Is it just private otherwise? Should the `HIR::Visibility` also\n   // keep variants for private items?\n-  if (struct_item.get_visibility ().get_vis_type () == HIR::Visibility::NONE)\n+  if (struct_item.get_visibility ().is_public ())\n     struct_reach = ReachLevel::Reachable;\n \n   struct_reach"}]}