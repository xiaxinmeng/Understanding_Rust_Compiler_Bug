{"sha": "06a4ab70225ea3867373d64be6a13576cf7e9e2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZhNGFiNzAyMjVlYTM4NjczNzNkNjRiZTZhMTM1NzZjZjdlOWUyZA==", "commit": {"author": {"name": "Chao-ying Fu", "email": "fu@mips.com", "date": "2004-08-29T09:19:34Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-08-29T09:19:34Z"}, "message": "mips-modes.def (V2SF, CCV2, CCV4): New modes.\n\n2004-08-29  Chao-ying Fu  <fu@mips.com>\n\t    James E Wilson  <wilson@specifixinc.com>\n\n\t* config/mips/mips-modes.def (V2SF, CCV2, CCV4): New modes. Give CCV2\n\t8 byte size and alignment.  Give CCV4 16 byte size and alignment.\n\t* config/mips/mips-ps-3d.md: New file.\n\t* config/mips/mips.c (TARGET_VECTOR_MODE_SUPPORTED_P,\n\tTARGET_INIT_BUILTINS, TARGET_EXPAND_BUILTIN): Define.\n\t(mips_const_insns): Handle CONST_VECTOR the same as CONST_DOUBLE.\n\t(mips_output_move): Emit \"mov.ps\" for V2SFmode.\n\t(mips_arg_info): Add checks for VECTOR_FLOAT_TYPE_P and\n\tMODE_VECTOR_FLOAT.\n\t(override_options): Check if TARGET_MIPS3D and there was an explicit\n\t!TARGET_PAIRED_SINGLE_FLOAT.  Set MASK_PAIRED_SINGLE, if TARGET_MIPS3D.\n\tCheck if TARGET_FLOAT64 and TARGET_HARD_FLOAT are both true, when\n\tTARGET_PAIRED_SINGLE_FLOAT is true.  Check if the ISA supports\n\tTARGET_PAIRED_SINGLE_FLOAT.  Allow MODE_VECTOR_FLOAT in fp registers,\n\tand allow CCV2 and CCV4 to occupy two and four CC registers.\n\t(print_fcc_operand): New function.\n\t(print_operand): Add %Y, %y, %V, %v, %Q for CCV2, CCV4, CC.  Modify\n\t%Z to call print_fcc_operand.\n\t(mips_function_value): Handle MODE_VECTOR_FLOAT.\n\t(mips_class_max_nregs): Check for ST_REGS, and handle CCmodes.\n\t(mips_vector_mode_supported_p): New function.\n\t(mips_hard_regno_nregs): Check for ST_REG_P, and handle CCmodes.\n\t(builtin_description): New struct.\n\t(mips_bdesc): New array of struct builtin_description.\n\t(mips_expand_builtin, mips_init_builtins,\n\tmips_expand_ps_cond_move_builtin, mips_expand_4s_compare_builtin,\n\tmips_expand_compare_builtin, mips_expand_ps_compare_builtin): New\n\tfunctions.\n\t* config/mips/mips.h (MASK_PAIRED_SINGLE, MASK_MIPS3D): New defines.\n\t(TARGET_PAIRED_SINGLE_FLOAT, TARGET_MIPS3D): New defines.\n\t(TARGET_CPU_CPP_BUILTINS): Add __mips_paired_single_float.\n\t(TARGET_SWITCHES): Added \"-mpaired-single\", \"-mno-paired-single\",\n\t\"-mips3d\", and \"-mno-mips3d\".\n\t(ASM_SPEC): Map -mips3d to -mips3d in gas.\n\t(EXTRA_CONSTRAINT_Y): New macro.\n\t(EXTRA_CONSTRAINT_STR): Renamed from EXTRA_CONSTRAINT.  Add new\n\tmulti-letter constraint 'Y'.\n\t(CONSTRAINT_LEN): New macro.\n\t(enum mips_builtins): New for MIPS builtin functions.\n\t(enum mips_function_type): New for the types of MIPS builtin functions.\n\t(enum mips_cmp_choice): New for the MIPS comparison builtin functions.\n\t* config/mips/mips.md: New constants for paired single and MIPS-3D\n\tinstructions.  Include the new mips-ps-3d.md file.\n\t(addv2sf3, subv2sf3, mulv2sf3, absv2sf2, negv2sf2, movv2sf,\n\tmovv2sf_hardfloat_64bit): New named patterns.\n\t(madd.ps, msub.ps, nmaddv2sf, nmaddv2sf_fastmath, nmsubv2sf,\n\tnmsubv2sf_fastmath, ldxc1_v2sf_si, ldxc1_v2sf_di, sdxc1_v2sf_si,\n\tsdxc1_v2sf_di): New unnamed patterns.\n\t* config/mips/predicates.md (const_0_operand, const_1_operand): Add\n\tconst_vector support.\n\t(const_0_or_1_operand): New predicate.\n\t* doc/invoke.texi (MIPS Options): Add -mpaired-single and -mips3d.\n\nCo-Authored-By: James E Wilson <wilson@specifixinc.com>\n\nFrom-SVN: r86713", "tree": {"sha": "d5a2972c1c3118a7753fdc1b505686f07fef13af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5a2972c1c3118a7753fdc1b505686f07fef13af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06a4ab70225ea3867373d64be6a13576cf7e9e2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06a4ab70225ea3867373d64be6a13576cf7e9e2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06a4ab70225ea3867373d64be6a13576cf7e9e2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06a4ab70225ea3867373d64be6a13576cf7e9e2d/comments", "author": null, "committer": null, "parents": [{"sha": "b8d65dace769b02053ada12d804077904eb1708e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8d65dace769b02053ada12d804077904eb1708e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8d65dace769b02053ada12d804077904eb1708e"}], "stats": {"total": 4391, "additions": 4360, "deletions": 31}, "files": [{"sha": "0f2018f442bb5387d03d3df96b31d932fa5e3be5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06a4ab70225ea3867373d64be6a13576cf7e9e2d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06a4ab70225ea3867373d64be6a13576cf7e9e2d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=06a4ab70225ea3867373d64be6a13576cf7e9e2d", "patch": "@@ -1,3 +1,59 @@\n+2004-08-29  Chao-ying Fu  <fu@mips.com>\n+\t    James E Wilson  <wilson@specifixinc.com>\n+\t\n+\t* config/mips/mips-modes.def (V2SF, CCV2, CCV4): New modes. Give CCV2\n+\t8 byte size and alignment.  Give CCV4 16 byte size and alignment.\n+\t* config/mips/mips-ps-3d.md: New file.\n+\t* config/mips/mips.c (TARGET_VECTOR_MODE_SUPPORTED_P,\n+\tTARGET_INIT_BUILTINS, TARGET_EXPAND_BUILTIN): Define.\n+\t(mips_const_insns): Handle CONST_VECTOR the same as CONST_DOUBLE.\n+\t(mips_output_move): Emit \"mov.ps\" for V2SFmode.\n+\t(mips_arg_info): Add checks for VECTOR_FLOAT_TYPE_P and\n+\tMODE_VECTOR_FLOAT.\n+\t(override_options): Check if TARGET_MIPS3D and there was an explicit\n+\t!TARGET_PAIRED_SINGLE_FLOAT.  Set MASK_PAIRED_SINGLE, if TARGET_MIPS3D.\n+\tCheck if TARGET_FLOAT64 and TARGET_HARD_FLOAT are both true, when\n+\tTARGET_PAIRED_SINGLE_FLOAT is true.  Check if the ISA supports\n+\tTARGET_PAIRED_SINGLE_FLOAT.  Allow MODE_VECTOR_FLOAT in fp registers,\n+\tand allow CCV2 and CCV4 to occupy two and four CC registers.\n+\t(print_fcc_operand): New function.\n+\t(print_operand): Add %Y, %y, %V, %v, %Q for CCV2, CCV4, CC.  Modify\n+\t%Z to call print_fcc_operand.\n+\t(mips_function_value): Handle MODE_VECTOR_FLOAT.\n+\t(mips_class_max_nregs): Check for ST_REGS, and handle CCmodes.\n+\t(mips_vector_mode_supported_p): New function.\n+\t(mips_hard_regno_nregs): Check for ST_REG_P, and handle CCmodes.\n+\t(builtin_description): New struct.\n+\t(mips_bdesc): New array of struct builtin_description.\n+\t(mips_expand_builtin, mips_init_builtins,\n+\tmips_expand_ps_cond_move_builtin, mips_expand_4s_compare_builtin,\n+\tmips_expand_compare_builtin, mips_expand_ps_compare_builtin): New\n+\tfunctions.\n+\t* config/mips/mips.h (MASK_PAIRED_SINGLE, MASK_MIPS3D): New defines.\n+\t(TARGET_PAIRED_SINGLE_FLOAT, TARGET_MIPS3D): New defines.\n+\t(TARGET_CPU_CPP_BUILTINS): Add __mips_paired_single_float.\n+\t(TARGET_SWITCHES): Added \"-mpaired-single\", \"-mno-paired-single\",\n+\t\"-mips3d\", and \"-mno-mips3d\".\n+\t(ASM_SPEC): Map -mips3d to -mips3d in gas.\n+\t(EXTRA_CONSTRAINT_Y): New macro.\n+\t(EXTRA_CONSTRAINT_STR): Renamed from EXTRA_CONSTRAINT.  Add new\n+\tmulti-letter constraint 'Y'.\n+\t(CONSTRAINT_LEN): New macro.\n+\t(enum mips_builtins): New for MIPS builtin functions.\n+\t(enum mips_function_type): New for the types of MIPS builtin functions.\n+\t(enum mips_cmp_choice): New for the MIPS comparison builtin functions.\n+\t* config/mips/mips.md: New constants for paired single and MIPS-3D \n+\tinstructions.  Include the new mips-ps-3d.md file.\n+\t(addv2sf3, subv2sf3, mulv2sf3, absv2sf2, negv2sf2, movv2sf,\n+\tmovv2sf_hardfloat_64bit): New named patterns.\n+\t(madd.ps, msub.ps, nmaddv2sf, nmaddv2sf_fastmath, nmsubv2sf,\n+\tnmsubv2sf_fastmath, ldxc1_v2sf_si, ldxc1_v2sf_di, sdxc1_v2sf_si,\n+\tsdxc1_v2sf_di): New unnamed patterns.\n+\t* config/mips/predicates.md (const_0_operand, const_1_operand): Add\n+\tconst_vector support.\n+\t(const_0_or_1_operand): New predicate.\n+\t* doc/invoke.texi (MIPS Options): Add -mpaired-single and -mips3d.\n+\n 2004-08-29  Diego Novillo  <dnovillo@redhat.com>\n \n \t* Makefile.in (OBJS-common): Add tree-ssa-propagate.o"}, {"sha": "f57ffe2e1813ab5ec02a528fc055cb13e838d4df", "filename": "gcc/config/mips/mips-modes.def", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06a4ab70225ea3867373d64be6a13576cf7e9e2d/gcc%2Fconfig%2Fmips%2Fmips-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06a4ab70225ea3867373d64be6a13576cf7e9e2d/gcc%2Fconfig%2Fmips%2Fmips-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-modes.def?ref=06a4ab70225ea3867373d64be6a13576cf7e9e2d", "patch": "@@ -25,3 +25,15 @@ RESET_FLOAT_FORMAT (DF, mips_double_format);\n \n /* Irix6 will override this via MIPS_TFMODE_FORMAT.  */\n FLOAT_MODE (TF, 16, mips_quad_format);\n+\n+/* Vector modes.  */\n+VECTOR_MODES (FLOAT, 8);      /*            V4HF V2SF */\n+\n+/* Paired single comparison instructions use 2 or 4 CC.  */\n+CC_MODE (CCV2);\n+ADJUST_BYTESIZE (CCV2, 8);\n+ADJUST_ALIGNMENT (CCV2, 8);\n+\n+CC_MODE (CCV4);\n+ADJUST_BYTESIZE (CCV4, 16);\n+ADJUST_ALIGNMENT (CCV4, 16);"}, {"sha": "481310c89032150c1ca813d585fa79144b356525", "filename": "gcc/config/mips/mips-ps-3d.md", "status": "added", "additions": 1607, "deletions": 0, "changes": 1607, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06a4ab70225ea3867373d64be6a13576cf7e9e2d/gcc%2Fconfig%2Fmips%2Fmips-ps-3d.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06a4ab70225ea3867373d64be6a13576cf7e9e2d/gcc%2Fconfig%2Fmips%2Fmips-ps-3d.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-ps-3d.md?ref=06a4ab70225ea3867373d64be6a13576cf7e9e2d", "patch": "@@ -0,0 +1,1607 @@\n+;; MIPS Paired-Single Floating and MIPS-3D Instructions.\n+;; Copyright (C) 2004 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 2, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING.  If not, write to\n+;; the Free Software Foundation, 59 Temple Place - Suite 330,\n+;; Boston, MA 02111-1307, USA.\n+\n+(define_insn \"*movcc_v2sf_di\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=f,f\")\n+\t(if_then_else:V2SF\n+\t (match_operator:DI 4 \"equality_operator\"\n+\t\t\t [(match_operand:DI 1 \"register_operand\" \"d,d\")\n+\t\t\t  (const_int 0)])\n+\t (match_operand:V2SF 2 \"register_operand\" \"f,0\")\n+\t (match_operand:V2SF 3 \"register_operand\" \"0,f\")))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"@\n+    mov%T4.ps\\t%0,%2,%1\n+    mov%t4.ps\\t%0,%3,%1\"\n+  [(set_attr \"type\" \"condmove\")\n+   (set_attr \"mode\" \"SF\")])\n+\n+(define_insn \"*movcc_v2sf_si\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=f,f\")\n+\t(if_then_else:V2SF\n+\t (match_operator:SI 4 \"equality_operator\"\n+\t\t\t [(match_operand:SI 1 \"register_operand\" \"d,d\")\n+\t\t\t  (const_int 0)])\n+\t (match_operand:V2SF 2 \"register_operand\" \"f,0\")\n+\t (match_operand:V2SF 3 \"register_operand\" \"0,f\")))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"@\n+    mov%T4.ps\\t%0,%2,%1\n+    mov%t4.ps\\t%0,%3,%1\"\n+  [(set_attr \"type\" \"condmove\")\n+   (set_attr \"mode\" \"SF\")])\n+\n+(define_insn \"mips_cond_move_tf_ps\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=f,f\")\n+\t(if_then_else:V2SF\n+\t (eq:CCV2 (match_operand:CCV2 3 \"register_operand\" \"z,z\") (const_int 0))\n+\t (match_operand:V2SF 1 \"register_operand\" \"f,0\")\n+\t (match_operand:V2SF 2 \"register_operand\" \"0,f\")))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"@\n+    movt.ps\\t%0,%1,%y3\n+    movf.ps\\t%0,%2,%y3\"\n+  [(set_attr \"type\" \"condmove\")\n+   (set_attr \"mode\" \"SF\")])\n+\n+(define_expand \"movv2sfcc\"\n+  [(set (match_dup 4) (match_operand 1 \"comparison_operator\"))\n+   (set (match_operand:V2SF 0 \"register_operand\")\n+\t(if_then_else:V2SF (match_dup 5)\n+\t\t\t   (match_operand:V2SF 2 \"register_operand\")\n+\t\t\t   (match_operand:V2SF 3 \"register_operand\")))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+{\n+  /* We can only support MOVN.PS and MOVZ.PS.\n+     NOTE: MOVT.PS and MOVF.PS have different semantics from MOVN.PS and \n+\t   MOVZ.PS.  MOVT.PS and MOVF.PS depend on two CC values and move \n+\t   each item independently.  */\n+\n+  if (GET_MODE_CLASS (GET_MODE (cmp_operands[0])) != MODE_INT)\n+    FAIL;\n+\n+  gen_conditional_move (operands);\n+  DONE;\n+})\n+\n+; pul.ps - Pair Upper Lower\n+(define_insn \"mips_pul_ps\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=f\")\n+\t(vec_merge:V2SF\n+\t (match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t (match_operand:V2SF 2 \"register_operand\" \"f\")\n+\t (const_int 2)))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"pul.ps\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fmove\")\n+   (set_attr \"mode\" \"SF\")])\n+\n+; puu.ps - Pair upper upper\n+(define_insn \"mips_puu_ps\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=f\")\n+\t(vec_merge:V2SF\n+\t (match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t (vec_select:V2SF (match_operand:V2SF 2 \"register_operand\" \"f\")\n+\t\t\t  (parallel [(const_int 1)\n+\t\t\t\t     (const_int 0)]))\n+\t (const_int 2)))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"puu.ps\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fmove\")\n+   (set_attr \"mode\" \"SF\")])\n+\n+; pll.ps - Pair Lower Lower\n+(define_insn \"mips_pll_ps\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=f\")\n+\t(vec_merge:V2SF\n+\t (vec_select:V2SF (match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t\t  (parallel [(const_int 1)\n+\t\t\t\t     (const_int 0)]))\n+\t (match_operand:V2SF 2 \"register_operand\" \"f\")\n+\t (const_int 2)))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"pll.ps\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fmove\")\n+   (set_attr \"mode\" \"SF\")])\n+\n+; plu.ps - Pair Lower Upper\n+(define_insn \"mips_plu_ps\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=f\")\n+\t(vec_merge:V2SF\n+\t (vec_select:V2SF (match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t\t  (parallel [(const_int 1)\n+\t\t\t\t     (const_int 0)]))\n+\t (vec_select:V2SF (match_operand:V2SF 2 \"register_operand\" \"f\")\n+\t\t\t  (parallel [(const_int 1)\n+\t\t\t\t     (const_int 0)]))\n+\t (const_int 2)))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"plu.ps\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fmove\")\n+   (set_attr \"mode\" \"SF\")])\n+\n+; vec_init\n+(define_expand \"vec_initv2sf\"\n+  [(match_operand:V2SF 0 \"register_operand\")\n+   (match_operand:V2SF 1 \"\")]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+{\n+  rtx op0 = force_reg (SFmode, XVECEXP (operands[1], 0, 0));\n+  rtx op1 = force_reg (SFmode, XVECEXP (operands[1], 0, 1));\n+  emit_insn (gen_vec_initv2sf_internal (operands[0], op0, op1));\n+  DONE;\n+})\n+\n+(define_insn \"vec_initv2sf_internal\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=f\")\n+\t(vec_concat:V2SF\n+\t (match_operand:SF 1 \"register_operand\" \"f\")\n+\t (match_operand:SF 2 \"register_operand\" \"f\")))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    return \"cvt.ps.s\\t%0,%1,%2\";\n+  else\n+    return \"cvt.ps.s\\t%0,%2,%1\";\n+}\n+  [(set_attr \"type\" \"fcvt\")\n+   (set_attr \"mode\" \"SF\")])\n+\n+;; ??? This is only generated if we perform a vector operation that has to be\n+;; emulated.  There is no other way to get a vector mode bitfield extract\n+;; currently.\n+\n+(define_insn \"vec_extractv2sf\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t(vec_select:SF (match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t       (parallel\n+\t\t\t[(match_operand 2 \"const_0_or_1_operand\" \"\")])))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+{\n+  if (INTVAL (operands[2]) == !BYTES_BIG_ENDIAN)\n+    return \"cvt.s.pu\\t%0,%1\";\n+  else\n+    return \"cvt.s.pl\\t%0,%1\";\n+}\n+  [(set_attr \"type\" \"fcvt\")\n+   (set_attr \"mode\" \"SF\")])\n+\n+;; ??? This is only generated if we disable the vec_init pattern.  There is\n+;; no other way to get a vector mode bitfield store currently.\n+\n+(define_expand \"vec_setv2sf\"\n+  [(match_operand:V2SF 0 \"register_operand\")\n+   (match_operand:SF 1 \"register_operand\")\n+   (match_operand 2 \"const_0_or_1_operand\")]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+{\n+  rtx temp;\n+\n+  /* We don't have an insert instruction, so we duplicate the float, and\n+     then use a PUL instruction.  */\n+  temp = gen_reg_rtx (V2SFmode);\n+  emit_insn (gen_mips_cvt_ps_s (temp, operands[1], operands[1]));\n+  if (INTVAL (operands[2]) == !BYTES_BIG_ENDIAN)\n+    emit_insn (gen_mips_pul_ps (operands[0], temp, operands[0]));\n+  else\n+    emit_insn (gen_mips_pul_ps (operands[0], operands[0], temp));\n+  DONE;\n+})\n+\n+; cvt.ps.s - Floating Point Convert Pair to Paired Single\n+(define_expand \"mips_cvt_ps_s\"\n+  [(match_operand:V2SF 0 \"register_operand\")\n+   (match_operand:SF 1 \"register_operand\")\n+   (match_operand:SF 2 \"register_operand\")]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    emit_insn (gen_vec_initv2sf_internal (operands[0], operands[1],\n+\t       operands[2]));\n+  else\n+    emit_insn (gen_vec_initv2sf_internal (operands[0], operands[2],\n+\t       operands[1]));\n+  DONE;\n+})\n+\n+; cvt.s.pl - Floating Point Convert Pair Lower to Single Floating Point\n+(define_expand \"mips_cvt_s_pl\"\n+  [(set (match_operand:SF 0 \"register_operand\")\n+\t(vec_select:SF (match_operand:V2SF 1 \"register_operand\")\n+\t\t       (parallel [(match_dup 2)])))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  { operands[2] = GEN_INT (BYTES_BIG_ENDIAN); })\n+\n+; cvt.s.pu - Floating Point Convert Pair Upper to Single Floating Point\n+(define_expand \"mips_cvt_s_pu\"\n+  [(set (match_operand:SF 0 \"register_operand\")\n+\t(vec_select:SF (match_operand:V2SF 1 \"register_operand\")\n+\t\t       (parallel [(match_dup 2)])))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  { operands[2] = GEN_INT (!BYTES_BIG_ENDIAN); })\n+\n+; alnv.ps - Floating Point Align Variable\n+(define_insn \"mips_alnv_ps\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=f\")\n+\t(unspec:V2SF [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")\n+\t\t      (match_operand:SI 3 \"register_operand\" \"d\")]\n+\t\t     UNSPEC_ALNV_PS))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"alnv.ps\\t%0,%1,%2,%3\"\n+  [(set_attr \"type\" \"fmove\")\n+   (set_attr \"mode\" \"SF\")])\n+\n+; addr.ps - Floating Point Reduction Add\n+(define_insn \"mips_addr_ps\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=f\")\n+\t(unspec:V2SF [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_ADDR_PS))]\n+  \"TARGET_MIPS3D\"\n+  \"addr.ps\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fadd\")\n+   (set_attr \"mode\" \"SF\")])\n+\n+; cvt.pw.ps - Floating Point Convert Paired Single to Paired Word\n+(define_insn \"mips_cvt_pw_ps\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=f\")\n+\t(unspec:V2SF [(match_operand:V2SF 1 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_CVT_PW_PS))]\n+  \"TARGET_MIPS3D\"\n+  \"cvt.pw.ps\\t%0,%1\"\n+  [(set_attr \"type\" \"fcvt\")\n+   (set_attr \"mode\" \"SF\")])\n+\n+; cvt.ps.pw - Floating Point Convert Paired Word to Paired Single\n+(define_insn \"mips_cvt_ps_pw\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=f\")\n+\t(unspec:V2SF [(match_operand:V2SF 1 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_CVT_PS_PW))]\n+  \"TARGET_MIPS3D\"\n+  \"cvt.ps.pw\\t%0,%1\"\n+  [(set_attr \"type\" \"fcvt\")\n+   (set_attr \"mode\" \"SF\")])\n+\n+; mulr.ps - Floating Point Reduction Multiply\n+(define_insn \"mips_mulr_ps\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=f\")\n+\t(unspec:V2SF [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_MULR_PS))]\n+  \"TARGET_MIPS3D\"\n+  \"mulr.ps\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fmul\")\n+   (set_attr \"mode\" \"SF\")])\n+\n+;----------------------------------------------------------------------------\n+; Floating Point Absolute Comparisions for Singles\n+;----------------------------------------------------------------------------\n+\n+(define_insn \"mips_cabs_f_s\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(unspec:CC [(match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t    (match_operand:SF 2 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_CABS_F))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.f.s\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_un_s\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(unspec:CC [(match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t    (match_operand:SF 2 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_CABS_UN))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.un.s\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_eq_s\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(unspec:CC [(match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t    (match_operand:SF 2 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_CABS_EQ))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.eq.s\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_ueq_s\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(unspec:CC [(match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t    (match_operand:SF 2 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_CABS_UEQ))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.ueq.s\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_olt_s\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(unspec:CC [(match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t    (match_operand:SF 2 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_CABS_OLT))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.olt.s\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_ult_s\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(unspec:CC [(match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t    (match_operand:SF 2 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_CABS_ULT))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.ult.s\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_ole_s\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(unspec:CC [(match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t    (match_operand:SF 2 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_CABS_OLE))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.ole.s\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_ule_s\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(unspec:CC [(match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t    (match_operand:SF 2 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_CABS_ULE))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.ule.s\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_sf_s\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(unspec:CC [(match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t    (match_operand:SF 2 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_CABS_SF))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.sf.s\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_ngle_s\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(unspec:CC [(match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t    (match_operand:SF 2 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_CABS_NGLE))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.ngle.s\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_seq_s\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(unspec:CC [(match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t    (match_operand:SF 2 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_CABS_SEQ))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.seq.s\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_ngl_s\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(unspec:CC [(match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t    (match_operand:SF 2 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_CABS_NGL))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.ngl.s\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_lt_s\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(unspec:CC [(match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t    (match_operand:SF 2 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_CABS_LT))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.lt.s\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_nge_s\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(unspec:CC [(match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t    (match_operand:SF 2 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_CABS_NGE))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.nge.s\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_le_s\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(unspec:CC [(match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t    (match_operand:SF 2 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_CABS_LE))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.le.s\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_ngt_s\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(unspec:CC [(match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t    (match_operand:SF 2 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_CABS_NGT))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.ngt.s\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+;----------------------------------------------------------------------------\n+; Floating Point Absolute Comparisions for Doubles\n+;----------------------------------------------------------------------------\n+(define_insn \"mips_cabs_f_d\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(unspec:CC [(match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t    (match_operand:DF 2 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_CABS_F))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.f.d\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_un_d\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(unspec:CC [(match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t    (match_operand:DF 2 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_CABS_UN))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.un.d\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_eq_d\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(unspec:CC [(match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t    (match_operand:DF 2 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_CABS_EQ))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.eq.d\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_ueq_d\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(unspec:CC [(match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t    (match_operand:DF 2 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_CABS_UEQ))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.ueq.d\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_olt_d\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(unspec:CC [(match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t    (match_operand:DF 2 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_CABS_OLT))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.olt.d\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_ult_d\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(unspec:CC [(match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t    (match_operand:DF 2 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_CABS_ULT))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.ult.d\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_ole_d\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(unspec:CC [(match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t    (match_operand:DF 2 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_CABS_OLE))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.ole.d\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_ule_d\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(unspec:CC [(match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t    (match_operand:DF 2 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_CABS_ULE))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.ule.d\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_sf_d\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(unspec:CC [(match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t    (match_operand:DF 2 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_CABS_SF))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.sf.d\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_ngle_d\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(unspec:CC [(match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t    (match_operand:DF 2 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_CABS_NGLE))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.ngle.d\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_seq_d\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(unspec:CC [(match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t    (match_operand:DF 2 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_CABS_SEQ))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.seq.d\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_ngl_d\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(unspec:CC [(match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t    (match_operand:DF 2 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_CABS_NGL))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.ngl.d\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_lt_d\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(unspec:CC [(match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t    (match_operand:DF 2 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_CABS_LT))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.lt.d\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_nge_d\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(unspec:CC [(match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t    (match_operand:DF 2 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_CABS_NGE))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.nge.d\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_le_d\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(unspec:CC [(match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t    (match_operand:DF 2 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_CABS_LE))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.le.d\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_ngt_d\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(unspec:CC [(match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t    (match_operand:DF 2 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_CABS_NGT))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.ngt.d\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+;----------------------------------------------------------------------------\n+; Floating Point Comparisions for Four Singles\n+;----------------------------------------------------------------------------\n+\n+(define_insn \"mips_c_f_4s\"\n+  [(set (match_operand:CCV4 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV4 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 3 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 4 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_C_F))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"c.f.ps\\t%v0,%1,%2\\n\\tc.f.ps\\t%V0,%3,%4\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_c_un_4s\"\n+  [(set (match_operand:CCV4 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV4 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 3 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 4 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_C_UN))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"c.un.ps\\t%v0,%1,%2\\n\\tc.un.ps\\t%V0,%3,%4\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_c_eq_4s\"\n+  [(set (match_operand:CCV4 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV4 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 3 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 4 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_C_EQ))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"c.eq.ps\\t%v0,%1,%2\\n\\tc.eq.ps\\t%V0,%3,%4\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_c_ueq_4s\"\n+  [(set (match_operand:CCV4 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV4 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 3 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 4 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_C_UEQ))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"c.ueq.ps\\t%v0,%1,%2\\n\\tc.ueq.ps\\t%V0,%3,%4\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_c_olt_4s\"\n+  [(set (match_operand:CCV4 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV4 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 3 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 4 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_C_OLT))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"c.olt.ps\\t%v0,%1,%2\\n\\tc.olt.ps\\t%V0,%3,%4\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_c_ult_4s\"\n+  [(set (match_operand:CCV4 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV4 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 3 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 4 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_C_ULT))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"c.ult.ps\\t%v0,%1,%2\\n\\tc.ult.ps\\t%V0,%3,%4\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_c_ole_4s\"\n+  [(set (match_operand:CCV4 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV4 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 3 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 4 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_C_OLE))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"c.ole.ps\\t%v0,%1,%2\\n\\tc.ole.ps\\t%V0,%3,%4\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_c_ule_4s\"\n+  [(set (match_operand:CCV4 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV4 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 3 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 4 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_C_ULE))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"c.ule.ps\\t%v0,%1,%2\\n\\tc.ule.ps\\t%V0,%3,%4\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_c_sf_4s\"\n+  [(set (match_operand:CCV4 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV4 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 3 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 4 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_C_SF))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"c.sf.ps\\t%v0,%1,%2\\n\\tc.sf.ps\\t%V0,%3,%4\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_c_ngle_4s\"\n+  [(set (match_operand:CCV4 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV4 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 3 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 4 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_C_NGLE))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"c.ngle.ps\\t%v0,%1,%2\\n\\tc.ngle.ps\\t%V0,%3,%4\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_c_seq_4s\"\n+  [(set (match_operand:CCV4 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV4 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 3 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 4 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_C_SEQ))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"c.seq.ps\\t%v0,%1,%2\\n\\tc.seq.ps\\t%V0,%3,%4\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_c_ngl_4s\"\n+  [(set (match_operand:CCV4 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV4 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 3 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 4 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_C_NGL))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"c.ngl.ps\\t%v0,%1,%2\\n\\tc.ngl.ps\\t%V0,%3,%4\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_c_lt_4s\"\n+  [(set (match_operand:CCV4 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV4 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 3 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 4 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_C_LT))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"c.lt.ps\\t%v0,%1,%2\\n\\tc.lt.ps\\t%V0,%3,%4\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_c_nge_4s\"\n+  [(set (match_operand:CCV4 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV4 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 3 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 4 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_C_NGE))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"c.nge.ps\\t%v0,%1,%2\\n\\tc.nge.ps\\t%V0,%3,%4\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_c_le_4s\"\n+  [(set (match_operand:CCV4 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV4 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 3 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 4 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_C_LE))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"c.le.ps\\t%v0,%1,%2\\n\\tc.le.ps\\t%V0,%3,%4\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_c_ngt_4s\"\n+  [(set (match_operand:CCV4 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV4 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 3 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 4 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_C_NGT))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"c.ngt.ps\\t%v0,%1,%2\\n\\tc.ngt.ps\\t%V0,%3,%4\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+;----------------------------------------------------------------------------\n+; Floating Point Absolute Comparisions for Four Singles\n+;----------------------------------------------------------------------------\n+(define_insn \"mips_cabs_f_4s\"\n+  [(set (match_operand:CCV4 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV4 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 3 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 4 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_CABS_F))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.f.ps\\t%v0,%1,%2\\n\\tcabs.f.ps\\t%V0,%3,%4\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_un_4s\"\n+  [(set (match_operand:CCV4 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV4 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 3 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 4 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_CABS_UN))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.un.ps\\t%v0,%1,%2\\n\\tcabs.un.ps\\t%V0,%3,%4\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_eq_4s\"\n+  [(set (match_operand:CCV4 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV4 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 3 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 4 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_CABS_EQ))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.eq.ps\\t%v0,%1,%2\\n\\tcabs.eq.ps\\t%V0,%3,%4\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_ueq_4s\"\n+  [(set (match_operand:CCV4 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV4 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 3 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 4 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_CABS_UEQ))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.ueq.ps\\t%v0,%1,%2\\n\\tcabs.ueq.ps\\t%V0,%3,%4\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_olt_4s\"\n+  [(set (match_operand:CCV4 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV4 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 3 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 4 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_CABS_OLT))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.olt.ps\\t%v0,%1,%2\\n\\tcabs.olt.ps\\t%V0,%3,%4\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_ult_4s\"\n+  [(set (match_operand:CCV4 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV4 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 3 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 4 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_CABS_ULT))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.ult.ps\\t%v0,%1,%2\\n\\tcabs.ult.ps\\t%V0,%3,%4\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_ole_4s\"\n+  [(set (match_operand:CCV4 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV4 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 3 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 4 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_CABS_OLE))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.ole.ps\\t%v0,%1,%2\\n\\tcabs.ole.ps\\t%V0,%3,%4\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_ule_4s\"\n+  [(set (match_operand:CCV4 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV4 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 3 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 4 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_CABS_ULE))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.ule.ps\\t%v0,%1,%2\\n\\tcabs.ule.ps\\t%V0,%3,%4\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_sf_4s\"\n+  [(set (match_operand:CCV4 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV4 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 3 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 4 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_CABS_SF))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.sf.ps\\t%v0,%1,%2\\n\\tcabs.sf.ps\\t%V0,%3,%4\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_ngle_4s\"\n+  [(set (match_operand:CCV4 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV4 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 3 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 4 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_CABS_NGLE))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.ngle.ps\\t%v0,%1,%2\\n\\tcabs.ngle.ps\\t%V0,%3,%4\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_seq_4s\"\n+  [(set (match_operand:CCV4 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV4 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 3 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 4 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_CABS_SEQ))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.seq.ps\\t%v0,%1,%2\\n\\tcabs.seq.ps\\t%V0,%3,%4\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_ngl_4s\"\n+  [(set (match_operand:CCV4 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV4 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 3 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 4 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_CABS_NGL))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.ngl.ps\\t%v0,%1,%2\\n\\tcabs.ngl.ps\\t%V0,%3,%4\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_lt_4s\"\n+  [(set (match_operand:CCV4 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV4 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 3 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 4 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_CABS_LT))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.lt.ps\\t%v0,%1,%2\\n\\tcabs.lt.ps\\t%V0,%3,%4\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_nge_4s\"\n+  [(set (match_operand:CCV4 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV4 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 3 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 4 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_CABS_NGE))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.nge.ps\\t%v0,%1,%2\\n\\tcabs.nge.ps\\t%V0,%3,%4\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_le_4s\"\n+  [(set (match_operand:CCV4 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV4 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 3 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 4 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_CABS_LE))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.le.ps\\t%v0,%1,%2\\n\\tcabs.le.ps\\t%V0,%3,%4\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_ngt_4s\"\n+  [(set (match_operand:CCV4 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV4 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 3 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 4 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_CABS_NGT))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.ngt.ps\\t%v0,%1,%2\\n\\tcabs.ngt.ps\\t%V0,%3,%4\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+;----------------------------------------------------------------------------\n+; Floating Point Comparisions for Paired Singles\n+;----------------------------------------------------------------------------\n+(define_insn \"mips_c_f_ps\"\n+  [(set (match_operand:CCV2 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV2 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")] \n+\t\t     UNSPEC_C_F))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"c.f.ps\\t%Z0%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_c_un_ps\"\n+  [(set (match_operand:CCV2 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV2 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")] \n+\t\t     UNSPEC_C_UN))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"c.un.ps\\t%Z0%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_c_eq_ps\"\n+  [(set (match_operand:CCV2 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV2 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")] \n+\t\t     UNSPEC_C_EQ))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"c.eq.ps\\t%Z0%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_c_ueq_ps\"\n+  [(set (match_operand:CCV2 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV2 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")] \n+\t\t     UNSPEC_C_UEQ))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"c.ueq.ps\\t%Z0%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_c_olt_ps\"\n+  [(set (match_operand:CCV2 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV2 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")] \n+\t\t     UNSPEC_C_OLT))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"c.olt.ps\\t%Z0%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_c_ult_ps\"\n+  [(set (match_operand:CCV2 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV2 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")] \n+\t\t     UNSPEC_C_ULT))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"c.ult.ps\\t%Z0%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_c_ole_ps\"\n+  [(set (match_operand:CCV2 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV2 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")] \n+\t\t     UNSPEC_C_OLE))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"c.ole.ps\\t%Z0%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_c_ule_ps\"\n+  [(set (match_operand:CCV2 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV2 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")] \n+\t\t     UNSPEC_C_ULE))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"c.ule.ps\\t%Z0%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_c_sf_ps\"\n+  [(set (match_operand:CCV2 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV2 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")] \n+\t\t     UNSPEC_C_SF))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"c.sf.ps\\t%Z0%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_c_ngle_ps\"\n+  [(set (match_operand:CCV2 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV2 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")] \n+\t\t     UNSPEC_C_NGLE))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"c.ngle.ps\\t%Z0%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_c_seq_ps\"\n+  [(set (match_operand:CCV2 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV2 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")] \n+\t\t     UNSPEC_C_SEQ))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"c.seq.ps\\t%Z0%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_c_ngl_ps\"\n+  [(set (match_operand:CCV2 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV2 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")] \n+\t\t     UNSPEC_C_NGL))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"c.ngl.ps\\t%Z0%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_c_lt_ps\"\n+  [(set (match_operand:CCV2 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV2 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")] \n+\t\t     UNSPEC_C_LT))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"c.lt.ps\\t%Z0%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_c_nge_ps\"\n+  [(set (match_operand:CCV2 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV2 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")] \n+\t\t     UNSPEC_C_NGE))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"c.nge.ps\\t%Z0%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_c_le_ps\"\n+  [(set (match_operand:CCV2 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV2 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")] \n+\t\t     UNSPEC_C_LE))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"c.le.ps\\t%Z0%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_c_ngt_ps\"\n+  [(set (match_operand:CCV2 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV2 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")] \n+\t\t     UNSPEC_C_NGT))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"c.ngt.ps\\t%Z0%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+;----------------------------------------------------------------------------\n+; Floating Point Absolute Comparisions for Paired Singles\n+;----------------------------------------------------------------------------\n+(define_insn \"mips_cabs_f_ps\"\n+  [(set (match_operand:CCV2 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV2 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")] \n+\t\t     UNSPEC_CABS_F))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.f.ps\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_un_ps\"\n+  [(set (match_operand:CCV2 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV2 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")] \n+\t\t     UNSPEC_CABS_UN))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.un.ps\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_eq_ps\"\n+  [(set (match_operand:CCV2 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV2 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")] \n+\t\t     UNSPEC_CABS_EQ))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.eq.ps\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_ueq_ps\"\n+  [(set (match_operand:CCV2 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV2 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")] \n+\t\t     UNSPEC_CABS_UEQ))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.ueq.ps\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_olt_ps\"\n+  [(set (match_operand:CCV2 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV2 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")] \n+\t\t     UNSPEC_CABS_OLT))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.olt.ps\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_ult_ps\"\n+  [(set (match_operand:CCV2 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV2 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")] \n+\t\t     UNSPEC_CABS_ULT))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.ult.ps\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_ole_ps\"\n+  [(set (match_operand:CCV2 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV2 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")] \n+\t\t     UNSPEC_CABS_OLE))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.ole.ps\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_ule_ps\"\n+  [(set (match_operand:CCV2 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV2 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")] \n+\t\t     UNSPEC_CABS_ULE))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.ule.ps\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_sf_ps\"\n+  [(set (match_operand:CCV2 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV2 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")] \n+\t\t     UNSPEC_CABS_SF))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.sf.ps\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_ngle_ps\"\n+  [(set (match_operand:CCV2 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV2 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")] \n+\t\t     UNSPEC_CABS_NGLE))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.ngle.ps\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_seq_ps\"\n+  [(set (match_operand:CCV2 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV2 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")] \n+\t\t     UNSPEC_CABS_SEQ))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.seq.ps\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_ngl_ps\"\n+  [(set (match_operand:CCV2 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV2 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")] \n+\t\t     UNSPEC_CABS_NGL))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.ngl.ps\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_lt_ps\"\n+  [(set (match_operand:CCV2 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV2 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")] \n+\t\t     UNSPEC_CABS_LT))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.lt.ps\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_nge_ps\"\n+  [(set (match_operand:CCV2 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV2 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")] \n+\t\t     UNSPEC_CABS_NGE))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.nge.ps\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_le_ps\"\n+  [(set (match_operand:CCV2 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV2 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")] \n+\t\t     UNSPEC_CABS_LE))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.le.ps\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"mips_cabs_ngt_ps\"\n+  [(set (match_operand:CCV2 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV2 [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")] \n+\t\t     UNSPEC_CABS_NGT))]\n+  \"TARGET_MIPS3D\"\n+  \"cabs.ngt.ps\\t%Q0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+;----------------------------------------------------------------------------\n+; Floating Point Branch Instructions.\n+;----------------------------------------------------------------------------\n+\n+; Branch on Any of Four Floating Point Condition Codes True\n+(define_insn \"bc1any4t\"\n+  [(set (pc)\n+\t(if_then_else (eq:CCV4 (match_operand:CCV4 0 \"register_operand\" \"z\")\n+\t\t\t       (const_int 0))\n+\t\t      (label_ref (match_operand 1 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"TARGET_MIPS3D\"\n+  \"%*bc1any4t\\t%Q0,%1%/\"\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"mode\" \"none\")])\n+\n+; Branch on Any of Four Floating Point Condition Codes False\n+(define_insn \"bc1any4f\"\n+  [(set (pc)\n+\t(if_then_else (ne:CCV4 (match_operand:CCV4 0 \"register_operand\" \"z\")\n+\t\t\t       (const_int 1))\n+\t\t      (label_ref (match_operand 1 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"TARGET_MIPS3D\"\n+  \"%*bc1any4f\\t%Q0,%1%/\"\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"mode\" \"none\")])\n+\n+; Branch on Any of Two Floating Point Condition Codes True\n+(define_insn \"bc1any2t\"\n+  [(set (pc)\n+\t(if_then_else (eq:CCV2 (match_operand:CCV2 0 \"register_operand\" \"z\")\n+\t\t\t       (const_int 0))\n+\t\t      (label_ref (match_operand 1 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"TARGET_MIPS3D\"\n+  \"%*bc1any2t\\t%Q0,%1%/\"\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"mode\" \"none\")])\n+\n+; Branch on Upper of Two Floating Point Condition Codes True\n+(define_insn \"bc1upper2t\"\n+  [(set (pc)\n+\t(if_then_else (eq:CCV2 (match_operand:CCV2 0 \"register_operand\" \"z\")\n+\t\t\t       (const_int 1))\n+\t\t      (label_ref (match_operand 1 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"%*bc1t\\t%Y0,%1%/\"\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"mode\" \"none\")])\n+\n+; Branch on Lower of Two Floating Point Condition Codes True\n+(define_insn \"bc1lower2t\"\n+  [(set (pc)\n+\t(if_then_else (eq:CCV2 (match_operand:CCV2 0 \"register_operand\" \"z\")\n+\t\t\t       (const_int 2))\n+\t\t      (label_ref (match_operand 1 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"%*bc1t\\t%y0,%1%/\"\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"mode\" \"none\")])\n+\n+\n+; Branch on Any of Two Floating Point Condition Codes False\n+(define_insn \"bc1any2f\"\n+  [(set (pc)\n+\t(if_then_else (ne:CCV2 (match_operand:CCV2 0 \"register_operand\" \"z\")\n+\t\t\t       (const_int 3))\n+\t\t      (label_ref (match_operand 1 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"TARGET_MIPS3D\"\n+  \"%*bc1any2f\\t%Q0,%1%/\"\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"mode\" \"none\")])\n+\n+; Branch on Upper of Two Floating Point Condition Codes False\n+(define_insn \"bc1upper2f\"\n+  [(set (pc)\n+\t(if_then_else (ne:CCV2 (match_operand:CCV2 0 \"register_operand\" \"z\")\n+\t\t\t       (const_int 1))\n+\t\t      (label_ref (match_operand 1 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"%*bc1f\\t%Y0,%1%/\"\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"mode\" \"none\")])\n+\n+; Branch on Lower of Two Floating Point Condition Codes False\n+(define_insn \"bc1lower2f\"\n+  [(set (pc)\n+\t(if_then_else (ne:CCV2 (match_operand:CCV2 0 \"register_operand\" \"z\")\n+\t\t\t       (const_int 2))\n+\t\t      (label_ref (match_operand 1 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"%*bc1f\\t%y0,%1%/\"\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"mode\" \"none\")])\n+\n+;----------------------------------------------------------------------------\n+; Floating Point Reduced Precision Reciprocal Square Root Instructions.\n+;----------------------------------------------------------------------------\n+\n+; Floating Point Reduced Precision Reciprocal Square Root\n+; for Single (Sequence Step 1)\n+(define_insn \"mips_rsqrt1_s\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t(unspec:SF [(match_operand:SF 1 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_RSQRT1_S))]\n+  \"TARGET_MIPS3D\"\n+  \"rsqrt1.s\\t%0,%1\"\n+  [(set_attr \"type\" \"frsqrt\")\n+   (set_attr \"mode\" \"SF\")])\n+\n+; Floating Point Reduced Precision Reciprocal Square Root\n+; for Double (Sequence Step 1)\n+(define_insn \"mips_rsqrt1_d\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(unspec:DF [(match_operand:DF 1 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_RSQRT1_D))]\n+  \"TARGET_MIPS3D\"\n+  \"rsqrt1.d\\t%0,%1\"\n+  [(set_attr \"type\" \"frsqrt\")\n+   (set_attr \"mode\" \"DF\")])\n+\n+; Floating Point Reduced Precision Reciprocal Square Root\n+; for Paired Singles (Sequence Step 1)\n+(define_insn \"mips_rsqrt1_ps\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=f\")\n+\t(unspec:V2SF [(match_operand:V2SF 1 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_RSQRT1_PS))]\n+  \"TARGET_MIPS3D\"\n+  \"rsqrt1.ps\\t%0,%1\"\n+  [(set_attr \"type\" \"frsqrt\")\n+   (set_attr \"mode\" \"SF\")])\n+\n+; Floating Point Reduced Precision Reciprocal Square Root\n+; for Single (Sequence Step 2)\n+(define_insn \"mips_rsqrt2_s\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t(unspec:SF [(match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t    (match_operand:SF 2 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_RSQRT2_S))]\n+  \"TARGET_MIPS3D\"\n+  \"rsqrt2.s\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"frsqrt\")\n+   (set_attr \"mode\" \"SF\")])\n+\n+; Floating Point Reduced Precision Reciprocal Square Root\n+; for Double (Sequence Step 2)\n+(define_insn \"mips_rsqrt2_d\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(unspec:DF [(match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t    (match_operand:DF 2 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_RSQRT2_D))]\n+  \"TARGET_MIPS3D\"\n+  \"rsqrt2.d\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"frsqrt\")\n+   (set_attr \"mode\" \"DF\")])\n+\n+; Floating Point Reduced Precision Reciprocal Square Root \n+; for Paired Singles (Sequence Step 2)\n+(define_insn \"mips_rsqrt2_ps\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=f\")\n+\t(unspec:V2SF [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_RSQRT2_PS))]\n+  \"TARGET_MIPS3D\"\n+  \"rsqrt2.ps\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"frsqrt\")\n+   (set_attr \"mode\" \"SF\")])\n+\n+; Floating Point Reduced Precision Reciprocal for Single (Sequence Step 1)\n+(define_insn \"mips_recip1_s\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t(unspec:SF [(match_operand:SF 1 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_RECIP1_S))]\n+  \"TARGET_MIPS3D\"\n+  \"recip1.s\\t%0,%1\"\n+  [(set_attr \"type\" \"frdiv\")\n+   (set_attr \"mode\" \"SF\")])\n+\n+; Floating Point Reduced Precision Reciprocal for Double (Sequence Step 1)\n+(define_insn \"mips_recip1_d\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(unspec:DF [(match_operand:DF 1 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_RECIP1_D))]\n+  \"TARGET_MIPS3D\"\n+  \"recip1.d\\t%0,%1\"\n+  [(set_attr \"type\" \"frdiv\")\n+   (set_attr \"mode\" \"DF\")])\n+\n+; Floating Point Reduced Precision Reciprocal for Paired Singles \n+; (Sequence Step 1)\n+(define_insn \"mips_recip1_ps\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=f\")\n+\t(unspec:V2SF [(match_operand:V2SF 1 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_RECIP1_PS))]\n+  \"TARGET_MIPS3D\"\n+  \"recip1.ps\\t%0,%1\"\n+  [(set_attr \"type\" \"frdiv\")\n+   (set_attr \"mode\" \"SF\")])\n+\n+; Floating Point Reduced Precision Reciprocal for Single (Sequence Step 2)\n+(define_insn \"mips_recip2_s\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t(unspec:SF [(match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t    (match_operand:SF 2 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_RECIP2_S))]\n+  \"TARGET_MIPS3D\"\n+  \"recip2.s\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"frdiv\")\n+   (set_attr \"mode\" \"SF\")])\n+\n+; Floating Point Reduced Precision Reciprocal for Double (Sequence Step 2)\n+(define_insn \"mips_recip2_d\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(unspec:DF [(match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t    (match_operand:DF 2 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_RECIP2_D))]\n+  \"TARGET_MIPS3D\"\n+  \"recip2.d\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"frdiv\")\n+   (set_attr \"mode\" \"DF\")])\n+\n+; Floating Point Reduced Precision Reciprocal for Paired Singles \n+; (Sequence Step 2)\n+(define_insn \"mips_recip2_ps\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=f\")\n+\t(unspec:V2SF [(match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_RECIP2_PS))]\n+  \"TARGET_MIPS3D\"\n+  \"recip2.ps\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"frdiv\")\n+   (set_attr \"mode\" \"SF\")])"}, {"sha": "6508639870f540ad44001300ffa1288137724925", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 2021, "deletions": 25, "changes": 2046, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06a4ab70225ea3867373d64be6a13576cf7e9e2d/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06a4ab70225ea3867373d64be6a13576cf7e9e2d/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=06a4ab70225ea3867373d64be6a13576cf7e9e2d", "patch": "@@ -262,6 +262,16 @@ static tree mips_build_builtin_va_list (void);\n static tree mips_gimplify_va_arg_expr (tree, tree, tree *, tree *);\n static bool mips_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode mode,\n \t\t\t\t    tree, bool);\n+static bool mips_vector_mode_supported_p (enum machine_mode);\n+static void mips_init_builtins (void);\n+static rtx mips_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n+static rtx mips_expand_compare_builtin (rtx, unsigned int, tree);\n+static rtx mips_expand_ps_compare_builtin (enum mips_cmp_choice, rtx,\n+\t\t\t\t\t   unsigned int, tree);\n+static rtx mips_expand_4s_compare_builtin (enum mips_cmp_choice, rtx,\n+\t\t\t\t\t   unsigned int, tree);\n+static rtx mips_expand_ps_cond_move_builtin (enum mips_cmp_choice, rtx,\n+\t\t\t\t\t     unsigned int, tree);\n \n /* Structure to be filled in by compute_frame_size with register\n    save masks, and offsets for the current function.  */\n@@ -687,6 +697,14 @@ const struct mips_cpu_info mips_cpu_info_table[] = {\n #undef TARGET_PASS_BY_REFERENCE\n #define TARGET_PASS_BY_REFERENCE mips_pass_by_reference\n \n+#undef TARGET_VECTOR_MODE_SUPPORTED_P\n+#define TARGET_VECTOR_MODE_SUPPORTED_P mips_vector_mode_supported_p\n+\n+#undef TARGET_INIT_BUILTINS\n+#define TARGET_INIT_BUILTINS mips_init_builtins\n+#undef TARGET_EXPAND_BUILTIN\n+#define TARGET_EXPAND_BUILTIN mips_expand_builtin\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Classify symbol X, which must be a SYMBOL_REF or a LABEL_REF.  */\n@@ -1211,6 +1229,7 @@ mips_const_insns (rtx x)\n       return mips_build_integer (codes, INTVAL (x));\n \n     case CONST_DOUBLE:\n+    case CONST_VECTOR:\n       return (!TARGET_MIPS16 && x == CONST0_RTX (GET_MODE (x)) ? 1 : 0);\n \n     case CONST:\n@@ -2268,7 +2287,12 @@ mips_output_move (rtx dest, rtx src)\n   if (src_code == REG && FP_REG_P (REGNO (src)))\n     {\n       if (dest_code == REG && FP_REG_P (REGNO (dest)))\n-\treturn (dbl_p ? \"mov.d\\t%0,%1\" : \"mov.s\\t%0,%1\");\n+\t{\n+\t  if (GET_MODE (dest) == V2SFmode)\n+\t    return \"mov.ps\\t%0,%1\";\n+\t  else\n+\t    return (dbl_p ? \"mov.d\\t%0,%1\" : \"mov.s\\t%0,%1\");\n+\t}\n \n       if (dest_code == MEM)\n \treturn (dbl_p ? \"sdc1\\t%1,%0\" : \"swc1\\t%1,%0\");\n@@ -2945,18 +2969,22 @@ mips_arg_info (const CUMULATIVE_ARGS *cum, enum machine_mode mode,\n     case ABI_EABI:\n       /* The EABI conventions have traditionally been defined in terms\n \t of TYPE_MODE, regardless of the actual type.  */\n-      info->fpr_p = (GET_MODE_CLASS (mode) == MODE_FLOAT\n+      info->fpr_p = ((GET_MODE_CLASS (mode) == MODE_FLOAT\n+\t\t      || GET_MODE_CLASS (mode) == MODE_VECTOR_FLOAT)\n \t\t     && GET_MODE_SIZE (mode) <= UNITS_PER_FPVALUE);\n       break;\n \n     case ABI_32:\n     case ABI_O64:\n       /* Only leading floating-point scalars are passed in\n-\t floating-point registers.  */\n+\t floating-point registers.  We also handle vector floats the same\n+\t say, which is OK because they are not covered by the standard ABI.  */\n       info->fpr_p = (!cum->gp_reg_found\n \t\t     && cum->arg_number < 2\n-\t\t     && (type == 0 || SCALAR_FLOAT_TYPE_P (type))\n-\t\t     && GET_MODE_CLASS (mode) == MODE_FLOAT\n+\t\t     && (type == 0 || SCALAR_FLOAT_TYPE_P (type)\n+\t\t\t || VECTOR_FLOAT_TYPE_P (type))\n+\t\t     && (GET_MODE_CLASS (mode) == MODE_FLOAT\n+\t\t\t || GET_MODE_CLASS (mode) == MODE_VECTOR_FLOAT)\n \t\t     && GET_MODE_SIZE (mode) <= UNITS_PER_FPVALUE);\n       break;\n \n@@ -2967,7 +2995,8 @@ mips_arg_info (const CUMULATIVE_ARGS *cum, enum machine_mode mode,\n       info->fpr_p = (named\n \t\t     && (type == 0 || FLOAT_TYPE_P (type))\n \t\t     && (GET_MODE_CLASS (mode) == MODE_FLOAT\n-\t\t\t || GET_MODE_CLASS (mode) == MODE_COMPLEX_FLOAT)\n+\t\t\t || GET_MODE_CLASS (mode) == MODE_COMPLEX_FLOAT\n+\t\t\t || GET_MODE_CLASS (mode) == MODE_VECTOR_FLOAT)\n \t\t     && GET_MODE_UNIT_SIZE (mode) <= UNITS_PER_FPVALUE);\n \n       /* ??? According to the ABI documentation, the real and imaginary\n@@ -4114,6 +4143,26 @@ override_options (void)\n   REAL_MODE_FORMAT (TFmode) = &MIPS_TFMODE_FORMAT;\n #endif\n \n+  /* Make sure that the user didn't turn off paired single support when\n+     MIPS-3D support is requested.  */\n+  if (TARGET_MIPS3D && (target_flags_explicit & MASK_PAIRED_SINGLE)\n+      && !TARGET_PAIRED_SINGLE_FLOAT)\n+    error (\"-mips3d requires -mpaired-single\");\n+\n+  /* If TARGET_MIPS3D, enable MASK_PAIRED_SINGLE.  */\n+  if (TARGET_MIPS3D)\n+    target_flags |= MASK_PAIRED_SINGLE;\n+\n+  /* Make sure that when TARGET_PAIRED_SINGLE_FLOAT is true, TARGET_FLOAT64\n+     and TARGET_HARD_FLOAT are both true.  */\n+  if (TARGET_PAIRED_SINGLE_FLOAT && !(TARGET_FLOAT64 && TARGET_HARD_FLOAT))\n+    error (\"-mips3d/-mpaired-single must be used with -mfp64 -mhard-float\");\n+\n+  /* Make sure that the ISA supports TARGET_PAIRED_SINGLE_FLOAT when it is\n+     enabled.  */\n+  if (TARGET_PAIRED_SINGLE_FLOAT && !ISA_MIPS64)\n+    error (\"-mips3d/-mpaired-single must be used with -mips64\");\n+\n   mips_print_operand_punct['?'] = 1;\n   mips_print_operand_punct['#'] = 1;\n   mips_print_operand_punct['/'] = 1;\n@@ -4183,7 +4232,17 @@ override_options (void)\n \t{\n \t  register int temp;\n \n-\t  if (mode == CCmode)\n+\t  if (mode == CCV2mode)\n+\t    temp = (ISA_HAS_8CC\n+\t\t    && ST_REG_P (regno)\n+\t\t    && (regno - ST_REG_FIRST) % 2 == 0);\n+\n+\t  else if (mode == CCV4mode)\n+\t    temp = (ISA_HAS_8CC\n+\t\t    && ST_REG_P (regno)\n+\t\t    && (regno - ST_REG_FIRST) % 4 == 0);\n+\n+\t  else if (mode == CCmode)\n \t    {\n \t      if (! ISA_HAS_8CC)\n \t\ttemp = (regno == FPSW_REGNUM);\n@@ -4197,7 +4256,8 @@ override_options (void)\n \n \t  else if (FP_REG_P (regno))\n \t    temp = ((regno % FP_INC) == 0)\n-\t\t    && (((class == MODE_FLOAT || class == MODE_COMPLEX_FLOAT)\n+\t\t    && (((class == MODE_FLOAT || class == MODE_COMPLEX_FLOAT\n+\t\t\t  || class == MODE_VECTOR_FLOAT)\n \t\t\t && size <= UNITS_PER_FPVALUE)\n \t\t\t/* Allow integer modes that fit into a single\n \t\t\t   register.  We need to put integers into FPRs\n@@ -4466,6 +4526,31 @@ mips_debugger_offset (rtx addr, HOST_WIDE_INT offset)\n   return offset;\n }\n \f\n+/* A helper function for print_operand.  This prints out a floating point\n+   condition code register.  OP is the operand we are printing.  CODE is the\n+   rtx code of OP.  ALIGN is the required register alignment for OP.  OFFSET\n+   is the index into operand for multiple register operands.  If IGNORE is\n+   true, then we only print the register name if it isn't fcc0, and we\n+   follow it with a comma.  */\n+\n+static void\n+print_fcc_operand (FILE *file, rtx op, enum rtx_code code,\n+\t\t   int align, int offset, int ignore)\n+{\n+  int regnum;\n+\n+  if (code != REG)\n+    abort ();\n+\n+  regnum = REGNO (op);\n+  if (!ST_REG_P (regnum)\n+      || (regnum - ST_REG_FIRST) % align != 0)\n+    abort ();\n+\n+  if (!ignore || regnum != ST_REG_FIRST)\n+    fprintf (file, \"%s%s\", reg_names[regnum+offset], (ignore ? \",\" : \"\"));\n+}\n+\n /* Implement the PRINT_OPERAND macro.  The MIPS-specific operand codes are:\n \n    'X'  OP is CONST_INT, prints 32 bits in hexadecimal format = \"0x%08x\",\n@@ -4485,6 +4570,14 @@ mips_debugger_offset (rtx addr, HOST_WIDE_INT offset)\n    't'  like 'T', but with the EQ/NE cases reversed\n    'Z'  print register and a comma, but print nothing for $fcc0\n    'R'  print the reloc associated with LO_SUM\n+   'Y'  Check if the fcc register number is even.  Then print the fcc register \n+        plus 1.\n+   'y'  Check if the fcc register number is even.  Then print the fcc register.\n+   'V'  Check if the fcc register number divided by 4 is zero.  Then print \n+        the fcc register plus 2.\n+   'v'  Check if the fcc register number divided by 4 is zero.  Then print \n+        the fcc register.\n+   'Q'  print the fcc register.\n \n    The punctuation characters are:\n \n@@ -4635,7 +4728,7 @@ print_operand (FILE *file, rtx op, int letter)\n \t    if (align_labels_log > 0)\n \t      ASM_OUTPUT_ALIGN (file, align_labels_log);\n \t  }\n-\tbreak;\n+\t  break;\n \n \tdefault:\n \t  error (\"PRINT_OPERAND: unknown punctuation '%c'\", letter);\n@@ -4717,19 +4810,22 @@ print_operand (FILE *file, rtx op, int letter)\n     print_operand_reloc (file, op, mips_lo_relocs);\n \n   else if (letter == 'Z')\n-    {\n-      register int regnum;\n+    print_fcc_operand (file, op, code, 1, 0, 1);\n \n-      if (code != REG)\n-\tabort ();\n+  else if (letter == 'Y')\n+    print_fcc_operand (file, op, code, 2, 1, 0);\n \n-      regnum = REGNO (op);\n-      if (! ST_REG_P (regnum))\n-\tabort ();\n+  else if (letter == 'y')\n+    print_fcc_operand (file, op, code, 2, 0, 0);\n \n-      if (regnum != ST_REG_FIRST)\n-\tfprintf (file, \"%s,\", reg_names[regnum]);\n-    }\n+  else if (letter == 'V')\n+    print_fcc_operand (file, op, code, 4, 2, 0);\n+\n+  else if (letter == 'v')\n+    print_fcc_operand (file, op, code, 4, 0, 0);\n+\n+  else if (letter == 'Q')\n+    print_fcc_operand (file, op, code, 1, 0, 0);\n \n   else if (code == REG || code == SUBREG)\n     {\n@@ -6605,7 +6701,8 @@ mips_function_value (tree valtype, tree func ATTRIBUTE_UNUSED,\n \t}\n     }\n \n-  if (GET_MODE_CLASS (mode) == MODE_FLOAT\n+  if ((GET_MODE_CLASS (mode) == MODE_FLOAT\n+       || GET_MODE_CLASS (mode) == MODE_VECTOR_FLOAT)\n       && GET_MODE_SIZE (mode) <= UNITS_PER_HWFPVALUE)\n     return gen_rtx_REG (mode, FP_RETURN);\n \n@@ -6841,13 +6938,20 @@ mips_secondary_reload_class (enum reg_class class,\n    Usually all registers are word-sized.  The only supported exception\n    is -mgp64 -msingle-float, which has 64-bit words but 32-bit float\n    registers.  A word-based calculation is correct even in that case,\n-   since -msingle-float disallows multi-FPR values.  */\n+   since -msingle-float disallows multi-FPR values.\n+\n+   The FP status registers are an exception to this rule.  They are always\n+   4 bytes wide as they only hold condition code modes, and CCmode is always\n+   considered to be 4 bytes wide.  */\n \n int\n mips_class_max_nregs (enum reg_class class ATTRIBUTE_UNUSED,\n \t\t      enum machine_mode mode)\n {\n-  return (GET_MODE_SIZE (mode) + UNITS_PER_WORD - 1) / UNITS_PER_WORD;\n+  if (class == ST_REGS)\n+    return (GET_MODE_SIZE (mode) + 3) / 4;\n+  else\n+    return (GET_MODE_SIZE (mode) + UNITS_PER_WORD - 1) / UNITS_PER_WORD;\n }\n \n bool\n@@ -6856,6 +6960,15 @@ mips_valid_pointer_mode (enum machine_mode mode)\n   return (mode == SImode || (TARGET_64BIT && mode == DImode));\n }\n \n+/* Target hook for vector_mode_supported_p.  */\n+static bool\n+mips_vector_mode_supported_p (enum machine_mode mode)\n+{\n+  if (mode == V2SFmode && TARGET_PAIRED_SINGLE_FLOAT)\n+    return true;\n+  else\n+    return false;\n+}\n \f\n /* If we can access small data directly (using gp-relative relocation\n    operators) return the small data pointer, otherwise return null.\n@@ -8764,13 +8877,17 @@ mips_cpu_info_from_isa (int isa)\n   return 0;\n }\n \f\n-/* Implement HARD_REGNO_NREGS.  The size of FP registers are controlled\n-   by UNITS_PER_FPREG.  All other registers are word sized.  */\n+/* Implement HARD_REGNO_NREGS.  The size of FP registers is controlled\n+   by UNITS_PER_FPREG.  The size of FP status registers is always 4, because\n+   they only hold condition code modes, and CCmode is always considered to\n+   be 4 bytes wide.  All other registers are word sized.  */\n \n unsigned int\n mips_hard_regno_nregs (int regno, enum machine_mode mode)\n {\n-  if (! FP_REG_P (regno))\n+  if (ST_REG_P (regno))\n+    return ((GET_MODE_SIZE (mode) + 3) / 4);\n+  else if (! FP_REG_P (regno))\n     return ((GET_MODE_SIZE (mode) + UNITS_PER_WORD - 1) / UNITS_PER_WORD);\n   else\n     return ((GET_MODE_SIZE (mode) + UNITS_PER_FPREG - 1) / UNITS_PER_FPREG);\n@@ -9097,5 +9214,1884 @@ mips_prefetch_cookie (rtx write, rtx locality)\n   /* store_retained / load_retained.  */\n   return GEN_INT (INTVAL (write) + 6);\n }\n+\f\n+/* MIPS builtin function support. */\n+\n+struct builtin_description\n+{\n+  /* Instruction code.  */\n+  enum insn_code icode;\n+  /* Builtin function name.  */\n+  const char *name;              \n+  /* Builtin code.  */\n+  enum mips_builtins code;       \n+  /* Function type.  */\n+  enum mips_function_type ftype; \n+  /* The target flag required for this builtin function.  */\n+  int target_flags;   \n+};\n+\n+/* NOTE: The order of mips_bdesc[] must be the same as the order of\n+   enum mips_builtins{} in mips.h.  */\n+static const struct builtin_description mips_bdesc[] =\n+{\n+  { CODE_FOR_mips_pll_ps, \"__builtin_mips_pll_ps\", MIPS_BUILTIN_PLL_PS,\n+    MIPS_V2SF_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_pul_ps, \"__builtin_mips_pul_ps\", MIPS_BUILTIN_PUL_PS,\n+    MIPS_V2SF_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_plu_ps, \"__builtin_mips_plu_ps\", MIPS_BUILTIN_PLU_PS,\n+    MIPS_V2SF_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_puu_ps, \"__builtin_mips_puu_ps\", MIPS_BUILTIN_PUU_PS,\n+    MIPS_V2SF_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_cvt_ps_s, \"__builtin_mips_cvt_ps_s\", MIPS_BUILTIN_CVT_PS_S,\n+    MIPS_V2SF_FTYPE_SF_SF, MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_cvt_s_pl, \"__builtin_mips_cvt_s_pl\", MIPS_BUILTIN_CVT_S_PL,\n+    MIPS_SF_FTYPE_V2SF, MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_cvt_s_pu, \"__builtin_mips_cvt_s_pu\", MIPS_BUILTIN_CVT_S_PU,\n+    MIPS_SF_FTYPE_V2SF, MASK_PAIRED_SINGLE },\n+  { CODE_FOR_absv2sf2, \"__builtin_mips_abs_ps\", MIPS_BUILTIN_ABS_PS,\n+    MIPS_V2SF_FTYPE_V2SF, MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_alnv_ps, \"__builtin_mips_alnv_ps\", MIPS_BUILTIN_ALNV_PS,\n+    MIPS_V2SF_FTYPE_V2SF_V2SF_INT, MASK_PAIRED_SINGLE },\n+\n+  { CODE_FOR_mips_addr_ps, \"__builtin_mips_addr_ps\", MIPS_BUILTIN_ADDR_PS,\n+    MIPS_V2SF_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_mulr_ps, \"__builtin_mips_mulr_ps\", MIPS_BUILTIN_MULR_PS,\n+    MIPS_V2SF_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cvt_pw_ps, \"__builtin_mips_cvt_pw_ps\",\n+    MIPS_BUILTIN_CVT_PW_PS, MIPS_V2SF_FTYPE_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cvt_ps_pw, \"__builtin_mips_cvt_ps_pw\",\n+    MIPS_BUILTIN_CVT_PS_PW, MIPS_V2SF_FTYPE_V2SF, MASK_MIPS3D },\n+\n+  { CODE_FOR_mips_recip1_s, \"__builtin_mips_recip1_s\", MIPS_BUILTIN_RECIP1_S,\n+    MIPS_SF_FTYPE_SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_recip1_d, \"__builtin_mips_recip1_d\", MIPS_BUILTIN_RECIP1_D,\n+    MIPS_DF_FTYPE_DF, MASK_MIPS3D },\n+  { CODE_FOR_mips_recip1_ps, \"__builtin_mips_recip1_ps\",\n+    MIPS_BUILTIN_RECIP1_PS, MIPS_V2SF_FTYPE_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_recip2_s, \"__builtin_mips_recip2_s\", MIPS_BUILTIN_RECIP2_S,\n+    MIPS_SF_FTYPE_SF_SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_recip2_d, \"__builtin_mips_recip2_d\", MIPS_BUILTIN_RECIP2_D,\n+    MIPS_DF_FTYPE_DF_DF, MASK_MIPS3D },\n+  { CODE_FOR_mips_recip2_ps, \"__builtin_mips_recip2_ps\",\n+    MIPS_BUILTIN_RECIP2_PS, MIPS_V2SF_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+\n+  { CODE_FOR_mips_rsqrt1_s, \"__builtin_mips_rsqrt1_s\", MIPS_BUILTIN_RSQRT1_S,\n+    MIPS_SF_FTYPE_SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_rsqrt1_d, \"__builtin_mips_rsqrt1_d\", MIPS_BUILTIN_RSQRT1_D,\n+    MIPS_DF_FTYPE_DF, MASK_MIPS3D },\n+  { CODE_FOR_mips_rsqrt1_ps, \"__builtin_mips_rsqrt1_ps\",\n+    MIPS_BUILTIN_RSQRT1_PS, MIPS_V2SF_FTYPE_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_rsqrt2_s, \"__builtin_mips_rsqrt2_s\", MIPS_BUILTIN_RSQRT2_S,\n+    MIPS_SF_FTYPE_SF_SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_rsqrt2_d, \"__builtin_mips_rsqrt2_d\", MIPS_BUILTIN_RSQRT2_D,\n+    MIPS_DF_FTYPE_DF_DF, MASK_MIPS3D },\n+  { CODE_FOR_mips_rsqrt2_ps, \"__builtin_mips_rsqrt2_ps\",\n+    MIPS_BUILTIN_RSQRT2_PS, MIPS_V2SF_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+\n+  { CODE_FOR_mips_c_f_ps, \"__builtin_mips_any_c_f_ps\", MIPS_BUILTIN_ANY_C_F_PS,\n+    MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_c_f_ps, \"__builtin_mips_upper_c_f_ps\",\n+    MIPS_BUILTIN_UPPER_C_F_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_f_ps, \"__builtin_mips_lower_c_f_ps\",\n+    MIPS_BUILTIN_LOWER_C_F_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_f_ps, \"__builtin_mips_all_c_f_ps\", MIPS_BUILTIN_ALL_C_F_PS,\n+    MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_c_un_ps, \"__builtin_mips_any_c_un_ps\",\n+    MIPS_BUILTIN_ANY_C_UN_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_c_un_ps, \"__builtin_mips_upper_c_un_ps\",\n+    MIPS_BUILTIN_UPPER_C_UN_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_un_ps, \"__builtin_mips_lower_c_un_ps\",\n+    MIPS_BUILTIN_LOWER_C_UN_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_un_ps, \"__builtin_mips_all_c_un_ps\",\n+    MIPS_BUILTIN_ALL_C_UN_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_c_eq_ps, \"__builtin_mips_any_c_eq_ps\",\n+    MIPS_BUILTIN_ANY_C_EQ_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_c_eq_ps, \"__builtin_mips_upper_c_eq_ps\",\n+    MIPS_BUILTIN_UPPER_C_EQ_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_eq_ps, \"__builtin_mips_lower_c_eq_ps\",\n+    MIPS_BUILTIN_LOWER_C_EQ_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_eq_ps, \"__builtin_mips_all_c_eq_ps\",\n+    MIPS_BUILTIN_ALL_C_EQ_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_c_ueq_ps, \"__builtin_mips_any_c_ueq_ps\",\n+    MIPS_BUILTIN_ANY_C_UEQ_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_c_ueq_ps, \"__builtin_mips_upper_c_ueq_ps\",\n+    MIPS_BUILTIN_UPPER_C_UEQ_PS, MIPS_INT_FTYPE_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_ueq_ps, \"__builtin_mips_lower_c_ueq_ps\",\n+    MIPS_BUILTIN_LOWER_C_UEQ_PS, MIPS_INT_FTYPE_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_ueq_ps, \"__builtin_mips_all_c_ueq_ps\",\n+    MIPS_BUILTIN_ALL_C_UEQ_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_c_olt_ps, \"__builtin_mips_any_c_olt_ps\",\n+    MIPS_BUILTIN_ANY_C_OLT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_c_olt_ps, \"__builtin_mips_upper_c_olt_ps\",\n+    MIPS_BUILTIN_UPPER_C_OLT_PS, MIPS_INT_FTYPE_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_olt_ps, \"__builtin_mips_lower_c_olt_ps\",\n+    MIPS_BUILTIN_LOWER_C_OLT_PS, MIPS_INT_FTYPE_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_olt_ps, \"__builtin_mips_all_c_olt_ps\",\n+    MIPS_BUILTIN_ALL_C_OLT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_c_ult_ps, \"__builtin_mips_any_c_ult_ps\",\n+    MIPS_BUILTIN_ANY_C_ULT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_c_ult_ps, \"__builtin_mips_upper_c_ult_ps\",\n+    MIPS_BUILTIN_UPPER_C_ULT_PS, MIPS_INT_FTYPE_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_ult_ps, \"__builtin_mips_lower_c_ult_ps\",\n+    MIPS_BUILTIN_LOWER_C_ULT_PS, MIPS_INT_FTYPE_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_ult_ps, \"__builtin_mips_all_c_ult_ps\",\n+    MIPS_BUILTIN_ALL_C_ULT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_c_ole_ps, \"__builtin_mips_any_c_ole_ps\",\n+    MIPS_BUILTIN_ANY_C_OLE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_c_ole_ps, \"__builtin_mips_upper_c_ole_ps\",\n+    MIPS_BUILTIN_UPPER_C_OLE_PS, MIPS_INT_FTYPE_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_ole_ps, \"__builtin_mips_lower_c_ole_ps\",\n+    MIPS_BUILTIN_LOWER_C_OLE_PS, MIPS_INT_FTYPE_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_ole_ps, \"__builtin_mips_all_c_ole_ps\",\n+    MIPS_BUILTIN_ALL_C_OLE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_c_ule_ps, \"__builtin_mips_any_c_ule_ps\",\n+    MIPS_BUILTIN_ANY_C_ULE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_c_ule_ps, \"__builtin_mips_upper_c_ule_ps\",\n+    MIPS_BUILTIN_UPPER_C_ULE_PS, MIPS_INT_FTYPE_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_ule_ps, \"__builtin_mips_lower_c_ule_ps\",\n+    MIPS_BUILTIN_LOWER_C_ULE_PS, MIPS_INT_FTYPE_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_ule_ps, \"__builtin_mips_all_c_ule_ps\",\n+    MIPS_BUILTIN_ALL_C_ULE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_c_sf_ps, \"__builtin_mips_any_c_sf_ps\",\n+    MIPS_BUILTIN_ANY_C_SF_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_c_sf_ps, \"__builtin_mips_upper_c_sf_ps\",\n+    MIPS_BUILTIN_UPPER_C_SF_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_sf_ps, \"__builtin_mips_lower_c_sf_ps\",\n+    MIPS_BUILTIN_LOWER_C_SF_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_sf_ps, \"__builtin_mips_all_c_sf_ps\",\n+    MIPS_BUILTIN_ALL_C_SF_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_c_ngle_ps, \"__builtin_mips_any_c_ngle_ps\",\n+    MIPS_BUILTIN_ANY_C_NGLE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_c_ngle_ps, \"__builtin_mips_upper_c_ngle_ps\",\n+    MIPS_BUILTIN_UPPER_C_NGLE_PS, MIPS_INT_FTYPE_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_ngle_ps, \"__builtin_mips_lower_c_ngle_ps\",\n+    MIPS_BUILTIN_LOWER_C_NGLE_PS, MIPS_INT_FTYPE_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_ngle_ps, \"__builtin_mips_all_c_ngle_ps\",\n+    MIPS_BUILTIN_ALL_C_NGLE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_c_seq_ps, \"__builtin_mips_any_c_seq_ps\",\n+    MIPS_BUILTIN_ANY_C_SEQ_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_c_seq_ps, \"__builtin_mips_upper_c_seq_ps\",\n+    MIPS_BUILTIN_UPPER_C_SEQ_PS, MIPS_INT_FTYPE_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_seq_ps, \"__builtin_mips_lower_c_seq_ps\",\n+    MIPS_BUILTIN_LOWER_C_SEQ_PS, MIPS_INT_FTYPE_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_seq_ps, \"__builtin_mips_all_c_seq_ps\",\n+    MIPS_BUILTIN_ALL_C_SEQ_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_c_ngl_ps, \"__builtin_mips_any_c_ngl_ps\",\n+    MIPS_BUILTIN_ANY_C_NGL_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_c_ngl_ps, \"__builtin_mips_upper_c_ngl_ps\",\n+    MIPS_BUILTIN_UPPER_C_NGL_PS, MIPS_INT_FTYPE_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_ngl_ps, \"__builtin_mips_lower_c_ngl_ps\",\n+    MIPS_BUILTIN_LOWER_C_NGL_PS, MIPS_INT_FTYPE_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_ngl_ps, \"__builtin_mips_all_c_ngl_ps\",\n+    MIPS_BUILTIN_ALL_C_NGL_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_c_lt_ps, \"__builtin_mips_any_c_lt_ps\",\n+    MIPS_BUILTIN_ANY_C_LT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_c_lt_ps, \"__builtin_mips_upper_c_lt_ps\",\n+    MIPS_BUILTIN_UPPER_C_LT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_lt_ps, \"__builtin_mips_lower_c_lt_ps\",\n+    MIPS_BUILTIN_LOWER_C_LT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_lt_ps, \"__builtin_mips_all_c_lt_ps\",\n+    MIPS_BUILTIN_ALL_C_LT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_c_nge_ps, \"__builtin_mips_any_c_nge_ps\",\n+    MIPS_BUILTIN_ANY_C_NGE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_c_nge_ps, \"__builtin_mips_upper_c_nge_ps\",\n+    MIPS_BUILTIN_UPPER_C_NGE_PS, MIPS_INT_FTYPE_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_nge_ps, \"__builtin_mips_lower_c_nge_ps\",\n+    MIPS_BUILTIN_LOWER_C_NGE_PS, MIPS_INT_FTYPE_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_nge_ps, \"__builtin_mips_all_c_nge_ps\",\n+    MIPS_BUILTIN_ALL_C_NGE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_c_le_ps, \"__builtin_mips_any_c_le_ps\",\n+    MIPS_BUILTIN_ANY_C_LE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_c_le_ps, \"__builtin_mips_upper_c_le_ps\",\n+    MIPS_BUILTIN_UPPER_C_LE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_le_ps, \"__builtin_mips_lower_c_le_ps\",\n+    MIPS_BUILTIN_LOWER_C_LE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_le_ps, \"__builtin_mips_all_c_le_ps\",\n+    MIPS_BUILTIN_ALL_C_LE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_c_ngt_ps, \"__builtin_mips_any_c_ngt_ps\",\n+    MIPS_BUILTIN_ANY_C_NGT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_c_ngt_ps, \"__builtin_mips_upper_c_ngt_ps\",\n+    MIPS_BUILTIN_UPPER_C_NGT_PS, MIPS_INT_FTYPE_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_ngt_ps, \"__builtin_mips_lower_c_ngt_ps\",\n+    MIPS_BUILTIN_LOWER_C_NGT_PS, MIPS_INT_FTYPE_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_ngt_ps, \"__builtin_mips_all_c_ngt_ps\",\n+    MIPS_BUILTIN_ALL_C_NGT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+\n+  { CODE_FOR_mips_cabs_f_ps, \"__builtin_mips_any_cabs_f_ps\",\n+    MIPS_BUILTIN_ANY_CABS_F_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_f_ps, \"__builtin_mips_upper_cabs_f_ps\",\n+    MIPS_BUILTIN_UPPER_CABS_F_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_f_ps, \"__builtin_mips_lower_cabs_f_ps\",\n+    MIPS_BUILTIN_LOWER_CABS_F_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_f_ps, \"__builtin_mips_all_cabs_f_ps\",\n+    MIPS_BUILTIN_ALL_CABS_F_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_un_ps, \"__builtin_mips_any_cabs_un_ps\",\n+    MIPS_BUILTIN_ANY_CABS_UN_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_un_ps, \"__builtin_mips_upper_cabs_un_ps\",\n+    MIPS_BUILTIN_UPPER_CABS_UN_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_un_ps, \"__builtin_mips_lower_cabs_un_ps\",\n+    MIPS_BUILTIN_LOWER_CABS_UN_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_un_ps, \"__builtin_mips_all_cabs_un_ps\",\n+    MIPS_BUILTIN_ALL_CABS_UN_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_eq_ps, \"__builtin_mips_any_cabs_eq_ps\",\n+    MIPS_BUILTIN_ANY_CABS_EQ_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_eq_ps, \"__builtin_mips_upper_cabs_eq_ps\",\n+    MIPS_BUILTIN_UPPER_CABS_EQ_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_eq_ps, \"__builtin_mips_lower_cabs_eq_ps\",\n+    MIPS_BUILTIN_LOWER_CABS_EQ_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_eq_ps, \"__builtin_mips_all_cabs_eq_ps\",\n+    MIPS_BUILTIN_ALL_CABS_EQ_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ueq_ps, \"__builtin_mips_any_cabs_ueq_ps\",\n+    MIPS_BUILTIN_ANY_CABS_UEQ_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ueq_ps, \"__builtin_mips_upper_cabs_ueq_ps\",\n+    MIPS_BUILTIN_UPPER_CABS_UEQ_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ueq_ps, \"__builtin_mips_lower_cabs_ueq_ps\",\n+    MIPS_BUILTIN_LOWER_CABS_UEQ_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ueq_ps, \"__builtin_mips_all_cabs_ueq_ps\",\n+    MIPS_BUILTIN_ALL_CABS_UEQ_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_olt_ps, \"__builtin_mips_any_cabs_olt_ps\",\n+    MIPS_BUILTIN_ANY_CABS_OLT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_olt_ps, \"__builtin_mips_upper_cabs_olt_ps\",\n+    MIPS_BUILTIN_UPPER_CABS_OLT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_olt_ps, \"__builtin_mips_lower_cabs_olt_ps\",\n+    MIPS_BUILTIN_LOWER_CABS_OLT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_olt_ps, \"__builtin_mips_all_cabs_olt_ps\",\n+    MIPS_BUILTIN_ALL_CABS_OLT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ult_ps, \"__builtin_mips_any_cabs_ult_ps\",\n+    MIPS_BUILTIN_ANY_CABS_ULT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ult_ps, \"__builtin_mips_upper_cabs_ult_ps\",\n+    MIPS_BUILTIN_UPPER_CABS_ULT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ult_ps, \"__builtin_mips_lower_cabs_ult_ps\",\n+    MIPS_BUILTIN_LOWER_CABS_ULT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ult_ps, \"__builtin_mips_all_cabs_ult_ps\",\n+    MIPS_BUILTIN_ALL_CABS_ULT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ole_ps, \"__builtin_mips_any_cabs_ole_ps\",\n+    MIPS_BUILTIN_ANY_CABS_OLE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ole_ps, \"__builtin_mips_upper_cabs_ole_ps\",\n+    MIPS_BUILTIN_UPPER_CABS_OLE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ole_ps, \"__builtin_mips_lower_cabs_ole_ps\",\n+    MIPS_BUILTIN_LOWER_CABS_OLE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ole_ps, \"__builtin_mips_all_cabs_ole_ps\",\n+    MIPS_BUILTIN_ALL_CABS_OLE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ule_ps, \"__builtin_mips_any_cabs_ule_ps\",\n+    MIPS_BUILTIN_ANY_CABS_ULE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ule_ps, \"__builtin_mips_upper_cabs_ule_ps\",\n+    MIPS_BUILTIN_UPPER_CABS_ULE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ule_ps, \"__builtin_mips_lower_cabs_ule_ps\",\n+    MIPS_BUILTIN_LOWER_CABS_ULE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ule_ps, \"__builtin_mips_all_cabs_ule_ps\",\n+    MIPS_BUILTIN_ALL_CABS_ULE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_sf_ps, \"__builtin_mips_any_cabs_sf_ps\",\n+    MIPS_BUILTIN_ANY_CABS_SF_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_sf_ps, \"__builtin_mips_upper_cabs_sf_ps\",\n+    MIPS_BUILTIN_UPPER_CABS_SF_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_sf_ps, \"__builtin_mips_lower_cabs_sf_ps\",\n+    MIPS_BUILTIN_LOWER_CABS_SF_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_sf_ps, \"__builtin_mips_all_cabs_sf_ps\",\n+    MIPS_BUILTIN_ALL_CABS_SF_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ngle_ps, \"__builtin_mips_any_cabs_ngle_ps\",\n+    MIPS_BUILTIN_ANY_CABS_NGLE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ngle_ps, \"__builtin_mips_upper_cabs_ngle_ps\",\n+    MIPS_BUILTIN_UPPER_CABS_NGLE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ngle_ps, \"__builtin_mips_lower_cabs_ngle_ps\",\n+    MIPS_BUILTIN_LOWER_CABS_NGLE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ngle_ps, \"__builtin_mips_all_cabs_ngle_ps\",\n+    MIPS_BUILTIN_ALL_CABS_NGLE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_seq_ps, \"__builtin_mips_any_cabs_seq_ps\",\n+    MIPS_BUILTIN_ANY_CABS_SEQ_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_seq_ps, \"__builtin_mips_upper_cabs_seq_ps\",\n+    MIPS_BUILTIN_UPPER_CABS_SEQ_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_seq_ps, \"__builtin_mips_lower_cabs_seq_ps\",\n+    MIPS_BUILTIN_LOWER_CABS_SEQ_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_seq_ps, \"__builtin_mips_all_cabs_seq_ps\",\n+    MIPS_BUILTIN_ALL_CABS_SEQ_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ngl_ps, \"__builtin_mips_any_cabs_ngl_ps\",\n+    MIPS_BUILTIN_ANY_CABS_NGL_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ngl_ps, \"__builtin_mips_upper_cabs_ngl_ps\",\n+    MIPS_BUILTIN_UPPER_CABS_NGL_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ngl_ps, \"__builtin_mips_lower_cabs_ngl_ps\",\n+    MIPS_BUILTIN_LOWER_CABS_NGL_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ngl_ps, \"__builtin_mips_all_cabs_ngl_ps\",\n+    MIPS_BUILTIN_ALL_CABS_NGL_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_lt_ps, \"__builtin_mips_any_cabs_lt_ps\",\n+    MIPS_BUILTIN_ANY_CABS_LT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_lt_ps, \"__builtin_mips_upper_cabs_lt_ps\",\n+    MIPS_BUILTIN_UPPER_CABS_LT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_lt_ps, \"__builtin_mips_lower_cabs_lt_ps\",\n+    MIPS_BUILTIN_LOWER_CABS_LT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_lt_ps, \"__builtin_mips_all_cabs_lt_ps\",\n+    MIPS_BUILTIN_ALL_CABS_LT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_nge_ps, \"__builtin_mips_any_cabs_nge_ps\",\n+    MIPS_BUILTIN_ANY_CABS_NGE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_nge_ps, \"__builtin_mips_upper_cabs_nge_ps\",\n+    MIPS_BUILTIN_UPPER_CABS_NGE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_nge_ps, \"__builtin_mips_lower_cabs_nge_ps\",\n+    MIPS_BUILTIN_LOWER_CABS_NGE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_nge_ps, \"__builtin_mips_all_cabs_nge_ps\",\n+    MIPS_BUILTIN_ALL_CABS_NGE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_le_ps, \"__builtin_mips_any_cabs_le_ps\",\n+    MIPS_BUILTIN_ANY_CABS_LE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_le_ps, \"__builtin_mips_upper_cabs_le_ps\",\n+    MIPS_BUILTIN_UPPER_CABS_LE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_le_ps, \"__builtin_mips_lower_cabs_le_ps\",\n+    MIPS_BUILTIN_LOWER_CABS_LE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_le_ps, \"__builtin_mips_all_cabs_le_ps\",\n+    MIPS_BUILTIN_ALL_CABS_LE_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ngt_ps, \"__builtin_mips_any_cabs_ngt_ps\",\n+    MIPS_BUILTIN_ANY_CABS_NGT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ngt_ps, \"__builtin_mips_upper_cabs_ngt_ps\",\n+    MIPS_BUILTIN_UPPER_CABS_NGT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ngt_ps, \"__builtin_mips_lower_cabs_ngt_ps\",\n+    MIPS_BUILTIN_LOWER_CABS_NGT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ngt_ps, \"__builtin_mips_all_cabs_ngt_ps\",\n+    MIPS_BUILTIN_ALL_CABS_NGT_PS, MIPS_INT_FTYPE_V2SF_V2SF, MASK_MIPS3D },\n+\n+  { CODE_FOR_mips_c_f_4s, \"__builtin_mips_any_c_f_4s\",\n+    MIPS_BUILTIN_ANY_C_F_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_c_f_4s, \"__builtin_mips_all_c_f_4s\",\n+    MIPS_BUILTIN_ALL_C_F_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_c_un_4s, \"__builtin_mips_any_c_un_4s\",\n+    MIPS_BUILTIN_ANY_C_UN_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_c_un_4s, \"__builtin_mips_all_c_un_4s\",\n+    MIPS_BUILTIN_ALL_C_UN_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_c_eq_4s, \"__builtin_mips_any_c_eq_4s\",\n+    MIPS_BUILTIN_ANY_C_EQ_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_c_eq_4s, \"__builtin_mips_all_c_eq_4s\",\n+    MIPS_BUILTIN_ALL_C_EQ_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_c_ueq_4s, \"__builtin_mips_any_c_ueq_4s\",\n+    MIPS_BUILTIN_ANY_C_UEQ_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_c_ueq_4s, \"__builtin_mips_all_c_ueq_4s\",\n+    MIPS_BUILTIN_ALL_C_UEQ_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_c_olt_4s, \"__builtin_mips_any_c_olt_4s\",\n+    MIPS_BUILTIN_ANY_C_OLT_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_c_olt_4s, \"__builtin_mips_all_c_olt_4s\",\n+    MIPS_BUILTIN_ALL_C_OLT_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_c_ult_4s, \"__builtin_mips_any_c_ult_4s\",\n+    MIPS_BUILTIN_ANY_C_ULT_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_c_ult_4s, \"__builtin_mips_all_c_ult_4s\",\n+    MIPS_BUILTIN_ALL_C_ULT_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_c_ole_4s, \"__builtin_mips_any_c_ole_4s\",\n+    MIPS_BUILTIN_ANY_C_OLE_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_c_ole_4s, \"__builtin_mips_all_c_ole_4s\",\n+    MIPS_BUILTIN_ALL_C_OLE_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_c_ule_4s, \"__builtin_mips_any_c_ule_4s\",\n+    MIPS_BUILTIN_ANY_C_ULE_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_c_ule_4s, \"__builtin_mips_all_c_ule_4s\",\n+    MIPS_BUILTIN_ALL_C_ULE_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_c_sf_4s, \"__builtin_mips_any_c_sf_4s\",\n+    MIPS_BUILTIN_ANY_C_SF_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_c_sf_4s, \"__builtin_mips_all_c_sf_4s\",\n+    MIPS_BUILTIN_ALL_C_SF_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_c_ngle_4s, \"__builtin_mips_any_c_ngle_4s\",\n+    MIPS_BUILTIN_ANY_C_NGLE_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_c_ngle_4s, \"__builtin_mips_all_c_ngle_4s\",\n+    MIPS_BUILTIN_ALL_C_NGLE_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_c_seq_4s, \"__builtin_mips_any_c_seq_4s\",\n+    MIPS_BUILTIN_ANY_C_SEQ_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_c_seq_4s, \"__builtin_mips_all_c_seq_4s\",\n+    MIPS_BUILTIN_ALL_C_SEQ_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_c_ngl_4s, \"__builtin_mips_any_c_ngl_4s\",\n+    MIPS_BUILTIN_ANY_C_NGL_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_c_ngl_4s, \"__builtin_mips_all_c_ngl_4s\",\n+    MIPS_BUILTIN_ALL_C_NGL_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_c_lt_4s, \"__builtin_mips_any_c_lt_4s\",\n+    MIPS_BUILTIN_ANY_C_LT_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_c_lt_4s, \"__builtin_mips_all_c_lt_4s\",\n+    MIPS_BUILTIN_ALL_C_LT_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_c_nge_4s, \"__builtin_mips_any_c_nge_4s\",\n+    MIPS_BUILTIN_ANY_C_NGE_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_c_nge_4s, \"__builtin_mips_all_c_nge_4s\",\n+    MIPS_BUILTIN_ALL_C_NGE_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_c_le_4s, \"__builtin_mips_any_c_le_4s\",\n+    MIPS_BUILTIN_ANY_C_LE_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_c_le_4s, \"__builtin_mips_all_c_le_4s\",\n+    MIPS_BUILTIN_ALL_C_LE_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_c_ngt_4s, \"__builtin_mips_any_c_ngt_4s\",\n+    MIPS_BUILTIN_ANY_C_NGT_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_c_ngt_4s, \"__builtin_mips_all_c_ngt_4s\",\n+    MIPS_BUILTIN_ALL_C_NGT_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+\n+  { CODE_FOR_mips_cabs_f_4s, \"__builtin_mips_any_cabs_f_4s\",\n+    MIPS_BUILTIN_ANY_CABS_F_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_f_4s, \"__builtin_mips_all_cabs_f_4s\",\n+    MIPS_BUILTIN_ALL_CABS_F_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_un_4s, \"__builtin_mips_any_cabs_un_4s\",\n+    MIPS_BUILTIN_ANY_CABS_UN_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_un_4s, \"__builtin_mips_all_cabs_un_4s\",\n+    MIPS_BUILTIN_ALL_CABS_UN_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_eq_4s, \"__builtin_mips_any_cabs_eq_4s\",\n+    MIPS_BUILTIN_ANY_CABS_EQ_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_eq_4s, \"__builtin_mips_all_cabs_eq_4s\",\n+    MIPS_BUILTIN_ALL_CABS_EQ_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ueq_4s, \"__builtin_mips_any_cabs_ueq_4s\",\n+    MIPS_BUILTIN_ANY_CABS_UEQ_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ueq_4s, \"__builtin_mips_all_cabs_ueq_4s\",\n+    MIPS_BUILTIN_ALL_CABS_UEQ_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_olt_4s, \"__builtin_mips_any_cabs_olt_4s\",\n+    MIPS_BUILTIN_ANY_CABS_OLT_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_olt_4s, \"__builtin_mips_all_cabs_olt_4s\",\n+    MIPS_BUILTIN_ALL_CABS_OLT_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ult_4s, \"__builtin_mips_any_cabs_ult_4s\",\n+    MIPS_BUILTIN_ANY_CABS_ULT_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ult_4s, \"__builtin_mips_all_cabs_ult_4s\",\n+    MIPS_BUILTIN_ALL_CABS_ULT_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ole_4s, \"__builtin_mips_any_cabs_ole_4s\",\n+    MIPS_BUILTIN_ANY_CABS_OLE_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ole_4s, \"__builtin_mips_all_cabs_ole_4s\",\n+    MIPS_BUILTIN_ALL_CABS_OLE_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ule_4s, \"__builtin_mips_any_cabs_ule_4s\",\n+    MIPS_BUILTIN_ANY_CABS_ULE_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ule_4s, \"__builtin_mips_all_cabs_ule_4s\",\n+    MIPS_BUILTIN_ALL_CABS_ULE_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_sf_4s, \"__builtin_mips_any_cabs_sf_4s\",\n+    MIPS_BUILTIN_ANY_CABS_SF_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_sf_4s, \"__builtin_mips_all_cabs_sf_4s\",\n+    MIPS_BUILTIN_ALL_CABS_SF_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ngle_4s, \"__builtin_mips_any_cabs_ngle_4s\",\n+    MIPS_BUILTIN_ANY_CABS_NGLE_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ngle_4s, \"__builtin_mips_all_cabs_ngle_4s\",\n+    MIPS_BUILTIN_ALL_CABS_NGLE_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_seq_4s, \"__builtin_mips_any_cabs_seq_4s\",\n+    MIPS_BUILTIN_ANY_CABS_SEQ_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_seq_4s, \"__builtin_mips_all_cabs_seq_4s\",\n+    MIPS_BUILTIN_ALL_CABS_SEQ_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ngl_4s, \"__builtin_mips_any_cabs_ngl_4s\",\n+    MIPS_BUILTIN_ANY_CABS_NGL_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ngl_4s, \"__builtin_mips_all_cabs_ngl_4s\",\n+    MIPS_BUILTIN_ALL_CABS_NGL_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_lt_4s, \"__builtin_mips_any_cabs_lt_4s\",\n+    MIPS_BUILTIN_ANY_CABS_LT_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_lt_4s, \"__builtin_mips_all_cabs_lt_4s\",\n+    MIPS_BUILTIN_ALL_CABS_LT_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_nge_4s, \"__builtin_mips_any_cabs_nge_4s\",\n+    MIPS_BUILTIN_ANY_CABS_NGE_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_nge_4s, \"__builtin_mips_all_cabs_nge_4s\",\n+    MIPS_BUILTIN_ALL_CABS_NGE_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_le_4s, \"__builtin_mips_any_cabs_le_4s\",\n+    MIPS_BUILTIN_ANY_CABS_LE_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_le_4s, \"__builtin_mips_all_cabs_le_4s\",\n+    MIPS_BUILTIN_ALL_CABS_LE_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ngt_4s, \"__builtin_mips_any_cabs_ngt_4s\",\n+    MIPS_BUILTIN_ANY_CABS_NGT_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ngt_4s, \"__builtin_mips_all_cabs_ngt_4s\",\n+    MIPS_BUILTIN_ALL_CABS_NGT_4S, MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+\n+  { CODE_FOR_mips_cabs_f_s, \"__builtin_mips_cabs_f_s\",\n+    MIPS_BUILTIN_CABS_F_S, MIPS_INT_FTYPE_SF_SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_un_s, \"__builtin_mips_cabs_un_s\",\n+    MIPS_BUILTIN_CABS_UN_S, MIPS_INT_FTYPE_SF_SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_eq_s, \"__builtin_mips_cabs_eq_s\",\n+    MIPS_BUILTIN_CABS_EQ_S, MIPS_INT_FTYPE_SF_SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ueq_s, \"__builtin_mips_cabs_ueq_s\",\n+    MIPS_BUILTIN_CABS_UEQ_S, MIPS_INT_FTYPE_SF_SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_olt_s, \"__builtin_mips_cabs_olt_s\",\n+    MIPS_BUILTIN_CABS_OLT_S, MIPS_INT_FTYPE_SF_SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ult_s, \"__builtin_mips_cabs_ult_s\",\n+    MIPS_BUILTIN_CABS_ULT_S, MIPS_INT_FTYPE_SF_SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ole_s, \"__builtin_mips_cabs_ole_s\",\n+    MIPS_BUILTIN_CABS_OLE_S, MIPS_INT_FTYPE_SF_SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ule_s, \"__builtin_mips_cabs_ule_s\",\n+    MIPS_BUILTIN_CABS_ULE_S, MIPS_INT_FTYPE_SF_SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_sf_s, \"__builtin_mips_cabs_sf_s\",\n+    MIPS_BUILTIN_CABS_SF_S, MIPS_INT_FTYPE_SF_SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ngle_s, \"__builtin_mips_cabs_ngle_s\",\n+    MIPS_BUILTIN_CABS_NGLE_S, MIPS_INT_FTYPE_SF_SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_seq_s, \"__builtin_mips_cabs_seq_s\",\n+    MIPS_BUILTIN_CABS_SEQ_S, MIPS_INT_FTYPE_SF_SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ngl_s, \"__builtin_mips_cabs_ngl_s\",\n+    MIPS_BUILTIN_CABS_NGL_S, MIPS_INT_FTYPE_SF_SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_lt_s, \"__builtin_mips_cabs_lt_s\",\n+    MIPS_BUILTIN_CABS_LT_S, MIPS_INT_FTYPE_SF_SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_nge_s, \"__builtin_mips_cabs_nge_s\",\n+    MIPS_BUILTIN_CABS_NGE_S, MIPS_INT_FTYPE_SF_SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_le_s, \"__builtin_mips_cabs_le_s\",\n+    MIPS_BUILTIN_CABS_LE_S, MIPS_INT_FTYPE_SF_SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ngt_s, \"__builtin_mips_cabs_ngt_s\",\n+    MIPS_BUILTIN_CABS_NGT_S, MIPS_INT_FTYPE_SF_SF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_f_d, \"__builtin_mips_cabs_f_d\",\n+    MIPS_BUILTIN_CABS_F_D, MIPS_INT_FTYPE_DF_DF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_un_d, \"__builtin_mips_cabs_un_d\",\n+    MIPS_BUILTIN_CABS_UN_D, MIPS_INT_FTYPE_DF_DF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_eq_d, \"__builtin_mips_cabs_eq_d\",\n+    MIPS_BUILTIN_CABS_EQ_D, MIPS_INT_FTYPE_DF_DF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ueq_d, \"__builtin_mips_cabs_ueq_d\",\n+    MIPS_BUILTIN_CABS_UEQ_D, MIPS_INT_FTYPE_DF_DF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_olt_d, \"__builtin_mips_cabs_olt_d\",\n+    MIPS_BUILTIN_CABS_OLT_D, MIPS_INT_FTYPE_DF_DF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ult_d, \"__builtin_mips_cabs_ult_d\",\n+    MIPS_BUILTIN_CABS_ULT_D, MIPS_INT_FTYPE_DF_DF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ole_d, \"__builtin_mips_cabs_ole_d\",\n+    MIPS_BUILTIN_CABS_OLE_D, MIPS_INT_FTYPE_DF_DF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ule_d, \"__builtin_mips_cabs_ule_d\",\n+    MIPS_BUILTIN_CABS_ULE_D, MIPS_INT_FTYPE_DF_DF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_sf_d, \"__builtin_mips_cabs_sf_d\",\n+    MIPS_BUILTIN_CABS_SF_D, MIPS_INT_FTYPE_DF_DF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ngle_d, \"__builtin_mips_cabs_ngle_d\",\n+    MIPS_BUILTIN_CABS_NGLE_D, MIPS_INT_FTYPE_DF_DF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_seq_d, \"__builtin_mips_cabs_seq_d\",\n+    MIPS_BUILTIN_CABS_SEQ_D, MIPS_INT_FTYPE_DF_DF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ngl_d, \"__builtin_mips_cabs_ngl_d\",\n+    MIPS_BUILTIN_CABS_NGL_D, MIPS_INT_FTYPE_DF_DF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_lt_d, \"__builtin_mips_cabs_lt_d\",\n+    MIPS_BUILTIN_CABS_LT_D, MIPS_INT_FTYPE_DF_DF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_nge_d, \"__builtin_mips_cabs_nge_d\",\n+    MIPS_BUILTIN_CABS_NGE_D, MIPS_INT_FTYPE_DF_DF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_le_d, \"__builtin_mips_cabs_le_d\",\n+    MIPS_BUILTIN_CABS_LE_D, MIPS_INT_FTYPE_DF_DF, MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ngt_d, \"__builtin_mips_cabs_ngt_d\",\n+    MIPS_BUILTIN_CABS_NGT_D, MIPS_INT_FTYPE_DF_DF, MASK_MIPS3D },\n+\n+  { CODE_FOR_mips_c_f_ps, \"__builtin_mips_movt_c_f_ps\",\n+    MIPS_BUILTIN_MOVT_C_F_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_un_ps, \"__builtin_mips_movt_c_un_ps\",\n+    MIPS_BUILTIN_MOVT_C_UN_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_eq_ps, \"__builtin_mips_movt_c_eq_ps\",\n+    MIPS_BUILTIN_MOVT_C_EQ_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_ueq_ps, \"__builtin_mips_movt_c_ueq_ps\",\n+    MIPS_BUILTIN_MOVT_C_UEQ_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_olt_ps, \"__builtin_mips_movt_c_olt_ps\",\n+    MIPS_BUILTIN_MOVT_C_OLT_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_ult_ps, \"__builtin_mips_movt_c_ult_ps\",\n+    MIPS_BUILTIN_MOVT_C_ULT_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_ole_ps, \"__builtin_mips_movt_c_ole_ps\",\n+    MIPS_BUILTIN_MOVT_C_OLE_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_ule_ps, \"__builtin_mips_movt_c_ule_ps\",\n+    MIPS_BUILTIN_MOVT_C_ULE_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_sf_ps, \"__builtin_mips_movt_c_sf_ps\",\n+    MIPS_BUILTIN_MOVT_C_SF_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_ngle_ps, \"__builtin_mips_movt_c_ngle_ps\",\n+    MIPS_BUILTIN_MOVT_C_NGLE_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_seq_ps, \"__builtin_mips_movt_c_seq_ps\",\n+    MIPS_BUILTIN_MOVT_C_SEQ_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_ngl_ps, \"__builtin_mips_movt_c_ngl_ps\",\n+    MIPS_BUILTIN_MOVT_C_NGL_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_lt_ps, \"__builtin_mips_movt_c_lt_ps\",\n+    MIPS_BUILTIN_MOVT_C_LT_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_nge_ps, \"__builtin_mips_movt_c_nge_ps\",\n+    MIPS_BUILTIN_MOVT_C_NGE_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_le_ps, \"__builtin_mips_movt_c_le_ps\",\n+    MIPS_BUILTIN_MOVT_C_LE_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_ngt_ps, \"__builtin_mips_movt_c_ngt_ps\",\n+    MIPS_BUILTIN_MOVT_C_NGT_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_cabs_f_ps, \"__builtin_mips_movt_cabs_f_ps\",\n+    MIPS_BUILTIN_MOVT_CABS_F_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_un_ps, \"__builtin_mips_movt_cabs_un_ps\",\n+    MIPS_BUILTIN_MOVT_CABS_UN_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_eq_ps, \"__builtin_mips_movt_cabs_eq_ps\",\n+    MIPS_BUILTIN_MOVT_CABS_EQ_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ueq_ps, \"__builtin_mips_movt_cabs_ueq_ps\",\n+    MIPS_BUILTIN_MOVT_CABS_UEQ_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_olt_ps, \"__builtin_mips_movt_cabs_olt_ps\",\n+    MIPS_BUILTIN_MOVT_CABS_OLT_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ult_ps, \"__builtin_mips_movt_cabs_ult_ps\",\n+    MIPS_BUILTIN_MOVT_CABS_ULT_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ole_ps, \"__builtin_mips_movt_cabs_ole_ps\",\n+    MIPS_BUILTIN_MOVT_CABS_OLE_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ule_ps, \"__builtin_mips_movt_cabs_ule_ps\",\n+    MIPS_BUILTIN_MOVT_CABS_ULE_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_sf_ps, \"__builtin_mips_movt_cabs_sf_ps\",\n+    MIPS_BUILTIN_MOVT_CABS_SF_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ngle_ps, \"__builtin_mips_movt_cabs_ngle_ps\",\n+    MIPS_BUILTIN_MOVT_CABS_NGLE_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_seq_ps, \"__builtin_mips_movt_cabs_seq_ps\",\n+    MIPS_BUILTIN_MOVT_CABS_SEQ_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ngl_ps, \"__builtin_mips_movt_cabs_ngl_ps\",\n+    MIPS_BUILTIN_MOVT_CABS_NGL_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_lt_ps, \"__builtin_mips_movt_cabs_lt_ps\",\n+    MIPS_BUILTIN_MOVT_CABS_LT_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_nge_ps, \"__builtin_mips_movt_cabs_nge_ps\",\n+    MIPS_BUILTIN_MOVT_CABS_NGE_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_le_ps, \"__builtin_mips_movt_cabs_le_ps\",\n+    MIPS_BUILTIN_MOVT_CABS_LE_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ngt_ps, \"__builtin_mips_movt_cabs_ngt_ps\",\n+    MIPS_BUILTIN_MOVT_CABS_NGT_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_c_f_ps, \"__builtin_mips_movf_c_f_ps\",\n+    MIPS_BUILTIN_MOVF_C_F_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_un_ps, \"__builtin_mips_movf_c_un_ps\",\n+    MIPS_BUILTIN_MOVF_C_UN_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_eq_ps, \"__builtin_mips_movf_c_eq_ps\",\n+    MIPS_BUILTIN_MOVF_C_EQ_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_ueq_ps, \"__builtin_mips_movf_c_ueq_ps\",\n+    MIPS_BUILTIN_MOVF_C_UEQ_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_olt_ps, \"__builtin_mips_movf_c_olt_ps\",\n+    MIPS_BUILTIN_MOVF_C_OLT_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_ult_ps, \"__builtin_mips_movf_c_ult_ps\",\n+    MIPS_BUILTIN_MOVF_C_ULT_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_ole_ps, \"__builtin_mips_movf_c_ole_ps\",\n+    MIPS_BUILTIN_MOVF_C_OLE_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_ule_ps, \"__builtin_mips_movf_c_ule_ps\",\n+    MIPS_BUILTIN_MOVF_C_ULE_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_sf_ps, \"__builtin_mips_movf_c_sf_ps\",\n+    MIPS_BUILTIN_MOVF_C_SF_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_ngle_ps, \"__builtin_mips_movf_c_ngle_ps\",\n+    MIPS_BUILTIN_MOVF_C_NGLE_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_seq_ps, \"__builtin_mips_movf_c_seq_ps\",\n+    MIPS_BUILTIN_MOVF_C_SEQ_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_ngl_ps, \"__builtin_mips_movf_c_ngl_ps\",\n+    MIPS_BUILTIN_MOVF_C_NGL_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_lt_ps, \"__builtin_mips_movf_c_lt_ps\",\n+    MIPS_BUILTIN_MOVF_C_LT_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_nge_ps, \"__builtin_mips_movf_c_nge_ps\",\n+    MIPS_BUILTIN_MOVF_C_NGE_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_le_ps, \"__builtin_mips_movf_c_le_ps\",\n+    MIPS_BUILTIN_MOVF_C_LE_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_c_ngt_ps, \"__builtin_mips_movf_c_ngt_ps\",\n+    MIPS_BUILTIN_MOVF_C_NGT_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_PAIRED_SINGLE },\n+  { CODE_FOR_mips_cabs_f_ps, \"__builtin_mips_movf_cabs_f_ps\",\n+    MIPS_BUILTIN_MOVF_CABS_F_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_un_ps, \"__builtin_mips_movf_cabs_un_ps\",\n+    MIPS_BUILTIN_MOVF_CABS_UN_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_eq_ps, \"__builtin_mips_movf_cabs_eq_ps\",\n+    MIPS_BUILTIN_MOVF_CABS_EQ_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ueq_ps, \"__builtin_mips_movf_cabs_ueq_ps\",\n+    MIPS_BUILTIN_MOVF_CABS_UEQ_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_olt_ps, \"__builtin_mips_movf_cabs_olt_ps\",\n+    MIPS_BUILTIN_MOVF_CABS_OLT_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ult_ps, \"__builtin_mips_movf_cabs_ult_ps\",\n+    MIPS_BUILTIN_MOVF_CABS_ULT_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ole_ps, \"__builtin_mips_movf_cabs_ole_ps\",\n+    MIPS_BUILTIN_MOVF_CABS_OLE_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ule_ps, \"__builtin_mips_movf_cabs_ule_ps\",\n+    MIPS_BUILTIN_MOVF_CABS_ULE_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_sf_ps, \"__builtin_mips_movf_cabs_sf_ps\",\n+    MIPS_BUILTIN_MOVF_CABS_SF_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ngle_ps, \"__builtin_mips_movf_cabs_ngle_ps\",\n+    MIPS_BUILTIN_MOVF_CABS_NGLE_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_seq_ps, \"__builtin_mips_movf_cabs_seq_ps\",\n+    MIPS_BUILTIN_MOVF_CABS_SEQ_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ngl_ps, \"__builtin_mips_movf_cabs_ngl_ps\",\n+    MIPS_BUILTIN_MOVF_CABS_NGL_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_lt_ps, \"__builtin_mips_movf_cabs_lt_ps\",\n+    MIPS_BUILTIN_MOVF_CABS_LT_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_nge_ps, \"__builtin_mips_movf_cabs_nge_ps\",\n+    MIPS_BUILTIN_MOVF_CABS_NGE_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_le_ps, \"__builtin_mips_movf_cabs_le_ps\",\n+    MIPS_BUILTIN_MOVF_CABS_LE_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+  { CODE_FOR_mips_cabs_ngt_ps, \"__builtin_mips_movf_cabs_ngt_ps\",\n+    MIPS_BUILTIN_MOVF_CABS_NGT_PS, MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+    MASK_MIPS3D },\n+\n+};\n+\n+\n+/* Expand builtin functions.  This is called from TARGET_EXPAND_BUILTIN.  */\n+\n+rtx\n+mips_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n+\t\t     enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t     int ignore ATTRIBUTE_UNUSED)\n+{\n+  rtx pat;\n+  enum insn_code icode;\n+  tree fndecl = TREE_OPERAND (TREE_OPERAND (exp, 0), 0);\n+  tree arglist = TREE_OPERAND (exp, 1);\n+  unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n+  tree arg0;\n+  tree arg1;\n+  tree arg2;\n+  enum machine_mode tmode;\n+  enum machine_mode mode0;\n+  enum machine_mode mode1;\n+  enum machine_mode mode2;\n+  rtx op0;\n+  rtx op1;\n+  rtx op2;\n+\n+  switch (fcode)\n+    {\n+    /* Two Operands.  */\n+    case MIPS_BUILTIN_PLL_PS:\n+    case MIPS_BUILTIN_PUL_PS:\n+    case MIPS_BUILTIN_PLU_PS:\n+    case MIPS_BUILTIN_PUU_PS:\n+    case MIPS_BUILTIN_CVT_PS_S:\n+    case MIPS_BUILTIN_ADDR_PS:\n+    case MIPS_BUILTIN_MULR_PS:\n+    case MIPS_BUILTIN_RECIP2_S:\n+    case MIPS_BUILTIN_RECIP2_D:\n+    case MIPS_BUILTIN_RECIP2_PS:\n+    case MIPS_BUILTIN_RSQRT2_S:\n+    case MIPS_BUILTIN_RSQRT2_D:\n+    case MIPS_BUILTIN_RSQRT2_PS:\n+\n+      icode = mips_bdesc[fcode].icode;\n+      arg0 = TREE_VALUE (arglist);\n+      arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n+      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+      op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+      tmode = insn_data[icode].operand[0].mode;\n+      mode0 = insn_data[icode].operand[1].mode;\n+      mode1 = insn_data[icode].operand[2].mode;\n+\n+      if (target == 0\n+\t  || GET_MODE (target) != tmode\n+\t  || !(*insn_data[icode].operand[0].predicate) (target, tmode))\n+\ttarget = gen_reg_rtx (tmode);\n+\n+      if (!(*insn_data[icode].operand[1].predicate) (op0, mode0))\n+\top0 = copy_to_mode_reg (mode0, op0);\n+      if (!(*insn_data[icode].operand[2].predicate) (op1, mode1))\n+\top1 = copy_to_mode_reg (mode1, op1);\n+\n+      pat = GEN_FCN (icode) (target, op0, op1);\n+      if (!pat)\n+\treturn 0;\n+      \n+      emit_insn (pat);\n+      return target;\n+\n+    /* One Operand.  */\n+    case MIPS_BUILTIN_CVT_S_PL:\n+    case MIPS_BUILTIN_CVT_S_PU:\n+    case MIPS_BUILTIN_ABS_PS:\n+    case MIPS_BUILTIN_CVT_PW_PS:\n+    case MIPS_BUILTIN_CVT_PS_PW:\n+    case MIPS_BUILTIN_RECIP1_S:\n+    case MIPS_BUILTIN_RECIP1_D:\n+    case MIPS_BUILTIN_RECIP1_PS:\n+    case MIPS_BUILTIN_RSQRT1_S:\n+    case MIPS_BUILTIN_RSQRT1_D:\n+    case MIPS_BUILTIN_RSQRT1_PS:\n+\n+      icode = mips_bdesc[fcode].icode;\n+      arg0 = TREE_VALUE (arglist);\n+      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+      tmode = insn_data[icode].operand[0].mode;\n+      mode0 = insn_data[icode].operand[1].mode;\n+\n+      if (target == 0\n+\t  || GET_MODE (target) != tmode\n+\t  || !(*insn_data[icode].operand[0].predicate) (target, tmode))\n+\ttarget = gen_reg_rtx (tmode);\n+\n+      if (!(*insn_data[icode].operand[1].predicate) (op0, mode0))\n+\top0 = copy_to_mode_reg (mode0, op0);\n+      \n+      pat = GEN_FCN (icode) (target, op0);\n+      if (!pat)\n+\treturn 0;\n+      \n+      emit_insn (pat);\n+      return target;\n+\n+    /* Three Operands.  */\n+    case MIPS_BUILTIN_ALNV_PS:\n+\n+      icode = mips_bdesc[fcode].icode;\n+      arg0 = TREE_VALUE (arglist);\n+      arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n+      arg2 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n+      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+      op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+      op2 = expand_expr (arg2, NULL_RTX, VOIDmode, 0);\n+      tmode = insn_data[icode].operand[0].mode;\n+      mode0 = insn_data[icode].operand[1].mode;\n+      mode1 = insn_data[icode].operand[2].mode;\n+      mode2 = insn_data[icode].operand[3].mode;\n+\n+      if (target == 0\n+\t  || GET_MODE (target) != tmode\n+\t  || !(*insn_data[icode].operand[0].predicate) (target, tmode))\n+\ttarget = gen_reg_rtx (tmode);\n+\n+      if (!(*insn_data[icode].operand[1].predicate) (op0, mode0))\n+\top0 = copy_to_mode_reg (mode0, op0);\n+\n+      if (!(*insn_data[icode].operand[2].predicate) (op1, mode1))\n+\top1 = copy_to_mode_reg (mode1, op1);\n+\n+      if (!(*insn_data[icode].operand[3].predicate) (op2, mode2))\n+\top2 = copy_to_mode_reg (mode2, op2);\n+\n+      pat = GEN_FCN (icode) (target, op0, op1, op2);\n+      if (!pat)\n+\treturn 0;\n+      \n+      emit_insn (pat);\n+      return target;\n+\n+    /* Paired Single Comparison.  */\n+    case MIPS_BUILTIN_ANY_C_F_PS:\n+    case MIPS_BUILTIN_ANY_C_UN_PS:\n+    case MIPS_BUILTIN_ANY_C_EQ_PS:\n+    case MIPS_BUILTIN_ANY_C_UEQ_PS:\n+    case MIPS_BUILTIN_ANY_C_OLT_PS:\n+    case MIPS_BUILTIN_ANY_C_ULT_PS:\n+    case MIPS_BUILTIN_ANY_C_OLE_PS:\n+    case MIPS_BUILTIN_ANY_C_ULE_PS:\n+    case MIPS_BUILTIN_ANY_C_SF_PS:\n+    case MIPS_BUILTIN_ANY_C_NGLE_PS:\n+    case MIPS_BUILTIN_ANY_C_SEQ_PS:\n+    case MIPS_BUILTIN_ANY_C_NGL_PS:\n+    case MIPS_BUILTIN_ANY_C_LT_PS:\n+    case MIPS_BUILTIN_ANY_C_NGE_PS:\n+    case MIPS_BUILTIN_ANY_C_LE_PS:\n+    case MIPS_BUILTIN_ANY_C_NGT_PS:\n+    case MIPS_BUILTIN_ANY_CABS_F_PS:\n+    case MIPS_BUILTIN_ANY_CABS_UN_PS:\n+    case MIPS_BUILTIN_ANY_CABS_EQ_PS:\n+    case MIPS_BUILTIN_ANY_CABS_UEQ_PS:\n+    case MIPS_BUILTIN_ANY_CABS_OLT_PS:\n+    case MIPS_BUILTIN_ANY_CABS_ULT_PS:\n+    case MIPS_BUILTIN_ANY_CABS_OLE_PS:\n+    case MIPS_BUILTIN_ANY_CABS_ULE_PS:\n+    case MIPS_BUILTIN_ANY_CABS_SF_PS:\n+    case MIPS_BUILTIN_ANY_CABS_NGLE_PS:\n+    case MIPS_BUILTIN_ANY_CABS_SEQ_PS:\n+    case MIPS_BUILTIN_ANY_CABS_NGL_PS:\n+    case MIPS_BUILTIN_ANY_CABS_LT_PS:\n+    case MIPS_BUILTIN_ANY_CABS_NGE_PS:\n+    case MIPS_BUILTIN_ANY_CABS_LE_PS:\n+    case MIPS_BUILTIN_ANY_CABS_NGT_PS:\n+      return mips_expand_ps_compare_builtin (MIPS_CMP_ANY, target, \n+\t\t\t\t\t     fcode, arglist);\n+\n+    /* Paired Single Comparison.  */\n+    case MIPS_BUILTIN_UPPER_C_F_PS:\n+    case MIPS_BUILTIN_UPPER_C_UN_PS:\n+    case MIPS_BUILTIN_UPPER_C_EQ_PS:\n+    case MIPS_BUILTIN_UPPER_C_UEQ_PS:\n+    case MIPS_BUILTIN_UPPER_C_OLT_PS:\n+    case MIPS_BUILTIN_UPPER_C_ULT_PS:\n+    case MIPS_BUILTIN_UPPER_C_OLE_PS:\n+    case MIPS_BUILTIN_UPPER_C_ULE_PS:\n+    case MIPS_BUILTIN_UPPER_C_SF_PS:\n+    case MIPS_BUILTIN_UPPER_C_NGLE_PS:\n+    case MIPS_BUILTIN_UPPER_C_SEQ_PS:\n+    case MIPS_BUILTIN_UPPER_C_NGL_PS:\n+    case MIPS_BUILTIN_UPPER_C_LT_PS:\n+    case MIPS_BUILTIN_UPPER_C_NGE_PS:\n+    case MIPS_BUILTIN_UPPER_C_LE_PS:\n+    case MIPS_BUILTIN_UPPER_C_NGT_PS:\n+    case MIPS_BUILTIN_UPPER_CABS_F_PS:\n+    case MIPS_BUILTIN_UPPER_CABS_UN_PS:\n+    case MIPS_BUILTIN_UPPER_CABS_EQ_PS:\n+    case MIPS_BUILTIN_UPPER_CABS_UEQ_PS:\n+    case MIPS_BUILTIN_UPPER_CABS_OLT_PS:\n+    case MIPS_BUILTIN_UPPER_CABS_ULT_PS:\n+    case MIPS_BUILTIN_UPPER_CABS_OLE_PS:\n+    case MIPS_BUILTIN_UPPER_CABS_ULE_PS:\n+    case MIPS_BUILTIN_UPPER_CABS_SF_PS:\n+    case MIPS_BUILTIN_UPPER_CABS_NGLE_PS:\n+    case MIPS_BUILTIN_UPPER_CABS_SEQ_PS:\n+    case MIPS_BUILTIN_UPPER_CABS_NGL_PS:\n+    case MIPS_BUILTIN_UPPER_CABS_LT_PS:\n+    case MIPS_BUILTIN_UPPER_CABS_NGE_PS:\n+    case MIPS_BUILTIN_UPPER_CABS_LE_PS:\n+    case MIPS_BUILTIN_UPPER_CABS_NGT_PS:\n+      return mips_expand_ps_compare_builtin (MIPS_CMP_UPPER, target, \n+\t\t\t\t\t     fcode, arglist);\n+\n+    /* Paired Single Comparison.  */\n+    case MIPS_BUILTIN_LOWER_C_F_PS:\n+    case MIPS_BUILTIN_LOWER_C_UN_PS:\n+    case MIPS_BUILTIN_LOWER_C_EQ_PS:\n+    case MIPS_BUILTIN_LOWER_C_UEQ_PS:\n+    case MIPS_BUILTIN_LOWER_C_OLT_PS:\n+    case MIPS_BUILTIN_LOWER_C_ULT_PS:\n+    case MIPS_BUILTIN_LOWER_C_OLE_PS:\n+    case MIPS_BUILTIN_LOWER_C_ULE_PS:\n+    case MIPS_BUILTIN_LOWER_C_SF_PS:\n+    case MIPS_BUILTIN_LOWER_C_NGLE_PS:\n+    case MIPS_BUILTIN_LOWER_C_SEQ_PS:\n+    case MIPS_BUILTIN_LOWER_C_NGL_PS:\n+    case MIPS_BUILTIN_LOWER_C_LT_PS:\n+    case MIPS_BUILTIN_LOWER_C_NGE_PS:\n+    case MIPS_BUILTIN_LOWER_C_LE_PS:\n+    case MIPS_BUILTIN_LOWER_C_NGT_PS:\n+    case MIPS_BUILTIN_LOWER_CABS_F_PS:\n+    case MIPS_BUILTIN_LOWER_CABS_UN_PS:\n+    case MIPS_BUILTIN_LOWER_CABS_EQ_PS:\n+    case MIPS_BUILTIN_LOWER_CABS_UEQ_PS:\n+    case MIPS_BUILTIN_LOWER_CABS_OLT_PS:\n+    case MIPS_BUILTIN_LOWER_CABS_ULT_PS:\n+    case MIPS_BUILTIN_LOWER_CABS_OLE_PS:\n+    case MIPS_BUILTIN_LOWER_CABS_ULE_PS:\n+    case MIPS_BUILTIN_LOWER_CABS_SF_PS:\n+    case MIPS_BUILTIN_LOWER_CABS_NGLE_PS:\n+    case MIPS_BUILTIN_LOWER_CABS_SEQ_PS:\n+    case MIPS_BUILTIN_LOWER_CABS_NGL_PS:\n+    case MIPS_BUILTIN_LOWER_CABS_LT_PS:\n+    case MIPS_BUILTIN_LOWER_CABS_NGE_PS:\n+    case MIPS_BUILTIN_LOWER_CABS_LE_PS:\n+    case MIPS_BUILTIN_LOWER_CABS_NGT_PS:\n+      return mips_expand_ps_compare_builtin (MIPS_CMP_LOWER, target, \n+\t\t\t\t\t     fcode, arglist);\n+\n+    /* Paired Single Comparison.  */\n+    case MIPS_BUILTIN_ALL_C_F_PS:\n+    case MIPS_BUILTIN_ALL_C_UN_PS:\n+    case MIPS_BUILTIN_ALL_C_EQ_PS:\n+    case MIPS_BUILTIN_ALL_C_UEQ_PS:\n+    case MIPS_BUILTIN_ALL_C_OLT_PS:\n+    case MIPS_BUILTIN_ALL_C_ULT_PS:\n+    case MIPS_BUILTIN_ALL_C_OLE_PS:\n+    case MIPS_BUILTIN_ALL_C_ULE_PS:\n+    case MIPS_BUILTIN_ALL_C_SF_PS:\n+    case MIPS_BUILTIN_ALL_C_NGLE_PS:\n+    case MIPS_BUILTIN_ALL_C_SEQ_PS:\n+    case MIPS_BUILTIN_ALL_C_NGL_PS:\n+    case MIPS_BUILTIN_ALL_C_LT_PS:\n+    case MIPS_BUILTIN_ALL_C_NGE_PS:\n+    case MIPS_BUILTIN_ALL_C_LE_PS:\n+    case MIPS_BUILTIN_ALL_C_NGT_PS:\n+    case MIPS_BUILTIN_ALL_CABS_F_PS:\n+    case MIPS_BUILTIN_ALL_CABS_UN_PS:\n+    case MIPS_BUILTIN_ALL_CABS_EQ_PS:\n+    case MIPS_BUILTIN_ALL_CABS_UEQ_PS:\n+    case MIPS_BUILTIN_ALL_CABS_OLT_PS:\n+    case MIPS_BUILTIN_ALL_CABS_ULT_PS:\n+    case MIPS_BUILTIN_ALL_CABS_OLE_PS:\n+    case MIPS_BUILTIN_ALL_CABS_ULE_PS:\n+    case MIPS_BUILTIN_ALL_CABS_SF_PS:\n+    case MIPS_BUILTIN_ALL_CABS_NGLE_PS:\n+    case MIPS_BUILTIN_ALL_CABS_SEQ_PS:\n+    case MIPS_BUILTIN_ALL_CABS_NGL_PS:\n+    case MIPS_BUILTIN_ALL_CABS_LT_PS:\n+    case MIPS_BUILTIN_ALL_CABS_NGE_PS:\n+    case MIPS_BUILTIN_ALL_CABS_LE_PS:\n+    case MIPS_BUILTIN_ALL_CABS_NGT_PS:\n+      return mips_expand_ps_compare_builtin (MIPS_CMP_ALL, target, \n+\t\t\t\t\t     fcode, arglist);\n+\n+    /* Four Single Comparison.  */\n+    case MIPS_BUILTIN_ANY_C_F_4S:\n+    case MIPS_BUILTIN_ANY_C_UN_4S:\n+    case MIPS_BUILTIN_ANY_C_EQ_4S:\n+    case MIPS_BUILTIN_ANY_C_UEQ_4S:\n+    case MIPS_BUILTIN_ANY_C_OLT_4S:\n+    case MIPS_BUILTIN_ANY_C_ULT_4S:\n+    case MIPS_BUILTIN_ANY_C_OLE_4S:\n+    case MIPS_BUILTIN_ANY_C_ULE_4S:\n+    case MIPS_BUILTIN_ANY_C_SF_4S:\n+    case MIPS_BUILTIN_ANY_C_NGLE_4S:\n+    case MIPS_BUILTIN_ANY_C_SEQ_4S:\n+    case MIPS_BUILTIN_ANY_C_NGL_4S:\n+    case MIPS_BUILTIN_ANY_C_LT_4S:\n+    case MIPS_BUILTIN_ANY_C_NGE_4S:\n+    case MIPS_BUILTIN_ANY_C_LE_4S:\n+    case MIPS_BUILTIN_ANY_C_NGT_4S:\n+    case MIPS_BUILTIN_ANY_CABS_F_4S:\n+    case MIPS_BUILTIN_ANY_CABS_UN_4S:\n+    case MIPS_BUILTIN_ANY_CABS_EQ_4S:\n+    case MIPS_BUILTIN_ANY_CABS_UEQ_4S:\n+    case MIPS_BUILTIN_ANY_CABS_OLT_4S:\n+    case MIPS_BUILTIN_ANY_CABS_ULT_4S:\n+    case MIPS_BUILTIN_ANY_CABS_OLE_4S:\n+    case MIPS_BUILTIN_ANY_CABS_ULE_4S:\n+    case MIPS_BUILTIN_ANY_CABS_SF_4S:\n+    case MIPS_BUILTIN_ANY_CABS_NGLE_4S:\n+    case MIPS_BUILTIN_ANY_CABS_SEQ_4S:\n+    case MIPS_BUILTIN_ANY_CABS_NGL_4S:\n+    case MIPS_BUILTIN_ANY_CABS_LT_4S:\n+    case MIPS_BUILTIN_ANY_CABS_NGE_4S:\n+    case MIPS_BUILTIN_ANY_CABS_LE_4S:\n+    case MIPS_BUILTIN_ANY_CABS_NGT_4S:\n+      return mips_expand_4s_compare_builtin (MIPS_CMP_ANY, target, \n+\t\t\t\t\t     fcode, arglist);\n+\n+    /* Four Single Comparison.  */\n+    case MIPS_BUILTIN_ALL_C_F_4S:\n+    case MIPS_BUILTIN_ALL_C_UN_4S:\n+    case MIPS_BUILTIN_ALL_C_EQ_4S:\n+    case MIPS_BUILTIN_ALL_C_UEQ_4S:\n+    case MIPS_BUILTIN_ALL_C_OLT_4S:\n+    case MIPS_BUILTIN_ALL_C_ULT_4S:\n+    case MIPS_BUILTIN_ALL_C_OLE_4S:\n+    case MIPS_BUILTIN_ALL_C_ULE_4S:\n+    case MIPS_BUILTIN_ALL_C_SF_4S:\n+    case MIPS_BUILTIN_ALL_C_NGLE_4S:\n+    case MIPS_BUILTIN_ALL_C_SEQ_4S:\n+    case MIPS_BUILTIN_ALL_C_NGL_4S:\n+    case MIPS_BUILTIN_ALL_C_LT_4S:\n+    case MIPS_BUILTIN_ALL_C_NGE_4S:\n+    case MIPS_BUILTIN_ALL_C_LE_4S:\n+    case MIPS_BUILTIN_ALL_C_NGT_4S:\n+    case MIPS_BUILTIN_ALL_CABS_F_4S:\n+    case MIPS_BUILTIN_ALL_CABS_UN_4S:\n+    case MIPS_BUILTIN_ALL_CABS_EQ_4S:\n+    case MIPS_BUILTIN_ALL_CABS_UEQ_4S:\n+    case MIPS_BUILTIN_ALL_CABS_OLT_4S:\n+    case MIPS_BUILTIN_ALL_CABS_ULT_4S:\n+    case MIPS_BUILTIN_ALL_CABS_OLE_4S:\n+    case MIPS_BUILTIN_ALL_CABS_ULE_4S:\n+    case MIPS_BUILTIN_ALL_CABS_SF_4S:\n+    case MIPS_BUILTIN_ALL_CABS_NGLE_4S:\n+    case MIPS_BUILTIN_ALL_CABS_SEQ_4S:\n+    case MIPS_BUILTIN_ALL_CABS_NGL_4S:\n+    case MIPS_BUILTIN_ALL_CABS_LT_4S:\n+    case MIPS_BUILTIN_ALL_CABS_NGE_4S:\n+    case MIPS_BUILTIN_ALL_CABS_LE_4S:\n+    case MIPS_BUILTIN_ALL_CABS_NGT_4S:\n+      return mips_expand_4s_compare_builtin (MIPS_CMP_ALL, target, \n+\t\t\t\t\t     fcode, arglist);\n+\n+    /* Single/Double Compare Absolute.  */\n+    case MIPS_BUILTIN_CABS_F_S:\n+    case MIPS_BUILTIN_CABS_UN_S:\n+    case MIPS_BUILTIN_CABS_EQ_S:\n+    case MIPS_BUILTIN_CABS_UEQ_S:\n+    case MIPS_BUILTIN_CABS_OLT_S:\n+    case MIPS_BUILTIN_CABS_ULT_S:\n+    case MIPS_BUILTIN_CABS_OLE_S:\n+    case MIPS_BUILTIN_CABS_ULE_S:\n+    case MIPS_BUILTIN_CABS_SF_S:\n+    case MIPS_BUILTIN_CABS_NGLE_S:\n+    case MIPS_BUILTIN_CABS_SEQ_S:\n+    case MIPS_BUILTIN_CABS_NGL_S:\n+    case MIPS_BUILTIN_CABS_LT_S:\n+    case MIPS_BUILTIN_CABS_NGE_S:\n+    case MIPS_BUILTIN_CABS_LE_S:\n+    case MIPS_BUILTIN_CABS_NGT_S:\n+    case MIPS_BUILTIN_CABS_F_D:\n+    case MIPS_BUILTIN_CABS_UN_D:\n+    case MIPS_BUILTIN_CABS_EQ_D:\n+    case MIPS_BUILTIN_CABS_UEQ_D:\n+    case MIPS_BUILTIN_CABS_OLT_D:\n+    case MIPS_BUILTIN_CABS_ULT_D:\n+    case MIPS_BUILTIN_CABS_OLE_D:\n+    case MIPS_BUILTIN_CABS_ULE_D:\n+    case MIPS_BUILTIN_CABS_SF_D:\n+    case MIPS_BUILTIN_CABS_NGLE_D:\n+    case MIPS_BUILTIN_CABS_SEQ_D:\n+    case MIPS_BUILTIN_CABS_NGL_D:\n+    case MIPS_BUILTIN_CABS_LT_D:\n+    case MIPS_BUILTIN_CABS_NGE_D:\n+    case MIPS_BUILTIN_CABS_LE_D:\n+    case MIPS_BUILTIN_CABS_NGT_D:\n+      return mips_expand_compare_builtin (target, fcode, arglist);\n+\n+    /* Conditional Move on True.  */\n+    case MIPS_BUILTIN_MOVT_C_F_PS:\n+    case MIPS_BUILTIN_MOVT_C_UN_PS:\n+    case MIPS_BUILTIN_MOVT_C_EQ_PS:\n+    case MIPS_BUILTIN_MOVT_C_UEQ_PS:\n+    case MIPS_BUILTIN_MOVT_C_OLT_PS:\n+    case MIPS_BUILTIN_MOVT_C_ULT_PS:\n+    case MIPS_BUILTIN_MOVT_C_OLE_PS:\n+    case MIPS_BUILTIN_MOVT_C_ULE_PS:\n+    case MIPS_BUILTIN_MOVT_C_SF_PS:\n+    case MIPS_BUILTIN_MOVT_C_NGLE_PS:\n+    case MIPS_BUILTIN_MOVT_C_SEQ_PS:\n+    case MIPS_BUILTIN_MOVT_C_NGL_PS:\n+    case MIPS_BUILTIN_MOVT_C_LT_PS:\n+    case MIPS_BUILTIN_MOVT_C_NGE_PS:\n+    case MIPS_BUILTIN_MOVT_C_LE_PS:\n+    case MIPS_BUILTIN_MOVT_C_NGT_PS:\n+    case MIPS_BUILTIN_MOVT_CABS_F_PS:\n+    case MIPS_BUILTIN_MOVT_CABS_UN_PS:\n+    case MIPS_BUILTIN_MOVT_CABS_EQ_PS:\n+    case MIPS_BUILTIN_MOVT_CABS_UEQ_PS:\n+    case MIPS_BUILTIN_MOVT_CABS_OLT_PS:\n+    case MIPS_BUILTIN_MOVT_CABS_ULT_PS:\n+    case MIPS_BUILTIN_MOVT_CABS_OLE_PS:\n+    case MIPS_BUILTIN_MOVT_CABS_ULE_PS:\n+    case MIPS_BUILTIN_MOVT_CABS_SF_PS:\n+    case MIPS_BUILTIN_MOVT_CABS_NGLE_PS:\n+    case MIPS_BUILTIN_MOVT_CABS_SEQ_PS:\n+    case MIPS_BUILTIN_MOVT_CABS_NGL_PS:\n+    case MIPS_BUILTIN_MOVT_CABS_LT_PS:\n+    case MIPS_BUILTIN_MOVT_CABS_NGE_PS:\n+    case MIPS_BUILTIN_MOVT_CABS_LE_PS:\n+    case MIPS_BUILTIN_MOVT_CABS_NGT_PS:\n+      return mips_expand_ps_cond_move_builtin (MIPS_CMP_MOVT, target, \n+\t\t\t\t\t       fcode, arglist);\n+\n+    /* Conditional Move on False.  */\n+    case MIPS_BUILTIN_MOVF_C_F_PS:\n+    case MIPS_BUILTIN_MOVF_C_UN_PS:\n+    case MIPS_BUILTIN_MOVF_C_EQ_PS:\n+    case MIPS_BUILTIN_MOVF_C_UEQ_PS:\n+    case MIPS_BUILTIN_MOVF_C_OLT_PS:\n+    case MIPS_BUILTIN_MOVF_C_ULT_PS:\n+    case MIPS_BUILTIN_MOVF_C_OLE_PS:\n+    case MIPS_BUILTIN_MOVF_C_ULE_PS:\n+    case MIPS_BUILTIN_MOVF_C_SF_PS:\n+    case MIPS_BUILTIN_MOVF_C_NGLE_PS:\n+    case MIPS_BUILTIN_MOVF_C_SEQ_PS:\n+    case MIPS_BUILTIN_MOVF_C_NGL_PS:\n+    case MIPS_BUILTIN_MOVF_C_LT_PS:\n+    case MIPS_BUILTIN_MOVF_C_NGE_PS:\n+    case MIPS_BUILTIN_MOVF_C_LE_PS:\n+    case MIPS_BUILTIN_MOVF_C_NGT_PS:\n+    case MIPS_BUILTIN_MOVF_CABS_F_PS:\n+    case MIPS_BUILTIN_MOVF_CABS_UN_PS:\n+    case MIPS_BUILTIN_MOVF_CABS_EQ_PS:\n+    case MIPS_BUILTIN_MOVF_CABS_UEQ_PS:\n+    case MIPS_BUILTIN_MOVF_CABS_OLT_PS:\n+    case MIPS_BUILTIN_MOVF_CABS_ULT_PS:\n+    case MIPS_BUILTIN_MOVF_CABS_OLE_PS:\n+    case MIPS_BUILTIN_MOVF_CABS_ULE_PS:\n+    case MIPS_BUILTIN_MOVF_CABS_SF_PS:\n+    case MIPS_BUILTIN_MOVF_CABS_NGLE_PS:\n+    case MIPS_BUILTIN_MOVF_CABS_SEQ_PS:\n+    case MIPS_BUILTIN_MOVF_CABS_NGL_PS:\n+    case MIPS_BUILTIN_MOVF_CABS_LT_PS:\n+    case MIPS_BUILTIN_MOVF_CABS_NGE_PS:\n+    case MIPS_BUILTIN_MOVF_CABS_LE_PS:\n+    case MIPS_BUILTIN_MOVF_CABS_NGT_PS:\n+      return mips_expand_ps_cond_move_builtin (MIPS_CMP_MOVF, target, \n+\t\t\t\t\t       fcode, arglist);\n+\n+    default:\n+      break;\n+    }\n+\n+  return 0;\n+}\n+\n+/* Init builtin functions.  This is called from TARGET_INIT_BUILTIN.  */\n+\n+void\n+mips_init_builtins (void)\n+{\n+  const struct builtin_description *d;\n+  size_t i;\n+  tree v2sf_ftype_v2sf_v2sf;\n+  tree v2sf_ftype_sf_sf;\n+  tree sf_ftype_v2sf;\n+  tree v2sf_ftype_v2sf;\n+  tree int_ftype_v2sf_v2sf;\n+  tree int_ftype_v2sf_v2sf_v2sf_v2sf;\n+  tree v2sf_ftype_v2sf_v2sf_int;\n+  tree int_ftype_sf_sf;\n+  tree int_ftype_df_df;\n+  tree sf_ftype_sf;\n+  tree df_ftype_df;\n+  tree sf_ftype_sf_sf;\n+  tree df_ftype_df_df;\n+  tree v2sf_ftype_v2sf_v2sf_v2sf_v2sf;\n+  tree V2SF_type_node = build_vector_type_for_mode (float_type_node, V2SFmode);\n+\n+  /* We have only builtins for -mpaired-single and -mips3d.  */\n+  if (!TARGET_PAIRED_SINGLE_FLOAT)\n+    return;\n+\n+  int_ftype_sf_sf\n+    = build_function_type_list (integer_type_node, \n+\t\t\t\tfloat_type_node, float_type_node, \n+\t\t\t\tNULL_TREE);\n+\n+  int_ftype_df_df \n+    = build_function_type_list (integer_type_node, \n+\t\t\t\tdouble_type_node, double_type_node, \n+\t\t\t\tNULL_TREE);\n+\n+  v2sf_ftype_v2sf_v2sf \n+    = build_function_type_list (V2SF_type_node, \n+\t\t\t\tV2SF_type_node, V2SF_type_node, NULL_TREE);\n+\n+  v2sf_ftype_sf_sf \n+    = build_function_type_list (V2SF_type_node, \n+\t\t\t\tfloat_type_node, float_type_node, \n+\t\t\t\tNULL_TREE);\n+\n+  sf_ftype_v2sf \n+    = build_function_type_list (float_type_node, V2SF_type_node, NULL_TREE);\n+\n+  v2sf_ftype_v2sf \n+    = build_function_type_list (V2SF_type_node, V2SF_type_node, NULL_TREE);\n+\n+  int_ftype_v2sf_v2sf \n+    = build_function_type_list (integer_type_node,\n+\t\t\t\tV2SF_type_node, V2SF_type_node, NULL_TREE);\n+\n+  int_ftype_v2sf_v2sf_v2sf_v2sf\n+    = build_function_type_list (integer_type_node,\n+\t\t\t\tV2SF_type_node, V2SF_type_node,\n+\t\t\t\tV2SF_type_node, V2SF_type_node, NULL_TREE);\n+\n+  v2sf_ftype_v2sf_v2sf_v2sf_v2sf\n+    = build_function_type_list (V2SF_type_node,\n+\t\t\t\tV2SF_type_node, V2SF_type_node, \n+\t\t\t\tV2SF_type_node, V2SF_type_node, NULL_TREE);\n+\n+  v2sf_ftype_v2sf_v2sf_int\n+    = build_function_type_list (V2SF_type_node, \n+\t\t\t\tV2SF_type_node, V2SF_type_node, \n+\t\t\t\tinteger_type_node, NULL_TREE);\n+\n+  sf_ftype_sf\n+    = build_function_type_list (float_type_node, \n+\t\t\t\tfloat_type_node, NULL_TREE);\n+\n+  df_ftype_df\n+    = build_function_type_list (double_type_node, \n+\t\t\t\tdouble_type_node, NULL_TREE);\n+\n+  sf_ftype_sf_sf\n+    = build_function_type_list (float_type_node, \n+\t\t\t\tfloat_type_node, float_type_node, \n+\t\t\t\tNULL_TREE);\n+\n+  df_ftype_df_df\n+    = build_function_type_list (double_type_node, \n+\t\t\t\tdouble_type_node, double_type_node, \n+\t\t\t\tNULL_TREE);\n+\n+  for (i = 0, d = mips_bdesc; i < ARRAY_SIZE (mips_bdesc); i++, d++)\n+    {\n+      if ((d->target_flags & MASK_PAIRED_SINGLE)\n+\t  && !TARGET_PAIRED_SINGLE_FLOAT)\n+\tcontinue;\n+\n+      if ((d->target_flags & MASK_MIPS3D) \n+\t  && !TARGET_MIPS3D)\n+\tcontinue;\n+\n+      switch (d->ftype)\n+\t{\n+\tcase MIPS_V2SF_FTYPE_V2SF_V2SF:\n+\t  lang_hooks.builtin_function (d->name, v2sf_ftype_v2sf_v2sf,\n+\t\t\t\t       d->code, BUILT_IN_MD, NULL, NULL_TREE);\n+\t  break;\n+\n+\tcase MIPS_V2SF_FTYPE_SF_SF:\n+\t  lang_hooks.builtin_function (d->name, v2sf_ftype_sf_sf,\n+\t\t\t\t       d->code, BUILT_IN_MD, NULL, NULL_TREE);\n+\t  break;\n+\n+\tcase MIPS_SF_FTYPE_V2SF:\n+\t  lang_hooks.builtin_function (d->name, sf_ftype_v2sf,\n+\t\t\t\t       d->code, BUILT_IN_MD, NULL, NULL_TREE);\n+\t  break;\n+\n+\tcase MIPS_V2SF_FTYPE_V2SF:\n+\t  lang_hooks.builtin_function (d->name, v2sf_ftype_v2sf,\n+\t\t\t\t       d->code, BUILT_IN_MD, NULL, NULL_TREE);\n+\t  break;\n+\n+\tcase MIPS_INT_FTYPE_V2SF_V2SF:\n+\t  lang_hooks.builtin_function (d->name, int_ftype_v2sf_v2sf,\n+\t\t\t\t       d->code, BUILT_IN_MD, NULL, NULL_TREE);\n+\t  break;\n+\n+\tcase MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF:\n+\t  lang_hooks.builtin_function (d->name, int_ftype_v2sf_v2sf_v2sf_v2sf,\n+\t\t\t\t       d->code, BUILT_IN_MD, NULL, NULL_TREE);\n+\t  break;\n+\n+\tcase MIPS_V2SF_FTYPE_V2SF_V2SF_INT:\n+\t  lang_hooks.builtin_function (d->name, v2sf_ftype_v2sf_v2sf_int,\n+\t\t\t\t       d->code, BUILT_IN_MD, NULL, NULL_TREE);\n+\t  break;\n+\n+\tcase MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF:\n+\t  lang_hooks.builtin_function (d->name, v2sf_ftype_v2sf_v2sf_v2sf_v2sf,\n+\t\t\t\t       d->code, BUILT_IN_MD, NULL, NULL_TREE);\n+\t  break;\n \n+\tcase MIPS_SF_FTYPE_SF:\n+\t  lang_hooks.builtin_function (d->name, sf_ftype_sf,\n+\t\t\t\t       d->code, BUILT_IN_MD, NULL, NULL_TREE);\n+\t  break;\n+\n+\tcase MIPS_DF_FTYPE_DF:\n+\t  lang_hooks.builtin_function (d->name, df_ftype_df,\n+\t\t\t\t       d->code, BUILT_IN_MD, NULL, NULL_TREE);\n+\t  break;\n+\n+\tcase MIPS_INT_FTYPE_SF_SF:\n+\t  lang_hooks.builtin_function (d->name, int_ftype_sf_sf,\n+\t\t\t\t       d->code, BUILT_IN_MD, NULL, NULL_TREE);\n+\t  break;\n+\n+\tcase MIPS_INT_FTYPE_DF_DF:\n+\t  lang_hooks.builtin_function (d->name, int_ftype_df_df,\n+\t\t\t\t       d->code, BUILT_IN_MD, NULL, NULL_TREE);\n+\t  break;\n+\n+\tcase MIPS_SF_FTYPE_SF_SF:\n+\t  lang_hooks.builtin_function (d->name, sf_ftype_sf_sf,\n+\t\t\t\t       d->code, BUILT_IN_MD, NULL, NULL_TREE);\n+\t  break;\n+\n+\tcase MIPS_DF_FTYPE_DF_DF:\n+\t  lang_hooks.builtin_function (d->name, df_ftype_df_df,\n+\t\t\t\t       d->code, BUILT_IN_MD, NULL, NULL_TREE);\n+\t  break;\n+\n+\tdefault:\n+\t  break;\n+\t}\n+    }\n+}\n+\n+/* This performs a paired single compare, and then a conditional move based\n+   on the result of that compare.  CMP_CHOICE is the kind of comparison we\n+   want.  TARGET is a suggestion of where to put the result.  FCODE is the\n+   function code.  ARGLIST is the list of arguments.  The return value is\n+   the result of the conditional move.  */\n+\n+static rtx\n+mips_expand_ps_cond_move_builtin (enum mips_cmp_choice cmp_choice,\n+\t\t\t\t  rtx target, unsigned int fcode,\n+\t\t\t\t  tree arglist)\n+{\n+  rtx pat;\n+  enum insn_code icode;\n+  tree arg0;\n+  tree arg1;\n+  tree arg2;\n+  tree arg3;\n+  rtx op0;\n+  rtx op1;\n+  rtx op2;\n+  rtx op3;\n+  enum machine_mode tmode;\n+  enum machine_mode mode0;\n+  enum machine_mode mode1;\n+  rtx temp_target;\n+  rtx if_then_else;\n+  enum rtx_code test_code;\n+  int compare_value;\n+\n+  arg0 = TREE_VALUE (arglist);\n+  arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n+  arg2 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n+  arg3 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (TREE_CHAIN (arglist))));\n+  op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+  op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+  op2 = expand_expr (arg2, NULL_RTX, VOIDmode, 0);\n+  op3 = expand_expr (arg3, NULL_RTX, VOIDmode, 0);\n+\n+  icode = mips_bdesc[fcode].icode;\n+  tmode = insn_data[icode].operand[0].mode;\n+  mode0 = insn_data[icode].operand[1].mode;\n+  mode1 = insn_data[icode].operand[2].mode;\n+\n+  if (!(*insn_data[icode].operand[1].predicate) (op0, mode0))\n+    op0 = copy_to_mode_reg (mode0, op0);\n+\n+  if (!(*insn_data[icode].operand[2].predicate) (op1, mode1))\n+    op1 = copy_to_mode_reg (mode1, op1);\n+\n+  /* temp_target is the result of the comparison.  */\n+  temp_target = gen_reg_rtx (tmode);\n+\n+  pat = GEN_FCN (icode) (temp_target, op0, op1);\n+  if (!pat)\n+    return 0;\n+\n+  emit_insn (pat);\n+\n+  icode = CODE_FOR_mips_cond_move_tf_ps;\n+  tmode = insn_data[icode].operand[0].mode;\n+\n+  if (target == 0\n+      || GET_MODE (target) != tmode\n+      || !(*insn_data[icode].operand[0].predicate) (target, tmode))\n+    target = gen_reg_rtx (tmode);\n+\n+  /* Let op2 be the same as the tmode */\n+  if (!(*insn_data[icode].operand[0].predicate) (op2, tmode))\n+    op2 = copy_to_mode_reg (tmode, op2);\n+\n+  /* Let op3 be the same as the tmode */\n+  if (!(*insn_data[icode].operand[0].predicate) (op3, tmode))\n+    op3 = copy_to_mode_reg (tmode, op3);\n+\n+  /* Copy op2 to target */\n+  emit_insn (gen_rtx_SET (tmode, target, op2)); \n+\n+  test_code = EQ;\n+  compare_value = 0;\n+  switch (cmp_choice)\n+    {\n+    case MIPS_CMP_MOVT:\n+      if_then_else \n+\t= gen_rtx_IF_THEN_ELSE (tmode,\n+\t\t\t\tgen_rtx_fmt_ee (test_code, CCV2mode, \n+\t\t\t\t\t\ttemp_target,\n+\t\t\t\t\t        GEN_INT (compare_value)),\n+\t\t\t\top3, target);\n+      break;\n+\n+    case MIPS_CMP_MOVF:\n+      if_then_else \n+\t= gen_rtx_IF_THEN_ELSE (tmode,\n+\t\t\t\tgen_rtx_fmt_ee (test_code, CCV2mode, \n+\t\t\t\t\t\ttemp_target,\n+\t\t\t\t\t        GEN_INT (compare_value)), \n+\t\t\t\ttarget, op3);\n+      break;\n+\n+    default:\n+      return 0;\n+    }\n+\n+  emit_insn (gen_rtx_SET (VOIDmode, target, if_then_else)); \n+\n+  return target;\n+}\n+\n+/* This performs two paired single compares, and returns an boolean value to\n+   represent the result of the compare.  CMP_CHOICE is the kind of comparison\n+   we want.  TARGET is a suggestion of where to put the result.  FCODE is\n+   the builtin function code.  ARGLIST is the list of arguments.  The\n+   return value is the result of the compare.  */\n+\n+rtx\n+mips_expand_4s_compare_builtin (enum mips_cmp_choice cmp_choice, rtx target,\n+\t\t\t\tunsigned int fcode, tree arglist)\n+{\n+  rtx pat;\n+  enum insn_code icode;\n+  tree arg0;\n+  tree arg1;\n+  tree arg2;\n+  tree arg3;\n+  rtx op0;\n+  rtx op1;\n+  rtx op2;\n+  rtx op3;\n+  enum machine_mode tmode;\n+  enum machine_mode mode0;\n+  enum machine_mode mode1;\n+  enum machine_mode mode2;\n+  enum machine_mode mode3;\n+  rtx temp_target;\n+  rtx label1;\n+  rtx label2;\n+  rtx if_then_else;\n+  enum rtx_code test_code;\n+  int compare_value;\n+\n+  if (target == 0 || GET_MODE (target) != SImode)\n+    target = gen_reg_rtx (SImode);\n+\n+  icode = mips_bdesc[fcode].icode;\n+  arg0 = TREE_VALUE (arglist);\n+  arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n+  arg2 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n+  arg3 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (TREE_CHAIN (arglist))));\n+  op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+  op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+  op2 = expand_expr (arg2, NULL_RTX, VOIDmode, 0);\n+  op3 = expand_expr (arg3, NULL_RTX, VOIDmode, 0);\n+  tmode = insn_data[icode].operand[0].mode;\n+  mode0 = insn_data[icode].operand[1].mode;\n+  mode1 = insn_data[icode].operand[2].mode;\n+  mode2 = insn_data[icode].operand[3].mode;\n+  mode3 = insn_data[icode].operand[4].mode;\n+\n+  temp_target = gen_reg_rtx (tmode);\n+\n+  if (!(*insn_data[icode].operand[1].predicate) (op0, mode0))\n+    op0 = copy_to_mode_reg (mode0, op0);\n+\n+  if (!(*insn_data[icode].operand[2].predicate) (op1, mode1))\n+    op1 = copy_to_mode_reg (mode1, op1);\n+\n+  if (!(*insn_data[icode].operand[3].predicate) (op2, mode2))\n+    op2 = copy_to_mode_reg (mode2, op2);\n+\n+  if (!(*insn_data[icode].operand[4].predicate) (op3, mode3))\n+    op3 = copy_to_mode_reg (mode3, op3);\n+\n+  pat = GEN_FCN (icode) (temp_target, op0, op1, op2, op3);\n+  if (!pat)\n+    return 0;\n+\n+  /* We fake the value of CCV4 to be\n+     0, if ANY is true    <-->  NOT 0, if ALL is false\n+     1, if ALL is true    <-->  NOT 1, if ANY is false\n+ \n+     Thus, we can map \"enum mips_cmp_choice\" to RTL comparison operators:\n+     MIPS_CMP_ANY ->   (EQ 0)\n+     MIPS_CMP_ALL ->   (EQ 1)\n+\n+     However, because MIPS doesn't have \"branch_all\" instructions, \n+     for MIPS_CMP_ALL, we will use (NE 1) and reverse the assignment of \n+     the target to 1 first and then 0.  */\n+  switch (cmp_choice)\n+    {\n+    case MIPS_CMP_ANY:\n+      test_code = EQ;\n+      compare_value = 0;\n+      break;\n+\n+    case MIPS_CMP_ALL:\n+      test_code = NE;\n+      compare_value = 1;\n+      break;\n+\n+    default:\n+      return 0;\n+    }\n+\n+  if (cmp_choice == MIPS_CMP_ALL)\n+    emit_move_insn (target, const1_rtx);\n+  else\n+    emit_move_insn (target, const0_rtx);\n+\n+  emit_insn (pat);\n+\n+  label1 = gen_label_rtx ();\n+  label2 = gen_label_rtx ();\n+  if_then_else \n+    = gen_rtx_IF_THEN_ELSE (VOIDmode,\n+\t\t\t    gen_rtx_fmt_ee (test_code, CCV4mode, temp_target, \n+\t\t\t\t            GEN_INT (compare_value)),\n+\t\t\t    gen_rtx_LABEL_REF (VOIDmode, label1), pc_rtx);\n+\n+  emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, if_then_else)); \n+  emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, \n+\t\t\t       gen_rtx_LABEL_REF (VOIDmode, label2)));\n+\n+  emit_barrier ();\n+  emit_label (label1);\n+\n+  if (cmp_choice == MIPS_CMP_ALL)\n+    emit_move_insn (target, const0_rtx);\n+  else\n+    emit_move_insn (target, const1_rtx);\n+\n+  emit_label (label2);\n+\n+  return target;\n+}\n+\n+/* This performs a single float or double float comparison.  TARGET is a\n+   suggestion of where to put the result.  FCODE is the builtin function code.\n+   ARGLIST is the list of arguments.  The return value is the result of the\n+   compare.  */\n+\n+rtx\n+mips_expand_compare_builtin (rtx target, unsigned int fcode, tree arglist)\n+{\n+  rtx pat;\n+  enum insn_code icode;\n+  tree arg0;\n+  tree arg1;\n+  rtx op0;\n+  rtx op1;\n+  enum machine_mode tmode;\n+  enum machine_mode mode0;\n+  enum machine_mode mode1;\n+  rtx temp_target;\n+  rtx label1;\n+  rtx label2;\n+  rtx if_then_else;\n+  enum rtx_code test_code;\n+\n+  if (target == 0 || GET_MODE (target) != SImode)\n+    target = gen_reg_rtx (SImode);\n+\n+  icode = mips_bdesc[fcode].icode;\n+  arg0 = TREE_VALUE (arglist);\n+  arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n+  op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+  op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+  tmode = insn_data[icode].operand[0].mode;\n+  mode0 = insn_data[icode].operand[1].mode;\n+  mode1 = insn_data[icode].operand[2].mode;\n+\n+  temp_target = gen_reg_rtx (tmode);\n+\n+  if (!(*insn_data[icode].operand[1].predicate) (op0, mode0))\n+    op0 = copy_to_mode_reg (mode0, op0);\n+\n+  if (!(*insn_data[icode].operand[2].predicate) (op1, mode1))\n+    op1 = copy_to_mode_reg (mode1, op1);\n+\n+  pat = GEN_FCN (icode) (temp_target, op0, op1);\n+  if (!pat)\n+    return 0;\n+\n+  emit_move_insn (target, const0_rtx);\n+  emit_insn (pat);\n+\n+  label1 = gen_label_rtx ();\n+  label2 = gen_label_rtx ();\n+\n+  test_code =  NE;\n+  if_then_else\n+    = gen_rtx_IF_THEN_ELSE (VOIDmode,\n+\t\t\t    gen_rtx_fmt_ee (test_code, CCmode, \n+\t\t\t\t            temp_target, const0_rtx),\n+\t\t\t    gen_rtx_LABEL_REF (VOIDmode, label1), pc_rtx);\n+\n+  emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, if_then_else)); \n+  emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, \n+\t\t\t       gen_rtx_LABEL_REF (VOIDmode, label2)));\n+\n+  emit_barrier ();\n+  emit_label (label1);\n+  emit_move_insn (target, const1_rtx);\n+  emit_label (label2);\n+\n+  return target;\n+}\n+\n+/* This performs a paired single compare, and returns an boolean value to\n+   represent the result of the compare.  CMP_CHOICE is the kind of comparison\n+   we want.  TARGET is a suggestion of where to put the result.  FCODE is\n+   the builtin function code.  ARGLIST is the list of arguments.  The\n+   return value is the result of the compare.  */\n+\n+rtx\n+mips_expand_ps_compare_builtin (enum mips_cmp_choice cmp_choice, rtx target,\n+\t\t\t\tunsigned int fcode, tree arglist)\n+{\n+  rtx pat;\n+  enum insn_code icode;\n+  tree arg0;\n+  tree arg1;\n+  rtx op0;\n+  rtx op1;\n+  enum machine_mode tmode;\n+  enum machine_mode mode0;\n+  enum machine_mode mode1;\n+  rtx temp_target;\n+  rtx label1;\n+  rtx label2;\n+  rtx if_then_else;\n+  enum rtx_code test_code;\n+  int compare_value;\n+\n+  if (target == 0 || GET_MODE (target) != SImode)\n+    target = gen_reg_rtx (SImode);\n+\n+  icode = mips_bdesc[fcode].icode;\n+  arg0 = TREE_VALUE (arglist);\n+  arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n+  op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+  op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+  tmode = insn_data[icode].operand[0].mode;\n+  mode0 = insn_data[icode].operand[1].mode;\n+  mode1 = insn_data[icode].operand[2].mode;\n+\n+  temp_target = gen_reg_rtx (tmode);\n+\n+  if (!(*insn_data[icode].operand[1].predicate) (op0, mode0))\n+    op0 = copy_to_mode_reg (mode0, op0);\n+\n+  if (!(*insn_data[icode].operand[2].predicate) (op1, mode1))\n+    op1 = copy_to_mode_reg (mode1, op1);\n+\n+  pat = GEN_FCN (icode) (temp_target, op0, op1);\n+  if (!pat)\n+    return 0;\n+\n+  /* We fake the value of CCV2 to be\n+     0, if ANY is true    <-->  NOT 0, if ALL is false\n+     1, if UPPER is true  <-->  NOT 1, if UPPER is false\n+     2, if LOWER is true  <-->  NOT 2, if LOWER is false\n+     3, if ALL is true    <-->  NOT 3, if ANY is false\n+ \n+     Thus, we can map \"enum mips_cmp_choice\" to RTL comparison operators:\n+     MIPS_CMP_ANY ->   (EQ 0)\n+     MIPS_CMP_UPPER -> (EQ 1)\n+     MIPS_CMP_LOWER -> (EQ 2)\n+     MIPS_CMP_ALL ->   (EQ 3)\n+\n+     However, because MIPS doesn't have \"branch_all\" instructions, \n+     for MIPS_CMP_ALL, we will use (NE 3) and reverse the assignment of \n+     the target to 1 fisrt and then 0.  */\n+  switch (cmp_choice)\n+    {\n+    case MIPS_CMP_ANY:\n+      test_code = EQ;\n+      compare_value = 0;\n+      break;\n+\n+    case MIPS_CMP_UPPER:\n+      test_code = EQ;\n+      compare_value = 1;\n+      break;\n+\n+    case MIPS_CMP_LOWER:\n+      test_code = EQ;\n+      compare_value = 2;\n+      break;\n+\n+    case MIPS_CMP_ALL:\n+      test_code = NE;\n+      compare_value = 3;\n+      break;\n+\n+    default:\n+      return 0;\n+    }\n+\n+  if (cmp_choice == MIPS_CMP_ALL)\n+    emit_move_insn (target, const1_rtx);\n+  else\n+    emit_move_insn (target, const0_rtx);\n+\n+  emit_insn (pat);\n+\n+  label1 = gen_label_rtx ();\n+  label2 = gen_label_rtx ();\n+\n+  if_then_else \n+    = gen_rtx_IF_THEN_ELSE (VOIDmode,\n+\t\t\t    gen_rtx_fmt_ee (test_code, CCV2mode, temp_target, \n+\t\t\t\t            GEN_INT (compare_value)),\n+\t\t\t    gen_rtx_LABEL_REF (VOIDmode, label1), pc_rtx);\n+\n+  emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, if_then_else)); \n+  emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, \n+\t\t\t       gen_rtx_LABEL_REF (VOIDmode, label2)));\n+\n+  emit_barrier ();\n+  emit_label (label1);\n+\n+  if (cmp_choice == MIPS_CMP_ALL)\n+    emit_move_insn (target, const0_rtx);\n+  else\n+    emit_move_insn (target, const1_rtx);\n+\n+  emit_label (label2);\n+\n+  return target;\n+}\n+\f\n #include \"gt-mips.h\""}, {"sha": "991d801f932f942f5019a22f459ffd03e6da4043", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 406, "deletions": 3, "changes": 409, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06a4ab70225ea3867373d64be6a13576cf7e9e2d/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06a4ab70225ea3867373d64be6a13576cf7e9e2d/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=06a4ab70225ea3867373d64be6a13576cf7e9e2d", "patch": "@@ -161,6 +161,9 @@ extern const struct mips_cpu_info *mips_tune_info;\n #define MASK_VR4130_ALIGN  0x02000000\t/* Perform VR4130 alignment opts.  */\n #define MASK_FP_EXCEPTIONS 0x04000000   /* FP exceptions are enabled.  */\n \n+#define MASK_PAIRED_SINGLE 0x10000000   /* Support paired-single FPU.  */\n+#define MASK_MIPS3D        0x20000000   /* Support MIPS-3D instructions.  */\n+\n \t\t\t\t\t/* Debug switches, not documented */\n #define MASK_DEBUG\t0\t\t/* unused */\n #define MASK_DEBUG_D\t0\t\t/* don't do define_split's */\n@@ -234,6 +237,10 @@ extern const struct mips_cpu_info *mips_tune_info;\n \n #define TARGET_FP_EXCEPTIONS\t((target_flags & MASK_FP_EXCEPTIONS) != 0)\n \n+#define TARGET_PAIRED_SINGLE_FLOAT\t\\\n+\t\t\t\t((target_flags & MASK_PAIRED_SINGLE) != 0)\n+#define TARGET_MIPS3D\t\t((target_flags & MASK_MIPS3D) != 0)\n+\n /* True if we should use NewABI-style relocation operators for\n    symbolic addresses.  This is never true for mips16 code,\n    which has its own conventions.  */\n@@ -452,7 +459,10 @@ extern const struct mips_cpu_info *mips_tune_info;\n \tbuiltin_define (\"__mips_soft_float\");\t\t\t\\\n \t\t\t\t\t\t\t\t\\\n       if (TARGET_SINGLE_FLOAT)\t\t\t\t\t\\\n-\tbuiltin_define (\"__mips_single_float\");\t\t\\\n+\tbuiltin_define (\"__mips_single_float\");\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+      if (TARGET_PAIRED_SINGLE_FLOAT)\t\t\t\t\\\n+\tbuiltin_define (\"__mips_paired_single_float\");\t\t\\\n \t\t\t\t\t\t\t\t\\\n       if (TARGET_BIG_ENDIAN)\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\\\n@@ -575,6 +585,14 @@ extern const struct mips_cpu_info *mips_tune_info;\n      N_(\"Use single (32-bit) FP only\")},\t\t\t\t\\\n   {\"double-float\",\t -MASK_SINGLE_FLOAT,\t\t\t\t\\\n      N_(\"Don't use single (32-bit) FP only\")},\t\t\t\t\\\n+  {\"paired-single\",       MASK_PAIRED_SINGLE,\t\t\t\t\\\n+     N_(\"Use paired-single floating point instructions\")},\t\t\\\n+  {\"no-paired-single\",   -MASK_PAIRED_SINGLE,\t\t\t\t\\\n+     N_(\"Use paired-single floating point instructions\")},\t\t\\\n+  {\"ips3d\",               MASK_MIPS3D,\t\t\t\t\t\\\n+     N_(\"Use MIPS-3D instructions\")},\t\t\t\t\t\\\n+  {\"no-mips3d\",          -MASK_MIPS3D,\t\t\t\t\t\\\n+     N_(\"Use MIPS-3D instructions\")},\t\t\t\t\t\\\n   {\"mad\",\t\t  MASK_MAD,\t\t\t\t\t\\\n      N_(\"Use multiply accumulate\")},\t\t\t\t\t\\\n   {\"no-mad\",\t\t -MASK_MAD,\t\t\t\t\t\\\n@@ -1048,6 +1066,7 @@ extern const struct mips_cpu_info *mips_tune_info;\n %{G*} %(endian_spec) %{mips1} %{mips2} %{mips3} %{mips4} \\\n %{mips32} %{mips32r2} %{mips64} \\\n %{mips16:%{!mno-mips16:-mips16}} %{mno-mips16:-no-mips16} \\\n+%{mips3d:-mips3d} \\\n %{mfix-vr4120} \\\n %(subtarget_asm_optimizing_spec) \\\n %(subtarget_asm_debugging_spec) \\\n@@ -1950,9 +1969,16 @@ extern enum reg_class mips_char_to_class[256];\n    `W' is for memory references that are based on a member of BASE_REG_CLASS.\n \t This is true for all non-mips16 references (although it can sometimes\n \t be indirect if !TARGET_EXPLICIT_RELOCS).  For mips16, it excludes\n-\t stack and constant-pool references.  */\n+\t stack and constant-pool references.\n+   `YG' is for 0 valued vector constants.  */\n+\n+#define EXTRA_CONSTRAINT_Y(OP,STR)\t\t\t\t\t\\\n+  (((STR)[1] == 'G')\t  ? (GET_CODE (OP) == CONST_VECTOR\t\t\\\n+\t\t\t     && (OP) == CONST0_RTX (GET_MODE (OP)))\t\\\n+   : FALSE)\n+\n \n-#define EXTRA_CONSTRAINT(OP,CODE)\t\t\t\t\t\\\n+#define EXTRA_CONSTRAINT_STR(OP,CODE,STR)\t\t\t\t\\\n   (((CODE) == 'Q')\t  ? const_arith_operand (OP, VOIDmode)\t\t\\\n    : ((CODE) == 'R')\t  ? (GET_CODE (OP) == MEM\t\t\t\\\n \t\t\t     && mips_fetch_insns (OP) == 1)\t\t\\\n@@ -1969,8 +1995,15 @@ extern enum reg_class mips_char_to_class[256];\n \t\t\t     && (!TARGET_MIPS16\t\t\t\t\\\n \t\t\t\t || (!stack_operand (OP, VOIDmode)\t\\\n \t\t\t\t     && !CONSTANT_P (XEXP (OP, 0)))))\t\\\n+   : ((CODE) == 'Y')\t  ? EXTRA_CONSTRAINT_Y (OP, STR)\t\t\\\n    : FALSE)\n \n+/* Y is the only multi-letter constraint, and has length 2.  */\n+\n+#define CONSTRAINT_LEN(C,STR)\t\t\t\t\t\t\\\n+  (((C) == 'Y') ? 2\t\t\t\t\t\t\t\\\n+   : DEFAULT_CONSTRAINT_LEN (C, STR))\n+\n /* Say which of the above are memory constraints.  */\n #define EXTRA_MEMORY_CONSTRAINT(C, STR) ((C) == 'R' || (C) == 'W')\n \n@@ -2987,3 +3020,373 @@ while (0)\n \t\" TEXT_SECTION_ASM_OP);\n #endif\n #endif\n+\n+/* MIPS Paired-Single Floating Point Instruction & MIPS-3D Support.  */\n+\n+/* Builtin functions for MIPS.  */\n+/* NOTE: The order of mips_bdesc[] in mips.c must be the same as the order of\n+   enum mips_builtins{}.  */\n+\n+enum mips_builtins\n+{\n+  MIPS_BUILTIN_PLL_PS,\n+  MIPS_BUILTIN_PUL_PS,\n+  MIPS_BUILTIN_PLU_PS,\n+  MIPS_BUILTIN_PUU_PS,\n+  MIPS_BUILTIN_CVT_PS_S,\n+  MIPS_BUILTIN_CVT_S_PL,\n+  MIPS_BUILTIN_CVT_S_PU,\n+  MIPS_BUILTIN_ABS_PS,\n+  MIPS_BUILTIN_ALNV_PS,\n+  MIPS_BUILTIN_ADDR_PS,\n+  MIPS_BUILTIN_MULR_PS,\n+  MIPS_BUILTIN_CVT_PW_PS,\n+  MIPS_BUILTIN_CVT_PS_PW,\n+\n+  MIPS_BUILTIN_RECIP1_S,\n+  MIPS_BUILTIN_RECIP1_D,\n+  MIPS_BUILTIN_RECIP1_PS,\n+  MIPS_BUILTIN_RECIP2_S,\n+  MIPS_BUILTIN_RECIP2_D,\n+  MIPS_BUILTIN_RECIP2_PS,\n+\n+  MIPS_BUILTIN_RSQRT1_S,\n+  MIPS_BUILTIN_RSQRT1_D,\n+  MIPS_BUILTIN_RSQRT1_PS,\n+  MIPS_BUILTIN_RSQRT2_S,\n+  MIPS_BUILTIN_RSQRT2_D,\n+  MIPS_BUILTIN_RSQRT2_PS,\n+\n+  MIPS_BUILTIN_ANY_C_F_PS,\n+  MIPS_BUILTIN_UPPER_C_F_PS,\n+  MIPS_BUILTIN_LOWER_C_F_PS,\n+  MIPS_BUILTIN_ALL_C_F_PS,\n+  MIPS_BUILTIN_ANY_C_UN_PS,\n+  MIPS_BUILTIN_UPPER_C_UN_PS,\n+  MIPS_BUILTIN_LOWER_C_UN_PS,\n+  MIPS_BUILTIN_ALL_C_UN_PS,\n+  MIPS_BUILTIN_ANY_C_EQ_PS,\n+  MIPS_BUILTIN_UPPER_C_EQ_PS,\n+  MIPS_BUILTIN_LOWER_C_EQ_PS,\n+  MIPS_BUILTIN_ALL_C_EQ_PS,\n+  MIPS_BUILTIN_ANY_C_UEQ_PS,\n+  MIPS_BUILTIN_UPPER_C_UEQ_PS,\n+  MIPS_BUILTIN_LOWER_C_UEQ_PS,\n+  MIPS_BUILTIN_ALL_C_UEQ_PS,\n+  MIPS_BUILTIN_ANY_C_OLT_PS,\n+  MIPS_BUILTIN_UPPER_C_OLT_PS,\n+  MIPS_BUILTIN_LOWER_C_OLT_PS,\n+  MIPS_BUILTIN_ALL_C_OLT_PS,\n+  MIPS_BUILTIN_ANY_C_ULT_PS,\n+  MIPS_BUILTIN_UPPER_C_ULT_PS,\n+  MIPS_BUILTIN_LOWER_C_ULT_PS,\n+  MIPS_BUILTIN_ALL_C_ULT_PS,\n+  MIPS_BUILTIN_ANY_C_OLE_PS,\n+  MIPS_BUILTIN_UPPER_C_OLE_PS,\n+  MIPS_BUILTIN_LOWER_C_OLE_PS,\n+  MIPS_BUILTIN_ALL_C_OLE_PS,\n+  MIPS_BUILTIN_ANY_C_ULE_PS,\n+  MIPS_BUILTIN_UPPER_C_ULE_PS,\n+  MIPS_BUILTIN_LOWER_C_ULE_PS,\n+  MIPS_BUILTIN_ALL_C_ULE_PS,\n+  MIPS_BUILTIN_ANY_C_SF_PS,\n+  MIPS_BUILTIN_UPPER_C_SF_PS,\n+  MIPS_BUILTIN_LOWER_C_SF_PS,\n+  MIPS_BUILTIN_ALL_C_SF_PS,\n+  MIPS_BUILTIN_ANY_C_NGLE_PS,\n+  MIPS_BUILTIN_UPPER_C_NGLE_PS,\n+  MIPS_BUILTIN_LOWER_C_NGLE_PS,\n+  MIPS_BUILTIN_ALL_C_NGLE_PS,\n+  MIPS_BUILTIN_ANY_C_SEQ_PS,\n+  MIPS_BUILTIN_UPPER_C_SEQ_PS,\n+  MIPS_BUILTIN_LOWER_C_SEQ_PS,\n+  MIPS_BUILTIN_ALL_C_SEQ_PS,\n+  MIPS_BUILTIN_ANY_C_NGL_PS,\n+  MIPS_BUILTIN_UPPER_C_NGL_PS,\n+  MIPS_BUILTIN_LOWER_C_NGL_PS,\n+  MIPS_BUILTIN_ALL_C_NGL_PS,\n+  MIPS_BUILTIN_ANY_C_LT_PS,\n+  MIPS_BUILTIN_UPPER_C_LT_PS,\n+  MIPS_BUILTIN_LOWER_C_LT_PS,\n+  MIPS_BUILTIN_ALL_C_LT_PS,\n+  MIPS_BUILTIN_ANY_C_NGE_PS,\n+  MIPS_BUILTIN_UPPER_C_NGE_PS,\n+  MIPS_BUILTIN_LOWER_C_NGE_PS,\n+  MIPS_BUILTIN_ALL_C_NGE_PS,\n+  MIPS_BUILTIN_ANY_C_LE_PS,\n+  MIPS_BUILTIN_UPPER_C_LE_PS,\n+  MIPS_BUILTIN_LOWER_C_LE_PS,\n+  MIPS_BUILTIN_ALL_C_LE_PS,\n+  MIPS_BUILTIN_ANY_C_NGT_PS,\n+  MIPS_BUILTIN_UPPER_C_NGT_PS,\n+  MIPS_BUILTIN_LOWER_C_NGT_PS,\n+  MIPS_BUILTIN_ALL_C_NGT_PS,\n+  MIPS_BUILTIN_ANY_CABS_F_PS,\n+  MIPS_BUILTIN_UPPER_CABS_F_PS,\n+  MIPS_BUILTIN_LOWER_CABS_F_PS,\n+  MIPS_BUILTIN_ALL_CABS_F_PS,\n+  MIPS_BUILTIN_ANY_CABS_UN_PS,\n+  MIPS_BUILTIN_UPPER_CABS_UN_PS,\n+  MIPS_BUILTIN_LOWER_CABS_UN_PS,\n+  MIPS_BUILTIN_ALL_CABS_UN_PS,\n+  MIPS_BUILTIN_ANY_CABS_EQ_PS,\n+  MIPS_BUILTIN_UPPER_CABS_EQ_PS,\n+  MIPS_BUILTIN_LOWER_CABS_EQ_PS,\n+  MIPS_BUILTIN_ALL_CABS_EQ_PS,\n+  MIPS_BUILTIN_ANY_CABS_UEQ_PS,\n+  MIPS_BUILTIN_UPPER_CABS_UEQ_PS,\n+  MIPS_BUILTIN_LOWER_CABS_UEQ_PS,\n+  MIPS_BUILTIN_ALL_CABS_UEQ_PS,\n+  MIPS_BUILTIN_ANY_CABS_OLT_PS,\n+  MIPS_BUILTIN_UPPER_CABS_OLT_PS,\n+  MIPS_BUILTIN_LOWER_CABS_OLT_PS,\n+  MIPS_BUILTIN_ALL_CABS_OLT_PS,\n+  MIPS_BUILTIN_ANY_CABS_ULT_PS,\n+  MIPS_BUILTIN_UPPER_CABS_ULT_PS,\n+  MIPS_BUILTIN_LOWER_CABS_ULT_PS,\n+  MIPS_BUILTIN_ALL_CABS_ULT_PS,\n+  MIPS_BUILTIN_ANY_CABS_OLE_PS,\n+  MIPS_BUILTIN_UPPER_CABS_OLE_PS,\n+  MIPS_BUILTIN_LOWER_CABS_OLE_PS,\n+  MIPS_BUILTIN_ALL_CABS_OLE_PS,\n+  MIPS_BUILTIN_ANY_CABS_ULE_PS,\n+  MIPS_BUILTIN_UPPER_CABS_ULE_PS,\n+  MIPS_BUILTIN_LOWER_CABS_ULE_PS,\n+  MIPS_BUILTIN_ALL_CABS_ULE_PS,\n+  MIPS_BUILTIN_ANY_CABS_SF_PS,\n+  MIPS_BUILTIN_UPPER_CABS_SF_PS,\n+  MIPS_BUILTIN_LOWER_CABS_SF_PS,\n+  MIPS_BUILTIN_ALL_CABS_SF_PS,\n+  MIPS_BUILTIN_ANY_CABS_NGLE_PS,\n+  MIPS_BUILTIN_UPPER_CABS_NGLE_PS,\n+  MIPS_BUILTIN_LOWER_CABS_NGLE_PS,\n+  MIPS_BUILTIN_ALL_CABS_NGLE_PS,\n+  MIPS_BUILTIN_ANY_CABS_SEQ_PS,\n+  MIPS_BUILTIN_UPPER_CABS_SEQ_PS,\n+  MIPS_BUILTIN_LOWER_CABS_SEQ_PS,\n+  MIPS_BUILTIN_ALL_CABS_SEQ_PS,\n+  MIPS_BUILTIN_ANY_CABS_NGL_PS,\n+  MIPS_BUILTIN_UPPER_CABS_NGL_PS,\n+  MIPS_BUILTIN_LOWER_CABS_NGL_PS,\n+  MIPS_BUILTIN_ALL_CABS_NGL_PS,\n+  MIPS_BUILTIN_ANY_CABS_LT_PS,\n+  MIPS_BUILTIN_UPPER_CABS_LT_PS,\n+  MIPS_BUILTIN_LOWER_CABS_LT_PS,\n+  MIPS_BUILTIN_ALL_CABS_LT_PS,\n+  MIPS_BUILTIN_ANY_CABS_NGE_PS,\n+  MIPS_BUILTIN_UPPER_CABS_NGE_PS,\n+  MIPS_BUILTIN_LOWER_CABS_NGE_PS,\n+  MIPS_BUILTIN_ALL_CABS_NGE_PS,\n+  MIPS_BUILTIN_ANY_CABS_LE_PS,\n+  MIPS_BUILTIN_UPPER_CABS_LE_PS,\n+  MIPS_BUILTIN_LOWER_CABS_LE_PS,\n+  MIPS_BUILTIN_ALL_CABS_LE_PS,\n+  MIPS_BUILTIN_ANY_CABS_NGT_PS,\n+  MIPS_BUILTIN_UPPER_CABS_NGT_PS,\n+  MIPS_BUILTIN_LOWER_CABS_NGT_PS,\n+  MIPS_BUILTIN_ALL_CABS_NGT_PS,\n+\n+  MIPS_BUILTIN_ANY_C_F_4S,\n+  MIPS_BUILTIN_ALL_C_F_4S,\n+  MIPS_BUILTIN_ANY_C_UN_4S,\n+  MIPS_BUILTIN_ALL_C_UN_4S,\n+  MIPS_BUILTIN_ANY_C_EQ_4S,\n+  MIPS_BUILTIN_ALL_C_EQ_4S,\n+  MIPS_BUILTIN_ANY_C_UEQ_4S,\n+  MIPS_BUILTIN_ALL_C_UEQ_4S,\n+  MIPS_BUILTIN_ANY_C_OLT_4S,\n+  MIPS_BUILTIN_ALL_C_OLT_4S,\n+  MIPS_BUILTIN_ANY_C_ULT_4S,\n+  MIPS_BUILTIN_ALL_C_ULT_4S,\n+  MIPS_BUILTIN_ANY_C_OLE_4S,\n+  MIPS_BUILTIN_ALL_C_OLE_4S,\n+  MIPS_BUILTIN_ANY_C_ULE_4S,\n+  MIPS_BUILTIN_ALL_C_ULE_4S,\n+  MIPS_BUILTIN_ANY_C_SF_4S,\n+  MIPS_BUILTIN_ALL_C_SF_4S,\n+  MIPS_BUILTIN_ANY_C_NGLE_4S,\n+  MIPS_BUILTIN_ALL_C_NGLE_4S,\n+  MIPS_BUILTIN_ANY_C_SEQ_4S,\n+  MIPS_BUILTIN_ALL_C_SEQ_4S,\n+  MIPS_BUILTIN_ANY_C_NGL_4S,\n+  MIPS_BUILTIN_ALL_C_NGL_4S,\n+  MIPS_BUILTIN_ANY_C_LT_4S,\n+  MIPS_BUILTIN_ALL_C_LT_4S,\n+  MIPS_BUILTIN_ANY_C_NGE_4S,\n+  MIPS_BUILTIN_ALL_C_NGE_4S,\n+  MIPS_BUILTIN_ANY_C_LE_4S,\n+  MIPS_BUILTIN_ALL_C_LE_4S,\n+  MIPS_BUILTIN_ANY_C_NGT_4S,\n+  MIPS_BUILTIN_ALL_C_NGT_4S,\n+  MIPS_BUILTIN_ANY_CABS_F_4S,\n+  MIPS_BUILTIN_ALL_CABS_F_4S,\n+  MIPS_BUILTIN_ANY_CABS_UN_4S,\n+  MIPS_BUILTIN_ALL_CABS_UN_4S,\n+  MIPS_BUILTIN_ANY_CABS_EQ_4S,\n+  MIPS_BUILTIN_ALL_CABS_EQ_4S,\n+  MIPS_BUILTIN_ANY_CABS_UEQ_4S,\n+  MIPS_BUILTIN_ALL_CABS_UEQ_4S,\n+  MIPS_BUILTIN_ANY_CABS_OLT_4S,\n+  MIPS_BUILTIN_ALL_CABS_OLT_4S,\n+  MIPS_BUILTIN_ANY_CABS_ULT_4S,\n+  MIPS_BUILTIN_ALL_CABS_ULT_4S,\n+  MIPS_BUILTIN_ANY_CABS_OLE_4S,\n+  MIPS_BUILTIN_ALL_CABS_OLE_4S,\n+  MIPS_BUILTIN_ANY_CABS_ULE_4S,\n+  MIPS_BUILTIN_ALL_CABS_ULE_4S,\n+  MIPS_BUILTIN_ANY_CABS_SF_4S,\n+  MIPS_BUILTIN_ALL_CABS_SF_4S,\n+  MIPS_BUILTIN_ANY_CABS_NGLE_4S,\n+  MIPS_BUILTIN_ALL_CABS_NGLE_4S,\n+  MIPS_BUILTIN_ANY_CABS_SEQ_4S,\n+  MIPS_BUILTIN_ALL_CABS_SEQ_4S,\n+  MIPS_BUILTIN_ANY_CABS_NGL_4S,\n+  MIPS_BUILTIN_ALL_CABS_NGL_4S,\n+  MIPS_BUILTIN_ANY_CABS_LT_4S,\n+  MIPS_BUILTIN_ALL_CABS_LT_4S,\n+  MIPS_BUILTIN_ANY_CABS_NGE_4S,\n+  MIPS_BUILTIN_ALL_CABS_NGE_4S,\n+  MIPS_BUILTIN_ANY_CABS_LE_4S,\n+  MIPS_BUILTIN_ALL_CABS_LE_4S,\n+  MIPS_BUILTIN_ANY_CABS_NGT_4S,\n+  MIPS_BUILTIN_ALL_CABS_NGT_4S,\n+\n+  MIPS_BUILTIN_CABS_F_S,\n+  MIPS_BUILTIN_CABS_UN_S,\n+  MIPS_BUILTIN_CABS_EQ_S,\n+  MIPS_BUILTIN_CABS_UEQ_S,\n+  MIPS_BUILTIN_CABS_OLT_S,\n+  MIPS_BUILTIN_CABS_ULT_S,\n+  MIPS_BUILTIN_CABS_OLE_S,\n+  MIPS_BUILTIN_CABS_ULE_S,\n+  MIPS_BUILTIN_CABS_SF_S,\n+  MIPS_BUILTIN_CABS_NGLE_S,\n+  MIPS_BUILTIN_CABS_SEQ_S,\n+  MIPS_BUILTIN_CABS_NGL_S,\n+  MIPS_BUILTIN_CABS_LT_S,\n+  MIPS_BUILTIN_CABS_NGE_S,\n+  MIPS_BUILTIN_CABS_LE_S,\n+  MIPS_BUILTIN_CABS_NGT_S,\n+  MIPS_BUILTIN_CABS_F_D,\n+  MIPS_BUILTIN_CABS_UN_D,\n+  MIPS_BUILTIN_CABS_EQ_D,\n+  MIPS_BUILTIN_CABS_UEQ_D,\n+  MIPS_BUILTIN_CABS_OLT_D,\n+  MIPS_BUILTIN_CABS_ULT_D,\n+  MIPS_BUILTIN_CABS_OLE_D,\n+  MIPS_BUILTIN_CABS_ULE_D,\n+  MIPS_BUILTIN_CABS_SF_D,\n+  MIPS_BUILTIN_CABS_NGLE_D,\n+  MIPS_BUILTIN_CABS_SEQ_D,\n+  MIPS_BUILTIN_CABS_NGL_D,\n+  MIPS_BUILTIN_CABS_LT_D,\n+  MIPS_BUILTIN_CABS_NGE_D,\n+  MIPS_BUILTIN_CABS_LE_D,\n+  MIPS_BUILTIN_CABS_NGT_D,\n+\n+  MIPS_BUILTIN_MOVT_C_F_PS,\n+  MIPS_BUILTIN_MOVT_C_UN_PS,\n+  MIPS_BUILTIN_MOVT_C_EQ_PS,\n+  MIPS_BUILTIN_MOVT_C_UEQ_PS,\n+  MIPS_BUILTIN_MOVT_C_OLT_PS,\n+  MIPS_BUILTIN_MOVT_C_ULT_PS,\n+  MIPS_BUILTIN_MOVT_C_OLE_PS,\n+  MIPS_BUILTIN_MOVT_C_ULE_PS,\n+  MIPS_BUILTIN_MOVT_C_SF_PS,\n+  MIPS_BUILTIN_MOVT_C_NGLE_PS,\n+  MIPS_BUILTIN_MOVT_C_SEQ_PS,\n+  MIPS_BUILTIN_MOVT_C_NGL_PS,\n+  MIPS_BUILTIN_MOVT_C_LT_PS,\n+  MIPS_BUILTIN_MOVT_C_NGE_PS,\n+  MIPS_BUILTIN_MOVT_C_LE_PS,\n+  MIPS_BUILTIN_MOVT_C_NGT_PS,\n+  MIPS_BUILTIN_MOVT_CABS_F_PS,\n+  MIPS_BUILTIN_MOVT_CABS_UN_PS,\n+  MIPS_BUILTIN_MOVT_CABS_EQ_PS,\n+  MIPS_BUILTIN_MOVT_CABS_UEQ_PS,\n+  MIPS_BUILTIN_MOVT_CABS_OLT_PS,\n+  MIPS_BUILTIN_MOVT_CABS_ULT_PS,\n+  MIPS_BUILTIN_MOVT_CABS_OLE_PS,\n+  MIPS_BUILTIN_MOVT_CABS_ULE_PS,\n+  MIPS_BUILTIN_MOVT_CABS_SF_PS,\n+  MIPS_BUILTIN_MOVT_CABS_NGLE_PS,\n+  MIPS_BUILTIN_MOVT_CABS_SEQ_PS,\n+  MIPS_BUILTIN_MOVT_CABS_NGL_PS,\n+  MIPS_BUILTIN_MOVT_CABS_LT_PS,\n+  MIPS_BUILTIN_MOVT_CABS_NGE_PS,\n+  MIPS_BUILTIN_MOVT_CABS_LE_PS,\n+  MIPS_BUILTIN_MOVT_CABS_NGT_PS,\n+  MIPS_BUILTIN_MOVF_C_F_PS,\n+  MIPS_BUILTIN_MOVF_C_UN_PS,\n+  MIPS_BUILTIN_MOVF_C_EQ_PS,\n+  MIPS_BUILTIN_MOVF_C_UEQ_PS,\n+  MIPS_BUILTIN_MOVF_C_OLT_PS,\n+  MIPS_BUILTIN_MOVF_C_ULT_PS,\n+  MIPS_BUILTIN_MOVF_C_OLE_PS,\n+  MIPS_BUILTIN_MOVF_C_ULE_PS,\n+  MIPS_BUILTIN_MOVF_C_SF_PS,\n+  MIPS_BUILTIN_MOVF_C_NGLE_PS,\n+  MIPS_BUILTIN_MOVF_C_SEQ_PS,\n+  MIPS_BUILTIN_MOVF_C_NGL_PS,\n+  MIPS_BUILTIN_MOVF_C_LT_PS,\n+  MIPS_BUILTIN_MOVF_C_NGE_PS,\n+  MIPS_BUILTIN_MOVF_C_LE_PS,\n+  MIPS_BUILTIN_MOVF_C_NGT_PS,\n+  MIPS_BUILTIN_MOVF_CABS_F_PS,\n+  MIPS_BUILTIN_MOVF_CABS_UN_PS,\n+  MIPS_BUILTIN_MOVF_CABS_EQ_PS,\n+  MIPS_BUILTIN_MOVF_CABS_UEQ_PS,\n+  MIPS_BUILTIN_MOVF_CABS_OLT_PS,\n+  MIPS_BUILTIN_MOVF_CABS_ULT_PS,\n+  MIPS_BUILTIN_MOVF_CABS_OLE_PS,\n+  MIPS_BUILTIN_MOVF_CABS_ULE_PS,\n+  MIPS_BUILTIN_MOVF_CABS_SF_PS,\n+  MIPS_BUILTIN_MOVF_CABS_NGLE_PS,\n+  MIPS_BUILTIN_MOVF_CABS_SEQ_PS,\n+  MIPS_BUILTIN_MOVF_CABS_NGL_PS,\n+  MIPS_BUILTIN_MOVF_CABS_LT_PS,\n+  MIPS_BUILTIN_MOVF_CABS_NGE_PS,\n+  MIPS_BUILTIN_MOVF_CABS_LE_PS,\n+  MIPS_BUILTIN_MOVF_CABS_NGT_PS,\n+\n+  /* THE LAST BUILTIN.  */\n+  MIPS_BUILTIN_MAX_BUILTIN\n+};\n+\n+/* MIPS builtin function types.  */\n+\n+enum mips_function_type\n+{\n+  MIPS_V2SF_FTYPE_V2SF,\n+  MIPS_V2SF_FTYPE_V2SF_V2SF,\n+  MIPS_V2SF_FTYPE_V2SF_V2SF_INT,\n+  MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+  MIPS_V2SF_FTYPE_SF_SF,\n+  MIPS_INT_FTYPE_V2SF_V2SF,\n+  MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n+  MIPS_INT_FTYPE_SF_SF,\n+  MIPS_INT_FTYPE_DF_DF,\n+  MIPS_SF_FTYPE_V2SF,\n+  MIPS_SF_FTYPE_SF,\n+  MIPS_SF_FTYPE_SF_SF,\n+  MIPS_DF_FTYPE_DF,\n+  MIPS_DF_FTYPE_DF_DF,\n+\n+  /* The last type.  */\n+  MIPS_MAX_FTYPE_MAX\n+};\n+\n+/* MIPS compare choices used for MIPS builtin functions.  */\n+\n+enum mips_cmp_choice\n+{\n+  MIPS_CMP_ANY,    /* Check if any result is true.  */\n+  MIPS_CMP_UPPER,  /* Check if the upper one of two results is true.  */\n+  MIPS_CMP_LOWER,  /* Check if the lower one of two results is true.  */\n+  MIPS_CMP_ALL,    /* Check if all results are true.  */\n+\n+  MIPS_CMP_MOVT,   /* Conditional move if true.  */\n+  MIPS_CMP_MOVF,   /* Conditional move if false.  */\n+\n+  MIPS_CMP_MAX\n+};"}, {"sha": "664f031ee046c10decfb66e6a3986f349a322923", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 236, "deletions": 1, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06a4ab70225ea3867373d64be6a13576cf7e9e2d/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06a4ab70225ea3867373d64be6a13576cf7e9e2d/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=06a4ab70225ea3867373d64be6a13576cf7e9e2d", "patch": "@@ -48,7 +48,70 @@\n \n    (UNSPEC_ADDRESS_FIRST\t100)\n \n-   (FAKE_CALL_REGNO\t\t79)])\n+   (FAKE_CALL_REGNO\t\t79)\n+\n+   ;; For MIPS Paired-Singled Floating Point Instructions.\n+\n+   (UNSPEC_C_F\t\t\t201)\n+   (UNSPEC_C_UN\t\t\t202)\n+   (UNSPEC_C_EQ\t\t\t203)\n+   (UNSPEC_C_UEQ\t\t204)\n+   (UNSPEC_C_OLT\t\t205)\n+   (UNSPEC_C_ULT\t\t206)\n+   (UNSPEC_C_OLE\t\t207)\n+   (UNSPEC_C_ULE\t\t208)\n+   (UNSPEC_C_SF\t\t\t209)\n+   (UNSPEC_C_NGLE\t\t210)\n+   (UNSPEC_C_SEQ\t\t211)\n+   (UNSPEC_C_NGL\t\t212)\n+   (UNSPEC_C_LT\t\t\t213)\n+   (UNSPEC_C_NGE\t\t214)\n+   (UNSPEC_C_LE\t\t\t215)\n+   (UNSPEC_C_NGT\t\t216)\n+\n+   ;; MIPS64/MIPS32R2 alnv.ps\n+   (UNSPEC_ALNV_PS\t\t217)\n+\n+   ;; MIPS-3D instructions\n+\n+   (UNSPEC_CABS_F\t\t218)\n+   (UNSPEC_CABS_UN\t\t219)\n+   (UNSPEC_CABS_EQ\t\t220)\n+   (UNSPEC_CABS_UEQ\t\t221)\n+   (UNSPEC_CABS_OLT\t\t222)\n+   (UNSPEC_CABS_ULT\t\t223)\n+   (UNSPEC_CABS_OLE\t\t224)\n+   (UNSPEC_CABS_ULE\t\t225)\n+   (UNSPEC_CABS_SF\t\t226)\n+   (UNSPEC_CABS_NGLE\t\t227)\n+   (UNSPEC_CABS_SEQ\t\t228)\n+   (UNSPEC_CABS_NGL\t\t229)\n+   (UNSPEC_CABS_LT\t\t230)\n+   (UNSPEC_CABS_NGE\t\t231)\n+   (UNSPEC_CABS_LE\t\t232)\n+   (UNSPEC_CABS_NGT\t\t233)\n+\n+   (UNSPEC_ADDR_PS\t\t234)\n+   (UNSPEC_CVT_PW_PS\t\t235)\n+   (UNSPEC_CVT_PS_PW\t\t236)\n+   (UNSPEC_MULR_PS\t\t237)\n+\n+   (UNSPEC_RECIP1_S\t\t238)\n+   (UNSPEC_RECIP1_D\t\t239)\n+   (UNSPEC_RECIP1_PS\t\t240)\n+   (UNSPEC_RECIP2_S\t\t241)\n+   (UNSPEC_RECIP2_D\t\t242)\n+   (UNSPEC_RECIP2_PS\t\t243)\n+\n+   (UNSPEC_RSQRT1_S\t\t244)\n+   (UNSPEC_RSQRT1_D\t\t245)\n+   (UNSPEC_RSQRT1_PS\t\t246)\n+   (UNSPEC_RSQRT2_S\t\t247)\n+   (UNSPEC_RSQRT2_D\t\t248)\n+   (UNSPEC_RSQRT2_PS\t\t249)\n+\n+  ]\n+)\n \n (include \"predicates.md\")\n \f\n@@ -471,6 +534,15 @@\n   [(set_attr \"type\"\t\"fadd\")\n    (set_attr \"mode\"\t\"SF\")])\n \n+(define_insn \"addv2sf3\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=f\")\n+\t(plus:V2SF (match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t   (match_operand:V2SF 2 \"register_operand\" \"f\")))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"add.ps\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fadd\")\n+   (set_attr \"mode\" \"SF\")])\n+\n (define_expand \"add<mode>3\"\n   [(set (match_operand:GPR 0 \"register_operand\")\n \t(plus:GPR (match_operand:GPR 1 \"register_operand\")\n@@ -719,6 +791,15 @@\n   [(set_attr \"type\"\t\"fadd\")\n    (set_attr \"mode\"\t\"SF\")])\n \n+(define_insn \"subv2sf3\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=f\")\n+\t(minus:V2SF (match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t    (match_operand:V2SF 2 \"register_operand\" \"f\")))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"sub.ps\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fadd\")\n+   (set_attr \"mode\" \"SF\")])\n+\n (define_insn \"sub<mode>3\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n \t(minus:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n@@ -804,6 +885,14 @@\n    (set_attr \"mode\"\t\"SF\")\n    (set_attr \"length\"\t\"8\")])\n \n+(define_insn \"mulv2sf3\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=f\")\n+\t(mult:V2SF (match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t   (match_operand:V2SF 2 \"register_operand\" \"f\")))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"mul.ps\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fmul\")\n+   (set_attr \"mode\" \"SF\")])\n \n ;; The original R4000 has a cpu bug.  If a double-word or a variable\n ;; shift executes while an integer multiplication is in progress, the\n@@ -1602,6 +1691,16 @@\n   [(set_attr \"type\"\t\"fmadd\")\n    (set_attr \"mode\"\t\"SF\")])\n \n+(define_insn \"\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=f\")\n+\t(plus:V2SF (mult:V2SF (match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\"))\n+\t\t   (match_operand:V2SF 3 \"register_operand\" \"f\")))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"madd.ps\\t%0,%3,%1,%2\"\n+  [(set_attr \"type\" \"fmadd\")\n+   (set_attr \"mode\" \"SF\")])\n+\n (define_insn \"\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(minus:DF (mult:DF (match_operand:DF 1 \"register_operand\" \"f\")\n@@ -1623,6 +1722,16 @@\n   [(set_attr \"type\"\t\"fmadd\")\n    (set_attr \"mode\"\t\"SF\")])\n \n+(define_insn \"\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=f\")\n+\t(minus:V2SF (mult:V2SF (match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t\t       (match_operand:V2SF 2 \"register_operand\" \"f\"))\n+\t\t    (match_operand:V2SF 3 \"register_operand\" \"f\")))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"msub.ps\\t%0,%3,%1,%2\"\n+  [(set_attr \"type\" \"fmadd\")\n+   (set_attr \"mode\" \"SF\")])\n+\n (define_insn \"\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(neg:DF (plus:DF (mult:DF (match_operand:DF 1 \"register_operand\" \"f\")\n@@ -1667,6 +1776,28 @@\n   [(set_attr \"type\"\t\"fmadd\")\n    (set_attr \"mode\"\t\"SF\")])\n \n+(define_insn \"*nmaddv2sf\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=f\")\n+\t(neg:V2SF (plus:V2SF (mult:V2SF \n+\t\t\t      (match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\"))\n+\t\t\t     (match_operand:V2SF 3 \"register_operand\" \"f\"))))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT && HONOR_SIGNED_ZEROS (V2SFmode)\"\n+  \"nmadd.ps\\t%0,%3,%1,%2\"\n+  [(set_attr \"type\" \"fmadd\")\n+   (set_attr \"mode\" \"SF\")])\n+\n+(define_insn \"*nmaddv2sf_fastmath\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=f\")\n+\t(minus:V2SF (mult:V2SF (neg:V2SF\n+\t\t\t\t(match_operand:V2SF 1 \"register_operand\" \"f\"))\n+\t\t\t       (match_operand:V2SF 2 \"register_operand\" \"f\"))\n+\t\t    (match_operand:V2SF 3 \"register_operand\" \"f\")))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT && !HONOR_SIGNED_ZEROS (V2SFmode)\"\n+  \"nmadd.ps\\t%0,%3,%1,%2\"\n+  [(set_attr \"type\" \"fmadd\")\n+   (set_attr \"mode\" \"SF\")])\n+\n (define_insn \"\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(neg:DF (minus:DF (mult:DF (match_operand:DF 2 \"register_operand\" \"f\")\n@@ -1710,6 +1841,27 @@\n   \"nmsub.s\\t%0,%1,%2,%3\"\n   [(set_attr \"type\"\t\"fmadd\")\n    (set_attr \"mode\"\t\"SF\")])\n+\n+(define_insn \"*nmsubv2sf\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=f\")\n+\t(neg:V2SF (minus:V2SF\n+\t\t   (mult:V2SF (match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t\t      (match_operand:V2SF 2 \"register_operand\" \"f\"))\n+\t\t   (match_operand:V2SF 3 \"register_operand\" \"f\"))))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT && HONOR_SIGNED_ZEROS (V2SFmode)\"\n+  \"nmsub.ps\\t%0,%3,%1,%2\"\n+  [(set_attr \"type\" \"fmadd\")\n+   (set_attr \"mode\" \"SF\")])\n+\n+(define_insn \"*nmsubv2sf_fastmath\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=f\")\n+\t(minus:V2SF (match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t    (mult:V2SF (match_operand:V2SF 2 \"register_operand\" \"f\")\n+\t\t\t       (match_operand:V2SF 3 \"register_operand\" \"f\"))))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT && !HONOR_SIGNED_ZEROS (V2SFmode)\"\n+  \"nmsub.ps\\t%0,%1,%2,%3\"\n+  [(set_attr \"type\" \"fmadd\")\n+   (set_attr \"mode\" \"SF\")])\n \f\n ;;\n ;;  ....................\n@@ -2033,6 +2185,14 @@\n   \"abs.s\\t%0,%1\"\n   [(set_attr \"type\"\t\"fabs\")\n    (set_attr \"mode\"\t\"SF\")])\n+\n+(define_insn \"absv2sf2\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=f\")\n+\t(abs:V2SF (match_operand:V2SF 1 \"register_operand\" \"f\")))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"abs.ps\\t%0,%1\"\n+  [(set_attr \"type\" \"fabs\")\n+   (set_attr \"mode\" \"SF\")])\n \f\n ;;\n ;;  ....................\n@@ -2133,6 +2293,14 @@ beq\\t%2,%.,1b\\;\\\n   [(set_attr \"type\"\t\"fneg\")\n    (set_attr \"mode\"\t\"SF\")])\n \n+(define_insn \"negv2sf2\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=f\")\n+\t(neg:V2SF (match_operand:V2SF 1 \"register_operand\" \"f\")))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"neg.ps\\t%0,%1\"\n+  [(set_attr \"type\" \"fneg\")\n+   (set_attr \"mode\" \"SF\")])\n+\n (define_insn \"one_cmpl<mode>2\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n \t(not:GPR (match_operand:GPR 1 \"register_operand\" \"d\")))]\n@@ -3749,6 +3917,26 @@ beq\\t%2,%.,1b\\;\\\n   [(set_attr \"type\" \"fpidxload\")\n    (set_attr \"mode\" \"DF\")])\n \n+(define_insn \"*ldxc1_v2sf_si\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=f\")\n+\t(mem:V2SF (plus:SI (match_operand:SI 1 \"register_operand\" \"d\")\n+\t\t\t   (match_operand:SI 2 \"register_operand\" \"d\"))))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"ldxc1\\t%0,%1(%2)\"\n+  [(set_attr \"type\" \"fpidxload\")\n+   (set_attr \"mode\" \"SF\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"*ldxc1_v2sf_di\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=f\")\n+\t(mem:V2SF (plus:DI (match_operand:DI 1 \"register_operand\" \"d\")\n+\t\t\t   (match_operand:DI 2 \"register_operand\" \"d\"))))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"ldxc1\\t%0,%1(%2)\"\n+  [(set_attr \"type\" \"fpidxload\")\n+   (set_attr \"mode\" \"SF\")\n+   (set_attr \"length\" \"4\")])\n+\n (define_insn \"*swxc1_<mode>\"\n   [(set (mem:SF (plus:P (match_operand:P 1 \"register_operand\" \"d\")\n \t\t\t(match_operand:P 2 \"register_operand\" \"d\")))\n@@ -3767,6 +3955,26 @@ beq\\t%2,%.,1b\\;\\\n   [(set_attr \"type\" \"fpidxstore\")\n    (set_attr \"mode\" \"DF\")])\n \n+(define_insn \"*sdxc1_v2sf_si\"\n+  [(set (mem:V2SF (plus:SI (match_operand:SI 1 \"register_operand\" \"d\")\n+\t\t\t   (match_operand:SI 2 \"register_operand\" \"d\")))\n+\t(match_operand:V2SF 0 \"register_operand\" \"f\"))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"sdxc1\\t%0,%1(%2)\"\n+  [(set_attr \"type\" \"fpidxstore\")\n+   (set_attr \"mode\" \"SF\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"*sdxc1_v2sf_di\"\n+  [(set (mem:V2SF (plus:DI (match_operand:DI 1 \"register_operand\" \"d\")\n+\t\t\t   (match_operand:DI 2 \"register_operand\" \"d\")))\n+\t(match_operand:V2SF 0 \"register_operand\" \"f\"))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"sdxc1\\t%0,%1(%2)\"\n+  [(set_attr \"type\" \"fpidxstore\")\n+   (set_attr \"mode\" \"SF\")\n+   (set_attr \"length\" \"4\")])\n+\n ;; 16-bit Integer moves\n \n ;; Unlike most other insns, the move insns can't be split with\n@@ -4094,6 +4302,29 @@ beq\\t%2,%.,1b\\;\\\n   operands[3] = GEN_INT (-INTVAL (operands[1]));\n })\n \n+;; 64-bit paired-single floating point moves\n+\n+(define_expand \"movv2sf\"\n+  [(set (match_operand:V2SF 0)\n+\t(match_operand:V2SF 1))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+{\n+  if (mips_legitimize_move (V2SFmode, operands[0], operands[1]))\n+    DONE;\n+})\n+\n+(define_insn \"movv2sf_hardfloat_64bit\"\n+  [(set (match_operand:V2SF 0 \"nonimmediate_operand\" \"=f,f,f,m,*f,*d,*d,*d,*m\")\n+\t(match_operand:V2SF 1 \"move_operand\" \"f,YG,m,fYG,*d,*f,*d*YG,*m,*d\"))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\n+   && TARGET_64BIT\n+   && (register_operand (operands[0], V2SFmode)\n+       || reg_or_0_operand (operands[1], V2SFmode))\"\n+  { return mips_output_move (operands[0], operands[1]); }\n+  [(set_attr \"type\" \"fmove,xfer,fpload,fpstore,xfer,xfer,arith,load,store\")\n+   (set_attr \"mode\" \"SF\")\n+   (set_attr \"length\" \"4,4,*,*,4,4,4,*,*\")])\n+\n ;; The HI and LO registers are not truly independent.  If we move an mthi\n ;; instruction before an mflo instruction, it will make the result of the\n ;; mflo unpredictable.  The same goes for mtlo and mfhi.\n@@ -5815,3 +6046,7 @@ beq\\t%2,%.,1b\\;\\\n   \"reload_completed\"\n   [(match_dup 0)]\n   { operands[0] = mips_rewrite_small_data (operands[0]); })\n+\f\n+; The MIPS Paired-Single Floating Point and MIPS-3D Instructions.\n+\n+(include \"mips-ps-3d.md\")"}, {"sha": "9e9acdae9f0bb5dde789f1e0bca252216837d5d9", "filename": "gcc/config/mips/predicates.md", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06a4ab70225ea3867373d64be6a13576cf7e9e2d/gcc%2Fconfig%2Fmips%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06a4ab70225ea3867373d64be6a13576cf7e9e2d/gcc%2Fconfig%2Fmips%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fpredicates.md?ref=06a4ab70225ea3867373d64be6a13576cf7e9e2d", "patch": "@@ -43,7 +43,7 @@\n        (match_test \"INTVAL (op) + 1 != 0\")))\n \n (define_predicate \"const_0_operand\"\n-  (and (match_code \"const_int,const_double\")\n+  (and (match_code \"const_int,const_double,const_vector\")\n        (match_test \"op == CONST0_RTX (GET_MODE (op))\")))\n \n (define_predicate \"reg_or_0_operand\"\n@@ -52,13 +52,19 @@\n        (match_operand 0 \"register_operand\")))\n \n (define_predicate \"const_1_operand\"\n-  (and (match_code \"const_int,const_double\")\n+  (and (match_code \"const_int,const_double,const_vector\")\n        (match_test \"op == CONST1_RTX (GET_MODE (op))\")))\n \n (define_predicate \"reg_or_1_operand\"\n   (ior (match_operand 0 \"const_1_operand\")\n        (match_operand 0 \"register_operand\")))\n \n+;; This is used for indexing into vectors, and hence only accepts const_int.\n+(define_predicate \"const_0_or_1_operand\"\n+  (and (match_code \"const_int\")\n+       (ior (match_test \"op == CONST0_RTX (GET_MODE (op))\")\n+\t    (match_test \"op == CONST1_RTX (GET_MODE (op))\"))))\n+\n (define_predicate \"fpr_operand\"\n   (and (match_code \"reg\")\n        (match_test \"FP_REG_P (REGNO (op))\")))"}, {"sha": "33b67b7802115a3e836d23425e498d46d8f79fbb", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06a4ab70225ea3867373d64be6a13576cf7e9e2d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06a4ab70225ea3867373d64be6a13576cf7e9e2d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=06a4ab70225ea3867373d64be6a13576cf7e9e2d", "patch": "@@ -538,6 +538,7 @@ Objective-C and Objective-C++ Dialects}.\n -mips16  -mno-mips16  -mabi=@var{abi}  -mabicalls  -mno-abicalls @gol\n -mxgot  -mno-xgot  -mgp32  -mgp64  -mfp32  -mfp64 @gol\n -mhard-float  -msoft-float  -msingle-float  -mdouble-float @gol\n+-mpaired-single  -mips3d @gol\n -mint64  -mlong64  -mlong32 @gol\n -G@var{num}  -membedded-data  -mno-embedded-data @gol\n -muninit-const-in-rodata  -mno-uninit-const-in-rodata @gol\n@@ -9262,6 +9263,19 @@ operations.\n Assume that the floating-point coprocessor supports double-precision\n operations.  This is the default.\n \n+@itemx -mpaired-single\n+@itemx -mno-paired-single\n+@opindex mpaired-single\n+@opindex mno-paired-single\n+Use (do not use) the paired single instructions.\n+\n+@itemx -mips3d\n+@itemx -mno-mips3d\n+@opindex mips3d\n+@opindex mno-mips3d\n+Use (do not use) the MIPS-3D ASE.  The option @option{-mips3d} implies\n+@option{-mpaired-single}.\n+\n @item -mint64\n @opindex mint64\n Force @code{int} and @code{long} types to be 64 bits wide.  See"}]}