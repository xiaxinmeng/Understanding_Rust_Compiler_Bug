{"sha": "4654c0cf4a05c0af9ff3d0969382d175f5b32e7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY1NGMwY2Y0YTA1YzBhZjlmZjNkMDk2OTM4MmQxNzVmNWIzMmU3ZQ==", "commit": {"author": {"name": "Trevor Saunders", "email": "tsaunders@mozilla.com", "date": "2014-09-16T01:23:42Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2014-09-16T01:23:42Z"}, "message": "Replace INSN_DELETED_P with rtx_insn member functions\n\ngcc/\n\n\t* cfgrtl.c, combine.c, config/arc/arc.c, config/mcore/mcore.c,\n\tconfig/rs6000/rs6000.c, config/sh/sh.c, cprop.c, dwarf2out.c,\n\temit-rtl.c, final.c, function.c, gcse.c, jump.c, reg-stack.c,\n\treload1.c, reorg.c, resource.c, sel-sched-ir.c: Replace INSN_DELETED_P\n\tmacro with statically checked member functions.\n\t* rtl.h (rtx_insn::deleted): New method.\n\t(rtx_insn::set_deleted): Likewise.\n\t(rtx_insn::set_undeleted): Likewise.\n\t(INSN_DELETED_P): Remove.\n\nFrom-SVN: r215282", "tree": {"sha": "afa1d791e1a24bd21d9981f0b69fd768831df3cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afa1d791e1a24bd21d9981f0b69fd768831df3cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/comments", "author": null, "committer": null, "parents": [{"sha": "e73de8f37af47e6568c145d41f0490338b942288", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e73de8f37af47e6568c145d41f0490338b942288", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e73de8f37af47e6568c145d41f0490338b942288"}], "stats": {"total": 155, "additions": 89, "deletions": 66}, "files": [{"sha": "94f2d9cbf5c9a01ded39d9f3dda3918ae5e23c11", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4654c0cf4a05c0af9ff3d0969382d175f5b32e7e", "patch": "@@ -1,3 +1,15 @@\n+2014-09-15  Trevor Saunders  <tsaunders@mozilla.com>\n+    \n+    \t* cfgrtl.c, combine.c, config/arc/arc.c, config/mcore/mcore.c,\n+    \tconfig/rs6000/rs6000.c, config/sh/sh.c, cprop.c, dwarf2out.c,\n+    \temit-rtl.c, final.c, function.c, gcse.c, jump.c, reg-stack.c,\n+    \treload1.c, reorg.c, resource.c, sel-sched-ir.c: Replace INSN_DELETED_P\n+    \tmacro with statically checked member functions.\n+    \t* rtl.h (rtx_insn::deleted): New method.\n+    \t(rtx_insn::set_deleted): Likewise.\n+    \t(rtx_insn::set_undeleted): Likewise.\n+    \t(INSN_DELETED_P): Remove.\n+\n 2014-09-15  Trevor Saunders  <tsaunders@mozilla.com>\n \n \t* config/mn10300/mn10300.c (mn10300_insert_setlb_lcc): Assign the"}, {"sha": "8eb337e937760be59adee3f5dfd905e39f506341", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=4654c0cf4a05c0af9ff3d0969382d175f5b32e7e", "patch": "@@ -165,11 +165,11 @@ delete_insn (rtx uncast_insn)\n   if (really_delete)\n     {\n       /* If this insn has already been deleted, something is very wrong.  */\n-      gcc_assert (!INSN_DELETED_P (insn));\n+      gcc_assert (!insn->deleted ());\n       if (INSN_P (insn))\n \tdf_insn_delete (insn);\n       remove_insn (insn);\n-      INSN_DELETED_P (insn) = 1;\n+      insn->set_deleted ();\n     }\n \n   /* If deleting a jump, decrement the use count of the label.  Deleting\n@@ -254,7 +254,7 @@ delete_insn_chain (rtx start, rtx finish, bool clear_bb)\n       else\n \tdelete_insn (current);\n \n-      if (clear_bb && !INSN_DELETED_P (current))\n+      if (clear_bb && !current->deleted ())\n \tset_block_for_insn (current, NULL);\n \n       if (current == start)\n@@ -3278,7 +3278,7 @@ fixup_abnormal_edges (void)\n \t\t      if (GET_CODE (PATTERN (insn)) != USE)\n \t\t\t{\n \t\t\t  /* We're not deleting it, we're moving it.  */\n-\t\t\t  INSN_DELETED_P (insn) = 0;\n+\t\t\t  insn->set_undeleted ();\n \t\t\t  SET_PREV_INSN (insn) = NULL_RTX;\n \t\t\t  SET_NEXT_INSN (insn) = NULL_RTX;\n "}, {"sha": "bce5545099381441f5b68762ccbbac271cbe568d", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=4654c0cf4a05c0af9ff3d0969382d175f5b32e7e", "patch": "@@ -1238,7 +1238,7 @@ combine_instructions (rtx_insn *f, unsigned int nregs)\n \t    continue;\n \n \t  while (last_combined_insn\n-\t\t && INSN_DELETED_P (last_combined_insn))\n+\t\t && last_combined_insn->deleted ())\n \t    last_combined_insn = PREV_INSN (last_combined_insn);\n \t  if (last_combined_insn == NULL_RTX\n \t      || BARRIER_P (last_combined_insn)"}, {"sha": "bae1a05f8c2d94e93c14fe0b2693486fd8f25e86", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=4654c0cf4a05c0af9ff3d0969382d175f5b32e7e", "patch": "@@ -2823,7 +2823,7 @@ arc_print_operand (FILE *file, rtx x, int code)\n \t  rtx_insn *delay = final_sequence->insn (1);\n \n \t  /* For TARGET_PAD_RETURN we might have grabbed the delay insn.  */\n-\t  if (INSN_DELETED_P (delay))\n+\t  if (delay->deleted ())\n \t    return;\n \t  if (JUMP_P (jump) && INSN_ANNULLED_BRANCH_P (jump))\n \t    fputs (INSN_FROM_TARGET_P (delay) ? \".d\"\n@@ -3748,7 +3748,7 @@ arc_ccfsm_record_condition (rtx cond, bool reverse, rtx_insn *jump,\n     {\n       rtx insn = XVECEXP (PATTERN (seq_insn), 0, 1);\n \n-      if (!INSN_DELETED_P (insn)\n+      if (!as_a<rtx_insn *> (insn)->deleted ()\n \t  && INSN_ANNULLED_BRANCH_P (jump)\n \t  && (TARGET_AT_DBR_CONDEXEC || INSN_FROM_TARGET_P (insn)))\n \t{\n@@ -8627,7 +8627,7 @@ arc_unalign_branch_p (rtx branch)\n     return 0;\n   /* Do not do this if we have a filled delay slot.  */\n   if (get_attr_delay_slot_filled (branch) == DELAY_SLOT_FILLED_YES\n-      && !INSN_DELETED_P (NEXT_INSN (branch)))\n+      && !NEXT_INSN (branch)->deleted ())\n     return 0;\n   note = find_reg_note (branch, REG_BR_PROB, 0);\n   return (!note\n@@ -8709,7 +8709,7 @@ arc_pad_return (void)\n \t  rtx save_pred = current_insn_predicate;\n \t  final_scan_insn (prev, asm_out_file, optimize, 1, NULL);\n \t  cfun->machine->force_short_suffix = -1;\n-\t  INSN_DELETED_P (prev) = 1;\n+\t  prev->set_deleted ();\n \t  current_output_insn = insn;\n \t  current_insn_predicate = save_pred;\n \t}"}, {"sha": "babb37b5bf44c70ba382a941ca96b330f14065bb", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=4654c0cf4a05c0af9ff3d0969382d175f5b32e7e", "patch": "@@ -2411,7 +2411,7 @@\n \t  final_sequence = 0;\n \t  final_scan_insn (seq->insn (1), asm_out_file, optimize, 1, & seen);\n \t  final_scan_insn (seq->insn (0), asm_out_file, optimize, 1, & seen);\n-\t  INSN_DELETED_P (seq->insn (1)) = 1;\n+\t  seq->insn (1)->set_deleted ();\n \t  return \"\";\n \t}\n     }"}, {"sha": "e2208b7af6be7a3d6ebb02276e3dde77c6a010cc", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=4654c0cf4a05c0af9ff3d0969382d175f5b32e7e", "patch": "@@ -2536,7 +2536,7 @@ conditionalize_block (rtx_insn *first)\n     {\n       rtx_insn *newinsn;\n \n-      if (INSN_DELETED_P (insn))\n+      if (insn->deleted ())\n \tcontinue;\n       \n       /* Try to form a conditional variant of the instruction and emit it.  */"}, {"sha": "723057eb9bd26619847b20e0c24b5e9536e70d30", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=4654c0cf4a05c0af9ff3d0969382d175f5b32e7e", "patch": "@@ -12498,7 +12498,7 @@ mips_output_conditional_branch (rtx_insn *insn, rtx *operands,\n \t{\n \t  final_scan_insn (final_sequence->insn (1),\n \t\t\t   asm_out_file, optimize, 1, NULL);\n-\t  INSN_DELETED_P (final_sequence->insn (1)) = 1;\n+\t  final_sequence->insn (1)->set_deleted ();\n \t}\n       else\n \toutput_asm_insn (\"nop\", 0);\n@@ -12523,7 +12523,7 @@ mips_output_conditional_branch (rtx_insn *insn, rtx *operands,\n \t{\n \t  final_scan_insn (final_sequence->insn (1),\n \t\t\t   asm_out_file, optimize, 1, NULL);\n-\t  INSN_DELETED_P (final_sequence->insn (1)) = 1;\n+\t  final_sequence->insn (1)->set_deleted ();\n \t}\n       else\n \toutput_asm_insn (\"nop\", 0);"}, {"sha": "7554fcc9366ee324d2a87c6b26394c2c41932200", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=4654c0cf4a05c0af9ff3d0969382d175f5b32e7e", "patch": "@@ -34222,7 +34222,7 @@ replace_swap_with_copy (swap_web_entry *insn_entry, unsigned i)\n \n   df_insn_delete (insn);\n   remove_insn (insn);\n-  INSN_DELETED_P (insn) = 1;\n+  insn->set_deleted ();\n }\n \n /* Dump the swap table to DUMP_FILE.  */"}, {"sha": "c4b026038a783b7ec333dbf856ae00331c2f216b", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=4654c0cf4a05c0af9ff3d0969382d175f5b32e7e", "patch": "@@ -2645,7 +2645,7 @@ print_slot (rtx_sequence *seq)\n {\n   final_scan_insn (seq->insn (1), asm_out_file, optimize, 1, NULL);\n \n-  INSN_DELETED_P (seq->insn (1)) = 1;\n+  seq->insn (1)->set_deleted ();\n }\n \n const char *\n@@ -5572,7 +5572,7 @@ gen_block_redirect (rtx_insn *jump, int addr, int need_block)\n   rtx dest;\n \n   /* First, check if we already have an instruction that satisfies our need.  */\n-  if (prev && NONJUMP_INSN_P (prev) && ! INSN_DELETED_P (prev))\n+  if (prev && NONJUMP_INSN_P (prev) && ! prev->deleted ())\n     {\n       if (INSN_CODE (prev) == CODE_FOR_indirect_jump_scratch)\n \treturn prev;\n@@ -5615,7 +5615,7 @@ gen_block_redirect (rtx_insn *jump, int addr, int need_block)\n \t{\n \t  enum rtx_code code;\n \n-\t  if (INSN_DELETED_P (scan))\n+\t  if (scan->deleted ())\n \t    continue;\n \t  code = GET_CODE (scan);\n \t  if (code == CODE_LABEL || code == JUMP_INSN)\n@@ -5634,7 +5634,7 @@ gen_block_redirect (rtx_insn *jump, int addr, int need_block)\n \t{\n \t  enum rtx_code code;\n \n-\t  if (INSN_DELETED_P (scan))\n+\t  if (scan->deleted ())\n \t    continue;\n \t  code = GET_CODE (scan);\n \t  if (INSN_P (scan))\n@@ -6495,7 +6495,7 @@ split_branches (rtx_insn *first)\n   for (insn = first; insn; insn = NEXT_INSN (insn))\n     if (! INSN_P (insn))\n       continue;\n-    else if (INSN_DELETED_P (insn))\n+    else if (insn->deleted ())\n       {\n \t/* Shorten_branches would split this instruction again,\n \t   so transform it into a note.  */\n@@ -10704,7 +10704,7 @@ mark_constant_pool_use (rtx x)\n     }\n \n   for (rtx insn = LABEL_REFS (lab); insn; insn = LABEL_REFS (insn))\n-    INSN_DELETED_P (insn) = 1;\n+    as_a<rtx_insn *> (insn)->set_deleted ();\n \n   /* Mark constants in a window.  */\n   for (insn = NEXT_INSN (as_a <rtx_insn *> (x)); insn; insn = NEXT_INSN (insn))"}, {"sha": "45312fa1d4a3efa45bc112e2b4fcd4e0460bad46", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=4654c0cf4a05c0af9ff3d0969382d175f5b32e7e", "patch": "@@ -792,10 +792,13 @@ v850_output_addr_const_extra (FILE * file, rtx x)\n      nothing, since the table will not be used.\n      (cf gcc.c-torture/compile/990801-1.c).  */\n   if (GET_CODE (x) == MINUS\n-      && GET_CODE (XEXP (x, 0)) == LABEL_REF\n-      && GET_CODE (XEXP (XEXP (x, 0), 0)) == CODE_LABEL\n-      && INSN_DELETED_P (XEXP (XEXP (x, 0), 0)))\n-    return true;\n+      && GET_CODE (XEXP (x, 0)) == LABEL_REF)\n+    {\n+      rtx_code_label *label\n+\t= dyn_cast<rtx_code_label *> (XEXP (XEXP (x, 0), 0));\n+      if (label && label->deleted ())\n+\treturn true;\n+    }\n \n   output_addr_const (file, x);\n   return true;"}, {"sha": "37115089b21f5db1827f2281104e829226e7e503", "filename": "gcc/cprop.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Fcprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Fcprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcprop.c?ref=4654c0cf4a05c0af9ff3d0969382d175f5b32e7e", "patch": "@@ -1071,7 +1071,7 @@ cprop_insn (rtx_insn *insn)\n \t\t  print_rtl (dump_file, src);\n \t\t  fprintf (dump_file, \"\\n\");\n \t\t}\n-\t      if (INSN_DELETED_P (insn))\n+\t      if (insn->deleted ())\n \t\treturn 1;\n \t    }\n \t}\n@@ -1257,7 +1257,7 @@ local_cprop_pass (void)\n \t\t\t  break;\n \t\t\t}\n \t\t    }\n-\t\t  if (INSN_DELETED_P (insn))\n+\t\t  if (insn->deleted ())\n \t\t    break;\n \t\t}\n \t      while (i < reg_use_count);\n@@ -1854,7 +1854,7 @@ one_cprop_pass (void)\n \t\t/* ??? Need to be careful w.r.t. mods done to INSN.\n \t\t       Don't call mark_oprs_set if we turned the\n \t\t       insn into a NOTE, or deleted the insn.  */\n-\t\tif (! NOTE_P (insn) && ! INSN_DELETED_P (insn))\n+\t\tif (! NOTE_P (insn) && ! insn->deleted ())\n \t\t  mark_oprs_set (insn);\n \t      }\n \t}"}, {"sha": "9dd2f880d07b8f1fddc528997da9b1b58fd6c9ee", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=4654c0cf4a05c0af9ff3d0969382d175f5b32e7e", "patch": "@@ -19051,7 +19051,7 @@ gen_label_die (tree decl, dw_die_ref context_die)\n \t     represent source-level labels which were explicitly declared by\n \t     the user.  This really shouldn't be happening though, so catch\n \t     it if it ever does happen.  */\n-\t  gcc_assert (!INSN_DELETED_P (insn));\n+\t  gcc_assert (!as_a<rtx_insn *> (insn)->deleted ());\n \n \t  ASM_GENERATE_INTERNAL_LABEL (label, \"L\", CODE_LABEL_NUMBER (insn));\n           add_AT_lbl_id (lbl_die, DW_AT_low_pc, label);\n@@ -21328,7 +21328,7 @@ dwarf2out_var_location (rtx_insn *loc_note)\n \n   next_note = NEXT_INSN (loc_note);\n   if (! next_note\n-      || INSN_DELETED_P (next_note)\n+      || next_note->deleted ()\n       || ! NOTE_P (next_note)\n       || (NOTE_KIND (next_note) != NOTE_INSN_VAR_LOCATION\n \t  && NOTE_KIND (next_note) != NOTE_INSN_CALL_ARG_LOCATION))"}, {"sha": "c0da65f07115bd04743c06e4e9c53fa17bca519d", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=4654c0cf4a05c0af9ff3d0969382d175f5b32e7e", "patch": "@@ -3807,7 +3807,7 @@ try_split (rtx pat, rtx uncast_trial, int last)\n      We can't use next_active_insn here since AFTER may be a note.\n      Ignore deleted insns, which can be occur if not optimizing.  */\n   for (tem = NEXT_INSN (before); tem != after; tem = NEXT_INSN (tem))\n-    if (! INSN_DELETED_P (tem) && INSN_P (tem))\n+    if (! tem->deleted () && INSN_P (tem))\n       tem = try_split (PATTERN (tem), tem, 1);\n \n   /* Return either the first or the last insn, depending on which was\n@@ -3984,7 +3984,7 @@ add_insn_after_nobb (rtx_insn *insn, rtx_insn *after)\n {\n   rtx_insn *next = NEXT_INSN (after);\n \n-  gcc_assert (!optimize || !INSN_DELETED_P (after));\n+  gcc_assert (!optimize || !after->deleted ());\n \n   link_insn_into_chain (insn, after, next);\n \n@@ -4013,7 +4013,7 @@ add_insn_before_nobb (rtx_insn *insn, rtx_insn *before)\n {\n   rtx_insn *prev = PREV_INSN (before);\n \n-  gcc_assert (!optimize || !INSN_DELETED_P (before));\n+  gcc_assert (!optimize || !before->deleted ());\n \n   link_insn_into_chain (insn, prev, before);\n "}, {"sha": "a923d163e6b876cf50125dd5edd9af84840c7e6a", "filename": "gcc/final.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=4654c0cf4a05c0af9ff3d0969382d175f5b32e7e", "patch": "@@ -1132,7 +1132,7 @@ shorten_branches (rtx_insn *first)\n       if (NOTE_P (insn) || BARRIER_P (insn)\n \t  || LABEL_P (insn) || DEBUG_INSN_P (insn))\n \tcontinue;\n-      if (INSN_DELETED_P (insn))\n+      if (insn->deleted ())\n \tcontinue;\n \n       body = PATTERN (insn);\n@@ -2183,7 +2183,7 @@ final_scan_insn (rtx_insn *insn, FILE *file, int optimize_p ATTRIBUTE_UNUSED,\n \n   /* Ignore deleted insns.  These can occur when we split insns (due to a\n      template of \"#\") while not optimizing.  */\n-  if (INSN_DELETED_P (insn))\n+  if (insn->deleted ())\n     return NEXT_INSN (insn);\n \n   switch (GET_CODE (insn))"}, {"sha": "26d25b9b4bf014eb3f4a305d717e4a3d836a0847", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=4654c0cf4a05c0af9ff3d0969382d175f5b32e7e", "patch": "@@ -1933,7 +1933,7 @@ instantiate_virtual_regs (void)\n \telse\n \t  instantiate_virtual_regs_in_insn (insn);\n \n-\tif (INSN_DELETED_P (insn))\n+\tif (insn->deleted ())\n \t  continue;\n \n \tinstantiate_virtual_regs_in_rtx (&REG_NOTES (insn));"}, {"sha": "810d7d6a12e248b7c36f2dfddc9c2db4f899595d", "filename": "gcc/gcse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=4654c0cf4a05c0af9ff3d0969382d175f5b32e7e", "patch": "@@ -2486,7 +2486,7 @@ pre_insert_copies (void)\n \t\t  continue;\n \n \t\t/* Don't handle this one if it's a redundant one.  */\n-\t\tif (INSN_DELETED_P (insn))\n+\t\tif (insn->deleted ())\n \t\t  continue;\n \n \t\t/* Or if the expression doesn't reach the deleted one.  */"}, {"sha": "8e85f5f191bf5abda554d863c0d14991ed40419a", "filename": "gcc/jump.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=4654c0cf4a05c0af9ff3d0969382d175f5b32e7e", "patch": "@@ -291,7 +291,7 @@ mark_all_labels (rtx_insn *f)\n \t     handled by other optimizers using better algorithms.  */\n \t  FOR_BB_INSNS (bb, insn)\n \t    {\n-\t      gcc_assert (! INSN_DELETED_P (insn));\n+\t      gcc_assert (! insn->deleted ());\n \t      if (NONDEBUG_INSN_P (insn))\n \t        mark_jump_label (PATTERN (insn), insn, 0);\n \t    }\n@@ -312,7 +312,7 @@ mark_all_labels (rtx_insn *f)\n       rtx_insn *prev_nonjump_insn = NULL;\n       for (insn = f; insn; insn = NEXT_INSN (insn))\n \t{\n-\t  if (INSN_DELETED_P (insn))\n+\t  if (insn->deleted ())\n \t    ;\n \t  else if (LABEL_P (insn))\n \t    prev_nonjump_insn = NULL;\n@@ -1156,7 +1156,7 @@ mark_jump_label_1 (rtx x, rtx_insn *insn, bool in_mem, bool is_target)\n \t  break;\n \n \tLABEL_REF_LABEL (x) = label;\n-\tif (! insn || ! INSN_DELETED_P (insn))\n+\tif (! insn || ! insn->deleted ())\n \t  ++LABEL_NUSES (label);\n \n \tif (insn)\n@@ -1187,7 +1187,7 @@ mark_jump_label_1 (rtx x, rtx_insn *insn, bool in_mem, bool is_target)\n        ADDR_DIFF_VEC.  Don't set the JUMP_LABEL of a vector.  */\n     case ADDR_VEC:\n     case ADDR_DIFF_VEC:\n-      if (! INSN_DELETED_P (insn))\n+      if (! insn->deleted ())\n \t{\n \t  int eltnum = code == ADDR_DIFF_VEC ? 1 : 0;\n \n@@ -1254,11 +1254,11 @@ delete_related_insns (rtx uncast_insn)\n   rtx note;\n   rtx_insn *next = NEXT_INSN (insn), *prev = PREV_INSN (insn);\n \n-  while (next && INSN_DELETED_P (next))\n+  while (next && next->deleted ())\n     next = NEXT_INSN (next);\n \n   /* This insn is already deleted => return first following nondeleted.  */\n-  if (INSN_DELETED_P (insn))\n+  if (insn->deleted ())\n     return next;\n \n   delete_insn (insn);\n@@ -1279,7 +1279,7 @@ delete_related_insns (rtx uncast_insn)\n     {\n       rtx_insn *p;\n \n-      for (p = next && INSN_DELETED_P (next) ? NEXT_INSN (next) : next;\n+      for (p = next && next->deleted () ? NEXT_INSN (next) : next;\n \t   p && NOTE_P (p);\n \t   p = NEXT_INSN (p))\n \tif (NOTE_KIND (p) == NOTE_INSN_CALL_ARG_LOCATION)\n@@ -1323,7 +1323,7 @@ delete_related_insns (rtx uncast_insn)\n       for (i = 0; i < len; i++)\n \tif (LABEL_NUSES (XEXP (RTVEC_ELT (labels, i), 0)) == 0)\n \t  delete_related_insns (XEXP (RTVEC_ELT (labels, i), 0));\n-      while (next && INSN_DELETED_P (next))\n+      while (next && next->deleted ())\n \tnext = NEXT_INSN (next);\n       return next;\n     }\n@@ -1339,7 +1339,7 @@ delete_related_insns (rtx uncast_insn)\n \tif (LABEL_NUSES (XEXP (note, 0)) == 0)\n \t  delete_related_insns (XEXP (note, 0));\n \n-  while (prev && (INSN_DELETED_P (prev) || NOTE_P (prev)))\n+  while (prev && (prev->deleted () || NOTE_P (prev)))\n     prev = PREV_INSN (prev);\n \n   /* If INSN was a label and a dispatch table follows it,\n@@ -1362,7 +1362,7 @@ delete_related_insns (rtx uncast_insn)\n \t  if (code == NOTE)\n \t    next = NEXT_INSN (next);\n \t  /* Keep going past other deleted labels to delete what follows.  */\n-\t  else if (code == CODE_LABEL && INSN_DELETED_P (next))\n+\t  else if (code == CODE_LABEL && next->deleted ())\n \t    next = NEXT_INSN (next);\n \t  /* Keep the (use (insn))s created by dbr_schedule, which needs\n \t     them in order to track liveness relative to a previous\n@@ -1386,7 +1386,7 @@ delete_related_insns (rtx uncast_insn)\n      but I see no clean and sure alternative way\n      to find the first insn after INSN that is not now deleted.\n      I hope this works.  */\n-  while (next && INSN_DELETED_P (next))\n+  while (next && next->deleted ())\n     next = NEXT_INSN (next);\n   return next;\n }\n@@ -1408,7 +1408,7 @@ delete_for_peephole (rtx_insn *from, rtx_insn *to)\n \n       if (!NOTE_P (insn))\n \t{\n-\t  INSN_DELETED_P (insn) = 1;\n+\t  insn->set_deleted();\n \n \t  /* Patch this insn out of the chain.  */\n \t  /* We don't do this all at once, because we"}, {"sha": "8c0a5c8748b647ab31215bd1587b361200c48b9a", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=4654c0cf4a05c0af9ff3d0969382d175f5b32e7e", "patch": "@@ -2341,7 +2341,7 @@ subst_stack_regs (rtx_insn *insn, stack_ptr regstack)\n   /* subst_stack_regs_pat may have deleted a no-op insn.  If so, any\n      REG_UNUSED will already have been dealt with, so just return.  */\n \n-  if (NOTE_P (insn) || INSN_DELETED_P (insn))\n+  if (NOTE_P (insn) || insn->deleted ())\n     return control_flow_insn_deleted;\n \n   /* If this a noreturn call, we can't insert pop insns after it."}, {"sha": "22d3e8e1e5917974d15d27ca6fb35a825f55ca41", "filename": "gcc/reload1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=4654c0cf4a05c0af9ff3d0969382d175f5b32e7e", "patch": "@@ -8847,7 +8847,7 @@ delete_output_reload (rtx_insn *insn, int j, int last_reload_reg,\n \n   /* It is possible that this reload has been only used to set another reload\n      we eliminated earlier and thus deleted this instruction too.  */\n-  if (INSN_DELETED_P (output_reload_insn))\n+  if (output_reload_insn->deleted ())\n     return;\n \n   /* Get the raw pseudo-register referred to.  */"}, {"sha": "ac6eaa03315ff100ded0f369e9ea4c4ca9644534", "filename": "gcc/reorg.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=4654c0cf4a05c0af9ff3d0969382d175f5b32e7e", "patch": "@@ -536,7 +536,7 @@ emit_delay_sequence (rtx_insn *insn, rtx_insn_list *list, int length)\n       rtx note, next;\n \n       /* Show that this copy of the insn isn't deleted.  */\n-      INSN_DELETED_P (tem) = 0;\n+      tem->set_undeleted ();\n \n       /* Unlink insn from its original place, and re-emit it into\n \t the sequence.  */\n@@ -1426,7 +1426,7 @@ try_merge_delay_insns (rtx insn, rtx_insn *thread)\n \n \t\t  update_block (dtrial, thread);\n \t\t  new_rtx = delete_from_delay_slot (dtrial);\n-\t          if (INSN_DELETED_P (thread))\n+\t          if (thread->deleted ())\n \t\t    thread = new_rtx;\n \t\t  INSN_FROM_TARGET_P (next_to_match) = 0;\n \t\t}\n@@ -1464,7 +1464,7 @@ try_merge_delay_insns (rtx insn, rtx_insn *thread)\n \n \t      update_block (merged_insns->insn (), thread);\n \t      new_rtx = delete_from_delay_slot (merged_insns->insn ());\n-\t      if (INSN_DELETED_P (thread))\n+\t      if (thread->deleted ())\n \t\tthread = new_rtx;\n \t    }\n \t  else\n@@ -1947,7 +1947,7 @@ fill_simple_delay_slots (int non_jumps_p)\n \n       insn = unfilled_slots_base[i];\n       if (insn == 0\n-\t  || INSN_DELETED_P (insn)\n+\t  || insn->deleted ()\n \t  || (NONJUMP_INSN_P (insn)\n \t      && GET_CODE (PATTERN (insn)) == SEQUENCE)\n \t  || (JUMP_P (insn) && non_jumps_p)\n@@ -2861,7 +2861,7 @@ fill_eager_delay_slots (void)\n \n       insn = unfilled_slots_base[i];\n       if (insn == 0\n-\t  || INSN_DELETED_P (insn)\n+\t  || insn->deleted ()\n \t  || !JUMP_P (insn)\n \t  || ! (condjump_p (insn) || condjump_in_parallel_p (insn)))\n \tcontinue;\n@@ -3837,7 +3837,7 @@ dbr_schedule (rtx_insn *first)\n       memset (total_annul_slots, 0, sizeof total_annul_slots);\n       for (insn = first; insn; insn = NEXT_INSN (insn))\n \t{\n-\t  if (! INSN_DELETED_P (insn)\n+\t  if (! insn->deleted ()\n \t      && NONJUMP_INSN_P (insn)\n \t      && GET_CODE (PATTERN (insn)) != USE\n \t      && GET_CODE (PATTERN (insn)) != CLOBBER)"}, {"sha": "6acc71846b85395e024a49a7fe6c6bd2eeb746f3", "filename": "gcc/resource.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fresource.c?ref=4654c0cf4a05c0af9ff3d0969382d175f5b32e7e", "patch": "@@ -931,8 +931,7 @@ mark_target_live_regs (rtx_insn *insns, rtx target_maybe_return, struct resource\n \t information, we can get it from there unless the insn at the\n \t start of the basic block has been deleted.  */\n       if (tinfo && tinfo->block != -1\n-\t  && ! INSN_DELETED_P (BB_HEAD (BASIC_BLOCK_FOR_FN (cfun,\n-\t\t\t\t\t\t\t    tinfo->block))))\n+\t  && ! BB_HEAD (BASIC_BLOCK_FOR_FN (cfun, tinfo->block))->deleted ())\n \tb = tinfo->block;\n     }\n "}, {"sha": "e919aaeca93a44492ced11a1ec09507953c5815a", "filename": "gcc/rtl.h", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=4654c0cf4a05c0af9ff3d0969382d175f5b32e7e", "patch": "@@ -490,6 +490,7 @@ is_a_helper <const rtx_sequence *>::test (const_rtx rt)\n \n class GTY(()) rtx_insn : public rtx_def\n {\n+public:\n   /* No extra fields, but adds the invariant:\n \n      (INSN_P (X)\n@@ -505,6 +506,18 @@ class GTY(()) rtx_insn : public rtx_def\n     i.e. we have an rtx that has an INSN_UID field and can be part of\n     a linked list of insns.\n   */\n+\n+  /* Returns true if this insn has been deleted.  */\n+\n+  bool deleted () const { return volatil; }\n+\n+  /* Mark this insn as deleted.  */\n+\n+  void set_deleted () { volatil = true; }\n+\n+  /* Mark this insn as not deleted.  */\n+\n+  void set_undeleted () { volatil = false; }\n };\n \n /* Subclasses of rtx_insn.  */\n@@ -1406,10 +1419,6 @@ inline rtvec rtx_jump_table_data::get_labels () const\n   (RTL_FLAG_CHECK6 (\"RTX_FRAME_RELATED_P\", (RTX), DEBUG_INSN, INSN,\t\\\n \t\t    CALL_INSN, JUMP_INSN, BARRIER, SET)->frame_related)\n \n-/* 1 if RTX is an insn that has been deleted.  */\n-#define INSN_DELETED_P(RTX)\t\t\t\t\t\t\\\n-  (RTL_INSN_CHAIN_FLAG_CHECK (\"INSN_DELETED_P\", (RTX))->volatil)\n-\n /* 1 if JUMP RTX is a crossing jump.  */\n #define CROSSING_JUMP_P(RTX) \\\n   (RTL_FLAG_CHECK1 (\"CROSSING_JUMP_P\", (RTX), JUMP_INSN)->jump)"}, {"sha": "3bc7d848e9a19a05c7068286aa232935c6ac74fa", "filename": "gcc/sel-sched-ir.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Fsel-sched-ir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Fsel-sched-ir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.c?ref=4654c0cf4a05c0af9ff3d0969382d175f5b32e7e", "patch": "@@ -1069,7 +1069,7 @@ return_nop_to_pool (insn_t nop, bool full_tidying)\n   sel_remove_insn (nop, false, full_tidying);\n \n   /* We'll recycle this nop.  */\n-  INSN_DELETED_P (nop) = 0;\n+  nop->set_undeleted ();\n \n   if (nop_pool.n == nop_pool.s)\n     nop_pool.v = XRESIZEVEC (rtx_insn *, nop_pool.v,\n@@ -1404,7 +1404,7 @@ sel_gen_insn_from_expr_after (expr_t expr, vinsn_t vinsn, int seqno,\n \n   /* The insn may come from the transformation cache, which may hold already\n      deleted insns, so mark it as not deleted.  */\n-  INSN_DELETED_P (insn) = 0;\n+  insn->set_undeleted ();\n \n   add_insn_after (insn, after, BLOCK_FOR_INSN (insn));\n "}, {"sha": "62a6b0f0c48504a19d6b9c82ef8a898963e71b75", "filename": "gcc/varasm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=4654c0cf4a05c0af9ff3d0969382d175f5b32e7e", "patch": "@@ -3823,7 +3823,7 @@ output_constant_pool_1 (struct constant_descriptor_rtx *desc,\n      CODE_LABEL into a NOTE.  */\n   /* ??? This seems completely and utterly wrong.  Certainly it's\n      not true for NOTE_INSN_DELETED_LABEL, but I disbelieve proper\n-     functioning even with INSN_DELETED_P and friends.  */\n+     functioning even with rtx_insn::deleted and friends.  */\n \n   tmp = x;\n   switch (GET_CODE (tmp))\n@@ -3837,7 +3837,7 @@ output_constant_pool_1 (struct constant_descriptor_rtx *desc,\n \n     case LABEL_REF:\n       tmp = LABEL_REF_LABEL (tmp);\n-      gcc_assert (!INSN_DELETED_P (tmp));\n+      gcc_assert (!as_a<rtx_insn *> (tmp)->deleted ());\n       gcc_assert (!NOTE_P (tmp)\n \t\t  || NOTE_KIND (tmp) != NOTE_INSN_DELETED);\n       break;"}]}