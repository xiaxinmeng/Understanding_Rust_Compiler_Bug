{"sha": "0925565205292f2d8ad5589805480af6cd8f35c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDkyNTU2NTIwNTI5MmYyZDhhZDU1ODk4MDU0ODBhZjZjZDhmMzVjNg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2012-03-10T18:47:52Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2012-03-10T18:47:52Z"}, "message": "Properly generate x32 TLS IE sequence\n\n2012-03-10  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* config/i386/i386.c (ix86_decompose_address): Disallow fs:(reg)\n\tif Pmode != word_mode.\n\t(legitimize_tls_address): Call gen_tls_initial_exec_x32 if\n\tPmode == SImode for x32.\n\n\t* config/i386/i386.md (UNSPEC_TLS_IE_X32): New.\n\t(tls_initial_exec_x32): Likewise.\n\nFrom-SVN: r185179", "tree": {"sha": "509d003bc07727357da8824fb54ec875c92e9a2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/509d003bc07727357da8824fb54ec875c92e9a2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0925565205292f2d8ad5589805480af6cd8f35c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0925565205292f2d8ad5589805480af6cd8f35c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0925565205292f2d8ad5589805480af6cd8f35c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0925565205292f2d8ad5589805480af6cd8f35c6/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "21d1335b2a547a09188c62ca5f3b698920ea1438", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21d1335b2a547a09188c62ca5f3b698920ea1438", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21d1335b2a547a09188c62ca5f3b698920ea1438"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "8e5b4a9c742b16382db81cd22ca5c19158ec8c28", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0925565205292f2d8ad5589805480af6cd8f35c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0925565205292f2d8ad5589805480af6cd8f35c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0925565205292f2d8ad5589805480af6cd8f35c6", "patch": "@@ -1,3 +1,13 @@\n+2012-03-10  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/i386.c (ix86_decompose_address): Disallow fs:(reg)\n+\tif Pmode != word_mode.\n+\t(legitimize_tls_address): Call gen_tls_initial_exec_x32 if\n+\tPmode == SImode for x32.\n+\n+\t* config/i386/i386.md (UNSPEC_TLS_IE_X32): New.\n+\t(tls_initial_exec_x32): Likewise.\n+\n 2012-03-10  Chung-Lin Tang  <cltang@codesourcery.com>\n \n \tPR rtl-optimization/52528"}, {"sha": "bc144a90cd3b3566f74dc8ef867bff0475ae476b", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0925565205292f2d8ad5589805480af6cd8f35c6/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0925565205292f2d8ad5589805480af6cd8f35c6/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=0925565205292f2d8ad5589805480af6cd8f35c6", "patch": "@@ -11524,6 +11524,11 @@ ix86_decompose_address (rtx addr, struct ix86_address *out)\n   else\n     disp = addr;\t\t\t/* displacement */\n \n+  /* Since address override works only on the (reg32) part in fs:(reg32),\n+     we can't use it as memory operand.  */\n+  if (Pmode != word_mode && seg == SEG_FS && (base || index))\n+    return 0;\n+\n   if (index)\n     {\n       if (REG_P (index))\n@@ -12618,6 +12623,17 @@ legitimize_tls_address (rtx x, enum tls_model model, bool for_mov)\n \t      emit_insn (gen_tls_initial_exec_64_sun (dest, x));\n \t      return dest;\n \t    }\n+\t  else if (Pmode == SImode)\n+\t    {\n+\t      /* Always generate\n+\t\t\tmovl %fs:0, %reg32\n+\t\t\taddl xgottpoff(%rip), %reg32\n+\t\t to support linker IE->LE optimization and avoid\n+\t\t fs:(%reg32) as memory operand.  */\n+\t      dest = gen_reg_rtx (Pmode);\n+\t      emit_insn (gen_tls_initial_exec_x32 (dest, x));\n+\t      return dest;\n+\t    }\n \n \t  pic = NULL;\n \t  type = UNSPEC_GOTNTPOFF;"}, {"sha": "dcbfab43eeead69a39bdb68c530f2271fd7a5aed", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0925565205292f2d8ad5589805480af6cd8f35c6/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0925565205292f2d8ad5589805480af6cd8f35c6/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=0925565205292f2d8ad5589805480af6cd8f35c6", "patch": "@@ -96,6 +96,7 @@\n   UNSPEC_TLS_LD_BASE\n   UNSPEC_TLSDESC\n   UNSPEC_TLS_IE_SUN\n+  UNSPEC_TLS_IE_X32\n \n   ;; Other random patterns\n   UNSPEC_SCAS\n@@ -12777,6 +12778,28 @@\n }\n   [(set_attr \"type\" \"multi\")])\n \n+;; When Pmode == SImode, there may be no REX prefix for ADD.  Avoid\n+;; any instructions between MOV and ADD, which may interfere linker\n+;; IE->LE optimization, since the last byte of the previous instruction\n+;; before ADD may look like a REX prefix.  This also avoids\n+;;\tmovl x@gottpoff(%rip), %reg32\n+;;\tmovl $fs:(%reg32), %reg32\n+;; Since address override works only on the (reg32) part in fs:(reg32),\n+;; we can't use it as memory operand.\n+(define_insn \"tls_initial_exec_x32\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI\n+\t [(match_operand:SI 1 \"tls_symbolic_operand\" \"\")]\n+\t UNSPEC_TLS_IE_X32))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_X32\"\n+{\n+  output_asm_insn\n+    (\"mov{l}\\t{%%fs:0, %0|%0, DWORD PTR fs:0}\", operands);\n+  return \"add{l}\\t{%a1@gottpoff(%%rip), %0|%0, %a1@gottpoff[rip]}\";\n+}\n+  [(set_attr \"type\" \"multi\")])\n+\n ;; GNU2 TLS patterns can be split.\n \n (define_expand \"tls_dynamic_gnu2_32\""}]}