{"sha": "b8056b46cd76fc0ad5b493b3f9e71d8d0e8236c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjgwNTZiNDZjZDc2ZmMwYWQ1YjQ5M2IzZjllNzFkOGQwZTgyMzZjMw==", "commit": {"author": {"name": "Michael Hayes", "email": "mhayes@redhat.com", "date": "2001-01-01T00:17:45Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "2001-01-01T00:17:45Z"}, "message": "loop.c (LOOP_REG_LIFETIME, [...]): Define.\n\n\t* loop.c (LOOP_REG_LIFETIME, LOOP_REG_GLOBAL_P): Define.\n\t(scan_loop, record_giv): Use LOOP_REG_LIFETIME and LOOP_REG_GLOBAL_P.\n\nFrom-SVN: r38576", "tree": {"sha": "1c5f9be87db97981004d9757b9fef53f1cb8a532", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c5f9be87db97981004d9757b9fef53f1cb8a532"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8056b46cd76fc0ad5b493b3f9e71d8d0e8236c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8056b46cd76fc0ad5b493b3f9e71d8d0e8236c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8056b46cd76fc0ad5b493b3f9e71d8d0e8236c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8056b46cd76fc0ad5b493b3f9e71d8d0e8236c3/comments", "author": null, "committer": null, "parents": [{"sha": "8529a489d600279cd32ff2e1b243f17c3e6e951c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8529a489d600279cd32ff2e1b243f17c3e6e951c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8529a489d600279cd32ff2e1b243f17c3e6e951c"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "4e4660ac08dbffd6699f037c9708e0a531a2f2c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8056b46cd76fc0ad5b493b3f9e71d8d0e8236c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8056b46cd76fc0ad5b493b3f9e71d8d0e8236c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b8056b46cd76fc0ad5b493b3f9e71d8d0e8236c3", "patch": "@@ -1,5 +1,10 @@\n 2001-01-01  Michael Hayes  <mhayes@redhat.com>\n \n+\t* loop.c (LOOP_REG_LIFETIME, LOOP_REG_GLOBAL_P): Define.\n+\t(scan_loop, record_giv): Use LOOP_REG_LIFETIME and LOOP_REG_GLOBAL_P.\n+\t\n+2001-01-01  Michael Hayes  <mhayes@redhat.com>\t\n+\n \t* loop.h (REGNO_FIRST_LUID, REGNO_LAST_LUID): Define.\n \t* loop.c (REGNO_FIRST_LUID, REGNO_LAST_LUID): Use in place of\n \tdirect access to uid_luid array."}, {"sha": "87a5adfe727f450ea0665b821978a6b939381590", "filename": "gcc/loop.c", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8056b46cd76fc0ad5b493b3f9e71d8d0e8236c3/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8056b46cd76fc0ad5b493b3f9e71d8d0e8236c3/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=b8056b46cd76fc0ad5b493b3f9e71d8d0e8236c3", "patch": "@@ -54,6 +54,13 @@ Boston, MA 02111-1307, USA.  */\n #include \"except.h\"\n #include \"toplev.h\"\n \n+#define LOOP_REG_LIFETIME(LOOP, REGNO) \\\n+((REGNO_LAST_LUID (REGNO) - REGNO_FIRST_LUID (REGNO)))\n+\n+#define LOOP_REG_GLOBAL_P(LOOP, REGNO) \\\n+((REGNO_LAST_LUID (REGNO) > INSN_LUID ((LOOP)->end) \\\n+ || REGNO_FIRST_LUID (REGNO) < INSN_LUID ((LOOP)->start)))\n+\n \n /* Vector mapping INSN_UIDs to luids.\n    The luids are like uids but increase monotonically always.\n@@ -824,12 +831,9 @@ scan_loop (loop, flags)\n \t\t or consec_sets_invariant_p returned 2\n \t\t (only conditionally invariant).  */\n \t      m->cond = ((tem | tem1 | tem2) > 1);\n-\t      m->global = (REGNO_LAST_LUID (regno)\n-\t\t\t   > INSN_LUID (loop_end)\n-\t\t\t   || REGNO_FIRST_LUID (regno) < INSN_LUID (loop_start));\n+\t      m->global =  LOOP_REG_GLOBAL_P (loop, regno);\n \t      m->match = 0;\n-\t      m->lifetime = (REGNO_LAST_LUID (regno)\n-\t\t\t     - REGNO_FIRST_LUID (regno));\n+\t      m->lifetime = LOOP_REG_LIFETIME (loop, regno);\n \t      m->savings = VARRAY_INT (regs->n_times_set, regno);\n \t      if (find_reg_note (p, REG_RETVAL, NULL_RTX))\n \t\tm->savings += libcall_benefit (p);\n@@ -922,10 +926,7 @@ scan_loop (loop, flags)\n \t\t     INSN_LUID and hence must make a conservative\n \t\t     assumption.  */\n \t\t  m->global = (INSN_UID (p) >= max_uid_for_loop\n-\t\t\t       || (REGNO_LAST_LUID (regno)\n-\t\t\t\t   > INSN_LUID (loop_end))\n-\t\t\t       || (REGNO_FIRST_LUID (regno)\n-\t\t\t\t   < INSN_LUID (p))\n+\t\t\t       || LOOP_REG_GLOBAL_P (loop, regno)\n \t\t\t       || (labels_in_range_p\n \t\t\t\t   (p, REGNO_FIRST_LUID (regno))));\n \t\t  if (maybe_never && m->global)\n@@ -935,8 +936,7 @@ scan_loop (loop, flags)\n \t\t  m->regno = regno;\n \t\t  m->cond = 0;\n \t\t  m->match = 0;\n-\t\t  m->lifetime = (REGNO_LAST_LUID (regno)\n-\t\t\t\t - REGNO_FIRST_LUID (regno));\n+\t\t  m->lifetime = LOOP_REG_LIFETIME (loop, regno);\n \t\t  m->savings = 1;\n \t\t  VARRAY_INT (regs->set_in_loop, regno) = -1;\n \t\t  /* Add M to the end of the chain MOVABLES.  */\n@@ -4936,8 +4936,7 @@ record_giv (loop, v, insn, src_reg, dest_reg, mult_val, add_val, ext_val,\n     {\n       v->mode = GET_MODE (SET_DEST (set));\n \n-      v->lifetime = (REGNO_LAST_LUID (REGNO (dest_reg))\n-\t\t     - REGNO_FIRST_LUID (REGNO (dest_reg)));\n+      v->lifetime = LOOP_REG_LIFETIME (loop, REGNO (dest_reg));\n \n       /* If the lifetime is zero, it means that this register is\n \t really a dead store.  So mark this as a giv that can be"}]}