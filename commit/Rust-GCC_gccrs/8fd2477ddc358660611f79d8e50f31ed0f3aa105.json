{"sha": "8fd2477ddc358660611f79d8e50f31ed0f3aa105", "node_id": "C_kwDOANBUbNoAKDhmZDI0NzdkZGMzNTg2NjA2MTFmNzlkOGU1MGYzMWVkMGYzYWExMDU", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-11-08T10:36:25Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-11-08T10:36:25Z"}, "message": "genmodes: Define NUM_MODE_* macros\n\nI was working on a patch that needed to calculate the number of\nmodes in a particular class.  It seemed better to have genmodes\ngenerate this directly rather than do the kind of dance that\nexpmed.h had.\n\ngcc/\n\t* genmodes.c (emit_insn_modes_h): Define NUM_MODE_* macros.\n\t* expmed.h (NUM_MODE_INT): Delete in favor of genmodes definitions.\n\t(NUM_MODE_PARTIAL_INT, NUM_MODE_VECTOR_INT): Likewise.\n\t* real.h (real_format_for_mode): Use NUM_MODE_FLOAT and\n\tNUM_MODE_DECIMAL_FLOAT.\n\t(REAL_MODE_FORMAT): Likewise.", "tree": {"sha": "6395941555799811b180c6eb89c5784daf68b92f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6395941555799811b180c6eb89c5784daf68b92f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fd2477ddc358660611f79d8e50f31ed0f3aa105", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fd2477ddc358660611f79d8e50f31ed0f3aa105", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fd2477ddc358660611f79d8e50f31ed0f3aa105", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fd2477ddc358660611f79d8e50f31ed0f3aa105/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61a7f947cc063f92ccdaa6319f1f3894bcc8557e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61a7f947cc063f92ccdaa6319f1f3894bcc8557e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61a7f947cc063f92ccdaa6319f1f3894bcc8557e"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "6b13ea96c4962e168f021a291b5e368b8a51f396", "filename": "gcc/expmed.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd2477ddc358660611f79d8e50f31ed0f3aa105/gcc%2Fexpmed.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd2477ddc358660611f79d8e50f31ed0f3aa105/gcc%2Fexpmed.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.h?ref=8fd2477ddc358660611f79d8e50f31ed0f3aa105", "patch": "@@ -133,15 +133,6 @@ struct alg_hash_entry {\n #define NUM_ALG_HASH_ENTRIES 307\n #endif\n \n-#define NUM_MODE_INT \\\n-  (MAX_MODE_INT - MIN_MODE_INT + 1)\n-#define NUM_MODE_PARTIAL_INT \\\n-  (MIN_MODE_PARTIAL_INT == E_VOIDmode ? 0 \\\n-   : MAX_MODE_PARTIAL_INT - MIN_MODE_PARTIAL_INT + 1)\n-#define NUM_MODE_VECTOR_INT \\\n-  (MIN_MODE_VECTOR_INT == E_VOIDmode ? 0 \\\n-   : MAX_MODE_VECTOR_INT - MIN_MODE_VECTOR_INT + 1)\n-\n #define NUM_MODE_IP_INT (NUM_MODE_INT + NUM_MODE_PARTIAL_INT)\n #define NUM_MODE_IPV_INT (NUM_MODE_IP_INT + NUM_MODE_VECTOR_INT)\n "}, {"sha": "ecc8b448406da7024ba024736bd29187ea066710", "filename": "gcc/genmodes.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd2477ddc358660611f79d8e50f31ed0f3aa105/gcc%2Fgenmodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd2477ddc358660611f79d8e50f31ed0f3aa105/gcc%2Fgenmodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmodes.c?ref=8fd2477ddc358660611f79d8e50f31ed0f3aa105", "patch": "@@ -1316,6 +1316,19 @@ enum machine_mode\\n{\");\n   NUM_MACHINE_MODES = MAX_MACHINE_MODE\\n\\\n };\\n\");\n \n+  /* Define a NUM_* macro for each mode class, giving the number of modes\n+     in the class.  */\n+  for (c = 0; c < MAX_MODE_CLASS; c++)\n+    {\n+      printf (\"#define NUM_%s \", mode_class_names[c]);\n+      if (modes[c])\n+\tprintf (\"(MAX_%s - MIN_%s + 1)\\n\", mode_class_names[c],\n+\t\tmode_class_names[c]);\n+      else\n+\tprintf (\"0\\n\");\n+    }\n+  printf (\"\\n\");\n+\n   /* I can't think of a better idea, can you?  */\n   printf (\"#define CONST_MODE_NUNITS%s\\n\", adj_nunits ? \"\" : \" const\");\n   printf (\"#define CONST_MODE_PRECISION%s\\n\", adj_nunits ? \"\" : \" const\");"}, {"sha": "39dd34e3971a483e32c4141bd50d48b70e5ff086", "filename": "gcc/real.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd2477ddc358660611f79d8e50f31ed0f3aa105/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd2477ddc358660611f79d8e50f31ed0f3aa105/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=8fd2477ddc358660611f79d8e50f31ed0f3aa105", "patch": "@@ -178,13 +178,12 @@ struct real_format\n    decimal float modes indexed by (MODE - first decimal float mode) +\n    the number of float modes.  */\n extern const struct real_format *\n-  real_format_for_mode[MAX_MODE_FLOAT - MIN_MODE_FLOAT + 1\n-\t\t       + MAX_MODE_DECIMAL_FLOAT - MIN_MODE_DECIMAL_FLOAT + 1];\n+  real_format_for_mode[NUM_MODE_FLOAT + NUM_MODE_DECIMAL_FLOAT];\n \n #define REAL_MODE_FORMAT(MODE)\t\t\t\t\t\t\\\n   (real_format_for_mode[DECIMAL_FLOAT_MODE_P (MODE)\t\t\t\\\n \t\t\t? (((MODE) - MIN_MODE_DECIMAL_FLOAT)\t\t\\\n-\t\t\t   + (MAX_MODE_FLOAT - MIN_MODE_FLOAT + 1))\t\\\n+\t\t\t   + NUM_MODE_FLOAT)\t\t\t\t\\\n \t\t\t: GET_MODE_CLASS (MODE) == MODE_FLOAT\t\t\\\n \t\t\t? ((MODE) - MIN_MODE_FLOAT)\t\t\t\\\n \t\t\t: (gcc_unreachable (), 0)])"}]}