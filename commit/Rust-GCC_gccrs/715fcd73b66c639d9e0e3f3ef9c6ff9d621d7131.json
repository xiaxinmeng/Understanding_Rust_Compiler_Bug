{"sha": "715fcd73b66c639d9e0e3f3ef9c6ff9d621d7131", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE1ZmNkNzNiNjZjNjM5ZDllMGUzZjNlZjljNmZmOWQ2MjFkNzEzMQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-07-05T14:36:09Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-07-05T14:36:09Z"}, "message": "PR tree-optimization/86400 - set<string>::set<char (*)[2]) constructor does not work with array argument\n\ngcc/ChangeLog:\n\t* tree-ssa-strlen.c (maybe_set_strlen_range): Use type size rather\n\tthan its domain to compute its the upper bound of a char array.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/strlenopt-47.c: New test.\n\t* gcc.dg/strlenopt-48.c: New test.\n\nFrom-SVN: r262438", "tree": {"sha": "bf5e2c54a9f08d3e851b7523146bc2c9d4cc8238", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf5e2c54a9f08d3e851b7523146bc2c9d4cc8238"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/715fcd73b66c639d9e0e3f3ef9c6ff9d621d7131", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/715fcd73b66c639d9e0e3f3ef9c6ff9d621d7131", "html_url": "https://github.com/Rust-GCC/gccrs/commit/715fcd73b66c639d9e0e3f3ef9c6ff9d621d7131", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/715fcd73b66c639d9e0e3f3ef9c6ff9d621d7131/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "09cff37bfdcc9407a72262cbdd6fd3350488d934", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09cff37bfdcc9407a72262cbdd6fd3350488d934", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09cff37bfdcc9407a72262cbdd6fd3350488d934"}], "stats": {"total": 110, "additions": 94, "deletions": 16}, "files": [{"sha": "adaacc57f6e5ee4278d8aa0e7d54cf94a9995eb4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715fcd73b66c639d9e0e3f3ef9c6ff9d621d7131/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715fcd73b66c639d9e0e3f3ef9c6ff9d621d7131/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=715fcd73b66c639d9e0e3f3ef9c6ff9d621d7131", "patch": "@@ -1,3 +1,9 @@\n+2018-07-05  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/86400\n+\t* tree-ssa-strlen.c (maybe_set_strlen_range): Use type size rather\n+\tthan its domain to compute its the upper bound of a char array.\n+\n 2018-07-05  Nathan Sidwell  <nathan@acm.org>\n \n \tReplace NO_IMPLICIT_EXTERN_C with SYSTEM_IMPLICIT_EXTERN_C."}, {"sha": "9f2cc8410ca247c4af40f30f3d372261fb215b03", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715fcd73b66c639d9e0e3f3ef9c6ff9d621d7131/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715fcd73b66c639d9e0e3f3ef9c6ff9d621d7131/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=715fcd73b66c639d9e0e3f3ef9c6ff9d621d7131", "patch": "@@ -1,3 +1,9 @@\n+2018-07-05  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/86400\n+\t* gcc.dg/strlenopt-47.c: New test.\n+\t* gcc.dg/strlenopt-48.c: New test.\n+\n 2018-07-05  Tamar Christina  <tamar.christina@arm.com>\n \n \tPR target/84711"}, {"sha": "68945c7c1a19c67c49ca1c97fd549c749d70fcff", "filename": "gcc/testsuite/gcc.dg/strlenopt-47.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715fcd73b66c639d9e0e3f3ef9c6ff9d621d7131/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-47.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715fcd73b66c639d9e0e3f3ef9c6ff9d621d7131/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-47.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-47.c?ref=715fcd73b66c639d9e0e3f3ef9c6ff9d621d7131", "patch": "@@ -0,0 +1,36 @@\n+/* PR tree-optimization/86400 - set<string>::set<char (*)[2]) constructor\n+   does not work with array argument\n+   Verify that strlen() calls with two-character array elements of\n+   multidimensional arrays whose higher order dimension is 1 are not\n+   folded.\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -fdump-tree-optimized\" } */\n+\n+#include \"strlenopt.h\"\n+\n+void f (void)\n+{\n+  extern char a[1][2];\n+  int n = strlen (*a);\n+  if (n != 1)\n+    abort();\n+}\n+\n+void g (void)\n+{\n+  extern char b[1][2];\n+  int n = strlen (b[0]);\n+  if (n != 1)\n+    abort();\n+}\n+\n+void h (void)\n+{\n+  extern char c[1][2];\n+  int n = strlen (&c[0][0]);\n+  if (n != 1)\n+    abort();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"= strlen\" 3 \"optimized\" } }\n+   { dg-final { scan-tree-dump-times \"abort\" 3 \"optimized\" } } */"}, {"sha": "39bb32df6dd1452e7ac4b48a27787c621926f379", "filename": "gcc/testsuite/gcc.dg/strlenopt-48.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715fcd73b66c639d9e0e3f3ef9c6ff9d621d7131/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-48.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715fcd73b66c639d9e0e3f3ef9c6ff9d621d7131/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-48.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-48.c?ref=715fcd73b66c639d9e0e3f3ef9c6ff9d621d7131", "patch": "@@ -0,0 +1,35 @@\n+/* PR tree-optimization/86400 - set<string>::set<char (*)[2]) constructor\n+   does not work with array argument\n+   Verify that strlen() calls with one-character array elements of\n+   multidimensional arrays are still folded.\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -fdump-tree-optimized\" } */\n+\n+#include \"strlenopt.h\"\n+\n+void f (void)\n+{\n+  extern char a[2][1];\n+  int n = strlen (a[1]);\n+  if (n)\n+    abort();\n+}\n+\n+void g (void)\n+{\n+  extern char b[3][2][1];\n+  int n = strlen (b[2][1]);\n+  if (n)\n+    abort();\n+}\n+\n+void h (void)\n+{\n+  extern char c[4][3][2][1];\n+  int n = strlen (c[3][2][1]);\n+  if (n)\n+    abort();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"strlen\" 0 \"optimized\" } }\n+   { dg-final { scan-tree-dump-times \"abort\" 0 \"optimized\" } } */"}, {"sha": "736e2d946fc54d89adaf9cc26cea5fd0d703f1ea", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715fcd73b66c639d9e0e3f3ef9c6ff9d621d7131/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715fcd73b66c639d9e0e3f3ef9c6ff9d621d7131/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=715fcd73b66c639d9e0e3f3ef9c6ff9d621d7131", "patch": "@@ -1156,22 +1156,17 @@ maybe_set_strlen_range (tree lhs, tree src, tree bound)\n       if (src_is_array && !array_at_struct_end_p (src))\n \t{\n \t  tree type = TREE_TYPE (src);\n-\t  if (tree dom = TYPE_DOMAIN (type))\n-\t    {\n-\t      tree maxval = TYPE_MAX_VALUE (dom);\n-\t      if (maxval)\n-\t\tmax = wi::to_wide (maxval);\n-\t      else\n-\t\tmax = wi::zero (min.get_precision ());\n-\n-\t      /* For strlen() the upper bound above is equal to\n-\t\t the longest string that can be stored in the array\n-\t\t (i.e., it accounts for the terminating nul.  For\n-\t\t strnlen() bump up the maximum by one since the array\n-\t\t need not be nul-terminated.  */\n-\t      if (bound)\n-\t\t++max;\n-\t    }\n+\t  if (tree size = TYPE_SIZE_UNIT (type))\n+\t    if (size && TREE_CODE (size) == INTEGER_CST)\n+\t      max = wi::to_wide (size);\n+\n+\t  /* For strlen() the upper bound above is equal to\n+\t     the longest string that can be stored in the array\n+\t     (i.e., it accounts for the terminating nul.  For\n+\t     strnlen() bump up the maximum by one since the array\n+\t     need not be nul-terminated.  */\n+\t  if (!bound && max != 0)\n+\t    --max;\n \t}\n       else\n \t{"}]}