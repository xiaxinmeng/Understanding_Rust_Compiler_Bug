{"sha": "6cedf5d8e23c862db147e71d5767ca57e6b4f433", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNlZGY1ZDhlMjNjODYyZGIxNDdlNzFkNTc2N2NhNTdlNmI0ZjQzMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-01-27T19:37:55Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-01-28T10:47:43Z"}, "message": "predcom: Fix invalid store-store commoning [PR93434]\n\npredcom has the following code to stop one rogue load from\ninterfering with other store-load opportunities:\n\n      /* If A is read and B write or vice versa and there is unsuitable\n\t dependence, instead of merging both components into a component\n\t that will certainly not pass suitable_component_p, just put the\n\t read into bad component, perhaps at least the write together with\n\t all the other data refs in it's component will be optimizable.  */\n\nBut when store-store commoning was added later, this had the effect\nof ignoring loads that occur between two candidate stores.\n\nThere is code further up to handle loads and stores with unknown\ndependences:\n\n      /* Don't do store elimination if there is any unknown dependence for\n\t any store data reference.  */\n      if ((DR_IS_WRITE (dra) || DR_IS_WRITE (drb))\n\t  && (DDR_ARE_DEPENDENT (ddr) == chrec_dont_know\n\t      || DDR_NUM_DIST_VECTS (ddr) == 0))\n\teliminate_store_p = false;\n\nBut the store-load code above skips loads for *known* dependences\nif (a) the load has already been marked \"bad\" or (b) the data-ref\nmachinery knows the dependence distance, but determine_offsets\ncan't handle the combination.\n\n(a) happens to be the problem in the testcase, but a different\nsequence could have given (b) instead.  We have writes to individual\nfields of a structure and reads from the whole structure.  Since\ndetermine_offsets requires the types to be the same, it returns false\nfor each such read/write combination.\n\nThis patch records which components have had loads removed and\nprevents store-store commoning for them.  It's a bit too pessimistic,\nsince there shouldn't be a problem if a \"bad\" load dominates all stores\nin a component.  But (a) we can't AFAIK use pcom_stmt_dominates_stmt_p\nhere and (b) the handling for that case would probably need to be\nremoved again if we handled more exotic cases in future.\n\n2020-01-28  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\tPR tree-optimization/93434\n\t* tree-predcom.c (split_data_refs_to_components): Record which\n\tcomponents have had aliasing loads removed.  Prevent store-store\n\tcommoning for all such components.\n\ngcc/testsuite/\n\tPR tree-optimization/93434\n\t* gcc.c-torture/execute/pr93434.c: New test.", "tree": {"sha": "f55dd90d0100ed5e72c8875c6ad5094e65420787", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f55dd90d0100ed5e72c8875c6ad5094e65420787"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cedf5d8e23c862db147e71d5767ca57e6b4f433", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cedf5d8e23c862db147e71d5767ca57e6b4f433", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cedf5d8e23c862db147e71d5767ca57e6b4f433", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cedf5d8e23c862db147e71d5767ca57e6b4f433/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3aa64a0f08664a4b0094352aa11f877fa2bd4c37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aa64a0f08664a4b0094352aa11f877fa2bd4c37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3aa64a0f08664a4b0094352aa11f877fa2bd4c37"}], "stats": {"total": 72, "additions": 70, "deletions": 2}, "files": [{"sha": "8507c2e439df22e4fe647bc7072379e96f7630c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cedf5d8e23c862db147e71d5767ca57e6b4f433/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cedf5d8e23c862db147e71d5767ca57e6b4f433/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6cedf5d8e23c862db147e71d5767ca57e6b4f433", "patch": "@@ -1,3 +1,10 @@\n+2020-01-28  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/93434\n+\t* tree-predcom.c (split_data_refs_to_components): Record which\n+\tcomponents have had aliasing loads removed.  Prevent store-store\n+\tcommoning for all such components.\n+\n 2020-01-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/93418"}, {"sha": "eac18206b1229792913fc74672eb414f16d7ad7b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cedf5d8e23c862db147e71d5767ca57e6b4f433/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cedf5d8e23c862db147e71d5767ca57e6b4f433/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6cedf5d8e23c862db147e71d5767ca57e6b4f433", "patch": "@@ -1,3 +1,8 @@\n+2020-01-28  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/93434\n+\t* gcc.c-torture/execute/pr93434.c: New test.\n+\n 2020-01-28  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR testsuite/93460"}, {"sha": "e786252794beaaf076a341980a12e7a9d596d3ab", "filename": "gcc/testsuite/gcc.c-torture/execute/pr93434.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cedf5d8e23c862db147e71d5767ca57e6b4f433/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr93434.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cedf5d8e23c862db147e71d5767ca57e6b4f433/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr93434.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr93434.c?ref=6cedf5d8e23c862db147e71d5767ca57e6b4f433", "patch": "@@ -0,0 +1,36 @@\n+typedef struct creal_T {\n+  double re;\n+  double im;\n+} creal_T;\n+\n+#define N 16\n+int main() {\n+  int k;\n+  int i;\n+  int j;\n+  creal_T t2[N];\n+  double inval;\n+\n+  inval = 1.0;\n+  for (j = 0; j < N; ++j) {\n+    t2[j].re = 0;\n+    t2[j].im = 0;\n+  }\n+\n+  for (j = 0; j < N/4; j++) {\n+    i = j * 4;\n+    t2[i].re = inval;\n+    t2[i].im = inval;\n+    k = i + 3;\n+    t2[k].re = inval;\n+    t2[k].im = inval;\n+    t2[i] = t2[k];\n+    t2[k].re = inval;\n+  }\n+\n+  for (i = 0; i < 2; ++i)\n+    if (t2[i].re != !i || t2[i].im != !i)\n+      __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "d2dcfe7f42d3e65e4da24db2be4721271b1f7377", "filename": "gcc/tree-predcom.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cedf5d8e23c862db147e71d5767ca57e6b4f433/gcc%2Ftree-predcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cedf5d8e23c862db147e71d5767ca57e6b4f433/gcc%2Ftree-predcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.c?ref=6cedf5d8e23c862db147e71d5767ca57e6b4f433", "patch": "@@ -767,6 +767,7 @@ split_data_refs_to_components (class loop *loop,\n   /* Don't do store elimination if loop has multiple exit edges.  */\n   bool eliminate_store_p = single_exit (loop) != NULL;\n   basic_block last_always_executed = last_always_executed_block (loop);\n+  auto_bitmap no_store_store_comps;\n \n   FOR_EACH_VEC_ELT (datarefs, i, dr)\n     {\n@@ -838,19 +839,27 @@ split_data_refs_to_components (class loop *loop,\n       else if (DR_IS_READ (dra) && ib != bad)\n \t{\n \t  if (ia == bad)\n-\t    continue;\n+\t    {\n+\t      bitmap_set_bit (no_store_store_comps, ib);\n+\t      continue;\n+\t    }\n \t  else if (!determine_offset (dra, drb, &dummy_off))\n \t    {\n+\t      bitmap_set_bit (no_store_store_comps, ib);\n \t      merge_comps (comp_father, comp_size, bad, ia);\n \t      continue;\n \t    }\n \t}\n       else if (DR_IS_READ (drb) && ia != bad)\n \t{\n \t  if (ib == bad)\n-\t    continue;\n+\t    {\n+\t      bitmap_set_bit (no_store_store_comps, ia);\n+\t      continue;\n+\t    }\n \t  else if (!determine_offset (dra, drb, &dummy_off))\n \t    {\n+\t      bitmap_set_bit (no_store_store_comps, ia);\n \t      merge_comps (comp_father, comp_size, bad, ib);\n \t      continue;\n \t    }\n@@ -908,6 +917,17 @@ split_data_refs_to_components (class loop *loop,\n       comp->refs.quick_push (dataref);\n     }\n \n+  if (eliminate_store_p)\n+    {\n+      bitmap_iterator bi;\n+      EXECUTE_IF_SET_IN_BITMAP (no_store_store_comps, 0, ia, bi)\n+\t{\n+\t  ca = component_of (comp_father, ia);\n+\t  if (ca != bad)\n+\t    comps[ca]->eliminate_store_p = false;\n+\t}\n+    }\n+\n   for (i = 0; i < n; i++)\n     {\n       comp = comps[i];"}]}