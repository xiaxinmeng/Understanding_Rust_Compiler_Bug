{"sha": "f620e1d5c84586f6e60bf5350946ea4a75154ff4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjYyMGUxZDVjODQ1ODZmNmU2MGJmNTM1MDk0NmVhNGE3NTE1NGZmNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-03-05T18:38:35Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-03-05T18:38:35Z"}, "message": "Add std::scoped_lock for C++17\n\n\t* doc/xml/manual/status_cxx2017.xml: Document P0156R2 status.\n\t* doc/html/*: Regenerate.\n\t* include/std/mutex (scoped_lock): Implement new C++17 template.\n\t* testsuite/30_threads/scoped_lock/cons/1.cc: New test.\n\t* testsuite/30_threads/scoped_lock/requirements/\n\texplicit_instantiation.cc: New test.\n\t* testsuite/30_threads/scoped_lock/requirements/typedefs.cc: New test.\n\nFrom-SVN: r245903", "tree": {"sha": "a3d7288f3ed77f2935a5140ef1f8c0f45a0d5539", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3d7288f3ed77f2935a5140ef1f8c0f45a0d5539"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f620e1d5c84586f6e60bf5350946ea4a75154ff4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f620e1d5c84586f6e60bf5350946ea4a75154ff4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f620e1d5c84586f6e60bf5350946ea4a75154ff4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f620e1d5c84586f6e60bf5350946ea4a75154ff4/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8b4baeb45c2727156e6d14e1dee16e078c0a727", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8b4baeb45c2727156e6d14e1dee16e078c0a727", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8b4baeb45c2727156e6d14e1dee16e078c0a727"}], "stats": {"total": 330, "additions": 301, "deletions": 29}, "files": [{"sha": "ef48d8767cffbf71d246c8d7201e281390658a52", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f620e1d5c84586f6e60bf5350946ea4a75154ff4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f620e1d5c84586f6e60bf5350946ea4a75154ff4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f620e1d5c84586f6e60bf5350946ea4a75154ff4", "patch": "@@ -1,3 +1,13 @@\n+2017-03-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/manual/status_cxx2017.xml: Document P0156R2 status.\n+\t* doc/html/*: Regenerate.\n+\t* include/std/mutex (scoped_lock): Implement new C++17 template.\n+\t* testsuite/30_threads/scoped_lock/cons/1.cc: New test.\n+\t* testsuite/30_threads/scoped_lock/requirements/\n+\texplicit_instantiation.cc: New test.\n+\t* testsuite/30_threads/scoped_lock/requirements/typedefs.cc: New test.\n+\n 2017-03-02  Gerald Pfeifer  <gerald@pfeifer.com>\n \t    Fran\u00e7ois Dumont  <frs.dumont@gmail.com>\n \t    Jonathan Wakely  <jwakely@redhat.com>"}, {"sha": "c0dc2d29b0a24f4df2c8eceba2b4f17e9ff2c77d", "filename": "libstdc++-v3/doc/html/manual/debug.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f620e1d5c84586f6e60bf5350946ea4a75154ff4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fdebug.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f620e1d5c84586f6e60bf5350946ea4a75154ff4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fdebug.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fdebug.html?ref=f620e1d5c84586f6e60bf5350946ea4a75154ff4", "patch": "@@ -161,7 +161,7 @@\n   DRD</a>,\n   <a class=\"link\" href=\"http://valgrind.org/docs/manual/hg-manual.html\" target=\"_top\"> \n   Helgrind</a>, and\n-  <a class=\"link\" href=\"https://code.google.com/p/data-race-test/\" target=\"_top\"> \n+  <a class=\"link\" href=\"https://github.com/google/sanitizers\" target=\"_top\"> \n   ThreadSanitizer</a> (this refers to ThreadSanitizer v1, not the\n   new \"tsan\" feature built-in to GCC itself).\n </p><p>"}, {"sha": "b8d391f185c20c48f4c9717fff798c8421cf5e3b", "filename": "libstdc++-v3/doc/html/manual/debug_mode_design.html", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f620e1d5c84586f6e60bf5350946ea4a75154ff4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fdebug_mode_design.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f620e1d5c84586f6e60bf5350946ea4a75154ff4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fdebug_mode_design.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fdebug_mode_design.html?ref=f620e1d5c84586f6e60bf5350946ea4a75154ff4", "patch": "@@ -191,15 +191,11 @@\n   perform, shortening the detect-compile-debug bug hunting cycle\n   and making the debug mode easier to incorporate into development\n   environments by minimizing dependencies.</p><p>Achieving link- and run-time coexistence is not a trivial\n-  implementation task. To achieve this goal we required a small\n-  extension to the GNU C++ compiler (since incorporated into the C++11 language specification, described in the GCC Manual for the C++ language as\n-  <a class=\"link\" href=\"http://gcc.gnu.org/onlinedocs/gcc/Namespace-Association.html#Namespace-Association\" target=\"_top\">namespace\n-  association</a>), and a complex organization of debug- and\n-  release-modes. The end result is that we have achieved per-use\n-  recompilation but have had to give up some checking of the\n-  <code class=\"code\">std::basic_string</code> class template (namely, safe\n-  iterators).\n-</p><div class=\"section\"><div class=\"titlepage\"><div><div><h5 class=\"title\"><a id=\"methods.coexistence.compile\"></a>Compile-time coexistence of release- and debug-mode components</h5></div></div></div><p>Both the release-mode components and the debug-mode\n+  implementation task. To achieve this goal we use inline namespaces and\n+  a complex organization of debug- and release-modes. The end result is\n+  that we have achieved per-use recompilation but have had to give up\n+  some checking of the <code class=\"code\">std::basic_string</code> class template\n+  (namely, safe iterators).</p><div class=\"section\"><div class=\"titlepage\"><div><div><h5 class=\"title\"><a id=\"methods.coexistence.compile\"></a>Compile-time coexistence of release- and debug-mode components</h5></div></div></div><p>Both the release-mode components and the debug-mode\n   components need to exist within a single translation unit so that\n   the debug versions can wrap the release versions. However, only one\n   of these components should be user-visible at any particular"}, {"sha": "f3e372603a94180de4029a7a8dde89bd41d98803", "filename": "libstdc++-v3/doc/html/manual/documentation_hacking.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f620e1d5c84586f6e60bf5350946ea4a75154ff4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fdocumentation_hacking.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f620e1d5c84586f6e60bf5350946ea4a75154ff4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fdocumentation_hacking.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fdocumentation_hacking.html?ref=f620e1d5c84586f6e60bf5350946ea4a75154ff4", "patch": "@@ -114,7 +114,7 @@\n       <span class=\"emphasis\"><em>ps</em></span>, and <span class=\"emphasis\"><em>dvi</em></span>.\n     </p></div><div class=\"section\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"doc.doxygen\"></a>Doxygen</h3></div></div></div><div class=\"section\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"doxygen.prereq\"></a>Prerequisites</h4></div></div></div><div class=\"table\"><a id=\"table.doxygen_prereq\"></a><p class=\"title\"><strong>Table\u00a0B.1.\u00a0Doxygen Prerequisites</strong></p><div class=\"table-contents\"><table summary=\"Doxygen Prerequisites\" border=\"1\"><colgroup><col align=\"center\" class=\"c1\" /><col align=\"center\" class=\"c2\" /><col align=\"center\" class=\"c3\" /></colgroup><thead><tr><th align=\"center\">Tool</th><th align=\"center\">Version</th><th align=\"center\">Required By</th></tr></thead><tbody><tr><td align=\"center\">coreutils</td><td align=\"center\">8.5</td><td align=\"center\">all</td></tr><tr><td align=\"center\">bash</td><td align=\"center\">4.1</td><td align=\"center\">all</td></tr><tr><td align=\"center\">doxygen</td><td align=\"center\">1.7.6.1</td><td align=\"center\">all</td></tr><tr><td align=\"center\">graphviz</td><td align=\"center\">2.26</td><td align=\"center\">graphical hierarchies</td></tr><tr><td align=\"center\">pdflatex</td><td align=\"center\">2007-59</td><td align=\"center\">pdf output</td></tr></tbody></table></div></div><br class=\"table-break\" /><p>\n \tPrerequisite tools are Bash 2.0 or later,\n-\t<a class=\"link\" href=\"http://www.doxygen.org/\" target=\"_top\">Doxygen</a>, and\n+\t<a class=\"link\" href=\"http://www.doxygen.org\" target=\"_top\">Doxygen</a>, and\n \tthe <a class=\"link\" href=\"http://www.gnu.org/software/coreutils/\" target=\"_top\">GNU\n \tcoreutils</a>. (GNU versions of find, xargs, and possibly\n \tsed and grep are used, just because the GNU versions make"}, {"sha": "897057600f92b7dfe87a3fb44ffd888d8348f38b", "filename": "libstdc++-v3/doc/html/manual/fstreams.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f620e1d5c84586f6e60bf5350946ea4a75154ff4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Ffstreams.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f620e1d5c84586f6e60bf5350946ea4a75154ff4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Ffstreams.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Ffstreams.html?ref=f620e1d5c84586f6e60bf5350946ea4a75154ff4", "patch": "@@ -137,8 +137,8 @@\n    </p><p>\n       An instructive thread from comp.lang.c++.moderated delved off into\n       this topic starting more or less at\n-      <a class=\"link\" href=\"http://groups.google.com/group/comp.std.c++/browse_thread/thread/f87b4abd7954a87/946a3eb9921e382d?q=comp.std.c%2B%2B+binary+iostream#946a3eb9921e382d\" target=\"_top\">this</a>\n-      post and continuing to the end of the thread. (The subject heading is \"binary iostreams\" on both comp.std.c++\n+      <a class=\"link\" href=\"https://groups.google.com/forum/#!topic/comp.std.c++/D4e0q9eVSoc\" target=\"_top\">this post</a>\n+      and continuing to the end of the thread. (The subject heading is \"binary iostreams\" on both comp.std.c++\n       and comp.lang.c++.moderated.) Take special note of the replies by James Kanze and Dietmar K\u00fchl.\n    </p><p>Briefly, the problems of byte ordering and type sizes mean that\n       the unformatted functions like <code class=\"code\">ostream::put()</code> and"}, {"sha": "d310b6954719a115130b540115d3dd0e302dc006", "filename": "libstdc++-v3/doc/html/manual/memory.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f620e1d5c84586f6e60bf5350946ea4a75154ff4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fmemory.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f620e1d5c84586f6e60bf5350946ea4a75154ff4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fmemory.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fmemory.html?ref=f620e1d5c84586f6e60bf5350946ea4a75154ff4", "patch": "@@ -671,7 +671,7 @@\n       </em>. </span><span class=\"subtitle\">\n       N2461\n     . </span></p></div><div class=\"biblioentry\"><a id=\"id-1.3.4.4.4.5.8.5\"></a><p><span class=\"title\"><em>\n-\t<a class=\"link\" href=\"http://boost.org/libs/smart_ptr/shared_ptr.htm\" target=\"_top\">\n+\t<a class=\"link\" href=\"http://www.boost.org/libs/smart_ptr/shared_ptr.htm\" target=\"_top\">\n       Boost C++ Libraries documentation, shared_ptr\n \t</a>\n       </em>. </span><span class=\"subtitle\">"}, {"sha": "bd0d18e21f5706351564fc1adec1b8f0cb318eb1", "filename": "libstdc++-v3/doc/html/manual/policy_data_structures.html", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f620e1d5c84586f6e60bf5350946ea4a75154ff4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fpolicy_data_structures.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f620e1d5c84586f6e60bf5350946ea4a75154ff4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fpolicy_data_structures.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fpolicy_data_structures.html?ref=f620e1d5c84586f6e60bf5350946ea4a75154ff4", "patch": "@@ -834,7 +834,7 @@\n \t  </span>. </span><span class=\"publisher\"><span class=\"publishername\">\n \t  Generic Programming\n \t. </span></span></p></div><div class=\"biblioentry\"><a id=\"biblio.dawestimer\"></a><p>[biblio.dawestimer] <span class=\"title\"><em>\n-\t<a class=\"link\" href=\"http://www.boost.org/doc/libs/release/libs/timer/\" target=\"_top\">\n+\t<a class=\"link\" href=\"http://www.boost.org/libs/timer/\" target=\"_top\">\n \t  Boost Timer Library\n \t</a>\n       </em>. </span><span class=\"author\"><span class=\"firstname\">\n@@ -844,7 +844,7 @@\n \t  </span>. </span><span class=\"publisher\"><span class=\"publishername\">\n \t  Boost\n \t. </span></span></p></div><div class=\"biblioentry\"><a id=\"biblio.clearypool\"></a><p>[biblio.clearypool] <span class=\"title\"><em>\n-\t<a class=\"link\" href=\"http://www.boost.org/doc/libs/release/libs/pool/\" target=\"_top\">\n+\t<a class=\"link\" href=\"http://www.boost.org/libs/pool/\" target=\"_top\">\n \t  Boost Pool Library\n \t</a>\n       </em>. </span><span class=\"author\"><span class=\"firstname\">\n@@ -854,7 +854,7 @@\n \t  </span>. </span><span class=\"publisher\"><span class=\"publishername\">\n \t  Boost\n \t. </span></span></p></div><div class=\"biblioentry\"><a id=\"biblio.maddocktraits\"></a><p>[biblio.maddocktraits] <span class=\"title\"><em>\n-\t<a class=\"link\" href=\"http://www.boost.org/doc/libs/release/libs/type_traits/\" target=\"_top\">\n+\t<a class=\"link\" href=\"http://www.boost.org/libs/type_traits/\" target=\"_top\">\n \t  Boost Type Traits Library\n \t</a>\n       </em>. </span><span class=\"authorgroup\"><span class=\"firstname\">"}, {"sha": "e450da28cb694c6d8aa77704bb4ad1bf601ea72f", "filename": "libstdc++-v3/doc/html/manual/policy_data_structures_ack.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f620e1d5c84586f6e60bf5350946ea4a75154ff4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fpolicy_data_structures_ack.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f620e1d5c84586f6e60bf5350946ea4a75154ff4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fpolicy_data_structures_ack.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fpolicy_data_structures_ack.html?ref=f620e1d5c84586f6e60bf5350946ea4a75154ff4", "patch": "@@ -18,7 +18,7 @@\n \t  reverse iteration can be performed efficiently.\n \t</p></li></ol></div><p>\n       Some test utilities borrow ideas from\n-      <a class=\"link\" href=\"http://www.boost.org/doc/libs/release/libs/timer/index.html\" target=\"_top\">boost::timer</a>.\n+      <a class=\"link\" href=\"http://www.boost.org/libs/timer/\" target=\"_top\">boost::timer</a>.\n     </p><p>\n       We would like to thank Scott Meyers for useful comments (without\n       attributing to him any flaws in the design or implementation of the"}, {"sha": "3f32b30b9f8e47403ea9144000427830fc8bb0ac", "filename": "libstdc++-v3/doc/html/manual/profile_mode.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f620e1d5c84586f6e60bf5350946ea4a75154ff4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fprofile_mode.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f620e1d5c84586f6e60bf5350946ea4a75154ff4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fprofile_mode.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fprofile_mode.html?ref=f620e1d5c84586f6e60bf5350946ea4a75154ff4", "patch": "@@ -11,7 +11,7 @@\n   various components at interesting entry/exit points to/from the standard\n   library.  Process trace, recognize suboptimal patterns, give advice.\n   For details, see the\n-  <a class=\"link\" href=\"http://http://ieeexplore.ieee.org/document/4907670/\" target=\"_top\">Perflint\n+  <a class=\"link\" href=\"http://ieeexplore.ieee.org/document/4907670/\" target=\"_top\">Perflint\n   paper presented at CGO 2009</a>.\n   </p><p>\n   <span class=\"emphasis\"><em>Strengths: </em></span>"}, {"sha": "8fe9eddba2a8219616beee12bff98d252733704c", "filename": "libstdc++-v3/doc/html/manual/profile_mode_design.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f620e1d5c84586f6e60bf5350946ea4a75154ff4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fprofile_mode_design.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f620e1d5c84586f6e60bf5350946ea4a75154ff4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fprofile_mode_design.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fprofile_mode_design.html?ref=f620e1d5c84586f6e60bf5350946ea4a75154ff4", "patch": "@@ -60,7 +60,7 @@\n   call stack of its constructor location.\n   </p><p>\n   For details, see\n-   <a class=\"link\" href=\"http://dx.doi.org/10.1109/CGO.2009.36\" target=\"_top\">paper presented at\n+   <a class=\"link\" href=\"http://ieeexplore.ieee.org/document/4907670/\" target=\"_top\">paper presented at\n    CGO 2009</a>.\n   </p></div><div class=\"section\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"manual.ext.profile_mode.design.analysis\"></a>Analysis and Diagnostics</h3></div></div></div><p>\n   Final analysis takes place offline, and it is based entirely on the"}, {"sha": "0507cc7545a5d18d4a7ccb14673e23f43074c957", "filename": "libstdc++-v3/doc/html/manual/status.html", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f620e1d5c84586f6e60bf5350946ea4a75154ff4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f620e1d5c84586f6e60bf5350946ea4a75154ff4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html?ref=f620e1d5c84586f6e60bf5350946ea4a75154ff4", "patch": "@@ -776,11 +776,11 @@\n \t<a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4508.html\" target=\"_top\">\n \t  N4508\n \t</a>\n-      </td><td align=\"center\"> 6.1 </td><td align=\"left\"><code class=\"code\"> __cpp_lib_shared_mutex &gt;= 201505 </code></td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\"> Variadic <code class=\"code\">lock_guard</code> </td><td align=\"left\">\n-\t<a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0156r0.html\" target=\"_top\">\n-\tP0156R0\n+      </td><td align=\"center\"> 6.1 </td><td align=\"left\"><code class=\"code\"> __cpp_lib_shared_mutex &gt;= 201505 </code></td></tr><tr><td align=\"left\"> Variadic <code class=\"code\">lock_guard</code> </td><td align=\"left\">\n+\t<a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0156r2.html\" target=\"_top\">\n+\tP0156R2\n \t</a>\n-      </td><td align=\"center\"> No </td><td align=\"left\"><code class=\"code\"> __cpp_lib_lock_guard_variadic &gt;= 201510 </code></td></tr></tbody></table></div></div><br class=\"table-break\" /><div class=\"table\"><a id=\"table.cxx1z_ts_status\"></a><p class=\"title\"><strong>Table\u00a01.6.\u00a0C++ Technical Specifications Implementation Status</strong></p><div class=\"table-contents\"><table summary=\"C++ Technical Specifications Implementation Status\" border=\"1\"><colgroup><col align=\"left\" class=\"c1\" /><col align=\"left\" class=\"c2\" /><col align=\"left\" class=\"c3\" /><col align=\"left\" class=\"c4\" /></colgroup><thead><tr><th align=\"left\">Paper</th><th align=\"left\">Title</th><th align=\"left\">Status</th><th align=\"left\">Comments</th></tr></thead><tbody><tr><td align=\"left\">\n+      </td><td align=\"center\"> 7 </td><td align=\"left\"><code class=\"code\"> __cpp_lib_scoped_lock &gt;= 201703 </code></td></tr></tbody></table></div></div><br class=\"table-break\" /><div class=\"table\"><a id=\"table.cxx1z_ts_status\"></a><p class=\"title\"><strong>Table\u00a01.6.\u00a0C++ Technical Specifications Implementation Status</strong></p><div class=\"table-contents\"><table summary=\"C++ Technical Specifications Implementation Status\" border=\"1\"><colgroup><col align=\"left\" class=\"c1\" /><col align=\"left\" class=\"c2\" /><col align=\"left\" class=\"c3\" /><col align=\"left\" class=\"c4\" /></colgroup><thead><tr><th align=\"left\">Paper</th><th align=\"left\">Title</th><th align=\"left\">Status</th><th align=\"left\">Comments</th></tr></thead><tbody><tr><td align=\"left\">\n \t<a class=\"link\" href=\"http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2014/n4076.html\" target=\"_top\">\n \t  N4076\n \t</a>"}, {"sha": "1053f2dd84bad904ef2f5f76c299498b3182848f", "filename": "libstdc++-v3/doc/xml/manual/status_cxx2017.xml", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f620e1d5c84586f6e60bf5350946ea4a75154ff4/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f620e1d5c84586f6e60bf5350946ea4a75154ff4/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml?ref=f620e1d5c84586f6e60bf5350946ea4a75154ff4", "patch": "@@ -719,15 +719,14 @@ Feature-testing recommendations for C++</link>.\n     </row>\n \n     <row>\n-      <?dbhtml bgcolor=\"#C8B0B0\" ?>\n       <entry> Variadic <code>lock_guard</code> </entry>\n       <entry>\n-\t<link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0156r0.html\">\n-\tP0156R0\n+\t<link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0156r2.html\">\n+\tP0156R2\n \t</link>\n       </entry>\n-      <entry align=\"center\"> No </entry>\n-      <entry><code> __cpp_lib_lock_guard_variadic >= 201510 </code></entry>\n+      <entry align=\"center\"> 7 </entry>\n+      <entry><code> __cpp_lib_scoped_lock >= 201703 </code></entry>\n     </row>\n \n   </tbody>"}, {"sha": "6c3f92022beb3e779d0482aa14632a86683fe972", "filename": "libstdc++-v3/include/std/mutex", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f620e1d5c84586f6e60bf5350946ea4a75154ff4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f620e1d5c84586f6e60bf5350946ea4a75154ff4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex?ref=f620e1d5c84586f6e60bf5350946ea4a75154ff4", "patch": "@@ -556,6 +556,74 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         }\n     }\n \n+#if __cplusplus > 201402L\n+#define __cpp_lib_scoped_lock 201703\n+  /** @brief A scoped lock type for multiple lockable objects.\n+   *\n+   * A scoped_lock controls mutex ownership within a scope, releasing\n+   * ownership in the destructor.\n+   */\n+  template<typename... _MutexTypes>\n+    class scoped_lock\n+    {\n+    public:\n+      explicit scoped_lock(_MutexTypes&... __m) : _M_devices(std::tie(__m...))\n+      { std::lock(__m...); }\n+\n+      explicit scoped_lock(_MutexTypes&... __m, adopt_lock_t) noexcept\n+      : _M_devices(std::tie(__m...))\n+      { } // calling thread owns mutex\n+\n+      ~scoped_lock()\n+      {\n+\tstd::apply([](_MutexTypes&... __m) {\n+\t  char __i[] __attribute__((__unused__)) = { (__m.unlock(), 0)... };\n+\t}, _M_devices);\n+      }\n+\n+      scoped_lock(const scoped_lock&) = delete;\n+      scoped_lock& operator=(const scoped_lock&) = delete;\n+\n+    private:\n+      tuple<_MutexTypes&...> _M_devices;\n+    };\n+\n+  template<>\n+    class scoped_lock<>\n+    {\n+    public:\n+      explicit scoped_lock() = default;\n+      explicit scoped_lock(adopt_lock_t) noexcept { }\n+      ~scoped_lock() = default;\n+\n+      scoped_lock(const scoped_lock&) = delete;\n+      scoped_lock& operator=(const scoped_lock&) = delete;\n+    };\n+\n+  template<typename _Mutex>\n+    class scoped_lock<_Mutex>\n+    {\n+    public:\n+      using mutex_type = _Mutex;\n+\n+      explicit scoped_lock(mutex_type& __m) : _M_device(__m)\n+      { _M_device.lock(); }\n+\n+      explicit scoped_lock(mutex_type& __m, adopt_lock_t) noexcept\n+      : _M_device(__m)\n+      { } // calling thread owns mutex\n+\n+      ~scoped_lock()\n+      { _M_device.unlock(); }\n+\n+      scoped_lock(const scoped_lock&) = delete;\n+      scoped_lock& operator=(const scoped_lock&) = delete;\n+\n+    private:\n+      mutex_type&  _M_device;\n+    };\n+#endif // C++17\n+\n #ifdef _GLIBCXX_HAS_GTHREADS\n   /// once_flag\n   struct once_flag"}, {"sha": "9f1b48c809a58fcc6876521ad4dad769183b669b", "filename": "libstdc++-v3/testsuite/30_threads/scoped_lock/cons/1.cc", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f620e1d5c84586f6e60bf5350946ea4a75154ff4/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fscoped_lock%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f620e1d5c84586f6e60bf5350946ea4a75154ff4/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fscoped_lock%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fscoped_lock%2Fcons%2F1.cc?ref=f620e1d5c84586f6e60bf5350946ea4a75154ff4", "patch": "@@ -0,0 +1,133 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run { target c++1z } }\n+// { dg-require-cstdint \"\" }\n+\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <mutex>\n+#include <testsuite_hooks.h>\n+\n+struct BasicLockable\n+{\n+  BasicLockable() : locked(false) { }\n+\n+  ~BasicLockable() noexcept(false)\n+  {\n+    if (locked)\n+      throw 0;\n+  }\n+\n+  void lock()\n+  {\n+    if (locked)\n+      throw 0;\n+    locked = true;\n+  }\n+\n+  void unlock()\n+  {\n+    if (!locked)\n+      throw 0;\n+    locked = false;\n+  }\n+\n+  bool locked;\n+};\n+\n+template<int>\n+struct Lockable\n+{\n+  BasicLockable m;\n+  void lock() { m.lock(); }\n+  void unlock() { m.unlock(); }\n+  bool try_lock() { if (m.locked) return false; m.lock(); return true; }\n+};\n+\n+void test01()\n+{\n+  BasicLockable m;\n+\n+  try\n+    {\n+      std::scoped_lock<BasicLockable> l(m);\n+      VERIFY( m.locked );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  VERIFY( !m.locked );\n+\n+  m.lock();\n+\n+  try\n+    {\n+      std::scoped_lock<BasicLockable> l(m, std::adopt_lock);\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  VERIFY( !m.locked );\n+}\n+\n+void test02()\n+{\n+  Lockable<1> m1;\n+  Lockable<2> m2;\n+\n+  try\n+    {\n+      std::scoped_lock<Lockable<1>, Lockable<2>> l(m1, m2);\n+      VERIFY( m1.m.locked );\n+      VERIFY( m2.m.locked );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  VERIFY( !m1.m.locked );\n+  VERIFY( !m2.m.locked );\n+\n+  m1.lock();\n+  m2.lock();\n+\n+  try\n+    {\n+      std::scoped_lock<Lockable<1>, Lockable<2>> l(m1, m2, std::adopt_lock);\n+      VERIFY( m1.m.locked );\n+      VERIFY( m2.m.locked );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  VERIFY( !m1.m.locked );\n+  VERIFY( !m2.m.locked );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "cbf10757f480d8f7bde707851172cce9f820a8c2", "filename": "libstdc++-v3/testsuite/30_threads/scoped_lock/requirements/explicit_instantiation.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f620e1d5c84586f6e60bf5350946ea4a75154ff4/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fscoped_lock%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f620e1d5c84586f6e60bf5350946ea4a75154ff4/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fscoped_lock%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fscoped_lock%2Frequirements%2Fexplicit_instantiation.cc?ref=f620e1d5c84586f6e60bf5350946ea4a75154ff4", "patch": "@@ -0,0 +1,33 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++1z } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+// NB: This file is for testing with NO OTHER INCLUDES.\n+\n+#include <mutex>\n+\n+namespace std\n+{\n+  template class scoped_lock<>;\n+  template class scoped_lock<mutex>;\n+  template class scoped_lock<recursive_mutex, mutex>;\n+}"}, {"sha": "55756d872623f1773ac8084a3e1253b303e4bf19", "filename": "libstdc++-v3/testsuite/30_threads/scoped_lock/requirements/typedefs.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f620e1d5c84586f6e60bf5350946ea4a75154ff4/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fscoped_lock%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f620e1d5c84586f6e60bf5350946ea4a75154ff4/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fscoped_lock%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fscoped_lock%2Frequirements%2Ftypedefs.cc?ref=f620e1d5c84586f6e60bf5350946ea4a75154ff4", "patch": "@@ -0,0 +1,33 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++1z } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+// NB: This file is for testing with NO OTHER INCLUDES.\n+\n+#include <mutex>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::scoped_lock<std::mutex> test_type;\n+  typedef test_type::mutex_type mutex_type;\n+}"}]}