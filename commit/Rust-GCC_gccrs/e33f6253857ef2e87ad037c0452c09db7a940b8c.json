{"sha": "e33f6253857ef2e87ad037c0452c09db7a940b8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTMzZjYyNTM4NTdlZjJlODdhZDAzN2MwNDUyYzA5ZGI3YTk0MGI4Yw==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-08-17T17:58:24Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-08-17T17:58:24Z"}, "message": "cppinit.c (path_include, [...]): Remove 2nd parameter (struct cpp_pending *).\n\n\t* cppinit.c (path_include, append_include_chain):\n\tRemove 2nd parameter (struct cpp_pending *).\n\t(path_include, initialize_standard_includes, cpp_handle_option):\n\tUpdate callers appropriately.\n\t(cpp_handle_option): Use pend.\n\nFrom-SVN: r35764", "tree": {"sha": "c0ce8868f9ebf996140b4de27d91e684e39e9fe0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0ce8868f9ebf996140b4de27d91e684e39e9fe0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e33f6253857ef2e87ad037c0452c09db7a940b8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e33f6253857ef2e87ad037c0452c09db7a940b8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e33f6253857ef2e87ad037c0452c09db7a940b8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e33f6253857ef2e87ad037c0452c09db7a940b8c/comments", "author": null, "committer": null, "parents": [{"sha": "c154ba66ef8560de3bee1ec17242cdaa5fe9e53c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c154ba66ef8560de3bee1ec17242cdaa5fe9e53c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c154ba66ef8560de3bee1ec17242cdaa5fe9e53c"}], "stats": {"total": 73, "additions": 33, "deletions": 40}, "files": [{"sha": "072c5acbea4e715cd233e1653dd8773909d2cd45", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e33f6253857ef2e87ad037c0452c09db7a940b8c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e33f6253857ef2e87ad037c0452c09db7a940b8c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e33f6253857ef2e87ad037c0452c09db7a940b8c", "patch": "@@ -1,3 +1,11 @@\n+2000-08-17  Neil Booth  <NeilB@earthling.net>\n+\n+\t* cppinit.c (path_include, append_include_chain):\n+\tRemove 2nd parameter (struct cpp_pending *).\n+\t(path_include, initialize_standard_includes, cpp_handle_option):\n+\tUpdate callers appropriately.\n+\t(cpp_handle_option): Use pend.\n+\n 2000-08-17  Neil Booth  <NeilB@earthling.net>\n \n \t* cppinit.c (sort_options): Remove, put functionality in"}, {"sha": "0cb90aba009171c1f8761f190844ca5e464d3b58", "filename": "gcc/cppinit.c", "status": "modified", "additions": 25, "deletions": 40, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e33f6253857ef2e87ad037c0452c09db7a940b8c/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e33f6253857ef2e87ad037c0452c09db7a940b8c/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=e33f6253857ef2e87ad037c0452c09db7a940b8c", "patch": "@@ -96,11 +96,9 @@ struct cpp_pending\n \n static void print_help                  PARAMS ((void));\n static void path_include\t\tPARAMS ((cpp_reader *,\n-\t\t\t\t\t\t struct cpp_pending *,\n \t\t\t\t\t\t char *, int));\n static void initialize_builtins\t\tPARAMS ((cpp_reader *));\n static void append_include_chain\tPARAMS ((cpp_reader *,\n-\t\t\t\t\t\t struct cpp_pending *,\n \t\t\t\t\t\t char *, int, int));\n static void merge_include_chains\tPARAMS ((cpp_reader *));\n \n@@ -173,9 +171,8 @@ END\n    add all the names to the search path for include files.  */\n \n static void\n-path_include (pfile, pend, list, path)\n+path_include (pfile, list, path)\n      cpp_reader *pfile;\n-     struct cpp_pending *pend;\n      char *list;\n      int path;\n {\n@@ -203,7 +200,7 @@ path_include (pfile, pend, list, path)\n \t  name[q - p] = 0;\n \t}\n \n-      append_include_chain (pfile, pend, name, path, 0);\n+      append_include_chain (pfile, name, path, 0);\n \n       /* Advance past this name.  */\n       if (*q == 0)\n@@ -216,13 +213,13 @@ path_include (pfile, pend, list, path)\n /* Append DIR to include path PATH.  DIR must be permanently allocated\n    and writable. */\n static void\n-append_include_chain (pfile, pend, dir, path, cxx_aware)\n+append_include_chain (pfile, dir, path, cxx_aware)\n      cpp_reader *pfile;\n-     struct cpp_pending *pend;\n      char *dir;\n      int path;\n      int cxx_aware;\n {\n+  struct cpp_pending *pend = CPP_OPTION (pfile, pending);\n   struct file_name_list *new;\n   struct stat st;\n   unsigned int len;\n@@ -693,7 +690,7 @@ initialize_standard_includes (pfile)\n \n   GET_ENV_PATH_LIST (path, \"CPATH\");\n   if (path != 0 && *path != 0)\n-    path_include (pfile, CPP_OPTION (pfile, pending), path, BRACKET);\n+    path_include (pfile, path, BRACKET);\n \n   switch ((CPP_OPTION (pfile, objc) << 1) + CPP_OPTION (pfile, cplusplus))\n     {\n@@ -711,7 +708,7 @@ initialize_standard_includes (pfile)\n       break;\n     }\n   if (path != 0 && *path != 0)\n-    path_include (pfile, CPP_OPTION (pfile, pending), path, SYSTEM);\n+    path_include (pfile, path, SYSTEM);\n \n   /* Search \"translated\" versions of GNU directories.\n      These have /usr/local/lib/gcc... replaced by specd_prefix.  */\n@@ -745,8 +742,7 @@ initialize_standard_includes (pfile)\n \t\t\t  p->fname + default_len,\n \t\t\t  flen - default_len + 1);\n \n-\t\t  append_include_chain (pfile, CPP_OPTION (pfile, pending),\n-\t\t\t\t\tstr, SYSTEM, p->cxx_aware);\n+\t\t  append_include_chain (pfile, str, SYSTEM, p->cxx_aware);\n \t\t}\n \t    }\n \t}\n@@ -762,8 +758,7 @@ initialize_standard_includes (pfile)\n \t{\n \t  /* XXX Potential memory leak! */\n \t  char *str = xstrdup (update_path (p->fname, p->component));\n-\t  append_include_chain (pfile, CPP_OPTION (pfile, pending),\n-\t\t\t\tstr, SYSTEM, p->cxx_aware);\n+\t  append_include_chain (pfile, str, SYSTEM, p->cxx_aware);\n \t}\n     }\n }\n@@ -1337,12 +1332,10 @@ cpp_handle_option (pfile, argc, argv)\n \t  CPP_OPTION (pfile, c99) = 1;\n \t  CPP_OPTION (pfile, digraphs) = 1;\n \t  CPP_OPTION (pfile, objc) = 0;\n-\t  new_pending_directive (CPP_OPTION (pfile, pending),\n-\t\t\t\t \"__STDC_VERSION__=199901L\", cpp_define);\n+\t  new_pending_directive (pend, \"__STDC_VERSION__=199901L\", cpp_define);\n \t  break;\n \tcase OPT_std_iso9899_199409:\n-\t  new_pending_directive (CPP_OPTION (pfile, pending),\n-\t\t\t\t \"__STDC_VERSION__=199409L\", cpp_define);\n+\t  new_pending_directive (pend, \"__STDC_VERSION__=199409L\", cpp_define);\n \t  /* Fall through */\n \tcase OPT_std_iso9899_1990:\n \tcase OPT_std_c89:\n@@ -1367,10 +1360,8 @@ cpp_handle_option (pfile, argc, argv)\n \t  CPP_OPTION (pfile, objc) = 0;\n \t  CPP_OPTION (pfile, digraphs) = 1;\n \t  CPP_OPTION (pfile, trigraphs) = 1;\n-\t  new_pending_directive (CPP_OPTION (pfile, pending),\n-\t\t\t\t \"__STRICT_ANSI__\", cpp_define);\n-\t  new_pending_directive (CPP_OPTION (pfile, pending),\n-\t\t\t\t \"__STDC_VERSION__=199901L\", cpp_define);\n+\t  new_pending_directive (pend, \"__STRICT_ANSI__\", cpp_define);\n+\t  new_pending_directive (pend, \"__STDC_VERSION__=199901L\", cpp_define);\n \t  break;\n \tcase OPT_o:\n \t  if (CPP_OPTION (pfile, out_fname) != NULL)\n@@ -1470,26 +1461,24 @@ cpp_handle_option (pfile, argc, argv)\n \t\t{\n \t\t  struct pending_option *o1, *o2;\n \n-\t\t  o1 = CPP_OPTION (pfile, pending)->directive_head;\n+\t\t  o1 = pend->directive_head;\n \t\t  while (o1)\n \t\t    {\n \t\t      o2 = o1->next;\n \t\t      free (o1);\n \t\t      o1 = o2;\n \t\t    }\n-\t\t  CPP_OPTION (pfile, pending)->directive_head = NULL;\n-\t\t  CPP_OPTION (pfile, pending)->directive_tail = NULL;\n+\t\t  pend->directive_head = NULL;\n+\t\t  pend->directive_tail = NULL;\n \t\t}\n \t      else\n-\t\tnew_pending_directive (CPP_OPTION (pfile, pending),\n-\t\t\t\t       arg + 1, cpp_unassert);\n+\t\tnew_pending_directive (pend, arg + 1, cpp_unassert);\n \t    }\n \t  else\n-\t    new_pending_directive (CPP_OPTION (pfile, pending),\n-\t\t\t\t   arg, cpp_assert);\n+\t    new_pending_directive (pend, arg, cpp_assert);\n \t  break;\n \tcase OPT_U:\n-\t  new_pending_directive (CPP_OPTION (pfile, pending), arg, cpp_undef);\n+\t  new_pending_directive (pend, arg, cpp_undef);\n \t  break;\n \tcase OPT_I:           /* Add directory to path for includes.  */\n \t  if (!strcmp (arg, \"-\"))\n@@ -1502,7 +1491,6 @@ cpp_handle_option (pfile, argc, argv)\n \t\t the default setup; -I. uses the compiler's working dir.)  */\n \t      if (! CPP_OPTION (pfile, ignore_srcdir))\n \t\t{\n-\t\t  struct cpp_pending *pend = CPP_OPTION (pfile, pending);\n \t\t  pend->quote_head = pend->brack_head;\n \t\t  pend->quote_tail = pend->brack_tail;\n \t\t  pend->brack_head = 0;\n@@ -1516,14 +1504,12 @@ cpp_handle_option (pfile, argc, argv)\n \t\t}\n  \t    }\n  \t  else\n-\t    append_include_chain (pfile, CPP_OPTION (pfile, pending),\n-\t\t\t\t  xstrdup (arg), BRACKET, 0);\n+\t    append_include_chain (pfile, xstrdup (arg), BRACKET, 0);\n \t  break;\n \tcase OPT_isystem:\n \t  /* Add directory to beginning of system include path, as a system\n \t     include directory. */\n-\t  append_include_chain (pfile, CPP_OPTION (pfile, pending),\n-\t\t\t\txstrdup (arg), SYSTEM, 0);\n+\t  append_include_chain (pfile, xstrdup (arg), SYSTEM, 0);\n \t  break;\n \tcase OPT_include:\n \t  {\n@@ -1534,8 +1520,8 @@ cpp_handle_option (pfile, argc, argv)\n \t    /* This list has to be built in reverse order so that\n \t       when cpp_start_read pushes all the -include files onto\n \t       the buffer stack, they will be scanned in forward order.  */\n-\t    o->next = CPP_OPTION (pfile, pending)->include_head;\n-\t    CPP_OPTION (pfile, pending)->include_head = o;\n+\t    o->next = pend->include_head;\n+\t    pend->include_head = o;\n \t  }\n \t  break;\n \tcase OPT_imacros:\n@@ -1545,7 +1531,7 @@ cpp_handle_option (pfile, argc, argv)\n \t    o->arg = arg;\n \t    o->next = NULL;\n \n-\t    APPEND (CPP_OPTION (pfile, pending), imacros, o);\n+\t    APPEND (pend, imacros, o);\n \t  }\n \t  break;\n \tcase OPT_iwithprefix:\n@@ -1577,14 +1563,13 @@ cpp_handle_option (pfile, argc, argv)\n \t    else\n \t      fname = xstrdup (arg);\n \n-\t    append_include_chain (pfile, CPP_OPTION (pfile, pending), fname,\n+\t    append_include_chain (pfile, fname,\n \t\t\t  opt_code == OPT_iwithprefix ? SYSTEM: BRACKET, 0);\n \t  }\n \t  break;\n \tcase OPT_idirafter:\n \t  /* Add directory to end of path for includes.  */\n-\t  append_include_chain (pfile, CPP_OPTION (pfile, pending),\n-\t\t\t\txstrdup (arg), AFTER, 0);\n+\t  append_include_chain (pfile, xstrdup (arg), AFTER, 0);\n \t  break;\n \tcase OPT_W:\n \t  /* Silently ignore unrecognised options */"}]}