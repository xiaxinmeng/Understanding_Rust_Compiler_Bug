{"sha": "6da0ede8b60b0357fffb968d77f31f8430f9994c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRhMGVkZThiNjBiMDM1N2ZmZmI5NjhkNzdmMzFmODQzMGY5OTk0Yw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-01-24T23:44:50Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-01-24T23:44:50Z"}, "message": "(move/push address patterns):\n\nDon't use alternative number to distinguish pushes from moves.\nUse just one alternative `g' in output constraint.\n\nFrom-SVN: r3320", "tree": {"sha": "3e08f26aba914689574954a1f97c0f5fbbb66fa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e08f26aba914689574954a1f97c0f5fbbb66fa0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6da0ede8b60b0357fffb968d77f31f8430f9994c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6da0ede8b60b0357fffb968d77f31f8430f9994c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6da0ede8b60b0357fffb968d77f31f8430f9994c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6da0ede8b60b0357fffb968d77f31f8430f9994c/comments", "author": null, "committer": null, "parents": [{"sha": "cde62d1aeca917245b36169fdc918ecbad246494", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cde62d1aeca917245b36169fdc918ecbad246494", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cde62d1aeca917245b36169fdc918ecbad246494"}], "stats": {"total": 87, "additions": 57, "deletions": 30}, "files": [{"sha": "885ace7fb843a8d24432720ec5730c9a9b6e574b", "filename": "gcc/config/vax/vax.md", "status": "modified", "additions": 57, "deletions": 30, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6da0ede8b60b0357fffb968d77f31f8430f9994c/gcc%2Fconfig%2Fvax%2Fvax.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6da0ede8b60b0357fffb968d77f31f8430f9994c/gcc%2Fconfig%2Fvax%2Fvax.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.md?ref=6da0ede8b60b0357fffb968d77f31f8430f9994c", "patch": "@@ -1926,53 +1926,80 @@\n ;; because we don't want pushl $1 turned into pushad 1.\n ;; or addl3 r1,r2,r3 turned into movab 0(r1)[r2],r3.\n \n+;; It does not work to use constraints to distinguish pushes from moves,\n+;; because < matches any autodecrement, not just a push.\n+\n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=<,g\")\n-\t(match_operand:QI 1 \"address_operand\" \"p,p\"))]\n+  [(set (match_operand:SI 0 \"general_operand\" \"=g\")\n+\t(match_operand:QI 1 \"address_operand\" \"p\"))]\n   \"\"\n-  \"@\n-   pushab %a1\n-   movab %a1,%0\")\n+  \"*\n+{\n+  if (push_operand (operands[0], SImode))\n+    return \\\"pushab %a1\\\";\n+  else\n+    return \\\"movab %a1,%0\\\";\n+}\")\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=<,g\")\n-\t(match_operand:HI 1 \"address_operand\" \"p,p\"))]\n+  [(set (match_operand:SI 0 \"general_operand\" \"=g\")\n+\t(match_operand:HI 1 \"address_operand\" \"p\"))]\n   \"\"\n-  \"@\n-   pushaw %a1\n-   movaw %a1,%0\")\n+  \"*\n+{\n+  if (push_operand (operands[0], SImode))\n+    return \\\"pushaw %a1\\\";\n+  else\n+    return \\\"movaw %a1,%0\\\";\n+}\")\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=<,g\")\n-\t(match_operand:SI 1 \"address_operand\" \"p,p\"))]\n+  [(set (match_operand:SI 0 \"general_operand\" \"=g\")\n+\t(match_operand:SI 1 \"address_operand\" \"p\"))]\n   \"\"\n-  \"@\n-   pushal %a1\n-   moval %a1,%0\")\n+  \"*\n+{\n+  if (push_operand (operands[0], SImode))\n+    return \\\"pushal %a1\\\";\n+  else\n+    return \\\"movabl %a1,%0\\\";\n+}\")\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=<,g\")\n-\t(match_operand:DI 1 \"address_operand\" \"p,p\"))]\n+  [(set (match_operand:SI 0 \"general_operand\" \"=g\")\n+\t(match_operand:DI 1 \"address_operand\" \"p\"))]\n   \"\"\n-  \"@\n-   pushaq %a1\n-   movaq %a1,%0\")\n+  \"*\n+{\n+  if (push_operand (operands[0], SImode))\n+    return \\\"pushaq %a1\\\";\n+  else\n+    return \\\"movaq %a1,%0\\\";\n+}\")\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=<,g\")\n-\t(match_operand:SF 1 \"address_operand\" \"p,p\"))]\n+  [(set (match_operand:SI 0 \"general_operand\" \"=g\")\n+\t(match_operand:SF 1 \"address_operand\" \"p\"))]\n   \"\"\n-  \"@\n-   pushaf %a1\n-   movaf %a1,%0\")\n+  \"*\n+{\n+  if (push_operand (operands[0], SImode))\n+    return \\\"pushaf %a1\\\";\n+  else\n+    return \\\"movaf %a1,%0\\\";\n+}\")\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=<,g\")\n-\t(match_operand:DF 1 \"address_operand\" \"p,p\"))]\n+  [(set (match_operand:SI 0 \"general_operand\" \"=g\")\n+\t(match_operand:DF 1 \"address_operand\" \"p\"))]\n   \"\"\n-  \"@\n-   pushad %a1\n-   movad %a1,%0\")\n+  \"*\n+{\n+  if (push_operand (operands[0], SImode))\n+    return \\\"pushad %a1\\\";\n+  else\n+    return \\\"movad %a1,%0\\\";\n+}\")\n \f\n ;; These used to be peepholes, but it is more straightforward to do them\n ;; as single insns.  However, we must force the output to be a register"}]}