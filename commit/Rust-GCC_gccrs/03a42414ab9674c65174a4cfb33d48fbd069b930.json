{"sha": "03a42414ab9674c65174a4cfb33d48fbd069b930", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNhNDI0MTRhYjk2NzRjNjUxNzRhNGNmYjMzZDQ4ZmJkMDY5YjkzMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2013-03-09T11:45:48Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-03-09T11:45:48Z"}, "message": "55463.cc: Avoid -Wunused warnings.\n\n2013-03-09  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* testsuite/20_util/function_objects/mem_fn/55463.cc: Avoid\n\t-Wunused warnings.\n\nFrom-SVN: r196572", "tree": {"sha": "8f9e044646b7a5aabcc79d1b082fd8a8528254e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f9e044646b7a5aabcc79d1b082fd8a8528254e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03a42414ab9674c65174a4cfb33d48fbd069b930", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03a42414ab9674c65174a4cfb33d48fbd069b930", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03a42414ab9674c65174a4cfb33d48fbd069b930", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03a42414ab9674c65174a4cfb33d48fbd069b930/comments", "author": null, "committer": null, "parents": [{"sha": "4b1baac81ff353bf0e3cea5c972a864db361355c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b1baac81ff353bf0e3cea5c972a864db361355c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b1baac81ff353bf0e3cea5c972a864db361355c"}], "stats": {"total": 95, "additions": 52, "deletions": 43}, "files": [{"sha": "c3b4924485dc0dbb166ed19bc89863b0688c4bbd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a42414ab9674c65174a4cfb33d48fbd069b930/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a42414ab9674c65174a4cfb33d48fbd069b930/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=03a42414ab9674c65174a4cfb33d48fbd069b930", "patch": "@@ -1,3 +1,8 @@\n+2013-03-09  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* testsuite/20_util/function_objects/mem_fn/55463.cc: Avoid\n+\t-Wunused warnings.\n+\n 2013-03-08  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/bits/memoryfwd.h: New. Centralize forward declarations."}, {"sha": "c6a6a4e6749157f2d26f71e7d0645ec75733d274", "filename": "libstdc++-v3/testsuite/20_util/function_objects/mem_fn/55463.cc", "status": "modified", "additions": 47, "deletions": 43, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a42414ab9674c65174a4cfb33d48fbd069b930/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fmem_fn%2F55463.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a42414ab9674c65174a4cfb33d48fbd069b930/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fmem_fn%2F55463.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fmem_fn%2F55463.cc?ref=03a42414ab9674c65174a4cfb33d48fbd069b930", "patch": "@@ -50,59 +50,63 @@ std::reference_wrapper<Y> yref();\n \n void test01()\n {\n-  int& i1 = std::mem_fn( &X::func )( X() );\n-  int& i2 = std::mem_fn( &X::func )( Y() );\n-  int& i3 = std::mem_fn( &X::func )( ref() );\n-  int& i4 = std::mem_fn( &X::func )( yref() );\n-  int& i5 = std::mem_fn( &X::func )( X_ptr() );\n-  int& i6 = std::mem_fn( &X::func )( smart_ptr() );\n-\n-  char& c1 = std::mem_fn( &X::func_c )( X() );\n-  char& c2 = std::mem_fn( &X::func_c )( CX() );\n-  char& c3 = std::mem_fn( &X::func_c )( Y() );\n-  char& c4 = std::mem_fn( &X::func_c )( ref() );\n-  char& c5 = std::mem_fn( &X::func_c )( cref() );\n-  char& c6 = std::mem_fn( &X::func_c )( yref() );\n-  char& c7 = std::mem_fn( &X::func_c )( X_ptr() );\n-  char& c8 = std::mem_fn( &X::func_c )( smart_ptr() );\n-\n-  short& s1 = std::mem_fn( &X::func_v )( X() );\n-  short& s2 = std::mem_fn( &X::func_v )( Y() );\n-  short& s3 = std::mem_fn( &X::func_v )( ref() );\n-  short& s4 = std::mem_fn( &X::func_v )( yref() );\n-  short& s5 = std::mem_fn( &X::func_v )( X_ptr() );\n-  short& s6 = std::mem_fn( &X::func_v )( smart_ptr() );\n-\n-  double& d1 = std::mem_fn( &X::func_cv )( X() );\n-  double& d2 = std::mem_fn( &X::func_cv )( CX() );\n-  double& d3 = std::mem_fn( &X::func_cv )( Y() );\n-  double& d4 = std::mem_fn( &X::func_cv )( ref() );\n-  double& d5 = std::mem_fn( &X::func_cv )( cref() );\n-  double& d6 = std::mem_fn( &X::func_cv )( yref() );\n-  double& d7 = std::mem_fn( &X::func_cv )( X_ptr() );\n-  double& d8 = std::mem_fn( &X::func_cv )( smart_ptr() );\n+  int& i1 __attribute__((unused)) = std::mem_fn( &X::func )( X() );\n+  int& i2 __attribute__((unused)) = std::mem_fn( &X::func )( Y() );\n+  int& i3 __attribute__((unused)) = std::mem_fn( &X::func )( ref() );\n+  int& i4 __attribute__((unused)) = std::mem_fn( &X::func )( yref() );\n+  int& i5 __attribute__((unused)) = std::mem_fn( &X::func )( X_ptr() );\n+  int& i6 __attribute__((unused)) = std::mem_fn( &X::func )( smart_ptr() );\n+\n+  char& c1 __attribute__((unused)) = std::mem_fn( &X::func_c )( X() );\n+  char& c2 __attribute__((unused)) = std::mem_fn( &X::func_c )( CX() );\n+  char& c3 __attribute__((unused)) = std::mem_fn( &X::func_c )( Y() );\n+  char& c4 __attribute__((unused)) = std::mem_fn( &X::func_c )( ref() );\n+  char& c5 __attribute__((unused)) = std::mem_fn( &X::func_c )( cref() );\n+  char& c6 __attribute__((unused)) = std::mem_fn( &X::func_c )( yref() );\n+  char& c7 __attribute__((unused)) = std::mem_fn( &X::func_c )( X_ptr() );\n+  char& c8 __attribute__((unused)) = std::mem_fn( &X::func_c )( smart_ptr() );\n+\n+  short& s1 __attribute__((unused)) = std::mem_fn( &X::func_v )( X() );\n+  short& s2 __attribute__((unused)) = std::mem_fn( &X::func_v )( Y() );\n+  short& s3 __attribute__((unused)) = std::mem_fn( &X::func_v )( ref() );\n+  short& s4 __attribute__((unused)) = std::mem_fn( &X::func_v )( yref() );\n+  short& s5 __attribute__((unused)) = std::mem_fn( &X::func_v )( X_ptr() );\n+  short& s6 __attribute__((unused)) = std::mem_fn( &X::func_v )( smart_ptr() );\n+\n+  double& d1 __attribute__((unused)) = std::mem_fn( &X::func_cv )( X() );\n+  double& d2 __attribute__((unused)) = std::mem_fn( &X::func_cv )( CX() );\n+  double& d3 __attribute__((unused)) = std::mem_fn( &X::func_cv )( Y() );\n+  double& d4 __attribute__((unused)) = std::mem_fn( &X::func_cv )( ref() );\n+  double& d5 __attribute__((unused)) = std::mem_fn( &X::func_cv )( cref() );\n+  double& d6 __attribute__((unused)) = std::mem_fn( &X::func_cv )( yref() );\n+  double& d7 __attribute__((unused)) = std::mem_fn( &X::func_cv )( X_ptr() );\n+  double& d8 __attribute__((unused))\n+    = std::mem_fn( &X::func_cv )( smart_ptr() );\n \n   // [expr.mptr.oper]\n   // The result of a .* expression whose second operand is a pointer to a\n   // data member is of the same value category (3.10) as its first operand.\n-  int&& rval = std::mem_fn( &X::data )( X() );\n-  const int&& crval = std::mem_fn( &X::data )( CX() );\n-  int&& yrval = std::mem_fn( &X::data )( Y() );\n-  const int&& ycrval = std::mem_fn( &X::data )( CY() );\n+  int&& rval __attribute__((unused)) = std::mem_fn( &X::data )( X() );\n+  const int&& crval __attribute__((unused)) = std::mem_fn( &X::data )( CX() );\n+  int&& yrval __attribute__((unused)) = std::mem_fn( &X::data )( Y() );\n+  const int&& ycrval __attribute__((unused)) = std::mem_fn( &X::data )( CY() );\n \n-  int& val = std::mem_fn( &X::data )( ref() );\n-  const int& cval = std::mem_fn( &X::data )( cref() );\n-  int& yval = std::mem_fn( &X::data )( yref() );\n+  int& val __attribute__((unused)) = std::mem_fn( &X::data )( ref() );\n+  const int& cval __attribute__((unused)) = std::mem_fn( &X::data )( cref() );\n+  int& yval __attribute__((unused)) = std::mem_fn( &X::data )( yref() );\n \n-  int& pval = std::mem_fn( &X::data )( X_ptr() );\n-  int& sval = std::mem_fn( &X::data )( smart_ptr() );\n+  int& pval __attribute__((unused)) = std::mem_fn( &X::data )( X_ptr() );\n+  int& sval __attribute__((unused)) = std::mem_fn( &X::data )( smart_ptr() );\n }\n \n void test02()\n {\n   std::reference_wrapper<X> r = ref();\n-  X& x1 = std::mem_fn( &std::reference_wrapper<X>::get )( r );\n+  X& x1 __attribute__((unused))\n+    = std::mem_fn( &std::reference_wrapper<X>::get )( r );\n   const std::reference_wrapper<X> cr = ref();\n-  const X& x3 = std::mem_fn( &std::reference_wrapper<X>::get )( cr );\n-  X& x2 = std::mem_fn( &std::reference_wrapper<X>::get )( ref() );\n+  const X& x3 __attribute__((unused))\n+    = std::mem_fn( &std::reference_wrapper<X>::get )( cr );\n+  X& x2 __attribute__((unused))\n+    = std::mem_fn( &std::reference_wrapper<X>::get )( ref() );\n }"}]}