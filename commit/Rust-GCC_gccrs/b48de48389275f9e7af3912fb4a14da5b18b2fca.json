{"sha": "b48de48389275f9e7af3912fb4a14da5b18b2fca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ4ZGU0ODM4OTI3NWY5ZTdhZjM5MTJmYjRhMTRkYTViMThiMmZjYQ==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2011-04-20T04:18:25Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2011-04-20T04:18:25Z"}, "message": "re PR libfortran/48602 (Invalid F conversion of G descriptor for values close to powers of 10)\n\n2011-04-19  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR libgfortran/48602\n\t* io/write_float.def (output_float_FMT_G): Fix reversal in conditional.\n\tUse asm volatile to mark temp variable, avoiding optimization errors.\n\nFrom-SVN: r172753", "tree": {"sha": "55c3d82aab4d8b0b766221097f191e427c637aa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55c3d82aab4d8b0b766221097f191e427c637aa1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b48de48389275f9e7af3912fb4a14da5b18b2fca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b48de48389275f9e7af3912fb4a14da5b18b2fca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b48de48389275f9e7af3912fb4a14da5b18b2fca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b48de48389275f9e7af3912fb4a14da5b18b2fca/comments", "author": null, "committer": null, "parents": [{"sha": "1a3118e962531f1a76397596f5448cc8e0b34b5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a3118e962531f1a76397596f5448cc8e0b34b5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a3118e962531f1a76397596f5448cc8e0b34b5f"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "205243e8181dc5cf99e46294ec372e48abc42567", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48de48389275f9e7af3912fb4a14da5b18b2fca/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48de48389275f9e7af3912fb4a14da5b18b2fca/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=b48de48389275f9e7af3912fb4a14da5b18b2fca", "patch": "@@ -1,3 +1,9 @@\n+2011-04-19  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libgfortran/48602\n+\t* io/write_float.def (output_float_FMT_G): Fix reversal in conditional.\n+\tUse asm volatile to mark temp variable, avoiding optimization errors.\n+\n 2011-04-17  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/48602"}, {"sha": "2bced6ffec405b3df6591a04ae0f1b3fcb45a922", "filename": "libgfortran/io/write_float.def", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48de48389275f9e7af3912fb4a14da5b18b2fca/libgfortran%2Fio%2Fwrite_float.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48de48389275f9e7af3912fb4a14da5b18b2fca/libgfortran%2Fio%2Fwrite_float.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite_float.def?ref=b48de48389275f9e7af3912fb4a14da5b18b2fca", "patch": "@@ -805,7 +805,8 @@ CALCULATE_EXP(16)\n \n    notes: for Gw.d ,  n' ' means 4 blanks\n \t  for Gw.dEe, n' ' means e+2 blanks\n-\t  for rounding modes adjustment, r, See Fortran F2008 10.7.5.2.2  */\n+\t  for rounding modes adjustment, r, See Fortran F2008 10.7.5.2.2\n+\t  the asm volatile is required for 32-bit x86 platforms.  */\n \n #define OUTPUT_FLOAT_FMT_G(x) \\\n static void \\\n@@ -830,7 +831,7 @@ output_float_FMT_G_ ## x (st_parameter_dt *dtp, const fnode *f, \\\n   switch (dtp->u.p.current_unit->round_status)\\\n     {\\\n       case ROUND_ZERO:\\\n-\tr = sign_bit ? 0.0 : 1.0;\\\n+\tr = sign_bit ? 1.0 : 0.0;\\\n \tbreak;\\\n       case ROUND_UP:\\\n \tr = 1.0;\\\n@@ -867,6 +868,7 @@ output_float_FMT_G_ ## x (st_parameter_dt *dtp, const fnode *f, \\\n       mid = (low + high) / 2;\\\n \\\n       temp = (calculate_exp_ ## x (mid - 1) * (1 - r * rexp_d));\\\n+      asm volatile (\"\" : \"+m\" (temp));\\\n \\\n       if (m < temp)\\\n         { \\"}]}