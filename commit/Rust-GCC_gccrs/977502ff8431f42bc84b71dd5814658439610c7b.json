{"sha": "977502ff8431f42bc84b71dd5814658439610c7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc3NTAyZmY4NDMxZjQyYmM4NGI3MWRkNTgxNDY1ODQzOTYxMGM3Yg==", "commit": {"author": {"name": "David Daney", "email": "ddaney@avtrex.com", "date": "2008-05-08T17:04:12Z"}, "committer": {"name": "David Daney", "email": "daney@gcc.gnu.org", "date": "2008-05-08T17:04:12Z"}, "message": "target-supports.exp (check_effective_target_sync_int_long): Add mips*-*-*.\n\n2008-05-08  David Daney  <ddaney@avtrex.com>\n\n\t* lib/target-supports.exp (check_effective_target_sync_int_long): Add\n\tmips*-*-*.\n\t(check_effective_target_sync_char_short): Same.\n\n\n2008-05-08  David Daney  <ddaney@avtrex.com>\n\t    Richard Sandiford  <rsandifo@nildram.co.uk>\n\t\n\t* config/mips/mips.md (mips_expand_compare_and_swap_12): Handle\n\tspecial case of constant zero operands.\n\t* config/mips/mips.c (mips_expand_compare_and_swap_12): Zero extend\n\told and\tnew values.  Special case constant zero values.\n\t* config/mips/mips.h (MIPS_COMPARE_AND_SWAP): Skip 'sync' if compare\n\tfails.\n\t(MIPS_COMPARE_AND_SWAP_12): Handle constant zero operands.\n\t(MIPS_COMPARE_AND_SWAP_12_0): New macro.\n\n\nCo-Authored-By: Richard Sandiford <rsandifo@nildram.co.uk>\n\nFrom-SVN: r135088", "tree": {"sha": "53a03c6f31da3208a923be513b8bab95fd23f140", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53a03c6f31da3208a923be513b8bab95fd23f140"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/977502ff8431f42bc84b71dd5814658439610c7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/977502ff8431f42bc84b71dd5814658439610c7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/977502ff8431f42bc84b71dd5814658439610c7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/977502ff8431f42bc84b71dd5814658439610c7b/comments", "author": null, "committer": null, "parents": [{"sha": "627ab8616cc19a4bed7ca2d4273e3dc85aab39b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/627ab8616cc19a4bed7ca2d4273e3dc85aab39b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/627ab8616cc19a4bed7ca2d4273e3dc85aab39b4"}], "stats": {"total": 94, "additions": 71, "deletions": 23}, "files": [{"sha": "ae8d7a9d19716a0277bb55326602b3deab1ee587", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/977502ff8431f42bc84b71dd5814658439610c7b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/977502ff8431f42bc84b71dd5814658439610c7b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=977502ff8431f42bc84b71dd5814658439610c7b", "patch": "@@ -1,3 +1,15 @@\n+2008-05-08  David Daney  <ddaney@avtrex.com>\n+\t    Richard Sandiford  <rsandifo@nildram.co.uk>\n+\t\n+\t* config/mips/mips.md (mips_expand_compare_and_swap_12): Handle\n+\tspecial case of constant zero operands.\n+\t* config/mips/mips.c (mips_expand_compare_and_swap_12): Zero extend\n+\told and\tnew values.  Special case constant zero values.\n+\t* config/mips/mips.h (MIPS_COMPARE_AND_SWAP): Skip 'sync' if compare\n+\tfails.\n+\t(MIPS_COMPARE_AND_SWAP_12): Handle constant zero operands.\n+\t(MIPS_COMPARE_AND_SWAP_12_0): New macro.\n+\n 2008-05-08  Paolo Bonzini  <bonzini@gnu.org>\n \n \tPR target/36090"}, {"sha": "218953385b3e8f6af01f9bae2a55cf72a4b4f540", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/977502ff8431f42bc84b71dd5814658439610c7b/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/977502ff8431f42bc84b71dd5814658439610c7b/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=977502ff8431f42bc84b71dd5814658439610c7b", "patch": "@@ -5880,7 +5880,10 @@ void\n mips_expand_compare_and_swap_12 (rtx result, rtx mem, rtx oldval, rtx newval)\n {\n   rtx orig_addr, memsi_addr, memsi, shift, shiftsi, unshifted_mask;\n-  rtx mask, inverted_mask, oldvalsi, old_shifted, newvalsi, new_shifted, res;\n+  rtx unshifted_mask_reg, mask, inverted_mask, res;\n+  enum machine_mode mode;\n+\n+  mode = GET_MODE (mem);\n \n   /* Compute the address of the containing SImode value.  */\n   orig_addr = force_reg (Pmode, XEXP (mem, 0));\n@@ -5896,8 +5899,7 @@ mips_expand_compare_and_swap_12 (rtx result, rtx mem, rtx oldval, rtx newval)\n      counting from the least significant byte.  */\n   shift = mips_force_binary (Pmode, AND, orig_addr, GEN_INT (3));\n   if (TARGET_BIG_ENDIAN)\n-    mips_emit_binary (XOR, shift, shift,\n-\t\t      GEN_INT (GET_MODE (mem) == QImode ? 3 : 2));\n+    mips_emit_binary (XOR, shift, shift, GEN_INT (mode == QImode ? 3 : 2));\n \n   /* Multiply by eight to convert the shift value from bytes to bits.  */\n   mips_emit_binary (ASHIFT, shift, shift, GEN_INT (3));\n@@ -5907,27 +5909,35 @@ mips_expand_compare_and_swap_12 (rtx result, rtx mem, rtx oldval, rtx newval)\n   shiftsi = force_reg (SImode, gen_lowpart (SImode, shift));\n \n   /* Set MASK to an inclusive mask of the QImode or HImode value.  */\n-  unshifted_mask = GEN_INT (GET_MODE_MASK (GET_MODE (mem)));\n-  unshifted_mask = force_reg (SImode, unshifted_mask);\n-  mask = mips_force_binary (SImode, ASHIFT, unshifted_mask, shiftsi);\n+  unshifted_mask = GEN_INT (GET_MODE_MASK (mode));\n+  unshifted_mask_reg = force_reg (SImode, unshifted_mask);\n+  mask = mips_force_binary (SImode, ASHIFT, unshifted_mask_reg, shiftsi);\n \n   /* Compute the equivalent exclusive mask.  */\n   inverted_mask = gen_reg_rtx (SImode);\n   emit_insn (gen_rtx_SET (VOIDmode, inverted_mask,\n \t\t\t  gen_rtx_NOT (SImode, mask)));\n \n   /* Shift the old value into place.  */\n-  oldvalsi = force_reg (SImode, gen_lowpart (SImode, oldval));\n-  old_shifted = mips_force_binary (SImode, ASHIFT, oldvalsi, shiftsi);\n+  if (oldval != const0_rtx)\n+    {\n+      oldval = convert_modes (SImode, mode, oldval, true);\n+      oldval = force_reg (SImode, oldval);\n+      oldval = mips_force_binary (SImode, ASHIFT, oldval, shiftsi);\n+    }\n \n   /* Do the same for the new value.  */\n-  newvalsi = force_reg (SImode, gen_lowpart (SImode, newval));\n-  new_shifted = mips_force_binary (SImode, ASHIFT, newvalsi, shiftsi);\n+  if (newval != const0_rtx)\n+    {\n+      newval = convert_modes (SImode, mode, newval, true);\n+      newval = force_reg (SImode, newval);\n+      newval = mips_force_binary (SImode, ASHIFT, newval, shiftsi);\n+    }\n \n   /* Do the SImode atomic access.  */\n   res = gen_reg_rtx (SImode);\n   emit_insn (gen_compare_and_swap_12 (res, memsi, mask, inverted_mask,\n-\t\t\t\t      old_shifted, new_shifted));\n+\t\t\t\t      oldval, newval));\n \n   /* Shift and convert the result.  */\n   mips_emit_binary (AND, res, res, mask);"}, {"sha": "9f59f1a2550c1cb6c90a71ec018d1bc658860ce9", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/977502ff8431f42bc84b71dd5814658439610c7b/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/977502ff8431f42bc84b71dd5814658439610c7b/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=977502ff8431f42bc84b71dd5814658439610c7b", "patch": "@@ -2902,7 +2902,8 @@ while (0)\n   \"\\tsc\" SUFFIX \"\\t%@,%1\\n\"\t\t\t\\\n   \"\\tbeq\\t%@,%.,1b\\n\"\t\t\t\t\\\n   \"\\tnop\\n\"\t\t\t\t\t\\\n-  \"2:\\tsync%-%]%>%)\"\n+  \"\\tsync%-%]%>%)\\n\"\t\t\t\t\\\n+  \"2:\\n\"\n \n /* Return an asm string that atomically:\n \n@@ -2919,7 +2920,7 @@ while (0)\n   \"%(%<%[%|sync\\n\"\t\t\t\t\\\n   \"1:\\tll\\t%0,%1\\n\"\t\t\t\t\\\n   \"\\tand\\t%@,%0,%2\\n\"\t\t\t\t\\\n-  \"\\tbne\\t%@,%4,2f\\n\"\t\t\t\t\\\n+  \"\\tbne\\t%@,%z4,2f\\n\"\t\t\t\t\\\n   \"\\tand\\t%@,%0,%3\\n\"\t\t\t\t\\\n   \"\\tor\\t%@,%@,%5\\n\"\t\t\t\t\\\n   \"\\tsc\\t%@,%1\\n\"\t\t\t\t\\\n@@ -2928,6 +2929,20 @@ while (0)\n   \"\\tsync%-%]%>%)\\n\"\t\t\t\t\\\n   \"2:\\n\"\n \n+/* Like MIPS_COMPARE_AND_SWAP_12, except %5 is a constant zero,\n+   so the OR can be omitted.  */\n+#define MIPS_COMPARE_AND_SWAP_12_0\t\t\\\n+  \"%(%<%[%|sync\\n\"\t\t\t\t\\\n+  \"1:\\tll\\t%0,%1\\n\"\t\t\t\t\\\n+  \"\\tand\\t%@,%0,%2\\n\"\t\t\t\t\\\n+  \"\\tbne\\t%@,%z4,2f\\n\"\t\t\t\t\\\n+  \"\\tand\\t%@,%0,%3\\n\"\t\t\t\t\\\n+  \"\\tsc\\t%@,%1\\n\"\t\t\t\t\\\n+  \"\\tbeq\\t%@,%.,1b\\n\"\t\t\t\t\\\n+  \"\\tnop\\n\"\t\t\t\t\t\\\n+  \"\\tsync%-%]%>%)\\n\"\t\t\t\t\\\n+  \"2:\\n\"\n+\n /* Return an asm string that atomically:\n \n      - Sets memory reference %0 to %0 INSN %1."}, {"sha": "a423529b3308c5491e0a97caa3d747ff81ec4349", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/977502ff8431f42bc84b71dd5814658439610c7b/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/977502ff8431f42bc84b71dd5814658439610c7b/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=977502ff8431f42bc84b71dd5814658439610c7b", "patch": "@@ -4462,19 +4462,22 @@\n \n ;; Helper insn for mips_expand_compare_and_swap_12.\n (define_insn \"compare_and_swap_12\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=&d\")\n-\t(match_operand:SI 1 \"memory_operand\" \"+R\"))\n+  [(set (match_operand:SI 0 \"register_operand\" \"=&d,&d\")\n+\t(match_operand:SI 1 \"memory_operand\" \"+R,R\"))\n    (set (match_dup 1)\n-\t(unspec_volatile:SI [(match_operand:SI 2 \"register_operand\" \"d\")\n-\t\t\t     (match_operand:SI 3 \"register_operand\" \"d\")\n-\t\t\t     (match_operand:SI 4 \"register_operand\" \"d\")\n-\t\t\t     (match_operand:SI 5 \"register_operand\" \"d\")]\n+\t(unspec_volatile:SI [(match_operand:SI 2 \"register_operand\" \"d,d\")\n+\t\t\t     (match_operand:SI 3 \"register_operand\" \"d,d\")\n+\t\t\t     (match_operand:SI 4 \"reg_or_0_operand\" \"dJ,dJ\")\n+\t\t\t     (match_operand:SI 5 \"reg_or_0_operand\" \"d,J\")]\n \t\t\t    UNSPEC_COMPARE_AND_SWAP_12))]\n   \"GENERATE_LL_SC\"\n {\n-  return MIPS_COMPARE_AND_SWAP_12;\n+  if (which_alternative == 0)\n+    return MIPS_COMPARE_AND_SWAP_12;\n+  else\n+    return MIPS_COMPARE_AND_SWAP_12_0;\n }\n-  [(set_attr \"length\" \"40\")])\n+  [(set_attr \"length\" \"40,36\")])\n \n (define_insn \"sync_add<mode>\"\n   [(set (match_operand:GPR 0 \"memory_operand\" \"+R,R\")"}, {"sha": "ff5d2cc92ffbbfaf0c64acc925f4e921a7a4d1b1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/977502ff8431f42bc84b71dd5814658439610c7b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/977502ff8431f42bc84b71dd5814658439610c7b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=977502ff8431f42bc84b71dd5814658439610c7b", "patch": "@@ -1,3 +1,9 @@\n+2008-05-08  David Daney  <ddaney@avtrex.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_sync_int_long): Add\n+\tmips*-*-*.\n+\t(check_effective_target_sync_char_short): Same.\n+\n 2008-05-08  Kai Tietz  <kai.tietz@onevision.com>\n \n \t* gcc.c-torture/compile/pr36172.c: Replace unsigned long by"}, {"sha": "150a217ea6cb5e3824da98356034e81e60dfab9a", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/977502ff8431f42bc84b71dd5814658439610c7b/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/977502ff8431f42bc84b71dd5814658439610c7b/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=977502ff8431f42bc84b71dd5814658439610c7b", "patch": "@@ -2052,7 +2052,8 @@ proc check_effective_target_sync_int_long { } {\n \t     || [istarget s390*-*-*] \n \t     || [istarget powerpc*-*-*]\n \t     || [istarget sparc64-*-*]\n-\t     || [istarget sparcv9-*-*] } {\n+\t     || [istarget sparcv9-*-*]\n+\t     || [istarget mips*-*-*] } {\n            set et_sync_int_long_saved 1\n         }\n     }\n@@ -2079,7 +2080,8 @@ proc check_effective_target_sync_char_short { } {\n \t     || [istarget s390*-*-*] \n \t     || [istarget powerpc*-*-*]\n \t     || [istarget sparc64-*-*]\n-\t     || [istarget sparcv9-*-*] } {\n+\t     || [istarget sparcv9-*-*]\n+\t     || [istarget mips*-*-*] } {\n            set et_sync_char_short_saved 1\n         }\n     }"}]}