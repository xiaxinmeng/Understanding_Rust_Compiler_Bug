{"sha": "bc3c12a29c67753c473b465767b2ba6b2f7e72a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmMzYzEyYTI5YzY3NzUzYzQ3M2I0NjU3NjdiMmJhNmIyZjdlNzJhNg==", "commit": {"author": {"name": "Eric Fisher", "email": "joefoxreal@gmail.com", "date": "2010-01-05T12:30:30Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-01-05T12:30:30Z"}, "message": "invoke.texi: Remove the documentation about option -Wunreachable-code.\n\n2010-01-05  Eric Fisher  <joefoxreal@gmail.com>\n\n\t* doc/invoke.texi: Remove the documentation about option\n\t-Wunreachable-code.\n\t* common.opt (Wunreachable-code):  Preserved for backward\n\tcompatibility.\n\t* tree-cfg.c: Remove the implementation of -Wunreachable-code.\n\t* opts.c (common_handle_option): Add OPT_Wunreachable_code to\n\tthe backward compatibility flag section.\n\n\t* gcc.dg/pr12603.c: Remove -Wunreachable-code from dg-options.\n\t* gcc.dg/Wunreachable-1.c: Remove the testcase of\n\t-Wunreachable-code.\n\t* gcc.dg/Wunreachable-2.c: Likewise.\n\t* gcc.dg/Wunreachable-3.c: Likewise.\n\t* gcc.dg/Wunreachable-4.c: Likewise.\n\t* gcc.dg/Wunreachable-5.c: Likewise.\n\t* gcc.dg/Wunreachable-6.c: Likewise.\n\t* gcc.dg/Wunreachable-7.c: Likewise.\n\t* gcc.dg/Wunreachable-8.c: Likewise.\n\t* gcc.dg/20041231-1.c: Likewise.\n\nFrom-SVN: r155645", "tree": {"sha": "589de603d5bb2de5f913adb4dcd7e403d6b4dc07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/589de603d5bb2de5f913adb4dcd7e403d6b4dc07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc3c12a29c67753c473b465767b2ba6b2f7e72a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc3c12a29c67753c473b465767b2ba6b2f7e72a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc3c12a29c67753c473b465767b2ba6b2f7e72a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc3c12a29c67753c473b465767b2ba6b2f7e72a6/comments", "author": null, "committer": null, "parents": [{"sha": "4ebf9c376342d1cb69f1aefddc2db5d2fe950248", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ebf9c376342d1cb69f1aefddc2db5d2fe950248", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ebf9c376342d1cb69f1aefddc2db5d2fe950248"}], "stats": {"total": 238, "additions": 29, "deletions": 209}, "files": [{"sha": "db624b919e9ac155bba2fdc6c44d6ecdfe017b48", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc3c12a29c67753c473b465767b2ba6b2f7e72a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc3c12a29c67753c473b465767b2ba6b2f7e72a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bc3c12a29c67753c473b465767b2ba6b2f7e72a6", "patch": "@@ -1,3 +1,13 @@\n+2010-01-05  Eric Fisher  <joefoxreal@gmail.com>\n+\n+\t* doc/invoke.texi: Remove the documentation about option\n+\t-Wunreachable-code.\n+\t* common.opt (Wunreachable-code):  Preserved for backward\n+\tcompatibility.\n+\t* tree-cfg.c: Remove the implementation of -Wunreachable-code.\n+\t* opts.c (common_handle_option): Add OPT_Wunreachable_code to\n+\tthe backward compatibility flag section.\n+\n 2010-01-05  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-pre.c (bitmap_value_insert_into_set): Optimize."}, {"sha": "8e8ed7620052bab0fb835108bb7335bf2d2d77aa", "filename": "gcc/common.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc3c12a29c67753c473b465767b2ba6b2f7e72a6/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc3c12a29c67753c473b465767b2ba6b2f7e72a6/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=bc3c12a29c67753c473b465767b2ba6b2f7e72a6", "patch": "@@ -201,8 +201,8 @@ Common Var(warn_uninitialized) Init(-1) Warning\n Warn about uninitialized automatic variables\n \n Wunreachable-code\n-Common Var(warn_notreached) Warning\n-Warn about code that will never be executed\n+Common\n+Does nothing. Preserved for backward compatibility.\n \n Wunused\n Common Var(warn_unused) Init(0) Warning"}, {"sha": "5022c4a80db9aa8b084f3de4a3a487f27d33ada0", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc3c12a29c67753c473b465767b2ba6b2f7e72a6/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc3c12a29c67753c473b465767b2ba6b2f7e72a6/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=bc3c12a29c67753c473b465767b2ba6b2f7e72a6", "patch": "@@ -259,7 +259,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wstrict-overflow -Wstrict-overflow=@var{n} @gol\n -Wswitch  -Wswitch-default  -Wswitch-enum -Wsync-nand @gol\n -Wsystem-headers  -Wtrigraphs  -Wtype-limits  -Wundef  -Wuninitialized @gol\n--Wunknown-pragmas  -Wno-pragmas -Wunreachable-code @gol\n+-Wunknown-pragmas  -Wno-pragmas @gol\n -Wunsuffixed-float-constants  -Wunused  -Wunused-function @gol\n -Wunused-label  -Wunused-parameter -Wno-unused-result -Wunused-value  -Wunused-variable @gol\n -Wvariadic-macros -Wvla @gol\n@@ -4192,29 +4192,6 @@ cases where multiple declaration is valid and changes nothing.\n @opindex Wno-nested-externs\n Warn if an @code{extern} declaration is encountered within a function.\n \n-@item -Wunreachable-code\n-@opindex Wunreachable-code\n-@opindex Wno-unreachable-code\n-Warn if the compiler detects that code will never be executed.\n-\n-This option is intended to warn when the compiler detects that at\n-least a whole line of source code will never be executed, because\n-some condition is never satisfied or because it is after a\n-procedure that never returns.\n-\n-It is possible for this option to produce a warning even though there\n-are circumstances under which part of the affected line can be executed,\n-so care should be taken when removing apparently-unreachable code.\n-\n-For instance, when a function is inlined, a warning may mean that the\n-line is unreachable in only one inlined copy of the function.\n-\n-This option is not made part of @option{-Wall} because in a debugging\n-version of a program there is often substantial code which checks\n-correct functioning of the program and is, hopefully, unreachable\n-because the program does work.  Another common use of unreachable\n-code is to provide behavior which is selectable at compile-time.\n-\n @item -Winline\n @opindex Winline\n @opindex Wno-inline"}, {"sha": "501deae6ea7a1832089cfa0107fe8205ef139a68", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc3c12a29c67753c473b465767b2ba6b2f7e72a6/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc3c12a29c67753c473b465767b2ba6b2f7e72a6/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=bc3c12a29c67753c473b465767b2ba6b2f7e72a6", "patch": "@@ -2131,6 +2131,7 @@ common_handle_option (size_t scode, const char *arg, int value,\n     case OPT_fforce_addr:\n     case OPT_ftree_salias:\n     case OPT_ftree_store_ccp:\n+    case OPT_Wunreachable_code:\n       /* These are no-ops, preserved for backward compatibility.  */\n       break;\n "}, {"sha": "42eb680f7efc9cf5dc86035ceed2220018ae6a1a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc3c12a29c67753c473b465767b2ba6b2f7e72a6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc3c12a29c67753c473b465767b2ba6b2f7e72a6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bc3c12a29c67753c473b465767b2ba6b2f7e72a6", "patch": "@@ -1,3 +1,17 @@\n+2010-01-05  Eric Fisher  <joefoxreal@gmail.com>\n+\n+\t* gcc.dg/pr12603.c: Remove -Wunreachable-code from dg-options.\n+\t* gcc.dg/Wunreachable-1.c: Remove the testcase of\n+\t-Wunreachable-code.\n+\t* gcc.dg/Wunreachable-2.c: Likewise.\n+\t* gcc.dg/Wunreachable-3.c: Likewise.\n+\t* gcc.dg/Wunreachable-4.c: Likewise.\n+\t* gcc.dg/Wunreachable-5.c: Likewise.\n+\t* gcc.dg/Wunreachable-6.c: Likewise.\n+\t* gcc.dg/Wunreachable-7.c: Likewise.\n+\t* gcc.dg/Wunreachable-8.c: Likewise.\n+\t* gcc.dg/20041231-1.c: Likewise.\n+\n 2010-01-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR other/42611"}, {"sha": "37c9fe04a1f899965735fdccdbf9f51544086e0e", "filename": "gcc/testsuite/gcc.dg/20041231-1.c", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ebf9c376342d1cb69f1aefddc2db5d2fe950248/gcc%2Ftestsuite%2Fgcc.dg%2F20041231-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ebf9c376342d1cb69f1aefddc2db5d2fe950248/gcc%2Ftestsuite%2Fgcc.dg%2F20041231-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20041231-1.c?ref=4ebf9c376342d1cb69f1aefddc2db5d2fe950248", "patch": "@@ -1,15 +0,0 @@\n-/* PR17544 Incorrect -Wunreachable-code warning\n-   Origin: Giovanni Bajo\n-\n-   In C99 we append a \"return 0;\" when finishing a function, but it was\n-   not given a source location.  The gimplifier thinks a return statement\n-   needs a locus so it would add one, making the compiler generated code\n-   visible to the unreachable code warning.  */\n-\n-/* { dg-do compile } */\n-/* { dg-options \"-std=c99 -O -Wunreachable-code\" } */\n-\n-int main (void)    // 1\n-{                  // 2\n-  return 0;        // 3\n-}                  // 4"}, {"sha": "d6d59b481aaca261f5b17da179c6878b894a2ccf", "filename": "gcc/testsuite/gcc.dg/Wunreachable-1.c", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ebf9c376342d1cb69f1aefddc2db5d2fe950248/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ebf9c376342d1cb69f1aefddc2db5d2fe950248/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-1.c?ref=4ebf9c376342d1cb69f1aefddc2db5d2fe950248", "patch": "@@ -1,24 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -Wunreachable-code\" } */\n-\n-extern void foo (void);\n-extern void baz (void);\n-\n-void bar (int i)\n-{\n-  if (i < 2)\n-    {\n-      baz ();\n-      return;\n-    }\n-  else\n-    {\n-      if (i >= 4 && i <= 5)\n-        foo ();\n-      return;\n-    }\n-\n-  baz ();\t/* { dg-warning \"will never be executed\" \"\" } */\n-  baz ();\n-  baz ();\n-}"}, {"sha": "55a8f9cca01fd80ed0b6a3b3d93e30e2f1ee6a8d", "filename": "gcc/testsuite/gcc.dg/Wunreachable-2.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ebf9c376342d1cb69f1aefddc2db5d2fe950248/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ebf9c376342d1cb69f1aefddc2db5d2fe950248/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-2.c?ref=4ebf9c376342d1cb69f1aefddc2db5d2fe950248", "patch": "@@ -1,19 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -Wunreachable-code\" } */\n-\n-extern int foo (const char *);\n-extern void baz (void);\n-const char *a[] = { \"one\", \"two\" };\n-\n-void bar (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < 2; i++)  /* { dg-bogus \"will never be executed\" \"\" { xfail *-*-* } } */\n-    if (! foo (a[i]))  /* { dg-bogus \"will never be executed\" \"\" { xfail *-*-* } } */\n-      return;\n-\n-  baz ();\t/* { dg-bogus \"will never be executed\" } */\n-  baz ();\n-  baz ();\n-}"}, {"sha": "966d89e3abc7f1cabc494b0050baac8f09ff1193", "filename": "gcc/testsuite/gcc.dg/Wunreachable-3.c", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ebf9c376342d1cb69f1aefddc2db5d2fe950248/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ebf9c376342d1cb69f1aefddc2db5d2fe950248/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-3.c?ref=4ebf9c376342d1cb69f1aefddc2db5d2fe950248", "patch": "@@ -1,17 +0,0 @@\n-/* PR c/10175 */\n-/* { dg-do compile } */\n-/* { dg-options \"-Wunreachable-code\" } */\n-\n-int i,j;\n-int main(void)\n-{\n-  if (0) {\n-    i = 0;\t\t   /* { dg-warning \"will never be executed\" \"\" } */\n-    j = 0;\n-  } else {\n-    i = 1;\n-    j = 1;\n-  }\n-\n-  return 0;\n-}"}, {"sha": "38ae6f808c949b364a4fcc4798dc2cec3b889d86", "filename": "gcc/testsuite/gcc.dg/Wunreachable-4.c", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ebf9c376342d1cb69f1aefddc2db5d2fe950248/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ebf9c376342d1cb69f1aefddc2db5d2fe950248/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-4.c?ref=4ebf9c376342d1cb69f1aefddc2db5d2fe950248", "patch": "@@ -1,12 +0,0 @@\n-/* PR middle-end/10336 */\n-/* { dg-options \"-Wunreachable-code\" } */\n-\n-void foo(int i)\n-{\n-  switch(i) {\n-    case 0:\n-      break;\n-    case 1:\n-      break;\n-  }\n-}"}, {"sha": "11dc3204da1178b4c93b911d085112abc9c94ab5", "filename": "gcc/testsuite/gcc.dg/Wunreachable-5.c", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ebf9c376342d1cb69f1aefddc2db5d2fe950248/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ebf9c376342d1cb69f1aefddc2db5d2fe950248/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-5.c?ref=4ebf9c376342d1cb69f1aefddc2db5d2fe950248", "patch": "@@ -1,17 +0,0 @@\n-/* PR c/10175 */\n-\n-/* { dg-do compile } */\n-/* { dg-options \"-Wunreachable-code\" } */\n-\n-int value;\n-\n-int main(void)\n-{\n-    if (0)\n-        value = 0;  /* { dg-warning \"will never be executed\" \"\" } */\n-    else\n-        value = 1;\n-\n-    return 0;\n-}\n-"}, {"sha": "6aac7aab205d201ae99c9da3d65545c366bea85e", "filename": "gcc/testsuite/gcc.dg/Wunreachable-6.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ebf9c376342d1cb69f1aefddc2db5d2fe950248/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ebf9c376342d1cb69f1aefddc2db5d2fe950248/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-6.c?ref=4ebf9c376342d1cb69f1aefddc2db5d2fe950248", "patch": "@@ -1,21 +0,0 @@\n-/* PR c/11370  */\n-/* { dg-do compile } */\n-/* { dg-options \"-Wunreachable-code\" } */\n-\n-extern int printf (const char *, ...);\n-extern void exit (int);\n-\n-int main(int argc, char *argv[])\n-{\n-  if (argc != 1)\n-    exit(1);\n-\n-  {\n-    int ix;  /* { dg-bogus \"will never be executed\" } */\n-    ix = printf(\"hello\\n\");\n-    printf(\"%d\\n\", ix);\n-  }\n-\n-  return 0;\n-}\n-"}, {"sha": "9a4d411be22c96d5f36ca267f35af0dc46f1ca60", "filename": "gcc/testsuite/gcc.dg/Wunreachable-7.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ebf9c376342d1cb69f1aefddc2db5d2fe950248/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ebf9c376342d1cb69f1aefddc2db5d2fe950248/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-7.c?ref=4ebf9c376342d1cb69f1aefddc2db5d2fe950248", "patch": "@@ -1,21 +0,0 @@\n-/* PR c/11370  */\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -Wunreachable-code\" } */\n-\n-extern int printf (const char *, ...);\n-extern void exit (int);\n-\n-int main(int argc, char *argv[])\n-{\n-  if (argc != 1)\n-    exit(1);\n-\n-  {\n-    int ix;  /* { dg-bogus \"will never be executed\" } */\n-    ix = printf(\"hello\\n\");\n-    printf(\"%d\\n\", ix);\n-  }\n-\n-  return 0;\n-}\n-"}, {"sha": "1a13d64243e9930800df3ed5929ac1f65229d93d", "filename": "gcc/testsuite/gcc.dg/Wunreachable-8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ebf9c376342d1cb69f1aefddc2db5d2fe950248/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ebf9c376342d1cb69f1aefddc2db5d2fe950248/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-8.c?ref=4ebf9c376342d1cb69f1aefddc2db5d2fe950248", "patch": "@@ -1,20 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -Wunreachable-code\" } */\n-float Factorial(float X)\n-{\n-  float val = 1.0;\n-  int k,j;\n-  for (k=1; k < 5; k++) /* { dg-bogus \"will never be executed\" \"\" { xfail *-*-* } } */\n-    {\n-      val += 1.0; /* { dg-bogus \"will never be executed\" \"\" { xfail *-*-* } } */\n-    }\n-  return (val); /* { dg-bogus \"will never be executed\" } */\n-}\n-\n-int main (void)\n-{\n-  float result;\n-  result=Factorial(2.1);\n-  return (0);\n-}\n-"}, {"sha": "f7caef28416c5a2c7271ca12f0fca069f4e1c85c", "filename": "gcc/testsuite/gcc.dg/pr12603.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc3c12a29c67753c473b465767b2ba6b2f7e72a6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr12603.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc3c12a29c67753c473b465767b2ba6b2f7e72a6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr12603.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr12603.c?ref=bc3c12a29c67753c473b465767b2ba6b2f7e72a6", "patch": "@@ -1,6 +1,6 @@\n /* PR 12603: No return statement warning on function that never returns with -O3. */\n /* { dg-do compile } */\n-/* { dg-options \"-O3 -Wall -Wextra -Wreturn-type -Wunreachable-code\" } */\n+/* { dg-options \"-O3 -Wall -Wextra -Wreturn-type\" } */\n int\n this_function_never_returns ()\n {"}, {"sha": "2eb3cd2d79cdfcd1aedb860ca4f53c11f6605e90", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc3c12a29c67753c473b465767b2ba6b2f7e72a6/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc3c12a29c67753c473b465767b2ba6b2f7e72a6/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=bc3c12a29c67753c473b465767b2ba6b2f7e72a6", "patch": "@@ -1760,7 +1760,6 @@ static void\n remove_bb (basic_block bb)\n {\n   gimple_stmt_iterator i;\n-  source_location loc = UNKNOWN_LOCATION;\n \n   if (dump_file)\n     {\n@@ -1830,24 +1829,9 @@ remove_bb (basic_block bb)\n \t    i = gsi_last_bb (bb);\n \t  else\n \t    gsi_prev (&i);\n-\n-\t  /* Don't warn for removed gotos.  Gotos are often removed due to\n-\t     jump threading, thus resulting in bogus warnings.  Not great,\n-\t     since this way we lose warnings for gotos in the original\n-\t     program that are indeed unreachable.  */\n-\t  if (gimple_code (stmt) != GIMPLE_GOTO\n-\t      && gimple_has_location (stmt))\n-\t    loc = gimple_location (stmt);\n \t}\n     }\n \n-  /* If requested, give a warning that the first statement in the\n-     block is unreachable.  We walk statements backwards in the\n-     loop above, so the last statement we process is the first statement\n-     in the block.  */\n-  if (loc > BUILTINS_LOCATION && LOCATION_LINE (loc) > 0)\n-    warning_at (loc, OPT_Wunreachable_code, \"will never be executed\");\n-\n   remove_phi_nodes_and_edges_for_unreachable_block (bb);\n   bb->il.gimple = NULL;\n }"}]}