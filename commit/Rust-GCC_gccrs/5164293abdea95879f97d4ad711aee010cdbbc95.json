{"sha": "5164293abdea95879f97d4ad711aee010cdbbc95", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE2NDI5M2FiZGVhOTU4NzlmOTdkNGFkNzExYWVlMDEwY2RiYmM5NQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-08-21T07:21:33Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-08-21T07:21:33Z"}, "message": "tree-ssa-loop-im.c (struct lim_aux_data): Add ref index member.\n\n2017-08-21  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-loop-im.c (struct lim_aux_data): Add ref index member.\n\t(mem_ref_in_stmt): Remove.\n\t(determine_max_movement): Use ref index to get at the reference.\n\t(invariantness_dom_walker::before_dom_children): Deal with\n\tlim data already initialized.\n\t(gather_mem_refs_stmt): Initialize lim data and record ref index.\n\nFrom-SVN: r251216", "tree": {"sha": "e10a98ed0df4323ffa945d5f25c690c0e4c065fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e10a98ed0df4323ffa945d5f25c690c0e4c065fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5164293abdea95879f97d4ad711aee010cdbbc95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5164293abdea95879f97d4ad711aee010cdbbc95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5164293abdea95879f97d4ad711aee010cdbbc95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5164293abdea95879f97d4ad711aee010cdbbc95/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8bd81a41a678d9c10540572de6249e8c7c4840cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bd81a41a678d9c10540572de6249e8c7c4840cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bd81a41a678d9c10540572de6249e8c7c4840cd"}], "stats": {"total": 68, "additions": 30, "deletions": 38}, "files": [{"sha": "f4f12e072c8ea7cc3ac58d14d3f1609fab8bc171", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5164293abdea95879f97d4ad711aee010cdbbc95/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5164293abdea95879f97d4ad711aee010cdbbc95/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5164293abdea95879f97d4ad711aee010cdbbc95", "patch": "@@ -1,3 +1,12 @@\n+2017-08-21  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-loop-im.c (struct lim_aux_data): Add ref index member.\n+\t(mem_ref_in_stmt): Remove.\n+\t(determine_max_movement): Use ref index to get at the reference.\n+\t(invariantness_dom_walker::before_dom_children): Deal with\n+\tlim data already initialized.\n+\t(gather_mem_refs_stmt): Initialize lim data and record ref index.\n+\n 2017-08-19  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.h (OPTION_MASK_ISA_ROUND): Remove."}, {"sha": "503e662452c1bc5877ce0bb1f0390d574704db1a", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 21, "deletions": 38, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5164293abdea95879f97d4ad711aee010cdbbc95/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5164293abdea95879f97d4ad711aee010cdbbc95/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=5164293abdea95879f97d4ad711aee010cdbbc95", "patch": "@@ -86,7 +86,9 @@ struct lim_aux_data\n   unsigned cost;\t\t/* Cost of the computation performed by the\n \t\t\t\t   statement.  */\n \n-  vec<gimple *> depends;\t\t/* Vector of statements that must be also\n+  unsigned ref;\t\t\t/* The simple_mem_ref in this stmt or 0.  */\n+\n+  vec<gimple *> depends;\t/* Vector of statements that must be also\n \t\t\t\t   hoisted out of the loop when this statement\n \t\t\t\t   is hoisted; i.e. those that define the\n \t\t\t\t   operands of the statement and are inside of\n@@ -586,27 +588,6 @@ simple_mem_ref_in_stmt (gimple *stmt, bool *is_store)\n     return NULL;\n }\n \n-/* Returns the memory reference contained in STMT.  */\n-\n-static im_mem_ref *\n-mem_ref_in_stmt (gimple *stmt)\n-{\n-  bool store;\n-  tree *mem = simple_mem_ref_in_stmt (stmt, &store);\n-  hashval_t hash;\n-  im_mem_ref *ref;\n-\n-  if (!mem)\n-    return NULL;\n-  gcc_assert (!store);\n-\n-  hash = iterative_hash_expr (*mem, 0);\n-  ref = memory_accesses.refs->find_with_hash (*mem, hash);\n-\n-  gcc_assert (ref != NULL);\n-  return ref;\n-}\n-\n /* From a controlling predicate in DOM determine the arguments from\n    the PHI node PHI that are chosen if the predicate evaluates to\n    true and false and store them to *TRUE_ARG_P and *FALSE_ARG_P if\n@@ -747,23 +728,18 @@ determine_max_movement (gimple *stmt, bool must_preserve_exec)\n \n   if (gimple_vuse (stmt))\n     {\n-      im_mem_ref *ref = mem_ref_in_stmt (stmt);\n-\n-      if (ref)\n+      im_mem_ref *ref\n+\t= lim_data ? memory_accesses.refs_list[lim_data->ref] : NULL;\n+      if (ref\n+\t  && MEM_ANALYZABLE (ref))\n \t{\n-\t  lim_data->max_loop\n-\t\t  = outermost_indep_loop (lim_data->max_loop, loop, ref);\n+\t  lim_data->max_loop = outermost_indep_loop (lim_data->max_loop,\n+\t\t\t\t\t\t     loop, ref);\n \t  if (!lim_data->max_loop)\n \t    return false;\n \t}\n-      else\n-\t{\n-\t  if ((val = gimple_vuse (stmt)) != NULL_TREE)\n-\t    {\n-\t      if (!add_dependency (val, lim_data, loop, false))\n-\t\treturn false;\n-\t    }\n-\t}\n+      else if (! add_dependency (gimple_vuse (stmt), lim_data, loop, false))\n+\treturn false;\n     }\n \n   lim_data->cost += stmt_cost (stmt);\n@@ -1000,7 +976,9 @@ invariantness_dom_walker::before_dom_children (basic_block bb)\n \tif (pos == MOVE_IMPOSSIBLE)\n \t  continue;\n \n-\tlim_data = init_lim_data (stmt);\n+\tlim_data = get_lim_data (stmt);\n+\tif (! lim_data)\n+\t  lim_data = init_lim_data (stmt);\n \tlim_data->always_executed_in = outermost;\n \n \tif (!determine_max_movement (stmt, false))\n@@ -1037,7 +1015,9 @@ invariantness_dom_walker::before_dom_children (basic_block bb)\n \t     store-motion work.  */\n \t  else if (stmt_makes_single_store (stmt))\n \t    {\n-\t      struct lim_aux_data *lim_data = init_lim_data (stmt);\n+\t      struct lim_aux_data *lim_data = get_lim_data (stmt);\n+\t      if (! lim_data)\n+\t\tlim_data = init_lim_data (stmt);\n \t      lim_data->always_executed_in = outermost;\n \t    }\n \t  continue;\n@@ -1073,7 +1053,9 @@ invariantness_dom_walker::before_dom_children (basic_block bb)\n \t    stmt = rewrite_bittest (&bsi);\n \t}\n \n-      lim_data = init_lim_data (stmt);\n+      lim_data = get_lim_data (stmt);\n+      if (! lim_data)\n+\tlim_data = init_lim_data (stmt);\n       lim_data->always_executed_in = outermost;\n \n       if (maybe_never && pos == MOVE_PRESERVE_EXECUTION)\n@@ -1498,6 +1480,7 @@ gather_mem_refs_stmt (struct loop *loop, gimple *stmt)\n       bitmap_set_bit (&memory_accesses.refs_stored_in_loop[loop->num], ref->id);\n       mark_ref_stored (ref, loop);\n     }\n+  init_lim_data (stmt)->ref = ref->id;\n   return;\n }\n "}]}