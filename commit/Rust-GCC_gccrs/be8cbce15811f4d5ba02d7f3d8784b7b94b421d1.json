{"sha": "be8cbce15811f4d5ba02d7f3d8784b7b94b421d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU4Y2JjZTE1ODExZjRkNWJhMDJkN2YzZDg3ODRiN2I5NGI0MjFkMQ==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-07-30T06:46:36Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-07-30T06:46:36Z"}, "message": "re PR target/51244 ([SH] Inefficient conditional branch and code around T bit)\n\n\tPR target/51244\n\t* config/sh/sh.md (mov_neg_si_t): Move to Scc instructions section.\n\tUse t_reg_operand predicate.  Add split for negated case.\n\t(ashrsi2_31): Pass get_t_reg_rtx to gen_mov_neg_si_t.\n\t* config/sh/sh.c (expand_ashiftrt): Likewise.\n\n\tPR target/51244\n\t* gcc.target/sh/pr51244-4.c: New.\n\nFrom-SVN: r189953", "tree": {"sha": "9cea2b0f80a42a70613848e3f11ac4a857ab77d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cea2b0f80a42a70613848e3f11ac4a857ab77d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be8cbce15811f4d5ba02d7f3d8784b7b94b421d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be8cbce15811f4d5ba02d7f3d8784b7b94b421d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be8cbce15811f4d5ba02d7f3d8784b7b94b421d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be8cbce15811f4d5ba02d7f3d8784b7b94b421d1/comments", "author": null, "committer": null, "parents": [{"sha": "be82afe609f07d51a1d57fecbd1daf1882528f4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be82afe609f07d51a1d57fecbd1daf1882528f4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be82afe609f07d51a1d57fecbd1daf1882528f4c"}], "stats": {"total": 64, "additions": 53, "deletions": 11}, "files": [{"sha": "4252084a25113d2542515007bb7c6f7ed6054dcf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be8cbce15811f4d5ba02d7f3d8784b7b94b421d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be8cbce15811f4d5ba02d7f3d8784b7b94b421d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=be8cbce15811f4d5ba02d7f3d8784b7b94b421d1", "patch": "@@ -1,3 +1,11 @@\n+2012-07-30  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/51244\n+\t* config/sh/sh.md (mov_neg_si_t): Move to Scc instructions section.\n+\tUse t_reg_operand predicate.  Add split for negated case.\n+\t(ashrsi2_31): Pass get_t_reg_rtx to gen_mov_neg_si_t.\n+\t* config/sh/sh.c (expand_ashiftrt): Likewise.\n+\n 2012-07-30  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/54089"}, {"sha": "88497c78eaae687dde07180b21b257abd08dfa7b", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be8cbce15811f4d5ba02d7f3d8784b7b94b421d1/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be8cbce15811f4d5ba02d7f3d8784b7b94b421d1/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=be8cbce15811f4d5ba02d7f3d8784b7b94b421d1", "patch": "@@ -3481,7 +3481,7 @@ expand_ashiftrt (rtx *operands)\n \t{\n \t  emit_insn (gen_cmpgtsi_t (force_reg (SImode, CONST0_RTX (SImode)),\n \t\t\t\t    operands[1]));\n-\t  emit_insn (gen_mov_neg_si_t (operands[0]));\n+\t  emit_insn (gen_mov_neg_si_t (operands[0], get_t_reg_rtx ()));\n \t  return true;\n \t}\n       emit_insn (gen_ashrsi2_31 (operands[0], operands[1]));"}, {"sha": "6382238383d4085ef90fcdabc4b3b6b140fa381c", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be8cbce15811f4d5ba02d7f3d8784b7b94b421d1/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be8cbce15811f4d5ba02d7f3d8784b7b94b421d1/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=be8cbce15811f4d5ba02d7f3d8784b7b94b421d1", "patch": "@@ -1584,15 +1584,6 @@\n   \"subc\t%2,%0\"\n   [(set_attr \"type\" \"arith\")])\n \n-;; life_analysis thinks rn is live before subc rn,rn, so make a special\n-;; pattern for this case.  This helps multimedia applications that compute\n-;; the sum of absolute differences.\n-(define_insn \"mov_neg_si_t\"\n-  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\") (neg:SI (reg:SI T_REG)))]\n-  \"TARGET_SH1\"\n-  \"subc\t%0,%0\"\n-  [(set_attr \"type\" \"arith\")])\n-\n (define_insn \"*subsi3_internal\"\n   [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n \t(minus:SI (match_operand:SI 1 \"arith_reg_operand\" \"0\")\n@@ -3802,7 +3793,7 @@ label:\n   [(const_int 0)]\n {\n   emit_insn (gen_ashlsi_c (operands[0], operands[1]));\n-  emit_insn (gen_mov_neg_si_t (copy_rtx (operands[0])));\n+  emit_insn (gen_mov_neg_si_t (operands[0], get_t_reg_rtx ()));\n   DONE;\n })\n \n@@ -9709,6 +9700,25 @@ label:\n   \"\"\n   [(const_int 0)])\n \n+;; Store T bit as all zeros or ones in a reg.\n+(define_insn \"mov_neg_si_t\"\n+  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n+\t(neg:SI (match_operand 1 \"t_reg_operand\" \"\")))]\n+  \"TARGET_SH1\"\n+  \"subc\t%0,%0\"\n+  [(set_attr \"type\" \"arith\")])\n+\n+;; Store negated T bit as all zeros or ones in a reg.\n+;; Use the following sequence:\n+;; \tsubc\tRn,Rn\t! Rn = Rn - Rn - T; T = T\n+;;\tnot\tRn,Rn\t! Rn = 0 - Rn\n+(define_split\n+  [(set (match_operand:SI 0 \"arith_reg_dest\" \"\")\n+\t(neg:SI (match_operand 1 \"negt_reg_operand\" \"\")))]\n+  \"TARGET_SH1\"\n+  [(set (match_dup 0) (neg:SI (reg:SI T_REG)))\n+   (set (match_dup 0) (not:SI (match_dup 0)))])\n+\n ;; The *movtt pattern eliminates redundant T bit to T bit moves / tests.\n (define_insn_and_split \"*movtt\"\n   [(set (reg:SI T_REG)"}, {"sha": "74af9650230cb234a51c7e0404f5f86f12861acf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be8cbce15811f4d5ba02d7f3d8784b7b94b421d1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be8cbce15811f4d5ba02d7f3d8784b7b94b421d1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=be8cbce15811f4d5ba02d7f3d8784b7b94b421d1", "patch": "@@ -1,3 +1,8 @@\n+2012-07-30  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/51244\n+\t* gcc.target/sh/pr51244-4.c: New.\n+\n 2012-07-27  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gfortran.dg/bind_c_array_params_2.f90: Add \"-mno-explicit-relocs\""}, {"sha": "f3073780aeafadbbf6825610b567bcbdd5e2f2a1", "filename": "gcc/testsuite/gcc.target/sh/pr51244-4.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be8cbce15811f4d5ba02d7f3d8784b7b94b421d1/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be8cbce15811f4d5ba02d7f3d8784b7b94b421d1/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-4.c?ref=be8cbce15811f4d5ba02d7f3d8784b7b94b421d1", "patch": "@@ -0,0 +1,19 @@\n+/* Check that storing the (negated) T bit as all ones or zeros in a reg\n+   uses the subc instruction.  On SH2A a sequence with the movrt instruction\n+   is also OK instead of subc.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O1 -mbranch-cost=2\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } } */\n+/* { dg-final { scan-assembler-not \"movt|tst|negc\" } } */\n+/* { dg-final { scan-assembler \"subc|movrt|neg|not\" } } */\n+\n+int test_00 (int x, int y)\n+{\n+  return x != y ? -1 : 0;\n+}\n+\n+int test_01 (int x, int y)\n+{\n+  return x == y ? -1 : 0;\n+}\n+"}]}