{"sha": "1820137ba624d7eb2004a10f9632498b6bc1696a", "node_id": "C_kwDOANBUbNoAKDE4MjAxMzdiYTYyNGQ3ZWIyMDA0YTEwZjk2MzI0OThiNmJjMTY5NmE", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-12-30T13:23:18Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-12-30T13:23:18Z"}, "message": "shrink-wrapping: Fix up prologue block discovery [PR103860]\n\nThe following testcase is miscompiled, because a prologue which\ncontains subq $8, %rsp instruction is emitted at the start of\na basic block which contains conditional jump that depends on\nflags register set in an earlier basic block, the prologue instruction\nthen clobbers those flags.\nNormally this case is checked by can_get_prologue predicate, but this\nis done only at the start of the loop.  If we update pro later in the\nloop (because some bb shouldn't be duplicated) and then don't push\nanything further into vec and the vec is already empty (this can happen\nwhen the new pro is already in bb_with bitmask and either has no successors\n(that is the case in the testcase where that bb ends with a trap) or\nall the successors are already in bb_with, then the loop doesn't iterate\nfurther and can_get_prologue will not be checked.\n\nThe following simple patch makes sure we call can_get_prologue even after\nthe last former iteration when vec is already empty and only break from\nthe loop afterwards (and only if the updating of pro done because of\n!can_get_prologue didn't push anything into vec again).\n\n2021-12-30  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR rtl-optimization/103860\n\t* shrink-wrap.c (try_shrink_wrapping): Make sure can_get_prologue is\n\tcalled on pro even if nothing further is pushed into vec.\n\n\t* gcc.dg/pr103860.c: New test.", "tree": {"sha": "6d2a1df65f5e6cd7a89fb102c5638b70894db414", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d2a1df65f5e6cd7a89fb102c5638b70894db414"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1820137ba624d7eb2004a10f9632498b6bc1696a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1820137ba624d7eb2004a10f9632498b6bc1696a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1820137ba624d7eb2004a10f9632498b6bc1696a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1820137ba624d7eb2004a10f9632498b6bc1696a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc1969dab392661cdac1170bbb8c9f83f388580d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc1969dab392661cdac1170bbb8c9f83f388580d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc1969dab392661cdac1170bbb8c9f83f388580d"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "35149ecd84c65487f1afdae056e5d68b486c2542", "filename": "gcc/shrink-wrap.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1820137ba624d7eb2004a10f9632498b6bc1696a/gcc%2Fshrink-wrap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1820137ba624d7eb2004a10f9632498b6bc1696a/gcc%2Fshrink-wrap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fshrink-wrap.c?ref=1820137ba624d7eb2004a10f9632498b6bc1696a", "patch": "@@ -781,7 +781,7 @@ try_shrink_wrapping (edge *entry_edge, rtx_insn *prologue_seq)\n   unsigned max_grow_size = get_uncond_jump_length ();\n   max_grow_size *= param_max_grow_copy_bb_insns;\n \n-  while (!vec.is_empty () && pro != entry)\n+  while (pro != entry)\n     {\n       while (pro != entry && !can_get_prologue (pro, prologue_clobbered))\n \t{\n@@ -791,6 +791,9 @@ try_shrink_wrapping (edge *entry_edge, rtx_insn *prologue_seq)\n \t    vec.quick_push (pro);\n \t}\n \n+      if (vec.is_empty ())\n+\tbreak;\n+\n       basic_block bb = vec.pop ();\n       if (!can_dup_for_shrink_wrapping (bb, pro, max_grow_size))\n \twhile (!dominated_by_p (CDI_DOMINATORS, bb, pro))"}, {"sha": "15eee558083dfe9b3f781be4592d5419f3f2f99f", "filename": "gcc/testsuite/gcc.dg/pr103860.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1820137ba624d7eb2004a10f9632498b6bc1696a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103860.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1820137ba624d7eb2004a10f9632498b6bc1696a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103860.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103860.c?ref=1820137ba624d7eb2004a10f9632498b6bc1696a", "patch": "@@ -0,0 +1,31 @@\n+/* PR rtl-optimization/103860 */\n+/* { dg-do run } */\n+/* { dg-options \"-O3\" } */\n+/* { dg-additional-options \"-fPIC\" { target fpic } } */\n+\n+static int d, *e;\n+int f;\n+\n+__attribute__((noinline)) signed char\n+foo (signed char b, signed char c)\n+{\n+  return b + c;\n+}\n+\n+int\n+main ()\n+{\n+  signed char l;\n+  for (l = -1; l; l = foo (l, 1))\n+    {\n+      while (d < 0)\n+\t;\n+      if (d > 0)\n+\t{\n+\t  f = 0;\n+\t  *e = 0;\n+\t}\n+    }\n+  d = 0;\n+  return 0;\n+}"}]}