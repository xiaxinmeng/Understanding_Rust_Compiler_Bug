{"sha": "2b99bed8443f97550962e6e994b7395534a38e0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI5OWJlZDg0NDNmOTc1NTA5NjJlNmU5OTRiNzM5NTUzNGEzOGUwYw==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2019-12-06T17:28:28Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@gcc.gnu.org", "date": "2019-12-06T17:28:28Z"}, "message": "Enable QI/HImode vector moves\n\n2019-12-06  Andrew Stubbs  <ams@codesourcery.com>\n\n\tgcc/\n\t* config/gcn/gcn-valu.md (VEC_1REG_MODE): Remove V64QI and V64HI.\n\t(VEC_1REG_ALT): Likewise.\n\t(VEC_ALL1REG_MODE): New mode iterator.\n\t(VEC_1REG_INT_MODE): Remove V64QI and V64HI.\n\t(VEC_1REG_INT_ALT): Likewise.\n\t(VEC_ALL1REG_INT_MODE): New mode interator.\n\t(VEC_ALL1REG_INT_ALT): Likewise.\n\t(VEC_REG_MODE): Remove V64QI and V64HI.\n\t(VEC_ALLREG_MODE): New mode interator.\n\t(vec_merge): Change to VEC_ALLREG_MODE.\n\t(vec_merge_with_clobber): Likewise.\n\t(vec_merge_with_vcc): Likewise.\n\t(mov<mode>): Likewise.\n\t(mov<mode>_unspec): Likewise.\n\t(*mov<mode>): Change to VEC_ALL1REG_MODE.\n\t(mov<mode>_exec): Likewise.\n\t(*mov<mode>_exec_match): Likewise.\n\t(mov<mode>_sgprbase): Likewise.\n\t(reload_in<mode>): Change to VEC_ALLREG_MODE.\n\t(reload_out<mode>): Likewise.\n\t(scalar address splits): Likewise.\n\t(*vec_set<mode>): Change to VEC_ALL1REG_MODE.\n\t(vec_set<mode>): Change to VEC_ALLREG_MODE.\n\t(*vec_set<mode>_1): Change to VEC_ALL1REG_MODE.\n\t(vec_duplicate<mode><exec>): Likewise.\n\t(vec_extract<mode><scalar_mode>): Likewise.\n\t(vec_init<mode><scalar_mode>): Change to VEC_ALLREG_MODE.\n\t(gather_load<mode>): Likewise.\n\t(gather<mode>_exec): Likewise.\n\t(gather<mode>_expr<exec>): Likewise.\n\t(gather<mode>_insn_1offset<exec>): Likewise.\n\t(gather<mode>_insn_1offset_ds<exec>): Likewise.\n\t(gather<mode>_insn_2offsets<exec>): Likewise.\n\t(ds_bpermute<mode>): Change to VEC_ALL1REG_MODE.\n\t(VEC_INT_MODE): Remove V64QI and V64HI.\n\t(vcond_mask_<mode>di): Change to VEC_ALLREG_MODE.\n\t(vcond<VEC_1REG_MODE:mode><VEC_1REG_ALT:mode>): Change to\n\tVEC_ALL1REG_MODE.\n\t(vcond<VEC_1REG_MODE:mode><VEC_1REG_ALT:mode>_exec): Likewise.\n\t(vcondu<VEC_1REG_MODE:mode><VEC_1REG_INT_ALT:mode>): Likewise.\n\t(vcondu<VEC_1REG_MODE:mode><VEC_1REG_INT_ALT:mode>_exec): Likewise.\n\t(maskload<mode>di): Change to VEC_ALL1REG_MODE.\n\t(maskstore<mode>di): Likewise.\n\t(mask_gather_load<mode>): Likewise.\n\t(mov_from_lane63_<mode>): Likewise.\n\t* config/gcn/gcn.c (gcn_vector_mode_supported_p): Renable V64QImode\n\tand V64HImode vectorization.\n\t(gcn_related_vector_mode): New function.\n\t(TARGET_VECTORIZE_RELATED_MODE): New define.\n\nFrom-SVN: r279053", "tree": {"sha": "3177fb3a4756e0625b01011c031de15a030a71c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3177fb3a4756e0625b01011c031de15a030a71c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b99bed8443f97550962e6e994b7395534a38e0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b99bed8443f97550962e6e994b7395534a38e0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b99bed8443f97550962e6e994b7395534a38e0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b99bed8443f97550962e6e994b7395534a38e0c/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2297a38e0c18eaec95bebf750855fb9a4026ffbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2297a38e0c18eaec95bebf750855fb9a4026ffbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2297a38e0c18eaec95bebf750855fb9a4026ffbf"}], "stats": {"total": 345, "additions": 214, "deletions": 131}, "files": [{"sha": "7ece55f5d4bd0451caf201e4d740cbc15818cddd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b99bed8443f97550962e6e994b7395534a38e0c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b99bed8443f97550962e6e994b7395534a38e0c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2b99bed8443f97550962e6e994b7395534a38e0c", "patch": "@@ -1,3 +1,55 @@\n+2019-12-06  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn-valu.md (VEC_1REG_MODE): Remove V64QI and V64HI.\n+\t(VEC_1REG_ALT): Likewise.\n+\t(VEC_ALL1REG_MODE): New mode iterator.\n+\t(VEC_1REG_INT_MODE): Remove V64QI and V64HI.\n+\t(VEC_1REG_INT_ALT): Likewise.\n+\t(VEC_ALL1REG_INT_MODE): New mode interator.\n+\t(VEC_ALL1REG_INT_ALT): Likewise.\n+\t(VEC_REG_MODE): Remove V64QI and V64HI.\n+\t(VEC_ALLREG_MODE): New mode interator.\n+\t(vec_merge): Change to VEC_ALLREG_MODE.\n+\t(vec_merge_with_clobber): Likewise.\n+\t(vec_merge_with_vcc): Likewise.\n+\t(mov<mode>): Likewise.\n+\t(mov<mode>_unspec): Likewise.\n+\t(*mov<mode>): Change to VEC_ALL1REG_MODE.\n+\t(mov<mode>_exec): Likewise.\n+\t(*mov<mode>_exec_match): Likewise.\n+\t(mov<mode>_sgprbase): Likewise.\n+\t(reload_in<mode>): Change to VEC_ALLREG_MODE.\n+\t(reload_out<mode>): Likewise.\n+\t(scalar address splits): Likewise.\n+\t(*vec_set<mode>): Change to VEC_ALL1REG_MODE.\n+\t(vec_set<mode>): Change to VEC_ALLREG_MODE.\n+\t(*vec_set<mode>_1): Change to VEC_ALL1REG_MODE.\n+\t(vec_duplicate<mode><exec>): Likewise.\n+\t(vec_extract<mode><scalar_mode>): Likewise.\n+\t(vec_init<mode><scalar_mode>): Change to VEC_ALLREG_MODE.\n+\t(gather_load<mode>): Likewise.\n+\t(gather<mode>_exec): Likewise.\n+\t(gather<mode>_expr<exec>): Likewise.\n+\t(gather<mode>_insn_1offset<exec>): Likewise.\n+\t(gather<mode>_insn_1offset_ds<exec>): Likewise.\n+\t(gather<mode>_insn_2offsets<exec>): Likewise.\n+\t(ds_bpermute<mode>): Change to VEC_ALL1REG_MODE.\n+\t(VEC_INT_MODE): Remove V64QI and V64HI.\n+\t(vcond_mask_<mode>di): Change to VEC_ALLREG_MODE.\n+\t(vcond<VEC_1REG_MODE:mode><VEC_1REG_ALT:mode>): Change to\n+\tVEC_ALL1REG_MODE.\n+\t(vcond<VEC_1REG_MODE:mode><VEC_1REG_ALT:mode>_exec): Likewise.\n+\t(vcondu<VEC_1REG_MODE:mode><VEC_1REG_INT_ALT:mode>): Likewise.\n+\t(vcondu<VEC_1REG_MODE:mode><VEC_1REG_INT_ALT:mode>_exec): Likewise.\n+\t(maskload<mode>di): Change to VEC_ALL1REG_MODE.\n+\t(maskstore<mode>di): Likewise.\n+\t(mask_gather_load<mode>): Likewise.\n+\t(mov_from_lane63_<mode>): Likewise.\n+\t* config/gcn/gcn.c (gcn_vector_mode_supported_p): Renable V64QImode\n+\tand V64HImode vectorization.\n+\t(gcn_related_vector_mode): New function.\n+\t(TARGET_VECTORIZE_RELATED_MODE): New define.\n+\n 2019-12-06  Tobias Burnus  <tobias@codesourcery.com>\n \t    Kwok Cheung Yeung  <kcy@codesourcery.com>\n "}, {"sha": "90f0dcf310636c9cf578ae62849b0194a059d7d3", "filename": "gcc/config/gcn/gcn-valu.md", "status": "modified", "additions": 139, "deletions": 125, "changes": 264, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b99bed8443f97550962e6e994b7395534a38e0c/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b99bed8443f97550962e6e994b7395534a38e0c/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md?ref=2b99bed8443f97550962e6e994b7395534a38e0c", "patch": "@@ -18,13 +18,19 @@\n \n ; Vector modes for one vector register\n (define_mode_iterator VEC_1REG_MODE\n-\t\t      [V64QI V64HI V64SI V64HF V64SF])\n+\t\t      [V64SI V64HF V64SF])\n (define_mode_iterator VEC_1REG_ALT\n+\t\t      [V64SI V64HF V64SF])\n+(define_mode_iterator VEC_ALL1REG_MODE\n \t\t      [V64QI V64HI V64SI V64HF V64SF])\n \n (define_mode_iterator VEC_1REG_INT_MODE\n-\t\t      [V64QI V64HI V64SI])\n+\t\t      [V64SI])\n (define_mode_iterator VEC_1REG_INT_ALT\n+\t\t      [V64SI])\n+(define_mode_iterator VEC_ALL1REG_INT_MODE\n+\t\t      [V64QI V64HI V64SI])\n+(define_mode_iterator VEC_ALL1REG_INT_ALT\n \t\t      [V64QI V64HI V64SI])\n \n ; Vector modes for two vector registers\n@@ -33,6 +39,9 @@\n \n ; All of above\n (define_mode_iterator VEC_REG_MODE\n+\t\t      [V64SI V64HF V64SF\t        ; Single reg\n+\t\t       V64DI V64DF])\t\t        ; Double reg\n+(define_mode_iterator VEC_ALLREG_MODE\n \t\t      [V64QI V64HI V64SI V64HF V64SF    ; Single reg\n \t\t       V64DI V64DF])\t\t        ; Double reg\n \n@@ -57,38 +66,40 @@\n \t\t   \"\" \"_exec\")\n \n (define_subst \"vec_merge\"\n-  [(set (match_operand:VEC_REG_MODE 0)\n-\t(match_operand:VEC_REG_MODE 1))]\n+  [(set (match_operand:VEC_ALLREG_MODE 0)\n+\t(match_operand:VEC_ALLREG_MODE 1))]\n   \"\"\n   [(set (match_dup 0)\n-\t(vec_merge:VEC_REG_MODE\n+\t(vec_merge:VEC_ALLREG_MODE\n \t  (match_dup 1)\n-\t  (match_operand:VEC_REG_MODE 3 \"gcn_register_or_unspec_operand\" \"U0\")\n+\t  (match_operand:VEC_ALLREG_MODE 3\n+\t\t\t\t\t \"gcn_register_or_unspec_operand\" \"U0\")\n \t  (match_operand:DI 4 \"gcn_exec_reg_operand\" \"e\")))])\n \n (define_subst \"vec_merge_with_clobber\"\n-  [(set (match_operand:VEC_REG_MODE 0)\n-\t(match_operand:VEC_REG_MODE 1))\n+  [(set (match_operand:VEC_ALLREG_MODE 0)\n+\t(match_operand:VEC_ALLREG_MODE 1))\n    (clobber (match_operand 2))]\n   \"\"\n   [(set (match_dup 0)\n-\t(vec_merge:VEC_REG_MODE\n+\t(vec_merge:VEC_ALLREG_MODE\n \t  (match_dup 1)\n-\t  (match_operand:VEC_REG_MODE 3 \"gcn_register_or_unspec_operand\" \"U0\")\n+\t  (match_operand:VEC_ALLREG_MODE 3\n+\t\t\t\t\t \"gcn_register_or_unspec_operand\" \"U0\")\n \t  (match_operand:DI 4 \"gcn_exec_reg_operand\" \"e\")))\n    (clobber (match_dup 2))])\n \n (define_subst \"vec_merge_with_vcc\"\n-  [(set (match_operand:VEC_REG_MODE 0)\n-\t(match_operand:VEC_REG_MODE 1))\n+  [(set (match_operand:VEC_ALLREG_MODE 0)\n+\t(match_operand:VEC_ALLREG_MODE 1))\n    (set (match_operand:DI 2)\n \t(match_operand:DI 3))]\n   \"\"\n   [(parallel\n      [(set (match_dup 0)\n-\t   (vec_merge:VEC_REG_MODE\n+\t   (vec_merge:VEC_ALLREG_MODE\n \t     (match_dup 1)\n-\t     (match_operand:VEC_REG_MODE 4\n+\t     (match_operand:VEC_ALLREG_MODE 4\n \t\t\t\t\t \"gcn_register_or_unspec_operand\" \"U0\")\n \t     (match_operand:DI 5 \"gcn_exec_reg_operand\" \"e\")))\n       (set (match_dup 2)\n@@ -121,8 +132,8 @@\n ; gather/scatter, maskload/store, etc.\n \n (define_expand \"mov<mode>\"\n-  [(set (match_operand:VEC_REG_MODE 0 \"nonimmediate_operand\")\n-\t(match_operand:VEC_REG_MODE 1 \"general_operand\"))]\n+  [(set (match_operand:VEC_ALLREG_MODE 0 \"nonimmediate_operand\")\n+\t(match_operand:VEC_ALLREG_MODE 1 \"general_operand\"))]\n   \"\"\n   {\n     if (MEM_P (operands[0]) && !lra_in_progress && !reload_completed)\n@@ -160,28 +171,28 @@\n ; A pseudo instruction that helps LRA use the \"U0\" constraint.\n \n (define_insn \"mov<mode>_unspec\"\n-  [(set (match_operand:VEC_REG_MODE 0 \"nonimmediate_operand\" \"=v\")\n-\t(match_operand:VEC_REG_MODE 1 \"gcn_unspec_operand\"   \" U\"))]\n+  [(set (match_operand:VEC_ALLREG_MODE 0 \"nonimmediate_operand\" \"=v\")\n+\t(match_operand:VEC_ALLREG_MODE 1 \"gcn_unspec_operand\"   \" U\"))]\n   \"\"\n   \"\"\n   [(set_attr \"type\" \"unknown\")\n    (set_attr \"length\" \"0\")])\n \n (define_insn \"*mov<mode>\"\n-  [(set (match_operand:VEC_1REG_MODE 0 \"nonimmediate_operand\" \"=v,v\")\n-\t(match_operand:VEC_1REG_MODE 1 \"general_operand\"      \"vA,B\"))]\n+  [(set (match_operand:VEC_ALL1REG_MODE 0 \"nonimmediate_operand\" \"=v,v\")\n+\t(match_operand:VEC_ALL1REG_MODE 1 \"general_operand\"      \"vA,B\"))]\n   \"\"\n   \"v_mov_b32\\t%0, %1\"\n   [(set_attr \"type\" \"vop1,vop1\")\n    (set_attr \"length\" \"4,8\")])\n \n (define_insn \"mov<mode>_exec\"\n-  [(set (match_operand:VEC_1REG_MODE 0 \"nonimmediate_operand\"\n+  [(set (match_operand:VEC_ALL1REG_MODE 0 \"nonimmediate_operand\"\n \t\t\t\t\t\t\t \"=v, v, v, v, v, m\")\n-\t(vec_merge:VEC_1REG_MODE\n-\t  (match_operand:VEC_1REG_MODE 1 \"general_operand\"\n+\t(vec_merge:VEC_ALL1REG_MODE\n+\t  (match_operand:VEC_ALL1REG_MODE 1 \"general_operand\"\n \t\t\t\t\t\t\t \"vA, B, v,vA, m, v\")\n-\t  (match_operand:VEC_1REG_MODE 3 \"gcn_alu_or_unspec_operand\"\n+\t  (match_operand:VEC_ALL1REG_MODE 3 \"gcn_alu_or_unspec_operand\"\n \t\t\t\t\t\t\t \"U0,U0,vA,vA,U0,U0\")\n \t  (match_operand:DI 2 \"register_operand\"\t \" e, e,cV,Sv, e, e\")))\n    (clobber (match_scratch:V64DI 4\t\t\t \"=X, X, X, X,&v,&v\"))]\n@@ -200,9 +211,10 @@\n ; read/modify/write which is necessary for maskstore.\n \n ;(define_insn \"*mov<mode>_exec_match\"\n-;  [(set (match_operand:VEC_1REG_MODE 0 \"nonimmediate_operand\" \"=v,v, v, m\")\n-;\t(vec_merge:VEC_1REG_MODE\n-;\t  (match_operand:VEC_1REG_MODE 1 \"general_operand\"    \"vA,B, m, v\")\n+;  [(set (match_operand:VEC_ALL1REG_MODE 0 \"nonimmediate_operand\"\n+;\t\t\t\t\t\t\t      \"=v,v, v, m\")\n+;\t(vec_merge:VEC_ALL1REG_MODE\n+;\t  (match_operand:VEC_ALL1REG_MODE 1 \"general_operand\" \"vA,B, m, v\")\n ;\t  (match_dup 0)\n ;\t  (match_operand:DI 2 \"gcn_exec_reg_operand\"\t      \" e,e, e, e\")))\n ;   (clobber (match_scratch:V64DI 3\t\t\t      \"=X,X,&v,&v\"))]\n@@ -304,9 +316,11 @@\n ;   flat_load v, vT\n \n (define_insn \"mov<mode>_sgprbase\"\n-  [(set (match_operand:VEC_1REG_MODE 0 \"nonimmediate_operand\" \"= v, v, v, m\")\n-\t(unspec:VEC_1REG_MODE\n-\t  [(match_operand:VEC_1REG_MODE 1 \"general_operand\"   \" vA,vB, m, v\")]\n+  [(set (match_operand:VEC_ALL1REG_MODE 0 \"nonimmediate_operand\"\n+\t\t\t\t\t\t\t      \"= v, v, v, m\")\n+\t(unspec:VEC_ALL1REG_MODE\n+\t  [(match_operand:VEC_ALL1REG_MODE 1 \"general_operand\"\n+\t\t\t\t\t\t\t      \" vA,vB, m, v\")]\n \t  UNSPEC_SGPRBASE))\n    (clobber (match_operand:V64DI 2 \"register_operand\"\t      \"=&v,&v,&v,&v\"))]\n   \"lra_in_progress || reload_completed\"\n@@ -339,8 +353,8 @@\n ; gcn_secondary_reload.  It allows a reload with a scratch register.\n \n (define_expand \"reload_in<mode>\"\n-  [(set (match_operand:VEC_REG_MODE 0 \"register_operand\" \"= v\")\n-\t(match_operand:VEC_REG_MODE 1 \"memory_operand\"   \"  m\"))\n+  [(set (match_operand:VEC_ALLREG_MODE 0 \"register_operand\" \"= v\")\n+\t(match_operand:VEC_ALLREG_MODE 1 \"memory_operand\"   \"  m\"))\n    (clobber (match_operand:V64DI 2 \"register_operand\"    \"=&v\"))]\n   \"\"\n   {\n@@ -351,8 +365,8 @@\n ; reload_out is similar to reload_in, above.\n \n (define_expand \"reload_out<mode>\"\n-  [(set (match_operand:VEC_REG_MODE 0 \"memory_operand\"   \"= m\")\n-\t(match_operand:VEC_REG_MODE 1 \"register_operand\" \"  v\"))\n+  [(set (match_operand:VEC_ALLREG_MODE 0 \"memory_operand\"   \"= m\")\n+\t(match_operand:VEC_ALLREG_MODE 1 \"register_operand\" \"  v\"))\n    (clobber (match_operand:V64DI 2 \"register_operand\"    \"=&v\"))]\n   \"\"\n   {\n@@ -363,9 +377,9 @@\n ; Expand scalar addresses into gather/scatter patterns\n \n (define_split\n-  [(set (match_operand:VEC_REG_MODE 0 \"memory_operand\")\n-\t(unspec:VEC_REG_MODE\n-\t  [(match_operand:VEC_REG_MODE 1 \"general_operand\")]\n+  [(set (match_operand:VEC_ALLREG_MODE 0 \"memory_operand\")\n+\t(unspec:VEC_ALLREG_MODE\n+\t  [(match_operand:VEC_ALLREG_MODE 1 \"general_operand\")]\n \t  UNSPEC_SGPRBASE))\n    (clobber (match_scratch:V64DI 2))]\n   \"\"\n@@ -381,10 +395,10 @@\n   })\n \n (define_split\n-  [(set (match_operand:VEC_REG_MODE 0 \"memory_operand\")\n-\t(vec_merge:VEC_REG_MODE\n-\t  (match_operand:VEC_REG_MODE 1 \"general_operand\")\n-\t  (match_operand:VEC_REG_MODE 2 \"\")\n+  [(set (match_operand:VEC_ALLREG_MODE 0 \"memory_operand\")\n+\t(vec_merge:VEC_ALLREG_MODE\n+\t  (match_operand:VEC_ALLREG_MODE 1 \"general_operand\")\n+\t  (match_operand:VEC_ALLREG_MODE 2 \"\")\n \t  (match_operand:DI 3 \"gcn_exec_reg_operand\")))\n    (clobber (match_scratch:V64DI 4))]\n   \"\"\n@@ -402,14 +416,14 @@\n   })\n \n (define_split\n-  [(set (match_operand:VEC_REG_MODE 0 \"nonimmediate_operand\")\n-\t(unspec:VEC_REG_MODE\n-\t  [(match_operand:VEC_REG_MODE 1 \"memory_operand\")]\n+  [(set (match_operand:VEC_ALLREG_MODE 0 \"nonimmediate_operand\")\n+\t(unspec:VEC_ALLREG_MODE\n+\t  [(match_operand:VEC_ALLREG_MODE 1 \"memory_operand\")]\n \t  UNSPEC_SGPRBASE))\n    (clobber (match_scratch:V64DI 2))]\n   \"\"\n   [(set (match_dup 0)\n-\t(unspec:VEC_REG_MODE [(match_dup 5) (match_dup 6) (match_dup 7)\n+\t(unspec:VEC_ALLREG_MODE [(match_dup 5) (match_dup 6) (match_dup 7)\n \t\t\t      (mem:BLK (scratch))]\n \t\t\t     UNSPEC_GATHER))]\n   {\n@@ -421,18 +435,18 @@\n   })\n \n (define_split\n-  [(set (match_operand:VEC_REG_MODE 0 \"nonimmediate_operand\")\n-\t(vec_merge:VEC_REG_MODE\n-\t  (match_operand:VEC_REG_MODE 1 \"memory_operand\")\n-\t  (match_operand:VEC_REG_MODE 2 \"\")\n+  [(set (match_operand:VEC_ALLREG_MODE 0 \"nonimmediate_operand\")\n+\t(vec_merge:VEC_ALLREG_MODE\n+\t  (match_operand:VEC_ALLREG_MODE 1 \"memory_operand\")\n+\t  (match_operand:VEC_ALLREG_MODE 2 \"\")\n \t  (match_operand:DI 3 \"gcn_exec_reg_operand\")))\n    (clobber (match_scratch:V64DI 4))]\n   \"\"\n   [(set (match_dup 0)\n-\t(vec_merge:VEC_REG_MODE\n-\t  (unspec:VEC_REG_MODE [(match_dup 5) (match_dup 6) (match_dup 7)\n-\t\t\t\t(mem:BLK (scratch))]\n-\t\t\t       UNSPEC_GATHER)\n+\t(vec_merge:VEC_ALLREG_MODE\n+\t  (unspec:VEC_ALLREG_MODE [(match_dup 5) (match_dup 6) (match_dup 7)\n+\t\t\t\t   (mem:BLK (scratch))]\n+\t\t\t\t  UNSPEC_GATHER)\n \t  (match_dup 2)\n \t  (match_dup 3)))]\n   {\n@@ -455,11 +469,11 @@\n ; FIXME these should take A immediates\n \n (define_insn \"*vec_set<mode>\"\n-  [(set (match_operand:VEC_1REG_MODE 0 \"register_operand\"            \"= v\")\n-\t(vec_merge:VEC_1REG_MODE\n-\t  (vec_duplicate:VEC_1REG_MODE\n+  [(set (match_operand:VEC_ALL1REG_MODE 0 \"register_operand\"         \"= v\")\n+\t(vec_merge:VEC_ALL1REG_MODE\n+\t  (vec_duplicate:VEC_ALL1REG_MODE\n \t    (match_operand:<SCALAR_MODE> 1 \"register_operand\"\t     \" Sv\"))\n-\t  (match_operand:VEC_1REG_MODE 3 \"gcn_register_or_unspec_operand\"\n+\t  (match_operand:VEC_ALL1REG_MODE 3 \"gcn_register_or_unspec_operand\"\n \t\t\t\t\t\t\t\t     \" U0\")\n \t  (ashift (const_int 1)\n \t\t  (match_operand:SI 2 \"gcn_alu_operand\"\t\t     \"SvB\"))))]\n@@ -489,20 +503,20 @@\n    (set_attr \"laneselect\" \"yes\")])\n \n (define_expand \"vec_set<mode>\"\n-  [(set (match_operand:VEC_REG_MODE 0 \"register_operand\")\n-\t(vec_merge:VEC_REG_MODE\n-\t  (vec_duplicate:VEC_REG_MODE\n+  [(set (match_operand:VEC_ALLREG_MODE 0 \"register_operand\")\n+\t(vec_merge:VEC_ALLREG_MODE\n+\t  (vec_duplicate:VEC_ALLREG_MODE\n \t    (match_operand:<SCALAR_MODE> 1 \"register_operand\"))\n \t  (match_dup 0)\n \t  (ashift (const_int 1) (match_operand:SI 2 \"gcn_alu_operand\"))))]\n   \"\")\n \n (define_insn \"*vec_set<mode>_1\"\n-  [(set (match_operand:VEC_1REG_MODE 0 \"register_operand\"\t       \"=v\")\n-\t(vec_merge:VEC_1REG_MODE\n-\t  (vec_duplicate:VEC_1REG_MODE\n+  [(set (match_operand:VEC_ALL1REG_MODE 0 \"register_operand\"\t       \"=v\")\n+\t(vec_merge:VEC_ALL1REG_MODE\n+\t  (vec_duplicate:VEC_ALL1REG_MODE\n \t    (match_operand:<SCALAR_MODE> 1 \"register_operand\"\t       \"Sv\"))\n-\t  (match_operand:VEC_1REG_MODE 3 \"gcn_register_or_unspec_operand\"\n+\t  (match_operand:VEC_ALL1REG_MODE 3 \"gcn_register_or_unspec_operand\"\n \t\t\t\t\t\t\t\t       \"U0\")\n \t  (match_operand:SI 2 \"const_int_operand\"\t               \" i\")))]\n   \"((unsigned) exact_log2 (INTVAL (operands[2])) < 64)\"\n@@ -534,9 +548,9 @@\n    (set_attr \"laneselect\" \"yes\")])\n \n (define_insn \"vec_duplicate<mode><exec>\"\n-  [(set (match_operand:VEC_1REG_MODE 0 \"register_operand\"  \"=v\")\n-\t(vec_duplicate:VEC_1REG_MODE\n-\t  (match_operand:<SCALAR_MODE> 1 \"gcn_alu_operand\" \"SvB\")))]\n+  [(set (match_operand:VEC_ALL1REG_MODE 0 \"register_operand\"  \"=v\")\n+\t(vec_duplicate:VEC_ALL1REG_MODE\n+\t  (match_operand:<SCALAR_MODE> 1 \"gcn_alu_operand\"    \"SvB\")))]\n   \"\"\n   \"v_mov_b32\\t%0, %1\"\n   [(set_attr \"type\" \"vop3a\")\n@@ -554,8 +568,8 @@\n (define_insn \"vec_extract<mode><scalar_mode>\"\n   [(set (match_operand:<SCALAR_MODE> 0 \"register_operand\"   \"=Sg\")\n \t(vec_select:<SCALAR_MODE>\n-\t  (match_operand:VEC_1REG_MODE 1 \"register_operand\" \"  v\")\n-\t  (parallel [(match_operand:SI 2 \"gcn_alu_operand\"  \"SvB\")])))]\n+\t  (match_operand:VEC_ALL1REG_MODE 1 \"register_operand\" \"  v\")\n+\t  (parallel [(match_operand:SI 2 \"gcn_alu_operand\"     \"SvB\")])))]\n   \"\"\n   \"v_readlane_b32 %0, %1, %2\"\n   [(set_attr \"type\" \"vop3a\")\n@@ -576,7 +590,7 @@\n    (set_attr \"laneselect\" \"yes\")])\n \n (define_expand \"vec_init<mode><scalar_mode>\"\n-  [(match_operand:VEC_REG_MODE 0 \"register_operand\")\n+  [(match_operand:VEC_ALLREG_MODE 0 \"register_operand\")\n    (match_operand 1)]\n   \"\"\n   {\n@@ -618,7 +632,7 @@\n ;; - Multiple forms of address expression are supported, below.\n \n (define_expand \"gather_load<mode>\"\n-  [(match_operand:VEC_REG_MODE 0 \"register_operand\")\n+  [(match_operand:VEC_ALLREG_MODE 0 \"register_operand\")\n    (match_operand:DI 1 \"register_operand\")\n    (match_operand 2 \"register_operand\")\n    (match_operand 3 \"immediate_operand\")\n@@ -640,7 +654,7 @@\n   })\n \n (define_expand \"gather<mode>_exec\"\n-  [(match_operand:VEC_REG_MODE 0 \"register_operand\")\n+  [(match_operand:VEC_ALLREG_MODE 0 \"register_operand\")\n    (match_operand:DI 1 \"register_operand\")\n    (match_operand:V64SI 2 \"register_operand\")\n    (match_operand 3 \"immediate_operand\")\n@@ -669,8 +683,8 @@\n \n ; Allow any address expression\n (define_expand \"gather<mode>_expr<exec>\"\n-  [(set (match_operand:VEC_REG_MODE 0 \"register_operand\")\n-\t(unspec:VEC_REG_MODE\n+  [(set (match_operand:VEC_ALLREG_MODE 0 \"register_operand\")\n+\t(unspec:VEC_ALLREG_MODE\n \t  [(match_operand 1 \"\")\n \t   (match_operand 2 \"immediate_operand\")\n \t   (match_operand 3 \"immediate_operand\")\n@@ -680,8 +694,8 @@\n     {})\n \n (define_insn \"gather<mode>_insn_1offset<exec>\"\n-  [(set (match_operand:VEC_REG_MODE 0 \"register_operand\"\t \"=v\")\n-\t(unspec:VEC_REG_MODE\n+  [(set (match_operand:VEC_ALLREG_MODE 0 \"register_operand\"\t \"=v\")\n+\t(unspec:VEC_ALLREG_MODE\n \t  [(plus:V64DI (match_operand:V64DI 1 \"register_operand\" \" v\")\n \t\t       (vec_duplicate:V64DI\n \t\t\t (match_operand 2 \"immediate_operand\"\t \" n\")))\n@@ -719,8 +733,8 @@\n    (set_attr \"length\" \"12\")])\n \n (define_insn \"gather<mode>_insn_1offset_ds<exec>\"\n-  [(set (match_operand:VEC_REG_MODE 0 \"register_operand\"\t \"=v\")\n-\t(unspec:VEC_REG_MODE\n+  [(set (match_operand:VEC_ALLREG_MODE 0 \"register_operand\"\t \"=v\")\n+\t(unspec:VEC_ALLREG_MODE\n \t  [(plus:V64SI (match_operand:V64SI 1 \"register_operand\" \" v\")\n \t\t       (vec_duplicate:V64SI\n \t\t\t (match_operand 2 \"immediate_operand\"\t \" n\")))\n@@ -741,8 +755,8 @@\n    (set_attr \"length\" \"12\")])\n \n (define_insn \"gather<mode>_insn_2offsets<exec>\"\n-  [(set (match_operand:VEC_REG_MODE 0 \"register_operand\"\t       \"=v\")\n-\t(unspec:VEC_REG_MODE\n+  [(set (match_operand:VEC_ALLREG_MODE 0 \"register_operand\"\t       \"=v\")\n+\t(unspec:VEC_ALLREG_MODE\n \t  [(plus:V64DI\n \t     (plus:V64DI\n \t       (vec_duplicate:V64DI\n@@ -782,7 +796,7 @@\n    (match_operand 1 \"register_operand\")\n    (match_operand 2 \"immediate_operand\")\n    (match_operand:SI 3 \"gcn_alu_operand\")\n-   (match_operand:VEC_REG_MODE 4 \"register_operand\")]\n+   (match_operand:VEC_ALLREG_MODE 4 \"register_operand\")]\n   \"\"\n   {\n     rtx addr = gcn_expand_scaled_offsets (DEFAULT_ADDR_SPACE, operands[0],\n@@ -804,7 +818,7 @@\n    (match_operand 1 \"register_operand\")\n    (match_operand 2 \"immediate_operand\")\n    (match_operand:SI 3 \"gcn_alu_operand\")\n-   (match_operand:VEC_REG_MODE 4 \"register_operand\")\n+   (match_operand:VEC_ALLREG_MODE 4 \"register_operand\")\n    (match_operand:DI 5 \"gcn_exec_reg_operand\")]\n   \"\"\n   {\n@@ -832,7 +846,7 @@\n   [(set (mem:BLK (scratch))\n \t(unspec:BLK\n \t  [(match_operand:V64DI 0 \"\")\n-\t   (match_operand:VEC_REG_MODE 1 \"register_operand\")\n+\t   (match_operand:VEC_ALLREG_MODE 1 \"register_operand\")\n \t   (match_operand 2 \"immediate_operand\")\n \t   (match_operand 3 \"immediate_operand\")]\n \t  UNSPEC_SCATTER))]\n@@ -845,7 +859,7 @@\n \t  [(plus:V64DI (match_operand:V64DI 0 \"register_operand\" \"v\")\n \t\t       (vec_duplicate:V64DI\n \t\t\t (match_operand 1 \"immediate_operand\"\t \"n\")))\n-\t   (match_operand:VEC_REG_MODE 2 \"register_operand\"\t \"v\")\n+\t   (match_operand:VEC_ALLREG_MODE 2 \"register_operand\"\t \"v\")\n \t   (match_operand 3 \"immediate_operand\"\t\t\t \"n\")\n \t   (match_operand 4 \"immediate_operand\"\t\t\t \"n\")]\n \t  UNSPEC_SCATTER))]\n@@ -883,7 +897,7 @@\n \t  [(plus:V64SI (match_operand:V64SI 0 \"register_operand\" \"v\")\n \t\t       (vec_duplicate:V64SI\n \t\t\t (match_operand 1 \"immediate_operand\"\t \"n\")))\n-\t   (match_operand:VEC_REG_MODE 2 \"register_operand\"\t \"v\")\n+\t   (match_operand:VEC_ALLREG_MODE 2 \"register_operand\"\t \"v\")\n \t   (match_operand 3 \"immediate_operand\"\t\t\t \"n\")\n \t   (match_operand 4 \"immediate_operand\"\t\t\t \"n\")]\n \t  UNSPEC_SCATTER))]\n@@ -910,7 +924,7 @@\n \t\t (match_operand:V64SI 1 \"register_operand\"\t    \" v\")))\n \t     (vec_duplicate:V64DI (match_operand 2 \"immediate_operand\"\n \t\t\t\t\t\t\t\t    \" n\")))\n-\t   (match_operand:VEC_REG_MODE 3 \"register_operand\"\t    \" v\")\n+\t   (match_operand:VEC_ALLREG_MODE 3 \"register_operand\"\t    \" v\")\n \t   (match_operand 4 \"immediate_operand\"\t\t\t    \" n\")\n \t   (match_operand 5 \"immediate_operand\"\t\t\t    \" n\")]\n \t  UNSPEC_SCATTER))]\n@@ -941,11 +955,11 @@\n ;; {{{ Permutations\n \n (define_insn \"ds_bpermute<mode>\"\n-  [(set (match_operand:VEC_1REG_MODE 0 \"register_operand\"    \"=v\")\n-\t(unspec:VEC_1REG_MODE\n-\t  [(match_operand:VEC_1REG_MODE 2 \"register_operand\" \" v\")\n-\t   (match_operand:V64SI 1 \"register_operand\"\t     \" v\")\n-\t   (match_operand:DI 3 \"gcn_exec_reg_operand\"\t     \" e\")]\n+  [(set (match_operand:VEC_ALL1REG_MODE 0 \"register_operand\"\t\"=v\")\n+\t(unspec:VEC_ALL1REG_MODE\n+\t  [(match_operand:VEC_ALL1REG_MODE 2 \"register_operand\" \" v\")\n+\t   (match_operand:V64SI 1 \"register_operand\"\t\t\" v\")\n+\t   (match_operand:DI 3 \"gcn_exec_reg_operand\"\t\t\" e\")]\n \t  UNSPEC_BPERMUTE))]\n   \"\"\n   \"ds_bpermute_b32\\t%0, %1, %2\\;s_waitcnt\\tlgkmcnt(0)\"\n@@ -1968,7 +1982,7 @@\n ;; }}}\n ;; {{{ ALU generic case\n \n-(define_mode_iterator VEC_INT_MODE [V64QI V64HI V64SI V64DI])\n+(define_mode_iterator VEC_INT_MODE [V64SI V64DI])\n \n (define_code_iterator bitop [and ior xor])\n (define_code_iterator shiftop [ashift lshiftrt ashiftrt])\n@@ -2552,19 +2566,19 @@\n \n (define_expand \"vcond_mask_<mode>di\"\n   [(parallel\n-    [(set (match_operand:VEC_REG_MODE 0 \"register_operand\" \"\")\n-\t  (vec_merge:VEC_REG_MODE\n-\t    (match_operand:VEC_REG_MODE 1 \"gcn_vop3_operand\" \"\")\n-\t    (match_operand:VEC_REG_MODE 2 \"gcn_alu_operand\" \"\")\n-\t    (match_operand:DI 3 \"register_operand\" \"\")))\n+    [(set (match_operand:VEC_ALLREG_MODE 0   \"register_operand\" \"\")\n+\t  (vec_merge:VEC_ALLREG_MODE\n+\t    (match_operand:VEC_ALLREG_MODE 1 \"gcn_vop3_operand\" \"\")\n+\t    (match_operand:VEC_ALLREG_MODE 2 \"gcn_alu_operand\" \"\")\n+\t    (match_operand:DI 3\t\t     \"register_operand\" \"\")))\n      (clobber (scratch:V64DI))])]\n   \"\"\n   \"\")\n \n-(define_expand \"vcond<VEC_1REG_MODE:mode><VEC_1REG_ALT:mode>\"\n-  [(match_operand:VEC_1REG_MODE 0 \"register_operand\")\n-   (match_operand:VEC_1REG_MODE 1 \"gcn_vop3_operand\")\n-   (match_operand:VEC_1REG_MODE 2 \"gcn_alu_operand\")\n+(define_expand \"vcond<VEC_ALL1REG_MODE:mode><VEC_1REG_ALT:mode>\"\n+  [(match_operand:VEC_ALL1REG_MODE 0 \"register_operand\")\n+   (match_operand:VEC_ALL1REG_MODE 1 \"gcn_vop3_operand\")\n+   (match_operand:VEC_ALL1REG_MODE 2 \"gcn_alu_operand\")\n    (match_operator 3 \"comparison_operator\"\n      [(match_operand:VEC_1REG_ALT 4 \"gcn_alu_operand\")\n       (match_operand:VEC_1REG_ALT 5 \"gcn_vop3_operand\")])]\n@@ -2573,15 +2587,15 @@\n     rtx tmp = gen_reg_rtx (DImode);\n     emit_insn (gen_vec_cmp<VEC_1REG_ALT:mode>di\n \t       (tmp, operands[3], operands[4], operands[5]));\n-    emit_insn (gen_vcond_mask_<VEC_1REG_MODE:mode>di\n+    emit_insn (gen_vcond_mask_<VEC_ALL1REG_MODE:mode>di\n \t       (operands[0], operands[1], operands[2], tmp));\n     DONE;\n   })\n \n-(define_expand \"vcond<VEC_1REG_MODE:mode><VEC_1REG_ALT:mode>_exec\"\n-  [(match_operand:VEC_1REG_MODE 0 \"register_operand\")\n-   (match_operand:VEC_1REG_MODE 1 \"gcn_vop3_operand\")\n-   (match_operand:VEC_1REG_MODE 2 \"gcn_alu_operand\")\n+(define_expand \"vcond<VEC_ALL1REG_MODE:mode><VEC_1REG_ALT:mode>_exec\"\n+  [(match_operand:VEC_ALL1REG_MODE 0 \"register_operand\")\n+   (match_operand:VEC_ALL1REG_MODE 1 \"gcn_vop3_operand\")\n+   (match_operand:VEC_ALL1REG_MODE 2 \"gcn_alu_operand\")\n    (match_operator 3 \"comparison_operator\"\n      [(match_operand:VEC_1REG_ALT 4 \"gcn_alu_operand\")\n       (match_operand:VEC_1REG_ALT 5 \"gcn_vop3_operand\")])\n@@ -2591,15 +2605,15 @@\n     rtx tmp = gen_reg_rtx (DImode);\n     emit_insn (gen_vec_cmp<VEC_1REG_ALT:mode>di_exec\n \t       (tmp, operands[3], operands[4], operands[5], operands[6]));\n-    emit_insn (gen_vcond_mask_<VEC_1REG_MODE:mode>di\n+    emit_insn (gen_vcond_mask_<VEC_ALL1REG_MODE:mode>di\n \t       (operands[0], operands[1], operands[2], tmp));\n     DONE;\n   })\n \n-(define_expand \"vcondu<VEC_1REG_MODE:mode><VEC_1REG_INT_ALT:mode>\"\n-  [(match_operand:VEC_1REG_MODE 0 \"register_operand\")\n-   (match_operand:VEC_1REG_MODE 1 \"gcn_vop3_operand\")\n-   (match_operand:VEC_1REG_MODE 2 \"gcn_alu_operand\")\n+(define_expand \"vcondu<VEC_ALL1REG_MODE:mode><VEC_1REG_INT_ALT:mode>\"\n+  [(match_operand:VEC_ALL1REG_MODE 0 \"register_operand\")\n+   (match_operand:VEC_ALL1REG_MODE 1 \"gcn_vop3_operand\")\n+   (match_operand:VEC_ALL1REG_MODE 2 \"gcn_alu_operand\")\n    (match_operator 3 \"comparison_operator\"\n      [(match_operand:VEC_1REG_INT_ALT 4 \"gcn_alu_operand\")\n       (match_operand:VEC_1REG_INT_ALT 5 \"gcn_vop3_operand\")])]\n@@ -2608,15 +2622,15 @@\n     rtx tmp = gen_reg_rtx (DImode);\n     emit_insn (gen_vec_cmp<VEC_1REG_INT_ALT:mode>di\n \t       (tmp, operands[3], operands[4], operands[5]));\n-    emit_insn (gen_vcond_mask_<VEC_1REG_MODE:mode>di\n+    emit_insn (gen_vcond_mask_<VEC_ALL1REG_MODE:mode>di\n \t       (operands[0], operands[1], operands[2], tmp));\n     DONE;\n   })\n \n-(define_expand \"vcondu<VEC_1REG_MODE:mode><VEC_1REG_INT_ALT:mode>_exec\"\n-  [(match_operand:VEC_1REG_MODE 0 \"register_operand\")\n-   (match_operand:VEC_1REG_MODE 1 \"gcn_vop3_operand\")\n-   (match_operand:VEC_1REG_MODE 2 \"gcn_alu_operand\")\n+(define_expand \"vcondu<VEC_ALL1REG_MODE:mode><VEC_1REG_INT_ALT:mode>_exec\"\n+  [(match_operand:VEC_ALL1REG_MODE 0 \"register_operand\")\n+   (match_operand:VEC_ALL1REG_MODE 1 \"gcn_vop3_operand\")\n+   (match_operand:VEC_ALL1REG_MODE 2 \"gcn_alu_operand\")\n    (match_operator 3 \"comparison_operator\"\n      [(match_operand:VEC_1REG_INT_ALT 4 \"gcn_alu_operand\")\n       (match_operand:VEC_1REG_INT_ALT 5 \"gcn_vop3_operand\")])\n@@ -2626,7 +2640,7 @@\n     rtx tmp = gen_reg_rtx (DImode);\n     emit_insn (gen_vec_cmp<VEC_1REG_INT_ALT:mode>di_exec\n \t       (tmp, operands[3], operands[4], operands[5], operands[6]));\n-    emit_insn (gen_vcond_mask_<VEC_1REG_MODE:mode>di\n+    emit_insn (gen_vcond_mask_<VEC_ALL1REG_MODE:mode>di\n \t       (operands[0], operands[1], operands[2], tmp));\n     DONE;\n   })\n@@ -2666,8 +2680,8 @@\n   })\n \n (define_expand \"maskload<mode>di\"\n-  [(match_operand:VEC_REG_MODE 0 \"register_operand\")\n-   (match_operand:VEC_REG_MODE 1 \"memory_operand\")\n+  [(match_operand:VEC_ALLREG_MODE 0 \"register_operand\")\n+   (match_operand:VEC_ALLREG_MODE 1 \"memory_operand\")\n    (match_operand 2 \"\")]\n   \"\"\n   {\n@@ -2683,8 +2697,8 @@\n   })\n \n (define_expand \"maskstore<mode>di\"\n-  [(match_operand:VEC_REG_MODE 0 \"memory_operand\")\n-   (match_operand:VEC_REG_MODE 1 \"register_operand\")\n+  [(match_operand:VEC_ALLREG_MODE 0 \"memory_operand\")\n+   (match_operand:VEC_ALLREG_MODE 1 \"register_operand\")\n    (match_operand 2 \"\")]\n   \"\"\n   {\n@@ -2698,7 +2712,7 @@\n   })\n \n (define_expand \"mask_gather_load<mode>\"\n-  [(match_operand:VEC_REG_MODE 0 \"register_operand\")\n+  [(match_operand:VEC_ALLREG_MODE 0 \"register_operand\")\n    (match_operand:DI 1 \"register_operand\")\n    (match_operand 2 \"register_operand\")\n    (match_operand 3 \"immediate_operand\")\n@@ -2728,7 +2742,7 @@\n    (match_operand 1 \"register_operand\")\n    (match_operand 2 \"immediate_operand\")\n    (match_operand:SI 3 \"gcn_alu_operand\")\n-   (match_operand:VEC_REG_MODE 4 \"register_operand\")\n+   (match_operand:VEC_ALLREG_MODE 4 \"register_operand\")\n    (match_operand:DI 5 \"\")]\n   \"\"\n   {\n@@ -2982,9 +2996,9 @@\n \n ; Instructions to move a scalar value from lane 63 of a vector register.\n (define_insn \"mov_from_lane63_<mode>\"\n-  [(set (match_operand:<SCALAR_MODE> 0 \"register_operand\"  \"=Sg,v\")\n+  [(set (match_operand:<SCALAR_MODE> 0 \"register_operand\"\t\"=Sg,v\")\n \t(unspec:<SCALAR_MODE>\n-\t  [(match_operand:VEC_1REG_MODE 1 \"register_operand\" \"v,v\")]\n+\t  [(match_operand:VEC_ALL1REG_MODE 1 \"register_operand\" \"v,v\")]\n \t  UNSPEC_MOV_FROM_LANE63))]\n   \"\"\n   \"@"}, {"sha": "4c2a3575df21096d264d14c7e5d0f98d8f3ef186", "filename": "gcc/config/gcn/gcn.c", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b99bed8443f97550962e6e994b7395534a38e0c/gcc%2Fconfig%2Fgcn%2Fgcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b99bed8443f97550962e6e994b7395534a38e0c/gcc%2Fconfig%2Fgcn%2Fgcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.c?ref=2b99bed8443f97550962e6e994b7395534a38e0c", "patch": "@@ -3997,12 +3997,8 @@ gcn_vectorize_vec_perm_const (machine_mode vmode, rtx dst,\n static bool\n gcn_vector_mode_supported_p (machine_mode mode)\n {\n-  /* FIXME: Enable V64QImode and V64HImode.\n-\t    We should support these modes, but vector operations are usually\n-\t    assumed to automatically truncate types, and GCN does not.  We\n-\t    need to add explicit truncates and/or use SDWA for QI/HI insns.  */\n-  return (/* mode == V64QImode || mode == V64HImode\n-\t  ||*/ mode == V64SImode || mode == V64DImode\n+  return (mode == V64QImode || mode == V64HImode\n+\t  || mode == V64SImode || mode == V64DImode\n \t  || mode == V64SFmode || mode == V64DFmode);\n }\n \n@@ -4032,6 +4028,25 @@ gcn_vectorize_preferred_simd_mode (scalar_mode mode)\n     }\n }\n \n+/* Implement TARGET_VECTORIZE_RELATED_MODE.\n+\n+   All GCN vectors are 64-lane, so this is simpler than other architectures.\n+   In particular, we do *not* want to match vector bit-size.  */\n+\n+static opt_machine_mode\n+gcn_related_vector_mode (machine_mode vector_mode, scalar_mode element_mode,\n+\t\t\t poly_uint64 nunits)\n+{\n+  if (known_ne (nunits, 0U) && known_ne (nunits, 64U))\n+    return VOIDmode;\n+\n+  machine_mode pref_mode = gcn_vectorize_preferred_simd_mode (element_mode);\n+  if (!VECTOR_MODE_P (pref_mode))\n+    return VOIDmode;\n+\n+  return pref_mode;\n+}\n+\n /* Implement TARGET_VECTORIZE_PREFERRED_VECTOR_ALIGNMENT.\n \n    Returns the preferred alignment in bits for accesses to vectors of type type\n@@ -6162,6 +6177,8 @@ print_operand (FILE *file, rtx x, int code)\n #undef  TARGET_VECTORIZE_PREFERRED_VECTOR_ALIGNMENT\n #define TARGET_VECTORIZE_PREFERRED_VECTOR_ALIGNMENT \\\n   gcn_preferred_vector_alignment\n+#undef  TARGET_VECTORIZE_RELATED_MODE\n+#define TARGET_VECTORIZE_RELATED_MODE gcn_related_vector_mode\n #undef  TARGET_VECTORIZE_SUPPORT_VECTOR_MISALIGNMENT\n #define TARGET_VECTORIZE_SUPPORT_VECTOR_MISALIGNMENT \\\n   gcn_vectorize_support_vector_misalignment"}]}