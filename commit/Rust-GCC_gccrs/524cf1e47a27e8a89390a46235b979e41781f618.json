{"sha": "524cf1e47a27e8a89390a46235b979e41781f618", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI0Y2YxZTQ3YTI3ZThhODkzOTBhNDYyMzViOTc5ZTQxNzgxZjYxOA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-07-26T15:19:58Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-07-26T15:19:58Z"}, "message": "Teach VRP to register assertions along default switch labels (PR18046)\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/18046\n\t* genmodes.c (emit_mode_size_inline): Emit an assert that\n\tverifies that mode is a valid array index.\n\t(emit_mode_nuinits_inline): Likewise.\n\t(emit_mode_inner_inline): Likewise.\n\t(emit_mode_unit_size_inline): Likewise.\n\t(emit_mode_unit_precision_inline): Likewise.\n\t* tree-vrp.c: Include params.h.\n\t(find_switch_asserts): Register edge assertions for the default\n\tlabel which correspond to the anti-ranges of each case label.\n\t* params.def (PARAM_MAX_VRP_SWITCH_ASSERTIONS): New.\n\t* doc/invoke.texi: Document it.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/18046\n\t* gcc.dg/tree-ssa/ssa-dom-thread-6.c: Bump FSM count to 5.\n\t* gcc.dg/tree-ssa/vrp103.c: New test.\n\t* gcc.dg/tree-ssa/vrp104.c: New test.\n\nFrom-SVN: r238761", "tree": {"sha": "a53f8a1a5848309a51cb3d1a26203dfdbb2631c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a53f8a1a5848309a51cb3d1a26203dfdbb2631c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/524cf1e47a27e8a89390a46235b979e41781f618", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/524cf1e47a27e8a89390a46235b979e41781f618", "html_url": "https://github.com/Rust-GCC/gccrs/commit/524cf1e47a27e8a89390a46235b979e41781f618", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/524cf1e47a27e8a89390a46235b979e41781f618/comments", "author": null, "committer": null, "parents": [{"sha": "100665d8d7460dab7a2c324a50ea8ac720ad9c43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/100665d8d7460dab7a2c324a50ea8ac720ad9c43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/100665d8d7460dab7a2c324a50ea8ac720ad9c43"}], "stats": {"total": 167, "additions": 164, "deletions": 3}, "files": [{"sha": "d853f3becc16c21f7b77288be7cb8c7fe33e5d48", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/524cf1e47a27e8a89390a46235b979e41781f618/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/524cf1e47a27e8a89390a46235b979e41781f618/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=524cf1e47a27e8a89390a46235b979e41781f618", "patch": "@@ -1,3 +1,18 @@\n+2016-07-26  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR tree-optimization/18046\n+\t* genmodes.c (emit_mode_size_inline): Emit an assert that\n+\tverifies that mode is a valid array index.\n+\t(emit_mode_nuinits_inline): Likewise.\n+\t(emit_mode_inner_inline): Likewise.\n+\t(emit_mode_unit_size_inline): Likewise.\n+\t(emit_mode_unit_precision_inline): Likewise.\n+\t* tree-vrp.c: Include params.h.\n+\t(find_switch_asserts): Register edge assertions for the default\n+\tlabel which correspond to the anti-ranges of each case label.\n+\t* params.def (PARAM_MAX_VRP_SWITCH_ASSERTIONS): New.\n+\t* doc/invoke.texi: Document it.\n+\n 2016-07-26  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* gimple-ssa-strength-reduction.c (slsr_process_phi): Remove dead"}, {"sha": "22001f9a6a5ceb93c24df19380f435de99c8a057", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/524cf1e47a27e8a89390a46235b979e41781f618/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/524cf1e47a27e8a89390a46235b979e41781f618/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=524cf1e47a27e8a89390a46235b979e41781f618", "patch": "@@ -9781,6 +9781,10 @@ enable it.\n The maximum number of may-defs we analyze when looking for a must-def\n specifying the dynamic type of an object that invokes a virtual call\n we may be able to devirtualize speculatively.\n+\n+@item max-vrp-switch-assertions\n+The maximum number of assertions to add along the default edge of a switch\n+statement during VRP.  The default is 10.\n @end table\n @end table\n "}, {"sha": "1170d4f5b0cd84c8b36aaa5a1e2c50bd229113b9", "filename": "gcc/genmodes.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/524cf1e47a27e8a89390a46235b979e41781f618/gcc%2Fgenmodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/524cf1e47a27e8a89390a46235b979e41781f618/gcc%2Fgenmodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmodes.c?ref=524cf1e47a27e8a89390a46235b979e41781f618", "patch": "@@ -976,6 +976,7 @@ unsigned char\\n\\\n mode_size_inline (machine_mode mode)\\n\\\n {\\n\\\n   extern %sunsigned char mode_size[NUM_MACHINE_MODES];\\n\\\n+  gcc_assert (mode >= 0 && mode < NUM_MACHINE_MODES);\\n\\\n   switch (mode)\\n\\\n     {\\n\", adj_bytesize ? \"\" : \"const \");\n \n@@ -1006,6 +1007,7 @@ unsigned char\\n\\\n mode_nunits_inline (machine_mode mode)\\n\\\n {\\n\\\n   extern const unsigned char mode_nunits[NUM_MACHINE_MODES];\\n\\\n+  gcc_assert (mode >= 0 && mode < NUM_MACHINE_MODES);\\n\\\n   switch (mode)\\n\\\n     {\");\n \n@@ -1035,6 +1037,7 @@ unsigned char\\n\\\n mode_inner_inline (machine_mode mode)\\n\\\n {\\n\\\n   extern const unsigned char mode_inner[NUM_MACHINE_MODES];\\n\\\n+  gcc_assert (mode >= 0 && mode < NUM_MACHINE_MODES);\\n\\\n   switch (mode)\\n\\\n     {\");\n \n@@ -1067,6 +1070,7 @@ mode_unit_size_inline (machine_mode mode)\\n\\\n {\\n\\\n   extern CONST_MODE_UNIT_SIZE unsigned char mode_unit_size[NUM_MACHINE_MODES];\\\n \\n\\\n+  gcc_assert (mode >= 0 && mode < NUM_MACHINE_MODES);\\n\\\n   switch (mode)\\n\\\n     {\");\n \n@@ -1103,6 +1107,7 @@ unsigned short\\n\\\n mode_unit_precision_inline (machine_mode mode)\\n\\\n {\\n\\\n   extern const unsigned short mode_unit_precision[NUM_MACHINE_MODES];\\n\\\n+  gcc_assert (mode >= 0 && mode < NUM_MACHINE_MODES);\\n\\\n   switch (mode)\\n\\\n     {\");\n "}, {"sha": "79b7dd4cca9ec1bb67a64725fb1a596b6e937419", "filename": "gcc/params.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/524cf1e47a27e8a89390a46235b979e41781f618/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/524cf1e47a27e8a89390a46235b979e41781f618/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=524cf1e47a27e8a89390a46235b979e41781f618", "patch": "@@ -1246,6 +1246,12 @@ DEFPARAM (PARAM_MAX_SPECULATIVE_DEVIRT_MAYDEFS,\n \t  \"Maximum number of may-defs visited when devirtualizing \"\n \t  \"speculatively\", 50, 0, 0)\n \n+DEFPARAM (PARAM_MAX_VRP_SWITCH_ASSERTIONS,\n+\t  \"max-vrp-switch-assertions\",\n+\t  \"Maximum number of assertions to add along the default \"\n+\t  \"edge of a switch statement during VRP\",\n+\t  10, 0, 0)\n+\n /*\n \n Local variables:"}, {"sha": "5130a82bd58889bea187e1ebc3a6362b3d797b71", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/524cf1e47a27e8a89390a46235b979e41781f618/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/524cf1e47a27e8a89390a46235b979e41781f618/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=524cf1e47a27e8a89390a46235b979e41781f618", "patch": "@@ -1,3 +1,10 @@\n+2016-07-26  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR tree-optimization/18046\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-6.c: Bump FSM count to 5.\n+\t* gcc.dg/tree-ssa/vrp103.c: New test.\n+\t* gcc.dg/tree-ssa/vrp104.c: New test.\n+\n 2016-07-26  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/pr63354.c: Require lp64 since"}, {"sha": "551fbac3dad581d2532313f75c75624f23b10e35", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/524cf1e47a27e8a89390a46235b979e41781f618/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/524cf1e47a27e8a89390a46235b979e41781f618/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-6.c?ref=524cf1e47a27e8a89390a46235b979e41781f618", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -fdump-tree-thread1-details -fdump-tree-thread2-details\" } */\n /* { dg-final { scan-tree-dump-times \"FSM\" 3 \"thread1\" } } */\n-/* { dg-final { scan-tree-dump-times \"FSM\" 4 \"thread2\" } } */\n+/* { dg-final { scan-tree-dump-times \"FSM\" 5 \"thread2\" } } */\n \n int sum0, sum1, sum2, sum3;\n int foo (char *s, char **ret)"}, {"sha": "2d63fc89f7a69243b9a3276f1a6de48b391b922f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp103.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/524cf1e47a27e8a89390a46235b979e41781f618/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp103.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/524cf1e47a27e8a89390a46235b979e41781f618/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp103.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp103.c?ref=524cf1e47a27e8a89390a46235b979e41781f618", "patch": "@@ -0,0 +1,30 @@\n+/* PR tree-optimization/18046  */\n+/* { dg-options \"-O2 -fdump-tree-vrp\" }  */\n+/* { dg-final { scan-tree-dump-times \"baz \\\\(0\\\\);\" 4 \"vrp1\" } }  */\n+\n+void foo (void);\n+void bar (void);\n+void baz (int);\n+\n+void\n+test (int i)\n+{\n+  switch (i)\n+    {\n+    case 1:\n+    case 2:\n+    case 3:\n+      foo ();\n+      break;\n+    case 5:\n+      bar ();\n+      break;\n+    default:\n+      /* These tests should be folded to 0, resulting in 4 calls of baz(0).  */\n+      baz (i == 1);\n+      baz (i == 2);\n+      baz (i == 3);\n+      baz (i == 5);\n+      break;\n+    }\n+}"}, {"sha": "2c3db2e1c493e433bc1a2810ebda0e87e5016b99", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp104.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/524cf1e47a27e8a89390a46235b979e41781f618/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp104.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/524cf1e47a27e8a89390a46235b979e41781f618/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp104.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp104.c?ref=524cf1e47a27e8a89390a46235b979e41781f618", "patch": "@@ -0,0 +1,36 @@\n+/* PR tree-optimization/18046  */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" }  */\n+/* { dg-final { scan-tree-dump-times \"switch\" 1 \"optimized\" } }  */\n+\n+void foo (void);\n+void bar (void);\n+void baz (void);\n+\n+void\n+test (int i)\n+{\n+  switch (i)\n+    {\n+    case 1:\n+      foo ();\n+      break;\n+    case 2:\n+      bar ();\n+      break;\n+    default:\n+      break;\n+    }\n+\n+  /* This switch should be gone after threading/VRP.  */\n+  switch (i)\n+    {\n+    case 1:\n+      foo ();\n+      break;\n+    case 2:\n+      baz ();\n+      break;\n+    default:\n+      break;\n+    }\n+}"}, {"sha": "69868272896a65a0d11535106463da3f5a245ddb", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 60, "deletions": 2, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/524cf1e47a27e8a89390a46235b979e41781f618/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/524cf1e47a27e8a89390a46235b979e41781f618/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=524cf1e47a27e8a89390a46235b979e41781f618", "patch": "@@ -58,6 +58,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"omp-low.h\"\n #include \"target.h\"\n #include \"case-cfn-macros.h\"\n+#include \"params.h\"\n \n /* Range of values that can be associated with an SSA_NAME after VRP\n    has executed.  */\n@@ -5917,6 +5918,7 @@ find_switch_asserts (basic_block bb, gswitch *last)\n       ci[idx].expr = gimple_switch_label (last, idx);\n       ci[idx].bb = label_to_block (CASE_LABEL (ci[idx].expr));\n     }\n+  edge default_edge = find_edge (bb, ci[0].bb);\n   qsort (ci, n, sizeof (struct case_info), compare_case_labels);\n \n   for (idx = 0; idx < n; ++idx)\n@@ -5945,8 +5947,8 @@ find_switch_asserts (basic_block bb, gswitch *last)\n \t    max = CASE_LOW (ci[idx].expr);\n \t}\n \n-      /* Nothing to do if the range includes the default label until we\n-\t can register anti-ranges.  */\n+      /* Can't extract a useful assertion out of a range that includes the\n+\t default label.  */\n       if (min == NULL_TREE)\n \tcontinue;\n \n@@ -5964,6 +5966,62 @@ find_switch_asserts (basic_block bb, gswitch *last)\n     }\n \n   XDELETEVEC (ci);\n+\n+  if (!live_on_edge (default_edge, op))\n+    return;\n+\n+  /* Now register along the default label assertions that correspond to the\n+     anti-range of each label.  */\n+  int insertion_limit = PARAM_VALUE (PARAM_MAX_VRP_SWITCH_ASSERTIONS);\n+  for (idx = 1; idx < n; idx++)\n+    {\n+      tree min, max;\n+      tree cl = gimple_switch_label (last, idx);\n+\n+      min = CASE_LOW (cl);\n+      max = CASE_HIGH (cl);\n+\n+      /* Combine contiguous case ranges to reduce the number of assertions\n+\t to insert.  */\n+      for (idx = idx + 1; idx < n; idx++)\n+\t{\n+\t  tree next_min, next_max;\n+\t  tree next_cl = gimple_switch_label (last, idx);\n+\n+\t  next_min = CASE_LOW (next_cl);\n+\t  next_max = CASE_HIGH (next_cl);\n+\n+\t  wide_int difference = wi::sub (next_min, max ? max : min);\n+\t  if (wi::eq_p (difference, 1))\n+\t    max = next_max ? next_max : next_min;\n+\t  else\n+\t    break;\n+\t}\n+      idx--;\n+\n+      if (max == NULL_TREE)\n+\t{\n+\t  /* Register the assertion OP != MIN.  */\n+\t  min = fold_convert (TREE_TYPE (op), min);\n+\t  register_edge_assert_for (op, default_edge, bsi, NE_EXPR, op, min);\n+\t}\n+      else\n+\t{\n+\t  /* Register the assertion (unsigned)OP - MIN > (MAX - MIN),\n+\t     which will give OP the anti-range ~[MIN,MAX].  */\n+\t  tree uop = fold_convert (unsigned_type_for (TREE_TYPE (op)), op);\n+\t  min = fold_convert (TREE_TYPE (uop), min);\n+\t  max = fold_convert (TREE_TYPE (uop), max);\n+\n+\t  tree lhs = fold_build2 (MINUS_EXPR, TREE_TYPE (uop), uop, min);\n+\t  tree rhs = int_const_binop (MINUS_EXPR, max, min);\n+\t  register_new_assert_for (op, lhs, GT_EXPR, rhs,\n+\t\t\t\t   NULL, default_edge, bsi);\n+\t}\n+\n+      if (--insertion_limit == 0)\n+\tbreak;\n+    }\n }\n \n "}]}