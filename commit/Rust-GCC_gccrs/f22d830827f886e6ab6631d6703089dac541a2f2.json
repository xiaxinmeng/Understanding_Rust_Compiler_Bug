{"sha": "f22d830827f886e6ab6631d6703089dac541a2f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjIyZDgzMDgyN2Y4ODZlNmFiNjYzMWQ2NzAzMDg5ZGFjNTQxYTJmMg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-01-31T06:57:51Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-01-31T06:57:51Z"}, "message": "New test.\n\nFrom-SVN: r62174", "tree": {"sha": "d615cb92b08410173c834773b5a5d90e4d5d2760", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d615cb92b08410173c834773b5a5d90e4d5d2760"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f22d830827f886e6ab6631d6703089dac541a2f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f22d830827f886e6ab6631d6703089dac541a2f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f22d830827f886e6ab6631d6703089dac541a2f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f22d830827f886e6ab6631d6703089dac541a2f2/comments", "author": null, "committer": null, "parents": [{"sha": "7abec5bec95f2ef1222f269036b5f47f865c196c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7abec5bec95f2ef1222f269036b5f47f865c196c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7abec5bec95f2ef1222f269036b5f47f865c196c"}], "stats": {"total": 109, "additions": 109, "deletions": 0}, "files": [{"sha": "0d62020df9f5871f74edc3535ad5193d361c4f67", "filename": "gcc/testsuite/gcc.dg/uninit-10.c", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f22d830827f886e6ab6631d6703089dac541a2f2/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f22d830827f886e6ab6631d6703089dac541a2f2/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-10.c?ref=f22d830827f886e6ab6631d6703089dac541a2f2", "patch": "@@ -0,0 +1,109 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wall\" } */\n+/* On Alpha EV4, dead code elimination and cfg simplification conspired\n+   to leave the register containing 'C' marked live, though all references\n+   to the variable had been removed.  */\n+\n+struct operand_data\n+{\n+  struct operand_data *next;\n+  int index;\n+  const char *predicate;\n+  const char *constraint;\n+  int mode;\n+  unsigned char n_alternatives;\n+  char address_p;\n+  char strict_low;\n+  char eliminable;\n+  char seen;\n+};\n+\n+struct data\n+{\n+  struct data *next;\n+  const char *name;\n+  const char *template;\n+  int code_number;\n+  int index_number;\n+  int lineno;\n+  int n_operands;\n+  int n_dups;\n+  int n_alternatives;\n+  int operand_number;\n+  int output_format;\n+  struct operand_data operand[40];\n+};\n+\n+extern void message_with_line (int, const char *, ...)\n+     __attribute__ ((__format__ (__printf__, 2, 3)));\n+extern int have_error;\n+\n+extern char *strchr (__const char *__s, int __c) __attribute__ ((__pure__));\n+\n+void\n+validate_insn_alternatives (d)\n+     struct data *d;\n+{\n+  int n = 0, start;\n+\n+  for (start = 0; start < d->n_operands; start++)\n+    if (d->operand[start].n_alternatives > 0)\n+      {\n+        int len, i;\n+        const char *p;\n+        char c;\t /* { dg-bogus \"used uninitialized\" \"uninitialized variable warning\" } */\n+        int which_alternative = 0;\n+        int alternative_count_unsure = 0;\n+\n+        for (p = d->operand[start].constraint; (c = *p); p += len)\n+          {\n+            len = 1;\n+\n+            if (len < 1 || (len > 1 && strchr (\",#*+=&%!0123456789\", c)))\n+              {\n+                message_with_line (d->lineno,\n+                                   \"invalid length %d for char '%c' in alternative %d of operand %d\",\n+                                    len, c, which_alternative, start);\n+                len = 1;\n+                have_error = 1;\n+              }\n+\n+            if (c == ',')\n+              {\n+                which_alternative++;\n+                continue;\n+              }\n+\n+            for (i = 1; i < len; i++)\n+              if (p[i] == '\\0')\n+                {\n+                  message_with_line (d->lineno,\n+                                     \"NUL in alternative %d of operand %d\",\n+                                     which_alternative, start);\n+                  alternative_count_unsure = 1;\n+                  break;\n+                }\n+              else if (strchr (\",#*\", p[i]))\n+                {\n+                  message_with_line (d->lineno,\n+                                     \"'%c' in alternative %d of operand %d\",\n+                                     p[i], which_alternative, start);\n+                  alternative_count_unsure = 1;\n+                }\n+          }\n+        if (alternative_count_unsure)\n+          have_error = 1;\n+        else if (n == 0)\n+          n = d->operand[start].n_alternatives;\n+        else if (n != d->operand[start].n_alternatives)\n+          {\n+            message_with_line (d->lineno,\n+                               \"wrong number of alternatives in operand %d\",\n+                               start);\n+            have_error = 1;\n+          }\n+      }\n+\n+\n+  d->n_alternatives = n;\n+}"}]}