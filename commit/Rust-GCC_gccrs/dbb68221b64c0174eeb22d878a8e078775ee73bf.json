{"sha": "dbb68221b64c0174eeb22d878a8e078775ee73bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJiNjgyMjFiNjRjMDE3NGVlYjIyZDg3OGE4ZTA3ODc3NWVlNzNiZg==", "commit": {"author": {"name": "Mark Wielaard", "email": "mjw@redhat.com", "date": "2015-09-10T15:29:44Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2015-09-10T15:29:44Z"}, "message": "Warn when comparing nonnull arguments to NULL in a function.\n\nIf an argument is marked as nonnull then passing in a NULL argument\nwill produce bad results even if the code checks against NULL. GCC\nmight optimize such checks away so warn the user when the function\ncontains such comparisons.\n\nnn.c: In function \u2018foo\u2019:\nnn.c:6:27: warning: nonnull argument \u2018bar\u2019 compared to NULL [-Wnonnull]\n void foo(void *bar) { if (!bar) abort(); }\n                           ^\ngcc/ChangeLog\n\n\t* doc/invoke.texi (Wnonnull): Also warns when comparing against NULL.\n\ngcc/c/ChangeLog\n\n       * c-typeck.c (build_binary_op): Check and warn when nonnull arg\n       parm against NULL.\n\ngcc/cp/ChangeLog\n\n       * typeck.c (cp_build_binary_op): Check and warn when nonnull arg\n       parm against NULL.\n\ngcc/testsuite/ChangeLog\n\n       * c-c++-common/nonnull-1.c: New test.\n\nFrom-SVN: r227649", "tree": {"sha": "f34f064a585942929fce66827ae853b1f48d5357", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f34f064a585942929fce66827ae853b1f48d5357"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbb68221b64c0174eeb22d878a8e078775ee73bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbb68221b64c0174eeb22d878a8e078775ee73bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbb68221b64c0174eeb22d878a8e078775ee73bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbb68221b64c0174eeb22d878a8e078775ee73bf/comments", "author": null, "committer": null, "parents": [{"sha": "0815fd250302b45a3aadd9b32d8559c7b47d86e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0815fd250302b45a3aadd9b32d8559c7b47d86e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0815fd250302b45a3aadd9b32d8559c7b47d86e4"}], "stats": {"total": 69, "additions": 69, "deletions": 0}, "files": [{"sha": "df8cc5d6aee9dd7dbf9c5685deda394a70e8b45b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbb68221b64c0174eeb22d878a8e078775ee73bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbb68221b64c0174eeb22d878a8e078775ee73bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dbb68221b64c0174eeb22d878a8e078775ee73bf", "patch": "@@ -1,3 +1,7 @@\n+2015-09-09  Mark Wielaard  <mjw@redhat.com>\n+\n+\t* doc/invoke.texi (Wnonnull): Also warns when comparing against NULL.\n+\n 2015-09-10  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/67506"}, {"sha": "325686a4b1c5e37bc97c9d1e43109e780b4dc99f", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbb68221b64c0174eeb22d878a8e078775ee73bf/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbb68221b64c0174eeb22d878a8e078775ee73bf/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=dbb68221b64c0174eeb22d878a8e078775ee73bf", "patch": "@@ -1,3 +1,8 @@\n+2015-09-09  Mark Wielaard  <mjw@redhat.com>\n+\n+\t* c-typeck.c (build_binary_op): Check and warn when nonnull arg\n+\tparm against NULL.\n+\n 2015-09-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/67502"}, {"sha": "4108f27ab7c53839d0a867004ba6bbd24cecffb0", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbb68221b64c0174eeb22d878a8e078775ee73bf/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbb68221b64c0174eeb22d878a8e078775ee73bf/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=dbb68221b64c0174eeb22d878a8e078775ee73bf", "patch": "@@ -10803,6 +10803,11 @@ build_binary_op (location_t location, enum tree_code code,\n \tshort_compare = 1;\n       else if (code0 == POINTER_TYPE && null_pointer_constant_p (orig_op1))\n \t{\n+\t  if (warn_nonnull\n+\t      && TREE_CODE (op0) == PARM_DECL && nonnull_arg_p (op0))\n+\t    warning_at (location, OPT_Wnonnull,\n+\t\t\t\"nonnull argument %qD compared to NULL\", op0);\n+\n \t  if (TREE_CODE (op0) == ADDR_EXPR\n \t      && decl_with_nonnull_addr_p (TREE_OPERAND (op0, 0)))\n \t    {\n@@ -10823,6 +10828,11 @@ build_binary_op (location_t location, enum tree_code code,\n \t}\n       else if (code1 == POINTER_TYPE && null_pointer_constant_p (orig_op0))\n \t{\n+\t  if (warn_nonnull\n+\t      && TREE_CODE (op1) == PARM_DECL && nonnull_arg_p (op1))\n+\t    warning_at (location, OPT_Wnonnull,\n+\t\t\t\"nonnull argument %qD compared to NULL\", op1);\n+\n \t  if (TREE_CODE (op1) == ADDR_EXPR\n \t      && decl_with_nonnull_addr_p (TREE_OPERAND (op1, 0)))\n \t    {"}, {"sha": "339277339b7b64038d47a4261209c70b3f8144e7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbb68221b64c0174eeb22d878a8e078775ee73bf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbb68221b64c0174eeb22d878a8e078775ee73bf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=dbb68221b64c0174eeb22d878a8e078775ee73bf", "patch": "@@ -1,3 +1,8 @@\n+2015-09-09  Mark Wielaard  <mjw@redhat.com>\n+\n+\t* typeck.c (cp_build_binary_op): Check and warn when nonnull arg\n+\tparm against NULL.\n+\n 2015-09-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/67522"}, {"sha": "482e42c819b3311770479e8f288e4d8a4051a236", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbb68221b64c0174eeb22d878a8e078775ee73bf/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbb68221b64c0174eeb22d878a8e078775ee73bf/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=dbb68221b64c0174eeb22d878a8e078775ee73bf", "patch": "@@ -4438,6 +4438,11 @@ cp_build_binary_op (location_t location,\n \t       || (code0 == POINTER_TYPE\n \t\t   && TYPE_PTR_P (type1) && integer_zerop (op1)))\n \t{\n+\t  if (warn_nonnull\n+\t      && TREE_CODE (op0) == PARM_DECL && nonnull_arg_p (op0))\n+\t    warning_at (location, OPT_Wnonnull,\n+\t\t\t\"nonnull argument %qD compared to NULL\", op0);\n+\n \t  if (TYPE_PTR_P (type1))\n \t    result_type = composite_pointer_type (type0, type1, op0, op1,\n \t\t\t\t\t\t  CPO_COMPARISON, complain);\n@@ -4477,6 +4482,11 @@ cp_build_binary_op (location_t location,\n \t       || (code1 == POINTER_TYPE\n \t\t   && TYPE_PTR_P (type0) && integer_zerop (op0)))\n \t{\n+\t  if (warn_nonnull\n+\t      && TREE_CODE (op1) == PARM_DECL && nonnull_arg_p (op1))\n+\t    warning_at (location, OPT_Wnonnull,\n+\t\t\t\"nonnull argument %qD compared to NULL\", op1);\n+\n \t  if (TYPE_PTR_P (type0))\n \t    result_type = composite_pointer_type (type0, type1, op0, op1,\n \t\t\t\t\t\t  CPO_COMPARISON, complain);"}, {"sha": "518d68933c9f343667e14733c327c3705e9708f1", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbb68221b64c0174eeb22d878a8e078775ee73bf/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbb68221b64c0174eeb22d878a8e078775ee73bf/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=dbb68221b64c0174eeb22d878a8e078775ee73bf", "patch": "@@ -3720,6 +3720,9 @@ formats that may yield only a two-digit year.\n Warn about passing a null pointer for arguments marked as\n requiring a non-null value by the @code{nonnull} function attribute.\n \n+Also warns when comparing an argument marked with the @code{nonnull}\n+function attribute against null inside the function.\n+\n @option{-Wnonnull} is included in @option{-Wall} and @option{-Wformat}.  It\n can be disabled with the @option{-Wno-nonnull} option.\n "}, {"sha": "f99682cf352a64f50806e3f7e9d8d17173bfac3e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbb68221b64c0174eeb22d878a8e078775ee73bf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbb68221b64c0174eeb22d878a8e078775ee73bf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dbb68221b64c0174eeb22d878a8e078775ee73bf", "patch": "@@ -1,3 +1,7 @@\n+2015-09-09  Mark Wielaard  <mjw@redhat.com>\n+\n+\t* c-c++-common/nonnull-1.c: New test.\n+\n 2015-09-10  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/66993"}, {"sha": "b5c3d7f8866a9f7264f9876b329c7b0ed75c431b", "filename": "gcc/testsuite/c-c++-common/nonnull-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbb68221b64c0174eeb22d878a8e078775ee73bf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fnonnull-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbb68221b64c0174eeb22d878a8e078775ee73bf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fnonnull-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fnonnull-1.c?ref=dbb68221b64c0174eeb22d878a8e078775ee73bf", "patch": "@@ -0,0 +1,28 @@\n+/* Test for the bad usage of \"nonnull\" function attribute parms.  */\n+/*  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wnonnull\" } */\n+\n+#include <stddef.h>\n+#include <stdlib.h>\n+\n+void foo(void *bar) __attribute__((nonnull(1)));\n+\n+void foo(void *bar) { if (!bar) abort(); } /* { dg-warning \"nonnull argument\" \"bar compared to NULL\" } */\n+\n+extern int func (char *, char *, char *, char *) __attribute__((nonnull));\n+\n+int\n+func (char *cp1, char *cp2, char *cp3, char *cp4)\n+{\n+  if (cp1) /* { dg-warning \"nonnull argument\" \"cp1 compared to NULL\" } */\n+    return 1;\n+\n+  if (cp2 == NULL) /* { dg-warning \"nonnull argument\" \"cp2 compared to NULL\" } */\n+    return 2;\n+\n+  if (NULL != cp3) /* { dg-warning \"nonnull argument\" \"cp3 compared to NULL\" } */\n+    return 3;\n+\n+  return (cp4 != 0) ? 0 : 1; /* { dg-warning \"nonnull argument\" \"cp4 compared to NULL\" } */\n+}"}]}