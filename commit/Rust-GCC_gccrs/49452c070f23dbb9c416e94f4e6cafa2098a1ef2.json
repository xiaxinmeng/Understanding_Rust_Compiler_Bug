{"sha": "49452c070f23dbb9c416e94f4e6cafa2098a1ef2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk0NTJjMDcwZjIzZGJiOWM0MTZlOTRmNGU2Y2FmYTIwOThhMWVmMg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2007-05-14T19:42:47Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-05-14T19:42:47Z"}, "message": "builtins.c (expand_builtin_mathfn): Use EXPAND_NORMAL instead of 0 in the call to expand_expr().\n\n        * builtins.c (expand_builtin_mathfn): Use EXPAND_NORMAL instead\n        of 0 in the call to expand_expr().\n        (expand_builtin_mathfn_3): Ditto.\n        (expand_builtin_interclass_mathfn): Ditto.\n        (expand_builtin_cexpi): Ditto.\n        (expand_builtin_int_roundingfn): Ditto.\n        (expand_builtin_int_roundingfn_2): Ditto.\n        (expand_builtin_pow): Ditto.\n        (expand_builtin_powi): Ditto.\n        (expand_builtin_bswap): Ditto.\n        (expand_builtin_unop): Ditto.\n        (expand_builtin_fabs): Ditto.\n        (get_builtin_sync_mem): Use NULL_RTX instead of NULL in\n        the call to expand_expr().\n        (expand_builtin_sync_operation): Ditto.\n        (expand_builtin_compare_and_swap): Ditto.\n        (expand_builtin_lock_test_and_set): Ditto.\n        * except.c (expand_builtin_eh_return_data_regno): Use EXPAND_NORMAL\n        instead of 0 in the call to expand_expr().\n        (expand_builtin_extract_return_addr): Ditto.\n        (expand_builtin_eh_return): Ditto.\n        (expand_eh_return): Ditto.\n        * explow.c (expr_size): Ditto.\n        * expr.c (optimize_bitfield_assignment_op): Ditto.\n        (expand_assignement): Ditto.\n        (store_expr): Ditto.\n        (store_field): Ditto.\n        (expand_expr_addr_expr_1): Use NULL_RTX instead of NULL in\n        the call to expand_expr().\n        (expand_expr_real_1) [COMPLEX_CST]: Use EXPAND_NORMAL instead of 0\n        in the call to expand_expr().\n        [CONSTRUCTOR, PLUS_EXPR, MINUS_EXPR, NEGATE_EXPR, ABS_EXPR,\n        BIT_NOT_EXPR, LSHIFT_EXPR, LT_EXPR, TRUTH_NOT_EXPR]: Ditto.\n        [VEC_UNPACK_HI_EXPR, VEC_UNPACK_LO]: Use expand_normal() instead\n        of expand_expr().\n        * optabs.c (expand_vec_shift_expr): Ditto.\n        (expand_vec_cond_expr): Ditto.\n        (vector_compare_rtx): Use EXPAND_STACK_PARM instead of 1 in the\n        call to expand_expr().\n        * stmt.c (expand_return): Use EXPAND_NORMAL instead of 0\n        in the call to expand_expr().\n\nFrom-SVN: r124722", "tree": {"sha": "ae40ab631284eccb564970c970d22f098e2d57a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae40ab631284eccb564970c970d22f098e2d57a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49452c070f23dbb9c416e94f4e6cafa2098a1ef2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49452c070f23dbb9c416e94f4e6cafa2098a1ef2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49452c070f23dbb9c416e94f4e6cafa2098a1ef2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49452c070f23dbb9c416e94f4e6cafa2098a1ef2/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1529b8d9bece1721f2f12277534b4bf287ce1982", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1529b8d9bece1721f2f12277534b4bf287ce1982", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1529b8d9bece1721f2f12277534b4bf287ce1982"}], "stats": {"total": 168, "additions": 111, "deletions": 57}, "files": [{"sha": "21bb78ed790bdaae929c8ebd0a22270af6c550a9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49452c070f23dbb9c416e94f4e6cafa2098a1ef2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49452c070f23dbb9c416e94f4e6cafa2098a1ef2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=49452c070f23dbb9c416e94f4e6cafa2098a1ef2", "patch": "@@ -1,3 +1,47 @@\n+2007-05-14  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* builtins.c (expand_builtin_mathfn): Use EXPAND_NORMAL instead\n+\tof 0 in the call to expand_expr().\n+\t(expand_builtin_mathfn_3): Ditto.\n+\t(expand_builtin_interclass_mathfn): Ditto.\n+\t(expand_builtin_cexpi): Ditto.\n+\t(expand_builtin_int_roundingfn): Ditto.\n+\t(expand_builtin_int_roundingfn_2): Ditto.\n+\t(expand_builtin_pow): Ditto.\n+\t(expand_builtin_powi): Ditto.\n+\t(expand_builtin_bswap): Ditto.\n+\t(expand_builtin_unop): Ditto.\n+\t(expand_builtin_fabs): Ditto.\n+\t(get_builtin_sync_mem): Use NULL_RTX instead of NULL in\n+\tthe call to expand_expr().\n+\t(expand_builtin_sync_operation): Ditto.\n+\t(expand_builtin_compare_and_swap): Ditto.\n+\t(expand_builtin_lock_test_and_set): Ditto.\n+\t* except.c (expand_builtin_eh_return_data_regno): Use EXPAND_NORMAL\n+\tinstead of 0 in the call to expand_expr().\n+\t(expand_builtin_extract_return_addr): Ditto.\n+\t(expand_builtin_eh_return): Ditto.\n+\t(expand_eh_return): Ditto.\n+\t* explow.c (expr_size): Ditto.\n+\t* expr.c (optimize_bitfield_assignment_op): Ditto.\n+\t(expand_assignement): Ditto.\n+\t(store_expr): Ditto.\n+\t(store_field): Ditto.\n+\t(expand_expr_addr_expr_1): Use NULL_RTX instead of NULL in\n+\tthe call to expand_expr().\n+\t(expand_expr_real_1) [COMPLEX_CST]: Use EXPAND_NORMAL instead of 0\n+\tin the call to expand_expr().\n+\t[CONSTRUCTOR, PLUS_EXPR, MINUS_EXPR, NEGATE_EXPR, ABS_EXPR,\n+\tBIT_NOT_EXPR, LSHIFT_EXPR, LT_EXPR, TRUTH_NOT_EXPR]: Ditto.\n+\t[VEC_UNPACK_HI_EXPR, VEC_UNPACK_LO]: Use expand_normal() instead\n+\tof expand_expr().\n+\t* optabs.c (expand_vec_shift_expr): Ditto.\n+\t(expand_vec_cond_expr): Ditto.\n+\t(vector_compare_rtx): Use EXPAND_STACK_PARM instead of 1 in the\n+\tcall to expand_expr().\n+\t* stmt.c (expand_return): Use EXPAND_NORMAL instead of 0\n+\tin the call to expand_expr().\n+\n 2007-05-14  Dave Korn  <dave.korn@artimi.com>\n \n \t* genautomata.c (gen_regexp_el):  Allocate correct size for regexp."}, {"sha": "2de66dd4f60db67b77588f46e18b4e2df6f90913", "filename": "gcc/builtins.c", "status": "modified", "additions": 25, "deletions": 22, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49452c070f23dbb9c416e94f4e6cafa2098a1ef2/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49452c070f23dbb9c416e94f4e6cafa2098a1ef2/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=49452c070f23dbb9c416e94f4e6cafa2098a1ef2", "patch": "@@ -1884,7 +1884,7 @@ expand_builtin_mathfn (tree exp, rtx target, rtx subtarget)\n \t  exp = build_call_expr (fndecl, 1, arg);\n \t}\n \n-      op0 = expand_expr (arg, subtarget, VOIDmode, 0);\n+      op0 = expand_expr (arg, subtarget, VOIDmode, EXPAND_NORMAL);\n \n       start_sequence ();\n \n@@ -2137,7 +2137,7 @@ expand_builtin_mathfn_3 (tree exp, rtx target, rtx subtarget)\n \t  exp = build_call_expr (fndecl, 1, arg);\n \t}\n \n-      op0 = expand_expr (arg, subtarget, VOIDmode, 0);\n+      op0 = expand_expr (arg, subtarget, VOIDmode, EXPAND_NORMAL);\n \n       start_sequence ();\n \n@@ -2249,7 +2249,7 @@ expand_builtin_interclass_mathfn (tree exp, rtx target, rtx subtarget)\n \t  exp = build_call_expr (fndecl, 1, arg);\n \t}\n \n-      op0 = expand_expr (arg, subtarget, VOIDmode, 0);\n+      op0 = expand_expr (arg, subtarget, VOIDmode, EXPAND_NORMAL);\n \n       if (mode != GET_MODE (op0))\n \top0 = convert_to_mode (mode, op0, 0);\n@@ -2341,7 +2341,7 @@ expand_builtin_cexpi (tree exp, rtx target, rtx subtarget)\n       op1 = gen_reg_rtx (mode);\n       op2 = gen_reg_rtx (mode);\n \n-      op0 = expand_expr (arg, subtarget, VOIDmode, 0);\n+      op0 = expand_expr (arg, subtarget, VOIDmode, EXPAND_NORMAL);\n \n       /* Compute into op1 and op2.  */\n       expand_twoval_unop (sincos_optab, op0, op2, op1, 0);\n@@ -2412,14 +2412,14 @@ expand_builtin_cexpi (tree exp, rtx target, rtx subtarget)\n       /* Make sure not to fold the cexp call again.  */\n       call = build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (fn)), fn);\n       return expand_expr (build_call_nary (ctype, call, 1, narg), \n-\t\t\t  target, VOIDmode, 0);\n+\t\t\t  target, VOIDmode, EXPAND_NORMAL);\n     }\n \n   /* Now build the proper return type.  */\n   return expand_expr (build2 (COMPLEX_EXPR, build_complex_type (type),\n \t\t\t      make_tree (TREE_TYPE (arg), op2),\n \t\t\t      make_tree (TREE_TYPE (arg), op1)),\n-\t\t      target, VOIDmode, 0);\n+\t\t      target, VOIDmode, EXPAND_NORMAL);\n }\n \n /* Expand a call to one of the builtin rounding functions gcc defines\n@@ -2479,7 +2479,7 @@ expand_builtin_int_roundingfn (tree exp, rtx target, rtx subtarget)\n       exp = build_call_expr (fndecl, 1, arg);\n     }\n \n-  op0 = expand_expr (arg, subtarget, VOIDmode, 0);\n+  op0 = expand_expr (arg, subtarget, VOIDmode, EXPAND_NORMAL);\n \n   start_sequence ();\n \n@@ -2608,7 +2608,7 @@ expand_builtin_int_roundingfn_2 (tree exp, rtx target, rtx subtarget)\n       exp = build_call_expr (fndecl, 1, arg);\n     }\n \n-  op0 = expand_expr (arg, subtarget, VOIDmode, 0);\n+  op0 = expand_expr (arg, subtarget, VOIDmode, EXPAND_NORMAL);\n \n   start_sequence ();\n \n@@ -2875,7 +2875,7 @@ expand_builtin_pow (tree exp, rtx target, rtx subtarget)\n \t      && !optimize_size\n \t      && powi_cost (n) <= POWI_MAX_MULTS)))\n     {\n-      op = expand_expr (arg0, subtarget, VOIDmode, 0);\n+      op = expand_expr (arg0, subtarget, VOIDmode, EXPAND_NORMAL);\n       if (n != 1)\n \t{\n \t  op = force_reg (mode, op);\n@@ -2904,7 +2904,7 @@ expand_builtin_pow (tree exp, rtx target, rtx subtarget)\n \t  op = expand_builtin (call_expr, NULL_RTX, subtarget, mode, 0);\n \t  if (n != 1)\n \t    {\n-\t      op2 = expand_expr (narg0, subtarget, VOIDmode, 0);\n+\t      op2 = expand_expr (narg0, subtarget, VOIDmode, EXPAND_NORMAL);\n \t      op2 = force_reg (mode, op2);\n \t      op2 = expand_powi (op2, mode, abs (n / 2));\n \t      op = expand_simple_binop (mode, MULT, op, op2, NULL_RTX,\n@@ -2948,7 +2948,7 @@ expand_builtin_pow (tree exp, rtx target, rtx subtarget)\n \t\t\t\t      0, OPTAB_LIB_WIDEN);\n \t  if (n != 1)\n \t    {\n-\t      op2 = expand_expr (narg0, subtarget, VOIDmode, 0);\n+\t      op2 = expand_expr (narg0, subtarget, VOIDmode, EXPAND_NORMAL);\n \t      op2 = force_reg (mode, op2);\n \t      op2 = expand_powi (op2, mode, abs (n / 3));\n \t      op = expand_simple_binop (mode, MULT, op, op2, NULL_RTX,\n@@ -3002,7 +3002,7 @@ expand_builtin_powi (tree exp, rtx target, rtx subtarget)\n \t      || (! optimize_size\n \t\t  && powi_cost (n) <= POWI_MAX_MULTS)))\n \t{\n-\t  op0 = expand_expr (arg0, subtarget, VOIDmode, 0);\n+\t  op0 = expand_expr (arg0, subtarget, VOIDmode, EXPAND_NORMAL);\n \t  op0 = force_reg (mode, op0);\n \t  return expand_powi (op0, mode, n);\n \t}\n@@ -3016,10 +3016,10 @@ expand_builtin_powi (tree exp, rtx target, rtx subtarget)\n   if (target == NULL_RTX)\n     target = gen_reg_rtx (mode);\n \n-  op0 = expand_expr (arg0, subtarget, mode, 0);\n+  op0 = expand_expr (arg0, subtarget, mode, EXPAND_NORMAL);\n   if (GET_MODE (op0) != mode)\n     op0 = convert_to_mode (mode, op0, 0);\n-  op1 = expand_expr (arg1, 0, mode2, 0);\n+  op1 = expand_expr (arg1, NULL_RTX, mode2, EXPAND_NORMAL);\n   if (GET_MODE (op1) != mode2)\n     op1 = convert_to_mode (mode2, op1, 0);\n \n@@ -5039,7 +5039,7 @@ expand_builtin_bswap (tree exp, rtx target, rtx subtarget)\n \n   arg = CALL_EXPR_ARG (exp, 0);\n   mode = TYPE_MODE (TREE_TYPE (arg));\n-  op0 = expand_expr (arg, subtarget, VOIDmode, 0);\n+  op0 = expand_expr (arg, subtarget, VOIDmode, EXPAND_NORMAL);\n \n   target = expand_unop (mode, bswap_optab, op0, target, 1);\n \n@@ -5063,7 +5063,8 @@ expand_builtin_unop (enum machine_mode target_mode, tree exp, rtx target,\n     return NULL_RTX;\n \n   /* Compute the argument.  */\n-  op0 = expand_expr (CALL_EXPR_ARG (exp, 0), subtarget, VOIDmode, 0);\n+  op0 = expand_expr (CALL_EXPR_ARG (exp, 0), subtarget,\n+\t\t     VOIDmode, EXPAND_NORMAL);\n   /* Compute op, into TARGET if possible.\n      Set TARGET to wherever the result comes back.  */\n   target = expand_unop (TYPE_MODE (TREE_TYPE (CALL_EXPR_ARG (exp, 0))),\n@@ -5142,7 +5143,7 @@ expand_builtin_fabs (tree exp, rtx target, rtx subtarget)\n \n   arg = CALL_EXPR_ARG (exp, 0);\n   mode = TYPE_MODE (TREE_TYPE (arg));\n-  op0 = expand_expr (arg, subtarget, VOIDmode, 0);\n+  op0 = expand_expr (arg, subtarget, VOIDmode, EXPAND_NORMAL);\n   return expand_abs (mode, op0, target, 0, safe_from_p (target, arg, 1));\n }\n \n@@ -5766,7 +5767,7 @@ get_builtin_sync_mem (tree loc, enum machine_mode mode)\n {\n   rtx addr, mem;\n \n-  addr = expand_expr (loc, NULL, Pmode, EXPAND_SUM);\n+  addr = expand_expr (loc, NULL_RTX, Pmode, EXPAND_SUM);\n \n   /* Note that we explicitly do not want any alias information for this\n      memory, so that we kill all other live memories.  Otherwise we don't\n@@ -5799,7 +5800,7 @@ expand_builtin_sync_operation (enum machine_mode mode, tree exp,\n   /* Expand the operands.  */\n   mem = get_builtin_sync_mem (CALL_EXPR_ARG (exp, 0), mode);\n \n-  val = expand_expr (CALL_EXPR_ARG (exp, 1), NULL, mode, EXPAND_NORMAL);\n+  val = expand_expr (CALL_EXPR_ARG (exp, 1), NULL_RTX, mode, EXPAND_NORMAL);\n   /* If VAL is promoted to a wider mode, convert it back to MODE.  Take care\n      of CONST_INTs, where we know the old_mode only from the call argument.  */\n   old_mode = GET_MODE (val);\n@@ -5829,15 +5830,17 @@ expand_builtin_compare_and_swap (enum machine_mode mode, tree exp,\n   mem = get_builtin_sync_mem (CALL_EXPR_ARG (exp, 0), mode);\n \n \n-  old_val = expand_expr (CALL_EXPR_ARG (exp, 1), NULL, mode, EXPAND_NORMAL);\n+  old_val = expand_expr (CALL_EXPR_ARG (exp, 1), NULL_RTX,\n+\t\t\t mode, EXPAND_NORMAL);\n   /* If VAL is promoted to a wider mode, convert it back to MODE.  Take care\n      of CONST_INTs, where we know the old_mode only from the call argument.  */\n   old_mode = GET_MODE (old_val);\n   if (old_mode == VOIDmode)\n     old_mode = TYPE_MODE (TREE_TYPE (CALL_EXPR_ARG (exp, 1)));\n   old_val = convert_modes (mode, old_mode, old_val, 1);\n \n-  new_val = expand_expr (CALL_EXPR_ARG (exp, 2), NULL, mode, EXPAND_NORMAL);\n+  new_val = expand_expr (CALL_EXPR_ARG (exp, 2), NULL_RTX,\n+\t\t\t mode, EXPAND_NORMAL);\n   /* If VAL is promoted to a wider mode, convert it back to MODE.  Take care\n      of CONST_INTs, where we know the old_mode only from the call argument.  */\n   old_mode = GET_MODE (new_val);\n@@ -5866,7 +5869,7 @@ expand_builtin_lock_test_and_set (enum machine_mode mode, tree exp,\n \n   /* Expand the operands.  */\n   mem = get_builtin_sync_mem (CALL_EXPR_ARG (exp, 0), mode);\n-  val = expand_expr (CALL_EXPR_ARG (exp, 1), NULL, mode, EXPAND_NORMAL);\n+  val = expand_expr (CALL_EXPR_ARG (exp, 1), NULL_RTX, mode, EXPAND_NORMAL);\n   /* If VAL is promoted to a wider mode, convert it back to MODE.  Take care\n      of CONST_INTs, where we know the old_mode only from the call argument.  */\n   old_mode = GET_MODE (val);"}, {"sha": "c360ef7f5609c7146e7fa5966d2cf76a38d94a7b", "filename": "gcc/except.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49452c070f23dbb9c416e94f4e6cafa2098a1ef2/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49452c070f23dbb9c416e94f4e6cafa2098a1ef2/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=49452c070f23dbb9c416e94f4e6cafa2098a1ef2", "patch": "@@ -2898,7 +2898,7 @@ expand_builtin_eh_return_data_regno (tree exp)\n rtx\n expand_builtin_extract_return_addr (tree addr_tree)\n {\n-  rtx addr = expand_expr (addr_tree, NULL_RTX, Pmode, 0);\n+  rtx addr = expand_expr (addr_tree, NULL_RTX, Pmode, EXPAND_NORMAL);\n \n   if (GET_MODE (addr) != Pmode\n       && GET_MODE (addr) != VOIDmode)\n@@ -2930,7 +2930,7 @@ expand_builtin_extract_return_addr (tree addr_tree)\n rtx\n expand_builtin_frob_return_addr (tree addr_tree)\n {\n-  rtx addr = expand_expr (addr_tree, NULL_RTX, ptr_mode, 0);\n+  rtx addr = expand_expr (addr_tree, NULL_RTX, ptr_mode, EXPAND_NORMAL);\n \n   addr = convert_memory_address (Pmode, addr);\n \n@@ -2952,15 +2952,17 @@ expand_builtin_eh_return (tree stackadj_tree ATTRIBUTE_UNUSED,\n   rtx tmp;\n \n #ifdef EH_RETURN_STACKADJ_RTX\n-  tmp = expand_expr (stackadj_tree, cfun->eh->ehr_stackadj, VOIDmode, 0);\n+  tmp = expand_expr (stackadj_tree, cfun->eh->ehr_stackadj,\n+\t\t     VOIDmode, EXPAND_NORMAL);\n   tmp = convert_memory_address (Pmode, tmp);\n   if (!cfun->eh->ehr_stackadj)\n     cfun->eh->ehr_stackadj = copy_to_reg (tmp);\n   else if (tmp != cfun->eh->ehr_stackadj)\n     emit_move_insn (cfun->eh->ehr_stackadj, tmp);\n #endif\n \n-  tmp = expand_expr (handler_tree, cfun->eh->ehr_handler, VOIDmode, 0);\n+  tmp = expand_expr (handler_tree, cfun->eh->ehr_handler,\n+\t\t     VOIDmode, EXPAND_NORMAL);\n   tmp = convert_memory_address (Pmode, tmp);\n   if (!cfun->eh->ehr_handler)\n     cfun->eh->ehr_handler = copy_to_reg (tmp);\n@@ -3018,7 +3020,7 @@ expand_eh_return (void)\n rtx\n expand_builtin_extend_pointer (tree addr_tree)\n {\n-  rtx addr = expand_expr (addr_tree, NULL_RTX, ptr_mode, 0);\n+  rtx addr = expand_expr (addr_tree, NULL_RTX, ptr_mode, EXPAND_NORMAL);\n   int extend;\n \n #ifdef POINTERS_EXTEND_UNSIGNED"}, {"sha": "79ba5c7e2919c1ae6f5dec628c1040cc81607c90", "filename": "gcc/explow.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49452c070f23dbb9c416e94f4e6cafa2098a1ef2/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49452c070f23dbb9c416e94f4e6cafa2098a1ef2/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=49452c070f23dbb9c416e94f4e6cafa2098a1ef2", "patch": "@@ -251,7 +251,7 @@ expr_size (tree exp)\n       size = SUBSTITUTE_PLACEHOLDER_IN_EXPR (size, exp);\n     }\n \n-  return expand_expr (size, NULL_RTX, TYPE_MODE (sizetype), 0);\n+  return expand_expr (size, NULL_RTX, TYPE_MODE (sizetype), EXPAND_NORMAL);\n }\n \n /* Return a wide integer for the size in bytes of the value of EXP, or -1"}, {"sha": "846c9f696ee27accd4db499fadc3a89264325804", "filename": "gcc/expr.c", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49452c070f23dbb9c416e94f4e6cafa2098a1ef2/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49452c070f23dbb9c416e94f4e6cafa2098a1ef2/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=49452c070f23dbb9c416e94f4e6cafa2098a1ef2", "patch": "@@ -3995,7 +3995,7 @@ optimize_bitfield_assignment_op (unsigned HOST_WIDE_INT bitsize,\n \t  && (bitsize != 1 || TREE_CODE (op1) != INTEGER_CST))\n \tbreak;\n \n-      value = expand_expr (op1, NULL_RTX, str_mode, 0);\n+      value = expand_expr (op1, NULL_RTX, str_mode, EXPAND_NORMAL);\n       value = convert_modes (str_mode,\n \t\t\t     TYPE_MODE (TREE_TYPE (op1)), value,\n \t\t\t     TYPE_UNSIGNED (TREE_TYPE (op1)));\n@@ -4028,7 +4028,7 @@ optimize_bitfield_assignment_op (unsigned HOST_WIDE_INT bitsize,\n     case BIT_XOR_EXPR:\n       if (TREE_CODE (op1) != INTEGER_CST)\n \tbreak;\n-      value = expand_expr (op1, NULL_RTX, GET_MODE (str_rtx), 0);\n+      value = expand_expr (op1, NULL_RTX, GET_MODE (str_rtx), EXPAND_NORMAL);\n       value = convert_modes (GET_MODE (str_rtx),\n \t\t\t     TYPE_MODE (TREE_TYPE (op1)), value,\n \t\t\t     TYPE_UNSIGNED (TREE_TYPE (op1)));\n@@ -4252,7 +4252,7 @@ expand_assignment (tree to, tree from)\n       rtx temp;\n \n       push_temp_slots ();\n-      temp = expand_expr (from, 0, GET_MODE (to_rtx), 0);\n+      temp = expand_expr (from, NULL_RTX, GET_MODE (to_rtx), EXPAND_NORMAL);\n \n       if (GET_CODE (to_rtx) == PARALLEL)\n \temit_group_load (to_rtx, temp, TREE_TYPE (from),\n@@ -4328,7 +4328,7 @@ store_expr (tree exp, rtx target, int call_param_p)\n \t branch and an rvalue in the other. Here, we resolve attempts to\n \t store the throw expression's nonexistent result.  */\n       gcc_assert (!call_param_p);\n-      expand_expr (exp, const0_rtx, VOIDmode, 0);\n+      expand_expr (exp, const0_rtx, VOIDmode, EXPAND_NORMAL);\n       return NULL_RTX;\n     }\n   if (TREE_CODE (exp) == COMPOUND_EXPR)\n@@ -5524,7 +5524,7 @@ store_field (rtx target, HOST_WIDE_INT bitsize, HOST_WIDE_INT bitpos,\n   /* If we have nothing to store, do nothing unless the expression has\n      side-effects.  */\n   if (bitsize == 0)\n-    return expand_expr (exp, const0_rtx, VOIDmode, 0);\n+    return expand_expr (exp, const0_rtx, VOIDmode, EXPAND_NORMAL);\n   else if (bitsize >= 0 && bitsize < HOST_BITS_PER_WIDE_INT)\n     width_mask = ((HOST_WIDE_INT) 1 << bitsize) - 1;\n \n@@ -6630,7 +6630,7 @@ expand_expr_addr_expr_1 (tree exp, rtx target, enum machine_mode tmode,\n \n       if (modifier != EXPAND_NORMAL)\n \tresult = force_operand (result, NULL);\n-      tmp = expand_expr (offset, NULL, tmode, EXPAND_NORMAL);\n+      tmp = expand_expr (offset, NULL_RTX, tmode, EXPAND_NORMAL);\n \n       result = convert_memory_address (tmode, result);\n       tmp = convert_memory_address (tmode, tmp);\n@@ -7111,8 +7111,8 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t  itarg = XEXP (original_target, 1);\n \n \t  /* Move the real and imaginary parts separately.  */\n-\t  op0 = expand_expr (TREE_REALPART (exp), rtarg, mode, 0);\n-\t  op1 = expand_expr (TREE_IMAGPART (exp), itarg, mode, 0);\n+\t  op0 = expand_expr (TREE_REALPART (exp), rtarg, mode, EXPAND_NORMAL);\n+\t  op1 = expand_expr (TREE_IMAGPART (exp), itarg, mode, EXPAND_NORMAL);\n \n \t  if (op0 != rtarg)\n \t    emit_move_insn (rtarg, op0);\n@@ -7182,7 +7182,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t  tree value;\n \n \t  FOR_EACH_CONSTRUCTOR_VALUE (CONSTRUCTOR_ELTS (exp), idx, value)\n-\t    expand_expr (value, const0_rtx, VOIDmode, 0);\n+\t    expand_expr (value, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \n \t  return const0_rtx;\n \t}\n@@ -8010,7 +8010,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t\t\t\t   TREE_OPERAND (subsubexp1, 0),\n \t\t\t\t   NULL_RTX, &op0, &op1, EXPAND_NORMAL);\n \t\t  op2 = expand_expr (TREE_OPERAND (exp, 1), subtarget,\n-\t\t\t\t     VOIDmode, 0);\n+\t\t\t\t     VOIDmode, EXPAND_NORMAL);\n \t\t  temp = expand_ternary_op (mode, this_optab, op0, op1, op2,\n \t\t\t\t\t    target, unsignedp);\n \t\t  gcc_assert (temp);\n@@ -8165,7 +8165,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t\t\t\t   TREE_OPERAND (subsubexp1, 0),\n \t\t\t\t   NULL_RTX, &op0, &op1, EXPAND_NORMAL);\n \t\t  op2 = expand_expr (TREE_OPERAND (exp, 0), subtarget,\n-\t\t\t\t     VOIDmode, 0);\n+\t\t\t\t     VOIDmode, EXPAND_NORMAL);\n \t\t  temp = expand_ternary_op (mode, this_optab, op0, op1, op2,\n \t\t\t\t\t    target, unsignedp);\n \t\t  gcc_assert (temp);\n@@ -8410,7 +8410,8 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n       return target;\n \n     case NEGATE_EXPR:\n-      op0 = expand_expr (TREE_OPERAND (exp, 0), subtarget, VOIDmode, 0);\n+      op0 = expand_expr (TREE_OPERAND (exp, 0), subtarget,\n+\t\t\t VOIDmode, EXPAND_NORMAL);\n       if (modifier == EXPAND_STACK_PARM)\n \ttarget = 0;\n       temp = expand_unop (mode,\n@@ -8420,7 +8421,8 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n       return REDUCE_BIT_FIELD (temp);\n \n     case ABS_EXPR:\n-      op0 = expand_expr (TREE_OPERAND (exp, 0), subtarget, VOIDmode, 0);\n+      op0 = expand_expr (TREE_OPERAND (exp, 0), subtarget,\n+\t\t\t VOIDmode, EXPAND_NORMAL);\n       if (modifier == EXPAND_STACK_PARM)\n \ttarget = 0;\n \n@@ -8552,7 +8554,8 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n       return target;\n \n     case BIT_NOT_EXPR:\n-      op0 = expand_expr (TREE_OPERAND (exp, 0), subtarget, VOIDmode, 0);\n+      op0 = expand_expr (TREE_OPERAND (exp, 0), subtarget,\n+\t\t\t VOIDmode, EXPAND_NORMAL);\n       if (modifier == EXPAND_STACK_PARM)\n \ttarget = 0;\n       temp = expand_unop (mode, one_cmpl_optab, op0, target, 1);\n@@ -8595,7 +8598,8 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \tsubtarget = 0;\n       if (modifier == EXPAND_STACK_PARM)\n \ttarget = 0;\n-      op0 = expand_expr (TREE_OPERAND (exp, 0), subtarget, VOIDmode, 0);\n+      op0 = expand_expr (TREE_OPERAND (exp, 0), subtarget,\n+\t\t\t VOIDmode, EXPAND_NORMAL);\n       return expand_shift (code, mode, op0, TREE_OPERAND (exp, 1), target,\n \t\t\t   unsignedp);\n \n@@ -8629,7 +8633,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t      == TYPE_MODE (TREE_TYPE (TREE_OPERAND (exp, 0)))))\n \t{\n \t  temp = expand_expr (TREE_OPERAND (exp, 0), original_target,\n-\t\t\t      VOIDmode, 0);\n+\t\t\t      VOIDmode, EXPAND_NORMAL);\n \n \t  /* If temp is constant, we can just compute the result.  */\n \t  if (GET_CODE (temp) == CONST_INT)\n@@ -8688,7 +8692,8 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n     case TRUTH_NOT_EXPR:\n       if (modifier == EXPAND_STACK_PARM)\n \ttarget = 0;\n-      op0 = expand_expr (TREE_OPERAND (exp, 0), target, VOIDmode, 0);\n+      op0 = expand_expr (TREE_OPERAND (exp, 0), target,\n+\t\t\t VOIDmode, EXPAND_NORMAL);\n       /* The parser is careful to generate TRUTH_NOT_EXPR\n \t only with operands that are always zero or one.  */\n       temp = expand_binop (mode, xor_optab, op0, const1_rtx,\n@@ -8988,7 +8993,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n     case VEC_UNPACK_HI_EXPR:\n     case VEC_UNPACK_LO_EXPR:\n       {\n-\top0 = expand_expr (TREE_OPERAND (exp, 0), NULL_RTX, VOIDmode, 0);\n+\top0 = expand_normal (TREE_OPERAND (exp, 0));\n \tthis_optab = optab_for_tree_code (code, type);\n \ttemp = expand_widen_pattern_expr (exp, op0, NULL_RTX, NULL_RTX,\n \t\t\t\t\t  target, unsignedp);"}, {"sha": "ef58aee11a8f28e45912558eccea1334d4fb25c1", "filename": "gcc/optabs.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49452c070f23dbb9c416e94f4e6cafa2098a1ef2/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49452c070f23dbb9c416e94f4e6cafa2098a1ef2/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=49452c070f23dbb9c416e94f4e6cafa2098a1ef2", "patch": "@@ -684,12 +684,12 @@ expand_vec_shift_expr (tree vec_shift_expr, rtx target)\n   mode1 = insn_data[icode].operand[1].mode;\n   mode2 = insn_data[icode].operand[2].mode;\n \n-  rtx_op1 = expand_expr (vec_oprnd, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n+  rtx_op1 = expand_normal (vec_oprnd);\n   if (!(*insn_data[icode].operand[1].predicate) (rtx_op1, mode1)\n       && mode1 != VOIDmode)\n     rtx_op1 = force_reg (mode1, rtx_op1);\n \n-  rtx_op2 = expand_expr (shift_oprnd, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n+  rtx_op2 = expand_normal (shift_oprnd);\n   if (!(*insn_data[icode].operand[2].predicate) (rtx_op2, mode2)\n       && mode2 != VOIDmode)\n     rtx_op2 = force_reg (mode2, rtx_op2);\n@@ -5950,8 +5950,10 @@ vector_compare_rtx (tree cond, bool unsignedp, enum insn_code icode)\n   t_op1 = TREE_OPERAND (cond, 1);\n \n   /* Expand operands.  */\n-  rtx_op0 = expand_expr (t_op0, NULL_RTX, TYPE_MODE (TREE_TYPE (t_op0)), 1);\n-  rtx_op1 = expand_expr (t_op1, NULL_RTX, TYPE_MODE (TREE_TYPE (t_op1)), 1);\n+  rtx_op0 = expand_expr (t_op0, NULL_RTX, TYPE_MODE (TREE_TYPE (t_op0)),\n+\t\t\t EXPAND_STACK_PARM);\n+  rtx_op1 = expand_expr (t_op1, NULL_RTX, TYPE_MODE (TREE_TYPE (t_op1)),\n+\t\t\t EXPAND_STACK_PARM);\n \n   if (!insn_data[icode].operand[4].predicate (rtx_op0, GET_MODE (rtx_op0))\n       && GET_MODE (rtx_op0) != VOIDmode)\n@@ -6012,14 +6014,12 @@ expand_vec_cond_expr (tree vec_cond_expr, rtx target)\n   cc_op0 = XEXP (comparison, 0);\n   cc_op1 = XEXP (comparison, 1);\n   /* Expand both operands and force them in reg, if required.  */\n-  rtx_op1 = expand_expr (TREE_OPERAND (vec_cond_expr, 1),\n-\t\t\t NULL_RTX, VOIDmode, EXPAND_NORMAL);\n+  rtx_op1 = expand_normal (TREE_OPERAND (vec_cond_expr, 1));\n   if (!insn_data[icode].operand[1].predicate (rtx_op1, mode)\n       && mode != VOIDmode)\n     rtx_op1 = force_reg (mode, rtx_op1);\n \n-  rtx_op2 = expand_expr (TREE_OPERAND (vec_cond_expr, 2),\n-\t\t\t NULL_RTX, VOIDmode, EXPAND_NORMAL);\n+  rtx_op2 = expand_normal (TREE_OPERAND (vec_cond_expr, 2));\n   if (!insn_data[icode].operand[2].predicate (rtx_op2, mode)\n       && mode != VOIDmode)\n     rtx_op2 = force_reg (mode, rtx_op2);"}, {"sha": "77fb0352c7bfe09c5c86d141f919732185799968", "filename": "gcc/stmt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49452c070f23dbb9c416e94f4e6cafa2098a1ef2/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49452c070f23dbb9c416e94f4e6cafa2098a1ef2/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=49452c070f23dbb9c416e94f4e6cafa2098a1ef2", "patch": "@@ -1362,7 +1362,7 @@ expand_expr_stmt (tree exp)\n   rtx value;\n   tree type;\n \n-  value = expand_expr (exp, const0_rtx, VOIDmode, 0);\n+  value = expand_expr (exp, const0_rtx, VOIDmode, EXPAND_NORMAL);\n   if (GIMPLE_TUPLE_P (exp))\n     type = void_type_node;\n   else\n@@ -1728,15 +1728,15 @@ expand_return (tree retval)\n       tree nt = build_qualified_type (ot, TYPE_QUALS (ot) | TYPE_QUAL_CONST);\n \n       val = assign_temp (nt, 0, 0, 1);\n-      val = expand_expr (retval_rhs, val, GET_MODE (val), 0);\n+      val = expand_expr (retval_rhs, val, GET_MODE (val), EXPAND_NORMAL);\n       val = force_not_mem (val);\n       /* Return the calculated value.  */\n       expand_value_return (val);\n     }\n   else\n     {\n       /* No hard reg used; calculate value into hard return reg.  */\n-      expand_expr (retval, const0_rtx, VOIDmode, 0);\n+      expand_expr (retval, const0_rtx, VOIDmode, EXPAND_NORMAL);\n       expand_value_return (result_rtl);\n     }\n }"}]}