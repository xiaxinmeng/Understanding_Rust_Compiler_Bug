{"sha": "75c907757cbfa48b37eaee5fde2769eae2fd204d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVjOTA3NzU3Y2JmYTQ4YjM3ZWFlZTVmZGUyNzY5ZWFlMmZkMjA0ZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T13:12:40Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T13:12:40Z"}, "message": "[multiple changes]\n\n2011-08-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch5.adb (Analyze_Iteration_Scheme): For an Ada2012 iterator with\n\t\"of\", pre-analyze expression in case it is a function call with\n\tfinalization actions that must be placed ahead of the loop.\n\t* exp_ch5.adb (Expand_Iterator_Loop): If condition_actions are present\n\ton an Ada2012 iterator, insert them ahead of the rewritten loop.\n\n2011-08-02  Geert Bosch  <bosch@adacore.com>\n\n\t* cstand.adb (Create_Float_Types): Only consider C's long double for\n\tLong_Long_Float, in addition to double.\n\nFrom-SVN: r177146", "tree": {"sha": "7e412a06fa2cddcc5dd5e44fe7519125e085db6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e412a06fa2cddcc5dd5e44fe7519125e085db6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75c907757cbfa48b37eaee5fde2769eae2fd204d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75c907757cbfa48b37eaee5fde2769eae2fd204d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75c907757cbfa48b37eaee5fde2769eae2fd204d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75c907757cbfa48b37eaee5fde2769eae2fd204d/comments", "author": null, "committer": null, "parents": [{"sha": "ded8909b241d9fd6e60981085c0fd9246392472f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ded8909b241d9fd6e60981085c0fd9246392472f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ded8909b241d9fd6e60981085c0fd9246392472f"}], "stats": {"total": 59, "additions": 35, "deletions": 24}, "files": [{"sha": "9b6d9734b86835a990738cfa0e9598b1a8d5a409", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c907757cbfa48b37eaee5fde2769eae2fd204d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c907757cbfa48b37eaee5fde2769eae2fd204d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=75c907757cbfa48b37eaee5fde2769eae2fd204d", "patch": "@@ -1,3 +1,16 @@\n+2011-08-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Iteration_Scheme): For an Ada2012 iterator with\n+\t\"of\", pre-analyze expression in case it is a function call with\n+\tfinalization actions that must be placed ahead of the loop.\n+\t* exp_ch5.adb (Expand_Iterator_Loop): If condition_actions are present\n+\ton an Ada2012 iterator, insert them ahead of the rewritten loop.\n+\n+2011-08-02  Geert Bosch  <bosch@adacore.com>\n+\n+\t* cstand.adb (Create_Float_Types): Only consider C's long double for\n+\tLong_Long_Float, in addition to double.\n+\n 2011-08-02  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch3.adb, sem_ch5.adb, sem_type.adb, switch-c.adb, switch-c.ads,"}, {"sha": "26d501764bff4be7735774c0832f4714594c8298", "filename": "gcc/ada/cstand.adb", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c907757cbfa48b37eaee5fde2769eae2fd204d/gcc%2Fada%2Fcstand.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c907757cbfa48b37eaee5fde2769eae2fd204d/gcc%2Fada%2Fcstand.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstand.adb?ref=75c907757cbfa48b37eaee5fde2769eae2fd204d", "patch": "@@ -466,29 +466,13 @@ package body CStand is\n \n          declare\n             Max_HW_Digs : constant := 18;\n-            LF_Digs     : constant Pos :=\n-                            UI_To_Int (Digits_Value (Standard_Long_Float));\n+            --  Maximum hardware digits supported\n+\n             LLF : Entity_Id := Find_Back_End_Float_Type (\"long double\");\n-            E   : Elmt_Id := First_Elmt (Back_End_Float_Types);\n-            N   : Node_Id;\n+            --  Entity for long double type\n \n          begin\n-            if Present (LLF) and then Digits_Value (LLF) > Max_HW_Digs then\n-               LLF := Empty;\n-            end if;\n-\n-            while No (LLF) and then Present (E) loop\n-               N := Node (E);\n-               if UI_To_Int (Digits_Value (N)) in LF_Digs + 1 .. Max_HW_Digs\n-                 and then Machine_Radix_Value (N) = Uint_2\n-               then\n-                  LLF := N;\n-               end if;\n-\n-               Next_Elmt (E);\n-            end loop;\n-\n-            if No (LLF) then\n+            if No (LLF) or else Digits_Value (LLF) > Max_HW_Digs then\n                LLF := Standard_Long_Float;\n             end if;\n "}, {"sha": "f102cf9eafc3b2dea27ba5a1e4fbc64f4a415af6", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c907757cbfa48b37eaee5fde2769eae2fd204d/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c907757cbfa48b37eaee5fde2769eae2fd204d/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=75c907757cbfa48b37eaee5fde2769eae2fd204d", "patch": "@@ -2952,6 +2952,15 @@ package body Exp_Ch5 is\n                 Make_Iteration_Scheme (Loc, Condition => Cond),\n               Statements       => Stats,\n               End_Label        => Empty);\n+\n+            --  If the range of iteration is given by a function call that\n+            --  returns a container, the finalization actions have been saved\n+            --  in the Condition_Actions of the iterator. Insert them now at\n+            --  the head of the loop.\n+\n+            if Present (Condition_Actions (Isc)) then\n+               Insert_List_Before (N, Condition_Actions (Isc));\n+            end if;\n          end;\n       end if;\n \n@@ -3158,6 +3167,7 @@ package body Exp_Ch5 is\n \n       elsif Present (Isc)\n         and then Present (Condition_Actions (Isc))\n+        and then Present (Condition (Isc))\n       then\n          declare\n             ES : Node_Id;"}, {"sha": "bd0f9187cc6c4250227cb193b39e7b7a45a4f383", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c907757cbfa48b37eaee5fde2769eae2fd204d/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c907757cbfa48b37eaee5fde2769eae2fd204d/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=75c907757cbfa48b37eaee5fde2769eae2fd204d", "patch": "@@ -1919,7 +1919,11 @@ package body Sem_Ch5 is\n             Set_Current_Value_Condition (N);\n             return;\n \n+         --  For an iterator specification with \"of\", pre-analyze range to\n+         --  capture function calls that may require finalization actions.\n+\n          elsif Present (Iterator_Specification (N)) then\n+            Pre_Analyze_Range (Name (Iterator_Specification (N)));\n             Analyze_Iterator_Specification (Iterator_Specification (N));\n \n          --  Else we have a FOR loop\n@@ -1974,7 +1978,7 @@ package body Sem_Ch5 is\n                then\n                   Process_Bounds (DS);\n \n-               --  Expander not active or else domain of iteration is a subtype\n+               --  expander not active or else range of iteration is a subtype\n                --  indication, an entity, or a function call that yields an\n                --  aggregate or a container.\n \n@@ -1989,16 +1993,16 @@ package body Sem_Ch5 is\n                         and then not Is_Type (Entity (D_Copy)))\n                   then\n                      --  This is an iterator specification. Rewrite as such\n-                     --  and analyze.\n+                     --  and analyze, to capture function calls that may\n+                     --  require finalization actions.\n \n                      declare\n                         I_Spec : constant Node_Id :=\n                                    Make_Iterator_Specification (Sloc (LP),\n                                      Defining_Identifier =>\n                                        Relocate_Node (Id),\n                                      Name                => D_Copy,\n-                                     Subtype_Indication  =>\n-                                       Empty,\n+                                     Subtype_Indication  => Empty,\n                                      Reverse_Present     =>\n                                        Reverse_Present (LP));\n                      begin"}]}