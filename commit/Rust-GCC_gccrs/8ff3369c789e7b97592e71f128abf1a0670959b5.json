{"sha": "8ff3369c789e7b97592e71f128abf1a0670959b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZmMzM2OWM3ODllN2I5NzU5MmU3MWYxMjhhYmYxYTA2NzA5NTliNQ==", "commit": {"author": {"name": "Sriraman Tallam", "email": "tmsriram@google.com", "date": "2011-07-14T01:44:11Z"}, "committer": {"name": "Sriraman Tallam", "email": "tmsriram@gcc.gnu.org", "date": "2011-07-14T01:44:11Z"}, "message": "2012011-07-13  Sriraman Tallam  <tmsriram@google.com>\n\t\n\t* plugin-api.h\n\t(ld_plugin_section): New struct.\n\t(ld_plugin_get_section_count): New typedef.\n\t(ld_plugin_get_section_type): New typedef.\n\t(ld_plugin_get_section_name): New typedef.\n\t(ld_plugin_get_section_contents): New typedef.\n\t(ld_plugin_update_section_order): New typedef.\n\t(ld_plugin_allow_section_ordering): New typedef.\n\t(LDPT_GET_SECTION_COUNT): New enum value.\n\t(LDPT_GET_SECTION_TYPE): New enum value.\n\t(LDPT_GET_SECTION_NAME): New enum value.\n\t(LDPT_GET_SECTION_CONTENTS): New enum value.\n\t(LDPT_UPDATE_SECTION_ORDER): New enum value.\n\t(LDPT_ALLOW_SECTION_ORDERING): New enum value.\n\t(tv_get_section_count): New struct members.\n\t(tv_get_section_type): New struct members.\n\t(tv_get_section_name): New struct members.\n\t(tv_get_section_contents): New struct members.\n\t(tv_update_section_order): New struct members.\n\t(tv_allow_section_ordering): New struct members.\n\nFrom-SVN: r176260", "tree": {"sha": "130c12e273aeaf1d6caf9799e2c0eb8939d75847", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/130c12e273aeaf1d6caf9799e2c0eb8939d75847"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ff3369c789e7b97592e71f128abf1a0670959b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ff3369c789e7b97592e71f128abf1a0670959b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ff3369c789e7b97592e71f128abf1a0670959b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ff3369c789e7b97592e71f128abf1a0670959b5/comments", "author": {"login": "tmsri", "id": 38991943, "node_id": "MDQ6VXNlcjM4OTkxOTQz", "avatar_url": "https://avatars.githubusercontent.com/u/38991943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmsri", "html_url": "https://github.com/tmsri", "followers_url": "https://api.github.com/users/tmsri/followers", "following_url": "https://api.github.com/users/tmsri/following{/other_user}", "gists_url": "https://api.github.com/users/tmsri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmsri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmsri/subscriptions", "organizations_url": "https://api.github.com/users/tmsri/orgs", "repos_url": "https://api.github.com/users/tmsri/repos", "events_url": "https://api.github.com/users/tmsri/events{/privacy}", "received_events_url": "https://api.github.com/users/tmsri/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6cd6962911a3ddb8d628592790272246d68fea80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cd6962911a3ddb8d628592790272246d68fea80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cd6962911a3ddb8d628592790272246d68fea80"}], "stats": {"total": 104, "additions": 103, "deletions": 1}, "files": [{"sha": "655fc180d0052e639499a2b41dfe7b3ea67f83ee", "filename": "include/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff3369c789e7b97592e71f128abf1a0670959b5/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff3369c789e7b97592e71f128abf1a0670959b5/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=8ff3369c789e7b97592e71f128abf1a0670959b5", "patch": "@@ -1,3 +1,26 @@\n+2011-07-13  Sriraman Tallam  <tmsriram@google.com>\n+\t\n+\t* plugin-api.h\n+\t(ld_plugin_section): New struct.\n+\t(ld_plugin_get_section_count): New typedef.\n+\t(ld_plugin_get_section_type): New typedef.\n+\t(ld_plugin_get_section_name): New typedef.\n+\t(ld_plugin_get_section_contents): New typedef.\n+\t(ld_plugin_update_section_order): New typedef.\n+\t(ld_plugin_allow_section_ordering): New typedef.\n+\t(LDPT_GET_SECTION_COUNT): New enum value.\n+\t(LDPT_GET_SECTION_TYPE): New enum value.\n+\t(LDPT_GET_SECTION_NAME): New enum value.\n+\t(LDPT_GET_SECTION_CONTENTS): New enum value.\n+\t(LDPT_UPDATE_SECTION_ORDER): New enum value.\n+\t(LDPT_ALLOW_SECTION_ORDERING): New enum value.\n+\t(tv_get_section_count): New struct members.\n+\t(tv_get_section_type): New struct members.\n+\t(tv_get_section_name): New struct members.\n+\t(tv_get_section_contents): New struct members.\n+\t(tv_update_section_order): New struct members.\n+\t(tv_allow_section_ordering): New struct members.\n+\n 2011-07-01  Joel Brobecker  <brobecker@adacore.com>\n \n \t* filenames.h (HAVE_CASE_INSENSITIVE_FILE_SYSTEM): Define"}, {"sha": "df0039372f37eca1626d47bc2fe751ac149b9be2", "filename": "include/plugin-api.h", "status": "modified", "additions": 80, "deletions": 1, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff3369c789e7b97592e71f128abf1a0670959b5/include%2Fplugin-api.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff3369c789e7b97592e71f128abf1a0670959b5/include%2Fplugin-api.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fplugin-api.h?ref=8ff3369c789e7b97592e71f128abf1a0670959b5", "patch": "@@ -93,6 +93,14 @@ struct ld_plugin_symbol\n   int resolution;\n };\n \n+/* An object's section.  */\n+\n+struct ld_plugin_section\n+{\n+  const void* handle;\n+  unsigned int shndx;\n+};\n+\n /* Whether the symbol is a definition, reference, or common, weak or not.  */\n \n enum ld_plugin_symbol_kind\n@@ -244,6 +252,65 @@ typedef\n enum ld_plugin_status\n (*ld_plugin_message) (int level, const char *format, ...);\n \n+/* The linker's interface for retrieving the number of sections in an object.\n+   The handle is obtained in the claim_file handler.  This interface should\n+   only be invoked in the claim_file handler.   This function sets *COUNT to\n+   the number of sections in the object.  */\n+\n+typedef\n+enum ld_plugin_status\n+(*ld_plugin_get_input_section_count) (const void* handle, unsigned int *count);\n+\n+/* The linker's interface for retrieving the section type of a specific\n+   section in an object.  This interface should only be invoked in the\n+   claim_file handler.  This function sets *TYPE to an ELF SHT_xxx value.  */\n+\n+typedef\n+enum ld_plugin_status\n+(*ld_plugin_get_input_section_type) (const struct ld_plugin_section section,\n+                                     unsigned int *type);\n+\n+/* The linker's interface for retrieving the name of a specific section in\n+   an object. This interface should only be invoked in the claim_file handler.\n+   This function sets *SECTION_NAME_PTR to a null-terminated buffer allocated\n+   by malloc.  The plugin must free *SECTION_NAME_PTR.  */\n+\n+typedef\n+enum ld_plugin_status\n+(*ld_plugin_get_input_section_name) (const struct ld_plugin_section section,\n+                                     char **section_name_ptr);\n+\n+/* The linker's interface for retrieving the contents of a specific section\n+   in an object.  This interface should only be invoked in the claim_file\n+   handler.  This function sets *SECTION_CONTENTS to point to a buffer that is\n+   valid until clam_file handler returns.  It sets *LEN to the size of the\n+   buffer.  */\n+\n+typedef\n+enum ld_plugin_status\n+(*ld_plugin_get_input_section_contents) (const struct ld_plugin_section section,\n+                                         const unsigned char **section_contents,\n+                                         size_t* len);\n+\n+/* The linker's interface for specifying the desired order of sections.\n+   The sections should be specifed using the array SECTION_LIST in the\n+   order in which they should appear in the final layout.  NUM_SECTIONS\n+   specifies the number of entries in each array.  This should be invoked\n+   in the all_symbols_read handler.  */\n+\n+typedef\n+enum ld_plugin_status\n+(*ld_plugin_update_section_order) (const struct ld_plugin_section *section_list,\n+\t\t\t\t   unsigned int num_sections);\n+\n+/* The linker's interface for specifying that reordering of sections is\n+   desired so that the linker can prepare for it.  This should be invoked\n+   before update_section_order, preferably in the claim_file handler.  */\n+\n+typedef\n+enum ld_plugin_status\n+(*ld_plugin_allow_section_ordering) (void);\n+\n enum ld_plugin_level\n {\n   LDPL_INFO,\n@@ -274,7 +341,13 @@ enum ld_plugin_tag\n   LDPT_OUTPUT_NAME,\n   LDPT_SET_EXTRA_LIBRARY_PATH,\n   LDPT_GNU_LD_VERSION,\n-  LDPT_GET_VIEW\n+  LDPT_GET_VIEW,\n+  LDPT_GET_INPUT_SECTION_COUNT,\n+  LDPT_GET_INPUT_SECTION_TYPE,\n+  LDPT_GET_INPUT_SECTION_NAME,\n+  LDPT_GET_INPUT_SECTION_CONTENTS,\n+  LDPT_UPDATE_SECTION_ORDER,\n+  LDPT_ALLOW_SECTION_ORDERING\n };\n \n /* The plugin transfer vector.  */\n@@ -298,6 +371,12 @@ struct ld_plugin_tv\n     ld_plugin_release_input_file tv_release_input_file;\n     ld_plugin_add_input_library tv_add_input_library;\n     ld_plugin_set_extra_library_path tv_set_extra_library_path;\n+    ld_plugin_get_input_section_count tv_get_input_section_count;\n+    ld_plugin_get_input_section_type tv_get_input_section_type;\n+    ld_plugin_get_input_section_name tv_get_input_section_name;\n+    ld_plugin_get_input_section_contents tv_get_input_section_contents;\n+    ld_plugin_update_section_order tv_update_section_order;\n+    ld_plugin_allow_section_ordering tv_allow_section_ordering;\n   } tv_u;\n };\n "}]}