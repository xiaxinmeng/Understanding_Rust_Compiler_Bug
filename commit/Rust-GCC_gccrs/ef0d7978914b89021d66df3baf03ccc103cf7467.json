{"sha": "ef0d7978914b89021d66df3baf03ccc103cf7467", "node_id": "C_kwDOANBUbNoAKGVmMGQ3OTc4OTE0Yjg5MDIxZDY2ZGYzYmFmMDNjY2MxMDNjZjc0Njc", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2022-10-11T06:15:21Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2022-10-12T12:51:59Z"}, "message": "RISC-V: Refine register_builtin_types function. [NFC]\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv-vector-builtins.cc (builtin_types): Redefine\n\tvector types.\n\t(build_const_pointer): New function.\n\t(register_builtin_type): Ditto.\n\t(DEF_RVV_TYPE): Simplify macro.\n\t(register_vector_type): Refine implementation.\n\t* config/riscv/riscv-vector-builtins.h (rvv_builtin_types_t): New.", "tree": {"sha": "0fe4c2bc7752b5c48bad76d4476ecb0a71eb647b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0fe4c2bc7752b5c48bad76d4476ecb0a71eb647b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef0d7978914b89021d66df3baf03ccc103cf7467", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef0d7978914b89021d66df3baf03ccc103cf7467", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef0d7978914b89021d66df3baf03ccc103cf7467", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef0d7978914b89021d66df3baf03ccc103cf7467/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcb94f551f29587f04dac0e9b99c98094479835d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcb94f551f29587f04dac0e9b99c98094479835d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcb94f551f29587f04dac0e9b99c98094479835d"}], "stats": {"total": 90, "additions": 50, "deletions": 40}, "files": [{"sha": "b7cd1c5cb21fe9f752544a5a92086aa4f09e890b", "filename": "gcc/config/riscv/riscv-vector-builtins.cc", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef0d7978914b89021d66df3baf03ccc103cf7467/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef0d7978914b89021d66df3baf03ccc103cf7467/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc?ref=ef0d7978914b89021d66df3baf03ccc103cf7467", "patch": "@@ -73,18 +73,14 @@ static CONSTEXPR const vector_type_info vector_types[] = {\n #include \"riscv-vector-builtins.def\"\n };\n \n-/* The scalar type associated with each vector type.  */\n-static GTY (()) tree scalar_types[NUM_VECTOR_TYPES];\n-/* The machine mode associated with each vector type.  */\n-static GTY (()) machine_mode vector_modes[NUM_VECTOR_TYPES];\n /* The RVV types, with their built-in\n    \"__rvv..._t\" name.  Allow an index of NUM_VECTOR_TYPES, which always\n    yields a null tree.  */\n static GTY(()) tree abi_vector_types[NUM_VECTOR_TYPES + 1];\n \n /* Same, but with the riscv_vector.h \"v..._t\" name.  */\n-extern GTY(()) tree builtin_vector_types[MAX_TUPLE_SIZE][NUM_VECTOR_TYPES + 1];\n-tree builtin_vector_types[MAX_TUPLE_SIZE][NUM_VECTOR_TYPES + 1];\n+extern GTY (()) rvv_builtin_types_t builtin_types[NUM_VECTOR_TYPES + 1];\n+rvv_builtin_types_t builtin_types[NUM_VECTOR_TYPES + 1];\n \n /* RAII class for enabling enough RVV features to define the built-in\n    types and implement the riscv_vector.h pragma.\n@@ -172,6 +168,39 @@ mangle_builtin_type (const_tree type)\n   return NULL;\n }\n \n+/* Return a representation of \"const T *\".  */\n+static tree\n+build_const_pointer (tree t)\n+{\n+  return build_pointer_type (build_qualified_type (t, TYPE_QUAL_CONST));\n+}\n+\n+/* Helper function for register a single built-in RVV ABI type.  */\n+static void\n+register_builtin_type (vector_type_index type, tree eltype, machine_mode mode)\n+{\n+  builtin_types[type].scalar = eltype;\n+  builtin_types[type].scalar_ptr = build_pointer_type (eltype);\n+  builtin_types[type].scalar_const_ptr = build_const_pointer (eltype);\n+  if (!riscv_v_ext_enabled_vector_mode_p (mode))\n+    return;\n+\n+  tree vectype = build_vector_type_for_mode (eltype, mode);\n+  gcc_assert (VECTOR_MODE_P (TYPE_MODE (vectype)) && TYPE_MODE (vectype) == mode\n+\t      && TYPE_MODE_RAW (vectype) == mode && TYPE_ALIGN (vectype) <= 128\n+\t      && known_eq (tree_to_poly_uint64 (TYPE_SIZE (vectype)),\n+\t\t\t   GET_MODE_BITSIZE (mode)));\n+  vectype = build_distinct_type_copy (vectype);\n+  gcc_assert (vectype == TYPE_MAIN_VARIANT (vectype));\n+  SET_TYPE_STRUCTURAL_EQUALITY (vectype);\n+  TYPE_ARTIFICIAL (vectype) = 1;\n+  TYPE_INDIVISIBLE_P (vectype) = 1;\n+  add_vector_type_attribute (vectype, vector_types[type].mangled_name);\n+  make_type_sizeless (vectype);\n+  abi_vector_types[type] = vectype;\n+  lang_hooks.types.register_builtin_type (vectype, vector_types[type].abi_name);\n+}\n+\n /* Register the built-in RVV ABI types, such as __rvv_int32m1_t.  */\n static void\n register_builtin_types ()\n@@ -186,42 +215,12 @@ register_builtin_types ()\n     = TARGET_64BIT ? unsigned_intSI_type_node : long_unsigned_type_node;\n \n   machine_mode mode;\n-#define DEF_RVV_TYPE(NAME, NCHARS, ABI_NAME, SCALAR_TYPE, VECTOR_MODE,    \\\n-\t\t     VECTOR_MODE_MIN_VLEN_32)                                  \\\n+#define DEF_RVV_TYPE(NAME, NCHARS, ABI_NAME, SCALAR_TYPE, VECTOR_MODE,         \\\n+\t\t     VECTOR_MODE_MIN_VLEN_32, ARGS...)                         \\\n   mode = TARGET_MIN_VLEN > 32 ? VECTOR_MODE##mode                              \\\n \t\t\t      : VECTOR_MODE_MIN_VLEN_32##mode;                 \\\n-  scalar_types[VECTOR_TYPE_##NAME]                                        \\\n-    = riscv_v_ext_enabled_vector_mode_p (mode) ? SCALAR_TYPE##_type_node       \\\n-\t\t\t\t\t       : NULL_TREE;                    \\\n-  vector_modes[VECTOR_TYPE_##NAME]                                        \\\n-    = riscv_v_ext_enabled_vector_mode_p (mode) ? mode : VOIDmode;\n+  register_builtin_type (VECTOR_TYPE_##NAME, SCALAR_TYPE##_type_node, mode);\n #include \"riscv-vector-builtins.def\"\n-\n-  for (unsigned int i = 0; i < NUM_VECTOR_TYPES; ++i)\n-    {\n-      tree eltype = scalar_types[i];\n-      mode = vector_modes[i];\n-      /* We disabled the datatypes according '-march'.  */\n-      if (!eltype)\n-\tcontinue;\n-\n-      tree vectype = build_vector_type_for_mode (eltype, mode);\n-      gcc_assert (\n-\tVECTOR_MODE_P (TYPE_MODE (vectype)) && TYPE_MODE (vectype) == mode\n-\t&& TYPE_MODE_RAW (vectype) == mode && TYPE_ALIGN (vectype) <= 128\n-\t&& known_eq (tree_to_poly_uint64 (TYPE_SIZE (vectype)),\n-\t\t     GET_MODE_BITSIZE (mode)));\n-      vectype = build_distinct_type_copy (vectype);\n-      gcc_assert (vectype == TYPE_MAIN_VARIANT (vectype));\n-      SET_TYPE_STRUCTURAL_EQUALITY (vectype);\n-      TYPE_ARTIFICIAL (vectype) = 1;\n-      TYPE_INDIVISIBLE_P (vectype) = 1;\n-      add_vector_type_attribute (vectype, vector_types[i].mangled_name);\n-      make_type_sizeless (vectype);\n-      abi_vector_types[i] = vectype;\n-      lang_hooks.types.register_builtin_type (vectype,\n-\t\t\t\t\t      vector_types[i].abi_name);\n-    }\n }\n \n /* Register vector type TYPE under its risv_vector.h name.  */\n@@ -247,7 +246,8 @@ register_vector_type (vector_type_index type)\n       && TYPE_MAIN_VARIANT (TREE_TYPE (decl)) == vectype)\n     vectype = TREE_TYPE (decl);\n \n-  builtin_vector_types[0][type] = vectype;\n+  builtin_types[type].vector = vectype;\n+  builtin_types[type].vector_ptr = build_pointer_type (vectype);\n }\n \n /* Initialize all compiler built-ins related to RVV that should be"}, {"sha": "7d4b807f33c3917c3c9dae7fb6f2d7bd6bca61ba", "filename": "gcc/config/riscv/riscv-vector-builtins.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef0d7978914b89021d66df3baf03ccc103cf7467/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef0d7978914b89021d66df3baf03ccc103cf7467/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h?ref=ef0d7978914b89021d66df3baf03ccc103cf7467", "patch": "@@ -36,6 +36,16 @@ enum vector_type_index\n   NUM_VECTOR_TYPES\n };\n \n+/* Builtin types that are used to register RVV intrinsics.  */\n+struct GTY (()) rvv_builtin_types_t\n+{\n+  tree vector;\n+  tree scalar;\n+  tree vector_ptr;\n+  tree scalar_ptr;\n+  tree scalar_const_ptr;\n+};\n+\n } // end namespace riscv_vector\n \n #endif"}]}