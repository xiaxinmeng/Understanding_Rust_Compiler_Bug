{"sha": "76d61ab83c67242de55d6af6cea2f2ebf8fd06ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZkNjFhYjgzYzY3MjQyZGU1NWQ2YWY2Y2VhMmYyZWJmOGZkMDZjZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-03-29T15:30:28Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-03-29T15:30:28Z"}, "message": "Tidy\n\nFrom-SVN: r171677", "tree": {"sha": "88ffc190553b25855518870c6082a229eb23a16c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88ffc190553b25855518870c6082a229eb23a16c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76d61ab83c67242de55d6af6cea2f2ebf8fd06ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76d61ab83c67242de55d6af6cea2f2ebf8fd06ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76d61ab83c67242de55d6af6cea2f2ebf8fd06ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76d61ab83c67242de55d6af6cea2f2ebf8fd06ce/comments", "author": null, "committer": null, "parents": [{"sha": "a90caaa2fde8b592910b232176e6f0f6188dcd0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a90caaa2fde8b592910b232176e6f0f6188dcd0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a90caaa2fde8b592910b232176e6f0f6188dcd0a"}], "stats": {"total": 598, "additions": 0, "deletions": 598}, "files": [{"sha": "9455b2db7796580a5b576bc067dc1eb6bb4f08b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 0, "deletions": 598, "changes": 598, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d61ab83c67242de55d6af6cea2f2ebf8fd06ce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d61ab83c67242de55d6af6cea2f2ebf8fd06ce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=76d61ab83c67242de55d6af6cea2f2ebf8fd06ce", "patch": "@@ -831,604 +831,6 @@\n \t(*avx_movu<ssemodesuffix><avxmodesuffix>): Likewise.\n \t(*avx_movdqu<avxmodesuffix>): Likewise.\n \n-2011-03-27  Vladimir Makarov  <vmakarov@redhat.com>\n-\n-\tPR bootstrap/48307\n-\tRevert the previous patch.\n-\n-2011-03-27  Vladimir Makarov  <vmakarov@redhat.com>\n-\n-\t* regmove.c (regmove_optimize): Move ira_set_pseudo_classes call\n-\tafter regstat_init_n_sets_and_refs.\n-\n-\t* ira.c: Add more comments at the top.\n-\t(setup_stack_reg_pressure_class, setup_pressure_classes):\n-\tAdd comments how we compute the register pressure classes.\n-\t(setup_allocno_and_important_classes): Add more comments.\n-\t(setup_class_translate_array, reorder_important_classes)\n-\t(setup_reg_class_relations): Add comments.\n-\n-\t* ira-emit.c: Add 2011 to the Copyright line.  Add comments at the\n-\tstart of the file.\n-\n-\t* ira-color.c: Add 2011 to the Copyright line.\n-\t(assign_hard_reg):  Add more comments.\n-\t(improve_allocation): Ditto.\n-\n-\t* ira-costs.c: Add 2011 to the Copyright line.\n-\t(setup_cost_classes, setup_regno_cost_classes_by_aclass): Add more\n-\tcomments.\n-\t(setup_regno_cost_classes_by_mode): Ditto.\n-\n-\tInitial patches from ira-improv branch:\n-\n-\t2010-08-13  Vladimir Makarov  <vmakarov@redhat.com>\n-\n-\t* ira-build.c: (ira_create_object): Remove initialization of\n-\tOBJECT_PROFITABLE_HARD_REGS.  Initialize OBJECT_ADD_DATA.\n-\t(ira_create_allocno): Remove initialization of\n-\tALLOCNO_MEM_OPTIMIZED_DEST, ALLOCNO_MEM_OPTIMIZED_DEST_P,\n-\tALLOCNO_SOMEWHERE_RENAMED_P, ALLOCNO_CHILD_RENAMED_P,\n-\tALLOCNO_IN_GRAPH_P, ALLOCNO_MAY_BE_SPILLED_P, ALLOCNO_COLORABLE_P,\n-\tALLOCNO_NEXT_BUCKET_ALLOCNO, ALLOCNO_PREV_BUCKET_ALLOCNO,\n-\tALLOCNO_FIRST_COALESCED_ALLOCNO, ALLOCNO_NEXT_COALESCED_ALLOCNO.\n-\tInitialize ALLOCNO_ADD_DATA.\n-\t(copy_info_to_removed_store_destinations): Use ALLOCNO_EMIT_DATA\n-\tand allocno_emit_reg instead of ALLOCNO_MEM_OPTIMIZED_DEST_P and\n-\tALLOCNO_REG.\n-\t(ira_flattening): Ditto.  Use ALLOCNO_EMIT_DATA instead of\n-\tALLOCNO_MEM_OPTIMIZED_DEST and ALLOCNO_SOMEWHERE_RENAMED_P.\n-\n-\t* ira.c (ira_reallocate): Remove.\n-\t(setup_pressure_classes): Call\n-\tira_init_register_move_cost_if_necessary.  Use\n-\tira_register_move_cost instead of ira_get_register_move_cost.\n-\t(setup_allocno_assignment_flags): Use ALLOCNO_EMIT_DATA.\n-\t(ira): Call ira_initiate_emit_data and ira_finish_emit_data.\n-\n-\t* ira-color.c: Use ALLOCNO_COLOR_DATA instead of\n-\tALLOCNO_IN_GRAPH_P, ALLOCNO_MAY_BE_SPILLED_P, ALLOCNO_COLORABLE_P,\n-\tALLOCNO_AVAILABLE_REGS_NUM, ALLOCNO_NEXT_BUCKET_ALLOCNO,\n-\tALLOCNO_PREV_BUCKET_ALLOCNO. ALLOCNO_TEMP. Use OBJECT_COLOR_DATA\n-\tinstead of OBJECT_PROFITABLE_HARD_REGS, OBJECT_HARD_REGS_NODE,\n-\tOBJECT_HARD_REGS_SUBNODES_START, OBJECT_HARD_REGS_SUBNODES_NUM.\n-\tFix formatting.\n-\t(object_hard_regs_t, object_hard_regs_node_t): Move from\n-\tira-int.h.\n-\t(struct object_hard_regs, struct object_hard_regs_node): Ditto.\n-\t(struct allocno_color_data): New.\n-\t(allocno_color_data_t): New typedef.\n-\t(allocno_color_data): New definition.\n-\t(ALLOCNO_COLOR_DATA): New macro.\n-\t(struct object_color_data): New.\n-\t(object_color_data_t): New typedef.\n-\t(object_color_data): New definition.\n-\t(OBJECT_COLOR_DATA): New macro.\n-\t(update_copy_costs, calculate_allocno_spill_cost): Call\n-\tira_init_register_move_cost_if_necessary.  Use\n-\tira_register_move_cost instead of ira_get_register_move_cost.\n-\t(move_spill_restore, update_curr_costs): Ditto.\n-\t(allocno_spill_priority): Make it inline.\n-\t(color_pass): Allocate and free allocno_color_dat and\n-\tobject_color_data.\n-\t(struct coalesce_data, coalesce_data_t): New.\n-\t(allocno_coalesce_data): New definition.\n-\t(ALLOCNO_COALESCE_DATA): New macro.\n-\t(merge_allocnos, coalesced_allocno_conflict_p): Use\n-\tALLOCNO_COALESCED_DATA instead of ALLOCNO_FIRST_COALESCED_ALLOCNO,\n-\tALLOCNO_NEXT_COALESCED_ALLOCNO, ALLOCNO_TEMP.\n-\t(coalesce_allocnos): Ditto.\n-\t(setup_coalesced_allocno_costs_and_nums): Ditto.\n-\t(collect_spilled_coalesced_allocnos): Ditto.\n-\t(slot_coalesced_allocno_live_ranges_intersect_p): Ditto.\n-\t(setup_slot_coalesced_allocno_live_ranges): Ditto.\n-\t(coalesce_spill_slots): Ditto.\n-\t(ira_sort_regnos_for_alter_reg): Ditto.  Allocate, initialize and\n-\tfree allocno_coalesce_data.\n-\n-\t* ira-conflicts.c: Fix formatting.\n-\t(process_regs_for_copy): Call\n-\tira_init_register_move_cost_if_necessary.  Use\n-\tira_register_move_cost instead of ira_get_register_move_cost.\n-\t(build_object_conflicts): Optimize.\n-\n-\t* ira-costs.c (record_reg_classes): Optimize.  Call\n-\tira_init_register_move_cost_if_necessary.  Use\n-\tira_register_move_cost, ira_may_move_in_cost, and\n-\tira_may_move_out_cost instead of ira_get_register_move_cost and\n-\tira_get_may_move_cost.\n-\t(record_address_regs): Ditto.\n-\t(scan_one_insn): Optimize.\n-\t(find_costs_and_classes): Optimize.\n-\t(process_bb_node_for_hard_reg_moves): Call\n-\tira_init_register_move_cost_if_necessary.  Use\n-\tira_register_move_cost instead of ira_get_register_move_cost.\n-\n-\t* ira-emit.c: Use allocno_emit_reg, ALLOCNO_EMIT_DATA instead of\n-\tALLOCNO_REG, ALLOCNO_CHILD_RENAMED_P, ALLOCNO_MEM_OPTIMIZED_DEST,\n-\tALLOCNO_MEM_OPTIMIZED_DEST_P, and ALLOCNO_SOMEWHERE_RENAMED_P.\n-\t(ira_allocno_emit_data, void_p, new_allocno_emit_data_vec): New\n-\tdefinitions.\n-\t(ira_initiate_emit_data, ira_finish_emit_data)\n-\t(create_new_allocno): New functions.\n-\t(modify_move_list): Call create_new_alloc instead of\n-\tira_create_allocno.\n-\t(emit_move_list): Call ira_init_register_move_cost_if_necessary.\n-\tUse ira_register_move_cost instead of ira_get_register_move_cost.\n-\n-\t* ira-int.h: Fix some comments.\n-\t(object_hard_regs_t, object_hard_regs_node_t): Move\n-\tto ira-color.c.\n-\t(struct object_hard_regs, struct object_hard_regs_node):\n-\tDitto.\n-\t(struct ira_object): Remove profitable_hard_regs, hard_regs_node,\n-\thard_regs_subnodes_start, hard_regs_subnodes_num.  Add new member\n-\tadd_data.\n-\t(struct ira_allocno): Make mode and aclass a bitfield.  Move other\n-\tbitfield after mode.  Make hard_regno a short int.  Make\n-\thard_regno short.  Remove first_coalesced_allocno and\n-\tnext_coalesced_allocno.  Move mem_optimized_dest_p,\n-\tsomewhere_renamed_p, child_renamed_p, reg, and mem_optimized_dest\n-\tinto struct ira_emit_data.  Remove in_graph_p, may_be_spilled_p,\n-\tavailable_regs_num, next_bucket_allocno, prev_bucket_allocno,\n-\ttemp, colorable_p.  Add new member add_data.\n-\t(ALLOCNO_IN_GRAPH_P, ALLOCNO_MAY_BE_SPILLED_P): Remove.\n-\t(ALLOCNO_COLORABLE_P, ALLOCNO_AVAILABLE_REGS_NUM): Remove.\n-\t(ALLOCNO_NEXT_BUCKET_ALLOCNO, ALLOCNO_PREV_BUCKET_ALLOCNO): Remove.\n-\t(ALLOCNO_TEMP, ALLOCNO_FIRST_COALESCED_ALLOCNO): Remove.\n-\t(ALLOCNO_NEXT_COALESCED_ALLOCNO): Remove.\n-\t(ALLOCNO_ADD_DATA): New macro.\n-\t(ira_emit_data_t): New typedef.\n-\t(struct ira_emit_data): New.  Move mem_optimized_dest_p,\n-\tsomewhere_renamed_p, child_renamed_p, reg, mem_optimized_dest\n-\tfrom struct ira_allocno.\n-\t(ALLOCNO_EMIT_DATA): New macro.\n-\t(ira_allocno_emit_data, allocno_emit_reg): New.\n-\t(ALLOCNO_PROFITABLE_HARD_REGS, OBJECT_HARD_REGS_NODE): Remove.\n-\t(OBJECT_HARD_REGS_SUBNODES_STAR, OBJECT_HARD_REGS_SUBNODES_NUM):\n-\tRemove.\n-\t(OBJECT_ADD_DATA): New macro.\n-\t(ira_reallocate): Remove.\n-\t(ira_initiate_emit_data, ira_finish_emit_data): New.\n-\t(ira_get_register_move_cost, ira_get_may_move_cost): Remove.\n-\t(ira_init_register_move_cost_if_necessary): New.\n-\t(ira_object_conflict_iter_next): Merge into\n-\tira_object_conflict_iter_cond.\n-\t(FOR_EACH_OBJECT_CONFLICT): Don't use\n-\tira_object_conflict_iter_next.\n-\n-\t* ira-live.c: (process_single_reg_class_operands): Call\n-\tira_init_register_move_cost_if_necessary.  Use\n-\tira_register_move_cost instead of ira_get_register_move_cost.\n-\n-\t2010-08-13  Vladimir Makarov  <vmakarov@redhat.com>\n-\n-\t* ira-int.h (struct target_ira_int): Remove x_cost_classes.\n-\n-\t* ira-costs.c: Fix formatting.\n-\t(cost_classes, cost_classes_num): Remove.\n-\t(struct cost_classes, cost_classes_t, const_cost_classes_t): New.\n-\t(regno_cost_classes, cost_classes_hash, cost_classes_eq): New.\n-\t(cost_classes_del, cost_classes_htab): New.\n-\t(cost_classes_aclass_cache, cost_classes_mode_cache): New.\n-\t(initiate_regno_cost_classes, setup_cost_classes): New.\n-\t(setup_regno_cost_classes_by_aclass): New.\n-\t(setup_regno_cost_classes_by_mode, finish_regno_cost_classes):\n-\tNew.\n-\t(record_reg_classes): Use regno_cost_classes instead of\n-\tcost_classes.  Move checking opposite operand up.\n-\t(record_address_regs): Use regno_cost_classes\n-\tinstead of cost_classes.\n-\t(scan_one_insn): Ditto.  Use always general register.\n-\t(print_allocno_costs): Use regno_cost_classes instead of\n-\tcost_classes.\n-\t(print_pseudo_costs): Ditto.  Use Reg_N_REFS.\n-\t(find_costs_and_classes): Set up cost classes for each registers.\n-\tUse also their mode for this.  Use regno_cost_classes instead of\n-\tcost_classes.\n-\t(setup_allocno_class_and_costs): Use regno_cost_classes instead of\n-\tcost_classes.\n-\t(free_ira_costs, ira_init_costs): Don't use cost_classes.\n-\t(ira_costs, ira_set_pseudo_classes): Call\n-\tinitiate_regno_cost_classes and finish_regno_cost_classes.\n-\n-\t2010-10-04  Vladimir Makarov  <vmakarov@redhat.com>\n-\n-\t* target-def.h (TARGET_IRA_COVER_CLASSES): Remove.\n-\n-\t* target.def (ira_cover_classes): Remove.\n-\n-\t* doc/tm.texi: Remove TARGET_IRA_COVER_CLASSES and\n-\tIRA_COVER_CLASSES.\n-\n-\t* doc/tm.texi.in: Ditto.\n-\n-\t* ira-conflicts.c: Remove mentioning cover classes from the file.\n-\tUse ALLOCNO_CLASS instead of ALLOCNO_COVER_CLASS.  Use\n-\tALLOCNO_COVER_CLASS_COST instead of ALLOCNO_CLASS_COST.  Fix\n-\tformatting.\n-\n-\t* targhooks.c (default_ira_cover_classes): Remove.\n-\n-\t* targhooks.h (default_ira_cover_classes): Ditto.\n-\n-\t* haifa-sched.c: Remove mentioning cover classes from the file.\n-\tUse ira_reg_pressure_cover instead of ira_reg_class_cover.  Use\n-\tira_pressure_classes and ira_pressure_classes_num instead of\n-\tira_reg_class_cover_size and ira_reg_class_cover.  Use\n-\tsched_regno_pressure_class instead of sched_regno_cover_class.\n-\t(mark_regno_birth_or_death, setup_insn_reg_pressure_info): Use\n-\tira_reg_class_max_nregs instead of ira_reg_class_nregs.\n-\n-\t* ira-int.h: Add 2010 to Copyright.  Remove mentioning cover\n-\tclasses from the file.\n-\t(object_hard_regs_t, object_hard_regs_node_t): New typedefs.\n-\t(struct object_hard_regs, struct object_hard_regs_node): New.\n-\t(struct ira_object): New members profitable_hard_regs,\n-\thard_regs_node, hard_regs_subnodes_start, hard_regs_subnodes_num.\n-\t(struct ira_allocno): Rename cover_class to aclass.  Rename\n-\tcover_class_cost and updated_cover_class_cost to class_cost and\n-\tupdated_class_cost.  Remove splay_removed_p and\n-\tleft_conflict_size.  Add new members colorable_p.\n-\t(ALLOCNO_SPLAY_REMOVED_P, ALLOCNO_LEFT_CONFLICTS_SIZE): Remove.\n-\t(ALLOCNO_COLORABLE_P): New macro.\n-\t(ALLOCNO_COVER_CLASS): Rename to ALLOCNO_CLASS.\n-\t(ALLOCNO_COVER_CLASS_COST, ALLOCNO_UPDATED_COVER_CLASS_COST):\n-\tRename to ALLOCNO_CLASS_COST and ALLOCNO_UPDATED__CLASS_COST.\n-\t(OBJECT_...): Rename parameter C to O.\n-\t(OBJECT_PROFITABLE_HARD_REGS): New macro.\n-\t(OBJECT_HARD_REGS_NODE, OBJECT_HARD_REGS_SUBNODES_START)\n-\t(OBJECT_HARD_REGS_SUBNODES_NUM): New macros.\n-\t(struct target_ira_int): New members x_ira_max_memory_move_cost,\n-\tx_ira_max_register_move_cost, x_ira_max_may_move_in_cost,\n-\tx_ira_max_may_move_out_cost, x_ira_reg_allocno_class_p,\n-\tx_ira_reg_pressure_class_p, x_ira_important_class_nums,\n-\tx_ira_reg_class_superunion.  Rename x_prohibited_class_mode_reg to\n-\tx_ira_prohibited_class_mode_reg.  Rename x_ira_reg_class_union to\n-\tx_ira_reg_class_subunion.\n-\t(ira_max_memory_move_cost, ira_max_register_move_cost)\n-\t(ira_max_may_move_in_cost, ira_max_may_move_out_cost)\n-\t(ira_reg_allocno_class_p, ira_reg_pressure_class_p)\n-\t(ira_important_class_nums, ira_reg_class_superunion): New macros.\n-\t(prohibited_class_mode_regs): Rename to\n-\tira_prohibited_class_mode_regs.\n-\t(ira_reg_class_union): Rename to ira_reg_class_subunion.\n-\t(ira_debug_class_cover): Rename to ira_debug_allocno_classes.\n-\t(ira_set_allocno_cover_class): Rename to ira_set_allocno_class.\n-\t(ira_tune_allocno_costs_and_cover_classes): Rename to\n-\tira_tune_allocno_costs.\n-\t(ira_debug_hard_regs_forest): New.\n-\t(ira_object_conflict_iter_init, ira_object_conflict_iter_cond)\n-\t(ira_object_conflict_iter_next): Fix comments.\n-\t(ira_hard_reg_set_intersection_p, hard_reg_set_size): New\n-\tfunctions.\n-\t(ira_allocate_and_set_costs, ira_allocate_and_copy_costs): Rename\n-\tcover_class to aclass.\n-\t(ira_allocate_and_accumulate_costs): Ditto.\n-\t(ira_allocate_and_set_or_copy_costs): Ditto.\n-\n-\t* opts.c (decode_options): Remove ira_cover_class check.\n-\n-\t* ira-color.c: Remove mentioning cover classes from the file.  Use\n-\tALLOCNO_CLASS, ALLOCNO_CLASS_COST, and ALLOCNO_UPDATED_CLASS_COST\n-\tinstead of ALLOCNO_COVER_CLASS, ALLOCNO_COVER_CLASS_COST, and\n-\tALLOCNO_UPDATED_COVER_CLASS_COST.  Fix formatting.\n-\t(splay-tree.h): Remove include.\n-\t(allocno_coalesced_p, processed_coalesced_allocno_bitmap): Move\n-\tbefore copy_freq_compare_func.\n-\t(allocnos_for_spilling, removed_splay_allocno_vec): Remove.\n-\t(object_hard_regs_vec, object_hard_regs_htab, node_check_tick):\n-\tNew definitions.\n-\t(hard_regs_roots, hard_regs_node_vec): Ditto.\n-\t(object_hard_regs_hash, object_hard_regs_eq, find_hard_regs): Ditto.\n-\t(insert_hard_regs, init_object_hard_regs, add_object_hard_regs): Ditto.\n-\t(finish_object_hard_regs, object_hard_regs_compare): Ditto.\n-\t(create_new_object_hard_regs_node): Ditto.\n-\t(add_new_object_hard_regs_node_to_forest): Ditto.\n-\t(add_object_hard_regs_to_forest, collect_object_hard_regs_cover):\n-\tDitto.\n-\t(setup_object_hard_regs_nodes_parent, first_common_ancestor_node):\n-\tDitto.\n-\t(print_hard_reg_set, print_hard_regs_subforest): Ditto.\n-\t(print_hard_regs_forest, ira_debug_hard_regs_forest): Ditto.\n-\t(remove_unused_object_hard_regs_nodes): Ditto.\n-\t(enumerate_object_hard_regs_nodes): Ditto.\n-\t(object_hard_regs_nodes_num, object_hard_regs_nodes): Ditto.\n-\t(object_hard_regs_subnode_t): Ditto.\n-\t(struct object_hard_regs_subnode): Ditto.\n-\t(object_hard_regs_subnodes, object_hard_regs_subnode_index): Ditto.\n-\t(setup_object_hard_regs_subnode_index): Ditto.\n-\t(get_object_hard_regs_subnodes_num): Ditto.\n-\t(form_object_hard_regs_nodes_forest): Ditto.\n-\t(finish_object_hard_regs_nodes_tree): Ditto.\n-\t(finish_object_hard_regs_nodes_forest): Ditto.\n-\t(allocnos_have_intersected_live_ranges_p): Rename to\n-\tallocnos_conflict_by_live_ranges_p.  Move before\n-\tcopy_freq_compare_func.\n-\t(pseudos_have_intersected_live_ranges_p): Rename to\n-\tconflict_by_live_ranges_p.  Move before copy_freq_compare_func.\n-\t(setup_left_conflict_sizes_p, update_left_conflict_sizes_p): Ditto.\n-\t(empty_profitable_hard_regs, setup_profitable_hard_regs): Ditto.\n-\t(update_copy_costs): Remove assert.  Skip cost update if the hard\n-\treg does not belong the class.\n-\t(assign_hard_reg): Process only profitable hard regs.\n-\t(uncolorable_allocnos_num): Make it scalar.\n-\t(allocno_spill_priority): Use ALLOCNO_EXCESS_PRESSURE_POINTS_NUM\n-\tand ira_reg_class_max_nregs instead of ALLOCNO_LEFT_CONFLICTS_SIZE\n-\tand ira_reg_class_max_nregs.\n-\t(bucket_allocno_compare_func): Check frequency first.\n-\t(sort_bucket): Add compare function as a parameter.\n-\t(add_allocno_to_ordered_bucket): Assume no coalesced allocnos.\n-\t(uncolorable_allocnos_splay_tree, USE_SPLAY_P): Remove.\n-\t(push_allocno_to_stack): Rewrite for checking new allocno\n-\tcolorability.\n-\t(remove_allocno_from_bucket_and_push): Print cost too.  Remove\n-\tassert.\n-\t(push_only_colorable): Pass new parameter to sort_bucket.\n-\t(push_allocno_to_spill): Remove.\n-\t(allocno_spill_priority_compare): Make it inline and rewrite.\n-\t(splay_tree_allocate, splay_tree_free): Remove.\n-\t(allocno_spill_sort_compare): New function.\n-\t(push_allocnos_to_stack): Sort allocnos for spilling once.  Don't\n-\tbuild and use splay tree.  Choose first allocno in uncolorable\n-\tallocno bucket to spill.  Remove setting spill cost.\n-\t(all_conflicting_hard_regs): Remove.\n-\t(setup_allocno_available_regs_num): Check only profitable hard\n-\tregs.  Print info about hard regs nodes.\n-\t(setup_allocno_left_conflicts_size): Remove.\n-\t(put_allocno_into_bucket): Don't call\n-\tsetup_allocno_left_conflicts_size.  Use\n-\tsetup_left_conflict_sizes_p.\n-\t(improve_allocation): New.\n-\t(color_allocnos): Call setup_profitable_hard_regs,\n-\tform_object_hard_regs_nodes_forest, improve_allocation,\n-\tfinish_object_hard_regs_nodes_forest.  Setup spill cost.\n-\t(print_loop_title): Use pressure classes.\n-\t(color_allocnso): Ditto.\n-\t(do_coloring): Remove allocation and freeing splay_tree_node_pool\n-\tand allocnos_for_spilling.\n-\t(ira_sort_regnos_for_alter_reg): Don't setup members\n-\t{first,next}_coalesced_allocno.\n-\t(color): Remove allocating and freeing removed_splay_allocno_vec.\n-\t(fast_allocation): Use ira_prohibited_class_mode_regs instead of\n-\tprohibited_class_mode_regs.\n-\n-\t* ira-lives.c: Remove mentioning cover classes from the file.  Fix\n-\tformatting.\n-\t(update_allocno_pressure_excess_length): Use pressure classes.\n-\t(inc_register_pressure, dec_register_pressure): Check for pressure\n-\tclass.\n-\t(mark_pseudo_regno_live, mark_pseudo_regno_subword_live): Use\n-\tpressure class.  Use ira_reg_class_nregs instead of\n-\tira_reg_class_max_nregs.\n-\t(mark_pseudo_regno_dead, mark_pseudo_regno_subword_dead): Ditto.\n-\t(mark_hard_reg_live, mark_hard_reg_dead): Use pressure class.\n-\t(single_reg_class): Use ira_reg_class_nregs instead of\n-\tira_reg_class_max_nregs.\n-\t(process_bb_node_lives): Use pressure classes.\n-\n-\t* ira-emit.c: Remove mentioning cover classes from the file.  Use\n-\tALLOCNO_CLASS instead of ALLOCNO_COVER_CLASS.  Fix formatting.\n-\t(change_loop): Use pressure classes.\n-\t(modify_move_list): Call ira_set_allocno_class instead of\n-\tira_set_allocno_cover_class.\n-\n-\t* ira-build.c: Remove mentioning cover classes from the file.  Use\n-\tALLOCNO_CLASS and ALLOCNO_CLASS_COST instead of\n-\tALLOCNO_COVER_CLASS and ALLOCNO_COVER_CLASS_COST.  Use\n-\tALLOCNO_UPDATED_CLASS_COST instead of\n-\tALLOCNO_UPDATED_COVER_CLASS_COST.  Fix formatting.\n-\t(ira_create_object): Initiate OBJECT_PROFITABLE_HARD_REGS.\n-\t(ira_create_allocno): Remove initialization of\n-\tALLOCNO_SPLAY_REMOVED_P, ALLOCNO_LEFT_CONFLICT_SIZE.  Initialize\n-\tALLOCNO_COLORABLE_P.\n-\t(ira_set_allocno_cover_class): Rename to ira_set_allocno_class.\n-\tUpdate conflict regs for the objects.\n-\t(create_cap_allocno): Remove assert.  Don't propagate\n-\tALLOCNO_AVAILABLE_REGS_NUM.\n-\t(ira_free_allocno_costs): New function.\n-\t(finish_allocno): Change a part of code into call of\n-\tira_free_allocno_costs.\n-\t(low_pressure_loop_node_p): Use pressure classes.\n-\t(object_range_compare_func): Don't compare classes.\n-\t(setup_min_max_conflict_allocno_ids): Ditto.\n-\n-\t* loop-invariant.c: Remove mentioning cover classes from the file.\n-\tUse ira_pressure_classes and ira_pressure_classes_num instead of\n-\tira_reg_class_cover_size and ira_reg_class_cover.  Fix formatting.\n-\t(get_cover_class_and_nregs): Rename to\n-\tget_cover_pressure_and_nregs.  Use ira_reg_class_max_nregs instead\n-\tof ira_reg_class_nregs.  Use reg_allocno_class instead of\n-\treg_cover_class.\n-\t(get_inv_cost): Use instead ira_stack_reg_pressure_class of\n-\tSTACK_REG_COVER_CLASS.\n-\t(get_regno_cover_class): Rename to get_regno_pressure_class.\n-\t(move_loop_invariants): Initialize and finalize regstat.\n-\n-\t* ira.c: Remove mentioning cover classes from the file.  Add\n-\tcomments about coloring without cover classes.  Use ALLOCNO_CLASS\n-\tinstead of ALLOCNO_COVER_CLASS.  Fix formatting.\n-\t(alloc_reg_class_subclasses, setup_reg_subclasses): Move it before\n-\tsetup_class_subset_and_memory_move_costs.\n-\t(setup_stack_reg_pressure_class, setup_pressure_classes): New.\n-\t(setup_cover_and_important_classes): Rename to\n-\tsetup_allocno_and_important_classes.\n-\t(setup_class_translate_array): New.\n-\t(setup_class_translate): Call it for allocno and pressure classes.\n-\t(cover_class_order): Rename to allocno_class_order.\n-\t(comp_reg_classes_func): Use ira_allocno_class_translate instead\n-\tof ira_class_translate.\n-\t(reorder_important_classes): Set up ira_important_class_nums.\n-\t(setup_reg_class_relations): Set up ira_reg_class_superunion.\n-\t(print_class_cover): Rename to print_classes.  Add parameter.\n-\t(ira_debug_class_cover): Rename to ira_debug_allocno_classes.\n-\tPrint pressure classes too.\n-\t(find_reg_class_closure): Rename to find_reg_classes.  Don't call\n-\tsetup_reg_subclasses.\n-\t(ira_hard_regno_cover_class): Rename to\n-\tira_hard_regno_allocno_class.\n-\t(ira_reg_class_nregs): Rename to ira_reg_class_max_nregs.\n-\t(setup_prohibited_class_mode_regs): Use\n-\tira_prohibited_class_mode_regs instead of\n-\tprohibited_class_mode_regs.\n-\t(clarify_prohibited_class_mode_regs): New function.\n-\t(ira_init_register_move_cost): Set up ira_max_register_move_cost,\n-\tira_max_may_move_in_cost, and ira_max_may_move_out_cost.\n-\t(ira_init_once): Initialize them.\n-\t(free_register_move_costs): Process them.\n-\t(ira_init): Move calls of find_reg_classes and\n-\tsetup_hard_regno_aclass after setup_prohibited_class_mode_regs.\n-\tCall clarify_prohibited_class_mode_regs.\n-\t(ira_no_alloc_reg): Remove.\n-\t(too_high_register_pressure_p): Use pressure classes.\n-\n-\t* sched-deps.c: Remove mentioning cover classes from the file.\n-\tUse ira_reg_pressure_cover instead of ira_reg_class_cover.  Use\n-\tira_pressure_classes and ira_pressure_classes_num instead of\n-\tira_reg_class_cover_size and ira_reg_class_cover.\n-\t(mark_insn_hard_regno_birth, mark_hard_regno_death): Use\n-\tsched_regno_pressure_class instead of sched_regno_cover_class.\n-\t(mark_insn_pseudo_birth, mark_pseudo_death): Ditto.  Use\n-\tira_reg_class_max_nregs instead of ira_reg_class_nregs.\n-\n-\t* ira.h: Add 2010 to Copyright.\n-\t(ira_no_alloc_reg): Remove external.\n-\t(struct target_ira): Rename x_ira_hard_regno_cover_class,\n-\tx_ira_reg_class_cover_size, x_ira_reg_class_cover, and\n-\tx_ira_class_translate to x_ira_hard_regno_allocno_class,\n-\tx_ira_allocno_classes_num, x_ira_allocno_classes, and\n-\tx_ira_allocno_class_translate.  Add x_ira_pressure_classes_num,\n-\tx_ira_pressure_classes, x_ira_pressure_class_translate, and\n-\tx_ira_stack_reg_pressure_class.  Rename x_ira_reg_class_nregs to\n-\tx_ira_reg_class_max_nregs.  Add x_ira_reg_class_min_nregs and\n-\tx_ira_no_alloc_regs.\n-\t(ira_hard_regno_cover_class): Rename to\n-\tira_hard_regno_allocno_class.\n-\t(ira_reg_class_cover_size, ira_reg_class_cover): Rename to\n-\tira_allocno_classes_num and ira_allocno_classes.\n-\t(ira_class_translate): Rename to ira_allocno_class_translate.\n-\t(ira_pressure_classes_num, ira_pressure_classes): New definitions.\n-\t(ira_pressure_class_translate, ira_stack_reg_pressure_class): Ditto.\n-\t(ira_reg_class_nregs): Rename to ira_reg_class_max_nregs.\n-\t(ira_reg_class_min_nregs, ira_stack_reg_pressure_class): New\n-\t(ira_no_alloc_regs): New.\n-\n-\t* ira-costs.c: Add 2010 to Copyright.  Remove mentioning cover\n-\tclasses from the file.  Use ALLOCNO_CLASS instead of\n-\tALLOCNO_COVER_CLASS.  Use ALLOCNO_CLASS_COST instead of\n-\tALLOCNO_COVER_CLASS_COST.\n-\t(regno_cover_class): Rename to regno_aclass.\n-\t(record_reg_classes): Use ira_reg_class_subunion instead of\n-\tira_reg_class_union.\n-\t(record_address_regs): Check overflow.\n-\t(scan_one_insn): Ditto.\n-\t(print_allocno_costs): Print total mem cost fore regional\n-\tallocation.\n-\t(print_pseudo_costs): Use REG_N_REFS.\n-\t(find_costs_and_classes): Use classes intersected with them on the\n-\t1st pass. Check overflow.  Use ira_reg_class_subunion instead of\n-\tira_reg_class_union.  Use ira_allocno_class_translate and\n-\tregno_aclass instead of ira_class_translate and regno_cover_class.\n-\tModify code for finding regno_aclass.  Setup preferred classes for\n-\tthe next pass.\n-\t(setup_allocno_cover_class_and_costs): Rename to\n-\tsetup_allocno_class_and_costs.  Use regno_aclass instead of\n-\tregno_cover_class.  Use ira_set_allocno_class instead of\n-\tira_set_allocno_cover_class.\n-\t(init_costs, finish_costs): Use regno_aclass instead of\n-\tregno_cover_class.\n-\t(ira_costs): Use setup_allocno_class_and_costs instead of\n-\tsetup_allocno_cover_class_and_costs.\n-\t(ira_tune_allocno_costs_and_cover_classes): Rename to\n-\tira_tune_allocno_costs.  Check overflow.  Skip conflict hard regs\n-\tby processing objects.  Use ira_reg_class_max_nregs instead of\n-\tira_reg_class_nregs.\n-\n-\t* rtl.h (reg_cover_class): Rename to reg_allocno_class.\n-\n-\t* sched-int.h: Remove mentioning cover classes from the file.\n-\t(sched_regno_cover_class): Rename to sched_regno_pressure_class.\n-\n-\t* reginfo.c: Add 2010 to Copyright.  Remove mentioning cover\n-\tclasses from the file.\n-\t(struct reg_pref): Rename coverclass into allocnoclass.\n-\t(reg_cover_class): Rename to reg_allocno_class.\n-\n-\t* Makefile.in (ira-color.o): Remove SPLAY_TREE_H from\n-\tdependencies.\n-\n-\t* config/alpha/alpha.h (IRA_COVER_CLASSES): Remove.\n-\n-\t* config/arm/arm.h (IRA_COVER_CLASSES): Ditto.\n-\n-\t* config/avr/avr.h (IRA_COVER_CLASSES): Ditto.\n-\n-\t* config/bfin/bfin.h (IRA_COVER_CLASSES): Ditto.\n-\n-\t* config/cris/cris.h (IRA_COVER_CLASSES): Ditto.\n-\n-\t* config/fr30/fr30.h (IRA_COVER_CLASSES): Ditto.\n-\n-\t* config/frv/frv.h (IRA_COVER_CLASSES): Ditto.\n-\n-\t* config/h8300/h8300.h (IRA_COVER_CLASSES): Ditto.\n-\n-\t* config/i386/i386.h (STACK_REG_COVER_CLASS): Ditto.\n-\n-\t* config/i386/i386.c (TARGET_IRA_COVER_CLASSES)\n-\t(i386_ira_cover_classes): Ditto.\n-\n-\t* config/ia64/ia64.h (IRA_COVER_CLASSES): Ditto.\n-\n-\t* config/iq2000/iq2000.h (IRA_COVER_CLASSES): Ditto.\n-\n-\t* config/m32r/m32r.h (IRA_COVER_CLASSES): Ditto.\n-\n-\t* config/m68k/m68k.h (IRA_COVER_CLASSES): Ditto.\n-\n-\t* config/mcore/mcore.h (IRA_COVER_CLASSES): Ditto.\n-\n-\t* config/mep/mep.h (IRA_COVER_CLASSES): Ditto.\n-\n-\t* config/mips/mips.c (TARGET_IRA_COVER_CLASSES)\n-\t(mips_ira_cover_classes): Ditto.\n-\n-\t* config/mn10300/mn10300.h (IRA_COVER_CLASSES): Ditto.\n-\n-\t* config/moxie/moxie.h (IRA_COVER_CLASSES): Ditto.\n-\n-\t* config/pa/pa64-regs.h (IRA_COVER_CLASSES): Ditto.\n-\n-\t* config/pa/pa32-regs.h (IRA_COVER_CLASSES): Ditto.\n-\n-\t* config/picochip/picochip.h (IRA_COVER_CLASSES): Ditto.\n-\n-\t* config/rs6000/rs6000.h (IRA_COVER_CLASSES_PRE_VSX)\n-\t(IRA_COVER_CLASSES_VSX): Ditto.\n-\n-\t* config/rs6000/rs6000.c (TARGET_IRA_COVER_CLASSES)\n-\t(rs6000_ira_cover_classes): Ditto.\n-\n-\t* config/rx/rx.h (IRA_COVER_CLASSES): Ditto.\n-\n-\t* config/s390/s390.h (IRA_COVER_CLASSES): Ditto.\n-\n-\t* config/score/score.h (IRA_COVER_CLASSES): Ditto.\n-\n-\t* config/sh/sh.h (IRA_COVER_CLASSES): Ditto.\n-\n-\t* config/sparc/sparc.h (IRA_COVER_CLASSES): Ditto.\n-\n-\t* config/spu/spu.h (IRA_COVER_CLASSES): Ditto.\n-\n-\t* config/stormy16/stormy16.h (IRA_COVER_CLASSES): Ditto.\n-\n-\t* config/v850/v850.h (IRA_COVER_CLASSES): Ditto.\n-\n-\t* config/vax/vax.h (IRA_COVER_CLASSES): Ditto.\n-\n-\t* config/xtensa/xtensa.h (IRA_COVER_CLASSES): Ditto.\n-\n 2011-03-27  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR target/48288"}]}