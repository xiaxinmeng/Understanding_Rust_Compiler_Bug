{"sha": "e934916c8647d1e343eaacf114fdbff22dfa07a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkzNDkxNmM4NjQ3ZDFlMzQzZWFhY2YxMTRmZGJmZjIyZGZhMDdhNA==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2013-11-27T10:00:30Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2013-11-27T10:00:30Z"}, "message": "Don't create out-of-bounds BIT_FIELD_REF.\n\n2013-11-27  Tom de Vries  <tom@codesourcery.com>\n\t    Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR middle-end/59037\n\t* semantics.c (cxx_fold_indirect_ref): Don't create out-of-bounds\n\tBIT_FIELD_REF.\n\n\t* fold-const.c (fold_indirect_ref_1): Don't create out-of-bounds\n\tBIT_FIELD_REF.\n\t* gimple-fold.c (gimple_fold_indirect_ref): Same.\n\t* tree-cfg.c (verify_expr): Give error if BIT_FIELD_REF is\n\tout-of-bounds.\n\n\t* c-c++-common/pr59037.c: New testcase.\n\nCo-Authored-By: Marc Glisse <marc.glisse@inria.fr>\n\nFrom-SVN: r205438", "tree": {"sha": "f44d3af2f2bc8bececb8139a727cb2e3d0ec9069", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f44d3af2f2bc8bececb8139a727cb2e3d0ec9069"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e934916c8647d1e343eaacf114fdbff22dfa07a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e934916c8647d1e343eaacf114fdbff22dfa07a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e934916c8647d1e343eaacf114fdbff22dfa07a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e934916c8647d1e343eaacf114fdbff22dfa07a4/comments", "author": null, "committer": null, "parents": [{"sha": "ca85aa4ae60f35ae7d490abc7d3e7c68b599eb79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca85aa4ae60f35ae7d490abc7d3e7c68b599eb79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca85aa4ae60f35ae7d490abc7d3e7c68b599eb79"}], "stats": {"total": 70, "additions": 63, "deletions": 7}, "files": [{"sha": "f572df4ddcc3b19171864b59c15aca48f654ab5a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e934916c8647d1e343eaacf114fdbff22dfa07a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e934916c8647d1e343eaacf114fdbff22dfa07a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e934916c8647d1e343eaacf114fdbff22dfa07a4", "patch": "@@ -1,3 +1,13 @@\n+2013-11-27  Tom de Vries  <tom@codesourcery.com>\n+\t    Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR middle-end/59037\n+\t* fold-const.c (fold_indirect_ref_1): Don't create out-of-bounds\n+\tBIT_FIELD_REF.\n+\t* gimple-fold.c (gimple_fold_indirect_ref): Same.\n+\t* tree-cfg.c (verify_expr): Give error if BIT_FIELD_REF is\n+\tout-of-bounds.\n+\n 2013-11-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR middle-end/59138"}, {"sha": "8c5ec0a9556ac8dee7944692304e37290940aaf2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e934916c8647d1e343eaacf114fdbff22dfa07a4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e934916c8647d1e343eaacf114fdbff22dfa07a4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e934916c8647d1e343eaacf114fdbff22dfa07a4", "patch": "@@ -1,3 +1,10 @@\n+2013-11-27  Tom de Vries  <tom@codesourcery.com>\n+\t    Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR middle-end/59037\n+\t* semantics.c (cxx_fold_indirect_ref): Don't create out-of-bounds\n+\tBIT_FIELD_REF.\n+\n 2013-11-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/58874"}, {"sha": "083c4f46f28ae0de6dc75453498c1fa7f137ee8c", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e934916c8647d1e343eaacf114fdbff22dfa07a4/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e934916c8647d1e343eaacf114fdbff22dfa07a4/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=e934916c8647d1e343eaacf114fdbff22dfa07a4", "patch": "@@ -9122,7 +9122,7 @@ cxx_fold_indirect_ref (location_t loc, tree type, tree op0, bool *empty_base)\n \t      unsigned HOST_WIDE_INT indexi = offset * BITS_PER_UNIT;\n \t      tree index = bitsize_int (indexi);\n \n-\t      if (offset/part_widthi <= TYPE_VECTOR_SUBPARTS (op00type))\n+\t      if (offset / part_widthi < TYPE_VECTOR_SUBPARTS (op00type))\n \t\treturn fold_build3_loc (loc,\n \t\t\t\t\tBIT_FIELD_REF, type, op00,\n \t\t\t\t\tpart_width, index);"}, {"sha": "d56b35513f6157faa27de623ef8054f49eab0420", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e934916c8647d1e343eaacf114fdbff22dfa07a4/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e934916c8647d1e343eaacf114fdbff22dfa07a4/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=e934916c8647d1e343eaacf114fdbff22dfa07a4", "patch": "@@ -16720,7 +16720,7 @@ fold_indirect_ref_1 (location_t loc, tree type, tree op0)\n \t      unsigned HOST_WIDE_INT indexi = offset * BITS_PER_UNIT;\n \t      tree index = bitsize_int (indexi);\n \n-\t      if (offset/part_widthi <= TYPE_VECTOR_SUBPARTS (op00type))\n+\t      if (offset / part_widthi < TYPE_VECTOR_SUBPARTS (op00type))\n \t\treturn fold_build3_loc (loc,\n \t\t\t\t\tBIT_FIELD_REF, type, op00,\n \t\t\t\t\tpart_width, index);"}, {"sha": "7e9ba653f32aeb0142a99102181d53749e9b5404", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e934916c8647d1e343eaacf114fdbff22dfa07a4/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e934916c8647d1e343eaacf114fdbff22dfa07a4/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=e934916c8647d1e343eaacf114fdbff22dfa07a4", "patch": "@@ -3418,7 +3418,7 @@ gimple_fold_indirect_ref (tree t)\n           unsigned HOST_WIDE_INT indexi = offset * BITS_PER_UNIT;\n           tree index = bitsize_int (indexi);\n           if (offset / part_widthi\n-              <= TYPE_VECTOR_SUBPARTS (TREE_TYPE (addrtype)))\n+\t      < TYPE_VECTOR_SUBPARTS (TREE_TYPE (addrtype)))\n             return fold_build3 (BIT_FIELD_REF, type, TREE_OPERAND (addr, 0),\n                                 part_width, index);\n \t}"}, {"sha": "ca48472dc9041b3d1d07091dff707855d1341915", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e934916c8647d1e343eaacf114fdbff22dfa07a4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e934916c8647d1e343eaacf114fdbff22dfa07a4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e934916c8647d1e343eaacf114fdbff22dfa07a4", "patch": "@@ -1,3 +1,9 @@\n+2013-11-27  Tom de Vries  <tom@codesourcery.com>\n+\t    Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR middle-end/59037\n+\t* c-c++-common/pr59037.c: New testcase.\n+\n 2013-11-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.c-torture/execute/20131127-1.c: New test."}, {"sha": "fae13c2fa94d38b357efad6649a603ab95d2ee16", "filename": "gcc/testsuite/c-c++-common/pr59037.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e934916c8647d1e343eaacf114fdbff22dfa07a4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr59037.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e934916c8647d1e343eaacf114fdbff22dfa07a4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr59037.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr59037.c?ref=e934916c8647d1e343eaacf114fdbff22dfa07a4", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+typedef int v4si __attribute__ ((vector_size (16)));\n+\n+int\n+main (int argc, char** argv)\n+{\n+  v4si x = {0,1,2,3};\n+  x = (v4si) {(x)[3], (x)[2], (x)[1], (x)[0]};\n+  return x[4];\n+}"}, {"sha": "f8937c6e0f18692f9701bb0ac7ca42bb172b9b18", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e934916c8647d1e343eaacf114fdbff22dfa07a4/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e934916c8647d1e343eaacf114fdbff22dfa07a4/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=e934916c8647d1e343eaacf114fdbff22dfa07a4", "patch": "@@ -2712,15 +2712,29 @@ verify_expr (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n \n       if (TREE_CODE (t) == BIT_FIELD_REF)\n \t{\n-\t  if (!tree_fits_uhwi_p (TREE_OPERAND (t, 1))\n-\t      || !tree_fits_uhwi_p (TREE_OPERAND (t, 2)))\n+\t  tree t0 = TREE_OPERAND (t, 0);\n+\t  tree t1 = TREE_OPERAND (t, 1);\n+\t  tree t2 = TREE_OPERAND (t, 2);\n+\t  tree t0_type = TREE_TYPE (t0);\n+\t  unsigned HOST_WIDE_INT t0_size = 0;\n+\n+\t  if (tree_fits_uhwi_p (TYPE_SIZE (t0_type)))\n+\t    t0_size = tree_to_uhwi (TYPE_SIZE (t0_type));\n+\t  else \n+\t    {\n+\t      HOST_WIDE_INT t0_max_size = max_int_size_in_bytes (t0_type);\n+\t      if (t0_max_size > 0)\n+\t\tt0_size = t0_max_size * BITS_PER_UNIT;\n+\t    }\n+\t  if (!tree_fits_uhwi_p (t1)\n+\t      || !tree_fits_uhwi_p (t2))\n \t    {\n \t      error (\"invalid position or size operand to BIT_FIELD_REF\");\n \t      return t;\n \t    }\n \t  if (INTEGRAL_TYPE_P (TREE_TYPE (t))\n \t      && (TYPE_PRECISION (TREE_TYPE (t))\n-\t\t  != tree_to_uhwi (TREE_OPERAND (t, 1))))\n+\t\t  != tree_to_uhwi (t1)))\n \t    {\n \t      error (\"integral result type precision does not match \"\n \t\t     \"field size of BIT_FIELD_REF\");\n@@ -2729,12 +2743,19 @@ verify_expr (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n \t  else if (!INTEGRAL_TYPE_P (TREE_TYPE (t))\n \t\t   && TYPE_MODE (TREE_TYPE (t)) != BLKmode\n \t\t   && (GET_MODE_PRECISION (TYPE_MODE (TREE_TYPE (t)))\n-\t\t       != tree_to_uhwi (TREE_OPERAND (t, 1))))\n+\t\t       != tree_to_uhwi (t1)))\n \t    {\n \t      error (\"mode precision of non-integral result does not \"\n \t\t     \"match field size of BIT_FIELD_REF\");\n \t      return t;\n \t    }\n+\t  if (t0_size != 0\n+\t      && tree_to_uhwi (t1) + tree_to_uhwi (t2) > t0_size)\n+\t    {\n+\t      error (\"position plus size exceeds size of referenced object in \"\n+\t\t     \"BIT_FIELD_REF\");\n+\t      return t;\n+\t    }\n \t}\n       t = TREE_OPERAND (t, 0);\n "}]}