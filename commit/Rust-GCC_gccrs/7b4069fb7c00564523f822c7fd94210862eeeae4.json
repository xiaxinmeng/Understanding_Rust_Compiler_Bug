{"sha": "7b4069fb7c00564523f822c7fd94210862eeeae4", "node_id": "C_kwDOANBUbNoAKDdiNDA2OWZiN2MwMDU2NDUyM2Y4MjJjN2ZkOTQyMTA4NjJlZWVhZTQ", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2021-11-05T23:30:05Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-12-01T10:24:39Z"}, "message": "[Ada] Storage error on untagged prefixed subprogram calls with -gnatX\n\ngcc/ada/\n\n\t* sem_ch3.adb (Analyze_Full_Type_Declaration): If the full type\n\thas a primitives list but its base type doesn't, set the base\n\ttype's list to the full type's list (covers certain constrained\n\tcases, such as for arrays).\n\t(Analyze_Incomplete_Type_Decl): Unconditionally initialize an\n\tincomplete type's primitives list.\n\t(Analyze_Subtype_Declaration): Unconditionally set a subtype's\n\tprimitives list to the base type's list, so the lists are\n\tshared.\n\t(Build_Derived_Private_Type): Unconditionally initialize a\n\tderived private type's list to a new empty list.\n\t(Build_Derived_Record_Type): Unconditionally initialize a\n\tderived record type's list to a new empty list (now a single\n\tcall for tagged and untagged cases).\n\t(Derived_Type_Declaration): Unconditionally initialize a derived\n\ttype's list to a new empty list in error cases (when Parent_Type\n\tis undefined or illegal).\n\t(Process_Full_View): Unconditionally copy the primitive\n\toperations from the private view to the full view (rather than\n\tconditioning it on whether extensions are enabled).\n\t* sem_ch7.adb (New_Private_Type): Unconditionally initialize an\n\tuntagged private type's primitives list to a new empty list.", "tree": {"sha": "4b3d2420934416bebd4a0e29465935f0a4dc08ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b3d2420934416bebd4a0e29465935f0a4dc08ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b4069fb7c00564523f822c7fd94210862eeeae4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b4069fb7c00564523f822c7fd94210862eeeae4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b4069fb7c00564523f822c7fd94210862eeeae4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b4069fb7c00564523f822c7fd94210862eeeae4/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab5996842789356d512a5eb16e00be244b0b2875", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab5996842789356d512a5eb16e00be244b0b2875", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab5996842789356d512a5eb16e00be244b0b2875"}], "stats": {"total": 130, "additions": 70, "deletions": 60}, "files": [{"sha": "edcc1ca26cbfc759d0651b11e13ae35e65349cc9", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 64, "deletions": 54, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4069fb7c00564523f822c7fd94210862eeeae4/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4069fb7c00564523f822c7fd94210862eeeae4/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=7b4069fb7c00564523f822c7fd94210862eeeae4", "patch": "@@ -3308,33 +3308,41 @@ package body Sem_Ch3 is\n       --  needed. T may be E_Void in cases of earlier errors, and in that\n       --  case we bypass this.\n \n-      if Ekind (T) /= E_Void\n-        and then not Present (Direct_Primitive_Operations (T))\n-      then\n-         if Etype (T) = T then\n-            Set_Direct_Primitive_Operations (T, New_Elmt_List);\n+      if Ekind (T) /= E_Void then\n+         if not Present (Direct_Primitive_Operations (T)) then\n+            if Etype (T) = T then\n+               Set_Direct_Primitive_Operations (T, New_Elmt_List);\n+\n+            --  If Etype of T is the base type (as opposed to a parent type)\n+            --  and already has an associated list of primitive operations,\n+            --  then set T's primitive list to the base type's list. Otherwise,\n+            --  create a new empty primitives list and share the list between\n+            --  T and its base type. The lists need to be shared in common.\n \n-         --  If Etype of T is the base type (as opposed to a parent type) and\n-         --  already has an associated list of primitive operations, then set\n-         --  T's primitive list to the base type's list. Otherwise, create a\n-         --  new empty primitives list and share the list between T and its\n-         --  base type. The lists need to be shared in common between the two.\n+            elsif Etype (T) = Base_Type (T) then\n \n-         elsif Etype (T) = Base_Type (T) then\n+               if not Present (Direct_Primitive_Operations (Base_Type (T)))\n+               then\n+                  Set_Direct_Primitive_Operations\n+                    (Base_Type (T), New_Elmt_List);\n+               end if;\n \n-            if not Present (Direct_Primitive_Operations (Base_Type (T))) then\n                Set_Direct_Primitive_Operations\n-                 (Base_Type (T), New_Elmt_List);\n-            end if;\n+                 (T, Direct_Primitive_Operations (Base_Type (T)));\n \n-            Set_Direct_Primitive_Operations\n-              (T, Direct_Primitive_Operations (Base_Type (T)));\n+            --  Case where the Etype is a parent type, so we need a new\n+            --  primitives list for T.\n \n-         --  Case where the Etype is a parent type, so we need a new primitives\n-         --  list for T.\n+            else\n+               Set_Direct_Primitive_Operations (T, New_Elmt_List);\n+            end if;\n \n-         else\n-            Set_Direct_Primitive_Operations (T, New_Elmt_List);\n+         --  If T already has a Direct_Primitive_Operations list but its\n+         --  base type doesn't then set the base type's list to T's list.\n+\n+         elsif not Present (Direct_Primitive_Operations (Base_Type (T))) then\n+            Set_Direct_Primitive_Operations\n+              (Base_Type (T), Direct_Primitive_Operations (T));\n          end if;\n       end if;\n \n@@ -3509,15 +3517,13 @@ package body Sem_Ch3 is\n          Make_Class_Wide_Type (T);\n       end if;\n \n-      --  For tagged types, or when prefixed-call syntax is allowed for\n-      --  untagged types, initialize the list of primitive operations to\n-      --  an empty list.\n+      --  Initialize the list of primitive operations to an empty list,\n+      --  to cover tagged types as well as untagged types. For untagged\n+      --  types this is used either to analyze the call as legal when\n+      --  Extensions_Allowed is True, or to issue a better error message\n+      --  otherwise.\n \n-      if Tagged_Present (N)\n-        or else Extensions_Allowed\n-      then\n-         Set_Direct_Primitive_Operations (T, New_Elmt_List);\n-      end if;\n+      Set_Direct_Primitive_Operations (T, New_Elmt_List);\n \n       Set_Stored_Constraint (T, No_Elist);\n \n@@ -5802,18 +5808,17 @@ package body Sem_Ch3 is\n          Inherit_Predicate_Flags (Id, T);\n       end if;\n \n-      --  When prefixed calls are enabled for untagged types, the subtype\n-      --  shares the primitive operations of its base type.\n-\n-      if Extensions_Allowed then\n-         Set_Direct_Primitive_Operations\n-           (Id, Direct_Primitive_Operations (Base_Type (T)));\n-      end if;\n-\n       if Etype (Id) = Any_Type then\n          goto Leave;\n       end if;\n \n+      --  When prefixed calls are enabled for untagged types, the subtype\n+      --  shares the primitive operations of its base type. Do this even\n+      --  when Extensions_Allowed is False to issue better error messages.\n+\n+      Set_Direct_Primitive_Operations\n+        (Id, Direct_Primitive_Operations (Base_Type (T)));\n+\n       --  Some common processing on all types\n \n       Set_Size_Info      (Id, T);\n@@ -8290,6 +8295,14 @@ package body Sem_Ch3 is\n          Set_Etype (Base_Type (Derived_Type), Base_Type (Parent_Type));\n \n          if Derive_Subps then\n+            --  Initialize the list of primitive operations to an empty list,\n+            --  to cover tagged types as well as untagged types. For untagged\n+            --  types this is used either to analyze the call as legal when\n+            --  Extensions_Allowed is True, or to issue a better error message\n+            --  otherwise.\n+\n+            Set_Direct_Primitive_Operations (Derived_Type, New_Elmt_List);\n+\n             Derive_Subprograms (Parent_Type, Derived_Type);\n          end if;\n \n@@ -9640,18 +9653,17 @@ package body Sem_Ch3 is\n          end;\n       end if;\n \n-      --  When prefixed-call syntax is allowed for untagged types, initialize\n-      --  the list of primitive operations to an empty list.\n+      --  Initialize the list of primitive operations to an empty list,\n+      --  to cover tagged types as well as untagged types. For untagged\n+      --  types this is used either to analyze the call as legal when\n+      --  Extensions_Allowed is True, or to issue a better error message\n+      --  otherwise.\n \n-      if Extensions_Allowed and then not Is_Tagged then\n-         Set_Direct_Primitive_Operations (Derived_Type, New_Elmt_List);\n-      end if;\n+      Set_Direct_Primitive_Operations (Derived_Type, New_Elmt_List);\n \n       --  Set fields for tagged types\n \n       if Is_Tagged then\n-         Set_Direct_Primitive_Operations (Derived_Type, New_Elmt_List);\n-\n          --  All tagged types defined in Ada.Finalization are controlled\n \n          if Chars (Scope (Derived_Type)) = Name_Finalization\n@@ -17211,15 +17223,13 @@ package body Sem_Ch3 is\n          Set_Etype        (T, Any_Type);\n          Set_Scalar_Range (T, Scalar_Range (Any_Type));\n \n-         --  For tagged types, or when prefixed-call syntax is allowed for\n-         --  untagged types, initialize the list of primitive operations to\n-         --  an empty list.\n+         --  Initialize the list of primitive operations to an empty list,\n+         --  to cover tagged types as well as untagged types. For untagged\n+         --  types this is used either to analyze the call as legal when\n+         --  Extensions_Allowed is True, or to issue a better error message\n+         --  otherwise.\n \n-         if (Is_Tagged_Type (T) and then Is_Record_Type (T))\n-           or else Extensions_Allowed\n-         then\n-            Set_Direct_Primitive_Operations (T, New_Elmt_List);\n-         end if;\n+         Set_Direct_Primitive_Operations (T, New_Elmt_List);\n \n          return;\n       end if;\n@@ -21440,10 +21450,10 @@ package body Sem_Ch3 is\n             end if;\n \n          --  For untagged types, copy the primitives across from the private\n-         --  view to the full view (when extensions are allowed), for support\n-         --  of prefixed calls (when extensions are enabled).\n+         --  view to the full view, for support of prefixed calls when\n+         --  extensions are enabled, and better error messages otherwise.\n \n-         elsif Extensions_Allowed then\n+         else\n             Priv_List := Primitive_Operations (Priv_T);\n             Prim_Elmt := First_Elmt (Priv_List);\n "}, {"sha": "95d7ad4c1cd82463812f32f61e8997cf44cda04b", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4069fb7c00564523f822c7fd94210862eeeae4/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4069fb7c00564523f822c7fd94210862eeeae4/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=7b4069fb7c00564523f822c7fd94210862eeeae4", "patch": "@@ -2633,13 +2633,13 @@ package body Sem_Ch7 is\n       elsif Abstract_Present (Def) then\n          Error_Msg_N (\"only a tagged type can be abstract\", N);\n \n-      --  When extensions are enabled, we initialize the primitive operations\n-      --  list of an untagged private type to an empty element list. (Note:\n-      --  This could be done for all private types and shared with the tagged\n-      --  case above, but for now we do it separately when the feature of\n-      --  prefixed calls for untagged types is enabled.)\n+      --  We initialize the primitive operations list of an untagged private\n+      --  type to an empty element list. Do this even when Extensions_Allowed\n+      --  is False to issue better error messages. (Note: This could be done\n+      --  for all private types and shared with the tagged case above, but\n+      --  for now we do it separately.)\n \n-      elsif Extensions_Allowed then\n+      else\n          Set_Direct_Primitive_Operations (Id, New_Elmt_List);\n       end if;\n    end New_Private_Type;"}]}