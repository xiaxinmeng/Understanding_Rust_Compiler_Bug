{"sha": "d58b95150676722940a72f068927687a8c7d7391", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU4Yjk1MTUwNjc2NzIyOTQwYTcyZjA2ODkyNzY4N2E4YzdkNzM5MQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-23T12:41:17Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-23T12:41:17Z"}, "message": "freeze.adb (Set_Small_Size): Remove extra space for consistency with other similar messages.\n\n2009-07-23  Arnaud Charlet  <charlet@adacore.com>\n\n\t* freeze.adb (Set_Small_Size): Remove extra space for consistency with\n\tother similar messages.\n\t* sem_prag.adb (Freeze_Record_Type, Freeze_Entity): Disable error\n\tmessages/implicit packing in CodePeer mode.\n\t(Analyze_Pragma [case pragma Pack]): Ignore pragma in CodePeer mode.\n\t* errout.adb (Special_Msg_Delete): Suppress 'size too small' message in\n\tCodePeer mode.\n\nFrom-SVN: r150005", "tree": {"sha": "d1bacbd76d3b44f50511f0b8738218b94ecd8a35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1bacbd76d3b44f50511f0b8738218b94ecd8a35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d58b95150676722940a72f068927687a8c7d7391", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d58b95150676722940a72f068927687a8c7d7391", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d58b95150676722940a72f068927687a8c7d7391", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d58b95150676722940a72f068927687a8c7d7391/comments", "author": null, "committer": null, "parents": [{"sha": "3ac489432f87ca7f0570b31d4cae16737cfd48fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ac489432f87ca7f0570b31d4cae16737cfd48fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ac489432f87ca7f0570b31d4cae16737cfd48fd"}], "stats": {"total": 41, "additions": 28, "deletions": 13}, "files": [{"sha": "12b491f41363c857a396fa03abc096a9d233d5af", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d58b95150676722940a72f068927687a8c7d7391/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d58b95150676722940a72f068927687a8c7d7391/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=d58b95150676722940a72f068927687a8c7d7391", "patch": "@@ -2768,18 +2768,21 @@ package body Errout is\n       --  message, since it is likely that this size error is a cascaded\n       --  result of other errors. The reason we eliminate unfrozen types\n       --  is that messages issued before the freeze type are for sure OK.\n+      --  Also suppress \"size too small\" errors in CodePeer mode, since pragma\n+      --  Pack is also ignored in this configuration.\n \n       elsif Msg = \"size for& too small, minimum allowed is ^\"\n-        and then Is_Frozen (E)\n-        and then Serious_Errors_Detected > 0\n-        and then Nkind (N) /= N_Component_Clause\n-        and then Nkind (Parent (N)) /= N_Component_Clause\n-        and then\n-          No (Get_Attribute_Definition_Clause (E, Attribute_Size))\n-        and then\n-          No (Get_Attribute_Definition_Clause (E, Attribute_Object_Size))\n-        and then\n-          No (Get_Attribute_Definition_Clause (E, Attribute_Value_Size))\n+        and then (CodePeer_Mode\n+          or else (Is_Frozen (E)\n+            and then Serious_Errors_Detected > 0\n+            and then Nkind (N) /= N_Component_Clause\n+            and then Nkind (Parent (N)) /= N_Component_Clause\n+            and then\n+              No (Get_Attribute_Definition_Clause (E, Attribute_Size))\n+            and then\n+              No (Get_Attribute_Definition_Clause (E, Attribute_Object_Size))\n+            and then\n+              No (Get_Attribute_Definition_Clause (E, Attribute_Value_Size))))\n       then\n          return True;\n "}, {"sha": "9cd87581fb0c671b5b6d6f053acc8e108323c173", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d58b95150676722940a72f068927687a8c7d7391/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d58b95150676722940a72f068927687a8c7d7391/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=d58b95150676722940a72f068927687a8c7d7391", "patch": "@@ -593,7 +593,7 @@ package body Freeze is\n             if RM_Size (T) < S then\n                Error_Msg_Uint_1 := S;\n                Error_Msg_NE\n-                 (\"size for & too small, minimum allowed is ^\",\n+                 (\"size for& too small, minimum allowed is ^\",\n                   Size_Clause (T), T);\n \n             elsif Unknown_Esize (T) then\n@@ -2289,6 +2289,7 @@ package body Freeze is\n            and then not Has_Discriminants (Rec)\n            and then Esize (Rec) < Scalar_Component_Total_Esize\n            and then Esize (Rec) >= Scalar_Component_Total_RM_Size\n+           and then not CodePeer_Mode\n          then\n             --  If implicit packing enabled, do it\n \n@@ -3007,6 +3008,7 @@ package body Freeze is\n                     and then not Is_Limited_Composite (E)\n                     and then not Is_Packed (Root_Type (E))\n                     and then not Has_Component_Size_Clause (Root_Type (E))\n+                    and then not CodePeer_Mode\n                   then\n                      Get_Index_Bounds (First_Index (E), Lo, Hi);\n "}, {"sha": "4b4da5fbaa571e6ec6df1b8b42597fbf74421ad0", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d58b95150676722940a72f068927687a8c7d7391/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d58b95150676722940a72f068927687a8c7d7391/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=d58b95150676722940a72f068927687a8c7d7391", "patch": "@@ -9508,7 +9508,12 @@ package body Sem_Prag is\n \n                else\n                   if not Rep_Item_Too_Late (Typ, N) then\n-                     if VM_Target = No_VM then\n+                     if CodePeer_Mode then\n+                        --  Ignore pragma Pack and disable corresponding\n+                        --  complex expansions in CodePeer mode\n+                        null;\n+\n+                     elsif VM_Target = No_VM then\n                         Set_Is_Packed            (Base_Type (Typ));\n                         Set_Has_Pragma_Pack      (Base_Type (Typ));\n                         Set_Has_Non_Standard_Rep (Base_Type (Typ));\n@@ -9524,7 +9529,12 @@ package body Sem_Prag is\n \n             else pragma Assert (Is_Record_Type (Typ));\n                if not Rep_Item_Too_Late (Typ, N) then\n-                  if VM_Target = No_VM then\n+                  if CodePeer_Mode then\n+                     --  Ignore pragma Pack and disable corresponding\n+                     --  complex expansions in CodePeer mode\n+                     null;\n+\n+                  elsif VM_Target = No_VM then\n                      Set_Is_Packed            (Base_Type (Typ));\n                      Set_Has_Pragma_Pack      (Base_Type (Typ));\n                      Set_Has_Non_Standard_Rep (Base_Type (Typ));"}]}