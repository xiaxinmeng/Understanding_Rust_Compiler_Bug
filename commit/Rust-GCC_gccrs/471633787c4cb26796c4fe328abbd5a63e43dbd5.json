{"sha": "471633787c4cb26796c4fe328abbd5a63e43dbd5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDcxNjMzNzg3YzRjYjI2Nzk2YzRmZTMyOGFiYmQ1YTYzZTQzZGJkNQ==", "commit": {"author": {"name": "Philip Blundell", "email": "pb@futuretv.com", "date": "2000-02-29T18:00:11Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2000-02-29T18:00:11Z"}, "message": "Apply Philip Blundell's  patch to add arm-conix target.\n\nFrom-SVN: r32260", "tree": {"sha": "8aa41b01c54bcade51646c70e18ccc2677e08cd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8aa41b01c54bcade51646c70e18ccc2677e08cd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/471633787c4cb26796c4fe328abbd5a63e43dbd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/471633787c4cb26796c4fe328abbd5a63e43dbd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/471633787c4cb26796c4fe328abbd5a63e43dbd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/471633787c4cb26796c4fe328abbd5a63e43dbd5/comments", "author": null, "committer": null, "parents": [{"sha": "84d59b7c5a1fa95c929385d09f17b513e5527b37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84d59b7c5a1fa95c929385d09f17b513e5527b37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84d59b7c5a1fa95c929385d09f17b513e5527b37"}], "stats": {"total": 204, "additions": 192, "deletions": 12}, "files": [{"sha": "e1d118856636c29094ac2416db467df016e17448", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/471633787c4cb26796c4fe328abbd5a63e43dbd5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/471633787c4cb26796c4fe328abbd5a63e43dbd5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=471633787c4cb26796c4fe328abbd5a63e43dbd5", "patch": "@@ -1,3 +1,9 @@\n+2000-02-29  Philip Blundell  <pb@futuretv.com>\n+\n+\t* config/arm/conix-elf.h: New file.\n+\t* configure.in (arm*-*-conix*): New configuration.\n+\t* configure: Regenerate.\n+\n 2000-02-28  Jason Merrill  <jason@casey.cygnus.com>\n \n \t* dwarf2out.c (gen_block_die): Output abstract blocks even if they"}, {"sha": "fd29e211a796bf1801ce17670d5e3e700d2c742a", "filename": "gcc/config/arm/conix-elf.h", "status": "added", "additions": 178, "deletions": 0, "changes": 178, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/471633787c4cb26796c4fe328abbd5a63e43dbd5/gcc%2Fconfig%2Farm%2Fconix-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/471633787c4cb26796c4fe328abbd5a63e43dbd5/gcc%2Fconfig%2Farm%2Fconix-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconix-elf.h?ref=471633787c4cb26796c4fe328abbd5a63e43dbd5", "patch": "@@ -0,0 +1,178 @@\n+/* Definitions of target machine for GNU compiler,\n+   for ARM with ConiX OS.\n+   Copyright (C) 2000 Free Software Foundation, Inc.\n+   Contributed by Philip Blundell <pb@futuretv.com>\n+   \n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* Run-time Target Specification.  */\n+#ifndef TARGET_VERSION\n+#define TARGET_VERSION\tfputs (\" (ARM/ELF ConiX)\", stderr);\n+#endif\n+\n+/* If you don't define HAVE_ATEXIT, and the object file format/OS/whatever \n+   does not support constructors/destructors, then gcc implements destructors\n+   by defining its own exit function, which calls the destructors.  This gcc\n+   exit function overrides the C library's exit function, and this can cause\n+   all kinds of havoc if the C library has a non-trivial exit function.  You\n+   really don't want to use the exit function in libgcc2.c.  */\n+#define HAVE_ATEXIT\n+\n+/* Default to using APCS-32 and software floating point.  */\n+#ifndef TARGET_DEFAULT\n+#define TARGET_DEFAULT\t(ARM_FLAG_SOFT_FLOAT | ARM_FLAG_APCS_32)\n+#endif\n+\n+/* Now we define the strings used to build the spec file.  */\n+#define STARTFILE_SPEC\t\t\"crtbegin%O%s crt0%O%s\"\n+\n+#define ENDFILE_SPEC\t\t\"crtend%O%s\"\n+\n+#define USER_LABEL_PREFIX \t\"\"\n+#define LOCAL_LABEL_PREFIX \t\".\"\n+\n+#define TEXT_SECTION\t\t\"\\t.text\"\n+\n+/* Debugging */\n+#define DWARF2_DEBUGGING_INFO\n+#define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n+\n+/* Support for Constructors and Destructors.  */\n+#define READONLY_DATA_SECTION\trdata_section\n+\n+/* A list of other sections which the compiler might be \"in\" at any\n+   given time.  */\n+#define SUBTARGET_EXTRA_SECTIONS in_rdata,\n+\n+/* A list of extra section function definitions.  */\n+#define SUBTARGET_EXTRA_SECTION_FUNCTIONS\tRDATA_SECTION_FUNCTION\n+  \n+#define RDATA_SECTION_ASM_OP\t\"\\t.section .rodata\"\n+\n+#define RDATA_SECTION_FUNCTION \t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+rdata_section ()\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_rdata)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", RDATA_SECTION_ASM_OP);\t\\\n+      in_section = in_rdata;\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define CTOR_LIST_BEGIN\t\t\t\t\t\\\n+asm (CTORS_SECTION_ASM_OP);\t\t\t\t\\\n+func_ptr __CTOR_LIST__[1] = { (func_ptr) (-1) }\n+\n+#define CTOR_LIST_END\t\t\t\t\t\\\n+asm (CTORS_SECTION_ASM_OP);\t\t\t\t\\\n+func_ptr __CTOR_END__[1] = { (func_ptr) 0 };\n+\n+#define DTOR_LIST_BEGIN\t\t\t\t\t\\\n+asm (DTORS_SECTION_ASM_OP);\t\t\t\t\\\n+func_ptr __DTOR_LIST__[1] = { (func_ptr) (-1) }\n+\n+#define DTOR_LIST_END\t\t\t\t\t\\\n+asm (DTORS_SECTION_ASM_OP);\t\t\t\t\\\n+func_ptr __DTOR_END__[1] = { (func_ptr) 0 };\n+\n+/* A C statement to output something to the assembler file to switch to section\n+   NAME for object DECL which is either a FUNCTION_DECL, a VAR_DECL or\n+   NULL_TREE.  Some target formats do not support arbitrary sections.  Do not\n+   define this macro in such cases.  */\n+#define ASM_OUTPUT_SECTION_NAME(STREAM, DECL, NAME, RELOC) \t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if ((DECL) && TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\\\n+\tfprintf (STREAM, \"\\t.section %s,\\\"ax\\\",@progbits\\n\", (NAME));\t\\\n+      else if ((DECL) && DECL_READONLY_SECTION (DECL, RELOC))\t\t\\\n+\tfprintf (STREAM, \"\\t.section %s,\\\"a\\\"\\n\", (NAME));\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\tfprintf (STREAM, \"\\t.section %s,\\\"aw\\\"\\n\", (NAME));\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+/* Don't know how to order these.  UNALIGNED_WORD_ASM_OP is in\n+   dwarf2.out.  */ \n+#define UNALIGNED_WORD_ASM_OP \".4byte\"\n+\n+#define ASM_OUTPUT_DWARF2_ADDR_CONST(FILE,ADDR)                  \\\n+     fprintf ((FILE), \"\\t%s\\t%s\", UNALIGNED_WORD_ASM_OP, ADDR)\n+\n+#define ASM_OUTPUT_DWARF_ADDR_CONST(FILE,RTX)       \t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t    \t\t\\\n+      fprintf ((FILE), \"\\t%s\\t\", UNALIGNED_WORD_ASM_OP);\t\\\n+      output_addr_const ((FILE), (RTX));\t\t    \t\\\n+      fputc ('\\n', (FILE));\t\t\t\t    \t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+\n+/* The ARM development system defines __main.  */\n+#define NAME__MAIN \"__gccmain\"\n+#define SYMBOL__MAIN __gccmain\n+\n+#define MAKE_DECL_ONE_ONLY(DECL) (DECL_WEAK (DECL) = 1)\n+#define UNIQUE_SECTION_P(DECL) (DECL_ONE_ONLY (DECL))\n+#define UNIQUE_SECTION(DECL,RELOC)\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      int len;\t\t\t\t\t\t\t\\\n+      char * name, * string, * prefix;\t\t\t\t\\\n+      \t\t\t\t\t\t\t\t\\\n+      name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (DECL));\t\\\n+      \t\t\t\t\t\t\t\t\\\n+      if (! DECL_ONE_ONLY (DECL))\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  prefix = \".\";                                         \\\n+\t  if (TREE_CODE (DECL) == FUNCTION_DECL)\t\t\\\n+\t    prefix = \".text.\";\t\t\t\t\t\\\n+\t  else if (DECL_READONLY_SECTION (DECL, RELOC))\t\t\\\n+\t    prefix = \".rodata.\";\t\t\t\t\\\n+\t  else\t\t\t\t\t\t\t\\\n+\t    prefix = \".data.\";\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+      else if (TREE_CODE (DECL) == FUNCTION_DECL)\t\t\\\n+\tprefix = \".gnu.linkonce.t.\";\t\t\t\t\\\n+      else if (DECL_READONLY_SECTION (DECL, RELOC))\t\t\\\n+\tprefix = \".gnu.linkonce.r.\";\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\\\n+\tprefix = \".gnu.linkonce.d.\";\t\t\t\t\\\n+      \t\t\t\t\t\t\t\t\\\n+      len = strlen (name) + strlen (prefix);\t\t\t\\\n+      string = alloca (len + 1);\t\t\t\t\\\n+      sprintf (string, \"%s%s\", prefix, name);\t\t\t\\\n+      \t\t\t\t\t\t\t\t\\\n+      DECL_SECTION_NAME (DECL) = build_string (len, string);\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#ifndef CPP_APCS_PC_DEFAULT_SPEC\n+#define CPP_APCS_PC_DEFAULT_SPEC\t\"-D__APCS_32__\"\n+#endif\n+     \n+#ifndef SUBTARGET_CPU_DEFAULT\n+#define SUBTARGET_CPU_DEFAULT \t\tTARGET_CPU_arm7tdmi\n+#endif\n+     \n+#define CPP_PREDEFINES \\\n+  \"-D__arm__ -D__CONIX__ -Acpu(arm) -Amachine(arm) -D__ELF__\"\n+\n+/* Now get the routine arm-elf definitions.  */\n+#include \"arm/elf.h\""}, {"sha": "6cee2551f049c35fd6ec11e3da7a9ff1e98f4255", "filename": "gcc/configure", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/471633787c4cb26796c4fe328abbd5a63e43dbd5/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/471633787c4cb26796c4fe328abbd5a63e43dbd5/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=471633787c4cb26796c4fe328abbd5a63e43dbd5", "patch": "@@ -3557,12 +3557,10 @@ for machine in $build $host $target; do\n \tarm*-*-elf)\n \t\ttm_file=arm/unknown-elf.h\n \t\ttmake_file=arm/t-arm-elf\n-#\t\ttm_file=arm2/unknown-elf.h\n-#\t\ttmake_file=arm2/t-arm-elf\n-#\t\tout_file=arm2/arm.c\n-#\t\txm_file=arm2/xm-arm.h\n-#\t\tmd_file=arm2/arm.md\n-#\t\ttm_p_file=arm2/arm-protos.h\n+\t\t;;\n+\tarm*-*-conix*)\n+\t\ttm_file=arm/conix-elf.h\n+\t\ttmake_file=arm/t-arm-elf\n \t\t;;\n         arm*-*-oabi)\n \t\ttm_file=arm/unknown-elf-oabi.h"}, {"sha": "2e910c81eb64341a6db432b51c6bc800e34f8405", "filename": "gcc/configure.in", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/471633787c4cb26796c4fe328abbd5a63e43dbd5/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/471633787c4cb26796c4fe328abbd5a63e43dbd5/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=471633787c4cb26796c4fe328abbd5a63e43dbd5", "patch": "@@ -821,12 +821,10 @@ changequote([,])dnl\n \tarm*-*-elf)\n \t\ttm_file=arm/unknown-elf.h\n \t\ttmake_file=arm/t-arm-elf\n-#\t\ttm_file=arm2/unknown-elf.h\n-#\t\ttmake_file=arm2/t-arm-elf\n-#\t\tout_file=arm2/arm.c\n-#\t\txm_file=arm2/xm-arm.h\n-#\t\tmd_file=arm2/arm.md\n-#\t\ttm_p_file=arm2/arm-protos.h\n+\t\t;;\n+\tarm*-*-conix*)\n+\t\ttm_file=arm/conix-elf.h\n+\t\ttmake_file=arm/t-arm-elf\n \t\t;;\n         arm*-*-oabi)\n \t\ttm_file=arm/unknown-elf-oabi.h"}]}