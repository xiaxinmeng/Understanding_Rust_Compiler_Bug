{"sha": "3ead06c1cff8fb42b4e278c3624917e6b5477f12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VhZDA2YzFjZmY4ZmI0MmI0ZTI3OGMzNjI0OTE3ZTZiNTQ3N2YxMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-07-30T12:45:01Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-07-30T16:21:32Z"}, "message": "c++: Reject anonymous struct with bases\n\nIn discussion of jakub's patch for C++20 pointer-interconvertibility, it\ncame up that we allow anonymous structs to have bases, but don't do anything\nusable with them.  Let's reject it.\n\nThe comment change is something I noticed while looking for the right place\nto diagnose this: finish_struct_anon does not actually check for anything\ninvalid, so it shouldn't claim to.\n\ngcc/cp/ChangeLog:\n\n\t* class.c (finish_struct_anon): Improve comment.\n\t* decl.c (fixup_anonymous_aggr): Reject anonymous struct\n\twith bases.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/ext/anon-struct8.C: New test.", "tree": {"sha": "59b79334540cc2c7c14d0dbf92e588e57796a85b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59b79334540cc2c7c14d0dbf92e588e57796a85b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ead06c1cff8fb42b4e278c3624917e6b5477f12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ead06c1cff8fb42b4e278c3624917e6b5477f12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ead06c1cff8fb42b4e278c3624917e6b5477f12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ead06c1cff8fb42b4e278c3624917e6b5477f12/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ba2003cf306aa98b6ec91c9d849ab9bafcf17c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ba2003cf306aa98b6ec91c9d849ab9bafcf17c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ba2003cf306aa98b6ec91c9d849ab9bafcf17c2"}], "stats": {"total": 15, "additions": 13, "deletions": 2}, "files": [{"sha": "6f31700c06c46b8e07c8e638e2b5f3cbeeb3562e", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ead06c1cff8fb42b4e278c3624917e6b5477f12/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ead06c1cff8fb42b4e278c3624917e6b5477f12/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=3ead06c1cff8fb42b4e278c3624917e6b5477f12", "patch": "@@ -3072,8 +3072,7 @@ finish_struct_anon_r (tree field)\n     }\n }\n \n-/* Check for things that are invalid.  There are probably plenty of other\n-   things we should check for also.  */\n+/* Fix up any anonymous union/struct members of T.  */\n \n static void\n finish_struct_anon (tree t)"}, {"sha": "71308a06c639c2931adb6fae066c7b641539754e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ead06c1cff8fb42b4e278c3624917e6b5477f12/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ead06c1cff8fb42b4e278c3624917e6b5477f12/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=3ead06c1cff8fb42b4e278c3624917e6b5477f12", "patch": "@@ -5084,6 +5084,9 @@ fixup_anonymous_aggr (tree t)\n     {\n       tree field, type;\n \n+      if (BINFO_N_BASE_BINFOS (TYPE_BINFO (t)))\n+\terror_at (location_of (t), \"anonymous struct with base classes\");\n+\n       for (field = TYPE_FIELDS (t); field; field = DECL_CHAIN (field))\n \tif (TREE_CODE (field) == FIELD_DECL)\n \t  {"}, {"sha": "f4e3f11b6789c01192e3020b5360bcf7547e35e5", "filename": "gcc/testsuite/g++.dg/ext/anon-struct8.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ead06c1cff8fb42b4e278c3624917e6b5477f12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ead06c1cff8fb42b4e278c3624917e6b5477f12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct8.C?ref=3ead06c1cff8fb42b4e278c3624917e6b5477f12", "patch": "@@ -0,0 +1,9 @@\n+// { dg-options \"\" }\n+\n+struct A { };\n+struct B {\n+  struct: A { int i; };\t\t// { dg-error \"anonymous struct with base\" }\n+};\n+union U {\n+  struct: A { int i; };\t\t// { dg-error \"anonymous struct with base\" }\n+};"}]}