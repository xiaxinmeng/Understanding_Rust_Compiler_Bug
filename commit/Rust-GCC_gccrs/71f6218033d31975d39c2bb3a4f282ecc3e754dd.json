{"sha": "71f6218033d31975d39c2bb3a4f282ecc3e754dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFmNjIxODAzM2QzMTk3NWQzOWMyYmIzYTRmMjgyZWNjM2U3NTRkZA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2007-09-26T10:46:08Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-09-26T10:46:08Z"}, "message": "sem_ch3.adb (Derive_Subprograms): If the interface parent is a direct ancestor of the derived type...\n\n2007-09-26  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Derive_Subprograms): If the interface parent is a direct\n\tancestor of the derived type, the operations are inherited from the\n\tprimary dispatch table of the parent.\n\t(OK_For_Limited_Init_In_05): Remove old comment. Reject in-place calls\n\twhen the context is an explicit type conversion.\n\nFrom-SVN: r128802", "tree": {"sha": "c41c7eab6c1d32b034522aeeed38b3a3628ade5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c41c7eab6c1d32b034522aeeed38b3a3628ade5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71f6218033d31975d39c2bb3a4f282ecc3e754dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71f6218033d31975d39c2bb3a4f282ecc3e754dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71f6218033d31975d39c2bb3a4f282ecc3e754dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71f6218033d31975d39c2bb3a4f282ecc3e754dd/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6f31a9d795f204b599466d53ef22cc579bfe37bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f31a9d795f204b599466d53ef22cc579bfe37bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f31a9d795f204b599466d53ef22cc579bfe37bd"}], "stats": {"total": 65, "additions": 43, "deletions": 22}, "files": [{"sha": "e6d0781df4c5593e651915dfd298d95579416530", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 43, "deletions": 22, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71f6218033d31975d39c2bb3a4f282ecc3e754dd/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71f6218033d31975d39c2bb3a4f282ecc3e754dd/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=71f6218033d31975d39c2bb3a4f282ecc3e754dd", "patch": "@@ -8304,16 +8304,35 @@ package body Sem_Ch3 is\n         and then not In_Inlined_Body\n       then\n          if not OK_For_Limited_Init (Exp) then\n-            --  In GNAT mode, this is just a warning, to allow it to be\n-            --  evilly turned off. Otherwise it is a real error.\n+\n+            --  In GNAT mode, this is just a warning, to allow it to be evilly\n+            --  turned off. Otherwise it is a real error.\n \n             if GNAT_Mode then\n                Error_Msg_N\n-                 (\"cannot initialize entities of limited type?\", Exp);\n-            else\n+                 (\"?cannot initialize entities of limited type!\", Exp);\n+\n+            elsif Ada_Version < Ada_05 then\n                Error_Msg_N\n                  (\"cannot initialize entities of limited type\", Exp);\n                Explain_Limited_Type (T, Exp);\n+\n+            else\n+               --  Specialize error message according to kind of illegal\n+               --  initial expression.\n+\n+               if Nkind (Exp) = N_Type_Conversion\n+                 and then Nkind (Expression (Exp)) = N_Function_Call\n+               then\n+                  Error_Msg_N\n+                    (\"illegal context for call\"\n+                      & \" to function with limited result\", Exp);\n+\n+               else\n+                  Error_Msg_N\n+                    (\"initialization of limited object requires agggregate \"\n+                      & \"or function call\",  Exp);\n+               end if;\n             end if;\n          end if;\n       end if;\n@@ -11621,24 +11640,28 @@ package body Sem_Ch3 is\n                end if;\n \n             else\n-\n                --  If the generic parent type is present, the derived type\n                --  is an instance of a formal derived type, and within the\n                --  instance its operations are those of the actual. We derive\n                --  from the formal type but make the inherited operations\n                --  aliases of the corresponding operations of the actual.\n \n-               if Is_Interface (Parent_Type) then\n-\n+               if Is_Interface (Parent_Type)\n+                 and then Root_Type (Derived_Type) /= Parent_Type\n+               then\n                   --  Find the corresponding operation in the generic actual.\n                   --  Given that the actual is not a direct descendant of the\n                   --  parent, as in Ada 95, the primitives are not necessarily\n                   --  in the same order, so we have to traverse the list of\n                   --  primitive operations of the actual to find the one that\n                   --  implements the interface operation.\n \n-                  Act_Elmt := First_Elmt (Act_List);\n+                  --  Note that if the parent type is the direct ancestor of\n+                  --  the derived type, then even if it is an interface the\n+                  --  operations are inherited from the primary dispatch table\n+                  --  and are in the proper order.\n \n+                  Act_Elmt := First_Elmt (Act_List);\n                   while Present (Act_Elmt) loop\n                      exit when\n                        Abstract_Interface_Alias (Node (Act_Elmt)) = Subp;\n@@ -11683,9 +11706,9 @@ package body Sem_Ch3 is\n    --------------------------------\n \n    procedure Derived_Standard_Character\n-     (N             : Node_Id;\n-      Parent_Type   : Entity_Id;\n-      Derived_Type  : Entity_Id)\n+     (N            : Node_Id;\n+      Parent_Type  : Entity_Id;\n+      Derived_Type : Entity_Id)\n    is\n       Loc           : constant Source_Ptr := Sloc (N);\n       Def           : constant Node_Id    := Type_Definition (N);\n@@ -14232,14 +14255,6 @@ package body Sem_Ch3 is\n \n    function OK_For_Limited_Init_In_05 (Exp : Node_Id) return Boolean is\n    begin\n-      --  ???Expand_N_Extended_Return_Statement generates code that would\n-      --  violate the rules in some cases. Once we have build-in-place\n-      --  function returns working, we can probably remove the following\n-      --  check.\n-\n-      if not Comes_From_Source (Exp) then\n-         return True;\n-      end if;\n \n       --  Ada 2005 (AI-287, AI-318): Relax the strictness of the front end in\n       --  case of limited aggregates (including extension aggregates), and\n@@ -14250,14 +14265,20 @@ package body Sem_Ch3 is\n          when N_Aggregate | N_Extension_Aggregate | N_Function_Call | N_Op =>\n             return True;\n \n+         when N_Qualified_Expression =>\n+            return\n+              OK_For_Limited_Init_In_05 (Expression (Original_Node (Exp)));\n+\n          --  Ada 2005 (AI-251): If a class-wide interface object is initialized\n          --  with a function call, the expander has rewritten the call into an\n          --  N_Type_Conversion node to force displacement of the pointer to\n          --  reference the component containing the secondary dispatch table.\n+         --  Otherwise a type conversion is not a legal context.\n \n-         when N_Qualified_Expression | N_Type_Conversion =>\n-            return OK_For_Limited_Init_In_05\n-                     (Expression (Original_Node (Exp)));\n+         when N_Type_Conversion =>\n+            return not Comes_From_Source (Exp)\n+              and then\n+                OK_For_Limited_Init_In_05 (Expression (Original_Node (Exp)));\n \n          when N_Indexed_Component | N_Selected_Component  =>\n             return Nkind (Exp) = N_Function_Call;"}]}