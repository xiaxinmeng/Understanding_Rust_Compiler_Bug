{"sha": "2a50edcd0f5cca974fe82b27a1b109618afa1a05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE1MGVkY2QwZjVjY2E5NzRmZTgyYjI3YTFiMTA5NjE4YWZhMWEwNQ==", "commit": {"author": {"name": "Volker Reichelt", "email": "reichelt@igpm.rwth-aachen.de", "date": "2006-07-17T04:42:24Z"}, "committer": {"name": "Volker Reichelt", "email": "reichelt@gcc.gnu.org", "date": "2006-07-17T04:42:24Z"}, "message": "re PR c++/28250 (ICE with invalid catch)\n\n\tPR c++/28250\n\t* name-lookup.c (pushdecl_maybe_friend): Return early on\n\terror_mark_node.\n\t* except.c (expand_start_catch_block): Use error_mark_node instead\n\tof NULL_TREE for invalid decls.\n\t* parser.c (cp_parser_exception_declaration): Return error_mark_node\n\ton invalid catch parameter. Simplify.\n\n\t* g++.dg/eh/catch1.C: New test.\n\t* g++.dg/eh/catch2.C: New test.\n\nFrom-SVN: r115516", "tree": {"sha": "215431855ee45679fe617055909a44fafef8e7f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/215431855ee45679fe617055909a44fafef8e7f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a50edcd0f5cca974fe82b27a1b109618afa1a05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a50edcd0f5cca974fe82b27a1b109618afa1a05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a50edcd0f5cca974fe82b27a1b109618afa1a05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a50edcd0f5cca974fe82b27a1b109618afa1a05/comments", "author": null, "committer": null, "parents": [{"sha": "23be7a669151a833b7ab99a657082ce72a9ae3fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23be7a669151a833b7ab99a657082ce72a9ae3fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23be7a669151a833b7ab99a657082ce72a9ae3fd"}], "stats": {"total": 53, "additions": 41, "deletions": 12}, "files": [{"sha": "821df2bde78ea3a6c8b88a5571c7dd82caf845ba", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a50edcd0f5cca974fe82b27a1b109618afa1a05/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a50edcd0f5cca974fe82b27a1b109618afa1a05/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2a50edcd0f5cca974fe82b27a1b109618afa1a05", "patch": "@@ -1,3 +1,13 @@\n+2006-07-17  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+\n+\tPR c++/28250\n+\t* name-lookup.c (pushdecl_maybe_friend): Return early on\n+\terror_mark_node.\n+\t* except.c (expand_start_catch_block): Use error_mark_node instead\n+\tof NULL_TREE for invalid decls.\n+\t* parser.c (cp_parser_exception_declaration): Return error_mark_node\n+\ton invalid catch parameter. Simplify.\n+\n 2006-07-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/28370"}, {"sha": "17166d92af0d93fdf18797e0cb964edfa2001941", "filename": "gcc/cp/except.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a50edcd0f5cca974fe82b27a1b109618afa1a05/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a50edcd0f5cca974fe82b27a1b109618afa1a05/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=2a50edcd0f5cca974fe82b27a1b109618afa1a05", "patch": "@@ -412,7 +412,7 @@ expand_start_catch_block (tree decl)\n \n   /* Make sure this declaration is reasonable.  */\n   if (decl && !complete_ptr_ref_or_void_ptr_p (TREE_TYPE (decl), NULL_TREE))\n-    decl = NULL_TREE;\n+    decl = error_mark_node;\n \n   if (decl)\n     type = prepare_eh_type (TREE_TYPE (decl));\n@@ -438,7 +438,7 @@ expand_start_catch_block (tree decl)\n \n   /* If there's no decl at all, then all we need to do is make sure\n      to tell the runtime that we've begun handling the exception.  */\n-  if (decl == NULL)\n+  if (decl == NULL || decl == error_mark_node)\n     finish_expr_stmt (do_begin_catch ());\n \n   /* If the C++ object needs constructing, we need to do that before"}, {"sha": "7cc2fee53291bfa46050466f564608adff765744", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a50edcd0f5cca974fe82b27a1b109618afa1a05/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a50edcd0f5cca974fe82b27a1b109618afa1a05/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=2a50edcd0f5cca974fe82b27a1b109618afa1a05", "patch": "@@ -569,6 +569,9 @@ pushdecl_maybe_friend (tree x, bool is_friend)\n \n   timevar_push (TV_NAME_LOOKUP);\n \n+  if (x == error_mark_node)\n+    POP_TIMEVAR_AND_RETURN (TV_NAME_LOOKUP, error_mark_node);\n+\n   need_new_binding = 1;\n \n   if (DECL_TEMPLATE_PARM_P (x))"}, {"sha": "c4224019da7eccb56159caaf03c73db794fa17e0", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a50edcd0f5cca974fe82b27a1b109618afa1a05/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a50edcd0f5cca974fe82b27a1b109618afa1a05/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=2a50edcd0f5cca974fe82b27a1b109618afa1a05", "patch": "@@ -14343,7 +14343,6 @@ cp_parser_handler (cp_parser* parser)\n static tree\n cp_parser_exception_declaration (cp_parser* parser)\n {\n-  tree decl;\n   cp_decl_specifier_seq type_specifiers;\n   cp_declarator *declarator;\n   const char *saved_message;\n@@ -14376,16 +14375,10 @@ cp_parser_exception_declaration (cp_parser* parser)\n   /* Restore the saved message.  */\n   parser->type_definition_forbidden_message = saved_message;\n \n-  if (type_specifiers.any_specifiers_p)\n-    {\n-      decl = grokdeclarator (declarator, &type_specifiers, CATCHPARM, 1, NULL);\n-      if (decl == NULL_TREE)\n-\terror (\"invalid catch parameter\");\n-    }\n-  else\n-    decl = NULL_TREE;\n+  if (!type_specifiers.any_specifiers_p)\n+    return error_mark_node;\n \n-  return decl;\n+  return grokdeclarator (declarator, &type_specifiers, CATCHPARM, 1, NULL);\n }\n \n /* Parse a throw-expression."}, {"sha": "8b6cf37bd739817a1541da8eaac6e55413b800d4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a50edcd0f5cca974fe82b27a1b109618afa1a05/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a50edcd0f5cca974fe82b27a1b109618afa1a05/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2a50edcd0f5cca974fe82b27a1b109618afa1a05", "patch": "@@ -1,3 +1,9 @@\n+2006-07-17  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+\n+\tPR c++/28250\n+\t* g++.dg/eh/catch1.C: New test.\n+\t* g++.dg/eh/catch2.C: New test.\n+\n 2006-07-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/28370"}, {"sha": "730218011ff7cbc7053b859b25dceecb0d7b0fb5", "filename": "gcc/testsuite/g++.dg/eh/catch1.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a50edcd0f5cca974fe82b27a1b109618afa1a05/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fcatch1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a50edcd0f5cca974fe82b27a1b109618afa1a05/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fcatch1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fcatch1.C?ref=2a50edcd0f5cca974fe82b27a1b109618afa1a05", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/28250\n+// { dg-do compile }\n+\n+template<int> void foo()\n+{\n+  try {}\n+  catch (int(0)) {}  // { dg-error \"before\" }\n+}"}, {"sha": "33db946490a63f1c3ccc8f1308d5e7d7ec25befb", "filename": "gcc/testsuite/g++.dg/eh/catch2.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a50edcd0f5cca974fe82b27a1b109618afa1a05/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fcatch2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a50edcd0f5cca974fe82b27a1b109618afa1a05/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fcatch2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fcatch2.C?ref=2a50edcd0f5cca974fe82b27a1b109618afa1a05", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/28250\n+// { dg-do compile }\n+\n+void foo()\n+{\n+  try {}\n+  catch () {}  // { dg-error \"before\" }\n+  catch (...) {}\n+}"}]}