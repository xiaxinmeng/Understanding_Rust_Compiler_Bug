{"sha": "ecafcf0577cfe1672f3c9e73045448b8f3d7948b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNhZmNmMDU3N2NmZTE2NzJmM2M5ZTczMDQ1NDQ4YjhmM2Q3OTQ4Yg==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2013-09-12T18:23:09Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2013-09-12T18:23:09Z"}, "message": "re PR middle-end/58335 (S/390: reload vs lra regression - testcase builtin-in-setjmp)\n\n2013-09-12  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR middle-end/58335\n\t* lra-eliminations (remove_reg_equal_offset_note): New.\n\t(eliminate_regs_in_insn): Rewrite frame pointer to hard frame\n\tpointer elimination with using remove_reg_equal_offset_note.\n\nFrom-SVN: r202536", "tree": {"sha": "17e9dda98e5ef4a5f9e4dbde92e446b553d31776", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17e9dda98e5ef4a5f9e4dbde92e446b553d31776"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ecafcf0577cfe1672f3c9e73045448b8f3d7948b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecafcf0577cfe1672f3c9e73045448b8f3d7948b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecafcf0577cfe1672f3c9e73045448b8f3d7948b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecafcf0577cfe1672f3c9e73045448b8f3d7948b/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f6a83b4a9f8bb38ee24d244a4521ad6f8f77496c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6a83b4a9f8bb38ee24d244a4521ad6f8f77496c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6a83b4a9f8bb38ee24d244a4521ad6f8f77496c"}], "stats": {"total": 111, "additions": 66, "deletions": 45}, "files": [{"sha": "4a3fca2f193f03b2874b3d939f42420e8aeadc18", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecafcf0577cfe1672f3c9e73045448b8f3d7948b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecafcf0577cfe1672f3c9e73045448b8f3d7948b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ecafcf0577cfe1672f3c9e73045448b8f3d7948b", "patch": "@@ -1,3 +1,10 @@\n+2013-09-12  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR middle-end/58335\n+\t* lra-eliminations (remove_reg_equal_offset_note): New.\n+\t(eliminate_regs_in_insn): Rewrite frame pointer to hard frame\n+\tpointer elimination with using remove_reg_equal_offset_note.\n+\n 2013-09-12  DJ Delorie  <dj@redhat.com>\n \n \t* config/msp430/: New port."}, {"sha": "f2a57511cbda8423ce0b5425fbf5373d3b67431e", "filename": "gcc/lra-eliminations.c", "status": "modified", "additions": 59, "deletions": 45, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecafcf0577cfe1672f3c9e73045448b8f3d7948b/gcc%2Flra-eliminations.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecafcf0577cfe1672f3c9e73045448b8f3d7948b/gcc%2Flra-eliminations.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-eliminations.c?ref=ecafcf0577cfe1672f3c9e73045448b8f3d7948b", "patch": "@@ -745,13 +745,42 @@ mark_not_eliminable (rtx x)\n \n \f\n \n+#ifdef HARD_FRAME_POINTER_REGNUM\n+\n+/* Find offset equivalence note for reg WHAT in INSN and return the\n+   found elmination offset.  If the note is not found, return NULL.\n+   Remove the found note.  */\n+static rtx\n+remove_reg_equal_offset_note (rtx insn, rtx what)\n+{\n+  rtx link, *link_loc;\n+\n+  for (link_loc = &REG_NOTES (insn);\n+       (link = *link_loc) != NULL_RTX;\n+       link_loc = &XEXP (link, 1))\n+    if (REG_NOTE_KIND (link) == REG_EQUAL\n+\t&& GET_CODE (XEXP (link, 0)) == PLUS\n+\t&& XEXP (XEXP (link, 0), 0) == what\n+\t&& CONST_INT_P (XEXP (XEXP (link, 0), 1)))\n+      {\n+\t*link_loc = XEXP (link, 1);\n+\treturn XEXP (XEXP (link, 0), 1);\n+      }\n+  return NULL_RTX;\n+}\n+\n+#endif\n+\n /* Scan INSN and eliminate all eliminable hard registers in it.\n \n    If REPLACE_P is true, do the replacement destructively.  Also\n    delete the insn as dead it if it is setting an eliminable register.\n \n    If REPLACE_P is false, just update the offsets while keeping the\n-   base register the same.  */\n+   base register the same.  Attach the note about used elimination for\n+   insns setting frame pointer to update elimination easy (without\n+   parsing already generated elimination insns to find offset\n+   previously used) in future.  */\n \n static void\n eliminate_regs_in_insn (rtx insn, bool replace_p)\n@@ -790,59 +819,44 @@ eliminate_regs_in_insn (rtx insn, bool replace_p)\n       if (ep->from == FRAME_POINTER_REGNUM\n \t  && ep->to == HARD_FRAME_POINTER_REGNUM)\n \t{\n+\t  rtx src = SET_SRC (old_set);\n+\t  rtx off = remove_reg_equal_offset_note (insn, ep->to_rtx);\n+\n \t  if (replace_p)\n \t    {\n \t      SET_DEST (old_set) = ep->to_rtx;\n \t      lra_update_insn_recog_data (insn);\n \t      return;\n \t    }\n-\t  else\n+\t  else if (off != NULL_RTX\n+\t\t   || src == ep->to_rtx\n+\t\t   || (GET_CODE (src) == PLUS\n+\t\t       && XEXP (src, 1) == ep->to_rtx\n+\t\t       && CONST_INT_P (XEXP (src, 1))))\n \t    {\n-\t      rtx base = SET_SRC (old_set);\n-\t      HOST_WIDE_INT offset = 0;\n-\t      rtx base_insn = insn;\n-\n-\t      while (base != ep->to_rtx)\n+\t      HOST_WIDE_INT offset = (off != NULL_RTX\n+\t\t\t\t      ? INTVAL (off)\n+\t\t\t\t      : src == ep->to_rtx\n+\t\t\t\t      ? 0 : INTVAL (XEXP (src, 1)));\n+\t      \n+\t      offset -= (ep->offset - ep->previous_offset);\n+\t      src = plus_constant (Pmode, ep->to_rtx, offset);\n+\t      \n+\t      /* First see if this insn remains valid when we make\n+\t\t the change.  If not, keep the INSN_CODE the same\n+\t\t and let the constraint pass fit it up.  */\n+\t      validate_change (insn, &SET_SRC (old_set), src, 1);\n+\t      validate_change (insn, &SET_DEST (old_set),\n+\t\t\t       ep->from_rtx, 1);\n+\t      if (! apply_change_group ())\n \t\t{\n-\t\t  rtx prev_insn, prev_set;\n-\n-\t\t  if (GET_CODE (base) == PLUS && CONST_INT_P (XEXP (base, 1)))\n-\t\t    {\n-\t\t      offset += INTVAL (XEXP (base, 1));\n-\t\t      base = XEXP (base, 0);\n-\t\t    }\n-\t\t  else if ((prev_insn = prev_nonnote_insn (base_insn)) != 0\n-\t\t\t   && (prev_set = single_set (prev_insn)) != 0\n-\t\t\t   && rtx_equal_p (SET_DEST (prev_set), base))\n-\t\t    {\n-\t\t      base = SET_SRC (prev_set);\n-\t\t      base_insn = prev_insn;\n-\t\t    }\n-\t\t  else\n-\t\t    break;\n-\t\t}\n-\n-\t      if (base == ep->to_rtx)\n-\t\t{\n-\t\t  rtx src;\n-\n-\t\t  offset -= (ep->offset - ep->previous_offset);\n-\t\t  src = plus_constant (Pmode, ep->to_rtx, offset);\n-\n-\t\t  /* First see if this insn remains valid when we make\n-\t\t     the change.  If not, keep the INSN_CODE the same\n-\t\t     and let the constraint pass fit it up.  */\n-\t\t  validate_change (insn, &SET_SRC (old_set), src, 1);\n-\t\t  validate_change (insn, &SET_DEST (old_set),\n-\t\t\t\t   ep->from_rtx, 1);\n-\t\t  if (! apply_change_group ())\n-\t\t    {\n-\t\t      SET_SRC (old_set) = src;\n-\t\t      SET_DEST (old_set) = ep->from_rtx;\n-\t\t    }\n-\t\t  lra_update_insn_recog_data (insn);\n-\t\t  return;\n+\t\t  SET_SRC (old_set) = src;\n+\t\t  SET_DEST (old_set) = ep->from_rtx;\n \t\t}\n+\t      lra_update_insn_recog_data (insn);\n+\t      /* Add offset note for future updates.  */\n+\t      add_reg_note (insn, REG_EQUAL, src);\n+\t      return;\n \t    }\n \n "}]}