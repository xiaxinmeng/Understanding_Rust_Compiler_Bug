{"sha": "96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZkNWM2ZGNmNmI4ZWMwYWQzNGE4MjA4ZmM2ZDgyZGYzY2UyMGUyYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-08-05T08:00:30Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-08-05T08:00:30Z"}, "message": "re PR target/91341 (Missing AVX Intrinsics: load/store u2)\n\n\tPR target/91341\n\t* config/i386/avxintrin.h (_mm256_loadu2_m128, _mm256_storeu2_m128,\n\t_mm256_loadu2_m128d, _mm256_storeu2_m128d, _mm256_loadu2_m128i,\n\t_mm256_storeu2_m128i): New function.\n\n\t* gcc.target/i386/avx-loadu2-m128-1.c: New test.\n\t* gcc.target/i386/avx-loadu2-m128-2.c: New test.\n\t* gcc.target/i386/avx-loadu2-m128d-1.c: New test.\n\t* gcc.target/i386/avx-loadu2-m128d-2.c: New test.\n\t* gcc.target/i386/avx-loadu2-m128i-1.c: New test.\n\t* gcc.target/i386/avx-loadu2-m128i-2.c: New test.\n\t* gcc.target/i386/avx-storeu2-m128-1.c: New test.\n\t* gcc.target/i386/avx-storeu2-m128-2.c: New test.\n\t* gcc.target/i386/avx-storeu2-m128d-1.c: New test.\n\t* gcc.target/i386/avx-storeu2-m128d-2.c: New test.\n\t* gcc.target/i386/avx-storeu2-m128i-1.c: New test.\n\t* gcc.target/i386/avx-storeu2-m128i-2.c: New test.\n\nFrom-SVN: r274109", "tree": {"sha": "f7bd970b4520b4e9f593239a8c5bd6747e4327dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7bd970b4520b4e9f593239a8c5bd6747e4327dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "860edc46624a23e678934a907d8fccb2fad0dcb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/860edc46624a23e678934a907d8fccb2fad0dcb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/860edc46624a23e678934a907d8fccb2fad0dcb5"}], "stats": {"total": 242, "additions": 242, "deletions": 0}, "files": [{"sha": "121da52b33cb622e31bbb0caa561bfc8d50ddf4f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a", "patch": "@@ -1,3 +1,10 @@\n+2019-08-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/91341\n+\t* config/i386/avxintrin.h (_mm256_loadu2_m128, _mm256_storeu2_m128,\n+\t_mm256_loadu2_m128d, _mm256_storeu2_m128d, _mm256_loadu2_m128i,\n+\t_mm256_storeu2_m128i): New function.\n+\n 2019-08-05  Kito Cheng  <kito.cheng@sifive.com>\n \n \t* config/riscv/riscv.c (riscv_promote_function_mode): New."}, {"sha": "18c0711a8ad183295c9d6b11adafe6d80d8a5e0f", "filename": "gcc/config/i386/avxintrin.h", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a/gcc%2Fconfig%2Fi386%2Favxintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a/gcc%2Fconfig%2Fi386%2Favxintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favxintrin.h?ref=96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a", "patch": "@@ -1520,6 +1520,48 @@ _mm256_setr_m128i (__m128i __L, __m128i __H)\n   return _mm256_set_m128i (__H, __L);\n }\n \n+extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_loadu2_m128 (float const *__PH, float const *__PL)\n+{\n+  return _mm256_insertf128_ps (_mm256_castps128_ps256 (_mm_loadu_ps (__PL)),\n+\t\t\t       _mm_loadu_ps (__PH), 1);\n+}\n+\n+extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_storeu2_m128 (float *__PH, float *__PL, __m256 __A)\n+{\n+  _mm_storeu_ps (__PL, _mm256_castps256_ps128 (__A));\n+  _mm_storeu_ps (__PH, _mm256_extractf128_ps (__A, 1));\n+}\n+\n+extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_loadu2_m128d (double const *__PH, double const *__PL)\n+{\n+  return _mm256_insertf128_pd (_mm256_castpd128_pd256 (_mm_loadu_pd (__PL)),\n+\t\t\t       _mm_loadu_pd (__PH), 1);\n+}\n+\n+extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_storeu2_m128d (double *__PH, double *__PL, __m256d __A)\n+{\n+  _mm_storeu_pd (__PL, _mm256_castpd256_pd128 (__A));\n+  _mm_storeu_pd (__PH, _mm256_extractf128_pd (__A, 1));\n+}\n+\n+extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_loadu2_m128i (__m128i_u const *__PH, __m128i_u const *__PL)\n+{\n+  return _mm256_insertf128_si256 (_mm256_castsi128_si256 (_mm_loadu_si128 (__PL)),\n+\t\t\t\t  _mm_loadu_si128 (__PH), 1);\n+}\n+\n+extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_storeu2_m128i (__m128i_u *__PH, __m128i_u *__PL, __m256i __A)\n+{\n+  _mm_storeu_si128 (__PL, _mm256_castsi256_si128 (__A));\n+  _mm_storeu_si128 (__PH, _mm256_extractf128_si256 (__A, 1));\n+}\n+\n #ifdef __DISABLE_AVX__\n #undef __DISABLE_AVX__\n #pragma GCC pop_options"}, {"sha": "e19f136370bf62a90843e0a6c795da9b68153d3c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a", "patch": "@@ -1,3 +1,19 @@\n+2019-08-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/91341\n+\t* gcc.target/i386/avx-loadu2-m128-1.c: New test.\n+\t* gcc.target/i386/avx-loadu2-m128-2.c: New test.\n+\t* gcc.target/i386/avx-loadu2-m128d-1.c: New test.\n+\t* gcc.target/i386/avx-loadu2-m128d-2.c: New test.\n+\t* gcc.target/i386/avx-loadu2-m128i-1.c: New test.\n+\t* gcc.target/i386/avx-loadu2-m128i-2.c: New test.\n+\t* gcc.target/i386/avx-storeu2-m128-1.c: New test.\n+\t* gcc.target/i386/avx-storeu2-m128-2.c: New test.\n+\t* gcc.target/i386/avx-storeu2-m128d-1.c: New test.\n+\t* gcc.target/i386/avx-storeu2-m128d-2.c: New test.\n+\t* gcc.target/i386/avx-storeu2-m128i-1.c: New test.\n+\t* gcc.target/i386/avx-storeu2-m128i-2.c: New test.\n+\n 2019-08-05  Kito Cheng  <kito.cheng@sifive.com>\n \n \t* gcc.target/riscv/promote-type-for-libcall.c: New."}, {"sha": "d5b5ad251f81d5812f4f33a2df9c80e09637f0a8", "filename": "gcc/testsuite/gcc.target/i386/avx-loadu2-m128-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-loadu2-m128-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-loadu2-m128-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-loadu2-m128-1.c?ref=96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx\" } */\n+/* { dg-final { scan-assembler \"\\tvmovups\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tvinsertf128\\t\" } } */\n+\n+#include <immintrin.h>\n+\n+__m256\n+foo (float const *hi, float const *lo)\n+{\n+  return _mm256_loadu2_m128 (hi, lo);\n+}"}, {"sha": "b962c2c45eddb484660602a573ec304e6288c02d", "filename": "gcc/testsuite/gcc.target/i386/avx-loadu2-m128-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-loadu2-m128-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-loadu2-m128-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-loadu2-m128-2.c?ref=96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx\" } */\n+/* { dg-require-effective-target avx } */\n+\n+#include \"avx-check.h\"\n+\n+static void\n+avx_test (void)\n+{\n+  union256 u;\n+  float e[8] = { 1.5f, -9.5f, 13.25f, -24.75f, -18.75f, 12.0f, 0.0f, 9.0f };\n+  float f[8] = { -24.75f, -18.75f, 12.0f, 0.0f, -9.5f, 13.25f, -24.75f, -18.75f };\n+\n+  u.x = _mm256_loadu2_m128 (e + 1, e + 3);\n+  if (check_union256 (u, f))\n+    abort ();\n+}"}, {"sha": "3cdd497a207973494b4c752154971a27108ebcff", "filename": "gcc/testsuite/gcc.target/i386/avx-loadu2-m128d-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-loadu2-m128d-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-loadu2-m128d-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-loadu2-m128d-1.c?ref=96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx\" } */\n+/* { dg-final { scan-assembler \"\\tvmovupd\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tvinsertf128\\t\" } } */\n+\n+#include <immintrin.h>\n+\n+__m256d\n+foo (double const *hi, double const *lo)\n+{\n+  return _mm256_loadu2_m128d (hi, lo);\n+}"}, {"sha": "d342fdc6f626a727504e564ce01e6a8d23f2390a", "filename": "gcc/testsuite/gcc.target/i386/avx-loadu2-m128d-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-loadu2-m128d-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-loadu2-m128d-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-loadu2-m128d-2.c?ref=96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx\" } */\n+/* { dg-require-effective-target avx } */\n+\n+#include \"avx-check.h\"\n+\n+static void\n+avx_test (void)\n+{\n+  union256d u;\n+  double e[8] = { 1.5, -9.5, 13.25, -24.75, -18.75, 12.0, 0.0, 9.0 };\n+  double f[4] = { 12.0, 0.0, -9.5, 13.25 };\n+\n+  u.x = _mm256_loadu2_m128d (e + 1, e + 5);\n+  if (check_union256d (u, f))\n+    abort ();\n+}"}, {"sha": "32d5444ed13dc421bb3d4de175ba09d3a8c306c1", "filename": "gcc/testsuite/gcc.target/i386/avx-loadu2-m128i-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-loadu2-m128i-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-loadu2-m128i-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-loadu2-m128i-1.c?ref=96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx\" } */\n+/* { dg-final { scan-assembler \"\\tvmovdqu\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tvinsert\\[fi]128\\t\" } } */\n+\n+#include <immintrin.h>\n+\n+__m256i\n+foo (__m128i_u const *hi, __m128i_u const *lo)\n+{\n+  return _mm256_loadu2_m128i (hi, lo);\n+}"}, {"sha": "e090b9858a9299f03aa8d97ac1ec130bc8d54a72", "filename": "gcc/testsuite/gcc.target/i386/avx-loadu2-m128i-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-loadu2-m128i-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-loadu2-m128i-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-loadu2-m128i-2.c?ref=96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx\" } */\n+/* { dg-require-effective-target avx } */\n+\n+#include \"avx-check.h\"\n+\n+static void\n+avx_test (void)\n+{\n+  union256i_d u;\n+  int e[8] = { 1, -9, 13, -24, -18, 12, 0, 9 };\n+  int f[8] = { -24, -18, 12, 0, -9, 13, -24, -18 };\n+\n+  u.x = _mm256_loadu2_m128i ((__m128i_u *) (e + 1), (__m128i_u *) (e + 3));\n+  if (check_union256i_d (u, f))\n+    abort ();\n+}"}, {"sha": "cca79c5ad5b89c07cbc69ca48a278f3520e57336", "filename": "gcc/testsuite/gcc.target/i386/avx-storeu2-m128-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-storeu2-m128-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-storeu2-m128-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-storeu2-m128-1.c?ref=96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx\" } */\n+/* { dg-final { scan-assembler \"\\tvmovups\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tvextractf128\\t\" } } */\n+\n+#include <immintrin.h>\n+\n+void\n+foo (float *hi, float *lo, __m256 a)\n+{\n+  _mm256_storeu2_m128 (hi, lo, a);\n+}"}, {"sha": "81c823aefcf644bd0f465fb306159e32d0ddbf66", "filename": "gcc/testsuite/gcc.target/i386/avx-storeu2-m128-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-storeu2-m128-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-storeu2-m128-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-storeu2-m128-2.c?ref=96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx\" } */\n+/* { dg-require-effective-target avx } */\n+\n+#include \"avx-check.h\"\n+\n+static void\n+avx_test (void)\n+{\n+  float e[12] = { -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f };\n+  float f[12] = { -1.0f, -18.75f, 12.0f, 0.0f, 9.0f, -1.0f, 1.5f, -9.5f, 13.25f, -24.75f, -1.0f, -1.0f };\n+  int i;\n+  __m256 x = _mm256_set_ps (1.5f, -9.5f, 13.25f, -24.75f, -18.75f, 12.0f, 0.0f, 9.0f);\n+  _mm256_storeu2_m128 (e + 1, e + 6, x);\n+  for (i = 0; i < 12; i++)\n+    if (e[i] != f[i])\n+      abort ();\n+}"}, {"sha": "01cb2231f62d28d7ef02839bc4d63d8dea5efaba", "filename": "gcc/testsuite/gcc.target/i386/avx-storeu2-m128d-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-storeu2-m128d-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-storeu2-m128d-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-storeu2-m128d-1.c?ref=96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx\" } */\n+/* { dg-final { scan-assembler \"\\tvmovup\\[sd]\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tvextractf128\\t\" } } */\n+\n+#include <immintrin.h>\n+\n+void\n+foo (double *hi, double *lo, __m256d a)\n+{\n+  _mm256_storeu2_m128d (hi, lo, a);\n+}"}, {"sha": "37c23c226f87a4bc32e815b29e8d63bc9b8d4fb0", "filename": "gcc/testsuite/gcc.target/i386/avx-storeu2-m128d-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-storeu2-m128d-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-storeu2-m128d-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-storeu2-m128d-2.c?ref=96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx\" } */\n+/* { dg-require-effective-target avx } */\n+\n+#include \"avx-check.h\"\n+\n+static void\n+avx_test (void)\n+{\n+  double e[8] = { -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0 };\n+  double f[8] = { -1.0, 13.25, -24.75, -1.0, 1.5, -9.5, -1.0, -1.0 };\n+  int i;\n+  __m256d x = _mm256_set_pd (1.5, -9.5, 13.25, -24.75);\n+  _mm256_storeu2_m128d (e + 1, e + 4, x);\n+  for (i = 0; i < 8; i++)\n+    if (e[i] != f[i])\n+      abort ();\n+}"}, {"sha": "bf2e72a35776d90a1d2aef31867d49fc740cab79", "filename": "gcc/testsuite/gcc.target/i386/avx-storeu2-m128i-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-storeu2-m128i-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-storeu2-m128i-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-storeu2-m128i-1.c?ref=96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx\" } */\n+/* { dg-final { scan-assembler \"\\tvmov(dqu|ups)\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tvextract\\[if]128\\t\" } } */\n+\n+#include <immintrin.h>\n+\n+void\n+foo (__m128i_u *hi, __m128i_u *lo, __m256i a)\n+{\n+  _mm256_storeu2_m128i (hi, lo, a);\n+}"}, {"sha": "dd1825f877896c57a05207f84508e79034daa5f5", "filename": "gcc/testsuite/gcc.target/i386/avx-storeu2-m128i-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-storeu2-m128i-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-storeu2-m128i-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-storeu2-m128i-2.c?ref=96d5c6dcf6b8ec0ad34a8208fc6d82df3ce20e2a", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx\" } */\n+/* { dg-require-effective-target avx } */\n+\n+#include \"avx-check.h\"\n+\n+static void\n+avx_test (void)\n+{\n+  int e[12] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };\n+  int f[12] = { -1, -18, 12, 0, 9, -1, 1, -9, 13, -24, -1, -1 };\n+  int i;\n+  __m256i x = _mm256_set_epi32 (1, -9, 13, -24, -18, 12, 0, 9);\n+  _mm256_storeu2_m128i ((__m128i_u *) (e + 1), (__m128i_u *) (e + 6), x);\n+  for (i = 0; i < 12; i++)\n+    if (e[i] != f[i])\n+      abort ();\n+}"}]}