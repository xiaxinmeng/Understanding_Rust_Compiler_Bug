{"sha": "6b8ebd00cf9226231d4a03de02a0648b035f131e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI4ZWJkMDBjZjkyMjYyMzFkNGEwM2RlMDJhMDY0OGIwMzVmMTMxZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-05-17T10:33:43Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-05-17T10:33:43Z"}, "message": "ChangeLog: Fix.\n\n\t* ChangeLog: Fix.\n\t* testsuite/ChangeLog: Ditto.\n\nFrom-SVN: r210548", "tree": {"sha": "4e16ffada26d1d88dd26e715199269c44302ba92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e16ffada26d1d88dd26e715199269c44302ba92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b8ebd00cf9226231d4a03de02a0648b035f131e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b8ebd00cf9226231d4a03de02a0648b035f131e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b8ebd00cf9226231d4a03de02a0648b035f131e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b8ebd00cf9226231d4a03de02a0648b035f131e/comments", "author": null, "committer": null, "parents": [{"sha": "60f82c425b994cd76bb3fe664698a7b527955072", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60f82c425b994cd76bb3fe664698a7b527955072", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60f82c425b994cd76bb3fe664698a7b527955072"}], "stats": {"total": 51, "additions": 26, "deletions": 25}, "files": [{"sha": "a8ac69c3752ad474da3bae406859b00bb5e95203", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b8ebd00cf9226231d4a03de02a0648b035f131e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b8ebd00cf9226231d4a03de02a0648b035f131e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b8ebd00cf9226231d4a03de02a0648b035f131e", "patch": "@@ -35,7 +35,8 @@\n \n 2014-05-16  Dehao Chen  <dehao@google.com>\n \n-\t* ira-int.h (REG_FREQ_FROM_EDGE_FREQ): Use optimize_function_for_size_p.\n+\t* ira-int.h (REG_FREQ_FROM_EDGE_FREQ): Use\n+\toptimize_function_for_size_p.\n \t* regs.h (REG_FREQ_FROM_BB): Likewise.\n \n 2014-05-16  Oleg Endo  <olegendo@gcc.gnu.org>\n@@ -66,7 +67,7 @@\n \t* cfghooks.c (make_forwarder_block): Use direct computation to\n \tget fall-through edge's count and frequency.\n \n-2014-02-07  Benno Schulenberg  <bensberg@justemail.net>\n+2014-05-16  Benno Schulenberg  <bensberg@justemail.net>\n \n \t* config/arc/arc.c (arc_init): Fix typo in error message.\n \t* config/i386/i386.c (ix86_expand_builtin): Likewise.\n@@ -80,14 +81,22 @@\n \n 2014-05-16  David Wohlferd <dw@LimeGreenSocks.com>\n \n-\t * doc/extend.texi: (Visibility Pragmas) Fix misplaced @xref\n+\t* doc/extend.texi: (Visibility Pragmas) Fix misplaced @xref\n \n 2014-05-16  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* varpool.c (dump_varpool_node): Dump write-only flag.\n \t* lto-cgraph.c (lto_output_varpool_node, input_varpool_node): Stream\n \twrite-only flag.\n-\t* tree-cfg.c (execute_fixup_cfg): Remove statements setting write-only variables.\n+\t* tree-cfg.c (execute_fixup_cfg): Remove statements setting\n+\twrite-only variables.\n+\t* ipa.c (process_references): New function.\n+\t(set_readonly_bit): New function.\n+\t(set_writeonly_bit): New function.\n+\t(clear_addressable_bit): New function.\n+\t(ipa_discover_readonly_nonaddressable_var): Mark write only variables;\n+\tfix handling of aliases.\n+\t* cgraph.h (struct varpool_node): Add writeonly flag.\n \n 2014-05-16  Vladimir Makarov  <vmakarov@redhat.com>\n \n@@ -201,7 +210,7 @@\n \tbe emitted.\n \t(aarch64_add_constant): Update call to aarch64_build_constant.\n \t(aarch64_output_mi_thunk): Likewise.\n-\t(aarch64_rtx_costs): Estimate cost of a CONST_INT, cost\n+\t(aarch64_rtx_costs): Estimate cost of a CONST_INT, cost of\n \ta CONST_DOUBLE.\n \n 2014-05-16  James Greenhalgh  <james.greenhalgh@arm.com>\n@@ -317,7 +326,7 @@\n \n 2014-05-14  Cary Coutant  <ccoutant@google.com>\n \n-        PR debug/61013\n+\tPR debug/61013\n \t* opts.c (common_handle_option): Don't special-case \"-g\".\n \t(set_debug_level): Default to at least level 2 with \"-g\".\n \n@@ -378,8 +387,7 @@\n \t(OPTION_MASK_ISA_CLFLUSHOPT_UNSET): Ditto.\n \t(OPTION_MASK_ISA_XSAVES_UNSET): Ditto.\n \t(OPTION_MASK_ISA_XSAVEC_UNSET): Ditto.\n-\t(ix86_handle_option): Handle OPT_mxsavec, OPT_mxsaves,\n-\tOPT_mclflushopt.\n+\t(ix86_handle_option): Handle OPT_mxsavec, OPT_mxsaves, OPT_mclflushopt.\n \t* config.gcc (i[34567]86-*-*): Add clflushoptintrin.h,\n \txsavecintrin.h, xsavesintrin.h.\n \t(x86_64-*-*): Ditto.\n@@ -405,9 +413,9 @@\n \t(ix86_builtins): Add IX86_BUILTIN_XSAVEC, IX86_BUILTIN_XSAVEC64,\n \tIX86_BUILTIN_XSAVES, IX86_BUILTIN_XRSTORS, IX86_BUILTIN_XSAVES64,\n \tIX86_BUILTIN_XRSTORS64, IX86_BUILTIN_CLFLUSHOPT.\n-\t(bdesc_special_args): Add __builtin_ia32_xsaves, __builtin_ia32_xrstors,\n-\t__builtin_ia32_xsavec, __builtin_ia32_xsaves64, __builtin_ia32_xrstors64,\n-\t__builtin_ia32_xsavec64.\n+\t(bdesc_special_args): Add __builtin_ia32_xsaves,\n+\t__builtin_ia32_xrstors, __builtin_ia32_xsavec, __builtin_ia32_xsaves64,\n+\t__builtin_ia32_xrstors64, __builtin_ia32_xsavec64.\n \t(ix86_init_mmx_sse_builtins): Add __builtin_ia32_clflushopt.\n \t(ix86_expand_builtin): Handle new builtins.\n \t* config/i386/i386.h (TARGET_CLFLUSHOPT) Define.\n@@ -494,8 +502,7 @@\n \trather than just a prefix string, so that we can look up the kind\n \tof the wtd and use it as an index into wrote_user_func_for_ptr,\n \tensuring that such functions are written at most once.  Support\n-\tsubclasses by invoking the marking function of the ultimate base\n-\tclass.\n+\tsubclasses by invoking the marking function of the ultimate base class.\n \t(write_user_func_for_structure_body): Require a write_types_data\n \trather than just a prefix string, so that we can pass this to\n \twrite_user_func_for_structure_ptr.\n@@ -648,10 +655,11 @@\n \t(MODE_EXIT, MODE_PRIORITY_TO_MODE, EMIT_MODE_SET): Likewise.\n \t* config/i386/i386-protos.h (ix86_mode_needed, ix86_mode_after)\n \t(ix86_mode_entrym, ix86_emit_mode_set): Remove external declaration.\n-\t* config/i386/i386.c (ix86_mode_needed, ix86_mode_after, ix86_mode_exit,\n-\t(ix86_mode_entry, ix86_mode_priority, ix86_emit_mode_set): Hookify.\n+\t* config/i386/i386.c (ix86_mode_needed, ix86_mode_after,\n+\t(ix86_mode_exit, ix86_mode_entry, ix86_mode_priority)\n+\t(ix86_emit_mode_set): Hookify.\n \t* config/epiphany/epiphany.h (MODE_NEEDED, MODE_AFTER, MODE_ENTRY):\n-\tDelete\n+\tDelete.\n \t(MODE_EXIT, MODE_PRIORITY_TO_MODE, EMIT_MODE_SET): Likewise.\n \t* config/epiphany/epiphany-protos.h (epiphany_mode_needed)\n \t(emit_set_fp_mode, epiphany_mode_entry_exit, epiphany_mode_after)\n@@ -660,7 +668,7 @@\n \t(epiphany_mode_needed, epiphany_mode_priority_to_mode): Likewise.\n \t(epiphany_mode_entry, epiphany_mode_exit, epiphany_mode_after):\n \tLikewise.\n-\t(epiphany_mode_priority_to_mode): Change priority type. Hookify.\n+\t(epiphany_mode_priority_to_mode): Change priority type.  Hookify.\n \t(epiphany_mode_needed, epiphany_mode_entry_exit): Hookify.\n \t(epiphany_mode_after, epiphany_mode_entry, emit_set_fp_mode): Hookify.\n \n@@ -706,7 +714,7 @@\n \t* c-family/c.opt: Make -Wshadow also implicitly enable\n \t-Wshadow-ivar.\n \n-2014-05-12  David Wohlferd <dw@LimeGreenSocks.com>\n+2014-05-12  David Wohlferd  <dw@LimeGreenSocks.com>\n \n \t* doc/tm.texi: Remove reference to deleted macro.\n \t* doc/tm.texi.in: Likewise."}, {"sha": "682d9c7039cf6fe0bf0b18858e2163485a4cf9f8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b8ebd00cf9226231d4a03de02a0648b035f131e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b8ebd00cf9226231d4a03de02a0648b035f131e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6b8ebd00cf9226231d4a03de02a0648b035f131e", "patch": "@@ -21,13 +21,6 @@\n \t* gcc.dg/tree-ssa/pr21559.c: Update testcase.\n \t* gcc.dg/debug/pr35154.c: Update testcase.\n \t* gcc.target/i386/vectorize1.c: Update testcase.\n-\t* ipa.c (process_references): New function.\n-\t(set_readonly_bit): New function.\n-\t(set_writeonly_bit): New function.\n-\t(clear_addressable_bit): New function.\n-\t(ipa_discover_readonly_nonaddressable_var): Mark write only variables; fix\n-\thandling of aliases.\n-\t* cgraph.h (struct varpool_node): Add writeonly flag.\n \n 2014-05-16  Paolo Carlini  <paolo.carlini@oracle.com>\n "}]}