{"sha": "875cd5ee9c6f037c7f5ace00b75631a1c45970a5", "node_id": "C_kwDOANBUbNoAKDg3NWNkNWVlOWM2ZjAzN2M3ZjVhY2UwMGI3NTYzMWExYzQ1OTcwYTU", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-05-09T14:59:46Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-05-09T16:22:28Z"}, "message": "gccrs: Add missing coercion site logic to return expressions\n\ngcc/rust/ChangeLog:\n\n\t* backend/rust-compile-base.cc: track return type in fncontext\n\t* backend/rust-compile-context.h (struct fncontext): likewise\n\t* backend/rust-compile-expr.cc (CompileExpr::visit): apply coercion site\n\t(CompileExpr::generate_closure_function): update push_context\n\t* typecheck/rust-hir-type-check-expr.cc (TypeCheckExpr::visit): likewise\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/execute/torture/coercion3.rs: New test.\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>", "tree": {"sha": "fd09080649efb48c850c2725c5493ae71ea27d38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd09080649efb48c850c2725c5493ae71ea27d38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/875cd5ee9c6f037c7f5ace00b75631a1c45970a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/875cd5ee9c6f037c7f5ace00b75631a1c45970a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/875cd5ee9c6f037c7f5ace00b75631a1c45970a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/875cd5ee9c6f037c7f5ace00b75631a1c45970a5/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb60cd1f6d53136467857c30140c7ef282c39085", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb60cd1f6d53136467857c30140c7ef282c39085", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb60cd1f6d53136467857c30140c7ef282c39085"}], "stats": {"total": 72, "additions": 63, "deletions": 9}, "files": [{"sha": "7e3e67bb6530c64e6d7ef3711a8d361663ea3c9f", "filename": "gcc/rust/backend/rust-compile-base.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875cd5ee9c6f037c7f5ace00b75631a1c45970a5/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875cd5ee9c6f037c7f5ace00b75631a1c45970a5/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.cc?ref=875cd5ee9c6f037c7f5ace00b75631a1c45970a5", "patch": "@@ -639,7 +639,7 @@ HIRCompileBase::compile_function (\n \n   ctx->add_statement (ret_var_stmt);\n \n-  ctx->push_fn (fndecl, return_address);\n+  ctx->push_fn (fndecl, return_address, tyret);\n   compile_function_body (fndecl, *function_body, tyret);\n   tree bind_tree = ctx->pop_block ();\n \n@@ -712,7 +712,7 @@ HIRCompileBase::compile_constant_item (\n \t\t\t\t\t       &ret_var_stmt);\n \n   ctx->add_statement (ret_var_stmt);\n-  ctx->push_fn (fndecl, return_address);\n+  ctx->push_fn (fndecl, return_address, resolved_type);\n \n   if (is_block_expr)\n     {"}, {"sha": "513f81d9cb4bc5b2113e82418d5ee968651a6bed", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875cd5ee9c6f037c7f5ace00b75631a1c45970a5/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875cd5ee9c6f037c7f5ace00b75631a1c45970a5/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=875cd5ee9c6f037c7f5ace00b75631a1c45970a5", "patch": "@@ -35,6 +35,7 @@ struct fncontext\n {\n   tree fndecl;\n   ::Bvariable *ret_addr;\n+  TyTy::BaseType *retty;\n };\n \n class Context\n@@ -267,9 +268,9 @@ class Context\n     return true;\n   }\n \n-  void push_fn (tree fn, ::Bvariable *ret_addr)\n+  void push_fn (tree fn, ::Bvariable *ret_addr, TyTy::BaseType *retty)\n   {\n-    fn_stack.push_back (fncontext{fn, ret_addr});\n+    fn_stack.push_back (fncontext{fn, ret_addr, retty});\n   }\n   void pop_fn () { fn_stack.pop_back (); }\n "}, {"sha": "58895daec893bbc681ce383735af5a3166c5bb16", "filename": "gcc/rust/backend/rust-compile-expr.cc", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875cd5ee9c6f037c7f5ace00b75631a1c45970a5/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875cd5ee9c6f037c7f5ace00b75631a1c45970a5/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc?ref=875cd5ee9c6f037c7f5ace00b75631a1c45970a5", "patch": "@@ -114,6 +114,25 @@ CompileExpr::visit (HIR::ReturnExpr &expr)\n   tree return_value = expr.has_return_expr ()\n \t\t\t? CompileExpr::Compile (expr.return_expr.get (), ctx)\n \t\t\t: unit_expression (ctx, expr.get_locus ());\n+\n+  if (expr.has_return_expr ())\n+    {\n+      HirId id = expr.get_mappings ().get_hirid ();\n+      Location rvalue_locus = expr.return_expr->get_locus ();\n+\n+      TyTy::BaseType *expected = fncontext.retty;\n+      Location lvalue_locus\n+\t= ctx->get_mappings ()->lookup_location (expected->get_ref ());\n+\n+      TyTy::BaseType *actual = nullptr;\n+      bool ok = ctx->get_tyctx ()->lookup_type (\n+\texpr.return_expr->get_mappings ().get_hirid (), &actual);\n+      rust_assert (ok);\n+\n+      return_value = coercion_site (id, return_value, actual, expected,\n+\t\t\t\t    lvalue_locus, rvalue_locus);\n+    }\n+\n   tree return_stmt\n     = ctx->get_backend ()->return_statement (fncontext.fndecl, return_value,\n \t\t\t\t\t     expr.get_locus ());\n@@ -2804,7 +2823,7 @@ CompileExpr::generate_closure_function (HIR::ClosureExpr &expr,\n \n   ctx->add_statement (ret_var_stmt);\n \n-  ctx->push_fn (fndecl, return_address);\n+  ctx->push_fn (fndecl, return_address, tyret);\n \n   if (is_block_expr)\n     {"}, {"sha": "221610ecda035f84fa0cca8ed3207512ff7877df", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875cd5ee9c6f037c7f5ace00b75631a1c45970a5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875cd5ee9c6f037c7f5ace00b75631a1c45970a5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc?ref=875cd5ee9c6f037c7f5ace00b75631a1c45970a5", "patch": "@@ -164,10 +164,9 @@ TypeCheckExpr::visit (HIR::ReturnExpr &expr)\n \t? TypeCheckExpr::Resolve (expr.get_expr ())\n \t: TyTy::TupleType::get_unit_type (expr.get_mappings ().get_hirid ());\n \n-  infered = unify_site (expr.get_mappings ().get_hirid (),\n-\t\t\tTyTy::TyWithLocation (fn_return_tyty),\n-\t\t\tTyTy::TyWithLocation (expr_ty, expr_locus),\n-\t\t\texpr.get_locus ());\n+  coercion_site (expr.get_mappings ().get_hirid (),\n+\t\t TyTy::TyWithLocation (fn_return_tyty),\n+\t\t TyTy::TyWithLocation (expr_ty, expr_locus), expr.get_locus ());\n \n   infered = new TyTy::NeverType (expr.get_mappings ().get_hirid ());\n }"}, {"sha": "ca66dfa0506740ce681cfaec4f8b527d9eedcbaa", "filename": "gcc/testsuite/rust/execute/torture/coercion3.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875cd5ee9c6f037c7f5ace00b75631a1c45970a5/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcoercion3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875cd5ee9c6f037c7f5ace00b75631a1c45970a5/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcoercion3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcoercion3.rs?ref=875cd5ee9c6f037c7f5ace00b75631a1c45970a5", "patch": "@@ -0,0 +1,35 @@\n+// { dg-output \"123\\n\" }\n+trait A {\n+    fn get_int(&self) -> i32;\n+}\n+\n+impl A for i32 {\n+    fn get_int(&self) -> i32 {\n+        *self\n+    }\n+}\n+\n+fn get_dyn_a(x: &i32) -> &dyn A {\n+    return x;\n+}\n+\n+fn clobber_stack() {\n+    let _z: [usize; 8] = [1, 2, 3, 4, 5, 6, 7, 8];\n+}\n+\n+extern \"C\" {\n+    fn printf(s: *const i8, ...) -> i32;\n+}\n+\n+fn main() -> i32 {\n+    let x = 123;\n+    let y = get_dyn_a(&x);\n+    clobber_stack();\n+    let value = y.get_int();\n+    let fmt_string = \"%d\\n\\0\" as *const str as *const i8;\n+    unsafe {\n+        printf(fmt_string, value);\n+    }\n+\n+    0\n+}"}]}