{"sha": "265cdd067afd56293137ecb3057c5ba28a7c9480", "node_id": "C_kwDOANBUbNoAKDI2NWNkZDA2N2FmZDU2MjkzMTM3ZWNiMzA1N2M1YmEyOGE3Yzk0ODA", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-08-15T14:16:23Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-08-15T17:31:01Z"}, "message": "Check for undefined and varying first.\n\nRearrange order in irange:set to ensure all POLY_INTs map to varying.\n\n\tPR tree-optimization/106621\n\tgcc/\n\t* value-range.cc (irange::set): Check for POLY_INT_CST early.\n\n\tgcc/testsuite/\n\t* gcc.dg/pr106621.c", "tree": {"sha": "c4b09047c784027c165fd26da1dbceb23b751e6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4b09047c784027c165fd26da1dbceb23b751e6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/265cdd067afd56293137ecb3057c5ba28a7c9480", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/265cdd067afd56293137ecb3057c5ba28a7c9480", "html_url": "https://github.com/Rust-GCC/gccrs/commit/265cdd067afd56293137ecb3057c5ba28a7c9480", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/265cdd067afd56293137ecb3057c5ba28a7c9480/comments", "author": null, "committer": null, "parents": [{"sha": "ed7e7620188dc0e653815bdd40d8802bd5446638", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed7e7620188dc0e653815bdd40d8802bd5446638", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed7e7620188dc0e653815bdd40d8802bd5446638"}], "stats": {"total": 65, "additions": 46, "deletions": 19}, "files": [{"sha": "0465de4f14f4ed8f2eb95848ce1c5508295f9d9d", "filename": "gcc/testsuite/gcc.dg/pr106621.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/265cdd067afd56293137ecb3057c5ba28a7c9480/gcc%2Ftestsuite%2Fgcc.dg%2Fpr106621.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/265cdd067afd56293137ecb3057c5ba28a7c9480/gcc%2Ftestsuite%2Fgcc.dg%2Fpr106621.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr106621.c?ref=265cdd067afd56293137ecb3057c5ba28a7c9480", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile { target aarch64*-*-* } } */\n+/* { dg-options \"-mcpu=neoverse-v1 -O2 -fvect-cost-model=dynamic -fno-tree-scev-cprop\" } */\n+\n+int m, n;\n+\n+void\n+foo (unsigned int x, short int y)\n+{\n+  if (m)\n+    for (;;)\n+      {\n+        ++m;\n+        while (m < 1)\n+          {\n+            n += m + x;\n+            ++m;\n+          }\n+      }\n+\n+  for (;;)\n+    if (y)\n+      {\n+        ++x;\n+        if (x)\n+          for (y = 0; y < 75; y += 2)\n+            {\n+            }\n+      }\n+}\n+"}, {"sha": "d056f7356e1a370e0d5be3acde70ae70daf51fca", "filename": "gcc/value-range.cc", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/265cdd067afd56293137ecb3057c5ba28a7c9480/gcc%2Fvalue-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/265cdd067afd56293137ecb3057c5ba28a7c9480/gcc%2Fvalue-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.cc?ref=265cdd067afd56293137ecb3057c5ba28a7c9480", "patch": "@@ -716,25 +716,6 @@ irange::irange_set_anti_range (tree min, tree max)\n void\n irange::set (tree min, tree max, value_range_kind kind)\n {\n-  if (kind != VR_UNDEFINED)\n-    {\n-      if (TREE_OVERFLOW_P (min))\n-\tmin = drop_tree_overflow (min);\n-      if (TREE_OVERFLOW_P (max))\n-\tmax = drop_tree_overflow (max);\n-    }\n-\n-  if (!legacy_mode_p ())\n-    {\n-      if (kind == VR_RANGE)\n-\tirange_set (min, max);\n-      else\n-\t{\n-\t  gcc_checking_assert (kind == VR_ANTI_RANGE);\n-\t  irange_set_anti_range (min, max);\n-\t}\n-      return;\n-    }\n   if (kind == VR_UNDEFINED)\n     {\n       irange::set_undefined ();\n@@ -749,6 +730,22 @@ irange::set (tree min, tree max, value_range_kind kind)\n       return;\n     }\n \n+  if (TREE_OVERFLOW_P (min))\n+    min = drop_tree_overflow (min);\n+  if (TREE_OVERFLOW_P (max))\n+    max = drop_tree_overflow (max);\n+\n+  if (!legacy_mode_p ())\n+    {\n+      if (kind == VR_RANGE)\n+\tirange_set (min, max);\n+      else\n+\t{\n+\t  gcc_checking_assert (kind == VR_ANTI_RANGE);\n+\t  irange_set_anti_range (min, max);\n+\t}\n+      return;\n+    }\n   // Nothing to canonicalize for symbolic ranges.\n   if (TREE_CODE (min) != INTEGER_CST\n       || TREE_CODE (max) != INTEGER_CST)"}]}