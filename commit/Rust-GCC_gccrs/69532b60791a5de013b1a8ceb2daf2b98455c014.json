{"sha": "69532b60791a5de013b1a8ceb2daf2b98455c014", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk1MzJiNjA3OTFhNWRlMDEzYjFhOGNlYjJkYWYyYjk4NDU1YzAxNA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2005-06-26T11:42:11Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-06-26T11:42:11Z"}, "message": "arc-protos.c: Remove the prototype for arc_finalize_pic.\n\n\t* config/arc/arc-protos.c: Remove the prototype for\n\tarc_finalize_pic.\n\t* config/arc/arc.c (arc_finalize_pic): Remove.\n\t* config/arc/arc.h (FINALIZE_PIC): Likewise.\n\t* config/bfin/bfin.h (FINALIZE_PIC): Likewise.\n\t* config/rs6000/rs6000.h (FINALIZE_PIC): Likewise.\n\nFrom-SVN: r101334", "tree": {"sha": "504ab08f14ef445385bade594534585552be5f1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/504ab08f14ef445385bade594534585552be5f1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69532b60791a5de013b1a8ceb2daf2b98455c014", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69532b60791a5de013b1a8ceb2daf2b98455c014", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69532b60791a5de013b1a8ceb2daf2b98455c014", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69532b60791a5de013b1a8ceb2daf2b98455c014/comments", "author": null, "committer": null, "parents": [{"sha": "d9725c411caad2a174d3e3d91929240323661778", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9725c411caad2a174d3e3d91929240323661778", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9725c411caad2a174d3e3d91929240323661778"}], "stats": {"total": 70, "additions": 9, "deletions": 61}, "files": [{"sha": "e802393dc4b73b54a5c92f05c9cdbb4942e6efba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69532b60791a5de013b1a8ceb2daf2b98455c014/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69532b60791a5de013b1a8ceb2daf2b98455c014/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=69532b60791a5de013b1a8ceb2daf2b98455c014", "patch": "@@ -1,3 +1,12 @@\n+2005-06-26  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* config/arc/arc-protos.c: Remove the prototype for\n+\tarc_finalize_pic.\n+\t* config/arc/arc.c (arc_finalize_pic): Remove.\n+\t* config/arc/arc.h (FINALIZE_PIC): Likewise.\n+\t* config/bfin/bfin.h (FINALIZE_PIC): Likewise.\n+\t* config/rs6000/rs6000.h (FINALIZE_PIC): Likewise.\n+\n 2005-06-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/17965"}, {"sha": "8d081a49fd1c2dcd406e78438d4e1fb6517d95e8", "filename": "gcc/config/arc/arc-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69532b60791a5de013b1a8ceb2daf2b98455c014/gcc%2Fconfig%2Farc%2Farc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69532b60791a5de013b1a8ceb2daf2b98455c014/gcc%2Fconfig%2Farc%2Farc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-protos.h?ref=69532b60791a5de013b1a8ceb2daf2b98455c014", "patch": "@@ -60,7 +60,6 @@ extern unsigned int arc_compute_frame_size (int);\n extern void arc_save_restore (FILE *, const char *, unsigned int,\n \t\t\t      unsigned int, const char *);\n extern int arc_delay_slots_for_epilogue (void);\n-extern void arc_finalize_pic (void);\n extern void arc_ccfsm_at_label (const char *, int);\n extern int arc_ccfsm_branch_deleted_p (void);\n extern void arc_ccfsm_record_branch_deleted (void);"}, {"sha": "2adf01d0d6176196dbb5f3db2d145e75d7eecde5", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69532b60791a5de013b1a8ceb2daf2b98455c014/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69532b60791a5de013b1a8ceb2daf2b98455c014/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=69532b60791a5de013b1a8ceb2daf2b98455c014", "patch": "@@ -1443,16 +1443,6 @@ arc_eligible_for_epilogue_delay (rtx trial, int slot)\n   return 0;\n }\n \f\n-/* PIC */\n-\n-/* Emit special PIC prologues and epilogues.  */\n-\n-void\n-arc_finalize_pic (void)\n-{\n-  /* nothing to do */\n-}\n-\f\n /* Return true if OP is a shift operator.  */\n \n int"}, {"sha": "696b203e11ffcec3657632efbefa41b3e645fefe", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69532b60791a5de013b1a8ceb2daf2b98455c014/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69532b60791a5de013b1a8ceb2daf2b98455c014/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=69532b60791a5de013b1a8ceb2daf2b98455c014", "patch": "@@ -900,22 +900,6 @@ extern const char *arc_text_section, *arc_data_section, *arc_rodata_section;\n /* This register is call-saved on the ARC.  */\n /*#define PIC_OFFSET_TABLE_REG_CALL_CLOBBERED*/\n \n-/* By generating position-independent code, when two different programs (A\n-   and B) share a common library (libC.a), the text of the library can be\n-   shared whether or not the library is linked at the same address for both\n-   programs.  In some of these environments, position-independent code\n-   requires not only the use of different addressing modes, but also\n-   special code to enable the use of these addressing modes.\n-\n-   The FINALIZE_PIC macro serves as a hook to emit these special\n-   codes once the function is being compiled into assembly code, but not\n-   before.  (It is not done before, because in the case of compiling an\n-   inline function, it would lead to multiple PIC prologues being\n-   included in functions which used inline functions and were compiled to\n-   assembly language.)  */\n-\n-#define FINALIZE_PIC arc_finalize_pic ()\n-\n /* A C expression that is nonzero if X is a legitimate immediate\n    operand on the target machine when generating position independent code.\n    You can assume that X satisfies CONSTANT_P, so you need not"}, {"sha": "830222d509e6a2827c24cac884cce0903dc85413", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69532b60791a5de013b1a8ceb2daf2b98455c014/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69532b60791a5de013b1a8ceb2daf2b98455c014/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=69532b60791a5de013b1a8ceb2daf2b98455c014", "patch": "@@ -989,23 +989,6 @@ do {                                              \\\n #define EXTRA_CONSTRAINT(VALUE, D) \\\n     ((D) == 'Q' ? GET_CODE (VALUE) == SYMBOL_REF : 0)\n \n-/* `FINALIZE_PIC'\n-     By generating position-independent code, when two different\n-     programs (A and B) share a common library (libC.a), the text of\n-     the library can be shared whether or not the library is linked at\n-     the same address for both programs.  In some of these\n-     environments, position-independent code requires not only the use\n-     of different addressing modes, but also special code to enable the\n-     use of these addressing modes.\n-\n-     The `FINALIZE_PIC' macro serves as a hook to emit these special\n-     codes once the function is being compiled into assembly code, but\n-     not before.  (It is not done before, because in the case of\n-     compiling an inline function, it would lead to multiple PIC\n-     prologues being included in functions which used inline functions\n-     and were compiled to assembly language.) */\n-#define FINALIZE_PIC  do {} while (0)\n-\n /* Switch into a generic section.  */\n #define TARGET_ASM_NAMED_SECTION  default_elf_asm_named_section\n "}, {"sha": "85ea2eadc67778c3eb63297ba3611d4590dde6f7", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69532b60791a5de013b1a8ceb2daf2b98455c014/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69532b60791a5de013b1a8ceb2daf2b98455c014/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=69532b60791a5de013b1a8ceb2daf2b98455c014", "patch": "@@ -1821,23 +1821,6 @@ do {\t\t\t\t\t\t\t\t\\\n \n /* #define PIC_OFFSET_TABLE_REG_CALL_CLOBBERED */\n \n-/* By generating position-independent code, when two different\n-   programs (A and B) share a common library (libC.a), the text of\n-   the library can be shared whether or not the library is linked at\n-   the same address for both programs.  In some of these\n-   environments, position-independent code requires not only the use\n-   of different addressing modes, but also special code to enable the\n-   use of these addressing modes.\n-\n-   The `FINALIZE_PIC' macro serves as a hook to emit these special\n-   codes once the function is being compiled into assembly code, but\n-   not before.  (It is not done before, because in the case of\n-   compiling an inline function, it would lead to multiple PIC\n-   prologues being included in functions which used inline functions\n-   and were compiled to assembly language.)  */\n-\n-/* #define FINALIZE_PIC */\n-\n /* A C expression that is nonzero if X is a legitimate immediate\n    operand on the target machine when generating position independent\n    code.  You can assume that X satisfies `CONSTANT_P', so you need"}]}