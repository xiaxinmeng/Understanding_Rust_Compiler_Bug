{"sha": "9eab7f91b9147d721680a49a5e07c8c0f2b4d2af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVhYjdmOTFiOTE0N2Q3MjE2ODBhNDlhNWUwN2M4YzBmMmI0ZDJhZg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2010-07-31T15:51:17Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2010-07-31T15:51:17Z"}, "message": "tree-ssa-math-opts.c (convert_plusminus_to_widen): Fix type used in the call to optab_for_tree_code.\n\ngcc/\n\t* tree-ssa-math-opts.c (convert_plusminus_to_widen): Fix type\n\tused in the call to optab_for_tree_code.  Fix the second\n\tis_widening_mult_p call.  Check that both unwidened operands\n\thave the same sign.\n\nFrom-SVN: r162784", "tree": {"sha": "823f82a89dd1d28b19a663287f60b3b0ae52a5d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/823f82a89dd1d28b19a663287f60b3b0ae52a5d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9eab7f91b9147d721680a49a5e07c8c0f2b4d2af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eab7f91b9147d721680a49a5e07c8c0f2b4d2af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9eab7f91b9147d721680a49a5e07c8c0f2b4d2af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eab7f91b9147d721680a49a5e07c8c0f2b4d2af/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6601202c2980c23c590355619ba82d540e50a0ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6601202c2980c23c590355619ba82d540e50a0ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6601202c2980c23c590355619ba82d540e50a0ae"}], "stats": {"total": 38, "additions": 25, "deletions": 13}, "files": [{"sha": "3b3d4bfe0803b2bdc01d61789da49c16893340af", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eab7f91b9147d721680a49a5e07c8c0f2b4d2af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eab7f91b9147d721680a49a5e07c8c0f2b4d2af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9eab7f91b9147d721680a49a5e07c8c0f2b4d2af", "patch": "@@ -1,3 +1,10 @@\n+2010-07-31  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* tree-ssa-math-opts.c (convert_plusminus_to_widen): Fix type\n+\tused in the call to optab_for_tree_code.  Fix the second\n+\tis_widening_mult_p call.  Check that both unwidened operands\n+\thave the same sign.\n+\n 2010-07-31  John Tytgat  <John.Tytgat@aaug.net>\n \n \t* config/arm/arm.c (arm_function_arg): Remove superfluous test."}, {"sha": "bf37b774bfc479ea1b72c65e51aba4350d81739d", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eab7f91b9147d721680a49a5e07c8c0f2b4d2af/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eab7f91b9147d721680a49a5e07c8c0f2b4d2af/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=9eab7f91b9147d721680a49a5e07c8c0f2b4d2af", "patch": "@@ -1414,13 +1414,6 @@ convert_plusminus_to_widen (gimple_stmt_iterator *gsi, gimple stmt,\n   else\n     wmult_code = WIDEN_MULT_PLUS_EXPR;\n \n-  /* Verify that the machine can perform a widening multiply\n-     accumulate in this mode/signedness combination, otherwise\n-     this transformation is likely to pessimize code.  */\n-  this_optab = optab_for_tree_code (wmult_code, type, optab_default);\n-  if (optab_handler (this_optab, TYPE_MODE (type)) == CODE_FOR_nothing)\n-    return false;\n-\n   rhs1 = gimple_assign_rhs1 (stmt);\n   rhs2 = gimple_assign_rhs2 (stmt);\n \n@@ -1447,37 +1440,49 @@ convert_plusminus_to_widen (gimple_stmt_iterator *gsi, gimple stmt,\n       if (!is_widening_mult_p (rhs1_stmt, &type1, &mult_rhs1,\n \t\t\t       &type2, &mult_rhs2))\n \treturn false;\n-      mult_rhs1 = fold_convert (type1, mult_rhs1);\n-      mult_rhs2 = fold_convert (type2, mult_rhs2);\n       add_rhs = rhs2;\n     }\n   else if (rhs2_code == MULT_EXPR)\n     {\n-      if (!is_widening_mult_p (rhs1_stmt, &type1, &mult_rhs1,\n+      if (!is_widening_mult_p (rhs2_stmt, &type1, &mult_rhs1,\n \t\t\t       &type2, &mult_rhs2))\n \treturn false;\n-      mult_rhs1 = fold_convert (type1, mult_rhs1);\n-      mult_rhs2 = fold_convert (type2, mult_rhs2);\n       add_rhs = rhs1;\n     }\n   else if (code == PLUS_EXPR && rhs1_code == WIDEN_MULT_EXPR)\n     {\n       mult_rhs1 = gimple_assign_rhs1 (rhs1_stmt);\n       mult_rhs2 = gimple_assign_rhs2 (rhs1_stmt);\n+      type1 = TREE_TYPE (mult_rhs1);\n+      type2 = TREE_TYPE (mult_rhs2);\n       add_rhs = rhs2;\n     }\n   else if (rhs2_code == WIDEN_MULT_EXPR)\n     {\n       mult_rhs1 = gimple_assign_rhs1 (rhs2_stmt);\n       mult_rhs2 = gimple_assign_rhs2 (rhs2_stmt);\n+      type1 = TREE_TYPE (mult_rhs1);\n+      type2 = TREE_TYPE (mult_rhs2);\n       add_rhs = rhs1;\n     }\n   else\n     return false;\n \n+  if (TYPE_UNSIGNED (type1) != TYPE_UNSIGNED (type2))\n+    return false;\n+\n+  /* Verify that the machine can perform a widening multiply\n+     accumulate in this mode/signedness combination, otherwise\n+     this transformation is likely to pessimize code.  */\n+  this_optab = optab_for_tree_code (wmult_code, type1, optab_default);\n+  if (optab_handler (this_optab, TYPE_MODE (type)) == CODE_FOR_nothing)\n+    return false;\n+\n   /* ??? May need some type verification here?  */\n \n-  gimple_assign_set_rhs_with_ops_1 (gsi, wmult_code, mult_rhs1, mult_rhs2,\n+  gimple_assign_set_rhs_with_ops_1 (gsi, wmult_code,\n+\t\t\t\t    fold_convert (type1, mult_rhs1),\n+\t\t\t\t    fold_convert (type2, mult_rhs2),\n \t\t\t\t    add_rhs);\n   update_stmt (gsi_stmt (*gsi));\n   return true;"}]}