{"sha": "2b046bda6e342d0b7031eed2cb884dd396484f6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmIwNDZiZGE2ZTM0MmQwYjcwMzFlZWQyY2I4ODRkZDM5NjQ4NGY2Yg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-01-14T16:21:46Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-01-14T16:21:46Z"}, "message": "arc-protos.h: New file.\n\n\t* arc-protos.h: New file.\n\n\t* arc.c: Include tm_p.h.  Add static prototypes.  Fix compile\n\ttime warnings.\n\n\t* arc.h: Move prototypes to arc-protos.h.  Fix compile time\n\twarnings.\n\n\t* arc.md: Likewise.\n\nFrom-SVN: r31417", "tree": {"sha": "4810c165933d71ab9de212334a69018b527c90d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4810c165933d71ab9de212334a69018b527c90d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b046bda6e342d0b7031eed2cb884dd396484f6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b046bda6e342d0b7031eed2cb884dd396484f6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b046bda6e342d0b7031eed2cb884dd396484f6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b046bda6e342d0b7031eed2cb884dd396484f6b/comments", "author": null, "committer": null, "parents": [{"sha": "699851185ad5f8039da3cdc62a60c79dda4ce180", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/699851185ad5f8039da3cdc62a60c79dda4ce180", "html_url": "https://github.com/Rust-GCC/gccrs/commit/699851185ad5f8039da3cdc62a60c79dda4ce180"}], "stats": {"total": 243, "additions": 175, "deletions": 68}, "files": [{"sha": "b332bc87234a61e6cd74785939c61b4577b578ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b046bda6e342d0b7031eed2cb884dd396484f6b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b046bda6e342d0b7031eed2cb884dd396484f6b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2b046bda6e342d0b7031eed2cb884dd396484f6b", "patch": "@@ -1,3 +1,15 @@\n+2000-01-14  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* arc-protos.h: New file.\n+\n+\t* arc.c: Include tm_p.h.  Add static prototypes.  Fix compile\n+\ttime warnings.\n+\t\n+\t* arc.h: Move prototypes to arc-protos.h.  Fix compile time\n+\twarnings.\n+\t\n+\t* arc.md: Likewise.\n+\n 2000-01-14  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* dsp16xx-protos.h: New file."}, {"sha": "442a1bfa13d3fbc003d189377f1f8ab29a89d12b", "filename": "gcc/config/arc/arc-protos.h", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b046bda6e342d0b7031eed2cb884dd396484f6b/gcc%2Fconfig%2Farc%2Farc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b046bda6e342d0b7031eed2cb884dd396484f6b/gcc%2Fconfig%2Farc%2Farc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-protos.h?ref=2b046bda6e342d0b7031eed2cb884dd396484f6b", "patch": "@@ -0,0 +1,84 @@\n+/* Definitions of target machine for GNU compiler, Argonaut ARC cpu.\n+   Copyright (C) 2000 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#ifdef RTX_CODE\n+#ifdef TREE_CODE\n+extern void arc_va_start PARAMS ((int, tree, rtx));\n+extern rtx arc_va_arg PARAMS ((tree, tree));\n+#endif /* TREE_CODE */\n+\n+extern enum machine_mode arc_select_cc_mode PARAMS ((enum rtx_code, rtx, rtx));\n+\n+/* Define the function that build the compare insn for scc and bcc.  */\n+extern struct rtx_def *gen_compare_reg PARAMS ((enum rtx_code, rtx, rtx));\n+\n+/* Declarations for various fns used in the .md file.  */\n+extern const char *output_shift PARAMS ((rtx *));\n+\n+extern int symbolic_operand PARAMS ((rtx, enum machine_mode));\n+extern int arc_double_limm_p PARAMS ((rtx));\n+extern int arc_address_cost PARAMS ((rtx));\n+extern int arc_eligible_for_epilogue_delay PARAMS ((rtx, int));\n+extern void arc_initialize_trampoline PARAMS ((rtx, rtx, rtx));\n+extern void arc_print_operand PARAMS ((FILE *, rtx, int));\n+extern void arc_print_operand_address PARAMS ((FILE *, rtx));\n+extern void arc_final_prescan_insn PARAMS ((rtx, rtx *, int));\n+extern int call_address_operand PARAMS ((rtx, enum machine_mode));\n+extern int call_operand PARAMS ((rtx, enum machine_mode));\n+extern int symbolic_memory_operand PARAMS ((rtx, enum machine_mode));\n+extern int short_immediate_operand PARAMS ((rtx, enum machine_mode));\n+extern int long_immediate_operand PARAMS ((rtx, enum machine_mode));\n+extern int long_immediate_loadstore_operand PARAMS ((rtx, enum machine_mode));\n+extern int move_src_operand PARAMS ((rtx, enum machine_mode));\n+extern int move_double_src_operand PARAMS ((rtx, enum machine_mode));\n+extern int move_dest_operand PARAMS ((rtx, enum machine_mode));\n+extern int load_update_operand PARAMS ((rtx, enum machine_mode));\n+extern int store_update_operand PARAMS ((rtx, enum machine_mode));\n+extern int nonvol_nonimm_operand PARAMS ((rtx, enum machine_mode));\n+extern int const_sint32_operand PARAMS ((rtx, enum machine_mode));\n+extern int const_uint32_operand PARAMS ((rtx, enum machine_mode));\n+extern int proper_comparison_operator PARAMS ((rtx, enum machine_mode));\n+extern int shift_operator PARAMS ((rtx, enum machine_mode));\n+#endif /* RTX_CODE */\n+\n+#ifdef TREE_CODE\n+extern enum arc_function_type arc_compute_function_type PARAMS ((tree));\n+extern int arc_comp_type_attributes PARAMS ((tree, tree));\n+extern void arc_set_default_type_attributes PARAMS ((tree));\n+extern int arc_valid_machine_decl_attribute PARAMS ((tree, tree, tree, tree));\n+extern void arc_setup_incoming_varargs PARAMS ((CUMULATIVE_ARGS *,\n+\t\t\t\t\t\tenum machine_mode, tree,\n+\t\t\t\t\t\tint *, int));\n+#endif /* TREE_CODE */\n+\n+\n+extern void arc_init PARAMS ((void));\n+extern void arc_asm_file_start PARAMS ((FILE *));\n+extern unsigned int arc_compute_frame_size PARAMS ((int));\n+extern void arc_save_restore PARAMS ((FILE *, const char *, unsigned int,\n+\t\t\t\t      unsigned int, const char *));\n+extern void arc_output_function_prologue PARAMS ((FILE *, int));\n+extern void arc_output_function_epilogue PARAMS ((FILE *, int));\n+extern int arc_delay_slots_for_epilogue PARAMS ((void));\n+extern void arc_finalize_pic PARAMS ((void));\n+extern void arc_ccfsm_at_label PARAMS ((const char *, int));\n+extern int arc_ccfsm_branch_deleted_p PARAMS ((void));\n+extern void arc_ccfsm_record_branch_deleted PARAMS ((void));\n+"}, {"sha": "b92d893216c7b260cd7a58a2f4d41972933dff0d", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 62, "deletions": 47, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b046bda6e342d0b7031eed2cb884dd396484f6b/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b046bda6e342d0b7031eed2cb884dd396484f6b/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=2b046bda6e342d0b7031eed2cb884dd396484f6b", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines used for code generation on the Argonaut ARC cpu.\n-   Copyright (C) 1994, 1995, 1997, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1994, 95, 97-99, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -36,29 +36,31 @@ Boston, MA 02111-1307, USA.  */\n #include \"function.h\"\n #include \"expr.h\"\n #include \"recog.h\"\n+#include \"toplev.h\"\n+#include \"tm_p.h\"\n \n /* Which cpu we're compiling for (NULL(=base), ???).  */\n-char *arc_cpu_string;\n+const char *arc_cpu_string;\n int arc_cpu_type;\n \n /* Name of mangle string to add to symbols to separate code compiled for each\n    cpu (or NULL).  */\n-char *arc_mangle_cpu;\n+const char *arc_mangle_cpu;\n \n /* Save the operands last given to a compare for use when we\n    generate a scc or bcc insn.  */\n rtx arc_compare_op0, arc_compare_op1;\n \n /* Name of text, data, and rodata sections, as specified on command line.\n    Selected by -m{text,data,rodata} flags.  */\n-char *arc_text_string = ARC_DEFAULT_TEXT_SECTION;\n-char *arc_data_string = ARC_DEFAULT_DATA_SECTION;\n-char *arc_rodata_string = ARC_DEFAULT_RODATA_SECTION;\n+const char *arc_text_string = ARC_DEFAULT_TEXT_SECTION;\n+const char *arc_data_string = ARC_DEFAULT_DATA_SECTION;\n+const char *arc_rodata_string = ARC_DEFAULT_RODATA_SECTION;\n \n /* Name of text, data, and rodata sections used in varasm.c.  */\n-char *arc_text_section;\n-char *arc_data_section;\n-char *arc_rodata_section;\n+const char *arc_text_section;\n+const char *arc_data_section;\n+const char *arc_rodata_section;\n \n /* Array of valid operand punctuation characters.  */\n char arc_punct_chars[256];\n@@ -80,15 +82,17 @@ static int arc_ccfsm_target_label;\n    arc_print_operand.  */\n static int last_insn_set_cc_p;\n static int current_insn_set_cc_p;\n-static void record_cc_ref ();\n-\n-void arc_init_reg_tables ();\n+static void record_cc_ref PARAMS ((rtx));\n+static void arc_init_reg_tables PARAMS ((void));\n+static int get_arc_condition_code PARAMS ((rtx));\n \n /* Called by OVERRIDE_OPTIONS to initialize various things.  */\n \n void\n arc_init (void)\n {\n+  char *tmp;\n+  \n   if (arc_cpu_string == 0\n       || !strcmp (arc_cpu_string, \"base\"))\n     {\n@@ -108,12 +112,12 @@ arc_init (void)\n     }\n \n   /* Set the pseudo-ops for the various standard sections.  */\n-  arc_text_section = xmalloc (strlen (arc_text_string) + sizeof (ARC_SECTION_FORMAT) + 1);\n-  sprintf (arc_text_section, ARC_SECTION_FORMAT, arc_text_string);\n-  arc_data_section = xmalloc (strlen (arc_data_string) + sizeof (ARC_SECTION_FORMAT) + 1);\n-  sprintf (arc_data_section, ARC_SECTION_FORMAT, arc_data_string);\n-  arc_rodata_section = xmalloc (strlen (arc_rodata_string) + sizeof (ARC_SECTION_FORMAT) + 1);\n-  sprintf (arc_rodata_section, ARC_SECTION_FORMAT, arc_rodata_string);\n+  arc_text_section = tmp = xmalloc (strlen (arc_text_string) + sizeof (ARC_SECTION_FORMAT) + 1);\n+  sprintf (tmp, ARC_SECTION_FORMAT, arc_text_string);\n+  arc_data_section = tmp = xmalloc (strlen (arc_data_string) + sizeof (ARC_SECTION_FORMAT) + 1);\n+  sprintf (tmp, ARC_SECTION_FORMAT, arc_data_string);\n+  arc_rodata_section = tmp = xmalloc (strlen (arc_rodata_string) + sizeof (ARC_SECTION_FORMAT) + 1);\n+  sprintf (tmp, ARC_SECTION_FORMAT, arc_rodata_string);\n \n   arc_init_reg_tables ();\n \n@@ -127,7 +131,7 @@ arc_init (void)\n }\n \f\n /* The condition codes of the ARC, and the inverse function.  */\n-static char *arc_condition_codes[] =\n+static const char *const arc_condition_codes[] =\n {\n   \"al\", 0, \"eq\", \"ne\", \"p\", \"n\", \"c\", \"nc\", \"v\", \"nv\",\n   \"gt\", \"le\", \"ge\", \"lt\", \"hi\", \"ls\", \"pnz\", 0\n@@ -167,7 +171,7 @@ get_arc_condition_code (comparison)\n enum machine_mode\n arc_select_cc_mode (op, x, y)\n      enum rtx_code op;\n-     rtx x, y;\n+     rtx x, y ATTRIBUTE_UNUSED;\n {\n   switch (op)\n     {\n@@ -187,6 +191,8 @@ arc_select_cc_mode (op, x, y)\n \tcase ASHIFTRT :\n \tcase LSHIFTRT :\n \t  return CCZNCmode;\n+\tdefault:\n+\t  break;\n \t}\n     }\n   return CCmode;\n@@ -238,7 +244,7 @@ unsigned int arc_mode_class [NUM_MACHINE_MODES];\n \n enum reg_class arc_regno_reg_class[FIRST_PSEUDO_REGISTER];\n \n-void\n+static void\n arc_init_reg_tables ()\n {\n   int i;\n@@ -309,8 +315,8 @@ arc_init_reg_tables ()\n \n int\n arc_valid_machine_decl_attribute (type, attributes, identifier, args)\n-     tree type;\n-     tree attributes;\n+     tree type ATTRIBUTE_UNUSED;\n+     tree attributes ATTRIBUTE_UNUSED;\n      tree identifier;\n      tree args;\n {\n@@ -333,7 +339,7 @@ arc_valid_machine_decl_attribute (type, attributes, identifier, args)\n \n int\n arc_comp_type_attributes (type1, type2)\n-     tree type1, type2;\n+     tree type1 ATTRIBUTE_UNUSED, type2 ATTRIBUTE_UNUSED;\n {\n   return 1;\n }\n@@ -342,7 +348,7 @@ arc_comp_type_attributes (type1, type2)\n \n void\n arc_set_default_type_attributes (type)\n-     tree type;\n+     tree type ATTRIBUTE_UNUSED;\n {\n }\n \f\n@@ -374,7 +380,7 @@ call_operand (op, mode)\n int\n symbolic_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   switch (GET_CODE (op))\n     {\n@@ -393,7 +399,7 @@ symbolic_operand (op, mode)\n int\n symbolic_memory_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   if (GET_CODE (op) == SUBREG)\n     op = SUBREG_REG (op);\n@@ -409,7 +415,7 @@ symbolic_memory_operand (op, mode)\n int\n short_immediate_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   if (GET_CODE (op) != CONST_INT)\n     return 0;\n@@ -422,7 +428,7 @@ short_immediate_operand (op, mode)\n int\n long_immediate_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   switch (GET_CODE (op))\n     {\n@@ -437,6 +443,8 @@ long_immediate_operand (op, mode)\n \t represented this way (the multiplication patterns can cause these\n \t to be generated).  They also occur for SFmode values.  */\n       return 1;\n+    default:\n+      break;\n     }\n   return 0;\n }\n@@ -450,7 +458,7 @@ long_immediate_operand (op, mode)\n int\n long_immediate_loadstore_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   if (GET_CODE (op) != MEM)\n     return 0;\n@@ -480,6 +488,8 @@ long_immediate_loadstore_operand (op, mode)\n \t  && !SMALL_INT (INTVAL (XEXP (op, 1))))\n \treturn 1;\n       return 0;\n+    default:\n+      break;\n     }\n   return 0;\n }\n@@ -644,7 +654,7 @@ nonvol_nonimm_operand (op, mode)\n int\n const_sint32_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   /* All allowed constants will fit a CONST_INT.  */\n   return (GET_CODE (op) == CONST_INT\n@@ -658,7 +668,7 @@ const_sint32_operand (op, mode)\n int\n const_uint32_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n #if HOST_BITS_PER_WIDE_INT > 32\n   /* All allowed constants will fit a CONST_INT.  */\n@@ -679,7 +689,7 @@ const_uint32_operand (op, mode)\n int\n proper_comparison_operator (op, mode)\n     rtx op;\n-    enum machine_mode mode;\n+    enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   enum rtx_code code = GET_CODE (op);\n \n@@ -759,7 +769,7 @@ void\n arc_setup_incoming_varargs (cum, mode, type, pretend_size, no_rtl)\n      CUMULATIVE_ARGS *cum;\n      enum machine_mode mode;\n-     tree type;\n+     tree type ATTRIBUTE_UNUSED;\n      int *pretend_size;\n      int no_rtl;\n {\n@@ -843,6 +853,8 @@ arc_address_cost (addr)\n \t  }\n \tbreak;\n       }\n+    default:\n+      break;\n     }\n \n   return 4;\n@@ -1381,7 +1393,7 @@ arc_finalize_pic ()\n int\n shift_operator (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   switch (GET_CODE (op))\n     {\n@@ -1408,15 +1420,14 @@ shift_operator (op, mode)\n /* ??? We use the loop register here.  We don't use it elsewhere (yet) and\n    using it here will give us a chance to play with it.  */\n \n-char *\n+const char *\n output_shift (operands)\n      rtx *operands;\n {\n-  static int loopend_lab;\n   rtx shift = operands[3];\n   enum machine_mode mode = GET_MODE (shift);\n   enum rtx_code code = GET_CODE (shift);\n-  char *shift_one;\n+  const char *shift_one;\n \n   if (mode != SImode)\n     abort ();\n@@ -1472,6 +1483,8 @@ output_shift (operands)\n \t      /* The ARC doesn't have a rol insn.  Use something else.  */\n \t      output_asm_insn (\"asl.f 0,%0\\n\\tadc %0,0,0\", operands);\n \t      break;\n+\t    default:\n+\t      break;\n \t    }\n \t}\n       /* Must loop.  */\n@@ -1487,7 +1500,7 @@ output_shift (operands)\n \t  if (optimize)\n \t    {\n \t      if (flag_pic)\n-\t\tsprintf (\"lr %%4,[status]\\n\\tadd %%4,%%4,6\\t%s single insn loop start\",\n+\t\tsprintf (buf, \"lr %%4,[status]\\n\\tadd %%4,%%4,6\\t%s single insn loop start\",\n \t\t\t ASM_COMMENT_START);\n \t      else\n \t\tsprintf (buf, \"mov %%4,%%%%st(1f)\\t%s (single insn loop start) >> 2\",\n@@ -1531,7 +1544,7 @@ output_shift (operands)\n \n void\n arc_initialize_trampoline (tramp, fnaddr, cxt)\n-     rtx tramp, fnaddr, cxt;\n+     rtx tramp ATTRIBUTE_UNUSED, fnaddr ATTRIBUTE_UNUSED, cxt ATTRIBUTE_UNUSED;\n {\n }\n \f\n@@ -1601,9 +1614,11 @@ arc_print_operand (file, x, code)\n \t\t\t     arc_condition_codes[arc_ccfsm_current_cc]);\n \t\t}\n \t      else\n-\t\t/* This insn is executed for either path, so don't\n-\t\t   conditionalize it at all.  */\n-\t\t; /* nothing to do */\n+\t        {\n+\t\t  /* This insn is executed for either path, so don't\n+\t\t     conditionalize it at all.  */\n+\t\t  ; /* nothing to do */\n+\t\t}\n \t    }\n \t  else\n \t    {\n@@ -1677,7 +1692,7 @@ arc_print_operand (file, x, code)\n \n \t  split_double (x, &first, &second);\n \t  fprintf (file, \"0x%08lx\",\n-\t\t   code == 'L' ? INTVAL (first) : INTVAL (second));\n+\t\t   (long)(code == 'L' ? INTVAL (first) : INTVAL (second)));\n \t}\n       else\n \toutput_operand_lossage (\"invalid operand to %H/%L code\");\n@@ -1882,8 +1897,8 @@ record_cc_ref (insn)\n void\n arc_final_prescan_insn (insn, opvec, noperands)\n      rtx insn;\n-     rtx *opvec;\n-     int noperands;\n+     rtx *opvec ATTRIBUTE_UNUSED;\n+     int noperands ATTRIBUTE_UNUSED;\n {\n   /* BODY will hold the body of INSN.  */\n   register rtx body = PATTERN (insn);\n@@ -2167,7 +2182,7 @@ arc_final_prescan_insn (insn, opvec, noperands)\n \n void\n arc_ccfsm_at_label (prefix, num)\n-     char *prefix;\n+     const char *prefix;\n      int num;\n {\n   if (arc_ccfsm_state == 3 && arc_ccfsm_target_label == num"}, {"sha": "0689d2e274a89d15c43e8d5dab0dd081ba1278a7", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b046bda6e342d0b7031eed2cb884dd396484f6b/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b046bda6e342d0b7031eed2cb884dd396484f6b/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=2b046bda6e342d0b7031eed2cb884dd396484f6b", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, Argonaut ARC cpu.\n-   Copyright (C) 1994, 1995, 1997, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1994, 95, 97, 98, 99, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -38,6 +38,7 @@ Boston, MA 02111-1307, USA.  */\n #undef PTRDIFF_TYPE\n #undef WCHAR_TYPE\n #undef WCHAR_TYPE_SIZE\n+#undef ASM_OUTPUT_LABELREF\n \f\n /* Print subsidiary information on the compiler version in use.  */\n #define TARGET_VERSION fprintf (stderr, \" (arc)\")\n@@ -147,8 +148,8 @@ extern int target_flags;\n \textern char *m88k_short_data;\n \t#define TARGET_OPTIONS { { \"short-data-\", &m88k_short_data } }  */\n \n-extern char *arc_cpu_string;\n-extern char *arc_text_string,*arc_data_string,*arc_rodata_string;\n+extern const char *arc_cpu_string;\n+extern const char *arc_text_string,*arc_data_string,*arc_rodata_string;\n \n #define TARGET_OPTIONS \\\n {\t\t\t\t\t\t\\\n@@ -176,7 +177,6 @@ extern int arc_cpu_type;\n    Don't use this macro to turn on various extra optimizations for\n    `-O'.  That is what `OPTIMIZATION_OPTIONS' is for.  */\n \n-extern void arc_init ();\n \n #define OVERRIDE_OPTIONS \\\n do {\t\t\t\t\\\n@@ -688,7 +688,7 @@ extern enum reg_class arc_regno_reg_class[];\n #define ROUND_ADVANCE_CUM(CUM, MODE, TYPE) \\\n ((((MODE) == BLKmode ? TYPE_ALIGN (TYPE) : GET_MODE_BITSIZE (MODE)) \\\n   > BITS_PER_WORD)\t\\\n- ? ((CUM) + 1 & ~1)\t\\\n+ ? (((CUM) + 1) & ~1)\t\\\n  : (CUM))\n \n /* Return boolean indicating arg of type TYPE and mode MODE will be passed in\n@@ -1055,7 +1055,6 @@ do { \\\n \n /* Given a comparison code (EQ, NE, etc.) and the first operand of a COMPARE,\n    return the mode to be used for the comparison.  */\n-extern enum machine_mode arc_select_cc_mode ();\n #define SELECT_CC_MODE(OP, X, Y) \\\n arc_select_cc_mode (OP, X, Y)\n \n@@ -1155,7 +1154,7 @@ arc_select_cc_mode (OP, X, Y)\n #define ARC_DEFAULT_DATA_SECTION\t\".data\"\n #define ARC_DEFAULT_RODATA_SECTION\t\".rodata\"\n \n-extern char *arc_text_section,*arc_data_section,*arc_rodata_section;\n+extern const char *arc_text_section, *arc_data_section, *arc_rodata_section;\n \n /* initfini.c uses this in an asm.  */\n #if defined (CRT_INIT) || defined (CRT_FINI)\n@@ -1257,7 +1256,6 @@ do {\t\t\t\t\t\t\t\\\n /* Control the assembler format that we output.  */\n \n /* Output at beginning of assembler file.  */\n-extern void arc_asm_file_start ();\n #undef ASM_FILE_START\n #define ASM_FILE_START(FILE) arc_asm_file_start (FILE)\n \n@@ -1365,7 +1363,7 @@ do {\t\t\t\t\\\n /* On the ARC we want to have libgcc's for multiple cpus in one binary.\n    We can't use `assemble_name' here as that will call ASM_OUTPUT_LABELREF\n    and we'll get another suffix added on if -mmangle-cpu.  */\n-extern char *arc_mangle_cpu;\n+extern const char *arc_mangle_cpu;\n #define ASM_OUTPUT_EXTERNAL_LIBCALL(FILE, SYMREF) \\\n do {\t\t\t\t\t\t\t\\\n   if (TARGET_MANGLE_CPU_LIBGCC)\t\t\t\t\\\n@@ -1384,7 +1382,7 @@ do {\t\t\t\t\t\t\t\\\n /* We work around a dwarfout.c deficiency by watching for labels from it and\n    not adding the '_' prefix nor the cpu suffix.  There is a comment in\n    dwarfout.c that says it should be using ASM_OUTPUT_INTERNAL_LABEL.  */\n-extern char *arc_mangle_cpu;\n+extern const char *arc_mangle_cpu;\n #define ASM_OUTPUT_LABELREF(FILE, NAME) \\\n do {\t\t\t\t\t\t\t\\\n   if ((NAME)[0] == '.' && (NAME)[1] == 'L')\t\t\\\n@@ -1519,8 +1517,12 @@ do { if ((LOG) != 0) fprintf (FILE, \"\\t.align %d\\n\", 1 << (LOG)); } while (0)\n /* Debugging information.  */\n \n /* Generate DBX and DWARF debugging information.  */\n+#ifndef DBX_DEBUGGING_INFO\n #define DBX_DEBUGGING_INFO\n+#endif\n+#ifndef DWARF_DEBUGGING_INFO\n #define DWARF_DEBUGGING_INFO\n+#endif\n \n /* Prefer STABS (for now).  */\n #undef PREFERRED_DEBUGGING_TYPE\n@@ -1593,19 +1595,16 @@ do { if ((LOG) != 0) fprintf (FILE, \"\\t.align %d\\n\", 1 << (LOG)); } while (0)\n /* A C expression whose value is nonzero if IDENTIFIER with arguments ARGS\n    is a valid machine specific attribute for DECL.\n    The attributes in ATTRIBUTES have previously been assigned to TYPE.  */\n-extern int arc_valid_machine_attribute ();\n #define VALID_MACHINE_DECL_ATTRIBUTE(DECL, ATTRIBUTES, IDENTIFIER, ARGS) \\\n arc_valid_machine_decl_attribute (DECL, ATTRIBUTES, IDENTIFIER, ARGS)\n \n /* A C expression that returns zero if the attributes on TYPE1 and TYPE2 are\n    incompatible, one if they are compatible, and two if they are\n    nearly compatible (which causes a warning to be generated).  */\n-extern int arc_comp_type_attributes ();\n #define COMP_TYPE_ATTRIBUTES(TYPE1, TYPE2) \\\n arc_comp_type_attributes (TYPE1, TYPE2)\n \n /* Give newly defined TYPE some default attributes.  */\n-extern void arc_set_default_type_attributes ();\n #define SET_DEFAULT_TYPE_ATTRIBUTES(TYPE) \\\n arc_set_default_type_attributes (TYPE)\n \n@@ -1618,12 +1617,6 @@ arc_set_default_type_attributes (TYPE)\n    since it hasn't been defined!  */\n extern struct rtx_def *arc_compare_op0, *arc_compare_op1;\n \n-/* Define the function that build the compare insn for scc and bcc.  */\n-extern struct rtx_def *gen_compare_reg ();\n-\n-/* Declarations for various fns used in the .md file.  */\n-extern char *output_shift ();\n-\n /* ARC function types.   */\n enum arc_function_type {\n   ARC_FUNCTION_UNKNOWN, ARC_FUNCTION_NORMAL,\n@@ -1634,7 +1627,6 @@ enum arc_function_type {\n #define ARC_INTERRUPT_P(TYPE) \\\n ((TYPE) == ARC_FUNCTION_ILINK1 || (TYPE) == ARC_FUNCTION_ILINK2)\n /* Compute the type of a function from its DECL.  */\n-enum arc_function_type arc_compute_function_type ();\n \n \f\n /* Implement `va_start' for varargs and stdarg.  */"}, {"sha": "d10abe698a7e84683959ba3323447d2a4a35e5a5", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b046bda6e342d0b7031eed2cb884dd396484f6b/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b046bda6e342d0b7031eed2cb884dd396484f6b/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=2b046bda6e342d0b7031eed2cb884dd396484f6b", "patch": "@@ -1,5 +1,5 @@\n ;; Machine description of the Argonaut ARC cpu for GNU C compiler\n-;; Copyright (C) 1994, 1997, 1998, 1999 Free Software Foundation, Inc.\n+;; Copyright (C) 1994, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n \n ;; This file is part of GNU CC.\n \n@@ -290,6 +290,8 @@\n \t  return \\\"ld%V1 %0,%1\\;ld%V1 %R0,%R1\\\";\n     case 3 :\n       return \\\"st%V0 %1,%0\\;st%V0 %R1,%R0\\\";\n+    default:\n+      abort();\n     }\n }\"\n   [(set_attr \"type\" \"move,move,load,store\")\n@@ -393,6 +395,8 @@\n \treturn \\\"ld%V1 %0,%1\\;ld%V1 %R0,%R1\\\";\n     case 3 :\n       return \\\"st%V0 %1,%0\\;st%V0 %R1,%R0\\\";\n+    default:\n+      abort();\n     }\n }\"\n   [(set_attr \"type\" \"move,move,load,store\")"}]}