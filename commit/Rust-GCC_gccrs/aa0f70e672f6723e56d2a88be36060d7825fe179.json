{"sha": "aa0f70e672f6723e56d2a88be36060d7825fe179", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWEwZjcwZTY3MmY2NzIzZTU2ZDJhODhiZTM2MDYwZDc4MjVmZTE3OQ==", "commit": {"author": {"name": "Steve Ellcey", "email": "sje@cup.hp.com", "date": "2002-07-23T14:58:04Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2002-07-23T14:58:04Z"}, "message": "explow.c (convert_memory_address): Fix conversion of CONSTs.\n\n\t* gcc/explow.c (convert_memory_address): Fix conversion of CONSTs.\n\tFix permutation of conversion and plus/mult.\n\n\t* gcc/builtins.c (expand_builtin_memcpy) Ensure return pointer is\n\tptr_mode and not Pmode when POINTERS_EXTEND_UNSIGNED is defined.\n\t(expand_builtin_strncpy) Ditto.\n\t(expand_builtin_memset) Ditto.\n\nFrom-SVN: r55679", "tree": {"sha": "ba228b73246416a6497ea772591933f9c542e10f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba228b73246416a6497ea772591933f9c542e10f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa0f70e672f6723e56d2a88be36060d7825fe179", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa0f70e672f6723e56d2a88be36060d7825fe179", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa0f70e672f6723e56d2a88be36060d7825fe179", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa0f70e672f6723e56d2a88be36060d7825fe179/comments", "author": null, "committer": null, "parents": [{"sha": "fa72b06489d3674c61ce6156ac72cd12572d5fc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa72b06489d3674c61ce6156ac72cd12572d5fc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa72b06489d3674c61ce6156ac72cd12572d5fc0"}], "stats": {"total": 85, "additions": 69, "deletions": 16}, "files": [{"sha": "b9f0d3632fa08bf1fade7f92f4ff495ecf3d6ba6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa0f70e672f6723e56d2a88be36060d7825fe179/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa0f70e672f6723e56d2a88be36060d7825fe179/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aa0f70e672f6723e56d2a88be36060d7825fe179", "patch": "@@ -1,3 +1,12 @@\n+2002-07-23  Steve Ellcey  <sje@cup.hp.com>\n+\n+\t* gcc/explow.c (convert_memory_address): Fix conversion of CONSTs.\n+\tFix permutation of conversion and plus/mult.\n+\t* gcc/builtins.c (expand_builtin_memcpy) Ensure return pointer is\n+\tptr_mode and not Pmode when POINTERS_EXTEND_UNSIGNED is defined.\n+\t(expand_builtin_strncpy) Ditto.\n+\t(expand_builtin_memset) Ditto.\n+\n 2002-07-23  Gabriel Dos Reis  <gdr@nerim.net>\n \n \tFix PR/7363:"}, {"sha": "1c8e8a8ea4d8cd6680d17a51859b3531c5e041ef", "filename": "gcc/builtins.c", "status": "modified", "additions": 38, "deletions": 6, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa0f70e672f6723e56d2a88be36060d7825fe179/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa0f70e672f6723e56d2a88be36060d7825fe179/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=aa0f70e672f6723e56d2a88be36060d7825fe179", "patch": "@@ -1981,7 +1981,12 @@ expand_builtin_memcpy (arglist, target, mode)\n \t  store_by_pieces (dest_mem, INTVAL (len_rtx),\n \t\t\t   builtin_memcpy_read_str,\n \t\t\t   (PTR) src_str, dest_align);\n-\t  return force_operand (XEXP (dest_mem, 0), NULL_RTX);\n+\t  dest_mem = force_operand (XEXP (dest_mem, 0), NULL_RTX);\n+#ifdef POINTERS_EXTEND_UNSIGNED\n+\t  if (GET_MODE (dest_mem) != ptr_mode)\n+\t    dest_mem = convert_memory_address (ptr_mode, dest_mem);\n+#endif\n+\t  return dest_mem;\n \t}\n \n       src_mem = get_memory_rtx (src);\n@@ -1991,7 +1996,13 @@ expand_builtin_memcpy (arglist, target, mode)\n       dest_addr = emit_block_move (dest_mem, src_mem, len_rtx);\n \n       if (dest_addr == 0)\n-\tdest_addr = force_operand (XEXP (dest_mem, 0), NULL_RTX);\n+\t{\n+\t  dest_addr = force_operand (XEXP (dest_mem, 0), NULL_RTX);\n+#ifdef POINTERS_EXTEND_UNSIGNED\n+\t  if (GET_MODE (dest_addr) != ptr_mode)\n+\t    dest_addr = convert_memory_address (ptr_mode, dest_addr);\n+#endif\n+\t}\n \n       return dest_addr;\n     }\n@@ -2107,7 +2118,12 @@ expand_builtin_strncpy (arglist, target, mode)\n \t  store_by_pieces (dest_mem, tree_low_cst (len, 1),\n \t\t\t   builtin_strncpy_read_str,\n \t\t\t   (PTR) p, dest_align);\n-\t  return force_operand (XEXP (dest_mem, 0), NULL_RTX);\n+\t  dest_mem = force_operand (XEXP (dest_mem, 0), NULL_RTX);\n+#ifdef POINTERS_EXTEND_UNSIGNED\n+\t  if (GET_MODE (dest_mem) != ptr_mode)\n+\t    dest_mem = convert_memory_address (ptr_mode, dest_mem);\n+#endif\n+\t  return dest_mem;\n \t}\n \n       /* OK transform into builtin memcpy.  */\n@@ -2232,7 +2248,12 @@ expand_builtin_memset (exp, target, mode)\n \t  store_by_pieces (dest_mem, tree_low_cst (len, 1),\n \t\t\t   builtin_memset_gen_str,\n \t\t\t   (PTR)val_rtx, dest_align);\n-\t  return force_operand (XEXP (dest_mem, 0), NULL_RTX);\n+\t  dest_mem = force_operand (XEXP (dest_mem, 0), NULL_RTX);\n+#ifdef POINTERS_EXTEND_UNSIGNED\n+\t  if (GET_MODE (dest_mem) != ptr_mode)\n+\t    dest_mem = convert_memory_address (ptr_mode, dest_mem);\n+#endif\n+\t  return dest_mem;\n \t}\n \n       if (target_char_cast (val, &c))\n@@ -2251,7 +2272,12 @@ expand_builtin_memset (exp, target, mode)\n \t  store_by_pieces (dest_mem, tree_low_cst (len, 1),\n \t\t\t   builtin_memset_read_str,\n \t\t\t   (PTR) &c, dest_align);\n-\t  return force_operand (XEXP (dest_mem, 0), NULL_RTX);\n+\t  dest_mem = force_operand (XEXP (dest_mem, 0), NULL_RTX);\n+#ifdef POINTERS_EXTEND_UNSIGNED\n+\t  if (GET_MODE (dest_mem) != ptr_mode)\n+\t    dest_mem = convert_memory_address (ptr_mode, dest_mem);\n+#endif\n+\t  return dest_mem;\n \t}\n \n       len_rtx = expand_expr (len, NULL_RTX, VOIDmode, 0);\n@@ -2261,7 +2287,13 @@ expand_builtin_memset (exp, target, mode)\n       dest_addr = clear_storage (dest_mem, len_rtx);\n \n       if (dest_addr == 0)\n-\tdest_addr = force_operand (XEXP (dest_mem, 0), NULL_RTX);\n+\t{\n+\t  dest_addr = force_operand (XEXP (dest_mem, 0), NULL_RTX);\n+#ifdef POINTERS_EXTEND_UNSIGNED\n+\t  if (GET_MODE (dest_addr) != ptr_mode)\n+\t    dest_addr = convert_memory_address (ptr_mode, dest_addr);\n+#endif\n+\t}\n \n       return dest_addr;\n     }"}, {"sha": "3cda410467232e6bd142c211b83ba17dfe353f41", "filename": "gcc/explow.c", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa0f70e672f6723e56d2a88be36060d7825fe179/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa0f70e672f6723e56d2a88be36060d7825fe179/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=aa0f70e672f6723e56d2a88be36060d7825fe179", "patch": "@@ -353,14 +353,26 @@ convert_memory_address (to_mode, x)\n {\n   enum machine_mode from_mode = to_mode == ptr_mode ? Pmode : ptr_mode;\n   rtx temp;\n+  enum rtx_code code;\n \n   /* Here we handle some special cases.  If none of them apply, fall through\n      to the default case.  */\n   switch (GET_CODE (x))\n     {\n     case CONST_INT:\n     case CONST_DOUBLE:\n-      return x;\n+      if (GET_MODE_SIZE (to_mode) < GET_MODE_SIZE (from_mode))\n+\tcode = TRUNCATE;\n+      else if (POINTERS_EXTEND_UNSIGNED < 0)\n+\tbreak;\n+      else if (POINTERS_EXTEND_UNSIGNED > 0)\n+\tcode = ZERO_EXTEND;\n+      else\n+\tcode = SIGN_EXTEND;\n+      temp = simplify_unary_operation (code, to_mode, x, from_mode);\n+      if (temp)\n+\treturn temp;\n+      break;\n \n     case SUBREG:\n       if ((SUBREG_PROMOTED_VAR_P (x) || REG_POINTER (SUBREG_REG (x)))\n@@ -389,17 +401,17 @@ convert_memory_address (to_mode, x)\n \n     case PLUS:\n     case MULT:\n-      /* For addition the second operand is a small constant, we can safely\n-\t permute the conversion and addition operation.  We can always safely\n-\t permute them if we are making the address narrower.  In addition,\n-\t always permute the operations if this is a constant.  */\n-      if ((GET_MODE_SIZE (to_mode) < GET_MODE_SIZE (from_mode)\n-\t      || (GET_CODE (x) == PLUS && GET_CODE (XEXP (x, 1)) == CONST_INT\n-\t\t  && (INTVAL (XEXP (x, 1)) + 20000 < 40000\n-\t\t      || CONSTANT_P (XEXP (x, 0))))))\n+      /* For addition we can safely permute the conversion and addition\n+\t operation if one operand is a constant and converting the constant\n+\t does not change it.  We can always safely permute them if we are\n+\t making the address narrower.  */\n+      if (GET_MODE_SIZE (to_mode) < GET_MODE_SIZE (from_mode)\n+\t  || (GET_CODE (x) == PLUS\n+\t      && GET_CODE (XEXP (x, 1)) == CONST_INT\n+\t      && XEXP (x, 1) == convert_memory_address (to_mode, XEXP (x, 1))))\n \treturn gen_rtx_fmt_ee (GET_CODE (x), to_mode,\n \t\t\t       convert_memory_address (to_mode, XEXP (x, 0)),\n-\t\t\t       convert_memory_address (to_mode, XEXP (x, 1)));\n+\t\t\t       XEXP (x, 1));\n       break;\n \n     default:"}]}