{"sha": "af9acf911f1f6e0511414fa4d148a5e13edde08a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY5YWNmOTExZjFmNmUwNTExNDE0ZmE0ZDE0OGE1ZTEzZWRkZTA4YQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-12-12T13:17:27Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-12-12T13:17:27Z"}, "message": "dumpfile.h (enum tree_dump_index): Remove TDI_vcg.\n\n\t* dumpfile.h (enum tree_dump_index): Remove TDI_vcg.\n\t* dumpfile.c (dump_files[]): Remove entry for TDI_vcg.\n\t* tree-cfg.c (gimple_cfg2vcg): Remove.\n\t(build_gimple_cfg): Don't call it.\n\t* doc/invoke.texi (-fdump-tree-vcg): Remove documentation.\n\tCorrect GraphViz documentation, it does handle multiple functions\n\tin a single dump.\n\nFrom-SVN: r194445", "tree": {"sha": "980e3538eeff25f52a0d48f0a327f16560842cf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/980e3538eeff25f52a0d48f0a327f16560842cf7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af9acf911f1f6e0511414fa4d148a5e13edde08a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af9acf911f1f6e0511414fa4d148a5e13edde08a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af9acf911f1f6e0511414fa4d148a5e13edde08a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af9acf911f1f6e0511414fa4d148a5e13edde08a/comments", "author": null, "committer": null, "parents": [{"sha": "d06a01bf68804185394809bfc9754dfe9c522639", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d06a01bf68804185394809bfc9754dfe9c522639", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d06a01bf68804185394809bfc9754dfe9c522639"}], "stats": {"total": 133, "additions": 15, "deletions": 118}, "files": [{"sha": "61e19df65c9724c7d7da4c1e9bc2bcb1468759d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af9acf911f1f6e0511414fa4d148a5e13edde08a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af9acf911f1f6e0511414fa4d148a5e13edde08a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af9acf911f1f6e0511414fa4d148a5e13edde08a", "patch": "@@ -1,3 +1,13 @@\n+2012-12-12  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* dumpfile.h (enum tree_dump_index): Remove TDI_vcg.\n+\t* dumpfile.c (dump_files[]): Remove entry for TDI_vcg.\n+\t* tree-cfg.c (gimple_cfg2vcg): Remove.\n+\t(build_gimple_cfg): Don't call it.\n+\t* doc/invoke.texi (-fdump-tree-vcg): Remove documentation.\n+\tCorrect GraphViz documentation, it does handle multiple functions\n+\tin a single dump.\n+\n 2012-12-12  Zdenek Dvorak  <ook@ucw.cz>\n \n \tPR tree-optimization/55481"}, {"sha": "06ba770454b1a3593677a5ef0b8a5bc7e9b868bf", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af9acf911f1f6e0511414fa4d148a5e13edde08a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af9acf911f1f6e0511414fa4d148a5e13edde08a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=af9acf911f1f6e0511414fa4d148a5e13edde08a", "patch": "@@ -305,7 +305,7 @@ Objective-C and Objective-C++ Dialects}.\n -fdump-tree-all @gol\n -fdump-tree-original@r{[}-@var{n}@r{]}  @gol\n -fdump-tree-optimized@r{[}-@var{n}@r{]} @gol\n--fdump-tree-cfg -fdump-tree-vcg -fdump-tree-alias @gol\n+-fdump-tree-cfg -fdump-tree-alias @gol\n -fdump-tree-ch @gol\n -fdump-tree-ssa@r{[}-@var{n}@r{]} -fdump-tree-pre@r{[}-@var{n}@r{]} @gol\n -fdump-tree-ccp@r{[}-@var{n}@r{]} -fdump-tree-dce@r{[}-@var{n}@r{]} @gol\n@@ -5858,10 +5858,9 @@ Enable showing basic block boundaries (disabled in raw dumps).\n @item graph\n For each of the other indicated dump files (@option{-fdump-rtl-@var{pass}}),\n dump a representation of the control flow graph suitable for viewing with\n-GraphViz to @file{@var{file}.@var{passid}.@var{pass}.dot}.  Note that if\n-the file contains more than one function, the generated file cannot be\n-used directly by GraphViz@.  You must cut and paste each function's\n-graph into its own separate file first.\n+GraphViz to @file{@var{file}.@var{passid}.@var{pass}.dot}.  Each function in\n+the file is pretty-printed as a subgraph, so that GraphViz can render them\n+all in a single plot.\n \n This option currently only works for RTL dumps, and the RTL is always\n dumped in slim form.\n@@ -5932,14 +5931,6 @@ file name is made by appending @file{.gimple} to the source file name.\n Dump the control flow graph of each function to a file.  The file name is\n made by appending @file{.cfg} to the source file name.\n \n-@item vcg\n-@opindex fdump-tree-vcg\n-Dump the control flow graph of each function to a file in VCG format.  The\n-file name is made by appending @file{.vcg} to the source file name.  Note\n-that if the file contains more than one function, the generated file cannot\n-be used directly by VCG@.  You must cut and paste each function's\n-graph into its own separate file first.\n-\n @item ch\n @opindex fdump-tree-ch\n Dump each function after copying loop headers.  The file name is made by"}, {"sha": "2887a57b5126b51738d097fdc5c56f428db33ef3", "filename": "gcc/dumpfile.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af9acf911f1f6e0511414fa4d148a5e13edde08a/gcc%2Fdumpfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af9acf911f1f6e0511414fa4d148a5e13edde08a/gcc%2Fdumpfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.c?ref=af9acf911f1f6e0511414fa4d148a5e13edde08a", "patch": "@@ -62,9 +62,7 @@ static struct dump_file_info dump_files[TDI_end] =\n    0, 0, 0, 0, 4},\n   {\".nested\", \"tree-nested\", NULL, NULL, NULL, NULL, NULL, TDF_TREE,\n    0, 0, 0, 0, 5},\n-  {\".vcg\", \"tree-vcg\", NULL, NULL, NULL, NULL, NULL, TDF_TREE,\n-   0, 0, 0, 0, 6},\n-#define FIRST_AUTO_NUMBERED_DUMP 7\n+#define FIRST_AUTO_NUMBERED_DUMP 6\n \n   {NULL, \"tree-all\", NULL, NULL, NULL, NULL, NULL, TDF_TREE,\n    0, 0, 0, 0, 0},"}, {"sha": "6c74b5e30bb00c37eb48ba8c3d1792b26ebafc38", "filename": "gcc/dumpfile.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af9acf911f1f6e0511414fa4d148a5e13edde08a/gcc%2Fdumpfile.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af9acf911f1f6e0511414fa4d148a5e13edde08a/gcc%2Fdumpfile.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.h?ref=af9acf911f1f6e0511414fa4d148a5e13edde08a", "patch": "@@ -35,8 +35,6 @@ enum tree_dump_index\n   TDI_original,\t\t\t/* dump each function before optimizing it */\n   TDI_generic,\t\t\t/* dump each function after genericizing it */\n   TDI_nested,\t\t\t/* dump each function after unnesting it */\n-  TDI_vcg,\t\t\t/* create a VCG graph file for each\n-\t\t\t\t   function's flowgraph.  */\n   TDI_tree_all,                 /* enable all the GENERIC/GIMPLE dumps.  */\n   TDI_rtl_all,                  /* enable all the RTL dumps.  */\n   TDI_ipa_all,                  /* enable all the IPA dumps.  */"}, {"sha": "385f4c3bc57d3b13d85ead26dbb85cf203ce030c", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 0, "deletions": 100, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af9acf911f1f6e0511414fa4d148a5e13edde08a/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af9acf911f1f6e0511414fa4d148a5e13edde08a/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=af9acf911f1f6e0511414fa4d148a5e13edde08a", "patch": "@@ -111,7 +111,6 @@ static unsigned int split_critical_edges (void);\n static inline bool stmt_starts_bb_p (gimple, gimple);\n static int gimple_verify_flow_info (void);\n static void gimple_make_forwarder_block (edge);\n-static void gimple_cfg2vcg (FILE *);\n static gimple first_non_label_stmt (basic_block);\n static bool verify_gimple_transaction (gimple);\n \n@@ -208,19 +207,6 @@ build_gimple_cfg (gimple_seq seq)\n   make_edges ();\n   cleanup_dead_labels ();\n   htab_delete (discriminator_per_locus);\n-\n-  /* Debugging dumps.  */\n-\n-  /* Write the flowgraph to a VCG file.  */\n-  {\n-    int local_dump_flags;\n-    FILE *vcg_file = dump_begin (TDI_vcg, &local_dump_flags);\n-    if (vcg_file)\n-      {\n-\tgimple_cfg2vcg (vcg_file);\n-\tdump_end (TDI_vcg, vcg_file);\n-      }\n-  }\n }\n \n static unsigned int\n@@ -2150,92 +2136,6 @@ debug_cfg_stats (void)\n   dump_cfg_stats (stderr);\n }\n \n-\n-/* Dump the flowgraph to a .vcg FILE.  */\n-\n-static void\n-gimple_cfg2vcg (FILE *file)\n-{\n-  edge e;\n-  edge_iterator ei;\n-  basic_block bb;\n-  const char *funcname = current_function_name ();\n-\n-  /* Write the file header.  */\n-  fprintf (file, \"graph: { title: \\\"%s\\\"\\n\", funcname);\n-  fprintf (file, \"node: { title: \\\"ENTRY\\\" label: \\\"ENTRY\\\" }\\n\");\n-  fprintf (file, \"node: { title: \\\"EXIT\\\" label: \\\"EXIT\\\" }\\n\");\n-\n-  /* Write blocks and edges.  */\n-  FOR_EACH_EDGE (e, ei, ENTRY_BLOCK_PTR->succs)\n-    {\n-      fprintf (file, \"edge: { sourcename: \\\"ENTRY\\\" targetname: \\\"%d\\\"\",\n-\t       e->dest->index);\n-\n-      if (e->flags & EDGE_FAKE)\n-\tfprintf (file, \" linestyle: dotted priority: 10\");\n-      else\n-\tfprintf (file, \" linestyle: solid priority: 100\");\n-\n-      fprintf (file, \" }\\n\");\n-    }\n-  fputc ('\\n', file);\n-\n-  FOR_EACH_BB (bb)\n-    {\n-      enum gimple_code head_code, end_code;\n-      const char *head_name, *end_name;\n-      int head_line = 0;\n-      int end_line = 0;\n-      gimple first = first_stmt (bb);\n-      gimple last = last_stmt (bb);\n-\n-      if (first)\n-\t{\n-\t  head_code = gimple_code (first);\n-\t  head_name = gimple_code_name[head_code];\n-\t  head_line = get_lineno (first);\n-\t}\n-      else\n-\thead_name = \"no-statement\";\n-\n-      if (last)\n-\t{\n-\t  end_code = gimple_code (last);\n-\t  end_name = gimple_code_name[end_code];\n-\t  end_line = get_lineno (last);\n-\t}\n-      else\n-\tend_name = \"no-statement\";\n-\n-      fprintf (file, \"node: { title: \\\"%d\\\" label: \\\"#%d\\\\n%s (%d)\\\\n%s (%d)\\\"}\\n\",\n-\t       bb->index, bb->index, head_name, head_line, end_name,\n-\t       end_line);\n-\n-      FOR_EACH_EDGE (e, ei, bb->succs)\n-\t{\n-\t  if (e->dest == EXIT_BLOCK_PTR)\n-\t    fprintf (file, \"edge: { sourcename: \\\"%d\\\" targetname: \\\"EXIT\\\"\", bb->index);\n-\t  else\n-\t    fprintf (file, \"edge: { sourcename: \\\"%d\\\" targetname: \\\"%d\\\"\", bb->index, e->dest->index);\n-\n-\t  if (e->flags & EDGE_FAKE)\n-\t    fprintf (file, \" priority: 10 linestyle: dotted\");\n-\t  else\n-\t    fprintf (file, \" priority: 100 linestyle: solid\");\n-\n-\t  fprintf (file, \" }\\n\");\n-\t}\n-\n-      if (bb->next_bb != EXIT_BLOCK_PTR)\n-\tfputc ('\\n', file);\n-    }\n-\n-  fputs (\"}\\n\\n\", file);\n-}\n-\n-\n-\n /*---------------------------------------------------------------------------\n \t\t\t     Miscellaneous helpers\n ---------------------------------------------------------------------------*/"}]}