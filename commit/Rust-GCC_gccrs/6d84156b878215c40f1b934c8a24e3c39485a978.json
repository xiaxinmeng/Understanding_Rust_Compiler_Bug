{"sha": "6d84156b878215c40f1b934c8a24e3c39485a978", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ4NDE1NmI4NzgyMTVjNDBmMWI5MzRjOGEyNGUzYzM5NDg1YTk3OA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2004-10-08T20:25:42Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-10-08T20:25:42Z"}, "message": "c-lex.c (interpret_float): Give a pedwarn rather than a warning for an out-of-range floating point constant.\n\n\t* c-lex.c (interpret_float): Give a pedwarn rather than a warning\n\tfor an out-of-range floating point constant.\n\t* builtins.c (fold_builtin_inf): Give a pedwarn rather than a\n\twarning if the target format does not support infinities.\n\ntestsuite:\n\t* gcc.dg/float-range-1.c, gcc.dg/float-range-2.c: New tests.\n\nFrom-SVN: r88793", "tree": {"sha": "31256910f3b10e27ff12fd3f87bb0f45c2c64979", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31256910f3b10e27ff12fd3f87bb0f45c2c64979"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d84156b878215c40f1b934c8a24e3c39485a978", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d84156b878215c40f1b934c8a24e3c39485a978", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d84156b878215c40f1b934c8a24e3c39485a978", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d84156b878215c40f1b934c8a24e3c39485a978/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "176f9629607f429d33d6461d0eed9263017da7ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/176f9629607f429d33d6461d0eed9263017da7ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/176f9629607f429d33d6461d0eed9263017da7ca"}], "stats": {"total": 59, "additions": 52, "deletions": 7}, "files": [{"sha": "876aad467c9c49dbefe0427050bff4efe748096b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d84156b878215c40f1b934c8a24e3c39485a978/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d84156b878215c40f1b934c8a24e3c39485a978/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d84156b878215c40f1b934c8a24e3c39485a978", "patch": "@@ -1,3 +1,10 @@\n+2004-10-08  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* c-lex.c (interpret_float): Give a pedwarn rather than a warning\n+\tfor an out-of-range floating point constant.\n+\t* builtins.c (fold_builtin_inf): Give a pedwarn rather than a\n+\twarning if the target format does not support infinities.\n+\n 2004-10-08  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* emit-rtl.c (last_label_num, base_label_num): Remove."}, {"sha": "255a47ba19ca63d163d15824ef6e4af80540d989", "filename": "gcc/builtins.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d84156b878215c40f1b934c8a24e3c39485a978/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d84156b878215c40f1b934c8a24e3c39485a978/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=6d84156b878215c40f1b934c8a24e3c39485a978", "patch": "@@ -5825,8 +5825,15 @@ fold_builtin_inf (tree type, int warn)\n {\n   REAL_VALUE_TYPE real;\n \n+  /* __builtin_inff is intended to be usable to define INFINITY on all\n+     targets.  If an infinity is not available, INFINITY expands \"to a\n+     positive constant of type float that overflows at translation\n+     time\", footnote \"In this case, using INFINITY will violate the\n+     constraint in 6.4.4 and thus require a diagnostic.\" (C99 7.12#4).\n+     Thus we pedwarn to ensure this constraint violation is\n+     diagnosed.  */\n   if (!MODE_HAS_INFINITIES (TYPE_MODE (type)) && warn)\n-    warning (\"target format does not support infinity\");\n+    pedwarn (\"target format does not support infinity\");\n \n   real_inf (&real);\n   return build_real (type, real);"}, {"sha": "77c2e4c8ace4d0e956beec6aa8d86f85cd018636", "filename": "gcc/c-lex.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d84156b878215c40f1b934c8a24e3c39485a978/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d84156b878215c40f1b934c8a24e3c39485a978/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=6d84156b878215c40f1b934c8a24e3c39485a978", "patch": "@@ -653,13 +653,13 @@ interpret_float (const cpp_token *token, unsigned int flags)\n   real_from_string (&real, copy);\n   real_convert (&real, TYPE_MODE (type), &real);\n \n-  /* A diagnostic is required for \"soft\" overflow by some ISO C\n-     testsuites.  This is not pedwarn, because some people don't want\n-     an error for this.\n-     ??? That's a dubious reason... is this a mandatory diagnostic or\n-     isn't it?   -- zw, 2001-08-21.  */\n+  /* Both C and C++ require a diagnostic for a floating constant\n+     outside the range of representable values of its type.  Since we\n+     have __builtin_inf* to produce an infinity, it might now be\n+     appropriate for this to be a mandatory pedwarn rather than\n+     conditioned on -pedantic.  */\n   if (REAL_VALUE_ISINF (real) && pedantic)\n-    warning (\"floating constant exceeds range of %<%s%>\", type_name);\n+    pedwarn (\"floating constant exceeds range of %<%s%>\", type_name);\n \n   /* Create a node with determined type and value.  */\n   value = build_real (type, real);"}, {"sha": "6e1ee3dcf7ad81437d1b88ce9b60a5c4db4aa926", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d84156b878215c40f1b934c8a24e3c39485a978/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d84156b878215c40f1b934c8a24e3c39485a978/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6d84156b878215c40f1b934c8a24e3c39485a978", "patch": "@@ -1,3 +1,7 @@\n+2004-10-08  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* gcc.dg/float-range-1.c, gcc.dg/float-range-2.c: New tests.\n+\n 2004-10-08  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* gcc.dg/assign-warn-3.c: New test."}, {"sha": "e14e345aba301f43d40f7f9a144b583ac743d71b", "filename": "gcc/testsuite/gcc.dg/float-range-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d84156b878215c40f1b934c8a24e3c39485a978/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d84156b878215c40f1b934c8a24e3c39485a978/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-1.c?ref=6d84156b878215c40f1b934c8a24e3c39485a978", "patch": "@@ -0,0 +1,13 @@\n+/* Floating constants outside the range of their type should receive a\n+   pedwarn, not a warning.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-ansi -pedantic-errors\" } */\n+\n+void\n+f (void)\n+{\n+  float a = 1e+100000000f; /* { dg-error \"error: floating constant exceeds range of 'float'\" } */\n+  double b = 1e+100000000; /* { dg-error \"error: floating constant exceeds range of 'double'\" } */\n+  long double c = 1e+100000000l; /* { dg-error \"error: floating constant exceeds range of 'long double'\" } */\n+}"}, {"sha": "45447bc791230ce3937caf1c694a53d3ace3671d", "filename": "gcc/testsuite/gcc.dg/float-range-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d84156b878215c40f1b934c8a24e3c39485a978/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d84156b878215c40f1b934c8a24e3c39485a978/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-2.c?ref=6d84156b878215c40f1b934c8a24e3c39485a978", "patch": "@@ -0,0 +1,14 @@\n+/* Floating constants outside the range of their type should receive a\n+   pedwarn, not a warning.  This includes INFINITY if the target does\n+   not support infinities.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile { target vax-*-* pdp11-*-* } } */\n+/* { dg-options \"-ansi -pedantic-errors\" } */\n+\n+void\n+f (void)\n+{\n+  float a = __builtin_inff (); /* { dg-error \"error: target format does not support infinity\" } */\n+  double b = __builtin_inf (); /* { dg-error \"error: target format does not support infinity\" } */\n+  long double c = __builtin_infl (); /* { dg-error \"error: target format does not support infinity\" } */\n+}"}]}