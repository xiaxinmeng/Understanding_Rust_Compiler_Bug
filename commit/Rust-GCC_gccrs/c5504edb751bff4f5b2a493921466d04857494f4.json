{"sha": "c5504edb751bff4f5b2a493921466d04857494f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU1MDRlZGI3NTFiZmY0ZjViMmE0OTM5MjE0NjZkMDQ4NTc0OTRmNA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-11-23T16:29:02Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-11-23T16:29:02Z"}, "message": "ChangeLog, [...]: Fix spelling errors.\n\n\t* ChangeLog, docs/doxygen/maint.cfg.in, docs/doxygen/user.cfg.in,\n\tdocs/doxygen/doxygroups.cc, docs/doxygen/Intro.3,\n\tdocs/html/17_intro/BUGS, docs/html/17_intro/C++STYLE,\n\tdocs/html/17_intro/CHECKLIST, docs/html/17_intro/DESIGN,\n\tdocs/html/17_intro/howto.html, docs/html/17_intro/porting.html,\n\tdocs/html/17_intro/porting.texi, docs/html/18_support/howto.html,\n\tdocs/html/19_diagnostics/howto.html, docs/html/20_util/howto.html,\n\tdocs/html/21_strings/howto.html,\n\tdocs/html/23_containers/howto.html,\n\tdocs/html/26_numerics/howto.html, docs/html/27_io/howto.html,\n\tdocs/html/27_io/binary_iostreams_kuehl.txt,\n\tdocs/html/ext/sgiexts.html, docs/html/faq/index.html,\n\tdocs/html/faq/index.txt, testsuite/24_iterators/iterator.cc,\n\tinclude/bits/basic_file.h, include/bits/locale_facets.h,\n\tinclude/bits/locale_facets.tcc, include/bits/std_sstream.h,\n\tinclude/ext/ropeimpl.h, include/ext/stl_rope.h,\n\tlibsupc++/tinfo.cc, libsupc++/cxxabi.h, libsupc++/typeinfo,\n\tlibsupc++/eh_throw.cc, acinclude.m4, aclocal.m4, configure,\n\tconfigure.target, ChangeLog-2000: Fix spelling errors.\n\nFrom-SVN: r47291", "tree": {"sha": "0964bed1b243c87e49965682c6ac6d686a4f5186", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0964bed1b243c87e49965682c6ac6d686a4f5186"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5504edb751bff4f5b2a493921466d04857494f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5504edb751bff4f5b2a493921466d04857494f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5504edb751bff4f5b2a493921466d04857494f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5504edb751bff4f5b2a493921466d04857494f4/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eac50d7a73bbc070770fbe81e837dbd589f5869c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eac50d7a73bbc070770fbe81e837dbd589f5869c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eac50d7a73bbc070770fbe81e837dbd589f5869c"}], "stats": {"total": 168, "additions": 94, "deletions": 74}, "files": [{"sha": "5df989bfd19ad6d1a024b323b83f602704814dc8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c5504edb751bff4f5b2a493921466d04857494f4", "patch": "@@ -1,5 +1,25 @@\n 2001-11-23  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n+\t* ChangeLog, docs/doxygen/maint.cfg.in, docs/doxygen/user.cfg.in,\n+\tdocs/doxygen/doxygroups.cc, docs/doxygen/Intro.3,\n+\tdocs/html/17_intro/BUGS, docs/html/17_intro/C++STYLE,\n+\tdocs/html/17_intro/CHECKLIST, docs/html/17_intro/DESIGN,\n+\tdocs/html/17_intro/howto.html, docs/html/17_intro/porting.html,\n+\tdocs/html/17_intro/porting.texi, docs/html/18_support/howto.html,\n+\tdocs/html/19_diagnostics/howto.html, docs/html/20_util/howto.html,\n+\tdocs/html/21_strings/howto.html,\n+\tdocs/html/23_containers/howto.html,\n+\tdocs/html/26_numerics/howto.html, docs/html/27_io/howto.html,\n+\tdocs/html/27_io/binary_iostreams_kuehl.txt,\n+\tdocs/html/ext/sgiexts.html, docs/html/faq/index.html,\n+\tdocs/html/faq/index.txt, testsuite/24_iterators/iterator.cc,\n+\tinclude/bits/basic_file.h, include/bits/locale_facets.h,\n+\tinclude/bits/locale_facets.tcc, include/bits/std_sstream.h,\n+\tinclude/ext/ropeimpl.h, include/ext/stl_rope.h,\n+\tlibsupc++/tinfo.cc, libsupc++/cxxabi.h, libsupc++/typeinfo,\n+\tlibsupc++/eh_throw.cc, acinclude.m4, aclocal.m4, configure,\n+\tconfigure.target, ChangeLog-2000: Fix spelling errors.\n+\n \t* config/locale/moneypunct_members_gnu.cc,\n \tinclude/bits/locale_facets.h: Fix spelling errors.\n "}, {"sha": "d21b530839b65f4a3fdcb53d15bb54ccaff7b0bb", "filename": "libstdc++-v3/ChangeLog-2000", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2FChangeLog-2000", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2FChangeLog-2000", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog-2000?ref=c5504edb751bff4f5b2a493921466d04857494f4", "patch": "@@ -873,7 +873,7 @@\n 2000-11-23  Gabriel Dos Reis  <gdr@codesourcery.com>\n \n \t* include/bits/ios_base.h (ios_base::failure::~failure,\n-\tios_base::failure::what): Move defintion to ...\n+\tios_base::failure::what): Move definition to ...\n \n \t* src/ios.cc (ios_base::failure::~failure): ... here.\n \tsrc/ios.cc (ios::failure::what): Likewise.\n@@ -2043,7 +2043,7 @@ Thu Nov  2 10:11:45 2000  Mark P Mitchell  <mark@codesourcery.com>\n \n \t* acinclude.m4 (GLIBCPP_CHECK_OS): Link to os_defines.h.\n \t* aclocal.m4: Regenerate.\n-\t* config/os/*/bits/os_defintes: Adjust copyright dates.\n+\t* config/os/*/bits/os_defines: Adjust copyright dates.\n \t\n 2000-10-08  Phil Edwards  <pme@sources.redhat.com>\n \n@@ -2768,7 +2768,7 @@ Thu Nov  2 10:11:45 2000  Mark P Mitchell  <mark@codesourcery.com>\n \t__codecvt_abstract_base in an attempt to point some light this way...\n \tMove __enc_traits and codecvt bits to codecvt.h.\n \t* src/locale-inst.cc: Remove codecvt<wchar_t, wchar_t, mbstate_t>\n-\texplicit instantiation. Separate out codecvt instantations, simplify.\n+\texplicit instantiation. Separate out codecvt instantiations, simplify.\n \t* src/locale.cc: Move codecvt bits to codecvt.cc\n \n 2000-08-15  Alexandre Oliva  <aoliva@redhat.com>\n@@ -4796,7 +4796,7 @@ Thu Nov  2 10:11:45 2000  Mark P Mitchell  <mark@codesourcery.com>\n \t(ctype<wchar_t>): Same.\n \tMove _S_touppper to _M_toupper and initialize in ctor.\n \tMove _S_tolower  to _M_tolower and initialize in ctor.\t\n-\tMove _S_table to _M_ctable and intialize in ctor.\n+\tMove _S_table to _M_ctable and initialize in ctor.\n \t* bits/locale_facets.h (std): And here.\n \t* src/locale.cc (std): Tweak.\n \t* config/gnu-linux/ctype.cc: Change initialization here.\n@@ -4807,7 +4807,7 @@ Thu Nov  2 10:11:45 2000  Mark P Mitchell  <mark@codesourcery.com>\n \t* bits/localefwd.h: Tweak.\n \t* bits/std_streambuf.h: Tweak formatting.\n \n-\t* testsuite/27_io/filebuf.cc: Remove BUFSIZ dependancies.\n+\t* testsuite/27_io/filebuf.cc: Remove BUFSIZ dependencies.\n \n 2000-03-05  Chip Salzenberg  <chip@valinux.com>\n \n@@ -4822,7 +4822,7 @@ Thu Nov  2 10:11:45 2000  Mark P Mitchell  <mark@codesourcery.com>\n         * std/strstream:  New file.\n         * stl/bits/std_strstream.h:  New file.\n         * bits/std_streambuf.h:  Add public access.\n-        * src/Makefile.am:  Add strstream sources to list of dependancies.\n+        * src/Makefile.am:  Add strstream sources to list of dependencies.\n         * src/Makefile.in:  Regenerate.\n \n 2000-03-03 2000  Gabriel Dos Reis  <dosreis@cmla.ens-cachan.fr>\n@@ -5318,7 +5318,7 @@ Thu Nov  2 10:11:45 2000  Mark P Mitchell  <mark@codesourcery.com>\n \t* math/complex-stub.h (nan): And here.\n \t\n \t* Makefile.am (rebuild-stamp): Remove libio and libio\n-\tdependancies.  Plan to take out libio subdir and just merge with\n+\tdependencies.  Plan to take out libio subdir and just merge with\n \tlibio in top level gcc directory. Of course, this assumes there is\n \ta libio in the top level directory (ie ../src_dir). This will\n \tprobably change the way this library is configured by default.\n@@ -5928,7 +5928,7 @@ Thu Nov  2 10:11:45 2000  Mark P Mitchell  <mark@codesourcery.com>\n 1999-12-08  Benjamin Kosnik  <bkoz@cygnus.com>\n \n \t* bits/sstream.tcc (stringbuf::seekoff): Long overdue revamp. Make\n-\tin and out buffers update independantly.\n+\tin and out buffers update independently.\n \n \t* bits/basic_ios.h: Minor formatting.\n \t* bits/fstream.tcc (std): Fix indentation.\n@@ -7161,7 +7161,7 @@ Thu Nov  2 10:11:45 2000  Mark P Mitchell  <mark@codesourcery.com>\n \t* bits/std_sstream.h (_M_init_stringbuf): New function.\n \t* bits/sstream.tcc: Tweak.\n \t\n-\t* docs/27_io/iostreams_heirarchy.pdf: New file.\n+\t* docs/27_io/iostreams_hierarchy.pdf: New file.\n \t\n \t* docs/17_intro/CHECKLIST (basic_string<char>): Validation and\n \tacceptance. Wooo-hoo!\n@@ -7611,7 +7611,7 @@ Thu Nov  2 10:11:45 2000  Mark P Mitchell  <mark@codesourcery.com>\n  \tconverting \"long double\" to struct long_double. Probably should be\n  \tdone with one macro (HAVE_STRTOLD) at configure time.\n \n-\t* bits/std_cmath.h: Comment out pow(double, int) defintion as\n+\t* bits/std_cmath.h: Comment out pow(double, int) definition as\n  \tgives re-declaration under hpux10.20. Revert previous change, as\n  \tkills linux/x86, solaris 2.7, hpux builds. These should be done\n  \tusing autoconf, see std_cctype.h and the solutions started in\n@@ -8804,7 +8804,7 @@ Thu Nov  2 10:11:45 2000  Mark P Mitchell  <mark@codesourcery.com>\n \n \t* bits/char_traits.h: Remove fpos definitions from here. . .\n \t* bits/fpos.h: New file, put them here. Eventually, this may allow\n-\tthe severing of char_traits and fpos dependancies.\n+\tthe severing of char_traits and fpos dependencies.\n \t* src/Makefile.in: Add fpos.h.\n \t* src/Makefile.am: Ditto.\n \t* bits/std_string.h: Add fpos.h include here.\n@@ -9698,7 +9698,7 @@ Thu Nov  2 10:11:45 2000  Mark P Mitchell  <mark@codesourcery.com>\n \n \t* bits/basic_string.h: Disable non-standard ctor declarations.\n \t* bits/string.tcc: Disable definitions as well.\n-\t* src/string.cc: Disable <ios> dependancies.\n+\t* src/string.cc: Disable <ios> dependencies.\n \t* bits/sbuf_iter.h (std): Add default to template parameter for\n \tostreambuf_iterator and istreambuf_iterator.\n \t* bits/std_iosfwd.h: Change istreambuf_iterator to"}, {"sha": "5159d00d36de5d5ec6d535b8f3299f35ca6c179b", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=c5504edb751bff4f5b2a493921466d04857494f4", "patch": "@@ -173,8 +173,8 @@ LIB_AC_PROG_CXX\n   # at least currently, we never actually build a program, so we never\n   # need to use $(EXEEXT).  Moreover, the test for EXEEXT normally\n   # fails, because we are probably configuring with a cross compiler\n-  # which cant create executables.  So we include AC_EXEEXT to keep\n-  # automake happy, but we dont execute it, since we dont care about\n+  # which can't create executables.  So we include AC_EXEEXT to keep\n+  # automake happy, but we don't execute it, since we don't care about\n   # the result.\n   if false; then\n     # autoconf 2.50 runs AC_EXEEXT by default, and the macro expands"}, {"sha": "205b321a65b90d01f28aed6fadc9036434712c98", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=c5504edb751bff4f5b2a493921466d04857494f4", "patch": "@@ -185,8 +185,8 @@ LIB_AC_PROG_CXX\n   # at least currently, we never actually build a program, so we never\n   # need to use $(EXEEXT).  Moreover, the test for EXEEXT normally\n   # fails, because we are probably configuring with a cross compiler\n-  # which cant create executables.  So we include AC_EXEEXT to keep\n-  # automake happy, but we dont execute it, since we dont care about\n+  # which can't create executables.  So we include AC_EXEEXT to keep\n+  # automake happy, but we don't execute it, since we don't care about\n   # the result.\n   if false; then\n     # autoconf 2.50 runs AC_EXEEXT by default, and the macro expands"}, {"sha": "c640ec8cd5d3fbfc67eec389ebeba8b84d200ce6", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=c5504edb751bff4f5b2a493921466d04857494f4", "patch": "@@ -1627,8 +1627,8 @@ fi\n   # at least currently, we never actually build a program, so we never\n   # need to use $(EXEEXT).  Moreover, the test for EXEEXT normally\n   # fails, because we are probably configuring with a cross compiler\n-  # which cant create executables.  So we include AC_EXEEXT to keep\n-  # automake happy, but we dont execute it, since we dont care about\n+  # which can't create executables.  So we include AC_EXEEXT to keep\n+  # automake happy, but we don't execute it, since we don't care about\n   # the result.\n   if false; then\n     # autoconf 2.50 runs AC_EXEEXT by default, and the macro expands"}, {"sha": "ad899e9893624c5c43806edba11dec906dc8aa4d", "filename": "libstdc++-v3/configure.target", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fconfigure.target", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fconfigure.target", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.target?ref=c5504edb751bff4f5b2a493921466d04857494f4", "patch": "@@ -113,7 +113,7 @@ case \"${target_os}\" in\n esac\n \n \n-# Set any flags dependant on the full target triplet.\n+# Set any flags dependent on the full target triplet.\n # THIS TABLE IS SORTED.  KEEP IT THAT WAY.\n case \"${target}\" in\n    *-*-aix[456789]*)"}, {"sha": "52998c9fdd4fab822d17c73b4518101fe7e33c88", "filename": "libstdc++-v3/docs/doxygen/Intro.3", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2FIntro.3", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2FIntro.3", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2FIntro.3?ref=c5504edb751bff4f5b2a493921466d04857494f4", "patch": "@@ -66,7 +66,7 @@ lB lB lB lB.\n <complex>    <fstream>     <memory>    <vector>\n <csetjmp>    <functional>  <numeric>\n .TE\n-.SS Backwards-Compatability Headers\n+.SS Backwards-Compatibility Headers\n For GCC 3.0 these headers will be found automatically, unless you instruct\n the compiler otherwise.  You should not depend on this, instead you should\n read FAQ 5.4 and use a"}, {"sha": "de304f13382f3ab6374f75c68e2e2b327ec709f8", "filename": "libstdc++-v3/docs/doxygen/doxygroups.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fdoxygroups.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fdoxygroups.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fdoxygroups.cc?ref=c5504edb751bff4f5b2a493921466d04857494f4", "patch": "@@ -67,7 +67,7 @@ The differences between sequences are usually due to one or both of the\n As an example of the first case, @c vector is required to use a contiguous\n memory layout, while other sequences such as @c deque are not.\n \n-The prime reason for chosing one sequence over another should be based on\n+The prime reason for choosing one sequence over another should be based on\n the second category of differences, algorithmic complexity.  For example, if\n you need to perform many inserts and removals from the middle of a sequence,\n @c list would be ideal.  But if you need to perform constant-time access to"}, {"sha": "71801e6120acb00e8e8baf34a8f38b4dc47b8335", "filename": "libstdc++-v3/docs/doxygen/maint.cfg.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fmaint.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fmaint.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fmaint.cfg.in?ref=c5504edb751bff4f5b2a493921466d04857494f4", "patch": "@@ -140,7 +140,7 @@ STRIP_CODE_COMMENTS    = YES\n # file names in lower case letters. If set to YES upper case letters are also \n # allowed. This is useful if you have classes or files whose names only differ \n # in case and if your file system supports case sensitive file names. Windows \n-# users are adviced to set this option to NO.\n+# users are advised to set this option to NO.\n \n CASE_SENSE_NAMES       = YES\n "}, {"sha": "b9d192a53c6f8f14163c79d45f1279a123f1ba9b", "filename": "libstdc++-v3/docs/doxygen/user.cfg.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fuser.cfg.in?ref=c5504edb751bff4f5b2a493921466d04857494f4", "patch": "@@ -144,7 +144,7 @@ STRIP_CODE_COMMENTS    = YES\n # file names in lower case letters. If set to YES upper case letters are also \n # allowed. This is useful if you have classes or files whose names only differ \n # in case and if your file system supports case sensitive file names. Windows \n-# users are adviced to set this option to NO.\n+# users are advised to set this option to NO.\n \n CASE_SENSE_NAMES       = NO\n "}, {"sha": "04e4bc8062367c182eaf9aeafd45bd3f3f20229d", "filename": "libstdc++-v3/docs/html/17_intro/BUGS", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FBUGS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FBUGS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FBUGS?ref=c5504edb751bff4f5b2a493921466d04857494f4", "patch": "@@ -5,7 +5,7 @@\n \n - _GLIBCPP_HAS_BUILTIN_SINF: We should still hold out for a cleaner solution the is currenly the case in bits/std_cmath.h. \n \n-- there may be one set of remaining string bugs, dependant on final\n+- there may be one set of remaining string bugs, dependent on final\n clarification of the string::find technicalities when finding in an\n empty string or using an empty string for an argument. At the very\n least, v-3 has interpreted the standard in a way that is in opposition"}, {"sha": "46fe3f3f160c88e29fcdcc34097e6d28c1cce08c", "filename": "libstdc++-v3/docs/html/17_intro/C++STYLE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FC%2B%2BSTYLE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FC%2B%2BSTYLE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FC%2B%2BSTYLE?ref=c5504edb751bff4f5b2a493921466d04857494f4", "patch": "@@ -122,7 +122,7 @@ Notable areas of divergence from what may be previous local practice\n     //\n   }\n \n-09. Member functions declarations and defintions\n+09. Member functions declarations and definitions\n    Keywords such as extern, static, export, explicit, inline, etc\n    go on the line above the function name. Thus\n "}, {"sha": "9d3f80d3e36dcb1dce883b9877e6671dd8adf94c", "filename": "libstdc++-v3/docs/html/17_intro/CHECKLIST", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FCHECKLIST", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FCHECKLIST", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FCHECKLIST?ref=c5504edb751bff4f5b2a493921466d04857494f4", "patch": "@@ -958,7 +958,7 @@ T     X* get() const throw();\n T     X* release() throw();\n T     void reset(X* p =0) throw();\n \n-      // _lib.auto.ptr.conv_ converions:\n+      // _lib.auto.ptr.conv_ conversions:\n X     auto_ptr(auto_ptr_ref<X>) throw();\n X     template<class Y> operator auto_ptr_ref<Y>() throw();\n X     template<class Y> operator auto_ptr<Y>() throw();"}, {"sha": "5af3d9aed3be4442e4cf038fbee6acdca55e6b51", "filename": "libstdc++-v3/docs/html/17_intro/DESIGN", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FDESIGN", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FDESIGN", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FDESIGN?ref=c5504edb751bff4f5b2a493921466d04857494f4", "patch": "@@ -253,7 +253,7 @@ cases it may actually be excessive.\n \n To implement a library which does not use exceptions directly is\n not difficult given minor compiler support (to \"turn off\" exceptions\n-and ignore exception contructs), and results in no great library\n+and ignore exception constructs), and results in no great library\n maintenance difficulties.  To be precise, given \"-fno-exceptions\",\n the compiler should treat \"try\" blocks as ordinary blocks, and\n \"catch\" blocks as dead code to ignore or eliminate.  Compiler"}, {"sha": "3dce6f912a324c52a5de39da97da476db9625142", "filename": "libstdc++-v3/docs/html/17_intro/howto.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fhowto.html?ref=c5504edb751bff4f5b2a493921466d04857494f4", "patch": "@@ -124,7 +124,7 @@ <h2><a name=\"3\">The Standard C++ library and multithreading</a></h2>\n    </p>\n    <p>Here is a small link farm to threads (no pun) in the mail archives\n       that discuss the threading problem.  Each link is to the first\n-      relevent message in the thread; from there you can use\n+      relevant message in the thread; from there you can use\n       &quot;Thread Next&quot; to move down the thread.  This farm is in\n       latest-to-oldest order.\n       <ul>\n@@ -142,7 +142,7 @@ <h2><a name=\"3\">The Standard C++ library and multithreading</a></h2>\n       (A large selection of links to older messages has been removed; many\n       of the messages from 1999 were lost in a disk crash, and the few\n       people with access to the backup tapes have been too swamped with work\n-      to restore them.  Many of the points have been superceded anyhow.)\n+      to restore them.  Many of the points have been superseded anyhow.)\n    </p>\n    <p>This section will be updated as new and interesting issues come\n       to light."}, {"sha": "344fb4f31b3bb5c1ed34c22677db51e8e43bf538", "filename": "libstdc++-v3/docs/html/17_intro/porting.html", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting.html?ref=c5504edb751bff4f5b2a493921466d04857494f4", "patch": "@@ -140,7 +140,7 @@ <h1>Operating system</h1>\n <h1>Character types</h1>\n \n <p>The library requires that you provide three header files to implement\n-character classification, analagous to that provided by the C libraries\n+character classification, analogous to that provided by the C libraries\n <code>&lt;ctype.h&gt;</code> header.  You can model these on the files provided in\n <code>config/os/generic/bits</code>.  However, these files will almost\n certainly need some modification.\n@@ -149,7 +149,7 @@ <h1>Character types</h1>\n some very basic information about character classification.  The libstdc++-v3\n library assumes that your C library implements <code>&lt;ctype.h&gt;</code> by using\n a table (indexed by character code) containing integers, where each of\n-these integers is a bit-mask indicating whether the charcter is\n+these integers is a bit-mask indicating whether the character is\n upper-case, lower-case, alphabetic, etc.  The <code>bits/ctype_base.h</code>\n file gives the type of the integer, and the values of the various bit\n masks.  You will have to peer at your own <code>&lt;ctype.h&gt;</code> to figure out\n@@ -273,7 +273,7 @@ <h1>Character types</h1>\n <code>config/os/generic/ctype_inline.h</code> and use it on your system.\n \n <p>In detail, the functions provided test characters for particular\n-properties; they are analagous to the functions like <code>isalpha</code> and\n+properties; they are analogous to the functions like <code>isalpha</code> and\n <code>islower</code> provided by the C library.\n \n <p>The first function is implemented like this on IRIX:"}, {"sha": "d5d32b4a2f45023843e9eca4d3bfc83ae23e93e2", "filename": "libstdc++-v3/docs/html/17_intro/porting.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting.texi?ref=c5504edb751bff4f5b2a493921466d04857494f4", "patch": "@@ -176,7 +176,7 @@ starting point.\n @chapter Character types\n \n The library requires that you provide three header files to implement\n-character classification, analagous to that provided by the C libraries\n+character classification, analogous to that provided by the C libraries\n @file{<ctype.h>} header.  You can model these on the files provided in\n @file{config/os/generic/bits}.  However, these files will almost\n certainly need some modification.\n@@ -185,7 +185,7 @@ The first file to write is @file{bits/ctype_base.h}.  This file provides\n some very basic information about character classification.  The libstdc++-v3\n library assumes that your C library implements @file{<ctype.h>} by using\n a table (indexed by character code) containing integers, where each of\n-these integers is a bit-mask indicating whether the charcter is\n+these integers is a bit-mask indicating whether the character is\n upper-case, lower-case, alphabetic, etc.  The @file{bits/ctype_base.h}\n file gives the type of the integer, and the values of the various bit\n masks.  You will have to peer at your own @file{<ctype.h>} to figure out\n@@ -316,7 +316,7 @@ contains a few more functions.  On most systems, you can just copy\n @file{config/os/generic/ctype_inline.h} and use it on your system.\n \n In detail, the functions provided test characters for particular\n-properties; they are analagous to the functions like @code{isalpha} and\n+properties; they are analogous to the functions like @code{isalpha} and\n @code{islower} provided by the C library.\n \n The first function is implemented like this on IRIX:"}, {"sha": "13adbfd56fcb69852fd4b08053a508858cbbd18c", "filename": "libstdc++-v3/docs/html/18_support/howto.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F18_support%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F18_support%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F18_support%2Fhowto.html?ref=c5504edb751bff4f5b2a493921466d04857494f4", "patch": "@@ -182,7 +182,7 @@ <h2><a name=\"3\">Start and Termination</a></h2>\n               atexit(f2);\n             </pre>then at a call of <code>exit()</code>, f2 will be called, then\n             obj2 will be destroyed, then f1 will be called, and finally obj1\n-            will be destroyed.  If f1 or f2 allow an exception to propogate\n+            will be destroyed.  If f1 or f2 allow an exception to propagate\n             out of them, Bad Things happen.\n       </ol>\n    </p>"}, {"sha": "e85d57d3d3444414a8a245fc7decc5efea1053d5", "filename": "libstdc++-v3/docs/html/19_diagnostics/howto.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F19_diagnostics%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F19_diagnostics%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F19_diagnostics%2Fhowto.html?ref=c5504edb751bff4f5b2a493921466d04857494f4", "patch": "@@ -37,7 +37,7 @@ <h2><a name=\"1\">Adding data to exceptions</a></h2>\n    <p>The standard exception classes carry with them a single string as\n       data (usually describing what went wrong or where the 'throw' took\n       place).  It's good to remember that you can add your own data to\n-      these exceptions when extending the heirarchy:\n+      these exceptions when extending the hierarchy:\n    </p>\n    <pre>\n    struct My_Exception : public std::runtime_error"}, {"sha": "d90b5d6654ac6e92ac73f5d280e2fdc37e91b59f", "filename": "libstdc++-v3/docs/html/20_util/howto.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F20_util%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F20_util%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F20_util%2Fhowto.html?ref=c5504edb751bff4f5b2a493921466d04857494f4", "patch": "@@ -91,7 +91,7 @@ <h2><a name=\"1\"><code>auto_ptr</code> is not omnipotent</a></h2>\n <h2><a name=\"2\"><code>auto_ptr</code> inside container classes</a></h2>\n    <p>All of the <a href=\"../23_containers/howto.html\">containers</a>\n       described in the standard library require their contained types\n-      to have, among other things, a copy contructor like this:\n+      to have, among other things, a copy constructor like this:\n       <pre>\n     struct My_Type\n     {"}, {"sha": "6acd357c959831ef382b2bb45d51c34114fdb405", "filename": "libstdc++-v3/docs/html/21_strings/howto.html", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F21_strings%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F21_strings%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F21_strings%2Fhowto.html?ref=c5504edb751bff4f5b2a493921466d04857494f4", "patch": "@@ -37,7 +37,7 @@ <h2><a name=\"1\">MFC's CString</a></h2>\n       CString.  Often programmers realize that a standard portable\n       answer is better than a proprietary nonportable one, but in porting\n       their application from a Win32 platform, they discover that they\n-      are relying on special functons offered by the CString class.\n+      are relying on special functions offered by the CString class.\n    </p>\n    <p>Things are not as bad as they seem.  In\n       <a href=\"http://gcc.gnu.org/ml/gcc/1999-04n/msg00236.html\">this\n@@ -58,7 +58,7 @@ <h2><a name=\"1\">MFC's CString</a></h2>\n       stringstream classes.  These are the bridge between the iostream\n       hierarchy and the string class, and they operate with regular\n       streams seamlessly because they inherit from the iostream\n-      heirarchy.  An quick example:\n+      hierarchy.  An quick example:\n       <pre>\n    #include &lt;iostream&gt;\n    #include &lt;string&gt;\n@@ -315,7 +315,7 @@ <h2><a name=\"4\">Simple transformations</a></h2>\n    str.erase(notwhite+1); </pre>\n       Obviously, the calls to <code>find</code> could be inserted directly\n       into the calls to <code>erase</code>, in case your compiler does not\n-      optimize named temporaries out of existance.\n+      optimize named temporaries out of existence.\n    </p>\n    <p>Return <a href=\"#top\">to top of page</a> or\n       <a href=\"../faq/index.html\">to the FAQ</a>."}, {"sha": "29c721850418c9286814717c64e66e870c11cc50", "filename": "libstdc++-v3/docs/html/23_containers/howto.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F23_containers%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F23_containers%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F23_containers%2Fhowto.html?ref=c5504edb751bff4f5b2a493921466d04857494f4", "patch": "@@ -165,7 +165,7 @@ <h2><a name=\"2\">Variable-sized bitmasks</a></h2>\n       <code>bitset</code>\n       for the required number of bits, inside some wrapper functions with\n       unchanging signatures.  Have your program then call the\n-      compiler on that file using Position Independant Code, then open the\n+      compiler on that file using Position Independent Code, then open the\n       newly-created object file and load those wrapper functions.  You'll have\n       an instantiation of <code>bitset&lt;N&gt;</code> for the exact\n       <code>N</code>\n@@ -324,7 +324,7 @@ <h2><a name=\"4\">&quot;Hinting&quot; during insertion</a></h2>\n           be the entry in the container pointed to by <code>hint</code>, that\n           is, <code>h = *hint</code>.  Then the item being inserted should have\n           a key less than that of <code>h</code>, and greater than that of the\n-          item preceeding <code>h</code>.  The new item will be inserted\n+          item preceding <code>h</code>.  The new item will be inserted\n           between <code>h</code> and <code>h</code>'s predecessor.\n      </ul>\n    </p>"}, {"sha": "e15870f57bf2ec0082e1a1885e7ade4cfac54423", "filename": "libstdc++-v3/docs/html/26_numerics/howto.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F26_numerics%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F26_numerics%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F26_numerics%2Fhowto.html?ref=c5504edb751bff4f5b2a493921466d04857494f4", "patch": "@@ -133,7 +133,7 @@ <h2><a name=\"4\">C99</a></h2>\n    <p>The C99 features depend on the <code>--enable-c99</code> configure flag.\n       This flag is already on by default, but it can be disabled by the\n       user.  Also, the configuration machinery will disable it if the\n-      neccessary support for C99 (e.g., header files) cannot be found.\n+      necessary support for C99 (e.g., header files) cannot be found.\n    </p>\n    <p>As of GCC 3.0, C99 support includes classification functions\n       such as <code>isnormal</code>, <code>isgreater</code>,"}, {"sha": "44c78225306f6396c63d03c8700061331abc2c2f", "filename": "libstdc++-v3/docs/html/27_io/binary_iostreams_kuehl.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fbinary_iostreams_kuehl.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fbinary_iostreams_kuehl.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fbinary_iostreams_kuehl.txt?ref=c5504edb751bff4f5b2a493921466d04857494f4", "patch": "@@ -80,7 +80,7 @@ on the streams level.\n \n When I wrote the above paragraph about confirming your choice, I haven't\n read this question! As I said above: You told us what solution you have\n-choosen without stating what problem is solved. We cannot determine\n+chosen without stating what problem is solved. We cannot determine\n whether your choice is the right one. Actually, I'm pretty sure it is\n the wrong one but without seen the details I can't be certain.\n --"}, {"sha": "23489525aa4127a512c44aa36d6e014f4114fb28", "filename": "libstdc++-v3/docs/html/27_io/howto.html", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fhowto.html?ref=c5504edb751bff4f5b2a493921466d04857494f4", "patch": "@@ -113,7 +113,7 @@ <h2><a name=\"2\">The buffering is screwing up my program!</a></h2>\n       when the output stream is, in fact, a terminal and not a file\n       or some other device -- and <em>that</em> may not even be true\n       since C++ says nothing about files nor terminals.  All of that is\n-      system-dependant.  (The &quot;newline-buffer-flushing only occuring\n+      system-dependent.  (The &quot;newline-buffer-flushing only occurring\n       on terminals&quot; thing is mostly true on Unix systems, though.)\n    </p>\n    <p>Some people also believe that sending <code>endl</code> down an\n@@ -167,7 +167,7 @@ <h2><a name=\"2\">The buffering is screwing up my program!</a></h2>\n       arguments are the same as those for the Standard C I/O Library\n       function (a buffer area followed by its size).\n    </p>\n-   <p>A great deal of this is implementation-dependant.  For example,\n+   <p>A great deal of this is implementation-dependent.  For example,\n       <code>streambuf</code> does not specify any actions for its own \n       <code>setbuf()</code>-ish functions; the classes derived from\n       <code>streambuf</code> each define behavior that &quot;makes \n@@ -183,7 +183,7 @@ <h2><a name=\"2\">The buffering is screwing up my program!</a></h2>\n    <p>A last reminder:  there are usually more buffers involved than\n       just those at the language/library level.  Kernel buffers, disk\n       buffers, and the like will also have an effect.  Inspecting and\n-      changing those are system-dependant.\n+      changing those are system-dependent.\n    </p>\n    <p>Return <a href=\"#top\">to top of page</a> or\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n@@ -445,7 +445,7 @@ <h2><a name=\"8\">Pathetic performance?  Ditch C.</a></h2>\n       </pre>\n    </p>\n    <p>You must do this before performing any I/O via the C++ stream objects.\n-      Once you call this, the C++ streams will operate independantly of the\n+      Once you call this, the C++ streams will operate independently of the\n       (unused) C streams.  For GCC 3.0, this means that <code>cout</code> and\n       company will become fully buffered on their own.\n    </p>"}, {"sha": "636f9f8b83b34c24b4648bcc8d1ada0ca4875fa7", "filename": "libstdc++-v3/docs/html/ext/sgiexts.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fsgiexts.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fsgiexts.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fsgiexts.html?ref=c5504edb751bff4f5b2a493921466d04857494f4", "patch": "@@ -25,7 +25,7 @@ <h1 class=\"centered\"><a name=\"top\">SGI extensions to the library in\n    for a description).  Not every chapter may have extensions, and the\n    extensions may come and go.  Also, this page is incomplete because the\n    author is pressed for time.  Check back often; the latest change was on\n-   $Date: 2001/10/09 20:18:13 $ (UTC).\n+   $Date: 2001/10/11 18:41:47 $ (UTC).\n </p>\n \n <p>Descriptions range from the scanty to the verbose.  You should also check\n@@ -83,7 +83,7 @@ <h1 class=\"centered\"><a name=\"top\">SGI extensions to the library in\n \n <hr>\n <a name=\"ch23\"><h3>Chapter 23</h3></a>\n-<p>A few extensions and nods to backwards-compatability have been made with\n+<p>A few extensions and nods to backwards-compatibility have been made with\n    containers.  Those dealing with older SGI-style allocators are dealt with\n    elsewhere.  The remaining ones all deal with bits:\n </p>"}, {"sha": "7b5878553722dbd0c3f6d3b1f4f111a7638e0b0c", "filename": "libstdc++-v3/docs/html/faq/index.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html?ref=c5504edb751bff4f5b2a493921466d04857494f4", "patch": "@@ -137,7 +137,7 @@ <h2><a name=\"1_2\">1.2 Why should I use libstdc++?</a></h2>\n          (such as <code>string</code>, <code>vector&lt;&gt;</code>, iostreams,\n          and algorithms) will be freely available and fully compliant.\n          Programmers will no longer need to &quot;roll their own&quot;\n-         nor be worried about platform-specific incompatabilities.\n+         nor be worried about platform-specific incompatibilities.\n       </p>\n \n <hr>\n@@ -390,7 +390,7 @@ <h2><a name=\"3_1\">3.1 Can libstdc++-v3 be used with &lt;my\n       </p>\n       <p>Since the goal of ISO Standardization is for all C++\n          implementations to be able to share code, the final libstdc++\n-         should, in theory, be useable under any ISO-compliant\n+         should, in theory, be usable under any ISO-compliant\n          compiler.  It will still be targeted and optimized for\n          GCC/g++, however.\n       </p> "}, {"sha": "9aff7fb2d67b49fa233114bc106e1eda5599bffb", "filename": "libstdc++-v3/docs/html/faq/index.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.txt?ref=c5504edb751bff4f5b2a493921466d04857494f4", "patch": "@@ -89,7 +89,7 @@\n    That means that all of the Standard classes and functions (such as\n    string, vector<>, iostreams, and algorithms) will be freely available\n    and fully compliant. Programmers will no longer need to \"roll their\n-   own\" nor be worried about platform-specific incompatabilities.\n+   own\" nor be worried about platform-specific incompatibilities.\n      _________________________________________________________________\n \n 1.3 Who's in charge of it?\n@@ -314,7 +314,7 @@\n \n    Since the goal of ISO Standardization is for all C++ implementations\n    to be able to share code, the final libstdc++ should, in theory, be\n-   useable under any ISO-compliant compiler. It will still be targeted\n+   usable under any ISO-compliant compiler. It will still be targeted\n    and optimized for GCC/g++, however.\n      _________________________________________________________________\n "}, {"sha": "aa624eec448e4664711902d0ce5dd6214d4df529", "filename": "libstdc++-v3/include/bits/basic_file.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_file.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_file.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_file.h?ref=c5504edb751bff4f5b2a493921466d04857494f4", "patch": "@@ -254,7 +254,7 @@ namespace std\n     };\n } // namespace std\n \n-// Now include the bits that are dependant on the underlying I/O\n+// Now include the bits that are dependent on the underlying I/O\n // model chosen at configure time.\n #include <bits/basic_file_model.h>\n "}, {"sha": "8ea0ed547ef9b0a092bf1fa84a5a16f68e78d760", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=c5504edb751bff4f5b2a493921466d04857494f4", "patch": "@@ -502,7 +502,7 @@ namespace std\n \n       ~_Format_cache() throw() { }\n \n-      // Given a member of the ios heirarchy as an argument, extract\n+      // Given a member of the ios hierarchy as an argument, extract\n       // out all the current formatting information into a\n       // _Format_cache object and return a pointer to it.\n       static _Format_cache<_CharT>* "}, {"sha": "b4c7f7c69e741d06418cbfde716471a5a0cc9791", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=c5504edb751bff4f5b2a493921466d04857494f4", "patch": "@@ -1841,7 +1841,7 @@ namespace std\n       // NB: In IEE 1003.1-200x, and perhaps other locale models, it\n       // is possible that the format character will be longer than one\n       // character. Possibilities include 'E' or 'O' followed by a\n-      // format charcter: if __mod is not the default argument, assume\n+      // format character: if __mod is not the default argument, assume\n       // it's a valid modifier.\n       char_type __fmt[4];\n       __fmt[0] = __ctype.widen('%'); "}, {"sha": "d36070a8abe7fed70d35c0f82644607039e9b343", "filename": "libstdc++-v3/include/bits/std_sstream.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_sstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_sstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_sstream.h?ref=c5504edb751bff4f5b2a493921466d04857494f4", "patch": "@@ -90,7 +90,7 @@ namespace std\n \tif (_M_mode & ios_base::out)\n \t  {\n \t    // This is the deal: _M_string.size() is a value that\n-\t    // represents the size of the intial string that makes\n+\t    // represents the size of the initial string that makes\n \t    // _M_string, and may not be the correct size of the\n \t    // current stringbuf internal buffer.\n \t    __size_type __len = _M_string.size();"}, {"sha": "4d15517845fa165bc01f28931edc29b1aa0ca305", "filename": "libstdc++-v3/include/ext/ropeimpl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h?ref=c5504edb751bff4f5b2a493921466d04857494f4", "patch": "@@ -977,7 +977,7 @@ rope<_CharT,_Alloc>::_S_flatten(_RopeRep* __r, _CharT* __buffer)\n \t    }\n \tcase _RopeRep::_S_function:\n \tcase _RopeRep::_S_substringfn:\n-\t    // We dont yet do anything with substring nodes.\n+\t    // We don't yet do anything with substring nodes.\n \t    // This needs to be fixed before ropefiles will work well.\n \t    {\n \t\t_RopeFunction* __f = (_RopeFunction*)__r;"}, {"sha": "72bdeb3437303742d35818043646a2d5aab960f9", "filename": "libstdc++-v3/include/ext/stl_rope.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_rope.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_rope.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_rope.h?ref=c5504edb751bff4f5b2a493921466d04857494f4", "patch": "@@ -340,7 +340,7 @@ identity_element(_Rope_Concat_fn<_CharT, _Alloc>)\n // that doesn't work, since it makes it impossible to define generic\n // equality on rope iterators.  According to the draft standard, the\n // template parameters for such an equality operator cannot be inferred\n-// from the occurence of a member class as a parameter.\n+// from the occurrence of a member class as a parameter.\n // (SGI compilers in fact allow this, but the __result wouldn't be\n // portable.)\n // Similarly, some of the static member functions are member functions\n@@ -543,7 +543,7 @@ struct _Rope_RopeLeaf : public _Rope_RopeRep<_CharT,_Alloc> {\n   public:\n     // Apparently needed by VC++\n     // The data fields of leaves are allocated with some\n-    // extra space, to accomodate future growth and for basic\n+    // extra space, to accommodate future growth and for basic\n     // character types, to hold a trailing eos character.\n     enum { _S_alloc_granularity = 8 };\n     static size_t _S_rounded_up_size(size_t __n) {\n@@ -845,7 +845,7 @@ class _Rope_iterator_base\n   public:\n     typedef _Alloc _allocator_type; // used in _Rope_rotate, VC++ workaround\n     typedef _Rope_RopeRep<_CharT,_Alloc> _RopeRep;\n-        // Borland doesnt want this to be protected.\n+        // Borland doesn't want this to be protected.\n   protected:\n     enum { _S_path_cache_len = 4 }; // Must be <= 9.\n     enum { _S_iterator_buf_len = 15 };\n@@ -1321,7 +1321,7 @@ class rope : public _Rope_base<_CharT,_Alloc> {\n                                           const _CharT* __iter, size_t __slen)\n                 // As above, but one reference to __r is about to be\n                 // destroyed.  Thus the pieces may be recycled if all\n-                // relevent reference counts are 1.\n+                // relevant reference counts are 1.\n #           ifdef __GC\n                 // We can't really do anything since refcounts are unavailable.\n                 { return _S_concat_char_iter(__r, __iter, __slen); }"}, {"sha": "dd6b774116e1645937f525bb686b28add5296f0c", "filename": "libstdc++-v3/libsupc++/cxxabi.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h?ref=c5504edb751bff4f5b2a493921466d04857494f4", "patch": "@@ -45,7 +45,7 @@\n #ifdef __cplusplus\n \n // We use the compiler builtins __SIZE_TYPE__ and __PTRDIFF_TYPE__ instead of\n-// std::size_t and std::ptrdiff_t respectively. This makes us independant of\n+// std::size_t and std::ptrdiff_t respectively. This makes us independent of\n // the conformance level of <cstddef> and whether -fhonor-std was supplied.\n // <cstddef> is not currently available during compiler building anyway.\n // Including <stddef.h> would be wrong, as that would rudely place size_t in\n@@ -363,7 +363,7 @@ class __si_class_type_info\n class __vmi_class_type_info : public __class_type_info {\n /* abi defined member variables */\n public:\n-  unsigned int __flags;         /* details about the class heirarchy */\n+  unsigned int __flags;         /* details about the class hierarchy */\n   unsigned int __base_count;    /* number of direct bases */\n   __base_class_info const __base_info[1]; /* array of bases */\n   /* The array of bases uses the trailing array struct hack"}, {"sha": "407b829f24b15278023b89eacb3c596074d384ea", "filename": "libstdc++-v3/libsupc++/eh_throw.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_throw.cc?ref=c5504edb751bff4f5b2a493921466d04857494f4", "patch": "@@ -40,7 +40,7 @@ __gxx_exception_cleanup (_Unwind_Reason_Code code, _Unwind_Exception *exc)\n {\n   __cxa_exception *header = __get_exception_header_from_ue (exc);\n \n-  // If we havn't been caught by a foreign handler, then this is\n+  // If we haven't been caught by a foreign handler, then this is\n   // some sort of unwind error.  In that case just die immediately.\n   if (code != _URC_FOREIGN_EXCEPTION_CAUGHT)\n     __terminate (header->terminateHandler);"}, {"sha": "8559a25a0391460300974308e8a0614effad3822", "filename": "libstdc++-v3/libsupc++/tinfo.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.cc?ref=c5504edb751bff4f5b2a493921466d04857494f4", "patch": "@@ -172,12 +172,12 @@ __vmi_class_type_info::\n {}\n \n // __upcast_result is used to hold information during traversal of a class\n-// heirarchy when catch matching.\n+// hierarchy when catch matching.\n struct __class_type_info::__upcast_result\n {\n   const void *dst_ptr;        // pointer to caught object\n   __sub_kind part2dst;        // path from current base to target\n-  int src_details;            // hints about the source type heirarchy\n+  int src_details;            // hints about the source type hierarchy\n   const __class_type_info *base_type; // where we found the target,\n                               // if in vbase the __class_type_info of vbase\n                               // if a non-virtual base then 1\n@@ -189,14 +189,14 @@ struct __class_type_info::__upcast_result\n };\n \n // __dyncast_result is used to hold information during traversal of a class\n-// heirarchy when dynamic casting.\n+// hierarchy when dynamic casting.\n struct __class_type_info::__dyncast_result\n {\n   const void *dst_ptr;        // pointer to target object or NULL\n   __sub_kind whole2dst;       // path from most derived object to target\n   __sub_kind whole2src;       // path from most derived object to sub object\n   __sub_kind dst2src;         // path from target to sub object\n-  int whole_details;          // details of the whole class heirarchy\n+  int whole_details;          // details of the whole class hierarchy\n   \n   public:\n   __dyncast_result (int details_ = __vmi_class_type_info::__flags_unknown_mask)\n@@ -483,7 +483,7 @@ __do_dyncast (ptrdiff_t src2dst,\n                   || !(result.whole_details & __diamond_shaped_mask)))\n             {\n               // We already found SRC_PTR as a base of most derived, and\n-              // either it was non-virtual, or the whole heirarchy is\n+              // either it was non-virtual, or the whole hierarchy is\n               // not-diamond shaped. Therefore if it is in either choice, it\n               // can only be in one of them, and we will already know.\n               if (old_sub_kind == __unknown)"}, {"sha": "3d9afc90470a59b7f84a4797b046194eedb50538", "filename": "libstdc++-v3/libsupc++/typeinfo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo?ref=c5504edb751bff4f5b2a493921466d04857494f4", "patch": "@@ -90,7 +90,7 @@ namespace std\n     // type. Uniqueness must use the _name value, not object address.\n     bool operator==(const type_info& __arg) const;\n #else\n-    /** Returns true if @c *this preceeds @c __arg in the implementation's\n+    /** Returns true if @c *this precedes @c __arg in the implementation's\n      *  collation order.  */\n     // In new abi we can rely on type_info's NTBS being unique,\n     // and therefore address comparisons are sufficient."}, {"sha": "98aa8c0b2589fa250fdf2db045d97396eaf3793e", "filename": "libstdc++-v3/testsuite/24_iterators/iterator.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fiterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5504edb751bff4f5b2a493921466d04857494f4/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fiterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fiterator.cc?ref=c5504edb751bff4f5b2a493921466d04857494f4", "patch": "@@ -1,4 +1,4 @@\n-// 24.1.5 Random accesss iterators\n+// 24.1.5 Random access iterators\n // 24.3.1 Iterator traits\n // (basic_string and vector implementations)\n //"}]}