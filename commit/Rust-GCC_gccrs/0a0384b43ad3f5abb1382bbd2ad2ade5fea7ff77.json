{"sha": "0a0384b43ad3f5abb1382bbd2ad2ade5fea7ff77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGEwMzg0YjQzYWQzZjVhYmIxMzgyYmJkMmFkMmFkZTVmZWE3ZmY3Nw==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2019-02-22T10:51:20Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2019-02-22T10:51:20Z"}, "message": "[libgomp] In OpenACC testing, cycle though all offload targets\n\n... instead of through offload plugins.\n\n\tlibgomp/\n\t* plugin/configfrag.ac: Populate and AC_SUBST offload_targets.\n\t* testsuite/libgomp-test-support.exp.in: Adjust.\n\t* testsuite/lib/libgomp.exp: Likewise.  Don't populate\n\topenacc_device_types_s.\n\t(offload_target_to_openacc_device_type): New proc.\n\t* testsuite/libgomp.oacc-c++/c++.exp: Adjust.\n\t* testsuite/libgomp.oacc-c/c.exp: Likewise.\n\t* testsuite/libgomp.oacc-fortran/fortran.exp: Likewise.\n\t* Makefile.in: Regenerate.\n\t* configure: Likewise.\n\t* testsuite/Makefile.in: Likewise.\n\nFrom-SVN: r269108", "tree": {"sha": "b6b0847e784e9606c84e27b44db790b4e3bf86fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6b0847e784e9606c84e27b44db790b4e3bf86fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a0384b43ad3f5abb1382bbd2ad2ade5fea7ff77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a0384b43ad3f5abb1382bbd2ad2ade5fea7ff77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a0384b43ad3f5abb1382bbd2ad2ade5fea7ff77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a0384b43ad3f5abb1382bbd2ad2ade5fea7ff77/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ee332b4a9a19552d160a23155f59b11692d8f07e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee332b4a9a19552d160a23155f59b11692d8f07e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee332b4a9a19552d160a23155f59b11692d8f07e"}], "stats": {"total": 134, "additions": 86, "deletions": 48}, "files": [{"sha": "53a5511b0330f27c9841f20515e885e65fe67f6d", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a0384b43ad3f5abb1382bbd2ad2ade5fea7ff77/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a0384b43ad3f5abb1382bbd2ad2ade5fea7ff77/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=0a0384b43ad3f5abb1382bbd2ad2ade5fea7ff77", "patch": "@@ -1,5 +1,17 @@\n 2019-02-22  Thomas Schwinge  <thomas@codesourcery.com>\n \n+\t* plugin/configfrag.ac: Populate and AC_SUBST offload_targets.\n+\t* testsuite/libgomp-test-support.exp.in: Adjust.\n+\t* testsuite/lib/libgomp.exp: Likewise.  Don't populate\n+\topenacc_device_types_s.\n+\t(offload_target_to_openacc_device_type): New proc.\n+\t* testsuite/libgomp.oacc-c++/c++.exp: Adjust.\n+\t* testsuite/libgomp.oacc-c/c.exp: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/fortran.exp: Likewise.\n+\t* Makefile.in: Regenerate.\n+\t* configure: Likewise.\n+\t* testsuite/Makefile.in: Likewise.\n+\n \t* plugin/configfrag.ac: Populate and AC_SUBST offload_plugins\n \tinstead of offload_targets, and AC_DEFINE_UNQUOTED OFFLOAD_PLUGINS\n \tinstead of OFFLOAD_TARGETS."}, {"sha": "c7e63f120fdb502cfc37d454ae4bb9f136827be3", "filename": "libgomp/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a0384b43ad3f5abb1382bbd2ad2ade5fea7ff77/libgomp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a0384b43ad3f5abb1382bbd2ad2ade5fea7ff77/libgomp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FMakefile.in?ref=0a0384b43ad3f5abb1382bbd2ad2ade5fea7ff77", "patch": "@@ -494,6 +494,7 @@ multi_basedir = @multi_basedir@\n offload_additional_lib_paths = @offload_additional_lib_paths@\n offload_additional_options = @offload_additional_options@\n offload_plugins = @offload_plugins@\n+offload_targets = @offload_targets@\n oldincludedir = @oldincludedir@\n pdfdir = @pdfdir@\n prefix = @prefix@"}, {"sha": "b4bc4f4362892eb16c9fed1f301bca47f3450d44", "filename": "libgomp/configure", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a0384b43ad3f5abb1382bbd2ad2ade5fea7ff77/libgomp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a0384b43ad3f5abb1382bbd2ad2ade5fea7ff77/libgomp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfigure?ref=0a0384b43ad3f5abb1382bbd2ad2ade5fea7ff77", "patch": "@@ -667,6 +667,7 @@ PLUGIN_NVPTX_FALSE\n PLUGIN_NVPTX_TRUE\n offload_additional_lib_paths\n offload_additional_options\n+offload_targets\n offload_plugins\n PLUGIN_HSA_LIBS\n PLUGIN_HSA_LDFLAGS\n@@ -11392,7 +11393,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11395 \"configure\"\n+#line 11396 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11498,7 +11499,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11501 \"configure\"\n+#line 11502 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -15621,7 +15622,10 @@ PLUGIN_HSA_LIBS=\n \n # Parse '--enable-offload-targets', figure out the corresponding libgomp\n # plugins, and configure to find the corresponding offload compilers.\n+# 'offload_plugins' and 'offload_targets' will be populated in the same order.\n offload_plugins=\n+offload_targets=\n+\n \n offload_additional_options=\n offload_additional_lib_paths=\n@@ -15737,8 +15741,10 @@ rm -f core conftest.err conftest.$ac_objext \\\n       continue\n     elif test x\"$offload_plugins\" = x; then\n       offload_plugins=$tgt_plugin\n+      offload_targets=$tgt\n     else\n       offload_plugins=$offload_plugins,$tgt_plugin\n+      offload_targets=$offload_targets,$tgt\n     fi\n     # Configure additional search paths.\n     if test \"$tgt_plugin\" = hsa; then"}, {"sha": "9718ac752e2d51bd19b1cb53131da9dedbb4b551", "filename": "libgomp/plugin/configfrag.ac", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a0384b43ad3f5abb1382bbd2ad2ade5fea7ff77/libgomp%2Fplugin%2Fconfigfrag.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a0384b43ad3f5abb1382bbd2ad2ade5fea7ff77/libgomp%2Fplugin%2Fconfigfrag.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fconfigfrag.ac?ref=0a0384b43ad3f5abb1382bbd2ad2ade5fea7ff77", "patch": "@@ -139,8 +139,11 @@ AC_SUBST(PLUGIN_HSA_LIBS)\n \n # Parse '--enable-offload-targets', figure out the corresponding libgomp\n # plugins, and configure to find the corresponding offload compilers.\n+# 'offload_plugins' and 'offload_targets' will be populated in the same order.\n offload_plugins=\n+offload_targets=\n AC_SUBST(offload_plugins)\n+AC_SUBST(offload_targets)\n offload_additional_options=\n offload_additional_lib_paths=\n AC_SUBST(offload_additional_options)\n@@ -244,8 +247,10 @@ if test x\"$enable_offload_targets\" != x; then\n       continue\n     elif test x\"$offload_plugins\" = x; then\n       offload_plugins=$tgt_plugin\n+      offload_targets=$tgt\n     else\n       offload_plugins=$offload_plugins,$tgt_plugin\n+      offload_targets=$offload_targets,$tgt\n     fi\n     # Configure additional search paths.\n     if test \"$tgt_plugin\" = hsa; then"}, {"sha": "80315b15a7d58315ac9fbc6ff3e508c87ca49acb", "filename": "libgomp/testsuite/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a0384b43ad3f5abb1382bbd2ad2ade5fea7ff77/libgomp%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a0384b43ad3f5abb1382bbd2ad2ade5fea7ff77/libgomp%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2FMakefile.in?ref=0a0384b43ad3f5abb1382bbd2ad2ade5fea7ff77", "patch": "@@ -272,6 +272,7 @@ multi_basedir = @multi_basedir@\n offload_additional_lib_paths = @offload_additional_lib_paths@\n offload_additional_options = @offload_additional_options@\n offload_plugins = @offload_plugins@\n+offload_targets = @offload_targets@\n oldincludedir = @oldincludedir@\n pdfdir = @pdfdir@\n prefix = @prefix@"}, {"sha": "cb75e06c585269ad98cc1f1b7d0a32a50aa45948", "filename": "libgomp/testsuite/lib/libgomp.exp", "status": "modified", "additions": 24, "deletions": 27, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a0384b43ad3f5abb1382bbd2ad2ade5fea7ff77/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a0384b43ad3f5abb1382bbd2ad2ade5fea7ff77/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp?ref=0a0384b43ad3f5abb1382bbd2ad2ade5fea7ff77", "patch": "@@ -41,31 +41,6 @@ load_gcc_lib fortran-modules.exp\n # Try to load a test support file, built during libgomp configuration.\n load_file libgomp-test-support.exp\n \n-# Populate offload_plugins_s (offload plugins, separated by a space), and\n-# openacc_device_types_s (OpenACC device type names for suitable offload\n-# plugins, separated by a space).\n-set offload_plugins_s [split $offload_plugins \",\"]\n-set openacc_device_types_s {}\n-foreach offload_plugin $offload_plugins_s {\n-    # Translate to OpenACC names, or skip if not yet supported.\n-    switch $offload_plugin {\n-\tintelmic {\n-\t    continue\n-\t}\n-\tnvptx {\n-\t    set offload_plugin \"nvidia\"\n-\t}\n-\thsa {\n-\t    continue\n-\t}\n-\tdefault {\n-\t    error \"Unknown offload target: $offload_target_openacc\"\n-\t}\n-    }\n-    lappend openacc_device_types_s \"$offload_plugin\"\n-}\n-lappend openacc_device_types_s \"host\"\n-\n set dg-do-what-default run\n \n #\n@@ -325,6 +300,28 @@ proc libgomp_option_proc { option } {\n     }\n }\n \n+# Translate offload target to OpenACC device type.  Return the empty string if\n+# not supported, and 'host' for offload target 'disable'.\n+proc offload_target_to_openacc_device_type { offload_target } {\n+    switch -glob $offload_target {\n+\tdisable {\n+\t    return \"host\"\n+\t}\n+\thsa* {\n+\t    return \"\"\n+\t}\n+\t*-intelmic* {\n+\t    return \"\"\n+\t}\n+\tnvptx* {\n+\t    return \"nvidia\"\n+\t}\n+\tdefault {\n+\t    error \"Unknown offload target: $offload_target\"\n+\t}\n+    }\n+}\n+\n # Return 1 if offload device is available.\n proc check_effective_target_offload_device { } {\n     return [check_runtime_nocache offload_device_available_ {\n@@ -368,8 +365,8 @@ proc check_effective_target_offload_device_shared_as { } {\n # Return 1 if configured for 'nvptx' offloading.\n \n proc check_effective_target_openacc_nvidia_accel_configured { } {\n-    global offload_plugins\n-    if { ![string match \"*,nvptx,*\" \",$offload_plugins,\"] } {\n+    global offload_targets\n+    if { ![string match \"*,nvptx*,*\" \",$offload_targets,\"] } {\n         return 0\n     }\n     # PR libgomp/65099: Currently, we only support offloading in 64-bit"}, {"sha": "98fb442b5370e078e1e0d5c0c864774930d83a47", "filename": "libgomp/testsuite/libgomp-test-support.exp.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a0384b43ad3f5abb1382bbd2ad2ade5fea7ff77/libgomp%2Ftestsuite%2Flibgomp-test-support.exp.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a0384b43ad3f5abb1382bbd2ad2ade5fea7ff77/libgomp%2Ftestsuite%2Flibgomp-test-support.exp.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp-test-support.exp.in?ref=0a0384b43ad3f5abb1382bbd2ad2ade5fea7ff77", "patch": "@@ -3,3 +3,4 @@ set cuda_driver_lib \"@CUDA_DRIVER_LIB@\"\n set hsa_runtime_lib \"@HSA_RUNTIME_LIB@\"\n \n set offload_plugins \"@offload_plugins@\"\n+set offload_targets \"@offload_targets@\""}, {"sha": "29805c67bade204376c336309a8eea26535a3dd8", "filename": "libgomp/testsuite/libgomp.oacc-c++/c++.exp", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a0384b43ad3f5abb1382bbd2ad2ade5fea7ff77/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a0384b43ad3f5abb1382bbd2ad2ade5fea7ff77/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fc%2B%2B.exp?ref=0a0384b43ad3f5abb1382bbd2ad2ade5fea7ff77", "patch": "@@ -77,19 +77,24 @@ if { $lang_test_file_found } {\n \tset libstdcxx_includes \"\"\n     }\n \n-    # Test with available OpenACC device types.\n-    global openacc_device_type\n-    foreach openacc_device_type $openacc_device_types_s {\n+    # Test with all available offload targets, and with offloading disabled.\n+    foreach offload_target [concat [split $offload_targets \",\"] \"disable\"] {\n+\tglobal openacc_device_type\n+\tset openacc_device_type [offload_target_to_openacc_device_type $offload_target]\n \tset tagopt \"-DACC_DEVICE_TYPE_$openacc_device_type=1\"\n \n \tswitch $openacc_device_type {\n+\t    \"\" {\n+\t\tunsupported \"$subdir $offload_target offloading\"\n+\t\tcontinue\n+\t    }\n \t    host {\n \t\tset acc_mem_shared 1\n \t    }\n \t    nvidia {\n \t\tif { ![check_effective_target_openacc_nvidia_accel_present] } {\n \t\t    # Don't bother; execution testing is going to FAIL.\n-\t\t    untested \"$subdir $openacc_device_type offloading: supported, but hardware not accessible\"\n+\t\t    untested \"$subdir $offload_target offloading: supported, but hardware not accessible\"\n \t\t    continue\n \t\t}\n \n@@ -102,7 +107,7 @@ if { $lang_test_file_found } {\n \t\tset acc_mem_shared 0\n \t    }\n \t    default {\n-\t\terror \"Unknown OpenACC device type: $openacc_device_type\"\n+\t\terror \"Unknown OpenACC device type: $openacc_device_type (offload target: $offload_target)\"\n \t    }\n \t}\n \tset tagopt \"$tagopt -DACC_MEM_SHARED=$acc_mem_shared\"\n@@ -116,8 +121,8 @@ if { $lang_test_file_found } {\n \t# -O0 and -O2 only, to avoid testing times exploding too much, under\n \t# the assumption that between -O0 and -O[something] there is the\n \t# biggest difference in the overall structure of the generated code.\n-\tswitch $openacc_device_type {\n-\t    host {\n+\tswitch -glob $offload_target {\n+\t    disable {\n \t\tset-torture-options [list \\\n \t\t\t\t\t { -O2 } ]\n \t    }"}, {"sha": "2cd75be0cc7292ca1b7f573123b674fe67ad2177", "filename": "libgomp/testsuite/libgomp.oacc-c/c.exp", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a0384b43ad3f5abb1382bbd2ad2ade5fea7ff77/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2Fc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a0384b43ad3f5abb1382bbd2ad2ade5fea7ff77/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2Fc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2Fc.exp?ref=0a0384b43ad3f5abb1382bbd2ad2ade5fea7ff77", "patch": "@@ -38,21 +38,26 @@ set ld_library_path $always_ld_library_path\n append ld_library_path [gcc-set-multilib-library-path $GCC_UNDER_TEST]\n set_ld_library_path_env_vars\n \n-# Test with available OpenACC device types.\n+# Test with all available offload targets, and with offloading disabled.\n set SAVE_ALWAYS_CFLAGS \"$ALWAYS_CFLAGS\"\n-global openacc_device_type\n-foreach openacc_device_type $openacc_device_types_s {\n+foreach offload_target [concat [split $offload_targets \",\"] \"disable\"] {\n     set ALWAYS_CFLAGS \"$SAVE_ALWAYS_CFLAGS\"\n+    global openacc_device_type\n+    set openacc_device_type [offload_target_to_openacc_device_type $offload_target]\n     set tagopt \"-DACC_DEVICE_TYPE_$openacc_device_type=1\"\n \n     switch $openacc_device_type {\n+\t\"\" {\n+\t    unsupported \"$subdir $offload_target offloading\"\n+\t    continue\n+\t}\n \thost {\n \t    set acc_mem_shared 1\n \t}\n \tnvidia {\n \t    if { ![check_effective_target_openacc_nvidia_accel_present] } {\n \t\t# Don't bother; execution testing is going to FAIL.\n-\t\tuntested \"$subdir $openacc_device_type offloading: supported, but hardware not accessible\"\n+\t\tuntested \"$subdir $offload_target offloading: supported, but hardware not accessible\"\n \t\tcontinue\n \t    }\n \n@@ -65,7 +70,7 @@ foreach openacc_device_type $openacc_device_types_s {\n \t    set acc_mem_shared 0\n \t}\n \tdefault {\n-\t    error \"Unknown OpenACC device type: $openacc_device_type\"\n+\t    error \"Unknown OpenACC device type: $openacc_device_type (offload target: $offload_target)\"\n \t}\n     }\n     set tagopt \"$tagopt -DACC_MEM_SHARED=$acc_mem_shared\"\n@@ -79,8 +84,8 @@ foreach openacc_device_type $openacc_device_types_s {\n     # -O0 and -O2 only, to avoid testing times exploding too much, under\n     # the assumption that between -O0 and -O[something] there is the\n     # biggest difference in the overall structure of the generated code.\n-    switch $openacc_device_type {\n-\thost {\n+    switch -glob $offload_target {\n+\tdisable {\n \t    set-torture-options [list \\\n \t\t\t\t     { -O2 } ]\n \t}"}, {"sha": "b2baa73d91a42485950a2b438275a98357c6ff4c", "filename": "libgomp/testsuite/libgomp.oacc-fortran/fortran.exp", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a0384b43ad3f5abb1382bbd2ad2ade5fea7ff77/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Ffortran.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a0384b43ad3f5abb1382bbd2ad2ade5fea7ff77/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Ffortran.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Ffortran.exp?ref=0a0384b43ad3f5abb1382bbd2ad2ade5fea7ff77", "patch": "@@ -65,26 +65,31 @@ if { $lang_test_file_found } {\n     append ld_library_path [gcc-set-multilib-library-path $GCC_UNDER_TEST]\n     set_ld_library_path_env_vars\n \n-    # Test with available OpenACC device types.\n-    global openacc_device_type\n-    foreach openacc_device_type $openacc_device_types_s {\n+    # Test with all available offload targets, and with offloading disabled.\n+    foreach offload_target [concat [split $offload_targets \",\"] \"disable\"] {\n+\tglobal openacc_device_type\n+\tset openacc_device_type [offload_target_to_openacc_device_type $offload_target]\n \tset tagopt \"-DACC_DEVICE_TYPE_$openacc_device_type=1\"\n \n \tswitch $openacc_device_type {\n+\t    \"\" {\n+\t\tunsupported \"$subdir $offload_target offloading\"\n+\t\tcontinue\n+\t    }\n \t    host {\n \t\tset acc_mem_shared 1\n \t    }\n \t    nvidia {\n \t\tif { ![check_effective_target_openacc_nvidia_accel_present] } {\n \t\t    # Don't bother; execution testing is going to FAIL.\n-\t\t    untested \"$subdir $openacc_device_type offloading: supported, but hardware not accessible\"\n+\t\t    untested \"$subdir $offload_target offloading: supported, but hardware not accessible\"\n \t\t    continue\n \t\t}\n \n \t\tset acc_mem_shared 0\n \t    }\n \t    default {\n-\t\terror \"Unknown OpenACC device type: $openacc_device_type\"\n+\t\terror \"Unknown OpenACC device type: $openacc_device_type (offload target: $offload_target)\"\n \t    }\n \t}\n \tset tagopt \"$tagopt -DACC_MEM_SHARED=$acc_mem_shared\""}]}