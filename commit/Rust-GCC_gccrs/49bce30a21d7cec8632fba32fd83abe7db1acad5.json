{"sha": "49bce30a21d7cec8632fba32fd83abe7db1acad5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDliY2UzMGEyMWQ3Y2VjODYzMmZiYTMyZmQ4M2FiZTdkYjFhY2FkNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2008-04-26T07:40:04Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2008-04-26T07:40:04Z"}, "message": "mips.md (UNSPEC_COMPARE_AND_SWAP_12): New unspec_volitile.\n\ngcc/\n2008-04-23  David Daney  <ddaney@avtrex.com>\n\n\t* config/mips/mips.md (UNSPEC_COMPARE_AND_SWAP_12): New\n\tunspec_volitile.\n\t(UNSPEC_SYNC_OLD_OP, UNSPEC_SYNC_NEW_OP, UNSPEC_SYNC_EXCHANGE,\n\tUNSPEC_MEMORY_BARRIER, UNSPEC_SET_GOT_VERSION,\n\tUNSPEC_UPDATE_GOT_VERSION): Renumber.\n\t(sync_compare_and_swap<mode>): New expand for QI and HI modes.\n\t(compare_and_swap_12): New insn.\n\t* config/mips/mips-protos.h (mips_expand_compare_and_swap_12): Declare.\n\t* config/mips/mips.c (mips_force_binary): New function.\n\t(mips_emit_int_order_test, mips_expand_synci_loop): Use it.\n\t(mips_expand_compare_and_swap_12): New function.\n\t* config/mips/mips.h (MIPS_COMPARE_AND_SWAP_12): New macro.\n\ngcc/testsuite/\n\t* gcc.target/mips/gcc-have-sync-compare-and-swap-1.c: Expect\n\t__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 and\n\t__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 to be defined.\n\t* gcc.target/mips/gcc-have-sync-compare-and-swap-2.c: Likewise.\n\nFrom-SVN: r134695", "tree": {"sha": "cbe5674c673c745bd8140de43c196f316cde02a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbe5674c673c745bd8140de43c196f316cde02a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49bce30a21d7cec8632fba32fd83abe7db1acad5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49bce30a21d7cec8632fba32fd83abe7db1acad5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49bce30a21d7cec8632fba32fd83abe7db1acad5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49bce30a21d7cec8632fba32fd83abe7db1acad5/comments", "author": null, "committer": null, "parents": [{"sha": "a93a597ae7f0feecd9dcf9d19c538e70d48e848d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a93a597ae7f0feecd9dcf9d19c538e70d48e848d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a93a597ae7f0feecd9dcf9d19c538e70d48e848d"}], "stats": {"total": 182, "additions": 167, "deletions": 15}, "files": [{"sha": "2435b898a3d2aa1a72de660a4bc90421ee160940", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49bce30a21d7cec8632fba32fd83abe7db1acad5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49bce30a21d7cec8632fba32fd83abe7db1acad5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=49bce30a21d7cec8632fba32fd83abe7db1acad5", "patch": "@@ -1,3 +1,18 @@\n+2008-04-26  David Daney  <ddaney@avtrex.com>\n+\n+\t* config/mips/mips.md (UNSPEC_COMPARE_AND_SWAP_12): New\n+\tunspec_volitile.\n+\t(UNSPEC_SYNC_OLD_OP, UNSPEC_SYNC_NEW_OP, UNSPEC_SYNC_EXCHANGE,\n+\tUNSPEC_MEMORY_BARRIER, UNSPEC_SET_GOT_VERSION,\n+\tUNSPEC_UPDATE_GOT_VERSION): Renumber.\n+\t(sync_compare_and_swap<mode>): New expand for QI and HI modes.\n+\t(compare_and_swap_12): New insn.\n+\t* config/mips/mips-protos.h (mips_expand_compare_and_swap_12): Declare.\n+\t* config/mips/mips.c (mips_force_binary): New function.\n+\t(mips_emit_int_order_test, mips_expand_synci_loop): Use it.\n+\t(mips_expand_compare_and_swap_12): New function.\n+\t* config/mips/mips.h (MIPS_COMPARE_AND_SWAP_12): New macro.\n+\n 2008-04-25  Jan Hubicka  <jh@suse.cz>\n \n \tPR testsuite/35843"}, {"sha": "fbac8fcfd07a1592e9b4c665f8ef3f609172e443", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49bce30a21d7cec8632fba32fd83abe7db1acad5/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49bce30a21d7cec8632fba32fd83abe7db1acad5/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=49bce30a21d7cec8632fba32fd83abe7db1acad5", "patch": "@@ -292,5 +292,6 @@ extern bool mips_use_ins_ext_p (rtx, HOST_WIDE_INT, HOST_WIDE_INT);\n extern const char *mips16e_output_save_restore (rtx, HOST_WIDE_INT);\n extern bool mips16e_save_restore_pattern_p (rtx, HOST_WIDE_INT,\n \t\t\t\t\t    struct mips16e_save_restore_info *);\n+extern void mips_expand_compare_and_swap_12 (rtx, rtx, rtx, rtx);\n \n #endif /* ! GCC_MIPS_PROTOS_H */"}, {"sha": "86072acf4ab4e46b10cc30c864c19ea4e016e621", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 81, "deletions": 5, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49bce30a21d7cec8632fba32fd83abe7db1acad5/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49bce30a21d7cec8632fba32fd83abe7db1acad5/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=49bce30a21d7cec8632fba32fd83abe7db1acad5", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines used for MIPS code generation.\n    Copyright (C) 1989, 1990, 1991, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n    Free Software Foundation, Inc.\n    Contributed by A. Lichnewsky, lich@inria.inria.fr.\n    Changes by Michael Meissner, meissner@osf.org.\n@@ -2121,6 +2121,19 @@ mips_emit_binary (enum rtx_code code, rtx target, rtx op0, rtx op1)\n \t\t\t  gen_rtx_fmt_ee (code, GET_MODE (target), op0, op1)));\n }\n \n+/* Compute (CODE OP0 OP1) and store the result in a new register\n+   of mode MODE.  Return that new register.  */\n+\n+static rtx\n+mips_force_binary (enum machine_mode mode, enum rtx_code code, rtx op0, rtx op1)\n+{\n+  rtx reg;\n+\n+  reg = gen_reg_rtx (mode);\n+  mips_emit_binary (code, reg, op0, op1);\n+  return reg;\n+}\n+\n /* Copy VALUE to a register and return that register.  If new pseudos\n    are allowed, copy it into a new register, otherwise use DEST.  */\n \n@@ -3741,8 +3754,10 @@ mips_emit_int_order_test (enum rtx_code code, bool *invert_ptr,\n \t}\n       else if (invert_ptr == 0)\n \t{\n-\t  rtx inv_target = gen_reg_rtx (GET_MODE (target));\n-\t  mips_emit_binary (inv_code, inv_target, cmp0, cmp1);\n+\t  rtx inv_target;\n+\n+\t  inv_target = mips_force_binary (GET_MODE (target),\n+\t\t\t\t\t  inv_code, cmp0, cmp1);\n \t  mips_emit_binary (XOR, target, inv_target, const1_rtx);\n \t}\n       else\n@@ -5850,15 +5865,76 @@ mips_expand_synci_loop (rtx begin, rtx end)\n \n   emit_insn (gen_synci (begin));\n \n-  cmp = gen_reg_rtx (Pmode);\n-  mips_emit_binary (GTU, cmp, begin, end);\n+  cmp = mips_force_binary (Pmode, GTU, begin, end);\n \n   mips_emit_binary (PLUS, begin, begin, inc);\n \n   cmp_result = gen_rtx_EQ (VOIDmode, cmp, const0_rtx);\n   emit_jump_insn (gen_condjump (cmp_result, label));\n }\n \f\n+/* Expand a QI or HI mode compare_and_swap.  The operands are the same\n+   as for the generator function.  */\n+\n+void\n+mips_expand_compare_and_swap_12 (rtx result, rtx mem, rtx oldval, rtx newval)\n+{\n+  rtx orig_addr, memsi_addr, memsi, shift, shiftsi, unshifted_mask;\n+  rtx mask, inverted_mask, oldvalsi, old_shifted, newvalsi, new_shifted, res;\n+\n+  /* Compute the address of the containing SImode value.  */\n+  orig_addr = force_reg (Pmode, XEXP (mem, 0));\n+  memsi_addr = mips_force_binary (Pmode, AND, orig_addr,\n+\t\t\t\t  force_reg (Pmode, GEN_INT (-4)));\n+\n+  /* Create a memory reference for it.  */\n+  memsi = gen_rtx_MEM (SImode, memsi_addr);\n+  set_mem_alias_set (memsi, ALIAS_SET_MEMORY_BARRIER);\n+  MEM_VOLATILE_P (memsi) = MEM_VOLATILE_P (mem);\n+\n+  /* Work out the byte offset of the QImode or HImode value,\n+     counting from the least significant byte.  */\n+  shift = mips_force_binary (Pmode, AND, orig_addr, GEN_INT (3));\n+  if (TARGET_BIG_ENDIAN)\n+    mips_emit_binary (XOR, shift, shift,\n+\t\t      GEN_INT (GET_MODE (mem) == QImode ? 3 : 2));\n+\n+  /* Multiply by eight to convert the shift value from bytes to bits.  */\n+  mips_emit_binary (ASHIFT, shift, shift, GEN_INT (3));\n+\n+  /* Make the final shift an SImode value, so that it can be used in\n+     SImode operations.  */\n+  shiftsi = force_reg (SImode, gen_lowpart (SImode, shift));\n+\n+  /* Set MASK to an inclusive mask of the QImode or HImode value.  */\n+  unshifted_mask = GEN_INT (GET_MODE_MASK (GET_MODE (mem)));\n+  unshifted_mask = force_reg (SImode, unshifted_mask);\n+  mask = mips_force_binary (SImode, ASHIFT, unshifted_mask, shiftsi);\n+\n+  /* Compute the equivalent exclusive mask.  */\n+  inverted_mask = gen_reg_rtx (SImode);\n+  emit_insn (gen_rtx_SET (VOIDmode, inverted_mask,\n+\t\t\t  gen_rtx_NOT (SImode, mask)));\n+\n+  /* Shift the old value into place.  */\n+  oldvalsi = force_reg (SImode, gen_lowpart (SImode, oldval));\n+  old_shifted = mips_force_binary (SImode, ASHIFT, oldvalsi, shiftsi);\n+\n+  /* Do the same for the new value.  */\n+  newvalsi = force_reg (SImode, gen_lowpart (SImode, newval));\n+  new_shifted = mips_force_binary (SImode, ASHIFT, newvalsi, shiftsi);\n+\n+  /* Do the SImode atomic access.  */\n+  res = gen_reg_rtx (SImode);\n+  emit_insn (gen_compare_and_swap_12 (res, memsi, mask, inverted_mask,\n+\t\t\t\t      old_shifted, new_shifted));\n+\n+  /* Shift and convert the result.  */\n+  mips_emit_binary (AND, res, res, mask);\n+  mips_emit_binary (LSHIFTRT, res, res, shiftsi);\n+  mips_emit_move (result, gen_lowpart (GET_MODE (result), res));\n+}\n+\n /* Return true if it is possible to use left/right accesses for a\n    bitfield of WIDTH bits starting BITPOS bits into *OP.  When\n    returning true, update *OP, *LEFT and *RIGHT as follows:"}, {"sha": "cda433aa4f0a35f27199a1b259efb9595f31cc11", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49bce30a21d7cec8632fba32fd83abe7db1acad5/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49bce30a21d7cec8632fba32fd83abe7db1acad5/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=49bce30a21d7cec8632fba32fd83abe7db1acad5", "patch": "@@ -2904,6 +2904,30 @@ while (0)\n   \"\\tnop\\n\"\t\t\t\t\t\\\n   \"2:\\tsync%-%]%>%)\"\n \n+/* Return an asm string that atomically:\n+\n+     - Given that %2 contains a bit mask and %3 the inverted mask and\n+       that %4 and %5 have already been ANDed with $2.\n+\n+     - Compares the bits in memory reference %1 selected by mask %2 to\n+       register %4 and, if they are equal, changes the selected bits\n+       in memory to %5.\n+\n+     - Sets register %0 to the old value of memory reference %1.\n+ */\n+#define MIPS_COMPARE_AND_SWAP_12\t\t\\\n+  \"%(%<%[%|sync\\n\"\t\t\t\t\\\n+  \"1:\\tll\\t%0,%1\\n\"\t\t\t\t\\\n+  \"\\tand\\t%@,%0,%2\\n\"\t\t\t\t\\\n+  \"\\tbne\\t%@,%4,2f\\n\"\t\t\t\t\\\n+  \"\\tand\\t%@,%0,%3\\n\"\t\t\t\t\\\n+  \"\\tor\\t%@,%@,%5\\n\"\t\t\t\t\\\n+  \"\\tsc\\t%@,%1\\n\"\t\t\t\t\\\n+  \"\\tbeq\\t%@,%.,1b\\n\"\t\t\t\t\\\n+  \"\\tnop\\n\"\t\t\t\t\t\\\n+  \"\\tsync%-%]%>%)\\n\"\t\t\t\t\\\n+  \"2:\\n\"\n+\n /* Return an asm string that atomically:\n \n      - Sets memory reference %0 to %0 INSN %1."}, {"sha": "05adf2226d4b1322ba8355f77621ed43affebcaf", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49bce30a21d7cec8632fba32fd83abe7db1acad5/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49bce30a21d7cec8632fba32fd83abe7db1acad5/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=49bce30a21d7cec8632fba32fd83abe7db1acad5", "patch": "@@ -54,12 +54,13 @@\n    (UNSPEC_SYNCI\t\t35)\n    (UNSPEC_SYNC\t\t\t36)\n    (UNSPEC_COMPARE_AND_SWAP\t37)\n-   (UNSPEC_SYNC_OLD_OP\t\t38)\n-   (UNSPEC_SYNC_NEW_OP\t\t39)\n-   (UNSPEC_SYNC_EXCHANGE\t40)\n-   (UNSPEC_MEMORY_BARRIER\t41)\n-   (UNSPEC_SET_GOT_VERSION\t42)\n-   (UNSPEC_UPDATE_GOT_VERSION\t43)\n+   (UNSPEC_COMPARE_AND_SWAP_12\t38)\n+   (UNSPEC_SYNC_OLD_OP\t\t39)\n+   (UNSPEC_SYNC_NEW_OP\t\t40)\n+   (UNSPEC_SYNC_EXCHANGE\t41)\n+   (UNSPEC_MEMORY_BARRIER\t42)\n+   (UNSPEC_SET_GOT_VERSION\t43)\n+   (UNSPEC_UPDATE_GOT_VERSION\t44)\n    \n    (UNSPEC_ADDRESS_FIRST\t100)\n \n@@ -4447,6 +4448,34 @@\n }\n   [(set_attr \"length\" \"32\")])\n \n+(define_expand \"sync_compare_and_swap<mode>\"\n+  [(match_operand:SHORT 0 \"register_operand\")\n+   (match_operand:SHORT 1 \"memory_operand\")\n+   (match_operand:SHORT 2 \"general_operand\")\n+   (match_operand:SHORT 3 \"general_operand\")]\n+  \"GENERATE_LL_SC\"\n+{\n+  mips_expand_compare_and_swap_12 (operands[0], operands[1],\n+\t\t\t\t   operands[2], operands[3]);\n+  DONE;\n+})\n+\n+;; Helper insn for mips_expand_compare_and_swap_12.\n+(define_insn \"compare_and_swap_12\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=&d\")\n+\t(match_operand:SI 1 \"memory_operand\" \"+R\"))\n+   (set (match_dup 1)\n+\t(unspec_volatile:SI [(match_operand:SI 2 \"register_operand\" \"d\")\n+\t\t\t     (match_operand:SI 3 \"register_operand\" \"d\")\n+\t\t\t     (match_operand:SI 4 \"register_operand\" \"d\")\n+\t\t\t     (match_operand:SI 5 \"register_operand\" \"d\")]\n+\t\t\t    UNSPEC_COMPARE_AND_SWAP_12))]\n+  \"GENERATE_LL_SC\"\n+{\n+  return MIPS_COMPARE_AND_SWAP_12;\n+}\n+  [(set_attr \"length\" \"40\")])\n+\n (define_insn \"sync_add<mode>\"\n   [(set (match_operand:GPR 0 \"memory_operand\" \"+R,R\")\n \t(unspec_volatile:GPR"}, {"sha": "8f91bfd57526a6ab13f6bb2b3170b9b9b1bd504a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49bce30a21d7cec8632fba32fd83abe7db1acad5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49bce30a21d7cec8632fba32fd83abe7db1acad5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=49bce30a21d7cec8632fba32fd83abe7db1acad5", "patch": "@@ -1,3 +1,10 @@\n+2008-04-26  Richard Sandiford  <rsandifo@nildram.co.uk>\n+\n+\t* gcc.target/mips/gcc-have-sync-compare-and-swap-1.c: Expect\n+\t__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 and\n+\t__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 to be defined.\n+\t* gcc.target/mips/gcc-have-sync-compare-and-swap-2.c: Likewise.\n+\n 2008-04-25  Tobias Burnus  <burnus@net-b.de>\n \n \t* gfortran/array_constructor_23.f: Change REAL(10) into kind > 8."}, {"sha": "4c642258f7b98d17995ce4248c98545fc5b9038b", "filename": "gcc/testsuite/gcc.target/mips/gcc-have-sync-compare-and-swap-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49bce30a21d7cec8632fba32fd83abe7db1acad5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fgcc-have-sync-compare-and-swap-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49bce30a21d7cec8632fba32fd83abe7db1acad5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fgcc-have-sync-compare-and-swap-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fgcc-have-sync-compare-and-swap-1.c?ref=49bce30a21d7cec8632fba32fd83abe7db1acad5", "patch": "@@ -1,11 +1,11 @@\n /* { dg-do preprocess } */\n /* { dg-mips-options \"-mips2\" } */\n \n-#ifdef __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1\n+#if defined (__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1) == defined (__mips16)\n #error nonono\n #endif\n \n-#ifdef __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2\n+#if defined (__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2) == defined (__mips16)\n #error nonono\n #endif\n "}, {"sha": "4265e4167ba81cf3e0198a76db909fb2041b9a7e", "filename": "gcc/testsuite/gcc.target/mips/gcc-have-sync-compare-and-swap-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49bce30a21d7cec8632fba32fd83abe7db1acad5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fgcc-have-sync-compare-and-swap-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49bce30a21d7cec8632fba32fd83abe7db1acad5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fgcc-have-sync-compare-and-swap-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fgcc-have-sync-compare-and-swap-2.c?ref=49bce30a21d7cec8632fba32fd83abe7db1acad5", "patch": "@@ -1,11 +1,11 @@\n /* { dg-do preprocess } */\n /* { dg-mips-options \"-mgp64\" } */\n \n-#ifdef __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1\n+#if defined (__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1) == defined (__mips16)\n #error nonono\n #endif\n \n-#ifdef __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2\n+#if defined (__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2) == defined (__mips16)\n #error nonono\n #endif\n "}]}