{"sha": "98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThiODA2OTI0ZGY5YTdiYjkxM2NjNWNjMmQyZTdmZGM3ZTJhNWRlMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-02-18T21:01:03Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-02-18T21:01:03Z"}, "message": "re PR target/39179 (Wrong code in c++ for const members initialized in external file)\n\n        PR target/39179\n        * tree-ssa-ccp.c (get_symbol_constant_value): Don't assume zero\n        value if DECL_EXTERNAL.\n        * tree-sra.c (sra_walk_gimple_assign): Likewise.\n        * target.h (gcc_target::binds_local_p): Clarify module.\n        * tree.h (TREE_PUBLIC): Clarify module.\n\nFrom-SVN: r144270", "tree": {"sha": "0f64524f372d342649161f19523537146008f861", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f64524f372d342649161f19523537146008f861"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1e80963d6176df27cd61f268ec14392cda8a309a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e80963d6176df27cd61f268ec14392cda8a309a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e80963d6176df27cd61f268ec14392cda8a309a"}], "stats": {"total": 85, "additions": 69, "deletions": 16}, "files": [{"sha": "8f44f45a292a25065f204fc96fba47aa13b4f039", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0", "patch": "@@ -1,3 +1,12 @@\n+2009-02-18  Jason Merrill  <jason@redhat.com>\n+\n+\tPR target/39179\n+\t* tree-ssa-ccp.c (get_symbol_constant_value): Don't assume zero\n+\tvalue if DECL_EXTERNAL.\n+\t* tree-sra.c (sra_walk_gimple_assign): Likewise.\n+\t* target.h (gcc_target::binds_local_p): Clarify \"module\".\n+\t* tree.h (TREE_PUBLIC): Clarify \"module\".\n+\n 2009-02-17  Xuepeng Guo  <xuepeng.guo@intel.com>\n \n \tPR target/38891"}, {"sha": "3ca03d37a3afe61e714004954255637786133e01", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0", "patch": "@@ -1,3 +1,7 @@\n+2009-02-18  Jason Merrill  <jason@redhat.com>\n+\n+\t* cfns.h: Tweak pathname for cfns.gperf.\n+\n 2009-02-13  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/39070"}, {"sha": "e6d43d8acfb7d99f352d3201d0ba2c73b2091e1e", "filename": "gcc/cp/cfns.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0/gcc%2Fcp%2Fcfns.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0/gcc%2Fcp%2Fcfns.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcfns.h?ref=98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0", "patch": "@@ -1,5 +1,5 @@\n /* ANSI-C code produced by gperf version 3.0.1 */\n-/* Command-line: gperf -o -C -E -k '1-6,$' -j1 -D -N libc_name_p -L ANSI-C ../../gcc/gcc/cp/cfns.gperf  */\n+/* Command-line: gperf -o -C -E -k '1-6,$' -j1 -D -N libc_name_p -L ANSI-C ../../gcc/cp/cfns.gperf  */\n \n #if !((' ' == 32) && ('!' == 33) && ('\"' == 34) && ('#' == 35) \\\n       && ('%' == 37) && ('&' == 38) && ('\\'' == 39) && ('(' == 40) \\\n@@ -28,7 +28,7 @@\n #error \"gperf generated tables don't work with this execution character set. Please report a bug to <bug-gnu-gperf@gnu.org>.\"\n #endif\n \n-#line 1 \"../../gcc/gcc/cp/cfns.gperf\"\n+#line 1 \"../../gcc/cp/cfns.gperf\"\n \n #ifdef __GNUC__\n __inline"}, {"sha": "2452abc462252fdec2678c11e4357b1b256e15ee", "filename": "gcc/cp/ptree.c", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0/gcc%2Fcp%2Fptree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0/gcc%2Fcp%2Fptree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fptree.c?ref=98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0", "patch": "@@ -44,7 +44,23 @@ cxx_print_decl (FILE *file, tree node, int indent)\n   if (!CODE_CONTAINS_STRUCT (TREE_CODE (node), TS_DECL_COMMON)\n       || !DECL_LANG_SPECIFIC (node))\n     return;\n+  if (TREE_CODE (node) == FUNCTION_DECL)\n+    {\n+      int flags = TFF_DECL_SPECIFIERS|TFF_RETURN_TYPE\n+\t|TFF_FUNCTION_DEFAULT_ARGUMENTS|TFF_EXCEPTION_SPECIFICATION ;\n+      indent_to (file, indent + 3);\n+      fprintf (file, \" full-name \\\"%s\\\"\", decl_as_string (node, flags));\n+    }\n+  else if (TREE_CODE (node) == TEMPLATE_DECL)\n+    {\n+      indent_to (file, indent + 3);\n+      fprintf (file, \" full-name \\\"%s\\\"\",\n+\t       decl_as_string (node, TFF_TEMPLATE_HEADER));\n+    }\n+\n   indent_to (file, indent + 3);\n+  if (DECL_EXTERNAL (node) && DECL_NOT_REALLY_EXTERN (node))\n+    fprintf (file, \" not-really-extern\");\n   if (TREE_CODE (node) == FUNCTION_DECL\n       && DECL_PENDING_INLINE_INFO (node))\n     fprintf (file, \" pending-inline-info %p\",\n@@ -81,6 +97,9 @@ cxx_print_type (FILE *file, tree node, int indent)\n \n     case RECORD_TYPE:\n     case UNION_TYPE:\n+      indent_to (file, indent + 4);\n+      fprintf (file, \"full-name \\\"%s\\\"\",\n+\t       type_as_string (node, TFF_CLASS_KEY_OR_ENUM));\n       break;\n \n     default:\n@@ -97,7 +116,7 @@ cxx_print_type (FILE *file, tree node, int indent)\n   indent_to (file, indent + 3);\n \n   if (TYPE_NEEDS_CONSTRUCTING (node))\n-    fputs ( \"needs-constructor\", file);\n+    fputs ( \" needs-constructor\", file);\n   if (TYPE_HAS_NONTRIVIAL_DESTRUCTOR (node))\n     fputs (\" needs-destructor\", file);\n   if (TYPE_HAS_DEFAULT_CONSTRUCTOR (node))"}, {"sha": "10aaf4c171c3f97619fd532453396c0696a82fd0", "filename": "gcc/target.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0", "patch": "@@ -626,7 +626,7 @@ struct gcc_target\n   bool (* in_small_data_p) (const_tree);\n \n   /* True if EXP names an object for which name resolution must resolve\n-     to the current module.  */\n+     to the current executable or shared library.  */\n   bool (* binds_local_p) (const_tree);\n \n   /* Modify and return the identifier of a DECL's external name,"}, {"sha": "f052878791fa3f458ee7bafd75bebb5aec33f625", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0", "patch": "@@ -1,3 +1,8 @@\n+2009-02-18  Jason Merrill  <jason@redhat.com>\n+\n+\tPR target/39179\n+\t* g++.dg/opt/const6.C: New test.\n+\n 2009-02-18  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.dg/callabi/callabi.exp: Moved to ..."}, {"sha": "18d04625db2da1178c806ee1f0a5cf287e65b66a", "filename": "gcc/testsuite/g++.dg/init/const7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fconst7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fconst7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fconst7.C?ref=98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0", "patch": "@@ -9,5 +9,5 @@ short offsets[1] = {\n // This ensures that we get a dump whether or not the bug is present.\n void fn() { }\n \n-// { dg-final { scan-tree-dump-not \"initialization\"  \"gimple\" { xfail *-*-* } } }\n+// { dg-final { scan-tree-dump-not \"initialization\"  \"gimple\" } }\n // { dg-final { cleanup-tree-dump \"gimple\" } }"}, {"sha": "1a5c79bb173e73b8f47af9d5576cddb270fa76ed", "filename": "gcc/testsuite/g++.dg/opt/const6.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fconst6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fconst6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fconst6.C?ref=98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0", "patch": "@@ -0,0 +1,14 @@\n+// PR target/39179\n+// Make sure that we don't optimize away the load from K::k.\n+// { dg-options \"-O2\" }\n+// { dg-final { scan-assembler _ZN1K1kE } }\n+\n+struct K {\n+    static const unsigned k;\n+};\n+extern \"C\" void abort (void);\n+int main() {\n+    if ( K::k != 1 )\n+      abort ();\n+    return 1;\n+}"}, {"sha": "e01433b142dab7e6c5a9a87ca42fa453e71bae92", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0", "patch": "@@ -2585,18 +2585,20 @@ print_call_name (pretty_printer *buffer, const_tree node)\n   if (TREE_CODE (op0) == NON_LVALUE_EXPR)\n     op0 = TREE_OPERAND (op0, 0);\n \n+ again:\n   switch (TREE_CODE (op0))\n     {\n     case VAR_DECL:\n     case PARM_DECL:\n+    case FUNCTION_DECL:\n       dump_function_name (buffer, op0);\n       break;\n \n     case ADDR_EXPR:\n     case INDIRECT_REF:\n     case NOP_EXPR:\n-      dump_generic_node (buffer, TREE_OPERAND (op0, 0), 0, 0, false);\n-      break;\n+      op0 = TREE_OPERAND (op0, 0);\n+      goto again;\n \n     case COND_EXPR:\n       pp_string (buffer, \"(\");"}, {"sha": "abcca2b93f88c7c23ce65a7165b09fb59894d482", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0", "patch": "@@ -1008,6 +1008,7 @@ sra_walk_gimple_assign (gimple stmt, gimple_stmt_iterator *gsi,\n \t we'd been passed the constructor directly.  Invoke INIT.  */\n       else if (TREE_CODE (rhs) == VAR_DECL\n \t       && TREE_STATIC (rhs)\n+\t       && !DECL_EXTERNAL (rhs)\n \t       && TREE_READONLY (rhs)\n \t       && targetm.binds_local_p (rhs))\n \tfns->init (lhs_elt, DECL_INITIAL (rhs), gsi);"}, {"sha": "46272659b65a0a4dcca7a2762ff8d4302b0e6567", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0", "patch": "@@ -287,10 +287,11 @@ get_symbol_constant_value (tree sym)\n \t have zero as the initializer if they may not be\n \t overridden at link or run time.  */\n       if (!val\n+\t  && !DECL_EXTERNAL (sym)\n \t  && targetm.binds_local_p (sym)\n           && (INTEGRAL_TYPE_P (TREE_TYPE (sym))\n \t       || SCALAR_FLOAT_TYPE_P (TREE_TYPE (sym))))\n-        return fold_convert (TREE_TYPE (sym), integer_zero_node);\n+\treturn fold_convert (TREE_TYPE (sym), integer_zero_node);\n     }\n \n   return NULL_TREE;"}, {"sha": "29d3782119adcd624281c783daa942a6651e2d80", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0", "patch": "@@ -1195,9 +1195,9 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n  (CONSTANT_CLASS_P (EXPR) && TREE_OVERFLOW (EXPR))\n \n /* In a VAR_DECL, FUNCTION_DECL, NAMESPACE_DECL or TYPE_DECL,\n-   nonzero means name is to be accessible from outside this module.\n+   nonzero means name is to be accessible from outside this translation unit.\n    In an IDENTIFIER_NODE, nonzero means an external declaration\n-   accessible from outside this module was previously seen\n+   accessible from outside this translation unit was previously seen\n    for this name in an inner scope.  */\n #define TREE_PUBLIC(NODE) ((NODE)->base.public_flag)\n "}, {"sha": "083cf093f2507383438a1fda33462b49658ce0bf", "filename": "gcc/varasm.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=98b806924df9a7bb913cc5cc2d2e7fdc7e2a5de0", "patch": "@@ -4316,12 +4316,10 @@ initializer_constant_valid_p (tree value, tree endtype)\n \t}\n \n       /* Support narrowing pointer differences.  */\n-      if (TREE_CODE (value) == POINTER_PLUS_EXPR)\n-\t{\n-\t  ret = narrowing_initializer_constant_valid_p (value, endtype);\n-\t  if (ret != NULL_TREE)\n-\t    return ret;\n-\t}\n+      ret = narrowing_initializer_constant_valid_p (value, endtype);\n+      if (ret != NULL_TREE)\n+\treturn ret;\n+\n       break;\n \n     case MINUS_EXPR:"}]}