{"sha": "da7853cc18318966aafa5a3cf48aedc4e671404d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE3ODUzY2MxODMxODk2NmFhZmE1YTNjZjQ4YWVkYzRlNjcxNDA0ZA==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2017-09-26T10:32:58Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2017-09-26T10:32:58Z"}, "message": "S/390: Add widening vector mult lo/hi patterns\n\nAdd support for widening vector multiply lo/hi patterns.  These do not\ndirectly match on IBM Z instructions but can be emulated with even/odd\n+ vector merge.\n\ngcc/ChangeLog:\n\n2017-09-26  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* config/s390/vector.md (\"vec_widen_umult_lo_<mode>\")\n\t(\"vec_widen_umult_hi_<mode>\", \"vec_widen_smult_lo_<mode>\")\n\t(\"vec_widen_smult_hi_<mode>\"): New expander definitions.\n\nFrom-SVN: r253192", "tree": {"sha": "7ed8a72c8edff95aea29d180bbc2f6554171e4d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ed8a72c8edff95aea29d180bbc2f6554171e4d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da7853cc18318966aafa5a3cf48aedc4e671404d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da7853cc18318966aafa5a3cf48aedc4e671404d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da7853cc18318966aafa5a3cf48aedc4e671404d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da7853cc18318966aafa5a3cf48aedc4e671404d/comments", "author": null, "committer": null, "parents": [{"sha": "703fe7a454a47a394dffd7e03c25b90bdef08876", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/703fe7a454a47a394dffd7e03c25b90bdef08876", "html_url": "https://github.com/Rust-GCC/gccrs/commit/703fe7a454a47a394dffd7e03c25b90bdef08876"}], "stats": {"total": 89, "additions": 85, "deletions": 4}, "files": [{"sha": "9df1ff54470cc515d0c8f7343cea191454fbe3b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da7853cc18318966aafa5a3cf48aedc4e671404d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da7853cc18318966aafa5a3cf48aedc4e671404d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da7853cc18318966aafa5a3cf48aedc4e671404d", "patch": "@@ -1,3 +1,9 @@\n+2017-09-26  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* config/s390/vector.md (\"vec_widen_umult_lo_<mode>\")\n+\t(\"vec_widen_umult_hi_<mode>\", \"vec_widen_smult_lo_<mode>\")\n+\t(\"vec_widen_smult_hi_<mode>\"): New expander definitions.\n+\n 2017-09-26  Richard Earnshaw  <rearnsha@arm.com>\n \n \tPR target/82175"}, {"sha": "29131cdbf359f5fa7e984c7f6fbad864953b90d5", "filename": "gcc/config/s390/vector.md", "status": "modified", "additions": 79, "deletions": 4, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da7853cc18318966aafa5a3cf48aedc4e671404d/gcc%2Fconfig%2Fs390%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da7853cc18318966aafa5a3cf48aedc4e671404d/gcc%2Fconfig%2Fs390%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvector.md?ref=da7853cc18318966aafa5a3cf48aedc4e671404d", "patch": "@@ -1065,10 +1065,85 @@\n   \"vmlo<bhfgq>\\t%v0,%v1,%v2\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n-; vec_widen_umult_hi\n-; vec_widen_umult_lo\n-; vec_widen_smult_hi\n-; vec_widen_smult_lo\n+\n+; Widening hi/lo multiplications\n+\n+; The S/390 instructions vml and vmh return the low or high parts of\n+; the double sized result elements in the corresponding elements of\n+; the target register.  That's NOT what the vec_widen_umult_lo/hi\n+; patterns are expected to do.\n+\n+; We emulate the widening lo/hi multiplies with the even/odd versions\n+; followed by a vector merge\n+\n+\n+(define_expand \"vec_widen_umult_lo_<mode>\"\n+  [(set (match_dup 3)\n+\t(unspec:<vec_double> [(match_operand:VI_QHS 1 \"register_operand\" \"%v\")\n+\t\t\t      (match_operand:VI_QHS 2 \"register_operand\"  \"v\")]\n+\t\t\t     UNSPEC_VEC_UMULT_EVEN))\n+   (set (match_dup 4)\n+\t(unspec:<vec_double> [(match_dup 1) (match_dup 2)]\n+\t\t\t     UNSPEC_VEC_UMULT_ODD))\n+   (set (match_operand:<vec_double>                 0 \"register_operand\" \"=v\")\n+\t(unspec:<vec_double> [(match_dup 3) (match_dup 4)]\n+\t\t\t     UNSPEC_VEC_MERGEL))]\n+  \"TARGET_VX\"\n+ {\n+   operands[3] = gen_reg_rtx (<vec_double>mode);\n+   operands[4] = gen_reg_rtx (<vec_double>mode);\n+ })\n+\n+(define_expand \"vec_widen_umult_hi_<mode>\"\n+  [(set (match_dup 3)\n+\t(unspec:<vec_double> [(match_operand:VI_QHS 1 \"register_operand\" \"%v\")\n+\t\t\t      (match_operand:VI_QHS 2 \"register_operand\"  \"v\")]\n+\t\t\t     UNSPEC_VEC_UMULT_EVEN))\n+   (set (match_dup 4)\n+\t(unspec:<vec_double> [(match_dup 1) (match_dup 2)]\n+\t\t\t     UNSPEC_VEC_UMULT_ODD))\n+   (set (match_operand:<vec_double>                 0 \"register_operand\" \"=v\")\n+\t(unspec:<vec_double> [(match_dup 3) (match_dup 4)]\n+\t\t\t     UNSPEC_VEC_MERGEH))]\n+  \"TARGET_VX\"\n+ {\n+   operands[3] = gen_reg_rtx (<vec_double>mode);\n+   operands[4] = gen_reg_rtx (<vec_double>mode);\n+ })\n+\n+(define_expand \"vec_widen_smult_lo_<mode>\"\n+  [(set (match_dup 3)\n+\t(unspec:<vec_double> [(match_operand:VI_QHS 1 \"register_operand\" \"%v\")\n+\t\t\t      (match_operand:VI_QHS 2 \"register_operand\"  \"v\")]\n+\t\t\t     UNSPEC_VEC_SMULT_EVEN))\n+   (set (match_dup 4)\n+\t(unspec:<vec_double> [(match_dup 1) (match_dup 2)]\n+\t\t\t     UNSPEC_VEC_SMULT_ODD))\n+   (set (match_operand:<vec_double>                 0 \"register_operand\" \"=v\")\n+\t(unspec:<vec_double> [(match_dup 3) (match_dup 4)]\n+\t\t\t     UNSPEC_VEC_MERGEL))]\n+  \"TARGET_VX\"\n+ {\n+   operands[3] = gen_reg_rtx (<vec_double>mode);\n+   operands[4] = gen_reg_rtx (<vec_double>mode);\n+ })\n+\n+(define_expand \"vec_widen_smult_hi_<mode>\"\n+  [(set (match_dup 3)\n+\t(unspec:<vec_double> [(match_operand:VI_QHS 1 \"register_operand\" \"%v\")\n+\t\t\t      (match_operand:VI_QHS 2 \"register_operand\"  \"v\")]\n+\t\t\t     UNSPEC_VEC_SMULT_EVEN))\n+   (set (match_dup 4)\n+\t(unspec:<vec_double> [(match_dup 1) (match_dup 2)]\n+\t\t\t     UNSPEC_VEC_SMULT_ODD))\n+   (set (match_operand:<vec_double>                 0 \"register_operand\" \"=v\")\n+\t(unspec:<vec_double> [(match_dup 3) (match_dup 4)]\n+\t\t\t     UNSPEC_VEC_MERGEH))]\n+  \"TARGET_VX\"\n+ {\n+   operands[3] = gen_reg_rtx (<vec_double>mode);\n+   operands[4] = gen_reg_rtx (<vec_double>mode);\n+ })\n \n ; vec_widen_ushiftl_hi\n ; vec_widen_ushiftl_lo"}]}