{"sha": "ade649b2bfd24a1adcc28d96fa4b81878efe1c0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRlNjQ5YjJiZmQyNGExYWRjYzI4ZDk2ZmE0YjgxODc4ZWZlMWMwYg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2018-05-31T10:44:51Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-31T10:44:51Z"}, "message": "[Ada] Unnesting: add a predicate to help expansion of task and protected types\n\n2018-05-31  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* exp_unst.ads, exp_unst.adb (In_Synchronized_Unit): New predicate to\n\tmark subprograms that cannot be eliminated because they must be treated\n\tas reachable from outside the current unit. This includes entry bodies\n\tand protected operations.\n\nFrom-SVN: r260994", "tree": {"sha": "3a2e201dac6aa8fee70cde1a6375eb2cfe7e93e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a2e201dac6aa8fee70cde1a6375eb2cfe7e93e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ade649b2bfd24a1adcc28d96fa4b81878efe1c0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ade649b2bfd24a1adcc28d96fa4b81878efe1c0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ade649b2bfd24a1adcc28d96fa4b81878efe1c0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ade649b2bfd24a1adcc28d96fa4b81878efe1c0b/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dfd2da005e1023bbcbcc0390bbb360c1b8a43f77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfd2da005e1023bbcbcc0390bbb360c1b8a43f77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfd2da005e1023bbcbcc0390bbb360c1b8a43f77"}], "stats": {"total": 42, "additions": 41, "deletions": 1}, "files": [{"sha": "acf2c17bf8cb81b0c42400afbd5f6c576f2675d1", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ade649b2bfd24a1adcc28d96fa4b81878efe1c0b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ade649b2bfd24a1adcc28d96fa4b81878efe1c0b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ade649b2bfd24a1adcc28d96fa4b81878efe1c0b", "patch": "@@ -1,3 +1,10 @@\n+2018-05-31  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_unst.ads, exp_unst.adb (In_Synchronized_Unit): New predicate to\n+\tmark subprograms that cannot be eliminated because they must be treated\n+\tas reachable from outside the current unit. This includes entry bodies\n+\tand protected operations.\n+\n 2018-05-31  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_ch4.adb (Expand_Modular_Addition, Expand_Modular_Subtraction):"}, {"sha": "c6d49e08f7d2c66402a36dfec14e43e5c55d9166", "filename": "gcc/ada/exp_unst.adb", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ade649b2bfd24a1adcc28d96fa4b81878efe1c0b/gcc%2Fada%2Fexp_unst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ade649b2bfd24a1adcc28d96fa4b81878efe1c0b/gcc%2Fada%2Fexp_unst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_unst.adb?ref=ade649b2bfd24a1adcc28d96fa4b81878efe1c0b", "patch": "@@ -43,6 +43,7 @@ with Sem_Util; use Sem_Util;\n with Sinfo;    use Sinfo;\n with Sinput;   use Sinput;\n with Snames;   use Snames;\n+with Stand;    use Stand;\n with Tbuild;   use Tbuild;\n with Uintp;    use Uintp;\n \n@@ -172,6 +173,25 @@ package body Exp_Unst is\n       end loop;\n    end Get_Level;\n \n+   --------------------------\n+   -- In_Synchronized_Unit --\n+   --------------------------\n+\n+   function In_Synchronized_Unit (Subp : Entity_Id) return Boolean is\n+      S : Entity_Id := Scope (Subp);\n+\n+   begin\n+      while Present (S) and then S /= Standard_Standard loop\n+         if Is_Concurrent_Type (S) then\n+            return True;\n+         end if;\n+\n+         S := Scope (S);\n+      end loop;\n+\n+      return False;\n+   end In_Synchronized_Unit;\n+\n    ----------------\n    -- Subp_Index --\n    ----------------\n@@ -1160,6 +1180,13 @@ package body Exp_Unst is\n                Decl : Node_Id;\n \n             begin\n+               --  Subprograms declared in tasks and protected types\n+               --  are reachable and cannot be eliminated.\n+\n+               if In_Synchronized_Unit (STJ.Ent) then\n+                  STJ.Reachable := True;\n+               end if;\n+\n                --  Subprogram is reachable, copy and reset index\n \n                if STJ.Reachable then"}, {"sha": "978e3d13af4fa89f4a7bdb981944ccbb34e86516", "filename": "gcc/ada/exp_unst.ads", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ade649b2bfd24a1adcc28d96fa4b81878efe1c0b/gcc%2Fada%2Fexp_unst.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ade649b2bfd24a1adcc28d96fa4b81878efe1c0b/gcc%2Fada%2Fexp_unst.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_unst.ads?ref=ade649b2bfd24a1adcc28d96fa4b81878efe1c0b", "patch": "@@ -683,12 +683,18 @@ package Exp_Unst is\n    --  function returns the level of nesting (Subp = 1, subprograms that\n    --  are immediately nested within Subp = 2, etc.).\n \n+   function In_Synchronized_Unit (Subp : Entity_Id) return Boolean;\n+   --  Predicate to identify subprograms declared in task and protected types.\n+   --  These subprograms are called from outside the compilation and therefore\n+   --  must be considered reachable (and cannot be eliminated) because we must\n+   --  generate code for them.\n+\n    function Subp_Index (Sub : Entity_Id) return SI_Type;\n    --  Given the entity for a subprogram, return corresponding Subp's index\n \n    procedure Unnest_Subprograms (N : Node_Id);\n    --  Called to unnest subprograms. If we are in unnest subprogram mode, this\n-   --  is the call that traverses the tree N and locates all the library level\n+   --  is the call that traverses the tree N and locates all the library-level\n    --  subprograms with nested subprograms to process them.\n \n end Exp_Unst;"}]}