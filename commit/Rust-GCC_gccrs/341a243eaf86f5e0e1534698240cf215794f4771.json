{"sha": "341a243eaf86f5e0e1534698240cf215794f4771", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQxYTI0M2VhZjg2ZjVlMGUxNTM0Njk4MjQwY2YyMTU3OTRmNDc3MQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-09-14T18:19:09Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-09-14T18:19:09Z"}, "message": "c-pragma.c (handle_pragma_token): Wrap variables `name' and `value' in HANDLE_PRAGMA_WEAK.\n\n       * c-pragma.c (handle_pragma_token): Wrap variables `name' and\n       `value' in HANDLE_PRAGMA_WEAK.  Wrap variable `align' in\n       HANDLE_PRAGMA_PACK||HANDLE_PRAGMA_PACK_PUSH_POP.\n\n       * genrecog.c (make_insn_sequence): Call memset, not bzero.\n\n       * jump.c (find_insert_position): Don't declare or define unless\n       !HAVE_conditional_arithmetic.\n       (returnjump_p_1, delete_prior_computation): Add static prototypes.\n\n       * mips-tdump.c (fatal, fancy_abort, main): Add extern prototypes.\n\n       * recog.c (offsettable_address_p): Prototype function pointer.\n       (preprocess_constraints): Call memset, not bzero.\n\n       * tree.c (tree_node_kind_names): Constify a char*.  Make static.\n       (gcc_obstack_init): Don't declare.\n       (fix_sizetype): Add static prototype.\n       (gcc_obstack_init): Use prototype casts in call to _obstack_begin.\n       (tree_cons): Call memset, not bzero.\n\n       * varasm.c (remove_from_pending_weak_list): Wrap declaration and\n       definition in macro ASM_WEAKEN_LABEL.\n       (mark_const_hash_entry): Add static prototype.\n\nFrom-SVN: r29410", "tree": {"sha": "1e9afbcb55cdfa686ce8918bf81ce92b95aee8fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e9afbcb55cdfa686ce8918bf81ce92b95aee8fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/341a243eaf86f5e0e1534698240cf215794f4771", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/341a243eaf86f5e0e1534698240cf215794f4771", "html_url": "https://github.com/Rust-GCC/gccrs/commit/341a243eaf86f5e0e1534698240cf215794f4771", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/341a243eaf86f5e0e1534698240cf215794f4771/comments", "author": null, "committer": null, "parents": [{"sha": "da09e3172ddd820e2115b5c3eb72b5bc023c983b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da09e3172ddd820e2115b5c3eb72b5bc023c983b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da09e3172ddd820e2115b5c3eb72b5bc023c983b"}], "stats": {"total": 70, "additions": 56, "deletions": 14}, "files": [{"sha": "1c46c17af099e3052ef6e66aae63c6398d83dce1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/341a243eaf86f5e0e1534698240cf215794f4771/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/341a243eaf86f5e0e1534698240cf215794f4771/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=341a243eaf86f5e0e1534698240cf215794f4771", "patch": "@@ -1,3 +1,30 @@\n+Tue Sep 14 14:14:28 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* c-pragma.c (handle_pragma_token): Wrap variables `name' and\n+\t`value' in HANDLE_PRAGMA_WEAK.  Wrap variable `align' in\n+\tHANDLE_PRAGMA_PACK||HANDLE_PRAGMA_PACK_PUSH_POP.\n+\n+\t* genrecog.c (make_insn_sequence): Call memset, not bzero.\n+\n+\t* jump.c (find_insert_position): Don't declare or define unless\n+\t!HAVE_conditional_arithmetic.\n+\t(returnjump_p_1, delete_prior_computation): Add static prototypes.\n+\n+\t* mips-tdump.c (fatal, fancy_abort, main): Add extern prototypes.\n+\t\n+\t* recog.c (offsettable_address_p): Prototype function pointer.\n+\t(preprocess_constraints): Call memset, not bzero.\n+\t\n+\t* tree.c (tree_node_kind_names): Constify a char*.  Make static.\n+\t(gcc_obstack_init): Don't declare.\n+\t(fix_sizetype): Add static prototype.\n+\t(gcc_obstack_init): Use prototype casts in call to _obstack_begin.\n+\t(tree_cons): Call memset, not bzero.\n+\n+\t* varasm.c (remove_from_pending_weak_list): Wrap declaration and\n+\tdefinition in macro ASM_WEAKEN_LABEL.\n+\t(mark_const_hash_entry): Add static prototype.\n+\n Tue Sep 14 12:22:50 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* c-lex.c (handle_generic_pragma): Remove unused variable `c'."}, {"sha": "c002587b4f1f95a7140754b8ae11f0c1b3032e22", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/341a243eaf86f5e0e1534698240cf215794f4771/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/341a243eaf86f5e0e1534698240cf215794f4771/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=341a243eaf86f5e0e1534698240cf215794f4771", "patch": "@@ -235,9 +235,13 @@ handle_pragma_token (string, token)\n {\n   static enum pragma_state state = ps_start;\n   static enum pragma_state type;\n+#ifdef HANDLE_PRAGMA_WEAK\n   static char * name;\n   static char * value;\n+#endif\n+#if defined(HANDLE_PRAGMA_PACK) || defined(HANDLE_PRAGMA_PACK_PUSH_POP)\n   static int align;\n+#endif\n   static tree id;\n \n   /* If we have reached the end of the #pragma directive then"}, {"sha": "a0caace0b8d956842ddad9634495db91e54982a0", "filename": "gcc/genrecog.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/341a243eaf86f5e0e1534698240cf215794f4771/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/341a243eaf86f5e0e1534698240cf215794f4771/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=341a243eaf86f5e0e1534698240cf215794f4771", "patch": "@@ -225,8 +225,8 @@ make_insn_sequence (insn, type)\n \tint new_size;\n \tnew_size = (insn_name_ptr_size ? insn_name_ptr_size * 2 : 512);\n \tinsn_name_ptr = xrealloc (insn_name_ptr, sizeof(char *) * new_size);\n-\tbzero (insn_name_ptr + insn_name_ptr_size,\n-\t       sizeof(char *) * (new_size - insn_name_ptr_size));\n+\tmemset (insn_name_ptr + insn_name_ptr_size, 0,\n+\t\tsizeof(char *) * (new_size - insn_name_ptr_size));\n \tinsn_name_ptr_size = new_size;\n       }\n "}, {"sha": "13ef576397cef9e71a7ff088f5cfd964ba89f0f8", "filename": "gcc/jump.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/341a243eaf86f5e0e1534698240cf215794f4771/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/341a243eaf86f5e0e1534698240cf215794f4771/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=341a243eaf86f5e0e1534698240cf215794f4771", "patch": "@@ -124,9 +124,11 @@ static int delete_labelref_insn\t\tPROTO((rtx, rtx, int));\n static void mark_modified_reg\t\tPROTO((rtx, rtx));\n static void redirect_tablejump\t\tPROTO((rtx, rtx));\n static void jump_optimize_1\t\tPROTO ((rtx, int, int, int, int));\n-#ifndef HAVE_cc0\n+#if ! defined(HAVE_cc0) && ! defined(HAVE_conditional_arithmetic)\n static rtx find_insert_position         PROTO((rtx, rtx));\n #endif\n+static int returnjump_p_1\t        PROTO((rtx *, void *));\n+static void delete_prior_computation    PROTO((rtx, rtx));\n \n /* Main external entry point into the jump optimizer.  See comments before\n    jump_optimize_1 for descriptions of the arguments.  */\n@@ -5450,7 +5452,7 @@ rtx_equal_for_thread_p (x, y, yinsn)\n }\n \f\n \n-#ifndef HAVE_cc0\n+#if !defined(HAVE_cc0) && !defined(HAVE_conditional_arithmetic)\n /* Return the insn that NEW can be safely inserted in front of starting at\n    the jump insn INSN.  Return 0 if it is not safe to do this jump\n    optimization.  Note that NEW must contain a single set. */"}, {"sha": "ce64687ecaccee81ad792d77d897f22f614d41a0", "filename": "gcc/mips-tdump.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/341a243eaf86f5e0e1534698240cf215794f4771/gcc%2Fmips-tdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/341a243eaf86f5e0e1534698240cf215794f4771/gcc%2Fmips-tdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tdump.c?ref=341a243eaf86f5e0e1534698240cf215794f4771", "patch": "@@ -56,8 +56,10 @@ typedef const PTR_T CPTR_T;\n #define uint\tunsigned int\n #define ulong\tunsigned long\n \n-\n-static void\n+void fatal PROTO ((const char *)) ATTRIBUTE_NORETURN;\n+void fancy_abort PROTO ((void)) ATTRIBUTE_NORETURN;\n+  \n+void\n fatal(s)\n   const char *s;\n {\n@@ -1439,6 +1441,8 @@ read_tfile __proto((void))\n \n \f\n \n+extern int main PROTO ((int, char **));\n+\n int\n main (argc, argv)\n      int argc;"}, {"sha": "d163e705cfb66bbe59cc9a0bb9313d69999cd51a", "filename": "gcc/recog.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/341a243eaf86f5e0e1534698240cf215794f4771/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/341a243eaf86f5e0e1534698240cf215794f4771/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=341a243eaf86f5e0e1534698240cf215794f4771", "patch": "@@ -1828,7 +1828,8 @@ offsettable_address_p (strictp, mode, y)\n   register rtx z;\n   rtx y1 = y;\n   rtx *y2;\n-  int (*addressp) () = (strictp ? strict_memory_address_p : memory_address_p);\n+  int (*addressp) PROTO ((enum machine_mode, rtx)) =\n+    (strictp ? strict_memory_address_p : memory_address_p);\n \n   if (CONSTANT_ADDRESS_P (y))\n     return 1;\n@@ -2062,7 +2063,7 @@ preprocess_constraints ()\n {\n   int i;\n \n-  bzero (recog_op_alt, sizeof recog_op_alt);\n+  memset (recog_op_alt, 0, sizeof recog_op_alt);\n   for (i = 0; i < recog_data.n_operands; i++)\n     {\n       int j;"}, {"sha": "d5e19c8b992579bdf981f52ff002723ee6abe3c2", "filename": "gcc/tree.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/341a243eaf86f5e0e1534698240cf215794f4771/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/341a243eaf86f5e0e1534698240cf215794f4771/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=341a243eaf86f5e0e1534698240cf215794f4771", "patch": "@@ -209,7 +209,7 @@ int tree_node_counts[(int)all_kinds];\n int tree_node_sizes[(int)all_kinds];\n int id_string_size = 0;\n \n-const char *tree_node_kind_names[] = {\n+static const char * const tree_node_kind_names[] = {\n   \"decls\",\n   \"types\",\n   \"blocks\",\n@@ -272,8 +272,7 @@ static void set_type_quals PROTO((tree, int));\n static void append_random_chars PROTO((char *));\n static void build_real_from_int_cst_1 PROTO((PTR));\n static void mark_type_hash PROTO ((void *));\n-\n-void gcc_obstack_init ();\n+static void fix_sizetype PROTO ((tree));\n \n /* If non-null, a language specific helper for unsave_expr_now. */\n \n@@ -332,8 +331,8 @@ gcc_obstack_init (obstack)\n #define OBSTACK_CHUNK_FREE free\n #endif\n   _obstack_begin (obstack, OBSTACK_CHUNK_SIZE, 0,\n-\t\t  (void *(*) ()) OBSTACK_CHUNK_ALLOC,\n-\t\t  (void (*) ()) OBSTACK_CHUNK_FREE);\n+\t\t  (void *(*) PROTO ((long))) OBSTACK_CHUNK_ALLOC,\n+\t\t  (void (*) PROTO ((void *))) OBSTACK_CHUNK_FREE);\n }\n \n /* Save all variables describing the current status into the structure\n@@ -2046,7 +2045,7 @@ tree_cons (purpose, value, chain)\n   else\n     {\n       node = (tree) obstack_alloc (current_obstack, sizeof (struct tree_list));\n-      bzero (node, sizeof (struct tree_common));\n+      memset (node, 0, sizeof (struct tree_common));\n     }\n \n #ifdef GATHER_STATISTICS"}, {"sha": "779aeaa04d83528a5a19f9da12c7cf73a86038c4", "filename": "gcc/varasm.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/341a243eaf86f5e0e1534698240cf215794f4771/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/341a243eaf86f5e0e1534698240cf215794f4771/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=341a243eaf86f5e0e1534698240cf215794f4771", "patch": "@@ -177,7 +177,9 @@ static void mark_constants\t\tPROTO((rtx));\n static int output_addressed_constants\tPROTO((tree));\n static void output_after_function_constants PROTO((void));\n static void output_constructor\t\tPROTO((tree, int));\n+#ifdef ASM_WEAKEN_LABEL\n static void remove_from_pending_weak_list\tPROTO ((char *));\n+#endif\n #ifdef ASM_OUTPUT_BSS\n static void asm_output_bss\t\tPROTO((FILE *, tree, char *, int, int));\n #endif\n@@ -188,6 +190,7 @@ static void asm_output_aligned_bss\tPROTO((FILE *, tree, char *, int, int));\n #endif /* BSS_SECTION_ASM_OP */\n static void mark_pool_constant          PROTO((struct pool_constant *));\n static void mark_pool_sym_hash_table\tPROTO((struct pool_sym **));\n+static void mark_const_hash_entry\tPROTO((void *));\n \f\n static enum in_section { no_section, in_text, in_data, in_named\n #ifdef BSS_SECTION_ASM_OP\n@@ -4445,6 +4448,7 @@ weak_finish ()\n /* Remove NAME from the pending list of weak symbols.  This prevents\n    the compiler from emitting multiple .weak directives which confuses\n    some assemblers.  */\n+#ifdef ASM_WEAKEN_LABEL\n static void\n remove_from_pending_weak_list (name)\n      char *name ATTRIBUTE_UNUSED;\n@@ -4461,6 +4465,7 @@ remove_from_pending_weak_list (name)\n     }\n #endif\n }\n+#endif\n \n void\n assemble_alias (decl, target)"}]}