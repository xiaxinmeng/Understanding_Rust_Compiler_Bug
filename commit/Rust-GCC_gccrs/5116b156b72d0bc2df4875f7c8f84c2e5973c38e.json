{"sha": "5116b156b72d0bc2df4875f7c8f84c2e5973c38e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTExNmIxNTZiNzJkMGJjMmRmNDg3NWY3YzhmODRjMmU1OTczYzM4ZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-08-30T06:54:02Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-08-30T06:54:02Z"}, "message": "re PR tree-optimization/72866 (Compile time hog w/ -O3 (-Ofast))\n\n\tPR tree-optimization/72866\n\t* tree-vect-patterns.c (search_type_for_mask): Turn into\n\ta small wrapper, move all code to ...\n\t(search_type_for_mask_1): ... this new function.  Add caching\n\tand adjust recursive calls.\n\n\t* gcc.dg/vect/pr72866.c: New test.\n\nFrom-SVN: r239856", "tree": {"sha": "4f8204ec287148ff2138179eba1c73407dc67118", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f8204ec287148ff2138179eba1c73407dc67118"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5116b156b72d0bc2df4875f7c8f84c2e5973c38e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5116b156b72d0bc2df4875f7c8f84c2e5973c38e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5116b156b72d0bc2df4875f7c8f84c2e5973c38e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5116b156b72d0bc2df4875f7c8f84c2e5973c38e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3754bbfc36b1650ab47e22446af664ecab5bbf2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3754bbfc36b1650ab47e22446af664ecab5bbf2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3754bbfc36b1650ab47e22446af664ecab5bbf2d"}], "stats": {"total": 74, "additions": 62, "deletions": 12}, "files": [{"sha": "f9f91690d5ba2adc64c64f080ad25788a8940add", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5116b156b72d0bc2df4875f7c8f84c2e5973c38e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5116b156b72d0bc2df4875f7c8f84c2e5973c38e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5116b156b72d0bc2df4875f7c8f84c2e5973c38e", "patch": "@@ -1,5 +1,11 @@\n 2016-08-30  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/72866\n+\t* tree-vect-patterns.c (search_type_for_mask): Turn into\n+\ta small wrapper, move all code to ...\n+\t(search_type_for_mask_1): ... this new function.  Add caching\n+\tand adjust recursive calls.\n+\n \tPR debug/77363\n \t* dwarf2out.c (modified_type_die): Use lookup_type_die (type)\n \tinstead of lookup_type_die (type_main_variant (type)) even for array"}, {"sha": "1691cff63a171832920a1a13ce33ba3c709f4edc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5116b156b72d0bc2df4875f7c8f84c2e5973c38e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5116b156b72d0bc2df4875f7c8f84c2e5973c38e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5116b156b72d0bc2df4875f7c8f84c2e5973c38e", "patch": "@@ -1,5 +1,8 @@\n 2016-08-30  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/72866\n+\t* gcc.dg/vect/pr72866.c: New test.\n+\n \tPR debug/77363\n \t* g++.dg/debug/dwarf2/pr77363.C: New test.\n "}, {"sha": "a2ccbbbece8227decceafb62f45dd3eb7bd42652", "filename": "gcc/testsuite/gcc.dg/vect/pr72866.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5116b156b72d0bc2df4875f7c8f84c2e5973c38e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr72866.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5116b156b72d0bc2df4875f7c8f84c2e5973c38e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr72866.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr72866.c?ref=5116b156b72d0bc2df4875f7c8f84c2e5973c38e", "patch": "@@ -0,0 +1,19 @@\n+/* PR tree-optimization/72866 */\n+/* { dg-do compile } */\n+\n+unsigned int dl;\n+int rx, lb;\n+\n+void\n+fo (int jv, int be)\n+{\n+  const unsigned int xw = 16;\n+  unsigned int ya, wo;\n+\n+  for (ya = 0; ya < 2; ++ya)\n+    for (wo = 0; wo < xw; ++wo)\n+      {\n+\tdl += (jv ? be : rx);\n+\trx += ((lb == 0) + 1);\n+      }\n+}"}, {"sha": "7e6e45d1d54051e8377bf7c72cc6fba063b4c35b", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 34, "deletions": 12, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5116b156b72d0bc2df4875f7c8f84c2e5973c38e/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5116b156b72d0bc2df4875f7c8f84c2e5973c38e/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=5116b156b72d0bc2df4875f7c8f84c2e5973c38e", "patch": "@@ -3459,13 +3459,11 @@ adjust_bool_stmts (hash_set <gimple *> &bool_stmt_set,\n   return gimple_assign_lhs (pattern_stmt);\n }\n \n-/* Return the proper type for converting bool VAR into\n-   an integer value or NULL_TREE if no such type exists.\n-   The type is chosen so that converted value has the\n-   same number of elements as VAR's vector type.  */\n+/* Helper for search_type_for_mask.  */\n \n static tree\n-search_type_for_mask (tree var, vec_info *vinfo)\n+search_type_for_mask_1 (tree var, vec_info *vinfo,\n+\t\t\thash_map<gimple *, tree> &cache)\n {\n   gimple *def_stmt;\n   enum vect_def_type dt;\n@@ -3490,6 +3488,10 @@ search_type_for_mask (tree var, vec_info *vinfo)\n   if (!is_gimple_assign (def_stmt))\n     return NULL_TREE;\n \n+  tree *c = cache.get (def_stmt);\n+  if (c)\n+    return *c;\n+\n   rhs_code = gimple_assign_rhs_code (def_stmt);\n   rhs1 = gimple_assign_rhs1 (def_stmt);\n \n@@ -3498,14 +3500,15 @@ search_type_for_mask (tree var, vec_info *vinfo)\n     case SSA_NAME:\n     case BIT_NOT_EXPR:\n     CASE_CONVERT:\n-      res = search_type_for_mask (rhs1, vinfo);\n+      res = search_type_for_mask_1 (rhs1, vinfo, cache);\n       break;\n \n     case BIT_AND_EXPR:\n     case BIT_IOR_EXPR:\n     case BIT_XOR_EXPR:\n-      res = search_type_for_mask (rhs1, vinfo);\n-      res2 = search_type_for_mask (gimple_assign_rhs2 (def_stmt), vinfo);\n+      res = search_type_for_mask_1 (rhs1, vinfo, cache);\n+      res2 = search_type_for_mask_1 (gimple_assign_rhs2 (def_stmt), vinfo,\n+\t\t\t\t     cache);\n       if (!res || (res2 && TYPE_PRECISION (res) > TYPE_PRECISION (res2)))\n \tres = res2;\n       break;\n@@ -3517,21 +3520,28 @@ search_type_for_mask (tree var, vec_info *vinfo)\n \n \t  if (TREE_CODE (TREE_TYPE (rhs1)) == BOOLEAN_TYPE)\n \t    {\n-\t      res = search_type_for_mask (rhs1, vinfo);\n-\t      res2 = search_type_for_mask (gimple_assign_rhs2 (def_stmt), vinfo);\n+\t      res = search_type_for_mask_1 (rhs1, vinfo, cache);\n+\t      res2 = search_type_for_mask_1 (gimple_assign_rhs2 (def_stmt),\n+\t\t\t\t\t     vinfo, cache);\n \t      if (!res || (res2 && TYPE_PRECISION (res) > TYPE_PRECISION (res2)))\n \t\tres = res2;\n \t      break;\n \t    }\n \n \t  comp_vectype = get_vectype_for_scalar_type (TREE_TYPE (rhs1));\n \t  if (comp_vectype == NULL_TREE)\n-\t    return NULL_TREE;\n+\t    {\n+\t      res = NULL_TREE;\n+\t      break;\n+\t    }\n \n \t  mask_type = get_mask_type_for_scalar_type (TREE_TYPE (rhs1));\n \t  if (!mask_type\n \t      || !expand_vec_cmp_expr_p (comp_vectype, mask_type))\n-\t    return NULL_TREE;\n+\t    {\n+\t      res = NULL_TREE;\n+\t      break;\n+\t    }\n \n \t  if (TREE_CODE (TREE_TYPE (rhs1)) != INTEGER_TYPE\n \t      || !TYPE_UNSIGNED (TREE_TYPE (rhs1)))\n@@ -3544,9 +3554,21 @@ search_type_for_mask (tree var, vec_info *vinfo)\n \t}\n     }\n \n+  cache.put (def_stmt, res);\n   return res;\n }\n \n+/* Return the proper type for converting bool VAR into\n+   an integer value or NULL_TREE if no such type exists.\n+   The type is chosen so that converted value has the\n+   same number of elements as VAR's vector type.  */\n+\n+static tree\n+search_type_for_mask (tree var, vec_info *vinfo)\n+{\n+  hash_map<gimple *, tree> cache;\n+  return search_type_for_mask_1 (var, vinfo, cache);\n+}\n \n /* Function vect_recog_bool_pattern\n "}]}