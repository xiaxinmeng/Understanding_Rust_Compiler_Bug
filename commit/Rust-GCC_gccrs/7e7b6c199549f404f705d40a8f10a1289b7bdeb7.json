{"sha": "7e7b6c199549f404f705d40a8f10a1289b7bdeb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U3YjZjMTk5NTQ5ZjQwNGY3MDVkNDBhOGYxMGExMjg5YjdiZGViNw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-07-14T01:00:10Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-07-14T01:00:10Z"}, "message": "regclass.c (scan_one_insn): Notice subregs that change the size of their operand.\n\n\ufffd\n        * regclass.c (scan_one_insn): Notice subregs that change the\n        size of their operand.\n        (record_reg_classes): Use that to obey CLASS_CANNOT_CHANGE_SIZE.\n\nFrom-SVN: r28096", "tree": {"sha": "4f43306e6b6516ba2c7464efaa9390aaad67dc16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f43306e6b6516ba2c7464efaa9390aaad67dc16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e7b6c199549f404f705d40a8f10a1289b7bdeb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e7b6c199549f404f705d40a8f10a1289b7bdeb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e7b6c199549f404f705d40a8f10a1289b7bdeb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e7b6c199549f404f705d40a8f10a1289b7bdeb7/comments", "author": null, "committer": null, "parents": [{"sha": "cf353617dc1e480752ca37576c4b34c22ac8c47c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf353617dc1e480752ca37576c4b34c22ac8c47c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf353617dc1e480752ca37576c4b34c22ac8c47c"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "4e162882bd865766b88d7fbafbb72a0e24294556", "filename": "gcc/regclass.c", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7b6c199549f404f705d40a8f10a1289b7bdeb7/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7b6c199549f404f705d40a8f10a1289b7bdeb7/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=7e7b6c199549f404f705d40a8f10a1289b7bdeb7", "patch": "@@ -693,7 +693,7 @@ static int loop_cost;\n \n static rtx scan_one_insn\tPROTO((rtx, int));\n static void record_reg_classes\tPROTO((int, int, rtx *, enum machine_mode *,\n-\t\t\t\t       const char **, rtx));\n+\t\t\t\t       char *, const char **, rtx));\n static int copy_cost\t\tPROTO((rtx, enum machine_mode, \n \t\t\t\t       enum reg_class, int));\n static void record_address_regs\tPROTO((rtx, enum reg_class, int));\n@@ -757,6 +757,7 @@ scan_one_insn (insn, pass)\n   enum rtx_code pat_code;\n   const char *constraints[MAX_RECOG_OPERANDS];\n   enum machine_mode modes[MAX_RECOG_OPERANDS];\n+  char subreg_changes_size[MAX_RECOG_OPERANDS];\n   rtx set, note;\n   int i, j;\n \n@@ -794,6 +795,7 @@ scan_one_insn (insn, pass)\n       constraints[i] = recog_constraints[i];\n       modes[i] = recog_operand_mode[i];\n     }\n+  memset (subreg_changes_size, 0, sizeof (subreg_changes_size));\n \n   /* If this insn loads a parameter from its stack slot, then\n      it represents a savings, rather than a cost, if the\n@@ -881,7 +883,12 @@ scan_one_insn (insn, pass)\n       op_costs[i] = init_cost;\n \n       if (GET_CODE (recog_operand[i]) == SUBREG)\n-\trecog_operand[i] = SUBREG_REG (recog_operand[i]);\n+\t{\n+\t  rtx inner = SUBREG_REG (recog_operand[i]);\n+\t  if (GET_MODE_SIZE (modes[i]) != GET_MODE_SIZE (GET_MODE (inner)))\n+\t    subreg_changes_size[i] = 1;\n+\t  recog_operand[i] = inner;\n+\t}\n \n       if (GET_CODE (recog_operand[i]) == MEM)\n \trecord_address_regs (XEXP (recog_operand[i], 0),\n@@ -910,12 +917,12 @@ scan_one_insn (insn, pass)\n \txconstraints[i] = constraints[i+1];\n \txconstraints[i+1] = constraints[i];\n \trecord_reg_classes (recog_n_alternatives, recog_n_operands,\n-\t\t\t    recog_operand, modes, xconstraints,\n-\t\t\t    insn);\n+\t\t\t    recog_operand, modes, subreg_changes_size,\n+\t\t\t    xconstraints, insn);\n       }\n \n   record_reg_classes (recog_n_alternatives, recog_n_operands, recog_operand,\n-\t\t      modes, constraints, insn);\n+\t\t      modes, subreg_changes_size, constraints, insn);\n \n   /* Now add the cost for each operand to the total costs for\n      its register.  */\n@@ -1131,11 +1138,13 @@ regclass (f, nregs)\n    alternatives.  */\n \n static void\n-record_reg_classes (n_alts, n_ops, ops, modes, constraints, insn)\n+record_reg_classes (n_alts, n_ops, ops, modes, subreg_changes_size,\n+\t\t    constraints, insn)\n      int n_alts;\n      int n_ops;\n      rtx *ops;\n      enum machine_mode *modes;\n+     char *subreg_changes_size;\n      const char **constraints;\n      rtx insn;\n {\n@@ -1394,6 +1403,16 @@ record_reg_classes (n_alts, n_ops, ops, modes, constraints, insn)\n \n \t  constraints[i] = p;\n \n+#ifdef CLASS_CANNOT_CHANGE_SIZE\n+\t  /* If we noted a subreg earlier, and the selected class is a \n+\t     subclass of CLASS_CANNOT_CHANGE_SIZE, zap it.  */\n+\t  if (subreg_changes_size[i]\n+\t      && (reg_class_subunion[(int) CLASS_CANNOT_CHANGE_SIZE]\n+\t\t\t\t    [(int) classes[i]]\n+\t\t  == CLASS_CANNOT_CHANGE_SIZE))\n+\t    classes[i] = NO_REGS;\n+#endif\n+\n \t  /* How we account for this operand now depends on whether it is  a\n \t     pseudo register or not.  If it is, we first check if any\n \t     register classes are valid.  If not, we ignore this alternative,"}]}