{"sha": "72da915b16e6fcd36ae59b99faa4070f97ae59d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJkYTkxNWIxNmU2ZmNkMzZhZTU5Yjk5ZmFhNDA3MGY5N2FlNTlkOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-05-28T08:56:08Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-28T08:56:08Z"}, "message": "[Ada] Minor cleanup in repinfo unit\n\nThis removes the Truth_Andif_Expr and Truth_Orif_Expr codes for expressions\nhandled by the repinfo unit, since they are redundant with Truth_And_Expr\nand Truth_Or_Expr respectively in this context.  No functional changes.\n\n2018-05-28  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* repinfo.ads (TCode): Adjust range.\n\t(Truth_Andif_Expr): Remove.\n\t(Truth_Orif_Expr): Likewise.\n\t(Truth_And_Expr .. Dynamic_Val): Adjust value.\n\t* repinfo.adb (Print_Expr): Remove handling of Truth_{And,Or}if_Expr.\n\t(Rep_Value): Likewise.\n\t* repinfo.h (Truth_Andif_Expr): Remove.\n\t(Truth_Orif_Expr): Likewise.\n\t(Truth_And_Expr .. Dynamic_Val): Adjust value.\n\t* gcc-interface/decl.c (annotate_value) <TRUTH_ANDIF_EXPR>: Fall\n\tthrough to TRUTH_AND_EXPR case.\n\t<TRUTH_ORIF_EXPR>: Fall through to TRUTH_OR_EXPR case.\n\nFrom-SVN: r260842", "tree": {"sha": "1e40aeec5337b0badc559e183ea199a1a9f3b8b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e40aeec5337b0badc559e183ea199a1a9f3b8b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72da915b16e6fcd36ae59b99faa4070f97ae59d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72da915b16e6fcd36ae59b99faa4070f97ae59d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72da915b16e6fcd36ae59b99faa4070f97ae59d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72da915b16e6fcd36ae59b99faa4070f97ae59d9/comments", "author": null, "committer": null, "parents": [{"sha": "184a6ba6e0ca03795058e2ab1f3c29d96601c560", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/184a6ba6e0ca03795058e2ab1f3c29d96601c560", "html_url": "https://github.com/Rust-GCC/gccrs/commit/184a6ba6e0ca03795058e2ab1f3c29d96601c560"}], "stats": {"total": 87, "additions": 43, "deletions": 44}, "files": [{"sha": "3a9e1dd6c9fbd1f5825e4f9260779f6f03ebef88", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72da915b16e6fcd36ae59b99faa4070f97ae59d9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72da915b16e6fcd36ae59b99faa4070f97ae59d9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=72da915b16e6fcd36ae59b99faa4070f97ae59d9", "patch": "@@ -1,3 +1,18 @@\n+2018-05-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* repinfo.ads (TCode): Adjust range.\n+\t(Truth_Andif_Expr): Remove.\n+\t(Truth_Orif_Expr): Likewise.\n+\t(Truth_And_Expr .. Dynamic_Val): Adjust value.\n+\t* repinfo.adb (Print_Expr): Remove handling of Truth_{And,Or}if_Expr.\n+\t(Rep_Value): Likewise.\n+\t* repinfo.h (Truth_Andif_Expr): Remove.\n+\t(Truth_Orif_Expr): Likewise.\n+\t(Truth_And_Expr .. Dynamic_Val): Adjust value.\n+\t* gcc-interface/decl.c (annotate_value) <TRUTH_ANDIF_EXPR>: Fall\n+\tthrough to TRUTH_AND_EXPR case.\n+\t<TRUTH_ORIF_EXPR>: Fall through to TRUTH_OR_EXPR case.\n+\n 2018-05-28  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_unst.adb (Visit_Node): For indexed components and attribute"}, {"sha": "2fa9582d54d6d2fa5c8bdd425e9435df0112667e", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72da915b16e6fcd36ae59b99faa4070f97ae59d9/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72da915b16e6fcd36ae59b99faa4070f97ae59d9/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=72da915b16e6fcd36ae59b99faa4070f97ae59d9", "patch": "@@ -8132,9 +8132,9 @@ annotate_value (tree gnu_size)\n     case MIN_EXPR:\t\ttcode = Min_Expr; break;\n     case MAX_EXPR:\t\ttcode = Max_Expr; break;\n     case ABS_EXPR:\t\ttcode = Abs_Expr; break;\n-    case TRUTH_ANDIF_EXPR:\ttcode = Truth_Andif_Expr; break;\n-    case TRUTH_ORIF_EXPR:\ttcode = Truth_Orif_Expr; break;\n+    case TRUTH_ANDIF_EXPR:\n     case TRUTH_AND_EXPR:\ttcode = Truth_And_Expr; break;\n+    case TRUTH_ORIF_EXPR:\n     case TRUTH_OR_EXPR:\t\ttcode = Truth_Or_Expr; break;\n     case TRUTH_XOR_EXPR:\ttcode = Truth_Xor_Expr; break;\n     case TRUTH_NOT_EXPR:\ttcode = Truth_Not_Expr; break;"}, {"sha": "7d283f687f5d578b7e1880f5f08a0eaec99ff512", "filename": "gcc/ada/repinfo.adb", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72da915b16e6fcd36ae59b99faa4070f97ae59d9/gcc%2Fada%2Frepinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72da915b16e6fcd36ae59b99faa4070f97ae59d9/gcc%2Fada%2Frepinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.adb?ref=72da915b16e6fcd36ae59b99faa4070f97ae59d9", "patch": "@@ -621,12 +621,6 @@ package body Repinfo is\n                   when Abs_Expr =>\n                      Unop (\"abs \");\n \n-                  when Truth_Andif_Expr =>\n-                     Binop (\" and if \");\n-\n-                  when Truth_Orif_Expr =>\n-                     Binop (\" or if \");\n-\n                   when Truth_And_Expr =>\n                      Binop (\" and \");\n \n@@ -1554,12 +1548,6 @@ package body Repinfo is\n                   when Abs_Expr =>\n                      return UI_Abs (V (Node.Op1));\n \n-                  when Truth_Andif_Expr =>\n-                     return B (T (Node.Op1) and then T (Node.Op2));\n-\n-                  when Truth_Orif_Expr =>\n-                     return B (T (Node.Op1) or else T (Node.Op2));\n-\n                   when Truth_And_Expr =>\n                      return B (T (Node.Op1) and then T (Node.Op2));\n "}, {"sha": "a36736b621ae13943b2590eeb8306122072886c9", "filename": "gcc/ada/repinfo.ads", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72da915b16e6fcd36ae59b99faa4070f97ae59d9/gcc%2Fada%2Frepinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72da915b16e6fcd36ae59b99faa4070f97ae59d9/gcc%2Fada%2Frepinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.ads?ref=72da915b16e6fcd36ae59b99faa4070f97ae59d9", "patch": "@@ -136,7 +136,7 @@ package Repinfo is\n    --  Subtype used for values that can either be a Node_Ref (negative)\n    --  or a value (non-negative)\n \n-   type TCode is range 0 .. 29;\n+   type TCode is range 0 .. 27;\n    --  Type used on Ada side to represent DEFTREECODE values defined in\n    --  tree.def. Only a subset of these tree codes can actually appear.\n    --  The names are the names from tree.def in Ada casing.\n@@ -153,24 +153,22 @@ package Repinfo is\n    Trunc_Mod_Expr   : constant TCode :=  8; -- mod for trunc_div        2\n    Ceil_Mod_Expr    : constant TCode :=  9; -- mod for ceil_div         2\n    Floor_Mod_Expr   : constant TCode := 10; -- mod for floor_div        2\n-   Exact_Div_Expr   : constant TCode := 11; -- exact div                2\n+   Exact_Div_Expr   : constant TCode := 11; -- exact division           2\n    Negate_Expr      : constant TCode := 12; -- negation                 1\n    Min_Expr         : constant TCode := 13; -- minimum                  2\n    Max_Expr         : constant TCode := 14; -- maximum                  2\n    Abs_Expr         : constant TCode := 15; -- absolute value           1\n-   Truth_Andif_Expr : constant TCode := 16; -- Boolean and then         2\n-   Truth_Orif_Expr  : constant TCode := 17; -- Boolean or else          2\n-   Truth_And_Expr   : constant TCode := 18; -- Boolean and              2\n-   Truth_Or_Expr    : constant TCode := 19; -- Boolean or               2\n-   Truth_Xor_Expr   : constant TCode := 20; -- Boolean xor              2\n-   Truth_Not_Expr   : constant TCode := 21; -- Boolean not              1\n-   Lt_Expr          : constant TCode := 22; -- comparison <             2\n-   Le_Expr          : constant TCode := 23; -- comparison <=            2\n-   Gt_Expr          : constant TCode := 24; -- comparison >             2\n-   Ge_Expr          : constant TCode := 25; -- comparison >=            2\n-   Eq_Expr          : constant TCode := 26; -- comparison =             2\n-   Ne_Expr          : constant TCode := 27; -- comparison /=            2\n-   Bit_And_Expr     : constant TCode := 28; -- Binary and               2\n+   Truth_And_Expr   : constant TCode := 16; -- boolean and              2\n+   Truth_Or_Expr    : constant TCode := 17; -- boolean or               2\n+   Truth_Xor_Expr   : constant TCode := 18; -- boolean xor              2\n+   Truth_Not_Expr   : constant TCode := 19; -- boolean not              1\n+   Lt_Expr          : constant TCode := 20; -- comparison <             2\n+   Le_Expr          : constant TCode := 21; -- comparison <=            2\n+   Gt_Expr          : constant TCode := 22; -- comparison >             2\n+   Ge_Expr          : constant TCode := 23; -- comparison >=            2\n+   Eq_Expr          : constant TCode := 24; -- comparison =             2\n+   Ne_Expr          : constant TCode := 25; -- comparison /=            2\n+   Bit_And_Expr     : constant TCode := 26; -- bitwise and              2\n \n    --  The following entry is used to represent a discriminant value in\n    --  the tree. It has a special tree code that does not correspond\n@@ -184,7 +182,7 @@ package Repinfo is\n    --  has a special tree code that does not correspond directly to\n    --  a GCC node. The single operand is an arbitrary index number.\n \n-   Dynamic_Val      : constant TCode := 29;  -- dynamic value           1\n+   Dynamic_Val      : constant TCode := 27;  -- dynamic value           1\n \n    ------------------------\n    -- The gigi Interface --"}, {"sha": "286dc52ad297a5e50770e846b2dc9b77dd2a0b80", "filename": "gcc/ada/repinfo.h", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72da915b16e6fcd36ae59b99faa4070f97ae59d9/gcc%2Fada%2Frepinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72da915b16e6fcd36ae59b99faa4070f97ae59d9/gcc%2Fada%2Frepinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.h?ref=72da915b16e6fcd36ae59b99faa4070f97ae59d9", "patch": "@@ -58,20 +58,18 @@ typedef char TCode;\n #define Min_Expr         13\n #define Max_Expr         14\n #define Abs_Expr         15\n-#define Truth_Andif_Expr 16\n-#define Truth_Orif_Expr  17\n-#define Truth_And_Expr   18\n-#define Truth_Or_Expr    19\n-#define Truth_Xor_Expr   20\n-#define Truth_Not_Expr   21\n-#define Lt_Expr          22\n-#define Le_Expr          23\n-#define Gt_Expr          24\n-#define Ge_Expr          25\n-#define Eq_Expr          26\n-#define Ne_Expr          27\n-#define Bit_And_Expr     28\n-#define Dynamic_Val      29\n+#define Truth_And_Expr   16\n+#define Truth_Or_Expr    17\n+#define Truth_Xor_Expr   18\n+#define Truth_Not_Expr   19\n+#define Lt_Expr          20\n+#define Le_Expr          21\n+#define Gt_Expr          22\n+#define Ge_Expr          23\n+#define Eq_Expr          24\n+#define Ne_Expr          25\n+#define Bit_And_Expr     26\n+#define Dynamic_Val      27\n \n /* Creates a node using the tree code defined by Expr and from 1-3\n    operands as required (unused operands set as shown to No_Uint) Note"}]}