{"sha": "2a8565fa1182ed326721a50c700f9f5275355d40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE4NTY1ZmExMTgyZWQzMjY3MjFhNTBjNzAwZjlmNTI3NTM1NWQ0MA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-05-20T03:53:28Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-05-20T17:35:09Z"}, "message": "c++: Implement DR 2289, Uniqueness of structured binding names [PR94553]\n\nDR 2289 clarified that since structured bindings have no C compatibility\nimplications, they should be unique in their declarative region, see\n[basic.scope.declarative]/4.2.\n\nThe duplicate_decls hunk is the gist of the patch, but that alone would\nnot be enough to detect the 'A' case: cp_parser_decomposition_declaration\nuses\n\n13968       tree decl2 = start_decl (declarator, &decl_specs, SD_INITIALIZED,\n13969                                NULL_TREE, NULL_TREE, &elt_pushed_scope);\n\nto create the 'A' VAR_DECL but in this start_decl's grokdeclarator we\ndon't do fit_decomposition_lang_decl because the declarator kind is not\ncdk_decomp, so then when start_decl calls maybe_push_decl, the decl 'A'\nisn't DECL_DECOMPOSITION_P and we don't detect this case.  So I needed a\nway to signal to start_decl that it should fit_decomposition_lang_decl.\nIn this patch, I'm adding SD_DECOMPOSITION flag to say that the variable\nis initialized and it should also be marked as DECL_DECOMPOSITION_P.\n\n\tDR 2289\n\tPR c++/94553\n\t* cp-tree.h (SD_DECOMPOSITION): New flag.\n\t* decl.c (duplicate_decls): Make sure a structured binding is unique\n\tin its declarative region.\n\t(start_decl): If INITIALIZED is SD_DECOMPOSITION, call\n\tfit_decomposition_lang_decl.\n\t(grokdeclarator): Compare INITIALIZED directly to SD_* flags.\n\t* parser.c (cp_parser_decomposition_declaration): Pass SD_DECOMPOSITION\n\tto start_decl.\n\n\t* g++.dg/cpp1z/decomp52.C: New test.", "tree": {"sha": "5262a6749e233eacb317bbb259ac1e4c6d577f60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5262a6749e233eacb317bbb259ac1e4c6d577f60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a8565fa1182ed326721a50c700f9f5275355d40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a8565fa1182ed326721a50c700f9f5275355d40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a8565fa1182ed326721a50c700f9f5275355d40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a8565fa1182ed326721a50c700f9f5275355d40/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3872a519c8fa65318efa1b481d331ef91b3ff044", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3872a519c8fa65318efa1b481d331ef91b3ff044", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3872a519c8fa65318efa1b481d331ef91b3ff044"}], "stats": {"total": 68, "additions": 55, "deletions": 13}, "files": [{"sha": "9ed4c58b403900a3a20aee7aa15dea552d1932dc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a8565fa1182ed326721a50c700f9f5275355d40/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a8565fa1182ed326721a50c700f9f5275355d40/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2a8565fa1182ed326721a50c700f9f5275355d40", "patch": "@@ -1,3 +1,16 @@\n+2020-05-20  Marek Polacek  <polacek@redhat.com>\n+\n+\tDR 2289\n+\tPR c++/94553\n+\t* cp-tree.h (SD_DECOMPOSITION): New flag.\n+\t* decl.c (duplicate_decls): Make sure a structured binding is unique\n+\tin its declarative region.\n+\t(start_decl): If INITIALIZED is SD_DECOMPOSITION, call\n+\tfit_decomposition_lang_decl.\n+\t(grokdeclarator): Compare INITIALIZED directly to SD_* flags.\n+\t* parser.c (cp_parser_decomposition_declaration): Pass SD_DECOMPOSITION\n+\tto start_decl.\n+\n 2020-05-20  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/95223"}, {"sha": "27707abaadcbbc96620fbdbd083190c888ef977a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a8565fa1182ed326721a50c700f9f5275355d40/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a8565fa1182ed326721a50c700f9f5275355d40/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=2a8565fa1182ed326721a50c700f9f5275355d40", "patch": "@@ -5694,8 +5694,10 @@ enum overload_flags { NO_SPECIAL = 0, DTOR_FLAG, TYPENAME_FLAG };\n /* Used with start_decl's initialized parameter.  */\n #define SD_UNINITIALIZED     0\n #define SD_INITIALIZED       1\n-#define SD_DEFAULTED         2\n-#define SD_DELETED           3\n+/* Like SD_INITIALIZED, but also mark the new decl as DECL_DECOMPOSITION_P.  */\n+#define SD_DECOMPOSITION     2\n+#define SD_DEFAULTED         3\n+#define SD_DELETED           4\n \n /* Returns nonzero iff TYPE1 and TYPE2 are the same type, or if TYPE2\n    is derived from TYPE1, or if TYPE2 is a pointer (reference) to a"}, {"sha": "024ddc88a4cf1a6240e641e17032aa35f765c0b5", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a8565fa1182ed326721a50c700f9f5275355d40/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a8565fa1182ed326721a50c700f9f5275355d40/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=2a8565fa1182ed326721a50c700f9f5275355d40", "patch": "@@ -1705,6 +1705,9 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t  inform (olddecl_loc, \"previous declaration %q#D\", olddecl);\n \t  return error_mark_node;\n \t}\n+      else if ((VAR_P (olddecl) && DECL_DECOMPOSITION_P (olddecl))\n+\t       || (VAR_P (newdecl) && DECL_DECOMPOSITION_P (newdecl)))\n+\t/* A structured binding must be unique in its declarative region.  */;\n       else if (DECL_IMPLICIT_TYPEDEF_P (olddecl)\n \t       || DECL_IMPLICIT_TYPEDEF_P (newdecl))\n \t/* One is an implicit typedef, that's ok.  */\n@@ -5190,13 +5193,17 @@ groktypename (cp_decl_specifier_seq *type_specifiers,\n    declarations appearing in the body of the class go through\n    grokfield.)  The DECL corresponding to the DECLARATOR is returned.\n    If an error occurs, the error_mark_node is returned instead.\n-   \n+\n    DECLSPECS are the decl-specifiers for the declaration.  INITIALIZED is\n    SD_INITIALIZED if an explicit initializer is present, or SD_DEFAULTED\n    for an explicitly defaulted function, or SD_DELETED for an explicitly\n    deleted function, but 0 (SD_UNINITIALIZED) if this is a variable\n-   implicitly initialized via a default constructor.  ATTRIBUTES and\n-   PREFIX_ATTRIBUTES are GNU attributes associated with this declaration.\n+   implicitly initialized via a default constructor.  It can also be\n+   SD_DECOMPOSITION which behaves much like SD_INITIALIZED, but we also\n+   mark the new decl as DECL_DECOMPOSITION_P.\n+\n+   ATTRIBUTES and PREFIX_ATTRIBUTES are GNU attributes associated with this\n+   declaration.\n \n    The scope represented by the context of the returned DECL is pushed\n    (if it is not the global namespace) and is assigned to\n@@ -5232,11 +5239,7 @@ start_decl (const cp_declarator *declarator,\n   if (context != global_namespace)\n     *pushed_scope_p = push_scope (context);\n \n-  /* Is it valid for this decl to have an initializer at all?\n-     If not, set INITIALIZED to zero, which will indirectly\n-     tell `cp_finish_decl' to ignore the initializer once it is parsed.  */\n-  if (initialized\n-      && TREE_CODE (decl) == TYPE_DECL)\n+  if (initialized && TREE_CODE (decl) == TYPE_DECL)\n     {\n       error_at (DECL_SOURCE_LOCATION (decl),\n \t\t\"typedef %qD is initialized (use %qs instead)\",\n@@ -5389,6 +5392,10 @@ start_decl (const cp_declarator *declarator,\n \t\t   decl);\n     }\n \n+  /* Create a DECL_LANG_SPECIFIC so that DECL_DECOMPOSITION_P works.  */\n+  if (initialized == SD_DECOMPOSITION)\n+    fit_decomposition_lang_decl (decl, NULL_TREE);\n+\n   was_public = TREE_PUBLIC (decl);\n \n   /* Enter this declaration into the symbol table.  Don't push the plain\n@@ -10997,7 +11004,7 @@ grokdeclarator (const cp_declarator *declarator,\n   else if (decl_context == TPARM)\n     template_parm_flag = true, decl_context = PARM;\n \n-  if (initialized > 1)\n+  if (initialized == SD_DEFAULTED || initialized == SD_DELETED)\n     funcdef_flag = true;\n \n   location_t typespec_loc = smallest_type_location (type_quals,\n@@ -13304,7 +13311,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t     || (!dependent_type_p (type)\n \t\t\t && !COMPLETE_TYPE_P (complete_type (type))\n \t\t\t && (!complete_or_array_type_p (type)\n-\t\t\t     || initialized == 0))))\n+\t\t\t     || initialized == SD_UNINITIALIZED))))\n \t  {\n \t    if (TREE_CODE (type) != ARRAY_TYPE\n \t\t|| !COMPLETE_TYPE_P (TREE_TYPE (type)))"}, {"sha": "a6a5d975af3edfe8c5cc7ff1b39280c37e463dbc", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a8565fa1182ed326721a50c700f9f5275355d40/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a8565fa1182ed326721a50c700f9f5275355d40/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=2a8565fa1182ed326721a50c700f9f5275355d40", "patch": "@@ -13974,7 +13974,7 @@ cp_parser_decomposition_declaration (cp_parser *parser,\n \t  declarator->id_loc = e.get_location ();\n \t}\n       tree elt_pushed_scope;\n-      tree decl2 = start_decl (declarator, &decl_specs, SD_INITIALIZED,\n+      tree decl2 = start_decl (declarator, &decl_specs, SD_DECOMPOSITION,\n \t\t\t       NULL_TREE, NULL_TREE, &elt_pushed_scope);\n       if (decl2 == error_mark_node)\n \tdecl = error_mark_node;"}, {"sha": "9e437af7452c683161d1e52bad527ffe63dd06c6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a8565fa1182ed326721a50c700f9f5275355d40/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a8565fa1182ed326721a50c700f9f5275355d40/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2a8565fa1182ed326721a50c700f9f5275355d40", "patch": "@@ -1,3 +1,9 @@\n+2020-05-20  Marek Polacek  <polacek@redhat.com>\n+\n+\tDR 2289\n+\tPR c++/94553\n+\t* g++.dg/cpp1z/decomp52.C: New test.\n+\n 2020-05-20  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/95229"}, {"sha": "43b76181b5e7afca9cbdbd3ecf5b0dbb28a65be8", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp52.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a8565fa1182ed326721a50c700f9f5275355d40/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp52.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a8565fa1182ed326721a50c700f9f5275355d40/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp52.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp52.C?ref=2a8565fa1182ed326721a50c700f9f5275355d40", "patch": "@@ -0,0 +1,14 @@\n+// DR 2289\n+// PR c++/94553\n+// { dg-do compile { target c++17 } }\n+// A structured binding must be unique in its declarative region.\n+\n+void\n+f ()\n+{\n+  int arr[1] = { 1 };\n+  struct A { };\n+  auto [A] = arr; // { dg-error \"redeclared as different kind of entity\" }\n+  auto [B] = arr;\n+  struct B { }; // { dg-error \"redeclared as different kind of entity\" }\n+}"}]}