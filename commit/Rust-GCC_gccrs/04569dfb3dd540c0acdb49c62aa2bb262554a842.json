{"sha": "04569dfb3dd540c0acdb49c62aa2bb262554a842", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ1NjlkZmIzZGQ1NDBjMGFjZGI0OWM2MmFhMmJiMjYyNTU0YTg0Mg==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1994-04-20T03:33:09Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1994-04-20T03:33:09Z"}, "message": "(reg_raw_mode): Declare.\n\nFrom-SVN: r7083", "tree": {"sha": "662c8fa506755dc0c0ab81bb6051d032ba8047b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/662c8fa506755dc0c0ab81bb6051d032ba8047b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04569dfb3dd540c0acdb49c62aa2bb262554a842", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04569dfb3dd540c0acdb49c62aa2bb262554a842", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04569dfb3dd540c0acdb49c62aa2bb262554a842", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04569dfb3dd540c0acdb49c62aa2bb262554a842/comments", "author": null, "committer": null, "parents": [{"sha": "8309a1bc98e1b6949781fb6ab08c597bc98a8072", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8309a1bc98e1b6949781fb6ab08c597bc98a8072", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8309a1bc98e1b6949781fb6ab08c597bc98a8072"}], "stats": {"total": 7, "additions": 7, "deletions": 0}, "files": [{"sha": "47463bf3a7b5909785d3c8028e24835b9cde831f", "filename": "gcc/regs.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04569dfb3dd540c0acdb49c62aa2bb262554a842/gcc%2Fregs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04569dfb3dd540c0acdb49c62aa2bb262554a842/gcc%2Fregs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregs.h?ref=04569dfb3dd540c0acdb49c62aa2bb262554a842", "patch": "@@ -103,6 +103,13 @@ extern char regs_ever_live[FIRST_PSEUDO_REGISTER];\n \n extern char *reg_names[FIRST_PSEUDO_REGISTER];\n \n+/* For each hard register, the widest mode object that it can contain.\n+   This will be a MODE_INT mode if the register can hold integers.  Otherwise\n+   it will be a MODE_FLOAT or a MODE_CC mode, whichever is valid for the\n+   register.  */\n+\n+extern enum machine_mode reg_raw_mode[FIRST_PSEUDO_REGISTER];\n+\n /* Vector indexed by regno; gives uid of first insn using that reg.\n    This is computed by reg_scan for use by cse and loop.\n    It is sometimes adjusted for subsequent changes during loop,"}]}