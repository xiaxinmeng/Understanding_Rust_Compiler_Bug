{"sha": "aa14403d28a1af7c28088dd4e04b36a4016e06f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWExNDQwM2QyOGExYWY3YzI4MDg4ZGQ0ZTA0YjM2YTQwMTZlMDZmOQ==", "commit": {"author": {"name": "Rafael Avila de Espindola", "email": "espindola@google.com", "date": "2008-07-21T14:29:27Z"}, "committer": {"name": "Rafael Espindola", "email": "espindola@gcc.gnu.org", "date": "2008-07-21T14:29:27Z"}, "message": "Makefile.in: Replace toplev.h with TOPLEV_H.\n\n2007-07-21  Rafael Avila de Espindola  <espindola@google.com>\n\n\t* Makefile.in: Replace toplev.h with TOPLEV_H.\n\t* c-decl.c (merge_decls): Don't set DECL_IN_SYSTEM_HEADER.\n\t* c-lex.c (fe_file_change): Don't set in_system_header.\n\t* c-parser.c (c_token): Remove in_system_header.\n\t(c_lex_one_token): Don't set in_system_header.\n\t(c_parser_set_source_position_from_token): Don't set in_system_header.\n\t* diagnostic.c (diagnostic_report_diagnostic): Use location from\n\tdiagnostic_info.\n\t(warning_at): New.\n\t* diagnostic.h (diagnostic_report_warnings_p): Add LOC argument.\n\t* flags.h (in_system_header): Remove.\n\t* function.c (saved_in_system_header): Remove.\n\t(push_cfun): Don't set in_system_header.\n\t(pop_cfun): Don't set in_system_header.\n\t(push_struct_function): Don't set in_system_header.\n\t* input.h (expanded_location): Add sysp.\n\t(in_system_header_at): New.\n\t(in_system_header): New.\n\t* toplev.c (in_system_header): Remove.\n\t* toplev.h: Include input.h\n\t(warning_at): New.\n\t* tree-cfg.c (execute_warn_function_return): Call warning_at.\n\t* tree-ssa.c (warn_uninit): Call warning_at.\n\t(warn_uninitialized_var): Update calls to warn_uninit.\n\t(warn_uninitialized_phi): Update calls to warn_uninit.\n\t* tree.c (make_node_stat): Don't set DECL_IN_SYSTEM_HEADER.\n\t(expand_location): Initialize xloc.sysp.\n\t* tree.h (DECL_IN_SYSTEM_HEADER): Use in_system_header_at.\n\t(tree_decl_with_vis): Remove in_system_header_flag.\n\n2007-07-21  Rafael Avila de Espindola  <espindola@google.com>\n\n\t* parser.c (cp_token): Remove in_system_header.\n\t(eof_token): Remove in_system_header.\n\t(cp_lexer_get_preprocessor_token): Don't set in_system_header.\n\t(cp_lexer_set_source_position_from_token): Don't set in_system_header.\n\t(cp_parser_member_declaration):  Use in_system_header_at.\n\t* pt.c (lookup_template_class): Don't set DECL_IN_SYSTEM_HEADER.\n\t(pop_tinst_level): Don't set in_system_header.\n\t(instantiate_class_template): Don't set in_system_header.\n\t(instantiate_decl): Don't set in_system_header.\n\t(instantiate_pending_templates): Don't set in_system_header.\n\nFrom-SVN: r138031", "tree": {"sha": "1e111546a06e6c9f6855577afe7e36025fb4eb8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e111546a06e6c9f6855577afe7e36025fb4eb8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa14403d28a1af7c28088dd4e04b36a4016e06f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa14403d28a1af7c28088dd4e04b36a4016e06f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa14403d28a1af7c28088dd4e04b36a4016e06f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa14403d28a1af7c28088dd4e04b36a4016e06f9/comments", "author": null, "committer": null, "parents": [{"sha": "c44109aaf3be31a6816a8a4f3c4454261d8d2622", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c44109aaf3be31a6816a8a4f3c4454261d8d2622", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c44109aaf3be31a6816a8a4f3c4454261d8d2622"}], "stats": {"total": 473, "additions": 246, "deletions": 227}, "files": [{"sha": "92a17cb9c020714251d9acbc7bfd8f87f349ddfa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa14403d28a1af7c28088dd4e04b36a4016e06f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa14403d28a1af7c28088dd4e04b36a4016e06f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aa14403d28a1af7c28088dd4e04b36a4016e06f9", "patch": "@@ -1,3 +1,35 @@\n+2007-07-21  Rafael Avila de Espindola  <espindola@google.com>\n+\n+\t* Makefile.in: Replace toplev.h with TOPLEV_H.\n+\t* c-decl.c (merge_decls): Don't set DECL_IN_SYSTEM_HEADER.\n+\t* c-lex.c (fe_file_change): Don't set in_system_header.\n+\t* c-parser.c (c_token): Remove in_system_header.\n+\t(c_lex_one_token): Don't set in_system_header.\n+\t(c_parser_set_source_position_from_token): Don't set in_system_header.\n+\t* diagnostic.c (diagnostic_report_diagnostic): Use location from\n+\tdiagnostic_info.\n+\t(warning_at): New.\n+\t* diagnostic.h (diagnostic_report_warnings_p): Add LOC argument.\n+\t* flags.h (in_system_header): Remove.\n+\t* function.c (saved_in_system_header): Remove.\n+\t(push_cfun): Don't set in_system_header.\n+\t(pop_cfun): Don't set in_system_header.\n+\t(push_struct_function): Don't set in_system_header.\n+\t* input.h (expanded_location): Add sysp.\n+\t(in_system_header_at): New.\n+\t(in_system_header): New.\n+\t* toplev.c (in_system_header): Remove.\n+\t* toplev.h: Include input.h\n+\t(warning_at): New.\n+\t* tree-cfg.c (execute_warn_function_return): Call warning_at.\n+\t* tree-ssa.c (warn_uninit): Call warning_at.\n+\t(warn_uninitialized_var): Update calls to warn_uninit.\n+\t(warn_uninitialized_phi): Update calls to warn_uninit.\n+\t* tree.c (make_node_stat): Don't set DECL_IN_SYSTEM_HEADER.\n+\t(expand_location): Initialize xloc.sysp.\n+\t* tree.h (DECL_IN_SYSTEM_HEADER): Use in_system_header_at.\n+\t(tree_decl_with_vis): Remove in_system_header_flag.\n+\n 2008-07-21  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \tPR target/36822"}, {"sha": "793c238e03bab4802a28258948febfbe421fa375", "filename": "gcc/Makefile.in", "status": "modified", "additions": 157, "deletions": 156, "changes": 313, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa14403d28a1af7c28088dd4e04b36a4016e06f9/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa14403d28a1af7c28088dd4e04b36a4016e06f9/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=aa14403d28a1af7c28088dd4e04b36a4016e06f9", "patch": "@@ -778,6 +778,7 @@ REVISION_s  :=\n endif\n \n # Shorthand variables for dependency lists.\n+TOPLEV_H = toplev.h input.h\n TARGET_H = $(TM_H) target.h insn-modes.h\n MACHMODE_H = machmode.h mode-classes.def insn-modes.h\n HOOKS_H = hooks.h $(MACHMODE_H)\n@@ -828,7 +829,7 @@ INSN_ATTR_H = insn-attr.h $(INSN_ADDR_H) $(srcdir)/varray.h\n INSN_ADDR_H = $(srcdir)/insn-addr.h vecprim.h\n C_COMMON_H = c-common.h $(SPLAY_TREE_H) $(CPPLIB_H) $(GGC_H)\n C_PRAGMA_H = c-pragma.h $(CPPLIB_H)\n-C_TREE_H = c-tree.h $(C_COMMON_H) toplev.h $(DIAGNOSTIC_H)\n+C_TREE_H = c-tree.h $(C_COMMON_H) $(TOPLEV_H) $(DIAGNOSTIC_H)\n SYSTEM_H = system.h hwint.h $(srcdir)/../include/libiberty.h \\\n \t$(srcdir)/../include/safe-ctype.h $(srcdir)/../include/filenames.h\n PREDICT_H = predict.h predict.def\n@@ -1775,7 +1776,7 @@ s-crt0:\t$(CRT0_S) $(MCRT0_S) $(GCC_PASSES) $(CONFIG_H)\n c-errors.o: c-errors.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n     $(C_TREE_H) $(FLAGS_H) $(DIAGNOSTIC_H) $(TM_P_H)\n c-parser.o : c-parser.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n-    $(GGC_H) $(TIMEVAR_H) $(C_TREE_H) $(INPUT_H) $(FLAGS_H) toplev.h output.h \\\n+    $(GGC_H) $(TIMEVAR_H) $(C_TREE_H) $(INPUT_H) $(FLAGS_H) $(TOPLEV_H) output.h \\\n     $(CPPLIB_H) gt-c-parser.h $(RTL_H) langhooks.h $(C_COMMON_H) $(C_PRAGMA_H) \\\n     vec.h $(TARGET_H) $(CGRAPH_H)\n \n@@ -1790,14 +1791,14 @@ incpath.o: incpath.c incpath.h $(CONFIG_H) $(SYSTEM_H) $(CPPLIB_H) \\\n \n c-decl.o : c-decl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n     $(RTL_H) $(C_TREE_H) $(GGC_H) $(TARGET_H) $(FLAGS_H) $(FUNCTION_H) output.h \\\n-    $(EXPR_H) debug.h toplev.h intl.h $(TM_P_H) $(TREE_INLINE_H) $(TIMEVAR_H) \\\n+    $(EXPR_H) debug.h $(TOPLEV_H) intl.h $(TM_P_H) $(TREE_INLINE_H) $(TIMEVAR_H) \\\n     opts.h $(C_PRAGMA_H) gt-c-decl.h $(CGRAPH_H) $(HASHTAB_H) libfuncs.h \\\n     except.h $(LANGHOOKS_DEF_H) $(TREE_DUMP_H) $(C_COMMON_H) $(CPPLIB_H) \\\n     $(DIAGNOSTIC_H) $(INPUT_H) langhooks.h $(TREE_GIMPLE_H) tree-mudflap.h  \\\n     pointer-set.h $(BASIC_BLOCK_H)\n c-typeck.o : c-typeck.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n     $(TREE_H) $(C_TREE_H) $(TARGET_H) $(FLAGS_H) intl.h output.h $(EXPR_H) \\\n-    $(RTL_H) toplev.h $(TM_P_H) langhooks.h $(GGC_H) $(TREE_FLOW_H) \\\n+    $(RTL_H) $(TOPLEV_H) $(TM_P_H) langhooks.h $(GGC_H) $(TREE_FLOW_H) \\\n     $(TREE_GIMPLE_H) tree-iterator.h\n c-lang.o : c-lang.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n     $(C_TREE_H) $(DIAGNOSTIC_H) \\\n@@ -1807,25 +1808,25 @@ stub-objc.o : stub-objc.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TREE_H) \\\n     $(C_COMMON_H)\n c-lex.o : c-lex.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n     $(RTL_H) debug.h $(C_TREE_H) $(C_COMMON_H) $(REAL_H) $(SPLAY_TREE_H) \\\n-    $(C_PRAGMA_H) $(INPUT_H) intl.h $(FLAGS_H) toplev.h output.h \\\n+    $(C_PRAGMA_H) $(INPUT_H) intl.h $(FLAGS_H) $(TOPLEV_H) output.h \\\n     $(CPPLIB_H) $(TARGET_H) $(TIMEVAR_H) $(TM_P_H)\n c-ppoutput.o : c-ppoutput.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n     $(C_COMMON_H) $(TREE_H) $(CPPLIB_H) $(CPP_INTERNAL_H) $(C_PRAGMA_H)\n c-objc-common.o : c-objc-common.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n     $(TM_H) $(TREE_H) $(C_TREE_H) $(RTL_H) insn-config.h $(INTEGRATE_H) \\\n-    $(FUNCTION_H) $(FLAGS_H) toplev.h $(TREE_INLINE_H) $(DIAGNOSTIC_H) $(VARRAY_H) \\\n+    $(FUNCTION_H) $(FLAGS_H) $(TOPLEV_H) $(TREE_INLINE_H) $(DIAGNOSTIC_H) $(VARRAY_H) \\\n     langhooks.h $(GGC_H) $(TARGET_H) $(C_PRETTY_PRINT_H) c-objc-common.h \\\n     tree-mudflap.h\n c-aux-info.o : c-aux-info.c  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n-    $(C_TREE_H) $(FLAGS_H) toplev.h\n+    $(C_TREE_H) $(FLAGS_H) $(TOPLEV_H)\n c-convert.o : c-convert.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-    $(TREE_H) $(FLAGS_H) toplev.h $(C_COMMON_H) convert.h $(C_TREE_H) \\\n+    $(TREE_H) $(FLAGS_H) $(TOPLEV_H) $(C_COMMON_H) convert.h $(C_TREE_H) \\\n     langhooks.h $(TARGET_H)\n c-pragma.o: c-pragma.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-    $(TREE_H) $(FUNCTION_H) $(C_PRAGMA_H) toplev.h output.h $(GGC_H) $(TM_P_H) \\\n+    $(TREE_H) $(FUNCTION_H) $(C_PRAGMA_H) $(TOPLEV_H) output.h $(GGC_H) $(TM_P_H) \\\n     $(C_COMMON_H) $(TARGET_H) gt-c-pragma.h $(CPPLIB_H) $(FLAGS_H) $(DIAGNOSTIC_H) \\\n     opts.h\n-graph.o: graph.c $(SYSTEM_H) coretypes.h $(TM_H) toplev.h $(FLAGS_H) output.h \\\n+graph.o: graph.c $(SYSTEM_H) coretypes.h $(TM_H) $(TOPLEV_H) $(FLAGS_H) output.h \\\n     $(RTL_H) $(FUNCTION_H) hard-reg-set.h $(BASIC_BLOCK_H) graph.h $(OBSTACK_H) \\\n     $(CONFIG_H)\n sbitmap.o: sbitmap.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n@@ -1854,7 +1855,7 @@ tlink.o: tlink.c $(DEMANGLE_H) $(HASHTAB_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h\n # A file used by all variants of C.\n \n c-common.o : c-common.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n-\t$(OBSTACK_H) $(C_COMMON_H) $(FLAGS_H) toplev.h output.h $(C_PRAGMA_H) \\\n+\t$(OBSTACK_H) $(C_COMMON_H) $(FLAGS_H) $(TOPLEV_H) output.h $(C_PRAGMA_H) \\\n \t$(GGC_H) $(EXPR_H) $(TM_P_H) builtin-types.def builtin-attrs.def \\\n \t$(DIAGNOSTIC_H) gt-c-common.h langhooks.h $(VARRAY_H) $(RTL_H) \\\n \t$(TARGET_H) $(C_TREE_H) tree-iterator.h langhooks.h tree-mudflap.h \\\n@@ -1866,31 +1867,31 @@ c-pretty-print.o : c-pretty-print.c $(C_PRETTY_PRINT_H) \\\n \t$(DIAGNOSTIC_H) tree-iterator.h fixed-value.h\n \n c-opts.o : c-opts.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\t\t\\\n-        $(TREE_H) $(C_PRAGMA_H) $(FLAGS_H) toplev.h langhooks.h\t\t\\\n+        $(TREE_H) $(C_PRAGMA_H) $(FLAGS_H) $(TOPLEV_H) langhooks.h\t\t\\\n         $(TREE_INLINE_H) $(DIAGNOSTIC_H) intl.h debug.h $(C_COMMON_H)\t\\\n         opts.h options.h $(MKDEPS_H) incpath.h cppdefault.h $(TARGET_H) \\\n \t$(TM_P_H) $(VARRAY_H)\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) \\\n \t\t$< $(OUTPUT_OPTION) @TARGET_SYSTEM_ROOT_DEFINE@\n \n c-cppbuiltin.o : c-cppbuiltin.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-\t$(TREE_H) version.h $(C_COMMON_H) $(C_PRAGMA_H) $(FLAGS_H) toplev.h \\\n+\t$(TREE_H) version.h $(C_COMMON_H) $(C_PRAGMA_H) $(FLAGS_H) $(TOPLEV_H) \\\n \toutput.h except.h $(REAL_H) $(TARGET_H) $(TM_P_H) $(BASEVER)\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) -DBASEVER=$(BASEVER_s) \\\n \t\t$< $(OUTPUT_OPTION)\n \n # A file used by all variants of C and some other languages.\n \n attribs.o : attribs.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n-\t$(FLAGS_H) toplev.h output.h $(RTL_H) $(GGC_H) $(TM_P_H) \\\n+\t$(FLAGS_H) $(TOPLEV_H) output.h $(RTL_H) $(GGC_H) $(TM_P_H) \\\n \t$(TARGET_H) langhooks.h $(CPPLIB_H)\n \n c-format.o : c-format.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) langhooks.h \\\n-\t$(C_COMMON_H) $(FLAGS_H) toplev.h intl.h $(DIAGNOSTIC_H) alloc-pool.h \\\n+\t$(C_COMMON_H) $(FLAGS_H) $(TOPLEV_H) intl.h $(DIAGNOSTIC_H) alloc-pool.h \\\n \tc-format.h\n \n c-semantics.o : c-semantics.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-\t$(TREE_H) $(FLAGS_H) toplev.h output.h $(RTL_H) $(GGC_H) \\\n+\t$(TREE_H) $(FLAGS_H) $(TOPLEV_H) output.h $(RTL_H) $(GGC_H) \\\n \t$(PREDICT_H) $(TREE_INLINE_H) $(C_COMMON_H) except.h $(FUNCTION_H) \\\n \tlanghooks.h $(SPLAY_TREE_H) $(TIMEVAR_H) $(TREE_GIMPLE_H) \\\n \t$(VARRAY_H)\n@@ -1899,14 +1900,14 @@ c-dump.o : c-dump.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n \t$(C_TREE_H) $(TREE_DUMP_H)\n \n c-pch.o : c-pch.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(CPPLIB_H) $(TREE_H) \\\n-\t$(C_COMMON_H) output.h toplev.h $(C_PRAGMA_H) $(GGC_H) debug.h \\\n+\t$(C_COMMON_H) output.h $(TOPLEV_H) $(C_PRAGMA_H) $(GGC_H) debug.h \\\n \tlanghooks.h $(FLAGS_H) hosthooks.h version.h $(TARGET_H) opts.h\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) \\\n \t  -DHOST_MACHINE=\\\"$(host)\\\" -DTARGET_MACHINE=\\\"$(target)\\\" \\\n \t  $< $(OUTPUT_OPTION)\n \n c-omp.o : c-omp.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n-\t$(FUNCTION_H) $(C_COMMON_H) toplev.h $(TREE_GIMPLE_H) $(BITMAP_H) \\\n+\t$(FUNCTION_H) $(C_COMMON_H) $(TOPLEV_H) $(TREE_GIMPLE_H) $(BITMAP_H) \\\n \tlanghooks.h\n \n # Language-independent files.\n@@ -1991,13 +1992,13 @@ gtype-desc.o: gtype-desc.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \t$(CFGLOOP_H)\n \n ggc-common.o: ggc-common.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(GGC_H) \\\n-\t$(HASHTAB_H) toplev.h $(PARAMS_H) hosthooks.h $(HOSTHOOKS_DEF_H)\n+\t$(HASHTAB_H) $(TOPLEV_H) $(PARAMS_H) hosthooks.h $(HOSTHOOKS_DEF_H)\n \n ggc-page.o: ggc-page.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n-\t$(FLAGS_H) toplev.h $(GGC_H) $(TIMEVAR_H) $(TM_P_H) $(PARAMS_H) $(TREE_FLOW_H)\n+\t$(FLAGS_H) $(TOPLEV_H) $(GGC_H) $(TIMEVAR_H) $(TM_P_H) $(PARAMS_H) $(TREE_FLOW_H)\n \n ggc-zone.o: ggc-zone.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-\t$(TREE_H) $(FLAGS_H) toplev.h $(GGC_H) $(TIMEVAR_H) $(TM_P_H) \\\n+\t$(TREE_H) $(FLAGS_H) $(TOPLEV_H) $(GGC_H) $(TIMEVAR_H) $(TM_P_H) \\\n \t$(PARAMS_H) $(BITMAP_H) $(VARRAY_H)\n \n ggc-none.o: ggc-none.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(GGC_H) \\\n@@ -2013,25 +2014,25 @@ prefix.o: prefix.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) prefix.h \\\n \t  -c $(srcdir)/prefix.c $(OUTPUT_OPTION)\n \n convert.o: convert.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n-   $(FLAGS_H) convert.h toplev.h langhooks.h $(REAL_H) fixed-value.h\n+   $(FLAGS_H) convert.h $(TOPLEV_H) langhooks.h $(REAL_H) fixed-value.h\n \n double-int.o: double-int.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H)\n \n langhooks.o : langhooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-   $(TREE_H) toplev.h $(TREE_INLINE_H) $(RTL_H) insn-config.h $(INTEGRATE_H) \\\n+   $(TREE_H) $(TOPLEV_H) $(TREE_INLINE_H) $(RTL_H) insn-config.h $(INTEGRATE_H) \\\n    langhooks.h $(TARGET_H) $(LANGHOOKS_DEF_H) $(FLAGS_H) $(GGC_H) $(DIAGNOSTIC_H) \\\n    intl.h $(TREE_GIMPLE_H)\n tree.o : tree.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    all-tree.def $(FLAGS_H) $(FUNCTION_H) $(PARAMS_H) \\\n-   toplev.h $(GGC_H) $(HASHTAB_H) $(TARGET_H) output.h $(TM_P_H) langhooks.h \\\n+   $(TOPLEV_H) $(GGC_H) $(HASHTAB_H) $(TARGET_H) output.h $(TM_P_H) langhooks.h \\\n    $(REAL_H) gt-tree.h tree-iterator.h $(BASIC_BLOCK_H) $(TREE_FLOW_H) \\\n    $(OBSTACK_H) pointer-set.h fixed-value.h\n tree-dump.o: tree-dump.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-   $(TREE_H) langhooks.h toplev.h $(SPLAY_TREE_H) $(TREE_DUMP_H) \\\n+   $(TREE_H) langhooks.h $(TOPLEV_H) $(SPLAY_TREE_H) $(TREE_DUMP_H) \\\n    tree-iterator.h tree-pass.h $(DIAGNOSTIC_H) $(REAL_H) fixed-value.h\n tree-inline.o : tree-inline.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) $(RTL_H) $(EXPR_H) $(FLAGS_H) $(PARAMS_H) $(INPUT_H) insn-config.h \\\n-   $(VARRAY_H) $(HASHTAB_H) toplev.h langhooks.h $(TREE_INLINE_H) $(CGRAPH_H) \\\n+   $(VARRAY_H) $(HASHTAB_H) $(TOPLEV_H) langhooks.h $(TREE_INLINE_H) $(CGRAPH_H) \\\n    intl.h $(FUNCTION_H) $(GGC_H) $(TREE_GIMPLE_H) \\\n    debug.h $(DIAGNOSTIC_H) except.h $(TREE_FLOW_H) tree-iterator.h tree-mudflap.h \\\n    $(IPA_PROP_H) value-prof.h tree-pass.h $(TARGET_H) $(INTEGRATE_H)\n@@ -2040,7 +2041,7 @@ print-tree.o : print-tree.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H\n stor-layout.o : stor-layout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) $(PARAMS_H) $(FLAGS_H) $(FUNCTION_H) $(EXPR_H) output.h $(RTL_H) \\\n    $(GGC_H) $(TM_P_H) $(TARGET_H) langhooks.h $(REGS_H) gt-stor-layout.h \\\n-   toplev.h\n+   $(TOPLEV_H)\n tree-ssa-structalias.o: tree-ssa-structalias.c tree-ssa-structalias.h \\\n    $(SYSTEM_H) $(CONFIG_H) coretypes.h $(TM_H) $(GGC_H) $(OBSTACK_H) $(BITMAP_H) \\\n    $(FLAGS_H) $(RTL_H) $(TM_P_H) hard-reg-set.h $(BASIC_BLOCK_H) output.h errors.h \\\n@@ -2050,7 +2051,7 @@ tree-ssa-structalias.o: tree-ssa-structalias.c tree-ssa-structalias.h \\\n    $(CGRAPH_H) $(ALIAS_H) pointer-set.h\n tree-ssa.o : tree-ssa.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(RTL_H) $(TREE_H) $(TM_P_H) $(EXPR_H) output.h $(DIAGNOSTIC_H) \\\n-   toplev.h $(FUNCTION_H) $(TIMEVAR_H) $(TM_H) coretypes.h \\\n+   $(TOPLEV_H) $(FUNCTION_H) $(TIMEVAR_H) $(TM_H) coretypes.h \\\n    $(TREE_DUMP_H) langhooks.h tree-pass.h $(BASIC_BLOCK_H) $(BITMAP_H) \\\n    $(FLAGS_H) $(GGC_H) hard-reg-set.h $(HASHTAB_H) pointer-set.h \\\n    $(TREE_GIMPLE_H) $(TREE_INLINE_H) $(VARRAY_H)\n@@ -2065,10 +2066,10 @@ tree-ssa-ter.o : tree-ssa-ter.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_SSA_LIVE_H) $(BITMAP_H)\n tree-ssa-coalesce.o : tree-ssa-coalesce.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(TREE_H) $(DIAGNOSTIC_H) $(TM_H) coretypes.h $(TREE_DUMP_H) \\\n-   $(TREE_SSA_LIVE_H) $(BITMAP_H) $(FLAGS_H) $(HASHTAB_H) toplev.h\n+   $(TREE_SSA_LIVE_H) $(BITMAP_H) $(FLAGS_H) $(HASHTAB_H) $(TOPLEV_H)\n tree-outof-ssa.o : tree-outof-ssa.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_H) $(DIAGNOSTIC_H) $(TIMEVAR_H) $(TM_H) coretypes.h $(TREE_DUMP_H) \\\n-   tree-pass.h $(TREE_SSA_LIVE_H) $(BASIC_BLOCK_H) $(BITMAP_H) $(GGC_H) toplev.h\n+   tree-pass.h $(TREE_SSA_LIVE_H) $(BASIC_BLOCK_H) $(BITMAP_H) $(GGC_H) $(TOPLEV_H)\n tree-ssa-dse.o : tree-ssa-dse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(GGC_H) $(TREE_H) $(RTL_H) $(TM_P_H) $(BASIC_BLOCK_H) \\\n    $(TREE_FLOW_H) tree-pass.h $(TREE_DUMP_H) domwalk.h $(FLAGS_H) \\\n@@ -2125,12 +2126,12 @@ tree-ssanames.o : tree-ssanames.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(TREE_H) $(VARRAY_H) $(GGC_H) $(TREE_FLOW_H)\n tree-phinodes.o : tree-phinodes.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(TREE_H) $(VARRAY_H) $(GGC_H) $(BASIC_BLOCK_H) $(TREE_FLOW_H) \\\n-   gt-tree-phinodes.h $(RTL_H) toplev.h\n+   gt-tree-phinodes.h $(RTL_H) $(TOPLEV_H)\n domwalk.o : domwalk.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) $(BASIC_BLOCK_H) $(TREE_FLOW_H) domwalk.h $(GGC_H)\n tree-ssa-live.o : tree-ssa-live.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_H) $(DIAGNOSTIC_H) $(TM_H) coretypes.h $(TREE_DUMP_H) \\\n-   $(TREE_SSA_LIVE_H) $(BITMAP_H) toplev.h debug.h $(FLAGS_H)\n+   $(TREE_SSA_LIVE_H) $(BITMAP_H) $(TOPLEV_H) debug.h $(FLAGS_H)\n tree-ssa-copyrename.o : tree-ssa-copyrename.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(TREE_H) $(DIAGNOSTIC_H) $(FUNCTION_H) $(TIMEVAR_H) tree-pass.h \\\n    $(TM_H) coretypes.h $(TREE_DUMP_H) $(TREE_SSA_LIVE_H) $(BASIC_BLOCK_H) \\\n@@ -2151,18 +2152,18 @@ tree-ssa-sccvn.o : tree-ssa-sccvn.c $(TREE_FLOW_H) $(CONFIG_H) \\\n tree-vrp.o : tree-vrp.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(TREE_FLOW_H) tree-pass.h $(TREE_DUMP_H) $(DIAGNOSTIC_H) $(GGC_H) \\\n    $(BASIC_BLOCK_H) tree-ssa-propagate.h $(FLAGS_H) $(TREE_DUMP_H) \\\n-   $(CFGLOOP_H) tree-chrec.h $(TIMEVAR_H) toplev.h intl.h\n+   $(CFGLOOP_H) tree-chrec.h $(TIMEVAR_H) $(TOPLEV_H) intl.h\n tree-cfg.o : tree-cfg.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(RTL_H) $(TREE_H) $(TM_P_H) $(EXPR_H) $(GGC_H) $(FLAGS_H) output.h \\\n    $(DIAGNOSTIC_H) $(FUNCTION_H) $(TIMEVAR_H) $(TM_H) coretypes.h \\\n    $(TREE_DUMP_H) except.h langhooks.h $(CFGLOOP_H) tree-pass.h \\\n-   $(CFGLAYOUT_H) $(BASIC_BLOCK_H) hard-reg-set.h toplev.h \\\n+   $(CFGLAYOUT_H) $(BASIC_BLOCK_H) hard-reg-set.h $(TOPLEV_H) \\\n    value-prof.h tree-ssa-propagate.h $(TREE_INLINE_H)\n tree-cfgcleanup.o : tree-cfgcleanup.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(RTL_H) $(TREE_H) $(TM_P_H) $(EXPR_H) $(GGC_H) $(FLAGS_H) output.h \\\n-   $(DIAGNOSTIC_H) toplev.h $(FUNCTION_H) $(TIMEVAR_H) $(TM_H) coretypes.h \\\n+   $(DIAGNOSTIC_H) $(TOPLEV_H) $(FUNCTION_H) $(TIMEVAR_H) $(TM_H) coretypes.h \\\n    $(TREE_DUMP_H) except.h langhooks.h $(CFGLOOP_H) tree-pass.h \\\n-   $(CFGLAYOUT_H) $(BASIC_BLOCK_H) hard-reg-set.h $(HASHTAB_H) toplev.h \\\n+   $(CFGLAYOUT_H) $(BASIC_BLOCK_H) hard-reg-set.h $(HASHTAB_H) $(TOPLEV_H) \\\n    tree-ssa-propagate.h tree-scalar-evolution.h\n rtl-factoring.o : rtl-factoring.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) \\\n    coretypes.h $(TM_H) $(BASIC_BLOCK_H) $(RESOURCE_H) $(GGC_H) $(REGS_H) \\\n@@ -2196,12 +2197,12 @@ tree-dfa.o : tree-dfa.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_GIMPLE_H)\n tree-ssa-operands.o : tree-ssa-operands.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(TREE_H) $(GGC_H) $(DIAGNOSTIC_H) $(TREE_INLINE_H) \\\n-   $(FLAGS_H) $(FUNCTION_H) $(TM_H) $(TIMEVAR_H) tree-pass.h toplev.h \\\n+   $(FLAGS_H) $(FUNCTION_H) $(TM_H) $(TIMEVAR_H) tree-pass.h $(TOPLEV_H) \\\n    coretypes.h langhooks.h $(IPA_REFERENCE_H)\n tree-eh.o : tree-eh.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(RTL_H) $(TREE_H) $(TM_H) $(FLAGS_H) $(FUNCTION_H) except.h langhooks.h \\\n    $(GGC_H) tree-pass.h coretypes.h $(TIMEVAR_H) $(TM_P_H) pointer-set.h \\\n-   $(TREE_DUMP_H) $(TREE_INLINE_H) tree-iterator.h toplev.h\n+   $(TREE_DUMP_H) $(TREE_INLINE_H) tree-iterator.h $(TOPLEV_H)\n tree-ssa-loop.o : tree-ssa-loop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) $(RTL_H) $(TM_P_H) hard-reg-set.h $(BASIC_BLOCK_H) output.h \\\n    $(DIAGNOSTIC_H) $(TREE_FLOW_H) $(TREE_DUMP_H) tree-pass.h $(TIMEVAR_H) \\\n@@ -2219,7 +2220,7 @@ tree-ssa-address.o : tree-ssa-address.c $(TREE_FLOW_H) $(CONFIG_H) \\\n tree-ssa-loop-niter.o : tree-ssa-loop-niter.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(RTL_H) $(TREE_H) $(TM_P_H) $(CFGLOOP_H) $(PARAMS_H) \\\n    $(TREE_INLINE_H) output.h $(DIAGNOSTIC_H) $(TM_H) coretypes.h $(TREE_DUMP_H) \\\n-   toplev.h $(FLAGS_H) tree-pass.h $(SCEV_H) $(TREE_DATA_REF_H) $(BASIC_BLOCK_H) \\\n+   $(TOPLEV_H) $(FLAGS_H) tree-pass.h $(SCEV_H) $(TREE_DATA_REF_H) $(BASIC_BLOCK_H) \\\n    $(GGC_H) hard-reg-set.h tree-chrec.h intl.h\n tree-ssa-loop-ivcanon.o : tree-ssa-loop-ivcanon.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(RTL_H) $(TREE_H) $(TM_P_H) $(CFGLOOP_H) $(PARAMS_H) \\\n@@ -2235,7 +2236,7 @@ tree-ssa-loop-prefetch.o: tree-ssa-loop-prefetch.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    output.h $(DIAGNOSTIC_H) $(TIMEVAR_H) $(TM_H) coretypes.h $(TREE_DUMP_H) \\\n    tree-pass.h $(GGC_H) $(RECOG_H) insn-config.h $(HASHTAB_H) $(SCEV_H) \\\n    $(CFGLOOP_H) $(PARAMS_H) langhooks.h $(BASIC_BLOCK_H) hard-reg-set.h \\\n-   tree-chrec.h toplev.h langhooks.h $(TREE_INLINE_H) $(TREE_DATA_REF_H) \\\n+   tree-chrec.h $(TOPLEV_H) langhooks.h $(TREE_INLINE_H) $(TREE_DATA_REF_H) \\\n    $(OPTABS_H)\n tree-predcom.o: tree-predcom.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(TM_P_H) \\\n    $(CFGLOOP_H) $(TREE_FLOW_H) $(GGC_H) $(TREE_DATA_REF_H) $(SCEV_H) \\\n@@ -2265,7 +2266,7 @@ tree-ssa-math-opts.o : tree-ssa-math-opts.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\n    alloc-pool.h $(BASIC_BLOCK_H) $(TARGET_H)\n tree-ssa-alias-warnings.o : tree-ssa-alias-warnings.c \\\n    $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(TREE_DUMP_H) \\\n-   $(TREE_FLOW_H) $(PARAMS_H) $(FUNCTION_H) $(EXPR_H) toplev.h \\\n+   $(TREE_FLOW_H) $(PARAMS_H) $(FUNCTION_H) $(EXPR_H) $(TOPLEV_H) \\\n    tree-ssa-structalias.h tree-ssa-propagate.h langhooks.h alloc-pool.h \\\n    $(DIAGNOSTIC_H)\n tree-ssa-alias.o : tree-ssa-alias.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n@@ -2282,29 +2283,29 @@ tree-ssa-reassoc.o : tree-ssa-reassoc.c $(TREE_FLOW_H) $(CONFIG_H) \\\n tree-optimize.o : tree-optimize.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(RTL_H) $(TREE_H) $(TM_P_H) hard-reg-set.h $(EXPR_H) $(GGC_H) output.h \\\n    $(DIAGNOSTIC_H) $(BASIC_BLOCK_H) $(FLAGS_H) $(TIMEVAR_H) $(TM_H) coretypes.h \\\n-   $(TREE_DUMP_H) toplev.h $(FUNCTION_H) langhooks.h $(FLAGS_H) $(CGRAPH_H) \\\n+   $(TREE_DUMP_H) $(TOPLEV_H) $(FUNCTION_H) langhooks.h $(FLAGS_H) $(CGRAPH_H) \\\n    $(TREE_INLINE_H) tree-mudflap.h $(GGC_H) graph.h $(CGRAPH_H) tree-pass.h \\\n    $(CFGLOOP_H) except.h\n \n c-gimplify.o : c-gimplify.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) \\\n    $(C_TREE_H) $(C_COMMON_H) $(DIAGNOSTIC_H) $(TREE_GIMPLE_H) $(VARRAY_H) \\\n-   $(FLAGS_H) langhooks.h toplev.h $(RTL_H) $(TREE_FLOW_H) $(LANGHOOKS_DEF_H) \\\n+   $(FLAGS_H) langhooks.h $(TOPLEV_H) $(RTL_H) $(TREE_FLOW_H) $(LANGHOOKS_DEF_H) \\\n    $(TM_H) coretypes.h $(C_PRETTY_PRINT_H) $(CGRAPH_H) $(BASIC_BLOCK_H) \\\n    hard-reg-set.h $(TREE_DUMP_H) $(TREE_INLINE_H)\n gimplify.o : gimplify.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) \\\n    $(DIAGNOSTIC_H) $(TREE_GIMPLE_H) $(TREE_INLINE_H) $(VARRAY_H) langhooks.h \\\n    $(LANGHOOKS_DEF_H) $(TREE_FLOW_H) $(CGRAPH_H) $(TIMEVAR_H) $(TM_H) \\\n    coretypes.h except.h $(FLAGS_H) $(RTL_H) $(FUNCTION_H) $(EXPR_H) output.h \\\n-   $(GGC_H) gt-gimplify.h $(HASHTAB_H) $(TARGET_H) toplev.h $(OPTABS_H) \\\n+   $(GGC_H) gt-gimplify.h $(HASHTAB_H) $(TARGET_H) $(TOPLEV_H) $(OPTABS_H) \\\n    $(REAL_H) $(SPLAY_TREE_H)\n gimple-low.o : gimple-low.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) \\\n    $(DIAGNOSTIC_H) $(TREE_GIMPLE_H) $(TREE_INLINE_H) $(VARRAY_H) langhooks.h \\\n    $(LANGHOOKS_DEF_H) $(TREE_FLOW_H) $(TIMEVAR_H) $(TM_H) coretypes.h \\\n    except.h $(FLAGS_H) $(RTL_H) $(FUNCTION_H) $(EXPR_H) tree-pass.h \\\n-   $(HASHTAB_H) toplev.h\n+   $(HASHTAB_H) $(TOPLEV_H)\n omp-low.o : omp-low.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(RTL_H) $(TREE_GIMPLE_H) $(TREE_INLINE_H) langhooks.h $(DIAGNOSTIC_H) \\\n-   $(TREE_FLOW_H) $(TIMEVAR_H) $(FLAGS_H) $(EXPR_H) toplev.h tree-pass.h \\\n+   $(TREE_FLOW_H) $(TIMEVAR_H) $(FLAGS_H) $(EXPR_H) $(TOPLEV_H) tree-pass.h \\\n    $(GGC_H) except.h $(SPLAY_TREE_H) $(OPTABS_H) $(CFGLOOP_H)\n tree-browser.o : tree-browser.c tree-browser.def $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_H) $(TREE_INLINE_H) $(DIAGNOSTIC_H) $(HASHTAB_H) \\\n@@ -2327,22 +2328,22 @@ tree-vect-analyze.o: tree-vect-analyze.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(GGC_H) $(OPTABS_H) $(TREE_H) $(RECOG_H) $(BASIC_BLOCK_H) \\\n    $(DIAGNOSTIC_H) $(TREE_FLOW_H) $(TREE_DUMP_H) $(TIMEVAR_H) $(CFGLOOP_H) \\\n    tree-vectorizer.h $(TREE_DATA_REF_H) $(SCEV_H) $(EXPR_H) tree-chrec.h \\\n-   toplev.h $(RECOG_H)\n+   $(TOPLEV_H) $(RECOG_H)\n tree-vect-patterns.o: tree-vect-patterns.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(GGC_H) $(TREE_H) $(TARGET_H) $(BASIC_BLOCK_H) $(DIAGNOSTIC_H) \\\n    $(TREE_FLOW_H) $(TREE_DUMP_H) $(TIMEVAR_H) $(CFGLOOP_H) $(EXPR_H) \\\n-   $(OPTABS_H) $(PARAMS_H) $(TREE_DATA_REF_H) tree-vectorizer.h $(RECOG_H) toplev.h\n+   $(OPTABS_H) $(PARAMS_H) $(TREE_DATA_REF_H) tree-vectorizer.h $(RECOG_H) $(TOPLEV_H)\n tree-vect-transform.o: tree-vect-transform.c $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h $(TM_H) $(GGC_H) $(OPTABS_H) $(RECOG_H) $(TREE_H) $(RTL_H) \\\n    $(BASIC_BLOCK_H) $(DIAGNOSTIC_H) $(TREE_FLOW_H) $(TREE_DUMP_H) \\\n    $(TIMEVAR_H) $(CFGLOOP_H) $(TARGET_H) tree-pass.h $(EXPR_H) \\\n-   tree-vectorizer.h $(TREE_DATA_REF_H) $(SCEV_H) langhooks.h toplev.h \\\n+   tree-vectorizer.h $(TREE_DATA_REF_H) $(SCEV_H) langhooks.h $(TOPLEV_H) \\\n    tree-chrec.h\n tree-vectorizer.o: tree-vectorizer.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(GGC_H) $(OPTABS_H) $(TREE_H) $(RTL_H) $(BASIC_BLOCK_H) \\\n    $(DIAGNOSTIC_H) $(TREE_FLOW_H) $(TREE_DUMP_H) $(TIMEVAR_H) $(CFGLOOP_H) \\\n    tree-pass.h $(EXPR_H) $(RECOG_H) tree-vectorizer.h $(TREE_DATA_REF_H) $(SCEV_H) \\\n-   $(INPUT_H) $(TARGET_H) $(CFGLAYOUT_H) toplev.h tree-chrec.h\n+   $(INPUT_H) $(TARGET_H) $(CFGLAYOUT_H) $(TOPLEV_H) tree-chrec.h\n tree-loop-linear.o: tree-loop-linear.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(GGC_H) $(OPTABS_H) $(TREE_H) $(RTL_H) $(BASIC_BLOCK_H) \\\n    $(DIAGNOSTIC_H) $(TREE_FLOW_H) $(TREE_DUMP_H) $(TIMEVAR_H) $(CFGLOOP_H) \\\n@@ -2361,7 +2362,7 @@ tree-stdarg.o: tree-stdarg.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) $(FUNCTION_H) $(DIAGNOSTIC_H) $(TREE_FLOW_H) tree-pass.h \\\n    tree-stdarg.h $(TARGET_H) langhooks.h\n tree-object-size.o: tree-object-size.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-   $(TM_H) $(TREE_H) toplev.h $(DIAGNOSTIC_H) $(TREE_FLOW_H) tree-pass.h \\\n+   $(TM_H) $(TREE_H) $(TOPLEV_H) $(DIAGNOSTIC_H) $(TREE_FLOW_H) tree-pass.h \\\n    tree-ssa-propagate.h\n tree-gimple.o : tree-gimple.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(EXPR_H) \\\n    $(RTL_H) $(TREE_GIMPLE_H) $(TM_H) coretypes.h $(BITMAP_H) $(GGC_H) \\\n@@ -2370,36 +2371,36 @@ tree-mudflap.o : $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(TREE_INLINE_H) \\\n    $(TREE_GIMPLE_H) $(DIAGNOSTIC_H) $(HASHTAB_H) langhooks.h tree-mudflap.h \\\n    $(TM_H) coretypes.h $(TREE_DUMP_H) tree-pass.h $(CGRAPH_H) $(GGC_H) \\\n    gt-tree-mudflap.h $(BASIC_BLOCK_H) $(FLAGS_H) $(FUNCTION_H) hard-reg-set.h \\\n-   $(RTL_H) $(TM_P_H) $(TREE_FLOW_H) toplev.h\n+   $(RTL_H) $(TM_P_H) $(TREE_FLOW_H) $(TOPLEV_H)\n tree-nomudflap.o : $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(TREE_INLINE_H) \\\n    $(C_TREE_H) $(C_COMMON_H) $(TREE_GIMPLE_H) $(DIAGNOSTIC_H) $(HASHTAB_H) \\\n    output.h $(VARRAY_H) langhooks.h tree-mudflap.h $(TM_H) coretypes.h \\\n-   $(GGC_H) gt-tree-mudflap.h tree-pass.h toplev.h\n+   $(GGC_H) gt-tree-mudflap.h tree-pass.h $(TOPLEV_H)\n tree-pretty-print.o : tree-pretty-print.c $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_H) $(DIAGNOSTIC_H) $(REAL_H) $(HASHTAB_H) $(TREE_FLOW_H) \\\n    $(TM_H) coretypes.h tree-iterator.h tree-chrec.h langhooks.h tree-pass.h \\\n    value-prof.h fixed-value.h output.h\n fold-const.o : fold-const.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-   $(TREE_H) $(FLAGS_H) $(REAL_H) toplev.h $(HASHTAB_H) $(EXPR_H) $(RTL_H) \\\n+   $(TREE_H) $(FLAGS_H) $(REAL_H) $(TOPLEV_H) $(HASHTAB_H) $(EXPR_H) $(RTL_H) \\\n    $(GGC_H) $(TM_P_H) langhooks.h $(MD5_H) intl.h fixed-value.h $(TARGET_H)\n diagnostic.o : diagnostic.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-   $(TREE_H) version.h $(TM_P_H) $(FLAGS_H) $(INPUT_H) toplev.h intl.h \\\n+   $(TREE_H) version.h $(TM_P_H) $(FLAGS_H) $(INPUT_H) $(TOPLEV_H) intl.h \\\n    $(DIAGNOSTIC_H) langhooks.h $(LANGHOOKS_DEF_H) diagnostic.def opts.h\n-opts.o : opts.c opts.h options.h toplev.h $(CONFIG_H) $(SYSTEM_H) \\\n+opts.o : opts.c opts.h options.h $(TOPLEV_H) $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h $(TREE_H) $(TM_H) langhooks.h $(GGC_H) $(RTL_H) \\\n    output.h $(DIAGNOSTIC_H) $(TM_P_H) $(INSN_ATTR_H) intl.h $(TARGET_H) \\\n    $(FLAGS_H) $(PARAMS_H) tree-pass.h $(DBGCNT_H) debug.h varray.h\n opts-common.o : opts-common.c opts.h $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h intl.h\n targhooks.o : targhooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TREE_H) \\\n-   $(EXPR_H) $(TM_H) $(RTL_H) $(TM_P_H) $(FUNCTION_H) output.h toplev.h \\\n+   $(EXPR_H) $(TM_H) $(RTL_H) $(TM_P_H) $(FUNCTION_H) output.h $(TOPLEV_H) \\\n    $(MACHMODE_H) $(TARGET_DEF_H) $(TARGET_H) $(GGC_H) gt-targhooks.h \\\n    $(OPTABS_H) $(RECOG_H) reload.h\n \n toplev.o : toplev.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    version.h $(RTL_H) $(FUNCTION_H) $(FLAGS_H) xcoffout.h $(INPUT_H) \\\n    $(INSN_ATTR_H) output.h $(DIAGNOSTIC_H) debug.h insn-config.h intl.h \\\n-   $(RECOG_H) Makefile toplev.h dwarf2out.h sdbout.h dbxout.h $(EXPR_H) \\\n+   $(RECOG_H) Makefile $(TOPLEV_H) dwarf2out.h sdbout.h dbxout.h $(EXPR_H) \\\n    hard-reg-set.h $(BASIC_BLOCK_H) graph.h except.h $(REGS_H) $(TIMEVAR_H) \\\n    value-prof.h $(PARAMS_H) $(TM_P_H) reload.h dwarf2asm.h $(TARGET_H) \\\n    langhooks.h insn-flags.h $(CFGLAYOUT_H) $(CFGLOOP_H) hosthooks.h \\\n@@ -2411,7 +2412,7 @@ toplev.o : toplev.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n \n passes.o : passes.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(RTL_H) $(FUNCTION_H) $(FLAGS_H) xcoffout.h $(INPUT_H) $(INSN_ATTR_H) output.h \\\n-   $(DIAGNOSTIC_H) debug.h insn-config.h intl.h $(RECOG_H) toplev.h \\\n+   $(DIAGNOSTIC_H) debug.h insn-config.h intl.h $(RECOG_H) $(TOPLEV_H) \\\n    dwarf2out.h sdbout.h dbxout.h $(EXPR_H) hard-reg-set.h $(BASIC_BLOCK_H) \\\n    graph.h except.h $(REGS_H) $(TIMEVAR_H) value-prof.h \\\n    $(PARAMS_H) $(TM_P_H) reload.h dwarf2asm.h $(TARGET_H) \\\n@@ -2420,54 +2421,54 @@ passes.o : passes.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(GGC_H) $(INTEGRATE_H) $(CPPLIB_H) opts.h $(TREE_FLOW_H) $(TREE_INLINE_H) \\\n    gt-passes.h $(DF_H) $(PREDICT_H)\n \n-main.o : main.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) toplev.h\n+main.o : main.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TOPLEV_H)\n \n host-default.o : host-default.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    hosthooks.h $(HOSTHOOKS_DEF_H)\n \n rtl-error.o: rtl-error.c $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-   $(INSN_ATTR_H) insn-config.h $(INPUT_H) toplev.h intl.h $(DIAGNOSTIC_H) \\\n+   $(INSN_ATTR_H) insn-config.h $(INPUT_H) $(TOPLEV_H) intl.h $(DIAGNOSTIC_H) \\\n    $(CONFIG_H) varray.h\n \n rtl.o : rtl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-  $(GGC_H) $(BCONFIG_H) insn-notes.def reg-notes.def toplev.h $(REAL_H)\n+  $(GGC_H) $(BCONFIG_H) insn-notes.def reg-notes.def $(TOPLEV_H) $(REAL_H)\n \n print-rtl.o : print-rtl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n     $(RTL_H) $(TREE_H) hard-reg-set.h $(BASIC_BLOCK_H) $(FLAGS_H) \\\n     $(BCONFIG_H) $(REAL_H)\n-rtlanal.o : rtlanal.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) toplev.h \\\n+rtlanal.o : rtlanal.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TOPLEV_H) \\\n    $(RTL_H) hard-reg-set.h $(TM_P_H) insn-config.h $(RECOG_H) $(REAL_H) \\\n    $(FLAGS_H) $(REGS_H) output.h $(TARGET_H) $(FUNCTION_H) $(TREE_H) \\\n    $(DF_H)\n \n varasm.o : varasm.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(RTL_H) $(FLAGS_H) $(FUNCTION_H) $(EXPR_H) hard-reg-set.h $(REGS_H) \\\n-   output.h $(C_PRAGMA_H) toplev.h xcoffout.h debug.h $(GGC_H) $(TM_P_H) \\\n+   output.h $(C_PRAGMA_H) $(TOPLEV_H) xcoffout.h debug.h $(GGC_H) $(TM_P_H) \\\n    $(HASHTAB_H) $(TARGET_H) langhooks.h gt-varasm.h $(BASIC_BLOCK_H) \\\n    $(CFGLAYOUT_H) $(CGRAPH_H) targhooks.h tree-mudflap.h $(REAL_H) tree-iterator.h\n function.o : function.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(CFGLAYOUT_H) $(TREE_GIMPLE_H) $(FLAGS_H) $(FUNCTION_H) $(EXPR_H) \\\n    $(OPTABS_H) libfuncs.h $(REGS_H) hard-reg-set.h insn-config.h $(RECOG_H) \\\n-   output.h toplev.h except.h $(HASHTAB_H) $(GGC_H) $(TM_P_H) langhooks.h \\\n+   output.h $(TOPLEV_H) except.h $(HASHTAB_H) $(GGC_H) $(TM_P_H) langhooks.h \\\n    gt-function.h $(TARGET_H) $(BASIC_BLOCK_H) $(INTEGRATE_H) $(PREDICT_H) \\\n    tree-pass.h $(DF_H) $(TIMEVAR_H) vecprim.h\n statistics.o : statistics.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    tree-pass.h $(TREE_DUMP_H) $(HASHTAB_H) statistics.h $(TM_H) $(FUNCTION_H)\n stmt.o : stmt.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) $(FUNCTION_H) insn-config.h hard-reg-set.h $(EXPR_H) \\\n-   libfuncs.h except.h $(RECOG_H) toplev.h output.h $(GGC_H) $(TM_P_H) \\\n+   libfuncs.h except.h $(RECOG_H) $(TOPLEV_H) output.h $(GGC_H) $(TM_P_H) \\\n    langhooks.h $(PREDICT_H) $(OPTABS_H) $(TARGET_H) $(MACHMODE_H) \\\n    $(REGS_H) alloc-pool.h\n except.o : except.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) except.h $(FUNCTION_H) $(EXPR_H) libfuncs.h \\\n    langhooks.h insn-config.h hard-reg-set.h $(BASIC_BLOCK_H) output.h \\\n-   dwarf2asm.h dwarf2out.h toplev.h $(HASHTAB_H) intl.h $(GGC_H) \\\n+   dwarf2asm.h dwarf2out.h $(TOPLEV_H) $(HASHTAB_H) intl.h $(GGC_H) \\\n    gt-except.h $(CGRAPH_H) $(INTEGRATE_H) $(DIAGNOSTIC_H) dwarf2.h \\\n    $(TARGET_H) $(TM_P_H) tree-pass.h $(TIMEVAR_H)\n expr.o : expr.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) $(FUNCTION_H) $(REGS_H) $(EXPR_H) $(OPTABS_H) \\\n    libfuncs.h $(INSN_ATTR_H) insn-config.h $(RECOG_H) output.h \\\n-   typeclass.h hard-reg-set.h toplev.h hard-reg-set.h except.h reload.h \\\n+   typeclass.h hard-reg-set.h $(TOPLEV_H) hard-reg-set.h except.h reload.h \\\n    $(GGC_H) langhooks.h intl.h $(TM_P_H) $(REAL_H) $(TARGET_H) \\\n    tree-iterator.h gt-expr.h $(MACHMODE_H) $(TIMEVAR_H) $(TREE_FLOW_H) \\\n    tree-pass.h $(DF_H) $(DIAGNOSTIC_H) vecprim.h\n@@ -2477,37 +2478,37 @@ dojump.o : dojump.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_\n builtins.o : builtins.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(TREE_GIMPLE_H) $(FLAGS_H) $(TARGET_H) $(FUNCTION_H) $(REGS_H) \\\n    $(EXPR_H) $(OPTABS_H) insn-config.h $(RECOG_H) output.h typeclass.h \\\n-   hard-reg-set.h toplev.h hard-reg-set.h except.h $(TM_P_H) $(PREDICT_H) \\\n+   hard-reg-set.h $(TOPLEV_H) hard-reg-set.h except.h $(TM_P_H) $(PREDICT_H) \\\n    libfuncs.h $(REAL_H) langhooks.h $(BASIC_BLOCK_H) tree-mudflap.h \\\n    $(BUILTINS_DEF) $(MACHMODE_H) $(DIAGNOSTIC_H) $(TREE_FLOW_H) value-prof.h\n calls.o : calls.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) $(EXPR_H) $(OPTABS_H) langhooks.h $(TARGET_H) \\\n-   libfuncs.h $(REGS_H) toplev.h output.h $(FUNCTION_H) $(TIMEVAR_H) $(TM_P_H) \\\n+   libfuncs.h $(REGS_H) $(TOPLEV_H) output.h $(FUNCTION_H) $(TIMEVAR_H) $(TM_P_H) \\\n    $(CGRAPH_H) except.h sbitmap.h $(DBGCNT_H)\n expmed.o : expmed.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n    $(FLAGS_H) insn-config.h $(EXPR_H) $(OPTABS_H) $(RECOG_H) $(REAL_H) \\\n-   toplev.h $(TM_P_H) langhooks.h $(DF_H) $(TARGET_H)\n+   $(TOPLEV_H) $(TM_P_H) langhooks.h $(DF_H) $(TARGET_H)\n explow.o : explow.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n    $(FLAGS_H) hard-reg-set.h insn-config.h $(EXPR_H) $(OPTABS_H) $(RECOG_H) \\\n-   toplev.h $(FUNCTION_H) $(GGC_H) $(TM_P_H) langhooks.h gt-explow.h \\\n+   $(TOPLEV_H) $(FUNCTION_H) $(GGC_H) $(TM_P_H) langhooks.h gt-explow.h \\\n    $(TARGET_H) output.h\n optabs.o : optabs.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) insn-config.h $(EXPR_H) $(OPTABS_H) libfuncs.h \\\n-   $(RECOG_H) reload.h toplev.h $(GGC_H) $(REAL_H) $(TM_P_H) except.h \\\n+   $(RECOG_H) reload.h $(TOPLEV_H) $(GGC_H) $(REAL_H) $(TM_P_H) except.h \\\n    gt-optabs.h $(BASIC_BLOCK_H) $(TARGET_H) $(FUNCTION_H)\n dbxout.o : dbxout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(RTL_H) $(FLAGS_H) $(REGS_H) debug.h $(TM_P_H) $(TARGET_H) $(FUNCTION_H) \\\n    langhooks.h insn-config.h reload.h $(GSTAB_H) xcoffout.h output.h dbxout.h \\\n-   toplev.h $(GGC_H) $(OBSTACK_H) $(EXPR_H) gt-dbxout.h\n+   $(TOPLEV_H) $(GGC_H) $(OBSTACK_H) $(EXPR_H) gt-dbxout.h\n debug.o : debug.c debug.h $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\n sdbout.o : sdbout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) debug.h \\\n    $(TREE_H) $(GGC_H) $(RTL_H) $(REGS_H) $(FLAGS_H) insn-config.h \\\n-   output.h toplev.h $(TM_P_H) gsyms.h langhooks.h $(TARGET_H) sdbout.h \\\n+   output.h $(TOPLEV_H) $(TM_P_H) gsyms.h langhooks.h $(TARGET_H) sdbout.h \\\n    gt-sdbout.h reload.h $(VARRAY_H)\n dwarf2out.o : dwarf2out.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) version.h $(RTL_H) dwarf2.h debug.h $(FLAGS_H) insn-config.h \\\n    output.h $(DIAGNOSTIC_H) $(REAL_H) hard-reg-set.h $(REGS_H) $(EXPR_H) \\\n-   libfuncs.h toplev.h dwarf2out.h reload.h $(GGC_H) except.h dwarf2asm.h \\\n+   libfuncs.h $(TOPLEV_H) dwarf2out.h reload.h $(GGC_H) except.h dwarf2asm.h \\\n    $(TM_P_H) langhooks.h $(HASHTAB_H) gt-dwarf2out.h $(TARGET_H) $(CGRAPH_H) \\\n    $(MD5_H) $(INPUT_H) $(FUNCTION_H) $(VARRAY_H)\n dwarf2asm.o : dwarf2asm.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n@@ -2516,39 +2517,39 @@ dwarf2asm.o : dwarf2asm.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n vmsdbgout.o : vmsdbgout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) version.h \\\n    $(FLAGS_H) $(RTL_H) output.h vmsdbg.h debug.h langhooks.h $(FUNCTION_H) $(TARGET_H)\n xcoffout.o : xcoffout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-   $(TREE_H) $(RTL_H) xcoffout.h $(FLAGS_H) toplev.h output.h dbxout.h \\\n+   $(TREE_H) $(RTL_H) xcoffout.h $(FLAGS_H) $(TOPLEV_H) output.h dbxout.h \\\n    $(GGC_H) $(TARGET_H) debug.h $(GSTAB_H) xcoff.h\n emit-rtl.o : emit-rtl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) $(FUNCTION_H) $(REGS_H) insn-config.h $(RECOG_H) \\\n-   $(GGC_H) $(EXPR_H) hard-reg-set.h $(BITMAP_H) toplev.h $(BASIC_BLOCK_H) \\\n+   $(GGC_H) $(EXPR_H) hard-reg-set.h $(BITMAP_H) $(TOPLEV_H) $(BASIC_BLOCK_H) \\\n    $(HASHTAB_H) $(TM_P_H) debug.h langhooks.h tree-pass.h gt-emit-rtl.h \\\n    $(REAL_H) $(DF_H)\n real.o : real.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n-   toplev.h $(TM_P_H) $(REAL_H) dfp.h\n+   $(TOPLEV_H) $(TM_P_H) $(REAL_H) dfp.h\n dfp.o : dfp.c dfp.h $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\t$(TREE_H) \\\n-   toplev.h $(TM_P_H) $(REAL_H) $(DECNUM_H)\n+   $(TOPLEV_H) $(TM_P_H) $(REAL_H) $(DECNUM_H)\n fixed-value.o: fixed-value.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-   $(TREE_H) fixed-value.h $(REAL_H) toplev.h\n+   $(TREE_H) fixed-value.h $(REAL_H) $(TOPLEV_H)\n integrate.o : integrate.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(TREE_H) $(FLAGS_H) debug.h $(INTEGRATE_H) insn-config.h \\\n    $(EXPR_H) $(REAL_H) $(REGS_H) intl.h $(FUNCTION_H) output.h $(RECOG_H) \\\n-   except.h toplev.h $(PARAMS_H) $(TM_P_H) $(TARGET_H) langhooks.h \\\n+   except.h $(TOPLEV_H) $(PARAMS_H) $(TM_P_H) $(TARGET_H) langhooks.h \\\n    gt-integrate.h $(GGC_H) tree-pass.h $(DF_H)\n jump.o : jump.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(FLAGS_H) hard-reg-set.h $(REGS_H) insn-config.h $(RECOG_H) $(EXPR_H) \\\n    $(REAL_H) except.h $(FUNCTION_H) tree-pass.h $(DIAGNOSTIC_H) \\\n-   toplev.h $(INSN_ATTR_H) $(TM_P_H) reload.h $(PREDICT_H) \\\n+   $(TOPLEV_H) $(INSN_ATTR_H) $(TM_P_H) reload.h $(PREDICT_H) \\\n    $(TIMEVAR_H) $(TARGET_H)\n simplify-rtx.o : simplify-rtx.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) $(REAL_H) insn-config.h \\\n-   $(RECOG_H) $(EXPR_H) toplev.h output.h $(FUNCTION_H) $(GGC_H) $(TM_P_H) \\\n+   $(RECOG_H) $(EXPR_H) $(TOPLEV_H) output.h $(FUNCTION_H) $(GGC_H) $(TM_P_H) \\\n    $(TREE_H) $(TARGET_H)\n cgraph.o : cgraph.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n-   langhooks.h toplev.h $(FLAGS_H) $(GGC_H) $(TARGET_H) $(CGRAPH_H) \\\n+   langhooks.h $(TOPLEV_H) $(FLAGS_H) $(GGC_H) $(TARGET_H) $(CGRAPH_H) \\\n    gt-cgraph.h output.h intl.h $(BASIC_BLOCK_H) debug.h $(HASHTAB_H) \\\n    $(TREE_INLINE_H) $(VARRAY_H) $(TREE_DUMP_H) $(TREE_FLOW_H)\n cgraphunit.o : cgraphunit.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-   $(TREE_H) langhooks.h $(TREE_INLINE_H) toplev.h $(FLAGS_H) $(GGC_H) \\\n+   $(TREE_H) langhooks.h $(TREE_INLINE_H) $(TOPLEV_H) $(FLAGS_H) $(GGC_H) \\\n    $(TARGET_H) $(CGRAPH_H) intl.h pointer-set.h $(FUNCTION_H) $(TREE_GIMPLE_H) \\\n    $(TREE_FLOW_H) tree-pass.h $(C_COMMON_H) debug.h $(DIAGNOSTIC_H) \\\n    $(FIBHEAP_H) output.h $(PARAMS_H) $(RTL_H) $(TIMEVAR_H) $(IPA_PROP_H) \\\n@@ -2571,7 +2572,7 @@ ipa-cp.o : ipa-cp.c $(CONFIG_H) $(SYSTEM_H) coretypes.h  \\\n    $(FLAGS_H) $(TIMEVAR_H) $(DIAGNOSTIC_H) $(TREE_DUMP_H) $(TREE_INLINE_H)\n matrix-reorg.o : matrix-reorg.c $(CONFIG_H) $(SYSTEM_H) coretypes.h  \\\n    $(TM_H) $(TREE_H) $(RTL_H) $(C_TREE_H) $(TREE_INLINE_H) $(TREE_FLOW_H) \\\n-   tree-flow-inline.h langhooks.h $(HASHTAB_H) toplev.h $(FLAGS_H) $(GGC_H) \\\n+   tree-flow-inline.h langhooks.h $(HASHTAB_H) $(TOPLEV_H) $(FLAGS_H) $(GGC_H) \\\n    debug.h $(TARGET_H) $(CGRAPH_H) $(DIAGNOSTIC_H) $(TIMEVAR_H) $(PARAMS_H) \\\n    $(FIBHEAP_H) $(C_COMMON_H) intl.h $(FUNCTION_H) $(BASIC_BLOCK_H) $(CFGLOOP_H) \\\n    tree-iterator.h tree-pass.h opts.h $(TREE_DATA_REF_H) tree-chrec.h \\\n@@ -2602,21 +2603,21 @@ ipa-type-escape.o : ipa-type-escape.c $(CONFIG_H) $(SYSTEM_H) \\\n    $(TIMEVAR_H) $(DIAGNOSTIC_H) $(FUNCTION_H)\n ipa-struct-reorg.o: ipa-struct-reorg.c ipa-struct-reorg.h $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h $(TM_H) $(GGC_H) $(TREE_H) $(RTL_H) $(TREE_GIMPLE_H) tree-inline.h \\\n-   $(TREE_FLOW_H) langhooks.h pointer-set.h $(HASHTAB_H) $(C_TREE_H) toplev.h \\\n+   $(TREE_FLOW_H) langhooks.h pointer-set.h $(HASHTAB_H) $(C_TREE_H) $(TOPLEV_H) \\\n    $(FLAGS_H) debug.h $(TARGET_H) $(CGRAPH_H) $(DIAGNOSTIC_H) $(TIMEVAR_H) \\\n    $(PARAMS_H) $(FIBHEAP_H) intl.h $(FUNCTION_H) $(BASIC_BLOCK_H) tree-iterator.h \\\n    tree-pass.h opts.h $(IPA_TYPE_ESCAPE_H) $(TREE_DUMP_H) $(C_COMMON_H)\n \n coverage.o : coverage.c $(GCOV_IO_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(RTL_H) $(TREE_H) $(FLAGS_H) output.h $(REGS_H) $(EXPR_H) \\\n-   $(FUNCTION_H) toplev.h $(GGC_H) langhooks.h $(COVERAGE_H) gt-coverage.h \\\n+   $(FUNCTION_H) $(TOPLEV_H) $(GGC_H) langhooks.h $(COVERAGE_H) gt-coverage.h \\\n    $(HASHTAB_H) tree-iterator.h $(CGRAPH_H) tree-pass.h gcov-io.c\n cselib.o : cselib.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(REGS_H) hard-reg-set.h $(FLAGS_H) $(REAL_H) insn-config.h $(RECOG_H) \\\n-   $(EMIT_RTL_H) toplev.h output.h $(FUNCTION_H) cselib.h $(GGC_H) $(TM_P_H) \\\n+   $(EMIT_RTL_H) $(TOPLEV_H) output.h $(FUNCTION_H) cselib.h $(GGC_H) $(TM_P_H) \\\n    gt-cselib.h $(PARAMS_H) alloc-pool.h $(HASHTAB_H) $(TARGET_H)\n cse.o : cse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(REGS_H) \\\n-   hard-reg-set.h $(FLAGS_H) insn-config.h $(RECOG_H) $(EXPR_H) toplev.h \\\n+   hard-reg-set.h $(FLAGS_H) insn-config.h $(RECOG_H) $(EXPR_H) $(TOPLEV_H) \\\n    output.h $(FUNCTION_H) $(BASIC_BLOCK_H) $(GGC_H) $(TM_P_H) $(TIMEVAR_H) \\\n    except.h $(TARGET_H) $(PARAMS_H) rtlhooks-def.h tree-pass.h $(REAL_H) \\\n    $(DF_H) $(DBGCNT_H)\n@@ -2628,24 +2629,24 @@ dse.o : dse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(RECOG_H) $(EXPR_H) $(DF_H) cselib.h $(DBGCNT_H) $(TIMEVAR_H) tree-pass.h \\\n    alloc-pool.h $(ALIAS_H) dse.h $(OPTABS_H)\n fwprop.o : fwprop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-   toplev.h insn-config.h $(RECOG_H) $(FLAGS_H) $(OBSTACK_H) $(BASIC_BLOCK_H) \\\n+   $(TOPLEV_H) insn-config.h $(RECOG_H) $(FLAGS_H) $(OBSTACK_H) $(BASIC_BLOCK_H) \\\n    output.h $(DF_H) alloc-pool.h $(TIMEVAR_H) tree-pass.h $(TARGET_H) $(TM_P_H) \\\n    $(CFGLOOP_H) $(EMIT_RTL_H)\n web.o : web.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-   hard-reg-set.h $(FLAGS_H) $(BASIC_BLOCK_H) $(FUNCTION_H) output.h toplev.h \\\n+   hard-reg-set.h $(FLAGS_H) $(BASIC_BLOCK_H) $(FUNCTION_H) output.h $(TOPLEV_H) \\\n    $(DF_H) $(OBSTACK_H) $(TIMEVAR_H) tree-pass.h\n see.o : see.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    hard-reg-set.h $(FLAGS_H) $(BASIC_BLOCK_H) $(FUNCTION_H) output.h \\\n    $(DF_H) $(OBSTACK_H) $(TIMEVAR_H) tree-pass.h $(RECOG_H) $(EXPR_H) $(SPLAY_TREE_H) \\\n    $(HASHTAB_H) $(REGS_H) dce.h\n gcse.o : gcse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(REGS_H) hard-reg-set.h $(FLAGS_H) $(REAL_H) insn-config.h $(GGC_H) \\\n-   $(RECOG_H) $(EXPR_H) $(BASIC_BLOCK_H) $(FUNCTION_H) output.h toplev.h \\\n+   $(RECOG_H) $(EXPR_H) $(BASIC_BLOCK_H) $(FUNCTION_H) output.h $(TOPLEV_H) \\\n    $(TM_P_H) $(PARAMS_H) except.h gt-gcse.h $(TREE_H) cselib.h $(TIMEVAR_H) \\\n    intl.h $(OBSTACK_H) tree-pass.h $(DF_H) $(DBGCNT_H)\n resource.o : resource.c $(CONFIG_H) $(RTL_H) hard-reg-set.h $(SYSTEM_H) \\\n    coretypes.h $(TM_H) $(REGS_H) $(FLAGS_H) output.h $(RESOURCE_H) $(DF_H) \\\n-   $(FUNCTION_H) toplev.h $(INSN_ATTR_H) except.h $(PARAMS_H) $(TM_P_H)\n+   $(FUNCTION_H) $(TOPLEV_H) $(INSN_ATTR_H) except.h $(PARAMS_H) $(TM_P_H)\n lcm.o : lcm.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(REGS_H) \\\n    hard-reg-set.h $(FLAGS_H) insn-config.h $(INSN_ATTR_H) $(RECOG_H) \\\n    $(BASIC_BLOCK_H) $(TM_P_H) $(FUNCTION_H) output.h $(REAL_H)\n@@ -2666,7 +2667,7 @@ tree-ssa-ccp.o : tree-ssa-ccp.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(RTL_H) $(TREE_H) $(TM_P_H) $(EXPR_H) $(GGC_H) output.h \\\n    $(DIAGNOSTIC_H) $(FUNCTION_H) $(TIMEVAR_H) $(TM_H) coretypes.h \\\n    $(TREE_DUMP_H) $(BASIC_BLOCK_H) tree-pass.h langhooks.h \\\n-   tree-ssa-propagate.h value-prof.h $(FLAGS_H) $(TARGET_H) toplev.h\n+   tree-ssa-propagate.h value-prof.h $(FLAGS_H) $(TARGET_H) $(TOPLEV_H)\n tree-sra.o : tree-sra.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) \\\n     $(TM_P_H) $(TREE_FLOW_H) $(DIAGNOSTIC_H) $(TREE_INLINE_H) \\\n     $(TIMEVAR_H) $(TM_H) coretypes.h $(TREE_DUMP_H) $(TREE_GIMPLE_H) \\\n@@ -2709,55 +2710,55 @@ var-tracking.o : var-tracking.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(REGS_H) $(EXPR_H) $(TIMEVAR_H) tree-pass.h\n profile.o : profile.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) output.h $(REGS_H) $(EXPR_H) $(FUNCTION_H) \\\n-   toplev.h $(COVERAGE_H) $(TREE_FLOW_H) value-prof.h cfghooks.h \\\n+   $(TOPLEV_H) $(COVERAGE_H) $(TREE_FLOW_H) value-prof.h cfghooks.h \\\n    $(CFGLOOP_H) $(TIMEVAR_H) tree-pass.h\n tree-profile.o : tree-profile.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(RTL_H) $(TREE_H) $(FLAGS_H) output.h $(REGS_H) $(EXPR_H) \\\n-   $(FUNCTION_H) toplev.h $(COVERAGE_H) $(TREE_H) value-prof.h $(TREE_DUMP_H) \\\n+   $(FUNCTION_H) $(TOPLEV_H) $(COVERAGE_H) $(TREE_H) value-prof.h $(TREE_DUMP_H) \\\n    tree-pass.h $(TREE_FLOW_H) $(TIMEVAR_H) $(GGC_H) gt-tree-profile.h $(CGRAPH_H)\n value-prof.o : value-prof.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(BASIC_BLOCK_H) hard-reg-set.h value-prof.h $(EXPR_H) output.h $(FLAGS_H) \\\n    $(RECOG_H) insn-config.h $(OPTABS_H) $(REGS_H) $(GGC_H) $(DIAGNOSTIC_H) \\\n    $(TREE_H) $(COVERAGE_H) $(RTL_H) $(GCOV_IO_H) $(TREE_FLOW_H) \\\n-   tree-flow-inline.h $(TIMEVAR_H) tree-pass.h toplev.h pointer-set.h\n+   tree-flow-inline.h $(TIMEVAR_H) tree-pass.h $(TOPLEV_H) pointer-set.h\n loop-doloop.o : loop-doloop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(FLAGS_H) $(EXPR_H) hard-reg-set.h $(BASIC_BLOCK_H) $(TM_P_H) \\\n-   toplev.h $(CFGLOOP_H) output.h $(PARAMS_H) $(TARGET_H)\n+   $(TOPLEV_H) $(CFGLOOP_H) output.h $(PARAMS_H) $(TARGET_H)\n alloc-pool.o : alloc-pool.c $(CONFIG_H) $(SYSTEM_H) alloc-pool.h $(HASHTAB_H)\n auto-inc-dec.o : auto-inc-dec.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) $(RTL_H) $(TM_P_H) hard-reg-set.h $(BASIC_BLOCK_H) insn-config.h \\\n-   $(REGS_H) $(FLAGS_H) output.h $(FUNCTION_H) except.h toplev.h $(RECOG_H) \\\n+   $(REGS_H) $(FLAGS_H) output.h $(FUNCTION_H) except.h $(TOPLEV_H) $(RECOG_H) \\\n    $(EXPR_H) $(TIMEVAR_H) tree-pass.h $(DF_H) $(DBGCNT_H)\n cfg.o : cfg.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(FLAGS_H) \\\n-   $(REGS_H) hard-reg-set.h output.h toplev.h $(FUNCTION_H) except.h $(GGC_H) \\\n+   $(REGS_H) hard-reg-set.h output.h $(TOPLEV_H) $(FUNCTION_H) except.h $(GGC_H) \\\n    $(TM_P_H) $(TIMEVAR_H) $(OBSTACK_H) $(TREE_H) alloc-pool.h \\\n    $(HASHTAB_H) $(DF_H) $(CFGLOOP_H) $(TREE_FLOW_H) tree-pass.h\n cfghooks.o: cfghooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-   $(TREE_H) $(BASIC_BLOCK_H) $(TREE_FLOW_H) $(TIMEVAR_H) toplev.h $(CFGLOOP_H)\n+   $(TREE_H) $(BASIC_BLOCK_H) $(TREE_FLOW_H) $(TIMEVAR_H) $(TOPLEV_H) $(CFGLOOP_H)\n cfgexpand.o : cfgexpand.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(RTL_H) $(TREE_H) $(TM_P_H) $(EXPR_H) $(FUNCTION_H) $(TIMEVAR_H) $(TM_H) \\\n    coretypes.h $(TREE_DUMP_H) except.h langhooks.h tree-pass.h $(RTL_H) \\\n-   $(DIAGNOSTIC_H) toplev.h $(BASIC_BLOCK_H) $(FLAGS_H) debug.h $(PARAMS_H) \\\n+   $(DIAGNOSTIC_H) $(TOPLEV_H) $(BASIC_BLOCK_H) $(FLAGS_H) debug.h $(PARAMS_H) \\\n    value-prof.h $(TREE_INLINE_H) $(TARGET_H)\n cfgrtl.o : cfgrtl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(FLAGS_H) insn-config.h $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h \\\n-   output.h toplev.h $(FUNCTION_H) except.h $(TM_P_H) insn-config.h $(EXPR_H) \\\n+   output.h $(TOPLEV_H) $(FUNCTION_H) except.h $(TM_P_H) insn-config.h $(EXPR_H) \\\n    $(CFGLAYOUT_H) $(CFGLOOP_H) $(OBSTACK_H) $(TARGET_H) $(TREE_H) \\\n    tree-pass.h $(DF_H) $(GGC_H)\n cfganal.o : cfganal.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(BASIC_BLOCK_H) hard-reg-set.h insn-config.h $(RECOG_H) $(TM_P_H) \\\n-   $(TIMEVAR_H) $(OBSTACK_H) toplev.h vecprim.h\n+   $(TIMEVAR_H) $(OBSTACK_H) $(TOPLEV_H) vecprim.h\n cfgbuild.o : cfgbuild.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-   $(FLAGS_H) $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h output.h toplev.h \\\n+   $(FLAGS_H) $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h output.h $(TOPLEV_H) \\\n    $(FUNCTION_H) except.h $(TIMEVAR_H) $(TREE_H)\n cfgcleanup.o : cfgcleanup.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(TIMEVAR_H) hard-reg-set.h output.h $(FLAGS_H) $(RECOG_H) \\\n-   toplev.h insn-config.h cselib.h $(TARGET_H) $(TM_P_H) $(PARAMS_H) \\\n+   $(TOPLEV_H) insn-config.h cselib.h $(TARGET_H) $(TM_P_H) $(PARAMS_H) \\\n    $(REGS_H) $(EMIT_RTL_H) $(CFGLAYOUT_H) tree-pass.h $(CFGLOOP_H) $(EXPR_H) \\\n    $(DF_H) $(DBGCNT_H) dce.h\n cfgloop.o : cfgloop.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) coretypes.h $(TM_H) \\\n    $(BASIC_BLOCK_H) hard-reg-set.h $(CFGLOOP_H) $(FLAGS_H) $(FUNCTION_H) \\\n-   $(OBSTACK_H) toplev.h $(TREE_FLOW_H) $(TREE_H) pointer-set.h output.h \\\n+   $(OBSTACK_H) $(TOPLEV_H) $(TREE_FLOW_H) $(TREE_H) pointer-set.h output.h \\\n    $(GGC_H)\n cfgloopanal.o : cfgloopanal.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) \\\n    $(BASIC_BLOCK_H) hard-reg-set.h $(CFGLOOP_H) $(EXPR_H) coretypes.h $(TM_H) \\\n@@ -2766,7 +2767,7 @@ graphds.o : graphds.c graphds.h $(CONFIG_H) $(SYSTEM_H) $(BITMAP_H) $(OBSTACK_H)\n    coretypes.h vec.h vecprim.h\n loop-iv.o : loop-iv.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(BASIC_BLOCK_H) \\\n    hard-reg-set.h $(CFGLOOP_H) $(EXPR_H) coretypes.h $(TM_H) $(OBSTACK_H) \\\n-   output.h intl.h toplev.h $(DF_H) $(HASHTAB_H)\n+   output.h intl.h $(TOPLEV_H) $(DF_H) $(HASHTAB_H)\n loop-invariant.o : loop-invariant.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) \\\n    $(BASIC_BLOCK_H) hard-reg-set.h $(CFGLOOP_H) $(EXPR_H) $(RECOG_H) coretypes.h \\\n    $(TM_H) $(TM_P_H) $(FUNCTION_H) $(FLAGS_H) $(DF_H) $(OBSTACK_H) output.h \\\n@@ -2785,74 +2786,74 @@ loop-unroll.o: loop-unroll.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TM_H) \\\n    output.h $(EXPR_H) coretypes.h $(TM_H) $(HASHTAB_H) $(RECOG_H) \\\n    $(OBSTACK_H)\n dominance.o : dominance.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-   hard-reg-set.h $(BASIC_BLOCK_H) et-forest.h $(OBSTACK_H) toplev.h \\\n+   hard-reg-set.h $(BASIC_BLOCK_H) et-forest.h $(OBSTACK_H) $(TOPLEV_H) \\\n    $(TIMEVAR_H) graphds.h vecprim.h pointer-set.h\n et-forest.o : et-forest.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    et-forest.h alloc-pool.h $(BASIC_BLOCK_H)\n combine.o : combine.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(FLAGS_H) $(FUNCTION_H) insn-config.h $(INSN_ATTR_H) $(REGS_H) $(EXPR_H) \\\n    rtlhooks-def.h $(BASIC_BLOCK_H) $(RECOG_H) $(REAL_H) hard-reg-set.h \\\n-   toplev.h $(TM_P_H) $(TREE_H) $(TARGET_H) output.h $(PARAMS_H) $(OPTABS_H) \\\n+   $(TOPLEV_H) $(TM_P_H) $(TREE_H) $(TARGET_H) output.h $(PARAMS_H) $(OPTABS_H) \\\n    insn-codes.h $(TIMEVAR_H) tree-pass.h $(DF_H) vecprim.h $(CGRAPH_H)\n regclass.o : regclass.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    hard-reg-set.h $(FLAGS_H) $(BASIC_BLOCK_H) addresses.h $(REGS_H) insn-config.h \\\n-   $(RECOG_H) reload.h $(REAL_H) toplev.h $(FUNCTION_H) output.h $(GGC_H) \\\n+   $(RECOG_H) reload.h $(REAL_H) $(TOPLEV_H) $(FUNCTION_H) output.h $(GGC_H) \\\n    $(TM_P_H) $(EXPR_H) $(TIMEVAR_H) gt-regclass.h $(HASHTAB_H) \\\n    $(TARGET_H) tree-pass.h $(DF_H)\n local-alloc.o : local-alloc.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(FLAGS_H) $(REGS_H) hard-reg-set.h insn-config.h $(RECOG_H) \\\n-   output.h $(FUNCTION_H) $(INSN_ATTR_H) toplev.h  except.h reload.h $(TM_P_H) \\\n+   output.h $(FUNCTION_H) $(INSN_ATTR_H) $(TOPLEV_H)  except.h reload.h $(TM_P_H) \\\n    $(GGC_H) $(INTEGRATE_H) $(TIMEVAR_H) tree-pass.h $(DF_H) $(DBGCNT_H)\n bitmap.o : bitmap.c $(CONFIG_H) $(SYSTEM_H)  coretypes.h $(TM_H) $(RTL_H) \\\n    $(FLAGS_H) $(GGC_H) gt-bitmap.h $(BITMAP_H) $(OBSTACK_H) $(HASHTAB_H)\n global.o : global.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(FLAGS_H) reload.h $(FUNCTION_H) $(RECOG_H) $(REGS_H) hard-reg-set.h \\\n-   insn-config.h output.h toplev.h $(TM_P_H) $(MACHMODE_H) tree-pass.h \\\n+   insn-config.h output.h $(TOPLEV_H) $(TM_P_H) $(MACHMODE_H) tree-pass.h \\\n    $(TIMEVAR_H) vecprim.h $(DF_H) $(DBGCNT_H) $(RA_H)\n ra-conflict.o : ra-conflict.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(FLAGS_H) reload.h $(FUNCTION_H) $(RECOG_H) $(REGS_H) hard-reg-set.h \\\n-   insn-config.h output.h toplev.h $(TM_P_H) $(MACHMODE_H) tree-pass.h \\\n+   insn-config.h output.h $(TOPLEV_H) $(TM_P_H) $(MACHMODE_H) tree-pass.h \\\n    $(TIMEVAR_H) vecprim.h $(DF_H) $(RA_H) sbitmap.h sparseset.h\n varray.o : varray.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(GGC_H) \\\n-   $(HASHTAB_H) $(BCONFIG_H) $(VARRAY_H) toplev.h\n+   $(HASHTAB_H) $(BCONFIG_H) $(VARRAY_H) $(TOPLEV_H)\n vec.o : vec.c $(CONFIG_H) $(SYSTEM_H) coretypes.h vec.h $(GGC_H) \\\n-   toplev.h\n+   $(TOPLEV_H)\n reload.o : reload.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(FLAGS_H) output.h $(EXPR_H) $(OPTABS_H) reload.h $(RECOG_H) \\\n-   hard-reg-set.h insn-config.h $(REGS_H) $(FUNCTION_H) real.h toplev.h \\\n+   hard-reg-set.h insn-config.h $(REGS_H) $(FUNCTION_H) real.h $(TOPLEV_H) \\\n    addresses.h $(TM_P_H) $(PARAMS_H) $(TARGET_H) $(REAL_H) $(DF_H)\n reload1.o : reload1.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(EXPR_H) $(OPTABS_H) reload.h $(REGS_H) hard-reg-set.h insn-config.h \\\n-   $(BASIC_BLOCK_H) $(RECOG_H) output.h $(FUNCTION_H) toplev.h $(TM_P_H) \\\n+   $(BASIC_BLOCK_H) $(RECOG_H) output.h $(FUNCTION_H) $(TOPLEV_H) $(TM_P_H) \\\n    addresses.h except.h $(TREE_H) $(REAL_H) $(FLAGS_H) $(MACHMODE_H) \\\n    $(OBSTACK_H) $(DF_H) $(TARGET_H) dse.h\n rtlhooks.o :  rtlhooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    rtlhooks-def.h $(EXPR_H) $(RECOG_H)\n postreload.o : postreload.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(REAL_H) $(FLAGS_H) $(EXPR_H) $(OPTABS_H) reload.h $(REGS_H) \\\n    hard-reg-set.h insn-config.h $(BASIC_BLOCK_H) $(RECOG_H) output.h \\\n-   $(FUNCTION_H) toplev.h cselib.h $(TM_P_H) except.h $(TREE_H) $(MACHMODE_H) \\\n+   $(FUNCTION_H) $(TOPLEV_H) cselib.h $(TM_P_H) except.h $(TREE_H) $(MACHMODE_H) \\\n    $(OBSTACK_H) $(TIMEVAR_H) tree-pass.h $(DF_H) $(DBGCNT_H)\n postreload-gcse.o : postreload-gcse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(RTL_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h \\\n-   $(RECOG_H) $(EXPR_H) $(BASIC_BLOCK_H) $(FUNCTION_H) output.h toplev.h \\\n+   $(RECOG_H) $(EXPR_H) $(BASIC_BLOCK_H) $(FUNCTION_H) output.h $(TOPLEV_H) \\\n    $(TM_P_H) except.h $(TREE_H) $(TARGET_H) $(HASHTAB_H) intl.h $(OBSTACK_H) \\\n    $(PARAMS_H) $(TIMEVAR_H) tree-pass.h $(REAL_H) $(DBGCNT_H)\n caller-save.o : caller-save.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(FLAGS_H) $(REGS_H) hard-reg-set.h insn-config.h $(BASIC_BLOCK_H) $(FUNCTION_H) \\\n-   addresses.h $(RECOG_H) reload.h $(EXPR_H) toplev.h $(TM_P_H) $(DF_H) \\\n+   addresses.h $(RECOG_H) reload.h $(EXPR_H) $(TOPLEV_H) $(TM_P_H) $(DF_H) \\\n    gt-caller-save.h $(GGC_H)\n bt-load.o : bt-load.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) except.h \\\n    $(RTL_H) hard-reg-set.h $(REGS_H) $(TM_P_H) $(FIBHEAP_H) output.h $(EXPR_H) \\\n-   $(TARGET_H) $(FLAGS_H) $(INSN_ATTR_H) $(FUNCTION_H) tree-pass.h toplev.h \\\n+   $(TARGET_H) $(FLAGS_H) $(INSN_ATTR_H) $(FUNCTION_H) tree-pass.h $(TOPLEV_H) \\\n    $(DF_H) vecprim.h $(RECOG_H)\n reorg.o : reorg.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    conditions.h hard-reg-set.h $(BASIC_BLOCK_H) $(REGS_H) insn-config.h \\\n    $(INSN_ATTR_H) except.h $(RECOG_H) $(FUNCTION_H) $(FLAGS_H) output.h \\\n-   $(EXPR_H) toplev.h $(PARAMS_H) $(TM_P_H) $(OBSTACK_H) $(RESOURCE_H) \\\n+   $(EXPR_H) $(TOPLEV_H) $(PARAMS_H) $(TM_P_H) $(OBSTACK_H) $(RESOURCE_H) \\\n    $(TIMEVAR_H) $(TARGET_H) tree-pass.h\n alias.o : alias.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-   $(FLAGS_H) hard-reg-set.h $(BASIC_BLOCK_H) $(REGS_H) toplev.h output.h \\\n+   $(FLAGS_H) hard-reg-set.h $(BASIC_BLOCK_H) $(REGS_H) $(TOPLEV_H) output.h \\\n    $(ALIAS_H) $(EMIT_RTL_H) $(GGC_H) $(FUNCTION_H) cselib.h $(TREE_H) $(TM_P_H) \\\n    langhooks.h $(TARGET_H) gt-alias.h $(TIMEVAR_H) $(CGRAPH_H) \\\n    $(SPLAY_TREE_H) $(VARRAY_H) $(IPA_TYPE_ESCAPE_H) $(DF_H) tree-pass.h\n@@ -2865,71 +2866,71 @@ init-regs.o : init-regs.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n regmove.o : regmove.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    insn-config.h $(TIMEVAR_H) tree-pass.h $(DF_H)\\\n    $(RECOG_H) output.h $(REGS_H) hard-reg-set.h $(FLAGS_H) $(FUNCTION_H) \\\n-   $(EXPR_H) $(BASIC_BLOCK_H) toplev.h $(TM_P_H) except.h reload.h\n+   $(EXPR_H) $(BASIC_BLOCK_H) $(TOPLEV_H) $(TM_P_H) except.h reload.h\n combine-stack-adj.o : combine-stack-adj.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(RTL_H) insn-config.h $(TIMEVAR_H) tree-pass.h \\\n    $(RECOG_H) output.h $(REGS_H) hard-reg-set.h $(FLAGS_H) $(FUNCTION_H) \\\n-   $(EXPR_H) $(BASIC_BLOCK_H) toplev.h $(TM_P_H) $(DF_H) except.h reload.h\n+   $(EXPR_H) $(BASIC_BLOCK_H) $(TOPLEV_H) $(TM_P_H) $(DF_H) except.h reload.h\n ddg.o : ddg.c $(DDG_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TARGET_H) \\\n-   toplev.h $(RTL_H) $(TM_P_H) $(REGS_H) $(FUNCTION_H) \\\n+   $(TOPLEV_H) $(RTL_H) $(TM_P_H) $(REGS_H) $(FUNCTION_H) \\\n    $(FLAGS_H) insn-config.h $(INSN_ATTR_H) except.h $(RECOG_H) \\\n    $(SCHED_INT_H) $(CFGLAYOUT_H) $(CFGLOOP_H) $(EXPR_H) $(BITMAP_H) \\\n    hard-reg-set.h sbitmap.h $(TM_H)\n modulo-sched.o : modulo-sched.c $(DDG_H) $(CONFIG_H) $(CONFIG_H) $(SYSTEM_H) \\\n-   coretypes.h $(TARGET_H) toplev.h $(RTL_H) $(TM_P_H) $(REGS_H) $(FUNCTION_H) \\\n+   coretypes.h $(TARGET_H) $(TOPLEV_H) $(RTL_H) $(TM_P_H) $(REGS_H) $(FUNCTION_H) \\\n    $(FLAGS_H) insn-config.h $(INSN_ATTR_H) except.h $(RECOG_H) \\\n    $(SCHED_INT_H) $(CFGLAYOUT_H) $(CFGLOOP_H) $(EXPR_H) $(PARAMS_H) \\\n    cfghooks.h $(GCOV_IO_H) hard-reg-set.h $(TM_H) $(TIMEVAR_H) tree-pass.h \\\n    $(DF_H) $(DBGCNT_H)\n haifa-sched.o : haifa-sched.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(SCHED_INT_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h $(FUNCTION_H) \\\n-   $(INSN_ATTR_H) toplev.h $(RECOG_H) except.h $(TM_P_H) $(TARGET_H) output.h \\\n+   $(INSN_ATTR_H) $(TOPLEV_H) $(RECOG_H) except.h $(TM_P_H) $(TARGET_H) output.h \\\n    $(PARAMS_H) $(DBGCNT_H)\n sched-deps.o : sched-deps.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(SCHED_INT_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h \\\n-   $(FUNCTION_H) $(INSN_ATTR_H) toplev.h $(RECOG_H) except.h cselib.h \\\n+   $(FUNCTION_H) $(INSN_ATTR_H) $(TOPLEV_H) $(RECOG_H) except.h cselib.h \\\n    $(PARAMS_H) $(TM_P_H)\n sched-rgn.o : sched-rgn.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(SCHED_INT_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h \\\n-   $(FUNCTION_H) $(INSN_ATTR_H) toplev.h $(RECOG_H) except.h $(PARAMS_H) \\\n+   $(FUNCTION_H) $(INSN_ATTR_H) $(TOPLEV_H) $(RECOG_H) except.h $(PARAMS_H) \\\n    $(TM_P_H) $(TARGET_H) $(CFGLAYOUT_H) $(TIMEVAR_H) tree-pass.h $(DBGCNT_H)\n sched-ebb.o : sched-ebb.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(SCHED_INT_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h \\\n-   $(FUNCTION_H) $(INSN_ATTR_H) toplev.h $(RECOG_H) except.h $(TM_P_H) \\\n+   $(FUNCTION_H) $(INSN_ATTR_H) $(TOPLEV_H) $(RECOG_H) except.h $(TM_P_H) \\\n    $(PARAMS_H) $(CFGLAYOUT_H) $(TARGET_H) output.h\n sched-vis.o : sched-vis.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(SCHED_INT_H) hard-reg-set.h $(BASIC_BLOCK_H) $(OBSTACK_H) \\\n    $(REAL_H) tree-pass.h\n final.o : final.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) intl.h $(REGS_H) $(RECOG_H) conditions.h \\\n    insn-config.h $(INSN_ATTR_H) $(FUNCTION_H) output.h hard-reg-set.h \\\n-   except.h debug.h xcoffout.h toplev.h reload.h dwarf2out.h tree-pass.h \\\n+   except.h debug.h xcoffout.h $(TOPLEV_H) reload.h dwarf2out.h tree-pass.h \\\n    $(BASIC_BLOCK_H) $(TM_P_H) $(TARGET_H) $(EXPR_H) $(CFGLAYOUT_H) dbxout.h \\\n    $(TIMEVAR_H) $(CGRAPH_H) $(COVERAGE_H) $(REAL_H) $(DF_H) vecprim.h $(GGC_H) \\\n    $(CFGLOOP_H) $(PARAMS_H)\n recog.o : recog.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(FUNCTION_H) $(BASIC_BLOCK_H) $(REGS_H) $(RECOG_H) $(EXPR_H) \\\n-   $(FLAGS_H) insn-config.h $(INSN_ATTR_H) toplev.h output.h reload.h \\\n+   $(FLAGS_H) insn-config.h $(INSN_ATTR_H) $(TOPLEV_H) output.h reload.h \\\n    addresses.h $(TM_P_H) $(TIMEVAR_H) tree-pass.h hard-reg-set.h $(REAL_H) \\\n    $(DF_H) $(DBGCNT_H) $(TARGET_H)\n reg-stack.o : reg-stack.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(TREE_H) $(RECOG_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) \\\n-   insn-config.h toplev.h reload.h $(FUNCTION_H) $(TM_P_H) $(GGC_H) \\\n+   insn-config.h $(TOPLEV_H) reload.h $(FUNCTION_H) $(TM_P_H) $(GGC_H) \\\n    $(BASIC_BLOCK_H) $(CFGLAYOUT_H) output.h $(VARRAY_H) $(TIMEVAR_H) \\\n    tree-pass.h $(TARGET_H) vecprim.h $(DF_H)\n sreal.o: sreal.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) sreal.h\n predict.o: predict.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) insn-config.h $(BASIC_BLOCK_H) $(REGS_H) \\\n-   hard-reg-set.h output.h toplev.h $(RECOG_H) $(FUNCTION_H) except.h \\\n+   hard-reg-set.h output.h $(TOPLEV_H) $(RECOG_H) $(FUNCTION_H) except.h \\\n    $(TM_P_H) $(PREDICT_H) sreal.h $(PARAMS_H) $(TARGET_H) $(CFGLOOP_H) \\\n    $(COVERAGE_H) $(SCEV_H) $(GGC_H) predict.def $(TIMEVAR_H) $(TREE_DUMP_H) \\\n    $(TREE_FLOW_H) tree-pass.h $(EXPR_H) pointer-set.h\n-lists.o: lists.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) toplev.h \\\n+lists.o: lists.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TOPLEV_H) \\\n    $(RTL_H) $(GGC_H) gt-lists.h\n bb-reorder.o : bb-reorder.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(FLAGS_H) $(TIMEVAR_H) output.h $(CFGLAYOUT_H) $(FIBHEAP_H) \\\n    $(TARGET_H) $(FUNCTION_H) $(TM_P_H) $(OBSTACK_H) $(EXPR_H) $(REGS_H) \\\n-   $(PARAMS_H) toplev.h tree-pass.h $(DF_H)\n+   $(PARAMS_H) $(TOPLEV_H) tree-pass.h $(DF_H)\n tracer.o : tracer.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(BASIC_BLOCK_H) hard-reg-set.h output.h $(CFGLAYOUT_H) \\\n    $(FLAGS_H) $(TIMEVAR_H) $(PARAMS_H) $(COVERAGE_H) $(FIBHEAP_H) \\\n@@ -2940,13 +2941,13 @@ cfglayout.o : cfglayout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(GGC_H) alloc-pool.h $(FLAGS_H) $(OBSTACK_H) tree-pass.h vecprim.h \\\n    $(DF_H)\n timevar.o : timevar.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-   $(TIMEVAR_H) $(FLAGS_H) intl.h toplev.h $(RTL_H) timevar.def\n+   $(TIMEVAR_H) $(FLAGS_H) intl.h $(TOPLEV_H) $(RTL_H) timevar.def\n regrename.o : regrename.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) insn-config.h $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h \\\n    output.h $(RECOG_H) $(FUNCTION_H) $(OBSTACK_H) $(FLAGS_H) $(TM_P_H) \\\n-   addresses.h reload.h toplev.h $(TIMEVAR_H) tree-pass.h $(DF_H)\n+   addresses.h reload.h $(TOPLEV_H) $(TIMEVAR_H) tree-pass.h $(DF_H)\n ifcvt.o : ifcvt.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-   $(REGS_H) toplev.h $(FLAGS_H) insn-config.h $(FUNCTION_H) $(RECOG_H) \\\n+   $(REGS_H) $(TOPLEV_H) $(FLAGS_H) insn-config.h $(FUNCTION_H) $(RECOG_H) \\\n    $(TARGET_H) $(BASIC_BLOCK_H) $(EXPR_H) output.h except.h $(TM_P_H) \\\n    $(REAL_H) $(OPTABS_H) $(CFGLOOP_H) hard-reg-set.h $(TIMEVAR_H) tree-pass.h \\\n    $(DF_H) $(DBGCNT_H)\n@@ -2959,7 +2960,7 @@ lambda-code.o: lambda-code.c $(LAMBDA_H) $(GGC_H) $(SYSTEM_H) $(CONFIG_H) \\\n    $(DIAGNOSTIC_H) $(TREE_FLOW_H) $(TREE_DUMP_H) $(TIMEVAR_H) $(CFGLOOP_H) \\\n    $(TREE_DATA_REF_H) $(SCEV_H) $(EXPR_H) coretypes.h $(TARGET_H) \\\n    tree-chrec.h tree-pass.h vec.h vecprim.h $(OBSTACK_H) pointer-set.h\n-params.o : params.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(PARAMS_H) toplev.h\n+params.o : params.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(PARAMS_H) $(TOPLEV_H)\n pointer-set.o: pointer-set.c pointer-set.h $(CONFIG_H) $(SYSTEM_H)\n hooks.o: hooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(HOOKS_H)\n pretty-print.o: $(CONFIG_H) $(SYSTEM_H) coretypes.h intl.h $(PRETTY_PRINT_H) \\\n@@ -2974,7 +2975,7 @@ lower-subreg.o : lower-subreg.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n \n $(out_object_file): $(out_file) $(CONFIG_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(RTL_H) $(REGS_H) hard-reg-set.h insn-config.h conditions.h \\\n-   output.h $(INSN_ATTR_H) $(SYSTEM_H) toplev.h $(TARGET_H) libfuncs.h \\\n+   output.h $(INSN_ATTR_H) $(SYSTEM_H) $(TOPLEV_H) $(TARGET_H) libfuncs.h \\\n    $(TARGET_DEF_H) $(FUNCTION_H) $(SCHED_INT_H) $(TM_P_H) $(EXPR_H) \\\n    langhooks.h $(GGC_H) $(OPTABS_H) $(REAL_H) tm-constrs.h\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) \\\n@@ -3030,17 +3031,17 @@ genrtl.o : genrtl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\t$(RTL_H)\\\n   $(GGC_H) $(OBSTACK_H)\n insn-attrtab.o : insn-attrtab.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\t\\\n   $(TM_H) $(RTL_H) $(REGS_H) $(REAL_H) output.h $(INSN_ATTR_H)\t\t\\\n-  insn-config.h toplev.h $(RECOG_H) $(TM_P_H) $(FLAGS_H)\n+  insn-config.h $(TOPLEV_H) $(RECOG_H) $(TM_P_H) $(FLAGS_H)\n insn-automata.o : insn-automata.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\t\\\n   $(TM_H) $(RTL_H) $(REGS_H) $(REAL_H) output.h $(INSN_ATTR_H)\t\t\\\n-  insn-config.h toplev.h $(RECOG_H) $(TM_P_H) $(FLAGS_H)\n+  insn-config.h $(TOPLEV_H) $(RECOG_H) $(TM_P_H) $(FLAGS_H)\n insn-emit.o : insn-emit.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\t\\\n   $(RTL_H) $(TM_P_H) $(FUNCTION_H) $(EXPR_H) $(OPTABS_H) $(REAL_H)\t\\\n   dfp.h $(FLAGS_H) output.h insn-config.h hard-reg-set.h $(RECOG_H)\t\\\n-  $(RESOURCE_H) reload.h toplev.h $(REGS_H) tm-constrs.h $(GGC_H)\t\\\n+  $(RESOURCE_H) reload.h $(TOPLEV_H) $(REGS_H) tm-constrs.h $(GGC_H)\t\\\n   $(BASIC_BLOCK_H) $(INTEGRATE_H)\n insn-extract.o : insn-extract.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\t\\\n-  $(TM_H) $(RTL_H) toplev.h insn-config.h $(RECOG_H)\n+  $(TM_H) $(RTL_H) $(TOPLEV_H) insn-config.h $(RECOG_H)\n insn-modes.o : insn-modes.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\t$(TM_H) \\\n   $(MACHMODE_H) $(REAL_H)\n insn-opinit.o : insn-opinit.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\t\\\n@@ -3049,18 +3050,18 @@ insn-opinit.o : insn-opinit.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\t\\\n insn-output.o : insn-output.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\t\\\n   $(TM_H) $(RTL_H) $(GGC_H) $(REGS_H) $(REAL_H) conditions.h\t\t\\\n   hard-reg-set.h insn-config.h $(INSN_ATTR_H) $(EXPR_H) output.h\t\\\n-  $(RECOG_H) $(FUNCTION_H) toplev.h $(FLAGS_H) insn-codes.h $(TM_P_H)\t\\\n+  $(RECOG_H) $(FUNCTION_H) $(TOPLEV_H) $(FLAGS_H) insn-codes.h $(TM_P_H)\t\\\n   $(TARGET_H) tm-constrs.h\n insn-peep.o : insn-peep.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\t\\\n   insn-config.h $(RTL_H) $(TM_P_H) $(REGS_H) output.h $(REAL_H)\t\t\\\n-  $(RECOG_H) except.h $(FUNCTION_H) toplev.h $(FLAGS_H) tm-constrs.h\n+  $(RECOG_H) except.h $(FUNCTION_H) $(TOPLEV_H) $(FLAGS_H) tm-constrs.h\n insn-preds.o : insn-preds.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\t\t\\\n   $(TM_H) $(RTL_H) $(TREE_H) insn-config.h $(RECOG_H) output.h\t\t\\\n   $(FLAGS_H) $(FUNCTION_H) hard-reg-set.h $(RESOURCE_H) $(TM_P_H)\t\\\n-  toplev.h reload.h $(REGS_H) $(REAL_H) tm-constrs.h\n+  $(TOPLEV_H) reload.h $(REGS_H) $(REAL_H) tm-constrs.h\n insn-recog.o : insn-recog.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\t\t\\\n   $(TM_H) $(RTL_H) insn-config.h $(RECOG_H) output.h $(FLAGS_H)\t\t\\\n-  $(FUNCTION_H) hard-reg-set.h $(RESOURCE_H) $(TM_P_H) toplev.h\t\t\\\n+  $(FUNCTION_H) hard-reg-set.h $(RESOURCE_H) $(TM_P_H) $(TOPLEV_H)\t\t\\\n   reload.h $(REAL_H) $(REGS_H) tm-constrs.h\n \n # For each of the files generated by running a generator program over\n@@ -3278,11 +3279,11 @@ build/read-rtl.o: read-rtl.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h\t\\\n build/rtl.o: rtl.c $(BCONFIG_H) coretypes.h $(GTM_H) $(SYSTEM_H)\t\\\n   $(RTL_H) $(REAL_H) $(GGC_H) errors.h\n build/vec.o : vec.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h vec.h \\\n-   $(GGC_H) toplev.h\n+   $(GGC_H) $(TOPLEV_H)\n build/gencondmd.o : build/gencondmd.c $(BCONFIG_H) $(SYSTEM_H)\t\t\\\n   coretypes.h $(GTM_H) insn-constants.h $(RTL_H) $(TM_P_H)\t\t\\\n   $(FUNCTION_H) $(REGS_H) $(RECOG_H) $(REAL_H) output.h $(FLAGS_H)\t\\\n-  $(RESOURCE_H) toplev.h reload.h except.h tm-constrs.h\n+  $(RESOURCE_H) $(TOPLEV_H) reload.h except.h tm-constrs.h\n # This pulls in tm-pred.h which contains inline functions wrapping up\n # predicates from the back-end so those functions must be discarded.\n # No big deal since gencondmd.c is a dummy file for non-GCC compilers.\n@@ -3330,7 +3331,7 @@ build/genopinit.o : genopinit.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n build/genoutput.o : genoutput.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n   coretypes.h $(GTM_H) errors.h gensupport.h\n build/genpeep.o : genpeep.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n-  coretypes.h $(GTM_H) errors.h gensupport.h toplev.h\n+  coretypes.h $(GTM_H) errors.h gensupport.h $(TOPLEV_H)\n build/genpreds.o : genpreds.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n   coretypes.h $(GTM_H) errors.h gensupport.h $(OBSTACK_H)\n build/genrecog.o : genrecog.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\"}, {"sha": "5285c02fa00221bf67fc9786e102896dd8cedaba", "filename": "gcc/c-decl.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa14403d28a1af7c28088dd4e04b36a4016e06f9/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa14403d28a1af7c28088dd4e04b36a4016e06f9/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=aa14403d28a1af7c28088dd4e04b36a4016e06f9", "patch": "@@ -1686,17 +1686,11 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n   if (CODE_CONTAINS_STRUCT (TREE_CODE (olddecl), TS_DECL_WITH_VIS)\n       && DECL_IN_SYSTEM_HEADER (olddecl)\n       && !DECL_IN_SYSTEM_HEADER (newdecl) )\n-    {\n-      DECL_IN_SYSTEM_HEADER (newdecl) = 1;\n-      DECL_SOURCE_LOCATION (newdecl) = DECL_SOURCE_LOCATION (olddecl);\n-    }\n+    DECL_SOURCE_LOCATION (newdecl) = DECL_SOURCE_LOCATION (olddecl);\n   else if (CODE_CONTAINS_STRUCT (TREE_CODE (olddecl), TS_DECL_WITH_VIS)\n \t   && DECL_IN_SYSTEM_HEADER (newdecl)\n \t   && !DECL_IN_SYSTEM_HEADER (olddecl))\n-    {\n-      DECL_IN_SYSTEM_HEADER (olddecl) = 1;\n-      DECL_SOURCE_LOCATION (olddecl) = DECL_SOURCE_LOCATION (newdecl);\n-    }\n+    DECL_SOURCE_LOCATION (olddecl) = DECL_SOURCE_LOCATION (newdecl);\n   else if ((DECL_INITIAL (newdecl) == 0 && DECL_INITIAL (olddecl) != 0)\n \t   || (old_is_prototype && !new_is_prototype\n \t       && !C_DECL_BUILTIN_PROTOTYPE (olddecl)))"}, {"sha": "944691620923cf7f3fb0268d0bed4a0d13b21f72", "filename": "gcc/c-lex.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa14403d28a1af7c28088dd4e04b36a4016e06f9/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa14403d28a1af7c28088dd4e04b36a4016e06f9/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=aa14403d28a1af7c28088dd4e04b36a4016e06f9", "patch": "@@ -239,7 +239,6 @@ fe_file_change (const struct line_map *new_map)\n     }\n \n   update_header_times (new_map->to_file);\n-  in_system_header = new_map->sysp != 0;\n   input_location = new_map->start_location;\n }\n "}, {"sha": "e89d7dfd466bec4a55ef272cd284016794dd2552", "filename": "gcc/c-parser.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa14403d28a1af7c28088dd4e04b36a4016e06f9/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa14403d28a1af7c28088dd4e04b36a4016e06f9/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=aa14403d28a1af7c28088dd4e04b36a4016e06f9", "patch": "@@ -149,8 +149,6 @@ typedef struct c_token GTY (())\n   /* If this token is a CPP_PRAGMA, this indicates the pragma that\n      was seen.  Otherwise it is PRAGMA_NONE.  */\n   ENUM_BITFIELD (pragma_kind) pragma_kind : 7;\n-  /* True if this token is from a system header.  */\n-  BOOL_BITFIELD in_system_header : 1;\n   /* The value associated with this token, if any.  */\n   tree value;\n   /* The location at which this token was found.  */\n@@ -206,7 +204,6 @@ c_lex_one_token (c_parser *parser, c_token *token)\n   token->id_kind = C_ID_NONE;\n   token->keyword = RID_MAX;\n   token->pragma_kind = PRAGMA_NONE;\n-  token->in_system_header = in_system_header;\n \n   switch (token->type)\n     {\n@@ -545,7 +542,6 @@ c_parser_set_source_position_from_token (c_token *token)\n   if (token->type != CPP_EOF)\n     {\n       input_location = token->location;\n-      in_system_header = token->in_system_header;\n     }\n }\n "}, {"sha": "7e603237cd2e20b2ecd7285c6b9ffb4b78538b63", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa14403d28a1af7c28088dd4e04b36a4016e06f9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa14403d28a1af7c28088dd4e04b36a4016e06f9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=aa14403d28a1af7c28088dd4e04b36a4016e06f9", "patch": "@@ -1,3 +1,16 @@\n+2007-07-21  Rafael Avila de Espindola  <espindola@google.com>\n+\n+\t* parser.c (cp_token): Remove in_system_header.\n+\t(eof_token): Remove in_system_header.\n+\t(cp_lexer_get_preprocessor_token): Don't set in_system_header.\n+\t(cp_lexer_set_source_position_from_token): Don't set in_system_header.\n+\t(cp_parser_member_declaration):  Use in_system_header_at.\n+\t* pt.c (lookup_template_class): Don't set DECL_IN_SYSTEM_HEADER.\n+\t(pop_tinst_level): Don't set in_system_header.\n+\t(instantiate_class_template): Don't set in_system_header.\n+\t(instantiate_decl): Don't set in_system_header.\n+\t(instantiate_pending_templates): Don't set in_system_header.\n+\n 2008-07-21  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/36870"}, {"sha": "b4d2440d0e43037ab9294335c56efdda8c3bd019", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa14403d28a1af7c28088dd4e04b36a4016e06f9/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa14403d28a1af7c28088dd4e04b36a4016e06f9/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=aa14403d28a1af7c28088dd4e04b36a4016e06f9", "patch": "@@ -71,8 +71,6 @@ typedef struct cp_token GTY (())\n   unsigned char flags;\n   /* Identifier for the pragma.  */\n   ENUM_BITFIELD (pragma_kind) pragma_kind : 6;\n-  /* True if this token is from a system header.  */\n-  BOOL_BITFIELD in_system_header : 1;\n   /* True if this token is from a context where it is implicitly extern \"C\" */\n   BOOL_BITFIELD implicit_extern_c : 1;\n   /* True for a CPP_NAME token that is not a keyword (i.e., for which\n@@ -97,7 +95,7 @@ DEF_VEC_ALLOC_P (cp_token_position,heap);\n \n static cp_token eof_token =\n {\n-  CPP_EOF, RID_MAX, 0, PRAGMA_NONE, 0, false, 0, { NULL },\n+  CPP_EOF, RID_MAX, 0, PRAGMA_NONE, false, 0, { NULL },\n   0\n };\n \n@@ -408,7 +406,6 @@ cp_lexer_get_preprocessor_token (cp_lexer *lexer, cp_token *token)\n \t\t\tlexer == NULL ? 0 : C_LEX_RAW_STRINGS);\n   token->keyword = RID_MAX;\n   token->pragma_kind = PRAGMA_NONE;\n-  token->in_system_header = in_system_header;\n \n   /* On some systems, some header files are surrounded by an\n      implicit extern \"C\" block.  Set a flag in the token if it\n@@ -478,15 +475,13 @@ cp_lexer_get_preprocessor_token (cp_lexer *lexer, cp_token *token)\n     }\n }\n \n-/* Update the globals input_location and in_system_header and the\n-   input file stack from TOKEN.  */\n+/* Update the globals input_location and the input file stack from TOKEN.  */\n static inline void\n cp_lexer_set_source_position_from_token (cp_token *token)\n {\n   if (token->type != CPP_EOF)\n     {\n       input_location = token->location;\n-      in_system_header = token->in_system_header;\n     }\n }\n \n@@ -15391,7 +15386,7 @@ cp_parser_member_declaration (cp_parser* parser)\n       if (!decl_specifiers.any_specifiers_p)\n \t{\n \t  cp_token *token = cp_lexer_peek_token (parser->lexer);\n-\t  if (pedantic && !token->in_system_header)\n+\t  if (pedantic && !in_system_header_at (token->location))\n \t    pedwarn (\"%Hextra %<;%>\", &token->location);\n \t}\n       else"}, {"sha": "9434312a11d64775063832d66320205bd20b7bb0", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa14403d28a1af7c28088dd4e04b36a4016e06f9/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa14403d28a1af7c28088dd4e04b36a4016e06f9/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=aa14403d28a1af7c28088dd4e04b36a4016e06f9", "patch": "@@ -5888,8 +5888,6 @@ lookup_template_class (tree d1,\n \t= TREE_PRIVATE (TYPE_STUB_DECL (template_type));\n       TREE_PROTECTED (type_decl)\n \t= TREE_PROTECTED (TYPE_STUB_DECL (template_type));\n-      DECL_IN_SYSTEM_HEADER (type_decl)\n-\t= DECL_IN_SYSTEM_HEADER (templ);\n       if (CLASSTYPE_VISIBILITY_SPECIFIED (template_type))\n \t{\n \t  DECL_VISIBILITY_SPECIFIED (type_decl) = 1;\n@@ -6338,7 +6336,6 @@ pop_tinst_level (void)\n   /* Restore the filename and line number stashed away when we started\n      this instantiation.  */\n   input_location = current_tinst_level->locus;\n-  in_system_header = current_tinst_level->in_system_header_p;\n   current_tinst_level = current_tinst_level->next;\n   --tinst_depth;\n   ++tinst_level_tick;\n@@ -6910,7 +6907,6 @@ instantiate_class_template (tree type)\n      if tsubsting causes an error.  */\n   typedecl = TYPE_MAIN_DECL (type);\n   input_location = DECL_SOURCE_LOCATION (typedecl);\n-  in_system_header = DECL_IN_SYSTEM_HEADER (typedecl);\n \n   TYPE_HAS_USER_CONSTRUCTOR (type) = TYPE_HAS_USER_CONSTRUCTOR (pattern);\n   TYPE_HAS_NEW_OPERATOR (type) = TYPE_HAS_NEW_OPERATOR (pattern);\n@@ -15016,7 +15012,6 @@ instantiate_decl (tree d, int defer_ok,\n   bool pattern_defined;\n   int need_push;\n   location_t saved_loc = input_location;\n-  int saved_in_system_header = in_system_header;\n   bool external_p;\n \n   /* This function should only be used to instantiate templates for\n@@ -15099,7 +15094,6 @@ instantiate_decl (tree d, int defer_ok,\n     mark_definable (d);\n \n   input_location = DECL_SOURCE_LOCATION (d);\n-  in_system_header = DECL_IN_SYSTEM_HEADER (d);\n \n   /* If D is a member of an explicitly instantiated class template,\n      and no definition is available, treat it like an implicit\n@@ -15371,7 +15365,6 @@ instantiate_decl (tree d, int defer_ok,\n \n out:\n   input_location = saved_loc;\n-  in_system_header = saved_in_system_header;\n   pop_deferring_access_checks ();\n   pop_tinst_level ();\n \n@@ -15389,7 +15382,6 @@ instantiate_pending_templates (int retries)\n {\n   int reconsider;\n   location_t saved_loc = input_location;\n-  int saved_in_system_header = in_system_header;\n \n   /* Instantiating templates may trigger vtable generation.  This in turn\n      may require further template instantiations.  We place a limit here\n@@ -15473,7 +15465,6 @@ instantiate_pending_templates (int retries)\n   while (reconsider);\n \n   input_location = saved_loc;\n-  in_system_header = saved_in_system_header;\n }\n \n /* Substitute ARGVEC into T, which is a list of initializers for"}, {"sha": "c6500d81d266dfccef16d01b06e5ee940b6f84d3", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa14403d28a1af7c28088dd4e04b36a4016e06f9/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa14403d28a1af7c28088dd4e04b36a4016e06f9/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=aa14403d28a1af7c28088dd4e04b36a4016e06f9", "patch": "@@ -299,13 +299,14 @@ void\n diagnostic_report_diagnostic (diagnostic_context *context,\n \t\t\t      diagnostic_info *diagnostic)\n {\n+  location_t location = diagnostic->location;\n   bool maybe_print_warnings_as_errors_message = false;\n   const char *saved_format_spec;\n \n   /* Give preference to being able to inhibit warnings, before they\n      get reclassified to something else.  */\n   if (diagnostic->kind == DK_WARNING \n-      && !diagnostic_report_warnings_p ())\n+      && !diagnostic_report_warnings_p (location))\n     return;\n   \n   if (context->lock > 0)\n@@ -470,8 +471,8 @@ inform (const char *gmsgid, ...)\n   va_end (ap);\n }\n \n-/* A warning.  Use this for code which is correct according to the\n-   relevant language specification but is likely to be buggy anyway.  */\n+/* A warning at INPUT_LOCATION.  Use this for code which is correct according\n+   to the relevant language specification but is likely to be buggy anyway.  */\n void\n warning (int opt, const char *gmsgid, ...)\n {\n@@ -498,6 +499,22 @@ warning0 (const char *gmsgid, ...)\n   va_end (ap);\n }\n \n+/* A warning at LOCATION.  Use this for code which is correct according to the\n+   relevant language specification but is likely to be buggy anyway.  */\n+void\n+warning_at (location_t location, int opt, const char *gmsgid, ...)\n+{\n+  diagnostic_info diagnostic;\n+  va_list ap;\n+\n+  va_start (ap, gmsgid);\n+  diagnostic_set_info (&diagnostic, gmsgid, &ap, location, DK_WARNING);\n+  diagnostic.option_index = opt;\n+\n+  report_diagnostic (&diagnostic);\n+  va_end (ap);\n+}\n+\n /* A \"pedantic\" warning: issues a warning unless -pedantic-errors was\n    given on the command line, in which case it issues an error.  Use\n    this for diagnostics required by the relevant language standard,"}, {"sha": "1d13eeeae42691c80b411dded66738dd28a90f7b", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa14403d28a1af7c28088dd4e04b36a4016e06f9/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa14403d28a1af7c28088dd4e04b36a4016e06f9/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=aa14403d28a1af7c28088dd4e04b36a4016e06f9", "patch": "@@ -183,9 +183,9 @@ extern diagnostic_context *global_dc;\n #define sorrycount diagnostic_kind_count (global_dc, DK_SORRY)\n \n /* Returns nonzero if warnings should be emitted.  */\n-#define diagnostic_report_warnings_p()\t\t\t\\\n+#define diagnostic_report_warnings_p(LOC)\t\t\t\\\n   (!inhibit_warnings\t\t\t\t\t\\\n-   && !(in_system_header && !warn_system_headers))\n+   && !(in_system_header_at (LOC) && !warn_system_headers))\n \n #define report_diagnostic(D) diagnostic_report_diagnostic (global_dc, D)\n "}, {"sha": "f4cc3aca69dd1dc87336560dca977ab087deaa06", "filename": "gcc/flags.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa14403d28a1af7c28088dd4e04b36a4016e06f9/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa14403d28a1af7c28088dd4e04b36a4016e06f9/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=aa14403d28a1af7c28088dd4e04b36a4016e06f9", "patch": "@@ -143,11 +143,6 @@ extern HOST_WIDE_INT larger_than_size;\n extern bool warn_frame_larger_than;\n extern HOST_WIDE_INT frame_larger_than_size;\n \n-/* Temporarily suppress certain warnings.\n-   This is set while reading code from a system header file.  */\n-\n-extern int in_system_header;\n-\n /* Nonzero for -dp: annotate the assembly with a comment describing the\n    pattern and alternative used.  */\n "}, {"sha": "8e8b907f9171318b673d4bb8f1ed02650b6f317a", "filename": "gcc/function.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa14403d28a1af7c28088dd4e04b36a4016e06f9/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa14403d28a1af7c28088dd4e04b36a4016e06f9/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=aa14403d28a1af7c28088dd4e04b36a4016e06f9", "patch": "@@ -3763,22 +3763,12 @@ DEF_VEC_ALLOC_P(function_p,heap);\n \n static VEC(function_p,heap) *cfun_stack;\n \n-/* We save the value of in_system_header here when pushing the first\n-   function on the cfun stack, and we restore it from here when\n-   popping the last function.  */\n-\n-static bool saved_in_system_header;\n-\n /* Push the current cfun onto the stack, and set cfun to new_cfun.  */\n \n void\n push_cfun (struct function *new_cfun)\n {\n-  if (cfun == NULL)\n-    saved_in_system_header = in_system_header;\n   VEC_safe_push (function_p, heap, cfun_stack, cfun);\n-  if (new_cfun)\n-    in_system_header = DECL_IN_SYSTEM_HEADER (new_cfun->decl);\n   set_cfun (new_cfun);\n }\n \n@@ -3788,8 +3778,6 @@ void\n pop_cfun (void)\n {\n   struct function *new_cfun = VEC_pop (function_p, cfun_stack);\n-  in_system_header = ((new_cfun == NULL) ? saved_in_system_header\n-\t\t      : DECL_IN_SYSTEM_HEADER (new_cfun->decl));\n   set_cfun (new_cfun);\n }\n \n@@ -3867,11 +3855,7 @@ allocate_struct_function (tree fndecl, bool abstract_p)\n void\n push_struct_function (tree fndecl)\n {\n-  if (cfun == NULL)\n-    saved_in_system_header = in_system_header;\n   VEC_safe_push (function_p, heap, cfun_stack, cfun);\n-  if (fndecl)\n-    in_system_header = DECL_IN_SYSTEM_HEADER (fndecl);\n   allocate_struct_function (fndecl, false);\n }\n "}, {"sha": "299f56c3ce6457dc2d2a3a76dcb50e902dfe6f30", "filename": "gcc/input.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa14403d28a1af7c28088dd4e04b36a4016e06f9/gcc%2Finput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa14403d28a1af7c28088dd4e04b36a4016e06f9/gcc%2Finput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.h?ref=aa14403d28a1af7c28088dd4e04b36a4016e06f9", "patch": "@@ -41,6 +41,9 @@ typedef struct GTY (())\n   int line;\n \n   int column;\n+\n+  /* In a system header?. */\n+  bool sysp;\n } expanded_location;\n \n extern expanded_location expand_location (source_location);\n@@ -59,5 +62,7 @@ extern location_t input_location;\n \n #define input_line LOCATION_LINE (input_location)\n #define input_filename LOCATION_FILE (input_location)\n+#define in_system_header_at(LOC) ((expand_location (LOC)).sysp != 0)\n+#define in_system_header (in_system_header_at (input_location))\n \n #endif"}, {"sha": "827b8f55b896041a75d652ef9bdc6c05c12be65d", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa14403d28a1af7c28088dd4e04b36a4016e06f9/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa14403d28a1af7c28088dd4e04b36a4016e06f9/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=aa14403d28a1af7c28088dd4e04b36a4016e06f9", "patch": "@@ -202,11 +202,6 @@ tree current_function_decl;\n    if none.  */\n const char * current_function_func_begin_label;\n \n-/* Temporarily suppress certain warnings.\n-   This is set while reading code from a system header file.  */\n-\n-int in_system_header = 0;\n-\n /* Nonzero means to collect statistics which might be expensive\n    and to print them when we are done.  */\n int flag_detailed_statistics = 0;"}, {"sha": "e2dfa48fbefc17da9e2e09cd68b3ad1e1e521991", "filename": "gcc/toplev.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa14403d28a1af7c28088dd4e04b36a4016e06f9/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa14403d28a1af7c28088dd4e04b36a4016e06f9/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=aa14403d28a1af7c28088dd4e04b36a4016e06f9", "patch": "@@ -20,6 +20,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #ifndef GCC_TOPLEV_H\n #define GCC_TOPLEV_H\n+#include \"input.h\"\n \n /* If non-NULL, return one past-the-end of the matching SUBPART of\n    the WHOLE string.  */\n@@ -58,6 +59,8 @@ extern void internal_error (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2)\n extern void warning0 (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n /* Pass one of the OPT_W* from options.h as the first parameter.  */\n extern void warning (int, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n+extern void warning_at (location_t, int, const char *, ...)\n+    ATTRIBUTE_GCC_DIAG(3,4);\n extern void error (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n extern void fatal_error (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2)\n      ATTRIBUTE_NORETURN;"}, {"sha": "5b747e84f66e4445a1d7d528aab6702faf3bf5ce", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa14403d28a1af7c28088dd4e04b36a4016e06f9/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa14403d28a1af7c28088dd4e04b36a4016e06f9/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=aa14403d28a1af7c28088dd4e04b36a4016e06f9", "patch": "@@ -7200,7 +7200,7 @@ execute_warn_function_return (void)\n \t      location = EXPR_LOCATION (last);\n \t      if (location == UNKNOWN_LOCATION)\n \t\t  location = cfun->function_end_locus;\n-\t      warning (OPT_Wreturn_type, \"%Hcontrol reaches end of non-void function\", &location);\n+\t      warning_at (location, OPT_Wreturn_type, \"control reaches end of non-void function\");\n \t      TREE_NO_WARNING (cfun->decl) = 1;\n \t      break;\n \t    }"}, {"sha": "2ac1c1184eeb47bf8ef7d114693d313f17dea6bb", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa14403d28a1af7c28088dd4e04b36a4016e06f9/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa14403d28a1af7c28088dd4e04b36a4016e06f9/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=aa14403d28a1af7c28088dd4e04b36a4016e06f9", "patch": "@@ -1385,7 +1385,7 @@ warn_uninit (tree t, const char *gmsgid, void *data)\n   locus = (context != NULL && EXPR_HAS_LOCATION (context)\n \t   ? EXPR_LOCUS (context)\n \t   : &DECL_SOURCE_LOCATION (var));\n-  warning (OPT_Wuninitialized, gmsgid, locus, var);\n+  warning_at (*locus, OPT_Wuninitialized, gmsgid, var);\n   xloc = expand_location (*locus);\n   floc = expand_location (DECL_SOURCE_LOCATION (cfun->decl));\n   if (xloc.file != floc.file\n@@ -1416,10 +1416,10 @@ warn_uninitialized_var (tree *tp, int *walk_subtrees, void *data_)\n       /* We only do data flow with SSA_NAMEs, so that's all we\n \t can warn about.  */\n       if (data->always_executed)\n-        warn_uninit (t, \"%H%qD is used uninitialized in this function\",\n+        warn_uninit (t, \"%qD is used uninitialized in this function\",\n \t\t     data->stmt);\n       else\n-        warn_uninit (t, \"%H%qD may be used uninitialized in this function\",\n+        warn_uninit (t, \"%qD may be used uninitialized in this function\",\n \t\t     data->stmt);\n       *walk_subtrees = 0;\n       break;\n@@ -1458,7 +1458,7 @@ warn_uninitialized_phi (tree phi)\n     {\n       tree op = PHI_ARG_DEF (phi, i);\n       if (TREE_CODE (op) == SSA_NAME)\n-\twarn_uninit (op, \"%H%qD may be used uninitialized in this function\",\n+\twarn_uninit (op, \"%qD may be used uninitialized in this function\",\n \t\t     NULL);\n     }\n }"}, {"sha": "5dfdcaf6e964b0fb14e9a37ee0442a4deaf24a5c", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa14403d28a1af7c28088dd4e04b36a4016e06f9/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa14403d28a1af7c28088dd4e04b36a4016e06f9/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=aa14403d28a1af7c28088dd4e04b36a4016e06f9", "patch": "@@ -663,8 +663,6 @@ make_node_stat (enum tree_code code MEM_STAT_DECL)\n       break;\n \n     case tcc_declaration:\n-      if (CODE_CONTAINS_STRUCT (code, TS_DECL_WITH_VIS))\n-\tDECL_IN_SYSTEM_HEADER (t) = in_system_header;\n       if (CODE_CONTAINS_STRUCT (code, TS_DECL_COMMON))\n \t{\n \t  if (code == FUNCTION_DECL)\n@@ -3564,13 +3562,15 @@ expand_location (source_location loc)\n       xloc.file = NULL;\n       xloc.line = 0;\n       xloc.column = 0;\n+      xloc.sysp = 0;\n     }\n   else\n     {\n       const struct line_map *map = linemap_lookup (line_table, loc);\n       xloc.file = map->to_file;\n       xloc.line = SOURCE_LINE (map, loc);\n       xloc.column = SOURCE_COLUMN (map, loc);\n+      xloc.sysp = map->sysp != 0;\n     };\n   return xloc;\n }"}, {"sha": "d4af777962bbb54db339e2200e95279888e344ac", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa14403d28a1af7c28088dd4e04b36a4016e06f9/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa14403d28a1af7c28088dd4e04b36a4016e06f9/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=aa14403d28a1af7c28088dd4e04b36a4016e06f9", "patch": "@@ -3051,7 +3051,7 @@ struct tree_parm_decl GTY(())\n /* Nonzero for a given ..._DECL node means that no warnings should be\n    generated just because this node is unused.  */\n #define DECL_IN_SYSTEM_HEADER(NODE) \\\n-  (DECL_WITH_VIS_CHECK (NODE)->decl_with_vis.in_system_header_flag)\n+  (in_system_header_at (DECL_SOURCE_LOCATION (NODE)))\n \n   /* Used to indicate that this DECL has weak linkage.  */\n #define DECL_WEAK(NODE) (DECL_WITH_VIS_CHECK (NODE)->decl_with_vis.weak_flag)\n@@ -3179,7 +3179,6 @@ struct tree_decl_with_vis GTY(())\n  unsigned shadowed_for_var_p : 1;\n \n  /* Don't belong to VAR_DECL exclusively.  */\n- unsigned in_system_header_flag : 1;\n  unsigned weak_flag:1;\n  unsigned seen_in_bind_expr : 1;\n  unsigned comdat_flag : 1;\n@@ -3191,7 +3190,7 @@ struct tree_decl_with_vis GTY(())\n \n  /* Belongs to VAR_DECL exclusively.  */\n  ENUM_BITFIELD(tls_model) tls_model : 3;\n- /* 11 unused bits. */\n+ /* 12 unused bits. */\n };\n \n /* In a VAR_DECL that's static,"}]}