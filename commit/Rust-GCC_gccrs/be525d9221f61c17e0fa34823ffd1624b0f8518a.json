{"sha": "be525d9221f61c17e0fa34823ffd1624b0f8518a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU1MjVkOTIyMWY2MWMxN2UwZmEzNDgyM2ZmZDE2MjRiMGY4NTE4YQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2019-09-30T08:18:59Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2019-09-30T08:18:59Z"}, "message": "[PR 91853] Prevent IPA-SRA ICEs on type-mismatched calls\n\n2019-09-30  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/91853\n\t* tree-inline.c (force_value_to_type): New function.\n\t(setup_one_parameter): Use force_value_to_type to convert type.\n\t* tree-inline.c (force_value_to_type): Declare.\n\t* ipa-param-manipulation.c (ipa_param_adjustments::modify_call): Deal\n\twith register type mismatches.\n\n\ttestsuite/\n\t* gcc.dg/ipa/pr91853.c: New test.\n\nFrom-SVN: r276296", "tree": {"sha": "8674735d0491388b7801692da4d645704aa61b17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8674735d0491388b7801692da4d645704aa61b17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be525d9221f61c17e0fa34823ffd1624b0f8518a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be525d9221f61c17e0fa34823ffd1624b0f8518a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be525d9221f61c17e0fa34823ffd1624b0f8518a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be525d9221f61c17e0fa34823ffd1624b0f8518a/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "15bbad92434a184a0baac0c93c7111e6e7fcd9c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15bbad92434a184a0baac0c93c7111e6e7fcd9c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15bbad92434a184a0baac0c93c7111e6e7fcd9c2"}], "stats": {"total": 97, "additions": 78, "deletions": 19}, "files": [{"sha": "4a76e2f41008fb057c5f681cf895e72fef6749f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be525d9221f61c17e0fa34823ffd1624b0f8518a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be525d9221f61c17e0fa34823ffd1624b0f8518a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=be525d9221f61c17e0fa34823ffd1624b0f8518a", "patch": "@@ -1,3 +1,12 @@\n+2019-09-30  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/91853\n+\t* tree-inline.c (force_value_to_type): New function.\n+\t(setup_one_parameter): Use force_value_to_type to convert type.\n+\t* tree-inline.c (force_value_to_type): Declare.\n+\t* ipa-param-manipulation.c (ipa_param_adjustments::modify_call): Deal\n+\twith register type mismatches.\n+\n 2019-09-30  Andreas Tobler  <andreast@gcc.gnu.org>\n \n \t* config.gcc: Use the secure-plt on FreeBSD 13 and upwards for"}, {"sha": "bbf646726e230d32c749a0790fd2c35333e38583", "filename": "gcc/ipa-param-manipulation.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be525d9221f61c17e0fa34823ffd1624b0f8518a/gcc%2Fipa-param-manipulation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be525d9221f61c17e0fa34823ffd1624b0f8518a/gcc%2Fipa-param-manipulation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-param-manipulation.c?ref=be525d9221f61c17e0fa34823ffd1624b0f8518a", "patch": "@@ -651,8 +651,15 @@ ipa_param_adjustments::modify_call (gcall *stmt,\n       bool deref_base = false;\n       unsigned int deref_align = 0;\n       if (TREE_CODE (base) != ADDR_EXPR\n-\t  && POINTER_TYPE_P (TREE_TYPE (base)))\n-\toff = build_int_cst (apm->alias_ptr_type, apm->unit_offset);\n+\t  && is_gimple_reg_type (TREE_TYPE (base)))\n+\t{\n+\t  /* Detect type mismatches in calls in invalid programs and make a\n+\t     poor attempt to gracefully convert them so that we don't ICE.  */\n+\t  if (!POINTER_TYPE_P (TREE_TYPE (base)))\n+\t    base = force_value_to_type (ptr_type_node, base);\n+\n+\t  off = build_int_cst (apm->alias_ptr_type, apm->unit_offset);\n+\t}\n       else\n \t{\n \t  bool addrof;"}, {"sha": "84139ef0fb0943f64e9e5269f89a7686a6ca68aa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be525d9221f61c17e0fa34823ffd1624b0f8518a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be525d9221f61c17e0fa34823ffd1624b0f8518a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=be525d9221f61c17e0fa34823ffd1624b0f8518a", "patch": "@@ -1,3 +1,8 @@\n+2019-09-30  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/91853\n+\t* gcc.dg/ipa/pr91853.c: New test.\n+\n 2019-09-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/91931"}, {"sha": "4bad78037512ec0537cf3cb655d87cf0cd127b29", "filename": "gcc/testsuite/gcc.dg/ipa/pr91853.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be525d9221f61c17e0fa34823ffd1624b0f8518a/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr91853.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be525d9221f61c17e0fa34823ffd1624b0f8518a/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr91853.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr91853.c?ref=be525d9221f61c17e0fa34823ffd1624b0f8518a", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"--param ipa-cp-value-list-size=0 -Os -fno-inline\" } */\n+\n+struct _wincore\n+{\n+  int y;\n+  int width;\n+};\n+int a;\n+void fn2 (void);\n+static int fn1 (dpy, winInfo) struct _XDisplay *dpy;\n+struct _wincore *winInfo;\n+{\n+  a = winInfo->width;\n+  fn2 ();\n+}\n+\n+void fn4 (int, int, int);\n+static int fn3 (dpy, winInfo, visrgn) struct _XDisplay *dpy;\n+int winInfo, visrgn;\n+{\n+  int b = fn1 (0, winInfo);\n+  fn4 (0, 0, visrgn);\n+}\n+\n+int\n+fn5 (event) struct _XEvent *event;\n+{\n+  fn3 (0, 0, 0);\n+}"}, {"sha": "d6920f48693d3551b630583bd623056077e93dd5", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be525d9221f61c17e0fa34823ffd1624b0f8518a/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be525d9221f61c17e0fa34823ffd1624b0f8518a/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=be525d9221f61c17e0fa34823ffd1624b0f8518a", "patch": "@@ -3333,6 +3333,29 @@ insert_init_stmt (copy_body_data *id, basic_block bb, gimple *init_stmt)\n     }\n }\n \n+/* Deal with mismatched formal/actual parameters, in a rather brute-force way\n+   if need be (which should only be necessary for invalid programs).  Attempt\n+   to convert VAL to TYPE and return the result if it is possible, just return\n+   a zero constant of the given type if it fails.  */\n+\n+tree\n+force_value_to_type (tree type, tree value)\n+{\n+  /* If we can match up types by promotion/demotion do so.  */\n+  if (fold_convertible_p (type, value))\n+    return fold_convert (type, value);\n+\n+  /* ???  For valid programs we should not end up here.\n+     Still if we end up with truly mismatched types here, fall back\n+     to using a VIEW_CONVERT_EXPR or a literal zero to not leak invalid\n+     GIMPLE to the following passes.  */\n+  if (!is_gimple_reg_type (TREE_TYPE (value))\n+\t   || TYPE_SIZE (type) == TYPE_SIZE (TREE_TYPE (value)))\n+    return fold_build1 (VIEW_CONVERT_EXPR, type, value);\n+  else\n+    return build_zero_cst (type);\n+}\n+\n /* Initialize parameter P with VALUE.  If needed, produce init statement\n    at the end of BB.  When BB is NULL, we return init statement to be\n    output later.  */\n@@ -3349,23 +3372,7 @@ setup_one_parameter (copy_body_data *id, tree p, tree value, tree fn,\n   if (value\n       && value != error_mark_node\n       && !useless_type_conversion_p (TREE_TYPE (p), TREE_TYPE (value)))\n-    {\n-      /* If we can match up types by promotion/demotion do so.  */\n-      if (fold_convertible_p (TREE_TYPE (p), value))\n-\trhs = fold_convert (TREE_TYPE (p), value);\n-      else\n-\t{\n-\t  /* ???  For valid programs we should not end up here.\n-\t     Still if we end up with truly mismatched types here, fall back\n-\t     to using a VIEW_CONVERT_EXPR or a literal zero to not leak invalid\n-\t     GIMPLE to the following passes.  */\n-\t  if (!is_gimple_reg_type (TREE_TYPE (value))\n-\t      || TYPE_SIZE (TREE_TYPE (p)) == TYPE_SIZE (TREE_TYPE (value)))\n-\t    rhs = fold_build1 (VIEW_CONVERT_EXPR, TREE_TYPE (p), value);\n-\t  else\n-\t    rhs = build_zero_cst (TREE_TYPE (p));\n-\t}\n-    }\n+    rhs = force_value_to_type (TREE_TYPE (p), value);\n \n   /* Make an equivalent VAR_DECL.  Note that we must NOT remap the type\n      here since the type of this decl must be visible to the calling"}, {"sha": "b226dc03833512513a55417bfc2289d71dc8a09d", "filename": "gcc/tree-inline.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be525d9221f61c17e0fa34823ffd1624b0f8518a/gcc%2Ftree-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be525d9221f61c17e0fa34823ffd1624b0f8518a/gcc%2Ftree-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.h?ref=be525d9221f61c17e0fa34823ffd1624b0f8518a", "patch": "@@ -250,6 +250,7 @@ extern tree copy_fn (tree, tree&, tree&);\n extern const char *copy_forbidden (struct function *fun);\n extern tree copy_decl_for_dup_finish (copy_body_data *id, tree decl, tree copy);\n extern tree copy_decl_to_var (tree, copy_body_data *);\n+extern tree force_value_to_type (tree type, tree value);\n \n /* This is in tree-inline.c since the routine uses\n    data structures from the inliner.  */"}]}