{"sha": "ea19c8f33a3a8d2b52f89f1fade0a21e3c779190", "node_id": "C_kwDOANBUbNoAKGVhMTljOGYzM2EzYThkMmI1MmY4OWYxZmFkZTBhMjFlM2M3NzkxOTA", "commit": {"author": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gotplt.org", "date": "2022-01-11T14:21:37Z"}, "committer": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gotplt.org", "date": "2022-01-11T14:47:39Z"}, "message": "tree-object-size: Handle function parameters\n\nHandle hints provided by __attribute__ ((access (...))) to compute\ndynamic sizes for objects.\n\ngcc/ChangeLog:\n\n\tPR middle-end/70090\n\t* tree-object-size.c: Include tree-dfa.h.\n\t(parm_object_size): New function.\n\t(collect_object_sizes_for): Call it.\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/70090\n\t* gcc.dg/builtin-dynamic-object-size-0.c (test_parmsz_simple,\n\ttest_parmsz_scaled, test_parmsz_unknown): New functions.\n\t(main): Call them.  Add new arguments argc and argv.\n\nSigned-off-by: Siddhesh Poyarekar <siddhesh@gotplt.org>", "tree": {"sha": "ed9feb00db533acf637fab6bff0f848165884e07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed9feb00db533acf637fab6bff0f848165884e07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea19c8f33a3a8d2b52f89f1fade0a21e3c779190", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea19c8f33a3a8d2b52f89f1fade0a21e3c779190", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea19c8f33a3a8d2b52f89f1fade0a21e3c779190", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea19c8f33a3a8d2b52f89f1fade0a21e3c779190/comments", "author": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "404c787e2bfe8cae666b075ed903990ea452220e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/404c787e2bfe8cae666b075ed903990ea452220e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/404c787e2bfe8cae666b075ed903990ea452220e"}], "stats": {"total": 87, "additions": 85, "deletions": 2}, "files": [{"sha": "c89e2268943c952291e6b011e18d52cfc2665bed", "filename": "gcc/testsuite/gcc.dg/builtin-dynamic-object-size-0.c", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea19c8f33a3a8d2b52f89f1fade0a21e3c779190/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea19c8f33a3a8d2b52f89f1fade0a21e3c779190/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-0.c?ref=ea19c8f33a3a8d2b52f89f1fade0a21e3c779190", "patch": "@@ -34,6 +34,30 @@ test_deploop (size_t sz, size_t cond)\n   return __builtin_dynamic_object_size (bin, 0);\n }\n \n+size_t\n+__attribute__ ((access (__read_write__, 1, 2)))\n+__attribute__ ((noinline))\n+test_parmsz_simple (void *obj, size_t sz)\n+{\n+  return __builtin_dynamic_object_size (obj, 0);\n+}\n+\n+size_t\n+__attribute__ ((access (__read_write__, 1, 2)))\n+__attribute__ ((noinline))\n+test_parmsz_scaled (int *obj, size_t sz)\n+{\n+  return __builtin_dynamic_object_size (obj, 0);\n+}\n+\n+size_t\n+__attribute__ ((access (__read_write__, 1, 3)))\n+__attribute__ ((noinline))\n+test_parmsz_unknown (void *obj, void *unknown, size_t sz, int cond)\n+{\n+  return __builtin_dynamic_object_size (cond ? obj : unknown, 0);\n+}\n+\n unsigned nfails = 0;\n \n #define FAIL() ({ \\\n@@ -42,14 +66,23 @@ unsigned nfails = 0;\n })\n \n int\n-main ()\n+main (int argc, char **argv)\n {\n   if (test_builtin_malloc_condphi (1) != 32)\n     FAIL ();\n   if (test_builtin_malloc_condphi (0) != 64)\n     FAIL ();\n   if (test_deploop (128, 129) != 32)\n     FAIL ();\n+  if (test_parmsz_simple (argv[0], __builtin_strlen (argv[0]) + 1)\n+      != __builtin_strlen (argv[0]) + 1)\n+    FAIL ();\n+  int arr[42];\n+  if (test_parmsz_scaled (arr, 42) != sizeof (arr))\n+    FAIL ();\n+  if (test_parmsz_unknown (argv[0], argv[0], __builtin_strlen (argv[0]) + 1, 0)\n+      != -1)\n+    FAIL ();\n \n   if (nfails > 0)\n     __builtin_abort ();"}, {"sha": "fa7233d2ae0818dd432a3bb42deeb3d258a96f51", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea19c8f33a3a8d2b52f89f1fade0a21e3c779190/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea19c8f33a3a8d2b52f89f1fade0a21e3c779190/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=ea19c8f33a3a8d2b52f89f1fade0a21e3c779190", "patch": "@@ -32,6 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-fold.h\"\n #include \"gimple-iterator.h\"\n #include \"tree-cfg.h\"\n+#include \"tree-dfa.h\"\n #include \"stringpool.h\"\n #include \"attribs.h\"\n #include \"builtins.h\"\n@@ -1440,6 +1441,55 @@ cond_expr_object_size (struct object_size_info *osi, tree var, gimple *stmt)\n   return reexamine;\n }\n \n+/* Find size of an object passed as a parameter to the function.  */\n+\n+static void\n+parm_object_size (struct object_size_info *osi, tree var)\n+{\n+  int object_size_type = osi->object_size_type;\n+  tree parm = SSA_NAME_VAR (var);\n+\n+  if (!(object_size_type & OST_DYNAMIC) || !POINTER_TYPE_P (TREE_TYPE (parm)))\n+    {\n+      expr_object_size (osi, var, parm);\n+      return;\n+    }\n+\n+  /* Look for access attribute.  */\n+  rdwr_map rdwr_idx;\n+\n+  tree fndecl = cfun->decl;\n+  const attr_access *access = get_parm_access (rdwr_idx, parm, fndecl);\n+  tree typesize = TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (parm)));\n+  tree sz = NULL_TREE;\n+\n+  if (access && access->sizarg != UINT_MAX)\n+    {\n+      tree fnargs = DECL_ARGUMENTS (fndecl);\n+      tree arg = NULL_TREE;\n+      unsigned argpos = 0;\n+\n+      /* Walk through the parameters to pick the size parameter and safely\n+\t scale it by the type size.  */\n+      for (arg = fnargs; arg; arg = TREE_CHAIN (arg), ++argpos)\n+\tif (argpos == access->sizarg && INTEGRAL_TYPE_P (TREE_TYPE (arg)))\n+\t  {\n+\t    sz = get_or_create_ssa_default_def (cfun, arg);\n+\t    if (sz != NULL_TREE)\n+\t      {\n+\t\tsz = fold_convert (sizetype, sz);\n+\t\tif (typesize)\n+\t\t  sz = size_binop (MULT_EXPR, sz, typesize);\n+\t      }\n+\t    break;\n+\t  }\n+    }\n+  if (!sz)\n+    sz = size_unknown (object_size_type);\n+\n+  object_sizes_set (osi, SSA_NAME_VERSION (var), sz, sz);\n+}\n+\n /* Compute an object size expression for VAR, which is the result of a PHI\n    node.  */\n \n@@ -1617,7 +1667,7 @@ collect_object_sizes_for (struct object_size_info *osi, tree var)\n     case GIMPLE_NOP:\n       if (SSA_NAME_VAR (var)\n \t  && TREE_CODE (SSA_NAME_VAR (var)) == PARM_DECL)\n-\texpr_object_size (osi, var, SSA_NAME_VAR (var));\n+\tparm_object_size (osi, var);\n       else\n \t/* Uninitialized SSA names point nowhere.  */\n \tunknown_object_size (osi, var);"}]}