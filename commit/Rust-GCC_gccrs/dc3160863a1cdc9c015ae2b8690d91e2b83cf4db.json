{"sha": "dc3160863a1cdc9c015ae2b8690d91e2b83cf4db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGMzMTYwODYzYTFjZGM5YzAxNWFlMmI4NjkwZDkxZTJiODNjZjRkYg==", "commit": {"author": {"name": "Peter S. Mazinger", "email": "ps.m@gmx.net", "date": "2004-11-11T03:18:02Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-11-11T03:18:02Z"}, "message": "linux.h (LINUX_TARGET_OS_CPP_BUILTINS): Define __PIC__ and __pic__ only if TARGET_ABICALLS.\n\n2004-11-10  Peter S. Mazinger  <ps.m@gmx.net>\n\n\t* config/mips/linux.h (LINUX_TARGET_OS_CPP_BUILTINS): Define\n\t__PIC__ and __pic__ only if TARGET_ABICALLS.\n\t(SUBTARGET_CPP_SPECS): Don't define or undefine __PIC__ and __pic__.\n\t(SUBTARGET_ASM_SPECS): Don't pass -non_shared to assembler; pass\n\t-KPIC only if not -mno-abicalls.\n\n\t* config/alpha/linux.h, config/arm/linux-elf.h, config/pa/pa-linux.h\n\t* config/sparc/linux.h, config/sparc/linux64.h\n\t(TARGET_OS_CPP_BUILTINS): Define __PIC__ and __pic__ if flag_pic.\n\n\t* config/arm/linux-gas.h (CPP_SPEC): Don't define __PIC__ or __pic__.\n\t* config/pa/pa/linux.h (CPP_SPEC): Likewise.\n\t* config/sparc/linux.h (CPP_SUBTARGET_SPEC): Likewise.\n\t* config/sparc/linux64.h (CPP_SUBTARGET_SPEC): Likewise.\n\nFrom-SVN: r90470", "tree": {"sha": "a54f2bc0212c863a4196ecc6fcaaa57d680d48d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a54f2bc0212c863a4196ecc6fcaaa57d680d48d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc3160863a1cdc9c015ae2b8690d91e2b83cf4db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc3160863a1cdc9c015ae2b8690d91e2b83cf4db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc3160863a1cdc9c015ae2b8690d91e2b83cf4db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc3160863a1cdc9c015ae2b8690d91e2b83cf4db/comments", "author": {"login": "ps-m", "id": 38988479, "node_id": "MDQ6VXNlcjM4OTg4NDc5", "avatar_url": "https://avatars.githubusercontent.com/u/38988479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ps-m", "html_url": "https://github.com/ps-m", "followers_url": "https://api.github.com/users/ps-m/followers", "following_url": "https://api.github.com/users/ps-m/following{/other_user}", "gists_url": "https://api.github.com/users/ps-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/ps-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ps-m/subscriptions", "organizations_url": "https://api.github.com/users/ps-m/orgs", "repos_url": "https://api.github.com/users/ps-m/repos", "events_url": "https://api.github.com/users/ps-m/events{/privacy}", "received_events_url": "https://api.github.com/users/ps-m/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8ef36086c65ab47220e159ef34e90907836775e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ef36086c65ab47220e159ef34e90907836775e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ef36086c65ab47220e159ef34e90907836775e0"}], "stats": {"total": 121, "additions": 82, "deletions": 39}, "files": [{"sha": "8064f7f7f2cef5fa7f46a64d186f590ab5ade494", "filename": "gcc/ChangeLog", "status": "modified", "additions": 41, "deletions": 24, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc3160863a1cdc9c015ae2b8690d91e2b83cf4db/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc3160863a1cdc9c015ae2b8690d91e2b83cf4db/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc3160863a1cdc9c015ae2b8690d91e2b83cf4db", "patch": "@@ -1,3 +1,20 @@\n+2004-11-10  Peter S. Mazinger  <ps.m@gmx.net>\n+\n+\t* config/mips/linux.h (LINUX_TARGET_OS_CPP_BUILTINS): Define\n+\t__PIC__ and __pic__ only if TARGET_ABICALLS.\n+\t(SUBTARGET_CPP_SPECS): Don't define or undefine __PIC__ and __pic__.\n+\t(SUBTARGET_ASM_SPECS): Don't pass -non_shared to assembler; pass\n+\t-KPIC only if not -mno-abicalls.\n+\n+\t* config/alpha/linux.h, config/arm/linux-elf.h, config/pa/pa-linux.h\n+\t* config/sparc/linux.h, config/sparc/linux64.h\n+\t(TARGET_OS_CPP_BUILTINS): Define __PIC__ and __pic__ if flag_pic.\n+\n+\t* config/arm/linux-gas.h (CPP_SPEC): Don't define __PIC__ or __pic__.\n+\t* config/pa/pa/linux.h (CPP_SPEC): Likewise.\n+\t* config/sparc/linux.h (CPP_SUBTARGET_SPEC): Likewise.\n+\t* config/sparc/linux64.h (CPP_SUBTARGET_SPEC): Likewise.\n+\n 2004-11-11  Paul Brook  <paul@codesourcery.com>\n \n \t* config/arm/arm.c (arm_compute_save_reg0_reg12_mask): Save PIC\n@@ -15,7 +32,7 @@\n \n \t* tree-data-ref.c (build_classic_dist_vector): If either loop\n \tis outside of the nest we asked about, the dependence can't\n-\tmatter.\t\n+\tmatter.\n \t(build_classic_dir_vector): Ditto.\n \n 2004-11-10  Zdenek Dvorak  <dvorakz@suse.cz>\n@@ -193,7 +210,7 @@\n \t* reload.h: Remove the corresponding prototypes.\n \n 2004-11-09  James A. Morrison  <phython@gcc.gnu.org>\n-            Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\t    Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \tPR target/18230\n \t* doc/md.texi (SPARC constraints): Document 'Y' constraint.\n@@ -246,7 +263,7 @@\n \twhen eliminating an UNSPEC_CMPINT.\n \t(s390_secondary_input_reload_class): Fix test for CC register reload.\n \t(s390_secondary_output_reload_class): Likewise.\n-\t(s390_expand_cmpmem): Swap operands.  Use gen_cmpint. \n+\t(s390_expand_cmpmem): Swap operands.  Use gen_cmpint.\n \t* config/s390/s390.md (\"*cmpint_si\", \"*cmpint_di\"): Remove.\n \t(\"cmpint\", \"*cmpint_cc\", \"*cmpint_sign\", \"*cmpint_sign_cc\"): New\n \tinsn patterns with splitters.\n@@ -458,22 +475,22 @@\n \t(\"*cmpint_si\", \"*cmpint_di\", \"fix_truncdfsi2_ibm\", \"floatsidf2_ibm\",\n \t\"*negdi2_31\"):\n \tDo not set type attribute to \"other\" where already default.\n-\t(\"movti\", \"*movdi_64\", \"*movdi_31\", \"*movdf_31\", \n+\t(\"movti\", \"*movdi_64\", \"*movdi_31\", \"*movdf_31\",\n \t\"*strlendi\", \"*strlensi\",\n \t\"*movmem_long_64\", \"*movmem_long_31\",\n \t\"*clrmem_long_64\", \"*clrmem_long_31\",\n \t\"*cmpmem_long_64\", \"*cmpmem_long_31\",\n-\t\"*cmpint_si\", \"*cmpint_di\", \n-\t\"addti3\", \"*adddi3_31z\", \"*adddi3_31\", \n+\t\"*cmpint_si\", \"*cmpint_di\",\n+\t\"addti3\", \"*adddi3_31z\", \"*adddi3_31\",\n \t\"subti3\", \"*subdi3_31z\", \"*subdi3_31\", \"*negdi2_31\",\n \t\"*sconddi\", \"*scondsi\", \"*sconddi_neg\", \"*scondsi_neg\",\n \t\"fix_truncdfsi2_ibm\", \"floatsidf2_ibm\", \"extendsfdf2_ibm\",\n \t\"*pool_entry\", \"pool_align\", \"pool_section_start\",\n \t\"pool_section_end\", \"main_pool\", \"reload_base_31\", \"pool\"):\n \tDo not set op_type attribute to \"NN\" where already default.\n-\t(\"*extractqi\", \"*extracthi\", \"*zero_extendhisi2_31\", \n+\t(\"*extractqi\", \"*extracthi\", \"*zero_extendhisi2_31\",\n \t\"*zero_extendqisi2_31\", \"*zero_extendqihi2_31\",\n-\t\"fix_truncdfsi2_ibm\", \"floatsidf2_ibm\"): \n+\t\"fix_truncdfsi2_ibm\", \"floatsidf2_ibm\"):\n \tDo not set atype attribute to \"agen\" where already default.\n \t(\"*movmem_short\", \"*clrmem_short\", \"*cmpmem_short\"): Don't set op_type.\n \n@@ -572,7 +589,7 @@\n \t(\"floatsisf2\", \"floatsisf2_ieee\"): Likewise.\n \t(\"truncdfsf2\", \"truncdfsf2_ieee\"): Only allow \"register_operand\".\n \t(\"truncdfsf2_ibm\"): Only allow \"nonimmediate_operand\".  Use LER\n-\tinstead of LRER. \n+\tinstead of LRER.\n \t(\"extendsfdf2_ibm\"): Do not set atype.  Set type to \"floads\".\n \t(\"sqrtdf2\"): Set type to \"fsqrtd\".\n \t(\"sqrtsf2\"): Set type to \"fsqrts\".\n@@ -717,7 +734,7 @@\n \n \t* config/arm/arm.c (arm_handle_notshared_attribute): New function.\n \t* doc/extend.texi: Document \"notshared\" attribute.\n-\t\n+\n 2004-11-04  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-phinodes.c (make_phi_node): Make it static.\n@@ -771,7 +788,7 @@\n \n 2004-11-04  Andrew Pinski  <pinskia@physics.uc.edu>\n \n-\t* flow.c (init_propagate_block_info): Change the type of i to \n+\t* flow.c (init_propagate_block_info): Change the type of i to\n \tunsigned.\n \n 2004-11-04  Ulrich Weigand  <uweigand@de.ibm.com>\n@@ -910,13 +927,13 @@\n \tAlso update DR_MISALIGNMENT due to peeling; this functionality used to\n \tbe in vect_update_inits_of_drs and vect_do_peeling_for_alignment).\n \t(vect_analyze_data_refs_alignment): Decision on whether and by how much\n-\tto peel moved to vect_enhance_data_refs_alignment. Call \n+\tto peel moved to vect_enhance_data_refs_alignment. Call\n \tvect_supportable_dr_alignment.\n \n \t(vect_compute_data_ref_alignment): Set STMT_VINFO_VECTYPE.\n \t(vect_compute_data_refs_alignment): Return bool. Consider return value\n \tof vect_compute_data_ref_alignment and return true/false accordingly.\n-\t(vect_enhance_data_refs_alignment): Consider return value of \n+\t(vect_enhance_data_refs_alignment): Consider return value of\n \tvect_compute_data_refs_alignment and return true/false accordingly.\n \n \t(vect_supportable_dr_alignment): New function.\n@@ -1080,7 +1097,7 @@\n \t* rtlanal.c (canonicalize_condition, get_condition): ...here.\n \t* sched-deps.c (get_condition): Rename to sched_get_condition.\n \t(add_dependence): Update this caller.\n- \n+\n 2004-11-02  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR tree-opt/16808\n@@ -1146,7 +1163,7 @@\n \n 2004-11-02  Ben Elliston  <bje@au.ibm.com>\n \n-\t* timevar.h (timevar_get): Remove. \n+\t* timevar.h (timevar_get): Remove.\n \t* timevar.c (timevar_get): Remove unused function.\n \n 2004-11-02  Joseph S. Myers  <joseph@codesourcery.com>\n@@ -1161,7 +1178,7 @@\n 2004-11-01  Andrew MacLeod  <amacleod@redhat.com>\n \n \tPR tree-optimization/16447\n-\t* tree-cfg.c (bsi_commit_one_edge_insert): Rename from \n+\t* tree-cfg.c (bsi_commit_one_edge_insert): Rename from\n \tbsi_commit_edge_inserts_1, and make funtion external.  Return new block.\n \t(bsi_commit_edge_inserts): Use renamed bsi_commit_one_edge_insert.\n \t* tree-optimize.c (pass_cleanup_cfg_post_optimizing): Enable listing.\n@@ -1170,7 +1187,7 @@\n \t(same_stmt_list_p): New.  Return TRUE if edge is to be forwarded.\n \t(identical_copies_p): New.  Return true is two copies are the same.\n \t(identical_stmt_lists_p): New.  Return true if stmt lists are the same.\n-\t(analyze_edges_for_bb): New.  Determine how best to insert edge stmts \n+\t(analyze_edges_for_bb): New.  Determine how best to insert edge stmts\n \tfor a basic block.\n \t(perform_edge_inserts): New.  Determine what to do with all stmts that\n \thave been inserted on edges.\n@@ -1213,7 +1230,7 @@\n \n \tFix PR tree-optimization/17672\n \tFix PR tree-optimization/18168\n-\t\n+\n \t* lambda-code.c (lambda_lattice_compute_base): Fix reversed\n \tassert test.\n \t(gcc_tree_to_linear_expression): Add extra to existing constant.\n@@ -1228,7 +1245,7 @@\n \tand induction variable creation.\n \t(lle_to_gcc_expression): Ditto.\n \t(lambda_loopnest_to_gcc_loopnest): Create new iv with same type as\n-\toldiv. Pass type argument to lle_to_gcc_expression and \n+\toldiv. Pass type argument to lle_to_gcc_expression and\n \tlbv_to_gcc_expression.\n \tReset number of iterations after transformation.\n \t(perfect_nestify): Remove useless pre-allocation, and cleanup\n@@ -1239,12 +1256,12 @@\n \t(build_classic_dir_vector): Ditto.\n \t(compute_data_dependences_for_loop): Only add dependence relations\n \tinside the loop we asked about.\n-\t\n+\n \t* tree-loop-linear.c (linear_transform_loops): Use DDR_SIZE_VECT.\n \tCompute immediate uses.\n-\t\n+\n \t* tree-optimize.c: Move linear_transform_loops to before ivcanon.\n-\t\n+\n 2004-11-01  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-cfg.c (thread_jumps): Fix a comment typo.\n@@ -1484,7 +1501,7 @@\n \n \tconfig/mn10300/mn10300.h (CONDITIONAL_REGISTER_USAGE): When\n \tadding the PIC register to the fixed_regs array, also add it\n-\tto the call_used_regs array.  \n+\tto the call_used_regs array.\n \n 2004-10-29  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n@@ -1498,7 +1515,7 @@\n \tfunction to call.\n \t(rewrite_def_def_chains): Call rewrite_blocks with true here.\n \t(rewrite_into_ssa): and call it with false here.\n-\t\n+\n 2004-10-29  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-phinodes.c (add_phi_arg): Turn an \"if\" that always"}, {"sha": "a64529f6b935a9a1853b0cda7f189aa58c6ce6da", "filename": "gcc/config/alpha/linux.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc3160863a1cdc9c015ae2b8690d91e2b83cf4db/gcc%2Fconfig%2Falpha%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc3160863a1cdc9c015ae2b8690d91e2b83cf4db/gcc%2Fconfig%2Falpha%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Flinux.h?ref=dc3160863a1cdc9c015ae2b8690d91e2b83cf4db", "patch": "@@ -36,6 +36,11 @@ Boston, MA 02111-1307, USA.  */\n \t/* The GNU C++ standard library requires this.  */\t\\\n \tif (c_dialect_cxx ())\t\t\t\t\t\\\n \t  builtin_define (\"_GNU_SOURCE\");\t\t\t\\\n+\tif (flag_pic)\t\t\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\\\n+\t\tbuiltin_define (\"__PIC__\");\t\t\t\\\n+\t\tbuiltin_define (\"__pic__\");\t\t\t\\\n+\t  }\t\t\t\t\t\t\t\\\n     } while (0)\n \n #undef LIB_SPEC"}, {"sha": "892acf2d86c2817e9908c4ff68f1e32cde1411ae", "filename": "gcc/config/arm/linux-elf.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc3160863a1cdc9c015ae2b8690d91e2b83cf4db/gcc%2Fconfig%2Farm%2Flinux-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc3160863a1cdc9c015ae2b8690d91e2b83cf4db/gcc%2Fconfig%2Farm%2Flinux-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flinux-elf.h?ref=dc3160863a1cdc9c015ae2b8690d91e2b83cf4db", "patch": "@@ -89,7 +89,17 @@\n    %{mbig-endian:-EB}\" \\\n    SUBTARGET_EXTRA_LINK_SPEC\n \n-#define TARGET_OS_CPP_BUILTINS() LINUX_TARGET_OS_CPP_BUILTINS()\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+\tLINUX_TARGET_OS_CPP_BUILTINS();\t\t\\\n+\tif (flag_pic)\t\t\t\t\\\n+\t  {\t\t\t\t\t\\\n+\t\tbuiltin_define (\"__PIC__\");\t\\\n+\t\tbuiltin_define (\"__pic__\");\t\\\n+\t  }\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n \n /* This is how we tell the assembler that two symbols have the same value.  */\n #define ASM_OUTPUT_DEF(FILE, NAME1, NAME2) \\"}, {"sha": "85ae98a5eff9d8e515b9351357cb4f52fbb99f29", "filename": "gcc/config/arm/linux-gas.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc3160863a1cdc9c015ae2b8690d91e2b83cf4db/gcc%2Fconfig%2Farm%2Flinux-gas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc3160863a1cdc9c015ae2b8690d91e2b83cf4db/gcc%2Fconfig%2Farm%2Flinux-gas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flinux-gas.h?ref=dc3160863a1cdc9c015ae2b8690d91e2b83cf4db", "patch": "@@ -28,7 +28,7 @@\n #define DEFAULT_SIGNED_CHAR 0\n \n #undef  SUBTARGET_CPP_SPEC\n-#define SUBTARGET_CPP_SPEC  \"%{posix:-D_POSIX_SOURCE} %{fPIC|fPIE:-D__PIC__ -D__pic__} %{fpic|fpie:-D__PIC__ -D__pic__}\"\n+#define SUBTARGET_CPP_SPEC  \"%{posix:-D_POSIX_SOURCE}\"\n \n #undef  SIZE_TYPE\n #define SIZE_TYPE \"unsigned int\""}, {"sha": "de3f0cd8f1404b48bb92584b35e2fcc7b45ed17b", "filename": "gcc/config/mips/linux.h", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc3160863a1cdc9c015ae2b8690d91e2b83cf4db/gcc%2Fconfig%2Fmips%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc3160863a1cdc9c015ae2b8690d91e2b83cf4db/gcc%2Fconfig%2Fmips%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Flinux.h?ref=dc3160863a1cdc9c015ae2b8690d91e2b83cf4db", "patch": "@@ -56,8 +56,11 @@ Boston, MA 02111-1307, USA.  */\n #define TARGET_OS_CPP_BUILTINS()\t\t\t\t\\\n     do {\t\t\t\t\t\t\t\\\n \tLINUX_TARGET_OS_CPP_BUILTINS();\t\t\t\t\\\n-\tbuiltin_define (\"__PIC__\");\t\t\t\t\\\n-\tbuiltin_define (\"__pic__\");\t\t\t\t\\\n+\tif (TARGET_ABICALLS)\t\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\\\n+\t    builtin_define (\"__PIC__\");\t\t\t\t\\\n+\t    builtin_define (\"__pic__\");\t\t\t\t\\\n+\t  }\t\t\t\t\t\t\t\\\n         builtin_assert (\"machine=mips\");\t\t\t\\\n \t/* The GNU C++ standard library requires this.  */\t\\\n \tif (c_dialect_cxx ())\t\t\t\t\t\\\n@@ -96,10 +99,7 @@ Boston, MA 02111-1307, USA.  */\n } while (0)\n \n #undef  SUBTARGET_CPP_SPEC\n-#define SUBTARGET_CPP_SPEC \"\\\n-%{fno-PIC:-U__PIC__ -U__pic__} %{fno-pic:-U__PIC__ -U__pic__} \\\n-%{fPIC|fPIE|fpic|fpie:-D__PIC__ -D__pic__} \\\n-%{pthread:-D_REENTRANT}\"\n+#define SUBTARGET_CPP_SPEC \"%{pthread:-D_REENTRANT}\"\n \n /* From iris5.h */\n /* -G is incompatible with -KPIC which is the default, so only allow objects\n@@ -120,10 +120,7 @@ Boston, MA 02111-1307, USA.  */\n         %{static:-static}}}\"\n \n #undef SUBTARGET_ASM_SPEC\n-#define SUBTARGET_ASM_SPEC \"\\\n-%{mabi=64: -64} \\\n-%{!fno-PIC:%{!fno-pic:-KPIC}} \\\n-%{fno-PIC:-non_shared} %{fno-pic:-non_shared}\"\n+#define SUBTARGET_ASM_SPEC \"%{mabi=64: -64} %{!mno-abicalls:-KPIC}\"\n \n /* The MIPS assembler has different syntax for .set. We set it to\n    .dummy to trap any errors.  */"}, {"sha": "fa8671585cc510f81bf05d167a0e95629af2ed49", "filename": "gcc/config/pa/pa-linux.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc3160863a1cdc9c015ae2b8690d91e2b83cf4db/gcc%2Fconfig%2Fpa%2Fpa-linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc3160863a1cdc9c015ae2b8690d91e2b83cf4db/gcc%2Fconfig%2Fpa%2Fpa-linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-linux.h?ref=dc3160863a1cdc9c015ae2b8690d91e2b83cf4db", "patch": "@@ -58,11 +58,16 @@ Boston, MA 02111-1307, USA.  */\n     {\t\t\t\t\t\t\\\n \tLINUX_TARGET_OS_CPP_BUILTINS();\t\t\\\n \tbuiltin_assert (\"machine=bigendian\");\t\\\n+\tif (flag_pic)\t\t\t\t\\\n+\t  {\t\t\t\t\t\\\n+\t\tbuiltin_define (\"__PIC__\");\t\\\n+\t\tbuiltin_define (\"__pic__\");\t\\\n+\t  }\t\t\t\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n #undef CPP_SPEC\n-#define CPP_SPEC \"%{fPIC|fpic|fPIE|fpie:-D__PIC__ -D__pic__} %{posix:-D_POSIX_SOURCE}\"\n+#define CPP_SPEC \"%{posix:-D_POSIX_SOURCE}\"\n \n #undef\tLIB_SPEC\n #define LIB_SPEC \\"}, {"sha": "2116cb4adbf05bfa3300d404f7d5460763ade3c5", "filename": "gcc/config/sparc/linux.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc3160863a1cdc9c015ae2b8690d91e2b83cf4db/gcc%2Fconfig%2Fsparc%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc3160863a1cdc9c015ae2b8690d91e2b83cf4db/gcc%2Fconfig%2Fsparc%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux.h?ref=dc3160863a1cdc9c015ae2b8690d91e2b83cf4db", "patch": "@@ -29,6 +29,11 @@ Boston, MA 02111-1307, USA.  */\n \tbuiltin_assert (\"system=linux\");\t\\\n \tbuiltin_assert (\"system=unix\");\t\t\\\n \tbuiltin_assert (\"system=posix\");\t\\\n+\tif (flag_pic)\t\t\t\t\\\n+\t  {\t\t\t\t\t\\\n+\t\tbuiltin_define (\"__PIC__\");\t\\\n+\t\tbuiltin_define (\"__pic__\");\t\\\n+\t  }\t\t\t\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n@@ -100,7 +105,7 @@ Boston, MA 02111-1307, USA.  */\n \n #undef CPP_SUBTARGET_SPEC\n #define CPP_SUBTARGET_SPEC \\\n-\"%{fPIC|fPIE|fpic|fpie:-D__PIC__ -D__pic__} %{posix:-D_POSIX_SOURCE} \\\n+\"%{posix:-D_POSIX_SOURCE} \\\n %{pthread:-D_REENTRANT} %{mlong-double-128:-D__LONG_DOUBLE_128__}\"\n \n #undef LIB_SPEC"}, {"sha": "0b91659abd2ae6126c7b74e37e860bd0a5745d1b", "filename": "gcc/config/sparc/linux64.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc3160863a1cdc9c015ae2b8690d91e2b83cf4db/gcc%2Fconfig%2Fsparc%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc3160863a1cdc9c015ae2b8690d91e2b83cf4db/gcc%2Fconfig%2Fsparc%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux64.h?ref=dc3160863a1cdc9c015ae2b8690d91e2b83cf4db", "patch": "@@ -30,6 +30,11 @@ Boston, MA 02111-1307, USA.  */\n \tbuiltin_assert (\"system=linux\");\t\\\n \tbuiltin_assert (\"system=unix\");\t\t\\\n \tbuiltin_assert (\"system=posix\");\t\\\n+\tif (flag_pic)\t\t\t\t\\\n+\t  {\t\t\t\t\t\\\n+\t\tbuiltin_define (\"__PIC__\");\t\\\n+\t\tbuiltin_define (\"__pic__\");\t\\\n+\t  }\t\t\t\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n@@ -127,7 +132,6 @@ Boston, MA 02111-1307, USA.  */\n \n #undef CPP_SUBTARGET_SPEC\n #define CPP_SUBTARGET_SPEC \"\\\n-%{fPIC|fpic|fPIE|fpie:-D__PIC__ -D__pic__} \\\n %{posix:-D_POSIX_SOURCE} \\\n %{pthread:-D_REENTRANT} \\\n \""}]}