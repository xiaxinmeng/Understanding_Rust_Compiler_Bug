{"sha": "ea78578fb901db6fb40de6ff4b78ce033b2e2778", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE3ODU3OGZiOTAxZGI2ZmI0MGRlNmZmNGI3OGNlMDMzYjJlMjc3OA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-02-19T13:23:44Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-02-19T13:23:44Z"}, "message": "Unroll hard register loops if <= 4*HOST_BITS_PER_WIDE_INT registers\n\nFrom-SVN: r11302", "tree": {"sha": "4cee724a97b2858e62f11529a89ab2dd7f6c5814", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cee724a97b2858e62f11529a89ab2dd7f6c5814"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea78578fb901db6fb40de6ff4b78ce033b2e2778", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea78578fb901db6fb40de6ff4b78ce033b2e2778", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea78578fb901db6fb40de6ff4b78ce033b2e2778", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea78578fb901db6fb40de6ff4b78ce033b2e2778/comments", "author": null, "committer": null, "parents": [{"sha": "7e277025362cd771b4cd6df6215754727c43eacc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e277025362cd771b4cd6df6215754727c43eacc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e277025362cd771b4cd6df6215754727c43eacc"}], "stats": {"total": 196, "additions": 196, "deletions": 0}, "files": [{"sha": "eef88e8739203ede0cf4485a0e9c95418cb0ad8e", "filename": "gcc/hard-reg-set.h", "status": "modified", "additions": 196, "deletions": 0, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea78578fb901db6fb40de6ff4b78ce033b2e2778/gcc%2Fhard-reg-set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea78578fb901db6fb40de6ff4b78ce033b2e2778/gcc%2Fhard-reg-set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhard-reg-set.h?ref=ea78578fb901db6fb40de6ff4b78ce033b2e2778", "patch": "@@ -123,6 +123,199 @@ typedef HARD_REG_ELT_TYPE HARD_REG_SET[HARD_REG_SET_LONGS];\n   ((SET)[(BIT) / UHOST_BITS_PER_WIDE_INT]\t\\\n    & (HARD_CONST (1) << ((BIT) % UHOST_BITS_PER_WIDE_INT)))\n \n+#if FIRST_PSEUDO_REGISTER <= 2*HOST_BITS_PER_WIDE_INT\n+#define CLEAR_HARD_REG_SET(TO)  \\\n+do { register HARD_REG_ELT_TYPE *scan_tp_ = (TO);\t\t\\\n+     scan_tp_[0] = 0;\t\t\t\t\t\t\\\n+     scan_tp_[1] = 0; } while (0)\n+\n+#define SET_HARD_REG_SET(TO)  \\\n+do { register HARD_REG_ELT_TYPE *scan_tp_ = (TO);\t\t\\\n+     scan_tp_[0] = -1;\t\t\t\t\t\t\\\n+     scan_tp_[1] = -1; } while (0)\n+\n+#define COPY_HARD_REG_SET(TO, FROM)  \\\n+do { register HARD_REG_ELT_TYPE *scan_tp_ = (TO), *scan_fp_ = (FROM);\t\\\n+     scan_tp_[0] = scan_fp_[0];\t\t\t\t\t\\\n+     scan_tp_[1] = scan_fp_[1]; } while (0)\n+\n+#define COMPL_HARD_REG_SET(TO, FROM)  \\\n+do { register HARD_REG_ELT_TYPE *scan_tp_ = (TO), *scan_fp_ = (FROM); \\\n+     scan_tp_[0] = ~ scan_fp_[0];\t\t\t\t\\\n+     scan_tp_[1] = ~ scan_fp_[1]; } while (0)\n+\n+#define AND_HARD_REG_SET(TO, FROM)  \\\n+do { register HARD_REG_ELT_TYPE *scan_tp_ = (TO), *scan_fp_ = (FROM); \\\n+     scan_tp_[0] &= scan_fp_[0];\t\t\t\t\t\\\n+     scan_tp_[1] &= scan_fp_[1]; } while (0)\n+\n+#define AND_COMPL_HARD_REG_SET(TO, FROM)  \\\n+do { register HARD_REG_ELT_TYPE *scan_tp_ = (TO), *scan_fp_ = (FROM); \\\n+     scan_tp_[0] &= ~ scan_fp_[0];\t\t\t\t\\\n+     scan_tp_[1] &= ~ scan_fp_[1]; } while (0)\n+\n+#define IOR_HARD_REG_SET(TO, FROM)  \\\n+do { register HARD_REG_ELT_TYPE *scan_tp_ = (TO), *scan_fp_ = (FROM); \\\n+     scan_tp_[0] |= scan_fp_[0];\t\t\t\t\\\n+     scan_tp_[1] |= scan_fp_[1]; } while (0)\n+\n+#define IOR_COMPL_HARD_REG_SET(TO, FROM)  \\\n+do { register HARD_REG_ELT_TYPE *scan_tp_ = (TO), *scan_fp_ = (FROM); \\\n+     scan_tp_[0] |= ~ scan_fp_[0];\t\t\t\t\\\n+     scan_tp_[1] |= ~ scan_fp_[1]; } while (0)\n+\n+#define GO_IF_HARD_REG_SUBSET(X,Y,TO)  \\\n+do { register HARD_REG_ELT_TYPE *scan_xp_ = (X), *scan_yp_ = (Y); \\\n+     if ((0 == (scan_xp_[0] & ~ scan_yp_[0]))\t\t\t\\\n+\t && (0 == (scan_xp_[1] & ~ scan_yp_[1])))\t\t\\\n+\tgoto TO; } while (0)\n+\n+#define GO_IF_HARD_REG_EQUAL(X,Y,TO)  \\\n+do { register HARD_REG_ELT_TYPE *scan_xp_ = (X), *scan_yp_ = (Y); \\\n+     if ((scan_xp_[0] == scan_yp_[0])\t\t\t\t\\\n+\t && (scan_xp_[1] == scan_yp_[1]))\n+\tgoto TO; } while (0)\n+\n+#else\n+#if FIRST_PSEUDO_REGISTER <= 3*HOST_BITS_PER_WIDE_INT\n+#define CLEAR_HARD_REG_SET(TO)  \\\n+do { register HARD_REG_ELT_TYPE *scan_tp_ = (TO);\t\t\\\n+     scan_tp_[0] = 0;\t\t\t\t\t\t\\\n+     scan_tp_[1] = 0;\t\t\t\t\t\t\\\n+     scan_tp_[2] = 0; } while (0)\n+\n+#define SET_HARD_REG_SET(TO)  \\\n+do { register HARD_REG_ELT_TYPE *scan_tp_ = (TO);\t\t\\\n+     scan_tp_[0] = -1;\t\t\t\t\t\t\\\n+     scan_tp_[1] = -1;\t\t\t\t\t\t\\\n+     scan_tp_[2] = -1; } while (0)\n+\n+#define COPY_HARD_REG_SET(TO, FROM)  \\\n+do { register HARD_REG_ELT_TYPE *scan_tp_ = (TO), *scan_fp_ = (FROM);\t\\\n+     scan_tp_[0] = scan_fp_[0];\t\t\t\t\t\\\n+     scan_tp_[1] = scan_fp_[1];\t\t\t\t\t\\\n+     scan_tp_[2] = scan_fp_[2]; } while (0)\n+\n+#define COMPL_HARD_REG_SET(TO, FROM)  \\\n+do { register HARD_REG_ELT_TYPE *scan_tp_ = (TO), *scan_fp_ = (FROM); \\\n+     scan_tp_[0] = ~ scan_fp_[0];\t\t\t\t\\\n+     scan_tp_[1] = ~ scan_fp_[1];\t\t\t\t\\\n+     scan_tp_[2] = ~ scan_fp_[2]; } while (0)\n+\n+#define AND_HARD_REG_SET(TO, FROM)  \\\n+do { register HARD_REG_ELT_TYPE *scan_tp_ = (TO), *scan_fp_ = (FROM); \\\n+     scan_tp_[0] &= scan_fp_[0];\t\t\t\t\t\\\n+     scan_tp_[1] &= scan_fp_[1];\t\t\t\t\t\\\n+     scan_tp_[2] &= scan_fp_[2]; } while (0)\n+\n+#define AND_COMPL_HARD_REG_SET(TO, FROM)  \\\n+do { register HARD_REG_ELT_TYPE *scan_tp_ = (TO), *scan_fp_ = (FROM); \\\n+     scan_tp_[0] &= ~ scan_fp_[0];\t\t\t\t\\\n+     scan_tp_[1] &= ~ scan_fp_[1];\t\t\t\t\\\n+     scan_tp_[2] &= ~ scan_fp_[2]; } while (0)\n+\n+#define IOR_HARD_REG_SET(TO, FROM)  \\\n+do { register HARD_REG_ELT_TYPE *scan_tp_ = (TO), *scan_fp_ = (FROM); \\\n+     scan_tp_[0] |= scan_fp_[0];\t\t\t\t\\\n+     scan_tp_[1] |= scan_fp_[1];\t\t\t\t\\\n+     scan_tp_[2] |= scan_fp_[2]; } while (0)\n+\n+#define IOR_COMPL_HARD_REG_SET(TO, FROM)  \\\n+do { register HARD_REG_ELT_TYPE *scan_tp_ = (TO), *scan_fp_ = (FROM); \\\n+     scan_tp_[0] |= ~ scan_fp_[0];\t\t\t\t\\\n+     scan_tp_[1] |= ~ scan_fp_[1];\t\t\t\t\\\n+     scan_tp_[2] |= ~ scan_fp_[2]; } while (0)\n+\n+#define GO_IF_HARD_REG_SUBSET(X,Y,TO)  \\\n+do { register HARD_REG_ELT_TYPE *scan_xp_ = (X), *scan_yp_ = (Y); \\\n+     if ((0 == (scan_xp_[0] & ~ scan_yp_[0]))\t\t\t\\\n+\t && (0 == (scan_xp_[1] & ~ scan_yp_[1]))\t\t\\\n+\t && (0 == (scan_xp_[2] & ~ scan_yp_[2])))\t\t\\\n+\tgoto TO; } while (0)\n+\n+#define GO_IF_HARD_REG_EQUAL(X,Y,TO)  \\\n+do { register HARD_REG_ELT_TYPE *scan_xp_ = (X), *scan_yp_ = (Y); \\\n+     if ((scan_xp_[0] == scan_yp_[0])\t\t\t\t\\\n+\t && (scan_xp_[1] == scan_yp_[1])\t\t\t\\\n+\t && (scan_xp_[2] == scan_yp_[2]))\t\t\t\\\n+\tgoto TO; } while (0)\n+\n+#else\n+#if FIRST_PSEUDO_REGISTER <= 4*HOST_BITS_PER_WIDE_INT\n+#define CLEAR_HARD_REG_SET(TO)  \\\n+do { register HARD_REG_ELT_TYPE *scan_tp_ = (TO);\t\t\\\n+     scan_tp_[0] = 0;\t\t\t\t\t\t\\\n+     scan_tp_[1] = 0;\t\t\t\t\t\t\\\n+     scan_tp_[2] = 0;\t\t\t\t\t\t\\\n+     scan_tp_[3] = 0; } while (0)\n+\n+#define SET_HARD_REG_SET(TO)  \\\n+do { register HARD_REG_ELT_TYPE *scan_tp_ = (TO);\t\t\\\n+     scan_tp_[0] = -1;\t\t\t\t\t\t\\\n+     scan_tp_[1] = -1;\t\t\t\t\t\t\\\n+     scan_tp_[2] = -1;\t\t\t\t\t\t\\\n+     scan_tp_[3] = -1; } while (0)\n+\n+#define COPY_HARD_REG_SET(TO, FROM)  \\\n+do { register HARD_REG_ELT_TYPE *scan_tp_ = (TO), *scan_fp_ = (FROM);\t\\\n+     scan_tp_[0] = scan_fp_[0];\t\t\t\t\t\\\n+     scan_tp_[1] = scan_fp_[1];\t\t\t\t\t\\\n+     scan_tp_[2] = scan_fp_[2];\t\t\t\t\t\\\n+     scan_tp_[3] = scan_fp_[3]; } while (0)\n+\n+#define COMPL_HARD_REG_SET(TO, FROM)  \\\n+do { register HARD_REG_ELT_TYPE *scan_tp_ = (TO), *scan_fp_ = (FROM); \\\n+     scan_tp_[0] = ~ scan_fp_[0];\t\t\t\t\\\n+     scan_tp_[1] = ~ scan_fp_[1];\t\t\t\t\\\n+     scan_tp_[2] = ~ scan_fp_[2];\t\t\t\t\\\n+     scan_tp_[3] = ~ scan_fp_[3]; } while (0)\n+\n+#define AND_HARD_REG_SET(TO, FROM)  \\\n+do { register HARD_REG_ELT_TYPE *scan_tp_ = (TO), *scan_fp_ = (FROM); \\\n+     scan_tp_[0] &= scan_fp_[0];\t\t\t\t\t\\\n+     scan_tp_[1] &= scan_fp_[1];\t\t\t\t\t\\\n+     scan_tp_[2] &= scan_fp_[2];\t\t\t\t\t\\\n+     scan_tp_[3] &= scan_fp_[3]; } while (0)\n+\n+#define AND_COMPL_HARD_REG_SET(TO, FROM)  \\\n+do { register HARD_REG_ELT_TYPE *scan_tp_ = (TO), *scan_fp_ = (FROM); \\\n+     scan_tp_[0] &= ~ scan_fp_[0];\t\t\t\t\\\n+     scan_tp_[1] &= ~ scan_fp_[1];\t\t\t\t\\\n+     scan_tp_[2] &= ~ scan_fp_[2];\t\t\t\t\\\n+     scan_tp_[3] &= ~ scan_fp_[3]; } while (0)\n+\n+#define IOR_HARD_REG_SET(TO, FROM)  \\\n+do { register HARD_REG_ELT_TYPE *scan_tp_ = (TO), *scan_fp_ = (FROM); \\\n+     scan_tp_[0] |= scan_fp_[0];\t\t\t\t\\\n+     scan_tp_[1] |= scan_fp_[1];\t\t\t\t\\\n+     scan_tp_[2] |= scan_fp_[2];\t\t\t\t\\\n+     scan_tp_[3] |= scan_fp_[3]; } while (0)\n+\n+#define IOR_COMPL_HARD_REG_SET(TO, FROM)  \\\n+do { register HARD_REG_ELT_TYPE *scan_tp_ = (TO), *scan_fp_ = (FROM); \\\n+     scan_tp_[0] |= ~ scan_fp_[0];\t\t\t\t\\\n+     scan_tp_[1] |= ~ scan_fp_[1];\t\t\t\t\\\n+     scan_tp_[2] |= ~ scan_fp_[2];\t\t\t\t\\\n+     scan_tp_[3] |= ~ scan_fp_[3]; } while (0)\n+\n+#define GO_IF_HARD_REG_SUBSET(X,Y,TO)  \\\n+do { register HARD_REG_ELT_TYPE *scan_xp_ = (X), *scan_yp_ = (Y); \\\n+     if ((0 == (scan_xp_[0] & ~ scan_yp_[0]))\t\t\t\\\n+\t && (0 == (scan_xp_[1] & ~ scan_yp_[1]))\t\t\\\n+\t && (0 == (scan_xp_[2] & ~ scan_yp_[2]))\t\t\\\n+\t && (0 == (scan_xp_[3] & ~ scan_yp_[3])))\t\t\\\n+\tgoto TO; } while (0)\n+\n+#define GO_IF_HARD_REG_EQUAL(X,Y,TO)  \\\n+do { register HARD_REG_ELT_TYPE *scan_xp_ = (X), *scan_yp_ = (Y); \\\n+     if ((scan_xp_[0] == scan_yp_[0])\t\t\t\t\\\n+\t && (scan_xp_[1] == scan_yp_[1])\t\t\t\\\n+\t && (scan_xp_[2] == scan_yp_[2])\t\t\t\\\n+\t && (scan_xp_[3] == scan_yp_[3]))\t\t\t\\\n+\tgoto TO; } while (0)\n+\n+#else /* FIRST_PSEUDO_REGISTER > 3*HOST_BITS_PER_WIDE_INT */\n+\n #define CLEAR_HARD_REG_SET(TO)  \\\n do { register HARD_REG_ELT_TYPE *scan_tp_ = (TO);\t\t\\\n      register int i;\t\t\t\t\t\t\\\n@@ -186,6 +379,9 @@ do { register HARD_REG_ELT_TYPE *scan_xp_ = (X), *scan_yp_ = (Y); \\\n      if (i == HARD_REG_SET_LONGS) goto TO; } while (0)\n \n #endif\n+#endif\n+#endif\n+#endif\n \n /* Define some standard sets of registers.  */\n "}]}