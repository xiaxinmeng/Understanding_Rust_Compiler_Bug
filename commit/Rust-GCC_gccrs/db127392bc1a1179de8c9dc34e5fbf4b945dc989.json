{"sha": "db127392bc1a1179de8c9dc34e5fbf4b945dc989", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGIxMjczOTJiYzFhMTE3OWRlOGM5ZGMzNGU1ZmJmNGI5NDVkYzk4OQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-10-07T09:57:38Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-10-07T09:57:38Z"}, "message": "Warning fixes:\n\n        * Makefile.in (c-gperf.h): Add -L KR-C -F ', 0, 0' flags to gperf.\n        (c-parse.gperf): Update comments describing invocation flags.\n        (c-gperf.h): Regenerate using gperf 2.7.1 (19981006 egcs).\n\nFrom-SVN: r22889", "tree": {"sha": "3b706e16c05ff744f4c6f7b047db25a7904ce18e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b706e16c05ff744f4c6f7b047db25a7904ce18e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db127392bc1a1179de8c9dc34e5fbf4b945dc989", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db127392bc1a1179de8c9dc34e5fbf4b945dc989", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db127392bc1a1179de8c9dc34e5fbf4b945dc989", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db127392bc1a1179de8c9dc34e5fbf4b945dc989/comments", "author": null, "committer": null, "parents": [{"sha": "9e46e5e8628e3c6d2818b1811f050229e2016e45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e46e5e8628e3c6d2818b1811f050229e2016e45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e46e5e8628e3c6d2818b1811f050229e2016e45"}], "stats": {"total": 293, "additions": 156, "deletions": 137}, "files": [{"sha": "674da88166f0ef8efedb59a3dae7da65242272cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db127392bc1a1179de8c9dc34e5fbf4b945dc989/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db127392bc1a1179de8c9dc34e5fbf4b945dc989/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db127392bc1a1179de8c9dc34e5fbf4b945dc989", "patch": "@@ -1,3 +1,9 @@\n+Wed Oct  7 12:55:26 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Makefile.in (c-gperf.h): Add -L KR-C -F ', 0, 0' flags to gperf.\n+\t(c-parse.gperf): Update comments describing invocation flags.\n+\t(c-gperf.h): Regenerate using gperf 2.7.1 (19981006 egcs).\n+\n 1998-10-07  Manfred Hollstein  <manfred@s-direktnet.de>\n \n \t* reload1.c (reload): Call free before clobbering the memory"}, {"sha": "9f24109d1df517a07d152eb42a8c25544e36613b", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db127392bc1a1179de8c9dc34e5fbf4b945dc989/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db127392bc1a1179de8c9dc34e5fbf4b945dc989/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=db127392bc1a1179de8c9dc34e5fbf4b945dc989", "patch": "@@ -1265,8 +1265,8 @@ $(srcdir)/c-parse.y: c-parse.in\n \t$(srcdir)/move-if-change tmp-c-parse.y $(srcdir)/c-parse.y\n \n $(srcdir)/c-gperf.h: c-parse.gperf\n-\tgperf -p -j1 -i 1 -g -o -t -G -N is_reserved_word -k1,3,$$ \\\n-\t   $(srcdir)/c-parse.gperf >tmp-gperf.h\n+\tgperf -L KR-C -F ', 0, 0' -p -j1 -i 1 -g -o -t -G -N is_reserved_word \\\n+\t   -k1,3,$$ $(srcdir)/c-parse.gperf >tmp-gperf.h\n \t $(srcdir)/move-if-change tmp-gperf.h $(srcdir)/c-gperf.h\n \n c-decl.o : c-decl.c $(CONFIG_H) system.h $(TREE_H) c-tree.h c-lex.h flags.h \\"}, {"sha": "2932feb6cc812800a256b6bd6cc8875b35370507", "filename": "gcc/c-gperf.h", "status": "modified", "additions": 147, "deletions": 134, "changes": 281, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db127392bc1a1179de8c9dc34e5fbf4b945dc989/gcc%2Fc-gperf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db127392bc1a1179de8c9dc34e5fbf4b945dc989/gcc%2Fc-gperf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-gperf.h?ref=db127392bc1a1179de8c9dc34e5fbf4b945dc989", "patch": "@@ -1,6 +1,6 @@\n-/* C code produced by gperf version 2.5 (GNU C++ version) */\n-/* Command-line: gperf -p -j1 -i 1 -g -o -t -G -N is_reserved_word -k1,3,$ /puke/law/tmp/merge/egcs/gcc/c-parse.gperf  */\n-/* Command-line: gperf -p -j1 -i 1 -g -o -t -N is_reserved_word -k1,3,$ c-parse.gperf  */ \n+/* KR-C code produced by gperf version 2.7.1 (19981006 egcs) */\n+/* Command-line: gperf -L KR-C -F , 0, 0 -p -j1 -i 1 -g -o -t -G -N is_reserved_word -k1,3,$ ./c-parse.gperf  */\n+/* Command-line: gperf -L KR-C -F ', 0, 0' -p -j1 -i 1 -g -o -t -N is_reserved_word -k1,3,$ c-parse.gperf  */ \n struct resword { char *name; short token; enum rid rid; };\n \n #define TOTAL_KEYWORDS 79\n@@ -11,159 +11,172 @@ struct resword { char *name; short token; enum rid rid; };\n /* maximum key range = 135, duplicates = 0 */\n \n #ifdef __GNUC__\n-inline\n+__inline\n #endif\n static unsigned int\n hash (str, len)\n      register char *str;\n-     register int unsigned len;\n+     register unsigned int len;\n {\n   static unsigned char asso_values[] =\n     {\n-     145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n-     145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n-     145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n-     145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n-     145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n-     145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n-     145, 145, 145, 145,  25, 145, 145, 145, 145, 145,\n-     145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n-     145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n-     145, 145, 145, 145, 145,   1, 145,  46,   8,  15,\n-      61,   6,  36,  48,   3,   5, 145,  18,  63,  25,\n-      29,  76,   1, 145,  13,   2,   1,  51,  37,   9,\n-       9,   1,   3, 145, 145, 145, 145, 145,\n+      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n+      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n+      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n+      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n+      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n+      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n+      145, 145, 145, 145,  25, 145, 145, 145, 145, 145,\n+      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n+      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n+      145, 145, 145, 145, 145,   1, 145,  46,   8,  15,\n+       61,   6,  36,  48,   3,   5, 145,  18,  63,  25,\n+       29,  76,   1, 145,  13,   2,   1,  51,  37,   9,\n+        9,   1,   3, 145, 145, 145, 145, 145, 145, 145,\n+      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n+      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n+      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n+      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n+      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n+      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n+      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n+      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n+      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n+      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n+      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n+      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n+      145, 145, 145, 145, 145, 145\n     };\n   register int hval = len;\n \n   switch (hval)\n     {\n       default:\n       case 3:\n-        hval += asso_values[str[2]];\n+        hval += asso_values[(unsigned char)str[2]];\n       case 2:\n       case 1:\n-        hval += asso_values[str[0]];\n+        hval += asso_values[(unsigned char)str[0]];\n         break;\n     }\n-  return hval + asso_values[str[len - 1]];\n+  return hval + asso_values[(unsigned char)str[len - 1]];\n }\n \n static struct resword wordlist[] =\n-{\n-      {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n-      {\"\",}, \n-      {\"int\",  TYPESPEC, RID_INT},\n-      {\"\",}, {\"\",}, \n-      {\"__typeof__\",  TYPEOF, NORID},\n-      {\"__signed__\",  TYPESPEC, RID_SIGNED},\n-      {\"__imag__\",  IMAGPART, NORID},\n-      {\"switch\",  SWITCH, NORID},\n-      {\"__inline__\",  SCSPEC, RID_INLINE},\n-      {\"else\",  ELSE, NORID},\n-      {\"__iterator__\",  SCSPEC, RID_ITERATOR},\n-      {\"__inline\",  SCSPEC, RID_INLINE},\n-      {\"__extension__\",  EXTENSION, NORID},\n-      {\"struct\",  STRUCT, NORID},\n-      {\"__real__\",  REALPART, NORID},\n-      {\"__const\",  TYPE_QUAL, RID_CONST},\n-      {\"while\",  WHILE, NORID},\n-      {\"__const__\",  TYPE_QUAL, RID_CONST},\n-      {\"case\",  CASE, NORID},\n-      {\"__complex__\",  TYPESPEC, RID_COMPLEX},\n-      {\"__iterator\",  SCSPEC, RID_ITERATOR},\n-      {\"bycopy\",  TYPE_QUAL, RID_BYCOPY},\n-      {\"\",}, {\"\",}, {\"\",}, \n-      {\"__complex\",  TYPESPEC, RID_COMPLEX},\n-      {\"\",}, \n-      {\"in\",  TYPE_QUAL, RID_IN},\n-      {\"break\",  BREAK, NORID},\n-      {\"@defs\",  DEFS, NORID},\n-      {\"\",}, {\"\",}, {\"\",}, \n-      {\"extern\",  SCSPEC, RID_EXTERN},\n-      {\"if\",  IF, NORID},\n-      {\"typeof\",  TYPEOF, NORID},\n-      {\"typedef\",  SCSPEC, RID_TYPEDEF},\n-      {\"__typeof\",  TYPEOF, NORID},\n-      {\"sizeof\",  SIZEOF, NORID},\n-      {\"\",}, \n-      {\"return\",  RETURN, NORID},\n-      {\"const\",  TYPE_QUAL, RID_CONST},\n-      {\"__volatile__\",  TYPE_QUAL, RID_VOLATILE},\n-      {\"@private\",  PRIVATE, NORID},\n-      {\"@selector\",  SELECTOR, NORID},\n-      {\"__volatile\",  TYPE_QUAL, RID_VOLATILE},\n-      {\"__asm__\",  ASM_KEYWORD, NORID},\n-      {\"\",}, {\"\",}, \n-      {\"continue\",  CONTINUE, NORID},\n-      {\"__alignof__\",  ALIGNOF, NORID},\n-      {\"__imag\",  IMAGPART, NORID},\n-      {\"__attribute__\",  ATTRIBUTE, NORID},\n-      {\"\",}, {\"\",}, \n-      {\"__attribute\",  ATTRIBUTE, NORID},\n-      {\"for\",  FOR, NORID},\n-      {\"\",}, \n-      {\"@encode\",  ENCODE, NORID},\n-      {\"id\",  OBJECTNAME, RID_ID},\n-      {\"static\",  SCSPEC, RID_STATIC},\n-      {\"@interface\",  INTERFACE, NORID},\n-      {\"\",}, \n-      {\"__signed\",  TYPESPEC, RID_SIGNED},\n-      {\"\",}, \n-      {\"__label__\",  LABEL, NORID},\n-      {\"\",}, {\"\",}, \n-      {\"__asm\",  ASM_KEYWORD, NORID},\n-      {\"char\",  TYPESPEC, RID_CHAR},\n-      {\"\",}, \n-      {\"inline\",  SCSPEC, RID_INLINE},\n-      {\"out\",  TYPE_QUAL, RID_OUT},\n-      {\"register\",  SCSPEC, RID_REGISTER},\n-      {\"__real\",  REALPART, NORID},\n-      {\"short\",  TYPESPEC, RID_SHORT},\n-      {\"\",}, \n-      {\"enum\",  ENUM, NORID},\n-      {\"inout\",  TYPE_QUAL, RID_INOUT},\n-      {\"\",}, \n-      {\"oneway\",  TYPE_QUAL, RID_ONEWAY},\n-      {\"union\",  UNION, NORID},\n-      {\"\",}, \n-      {\"__alignof\",  ALIGNOF, NORID},\n-      {\"\",}, \n-      {\"@implementation\",  IMPLEMENTATION, NORID},\n-      {\"\",}, \n-      {\"@class\",  CLASS, NORID},\n-      {\"\",}, \n-      {\"@public\",  PUBLIC, NORID},\n-      {\"asm\",  ASM_KEYWORD, NORID},\n-      {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n-      {\"default\",  DEFAULT, NORID},\n-      {\"\",}, \n-      {\"void\",  TYPESPEC, RID_VOID},\n-      {\"\",}, \n-      {\"@protected\",  PROTECTED, NORID},\n-      {\"@protocol\",  PROTOCOL, NORID},\n-      {\"\",}, {\"\",}, {\"\",}, \n-      {\"volatile\",  TYPE_QUAL, RID_VOLATILE},\n-      {\"\",}, {\"\",}, \n-      {\"signed\",  TYPESPEC, RID_SIGNED},\n-      {\"float\",  TYPESPEC, RID_FLOAT},\n-      {\"@end\",  END, NORID},\n-      {\"\",}, {\"\",}, \n-      {\"unsigned\",  TYPESPEC, RID_UNSIGNED},\n-      {\"@compatibility_alias\",  ALIAS, NORID},\n-      {\"double\",  TYPESPEC, RID_DOUBLE},\n-      {\"\",}, {\"\",}, \n-      {\"auto\",  SCSPEC, RID_AUTO},\n-      {\"\",}, \n-      {\"goto\",  GOTO, NORID},\n-      {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n-      {\"do\",  DO, NORID},\n-      {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n-      {\"long\",  TYPESPEC, RID_LONG},\n-};\n+  {\n+    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"\", 0, 0},\n+    {\"int\", TYPESPEC, RID_INT},\n+    {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"__typeof__\", TYPEOF, NORID},\n+    {\"__signed__\", TYPESPEC, RID_SIGNED},\n+    {\"__imag__\", IMAGPART, NORID},\n+    {\"switch\", SWITCH, NORID},\n+    {\"__inline__\", SCSPEC, RID_INLINE},\n+    {\"else\", ELSE, NORID},\n+    {\"__iterator__\", SCSPEC, RID_ITERATOR},\n+    {\"__inline\", SCSPEC, RID_INLINE},\n+    {\"__extension__\", EXTENSION, NORID},\n+    {\"struct\", STRUCT, NORID},\n+    {\"__real__\", REALPART, NORID},\n+    {\"__const\", TYPE_QUAL, RID_CONST},\n+    {\"while\", WHILE, NORID},\n+    {\"__const__\", TYPE_QUAL, RID_CONST},\n+    {\"case\", CASE, NORID},\n+    {\"__complex__\", TYPESPEC, RID_COMPLEX},\n+    {\"__iterator\", SCSPEC, RID_ITERATOR},\n+    {\"bycopy\", TYPE_QUAL, RID_BYCOPY},\n+    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"__complex\", TYPESPEC, RID_COMPLEX},\n+    {\"\", 0, 0},\n+    {\"in\", TYPE_QUAL, RID_IN},\n+    {\"break\", BREAK, NORID},\n+    {\"@defs\", DEFS, NORID},\n+    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"extern\", SCSPEC, RID_EXTERN},\n+    {\"if\", IF, NORID},\n+    {\"typeof\", TYPEOF, NORID},\n+    {\"typedef\", SCSPEC, RID_TYPEDEF},\n+    {\"__typeof\", TYPEOF, NORID},\n+    {\"sizeof\", SIZEOF, NORID},\n+    {\"\", 0, 0},\n+    {\"return\", RETURN, NORID},\n+    {\"const\", TYPE_QUAL, RID_CONST},\n+    {\"__volatile__\", TYPE_QUAL, RID_VOLATILE},\n+    {\"@private\", PRIVATE, NORID},\n+    {\"@selector\", SELECTOR, NORID},\n+    {\"__volatile\", TYPE_QUAL, RID_VOLATILE},\n+    {\"__asm__\", ASM_KEYWORD, NORID},\n+    {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"continue\", CONTINUE, NORID},\n+    {\"__alignof__\", ALIGNOF, NORID},\n+    {\"__imag\", IMAGPART, NORID},\n+    {\"__attribute__\", ATTRIBUTE, NORID},\n+    {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"__attribute\", ATTRIBUTE, NORID},\n+    {\"for\", FOR, NORID},\n+    {\"\", 0, 0},\n+    {\"@encode\", ENCODE, NORID},\n+    {\"id\", OBJECTNAME, RID_ID},\n+    {\"static\", SCSPEC, RID_STATIC},\n+    {\"@interface\", INTERFACE, NORID},\n+    {\"\", 0, 0},\n+    {\"__signed\", TYPESPEC, RID_SIGNED},\n+    {\"\", 0, 0},\n+    {\"__label__\", LABEL, NORID},\n+    {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"__asm\", ASM_KEYWORD, NORID},\n+    {\"char\", TYPESPEC, RID_CHAR},\n+    {\"\", 0, 0},\n+    {\"inline\", SCSPEC, RID_INLINE},\n+    {\"out\", TYPE_QUAL, RID_OUT},\n+    {\"register\", SCSPEC, RID_REGISTER},\n+    {\"__real\", REALPART, NORID},\n+    {\"short\", TYPESPEC, RID_SHORT},\n+    {\"\", 0, 0},\n+    {\"enum\", ENUM, NORID},\n+    {\"inout\", TYPE_QUAL, RID_INOUT},\n+    {\"\", 0, 0},\n+    {\"oneway\", TYPE_QUAL, RID_ONEWAY},\n+    {\"union\", UNION, NORID},\n+    {\"\", 0, 0},\n+    {\"__alignof\", ALIGNOF, NORID},\n+    {\"\", 0, 0},\n+    {\"@implementation\", IMPLEMENTATION, NORID},\n+    {\"\", 0, 0},\n+    {\"@class\", CLASS, NORID},\n+    {\"\", 0, 0},\n+    {\"@public\", PUBLIC, NORID},\n+    {\"asm\", ASM_KEYWORD, NORID},\n+    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"default\", DEFAULT, NORID},\n+    {\"\", 0, 0},\n+    {\"void\", TYPESPEC, RID_VOID},\n+    {\"\", 0, 0},\n+    {\"@protected\", PROTECTED, NORID},\n+    {\"@protocol\", PROTOCOL, NORID},\n+    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"volatile\", TYPE_QUAL, RID_VOLATILE},\n+    {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"signed\", TYPESPEC, RID_SIGNED},\n+    {\"float\", TYPESPEC, RID_FLOAT},\n+    {\"@end\", END, NORID},\n+    {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"unsigned\", TYPESPEC, RID_UNSIGNED},\n+    {\"@compatibility_alias\", ALIAS, NORID},\n+    {\"double\", TYPESPEC, RID_DOUBLE},\n+    {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"auto\", SCSPEC, RID_AUTO},\n+    {\"\", 0, 0},\n+    {\"goto\", GOTO, NORID},\n+    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"do\", DO, NORID},\n+    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"long\", TYPESPEC, RID_LONG}\n+  };\n \n #ifdef __GNUC__\n-inline\n+__inline\n #endif\n struct resword *\n is_reserved_word (str, len)\n@@ -178,7 +191,7 @@ is_reserved_word (str, len)\n         {\n           register char *s = wordlist[key].name;\n \n-          if (*s == *str && !strcmp (str + 1, s + 1))\n+          if (*str == *s && !strcmp (str + 1, s + 1))\n             return &wordlist[key];\n         }\n     }"}, {"sha": "017dcb5497e5fc02fc638f3de27ba8e07fba1294", "filename": "gcc/c-parse.gperf", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db127392bc1a1179de8c9dc34e5fbf4b945dc989/gcc%2Fc-parse.gperf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db127392bc1a1179de8c9dc34e5fbf4b945dc989/gcc%2Fc-parse.gperf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.gperf?ref=db127392bc1a1179de8c9dc34e5fbf4b945dc989", "patch": "@@ -1,5 +1,5 @@\n %{\n-/* Command-line: gperf -p -j1 -i 1 -g -o -t -N is_reserved_word -k1,3,$ c-parse.gperf  */ \n+/* Command-line: gperf -L KR-C -F ', 0, 0' -p -j1 -i 1 -g -o -t -N is_reserved_word -k1,3,$ c-parse.gperf  */ \n %}\n struct resword { char *name; short token; enum rid rid; };\n %%"}]}