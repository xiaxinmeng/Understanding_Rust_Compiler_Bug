{"sha": "846522cbe7c4793e63082c2070055f7d10cfe1ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ2NTIyY2JlN2M0NzkzZTYzMDgyYzIwNzAwNTVmN2QxMGNmZTFlYQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-05-09T22:50:47Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-05-09T22:50:47Z"}, "message": "Point folks to wwwdocs since those are the official versions.\n\nFrom-SVN: r19651", "tree": {"sha": "7a0d4b6fdac77fb650149418ab99c3c1857287bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a0d4b6fdac77fb650149418ab99c3c1857287bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/846522cbe7c4793e63082c2070055f7d10cfe1ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/846522cbe7c4793e63082c2070055f7d10cfe1ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/846522cbe7c4793e63082c2070055f7d10cfe1ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/846522cbe7c4793e63082c2070055f7d10cfe1ea/comments", "author": null, "committer": null, "parents": [{"sha": "b9082e8adb8a8e2c6501350ae1c7a5e189a9995c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c"}], "stats": {"total": 1476, "additions": 6, "deletions": 1470}, "files": [{"sha": "03779e8083024e759a7e5c02a60d25131cc8494c", "filename": "INSTALL/BUILD", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c/INSTALL%2FBUILD", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c/INSTALL%2FBUILD", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/INSTALL%2FBUILD?ref=b9082e8adb8a8e2c6501350ae1c7a5e189a9995c", "patch": "@@ -1,54 +0,0 @@\n-Building egcs-1.0 \n-\n-Now that egcs is configured, you are ready to build the compiler and\n-runtime libraries.\n-\n-We highly recommend that egcs be built using gnu-make; other\n-versions make work, then again they might not.  To be safe build with gnu-make.\n-\n-Building a native compiler\n-For a native build issue the command \"make bootstrap\".  This will build\n-the entire egcs compiler system, which includes the following steps:\n-\n-\n-  Build host tools necessary to build the compiler such as texinfo, bison,\n-  gperf.\n-\n-  Build target tools for use by the compiler such as gas, gld, and binutils.\n-\n-  Perform a 3-stage bootstrap of the compiler.\n-\n-  Perform a comparison test of the stage2 and stage3 compilers.\n-\n-  Build runtime libraries using the stage3 compiler from the previous step.\n-\n-\n-If you are short on disk space you might consider \"make bootstrap-lean\"\n-instead.  This is identical to \"make bootstrap\" except that object files\n-from the stage1 and stage2 of the 3-stage bootstrap of the compiler are\n-deleted as soon as they are no longer needed.\n-\n-Building a cross compiler\n-\n-We recommend reading the crossgcc FAQ for information about building\n-cross compilers.\n-\"ftp://ftp.cygnus.com/pub/embedded/crossgcc/FAQ-0.8.1\"\n-\n-For a cross build, issue the command \"make cross\", which performs the\n-following steps:\n-\n-  Build host tools necessary to build the compiler such as texinfo, bison,\n-  gperf.\n-\n-  Build target tools for use by the compiler such as gas, gld, and binutils.\n-\n-  Build the compiler (single stage only).\n-\n-  Build runtime libraries using the compiler from the previous step.\n-\n-\n-Note that if an error occurs in any step the make process will exit.\n-\n-\n-Last modified on December 2, 1997.\n-"}, {"sha": "403657fab0ca14f964468cd3ef382c568f4d701b", "filename": "INSTALL/CONFIGURE", "status": "removed", "additions": 0, "deletions": 108, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c/INSTALL%2FCONFIGURE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c/INSTALL%2FCONFIGURE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/INSTALL%2FCONFIGURE?ref=b9082e8adb8a8e2c6501350ae1c7a5e189a9995c", "patch": "@@ -1,108 +0,0 @@\n-Configuring egcs-1.0\n-\n-Like most GNU software, egcs must be configured before it can be built.\n-This document attempts to describe the recommended configuration procedure\n-for both native and cross targets.\n-\n-We use srcdir to refer to the toplevel source directory for\n-egcs; we use objdir to refer to the toplevel build/object\n-directory for egcs.\n-\n-First, we highly recommend that egcs be built into a separate\n-directory than the sources.  This is how we generally build egcs; building\n-where srcdir == objdir should still work, but doesn't get\n-extensive testing.\n-\n-Second, when configuring a native system, either \"cc\" must be in your\n-path or you must set CC in your environment before running configure.\n-Otherwise the configuration scripts may fail.\n-\n-To configure egcs:\n-\n-  % mkdir objdir\n-  % cd objdir\n-  % srcdir/configure [target] [options]\n-\n-\n-target specification\n-\n-  egcs has code to correctly determine the correct value for\n-  target for nearly all native systems.  Therefore, we highly\n-  recommend you not provide a configure target when configuring a\n-  native compiler.\n-\n-  target must be specified when configuring a cross compiler;\n-  examples of valid targets would be i960-rtems, m68k-coff, sh-elf, etc.\n-\n-\n-options specification\n-\n-Use options to override several configure time options for\n-egcs.  A partial list of supported options:\n-\n-\n-  --prefix=dirname -- Specify the toplevel installation\n-  directory.  This is the recommended way to install the tools into a directory\n-  other than the default.  The toplevel installation directory defaults to\n-  /usr/local.\n-\n-  These additional options control where certain parts of the distribution\n-  are installed.  Normally you should not need to use these options.\n-  \n-     --with-local-prefix=dirname -- Specify the installation\n-     directory for local include files.  The default is /usr/local.\n-\n-     --with-gxx-include-dir=dirname -- Specify the installation\n-     directory for g++ header files.  The default is /usr/local/include/g++.\n-  \n-\n-  --enable-shared -- Build shared versions of the C++ runtime\n-  libraries if supported --disable-shared is the default.\n-\n-  --enable-haifa -- Enable the new Haifa instruction scheduler in the\n-  compiler; the new scheduler can significantly improve code on some targets.\n-  --disable-haifa is currently the default on all platforms except the HPPA.\n-\n-  --with-gnu-as -- Specify that the compiler should assume the GNU\n-  assembler (aka gas) is available. \n-\n-  --with-gnu-ld -- Specify that the compiler should assume the GNU\n-  linker (aka gld) is available. \n-\n-  --with-stabs -- Specify that stabs debugging information should be used\n-  instead of whatever format the host normally uses.  Normally GCC uses the\n-  same debug format as the host system. \n-\n-  --enable-multilib -- Specify that multiple target libraries\n-  should be built to support different target variants, calling conventions,\n-  etc.  This is the default. \n-\n-  --enable-threads -- Specify that the target supports threads.\n-  This only effects the Objective-C compiler and runtime library.\n-\n-  --enable-threads=lib -- Specify that lib is the\n-  thread support library.  This only effects the Objective-C compiler  and\n-  runtime library.\n-\n-  --with-cpu=cpu -- Specify which cpu variant the compiler should\n-  generate code for by default.  This is currently only supported on the\n-  RS6000/PowerPC ports.\n-\n-\n-Some options which only apply to building cross compilers:\n-\n-  --with-headers=dir -- Specifies a directory which has target\n-  include files.\n-  --with-libs=dirs -- Specifies a list of directories which contain\n-  the target runtime libraries.\n-  --with-newlib -- Specifies that \"newlib\" is being used as the target\n-  C library.   This causes __eprintf to be omitted from libgcc.a on the\n-  assumption that it will be provided by newlib.\n-\n- \n-Note that each --enable option has a corresponding --disable option and\n-that each --with option has a corresponding --without option.\n-\n-\n-\n-Last modified on December 2, 1997."}, {"sha": "343243ddb1799f04b8ca984969a75bc796a26462", "filename": "INSTALL/FAQ", "status": "removed", "additions": 0, "deletions": 322, "changes": 322, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c/INSTALL%2FFAQ", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c/INSTALL%2FFAQ", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/INSTALL%2FFAQ?ref=b9082e8adb8a8e2c6501350ae1c7a5e189a9995c", "patch": "@@ -1,322 +0,0 @@\n-egcs Frequently Asked Questions\n-\n-\n-How is egcs be different from gcc2?\n-\n-Six years ago, gcc version 1 had reached a point of stability.  For the\n-targets it could support, it worked well.  It had limitations inherent in\n-its design that would be difficult to resolve, so a major effort was made\n-and gcc version 2 was the result.  When we had gcc2 in a useful state,\n-development efforts on gcc1 stopped and we all concentrated on making\n-gcc2 better than gcc1 could ever be.  This is the kind of step forward\n-we want to make with egcs.\n-\n-In brief, the three biggest differences between egcs and gcc2 are\n-these:  \n-\n-\n-  More rexamination of basic architectual decisions of\n-    gcc and an interest in adding new optimizations;\n-\n-  working with the groups who have fractured out from gcc2 (like\n-   the Linux folks, the Intel optimizations folks, Fortran folks)\n-   including more front-ends; and finally\n-\n-  An open development model (see below) for the development process.\n-\n-\n-These three differences will work together to result in a more\n-useful compiler, a more stable compiler, a central compiler that works\n-for more people, a compiler that generates better code.  \n-\n-\n-There are a lot of exciting compiler optimizations that have come\n-out.  We want them in gcc.  There are a lot of front ends out there for\n-gcc for languages like Fortran or Pascal.  We want them easily\n-installable by users.  After six years of working on gcc2, we've come\n-to see problems and limitations in the way gcc is architected; it is\n-time to address these again.\n-\n-\n-What is an open development model?\n-\n-With egcs, we are going to try a bazaar style[1] approach to its\n-development:  We're going to be making snapshots publically available\n-to anyone who wants to try them; we're going to welcome anyone to join\n-the development mailing list.  All of the discussions on the\n-development mailing list are available via the web.  We're going to be\n-making releases with a much higher frequency than they have been made\n-in the past:  We're shooting for three by the end of 1997.\n-\n-In addition to weekly snapshots of the egcs development sources, we\n-are going to look at making the sources readable from a CVS server by\n-anyone.  We want to make it so external maintainers of parts of egcs\n-are able to commit changes to their part of egcs directly into the\n-sources without going through an intermediary.\n-\n-There have been many potential gcc developers who were not able to\n-participate in gcc development in the past.  We these people to help in\n-any way they can; we ultimately want gcc to be the best compiler in the\n-world.\n-\n-A compiler is a complicated piece of software, there will still be\n-strong central maintainers who will reject patches, who will demand\n-documentation of implementations, and who will keep the level of\n-quality as high as it is today.  Code that could use wider testing may\n-be intergrated--code that is simply ill-conceived won't be.\n-\n-egcs is not the first piece of software to use this open development\n-process; FreeBSD, the Emacs lisp repository, and Linux are a few\n-examples of the bazaar style of development.\n-\n-With egcs, we will be adding new features and optimizations at a\n-rate that has not been done since the creation of gcc2; these additions\n-will inevitably have a temporarily destabilizing effect.  With the help\n-of developers working together with this bazaar style development, the\n-resulting stability and quality levels will be better than we've had\n-before.\n-\n-cathedral-vs-bazaar[1]\n-  We've been discussing different development models a lot over the\n-  past few months.  The paper which started all of this introduced two\n-  terms:  A cathedral development model versus a bazaar\n-  development model.  The paper is written by Eric S. Raymond, it is\n-  called `` http://locke.ccil.org/~esr/writings/cathedral.html\"  The\n-  Cathedral and the Bazaar''.  The paper is a useful starting point\n-  for discussions.\n-\n-\n-\n-bits/libc-lock.h: No such file or directory\n-egcs includes a tightly integrated libio and libstdc++ implementation which\n-can cause problems on hosts which have libio integrated into their C library\n-(most notably Linux).\n-\n-We believe that we've solved the major technical problems for the most\n-common versions of libc found on Linux systems.  However, some versions\n-of Linux use pre-release versions of glibc2, which egcs has trouble detecting\n-and correctly handling.\n-\n-If you're using one of these pre-release versions of glibc2, you may get\n-a message \"bits/libc-lock.h: No such file or directory\" when building egcs.\n-Unfortunately, to fix this problem you will need to update your C library to\n-glibc2.0.5c.\n-\n-Late breaking news: we may have at least a partial solution for these\n-problems.  So this FAQ entry may no longer be needed.\n-\n-\n-`_IO_stdfile_0_lock' was not declared in this scope\n-If you get this error, it means either egcs incorrectly guessed what version\n-of libc is installed on your linux system, or you incorrectly specified a\n-version of glibc when configuring egcs.\n-\n-If you did not provide a target name when configuring egcs, then you've\n-found a bug which needs to be reported.  If you did provide a target name at\n-configure time, then you should reconfigure without specifying a target name.\n-\n-\n-Problems building the Fortran compiler\n-The Fortran front end can not be built with most vendor compilers; it must\n-be built with gcc.  As a result, you may get an error if you do not follow\n-the install instructions carefully.\n-\n-In particular, instead of using \"make\" to build egcs, you should use\n-\"make bootstrap\" if you are building a native compiler or \"make cross\"\n-if you are building a cross compiler.\n-\n-It has also been reported that the Fortran compiler can not be built     \n-on Red Hat 4.X linux for the Alpha.  Fixing this may require upgrading\n-binutils or to Red Hat 5.0; we'll provide more information as it becomes  \n-available.                                                               \n-\n-\n-Problems building on MIPS platforms\n-egcs requires the use of GAS on all versions of Irix, except Irix 6 due\n-to limitations in older Irix assemblers.\n-\n- Either of these messages indicates that you are using the MIPS assembler\n-when instead you should be using GAS.\n-\n-    as0: Error: ./libgcc2.c, line 1:Badly delimited numeric literal\n-          .4byte $LECIE1-$LSCIE1\n-    as0: Error: ./libgcc2.c, line 1:malformed statement\n-\n-\n-\n-    as0: Error: /home/law/egcs_release/gcc/libgcc2.c, line 1:undefined symbol in expression\n-    .word $LECIE1-$LSCIE1\n-\n-\n- For Irix 6, you should use the native assembler as GAS is not supported\n-on Irix 6.\n-\n-\n-Problems with exception handling on x86 platforms\n-If you are using the GNU assembler (aka gas) on an x86 platform and\n-exception handling is not working correctly, then odds are you're using a\n-buggy assembler.\n-\n-We recommend binutils-2.8.0.1.15 or newer.\n-\"ftp://tsx-11.mit.edu/pub/linux/packages/GCC/binutils-2.8.1.0.15.tar.gz binutils-2.8.0.1.15 source\n-ftp://tsx-11.mit.edu/pub/linux/packages/GCC/binutils-2.8.1.0.15.bin.tar.gz binutils-2.8.0.1.15 x86 binary for libc5\n-ftp://tsx-11.mit.edu/pub/linux/packages/GCC/binutils-2.8.1.0.15.glibc.bin.tar.gz binutils-2.8.0.1.15 x86 binary for glibc2\n-Or, you can try a\n-ftp://ftp.cygnus.com/pub/egcs/infrastructure/gas-970915.tar.gz binutils snapshot; however, be aware that the binutils snapshot is untested\n-and may not work (or even build).  Use it at your own risk.\n-\n-\n-Bootstrap comparison failures on HPs\n-If you bootstrap the compiler on hpux10 using the HP assembler instead of\n-gas, every file will fail the comparison test.\n-\n-The HP asembler inserts timestamps into object files it creates, causing\n-every file to be different.  The location of the timestamp varies for each\n-object file, so there's no real way to work around this mis-feature.\n-\n-Odds are your compiler is fine, but there's no way to be certain.\n-\n-If you use GAS on HPs, then you will not run into this problem because\n-GAS never inserts timestamps into object files.  For this and various other\n-reasons we highly recommend using GAS on HPs.\n-\n-\n-Bootstrap loops rebuilding cc1 over and over\n-When building egcs, the build process loops rebuilding cc1 over and\n-over again.  This happens on mips-sgi-irix5.2, and possibly other platforms.\n-\n-This is probably a bug somewhere in the egcs Makefile.  Until we find and\n-fix this bug we recommend you use GNU make instead of vendor supplied make\n-programs.\n-\n-\n-Dynamic linker is unable to find GCC libraries\n-This problem manifests itself by programs not finding shared libraries\n-they depend on when the programs are started.  Note this problem often manifests\n-itself with failures in the libio/libstdc++ tests after configuring with\n---enable-shared and building egcs.\n-\n-GCC does not specify a runpath so that the dynamic linker can find dynamic\n-libraries at runtime.\n-\n-The short explaination is that if you always pass a -R option to the\n-linker, then your programs become dependent on directories which\n-may be NFS mounted, and programs may hang unnecessarily when an\n-NFS server goes down.\n-\n-The problem is not programs that do require the directories; those\n-programs are going to hang no matter what you do.  The problem is\n-programs that do not require the directories.\n-\n-SunOS effectively always passed a -R option for every -L option;\n-this was a bad idea, and so it was removed for Solaris.  We should\n-not recreate it.\n-\n-\n-Unable to run the testsuite\n-If you get a message about unable to find \"standard.exp\" when trying to\n-run the egcs testsuites, then your dejagnu is too old to run the egcs tests.\n-You will need to get a newer version of dejagnu; we've made a\n-<a href=\"ftp://ftp.cygnus.com/pub/egcs/infrastructure/dejagnu-971028.tar.gz\">\n-dejagnu snapshot available until a new version of dejagnu can be released.\n-\n-\n-How to build a cross compiler\n- Building cross compilers is a rather complex undertaking because they\n-usually need additional software (cross assembler, cross linker, target\n-libraries, target include files, etc).\n-\n- We recommend reading the <a href=\"ftp://ftp.cygnus.com/pub/embedded/crossgcc/FAQ-0.8.1\">\n-crossgcc FAQ for information about building cross compilers.\n-\n- If you have all the pieces available, then `make cross' should build a\n-cross compiler.  `make LANGUAGES=\"c c++\" install'will install the cross\n-compiler.\n-\n- Note that if you're trying to build a cross compiler in a tree which\n-includes binutils-2.8 in addition to egcs, then you're going to need to\n-make a couple minor tweaks so that the cross assembler, linker and\n-nm utilities will be found.\n-\n-binutils-2.8 builds those files as gas.new, ld.new and nm.new; egcs gcc\n-looks for them using gas-new, ld-new and nm-new, so you may have to arrange\n-for any symlinks which point to &ltfile&gt.new to be changed to &ltfile&gt-new.\n-\n-\n-Snapshots, how, when, why\n- We make snapshots of the egcs sources about once a week; there is no\n-predetermined schedule.  These snapshots are intended to give everyone\n-access to work in progress.  Any given snapshot may generate incorrect code\n-or even fail to build.\n-\n-If you plan on downloading and using snapshots, we highly recommend you\n-subscribe to the egcs mailing lists.  See <a href=\"index.html#mailinglists\">\n-mailing lists on the main egcs page for instructions on how to subscribe.\n-\n-When using the diff files to update from older snapshots to newer snapshots,\n-make sure to use \"-E\" and \"-p\" arguments to patch so that empty files are\n-deleted and full pathnames are provided to patch.  If your version of\n-patch does not support \"-E\", you'll need to get a newer version.  Also note\n-that you may need autoconf, autoheader and various other programs if you use\n-diff files to update from one snapshot to the next.\n-\n-\n-How to install both egcs and gcc2\n-It may be desirable to install both egcs and gcc2 on the same system.  This\n-can be done by using different prefix paths at configure time and a few\n-symlinks.\n-\n-Basically, configure the two compilers with different --prefix options,\n-then build and install each compiler.  Assume you want \"gcc\" to be the egcs\n-compiler and available in /usr/local/bin; also assume that you want \"gcc2\"\n-to be the gcc2 compiler and also available in /usr/local/bin.\n-\n-The easiest way to do this is to configure egcs with --prefix=/usr/local/egcs\n-and gcc2 with --prefix=/usr/local/gcc2.  Build and install both compilers.\n-Then make a symlink from /usr/local/bin/gcc to /usr/local/egcs/bin/gcc and\n-from /usr/local/bin/gcc2 to /usr/local/gcc2/bin/gcc.  Create similar links\n-for the \"g++\", \"c++\" and \"g77\" compiler drivers.\n-\n-\n-Problems building Linux kernels\n-If you installed a recent binutils/gas snapshot on your Linux system,\n-you may not be able to build the kernel because objdump does not understand\n-the \"-k\" switch.  The solution for this problem is to remove /usr/bin/encaps.\n-\n-You may get an internal compiler error compiling process.c in newer\n-versions of the Linux kernel on x86 machines.  This is a bug in an asm\n-statement in process.c, not a bug in egcs.  XXX How to fix?!?\n-\n-You may get errors with the X driver of the form \n-_X11TransSocketUNIXConnect: Can't connect: errno = 111\n-\n-It's a kernel bug. The function sys_iopl in arch/i386/kernel/process.c\n-does an illegal hack which used to work but is now broken since GCC optimizes\n-more aggressively . The newer 2.1.x kernels already have a fix which should\n-also work in 2.0.32.\n-\n-\n-Virtual memory exhausted error\n- This error means your system ran out of memory; this can happen for large\n-files, particularly when optimizing.  If you're getting this error you should\n-consider trying to simplify your files or reducing the optimization level.\n-\n-Note that using -pedantic or -Wreturn-type can cause an explosion in the\n-amount of memory needed for template-heavy C++ code, such as code that uses\n-STL.  Also note that -Wall includes -Wreturn-type, so if you use -Wall you\n-will need to specify -Wno-return-type to turn it off.\n-\n-\n-GCC can not find GAS\n-Some configurations like irix4, irix5, hpux* require the use of the GNU\n-assembler intead of the system assembler.  To ensure that egcs finds the GNU\n-assembler, you should configure the GNU assembler with the same --prefix\n-option as you used for egcs.  Then build & install the GNU assembler.\n-\n-\n-egcs does not work on Red Hat 5.0\n- egcs does not currently work with Red Hat 5.0; we'll update this\n-entry with more information as it becomes available.\n-\n-\n-Last modified:  December 2, 1997"}, {"sha": "5d893c563e0d8bd089799ccb0a963ec2229a0663", "filename": "INSTALL/FINALINSTALL", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c/INSTALL%2FFINALINSTALL", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c/INSTALL%2FFINALINSTALL", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/INSTALL%2FFINALINSTALL?ref=b9082e8adb8a8e2c6501350ae1c7a5e189a9995c", "patch": "@@ -1,19 +0,0 @@\n-Final install egcs-1.0\n-\n-Now that egcs has been built and tested, you can install it with\n-`cd objdir; make install' for a native compiler or\n-`cd objdir; make install LANGUAGES=\"c c++\"' for a cross compiler\n-(note installing cross compilers will be easier in the next release!).\n-\n-\n-That step completes the installation of egcs; user level binaries can\n-be found in prefix/bin where prefix is the value you specified\n-with the --prefix to configure (or /usr/local by default).\n-\n-If you don't mind, please send egcs@cygnus.com a short mail message\n-indicating that you successfully built and installed egcs.  Include\n-the output from running srcdir/config.guess.\n-\n-If you find a bug in egcs, please report it to egcs-bugs@cygnus.com\n-\n-Last modified on December 2, 1997."}, {"sha": "c651389f3f152da3313578467fe149aee55fe55a", "filename": "INSTALL/INDEX", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c/INSTALL%2FINDEX", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c/INSTALL%2FINDEX", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/INSTALL%2FINDEX?ref=b9082e8adb8a8e2c6501350ae1c7a5e189a9995c", "patch": "@@ -1,34 +0,0 @@\n-Installing egcs-1.0\n-\n-This document describes the generic installation procedure for egcs as\n-well as detailing some target specific installation instructions for egcs.\n-\n-egcs includes several components that previously were separate distributions\n-with their own installation instructions.  This document supercedes all \n-package specific installation instructions.  We provide the component specific\n-installation information in the source distribution for historical reference\n-purposes only.\n-\n-We recommend you read the entire generic installation instructions as\n-well as any target specific installation instructions before you proceed\n-to configure, build, test and install egcs.\n-\n-If something goes wrong in the configure, build, test or install\n-procedures, first double check that you followed the generic and target\n-specific installation instructions carefully.  Then check the EGCS FAQ\n-(FAQ) to see if your problem is covered before you file a bug report.\n-\n-The installation procedure is broken into four steps.\n-\n-\n-  Configure\t\tsee CONFIGURE\n-  Build\t\t\tsee BUILD\n-  Test\t\t\tsee TEST\n-  Final Install\t\tsee FINALINSTALL\n-\n-\n-Before starting the build/install procedure please browse the \n-host/target specific installation notes (SPECIFIC).\n-\n-Last modified on December 2, 1997.\n-"}, {"sha": "67db7da23c4a5538eb452f3403ac83b5e9894f09", "filename": "INSTALL/README", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/846522cbe7c4793e63082c2070055f7d10cfe1ea/INSTALL%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/846522cbe7c4793e63082c2070055f7d10cfe1ea/INSTALL%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/INSTALL%2FREADME?ref=846522cbe7c4793e63082c2070055f7d10cfe1ea", "patch": "@@ -1,14 +1,9 @@\n-This directory contains installation instrutions for egcs-1.00.\n+This directory has been obsoleted for egcs snapshots and CVS access.\n \n-We're providing installation instructions in two forms, html and\n-plaintext.\n+Instead check out the toplevel \"wwwdocs\" as a sibling of your egcs\n+tree or read these files via the egcs web site\n+http://egcs.cygnus.com\n \n-index.html is the toplevel install file for html browsers.\n-\n-INDEX is the toplevel install file in plaintext form.\n-\n-The most recent HTML installation instructions for egcs can be obtained from\n-the egcs web site:\n-\n-http://www.cygnus.com/egcs/install\n \n+Copies of the relavent files will be copied into this directory for\n+releases."}, {"sha": "386836b83d9198e345900aa00226fefda763b9eb", "filename": "INSTALL/SPECIFIC", "status": "removed", "additions": 0, "deletions": 106, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c/INSTALL%2FSPECIFIC", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c/INSTALL%2FSPECIFIC", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/INSTALL%2FSPECIFIC?ref=b9082e8adb8a8e2c6501350ae1c7a5e189a9995c", "patch": "@@ -1,106 +0,0 @@\n-Host/Target specific installation notes for egcs-1.0\n-\n-alpha*-*-*\n-No specific installation needs/instructions.\n-\n-\n-i?86-*-linux*\n-You will need binutils-2.8.1.0.15 or newer for exception handling to work.\n-\n-i?86-*-sco3.2v5*\n-The SCO assembler is currently required.    The GNU assembler is not up\n-to the task of switching between ELF and COFF at runtime.\n-\n-Unlike various prereleases of GCC, that used '-belf' and defaulted to \n-COFF, you must now use the '-melf' and '-mcoff' flags to toggle between \n-the two object file formats.     ELF is now the default.\n-\n-Look in gcc/config/i386/sco5.h (search for \"messy\") for additional\n-OpenServer-specific flags.\n-\n-\n-\n-hppa*-hp-hpux*\n-We highly recommend using gas/binutils-2.8 on all hppa platforms; you\n-may encounter a variety of problems when using the HP assembler.\n-\n-hppa*-hp-hpux9\n-The HP assembler has major problems on this platform.  We've tried to work\n-around the worst of the problems.  However, those workarounds may be causing\n-linker crashes in some circumstances; the workarounds also probably prevent\n-shared libraries from working.  Use the GNU assembler to avoid these problems.\n-\n-The configuration scripts for egcs will also trigger a bug in the hpux9\n-shell.  To avoid this problem set CONFIG_SHELL to /bin/ksh and SHELL to\n-/bin/ksh in your environment.\n-\n-hppa*-hp-hpux10\n-For hpux10.20, we highly recommend you pick up the latest sed\n-patch from HP.  HP has two sites which provide patches free of charge.\n-\n-http://us-support.external.hp.com for US, Canada, Asia-Pacific, and\n-Latin-America\n-http://europe-support.external.hp.com for Europe\n-\n-Retrieve patch PHCO_12862.\n-\n-The HP assembler on these systems is much better than the hpux9 assembler,\n-but still has some problems.  Most notably the assembler inserts timestamps\n-into each object file it creates, causing the 3-stage comparison test to fail\n-during a \"make bootstrap\".  You should be able to continue by saying \"make all\"\n-after getting the failure from \"make bootstrap\".\n-\n-m68k-*-nextstep*\n-You absolutely must use GNU sed and GNU make on this platform.  \n-\n-If you try to build the integrated C++ & C++ runtime libraries on this system\n-you will run into trouble with include files.  The way to get around this is\n-to use the following sequence.  Note you must have write permission to\n-prefix for this sequence to work.\n-\n-cd objdir\n-make all-texinfo all-bison all-byacc all-binutils all-gas all-ld\n-cd gcc\n-make bootstrap\n-make install-headers-tar\n-cd ..\n-make bootstrap3\n-\n-m68k-sun-sunos4.1.1\n-It is reported that you may need the GNU assembler on this platform.\n-\n-mips*-sgi-irix4\n-mips*-sgi-irix5\n-You must use GAS on these platforms, the native assembler can not handle the\n-code for exception handling support on this platform.\n-\n-These systems don't have ranlib, which various components in egcs need; you\n-should be able to avoid this problem by installing GNU binutils, which includes\n-a functional ranlib for this system.\n-\n-You may get the following warning on irix4 platforms, it can be safely\n-ignored.\n-\n-    warning: foo.o does not have gp tables for all its sections.\n-\n-mips*-sgi-irix6\n-You must not use GAS on irix6 platforms; doing so will only cause problems.\n-\n-These systems don't have ranlib, which various components in egcs need; you\n-should be able to avoid this problem by making a dummy script called ranlib\n-which just exits with zero status and placing it in your path.\n-\n-rs6000-ibm-aix*\n-powerpc-ibm-aix*\n-At least one person as reported problems with older versions of gnu-make on\n-this platform.  make-3.76 is reported to work correctly.\n-\n-powerpc-*-linux-gnu*\n-You will need binutils-2.8.1.0.17 from ftp://ftp.yggdrasil.com/private/hjl for\n-a working egcs. It is strongly recommended to recompile binutils with egcs\n-if you initially built it with gcc-2.7.2.*.\n-\n-\n-exception handling \n-XXX Linux stuff\n-Last modified on December 2, 1997."}, {"sha": "749204571cab53d293404995956d13584f132675", "filename": "INSTALL/TEST", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c/INSTALL%2FTEST", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c/INSTALL%2FTEST", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/INSTALL%2FTEST?ref=b9082e8adb8a8e2c6501350ae1c7a5e189a9995c", "patch": "@@ -1,28 +0,0 @@\n-Testing egcs-1.0\n-\n-Before you install egcs, you might wish to run the egcs testsuite; this\n-step is optional and may require you to download additional software.\n-\n-First, you must have downloaded the egcs testsuites; the full distribution\n-contains testsuites.  If you downloaded the \"core\" compiler plus any front\n-ends, then you do not have the testsuites.  You can download the testsuites\n-from the same site where you downloaded the core distribution and language\n-front ends.\n-\n-Second, you must have a new version of dejagnu on your system; dejagnu-1.3\n-will not work.  We have made a  dejagnu snapshot\n-ftp://ftp.cygnus.com/pub/egcs/infrastructure/dejagnu-971028.tar.gz\n-dejagnu snapshot available in ftp.cygnus.com:/pub/egcs/infrastructure until\n-a new version of dejagnu can be released.\n-\n-Assuming you've got the testsuites unpacked and have installed an appropriate\n-dejagnu, you can run the testsuite with \"cd objdir; make -k check\".\n-This may take a long time.  Go get some lunch.\n-\n-The testing process will try to test as many components in the egcs\n-distrubution as possible, including the C, C++ and Fortran compiler as\n-well as the C++ runtime libraries.\n-\n- How to interpret test results XXX.\n-\n-Last modified on December 2, 1997."}, {"sha": "750b2c4a5f265a8a7ecb844073853b601ec4d10e", "filename": "INSTALL/build.html", "status": "removed", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c/INSTALL%2Fbuild.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c/INSTALL%2Fbuild.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/INSTALL%2Fbuild.html?ref=b9082e8adb8a8e2c6501350ae1c7a5e189a9995c", "patch": "@@ -1,66 +0,0 @@\n-<html>\n-<head>\n-<title>Building egcs-1.0 </title>\n-</head>\n-<body bgcolor=\"white\">\n-<h1 align=\"center\">Building egcs-1.0</h1>\n-\n-<p>Now that egcs is configured, you are ready to build the compiler and\n-runtime libraries.\n-\n-<p>We <b>highly</b> recommend that egcs be built using gnu-make; other\n-versions make work, then again they might not.  To be safe build with gnu-make.\n-\n-<p><b>Building a native compiler</b>\n-<p>For a native build issue the command \"make bootstrap\".  This will build\n-the entire egcs compiler system, which includes the following steps:\n-\n-<ul>\n-  <li> Build host tools necessary to build the compiler such as texinfo, bison,\n-  gperf.<p>\n-\n-  <li> Build target tools for use by the compiler such as gas, gld, and\n-  binutils.<p>\n-\n-  <li> Perform a 3-stage bootstrap of the compiler.<p>\n-\n-  <li> Perform a comparison test of the stage2 and stage3 compilers.<p>\n-\n-  <li> Build runtime libraries using the stage3 compiler from the previous\n-  step.<p>\n-</ul>\n-\n-<p>If you are short on disk space you might consider \"make bootstrap-lean\"\n-instead.  This is identical to \"make bootstrap\" except that object files\n-from the stage1 and stage2 of the 3-stage bootstrap of the compiler are\n-deleted as soon as they are no longer needed.\n-\n-<p><b>Building a cross compiler</b>\n-\n-<p> We recommend reading the\n-<a href=\"ftp://ftp.cygnus.com/pub/embedded/crossgcc/FAQ-0.8.1\">\n-crossgcc FAQ</a> for information about building cross compilers.\n-\n-<p>For a cross build, issue the command \"make cross\", which performs the\n-following steps:\n-<ul>\n-  <li> Build host tools necessary to build the compiler such as texinfo, bison,\n-  gperf.<p>\n-\n-  <li> Build target tools for use by the compiler such as gas, gld, and\n-  binutils.<p>\n-\n-  <li> Build the compiler (single stage only).<p>\n-\n-  <li> Build runtime libraries using the compiler from the previous\n-  step.<p>\n-</ul>\n-\n-<p>Note that if an error occurs in any step the make process will exit.\n-\n-<p>\n-<hr>\n-<i>Last modified on December 2, 1997.</i>\n-\n-</body>\n-</html>"}, {"sha": "ff26b384b9cd233eac454d51b273aa3fe3740ed2", "filename": "INSTALL/configure.html", "status": "removed", "additions": 0, "deletions": 122, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c/INSTALL%2Fconfigure.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c/INSTALL%2Fconfigure.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/INSTALL%2Fconfigure.html?ref=b9082e8adb8a8e2c6501350ae1c7a5e189a9995c", "patch": "@@ -1,122 +0,0 @@\n-<html>\n-<head>\n-<title>Configuring egcs-1.0 </title>\n-</head>\n-<body bgcolor=\"white\">\n-<h1 align=\"center\">Configuring egcs-1.0</h1>\n-\n-<p>Like most GNU software, egcs must be configured before it can be built.\n-This document attempts to describe the recommended configuration procedure\n-for both native and cross targets.\n-\n-<p>We use <i>srcdir</i> to refer to the toplevel source directory for\n-egcs; we use <i>objdir</i> to refer to the toplevel build/object\n-directory for egcs.\n-\n-<p>First, we <b>highly</b> recommend that egcs be built into a separate\n-directory than the sources.  This is how we generally build egcs; building\n-where <i>srcdir</i> == <i>objdir</i> should still work, but doesn't get\n-extensive testing.\n-\n-<p>Second, when configuring a native system, either \"cc\" must be in your\n-path or you must set CC in your environment before running configure.\n-Otherwise the configuration scripts may fail.\n-\n-<p>To configure egcs:\n-\n-<blockquote>\n-<tt>\n-  <br>% mkdir <i>objdir</i>\n-  <br>% cd <i>objdir</i>\n-  <br>% <i>srcdir</i>/configure <b>[target]</b> <b>[options]</b>\n-</tt>\n-</blockquote>\n-\n-\n-<p><b>target specification</b>\n-<ul>\n-  <li> egcs has code to correctly determine the correct value for\n-  <b>target</b> for nearly all native systems.  Therefore, we highly\n-  recommend you not provide a configure target when configuring a\n-  native compiler.\n-\n-  <li> <b>target</b> must be specified when configuring a cross compiler;\n-  examples of valid targets would be i960-rtems, m68k-coff, sh-elf, etc.\n-</ul>\n-\n-\n-<p><b> options specification</b>\n-\n-<p>Use <b>options</b> to override several configure time options for\n-egcs.  A partial list of supported <tt>options</tt>:\n-\n-<ul>\n-  <li> <tt>--prefix=</tt><i>dirname</i> -- Specify the toplevel installation\n-  directory.  This is the recommended way to install the tools into a directory\n-  other than the default.  The toplevel installation directory defaults to\n-  /usr/local.\n-\n-  <br>These additional options control where certain parts of the distribution\n-  are installed.  Normally you should not need to use these options.\n-  <ul>\n-     <li> <tt>--with-local-prefix=</tt><i>dirname</i> -- Specify the installation\n-     directory for local include files.  The default is /usr/local.\n-\n-     <li> <tt>--with-gxx-include-dir=</tt><i>dirname</i> -- Specify the installation\n-     directory for g++ header files.  The default is /usr/local/include/g++.\n-  </ul>\n-\n-  <li> <tt>--enable-shared</tt> -- Build shared versions of the C++ runtime\n-  libraries if supported <tt>--disable-shared</tt> is the default.\n-\n-  <li> <tt>--enable-haifa</tt> -- Enable the new Haifa instruction scheduler in the\n-  compiler; the new scheduler can significantly improve code on some targets.\n-  <tt>--disable-haifa</tt> is currently the default on all platforms except the HPPA.\n-\n-  <li> <tt>--with-gnu-as</tt> -- Specify that the compiler should assume the GNU\n-  assembler (aka gas) is available. \n-\n-  <li> <tt>--with-gnu-ld</tt> -- Specify that the compiler should assume the GNU\n-  linker (aka gld) is available. \n-\n-  <li> <tt>--with-stabs</tt> -- Specify that stabs debugging information should be used\n-  instead of whatever format the host normally uses.  Normally GCC uses the\n-  same debug format as the host system. \n-\n-  <li> <tt>--enable-multilib</tt> -- Specify that multiple target libraries\n-  should be built to support different target variants, calling conventions,\n-  etc.  This is the default. \n-\n-  <li> <tt>--enable-threads</tt> -- Specify that the target supports threads.\n-  This only effects the Objective-C compiler and runtime library.\n-\n-  <li> <tt>--enable-threads=</tt><i>lib</i> -- Specify that <i>lib</i> is the\n-  thread support library.  This only effects the Objective-C compiler  and\n-  runtime library.\n-\n-  <li> <tt>--with-cpu=</tt><i>cpu</i> -- Specify which cpu variant the compiler should\n-  generate code for by default.  This is currently only supported on the\n-  RS6000/PowerPC ports.\n-</ul>\n-\n-<p>Some options which only apply to building cross compilers:\n-<ul>\n-  <li> <tt>--with-headers=</tt><i>dir</i> -- Specifies a directory which has target\n-  include files.\n-  <li> <tt>--with-libs=</tt><i>dirs</i> -- Specifies a list of directories which contain\n-  the target runtime libraries.\n-  <li> <tt>--with-newlib</tt> -- Specifies that \"newlib\" is being used as the target\n-  C library.   This causes __eprintf to be omitted from libgcc.a on the\n-  assumption that it will be provided by newlib.\n-</ul>\n- \n-<p>Note that each <tt>--enable</tt> option has a corresponding <tt>--disable</tt> option and\n-that each <tt>--with</tt> option has a corresponding <tt>--without</tt> option.\n-\n-\n-<p>\n-<hr>\n-<i>Last modified on December 2, 1997.</i>\n-\n-</body>\n-</html>"}, {"sha": "cbc82dafe12b357f0bb0e407f3462f1d94ef00d9", "filename": "INSTALL/faq.html", "status": "removed", "additions": 0, "deletions": 365, "changes": 365, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c/INSTALL%2Ffaq.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c/INSTALL%2Ffaq.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/INSTALL%2Ffaq.html?ref=b9082e8adb8a8e2c6501350ae1c7a5e189a9995c", "patch": "@@ -1,365 +0,0 @@\n-<html>\n-<head>\n-<title>egcs Frequently Asked Questions</title>\n-</head>\n-<body bgcolor=\"white\">\n-<h1 align=\"center\">egcs Frequently Asked Questions</h1>\n-\n-<ol>\n-  <li><a href=\"#gcc-2-diff\">How is egcs be different from gcc2?</a>\n-  <li><a href=\"#open-development\">What is an open development model?</a>\n-  <li><a href=\"#libc-lock\">bits/libc-lock.h:  No such file or directory</a>\n-  <li><a href=\"#morelibc\">`_IO_stdfile_0_lock' was not declared in this scope</a>\n-  <li><a href=\"#fortran\">Problems building the Fortran compiler</a>\n-  <li><a href=\"#mips\">Problems building on MIPS platforms</a>\n-  <li><a href=\"#x86eh\">Problems with exception handling on x86 platforms</a>\n-  <li><a href=\"#hpcompare\">Bootstrap comparison failures on HPs</a>\n-  <li><a href=\"#makebugs\">Bootstrap loops rebuilding cc1 over and over</a>\n-  <li><a href=\"#rpath\">Dynamic linker is unable to find GCC libraries</a>\n-  <li><a href=\"#rpath\">libstdc++/libio tests fail badly with --enable-shared</a>\n-  <li><a href=\"#dejagnu\">Unable to run the testsuite</a>\n-  <li><a href=\"#cross\">How to build a cross compiler</a>\n-  <li><a href=\"#multiple\">How to install both gcc2 and egcs</a>\n-  <li><a href=\"#snapshot\">Snapshots, how, when, why</a>\n-  <li><a href=\"#linuxkernel\">Problems building Linux kernels</a>\n-  <li><a href=\"#memexhausted\">Virtual memory exhausted</a>\n-  <li><a href=\"#gas\">GCC can not find GAS</a>\n-  <li><a href=\"#rh5.0\">egcs does not work on Red Hat 5.0</a>\n-\n-</ol>\n-\n-<hr>\n-<h2><a name=\"gcc-2-diff\">How is egcs be different from gcc2?</a></h2>\n-\n-<p>Six years ago, gcc version 1 had reached a point of stability.  For the\n-targets it could support, it worked well.  It had limitations inherent in\n-its design that would be difficult to resolve, so a major effort was made\n-and gcc version 2 was the result.  When we had gcc2 in a useful state,\n-development efforts on gcc1 stopped and we all concentrated on making\n-gcc2 better than gcc1 could ever be.  This is the kind of step forward\n-we want to make with egcs.\n-\n-<p>In brief, the three biggest differences between egcs and gcc2 are\n-these:  \n-\n-<ul>\n-  <li>More rexamination of basic architectual decisions of\n-    gcc and an interest in adding new optimizations;\n-\n-  <li>working with the groups who have fractured out from gcc2 (like\n-   the Linux folks, the Intel optimizations folks, Fortran folks)\n-   including more front-ends; and finally\n-\n-  <li>An open development model (<a\n-   href=\"#open-development\">see below</a>) for the development process.\n-</ul>\n-\n-<p>These three differences will work together to result in a more\n-useful compiler, a more stable compiler, a central compiler that works\n-for more people, a compiler that generates better code.  \n-\n-\n-<p>There are a lot of exciting compiler optimizations that have come\n-out.  We want them in gcc.  There are a lot of front ends out there for\n-gcc for languages like Fortran or Pascal.  We want them easily\n-installable by users.  After six years of working on gcc2, we've come\n-to see problems and limitations in the way gcc is architected; it is\n-time to address these again.\n-\n-<hr>\n-<h2><a name=\"open-development\">What is an open development model?</a></h2>\n-\n-<p>With egcs, we are going to try a bazaar style<a\n-href=\"#cathedral-vs-bazaar\"><b>[1]</b></a> approach to its\n-development:  We're going to be making snapshots publically available\n-to anyone who wants to try them; we're going to welcome anyone to join\n-the development mailing list.  All of the discussions on the\n-development mailing list are available via the web.  We're going to be\n-making releases with a much higher frequency than they have been made\n-in the past:  We're shooting for three by the end of 1997.\n-\n-<p>In addition to weekly snapshots of the egcs development sources, we\n-are going to look at making the sources readable from a CVS server by\n-anyone.  We want to make it so external maintainers of parts of egcs\n-are able to commit changes to their part of egcs directly into the\n-sources without going through an intermediary.\n-\n-<p>There have been many potential gcc developers who were not able to\n-participate in gcc development in the past.  We these people to help in\n-any way they can; we ultimately want gcc to be the best compiler in the\n-world.\n-\n-<p>A compiler is a complicated piece of software, there will still be\n-strong central maintainers who will reject patches, who will demand\n-documentation of implementations, and who will keep the level of\n-quality as high as it is today.  Code that could use wider testing may\n-be intergrated--code that is simply ill-conceived won't be.\n-\n-<p>egcs is not the first piece of software to use this open development\n-process; FreeBSD, the Emacs lisp repository, and Linux are a few\n-examples of the bazaar style of development.\n-\n-<p>With egcs, we will be adding new features and optimizations at a\n-rate that has not been done since the creation of gcc2; these additions\n-will inevitably have a temporarily destabilizing effect.  With the help\n-of developers working together with this bazaar style development, the\n-resulting stability and quality levels will be better than we've had\n-before.\n-\n-<blockquote>\n-<a name=\"cathedral-vs-bazaar\"><b>[1]</b></a> \n-  We've been discussing different development models a lot over the\n-  past few months.  The paper which started all of this introduced two\n-  terms:  A <b>cathedral</b> development model versus a <b>bazaar</b>\n-  development model.  The paper is written by Eric S. Raymond, it is\n-  called ``<a\n-  href=\"http://locke.ccil.org/~esr/writings/cathedral.html\">The\n-  Cathedral and the Bazaar</a>''.  The paper is a useful starting point\n-  for discussions.\n-</blockquote>\n-\n-\n-<hr>\n-<h2><a name=\"libc-lock\">bits/libc-lock.h: No such file or directory</a></h2>\n-<p>egcs includes a tightly integrated libio and libstdc++ implementation which\n-can cause problems on hosts which have libio integrated into their C library\n-(most notably Linux).\n-\n-<p>We believe that we've solved the major technical problems for the most\n-common versions of libc found on Linux systems.  However, some versions\n-of Linux use pre-release versions of glibc2, which egcs has trouble detecting\n-and correctly handling.\n-\n-<p>If you're using one of these pre-release versions of glibc2, you may get\n-a message \"bits/libc-lock.h: No such file or directory\" when building egcs.\n-Unfortunately, to fix this problem you will need to update your C library to\n-glibc2.0.5c.\n-\n-<p>Late breaking news: we may have at least a partial solution for these\n-problems.  So this FAQ entry may no longer be needed.\n-\n-<hr>\n-<h2><a name=\"morelibc\">`_IO_stdfile_0_lock' was not declared in this scope</a></h2>\n-<p>If you get this error, it means either egcs incorrectly guessed what version\n-of libc is installed on your linux system, or you incorrectly specified a\n-version of glibc when configuring egcs.\n-\n-<p>If you did not provide a target name when configuring egcs, then you've\n-found a bug which needs to be reported.  If you did provide a target name at\n-configure time, then you should reconfigure without specifying a target name.\n-\n-<hr>\n-<h2><a name=\"fortran\">Problems building the Fortran compiler</a></h2>\n-<p>The Fortran front end can not be built with most vendor compilers; it must\n-be built with gcc.  As a result, you may get an error if you do not follow\n-the install instructions carefully.\n-\n-<p>In particular, instead of using \"make\" to build egcs, you should use\n-\"make bootstrap\" if you are building a native compiler or \"make cross\"\n-if you are building a cross compiler.\n-\n-<p>It has also been reported that the Fortran compiler can not be built     \n-on Red Hat 4.X linux for the Alpha.  Fixing this may require upgrading\n-binutils or to Red Hat 5.0; we'll provide more information as it becomes  \n-available.                                                               \n-\n-<hr>\n-<h2><a name=\"mips\">Problems building on MIPS platforms</a></h2>\n-<p>egcs requires the use of GAS on all versions of Irix, except Irix 6 due\n-to limitations in older Irix assemblers.\n-\n-<p> Either of these messages indicates that you are using the MIPS assembler\n-when instead you should be using GAS.\n-\n-<pre>\n-    as0: Error: ./libgcc2.c, line 1:Badly delimited numeric literal\n-          .4byte $LECIE1-$LSCIE1\n-    as0: Error: ./libgcc2.c, line 1:malformed statement\n-</pre>\n-\n-<hr>\n-<pre>\n-    as0: Error: /home/law/egcs_release/gcc/libgcc2.c, line 1:undefined symbol in expression\n-    .word $LECIE1-$LSCIE1\n-\n-</pre>\n-\n-\n-<p> For Irix 6, you should use the native assembler as GAS is not supported\n-on Irix 6.\n-\n-<hr>\n-<h2> <a name=\"x86eh\">Problems with exception handling on x86 platforms</a></h2>\n-<p>If you are using the GNU assembler (aka gas) on an x86 platform and\n-exception handling is not working correctly, then odds are you're using a\n-buggy assembler.\n-\n-<p>We recommend binutils-2.8.0.1.15 or newer.\n-<br><a href=\"ftp://tsx-11.mit.edu/pub/linux/packages/GCC/binutils-2.8.1.0.15.tar.gz\"> binutils-2.8.0.1.15 source</a>\n-<br><a href=\"ftp://tsx-11.mit.edu/pub/linux/packages/GCC/binutils-2.8.1.0.15.bin.tar.gz\"> binutils-2.8.0.1.15 x86 binary for libc5</a>\n-<br><a href=\"ftp://tsx-11.mit.edu/pub/linux/packages/GCC/binutils-2.8.1.0.15.glibc.bin.tar.gz\"> binutils-2.8.0.1.15 x86 binary for glibc2</a>\n-Or, you can try a\n-<a href=\"ftp://ftp.cygnus.com/pub/egcs/infrastructure/gas-970915.tar.gz\"> binutils snapshot</a>; however, be aware that the binutils snapshot is untested\n-and may not work (or even build).  Use it at your own risk.\n-\n-<hr>\n-<h2> <a name=\"hpcompare\">Bootstrap comparison failures on HPs</a></h2>\n-<p>If you bootstrap the compiler on hpux10 using the HP assembler instead of\n-gas, every file will fail the comparison test.\n-\n-<p>The HP asembler inserts timestamps into object files it creates, causing\n-every file to be different.  The location of the timestamp varies for each\n-object file, so there's no real way to work around this mis-feature.\n-\n-<p>Odds are your compiler is fine, but there's no way to be certain.\n-\n-<p>If you use GAS on HPs, then you will not run into this problem because\n-GAS never inserts timestamps into object files.  For this and various other\n-reasons we highly recommend using GAS on HPs.\n-\n-<hr>\n-<h2> <a name=\"makebugs\">Bootstrap loops rebuilding cc1 over and over</a></h2>\n-<p>When building egcs, the build process loops rebuilding cc1 over and\n-over again.  This happens on mips-sgi-irix5.2, and possibly other platforms.\n-\n-<p>This is probably a bug somewhere in the egcs Makefile.  Until we find and\n-fix this bug we recommend you use GNU make instead of vendor supplied make\n-programs.\n-\n-<hr>\n-<h2> <a name=\"rpath\">Dynamic linker is unable to find GCC libraries</a></h2>\n-<p>This problem manifests itself by programs not finding shared libraries\n-they depend on when the programs are started.  Note this problem often manifests\n-itself with failures in the libio/libstdc++ tests after configuring with\n---enable-shared and building egcs.\n-\n-<p>GCC does not specify a runpath so that the dynamic linker can find dynamic\n-libraries at runtime.\n-\n-<p>The short explaination is that if you always pass a -R option to the\n-linker, then your programs become dependent on directories which\n-may be NFS mounted, and programs may hang unnecessarily when an\n-NFS server goes down.\n-\n-<p>The problem is not programs that do require the directories; those\n-programs are going to hang no matter what you do.  The problem is\n-programs that do not require the directories.\n-\n-<p>SunOS effectively always passed a -R option for every -L option;\n-this was a bad idea, and so it was removed for Solaris.  We should\n-not recreate it.\n-\n-<hr>\n-<h2> <a name=\"dejagnu\">Unable to run the testsuite</a></h2>\n-<p>If you get a message about unable to find \"standard.exp\" when trying to\n-run the egcs testsuites, then your dejagnu is too old to run the egcs tests.\n-You will need to get a newer version of dejagnu; we've made a\n-<a href=\"ftp://ftp.cygnus.com/pub/egcs/infrastructure/dejagnu-971028.tar.gz\">\n-dejagnu snapshot</a> available until a new version of dejagnu can be released.\n-\n-<hr>\n-<h2> <a name=\"cross\">How to build a cross compiler</a></h2>\n-<p> Building cross compilers is a rather complex undertaking because they\n-usually need additional software (cross assembler, cross linker, target\n-libraries, target include files, etc).\n-\n-<p> We recommend reading the <a href=\"ftp://ftp.cygnus.com/pub/embedded/crossgcc/FAQ-0.8.1\">\n-crossgcc FAQ</a> for information about building cross compilers.\n-\n-<p> If you have all the pieces available, then `make cross' should build a\n-cross compiler.  `make LANGUAGES=\"c c++\" install'will install the cross\n-compiler.\n-\n-<p> Note that if you're trying to build a cross compiler in a tree which\n-includes binutils-2.8 in addition to egcs, then you're going to need to\n-make a couple minor tweaks so that the cross assembler, linker and\n-nm utilities will be found.\n-\n-<p>binutils-2.8 builds those files as gas.new, ld.new and nm.new; egcs gcc\n-looks for them using gas-new, ld-new and nm-new, so you may have to arrange\n-for any symlinks which point to &ltfile&gt.new to be changed to &ltfile&gt-new.\n-\n-<hr>\n-<h2> <a name=\"snapshot\">Snapshots, how, when, why</a></h2>\n-<p> We make snapshots of the egcs sources about once a week; there is no\n-predetermined schedule.  These snapshots are intended to give everyone\n-access to work in progress.  Any given snapshot may generate incorrect code\n-or even fail to build.\n-\n-<p>If you plan on downloading and using snapshots, we highly recommend you\n-subscribe to the egcs mailing lists.  See <a href=\"index.html#mailinglists\">\n-mailing lists</a> on the main egcs page for instructions on how to subscribe.\n-\n-<p>When using the diff files to update from older snapshots to newer snapshots,\n-make sure to use \"-E\" and \"-p\" arguments to patch so that empty files are\n-deleted and full pathnames are provided to patch.  If your version of\n-patch does not support \"-E\", you'll need to get a newer version.  Also note\n-that you may need autoconf, autoheader and various other programs if you use\n-diff files to update from one snapshot to the next.\n-\n-<hr>\n-<h2> <a name=\"multiple\">How to install both egcs and gcc2</a></h2>\n-<p>It may be desirable to install both egcs and gcc2 on the same system.  This\n-can be done by using different prefix paths at configure time and a few\n-symlinks.\n-\n-<p>Basically, configure the two compilers with different --prefix options,\n-then build and install each compiler.  Assume you want \"gcc\" to be the egcs\n-compiler and available in /usr/local/bin; also assume that you want \"gcc2\"\n-to be the gcc2 compiler and also available in /usr/local/bin.\n-\n-<p>The easiest way to do this is to configure egcs with --prefix=/usr/local/egcs\n-and gcc2 with --prefix=/usr/local/gcc2.  Build and install both compilers.\n-Then make a symlink from /usr/local/bin/gcc to /usr/local/egcs/bin/gcc and\n-from /usr/local/bin/gcc2 to /usr/local/gcc2/bin/gcc.  Create similar links\n-for the \"g++\", \"c++\" and \"g77\" compiler drivers.\n-\n-<hr>\n-<h2> <a name=\"linuxkernel\">Problems building Linux kernels</a></h2>\n-<p>If you installed a recent binutils/gas snapshot on your Linux system,\n-you may not be able to build the kernel because objdump does not understand\n-the \"-k\" switch.  The solution for this problem is to remove /usr/bin/encaps.\n-\n-<p>You may get an internal compiler error compiling process.c in newer\n-versions of the Linux kernel on x86 machines.  This is a bug in an asm\n-statement in process.c, not a bug in egcs.  XXX How to fix?!?\n-\n-<p>You may get errors with the X driver of the form \n-<pre>\n-_X11TransSocketUNIXConnect: Can't connect: errno = 111\n-</pre>\n-\n-<p>It's a kernel bug. The function sys_iopl in arch/i386/kernel/process.c\n-does an illegal hack which used to work but is now broken since GCC optimizes\n-more aggressively . The newer 2.1.x kernels already have a fix which should\n-also work in 2.0.32.\n-\n-<hr>\n-<h2> <a name=\"memexhausted\">Virtual memory exhausted error</a></h2>\n-<p> This error means your system ran out of memory; this can happen for large\n-files, particularly when optimizing.  If you're getting this error you should\n-consider trying to simplify your files or reducing the optimization level.\n-\n-<p>Note that using -pedantic or -Wreturn-type can cause an explosion in the\n-amount of memory needed for template-heavy C++ code, such as code that uses\n-STL.  Also note that -Wall includes -Wreturn-type, so if you use -Wall you\n-will need to specify -Wno-return-type to turn it off.\n-\n-<hr>\n-<h2> <a name=\"gas\">GCC can not find GAS</a></h2>\n-<p>Some configurations like irix4, irix5, hpux* require the use of the GNU\n-assembler intead of the system assembler.  To ensure that egcs finds the GNU\n-assembler, you should configure the GNU assembler with the same --prefix\n-option as you used for egcs.  Then build & install the GNU assembler.\n-\n-<hr>\n-<h2> <a name=\"rh5.0\">egcs does not work on Red Hat 5.0</a></h2>\n-<p> egcs does not currently work with Red Hat 5.0; we'll update this\n-entry with more information as it becomes available.\n-\n-<hr>\n-<p><a href=\"index.html\">Return to the egcs home page</a>\n-<p><i>Last modified:  December 2, 1997</i>\n-\n-</body>\n-</html>"}, {"sha": "c7984f106a7f2fe6c4cdb0047cbc9fc0be32b577", "filename": "INSTALL/finalinstall.html", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c/INSTALL%2Ffinalinstall.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c/INSTALL%2Ffinalinstall.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/INSTALL%2Ffinalinstall.html?ref=b9082e8adb8a8e2c6501350ae1c7a5e189a9995c", "patch": "@@ -1,30 +0,0 @@\n-<html>\n-<head>\n-<title>Final install egcs-1.0 </title>\n-</head>\n-<body bgcolor=\"white\">\n-<h1 align=\"center\">Final install egcs-1.0</h1>\n-\n-<p>Now that egcs has been built and tested, you can install it with\n-`cd <i>objdir</i>; make install' for a native compiler or\n-`cd <i>objdir</i>; make install LANGUAGES=\"c c++\"' for a cross compiler\n-(note installing cross compilers will be easier in the next release!).\n-\n-\n-<p>That step completes the installation of egcs; user level binaries can\n-be found in <i>prefix</i>/bin where <i>prefix</i> is the value you specified\n-with the --prefix to configure (or /usr/local by default).\n-\n-<p>If you don't mind, please send egcs@cygnus.com a short mail message\n-indicating that you successfully built and installed egcs.  Include\n-the output from running <i>srcdir</i>/config.guess.\n-\n-<p>If you find a bug in egcs, please report it to\n-<a href=\"mailto:egcs-bugs@cygnus.com\">egcs-bugs@cygnus.com</a>.\n-\n-<p>\n-<hr>\n-<i>Last modified on December 2, 1997.</i>\n-\n-</body>\n-</html>"}, {"sha": "5c556ec76154e5a6d88cfcd2a554e10b8a213401", "filename": "INSTALL/index.html", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c/INSTALL%2Findex.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c/INSTALL%2Findex.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/INSTALL%2Findex.html?ref=b9082e8adb8a8e2c6501350ae1c7a5e189a9995c", "patch": "@@ -1,47 +0,0 @@\n-<html>\n-<head>\n-<title>Installing egcs-1.0 </title>\n-</head>\n-<body bgcolor=\"white\">\n-<h1 align=\"center\">Installing egcs-1.0</h1>\n-\n-<p>This document describes the generic installation procedure for egcs as\n-well as detailing some target specific installation instructions for egcs.\n-\n-<p>egcs includes several components that previously were separate distributions\n-with their own installation instructions.  This document supercedes all \n-package specific installation instructions.  We provide the component specific\n-installation information in the source distribution for historical reference\n-purposes only.\n-\n-<p>We recommend you read the entire generic installation instructions as\n-well as any target specific installation instructions before you proceed\n-to configure, build, test and install egcs.\n-\n-<p>If something goes wrong in the configure, build, test or install\n-procedures, first double check that you followed the generic and target\n-specific installation instructions carefully.  Then check the \n-<a href=\"faq.html\">FAQ</a> to see if your problem is covered before you file\n-a bug report.\n-\n-<p>The installation procedure is broken into four steps.\n-\n-<ul>\n-\n-  <li> <a href=\"configure.html\">configure</a>\n-  <li> <a href=\"build.html\">build</a>\n-  <li> <a href=\"test.html\">test</a> (optional)\n-  <li> <a href=\"finalinstall.html\">install</a>\n-\n-</ul>\n-\n-<p>Before starting the build/install procedure <b>please</b> browse the\n-<a href=\"specific.html\">host/target specific installation notes</a>.\n-\n-<hr>\n-<a href=\"../index.html\">Return to the egcs home page</a>\n-</body>\n-</html>\n-<hr>\n-<i>Last modified on December 2, 1997.</i>\n-"}, {"sha": "752a564cbd12beb4cdd93dd70d28eff42920c5bb", "filename": "INSTALL/specific.html", "status": "removed", "additions": 0, "deletions": 121, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c/INSTALL%2Fspecific.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c/INSTALL%2Fspecific.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/INSTALL%2Fspecific.html?ref=b9082e8adb8a8e2c6501350ae1c7a5e189a9995c", "patch": "@@ -1,121 +0,0 @@\n-<html>\n-<head>\n-<title>Host/Target specific installation notes for egcs-1.0 </title>\n-</head>\n-<body bgcolor=\"white\">\n-<h1 align=\"center\">Host/Target specific installation notes for egcs-1.0</h1>\n-\n-<p><b>alpha*-*-*</b><br>\n-No specific installation needs/instructions.\n-\n-\n-<p><b>i?86-*-linux*</b><br>\n-You will need binutils-2.8.1.0.15 or newer for exception handling to work.\n-\n-<p><b>i?86-*-sco3.2v5*</b><br>\n-The SCO assembler is currently required.    The GNU assembler is not up\n-to the task of switching between ELF and COFF at runtime.\n-\n-<br>Unlike various prereleases of GCC, that used '-belf' and defaulted to \n-COFF, you must now use the '-melf' and '-mcoff' flags to toggle between \n-the two object file formats.     ELF is now the default.\n-\n-<br>Look in gcc/config/i386/sco5.h (search for \"messy\") for additional\n-OpenServer-specific flags.\n-\n-<br>Systems based on OpenServer before 5.0.4 (<code>uname -X</code> will\n-tell you what you're running) require TLS597 from ftp.sco.com/TLS for\n-C++ constructors and destructors to work right.\n-\n-<p><b>hppa*-hp-hpux*</b><br>\n-We <b>highly</b> recommend using gas/binutils-2.8 on all hppa platforms; you\n-may encounter a variety of problems when using the HP assembler.\n-\n-XXX How to make sure gcc finds/uses gas.\n-\n-<p><b>hppa*-hp-hpux9</b><br>\n-The HP assembler has major problems on this platform.  We've tried to work\n-around the worst of the problems.  However, those workarounds may be causing\n-linker crashes in some circumstances; the workarounds also probably prevent\n-shared libraries from working.  Use the GNU assembler to avoid these problems.\n-\n-<br>The configuration scripts for egcs will also trigger a bug in the hpux9\n-shell.  To avoid this problem set CONFIG_SHELL to /bin/ksh and SHELL to\n-/bin/ksh in your environment.\n-\n-<p><b>hppa*-hp-hpux10</b><br>\n-For hpux10.20, we <b>highly</b> recommend you pick up the latest sed\n-patch from HP.  HP has two sites which provide patches free of charge.\n-\n-<br><a href=\"http://us-support.external.hp.com\">US, Canada, Asia-Pacific, and\n-Latin-America</a>\n-<br><a href=\"http://europe-support.external.hp.com\">Europe</a>\n-\n-<p>Retrieve patch PHCO_12862.\n-\n-<p>The HP assembler on these systems is much better than the hpux9 assembler,\n-but still has some problems.  Most notably the assembler inserts timestamps\n-into each object file it creates, causing the 3-stage comparison test to fail\n-during a \"make bootstrap\".  You should be able to continue by saying \"make all\"\n-after getting the failure from \"make bootstrap\".\n-\n-<p><b>m68k-*-nextstep*</b><br>\n-You absolutely must use GNU sed and GNU make on this platform.  \n-\n-<p>If you try to build the integrated C++ & C++ runtime libraries on this system\n-you will run into trouble with include files.  The way to get around this is\n-to use the following sequence.  Note you must have write permission to\n-<i>prefix</i> for this sequence to work.\n-\n-<p>cd <i>objdir</i><br>\n-make all-texinfo all-bison all-byacc all-binutils all-gas all-ld<br>\n-cd gcc<br>\n-make bootstrap<br>\n-make install-headers-tar<br>\n-cd ..<br>\n-make bootstrap3<br>\n-\n-<p><b>m68k-sun-sunos4.1.1</b><br>\n-It is reported that you may need the GNU assembler on this platform.\n-\n-<p><b>mips*-sgi-irix4</b><br>\n-<b>mips*-sgi-irix5</b><br>\n-You must use GAS on these platforms, the native assembler can not handle the\n-code for exception handling support on this platform.\n-\n-<p>These systems don't have ranlib, which various components in egcs need; you\n-should be able to avoid this problem by installing GNU binutils, which includes\n-a functional ranlib for this system.\n-\n-<p>You may get the following warning on irix4 platforms, it can be safely\n-ignored.\n-<pre>\n-    warning: foo.o does not have gp tables for all its sections.\n-</pre>\n-\n-<p><b>mips*-sgi-irix6</b><br>\n-You must not use GAS on irix6 platforms; doing so will only cause problems.\n-\n-<p>These systems don't have ranlib, which various components in egcs need; you\n-should be able to avoid this problem by making a dummy script called ranlib\n-which just exits with zero status and placing it in your path.\n-\n-<p><b>rs6000-ibm-aix*</b><br>\n-<b>powerpc-ibm-aix*</b><br>\n-At least one person as reported problems with older versions of gnu-make on\n-this platform.  make-3.76 is reported to work correctly.\n-\n-<p><b>powerpc-*-linux-gnu*</b><br>\n-You will need\n-<a href=\"ftp://ftp.yggdrasil.com/private/hjl\">binutils-2.8.1.0.17</a> for\n-a working egcs. It is strongly recommended to recompile binutils with egcs\n-if you initially built it with gcc-2.7.2.*.\n-\n-<p>\n-exception handling \n-<p>XXX Linux stuff\n-<hr>\n-<i>Last modified on December 2, 1997.</i>\n-\n-</body>\n-</html>"}, {"sha": "c77de8592298f71c1ea15e898bc8235b10759bb1", "filename": "INSTALL/test.html", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c/INSTALL%2Ftest.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c/INSTALL%2Ftest.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/INSTALL%2Ftest.html?ref=b9082e8adb8a8e2c6501350ae1c7a5e189a9995c", "patch": "@@ -1,37 +0,0 @@\n-<html>\n-<head>\n-<title>Testing egcs-1.0 </title>\n-</head>\n-<body bgcolor=\"white\">\n-<h1 align=\"center\">Testing egcs-1.0</h1>\n-\n-<p>Before you install egcs, you might wish to run the egcs testsuite; this\n-step is optional and may require you to download additional software.\n-\n-<p>First, you must have downloaded the egcs testsuites; the full distribution\n-contains testsuites.  If you downloaded the \"core\" compiler plus any front\n-ends, then you do not have the testsuites.  You can download the testsuites\n-from the same site where you downloaded the core distribution and language\n-front ends.\n-\n-<p>Second, you must have a new version of dejagnu on your system; dejagnu-1.3\n-will not work.  We have made a \n-<a href=\"ftp://ftp.cygnus.com/pub/egcs/infrastructure/dejagnu-971028.tar.gz\">\n-dejagnu snapshot</a> available in ftp.cygnus.com:/pub/egcs/infrastructure until\n-a new version of dejagnu can be released.\n-\n-<p>Assuming you've got the testsuites unpacked and have installed an appropriate\n-dejagnu, you can run the testsuite with \"cd <i>objdir</i>; make -k check\".\n-This may take a long time.  Go get some lunch.\n-\n-<p>The testing process will try to test as many components in the egcs\n-distrubution as possible, including the C, C++ and Fortran compiler as\n-well as the C++ runtime libraries.\n-\n-<p> How to interpret test results XXX.\n-\n-<hr>\n-<i>Last modified on December 2, 1997.</i>\n-\n-</body>\n-</html>"}]}