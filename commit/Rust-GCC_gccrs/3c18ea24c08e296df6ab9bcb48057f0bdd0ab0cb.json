{"sha": "3c18ea24c08e296df6ab9bcb48057f0bdd0ab0cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2MxOGVhMjRjMDhlMjk2ZGY2YWI5YmNiNDgwNTdmMGJkZDBhYjBjYg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-05-18T12:31:46Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-05-18T12:31:46Z"}, "message": "Change to utilize autoconf variables.\n\nFrom-SVN: r14084", "tree": {"sha": "68ce508f4da1002f2e706664dbc129934220fc72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68ce508f4da1002f2e706664dbc129934220fc72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c18ea24c08e296df6ab9bcb48057f0bdd0ab0cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c18ea24c08e296df6ab9bcb48057f0bdd0ab0cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c18ea24c08e296df6ab9bcb48057f0bdd0ab0cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c18ea24c08e296df6ab9bcb48057f0bdd0ab0cb/comments", "author": null, "committer": null, "parents": [{"sha": "35bcca7b96863a98b2ddd04527f2a721be6d69e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35bcca7b96863a98b2ddd04527f2a721be6d69e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35bcca7b96863a98b2ddd04527f2a721be6d69e0"}], "stats": {"total": 118, "additions": 68, "deletions": 50}, "files": [{"sha": "a55a5625293da3f8270547713d7d2ce13ec51f51", "filename": "gcc/Makefile.in", "status": "modified", "additions": 68, "deletions": 50, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c18ea24c08e296df6ab9bcb48057f0bdd0ab0cb/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c18ea24c08e296df6ab9bcb48057f0bdd0ab0cb/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=3c18ea24c08e296df6ab9bcb48057f0bdd0ab0cb", "patch": "@@ -26,20 +26,24 @@\n # Suppress smart makes who think they know how to automake Yacc files\n .y.c:\n \n+# Directory where sources are, from where we are.\n+srcdir = @srcdir@\n+VPATH = @srcdir@\n+\n # Variables that exist for you to override.\n # See below for how to change them for certain systems.\n \n # List of language subdirectories.\n # This is overridden by configure.\n-SUBDIRS =\n+SUBDIRS =@subdirs@\n \n # Selection of languages to be made.\n # This is overridden by configure.\n-LANGUAGES = c objective-c proto gcov\n+LANGUAGES = c objective-c proto gcov @all_languages@\n \n # Selection of languages to be made during stage1 build.\n # This is overridden by configure.\n-BOOT_LANGUAGES = c\n+BOOT_LANGUAGES = c @all_boot_languages@\n \n ALLOCA =\n ALLOCA_FLAGS =\n@@ -72,7 +76,7 @@ OLDAR_FLAGS = qc\n AR_FLAGS = rc\n SHELL = /bin/sh\n # on sysV, define this as cp.\n-INSTALL = install -c\n+INSTALL = @INSTALL@\n # These permit overriding just for certain files.\n INSTALL_PROGRAM = $(INSTALL)\n INSTALL_DATA = $(INSTALL)\n@@ -81,6 +85,7 @@ MAKEINFOFLAGS =\n TEXI2DVI = texi2dvi\n # For GNUmake: let us decide what gets passed to recursive makes.\n MAKEOVERRIDES =\n+@SET_MAKE@\n \n # Define this as & to perform parallel make on a Sequent.\n # Note that this has some bugs, and it seems currently necessary \n@@ -107,7 +112,7 @@ OLDAR = ar\n \n # Target to use when installing include directory.  Either\n # install-headers-tar or install-headers-cpio.\n-INSTALL_HEADERS_DIR = install-headers-tar\n+INSTALL_HEADERS_DIR = @build_install_headers_dir@\n \n # Header files that are made available under the same name\n # to programs compiled with GCC.\n@@ -173,38 +178,36 @@ LIMITS_H_TEST = [ -f $(SYSTEM_HEADER_DIR)/limits.h ]\n PREMADE_ATTRTAB_MD = Makefile  # Guaranteed not to cmp equal to md.\n PREMADE_ATTRTAB = \n \n-target= ... `configure' substitutes actual target name here.\n-target_alias= ... `configure' substitutes specified target name here.\n-xmake_file= ... `configure' substitutes actual x- file name here.\n-tmake_file= ... `configure' substitutes actual t- file name here.\n-out_file= ... `configure' substitutes actual out file name here.\n-out_object_file= ... `configure' substitutes actual out object file name here.\n-md_file= ... `configure' substitutes actual md file name here.\n-tm_file= ... `configure' substitutes actual tm file name here.\n-build_xm_file= ... `configure' substitutes actual build xm- file name here.\n-host_xm_file= ... `configure' substitutes actual host xm- file name here.\n-lang_specs_files= ... `configure' substitutes actual lang spec file names here.\n-lang_options_files= ... `configure' puts actual lang options file names here.\n-OBJC_THREAD_FILE= ... `configure' puts actual objc thread file name here.\n-version=`sed -e 's/.*\\\"\\([^ \\\"]*\\)[ \\\"].*/\\1/' < $(srcdir)/version.c`\n+target=@target@\n+target_alias=@target@\n+xmake_file=@dep_host_xmake_file@\n+tmake_file=@dep_tmake_file@\n+out_file=$(srcdir)/config/@out_file@\n+out_object_file=@out_object_file@\n+md_file=$(srcdir)/config/@md_file@\n+tm_file=@tm_file_list@\n+build_xm_file=@build_xm_file_list@\n+host_xm_file=@host_xm_file_list@\n+lang_specs_files=@lang_specs_files@\n+lang_options_files=@lang_options_files@\n+OBJC_THREAD_FILE=thr-@objc_thread_file@\n+version=@version@\n mainversion=`sed -e 's/.*\\\"\\([0-9]*\\.[0-9]*\\).*/\\1/' < $(srcdir)/version.c`\n \n-# Directory where sources are, from where we are.\n-srcdir = .\n # Common prefix for installation directories.\n # NOTE: This directory must exist when you start installation.\n-prefix = /usr/local\n+prefix = @prefix@\n # Directory in which to put localized header files. On the systems with\n # gcc as the native cc, `local_prefix' may not be `prefix' which is\n # `/usr'.\n # NOTE: local_prefix *should not* default from prefix.\n-local_prefix = /usr/local\n+local_prefix = @local_prefix@\n # Directory in which to put host dependent programs and libraries\n-exec_prefix = $(prefix)\n+exec_prefix = @exec_prefix@\n # Directory in which to put the executable for the command `gcc'\n-bindir = $(exec_prefix)/bin\n+bindir = @bindir@\n # Directory in which to put the directories used by the compiler.\n-libdir = $(exec_prefix)/lib\n+libdir = @libdir@\n # Directory in which the compiler finds executables, libraries, etc.\n libsubdir = $(libdir)/gcc-lib/$(target_alias)/$(version)\n # Directory in which the compiler finds g++ includes.\n@@ -217,14 +220,14 @@ includedir = $(local_prefix)/include\n # (But this currently agrees with what is in cross-make.)\n assertdir = $(tooldir)/include\n # where the info files go\n-infodir = $(prefix)/info\n+infodir = @infodir@\n # Extension (if any) to put in installed man-page filename.\n manext = .1\n objext = .o\n-exeext =\n+exeext = @exeext@\n \n # Directory in which to put man pages.\n-mandir = $(prefix)/man/man1\n+mandir = @mandir@/man1\n # Directory in which to find other cross-compilation tools and headers.\n # Used in install-cross.\n tooldir = $(exec_prefix)/$(target_alias)\n@@ -283,29 +286,30 @@ LIBGCC1_TEST = libgcc1-test\n # List of extra executables that should be compiled for this target machine\n # that are used for compiling from source code to object code.\n # The rules for compiling them should be in the t-* file for the machine.\n-EXTRA_PASSES =\n+EXTRA_PASSES =@extra_passes@\n \n # Like EXTRA_PASSES, but these are used when linking.\n-EXTRA_PROGRAMS = \n+EXTRA_PROGRAMS = @extra_programs@\n \n # List of extra object files that should be compiled for this target machine.\n # The rules for compiling them should be in the t-* file for the machine.\n-EXTRA_PARTS =\n+EXTRA_PARTS = @extra_parts@\n \n # List of extra object files that should be compiled and linked with\n # compiler proper (cc1, cc1obj, cc1plus).\n-EXTRA_OBJS =\n+EXTRA_OBJS = @extra_objs@\n \n # List of extra object files that should be compiled and linked with\n # the gcc driver.\n-EXTRA_GCC_OBJS =\n+EXTRA_GCC_OBJS =@host_extra_gcc_objs@\n \n # List of additional header files to install.\n # Often this is edited directly by `configure'.\n-EXTRA_HEADERS =\n+EXTRA_HEADERS =@extra_headers_list@\n \n # Set this to `ld' to enable use of collect2.\n-# USE_COLLECT2 =\n+USE_COLLECT2 = @will_use_collect2@\n+MAYBE_USE_COLLECT = @maybe_use_collect2@\n # It is convenient for configure to add the assignment at the beginning,\n # so don't override it here.\n \n@@ -319,7 +323,7 @@ LIB2FUNCS_EXTRA =\n \n # Default float.h source to use for cross-compiler.\n # This is overidden by configure.\n-CROSS_FLOAT_H=float.h-cross\n+CROSS_FLOAT_H=$(srcdir)/config/float-@float_format@.h\n \n # Program to convert libraries.\n LIBCONVERT = \n@@ -332,7 +336,7 @@ TAROUTOPTS = xpBf\n \n # Select which version of fixincludes to use (I.E. regular versus SVR4)\n # This value is overridden directly by configure.\n-FIXINCLUDES=fixincludes\n+FIXINCLUDES = @fixincludes@\n \n # Additional directories of header files to run fixincludes on.\n # These should be directories searched automatically by default\n@@ -344,11 +348,11 @@ OTHER_FIXINCLUDES_DIRS=\n \n # A list of all the language-specific executables.\n # This is overridden by configure.\n-COMPILERS = cc1$(exeext) cc1obj$(exeext)\n+COMPILERS = cc1$(exeext) cc1obj$(exeext) @all_compilers@\n \n # List of things which should already be built whenever we try to use xgcc\n # to compile anything (without linking).\n-GCC_PASSES=xgcc$(exeext) cc1$(exeext) cpp$(exeext) $(EXTRA_PASSES)\n+GCC_PASSES=xgcc$(exeext) $(COMPILERS) cpp$(exeext) $(EXTRA_PASSES)\n \n # List of things which should already be built whenever we try to use xgcc\n # to link anything.\n@@ -416,9 +420,17 @@ all: all.indirect\n \n # sed inserts variable overrides after the following line.\n ####target overrides\n+@target_overrides@\n+\n ####host overrides\n+@host_overrides@\n+\n ####cross overrides\n+@cross_defines@\n+@cross_overrides@\n+\n ####build overrides\n+@build_overrides@\n \f\n # Now figure out from those variables how to compile and link.\n \n@@ -481,11 +493,11 @@ INCLUDES = -I. -I$(srcdir) -I$(srcdir)/config\n # ??? objc can be supported this way too (leave for later).\n \n # These next lines are overridden by configure.\n-LANG_MAKEFILES =\n-LANG_STAGESTUFF =\n-LANG_DIFF_EXCLUDES =\n-LANG_LIB2FUNCS =\n-LANG_EXTRA_HEADERS =\n+LANG_MAKEFILES = @all_lang_makefiles@\n+LANG_STAGESTUFF = @all_stagestuff@\n+LANG_DIFF_EXCLUDES = @all_diff_excludes@\n+LANG_LIB2FUNCS = @all_lib2funcs@\n+LANG_EXTRA_HEADERS = @all_headers@\n \n # Flags to pass to recursive makes.\n # CC is set by configure.  Hosts without symlinks need special handling\n@@ -497,7 +509,7 @@ FLAGS_TO_PASS = \\\n \t\"AR_FOR_TARGET=$(AR_FOR_TARGET)\" \\\n \t\"BISON=$(BISON)\" \\\n \t\"BISONFLAGS=$(BISONFLAGS)\" \\\n-\t\"CC=set-by-configure\" \\\n+\t\"CC=@cc_set_by_configure@\" \\\n \t\"CFLAGS=$(CFLAGS)\" \\\n \t\"CLIB=$(CLIB)\" \\\n \t\"GCC_FOR_TARGET=$(GCC_FOR_TARGET)\" \\\n@@ -509,7 +521,7 @@ FLAGS_TO_PASS = \\\n \t\"RANLIB_FOR_TARGET=$(RANLIB_FOR_TARGET)\" \\\n \t\"RANLIB_TEST_FOR_TARGET=$(RANLIB_TEST_FOR_TARGET)\" \\\n \t\"SHELL=$(SHELL)\" \\\n-\t\"STAGE_PREFIX=set-by-configure\" \\\n+\t\"STAGE_PREFIX=@stage_prefix_set_by_configure@\" \\\n \t\"exeext=$(exeext)\" \\\n \t\"objext=$(objext)\" \\\n \t\"exec_prefix=$(exec_prefix)\" \\\n@@ -629,9 +641,11 @@ T =\n # Configure computes and adds these here.\n \n ####language hooks\n+@language_hooks@\n \n # sed inserts language fragments after the following line.\n ####language fragments\n+@language_fragments@\n \n # End of language makefile fragments.\n \f\n@@ -645,6 +659,9 @@ Makefile: $(srcdir)/Makefile.in $(srcdir)/configure $(srcdir)/version.c \\\n \t$(SHELL) config.run\n \trm -f config.run\n \n+configure: $(srcdir)/configure.in\n+\tcd $(srcdir); autoconf\n+\n all.internal: start.encap rest.encap\n # This is what to compile if making a cross-compiler.\n # Note that we can compile enquire using the cross-compiler just built,\n@@ -1984,7 +2001,7 @@ dvi: $(srcdir)/gcc.dvi $(srcdir)/cpp.dvi lang.dvi\n \n # This works with GNU Make's default rule.\n $(srcdir)/gcc.dvi: gcc.texi extend.texi install.texi invoke.texi \\\n-\t\tmd.texi rtl.texi tm.texi gcov.texi \n+\t\tmd.texi rtl.texi tm.texi gcov.texi\n \t$(TEXI2DVI) $<\n \n # This works with GNU Make's default rule.\n@@ -2082,7 +2099,8 @@ clean: mostlyclean bytecode.clean lang.clean\n # while building and installing GCC.\n distclean: clean bytecode.distclean lang.distclean\n \t-rm -f tm.h config.h tconfig.h hconfig.h md\n-\t-rm -f config.status config.run\n+\t-rm -f config.status config.run config.cache\n+\t-rm -f Make-host Make-target Make-lang Make-hooks\n \t-rm -f Makefile specs.h options.h *.oaux\n \t-rm -fr stage1 stage2 stage3 stage4\n \t-rm -f */stage1 */stage2 */stage3 */stage4 */include\n@@ -2215,7 +2233,7 @@ install-common: native installdirs $(EXTRA_PARTS) lang.install-common\n \tfi\n \t-rm -f $(libsubdir)/cpp$(exeext)\n \t$(INSTALL_PROGRAM) cpp$(exeext) $(libsubdir)/cpp$(exeext)\n-# Install gcov if it was compiled.\n+\t# Install gcov if it was compiled.\n \t-if [ -f gcov$(exeext) ]; \\\n \tthen \\\n \t    rm -f $(bindir)/gcov$(exeext); \\"}]}