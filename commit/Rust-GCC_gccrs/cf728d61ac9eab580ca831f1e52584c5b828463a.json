{"sha": "cf728d61ac9eab580ca831f1e52584c5b828463a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y3MjhkNjFhYzllYWI1ODBjYTgzMWYxZTUyNTg0YzViODI4NDYzYQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2001-08-25T21:39:47Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2001-08-25T21:39:47Z"}, "message": "reload1.c (reload): Make all entries in reg_equiv_memory_loc unshared.\n\n\t* reload1.c (reload): Make all entries in reg_equiv_memory_loc\n\tunshared.\n\t* reload.c (make_memloc): Copy result if it is still\n\treg_equiv_memory_loc[regno] on return.\n\t(subst_reloads) [ENABLE_CHECKING]: Check that none of\n\treg_equiv_constant, reg_equiv_memory_loc, reg_equiv_address and\n\treg_equiv_mem are modified by the substitutions.\n\nFrom-SVN: r45177", "tree": {"sha": "3f04cc547069c87b98593d538db187624b02a7b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f04cc547069c87b98593d538db187624b02a7b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf728d61ac9eab580ca831f1e52584c5b828463a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf728d61ac9eab580ca831f1e52584c5b828463a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf728d61ac9eab580ca831f1e52584c5b828463a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf728d61ac9eab580ca831f1e52584c5b828463a/comments", "author": null, "committer": null, "parents": [{"sha": "6ab16dd9ad5daa079e0ad3312b1324a4dd51b8bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ab16dd9ad5daa079e0ad3312b1324a4dd51b8bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ab16dd9ad5daa079e0ad3312b1324a4dd51b8bb"}], "stats": {"total": 54, "additions": 47, "deletions": 7}, "files": [{"sha": "f85e3d22d04d1e49c26405220378fcf51508ad01", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf728d61ac9eab580ca831f1e52584c5b828463a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf728d61ac9eab580ca831f1e52584c5b828463a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf728d61ac9eab580ca831f1e52584c5b828463a", "patch": "@@ -1,3 +1,13 @@\n+2001-08-25  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* reload1.c (reload): Make all entries in reg_equiv_memory_loc\n+\tunshared.\n+\t* reload.c (make_memloc): Copy result if it is still\n+\treg_equiv_memory_loc[regno] on return.\n+\t(subst_reloads) [ENABLE_CHECKING]: Check that none of\n+\treg_equiv_constant, reg_equiv_memory_loc, reg_equiv_address and\n+\treg_equiv_mem are modified by the substitutions.\n+\n Sat Aug 25 23:07:35 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* predict.c (expensive_function_p): New."}, {"sha": "0cf5a0eebf97558b2d144457ea2cf7a5dd4472ec", "filename": "gcc/reload.c", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf728d61ac9eab580ca831f1e52584c5b828463a/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf728d61ac9eab580ca831f1e52584c5b828463a/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=cf728d61ac9eab580ca831f1e52584c5b828463a", "patch": "@@ -4486,7 +4486,13 @@ make_memloc (ad, regno)\n     tem = copy_rtx (tem);\n \n   tem = replace_equiv_address_nv (reg_equiv_memory_loc[regno], tem);\n-  return adjust_address_nv (tem, GET_MODE (ad), 0);\n+  tem = adjust_address_nv (tem, GET_MODE (ad), 0);\n+\n+  /* Copy the result if it's still the same as the equivalence, to avoid\n+     modifying it when we do the substitution for the reload.  */\n+  if (tem == reg_equiv_memory_loc[regno])\n+    tem = copy_rtx (tem);\n+  return tem;\n }\n \n /* Record all reloads needed for handling memory address AD\n@@ -5769,6 +5775,32 @@ subst_reloads (insn)\n       register rtx reloadreg = rld[r->what].reg_rtx;\n       if (reloadreg)\n \t{\n+#ifdef ENABLE_CHECKING\n+\t  /* Internal consistency test.  Check that we don't modify\n+\t     anything in the equivalence arrays.  Whenever something from\n+\t     those arrays needs to be reloaded, it must be unshared before\n+\t     being substituted into; the equivalence must not be modified.\n+\t     Otherwise, if the equivalence is used after that, it will\n+\t     have been modified, and the thing substituted (probably a\n+\t     register) is likely overwritten and not a usable equivalence.  */\n+\t  int check_regno;\n+\n+\t  for (check_regno = 0; check_regno < max_regno; check_regno++)\n+\t    {\n+#define CHECK_MODF(ARRAY)\t\t\t\t\t\t\\\n+\t      if (ARRAY[check_regno]\t\t\t\t\t\\\n+\t\t  && loc_mentioned_in_p (r->where,\t\t\t\\\n+\t\t\t\t\t ARRAY[check_regno]))\t\t\\\n+\t\tabort ()\n+\n+\t      CHECK_MODF (reg_equiv_constant);\n+\t      CHECK_MODF (reg_equiv_memory_loc);\n+\t      CHECK_MODF (reg_equiv_address);\n+\t      CHECK_MODF (reg_equiv_mem);\n+#undef CHECK_MODF\n+\t    }\n+#endif /* ENABLE_CHECKING */\n+\n \t  /* If we're replacing a LABEL_REF with a register, add a\n \t     REG_LABEL note to indicate to flow which label this\n \t     register refers to.  */"}, {"sha": "83708400422419572a5d265e12e19ee51825b88e", "filename": "gcc/reload1.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf728d61ac9eab580ca831f1e52584c5b828463a/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf728d61ac9eab580ca831f1e52584c5b828463a/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=cf728d61ac9eab580ca831f1e52584c5b828463a", "patch": "@@ -782,12 +782,10 @@ reload (first, global)\n \t\t{\n \t\t  if (GET_CODE (x) == MEM)\n \t\t    {\n-\t\t      /* If the operand is a PLUS, the MEM may be shared,\n-\t\t\t so make sure we have an unshared copy here.  */\n-\t\t      if (GET_CODE (XEXP (x, 0)) == PLUS)\n-\t\t\tx = copy_rtx (x);\n-\n-\t\t      reg_equiv_memory_loc[i] = x;\n+\t\t      /* Always unshare the equivalence, so we can\n+\t\t\t substitute into this insn without touching the\n+\t\t\t equivalence. */\n+\t\t      reg_equiv_memory_loc[i] = copy_rtx (x);\n \t\t    }\n \t\t  else if (function_invariant_p (x))\n \t\t    {"}]}