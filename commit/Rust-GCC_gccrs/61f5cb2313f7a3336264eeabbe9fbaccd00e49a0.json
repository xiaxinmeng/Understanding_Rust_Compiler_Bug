{"sha": "61f5cb2313f7a3336264eeabbe9fbaccd00e49a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFmNWNiMjMxM2Y3YTMzMzYyNjRlZWFiYmU5ZmJhY2NkMDBlNDlhMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-08-30T13:54:49Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-08-30T13:54:49Z"}, "message": "PR libstdc++/89164 enforce constraints for uninitialized algos\n\nThe memmove optimizations for std::uninitialized_copy/fill/_n will\ncompile even if the type is not copy constructible, because std::copy\ndoesn't require copy construction to work. But the uninitialized\nalgorithms do require it.\n\nThis adds explicit static assertions to ensure we don't allow ill-formed\ninitializations.\n\n\tPR libstdc++/89164\n\t* include/bits/stl_algobase.h (__copy_move): Give descriptive names\n\tto template parameters.\n\t* include/bits/stl_uninitialized.h (uninitialized_copy)\n\t(uninitialized_fill, uninitialized_fill_n): Add static assertions to\n\tdiagnose invalid uses.\n\t* testsuite/20_util/specialized_algorithms/uninitialized_copy/1.cc:\n\tAdjust expected error.\n\t* testsuite/20_util/specialized_algorithms/uninitialized_copy/89164.cc:\n\tNew test.\n\t* testsuite/20_util/specialized_algorithms/uninitialized_copy_n/\n\t89164.cc: New test.\n\t* testsuite/20_util/specialized_algorithms/uninitialized_fill/89164.cc:\n\tNew test.\n\t* testsuite/20_util/specialized_algorithms/uninitialized_fill_n/\n\t89164.cc: New test.\n\t* testsuite/23_containers/vector/cons/89164.cc: New test.\n\t* testsuite/23_containers/vector/cons/89164_c++17.cc: New test.\n\nFrom-SVN: r275177", "tree": {"sha": "53f8e4e427d2ccaad0a38927a6710a48c9bef542", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53f8e4e427d2ccaad0a38927a6710a48c9bef542"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61f5cb2313f7a3336264eeabbe9fbaccd00e49a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61f5cb2313f7a3336264eeabbe9fbaccd00e49a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61f5cb2313f7a3336264eeabbe9fbaccd00e49a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61f5cb2313f7a3336264eeabbe9fbaccd00e49a0/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "815b53683243f09194a9a0af270cde060c2d58e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/815b53683243f09194a9a0af270cde060c2d58e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/815b53683243f09194a9a0af270cde060c2d58e7"}], "stats": {"total": 276, "additions": 271, "deletions": 5}, "files": [{"sha": "b85d4f8253ee527086441f1f6e036997015767de", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f5cb2313f7a3336264eeabbe9fbaccd00e49a0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f5cb2313f7a3336264eeabbe9fbaccd00e49a0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=61f5cb2313f7a3336264eeabbe9fbaccd00e49a0", "patch": "@@ -1,3 +1,24 @@\n+2019-08-30  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/89164\n+\t* include/bits/stl_algobase.h (__copy_move): Give descriptive names\n+\tto template parameters.\n+\t* include/bits/stl_uninitialized.h (uninitialized_copy)\n+\t(uninitialized_fill, uninitialized_fill_n): Add static assertions to\n+\tdiagnose invalid uses.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_copy/1.cc:\n+\tAdjust expected error.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_copy/89164.cc:\n+\tNew test.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_copy_n/\n+\t89164.cc: New test.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_fill/89164.cc:\n+\tNew test.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_fill_n/\n+\t89164.cc: New test.\n+\t* testsuite/23_containers/vector/cons/89164.cc: New test.\n+\t* testsuite/23_containers/vector/cons/89164_c++17.cc: New test.\n+\n 2019-08-29  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/91067"}, {"sha": "98d324827ed06392b94a5bf0e40ab61e9130d6d4", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f5cb2313f7a3336264eeabbe9fbaccd00e49a0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f5cb2313f7a3336264eeabbe9fbaccd00e49a0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=61f5cb2313f7a3336264eeabbe9fbaccd00e49a0", "patch": "@@ -359,7 +359,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // (2) If we're using random access iterators, then write the loop as\n   // a for loop with an explicit count.\n \n-  template<bool, bool, typename>\n+  template<bool _IsMove, bool _IsSimple, typename _Category>\n     struct __copy_move\n     {\n       template<typename _II, typename _OI>"}, {"sha": "cf42cbd9c7667f4036f03b4a6e100d91a0d78d10", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f5cb2313f7a3336264eeabbe9fbaccd00e49a0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f5cb2313f7a3336264eeabbe9fbaccd00e49a0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=61f5cb2313f7a3336264eeabbe9fbaccd00e49a0", "patch": "@@ -130,9 +130,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus < 201103L\n       const bool __assignable = true;\n #else\n-      // trivial types can have deleted assignment\n+      // Trivial types can have deleted copy constructor, but the std::copy\n+      // optimization that uses memmove would happily \"copy\" them anyway.\n+      static_assert(is_constructible<_ValueType2, decltype(*__first)>::value,\n+\t  \"result type must be constructible from value type of input range\");\n+\n       typedef typename iterator_traits<_InputIterator>::reference _RefType1;\n       typedef typename iterator_traits<_ForwardIterator>::reference _RefType2;\n+      // Trivial types can have deleted assignment, so using std::copy\n+      // would be ill-formed. Require assignability before using std::copy:\n       const bool __assignable = is_assignable<_RefType2, _RefType1>::value;\n #endif\n \n@@ -197,7 +203,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus < 201103L\n       const bool __assignable = true;\n #else\n-      // trivial types can have deleted assignment\n+      // Trivial types can have deleted copy constructor, but the std::fill\n+      // optimization that uses memmove would happily \"copy\" them anyway.\n+      static_assert(is_constructible<_ValueType, const _Tp&>::value,\n+\t  \"result type must be constructible from input type\");\n+\n+      // Trivial types can have deleted assignment, so using std::fill\n+      // would be ill-formed. Require assignability before using std::fill:\n       const bool __assignable = is_copy_assignable<_ValueType>::value;\n #endif\n \n@@ -262,7 +274,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus < 201103L\n       const bool __assignable = true;\n #else\n-      // trivial types can have deleted assignment\n+      // Trivial types can have deleted copy constructor, but the std::fill\n+      // optimization that uses memmove would happily \"copy\" them anyway.\n+      static_assert(is_constructible<_ValueType, const _Tp&>::value,\n+\t  \"result type must be constructible from input type\");\n+\n+      // Trivial types can have deleted assignment, so using std::fill\n+      // would be ill-formed. Require assignability before using std::fill:\n       const bool __assignable = is_copy_assignable<_ValueType>::value;\n #endif\n       return __uninitialized_fill_n<__is_trivial(_ValueType) && __assignable>::"}, {"sha": "22b9805612f20bfb8849a1f306b2d3d0a9db41dd", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_copy/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f5cb2313f7a3336264eeabbe9fbaccd00e49a0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f5cb2313f7a3336264eeabbe9fbaccd00e49a0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy%2F1.cc?ref=61f5cb2313f7a3336264eeabbe9fbaccd00e49a0", "patch": "@@ -34,4 +34,4 @@ test01(T* result)\n   T t[1];\n   std::uninitialized_copy(t, t+1, result); // { dg-error \"here\" }\n }\n-// { dg-prune-output \"use of deleted function\" }\n+// { dg-error \"constructible from value\" \"\" { target *-*-* } 0 }"}, {"sha": "fa1ae59e6640936c1d26574f7089fb2fd22f879b", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_copy/89164.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f5cb2313f7a3336264eeabbe9fbaccd00e49a0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy%2F89164.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f5cb2313f7a3336264eeabbe9fbaccd00e49a0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy%2F89164.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy%2F89164.cc?ref=61f5cb2313f7a3336264eeabbe9fbaccd00e49a0", "patch": "@@ -0,0 +1,38 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <vector>\n+\n+// PR libstdc++/89164\n+\n+struct X\n+{\n+  X() = default;\n+  X(const X&) = delete;\n+};\n+\n+void test01()\n+{\n+  X x[1];\n+  alignas(X) unsigned char buf[sizeof(X)];\n+  X* p = (X*)buf;\n+\n+  std::uninitialized_copy(x, x+1, p); // { dg-error \"here\" }\n+}\n+// { dg-error \"must be constructible\" \"\" { target *-*-* } 0 }"}, {"sha": "361a7989bbf96fb8cc97b3cfb9ed1680b2405a0c", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_copy_n/89164.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f5cb2313f7a3336264eeabbe9fbaccd00e49a0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy_n%2F89164.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f5cb2313f7a3336264eeabbe9fbaccd00e49a0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy_n%2F89164.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy_n%2F89164.cc?ref=61f5cb2313f7a3336264eeabbe9fbaccd00e49a0", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <vector>\n+\n+struct X {\n+  X() = default;\n+  X(const X&) = delete;\n+};\n+\n+void test01()\n+{\n+  X x[1];\n+  alignas(X) unsigned char buf[sizeof(X)];\n+  X* p = (X*)buf;\n+\n+  std::uninitialized_copy_n(x, 1, p); // { dg-error \"here\" }\n+}\n+// { dg-error \"must be constructible\" \"\" { target *-*-* } 0 }"}, {"sha": "8634c8044aa670dd0f69e94c5b40045d35d06478", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_fill/89164.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f5cb2313f7a3336264eeabbe9fbaccd00e49a0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_fill%2F89164.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f5cb2313f7a3336264eeabbe9fbaccd00e49a0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_fill%2F89164.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_fill%2F89164.cc?ref=61f5cb2313f7a3336264eeabbe9fbaccd00e49a0", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <vector>\n+\n+struct X {\n+  X() = default;\n+  X(const X&) = delete;\n+};\n+\n+void f()\n+{\n+  X x;\n+  alignas(X) unsigned char buf[sizeof(X)];\n+  X* p = (X*)buf;\n+\n+  std::uninitialized_fill(p, p+1, x); // { dg-error \"here\" }\n+}\n+// { dg-error \"must be constructible\" \"\" { target *-*-* } 0 }"}, {"sha": "a2d7dc7a33888adef582f28dad72de666b5a60df", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_fill_n/89164.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f5cb2313f7a3336264eeabbe9fbaccd00e49a0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_fill_n%2F89164.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f5cb2313f7a3336264eeabbe9fbaccd00e49a0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_fill_n%2F89164.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_fill_n%2F89164.cc?ref=61f5cb2313f7a3336264eeabbe9fbaccd00e49a0", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <vector>\n+\n+struct X {\n+  X() = default;\n+  X(const X&) = delete;\n+};\n+\n+void test01()\n+{\n+  X x;\n+  alignas(X) unsigned char buf[sizeof(X)];\n+  X* p = (X*)buf;\n+\n+  std::uninitialized_fill_n(p, 1, x); // { dg-error \"here\" }\n+}\n+// { dg-error \"must be constructible\" \"\" { target *-*-* } 0 }"}, {"sha": "e280731403b7e888ac9ba05bedbb0c0e22785d09", "filename": "libstdc++-v3/testsuite/23_containers/vector/cons/89164.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f5cb2313f7a3336264eeabbe9fbaccd00e49a0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2F89164.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f5cb2313f7a3336264eeabbe9fbaccd00e49a0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2F89164.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2F89164.cc?ref=61f5cb2313f7a3336264eeabbe9fbaccd00e49a0", "patch": "@@ -0,0 +1,40 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <vector>\n+\n+// PR libstdc++/89164\n+\n+struct X\n+{\n+  X() = default;\n+  X(const X&) = delete;\n+};\n+\n+void test01()\n+{\n+  X x[1];\n+  // Should not be able to create vector using uninitialized_copy:\n+  std::vector<X> v1{x, x+1};\t// { dg-error \"here\" }\n+\n+  // Should not be able to create vector using uninitialized_fill_n:\n+  std::vector<X> v2{2u, X{}};\t// { dg-error \"here\" }\n+}\n+// { dg-error \"constructible from value\" \"\" { target *-*-* } 0 }\n+// { dg-error \"constructible from input\" \"\" { target *-*-* } 0 }"}, {"sha": "8b3afba48671c25dc296ecc0a1aec035edc2f649", "filename": "libstdc++-v3/testsuite/23_containers/vector/cons/89164_c++17.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f5cb2313f7a3336264eeabbe9fbaccd00e49a0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2F89164_c%2B%2B17.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f5cb2313f7a3336264eeabbe9fbaccd00e49a0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2F89164_c%2B%2B17.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2F89164_c%2B%2B17.cc?ref=61f5cb2313f7a3336264eeabbe9fbaccd00e49a0", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <vector>\n+\n+// PR libstdc++/89164\n+\n+void test01()\n+{\n+  X x[1];\n+  // Should not be able to create vector using uninitialized_copy:\n+  std::vector<X> v1{x, x+1};\t// { dg-error \"here\" }\n+\n+  // Should not be able to create vector using uninitialized_fill_n:\n+  std::vector<X> v2{2u, X{}};\t// { dg-error \"here\" }\n+}\n+\n+void test02()\n+{\n+#if __cplusplus >= 201703L\n+  // Can create initializer_list<X> with C++17 guaranteed copy elision,\n+  // but shouldn't be able to copy from it with uninitialized_copy:\n+  std::vector<X> v3{X{}, X{}, X{}};   // { dg-error \"here\" }\n+#endif\n+}\n+// { dg-error \"constructible from value\" \"\" { target *-*-* } 0 }\n+// { dg-error \"constructible from input\" \"\" { target *-*-* } 0 }"}]}