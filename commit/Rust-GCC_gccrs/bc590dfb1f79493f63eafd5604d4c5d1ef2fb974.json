{"sha": "bc590dfb1f79493f63eafd5604d4c5d1ef2fb974", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmM1OTBkZmIxZjc5NDkzZjYzZWFmZDU2MDRkNGM1ZDFlZjJmYjk3NA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-12-05T11:05:24Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-12-05T11:05:24Z"}, "message": "tree-ssa.c (verify_ssa): Verify SSA names in the loop over all SSA names.\n\n2011-12-05  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa.c (verify_ssa): Verify SSA names in the loop\n\tover all SSA names.  Remove SSA operand checking, call\n\tverify_ssa_operands.\n\t* tree-ssa-operands.h (verify_ssa_operands): Declare.\n\t* tree-ssa-operands.c (verify_ssa_operands): New function.\n\nFrom-SVN: r182007", "tree": {"sha": "0f669ecf9342c04f96e8d458fdd867ca990946be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f669ecf9342c04f96e8d458fdd867ca990946be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc590dfb1f79493f63eafd5604d4c5d1ef2fb974", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc590dfb1f79493f63eafd5604d4c5d1ef2fb974", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc590dfb1f79493f63eafd5604d4c5d1ef2fb974", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc590dfb1f79493f63eafd5604d4c5d1ef2fb974/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "76264f602ae32ac6fea5e80ac0098d07b40fe4ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76264f602ae32ac6fea5e80ac0098d07b40fe4ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76264f602ae32ac6fea5e80ac0098d07b40fe4ab"}], "stats": {"total": 213, "additions": 130, "deletions": 83}, "files": [{"sha": "5f36a0cac8d71eb842c90c3a5747bc6daa3e0618", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc590dfb1f79493f63eafd5604d4c5d1ef2fb974/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc590dfb1f79493f63eafd5604d4c5d1ef2fb974/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bc590dfb1f79493f63eafd5604d4c5d1ef2fb974", "patch": "@@ -1,3 +1,11 @@\n+2011-12-05  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa.c (verify_ssa): Verify SSA names in the loop\n+\tover all SSA names.  Remove SSA operand checking, call\n+\tverify_ssa_operands.\n+\t* tree-ssa-operands.h (verify_ssa_operands): Declare.\n+\t* tree-ssa-operands.c (verify_ssa_operands): New function.\n+\n 2011-12-05  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n \n        * config/arm/arm.c (vfp3_const_double_for_fract_bits): Define."}, {"sha": "3de34be7948eda5b6bba5b65c0c0aa2da88992a5", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 114, "deletions": 1, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc590dfb1f79493f63eafd5604d4c5d1ef2fb974/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc590dfb1f79493f63eafd5604d4c5d1ef2fb974/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=bc590dfb1f79493f63eafd5604d4c5d1ef2fb974", "patch": "@@ -33,7 +33,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ggc.h\"\n #include \"timevar.h\"\n #include \"langhooks.h\"\n-#include \"ipa-reference.h\"\n+#include \"diagnostic-core.h\"\n+\n \n /* This file contains the code required to manage the operands cache of the\n    SSA optimizer.  For every stmt, we maintain an operand cache in the stmt\n@@ -1081,6 +1082,118 @@ build_ssa_operands (gimple stmt)\n   finalize_ssa_stmt_operands (stmt);\n }\n \n+/* Verifies SSA statement operands.  */\n+\n+DEBUG_FUNCTION bool\n+verify_ssa_operands (gimple stmt)\n+{\n+  use_operand_p use_p;\n+  def_operand_p def_p;\n+  ssa_op_iter iter;\n+  unsigned i;\n+  tree use, def;\n+  bool volatile_p = gimple_has_volatile_ops (stmt);\n+\n+  /* build_ssa_operands w/o finalizing them.  */\n+  gimple_set_has_volatile_ops (stmt, false);\n+  start_ssa_stmt_operands ();\n+  parse_ssa_operands (stmt);\n+\n+  /* Now verify the built operands are the same as present in STMT.  */\n+  def = gimple_vdef (stmt);\n+  if (def\n+      && TREE_CODE (def) == SSA_NAME)\n+    def = SSA_NAME_VAR (def);\n+  if (build_vdef != def)\n+    {\n+      error (\"virtual definition of statement not up-to-date\");\n+      return true;\n+    }\n+  if (gimple_vdef (stmt)\n+      && ((def_p = gimple_vdef_op (stmt)) == NULL_DEF_OPERAND_P\n+\t  || DEF_FROM_PTR (def_p) != gimple_vdef (stmt)))\n+    {\n+      error (\"virtual def operand missing for stmt\");\n+      return true;\n+    }\n+\n+  use = gimple_vuse (stmt);\n+  if (use\n+      && TREE_CODE (use) == SSA_NAME)\n+    use = SSA_NAME_VAR (use);\n+  if (build_vuse != use)\n+    {\n+      error (\"virtual use of statement not up-to-date\");\n+      return true;\n+    }\n+  if (gimple_vuse (stmt)\n+      && ((use_p = gimple_vuse_op (stmt)) == NULL_USE_OPERAND_P\n+\t  || USE_FROM_PTR (use_p) != gimple_vuse (stmt)))\n+    {\n+      error (\"virtual use operand missing for stmt\");\n+      return true;\n+    }\n+\n+  FOR_EACH_SSA_USE_OPERAND (use_p, stmt, iter, SSA_OP_USE)\n+    {\n+      FOR_EACH_VEC_ELT (tree, build_uses, i, use)\n+\t{\n+\t  if (use_p->use == (tree *)use)\n+\t    {\n+\t      VEC_replace (tree, build_uses, i, NULL_TREE);\n+\t      break;\n+\t    }\n+\t}\n+      if (i == VEC_length (tree, build_uses))\n+\t{\n+\t  error (\"excess use operand for stmt\");\n+\t  debug_generic_expr (USE_FROM_PTR (use_p));\n+\t  return true;\n+\t}\n+    }\n+  FOR_EACH_VEC_ELT (tree, build_uses, i, use)\n+    if (use != NULL_TREE)\n+      {\n+\terror (\"use operand missing for stmt\");\n+\tdebug_generic_expr (*(tree *)use);\n+\treturn true;\n+      }\n+\n+  FOR_EACH_SSA_DEF_OPERAND (def_p, stmt, iter, SSA_OP_DEF)\n+    {\n+      FOR_EACH_VEC_ELT (tree, build_defs, i, def)\n+\t{\n+\t  if (def_p == (tree *)def)\n+\t    {\n+\t      VEC_replace (tree, build_defs, i, NULL_TREE);\n+\t      break;\n+\t    }\n+\t}\n+      if (i == VEC_length (tree, build_defs))\n+\t{\n+\t  error (\"excess def operand for stmt\");\n+\t  debug_generic_expr (DEF_FROM_PTR (def_p));\n+\t  return true;\n+\t}\n+    }\n+  FOR_EACH_VEC_ELT (tree, build_defs, i, def)\n+    if (def != NULL_TREE)\n+      {\n+\terror (\"def operand missing for stmt\");\n+\tdebug_generic_expr (*(tree *)def);\n+\treturn true;\n+      }\n+\n+  if (gimple_has_volatile_ops (stmt) != volatile_p)\n+    {\n+      error (\"stmt volatile flag not up-to-date\");\n+      return true;\n+    }\n+\n+  cleanup_build_arrays ();\n+  return false;\n+}\n+\n \n /* Releases the operands of STMT back to their freelists, and clears\n    the stmt operand lists.  */"}, {"sha": "ac195b575c37e7b74f79adff6bbb3e1fbb0d4e02", "filename": "gcc/tree-ssa-operands.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc590dfb1f79493f63eafd5604d4c5d1ef2fb974/gcc%2Ftree-ssa-operands.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc590dfb1f79493f63eafd5604d4c5d1ef2fb974/gcc%2Ftree-ssa-operands.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.h?ref=bc590dfb1f79493f63eafd5604d4c5d1ef2fb974", "patch": "@@ -105,6 +105,7 @@ extern void fini_ssa_operands (void);\n extern void update_stmt_operands (gimple);\n extern void free_stmt_operands (gimple);\n extern bool verify_imm_links (FILE *f, tree var);\n+extern bool verify_ssa_operands (gimple stmt);\n \n extern void dump_immediate_uses (FILE *file);\n extern void dump_immediate_uses_for (FILE *file, tree var);"}, {"sha": "c28167e41aa70a1d070543337639b83298cb1728", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 7, "deletions": 82, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc590dfb1f79493f63eafd5604d4c5d1ef2fb974/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc590dfb1f79493f63eafd5604d4c5d1ef2fb974/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=bc590dfb1f79493f63eafd5604d4c5d1ef2fb974", "patch": "@@ -938,6 +938,8 @@ verify_ssa (bool check_modified_stmt)\n \t  gimple stmt;\n \t  TREE_VISITED (name) = 0;\n \n+\t  verify_ssa_name (name, !is_gimple_reg (name));\n+\n \t  stmt = SSA_NAME_DEF_STMT (name);\n \t  if (!gimple_nop_p (stmt))\n \t    {\n@@ -987,9 +989,6 @@ verify_ssa (bool check_modified_stmt)\n \t{\n \t  gimple stmt = gsi_stmt (gsi);\n \t  use_operand_p use_p;\n-\t  bool has_err;\n-\t  int count;\n-\t  unsigned i;\n \n \t  if (check_modified_stmt && gimple_modified_p (stmt))\n \t    {\n@@ -999,89 +998,15 @@ verify_ssa (bool check_modified_stmt)\n \t      goto err;\n \t    }\n \n-\t  if (is_gimple_assign (stmt)\n-\t      && TREE_CODE (gimple_assign_lhs (stmt)) != SSA_NAME)\n-\t    {\n-\t      tree lhs, base_address;\n-\n-\t      lhs = gimple_assign_lhs (stmt);\n-\t      base_address = get_base_address (lhs);\n-\n-\t      if (base_address\n-\t\t  && SSA_VAR_P (base_address)\n-\t\t  && !gimple_vdef (stmt)\n-\t\t  && optimize > 0)\n-\t\t{\n-\t\t  error (\"statement makes a memory store, but has no VDEFS\");\n-\t\t  print_gimple_stmt (stderr, stmt, 0, TDF_VOPS);\n-\t\t  goto err;\n-\t\t}\n-\t    }\n-\t  else if (gimple_debug_bind_p (stmt)\n-\t\t   && !gimple_debug_bind_has_value_p (stmt))\n-\t    continue;\n-\n-\t  /* Verify the single virtual operand and its constraints.  */\n-\t  has_err = false;\n-\t  if (gimple_vdef (stmt))\n-\t    {\n-\t      if (gimple_vdef_op (stmt) == NULL_DEF_OPERAND_P)\n-\t\t{\n-\t\t  error (\"statement has VDEF operand not in defs list\");\n-\t\t  has_err = true;\n-\t\t}\n-\t      if (!gimple_vuse (stmt))\n-\t\t{\n-\t\t  error (\"statement has VDEF but no VUSE operand\");\n-\t\t  has_err = true;\n-\t\t}\n-\t      else if (SSA_NAME_VAR (gimple_vdef (stmt))\n-\t\t       != SSA_NAME_VAR (gimple_vuse (stmt)))\n-\t\t{\n-\t\t  error (\"VDEF and VUSE do not use the same symbol\");\n-\t\t  has_err = true;\n-\t\t}\n-\t      has_err |= verify_ssa_name (gimple_vdef (stmt), true);\n-\t    }\n-\t  if (gimple_vuse (stmt))\n+\t  if (verify_ssa_operands (stmt))\n \t    {\n-\t      if  (gimple_vuse_op (stmt) == NULL_USE_OPERAND_P)\n-\t\t{\n-\t\t  error (\"statement has VUSE operand not in uses list\");\n-\t\t  has_err = true;\n-\t\t}\n-\t      has_err |= verify_ssa_name (gimple_vuse (stmt), true);\n-\t    }\n-\t  if (has_err)\n-\t    {\n-\t      error (\"in statement\");\n-\t      print_gimple_stmt (stderr, stmt, 0, TDF_VOPS|TDF_MEMSYMS);\n+\t      print_gimple_stmt (stderr, stmt, 0, TDF_VOPS);\n \t      goto err;\n \t    }\n \n-\t  count = 0;\n-\t  FOR_EACH_SSA_TREE_OPERAND (op, stmt, iter, SSA_OP_USE|SSA_OP_DEF)\n-\t    {\n-\t      if (verify_ssa_name (op, false))\n-\t\t{\n-\t\t  error (\"in statement\");\n-\t\t  print_gimple_stmt (stderr, stmt, 0, TDF_VOPS|TDF_MEMSYMS);\n-\t\t  goto err;\n-\t\t}\n-\t      count++;\n-\t    }\n-\n-\t  for (i = 0; i < gimple_num_ops (stmt); i++)\n-\t    {\n-\t      op = gimple_op (stmt, i);\n-\t      if (op && TREE_CODE (op) == SSA_NAME && --count < 0)\n-\t\t{\n-\t\t  error (\"number of operands and imm-links don%'t agree\"\n-\t\t\t \" in statement\");\n-\t\t  print_gimple_stmt (stderr, stmt, 0, TDF_VOPS|TDF_MEMSYMS);\n-\t\t  goto err;\n-\t\t}\n-\t    }\n+\t  if (gimple_debug_bind_p (stmt)\n+\t      && !gimple_debug_bind_has_value_p (stmt))\n+\t    continue;\n \n \t  FOR_EACH_SSA_USE_OPERAND (use_p, stmt, iter, SSA_OP_USE|SSA_OP_VUSE)\n \t    {"}]}