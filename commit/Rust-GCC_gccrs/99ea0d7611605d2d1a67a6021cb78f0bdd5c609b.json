{"sha": "99ea0d7611605d2d1a67a6021cb78f0bdd5c609b", "node_id": "C_kwDOANBUbNoAKDk5ZWEwZDc2MTE2MDVkMmQxYTY3YTYwMjFjYjc4ZjBiZGQ1YzYwOWI", "commit": {"author": {"name": "Tejas Belagod", "email": "tejas.belagod@arm.com", "date": "2022-12-15T07:57:50Z"}, "committer": {"name": "Tejas Belagod", "email": "tejas.belagod@arm.com", "date": "2023-01-20T09:43:24Z"}, "message": "AArch64: Gate various crypto intrinsics availability based on features\n\nThe 64-bit variant of PMULL{2} and AES instructions are available if FEAT_AES\nis implemented according to the Arm ARM [1].  Similarly FEAT_SHA1 and\nFEAT_SHA256 enable the use of SHA1 and SHA256 instruction variants.\nThis patch fixes arm_neon.h to correctly reflect the feature availability based\non '+aes' and '+sha2' as opposed to the ambiguous catch-all '+crypto'.\n\n[1] Section D17.2.61, C7.2.215\n\n2022-01-11  Tejas Belagod  <tejas.belagod@arm.com>\n\ngcc/ChangeLog:\n\n\t* config/aarch64/arm_neon.h (vmull_p64, vmull_high_p64, vaeseq_u8,\n\tvaesdq_u8, vaesmcq_u8, vaesimcq_u8): Gate under \"nothing+aes\".\n\t(vsha1*_u32, vsha256*_u32): Gate under \"nothing+sha2\".\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/acle/pmull64.c: New.\n\t* gcc.target/aarch64/aes-fuse-1.c: Replace '+crypto' with corresponding\n\tfeature flag based on the intrinsic.\n\t* gcc.target/aarch64/aes-fuse-2.c: Likewise.\n\t* gcc.target/aarch64/aes_1.c: Likewise.\n\t* gcc.target/aarch64/aes_2.c: Likewise.\n\t* gcc.target/aarch64/aes_xor_combine.c: Likewise.\n\t* gcc.target/aarch64/sha1_1.c: Likewise.\n\t* gcc.target/aarch64/sha256_1.c: Likewise.\n\t* gcc.target/aarch64/target_attr_crypto_ice_1.c: Likewise.", "tree": {"sha": "6e3379f80a96a2c9a6fced62ec56bd4d656ac16a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e3379f80a96a2c9a6fced62ec56bd4d656ac16a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99ea0d7611605d2d1a67a6021cb78f0bdd5c609b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99ea0d7611605d2d1a67a6021cb78f0bdd5c609b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99ea0d7611605d2d1a67a6021cb78f0bdd5c609b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99ea0d7611605d2d1a67a6021cb78f0bdd5c609b/comments", "author": {"login": "tejas-belagod-arm", "id": 92718852, "node_id": "U_kgDOBYbHBA", "avatar_url": "https://avatars.githubusercontent.com/u/92718852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tejas-belagod-arm", "html_url": "https://github.com/tejas-belagod-arm", "followers_url": "https://api.github.com/users/tejas-belagod-arm/followers", "following_url": "https://api.github.com/users/tejas-belagod-arm/following{/other_user}", "gists_url": "https://api.github.com/users/tejas-belagod-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/tejas-belagod-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tejas-belagod-arm/subscriptions", "organizations_url": "https://api.github.com/users/tejas-belagod-arm/orgs", "repos_url": "https://api.github.com/users/tejas-belagod-arm/repos", "events_url": "https://api.github.com/users/tejas-belagod-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/tejas-belagod-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tejas-belagod-arm", "id": 92718852, "node_id": "U_kgDOBYbHBA", "avatar_url": "https://avatars.githubusercontent.com/u/92718852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tejas-belagod-arm", "html_url": "https://github.com/tejas-belagod-arm", "followers_url": "https://api.github.com/users/tejas-belagod-arm/followers", "following_url": "https://api.github.com/users/tejas-belagod-arm/following{/other_user}", "gists_url": "https://api.github.com/users/tejas-belagod-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/tejas-belagod-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tejas-belagod-arm/subscriptions", "organizations_url": "https://api.github.com/users/tejas-belagod-arm/orgs", "repos_url": "https://api.github.com/users/tejas-belagod-arm/repos", "events_url": "https://api.github.com/users/tejas-belagod-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/tejas-belagod-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16bd9e14f226e07bf0ffb9d68084c9ad69bf7b45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16bd9e14f226e07bf0ffb9d68084c9ad69bf7b45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16bd9e14f226e07bf0ffb9d68084c9ad69bf7b45"}], "stats": {"total": 71, "additions": 44, "deletions": 27}, "files": [{"sha": "eeec9f162e223df8cf7803b3227aef22e94227ac", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99ea0d7611605d2d1a67a6021cb78f0bdd5c609b/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99ea0d7611605d2d1a67a6021cb78f0bdd5c609b/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=99ea0d7611605d2d1a67a6021cb78f0bdd5c609b", "patch": "@@ -7496,7 +7496,7 @@ vqrdmlshs_laneq_s32 (int32_t __a, int32_t __b, int32x4_t __c, const int __d)\n #pragma GCC pop_options\n \n #pragma GCC push_options\n-#pragma GCC target (\"+nothing+crypto\")\n+#pragma GCC target (\"+nothing+aes\")\n /* vaes  */\n \n __extension__ extern __inline uint8x16_t\n@@ -7526,6 +7526,22 @@ vaesimcq_u8 (uint8x16_t data)\n {\n   return __builtin_aarch64_crypto_aesimcv16qi_uu (data);\n }\n+\n+__extension__ extern __inline poly128_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vmull_p64 (poly64_t __a, poly64_t __b)\n+{\n+  return\n+    __builtin_aarch64_crypto_pmulldi_ppp (__a, __b);\n+}\n+\n+__extension__ extern __inline poly128_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vmull_high_p64 (poly64x2_t __a, poly64x2_t __b)\n+{\n+  return __builtin_aarch64_crypto_pmullv2di_ppp (__a, __b);\n+}\n+\n #pragma GCC pop_options\n \n /* vcage  */\n@@ -20772,7 +20788,7 @@ vrsrad_n_u64 (uint64_t __a, uint64_t __b, const int __c)\n }\n \n #pragma GCC push_options\n-#pragma GCC target (\"+nothing+crypto\")\n+#pragma GCC target (\"+nothing+sha2\")\n \n /* vsha1  */\n \n@@ -20849,21 +20865,6 @@ vsha256su1q_u32 (uint32x4_t __tw0_3, uint32x4_t __w8_11, uint32x4_t __w12_15)\n \t\t\t\t\t\t       __w12_15);\n }\n \n-__extension__ extern __inline poly128_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vmull_p64 (poly64_t __a, poly64_t __b)\n-{\n-  return\n-    __builtin_aarch64_crypto_pmulldi_ppp (__a, __b);\n-}\n-\n-__extension__ extern __inline poly128_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vmull_high_p64 (poly64x2_t __a, poly64x2_t __b)\n-{\n-  return __builtin_aarch64_crypto_pmullv2di_ppp (__a, __b);\n-}\n-\n #pragma GCC pop_options\n \n /* vshl */"}, {"sha": "6a1e99e2d0d0a49f063f442e147ad454539543cb", "filename": "gcc/testsuite/gcc.target/aarch64/acle/pmull64.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99ea0d7611605d2d1a67a6021cb78f0bdd5c609b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fpmull64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99ea0d7611605d2d1a67a6021cb78f0bdd5c609b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fpmull64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fpmull64.c?ref=99ea0d7611605d2d1a67a6021cb78f0bdd5c609b", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-march=armv8.2-a\" } */\n+\n+#pragma push_options\n+#pragma GCC target (\"+aes\")\n+\n+#include \"arm_neon.h\"\n+\n+int foo (poly64_t a, poly64_t b)\n+{\n+  return vgetq_lane_s32 (vreinterpretq_s32_p128 (vmull_p64 (a, b)), 0);\n+}\n+\n+/* { dg-final { scan-assembler \"\\tpmull\\tv\" } } */"}, {"sha": "1b4e10f78dbb9f96841f0474530f0c33aaf2fc29", "filename": "gcc/testsuite/gcc.target/aarch64/aes-fuse-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99ea0d7611605d2d1a67a6021cb78f0bdd5c609b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faes-fuse-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99ea0d7611605d2d1a67a6021cb78f0bdd5c609b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faes-fuse-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faes-fuse-1.c?ref=99ea0d7611605d2d1a67a6021cb78f0bdd5c609b", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O3 -mcpu=cortex-a72+crypto -dp\" } */\n-/* { dg-additional-options \"-march=armv8-a+crypto\" { target { aarch64*-*-* } } }*/\n+/* { dg-options \"-O3 -mcpu=cortex-a72+aes -dp\" } */\n+/* { dg-additional-options \"-march=armv8-a+aes\" { target { aarch64*-*-* } } }*/\n \n #include <arm_neon.h>\n "}, {"sha": "4c028b39083403f9c693b08e117d2ae48437405b", "filename": "gcc/testsuite/gcc.target/aarch64/aes-fuse-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99ea0d7611605d2d1a67a6021cb78f0bdd5c609b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faes-fuse-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99ea0d7611605d2d1a67a6021cb78f0bdd5c609b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faes-fuse-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faes-fuse-2.c?ref=99ea0d7611605d2d1a67a6021cb78f0bdd5c609b", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O3 -mcpu=cortex-a72+crypto -dp\" } */\n-/* { dg-additional-options \"-march=armv8-a+crypto\" { target { aarch64*-*-* } } }*/\n+/* { dg-options \"-O3 -mcpu=cortex-a72+aes -dp\" } */\n+/* { dg-additional-options \"-march=armv8-a+aes\" { target { aarch64*-*-* } } }*/\n \n #include <arm_neon.h>\n "}, {"sha": "754c4ab90e7dd192e806463ad4e5564f1440eb01", "filename": "gcc/testsuite/gcc.target/aarch64/aes_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99ea0d7611605d2d1a67a6021cb78f0bdd5c609b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faes_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99ea0d7611605d2d1a67a6021cb78f0bdd5c609b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faes_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faes_1.c?ref=99ea0d7611605d2d1a67a6021cb78f0bdd5c609b", "patch": "@@ -1,6 +1,6 @@\n \n /* { dg-do compile } */\n-/* { dg-options \"-march=armv8-a+crypto\" } */\n+/* { dg-options \"-march=armv8-a+aes\" } */\n \n #include \"arm_neon.h\"\n "}, {"sha": "442c1006706e2506cea84c1aa240355b8c628255", "filename": "gcc/testsuite/gcc.target/aarch64/aes_2.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99ea0d7611605d2d1a67a6021cb78f0bdd5c609b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faes_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99ea0d7611605d2d1a67a6021cb78f0bdd5c609b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faes_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faes_2.c?ref=99ea0d7611605d2d1a67a6021cb78f0bdd5c609b", "patch": "@@ -1,6 +1,6 @@\n \n /* { dg-do compile } */\n-/* { dg-options \"-O3 -march=armv8-a+crypto\" } */\n+/* { dg-options \"-O3 -march=armv8-a+aes\" } */\n \n #include \"arm_neon.h\"\n \n@@ -76,4 +76,6 @@ test7 (uint8x16_t a, uint8x16_t b)\n   return result;\n }\n /* { dg-final { scan-assembler-not \"mov\" } } */\n+/* { dg-final { scan-assembler \"aesd\\tv\" } } */\n+/* { dg-final { scan-assembler \"aese\\tv\" } } */\n "}, {"sha": "ee0f0e998566451c20d5162109de8e878981bf5b", "filename": "gcc/testsuite/gcc.target/aarch64/aes_xor_combine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99ea0d7611605d2d1a67a6021cb78f0bdd5c609b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faes_xor_combine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99ea0d7611605d2d1a67a6021cb78f0bdd5c609b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faes_xor_combine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faes_xor_combine.c?ref=99ea0d7611605d2d1a67a6021cb78f0bdd5c609b", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O3 -mcpu=cortex-a55+crypto\" } */\n+/* { dg-options \"-O3 -mcpu=cortex-a55+aes\" } */\n #include <arm_neon.h>\n \n #define AESE(r, v, key) (r = vaeseq_u8 ((v), (key)));"}, {"sha": "ba56c04a118d818b1dd3efc2b60a0191454c6cf0", "filename": "gcc/testsuite/gcc.target/aarch64/sha1_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99ea0d7611605d2d1a67a6021cb78f0bdd5c609b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha1_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99ea0d7611605d2d1a67a6021cb78f0bdd5c609b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha1_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha1_1.c?ref=99ea0d7611605d2d1a67a6021cb78f0bdd5c609b", "patch": "@@ -1,6 +1,6 @@\n \n /* { dg-do compile } */\n-/* { dg-options \"-march=armv8-a+crypto\" } */\n+/* { dg-options \"-march=armv8-a+sha2\" } */\n \n #include \"arm_neon.h\"\n "}, {"sha": "c3860c6b537b8cba7121579dfe5d0cb1aabe87c7", "filename": "gcc/testsuite/gcc.target/aarch64/sha256_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99ea0d7611605d2d1a67a6021cb78f0bdd5c609b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha256_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99ea0d7611605d2d1a67a6021cb78f0bdd5c609b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha256_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha256_1.c?ref=99ea0d7611605d2d1a67a6021cb78f0bdd5c609b", "patch": "@@ -1,6 +1,6 @@\n \n /* { dg-do compile } */\n-/* { dg-options \"-march=armv8-a+crypto\" } */\n+/* { dg-options \"-march=armv8-a+sha2\" } */\n \n #include \"arm_neon.h\"\n "}, {"sha": "3b354c0611092b1fb66e4a9c2098a9806c749825", "filename": "gcc/testsuite/gcc.target/aarch64/target_attr_crypto_ice_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99ea0d7611605d2d1a67a6021cb78f0bdd5c609b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_crypto_ice_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99ea0d7611605d2d1a67a6021cb78f0bdd5c609b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_crypto_ice_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_crypto_ice_1.c?ref=99ea0d7611605d2d1a67a6021cb78f0bdd5c609b", "patch": "@@ -6,7 +6,7 @@\n /* Unless we do something about re-laying out the SIMD builtin types\n    this testcase ICEs during expansion of the crypto builtin.  */\n \n-__attribute__ ((target (\"cpu=cortex-a57+crypto\")))\n+__attribute__ ((target (\"cpu=cortex-a57+sha2\")))\n uint32x4_t\n test_vsha1cq_u32 (uint32x4_t hash_abcd, uint32_t hash_e, uint32x4_t wk)\n {"}]}