{"sha": "8595a07d8d161b4c612101171f3ad423689ec020", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU5NWEwN2Q4ZDE2MWI0YzYxMjEwMTE3MWYzYWQ0MjM2ODllYzAyMA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2013-08-30T09:39:20Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2013-08-30T09:39:20Z"}, "message": "Correct previous patch to not mark terminate as LEAF.\n\n\t* class.c (build_vtbl_initializer): Drop LEAF\n\t* decl.c (cxx_init_decl_processing): Likewise.\n\t(push_throw_library_fn): Likewise.\n\t* except.c (init_exception_processing): Likewise.\n\t(do_begin_catch): Likewise.\n\t(do_end_catch): Likewise.\n\t(do_allocate_exception): Likewise.\n\nFrom-SVN: r202100", "tree": {"sha": "24d266335ab9fad0d229d01bc9ddca4713fe1216", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24d266335ab9fad0d229d01bc9ddca4713fe1216"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8595a07d8d161b4c612101171f3ad423689ec020", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8595a07d8d161b4c612101171f3ad423689ec020", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8595a07d8d161b4c612101171f3ad423689ec020", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8595a07d8d161b4c612101171f3ad423689ec020/comments", "author": null, "committer": null, "parents": [{"sha": "fafa0521c924a5627daa0b63b538c32dca4b2dce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fafa0521c924a5627daa0b63b538c32dca4b2dce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fafa0521c924a5627daa0b63b538c32dca4b2dce"}], "stats": {"total": 36, "additions": 21, "deletions": 15}, "files": [{"sha": "2af563e06dcc630086193e9ccdfb498d2fd61615", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8595a07d8d161b4c612101171f3ad423689ec020/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8595a07d8d161b4c612101171f3ad423689ec020/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8595a07d8d161b4c612101171f3ad423689ec020", "patch": "@@ -1,3 +1,14 @@\n+2013-08-29  Jan Hubicka  <jh@suse.cz>\n+\n+\tCorrect previous patch to not mark terminate as LEAF.\n+\t* class.c (build_vtbl_initializer): Drop LEAF\n+\t* decl.c (cxx_init_decl_processing): Likewise.\n+\t(push_throw_library_fn): Likewise.\n+\t* except.c (init_exception_processing): Likewise.\n+\t(do_begin_catch): Likewise.\n+\t(do_end_catch): Likewise.\n+\t(do_allocate_exception): Likewise.\n+\n 2013-08-29  Jan Hubicka  <jh@suse.cz>\n \n \t* class.c (build_vtbl_initializer): Make __cxa_deleted_virtual"}, {"sha": "bcd8076b09d75c1457cbf36c8100e0b28f2f9865", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8595a07d8d161b4c612101171f3ad423689ec020/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8595a07d8d161b4c612101171f3ad423689ec020/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=8595a07d8d161b4c612101171f3ad423689ec020", "patch": "@@ -8873,7 +8873,7 @@ build_vtbl_initializer (tree binfo,\n \t      if (!get_global_value_if_present (fn, &fn))\n \t\tfn = push_library_fn (fn, (build_function_type_list\n \t\t\t\t\t   (void_type_node, NULL_TREE)),\n-\t\t\t\t      NULL_TREE, ECF_NORETURN | ECF_LEAF);\n+\t\t\t\t      NULL_TREE, ECF_NORETURN);\n \t      if (!TARGET_VTABLE_USES_DESCRIPTORS)\n \t\tinit = fold_convert (vfunc_ptr_type_node,\n \t\t\t\t     build_fold_addr_expr (fn));"}, {"sha": "b4223aa5706358db5f57f8403e6d0dd1fa40fe92", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8595a07d8d161b4c612101171f3ad423689ec020/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8595a07d8d161b4c612101171f3ad423689ec020/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=8595a07d8d161b4c612101171f3ad423689ec020", "patch": "@@ -3816,7 +3816,7 @@ cxx_init_decl_processing (void)\n \n   abort_fndecl\n     = build_library_fn_ptr (\"__cxa_pure_virtual\", void_ftype,\n-\t\t\t    ECF_NORETURN | ECF_NOTHROW | ECF_LEAF);\n+\t\t\t    ECF_NORETURN | ECF_NOTHROW);\n \n   /* Perform other language dependent initializations.  */\n   init_class_processing ();\n@@ -4104,7 +4104,7 @@ push_void_library_fn (tree name, tree parmtypes, int ecf_flags)\n tree\n push_throw_library_fn (tree name, tree type)\n {\n-  tree fn = push_library_fn (name, type, NULL_TREE, ECF_NORETURN | ECF_LEAF);\n+  tree fn = push_library_fn (name, type, NULL_TREE, ECF_NORETURN);\n   return fn;\n }\n \f"}, {"sha": "fbebcbafdcb62167d1f706560145caf75c010ec3", "filename": "gcc/cp/except.c", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8595a07d8d161b4c612101171f3ad423689ec020/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8595a07d8d161b4c612101171f3ad423689ec020/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=8595a07d8d161b4c612101171f3ad423689ec020", "patch": "@@ -58,8 +58,7 @@ init_exception_processing (void)\n   push_namespace (std_identifier);\n   tmp = build_function_type_list (void_type_node, NULL_TREE);\n   terminate_node = build_cp_library_fn_ptr (\"terminate\", tmp,\n-\t\t\t\t\t    ECF_NOTHROW | ECF_NORETURN\n-\t\t\t\t\t    | ECF_LEAF);\n+\t\t\t\t\t   ECF_NOTHROW | ECF_NORETURN);\n   TREE_THIS_VOLATILE (terminate_node) = 1;\n   TREE_NOTHROW (terminate_node) = 1;\n   pop_namespace ();\n@@ -192,17 +191,15 @@ do_begin_catch (void)\n   if (!get_global_value_if_present (fn, &fn))\n     {\n       /* Declare void* __cxa_begin_catch (void *) throw().  */\n-      fn = declare_library_fn (fn, ptr_type_node, ptr_type_node,\n-\t\t\t       ECF_NOTHROW | ECF_LEAF);\n+      fn = declare_library_fn (fn, ptr_type_node, ptr_type_node, ECF_NOTHROW);\n \n       /* Create its transactional-memory equivalent.  */\n       if (flag_tm)\n \t{\n \t  tree fn2 = get_identifier (\"_ITM_cxa_begin_catch\");\n \t  if (!get_global_value_if_present (fn2, &fn2))\n \t    fn2 = declare_library_fn (fn2, ptr_type_node,\n-\t\t\t\t      ptr_type_node,\n-\t\t\t\t      ECF_NOTHROW | ECF_TM_PURE | ECF_LEAF);\n+\t\t\t\t      ptr_type_node, ECF_NOTHROW | ECF_TM_PURE);\n \t  record_tm_replacement (fn, fn2);\n \t}\n     }\n@@ -242,15 +239,14 @@ do_end_catch (tree type)\n     {\n       /* Declare void __cxa_end_catch ().\n          This can throw if the destructor for the exception throws.  */\n-      fn = push_void_library_fn (fn, void_list_node, ECF_LEAF);\n+      fn = push_void_library_fn (fn, void_list_node, 0);\n \n       /* Create its transactional-memory equivalent.  */\n       if (flag_tm)\n \t{\n \t  tree fn2 = get_identifier (\"_ITM_cxa_end_catch\");\n \t  if (!get_global_value_if_present (fn2, &fn2))\n-\t    fn2 = push_void_library_fn (fn2, void_list_node,\n-\t\t\t\t\tECF_TM_PURE | ECF_LEAF);\n+\t    fn2 = push_void_library_fn (fn2, void_list_node, ECF_TM_PURE);\n \t  record_tm_replacement (fn, fn2);\n \t}\n     }\n@@ -630,16 +626,15 @@ do_allocate_exception (tree type)\n     {\n       /* Declare void *__cxa_allocate_exception(size_t) throw().  */\n       fn = declare_library_fn (fn, ptr_type_node, size_type_node,\n-\t\t\t        ECF_NOTHROW | ECF_MALLOC | ECF_LEAF);\n+\t\t\t        ECF_NOTHROW | ECF_MALLOC);\n \n       if (flag_tm)\n \t{\n \t  tree fn2 = get_identifier (\"_ITM_cxa_allocate_exception\");\n \t  if (!get_global_value_if_present (fn2, &fn2))\n \t    fn2 = declare_library_fn (fn2, ptr_type_node,\n \t\t\t\t      size_type_node, \n-\t\t\t\t      ECF_NOTHROW | ECF_MALLOC | ECF_TM_PURE \n-\t\t\t\t      | ECF_LEAF);\n+\t\t\t\t      ECF_NOTHROW | ECF_MALLOC | ECF_TM_PURE);\n \t  record_tm_replacement (fn, fn2);\n \t}\n     }"}]}