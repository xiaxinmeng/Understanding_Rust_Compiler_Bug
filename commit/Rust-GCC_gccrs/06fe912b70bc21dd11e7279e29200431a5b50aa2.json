{"sha": "06fe912b70bc21dd11e7279e29200431a5b50aa2", "node_id": "C_kwDOANBUbNoAKDA2ZmU5MTJiNzBiYzIxZGQxMWU3Mjc5ZTI5MjAwNDMxYTViNTBhYTI", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-10-07T18:17:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-07T18:17:39Z"}, "message": "Merge #1572\n\n1572: AST: dump structs, unions and enums r=dafaust a=dafaust\n\n\n\nCo-authored-by: David Faust <david.faust@oracle.com>", "tree": {"sha": "fe08a6cfbb346397ac237953cd7bc6a24340e052", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe08a6cfbb346397ac237953cd7bc6a24340e052"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06fe912b70bc21dd11e7279e29200431a5b50aa2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjQG1DCRBK7hj4Ov3rIwAAKHYIABQ9o85d9BS1f3K4gs4Sci8u\nI1x0GyksFccEea6NBgWmFeW5zA26BKHiKoDFfa4kuPJWgHZtkVX+omAreeMGKLSx\n6MUkNAv+vlTZL+qYgZ09rmdvC9WFLshJ4kyQLgjlQYVSflFSSE1/HpDptww6nsx8\nAgdCtwSX7cX72deGzHUQSoVFRHuyJbv1GxlNrTmnzzmfTW8xYFLFmu9KP0UfeO0u\nKqiauVZ2XmQp5G55JWKShx8+BF/PBBulZ53/jVcTJM4UbrWMqxAJdtwzcxEd10o7\neZNqdGYYmjp8kBOkuk2RW7Ry1PHhQ4wVOJwiHz+CPkn4HejKn+K8yp36A4lCVV0=\n=bPXu\n-----END PGP SIGNATURE-----\n", "payload": "tree fe08a6cfbb346397ac237953cd7bc6a24340e052\nparent bef31ea273689021f0fc8168f417edf386060512\nparent 93937bd6582f3de40a7aefb0c639461a907b3fe1\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1665166659 +0000\ncommitter GitHub <noreply@github.com> 1665166659 +0000\n\nMerge #1572\n\n1572: AST: dump structs, unions and enums r=dafaust a=dafaust\n\n\n\nCo-authored-by: David Faust <david.faust@oracle.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06fe912b70bc21dd11e7279e29200431a5b50aa2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06fe912b70bc21dd11e7279e29200431a5b50aa2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06fe912b70bc21dd11e7279e29200431a5b50aa2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bef31ea273689021f0fc8168f417edf386060512", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bef31ea273689021f0fc8168f417edf386060512", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bef31ea273689021f0fc8168f417edf386060512"}, {"sha": "93937bd6582f3de40a7aefb0c639461a907b3fe1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93937bd6582f3de40a7aefb0c639461a907b3fe1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93937bd6582f3de40a7aefb0c639461a907b3fe1"}], "stats": {"total": 191, "additions": 170, "deletions": 21}, "files": [{"sha": "7cbdfa21fcbcb73470042f506080766ce30e8afe", "filename": "gcc/rust/ast/rust-ast-dump.cc", "status": "modified", "additions": 161, "deletions": 21, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06fe912b70bc21dd11e7279e29200431a5b50aa2/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06fe912b70bc21dd11e7279e29200431a5b50aa2/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.cc?ref=06fe912b70bc21dd11e7279e29200431a5b50aa2", "patch": "@@ -140,6 +140,39 @@ Dump::emit_indented_string (const std::string &value,\n   return stream << indentation << value << comment;\n }\n \n+void\n+Dump::emit_generic_params (std::vector<std::unique_ptr<GenericParam>> &params)\n+{\n+  stream << \"<\";\n+  for (size_t i = 0; i < params.size (); i++)\n+    {\n+      auto &param = params.at (i);\n+      param->accept_vis (*this);\n+\n+      bool has_next = (i + 1) < params.size ();\n+      if (has_next)\n+\tstream << \", \";\n+    }\n+  stream << \">\";\n+}\n+\n+void\n+Dump::format_tuple_field (TupleField &field)\n+{\n+  // TODO: do we need to emit outer attrs here?\n+  emit_visibility (field.get_visibility ());\n+  field.get_field_type ()->accept_vis (*this);\n+}\n+\n+void\n+Dump::format_struct_field (StructField &field)\n+{\n+  // TODO: do we need to emit outer attrs here?\n+  emit_visibility (field.get_visibility ());\n+  stream << field.get_field_name () << \": \";\n+  field.get_field_type ()->accept_vis (*this);\n+}\n+\n void\n Dump::visit (Token &tok)\n {}\n@@ -679,19 +712,7 @@ Dump::visit (Function &function)\n   stream << \"fn \" << function.get_function_name ();\n \n   if (function.has_generics ())\n-    {\n-      stream << \"<\";\n-      for (size_t i = 0; i < function.get_generic_params ().size (); i++)\n-\t{\n-\t  auto &param = function.get_generic_params ().at (i);\n-\t  param->accept_vis (*this);\n-\n-\t  bool has_next = (i + 1) < function.get_generic_params ().size ();\n-\t  if (has_next)\n-\t    stream << \", \";\n-\t}\n-      stream << \">\";\n-    }\n+    emit_generic_params (function.get_generic_params ());\n \n   stream << '(';\n   auto &params = function.get_function_params ();\n@@ -729,35 +750,154 @@ Dump::visit (TypeAlias &type_alias)\n \n void\n Dump::visit (StructStruct &struct_item)\n-{}\n+{\n+  stream << \"struct \" << struct_item.get_identifier ();\n+  if (struct_item.has_generics ())\n+    emit_generic_params (struct_item.get_generic_params ());\n+\n+  // FIXME: where-clause\n+\n+  stream << \" {\";\n+\n+  auto &fields = struct_item.get_fields ();\n+\n+  indentation.increment ();\n+  for (auto &field : fields)\n+    {\n+      stream << '\\n' << indentation;\n+      format_struct_field (field);\n+      stream << ',';\n+    }\n+  indentation.decrement ();\n+\n+  if (fields.size () > 0)\n+    stream << '\\n' << indentation;\n+  stream << \"}\\n\";\n+}\n \n void\n Dump::visit (TupleStruct &tuple_struct)\n-{}\n+{\n+  stream << \"struct \" << tuple_struct.get_identifier ();\n+  if (tuple_struct.has_generics ())\n+    emit_generic_params (tuple_struct.get_generic_params ());\n+\n+  // FIXME: where-clause\n+\n+  stream << '(';\n+\n+  auto &fields = tuple_struct.get_fields ();\n+  if (fields.size () >= 1)\n+    {\n+      format_tuple_field (fields[0]);\n+      for (size_t i = 1; i < fields.size (); i++)\n+\t{\n+\t  stream << \", \";\n+\t  format_tuple_field (fields[i]);\n+\t}\n+    }\n+  stream << \");\\n\";\n+}\n \n void\n Dump::visit (EnumItem &item)\n-{}\n+{\n+  stream << item.get_identifier ();\n+}\n \n void\n Dump::visit (EnumItemTuple &item)\n-{}\n+{\n+  stream << item.get_identifier () << '(';\n+  auto &fields = item.get_tuple_fields ();\n+  if (fields.size () >= 1)\n+    {\n+      format_tuple_field (fields[0]);\n+      for (size_t i = 1; i < fields.size (); i++)\n+\t{\n+\t  stream << \", \";\n+\t  format_tuple_field (fields[i]);\n+\t}\n+    }\n+  stream << ')';\n+}\n \n void\n Dump::visit (EnumItemStruct &item)\n-{}\n+{\n+  stream << item.get_identifier () << \" {\";\n+\n+  auto &fields = item.get_struct_fields ();\n+\n+  indentation.increment ();\n+  for (auto &field : fields)\n+    {\n+      stream << '\\n' << indentation;\n+      format_struct_field (field);\n+      stream << ',';\n+    }\n+  indentation.decrement ();\n+\n+  if (fields.size () > 0)\n+    stream << '\\n' << indentation;\n+  stream << '}';\n+}\n \n void\n Dump::visit (EnumItemDiscriminant &item)\n-{}\n+{\n+  stream << item.get_identifier () << \" = \";\n+  item.get_expr ()->accept_vis (*this);\n+}\n \n void\n Dump::visit (Enum &enum_item)\n-{}\n+{\n+  stream << \"enum \" << enum_item.get_identifier ();\n+  if (enum_item.has_generics ())\n+    emit_generic_params (enum_item.get_generic_params ());\n+\n+  // FIXME: where-clause\n+\n+  stream << \" {\";\n+  auto &variants = enum_item.get_variants ();\n+  if (variants.size () >= 1)\n+    {\n+      stream << '\\n';\n+      indentation.increment ();\n+      for (auto &var : variants)\n+\t{\n+\t  stream << indentation;\n+\t  var->accept_vis (*this);\n+\t  stream << \",\\n\";\n+\t}\n+      indentation.decrement ();\n+    }\n+\n+  stream << \"}\\n\";\n+}\n \n void\n Dump::visit (Union &union_item)\n-{}\n+{\n+  stream << \"union \" << union_item.get_identifier ();\n+  if (union_item.has_generics ())\n+    emit_generic_params (union_item.get_generic_params ());\n+\n+  // FIXME: where-clause\n+\n+  stream << \" {\";\n+  indentation.increment ();\n+  for (auto &field : union_item.get_variants ())\n+    {\n+      stream << '\\n' << indentation;\n+      format_struct_field (field);\n+      stream << ',';\n+    }\n+  indentation.decrement ();\n+\n+  stream << '\\n' << indentation << \"}\\n\";\n+}\n \n void\n Dump::visit (ConstantItem &const_item)"}, {"sha": "2da2736c95b767bd9d563ea651987d1ead708e6b", "filename": "gcc/rust/ast/rust-ast-dump.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06fe912b70bc21dd11e7279e29200431a5b50aa2/gcc%2Frust%2Fast%2Frust-ast-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06fe912b70bc21dd11e7279e29200431a5b50aa2/gcc%2Frust%2Fast%2Frust-ast-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.h?ref=06fe912b70bc21dd11e7279e29200431a5b50aa2", "patch": "@@ -97,6 +97,15 @@ class Dump : public ASTVisitor\n   std::ostream &emit_indented_string (const std::string &value,\n \t\t\t\t      const std::string &comment = \"\");\n \n+  // Emit formatted string for generic parameters.\n+  void emit_generic_params (std::vector<std::unique_ptr<GenericParam>> &params);\n+\n+  // Format a single field of a tuple.\n+  void format_tuple_field (TupleField &field);\n+\n+  // Format a single field of a struct.\n+  void format_struct_field (StructField &field);\n+\n   // rust-ast.h\n   void visit (Token &tok);\n   void visit (DelimTokenTree &delim_tok_tree);"}]}