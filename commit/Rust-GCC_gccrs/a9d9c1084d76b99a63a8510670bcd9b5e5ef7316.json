{"sha": "a9d9c1084d76b99a63a8510670bcd9b5e5ef7316", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTlkOWMxMDg0ZDc2Yjk5YTYzYTg1MTA2NzBiY2Q5YjVlNWVmNzMxNg==", "commit": {"author": {"name": "Geoff Keating", "email": "geoffk@ozemail.com.au", "date": "1999-03-24T00:39:44Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-03-24T00:39:44Z"}, "message": "* fold-const.c (fold): Recognise a rotate by an unsigned amount.\n\nFrom-SVN: r25937", "tree": {"sha": "f9e23ad5170412869b42e94ba91c892f28a7326e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9e23ad5170412869b42e94ba91c892f28a7326e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9d9c1084d76b99a63a8510670bcd9b5e5ef7316", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9d9c1084d76b99a63a8510670bcd9b5e5ef7316", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9d9c1084d76b99a63a8510670bcd9b5e5ef7316", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9d9c1084d76b99a63a8510670bcd9b5e5ef7316/comments", "author": null, "committer": null, "parents": [{"sha": "db4237a4cb3744c130f307431ed6bb9cafa05f7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db4237a4cb3744c130f307431ed6bb9cafa05f7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db4237a4cb3744c130f307431ed6bb9cafa05f7f"}], "stats": {"total": 56, "additions": 40, "deletions": 16}, "files": [{"sha": "d05eba8ec2f35b8683adfab61e1630eacd92e63f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9d9c1084d76b99a63a8510670bcd9b5e5ef7316/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9d9c1084d76b99a63a8510670bcd9b5e5ef7316/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a9d9c1084d76b99a63a8510670bcd9b5e5ef7316", "patch": "@@ -1,3 +1,7 @@\n+Wed Mar 24 01:35:01 1999  Geoff Keating  <geoffk@ozemail.com.au>\n+\n+\t* fold-const.c (fold): Recognise a rotate by an unsigned amount.\n+\n Tue Mar 23 23:32:14 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* pa.md (rotlsi3): New expander.  Synthesize a variable rotate"}, {"sha": "4faac0c649cb6069a079239518f966132ff5e2ba", "filename": "gcc/fold-const.c", "status": "modified", "additions": 36, "deletions": 16, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9d9c1084d76b99a63a8510670bcd9b5e5ef7316/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9d9c1084d76b99a63a8510670bcd9b5e5ef7316/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=a9d9c1084d76b99a63a8510670bcd9b5e5ef7316", "patch": "@@ -5007,6 +5007,8 @@ fold (expr)\n \n \t  tree01 = TREE_OPERAND (arg0, 1);\n \t  tree11 = TREE_OPERAND (arg1, 1);\n+\t  STRIP_NOPS (tree01);\n+\t  STRIP_NOPS (tree11);\n \t  code01 = TREE_CODE (tree01);\n \t  code11 = TREE_CODE (tree11);\n \t  if (code01 == INTEGER_CST\n@@ -5017,22 +5019,40 @@ fold (expr)\n \t      == TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (arg0, 0)))))\n \t    return build (LROTATE_EXPR, type, TREE_OPERAND (arg0, 0),\n \t\t      code0 == LSHIFT_EXPR ? tree01 : tree11);\n-\t  else if (code11 == MINUS_EXPR\n-\t\t&& TREE_CODE (TREE_OPERAND (tree11, 0)) == INTEGER_CST\n-\t\t&& TREE_INT_CST_HIGH (TREE_OPERAND (tree11, 0)) == 0\n-\t\t&& TREE_INT_CST_LOW (TREE_OPERAND (tree11, 0))\n-\t\t  == TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (arg0, 0)))\n-\t\t&& operand_equal_p (tree01, TREE_OPERAND (tree11, 1), 0))\n-\t    return build (code0 == LSHIFT_EXPR ? LROTATE_EXPR : RROTATE_EXPR,\n-\t\t\ttype, TREE_OPERAND (arg0, 0), tree01);\n-\t  else if (code01 == MINUS_EXPR\n-\t\t&& TREE_CODE (TREE_OPERAND (tree01, 0)) == INTEGER_CST\n-\t\t&& TREE_INT_CST_HIGH (TREE_OPERAND (tree01, 0)) == 0\n-\t\t&& TREE_INT_CST_LOW (TREE_OPERAND (tree01, 0))\n-\t\t  == TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (arg0, 0)))\n-\t\t&& operand_equal_p (tree11, TREE_OPERAND (tree01, 1), 0))\n-\t    return build (code0 != LSHIFT_EXPR ? LROTATE_EXPR : RROTATE_EXPR,\n-\t\t\ttype, TREE_OPERAND (arg0, 0), tree11);\n+\t  else if (code11 == MINUS_EXPR)\n+\t    {\n+\t      tree tree110, tree111;\n+\t      tree110 = TREE_OPERAND (tree11, 0);\n+\t      tree111 = TREE_OPERAND (tree11, 1);\n+\t      STRIP_NOPS (tree110);\n+\t      STRIP_NOPS (tree111);\n+\t      if (TREE_CODE (tree110) == INTEGER_CST\n+\t\t  && TREE_INT_CST_HIGH (tree110) == 0\n+\t\t  && (TREE_INT_CST_LOW (tree110)\n+\t\t      == TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (arg0, 0))))\n+\t\t  && operand_equal_p (tree01, tree111, 0))\n+\t\treturn build ((code0 == LSHIFT_EXPR \n+\t\t\t       ? LROTATE_EXPR \n+\t\t\t       : RROTATE_EXPR),\n+\t\t\t      type, TREE_OPERAND (arg0, 0), tree01);\n+\t    }\n+\t  else if (code01 == MINUS_EXPR)\n+\t    {\n+\t      tree tree010, tree011;\n+\t      tree010 = TREE_OPERAND (tree01, 0);\n+\t      tree011 = TREE_OPERAND (tree01, 1);\n+\t      STRIP_NOPS (tree010);\n+\t      STRIP_NOPS (tree011);\n+\t      if (TREE_CODE (tree010) == INTEGER_CST\n+\t\t  && TREE_INT_CST_HIGH (tree010) == 0\n+\t\t  && (TREE_INT_CST_LOW (tree010)\n+\t\t      == TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (arg0, 0))))\n+\t\t  && operand_equal_p (tree11, tree011, 0))\n+\t\treturn build ((code0 != LSHIFT_EXPR \n+\t\t\t       ? LROTATE_EXPR \n+\t\t\t       : RROTATE_EXPR),\n+\t\t\t       type, TREE_OPERAND (arg0, 0), tree11);\n+\t    }\n \t}\n \n       goto associate;"}]}