{"sha": "cc42f5f54cd6dc6c0b6b8409acb7e77dd8253c66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M0MmY1ZjU0Y2Q2ZGM2YzBiNmI4NDA5YWNiN2U3N2RkODI1M2M2Ng==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-07-26T13:27:20Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-07-26T13:27:20Z"}, "message": "builtins.def (DEF_FALLBACK_BUILTIN): Delete.\n\n\n\t* builtins.def (DEF_FALLBACK_BUILTIN): Delete.\n\t(DEF_EXT_FALLBACK_BUILTIN): Delete.\n\t(BUILT_IN_BZERO, BUILT_IN_BCOPY, BUILT_IN_BCMP): Declare using\n\tthe regular DEF_EXT_LIB_BUILTIN macro.\n\t(BUILT_IN_FPUTC, BUILT_IN_FPUTS, BUILT_IN_FWRITE): Declare using\n\tthe regular DEF_LIB_BUILTIN macro.\n\t(BUILT_IN_PUTCHAR_UNLOCKED, BUILT_IN_PUTS_UNLOCKED,\n\tBUILT_IN_FPUTC_UNLOCKED, BUILT_IN_FPUTS_UNLOCKED,\n\tBUILT_IN_FWRITE_UNLOCKED): Declare using the regular\n\tDEF_EXT_LIB_BUILTIN macro.\n\n\t* c-decl.c (duplicate_decls): Remove code to handle builtin\n\tfunctions prototyped without an argument list.\n\nFrom-SVN: r69814", "tree": {"sha": "6f32d1872bc490cd139e7966725d23ea3bc810b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f32d1872bc490cd139e7966725d23ea3bc810b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc42f5f54cd6dc6c0b6b8409acb7e77dd8253c66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc42f5f54cd6dc6c0b6b8409acb7e77dd8253c66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc42f5f54cd6dc6c0b6b8409acb7e77dd8253c66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc42f5f54cd6dc6c0b6b8409acb7e77dd8253c66/comments", "author": null, "committer": null, "parents": [{"sha": "92e7a6efaffc9b4a26754c3b0263c9b452113435", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92e7a6efaffc9b4a26754c3b0263c9b452113435", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92e7a6efaffc9b4a26754c3b0263c9b452113435"}], "stats": {"total": 158, "additions": 63, "deletions": 95}, "files": [{"sha": "f1aaa6d1a067550a731a365290b7ac9905d12b47", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc42f5f54cd6dc6c0b6b8409acb7e77dd8253c66/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc42f5f54cd6dc6c0b6b8409acb7e77dd8253c66/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cc42f5f54cd6dc6c0b6b8409acb7e77dd8253c66", "patch": "@@ -1,3 +1,19 @@\n+2003-07-26  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* builtins.def (DEF_FALLBACK_BUILTIN): Delete.\n+\t(DEF_EXT_FALLBACK_BUILTIN): Delete.\n+\t(BUILT_IN_BZERO, BUILT_IN_BCOPY, BUILT_IN_BCMP): Declare using\n+\tthe regular DEF_EXT_LIB_BUILTIN macro.\n+\t(BUILT_IN_FPUTC, BUILT_IN_FPUTS, BUILT_IN_FWRITE): Declare using\n+\tthe regular DEF_LIB_BUILTIN macro.\n+\t(BUILT_IN_PUTCHAR_UNLOCKED, BUILT_IN_PUTS_UNLOCKED,\n+\tBUILT_IN_FPUTC_UNLOCKED, BUILT_IN_FPUTS_UNLOCKED,\n+\tBUILT_IN_FWRITE_UNLOCKED): Declare using the regular\n+\tDEF_EXT_LIB_BUILTIN macro.\n+\n+\t* c-decl.c (duplicate_decls): Remove code to handle builtin\n+\tfunctions prototyped without an argument list.\n+\n 2003-07-26  Danny Smith  <dannysmith@users.sourceforge.net>\n \n \t* config/i386/winnt.c: Revert 2003-07-08 change."}, {"sha": "47cb7fc07ca820882973efbe4c018fe47fd6ca2e", "filename": "gcc/builtins.def", "status": "modified", "additions": 46, "deletions": 78, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc42f5f54cd6dc6c0b6b8409acb7e77dd8253c66/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc42f5f54cd6dc6c0b6b8409acb7e77dd8253c66/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=cc42f5f54cd6dc6c0b6b8409acb7e77dd8253c66", "patch": "@@ -70,24 +70,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n   DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,\t\\\n                false, false, false, ATTRS, true)\n \n-/* A fallback builtin is a builtin (like __builtin_puts) that falls\n-   back to the corresponding library function if necessary -- but\n-   for which we should not introduce the non-`__builtin' variant of\n-   the name.  */\n-#undef DEF_FALLBACK_BUILTIN\t\t\t\t\n-#define DEF_FALLBACK_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\\\n-  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n-\t       false, true, false, ATTRS, true)\n-\n-/* Like DEF_FALLBACK_BUILTIN, except that the function is not one that\n-   is specified by ANSI/ISO C.  So, when we're being fully conformant\n-   we ignore the version of these builtins that does not begin with\n-   __builtin.  */\n-#undef DEF_EXT_FALLBACK_BUILTIN\n-#define DEF_EXT_FALLBACK_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\\\n-  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n-\t       false, true, true, ATTRS, true)\n-\n /* A library builtin (like __builtin_strchr) is a builtin equivalent\n    of an ANSI/ISO standard library function.  In addition to the\n    `__builtin' version, we will create an ordinary version (e.g,\n@@ -273,33 +255,20 @@ DEF_C99_BUILTIN(BUILT_IN_CABSL,\n \t\tBT_FN_LONG_DOUBLE_COMPLEX_LONG_DOUBLE,\n \t\tATTR_CONST_NOTHROW_LIST)\n \n-/* The system prototypes for `bzero', 'bcopy' and `bcmp' functions\n-   have many variations, so don't specify parameters to avoid\n-   conflicts.  The expand_* functions check the argument types anyway.\n-   In addition, these functions have traditionally accepted NULL\n-   pointers when the length parameter is zero, so don't apply\n-   attribute \"nonnull\".  */\n-DEF_BUILTIN (BUILT_IN_BZERO,\n-\t     \"__builtin_bzero\",\n-\t     BUILT_IN_NORMAL,\n-\t     BT_FN_VOID_PTR_SIZE, \n-\t     BT_FN_VOID_VAR,\n-\t     true, true, true,\n-\t     ATTR_NOTHROW_LIST, false)\n-DEF_BUILTIN (BUILT_IN_BCOPY,\n-\t     \"__builtin_bcopy\",\n-\t     BUILT_IN_NORMAL,\n-\t     BT_FN_VOID_CONST_PTR_PTR_SIZE, \n-\t     BT_FN_VOID_VAR,\n-\t     true, true, true,\n-\t     ATTR_NOTHROW_LIST, false)\n-DEF_BUILTIN (BUILT_IN_BCMP,\n-\t     \"__builtin_bcmp\",\n-\t     BUILT_IN_NORMAL,\n-\t     BT_FN_INT_CONST_PTR_CONST_PTR_SIZE,\n-\t     BT_FN_INT_VAR,\n-\t     true, true, true,\n-\t     ATTR_PURE_NOTHROW_LIST, false)\n+/* These functions have traditionally accepted NULL pointers when the\n+   length parameter is zero, so don't apply attribute \"nonnull\".  */\n+DEF_EXT_LIB_BUILTIN(BUILT_IN_BZERO,\n+\t\t    \"__builtin_bzero\",\n+\t\t    BT_FN_VOID_PTR_SIZE, \n+\t\t    ATTR_NOTHROW_LIST)\n+DEF_EXT_LIB_BUILTIN(BUILT_IN_BCOPY,\n+\t\t    \"__builtin_bcopy\",\n+\t\t    BT_FN_VOID_CONST_PTR_PTR_SIZE, \n+\t\t    ATTR_NOTHROW_LIST)\n+DEF_EXT_LIB_BUILTIN(BUILT_IN_BCMP,\n+\t\t    \"__builtin_bcmp\",\n+\t\t    BT_FN_INT_CONST_PTR_CONST_PTR_SIZE,\n+\t\t    ATTR_PURE_NOTHROW_LIST)\n \n DEF_EXT_LIB_BUILTIN(BUILT_IN_FFS,\n \t\t    \"__builtin_ffs\",\n@@ -810,33 +779,33 @@ DEF_LIB_BUILTIN(BUILT_IN_VSPRINTF,\n    regular style declaration since we had to use void* instead of\n    FILE* in the __builtin_ prototype supplied here.  */\n \n-DEF_FALLBACK_BUILTIN(BUILT_IN_FPUTC,\n-\t\t     \"__builtin_fputc\",\n-\t\t     BT_FN_INT_INT_PTR,\n-\t\t     ATTR_NOTHROW_NONNULL_2)\n-DEF_BUILTIN (BUILT_IN_FPUTS,\n-\t     \"__builtin_fputs\",\n-\t     BUILT_IN_NORMAL,\n-\t     BT_FN_INT_CONST_STRING_PTR,\n-\t     BT_FN_INT_VAR,\n-\t     true, true, false, ATTR_NOTHROW_NONNULL_1_2, true)\n-DEF_FALLBACK_BUILTIN(BUILT_IN_FWRITE,\n-\t\t     \"__builtin_fwrite\",\n-\t\t     BT_FN_SIZE_CONST_PTR_SIZE_SIZE_PTR,\n-\t\t      ATTR_NOTHROW_NONNULL_1_4)\n+DEF_LIB_BUILTIN(BUILT_IN_FPUTC,\n+\t\t\"__builtin_fputc\",\n+\t\tBT_FN_INT_INT_PTR,\n+\t\tATTR_NOTHROW_NONNULL_2)\n+DEF_LIB_BUILTIN(BUILT_IN_FPUTS,\n+\t\t\"__builtin_fputs\",\n+\t\tBT_FN_INT_CONST_STRING_PTR,\n+\t\tATTR_NOTHROW_NONNULL_1_2)\n+DEF_LIB_BUILTIN(BUILT_IN_FWRITE,\n+\t\t\"__builtin_fwrite\",\n+\t\tBT_FN_SIZE_CONST_PTR_SIZE_SIZE_PTR,\n+\t\tATTR_NOTHROW_NONNULL_1_4)\n DEF_LIB_BUILTIN(BUILT_IN_FPRINTF,\n \t\t\"__builtin_fprintf\",\n \t\tBT_FN_INT_PTR_CONST_STRING_VAR,\n \t\tATTR_FORMAT_PRINTF_2_3)\n \n /* stdio unlocked builtins (without FILE *).  */\n \n-DEF_EXT_FALLBACK_BUILTIN(BUILT_IN_PUTCHAR_UNLOCKED,\n-\t\t\t \"__builtin_putchar_unlocked\",\n-\t\t\t BT_FN_INT_INT, ATTR_NOTHROW_LIST)\n-DEF_EXT_FALLBACK_BUILTIN(BUILT_IN_PUTS_UNLOCKED,\n-\t\t\t \"__builtin_puts_unlocked\",\n-\t\t\t BT_FN_INT_CONST_STRING, ATTR_NOTHROW_NONNULL_1)\n+DEF_EXT_LIB_BUILTIN(BUILT_IN_PUTCHAR_UNLOCKED,\n+\t\t    \"__builtin_putchar_unlocked\",\n+\t\t    BT_FN_INT_INT,\n+\t\t    ATTR_NOTHROW_LIST)\n+DEF_EXT_LIB_BUILTIN(BUILT_IN_PUTS_UNLOCKED,\n+\t\t    \"__builtin_puts_unlocked\",\n+\t\t    BT_FN_INT_CONST_STRING,\n+\t\t    ATTR_NOTHROW_NONNULL_1)\n DEF_EXT_LIB_BUILTIN(BUILT_IN_PRINTF_UNLOCKED,\n \t\t    \"__builtin_printf_unlocked\",\n \t\t    BT_FN_INT_CONST_STRING_VAR,\n@@ -849,19 +818,18 @@ DEF_EXT_LIB_BUILTIN(BUILT_IN_PRINTF_UNLOCKED,\n    regular style declaration since we had to use void* instead of\n    FILE* in the __builtin_ prototype supplied here.  */\n \n-DEF_EXT_FALLBACK_BUILTIN(BUILT_IN_FPUTC_UNLOCKED,\n-\t\t\t \"__builtin_fputc_unlocked\",\n-\t\t\t BT_FN_INT_INT_PTR, ATTR_NOTHROW_NONNULL_2)\n-DEF_BUILTIN (BUILT_IN_FPUTS_UNLOCKED,\n-\t     \"__builtin_fputs_unlocked\",\n-\t     BUILT_IN_NORMAL,\n-\t     BT_FN_INT_CONST_STRING_PTR,\n-\t     BT_FN_INT_VAR,\n-\t     true, true, true, ATTR_NOTHROW_NONNULL_1_2, true)\n-DEF_EXT_FALLBACK_BUILTIN(BUILT_IN_FWRITE_UNLOCKED,\n-\t\t\t \"__builtin_fwrite_unlocked\",\n-\t\t\t BT_FN_SIZE_CONST_PTR_SIZE_SIZE_PTR,\n-\t\t\t ATTR_NOTHROW_NONNULL_1_4)\n+DEF_EXT_LIB_BUILTIN(BUILT_IN_FPUTC_UNLOCKED,\n+\t\t    \"__builtin_fputc_unlocked\",\n+\t\t    BT_FN_INT_INT_PTR,\n+\t\t    ATTR_NOTHROW_NONNULL_2)\n+DEF_EXT_LIB_BUILTIN(BUILT_IN_FPUTS_UNLOCKED,\n+\t\t    \"__builtin_fputs_unlocked\",\n+\t\t    BT_FN_INT_CONST_STRING_PTR,\n+\t\t    ATTR_NOTHROW_NONNULL_1_2)\n+DEF_EXT_LIB_BUILTIN(BUILT_IN_FWRITE_UNLOCKED,\n+\t\t    \"__builtin_fwrite_unlocked\",\n+\t\t    BT_FN_SIZE_CONST_PTR_SIZE_SIZE_PTR,\n+\t\t    ATTR_NOTHROW_NONNULL_1_4)\n DEF_EXT_LIB_BUILTIN(BUILT_IN_FPRINTF_UNLOCKED,\n \t\t    \"__builtin_fprintf_unlocked\",\n \t\t    BT_FN_INT_PTR_CONST_STRING_VAR,"}, {"sha": "a9c10dc652c8a843c48535bdaec9b056e9450983", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc42f5f54cd6dc6c0b6b8409acb7e77dd8253c66/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc42f5f54cd6dc6c0b6b8409acb7e77dd8253c66/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=cc42f5f54cd6dc6c0b6b8409acb7e77dd8253c66", "patch": "@@ -861,7 +861,7 @@ duplicate_decls (tree newdecl, tree olddecl, int different_binding_level,\n \t  /* Discard the old built-in function.  */\n \t  return 0;\n \t}\n-      else if (!types_match)\n+      if (!types_match)\n \t{\n \t  /* Accept harmless mismatch in function types.\n \t     This is for the ffs and fprintf builtins.  */\n@@ -876,22 +876,6 @@ duplicate_decls (tree newdecl, tree olddecl, int different_binding_level,\n \t\tTREE_TYPE (olddecl) = oldtype;\n \t    }\n \t}\n-      else if (TYPE_ARG_TYPES (oldtype) == NULL\n-\t       && TYPE_ARG_TYPES (newtype) != NULL)\n-\t{\n-\t  /* For bcmp, bzero, fputs the builtin type has arguments not\n-\t     specified.  Use the ones from the prototype so that type checking\n-\t     is done for them.  */\n-\t  tree trytype\n-\t    = build_function_type (TREE_TYPE (oldtype),\n-\t\t\t\t   TYPE_ARG_TYPES (newtype));\n-\t  trytype = build_type_attribute_variant (trytype,\n-\t\t\t\t\t\t  TYPE_ATTRIBUTES (oldtype));\n-\n-\t  oldtype = trytype;\n-\t  if (! different_binding_level)\n-\t    TREE_TYPE (olddecl) = oldtype;\n-\t}\n       if (!types_match)\n \t{\n \t  /* If types don't match for a built-in, throw away the built-in.  */"}]}