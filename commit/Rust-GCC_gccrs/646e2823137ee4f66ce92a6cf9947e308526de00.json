{"sha": "646e2823137ee4f66ce92a6cf9947e308526de00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ2ZTI4MjMxMzdlZTRmNjZjZTkyYTZjZjk5NDdlMzA4NTI2ZGUwMA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T10:44:14Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T10:44:14Z"}, "message": "[multiple changes]\n\n2011-08-29  Thomas Quinot  <quinot@adacore.com>\n\n\t* sinfo.ads, sem_ch7.adb: Minor reformatting.\n\n2011-08-29  Bob Duff  <duff@adacore.com>\n\n\t* sem_ch4.adb (Analyze_Allocator): Check No_Nested_Finalization\n\trestriction on allocators, as required by AI05-0013-1.\n\t* restrict.ads: Minor comment fix.\n\nFrom-SVN: r178198", "tree": {"sha": "1a0e7117535e8dcb9ba10bf3e740ec4930054e94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a0e7117535e8dcb9ba10bf3e740ec4930054e94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/646e2823137ee4f66ce92a6cf9947e308526de00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/646e2823137ee4f66ce92a6cf9947e308526de00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/646e2823137ee4f66ce92a6cf9947e308526de00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/646e2823137ee4f66ce92a6cf9947e308526de00/comments", "author": null, "committer": null, "parents": [{"sha": "5d59eef2697a46611385b025252447b6117578b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d59eef2697a46611385b025252447b6117578b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d59eef2697a46611385b025252447b6117578b6"}], "stats": {"total": 41, "additions": 31, "deletions": 10}, "files": [{"sha": "9a8e2dcd4f6c88ceb35b0a0f5a0afd443376d172", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/646e2823137ee4f66ce92a6cf9947e308526de00/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/646e2823137ee4f66ce92a6cf9947e308526de00/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=646e2823137ee4f66ce92a6cf9947e308526de00", "patch": "@@ -1,3 +1,13 @@\n+2011-08-29  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sinfo.ads, sem_ch7.adb: Minor reformatting.\n+\n+2011-08-29  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Allocator): Check No_Nested_Finalization\n+\trestriction on allocators, as required by AI05-0013-1.\n+\t* restrict.ads: Minor comment fix.\n+\n 2011-08-29  Tristan Gingold  <gingold@adacore.com>\n \n \t* a-exexpr.adb, a-except-2005.ads (Jmpbuf_Address): Move to a-exexpr.adb"}, {"sha": "a9b0c068e3b747a3ba063caa427e3ffe4af69a21", "filename": "gcc/ada/restrict.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/646e2823137ee4f66ce92a6cf9947e308526de00/gcc%2Fada%2Frestrict.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/646e2823137ee4f66ce92a6cf9947e308526de00/gcc%2Fada%2Frestrict.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.ads?ref=646e2823137ee4f66ce92a6cf9947e308526de00", "patch": "@@ -39,7 +39,7 @@ package Restrict is\n    --  consistency, restrictions found in any with'ed units, parent specs\n    --  etc., since we may as well check as much as we can at compile time.\n    --  These variables should not be referenced directly by clients. Instead\n-   --  use Check_Restrictions to record a violation of a restriction, and\n+   --  use Check_Restriction to record a violation of a restriction, and\n    --  Restriction_Active to test if a given restriction is active.\n \n    Restrictions_Loc : array (All_Restrictions) of Source_Ptr :="}, {"sha": "09d5b68995f549adfc146ea1055ad2748b2297eb", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/646e2823137ee4f66ce92a6cf9947e308526de00/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/646e2823137ee4f66ce92a6cf9947e308526de00/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=646e2823137ee4f66ce92a6cf9947e308526de00", "patch": "@@ -702,6 +702,16 @@ package body Sem_Ch4 is\n          Check_Restriction (No_Task_Allocators, N);\n       end if;\n \n+      --  AI05-0013-1: No_Nested_Finalization forbids allocators if the access\n+      --  type is nested, and the designated type needs finalization. The rule\n+      --  is conservative in that class-wide types need finalization.\n+\n+      if Needs_Finalization (Designated_Type (Acc_Type))\n+        and then not Is_Library_Level_Entity (Acc_Type)\n+      then\n+         Check_Restriction (No_Nested_Finalization, N);\n+      end if;\n+\n       --  Check that an allocator of a nested access type doesn't create a\n       --  protected object when restriction No_Local_Protected_Objects applies.\n       --  We don't have an equivalent to Has_Task for protected types, so only"}, {"sha": "8cf1170df5bae2e727e938a35ed949ae98aa6a25", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/646e2823137ee4f66ce92a6cf9947e308526de00/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/646e2823137ee4f66ce92a6cf9947e308526de00/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=646e2823137ee4f66ce92a6cf9947e308526de00", "patch": "@@ -1195,7 +1195,8 @@ package body Sem_Ch7 is\n       while Present (E) loop\n \n          --  Check on incomplete types\n-         --  AI05-213 : a formal incomplete type has no completion.\n+\n+         --  AI05-0213: a formal incomplete type has no completion\n \n          if Ekind (E) = E_Incomplete_Type\n            and then No (Full_View (E))"}, {"sha": "87b018694ea5930701237cf57b81e41204f863a6", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/646e2823137ee4f66ce92a6cf9947e308526de00/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/646e2823137ee4f66ce92a6cf9947e308526de00/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=646e2823137ee4f66ce92a6cf9947e308526de00", "patch": "@@ -943,11 +943,11 @@ package Sinfo is\n    --    there is no requirement that these match, and there are obscure cases\n    --    of generated code where they do not match.\n \n-   --    Note: Aspect specifications, introduced in Ada2012, require additional\n-   --    links between identifiers and various attributes. These attributes\n-   --    can be of arbitrary types, and the entity field of identifiers that\n-   --    denote aspects must be used to store arbitrary expressions for later\n-   --    semantic checks. See section on Aspect specifications for details.\n+   --    Note: Ada 2012 aspect specifications require additional links between\n+   --    identifiers and various attributes. These attributes can be of\n+   --    arbitrary types, and the entity field of identifiers that denote\n+   --    aspects must be used to store arbitrary expressions for later semantic\n+   --    checks. See section on aspect specifications for details.\n \n    --  Entity_Or_Associated_Node (Node4-Sem)\n    --    A synonym for both Entity and Associated_Node. Used by convention in\n@@ -6237,9 +6237,9 @@ package Sinfo is\n       --  | FORMAL_INTERFACE_TYPE_DEFINITION\n       --  | FORMAL_INCOMPLETE_TYPE_DEFINITION\n \n-      --  The Ada2012 syntax introduces two new non-terminals;\n-      --  Formal_[Complete_| Incomplete_] Type_Declaration just to introduce\n-      --  the later category. Here we introduce an incomplete type definition\n+      --  The Ada 2012 syntax introduces two new non-terminals:\n+      --  Formal_{Complete,Incomplete}_Type_Declaration just to introduce\n+      --  the latter category. Here we introduce an incomplete type definition\n       --  in order to preserve as much as possible the existing structure.\n \n       ---------------------------------------------"}]}