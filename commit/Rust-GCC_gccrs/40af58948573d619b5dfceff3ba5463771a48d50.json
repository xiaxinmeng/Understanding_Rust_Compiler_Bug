{"sha": "40af58948573d619b5dfceff3ba5463771a48d50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBhZjU4OTQ4NTczZDYxOWI1ZGZjZWZmM2JhNTQ2Mzc3MWE0OGQ1MA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-11-04T17:05:38Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-11-04T17:05:38Z"}, "message": "Start adding target-specific selftests\n\ngcc/ChangeLog:\n\t* config/i386/i386.c: Include \"selftest.h\" and \"selftest-rtl.h\".\n\t(selftest::ix86_test_dumping_hard_regs): New function.\n\t(selftest::ix86_run_selftests): New function.\n\t(TARGET_RUN_TARGET_SELFTESTS): When CHECKING_P, wire this up to\n\tselftest::ix86_run_selftests.\n\t* doc/tm.texi.in (TARGET_RUN_TARGET_SELFTESTS): New.\n\t* doc/tm.texi: Regenerate\n\t* selftest-rtl.h: New file.\n\t* rtl-tests.c: Include \"selftest-rtl.h\".\n\t(selftest::assert_rtl_dump_eq): Make non-static.\n\t(ASSERT_RTL_DUMP_EQ): Move to selftest-rtl.h.\n\t(selftest::test_dumping_regs): Update comment.\n\t* selftest-run-tests.c: Include \"target.h\".\n\t(selftest::run_tests): If non-NULL, call\n\ttargetm.run_target_selftests.\n\t* target.def (run_target_selftests): New hook.\n\nFrom-SVN: r241851", "tree": {"sha": "f0c2a3dd53e078735d3c7fce70972ff6c1f0ac97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0c2a3dd53e078735d3c7fce70972ff6c1f0ac97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40af58948573d619b5dfceff3ba5463771a48d50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40af58948573d619b5dfceff3ba5463771a48d50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40af58948573d619b5dfceff3ba5463771a48d50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40af58948573d619b5dfceff3ba5463771a48d50/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d7d2e7b46753eea479159d23b6451c341f6e8f94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7d2e7b46753eea479159d23b6451c341f6e8f94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7d2e7b46753eea479159d23b6451c341f6e8f94"}], "stats": {"total": 125, "additions": 118, "deletions": 7}, "files": [{"sha": "ae6910c4267d51e5fd78e36f624f619b699a816f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40af58948573d619b5dfceff3ba5463771a48d50/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40af58948573d619b5dfceff3ba5463771a48d50/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40af58948573d619b5dfceff3ba5463771a48d50", "patch": "@@ -1,3 +1,22 @@\n+2016-11-04  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* config/i386/i386.c: Include \"selftest.h\" and \"selftest-rtl.h\".\n+\t(selftest::ix86_test_dumping_hard_regs): New function.\n+\t(selftest::ix86_run_selftests): New function.\n+\t(TARGET_RUN_TARGET_SELFTESTS): When CHECKING_P, wire this up to\n+\tselftest::ix86_run_selftests.\n+\t* doc/tm.texi.in (TARGET_RUN_TARGET_SELFTESTS): New.\n+\t* doc/tm.texi: Regenerate\n+\t* selftest-rtl.h: New file.\n+\t* rtl-tests.c: Include \"selftest-rtl.h\".\n+\t(selftest::assert_rtl_dump_eq): Make non-static.\n+\t(ASSERT_RTL_DUMP_EQ): Move to selftest-rtl.h.\n+\t(selftest::test_dumping_regs): Update comment.\n+\t* selftest-run-tests.c: Include \"target.h\".\n+\t(selftest::run_tests): If non-NULL, call\n+\ttargetm.run_target_selftests.\n+\t* target.def (run_target_selftests): New hook.\n+\n 2016-11-04  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* config/arm/arm-arches.def (armv8-m.main+dsp): Set Cortex-M33 as"}, {"sha": "bffba803eeec1080a67598f089708b11b9600a16", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40af58948573d619b5dfceff3ba5463771a48d50/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40af58948573d619b5dfceff3ba5463771a48d50/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=40af58948573d619b5dfceff3ba5463771a48d50", "patch": "@@ -80,6 +80,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"fold-const-call.h\"\n #include \"tree-vrp.h\"\n #include \"tree-ssanames.h\"\n+#include \"selftest.h\"\n+#include \"selftest-rtl.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -50610,6 +50612,33 @@ ix86_expand_divmod_libfunc (rtx libfunc, machine_mode mode,\n   *rem_p = rem;\n }\n \n+/* Target-specific selftests.  */\n+\n+#if CHECKING_P\n+\n+namespace selftest {\n+\n+/* Verify that hard regs are dumped as expected (in compact mode).  */\n+\n+static void\n+ix86_test_dumping_hard_regs ()\n+{\n+  ASSERT_RTL_DUMP_EQ (\"(reg:SI ax)\", gen_raw_REG (SImode, 0));\n+  ASSERT_RTL_DUMP_EQ (\"(reg:SI dx)\", gen_raw_REG (SImode, 1));\n+}\n+\n+/* Run all target-specific selftests.  */\n+\n+static void\n+ix86_run_selftests (void)\n+{\n+  ix86_test_dumping_hard_regs ();\n+}\n+\n+} // namespace selftest\n+\n+#endif /* CHECKING_P */\n+\n /* Initialize the GCC target structure.  */\n #undef TARGET_RETURN_IN_MEMORY\n #define TARGET_RETURN_IN_MEMORY ix86_return_in_memory\n@@ -51092,6 +51121,11 @@ ix86_expand_divmod_libfunc (rtx libfunc, machine_mode mode,\n #undef TARGET_EXPAND_DIVMOD_LIBFUNC\n #define TARGET_EXPAND_DIVMOD_LIBFUNC ix86_expand_divmod_libfunc\n \n+#if CHECKING_P\n+#undef TARGET_RUN_TARGET_SELFTESTS\n+#define TARGET_RUN_TARGET_SELFTESTS selftest::ix86_run_selftests\n+#endif /* #if CHECKING_P */\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n #include \"gt-i386.h\""}, {"sha": "e2d5e5fe346e6aa144677469b3a9f982082c0c84", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40af58948573d619b5dfceff3ba5463771a48d50/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40af58948573d619b5dfceff3ba5463771a48d50/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=40af58948573d619b5dfceff3ba5463771a48d50", "patch": "@@ -11839,3 +11839,7 @@ All and all it does not take long to convert ports that the\n maintainer is familiar with.\n \n @end defmac\n+\n+@deftypefn {Target Hook} void TARGET_RUN_TARGET_SELFTESTS (void)\n+If selftests are enabled, run any selftests for this target.\n+@end deftypefn"}, {"sha": "102ad71ac01940cd435e71780ce0a05ac4adba24", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40af58948573d619b5dfceff3ba5463771a48d50/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40af58948573d619b5dfceff3ba5463771a48d50/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=40af58948573d619b5dfceff3ba5463771a48d50", "patch": "@@ -8309,3 +8309,5 @@ All and all it does not take long to convert ports that the\n maintainer is familiar with.\n \n @end defmac\n+\n+@hook TARGET_RUN_TARGET_SELFTESTS"}, {"sha": "cf5239f92f96d3a0a4094ca063328271a28480e3", "filename": "gcc/rtl-tests.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40af58948573d619b5dfceff3ba5463771a48d50/gcc%2Frtl-tests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40af58948573d619b5dfceff3ba5463771a48d50/gcc%2Frtl-tests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl-tests.c?ref=40af58948573d619b5dfceff3ba5463771a48d50", "patch": "@@ -38,6 +38,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfgbuild.h\"\n #include \"print-rtl.h\"\n #include \"selftest.h\"\n+#include \"selftest-rtl.h\"\n #include \"function.h\"\n #include \"memmodel.h\"\n #include \"emit-rtl.h\"\n@@ -60,7 +61,7 @@ verify_print_pattern (const char *expected, rtx pat)\n /* Verify that X is dumped as EXPECTED_DUMP, using compact mode.\n    Use LOC as the effective location when reporting errors.  */\n \n-static void\n+void\n assert_rtl_dump_eq (const location &loc, const char *expected_dump, rtx x)\n {\n   named_temp_file tmp_out (\".rtl\");\n@@ -74,18 +75,13 @@ assert_rtl_dump_eq (const location &loc, const char *expected_dump, rtx x)\n   free (dump);\n }\n \n-/* Verify that RTX is dumped as EXPECTED_DUMP, using compact mode.  */\n-\n-#define ASSERT_RTL_DUMP_EQ(EXPECTED_DUMP, RTX) \\\n-  assert_rtl_dump_eq (SELFTEST_LOCATION, (EXPECTED_DUMP), (RTX))\n-\n /* Verify that regs are dumped as expected (in compact mode).  */\n \n static void\n test_dumping_regs ()\n {\n   /* Dumps of hard regs contain a target-specific name, so we don't test\n-     it here.  */\n+     it here; this can be tested in target-specific selftests.  */\n \n   /* Test dumping of virtual regs.  The various virtual regs are inited as\n      Pmode, so this is target-specific.  The tests below assume DImode, so"}, {"sha": "0f0e1673ab3288876570620525b25f49d927d284", "filename": "gcc/selftest-rtl.h", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40af58948573d619b5dfceff3ba5463771a48d50/gcc%2Fselftest-rtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40af58948573d619b5dfceff3ba5463771a48d50/gcc%2Fselftest-rtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest-rtl.h?ref=40af58948573d619b5dfceff3ba5463771a48d50", "patch": "@@ -0,0 +1,45 @@\n+/* A self-testing framework, for use by -fself-test.\n+   Copyright (C) 2016 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_SELFTEST_RTL_H\n+#define GCC_SELFTEST_RTL_H\n+\n+/* The selftest code should entirely disappear in a production\n+   configuration, hence we guard all of it with #if CHECKING_P.  */\n+\n+#if CHECKING_P\n+\n+namespace selftest {\n+\n+/* Verify that X is dumped as EXPECTED_DUMP, using compact mode.\n+   Use LOC as the effective location when reporting errors.  */\n+\n+extern void\n+assert_rtl_dump_eq (const location &loc, const char *expected_dump, rtx x);\n+\n+/* Verify that RTX is dumped as EXPECTED_DUMP, using compact mode.  */\n+\n+#define ASSERT_RTL_DUMP_EQ(EXPECTED_DUMP, RTX) \\\n+  assert_rtl_dump_eq (SELFTEST_LOCATION, (EXPECTED_DUMP), (RTX))\n+\n+} /* end of namespace selftest.  */\n+\n+#endif /* #if CHECKING_P */\n+\n+#endif /* GCC_SELFTEST_RTL_H */"}, {"sha": "76532afca66cf7ad26973110007a36c9edf71948", "filename": "gcc/selftest-run-tests.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40af58948573d619b5dfceff3ba5463771a48d50/gcc%2Fselftest-run-tests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40af58948573d619b5dfceff3ba5463771a48d50/gcc%2Fselftest-run-tests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest-run-tests.c?ref=40af58948573d619b5dfceff3ba5463771a48d50", "patch": "@@ -22,6 +22,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"selftest.h\"\n #include \"tree.h\"\n+#include \"target.h\"\n #include \"langhooks.h\"\n \n /* This function needed to be split out from selftest.c as it references\n@@ -77,6 +78,10 @@ selftest::run_tests ()\n   /* This one relies on most of the above.  */\n   function_tests_c_tests ();\n \n+  /* Run any target-specific selftests.  */\n+  if (targetm.run_target_selftests)\n+    targetm.run_target_selftests ();\n+\n   /* Run any lang-specific selftests.  */\n   lang_hooks.run_lang_selftests ();\n "}, {"sha": "c9fdfa7b4936416ff78fec72857c172dc8b156a7", "filename": "gcc/target.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40af58948573d619b5dfceff3ba5463771a48d50/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40af58948573d619b5dfceff3ba5463771a48d50/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=40af58948573d619b5dfceff3ba5463771a48d50", "patch": "@@ -6156,6 +6156,12 @@ HOOK_VECTOR_END (mode_switching)\n #include \"target-insns.def\"\n #undef DEF_TARGET_INSN\n \n+DEFHOOK\n+(run_target_selftests,\n+ \"If selftests are enabled, run any selftests for this target.\",\n+ void, (void),\n+ NULL)\n+\n /* Close the 'struct gcc_target' definition.  */\n HOOK_VECTOR_END (C90_EMPTY_HACK)\n "}]}