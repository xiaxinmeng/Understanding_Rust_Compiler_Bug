{"sha": "0d05f68547fb7478f3a210a6240d3a05465daad9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQwNWY2ODU0N2ZiNzQ3OGYzYTIxMGE2MjQwZDNhMDU0NjVkYWFkOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-06-08T18:53:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-06-08T18:53:16Z"}, "message": "re PR middle-end/81005 (-fsanitize=null and -fsanitize=alignment doesn't check aggregate arguments of calls)\n\n\tPR middle-end/81005\n\t* ubsan.c (instrument_null): Avoid pointless code temporary.\n\t(pass_ubsan::execute): Instrument aggregate arguments of calls.\n\n\t* c-c++-common/ubsan/align-10.c: New test.\n\t* c-c++-common/ubsan/null-13.c: New test.\n\nFrom-SVN: r249030", "tree": {"sha": "84461529e5d68a05a471ad1b9597446211aa204e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84461529e5d68a05a471ad1b9597446211aa204e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d05f68547fb7478f3a210a6240d3a05465daad9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d05f68547fb7478f3a210a6240d3a05465daad9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d05f68547fb7478f3a210a6240d3a05465daad9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d05f68547fb7478f3a210a6240d3a05465daad9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3159d897bda6798885f34eaaba916b46ebe2382f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3159d897bda6798885f34eaaba916b46ebe2382f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3159d897bda6798885f34eaaba916b46ebe2382f"}], "stats": {"total": 105, "additions": 103, "deletions": 2}, "files": [{"sha": "ada9d7d3688f1e7993ed7be757ed9927d8625a42", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d05f68547fb7478f3a210a6240d3a05465daad9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d05f68547fb7478f3a210a6240d3a05465daad9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d05f68547fb7478f3a210a6240d3a05465daad9", "patch": "@@ -1,3 +1,9 @@\n+2017-06-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/81005\n+\t* ubsan.c (instrument_null): Avoid pointless code temporary.\n+\t(pass_ubsan::execute): Instrument aggregate arguments of calls.\n+\n 2017-06-08  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/81015"}, {"sha": "60d3e93f7a5ad677eee8a57326ca45ffce50886b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d05f68547fb7478f3a210a6240d3a05465daad9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d05f68547fb7478f3a210a6240d3a05465daad9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0d05f68547fb7478f3a210a6240d3a05465daad9", "patch": "@@ -1,3 +1,9 @@\n+2017-06-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/81005\n+\t* c-c++-common/ubsan/align-10.c: New test.\n+\t* c-c++-common/ubsan/null-13.c: New test.\n+\n 2017-06-08  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/81015"}, {"sha": "56ae9ebfe306f4347708db2e719cc053ba437a11", "filename": "gcc/testsuite/c-c++-common/ubsan/align-10.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d05f68547fb7478f3a210a6240d3a05465daad9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d05f68547fb7478f3a210a6240d3a05465daad9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-10.c?ref=0d05f68547fb7478f3a210a6240d3a05465daad9", "patch": "@@ -0,0 +1,39 @@\n+/* Limit this to known non-strict alignment targets.  */\n+/* { dg-do run { target { i?86-*-linux* x86_64-*-linux* } } } */\n+/* { dg-options \"-O -fsanitize=alignment -fsanitize-recover=alignment\" } */\n+\n+struct R { int a; } r;\n+struct S { struct R a; char b; long long c; short d[10]; };\n+struct T { char a; long long b; };\n+struct U { char a; int b; int c; long long d; struct S e; struct T f; } __attribute__((packed));\n+struct V { long long a; struct S b; struct T c; struct U u; } v;\n+\n+__attribute__((noinline, noclone)) int\n+bar (int x, struct R y, struct R z)\n+{\n+  return x + y.a;\n+}\n+\n+__attribute__((noinline, noclone)) int\n+foo (struct S *p, struct S *q)\n+{\n+  int i = bar (0, r, r);\n+  i += bar (1, p->a, r);\n+  i += bar (2, r, q->a);\n+  return i;\n+}\n+\n+int\n+main ()\n+{\n+  char *p = (char *) &v.u.e;\n+  struct S *q, *r;\n+  asm volatile (\"\" : \"=r\" (q) : \"0\" (p));\n+  asm volatile (\"\" : \"=r\" (r) : \"0\" (p));\n+  if (foo (q, r) != 3)\n+    __builtin_abort ();\n+  return 0;\n+}\n+\n+/* { dg-output \"\\.c:21:\\[0-9]*: \\[^\\n\\r]*member access within misaligned address 0x\\[0-9a-fA-F]* for type 'struct S', which requires \\[48] byte alignment.*\" } */\n+/* { dg-output \"\\.c:22:\\[0-9]*: \\[^\\n\\r]*member access within misaligned address 0x\\[0-9a-fA-F]* for type 'struct S', which requires \\[48] byte alignment\" } */"}, {"sha": "59e0429490c7fd7707baa823bca7a636aad1d8ba", "filename": "gcc/testsuite/c-c++-common/ubsan/null-13.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d05f68547fb7478f3a210a6240d3a05465daad9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnull-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d05f68547fb7478f3a210a6240d3a05465daad9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnull-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnull-13.c?ref=0d05f68547fb7478f3a210a6240d3a05465daad9", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=null -fno-sanitize-recover=null -w\" } */\n+/* { dg-shouldfail \"ubsan\" } */\n+\n+struct S {\n+  int i;\n+  long long j;\n+  long long m;\n+};\n+union U {\n+  int k;\n+  struct S l;\n+};\n+\n+__attribute__((noinline, noclone)) int\n+foo (struct S s)\n+{\n+  return s.i + s.j + s.m;\n+}\n+\n+__attribute__((noinline, noclone)) int\n+bar (union U *u)\n+{\n+  foo (u->l);\n+}\n+\n+union U v;\n+\n+int\n+main (void)\n+{\n+  union U *u = 0;\n+  asm volatile (\"\" : \"+r\" (u) : \"r\" (&v) : \"memory\");\n+  return bar (u);\n+}\n+\n+/* { dg-output \"member access within null pointer of type 'union U'\" } */"}, {"sha": "133409a7813d8e3f1ec2d7323ce8e878f76c6f29", "filename": "gcc/ubsan.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d05f68547fb7478f3a210a6240d3a05465daad9/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d05f68547fb7478f3a210a6240d3a05465daad9/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=0d05f68547fb7478f3a210a6240d3a05465daad9", "patch": "@@ -1212,8 +1212,7 @@ instrument_null (gimple_stmt_iterator gsi, bool is_lhs)\n   if (TREE_CODE (t) == ADDR_EXPR)\n     t = TREE_OPERAND (t, 0);\n   tree base = get_base_address (t);\n-  const enum tree_code code = TREE_CODE (base);\n-  if (code == MEM_REF\n+  if (TREE_CODE (base) == MEM_REF\n       && TREE_CODE (TREE_OPERAND (base, 0)) == SSA_NAME)\n     instrument_mem_ref (t, base, &gsi, is_lhs);\n }\n@@ -2003,6 +2002,20 @@ pass_ubsan::execute (function *fun)\n \t\tinstrument_null (gsi, true);\n \t      if (gimple_assign_single_p (stmt))\n \t\tinstrument_null (gsi, false);\n+\t      if (is_gimple_call (stmt))\n+\t\t{\n+\t\t  unsigned args_num = gimple_call_num_args (stmt);\n+\t\t  for (unsigned i = 0; i < args_num; ++i)\n+\t\t    {\n+\t\t      tree arg = gimple_call_arg (stmt, i);\n+\t\t      if (is_gimple_reg (arg) || is_gimple_min_invariant (arg))\n+\t\t\tcontinue;\n+\t\t      tree base = get_base_address (arg);\n+\t\t      if (TREE_CODE (base) == MEM_REF\n+\t\t\t  && TREE_CODE (TREE_OPERAND (base, 0)) == SSA_NAME)\n+\t\t\tinstrument_mem_ref (arg, base, &gsi, false);\n+\t\t    }\n+\t\t}\n \t    }\n \n \t  if (flag_sanitize & (SANITIZE_BOOL | SANITIZE_ENUM)"}]}