{"sha": "b33a3c6451ecc09ac5f1c7ccdac9b19eb0bd1a48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjMzYTNjNjQ1MWVjYzA5YWM1ZjFjN2NjZGFjOWIxOWViMGJkMWE0OA==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2019-05-21T16:33:48Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2019-05-21T16:33:48Z"}, "message": "darwin, testsuite - fix PR 67958\n\nThese tests require specific scan-asms in some cases because\nof the different codegen for Dawin.  Added some explanations\ntoo.\n\n2019-05-21  Iain Sandoe  <iain@sandoe.co.uk>\n\n\tPR testsuite/67958\n\t* gcc.target/i386/pr32219-1.c: Adjust scan-asms for Darwin, comment\n\tthe differences.\n\t* gcc.target/i386/pr32219-2.c: Likewise.\n\t* gcc.target/i386/pr32219-3.c: Likewise.\n\t* gcc.target/i386/pr32219-4.c: Likewise.\n\t* gcc.target/i386/pr32219-5.c: Likewise.\n\t* gcc.target/i386/pr32219-6.c: Likewise.\n\t* gcc.target/i386/pr32219-7.c: Likewise.\n\t* gcc.target/i386/pr32219-8.c: Likewise.\n\nFrom-SVN: r271475", "tree": {"sha": "229a6e570f1429a7f09f8dae87803957e71fc0f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/229a6e570f1429a7f09f8dae87803957e71fc0f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b33a3c6451ecc09ac5f1c7ccdac9b19eb0bd1a48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b33a3c6451ecc09ac5f1c7ccdac9b19eb0bd1a48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b33a3c6451ecc09ac5f1c7ccdac9b19eb0bd1a48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b33a3c6451ecc09ac5f1c7ccdac9b19eb0bd1a48/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f0c354752add19ae043a9f4960bde1142adb23d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f0c354752add19ae043a9f4960bde1142adb23d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f0c354752add19ae043a9f4960bde1142adb23d"}], "stats": {"total": 118, "additions": 91, "deletions": 27}, "files": [{"sha": "8ec3ed1a5138e3bd6d7587829ad977d50c1deff8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b33a3c6451ecc09ac5f1c7ccdac9b19eb0bd1a48/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b33a3c6451ecc09ac5f1c7ccdac9b19eb0bd1a48/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b33a3c6451ecc09ac5f1c7ccdac9b19eb0bd1a48", "patch": "@@ -1,4 +1,17 @@\n-2019-05-18  Iain Sandoe  <iain@sandoe.co.uk>\n+2019-05-21  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR testsuite/67958\n+\t* gcc.target/i386/pr32219-1.c: Adjust scan-asms for Darwin, comment\n+\tthe differences.\n+\t* gcc.target/i386/pr32219-2.c: Likewise.\n+\t* gcc.target/i386/pr32219-3.c: Likewise.\n+\t* gcc.target/i386/pr32219-4.c: Likewise.\n+\t* gcc.target/i386/pr32219-5.c: Likewise.\n+\t* gcc.target/i386/pr32219-6.c: Likewise.\n+\t* gcc.target/i386/pr32219-7.c: Likewise.\n+\t* gcc.target/i386/pr32219-8.c: Likewise.\n+\n+2019-05-21  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR target/63891\n \t* gcc.dg/darwin-weakimport-3.c: Adjust options and explain"}, {"sha": "0fcb138695bb22125d654b6fcedbb47c6db69b33", "filename": "gcc/testsuite/gcc.target/i386/pr32219-1.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b33a3c6451ecc09ac5f1c7ccdac9b19eb0bd1a48/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b33a3c6451ecc09ac5f1c7ccdac9b19eb0bd1a48/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-1.c?ref=b33a3c6451ecc09ac5f1c7ccdac9b19eb0bd1a48", "patch": "@@ -12,7 +12,11 @@ foo ()\n   return xxx;\n }\n \n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]xxx\\\\(%rip\\\\), %eax\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler-not \"xxx@GOTPCREL\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]xxx@GOTOFF\\\\(%\\[^,\\]*\\\\), %eax\" { target ia32 } } } */\n-/* { dg-final { scan-assembler-not \"movl\\[ \\t\\]xxx@GOT\\\\(%\\[^,\\]*\\\\), %eax\" { target ia32 } } } */\n+/* { dg-final { scan-assembler {movl[ \\t]_?xxx\\(%rip\\),[ \\t]%eax} { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"_?xxx@GOTPCREL\" { target { ! ia32 } } } } */\n+\n+/* { dg-final { scan-assembler \"movl\\[ \\t\\]xxx@GOTOFF\\\\(%\\[^,\\]*\\\\), %eax\" { target { ia32 && { ! *-*-darwin* } } } } } */\n+/* { dg-final { scan-assembler-not \"movl\\[ \\t\\]_?xxx@GOT\\\\(%\\[^,\\]*\\\\), %eax\" { target { ia32 && { ! *-*-darwin* } } } } } */\n+\n+/* For Darwin, we default to PIC - but that's needed for Darwin's PIE.  */\n+/* { dg-final { scan-assembler {movl[ \\t]_xxx-L1\\$pb\\(%eax\\),[ \\t]%eax} { target { ia32 && *-*-darwin* } } } } */"}, {"sha": "cb587db47aaf9fba7b64c8601af291fe7068cb48", "filename": "gcc/testsuite/gcc.target/i386/pr32219-2.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b33a3c6451ecc09ac5f1c7ccdac9b19eb0bd1a48/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b33a3c6451ecc09ac5f1c7ccdac9b19eb0bd1a48/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-2.c?ref=b33a3c6451ecc09ac5f1c7ccdac9b19eb0bd1a48", "patch": "@@ -12,6 +12,13 @@ foo ()\n }\n \n /* { dg-final { scan-assembler-not \"movl\\[ \\t\\]xxx\\\\(%rip\\\\), %\" { target { ! ia32 } } } } */\n+/* For Darwin m64 we are always PIC, but common symbols are indirected, which happens to\n+   match the general \"ELF\" case.  */\n /* { dg-final { scan-assembler \"xxx@GOTPCREL\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler-not \"movl\\[ \\t\\]xxx@GOTOFF\\\\(%\\[^,\\]*\\\\), %\" { target ia32 } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]xxx@GOT\\\\(%\\[^,\\]*\\\\), %\" { target ia32 } } } */\n+\n+/* { dg-final { scan-assembler-not \"movl\\[ \\t\\]xxx@GOTOFF\\\\(%\\[^,\\]*\\\\), %\" { target { ia32 && { ! *-*-darwin* } } } } } */\n+/* { dg-final { scan-assembler \"movl\\[ \\t\\]xxx@GOT\\\\(%\\[^,\\]*\\\\), %\" { target { ia32 && { ! *-*-darwin* } } } } } */\n+\n+/* Darwin m32 defaults to PIC but common symbols need to be indirected.  */\n+/* { dg-final { scan-assembler {movl[ \\t]l_xxx\\$non_lazy_ptr-L1\\$pb\\(%eax\\),[ \\t]%eax} { target { ia32 && *-*-darwin* } } } } */\n+"}, {"sha": "f9cfca7d72c5bf7e35c76810712ac99c274bda60", "filename": "gcc/testsuite/gcc.target/i386/pr32219-3.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b33a3c6451ecc09ac5f1c7ccdac9b19eb0bd1a48/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b33a3c6451ecc09ac5f1c7ccdac9b19eb0bd1a48/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-3.c?ref=b33a3c6451ecc09ac5f1c7ccdac9b19eb0bd1a48", "patch": "@@ -12,7 +12,16 @@ foo ()\n   return xxx;\n }\n \n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]xxx\\\\(%rip\\\\), %eax\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler-not \"xxx@GOTPCREL\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]xxx@GOTOFF\\\\(%\\[^,\\]*\\\\), %eax\" { target ia32 } } } */\n-/* { dg-final { scan-assembler-not \"movl\\[ \\t\\]xxx@GOT\\\\(%\\[^,\\]*\\\\), %eax\" { target ia32 } } } */\n+/* { dg-final { scan-assembler {movl[ \\t]xxx\\(%rip\\),[ \\t]%eax} { target { { ! ia32 } && { ! *-*-darwin* } } } } } */\n+/* { dg-final { scan-assembler-not \"xxx@GOTPCREL\" { target { { ! ia32 } && { ! *-*-darwin* } } } } } */\n+\n+/* For Darwin m64, code is always PIC and we need to indirect through the GOT to allow\n+   weak symbols to be interposed.  The dynamic loader knows how to apply PIE to this.  */\n+/* { dg-final { scan-assembler {movq[ \\t]_xxx@GOTPCREL\\(%rip\\),[ \\t]%rax} { target { { ! ia32 } && *-*-darwin* } } } } */\n+\n+/* { dg-final { scan-assembler \"movl\\[ \\t\\]xxx@GOTOFF\\\\(%\\[^,\\]*\\\\), %eax\" { target { ia32 && { ! *-*-darwin* } } } } } */\n+/* { dg-final { scan-assembler-not \"movl\\[ \\t\\]xxx@GOT\\\\(%\\[^,\\]*\\\\), %eax\" { target { ia32 && { ! *-*-darwin* } } } } } */\n+\n+/* For Darwin, we need PIC to allow PIE, but also we must indirect weak symbols so that\n+   they can be indirected.  Again, dyld knows how to deal with this. */\n+/* { dg-final { scan-assembler {movl[ \\t]l_xxx\\$non_lazy_ptr-L1\\$pb\\(%eax\\),[ \\t]%eax} { target { ia32 && *-*-darwin* } } } } */"}, {"sha": "0ac0674ae179ed43c4509a086cf9420765e03eb2", "filename": "gcc/testsuite/gcc.target/i386/pr32219-4.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b33a3c6451ecc09ac5f1c7ccdac9b19eb0bd1a48/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b33a3c6451ecc09ac5f1c7ccdac9b19eb0bd1a48/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-4.c?ref=b33a3c6451ecc09ac5f1c7ccdac9b19eb0bd1a48", "patch": "@@ -13,6 +13,12 @@ foo ()\n }\n \n /* { dg-final { scan-assembler-not \"movl\\[ \\t\\]xxx\\\\(%rip\\\\), %\" { target { ! ia32 } } } } */\n+/* Darwin is always PIC for PIE so no change, weak symbols need to be indirect and this\n+   happens to match the ELF case.  */\n /* { dg-final { scan-assembler \"xxx@GOTPCREL\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler-not \"movl\\[ \\t\\]xxx@GOTOFF\\\\(%\\[^,\\]*\\\\), %\" { target ia32 } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]xxx@GOT\\\\(%\\[^,\\]*\\\\), %\" { target ia32 } } } */\n+\n+/* { dg-final { scan-assembler-not \"movl\\[ \\t\\]xxx@GOTOFF\\\\(%\\[^,\\]*\\\\), %\" { target { ia32 && { ! *-*-darwin* } } } } } */\n+/* { dg-final { scan-assembler \"movl\\[ \\t\\]xxx@GOT\\\\(%\\[^,\\]*\\\\), %\" { target { ia32 && { ! *-*-darwin* } } } } } */\n+\n+/* Darwin m32 equivalent (indirect and PIC).  */\n+/* { dg-final { scan-assembler {movl[ \\t]l_xxx\\$non_lazy_ptr-L1\\$pb\\(%eax\\),[ \\t]%eax} { target { ia32 && *-*-darwin* } } } } */"}, {"sha": "11496dc86081cec6fc6ea72f29fbaf70b83e1dc9", "filename": "gcc/testsuite/gcc.target/i386/pr32219-5.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b33a3c6451ecc09ac5f1c7ccdac9b19eb0bd1a48/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b33a3c6451ecc09ac5f1c7ccdac9b19eb0bd1a48/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-5.c?ref=b33a3c6451ecc09ac5f1c7ccdac9b19eb0bd1a48", "patch": "@@ -11,7 +11,11 @@ foo ()\n   return xxx;\n }\n \n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]xxx\\\\(%rip\\\\), %eax\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"movl\\[ \\t\\]_?xxx\\\\(%rip\\\\), %eax\" { target { ! ia32 } } } } */\n /* { dg-final { scan-assembler-not \"xxx@GOTPCREL\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]xxx@GOTOFF\\\\(%\\[^,\\]*\\\\), %eax\" { target ia32 } } } */\n-/* { dg-final { scan-assembler-not \"movl\\[ \\t\\]xxx@GOT\\\\(%\\[^,\\]*\\\\), %eax\" { target ia32 } } } */\n+\n+/* { dg-final { scan-assembler \"movl\\[ \\t\\]xxx@GOTOFF\\\\(%\\[^,\\]*\\\\), %eax\" { target { ia32 && { ! *-*-darwin* } } } } } */\n+/* { dg-final { scan-assembler-not \"movl\\[ \\t\\]xxx@GOT\\\\(%\\[^,\\]*\\\\), %eax\" { target { ia32 && { ! *-*-darwin* } } } } } */\n+\n+/* For Darwin m32, we need PIC (the default) to allow PIE.  */\n+/* { dg-final { scan-assembler {movl[ \\t]_xxx-L1\\$pb\\(%eax\\),[ \\t]%eax} { target { ia32 && *-*-darwin* } } } } */"}, {"sha": "ff41ebd399ec04f9b41552f2a93b45b729d78a45", "filename": "gcc/testsuite/gcc.target/i386/pr32219-6.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b33a3c6451ecc09ac5f1c7ccdac9b19eb0bd1a48/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b33a3c6451ecc09ac5f1c7ccdac9b19eb0bd1a48/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-6.c?ref=b33a3c6451ecc09ac5f1c7ccdac9b19eb0bd1a48", "patch": "@@ -11,7 +11,14 @@ foo ()\n   return xxx;\n }\n \n-/* { dg-final { scan-assembler-not \"movl\\[ \\t\\]xxx\\\\(%rip\\\\), %\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"xxx@GOTPCREL\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler-not \"movl\\[ \\t\\]xxx@GOTOFF\\\\(%\\[^,\\]*\\\\), %\" { target ia32 } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]xxx@GOT\\\\(%\\[^,\\]*\\\\), %\" { target ia32 } } } */\n+/* { dg-final { scan-assembler-not \"movl\\[ \\t\\]xxx\\\\(%rip\\\\), %\" { target { { ! ia32 } && { ! *-*-darwin* } } } } } */\n+/* { dg-final { scan-assembler \"xxx@GOTPCREL\" { target { { ! ia32 } && { ! *-*-darwin* } } } } } */\n+\n+/* Darwin m64 is always PIC, and the dynamic linker doesn't need an indirection.  */\n+/* { dg-final { scan-assembler {movl[ \\t]_xxx\\(%rip\\),[ \\t]%eax} { target { { ! ia32 } && *-*-darwin* } } } } */\n+\n+/* { dg-final { scan-assembler-not \"movl\\[ \\t\\]xxx@GOTOFF\\\\(%\\[^,\\]*\\\\), %\" { target { ia32 && { ! *-*-darwin* } } } } } */\n+/* { dg-final { scan-assembler \"movl\\[ \\t\\]xxx@GOT\\\\(%\\[^,\\]*\\\\), %\" { target { ia32 && { ! *-*-darwin* } } } } } */\n+\n+/* Darwin m32 defaults to PIC, so no change.  */\n+/* { dg-final { scan-assembler {movl[ \\t]_xxx-L1\\$pb\\(%eax\\),[ \\t]%eax} { target { ia32 && *-*-darwin* } } } } */"}, {"sha": "469e9e38b076e9c9aa6cfab3cdf756c21e3e70b0", "filename": "gcc/testsuite/gcc.target/i386/pr32219-7.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b33a3c6451ecc09ac5f1c7ccdac9b19eb0bd1a48/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b33a3c6451ecc09ac5f1c7ccdac9b19eb0bd1a48/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-7.c?ref=b33a3c6451ecc09ac5f1c7ccdac9b19eb0bd1a48", "patch": "@@ -12,7 +12,15 @@ foo ()\n   return xxx;\n }\n \n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]xxx\\\\(%rip\\\\), %eax\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler-not \"xxx@GOTPCREL\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]xxx@GOTOFF\\\\(%\\[^,\\]*\\\\), %eax\" { target ia32 } } } */\n-/* { dg-final { scan-assembler-not \"movl\\[ \\t\\]xxx@GOT\\\\(%\\[^,\\]*\\\\), %eax\" { target ia32 } } } */\n+/* { dg-final { scan-assembler \"movl\\[ \\t\\]xxx\\\\(%rip\\\\), %eax\" { target { { ! ia32 } && { ! *-*-darwin* } } } } } */\n+/* { dg-final { scan-assembler-not \"xxx@GOTPCREL\" { target { { ! ia32 } && { ! *-*-darwin* } } } } } */\n+\n+/* For Darwin m64, code is always PIC but we need to indirect through the GOT to allow\n+   weak symbols to be interposed.  The dynamic loader knows how to apply PIE to this.  */\n+/* { dg-final { scan-assembler {movq[ \\t]_xxx@GOTPCREL\\(%rip\\),[ \\t]%rax} { target { { ! ia32 } && *-*-darwin* } } } } */\n+\n+/* { dg-final { scan-assembler \"movl\\[ \\t\\]xxx@GOTOFF\\\\(%\\[^,\\]*\\\\), %eax\" { target { ia32 && { ! *-*-darwin* } } } } } */\n+/* { dg-final { scan-assembler-not \"movl\\[ \\t\\]xxx@GOT\\\\(%\\[^,\\]*\\\\), %eax\" { target { ia32 && { ! *-*-darwin* } } } } } */\n+\n+/* Darwin m32 equivalent (indirect and PIC).  */\n+/* { dg-final { scan-assembler {movl[ \\t]l_xxx\\$non_lazy_ptr-L1\\$pb\\(%eax\\),[ \\t]%eax} { target { ia32 && *-*-darwin* } } } } */"}, {"sha": "75eb287fc595f325d423b330c248a1b30e08284a", "filename": "gcc/testsuite/gcc.target/i386/pr32219-8.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b33a3c6451ecc09ac5f1c7ccdac9b19eb0bd1a48/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b33a3c6451ecc09ac5f1c7ccdac9b19eb0bd1a48/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-8.c?ref=b33a3c6451ecc09ac5f1c7ccdac9b19eb0bd1a48", "patch": "@@ -13,6 +13,12 @@ foo ()\n }\n \n /* { dg-final { scan-assembler-not \"movl\\[ \\t\\]xxx\\\\(%rip\\\\), %\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"xxx@GOTPCREL\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler-not \"movl\\[ \\t\\]xxx@GOTOFF\\\\(%\\[^,\\]*\\\\), %\" { target ia32 } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]xxx@GOT\\\\(%\\[^,\\]*\\\\), %\" { target ia32 } } } */\n+/* Darwin is always PIC so no change, weak symbols needs to be indirect and this\n+   happens to match the ELF case.  */\n+/* { dg-final { scan-assembler \"_?xxx@GOTPCREL\" { target { ! ia32 } } } } */\n+\n+/* { dg-final { scan-assembler-not \"movl\\[ \\t\\]xxx@GOTOFF\\\\(%\\[^,\\]*\\\\), %\" { target { ia32 && { ! *-*-darwin* } } } } } */\n+/* { dg-final { scan-assembler \"movl\\[ \\t\\]xxx@GOT\\\\(%\\[^,\\]*\\\\), %\" { target { ia32 && { ! *-*-darwin* } } } } } */\n+\n+/* Darwin m32 default to PIC but needs indirection for the weak symbol.  */\n+/* { dg-final { scan-assembler {movl[ \\t]l_xxx\\$non_lazy_ptr-L1\\$pb\\(%eax\\),[ \\t]%eax} { target { ia32 && *-*-darwin* } } } } */"}]}