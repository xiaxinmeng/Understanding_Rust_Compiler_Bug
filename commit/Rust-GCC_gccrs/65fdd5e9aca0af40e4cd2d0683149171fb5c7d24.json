{"sha": "65fdd5e9aca0af40e4cd2d0683149171fb5c7d24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVmZGQ1ZTlhY2EwYWY0MGU0Y2QyZDA2ODMxNDkxNzFmYjVjN2QyNA==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2017-05-13T14:40:53Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-05-13T14:40:53Z"}, "message": "mn10300.c (mn10300_match_ccmode): Fix where we look for cc setter after the compare-elim changes.\n\n2017-05-12  Jeff Law  <law@redhat.com>\n\t    Jakub Jelinek  <jakub@redhat.com>\n\n\t* config/mn10300/mn10300.c (mn10300_match_ccmode): Fix where\n\twe look for cc setter after the compare-elim changes.\n\t* config/mn10300/mn10300.md (addsi3_flags): Fix order of patterns\n\twithin the vector to match what compare-elim now expects.\n\t(subsi3_flags, andsi3_flags, iorsi3_flags): Likewise.\n\t(xorsi3_flags, one_cmplsi2_flags): Likewise.\n\n\t* config/rx/rx.c (rx_match_ccmode): Fix where we look cc setter\n\tafter the compare-elim changes.\n\t* config/rx/rx.md (abssi2_flags): Fix order of patterns within\n\tthe vector to match what compare-elim now expects.\n\t(addsi3_flags, adc_flags, addsi3_flags peepholes): Likewise.\n\t(andsi3_flags, negsi2_flags, one_cmplsi2_flags): Likewise.\n\t(iorsi3_flags, rotlsi3_flags, rotrsi3_flags): Likewise.\n\t(ashrsi3_flags, lshrsi3_flags, ashlsi3_flags): Likewise.\n\t(ssaddsi3, subsi3_flags, sbb_flags, xorsi3_flags): Likewise.\n\n\t* config/visium/visium.c (single_set_and_flags): Fix where\n\twe look for cc setter after the compare-elim changes.\n\t* config/visium/visium.md (flags_subst_logic): Fix order of patterns\n\twith the vector to match what compare-elim now expects.\n\t(flags_subst_arith, add<mode>3_insn_set_carry): Likewise.\n\t(add<mode>3_insn_set_overflow, addsi3_insn_set_carry): Likewise.\n\t(addsi3_insn_set_overflow, sub<mode>3_insn_set_carry): Likewise.\n\t(sub<mode>3_insn_set_overflow, subsi3_insn_set_carry): Likewise.\n\t(subsi3_insn_set_overflow, negsi2_insn_set_carry): Likewise.\n\t(neg<mode>2_insn_set_overflow): Likewise.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r248007", "tree": {"sha": "9cfd76fb9df43a1713b5f9b83887eceba8ea0db8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cfd76fb9df43a1713b5f9b83887eceba8ea0db8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65fdd5e9aca0af40e4cd2d0683149171fb5c7d24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65fdd5e9aca0af40e4cd2d0683149171fb5c7d24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65fdd5e9aca0af40e4cd2d0683149171fb5c7d24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65fdd5e9aca0af40e4cd2d0683149171fb5c7d24/comments", "author": null, "committer": null, "parents": [{"sha": "c7488b4ffb7b91c9fe9b2eeddda30f818351f535", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7488b4ffb7b91c9fe9b2eeddda30f818351f535", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7488b4ffb7b91c9fe9b2eeddda30f818351f535"}], "stats": {"total": 498, "additions": 266, "deletions": 232}, "files": [{"sha": "b144a538bef82478d6210d3a6eca331aee857c91", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65fdd5e9aca0af40e4cd2d0683149171fb5c7d24/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65fdd5e9aca0af40e4cd2d0683149171fb5c7d24/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=65fdd5e9aca0af40e4cd2d0683149171fb5c7d24", "patch": "@@ -1,3 +1,34 @@\n+2017-05-12  Jeff Law  <law@redhat.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/mn10300/mn10300.c (mn10300_match_ccmode): Fix where\t\n+\twe look for cc setter after the compare-elim changes.\n+\t* config/mn10300/mn10300.md (addsi3_flags): Fix order of patterns\n+\twithin the vector to match what compare-elim now expects.\n+\t(subsi3_flags, andsi3_flags, iorsi3_flags): Likewise.\n+\t(xorsi3_flags, one_cmplsi2_flags): Likewise.\n+\n+\t* config/rx/rx.c (rx_match_ccmode): Fix where we look cc setter\n+\tafter the compare-elim changes.\n+\t* config/rx/rx.md (abssi2_flags): Fix order of patterns within\n+\tthe vector to match what compare-elim now expects.\n+\t(addsi3_flags, adc_flags, addsi3_flags peepholes): Likewise.\n+\t(andsi3_flags, negsi2_flags, one_cmplsi2_flags): Likewise.\n+\t(iorsi3_flags, rotlsi3_flags, rotrsi3_flags): Likewise.\n+\t(ashrsi3_flags, lshrsi3_flags, ashlsi3_flags): Likewise.\n+\t(ssaddsi3, subsi3_flags, sbb_flags, xorsi3_flags): Likewise.\n+\n+\t* config/visium/visium.c (single_set_and_flags): Fix where\n+\twe look for cc setter after the compare-elim changes.\n+\t* config/visium/visium.md (flags_subst_logic): Fix order of patterns\n+\twith the vector to match what compare-elim now expects.\n+\t(flags_subst_arith, add<mode>3_insn_set_carry): Likewise.\n+\t(add<mode>3_insn_set_overflow, addsi3_insn_set_carry): Likewise.\n+\t(addsi3_insn_set_overflow, sub<mode>3_insn_set_carry): Likewise.\n+\t(sub<mode>3_insn_set_overflow, subsi3_insn_set_carry): Likewise.\n+\t(subsi3_insn_set_overflow, negsi2_insn_set_carry): Likewise.\n+\t(neg<mode>2_insn_set_overflow): Likewise.\n+\n 2017-05-12  Jim Wilson  <jim.wilson@linaro.org>\n \n \tPR middle-end/79794"}, {"sha": "301207fa66a333983ca556e32ae36f9ac2fb0f17", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65fdd5e9aca0af40e4cd2d0683149171fb5c7d24/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65fdd5e9aca0af40e4cd2d0683149171fb5c7d24/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=65fdd5e9aca0af40e4cd2d0683149171fb5c7d24", "patch": "@@ -2895,7 +2895,7 @@ mn10300_match_ccmode (rtx insn, machine_mode cc_mode)\n \n   gcc_checking_assert (XVECLEN (PATTERN (insn), 0) == 2);\n \n-  op1 = XVECEXP (PATTERN (insn), 0, 1);\n+  op1 = XVECEXP (PATTERN (insn), 0, 0);\n   gcc_checking_assert (GET_CODE (SET_SRC (op1)) == COMPARE);\n \n   flags = SET_DEST (op1);"}, {"sha": "b4bd2795687b413cc4d8cb65e53a42555d632469", "filename": "gcc/config/mn10300/mn10300.md", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65fdd5e9aca0af40e4cd2d0683149171fb5c7d24/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65fdd5e9aca0af40e4cd2d0683149171fb5c7d24/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.md?ref=65fdd5e9aca0af40e4cd2d0683149171fb5c7d24", "patch": "@@ -592,25 +592,25 @@\n \n ;; Note that ADD IMM,SP does not set the flags, so omit that here.\n (define_insn \"*addsi3_flags\"\n-  [(set (match_operand:SI          0 \"register_operand\"  \"=r,!r\")\n-  \t(plus:SI (match_operand:SI 1 \"register_operand\"  \"%0, r\")\n-\t\t (match_operand:SI 2 \"nonmemory_operand\" \"ri, r\")))\n-   (set (reg CC_REG)\n-   \t(compare (plus:SI (match_dup 1) (match_dup 2))\n-\t\t (const_int 0)))]\n+  [(set (reg CC_REG)\n+   \t(compare (plus:SI (match_operand:SI 1 \"register_operand\"  \"%0, r\")\n+\t\t\t  (match_operand:SI 2 \"nonmemory_operand\" \"ri, r\"))\n+\t\t (const_int 0)))\n+   (set (match_operand:SI          0 \"register_operand\"  \"=r,!r\")\n+  \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"reload_completed && mn10300_match_ccmode (insn, CCZNCmode)\"\n   { return mn10300_output_add (operands, true); }\n   [(set_attr \"timings\" \"11,22\")]\n )\n \n ;; A helper to expand the above, with the CC_MODE filled in.\n (define_expand \"addsi3_flags\"\n-  [(parallel [(set (match_operand:SI 0 \"register_operand\")\n-\t\t   (plus:SI (match_operand:SI 1 \"register_operand\")\n-\t\t\t    (match_operand:SI 2 \"nonmemory_operand\")))\n-\t      (set (reg:CCZNC CC_REG)\n+  [(parallel [(set (reg:CCZNC CC_REG)\n \t\t   (compare:CCZNC (plus:SI (match_dup 1) (match_dup 2))\n-\t\t\t\t  (const_int 0)))])]\n+\t\t\t\t  (const_int 0)))\n+\t      (set (match_operand:SI 0 \"register_operand\")\n+\t\t   (plus:SI (match_operand:SI 1 \"register_operand\")\n+\t\t\t    (match_operand:SI 2 \"nonmemory_operand\")))])]\n   \"\"\n )\n \n@@ -791,12 +791,12 @@\n )\n \n (define_insn \"*subsi3_flags\"\n-  [(set (match_operand:SI           0 \"register_operand\"  \"=r, r\")\n-\t(minus:SI (match_operand:SI 1 \"register_operand\"   \"0, r\")\n-\t\t  (match_operand:SI 2 \"nonmemory_operand\"  \"ri,r\")))\n-   (set (reg CC_REG)\n-   \t(compare (minus:SI (match_dup 1) (match_dup 2))\n-\t\t (const_int 0)))]\n+  [(set (reg CC_REG)\n+   \t(compare (minus:SI (match_operand:SI 1 \"register_operand\"  \"0, r\")\n+\t\t\t   (match_operand:SI 2 \"nonmemory_operand\" \"ri,r\"))\n+\t\t (const_int 0)))\n+   (set (match_operand:SI           0 \"register_operand\"  \"=r, r\")\n+\t(minus:SI (match_dup 1) (match_dup 2)))]\n   \"reload_completed && mn10300_match_ccmode (insn, CCZNCmode)\"\n   \"@\n    sub %2,%0\n@@ -807,12 +807,12 @@\n \n ;; A helper to expand the above, with the CC_MODE filled in.\n (define_expand \"subsi3_flags\"\n-  [(parallel [(set (match_operand:SI 0 \"register_operand\")\n-\t\t   (minus:SI (match_operand:SI 1 \"register_operand\")\n-\t\t\t     (match_operand:SI 2 \"nonmemory_operand\")))\n-\t      (set (reg:CCZNC CC_REG)\n+  [(parallel [(set (reg:CCZNC CC_REG)\n \t\t   (compare:CCZNC (minus:SI (match_dup 1) (match_dup 2))\n-\t\t\t\t  (const_int 0)))])]\n+\t\t\t\t  (const_int 0)))\n+\t      (set (match_operand:SI 0 \"register_operand\")\n+\t\t   (minus:SI (match_operand:SI 1 \"register_operand\")\n+\t\t\t     (match_operand:SI 2 \"nonmemory_operand\")))])]\n   \"\"\n )\n \n@@ -1195,12 +1195,12 @@\n )\n \n (define_insn \"*andsi3_flags\"\n-  [(set (match_operand:SI         0 \"register_operand\"  \"=D,D,r\")\n-\t(and:SI (match_operand:SI 1 \"register_operand\"  \"%0,0,r\")\n-\t\t(match_operand:SI 2 \"nonmemory_operand\" \" i,D,r\")))\n-   (set (reg CC_REG)\n-   \t(compare (and:SI (match_dup 1) (match_dup 2))\n-\t\t (const_int 0)))]\n+  [(set (reg CC_REG)\n+   \t(compare (and:SI (match_operand:SI 1 \"register_operand\"  \"%0,0,r\")\n+\t\t\t (match_operand:SI 2 \"nonmemory_operand\" \" i,D,r\"))\n+\t\t (const_int 0)))\n+   (set (match_operand:SI         0 \"register_operand\"  \"=D,D,r\")\n+\t(and:SI (match_dup 1) (match_dup 2)))]\n   \"reload_completed && mn10300_match_ccmode (insn, CCZNmode)\"\n   \"@\n    and %2,%0\n@@ -1282,12 +1282,12 @@\n )\n \n (define_insn \"*iorsi3_flags\"\n-  [(set (match_operand:SI         0 \"register_operand\"  \"=D,D,r\")\n-\t(ior:SI (match_operand:SI 1 \"register_operand\"  \"%0,0,r\")\n-\t\t(match_operand:SI 2 \"nonmemory_operand\" \" i,D,r\")))\n-   (set (reg CC_REG)\n-   \t(compare (ior:SI (match_dup 1) (match_dup 2))\n-\t\t (const_int 0)))]\n+  [(set (reg CC_REG)\n+   \t(compare (ior:SI (match_operand:SI 1 \"register_operand\"  \"%0,0,r\")\n+\t\t\t (match_operand:SI 2 \"nonmemory_operand\" \" i,D,r\"))\n+\t\t (const_int 0)))\n+   (set (match_operand:SI         0 \"register_operand\"  \"=D,D,r\")\n+\t(ior:SI (match_dup 1) (match_dup 2)))]\n   \"reload_completed && mn10300_match_ccmode (insn, CCZNmode)\"\n   \"@\n    or %2,%0\n@@ -1318,12 +1318,12 @@\n )\n \n (define_insn \"*xorsi3_flags\"\n-  [(set (match_operand:SI         0 \"register_operand\"  \"=D,D,r\")\n-\t(xor:SI (match_operand:SI 1 \"register_operand\"  \"%0,0,r\")\n-\t\t(match_operand:SI 2 \"nonmemory_operand\" \" i,D,r\")))\n-   (set (reg CC_REG)\n-   \t(compare (xor:SI (match_dup 1) (match_dup 2))\n-\t\t (const_int 0)))]\n+  [(set (reg CC_REG)\n+   \t(compare (xor:SI (match_operand:SI 1 \"register_operand\"  \"%0,0,r\")\n+\t\t\t (match_operand:SI 2 \"nonmemory_operand\" \" i,D,r\"))\n+\t\t (const_int 0)))\n+   (set (match_operand:SI         0 \"register_operand\"  \"=D,D,r\")\n+\t(xor:SI (match_dup 1) (match_dup 2)))]\n   \"reload_completed && mn10300_match_ccmode (insn, CCZNmode)\"\n   \"@\n    xor %2,%0\n@@ -1346,11 +1346,11 @@\n )\n \n (define_insn \"*one_cmplsi2_flags\"\n-  [(set (match_operand:SI         0 \"register_operand\" \"=D\")\n-\t(not:SI (match_operand:SI 1 \"register_operand\" \" 0\")))\n-   (set (reg CC_REG)\n-   \t(compare (not:SI (match_dup 1))\n-\t\t (const_int 0)))]\n+  [(set (reg CC_REG)\n+   \t(compare (not:SI (match_operand:SI 1 \"register_operand\" \"0\"))\n+\t\t (const_int 0)))\n+   (set (match_operand:SI         0 \"register_operand\" \"=D\")\n+\t(not:SI (match_dup 1)))]\n   \"reload_completed && mn10300_match_ccmode (insn, CCZNmode)\"\n   \"not %0\"\n )"}, {"sha": "9d512b8959bbeef92b2e7cd39873f41f5249a367", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65fdd5e9aca0af40e4cd2d0683149171fb5c7d24/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65fdd5e9aca0af40e4cd2d0683149171fb5c7d24/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=65fdd5e9aca0af40e4cd2d0683149171fb5c7d24", "patch": "@@ -3205,7 +3205,7 @@ rx_match_ccmode (rtx insn, machine_mode cc_mode)\n \n   gcc_checking_assert (XVECLEN (PATTERN (insn), 0) == 2);\n \n-  op1 = XVECEXP (PATTERN (insn), 0, 1);\n+  op1 = XVECEXP (PATTERN (insn), 0, 0);\n   gcc_checking_assert (GET_CODE (SET_SRC (op1)) == COMPARE);\n \n   flags = SET_DEST (op1);"}, {"sha": "bd74fe88b747eb1d155e29d0432bd19118a46538", "filename": "gcc/config/rx/rx.md", "status": "modified", "additions": 122, "deletions": 120, "changes": 242, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65fdd5e9aca0af40e4cd2d0683149171fb5c7d24/gcc%2Fconfig%2Frx%2Frx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65fdd5e9aca0af40e4cd2d0683149171fb5c7d24/gcc%2Fconfig%2Frx%2Frx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.md?ref=65fdd5e9aca0af40e4cd2d0683149171fb5c7d24", "patch": "@@ -843,11 +843,11 @@\n )\n \n (define_insn \"*abssi2_flags\"\n-  [(set (match_operand:SI         0 \"register_operand\" \"=r,r\")\n-        (abs:SI (match_operand:SI 1 \"register_operand\"  \"0,r\")))\n-   (set (reg CC_REG)\n-\t(compare (abs:SI (match_dup 1))\n-\t\t (const_int 0)))]\n+  [(set (reg CC_REG)\n+        (compare (abs:SI (match_operand:SI 1 \"register_operand\"  \"0,r\"))\n+\t\t (const_int 0)))\n+   (set (match_operand:SI\t\t   0 \"register_operand\" \"=r,r\")\n+\t(abs:SI (match_dup 1)))]\n   ;; Note - although the ABS instruction does set the O bit in the processor\n   ;; status word, it does not do so in a way that is comparable with the CMP\n   ;; instruction.  Hence we use CC_ZSmode rather than CC_ZSOmode.\n@@ -897,12 +897,12 @@\n )\n \n (define_insn \"*addsi3_flags\"\n-  [(set (match_operand:SI          0 \"register_operand\"  \"=r,r,r,r,r,r,r,r,r,r,r,r,r,r\")\n-\t(plus:SI (match_operand:SI 1 \"register_operand\"  \"%0,0,0,0,0,0,0,r,r,r,r,r,r,0\")\n-\t\t (match_operand:SI 2 \"rx_source_operand\" \"r,Uint04,NEGint4,Sint08,Sint16,Sint24,i,0,r,Sint08,Sint16,Sint24,i,Q\")))\n-   (set (reg CC_REG)\n-\t(compare (plus:SI (match_dup 1) (match_dup 2))\n-\t\t (const_int 0)))]\n+  [(set (reg CC_REG)\n+\t(compare (plus:SI (match_operand:SI 1 \"register_operand\"  \"%0,0,0,0,0,0,0,r,r,r,r,r,r,0\")\n+\t\t\t  (match_operand:SI 2 \"rx_source_operand\" \"r,Uint04,NEGint4,Sint08,Sint16,Sint24,i,0,r,Sint08,Sint16,Sint24,i,Q\"))\n+\t\t (const_int 0)))\n+   (set (match_operand:SI\t\t    0 \"register_operand\"  \"=r,r,r,r,r,r,r,r,r,r,r,r,r,r\")\n+\t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"reload_completed && rx_match_ccmode (insn, CC_ZSCmode)\"\n   \"@\n   add\\t%2, %0\n@@ -925,12 +925,13 @@\n \n ;; A helper to expand the above with the CC_MODE filled in.\n (define_expand \"addsi3_flags\"\n-  [(parallel [(set (match_operand:SI 0 \"register_operand\")\n-\t\t   (plus:SI (match_operand:SI 1 \"register_operand\")\n-\t\t\t    (match_operand:SI 2 \"rx_source_operand\")))\n-\t      (set (reg:CC_ZSC CC_REG)\n-\t\t   (compare:CC_ZSC (plus:SI (match_dup 1) (match_dup 2))\n-\t\t\t\t   (const_int 0)))])]\n+  [(parallel [(set (reg:CC_ZSC CC_REG)\n+\t\t   (compare:CC_ZSC\n+\t\t     (plus:SI (match_operand:SI 1 \"register_operand\")\n+\t\t\t      (match_operand:SI 2 \"rx_source_operand\"))\n+\t\t     (const_int 0)))\n+\t      (set (match_operand:SI 0 \"register_operand\")\n+\t\t   (plus:SI (match_dup 1) (match_dup 2)))])]\n )\n \n (define_insn \"adc_internal\"\n@@ -948,20 +949,20 @@\n )\n \n (define_insn \"*adc_flags\"\n-  [(set (match_operand:SI     0 \"register_operand\"  \"=r,r,r,r,r,r\")\n-\t(plus:SI\n-\t  (plus:SI\n-\t    (ltu:SI (reg:CC CC_REG) (const_int 0))\n-\t    (match_operand:SI 1 \"register_operand\"  \"%0,0,0,0,0,0\"))\n-\t  (match_operand:SI   2 \"rx_source_operand\" \"r,Sint08,Sint16,Sint24,i,Q\")))\n-   (set (reg CC_REG)\n-\t(compare \n+  [(set (reg CC_REG)\n+\t(compare\n \t  (plus:SI\n \t    (plus:SI\n \t      (ltu:SI (reg:CC CC_REG) (const_int 0))\n-\t      (match_dup 1))\n-\t    (match_dup 2))\n-\t  (const_int 0)))]\n+\t      (match_operand:SI 1 \"register_operand\"  \"%0,0,0,0,0,0\"))\n+\t    (match_operand:SI   2 \"rx_source_operand\" \"r,Sint08,Sint16,Sint24,i,Q\"))\n+\t  (const_int 0)))\n+   (set (match_operand:SI\t0 \"register_operand\"  \"=r,r,r,r,r,r\")\n+\t(plus:SI\n+\t  (plus:SI\n+\t    (ltu:SI (reg:CC CC_REG) (const_int 0))\n+\t    (match_dup 1))\n+\t  (match_dup 2)))]\n   \"reload_completed && rx_match_ccmode (insn, CC_ZSCmode)\"\n   \"adc\\t%2, %0\"\n   [(set_attr \"timings\" \"11,11,11,11,11,33\")\n@@ -980,11 +981,11 @@\n         (compare:CC (match_dup 0)\n                     (const_int 0)))]\n   \"\"\n-  [(parallel [(set (match_dup 0)\n-\t\t   (plus:SI (match_dup 1) (const_int 0)))\n-\t      (set (reg:CC_ZSC CC_REG)\n+  [(parallel [(set (reg:CC_ZSC CC_REG)\n \t\t   (compare:CC_ZSC (plus:SI (match_dup 1) (const_int 0))\n-\t\t\t\t   (const_int 0)))])]\n+\t\t\t\t   (const_int 0)))\n+\t      (set (match_dup 0)\n+\t\t   (plus:SI (match_dup 1) (const_int 0))) ])]\n )\n \n (define_peephole2\n@@ -994,11 +995,11 @@\n         (compare:CC (match_dup 1)\n                     (const_int 0)))]\n   \"\"\n-  [(parallel [(set (match_dup 0)\n-\t\t   (plus:SI (match_dup 1) (const_int 0)))\n-\t      (set (reg:CC_ZSC CC_REG)\n+  [(parallel [(set (reg:CC_ZSC CC_REG)\n \t\t   (compare:CC_ZSC (plus:SI (match_dup 1) (const_int 0))\n-\t\t\t\t   (const_int 0)))])]\n+\t\t\t\t   (const_int 0)))\n+\t      (set (match_dup 0)\n+\t\t   (plus:SI (match_dup 1) (const_int 0)))])]\n )\n \n (define_expand \"adddi3\"\n@@ -1109,12 +1110,12 @@\n )\n \n (define_insn \"*andsi3_flags\"\n-  [(set (match_operand:SI         0 \"register_operand\"  \"=r,r,r,r,r,r,r,r,r\")\n-\t(and:SI (match_operand:SI 1 \"register_operand\"  \"%0,0,0,0,0,0,r,r,0\")\n-\t\t(match_operand:SI 2 \"rx_source_operand\" \"r,Uint04,Sint08,Sint16,Sint24,i,0,r,Q\")))\n-   (set (reg CC_REG)\n-\t(compare (and:SI (match_dup 1) (match_dup 2))\n-\t\t (const_int 0)))]\n+  [(set (reg CC_REG)\n+\t(compare (and:SI (match_operand:SI 1 \"register_operand\"  \"%0,0,0,0,0,0,r,r,0\")\n+\t\t\t (match_operand:SI 2 \"rx_source_operand\" \"r,Uint04,Sint08,Sint16,Sint24,i,0,r,Q\"))\n+\t\t (const_int 0)))\n+   (set (match_operand:SI\t\t   0 \"register_operand\"  \"=r,r,r,r,r,r,r,r,r\")\n+\t(and:SI (match_dup 1) (match_dup 2)))]\n   \"reload_completed && rx_match_ccmode (insn, CC_ZSmode)\"\n   \"@\n   and\\t%2, %0\n@@ -1341,11 +1342,11 @@\n ;; Note that the O and C flags are not set as per a normal compare,\n ;; and thus are unusable in that context.\n (define_insn \"*negsi2_flags\"\n-  [(set (match_operand:SI         0 \"register_operand\" \"=r,r\")\n-        (neg:SI (match_operand:SI 1 \"register_operand\"  \"0,r\")))\n-   (set (reg CC_REG)\n-\t(compare (neg:SI (match_dup 1))\n-\t\t (const_int 0)))]\n+  [(set (reg CC_REG)\n+        (compare (neg:SI (match_operand:SI 1 \"register_operand\"  \"0,r\"))\n+\t\t (const_int 0)))\n+   (set (match_operand:SI\t\t   0 \"register_operand\" \"=r,r\")\n+\t(neg:SI (match_dup 1)))]\n   \"reload_completed && rx_match_ccmode (insn, CC_ZSmode)\"\n   \"@\n   neg\\t%0\n@@ -1365,11 +1366,11 @@\n )\n \n (define_insn \"*one_cmplsi2_flags\"\n-  [(set (match_operand:SI         0 \"register_operand\" \"=r,r\")\n-\t(not:SI (match_operand:SI 1 \"register_operand\"  \"0,r\")))\n-   (set (reg CC_REG)\n-\t(compare (not:SI (match_dup 1))\n-\t\t (const_int 0)))]\n+  [(set (reg CC_REG)\n+\t(compare (not:SI (match_operand:SI 1 \"register_operand\"  \"0,r\"))\n+\t\t (const_int 0)))\n+   (set (match_operand:SI\t\t   0 \"register_operand\" \"=r,r\")\n+\t(not:SI (match_dup 1)))]\n   \"reload_completed && rx_match_ccmode (insn, CC_ZSmode)\"\n   \"@\n   not\\t%0\n@@ -1398,12 +1399,12 @@\n )\n \n (define_insn \"*iorsi3_flags\"\n-  [(set (match_operand:SI         0 \"register_operand\" \"=r,r,r,r,r,r,r,r,r\")\n-\t(ior:SI (match_operand:SI 1 \"register_operand\" \"%0,0,0,0,0,0,r,r,0\")\n-\t        (match_operand:SI 2 \"rx_source_operand\" \"r,Uint04,Sint08,Sint16,Sint24,i,0,r,Q\")))\n-   (set (reg CC_REG)\n-\t(compare (ior:SI (match_dup 1) (match_dup 2))\n-\t\t (const_int 0)))]\n+  [(set (reg CC_REG)\n+\t(compare (ior:SI (match_operand:SI 1 \"register_operand\" \"%0,0,0,0,0,0,r,r,0\")\n+\t\t\t (match_operand:SI 2 \"rx_source_operand\" \"r,Uint04,Sint08,Sint16,Sint24,i,0,r,Q\"))\n+\t\t (const_int 0)))\n+   (set (match_operand:SI\t\t   0 \"register_operand\" \"=r,r,r,r,r,r,r,r,r\")\n+\t(ior:SI (match_dup 1) (match_dup 2)))]\n   \"reload_completed && rx_match_ccmode (insn, CC_ZSmode)\"\n   \"@\n   or\\t%2, %0\n@@ -1430,12 +1431,12 @@\n )\n \n (define_insn \"*rotlsi3_flags\"\n-  [(set (match_operand:SI            0 \"register_operand\" \"=r\")\n-\t(rotate:SI (match_operand:SI 1 \"register_operand\"  \"0\")\n-\t\t   (match_operand:SI 2 \"rx_shift_operand\" \"rn\")))\n-   (set (reg CC_REG)\n-\t(compare (rotate:SI (match_dup 1) (match_dup 2))\n-\t\t (const_int 0)))]\n+  [(set (reg CC_REG)\n+\t(compare (rotate:SI (match_operand:SI 1 \"register_operand\"  \"0\")\n+\t\t\t    (match_operand:SI 2 \"rx_shift_operand\" \"rn\"))\n+\t\t (const_int 0)))\n+   (set (match_operand:SI\t\t      0 \"register_operand\" \"=r\")\n+\t(rotate:SI (match_dup 1) (match_dup 2)))]\n   \"reload_completed && rx_match_ccmode (insn, CC_ZSmode)\"\n   \"rotl\\t%2, %0\"\n   [(set_attr \"length\" \"3\")]\n@@ -1452,12 +1453,12 @@\n )\n \n (define_insn \"*rotrsi3_flags\"\n-  [(set (match_operand:SI              0 \"register_operand\" \"=r\")\n-\t(rotatert:SI (match_operand:SI 1 \"register_operand\"  \"0\")\n-\t\t     (match_operand:SI 2 \"rx_shift_operand\" \"rn\")))\n-   (set (reg CC_REG)\n-\t(compare (rotatert:SI (match_dup 1) (match_dup 2))\n-\t\t (const_int 0)))]\n+  [(set (reg CC_REG)\n+\t(compare (rotatert:SI (match_operand:SI 1 \"register_operand\"  \"0\")\n+\t\t\t      (match_operand:SI 2 \"rx_shift_operand\" \"rn\"))\n+\t\t (const_int 0)))\n+   (set (match_operand:SI\t\t\t0 \"register_operand\" \"=r\")\n+\t(rotatert:SI (match_dup 1) (match_dup 2)))]\n   \"reload_completed && rx_match_ccmode (insn, CC_ZSmode)\"\n   \"rotr\\t%2, %0\"\n   [(set_attr \"length\" \"3\")]\n@@ -1477,12 +1478,12 @@\n )\n \n (define_insn \"*ashrsi3_flags\"\n-  [(set (match_operand:SI              0 \"register_operand\" \"=r,r,r\")\n-\t(ashiftrt:SI (match_operand:SI 1 \"register_operand\"  \"0,0,r\")\n-\t\t     (match_operand:SI 2 \"rx_shift_operand\"  \"r,n,n\")))\n-   (set (reg CC_REG)\n-\t(compare (ashiftrt:SI (match_dup 1) (match_dup 2))\n-\t\t (const_int 0)))]\n+  [(set (reg CC_REG)\n+\t(compare (ashiftrt:SI (match_operand:SI 1 \"register_operand\"  \"0,0,r\")\n+\t\t\t      (match_operand:SI 2 \"rx_shift_operand\"  \"r,n,n\"))\n+\t\t (const_int 0)))\n+   (set (match_operand:SI              0 \"register_operand\" \"=r,r,r\")\n+\t(ashiftrt:SI (match_dup 1) (match_dup 2)))]\n   \"reload_completed && rx_match_ccmode (insn, CC_ZSmode)\"\n   \"@\n   shar\\t%2, %0\n@@ -1505,12 +1506,12 @@\n )\n \n (define_insn \"*lshrsi3_flags\"\n-  [(set (match_operand:SI              0 \"register_operand\" \"=r,r,r\")\n-\t(lshiftrt:SI (match_operand:SI 1 \"register_operand\"  \"0,0,r\")\n-\t\t     (match_operand:SI 2 \"rx_shift_operand\"  \"r,n,n\")))\n-   (set (reg CC_REG)\n-\t(compare (lshiftrt:SI (match_dup 1) (match_dup 2))\n-\t\t (const_int 0)))]\n+  [(set (reg CC_REG)\n+\t(compare (lshiftrt:SI (match_operand:SI 1 \"register_operand\"  \"0,0,r\")\n+\t\t\t      (match_operand:SI 2 \"rx_shift_operand\"  \"r,n,n\"))\n+\t\t (const_int 0)))\n+   (set (match_operand:SI\t\t\t0 \"register_operand\" \"=r,r,r\")\n+\t(lshiftrt:SI (match_dup 1) (match_dup 2)))]\n   \"reload_completed && rx_match_ccmode (insn, CC_ZSmode)\"\n   \"@\n   shlr\\t%2, %0\n@@ -1533,12 +1534,12 @@\n )\n \n (define_insn \"*ashlsi3_flags\"\n-  [(set (match_operand:SI            0 \"register_operand\" \"=r,r,r\")\n-\t(ashift:SI (match_operand:SI 1 \"register_operand\"  \"0,0,r\")\n-\t           (match_operand:SI 2 \"rx_shift_operand\"  \"r,n,n\")))\n-   (set (reg CC_REG)\n-\t(compare (ashift:SI (match_dup 1) (match_dup 2))\n-\t\t (const_int 0)))]\n+  [(set (reg CC_REG)\n+\t(compare (ashift:SI (match_operand:SI 1 \"register_operand\"  \"0,0,r\")\n+\t\t\t    (match_operand:SI 2 \"rx_shift_operand\"  \"r,n,n\"))\n+\t\t (const_int 0)))\n+   (set (match_operand:SI\t\t      0 \"register_operand\" \"=r,r,r\")\n+\t(ashift:SI (match_dup 1) (match_dup 2)))]\n   \"reload_completed && rx_match_ccmode (insn, CC_ZSmode)\"\n   \"@\n   shll\\t%2, %0\n@@ -1556,12 +1557,12 @@\n   \"\"\n   \"#\"\n   \"reload_completed\"\n-  [(parallel [(set (match_dup 0)\n-\t\t   (plus:SI (match_dup 1) (match_dup 2)))\n-\t      (set (reg:CC_ZSC CC_REG)\n+  [(parallel [(set (reg:CC_ZSC CC_REG)\n \t\t   (compare:CC_ZSC\n \t\t     (plus:SI (match_dup 1) (match_dup 2))\n-\t\t     (const_int 0)))])\n+\t\t     (const_int 0)))\n+\t      (set (match_dup 0)\n+\t\t   (plus:SI (match_dup 1) (match_dup 2)))])\n    (set (match_dup 0)\n \t(unspec:SI [(match_dup 0) (reg:CC CC_REG)] \n \t\t   UNSPEC_BUILTIN_SAT))]\n@@ -1597,12 +1598,12 @@\n ;; Note that the O flag is set as if (compare op1 op2) not for\n ;; what is described here, (compare op0 0).\n (define_insn \"*subsi3_flags\"\n-  [(set (match_operand:SI           0 \"register_operand\" \"=r,r,r,r,r\")\n-\t(minus:SI (match_operand:SI 1 \"register_operand\"  \"0,0,0,r,0\")\n-\t\t  (match_operand:SI 2 \"rx_source_operand\" \"r,Uint04,n,r,Q\")))\n-   (set (reg CC_REG)\n-\t(compare (minus:SI (match_dup 1) (match_dup 2))\n-\t\t (const_int 0)))]\n+  [(set (reg CC_REG)\n+\t(compare (minus:SI (match_operand:SI 1 \"register_operand\"  \"0,0,0,r,0\")\n+\t\t\t   (match_operand:SI 2 \"rx_source_operand\" \"r,Uint04,n,r,Q\"))\n+\t\t (const_int 0)))\n+   (set (match_operand:SI\t\t     0 \"register_operand\" \"=r,r,r,r,r\")\n+\t(minus:SI (match_dup 1) (match_dup 2)))]\n   \"reload_completed && rx_match_ccmode (insn, CC_ZSCmode)\"\n   \"@\n   sub\\t%2, %0\n@@ -1616,12 +1617,13 @@\n \n ;; A helper to expand the above with the CC_MODE filled in.\n (define_expand \"subsi3_flags\"\n-  [(parallel [(set (match_operand:SI 0 \"register_operand\")\n-\t\t   (minus:SI (match_operand:SI 1 \"register_operand\")\n-\t\t\t     (match_operand:SI 2 \"rx_source_operand\")))\n-\t      (set (reg:CC_ZSC CC_REG)\n-\t\t   (compare:CC_ZSC (minus:SI (match_dup 1) (match_dup 2))\n-\t\t\t\t   (const_int 0)))])]\n+  [(parallel [(set (reg:CC_ZSC CC_REG)\n+\t\t   (compare:CC_ZSC\n+\t\t     (minus:SI (match_operand:SI 1 \"register_operand\")\n+\t\t\t       (match_operand:SI 2 \"rx_source_operand\"))\n+\t\t     (const_int 0)))\n+\t      (set (match_operand:SI 0 \"register_operand\")\n+\t\t   (minus:SI (match_dup 1) (match_dup 2)))])]\n )\n \n (define_insn \"sbb_internal\"\n@@ -1639,18 +1641,18 @@\n )\n \n (define_insn \"*sbb_flags\"\n-  [(set (match_operand:SI     0 \"register_operand\"   \"=r,r\")\n-\t(minus:SI\n-\t  (minus:SI\n-\t    (match_operand:SI 1 \"register_operand\"   \" 0,0\")\n-\t    (match_operand:SI 2 \"rx_compare_operand\" \" r,Q\"))\n-\t  (geu:SI (reg:CC CC_REG) (const_int 0))))\n-   (set (reg CC_REG)\n+  [(set (reg CC_REG)\n \t(compare\n \t  (minus:SI\n-\t    (minus:SI (match_dup 1) (match_dup 2))\n+\t    (minus:SI\n+\t      (match_operand:SI 1 \"register_operand\"   \" 0,0\")\n+\t      (match_operand:SI 2 \"rx_compare_operand\" \" r,Q\"))\n \t    (geu:SI (reg:CC CC_REG) (const_int 0)))\n-\t  (const_int 0)))]\n+\t  (const_int 0)))\n+   (set (match_operand:SI\t0 \"register_operand\"   \"=r,r\")\n+\t(minus:SI\n+\t  (minus:SI (match_dup 1) (match_dup 2))\n+\t  (geu:SI (reg:CC CC_REG) (const_int 0))))]\n   \"reload_completed\"\n   \"sbb\\t%2, %0\"\n   [(set_attr \"timings\" \"11,33\")\n@@ -1710,13 +1712,13 @@\n )\n \n (define_insn \"*xorsi3_flags\"\n-  [(set (match_operand:SI         0 \"register_operand\" \"=r,r,r,r,r,r\")\n-\t(xor:SI (match_operand:SI 1 \"register_operand\" \"%0,0,0,0,0,0\")\n-\t        (match_operand:SI 2 \"rx_source_operand\"\n-\t\t\t\t  \"r,Sint08,Sint16,Sint24,i,Q\")))\n-   (set (reg CC_REG)\n-\t(compare (xor:SI (match_dup 1) (match_dup 2))\n-\t\t (const_int 0)))]\n+  [(set (reg CC_REG)\n+\t(compare (xor:SI (match_operand:SI 1 \"register_operand\" \"%0,0,0,0,0,0\")\n+\t\t\t (match_operand:SI 2 \"rx_source_operand\"\n+\t\t\t\t\t\t\"r,Sint08,Sint16,Sint24,i,Q\"))\n+\t\t (const_int 0)))\n+   (set (match_operand:SI\t\t   0 \"register_operand\" \"=r,r,r,r,r,r\")\n+\t(xor:SI (match_dup 1) (match_dup 2)))]\n   \"reload_completed && rx_match_ccmode (insn, CC_ZSmode)\"\n   \"xor\\t%Q2, %0\"\n   [(set_attr \"timings\" \"11,11,11,11,11,33\")"}, {"sha": "e4cdac198e1c813e550b1ac8d25a10c6c6791a99", "filename": "gcc/config/visium/visium.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65fdd5e9aca0af40e4cd2d0683149171fb5c7d24/gcc%2Fconfig%2Fvisium%2Fvisium.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65fdd5e9aca0af40e4cd2d0683149171fb5c7d24/gcc%2Fconfig%2Fvisium%2Fvisium.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.c?ref=65fdd5e9aca0af40e4cd2d0683149171fb5c7d24", "patch": "@@ -932,10 +932,10 @@ single_set_and_flags (rtx_insn *insn)\n     {\n       rtx pat = PATTERN (insn);\n       if (XVECLEN (pat, 0) == 2\n-\t  && GET_CODE (XVECEXP (pat, 0, 1)) == SET\n-\t  && REG_P (SET_DEST (XVECEXP (pat, 0, 1)))\n-\t  && REGNO (SET_DEST (XVECEXP (pat, 0, 1))) == FLAGS_REGNUM)\n-\treturn XVECEXP (pat, 0, 0);\n+\t  && GET_CODE (XVECEXP (pat, 0, 0)) == SET\n+\t  && REG_P (SET_DEST (XVECEXP (pat, 0, 0)))\n+\t  && REGNO (SET_DEST (XVECEXP (pat, 0, 0))) == FLAGS_REGNUM)\n+\treturn XVECEXP (pat, 0, 1);\n     }\n \n   return single_set (insn);"}, {"sha": "a1f97a252d131f7f327e3a7c80d270c532689fb1", "filename": "gcc/config/visium/visium.md", "status": "modified", "additions": 62, "deletions": 61, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65fdd5e9aca0af40e4cd2d0683149171fb5c7d24/gcc%2Fconfig%2Fvisium%2Fvisium.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65fdd5e9aca0af40e4cd2d0683149171fb5c7d24/gcc%2Fconfig%2Fvisium%2Fvisium.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.md?ref=65fdd5e9aca0af40e4cd2d0683149171fb5c7d24", "patch": "@@ -251,19 +251,19 @@\n   [(set (match_operand 0 \"\") (match_operand 1 \"\"))\n    (clobber (reg:CC R_FLAGS))]\n   \"\"\n-  [(set (match_dup 0) (match_dup 1))\n-   (set (reg:CC R_FLAGS)\n-\t(compare:CC (match_dup 1) (const_int 0)))])\n+  [(set (reg:CC R_FLAGS)\n+\t(compare:CC (match_dup 1) (const_int 0)))\n+   (set (match_dup 0) (match_dup 1))])\n \n (define_subst_attr \"subst_logic\" \"flags_subst_logic\" \"_flags\" \"_set_flags\")\n \n (define_subst \"flags_subst_arith\"\n   [(set (match_operand 0 \"\") (match_operand 1 \"\"))\n    (clobber (reg:CC R_FLAGS))]\n   \"\"\n-  [(set (match_dup 0) (match_dup 1))\n-   (set (reg:CCNZ R_FLAGS)\n-\t(compare:CCNZ (match_dup 1) (const_int 0)))])\n+  [(set (reg:CCNZ R_FLAGS)\n+\t(compare:CCNZ (match_dup 1) (const_int 0)))\n+   (set (match_dup 0) (match_dup 1))])\n \n (define_subst_attr \"subst_arith\" \"flags_subst_arith\" \"_flags\" \"_set_flags\")\n \n@@ -794,23 +794,23 @@\n   [(set_attr \"type\" \"arith\")])\n \n (define_insn \"*add<mode>3_insn_set_carry\"\n-  [(set (match_operand:QHI 0 \"register_operand\" \"=r\")\n-\t(plus:QHI (match_operand:QHI 1 \"register_operand\" \"%r\")\n-\t\t  (match_operand:QHI 2 \"register_operand\" \"r\")))\n-   (set (reg:CCC R_FLAGS)\n-\t(compare:CCC (plus:QHI (match_dup 1) (match_dup 2))\n-\t\t     (match_dup 1)))]\n+  [(set (reg:CCC R_FLAGS)\n+\t(compare:CCC (plus:QHI (match_operand:QHI 1 \"register_operand\" \"%r\")\n+\t\t\t       (match_operand:QHI 2 \"register_operand\" \"r\"))\n+\t\t     (match_dup 1)))\n+   (set (match_operand:QHI 0 \"register_operand\" \"=r\")\n+\t(plus:QHI (match_dup 1) (match_dup 2)))]\n   \"reload_completed\"\n   \"add<s>   %0,%1,%2\"\n   [(set_attr \"type\" \"arith\")])\n \n (define_insn \"*add<mode>3_insn_set_overflow\"\n-  [(set (match_operand:QHI 0 \"register_operand\" \"=r\")\n-\t(plus:QHI (match_operand:QHI 1 \"register_operand\" \"%r\")\n-\t\t  (match_operand:QHI 2 \"register_operand\" \"r\")))\n-   (set (reg:CCV R_FLAGS)\n-\t(compare:CCV (plus:QHI (match_dup 1) (match_dup 2))\n-\t\t     (unspec:QHI [(match_dup 1) (match_dup 2)] UNSPEC_ADDV)))]\n+  [(set (reg:CCV R_FLAGS)\n+\t(compare:CCV (plus:QHI (match_operand:QHI 1 \"register_operand\" \"%r\")\n+\t\t\t       (match_operand:QHI 2 \"register_operand\" \"r\"))\n+\t\t     (unspec:QHI [(match_dup 1) (match_dup 2)] UNSPEC_ADDV)))\n+   (set (match_operand:QHI 0 \"register_operand\" \"=r\")\n+\t(plus:QHI (match_dup 1) (match_dup 2)))]\n   \"reload_completed\"\n   \"add<s>   %0,%1,%2\"\n   [(set_attr \"type\" \"arith\")])\n@@ -858,25 +858,25 @@\n   [(set_attr \"type\" \"arith\")])\n \n (define_insn \"addsi3_insn_set_carry\"\n-  [(set (match_operand:SI 0 \"register_operand\"          \"=r,r\")\n-\t(plus:SI (match_operand:SI 1 \"register_operand\" \"%r,0\")\n-\t\t (match_operand:SI 2 \"real_add_operand\" \" r,J\")))\n-   (set (reg:CCC R_FLAGS)\n-\t(compare:CCC (plus:SI (match_dup 1) (match_dup 2))\n-\t\t     (match_dup 1)))]\n+  [(set (reg:CCC R_FLAGS)\n+\t(compare:CCC (plus:SI (match_operand:SI 1 \"register_operand\" \"%r,0\")\n+\t\t\t      (match_operand:SI 2 \"real_add_operand\" \" r,J\"))\n+\t\t     (match_dup 1)))\n+   (set (match_operand:SI 0 \"register_operand\"          \"=r,r\")\n+\t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"reload_completed\"\n   \"@\n     add.l   %0,%1,%2\n     addi    %0,%2\"\n   [(set_attr \"type\" \"arith\")])\n \n (define_insn \"*addsi3_insn_set_overflow\"\n-  [(set (match_operand:SI 0 \"register_operand\"          \"=r,r\")\n-\t(plus:SI (match_operand:SI 1 \"register_operand\" \"%r,0\")\n-\t\t (match_operand:SI 2 \"real_add_operand\" \" r,J\")))\n-   (set (reg:CCV R_FLAGS)\n-\t(compare:CCV (plus:SI (match_dup 1) (match_dup 2))\n-\t\t     (unspec:SI [(match_dup 1) (match_dup 2)] UNSPEC_ADDV)))]\n+  [(set (reg:CCV R_FLAGS)\n+\t(compare:CCV (plus:SI (match_operand:SI 1 \"register_operand\" \"%r,0\")\n+\t\t\t      (match_operand:SI 2 \"real_add_operand\" \" r,J\"))\n+\t\t     (unspec:SI [(match_dup 1) (match_dup 2)] UNSPEC_ADDV)))\n+   (set (match_operand:SI 0 \"register_operand\"          \"=r,r\")\n+\t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"reload_completed\"\n   \"@\n     add.l   %0,%1,%2\n@@ -1009,22 +1009,22 @@\n   [(set_attr \"type\" \"arith\")])\n \n (define_insn \"*sub<mode>3_insn_set_carry\"\n-  [(set (match_operand:QHI 0 \"register_operand\" \"=r\")\n-\t(minus:QHI (match_operand:QHI 1 \"reg_or_0_operand\" \"rO\")\n-\t\t   (match_operand:QHI 2 \"register_operand\" \"r\")))\n-   (set (reg:CC R_FLAGS)\n-\t(compare:CC (match_dup 1) (match_dup 2)))]\n+  [(set (reg:CC R_FLAGS)\n+\t(compare:CC (match_operand:QHI 1 \"reg_or_0_operand\" \"r0\")\n+\t\t    (match_operand:QHI 2 \"register_operand\" \"r\")))\n+   (set (match_operand:QHI 0 \"register_operand\" \"=r\")\n+\t(minus:QHI (match_dup 1) (match_dup 2)))]\n   \"reload_completed\"\n   \"sub<s>   %0,%r1,%2\"\n   [(set_attr \"type\" \"arith\")])\n \n (define_insn \"*sub<mode>3_insn_set_overflow\"\n-  [(set (match_operand:QHI 0 \"register_operand\" \"=r\")\n-\t(minus:QHI (match_operand:QHI 1 \"reg_or_0_operand\" \"rO\")\n-\t\t   (match_operand:QHI 2 \"register_operand\" \"r\")))\n-   (set (reg:CCV R_FLAGS)\n-\t(compare:CCV (minus:QHI (match_dup 1) (match_dup 2))\n-\t\t     (unspec:QHI [(match_dup 1) (match_dup 2)] UNSPEC_SUBV)))]\n+  [(set (reg:CCV R_FLAGS)\n+\t(compare:CCV (minus:QHI (match_operand:QHI 1 \"reg_or_0_operand\" \"r0\")\n+\t\t\t\t(match_operand:QHI 2 \"register_operand\" \"r\"))\n+\t\t     (unspec:QHI [(match_dup 1) (match_dup 2)] UNSPEC_SUBV)))\n+   (set (match_operand:QHI 0 \"register_operand\" \"=r\")\n+\t(minus:QHI (match_dup 1) (match_dup 2)))]\n   \"reload_completed\"\n   \"sub<s>   %0,%r1,%2\"\n   [(set_attr \"type\" \"arith\")])\n@@ -1072,24 +1072,24 @@\n   [(set_attr \"type\" \"arith\")])\n \n (define_insn \"subsi3_insn_set_carry\"\n-  [(set (match_operand:SI 0 \"register_operand\"           \"=r,r\")\n-\t(minus:SI (match_operand:SI 1 \"register_operand\" \" r,0\")\n-\t\t  (match_operand:SI 2 \"real_add_operand\" \" r,J\")))\n-   (set (reg:CC R_FLAGS)\n-\t(compare:CC (match_dup 1) (match_dup 2)))]\n+  [(set (reg:CC R_FLAGS)\n+\t(compare:CC (match_operand:SI 1 \"register_operand\" \"r,0\")\n+\t\t    (match_operand:SI 2 \"real_add_operand\" \"r,J\")))\n+   (set (match_operand:SI 0 \"register_operand\"           \"=r,r\")\n+\t(minus:SI (match_dup 1) (match_dup 2)))]\n   \"reload_completed\"\n   \"@\n     sub.l   %0,%r1,%2\n     subi    %0,%2\"\n   [(set_attr \"type\" \"arith\")])\n \n (define_insn \"*subsi3_insn_set_overflow\"\n-  [(set (match_operand:SI 0 \"register_operand\"           \"=r,r\")\n-\t(minus:SI (match_operand:SI 1 \"register_operand\" \" r,0\")\n-\t\t  (match_operand:SI 2 \"real_add_operand\" \" r,J\")))\n-   (set (reg:CCV R_FLAGS)\n-\t(compare:CCV (minus:SI (match_dup 1) (match_dup 2))\n-\t\t     (unspec:SI [(match_dup 1) (match_dup 2)] UNSPEC_SUBV)))]\n+  [(set (reg:CCV R_FLAGS)\n+\t(compare:CCV (minus:SI (match_operand:SI 1 \"register_operand\" \"r,0\")\n+\t\t\t       (match_operand:SI 2 \"real_add_operand\" \"r,J\"))\n+\t\t     (unspec:SI [(match_dup 1) (match_dup 2)] UNSPEC_SUBV)))\n+   (set (match_operand:SI 0 \"register_operand\"           \"=r,r\")\n+\t(minus:SI (match_dup 1) (match_dup 2)))]\n   \"reload_completed\"\n   \"@\n     sub.l   %0,%1,%2\n@@ -1209,20 +1209,21 @@\n   [(set_attr \"type\" \"arith\")])\n \n (define_insn \"negsi2_insn_set_carry\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (neg:SI (match_operand:SI 1 \"register_operand\" \"r\")))\n-   (set (reg:CCC R_FLAGS)\n-\t(compare:CCC (not:SI (match_dup 1)) (const_int -1)))]\n+  [(set (reg:CCC R_FLAGS)\n+\t(compare:CCC (not:SI (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t\t     (const_int -1)))\n+   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (neg:SI (match_dup 1)))]\n   \"reload_completed\"\n   \"sub.l   %0,r0,%1\"\n   [(set_attr \"type\" \"arith\")])\n \n (define_insn \"*neg<mode>2_insn_set_overflow\"\n-  [(set (match_operand:I 0 \"register_operand\" \"=r\")\n-\t(neg:I (match_operand:I 1 \"register_operand\" \"r\")))\n-   (set (reg:CCV R_FLAGS)\n-\t(compare:CCV (neg:I (match_dup 1))\n-\t\t     (unspec:I [(match_dup 1)] UNSPEC_NEGV)))]\n+  [(set (reg:CCV R_FLAGS)\n+\t(compare:CCV (neg:I (match_operand:I 1 \"register_operand\" \"r\"))\n+\t\t     (unspec:I [(match_dup 1)] UNSPEC_NEGV)))\n+   (set (match_operand:I 0 \"register_operand\" \"=r\")\n+\t(neg:I (match_dup 1)))]\n   \"reload_completed\"\n   \"sub<s>   %0,r0,%1\"\n   [(set_attr \"type\" \"arith\")])"}]}