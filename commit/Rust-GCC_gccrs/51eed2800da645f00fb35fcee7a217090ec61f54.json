{"sha": "51eed2800da645f00fb35fcee7a217090ec61f54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFlZWQyODAwZGE2NDVmMDBmYjM1ZmNlZTdhMjE3MDkwZWM2MWY1NA==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2008-04-23T15:00:52Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2008-04-23T15:00:52Z"}, "message": "tree-cfg.c (verify_expr): Check with is_gimple_address.\n\n2008-04-23  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* tree-cfg.c (verify_expr): Check with is_gimple_address.  Don't\n\tcheck TREE_INVARIANT.\n\t* tree-gimple.c (is_gimple_address): New.\n\t(is_gimple_invariant_address): Simplify using decl_address_invariant_p.\n\t* tree-gimple.h (is_gimple_address): New.\n\t* tree.h (decl_address_invariant_p): New.\n\t* tree.c (make_node_stat): Don't set TREE_INVARIANT.\n\t(build_string): Likewise.\n\t(decl_address_invariant_p): New, from is_gimple_invariant_address.\n\t(tree_invariant_p_1): Likewise.\n\t(save_expr): Use it.\n\t(tree_invariant_p): New.\n\t(skip_simple_arithmetic): Use it.\n\t(stabilize_reference_1): Use it.\n\t(recompute_tree_invariant_for_addr_expr): Don't update TREE_INVARIANT,\n\tsimplify.\n\t(build1_stat): Drop code to compute TREE_INVARIANT.\n\t(build2_stat): Drop code to compute TREE_INVARIANT.\n\t(build3_stat): Drop code to compute TREE_INVARIANT.\n\t(build4_stat): Drop code to compute TREE_INVARIANT.\n\t(build5_stat): Drop code to compute TREE_INVARIANT.\n\t(build7_stat): Drop code to compute TREE_INVARIANT.\n\t(merge_dllimport_decl_attributes): Don't mention TREE_INVARIANT.\n\t* tree.h (struct tree_base): Remove invariant_flag.\n\t(TREE_INVARIANT): Remove.\n\t* builtins.c (build_string_literal): Don't set TREE_INVARIANT.\n\t(fold_builtin_expect): Check TREE_CONSTANT.\n\t* tree-ssa-ccp.c (fold_stmt_r): Adjust comment.\n\t* c-tree.h (c_expr_to_decl): Drop third parameter.\n\t* c-typeck.c (build_external_ref): Don't set TREE_INVARIANT.\n\t(build_c_cast): Don't set TREE_INVARIANT.\n\t(pop_init_level): Don't set TREE_INVARIANT.\n\t(c_objc_common_truthvalue_conversion): Don't set TREE_INVARIANT.\n\t* gimplify.c (gimplify_init_ctor_preeval): Add assertion, test\n\tTREE_CONSTANT.\n\t(gimplify_init_constructor): Don't set TREE_INVARIANT.\n\t(gimplify_addr_expr): Adjust comment.\n\t* tree-mudflap.c (mf_build_string):\n\t* print-tree.c (print_node): Don't print TREE_INVARIANT.\n\t* tree-nested.c (convert_nonlocal_reference): Adjust comment.\n\t* c-common.c (fix_string_type): Don't set TREE_INVARIANT.\n\t* langhooks-def.h (lhd_expr_to_decl): Drop third parameter.\n\t* langhooks.c (lhd_expr_to_decl): Drop third parameter.\n\t* langhooks.h (struct lang_hooks): Drop third parameter from\n\texpr_to_decl.\n\njava:\n2008-04-23  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* class.c (build_utf8_ref): Don't set TREE_INVARIANT.\n\t(build_classdollar_field): Don't set TREE_INVARIANT.\n\t(get_dispatch_table): Don't set TREE_INVARIANT.\n\t(make_class_data): Don't set TREE_INVARIANT.\n\t(build_symbol_entry): Don't set TREE_INVARIANT.\n\t(emit_symbol_table): Don't set TREE_INVARIANT.\n\t* constants.c (build_constant_data_ref): Don't set TREE_INVARIANT.\n\t(build_ref_from_constant_pool): Don't set TREE_INVARIANT.\n\t* resource.c (compile_resource_data): Don't set TREE_INVARIANT.\n\t* expr.c (cache_cpool_data_ref): Don't set TREE_INVARIANT.\n\nobjc:\n2008-04-23  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* objc-act.c (objc_build_string_object): Don't set TREE_INVARIANT.\n\ncp:\n2008-04-23  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* typeck.c (get_member_function_from_ptrfunc): Don't set TREE_INVARIANT.\n\t(build_ptrmemfunc1): Don't set TREE_INVARIANT.\n\t* init.c (build_zero_init): Don't set TREE_INVARIANT.\n\t* class.c (build_base_path): Don't set TREE_INVARIANT.\n\t(build_vtbl_ref_1): Don't set TREE_INVARIANT.\n\t(build_vtbl_initializer): Don't set TREE_INVARIANT.\n\t* decl.c (build_enumerator): Don't set TREE_INVARIANT.\n\t* rtti.c (tinfo_base_init): Don't set TREE_INVARIANT.\n\t(generic_initializer): Don't set TREE_INVARIANT.\n\t(ptr_initializer): Don't set TREE_INVARIANT.\n\t(ptm_initializer): Don't set TREE_INVARIANT.\n\t(class_initializer): Don't set TREE_INVARIANT.\n\t* typeck2.c (process_init_constructor): Don't set TREE_INVARIANT.\n\t* pt.c (push_inline_template_parms_recursive): Don't set TREE_INVARIANT.\n\t(build_template_parm_index): Don't set TREE_INVARIANT.\n\t(reduce_template_parm_level): Don't set TREE_INVARIANT.\n\t(process_template_parm): Don't set TREE_INVARIANT.\n\nada:\n2008-04-23  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* trans.c (Attribute_to_gnu): Don't set TREE_INVARIANT.\n\t(call_to_gnu): Don't set TREE_INVARIANT.\n\t* utils2.c (gnat_build_constructor): Don't set TREE_INVARIANT.\n\nfortran:\n2008-04-23  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* trans-expr.c (gfc_conv_structure): Don't set TREE_INVARIANT.\n\t* trans-array.c (gfc_build_null_descriptor): Don't set TREE_INVARIANT.\n\t(gfc_trans_array_constructor_value): Don't set TREE_INVARIANT.\n\t(gfc_build_constant_array_constructor): Don't set TREE_INVARIANT.\n\t(gfc_conv_array_initializer): Don't set TREE_INVARIANT.\n\t* trans-common.c (get_init_field): Don't set TREE_INVARIANT.\n\t(create_common): Don't set TREE_INVARIANT.\n\t* trans-stmt.c (gfc_trans_character_select): Don't set TREE_INVARIANT.\n\t* trans-decl.c (gfc_generate_function_code): Don't set TREE_INVARIANT.\n\nFrom-SVN: r134599", "tree": {"sha": "576c9b8b70b89942ab3e7e3c2ebe4abeb33d66ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/576c9b8b70b89942ab3e7e3c2ebe4abeb33d66ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51eed2800da645f00fb35fcee7a217090ec61f54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51eed2800da645f00fb35fcee7a217090ec61f54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51eed2800da645f00fb35fcee7a217090ec61f54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51eed2800da645f00fb35fcee7a217090ec61f54/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "17d2c090a10e1ff15d78e4e139f7df7c39a54d4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17d2c090a10e1ff15d78e4e139f7df7c39a54d4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17d2c090a10e1ff15d78e4e139f7df7c39a54d4e"}], "stats": {"total": 509, "additions": 309, "deletions": 200}, "files": [{"sha": "cab2723422afc305a68f50426e21eef684ac550f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -1,3 +1,51 @@\n+2008-04-23  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* tree-cfg.c (verify_expr): Check with is_gimple_address.  Don't\n+\tcheck TREE_INVARIANT.\n+\t* tree-gimple.c (is_gimple_address): New.\n+\t(is_gimple_invariant_address): Simplify using decl_address_invariant_p.\n+\t* tree-gimple.h (is_gimple_address): New.\n+\t* tree.h (decl_address_invariant_p): New.\n+\t* tree.c (make_node_stat): Don't set TREE_INVARIANT.\n+\t(build_string): Likewise.\n+\t(decl_address_invariant_p): New, from is_gimple_invariant_address.\n+\t(tree_invariant_p_1): Likewise.\n+\t(save_expr): Use it.\n+\t(tree_invariant_p): New.\n+\t(skip_simple_arithmetic): Use it.\n+\t(stabilize_reference_1): Use it.\n+\t(recompute_tree_invariant_for_addr_expr): Don't update TREE_INVARIANT,\n+\tsimplify.\n+\t(build1_stat): Drop code to compute TREE_INVARIANT.\n+\t(build2_stat): Drop code to compute TREE_INVARIANT.\n+\t(build3_stat): Drop code to compute TREE_INVARIANT.\n+\t(build4_stat): Drop code to compute TREE_INVARIANT.\n+\t(build5_stat): Drop code to compute TREE_INVARIANT.\n+\t(build7_stat): Drop code to compute TREE_INVARIANT.\n+\t(merge_dllimport_decl_attributes): Don't mention TREE_INVARIANT.\n+\t* tree.h (struct tree_base): Remove invariant_flag.\n+\t(TREE_INVARIANT): Remove.\n+\t* builtins.c (build_string_literal): Don't set TREE_INVARIANT.\n+\t(fold_builtin_expect): Check TREE_CONSTANT.\n+\t* tree-ssa-ccp.c (fold_stmt_r): Adjust comment.\n+\t* c-tree.h (c_expr_to_decl): Drop third parameter.\n+\t* c-typeck.c (build_external_ref): Don't set TREE_INVARIANT.\n+\t(build_c_cast): Don't set TREE_INVARIANT.\n+\t(pop_init_level): Don't set TREE_INVARIANT.\n+\t(c_objc_common_truthvalue_conversion): Don't set TREE_INVARIANT.\n+\t* gimplify.c (gimplify_init_ctor_preeval): Add assertion, test\n+\tTREE_CONSTANT.\n+\t(gimplify_init_constructor): Don't set TREE_INVARIANT.\n+\t(gimplify_addr_expr): Adjust comment.\n+\t* tree-mudflap.c (mf_build_string):\n+\t* print-tree.c (print_node): Don't print TREE_INVARIANT.\n+\t* tree-nested.c (convert_nonlocal_reference): Adjust comment.\n+\t* c-common.c (fix_string_type): Don't set TREE_INVARIANT.\n+\t* langhooks-def.h (lhd_expr_to_decl): Drop third parameter.\n+\t* langhooks.c (lhd_expr_to_decl): Drop third parameter.\n+\t* langhooks.h (struct lang_hooks): Drop third parameter from\n+\texpr_to_decl.\n+\n 2008-04-23  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/27799"}, {"sha": "4da4abc23bda75854adba899031258bbf9c5457a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -1,3 +1,9 @@\n+2008-04-23  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* trans.c (Attribute_to_gnu): Don't set TREE_INVARIANT.\n+\t(call_to_gnu): Don't set TREE_INVARIANT.\n+\t* utils2.c (gnat_build_constructor): Don't set TREE_INVARIANT.\n+\n 2008-04-22  Joel Sherrill <joel.sherrill@oarcorp.com>\n \n \t* s-osinte-rtems.adb: Add sigalstack function."}, {"sha": "cb0e8c6beece6704fb9286595975f7acbdeaa760", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -886,7 +886,6 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n \t\t  t = build2 (FDESC_EXPR, TREE_TYPE (gnu_field), gnu_prefix,\n \t\t\t      build_int_cst (NULL_TREE, i));\n \t\t  TREE_CONSTANT (t) = 1;\n-\t\t  TREE_INVARIANT (t) = 1;\n \t\t}\n \t      else\n \t\tt = build3 (COMPONENT_REF, ptr_void_ftype, gnu_result,\n@@ -1280,7 +1279,6 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n \t    gnu_result\n \t      = build1 (SAVE_EXPR, TREE_TYPE (gnu_result), gnu_result);\n \t    TREE_SIDE_EFFECTS (gnu_result) = 1;\n-\t    TREE_INVARIANT (gnu_result) = 1;\n \t    if (attribute == Attr_First)\n \t      pa->first = gnu_result;\n \t    else if (attribute == Attr_Last)\n@@ -2220,7 +2218,6 @@ call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target)\n \t     used as the object and copied back after the call if needed.  */\n \t  gnu_name = build1 (SAVE_EXPR, TREE_TYPE (gnu_name), gnu_name);\n \t  TREE_SIDE_EFFECTS (gnu_name) = 1;\n-\t  TREE_INVARIANT (gnu_name) = 1;\n \n \t  /* Set up to move the copy back to the original.  */\n \t  if (Ekind (gnat_formal) != E_In_Parameter)"}, {"sha": "f2eaf5e6d86897d6c0f70c96ee5e8c6480bf7d8c", "filename": "gcc/ada/utils2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fada%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fada%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils2.c?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -1671,8 +1671,7 @@ gnat_build_constructor (tree type, tree list)\n     }\n \n   result = build_constructor_from_list (type, list);\n-  TREE_CONSTANT (result) = TREE_INVARIANT (result)\n-    = TREE_STATIC (result) = allconstant;\n+  TREE_CONSTANT (result) = TREE_STATIC (result) = allconstant;\n   TREE_SIDE_EFFECTS (result) = side_effects;\n   TREE_READONLY (result) = TYPE_READONLY (type) || allconstant;\n   return result;"}, {"sha": "5b02d8bc6ed70e8e40192c9fb2c352af80f3be82", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -5236,7 +5236,6 @@ build_string_literal (int len, const char *str)\n   type = build_array_type (elem, index);\n   TREE_TYPE (t) = type;\n   TREE_CONSTANT (t) = 1;\n-  TREE_INVARIANT (t) = 1;\n   TREE_READONLY (t) = 1;\n   TREE_STATIC (t) = 1;\n \n@@ -7150,7 +7149,7 @@ fold_builtin_expect (tree arg0, tree arg1)\n     }\n \n   /* If the argument isn't invariant then there's nothing else we can do.  */\n-  if (!TREE_INVARIANT (arg0))\n+  if (!TREE_CONSTANT (arg0))\n     return NULL_TREE;\n \n   /* If we expect that a comparison against the argument will fold to"}, {"sha": "6db6f3e9ac8c0c612973ad4d4b2ee34ca159d6b9", "filename": "gcc/c-common.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -944,7 +944,6 @@ fix_string_type (tree value)\n \n   TREE_TYPE (value) = a_type;\n   TREE_CONSTANT (value) = 1;\n-  TREE_INVARIANT (value) = 1;\n   TREE_READONLY (value) = 1;\n   TREE_STATIC (value) = 1;\n   return value;"}, {"sha": "02dfc6122d1be62986a56e8c7b7fa13a56033107", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -593,7 +593,7 @@ extern tree c_finish_goto_label (tree);\n extern tree c_finish_goto_ptr (tree);\n extern void c_begin_vm_scope (unsigned int);\n extern void c_end_vm_scope (unsigned int);\n-extern tree c_expr_to_decl (tree, bool *, bool *, bool *);\n+extern tree c_expr_to_decl (tree, bool *, bool *);\n extern tree c_begin_omp_parallel (void);\n extern tree c_finish_omp_parallel (tree, tree);\n extern tree c_finish_omp_clauses (tree);"}, {"sha": "0b1e2852f11af9be3c3b65f90f1721ca830c962d", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -2213,7 +2213,6 @@ build_external_ref (tree id, int fun, location_t loc)\n       used_types_insert (TREE_TYPE (ref));\n       ref = DECL_INITIAL (ref);\n       TREE_CONSTANT (ref) = 1;\n-      TREE_INVARIANT (ref) = 1;\n     }\n   else if (current_function_decl != 0\n \t   && !DECL_FILE_SCOPE_P (current_function_decl)\n@@ -3643,7 +3642,6 @@ build_c_cast (tree type, tree expr)\n \t\t\t   build_constructor_single (type, field, value),\n \t\t\t   true, 0);\n \t  TREE_CONSTANT (t) = TREE_CONSTANT (value);\n-\t  TREE_INVARIANT (t) = TREE_INVARIANT (value);\n \t  return t;\n \t}\n       error (\"cast to union type from type not present in union\");\n@@ -5608,7 +5606,7 @@ pop_init_level (int implicit)\n \t  ret.value = build_constructor (constructor_type,\n \t\t\t\t\t constructor_elements);\n \t  if (constructor_constant)\n-\t    TREE_CONSTANT (ret.value) = TREE_INVARIANT (ret.value) = 1;\n+\t    TREE_CONSTANT (ret.value) = 1;\n \t  if (constructor_constant && constructor_simple)\n \t    TREE_STATIC (ret.value) = 1;\n \t}\n@@ -8655,8 +8653,7 @@ c_objc_common_truthvalue_conversion (tree expr)\n    required.  */\n \n tree\n-c_expr_to_decl (tree expr, bool *tc ATTRIBUTE_UNUSED,\n-\t\tbool *ti ATTRIBUTE_UNUSED, bool *se)\n+c_expr_to_decl (tree expr, bool *tc ATTRIBUTE_UNUSED, bool *se)\n {\n   if (TREE_CODE (expr) == COMPOUND_LITERAL_EXPR)\n     {"}, {"sha": "af183b927a10cb657fa0317be72258490e9fc11f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -1,3 +1,23 @@\n+2008-04-23  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* typeck.c (get_member_function_from_ptrfunc): Don't set TREE_INVARIANT.\n+\t(build_ptrmemfunc1): Don't set TREE_INVARIANT.\n+\t* init.c (build_zero_init): Don't set TREE_INVARIANT.\n+\t* class.c (build_base_path): Don't set TREE_INVARIANT.\n+\t(build_vtbl_ref_1): Don't set TREE_INVARIANT.\n+\t(build_vtbl_initializer): Don't set TREE_INVARIANT.\n+\t* decl.c (build_enumerator): Don't set TREE_INVARIANT.\n+\t* rtti.c (tinfo_base_init): Don't set TREE_INVARIANT.\n+\t(generic_initializer): Don't set TREE_INVARIANT.\n+\t(ptr_initializer): Don't set TREE_INVARIANT.\n+\t(ptm_initializer): Don't set TREE_INVARIANT.\n+\t(class_initializer): Don't set TREE_INVARIANT.\n+\t* typeck2.c (process_init_constructor): Don't set TREE_INVARIANT.\n+\t* pt.c (push_inline_template_parms_recursive): Don't set TREE_INVARIANT.\n+\t(build_template_parm_index): Don't set TREE_INVARIANT.\n+\t(reduce_template_parm_level): Don't set TREE_INVARIANT.\n+\t(process_template_parm): Don't set TREE_INVARIANT.\n+\n 2008-04-22  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/35316"}, {"sha": "73f5dd5f717ed9ad85fc0673f3b52cffbe58afba", "filename": "gcc/cp/class.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -385,7 +385,6 @@ build_base_path (enum tree_code code,\n \t\t\t v_offset);\n       v_offset = cp_build_indirect_ref (v_offset, NULL, tf_warning_or_error);\n       TREE_CONSTANT (v_offset) = 1;\n-      TREE_INVARIANT (v_offset) = 1;\n \n       offset = convert_to_integer (ptrdiff_type_node,\n \t\t\t\t   size_diffop (offset,\n@@ -630,7 +629,6 @@ build_vtbl_ref_1 (tree instance, tree idx)\n \n   aref = build_array_ref (vtbl, idx);\n   TREE_CONSTANT (aref) |= TREE_CONSTANT (vtbl) && TREE_CONSTANT (idx);\n-  TREE_INVARIANT (aref) = TREE_CONSTANT (aref);\n \n   return aref;\n }\n@@ -7450,7 +7448,6 @@ build_vtbl_initializer (tree binfo,\n \t\t\t\t     TREE_OPERAND (init, 0),\n \t\t\t\t     build_int_cst (NULL_TREE, i));\n \t\tTREE_CONSTANT (fdesc) = 1;\n-\t\tTREE_INVARIANT (fdesc) = 1;\n \n \t\tvfun_inits = tree_cons (NULL_TREE, fdesc, vfun_inits);\n \t      }"}, {"sha": "76950c3c2f003a47b60604cb92c25133fbb226d7", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -10967,7 +10967,6 @@ build_enumerator (tree name, tree value, tree enumtype)\n \n   DECL_CONTEXT (decl) = FROB_CONTEXT (context);\n   TREE_CONSTANT (decl) = 1;\n-  TREE_INVARIANT (decl) = 1;\n   TREE_READONLY (decl) = 1;\n   DECL_INITIAL (decl) = value;\n "}, {"sha": "dab7dc8a68fae37ce97311f04593d6cb20e9ff8f", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -261,10 +261,7 @@ build_zero_init (tree type, tree nelts, bool static_storage_p)\n \n   /* In all cases, the initializer is a constant.  */\n   if (init)\n-    {\n-      TREE_CONSTANT (init) = 1;\n-      TREE_INVARIANT (init) = 1;\n-    }\n+    TREE_CONSTANT (init) = 1;\n \n   return init;\n }"}, {"sha": "5ea5128e8717fba4b8ed33330dfdfe75139d91d8", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -384,7 +384,6 @@ push_inline_template_parms_recursive (tree parmlist, int levels)\n \t\t\t\t    TREE_TYPE (parm));\n \t    DECL_ARTIFICIAL (decl) = 1;\n \t    TREE_CONSTANT (decl) = 1;\n-\t    TREE_INVARIANT (decl) = 1;\n \t    TREE_READONLY (decl) = 1;\n \t    DECL_INITIAL (decl) = DECL_INITIAL (parm);\n \t    SET_DECL_TEMPLATE_PARM_P (decl);\n@@ -2870,7 +2869,6 @@ build_template_parm_index (int index,\n   TEMPLATE_PARM_DECL (t) = decl;\n   TREE_TYPE (t) = type;\n   TREE_CONSTANT (t) = TREE_CONSTANT (decl);\n-  TREE_INVARIANT (t) = TREE_INVARIANT (decl);\n   TREE_READONLY (t) = TREE_READONLY (decl);\n \n   return t;\n@@ -2923,7 +2921,6 @@ reduce_template_parm_level (tree index, tree type, int levels, tree args,\n \n       decl = build_decl (TREE_CODE (orig_decl), DECL_NAME (orig_decl), type);\n       TREE_CONSTANT (decl) = TREE_CONSTANT (orig_decl);\n-      TREE_INVARIANT (decl) = TREE_INVARIANT (orig_decl);\n       TREE_READONLY (decl) = TREE_READONLY (orig_decl);\n       DECL_ARTIFICIAL (decl) = 1;\n       SET_DECL_TEMPLATE_PARM_P (decl);\n@@ -3020,11 +3017,9 @@ process_template_parm (tree list, tree parm, bool is_non_type,\n \n       /* A template parameter is not modifiable.  */\n       TREE_CONSTANT (parm) = 1;\n-      TREE_INVARIANT (parm) = 1;\n       TREE_READONLY (parm) = 1;\n       decl = build_decl (CONST_DECL, DECL_NAME (parm), TREE_TYPE (parm));\n       TREE_CONSTANT (decl) = 1;\n-      TREE_INVARIANT (decl) = 1;\n       TREE_READONLY (decl) = 1;\n       DECL_INITIAL (parm) = DECL_INITIAL (decl)\n \t= build_template_parm_index (idx, processing_template_decl,"}, {"sha": "2d2ef5b84e17961d0ca494f46e3e07ed64964813", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -902,7 +902,6 @@ tinfo_base_init (tinfo_s *ti, tree target)\n \n   init = build_constructor_from_list (NULL_TREE, nreverse (init));\n   TREE_CONSTANT (init) = 1;\n-  TREE_INVARIANT (init) = 1;\n   TREE_STATIC (init) = 1;\n   init = tree_cons (NULL_TREE, init, NULL_TREE);\n \n@@ -920,7 +919,6 @@ generic_initializer (tinfo_s *ti, tree target)\n \n   init = build_constructor_from_list (NULL_TREE, init);\n   TREE_CONSTANT (init) = 1;\n-  TREE_INVARIANT (init) = 1;\n   TREE_STATIC (init) = 1;\n   return init;\n }\n@@ -946,7 +944,6 @@ ptr_initializer (tinfo_s *ti, tree target)\n \n   init = build_constructor_from_list (NULL_TREE, nreverse (init));\n   TREE_CONSTANT (init) = 1;\n-  TREE_INVARIANT (init) = 1;\n   TREE_STATIC (init) = 1;\n   return init;\n }\n@@ -979,7 +976,6 @@ ptm_initializer (tinfo_s *ti, tree target)\n \n   init = build_constructor_from_list (NULL_TREE, nreverse (init));\n   TREE_CONSTANT (init) = 1;\n-  TREE_INVARIANT (init) = 1;\n   TREE_STATIC (init) = 1;\n   return init;\n }\n@@ -996,7 +992,6 @@ class_initializer (tinfo_s *ti, tree target, tree trail)\n   TREE_CHAIN (init) = trail;\n   init = build_constructor_from_list (NULL_TREE, init);\n   TREE_CONSTANT (init) = 1;\n-  TREE_INVARIANT (init) = 1;\n   TREE_STATIC (init) = 1;\n   return init;\n }"}, {"sha": "4a5039e7942c6be19977b2201e6e41e90af821e7", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -2766,7 +2766,6 @@ get_member_function_from_ptrfunc (tree *instance_ptrptr, tree function)\n \t\t\tfold_convert (sizetype, idx));\n       e2 = cp_build_indirect_ref (e2, NULL, tf_warning_or_error);\n       TREE_CONSTANT (e2) = 1;\n-      TREE_INVARIANT (e2) = 1;\n \n       /* When using function descriptors, the address of the\n \t vtable entry is treated as a function pointer.  */\n@@ -6396,7 +6395,6 @@ build_ptrmemfunc1 (tree type, tree delta, tree pfn)\n   CONSTRUCTOR_APPEND_ELT(v, delta_field, delta);\n   u = build_constructor (type, v);\n   TREE_CONSTANT (u) = TREE_CONSTANT (pfn) & TREE_CONSTANT (delta);\n-  TREE_INVARIANT (u) = TREE_INVARIANT (pfn) & TREE_INVARIANT (delta);\n   TREE_STATIC (u) = (TREE_CONSTANT (u)\n \t\t     && (initializer_constant_valid_p (pfn, TREE_TYPE (pfn))\n \t\t\t != NULL_TREE)"}, {"sha": "c7339f1832dafb426388c86d23b12aa7183f524a", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -1081,7 +1081,6 @@ process_init_constructor (tree type, tree init)\n   if (!(flags & PICFLAG_NOT_ALL_CONSTANT))\n     {\n       TREE_CONSTANT (init) = 1;\n-      TREE_INVARIANT (init) = 1;\n       if (!(flags & PICFLAG_NOT_ALL_SIMPLE))\n \tTREE_STATIC (init) = 1;\n     }"}, {"sha": "dedc52ad0e0ee735b3474f08e318ec44770c7bcd", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -1,3 +1,15 @@\n+2008-04-23  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* trans-expr.c (gfc_conv_structure): Don't set TREE_INVARIANT.\n+\t* trans-array.c (gfc_build_null_descriptor): Don't set TREE_INVARIANT.\n+\t(gfc_trans_array_constructor_value): Don't set TREE_INVARIANT.\n+\t(gfc_build_constant_array_constructor): Don't set TREE_INVARIANT.\n+\t(gfc_conv_array_initializer): Don't set TREE_INVARIANT.\n+\t* trans-common.c (get_init_field): Don't set TREE_INVARIANT.\n+\t(create_common): Don't set TREE_INVARIANT.\n+\t* trans-stmt.c (gfc_trans_character_select): Don't set TREE_INVARIANT.\n+\t* trans-decl.c (gfc_generate_function_code): Don't set TREE_INVARIANT.\n+\n 2008-04-21  Steve Ellcey  <sje@cup.hp.com>\n \n \t* f95-lang.c (gfc_init_decl_processing): use ptr_mode instead of Pmode."}, {"sha": "5fc56883bc97fdffb7d57883c0c7354c761c1dd6", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -316,7 +316,6 @@ gfc_build_null_descriptor (tree type)\n   /* Set a NULL data pointer.  */\n   tmp = build_constructor_single (type, field, null_pointer_node);\n   TREE_CONSTANT (tmp) = 1;\n-  TREE_INVARIANT (tmp) = 1;\n   /* All other fields are ignored.  */\n \n   return tmp;\n@@ -1207,13 +1206,11 @@ gfc_trans_array_constructor_value (stmtblock_t * pblock, tree type,\n \n \t      init = build_constructor_from_list (tmptype, nreverse (list));\n \t      TREE_CONSTANT (init) = 1;\n-\t      TREE_INVARIANT (init) = 1;\n \t      TREE_STATIC (init) = 1;\n \t      /* Create a static variable to hold the data.  */\n \t      tmp = gfc_create_var (tmptype, \"data\");\n \t      TREE_STATIC (tmp) = 1;\n \t      TREE_CONSTANT (tmp) = 1;\n-\t      TREE_INVARIANT (tmp) = 1;\n \t      TREE_READONLY (tmp) = 1;\n \t      DECL_INITIAL (tmp) = init;\n \t      init = tmp;\n@@ -1582,13 +1579,11 @@ gfc_build_constant_array_constructor (gfc_expr * expr, tree type)\n   init = build_constructor_from_list (tmptype, nreverse (list));\n \n   TREE_CONSTANT (init) = 1;\n-  TREE_INVARIANT (init) = 1;\n   TREE_STATIC (init) = 1;\n \n   tmp = gfc_create_var (tmptype, \"A\");\n   TREE_STATIC (tmp) = 1;\n   TREE_CONSTANT (tmp) = 1;\n-  TREE_INVARIANT (tmp) = 1;\n   TREE_READONLY (tmp) = 1;\n   DECL_INITIAL (tmp) = init;\n \n@@ -3911,7 +3906,6 @@ gfc_conv_array_initializer (tree type, gfc_expr * expr)\n   /* Create a constructor from the list of elements.  */\n   tmp = build_constructor (type, v);\n   TREE_CONSTANT (tmp) = 1;\n-  TREE_INVARIANT (tmp) = 1;\n   return tmp;\n }\n "}, {"sha": "c6a386e01208360361cb53e75d69f95b987f82e2", "filename": "gcc/fortran/trans-common.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Ffortran%2Ftrans-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Ffortran%2Ftrans-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-common.c?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -547,7 +547,6 @@ get_init_field (segment_info *head, tree union_type, tree *field_init,\n \n   init = build_constructor (TREE_TYPE (field), v);\n   TREE_CONSTANT (init) = 1;\n-  TREE_INVARIANT (init) = 1;\n \n   *field_init = init;\n \n@@ -657,7 +656,6 @@ create_common (gfc_common_head *com, segment_info *head, bool saw_equiv)\n       gcc_assert (!VEC_empty (constructor_elt, v));\n       ctor = build_constructor (union_type, v);\n       TREE_CONSTANT (ctor) = 1;\n-      TREE_INVARIANT (ctor) = 1;\n       TREE_STATIC (ctor) = 1;\n       DECL_INITIAL (decl) = ctor;\n "}, {"sha": "84b059b1a78c27b976861a4db8569575aba70f40", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -3183,13 +3183,11 @@ gfc_generate_function_code (gfc_namespace * ns)\n \t\t\t\t\t\t\t\t      6)));\n       array = build_constructor_from_list (array_type, nreverse (array));\n       TREE_CONSTANT (array) = 1;\n-      TREE_INVARIANT (array) = 1;\n       TREE_STATIC (array) = 1;\n \n       /* Create a static variable to hold the jump table.  */\n       var = gfc_create_var (array_type, \"options\");\n       TREE_CONSTANT (var) = 1;\n-      TREE_INVARIANT (var) = 1;\n       TREE_STATIC (var) = 1;\n       TREE_READONLY (var) = 1;\n       DECL_INITIAL (var) = array;"}, {"sha": "aae1d72fe1fa3957018cd98a0e5bef5b46ea9a18", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -3478,10 +3478,7 @@ gfc_conv_structure (gfc_se * se, gfc_expr * expr, int init)\n     }\n   se->expr = build_constructor (type, v);\n   if (init) \n-    {\n-      TREE_CONSTANT(se->expr) = 1;\n-      TREE_INVARIANT(se->expr) = 1;\n-    }\n+    TREE_CONSTANT (se->expr) = 1;\n }\n \n "}, {"sha": "5660ae6181183e55623691552658a2657656f932", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -1435,12 +1435,10 @@ gfc_trans_character_select (gfc_code *code)\n \n   init = build_constructor_from_list (type, nreverse(init));\n   TREE_CONSTANT (init) = 1;\n-  TREE_INVARIANT (init) = 1;\n   TREE_STATIC (init) = 1;\n   /* Create a static variable to hold the jump table.  */\n   tmp = gfc_create_var (type, \"jumptable\");\n   TREE_CONSTANT (tmp) = 1;\n-  TREE_INVARIANT (tmp) = 1;\n   TREE_STATIC (tmp) = 1;\n   TREE_READONLY (tmp) = 1;\n   DECL_INITIAL (tmp) = init;"}, {"sha": "12db4e4d35d22fb0ea7cd1375f408c32e851583e", "filename": "gcc/gimplify.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -2868,12 +2868,14 @@ gimplify_init_ctor_preeval (tree *expr_p, tree *pre_p, tree *post_p,\n {\n   enum gimplify_status one;\n \n-  /* If the value is invariant, then there's nothing to pre-evaluate.\n-     But ensure it doesn't have any side-effects since a SAVE_EXPR is\n-     invariant but has side effects and might contain a reference to\n-     the object we're initializing.  */\n-  if (TREE_INVARIANT (*expr_p) && !TREE_SIDE_EFFECTS (*expr_p))\n-    return;\n+  /* If the value is constant, then there's nothing to pre-evaluate.  */\n+  if (TREE_CONSTANT (*expr_p))\n+    {\n+      /* Ensure it does not have side effects, it might contain a reference to\n+\t the object we're initializing.  */\n+      gcc_assert (!TREE_SIDE_EFFECTS (*expr_p));\n+      return;\n+    }\n \n   /* If the type has non-trivial constructors, we can't pre-evaluate.  */\n   if (TREE_ADDRESSABLE (TREE_TYPE (*expr_p)))\n@@ -3416,7 +3418,6 @@ gimplify_init_constructor (tree *expr_p, tree *pre_p,\n \t      break;\n \n \t    TREE_CONSTANT (ctor) = 0;\n-\t    TREE_INVARIANT (ctor) = 0;\n \t  }\n \n \t/* Vector types use CONSTRUCTOR all the way through gimple\n@@ -4254,8 +4255,7 @@ gimplify_addr_expr (tree *expr_p, tree *pre_p, tree *post_p)\n \t  if (TREE_CODE (op0) == INDIRECT_REF)\n \t    goto do_indirect_ref;\n \n-\t  /* Make sure TREE_INVARIANT, TREE_CONSTANT, and TREE_SIDE_EFFECTS\n-\t     is set properly.  */\n+\t  /* Make sure TREE_CONSTANT and TREE_SIDE_EFFECTS are set properly.  */\n \t  recompute_tree_invariant_for_addr_expr (expr);\n \n \t  mark_addressable (TREE_OPERAND (expr, 0));"}, {"sha": "a9487a9be120d98bfdb5d60f58beeea7db0b2e32", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -1,3 +1,16 @@\n+2008-04-23  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* class.c (build_utf8_ref): Don't set TREE_INVARIANT.\n+\t(build_classdollar_field): Don't set TREE_INVARIANT.\n+\t(get_dispatch_table): Don't set TREE_INVARIANT.\n+\t(make_class_data): Don't set TREE_INVARIANT.\n+\t(build_symbol_entry): Don't set TREE_INVARIANT.\n+\t(emit_symbol_table): Don't set TREE_INVARIANT.\n+\t* constants.c (build_constant_data_ref): Don't set TREE_INVARIANT.\n+\t(build_ref_from_constant_pool): Don't set TREE_INVARIANT.\n+\t* resource.c (compile_resource_data): Don't set TREE_INVARIANT.\n+\t* expr.c (cache_cpool_data_ref): Don't set TREE_INVARIANT.\n+\n 2008-04-03  Tom Tromey  <tromey@redhat.com>\n \n \t* Make-lang.in (java_OBJS): New variable."}, {"sha": "85e37bc468b3a0e4da780d7013bab566b6b7b4f7", "filename": "gcc/java/class.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -955,7 +955,6 @@ build_utf8_ref (tree name)\n   PUSH_FIELD_VALUE (cinit, \"data\", string);\n   FINISH_RECORD_CONSTRUCTOR (cinit);\n   TREE_CONSTANT (cinit) = 1;\n-  TREE_INVARIANT (cinit) = 1;\n \n   /* Generate a unique-enough identifier.  */\n   sprintf(buf, \"_Utf%d\", ++utf8_count);\n@@ -1063,7 +1062,6 @@ build_classdollar_field (tree type)\n \t\t\t\t\t     /* const */ 1, 0)),\n \t\t\t/* const */ 1, 0)));\n       TREE_STATIC (decl) = 1;\n-      TREE_INVARIANT (decl) = 1;\n       TREE_CONSTANT (decl) = 1;\n       TREE_READONLY (decl) = 1;\n       TREE_PUBLIC (decl) = 1;\n@@ -1604,7 +1602,6 @@ get_dispatch_table (tree type, tree this_class_addr)\n \t\ttree fdesc = build2 (FDESC_EXPR, nativecode_ptr_type_node, \n \t\t\t\t     method, build_int_cst (NULL_TREE, j));\n \t\tTREE_CONSTANT (fdesc) = 1;\n-\t\tTREE_INVARIANT (fdesc) = 1;\n \t        list = tree_cons (NULL_TREE, fdesc, list);\n \t      }\n \t  else\n@@ -2076,7 +2073,6 @@ make_class_data (tree type)\n \t\t\tbuild1 (ADDR_EXPR, symbols_array_ptr_type,\n \t\t\t\tTYPE_OTABLE_SYMS_DECL (type)));\n       TREE_CONSTANT (TYPE_OTABLE_DECL (type)) = 1;\n-      TREE_INVARIANT (TYPE_OTABLE_DECL (type)) = 1;\n     }\n   if (TYPE_ATABLE_METHODS(type) == NULL_TREE)\n     {\n@@ -2092,7 +2088,6 @@ make_class_data (tree type)\n \t\t\tbuild1 (ADDR_EXPR, symbols_array_ptr_type,\n \t\t\t\tTYPE_ATABLE_SYMS_DECL (type)));\n       TREE_CONSTANT (TYPE_ATABLE_DECL (type)) = 1;\n-      TREE_INVARIANT (TYPE_ATABLE_DECL (type)) = 1;\n     }\n    if (TYPE_ITABLE_METHODS(type) == NULL_TREE)\n     {\n@@ -2108,7 +2103,6 @@ make_class_data (tree type)\n \t\t\tbuild1 (ADDR_EXPR, symbols_array_ptr_type,\n \t\t\t\tTYPE_ITABLE_SYMS_DECL (type)));\n       TREE_CONSTANT (TYPE_ITABLE_DECL (type)) = 1;\n-      TREE_INVARIANT (TYPE_ITABLE_DECL (type)) = 1;\n     }\n  \n   PUSH_FIELD_VALUE (cons, \"catch_classes\",\n@@ -2848,7 +2842,6 @@ build_symbol_entry (tree decl, tree special)\n   PUSH_FIELD_VALUE (sym, \"signature\", signature);\n   FINISH_RECORD_CONSTRUCTOR (sym);\n   TREE_CONSTANT (sym) = 1;\n-  TREE_INVARIANT (sym) = 1;\n \n   return sym;\n } \n@@ -2889,7 +2882,6 @@ emit_symbol_table (tree name, tree the_table, tree decl_list,\n   PUSH_FIELD_VALUE (null_symbol, \"signature\", null_pointer_node);\n   FINISH_RECORD_CONSTRUCTOR (null_symbol);\n   TREE_CONSTANT (null_symbol) = 1;  \n-  TREE_INVARIANT (null_symbol) = 1;  \n   list = tree_cons (NULL_TREE, null_symbol, list);\n \n   /* Put the list in the right order and make it a constructor. */"}, {"sha": "5294285f65a34c52e700659bdb7581a8c11c51ba", "filename": "gcc/java/constants.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fjava%2Fconstants.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fjava%2Fconstants.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fconstants.c?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -445,7 +445,6 @@ build_constant_data_ref (bool indirect)\n       TREE_THIS_NOTRAP (klass) = 1;\n       data = fold_convert (build_pointer_type (cpool_type), data);\n       d = build1 (INDIRECT_REF, cpool_type, data);\n-      TREE_INVARIANT (d) = 1;\n \n       return d;\n     }\n@@ -485,7 +484,6 @@ build_ref_from_constant_pool (int index)\n   i = build_int_cst (NULL_TREE, index);\n   d = build4 (ARRAY_REF, TREE_TYPE (TREE_TYPE (d)), d, i,\n \t\t NULL_TREE, NULL_TREE);\n-  TREE_INVARIANT (d) = 1;\n   return d;\n }\n "}, {"sha": "75c18e51d17afe5826cd339943d951445cf17299", "filename": "gcc/java/expr.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -3809,7 +3809,6 @@ cache_cpool_data_ref (void)\n       tree cpool_ptr = build_decl (VAR_DECL, NULL_TREE, \n \t\t\t\t   build_pointer_type (TREE_TYPE (d)));\n       java_add_local_var (cpool_ptr);\n-      TREE_INVARIANT (cpool_ptr) = 1;\n       TREE_CONSTANT (cpool_ptr) = 1;\n \n       java_add_stmt (build2 (MODIFY_EXPR, TREE_TYPE (cpool_ptr), "}, {"sha": "d01eb8e5a891fc6635ea6f9251d1859814558030", "filename": "gcc/java/resource.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fjava%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fjava%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fresource.c?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -73,7 +73,6 @@ compile_resource_data (const char *name, const char *buffer, int length)\n   PUSH_FIELD_VALUE (rinit, \"data\", data);\n   FINISH_RECORD_CONSTRUCTOR (rinit);\n   TREE_CONSTANT (rinit) = 1;\n-  TREE_INVARIANT (rinit) = 1;\n \n   decl = build_decl (VAR_DECL, java_mangle_resource_name (name), rtype);\n   TREE_STATIC (decl) = 1;"}, {"sha": "30ff3066c8be2148dbc51e718b825d1a458d0205", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -64,7 +64,7 @@ extern const char *lhd_comdat_group (tree);\n extern tree lhd_expr_size (const_tree);\n extern size_t lhd_tree_size (enum tree_code);\n extern HOST_WIDE_INT lhd_to_target_charset (HOST_WIDE_INT);\n-extern tree lhd_expr_to_decl (tree, bool *, bool *, bool *);\n+extern tree lhd_expr_to_decl (tree, bool *, bool *);\n extern tree lhd_builtin_function (tree decl);\n \n /* Declarations of default tree inlining hooks.  */"}, {"sha": "3943f02b794f75dbc90446fccb0d3a6f5b2ee3ff", "filename": "gcc/langhooks.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -502,8 +502,7 @@ lhd_to_target_charset (HOST_WIDE_INT c)\n }\n \n tree\n-lhd_expr_to_decl (tree expr, bool *tc ATTRIBUTE_UNUSED,\n-\t\t  bool *ti ATTRIBUTE_UNUSED, bool *se ATTRIBUTE_UNUSED)\n+lhd_expr_to_decl (tree expr, bool *tc ATTRIBUTE_UNUSED, bool *se ATTRIBUTE_UNUSED)\n {\n   return expr;\n }"}, {"sha": "b693742f53d1ef40d2c32d2004025d66090723db", "filename": "gcc/langhooks.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -400,10 +400,9 @@ struct lang_hooks\n   void (*init_ts) (void);\n \n   /* Called by recompute_tree_invariant_for_addr_expr to go from EXPR\n-     to a contained expression or DECL, possibly updating *TC, *TI or\n-     *SE if in the process TREE_CONSTANT, TREE_INVARIANT or\n-     TREE_SIDE_EFFECTS need updating.  */\n-  tree (*expr_to_decl) (tree expr, bool *tc, bool *ti, bool *se);\n+     to a contained expression or DECL, possibly updating *TC or *SE\n+     if in the process TREE_CONSTANT or TREE_SIDE_EFFECTS need updating.  */\n+  tree (*expr_to_decl) (tree expr, bool *tc, bool *se);\n \n   /* Whenever you add entries here, make sure you adjust langhooks-def.h\n      and langhooks.c accordingly.  */"}, {"sha": "02a1356b8cdde54d19df52f9f3ab3869e1cb94d0", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -1,3 +1,7 @@\n+2008-04-23  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* objc-act.c (objc_build_string_object): Don't set TREE_INVARIANT.\n+\n 2008-04-03  Tom Tromey  <tromey@redhat.com>\n \n \t* Make-lang.in (objc_OBJS): New variable."}, {"sha": "46565e94b4fa289af59a4e6823c366303843b39d", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -1953,7 +1953,6 @@ objc_build_string_object (tree string)\n  \t\t\t    initlist);\n       constructor = objc_build_constructor (internal_const_str_type,\n \t\t\t\t\t    nreverse (initlist));\n-      TREE_INVARIANT (constructor) = true;\n \n       if (!flag_next_runtime)\n \tconstructor"}, {"sha": "a6cb7b237609cf80c605962a2987907012480cfb", "filename": "gcc/print-tree.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -293,8 +293,6 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n   else if (TYPE_P (node) && TYPE_SIZES_GIMPLIFIED (node))\n     fputs (\" sizes-gimplified\", file);\n \n-  if (TREE_INVARIANT (node))\n-    fputs (\" invariant\", file);\n   if (TREE_ADDRESSABLE (node))\n     fputs (\" addressable\", file);\n   if (TREE_THIS_VOLATILE (node))"}, {"sha": "66449c0468236d6235bc65062e520febff16454d", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -3188,28 +3188,20 @@ verify_expr (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n \n     case ADDR_EXPR:\n       {\n-\tbool old_invariant;\n \tbool old_constant;\n \tbool old_side_effects;\n-\tbool new_invariant;\n \tbool new_constant;\n \tbool new_side_effects;\n \n-\told_invariant = TREE_INVARIANT (t);\n+\tgcc_assert (is_gimple_address (t));\n+\n \told_constant = TREE_CONSTANT (t);\n \told_side_effects = TREE_SIDE_EFFECTS (t);\n \n \trecompute_tree_invariant_for_addr_expr (t);\n-\tnew_invariant = TREE_INVARIANT (t);\n \tnew_side_effects = TREE_SIDE_EFFECTS (t);\n \tnew_constant = TREE_CONSTANT (t);\n \n-\tif (old_invariant != new_invariant)\n-\t  {\n-\t    error (\"invariant not recomputed when ADDR_EXPR changed\");\n-\t    return t;\n-\t  }\n-\n         if (old_constant != new_constant)\n \t  {\n \t    error (\"constant not recomputed when ADDR_EXPR changed\");"}, {"sha": "433c294039b2841815d6312b561d752475d09029", "filename": "gcc/tree-gimple.c", "status": "modified", "additions": 40, "deletions": 34, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Ftree-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Ftree-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-gimple.c?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -194,6 +194,45 @@ is_gimple_constant (const_tree t)\n     }\n }\n \n+/* Return true if T is a gimple address.  */\n+\n+bool\n+is_gimple_address (const_tree t)\n+{\n+  tree op;\n+\n+  if (TREE_CODE (t) != ADDR_EXPR)\n+    return false;\n+\n+  op = TREE_OPERAND (t, 0);\n+  while (handled_component_p (op))\n+    {\n+      if ((TREE_CODE (op) == ARRAY_REF\n+\t   || TREE_CODE (op) == ARRAY_RANGE_REF)\n+\t  && !is_gimple_val (TREE_OPERAND (op, 1)))\n+\t    return false;\n+\n+      op = TREE_OPERAND (op, 0);\n+    }\n+\n+  if (CONSTANT_CLASS_P (op) || INDIRECT_REF_P (op))\n+    return true;\n+\n+  switch (TREE_CODE (op))\n+    {\n+    case PARM_DECL:\n+    case RESULT_DECL:\n+    case LABEL_DECL:\n+    case FUNCTION_DECL:\n+    case VAR_DECL:\n+    case CONST_DECL:\n+      return true;\n+\n+    default:\n+      return false;\n+    }\n+}\n+\n /* Return true if T is a gimple invariant address.  */\n \n bool\n@@ -227,40 +266,7 @@ is_gimple_invariant_address (const_tree t)\n       op = TREE_OPERAND (op, 0);\n     }\n \n-  if (CONSTANT_CLASS_P (op))\n-    return true;\n-\n-  if (INDIRECT_REF_P (op))\n-    return false;\n-\n-  switch (TREE_CODE (op))\n-    {\n-    case PARM_DECL:\n-    case RESULT_DECL:\n-    case LABEL_DECL:\n-    case FUNCTION_DECL:\n-      return true;\n-\n-    case VAR_DECL:\n-      if (((TREE_STATIC (op) || DECL_EXTERNAL (op))\n-\t   && ! DECL_DLLIMPORT_P (op))\n-\t  || DECL_THREAD_LOCAL_P (op)\n-\t  || DECL_CONTEXT (op) == current_function_decl\n-\t  || decl_function_context (op) == current_function_decl)\n-\treturn true;\n-      break;\n-\n-    case CONST_DECL:\n-      if ((TREE_STATIC (op) || DECL_EXTERNAL (op))\n-\t  || decl_function_context (op) == current_function_decl)\n-\treturn true;\n-      break;\n-\n-    default:\n-      gcc_unreachable ();\n-    }\n-\n-  return false;\n+  return CONSTANT_CLASS_P (op) || decl_address_invariant_p (op);\n }\n \n /* Return true if T is a GIMPLE minimal invariant.  It's a restricted"}, {"sha": "2c4aa2d93791f646bf4dc3b112b5aec1426f3e37", "filename": "gcc/tree-gimple.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Ftree-gimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Ftree-gimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-gimple.h?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -62,6 +62,8 @@ extern bool is_gimple_addressable (tree);\n /* Returns true iff T is any valid GIMPLE lvalue.  */\n extern bool is_gimple_lvalue (tree);\n \n+/* Returns true iff T is a GIMPLE address.  */\n+bool is_gimple_address (const_tree);\n /* Returns true iff T is a GIMPLE invariant address.  */\n bool is_gimple_invariant_address (const_tree);\n /* Returns true iff T is a valid GIMPLE constant.  */"}, {"sha": "b5e8984a4df179055eaa4d78ba913b0fac6cafcf", "filename": "gcc/tree-mudflap.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Ftree-mudflap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Ftree-mudflap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-mudflap.c?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -83,7 +83,6 @@ mf_build_string (const char *string)\n   TREE_TYPE (result) = build_array_type\n     (char_type_node, build_index_type (build_int_cst (NULL_TREE, len)));\n   TREE_CONSTANT (result) = 1;\n-  TREE_INVARIANT (result) = 1;\n   TREE_READONLY (result) = 1;\n   TREE_STATIC (result) = 1;\n "}, {"sha": "8588e303d28139ae9d3747ab64687ccdb8a003ba", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -1037,8 +1037,8 @@ convert_nonlocal_reference (tree *tp, int *walk_subtrees, void *data)\n \t  {\n \t    tree save_context;\n \n-\t    /* If we changed anything, then TREE_INVARIANT is be wrong,\n-\t       since we're no longer directly referencing a decl.  */\n+\t    /* If we changed anything, we might no longer be directly\n+\t       referencing a decl.  */\n \t    save_context = current_function_decl;\n \t    current_function_decl = info->context;\n \t    recompute_tree_invariant_for_addr_expr (t);"}, {"sha": "6907f0b837b43ea8702d74ec9a2e57987574cabc", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -2097,8 +2097,8 @@ fold_stmt_r (tree *expr_p, int *walk_subtrees, void *data)\n \treturn t;\n       *walk_subtrees = 0;\n \n-      /* Set TREE_INVARIANT properly so that the value is properly\n-\t considered constant, and so gets propagated as expected.  */\n+      /* Make sure the value is properly considered constant, and so gets\n+\t propagated as expected.  */\n       if (*changed_p)\n         recompute_tree_invariant_for_addr_expr (expr);\n       return NULL_TREE;"}, {"sha": "73adaa10b037ca9643f44d3c5cf8d65f6e1c2596", "filename": "gcc/tree.c", "status": "modified", "additions": 135, "deletions": 56, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -621,7 +621,6 @@ make_node_stat (enum tree_code code MEM_STAT_DECL)\n \n     case tcc_constant:\n       TREE_CONSTANT (t) = 1;\n-      TREE_INVARIANT (t) = 1;\n       break;\n \n     case tcc_expression:\n@@ -1192,7 +1191,6 @@ build_string (int len, const char *str)\n   memset (s, 0, sizeof (struct tree_common));\n   TREE_SET_CODE (s, STRING_CST);\n   TREE_CONSTANT (s) = 1;\n-  TREE_INVARIANT (s) = 1;\n   TREE_STRING_LENGTH (s) = len;\n   memcpy (s->string.str, str, len);\n   s->string.str[len] = '\\0';\n@@ -2056,7 +2054,111 @@ staticp (tree arg)\n \treturn NULL;\n     }\n }\n+\n \f\n+\n+\n+/* Return whether OP is a DECL whose address is function-invariant.  */\n+\n+bool\n+decl_address_invariant_p (const_tree op)\n+{\n+  /* The conditions below are slightly less strict than the one in\n+     staticp.  */\n+\n+  switch (TREE_CODE (op))\n+    {\n+    case PARM_DECL:\n+    case RESULT_DECL:\n+    case LABEL_DECL:\n+    case FUNCTION_DECL:\n+      return true;\n+\n+    case VAR_DECL:\n+      if (((TREE_STATIC (op) || DECL_EXTERNAL (op))\n+           && !DECL_DLLIMPORT_P (op))\n+          || DECL_THREAD_LOCAL_P (op)\n+          || DECL_CONTEXT (op) == current_function_decl\n+          || decl_function_context (op) == current_function_decl)\n+        return true;\n+      break;\n+\n+    case CONST_DECL:\n+      if ((TREE_STATIC (op) || DECL_EXTERNAL (op))\n+          || decl_function_context (op) == current_function_decl)\n+        return true;\n+      break;\n+\n+    default:\n+      break;\n+    }\n+\n+  return false;\n+}\n+\n+\n+/* Return true if T is function-invariant (internal function, does\n+   not handle arithmetic; that's handled in skip_simple_arithmetic and\n+   tree_invariant_p).  */\n+\n+static bool tree_invariant_p (tree t);\n+\n+static bool\n+tree_invariant_p_1 (tree t)\n+{\n+  tree op;\n+\n+  if (TREE_CONSTANT (t)\n+      || (TREE_READONLY (t) && !TREE_SIDE_EFFECTS (t)))\n+    return true;\n+\n+  switch (TREE_CODE (t))\n+    {\n+    case SAVE_EXPR:\n+      return true;\n+\n+    case ADDR_EXPR:\n+      op = TREE_OPERAND (t, 0);\n+      while (handled_component_p (op))\n+\t{\n+\t  switch (TREE_CODE (op))\n+\t    {\n+\t    case ARRAY_REF:\n+\t    case ARRAY_RANGE_REF:\n+\t      if (!tree_invariant_p (TREE_OPERAND (op, 1))\n+\t\t  || TREE_OPERAND (op, 2) != NULL_TREE\n+\t\t  || TREE_OPERAND (op, 3) != NULL_TREE)\n+\t\treturn false;\n+\t      break;\n+\n+\t    case COMPONENT_REF:\n+\t      if (TREE_OPERAND (op, 2) != NULL_TREE)\n+\t\treturn false;\n+\t      break;\n+\n+\t    default:;\n+\t    }\n+\t  op = TREE_OPERAND (op, 0);\n+\t}\n+\n+      return CONSTANT_CLASS_P (op) || decl_address_invariant_p (op);\n+\n+    default:\n+      break;\n+    }\n+\n+  return false;\n+}\n+\n+/* Return true if T is function-invariant.  */\n+\n+static bool\n+tree_invariant_p (tree t)\n+{\n+  tree inner = skip_simple_arithmetic (t);\n+  return tree_invariant_p_1 (inner);\n+}\n+\n /* Wrap a SAVE_EXPR around EXPR, if appropriate.\n    Do this to any expression which may be used in more than one place,\n    but must be evaluated only once.\n@@ -2091,11 +2193,10 @@ save_expr (tree expr)\n      Since it is no problem to reevaluate literals, we just return the\n      literal node.  */\n   inner = skip_simple_arithmetic (t);\n+  if (TREE_CODE (inner) == ERROR_MARK)\n+    return inner;\n \n-  if (TREE_INVARIANT (inner)\n-      || (TREE_READONLY (inner) && ! TREE_SIDE_EFFECTS (inner))\n-      || TREE_CODE (inner) == SAVE_EXPR\n-      || TREE_CODE (inner) == ERROR_MARK)\n+  if (tree_invariant_p_1 (inner))\n     return t;\n \n   /* If INNER contains a PLACEHOLDER_EXPR, we must evaluate it each time, since\n@@ -2116,7 +2217,6 @@ save_expr (tree expr)\n      value was computed on both sides of the jump.  So make sure it isn't\n      eliminated as dead.  */\n   TREE_SIDE_EFFECTS (t) = 1;\n-  TREE_INVARIANT (t) = 1;\n   return t;\n }\n \n@@ -2144,9 +2244,9 @@ skip_simple_arithmetic (tree expr)\n \tinner = TREE_OPERAND (inner, 0);\n       else if (BINARY_CLASS_P (inner))\n \t{\n-\t  if (TREE_INVARIANT (TREE_OPERAND (inner, 1)))\n+\t  if (tree_invariant_p (TREE_OPERAND (inner, 1)))\n \t    inner = TREE_OPERAND (inner, 0);\n-\t  else if (TREE_INVARIANT (TREE_OPERAND (inner, 0)))\n+\t  else if (tree_invariant_p (TREE_OPERAND (inner, 0)))\n \t    inner = TREE_OPERAND (inner, 1);\n \t  else\n \t    break;\n@@ -2815,7 +2915,7 @@ stabilize_reference_1 (tree e)\n      ignore things that are actual constant or that already have been\n      handled by this function.  */\n \n-  if (TREE_INVARIANT (e))\n+  if (tree_invariant_p (e))\n     return e;\n \n   switch (TREE_CODE_CLASS (code))\n@@ -2868,21 +2968,20 @@ stabilize_reference_1 (tree e)\n   TREE_READONLY (result) = TREE_READONLY (e);\n   TREE_SIDE_EFFECTS (result) = TREE_SIDE_EFFECTS (e);\n   TREE_THIS_VOLATILE (result) = TREE_THIS_VOLATILE (e);\n-  TREE_INVARIANT (result) = 1;\n \n   return result;\n }\n \f\n /* Low-level constructors for expressions.  */\n \n /* A helper function for build1 and constant folders.  Set TREE_CONSTANT,\n-   TREE_INVARIANT, and TREE_SIDE_EFFECTS for an ADDR_EXPR.  */\n+   and TREE_SIDE_EFFECTS for an ADDR_EXPR.  */\n \n void\n recompute_tree_invariant_for_addr_expr (tree t)\n {\n   tree node;\n-  bool tc = true, ti = true, se = false;\n+  bool tc = true, se = false;\n \n   /* We started out assuming this address is both invariant and constant, but\n      does not have side effects.  Now go down any handled components and see if\n@@ -2892,9 +2991,8 @@ recompute_tree_invariant_for_addr_expr (tree t)\n      ??? Note that this code makes no attempt to deal with the case where\n      taking the address of something causes a copy due to misalignment.  */\n \n-#define UPDATE_TITCSE(NODE)  \\\n+#define UPDATE_FLAGS(NODE)  \\\n do { tree _node = (NODE); \\\n-     if (_node && !TREE_INVARIANT (_node)) ti = false; \\\n      if (_node && !TREE_CONSTANT (_node)) tc = false; \\\n      if (_node && TREE_SIDE_EFFECTS (_node)) se = true; } while (0)\n \n@@ -2908,11 +3006,11 @@ do { tree _node = (NODE); \\\n \t   || TREE_CODE (node) == ARRAY_RANGE_REF)\n \t  && TREE_CODE (TREE_TYPE (TREE_OPERAND (node, 0))) == ARRAY_TYPE)\n \t{\n-\t  UPDATE_TITCSE (TREE_OPERAND (node, 1));\n+\t  UPDATE_FLAGS (TREE_OPERAND (node, 1));\n \t  if (TREE_OPERAND (node, 2))\n-\t    UPDATE_TITCSE (TREE_OPERAND (node, 2));\n+\t    UPDATE_FLAGS (TREE_OPERAND (node, 2));\n \t  if (TREE_OPERAND (node, 3))\n-\t    UPDATE_TITCSE (TREE_OPERAND (node, 3));\n+\t    UPDATE_FLAGS (TREE_OPERAND (node, 3));\n \t}\n       /* Likewise, just because this is a COMPONENT_REF doesn't mean we have a\n \t FIELD_DECL, apparently.  The G++ front end can put something else\n@@ -2921,46 +3019,35 @@ do { tree _node = (NODE); \\\n \t       && TREE_CODE (TREE_OPERAND (node, 1)) == FIELD_DECL)\n \t{\n \t  if (TREE_OPERAND (node, 2))\n-\t    UPDATE_TITCSE (TREE_OPERAND (node, 2));\n+\t    UPDATE_FLAGS (TREE_OPERAND (node, 2));\n \t}\n       else if (TREE_CODE (node) == BIT_FIELD_REF)\n-\tUPDATE_TITCSE (TREE_OPERAND (node, 2));\n+\tUPDATE_FLAGS (TREE_OPERAND (node, 2));\n     }\n \n-  node = lang_hooks.expr_to_decl (node, &tc, &ti, &se);\n+  node = lang_hooks.expr_to_decl (node, &tc, &se);\n \n   /* Now see what's inside.  If it's an INDIRECT_REF, copy our properties from\n-     the address, since &(*a)->b is a form of addition.  If it's a decl, it's\n-     invariant and constant if the decl is static.  It's also invariant if it's\n-     a decl in the current function.  Taking the address of a volatile variable\n-     is not volatile.  If it's a constant, the address is both invariant and\n-     constant.  Otherwise it's neither.  */\n+     the address, since &(*a)->b is a form of addition.  If it's a constant, the\n+     address is constant too.  If it's a decl, its address is constant if the\n+     decl is static.  Everything else is not constant and, furthermore,\n+     taking the address of a volatile variable is not volatile.  */\n   if (TREE_CODE (node) == INDIRECT_REF)\n-    UPDATE_TITCSE (TREE_OPERAND (node, 0));\n-  else if (DECL_P (node))\n-    {\n-      if (staticp (node))\n-\t;\n-      else if (decl_function_context (node) == current_function_decl\n-\t       /* Addresses of thread-local variables are invariant.  */\n-\t       || (TREE_CODE (node) == VAR_DECL\n-\t\t   && DECL_THREAD_LOCAL_P (node)))\n-\ttc = false;\n-      else\n-\tti = tc = false;\n-    }\n+    UPDATE_FLAGS (TREE_OPERAND (node, 0));\n   else if (CONSTANT_CLASS_P (node))\n     ;\n+  else if (DECL_P (node))\n+    tc &= (staticp (node) != NULL_TREE);\n   else\n     {\n-      ti = tc = false;\n+      tc = false;\n       se |= TREE_SIDE_EFFECTS (node);\n     }\n \n+\n   TREE_CONSTANT (t) = tc;\n-  TREE_INVARIANT (t) = ti;\n   TREE_SIDE_EFFECTS (t) = se;\n-#undef UPDATE_TITCSE\n+#undef UPDATE_FLAGS\n }\n \n /* Build an expression of code CODE, data type TYPE, and operands as\n@@ -3057,9 +3144,6 @@ build1_stat (enum tree_code code, tree type, tree node MEM_STAT_DECL)\n \t  && node && !TYPE_P (node)\n \t  && TREE_CONSTANT (node))\n \tTREE_CONSTANT (t) = 1;\n-      if ((TREE_CODE_CLASS (code) == tcc_unary || code == VIEW_CONVERT_EXPR)\n-\t  && node && TREE_INVARIANT (node))\n-\tTREE_INVARIANT (t) = 1;\n       if (TREE_CODE_CLASS (code) == tcc_reference\n \t  && node && TREE_THIS_VOLATILE (node))\n \tTREE_THIS_VOLATILE (t) = 1;\n@@ -3080,15 +3164,13 @@ build1_stat (enum tree_code code, tree type, tree node MEM_STAT_DECL)\n \t  read_only = 0;\t\t\\\n         if (!TREE_CONSTANT (arg##N))\t\\\n \t  constant = 0;\t\t\t\\\n-\tif (!TREE_INVARIANT (arg##N))\t\\\n-\t  invariant = 0;\t\t\\\n       }\t\t\t\t\t\\\n   } while (0)\n \n tree\n build2_stat (enum tree_code code, tree tt, tree arg0, tree arg1 MEM_STAT_DECL)\n {\n-  bool constant, read_only, side_effects, invariant;\n+  bool constant, read_only, side_effects;\n   tree t;\n \n   gcc_assert (TREE_CODE_LENGTH (code) == 2);\n@@ -3125,14 +3207,12 @@ build2_stat (enum tree_code code, tree tt, tree arg0, tree arg1 MEM_STAT_DECL)\n \t      || TREE_CODE_CLASS (code) == tcc_binary);\n   read_only = 1;\n   side_effects = TREE_SIDE_EFFECTS (t);\n-  invariant = constant;\n \n   PROCESS_ARG(0);\n   PROCESS_ARG(1);\n \n   TREE_READONLY (t) = read_only;\n   TREE_CONSTANT (t) = constant;\n-  TREE_INVARIANT (t) = invariant;\n   TREE_SIDE_EFFECTS (t) = side_effects;\n   TREE_THIS_VOLATILE (t)\n     = (TREE_CODE_CLASS (code) == tcc_reference\n@@ -3161,7 +3241,7 @@ tree\n build3_stat (enum tree_code code, tree tt, tree arg0, tree arg1,\n \t     tree arg2 MEM_STAT_DECL)\n {\n-  bool constant, read_only, side_effects, invariant;\n+  bool constant, read_only, side_effects;\n   tree t;\n \n   gcc_assert (TREE_CODE_LENGTH (code) == 3);\n@@ -3197,7 +3277,7 @@ tree\n build4_stat (enum tree_code code, tree tt, tree arg0, tree arg1,\n \t     tree arg2, tree arg3 MEM_STAT_DECL)\n {\n-  bool constant, read_only, side_effects, invariant;\n+  bool constant, read_only, side_effects;\n   tree t;\n \n   gcc_assert (TREE_CODE_LENGTH (code) == 4);\n@@ -3224,7 +3304,7 @@ tree\n build5_stat (enum tree_code code, tree tt, tree arg0, tree arg1,\n \t     tree arg2, tree arg3, tree arg4 MEM_STAT_DECL)\n {\n-  bool constant, read_only, side_effects, invariant;\n+  bool constant, read_only, side_effects;\n   tree t;\n \n   gcc_assert (TREE_CODE_LENGTH (code) == 5);\n@@ -3253,7 +3333,7 @@ build7_stat (enum tree_code code, tree tt, tree arg0, tree arg1,\n \t     tree arg2, tree arg3, tree arg4, tree arg5,\n \t     tree arg6 MEM_STAT_DECL)\n {\n-  bool constant, read_only, side_effects, invariant;\n+  bool constant, read_only, side_effects;\n   tree t;\n \n   gcc_assert (code == TARGET_MEM_REF);\n@@ -3883,8 +3963,7 @@ merge_dllimport_decl_attributes (tree old, tree new)\n \t\t   \"after being referenced with dll linkage\", new);\n \t  /* If we have used a variable's address with dllimport linkage,\n \t      keep the old DECL_DLLIMPORT_P flag: the ADDR_EXPR using the\n-\t      decl may already have had TREE_INVARIANT and TREE_CONSTANT\n-\t      computed.\n+\t      decl may already have had TREE_CONSTANT computed.\n \t      We still remove the attribute so that assembler code refers\n \t      to '&foo rather than '_imp__foo'.  */\n \t  if (TREE_CODE (old) == VAR_DECL && TREE_ADDRESSABLE (old))"}, {"sha": "5821da73f22e0248eb812d9d5dca4c77c49eb89d", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51eed2800da645f00fb35fcee7a217090ec61f54/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=51eed2800da645f00fb35fcee7a217090ec61f54", "patch": "@@ -387,7 +387,6 @@ struct tree_base GTY(())\n   unsigned private_flag : 1;\n   unsigned protected_flag : 1;\n   unsigned deprecated_flag : 1;\n-  unsigned invariant_flag : 1;\n   unsigned saturating_flag : 1;\n   unsigned default_def_flag : 1;\n \n@@ -400,7 +399,7 @@ struct tree_base GTY(())\n   unsigned lang_flag_6 : 1;\n   unsigned visited : 1;\n \n-  unsigned spare : 22;\n+  unsigned spare : 23;\n \n   /* FIXME tuples: Eventually, we need to move this somewhere external to\n      the trees.  */\n@@ -579,11 +578,6 @@ struct gimple_stmt GTY(())\n \n    \tUsed in tree traversals to mark visited nodes.\n \n-   invariant_flag:\n-\n-\tTREE_INVARIANT in\n-\t    all expressions.\n-\n    saturating_flag:\n \n        TYPE_SATURATING in\n@@ -1372,12 +1366,6 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n #define IDENTIFIER_TRANSPARENT_ALIAS(NODE) \\\n   (IDENTIFIER_NODE_CHECK (NODE)->base.deprecated_flag)\n \n-/* Value of expression is function invariant.  A strict subset of\n-   TREE_CONSTANT, such an expression is constant over any one function\n-   invocation, though not across different invocations.  May appear in\n-   any expression node.  */\n-#define TREE_INVARIANT(NODE) ((NODE)->base.invariant_flag)\n-\n /* In fixed-point types, means a saturating type.  */\n #define TYPE_SATURATING(NODE) ((NODE)->base.saturating_flag)\n \n@@ -4886,6 +4874,7 @@ extern tree strip_float_extensions (tree);\n \n /* In tree.c */\n extern int really_constant_p (const_tree);\n+extern bool decl_address_invariant_p (const_tree);\n extern int int_fits_type_p (const_tree, const_tree);\n #ifndef GENERATOR_FILE\n extern void get_type_static_bounds (const_tree, mpz_t, mpz_t);"}]}