{"sha": "50bf47fdc08807bf8fc0362d677c8fc7dd4514b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBiZjQ3ZmRjMDg4MDdiZjhmYzAzNjJkNjc3YzhmYzdkZDQ1MTRiMA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-08-09T07:40:50Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-08-09T07:40:50Z"}, "message": "re PR tree-optimization/71802 (gcc ICE at -O3 on valid code on x86_64-linux-gnu in expand_LOOP_VECTORIZED)\n\n2016-08-09  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/71802\n\t* tree-cfgcleanup.c (cleanup_tree_cfg_bb): Make sure to catch\n\tall merge opportunities with the predecessor.\n\n\t* gcc.dg/torture/pr71802.c: New testcase.\n\nFrom-SVN: r239274", "tree": {"sha": "2bb2c9f41ad63b81575fdbde736acc6db6257acc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bb2c9f41ad63b81575fdbde736acc6db6257acc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50bf47fdc08807bf8fc0362d677c8fc7dd4514b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50bf47fdc08807bf8fc0362d677c8fc7dd4514b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50bf47fdc08807bf8fc0362d677c8fc7dd4514b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50bf47fdc08807bf8fc0362d677c8fc7dd4514b0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fe7afdf5b55d1c3b8b00e7ea16b1b5df0537f45a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe7afdf5b55d1c3b8b00e7ea16b1b5df0537f45a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe7afdf5b55d1c3b8b00e7ea16b1b5df0537f45a"}], "stats": {"total": 77, "additions": 63, "deletions": 14}, "files": [{"sha": "2d96f88466a78ba61ebb3dc9bb9db0ea5961f1eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50bf47fdc08807bf8fc0362d677c8fc7dd4514b0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50bf47fdc08807bf8fc0362d677c8fc7dd4514b0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=50bf47fdc08807bf8fc0362d677c8fc7dd4514b0", "patch": "@@ -1,3 +1,9 @@\n+2016-08-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71802\n+\t* tree-cfgcleanup.c (cleanup_tree_cfg_bb): Make sure to catch\n+\tall merge opportunities with the predecessor.\n+\n 2016-08-09  Richard Biener  <rguenther@suse.de>\n \n \tPR ipa/68273"}, {"sha": "9ba1052e76806641a34eedb92899073bd30dabc2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50bf47fdc08807bf8fc0362d677c8fc7dd4514b0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50bf47fdc08807bf8fc0362d677c8fc7dd4514b0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=50bf47fdc08807bf8fc0362d677c8fc7dd4514b0", "patch": "@@ -1,3 +1,8 @@\n+2016-08-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71802\n+\t* gcc.dg/torture/pr71802.c: New testcase.\n+\n 2016-08-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/72809"}, {"sha": "0dd14671c5198e823c6195197dfda31b13251a4f", "filename": "gcc/testsuite/gcc.dg/torture/pr71802.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50bf47fdc08807bf8fc0362d677c8fc7dd4514b0/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71802.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50bf47fdc08807bf8fc0362d677c8fc7dd4514b0/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71802.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71802.c?ref=50bf47fdc08807bf8fc0362d677c8fc7dd4514b0", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+\n+int b, c;\n+long d, f;\n+void fn1()\n+{\n+  char g;\n+  long long h = 0;\n+  int *i;\n+  if (0) {\n+L2:\n+      b && (b = f);\n+      d = 3;\n+      for (; d;) {\n+\t  char *j = &g;\n+\t  c = *j = 0;\n+L3:\n+\t  *j %= b;\n+\t  for (; g <= 4;)\n+\t    ;\n+      }\n+      goto L2;\n+  }\n+  for (; *i; *i = 1) {\n+      if ((h -= 4) == (h != (b ?: d))) {\n+\t  g = 3;\n+\t  goto L3;\n+      }\n+      i = (int *)&h;\n+      *i = f;\n+      i = (int *)&f;\n+      if ((h && 6) - (h = 0))\n+\tgoto L2;\n+  }\n+  for (; d;)\n+    goto L3;\n+}"}, {"sha": "3fe0d3e89941579348c01a94adcc83737d37e447", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50bf47fdc08807bf8fc0362d677c8fc7dd4514b0/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50bf47fdc08807bf8fc0362d677c8fc7dd4514b0/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=50bf47fdc08807bf8fc0362d677c8fc7dd4514b0", "patch": "@@ -641,24 +641,25 @@ cleanup_tree_cfg_bb (basic_block bb)\n       && remove_forwarder_block (bb))\n     return true;\n \n+  /* If there is a merge opportunity with the predecessor\n+     do nothing now but wait until we process the predecessor.\n+     This happens when we visit BBs in a non-optimal order and\n+     avoids quadratic behavior with adjusting stmts BB pointer.  */\n+  if (single_pred_p (bb)\n+      && can_merge_blocks_p (single_pred (bb), bb))\n+    /* But make sure we _do_ visit it.  When we remove unreachable paths\n+       ending in a backedge we fail to mark the destinations predecessors\n+       as changed.  */\n+    bitmap_set_bit (cfgcleanup_altered_bbs, single_pred (bb)->index);\n+\n   /* Merging the blocks may create new opportunities for folding\n      conditional branches (due to the elimination of single-valued PHI\n      nodes).  */\n-  if (single_succ_p (bb)\n-      && can_merge_blocks_p (bb, single_succ (bb)))\n+  else if (single_succ_p (bb)\n+\t   && can_merge_blocks_p (bb, single_succ (bb)))\n     {\n-      /* If there is a merge opportunity with the predecessor\n-         do nothing now but wait until we process the predecessor.\n-\t This happens when we visit BBs in a non-optimal order and\n-\t avoids quadratic behavior with adjusting stmts BB pointer.  */\n-      if (single_pred_p (bb)\n-\t  && can_merge_blocks_p (single_pred (bb), bb))\n-\t;\n-      else\n-\t{\n-\t  merge_blocks (bb, single_succ (bb));\n-\t  return true;\n-\t}\n+      merge_blocks (bb, single_succ (bb));\n+      return true;\n     }\n \n   return false;"}]}