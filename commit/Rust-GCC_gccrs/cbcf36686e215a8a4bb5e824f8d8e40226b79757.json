{"sha": "cbcf36686e215a8a4bb5e824f8d8e40226b79757", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JjZjM2Njg2ZTIxNWE4YTRiYjVlODI0ZjhkOGU0MDIyNmI3OTc1Nw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-12-03T10:12:17Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-12-03T10:12:17Z"}, "message": "utils.c (fold_convert_size): New function.\n\n\t* gcc-interface/utils.c (fold_convert_size): New function.\n\t(fold_bit_position): Invoke it to do further folding.\n\nFrom-SVN: r278929", "tree": {"sha": "37c7de8a67ad9294186af9bfd72b264bfa9b4c9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37c7de8a67ad9294186af9bfd72b264bfa9b4c9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cbcf36686e215a8a4bb5e824f8d8e40226b79757", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbcf36686e215a8a4bb5e824f8d8e40226b79757", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbcf36686e215a8a4bb5e824f8d8e40226b79757", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbcf36686e215a8a4bb5e824f8d8e40226b79757/comments", "author": null, "committer": null, "parents": [{"sha": "dd2dae9438ccebc83d561b375506cc3334acfa04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd2dae9438ccebc83d561b375506cc3334acfa04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd2dae9438ccebc83d561b375506cc3334acfa04"}], "stats": {"total": 27, "additions": 20, "deletions": 7}, "files": [{"sha": "f8b9f18c8c1ebad8ebafdb19ca62438c80a984af", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbcf36686e215a8a4bb5e824f8d8e40226b79757/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbcf36686e215a8a4bb5e824f8d8e40226b79757/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=cbcf36686e215a8a4bb5e824f8d8e40226b79757", "patch": "@@ -1,3 +1,8 @@\n+2019-12-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils.c (fold_convert_size): New function.\n+\t(fold_bit_position): Invoke it to do further folding.\n+\n 2019-12-03  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_subprog_type): With the Copy-In/"}, {"sha": "80c0716299f5c65f4f6326bcae969c1a69593613", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbcf36686e215a8a4bb5e824f8d8e40226b79757/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbcf36686e215a8a4bb5e824f8d8e40226b79757/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=cbcf36686e215a8a4bb5e824f8d8e40226b79757", "patch": "@@ -2349,19 +2349,27 @@ merge_sizes (tree last_size, tree first_bit, tree size, bool special, bool max)\n   return new_size;\n }\n \n+/* Convert the size expression EXPR to TYPE and fold the result.  */\n+\n+static tree\n+fold_convert_size (tree type, tree expr)\n+{\n+  /* We assume that size expressions do not wrap around.  */\n+  if (TREE_CODE (expr) == MULT_EXPR || TREE_CODE (expr) == PLUS_EXPR)\n+    return size_binop (TREE_CODE (expr),\n+\t\t       fold_convert_size (type, TREE_OPERAND (expr, 0)),\n+\t\t       fold_convert_size (type, TREE_OPERAND (expr, 1)));\n+\n+  return fold_convert (type, expr);\n+}\n+\n /* Return the bit position of FIELD, in bits from the start of the record,\n    and fold it as much as possible.  This is a tree of type bitsizetype.  */\n \n static tree\n fold_bit_position (const_tree field)\n {\n-  tree offset = DECL_FIELD_OFFSET (field);\n-  if (TREE_CODE (offset) == MULT_EXPR || TREE_CODE (offset) == PLUS_EXPR)\n-    offset = size_binop (TREE_CODE (offset),\n-\t\t\t fold_convert (bitsizetype, TREE_OPERAND (offset, 0)),\n-\t\t\t fold_convert (bitsizetype, TREE_OPERAND (offset, 1)));\n-  else\n-    offset = fold_convert (bitsizetype, offset);\n+  tree offset = fold_convert_size (bitsizetype, DECL_FIELD_OFFSET (field));\n   return size_binop (PLUS_EXPR, DECL_FIELD_BIT_OFFSET (field),\n  \t\t     size_binop (MULT_EXPR, offset, bitsize_unit_node));\n }"}]}