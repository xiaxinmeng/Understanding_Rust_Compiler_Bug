{"sha": "952095bb053cfef47b48cc4345d658b8d8829800", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTUyMDk1YmIwNTNjZmVmNDdiNDhjYzQzNDVkNjU4YjhkODgyOTgwMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-26T23:20:31Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-28T10:52:22Z"}, "message": "libstdc++: Name std::function template parameter\n\nThis avoids \"<template-parameter-2-2>\" being shown in the diagnostics\nfor ill-formed uses of std::function constructor:\n\nIn instantiation of 'std::function<_Res(_ArgTypes ...)>::function(_Functor&&)\n[with _Functor = f(f()::_Z1fv.frame*)::<lambda()>;\n<template-parameter-2-2> = void; _Res = void; _ArgTypes = {}]'\n\nInstead we get:\n\nIn instantiation of 'std::function<_Res(_ArgTypes ...)>::function(_Functor&&)\n[with _Functor = f(f()::_Z1fv.frame*)::<lambda()>;\n_Constraints = void; _Res = void; _ArgTypes = {}]'\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/std_function.h (function::function(F&&)): Give\n\tname to defaulted template parameter, to improve diagnostics.\n\tUse markdown for more doxygen comments.", "tree": {"sha": "cacb2bc6592767d527461f9758939ae3fb4cafb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cacb2bc6592767d527461f9758939ae3fb4cafb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/952095bb053cfef47b48cc4345d658b8d8829800", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/952095bb053cfef47b48cc4345d658b8d8829800", "html_url": "https://github.com/Rust-GCC/gccrs/commit/952095bb053cfef47b48cc4345d658b8d8829800", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/952095bb053cfef47b48cc4345d658b8d8829800/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91f78b673b1f8d5bca52b1947206f71c2ffa4f60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91f78b673b1f8d5bca52b1947206f71c2ffa4f60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91f78b673b1f8d5bca52b1947206f71c2ffa4f60"}], "stats": {"total": 32, "additions": 15, "deletions": 17}, "files": [{"sha": "3dda820bd1a792ad95a71d7bb3fa431d22e0943b", "filename": "libstdc++-v3/include/bits/std_function.h", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/952095bb053cfef47b48cc4345d658b8d8829800/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/952095bb053cfef47b48cc4345d658b8d8829800/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_function.h?ref=952095bb053cfef47b48cc4345d658b8d8829800", "patch": "@@ -326,10 +326,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { };\n \n   /**\n-   *  @brief Primary class template for std::function.\n+   *  @brief Polymorphic function wrapper.\n    *  @ingroup functors\n-   *\n-   *  Polymorphic function wrapper.\n+   *  @since C++11\n    */\n   template<typename _Res, typename... _ArgTypes>\n     class function<_Res(_ArgTypes...)>\n@@ -364,7 +363,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       /**\n        *  @brief Default construct creates an empty function call wrapper.\n-       *  @post @c !(bool)*this\n+       *  @post `!(bool)*this`\n        */\n       function() noexcept\n       : _Function_base() { }\n@@ -379,10 +378,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       /**\n        *  @brief %Function copy constructor.\n        *  @param __x A %function object with identical call signature.\n-       *  @post @c bool(*this) == bool(__x)\n+       *  @post `bool(*this) == bool(__x)`\n        *\n-       *  The newly-created %function contains a copy of the target of @a\n-       *  __x (if it has one).\n+       *  The newly-created %function contains a copy of the target of\n+       *  `__x` (if it has one).\n        */\n       function(const function& __x)\n       : _Function_base()\n@@ -399,7 +398,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  @brief %Function move constructor.\n        *  @param __x A %function object rvalue with identical call signature.\n        *\n-       *  The newly-created %function contains the target of @a __x\n+       *  The newly-created %function contains the target of `__x`\n        *  (if it has one).\n        */\n       function(function&& __x) noexcept\n@@ -418,22 +417,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  @brief Builds a %function that targets a copy of the incoming\n        *  function object.\n        *  @param __f A %function object that is callable with parameters of\n-       *  type @c T1, @c T2, ..., @c TN and returns a value convertible\n-       *  to @c Res.\n+       *  type `ArgTypes...` and returns a value convertible to `Res`.\n        *\n        *  The newly-created %function object will target a copy of\n-       *  @a __f. If @a __f is @c reference_wrapper<F>, then this function\n-       *  object will contain a reference to the function object @c\n-       *  __f.get(). If @a __f is a NULL function pointer or NULL\n-       *  pointer-to-member, the newly-created object will be empty.\n+       *  `__f`. If `__f` is `reference_wrapper<F>`, then this function\n+       *  object will contain a reference to the function object `__f.get()`.\n+       *  If `__f` is a null function pointer, null pointer-to-member, or\n+       *  empty `std::function`, the newly-created object will be empty.\n        *\n-       *  If @a __f is a non-NULL function pointer or an object of type @c\n-       *  reference_wrapper<F>, this function will not throw.\n+       *  If `__f` is a non-null function pointer or an object of type\n+       *  `reference_wrapper<F>`, this function will not throw.\n        */\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 2774. std::function construction vs assignment\n       template<typename _Functor,\n-\t       typename = _Requires<_Callable<_Functor>>>\n+\t       typename _Constraints = _Requires<_Callable<_Functor>>>\n \tfunction(_Functor&& __f)\n \tnoexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())\n \t: _Function_base()"}]}