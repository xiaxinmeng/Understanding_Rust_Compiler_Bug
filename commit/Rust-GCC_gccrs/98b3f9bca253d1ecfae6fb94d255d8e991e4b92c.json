{"sha": "98b3f9bca253d1ecfae6fb94d255d8e991e4b92c", "node_id": "C_kwDOANBUbNoAKDk4YjNmOWJjYTI1M2QxZWNmYWU2ZmI5NGQyNTVkOGU5OTFlNGI5MmM", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-07-07T10:12:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-07T10:12:11Z"}, "message": "Merge #1364 #1365 #1368\n\n1364: Allow linemap to be optional nullptr r=philberty a=philberty\n\nThe line map within the lexer is used to notify GCC of location data.\r\nThis lexer is used on raw string buffers where the linemap can be\r\nnull and thus can hit nullptr's. This patch wraps the linemap usage\r\nbehind a function. We might make the linemap mandatory as a reference\r\nbut lets figure out how the location info should look for imports first.\n\n1365: Support extern-blocks in ast-dumps r=philberty a=philberty\n\nThis allows us to support really basic expressions and extern blocks. These\r\nare used for the hello world version of importing metadata in crates.\r\n\n\n1368: Fix bad ABI from string method r=philberty a=philberty\n\nWe use this method to turn the string ABI into the enum. The\r\nrust abi was wrongly turned into the C ABI always which was\r\ncausing issues on the mangling logic for extern crate items.\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "62ba451173cecc5f5b6ef87b6595ca305cceff4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62ba451173cecc5f5b6ef87b6595ca305cceff4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98b3f9bca253d1ecfae6fb94d255d8e991e4b92c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJixrF7CRBK7hj4Ov3rIwAAlmAIAKXMqQQC5lIpfzw9HTnkJqMU\n9O7Cs3D5pnsaVBgJ/z7EpFuKPE4ZhtKfsyTii7ENhmhqA4ivuPYH8rHGdhXe+q+l\n0Gop0PcSxl2zgkP78IlBjChnwfueL26WfjMB1DFJmprqRWo3mnwBf3LQjYXOyNfr\ngqqYeQ+P6/mWNhCVpQYcPz80xXNGrRpbQtcpF7hCLMWsoSvgnbykv+TKnx8aicMJ\nv8Eh3YEu0ptByxHqmxRa8jzG29pXl3zo4TbuuGkBX9gId6J+dD1YYNDfwVmoR9rZ\nUV1zpbc06EPPoHKgGn2jwoi5PK3tpfG7yTVU9B5LFxF1V7XG6h90wshZM7NFhac=\n=Y71H\n-----END PGP SIGNATURE-----\n", "payload": "tree 62ba451173cecc5f5b6ef87b6595ca305cceff4e\nparent c8a9218a5bab48fffe1f5fa02244954d55f8945c\nparent 143219798492864c8eff7fecbdb9257fa10bf4ec\nparent 9507bdec30fb7f88a02765f83f29cce52a5cf8ad\nparent d99b68560c0de90f1e3b23bdf08f9c01e190534a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1657188731 +0000\ncommitter GitHub <noreply@github.com> 1657188731 +0000\n\nMerge #1364 #1365 #1368\n\n1364: Allow linemap to be optional nullptr r=philberty a=philberty\n\nThe line map within the lexer is used to notify GCC of location data.\r\nThis lexer is used on raw string buffers where the linemap can be\r\nnull and thus can hit nullptr's. This patch wraps the linemap usage\r\nbehind a function. We might make the linemap mandatory as a reference\r\nbut lets figure out how the location info should look for imports first.\n\n1365: Support extern-blocks in ast-dumps r=philberty a=philberty\n\nThis allows us to support really basic expressions and extern blocks. These\r\nare used for the hello world version of importing metadata in crates.\r\n\n\n1368: Fix bad ABI from string method r=philberty a=philberty\n\nWe use this method to turn the string ABI into the enum. The\r\nrust abi was wrongly turned into the C ABI always which was\r\ncausing issues on the mangling logic for extern crate items.\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98b3f9bca253d1ecfae6fb94d255d8e991e4b92c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98b3f9bca253d1ecfae6fb94d255d8e991e4b92c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98b3f9bca253d1ecfae6fb94d255d8e991e4b92c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8a9218a5bab48fffe1f5fa02244954d55f8945c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8a9218a5bab48fffe1f5fa02244954d55f8945c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8a9218a5bab48fffe1f5fa02244954d55f8945c"}, {"sha": "143219798492864c8eff7fecbdb9257fa10bf4ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/143219798492864c8eff7fecbdb9257fa10bf4ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/143219798492864c8eff7fecbdb9257fa10bf4ec"}, {"sha": "9507bdec30fb7f88a02765f83f29cce52a5cf8ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9507bdec30fb7f88a02765f83f29cce52a5cf8ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9507bdec30fb7f88a02765f83f29cce52a5cf8ad"}, {"sha": "d99b68560c0de90f1e3b23bdf08f9c01e190534a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d99b68560c0de90f1e3b23bdf08f9c01e190534a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d99b68560c0de90f1e3b23bdf08f9c01e190534a"}], "stats": {"total": 112, "additions": 98, "deletions": 14}, "files": [{"sha": "a06dd72abca1bdd2844528d14e411b01f80c29b9", "filename": "gcc/rust/ast/rust-ast-dump.cc", "status": "modified", "additions": 80, "deletions": 7, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b3f9bca253d1ecfae6fb94d255d8e991e4b92c/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b3f9bca253d1ecfae6fb94d255d8e991e4b92c/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.cc?ref=98b3f9bca253d1ecfae6fb94d255d8e991e4b92c", "patch": "@@ -51,6 +51,12 @@ Dump::go (AST::Crate &crate)\n     item->accept_vis (*this);\n }\n \n+void\n+Dump::go (AST::Item &item)\n+{\n+  item.accept_vis (*this);\n+}\n+\n void\n Dump::format_function_param (FunctionParam &param)\n {\n@@ -73,7 +79,9 @@ Dump::visit (AttrInputMetaItemContainer &input)\n \n void\n Dump::visit (IdentifierExpr &ident_expr)\n-{}\n+{\n+  stream << ident_expr.get_ident ();\n+}\n \n void\n Dump::visit (Lifetime &lifetime)\n@@ -121,7 +129,9 @@ Dump::visit (QualifiedPathInType &path)\n // rust-expr.h\n void\n Dump::visit (LiteralExpr &expr)\n-{}\n+{\n+  stream << expr.as_string ();\n+}\n \n void\n Dump::visit (AttrInputLiteral &attr_input)\n@@ -153,7 +163,24 @@ Dump::visit (NegationExpr &expr)\n \n void\n Dump::visit (ArithmeticOrLogicalExpr &expr)\n-{}\n+{\n+  expr.get_left_expr ()->accept_vis (*this);\n+  stream << \" \";\n+\n+  switch (expr.get_expr_type ())\n+    {\n+    case ArithmeticOrLogicalOperator::ADD:\n+      stream << \"+\";\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n+      break;\n+    }\n+\n+  stream << \" \";\n+  expr.get_right_expr ()->accept_vis (*this);\n+}\n \n void\n Dump::visit (ComparisonExpr &expr)\n@@ -257,7 +284,10 @@ Dump::visit (BlockExpr &expr)\n     }\n \n   if (expr.has_tail_expr ())\n-    expr.get_tail_expr ()->accept_vis (*this);\n+    {\n+      stream << indentation;\n+      expr.get_tail_expr ()->accept_vis (*this);\n+    }\n \n   indentation.decrement ();\n   stream << \"\\n\" << indentation << \"}\\n\";\n@@ -649,12 +679,55 @@ Dump::visit (ExternalStaticItem &item)\n {}\n \n void\n-Dump::visit (ExternalFunctionItem &item)\n-{}\n+Dump::visit (ExternalFunctionItem &function)\n+{\n+  stream << \"fn \" << function.get_identifier () << '(';\n+\n+  for (size_t i = 0; i < function.get_function_params ().size (); i++)\n+    {\n+      auto &param = function.get_function_params ().at (i);\n+      bool has_next = (i + 1) < function.get_function_params ().size ();\n+\n+      stream << param.get_name () << \": \";\n+      param.get_type ()->accept_vis (*this);\n+\n+      if (has_next)\n+\tstream << \", \";\n+    }\n+\n+  stream << ')';\n+  if (function.has_return_type ())\n+    {\n+      stream << \"-> \";\n+      function.get_return_type ()->accept_vis (*this);\n+    }\n+}\n \n void\n Dump::visit (ExternBlock &block)\n-{}\n+{\n+  stream << \"extern \";\n+\n+  if (block.has_abi ())\n+    {\n+      stream << \"\\\"\";\n+      stream << block.get_abi ();\n+      stream << \"\\\" \";\n+    }\n+\n+  stream << \"{\\n\";\n+  indentation.increment ();\n+\n+  for (auto &item : block.get_extern_items ())\n+    {\n+      stream << indentation;\n+      item->accept_vis (*this);\n+      stream << \";\\n\";\n+    }\n+\n+  indentation.decrement ();\n+  stream << \"\\n\" << indentation << \"}\\n\";\n+}\n \n // rust-macro.h\n void"}, {"sha": "d74d88759b0afb389f2550e5cd4b537b99a5a7db", "filename": "gcc/rust/ast/rust-ast-dump.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b3f9bca253d1ecfae6fb94d255d8e991e4b92c/gcc%2Frust%2Fast%2Frust-ast-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b3f9bca253d1ecfae6fb94d255d8e991e4b92c/gcc%2Frust%2Fast%2Frust-ast-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.h?ref=98b3f9bca253d1ecfae6fb94d255d8e991e4b92c", "patch": "@@ -50,6 +50,7 @@ class Dump : public ASTVisitor\n    * Run the visitor on an entire crate and its items\n    */\n   void go (AST::Crate &crate);\n+  void go (AST::Item &item);\n \n private:\n   std::ostream &stream;"}, {"sha": "5447c72a8b16fd16185334156c68141a7d6cc77e", "filename": "gcc/rust/lex/rust-lex.cc", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b3f9bca253d1ecfae6fb94d255d8e991e4b92c/gcc%2Frust%2Flex%2Frust-lex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b3f9bca253d1ecfae6fb94d255d8e991e4b92c/gcc%2Frust%2Flex%2Frust-lex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flex%2Frust-lex.cc?ref=98b3f9bca253d1ecfae6fb94d255d8e991e4b92c", "patch": "@@ -347,7 +347,7 @@ Lexer::build_token ()\n \t\t  current_line++;\n \t\t  current_column = 1;\n \t\t  // tell line_table that new line starts\n-\t\t  line_map->start_line (current_line, max_column_hint);\n+\t\t  start_line (current_line, max_column_hint);\n \t\t  break;\n \t\t}\n \t      else\n@@ -368,7 +368,7 @@ Lexer::build_token ()\n \t  current_line++;\n \t  current_column = 1;\n \t  // tell line_table that new line starts\n-\t  line_map->start_line (current_line, max_column_hint);\n+\t  start_line (current_line, max_column_hint);\n \t  continue;\n \tcase '\\r': // cr\n \t  // Ignore, we expect a newline (lf) soon.\n@@ -540,7 +540,7 @@ Lexer::build_token ()\n \t      current_line++;\n \t      current_column = 1;\n \t      // tell line_table that new line starts\n-\t      line_map->start_line (current_line, max_column_hint);\n+\t      start_line (current_line, max_column_hint);\n \n \t      str.shrink_to_fit ();\n \t      if (is_inner)\n@@ -617,7 +617,7 @@ Lexer::build_token ()\n \t\t      current_line++;\n \t\t      current_column = 1;\n \t\t      // tell line_table that new line starts\n-\t\t      line_map->start_line (current_line, max_column_hint);\n+\t\t      start_line (current_line, max_column_hint);\n \t\t      continue;\n \t\t    }\n \n@@ -686,7 +686,7 @@ Lexer::build_token ()\n \t\t      current_line++;\n \t\t      current_column = 1;\n \t\t      // tell line_table that new line starts\n-\t\t      line_map->start_line (current_line, max_column_hint);\n+\t\t      start_line (current_line, max_column_hint);\n \t\t      str += '\\n';\n \t\t      continue;\n \t\t    }\n@@ -1400,7 +1400,7 @@ Lexer::parse_partial_string_continue ()\n \t  current_line++;\n \t  current_column = 1;\n \t  // tell line_table that new line starts\n-\t  line_map->start_line (current_line, max_column_hint);\n+\t  start_line (current_line, max_column_hint);\n \n \t  // reset \"length\"\n \t  additional_length_offset = 1;\n@@ -2688,4 +2688,12 @@ Lexer::split_current_token (TokenId new_left, TokenId new_right)\n   token_queue.replace_current_value (std::move (new_left_tok));\n   token_queue.insert (1, std::move (new_right_tok));\n }\n+\n+void\n+Lexer::start_line (int current_line, int current_column)\n+{\n+  if (line_map)\n+    line_map->start_line (current_line, current_column);\n+}\n+\n } // namespace Rust"}, {"sha": "b501a69a7952295521cda6c4629e917bb69bc372", "filename": "gcc/rust/lex/rust-lex.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b3f9bca253d1ecfae6fb94d255d8e991e4b92c/gcc%2Frust%2Flex%2Frust-lex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b3f9bca253d1ecfae6fb94d255d8e991e4b92c/gcc%2Frust%2Flex%2Frust-lex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flex%2Frust-lex.h?ref=98b3f9bca253d1ecfae6fb94d255d8e991e4b92c", "patch": "@@ -205,6 +205,8 @@ class Lexer\n   std::string get_filename () { return std::string (input.get_filename ()); }\n \n private:\n+  void start_line (int current_line, int current_column);\n+\n   // File for use as input.\n   RAIIFile input;\n   // TODO is this actually required? could just have file storage in InputSource"}, {"sha": "473988799d1f55a6843ea333280eb5d18d1748d5", "filename": "gcc/rust/util/rust-abi.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b3f9bca253d1ecfae6fb94d255d8e991e4b92c/gcc%2Frust%2Futil%2Frust-abi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b3f9bca253d1ecfae6fb94d255d8e991e4b92c/gcc%2Frust%2Futil%2Frust-abi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-abi.cc?ref=98b3f9bca253d1ecfae6fb94d255d8e991e4b92c", "patch": "@@ -22,7 +22,7 @@ Rust::ABI\n get_abi_from_string (const std::string &abi)\n {\n   if (abi.compare (\"rust\") == 0)\n-    return Rust::ABI::C;\n+    return Rust::ABI::RUST;\n   else if (abi.compare (\"rust-intrinsic\") == 0)\n     return Rust::ABI::INTRINSIC;\n   else if (abi.compare (\"C\") == 0)"}]}