{"sha": "f6ba5d039f988babdd99b5cdfb4557c380e57d69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZiYTVkMDM5Zjk4OGJhYmRkOTliNWNkZmI0NTU3YzM4MGU1N2Q2OQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-04-13T10:43:39Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-04-13T10:43:39Z"}, "message": "aarch64: Restore bfxil optimization [PR100028]\n\nSimilarly to PR87763 for bfi, the GCC 9 combiner changes to not combine\nmoves from hard registers regressed the following testcase where we no\nlonger recognize bfxil and emit 3 instructions instead.\n\nThe following patch adds define_insn patterns that match what the combiner\nis trying to match in these cases.  I haven't been able to see patterns\nwith the other order of the IOR operands, seems the IL is canonicalized this\nway no matter what is written in the source.\n\n2021-04-13  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/100028\n\t* config/aarch64/aarch64.md (*aarch64_bfxil<mode>_extr,\n\t*aarch64_bfxilsi_extrdi): New define_insn patterns.\n\n\t* gcc.target/aarch64/pr100028.c: New test.", "tree": {"sha": "7810bdb3edd8761a9ebe04676ec9882965f6c97e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7810bdb3edd8761a9ebe04676ec9882965f6c97e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6ba5d039f988babdd99b5cdfb4557c380e57d69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6ba5d039f988babdd99b5cdfb4557c380e57d69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6ba5d039f988babdd99b5cdfb4557c380e57d69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6ba5d039f988babdd99b5cdfb4557c380e57d69/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1174314811af52779497462f26d21ea0038d1a85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1174314811af52779497462f26d21ea0038d1a85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1174314811af52779497462f26d21ea0038d1a85"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "9a7ed7866b1fbd67180b7da021503d0714013ed9", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6ba5d039f988babdd99b5cdfb4557c380e57d69/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6ba5d039f988babdd99b5cdfb4557c380e57d69/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=f6ba5d039f988babdd99b5cdfb4557c380e57d69", "patch": "@@ -5601,6 +5601,38 @@\n   [(set_attr \"type\" \"bfm\")]\n )\n \n+(define_insn \"*aarch64_bfxil<mode>_extr\"\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n+        (ior:GPI (and:GPI (match_operand:GPI 1 \"register_operand\" \"0\")\n+\t\t\t  (match_operand:GPI 2 \"const_int_operand\" \"n\"))\n+\t\t (zero_extract:GPI\n+\t\t   (match_operand:GPI 3 \"register_operand\" \"r\")\n+\t\t   (match_operand:GPI 4 \"aarch64_simd_shift_imm_<mode>\" \"n\")\n+\t\t   (match_operand:GPI 5 \"aarch64_simd_shift_imm_<mode>\" \"n\"))))]\n+  \"UINTVAL (operands[2]) == HOST_WIDE_INT_M1U << INTVAL (operands[4])\n+   && INTVAL (operands[4])\n+   && (UINTVAL (operands[4]) + UINTVAL (operands[5])\n+       <= GET_MODE_BITSIZE (<MODE>mode))\"\n+  \"bfxil\\t%<GPI:w>0, %<GPI:w>3, %5, %4\"\n+  [(set_attr \"type\" \"bfm\")]\n+)\n+\n+(define_insn \"*aarch64_bfxilsi_extrdi\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (ior:SI (and:SI (match_operand:SI 1 \"register_operand\" \"0\")\n+\t\t\t(match_operand:SI 2 \"const_int_operand\" \"n\"))\n+\t\t(match_operator:SI 6 \"subreg_lowpart_operator\"\n+\t\t  [(zero_extract:DI\n+\t\t     (match_operand:DI 3 \"register_operand\" \"r\")\n+\t\t     (match_operand:SI 4 \"aarch64_simd_shift_imm_si\" \"n\")\n+\t\t     (match_operand:SI 5 \"aarch64_simd_shift_imm_si\" \"n\"))])))]\n+  \"UINTVAL (operands[2]) == HOST_WIDE_INT_M1U << INTVAL (operands[4])\n+   && INTVAL (operands[4])\n+   && UINTVAL (operands[4]) + UINTVAL (operands[5]) <= 32\"\n+  \"bfxil\\t%w0, %w3, %5, %4\"\n+  [(set_attr \"type\" \"bfm\")]\n+)\n+\n (define_insn \"*extr_insv_lower_reg<mode>\"\n   [(set (zero_extract:GPI (match_operand:GPI 0 \"register_operand\" \"+r\")\n \t\t\t  (match_operand 1 \"const_int_operand\" \"n\")"}, {"sha": "a25b92977b0046d99cdffd32dc6e471ce842243e", "filename": "gcc/testsuite/gcc.target/aarch64/pr100028.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6ba5d039f988babdd99b5cdfb4557c380e57d69/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr100028.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6ba5d039f988babdd99b5cdfb4557c380e57d69/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr100028.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr100028.c?ref=f6ba5d039f988babdd99b5cdfb4557c380e57d69", "patch": "@@ -0,0 +1,22 @@\n+/* PR target/100028 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#define W\t3\n+#define L\t11\n+\n+int\n+foo (int d, int s)\n+{\n+  int wmask = (1 << W) - 1;\n+  return (d & ~wmask) | ((s >> L) & wmask);\n+}\n+\n+long long int\n+bar (long long int d, long long int s)\n+{\n+  long long int wmask = (1LL << W) - 1;\n+  return (d & ~wmask) | ((s >> L) & wmask);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tbfxil\\t} 2 } } */"}]}