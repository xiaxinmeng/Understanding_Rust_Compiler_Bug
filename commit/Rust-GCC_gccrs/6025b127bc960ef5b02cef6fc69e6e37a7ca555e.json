{"sha": "6025b127bc960ef5b02cef6fc69e6e37a7ca555e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjAyNWIxMjdiYzk2MGVmNWIwMmNlZjZmYzY5ZTZlMzdhN2NhNTU1ZQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2011-07-20T22:38:47Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2011-07-20T22:38:47Z"}, "message": "Handle address output and call patterns for x32.\n\n2011-07-20  H.J. Lu  <hongjiu.lu@intel.com>\n\t    Uros Bizjak  <ubizjak@gmail.com>\n\t    Richard Henderson  <rth@redhat.com>\n\n\t* config/i386/constraints.md (w): New.\n\n\t* config/i386/i386.c (ix86_output_addr_vec_elt): Check\n\tTARGET_LP64 instead of TARGET_64BIT for ASM_QUAD.\n\n\t* config/i386/i386.h (CASE_VECTOR_MODE): Check TARGET_LP64\n\tinstead of TARGET_64BIT.\n\n\t* config/i386/i386.md (indirect_jump): Replace\n\tnonimmediate_operand with indirect_branch_operand.\n\t(*indirect_jump): Likewise.  Replace constraint \"m\" with \"w\".\n\t(tablejump): Replace nonimmediate_operand with\n\tindirect_branch_operand.  Convert operand 0 to Pmode for x32 if\n\tnot PIC.\n\t(*tablejump_1): Replace nonimmediate_operand with\n\tindirect_branch_operand.  Replace constraint \"m\" with \"w\".\n\t(*call_vzeroupper): Replace constraint \"m\" with \"w\".\n\t(*call): Likewise.\n\t(*call_rex64_ms_sysv_vzeroupper): Likewise.\n\t(*call_rex64_ms_sysv): Likewise.\n\t(*call_value_vzeroupper): Likewise.\n\t(*call_value): Likewise.\n\t(*call_value_rex64_ms_sysv_vzeroupper): Likewise.\n\t(*call_value_rex64_ms_sysv): Likewise.\n\t(set_got_offset_rex64): Check TARGET_LP64 instead of\n\tTARGET_64BIT.\n\n\t* config/i386/predicates.md (indirect_branch_operand): New.\n\t(call_insn_operand): Support x32.\n\nCo-Authored-By: Richard Henderson <rth@redhat.com>\nCo-Authored-By: Uros Bizjak <ubizjak@gmail.com>\n\nFrom-SVN: r176539", "tree": {"sha": "b0f28a85e8824eaa6cda1da6d936c38b9926e5af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0f28a85e8824eaa6cda1da6d936c38b9926e5af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6025b127bc960ef5b02cef6fc69e6e37a7ca555e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6025b127bc960ef5b02cef6fc69e6e37a7ca555e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6025b127bc960ef5b02cef6fc69e6e37a7ca555e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6025b127bc960ef5b02cef6fc69e6e37a7ca555e/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7f8925a1ddc41fb0b1520da5fa756b1264e35c53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f8925a1ddc41fb0b1520da5fa756b1264e35c53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f8925a1ddc41fb0b1520da5fa756b1264e35c53"}], "stats": {"total": 82, "additions": 65, "deletions": 17}, "files": [{"sha": "6d2b4176240ab0ba69bb2d58e01c1a9cf939e7e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6025b127bc960ef5b02cef6fc69e6e37a7ca555e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6025b127bc960ef5b02cef6fc69e6e37a7ca555e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6025b127bc960ef5b02cef6fc69e6e37a7ca555e", "patch": "@@ -1,3 +1,37 @@\n+2011-07-20  H.J. Lu  <hongjiu.lu@intel.com>\n+\t    Uros Bizjak  <ubizjak@gmail.com>\n+\t    Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/constraints.md (w): New.\n+\n+\t* config/i386/i386.c (ix86_output_addr_vec_elt): Check\n+\tTARGET_LP64 instead of TARGET_64BIT for ASM_QUAD.\n+\n+\t* config/i386/i386.h (CASE_VECTOR_MODE): Check TARGET_LP64\n+\tinstead of TARGET_64BIT.\n+\n+\t* config/i386/i386.md (indirect_jump): Replace\n+\tnonimmediate_operand with indirect_branch_operand.\n+\t(*indirect_jump): Likewise.  Replace constraint \"m\" with \"w\".\n+\t(tablejump): Replace nonimmediate_operand with\n+\tindirect_branch_operand.  Convert operand 0 to Pmode for x32 if\n+\tnot PIC.\n+\t(*tablejump_1): Replace nonimmediate_operand with\n+\tindirect_branch_operand.  Replace constraint \"m\" with \"w\".\n+\t(*call_vzeroupper): Replace constraint \"m\" with \"w\".\n+\t(*call): Likewise.\n+\t(*call_rex64_ms_sysv_vzeroupper): Likewise.\n+\t(*call_rex64_ms_sysv): Likewise.\n+\t(*call_value_vzeroupper): Likewise.\n+\t(*call_value): Likewise.\n+\t(*call_value_rex64_ms_sysv_vzeroupper): Likewise.\n+\t(*call_value_rex64_ms_sysv): Likewise.\n+\t(set_got_offset_rex64): Check TARGET_LP64 instead of\n+\tTARGET_64BIT.\n+\n+\t* config/i386/predicates.md (indirect_branch_operand): New.\n+\t(call_insn_operand): Support x32.\n+\n 2011-07-20  Michael Eager  <eager@eagercon.com>\n \n \t* params.def (PARAM_MAX_VARTRACK_EXPR_DEPTH): Default to 12."}, {"sha": "8d3e45af6003f1b38fe5ffe7a231e066ad33e123", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6025b127bc960ef5b02cef6fc69e6e37a7ca555e/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6025b127bc960ef5b02cef6fc69e6e37a7ca555e/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=6025b127bc960ef5b02cef6fc69e6e37a7ca555e", "patch": "@@ -19,7 +19,7 @@\n \n ;;; Unused letters:\n ;;;     B     H           T  W\n-;;;           h jk          vw\n+;;;           h jk          v\n \n ;; Integer register constraints.\n ;; It is not necessary to define 'r' here.\n@@ -127,6 +127,11 @@\n   \"@internal Constant call address operand.\"\n   (match_operand 0 \"constant_call_address_operand\"))\n \n+(define_constraint \"w\"\n+  \"@internal Call memory operand.\"\n+  (and (match_test \"!TARGET_X32\")\n+       (match_operand 0 \"memory_operand\")))\n+\n ;; Integer constant constraints.\n (define_constraint \"I\"\n   \"Integer constant in the range 0 @dots{} 31, for 32-bit shifts.\""}, {"sha": "403f3127b1ef37c92b7438ded0c2757a42010848", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6025b127bc960ef5b02cef6fc69e6e37a7ca555e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6025b127bc960ef5b02cef6fc69e6e37a7ca555e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6025b127bc960ef5b02cef6fc69e6e37a7ca555e", "patch": "@@ -14865,7 +14865,7 @@ ix86_output_addr_vec_elt (FILE *file, int value)\n   const char *directive = ASM_LONG;\n \n #ifdef ASM_QUAD\n-  if (TARGET_64BIT)\n+  if (TARGET_LP64)\n     directive = ASM_QUAD;\n #else\n   gcc_assert (!TARGET_64BIT);"}, {"sha": "20c9a8fba9a52790dee969320d3e19393c5f76f1", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6025b127bc960ef5b02cef6fc69e6e37a7ca555e/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6025b127bc960ef5b02cef6fc69e6e37a7ca555e/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=6025b127bc960ef5b02cef6fc69e6e37a7ca555e", "patch": "@@ -1674,7 +1674,7 @@ typedef struct ix86_args {\n /* Specify the machine mode that this machine uses\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE \\\n- (!TARGET_64BIT || (flag_pic && ix86_cmodel != CM_LARGE_PIC) ? SImode : DImode)\n+ (!TARGET_LP64 || (flag_pic && ix86_cmodel != CM_LARGE_PIC) ? SImode : DImode)\n \n /* Define this as 1 if `char' should by default be signed; else as 0.  */\n #define DEFAULT_SIGNED_CHAR 1"}, {"sha": "b704fa7310e8ac1435f9cb3465ac67c1c9e93d00", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6025b127bc960ef5b02cef6fc69e6e37a7ca555e/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6025b127bc960ef5b02cef6fc69e6e37a7ca555e/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=6025b127bc960ef5b02cef6fc69e6e37a7ca555e", "patch": "@@ -10963,17 +10963,17 @@\n    (set_attr \"modrm\" \"0\")])\n \n (define_expand \"indirect_jump\"\n-  [(set (pc) (match_operand 0 \"nonimmediate_operand\" \"\"))])\n+  [(set (pc) (match_operand 0 \"indirect_branch_operand\" \"\"))])\n \n (define_insn \"*indirect_jump\"\n-  [(set (pc) (match_operand:P 0 \"nonimmediate_operand\" \"rm\"))]\n+  [(set (pc) (match_operand:P 0 \"indirect_branch_operand\" \"rw\"))]\n   \"\"\n   \"jmp\\t%A0\"\n   [(set_attr \"type\" \"ibr\")\n    (set_attr \"length_immediate\" \"0\")])\n \n (define_expand \"tablejump\"\n-  [(parallel [(set (pc) (match_operand 0 \"nonimmediate_operand\" \"\"))\n+  [(parallel [(set (pc) (match_operand 0 \"indirect_branch_operand\" \"\"))\n \t      (use (label_ref (match_operand 1 \"\" \"\")))])]\n   \"\"\n {\n@@ -11008,10 +11008,12 @@\n       operands[0] = expand_simple_binop (Pmode, code, op0, op1, NULL_RTX, 0,\n \t\t\t\t\t OPTAB_DIRECT);\n     }\n+  else if (TARGET_X32)\n+    operands[0] = convert_memory_address (Pmode, operands[0]);\n })\n \n (define_insn \"*tablejump_1\"\n-  [(set (pc) (match_operand:P 0 \"nonimmediate_operand\" \"rm\"))\n+  [(set (pc) (match_operand:P 0 \"indirect_branch_operand\" \"rw\"))\n    (use (label_ref (match_operand 1 \"\" \"\")))]\n   \"\"\n   \"jmp\\t%A0\"\n@@ -11099,7 +11101,7 @@\n })\n \n (define_insn_and_split \"*call_vzeroupper\"\n-  [(call (mem:QI (match_operand:P 0 \"call_insn_operand\" \"<c>zm\"))\n+  [(call (mem:QI (match_operand:P 0 \"call_insn_operand\" \"<c>zw\"))\n \t (match_operand 1 \"\" \"\"))\n    (unspec [(match_operand 2 \"const_int_operand\" \"\")]\n    \t   UNSPEC_CALL_NEEDS_VZEROUPPER)]\n@@ -11111,15 +11113,15 @@\n   [(set_attr \"type\" \"call\")])\n \n (define_insn \"*call\"\n-  [(call (mem:QI (match_operand:P 0 \"call_insn_operand\" \"<c>zm\"))\n+  [(call (mem:QI (match_operand:P 0 \"call_insn_operand\" \"<c>zw\"))\n \t (match_operand 1 \"\" \"\"))]\n   \"!SIBLING_CALL_P (insn)\"\n   \"* return ix86_output_call_insn (insn, operands[0]);\"\n   [(set_attr \"type\" \"call\")])\n \n (define_insn_and_split \"*call_rex64_ms_sysv_vzeroupper\"\n   [(parallel\n-    [(call (mem:QI (match_operand:DI 0 \"call_insn_operand\" \"rzm\"))\n+    [(call (mem:QI (match_operand:DI 0 \"call_insn_operand\" \"rzw\"))\n \t   (match_operand 1 \"\" \"\"))\n      (unspec [(const_int 0)] UNSPEC_MS_TO_SYSV_CALL)\n      (clobber (reg:TI XMM6_REG))\n@@ -11144,7 +11146,7 @@\n   [(set_attr \"type\" \"call\")])\n \n (define_insn \"*call_rex64_ms_sysv\"\n-  [(call (mem:QI (match_operand:DI 0 \"call_insn_operand\" \"rzm\"))\n+  [(call (mem:QI (match_operand:DI 0 \"call_insn_operand\" \"rzw\"))\n \t (match_operand 1 \"\" \"\"))\n    (unspec [(const_int 0)] UNSPEC_MS_TO_SYSV_CALL)\n    (clobber (reg:TI XMM6_REG))\n@@ -11275,7 +11277,7 @@\n \n (define_insn_and_split \"*call_value_vzeroupper\"\n   [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:QI (match_operand:P 1 \"call_insn_operand\" \"<c>zm\"))\n+\t(call (mem:QI (match_operand:P 1 \"call_insn_operand\" \"<c>zw\"))\n \t      (match_operand 2 \"\" \"\")))\n    (unspec [(match_operand 3 \"const_int_operand\" \"\")]\n    \t   UNSPEC_CALL_NEEDS_VZEROUPPER)]\n@@ -11288,7 +11290,7 @@\n \n (define_insn \"*call_value\"\n   [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:QI (match_operand:P 1 \"call_insn_operand\" \"<c>zm\"))\n+\t(call (mem:QI (match_operand:P 1 \"call_insn_operand\" \"<c>zw\"))\n \t      (match_operand 2 \"\" \"\")))]\n   \"!SIBLING_CALL_P (insn)\"\n   \"* return ix86_output_call_insn (insn, operands[1]);\"\n@@ -11318,7 +11320,7 @@\n (define_insn_and_split \"*call_value_rex64_ms_sysv_vzeroupper\"\n   [(parallel\n     [(set (match_operand 0 \"\" \"\")\n-\t  (call (mem:QI (match_operand:DI 1 \"call_insn_operand\" \"rzm\"))\n+\t  (call (mem:QI (match_operand:DI 1 \"call_insn_operand\" \"rzw\"))\n \t\t(match_operand 2 \"\" \"\")))\n      (unspec [(const_int 0)] UNSPEC_MS_TO_SYSV_CALL)\n      (clobber (reg:TI XMM6_REG))\n@@ -11344,7 +11346,7 @@\n \n (define_insn \"*call_value_rex64_ms_sysv\"\n   [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:QI (match_operand:DI 1 \"call_insn_operand\" \"rzm\"))\n+\t(call (mem:QI (match_operand:DI 1 \"call_insn_operand\" \"rzw\"))\n \t      (match_operand 2 \"\" \"\")))\n    (unspec [(const_int 0)] UNSPEC_MS_TO_SYSV_CALL)\n    (clobber (reg:TI XMM6_REG))\n@@ -11666,7 +11668,7 @@\n \t(unspec:DI\n \t  [(label_ref (match_operand 1 \"\" \"\"))]\n \t  UNSPEC_SET_GOT_OFFSET))]\n-  \"TARGET_64BIT\"\n+  \"TARGET_LP64\"\n   \"movabs{q}\\t{$_GLOBAL_OFFSET_TABLE_-%l1, %0|%0, OFFSET FLAT:_GLOBAL_OFFSET_TABLE_-%l1}\"\n   [(set_attr \"type\" \"imov\")\n    (set_attr \"length_immediate\" \"0\")"}, {"sha": "2ef9129156a4050de28ab95666ae8c462066cfb0", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6025b127bc960ef5b02cef6fc69e6e37a7ca555e/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6025b127bc960ef5b02cef6fc69e6e37a7ca555e/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=6025b127bc960ef5b02cef6fc69e6e37a7ca555e", "patch": "@@ -563,11 +563,18 @@\n   (ior (match_operand 0 \"register_no_elim_operand\")\n        (match_operand 0 \"immediate_operand\")))\n \n+;; Test for a valid operand for indirect branch.\n+(define_predicate \"indirect_branch_operand\"\n+  (if_then_else (match_test \"TARGET_X32\")\n+    (match_operand 0 \"register_operand\")\n+    (match_operand 0 \"nonimmediate_operand\")))\n+\n ;; Test for a valid operand for a call instruction.\n (define_predicate \"call_insn_operand\"\n   (ior (match_operand 0 \"constant_call_address_operand\")\n        (match_operand 0 \"call_register_no_elim_operand\")\n-       (match_operand 0 \"memory_operand\")))\n+       (and (match_test \"!TARGET_X32\")\n+\t    (match_operand 0 \"memory_operand\"))))\n \n ;; Similarly, but for tail calls, in which we cannot allow memory references.\n (define_predicate \"sibcall_insn_operand\""}]}