{"sha": "1c04af34c9c66d8ed9f6c12c97dd064238ddfa20", "node_id": "C_kwDOANBUbNoAKDFjMDRhZjM0YzljNjZkOGVkOWY2YzEyYzk3ZGQwNjQyMzhkZGZhMjA", "commit": {"author": {"name": "Qing Zhao", "email": "qing.zhao@oracle.com", "date": "2021-11-10T17:59:31Z"}, "committer": {"name": "Qing Zhao", "email": "qing.zhao@oracle.com", "date": "2021-11-10T17:59:31Z"}, "message": "Apply pattern initialization only when have_insn_for return true.\n\nFor -ftrivial-auto-var-init=pattern, initialize the variable with patterns only\nwhen have_insn_for (SET, mode) return true.  Otherwise initialize it with zeros.\nwith this change, _Complex long double on X86 is initialized to zero for\npattern initialization.\n\ngcc/ChangeLog:\n\n2021-11-10  qing zhao  <qing.zhao@oracle.com>\n\n\t* internal-fn.c (expand_DEFERRED_INIT): Apply pattern initialization\n\tonly when have_insn_for return true for the mode. Fix a memory leak.\n\ngcc/testsuite/ChangeLog:\n\n2021-11-10  qing zhao  <qing.zhao@oracle.com>\n\n\t* gcc.target/i386/auto-init-6.c: _Complex long double is initialized\n\tto zero now with -ftrivial-auto-var-init=pattern.", "tree": {"sha": "e13afa30218858a13fe76edadab4dab944d9bc31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e13afa30218858a13fe76edadab4dab944d9bc31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c04af34c9c66d8ed9f6c12c97dd064238ddfa20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c04af34c9c66d8ed9f6c12c97dd064238ddfa20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c04af34c9c66d8ed9f6c12c97dd064238ddfa20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c04af34c9c66d8ed9f6c12c97dd064238ddfa20/comments", "author": {"login": "qingzhao69", "id": 89154636, "node_id": "MDQ6VXNlcjg5MTU0NjM2", "avatar_url": "https://avatars.githubusercontent.com/u/89154636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qingzhao69", "html_url": "https://github.com/qingzhao69", "followers_url": "https://api.github.com/users/qingzhao69/followers", "following_url": "https://api.github.com/users/qingzhao69/following{/other_user}", "gists_url": "https://api.github.com/users/qingzhao69/gists{/gist_id}", "starred_url": "https://api.github.com/users/qingzhao69/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qingzhao69/subscriptions", "organizations_url": "https://api.github.com/users/qingzhao69/orgs", "repos_url": "https://api.github.com/users/qingzhao69/repos", "events_url": "https://api.github.com/users/qingzhao69/events{/privacy}", "received_events_url": "https://api.github.com/users/qingzhao69/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qingzhao69", "id": 89154636, "node_id": "MDQ6VXNlcjg5MTU0NjM2", "avatar_url": "https://avatars.githubusercontent.com/u/89154636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qingzhao69", "html_url": "https://github.com/qingzhao69", "followers_url": "https://api.github.com/users/qingzhao69/followers", "following_url": "https://api.github.com/users/qingzhao69/following{/other_user}", "gists_url": "https://api.github.com/users/qingzhao69/gists{/gist_id}", "starred_url": "https://api.github.com/users/qingzhao69/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qingzhao69/subscriptions", "organizations_url": "https://api.github.com/users/qingzhao69/orgs", "repos_url": "https://api.github.com/users/qingzhao69/repos", "events_url": "https://api.github.com/users/qingzhao69/events{/privacy}", "received_events_url": "https://api.github.com/users/qingzhao69/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1200e211a823816e47a9312efab61a60e12e33e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1200e211a823816e47a9312efab61a60e12e33e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1200e211a823816e47a9312efab61a60e12e33e5"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "e8fd16b9c21f76d18075060a4547dac1059a1eef", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c04af34c9c66d8ed9f6c12c97dd064238ddfa20/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c04af34c9c66d8ed9f6c12c97dd064238ddfa20/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=1c04af34c9c66d8ed9f6c12c97dd064238ddfa20", "patch": "@@ -3059,10 +3059,10 @@ expand_DEFERRED_INIT (internal_fn, gcall *stmt)\n       mark_addressable (lhs);\n       tree var_addr = build_fold_addr_expr (lhs);\n \n-      tree value = (init_type == AUTO_INIT_PATTERN) ?\n-\t\t    build_int_cst (integer_type_node,\n-\t\t\t\t   INIT_PATTERN_VALUE) :\n-\t\t    integer_zero_node;\n+      tree value = (init_type == AUTO_INIT_PATTERN)\n+\t\t    ? build_int_cst (integer_type_node,\n+\t\t\t\t     INIT_PATTERN_VALUE)\n+\t\t    : integer_zero_node;\n       tree m_call = build_call_expr (builtin_decl_implicit (BUILT_IN_MEMSET),\n \t\t\t\t     3, var_addr, value, var_size);\n       /* Expand this memset call.  */\n@@ -3073,15 +3073,17 @@ expand_DEFERRED_INIT (internal_fn, gcall *stmt)\n       /* If this variable is in a register use expand_assignment.\n \t For boolean scalars force zero-init.  */\n       tree init;\n+      scalar_int_mode var_mode;\n       if (TREE_CODE (TREE_TYPE (lhs)) != BOOLEAN_TYPE\n \t  && tree_fits_uhwi_p (var_size)\n \t  && (init_type == AUTO_INIT_PATTERN\n \t      || !is_gimple_reg_type (var_type))\n \t  && int_mode_for_size (tree_to_uhwi (var_size) * BITS_PER_UNIT,\n-\t\t\t\t0).exists ())\n+\t\t\t\t0).exists (&var_mode)\n+\t  && have_insn_for (SET, var_mode))\n \t{\n \t  unsigned HOST_WIDE_INT total_bytes = tree_to_uhwi (var_size);\n-\t  unsigned char *buf = (unsigned char *) xmalloc (total_bytes);\n+\t  unsigned char *buf = XALLOCAVEC (unsigned char, total_bytes);\n \t  memset (buf, (init_type == AUTO_INIT_PATTERN\n \t\t\t? INIT_PATTERN_VALUE : 0), total_bytes);\n \t  tree itype = build_nonstandard_integer_type"}, {"sha": "e53385f0eb74543beea46b515d4b658af68668fa", "filename": "gcc/testsuite/gcc.target/i386/auto-init-6.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c04af34c9c66d8ed9f6c12c97dd064238ddfa20/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c04af34c9c66d8ed9f6c12c97dd064238ddfa20/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-6.c?ref=1c04af34c9c66d8ed9f6c12c97dd064238ddfa20", "patch": "@@ -1,4 +1,6 @@\n /* Verify pattern initialization for complex type automatic variables.  */\n+/* Note, _Complex long double is initialized to zeroes due to the current\n+   implemenation limitation.  */\n /* { dg-do compile } */\n /* { dg-options \"-ftrivial-auto-var-init=pattern -march=x86-64 -mtune=generic -msse\" } */\n \n@@ -15,6 +17,6 @@ _Complex long double foo()\n   return result;\n }\n \n-/* { dg-final { scan-assembler-times \"long\\t-16843010\" 10  { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler-times \"long\\t-16843010\" 6  { target { ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"long\\t0\" 8  { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"long\\t-16843010\" 6  } } */\n "}]}