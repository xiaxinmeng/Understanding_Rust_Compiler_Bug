{"sha": "b269e8998d5cc47d010d915aba548fa0ae2d8bf8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI2OWU4OTk4ZDVjYzQ3ZDAxMGQ5MTVhYmE1NDhmYTBhZTJkOGJmOA==", "commit": {"author": {"name": "Jerome Lambourg", "email": "lambourg@adacore.com", "date": "2017-06-26T17:04:44Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2017-06-26T17:04:44Z"}, "message": "config.gcc (*-*-vxworks*): Add TARGET_VXWORKS7=1 to tm_defines for all vxworks7 targets.\n\n2017-06-26  Jerome Lambourg  <lambourg@adacore.com>\n            Olivier Hainque  <hainque@adacore.com>\n\n\t* config.gcc (*-*-vxworks*): Add TARGET_VXWORKS7=1 to tm_defines\n\tfor all vxworks7 targets.\n\t* config/vxworks.h (TARGET_VXWORKS7): If not defined, define to 0.\n\t(VXWORKS_ADDITIONAL_CPP_SPEC): Alternative definition for VXWORKS7.\n\t(VXWORKS_LIBS_RTP, VXWORKS_LIBS_RTP_DIR): New macros, allowing\n\tvariations for VX6/VX7 and 32/64bits later on in ...\n\t(VXWORKS_LIB_SPEC): Leverage new macros.\n\t(VXWORKS_OS_CPP_BUILTINS): Define _VSB_CONFIG_FILE for VXWORKS7,\n\tas well as _ALLOW_KEYWORD_MACROS when \"inline\" is not a keyword.\n\n\nCo-Authored-By: Olivier Hainque <hainque@adacore.com>\n\nFrom-SVN: r249659", "tree": {"sha": "5b8d472b1c2441c5158c12717e7582f21ba44bb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b8d472b1c2441c5158c12717e7582f21ba44bb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b269e8998d5cc47d010d915aba548fa0ae2d8bf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b269e8998d5cc47d010d915aba548fa0ae2d8bf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b269e8998d5cc47d010d915aba548fa0ae2d8bf8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b269e8998d5cc47d010d915aba548fa0ae2d8bf8/comments", "author": {"login": "lambourg", "id": 480233, "node_id": "MDQ6VXNlcjQ4MDIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/480233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lambourg", "html_url": "https://github.com/lambourg", "followers_url": "https://api.github.com/users/lambourg/followers", "following_url": "https://api.github.com/users/lambourg/following{/other_user}", "gists_url": "https://api.github.com/users/lambourg/gists{/gist_id}", "starred_url": "https://api.github.com/users/lambourg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lambourg/subscriptions", "organizations_url": "https://api.github.com/users/lambourg/orgs", "repos_url": "https://api.github.com/users/lambourg/repos", "events_url": "https://api.github.com/users/lambourg/events{/privacy}", "received_events_url": "https://api.github.com/users/lambourg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d6ef53f2413b5fde30a6d9516c4ebf087e6a4363", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6ef53f2413b5fde30a6d9516c4ebf087e6a4363", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6ef53f2413b5fde30a6d9516c4ebf087e6a4363"}], "stats": {"total": 71, "additions": 69, "deletions": 2}, "files": [{"sha": "7c19bf042c0f6306420a40ae788b7f724a42dfbb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b269e8998d5cc47d010d915aba548fa0ae2d8bf8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b269e8998d5cc47d010d915aba548fa0ae2d8bf8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b269e8998d5cc47d010d915aba548fa0ae2d8bf8", "patch": "@@ -1,5 +1,18 @@\n gcc/ChangeLog:\n \n+2017-06-26  Jerome Lambourg  <lambourg@adacore.com>\n+            Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config.gcc (*-*-vxworks*): Add TARGET_VXWORKS7=1 to tm_defines\n+\tfor all vxworks7 targets.\n+\t* config/vxworks.h (TARGET_VXWORKS7): If not defined, define to 0.\n+\t(VXWORKS_ADDITIONAL_CPP_SPEC): Alternative definition for VXWORKS7.\n+\t(VXWORKS_LIBS_RTP, VXWORKS_LIBS_RTP_DIR): New macros, allowing\n+\tvariations for VX6/VX7 and 32/64bits later on in ...\n+\t(VXWORKS_LIB_SPEC): Leverage new macros.\n+\t(VXWORKS_OS_CPP_BUILTINS): Define _VSB_CONFIG_FILE for VXWORKS7,\n+\tas well as _ALLOW_KEYWORD_MACROS when \"inline\" is not a keyword.\n+\n 2017-06-26  Jerome Lambourg  <lambourg@adacore.com>\n \n \t* config/vxworks.h (VXWORKS_OS_CPP_BUILTINS): builtin_define"}, {"sha": "291200984d90ab97e4a3d872c481e1e11e58971a", "filename": "gcc/config.gcc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b269e8998d5cc47d010d915aba548fa0ae2d8bf8/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b269e8998d5cc47d010d915aba548fa0ae2d8bf8/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=b269e8998d5cc47d010d915aba548fa0ae2d8bf8", "patch": "@@ -926,6 +926,11 @@ case ${target} in\n     \"\" | yes | vxworks) thread_file='vxworks' ;;\n     *) echo 'Unknown thread configuration for VxWorks'; exit 1 ;;\n   esac\n+  case $target in\n+    *-*-vxworks7*)\n+      tm_defines=\"$tm_defines TARGET_VXWORKS7=1\"\n+      ;;\n+  esac\n   ;;\n *-*-elf|arc*-*-elf*)\n   # Assume that newlib is being used and so __cxa_atexit is provided."}, {"sha": "11d811c411322e6a619593cd158cc4db36fffc7f", "filename": "gcc/config/vxworks.h", "status": "modified", "additions": 51, "deletions": 2, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b269e8998d5cc47d010d915aba548fa0ae2d8bf8/gcc%2Fconfig%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b269e8998d5cc47d010d915aba548fa0ae2d8bf8/gcc%2Fconfig%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvxworks.h?ref=b269e8998d5cc47d010d915aba548fa0ae2d8bf8", "patch": "@@ -23,6 +23,11 @@ along with GCC; see the file COPYING3.  If not see\n #undef TARGET_VXWORKS\n #define TARGET_VXWORKS 1\n \n+/* If TARGET_VXWORKS7 is undefined, then we're not targeting it.  */\n+#ifndef TARGET_VXWORKS7\n+#define TARGET_VXWORKS7 0\n+#endif\n+\n /* In kernel mode, VxWorks provides all the libraries itself, as well as\n    the functionality of startup files, etc.  In RTP mode, it behaves more\n    like a traditional Unix, with more external files.  Most of our specs\n@@ -36,21 +41,54 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Since we provide a default -isystem, expand -isystem on the command\n    line early.  */\n+#if TARGET_VXWORKS7\n+\n+#undef VXWORKS_ADDITIONAL_CPP_SPEC\n+#define VXWORKS_ADDITIONAL_CPP_SPEC                     \\\n+ \"%{!nostdinc:                                          \\\n+    %{isystem*}                                         \\\n+    %{mrtp: -idirafter %:getenv(VSB_DIR /h)             \\\n+            -idirafter %:getenv(VSB_DIR /share/h)       \\\n+            -idirafter %:getenv(VSB_DIR /usr/h/public)  \\\n+            -idirafter %:getenv(VSB_DIR /usr/h)         \\\n+      ;:    -idirafter %:getenv(VSB_DIR /h)             \\\n+            -idirafter %:getenv(VSB_DIR /share/h)       \\\n+            -idirafter %:getenv(VSB_DIR /krnl/h/system) \\\n+            -idirafter %:getenv(VSB_DIR /krnl/h/public)}}\"\n+\n+#else /* TARGET_VXWORKS7 */\n+\n #undef VXWORKS_ADDITIONAL_CPP_SPEC\n #define VXWORKS_ADDITIONAL_CPP_SPEC\t\t\\\n  \"%{!nostdinc:\t\t\t\t\t\\\n     %{isystem*} -idirafter\t\t\t\\\n     %{mrtp: %:getenv(WIND_USR /h)\t\t\\\n       ;:    %:getenv(WIND_BASE /target/h)}}\"\n \n+#endif\n+\n /* The references to __init and __fini will be satisfied by\n    libc_internal.a.  */\n+\n+#define VXWORKS_LIBS_RTP \"-lc -lgcc -lc_internal -lnet -ldsi\"\n+\n+/* On Vx6 and previous, the libraries to pick up depends on the architecture,\n+   so cannot be defined for all archs at once.  On Vx7, a VSB is always needed\n+   and its structure is fixed and does not depend on the arch.  We can thus\n+   tell gcc where to look for when linking with RTP libraries.  */\n+\n+#if TARGET_VXWORKS7\n+#define VXWORKS_LIBS_DIR_RTP \"-L%:getenv(VSB_DIR /usr/lib/common)\"\n+#else\n+#define VXWORKS_LIBS_DIR_RTP \"\"\n+#endif\n+\n #undef VXWORKS_LIB_SPEC\n #define\tVXWORKS_LIB_SPEC\t\t\t\t\t\t\\\n \"%{mrtp:%{shared:-u \" USER_LABEL_PREFIX \"__init -u \" USER_LABEL_PREFIX \"__fini} \\\n \t%{!shared:%{non-static:-u \" USER_LABEL_PREFIX \"_STI__6__rtld -ldl} \\\n-\t\t  --start-group -lc -lgcc -lc_internal -lnet -ldsi\t\\\n-\t\t  --end-group}}\"\n+\t\t  --start-group \" VXWORKS_LIBS_RTP \" --end-group} \\\n+        \" VXWORKS_LIBS_DIR_RTP \"}\"\n \n /* The no-op spec for \"-shared\" below is present because otherwise GCC\n    will treat it as an unrecognized option.  */\n@@ -133,6 +171,17 @@ extern void vxworks_asm_out_destructor (rtx symbol, int priority);\n \tbuiltin_define (\"_WRS_KERNEL\");\t\t\t\t\t\\\n       builtin_define (\"_VX_TOOL_FAMILY=gnu\");\t\t\t\t\\\n       builtin_define (\"_VX_TOOL=gnu\");\t\t\t\t\t\\\n+      if (TARGET_VXWORKS7)\t\t\t\t\t\t\\\n+        {\t\t\t\t\t\t\t\t\\\n+           builtin_define (\"_VSB_CONFIG_FILE=<config/vsbConfig.h>\");\t\\\n+           \t\t\t\t\t\t\t\t\\\n+\t   /* _ALLOW_KEYWORD_MACROS is needed on VxWorks 7 to\t\t\\\n+\t      prevent compilation failures triggered by our\t\t\\\n+\t      definition of \"inline\" in ansidecl when \"inline\"\t\t\\\n+\t      is not a keyword.  */\t\t\t\t\t\\\n+\t   if (!flag_isoc99 && !c_dialect_cxx())\t\t\t\\\n+             builtin_define (\"_ALLOW_KEYWORD_MACROS\");\t\t\t\\\n+        }\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n "}]}