{"sha": "7ebb7d0ce1a11e5b1d2174798482d2bb7f307c82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ViYjdkMGNlMWExMWU1YjFkMjE3NDc5ODQ4MmQyYmI3ZjMwN2M4Mg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-07-29T00:16:24Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-07-29T00:16:24Z"}, "message": "Daily bump.", "tree": {"sha": "f0172f0f676d955260e6db247ce866dc626c9ef9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0172f0f676d955260e6db247ce866dc626c9ef9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ebb7d0ce1a11e5b1d2174798482d2bb7f307c82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ebb7d0ce1a11e5b1d2174798482d2bb7f307c82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ebb7d0ce1a11e5b1d2174798482d2bb7f307c82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ebb7d0ce1a11e5b1d2174798482d2bb7f307c82/comments", "author": null, "committer": null, "parents": [{"sha": "cbf10ac51c0b889e930f260a3d1fb601332befdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbf10ac51c0b889e930f260a3d1fb601332befdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbf10ac51c0b889e930f260a3d1fb601332befdf"}], "stats": {"total": 147, "additions": 146, "deletions": 1}, "files": [{"sha": "46d963e32362c52a267a4fb2fcacf75932ba3e07", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ebb7d0ce1a11e5b1d2174798482d2bb7f307c82/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ebb7d0ce1a11e5b1d2174798482d2bb7f307c82/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ebb7d0ce1a11e5b1d2174798482d2bb7f307c82", "patch": "@@ -1,3 +1,39 @@\n+2020-07-28  Sergei Trofimovich  <siarheit@google.com>\n+\n+\tPR ipa/96291\n+\t* ipa-cp.c (has_undead_caller_from_outside_scc_p): Consider\n+\tunoptimized callers as undead.\n+\n+2020-07-28  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\t* match.pd (popcount(x)&1 -> parity(x)): New simplification.\n+\t(parity(~x) -> parity(x)): New simplification.\n+\t(parity(x)^parity(y) -> parity(x^y)): New simplification.\n+\t(parity(x&1) -> x&1): New simplification.\n+\t(popcount(x) -> x>>C): New simplification.\n+\n+2020-07-28  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Tom de Vries  <tdevries@suse.de>\n+\n+\t* config/nvptx/nvptx.md (extendqihi2): New instruction.\n+\t(ashl<mode>3, ashr<mode>3, lshr<mode>3): Support HImode.\n+\n+2020-07-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/96335\n+\t* calls.c (maybe_warn_rdwr_sizes): Add FNDECL and FNTYPE arguments,\n+\tinstead of trying to rediscover them in the body.\n+\t(initialize_argument_information): Adjust caller.\n+\n+2020-07-28  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* tree-vect-loop.c (vect_get_known_peeling_cost): Factor out some code\n+\tto determine peel_iters_epilogue to...\n+\t(vect_get_peel_iters_epilogue): ...this new function.\n+\t(vect_estimate_min_profitable_iters): Refactor cost calculation on\n+\tpeel_iters_prologue and peel_iters_epilogue.\n+\n 2020-07-27  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/84079"}, {"sha": "273bf0e001abb6b515d5379fbbe9efc5e9d0bd7e", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ebb7d0ce1a11e5b1d2174798482d2bb7f307c82/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ebb7d0ce1a11e5b1d2174798482d2bb7f307c82/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=7ebb7d0ce1a11e5b1d2174798482d2bb7f307c82", "patch": "@@ -1 +1 @@\n-20200728\n+20200729"}, {"sha": "eb256521805f22b6be6b3afaf619faab8736234d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ebb7d0ce1a11e5b1d2174798482d2bb7f307c82/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ebb7d0ce1a11e5b1d2174798482d2bb7f307c82/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7ebb7d0ce1a11e5b1d2174798482d2bb7f307c82", "patch": "@@ -1,3 +1,32 @@\n+2020-07-28  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-gimplify.c (cp_genericize_r): Set IMPORTED_DECL's context.\n+\t* cp-objcp-common.c (cp_pushdecl): Set decl's context.\n+\t* decl.c (grokfndecl): Make DECL_CONTEXT setting clearer.\n+\n+2020-07-28  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* class.c (fixup_type_variants): Copy TYPE_SIZE and\n+\tTYPE_SIZE_UINIT.\n+\t(finish_struct): Call it.\n+\n+2020-07-28  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* ptree.c (cxx_print_decl): Better indentation.\n+\n+2020-07-28  Jakub Jelinek  <jakub@redhat.com>\n+\t    Mark Wielaard  <mark@klomp.org>\n+\n+\tPR c++/96328\n+\t* parser.c (cp_lexer_safe_previous_token): Don't call\n+\tcp_lexer_previous_token, instead inline it by hand and return NULL\n+\tinstead of failing assertion if all previous tokens until the first\n+\tone are purged.\n+\t(cp_parser_error_1): Optimize - only call cp_lexer_safe_previous_token\n+\tif token->type is CPP_NAME.  Use cp_lexer_safe_previous_token instead\n+\tof cp_lexer_previous_token for the missing_token_desc != RT_NONE\n+\tcase too.\n+\n 2020-07-27  Nathan Sidwell  <nathan@acm.org>\n \n \t* cp-tree.h (enum cp_tree_index): Add CPTI_AS_BASE_IDENTIFIER."}, {"sha": "bcee4187a5a08577a1625bcaff41c50cabf01ce0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ebb7d0ce1a11e5b1d2174798482d2bb7f307c82/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ebb7d0ce1a11e5b1d2174798482d2bb7f307c82/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7ebb7d0ce1a11e5b1d2174798482d2bb7f307c82", "patch": "@@ -1,3 +1,52 @@\n+2020-07-28  Sergei Trofimovich  <siarheit@google.com>\n+\n+\tPR ipa/96291\n+\t* gcc.dg/lto/pr96291_0.c: New testcase.\n+\t* gcc.dg/lto/pr96291_1.c: Support file.\n+\t* gcc.dg/lto/pr96291_2.c: Likewise.\n+\t* gcc.dg/lto/pr96291.h: Likewise.\n+\n+2020-07-28  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/fold-popcount-5.c: New test.\n+\t* gcc.dg/fold-parity-1.c: Likewise.\n+\t* gcc.dg/fold-parity-2.c: Likewise.\n+\t* gcc.dg/fold-parity-3.c: Likewise.\n+\t* gcc.dg/fold-parity-4.c: Likewise.\n+\t* gcc.dg/fold-parity-5.c: Likewise.\n+\n+2020-07-28  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* lib/options.exp: Fix spello\n+\n+2020-07-28  Jakub Jelinek  <jakub@redhat.com>\n+\t    Mark Wielaard  <mark@klomp.org>\n+\n+\tPR c++/96328\n+\t* g++.dg/diagnostic/pr96328.C: New test.\n+\n+2020-07-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR preprocessor/96323\n+\t* c-c++-common/cpp/pr96323.c: New test.\n+\n+2020-07-28  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Tom de Vries  <tdevries@suse.de>\n+\n+\t* gcc.target/nvptx/cvt.c: New test.\n+\t* gcc.target/nvptx/shift16.c: New test.\n+\n+2020-07-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/cpp2a/nontype-subob1.C: Allow s1, i1 or x1 instead of l1 for\n+\ttargets with short, int or long long ssize_t.\n+\n+2020-07-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/96335\n+\t* gcc.dg/pr96335.c: New test.\n+\n 2020-07-27  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* gcc.dg/torture/pr39074-2.c: Adjust for mmix."}, {"sha": "ddc0700670c5192a57f152e8ea95fda4db1a9c3e", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ebb7d0ce1a11e5b1d2174798482d2bb7f307c82/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ebb7d0ce1a11e5b1d2174798482d2bb7f307c82/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=7ebb7d0ce1a11e5b1d2174798482d2bb7f307c82", "patch": "@@ -1,3 +1,14 @@\n+2020-07-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR preprocessor/96323\n+\t* lex.c (lex_raw_string): For c == '\\n' don't continue after reporting\n+\tan prefix delimiter error.\n+\n+2020-07-28  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* init.c (cpp_read_main_file): Always use the last map for\n+\tthe return value.\n+\n 2020-07-20  Nathan Sidwell  <nathan@acm.org>\n \n \t* line-map.c (linemap_add): Simplify column overflow calculation."}, {"sha": "e361cf461e61176880a3f2873242eb6a36e067f6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ebb7d0ce1a11e5b1d2174798482d2bb7f307c82/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ebb7d0ce1a11e5b1d2174798482d2bb7f307c82/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7ebb7d0ce1a11e5b1d2174798482d2bb7f307c82", "patch": "@@ -1,3 +1,23 @@\n+2020-07-28  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/hashtable.h\n+\t(_Hashtable<>(_InputIterator, _InputIterator, size_t, const _H1&,\n+\tconst _H2&, const _Hash&, const _Equal&, const _ExtractKey&,\n+\tconst allocator_type&, true_type)): New.\n+\t(_Hashtable<>(_InputIterator, _InputIterator, size_t, const _H1&,\n+\tconst _H2&, const _Hash&, const _Equal&, const _ExtractKey&,\n+\tconst allocator_type&, false_type)): New.\n+\t(_Hashtable<>(_InputIterator, _InputIterator, size_t, const _H1&,\n+\tconst _H2&, const _Hash&, const _Equal&, const _ExtractKey&,\n+\tconst allocator_type&)): Delegate to latters.\n+\t(operator=(initializer_list<value_type>)): Rehash if too small.\n+\t(_M_insert(_Arg&&, const _NodeGenerator&, true_type)): Remove\n+\tsize_t len parameter.\n+\t* include/bits/hashtable_policy.h (_Insert_base<>::_M_insert_range):\n+\tDo not try to get input range distance.\n+\t* testsuite/23_containers/unordered_set/cons/bucket_hint.cc: New test.\n+\t* testsuite/23_containers/unordered_set/modifiers/insert.cc: New test.\n+\n 2020-07-27  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/bits/hashtable_policy.h (_Map_base<>::at): Use"}]}