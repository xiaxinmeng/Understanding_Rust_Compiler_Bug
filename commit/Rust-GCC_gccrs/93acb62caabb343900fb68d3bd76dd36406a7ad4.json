{"sha": "93acb62caabb343900fb68d3bd76dd36406a7ad4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNhY2I2MmNhYWJiMzQzOTAwZmI2OGQzYmQ3NmRkMzY0MDZhN2FkNA==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2011-04-19T17:42:51Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2011-04-19T17:42:51Z"}, "message": "Replace gfc_getmem with XCNEW, XCNEWVEC or xcalloc\n\nFrom-SVN: r172728", "tree": {"sha": "8ec237a8fb4cca5124b47fb04acac619c6387e9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ec237a8fb4cca5124b47fb04acac619c6387e9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93acb62caabb343900fb68d3bd76dd36406a7ad4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93acb62caabb343900fb68d3bd76dd36406a7ad4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93acb62caabb343900fb68d3bd76dd36406a7ad4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93acb62caabb343900fb68d3bd76dd36406a7ad4/comments", "author": null, "committer": null, "parents": [{"sha": "60bea929924f57c886ee5380d24bfe6640030d54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60bea929924f57c886ee5380d24bfe6640030d54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60bea929924f57c886ee5380d24bfe6640030d54"}], "stats": {"total": 96, "additions": 47, "deletions": 49}, "files": [{"sha": "c6d92959eeab4a8a958aefa1938f65fa7b31b8be", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93acb62caabb343900fb68d3bd76dd36406a7ad4/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93acb62caabb343900fb68d3bd76dd36406a7ad4/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=93acb62caabb343900fb68d3bd76dd36406a7ad4", "patch": "@@ -1,3 +1,22 @@\n+2011-04-19  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\t* misc.c (gfc_getmem): Remove function.\n+\t* gfortran.h: Remove gfc_getmem prototype. Replace gfc_getmem\n+\tusage with XCNEW or XCNEWVEC.\n+\t* expr.c (gfc_check_assign_symbol): Replace gfc_getmem usage with\n+\tXCNEW or XCNEWVEC.\n+\t* options.c (gfc_handle_module_path_options)\n+\t(gfc_get_option_string): Likewise.\n+\t* resolve.c (gfc_resolve_forall): Likewise.\n+\t* simplify.c (simplify_transformation_to_array): Likewise.\n+\t* target-memory.c (gfc_target_interpret_expr): Likewise.\n+\t* trans-common.c (get_segment_info, copy_equiv_list_to_ns)\n+\t(get_init_field): Likewise.\n+\t* trans-expr.c (gfc_conv_statement_function): Likewise.\n+\t* trans-io.c (nml_full_name): Likewise.\n+\t* trans-stmt.c (gfc_trans_forall_1): Likewise.\n+\t* scanner.c (load_file): Replace gfc_getmem usage with xcalloc.\n+\n 2011-04-19  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/48588"}, {"sha": "42b65c6a36b69f5ecba4264e08c27a54fcfa4fb9", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93acb62caabb343900fb68d3bd76dd36406a7ad4/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93acb62caabb343900fb68d3bd76dd36406a7ad4/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=93acb62caabb343900fb68d3bd76dd36406a7ad4", "patch": "@@ -3583,7 +3583,7 @@ gfc_check_assign_symbol (gfc_symbol *sym, gfc_expr *rvalue)\n   lvalue.ts = sym->ts;\n   if (sym->as)\n     lvalue.rank = sym->as->rank;\n-  lvalue.symtree = (gfc_symtree *) gfc_getmem (sizeof (gfc_symtree));\n+  lvalue.symtree = XCNEW (gfc_symtree);\n   lvalue.symtree->n.sym = sym;\n   lvalue.where = sym->declared_at;\n "}, {"sha": "1d725e43169c15ada8120265db69cb7dfb9e4bdd", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93acb62caabb343900fb68d3bd76dd36406a7ad4/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93acb62caabb343900fb68d3bd76dd36406a7ad4/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=93acb62caabb343900fb68d3bd76dd36406a7ad4", "patch": "@@ -1272,8 +1272,7 @@ typedef struct gfc_entry_list\n }\n gfc_entry_list;\n \n-#define gfc_get_entry_list() \\\n-  (gfc_entry_list *) gfc_getmem(sizeof(gfc_entry_list))\n+#define gfc_get_entry_list() XCNEW (gfc_entry_list)\n \n /* Lists of rename info for the USE statement.  */\n \n@@ -1302,8 +1301,7 @@ typedef struct gfc_use_list\n }\n gfc_use_list;\n \n-#define gfc_get_use_list() \\\n-  (gfc_use_list *) gfc_getmem(sizeof(gfc_use_list))\n+#define gfc_get_use_list() XCNEW (gfc_use_list)\n \n /* Within a namespace, symbols are pointed to by symtree nodes that\n    are linked together in a balanced binary tree.  There can be\n@@ -1783,7 +1781,7 @@ typedef struct gfc_expr\n gfc_expr;\n \n \n-#define gfc_get_shape(rank) ((mpz_t *) gfc_getmem((rank)*sizeof(mpz_t)))\n+#define gfc_get_shape(rank) (XCNEWVEC (mpz_t, (rank)))\n \n /* Structures for information associated with different kinds of\n    numbers.  The first set of integer parameters define all there is\n@@ -2369,7 +2367,6 @@ void gfc_start_source_files (void);\n void gfc_end_source_files (void);\n \n /* misc.c */\n-void *gfc_getmem (size_t) ATTRIBUTE_MALLOC;\n int gfc_terminal_width (void);\n void gfc_clear_ts (gfc_typespec *);\n FILE *gfc_open_file (const char *);"}, {"sha": "127404782570454079ce2edef2f4182d92d5498d", "filename": "gcc/fortran/misc.c", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93acb62caabb343900fb68d3bd76dd36406a7ad4/gcc%2Ffortran%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93acb62caabb343900fb68d3bd76dd36406a7ad4/gcc%2Ffortran%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmisc.c?ref=93acb62caabb343900fb68d3bd76dd36406a7ad4", "patch": "@@ -23,24 +23,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"gfortran.h\"\n \n-/* Get a block of memory.  Many callers assume that the memory we\n-   return is zeroed.  */\n-\n-void *\n-gfc_getmem (size_t n)\n-{\n-  void *p;\n-\n-  if (n == 0)\n-    return NULL;\n-\n-  p = xmalloc (n);\n-  if (p == NULL)\n-    gfc_fatal_error (\"Allocation would exceed memory limit -- malloc() failed\");\n-  memset (p, 0, n);\n-  return p;\n-}\n-\n \n /* Get terminal width.  */\n "}, {"sha": "bc65f6bf66b724586406b279fe8152dcd8178f59", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93acb62caabb343900fb68d3bd76dd36406a7ad4/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93acb62caabb343900fb68d3bd76dd36406a7ad4/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=93acb62caabb343900fb68d3bd76dd36406a7ad4", "patch": "@@ -471,7 +471,7 @@ gfc_handle_module_path_options (const char *arg)\n   if (gfc_option.module_dir != NULL)\n     gfc_fatal_error (\"gfortran: Only one -J option allowed\");\n \n-  gfc_option.module_dir = (char *) gfc_getmem (strlen (arg) + 2);\n+  gfc_option.module_dir = XCNEWVEC (char, strlen (arg) + 2);\n   strcpy (gfc_option.module_dir, arg);\n \n   gfc_add_include_path (gfc_option.module_dir, true, false);\n@@ -1056,7 +1056,7 @@ gfc_get_option_string (void)\n         }\n     }\n \n-  result = (char *) gfc_getmem (len);\n+  result = XCNEWVEC (char, len);\n \n   pos = 0; \n   for (j = 1; j < save_decoded_options_count; j++)"}, {"sha": "c10161213197da2a35af4f0a8aefc592005af9f5", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93acb62caabb343900fb68d3bd76dd36406a7ad4/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93acb62caabb343900fb68d3bd76dd36406a7ad4/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=93acb62caabb343900fb68d3bd76dd36406a7ad4", "patch": "@@ -8598,7 +8598,7 @@ gfc_resolve_forall (gfc_code *code, gfc_namespace *ns, int forall_save)\n       total_var = gfc_count_forall_iterators (code);\n \n       /* Allocate VAR_EXPR with NUMBER_OF_FORALL_INDEX elements.  */\n-      var_expr = (gfc_expr **) gfc_getmem (total_var * sizeof (gfc_expr *));\n+      var_expr = XCNEWVEC (gfc_expr *, total_var);\n     }\n \n   /* The information about FORALL iterator, including FORALL index start, end"}, {"sha": "f99429a7cc0beab4c7d86f9ca055b86d36689ae8", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93acb62caabb343900fb68d3bd76dd36406a7ad4/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93acb62caabb343900fb68d3bd76dd36406a7ad4/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=93acb62caabb343900fb68d3bd76dd36406a7ad4", "patch": "@@ -2012,8 +2012,8 @@ load_file (const char *realfilename, const char *displayedname, bool initial)\n \n       /* Add line.  */\n \n-      b = (gfc_linebuf *) gfc_getmem (gfc_linebuf_header_size\n-\t\t\t\t      + (len + 1) * sizeof (gfc_char_t));\n+      b = (gfc_linebuf *) xcalloc (1, gfc_linebuf_header_size\n+\t\t\t\t   + (len + 1) * sizeof (gfc_char_t));\n \n       b->location\n \t= linemap_line_start (line_table, current_file->line++, 120);"}, {"sha": "4c91563389cbb898e0db16671ce70af6046e4952", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93acb62caabb343900fb68d3bd76dd36406a7ad4/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93acb62caabb343900fb68d3bd76dd36406a7ad4/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=93acb62caabb343900fb68d3bd76dd36406a7ad4", "patch": "@@ -517,7 +517,7 @@ simplify_transformation_to_array (gfc_expr *result, gfc_expr *array, gfc_expr *d\n   gfc_array_size (array, &size);\n   arraysize = mpz_get_ui (size);\n \n-  arrayvec = (gfc_expr**) gfc_getmem (sizeof (gfc_expr*) * arraysize);\n+  arrayvec = XCNEWVEC (gfc_expr*, arraysize);\n \n   array_ctor = gfc_constructor_first (array->value.constructor);\n   mask_ctor = NULL;\n@@ -543,7 +543,7 @@ simplify_transformation_to_array (gfc_expr *result, gfc_expr *array, gfc_expr *d\n   resultsize = mpz_get_ui (size);\n   mpz_clear (size);\n \n-  resultvec = (gfc_expr**) gfc_getmem (sizeof (gfc_expr*) * resultsize);\n+  resultvec = XCNEWVEC (gfc_expr*, resultsize);\n   result_ctor = gfc_constructor_first (result->value.constructor);\n   for (i = 0; i < resultsize; ++i)\n     {"}, {"sha": "b5c90a7b5d49c3e7e9aa38ccc0484acb8637bd98", "filename": "gcc/fortran/target-memory.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93acb62caabb343900fb68d3bd76dd36406a7ad4/gcc%2Ffortran%2Ftarget-memory.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93acb62caabb343900fb68d3bd76dd36406a7ad4/gcc%2Ffortran%2Ftarget-memory.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftarget-memory.c?ref=93acb62caabb343900fb68d3bd76dd36406a7ad4", "patch": "@@ -569,7 +569,7 @@ gfc_target_interpret_expr (unsigned char *buffer, size_t buffer_size,\n   else\n     {\n       result->representation.string =\n-        (char *) gfc_getmem (result->representation.length + 1);\n+        XCNEWVEC (char, result->representation.length + 1);\n       memcpy (result->representation.string, buffer,\n \t      result->representation.length);\n       result->representation.string[result->representation.length] = '\\0';"}, {"sha": "b6318b707ca60a0a35db442edcba28b024566df7", "filename": "gcc/fortran/trans-common.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93acb62caabb343900fb68d3bd76dd36406a7ad4/gcc%2Ffortran%2Ftrans-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93acb62caabb343900fb68d3bd76dd36406a7ad4/gcc%2Ffortran%2Ftrans-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-common.c?ref=93acb62caabb343900fb68d3bd76dd36406a7ad4", "patch": "@@ -133,7 +133,7 @@ get_segment_info (gfc_symbol * sym, HOST_WIDE_INT offset)\n     gfc_conv_const_charlen (sym->ts.u.cl);\n \n   /* Create the segment_info and fill it in.  */\n-  s = (segment_info *) gfc_getmem (sizeof (segment_info));\n+  s = XCNEW (segment_info);\n   s->sym = sym;\n   /* We will use this type when building the segment aggregate type.  */\n   s->field = gfc_sym_type (sym);\n@@ -155,14 +155,14 @@ copy_equiv_list_to_ns (segment_info *c)\n   gfc_equiv_info *s;\n   gfc_equiv_list *l;\n \n-  l = (gfc_equiv_list *) gfc_getmem (sizeof (gfc_equiv_list));\n+  l = XCNEW (gfc_equiv_list);\n \n   l->next = c->sym->ns->equiv_lists;\n   c->sym->ns->equiv_lists = l;\n \n   for (f = c; f; f = f->next)\n     {\n-      s = (gfc_equiv_info *) gfc_getmem (sizeof (gfc_equiv_info));\n+      s = XCNEW (gfc_equiv_info);\n       s->next = l->equiv;\n       l->equiv = s;\n       s->sym = f->sym;\n@@ -505,8 +505,8 @@ get_init_field (segment_info *head, tree union_type, tree *field_init,\n \n   /* Now absorb all the initializer data into a single vector,\n      whilst checking for overlapping, unequal values.  */\n-  data = (unsigned char*)gfc_getmem ((size_t)length);\n-  chk = (unsigned char*)gfc_getmem ((size_t)length);\n+  data = XCNEWVEC (unsigned char, (size_t)length);\n+  chk = XCNEWVEC (unsigned char, (size_t)length);\n \n   /* TODO - change this when default initialization is implemented.  */\n   memset (data, '\\0', (size_t)length);"}, {"sha": "73d8a5f6869fc751786df3bf98dcf31820e76db5", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93acb62caabb343900fb68d3bd76dd36406a7ad4/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93acb62caabb343900fb68d3bd76dd36406a7ad4/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=93acb62caabb343900fb68d3bd76dd36406a7ad4", "patch": "@@ -3957,8 +3957,8 @@ gfc_conv_statement_function (gfc_se * se, gfc_expr * expr)\n   n = 0;\n   for (fargs = sym->formal; fargs; fargs = fargs->next)\n     n++;\n-  saved_vars = (gfc_saved_var *)gfc_getmem (n * sizeof (gfc_saved_var));\n-  temp_vars = (tree *)gfc_getmem (n * sizeof (tree));\n+  saved_vars = XCNEWVEC (gfc_saved_var, n);\n+  temp_vars = XCNEWVEC (tree, n);\n \n   for (fargs = sym->formal, n = 0; fargs; fargs = fargs->next, n++)\n     {"}, {"sha": "8021bc672be35386529b50e986ae93e747d98a92", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93acb62caabb343900fb68d3bd76dd36406a7ad4/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93acb62caabb343900fb68d3bd76dd36406a7ad4/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=93acb62caabb343900fb68d3bd76dd36406a7ad4", "patch": "@@ -1450,7 +1450,7 @@ nml_full_name (const char* var_name, const char* cmp_name)\n   char * full_name;\n \n   full_name_length = strlen (var_name) + strlen (cmp_name) + 1;\n-  full_name = (char*)gfc_getmem (full_name_length + 1);\n+  full_name = XCNEWVEC (char, full_name_length + 1);\n   strcpy (full_name, var_name);\n   full_name = strcat (full_name, \"%\");\n   full_name = strcat (full_name, cmp_name);"}, {"sha": "7e08e8dd07bac8072573f4f24e44de59f0fa8faa", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93acb62caabb343900fb68d3bd76dd36406a7ad4/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93acb62caabb343900fb68d3bd76dd36406a7ad4/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=93acb62caabb343900fb68d3bd76dd36406a7ad4", "patch": "@@ -3455,15 +3455,15 @@ gfc_trans_forall_1 (gfc_code * code, forall_info * nested_forall_info)\n   nvar = n;\n \n   /* Allocate the space for var, start, end, step, varexpr.  */\n-  var = (tree *) gfc_getmem (nvar * sizeof (tree));\n-  start = (tree *) gfc_getmem (nvar * sizeof (tree));\n-  end = (tree *) gfc_getmem (nvar * sizeof (tree));\n-  step = (tree *) gfc_getmem (nvar * sizeof (tree));\n-  varexpr = (gfc_expr **) gfc_getmem (nvar * sizeof (gfc_expr *));\n-  saved_vars = (gfc_saved_var *) gfc_getmem (nvar * sizeof (gfc_saved_var));\n+  var = XCNEWVEC (tree, nvar);\n+  start = XCNEWVEC (tree, nvar);\n+  end = XCNEWVEC (tree, nvar);\n+  step = XCNEWVEC (tree, nvar);\n+  varexpr = XCNEWVEC (gfc_expr *, nvar);\n+  saved_vars = XCNEWVEC (gfc_saved_var, nvar);\n \n   /* Allocate the space for info.  */\n-  info = (forall_info *) gfc_getmem (sizeof (forall_info));\n+  info = XCNEW (forall_info);\n \n   gfc_start_block (&pre);\n   gfc_init_block (&post);\n@@ -3475,7 +3475,7 @@ gfc_trans_forall_1 (gfc_code * code, forall_info * nested_forall_info)\n       gfc_symbol *sym = fa->var->symtree->n.sym;\n \n       /* Allocate space for this_forall.  */\n-      this_forall = (iter_info *) gfc_getmem (sizeof (iter_info));\n+      this_forall = XCNEW (iter_info);\n \n       /* Create a temporary variable for the FORALL index.  */\n       tmp = gfc_typenode_for_spec (&sym->ts);"}]}