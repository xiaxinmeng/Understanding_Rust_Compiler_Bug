{"sha": "e93809f62363ba4b233858005aef652fb550e896", "node_id": "C_kwDOANBUbNoAKGU5MzgwOWY2MjM2M2JhNGIyMzM4NTgwMDVhZWY2NTJmYjU1MGU4OTY", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2021-12-12T10:38:13Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2021-12-12T10:38:13Z"}, "message": "Terminate BB analysis on NULL memory access in ipa-pure-const and ipa-modref\n\nAs discussed in the PR, we miss some optimization becuase\ngimple-ssa-isolate-paths turns NULL memory accesses to volatile and adds\n__builtin_trap after them.  This is seen as a side-effect by IPA analysis\nand additionally the (fully unreachable) builtin_trap is believed to load\nall global memory.\n\nI think we should think of less intrusive gimple representation of this, but\nit is also easy enough to special case that in IPA analysers as done in\nthis patch.  This is a win even if we improve the representation since\ngimple-ssa-isolate-paths is run late and this way we improve optimization\nearly.\n\nThis affects 1623 functions during cc1plus link.\n\nBootstrapped/regtested x86_64-linux, comitted.\n\ngcc/ChangeLog:\n\n2021-12-12  Jan Hubicka  <hubicka@ucw.cz>\n\n\tPR ipa/103665\n\t* ipa-modref.c (modref_access_analysis::analyze): Terminate BB\n\tanalysis on NULL memory access.\n\t* ipa-pure-const.c (analyze_function): Likewise.", "tree": {"sha": "d633bc01a1921c61b9a7b093ae25ad0b5f5a8160", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d633bc01a1921c61b9a7b093ae25ad0b5f5a8160"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e93809f62363ba4b233858005aef652fb550e896", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e93809f62363ba4b233858005aef652fb550e896", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e93809f62363ba4b233858005aef652fb550e896", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e93809f62363ba4b233858005aef652fb550e896/comments", "author": null, "committer": null, "parents": [{"sha": "e8decbe783fd02d5fa96e7ff7a46712657d21501", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8decbe783fd02d5fa96e7ff7a46712657d21501", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8decbe783fd02d5fa96e7ff7a46712657d21501"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "2c89c63baf67a13820425bdd9b99df55708deddf", "filename": "gcc/ipa-modref.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93809f62363ba4b233858005aef652fb550e896/gcc%2Fipa-modref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93809f62363ba4b233858005aef652fb550e896/gcc%2Fipa-modref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-modref.c?ref=e93809f62363ba4b233858005aef652fb550e896", "patch": "@@ -1750,6 +1750,19 @@ modref_access_analysis::analyze ()\n       for (si = gsi_start_nondebug_after_labels_bb (bb);\n \t   !gsi_end_p (si); gsi_next_nondebug (&si))\n \t{\n+\t  /* NULL memory accesses terminates BB.  These accesses are known\n+\t     to trip undefined behaviour.  gimple-ssa-isolate-paths turns them\n+\t     to volatile accesses and adds builtin_trap call which would\n+\t     confuse us otherwise.  */\n+\t  if (infer_nonnull_range_by_dereference (gsi_stmt (si),\n+\t\t\t\t\t\t  null_pointer_node))\n+\t    {\n+\t      if (dump_file)\n+\t\tfprintf (dump_file, \" - NULL memory access; terminating BB\\n\");\n+\t      if (flag_non_call_exceptions)\n+\t\tset_side_effects ();\n+\t      break;\n+\t    }\n \t  analyze_stmt (gsi_stmt (si), always_executed);\n \n \t  /* Avoid doing useles work.  */"}, {"sha": "25503f360e646effa36292b3043935c024f1cc4d", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93809f62363ba4b233858005aef652fb550e896/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93809f62363ba4b233858005aef652fb550e896/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=e93809f62363ba4b233858005aef652fb550e896", "patch": "@@ -1097,6 +1097,28 @@ analyze_function (struct cgraph_node *fn, bool ipa)\n \t   !gsi_end_p (gsi);\n \t   gsi_next (&gsi))\n \t{\n+\t  /* NULL memory accesses terminates BB.  These accesses are known\n+\t     to trip undefined behaviour.  gimple-ssa-isolate-paths turns them\n+\t     to volatile accesses and adds builtin_trap call which would\n+\t     confuse us otherwise.  */\n+\t  if (infer_nonnull_range_by_dereference (gsi_stmt (gsi),\n+\t\t\t\t\t\t  null_pointer_node))\n+\t    {\n+\t      if (dump_file)\n+\t\tfprintf (dump_file, \"  NULL memory access; terminating BB%s\\n\",\n+\t\t\t flag_non_call_exceptions ? \"; looping\" : \"\");\n+\t      if (flag_non_call_exceptions)\n+\t\t{\n+\t\t  l->looping = true;\n+\t\t  if (stmt_can_throw_external (cfun, gsi_stmt (gsi)))\n+\t\t    {\n+\t\t      if (dump_file)\n+\t\t\tfprintf (dump_file, \"    can throw externally\\n\");\n+\t\t      l->can_throw = true;\n+\t\t    }\n+\t\t}\n+\t      break;\n+\t    }\n \t  check_stmt (&gsi, l, ipa);\n \t  if (l->pure_const_state == IPA_NEITHER\n \t      && l->looping"}]}