{"sha": "0831e1d14944d254d6edffa87cbf859a0e4d655f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDgzMWUxZDE0OTQ0ZDI1NGQ2ZWRmZmE4N2NiZjg1OWEwZTRkNjU1Zg==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2009-11-25T00:31:11Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2009-11-25T00:31:11Z"}, "message": "pa.c (output_call): Only use sr4 for long interspace calls if call binds local and generating non...\n\n\t* pa.c (output_call): Only use sr4 for long interspace calls if\n\tcall binds local and generating non PIC code.\n\t(attr_length_call): Adjust length calculation for above.\n\nFrom-SVN: r154527", "tree": {"sha": "19edbabbc7ec973a04c7ccf16ca26f288bf86b42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19edbabbc7ec973a04c7ccf16ca26f288bf86b42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0831e1d14944d254d6edffa87cbf859a0e4d655f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0831e1d14944d254d6edffa87cbf859a0e4d655f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0831e1d14944d254d6edffa87cbf859a0e4d655f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0831e1d14944d254d6edffa87cbf859a0e4d655f/comments", "author": null, "committer": null, "parents": [{"sha": "f9a378936bba070f6e2786faecb54f7affc54691", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9a378936bba070f6e2786faecb54f7affc54691", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9a378936bba070f6e2786faecb54f7affc54691"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "16356a33d9b33eb44b281e4c3c4e9f882fcac3fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0831e1d14944d254d6edffa87cbf859a0e4d655f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0831e1d14944d254d6edffa87cbf859a0e4d655f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0831e1d14944d254d6edffa87cbf859a0e4d655f", "patch": "@@ -1,3 +1,9 @@\n+2009-11-24  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\t* pa.c (output_call): Only use sr4 for long interspace calls if\n+\tcall binds local and generating non PIC code.\n+\t(attr_length_call): Adjust length calculation for above.\n+\n 2009-11-25  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (plusminus_carry_mnemonic): New code attribute."}, {"sha": "d4caad2deb7a650f6127d6a4f20611009231735c", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0831e1d14944d254d6edffa87cbf859a0e4d655f/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0831e1d14944d254d6edffa87cbf859a0e4d655f/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=0831e1d14944d254d6edffa87cbf859a0e4d655f", "patch": "@@ -7504,7 +7504,7 @@ attr_length_call (rtx insn, int sibcall)\n     {\n       length += 20;\n \n-      if (!TARGET_PA_20 && !TARGET_NO_SPACE_REGS && flag_pic)\n+      if (!TARGET_PA_20 && !TARGET_NO_SPACE_REGS && (!local_call || flag_pic))\n \tlength += 8;\n     }\n \n@@ -7524,7 +7524,7 @@ attr_length_call (rtx insn, int sibcall)\n \t  if (!sibcall)\n \t    length += 8;\n \n-\t  if (!TARGET_NO_SPACE_REGS && flag_pic)\n+\t  if (!TARGET_NO_SPACE_REGS && (!local_call || flag_pic))\n \t    length += 8;\n \t}\n     }\n@@ -7721,7 +7721,7 @@ output_call (rtx insn, rtx call_dest, int sibcall)\n \t\t  if (!sibcall && !TARGET_PA_20)\n \t\t    {\n \t\t      output_asm_insn (\"{bl|b,l} .+8,%%r2\", xoperands);\n-\t\t      if (TARGET_NO_SPACE_REGS)\n+\t\t      if (TARGET_NO_SPACE_REGS || (local_call && !flag_pic))\n \t\t\toutput_asm_insn (\"addi 8,%%r2,%%r2\", xoperands);\n \t\t      else\n \t\t\toutput_asm_insn (\"addi 16,%%r2,%%r2\", xoperands);\n@@ -7746,20 +7746,20 @@ output_call (rtx insn, rtx call_dest, int sibcall)\n \t\t}\n \t      else\n \t\t{\n-\t\t  if (!TARGET_NO_SPACE_REGS && flag_pic)\n+\t\t  if (!TARGET_NO_SPACE_REGS && (!local_call || flag_pic))\n \t\t    output_asm_insn (\"ldsid (%%r1),%%r31\\n\\tmtsp %%r31,%%sr0\",\n \t\t\t\t     xoperands);\n \n \t\t  if (sibcall)\n \t\t    {\n-\t\t      if (TARGET_NO_SPACE_REGS || !flag_pic)\n+\t\t      if (TARGET_NO_SPACE_REGS || (local_call && !flag_pic))\n \t\t\toutput_asm_insn (\"be 0(%%sr4,%%r1)\", xoperands);\n \t\t      else\n \t\t\toutput_asm_insn (\"be 0(%%sr0,%%r1)\", xoperands);\n \t\t    }\n \t\t  else\n \t\t    {\n-\t\t      if (TARGET_NO_SPACE_REGS || !flag_pic)\n+\t\t      if (TARGET_NO_SPACE_REGS || (local_call && !flag_pic))\n \t\t\toutput_asm_insn (\"ble 0(%%sr4,%%r1)\", xoperands);\n \t\t      else\n \t\t\toutput_asm_insn (\"ble 0(%%sr0,%%r1)\", xoperands);"}]}