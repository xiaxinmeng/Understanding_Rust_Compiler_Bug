{"sha": "bab076f76ac1930fcec0f0b2e8a6f11b966d2d87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFiMDc2Zjc2YWMxOTMwZmNlYzBmMGIyZThhNmYxMWI5NjZkMmQ4Nw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2002-10-31T21:42:46Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-10-31T21:42:46Z"}, "message": "re PR c++/8186 (ICE in cp_expr_size, at cp/cp-lang.c:304)\n\n        PR c++/8186\n        * cp-tree.h (ADDR_IS_INVISIREF): New macro.\n        * call.c (convert_for_arg_passing): Set it.\n        * except.c (stabilize_throw_expr): Recurse for such an arg.\n\nFrom-SVN: r58696", "tree": {"sha": "04aa0aa91b9adb53b30b87f93d942e389537dd4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04aa0aa91b9adb53b30b87f93d942e389537dd4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bab076f76ac1930fcec0f0b2e8a6f11b966d2d87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bab076f76ac1930fcec0f0b2e8a6f11b966d2d87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bab076f76ac1930fcec0f0b2e8a6f11b966d2d87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bab076f76ac1930fcec0f0b2e8a6f11b966d2d87/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ce02ba255cf6b023124277264fe6b34554674910", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce02ba255cf6b023124277264fe6b34554674910", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce02ba255cf6b023124277264fe6b34554674910"}], "stats": {"total": 76, "additions": 70, "deletions": 6}, "files": [{"sha": "8b0d77465e7744f88bb9b6c623dd31f08e766323", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab076f76ac1930fcec0f0b2e8a6f11b966d2d87/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab076f76ac1930fcec0f0b2e8a6f11b966d2d87/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bab076f76ac1930fcec0f0b2e8a6f11b966d2d87", "patch": "@@ -1,3 +1,10 @@\n+2002-10-30  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/8186\n+\t* cp-tree.h (ADDR_IS_INVISIREF): New macro.\n+\t* call.c (convert_for_arg_passing): Set it.\n+\t* except.c (stabilize_throw_expr): Recurse for such an arg.\n+\n 2002-10-31  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (lang_decl_flags): Remove init_priority."}, {"sha": "a347bbacd7f2f2719d1a016ab26ea5b5f9d011d8", "filename": "gcc/cp/call.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab076f76ac1930fcec0f0b2e8a6f11b966d2d87/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab076f76ac1930fcec0f0b2e8a6f11b966d2d87/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=bab076f76ac1930fcec0f0b2e8a6f11b966d2d87", "patch": "@@ -4277,7 +4277,10 @@ convert_for_arg_passing (type, val)\n {\n   /* Pass classes with copy ctors by invisible reference.  */\n   if (TREE_ADDRESSABLE (type))\n-    val = build1 (ADDR_EXPR, build_reference_type (type), val);\n+    {\n+      val = build1 (ADDR_EXPR, build_reference_type (type), val);\n+      ADDR_IS_INVISIREF (val) = 1;\n+    }\n   else if (PROMOTE_PROTOTYPES\n \t   && INTEGRAL_TYPE_P (type)\n \t   && TYPE_PRECISION (type) < TYPE_PRECISION (integer_type_node))\n@@ -4295,7 +4298,11 @@ cp_convert_parm_for_inlining (parm, value, fn)\n   /* When inlining, we don't need to mess with invisible references, so\n      undo the ADDR_EXPR.  */\n   if (TREE_ADDRESSABLE (TREE_TYPE (parm)))\n-    value = build_indirect_ref (value, NULL);\n+    {\n+      value = TREE_OPERAND (value, 0);\n+      if (TREE_CODE (value) != TARGET_EXPR)\n+\tabort ();\n+    }\n   return value;\n }\n "}, {"sha": "cfe7cc9ef52140b32d5a86050a2a2972f86895b5", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab076f76ac1930fcec0f0b2e8a6f11b966d2d87/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab076f76ac1930fcec0f0b2e8a6f11b966d2d87/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=bab076f76ac1930fcec0f0b2e8a6f11b966d2d87", "patch": "@@ -66,6 +66,7 @@ struct diagnostic_context;\n       BINDING_HAS_LEVEL_P (in CPLUS_BINDING)\n       BINFO_LOST_PRIMARY_P (in BINFO)\n       TREE_PARMLIST (in TREE_LIST)\n+      ADDR_IS_INVISIREF (in ADDR_EXPR)\n    3: TYPE_USES_VIRTUAL_BASECLASSES (in a class TYPE).\n       BINFO_VTABLE_PATH_MARKED.\n       BINFO_PUSHDECLS_MARKED.\n@@ -1673,6 +1674,10 @@ struct lang_type GTY(())\n /* Nonzero for a parmlist means that this parmlist ended in ...  */\n #define PARMLIST_ELLIPSIS_P(NODE) TREE_LANG_FLAG_0 (NODE)\n \n+/* Nonzero if this ADDR_EXPR is used to implement the pass by invisible\n+   reference calling convention.  */\n+#define ADDR_IS_INVISIREF(NODE) TREE_LANG_FLAG_2 (NODE)\n+\n /* For FUNCTION_TYPE or METHOD_TYPE, a list of the exceptions that\n    this type can raise.  Each TREE_VALUE is a _TYPE.  The TREE_VALUE\n    will be NULL_TREE to indicate a throw specification of `()', or"}, {"sha": "5e2ae89dff764b8067a4f3569555998b56934244", "filename": "gcc/cp/except.c", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab076f76ac1930fcec0f0b2e8a6f11b966d2d87/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab076f76ac1930fcec0f0b2e8a6f11b966d2d87/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=bab076f76ac1930fcec0f0b2e8a6f11b966d2d87", "patch": "@@ -599,12 +599,31 @@ stabilize_throw_expr (exp, initp)\n       init_expr = void_zero_node;\n       for (; args; args = TREE_CHAIN (args))\n \t{\n+\t  tree arg = TREE_VALUE (args);\n \t  tree arg_init_expr;\n-\t  tree newarg = stabilize_expr (TREE_VALUE (args), &arg_init_expr);\n+\t  if (TREE_CODE (arg) == ADDR_EXPR\n+\t      && ADDR_IS_INVISIREF (arg))\n+\t    {\n+\t      /* A sub-TARGET_EXPR.  Recurse; we can't wrap the actual call\n+\t\t without introducing an extra copy.  */\n+\t      tree sub = TREE_OPERAND (arg, 0);\n+\t      if (TREE_CODE (sub) != TARGET_EXPR)\n+\t\tabort ();\n+\t      sub = stabilize_throw_expr (sub, &arg_init_expr);\n+\t      TREE_OPERAND (arg, 0) = sub;\n+\t      if (TREE_SIDE_EFFECTS (arg_init_expr))\n+\t\tinit_expr = build (COMPOUND_EXPR, void_type_node, init_expr,\n+\t\t\t\t   arg_init_expr);\n+\t    }\n+\t  else\n+\t    {\n+\t      arg = stabilize_expr (arg, &arg_init_expr);\n \n-\t  if (arg_init_expr != void_zero_node)\n-\t    init_expr = build (COMPOUND_EXPR, void_type_node, arg_init_expr, init_expr);\n-\t  *p = tree_cons (NULL_TREE, newarg, NULL_TREE);\n+\t      if (TREE_SIDE_EFFECTS (arg_init_expr))\n+\t\tinit_expr = build (COMPOUND_EXPR, void_type_node, init_expr,\n+\t\t\t\t   arg_init_expr);\n+\t    }\n+\t  *p = tree_cons (NULL_TREE, arg, NULL_TREE);\n \t  p = &TREE_CHAIN (*p);\n \t}\n       TREE_OPERAND (aggr_init, 1) = newargs;"}, {"sha": "df47cab0cf424f50a6b206159fc8788516893049", "filename": "gcc/testsuite/g++.dg/eh/stabilize.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab076f76ac1930fcec0f0b2e8a6f11b966d2d87/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fstabilize.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab076f76ac1930fcec0f0b2e8a6f11b966d2d87/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fstabilize.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fstabilize.C?ref=bab076f76ac1930fcec0f0b2e8a6f11b966d2d87", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/8186\n+\n+// Bug: In f, convert_for_arg_passing wrapped the A TARGET_EXPR in an\n+// ADDR_EXPR for passing by invisible ref.  stabilize_throw_expr copied the\n+// resulting pointer into a temporary.  cp_convert_parm_for_inlining then\n+// dereferences it and tries to initialize B::am with the INDIRECT_REF,\n+// which calls for a bitwise copy.  Which is broken.\n+\n+// { dg-options \"-O\" }\n+\n+struct A\n+{\n+  A();\n+  A(const A&);\n+  A& operator=(const A&);\n+};\n+\n+struct B {\n+  A am;\n+  B(A a) { am = a; }\n+};\n+\n+void f ()\n+{\n+  throw B(A());\n+}"}]}