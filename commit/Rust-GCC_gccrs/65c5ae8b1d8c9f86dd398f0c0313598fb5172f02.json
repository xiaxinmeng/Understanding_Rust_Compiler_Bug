{"sha": "65c5ae8b1d8c9f86dd398f0c0313598fb5172f02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVjNWFlOGIxZDhjOWY4NmRkMzk4ZjBjMDMxMzU5OGZiNTE3MmYwMg==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2009-03-30T09:09:52Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2009-03-30T09:09:52Z"}, "message": "sparc.c (sparc_compare_emitted): Remove.\n\n2009-03-30  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* config/sparc/sparc.c (sparc_compare_emitted): Remove.\n\t(gen_compare_reg, emit_v9_brxx_insn): Handle MODE_CC\n\tsparc_compare_op0 like sparc_compare_emitted used to be handled.\n\t(sparc_expand_compare_and_swap_12): Set sparc_compare_op0\n\tinstead of sparc_compare_emitted.\n\t* config/sparc/sparc.h (sparc_compare_emitted): Remove.\n\t* config/sparc/sparc.md (stack_protect_test): Set sparc_compare_op0\n\tinstead of sparc_compare_emitted.\n\nFrom-SVN: r145284", "tree": {"sha": "8cea258def420209db5de2fb050cfcbf6909f08b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8cea258def420209db5de2fb050cfcbf6909f08b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65c5ae8b1d8c9f86dd398f0c0313598fb5172f02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65c5ae8b1d8c9f86dd398f0c0313598fb5172f02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65c5ae8b1d8c9f86dd398f0c0313598fb5172f02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65c5ae8b1d8c9f86dd398f0c0313598fb5172f02/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d25aa7ab77a7ffa75ba3a029d1b2fd6a4084e965", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d25aa7ab77a7ffa75ba3a029d1b2fd6a4084e965", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d25aa7ab77a7ffa75ba3a029d1b2fd6a4084e965"}], "stats": {"total": 45, "additions": 26, "deletions": 19}, "files": [{"sha": "552e97debce006dc9f05483899a7317a9efb39eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c5ae8b1d8c9f86dd398f0c0313598fb5172f02/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c5ae8b1d8c9f86dd398f0c0313598fb5172f02/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=65c5ae8b1d8c9f86dd398f0c0313598fb5172f02", "patch": "@@ -1,3 +1,14 @@\n+2009-03-30  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* config/sparc/sparc.c (sparc_compare_emitted): Remove.\n+\t(gen_compare_reg, emit_v9_brxx_insn): Handle MODE_CC\n+\tsparc_compare_op0 like sparc_compare_emitted used to be handled.\n+\t(sparc_expand_compare_and_swap_12): Set sparc_compare_op0\n+\tinstead of sparc_compare_emitted.\n+\t* config/sparc/sparc.h (sparc_compare_emitted): Remove.\n+\t* config/sparc/sparc.md (stack_protect_test): Set sparc_compare_op0\n+\tinstead of sparc_compare_emitted.\n+\n 2009-03-30  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* bb-reorder.c (partition_hot_cold_basic_blocks): Do not"}, {"sha": "7e6a358f89b85f8f11f2e153841034809004e500", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c5ae8b1d8c9f86dd398f0c0313598fb5172f02/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c5ae8b1d8c9f86dd398f0c0313598fb5172f02/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=65c5ae8b1d8c9f86dd398f0c0313598fb5172f02", "patch": "@@ -282,7 +282,7 @@ static GTY(()) alias_set_type struct_value_alias_set;\n \n /* Save the operands last given to a compare for use when we\n    generate a scc or bcc insn.  */\n-rtx sparc_compare_op0, sparc_compare_op1, sparc_compare_emitted;\n+rtx sparc_compare_op0, sparc_compare_op1;\n \n /* Vector to say how input registers are mapped to output registers.\n    HARD_FRAME_POINTER_REGNUM cannot be remapped by this function to\n@@ -2006,17 +2006,15 @@ select_cc_mode (enum rtx_code op, rtx x, rtx y ATTRIBUTE_UNUSED)\n rtx\n gen_compare_reg (enum rtx_code code)\n {\n-  rtx x = sparc_compare_op0;\n-  rtx y = sparc_compare_op1;\n-  enum machine_mode mode = SELECT_CC_MODE (code, x, y);\n-  rtx cc_reg;\n+  enum machine_mode mode;\n+  rtx x, y, cc_reg;\n \n-  if (sparc_compare_emitted != NULL_RTX)\n-    {\n-      cc_reg = sparc_compare_emitted;\n-      sparc_compare_emitted = NULL_RTX;\n-      return cc_reg;\n-    }\n+  if (GET_MODE_CLASS (GET_MODE (sparc_compare_op0)) == MODE_CC)\n+    return sparc_compare_op0;\n+\n+  x = sparc_compare_op0;\n+  y = sparc_compare_op1;\n+  mode = SELECT_CC_MODE (code, x, y);\n \n   /* ??? We don't have movcc patterns so we cannot generate pseudo regs for the\n      fcc regs (cse can't tell they're really call clobbered regs and will\n@@ -2198,7 +2196,7 @@ gen_v9_scc (enum rtx_code compare_code, register rtx *operands)\n void\n emit_v9_brxx_insn (enum rtx_code code, rtx op0, rtx label)\n {\n-  gcc_assert (sparc_compare_emitted == NULL_RTX);\n+  gcc_assert (GET_MODE_CLASS (GET_MODE (sparc_compare_op0)) != MODE_CC);\n   emit_jump_insn (gen_rtx_SET (VOIDmode,\n \t\t\t   pc_rtx,\n \t\t\t   gen_rtx_IF_THEN_ELSE (VOIDmode,\n@@ -9026,7 +9024,8 @@ sparc_expand_compare_and_swap_12 (rtx result, rtx mem, rtx oldval, rtx newval)\n \n   emit_insn (gen_rtx_SET (VOIDmode, val, resv));\n \n-  sparc_compare_emitted = cc;\n+  sparc_compare_op0 = cc;\n+  sparc_compare_op1 = const0_rtx;\n   emit_jump_insn (gen_bne (loop_label));\n \n   emit_label (end_label);"}, {"sha": "6a46093dfd35519447c9c9a35f78f0866e3f1c0b", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c5ae8b1d8c9f86dd398f0c0313598fb5172f02/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c5ae8b1d8c9f86dd398f0c0313598fb5172f02/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=65c5ae8b1d8c9f86dd398f0c0313598fb5172f02", "patch": "@@ -1558,12 +1558,10 @@ function_arg_padding ((MODE), (TYPE))\n  ? 128 : PARM_BOUNDARY)\n \f\n /* Define the information needed to generate branch and scc insns.  This is\n-   stored from the compare operation.  Note that we can't use \"rtx\" here\n-   since it hasn't been defined!  */\n+   stored from the compare operation.  */\n \n extern GTY(()) rtx sparc_compare_op0;\n extern GTY(()) rtx sparc_compare_op1;\n-extern GTY(()) rtx sparc_compare_emitted;\n \n \f\n /* Generate the special assembly code needed to tell the assembler whatever"}, {"sha": "dd282a28435b1d308dfa6472f88c2ac023296873", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c5ae8b1d8c9f86dd398f0c0313598fb5172f02/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c5ae8b1d8c9f86dd398f0c0313598fb5172f02/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=65c5ae8b1d8c9f86dd398f0c0313598fb5172f02", "patch": "@@ -8076,9 +8076,8 @@\n   else\n     {\n       emit_insn (gen_stack_protect_testsi (operands[0], operands[1]));\n-      sparc_compare_op0 = operands[0];\n-      sparc_compare_op1 = operands[1];\n-      sparc_compare_emitted = gen_rtx_REG (CCmode, SPARC_ICC_REG);\n+      sparc_compare_op0 = gen_rtx_REG (CCmode, SPARC_ICC_REG);\n+      sparc_compare_op1 = const0_rtx;\n     }\n   emit_jump_insn (gen_beq (operands[2]));\n   DONE;"}]}