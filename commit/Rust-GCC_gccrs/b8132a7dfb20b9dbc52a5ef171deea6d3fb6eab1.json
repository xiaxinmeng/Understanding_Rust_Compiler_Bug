{"sha": "b8132a7dfb20b9dbc52a5ef171deea6d3fb6eab1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjgxMzJhN2RmYjIwYjlkYmM1MmE1ZWYxNzFkZWVhNmQzZmI2ZWFiMQ==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2010-04-06T21:03:37Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-04-06T21:03:37Z"}, "message": "Fix 473.astar miscompile.\n\n2010-04-05  Sebastian Pop  <sebastian.pop@amd.com>\n\n\tPR middle-end/43519\n\t* graphite-clast-to-gimple.c (max_signed_precision_type): Use\n\tlang_hooks.types.type_for_size instead of build_nonstandard_integer_type.\n\tWhen converting an unsigned type to signed, double its precision.\n\t(gcc_type_for_interval): Use lang_hooks.types.type_for_size.\n\t(gcc_type_for_iv_of_clast_loop): Call max_signed_precision_type.\n\t(graphite_create_new_loop_guard): When ub + 1 wraps around, use lb <= ub.\n\nFrom-SVN: r158028", "tree": {"sha": "7fb4a995bc0963ed0f1d9b9e0400671db72593ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fb4a995bc0963ed0f1d9b9e0400671db72593ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8132a7dfb20b9dbc52a5ef171deea6d3fb6eab1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8132a7dfb20b9dbc52a5ef171deea6d3fb6eab1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8132a7dfb20b9dbc52a5ef171deea6d3fb6eab1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8132a7dfb20b9dbc52a5ef171deea6d3fb6eab1/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbe0d6521664869b3b0d1f9e24f0a4e657964fe8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbe0d6521664869b3b0d1f9e24f0a4e657964fe8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbe0d6521664869b3b0d1f9e24f0a4e657964fe8"}], "stats": {"total": 55, "additions": 42, "deletions": 13}, "files": [{"sha": "bdeaf835fae2207323917b2c3b1974c4d2c70fed", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8132a7dfb20b9dbc52a5ef171deea6d3fb6eab1/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8132a7dfb20b9dbc52a5ef171deea6d3fb6eab1/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=b8132a7dfb20b9dbc52a5ef171deea6d3fb6eab1", "patch": "@@ -1,4 +1,21 @@\n-2010-04-04  Sebastian Pop  <sebastian.pop@amd.com>\n+2010-04-05  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\tPR middle-end/43519\n+\t* graphite-clast-to-gimple.c (max_signed_precision_type): Use\n+\tlang_hooks.types.type_for_size instead of build_nonstandard_integer_type.\n+\tWhen converting an unsigned type to signed, double its precision.\n+\t(gcc_type_for_interval): Use lang_hooks.types.type_for_size.\n+\t(gcc_type_for_iv_of_clast_loop): Call max_signed_precision_type.\n+\t(graphite_create_new_loop_guard): When ub + 1 wraps around, use lb <= ub.\n+\n+2010-04-05  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\tPR middle-end/43519\n+\t* graphite-clast-to-gimple.c (max_signed_precision_type): Use\n+\tbuild_nonstandard_integer_type.\n+\t(gcc_type_for_interval): Same.\n+\n+2010-04-05  Sebastian Pop  <sebastian.pop@amd.com>\n \n \tPR middle-end/43519\n \t* graphite-clast-to-gimple.c (graphite_create_new_loop_guard): Use"}, {"sha": "01d141f57bb4cfd32184156992266a356aac1de8", "filename": "gcc/graphite-clast-to-gimple.c", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8132a7dfb20b9dbc52a5ef171deea6d3fb6eab1/gcc%2Fgraphite-clast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8132a7dfb20b9dbc52a5ef171deea6d3fb6eab1/gcc%2Fgraphite-clast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-clast-to-gimple.c?ref=b8132a7dfb20b9dbc52a5ef171deea6d3fb6eab1", "patch": "@@ -231,8 +231,15 @@ max_signed_precision_type (tree type1, tree type2)\n {\n   int p1 = TYPE_PRECISION (type1);\n   int p2 = TYPE_PRECISION (type2);\n-  int precision = p1 > p2 ? p1 : p2;\n-  tree type = lang_hooks.types.type_for_size (precision, false);\n+  int precision;\n+  tree type;\n+\n+  if (p1 > p2)\n+    precision = TYPE_UNSIGNED (type1) ? p1 * 2 : p1;\n+  else\n+    precision = TYPE_UNSIGNED (type2) ? p2 * 2 : p2;\n+\n+  type = lang_hooks.types.type_for_size (precision, false);\n \n   if (!type)\n     {\n@@ -247,7 +254,6 @@ max_signed_precision_type (tree type1, tree type2)\n static tree\n max_precision_type (tree type1, tree type2)\n {\n-\n   if (POINTER_TYPE_P (type1))\n     return type1;\n \n@@ -790,9 +796,9 @@ gcc_type_for_iv_of_clast_loop (struct clast_for *stmt_for, int level,\n   CloogStatement *cs = body->statement;\n   poly_bb_p pbb = (poly_bb_p) cloog_statement_usr (cs);\n \n-  return max_precision_type (lb_type, max_precision_type\n-\t\t\t     (ub_type, compute_type_for_level (pbb,\n-\t\t\t\t\t\t\t       level - 1)));\n+  return max_signed_precision_type (lb_type, max_precision_type\n+\t\t\t\t    (ub_type, compute_type_for_level\n+\t\t\t\t     (pbb, level - 1)));\n }\n \n /* Creates a new LOOP corresponding to Cloog's STMT.  Inserts an\n@@ -1022,22 +1028,28 @@ graphite_create_new_loop_guard (sese region, edge entry_edge,\n \t\t\t\t     newivs_index, params_index);\n   tree ub = clast_to_gcc_expression (type, stmt->UB, region, newivs,\n \t\t\t\t     newivs_index, params_index);\n+  tree ub_one;\n \n-  /* XXX: Adding +1 and using LT_EXPR helps with loop latches that have a\n+  /* Adding +1 and using LT_EXPR helps with loop latches that have a\n      loop iteration count of \"PARAMETER - 1\".  For PARAMETER == 0 this becomes\n      2^{32|64}, and the condition lb <= ub is true, even if we do not want this.\n-     However lb < ub + 1 is false, as expected.\n-     There might be a problem with cases where ub is 2^32.  */\n+     However lb < ub + 1 is false, as expected.  */\n   tree one;\n   Value gmp_one;\n+\n   value_init (gmp_one);\n   value_set_si (gmp_one, 1);\n   one = gmp_cst_to_tree (type, gmp_one);\n   value_clear (gmp_one);\n \n-  ub = fold_build2 (POINTER_TYPE_P (type) ? POINTER_PLUS_EXPR : PLUS_EXPR,\n-\t\t    type, ub, one);\n-  cond_expr = fold_build2 (LT_EXPR, boolean_type_node, lb, ub);\n+  ub_one = fold_build2 (POINTER_TYPE_P (type) ? POINTER_PLUS_EXPR : PLUS_EXPR,\n+\t\t\ttype, ub, one);\n+\n+  /* When ub + 1 wraps around, use lb <= ub.  */\n+  if (integer_zerop (ub_one))\n+    cond_expr = fold_build2 (LE_EXPR, boolean_type_node, lb, ub);\n+  else\n+    cond_expr = fold_build2 (LT_EXPR, boolean_type_node, lb, ub_one);\n \n   exit_edge = create_empty_if_region_on_edge (entry_edge, cond_expr);\n "}]}