{"sha": "fd8d363e257e2a8c9a22fcc276421bec68e1bb94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ4ZDM2M2UyNTdlMmE4YzlhMjJmY2MyNzY0MjFiZWM2OGUxYmI5NA==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-09-04T13:03:02Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-09-04T13:03:02Z"}, "message": "gimple.h (gimple_build_switch): Remove.\n\n\t* gimple.h (gimple_build_switch): Remove.\n\t(gimple_build_switch_vec): Promote to the new gimple_build_switch.\n\t(gimple_switch_default_label): Assert the default case label is\n\treally a default case label.\n\t(gimple_switch_set_default_label): Likewise.\n\t* gimple.c (gimple_build_switch_nlabels): Make sure a default label\n\tis passed in, and simplify accordingly.\n\t(gimple_build_switch): Removed.\n\t(gimple_build_switch_vec): Rename to gimple_build_switch.\n\t* gimplify.c (gimplify_switch_expr): Update gimple_build_switch use.\n\t* gimple-pretty-print.c (dump_gimple_switch): Do not accept a NULL\n\tcase label.\n\t* stmt.c (expand_case): Simplify using the fact that every GIMPLE\n\tswitch must have a default case.\n\t* tree-cfg.c (group_case_labels_stmt): Likewise.\n\t(verify_gimple_switch): Use gimple_switch_label in verifier to get\n\tthe label at index 0, and verify that it is a valid default case.\n\t* except.c (sjlj_emit_dispatch_table): Rewrite construction of the\n\tswitch for dispatching.\n\t* tree-eh.c (lower_try_finally_switch): Update gimple_build_switch use.\n\t(lower_eh_dispatch): Likewise.\n\t* tree-vrp.c (execute_vrp): Use gimple_switch_label to get the case\n\tlabel at index 0 before turning it into a default case label.\n\t* omp-low.c (expand_omp_sections): Update gimple_build_switch use.\n\t* tree-switch-conversion.c (emit_case_bit_tests): Get the default case\n\tlabel using gimple_switch_default_label.\n\t(collect_switch_conv_info): Likewise.\n\t(process_switch): Likewise.\n\t* doc/gimple.texi: Update documentation of gimple_build_switch.\n\nFrom-SVN: r190925", "tree": {"sha": "e122d3a36874476f12e63764b611e6ee436001d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e122d3a36874476f12e63764b611e6ee436001d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd8d363e257e2a8c9a22fcc276421bec68e1bb94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd8d363e257e2a8c9a22fcc276421bec68e1bb94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd8d363e257e2a8c9a22fcc276421bec68e1bb94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd8d363e257e2a8c9a22fcc276421bec68e1bb94/comments", "author": null, "committer": null, "parents": [{"sha": "b8db7f86fd47dcae8e559b990816243f27ade021", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8db7f86fd47dcae8e559b990816243f27ade021", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8db7f86fd47dcae8e559b990816243f27ade021"}], "stats": {"total": 191, "additions": 83, "deletions": 108}, "files": [{"sha": "e9ef4939ed5e7f2b3e20c7a5ac333eef47a6dd46", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd8d363e257e2a8c9a22fcc276421bec68e1bb94/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd8d363e257e2a8c9a22fcc276421bec68e1bb94/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd8d363e257e2a8c9a22fcc276421bec68e1bb94", "patch": "@@ -1,3 +1,35 @@\n+2012-09-04  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* gimple.h (gimple_build_switch): Remove.\n+\t(gimple_build_switch_vec): Promote to the new gimple_build_switch.\n+\t(gimple_switch_default_label): Assert the default case label is\n+\treally a default case label.\n+\t(gimple_switch_set_default_label): Likewise.\n+\t* gimple.c (gimple_build_switch_nlabels): Make sure a default label\n+\tis passed in, and simplify accordingly.\n+\t(gimple_build_switch): Removed.\n+\t(gimple_build_switch_vec): Rename to gimple_build_switch.\n+\t* gimplify.c (gimplify_switch_expr): Update gimple_build_switch use.\n+\t* gimple-pretty-print.c (dump_gimple_switch): Do not accept a NULL\n+\tcase label.\n+\t* stmt.c (expand_case): Simplify using the fact that every GIMPLE\n+\tswitch must have a default case.\n+\t* tree-cfg.c (group_case_labels_stmt): Likewise.\n+\t(verify_gimple_switch): Use gimple_switch_label in verifier to get\n+\tthe label at index 0, and verify that it is a valid default case.\n+\t* except.c (sjlj_emit_dispatch_table): Rewrite construction of the\n+\tswitch for dispatching.\n+\t* tree-eh.c (lower_try_finally_switch): Update gimple_build_switch use.\n+\t(lower_eh_dispatch): Likewise.\n+\t* tree-vrp.c (execute_vrp): Use gimple_switch_label to get the case\n+\tlabel at index 0 before turning it into a default case label.\n+\t* omp-low.c (expand_omp_sections): Update gimple_build_switch use.\n+\t* tree-switch-conversion.c (emit_case_bit_tests): Get the default case\n+\tlabel using gimple_switch_default_label.\n+\t(collect_switch_conv_info): Likewise.\n+\t(process_switch): Likewise.\n+\t* doc/gimple.texi: Update documentation of gimple_build_switch.\n+\n 2012-09-04  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/54476"}, {"sha": "f4a65478d1391f7cbd47d0aec6e310c3a9fd72bb", "filename": "gcc/doc/gimple.texi", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd8d363e257e2a8c9a22fcc276421bec68e1bb94/gcc%2Fdoc%2Fgimple.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd8d363e257e2a8c9a22fcc276421bec68e1bb94/gcc%2Fdoc%2Fgimple.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgimple.texi?ref=fd8d363e257e2a8c9a22fcc276421bec68e1bb94", "patch": "@@ -2034,21 +2034,12 @@ Set @code{RETVAL} to be the return value for @code{GIMPLE_RETURN} @code{G}.\n @subsection @code{GIMPLE_SWITCH}\n @cindex @code{GIMPLE_SWITCH}\n \n-@deftypefn {GIMPLE function} gimple gimple_build_switch (unsigned nlabels, @\n-tree index, tree default_label, ...)\n-Build a @code{GIMPLE_SWITCH} statement.  @code{NLABELS} are the number of\n-labels excluding the default label.  The default label is passed\n-in @code{DEFAULT_LABEL}.  The rest of the arguments are trees\n-representing the labels.  Each label is a tree of code\n-@code{CASE_LABEL_EXPR}.\n-@end deftypefn\n-\n-@deftypefn {GIMPLE function} gimple gimple_build_switch_vec (tree index, tree @\n+@deftypefn {GIMPLE function} gimple gimple_build_switch (tree index, tree @\n default_label, @code{VEC}(tree,heap) *args)\n-This function is an alternate way of building @code{GIMPLE_SWITCH}\n-statements.  @code{INDEX} and @code{DEFAULT_LABEL} are as in\n-gimple_build_switch.  @code{ARGS} is a vector of @code{CASE_LABEL_EXPR} trees\n-that contain the labels.\n+Build a @code{GIMPLE_SWITCH} statement.  @code{INDEX} is the index variable\n+to switch on, and @code{DEFAULT_LABEL} represents the default label.\n+@code{ARGS} is a vector of @code{CASE_LABEL_EXPR} trees that contain the\n+non-default case labels.  Each label is a tree of code @code{CASE_LABEL_EXPR}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} unsigned gimple_switch_num_labels (gimple g)"}, {"sha": "ae5a11fdaa092ce4dd4c22887b7172a91ffaf347", "filename": "gcc/except.c", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd8d363e257e2a8c9a22fcc276421bec68e1bb94/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd8d363e257e2a8c9a22fcc276421bec68e1bb94/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=fd8d363e257e2a8c9a22fcc276421bec68e1bb94", "patch": "@@ -1243,7 +1243,7 @@ sjlj_emit_dispatch_table (rtx dispatch_label, int num_dispatch)\n   eh_region r;\n   edge e;\n   int i, disp_index;\n-  gimple switch_stmt;\n+  VEC(tree, heap) *dispatch_labels = NULL;\n \n   fc = crtl->eh.sjlj_fc;\n \n@@ -1289,17 +1289,8 @@ sjlj_emit_dispatch_table (rtx dispatch_label, int num_dispatch)\n \n   /* If there's exactly one call site in the function, don't bother\n      generating a switch statement.  */\n-  switch_stmt = NULL;\n   if (num_dispatch > 1)\n-    {\n-      tree disp;\n-\n-      mem = adjust_address (fc, TYPE_MODE (integer_type_node),\n-\t\t\t    sjlj_fc_call_site_ofs);\n-      disp = make_tree (integer_type_node, mem);\n-\n-      switch_stmt = gimple_build_switch_nlabels (num_dispatch, disp, NULL);\n-    }\n+    dispatch_labels = VEC_alloc (tree, heap, num_dispatch);\n \n   for (i = 1; VEC_iterate (eh_landing_pad, cfun->eh->lp_array, i, lp); ++i)\n     if (lp && lp->post_landing_pad)\n@@ -1317,8 +1308,7 @@ sjlj_emit_dispatch_table (rtx dispatch_label, int num_dispatch)\n \t    t_label = create_artificial_label (UNKNOWN_LOCATION);\n \t    t = build_int_cst (integer_type_node, disp_index);\n \t    case_elt = build_case_label (t, NULL, t_label);\n-\t    gimple_switch_set_label (switch_stmt, disp_index, case_elt);\n-\n+\t    VEC_quick_push (tree, dispatch_labels, case_elt);\n \t    label = label_rtx (t_label);\n \t  }\n \telse\n@@ -1371,7 +1361,16 @@ sjlj_emit_dispatch_table (rtx dispatch_label, int num_dispatch)\n \n   if (num_dispatch > 1)\n     {\n+      gimple switch_stmt;\n+      tree default_label = create_artificial_label (UNKNOWN_LOCATION);\n+      rtx disp = adjust_address (fc, TYPE_MODE (integer_type_node),\n+\t\t\t\t sjlj_fc_call_site_ofs);\n+      switch_stmt = gimple_build_switch (make_tree (integer_type_node, disp),\n+\t\t\t\t\t build_case_label (NULL, NULL,\n+\t\t\t\t\t\t\t   default_label),\n+\t\t\t\t\t dispatch_labels);\n       expand_case (switch_stmt);\n+      emit_label (label_rtx (default_label));\n       expand_builtin_trap ();\n     }\n "}, {"sha": "e4550c0110489a4ab9e75775d80b8c369e19e235", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd8d363e257e2a8c9a22fcc276421bec68e1bb94/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd8d363e257e2a8c9a22fcc276421bec68e1bb94/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=fd8d363e257e2a8c9a22fcc276421bec68e1bb94", "patch": "@@ -770,9 +770,7 @@ dump_gimple_switch (pretty_printer *buffer, gimple gs, int spc, int flags)\n   for (i = 0; i < gimple_switch_num_labels (gs); i++)\n     {\n       tree case_label = gimple_switch_label (gs, i);\n-      if (case_label == NULL_TREE)\n-\tcontinue;\n-\n+      gcc_checking_assert (case_label != NULL_TREE);\n       dump_generic_node (buffer, case_label, spc, flags, false);\n       pp_character (buffer, ' ');\n       dump_generic_node (buffer, CASE_LABEL (case_label), spc, flags, false);"}, {"sha": "88fa7627e8428dc32f07c289581740dd2ef924d2", "filename": "gcc/gimple.c", "status": "modified", "additions": 7, "deletions": 32, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd8d363e257e2a8c9a22fcc276421bec68e1bb94/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd8d363e257e2a8c9a22fcc276421bec68e1bb94/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=fd8d363e257e2a8c9a22fcc276421bec68e1bb94", "patch": "@@ -803,55 +803,30 @@ gimple\n gimple_build_switch_nlabels (unsigned nlabels, tree index, tree default_label)\n {\n   /* nlabels + 1 default label + 1 index.  */\n+  gcc_checking_assert (default_label);\n   gimple p = gimple_build_with_ops (GIMPLE_SWITCH, ERROR_MARK,\n-\t\t\t\t    1 + (default_label != NULL) + nlabels);\n+\t\t\t\t    1 + 1 + nlabels);\n   gimple_switch_set_index (p, index);\n-  if (default_label)\n-    gimple_switch_set_default_label (p, default_label);\n+  gimple_switch_set_default_label (p, default_label);\n   return p;\n }\n \n-\n-/* Build a GIMPLE_SWITCH statement.\n-\n-   INDEX is the switch's index.\n-   NLABELS is the number of labels in the switch excluding the DEFAULT_LABEL.\n-   ... are the labels excluding the default.  */\n-\n-gimple\n-gimple_build_switch (unsigned nlabels, tree index, tree default_label, ...)\n-{\n-  va_list al;\n-  unsigned i, offset;\n-  gimple p = gimple_build_switch_nlabels (nlabels, index, default_label);\n-\n-  /* Store the rest of the labels.  */\n-  va_start (al, default_label);\n-  offset = (default_label != NULL);\n-  for (i = 0; i < nlabels; i++)\n-    gimple_switch_set_label (p, i + offset, va_arg (al, tree));\n-  va_end (al);\n-\n-  return p;\n-}\n-\n-\n /* Build a GIMPLE_SWITCH statement.\n \n    INDEX is the switch's index.\n    DEFAULT_LABEL is the default label\n    ARGS is a vector of labels excluding the default.  */\n \n gimple\n-gimple_build_switch_vec (tree index, tree default_label, VEC(tree, heap) *args)\n+gimple_build_switch (tree index, tree default_label, VEC(tree, heap) *args)\n {\n-  unsigned i, offset, nlabels = VEC_length (tree, args);\n+  unsigned i, nlabels = VEC_length (tree, args);\n+\n   gimple p = gimple_build_switch_nlabels (nlabels, index, default_label);\n \n   /* Copy the labels from the vector to the switch statement.  */\n-  offset = (default_label != NULL);\n   for (i = 0; i < nlabels; i++)\n-    gimple_switch_set_label (p, i + offset, VEC_index (tree, args, i));\n+    gimple_switch_set_label (p, i + 1, VEC_index (tree, args, i));\n \n   return p;\n }"}, {"sha": "15b597fc187a359751f2e242ea2d3f62a1881d61", "filename": "gcc/gimple.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd8d363e257e2a8c9a22fcc276421bec68e1bb94/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd8d363e257e2a8c9a22fcc276421bec68e1bb94/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=fd8d363e257e2a8c9a22fcc276421bec68e1bb94", "patch": "@@ -781,8 +781,7 @@ gimple gimple_build_wce (gimple_seq);\n gimple gimple_build_resx (int);\n gimple gimple_build_eh_dispatch (int);\n gimple gimple_build_switch_nlabels (unsigned, tree, tree);\n-gimple gimple_build_switch (unsigned, tree, tree, ...);\n-gimple gimple_build_switch_vec (tree, tree, VEC(tree,heap) *);\n+gimple gimple_build_switch (tree, tree, VEC(tree,heap) *);\n gimple gimple_build_omp_parallel (gimple_seq, tree, tree, tree);\n gimple gimple_build_omp_task (gimple_seq, tree, tree, tree, tree, tree, tree);\n gimple gimple_build_omp_for (gimple_seq, tree, size_t, gimple_seq);\n@@ -3639,14 +3638,17 @@ gimple_switch_set_label (gimple gs, unsigned index, tree label)\n static inline tree\n gimple_switch_default_label (const_gimple gs)\n {\n-  return gimple_switch_label (gs, 0);\n+  tree label = gimple_switch_label (gs, 0);\n+  gcc_checking_assert (!CASE_LOW (label) && !CASE_HIGH (label));\n+  return label;\n }\n \n /* Set the default label for a switch statement.  */\n \n static inline void\n gimple_switch_set_default_label (gimple gs, tree label)\n {\n+  gcc_checking_assert (!CASE_LOW (label) && !CASE_HIGH (label));\n   gimple_switch_set_label (gs, 0, label);\n }\n "}, {"sha": "03973537ee6470faf310e1b6949d6cc1df0cee4b", "filename": "gcc/gimplify.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd8d363e257e2a8c9a22fcc276421bec68e1bb94/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd8d363e257e2a8c9a22fcc276421bec68e1bb94/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=fd8d363e257e2a8c9a22fcc276421bec68e1bb94", "patch": "@@ -1675,7 +1675,7 @@ preprocess_case_label_vec_for_gimple (VEC(tree,heap) *labels,\n \t  gcc_assert (!default_case);\n \t  default_case = elt;\n \t  /* The default case must be passed separately to the\n-\t     gimple_build_switch routines.  But if DEFAULT_CASEP\n+\t     gimple_build_switch routine.  But if DEFAULT_CASEP\n \t     is NULL, we do not remove the default case (it would\n \t     be completely lost).  */\n \t  if (default_casep)\n@@ -1788,8 +1788,8 @@ gimplify_switch_expr (tree *expr_p, gimple_seq *pre_p)\n \t  gimplify_seq_add_stmt (&switch_body_seq, new_default);\n \t}\n \n-      gimple_switch = gimple_build_switch_vec (SWITCH_COND (switch_expr),\n-\t\t\t\t\t       default_case, labels);\n+      gimple_switch = gimple_build_switch (SWITCH_COND (switch_expr),\n+\t\t\t\t\t   default_case, labels);\n       gimplify_seq_add_stmt (pre_p, gimple_switch);\n       gimplify_seq_add_seq (pre_p, switch_body_seq);\n       VEC_free(tree, heap, labels);"}, {"sha": "9474167ce6d10c49f07c5922bd764ab55617c103", "filename": "gcc/omp-low.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd8d363e257e2a8c9a22fcc276421bec68e1bb94/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd8d363e257e2a8c9a22fcc276421bec68e1bb94/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=fd8d363e257e2a8c9a22fcc276421bec68e1bb94", "patch": "@@ -4873,7 +4873,7 @@ expand_omp_sections (struct omp_region *region)\n   u = build_case_label (NULL, NULL, t);\n   make_edge (l0_bb, default_bb, 0);\n \n-  stmt = gimple_build_switch_vec (vmain, u, label_vec);\n+  stmt = gimple_build_switch (vmain, u, label_vec);\n   gsi_insert_after (&switch_si, stmt, GSI_SAME_STMT);\n   gsi_remove (&switch_si, true);\n   VEC_free (tree, heap, label_vec);"}, {"sha": "8d76b3eea08783db060107f56f77b3b91f51da7d", "filename": "gcc/stmt.c", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd8d363e257e2a8c9a22fcc276421bec68e1bb94/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd8d363e257e2a8c9a22fcc276421bec68e1bb94/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=fd8d363e257e2a8c9a22fcc276421bec68e1bb94", "patch": "@@ -1951,7 +1951,7 @@ expand_case (gimple stmt)\n   tree minval = NULL_TREE, maxval = NULL_TREE, range = NULL_TREE;\n   rtx default_label = NULL_RTX;\n   unsigned int count, uniq;\n-  int i, stopi = 0;\n+  int i;\n   rtx before_case, end;\n   int ncases = gimple_switch_num_labels (stmt);\n   tree index_expr = gimple_switch_index (stmt);\n@@ -1986,16 +1986,11 @@ expand_case (gimple stmt)\n \n   do_pending_stack_adjust ();\n \n-  /* The default case, if ever taken, is the first element.  */\n-  elt = gimple_switch_label (stmt, 0);\n-  if (!CASE_LOW (elt) && !CASE_HIGH (elt))\n-    {\n-      default_label = label_rtx (CASE_LABEL (elt));\n-      stopi = 1;\n-    }\n+  /* Find the default case target label.  */\n+  default_label = label_rtx (CASE_LABEL (gimple_switch_default_label (stmt)));\n \n   /* Get upper and lower bounds of case values.  */\n-  elt = gimple_switch_label (stmt, stopi);\n+  elt = gimple_switch_label (stmt, 1);\n   minval = fold_convert (index_type, CASE_LOW (elt));\n   elt = gimple_switch_label (stmt, ncases - 1);\n   if (CASE_HIGH (elt))\n@@ -2011,7 +2006,7 @@ expand_case (gimple stmt)\n   uniq = 0;\n   count = 0;\n   label_bitmap = BITMAP_ALLOC (NULL);\n-  for (i = gimple_switch_num_labels (stmt) - 1; i >= stopi; --i)\n+  for (i = gimple_switch_num_labels (stmt) - 1; i >= 1; --i)\n     {\n       tree low, high;\n       rtx lab;"}, {"sha": "4471527182273e3cefcbc1aea8b0fbf9d432d3d4", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd8d363e257e2a8c9a22fcc276421bec68e1bb94/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd8d363e257e2a8c9a22fcc276421bec68e1bb94/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=fd8d363e257e2a8c9a22fcc276421bec68e1bb94", "patch": "@@ -1334,26 +1334,11 @@ group_case_labels_stmt (gimple stmt)\n   int old_size = gimple_switch_num_labels (stmt);\n   int i, j, new_size = old_size;\n   basic_block default_bb = NULL;\n-  bool has_default;\n \n-  /* The default label is always the first case in a switch\n-     statement after gimplification if it was not optimized\n-     away */\n-  if (!CASE_LOW (gimple_switch_default_label (stmt))\n-      && !CASE_HIGH (gimple_switch_default_label (stmt)))\n-    {\n-      tree default_case = gimple_switch_default_label (stmt);\n-      default_bb = label_to_block (CASE_LABEL (default_case));\n-      has_default = true;\n-    }\n-  else\n-    has_default = false;\n+  default_bb = label_to_block (CASE_LABEL (gimple_switch_default_label (stmt)));\n \n   /* Look for possible opportunities to merge cases.  */\n-  if (has_default)\n-    i = 1;\n-  else\n-    i = 0;\n+  i = 1;\n   while (i < old_size)\n     {\n       tree base_case, base_high;\n@@ -4148,7 +4133,7 @@ verify_gimple_switch (gimple stmt)\n       return true;\n     }\n \n-  elt = gimple_switch_default_label (stmt);\n+  elt = gimple_switch_label (stmt, 0);\n   if (CASE_LOW (elt) != NULL_TREE || CASE_HIGH (elt) != NULL_TREE)\n     {\n       error (\"invalid default case label in switch statement\");"}, {"sha": "ec74d9d4c41d9374e9041c1c4b05a21929c724fe", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd8d363e257e2a8c9a22fcc276421bec68e1bb94/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd8d363e257e2a8c9a22fcc276421bec68e1bb94/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=fd8d363e257e2a8c9a22fcc276421bec68e1bb94", "patch": "@@ -1487,8 +1487,8 @@ lower_try_finally_switch (struct leh_state *state, struct leh_tf_state *tf)\n \n   /* Build the switch statement, setting last_case to be the default\n      label.  */\n-  switch_stmt = gimple_build_switch_vec (finally_tmp, last_case,\n-                                         case_label_vec);\n+  switch_stmt = gimple_build_switch (finally_tmp, last_case,\n+\t\t\t\t     case_label_vec);\n   gimple_set_location (switch_stmt, finally_loc);\n \n   /* Need to link SWITCH_STMT after running replace_goto_queue\n@@ -3376,7 +3376,7 @@ lower_eh_dispatch (basic_block src, gimple stmt)\n \t    default_label = build_case_label (NULL, NULL, default_label);\n \t    sort_case_labels (labels);\n \n-\t    x = gimple_build_switch_vec (filter, default_label, labels);\n+\t    x = gimple_build_switch (filter, default_label, labels);\n \t    gsi_insert_before (&gsi, x, GSI_SAME_STMT);\n \n \t    VEC_free (tree, heap, labels);"}, {"sha": "87baefc07cfe80832a1155daf8744496f5fa35db", "filename": "gcc/tree-switch-conversion.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd8d363e257e2a8c9a22fcc276421bec68e1bb94/gcc%2Ftree-switch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd8d363e257e2a8c9a22fcc276421bec68e1bb94/gcc%2Ftree-switch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.c?ref=fd8d363e257e2a8c9a22fcc276421bec68e1bb94", "patch": "@@ -318,7 +318,7 @@ emit_case_bit_tests (gimple swtch, tree index_expr,\n   memset (&test, 0, sizeof (test));\n \n   /* Get the edge for the default case.  */\n-  tmp = gimple_switch_label (swtch, 0);\n+  tmp = gimple_switch_default_label (swtch);\n   default_bb = label_to_block (CASE_LABEL (tmp));\n   default_edge = find_edge (switch_bb, default_bb);\n \n@@ -612,14 +612,12 @@ collect_switch_conv_info (gimple swtch, struct switch_conv_info *info)\n   memset (info, 0, sizeof (*info));\n \n   /* The gimplifier has already sorted the cases by CASE_LOW and ensured there\n-     is a default label which is the first in the vector.  */\n-  gcc_assert (CASE_LOW (gimple_switch_label (swtch, 0)) == NULL_TREE);\n-\n-  /* Collect the bits we can deduce from the CFG.  */\n+     is a default label which is the first in the vector.\n+     Collect the bits we can deduce from the CFG.  */\n   info->index_expr = gimple_switch_index (swtch);\n   info->switch_bb = gimple_bb (swtch);\n   info->default_bb =\n-    label_to_block (CASE_LABEL (gimple_switch_label (swtch, 0)));\n+    label_to_block (CASE_LABEL (gimple_switch_default_label (swtch)));\n   e_default = find_edge (info->switch_bb, info->default_bb);\n   info->default_prob = e_default->probability;\n   info->default_count = e_default->count;\n@@ -1393,7 +1391,7 @@ process_switch (gimple swtch)\n      transformation.  */\n \n   create_temp_arrays (&info);\n-  gather_default_values (gimple_switch_label (swtch, 0), &info);\n+  gather_default_values (gimple_switch_default_label (swtch), &info);\n   build_constructors (swtch, &info);\n \n   build_arrays (swtch, &info); /* Build the static arrays and assignments.   */"}, {"sha": "067b60f168fb6fa1f9bc26c0ac7694f52380077e", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd8d363e257e2a8c9a22fcc276421bec68e1bb94/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd8d363e257e2a8c9a22fcc276421bec68e1bb94/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=fd8d363e257e2a8c9a22fcc276421bec68e1bb94", "patch": "@@ -9142,7 +9142,7 @@ execute_vrp (void)\n       /* As we may have replaced the default label with a regular one\n \t make sure to make it a real default label again.  This ensures\n \t optimal expansion.  */\n-      label = gimple_switch_default_label (su->stmt);\n+      label = gimple_switch_label (su->stmt, 0);\n       CASE_LOW (label) = NULL_TREE;\n       CASE_HIGH (label) = NULL_TREE;\n     }"}]}