{"sha": "76ace672dcbf704b27833e25c753298bd08af956", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZhY2U2NzJkY2JmNzA0YjI3ODMzZTI1Yzc1MzI5OGJkMDhhZjk1Ng==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-02-24T03:01:22Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-02-24T03:01:22Z"}, "message": "Don't crash if a map index is used outside of a function.\n\nFrom-SVN: r170453", "tree": {"sha": "51d6fb9452fd188f5ba831a740a8e56b7c188709", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51d6fb9452fd188f5ba831a740a8e56b7c188709"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76ace672dcbf704b27833e25c753298bd08af956", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76ace672dcbf704b27833e25c753298bd08af956", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76ace672dcbf704b27833e25c753298bd08af956", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76ace672dcbf704b27833e25c753298bd08af956/comments", "author": null, "committer": null, "parents": [{"sha": "63cc9deb7cad1672212fc84df0ca48900af236e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63cc9deb7cad1672212fc84df0ca48900af236e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63cc9deb7cad1672212fc84df0ca48900af236e6"}], "stats": {"total": 46, "additions": 37, "deletions": 9}, "files": [{"sha": "2e31e8064785f30fd1e7605bf46a6c95ff55af78", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 37, "deletions": 9, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76ace672dcbf704b27833e25c753298bd08af956/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76ace672dcbf704b27833e25c753298bd08af956/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=76ace672dcbf704b27833e25c753298bd08af956", "patch": "@@ -9888,12 +9888,39 @@ Map_index_expression::get_value_pointer(Translate_context* context,\n \n   // We need to pass in a pointer to the key, so stuff it into a\n   // variable.\n-  tree tmp = create_tmp_var(TREE_TYPE(index_tree), get_name(index_tree));\n-  DECL_IGNORED_P(tmp) = 0;\n-  DECL_INITIAL(tmp) = index_tree;\n-  tree make_tmp = build1(DECL_EXPR, void_type_node, tmp);\n-  tree tmpref = fold_convert(const_ptr_type_node, build_fold_addr_expr(tmp));\n-  TREE_ADDRESSABLE(tmp) = 1;\n+  tree tmp;\n+  tree make_tmp;\n+  if (current_function_decl != NULL)\n+    {\n+      tmp = create_tmp_var(TREE_TYPE(index_tree), get_name(index_tree));\n+      DECL_IGNORED_P(tmp) = 0;\n+      DECL_INITIAL(tmp) = index_tree;\n+      make_tmp = build1(DECL_EXPR, void_type_node, tmp);\n+      TREE_ADDRESSABLE(tmp) = 1;\n+    }\n+  else\n+    {\n+      tmp = build_decl(this->location(), VAR_DECL, create_tmp_var_name(\"M\"),\n+\t\t       TREE_TYPE(index_tree));\n+      DECL_EXTERNAL(tmp) = 0;\n+      TREE_PUBLIC(tmp) = 0;\n+      TREE_STATIC(tmp) = 1;\n+      DECL_ARTIFICIAL(tmp) = 1;\n+      if (!TREE_CONSTANT(index_tree))\n+\tmake_tmp = fold_build2_loc(this->location(), INIT_EXPR, void_type_node,\n+\t\t\t\t   tmp, index_tree);\n+      else\n+\t{\n+\t  TREE_READONLY(tmp) = 1;\n+\t  TREE_CONSTANT(tmp) = 1;\n+\t  DECL_INITIAL(tmp) = index_tree;\n+\t  make_tmp = NULL_TREE;\n+\t}\n+      rest_of_decl_compilation(tmp, 1, 0);\n+    }\n+  tree tmpref = fold_convert_loc(this->location(), const_ptr_type_node,\n+\t\t\t\t build_fold_addr_expr_loc(this->location(),\n+\t\t\t\t\t\t\t  tmp));\n \n   static tree map_index_fndecl;\n   tree call = Gogo::call_builtin(&map_index_fndecl,\n@@ -9920,9 +9947,10 @@ Map_index_expression::get_value_pointer(Translate_context* context,\n     return error_mark_node;\n   tree ptr_val_type_tree = build_pointer_type(val_type_tree);\n \n-  return build2(COMPOUND_EXPR, ptr_val_type_tree,\n-\t\tmake_tmp,\n-\t\tfold_convert(ptr_val_type_tree, call));\n+  tree ret = fold_convert_loc(this->location(), ptr_val_type_tree, call);\n+  if (make_tmp != NULL_TREE)\n+    ret = build2(COMPOUND_EXPR, ptr_val_type_tree, make_tmp, ret);\n+  return ret;\n }\n \n // Make a map index expression."}]}