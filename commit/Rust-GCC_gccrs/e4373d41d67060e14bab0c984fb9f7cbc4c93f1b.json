{"sha": "e4373d41d67060e14bab0c984fb9f7cbc4c93f1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQzNzNkNDFkNjcwNjBlMTRiYWIwYzk4NGZiOWY3Y2JjNGM5M2YxYg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2017-11-09T14:05:14Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2017-11-09T14:05:14Z"}, "message": "re PR ipa/82879 (ICE in max, at profile-count.h:889)\n\n\n\tPR ipa/82879\n\t* ipa-inline-transform.c (update_noncloned_frequencies): Use\n\tprofile_count::adjust_for_ipa_scaling.\n\t* tree-inline.c (copy_bb, copy_cfg_body): Likewise.\n\t* profile-count.c (profile_count::adjust_for_ipa_scaling): New member\n\tfunction.\n\t* profile-count.h (profile_count::adjust_for_ipa_scaling): Declare.\n\nFrom-SVN: r254582", "tree": {"sha": "fb9d5143e4e5fd9e929fbb4c13e3bd4b71aaaa40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb9d5143e4e5fd9e929fbb4c13e3bd4b71aaaa40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4373d41d67060e14bab0c984fb9f7cbc4c93f1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4373d41d67060e14bab0c984fb9f7cbc4c93f1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4373d41d67060e14bab0c984fb9f7cbc4c93f1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4373d41d67060e14bab0c984fb9f7cbc4c93f1b/comments", "author": null, "committer": null, "parents": [{"sha": "a3a6d41f4610c67b9905b3796e441397cc240178", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3a6d41f4610c67b9905b3796e441397cc240178", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3a6d41f4610c67b9905b3796e441397cc240178"}], "stats": {"total": 92, "additions": 59, "deletions": 33}, "files": [{"sha": "0953b4a36810c49446e3e9f468dfce6ecd62b698", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4373d41d67060e14bab0c984fb9f7cbc4c93f1b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4373d41d67060e14bab0c984fb9f7cbc4c93f1b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4373d41d67060e14bab0c984fb9f7cbc4c93f1b", "patch": "@@ -1,3 +1,13 @@\n+2017-11-09  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/82879\n+\t* ipa-inline-transform.c (update_noncloned_frequencies): Use\n+\tprofile_count::adjust_for_ipa_scaling.\n+\t* tree-inline.c (copy_bb, copy_cfg_body): Likewise.\n+\t* profile-count.c (profile_count::adjust_for_ipa_scaling): New member\n+\tfunction.\n+\t* profile-count.h (profile_count::adjust_for_ipa_scaling): Declare.\n+\n 2017-11-09  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gimple-ssa-store-merging.c (count_multiple_uses): New function."}, {"sha": "b2363e230439b551a87a68fd52059d5a7d48e20f", "filename": "gcc/ipa-inline-transform.c", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4373d41d67060e14bab0c984fb9f7cbc4c93f1b/gcc%2Fipa-inline-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4373d41d67060e14bab0c984fb9f7cbc4c93f1b/gcc%2Fipa-inline-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-transform.c?ref=e4373d41d67060e14bab0c984fb9f7cbc4c93f1b", "patch": "@@ -60,17 +60,7 @@ update_noncloned_frequencies (struct cgraph_node *node,\n {\n   struct cgraph_edge *e;\n \n-  /* We always must scale to be sure counters end up compatible.\n-     If den is zero, just force it nonzero and hope for reasonable\n-     approximation.\n-     When num is forced nonzero, also update den, so we do not scale profile\n-     to 0.   */\n-  if (!(num == den)\n-      && !(den.force_nonzero () == den))\n-    {\n-      den = den.force_nonzero ();\n-      num = num.force_nonzero ();\n-    }\n+  profile_count::adjust_for_ipa_scaling (&num, &den);\n \n   /* We do not want to ignore high loop nest after freq drops to 0.  */\n   if (!freq_scale)"}, {"sha": "9c57323db6e3c09db3985cc264fabdcb1907bbc7", "filename": "gcc/profile-count.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4373d41d67060e14bab0c984fb9f7cbc4c93f1b/gcc%2Fprofile-count.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4373d41d67060e14bab0c984fb9f7cbc4c93f1b/gcc%2Fprofile-count.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile-count.c?ref=e4373d41d67060e14bab0c984fb9f7cbc4c93f1b", "patch": "@@ -255,3 +255,29 @@ profile_count::to_cgraph_frequency (profile_count entry_bb_count) const\n     return CGRAPH_FREQ_MAX;\n   return MIN (scale, CGRAPH_FREQ_MAX);\n }\n+\n+/* We want to scale profile across function boundary from NUM to DEN.\n+   Take care of the side case when DEN is zeros.  We still want to behave\n+   sanely here which means\n+     - scale to profile_count::zero () if NUM is profile_count::zero\n+     - do not affect anything if NUM == DEN\n+     - preserve counter value but adjust quality in other cases.  */\n+\n+void\n+profile_count::adjust_for_ipa_scaling (profile_count *num,\n+\t\t\t\t       profile_count *den)\n+{\n+  /* Scaling is no-op if NUM and DEN are the same.  */\n+  if (*num == *den)\n+    return;\n+  /* Scaling to zero is always zeor.  */\n+  if (*num == profile_count::zero ())\n+    return;\n+  /* If den is non-zero we are safe.  */\n+  if (den->force_nonzero () == *den)\n+    return;\n+  /* Force both to non-zero so we do not push profiles to 0 when\n+     both num == 0 and den == 0.  */\n+  *den = den->force_nonzero ();\n+  *num = num->force_nonzero ();\n+}"}, {"sha": "aa42b4e2397ad8ef07ca963daead459112ec7b72", "filename": "gcc/profile-count.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4373d41d67060e14bab0c984fb9f7cbc4c93f1b/gcc%2Fprofile-count.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4373d41d67060e14bab0c984fb9f7cbc4c93f1b/gcc%2Fprofile-count.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile-count.h?ref=e4373d41d67060e14bab0c984fb9f7cbc4c93f1b", "patch": "@@ -1044,6 +1044,11 @@ class GTY(()) profile_count\n   /* Return true if THIS is known to differ significantly from OTHER.  */\n   bool differs_from_p (profile_count other) const;\n \n+  /* We want to scale profile across function boundary from NUM to DEN.\n+     Take care of the side case when NUM and DEN are zeros of incompatible\n+     kinds.  */\n+  static void adjust_for_ipa_scaling (profile_count *num, profile_count *den);\n+\n   /* LTO streaming support.  */\n   static profile_count stream_in (struct lto_input_block *);\n   void stream_out (struct output_block *);"}, {"sha": "7741f7fd7b35b41952ebc98a9d31df949f744486", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4373d41d67060e14bab0c984fb9f7cbc4c93f1b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4373d41d67060e14bab0c984fb9f7cbc4c93f1b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e4373d41d67060e14bab0c984fb9f7cbc4c93f1b", "patch": "@@ -1,3 +1,7 @@\n+2017-11-09  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gcc.c-torture/compile/pr82879.c: New testcase.\n+\n 2017-11-09  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/82902"}, {"sha": "fad3fed8de975d8ea35c53b89b347cf52f834e9b", "filename": "gcc/testsuite/gcc.c-torture/compile/pr82879.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4373d41d67060e14bab0c984fb9f7cbc4c93f1b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr82879.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4373d41d67060e14bab0c984fb9f7cbc4c93f1b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr82879.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr82879.c?ref=e4373d41d67060e14bab0c984fb9f7cbc4c93f1b", "patch": "@@ -0,0 +1,11 @@\n+int a, b;\n+static __attribute__((cold)) void fn1() {\n+  for (;;)\n+    for (; a;)\n+      ;\n+}\n+void fn2() {\n+  if (b)\n+    fn1();\n+}\n+"}, {"sha": "fc5d2c703abc00110f259654c6af83172449aace", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4373d41d67060e14bab0c984fb9f7cbc4c93f1b/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4373d41d67060e14bab0c984fb9f7cbc4c93f1b/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=e4373d41d67060e14bab0c984fb9f7cbc4c93f1b", "patch": "@@ -1771,17 +1771,7 @@ copy_bb (copy_body_data *id, basic_block bb,\n   tree decl;\n   basic_block prev;\n \n-  /* We always must scale to be sure counters end up compatible.\n-     If den is zero, just force it nonzero and hope for reasonable\n-     approximation.\n-     When num is forced nonzero, also update den, so we do not scale profile\n-     to 0.   */\n-  if (!(num == den)\n-      && !(den.force_nonzero () == den))\n-    {\n-      den = den.force_nonzero ();\n-      num = num.force_nonzero ();\n-    }\n+  profile_count::adjust_for_ipa_scaling (&num, &den);\n \n   /* Search for previous copied basic block.  */\n   prev = bb->prev_bb;\n@@ -2698,17 +2688,7 @@ copy_cfg_body (copy_body_data * id, profile_count,\n   profile_count den = ENTRY_BLOCK_PTR_FOR_FN (src_cfun)->count;\n   profile_count num = entry_block_map->count;\n \n-  /* We always must scale to be sure counters end up compatible.\n-     If den is zero, just force it nonzero and hope for reasonable\n-     approximation.\n-     When num is forced nonzero, also update den, so we do not scale profile\n-     to 0.   */\n-  if (!(num == den)\n-      && !(den.force_nonzero () == den))\n-    {\n-      den = den.force_nonzero ();\n-      num = num.force_nonzero ();\n-    }\n+  profile_count::adjust_for_ipa_scaling (&num, &den);\n \n   cfun_to_copy = id->src_cfun = DECL_STRUCT_FUNCTION (callee_fndecl);\n "}]}