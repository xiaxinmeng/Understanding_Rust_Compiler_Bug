{"sha": "cbf5629ef1510dac7c80f9b3edfb590293f5933e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JmNTYyOWVmMTUxMGRhYzdjODBmOWIzZWRmYjU5MDI5M2Y1OTMzZQ==", "commit": {"author": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2015-08-26T13:09:35Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2015-08-26T13:09:35Z"}, "message": "[AArch64][TLSLE][3/3] Implement local executable mode for all memory model\n\n2015-08-26  Marcus Shawcroft  <marcus.shawcroft@arm.com>\n\t    Jiong Wang  <jiong.wang@arm.com>\ngcc/\n\t* config/aarch64/aarch64.c (initialize_aarch64_tls_size): Set default\n\ttls size for tiny, small, large memory model.\n\t(aarch64_load_symref_appropriately): Support new symbol types.\n\t(aarch64_expand_mov_immediate): Likewise.\n\t(aarch64_print_operand): Likewise.\n\t(aarch64_classify_tls_symbol): Likewise.\n\t* config/aarch64/aarch64-protos.h (aarch64_symbol_context): Likewise.\n\t(aarch64_symbol_type): Likewise.\n\t* config/aarch64/aarch64.md (tlsle): Deleted.\n\t(tlsle12_<mode>): New define_insn.\n\t(tlsle24_<mode>): Likewise.\n\t(tlsle32_<mode>): Likewise.\n\t(tlsle48_<mode>): Likewise.\n\t* doc/sourcebuild.texi (AArch64-specific attributes): Document\n\t\"aarch64_tlsle32\".\n\ngcc/testsuite/\n\t* lib/target-supports.exp (check_effective_target_aarch64_tlsle32):\n\tNew test directive.\n\t* gcc.target/aarch64/tlsle_1.x: New test source.\n\t* gcc.target/aarch64/tlsle12_1.c: New testcase.\n\t* gcc.target/aarch64/tlsle24_1.c: Likewise.\n\t* gcc.target/aarch64/tlsle32_1.c: Likewise.\n\nFrom-SVN: r227215", "tree": {"sha": "7095ff4d59f79ed0946cc3c126c435dd8ddfbb10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7095ff4d59f79ed0946cc3c126c435dd8ddfbb10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cbf5629ef1510dac7c80f9b3edfb590293f5933e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbf5629ef1510dac7c80f9b3edfb590293f5933e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbf5629ef1510dac7c80f9b3edfb590293f5933e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbf5629ef1510dac7c80f9b3edfb590293f5933e/comments", "author": null, "committer": null, "parents": [{"sha": "427388a4847371c9d1308658cfedbf2d4ae159c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/427388a4847371c9d1308658cfedbf2d4ae159c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/427388a4847371c9d1308658cfedbf2d4ae159c1"}], "stats": {"total": 201, "additions": 179, "deletions": 22}, "files": [{"sha": "57458876ce106c24936086581be5ab7a5b0f4604", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbf5629ef1510dac7c80f9b3edfb590293f5933e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbf5629ef1510dac7c80f9b3edfb590293f5933e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cbf5629ef1510dac7c80f9b3edfb590293f5933e", "patch": "@@ -1,3 +1,22 @@\n+2015-08-26  Marcus Shawcroft  <marcus.shawcroft@arm.com>\n+\t    Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64.c (initialize_aarch64_tls_size): Set default\n+\ttls size for tiny, small, large memory model.\n+\t(aarch64_load_symref_appropriately): Support new symbol types.\n+\t(aarch64_expand_mov_immediate): Likewise.\n+\t(aarch64_print_operand): Likewise.\n+\t(aarch64_classify_tls_symbol): Likewise.\n+\t* config/aarch64/aarch64-protos.h (aarch64_symbol_context): Likewise.\n+\t(aarch64_symbol_type): Likewise.\n+\t* config/aarch64/aarch64.md (tlsle): Deleted.\n+\t(tlsle12_<mode>): New define_insn.\n+\t(tlsle24_<mode>): Likewise.\n+\t(tlsle32_<mode>): Likewise.\n+\t(tlsle48_<mode>): Likewise.\n+\t* doc/sourcebuild.texi (AArch64-specific attributes): Document\n+\t\"aarch64_tlsle32\".\n+\n 2015-08-26  Matthew Wahab  <matthew.wahab@arm.com>\n \n \t* config/arm/arm-protos.h (FL_NONE): New."}, {"sha": "59c364dc72ea651a8dd891817a676c4f183abd97", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbf5629ef1510dac7c80f9b3edfb590293f5933e/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbf5629ef1510dac7c80f9b3edfb590293f5933e/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=cbf5629ef1510dac7c80f9b3edfb590293f5933e", "patch": "@@ -74,7 +74,10 @@ enum aarch64_symbol_context\n    SYMBOL_SMALL_TLSGD\n    SYMBOL_SMALL_TLSDESC\n    SYMBOL_SMALL_GOTTPREL\n+   SYMBOL_TLSLE12\n    SYMBOL_TLSLE24\n+   SYMBOL_TLSLE32\n+   SYMBOL_TLSLE48\n    Each of these represents a thread-local symbol, and corresponds to the\n    thread local storage relocation operator for the symbol being referred to.\n \n@@ -111,7 +114,10 @@ enum aarch64_symbol_type\n   SYMBOL_SMALL_GOTTPREL,\n   SYMBOL_TINY_ABSOLUTE,\n   SYMBOL_TINY_GOT,\n+  SYMBOL_TLSLE12,\n   SYMBOL_TLSLE24,\n+  SYMBOL_TLSLE32,\n+  SYMBOL_TLSLE48,\n   SYMBOL_FORCE_TO_MEM\n };\n "}, {"sha": "626589859e7358536e1e0783950514d976011140", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 49, "deletions": 4, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbf5629ef1510dac7c80f9b3edfb590293f5933e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbf5629ef1510dac7c80f9b3edfb590293f5933e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=cbf5629ef1510dac7c80f9b3edfb590293f5933e", "patch": "@@ -1114,14 +1114,43 @@ aarch64_load_symref_appropriately (rtx dest, rtx imm,\n \treturn;\n       }\n \n+    case SYMBOL_TLSLE12:\n     case SYMBOL_TLSLE24:\n+    case SYMBOL_TLSLE32:\n+    case SYMBOL_TLSLE48:\n       {\n+\tmachine_mode mode = GET_MODE (dest);\n \trtx tp = aarch64_load_tp (NULL);\n \n-\tif (GET_MODE (dest) != Pmode)\n-\t  tp = gen_lowpart (GET_MODE (dest), tp);\n+\tif (mode != Pmode)\n+\t  tp = gen_lowpart (mode, tp);\n+\n+\tswitch (type)\n+\t  {\n+\t  case SYMBOL_TLSLE12:\n+\t    emit_insn ((mode == DImode ? gen_tlsle12_di : gen_tlsle12_si)\n+\t\t\t(dest, tp, imm));\n+\t    break;\n+\t  case SYMBOL_TLSLE24:\n+\t    emit_insn ((mode == DImode ? gen_tlsle24_di : gen_tlsle24_si)\n+\t\t\t(dest, tp, imm));\n+\t  break;\n+\t  case SYMBOL_TLSLE32:\n+\t    emit_insn ((mode == DImode ? gen_tlsle32_di : gen_tlsle32_si)\n+\t\t\t(dest, imm));\n+\t    emit_insn ((mode == DImode ? gen_adddi3 : gen_addsi3)\n+\t\t\t(dest, dest, tp));\n+\t  break;\n+\t  case SYMBOL_TLSLE48:\n+\t    emit_insn ((mode == DImode ? gen_tlsle48_di : gen_tlsle48_si)\n+\t\t\t(dest, imm));\n+\t    emit_insn ((mode == DImode ? gen_adddi3 : gen_addsi3)\n+\t\t\t(dest, dest, tp));\n+\t    break;\n+\t  default:\n+\t    gcc_unreachable ();\n+\t  }\n \n-\temit_insn (gen_tlsle (dest, tp, imm));\n \tset_unique_reg_note (get_last_insn (), REG_EQUIV, imm);\n \treturn;\n       }\n@@ -1676,7 +1705,10 @@ aarch64_expand_mov_immediate (rtx dest, rtx imm)\n \n \tcase SYMBOL_SMALL_ABSOLUTE:\n \tcase SYMBOL_TINY_ABSOLUTE:\n+\tcase SYMBOL_TLSLE12:\n \tcase SYMBOL_TLSLE24:\n+\tcase SYMBOL_TLSLE32:\n+\tcase SYMBOL_TLSLE48:\n \t  aarch64_load_symref_appropriately (dest, imm, sty);\n \t  return;\n \n@@ -4579,6 +4611,10 @@ aarch64_print_operand (FILE *f, rtx x, char code)\n \t  asm_fprintf (asm_out_file, \":gottprel_lo12:\");\n \t  break;\n \n+\tcase SYMBOL_TLSLE12:\n+\t  asm_fprintf (asm_out_file, \":tprel_lo12:\");\n+\t  break;\n+\n \tcase SYMBOL_TLSLE24:\n \t  asm_fprintf (asm_out_file, \":tprel_lo12_nc:\");\n \t  break;\n@@ -8695,7 +8731,16 @@ aarch64_classify_tls_symbol (rtx x)\n       return SYMBOL_SMALL_GOTTPREL;\n \n     case TLS_MODEL_LOCAL_EXEC:\n-      return SYMBOL_TLSLE24;\n+      if (aarch64_tls_size == 12)\n+\treturn SYMBOL_TLSLE12;\n+      else if (aarch64_tls_size == 24)\n+\treturn SYMBOL_TLSLE24;\n+      else if (aarch64_tls_size == 32)\n+\treturn SYMBOL_TLSLE32;\n+      else if (aarch64_tls_size == 48)\n+\treturn SYMBOL_TLSLE48;\n+      else\n+\tgcc_unreachable ();\n \n     case TLS_MODEL_EMULATED:\n     case TLS_MODEL_NONE:"}, {"sha": "deac21150b575199a850b30db3ba5c4870bbc0fc", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 38, "deletions": 18, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbf5629ef1510dac7c80f9b3edfb590293f5933e/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbf5629ef1510dac7c80f9b3edfb590293f5933e/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=cbf5629ef1510dac7c80f9b3edfb590293f5933e", "patch": "@@ -117,7 +117,10 @@\n     UNSPEC_ST4_LANE\n     UNSPEC_TLS\n     UNSPEC_TLSDESC\n-    UNSPEC_TLSLE\n+    UNSPEC_TLSLE12\n+    UNSPEC_TLSLE24\n+    UNSPEC_TLSLE32\n+    UNSPEC_TLSLE48\n     UNSPEC_USHL_2S\n     UNSPEC_VSTRUCTDUMMY\n     UNSPEC_SP_SET\n@@ -4512,31 +4515,48 @@\n    (set_attr \"length\" \"8\")]\n )\n \n-(define_expand \"tlsle\"\n-  [(set (match_operand 0 \"register_operand\" \"=r\")\n-        (unspec [(match_operand 1 \"register_operand\" \"r\")\n-                   (match_operand 2 \"aarch64_tls_le_symref\" \"S\")]\n-                   UNSPEC_TLSLE))]\n+(define_insn \"tlsle12_<mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+\t(unspec:P [(match_operand:P 1 \"register_operand\" \"r\")\n+\t\t   (match_operand 2 \"aarch64_tls_le_symref\" \"S\")]\n+\t\t   UNSPEC_TLSLE12))]\n   \"\"\n-{\n-  machine_mode mode = GET_MODE (operands[0]);\n-  emit_insn ((mode == DImode\n-\t      ? gen_tlsle_di\n-\t      : gen_tlsle_si) (operands[0], operands[1], operands[2]));\n-  DONE;\n-})\n+  \"add\\\\t%<w>0, %<w>1, #%L2\";\n+  [(set_attr \"type\" \"alu_sreg\")\n+   (set_attr \"length\" \"4\")]\n+)\n \n-(define_insn \"tlsle_<mode>\"\n+(define_insn \"tlsle24_<mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n-        (unspec:P [(match_operand:P 1 \"register_operand\" \"r\")\n-                   (match_operand 2 \"aarch64_tls_le_symref\" \"S\")]\n-\t\t   UNSPEC_TLSLE))]\n+\t(unspec:P [(match_operand:P 1 \"register_operand\" \"r\")\n+\t\t   (match_operand 2 \"aarch64_tls_le_symref\" \"S\")]\n+\t\t   UNSPEC_TLSLE24))]\n   \"\"\n   \"add\\\\t%<w>0, %<w>1, #%G2, lsl #12\\;add\\\\t%<w>0, %<w>0, #%L2\"\n-  [(set_attr \"type\" \"alu_sreg\")\n+  [(set_attr \"type\" \"multiple\")\n    (set_attr \"length\" \"8\")]\n )\n \n+(define_insn \"tlsle32_<mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+\t(unspec:P [(match_operand 1 \"aarch64_tls_le_symref\" \"S\")]\n+\t\t   UNSPEC_TLSLE32))]\n+  \"\"\n+  \"movz\\\\t%<w>0, #:tprel_g1:%1\\;movk\\\\t%<w>0, #:tprel_g0_nc:%1\"\n+  [(set_attr \"type\" \"multiple\")\n+   (set_attr \"length\" \"8\")]\n+)\n+\n+(define_insn \"tlsle48_<mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+\t(unspec:P [(match_operand 1 \"aarch64_tls_le_symref\" \"S\")]\n+\t\t   UNSPEC_TLSLE48))]\n+  \"\"\n+  \"movz\\\\t%<w>0, #:tprel_g2:%1\\;movk\\\\t%<w>0, #:tprel_g1_nc:%1\\;movk\\\\t%<w>0, #:tprel_g0_nc:%1\"\n+  [(set_attr \"type\" \"multiple\")\n+   (set_attr \"length\" \"12\")]\n+)\n+\n (define_insn \"tlsdesc_small_<mode>\"\n   [(set (reg:PTR R0_REGNUM)\n         (unspec:PTR [(match_operand 0 \"aarch64_valid_symref\" \"S\")]"}, {"sha": "7e3828fb05d5ebf9de54b73654317c68b2544ae8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbf5629ef1510dac7c80f9b3edfb590293f5933e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbf5629ef1510dac7c80f9b3edfb590293f5933e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cbf5629ef1510dac7c80f9b3edfb590293f5933e", "patch": "@@ -1,3 +1,12 @@\n+2015-08-26  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_aarch64_tlsle32):\n+\tNew test directive.\n+\t* gcc.target/aarch64/tlsle_1.x: New test source.\n+\t* gcc.target/aarch64/tlsle12_1.c: New testcase.\n+\t* gcc.target/aarch64/tlsle24_1.c: Likewise.\n+\t* gcc.target/aarch64/tlsle32_1.c: Likewise.\n+\n 2015-08-26  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/29600"}, {"sha": "846aa9897d9538716209c1f37d852975a1fad768", "filename": "gcc/testsuite/gcc.target/aarch64/tlsle12_1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbf5629ef1510dac7c80f9b3edfb590293f5933e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftlsle12_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbf5629ef1510dac7c80f9b3edfb590293f5933e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftlsle12_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftlsle12_1.c?ref=cbf5629ef1510dac7c80f9b3edfb590293f5933e", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target tls_native } */\n+/* { dg-options \"-O2 -fpic -ftls-model=local-exec -mtls-size=12 --save-temps\" } */\n+\n+#include \"tlsle_1.x\"\n+\n+/* { dg-final { scan-assembler-times \"#:tprel_lo12\" 2 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "e8b14aea36ee204659706b8e267a4ab43729c236", "filename": "gcc/testsuite/gcc.target/aarch64/tlsle24_1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbf5629ef1510dac7c80f9b3edfb590293f5933e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftlsle24_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbf5629ef1510dac7c80f9b3edfb590293f5933e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftlsle24_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftlsle24_1.c?ref=cbf5629ef1510dac7c80f9b3edfb590293f5933e", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target tls_native } */\n+/* { dg-options \"-O2 -fpic -ftls-model=local-exec -mtls-size=24 --save-temps\" } */\n+\n+#include \"tlsle_1.x\"\n+\n+/* { dg-final { scan-assembler-times \"#:tprel_lo12_nc\" 2 } } */\n+/* { dg-final { scan-assembler-times \"#:tprel_hi12\" 2 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "edc06ba0281c960abfc2aec218c64a846e4576b2", "filename": "gcc/testsuite/gcc.target/aarch64/tlsle32_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbf5629ef1510dac7c80f9b3edfb590293f5933e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftlsle32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbf5629ef1510dac7c80f9b3edfb590293f5933e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftlsle32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftlsle32_1.c?ref=cbf5629ef1510dac7c80f9b3edfb590293f5933e", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target tls_native } */\n+/* { dg-require-effective-target aarch64_tlsle32 } */\n+/* { dg-options \"-O2 -fpic -ftls-model=local-exec -mtls-size=32 --save-temps\" } */\n+\n+#include \"tlsle_1.x\"\n+\n+/* { dg-final { scan-assembler-times \"#:tprel_g1\" 2 } } */\n+/* { dg-final { scan-assembler-times \"#:tprel_g0_nc\" 2 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "d92281b6de228c3d0d99db2527652d8f46de0b66", "filename": "gcc/testsuite/gcc.target/aarch64/tlsle_1.x", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbf5629ef1510dac7c80f9b3edfb590293f5933e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftlsle_1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbf5629ef1510dac7c80f9b3edfb590293f5933e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftlsle_1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftlsle_1.x?ref=cbf5629ef1510dac7c80f9b3edfb590293f5933e", "patch": "@@ -0,0 +1,14 @@\n+void abort (void);\n+\n+__thread int t0 = 0x10;\n+__thread int t1 = 0x10;\n+\n+int\n+main (int argc, char **argv)\n+{\n+  if (t0 != t1)\n+    abort ();\n+\n+  return  0;\n+}\n+"}, {"sha": "728d02026b55a784d54de6981f21db79a75ef189", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbf5629ef1510dac7c80f9b3edfb590293f5933e/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbf5629ef1510dac7c80f9b3edfb590293f5933e/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=cbf5629ef1510dac7c80f9b3edfb590293f5933e", "patch": "@@ -977,6 +977,23 @@ proc check_effective_target_aarch64_small_fpic { } {\n     }\n }\n \n+# On AArch64, instruction sequence for TLS LE under -mtls-size=32 will utilize\n+# the relocation modifier \"tprel_g0_nc\" together with MOVK, it's only supported\n+# in binutils since 2015-03-04 as PR gas/17843.\n+#\n+# This test directive make sure binutils support all features needed by TLS LE\n+# under -mtls-size=32 on AArch64.\n+\n+proc check_effective_target_aarch64_tlsle32 { } {\n+    if { [istarget aarch64*-*-*] } {\n+\treturn [check_no_compiler_messages aarch64_tlsle32 object {\n+\t    void foo (void) { asm (\"movk x1,#:tprel_g0_nc:t1\"); }\n+\t}]\n+    } else {\n+\treturn 0\n+    }\n+}\n+\n # Return 1 if -shared is supported, as in no warnings or errors\n # emitted, 0 otherwise.\n "}]}