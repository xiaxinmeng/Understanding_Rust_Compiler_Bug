{"sha": "5a4b005fef1940cf50746c9a3c30caf8e40dbef5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE0YjAwNWZlZjE5NDBjZjUwNzQ2YzlhM2MzMGNhZjhlNDBkYmVmNQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-09-09T14:35:51Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-09-09T14:35:51Z"}, "message": "re PR middle-end/41317 (folding causes strict aliasing violation)\n\n2009-09-09  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/41317\n\t* tree-ssa-ccp.c (maybe_fold_offset_to_component_ref): Remove\n\tcode dealing with plain pointer bases.\n\t(maybe_fold_offset_to_reference): Likewise.\n\t(maybe_fold_stmt_addition): Adjust.\n\n\t* gcc.c-torture/execute/pr41317.c: New testcase.\n\t* gcc.dg/tree-ssa/forwprop-11.c: XFAIL.\n\t* gcc.dg/tree-ssa/forwprop-12.c: Likewise.\n\nFrom-SVN: r151559", "tree": {"sha": "71d463d74a0a58f296740318049e7e99e52d9d90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71d463d74a0a58f296740318049e7e99e52d9d90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a4b005fef1940cf50746c9a3c30caf8e40dbef5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a4b005fef1940cf50746c9a3c30caf8e40dbef5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a4b005fef1940cf50746c9a3c30caf8e40dbef5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a4b005fef1940cf50746c9a3c30caf8e40dbef5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ccffb7554eb3c2ab5760c2d817c2ff4e8aae09bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccffb7554eb3c2ab5760c2d817c2ff4e8aae09bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccffb7554eb3c2ab5760c2d817c2ff4e8aae09bc"}], "stats": {"total": 151, "additions": 82, "deletions": 69}, "files": [{"sha": "f423067fbfa9094dba12c2506dc8623c6d92cc03", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a4b005fef1940cf50746c9a3c30caf8e40dbef5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a4b005fef1940cf50746c9a3c30caf8e40dbef5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a4b005fef1940cf50746c9a3c30caf8e40dbef5", "patch": "@@ -1,3 +1,11 @@\n+2009-09-09  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/41317\n+\t* tree-ssa-ccp.c (maybe_fold_offset_to_component_ref): Remove\n+\tcode dealing with plain pointer bases.\n+\t(maybe_fold_offset_to_reference): Likewise.\n+\t(maybe_fold_stmt_addition): Adjust.\n+\n 2009-09-09  Richard Guenther  <rguenther@suse.de>\n \n \t* tree.c (free_lang_data_in_type): Do not free the type variant"}, {"sha": "7b1704321f1c3a1d3bc7e1caf090821599406ba0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a4b005fef1940cf50746c9a3c30caf8e40dbef5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a4b005fef1940cf50746c9a3c30caf8e40dbef5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5a4b005fef1940cf50746c9a3c30caf8e40dbef5", "patch": "@@ -1,3 +1,10 @@\n+2009-09-09  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/41317\n+\t* gcc.c-torture/execute/pr41317.c: New testcase.\n+\t* gcc.dg/tree-ssa/forwprop-11.c: XFAIL.\n+\t* gcc.dg/tree-ssa/forwprop-12.c: Likewise.\n+\n 2009-09-08  Dodji Seketeli  <dodji@redhat.com>\n \n \tFix some test breakages on Darwin"}, {"sha": "742068b9ad406669fe02f5a0463625d074bf84b7", "filename": "gcc/testsuite/gcc.c-torture/execute/pr41317.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a4b005fef1940cf50746c9a3c30caf8e40dbef5/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr41317.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a4b005fef1940cf50746c9a3c30caf8e40dbef5/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr41317.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr41317.c?ref=5a4b005fef1940cf50746c9a3c30caf8e40dbef5", "patch": "@@ -0,0 +1,28 @@\n+extern void abort (void);\n+\n+struct A\n+{\n+  int i;\n+};\n+struct B\n+{\n+  struct A a;\n+  int j;\n+};\n+\n+static void\n+foo (struct B *p)\n+{\n+  ((struct A *)p)->i = 1;\n+}\n+\n+int main()\n+{\n+  struct A a;\n+  a.i = 0;\n+  foo ((struct B *)&a);\n+  if (a.i != 1)\n+    abort ();\n+  return 0;\n+}\n+"}, {"sha": "73051ae9645378ba82a70aa1764651e25e7bed20", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a4b005fef1940cf50746c9a3c30caf8e40dbef5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a4b005fef1940cf50746c9a3c30caf8e40dbef5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-11.c?ref=5a4b005fef1940cf50746c9a3c30caf8e40dbef5", "patch": "@@ -15,5 +15,5 @@ int g(int *p, int n)\n   return q[-1];\n }\n \n-/* { dg-final { scan-tree-dump-times \"= \\\\\\(\\\\\\*a_..\\\\\\)\\\\\\[1\\\\\\];\" 2 \"forwprop1\" } } */\n+/* { dg-final { scan-tree-dump-times \"= \\\\\\(\\\\\\*a_..\\\\\\)\\\\\\[1\\\\\\];\" 2 \"forwprop1\" { xfail *-*-* } } } */\n /* { dg-final { cleanup-tree-dump \"forwprop1\" } } */"}, {"sha": "1c5ea02ba786bc2c061d299a94607f6934a94d3c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a4b005fef1940cf50746c9a3c30caf8e40dbef5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a4b005fef1940cf50746c9a3c30caf8e40dbef5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-12.c?ref=5a4b005fef1940cf50746c9a3c30caf8e40dbef5", "patch": "@@ -18,5 +18,5 @@ int bar(struct X *p, int i)\n /* We should have propagated the base array address through the\n    address arithmetic into the memory access as an array access.  */\n \n-/* { dg-final { scan-tree-dump-times \"->a\\\\\\[D\\\\\\.\" 2 \"forwprop1\" } } */\n+/* { dg-final { scan-tree-dump-times \"->a\\\\\\[D\\\\\\.\" 2 \"forwprop1\" { xfail *-*-* } } } */\n /* { dg-final { cleanup-tree-dump \"forwprop1\" } } */"}, {"sha": "61827a74ab42bd30ab06cdde5933de54cd41f68e", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 37, "deletions": 67, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a4b005fef1940cf50746c9a3c30caf8e40dbef5/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a4b005fef1940cf50746c9a3c30caf8e40dbef5/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=5a4b005fef1940cf50746c9a3c30caf8e40dbef5", "patch": "@@ -1818,8 +1818,7 @@ maybe_fold_offset_to_array_ref (location_t loc, tree base, tree offset,\n \n static tree\n maybe_fold_offset_to_component_ref (location_t loc, tree record_type,\n-\t\t\t\t    tree base, tree offset,\n-\t\t\t\t    tree orig_type, bool base_is_ptr)\n+\t\t\t\t    tree base, tree offset, tree orig_type)\n {\n   tree f, t, field_type, tail_array_field, field_offset;\n   tree ret;\n@@ -1871,8 +1870,6 @@ maybe_fold_offset_to_component_ref (location_t loc, tree record_type,\n       if (cmp == 0\n \t  && useless_type_conversion_p (orig_type, field_type))\n \t{\n-\t  if (base_is_ptr)\n-\t    base = build1 (INDIRECT_REF, record_type, base);\n \t  t = build3 (COMPONENT_REF, field_type, base, f, NULL_TREE);\n \t  return t;\n \t}\n@@ -1897,21 +1894,16 @@ maybe_fold_offset_to_component_ref (location_t loc, tree record_type,\n \n       /* If we matched, then set offset to the displacement into\n \t this field.  */\n-      if (base_is_ptr)\n-\tnew_base = build1 (INDIRECT_REF, record_type, base);\n-      else\n-\tnew_base = base;\n-      protected_set_expr_location (new_base, loc);\n-      new_base = build3 (COMPONENT_REF, field_type, new_base, f, NULL_TREE);\n-      protected_set_expr_location (new_base, loc);\n+      new_base = build3 (COMPONENT_REF, field_type, base, f, NULL_TREE);\n+      SET_EXPR_LOCATION (new_base, loc);\n \n       /* Recurse to possibly find the match.  */\n       ret = maybe_fold_offset_to_array_ref (loc, new_base, t, orig_type,\n \t\t\t\t\t    f == TYPE_FIELDS (record_type));\n       if (ret)\n \treturn ret;\n       ret = maybe_fold_offset_to_component_ref (loc, field_type, new_base, t,\n-\t\t\t\t\t\torig_type, false);\n+\t\t\t\t\t\torig_type);\n       if (ret)\n \treturn ret;\n     }\n@@ -1925,11 +1917,6 @@ maybe_fold_offset_to_component_ref (location_t loc, tree record_type,\n \n   /* If we get here, we've got an aggregate field, and a possibly \n      nonzero offset into them.  Recurse and hope for a valid match.  */\n-  if (base_is_ptr)\n-    {\n-      base = build1 (INDIRECT_REF, record_type, base);\n-      SET_EXPR_LOCATION (base, loc);\n-    }\n   base = build3 (COMPONENT_REF, field_type, base, f, NULL_TREE);\n   SET_EXPR_LOCATION (base, loc);\n \n@@ -1938,7 +1925,7 @@ maybe_fold_offset_to_component_ref (location_t loc, tree record_type,\n   if (t)\n     return t;\n   return maybe_fold_offset_to_component_ref (loc, field_type, base, offset,\n-\t\t\t\t\t     orig_type, false);\n+\t\t\t\t\t     orig_type);\n }\n \n /* Attempt to express (ORIG_TYPE)BASE+OFFSET as BASE->field_of_orig_type\n@@ -1955,61 +1942,44 @@ maybe_fold_offset_to_reference (location_t loc, tree base, tree offset,\n {\n   tree ret;\n   tree type;\n-  bool base_is_ptr = true;\n \n   STRIP_NOPS (base);\n-  if (TREE_CODE (base) == ADDR_EXPR)\n-    {\n-      base_is_ptr = false;\n-\n-      base = TREE_OPERAND (base, 0);\n+  if (TREE_CODE (base) != ADDR_EXPR)\n+    return NULL_TREE;\n \n-      /* Handle case where existing COMPONENT_REF pick e.g. wrong field of union,\n-\t so it needs to be removed and new COMPONENT_REF constructed.\n-\t The wrong COMPONENT_REF are often constructed by folding the\n-\t (type *)&object within the expression (type *)&object+offset  */\n-      if (handled_component_p (base))\n+  base = TREE_OPERAND (base, 0);\n+\n+  /* Handle case where existing COMPONENT_REF pick e.g. wrong field of union,\n+     so it needs to be removed and new COMPONENT_REF constructed.\n+     The wrong COMPONENT_REF are often constructed by folding the\n+     (type *)&object within the expression (type *)&object+offset  */\n+  if (handled_component_p (base))\n+    {\n+      HOST_WIDE_INT sub_offset, size, maxsize;\n+      tree newbase;\n+      newbase = get_ref_base_and_extent (base, &sub_offset,\n+\t\t\t\t\t &size, &maxsize);\n+      gcc_assert (newbase);\n+      if (size == maxsize\n+\t  && size != -1\n+\t  && !(sub_offset & (BITS_PER_UNIT - 1)))\n \t{\n-          HOST_WIDE_INT sub_offset, size, maxsize;\n-\t  tree newbase;\n-\t  newbase = get_ref_base_and_extent (base, &sub_offset,\n-\t\t\t\t\t     &size, &maxsize);\n-\t  gcc_assert (newbase);\n-\t  if (size == maxsize\n-\t      && size != -1\n-\t      && !(sub_offset & (BITS_PER_UNIT - 1)))\n-\t    {\n-\t      base = newbase;\n-\t      if (sub_offset)\n-\t\toffset = int_const_binop (PLUS_EXPR, offset,\n-\t\t\t\t\t  build_int_cst (TREE_TYPE (offset),\n-\t\t\t\t\t  sub_offset / BITS_PER_UNIT), 1);\n-\t    }\n+\t  base = newbase;\n+\t  if (sub_offset)\n+\t    offset = int_const_binop (PLUS_EXPR, offset,\n+\t\t\t\t      build_int_cst (TREE_TYPE (offset),\n+\t\t\t\t\t\t     sub_offset / BITS_PER_UNIT), 1);\n \t}\n-      if (useless_type_conversion_p (orig_type, TREE_TYPE (base))\n-\t  && integer_zerop (offset))\n-\treturn base;\n-      type = TREE_TYPE (base);\n     }\n-  else\n-    {\n-      base_is_ptr = true;\n-      if (!POINTER_TYPE_P (TREE_TYPE (base)))\n-\treturn NULL_TREE;\n-      type = TREE_TYPE (TREE_TYPE (base));\n-    }\n-  ret = maybe_fold_offset_to_component_ref (loc, type, base, offset,\n-\t\t\t\t\t    orig_type, base_is_ptr);\n+  if (useless_type_conversion_p (orig_type, TREE_TYPE (base))\n+      && integer_zerop (offset))\n+    return base;\n+  type = TREE_TYPE (base);\n+\n+  ret = maybe_fold_offset_to_component_ref (loc, type, base, offset, orig_type);\n   if (!ret)\n-    {\n-      if (base_is_ptr)\n-\t{\n-\t  base = build1 (INDIRECT_REF, type, base);\n-\t  SET_EXPR_LOCATION (base, loc);\n-\t}\n-      ret = maybe_fold_offset_to_array_ref (loc,\n-\t\t\t\t\t    base, offset, orig_type, true);\n-    }\n+    ret = maybe_fold_offset_to_array_ref (loc, base, offset, orig_type, true);\n+\n   return ret;\n }\n \n@@ -2286,7 +2256,7 @@ maybe_fold_stmt_addition (location_t loc, tree res_type, tree op0, tree op1)\n   t = maybe_fold_offset_to_array_ref (loc, op0, op1, ptd_type, true);\n   if (!t)\n     t = maybe_fold_offset_to_component_ref (loc, TREE_TYPE (op0), op0, op1,\n-\t\t\t\t\t    ptd_type, false);\n+\t\t\t\t\t    ptd_type);\n   if (t)\n     {\n       t = build1 (ADDR_EXPR, res_type, t);"}]}