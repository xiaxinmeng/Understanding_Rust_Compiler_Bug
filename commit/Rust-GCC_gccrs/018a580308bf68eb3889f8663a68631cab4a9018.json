{"sha": "018a580308bf68eb3889f8663a68631cab4a9018", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE4YTU4MDMwOGJmNjhlYjM4ODlmODY2M2E2ODYzMWNhYjRhOTAxOA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-08-15T12:15:56Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-08-15T12:15:56Z"}, "message": "cp-tree.def (NON_DEPENDENT_EXPR): Add operand.\n\n\t* cp-tree.def (NON_DEPENDENT_EXPR): Add operand.\n\t* decl2.c (build_offset_ref_call_from_tree): Use\n\tbuild_non_dependent_expr.\n\t* error.c (dump_expr) <NON_DEPENDENT_EXPR case>: Dump the operand.\n\t* pt.c (build_non_dependent_expr): Set operand.\n\nFrom-SVN: r70478", "tree": {"sha": "f08e3f3d65f8e968a130bf44f5ed1e8d64795de2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f08e3f3d65f8e968a130bf44f5ed1e8d64795de2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/018a580308bf68eb3889f8663a68631cab4a9018", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/018a580308bf68eb3889f8663a68631cab4a9018", "html_url": "https://github.com/Rust-GCC/gccrs/commit/018a580308bf68eb3889f8663a68631cab4a9018", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/018a580308bf68eb3889f8663a68631cab4a9018/comments", "author": null, "committer": null, "parents": [{"sha": "6cad4e1709ec73b0c7978e5fab9ed623b7ac043b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cad4e1709ec73b0c7978e5fab9ed623b7ac043b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cad4e1709ec73b0c7978e5fab9ed623b7ac043b"}], "stats": {"total": 46, "additions": 25, "deletions": 21}, "files": [{"sha": "e6c0bfb7566957ff8cecf097c5a4d9bc7ed1d503", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018a580308bf68eb3889f8663a68631cab4a9018/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018a580308bf68eb3889f8663a68631cab4a9018/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=018a580308bf68eb3889f8663a68631cab4a9018", "patch": "@@ -1,13 +1,21 @@\n+2003-08-15  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* cp-tree.def (NON_DEPENDENT_EXPR): Add operand.\n+\t* decl2.c (build_offset_ref_call_from_tree): Use\n+\tbuild_non_dependent_expr.\n+\t* error.c (dump_expr) <NON_DEPENDENT_EXPR case>: Dump the operand.\n+\t* pt.c (build_non_dependent_expr): Set operand.\n+\t\n 2003-08-14  Jan Hubicka  <jh@suse.cz>\n \n \t* decl2.c (mark_member_pointers): Rename to...\n \t(mark_member_pointers_and_eh_tinfos): ... this one; deal with eh tinfos\n \t(lower_function): Update call.\n \t* except.c (eh_type_info): Break out from ...\n \t(build_eh_type): ... here; tinfo is already used.\n-        (finish_eh_spec_block): Mark tinfos as used.\n-        * semantics.c (finish_handler_params): Mark tinfo as used.\n-\t* cp-tree.h(eh_type_info): Declare.\n+\t(finish_eh_spec_block): Mark tinfos as used.\n+\t* semantics.c (finish_handler_params): Mark tinfo as used.\n+\t* cp-tree.h (eh_type_info): Declare.\n \n 2003-08-15  Nathan Sidwell  <nathan@codesourcery.com>\n "}, {"sha": "36b7aaa85e83905ac6d36536e7966b89fc33551e", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018a580308bf68eb3889f8663a68631cab4a9018/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018a580308bf68eb3889f8663a68631cab4a9018/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=018a580308bf68eb3889f8663a68631cab4a9018", "patch": "@@ -240,8 +240,9 @@ DEFTREECODE (PSEUDO_DTOR_EXPR, \"pseudo_dtor_expr\", 'e', 3)\n    modify the original expression, which would change the mangling of\n    that expression if it appeared in a template argument list.  In\n    that situation, we create a NON_DEPENDENT_EXPR to take the place of\n-   the original expression.  */\n-DEFTREECODE (NON_DEPENDENT_EXPR, \"non_dependent_expr\", 'e', 0)\n+   the original expression.  The expression is the only operand -- it\n+   is only needed for diagnostics.   */\n+DEFTREECODE (NON_DEPENDENT_EXPR, \"non_dependent_expr\", 'e', 1)\n \n /* CTOR_INITIALIZER is a placeholder in template code for a call to\n    setup_vtbl_pointer (and appears in all functions, not just ctors).  */"}, {"sha": "ace4313f337bb4637d96a9a96ee4c47161532393", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018a580308bf68eb3889f8663a68631cab4a9018/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018a580308bf68eb3889f8663a68631cab4a9018/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=018a580308bf68eb3889f8663a68631cab4a9018", "patch": "@@ -2981,27 +2981,25 @@ finish_file ()\n   input_location = locus;\n }\n \n-/* FN is an OFFSET_REF indicating the function to call in parse-tree\n-   form; it has not yet been semantically analyzed.  ARGS are the\n-   arguments to the function.  They have already been semantically\n-   analzyed.  */\n+/* FN is an OFFSET_REF, DOTSTAR_EXPR or MEMBER_REF indicating the\n+   function to call in parse-tree form; it has not yet been\n+   semantically analyzed.  ARGS are the arguments to the function.\n+   They have already been semantically analyzed.  */\n \n tree\n build_offset_ref_call_from_tree (tree fn, tree args)\n {\n-  tree object_addr;\n   tree orig_fn;\n   tree orig_args;\n   tree expr;\n+  tree object;\n \n   orig_fn = fn;\n   orig_args = args;\n+  object = TREE_OPERAND (fn, 0);\n \n   if (processing_template_decl)\n     {\n-      tree object;\n-      tree object_type;\n-\n       my_friendly_assert (TREE_CODE (fn) == DOTSTAR_EXPR\n \t\t\t  || TREE_CODE (fn) == MEMBER_REF,\n \t\t\t  20030708);\n@@ -3013,10 +3011,9 @@ build_offset_ref_call_from_tree (tree fn, tree args)\n \t parameter.  That must be done before the FN is transformed\n \t because we depend on the form of FN.  */\n       args = build_non_dependent_args (args);\n-      object_type = TREE_TYPE (TREE_OPERAND (fn, 0));\n       if (TREE_CODE (fn) == DOTSTAR_EXPR)\n-\tobject_type = build_pointer_type (non_reference (object_type));\n-      object = build (NON_DEPENDENT_EXPR, object_type);\n+\tobject = build_unary_op (ADDR_EXPR, object, 0);\n+      object = build_non_dependent_expr (object);\n       args = tree_cons (NULL_TREE, object, args);\n       /* Now that the arguments are done, transform FN.  */\n       fn = build_non_dependent_expr (fn);\n@@ -3030,7 +3027,7 @@ build_offset_ref_call_from_tree (tree fn, tree args)\n \tvoid B::g() { (this->*p)(); }  */\n   if (TREE_CODE (fn) == OFFSET_REF)\n     {\n-      object_addr = build_unary_op (ADDR_EXPR, TREE_OPERAND (fn, 0), 0);\n+      tree object_addr = build_unary_op (ADDR_EXPR, object, 0);\n       fn = TREE_OPERAND (fn, 1);\n       fn = get_member_function_from_ptrfunc (&object_addr, fn);\n       args = tree_cons (NULL_TREE, object_addr, args);"}, {"sha": "9aeb555c615033fe0df690bc3277a8725b3270af", "filename": "gcc/cp/error.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018a580308bf68eb3889f8663a68631cab4a9018/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018a580308bf68eb3889f8663a68631cab4a9018/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=018a580308bf68eb3889f8663a68631cab4a9018", "patch": "@@ -1876,9 +1876,7 @@ dump_expr (tree t, int flags)\n       break;\n \n     case NON_DEPENDENT_EXPR:\n-      pp_string (cxx_pp, \"<expression of type \");\n-      dump_type (TREE_TYPE (t), flags);\n-      pp_greater (cxx_pp);\n+      dump_expr (TREE_OPERAND (t, 0), flags);\n       break;\n \n       /*  This list is incomplete, but should suffice for now."}, {"sha": "d97463bc3907100360371ac97720285a7b2b3621", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018a580308bf68eb3889f8663a68631cab4a9018/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018a580308bf68eb3889f8663a68631cab4a9018/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=018a580308bf68eb3889f8663a68631cab4a9018", "patch": "@@ -11793,7 +11793,7 @@ build_non_dependent_expr (tree expr)\n      the expression so that mangling (say) \"f<g>\" inside the body of\n      \"f\" works out correctly.  Therefore, the REFERENCE_TYPE is\n      stripped here.  */\n-  return build (NON_DEPENDENT_EXPR, non_reference (TREE_TYPE (expr)));\n+  return build1 (NON_DEPENDENT_EXPR, non_reference (TREE_TYPE (expr)), expr);\n }\n \n /* ARGS is a TREE_LIST of expressions as arguments to a function call."}]}