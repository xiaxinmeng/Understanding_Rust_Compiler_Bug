{"sha": "221bdb333b0917c927aec4d367a72e3667087d7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjIxYmRiMzMzYjA5MTdjOTI3YWVjNGQzNjdhNzJlMzY2NzA4N2Q3YQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-07-13T09:17:41Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-07-13T09:17:41Z"}, "message": "vect: Generalise neutral_op_for_slp_reduction\n\nThis patch generalises the interface to neutral_op_for_slp_reduction\nso that it can be used for non-SLP reductions too.  This isn't much\nof a win on its own, but it helps later patches.\n\ngcc/\n\t* tree-vect-loop.c (neutral_op_for_slp_reduction): Replace with...\n\t(neutral_op_for_reduction): ...this, providing a more general\n\tinterface.\n\t(vect_create_epilog_for_reduction): Update accordingly.\n\t(vectorizable_reduction): Likewise.\n\t(vect_transform_cycle_phi): Likewise.", "tree": {"sha": "6fd4012ee3b4ee842f56c10603f28154cee99f04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fd4012ee3b4ee842f56c10603f28154cee99f04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/221bdb333b0917c927aec4d367a72e3667087d7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/221bdb333b0917c927aec4d367a72e3667087d7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/221bdb333b0917c927aec4d367a72e3667087d7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/221bdb333b0917c927aec4d367a72e3667087d7a/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd5a69191f023b9bc2a1f83c5f7d5e591c333b9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd5a69191f023b9bc2a1f83c5f7d5e591c333b9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd5a69191f023b9bc2a1f83c5f7d5e591c333b9a"}], "stats": {"total": 59, "additions": 26, "deletions": 33}, "files": [{"sha": "744645d8bad9297000ea34050ca0df31fb67971c", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 26, "deletions": 33, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/221bdb333b0917c927aec4d367a72e3667087d7a/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/221bdb333b0917c927aec4d367a72e3667087d7a/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=221bdb333b0917c927aec4d367a72e3667087d7a", "patch": "@@ -3248,23 +3248,15 @@ reduction_fn_for_scalar_code (enum tree_code code, internal_fn *reduc_fn)\n     }\n }\n \n-/* If there is a neutral value X such that SLP reduction NODE would not\n-   be affected by the introduction of additional X elements, return that X,\n-   otherwise return null.  CODE is the code of the reduction and VECTOR_TYPE\n-   is the vector type that would hold element X.  REDUC_CHAIN is true if\n-   the SLP statements perform a single reduction, false if each statement\n-   performs an independent reduction.  */\n+/* If there is a neutral value X such that a reduction would not be affected\n+   by the introduction of additional X elements, return that X, otherwise\n+   return null.  CODE is the code of the reduction and SCALAR_TYPE is type\n+   of the scalar elements.  If the reduction has just a single initial value\n+   then INITIAL_VALUE is that value, otherwise it is null.  */\n \n static tree\n-neutral_op_for_slp_reduction (slp_tree slp_node, tree vector_type,\n-\t\t\t      tree_code code, bool reduc_chain)\n+neutral_op_for_reduction (tree scalar_type, tree_code code, tree initial_value)\n {\n-  vec<stmt_vec_info> stmts = SLP_TREE_SCALAR_STMTS (slp_node);\n-  stmt_vec_info stmt_vinfo = stmts[0];\n-  tree scalar_type = TREE_TYPE (vector_type);\n-  class loop *loop = gimple_bb (stmt_vinfo->stmt)->loop_father;\n-  gcc_assert (loop);\n-\n   switch (code)\n     {\n     case WIDEN_SUM_EXPR:\n@@ -3284,12 +3276,7 @@ neutral_op_for_slp_reduction (slp_tree slp_node, tree vector_type,\n \n     case MAX_EXPR:\n     case MIN_EXPR:\n-      /* For MIN/MAX the initial values are neutral.  A reduction chain\n-\t has only a single initial value, so that value is neutral for\n-\t all statements.  */\n-      if (reduc_chain)\n-\treturn vect_phi_initial_value (stmt_vinfo);\n-      return NULL_TREE;\n+      return initial_value;\n \n     default:\n       return NULL_TREE;\n@@ -5535,10 +5522,11 @@ vect_create_epilog_for_reduction (loop_vec_info loop_vinfo,\n       tree neutral_op = NULL_TREE;\n       if (slp_node)\n \t{\n-\t  stmt_vec_info first = REDUC_GROUP_FIRST_ELEMENT (stmt_info);\n-\t  neutral_op\n-\t    = neutral_op_for_slp_reduction (slp_node_instance->reduc_phis,\n-\t\t\t\t\t    vectype, code, first != NULL);\n+\t  tree initial_value = NULL_TREE;\n+\t  if (REDUC_GROUP_FIRST_ELEMENT (stmt_info))\n+\t    initial_value = vect_phi_initial_value (orig_phis[0]);\n+\t  neutral_op = neutral_op_for_reduction (TREE_TYPE (vectype), code,\n+\t\t\t\t\t\t initial_value);\n \t}\n       if (neutral_op)\n \tvector_identity = gimple_build_vector_from_val (&seq, vectype,\n@@ -6935,9 +6923,13 @@ vectorizable_reduction (loop_vec_info loop_vinfo,\n   /* For SLP reductions, see if there is a neutral value we can use.  */\n   tree neutral_op = NULL_TREE;\n   if (slp_node)\n-    neutral_op = neutral_op_for_slp_reduction\n-      (slp_node_instance->reduc_phis, vectype_out, orig_code,\n-       REDUC_GROUP_FIRST_ELEMENT (stmt_info) != NULL);\n+    {\n+      tree initial_value = NULL_TREE;\n+      if (REDUC_GROUP_FIRST_ELEMENT (stmt_info) != NULL)\n+\tinitial_value = vect_phi_initial_value (reduc_def_phi);\n+      neutral_op = neutral_op_for_reduction (TREE_TYPE (vectype_out),\n+\t\t\t\t\t     orig_code, initial_value);\n+    }\n \n   if (double_reduc && reduction_type == FOLD_LEFT_REDUCTION)\n     {\n@@ -7501,15 +7493,16 @@ vect_transform_cycle_phi (loop_vec_info loop_vinfo,\n       else\n \t{\n \t  gcc_assert (slp_node == slp_node_instance->reduc_phis);\n-\t  stmt_vec_info first = REDUC_GROUP_FIRST_ELEMENT (reduc_stmt_info);\n-\t  tree neutral_op\n-\t      = neutral_op_for_slp_reduction (slp_node, vectype_out,\n-\t\t\t\t\t      STMT_VINFO_REDUC_CODE (reduc_info),\n-\t\t\t\t\t      first != NULL);\n+\t  tree initial_value = NULL_TREE;\n+\t  if (REDUC_GROUP_FIRST_ELEMENT (reduc_stmt_info))\n+\t    initial_value = vect_phi_initial_value (phi);\n+\t  tree_code code = STMT_VINFO_REDUC_CODE (reduc_info);\n+\t  tree neutral_op = neutral_op_for_reduction (TREE_TYPE (vectype_out),\n+\t\t\t\t\t\t      code, initial_value);\n \t  get_initial_defs_for_reduction (loop_vinfo, reduc_info,\n \t\t\t\t\t  slp_node_instance->reduc_phis,\n \t\t\t\t\t  &vec_initial_defs, vec_num,\n-\t\t\t\t\t  first != NULL, neutral_op);\n+\t\t\t\t\t  initial_value != NULL, neutral_op);\n \t}\n     }\n   else"}]}