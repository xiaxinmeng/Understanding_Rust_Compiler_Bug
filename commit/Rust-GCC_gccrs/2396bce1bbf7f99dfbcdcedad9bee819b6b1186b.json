{"sha": "2396bce1bbf7f99dfbcdcedad9bee819b6b1186b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM5NmJjZTFiYmY3Zjk5ZGZiY2RjZWRhZDliZWU4MTliNmIxMTg2Yg==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2007-02-21T00:02:48Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2007-02-21T00:02:48Z"}, "message": "frv.c (frv_read_argument): Take a tree and int argument.\n\n2007-02-20  Eric Christopher  <echristo@gmail.com>\n\n        * config/frv/frv.c (frv_read_argument): Take a tree and int argument.\n        Rewrite accordingly.\n        (frv_read_iacc_argument): Ditto.\n        (frv_expand_set_builtin): Take a call instead of arglist, update for\n        above changes.\n        (frv_expand_unop_builtin): Ditto.\n        (frv_expand_binop_builtin): Ditto.\n        (frv_expand_cut_builtin): Ditto.\n        (frv_expand_binopimm_builtin): Ditto.\n        (frv_expand_voidbinop_builtin): Ditto.\n        (frv_expand_int_void2arg): Ditto.\n        (frv_expand_prefetches): Ditto.\n        (frv_expand_voidtriop_builtin): Ditto.\n        (frv_expand_voidaccop_builtin): Ditto.\n        (frv_expand_load_builtin): Ditto.\n        (frv_expand_store_builtin): Ditto.\n        (frv_expand_mdpackh_builtin): Ditto.\n        (frv_expand_mclracc_builtin): Ditto.\n        (frv_expand_mrdacc_builtin): Ditto.\n        (frv_expand_mwtacc_builtin): Ditto.\n        (frv_expand_builtin): Remove usage of CALL_EXPR_ARGS, update\n        calls for above.\n\nFrom-SVN: r122182", "tree": {"sha": "d9f19be4219afa4556f6aa94c03722598c532e0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9f19be4219afa4556f6aa94c03722598c532e0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2396bce1bbf7f99dfbcdcedad9bee819b6b1186b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2396bce1bbf7f99dfbcdcedad9bee819b6b1186b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2396bce1bbf7f99dfbcdcedad9bee819b6b1186b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2396bce1bbf7f99dfbcdcedad9bee819b6b1186b/comments", "author": null, "committer": null, "parents": [{"sha": "b639c3c245c82affaa8d0d1784259a312936c075", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b639c3c245c82affaa8d0d1784259a312936c075", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b639c3c245c82affaa8d0d1784259a312936c075"}], "stats": {"total": 206, "additions": 114, "deletions": 92}, "files": [{"sha": "a9513ed274c51aa5192b83c05bc0fad13f5f18ee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2396bce1bbf7f99dfbcdcedad9bee819b6b1186b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2396bce1bbf7f99dfbcdcedad9bee819b6b1186b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2396bce1bbf7f99dfbcdcedad9bee819b6b1186b", "patch": "@@ -1,3 +1,28 @@\n+2007-02-20  Eric Christopher  <echristo@gmail.com>\n+\n+\t* config/frv/frv.c (frv_read_argument): Take a tree and int argument.\n+\tRewrite accordingly.\n+\t(frv_read_iacc_argument): Ditto.\n+\t(frv_expand_set_builtin): Take a call instead of arglist, update for\n+\tabove changes.\n+\t(frv_expand_unop_builtin): Ditto.\n+\t(frv_expand_binop_builtin): Ditto.\n+\t(frv_expand_cut_builtin): Ditto.\n+\t(frv_expand_binopimm_builtin): Ditto.\n+\t(frv_expand_voidbinop_builtin): Ditto.\n+\t(frv_expand_int_void2arg): Ditto.\n+\t(frv_expand_prefetches): Ditto.\n+\t(frv_expand_voidtriop_builtin): Ditto.\n+\t(frv_expand_voidaccop_builtin): Ditto.\n+\t(frv_expand_load_builtin): Ditto.\n+\t(frv_expand_store_builtin): Ditto.\n+\t(frv_expand_mdpackh_builtin): Ditto.\n+\t(frv_expand_mclracc_builtin): Ditto.\n+\t(frv_expand_mrdacc_builtin): Ditto.\n+\t(frv_expand_mwtacc_builtin): Ditto.\n+\t(frv_expand_builtin): Remove usage of CALL_EXPR_ARGS, update\n+\tcalls for above.\n+\n 2007-02-20  Janis Johnson  <janis187@us.ibm.com>\n \n \t* doc/invoke.texi (RS/6000 and PowerPC Options): Add -mcmpb and -mdfp.\n@@ -118,9 +143,9 @@\n 2007-02-19  Lee Millward  <lee.millward@codesourcery.com>\n \n \t* config/ia64/ia64.c (ia64_expand_builtin): Use the\n-\tnew CALL_EXPR_FN macro for retrieving the function \n+\tnew CALL_EXPR_FN macro for retrieving the function\n \tdeclaration of the input expression.\n-\t\n+\n 2007-02-19  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \t* c.opt (Waddress): New.\n@@ -138,7 +163,7 @@\n \t-Wstring-literal-comparison and -Walways-true with -Waddress.\n \t* c-common.c (c_common_truthvalue_conversion): Replace -Walways-true\n \twith -Waddress.\n-\t\n+\n 2007-02-19  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree-cfg.c (dump_function_to_file): Be prepared for functions"}, {"sha": "c2b661d8ddfb0397afa15d47d2bb5caa783e617a", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 86, "deletions": 89, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2396bce1bbf7f99dfbcdcedad9bee819b6b1186b/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2396bce1bbf7f99dfbcdcedad9bee819b6b1186b/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=2396bce1bbf7f99dfbcdcedad9bee819b6b1186b", "patch": "@@ -297,8 +297,8 @@ static void frv_frame_access_standard_regs\t(enum frv_stack_op,\n static struct machine_function *frv_init_machine_status\t\t(void);\n static rtx frv_int_to_acc\t\t\t(enum insn_code, int, rtx);\n static enum machine_mode frv_matching_accg_mode\t(enum machine_mode);\n-static rtx frv_read_argument\t\t\t(tree *);\n-static rtx frv_read_iacc_argument\t\t(enum machine_mode, tree *);\n+static rtx frv_read_argument\t\t\t(tree, unsigned int);\n+static rtx frv_read_iacc_argument\t\t(enum machine_mode, tree, unsigned int);\n static int frv_check_constant_argument\t\t(enum insn_code, int, rtx);\n static rtx frv_legitimize_target\t\t(enum insn_code, rtx);\n static rtx frv_legitimize_argument\t\t(enum insn_code, int, rtx);\n@@ -3796,7 +3796,7 @@ frv_expand_fdpic_call (rtx *operands, bool ret_value, bool sibcall)\n       emit_insn (x);\n       cfun->uses_pic_offset_table = TRUE;\n       addr = dest;\n-    }    \n+    }\n   else if (GET_CODE (addr) == SYMBOL_REF)\n     {\n       /* These are always either local, or handled through a local\n@@ -4017,7 +4017,7 @@ frv_emit_movsi (rtx dest, rtx src)\n \t     (read-write) for code size (read-only, shareable), as\n \t     long as the symbol is not used in more than two different\n \t     locations.\n-\t     \n+\n \t     With -fpie/-fpic, we'd be trading a single load for a\n \t     sequence of 4 instructions, because the offset of the\n \t     label can't be assumed to be addressable with 12 bits, so\n@@ -4116,11 +4116,11 @@ frv_emit_movsi (rtx dest, rtx src)\n \n \t\t  if (init && init != error_mark_node)\n \t\t    reloc = compute_reloc_for_constant (init);\n-\t\t  \n+\n \t\t  named_section = TREE_CODE (decl) == VAR_DECL\n \t\t    && lookup_attribute (\"section\", DECL_ATTRIBUTES (decl));\n \t\t  readonly = decl_readonly_section (decl, reloc);\n-\t\t  \n+\n \t\t  if (named_section)\n \t\t    unspec = R_FRV_GOT12;\n \t\t  else if (!readonly)\n@@ -8687,28 +8687,27 @@ frv_matching_accg_for_acc (rtx acc)\n \t\t      REGNO (acc) - ACC_FIRST + ACCG_FIRST);\n }\n \n-/* Read a value from the head of the tree list pointed to by ARGLISTPTR.\n-   Return the value as an rtx and replace *ARGLISTPTR with the tail of the\n-   list.  */\n+/* Read the requested argument from the call EXP given by INDEX.\n+   Return the value as an rtx.  */\n \n static rtx\n-frv_read_argument (tree *arglistptr)\n+frv_read_argument (tree exp, unsigned int index)\n {\n-  tree next = TREE_VALUE (*arglistptr);\n-  *arglistptr = TREE_CHAIN (*arglistptr);\n-  return expand_expr (next, NULL_RTX, VOIDmode, 0);\n+  return expand_expr (CALL_EXPR_ARG (exp, index),\n+\t\t      NULL_RTX, VOIDmode, 0);\n }\n \n /* Like frv_read_argument, but interpret the argument as the number\n    of an IACC register and return a (reg:MODE ...) rtx for it.  */\n \n static rtx\n-frv_read_iacc_argument (enum machine_mode mode, tree *arglistptr)\n+frv_read_iacc_argument (enum machine_mode mode, tree call,\n+\t\t\tunsigned int index)\n {\n   int i, regno;\n   rtx op;\n \n-  op = frv_read_argument (arglistptr);\n+  op = frv_read_argument (call, index);\n   if (GET_CODE (op) != CONST_INT\n       || INTVAL (op) < 0\n       || INTVAL (op) > IACC_LAST - IACC_FIRST\n@@ -8797,10 +8796,10 @@ frv_volatile_memref (enum machine_mode mode, rtx arg)\n    only MHDSETS falls into this category.  */\n \n static rtx\n-frv_expand_set_builtin (enum insn_code icode, tree arglist, rtx target)\n+frv_expand_set_builtin (enum insn_code icode, tree call, rtx target)\n {\n   rtx pat;\n-  rtx op0 = frv_read_argument (&arglist);\n+  rtx op0 = frv_read_argument (call, 0);\n \n   if (! frv_check_constant_argument (icode, 1, op0))\n     return NULL_RTX;\n@@ -8817,10 +8816,10 @@ frv_expand_set_builtin (enum insn_code icode, tree arglist, rtx target)\n /* Expand builtins that take one operand.  */\n \n static rtx\n-frv_expand_unop_builtin (enum insn_code icode, tree arglist, rtx target)\n+frv_expand_unop_builtin (enum insn_code icode, tree call, rtx target)\n {\n   rtx pat;\n-  rtx op0 = frv_read_argument (&arglist);\n+  rtx op0 = frv_read_argument (call, 0);\n \n   target = frv_legitimize_target (icode, target);\n   op0 = frv_legitimize_argument (icode, 1, op0);\n@@ -8835,11 +8834,11 @@ frv_expand_unop_builtin (enum insn_code icode, tree arglist, rtx target)\n /* Expand builtins that take two operands.  */\n \n static rtx\n-frv_expand_binop_builtin (enum insn_code icode, tree arglist, rtx target)\n+frv_expand_binop_builtin (enum insn_code icode, tree call, rtx target)\n {\n   rtx pat;\n-  rtx op0 = frv_read_argument (&arglist);\n-  rtx op1 = frv_read_argument (&arglist);\n+  rtx op0 = frv_read_argument (call, 0);\n+  rtx op1 = frv_read_argument (call, 1);\n \n   target = frv_legitimize_target (icode, target);\n   op0 = frv_legitimize_argument (icode, 1, op0);\n@@ -8856,11 +8855,11 @@ frv_expand_binop_builtin (enum insn_code icode, tree arglist, rtx target)\n    one.  */\n \n static rtx\n-frv_expand_cut_builtin (enum insn_code icode, tree arglist, rtx target)\n+frv_expand_cut_builtin (enum insn_code icode, tree call, rtx target)\n {\n   rtx pat;\n-  rtx op0 = frv_read_argument (&arglist);\n-  rtx op1 = frv_read_argument (&arglist);\n+  rtx op0 = frv_read_argument (call, 0);\n+  rtx op1 = frv_read_argument (call, 1);\n   rtx op2;\n \n   target = frv_legitimize_target (icode, target);\n@@ -8888,11 +8887,11 @@ frv_expand_cut_builtin (enum insn_code icode, tree arglist, rtx target)\n /* Expand builtins that take two operands and the second is immediate.  */\n \n static rtx\n-frv_expand_binopimm_builtin (enum insn_code icode, tree arglist, rtx target)\n+frv_expand_binopimm_builtin (enum insn_code icode, tree call, rtx target)\n {\n   rtx pat;\n-  rtx op0 = frv_read_argument (&arglist);\n-  rtx op1 = frv_read_argument (&arglist);\n+  rtx op0 = frv_read_argument (call, 0);\n+  rtx op1 = frv_read_argument (call, 1);\n \n   if (! frv_check_constant_argument (icode, 2, op1))\n     return NULL_RTX;\n@@ -8911,11 +8910,11 @@ frv_expand_binopimm_builtin (enum insn_code icode, tree arglist, rtx target)\n    ints and return void.  */\n \n static rtx\n-frv_expand_voidbinop_builtin (enum insn_code icode, tree arglist)\n+frv_expand_voidbinop_builtin (enum insn_code icode, tree call)\n {\n   rtx pat;\n-  rtx op0 = frv_read_argument (&arglist);\n-  rtx op1 = frv_read_argument (&arglist);\n+  rtx op0 = frv_read_argument (call, 0);\n+  rtx op1 = frv_read_argument (call, 1);\n   enum machine_mode mode0 = insn_data[icode].operand[0].mode;\n   rtx addr;\n \n@@ -8949,11 +8948,11 @@ frv_expand_voidbinop_builtin (enum insn_code icode, tree arglist)\n /* Expand builtins that take two long operands and return void.  */\n \n static rtx\n-frv_expand_int_void2arg (enum insn_code icode, tree arglist)\n+frv_expand_int_void2arg (enum insn_code icode, tree call)\n {\n   rtx pat;\n-  rtx op0 = frv_read_argument (&arglist);\n-  rtx op1 = frv_read_argument (&arglist);\n+  rtx op0 = frv_read_argument (call, 0);\n+  rtx op1 = frv_read_argument (call, 1);\n \n   op0 = frv_legitimize_argument (icode, 1, op0);\n   op1 = frv_legitimize_argument (icode, 1, op1);\n@@ -8968,10 +8967,10 @@ frv_expand_int_void2arg (enum insn_code icode, tree arglist)\n /* Expand prefetch builtins.  These take a single address as argument.  */\n \n static rtx\n-frv_expand_prefetches (enum insn_code icode, tree arglist)\n+frv_expand_prefetches (enum insn_code icode, tree call)\n {\n   rtx pat;\n-  rtx op0 = frv_read_argument (&arglist);\n+  rtx op0 = frv_read_argument (call, 0);\n \n   pat = GEN_FCN (icode) (force_reg (Pmode, op0));\n   if (! pat)\n@@ -8987,12 +8986,12 @@ frv_expand_prefetches (enum insn_code icode, tree arglist)\n    corresponds to the accumulator.  */\n \n static rtx\n-frv_expand_voidtriop_builtin (enum insn_code icode, tree arglist)\n+frv_expand_voidtriop_builtin (enum insn_code icode, tree call)\n {\n   rtx pat;\n-  rtx op0 = frv_read_argument (&arglist);\n-  rtx op1 = frv_read_argument (&arglist);\n-  rtx op2 = frv_read_argument (&arglist);\n+  rtx op0 = frv_read_argument (call, 0);\n+  rtx op1 = frv_read_argument (call, 1);\n+  rtx op2 = frv_read_argument (call, 2);\n   rtx op3;\n \n   op0 = frv_int_to_acc (icode, 0, op0);\n@@ -9015,11 +9014,11 @@ frv_expand_voidtriop_builtin (enum insn_code icode, tree arglist)\n    void.  */\n \n static rtx\n-frv_expand_voidaccop_builtin (enum insn_code icode, tree arglist)\n+frv_expand_voidaccop_builtin (enum insn_code icode, tree call)\n {\n   rtx pat;\n-  rtx op0 = frv_read_argument (&arglist);\n-  rtx op1 = frv_read_argument (&arglist);\n+  rtx op0 = frv_read_argument (call, 0);\n+  rtx op1 = frv_read_argument (call, 1);\n   rtx op2;\n   rtx op3;\n \n@@ -9046,9 +9045,9 @@ frv_expand_voidaccop_builtin (enum insn_code icode, tree arglist)\n \n static rtx\n frv_expand_load_builtin (enum insn_code icode, enum machine_mode target_mode,\n-                         tree arglist, rtx target)\n+                         tree call, rtx target)\n {\n-  rtx op0 = frv_read_argument (&arglist);\n+  rtx op0 = frv_read_argument (call, 0);\n   rtx cookie = frv_io_address_cookie (op0);\n \n   if (target == 0 || !REG_P (target))\n@@ -9063,10 +9062,10 @@ frv_expand_load_builtin (enum insn_code icode, enum machine_mode target_mode,\n /* Likewise __builtin_write* functions.  */\n \n static rtx\n-frv_expand_store_builtin (enum insn_code icode, tree arglist)\n+frv_expand_store_builtin (enum insn_code icode, tree call)\n {\n-  rtx op0 = frv_read_argument (&arglist);\n-  rtx op1 = frv_read_argument (&arglist);\n+  rtx op0 = frv_read_argument (call, 0);\n+  rtx op1 = frv_read_argument (call, 1);\n   rtx cookie = frv_io_address_cookie (op0);\n \n   op0 = frv_volatile_memref (insn_data[icode].operand[0].mode, op0);\n@@ -9078,18 +9077,18 @@ frv_expand_store_builtin (enum insn_code icode, tree arglist)\n \n /* Expand the MDPACKH builtin.  It takes four unsigned short arguments and\n    each argument forms one word of the two double-word input registers.\n-   ARGLIST is a TREE_LIST of the arguments and TARGET, if nonnull,\n-   suggests a good place to put the return value.  */\n+   CALL is the tree for the call and TARGET, if nonnull, suggests a good place\n+   to put the return value.  */\n \n static rtx\n-frv_expand_mdpackh_builtin (tree arglist, rtx target)\n+frv_expand_mdpackh_builtin (tree call, rtx target)\n {\n   enum insn_code icode = CODE_FOR_mdpackh;\n   rtx pat, op0, op1;\n-  rtx arg1 = frv_read_argument (&arglist);\n-  rtx arg2 = frv_read_argument (&arglist);\n-  rtx arg3 = frv_read_argument (&arglist);\n-  rtx arg4 = frv_read_argument (&arglist);\n+  rtx arg1 = frv_read_argument (call, 0);\n+  rtx arg2 = frv_read_argument (call, 1);\n+  rtx arg3 = frv_read_argument (call, 2);\n+  rtx arg4 = frv_read_argument (call, 3);\n \n   target = frv_legitimize_target (icode, target);\n   op0 = gen_reg_rtx (DImode);\n@@ -9118,11 +9117,11 @@ frv_expand_mdpackh_builtin (tree arglist, rtx target)\n    number as argument.  */\n \n static rtx\n-frv_expand_mclracc_builtin (tree arglist)\n+frv_expand_mclracc_builtin (tree call)\n {\n   enum insn_code icode = CODE_FOR_mclracc;\n   rtx pat;\n-  rtx op0 = frv_read_argument (&arglist);\n+  rtx op0 = frv_read_argument (call, 0);\n \n   op0 = frv_int_to_acc (icode, 0, op0);\n   if (! op0)\n@@ -9151,11 +9150,11 @@ frv_expand_noargs_builtin (enum insn_code icode)\n    number or accumulator guard number as argument and return an SI integer.  */\n \n static rtx\n-frv_expand_mrdacc_builtin (enum insn_code icode, tree arglist)\n+frv_expand_mrdacc_builtin (enum insn_code icode, tree call)\n {\n   rtx pat;\n   rtx target = gen_reg_rtx (SImode);\n-  rtx op0 = frv_read_argument (&arglist);\n+  rtx op0 = frv_read_argument (call, 0);\n \n   op0 = frv_int_to_acc (icode, 1, op0);\n   if (! op0)\n@@ -9174,11 +9173,11 @@ frv_expand_mrdacc_builtin (enum insn_code icode, tree arglist)\n    second.  */\n \n static rtx\n-frv_expand_mwtacc_builtin (enum insn_code icode, tree arglist)\n+frv_expand_mwtacc_builtin (enum insn_code icode, tree call)\n {\n   rtx pat;\n-  rtx op0 = frv_read_argument (&arglist);\n-  rtx op1 = frv_read_argument (&arglist);\n+  rtx op0 = frv_read_argument (call, 0);\n+  rtx op1 = frv_read_argument (call, 1);\n \n   op0 = frv_int_to_acc (icode, 0, op0);\n   if (! op0)\n@@ -9216,8 +9215,6 @@ frv_expand_builtin (tree exp,\n                     enum machine_mode mode ATTRIBUTE_UNUSED,\n                     int ignore ATTRIBUTE_UNUSED)\n {\n-  /* FIXME:  Pass the CALL_EXPR directly instead of consing up an arglist.  */\n-  tree arglist = CALL_EXPR_ARGS (exp);\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n   unsigned fcode = (unsigned)DECL_FUNCTION_CODE (fndecl);\n   unsigned i;\n@@ -9322,7 +9319,7 @@ frv_expand_builtin (tree exp,\n       return frv_expand_noargs_builtin (CODE_FOR_mtrap);\n \n     case FRV_BUILTIN_MCLRACC:\n-      return frv_expand_mclracc_builtin (arglist);\n+      return frv_expand_mclracc_builtin (exp);\n \n     case FRV_BUILTIN_MCLRACCA:\n       if (TARGET_ACC_8)\n@@ -9331,44 +9328,44 @@ frv_expand_builtin (tree exp,\n \treturn frv_expand_noargs_builtin (CODE_FOR_mclracca4);\n \n     case FRV_BUILTIN_MRDACC:\n-      return frv_expand_mrdacc_builtin (CODE_FOR_mrdacc, arglist);\n+      return frv_expand_mrdacc_builtin (CODE_FOR_mrdacc, exp);\n \n     case FRV_BUILTIN_MRDACCG:\n-      return frv_expand_mrdacc_builtin (CODE_FOR_mrdaccg, arglist);\n+      return frv_expand_mrdacc_builtin (CODE_FOR_mrdaccg, exp);\n \n     case FRV_BUILTIN_MWTACC:\n-      return frv_expand_mwtacc_builtin (CODE_FOR_mwtacc, arglist);\n+      return frv_expand_mwtacc_builtin (CODE_FOR_mwtacc, exp);\n \n     case FRV_BUILTIN_MWTACCG:\n-      return frv_expand_mwtacc_builtin (CODE_FOR_mwtaccg, arglist);\n+      return frv_expand_mwtacc_builtin (CODE_FOR_mwtaccg, exp);\n \n     case FRV_BUILTIN_MDPACKH:\n-      return frv_expand_mdpackh_builtin (arglist, target);\n+      return frv_expand_mdpackh_builtin (exp, target);\n \n     case FRV_BUILTIN_IACCreadll:\n       {\n-\trtx src = frv_read_iacc_argument (DImode, &arglist);\n+\trtx src = frv_read_iacc_argument (DImode, exp, 0);\n \tif (target == 0 || !REG_P (target))\n \t  target = gen_reg_rtx (DImode);\n \tfrv_split_iacc_move (target, src);\n \treturn target;\n       }\n \n     case FRV_BUILTIN_IACCreadl:\n-      return frv_read_iacc_argument (SImode, &arglist);\n+      return frv_read_iacc_argument (SImode, exp, 0);\n \n     case FRV_BUILTIN_IACCsetll:\n       {\n-\trtx dest = frv_read_iacc_argument (DImode, &arglist);\n-\trtx src = frv_read_argument (&arglist);\n+\trtx dest = frv_read_iacc_argument (DImode, exp, 0);\n+\trtx src = frv_read_argument (exp, 1);\n \tfrv_split_iacc_move (dest, force_reg (DImode, src));\n \treturn 0;\n       }\n \n     case FRV_BUILTIN_IACCsetl:\n       {\n-\trtx dest = frv_read_iacc_argument (SImode, &arglist);\n-\trtx src = frv_read_argument (&arglist);\n+\trtx dest = frv_read_iacc_argument (SImode, exp, 0);\n+\trtx src = frv_read_argument (exp, 1);\n \temit_move_insn (dest, force_reg (SImode, src));\n \treturn 0;\n       }\n@@ -9381,54 +9378,54 @@ frv_expand_builtin (tree exp,\n \n   for (i = 0, d = bdesc_set; i < ARRAY_SIZE (bdesc_set); i++, d++)\n     if (d->code == fcode)\n-      return frv_expand_set_builtin (d->icode, arglist, target);\n+      return frv_expand_set_builtin (d->icode, exp, target);\n \n   for (i = 0, d = bdesc_1arg; i < ARRAY_SIZE (bdesc_1arg); i++, d++)\n     if (d->code == fcode)\n-      return frv_expand_unop_builtin (d->icode, arglist, target);\n+      return frv_expand_unop_builtin (d->icode, exp, target);\n \n   for (i = 0, d = bdesc_2arg; i < ARRAY_SIZE (bdesc_2arg); i++, d++)\n     if (d->code == fcode)\n-      return frv_expand_binop_builtin (d->icode, arglist, target);\n+      return frv_expand_binop_builtin (d->icode, exp, target);\n \n   for (i = 0, d = bdesc_cut; i < ARRAY_SIZE (bdesc_cut); i++, d++)\n     if (d->code == fcode)\n-      return frv_expand_cut_builtin (d->icode, arglist, target);\n+      return frv_expand_cut_builtin (d->icode, exp, target);\n \n   for (i = 0, d = bdesc_2argimm; i < ARRAY_SIZE (bdesc_2argimm); i++, d++)\n     if (d->code == fcode)\n-      return frv_expand_binopimm_builtin (d->icode, arglist, target);\n+      return frv_expand_binopimm_builtin (d->icode, exp, target);\n \n   for (i = 0, d = bdesc_void2arg; i < ARRAY_SIZE (bdesc_void2arg); i++, d++)\n     if (d->code == fcode)\n-      return frv_expand_voidbinop_builtin (d->icode, arglist);\n+      return frv_expand_voidbinop_builtin (d->icode, exp);\n \n   for (i = 0, d = bdesc_void3arg; i < ARRAY_SIZE (bdesc_void3arg); i++, d++)\n     if (d->code == fcode)\n-      return frv_expand_voidtriop_builtin (d->icode, arglist);\n+      return frv_expand_voidtriop_builtin (d->icode, exp);\n \n   for (i = 0, d = bdesc_voidacc; i < ARRAY_SIZE (bdesc_voidacc); i++, d++)\n     if (d->code == fcode)\n-      return frv_expand_voidaccop_builtin (d->icode, arglist);\n+      return frv_expand_voidaccop_builtin (d->icode, exp);\n \n   for (i = 0, d = bdesc_int_void2arg;\n        i < ARRAY_SIZE (bdesc_int_void2arg); i++, d++)\n     if (d->code == fcode)\n-      return frv_expand_int_void2arg (d->icode, arglist);\n+      return frv_expand_int_void2arg (d->icode, exp);\n \n   for (i = 0, d = bdesc_prefetches;\n        i < ARRAY_SIZE (bdesc_prefetches); i++, d++)\n     if (d->code == fcode)\n-      return frv_expand_prefetches (d->icode, arglist);\n+      return frv_expand_prefetches (d->icode, exp);\n \n   for (i = 0, d = bdesc_loads; i < ARRAY_SIZE (bdesc_loads); i++, d++)\n     if (d->code == fcode)\n       return frv_expand_load_builtin (d->icode, TYPE_MODE (TREE_TYPE (exp)),\n-\t\t\t\t      arglist, target);\n+\t\t\t\t      exp, target);\n \n   for (i = 0, d = bdesc_stores; i < ARRAY_SIZE (bdesc_stores); i++, d++)\n     if (d->code == fcode)\n-      return frv_expand_store_builtin (d->icode, arglist);\n+      return frv_expand_store_builtin (d->icode, exp);\n \n   return 0;\n }\n@@ -9563,7 +9560,7 @@ frv_asm_out_destructor (rtx symbol, int priority ATTRIBUTE_UNUSED)\n   if (TARGET_FDPIC)\n     {\n       int ok = frv_assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, 1);\n-      \n+\n       gcc_assert (ok);\n       return;\n     }"}]}