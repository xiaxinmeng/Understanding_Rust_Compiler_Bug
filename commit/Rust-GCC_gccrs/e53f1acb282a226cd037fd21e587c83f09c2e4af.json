{"sha": "e53f1acb282a226cd037fd21e587c83f09c2e4af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTUzZjFhY2IyODJhMjI2Y2QwMzdmZDIxZTU4N2M4M2YwOWMyZTRhZg==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-12T20:59:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-12T20:59:44Z"}, "message": "Merge #628\n\n628: typecheck: add assert on resolve_root_path return value r=philberty a=dkm\n\nresolve_root_path can return nullptr in case of error.\r\nBetter raise an error than dereference the pointer.\n\nCo-authored-by: Marc Poulhi\u00e8s <dkm@kataplop.net>", "tree": {"sha": "06a07ec8baf70c99a64f98a339add56a3e31ff92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06a07ec8baf70c99a64f98a339add56a3e31ff92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e53f1acb282a226cd037fd21e587c83f09c2e4af", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhFYvACRBK7hj4Ov3rIwAAhLkIACHjfspcKYNFxzjPWwiJMIrG\nLDgE6seZ/J1gMsasT/u3dg/4JRQNFgxS/u8J8rOw0XuVfw8UQTF7QkR94iDtd8vY\nPIMn/JAq9IvrQKI0+MP8YZsENtMdGZ0hE4cpJQyaucm/1xqONZikxjT6WVvAyanl\n0LyHHtoT3YV5opGRHVRlcf75+mmqMawtpvENMaG/5xy3rBFa2J1C7heUSXICz/nN\n4QOhFTMlOmKRXEVSq7bZGJNU88FZ83V+jeMbWa6Yc0gzz2bAvA1jgi/gcBMM85ae\nu8HSOXa0FqIryTP8dzIm97SXw0RAWvwXVy7gfVf5A4jtngnLPe6s1Zc5mgIka8o=\n=ZRT9\n-----END PGP SIGNATURE-----\n", "payload": "tree 06a07ec8baf70c99a64f98a339add56a3e31ff92\nparent 3610c9b202b3197bd92ce7b8dbabcb86d4641ee6\nparent 8208beaf1ecff0bf20db7575d671aa8fa61c2988\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1628801984 +0000\ncommitter GitHub <noreply@github.com> 1628801984 +0000\n\nMerge #628\n\n628: typecheck: add assert on resolve_root_path return value r=philberty a=dkm\n\nresolve_root_path can return nullptr in case of error.\r\nBetter raise an error than dereference the pointer.\n\nCo-authored-by: Marc Poulhi\u00e8s <dkm@kataplop.net>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e53f1acb282a226cd037fd21e587c83f09c2e4af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e53f1acb282a226cd037fd21e587c83f09c2e4af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e53f1acb282a226cd037fd21e587c83f09c2e4af/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3610c9b202b3197bd92ce7b8dbabcb86d4641ee6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3610c9b202b3197bd92ce7b8dbabcb86d4641ee6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3610c9b202b3197bd92ce7b8dbabcb86d4641ee6"}, {"sha": "8208beaf1ecff0bf20db7575d671aa8fa61c2988", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8208beaf1ecff0bf20db7575d671aa8fa61c2988", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8208beaf1ecff0bf20db7575d671aa8fa61c2988"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "d88cb0b7f1d40fede5dedf15346a034f6209590d", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53f1acb282a226cd037fd21e587c83f09c2e4af/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53f1acb282a226cd037fd21e587c83f09c2e4af/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=e53f1acb282a226cd037fd21e587c83f09c2e4af", "patch": "@@ -21,6 +21,7 @@\n \n #include \"rust-hir-type-check-base.h\"\n #include \"rust-hir-full.h\"\n+#include \"rust-system.h\"\n #include \"rust-tyty.h\"\n #include \"rust-tyty-call.h\"\n #include \"rust-hir-type-check-struct-field.h\"\n@@ -931,6 +932,9 @@ class TypeCheckExpr : public TypeCheckBase\n     size_t offset = -1;\n     TyTy::BaseType *tyseg\n       = resolve_root_path (expr, &offset, &resolved_node_id);\n+\n+    rust_assert (tyseg != nullptr);\n+\n     if (tyseg->get_kind () == TyTy::TypeKind::ERROR)\n       return;\n \n@@ -1202,6 +1206,7 @@ class TypeCheckExpr : public TypeCheckBase\n       folded_array_capacity (nullptr), inside_loop (inside_loop)\n   {}\n \n+  // Beware: currently returns Tyty::ErrorType or nullptr in case of error.\n   TyTy::BaseType *resolve_root_path (HIR::PathInExpression &expr,\n \t\t\t\t     size_t *offset,\n \t\t\t\t     NodeId *root_resolved_node_id)"}]}