{"sha": "30934c5da53286d78371d396578a757c63942bc9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA5MzRjNWRhNTMyODZkNzgzNzFkMzk2NTc4YTc1N2M2Mzk0MmJjOQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-06-14T13:47:01Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-06-14T13:47:01Z"}, "message": "re PR middle-end/71526 (ICE: verify_gimple failed)\n\n2016-06-14  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/71526\n\t* genmatch.c (expr::gen_transform): Use in_type for comparisons\n\tif available.\n\n\t* gfortran.dg/pr71526.f90: New testcase.\n\nFrom-SVN: r237441", "tree": {"sha": "c10cec8d883105dbb3d15047b89f3ff821d25aed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c10cec8d883105dbb3d15047b89f3ff821d25aed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30934c5da53286d78371d396578a757c63942bc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30934c5da53286d78371d396578a757c63942bc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30934c5da53286d78371d396578a757c63942bc9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30934c5da53286d78371d396578a757c63942bc9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8c83f71d3b17a8bf136ca0243397dad75ea698f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c83f71d3b17a8bf136ca0243397dad75ea698f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c83f71d3b17a8bf136ca0243397dad75ea698f0"}], "stats": {"total": 42, "additions": 40, "deletions": 2}, "files": [{"sha": "82a84fa22c8a04d8156d13b4429dae23bb9a5cc6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30934c5da53286d78371d396578a757c63942bc9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30934c5da53286d78371d396578a757c63942bc9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30934c5da53286d78371d396578a757c63942bc9", "patch": "@@ -1,3 +1,9 @@\n+2016-06-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/71526\n+\t* genmatch.c (expr::gen_transform): Use in_type for comparisons\n+\tif available.\n+\n 2015-06-14  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_mask_and_shift_for_ubfiz_p):"}, {"sha": "f5aa29b72f5e205959eb12617ccd923bc65c76d7", "filename": "gcc/genmatch.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30934c5da53286d78371d396578a757c63942bc9/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30934c5da53286d78371d396578a757c63942bc9/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=30934c5da53286d78371d396578a757c63942bc9", "patch": "@@ -2288,8 +2288,14 @@ expr::gen_transform (FILE *f, int indent, const char *dest, bool gimple,\n     {\n       /* comparisons use boolean_type_node (or what gets in), but\n          their operands need to figure out the types themselves.  */\n-      sprintf (optype, \"boolean_type_node\");\n-      type = optype;\n+      if (in_type)\n+\ttype = in_type;\n+      else\n+\t{\n+\t  sprintf (optype, \"boolean_type_node\");\n+\t  type = optype;\n+\t}\n+      in_type = NULL;\n     }\n   else if (*opr == COND_EXPR\n \t   || *opr == VEC_COND_EXPR)"}, {"sha": "30e53be74703a82c4588abe2bbd398f8171f9f95", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30934c5da53286d78371d396578a757c63942bc9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30934c5da53286d78371d396578a757c63942bc9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=30934c5da53286d78371d396578a757c63942bc9", "patch": "@@ -1,3 +1,8 @@\n+2016-06-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/71526\n+\t* gfortran.dg/pr71526.f90: New testcase.\n+\n 2016-06-14  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* gcc.dg/zero_bits_compound-1.c: Support aarch64."}, {"sha": "dbf989f39bfed046fbd1599a912490d64c6355d1", "filename": "gcc/testsuite/gfortran.dg/pr71526.f90", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30934c5da53286d78371d396578a757c63942bc9/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr71526.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30934c5da53286d78371d396578a757c63942bc9/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr71526.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr71526.f90?ref=30934c5da53286d78371d396578a757c63942bc9", "patch": "@@ -0,0 +1,21 @@\n+! { dg-do link }\n+! { dg-require-effective-target lto }\n+! { dg-options \"-O2 -flto\" }\n+\n+MODULE util\n+  INTERFACE sort\n+     MODULE PROCEDURE sort_cv\n+  END INTERFACE\n+CONTAINS\n+  SUBROUTINE sort_cv ( arr, n, index )\n+    CHARACTER(LEN=*), INTENT(INOUT)          :: arr(1:n)\n+    INTEGER, INTENT(OUT)                     :: INDEX(1:n)\n+    INTEGER, ALLOCATABLE, DIMENSION(:, :)    :: entries\n+    ALLOCATE(entries(max_length,SIZE(arr)))\n+  END SUBROUTINE sort_cv\n+END MODULE util\n+USE util\n+INTEGER, ALLOCATABLE :: ind(:)\n+character(len=3), ALLOCATABLE :: d(:)\n+CALL sort(d,N,ind)\n+END"}]}