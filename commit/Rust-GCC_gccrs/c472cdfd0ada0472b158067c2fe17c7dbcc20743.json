{"sha": "c472cdfd0ada0472b158067c2fe17c7dbcc20743", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ3MmNkZmQwYWRhMDQ3MmIxNTgwNjdjMmZlMTdjN2RiY2MyMDc0Mw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-05-19T11:24:18Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-05-19T11:24:18Z"}, "message": "decl2.c (start_static_storage_duration_function): Fix comment.\n\n\t* decl2.c (start_static_storage_duration_function): Fix comment.\n\t(finish_file): Create static storage duration functions lazily.\n\nFrom-SVN: r27029", "tree": {"sha": "8d3b5829b6b2c08cf18cc3b5cf023b835f217721", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d3b5829b6b2c08cf18cc3b5cf023b835f217721"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c472cdfd0ada0472b158067c2fe17c7dbcc20743", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c472cdfd0ada0472b158067c2fe17c7dbcc20743", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c472cdfd0ada0472b158067c2fe17c7dbcc20743", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c472cdfd0ada0472b158067c2fe17c7dbcc20743/comments", "author": null, "committer": null, "parents": [{"sha": "6ada3468d803bafc01989224c2668a118da27c1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ada3468d803bafc01989224c2668a118da27c1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ada3468d803bafc01989224c2668a118da27c1e"}], "stats": {"total": 40, "additions": 25, "deletions": 15}, "files": [{"sha": "9a30a2feff46bc6aabe4284d88b853a74296b46f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c472cdfd0ada0472b158067c2fe17c7dbcc20743/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c472cdfd0ada0472b158067c2fe17c7dbcc20743/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c472cdfd0ada0472b158067c2fe17c7dbcc20743", "patch": "@@ -1,3 +1,8 @@\n+1999-05-19  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* decl2.c (start_static_storage_duration_function): Fix comment.\n+\t(finish_file): Create static storage duration functions lazily.\n+\n 1999-05-19  Jason Merrill  <jason@yorick.cygnus.com>\n \n \tImplement anonymous structs."}, {"sha": "d82fb1c9cddcebd99db41b01d4a5578022d17477", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c472cdfd0ada0472b158067c2fe17c7dbcc20743/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c472cdfd0ada0472b158067c2fe17c7dbcc20743/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=c472cdfd0ada0472b158067c2fe17c7dbcc20743", "patch": "@@ -3092,7 +3092,7 @@ start_static_storage_duration_function ()\n   /* Start the function itself.  This is equivalent to declarating the\n      function as:\n \n-       static inline void __ssdf (int __initialize_p, init __priority_p);\n+       static void __ssdf (int __initialize_p, init __priority_p);\n        \n      It is static because we only need to call this function from the\n      various constructor and destructor functions for this module.  */\n@@ -3577,15 +3577,9 @@ finish_file ()\n \n   do \n     {\n-      /* We need to start a new initialization function each time\n-\t through the loop.  That's because we need to know which\n-\t vtables have been referenced, and TREE_SYMBOL_REFERENCED\n-\t isn't computed until a function is finished, and written out.\n-\t That's a deficiency in the back-end.  When this is fixed,\n-\t these initialization functions could all become inline, with\n-\t resulting performance improvements.  */\n-      start_static_storage_duration_function ();\n-      push_to_top_level ();\n+      /* Non-zero if we need a static storage duration function on\n+\t this iteration through the loop.  */\n+      int need_ssdf_p = 0;\n \n       reconsider = 0;\n \n@@ -3606,10 +3600,6 @@ finish_file ()\n \t\t\t/*data=*/0))\n \treconsider = 1;\n       \n-      /* Come back to the static storage duration function; we're\n-\t about to emit instructions there for static initializations\n-\t and such.  */\n-      pop_from_top_level ();\n       /* The list of objects with static storage duration is built up\n \t in reverse order, so we reverse it here.  We also clear\n \t STATIC_AGGREGATES so that any new aggregates added during the\n@@ -3621,6 +3611,20 @@ finish_file ()\n \t{\n \t  if (! TREE_ASM_WRITTEN (TREE_VALUE (vars)))\n \t    rest_of_decl_compilation (TREE_VALUE (vars), 0, 1, 1);\n+\t  if (!need_ssdf_p)\n+\t    {\n+\t      /* We need to start a new initialization function each\n+\t\t time through the loop.  That's because we need to\n+\t\t know which vtables have been referenced, and\n+\t\t TREE_SYMBOL_REFERENCED isn't computed until a\n+\t\t function is finished, and written out.  That's a\n+\t\t deficiency in the back-end.  When this is fixed,\n+\t\t these initialization functions could all become\n+\t\t inline, with resulting performance improvements.  */\n+\t      start_static_storage_duration_function ();\n+\t      need_ssdf_p = 1;\n+\t    }\n+\n \t  do_static_initialization_and_destruction (TREE_VALUE (vars), \n \t\t\t\t\t\t    TREE_PURPOSE (vars));\n \t  reconsider = 1;\n@@ -3629,7 +3633,8 @@ finish_file ()\n       \n       /* Finish up the static storage duration function for this\n          round.  */\n-      finish_static_storage_duration_function ();\n+      if (need_ssdf_p)\n+\tfinish_static_storage_duration_function ();\n \n       /* Go through the various inline functions, and see if any need\n \t synthesizing.  */"}]}