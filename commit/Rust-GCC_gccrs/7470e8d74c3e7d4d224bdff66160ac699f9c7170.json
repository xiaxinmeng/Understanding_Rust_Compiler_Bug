{"sha": "7470e8d74c3e7d4d224bdff66160ac699f9c7170", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ3MGU4ZDc0YzNlN2Q0ZDIyNGJkZmY2NjE2MGFjNjk5ZjljNzE3MA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-03-05T03:43:58Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-03-05T03:43:58Z"}, "message": "function.h (struct sequence_stack): Remove rtl_expr.\n\n\t* function.h (struct sequence_stack): Remove rtl_expr.\n\t(struct emit_staus): Likewise.\n\t(seq_rtl_expr): Remove.\n\t* tree.h (free_temps_for_rtl_expr): Don't declare.\n\t(start_sequence_for_rtl_expr): Likewise.\n\t* rtl.h (preserve_rtl_expr_result): Likewise.\n\t* emit-rtl.c (start_sequence): Don't set sequence_rtl_expr.\n\t(start_sequence_for_rtl_expr): Remove.\n\t(push_topmost_sequence): Don't save sequence_rtl_expr.\n\t(pop_topmost_sequence): Remove comment about not restoring it.\n\t(end_sequence): Don't set seq_rtl_expr.\n\t(init_emit): Don't initialize it.\n\t(mark_sequence_stack): Don't mark it.\n\t(mark_emit_status): Likewise.\n\t* except.c (protect_with_terminate): Use\n\tstart_sequence_for_rtl_expr, not start_sequence.\n\t* expr.c (expand_expr, case RTL_EXPR): Don't call\n\tpreserve_rtl_expr_result or free_temps_for_rtl_expr.\n\t* function.c (assign_stack_temp_for_type): Don't set rtl_expr.\n\t(preserve_rtl_expr_result): Remove.\n\t(free_temps_for_rtl_expr): Likewise.\n\t(pop_temp_slots): Likewise.\n\t(mark_temp_slot): Don't mark the rtl_expr.\n\t* stmt.c (expand_start_stmt_expr): Use start_sequence, not\n\tstart_sequence_for_rtl_expr.\n\nFrom-SVN: r32335", "tree": {"sha": "e5ed0aeba5899af42d9621c370b020e31cd31a40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5ed0aeba5899af42d9621c370b020e31cd31a40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7470e8d74c3e7d4d224bdff66160ac699f9c7170", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7470e8d74c3e7d4d224bdff66160ac699f9c7170", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7470e8d74c3e7d4d224bdff66160ac699f9c7170", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7470e8d74c3e7d4d224bdff66160ac699f9c7170/comments", "author": null, "committer": null, "parents": [{"sha": "40546a785b540f03926d6b9cee85803f7293b517", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40546a785b540f03926d6b9cee85803f7293b517", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40546a785b540f03926d6b9cee85803f7293b517"}], "stats": {"total": 54, "additions": 3, "deletions": 51}, "files": [{"sha": "e71a4c7fd3ff1fc8fbf893933885463bef633266", "filename": "gcc/ChangeLog", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7470e8d74c3e7d4d224bdff66160ac699f9c7170/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7470e8d74c3e7d4d224bdff66160ac699f9c7170/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7470e8d74c3e7d4d224bdff66160ac699f9c7170", "patch": "@@ -23,7 +23,7 @@\n \tstart_sequence_for_rtl_expr, not start_sequence.\n \t* expr.c (expand_expr, case RTL_EXPR): Don't call\n \tpreserve_rtl_expr_result or free_temps_for_rtl_expr.\n-\t(assign_stack_temp_for_type): Don't set rtl_expr.\n+\t* function.c (assign_stack_temp_for_type): Don't set rtl_expr.\n \t(preserve_rtl_expr_result): Remove.\n \t(free_temps_for_rtl_expr): Likewise.\n \t(pop_temp_slots): Likewise."}, {"sha": "df5d2477a4f88a1ac08c493a5c2294c674eec7cb", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 50, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7470e8d74c3e7d4d224bdff66160ac699f9c7170/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7470e8d74c3e7d4d224bdff66160ac699f9c7170/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=7470e8d74c3e7d4d224bdff66160ac699f9c7170", "patch": "@@ -708,7 +708,6 @@ assign_stack_temp_for_type (mode, size, keep, type)\n \t\t\t\t\t\t    rounded_size));\n \t      p->align = best_p->align;\n \t      p->address = 0;\n-\t      p->rtl_expr = 0;\n \t      p->next = temp_slots;\n \t      temp_slots = p;\n \n@@ -776,7 +775,6 @@ assign_stack_temp_for_type (mode, size, keep, type)\n \n   p->in_use = 1;\n   p->addr_taken = 0;\n-  p->rtl_expr = seq_rtl_expr;\n \n   if (keep == 2)\n     {\n@@ -1129,34 +1127,6 @@ preserve_temp_slots (x)\n       p->level--;\n }\n \n-/* X is the result of an RTL_EXPR.  If it is a temporary slot associated\n-   with that RTL_EXPR, promote it into a temporary slot at the present\n-   level so it will not be freed when we free slots made in the\n-   RTL_EXPR.  */\n-\n-void\n-preserve_rtl_expr_result (x)\n-     rtx x;\n-{\n-  struct temp_slot *p;\n-\n-  /* If X is not in memory or is at a constant address, it cannot be in\n-     a temporary slot.  */\n-  if (x == 0 || GET_CODE (x) != MEM || CONSTANT_P (XEXP (x, 0)))\n-    return;\n-\n-  /* If we can find a match, move it to our level unless it is already at\n-     an upper level.  */\n-  p = find_temp_slot_from_address (XEXP (x, 0));\n-  if (p != 0)\n-    {\n-      p->level = MIN (p->level, temp_slot_level);\n-      p->rtl_expr = 0;\n-    }\n-\n-  return;\n-}\n-\n /* Free all temporaries used so far.  This is normally called at the end\n    of generating code for a statement.  Don't free any temporaries\n    currently in use for an RTL_EXPR that hasn't yet been emitted.\n@@ -1170,23 +1140,7 @@ free_temp_slots ()\n   struct temp_slot *p;\n \n   for (p = temp_slots; p; p = p->next)\n-    if (p->in_use && p->level == temp_slot_level && ! p->keep\n-\t&& p->rtl_expr == 0)\n-      p->in_use = 0;\n-\n-  combine_temp_slots ();\n-}\n-\n-/* Free all temporary slots used in T, an RTL_EXPR node.  */\n-\n-void\n-free_temps_for_rtl_expr (t)\n-     tree t;\n-{\n-  struct temp_slot *p;\n-\n-  for (p = temp_slots; p; p = p->next)\n-    if (p->rtl_expr == t)\n+    if (p->in_use && p->level == temp_slot_level && ! p->keep)\n       p->in_use = 0;\n \n   combine_temp_slots ();\n@@ -1264,7 +1218,7 @@ pop_temp_slots ()\n   struct temp_slot *p;\n \n   for (p = temp_slots; p; p = p->next)\n-    if (p->in_use && p->level == temp_slot_level && p->rtl_expr == 0)\n+    if (p->in_use && p->level == temp_slot_level)\n       p->in_use = 0;\n \n   combine_temp_slots ();\n@@ -6980,8 +6934,6 @@ mark_temp_slot (t)\n     {\n       ggc_mark_rtx (t->slot);\n       ggc_mark_rtx (t->address);\n-      ggc_mark_tree (t->rtl_expr);\n-\n       t = t->next;\n     }\n }"}]}