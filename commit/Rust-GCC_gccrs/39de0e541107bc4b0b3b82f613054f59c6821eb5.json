{"sha": "39de0e541107bc4b0b3b82f613054f59c6821eb5", "node_id": "C_kwDOANBUbNoAKDM5ZGUwZTU0MTEwN2JjNGIwYjNiODJmNjEzMDU0ZjU5YzY4MjFlYjU", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-11-22T14:51:16Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-11-23T21:23:24Z"}, "message": "libstdc++: Add effective-target for std::allocator implementation\n\nThis allows tests to be skipped if the std::allocator implementation is\nnot __gnu_cxx::new_allocator.\n\nThe 20_util/allocator/overaligned.cc test requires either C++17 or\nnew_allocator, otherwise we can't guarantee to return overaligned\nmemory.\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/18_support/50594.cc: Check effective target.\n\t* testsuite/20_util/allocator/1.cc: Likewise.\n\t* testsuite/20_util/allocator/overaligned.cc: Likewise.\n\t* testsuite/23_containers/unordered_map/96088.cc: Likewise.\n\t* testsuite/23_containers/unordered_multimap/96088.cc: Likewise.\n\t* testsuite/23_containers/unordered_multiset/96088.cc: Likewise.\n\t* testsuite/23_containers/unordered_set/96088.cc: Likewise.\n\t* testsuite/ext/throw_allocator/check_delete.cc: Likewise.\n\t* testsuite/ext/throw_allocator/check_new.cc: Likewise.\n\t* testsuite/lib/libstdc++.exp (check_effective_target_std_allocator_new):\n\tDefine new proc.", "tree": {"sha": "de02c6fefee5661c4a151905f93819b03c7d8c6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de02c6fefee5661c4a151905f93819b03c7d8c6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39de0e541107bc4b0b3b82f613054f59c6821eb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39de0e541107bc4b0b3b82f613054f59c6821eb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39de0e541107bc4b0b3b82f613054f59c6821eb5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39de0e541107bc4b0b3b82f613054f59c6821eb5/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16e95050f71e9fa408e9bd8ccd415b0e7adc66e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16e95050f71e9fa408e9bd8ccd415b0e7adc66e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16e95050f71e9fa408e9bd8ccd415b0e7adc66e5"}], "stats": {"total": 24, "additions": 19, "deletions": 5}, "files": [{"sha": "c15e704debe1a6e1f780d42b1fb9e9590ffba050", "filename": "libstdc++-v3/testsuite/18_support/50594.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39de0e541107bc4b0b3b82f613054f59c6821eb5/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2F50594.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39de0e541107bc4b0b3b82f613054f59c6821eb5/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2F50594.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2F50594.cc?ref=39de0e541107bc4b0b3b82f613054f59c6821eb5", "patch": "@@ -1,5 +1,6 @@\n // { dg-options \"-fwhole-program\" }\n // { dg-additional-options \"-static-libstdc++\" { target *-*-mingw* } }\n+// { dg-require-effective-target std_allocator_new }\n // { dg-xfail-run-if \"AIX operator new\" { powerpc-ibm-aix* } }\n \n // Copyright (C) 2011-2021 Free Software Foundation, Inc."}, {"sha": "79e223c13c2bb31c432987ea21c51906637f8e0e", "filename": "libstdc++-v3/testsuite/20_util/allocator/1.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39de0e541107bc4b0b3b82f613054f59c6821eb5/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39de0e541107bc4b0b3b82f613054f59c6821eb5/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2F1.cc?ref=39de0e541107bc4b0b3b82f613054f59c6821eb5", "patch": "@@ -17,6 +17,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// { dg-require-effective-target std_allocator_new }\n+\n // 20.4.1.1 allocator members\n \n #include <memory>\n@@ -35,7 +37,7 @@ struct gnu { };\n bool check_new = false;\n bool check_delete = false;\n \n-void* \n+void*\n operator new(std::size_t n) THROW(std::bad_alloc)\n {\n   check_new = true;\n@@ -59,9 +61,6 @@ void test01()\n {\n   std::allocator<gnu> obj;\n \n-  // NB: These should work for various size allocation and\n-  // deallocations.  Currently, they only work as expected for sizes >\n-  // _MAX_BYTES as defined in stl_alloc.h, which happes to be 128. \n   gnu* pobj = obj.allocate(256);\n   VERIFY( check_new );\n "}, {"sha": "8c90fcc0e92cbfe5e7661fef474cef9865a603eb", "filename": "libstdc++-v3/testsuite/20_util/allocator/overaligned.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39de0e541107bc4b0b3b82f613054f59c6821eb5/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2Foveraligned.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39de0e541107bc4b0b3b82f613054f59c6821eb5/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2Foveraligned.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2Foveraligned.cc?ref=39de0e541107bc4b0b3b82f613054f59c6821eb5", "patch": "@@ -16,7 +16,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-options \"-faligned-new\" }\n-// { dg-do run { target c++11 } }\n+// { dg-do run { target { c++11 && { c++17 || std_allocator_new } } } }\n // { dg-require-cstdint \"\" }\n \n #include <memory>"}, {"sha": "27c499ed34820bb9a4d8dd01c617c328e249caf4", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/96088.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39de0e541107bc4b0b3b82f613054f59c6821eb5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2F96088.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39de0e541107bc4b0b3b82f613054f59c6821eb5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2F96088.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2F96088.cc?ref=39de0e541107bc4b0b3b82f613054f59c6821eb5", "patch": "@@ -1,4 +1,5 @@\n // { dg-do run { target c++17 } }\n+// { dg-require-effective-target std_allocator_new }\n \n // Copyright (C) 2021 Free Software Foundation, Inc.\n //"}, {"sha": "eaadd08e7cab31c9856282638898aeab916f579c", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/96088.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39de0e541107bc4b0b3b82f613054f59c6821eb5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2F96088.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39de0e541107bc4b0b3b82f613054f59c6821eb5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2F96088.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2F96088.cc?ref=39de0e541107bc4b0b3b82f613054f59c6821eb5", "patch": "@@ -1,4 +1,5 @@\n // { dg-do run { target c++17 } }\n+// { dg-require-effective-target std_allocator_new }\n \n // Copyright (C) 2021 Free Software Foundation, Inc.\n //"}, {"sha": "aa137ec930207c610878a74d1d71c4f46eee17ac", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/96088.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39de0e541107bc4b0b3b82f613054f59c6821eb5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2F96088.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39de0e541107bc4b0b3b82f613054f59c6821eb5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2F96088.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2F96088.cc?ref=39de0e541107bc4b0b3b82f613054f59c6821eb5", "patch": "@@ -1,4 +1,5 @@\n // { dg-do run { target c++17 } }\n+// { dg-require-effective-target std_allocator_new }\n \n // Copyright (C) 2021 Free Software Foundation, Inc.\n //"}, {"sha": "3f0835ce501321548ee17a016c9e4dcacf84836f", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/96088.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39de0e541107bc4b0b3b82f613054f59c6821eb5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F96088.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39de0e541107bc4b0b3b82f613054f59c6821eb5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F96088.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F96088.cc?ref=39de0e541107bc4b0b3b82f613054f59c6821eb5", "patch": "@@ -1,4 +1,5 @@\n // { dg-do run { target c++17 } }\n+// { dg-require-effective-target std_allocator_new }\n \n // Copyright (C) 2021 Free Software Foundation, Inc.\n //"}, {"sha": "10e5c69edca34af3ed1b35121c8bb379d45557ec", "filename": "libstdc++-v3/testsuite/ext/throw_allocator/check_delete.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39de0e541107bc4b0b3b82f613054f59c6821eb5/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fcheck_delete.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39de0e541107bc4b0b3b82f613054f59c6821eb5/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fcheck_delete.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fcheck_delete.cc?ref=39de0e541107bc4b0b3b82f613054f59c6821eb5", "patch": "@@ -18,6 +18,7 @@\n \n // { dg-require-time \"\" }\n // { dg-require-cstdint \"\" }\n+// { dg-require-effective-target std_allocator_new }\n \n #include <cstdlib>\n #include <ext/throw_allocator.h>"}, {"sha": "4e2a7250e32f1cf685db53bb90ccc28f267c817d", "filename": "libstdc++-v3/testsuite/ext/throw_allocator/check_new.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39de0e541107bc4b0b3b82f613054f59c6821eb5/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fcheck_new.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39de0e541107bc4b0b3b82f613054f59c6821eb5/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fcheck_new.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fcheck_new.cc?ref=39de0e541107bc4b0b3b82f613054f59c6821eb5", "patch": "@@ -18,6 +18,7 @@\n \n // { dg-require-time \"\" }\n // { dg-require-cstdint \"\" }\n+// { dg-require-effective-target std_allocator_new }\n \n #include <cstdlib>\n #include <ext/throw_allocator.h>"}, {"sha": "4f4c78bed24984f736f0c5750ca46cb82bb9dcb1", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39de0e541107bc4b0b3b82f613054f59c6821eb5/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39de0e541107bc4b0b3b82f613054f59c6821eb5/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=39de0e541107bc4b0b3b82f613054f59c6821eb5", "patch": "@@ -1338,6 +1338,14 @@ proc check_effective_target_net_ts_ip { } {\n     }]\n }\n \n+# Return 1 if libstdc++ was built as --enable-libstdcxx-allocator=new\n+proc check_effective_target_std_allocator_new { } {\n+    return [check_v3_target_prop_cached et_std_alloc_new {\n+\tset cond \"_GLIBCXX_USE_ALLOCATOR_NEW\"\n+\treturn [v3_check_preprocessor_condition std_alloc_new $cond]\n+    }]\n+}\n+\n set additional_prunes \"\"\n \n if { [info exists env(GCC_RUNTEST_PARALLELIZE_DIR)] \\"}]}