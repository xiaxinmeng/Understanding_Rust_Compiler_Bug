{"sha": "a7e2b01447165237dad6df2fe2ee5c4fda6aed5e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdlMmIwMTQ0NzE2NTIzN2RhZDZkZjJmZTJlZTVjNGZkYTZhZWQ1ZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-02-15T23:41:50Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-02-15T23:41:50Z"}, "message": "(output_function_prologue): Add CRDS and MOTOROLA probe code.\n\n(print_operand): Do not output '.' if CRDS.\n\nFrom-SVN: r13648", "tree": {"sha": "7a4e5073914ca9898265f050839b5d4ba05d0b36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a4e5073914ca9898265f050839b5d4ba05d0b36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7e2b01447165237dad6df2fe2ee5c4fda6aed5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7e2b01447165237dad6df2fe2ee5c4fda6aed5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7e2b01447165237dad6df2fe2ee5c4fda6aed5e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7e2b01447165237dad6df2fe2ee5c4fda6aed5e/comments", "author": null, "committer": null, "parents": [{"sha": "4326c60500a68dd36e493f1a26917716f2b02911", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4326c60500a68dd36e493f1a26917716f2b02911", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4326c60500a68dd36e493f1a26917716f2b02911"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "28237e1408fc3a2b12cdef53fe9cea28c49f727c", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7e2b01447165237dad6df2fe2ee5c4fda6aed5e/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7e2b01447165237dad6df2fe2ee5c4fda6aed5e/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=a7e2b01447165237dad6df2fe2ee5c4fda6aed5e", "patch": "@@ -227,6 +227,7 @@ output_function_prologue (stream, size)\n \t\t}\n \t      else\n \t\t{\n+\t\t  /* asm_fprintf() cannot handle %. */\n #ifdef MOTOROLA\n \t\t  asm_fprintf (stream, \"\\tsubq.l %OI%d,%Rsp\\n\", fsize + 4);\n #else\n@@ -261,7 +262,6 @@ output_function_prologue (stream, size)\n \t    }\n \t  else\n \t    {\n-\t      /* asm_fprintf() cannot handle %. */\n #ifdef MOTOROLA\n \t      asm_fprintf (stream, \"\\tlea (%d,%Rsp),%Rsp\\n\", - (fsize + 4));\n #else\n@@ -320,7 +320,15 @@ output_function_prologue (stream, size)\n     }\n \n #if NEED_PROBE\n+#ifdef MOTOROLA\n+#ifdef CRDS\n+  asm_fprintf (stream, \"\\ttstl %d(%Rsp)\\n\", NEED_PROBE - num_saved_regs * 4);\n+#else\n+  asm_fprintf (stream, \"\\ttst.l %d(%Rsp)\\n\", NEED_PROBE - num_saved_regs * 4);\n+#endif\n+#else\n   asm_fprintf (stream, \"\\ttstl %Rsp@(%d)\\n\", NEED_PROBE - num_saved_regs * 4);\n+#endif\n #endif\n \n   if (num_saved_regs <= 2)\n@@ -701,6 +709,7 @@ output_function_epilogue (stream, size)\n \t{\n \t  /* On the CPU32 it is faster to use two addqw instructions to\n \t     add a small integer (8 < N <= 16) to a register. */\n+\t  /* asm_fprintf() cannot handle %. */\n #ifdef MOTOROLA\n \t  asm_fprintf (stream, \"\\taddq.w %OI8,%Rsp\\n\\taddq.w %OI%d,%Rsp\\n\",\n \t\t       fsize + 4);\n@@ -724,7 +733,6 @@ output_function_epilogue (stream, size)\n \t    }\n \t  else\n \t    {\n-\t      /* asm_fprintf() cannot handle %. */\n #ifdef MOTOROLA\n \t      asm_fprintf (stream, \"\\tlea (%d,%Rsp),%Rsp\\n\", fsize + 4);\n #else\n@@ -2302,7 +2310,7 @@ standard_sun_fpa_constant_p (x)\n    '@' for a reference to the top word on the stack:\n        sp@, (sp) or (%sp) depending on the style of syntax.\n    '#' for an immediate operand prefix (# in MIT and Motorola syntax\n-       but & in SGS syntax).\n+       but & in SGS syntax, $ in CRDS/UNOS syntax).\n    '!' for the cc register (used in an `and to cc' insn).\n    '$' for the letter `s' in an op code, but only on the 68040.\n    '&' for the letter `d' in an op code, but only on the 68040.\n@@ -2331,7 +2339,7 @@ print_operand (file, op, letter)\n \n   if (letter == '.')\n     {\n-#ifdef MOTOROLA\n+#if defined (MOTOROLA) && !defined (CRDS)\n       asm_fprintf (file, \".\");\n #endif\n     }"}]}