{"sha": "63be4b32d1a8ddf2a410a4fed55b05dfa3c51fcf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNiZTRiMzJkMWE4ZGRmMmE0MTBhNGZlZDU1YjA1ZGZhM2M1MWZjZg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-11-13T18:20:13Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-11-13T18:20:13Z"}, "message": "i386.c (ix86_expand_lround): Handle expand_simple_binop return value.\n\n2006-11-13  Richard Guenther  <rguenther@suse.de>\n\n\t* config/i386/i386.c (ix86_expand_lround): Handle expand_simple_binop\n\treturn value.\n\t(ix86_expand_lfloorceil): Likewise.\n\t(ix86_expand_rint): Likewise.\n\t(ix86_expand_floorceildf_32): Likewise.\n\t(ix86_expand_floorceil): Likewise.\n\t(ix86_expand_rounddf_32): Likewise.\n\t(ix86_expand_truncdf_32): Likewise.\n\t(ix86_expand_round): Likewise.\n\nFrom-SVN: r118769", "tree": {"sha": "7c345f2f2004ba2f402031ef050ab8585e3fe0ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c345f2f2004ba2f402031ef050ab8585e3fe0ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63be4b32d1a8ddf2a410a4fed55b05dfa3c51fcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63be4b32d1a8ddf2a410a4fed55b05dfa3c51fcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63be4b32d1a8ddf2a410a4fed55b05dfa3c51fcf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63be4b32d1a8ddf2a410a4fed55b05dfa3c51fcf/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "48ffd0efe9c1e90c519d83f2a221c25295546bb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48ffd0efe9c1e90c519d83f2a221c25295546bb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48ffd0efe9c1e90c519d83f2a221c25295546bb1"}], "stats": {"total": 73, "additions": 44, "deletions": 29}, "files": [{"sha": "846b71c2a26d91bb33d0844b0a21602cc4bee8d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63be4b32d1a8ddf2a410a4fed55b05dfa3c51fcf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63be4b32d1a8ddf2a410a4fed55b05dfa3c51fcf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=63be4b32d1a8ddf2a410a4fed55b05dfa3c51fcf", "patch": "@@ -1,3 +1,15 @@\n+2006-11-13  Richard Guenther  <rguenther@suse.de>\n+\n+\t* config/i386/i386.c (ix86_expand_lround): Handle expand_simple_binop\n+\treturn value.\n+\t(ix86_expand_lfloorceil): Likewise.\n+\t(ix86_expand_rint): Likewise.\n+\t(ix86_expand_floorceildf_32): Likewise.\n+\t(ix86_expand_floorceil): Likewise.\n+\t(ix86_expand_rounddf_32): Likewise.\n+\t(ix86_expand_truncdf_32): Likewise.\n+\t(ix86_expand_round): Likewise.\n+\n 2006-11-13  Carlos O'Donell  <carlos@codesourcery.com>\n \t    Mark Mitchell  <mark@codesourcery.com>\n "}, {"sha": "249b2b6b238e61c2c97cacdc04d6bba8b1702e37", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 32, "deletions": 29, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63be4b32d1a8ddf2a410a4fed55b05dfa3c51fcf/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63be4b32d1a8ddf2a410a4fed55b05dfa3c51fcf/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=63be4b32d1a8ddf2a410a4fed55b05dfa3c51fcf", "patch": "@@ -19448,7 +19448,7 @@ ix86_expand_lround (rtx op0, rtx op1)\n   ix86_sse_copysign_to_positive (adj, adj, force_reg (mode, op1), NULL_RTX);\n \n   /* adj = op1 + adj */\n-  expand_simple_binop (mode, PLUS, adj, op1, adj, 0, OPTAB_DIRECT);\n+  adj = expand_simple_binop (mode, PLUS, adj, op1, NULL_RTX, 0, OPTAB_DIRECT);\n \n   /* op0 = (imode)adj */\n   expand_fix (op0, adj, 0);\n@@ -19466,7 +19466,7 @@ ix86_expand_lfloorceil (rtx op0, rtx op1, bool do_floor)\n    */\n   enum machine_mode fmode = GET_MODE (op1);\n   enum machine_mode imode = GET_MODE (op0);\n-  rtx ireg, freg, label;\n+  rtx ireg, freg, label, tmp;\n \n   /* reg = (long)op1 */\n   ireg = gen_reg_rtx (imode);\n@@ -19479,8 +19479,10 @@ ix86_expand_lfloorceil (rtx op0, rtx op1, bool do_floor)\n   /* ireg = (freg > op1) ? ireg - 1 : ireg */\n   label = ix86_expand_sse_compare_and_jump (UNLE,\n \t\t\t\t\t    freg, op1, !do_floor);\n-  expand_simple_binop (imode, do_floor ? MINUS : PLUS,\n-                       ireg, const1_rtx, ireg, 0, OPTAB_DIRECT);\n+  tmp = expand_simple_binop (imode, do_floor ? MINUS : PLUS,\n+\t\t\t     ireg, const1_rtx, NULL_RTX, 0, OPTAB_DIRECT);\n+  emit_move_insn (ireg, tmp);\n+\n   emit_label (label);\n   LABEL_NUSES (label) = 1;\n \n@@ -19512,8 +19514,8 @@ ix86_expand_rint (rtx operand0, rtx operand1)\n   TWO52 = ix86_gen_TWO52 (mode);\n   label = ix86_expand_sse_compare_and_jump (UNLE, TWO52, xa, false);\n \n-  expand_simple_binop (mode, PLUS, xa, TWO52, xa, 0, OPTAB_DIRECT);\n-  expand_simple_binop (mode, MINUS, xa, TWO52, xa, 0, OPTAB_DIRECT);\n+  xa = expand_simple_binop (mode, PLUS, xa, TWO52, NULL_RTX, 0, OPTAB_DIRECT);\n+  xa = expand_simple_binop (mode, MINUS, xa, TWO52, xa, 0, OPTAB_DIRECT);\n \n   ix86_sse_copysign_to_positive (res, xa, res, mask);\n \n@@ -19559,8 +19561,8 @@ ix86_expand_floorceildf_32 (rtx operand0, rtx operand1, bool do_floor)\n   label = ix86_expand_sse_compare_and_jump (UNLE, TWO52, xa, false);\n \n   /* xa = xa + TWO52 - TWO52; */\n-  expand_simple_binop (mode, PLUS, xa, TWO52, xa, 0, OPTAB_DIRECT);\n-  expand_simple_binop (mode, MINUS, xa, TWO52, xa, 0, OPTAB_DIRECT);\n+  xa = expand_simple_binop (mode, PLUS, xa, TWO52, NULL_RTX, 0, OPTAB_DIRECT);\n+  xa = expand_simple_binop (mode, MINUS, xa, TWO52, xa, 0, OPTAB_DIRECT);\n \n   /* xa = copysign (xa, operand1) */\n   ix86_sse_copysign_to_positive (xa, xa, res, mask);\n@@ -19575,8 +19577,9 @@ ix86_expand_floorceildf_32 (rtx operand0, rtx operand1, bool do_floor)\n   emit_insn (gen_rtx_SET (VOIDmode, tmp,\n                           gen_rtx_AND (mode, one, tmp)));\n   /* We always need to subtract here to preserve signed zero.  */\n-  expand_simple_binop (mode, MINUS,\n-                       xa, tmp, res, 0, OPTAB_DIRECT);\n+  tmp = expand_simple_binop (mode, MINUS,\n+\t\t\t     xa, tmp, NULL_RTX, 0, OPTAB_DIRECT);\n+  emit_move_insn (res, tmp);\n \n   emit_label (label);\n   LABEL_NUSES (label) = 1;\n@@ -19632,8 +19635,9 @@ ix86_expand_floorceil (rtx operand0, rtx operand1, bool do_floor)\n   tmp = ix86_expand_sse_compare_mask (UNGT, xa, res, !do_floor);\n   emit_insn (gen_rtx_SET (VOIDmode, tmp,\n                           gen_rtx_AND (mode, one, tmp)));\n-  expand_simple_binop (mode, do_floor ? MINUS : PLUS,\n-                       xa, tmp, res, 0, OPTAB_DIRECT);\n+  tmp = expand_simple_binop (mode, do_floor ? MINUS : PLUS,\n+\t\t\t     xa, tmp, NULL_RTX, 0, OPTAB_DIRECT);\n+  emit_move_insn (res, tmp);\n \n   if (HONOR_SIGNED_ZEROS (mode))\n     ix86_sse_copysign_to_positive (res, res, force_reg (mode, operand1), mask);\n@@ -19683,33 +19687,30 @@ ix86_expand_rounddf_32 (rtx operand0, rtx operand1)\n   label = ix86_expand_sse_compare_and_jump (UNLE, TWO52, xa, false);\n \n   /* xa2 = xa + TWO52 - TWO52; */\n-  xa2 = gen_reg_rtx (mode);\n-  expand_simple_binop (mode, PLUS, xa, TWO52, xa2, 0, OPTAB_DIRECT);\n-  expand_simple_binop (mode, MINUS, xa2, TWO52, xa2, 0, OPTAB_DIRECT);\n+  xa2 = expand_simple_binop (mode, PLUS, xa, TWO52, NULL_RTX, 0, OPTAB_DIRECT);\n+  xa2 = expand_simple_binop (mode, MINUS, xa2, TWO52, xa2, 0, OPTAB_DIRECT);\n \n   /* dxa = xa2 - xa; */\n-  dxa = gen_reg_rtx (mode);\n-  expand_simple_binop (mode, MINUS, xa2, xa, dxa, 0, OPTAB_DIRECT);\n+  dxa = expand_simple_binop (mode, MINUS, xa2, xa, NULL_RTX, 0, OPTAB_DIRECT);\n \n   /* generate 0.5, 1.0 and -0.5 */\n   half = force_reg (mode, const_double_from_real_value (dconsthalf, mode));\n-  one = gen_reg_rtx (mode);\n-  expand_simple_binop (mode, PLUS, half, half, one, 0, OPTAB_DIRECT);\n-  mhalf = gen_reg_rtx (mode);\n-  expand_simple_binop (mode, MINUS, half, one, mhalf, 0, OPTAB_DIRECT);\n+  one = expand_simple_binop (mode, PLUS, half, half, NULL_RTX, 0, OPTAB_DIRECT);\n+  mhalf = expand_simple_binop (mode, MINUS, half, one, NULL_RTX,\n+\t\t\t       0, OPTAB_DIRECT);\n \n   /* Compensate.  */\n   tmp = gen_reg_rtx (mode);\n   /* xa2 = xa2 - (dxa > 0.5 ? 1 : 0) */\n   tmp = ix86_expand_sse_compare_mask (UNGT, dxa, half, false);\n   emit_insn (gen_rtx_SET (VOIDmode, tmp,\n                           gen_rtx_AND (mode, one, tmp)));\n-  expand_simple_binop (mode, MINUS, xa2, tmp, xa2, 0, OPTAB_DIRECT);\n+  xa2 = expand_simple_binop (mode, MINUS, xa2, tmp, NULL_RTX, 0, OPTAB_DIRECT);\n   /* xa2 = xa2 + (dxa <= -0.5 ? 1 : 0) */\n   tmp = ix86_expand_sse_compare_mask (UNGE, mhalf, dxa, false);\n   emit_insn (gen_rtx_SET (VOIDmode, tmp,\n                           gen_rtx_AND (mode, one, tmp)));\n-  expand_simple_binop (mode, PLUS, xa2, tmp, xa2, 0, OPTAB_DIRECT);\n+  xa2 = expand_simple_binop (mode, PLUS, xa2, tmp, NULL_RTX, 0, OPTAB_DIRECT);\n \n   /* res = copysign (xa2, operand1) */\n   ix86_sse_copysign_to_positive (res, xa2, force_reg (mode, operand1), mask);\n@@ -19770,7 +19771,7 @@ void\n ix86_expand_truncdf_32 (rtx operand0, rtx operand1)\n {\n   enum machine_mode mode = GET_MODE (operand0);\n-  rtx xa, mask, TWO52, label, one, res, smask;\n+  rtx xa, mask, TWO52, label, one, res, smask, tmp;\n \n   /* C code for SSE variant we expand below.\n         double xa = fabs (x), x2;\n@@ -19798,8 +19799,9 @@ ix86_expand_truncdf_32 (rtx operand0, rtx operand1)\n   label = ix86_expand_sse_compare_and_jump (UNLE, TWO52, xa, false);\n \n   /* res = xa + TWO52 - TWO52; */\n-  expand_simple_binop (mode, PLUS, xa, TWO52, res, 0, OPTAB_DIRECT);\n-  expand_simple_binop (mode, MINUS, res, TWO52, res, 0, OPTAB_DIRECT);\n+  tmp = expand_simple_binop (mode, PLUS, xa, TWO52, NULL_RTX, 0, OPTAB_DIRECT);\n+  tmp = expand_simple_binop (mode, MINUS, tmp, TWO52, tmp, 0, OPTAB_DIRECT);\n+  emit_move_insn (res, tmp);\n \n   /* generate 1.0 */\n   one = force_reg (mode, const_double_from_real_value (dconst1, mode));\n@@ -19808,8 +19810,9 @@ ix86_expand_truncdf_32 (rtx operand0, rtx operand1)\n   mask = ix86_expand_sse_compare_mask (UNGT, res, xa, false);\n   emit_insn (gen_rtx_SET (VOIDmode, mask,\n                           gen_rtx_AND (mode, mask, one)));\n-  expand_simple_binop (mode, MINUS,\n-                       res, mask, res, 0, OPTAB_DIRECT);\n+  tmp = expand_simple_binop (mode, MINUS,\n+\t\t\t     res, mask, NULL_RTX, 0, OPTAB_DIRECT);\n+  emit_move_insn (res, tmp);\n \n   /* res = copysign (res, operand1) */\n   ix86_sse_copysign_to_positive (res, res, force_reg (mode, operand1), smask);\n@@ -19853,7 +19856,7 @@ ix86_expand_round (rtx operand0, rtx operand1)\n \n   /* xa = xa + 0.5 */\n   half = force_reg (mode, const_double_from_real_value (pred_half, mode));\n-  expand_simple_binop (mode, PLUS, xa, half, xa, 0, OPTAB_DIRECT);\n+  xa = expand_simple_binop (mode, PLUS, xa, half, NULL_RTX, 0, OPTAB_DIRECT);\n \n   /* xa = (double)(int64_t)xa */\n   xi = gen_reg_rtx (mode == DFmode ? DImode : SImode);"}]}