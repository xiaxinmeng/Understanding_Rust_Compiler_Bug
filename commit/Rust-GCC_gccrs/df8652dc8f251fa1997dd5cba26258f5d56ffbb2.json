{"sha": "df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY4NjUyZGM4ZjI1MWZhMTk5N2RkNWNiYTI2MjU4ZjVkNTZmZmJiMg==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargls@comcast.net", "date": "2005-12-17T15:41:15Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2005-12-17T15:41:15Z"}, "message": "decl.c (gfc_match_old_kind_spec,match_type_spec): Use gfc_std_notify to report nonstandard intrinsic type declarations.\n\n2005-12-17  Steven G. Kargl  <kargls@comcast.net>\n\n\t* decl.c (gfc_match_old_kind_spec,match_type_spec): Use gfc_std_notify\n\tto report nonstandard intrinsic type declarations.\n\n\t* gfortran.dg/imag_1.f: Fix nonstandard type declarations.\n\t* gfortran.dg/nested_modules_1.f90: Ditto.\n\t* gfortran.dg/hollerith_f95.f90: Ditto.\n\t* gfortran.dg/select_5.f90: Ditto.\n\t* gfortran.dg/secnds.f: Ditto.\n\t* gfortran.dg/hollerith2.f90: Ditto.\n\t* gfortran.dg/imag_2.f: Ditto.\n\t* gfortran.dg/ftell_2.f90: Ditto.\n\t* gfortran.dg/malloc_free_1.f90: Ditto.\n\t* gfortran.dg/logint-1.f: Ditto.\n\t* gfortran.dg/recursive_statement_functions.f90: Ditto.\n\t* gfortran.dg/e_d_fmt.f90: Ditto.\n\t* gfortran.dg/hollerith_legacy.f90: Ditto.\n\t* gfortran.dg/logint-2.f: Ditto.\n\t* gfortran.dg/enum_5.f90: Ditto.\n\t* gfortran.dg/f2c_2.f90: Ditto.\n\t* gfortran.dg/pr17143.f90: Ditto.\n\t* gfortran.dg/namelist_14.f90: Ditto.\n\t* gfortran.dg/logint-3.f: Ditto.\n\t* gfortran.dg/spread_scalar_source.f90: Ditto.\n\t* gfortran.dg/fmt_read_bz_bn.f90: Ditto.\n\t* gfortran.dg/namelist_11.f: Ditto.\n\t* gfortran.dg/g77/intrinsic-unix-bessel.f: Ditto.\n\t* gfortran.dg/g77/20010519-1.f\n\t* gfortran.dg/g77/alpha1.f: Ditto.\n\t* gfortran.dg/g77/990115-1.f: Ditto.\n\t* gfortran.dg/g77/erfc.f: Ditto.\n\t* gfortran.dg/g77/19990313-3.f: Ditto.\n\t* gfortran.dg/g77/f90-intrinsic-numeric.f: Ditto.\n\t* gfortran.dg/g77/20010426.f: Ditto.\n\t* gfortran.dg/g77/19990313-0.f: Ditto.\n\t* gfortran.dg/g77/f90-intrinsic-mathematical.f: Ditto.\n\t* gfortran.dg/g77/20000629-1.f: Ditto.\n\t* gfortran.dg/g77/970125-0.f: Ditto.\n\t* gfortran.dg/g77/8485.f: Ditto.\n\t* gfortran.dg/g77/f90-intrinsic-bit.f: Ditto.\n\t* gfortran.dg/g77/19990313-1.f: Ditto.\n\t* gfortran.dg/g77/int8421.f: Ditto.\n\t* gfortran.dg/g77/19990305-0.f: Ditto.\n\t* gfortran.dg/g77/947.f: Ditto.\n\t* gfortran.dg/g77/19990905-2.f: Ditto.\n\t* gfortran.dg/g77/cabs.f: Ditto.\n\t* gfortran.dg/g77/19990313-2.f: Ditto.\n\t* gfortran.dg/g77/20020307-1.f: Ditto.\n\t* gfortran.dg/g77/dcomplex.f: Ditto.\n\t* gfortran.dg/g77/19990502-1.f: Ditto.\n\t* gfortran.dg/g77/19981216-0.f: Ditto.\n\t* gfortran.dg/common_4.f90: Ditto.\n\t* gfortran.dg/entry_4.f90: Ditto.\n\t* gfortran.dg/equiv_constraint_2.f90: Ditto.\n\t* gfortran.dg/g77_intrinsics_funcs.f: Ditto.\n\t* gfortran.dg/namelist_12.f: Ditto.\n\t* gfortran.dg/scale_1.f90: Ditto.\n\t* gfortran.dg/modulo_1.f90\n\t* gfortran.dg/hollerith.f90: Ditto.\n\t* gfortran.dg/direct_io_3.f90: Ditto.\n\t* gfortran.dg/ftell_1.f90: Ditto.: Ditto.\n\t* gfortran.dg/gnu_logical_1.F: Ditto.\n\t* gfortran.dg/unf_io_convert_1.f90: Ditto.\n\t* gfortran.dg/assign_1.f90: Ditto.\n\t* gfortran.dg/g77_intrinsics_sub.f: Ditto.\n\t* gfortran.dg/pr23095.f: Ditto.\n\t* gfortran.dg/read_float_1.f90: Ditto.\n\nFrom-SVN: r108715", "tree": {"sha": "384db9ffc1ce7fb6673696c43fb2354ed60c3005", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/384db9ffc1ce7fb6673696c43fb2354ed60c3005"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/comments", "author": null, "committer": null, "parents": [{"sha": "ad816b52a4de81b2cd0c1ce44347b2d6574bf19d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad816b52a4de81b2cd0c1ce44347b2d6574bf19d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad816b52a4de81b2cd0c1ce44347b2d6574bf19d"}], "stats": {"total": 879, "additions": 483, "deletions": 396}, "files": [{"sha": "882332dffa13decf80b4133bfbccd73b911cb01e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -1,3 +1,8 @@\n+2005-12-17  Steven G. Kargl  <kargls@comcast.net>\n+\n+\t* decl.c (gfc_match_old_kind_spec,match_type_spec): Use gfc_std_notify\n+\tto report nonstandard intrinsic type declarations.\n+\n 2005-12-16  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/24268"}, {"sha": "1358cdcfb892a8885581e4ee617f930c42e46d0a", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -1311,6 +1311,10 @@ gfc_match_old_kind_spec (gfc_typespec * ts)\n       return MATCH_ERROR;\n     }\n \n+  if (gfc_notify_std (GFC_STD_GNU, \"Nonstandard type declaration %s*%d at %C\",\n+\t\t      gfc_basic_typename (ts->type), original_kind) == FAILURE)\n+    return MATCH_ERROR;\n+\n   return MATCH_YES;\n }\n \n@@ -1616,6 +1620,10 @@ match_type_spec (gfc_typespec * ts, int implicit_flag)\n \n   if (gfc_match (\" double complex\") == MATCH_YES)\n     {\n+      if (gfc_notify_std (GFC_STD_GNU, \"DOUBLE COMPLEX at %C does not \"\n+\t\t\t  \"conform to the Fortran 95 standard\") == FAILURE)\n+\treturn MATCH_ERROR;\n+\n       ts->type = BT_COMPLEX;\n       ts->kind = gfc_default_double_kind;\n       return MATCH_YES;"}, {"sha": "3525d325e88ee88f1e1e330bc8c45845028bf3b9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -1,3 +1,69 @@\n+2005-12-17  Steven G. Kargl  <kargls@comcast.net>\n+\n+\t* gfortran.dg/imag_1.f: Fix nonstandard type declarations.\n+\t* gfortran.dg/nested_modules_1.f90: Ditto.\n+\t* gfortran.dg/hollerith_f95.f90: Ditto.\n+\t* gfortran.dg/select_5.f90: Ditto.\n+\t* gfortran.dg/secnds.f: Ditto.\n+\t* gfortran.dg/hollerith2.f90: Ditto.\n+\t* gfortran.dg/imag_2.f: Ditto.\n+\t* gfortran.dg/ftell_2.f90: Ditto.\n+\t* gfortran.dg/malloc_free_1.f90: Ditto.\n+\t* gfortran.dg/logint-1.f: Ditto.\n+\t* gfortran.dg/recursive_statement_functions.f90: Ditto.\n+\t* gfortran.dg/e_d_fmt.f90: Ditto.\n+\t* gfortran.dg/hollerith_legacy.f90: Ditto.\n+\t* gfortran.dg/logint-2.f: Ditto.\n+\t* gfortran.dg/enum_5.f90: Ditto.\n+\t* gfortran.dg/f2c_2.f90: Ditto.\n+\t* gfortran.dg/pr17143.f90: Ditto.\n+\t* gfortran.dg/namelist_14.f90: Ditto.\n+\t* gfortran.dg/logint-3.f: Ditto.\n+\t* gfortran.dg/spread_scalar_source.f90: Ditto.\n+\t* gfortran.dg/fmt_read_bz_bn.f90: Ditto.\n+\t* gfortran.dg/namelist_11.f: Ditto.\n+\t* gfortran.dg/g77/intrinsic-unix-bessel.f: Ditto.\n+\t* gfortran.dg/g77/20010519-1.f\n+\t* gfortran.dg/g77/alpha1.f: Ditto.\n+\t* gfortran.dg/g77/990115-1.f: Ditto.\n+\t* gfortran.dg/g77/erfc.f: Ditto.\n+\t* gfortran.dg/g77/19990313-3.f: Ditto.\n+\t* gfortran.dg/g77/f90-intrinsic-numeric.f: Ditto.\n+\t* gfortran.dg/g77/20010426.f: Ditto.\n+\t* gfortran.dg/g77/19990313-0.f: Ditto.\n+\t* gfortran.dg/g77/f90-intrinsic-mathematical.f: Ditto.\n+\t* gfortran.dg/g77/20000629-1.f: Ditto.\n+\t* gfortran.dg/g77/970125-0.f: Ditto.\n+\t* gfortran.dg/g77/8485.f: Ditto.\n+\t* gfortran.dg/g77/f90-intrinsic-bit.f: Ditto.\n+\t* gfortran.dg/g77/19990313-1.f: Ditto.\n+\t* gfortran.dg/g77/int8421.f: Ditto.\n+\t* gfortran.dg/g77/19990305-0.f: Ditto.\n+\t* gfortran.dg/g77/947.f: Ditto.\n+\t* gfortran.dg/g77/19990905-2.f: Ditto.\n+\t* gfortran.dg/g77/cabs.f: Ditto.\n+\t* gfortran.dg/g77/19990313-2.f: Ditto.\n+\t* gfortran.dg/g77/20020307-1.f: Ditto.\n+\t* gfortran.dg/g77/dcomplex.f: Ditto.\n+\t* gfortran.dg/g77/19990502-1.f: Ditto.\n+\t* gfortran.dg/g77/19981216-0.f: Ditto.\n+\t* gfortran.dg/common_4.f90: Ditto.\n+\t* gfortran.dg/entry_4.f90: Ditto.\n+\t* gfortran.dg/equiv_constraint_2.f90: Ditto.\n+\t* gfortran.dg/g77_intrinsics_funcs.f: Ditto.\n+\t* gfortran.dg/namelist_12.f: Ditto.\n+\t* gfortran.dg/scale_1.f90: Ditto.\n+\t* gfortran.dg/modulo_1.f90\n+\t* gfortran.dg/hollerith.f90: Ditto.\n+\t* gfortran.dg/direct_io_3.f90: Ditto.\n+\t* gfortran.dg/ftell_1.f90: Ditto.: Ditto.\n+\t* gfortran.dg/gnu_logical_1.F: Ditto.\n+\t* gfortran.dg/unf_io_convert_1.f90: Ditto.\n+\t* gfortran.dg/assign_1.f90: Ditto.\n+\t* gfortran.dg/g77_intrinsics_sub.f: Ditto.\n+\t* gfortran.dg/pr23095.f: Ditto.\n+\t* gfortran.dg/read_float_1.f90: Ditto.\n+\n 2005-12-17  Andreas Jaeger  <aj@suse.de>\n \n \t* gcc.dg/attr-weakref-1.c: Do not run on darwin."}, {"sha": "81aaeff2d324152b3275d7314340b7f6cd1d0b74", "filename": "gcc/testsuite/gfortran.dg/assign_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fassign_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fassign_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassign_1.f90?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -1,7 +1,7 @@\n ! { dg-do compile }\n ! Option passed to avoid excess errors from obsolete warning\n ! { dg-options \"-w\" }\n-      integer*4 i(5)\n+      integer i(5)\n       assign 1000 to i   ! { dg-error \"scalar default INTEGER\" }\n  1000 continue\n       end"}, {"sha": "cde2e27a8c3b1559fa0b830749adbbc15fb737c0", "filename": "gcc/testsuite/gfortran.dg/common_4.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_4.f90?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -4,16 +4,16 @@\n ! Check misaligned common blocks.\n program prog\n   common /block/ a, b, c\n-  integer*1 a\n-  integer*4 b, c\n+  integer(kind=1) a\n+  integer b, c\n   a = 1\n   b = HUGE(b)\n   c = 2\n   call foo\n end program\n subroutine foo\n   common /block/ a, b, c\n-  integer*1 a\n-  integer*4 b, c\n+  integer(kind=1) a\n+  integer b, c\n   if (a .ne. 1 .or. b .ne. HUGE(b) .or. c .ne. 2) call abort\n end subroutine"}, {"sha": "03cbf39b0bf273aaeb51c699ac1c7a34e926711b", "filename": "gcc/testsuite/gfortran.dg/direct_io_3.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fdirect_io_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fdirect_io_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdirect_io_3.f90?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -2,7 +2,7 @@\n ! PR 18710 : We used to not read and write the imaginary part of \n ! complex numbers\n        COMPLEX C, D\n-       DOUBLE COMPLEX E, F\n+       COMPLEX(KIND=8) E, F\n \n        OPEN(UNIT=9,FILE='PR18710',ACCESS='DIRECT',RECL=132)\n "}, {"sha": "d463d89d6f13266124d6a9a919678559d5ba1d88", "filename": "gcc/testsuite/gfortran.dg/e_d_fmt.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fe_d_fmt.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fe_d_fmt.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fe_d_fmt.f90?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -2,7 +2,7 @@\n ! Verify that the D format uses 'D' as the exponent character.\n !   \"     \"    \"  E   \"     \"   'E' \"   \"     \"         \" \n CHARACTER*10 c1, c2\n-REAL*8 r\n+REAL(kind=8) r\n r = 1.0\n write(c1,\"(e9.2)\") r\n write(c2,\"(d9.2)\") r"}, {"sha": "5a26c26bd4c172e5ca9db34efbe7c91e1ca427bf", "filename": "gcc/testsuite/gfortran.dg/entry_4.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_4.f90?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -17,8 +17,8 @@ function f2 ()\n entry e2 ()\n e2 (:, :, :) = 2\n end function\n-integer*8 function f3 ()\t\t! { dg-error \"can't be of type\" }\n-complex*16 e3\t\t\t\t! { dg-error \"can't be of type\" }\n+integer(kind=8) function f3 ()\t\t! { dg-error \"can't be of type\" }\n+complex(kind=8) e3\t\t        ! { dg-error \"can't be of type\" }\n f3 = 1\n return\n entry e3 ()"}, {"sha": "9ff2efa9c5a47690c1119d43853287e7382cb8de", "filename": "gcc/testsuite/gfortran.dg/enum_5.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fenum_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fenum_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fenum_5.f90?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -6,7 +6,7 @@ program main\n   integer :: i = 1\n \n   enum, bind (c)  ! { dg-warning \"New in Fortran 2003\" } \n-    enumerator :: red, black = i  ! { dg-error \"cannot appear\" }\n+    enumerator :: red, black = i  ! { dg-error \"is a variable\" }\n     enumerator :: blue = 1  \n   end enum junk  ! { dg-error \"Syntax error\" }\n "}, {"sha": "d721f967137deda435ae9b84f2b614c211574110", "filename": "gcc/testsuite/gfortran.dg/equiv_constraint_2.f90", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fequiv_constraint_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fequiv_constraint_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fequiv_constraint_2.f90?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -8,22 +8,22 @@\n !\n   type   :: numeric_type\n     sequence\n-    integer  :: i\n-    real     :: x\n-    real*8   :: d\n-    complex  :: z\n-    logical  :: l\n+    integer      :: i\n+    real         :: x\n+    real(kind=8) :: d\n+    complex      :: z\n+    logical      :: l\n   end type numeric_type\n \n   type (numeric_type) :: my_num, thy_num\n \n   type   :: numeric_type2\n     sequence\n-    integer  :: i\n-    real     :: x\n-    real*8   :: d\n-    complex  :: z\n-    logical  :: l\n+    integer      :: i\n+    real         :: x\n+    real(kind=8) :: d\n+    complex      :: z\n+    logical      :: l\n   end type numeric_type2\n \n   type (numeric_type2) :: his_num\n@@ -38,16 +38,16 @@\n \n   type       :: mixed_type\n     sequence\n-    integer*4 :: i(4)\n+    integer     :: i(4)\n     character*4 :: cha (6)\n   end type mixed_type\n \n   type (mixed_type) ::  my_mixed, thy_mixed\n \n   character(len=4) :: ch\n-  integer :: num\n-  integer*8 :: non_def\n-  complex*16 :: my_z, thy_z\n+  integer         :: num\n+  integer(kind=8) :: non_def\n+  complex(kind=8) :: my_z, thy_z\n \n ! Permitted: character with character sequence\n !            numeric with numeric sequence"}, {"sha": "51556894b7da1a26bc6a2c225de4f64c5ae6d8bd", "filename": "gcc/testsuite/gfortran.dg/f2c_2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Ff2c_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Ff2c_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ff2c_2.f90?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -2,7 +2,7 @@\n ! -ff2c\n !\n ! Once the library has support for f2c calling conventions (i.e. passing\n-! a REAL*4 or COMPLEX-valued intrinsic as procedure argument works), we\n+! a REAL(kind=4) or COMPLEX-valued intrinsic as procedure argument works), we\n ! can simply add -ff2c to the list of options to cycle through, and get\n ! complete coverage.  As of 2005-03-05 this doesn't work.\n ! { dg-do run }"}, {"sha": "5cda4bbad387aae3f00c841abb16574e9cf4e75a", "filename": "gcc/testsuite/gfortran.dg/fmt_read_bz_bn.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_read_bz_bn.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_read_bz_bn.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_read_bz_bn.f90?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -6,7 +6,7 @@ program test_bn\n         \n integer I1(2,2), I2(2,2,2)\n real A1(5)\n-real*8 A2(0:3)\n+real(kind=8) A2(0:3)\n character*80 :: IDATA1=\"111 2 2 3 3. 3E-1  44 5 5 6 . 67 . 78 8. 8E-1\"\n character*80 :: IDATA2=\"2345 1 34512 45123 51234 2345 1 34512 45123 5\"\n character*80 :: IDATA3=\"-8.0D0  1.0D-4  0.50D0  0.250D0\""}, {"sha": "4f617acb0f48142a01ff2d7791b488f03dfd1759", "filename": "gcc/testsuite/gfortran.dg/ftell_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fftell_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fftell_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fftell_1.f90?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do run }\n-  integer*8 o, o2\n+  integer(kind=8) o, o2\n \n   open (10, status=\"scratch\")\n   call ftell (10, o)"}, {"sha": "ec7c96c3da4c16e0121341c2880d463b05708923", "filename": "gcc/testsuite/gfortran.dg/ftell_2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fftell_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fftell_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fftell_2.f90?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do run }\n-  integer*8 o\n+  integer(kind=8) o\n   open (10, status=\"scratch\")\n   if (ftell(10) /= 0) call abort\n   write (10,\"(A)\") \"1234567\""}, {"sha": "118c321438ff848502b1e498533554dc34eede59", "filename": "gcc/testsuite/gfortran.dg/g77/19981216-0.f", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19981216-0.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19981216-0.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19981216-0.f?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -24,7 +24,7 @@\n * -------------------------------------------\n         PROGRAM WAP\n \n-        integer*2  ios\n+        integer(kind=8)  ios\n         character*80  name\n \n         name = 'blah'\n@@ -34,7 +34,7 @@ PROGRAM WAP\n       END\n * -------------------------------------------\n * \n-* The problem seems to be caused by the \"integer*2 ios\" declaration.\n+* The problem seems to be caused by the \"integer(kind=2) ios\" declaration.\n * So far I solved it by simply using a plain integer instead.\n * \n * I'm running gcc on a Linux system compiled/installed"}, {"sha": "056d2b7a3a12d5d7619a6ce93d85caec26aef480", "filename": "gcc/testsuite/gfortran.dg/g77/19990305-0.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990305-0.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990305-0.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990305-0.f?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -34,7 +34,7 @@ FUNCTION HWUCI2(A,B,Y0)\n C     Integral  LOG(A-EPSI-BY(1-Y))/(Y-Y0)\n C-----------------------------------------------------------------------\n       IMPLICIT NONE\n-      DOUBLE COMPLEX HWUCI2,HWULI2,EPSI,Y1,Y2,Z1,Z2,Z3,Z4\n+      complex(kind=8) HWUCI2,HWULI2,EPSI,Y1,Y2,Z1,Z2,Z3,Z4\n       DOUBLE PRECISION A,B,Y0,ZERO,ONE,FOUR,HALF\n       EXTERNAL HWULI2\n       COMMON/SMALL/EPSI"}, {"sha": "fd74351d24dbb2f9e7d5710be1f78b531735de2a", "filename": "gcc/testsuite/gfortran.dg/g77/19990313-0.f", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990313-0.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990313-0.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990313-0.f?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -8,11 +8,11 @@\n * User-Agent: Gnus/5.07007 (Pterodactyl Gnus v0.70) Emacs/20.3\n * X-UIDL: d442bafe961c2a6ec6904f492e05d7b0\n * \n-* ISTM that there is a real problem printing integer*8 (on x86):\n+* ISTM that there is a real problem printing integer(kind=8) (on x86):\n * \n * $ cat x.f\n *[modified for test suite]\n-        integer *8 foo, bar\n+        integer(kind=8) foo, bar\n         data r/4e10/\n         foo = 4e10\n         bar = r"}, {"sha": "a73ec4ea7dc2064b22ccfb06f7396673684e7ea0", "filename": "gcc/testsuite/gfortran.dg/g77/19990313-1.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990313-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990313-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990313-1.f?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -1,5 +1,5 @@\n c { dg-do run }\n-        integer *8 foo, bar\n+        integer(kind=8) foo, bar\n         double precision r\n         data r/4d10/\n         foo = 4d10"}, {"sha": "51f16685e21aa3f6253812734c126f33b4cec847", "filename": "gcc/testsuite/gfortran.dg/g77/19990313-2.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990313-2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990313-2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990313-2.f?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -1,5 +1,5 @@\n c { dg-do run }\n-       integer *8 foo, bar\n+       integer(kind=8) foo, bar\n        complex c\n         data c/(4e10,0)/\n         foo = 4e10"}, {"sha": "782f39568b1c605ec47c787dce35f72f937746e6", "filename": "gcc/testsuite/gfortran.dg/g77/19990313-3.f", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990313-3.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990313-3.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990313-3.f?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -1,6 +1,6 @@\n c { dg-do run }\n-        integer *8 foo, bar\n-        double complex c\n+        integer(kind=8) foo, bar\n+        complex(kind=8) c\n         data c/(4d10,0)/\n         foo = 4d10\n         bar = c"}, {"sha": "dde2769f40a6a14cbf3cdb3198a11b9f057622e7", "filename": "gcc/testsuite/gfortran.dg/g77/19990502-1.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990502-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990502-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990502-1.f?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -1,6 +1,6 @@\n c { dg-do compile }\n       SUBROUTINE G(IGAMS,IWRK,NADC,NCellsInY)\n-      INTEGER*2 IGAMS(2,NADC)\n+      INTEGER(kind=2) IGAMS(2,NADC)\n       in = 1\n       do while (in.le.nadc.and.IGAMS(2,in).le.in)\n       enddo"}, {"sha": "e0cc073976c29bf0329cf7b65a3a60594115f935", "filename": "gcc/testsuite/gfortran.dg/g77/19990905-2.f", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990905-2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990905-2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990905-2.f?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -4,7 +4,7 @@\n * Too small to worry about copyright issues, IMO, since it\n * doesn't do anything substantive.\n       SUBROUTINE OUTDNS(A,B,LCONV)\n-      IMPLICIT REAL*8(A-H,O-Z),INTEGER*4(I-N)\n+      IMPLICIT REAL(kind=8) (A-H,O-Z),INTEGER(I-N)\n       COMMON/ARRAYS/Z(64,8),AB(30,30),PAIRS(9,9),T(9,9),TEMP(9,9),C1(3),\n      >  C2(3),AA(30),BB(30)\n       EQUIVALENCE (X1,C1(1)),(Y1,C1(2)),(Z1,C1(3))\n@@ -13,7 +13,7 @@ SUBROUTINE OUTDNS(A,B,LCONV)\n      >  SHIFT,CONV,SCION,DIVERG,\n      >  IOPT,KCNDO,KINDO,KMINDO,I2EINT,KOHNO,KSLATE,\n      >  N,NG,NUMAT,NSEK,NELECS,NIT,OCCA,OCCB,NOLDAT,NOLDFN\n-      INTEGER*4 OCCA,OCCB\n+      INTEGER OCCA,OCCB\n       DIMENSION W(N),A(N,N),B(N,N)\n       DIMENSION BUF(100)\n       occb=5"}, {"sha": "e369efb4d5bb0230df57f4bd22155ef0378a841a", "filename": "gcc/testsuite/gfortran.dg/g77/20000629-1.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20000629-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20000629-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20000629-1.f?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -1,6 +1,6 @@\n c { dg-do compile }\n       SUBROUTINE MIST(N, BETA)\n-      IMPLICIT REAL*8 (A-H,O-Z)\n+      IMPLICIT REAL(kind=8) (A-H,O-Z)\n       INTEGER  IA, IQ, M1\n       DIMENSION BETA(N)\n       DO 80 IQ=1,M1"}, {"sha": "07bc7ea4118f5297f2230953a6991b808b5f49f3", "filename": "gcc/testsuite/gfortran.dg/g77/20010426.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20010426.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20010426.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20010426.f?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -1,7 +1,7 @@\n c { dg-do compile }\n       function f(c)\n       implicit none\n-      real*8 c, f\n+      real(kind=8) c, f\n       f = sqrt(c)\n       return\n       end"}, {"sha": "e9336f1b6ab68e51483ce24a3c8155b5647e890d", "filename": "gcc/testsuite/gfortran.dg/g77/20010519-1.f", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20010519-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20010519-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20010519-1.f?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -237,7 +237,7 @@ SUBROUTINE NMDIMB(X,Y,Z,NAT3,BNBND,BIMAG,LNOMA,AMASS,DDS,DDSCR,\n C-----------------------------------------------------------------------\n C-----------------------------------------------------------------------\n C:::##INCLUDE '~/charmm_fcm/number.fcm'\n-      REAL*8     ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX,\n+      REAL(KIND=8)     ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX,\n      &           SEVEN, EIGHT, NINE, TEN, ELEVEN, TWELVE, THIRTN,\n      &           FIFTN, NINETN, TWENTY, THIRTY\n C..##IF SINGLE\n@@ -249,7 +249,7 @@ SUBROUTINE NMDIMB(X,Y,Z,NAT3,BNBND,BIMAG,LNOMA,AMASS,DDS,DDSCR,\n      &           TWELVE = 12.D0, THIRTN = 13.D0, FIFTN  = 15.D0,\n      &           NINETN = 19.D0, TWENTY = 20.D0, THIRTY = 30.D0)\n C..##ENDIF\n-      REAL*8     FIFTY, SIXTY, SVNTY2, EIGHTY, NINETY, HUNDRD,\n+      REAL(KIND=8)     FIFTY, SIXTY, SVNTY2, EIGHTY, NINETY, HUNDRD,\n      &           ONE2TY, ONE8TY, THRHUN, THR6TY, NINE99, FIFHUN, THOSND,\n      &           FTHSND,MEGA\n C..##IF SINGLE\n@@ -260,9 +260,9 @@ SUBROUTINE NMDIMB(X,Y,Z,NAT3,BNBND,BIMAG,LNOMA,AMASS,DDS,DDSCR,\n      &           THR6TY=360.D0,   NINE99 = 999.D0,  FIFHUN = 1500.D0,\n      &           THOSND = 1000.D0,FTHSND = 5000.D0, MEGA   =   1.0D6)\n C..##ENDIF\n-      REAL*8     MINONE, MINTWO, MINSIX\n+      REAL(KIND=8)     MINONE, MINTWO, MINSIX\n       PARAMETER (MINONE = -1.D0,  MINTWO = -2.D0,  MINSIX = -6.D0)\n-      REAL*8     TENM20,TENM14,TENM8,TENM5,PT0001,PT0005,PT001,PT005,\n+      REAL(KIND=8) TENM20,TENM14,TENM8,TENM5,PT0001,PT0005,PT001,PT005,\n      &           PT01, PT02, PT05, PTONE, PT125, PT25, SIXTH, THIRD,\n      &           PTFOUR, PTSIX, HALF, PT75, PT9999, ONEPT5, TWOPT4\n C..##IF SINGLE\n@@ -276,14 +276,14 @@ SUBROUTINE NMDIMB(X,Y,Z,NAT3,BNBND,BIMAG,LNOMA,AMASS,DDS,DDSCR,\n      &           PTSIX  = 0.6D0,    PT75   = 0.75D0, PT9999 = 0.9999D0,\n      &           ONEPT5 = 1.5D0,    TWOPT4 = 2.4D0)\n C..##ENDIF\n-      REAL*8 ANUM,FMARK\n-      REAL*8 RSMALL,RBIG\n+      REAL(KIND=8) ANUM,FMARK\n+      REAL(KIND=8) RSMALL,RBIG\n C..##IF SINGLE\n C..##ELSE\n       PARAMETER (ANUM=9999.0D0, FMARK=-999.0D0)\n       PARAMETER (RSMALL=1.0D-10,RBIG=1.0D20)\n C..##ENDIF\n-      REAL*8 RPRECI,RBIGST\n+      REAL(KIND=8) RPRECI,RBIGST\n C..##IF VAX DEC\n C..##ELIF IBM\n C..##ELIF CRAY\n@@ -297,41 +297,41 @@ SUBROUTINE NMDIMB(X,Y,Z,NAT3,BNBND,BIMAG,LNOMA,AMASS,DDS,DDSCR,\n C-----------------------------------------------------------------------\n C-----------------------------------------------------------------------\n C:::##INCLUDE '~/charmm_fcm/consta.fcm'\n-      REAL*8 PI,RADDEG,DEGRAD,TWOPI\n+      REAL(KIND=8) PI,RADDEG,DEGRAD,TWOPI\n       PARAMETER(PI=3.141592653589793D0,TWOPI=2.0D0*PI)\n       PARAMETER (RADDEG=180.0D0/PI)\n       PARAMETER (DEGRAD=PI/180.0D0)\n-      REAL*8 COSMAX\n+      REAL(KIND=8) COSMAX\n       PARAMETER (COSMAX=0.9999999999D0)\n-      REAL*8 TIMFAC\n+      REAL(KIND=8) TIMFAC\n       PARAMETER (TIMFAC=4.88882129D-02)\n-      REAL*8 KBOLTZ\n+      REAL(KIND=8) KBOLTZ\n       PARAMETER (KBOLTZ=1.987191D-03)\n-      REAL*8 CCELEC\n+      REAL(KIND=8) CCELEC\n C..##IF AMBER\n C..##ELIF DISCOVER\n C..##ELSE\n       PARAMETER (CCELEC=332.0716D0)\n C..##ENDIF\n-      REAL*8 CNVFRQ\n+      REAL(KIND=8) CNVFRQ\n       PARAMETER (CNVFRQ=2045.5D0/(2.99793D0*6.28319D0))\n-      REAL*8 SPEEDL\n+      REAL(KIND=8) SPEEDL\n       PARAMETER (SPEEDL=2.99793D-02)\n-      REAL*8 ATMOSP\n+      REAL(KIND=8) ATMOSP\n       PARAMETER (ATMOSP=1.4584007D-05)\n-      REAL*8 PATMOS\n+      REAL(KIND=8) PATMOS\n       PARAMETER (PATMOS = 1.D0 / ATMOSP )\n-      REAL*8 BOHRR\n+      REAL(KIND=8) BOHRR\n       PARAMETER (BOHRR = 0.529177249D0 )\n-      REAL*8 TOKCAL\n+      REAL(KIND=8) TOKCAL\n       PARAMETER (TOKCAL = 627.5095D0 )\n C..##IF MMFF\n-      real*8 MDAKCAL\n+      REAL(KIND=8) MDAKCAL\n       parameter(MDAKCAL=143.9325D0)\n C..##ENDIF\n-      REAL*8 DEBYEC\n+      REAL(KIND=8) DEBYEC\n       PARAMETER ( DEBYEC = 2.541766D0 / BOHRR )\n-      REAL*8 ZEROC\n+      REAL(KIND=8) ZEROC\n       PARAMETER ( ZEROC = 298.15D0 )\n C-----------------------------------------------------------------------\n C-----------------------------------------------------------------------\n@@ -357,7 +357,7 @@ SUBROUTINE NMDIMB(X,Y,Z,NAT3,BNBND,BIMAG,LNOMA,AMASS,DDS,DDSCR,\n       LOGICAL     CHKPTR, EQST, EQSTA, EQSTWC, EQWDWC, DOTRIM, CHECQUE,\n      *            HYDROG, INITIA, LONE, LTSTEQ, ORDER, ORDER5,\n      *            ORDERR, USEDDT, QTOKDEL, QDIGIT, QALPHA\n-      REAL*8      DECODF, DOTVEC, GTRMF, LENVEC, NEXTF, RANDOM, GTRR8,\n+      REAL(KIND=8)      DECODF, DOTVEC, GTRMF, LENVEC, NEXTF, RANDOM, GTRR8,\n      *            RANUMB, R8VAL, RETVAL8, SUMVEC\n C..##IF ADUMB\n      *           ,UMFI\n@@ -403,7 +403,7 @@ SUBROUTINE NMDIMB(X,Y,Z,NAT3,BNBND,BIMAG,LNOMA,AMASS,DDS,DDSCR,\n       external LEQUIV, LPATH\n       external nbndx, nbnd2, nbnd3, NTERMA\n       external find_loc\n-      real*8   vangle, OOPNGL, TORNGL, ElementMass\n+      REAL(KIND=8)   vangle, OOPNGL, TORNGL, ElementMass\n       external vangle, OOPNGL, TORNGL, ElementMass\n C..##ENDIF\n C-----------------------------------------------------------------------\n@@ -468,7 +468,7 @@ SUBROUTINE NMDIMB(X,Y,Z,NAT3,BNBND,BIMAG,LNOMA,AMASS,DDS,DDSCR,\n C-----------------------------------------------------------------------\n C-----------------------------------------------------------------------\n C:::##INCLUDE '~/charmm_fcm/deriv.fcm'\n-      REAL*8 DX,DY,DZ\n+      REAL(KIND=8) DX,DY,DZ\n       COMMON /DERIVR/ DX(MAXAIM),DY(MAXAIM),DZ(MAXAIM)\n C..##IF SAVEFCM\n C..##ENDIF\n@@ -580,11 +580,11 @@ SUBROUTINE NMDIMB(X,Y,Z,NAT3,BNBND,BIMAG,LNOMA,AMASS,DDS,DDSCR,\n       COMMON /ANER/ CEPROP(LENENP), CETERM(LENENT), CEPRSS(LENENV)\n       LOGICAL  QEPROP, QETERM, QEPRSS\n       COMMON /QENER/ QEPROP(LENENP), QETERM(LENENT), QEPRSS(LENENV)\n-      REAL*8   EPROP, ETERM, EPRESS\n+      REAL(KIND=8)   EPROP, ETERM, EPRESS\n       COMMON /ENER/ EPROP(LENENP), ETERM(LENENT), EPRESS(LENENV)\n C..##IF SAVEFCM\n C..##ENDIF\n-      REAL*8   EPRPA, EPRP2A, EPRPP, EPRP2P,\n+      REAL(KIND=8)   EPRPA, EPRP2A, EPRPP, EPRP2P,\n      &         ETRMA, ETRM2A, ETRMP, ETRM2P,\n      &         EPRSA, EPRS2A, EPRSP, EPRS2P\n       COMMON /ENACCM/ EPRPA(LENENP), ETRMA(LENENT), EPRSA(LENENV),\n@@ -595,7 +595,7 @@ SUBROUTINE NMDIMB(X,Y,Z,NAT3,BNBND,BIMAG,LNOMA,AMASS,DDS,DDSCR,\n C..##ENDIF\n       INTEGER  ECALLS, TOT1ST, TOT2ND\n       COMMON /EMISCI/ ECALLS, TOT1ST, TOT2ND\n-      REAL*8   EOLD, FITA, DRIFTA, EAT0A, CORRA, FITP, DRIFTP,\n+      REAL(KIND=8)   EOLD, FITA, DRIFTA, EAT0A, CORRA, FITP, DRIFTP,\n      &         EAT0P, CORRP\n       COMMON /EMISCR/ EOLD, FITA, DRIFTA, EAT0A, CORRA,\n      &                     FITP, DRIFTP, EAT0P, CORRP\n@@ -612,12 +612,12 @@ SUBROUTINE NMDIMB(X,Y,Z,NAT3,BNBND,BIMAG,LNOMA,AMASS,DDS,DDSCR,\n C..##IF FLUCQ\n C..##ENDIF\n C..##IF TSM\n-      REAL*8 TSMTRM(LENENT),TSMTMP(LENENT)\n+      REAL(KIND=8) TSMTRM(LENENT),TSMTMP(LENENT)\n       COMMON /TSMENG/ TSMTRM,TSMTMP\n C...##IF SAVEFCM\n C...##ENDIF\n C..##ENDIF\n-      REAL*8 EHQBM\n+      REAL(KIND=8) EHQBM\n       LOGICAL HQBM\n       COMMON /HQBMVAR/HQBM\n C..##IF SAVEFCM\n@@ -666,12 +666,12 @@ SUBROUTINE NMDIMB(X,Y,Z,NAT3,BNBND,BIMAG,LNOMA,AMASS,DDS,DDSCR,\n       INTEGER INBCMP(*),JNBCMP(*),PARDIM\n       INTEGER ITMX,IUNMOD,IUNRMD,SAVF\n       INTEGER NBOND,IB(*),JB(*)\n-      REAL*8 X(*),Y(*),Z(*),AMASS(*),DDSCR(*)\n-      REAL*8 DDV(NAT3,*),PARDDV(PARDIM,*),DDM(*),DDS(*)\n-      REAL*8 DDF(*),PARDDF(*),DDEV(*),PARDDE(*)\n-      REAL*8 DD1BLK(*),DD1BLL(*),DD1CMP(*)\n-      REAL*8 TOLDIM,DDVALM\n-      REAL*8 PARFRQ,CUTF1\n+      REAL(KIND=8) X(*),Y(*),Z(*),AMASS(*),DDSCR(*)\n+      REAL(KIND=8) DDV(NAT3,*),PARDDV(PARDIM,*),DDM(*),DDS(*)\n+      REAL(KIND=8) DDF(*),PARDDF(*),DDEV(*),PARDDE(*)\n+      REAL(KIND=8) DD1BLK(*),DD1BLL(*),DD1CMP(*)\n+      REAL(KIND=8) TOLDIM,DDVALM\n+      REAL(KIND=8) PARFRQ,CUTF1\n       LOGICAL LNOMA,LRAISE,LSCI,LBIG\n C Local variables\n       INTEGER NATOM,NATP,NDIM,I,J,II,OLDFAS,OLDPRN,IUPD\n@@ -687,7 +687,7 @@ SUBROUTINE NMDIMB(X,Y,Z,NAT3,BNBND,BIMAG,LNOMA,AMASS,DDS,DDSCR,\n       INTEGER SCIFV1,SCIFV2,SCIFV3,SCIFV4,SCIFV6\n       INTEGER DRATQ,ERATQ,E2RATQ,BDRATQ,INRATQ\n       INTEGER I620,I640,I660,I700,I720,I760,I800,I840,I880,I920\n-      REAL*8 CVGMX,TOLER\n+      REAL(KIND=8) CVGMX,TOLER\n       LOGICAL LCARD,LAPPE,LPURG,LWDINI,QCALC,QMASWT,QMIX,QDIAG\n C Begin\n       QCALC=.TRUE."}, {"sha": "730c14d32865a99d37d6a537646de7780a669c2d", "filename": "gcc/testsuite/gfortran.dg/g77/20020307-1.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20020307-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20020307-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20020307-1.f?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -1,7 +1,7 @@\n c { dg-do compile }\n       SUBROUTINE SWEEP\n       PARAMETER(MAXDIM=4,MAXVEC=4**3*8,MAXT=20)\n-      REAL*8 B,W1,W2,BNORM,BINV,WT,W0,C1,C2,R1,R2\n+      REAL(KIND=8) B,W1,W2,BNORM,BINV,WT,W0,C1,C2,R1,R2\n       DIMENSION B(MAXVEC,0:3),W1(MAXVEC,0:3),W2(MAXVEC,0:3)\n       DIMENSION BNORM(MAXVEC),BINV(MAXVEC),WT(MAXVEC),W0(MAXVEC)\n       DIMENSION C1(MAXVEC),C2(MAXVEC),R1(MAXVEC),R2(MAXVEC)"}, {"sha": "ae5f0345107cfa5a2ca72b56be8413ab637769ba", "filename": "gcc/testsuite/gfortran.dg/g77/8485.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F8485.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F8485.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F8485.f?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -1,7 +1,7 @@\n c { dg-do compile }\n C      Extracted from PR fortran/8485\n        PARAMETER (PPMULT = 1.0E5)\n-       INTEGER*8 NWRONG\n+       INTEGER(kind=8) NWRONG\n        PARAMETER (NWRONG = 8)\n        PARAMETER (DDMULT = PPMULT * NWRONG)\n        PRINT 10, DDMULT"}, {"sha": "247c1a09e548118520192628c277e9ac4123cc72", "filename": "gcc/testsuite/gfortran.dg/g77/947.f", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F947.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F947.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F947.f?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -1,7 +1,7 @@\n c { dg-do run }\n       DIMENSION A(-5:5)\n-      INTEGER*1 IM5, IZ, IP5\n-      INTEGER*2 IM1, IP1\n+      INTEGER(kind=1) IM5, IZ, IP5\n+      INTEGER(kind=2) IM1, IP1\n       PARAMETER (IM5=-5, IM1=-1, IZ=0, IP1=1, IP5=5)\n       DATA A(IM5) /-5./, A(IM1) /-1./\n       DATA A(IZ)  /0./"}, {"sha": "656c4750abe412ab7d5af76172464b92aeee167a", "filename": "gcc/testsuite/gfortran.dg/g77/970125-0.f", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F970125-0.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F970125-0.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F970125-0.f?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -26,9 +26,9 @@\n \n c     Frontend bug fixed by JCB 1998-06-01 com.c &c changes.\n \n-        integer*4 i4\n-        integer*8 i8\n-        integer*8 max4\n+        integer i4\n+        integer(kind=8) i8\n+        integer(kind=8) max4\n         data max4/2147483647/\n         i4 = %loc(i4)\n         i8 = %loc(i8)\n@@ -39,7 +39,7 @@\n         end\n         subroutine foo(i4, i4a, i8, i8a)\n         integer(kind=7) i4a, i8a\n-        integer*8 i8\n+        integer(kind=8) i8\n         print *, i4, i4a\n         print *, i8, i8a\n         end"}, {"sha": "b38d55adf1a272760a94a64b29b24358398d2a16", "filename": "gcc/testsuite/gfortran.dg/g77/990115-1.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F990115-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F990115-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F990115-1.f?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -2,7 +2,7 @@\n C Derived from lapack\n       SUBROUTINE ZGELSX( M, N, NRHS, A, LDA, B, LDB, JPVT, RCOND, RANK,\n      $                   WORK, RWORK, INFO )\n-      COMPLEX*16         WORK( * )\n+      COMPLEX(kind=8)         WORK( * )\n c     Following declaration added on transfer to gfortran testsuite.\n c     It is present in original lapack source\n       integer rank"}, {"sha": "68947692d53871addce1256f20b288394b608816", "filename": "gcc/testsuite/gfortran.dg/g77/alpha1.f", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Falpha1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Falpha1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Falpha1.f?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -1,6 +1,6 @@\n c { dg-do compile }\n-      REAL*8 A,B,C\n-      REAL*4 RARRAY(19)\n+      REAL(kind=8) A,B,C\n+      REAL(kind=4) RARRAY(19)\n       DATA RARRAY /19*-1/\n       INTEGER BOTTOM,RIGHT\n       INTEGER IARRAY(19)"}, {"sha": "d40901216791b156ff794a4d5e97dd9504e268f9", "filename": "gcc/testsuite/gfortran.dg/g77/cabs.f", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fcabs.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fcabs.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fcabs.f?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -2,8 +2,8 @@\n       program cabs_1\n       complex      z0\n       real         r0\n-      complex*16   z1\n-      real*8       r1\n+      complex(kind=8)   z1\n+      real(kind=8)       r1\n \n       z0 = cmplx(3.,4.)\n       r0 = cabs(z0)"}, {"sha": "f25e7c570bd95aec737a93611ec93a1875e185be", "filename": "gcc/testsuite/gfortran.dg/g77/dcomplex.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fdcomplex.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fdcomplex.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fdcomplex.f?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -1,6 +1,6 @@\n c { dg-do run }\n       program foo\n-      complex*16      z0, z1, z2\n+      complex(kind=8)      z0, z1, z2\n \n       z0 = dcmplx(0.,.5)\n       z1 = 1./z0"}, {"sha": "9897162af3da7e0d8263f73b6caf1eea6b503709", "filename": "gcc/testsuite/gfortran.dg/g77/erfc.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Ferfc.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Ferfc.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Ferfc.f?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -1,7 +1,7 @@\n c { dg-do run }\n c============================================== test.f\n       real x, y\n-      real*8 x1, y1\n+      real(kind=8) x1, y1\n       x=0.\n       y = erfc(x)\n       if (y .ne. 1.) call abort"}, {"sha": "01436d1973da1dd3ce812d59da6c9205221b14c1", "filename": "gcc/testsuite/gfortran.dg/g77/f90-intrinsic-bit.f", "status": "modified", "additions": 159, "deletions": 150, "changes": 309, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Ff90-intrinsic-bit.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Ff90-intrinsic-bit.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Ff90-intrinsic-bit.f?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -12,9 +12,9 @@\n \n       logical fail\n       integer   i, i2, ia, i3\n-      integer*2 j, j2, j3, ja\n-      integer*1 k, k2, k3, ka\n-      integer*8 m, m2, m3, ma\n+      integer(kind=2) j, j2, j3, ja\n+      integer(kind=1) k, k2, k3, ka\n+      integer(kind=8) m, m2, m3, ma\n \n       common /flags/ fail\n       fail = .false.\n@@ -36,23 +36,23 @@\n          ja = ja + 1\n          j = ishft(j,-1)\n       end do\n-      call c_i2(BIT_SIZE(j),ja,'BIT_SIZE(integer*2)')\n+      call c_i2(BIT_SIZE(j),ja,'BIT_SIZE(integer(2))')\n       ka = 0\n       k = 0\n       k = not(k)\n       do while ( (k.ne.0) .and. (ka.lt.127) )\n          ka = ka + 1\n          k = ishft(k,-1)\n       end do\n-      call c_i1(BIT_SIZE(k),ka,'BIT_SIZE(integer*1)')\n+      call c_i1(BIT_SIZE(k),ka,'BIT_SIZE(integer(1))')\n       ma = 0\n       m = 0\n       m = not(m)\n       do while ( (m.ne.0) .and. (ma.lt.127) )\n          ma = ma + 1\n          m = ishft(m,-1)\n       end do\n-      call c_i8(BIT_SIZE(m),ma,'BIT_SIZE(integer*8)')\n+      call c_i8(BIT_SIZE(m),ma,'BIT_SIZE(integer(8))')\n \n c     BTEST  - Section 13.13.17\n       j  = 7\n@@ -62,21 +62,21 @@\n       m  = 7\n       m2 = 3\n       call c_l(BTEST(7,3),.true.,'BTEST(integer,integer)')\n-      call c_l(BTEST(7,j2),.true.,'BTEST(integer,integer*2)')\n-      call c_l(BTEST(7,k2),.true.,'BTEST(integer,integer*1)')\n-      call c_l(BTEST(7,m2),.true.,'BTEST(integer,integer*8)')\n-      call c_l(BTEST(j,3),.true.,'BTEST(integer*2,integer)')\n-      call c_l(BTEST(j,j2),.true.,'BTEST(integer*2,integer*2)')\n-      call c_l(BTEST(j,k2),.true.,'BTEST(integer*2,integer*1)')\n-      call c_l(BTEST(j,m2),.true.,'BTEST(integer*2,integer*8)')\n-      call c_l(BTEST(k,3),.true.,'BTEST(integer*1,integer)')\n-      call c_l(BTEST(k,j2),.true.,'BTEST(integer*1,integer*2)')\n-      call c_l(BTEST(k,k2),.true.,'BTEST(integer*1,integer*1)')\n-      call c_l(BTEST(k,m2),.true.,'BTEST(integer*1,integer*8)')\n-      call c_l(BTEST(m,3),.true.,'BTEST(integer*8,integer)')\n-      call c_l(BTEST(m,j2),.true.,'BTEST(integer*8,integer*2)')\n-      call c_l(BTEST(m,k2),.true.,'BTEST(integer*8,integer*1)')\n-      call c_l(BTEST(m,m2),.true.,'BTEST(integer*8,integer*8)')\n+      call c_l(BTEST(7,j2),.true.,'BTEST(integer,integer(2))')\n+      call c_l(BTEST(7,k2),.true.,'BTEST(integer,integer(1))')\n+      call c_l(BTEST(7,m2),.true.,'BTEST(integer,integer(8))')\n+      call c_l(BTEST(j,3),.true.,'BTEST(integer(2),integer)')\n+      call c_l(BTEST(j,j2),.true.,'BTEST(integer(2),integer(2))')\n+      call c_l(BTEST(j,k2),.true.,'BTEST(integer(2),integer(1))')\n+      call c_l(BTEST(j,m2),.true.,'BTEST(integer(2),integer(8))')\n+      call c_l(BTEST(k,3),.true.,'BTEST(integer(1),integer)')\n+      call c_l(BTEST(k,j2),.true.,'BTEST(integer(1),integer(2))')\n+      call c_l(BTEST(k,k2),.true.,'BTEST(integer(1),integer(1))')\n+      call c_l(BTEST(k,m2),.true.,'BTEST(integer(1),integer(8))')\n+      call c_l(BTEST(m,3),.true.,'BTEST(integer(8),integer)')\n+      call c_l(BTEST(m,j2),.true.,'BTEST(integer(8),integer(2))')\n+      call c_l(BTEST(m,k2),.true.,'BTEST(integer(8),integer(1))')\n+      call c_l(BTEST(m,m2),.true.,'BTEST(integer(8),integer(8))')\n  \n c     IAND   - Section 13.13.40\n       j  = 3\n@@ -89,9 +89,9 @@\n       m2 = 1\n       ma = 1\n       call c_i(IAND(3,1),1,'IAND(integer,integer)')\n-      call c_i2(IAND(j,j2),ja,'IAND(integer*2,integer*2)')\n-      call c_i1(IAND(k,k2),ka,'IAND(integer*1,integer*1)')\n-      call c_i8(IAND(m,m2),ma,'IAND(integer*8,integer*8)')\n+      call c_i2(IAND(j,j2),ja,'IAND(integer(2),integer(2)')\n+      call c_i1(IAND(k,k2),ka,'IAND(integer(1),integer(1))')\n+      call c_i8(IAND(m,m2),ma,'IAND(integer(8),integer(8))')\n \n \n c     IBCLR  - Section 13.13.41\n@@ -105,21 +105,21 @@\n       m2 = 1\n       ma = 12\n       call c_i(IBCLR(14,1),12,'IBCLR(integer,integer)')\n-      call c_i(IBCLR(14,j2),12,'IBCLR(integer,integer*2)')\n-      call c_i(IBCLR(14,k2),12,'IBCLR(integer,integer*1)')\n-      call c_i(IBCLR(14,m2),12,'IBCLR(integer,integer*8)')\n-      call c_i2(IBCLR(j,1),ja,'IBCLR(integer*2,integer)')\n-      call c_i2(IBCLR(j,j2),ja,'IBCLR(integer*2,integer*2)')\n-      call c_i2(IBCLR(j,k2),ja,'IBCLR(integer*2,integer*1)')\n-      call c_i2(IBCLR(j,m2),ja,'IBCLR(integer*2,integer*8)')\n-      call c_i1(IBCLR(k,1),ka,'IBCLR(integer*1,integer)')\n-      call c_i1(IBCLR(k,j2),ka,'IBCLR(integer*1,integer*2)')\n-      call c_i1(IBCLR(k,k2),ka,'IBCLR(integer*1,integer*1)')\n-      call c_i1(IBCLR(k,m2),ka,'IBCLR(integer*1,integer*8)')\n-      call c_i8(IBCLR(m,1),ma,'IBCLR(integer*8,integer)')\n-      call c_i8(IBCLR(m,j2),ma,'IBCLR(integer*8,integer*2)')\n-      call c_i8(IBCLR(m,k2),ma,'IBCLR(integer*8,integer*1)')\n-      call c_i8(IBCLR(m,m2),ma,'IBCLR(integer*8,integer*8)')\n+      call c_i(IBCLR(14,j2),12,'IBCLR(integer,integer(2))')\n+      call c_i(IBCLR(14,k2),12,'IBCLR(integer,integer(1))')\n+      call c_i(IBCLR(14,m2),12,'IBCLR(integer,integer(8))')\n+      call c_i2(IBCLR(j,1),ja,'IBCLR(integer(2),integer)')\n+      call c_i2(IBCLR(j,j2),ja,'IBCLR(integer(2),integer(2))')\n+      call c_i2(IBCLR(j,k2),ja,'IBCLR(integer(2),integer(1))')\n+      call c_i2(IBCLR(j,m2),ja,'IBCLR(integer(2),integer(8))')\n+      call c_i1(IBCLR(k,1),ka,'IBCLR(integer(1),integer)')\n+      call c_i1(IBCLR(k,j2),ka,'IBCLR(integer(1),integer(2))')\n+      call c_i1(IBCLR(k,k2),ka,'IBCLR(integer(1),integer(1))')\n+      call c_i1(IBCLR(k,m2),ka,'IBCLR(integer(1),integer(8))')\n+      call c_i8(IBCLR(m,1),ma,'IBCLR(integer(8),integer)')\n+      call c_i8(IBCLR(m,j2),ma,'IBCLR(integer(8),integer(2))')\n+      call c_i8(IBCLR(m,k2),ma,'IBCLR(integer(8),integer(1))')\n+      call c_i8(IBCLR(m,m2),ma,'IBCLR(integer(8),integer(8))')\n \n c     IBSET  - Section 13.13.43\n       j  = 12\n@@ -132,21 +132,21 @@\n       m2 = 1\n       ma = 14\n       call c_i(IBSET(12,1),14,'IBSET(integer,integer)')\n-      call c_i(IBSET(12,j2),14,'IBSET(integer,integer*2)')\n-      call c_i(IBSET(12,k2),14,'IBSET(integer,integer*1)')\n-      call c_i(IBSET(12,m2),14,'IBSET(integer,integer*8)')\n-      call c_i2(IBSET(j,1),ja,'IBSET(integer*2,integer)')\n-      call c_i2(IBSET(j,j2),ja,'IBSET(integer*2,integer*2)')\n-      call c_i2(IBSET(j,k2),ja,'IBSET(integer*2,integer*1)')\n-      call c_i2(IBSET(j,m2),ja,'IBSET(integer*2,integer*8)')\n-      call c_i1(IBSET(k,1),ka,'IBSET(integer*1,integer)')\n-      call c_i1(IBSET(k,j2),ka,'IBSET(integer*1,integer*2)')\n-      call c_i1(IBSET(k,k2),ka,'IBSET(integer*1,integer*1)')\n-      call c_i1(IBSET(k,m2),ka,'IBSET(integer*1,integer*8)')\n-      call c_i8(IBSET(m,1),ma,'IBSET(integer*8,integer)')\n-      call c_i8(IBSET(m,j2),ma,'IBSET(integer*8,integer*2)')\n-      call c_i8(IBSET(m,k2),ma,'IBSET(integer*8,integer*1)')\n-      call c_i8(IBSET(m,m2),ma,'IBSET(integer*8,integer*8)')\n+      call c_i(IBSET(12,j2),14,'IBSET(integer,integer(2))')\n+      call c_i(IBSET(12,k2),14,'IBSET(integer,integer(1))')\n+      call c_i(IBSET(12,m2),14,'IBSET(integer,integer(8))')\n+      call c_i2(IBSET(j,1),ja,'IBSET(integer(2),integer)')\n+      call c_i2(IBSET(j,j2),ja,'IBSET(integer(2),integer(2))')\n+      call c_i2(IBSET(j,k2),ja,'IBSET(integer(2),integer(1))')\n+      call c_i2(IBSET(j,m2),ja,'IBSET(integer(2),integer(8))')\n+      call c_i1(IBSET(k,1),ka,'IBSET(integer(1),integer)')\n+      call c_i1(IBSET(k,j2),ka,'IBSET(integer(1),integer(2))')\n+      call c_i1(IBSET(k,k2),ka,'IBSET(integer(1),integer(1))')\n+      call c_i1(IBSET(k,m2),ka,'IBSET(integer(1),integer(8))')\n+      call c_i8(IBSET(m,1),ma,'IBSET(integer(8),integer)')\n+      call c_i8(IBSET(m,j2),ma,'IBSET(integer(8),integer(2))')\n+      call c_i8(IBSET(m,k2),ma,'IBSET(integer(8),integer(1))')\n+      call c_i8(IBSET(m,m2),ma,'IBSET(integer(8),integer(8))')\n \n c     IEOR   - Section 13.13.45\n       j  = 3\n@@ -159,9 +159,9 @@\n       m2 = 1\n       ma = 2\n       call c_i(IEOR(3,1),2,'IEOR(integer,integer)')\n-      call c_i2(IEOR(j,j2),ja,'IEOR(integer*2,integer*2)')\n-      call c_i1(IEOR(k,k2),ka,'IEOR(integer*1,integer*1)')\n-      call c_i8(IEOR(m,m2),ma,'IEOR(integer*8,integer*8)')\n+      call c_i2(IEOR(j,j2),ja,'IEOR(integer(2),integer(2))')\n+      call c_i1(IEOR(k,k2),ka,'IEOR(integer(1),integer(1))')\n+      call c_i8(IEOR(m,m2),ma,'IEOR(integer(8),integer(8))')\n \n c     ISHFT  - Section 13.13.49\n       i  = 3\n@@ -184,24 +184,24 @@\n       call c_i(ISHFT(i,BIT_SIZE(i)),i3,'ISHFT(integer,integer) 2')\n       call c_i(ISHFT(i,-BIT_SIZE(i)),i3,'ISHFT(integer,integer) 3')\n       call c_i(ISHFT(i,0),i,'ISHFT(integer,integer) 4')\n-      call c_i2(ISHFT(j,j2),ja,'ISHFT(integer*2,integer*2)')\n+      call c_i2(ISHFT(j,j2),ja,'ISHFT(integer(2),integer(2))')\n       call c_i2(ISHFT(j,BIT_SIZE(j)),j3,\n-     $     'ISHFT(integer*2,integer*2) 2')\n+     $     'ISHFT(integer(2),integer(2)) 2')\n       call c_i2(ISHFT(j,-BIT_SIZE(j)),j3,\n-     $     'ISHFT(integer*2,integer*2) 3')\n-      call c_i2(ISHFT(j,0),j,'ISHFT(integer*2,integer*2) 4')\n-      call c_i1(ISHFT(k,k2),ka,'ISHFT(integer*1,integer*1)')\n+     $     'ISHFT(integer(2),integer(2)) 3')\n+      call c_i2(ISHFT(j,0),j,'ISHFT(integer(2),integer(2)) 4')\n+      call c_i1(ISHFT(k,k2),ka,'ISHFT(integer(1),integer(1))')\n       call c_i1(ISHFT(k,BIT_SIZE(k)),k3,\n-     $     'ISHFT(integer*1,integer*1) 2')\n+     $     'ISHFT(integer(1),integer(1)) 2')\n       call c_i1(ISHFT(k,-BIT_SIZE(k)),k3,\n-     $     'ISHFT(integer*1,integer*1) 3')\n-      call c_i1(ISHFT(k,0),k,'ISHFT(integer*1,integer*1) 4')\n-      call c_i8(ISHFT(m,m2),ma,'ISHFT(integer*8,integer*8)')\n+     $     'ISHFT(integer(1),integer(1)) 3')\n+      call c_i1(ISHFT(k,0),k,'ISHFT(integer(1),integer(1)) 4')\n+      call c_i8(ISHFT(m,m2),ma,'ISHFT(integer(8),integer(8))')\n       call c_i8(ISHFT(m,BIT_SIZE(m)),m3,\n-     $     'ISHFT(integer*8,integer*8) 2')\n+     $     'ISHFT(integer(8),integer(8)) 2')\n       call c_i8(ISHFT(m,-BIT_SIZE(m)),m3,\n-     $     'ISHFT(integer*8,integer*8) 3')\n-      call c_i8(ISHFT(m,0),m,'ISHFT(integer*8,integer*8) 4')\n+     $     'ISHFT(integer(8),integer(8)) 3')\n+      call c_i8(ISHFT(m,0),m,'ISHFT(integer(8),integer(8)) 4')\n \n c     ISHFTC - Section 13.13.50\n c     The third argument is not optional in g77\n@@ -222,117 +222,126 @@\n       ma = 5\n c     test all the combinations of arguments\n       call c_i(ISHFTC(i,i2,i3),5,'ISHFTC(integer,integer,integer)')\n-      call c_i(ISHFTC(i,i2,j3),5,'ISHFTC(integer,integer,integer*2)')\n-      call c_i(ISHFTC(i,i2,k3),5,'ISHFTC(integer,integer,integer*1)')\n-      call c_i(ISHFTC(i,i2,m3),5,'ISHFTC(integer,integer,integer*8)')\n-      call c_i(ISHFTC(i,j2,i3),5,'ISHFTC(integer,integer*2,integer)')\n-      call c_i(ISHFTC(i,j2,j3),5,'ISHFTC(integer,integer*2,integer*2)')\n-      call c_i(ISHFTC(i,j2,k3),5,'ISHFTC(integer,integer*2,integer*1)')\n-      call c_i(ISHFTC(i,j2,m3),5,'ISHFTC(integer,integer*2,integer*8)')\n-      call c_i(ISHFTC(i,k2,i3),5,'ISHFTC(integer,integer*1,integer)')\n-      call c_i(ISHFTC(i,k2,j3),5,'ISHFTC(integer,integer*1,integer*2)')\n-      call c_i(ISHFTC(i,k2,k3),5,'ISHFTC(integer,integer*1,integer*1)')\n-      call c_i(ISHFTC(i,k2,m3),5,'ISHFTC(integer,integer*1,integer*8)')\n-      call c_i(ISHFTC(i,m2,i3),5,'ISHFTC(integer,integer*8,integer)')\n-      call c_i(ISHFTC(i,m2,j3),5,'ISHFTC(integer,integer*8,integer*2)')\n-      call c_i(ISHFTC(i,m2,k3),5,'ISHFTC(integer,integer*8,integer*1)')\n-      call c_i(ISHFTC(i,m2,m3),5,'ISHFTC(integer,integer*8,integer*8)')\n+      call c_i(ISHFTC(i,i2,j3),5,'ISHFTC(integer,integer,integer(2))')\n+      call c_i(ISHFTC(i,i2,k3),5,'ISHFTC(integer,integer,integer(1))')\n+      call c_i(ISHFTC(i,i2,m3),5,'ISHFTC(integer,integer,integer(8))')\n+      call c_i(ISHFTC(i,j2,i3),5,'ISHFTC(integer,integer(2),integer)')\n+      call c_i(ISHFTC(i,j2,j3),5,\n+     &  'ISHFTC(integer,integer(2),integer(2))')\n+      call c_i(ISHFTC(i,j2,k3),5,\n+     &  'ISHFTC(integer,integer(2),integer(1))')\n+      call c_i(ISHFTC(i,j2,m3),5,\n+     &  'ISHFTC(integer,integer(2),integer(8))')\n+      call c_i(ISHFTC(i,k2,i3),5,'ISHFTC(integer,integer(1),integer)')\n+      call c_i(ISHFTC(i,k2,j3),5,\n+     &  'ISHFTC(integer,integer(1),integer(2))')\n+      call c_i(ISHFTC(i,k2,k3),5,\n+     &  'ISHFTC(integer,integer(1),integer(1))')\n+      call c_i(ISHFTC(i,k2,m3),5,\n+     &  'ISHFTC(integer,integer(1),integer(8))')\n+      call c_i(ISHFTC(i,m2,i3),5,'ISHFTC(integer,integer(8),integer)')\n+      call c_i(ISHFTC(i,m2,j3),5,\n+     &  'ISHFTC(integer,integer(8),integer(2))')\n+      call c_i(ISHFTC(i,m2,k3),5,\n+     &  'ISHFTC(integer,integer(8),integer(1))')\n+      call c_i(ISHFTC(i,m2,m3),5,\n+     &  'ISHFTC(integer,integer(8),integer(8))')\n \n-      call c_i2(ISHFTC(j,i2,i3),ja,'ISHFTC(integer*2,integer,integer)')\n+      call c_i2(ISHFTC(j,i2,i3),ja,'ISHFTC(integer(2),integer,integer)')\n       call c_i2(ISHFTC(j,i2,j3),ja,\n-     $     'ISHFTC(integer*2,integer,integer*2)')\n+     $     'ISHFTC(integer(2),integer,integer(2))')\n       call c_i2(ISHFTC(j,i2,k3),ja,\n-     $     'ISHFTC(integer*2,integer,integer*1)')\n+     $     'ISHFTC(integer(2),integer,integer(1))')\n       call c_i2(ISHFTC(j,i2,m3),ja,\n-     $     'ISHFTC(integer*2,integer,integer*8)')\n+     $     'ISHFTC(integer(2),integer,integer(8))')\n       call c_i2(ISHFTC(j,j2,i3),ja,\n-     $     'ISHFTC(integer*2,integer*2,integer)')\n+     $     'ISHFTC(integer(2),integer(2),integer)')\n       call c_i2(ISHFTC(j,j2,j3),ja,\n-     $     'ISHFTC(integer*2,integer*2,integer*2)')\n+     $     'ISHFTC(integer(2),integer(2),integer(2))')\n       call c_i2(ISHFTC(j,j2,k3),ja,\n-     $     'ISHFTC(integer*2,integer*2,integer*1)')\n+     $     'ISHFTC(integer(2),integer(2),integer(1))')\n       call c_i2(ISHFTC(j,j2,m3),ja,\n-     $     'ISHFTC(integer*2,integer*2,integer*8)')\n+     $     'ISHFTC(integer(2),integer(2),integer(8))')\n       call c_i2(ISHFTC(j,k2,i3),ja,\n-     $     'ISHFTC(integer*2,integer*1,integer)')\n+     $     'ISHFTC(integer(2),integer(1),integer)')\n       call c_i2(ISHFTC(j,k2,j3),ja,\n-     $     'ISHFTC(integer*2,integer*1,integer*2)')\n+     $     'ISHFTC(integer(2),integer(1),integer(2))')\n       call c_i2(ISHFTC(j,k2,k3),ja,\n-     $     'ISHFTC(integer*2,integer*1,integer*1)')\n+     $     'ISHFTC(integer(2),integer(1),integer(1))')\n       call c_i2(ISHFTC(j,k2,m3),ja,\n-     $     'ISHFTC(integer*2,integer*1,integer*8)')\n+     $     'ISHFTC(integer(2),integer(1),integer(8))')\n       call c_i2(ISHFTC(j,m2,i3),ja,\n-     $     'ISHFTC(integer*2,integer*8,integer)')\n+     $     'ISHFTC(integer(2),integer(8),integer)')\n       call c_i2(ISHFTC(j,m2,j3),ja,\n-     $     'ISHFTC(integer*2,integer*8,integer*2)')\n+     $     'ISHFTC(integer(2),integer(8),integer(2))')\n       call c_i2(ISHFTC(j,m2,k3),ja,\n-     $     'ISHFTC(integer*2,integer*8,integer*1)')\n+     $     'ISHFTC(integer(2),integer(8),integer(1))')\n       call c_i2(ISHFTC(j,m2,m3),ja,\n-     $     'ISHFTC(integer*2,integer*8,integer*8)')\n+     $     'ISHFTC(integer(2),integer(8),integer(8))')\n \n-      call c_i1(ISHFTC(k,i2,i3),ka,'ISHFTC(integer*1,integer,integer)')\n+      call c_i1(ISHFTC(k,i2,i3),ka,'ISHFTC(integer(1),integer,integer)')\n       call c_i1(ISHFTC(k,i2,j3),ka,\n-     $     'ISHFTC(integer*1,integer,integer*2)')\n+     $     'ISHFTC(integer(1),integer,integer(2))')\n       call c_i1(ISHFTC(k,i2,k3),ka,\n-     $     'ISHFTC(integer*1,integer,integer*1)')\n+     $     'ISHFTC(integer(1),integer,integer(1))')\n       call c_i1(ISHFTC(k,i2,m3),ka,\n-     $     'ISHFTC(integer*1,integer,integer*8)')\n+     $     'ISHFTC(integer(1),integer,integer(8))')\n       call c_i1(ISHFTC(k,j2,i3),ka,\n-     $     'ISHFTC(integer*1,integer*2,integer)')\n+     $     'ISHFTC(integer(1),integer(2),integer)')\n       call c_i1(ISHFTC(k,j2,j3),ka,\n-     $     'ISHFTC(integer*1,integer*2,integer*2)')\n+     $     'ISHFTC(integer(1),integer(2),integer(2))')\n       call c_i1(ISHFTC(k,j2,k3),ka,\n-     $     'ISHFTC(integer*1,integer*2,integer*1)')\n+     $     'ISHFTC(integer(1),integer(2),integer(1))')\n       call c_i1(ISHFTC(k,j2,m3),ka,\n-     $     'ISHFTC(integer*1,integer*2,integer*8)')\n+     $     'ISHFTC(integer(1),integer(2),integer(8))')\n       call c_i1(ISHFTC(k,k2,i3),ka,\n-     $     'ISHFTC(integer*1,integer*1,integer)')\n+     $     'ISHFTC(integer(1),integer(1),integer)')\n       call c_i1(ISHFTC(k,k2,j3),ka,\n-     $     'ISHFTC(integer*1,integer*1,integer*2)')\n+     $     'ISHFTC(integer(1),integer(1),integer(2))')\n       call c_i1(ISHFTC(k,k2,k3),ka,\n-     $     'ISHFTC(integer*1,integer*1,integer*1)')\n+     $     'ISHFTC(integer(1),integer(1),integer(1))')\n       call c_i1(ISHFTC(k,k2,m3),ka,\n-     $     'ISHFTC(integer*1,integer*1,integer*8)')\n+     $     'ISHFTC(integer(1),integer(1),integer(8))')\n       call c_i1(ISHFTC(k,m2,i3),ka,\n-     $     'ISHFTC(integer*1,integer*8,integer)')\n+     $     'ISHFTC(integer(1),integer(8),integer)')\n       call c_i1(ISHFTC(k,m2,j3),ka,\n-     $     'ISHFTC(integer*1,integer*8,integer*2)')\n+     $     'ISHFTC(integer(1),integer(8),integer(2))')\n       call c_i1(ISHFTC(k,m2,k3),ka,\n-     $     'ISHFTC(integer*1,integer*8,integer*1)')\n+     $     'ISHFTC(integer(1),integer(8),integer(1))')\n       call c_i1(ISHFTC(k,m2,m3),ka,\n-     $     'ISHFTC(integer*1,integer*8,integer*8)')\n+     $     'ISHFTC(integer(1),integer(8),integer(8))')\n \n-      call c_i8(ISHFTC(m,i2,i3),ma,'ISHFTC(integer*8,integer,integer)')\n+      call c_i8(ISHFTC(m,i2,i3),ma,'ISHFTC(integer(8),integer,integer)')\n       call c_i8(ISHFTC(m,i2,j3),ma,\n-     $     'ISHFTC(integer*8,integer,integer*2)')\n+     $     'ISHFTC(integer(8),integer,integer(2))')\n       call c_i8(ISHFTC(m,i2,k3),ma,\n-     $     'ISHFTC(integer*8,integer,integer*1)')\n+     $     'ISHFTC(integer(8),integer,integer(1))')\n       call c_i8(ISHFTC(m,i2,m3),ma,\n-     $     'ISHFTC(integer*8,integer,integer*8)')\n+     $     'ISHFTC(integer(8),integer,integer(8))')\n       call c_i8(ISHFTC(m,j2,i3),ma,\n-     $     'ISHFTC(integer*8,integer*2,integer)')\n+     $     'ISHFTC(integer(8),integer(2),integer)')\n       call c_i8(ISHFTC(m,j2,j3),ma,\n-     $     'ISHFTC(integer*8,integer*2,integer*2)')\n+     $     'ISHFTC(integer(8),integer(2),integer(2))')\n       call c_i8(ISHFTC(m,j2,k3),ma,\n-     $     'ISHFTC(integer*8,integer*2,integer*1)')\n+     $     'ISHFTC(integer(8),integer(2),integer(1))')\n       call c_i8(ISHFTC(m,j2,m3),ma,\n-     $     'ISHFTC(integer*8,integer*2,integer*8)')\n+     $     'ISHFTC(integer(8),integer(2),integer(8))')\n       call c_i8(ISHFTC(m,k2,i3),ma,\n-     $     'ISHFTC(integer*8,integer*1,integer)')\n+     $     'ISHFTC(integer(8),integer(1),integer)')\n       call c_i8(ISHFTC(m,k2,j3),ma,\n-     $     'ISHFTC(integer*1,integer*8,integer*2)')\n+     $     'ISHFTC(integer(1),integer(8),integer(2))')\n       call c_i8(ISHFTC(m,k2,k3),ma,\n-     $     'ISHFTC(integer*1,integer*8,integer*1)')\n+     $     'ISHFTC(integer(1),integer(8),integer(1))')\n       call c_i8(ISHFTC(m,k2,m3),ma,\n-     $     'ISHFTC(integer*1,integer*8,integer*8)')\n+     $     'ISHFTC(integer(1),integer(8),integer(8))')\n       call c_i8(ISHFTC(m,m2,i3),ma,\n-     $     'ISHFTC(integer*8,integer*8,integer)')\n+     $     'ISHFTC(integer(8),integer(8),integer)')\n       call c_i8(ISHFTC(m,m2,j3),ma,\n-     $     'ISHFTC(integer*8,integer*8,integer*2)')\n+     $     'ISHFTC(integer(8),integer(8),integer(2))')\n       call c_i8(ISHFTC(m,m2,k3),ma,\n-     $     'ISHFTC(integer*8,integer*8,integer*1)')\n+     $     'ISHFTC(integer(8),integer(8),integer(1))')\n       call c_i8(ISHFTC(m,m2,m3),ma,\n-     $     'ISHFTC(integer*8,integer*8,integer*8)')\n+     $     'ISHFTC(integer(8),integer(8),integer(8))')\n \n c     test the corner cases\n       call c_i(ISHFTC(i,BIT_SIZE(i),BIT_SIZE(i)),i,\n@@ -342,23 +351,23 @@\n       call c_i(ISHFTC(i,-BIT_SIZE(i),BIT_SIZE(i)),i,\n      $     'ISHFTC(i,-BIT_SIZE(i),BIT_SIZE(i)) i = integer')\n       call c_i2(ISHFTC(j,BIT_SIZE(j),BIT_SIZE(j)),j,\n-     $     'ISHFTC(j,BIT_SIZE(j),BIT_SIZE(j)) j = integer*2')\n+     $     'ISHFTC(j,BIT_SIZE(j),BIT_SIZE(j)) j = integer(2)')\n       call c_i2(ISHFTC(j,0,BIT_SIZE(j)),j,\n-     $     'ISHFTC(j,0,BIT_SIZE(j)) j = integer*2')\n+     $     'ISHFTC(j,0,BIT_SIZE(j)) j = integer(2)')\n       call c_i2(ISHFTC(j,-BIT_SIZE(j),BIT_SIZE(j)),j,\n-     $     'ISHFTC(j,-BIT_SIZE(j),BIT_SIZE(j)) j = integer*2')\n+     $     'ISHFTC(j,-BIT_SIZE(j),BIT_SIZE(j)) j = integer(2)')\n       call c_i1(ISHFTC(k,BIT_SIZE(k),BIT_SIZE(k)),k,\n-     $     'ISHFTC(k,BIT_SIZE(k),BIT_SIZE(k)) k = integer*1')\n+     $     'ISHFTC(k,BIT_SIZE(k),BIT_SIZE(k)) k = integer(1)')\n       call c_i1(ISHFTC(k,0,BIT_SIZE(k)),k,\n-     $     'ISHFTC(k,0,BIT_SIZE(k)) k = integer*1')\n+     $     'ISHFTC(k,0,BIT_SIZE(k)) k = integer(1)')\n       call c_i1(ISHFTC(k,-BIT_SIZE(k),BIT_SIZE(k)),k,\n-     $     'ISHFTC(k,-BIT_SIZE(k),BIT_SIZE(k)) k = integer*1')\n+     $     'ISHFTC(k,-BIT_SIZE(k),BIT_SIZE(k)) k = integer(1)')\n       call c_i8(ISHFTC(m,BIT_SIZE(m),BIT_SIZE(m)),m,\n-     $     'ISHFTC(m,BIT_SIZE(m),BIT_SIZE(m)) m = integer*8')\n+     $     'ISHFTC(m,BIT_SIZE(m),BIT_SIZE(m)) m = integer(8)')\n       call c_i8(ISHFTC(m,0,BIT_SIZE(m)),m,\n-     $     'ISHFTC(m,0,BIT_SIZE(m)) m = integer*8')\n+     $     'ISHFTC(m,0,BIT_SIZE(m)) m = integer(8)')\n       call c_i8(ISHFTC(m,-BIT_SIZE(m),BIT_SIZE(m)),m,\n-     $     'ISHFTC(m,-BIT_SIZE(m),BIT_SIZE(m)) m = integer*8')\n+     $     'ISHFTC(m,-BIT_SIZE(m),BIT_SIZE(m)) m = integer(8)')\n \n c     MVBITS - Section 13.13.74\n       i = 6\n@@ -392,9 +401,9 @@\n       m2 = 31\n       ma = 10\n       call c_i(IAND(NOT(21),31),10,'NOT(integer)')\n-      call c_i2(IAND(NOT(j),j2),ja,'NOT(integer*2)')\n-      call c_i1(IAND(NOT(k),k2),ka,'NOT(integer*1)')\n-      call c_i8(IAND(NOT(m),m2),ma,'NOT(integer*8)')\n+      call c_i2(IAND(NOT(j),j2),ja,'NOT(integer(2))')\n+      call c_i1(IAND(NOT(k),k2),ka,'NOT(integer(1))')\n+      call c_i8(IAND(NOT(m),m2),ma,'NOT(integer(8))')\n \n       if ( fail ) call abort()\n       end\n@@ -429,8 +438,8 @@ subroutine c_i(i,j,label)\n       end\n \n       subroutine c_i2(i,j,label)\n-c     Check if INTEGER*2 i equals j, and fail otherwise\n-      integer*2 i,j\n+c     Check if INTEGER(kind=2) i equals j, and fail otherwise\n+      integer(kind=2) i,j\n       character*(*) label\n       if ( i .ne. j ) then\n          call failure(label)\n@@ -439,8 +448,8 @@ subroutine c_i2(i,j,label)\n       end\n \n       subroutine c_i1(i,j,label)\n-c     Check if INTEGER*1 i equals j, and fail otherwise\n-      integer*1 i,j\n+c     Check if INTEGER(kind=1) i equals j, and fail otherwise\n+      integer(kind=1) i,j\n       character*(*) label\n       if ( i .ne. j ) then\n          call failure(label)\n@@ -449,8 +458,8 @@ subroutine c_i1(i,j,label)\n       end\n \n       subroutine c_i8(i,j,label)\n-c     Check if INTEGER*8 i equals j, and fail otherwise\n-      integer*8 i,j\n+c     Check if INTEGER(kind=8) i equals j, and fail otherwise\n+      integer(kind=8) i,j\n       character*(*) label\n       if ( i .ne. j ) then\n          call failure(label)"}, {"sha": "bb9849994126bc74446e52d8536cf26b342dec03", "filename": "gcc/testsuite/gfortran.dg/g77/f90-intrinsic-mathematical.f", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Ff90-intrinsic-mathematical.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Ff90-intrinsic-mathematical.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Ff90-intrinsic-mathematical.f?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -35,7 +35,7 @@\n       call c_d(COS(1.d0),0.54030231d0,'COS(double)')\n       call c_c(COS((1.,0.)),(0.54030231,0.),'COS(complex)')\n       call c_z(COS((1.d0,0.d0)),(0.54030231d0,0.d0),\n-     $     'COS(double complex)')\n+     $     'COS(complex(kind=8))')\n \n c     COSH - Section 13.13.23\n       call c_r(COSH(1.0),1.5430806,'COSH(real)')\n@@ -46,14 +46,14 @@\n       call c_d(EXP(1.d0),2.7182818d0,'EXP(double)')\n       call c_c(EXP((1.,0.)),(2.7182818,0.),'EXP(complex)')\n       call c_z(EXP((1.d0,0.d0)),(2.7182818d0,0.d0),\n-     $     'EXP(double complex)')\n+     $     'EXP(complex(kind=8))')\n \n c     LOG - Section 13.13.59\n       call c_r(LOG(10.0),2.3025851,'LOG(real)')\n       call c_d(LOG(10.d0),2.3025851d0,'LOG(double)')\n       call c_c(LOG((10.,0.)),(2.3025851,0.),'LOG(complex)')\n       call c_z(LOG((10.d0,0.)),(2.3025851d0,0.d0),\n-     $     'LOG(double complex)')\n+     $     'LOG(complex(kind=8))')\n \n c     LOG10 - Section 13.13.60\n       call c_r(LOG10(10.0),1.0,'LOG10(real)')\n@@ -64,7 +64,7 @@\n       call c_d(SIN(1.d0),0.84147098d0,'SIN(double)')\n       call c_c(SIN((1.,0.)),(0.84147098,0.),'SIN(complex)')\n       call c_z(SIN((1.d0,0.d0)),(0.84147098d0,0.d0),\n-     $     'SIN(double complex)')\n+     $     'SIN(complex(kind=8))')\n \n c     SINH - Section 13.13.98\n       call c_r(SINH(1.0),1.175201,'SINH(real)')\n@@ -75,7 +75,7 @@\n       call c_d(SQRT(4.d0),2.d0,'SQRT(double)')\n       call c_c(SQRT((4.,0.)),(2.,0.),'SQRT(complex)')\n       call c_z(SQRT((4.d0,0.)),(2.d0,0.),\n-     $     'SQRT(double complex)')\n+     $     'SQRT(complex(kind=8))')\n  \n c     TAN - Section 13.13.105\n       call c_r(TAN(1.0),1.5574077,'TAN(real)')\n@@ -129,7 +129,7 @@ subroutine c_c(a,b,label)\n \n       subroutine c_z(a,b,label)\n c     Check if COMPLEX a equals b, and fail otherwise\n-      double complex a, b\n+      complex(kind=8) a, b\n       character*(*) label\n       if ( abs(a-b) .gt. 1.0d-5 ) then\n          call failure(label)"}, {"sha": "41bf59694d40325504ccf256587d91b17f4ed293", "filename": "gcc/testsuite/gfortran.dg/g77/f90-intrinsic-numeric.f", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Ff90-intrinsic-numeric.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Ff90-intrinsic-numeric.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Ff90-intrinsic-numeric.f?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -10,8 +10,8 @@\n c intrinsic77.f\n \n       logical fail\n-      integer*2 j, j2, ja\n-      integer*1 k, k2, ka\n+      integer(kind=2) j, j2, ja\n+      integer(kind=1) k, k2, ka\n \n       common /flags/ fail\n       fail = .false.\n@@ -22,17 +22,17 @@\n       k = j\n       ka = ja\n       call c_i(ABS(-7),7,'ABS(integer)')\n-      call c_i2(ABS(j),ja,'ABS(integer*2)')\n-      call c_i1(ABS(k),ka,'ABS(integer*1)')\n+      call c_i2(ABS(j),ja,'ABS(integer(2))')\n+      call c_i1(ABS(k),ka,'ABS(integer(1))')\n       call c_r(ABS(-7.),7.,'ABS(real)')\n       call c_d(ABS(-7.d0),7.d0,'ABS(double)')\n       call c_r(ABS((3.,-4.)),5.0,'ABS(complex)')\n-      call c_d(ABS((3.d0,-4.d0)),5.0d0,'ABS(double complex)')\n+      call c_d(ABS((3.d0,-4.d0)),5.0d0,'ABS(complex(kind=8))')\n \n c     AIMAG - Section 13.13.6\n       call c_r(AIMAG((2.,-7.)),-7.,'AIMAG(complex)')\n-c     g77: AIMAG(double complex) does not comply with F90\n-c     call c_d(AIMAG((2.d0,-7.d0)),-7.d0,'AIMAG(double complex)')\n+c     g77: AIMAG(complex(kind=8)) does not comply with F90\n+c     call c_d(AIMAG((2.d0,-7.d0)),-7.d0,'AIMAG(complex(kind=8))')\n \n c     AINT - Section 13.13.7\n       call c_r(AINT(2.783),2.0,'AINT(real) 1')\n@@ -58,31 +58,31 @@\n       ka = 2\n       call c_c(CMPLX(1),(1.,0.),'CMPLX(integer)')\n       call c_c(CMPLX(1,2),(1.,2.),'CMPLX(integer, integer)')\n-      call c_c(CMPLX(j),(1.,0.),'CMPLX(integer*2)')\n-      call c_c(CMPLX(j,ja),(1.,2.),'CMPLX(integer*2, integer*2)')\n-      call c_c(CMPLX(k),(1.,0.),'CMPLX(integer*1)')\n-      call c_c(CMPLX(k,ka),(1.,2.),'CMPLX(integer*1, integer*1)')\n+      call c_c(CMPLX(j),(1.,0.),'CMPLX(integer(2))')\n+      call c_c(CMPLX(j,ja),(1.,2.),'CMPLX(integer(2), integer(2))')\n+      call c_c(CMPLX(k),(1.,0.),'CMPLX(integer(1)')\n+      call c_c(CMPLX(k,ka),(1.,2.),'CMPLX(integer(1), integer(1))')\n       call c_c(CMPLX(1.),(1.,0.),'CMPLX(real)')\n       call c_c(CMPLX(1.d0),(1.,0.),'CMPLX(double)')\n       call c_c(CMPLX(1.d0,2.d0),(1.,2.),'CMPLX(double,double)')\n       call c_c(CMPLX(1.,2.),(1.,2.),'CMPLX(complex)')\n-      call c_c(CMPLX(1.d0,2.d0),(1.,2.),'CMPLX(double complex)')\n+      call c_c(CMPLX(1.d0,2.d0),(1.,2.),'CMPLX(complex(kind=8))')\n c     NOTE: g77 does not support optional argument KIND\n    \n c     CONJG - Section 13.13.21\n       call c_c(CONJG((2.,-7.)),(2.,7.),'CONJG(complex)')\n-      call c_z(CONJG((2.d0,-7.d0)),(2.d0,7.d0),'CONJG(double complex)')\n+      call c_z(CONJG((2.d0,-7.d0)),(2.d0,7.d0),'CONJG(complex(kind=8))')\n \n c     DBLE - Section 13.13.27\n       j = 5\n       k = 5\n       call c_d(DBLE(5),5.0d0,'DBLE(integer)')\n-      call c_d(DBLE(j),5.0d0,'DBLE(integer*2)')\n-      call c_d(DBLE(k),5.0d0,'DBLE(integer*1)')\n+      call c_d(DBLE(j),5.0d0,'DBLE(integer(2))')\n+      call c_d(DBLE(k),5.0d0,'DBLE(integer(1))')\n       call c_d(DBLE(5.),5.0d0,'DBLE(real)')\n       call c_d(DBLE(5.0d0),5.0d0,'DBLE(double)')\n       call c_d(DBLE((5.0,0.5)),5.0d0,'DBLE(complex)')\n-      call c_d(DBLE((5.0d0,0.5d0)),5.0d0,'DBLE(double complex)')\n+      call c_d(DBLE((5.0d0,0.5d0)),5.0d0,'DBLE(complex(kind=8))')\n \n c     DIM - Section 13.13.29\n       j = -8\n@@ -92,8 +92,8 @@\n       k2 = -3\n       ka = 0\n       call c_i(DIM(-8,-3),0,'DIM(integer)')\n-      call c_i2(DIM(j,j2),ja,'DIM(integer*2)')\n-      call c_i1(DIM(k,k2),ka,'DIM(integer*1)')\n+      call c_i2(DIM(j,j2),ja,'DIM(integer(2))')\n+      call c_i1(DIM(k,k2),ka,'DIM(integer(1)')\n       call c_r(DIM(-8.,-3.),0.,'DIM(real,real)')\n       call c_d(DIM(-8.d0,-3.d0),0.d0,'DIM(double,double)')\n  \n@@ -107,8 +107,8 @@\n       j = 5\n       k = 5\n       call c_i(INT(5),5,'INT(integer)')\n-      call c_i(INT(j),5,'INT(integer*2)')\n-      call c_i(INT(k),5,'INT(integer*1)')\n+      call c_i(INT(j),5,'INT(integer(2))')\n+      call c_i(INT(k),5,'INT(integer(1))')\n       call c_i(INT(5.01),5,'INT(real)')\n       call c_i(INT(5.01d0),5,'INT(double)')\n c     Note: Does not accept optional second argument KIND\n@@ -121,8 +121,8 @@\n       k2 = 2\n       ka = 2\n       call c_i(MAX(1,2,3),3,'MAX(integer,integer,integer)')\n-      call c_i2(MAX(j,j2),ja,'MAX(integer*2,integer*2)')\n-      call c_i1(MAX(k,k2),ka,'MAX(integer*1,integer*1)')\n+      call c_i2(MAX(j,j2),ja,'MAX(integer(2),integer(2))')\n+      call c_i1(MAX(k,k2),ka,'MAX(integer(1),integer(1))')\n       call c_r(MAX(1.,2.,3.),3.,'MAX(real,real,real)')\n       call c_d(MAX(1.d0,2.d0,3.d0),3.d0,'MAX(double,double,double)')\n \n@@ -134,8 +134,8 @@\n       k2 = 2\n       ka = 1\n       call c_i(MIN(1,2,3),1,'MIN(integer,integer,integer)')\n-      call c_i2(MIN(j,j2),ja,'MIN(integer*2,integer*2)')\n-      call c_i1(MIN(k,k2),ka,'MIN(integer*1,integer*1)')\n+      call c_i2(MIN(j,j2),ja,'MIN(integer(2),integer(2))')\n+      call c_i1(MIN(k,k2),ka,'MIN(integer(1),integer(1))')\n       call c_r(MIN(1.,2.,3.),1.,'MIN(real,real,real)')\n       call c_d(MIN(1.d0,2.d0,3.d0),1.d0,'MIN(double,double,double)')\n \n@@ -147,17 +147,17 @@\n       j = 8\n       j2 = 5\n       ja = 3\n-      call c_i2(MOD(j,j2),ja,'MOD(integer*2,integer*2) 1')\n-      call c_i2(MOD(-j,j2),-ja,'MOD(integer*2,integer*2) 2')\n-      call c_i2(MOD(j,-j2),ja,'MOD(integer*2,integer*2) 3')\n-      call c_i2(MOD(-j,-j2),-ja,'MOD(integer*2,integer*2) 4')\n+      call c_i2(MOD(j,j2),ja,'MOD(integer(2),integer(2)) 1')\n+      call c_i2(MOD(-j,j2),-ja,'MOD(integer(2),integer(2)) 2')\n+      call c_i2(MOD(j,-j2),ja,'MOD(integer(2),integer(2)) 3')\n+      call c_i2(MOD(-j,-j2),-ja,'MOD(integer(2),integer(2)) 4')\n       k = 8\n       k2 = 5\n       ka = 3\n-      call c_i1(MOD(k,k2),ka,'MOD(integer*1,integer*1) 1')\n-      call c_i1(MOD(-k,k2),-ka,'MOD(integer*1,integer*1) 2')\n-      call c_i1(MOD(k,-k2),ka,'MOD(integer*1,integer*1) 3')\n-      call c_i1(MOD(-k,-k2),-ka,'MOD(integer*1,integer*1) 4')\n+      call c_i1(MOD(k,k2),ka,'MOD(integer(1),integer(1)) 1')\n+      call c_i1(MOD(-k,k2),-ka,'MOD(integer(1),integer(1)) 2')\n+      call c_i1(MOD(k,-k2),ka,'MOD(integer(1),integer(1)) 3')\n+      call c_i1(MOD(-k,-k2),-ka,'MOD(integer(1),integer(1)) 4')\n       call c_r(MOD(8.,5.),3.,'MOD(real,real) 1')\n       call c_r(MOD(-8.,5.),-3.,'MOD(real,real) 2')\n       call c_r(MOD(8.,-5.),3.,'MOD(real,real) 3')\n@@ -179,13 +179,13 @@\n       j = -2\n       k = -2\n       call c_r(REAL(-2),-2.0,'REAL(integer)')\n-      call c_r(REAL(j),-2.0,'REAL(integer*2)')\n-      call c_r(REAL(k),-2.0,'REAL(integer*1)')\n+      call c_r(REAL(j),-2.0,'REAL(integer(2))')\n+      call c_r(REAL(k),-2.0,'REAL(integer(1))')\n       call c_r(REAL(-2.0),-2.0,'REAL(real)')\n       call c_r(REAL(-2.0d0),-2.0,'REAL(double)')\n       call c_r(REAL((-2.,9.)),-2.0,'REAL(complex)')\n-c     REAL(double complex) not implemented\n-c     call c_r(REAL((-2.d0,9.d0)),-2.0,'REAL(double complex)')\n+c     REAL(complex(kind=8)) not implemented\n+c     call c_r(REAL((-2.d0,9.d0)),-2.0,'REAL(complex(kind=8))')\n \n c     SIGN - Section 13.13.96\n       j = -3\n@@ -195,8 +195,8 @@\n       k2 = 2\n       ka = 3\n       call c_i(SIGN(-3,2),3,'SIGN(integer)')\n-      call c_i2(SIGN(j,j2),ja,'SIGN(integer*2)')\n-      call c_i1(SIGN(k,k2),ka,'SIGN(integer*1)')\n+      call c_i2(SIGN(j,j2),ja,'SIGN(integer(2))')\n+      call c_i1(SIGN(k,k2),ka,'SIGN(integer(1))')\n       call c_r(SIGN(-3.0,2.),3.,'SIGN(real,real)')\n       call c_d(SIGN(-3.d0,2.d0),3.d0,'SIGN(double,double)')\n  \n@@ -223,8 +223,8 @@ subroutine c_i(i,j,label)\n       end\n \n       subroutine c_i2(i,j,label)\n-c     Check if INTEGER*2 i equals j, and fail otherwise\n-      integer*2 i,j\n+c     Check if INTEGER(kind=2) i equals j, and fail otherwise\n+      integer(kind=2) i,j\n       character*(*) label\n       if ( i .ne. j ) then\n          call failure(label)\n@@ -233,8 +233,8 @@ subroutine c_i2(i,j,label)\n       end\n \n       subroutine c_i1(i,j,label)\n-c     Check if INTEGER*1 i equals j, and fail otherwise\n-      integer*1 i,j\n+c     Check if INTEGER(kind=1) i equals j, and fail otherwise\n+      integer(kind=1) i,j\n       character*(*) label\n       if ( i .ne. j ) then\n          call failure(label)\n@@ -274,7 +274,7 @@ subroutine c_c(a,b,label)\n \n       subroutine c_z(a,b,label)\n c     Check if COMPLEX a equals b, and fail otherwise\n-      double complex a, b\n+      complex(kind=8) a, b\n       character*(*) label\n       if ( abs(a-b) .gt. 1.0d-5 ) then\n          call failure(label)"}, {"sha": "0eb1520024f7043fccd55700ef128ebcfab6991f", "filename": "gcc/testsuite/gfortran.dg/g77/int8421.f", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fint8421.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fint8421.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fint8421.f?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -1,13 +1,13 @@\n c { dg-do run }\n-      integer*1 i1, i11\n-      integer*2 i2, i22\n-      integer   i, ii\n-      integer*4 i4, i44\n-      integer*8 i8, i88\n+      integer(kind=1) i1, i11\n+      integer(kind=2) i2, i22\n+      integer         i, ii\n+      integer(kind=4) i4, i44\n+      integer(kind=8) i8, i88\n       real      r, rr\n-      real*4    r4, r44\n+      real(kind=4)    r4, r44\n       double precision d, dd\n-      real*8    r8, r88\n+      real(kind=8)   r8, r88\n       parameter (i1 = 1, i2 = 2, i4 = 4, i = 5, i8 = i + i4*i2 + i2*i1)\n       parameter (r = 3.0, r4 = 4.0, r8 = 8.d0, d = i8*r + r4*i2 + r8*i1)\n       if (i8 .ne. 15   ) call abort"}, {"sha": "696392ffac0f8c57291651578daa8aee67af840c", "filename": "gcc/testsuite/gfortran.dg/g77/intrinsic-unix-bessel.f", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fintrinsic-unix-bessel.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fintrinsic-unix-bessel.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fintrinsic-unix-bessel.f?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -9,9 +9,9 @@\n       real x, a\n       double precision dx, da\n       integer i\n-      integer*2 j\n-      integer*1 k\n-      integer*8 m\n+      integer(kind=2) j\n+      integer(kind=1) k\n+      integer(kind=8) m\n       logical fail\n       common /flags/ fail\n       fail = .false.\n@@ -40,14 +40,14 @@\n       a = 0.3528340\n       da = a\n       call c_r(BESJN(i,x),a,'BESJN(integer,real)')\n-      call c_r(BESJN(j,x),a,'BESJN(integer*2,real)')\n-      call c_r(BESJN(k,x),a,'BESJN(integer*1,real)')\n+      call c_r(BESJN(j,x),a,'BESJN(integer(2),real)')\n+      call c_r(BESJN(k,x),a,'BESJN(integer(1),real)')\n       call c_d(BESJN(i,dx),da,'BESJN(integer,double)')\n-      call c_d(BESJN(j,dx),da,'BESJN(integer*2,double)')\n-      call c_d(BESJN(k,dx),da,'BESJN(integer*1,double)')\n+      call c_d(BESJN(j,dx),da,'BESJN(integer(2),double)')\n+      call c_d(BESJN(k,dx),da,'BESJN(integer(1),double)')\n       call c_d(DBESJN(i,dx),da,'DBESJN(integer,double)')\n-      call c_d(DBESJN(j,dx),da,'DBESJN(integer*2,double)')\n-      call c_d(DBESJN(k,dx),da,'DBESJN(integer*1,double)')\n+      call c_d(DBESJN(j,dx),da,'DBESJN(integer(2),double)')\n+      call c_d(DBESJN(k,dx),da,'DBESJN(integer(1),double)')\n \n c     BESY0  - Bessel function of second kind of order zero\n       a = 0.51037567\n@@ -67,14 +67,14 @@\n       a = -0.6174081\n       da = a\n       call c_r(BESYN(i,x),a,'BESYN(integer,real)')\n-      call c_r(BESYN(j,x),a,'BESYN(integer*2,real)')\n-      call c_r(BESYN(k,x),a,'BESYN(integer*1,real)')\n+      call c_r(BESYN(j,x),a,'BESYN(integer(2),real)')\n+      call c_r(BESYN(k,x),a,'BESYN(integer(1),real)')\n       call c_d(BESYN(i,dx),da,'BESYN(integer,double)')\n-      call c_d(BESYN(j,dx),da,'BESYN(integer*2,double)')\n-      call c_d(BESYN(k,dx),da,'BESYN(integer*1,double)')\n+      call c_d(BESYN(j,dx),da,'BESYN(integer(2),double)')\n+      call c_d(BESYN(k,dx),da,'BESYN(integer(1),double)')\n       call c_d(DBESYN(i,dx),da,'DBESYN(integer,double)')\n-      call c_d(DBESYN(j,dx),da,'DBESYN(integer*2,double)')\n-      call c_d(DBESYN(k,dx),da,'DBESYN(integer*1,double)')\n+      call c_d(DBESYN(j,dx),da,'DBESYN(integer(2),double)')\n+      call c_d(DBESYN(k,dx),da,'DBESYN(integer(1),double)')\n \n       if ( fail ) call abort()\n       end"}, {"sha": "551bd61cd6508548888960dbbb86238ad0bbff05", "filename": "gcc/testsuite/gfortran.dg/g77_intrinsics_funcs.f", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77_intrinsics_funcs.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77_intrinsics_funcs.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77_intrinsics_funcs.f?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -1,7 +1,7 @@\n ! { dg-do compile }\n ! Testing g77 intrinsics as subroutines\n-      integer*8 i8\n-      integer*4 i4\n+      integer(kind=8) i8\n+      integer i4\n       integer i\n       character*80 c\n "}, {"sha": "d1591e04beffb04302ed45fbcab5480ca84a7c25", "filename": "gcc/testsuite/gfortran.dg/g77_intrinsics_sub.f", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77_intrinsics_sub.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77_intrinsics_sub.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77_intrinsics_sub.f?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -1,7 +1,7 @@\n ! { dg-do compile }\n ! Testing g77 intrinsics as subroutines\n-      integer*8 i8, j8\n-      integer*4 i4, j4\n+      integer(kind=8) i8, j8\n+      integer i4, j4\n       integer i, j\n       character*80 c\n "}, {"sha": "3c4a1860952a757dd0706e427e607dc037a91892", "filename": "gcc/testsuite/gfortran.dg/gnu_logical_1.F", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgnu_logical_1.F", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgnu_logical_1.F", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgnu_logical_1.F?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -1,14 +1,14 @@\n ! Testcases for the AND, OR and XOR functions (GNU intrinsics).\n ! { dg-do run }\n ! { dg-options \"-ffixed-line-length-none\" }\n-      integer*1 i1, j1\n-      integer*2 i2, j2\n-      integer*4 i4, j4\n-      integer*8 i8, j8\n-      logical*1 l1, k1\n-      logical*2 l2, k2\n-      logical*4 l4, k4\n-      logical*8 l8, k8\n+      integer(kind=1) i1, j1\n+      integer(kind=2) i2, j2\n+      integer         i4, j4\n+      integer(kind=8) i8, j8\n+      logical(kind=1) l1, k1\n+      logical(kind=2) l2, k2\n+      logical         l4, k4\n+      logical(kind=8) l8, k8\n \n #define TEST_INTEGER(u,ukind,v,vkind) \\\n       ukind = u;\\"}, {"sha": "5884799dfd0d2ddc351c705142c73ee2861c29eb", "filename": "gcc/testsuite/gfortran.dg/hollerith.f90", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith.f90?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -1,15 +1,15 @@\n ! { dg-do run }\n ! PR15966, PR18781 & PR16531\n implicit none\n-complex*16 x(2) \n-complex*8 a(2,2)\n+complex(kind=8) x(2) \n+complex a(2,2)\n character*4 z\n character z1(4)\n character*4 z2(2,2)\n character*80 line\n-integer*4 i\n-logical*4 l\n-real*4 r\n+integer i\n+logical l\n+real r\n character*8 c\n \n data x /16Habcdefghijklmnop, 16Hqrstuvwxyz012345/\n@@ -52,7 +52,7 @@\n end\n \n subroutine test (h)\n-integer*8 h\n+integer(kind=8) h\n character*80 line\n \n write (line, '(8a)') h"}, {"sha": "e3b2f49aae8933168765c61d00a05940ed0e3d46", "filename": "gcc/testsuite/gfortran.dg/hollerith2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith2.f90?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -2,7 +2,7 @@\n        ! Program to test Hollerith constant.\n        Program test\n        implicit none\n-       integer* 4 i,j\n+       integer i,j\n        real r, x, y\n        parameter (i = 4h1234)\n        parameter (r = 4hdead)"}, {"sha": "fc70c51ae9b00012f06fca180e4f25454e9f2974", "filename": "gcc/testsuite/gfortran.dg/hollerith_f95.f90", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith_f95.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith_f95.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith_f95.f90?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -2,15 +2,15 @@\n ! { dg-options \"-std=f95\" }\n ! PR15966, PR18781 & PR16531\n implicit none\n-complex*16 x(2) \n-complex*8 a(2,2)\n+complex(kind=8) x(2) \n+complex a(2,2)\n character*4 z\n character z1(4)\n character*4 z2(2,2)\n character*80 line\n-integer*4 i\n-logical*4 l\n-real*4 r\n+integer i\n+logical l\n+real r\n character*8 c\n \n data x /16Habcdefghijklmnop, 16Hqrstuvwxyz012345/\n@@ -53,7 +53,7 @@\n end\n \n subroutine test (h)\n-integer*8 h\n+integer(kind=8) h\n character*80 line\n \n write (line, '(8a)') h"}, {"sha": "13a94bc40d0c2441443028a650b77388a55a3ea7", "filename": "gcc/testsuite/gfortran.dg/hollerith_legacy.f90", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith_legacy.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith_legacy.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith_legacy.f90?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -2,15 +2,15 @@\n ! { dg-options \"-std=legacy\" }\n ! PR15966, PR18781 & PR16531\n implicit none\n-complex*16 x(2) \n-complex*8 a(2,2)\n+complex(kind=8) x(2) \n+complex a(2,2)\n character*4 z\n character z1(4)\n character*4 z2(2,2)\n character*80 line\n-integer*4 i\n-logical*4 l\n-real*4 r\n+integer i\n+logical l\n+real r\n character*8 c\n \n data x /16Habcdefghijklmnop, 16Hqrstuvwxyz012345/\n@@ -53,7 +53,7 @@\n end\n \n subroutine test (h)\n-integer*8 h\n+integer(kind=8) h\n character*80 line\n \n write (line, '(8a)') h"}, {"sha": "e8af92d221199af8cccd28c372a5ed0ac80f97e7", "filename": "gcc/testsuite/gfortran.dg/imag_1.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fimag_1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fimag_1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fimag_1.f?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -1,7 +1,7 @@\n ! { dg-do compile }\n       program bug\n       implicit none\n-      double complex z\n+      complex(kind=8) z\n       double precision x,y\n       z = cmplx(1.e0_8,2.e0_8)\n       y = imag(z)"}, {"sha": "137f089f44c7305e32bb74b4024084df0aa50cfc", "filename": "gcc/testsuite/gfortran.dg/imag_2.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fimag_2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fimag_2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fimag_2.f?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -2,7 +2,7 @@\n ! { dg-options \"-std=f95\" }\n       program bug\n       implicit none\n-      double complex z\n+      complex(kind=8) z\n       double precision x\n       z = cmplx(1.e0_8, 2.e0_8)\n       x = imag(z)         ! { dg-error \"has no IMPLICIT type\" \"\" }"}, {"sha": "a316978588df9e1e188b9ae3905fd0f609699329", "filename": "gcc/testsuite/gfortran.dg/logint-1.f", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Flogint-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Flogint-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Flogint-1.f?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -1,11 +1,11 @@\n c { dg-do compile }\n c { dg-options \"-O2 -std=legacy\" }\n-       LOGICAL*1 l1\n-       LOGICAL*2 l2\n-       LOGICAL*4 l4\n-       INTEGER*1 i1\n-       INTEGER*2 i2\n-       INTEGER*4 i4\n+       LOGICAL(kind=1) l1\n+       LOGICAL(kind=2) l2\n+       LOGICAL         l4\n+       INTEGER(kind=1) i1\n+       INTEGER(kind=2) i2\n+       INTEGER         i4\n \n        i1 = .TRUE.\n        i2 = .TRUE."}, {"sha": "19d387315c8b39dcb0daf6fbedbfed71e89b955b", "filename": "gcc/testsuite/gfortran.dg/logint-2.f", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Flogint-2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Flogint-2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Flogint-2.f?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -1,11 +1,11 @@\n c { dg-do compile }\n c { dg-options \"-O2 -std=f95\" }\n-       LOGICAL*1 l1\n-       LOGICAL*2 l2\n-       LOGICAL*4 l4\n-       INTEGER*1 i1\n-       INTEGER*2 i2\n-       INTEGER*4 i4\n+       LOGICAL(kind=1) l1\n+       LOGICAL(kind=2) l2\n+       LOGICAL         l4\n+       INTEGER(kind=1) i1\n+       INTEGER(kind=2) i2\n+       INTEGER         i4\n \n        i1 = .TRUE.  ! { dg-error \"convert\" }\n        i2 = .TRUE.  ! { dg-error \"convert\" }"}, {"sha": "7f6780c8475adb6865eef0152d8c350334904694", "filename": "gcc/testsuite/gfortran.dg/logint-3.f", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Flogint-3.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Flogint-3.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Flogint-3.f?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -1,11 +1,11 @@\n c { dg-do compile }\n c { dg-options \"-O2\" }\n-       LOGICAL*1 l1\n-       LOGICAL*2 l2\n-       LOGICAL*4 l4\n-       INTEGER*1 i1\n-       INTEGER*2 i2\n-       INTEGER*4 i4\n+       LOGICAL(kind=1) l1\n+       LOGICAL(kind=2) l2\n+       LOGICAL         l4\n+       INTEGER(kind=1) i1\n+       INTEGER(kind=2) i2\n+       INTEGER         i4\n \n        i1 = .TRUE.  ! { dg-warning \"Extension: Conversion\" }\n        i2 = .TRUE.  ! { dg-warning \"Extension: Conversion\" }"}, {"sha": "723236f8fed3845e5e2732bfbba7dc4bfba456b6", "filename": "gcc/testsuite/gfortran.dg/malloc_free_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fmalloc_free_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fmalloc_free_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmalloc_free_1.f90?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -2,7 +2,7 @@\n ! If something is wrong with them, this test might segfault\n ! { dg-do run }\n   integer j\n-  integer*8 i8\n+  integer(kind=8) i8\n \n   do j = 1, 10000\n     i8 = malloc (10 * j)"}, {"sha": "6fb05093d9e3ce235764ad92a2cda9cebd8124c7", "filename": "gcc/testsuite/gfortran.dg/modulo_1.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodulo_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodulo_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodulo_1.f90?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -1,7 +1,7 @@\n ! { dg-do compile }\n ! PR fortran/23912\n-  integer*4 i4\n-  integer*8 i8\n+  integer i4\n+  integer(kind=8) i8\n \n   i4 = modulo(i4,i8) ! { dg-warning \"Extension\" }\n   i4 = modulo(i8,i4) ! { dg-warning \"Extension\" }"}, {"sha": "a8705cc508a16d6197e6ab42e8a8b716a8776d10", "filename": "gcc/testsuite/gfortran.dg/namelist_11.f", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_11.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_11.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_11.f?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -7,8 +7,8 @@\n \n       program namelist_1\n \n-      REAL*4 x(10)\n-      REAL*8 xx\n+      REAL x(10)\n+      REAL(kind=8) xx\n       integer ier\n       namelist /mynml/ x, xx\n "}, {"sha": "dba32acfb6657c8524429fa7f984b7a103acc506", "filename": "gcc/testsuite/gfortran.dg/namelist_12.f", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_12.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_12.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_12.f?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -8,8 +8,8 @@\n \n       program namelist_12\n \n-      integer*4 x(10)\n-      integer*8 xx\n+      integer x(10)\n+      integer(kind=8) xx\n       integer ier\n       character*10 ch , check\n       namelist /mynml/ x, xx, ch"}, {"sha": "622177002806a17d36bf4b4477337cc3001a7c77", "filename": "gcc/testsuite/gfortran.dg/namelist_14.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_14.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_14.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_14.f90?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -16,7 +16,7 @@ program namelist_14\n   integer          ::  i(2) = (/101,201/)\n   type(mt)         ::  dt(2)\n   type(mt)         ::  cdt\n-  real*8           ::  pi = 3.14159_8\n+  real(kind=8)           ::  pi = 3.14159_8\n   character*10     ::  chs=\"singleton\"\n   character*10     ::  cha(2)=(/\"first     \",\"second    \"/)\n \n@@ -37,7 +37,7 @@ end function dttest\n   subroutine foo (i, dt, pi, chs, cha)\n     use global\n     common /myc/ cdt\n-    real *8        :: pi                   !local real scalar\n+    real(kind=8)        :: pi                   !local real scalar\n     integer        :: i(2)                 !dummy arg. array\n     integer        :: j(2) = (/21, 21/)    !equivalenced array\n     integer        :: jj                   !    -||-     scalar"}, {"sha": "77960121788115440bdc83caa4fc5cc0ea5ecf1f", "filename": "gcc/testsuite/gfortran.dg/nested_modules_1.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fnested_modules_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fnested_modules_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnested_modules_1.f90?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -4,7 +4,7 @@\n ! Contributed by Paul Thomas  <pault@gcc.gnu.org>\n !\n        module mod0\n-         double complex FOO, KANGA\n+         complex(kind=8) FOO, KANGA\n          common /bar/ FOO, KANGA\n        contains\n          subroutine eyeore ()    \n@@ -20,12 +20,12 @@ end module mod1\n        module mod2\n          use mod0\n          use mod1\n-         real*8 re1, im1, re2, im2, re, im\n+         real(kind=8) re1, im1, re2, im2, re, im\n          common /bar/ re1, im1, re2, im2\n          equivalence (re1, re), (im1, im)\n        contains\n          subroutine tigger (w)\n-           double complex w\n+           complex(kind=8) w\n            if (FOO.ne.(1.0d0, 1.0d0)) call abort ()\n            if (KANGA.ne.(-1.0d0, -1.0d0)) call abort ()\n            if (ROBIN.ne.(99.0d0, 99.0d0)) CALL abort ()"}, {"sha": "1c171a3c902ecf2fb8759281771bb53fb1d373ca", "filename": "gcc/testsuite/gfortran.dg/pr17143.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr17143.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr17143.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr17143.f90?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -2,7 +2,7 @@\n ! pr17143\n ! does not print 2*63 correctly\n        character*25 l\n-       integer*8 i\n+       integer(kind=8) i\n        data i /1/\n        do j = 1,63\n           i = i * 2"}, {"sha": "44c3901a0355c0c9f548adeb5d341c0631784bd8", "filename": "gcc/testsuite/gfortran.dg/pr23095.f", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr23095.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr23095.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr23095.f?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -4,9 +4,9 @@\n       ! GCSE after reload made a stack register live across an abnormal\n       ! edges for one of the computed jumps.  This bombed in reg-stack.\n       function foo(n) \n-      real*8 foo \n+      real(kind=8) foo \n       integer ix, n, next \n-      real*8 xmax, absx \n+      real(kind=8) xmax, absx \n       foo  = 0.0d0 \n       assign 20 to next \n       do ix = 1,n "}, {"sha": "86589c053b68cd5c83565cecbbc897d75f52dd62", "filename": "gcc/testsuite/gfortran.dg/read_float_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fread_float_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fread_float_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fread_float_1.f90?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -4,7 +4,7 @@\n ! resulting in introducing large cumulative floating point errors.\n program foo\n   character*20 s\n-  real*8 d\n+  real(kind=8) d\n   s = \"-.18774312893273    \"\n   read(unit=s, fmt='(g20.14)') d\n   if (d + 0.18774312893273d0 .gt. 1d-13) call abort"}, {"sha": "8f9b09183702cfcd81920d8cfff1560f51e83b6c", "filename": "gcc/testsuite/gfortran.dg/recursive_statement_functions.f90", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Frecursive_statement_functions.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Frecursive_statement_functions.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frecursive_statement_functions.f90?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -29,4 +29,3 @@\n !\n   write(6,*) st1 (1), fi (2), dshpfunc (1.0_8)\n   END\n-"}, {"sha": "72a9fd8d9c86265cc03e407fcd4100a84b5a5b2a", "filename": "gcc/testsuite/gfortran.dg/scale_1.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fscale_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fscale_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fscale_1.f90?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -5,10 +5,10 @@\n \n INTEGER, PARAMETER :: DP = KIND(Y)\n \n-INTEGER*1 I1\n-INTEGER*2 I2\n-INTEGER*4 I4\n-INTEGER*8 I8\n+INTEGER(kind=1) I1\n+INTEGER(kind=2) I2\n+INTEGER(kind=4) I4\n+INTEGER(kind=8) I8\n \n X = 1.\n Y = 1._DP"}, {"sha": "c5d86a21e5b6e8e009e4a67d5443f2c175a5f62e", "filename": "gcc/testsuite/gfortran.dg/secnds.f", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fsecnds.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fsecnds.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsecnds.f?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -7,10 +7,10 @@\n C Contributed by Paul Thomas  <pault@gcc.gnu.org>\n C\n       character*20 dum1, dum2, dum3\n-      real*4 t1, t2\n-      real*4 dat1, dat2\n-      real*4 dt\n-      integer*4 i, j, values(8)\n+      real t1, t2\n+      real dat1, dat2\n+      real dt\n+      integer i, j, values(8)\n       dt = 40e-3\n       t1 = secnds (0.0)\n       call date_and_time (dum1, dum2, dum3, values)"}, {"sha": "2e2997c9bc42005019a0c0031c639af7ad2630c6", "filename": "gcc/testsuite/gfortran.dg/select_5.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_5.f90?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -1,7 +1,7 @@\n ! { dg-do run }\n ! Test mismatched type kinds in a select statement.\n program select_5\n-  integer*1 i          ! kind = 1, -128 <= i < 127\n+  integer(kind=1) i          ! kind = 1, -128 <= i < 127\n   do i = 1, 3\n     select case (i)     \n     case (1_4)         ! kind = 4, reachable"}, {"sha": "118a2de6ef895e4938a51a0b75127c6324524d4d", "filename": "gcc/testsuite/gfortran.dg/spread_scalar_source.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fspread_scalar_source.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fspread_scalar_source.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fspread_scalar_source.f90?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -3,10 +3,10 @@\n \n   character*1 :: i, j(10)\n   character*8 :: buffer\n-  integer*1 :: ii, jj(10)\n+  integer(kind=1) :: ii, jj(10)\n   type :: mytype\n-    real*8 :: x\n-    integer*1 :: i\n+    real(kind=8) :: x\n+    integer(kind=1) :: i\n     character*15 :: ch\n   end type mytype\n   type(mytype) :: iii, jjj(10)\n@@ -49,4 +49,4 @@\n   write (buffer, '(4i2)') spread (31, 1 , 4)\n   if (trim(buffer) /= \"31313131\") call abort ()\n \n-  end\n\\ No newline at end of file\n+  end"}, {"sha": "8c4ec9c3723bc1b55d71193727e197d7783d4c38", "filename": "gcc/testsuite/gfortran.dg/unf_io_convert_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Funf_io_convert_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8652dc8f251fa1997dd5cba26258f5d56ffbb2/gcc%2Ftestsuite%2Fgfortran.dg%2Funf_io_convert_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Funf_io_convert_1.f90?ref=df8652dc8f251fa1997dd5cba26258f5d56ffbb2", "patch": "@@ -14,7 +14,7 @@ program main\n ! set debug to true for help in debugging failures.\n   integer m(2)\n   integer n\n-  real*4 r(size)\n+  real r(size)\n   integer i\n   character*4 str\n "}]}