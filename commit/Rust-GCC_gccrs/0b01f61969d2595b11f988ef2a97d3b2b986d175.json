{"sha": "0b01f61969d2595b11f988ef2a97d3b2b986d175", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIwMWY2MTk2OWQyNTk1YjExZjk4OGVmMmE5N2QzYjJiOTg2ZDE3NQ==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2011-08-16T18:39:55Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2011-08-16T18:39:55Z"}, "message": "spu.c (spu_emit_branch_or_set): Avoid reverse tests when generating an integer result where possible.\n\n\t* config/spu/spu.c (spu_emit_branch_or_set): Avoid reverse tests\n\twhen generating an integer result where possible.  Short-cut\n\tcomparison against 0 also for QImode.\n\nFrom-SVN: r177795", "tree": {"sha": "5fc172635b28458f88080830c4be8ecf8cb549e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fc172635b28458f88080830c4be8ecf8cb549e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b01f61969d2595b11f988ef2a97d3b2b986d175", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b01f61969d2595b11f988ef2a97d3b2b986d175", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b01f61969d2595b11f988ef2a97d3b2b986d175", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b01f61969d2595b11f988ef2a97d3b2b986d175/comments", "author": null, "committer": null, "parents": [{"sha": "2ea0be597eaacb6ca34f0fc8a9249949bcf97d64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ea0be597eaacb6ca34f0fc8a9249949bcf97d64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ea0be597eaacb6ca34f0fc8a9249949bcf97d64"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "1a43c1211f34be146207625d2fe93cf4773c909c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b01f61969d2595b11f988ef2a97d3b2b986d175/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b01f61969d2595b11f988ef2a97d3b2b986d175/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b01f61969d2595b11f988ef2a97d3b2b986d175", "patch": "@@ -1,3 +1,9 @@\n+2011-08-16  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\n+\t* config/spu/spu.c (spu_emit_branch_or_set): Avoid reverse tests\n+\twhen generating an integer result where possible.  Short-cut\n+\tcomparison against 0 also for QImode.\n+\n 2011-08-16  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* config/spu/spu.h (LEGITIMIZE_RELOAD_ADDRESS): New macro."}, {"sha": "b8e3fb35da3afe71b65a616af1c2d45b80e6f7d7", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b01f61969d2595b11f988ef2a97d3b2b986d175/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b01f61969d2595b11f988ef2a97d3b2b986d175/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=0b01f61969d2595b11f988ef2a97d3b2b986d175", "patch": "@@ -982,6 +982,27 @@ spu_emit_branch_or_set (int is_set, rtx cmp, rtx operands[])\n \t  }\n     }\n \n+  /* However, if we generate an integer result, performing a reverse test\n+     would require an extra negation, so avoid that where possible.  */\n+  if (GET_CODE (op1) == CONST_INT && is_set == 1)\n+    {\n+      HOST_WIDE_INT val = INTVAL (op1) + 1;\n+      if (trunc_int_for_mode (val, GET_MODE (op0)) == val)\n+\tswitch (code)\n+\t  {\n+\t  case LE:\n+\t    op1 = GEN_INT (val);\n+\t    code = LT;\n+\t    break;\n+\t  case LEU:\n+\t    op1 = GEN_INT (val);\n+\t    code = LTU;\n+\t    break;\n+\t  default:\n+\t    break;\n+\t  }\n+    }\n+\n   comp_mode = SImode;\n   op_mode = GET_MODE (op0);\n \n@@ -1113,7 +1134,8 @@ spu_emit_branch_or_set (int is_set, rtx cmp, rtx operands[])\n \n   if (is_set == 0 && op1 == const0_rtx\n       && (GET_MODE (op0) == SImode\n-\t  || GET_MODE (op0) == HImode) && scode == SPU_EQ)\n+\t  || GET_MODE (op0) == HImode\n+\t  || GET_MODE (op0) == QImode) && scode == SPU_EQ)\n     {\n       /* Don't need to set a register with the result when we are \n          comparing against zero and branching. */"}]}