{"sha": "803596fe9591026a50b59ff961ebc114097677b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODAzNTk2ZmU5NTkxMDI2YTUwYjU5ZmY5NjFlYmMxMTQwOTc2NzdiNQ==", "commit": {"author": {"name": "Stefan Schulze Frielinghaus", "email": "stefansf@linux.ibm.com", "date": "2020-03-10T09:49:28Z"}, "committer": {"name": "Stefan Schulze Frielinghaus", "email": "stefansf@linux.ibm.com", "date": "2020-04-22T14:57:37Z"}, "message": "S/390: Fix several test cases\n\ngcc/ChangeLog:\n\n2020-04-21  Stefan Schulze Frielinghaus  <stefansf@linux.ibm.com>\n\n\t* config/s390/s390.md (\"*<risbg_n>_ior_and_sr_ze<mode>\"): Lift from SI\n\tmode to DSI. (\"*trunc_sidi_and_subreg_ze<clobbercc_or_nocc>\"): New\n\tinsn pattern.\n\ngcc/testsuite/ChangeLog:\n\n2020-04-21  Stefan Schulze Frielinghaus  <stefansf@linux.ibm.com>\n\n\t* gcc.target/s390/addsub-signed-overflow-1.c: Fix options.\n\t* gcc.target/s390/addsub-signed-overflow-2.c: Fix options.\n\t* gcc.target/s390/bswap-1.c: Fix scan assembler regex.\n\t* gcc.target/s390/global-array-element-pic2.c: Fix scan assembler regex.\n\t* gcc.target/s390/load-relative-check.c: Fix options.\n\t* gcc.target/s390/morestack.c: Fix options.\n\t* gcc.target/s390/nobp-return-mem-z900.c: Temporarily silence this case.\n\t* gcc.target/s390/risbg-ll-1.c: Fix scan assembler regex.\n\t* gcc.target/s390/risbg-ll-2.c: Fix scan assembler regex.\n\t* gcc.target/s390/risbg-ll-3.c: Fix scan assembler regex.\n\t* gcc.target/s390/target-attribute/pr82012.c: Fix error message.", "tree": {"sha": "1a94cf0bb3fa8b5777895c7ac98afeaf71a538ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a94cf0bb3fa8b5777895c7ac98afeaf71a538ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/803596fe9591026a50b59ff961ebc114097677b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/803596fe9591026a50b59ff961ebc114097677b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/803596fe9591026a50b59ff961ebc114097677b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/803596fe9591026a50b59ff961ebc114097677b5/comments", "author": {"login": "stefan-sf-ibm", "id": 73470131, "node_id": "MDQ6VXNlcjczNDcwMTMx", "avatar_url": "https://avatars.githubusercontent.com/u/73470131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stefan-sf-ibm", "html_url": "https://github.com/stefan-sf-ibm", "followers_url": "https://api.github.com/users/stefan-sf-ibm/followers", "following_url": "https://api.github.com/users/stefan-sf-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/stefan-sf-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/stefan-sf-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stefan-sf-ibm/subscriptions", "organizations_url": "https://api.github.com/users/stefan-sf-ibm/orgs", "repos_url": "https://api.github.com/users/stefan-sf-ibm/repos", "events_url": "https://api.github.com/users/stefan-sf-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/stefan-sf-ibm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "stefan-sf-ibm", "id": 73470131, "node_id": "MDQ6VXNlcjczNDcwMTMx", "avatar_url": "https://avatars.githubusercontent.com/u/73470131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stefan-sf-ibm", "html_url": "https://github.com/stefan-sf-ibm", "followers_url": "https://api.github.com/users/stefan-sf-ibm/followers", "following_url": "https://api.github.com/users/stefan-sf-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/stefan-sf-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/stefan-sf-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stefan-sf-ibm/subscriptions", "organizations_url": "https://api.github.com/users/stefan-sf-ibm/orgs", "repos_url": "https://api.github.com/users/stefan-sf-ibm/repos", "events_url": "https://api.github.com/users/stefan-sf-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/stefan-sf-ibm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1be62528078aef241fef6d2fe1cbc8e8e5379115", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1be62528078aef241fef6d2fe1cbc8e8e5379115", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1be62528078aef241fef6d2fe1cbc8e8e5379115"}], "stats": {"total": 99, "additions": 59, "deletions": 40}, "files": [{"sha": "cf53ef1b7915f0d617e2a96d66f09281d4a69b0d", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/803596fe9591026a50b59ff961ebc114097677b5/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/803596fe9591026a50b59ff961ebc114097677b5/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=803596fe9591026a50b59ff961ebc114097677b5", "patch": "@@ -3970,22 +3970,21 @@\n   [(set_attr \"op_type\" \"RIE\")\n    (set_attr \"z10prop\" \"z10_super_E1\")])\n \n-; 32 bit: (a & -16) | ((b >> 8) & 15)\n-(define_insn \"*<risbg_n>_ior_and_sr_ze\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(ior:SI (and:SI\n-\t\t (match_operand:SI 1 \"register_operand\" \"0\")\n-\t\t (match_operand:SI 2 \"const_int_operand\" \"\"))\n-\t\t(subreg:SI\n-\t\t (zero_extract:DI\n-\t\t  (match_operand:DI 3 \"register_operand\" \"d\")\n-\t\t  (match_operand 4 \"const_int_operand\" \"\") ; size\n+; (a & -16) | ((b >> 8) & 15)\n+(define_insn \"*<risbg_n>_ior_and_sr_ze<mode>\"\n+  [(set (match_operand:DSI 0 \"register_operand\" \"=d\")\n+\t(ior:DSI (and:DSI\n+\t\t  (match_operand:DSI 1 \"register_operand\" \"0\")\n+\t\t  (match_operand:DSI 2 \"const_int_operand\" \"\"))\n+\t\t (zero_extract:DSI\n+\t\t  (match_operand:DSI 3 \"register_operand\" \"d\")\n+\t\t  (match_operand 4 \"const_int_operand\" \"\")  ; size\n \t\t  (match_operand 5 \"const_int_operand\" \"\")) ; start\n-\t\t 4)))]\n+\t\t  ))]\n   \"<z10_or_zEC12_cond>\n-   && EXTRACT_ARGS_IN_RANGE (INTVAL (operands[4]), INTVAL (operands[5]), 64)\n+   && EXTRACT_ARGS_IN_RANGE (INTVAL (operands[4]), INTVAL (operands[5]), <DSI:bitsize>)\n    && UINTVAL (operands[2]) == (HOST_WIDE_INT_M1U << UINTVAL (operands[4]))\"\n-  \"<risbg_n>\\t%0,%3,64-%4,63,%4+%5\"\n+  \"<risbg_n>\\t%0,%3,64-%4,63,(64-<DSI:bitsize>)+%4+%5\"\n   [(set_attr \"op_type\" \"RIE\")\n    (set_attr \"z10prop\" \"z10_super_E1\")])\n \n@@ -4237,6 +4236,20 @@\n   [(set_attr \"op_type\" \"RIE\")\n    (set_attr \"z10prop\" \"z10_super_E1\")])\n \n+; (ui32)(((ui64)x) >> 12) & -4\n+(define_insn \"*trunc_sidi_and_subreg_ze<clobbercc_or_nocc>\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(and:SI\n+\t (subreg:SI (zero_extract:DI\n+\t\t     (match_operand:DI 1 \"register_operand\" \"d\")\n+\t\t     (const_int 32)\n+\t\t     (match_operand:SI 2 \"nonzero_shift_count_operand\" \"\")) 4)\n+\t (match_operand:SI 3 \"contiguous_bitmask_nowrap_operand\" \"\")))]\n+  \"<z10_or_zEC12_cond>\"\n+  \"<risbg_n>\\t%0,%1,%t3,128+%f3,32+%2\"\n+  [(set_attr \"op_type\" \"RIE\")\n+   (set_attr \"z10prop\" \"z10_super_E1\")])\n+\n ; z = (x << c) | (y >> d) with (x << c) and (y >> d) not overlapping after shifting\n ;  -> z = y >> d; z = (x << c) | (z & ((1 << c) - 1))\n ;  -> z = y >> d; z = risbg;"}, {"sha": "ebc024795872375023b95b5ac1c5dd2f21e76422", "filename": "gcc/testsuite/gcc.target/s390/addsub-signed-overflow-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/803596fe9591026a50b59ff961ebc114097677b5/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Faddsub-signed-overflow-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/803596fe9591026a50b59ff961ebc114097677b5/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Faddsub-signed-overflow-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Faddsub-signed-overflow-1.c?ref=803596fe9591026a50b59ff961ebc114097677b5", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O3 -mzarch --save-temps\" } */\n+/* { dg-options \"-O3 -march=z13 -mzarch --save-temps\" } */\n \n #include <stddef.h>\n #include <limits.h>"}, {"sha": "8bd1a764bc686048c315b0934f43874d13e4a400", "filename": "gcc/testsuite/gcc.target/s390/addsub-signed-overflow-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/803596fe9591026a50b59ff961ebc114097677b5/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Faddsub-signed-overflow-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/803596fe9591026a50b59ff961ebc114097677b5/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Faddsub-signed-overflow-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Faddsub-signed-overflow-2.c?ref=803596fe9591026a50b59ff961ebc114097677b5", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O3 -mzarch --save-temps\" } */\n+/* { dg-options \"-O3 -march=z13 -mzarch --save-temps\" } */\n \n #include <stddef.h>\n #include <limits.h>"}, {"sha": "c11a0ea780bbbb79604f45d4114a84c8a1c8883f", "filename": "gcc/testsuite/gcc.target/s390/bswap-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/803596fe9591026a50b59ff961ebc114097677b5/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fbswap-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/803596fe9591026a50b59ff961ebc114097677b5/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fbswap-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fbswap-1.c?ref=803596fe9591026a50b59ff961ebc114097677b5", "patch": "@@ -19,14 +19,14 @@ foo64b ()\n {\n   return __builtin_bswap64 (u64);\n }\n-/* { dg-final { scan-assembler-times \"lrvg\\t%r2,0\\\\(%r\\[0-9\\]*\\\\)\" 1 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times \"lrvg\\t%r2,\\[0-9\\]+\\\\(%r\\[0-9\\]*\\\\)\" 1 { target lp64 } } } */\n \n void\n foo64c (uint64_t a)\n {\n   u64 = __builtin_bswap64 (a);\n }\n-/* { dg-final { scan-assembler-times \"strvg\\t%r2,0\\\\(%r\\[0-9\\]*\\\\)\" 1 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times \"strvg\\t%r2,\\[0-9\\]+\\\\(%r\\[0-9\\]*\\\\)\" 1 { target lp64 } } } */\n \n \n \n@@ -42,11 +42,11 @@ foo32b ()\n {\n   return __builtin_bswap32 (u32);\n }\n-/* { dg-final { scan-assembler-times \"lrv\\t%r2,0\\\\(%r\\[0-9\\]*\\\\)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"lrv\\t%r2,\\[0-9\\]+\\\\(%r\\[0-9\\]*\\\\)\" 1 } } */\n \n void\n foo32c (uint32_t a)\n {\n   u32 = __builtin_bswap32 (a);\n }\n-/* { dg-final { scan-assembler-times \"strv\\t%r2,0\\\\(%r\\[0-9\\]*\\\\)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"strv\\t%r2,\\[0-9\\]+\\\\(%r\\[0-9\\]*\\\\)\" 1 } } */"}, {"sha": "72b87d40b85596111cc552d989a030025e0bb7ae", "filename": "gcc/testsuite/gcc.target/s390/global-array-element-pic2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/803596fe9591026a50b59ff961ebc114097677b5/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fglobal-array-element-pic2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/803596fe9591026a50b59ff961ebc114097677b5/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fglobal-array-element-pic2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fglobal-array-element-pic2.c?ref=803596fe9591026a50b59ff961ebc114097677b5", "patch": "@@ -8,6 +8,6 @@ extern char *b;\n void c()\n {\n   b = a + 4;\n-  /* { dg-final { scan-assembler {(?n)\\n\\tlgrl\\t%r\\d+,a@GOTENT\\n} } } */\n-  /* { dg-final { scan-assembler-not {(?n)\\n\\tlarl\\t%r\\d+,a[^@]} } } */\n+  /* { dg-final { scan-assembler \"(?n)\\n\\tlgrl\\t%r\\\\d+,a@GOTENT\\n\" } } */\n+  /* { dg-final { scan-assembler-not \"(?n)\\n\\tlarl\\t%r\\\\d+,a\\[^@\\]\" } } */\n }"}, {"sha": "a55bc2442f17ee7bd76eaf8263990cf5f510e4be", "filename": "gcc/testsuite/gcc.target/s390/load-relative-check.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/803596fe9591026a50b59ff961ebc114097677b5/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fload-relative-check.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/803596fe9591026a50b59ff961ebc114097677b5/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fload-relative-check.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fload-relative-check.c?ref=803596fe9591026a50b59ff961ebc114097677b5", "patch": "@@ -1,6 +1,6 @@\n /* Check if load-relative instructions are created */\n /* { dg-do compile { target { s390*-*-* } } } */\n-/* { dg-options \"-O2 -march=z10 -mzarch\" } */\n+/* { dg-options \"-O2 -march=z10 -mzarch -fno-section-anchors\" } */\n \n /* { dg-final { scan-assembler \"lgfrl\\t%r.?,b.4\" { target { lp64 } } } } */\n /* { dg-final { scan-assembler \"lgfrl\\t%r.?,s.12\" { target { lp64 } } } } */"}, {"sha": "4cfa220e737f0cb9ab673ab178fd86503c9b03bd", "filename": "gcc/testsuite/gcc.target/s390/morestack.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/803596fe9591026a50b59ff961ebc114097677b5/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmorestack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/803596fe9591026a50b59ff961ebc114097677b5/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmorestack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmorestack.c?ref=803596fe9591026a50b59ff961ebc114097677b5", "patch": "@@ -3,7 +3,7 @@\n    pointer being correct.  */\n \n /* { dg-do run } */\n-/* { dg-options \"\" } */\n+/* { dg-options \"-O2 -fsplit-stack\" } */\n \n #include <stdlib.h>\n "}, {"sha": "3d6aca1f95fa6774dd78cee1a7de5d62af894f7e", "filename": "gcc/testsuite/gcc.target/s390/nobp-return-mem-z900.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/803596fe9591026a50b59ff961ebc114097677b5/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fnobp-return-mem-z900.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/803596fe9591026a50b59ff961ebc114097677b5/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fnobp-return-mem-z900.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fnobp-return-mem-z900.c?ref=803596fe9591026a50b59ff961ebc114097677b5", "patch": "@@ -21,6 +21,15 @@ foo (int a)\n     gl += bar (i);\n }\n \n+void __attribute__((noinline,noclone))\n+baz (int a)\n+{\n+  int i;\n+\n+  for (i = 0; i < a; i++)\n+    gl += bar (i);\n+}\n+\n int\n main ()\n {\n@@ -31,13 +40,13 @@ main ()\n   return 0;\n }\n \n-/* 1 x foo, 1 x main\n-/* { dg-final { scan-assembler-times \"jg\\t__s390_indirect_jump\" 2 } } */\n+/* 1 x foo, 1 x baz, 1 x main */\n+/* { dg-final { scan-assembler-times \"jg\\t__s390_indirect_jump\" 3 } } */\n \n-/* 1 x foo, conditional return, shrink wrapped\n+/* 1 x foo, conditional return, shrink wrapped */\n /* { dg-final { scan-assembler \"jge\\t__s390_indirect_jump\" } } */\n \n-/* 1 x foo, conditional return, shrink wrapped\n+/* 1 x baz, conditional return, shrink wrapped */\n /* { dg-final { scan-assembler \"jgle\\t__s390_indirect_jump\" } } */\n \n /* { dg-final { scan-assembler \"ex\\t\" } } */"}, {"sha": "1cac15820c067cd980bb15f1f366c9e98d16918d", "filename": "gcc/testsuite/gcc.target/s390/risbg-ll-1.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/803596fe9591026a50b59ff961ebc114097677b5/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Frisbg-ll-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/803596fe9591026a50b59ff961ebc114097677b5/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Frisbg-ll-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Frisbg-ll-1.c?ref=803596fe9591026a50b59ff961ebc114097677b5", "patch": "@@ -214,14 +214,11 @@ i64 f18 (i64 v_foo)\n }\n \n // Test an arithmetic shift right in which some of the sign bits are kept.\n-// This needs a separate shift and mask.\n+// This needs a separate shift and mask on 31 bit.\n i32 f19 (i32 v_foo)\n {\n-  /* Should be\n-     { dg-final { scan-assembler \"f19:\\n\\tsra\\t%r2,28\\n\\tnilf\\t%r2,30\" { xfail { lp64 } } } }\n-     but because a zeroextend is merged into the pattern it is actually\n-     { dg-final { scan-assembler \"f19:\\n\\tsra\\t%r2,28\\n\\trisbg\\t%r2,%r2,59,128\\\\\\+62,0\" { target { lp64 } } } }\n-     { dg-final { scan-assembler \"f19:\\n\\tsra\\t%r2,28\\n\\tnilf\\t%r2,30\" { target { ! lp64 } } } } */\n+  /* { dg-final { scan-assembler \"f19:\\n\\trisbg\\t%r2,%r2,59,128\\\\+62,64-28\" { target { lp64 } } } } */\n+  /* { dg-final { scan-assembler \"f19:\\n\\tsra\\t%r2,28\\n\\tnilf\\t%r2,30\" { target { ! lp64 } } } } */\n   i32 v_shr = v_foo >> 28;\n   i32 v_and = v_shr & 30;\n   return v_and;\n@@ -273,7 +270,7 @@ i64 f23 (i64 v_foo)\n // mask and rotate.\n i32 f24 (i32 v_foo)\n {\n-  /* { dg-final { scan-assembler \"f24:\\n\\tnilf\\t%r2,254\\n\\trll\\t%r2,%r2,29\" } } */\n+  /* { dg-final { scan-assembler \"f24:\\n\\tnilf\\t%r2,254\\n\\trll\\t%r2,%r2,29\\n\" } } */\n   i32 v_and = v_foo & 254;\n   i32 v_parta = ((ui32)v_and) >> 3;\n   i32 v_partb = v_and << 29;\n@@ -478,7 +475,7 @@ i64 f42 (t42 v_x)\n // Check that we get the case where a 64-bit shift is used by a 32-bit and.\n i32 f43 (i64 v_x)\n {\n-  /* { dg-final { scan-assembler \"f43:\\n\\trisbg\\t%r2,%r2,32,128\\\\\\+61,64-12\" { target { lp64 } } } } */\n+  /* { dg-final { scan-assembler \"f43:\\n\\trisbg\\t%r2,%r2,32,128\\\\+61,32\\\\+20\\n\\tlgfr\\t%r2,%r2\" { target { lp64 } } } } */\n   /* { dg-final { scan-assembler \"f43:\\n\\trisbg\\t%r3,%r2,0,0\\\\\\+32-1,64-0-32\\n\\trisbg\\t%r2,%r3,32,128\\\\\\+61,64-12\" { target { ! lp64 } } } } */\n   i64 v_shr3 = ((ui64)v_x) >> 12;\n   i32 v_shr3_tr = (ui32)v_shr3;"}, {"sha": "8bf1a0ff88bfe672fd46532cc3788aad2bccd551", "filename": "gcc/testsuite/gcc.target/s390/risbg-ll-2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/803596fe9591026a50b59ff961ebc114097677b5/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Frisbg-ll-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/803596fe9591026a50b59ff961ebc114097677b5/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Frisbg-ll-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Frisbg-ll-2.c?ref=803596fe9591026a50b59ff961ebc114097677b5", "patch": "@@ -34,7 +34,7 @@ i64 f2 (i64 v_a, i64 v_b)\n // Test a case with two ANDs and a shift.\n i32 f3 (i32 v_a, i32 v_b)\n {\n-  /* { dg-final { scan-assembler \"f3:\\n\\trisbg\\t%r2,%r3,64-4,63,4\\\\\\+52\" } } */\n+  /* { dg-final { scan-assembler \"f3:\\n\\trisbg\\t%r2,%r3,64-4,63,\\\\(64-32\\\\)\\\\+4\\\\+20\\n\\tlgfr\\t%r2,%r2\" } } */\n   i32 v_anda = v_a & -16;\n   i32 v_shr = ((ui32)v_b) >> 8;\n   i32 v_andb = v_shr & 15;\n@@ -45,8 +45,8 @@ i32 f3 (i32 v_a, i32 v_b)\n // ...and again with i64.\n i64 f4 (i64 v_a, i64 v_b)\n {\n-  /* { dg-final { scan-assembler \"f4:\\n\\trisbg\\t%r2,%r3,60,60\\\\\\+4-1,128-60-4-8\" { target { lp64 } } } } */\n-  /* { dg-final { scan-assembler \"f4:\\n\\(\\t.*\\n\\)*\\trisbg\\t%r5,%r5,64-4,128\\\\\\+63,52\\\\\\+4\" { target { ! lp64 } } } } */\n+  /* { dg-final { scan-assembler \"f4:\\n\\trisbg\\t%r2,%r3,64-4,63,\\\\(64-64\\\\)\\\\+4\\\\+52\" { target { lp64 } } } } */\n+  /* { dg-final { scan-assembler \"f4:\\n\\(\\t.*\\n\\)*\\trisbg\\t%r5,%r5,64-4,128\\\\+63,\\\\(64-64\\\\)\\\\+52\\\\+4\" { target { ! lp64 } } } } */\n   i64 v_anda = v_a & -16;\n   i64 v_shr = ((ui64)v_b) >> 8;\n   i64 v_andb = v_shr & 15;"}, {"sha": "90d37f2c1ce45715bb518c22b0b3eb105b735e47", "filename": "gcc/testsuite/gcc.target/s390/risbg-ll-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/803596fe9591026a50b59ff961ebc114097677b5/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Frisbg-ll-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/803596fe9591026a50b59ff961ebc114097677b5/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Frisbg-ll-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Frisbg-ll-3.c?ref=803596fe9591026a50b59ff961ebc114097677b5", "patch": "@@ -11,7 +11,7 @@\n // On zEC12, we generally prefer RISBGN.\n i64 f1 (i64 v_a, i64 v_b)\n {\n-/* { dg-final { scan-assembler \"f1:\\n\\trisbgn\\t%r2,%r3,60,60\\\\\\+3-1,128-60-3-1\" { target { lp64 } } } } */\n+/* { dg-final { scan-assembler \"f1:\\n\\trisbgn\\t%r2,%r3,60,62,0\" { target { lp64 } } } } */\n /* { dg-final { scan-assembler \"f1:\\n\\trisbgn\\t%r3,%r2,0,0\\\\\\+32-1,64-0-32\\n\\trisbgn\\t%r3,%r5,60,62,0\\n\" { target { ! lp64 } } } } */\n   i64 v_anda = v_a & -15;\n   i64 v_andb = v_b & 14;"}, {"sha": "ad1bf76d4d20c9d9bcf882259da17643febd1512", "filename": "gcc/testsuite/gcc.target/s390/target-attribute/pr82012.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/803596fe9591026a50b59ff961ebc114097677b5/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Ftarget-attribute%2Fpr82012.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/803596fe9591026a50b59ff961ebc114097677b5/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Ftarget-attribute%2Fpr82012.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Ftarget-attribute%2Fpr82012.c?ref=803596fe9591026a50b59ff961ebc114097677b5", "patch": "@@ -34,7 +34,7 @@ int __attribute__ ((target (\"soft-float\"))) test2 (int a)\n \n /* Inlining needs to be rejected.  foo3 performs HW FP operation.  */\n \n-int __attribute__ ((always_inline)) foo3 (int a) /* { dg-error \"inlining failed in call to always_inline\" } */\n+int __attribute__ ((always_inline)) foo3 (int a) /* { dg-error \"inlining failed in call to 'always_inline'\" } */\n {\n   g = (double) a / 2.0;\n   return 0;"}]}