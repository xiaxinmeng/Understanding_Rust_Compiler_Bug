{"sha": "faa163f737cb388f97a285be28060730abd460a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFhMTYzZjczN2NiMzg4Zjk3YTI4NWJlMjgwNjA3MzBhYmQ0NjBhMA==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2020-06-15T21:14:14Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-07-27T08:05:16Z"}, "message": "[Ada] AI12-0382: Loosen type-invariant overriding requirement of AI12-0042\n\ngcc/ada/\n\n\t* sem_ch3.adb (Check_Abstract_Overriding): Remove Scope\n\tcomparison test from test related to initial implementation of\n\tAI12-0042, plus remove the related ??? comment.\n\t(Derive_Subprogram): Add test requiring that the type extension\n\tappear in the visible part of its enclosing package when\n\tchecking the overriding requirement of 7.3.2(6.1/4), as\n\tclarified by AI12-0382.", "tree": {"sha": "7af92930374a8f30e3d503d72b6f79b29110bfe5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7af92930374a8f30e3d503d72b6f79b29110bfe5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/faa163f737cb388f97a285be28060730abd460a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faa163f737cb388f97a285be28060730abd460a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faa163f737cb388f97a285be28060730abd460a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faa163f737cb388f97a285be28060730abd460a0/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df81923f6d805ebf390e116b1902d0c8ec93c477", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df81923f6d805ebf390e116b1902d0c8ec93c477", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df81923f6d805ebf390e116b1902d0c8ec93c477"}], "stats": {"total": 15, "additions": 6, "deletions": 9}, "files": [{"sha": "6cc315ce40ea6f32cba79f581c1453e0ba881b4e", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa163f737cb388f97a285be28060730abd460a0/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa163f737cb388f97a285be28060730abd460a0/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=faa163f737cb388f97a285be28060730abd460a0", "patch": "@@ -10763,12 +10763,7 @@ package body Sem_Ch3 is\n          --  AI12-0042: Test for rule in 7.3.2(6.1/4), that requires overriding\n          --  of a visible private primitive inherited from an ancestor with\n          --  the aspect Type_Invariant'Class, unless the inherited primitive\n-         --  is abstract. (The test for the extension occurring in a different\n-         --  scope than the ancestor is to avoid requiring overriding when\n-         --  extending in the same scope, because the inherited primitive will\n-         --  also be private in that case, which looks like an unhelpful\n-         --  restriction that may break reasonable code, though the rule\n-         --  appears to apply in the same-scope case as well???)\n+         --  is abstract.\n \n          elsif not Is_Abstract_Subprogram (Subp)\n            and then not Comes_From_Source (Subp) -- An inherited subprogram\n@@ -10778,7 +10773,6 @@ package body Sem_Ch3 is\n            and then Present (Get_Pragma (Etype (T), Pragma_Invariant))\n            and then Class_Present (Get_Pragma (Etype (T), Pragma_Invariant))\n            and then Is_Private_Primitive (Alias_Subp)\n-           and then Scope (Subp) /= Scope (Alias_Subp)\n          then\n             Error_Msg_NE\n               (\"inherited private primitive & must be overridden\", T, Subp);\n@@ -15732,7 +15726,9 @@ package body Sem_Ch3 is\n                    --  AI12-0042: Set Requires_Overriding when a type extension\n                    --  inherits a private operation that is visible at the\n                    --  point of extension (Has_Private_Ancestor is False) from\n-                   --  an ancestor that has Type_Invariant'Class.\n+                   --  an ancestor that has Type_Invariant'Class, and when the\n+                   --  type extension is in a visible part (the latter as\n+                   --  clarified by AI12-0382).\n \n                    or else\n                      (not Has_Private_Ancestor (Derived_Type)\n@@ -15742,7 +15738,8 @@ package body Sem_Ch3 is\n                        and then\n                          Class_Present\n                            (Get_Pragma (Parent_Type, Pragma_Invariant))\n-                       and then Is_Private_Primitive (Parent_Subp)))\n+                       and then Is_Private_Primitive (Parent_Subp)\n+                       and then In_Visible_Part (Scope (Derived_Type))))\n \n         and then No (Actual_Subp)\n       then"}]}