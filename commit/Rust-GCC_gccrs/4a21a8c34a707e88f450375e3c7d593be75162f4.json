{"sha": "4a21a8c34a707e88f450375e3c7d593be75162f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGEyMWE4YzM0YTcwN2U4OGY0NTAzNzVlM2M3ZDU5M2JlNzUxNjJmNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-07-16T12:53:42Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-07-19T05:59:43Z"}, "message": "Remove gimple_expr_type uses from value-range code\n\nThis removes the last uses from value-range code.\n\n2021-07-16  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vrp.c (register_edge_assert_for_2): Use the\n\ttype from the LHS.\n\t(vrp_folder::fold_predicate_in): Likewise.\n\t* vr-values.c (gimple_assign_nonzero_p): Likewise.\n\t(vr_values::extract_range_from_comparison): Likewise.\n\t(vr_values::extract_range_from_ubsan_builtin): Use the\n\ttype of the first operand.\n\t(vr_values::extract_range_basic): Push down type\n\tcomputation, use the appropriate LHS.\n\t(vr_values::extract_range_from_assignment): Use the\n\ttype of the LHS.", "tree": {"sha": "e7bc4d81323b916aa15380088689036ea0111147", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7bc4d81323b916aa15380088689036ea0111147"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a21a8c34a707e88f450375e3c7d593be75162f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a21a8c34a707e88f450375e3c7d593be75162f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a21a8c34a707e88f450375e3c7d593be75162f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a21a8c34a707e88f450375e3c7d593be75162f4/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdea84c4b5773723fa3ac7fa01f33542093864d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdea84c4b5773723fa3ac7fa01f33542093864d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdea84c4b5773723fa3ac7fa01f33542093864d5"}], "stats": {"total": 42, "additions": 23, "deletions": 19}, "files": [{"sha": "a9c31bcedb5034386b439fc984115cd6957d9087", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a21a8c34a707e88f450375e3c7d593be75162f4/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a21a8c34a707e88f450375e3c7d593be75162f4/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=4a21a8c34a707e88f450375e3c7d593be75162f4", "patch": "@@ -1484,13 +1484,13 @@ register_edge_assert_for_2 (tree name, edge e,\n \t}\n \n       /* Extract NAME2 from the (optional) sign-changing cast.  */\n-      if (gimple_assign_cast_p (def_stmt))\n+      if (gassign *ass = dyn_cast <gassign *> (def_stmt))\n \t{\n-\t  if (CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (def_stmt))\n-\t      && ! TYPE_UNSIGNED (TREE_TYPE (gimple_assign_rhs1 (def_stmt)))\n-\t      && (TYPE_PRECISION (gimple_expr_type (def_stmt))\n-\t\t  == TYPE_PRECISION (TREE_TYPE (gimple_assign_rhs1 (def_stmt)))))\n-\t    name3 = gimple_assign_rhs1 (def_stmt);\n+\t  if (CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (ass))\n+\t      && ! TYPE_UNSIGNED (TREE_TYPE (gimple_assign_rhs1 (ass)))\n+\t      && (TYPE_PRECISION (TREE_TYPE (gimple_assign_lhs (ass)))\n+\t\t  == TYPE_PRECISION (TREE_TYPE (gimple_assign_rhs1 (ass)))))\n+\t    name3 = gimple_assign_rhs1 (ass);\n \t}\n \n       /* If name3 is used later, create an ASSERT_EXPR for it.  */\n@@ -4119,7 +4119,7 @@ vrp_folder::fold_predicate_in (gimple_stmt_iterator *si)\n   if (val)\n     {\n       if (assignment_p)\n-        val = fold_convert (gimple_expr_type (stmt), val);\n+\tval = fold_convert (TREE_TYPE (gimple_assign_lhs (stmt)), val);\n \n       if (dump_file)\n \t{"}, {"sha": "1b3ec38d2881b6b64b95d138282867657bb5f93e", "filename": "gcc/vr-values.c", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a21a8c34a707e88f450375e3c7d593be75162f4/gcc%2Fvr-values.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a21a8c34a707e88f450375e3c7d593be75162f4/gcc%2Fvr-values.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.c?ref=4a21a8c34a707e88f450375e3c7d593be75162f4", "patch": "@@ -338,16 +338,17 @@ gimple_assign_nonzero_p (gimple *stmt)\n {\n   enum tree_code code = gimple_assign_rhs_code (stmt);\n   bool strict_overflow_p;\n+  tree type = TREE_TYPE (gimple_assign_lhs (stmt));\n   switch (get_gimple_rhs_class (code))\n     {\n     case GIMPLE_UNARY_RHS:\n       return tree_unary_nonzero_warnv_p (gimple_assign_rhs_code (stmt),\n-\t\t\t\t\t gimple_expr_type (stmt),\n+\t\t\t\t\t type,\n \t\t\t\t\t gimple_assign_rhs1 (stmt),\n \t\t\t\t\t &strict_overflow_p);\n     case GIMPLE_BINARY_RHS:\n       return tree_binary_nonzero_warnv_p (gimple_assign_rhs_code (stmt),\n-\t\t\t\t\t  gimple_expr_type (stmt),\n+\t\t\t\t\t  type,\n \t\t\t\t\t  gimple_assign_rhs1 (stmt),\n \t\t\t\t\t  gimple_assign_rhs2 (stmt),\n \t\t\t\t\t  &strict_overflow_p);\n@@ -1025,7 +1026,7 @@ vr_values::extract_range_from_comparison (value_range_equiv *vr,\n \t\t\t\t\t  gimple *stmt)\n {\n   enum tree_code code = gimple_assign_rhs_code (stmt);\n-  tree type = gimple_expr_type (stmt);\n+  tree type = TREE_TYPE (gimple_assign_lhs (stmt));\n   tree op0 = gimple_assign_rhs1 (stmt);\n   tree op1 = gimple_assign_rhs2 (stmt);\n   bool sop;\n@@ -1164,7 +1165,6 @@ bool\n vr_values::extract_range_from_ubsan_builtin (value_range_equiv *vr, gimple *stmt)\n {\n   gcc_assert (is_gimple_call (stmt));\n-  tree type = gimple_expr_type (stmt);\n   enum tree_code subcode = ERROR_MARK;\n   combined_fn cfn = gimple_call_combined_fn (stmt);\n   scalar_int_mode mode;\n@@ -1190,7 +1190,8 @@ vr_values::extract_range_from_ubsan_builtin (value_range_equiv *vr, gimple *stmt\n \t any overflow, we'll complain, but will actually do\n \t wrapping operation.  */\n       flag_wrapv = 1;\n-      extract_range_from_binary_expr (vr, subcode, type,\n+      extract_range_from_binary_expr (vr, subcode,\n+\t\t\t\t      TREE_TYPE (gimple_call_arg (stmt, 0)),\n \t\t\t\t      gimple_call_arg (stmt, 0),\n \t\t\t\t      gimple_call_arg (stmt, 1));\n       flag_wrapv = saved_flag_wrapv;\n@@ -1217,7 +1218,6 @@ void\n vr_values::extract_range_basic (value_range_equiv *vr, gimple *stmt)\n {\n   bool sop;\n-  tree type = gimple_expr_type (stmt);\n \n   if (is_gimple_call (stmt))\n     {\n@@ -1244,13 +1244,14 @@ vr_values::extract_range_basic (value_range_equiv *vr, gimple *stmt)\n   /* Handle extraction of the two results (result of arithmetics and\n      a flag whether arithmetics overflowed) from {ADD,SUB,MUL}_OVERFLOW\n      internal function.  Similarly from ATOMIC_COMPARE_EXCHANGE.  */\n-  else if (is_gimple_assign (stmt)\n-\t   && (gimple_assign_rhs_code (stmt) == REALPART_EXPR\n-\t       || gimple_assign_rhs_code (stmt) == IMAGPART_EXPR)\n-\t   && INTEGRAL_TYPE_P (type))\n+  if (is_gimple_assign (stmt)\n+      && (gimple_assign_rhs_code (stmt) == REALPART_EXPR\n+\t  || gimple_assign_rhs_code (stmt) == IMAGPART_EXPR)\n+      && INTEGRAL_TYPE_P (TREE_TYPE (gimple_assign_lhs (stmt))))\n     {\n       enum tree_code code = gimple_assign_rhs_code (stmt);\n       tree op = gimple_assign_rhs1 (stmt);\n+      tree type = TREE_TYPE (gimple_assign_lhs (stmt));\n       if (TREE_CODE (op) == code && TREE_CODE (TREE_OPERAND (op, 0)) == SSA_NAME)\n \t{\n \t  gimple *g = SSA_NAME_DEF_STMT (TREE_OPERAND (op, 0));\n@@ -1328,6 +1329,9 @@ vr_values::extract_range_basic (value_range_equiv *vr, gimple *stmt)\n \t    }\n \t}\n     }\n+  /* None of the below should need a 'type', but we are only called\n+     for assignments and calls with a LHS.  */\n+  tree type = TREE_TYPE (gimple_get_lhs (stmt));\n   if (INTEGRAL_TYPE_P (type)\n       && gimple_stmt_nonnegative_warnv_p (stmt, &sop))\n     set_value_range_to_nonnegative (vr, type);\n@@ -1355,12 +1359,12 @@ vr_values::extract_range_from_assignment (value_range_equiv *vr, gassign *stmt)\n     extract_range_from_ssa_name (vr, gimple_assign_rhs1 (stmt));\n   else if (TREE_CODE_CLASS (code) == tcc_binary)\n     extract_range_from_binary_expr (vr, gimple_assign_rhs_code (stmt),\n-\t\t\t\t    gimple_expr_type (stmt),\n+\t\t\t\t    TREE_TYPE (gimple_assign_lhs (stmt)),\n \t\t\t\t    gimple_assign_rhs1 (stmt),\n \t\t\t\t    gimple_assign_rhs2 (stmt));\n   else if (TREE_CODE_CLASS (code) == tcc_unary)\n     extract_range_from_unary_expr (vr, gimple_assign_rhs_code (stmt),\n-\t\t\t\t   gimple_expr_type (stmt),\n+\t\t\t\t   TREE_TYPE (gimple_assign_lhs (stmt)),\n \t\t\t\t   gimple_assign_rhs1 (stmt));\n   else if (code == COND_EXPR)\n     extract_range_from_cond_expr (vr, stmt);"}]}