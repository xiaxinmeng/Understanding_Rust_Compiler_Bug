{"sha": "7a4be380498046d9b0f88d32ff5a3189c913cc75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E0YmUzODA0OTgwNDZkOWIwZjg4ZDMyZmY1YTMxODljOTEzY2M3NQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-07-24T13:03:20Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-07-24T13:03:20Z"}, "message": "Make __resource_adaptor_imp usable with C++17 memory_resource\n\nBy making the memory_resource base class a template parameter the\n__resource_adaptor_imp can be used to adapt an allocator into a\nstd::pmr::memory_resource instead of experimental::pmr::memory_resource.\n\n\t* include/experimental/memory_resource: Adjust comments and\n\twhitespace.\n\t(__resource_adaptor_imp): Add second template parameter for type of\n\tmemory resource base class.\n\t(memory_resource): Define default constructor, destructor, copy\n\tconstructor and copy assignment operator as defaulted.\n\nFrom-SVN: r262944", "tree": {"sha": "01f326a4f6139e8c455a57657498b3e31544eae7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01f326a4f6139e8c455a57657498b3e31544eae7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a4be380498046d9b0f88d32ff5a3189c913cc75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a4be380498046d9b0f88d32ff5a3189c913cc75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a4be380498046d9b0f88d32ff5a3189c913cc75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a4be380498046d9b0f88d32ff5a3189c913cc75/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0568ade6f8456715ee7ed8902f8e308b0ab3dbb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0568ade6f8456715ee7ed8902f8e308b0ab3dbb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0568ade6f8456715ee7ed8902f8e308b0ab3dbb5"}], "stats": {"total": 136, "additions": 81, "deletions": 55}, "files": [{"sha": "ede29a49749771140e1680edddb5fdf132d8ff6f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a4be380498046d9b0f88d32ff5a3189c913cc75/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a4be380498046d9b0f88d32ff5a3189c913cc75/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7a4be380498046d9b0f88d32ff5a3189c913cc75", "patch": "@@ -1,5 +1,12 @@\n 2018-07-24  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/experimental/memory_resource: Adjust comments and\n+\twhitespace.\n+\t(__resource_adaptor_imp): Add second template parameter for type of\n+\tmemory resource base class.\n+\t(memory_resource): Define default constructor, destructor, copy\n+\tconstructor and copy assignment operator as defaulted.\n+\n \tPR libstdc++/70966\n \t* include/experimental/memory_resource (__get_default_resource): Use\n \tplacement new to create an object with dynamic storage duration."}, {"sha": "7ce64457a115a36a63920e56b74a149252083a0e", "filename": "libstdc++-v3/include/experimental/memory_resource", "status": "modified", "additions": 74, "deletions": 55, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a4be380498046d9b0f88d32ff5a3189c913cc75/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a4be380498046d9b0f88d32ff5a3189c913cc75/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource?ref=7a4be380498046d9b0f88d32ff5a3189c913cc75", "patch": "@@ -29,12 +29,12 @@\n #ifndef _GLIBCXX_EXPERIMENTAL_MEMORY_RESOURCE\n #define _GLIBCXX_EXPERIMENTAL_MEMORY_RESOURCE 1\n \n-#include <memory>\n+#include <memory>\t\t\t// align, uses_allocator, __uses_alloc\n+#include <experimental/utility>\t\t// pair, experimental::erased_type\n+#include <atomic>\t\t\t// atomic\n #include <new>\n-#include <atomic>\n-#include <cstddef>\n #include <ext/new_allocator.h>\n-#include <experimental/bits/lfts_config.h>\n+#include <debug/assertions.h>\n \n namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n@@ -51,39 +51,41 @@ inline namespace fundamentals_v2 {\n namespace pmr {\n #define __cpp_lib_experimental_memory_resources 201402L\n \n+  // Standard memory resources\n+\n+  // 8.5 Class memory_resource\n   class memory_resource;\n \n-  template <typename _Tp>\n+  // 8.6 Class template polymorphic_allocator\n+  template<typename _Tp>\n     class polymorphic_allocator;\n \n-  template <typename _Alloc>\n+  template<typename _Alloc, typename _Resource = memory_resource>\n     class __resource_adaptor_imp;\n \n-  template <typename _Alloc>\n+  // 8.7 Alias template resource_adaptor\n+  template<typename _Alloc>\n     using resource_adaptor = __resource_adaptor_imp<\n       typename allocator_traits<_Alloc>::template rebind_alloc<char>>;\n \n-  template <typename _Tp>\n-    struct __uses_allocator_construction_helper;\n-\n-  // Global memory resources\n+  // 8.8 Global memory resources\n   memory_resource* new_delete_resource() noexcept;\n   memory_resource* null_memory_resource() noexcept;\n-\n-  // The default memory resource\n   memory_resource* get_default_resource() noexcept;\n   memory_resource* set_default_resource(memory_resource* __r) noexcept;\n \n-  // Standard memory resources\n+  // TODO 8.9 Pool resource classes\n \n-  // 8.5 Class memory_resource\n   class memory_resource\n   {\n-  protected:\n     static constexpr size_t _S_max_align = alignof(max_align_t);\n \n   public:\n-    virtual ~memory_resource() { }\n+    memory_resource() = default;\n+    memory_resource(const memory_resource&) = default;\n+    virtual ~memory_resource() = default;\n+\n+    memory_resource& operator=(const memory_resource&) = default;\n \n     void*\n     allocate(size_t __bytes, size_t __alignment = _S_max_align)\n@@ -109,18 +111,15 @@ namespace pmr {\n   };\n \n   inline bool\n-  operator==(const memory_resource& __a,\n-\t     const memory_resource& __b) noexcept\n+  operator==(const memory_resource& __a, const memory_resource& __b) noexcept\n   { return &__a == &__b || __a.is_equal(__b); }\n \n   inline bool\n-  operator!=(const memory_resource& __a,\n-\t     const memory_resource& __b) noexcept\n+  operator!=(const memory_resource& __a, const memory_resource& __b) noexcept\n   { return !(__a == __b); }\n \n \n-  // 8.6 Class template polymorphic_allocator\n-  template <class _Tp>\n+  template<typename _Tp>\n     class polymorphic_allocator\n     {\n       using __uses_alloc1_ = __uses_alloc1<memory_resource*>;\n@@ -134,14 +133,15 @@ namespace pmr {\n       template<typename _Tp1, typename... _Args>\n \tvoid\n \t_M_construct(__uses_alloc1_, _Tp1* __p, _Args&&...  __args)\n-\t{ ::new(__p) _Tp1(allocator_arg, this->resource(),\n-\t\t\t  std::forward<_Args>(__args)...); }\n+\t{\n+\t  ::new(__p) _Tp1(allocator_arg, this->resource(),\n+\t\t\t  std::forward<_Args>(__args)...);\n+\t}\n \n       template<typename _Tp1, typename... _Args>\n \tvoid\n \t_M_construct(__uses_alloc2_, _Tp1* __p, _Args&&...  __args)\n-\t{ ::new(__p) _Tp1(std::forward<_Args>(__args)...,\n-\t\t\t  this->resource()); }\n+\t{ ::new(__p) _Tp1(std::forward<_Args>(__args)..., this->resource()); }\n \n     public:\n       using value_type = _Tp;\n@@ -169,11 +169,13 @@ namespace pmr {\n       { return static_cast<_Tp*>(_M_resource->allocate(__n * sizeof(_Tp),\n \t\t\t\t\t\t       alignof(_Tp))); }\n \n-      void deallocate(_Tp* __p, size_t __n)\n+      void\n+      deallocate(_Tp* __p, size_t __n)\n       { _M_resource->deallocate(__p, __n * sizeof(_Tp), alignof(_Tp)); }\n \n       template <typename _Tp1, typename... _Args> //used here\n-\tvoid construct(_Tp1* __p, _Args&&... __args)\n+\tvoid\n+\tconstruct(_Tp1* __p, _Args&&... __args)\n \t{\n \t  memory_resource* const __resource = this->resource();\n \t  auto __use_tag\n@@ -184,9 +186,9 @@ namespace pmr {\n       // Specializations for pair using piecewise construction\n       template <typename _Tp1, typename _Tp2,\n \t       typename... _Args1, typename... _Args2>\n-\tvoid construct(pair<_Tp1, _Tp2>* __p, piecewise_construct_t,\n-\t\t       tuple<_Args1...> __x,\n-\t\t       tuple<_Args2...> __y)\n+\tvoid\n+\tconstruct(pair<_Tp1, _Tp2>* __p, piecewise_construct_t,\n+\t\t  tuple<_Args1...> __x, tuple<_Args2...> __y)\n \t{\n \t  memory_resource* const __resource = this->resource();\n \t  auto __x_use_tag =\n@@ -200,36 +202,48 @@ namespace pmr {\n \t}\n \n       template <typename _Tp1, typename _Tp2>\n-\tvoid construct(pair<_Tp1,_Tp2>* __p)\n+\tvoid\n+\tconstruct(pair<_Tp1,_Tp2>* __p)\n \t{ this->construct(__p, piecewise_construct, tuple<>(), tuple<>()); }\n \n       template <typename _Tp1, typename _Tp2, typename _Up, typename _Vp>\n-\tvoid construct(pair<_Tp1,_Tp2>* __p, _Up&& __x, _Vp&& __y)\n-\t{ this->construct(__p, piecewise_construct,\n+\tvoid\n+\tconstruct(pair<_Tp1,_Tp2>* __p, _Up&& __x, _Vp&& __y)\n+\t{\n+\t  this->construct(__p, piecewise_construct,\n \t\t\t  forward_as_tuple(std::forward<_Up>(__x)),\n-\t\t\t  forward_as_tuple(std::forward<_Vp>(__y))); }\n+\t\t\t  forward_as_tuple(std::forward<_Vp>(__y)));\n+\t}\n \n       template <typename _Tp1, typename _Tp2, typename _Up, typename _Vp>\n-\tvoid construct(pair<_Tp1,_Tp2>* __p, const std::pair<_Up, _Vp>& __pr)\n-\t{ this->construct(__p, piecewise_construct, forward_as_tuple(__pr.first),\n-\t\t\t  forward_as_tuple(__pr.second)); }\n+\tvoid\n+\tconstruct(pair<_Tp1,_Tp2>* __p, const std::pair<_Up, _Vp>& __pr)\n+\t{\n+\t  this->construct(__p, piecewise_construct,\n+\t\t\t  forward_as_tuple(__pr.first),\n+\t\t\t  forward_as_tuple(__pr.second));\n+\t}\n \n       template <typename _Tp1, typename _Tp2, typename _Up, typename _Vp>\n-\tvoid construct(pair<_Tp1,_Tp2>* __p, pair<_Up, _Vp>&& __pr)\n-\t{ this->construct(__p, piecewise_construct,\n+\tvoid\n+\tconstruct(pair<_Tp1,_Tp2>* __p, pair<_Up, _Vp>&& __pr)\n+\t{\n+\t  this->construct(__p, piecewise_construct,\n \t\t\t  forward_as_tuple(std::forward<_Up>(__pr.first)),\n-\t\t\t  forward_as_tuple(std::forward<_Vp>(__pr.second))); }\n+\t\t\t  forward_as_tuple(std::forward<_Vp>(__pr.second)));\n+\t}\n \n       template <typename _Up>\n-\tvoid destroy(_Up* __p)\n+\tvoid\n+\tdestroy(_Up* __p)\n \t{ __p->~_Up(); }\n \n       // Return a default-constructed allocator (no allocator propagation)\n-      polymorphic_allocator select_on_container_copy_construction() const\n+      polymorphic_allocator\n+      select_on_container_copy_construction() const\n       { return polymorphic_allocator(); }\n \n-      memory_resource* resource() const\n-      { return _M_resource; }\n+      memory_resource* resource() const { return _M_resource; }\n \n     private:\n       template<typename _Tuple>\n@@ -252,18 +266,21 @@ namespace pmr {\n     };\n \n   template <class _Tp1, class _Tp2>\n-    bool operator==(const polymorphic_allocator<_Tp1>& __a,\n-\t\t    const polymorphic_allocator<_Tp2>& __b) noexcept\n+    bool\n+    operator==(const polymorphic_allocator<_Tp1>& __a,\n+\t       const polymorphic_allocator<_Tp2>& __b) noexcept\n     { return *__a.resource() == *__b.resource(); }\n \n   template <class _Tp1, class _Tp2>\n-    bool operator!=(const polymorphic_allocator<_Tp1>& __a,\n-\t\t    const polymorphic_allocator<_Tp2>& __b) noexcept\n+    bool\n+    operator!=(const polymorphic_allocator<_Tp1>& __a,\n+\t       const polymorphic_allocator<_Tp2>& __b) noexcept\n     { return !(__a == __b); }\n \n+\n   class __resource_adaptor_common\n   {\n-    template<typename> friend class __resource_adaptor_imp;\n+    template<typename, typename> friend class __resource_adaptor_imp;\n \n     struct _AlignMgr\n     {\n@@ -376,10 +393,12 @@ namespace pmr {\n   };\n \n   // 8.7.1 __resource_adaptor_imp\n-  template <typename _Alloc>\n+  template<typename _Alloc, typename _Resource>\n     class __resource_adaptor_imp\n-    : public memory_resource, private __resource_adaptor_common\n+    : public _Resource, private __resource_adaptor_common\n     {\n+      using memory_resource = _Resource;\n+\n       static_assert(is_same<char,\n \t  typename allocator_traits<_Alloc>::value_type>::value,\n \t  \"Allocator's value_type is char\");\n@@ -514,11 +533,11 @@ namespace pmr {\n       __r = new_delete_resource();\n     return __get_default_resource().exchange(__r);\n   }\n+\n } // namespace pmr\n } // namespace fundamentals_v2\n } // namespace experimental\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n-\n-#endif\n+#endif // _GLIBCXX_EXPERIMENTAL_MEMORY_RESOURCE"}]}