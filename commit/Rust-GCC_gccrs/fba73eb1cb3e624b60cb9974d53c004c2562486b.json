{"sha": "fba73eb1cb3e624b60cb9974d53c004c2562486b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJhNzNlYjFjYjNlNjI0YjYwY2I5OTc0ZDUzYzAwNGMyNTYyNDg2Yg==", "commit": {"author": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2004-08-11T02:40:45Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2004-08-11T02:40:45Z"}, "message": "rs6000-protos.h (expand_block_clear): Declare.\n\n        * config/rs6000/rs6000-protos.h (expand_block_clear): Declare.\n        * config/rs6000/rs6000.md (clrmemsi): New pattern.\n        * config/rs6000/rs6000.c (expand_block_clear): New function.\n        (expand_block_move): Convert alignment to bits.  Use SImode and\n        HImode for unaligned addresses if not STRICT_ALIGNMENT.\n\nFrom-SVN: r85787", "tree": {"sha": "bad682d36f8cd0b419bd01fae554222ddeef7d4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bad682d36f8cd0b419bd01fae554222ddeef7d4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fba73eb1cb3e624b60cb9974d53c004c2562486b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fba73eb1cb3e624b60cb9974d53c004c2562486b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fba73eb1cb3e624b60cb9974d53c004c2562486b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fba73eb1cb3e624b60cb9974d53c004c2562486b/comments", "author": null, "committer": null, "parents": [{"sha": "5158e8d8c1a81c0506defd908022aba439f3edeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5158e8d8c1a81c0506defd908022aba439f3edeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5158e8d8c1a81c0506defd908022aba439f3edeb"}], "stats": {"total": 116, "additions": 111, "deletions": 5}, "files": [{"sha": "7a793511fd1832811465d5cf74d312304b07a138", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fba73eb1cb3e624b60cb9974d53c004c2562486b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fba73eb1cb3e624b60cb9974d53c004c2562486b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fba73eb1cb3e624b60cb9974d53c004c2562486b", "patch": "@@ -1,4 +1,12 @@\n-2004-08-10  Caroline Tice  <ctice@apple.com\n+2004-08-10  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/rs6000-protos.h (expand_block_clear): Declare.\n+\t* config/rs6000/rs6000.md (clrmemsi): New pattern.\n+\t* config/rs6000/rs6000.c (expand_block_clear): New function.\n+\t(expand_block_move): Convert alignment to bits.  Use SImode and\n+\tHImode for unaligned addresses if not STRICT_ALIGNMENT.\n+\n+2004-08-10  Caroline Tice  <ctice@apple.com>\n \n \t* varasm.c (unlikely_section_label): New global variable.\n \t(unlikely_text_section_name): New global variable."}, {"sha": "2e5afb6cb440e82b532058f0c45f2e4cd9ea4440", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fba73eb1cb3e624b60cb9974d53c004c2562486b/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fba73eb1cb3e624b60cb9974d53c004c2562486b/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=fba73eb1cb3e624b60cb9974d53c004c2562486b", "patch": "@@ -86,6 +86,7 @@ extern int input_operand (rtx, enum machine_mode);\n extern int small_data_operand (rtx, enum machine_mode);\n extern int s8bit_cint_operand (rtx, enum machine_mode);\n extern bool legitimate_constant_pool_address_p (rtx);\n+extern int expand_block_clear (rtx[]);\n extern int expand_block_move (rtx[]);\n extern int load_multiple_operation (rtx, enum machine_mode);\n extern const char * rs6000_output_load_multiple (rtx[]);"}, {"sha": "7381a464a12483b8b74c722e5b5c8158b25f6998", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 87, "deletions": 4, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fba73eb1cb3e624b60cb9974d53c004c2562486b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fba73eb1cb3e624b60cb9974d53c004c2562486b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=fba73eb1cb3e624b60cb9974d53c004c2562486b", "patch": "@@ -8253,6 +8253,89 @@ rs6000_init_libfuncs (void)\n       set_conv_libfunc (sfloat_optab, TFmode, SImode, \"_q_itoq\");\n     }\n }\n+\n+\f\n+/* Expand a block clear operation, and return 1 if successful.  Return 0\n+   if we should let the compiler generate normal code.\n+\n+   operands[0] is the destination\n+   operands[1] is the length\n+   operands[2] is the alignment */\n+\n+int\n+expand_block_clear (rtx operands[])\n+{\n+  rtx orig_dest = operands[0];\n+  rtx bytes_rtx\t= operands[1];\n+  rtx align_rtx = operands[2];\n+  int constp\t= (GET_CODE (bytes_rtx) == CONST_INT);\n+  int align;\n+  int bytes;\n+  int offset;\n+  int clear_bytes;\n+\n+  /* If this is not a fixed size move, just call memcpy */\n+  if (! constp)\n+    return 0;\n+\n+  /* If this is not a fixed size alignment, abort */\n+  if (GET_CODE (align_rtx) != CONST_INT)\n+    abort ();\n+  align = INTVAL (align_rtx) * BITS_PER_UNIT;\n+\n+  /* Anything to clear? */\n+  bytes = INTVAL (bytes_rtx);\n+  if (bytes <= 0)\n+    return 1;\n+\n+  if (bytes > (TARGET_POWERPC64 && align >= 32 ? 64 : 32))\n+    return 0;\n+\n+  if (optimize_size && bytes > 16)\n+    return 0;\n+\n+  for (offset = 0; bytes > 0; offset += clear_bytes, bytes -= clear_bytes)\n+    {\n+      rtx (*mov) (rtx, rtx);\n+      enum machine_mode mode = BLKmode;\n+      rtx dest;\n+      \n+      if (bytes >= 8 && TARGET_POWERPC64\n+\t       /* 64-bit loads and stores require word-aligned\n+\t\t  displacements.  */\n+\t       && (align >= 64 || (!STRICT_ALIGNMENT && align >= 32)))\n+\t{\n+\t  clear_bytes = 8;\n+\t  mode = DImode;\n+\t  mov = gen_movdi;\n+\t}\n+      else if (bytes >= 4 && !STRICT_ALIGNMENT)\n+\t{\t\t\t/* move 4 bytes */\n+\t  clear_bytes = 4;\n+\t  mode = SImode;\n+\t  mov = gen_movsi;\n+\t}\n+      else if (bytes == 2 && !STRICT_ALIGNMENT)\n+\t{\t\t\t/* move 2 bytes */\n+\t  clear_bytes = 2;\n+\t  mode = HImode;\n+\t  mov = gen_movhi;\n+\t}\n+      else /* move 1 byte at a time */\n+\t{\n+\t  clear_bytes = 1;\n+\t  mode = QImode;\n+\t  mov = gen_movqi;\n+\t}\n+      \n+      dest = adjust_address (orig_dest, mode, offset);\n+      \n+      emit_insn ((*mov) (dest, const0_rtx));\n+    }\n+\n+  return 1;\n+}\n+\n \f\n /* Expand a block move operation, and return 1 if successful.  Return 0\n    if we should let the compiler generate normal code.\n@@ -8286,7 +8369,7 @@ expand_block_move (rtx operands[])\n   /* If this is not a fixed size alignment, abort */\n   if (GET_CODE (align_rtx) != CONST_INT)\n     abort ();\n-  align = INTVAL (align_rtx);\n+  align = INTVAL (align_rtx) * BITS_PER_UNIT;\n \n   /* Anything to move? */\n   bytes = INTVAL (bytes_rtx);\n@@ -8346,7 +8429,7 @@ expand_block_move (rtx operands[])\n       else if (bytes >= 8 && TARGET_POWERPC64\n \t       /* 64-bit loads and stores require word-aligned\n \t\t  displacements.  */\n-\t       && (align >= 8 || (! STRICT_ALIGNMENT && align >= 4)))\n+\t       && (align >= 64 || (!STRICT_ALIGNMENT && align >= 32)))\n \t{\n \t  move_bytes = 8;\n \t  mode = DImode;\n@@ -8357,13 +8440,13 @@ expand_block_move (rtx operands[])\n \t  move_bytes = (bytes > 8) ? 8 : bytes;\n \t  gen_func.movmemsi = gen_movmemsi_2reg;\n \t}\n-      else if (bytes >= 4 && (align >= 4 || ! STRICT_ALIGNMENT))\n+      else if (bytes >= 4 && !STRICT_ALIGNMENT)\n \t{\t\t\t/* move 4 bytes */\n \t  move_bytes = 4;\n \t  mode = SImode;\n \t  gen_func.mov = gen_movsi;\n \t}\n-      else if (bytes == 2 && (align >= 2 || ! STRICT_ALIGNMENT))\n+      else if (bytes == 2 && !STRICT_ALIGNMENT)\n \t{\t\t\t/* move 2 bytes */\n \t  move_bytes = 2;\n \t  mode = HImode;"}, {"sha": "aef44d53e4a8553aed731829b9936ea9cd7b3f49", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fba73eb1cb3e624b60cb9974d53c004c2562486b/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fba73eb1cb3e624b60cb9974d53c004c2562486b/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=fba73eb1cb3e624b60cb9974d53c004c2562486b", "patch": "@@ -9093,6 +9093,20 @@\n   \"{stsi|stswi} %2,%1,%O0\"\n   [(set_attr \"type\" \"store\")])\n \f\n+(define_expand \"clrmemsi\"\n+  [(parallel [(set (match_operand:BLK 0 \"\" \"\")\n+\t\t   (const_int 0))\n+\t      (use (match_operand:SI 1 \"\" \"\"))\n+\t      (use (match_operand:SI 2 \"\" \"\"))])]\n+  \"\"\n+  \"\n+{\n+  if (expand_block_clear (operands))\n+    DONE;\n+  else\n+    FAIL;\n+}\")\n+\n ;; String/block move insn.\n ;; Argument 0 is the destination\n ;; Argument 1 is the source"}]}