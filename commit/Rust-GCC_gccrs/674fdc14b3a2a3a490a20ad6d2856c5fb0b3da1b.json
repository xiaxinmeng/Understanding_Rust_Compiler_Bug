{"sha": "674fdc14b3a2a3a490a20ad6d2856c5fb0b3da1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc0ZmRjMTRiM2EyYTNhNDkwYTIwYWQ2ZDI4NTZjNWZiMGIzZGExYg==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@cygnus.com", "date": "1999-11-08T15:40:38Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "1999-11-08T15:40:38Z"}, "message": "Move prototypes into v850-protos.h\n\nFrom-SVN: r30450", "tree": {"sha": "4dfda2c4e0a7b60c889056c78abf1568976a8480", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4dfda2c4e0a7b60c889056c78abf1568976a8480"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/674fdc14b3a2a3a490a20ad6d2856c5fb0b3da1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/674fdc14b3a2a3a490a20ad6d2856c5fb0b3da1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/674fdc14b3a2a3a490a20ad6d2856c5fb0b3da1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/674fdc14b3a2a3a490a20ad6d2856c5fb0b3da1b/comments", "author": null, "committer": null, "parents": [{"sha": "140b60b42e92daa02621ec13ebdc691f157b1e99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/140b60b42e92daa02621ec13ebdc691f157b1e99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/140b60b42e92daa02621ec13ebdc691f157b1e99"}], "stats": {"total": 139, "additions": 30, "deletions": 109}, "files": [{"sha": "8dcaeff5e952cff8085d59cfebe136fb27e522a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/674fdc14b3a2a3a490a20ad6d2856c5fb0b3da1b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/674fdc14b3a2a3a490a20ad6d2856c5fb0b3da1b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=674fdc14b3a2a3a490a20ad6d2856c5fb0b3da1b", "patch": "@@ -1,3 +1,11 @@\n+Mon Nov  8 15:38:41 1999  Nick Clifton  <nickc@cygnus.com>\n+\n+\t* config/v850/v850-protos.h: New file: Prototypes for functions\n+\tdefined in v850.c\n+\t* config/v850/v850.h: Move prototypes to v850-protos.h\n+\t* config/v850/v850.c: Move prototypes to v850-protos.h\n+\t* config/v850/v850.md: Fix compile time warnings.\n+\n Mon Nov  8 07:25:37 1999  Mark Mitchell  <mark@codesourcery.com>\n \n \t* tree.h (get_containing_scope): Declare it."}, {"sha": "4e205a5ab7fc334add05e552620c565fdfd3bfa0", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 3, "deletions": 42, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/674fdc14b3a2a3a490a20ad6d2856c5fb0b3da1b/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/674fdc14b3a2a3a490a20ad6d2856c5fb0b3da1b/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=674fdc14b3a2a3a490a20ad6d2856c5fb0b3da1b", "patch": "@@ -37,51 +37,12 @@ Boston, MA 02111-1307, USA.  */\n #include \"function.h\"\n #include \"obstack.h\"\n #include \"toplev.h\"\n+#include \"v850-protos.h\"\n \n #ifndef streq\n #define streq(a,b) (strcmp (a, b) == 0)\n #endif\n \n-/* Function prototypes that cannot exist in v850.h due to dependency\n-   compilcations.  */\n-extern rtx    function_arg\n-  PROTO ((CUMULATIVE_ARGS *, enum machine_mode, tree, int));\n-extern int    function_arg_partial_nregs\n-  PROTO ((CUMULATIVE_ARGS *, enum machine_mode, tree, int));\n-extern void   asm_file_start                PROTO ((FILE *));\n-extern void   print_operand                 PROTO ((FILE *, rtx, int ));\n-extern void   print_operand_address         PROTO ((FILE *, rtx));\n-extern void   v850_output_aligned_bss\n-  PROTO ((FILE *, tree, char *, int, int));\n-extern void   v850_output_common\n-  PROTO ((FILE *, tree, char *, int, int));\n-extern void   v850_output_local\n-  PROTO ((FILE *, tree, char *, int, int));\n-extern int    const_costs                   PROTO ((rtx, enum rtx_code));\n-extern char * output_move_double            PROTO ((rtx *));\n-extern char * output_move_single            PROTO ((rtx *));\n-extern int    ep_memory_operand\n-  PROTO ((rtx, enum machine_mode, int));\n-extern int    reg_or_0_operand              PROTO ((rtx, enum machine_mode));\n-extern int    reg_or_int5_operand           PROTO ((rtx, enum machine_mode));\n-extern int    call_address_operand          PROTO ((rtx, enum machine_mode));\n-extern int    movsi_source_operand          PROTO ((rtx, enum machine_mode));\n-extern int    power_of_two_operand          PROTO ((rtx, enum machine_mode));\n-extern int    not_power_of_two_operand      PROTO ((rtx, enum machine_mode));\n-extern int    special_symbolref_operand     PROTO ((rtx, enum machine_mode));\n-extern void   v850_reorg                    PROTO ((rtx));\n-extern void   notice_update_cc              PROTO ((rtx, rtx));\n-extern int    v850_valid_machine_decl_attribute\n-  PROTO ((tree, tree, tree));\n-extern int    v850_interrupt_function_p     PROTO ((tree));\n-extern int    pattern_is_ok_for_prologue    PROTO ((rtx, enum machine_mode));\n-extern int    pattern_is_ok_for_epilogue    PROTO ((rtx, enum machine_mode));\n-extern int    register_is_ok_for_epilogue   PROTO ((rtx, enum machine_mode));\n-extern char * construct_save_jarl           PROTO ((rtx));\n-extern char * construct_restore_jr          PROTO ((rtx));\n-extern void   v850_encode_data_area         PROTO ((tree));\n-extern void   v850_set_default_decl_attr    PROTO ((tree));\n-\n /* Function prototypes for stupid compilers:  */\n static void const_double_split\n   PROTO ((rtx, HOST_WIDE_INT *, HOST_WIDE_INT *));\n@@ -1537,7 +1498,7 @@ expand_prologue ()\n   /* Save/setup global registers for interrupt functions right now */\n   if (interrupt_handler)\n     {\n-      emit_insn (gen_save_interrupt ());\n+\temit_insn (gen_save_interrupt ());\n       \n       actual_fsize -= INTERRUPT_FIXED_SAVE_SIZE;\n       \n@@ -3156,7 +3117,7 @@ rtx\n v850_va_arg (valist, type)\n      tree valist, type;\n {\n-  HOST_WIDE_INT size, rsize, align;\n+  HOST_WIDE_INT size, rsize;\n   tree addr, incr;\n   rtx addr_rtx;\n   int indirect;"}, {"sha": "c172c5db30968d7949c737c1f4d6dc61a0ed2310", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 16, "deletions": 63, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/674fdc14b3a2a3a490a20ad6d2856c5fb0b3da1b/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/674fdc14b3a2a3a490a20ad6d2856c5fb0b3da1b/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=674fdc14b3a2a3a490a20ad6d2856c5fb0b3da1b", "patch": "@@ -387,7 +387,7 @@ extern struct small_memory_info small_memory[(int)SMALL_MEMORY_max];\n    If HARD_REGNO_MODE_OK could produce different values for MODE1 and MODE2,\n    for any hard reg, then this must be 0 for correct output.  */\n #define MODES_TIEABLE_P(MODE1, MODE2) \\\n-  (MODE1 == MODE2 || GET_MODE_SIZE (MODE1) <= 4 && GET_MODE_SIZE (MODE2) <= 4)\n+  (MODE1 == MODE2 || (GET_MODE_SIZE (MODE1) <= 4 && GET_MODE_SIZE (MODE2) <= 4))\n \n \f\n /* Define the classes of registers for register constraints in the\n@@ -426,10 +426,11 @@ enum reg_class\n    This is an initializer for a vector of HARD_REG_SET\n    of length N_REG_CLASSES.  */\n \n-#define REG_CLASS_CONTENTS  \t\t\t\\\n-{  0x00000000,\t\t/* No regs      */\t\\\n-   0xffffffff,\t\t/* GENERAL_REGS */    \t\\\n-   0xffffffff,\t\t/* ALL_REGS \t*/\t\\\n+#define REG_CLASS_CONTENTS  \t\t\\\n+{\t\t\t\t\t\\\n+  { 0x00000000 }, /* NO_REGS      */\t\\\n+  { 0xffffffff }, /* GENERAL_REGS */   \t\\\n+  { 0xffffffff }, /* ALL_REGS \t*/\t\\\n }\n \n /* The same information, inverted:\n@@ -886,7 +887,7 @@ extern int current_function_anonymous_args;\n    register class that does not include r0 on the output.  */\n \n #define EXTRA_CONSTRAINT(OP, C)\t\t\t\t\t\t\\\n- ((C) == 'Q'   ? ep_memory_operand (OP, GET_MODE (OP))\t\t\t\\\n+ ((C) == 'Q'   ? ep_memory_operand (OP, GET_MODE (OP), 0)\t\t\t\\\n   : (C) == 'R' ? special_symbolref_operand (OP, VOIDmode)\t\t\\\n   : (C) == 'S' ? (GET_CODE (OP) == SYMBOL_REF && ! ZDA_NAME_P (XSTR (OP, 0))) \\\n   : (C) == 'T' ? 0\t\t\t\t\t\t\t\\\n@@ -1412,7 +1413,7 @@ do { char dstr[30];\t\t\t\t\t\\\n \t   (TARGET_BIG_SWITCH ? \".long\" : \".short\"),\t\t\t\\\n \t   VALUE, REL)\n \n-#define ASM_OUTPUT_ALIGN(FILE,LOG)\t\\\n+#define ASM_OUTPUT_ALIGN(FILE, LOG)\t\\\n   if ((LOG) != 0)\t\t\t\\\n     fprintf (FILE, \"\\t.align %d\\n\", (LOG))\n \n@@ -1573,12 +1574,14 @@ enum GHS_section_kind\n \n #define EP_REGNUM 30\t/* ep register number */\n \n-#define ENCODE_SECTION_INFO(DECL)\t\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  if ((TREE_STATIC (DECL) || DECL_EXTERNAL (DECL))\t\t\t\\\n-      && TREE_CODE (DECL) == VAR_DECL)\t\t\t\t\t\\\n-    v850_encode_data_area (DECL);\t\t\t\t\t\\\n-} while (0)\n+#define ENCODE_SECTION_INFO(DECL)\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      if ((TREE_STATIC (DECL) || DECL_EXTERNAL (DECL))\t\\\n+\t  && TREE_CODE (DECL) == VAR_DECL)\t\t\\\n+\tv850_encode_data_area (DECL);\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n \n #define ZDA_NAME_FLAG_CHAR '@'\n #define TDA_NAME_FLAG_CHAR '%'\n@@ -1617,54 +1620,4 @@ do {\t\t\t\t\t\t\t\t\t\\\n { \"pattern_is_ok_for_epilogue\",\t{ PARALLEL }},\t\t\t\t\\\n { \"register_is_ok_for_epilogue\",{ REG }},\t\t\t\t\\\n { \"not_power_of_two_operand\",\t{ CONST_INT }},\n-\n-  /* Note, due to dependency and search path conflicts, prototypes\n-     involving the FILE, rtx or tree types cannot be included here.\n-     They are included at the start of v850.c  */\n   \n-extern void   asm_file_start                ();\n-extern void   print_operand                 ();\n-extern void   print_operand_address         ();\n-extern int    function_arg_partial_nregs    ();\n-extern int    const_costs                   ();\n-extern char * output_move_double            ();\n-extern char * output_move_single            ();\n-extern int    ep_memory_operand             ();\n-extern int    reg_or_0_operand              ();\n-extern int    reg_or_int5_operand           ();\n-extern int    call_address_operand          ();\n-extern int    movsi_source_operand          ();\n-extern int    power_of_two_operand          ();\n-extern int    not_power_of_two_operand      ();\n-extern int    special_symbolref_operand     ();\n-extern void   v850_reorg                    ();\n-extern void   notice_update_cc              ();\n-extern int    v850_valid_machine_decl_attribute ();\n-extern int    v850_interrupt_function_p     ();\n-extern int    pattern_is_ok_for_prologue    ();\n-extern int    pattern_is_ok_for_epilogue    ();\n-extern int    register_is_ok_for_epilogue   ();\n-extern char * construct_save_jarl           ();\n-extern char * construct_restore_jr          ();\n-\n-extern void   override_options              PROTO ((void));\n-extern int    compute_register_save_size    PROTO ((long *));\n-extern int    compute_frame_size            PROTO ((int, long *));\n-extern void   expand_prologue               PROTO ((void));\n-extern void   expand_epilogue               PROTO ((void));\n-\n-extern void   v850_output_aligned_bss       ();\n-extern void   v850_output_common            ();\n-extern void   v850_output_local             ();\n-extern void   sdata_section                 PROTO ((void));\n-extern void   rosdata_section               PROTO ((void));\n-extern void   sbss_section                  PROTO ((void));\n-extern void   tdata_section                 PROTO ((void));\n-extern void   zdata_section                 PROTO ((void));\n-extern void   rozdata_section               PROTO ((void));\n-extern void   zbss_section                  PROTO ((void));\n-extern int    v850_handle_pragma            PROTO ((int (*)(void), void (*)(int), char *));\n-extern void   v850_encode_data_area         ();\n-extern void   v850_set_default_decl_attr    ();\n-extern v850_data_area v850_get_data_area    ();\n-extern struct rtx_def *v850_va_arg\t    ();"}, {"sha": "4308e07e5ac38fc4c2483024fab84d9e52a08de7", "filename": "gcc/config/v850/v850.md", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/674fdc14b3a2a3a490a20ad6d2856c5fb0b3da1b/gcc%2Fconfig%2Fv850%2Fv850.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/674fdc14b3a2a3a490a20ad6d2856c5fb0b3da1b/gcc%2Fconfig%2Fv850%2Fv850.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.md?ref=674fdc14b3a2a3a490a20ad6d2856c5fb0b3da1b", "patch": "@@ -159,7 +159,6 @@\n \t       || CONST_OK_FOR_K (INTVAL (operands[1]))\n \t       || CONST_OK_FOR_L (INTVAL (operands[1])))))\n     {\n-      rtx high;\n       rtx temp;\n \n       if (reload_in_progress || reload_completed)\n@@ -950,7 +949,7 @@\n   emit_insn (gen_addsi3 (reg, reg, tableaddress));\n   /* Load the table entry.  */\n   mem = gen_rtx_MEM (CASE_VECTOR_MODE, reg);\n-  RTX_UNCHANGING_P (mem);\n+  RTX_UNCHANGING_P (mem) = 1;\n   if (! TARGET_BIG_SWITCH)\n     {\n       rtx reg2 = gen_reg_rtx (HImode);\n@@ -974,7 +973,7 @@\n   \"\"\n   \"\n {\n-  if (! call_address_operand (XEXP (operands[0], 0))\n+  if (! call_address_operand (XEXP (operands[0], 0), QImode)\n       || TARGET_LONG_CALLS)\n     XEXP (operands[0], 0) = force_reg (SImode, XEXP (operands[0], 0));\n   if (TARGET_LONG_CALLS)\n@@ -1026,7 +1025,7 @@\n   \"\"\n   \"\n {\n-  if (! call_address_operand (XEXP (operands[1], 0))\n+  if (! call_address_operand (XEXP (operands[1], 0), QImode)\n       || TARGET_LONG_CALLS)\n     XEXP (operands[1], 0) = force_reg (SImode, XEXP (operands[1], 0));\n   if (TARGET_LONG_CALLS)"}]}