{"sha": "fcca588c9490ffd09b2d1bcb24f532a2a7b815bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNjYTU4OGM5NDkwZmZkMDliMmQxYmNiMjRmNTMyYTJhN2I4MTViYw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2001-04-26T20:05:34Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2001-04-26T20:05:34Z"}, "message": "invoke.texi: Document more C++ command-line options.\n\n\t* invoke.texi: Document more C++ command-line options.\n\n\tRemove support for -Wextern-inline, -flabels-ok, -fvtable-gc, -fxref\n\t* cp-tree.h (warn_extern_inline): Remove.\n\t(flag_labels_ok): Likewise.\n\t* decl2.c (warn_extern_inline): Remove.\n\t(flag_labels_ok): Likewise.\n\t(lang_f_options): Remove labels-ok, vtable-gc, xref.\n\t(unsupported_options): Add them.\n\t(cxx_decode_option): Don't accept -Wextern-inline.\n\t* method.c (hack_identifier): Remove -flabels-ok support.\n\t* spew.c (see_typename): Likewise.\n\n\t* g++.dg/vtgc1.C: XFAIL.\n\t* g++.old-deja/g++.other/crash18.C: Likewise.\n\nFrom-SVN: r41609", "tree": {"sha": "eaa554400b040e96b55e974e3054f87fd6bea7e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eaa554400b040e96b55e974e3054f87fd6bea7e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fcca588c9490ffd09b2d1bcb24f532a2a7b815bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcca588c9490ffd09b2d1bcb24f532a2a7b815bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcca588c9490ffd09b2d1bcb24f532a2a7b815bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcca588c9490ffd09b2d1bcb24f532a2a7b815bc/comments", "author": null, "committer": null, "parents": [{"sha": "56fe39c8097aaa80cdc48131b54c6187c652a4d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56fe39c8097aaa80cdc48131b54c6187c652a4d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56fe39c8097aaa80cdc48131b54c6187c652a4d9"}], "stats": {"total": 80, "additions": 47, "deletions": 33}, "files": [{"sha": "ef12e1e4c4b11ab408ddca0d664a02eb6c85d20b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcca588c9490ffd09b2d1bcb24f532a2a7b815bc/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcca588c9490ffd09b2d1bcb24f532a2a7b815bc/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=fcca588c9490ffd09b2d1bcb24f532a2a7b815bc", "patch": "@@ -1064,10 +1064,6 @@ extern int warn_ecpp;\n \n extern int warn_sign_promo;\n \n-/* Non-zero means warn when a function is declared extern and later inline.  */\n-\n-extern int warn_extern_inline;\n-\n /* Non-zero means warn when an old-style cast is used.  */\n \n extern int warn_old_style_cast;\n@@ -3180,10 +3176,6 @@ typedef enum instantiate_type_flags {\n   itf_ptrmem_ok = 1 << 2,     /* pointers to member ok (internal use) */\n } instantiate_type_flags;\n \n-/* Non-zero means that if a label exists, and no other identifier\n-   applies, use the value of the label.  */\n-extern int flag_labels_ok;\n-\n /* Nonzero means allow Microsoft extensions without a pedwarn.  */\n extern int flag_ms_extensions;\n "}, {"sha": "cb7dd5e2a35e5a07cb79a33355a052216636080b", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcca588c9490ffd09b2d1bcb24f532a2a7b815bc/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcca588c9490ffd09b2d1bcb24f532a2a7b815bc/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=fcca588c9490ffd09b2d1bcb24f532a2a7b815bc", "patch": "@@ -273,10 +273,6 @@ int warn_overloaded_virtual;\n \n int warn_nonvdtor;\n \n-/* Non-zero means warn when a function is declared extern and later inline.  */\n-\n-int warn_extern_inline;\n-\n /* Non-zero means warn when the compiler will reorder code.  */\n \n int warn_reorder;\n@@ -327,10 +323,6 @@ int warn_deprecated = 1;\n #endif\n int dollars_in_ident = DOLLARS_IN_IDENTIFIERS;\n \n-/* Nonzero means that labels can be used as first-class objects */\n-\n-int flag_labels_ok;\n-\n /* Nonzero means allow Microsoft extensions without a pedwarn.  */\n \n int flag_ms_extensions;\n@@ -473,7 +465,6 @@ lang_f_options[] =\n   {\"implement-inlines\", &flag_implement_inlines, 1},\n   {\"implicit-inline-templates\", &flag_implicit_inline_templates, 1},\n   {\"implicit-templates\", &flag_implicit_templates, 1},\n-  {\"labels-ok\", &flag_labels_ok, 1},\n   {\"ms-extensions\", &flag_ms_extensions, 1},\n   {\"nonansi-builtins\", &flag_no_nonansi_builtin, 0},\n   {\"operator-names\", &flag_operator_names, 1},\n@@ -483,10 +474,8 @@ lang_f_options[] =\n   {\"rtti\", &flag_rtti, 1},\n   {\"stats\", &flag_detailed_statistics, 1},\n   {\"use-cxa-atexit\", &flag_use_cxa_atexit, 1},\n-  {\"vtable-gc\", &flag_vtable_gc, 1},\n   {\"vtable-thunks\", &flag_vtable_thunks, 1},\n-  {\"weak\", &flag_weak, 1},\n-  {\"xref\", &flag_gnu_xref, 1}\n+  {\"weak\", &flag_weak, 1}\n };\n \n /* The list of `-f' options that we no longer support.  The `-f'\n@@ -497,10 +486,13 @@ static const char * const unsupported_options[] = {\n   \"cond-mismatch\",\n   \"enum-int-equiv\",\n   \"guiding-decls\",\n+  \"labels-ok\",\n   \"nonnull-objects\",\n   \"squangle\",\n   \"strict-prototype\",\n   \"this-is-variable\",\n+  \"vtable-gc\",\n+  \"xref\"\n };\n \n /* Compare two option strings, pointed two by P1 and P2, for use with\n@@ -701,8 +693,6 @@ cxx_decode_option (argc, argv)\n \twarn_parentheses = setting;\n       else if (!strcmp (p, \"non-virtual-dtor\"))\n \twarn_nonvdtor = setting;\n-      else if (!strcmp (p, \"extern-inline\"))\n-\twarn_extern_inline = setting;\n       else if (!strcmp (p, \"reorder\"))\n \twarn_reorder = setting;\n       else if (!strcmp (p, \"synth\"))"}, {"sha": "e3c88a4616d6f9e1c32e5cc37002abf22d4843e1", "filename": "gcc/cp/method.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcca588c9490ffd09b2d1bcb24f532a2a7b815bc/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcca588c9490ffd09b2d1bcb24f532a2a7b815bc/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=fcca588c9490ffd09b2d1bcb24f532a2a7b815bc", "patch": "@@ -182,10 +182,6 @@ hack_identifier (value, name)\n #endif\n \t    }\n \t}\n-      if (flag_labels_ok && IDENTIFIER_LABEL_VALUE (name))\n-\t{\n-\t  return IDENTIFIER_LABEL_VALUE (name);\n-\t}\n       return error_mark_node;\n     }\n "}, {"sha": "ea2392a2cbf17e02acba81ceb97a4de786bb618d", "filename": "gcc/cp/spew.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcca588c9490ffd09b2d1bcb24f532a2a7b815bc/gcc%2Fcp%2Fspew.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcca588c9490ffd09b2d1bcb24f532a2a7b815bc/gcc%2Fcp%2Fspew.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fspew.c?ref=fcca588c9490ffd09b2d1bcb24f532a2a7b815bc", "patch": "@@ -701,12 +701,7 @@ see_typename ()\n   if (yychar == IDENTIFIER)\n     {\n       lastiddecl = lookup_name (yylval.ttype, -2);\n-      if (lastiddecl == 0)\n-\t{\n-\t  if (flag_labels_ok)\n-\t    lastiddecl = IDENTIFIER_LABEL_VALUE (yylval.ttype);\n-\t}\n-      else\n+      if (lastiddecl)\n \tyychar = identifier_type (lastiddecl);\n     }\n }"}, {"sha": "c096b793f4f41b6e51ead0a4ce573ceb70eb9df8", "filename": "gcc/invoke.texi", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcca588c9490ffd09b2d1bcb24f532a2a7b815bc/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcca588c9490ffd09b2d1bcb24f532a2a7b815bc/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=fcca588c9490ffd09b2d1bcb24f532a2a7b815bc", "patch": "@@ -1232,6 +1232,17 @@ two definitions were merged.\n This option is no longer useful on most targets, now that support has\n been added for putting variables into BSS without making them common.\n \n+@item -fno-const-strings \n+Give string constants type @code{char *} instead of type @code{const\n+char *}.  By default, G++ uses type @code{const char *} as required by\n+the standard.  Even if you use @samp{-fno-const-strings}, you cannot\n+actually modify the value of a string constant, unless you also use\n+@samp{-fwritable-strings}.\n+\n+This option might be removed in a future release of G++.  For maximum\n+portability, you should structure your code so that it works with\n+string constants that have type @code{const char *}.\n+\n @item -fdollars-in-identifiers\n Accept @samp{$} in identifiers.  You can also explicitly prohibit use of\n @samp{$} with the option @samp{-fno-dollars-in-identifiers}.  (GNU C allows\n@@ -1321,6 +1332,11 @@ errors if these functions are not inlined everywhere they are called.\n Disable pedantic warnings about constructs used in MFC, such as implicit\n int and getting a pointer to member function via non-standard syntax.\n \n+@item -fno-nonansi-builtins\n+Disable builtin declarations of functions that are not mandated by\n+ANSI/ISO C.  These include @code{ffs}, @code{alloca}, @code{_exit},\n+@code{index}, @code{bzero}, @code{conjf}, and other related functions.\n+\n @item -fno-operator-names\n Do not treat the operator name keywords @code{and}, @code{bitand},\n @code{bitor}, @code{compl}, @code{not}, @code{or} and @code{xor} as\n@@ -1350,6 +1366,10 @@ of the language, you can save some space by using this flag.  Note that\n exception handling uses the same information, but it will generate it as\n needed.\n \n+@item -fstats\n+Emit statistics about front-end processing at the end of the compilation.\n+This information is generally only useful to the G++ development team.\n+\n @item -ftemplate-depth-@var{n}\n Set the maximum instantiation depth for template classes to @var{n}.\n A limit on the template instantiation depth is needed to detect\n@@ -1379,6 +1399,13 @@ those.\n Like all options that change the ABI, all C++ code, @emph{including\n libgcc.a} must be built with the same setting of this option.\n \n+@item -fno-weak \n+Do not use weak symbol support, even if it is provied by the linker.\n+By default, G++ will use weak symbols if they are available.  This\n+option exists only for testing, and should not be used by end-users;\n+it will result in inferior code and has no benefits.  This option may\n+be removed in a future release of G++.\n+\n @item -nostdinc++\n Do not search for header files in the standard directories specific to\n C++, but do still search the other standard directories.  (This option"}, {"sha": "7006ddeec38b81d3aeece877222d22bac3d4cc72", "filename": "gcc/testsuite/g++.dg/vtgc1.C", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcca588c9490ffd09b2d1bcb24f532a2a7b815bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvtgc1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcca588c9490ffd09b2d1bcb24f532a2a7b815bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvtgc1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvtgc1.C?ref=fcca588c9490ffd09b2d1bcb24f532a2a7b815bc", "patch": "@@ -1,5 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-fvtable-gc\" }\n+// { dg-excess-errors \"-fvtable-gc unsupported\" { xfail *-*-* } }\n // Origin: Hans-Peter Nilsson <hp@bitrange.com>\n \n class Base0\n@@ -118,16 +119,29 @@ void x3 (Multivs1 *ii) { ii->f2();}\n void x4 (Multiss2 *ii) { ii->f2();}\n void x5 (Multivv3 *ii) { ii->f2();}\n \n+// { dg-final { setup_xfail *-*-* } }\n // { dg-final { scan-assembler-dem vtgc1.C \"\\.vtable_inherit\\[ \\t\\]*vtable for Multivv3, 0\" } }\n+// { dg-final { setup_xfail *-*-* } }\n // { dg-final { scan-assembler-dem vtgc1.C \"\\.vtable_inherit\\[ \\t\\]*VTT for Multivv3, 0\" } }\n+// { dg-final { setup_xfail *-*-* } }\n // { dg-final { scan-assembler-dem vtgc1.C \"\\.vtable_inherit\\[ \\t\\]*vtable for Multiss2, vtable for Base2\" } }\n+// { dg-final { setup_xfail *-*-* } }\n // { dg-final { scan-assembler-dem vtgc1.C \"\\.vtable_inherit\\[ \\t\\]*vtable for Multivs1, vtable for Base2\" } }\n+// { dg-final { setup_xfail *-*-* } }\n // { dg-final { scan-assembler-dem vtgc1.C \"\\.vtable_inherit\\[ \\t\\]*VTT for Multivs1, vtable for Base2\" } }\n+// { dg-final { setup_xfail *-*-* } }\n // { dg-final { scan-assembler-dem vtgc1.C \"\\.vtable_inherit\\[ \\t\\]*vtable for Multisv0, vtable for Side0\" } }\n+// { dg-final { setup_xfail *-*-* } }\n // { dg-final { scan-assembler-dem vtgc1.C \"\\.vtable_inherit\\[ \\t\\]*VTT for Multisv0, vtable for Side0\" } }\n+// { dg-final { setup_xfail *-*-* } }\n // { dg-final { scan-assembler-dem vtgc1.C \"\\.vtable_inherit\\[ \\t\\]*vtable for Side0, 0\" } }\n+// { dg-final { setup_xfail *-*-* } }\n // { dg-final { scan-assembler-dem vtgc1.C \"\\.vtable_inherit\\[ \\t\\]*vtable for VbasedA, 0\" } }\n+// { dg-final { setup_xfail *-*-* } }\n // { dg-final { scan-assembler-dem vtgc1.C \"\\.vtable_inherit\\[ \\t\\]*VTT for VbasedA, 0\" } }\n+// { dg-final { setup_xfail *-*-* } }\n // { dg-final { scan-assembler-dem vtgc1.C \"\\.vtable_inherit\\[ \\t\\]*vtable for Base2, vtable for Base1\" } }\n+// { dg-final { setup_xfail *-*-* } }\n // { dg-final { scan-assembler-dem vtgc1.C \"\\.vtable_inherit\\[ \\t\\]*vtable for Base1, vtable for Base0\" } }\n+// { dg-final { setup_xfail *-*-* } }\n // { dg-final { scan-assembler-dem vtgc1.C \"\\.vtable_inherit\\[ \\t\\]*vtable for Base0, 0\" } }"}, {"sha": "2fa185f56f169b11ee9dbee232143be9b489ad96", "filename": "gcc/testsuite/g++.old-deja/g++.other/crash18.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcca588c9490ffd09b2d1bcb24f532a2a7b815bc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcca588c9490ffd09b2d1bcb24f532a2a7b815bc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash18.C?ref=fcca588c9490ffd09b2d1bcb24f532a2a7b815bc", "patch": "@@ -1,7 +1,7 @@\n // Build don't link:\n // Special g++ Options: -fvtable-gc\n // Origin: Mark Mitchell <mitchell@codesourcery.com>\n-// excess errors test - XFAIL *-*-coff *-*-aout *-*-hms mips*-sgi-irix*\n+// excess errors test - XFAIL *-*-*\n \n struct S {\n   virtual void f ();"}]}