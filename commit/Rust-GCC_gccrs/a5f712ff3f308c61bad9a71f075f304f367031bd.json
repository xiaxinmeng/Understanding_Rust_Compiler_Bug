{"sha": "a5f712ff3f308c61bad9a71f075f304f367031bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVmNzEyZmYzZjMwOGM2MWJhZDlhNzFmMDc1ZjMwNGYzNjcwMzFiZA==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2004-12-12T16:45:20Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2004-12-12T16:45:20Z"}, "message": "re PR tree-optimization/18040 (ICE in for_each_index, at tree-ssa-loop-im.c:178)\n\n2004-12-12  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR tree-opt/18040\n        * g++.dg/opt/ptrmem6.C: New test.\n\n2004-12-12  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR tree-opt/18040\n        * expr.c (get_inner_reference): Remove NON_LVALUE_EXPR, NOP_EXPR,\n        CONVERT_EXPR cases.\n        (handled_component_p): Likewise.\n\nFrom-SVN: r92051", "tree": {"sha": "6b9af61f2a460eb0d5a22975239f5c95ddfd4b12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b9af61f2a460eb0d5a22975239f5c95ddfd4b12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5f712ff3f308c61bad9a71f075f304f367031bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5f712ff3f308c61bad9a71f075f304f367031bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5f712ff3f308c61bad9a71f075f304f367031bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5f712ff3f308c61bad9a71f075f304f367031bd/comments", "author": null, "committer": null, "parents": [{"sha": "902c2ed4ead835a619897aa11fe6cdee34106ae4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/902c2ed4ead835a619897aa11fe6cdee34106ae4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/902c2ed4ead835a619897aa11fe6cdee34106ae4"}], "stats": {"total": 59, "additions": 40, "deletions": 19}, "files": [{"sha": "ba0229f1fcd934902abf002db8d8c5bc4428e705", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5f712ff3f308c61bad9a71f075f304f367031bd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5f712ff3f308c61bad9a71f075f304f367031bd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a5f712ff3f308c61bad9a71f075f304f367031bd", "patch": "@@ -1,3 +1,10 @@\n+2004-12-12  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR tree-opt/18040\n+\t* expr.c (get_inner_reference): Remove NON_LVALUE_EXPR, NOP_EXPR,\n+\tCONVERT_EXPR cases.\n+\t(handled_component_p): Likewise.\n+\n 2004-12-12  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* reg-stack.c (convert_regs_2): Free stack."}, {"sha": "8505d8f676f1d26d76187deb47444515431fcbc6", "filename": "gcc/expr.c", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5f712ff3f308c61bad9a71f075f304f367031bd/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5f712ff3f308c61bad9a71f075f304f367031bd/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=a5f712ff3f308c61bad9a71f075f304f367031bd", "patch": "@@ -5293,16 +5293,6 @@ get_inner_reference (tree exp, HOST_WIDE_INT *pbitsize,\n \t   conversions that don't change the mode, and all view conversions\n \t   except those that need to \"step up\" the alignment.  */\n \n-\tcase NON_LVALUE_EXPR:\n-\t  break;\n-\n-\tcase NOP_EXPR:\n-\tcase CONVERT_EXPR:\n-\t  if (TYPE_MODE (TREE_TYPE (exp))\n-\t      != TYPE_MODE (TREE_TYPE (TREE_OPERAND (exp, 0))))\n-\t    goto done;\n-\t  break;\n-\n \tcase VIEW_CONVERT_EXPR:\n \t  if ((TYPE_ALIGN (TREE_TYPE (exp))\n \t       > TYPE_ALIGN (TREE_TYPE (TREE_OPERAND (exp, 0))))\n@@ -5445,20 +5435,11 @@ handled_component_p (tree t)\n     case COMPONENT_REF:\n     case ARRAY_REF:\n     case ARRAY_RANGE_REF:\n-    case NON_LVALUE_EXPR:\n     case VIEW_CONVERT_EXPR:\n     case REALPART_EXPR:\n     case IMAGPART_EXPR:\n       return 1;\n \n-    /* ??? Sure they are handled, but get_inner_reference may return\n-       a different PBITSIZE, depending upon whether the expression is\n-       wrapped up in a NOP_EXPR or not, e.g. for bitfields.  */\n-    case NOP_EXPR:\n-    case CONVERT_EXPR:\n-      return (TYPE_MODE (TREE_TYPE (t))\n-\t      == TYPE_MODE (TREE_TYPE (TREE_OPERAND (t, 0))));\n-\n     default:\n       return 0;\n     }"}, {"sha": "96706b2dc202e7f4b1efc113246c737918bef056", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5f712ff3f308c61bad9a71f075f304f367031bd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5f712ff3f308c61bad9a71f075f304f367031bd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a5f712ff3f308c61bad9a71f075f304f367031bd", "patch": "@@ -1,3 +1,8 @@\n+2004-12-12  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR tree-opt/18040\n+\t* g++.dg/opt/ptrmem6.C: New test.\n+\n 2004-12-11  Roger Sayle  <roger@eyesopen.com>\n \n \tPR middle-end/18921"}, {"sha": "891c4ff176faf8352e7d8d8038482894bd43d57a", "filename": "gcc/testsuite/g++.dg/opt/ptrmem6.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5f712ff3f308c61bad9a71f075f304f367031bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fptrmem6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5f712ff3f308c61bad9a71f075f304f367031bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fptrmem6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fptrmem6.C?ref=a5f712ff3f308c61bad9a71f075f304f367031bd", "patch": "@@ -0,0 +1,28 @@\n+// PR tree-opt/18040\n+// { dg-do compile }\n+// { dg-options \"-O3\" }\n+\n+int PyObject_IsTrue();\n+struct object_base\n+{\n+  void ptr() const;\n+  void ptr1() const;\n+};\n+struct object : public object_base\n+{\n+  typedef void (object::*bool_type)() const;\n+  inline operator bool_type() const\n+    { return PyObject_IsTrue()\n+       ? &object_base::ptr : &object::ptr1; }\n+};\n+void f();\n+void g (void)\n+{\n+    for (unsigned n = 0; n < 100; ++n)\n+    {\n+        object kv;\n+        if (kv)\n+          f();\n+    }\n+}\n+"}]}