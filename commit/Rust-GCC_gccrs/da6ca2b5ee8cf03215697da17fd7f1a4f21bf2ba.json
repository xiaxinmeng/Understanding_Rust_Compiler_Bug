{"sha": "da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE2Y2EyYjVlZThjZjAzMjE1Njk3ZGExN2ZkN2YxYTRmMjFiZjJiYQ==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2013-08-22T10:14:46Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2013-08-22T10:14:46Z"}, "message": "pretty-print.h (output_buffer::output_buffer): Declare.\n\n\t* pretty-print.h (output_buffer::output_buffer): Declare.\n\t(pretty_printer::pretty_printer): Likewise.\n\t(pp_construct): Remove.\n\t* pretty-print.c (output_buffer::output_buffer): Define.\n\t(pretty_printer::pretty_printer): Rename from pp_construct.  Simplify.\n\t* gimple-pretty-print.c (print_gimple_stmt): Do not call pp_construct.\n\t(print_gimple_expr): Likewise.\n\t(print_gimple_seq): Likewise.\n\t(gimple_dump_bb): Likewise.\n\t* sched-vis.c (dump_value_slim): Likewise.\n\t(dump_insn_slim): Likewise.\n\t(dump_rtl_slim): Likewise.\n\t(str_pattern_slim): Likewise.\n\t* tree-mudflap.c (mf_varname_tree): Likewise.\n\t* graph.c (print_graph_cfg): Likewise.\n\t(start_graph_dump): Likewise.\n\t* tree-pretty-print.c (maybe_init_pretty_print): Likewise.  Use\n\tplacement-new.\n\t* diagnostic.c (diagnostic_initialize): Simplify early diagnostic\n\tpretty printer initialization.\n\t* coretypes.h (diagnostic_context): Remove superflous type alias\n\tdeclaration.\n\t(pretty_printer): Likewise.  Declare directly as a class.\n\t(pretty_print_info): Remove declaration as class.\n\t* asan.c (asan_emit_stack_protection): Remove call to pp_construct\n\tand pp_clear_output_area.\n\t(asan_add_global): Likewise.\n\nc/\n\t* c-objc-common.c (c_initialize_diagnostics): Simplify C pretty\n\tprinter initialization.\n\nc-family/\n\t* c-pretty-print.h (pp_c_pretty_printer_init): Remove.\n\t(c_pretty_printer::c_pretty_printer): Declare.\n\t* c-pretty-print.c (pretty_printer::c_pretty_printer): Rename from\n\tc_pretty_printer_init.  Adjust.\n\t(print_c_tree): Do not call c_pretty_printer_init.\n\t* c-ada-spec.c (dump_ads): Remove call to pp_construct.\n\ncp/\n\t* error.c (init_error): Remove calls to pp_construct and\n\tpp_cxx_pretty_printer_init.  Initialize cxx_pp with placement-new.\n\t* cxx-pretty-print.h (cxx_pretty_printer::cxx_pretty_printer): Declare.\n\t(cxx_pretty_printer_init): Remove.\n\t* cxx-pretty-print.c (cxx_pretty_printer::cxx_pretty_printer):\n\tRename from cxx_pretty_printer_init.  Adjust.\n\t* cp-objcp-common.c (cxx_initialize_diagnostics): Simplify\n\tinitialization of C++ diagnostics pretty printer.\n\nFrom-SVN: r201918", "tree": {"sha": "022ef428c3c313c44d9026f48348fe881e59ba87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/022ef428c3c313c44d9026f48348fe881e59ba87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0e1474e5a6b808f10e251e2e1f3519f9f291d093", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e1474e5a6b808f10e251e2e1f3519f9f291d093", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e1474e5a6b808f10e251e2e1f3519f9f291d093"}], "stats": {"total": 305, "additions": 180, "deletions": 125}, "files": [{"sha": "e65e9ce19c7847434878cf449babb33cf0dbe74e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba", "patch": "@@ -1,3 +1,33 @@\n+2013-08-22  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* pretty-print.h (output_buffer::output_buffer): Declare.\n+\t(pretty_printer::pretty_printer): Likewise.\n+\t(pp_construct): Remove.\n+\t* pretty-print.c (output_buffer::output_buffer): Define.\n+\t(pretty_printer::pretty_printer): Rename from pp_construct.  Simplify.\n+\t* gimple-pretty-print.c (print_gimple_stmt): Do not call pp_construct.\n+\t(print_gimple_expr): Likewise.\n+\t(print_gimple_seq): Likewise.\n+\t(gimple_dump_bb): Likewise.\n+\t* sched-vis.c (dump_value_slim): Likewise.\n+\t(dump_insn_slim): Likewise.\n+\t(dump_rtl_slim): Likewise.\n+\t(str_pattern_slim): Likewise.\n+\t* tree-mudflap.c (mf_varname_tree): Likewise.\n+\t* graph.c (print_graph_cfg): Likewise.\n+\t(start_graph_dump): Likewise.\n+\t* tree-pretty-print.c (maybe_init_pretty_print): Likewise.  Use\n+\tplacement-new.\n+\t* diagnostic.c (diagnostic_initialize): Simplify early diagnostic\n+\tpretty printer initialization.\n+\t* coretypes.h (diagnostic_context): Remove superflous type alias\n+\tdeclaration.\n+\t(pretty_printer): Likewise.  Declare directly as a class.\n+\t(pretty_print_info): Remove declaration as class.\n+\t* asan.c (asan_emit_stack_protection): Remove call to pp_construct\n+\tand pp_clear_output_area.\n+\t(asan_add_global): Likewise.\n+\n 2013-08-22  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraphunit.c (analyze_functions) Use update_type_inheritance_graph."}, {"sha": "81118a7cb4c027e329f86087294ba92901a1faee", "filename": "gcc/asan.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba", "patch": "@@ -938,9 +938,7 @@ asan_emit_stack_protection (rtx base, HOST_WIDE_INT *offsets, tree *decls,\n \n   /* First of all, prepare the description string.  */\n   pretty_printer asan_pp;\n-  pp_construct (&asan_pp, /* prefix */NULL, /* line-width */0);\n-  \n-  pp_clear_output_area (&asan_pp);\n+\n   if (DECL_NAME (current_function_decl))\n     pp_tree_identifier (&asan_pp, DECL_NAME (current_function_decl));\n   else\n@@ -1963,9 +1961,7 @@ asan_add_global (tree decl, tree type, vec<constructor_elt, va_gc> *v)\n   vec<constructor_elt, va_gc> *vinner = NULL;\n \n   pretty_printer asan_pp;\n-  pp_construct (&asan_pp, /* prefix */NULL, /* line-width */0);\n \n-  pp_clear_output_area (&asan_pp);\n   if (DECL_NAME (decl))\n     pp_tree_identifier (&asan_pp, DECL_NAME (decl));\n   else"}, {"sha": "513a927d6989f18bbedec2417ee88c6ab8c261aa", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba", "patch": "@@ -1,3 +1,12 @@\n+2013-08-22  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* c-pretty-print.h (pp_c_pretty_printer_init): Remove.\n+\t(c_pretty_printer::c_pretty_printer): Declare.\n+\t* c-pretty-print.c (pretty_printer::c_pretty_printer): Rename from\n+\tc_pretty_printer_init.  Adjust.\n+\t(print_c_tree): Do not call c_pretty_printer_init.\n+\t* c-ada-spec.c (dump_ads): Remove call to pp_construct.\n+\n 2013-08-09  Arnaud Charlet  <charlet@adacore.com>\n \n \t* c-ada-spec.c (print_ada_declaration): Prevent accessing null asm name"}, {"sha": "eac57838752da24c7e830f842b2f7da97e8cd746", "filename": "gcc/c-family/c-ada-spec.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Fc-family%2Fc-ada-spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Fc-family%2Fc-ada-spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ada-spec.c?ref=da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba", "patch": "@@ -3304,7 +3304,6 @@ dump_ads (const char *source_file,\n     {\n       pretty_printer pp;\n \n-      pp_construct (&pp, NULL, 0);\n       pp_needs_newline (&pp) = true;\n       pp.buffer->stream = f;\n "}, {"sha": "253dfd13ff668086c1875ed799fd5df6289f6d3e", "filename": "gcc/c-family/c-pretty-print.c", "status": "modified", "additions": 32, "deletions": 35, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Fc-family%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Fc-family%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.c?ref=da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba", "patch": "@@ -2318,39 +2318,37 @@ pp_c_statement (c_pretty_printer *pp, tree stmt)\n \f\n /* Initialize the PRETTY-PRINTER for handling C codes.  */\n \n-void\n-pp_c_pretty_printer_init (c_pretty_printer *pp)\n-{\n-  pp->offset_list               = 0;\n-\n-  pp->flags\t\t\t= 0;\n-\n-  pp->declaration               = pp_c_declaration;\n-  pp->declaration_specifiers    = pp_c_declaration_specifiers;\n-  pp->declarator                = pp_c_declarator;\n-  pp->direct_declarator         = pp_c_direct_declarator;\n-  pp->type_specifier_seq        = pp_c_specifier_qualifier_list;\n-  pp->abstract_declarator       = pp_c_abstract_declarator;\n-  pp->direct_abstract_declarator = pp_c_direct_abstract_declarator;\n-  pp->ptr_operator              = pp_c_pointer;\n-  pp->parameter_list            = pp_c_parameter_type_list;\n-  pp->type_id                   = pp_c_type_id;\n-  pp->simple_type_specifier     = pp_c_type_specifier;\n-  pp->function_specifier        = pp_c_function_specifier;\n-  pp->storage_class_specifier   = pp_c_storage_class_specifier;\n-\n-  pp->statement                 = pp_c_statement;\n-\n-  pp->constant                  = pp_c_constant;\n-  pp->id_expression             = pp_c_id_expression;\n-  pp->primary_expression        = pp_c_primary_expression;\n-  pp->postfix_expression        = pp_c_postfix_expression;\n-  pp->unary_expression          = pp_c_unary_expression;\n-  pp->initializer               = pp_c_initializer;\n-  pp->multiplicative_expression = pp_c_multiplicative_expression;\n-  pp->conditional_expression    = pp_c_conditional_expression;\n-  pp->assignment_expression     = pp_c_assignment_expression;\n-  pp->expression                = pp_c_expression;\n+c_pretty_printer::c_pretty_printer ()\n+  : pretty_printer ()\n+{\n+  offset_list               = 0;\n+  flags\t\t\t= 0;\n+  declaration               = pp_c_declaration;\n+  declaration_specifiers    = pp_c_declaration_specifiers;\n+  declarator                = pp_c_declarator;\n+  direct_declarator         = pp_c_direct_declarator;\n+  type_specifier_seq        = pp_c_specifier_qualifier_list;\n+  abstract_declarator       = pp_c_abstract_declarator;\n+  direct_abstract_declarator = pp_c_direct_abstract_declarator;\n+  ptr_operator              = pp_c_pointer;\n+  parameter_list            = pp_c_parameter_type_list;\n+  type_id                   = pp_c_type_id;\n+  simple_type_specifier     = pp_c_type_specifier;\n+  function_specifier        = pp_c_function_specifier;\n+  storage_class_specifier   = pp_c_storage_class_specifier;\n+\n+  statement                 = pp_c_statement;\n+\n+  constant                  = pp_c_constant;\n+  id_expression             = pp_c_id_expression;\n+  primary_expression        = pp_c_primary_expression;\n+  postfix_expression        = pp_c_postfix_expression;\n+  unary_expression          = pp_c_unary_expression;\n+  initializer               = pp_c_initializer;\n+  multiplicative_expression = pp_c_multiplicative_expression;\n+  conditional_expression    = pp_c_conditional_expression;\n+  assignment_expression     = pp_c_assignment_expression;\n+  expression                = pp_c_expression;\n }\n \n \n@@ -2360,8 +2358,7 @@ void\n print_c_tree (FILE *file, tree t)\n {\n   c_pretty_printer pp;\n-  pp_construct (&pp, NULL, 0);\n-  pp_c_pretty_printer_init (&pp);\n+\n   pp_needs_newline (&pp) = true;\n   pp.buffer->stream = file;\n   pp_statement (&pp, t);"}, {"sha": "90647558f7c61e8b132f2d4202fddfaa6dbec472", "filename": "gcc/c-family/c-pretty-print.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Fc-family%2Fc-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Fc-family%2Fc-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.h?ref=da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba", "patch": "@@ -49,6 +49,8 @@ typedef void (*c_pretty_print_fn) (c_pretty_printer *, tree);\n    and cp/cxx-pretty-print.c for an example of derivation.  */\n struct c_pretty_printer : pretty_printer\n {\n+  c_pretty_printer ();\n+\n   /* Points to the first element of an array of offset-list.\n      Not used yet.  */\n   int *offset_list;\n@@ -120,7 +122,6 @@ struct c_pretty_printer : pretty_printer\n #define pp_expression(PP, E)            (PP)->expression (PP, E)\n \n \n-extern void pp_c_pretty_printer_init (c_pretty_printer *);\n void pp_c_whitespace (c_pretty_printer *);\n void pp_c_left_paren (c_pretty_printer *);\n void pp_c_right_paren (c_pretty_printer *);"}, {"sha": "b0b25aca39d6f04930e309c70ddf325a87516b50", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba", "patch": "@@ -1,5 +1,10 @@\n+2013-08-22  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* c-objc-common.c (c_initialize_diagnostics): Simplify C pretty\n+\tprinter initialization.\n+\n 2013-08-19  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n-\t\n+\n \tPR c/57490\n \t* c-array-notation.c (fix_conditional_array_notations_1): Added a\n \tcheck for truth values."}, {"sha": "978c4328d28a1766a422983bd27bd1705d7402dd", "filename": "gcc/c/c-objc-common.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Fc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Fc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-objc-common.c?ref=da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba", "patch": "@@ -30,6 +30,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"c-objc-common.h\"\n \n+#include <new>                          // For placement new.\n+\n static bool c_tree_printer (pretty_printer *, text_info *, const char *,\n \t\t\t    int, bool, bool, bool);\n \n@@ -183,16 +185,11 @@ has_c_linkage (const_tree decl ATTRIBUTE_UNUSED)\n void\n c_initialize_diagnostics (diagnostic_context *context)\n {\n-  pretty_printer *base;\n-  c_pretty_printer *pp;\n-\n   c_common_initialize_diagnostics (context);\n \n-  base = context->printer;\n-  pp = XNEW (c_pretty_printer);\n-  memcpy (pp, base, sizeof (pretty_printer));\n-  pp_c_pretty_printer_init (pp);\n-  context->printer = (pretty_printer *) pp;\n+  pretty_printer *base = context->printer;\n+  c_pretty_printer *pp = XNEW (c_pretty_printer);\n+  context->printer = new (pp) c_pretty_printer ();\n \n   /* It is safe to free this object because it was previously XNEW()'d.  */\n   XDELETE (base);"}, {"sha": "bff8f5c62d5df3f35c6ef64f9b7a9c80d02ac3ee", "filename": "gcc/coretypes.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Fcoretypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Fcoretypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoretypes.h?ref=da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba", "patch": "@@ -73,9 +73,7 @@ struct cl_option;\n struct cl_decoded_option;\n struct cl_option_handlers;\n struct diagnostic_context;\n-typedef struct diagnostic_context diagnostic_context;\n-struct pretty_print_info;\n-typedef struct pretty_print_info pretty_printer;\n+struct pretty_printer;\n \n /* Address space number for named address space support.  */\n typedef unsigned char addr_space_t;"}, {"sha": "4624e7395c642c04269e9b6d3c2597fe06d5b2a0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba", "patch": "@@ -1,3 +1,14 @@\n+2013-08-22  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* error.c (init_error): Remove calls to pp_construct and\n+\tpp_cxx_pretty_printer_init.  Initialize cxx_pp with placement-new.\n+\t* cxx-pretty-print.h (cxx_pretty_printer::cxx_pretty_printer): Declare.\n+\t(cxx_pretty_printer_init): Remove.\n+\t* cxx-pretty-print.c (cxx_pretty_printer::cxx_pretty_printer):\n+\tRename from cxx_pretty_printer_init.  Adjust.\n+\t* cp-objcp-common.c (cxx_initialize_diagnostics): Simplify\n+\tinitialization of C++ diagnostics pretty printer.\n+\n 2013-08-21  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* call.c (build_new_method_call_1): Use INDIRECT_REF_P."}, {"sha": "c11ecebf9db6cb56f950e5dd3037279b74280524", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba", "patch": "@@ -32,6 +32,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cxx-pretty-print.h\"\n #include \"cp-objcp-common.h\"\n \n+#include <new>                       // For placement new.\n+\n /* Special routine to get the alias set for C++.  */\n \n alias_set_type\n@@ -131,19 +133,14 @@ cp_var_mod_type_p (tree type, tree fn)\n void\n cxx_initialize_diagnostics (diagnostic_context *context)\n {\n-  pretty_printer *base;\n-  cxx_pretty_printer *pp;\n-\n   c_common_initialize_diagnostics (context);\n \n-  base = context->printer;\n-  pp = XNEW (cxx_pretty_printer);\n-  memcpy (pp, base, sizeof (pretty_printer));\n-  pp_cxx_pretty_printer_init (pp);\n-  context->printer = (pretty_printer *) pp;\n+  pretty_printer *base = context->printer;\n+  cxx_pretty_printer *pp = XNEW (cxx_pretty_printer);\n+  context->printer = new (pp) cxx_pretty_printer ();\n \n-  /* It is safe to free this object because it was previously malloc()'d.  */\n-  free (base);\n+  /* It is safe to free this object because it was previously XNEW()'d.  */\n+  XDELETE (base);\n }\n \n /* This compares two types for equivalence (\"compatible\" in C-based languages)."}, {"sha": "6c3236595d23a05ef74f124b0d0c20085349372b", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 25, "deletions": 26, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba", "patch": "@@ -2432,34 +2432,33 @@ typedef c_pretty_print_fn pp_fun;\n \n /* Initialization of a C++ pretty-printer object.  */\n \n-void\n-pp_cxx_pretty_printer_init (cxx_pretty_printer *pp)\n+cxx_pretty_printer::cxx_pretty_printer ()\n+  : c_pretty_printer (),\n+    enclosing_scope (global_namespace)\n {\n-  pp_c_pretty_printer_init (pp);\n-  pp_set_line_maximum_length (pp, 0);\n-\n-  pp->declaration = (pp_fun) pp_cxx_declaration;\n-  pp->declaration_specifiers = (pp_fun) pp_cxx_decl_specifier_seq;\n-  pp->function_specifier = (pp_fun) pp_cxx_function_specifier;\n-  pp->type_specifier_seq = (pp_fun) pp_cxx_type_specifier_seq;\n-  pp->declarator = (pp_fun) pp_cxx_declarator;\n-  pp->direct_declarator = (pp_fun) pp_cxx_direct_declarator;\n-  pp->parameter_list = (pp_fun) pp_cxx_parameter_declaration_clause;\n-  pp->type_id = (pp_fun) pp_cxx_type_id;\n-  pp->abstract_declarator = (pp_fun) pp_cxx_abstract_declarator;\n-  pp->direct_abstract_declarator = (pp_fun) pp_cxx_direct_abstract_declarator;\n-  pp->simple_type_specifier = (pp_fun) pp_cxx_simple_type_specifier;\n+  pp_set_line_maximum_length (this, 0);\n+\n+  declaration = (pp_fun) pp_cxx_declaration;\n+  declaration_specifiers = (pp_fun) pp_cxx_decl_specifier_seq;\n+  function_specifier = (pp_fun) pp_cxx_function_specifier;\n+  type_specifier_seq = (pp_fun) pp_cxx_type_specifier_seq;\n+  declarator = (pp_fun) pp_cxx_declarator;\n+  direct_declarator = (pp_fun) pp_cxx_direct_declarator;\n+  parameter_list = (pp_fun) pp_cxx_parameter_declaration_clause;\n+  type_id = (pp_fun) pp_cxx_type_id;\n+  abstract_declarator = (pp_fun) pp_cxx_abstract_declarator;\n+  direct_abstract_declarator = (pp_fun) pp_cxx_direct_abstract_declarator;\n+  simple_type_specifier = (pp_fun) pp_cxx_simple_type_specifier;\n \n   /* pp->statement = (pp_fun) pp_cxx_statement;  */\n \n-  pp->constant = (pp_fun) pp_cxx_constant;\n-  pp->id_expression = (pp_fun) pp_cxx_id_expression;\n-  pp->primary_expression = (pp_fun) pp_cxx_primary_expression;\n-  pp->postfix_expression = (pp_fun) pp_cxx_postfix_expression;\n-  pp->unary_expression = (pp_fun) pp_cxx_unary_expression;\n-  pp->multiplicative_expression = (pp_fun) pp_cxx_multiplicative_expression;\n-  pp->conditional_expression = (pp_fun) pp_cxx_conditional_expression;\n-  pp->assignment_expression = (pp_fun) pp_cxx_assignment_expression;\n-  pp->expression = (pp_fun) pp_cxx_expression;\n-  pp->enclosing_scope = global_namespace;\n+  constant = (pp_fun) pp_cxx_constant;\n+  id_expression = (pp_fun) pp_cxx_id_expression;\n+  primary_expression = (pp_fun) pp_cxx_primary_expression;\n+  postfix_expression = (pp_fun) pp_cxx_postfix_expression;\n+  unary_expression = (pp_fun) pp_cxx_unary_expression;\n+  multiplicative_expression = (pp_fun) pp_cxx_multiplicative_expression;\n+  conditional_expression = (pp_fun) pp_cxx_conditional_expression;\n+  assignment_expression = (pp_fun) pp_cxx_assignment_expression;\n+  expression = (pp_fun) pp_cxx_expression;\n }"}, {"sha": "c4611e2e5234f5d6e01e60f33fac2d64c3944a97", "filename": "gcc/cp/cxx-pretty-print.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Fcp%2Fcxx-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Fcp%2Fcxx-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.h?ref=da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba", "patch": "@@ -31,6 +31,7 @@ enum cxx_pretty_printer_flags\n \n struct cxx_pretty_printer : c_pretty_printer\n {\n+  cxx_pretty_printer ();\n   /* This is the enclosing scope of the entity being pretty-printed.  */\n   tree enclosing_scope;\n };\n@@ -59,7 +60,6 @@ struct cxx_pretty_printer : c_pretty_printer\n #define pp_cxx_tree_identifier(PP, T) \\\n   pp_c_tree_identifier (PP, T)\n \n-void pp_cxx_pretty_printer_init (cxx_pretty_printer *);\n void pp_cxx_begin_template_argument_list (cxx_pretty_printer *);\n void pp_cxx_end_template_argument_list (cxx_pretty_printer *);\n void pp_cxx_colon_colon (cxx_pretty_printer *);"}, {"sha": "a930803be8a38005121b01ba2c678158de900264", "filename": "gcc/cp/error.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba", "patch": "@@ -33,6 +33,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"pointer-set.h\"\n #include \"c-family/c-objc.h\"\n \n+#include <new>                    // For placement-new.\n+\n #define pp_separate_with_comma(PP) pp_cxx_separate_with (PP, ',')\n #define pp_separate_with_semicolon(PP) pp_cxx_separate_with (PP, ';')\n \n@@ -109,8 +111,7 @@ init_error (void)\n   diagnostic_finalizer (global_dc) = cp_diagnostic_finalizer;\n   diagnostic_format_decoder (global_dc) = cp_printer;\n \n-  pp_construct (cxx_pp, NULL, 0);\n-  pp_cxx_pretty_printer_init (cxx_pp);\n+  new (cxx_pp) cxx_pretty_printer ();\n }\n \n /* Dump a scope, if deemed necessary.  */"}, {"sha": "98252237e95f3bdd2cb5cbed34d822feab83f886", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba", "patch": "@@ -33,6 +33,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"diagnostic.h\"\n #include \"diagnostic-color.h\"\n \n+#include <new>                     // For placement new.\n+\n #define pedantic_warning_kind(DC)\t\t\t\\\n   ((DC)->pedantic_errors ? DK_ERROR : DK_WARNING)\n #define permissive_error_kind(DC) ((DC)->permissive ? DK_WARNING : DK_ERROR)\n@@ -120,11 +122,7 @@ diagnostic_initialize (diagnostic_context *context, int n_opts)\n   /* Allocate a basic pretty-printer.  Clients will replace this a\n      much more elaborated pretty-printer if they wish.  */\n   context->printer = XNEW (pretty_printer);\n-  pp_construct (context->printer, NULL, 0);\n-  /* By default, diagnostics are sent to stderr.  */\n-  context->printer->buffer->stream = stderr;\n-  /* By default, we emit prefixes once per message.  */\n-  context->printer->wrapping.rule = DIAGNOSTICS_SHOW_PREFIX_ONCE;\n+  new (context->printer) pretty_printer ();\n \n   memset (context->diagnostic_count, 0, sizeof context->diagnostic_count);\n   context->some_warnings_are_errors = false;"}, {"sha": "4544e693eb7e9d1b287f6c7e06de56606ce420bc", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba", "patch": "@@ -75,7 +75,6 @@ void\n print_gimple_stmt (FILE *file, gimple g, int spc, int flags)\n {\n   pretty_printer buffer;\n-  pp_construct (&buffer, NULL, 0);\n   pp_needs_newline (&buffer) = true;\n   buffer.buffer->stream = file;\n   pp_gimple_stmt_1 (&buffer, g, spc, flags);\n@@ -107,7 +106,6 @@ print_gimple_expr (FILE *file, gimple g, int spc, int flags)\n {\n   flags |= TDF_RHS_ONLY;\n   pretty_printer buffer;\n-  pp_construct (&buffer, NULL, 0);\n   pp_needs_newline (&buffer) = true;\n   buffer.buffer->stream = file;\n   pp_gimple_stmt_1 (&buffer, g, spc, flags);\n@@ -143,7 +141,6 @@ void\n print_gimple_seq (FILE *file, gimple_seq seq, int spc, int flags)\n {\n   pretty_printer buffer;\n-  pp_construct (&buffer, NULL, 0);\n   pp_needs_newline (&buffer) = true;\n   buffer.buffer->stream = file;\n   dump_gimple_seq (&buffer, seq, spc, flags);\n@@ -2270,7 +2267,6 @@ gimple_dump_bb (FILE *file, basic_block bb, int indent, int flags)\n   if (bb->index >= NUM_FIXED_BLOCKS)\n     {\n       pretty_printer buffer;\n-      pp_construct (&buffer, NULL, 0);\n       pp_needs_newline (&buffer) = true;\n       buffer.buffer->stream = file;\n       gimple_dump_bb_buff (&buffer, bb, indent, flags);"}, {"sha": "0ec279d86a9a6150c085e63337ba7ca11ac7a4b0", "filename": "gcc/graph.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Fgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Fgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraph.c?ref=da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba", "patch": "@@ -278,7 +278,6 @@ print_graph_cfg (const char *base, struct function *fun)\n   const char *funcname = function_name (fun);\n   FILE *fp = open_graph_file (base, \"a\");\n   pretty_printer graph_slim_pp;\n-  pp_construct (&graph_slim_pp, /*prefix=*/NULL, /*linewidth=*/0);\n   graph_slim_pp.buffer->stream = fp;\n   pretty_printer *const pp = &graph_slim_pp;\n   pp_printf (pp, \"subgraph \\\"%s\\\" {\\n\"\n@@ -297,7 +296,6 @@ static void\n start_graph_dump (FILE *fp, const char *base)\n {\n   pretty_printer graph_slim_pp;\n-  pp_construct (&graph_slim_pp, /*prefix=*/NULL, /*linewidth=*/0);\n   graph_slim_pp.buffer->stream = fp;\n   pretty_printer *const pp = &graph_slim_pp;\n   pp_string (pp, \"digraph \\\"\");"}, {"sha": "2d2541048f8ef6956d2966c549cce7ee6d222046", "filename": "gcc/pretty-print.c", "status": "modified", "additions": 34, "deletions": 12, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Fpretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Fpretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.c?ref=da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba", "patch": "@@ -25,10 +25,27 @@ along with GCC; see the file COPYING3.  If not see\n #include \"pretty-print.h\"\n #include \"diagnostic-color.h\"\n \n+#include <new>                    // For placement-new.\n+\n #if HAVE_ICONV\n #include <iconv.h>\n #endif\n \n+// Default construct an output buffer.\n+\n+output_buffer::output_buffer ()\n+  : formatted_obstack (),\n+    chunk_obstack (),\n+    obstack (&formatted_obstack),\n+    cur_chunk_array (),\n+    stream (stderr),\n+    line_length (),\n+    digit_buffer ()\n+{\n+  obstack_init (&formatted_obstack);\n+  obstack_init (&chunk_obstack);\n+}\n+\n /* A pointer to the formatted diagnostic message.  */\n #define pp_formatted_text_data(PP) \\\n    ((const char *) obstack_base ((PP)->buffer->obstack))\n@@ -736,19 +753,24 @@ pp_emit_prefix (pretty_printer *pp)\n \n /* Construct a PRETTY-PRINTER with PREFIX and of MAXIMUM_LENGTH\n    characters per line.  */\n-void\n-pp_construct (pretty_printer *pp, const char *prefix, int maximum_length)\n+\n+pretty_printer::pretty_printer (const char *p, int l)\n+  : buffer (new (XCNEW (output_buffer)) output_buffer ()),\n+    prefix (),\n+    padding (pp_none),\n+    maximum_length (),\n+    indent_skip (),\n+    wrapping (),\n+    format_decoder (),\n+    emitted_prefix (),\n+    need_newline (),\n+    translate_identifiers(true),\n+    show_color ()\n {\n-  memset (pp, 0, sizeof (pretty_printer));\n-  pp->buffer = XCNEW (output_buffer);\n-  obstack_init (&pp->buffer->chunk_obstack);\n-  obstack_init (&pp->buffer->formatted_obstack);\n-  pp->buffer->obstack = &pp->buffer->formatted_obstack;\n-  pp->buffer->stream = stderr;\n-  pp_line_cutoff (pp) = maximum_length;\n-  pp_prefixing_rule (pp) = DIAGNOSTICS_SHOW_PREFIX_ONCE;\n-  pp_set_prefix (pp, prefix);\n-  pp_translate_identifiers (pp) = true;\n+  pp_line_cutoff (this) = l;\n+  /* By default, we emit prefixes once per message.  */\n+  pp_prefixing_rule (this) = DIAGNOSTICS_SHOW_PREFIX_ONCE;\n+  pp_set_prefix (this, p);\n }\n \n /* Append a string delimited by START and END to the output area of"}, {"sha": "4c47e2b1a25c554da474c0ff46dfcab2bb160a2c", "filename": "gcc/pretty-print.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Fpretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Fpretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.h?ref=da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba", "patch": "@@ -73,6 +73,8 @@ struct chunk_info\n    whose fields should not be accessed directly by clients.  */\n struct output_buffer\n {\n+  output_buffer ();\n+\n   /* Obstack where the text is built up.  */\n   struct obstack formatted_obstack;\n \n@@ -157,8 +159,12 @@ typedef bool (*printer_fn) (pretty_printer *, text_info *, const char *,\n /* The data structure that contains the bare minimum required to do\n    proper pretty-printing.  Clients may derived from this structure\n    and add additional fields they need.  */\n-struct pretty_print_info\n+struct pretty_printer\n {\n+  // Default construct a pretty printer with specified prefix\n+  // and a maximum line length cut off limit.\n+  explicit pretty_printer (const char* = NULL, int = 0);\n+\n   /* Where we print external representation of ENTITY.  */\n   output_buffer *buffer;\n \n@@ -283,7 +289,6 @@ pp_get_prefix (const pretty_printer *pp) { return pp->prefix; }\n \n #define pp_buffer(PP) (PP)->buffer\n \n-extern void pp_construct (pretty_printer *, const char *, int);\n extern void pp_set_line_maximum_length (pretty_printer *, int);\n extern void pp_set_prefix (pretty_printer *, const char *);\n extern void pp_destroy_prefix (pretty_printer *);"}, {"sha": "eb2410cbc4f1833e9ea33bd52a5c9183623a8489", "filename": "gcc/sched-vis.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Fsched-vis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Fsched-vis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-vis.c?ref=da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba", "patch": "@@ -766,7 +766,6 @@ void\n dump_value_slim (FILE *f, const_rtx x, int verbose)\n {\n   pretty_printer rtl_slim_pp;\n-  pp_construct (&rtl_slim_pp, /*prefix=*/NULL, /*linewidth=*/0);\n   rtl_slim_pp.buffer->stream = f;\n   print_value (&rtl_slim_pp, x, verbose);\n   pp_flush (&rtl_slim_pp);\n@@ -778,7 +777,6 @@ void\n dump_insn_slim (FILE *f, const_rtx x)\n {\n   pretty_printer rtl_slim_pp;\n-  pp_construct (&rtl_slim_pp, /*prefix=*/NULL, /*linewidth=*/0);\n   rtl_slim_pp.buffer->stream = f;\n   print_insn_with_notes (&rtl_slim_pp, x);\n   pp_flush (&rtl_slim_pp);\n@@ -793,7 +791,6 @@ dump_rtl_slim (FILE *f, const_rtx first, const_rtx last,\n {\n   const_rtx insn, tail;\n   pretty_printer rtl_slim_pp;\n-  pp_construct (&rtl_slim_pp, /*prefix=*/NULL, /*linewidth=*/0);\n   rtl_slim_pp.buffer->stream = f;\n \n   tail = last ? NEXT_INSN (last) : NULL_RTX;\n@@ -842,7 +839,6 @@ const char *\n str_pattern_slim (const_rtx x)\n {\n   pretty_printer rtl_slim_pp;\n-  pp_construct (&rtl_slim_pp, /*prefix=*/NULL, /*linewidth=*/0);\n   print_pattern (&rtl_slim_pp, x, 0);\n   return ggc_strdup (pp_formatted_text (&rtl_slim_pp));\n }"}, {"sha": "87431e7237cf418d4fc87f0200bfcde09d736444", "filename": "gcc/tree-mudflap.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Ftree-mudflap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Ftree-mudflap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-mudflap.c?ref=da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba", "patch": "@@ -112,8 +112,6 @@ mf_varname_tree (tree decl)\n   gcc_assert (decl);\n \n   pretty_printer buf;\n-  pp_construct (&buf, /* prefix */ NULL, /* line-width */ 0);\n-  pp_clear_output_area (&buf);\n \n   /* Add FILENAME[:LINENUMBER[:COLUMNNUMBER]].  */\n   {"}, {"sha": "541269955d0f610ba4f1357cf811ee8adda857bd", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=da6ca2b5ee8cf03215697da17fd7f1a4f21bf2ba", "patch": "@@ -33,6 +33,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"value-prof.h\"\n #include \"predict.h\"\n \n+#include <new>                           // For placement-new.\n+\n /* Local functions, macros and variables.  */\n static const char *op_symbol (const_tree);\n static void pretty_print_string (pretty_printer *, const char*);\n@@ -3059,7 +3061,7 @@ maybe_init_pretty_print (FILE *file)\n {\n   if (!initialized)\n     {\n-      pp_construct (&buffer, /* prefix */NULL, /* line-width */0);\n+      new (&buffer) pretty_printer ();\n       pp_needs_newline (&buffer) = true;\n       pp_translate_identifiers (&buffer) = false;\n       initialized = 1;"}]}