{"sha": "e541c31f4ca60209f17d3b44d365cfee4659b899", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU0MWMzMWY0Y2E2MDIwOWYxN2QzYjQ0ZDM2NWNmZWU0NjU5Yjg5OQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2005-11-30T16:29:43Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2005-11-30T16:29:43Z"}, "message": "ms1.md (decrement_and_branch_until_zero): Add early clobber to scratch reg.\n\n\t* config/ms1/ms1.md (decrement_and_branch_until_zero): Add early\n\tclobber to scratch reg.\n\t(*decrement_and_branch_until_zero_no_clobber): Remove.\n\t(decrement_and_branch peephole): Add dummy scratch reg to pattern.\n\t(mulhish3): Use TARGET_MS1_16_003, TARGET_MS2.\n\t* config/ms1/ms1.opt (mmul): Remove.\n\t* config/ms1/ms1.h (ASM_SPEC): Cope with uppercase arch names.\n\t(LINK_SPEC, STARTFILE_SPEC, ENDFILE_SPEC): Default to 16-002.\n\nFrom-SVN: r107720", "tree": {"sha": "71e6caf787ad8191ac9ace181c320d7c27001f0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71e6caf787ad8191ac9ace181c320d7c27001f0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e541c31f4ca60209f17d3b44d365cfee4659b899", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e541c31f4ca60209f17d3b44d365cfee4659b899", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e541c31f4ca60209f17d3b44d365cfee4659b899", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e541c31f4ca60209f17d3b44d365cfee4659b899/comments", "author": null, "committer": null, "parents": [{"sha": "ec963611039e095aa654d81ffdd6b94ffd9aaee6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec963611039e095aa654d81ffdd6b94ffd9aaee6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec963611039e095aa654d81ffdd6b94ffd9aaee6"}], "stats": {"total": 63, "additions": 27, "deletions": 36}, "files": [{"sha": "4b9e14549651a345803feb2cf858947bd0880767", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e541c31f4ca60209f17d3b44d365cfee4659b899/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e541c31f4ca60209f17d3b44d365cfee4659b899/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e541c31f4ca60209f17d3b44d365cfee4659b899", "patch": "@@ -1,3 +1,14 @@\n+2005-11-30  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* config/ms1/ms1.md (decrement_and_branch_until_zero): Add early\n+\tclobber to scratch reg.\n+\t(*decrement_and_branch_until_zero_no_clobber): Remove.\n+\t(decrement_and_branch peephole): Add dummy scratch reg to pattern.\n+\t(mulhish3): Use TARGET_MS1_16_003, TARGET_MS2.\n+\t* config/ms1/ms1.opt (mmul): Remove.\n+\t* config/ms1/ms1.h (ASM_SPEC): Cope with uppercase arch names.\n+\t(LINK_SPEC, STARTFILE_SPEC, ENDFILE_SPEC): Default to 16-002.\n+\n 2005-11-30  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \t    Bernd Schmidt  <bernd.schmidt@analog.com>\n "}, {"sha": "68f6eac7dd0fa2a7cbc6f295d63f84571d95ca98", "filename": "gcc/config/ms1/ms1.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e541c31f4ca60209f17d3b44d365cfee4659b899/gcc%2Fconfig%2Fms1%2Fms1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e541c31f4ca60209f17d3b44d365cfee4659b899/gcc%2Fconfig%2Fms1%2Fms1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fms1%2Fms1.h?ref=e541c31f4ca60209f17d3b44d365cfee4659b899", "patch": "@@ -41,7 +41,7 @@ extern enum processor_type ms1_cpu;\n /* A C string constant that tells the GCC driver program options to pass to\n    the assembler.  */\n #undef  ASM_SPEC\n-#define ASM_SPEC \"%{march=ms1-16-002: -march=ms1-16-002} %{march=ms1-16-003: -march=ms1-16-003} %{march=ms2: -march=ms2} %{!march=*: -march=ms1-16-002}\"\n+#define ASM_SPEC \"%{march=*} %{!march=*: -march=ms1-16-002}\"\n \n /* A string to pass to at the end of the command given to the linker.  */\n #undef  LIB_SPEC\n@@ -54,7 +54,8 @@ march=MS1-16-002:-T 16-002.ld%s; \\\n march=ms1-16-003:-T 16-003.ld%s; \\\n march=MS1-16-003:-T 16-003.ld%s; \\\n march=ms2:-T ms2.ld%s; \\\n-march=MS2:-T ms2.ld%s}\"\n+march=MS2:-T ms2.ld%s; \\\n+\t : -T 16-002.ld}\"\n \n /* A string to pass at the very beginning of the command given to the\n    linker.  */\n@@ -67,7 +68,8 @@ march=MS1-16-002:%{!mno-crt0:crt0-16-002.o%s} startup-16-002.o%s; \\\n march=ms1-16-003:%{!mno-crt0:crt0-16-003.o%s} startup-16-003.o%s; \\\n march=MS1-16-003:%{!mno-crt0:crt0-16-003.o%s} startup-16-003.o%s; \\\n march=ms2:%{!mno-crt0:crt0-ms2.o%s} startup-ms2.o%s; \\\n-march=MS2:%{!mno-crt0:crt0-ms2.o%s} startup-ms2.o%s} \\\n+march=MS2:%{!mno-crt0:crt0-ms2.o%s} startup-ms2.o%s; \\\n+\t :%{!mno-crt0:crt0-16-002.o%s} startup-16-002.o%s} \\\n crti.o%s crtbegin.o%s\"\n \n /* A string to pass at the end of the command given to the linker.  */\n@@ -80,7 +82,8 @@ march=MS1-16-002:exit-16-002.o%s; \\\n march=ms1-16-003:exit-16-003.o%s; \\\n march=MS1-16-003:exit-16-003.o%s; \\\n march=ms2:exit-ms2.o%s; \\\n-march=MS2:exit-ms2.o%s} \\\n+march=MS2:exit-ms2.o%s; \\\n+\t :exit-16-002.o%s} \\\n  crtend.o%s crtn.o%s\"\n \f\n /* Run-time target specifications.  */"}, {"sha": "50e704c7bb68ed6143f49e01d7694ae0117ff375", "filename": "gcc/config/ms1/ms1.md", "status": "modified", "additions": 9, "deletions": 28, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e541c31f4ca60209f17d3b44d365cfee4659b899/gcc%2Fconfig%2Fms1%2Fms1.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e541c31f4ca60209f17d3b44d365cfee4659b899/gcc%2Fconfig%2Fms1%2Fms1.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fms1%2Fms1.md?ref=e541c31f4ca60209f17d3b44d365cfee4659b899", "patch": "@@ -88,30 +88,13 @@\n     (set (match_dup 0)\n \t (plus:SI (match_dup 0)\n \t\t  (const_int -1)))\n-    (clobber (match_scratch:SI 2 \"=X,r\"))]\n+    (clobber (match_scratch:SI 2 \"=X,&r\"))]\n   \"TARGET_MS1_16_003 || TARGET_MS2\"\n   \"@\n    dbnz\\t%0, %l1%#\n    #\"\n-  [(set_attr \"length\" \"4,16\")]\n-)\n-\n-;; Same as above, but without the clobber. The peephole below will\n-;; match this pattern.\n-(define_insn \"*decrement_and_branch_until_zero_no_clobber\"\n-   [(set (pc)\n-\t (if_then_else\n-\t  (ne (match_operand:SI 0 \"register_operand\" \"+r\")\n-\t      (const_int 0))\n-\t  (label_ref (match_operand 1 \"\" \"\"))\n-\t  (pc)))\n-    (set (match_dup 0)\n-\t (plus:SI (match_dup 0)\n-\t\t  (const_int -1)))]\n-  \"TARGET_MS1_16_003 || TARGET_MS2\"\n-  \"dbnz\\t%0, %l1%#\"\n-  [(set_attr \"length\" \"4\")\n-   (set_attr \"type\" \"branch\")]\n+  [(set_attr \"length\" \"4,16\")\n+   (set_attr \"type\" \"branch,unknown\")]\n )\n \n ;; Split the above to handle the case where operand 0 is in memory\n@@ -148,12 +131,11 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(plus:SI (match_dup 0) (const_int -1)))\n    (set (match_operand:SI 1 \"register_operand\" \"\")\n-\t(const_int -1))\n+     (const_int -1))\n    (set (pc) (if_then_else\n \t        (ne (match_dup 0) (match_dup 1))\n \t\t(label_ref (match_operand 2 \"\" \"\"))\n-\t\t(pc)))\n-   ]\n+\t\t(pc)))]\n   \"TARGET_MS1_16_003 || TARGET_MS2\"\n   [(parallel [(set (pc)\n \t           (if_then_else\n@@ -162,10 +144,9 @@\n \t              (pc)))\n               (set (match_dup 0)\n \t           (plus:SI (match_dup 0) (const_int -1)))\n-\t     ])\n-  ]\n-  \"\"\n-)\n+\t      (clobber (reg:SI 0))])]\n+  \"\")\n+\n \f\n ;; Moves\n \n@@ -959,7 +940,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n      (mult:SI (sign_extend:SI (match_operand:HI 1 \"register_operand\" \"%r,r\"))\n      \t      (sign_extend:SI (match_operand:HI 2 \"arith_operand\" \"r,I\"))))]\n-  \"TARGET_MUL\"\n+  \"TARGET_MS1_16_003 || TARGET_MS2\"\n   \"@\n   mul %0, %1, %2\n   muli %0, %1, %2\""}, {"sha": "eba1eeabeebde57777cb8f4483843dfd864a0a60", "filename": "gcc/config/ms1/ms1.opt", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e541c31f4ca60209f17d3b44d365cfee4659b899/gcc%2Fconfig%2Fms1%2Fms1.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e541c31f4ca60209f17d3b44d365cfee4659b899/gcc%2Fconfig%2Fms1%2Fms1.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fms1%2Fms1.opt?ref=e541c31f4ca60209f17d3b44d365cfee4659b899", "patch": "@@ -19,10 +19,6 @@\n ; Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n ; 02110-1301, USA.\n \n-mmul\n-Target Report Mask(MUL)\n-Generate multiply instructions\n-\n mbacc\n Target Report Mask(BYTE_ACCESS)\n Use byte loads and stores when generating code."}]}