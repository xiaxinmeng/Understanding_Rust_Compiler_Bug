{"sha": "591b15bb1c185e2364e4e2ed65d1bebb48fbfb2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTkxYjE1YmIxYzE4NWUyMzY0ZTRlMmVkNjVkMWJlYmI0OGZiZmIyYg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-08-08T22:48:15Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-08-08T22:48:15Z"}, "message": "(expand_increment): Call save_expr on inner expression if\nit is itself an increment expression.\n\nFrom-SVN: r5115", "tree": {"sha": "27ba05898fc3296b668be3e7212815b2f2be54e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27ba05898fc3296b668be3e7212815b2f2be54e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/591b15bb1c185e2364e4e2ed65d1bebb48fbfb2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/591b15bb1c185e2364e4e2ed65d1bebb48fbfb2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/591b15bb1c185e2364e4e2ed65d1bebb48fbfb2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/591b15bb1c185e2364e4e2ed65d1bebb48fbfb2b/comments", "author": null, "committer": null, "parents": [{"sha": "3de13334ba84c74f6c7cb0c0e6524d74d32734aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3de13334ba84c74f6c7cb0c0e6524d74d32734aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3de13334ba84c74f6c7cb0c0e6524d74d32734aa"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "713f7d4eb77b8a756e78bb1f4bd59abf8e4e8746", "filename": "gcc/expr.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591b15bb1c185e2364e4e2ed65d1bebb48fbfb2b/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591b15bb1c185e2364e4e2ed65d1bebb48fbfb2b/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=591b15bb1c185e2364e4e2ed65d1bebb48fbfb2b", "patch": "@@ -6940,6 +6940,12 @@ expand_increment (exp, post)\n \t  && (TREE_CODE (TREE_OPERAND (incremented, 0)) != INDIRECT_REF\n \t      || DECL_BIT_FIELD (TREE_OPERAND (incremented, 1)))))\n     incremented = stabilize_reference (incremented);\n+  /* Nested *INCREMENT_EXPRs can happen in C++.  We must force innermost\n+     ones into save exprs so that they don't accidentally get evaluated\n+     more than once by the code below.  */\n+  if (TREE_CODE (incremented) == PREINCREMENT_EXPR\n+      || TREE_CODE (incremented) == PREDECREMENT_EXPR)\n+    incremented = save_expr (incremented);\n \n   /* Compute the operands as RTX.\n      Note whether OP0 is the actual lvalue or a copy of it:"}]}