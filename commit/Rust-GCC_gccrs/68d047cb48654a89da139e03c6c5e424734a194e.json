{"sha": "68d047cb48654a89da139e03c6c5e424734a194e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhkMDQ3Y2I0ODY1NGE4OWRhMTM5ZTAzYzZjNWU0MjQ3MzRhMTk0ZQ==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2013-03-08T20:08:20Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2013-03-08T20:08:20Z"}, "message": "vector.tcc (vector<>operator=(const vector<>&): Reset pointers after deallocation when memory can be reused.\n\n2013-03-08  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/bits/vector.tcc (vector<>operator=(const vector<>&):\n\tReset pointers after deallocation when memory can be reused.\n\t* testsuite/23_containers/vector/allocator/minimal.cc: Insert\n\telements to really challenge C++11 allocator integration.\n\t* testsuite/23_containers/vector/allocator/copy.cc: Likewise.\n\t* testsuite/23_containers/vector/allocator/copy_assign.cc:\n\tLikewise.\n\t* testsuite/23_containers/vector/allocator/move_assign.cc:\n\tLikewise.\n\t* testsuite/23_containers/vector/allocator/swap.cc: Likewise and\n\tswap vector back before checks on memory/personality mapping are\n\tperformed.\n\t* testsuite/23_containers/forward_list/allocator/minimal.cc:\n\tInsert element to really challenge C++11 allocator integration.\n\t* testsuite/23_containers/forward_list/allocator/copy.cc:\n\tLikewise.\n\t* testsuite/23_containers/forward_list/allocator/copy_assign.cc:\n\tLikewise.\n\t* testsuite/23_containers/forward_list/allocator/move_assign.cc:\n\tLikewise.\n\t* testsuite/23_containers/forward_list/allocator/swap.cc: Likewise\n\tand swap forward_list back before checks on memory/personality\n\tmapping are performed.\n\nFrom-SVN: r196557", "tree": {"sha": "ee1852eb35cadccb3742d5a9dfee615de4b02cba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee1852eb35cadccb3742d5a9dfee615de4b02cba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68d047cb48654a89da139e03c6c5e424734a194e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68d047cb48654a89da139e03c6c5e424734a194e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68d047cb48654a89da139e03c6c5e424734a194e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68d047cb48654a89da139e03c6c5e424734a194e/comments", "author": null, "committer": null, "parents": [{"sha": "6384c29bfc15a772d876f5e26b68808560cf0ac3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6384c29bfc15a772d876f5e26b68808560cf0ac3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6384c29bfc15a772d876f5e26b68808560cf0ac3"}], "stats": {"total": 61, "additions": 61, "deletions": 0}, "files": [{"sha": "342c6a42d62232ef6fdbaf31170a35b4959e9c92", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d047cb48654a89da139e03c6c5e424734a194e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d047cb48654a89da139e03c6c5e424734a194e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=68d047cb48654a89da139e03c6c5e424734a194e", "patch": "@@ -1,3 +1,29 @@\n+2013-03-08  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/vector.tcc (vector<>operator=(const vector<>&):\n+\tReset pointers after deallocation when memory can be reused.\n+\t* testsuite/23_containers/vector/allocator/minimal.cc: Insert\n+\telements to really challenge C++11 allocator integration.\n+\t* testsuite/23_containers/vector/allocator/copy.cc: Likewise.\n+\t* testsuite/23_containers/vector/allocator/copy_assign.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/allocator/move_assign.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/allocator/swap.cc: Likewise and\n+\tswap vector back before checks on memory/personality mapping are\n+\tperformed.\n+\t* testsuite/23_containers/forward_list/allocator/minimal.cc:\n+\tInsert element to really challenge C++11 allocator integration.\n+\t* testsuite/23_containers/forward_list/allocator/copy.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/forward_list/allocator/copy_assign.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/forward_list/allocator/move_assign.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/forward_list/allocator/swap.cc: Likewise\n+\tand swap forward_list back before checks on memory/personality\n+\tmapping are performed.\n+\n 2013-03-07  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/abi/post/i386-linux-gnu/baseline_symbols.txt: Update."}, {"sha": "0882fe6884a7a5e94dfcdb9d5c95b8c5bf706d3a", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d047cb48654a89da139e03c6c5e424734a194e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d047cb48654a89da139e03c6c5e424734a194e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=68d047cb48654a89da139e03c6c5e424734a194e", "patch": "@@ -173,6 +173,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t  _M_deallocate(this->_M_impl._M_start,\n \t\t\t\tthis->_M_impl._M_end_of_storage\n \t\t\t\t- this->_M_impl._M_start);\n+\t\t  this->_M_impl._M_start = nullptr;\n+\t\t  this->_M_impl._M_finish = nullptr;\n+\t\t  this->_M_impl._M_end_of_storage = nullptr;\n \t\t}\n \t      std::__alloc_on_copy(_M_get_Tp_allocator(),\n \t\t\t\t   __x._M_get_Tp_allocator());"}, {"sha": "f7e781ce9ec9decf2b5cabcbb32977d1d05f1fe0", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/allocator/copy.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d047cb48654a89da139e03c6c5e424734a194e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fcopy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d047cb48654a89da139e03c6c5e424734a194e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fcopy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fcopy.cc?ref=68d047cb48654a89da139e03c6c5e424734a194e", "patch": "@@ -31,6 +31,7 @@ void test01()\n   typedef propagating_allocator<T, false> alloc_type;\n   typedef std::forward_list<T, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n+  v1.push_front(T());\n   test_type v2(v1);\n   VERIFY(1 == v1.get_allocator().get_personality());\n   VERIFY(0 == v2.get_allocator().get_personality());\n@@ -42,6 +43,7 @@ void test02()\n   typedef propagating_allocator<T, true> alloc_type;\n   typedef std::forward_list<T, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n+  v1.push_front(T());\n   test_type v2(v1);\n   VERIFY(1 == v1.get_allocator().get_personality());\n   VERIFY(1 == v2.get_allocator().get_personality());"}, {"sha": "e673b2e9e00b18d7c454fe8d0e045b04549278fc", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/allocator/copy_assign.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d047cb48654a89da139e03c6c5e424734a194e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fcopy_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d047cb48654a89da139e03c6c5e424734a194e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fcopy_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fcopy_assign.cc?ref=68d047cb48654a89da139e03c6c5e424734a194e", "patch": "@@ -31,7 +31,9 @@ void test01()\n   typedef propagating_allocator<T, false> alloc_type;\n   typedef std::forward_list<T, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n+  v1.push_front(T());\n   test_type v2(alloc_type(2));\n+  v2.push_front(T());\n   v2 = v1;\n   VERIFY(1 == v1.get_allocator().get_personality());\n   VERIFY(2 == v2.get_allocator().get_personality());\n@@ -43,7 +45,9 @@ void test02()\n   typedef propagating_allocator<T, true> alloc_type;\n   typedef std::forward_list<T, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n+  v1.push_front(T());\n   test_type v2(alloc_type(2));\n+  v2.push_front(T());\n   v2 = v1;\n   VERIFY(1 == v1.get_allocator().get_personality());\n   VERIFY(1 == v2.get_allocator().get_personality());"}, {"sha": "4d2a97856e0f31ccb33899492179f0068fccb555", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/allocator/minimal.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d047cb48654a89da139e03c6c5e424734a194e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fminimal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d047cb48654a89da139e03c6c5e424734a194e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fminimal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fminimal.cc?ref=68d047cb48654a89da139e03c6c5e424734a194e", "patch": "@@ -37,6 +37,7 @@ void test01()\n   typedef std::allocator_traits<alloc_type> traits_type;\n   typedef std::forward_list<T, alloc_type> test_type;\n   test_type v(alloc_type{});\n+  v.push_front(T());\n   VERIFY( v.max_size() == traits_type::max_size(v.get_allocator()) );\n }\n "}, {"sha": "b3532392cb9537e2835479e1d388b2c57bfea0cf", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/allocator/move_assign.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d047cb48654a89da139e03c6c5e424734a194e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fmove_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d047cb48654a89da139e03c6c5e424734a194e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fmove_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fmove_assign.cc?ref=68d047cb48654a89da139e03c6c5e424734a194e", "patch": "@@ -31,7 +31,9 @@ void test01()\n   typedef propagating_allocator<T, false> alloc_type;\n   typedef std::forward_list<T, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n+  v1.push_front(T());\n   test_type v2(alloc_type(2));\n+  v2.push_front(T());\n   v2 = std::move(v1);\n   VERIFY(1 == v1.get_allocator().get_personality());\n   VERIFY(2 == v2.get_allocator().get_personality());\n@@ -43,7 +45,9 @@ void test02()\n   typedef propagating_allocator<T, true> alloc_type;\n   typedef std::forward_list<T, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n+  v1.push_front(T());\n   test_type v2(alloc_type(2));\n+  v2.push_front(T());\n   v2 = std::move(v1);\n   VERIFY(0 == v1.get_allocator().get_personality());\n   VERIFY(1 == v2.get_allocator().get_personality());"}, {"sha": "b5b4480264bf7086d6f68b13f20490f6abe3b783", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/allocator/swap.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d047cb48654a89da139e03c6c5e424734a194e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d047cb48654a89da139e03c6c5e424734a194e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fswap.cc?ref=68d047cb48654a89da139e03c6c5e424734a194e", "patch": "@@ -48,10 +48,14 @@ void test01()\n   typedef propagating_allocator<T, false> alloc_type;\n   typedef std::forward_list<T, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n+  v1.push_front(T());\n   test_type v2(alloc_type(2));\n+  v2.push_front(T());\n   std::swap(v1, v2);\n   VERIFY(1 == v1.get_allocator().get_personality());\n   VERIFY(2 == v2.get_allocator().get_personality());\n+  // swap back so assertions in uneq_allocator::deallocate don't fail\n+  std::swap(v1, v2);\n }\n \n void test02()\n@@ -60,7 +64,9 @@ void test02()\n   typedef propagating_allocator<T, true> alloc_type;\n   typedef std::forward_list<T, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n+  v1.push_front(T());\n   test_type v2(alloc_type(2));\n+  v2.push_front(T());\n   std::swap(v1, v2);\n   VERIFY(2 == v1.get_allocator().get_personality());\n   VERIFY(1 == v2.get_allocator().get_personality());"}, {"sha": "f95c345b853642bdb741d9be511b95a856d07f70", "filename": "libstdc++-v3/testsuite/23_containers/vector/allocator/copy.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d047cb48654a89da139e03c6c5e424734a194e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fcopy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d047cb48654a89da139e03c6c5e424734a194e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fcopy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fcopy.cc?ref=68d047cb48654a89da139e03c6c5e424734a194e", "patch": "@@ -31,6 +31,7 @@ void test01()\n   typedef propagating_allocator<T, false> alloc_type;\n   typedef std::vector<T, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n+  v1.push_back(T());\n   test_type v2(v1);\n   VERIFY(1 == v1.get_allocator().get_personality());\n   VERIFY(0 == v2.get_allocator().get_personality());\n@@ -42,6 +43,7 @@ void test02()\n   typedef propagating_allocator<T, true> alloc_type;\n   typedef std::vector<T, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n+  v1.push_back(T());\n   test_type v2(v1);\n   VERIFY(1 == v1.get_allocator().get_personality());\n   VERIFY(1 == v2.get_allocator().get_personality());"}, {"sha": "89aac6f56da18e2d49c77b1cbe4daf653706bbdc", "filename": "libstdc++-v3/testsuite/23_containers/vector/allocator/copy_assign.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d047cb48654a89da139e03c6c5e424734a194e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fcopy_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d047cb48654a89da139e03c6c5e424734a194e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fcopy_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fcopy_assign.cc?ref=68d047cb48654a89da139e03c6c5e424734a194e", "patch": "@@ -31,7 +31,9 @@ void test01()\n   typedef propagating_allocator<T, false> alloc_type;\n   typedef std::vector<T, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n+  v1.push_back(T());\n   test_type v2(alloc_type(2));\n+  v2.push_back(T());\n   v2 = v1;\n   VERIFY(1 == v1.get_allocator().get_personality());\n   VERIFY(2 == v2.get_allocator().get_personality());\n@@ -43,7 +45,9 @@ void test02()\n   typedef propagating_allocator<T, true> alloc_type;\n   typedef std::vector<T, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n+  v1.push_back(T());\n   test_type v2(alloc_type(2));\n+  v2.push_back(T());\n   v2 = v1;\n   VERIFY(1 == v1.get_allocator().get_personality());\n   VERIFY(1 == v2.get_allocator().get_personality());"}, {"sha": "1b66b50973af552a3e3bda1c61668df5c0998e53", "filename": "libstdc++-v3/testsuite/23_containers/vector/allocator/minimal.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d047cb48654a89da139e03c6c5e424734a194e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fminimal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d047cb48654a89da139e03c6c5e424734a194e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fminimal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fminimal.cc?ref=68d047cb48654a89da139e03c6c5e424734a194e", "patch": "@@ -35,6 +35,7 @@ void test01()\n   typedef std::allocator_traits<alloc_type> traits_type;\n   typedef std::vector<T, alloc_type> test_type;\n   test_type v(alloc_type{});\n+  v.push_back(T());\n   VERIFY( v.max_size() == traits_type::max_size(v.get_allocator()) );\n }\n "}, {"sha": "64795d361c9fd79123787028b0d8018c86e26a56", "filename": "libstdc++-v3/testsuite/23_containers/vector/allocator/move_assign.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d047cb48654a89da139e03c6c5e424734a194e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fmove_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d047cb48654a89da139e03c6c5e424734a194e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fmove_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fmove_assign.cc?ref=68d047cb48654a89da139e03c6c5e424734a194e", "patch": "@@ -31,7 +31,9 @@ void test01()\n   typedef propagating_allocator<T, false> alloc_type;\n   typedef std::vector<T, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n+  v1.push_back(T());\n   test_type v2(alloc_type(2));\n+  v2.push_back(T());\n   v2 = std::move(v1);\n   VERIFY(1 == v1.get_allocator().get_personality());\n   VERIFY(2 == v2.get_allocator().get_personality());\n@@ -43,8 +45,10 @@ void test02()\n   typedef propagating_allocator<T, true> alloc_type;\n   typedef std::vector<T, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n+  v1.push_back(T());\n   test_type v2(alloc_type(2));\n   v2 = std::move(v1);\n+  v2.push_back(T());\n   VERIFY(0 == v1.get_allocator().get_personality());\n   VERIFY(1 == v2.get_allocator().get_personality());\n }"}, {"sha": "ce44cf80f8812bfc44354816dfd2e3d59c8f4e66", "filename": "libstdc++-v3/testsuite/23_containers/vector/allocator/swap.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d047cb48654a89da139e03c6c5e424734a194e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d047cb48654a89da139e03c6c5e424734a194e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fswap.cc?ref=68d047cb48654a89da139e03c6c5e424734a194e", "patch": "@@ -48,10 +48,14 @@ void test01()\n   typedef propagating_allocator<T, false> alloc_type;\n   typedef std::vector<T, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n+  v1.push_back(T());\n   test_type v2(alloc_type(2));\n+  v2.push_back(T());\n   std::swap(v1, v2);\n   VERIFY(1 == v1.get_allocator().get_personality());\n   VERIFY(2 == v2.get_allocator().get_personality());\n+  // swap back so assertions in uneq_allocator::deallocate don't fail\n+  std::swap(v1, v2);\n }\n \n void test02()"}]}