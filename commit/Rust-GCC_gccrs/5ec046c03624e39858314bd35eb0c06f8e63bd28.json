{"sha": "5ec046c03624e39858314bd35eb0c06f8e63bd28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVjMDQ2YzAzNjI0ZTM5ODU4MzE0YmQzNWViMGMwNmY4ZTYzYmQyOA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-06-19T19:11:31Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-06-19T19:11:31Z"}, "message": "re PR c++/81124 (internal compiler error: in operator*, at cp/cp-tree.h:726)\n\n\tPR c++/81124\n\tPR c++/79766\n\t* name-lookup.c (set_decl_namespace): Don't follow using\n\tdirectives and ignore using decls.  Only check overly-explicit\n\tscope after discovering decl.\n\n\t* g++.dg/lookup/pr79766.C: New.\n\t* g++.dg/lookup/pr81124.C: New.\n\t* g++.dg/template/explicit6.C: Adjust.\n\t* g++.old-deja/g++.other/decl5.C: Adjust.\n\nFrom-SVN: r249385", "tree": {"sha": "00c40f39d2e310494370a6fc0d4ec1fa9e4ddfee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00c40f39d2e310494370a6fc0d4ec1fa9e4ddfee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ec046c03624e39858314bd35eb0c06f8e63bd28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ec046c03624e39858314bd35eb0c06f8e63bd28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ec046c03624e39858314bd35eb0c06f8e63bd28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ec046c03624e39858314bd35eb0c06f8e63bd28/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c72e002cc34657b86bf99ca68f3ba0fdbfc32df6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c72e002cc34657b86bf99ca68f3ba0fdbfc32df6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c72e002cc34657b86bf99ca68f3ba0fdbfc32df6"}], "stats": {"total": 178, "additions": 118, "deletions": 60}, "files": [{"sha": "b80d3738319c48cb8488b82856f636774fe68871", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec046c03624e39858314bd35eb0c06f8e63bd28/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec046c03624e39858314bd35eb0c06f8e63bd28/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5ec046c03624e39858314bd35eb0c06f8e63bd28", "patch": "@@ -1,3 +1,11 @@\n+2017-06-19  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/81124\n+\tPR c++/79766\n+\t* name-lookup.c (set_decl_namespace): Don't follow using\n+\tdirectives and ignore using decls.  Only check overly-explicit\n+\tscope after discovering decl.\n+\n 2017-06-19  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/81073 - constexpr and static var in statement-expression."}, {"sha": "e91b89cf15b29e0fe68ed9f486973440346aa323", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 58, "deletions": 57, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec046c03624e39858314bd35eb0c06f8e63bd28/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec046c03624e39858314bd35eb0c06f8e63bd28/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=5ec046c03624e39858314bd35eb0c06f8e63bd28", "patch": "@@ -4266,8 +4266,6 @@ set_global_binding (tree name, tree val)\n void\n set_decl_namespace (tree decl, tree scope, bool friendp)\n {\n-  tree old;\n-\n   /* Get rid of namespace aliases.  */\n   scope = ORIGINAL_NAMESPACE (scope);\n \n@@ -4277,41 +4275,49 @@ set_decl_namespace (tree decl, tree scope, bool friendp)\n \t   decl, scope);\n   DECL_CONTEXT (decl) = FROB_CONTEXT (scope);\n \n-  /* Writing \"int N::i\" to declare a variable within \"N\" is invalid.  */\n-  if (scope == current_namespace)\n-    {\n-      if (at_namespace_scope_p ())\n-\terror (\"explicit qualification in declaration of %qD\",\n-\t       decl);\n-      return;\n-    }\n+  /* See whether this has been declared in the namespace or inline\n+     children.  */\n+  tree old = NULL_TREE;\n+  {\n+    name_lookup lookup (DECL_NAME (decl), LOOKUP_HIDDEN);\n+    if (!lookup.search_qualified (scope, /*usings=*/false))\n+      /* No old declaration at all.  */\n+      goto not_found;\n+    old = lookup.value;\n+  }\n \n-  /* See whether this has been declared in the namespace.  */\n-  old = lookup_qualified_name (scope, DECL_NAME (decl), /*type*/false,\n-\t\t\t       /*complain*/true, /*hidden*/true);\n-  if (old == error_mark_node)\n-    /* No old declaration at all.  */\n-    goto complain;\n   /* If it's a TREE_LIST, the result of the lookup was ambiguous.  */\n   if (TREE_CODE (old) == TREE_LIST)\n     {\n+    ambiguous:\n+      DECL_CONTEXT (decl) = FROB_CONTEXT (scope);\n       error (\"reference to %qD is ambiguous\", decl);\n       print_candidates (old);\n       return;\n     }\n-  if (!OVL_P (decl))\n+\n+  if (!DECL_DECLARES_FUNCTION_P (decl))\n     {\n-      /* We might have found OLD in an inline namespace inside SCOPE.  */\n-      if (TREE_CODE (decl) == TREE_CODE (old))\n-\tDECL_CONTEXT (decl) = DECL_CONTEXT (old);\n       /* Don't compare non-function decls with decls_match here, since\n \t it can't check for the correct constness at this\n-\t point. pushdecl will find those errors later.  */\n+\t point.  pushdecl will find those errors later.  */\n+\n+      /* We might have found it in an inline namespace child of SCOPE.  */\n+      if (TREE_CODE (decl) == TREE_CODE (old))\n+\tDECL_CONTEXT (decl) = DECL_CONTEXT (old);\n+\n+    found:\n+      /* Writing \"N::i\" to declare something directly in \"N\" is invalid.  */\n+      if (CP_DECL_CONTEXT (decl) == current_namespace\n+\t  && at_namespace_scope_p ())\n+\terror (\"explicit qualification in declaration of %qD\", decl);\n       return;\n     }\n+\n   /* Since decl is a function, old should contain a function decl.  */\n   if (!OVL_P (old))\n-    goto complain;\n+    goto not_found;\n+\n   /* We handle these in check_explicit_instantiation_namespace.  */\n   if (processing_explicit_instantiation)\n     return;\n@@ -4325,53 +4331,48 @@ set_decl_namespace (tree decl, tree scope, bool friendp)\n      friends in any namespace.  */\n   if (friendp && DECL_USE_TEMPLATE (decl))\n     return;\n-  if (OVL_P (old))\n+\n+  tree found;\n+  found = NULL_TREE;\n+\n+  for (lkp_iterator iter (old); iter; ++iter)\n     {\n-      tree found = NULL_TREE;\n+      if (iter.using_p ())\n+\tcontinue;\n \n-      for (ovl_iterator iter (old); iter; ++iter)\n-\t{\n-\t  tree ofn = *iter;\n-\t  /* Adjust DECL_CONTEXT first so decls_match will return true\n-\t     if DECL will match a declaration in an inline namespace.  */\n-\t  DECL_CONTEXT (decl) = DECL_CONTEXT (ofn);\n-\t  if (decls_match (decl, ofn))\n-\t    {\n-\t      if (found && !decls_match (found, ofn))\n-\t\t{\n-\t\t  DECL_CONTEXT (decl) = FROB_CONTEXT (scope);\n-\t\t  error (\"reference to %qD is ambiguous\", decl);\n-\t\t  print_candidates (old);\n-\t\t  return;\n-\t\t}\n-\t      found = ofn;\n-\t    }\n-\t}\n-      if (found)\n+      tree ofn = *iter;\n+\n+      /* Adjust DECL_CONTEXT first so decls_match will return true\n+\t if DECL will match a declaration in an inline namespace.  */\n+      DECL_CONTEXT (decl) = DECL_CONTEXT (ofn);\n+      if (decls_match (decl, ofn))\n \t{\n-\t  if (!is_nested_namespace (scope, CP_DECL_CONTEXT (found), true))\n-\t    goto complain;\n-\t  if (DECL_HIDDEN_FRIEND_P (found))\n+\t  if (found)\n \t    {\n-\t      pedwarn (DECL_SOURCE_LOCATION (decl), 0,\n-\t\t       \"%qD has not been declared within %qD\", decl, scope);\n-\t      inform (DECL_SOURCE_LOCATION (found),\n-\t\t      \"only here as a %<friend%>\");\n+\t      /* We found more than one matching declaration.  */\n+\t      DECL_CONTEXT (decl) = FROB_CONTEXT (scope);\n+\t      goto ambiguous;\n \t    }\n-\t  DECL_CONTEXT (decl) = DECL_CONTEXT (found);\n-\t  return;\n+\t  found = ofn;\n \t}\n     }\n-  else\n+\n+  if (found)\n     {\n-      DECL_CONTEXT (decl) = DECL_CONTEXT (old);\n-      if (decls_match (decl, old))\n-\treturn;\n+      if (DECL_HIDDEN_FRIEND_P (found))\n+\t{\n+\t  pedwarn (DECL_SOURCE_LOCATION (decl), 0,\n+\t\t   \"%qD has not been declared within %qD\", decl, scope);\n+\t  inform (DECL_SOURCE_LOCATION (found),\n+\t\t  \"only here as a %<friend%>\");\n+\t}\n+      DECL_CONTEXT (decl) = DECL_CONTEXT (found);\n+      goto found;\n     }\n \n+ not_found:\n   /* It didn't work, go back to the explicit scope.  */\n   DECL_CONTEXT (decl) = FROB_CONTEXT (scope);\n- complain:\n   error (\"%qD should have been declared inside %qD\", decl, scope);\n }\n "}, {"sha": "3c17355f3f57520092758a9314fae90e08ff16f4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec046c03624e39858314bd35eb0c06f8e63bd28/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec046c03624e39858314bd35eb0c06f8e63bd28/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5ec046c03624e39858314bd35eb0c06f8e63bd28", "patch": "@@ -1,3 +1,12 @@\n+2017-06-19  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/81124\n+\tPR c++/79766\n+\t* g++.dg/lookup/pr79766.C: New.\n+\t* g++.dg/lookup/pr81124.C: New.\n+\t* g++.dg/template/explicit6.C: Adjust.\n+\t* g++.old-deja/g++.other/decl5.C: Adjust.\n+\n 2017-06-19  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* g++.old-deja/g++.eh/badalloc1.C: Remove code path for"}, {"sha": "de9bbb5fab9d605c69e5dc60af5ac056124b537f", "filename": "gcc/testsuite/g++.dg/lookup/pr79766.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec046c03624e39858314bd35eb0c06f8e63bd28/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr79766.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec046c03624e39858314bd35eb0c06f8e63bd28/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr79766.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr79766.C?ref=5ec046c03624e39858314bd35eb0c06f8e63bd28", "patch": "@@ -0,0 +1,29 @@\n+// { dg-do compile { target c++11 } }\n+// PR 79766 qualified name to find inline namespace is ok\n+\n+namespace Y \n+{\n+  inline namespace X\n+  {\n+    void Q ();\n+  }\n+}\n+\n+void Y::Q () // OK -> Y::X::Q\n+{\n+}\n+\n+inline namespace Z\n+{\n+  void R ();\n+}\n+\n+void ::R () // OK -> Z::R\n+{\n+}\n+\n+void S ();\n+\n+void ::S () // { dg-error \"explicit qualification\" }\n+{\n+}"}, {"sha": "d80d88aeaa327e1cf3f598c4d9ed14b8e98fc34b", "filename": "gcc/testsuite/g++.dg/lookup/pr81124.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec046c03624e39858314bd35eb0c06f8e63bd28/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr81124.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec046c03624e39858314bd35eb0c06f8e63bd28/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr81124.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr81124.C?ref=5ec046c03624e39858314bd35eb0c06f8e63bd28", "patch": "@@ -0,0 +1,11 @@\n+// { dg-do compile { target c++11 } }\n+// c++/81124 ICE with inline namespace\n+\n+namespace std {\n+inline namespace {\n+int to_string();\n+void to_string(int);\n+}\n+void to_string();\n+}\n+int std::to_string();"}, {"sha": "24fa50df209ec97dfd0606cdfe3cd97d99f8ce7c", "filename": "gcc/testsuite/g++.dg/template/explicit6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec046c03624e39858314bd35eb0c06f8e63bd28/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fexplicit6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec046c03624e39858314bd35eb0c06f8e63bd28/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fexplicit6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fexplicit6.C?ref=5ec046c03624e39858314bd35eb0c06f8e63bd28", "patch": "@@ -5,4 +5,4 @@\n // Bug 19895: ICE on invalid\n \n struct A;\n-template A<>::A(); // { dg-error \"(not a template)|(explicit qualification)\" }\n+template A<>::A(); // { dg-error \"(should have been)|(not a template)\" }"}, {"sha": "3ac91379e762688eddef90324e72474716927202", "filename": "gcc/testsuite/g++.old-deja/g++.other/decl5.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec046c03624e39858314bd35eb0c06f8e63bd28/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdecl5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec046c03624e39858314bd35eb0c06f8e63bd28/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdecl5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdecl5.C?ref=5ec046c03624e39858314bd35eb0c06f8e63bd28", "patch": "@@ -53,8 +53,8 @@ namespace N {\n \n namespace NMS\n {\n-  void NMS::fn();     // { dg-error \"explicit qual\" }\n-  int NMS::i;         // { dg-error \"explicit qual\" }\n+  void NMS::fn();     // { dg-error \"should have been\" }\n+  int NMS::i;         // { dg-error \"should have been\" }\n   struct NMS::D {     // { dg-error \"does not name a class\" }\n     int i;\n   };"}]}