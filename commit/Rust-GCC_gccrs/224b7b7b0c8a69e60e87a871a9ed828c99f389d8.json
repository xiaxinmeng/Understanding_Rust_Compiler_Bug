{"sha": "224b7b7b0c8a69e60e87a871a9ed828c99f389d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI0YjdiN2IwYzhhNjllNjBlODdhODcxYTllZDgyOGM5OWYzODlkOA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2001-08-24T17:24:44Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-08-24T17:24:44Z"}, "message": "Field.java (toString): Use Method.appendClassName.\n\n\t* java/lang/reflect/Field.java (toString): Use\n\tMethod.appendClassName.\n\t* java/lang/reflect/Constructor.java (toString): Use\n\tMethod.appendClassName.\n\t* java/lang/reflect/Method.java: Reindented.\n\t(appendClassName): New method.\n\t(toString): Use it.\n\t* defineclass.cc (handleMethod ): Initialize `throws' field of\n\tmethod.\n\t(read_one_method_attribute): Handle Exceptions attribute.\n\t* java/lang/reflect/natMethod.cc (ClassClass): Removed.\n\t(ObjectClass): Removed.\n\t(getType): Compute `exception_types'.\n\t* java/lang/Class.h (struct _Jv_Method): Added `throws' field.\n\nFrom-SVN: r45153", "tree": {"sha": "b60d1cfd5772caf8f4b4422879feb1f039755a71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b60d1cfd5772caf8f4b4422879feb1f039755a71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/224b7b7b0c8a69e60e87a871a9ed828c99f389d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/224b7b7b0c8a69e60e87a871a9ed828c99f389d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/224b7b7b0c8a69e60e87a871a9ed828c99f389d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/224b7b7b0c8a69e60e87a871a9ed828c99f389d8/comments", "author": null, "committer": null, "parents": [{"sha": "66b461ce02570f05b7ddd76e2de1a82f3a6618e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66b461ce02570f05b7ddd76e2de1a82f3a6618e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66b461ce02570f05b7ddd76e2de1a82f3a6618e3"}], "stats": {"total": 246, "additions": 167, "deletions": 79}, "files": [{"sha": "a058e68eb7fcec154046b356fb8cacdbacaa470c", "filename": "libjava/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/224b7b7b0c8a69e60e87a871a9ed828c99f389d8/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/224b7b7b0c8a69e60e87a871a9ed828c99f389d8/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=224b7b7b0c8a69e60e87a871a9ed828c99f389d8", "patch": "@@ -1,3 +1,20 @@\n+2001-08-23  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/lang/reflect/Field.java (toString): Use\n+\tMethod.appendClassName.\n+\t* java/lang/reflect/Constructor.java (toString): Use\n+\tMethod.appendClassName.\n+\t* java/lang/reflect/Method.java: Reindented.\n+\t(appendClassName): New method.\n+\t(toString): Use it.\n+\t* defineclass.cc (handleMethod ): Initialize `throws' field of\n+\tmethod.\n+\t(read_one_method_attribute): Handle Exceptions attribute.\n+\t* java/lang/reflect/natMethod.cc (ClassClass): Removed.\n+\t(ObjectClass): Removed.\n+\t(getType): Compute `exception_types'.\n+\t* java/lang/Class.h (struct _Jv_Method): Added `throws' field.\n+\n 2001-08-21  Anthony Green  <green@redhat.com>\n \n         * java/lang/natClassLoader.cc (findClass): Search for"}, {"sha": "7ef51dc6e2bf2a91bdca9619aaaee8483000c0b2", "filename": "libjava/defineclass.cc", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/224b7b7b0c8a69e60e87a871a9ed828c99f389d8/libjava%2Fdefineclass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/224b7b7b0c8a69e60e87a871a9ed828c99f389d8/libjava%2Fdefineclass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fdefineclass.cc?ref=224b7b7b0c8a69e60e87a871a9ed828c99f389d8", "patch": "@@ -526,10 +526,42 @@ void _Jv_ClassReader::read_one_method_attribute (int method_index)\n \n   if (is_attribute_name (name, \"Exceptions\"))\n     {\n-      /* we ignore this for now */\n-      skip (length);\n+      _Jv_Method *method = reinterpret_cast<_Jv_Method *>\n+\t(&def->methods[method_index]);\n+      if (method->throws != NULL)\n+\tthrow_class_format_error (\"only one Exceptions attribute allowed per method\");\n+\n+      int num_exceptions = read2u ();\n+      // We use malloc here because the GC won't scan the method\n+      // objects.  FIXME this means a memory leak if we GC a class.\n+      // (Currently we never do.)\n+      _Jv_Utf8Const **exceptions =\n+\t(_Jv_Utf8Const **) _Jv_Malloc ((num_exceptions + 1) * sizeof (_Jv_Utf8Const *));\n+\n+      int out = 0;\n+      _Jv_word *pool_data = def->constants.data;\n+      for (int i = 0; i < num_exceptions; ++i)\n+\t{\n+\t  try\n+\t    {\n+\t      int ndx = read2u ();\n+\t      // JLS 2nd Ed. 4.7.5 requires that the tag not be 0.\n+\t      if (ndx != 0)\n+\t\t{\n+\t\t  check_tag (ndx, JV_CONSTANT_Class);\n+\t\t  exceptions[out++] = pool_data[ndx].utf8; \n+\t\t}\n+\t    }\n+\t  catch (java::lang::Throwable *exc)\n+\t    {\n+\t      _Jv_Free (exceptions);\n+\t      throw exc;\n+\t    }\n+\t}\n+      exceptions[out] = NULL;\n+      method->throws = exceptions;\n     }\n-  \n+\n   else if (is_attribute_name (name, \"Code\"))\n     {\n       int start_off = pos;\n@@ -1206,6 +1238,7 @@ void _Jv_ClassReader::handleMethod\n \n   // intialize...\n   method->ncode = 0;\n+  method->throws = NULL;\n   \n   if (verify)\n     {"}, {"sha": "dfef0a6afbe29350b1d4be9025ac8281f38b1263", "filename": "libjava/java/lang/Class.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/224b7b7b0c8a69e60e87a871a9ed828c99f389d8/libjava%2Fjava%2Flang%2FClass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/224b7b7b0c8a69e60e87a871a9ed828c99f389d8/libjava%2Fjava%2Flang%2FClass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.h?ref=224b7b7b0c8a69e60e87a871a9ed828c99f389d8", "patch": "@@ -64,10 +64,18 @@ struct _Jv_Constants\n \n struct _Jv_Method\n {\n+  // Method name.\n   _Jv_Utf8Const *name;\n+  // Method signature.\n   _Jv_Utf8Const *signature;\n+  // Access flags.\n   _Jv_ushort accflags;\n+  // Pointer to underlying function.\n   void *ncode;\n+  // NULL-terminated list of exception class names; can be NULL if\n+  // there are none such.\n+  _Jv_Utf8Const **throws;\n+\n   _Jv_Method *getNextMethod ()\n   { return this + 1; }\n };"}, {"sha": "cd07a43f26eff0f691100326255c7ee979248378", "filename": "libjava/java/lang/reflect/Constructor.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/224b7b7b0c8a69e60e87a871a9ed828c99f389d8/libjava%2Fjava%2Flang%2Freflect%2FConstructor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/224b7b7b0c8a69e60e87a871a9ed828c99f389d8/libjava%2Fjava%2Flang%2Freflect%2FConstructor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FConstructor.java?ref=224b7b7b0c8a69e60e87a871a9ed828c99f389d8", "patch": "@@ -77,11 +77,11 @@ public String toString ()\n       StringBuffer b = new StringBuffer ();\n       b.append(Modifier.toString(getModifiers()));\n       b.append(\" \");\n-      b.append(getName());\n+      Method.appendClassName (b, declaringClass);\n       b.append(\"(\");\n       for (int i = 0; i < parameter_types.length; ++i)\n \t{\n-\t  b.append(parameter_types[i].getName());\n+\t  Method.appendClassName (b, parameter_types[i]);\n \t  if (i < parameter_types.length - 1)\n \t    b.append(\",\");\n \t}"}, {"sha": "aad51481d5d7c05fa7977064bc2cc48cafc89c79", "filename": "libjava/java/lang/reflect/Field.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/224b7b7b0c8a69e60e87a871a9ed828c99f389d8/libjava%2Fjava%2Flang%2Freflect%2FField.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/224b7b7b0c8a69e60e87a871a9ed828c99f389d8/libjava%2Fjava%2Flang%2Freflect%2FField.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FField.java?ref=224b7b7b0c8a69e60e87a871a9ed828c99f389d8", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -257,9 +257,9 @@ public String toString ()\n \tModifier.toString(mods, sbuf);\n \tsbuf.append(' ');\n       }\n-    sbuf.append(getType().getName());\n+    Method.appendClassName (sbuf, getType ());\n     sbuf.append(' ');\n-    sbuf.append(getDeclaringClass().getName());\n+    Method.appendClassName (sbuf, getDeclaringClass());\n     sbuf.append('.');\n     sbuf.append(getName());\n     return sbuf.toString();"}, {"sha": "7bd0a312511607f86cd4eb2d967af77ab577d0e2", "filename": "libjava/java/lang/reflect/Method.java", "status": "modified", "additions": 81, "deletions": 61, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/224b7b7b0c8a69e60e87a871a9ed828c99f389d8/libjava%2Fjava%2Flang%2Freflect%2FMethod.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/224b7b7b0c8a69e60e87a871a9ed828c99f389d8/libjava%2Fjava%2Flang%2Freflect%2FMethod.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FMethod.java?ref=224b7b7b0c8a69e60e87a871a9ed828c99f389d8", "patch": "@@ -25,24 +25,24 @@\n public final class Method extends AccessibleObject implements Member\n {\n   public boolean equals (Object obj)\n-    {\n-      if (! (obj instanceof Method))\n-\treturn false;\n-      Method m = (Method) obj;\n-      return declaringClass == m.declaringClass && offset == m.offset;\n-    }\n+  {\n+    if (! (obj instanceof Method))\n+      return false;\n+    Method m = (Method) obj;\n+    return declaringClass == m.declaringClass && offset == m.offset;\n+  }\n \n   public Class getDeclaringClass ()\n-    {\n-      return declaringClass;\n-    }\n+  {\n+    return declaringClass;\n+  }\n \n   public Class[] getExceptionTypes ()\n-    {\n-      if (exception_types == null)\n-\tgetType();\n-      return (Class[]) exception_types.clone();\n-    }\n+  {\n+    if (exception_types == null)\n+      getType();\n+    return (Class[]) exception_types.clone();\n+  }\n \n   public native int getModifiers ();\n \n@@ -51,62 +51,82 @@ public Class[] getExceptionTypes ()\n   private native void getType ();\n \n   public Class[] getParameterTypes ()\n-    {\n-      if (parameter_types == null)\n-\tgetType();\n-      return (Class[]) parameter_types.clone();\n-    }\n+  {\n+    if (parameter_types == null)\n+      getType();\n+    return (Class[]) parameter_types.clone();\n+  }\n \n   public Class getReturnType ()\n-    {\n-      if (return_type == null)\n-\tgetType();\n-      return return_type;\n-    }\n+  {\n+    if (return_type == null)\n+      getType();\n+    return return_type;\n+  }\n \n   public int hashCode ()\n-    {\n-      // FIXME.\n-      return getName().hashCode() + declaringClass.getName().hashCode();\n-    }\n+  {\n+    // FIXME.\n+    return getName().hashCode() + declaringClass.getName().hashCode();\n+  }\n \n   public native Object invoke (Object obj, Object[] args)\n     throws IllegalAccessException, IllegalArgumentException,\n-           InvocationTargetException;\n+    InvocationTargetException;\n+\n+  // Append a class name to a string buffer.  We try to print the\n+  // fully-qualified name, the way that a Java programmer would expect\n+  // it to be written.  Weirdly, Class has no appropriate method for\n+  // this.\n+  static void appendClassName (StringBuffer buf, Class k)\n+  {\n+    if (k.isArray ())\n+      {\n+\tappendClassName (buf, k.getComponentType ());\n+\tbuf.append (\"[]\");\n+      }\n+    else\n+      {\n+\t// This is correct for primitive and reference types.  Really\n+\t// we'd like `Main$Inner' to be printed as `Main.Inner', I\n+\t// think, but that is a pain.\n+\tbuf.append (k.getName ());\n+      }\n+  }\n \n   public String toString ()\n-    {\n-      if (parameter_types == null)\n-\tgetType ();\n-\n-      StringBuffer b = new StringBuffer ();\n-      Modifier.toString(getModifiers(), b);\n-      b.append(\" \");\n-      b.append(return_type.getName());\n-      b.append(\" \");\n-      b.append(declaringClass.getName());\n-      b.append(\".\");\n-      b.append(getName());\n-      b.append(\"(\");\n-      for (int i = 0; i < parameter_types.length; ++i)\n-\t{\n-\t  b.append(parameter_types[i].getName());\n-\t  if (i < parameter_types.length - 1)\n-\t    b.append(\",\");\n-\t}\n-      b.append(\")\");\n-      if (exception_types.length > 0)\n-\t{\n-\t  b.append(\" throws \");\n-\t  for (int i = 0; i < exception_types.length; ++i)\n-\t    {\n-\t      b.append(exception_types[i].getName());\n-\t      if (i < exception_types.length - 1)\n-\t\tb.append(\",\");\n-\t    }\n-\t}\n-      return b.toString();\n-    }\n+  {\n+    if (parameter_types == null)\n+      getType ();\n+\n+    StringBuffer b = new StringBuffer ();\n+    Modifier.toString(getModifiers(), b);\n+    b.append(\" \");\n+    appendClassName (b, return_type);\n+    b.append(\" \");\n+    appendClassName (b, declaringClass);\n+    b.append(\".\");\n+    b.append(getName());\n+    b.append(\"(\");\n+    for (int i = 0; i < parameter_types.length; ++i)\n+      {\n+\tappendClassName (b, parameter_types[i]);\n+\tif (i < parameter_types.length - 1)\n+\t  b.append(\",\");\n+      }\n+    b.append(\")\");\n+    if (exception_types.length > 0)\n+      {\n+\tb.append(\" throws \");\n+\tfor (int i = 0; i < exception_types.length; ++i)\n+\t  {\n+\t    appendClassName (b, exception_types[i]);\n+\t    if (i < exception_types.length - 1)\n+\t      b.append(\",\");\n+\t  }\n+      }\n+    return b.toString();\n+  }\n \n   private Method ()\n   {"}, {"sha": "96cc13209ab9d433b665ab6a3cb89dfa14c04307", "filename": "libjava/java/lang/reflect/natMethod.cc", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/224b7b7b0c8a69e60e87a871a9ed828c99f389d8/libjava%2Fjava%2Flang%2Freflect%2FnatMethod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/224b7b7b0c8a69e60e87a871a9ed828c99f389d8/libjava%2Fjava%2Flang%2Freflect%2FnatMethod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FnatMethod.cc?ref=224b7b7b0c8a69e60e87a871a9ed828c99f389d8", "patch": "@@ -1,6 +1,6 @@\n // natMethod.cc - Native code for Method class.\n \n-/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -38,10 +38,6 @@ details.  */\n #include <gcj/method.h>\n #include <gnu/gcj/RawData.h>\n \n-// FIXME: remove these\n-#define ObjectClass java::lang::Object::class$\n-#define ClassClass java::lang::Class::class$\n-\n #include <stdlib.h>\n \n #if USE_LIBFFI\n@@ -200,14 +196,27 @@ java::lang::reflect::Method::getName ()\n void\n java::lang::reflect::Method::getType ()\n {\n-  _Jv_GetTypesFromSignature (_Jv_FromReflectedMethod (this),\n+  _Jv_Method *method = _Jv_FromReflectedMethod (this);\n+  _Jv_GetTypesFromSignature (method,\n \t\t\t     declaringClass,\n \t\t\t     &parameter_types,\n \t\t\t     &return_type);\n \n-  // FIXME: for now we have no way to get exception information.\n-  exception_types = (JArray<jclass> *) JvNewObjectArray (0, &ClassClass,\n-\t\t\t\t\t\t\t NULL);\n+  int count = 0;\n+  if (method->throws != NULL)\n+    {\n+      while (method->throws[count] != NULL)\n+\t++count;\n+    }\n+\n+  exception_types\n+    = (JArray<jclass> *) JvNewObjectArray (count,\n+\t\t\t\t\t   &java::lang::Class::class$,\n+\t\t\t\t\t   NULL);\n+  jclass *elts = elements (exception_types);\n+  for (int i = 0; i < count; ++i)\n+    elts[i] = _Jv_FindClassFromSignature (method->throws[i]->data,\n+\t\t\t\t\t  declaringClass->getClassLoader ());\n }\n \n void\n@@ -254,7 +263,7 @@ _Jv_GetTypesFromSignature (jmethodID method,\n     }\n \n   JArray<jclass> *args = (JArray<jclass> *)\n-    JvNewObjectArray (numArgs, &ClassClass, NULL);\n+    JvNewObjectArray (numArgs, &java::lang::Class::class$, NULL);\n   jclass* argPtr = elements (args);\n   for (ptr = sig->data; *ptr != '\\0'; ptr++)\n     {"}, {"sha": "a80405cf2dfe849e8445a6256e41ec1460d2171c", "filename": "libjava/mauve-libgcj", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/224b7b7b0c8a69e60e87a871a9ed828c99f389d8/libjava%2Fmauve-libgcj", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/224b7b7b0c8a69e60e87a871a9ed828c99f389d8/libjava%2Fmauve-libgcj", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fmauve-libgcj?ref=224b7b7b0c8a69e60e87a871a9ed828c99f389d8", "patch": "@@ -32,3 +32,4 @@ java.text.StringCharacterIterator.iter\n !java.text.DecimalFormatSymbols.DumpDefault12\n !java.text.DecimalFormatSymbols.GetSet12\n !java.text.resources\n+!java.lang.Math"}]}