{"sha": "7e5fb12fc598f17425138d7b45c9724c374b1539", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U1ZmIxMmZjNTk4ZjE3NDI1MTM4ZDdiNDVjOTcyNGMzNzRiMTUzOQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-11-25T18:54:12Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-11-25T18:54:12Z"}, "message": "c-format.c (FMT_FLAG_DOLLAR_GAP_POINTER_OK): New.\n\n\t* c-format.c (FMT_FLAG_DOLLAR_GAP_POINTER_OK): New.\n\t(format_types): Use it for scanf.\n\t(dollar_arguments_pointer_p): New.\n\t(init_dollar_format_checking): Store details of which arguments\n\tare pointers.\n\t(maybe_read_dollar_number): Reallocate dollar_arguments_pointer_p.\n\t(finish_dollar_format_checking): Take extra parameter\n\tpointer_gap_ok.  Treat unused arguments differently if\n\tpointer_gap_ok and the unused arguments are pointers.\n\t(check_format_info_main): Pass extra argument to\n\tfinish_dollar_format_checking.\n\t* doc/invoke.texi (-Wno-format-extra-args): Document behavior when\n\tunused arguments are present between used arguments with operand\n\tnumbers.\n\ntestsuite:\n\t* gcc.dg/format/strfmon-1.c: Update comments.  Adjust examples\n\tfrom Austin Group draft 7.\n\t* gcc.dg/format/xopen-1.c: Update comments.  Add tests for gaps in\n\tscanf format arguments.\n\t* gcc.dg/format/no-exargs-2.c: New test.\n\nFrom-SVN: r47327", "tree": {"sha": "64f1447d44d75dece4a7f5012528ee7b1f4ed583", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64f1447d44d75dece4a7f5012528ee7b1f4ed583"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e5fb12fc598f17425138d7b45c9724c374b1539", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e5fb12fc598f17425138d7b45c9724c374b1539", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e5fb12fc598f17425138d7b45c9724c374b1539", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e5fb12fc598f17425138d7b45c9724c374b1539/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6253d46c5baa987b12af721d78988806867cea8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6253d46c5baa987b12af721d78988806867cea8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6253d46c5baa987b12af721d78988806867cea8"}], "stats": {"total": 147, "additions": 128, "deletions": 19}, "files": [{"sha": "231c5b5f70998e00ea7bc863cf9178f319d419f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e5fb12fc598f17425138d7b45c9724c374b1539/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e5fb12fc598f17425138d7b45c9724c374b1539/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7e5fb12fc598f17425138d7b45c9724c374b1539", "patch": "@@ -1,3 +1,20 @@\n+2001-11-25  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-format.c (FMT_FLAG_DOLLAR_GAP_POINTER_OK): New.\n+\t(format_types): Use it for scanf.\n+\t(dollar_arguments_pointer_p): New.\n+\t(init_dollar_format_checking): Store details of which arguments\n+\tare pointers.\n+\t(maybe_read_dollar_number): Reallocate dollar_arguments_pointer_p.\n+\t(finish_dollar_format_checking): Take extra parameter\n+\tpointer_gap_ok.  Treat unused arguments differently if\n+\tpointer_gap_ok and the unused arguments are pointers.\n+\t(check_format_info_main): Pass extra argument to\n+\tfinish_dollar_format_checking.\n+\t* doc/invoke.texi (-Wno-format-extra-args): Document behavior when\n+\tunused arguments are present between used arguments with operand\n+\tnumbers.\n+\n 2001-11-25  Daniel Berlin  <dan@cgsoftware.com>\n \n \t* df.c: Add prototypes for hybrid_search_bitmap and"}, {"sha": "b15b6300563b96e80c10583ca4d64837681d8ce8", "filename": "gcc/c-format.c", "status": "modified", "additions": 46, "deletions": 10, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e5fb12fc598f17425138d7b45c9724c374b1539/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e5fb12fc598f17425138d7b45c9724c374b1539/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=7e5fb12fc598f17425138d7b45c9724c374b1539", "patch": "@@ -374,7 +374,10 @@ enum\n   /* Zero width is bad in this type of format (scanf).  */\n   FMT_FLAG_ZERO_WIDTH_BAD = 32,\n   /* Empty precision specification is OK in this type of format (printf).  */\n-  FMT_FLAG_EMPTY_PREC_OK = 64\n+  FMT_FLAG_EMPTY_PREC_OK = 64,\n+  /* Gaps are allowed in the arguments with $ operand numbers if all\n+     arguments are pointers (scanf).  */\n+  FMT_FLAG_DOLLAR_GAP_POINTER_OK = 128\n   /* Not included here: details of whether width or precision may occur\n      (controlled by width_char and precision_char); details of whether\n      '*' can be used for these (width_type and precision_type); details\n@@ -848,7 +851,7 @@ static const format_kind_info format_types[] =\n   },\n   { \"scanf\",    scanf_length_specs,   scan_char_table,  \"*'I\", NULL, \n     scanf_flag_specs, scanf_flag_pairs,\n-    FMT_FLAG_ARG_CONVERT|FMT_FLAG_SCANF_A_KLUDGE|FMT_FLAG_USE_DOLLAR|FMT_FLAG_ZERO_WIDTH_BAD,\n+    FMT_FLAG_ARG_CONVERT|FMT_FLAG_SCANF_A_KLUDGE|FMT_FLAG_USE_DOLLAR|FMT_FLAG_ZERO_WIDTH_BAD|FMT_FLAG_DOLLAR_GAP_POINTER_OK,\n     'w', 0, 0, '*', 'L',\n     NULL, NULL\n   },\n@@ -907,7 +910,7 @@ static void init_dollar_format_checking\t\tPARAMS ((int, tree));\n static int maybe_read_dollar_number\t\tPARAMS ((int *, const char **, int,\n \t\t\t\t\t\t\t tree, tree *,\n \t\t\t\t\t\t\t const format_kind_info *));\n-static void finish_dollar_format_checking\tPARAMS ((int *, format_check_results *));\n+static void finish_dollar_format_checking\tPARAMS ((int *, format_check_results *, int));\n \n static const format_flag_spec *get_flag_spec\tPARAMS ((const format_flag_spec *,\n \t\t\t\t\t\t\t int, const char *));\n@@ -1029,6 +1032,7 @@ status_warning VPARAMS ((int *status, const char *msgid, ...))\n \n /* Variables used by the checking of $ operand number formats.  */\n static char *dollar_arguments_used = NULL;\n+static char *dollar_arguments_pointer_p = NULL;\n static int dollar_arguments_alloc = 0;\n static int dollar_arguments_count;\n static int dollar_first_arg_num;\n@@ -1046,6 +1050,8 @@ init_dollar_format_checking (first_arg_num, params)\n      int first_arg_num;\n      tree params;\n {\n+  tree oparams = params;\n+\n   dollar_first_arg_num = first_arg_num;\n   dollar_arguments_count = 0;\n   dollar_max_arg_used = 0;\n@@ -1062,11 +1068,28 @@ init_dollar_format_checking (first_arg_num, params)\n     {\n       if (dollar_arguments_used)\n \tfree (dollar_arguments_used);\n+      if (dollar_arguments_pointer_p)\n+\tfree (dollar_arguments_pointer_p);\n       dollar_arguments_alloc = dollar_arguments_count;\n       dollar_arguments_used = xmalloc (dollar_arguments_alloc);\n+      dollar_arguments_pointer_p = xmalloc (dollar_arguments_alloc);\n     }\n   if (dollar_arguments_alloc)\n-    memset (dollar_arguments_used, 0, dollar_arguments_alloc);\n+    {\n+      memset (dollar_arguments_used, 0, dollar_arguments_alloc);\n+      if (first_arg_num > 0)\n+\t{\n+\t  int i = 0;\n+\t  params = oparams;\n+\t  while (params)\n+\t    {\n+\t      dollar_arguments_pointer_p[i] = (TREE_CODE (TREE_TYPE (TREE_VALUE (params)))\n+\t\t\t\t\t       == POINTER_TYPE);\n+\t      params = TREE_CHAIN (params);\n+\t      i++;\n+\t    }\n+\t}\n+    }\n }\n \n \n@@ -1146,6 +1169,8 @@ maybe_read_dollar_number (status, format, dollar_needed, params, param_ptr,\n       int nalloc;\n       nalloc = 2 * dollar_arguments_alloc + 16;\n       dollar_arguments_used = xrealloc (dollar_arguments_used, nalloc);\n+      dollar_arguments_pointer_p = xrealloc (dollar_arguments_pointer_p,\n+\t\t\t\t\t     nalloc);\n       memset (dollar_arguments_used + dollar_arguments_alloc, 0,\n \t      nalloc - dollar_arguments_alloc);\n       dollar_arguments_alloc = nalloc;\n@@ -1186,21 +1211,32 @@ maybe_read_dollar_number (status, format, dollar_needed, params, param_ptr,\n    and for unused operands at the end of the format (if we know how many\n    arguments the format had, so not for vprintf).  If there were operand\n    numbers out of range on a non-vprintf-style format, we won't have reached\n-   here.  */\n+   here.  If POINTER_GAP_OK, unused arguments are OK if all arguments are\n+   pointers.  */\n \n static void\n-finish_dollar_format_checking (status, res)\n+finish_dollar_format_checking (status, res, pointer_gap_ok)\n      int *status;\n      format_check_results *res;\n+     int pointer_gap_ok;\n {\n   int i;\n+  bool found_pointer_gap = false;\n   for (i = 0; i < dollar_max_arg_used; i++)\n     {\n       if (!dollar_arguments_used[i])\n-\tstatus_warning (status, \"format argument %d unused before used argument %d in $-style format\",\n-\t\t i + 1, dollar_max_arg_used);\n+\t{\n+\t  if (pointer_gap_ok && (dollar_first_arg_num == 0\n+\t\t\t\t || dollar_arguments_pointer_p[i]))\n+\t    found_pointer_gap = true;\n+\t  else\n+\t    status_warning (status, \"format argument %d unused before used argument %d in $-style format\",\n+\t\t\t    i + 1, dollar_max_arg_used);\n+\t}\n     }\n-  if (dollar_first_arg_num && dollar_max_arg_used < dollar_arguments_count)\n+  if (found_pointer_gap\n+      || (dollar_first_arg_num\n+\t  && dollar_max_arg_used < dollar_arguments_count))\n     {\n       res->number_other--;\n       res->number_dollar_extra_args++;\n@@ -1639,7 +1675,7 @@ check_format_info_main (status, res, info, format_chars, format_length,\n \t      res->number_extra_args++;\n \t    }\n \t  if (has_operand_number > 0)\n-\t    finish_dollar_format_checking (status, res);\n+\t    finish_dollar_format_checking (status, res, fki->flags & (int) FMT_FLAG_DOLLAR_GAP_POINTER_OK);\n \t  return;\n \t}\n       if (*format_chars++ != '%')"}, {"sha": "21b785324ed7c93cd20d6c55d4469ced8594044e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e5fb12fc598f17425138d7b45c9724c374b1539/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e5fb12fc598f17425138d7b45c9724c374b1539/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7e5fb12fc598f17425138d7b45c9724c374b1539", "patch": "@@ -1849,6 +1849,14 @@ If @option{-Wformat} is specified, do not warn about excess arguments to a\n @code{printf} or @code{scanf} format function.  The C standard specifies\n that such arguments are ignored.\n \n+Where the unused arguments lie between used arguments that are\n+specified with @samp{$} operand number specifications, normally\n+warnings are still given, since the implementation could not know what\n+type to pass to @code{va_arg} to skip the unused arguments.  However,\n+in the case of @code{scanf} formats, this option will suppress the\n+warning if the unused arguments are all pointers, since the Single\n+Unix Specification says that such unused arguments are allowed.\n+\n @item -Wformat-nonliteral\n @opindex Wformat-nonliteral\n If @option{-Wformat} is specified, also warn if the format string is not a"}, {"sha": "3a69d3cbb53c7e7b9008b1a5dd54f6873c2f3ce0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e5fb12fc598f17425138d7b45c9724c374b1539/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e5fb12fc598f17425138d7b45c9724c374b1539/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7e5fb12fc598f17425138d7b45c9724c374b1539", "patch": "@@ -1,3 +1,11 @@\n+2001-11-25  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.dg/format/strfmon-1.c: Update comments.  Adjust examples\n+\tfrom Austin Group draft 7.\n+\t* gcc.dg/format/xopen-1.c: Update comments.  Add tests for gaps in\n+\tscanf format arguments.\n+\t* gcc.dg/format/no-exargs-2.c: New test.\n+\n 2001-11-25  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.dg/abi/vbase8-4.C: New test."}, {"sha": "3fa9285784e7d7bc65dcf7b374dee2331b02e6d9", "filename": "gcc/testsuite/gcc.dg/format/no-exargs-2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e5fb12fc598f17425138d7b45c9724c374b1539/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fno-exargs-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e5fb12fc598f17425138d7b45c9724c374b1539/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fno-exargs-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fno-exargs-2.c?ref=7e5fb12fc598f17425138d7b45c9724c374b1539", "patch": "@@ -0,0 +1,27 @@\n+/* Test for warnings for extra format arguments being disabled by\n+   -Wno-format-extra-args.  Test which warnings still apply with $\n+   operand numbers.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -Wformat -Wno-format-extra-args\" } */\n+\n+#include \"format.h\"\n+\n+void\n+foo (int i, int *ip, va_list va)\n+{\n+  printf (\"%3$d%1$d\", i, i, i); /* { dg-warning \"before used\" \"unused $ operand\" } */\n+  printf (\"%2$d%1$d\", i, i, i);\n+  vprintf (\"%3$d%1$d\", va); /* { dg-warning \"before used\" \"unused $ operand\" } */\n+  /* With scanf formats, gaps in the used arguments are allowed only if the\n+     arguments are all pointers.  In such a case, should only give the lesser\n+     warning about unused arguments rather than the more serious one about\n+     argument gaps.  */\n+  scanf (\"%3$d%1$d\", ip, ip, ip);\n+  /* If there are non-pointer arguments unused at the end, this is also OK.  */\n+  scanf (\"%3$d%1$d\", ip, ip, ip, i);\n+  scanf (\"%3$d%1$d\", ip, i, ip); /* { dg-warning \"before used\" \"unused $ scanf non-pointer operand\" } */\n+  /* Can't check the arguments in the vscanf case, so should suppose the\n+     lesser problem.  */\n+  vscanf (\"%3$d%1$d\", va);\n+}"}, {"sha": "d163751328ced75e5074c7348380a43500a27ed9", "filename": "gcc/testsuite/gcc.dg/format/strfmon-1.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e5fb12fc598f17425138d7b45c9724c374b1539/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fstrfmon-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e5fb12fc598f17425138d7b45c9724c374b1539/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fstrfmon-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fstrfmon-1.c?ref=7e5fb12fc598f17425138d7b45c9724c374b1539", "patch": "@@ -8,7 +8,7 @@\n void\n foo (char *s, size_t m, double d, long double ld)\n {\n-  /* Examples of valid formats from Austin Group draft 5.  */\n+  /* Examples of valid formats from Austin Group draft 7.  */\n   strfmon (s, m, \"%n\", d);\n   strfmon (s, m, \"%11n\", d);\n   strfmon (s, m, \"%#5n\", d);\n@@ -18,7 +18,9 @@ foo (char *s, size_t m, double d, long double ld)\n   strfmon (s, m, \"%^#5.0n\", d);\n   strfmon (s, m, \"%^#5.4n\", d);\n   strfmon (s, m, \"%(#5n\", d);\n-  strfmon (s, m, \"%(!#5n\", d);\n+  strfmon (s, m, \"%!(#5n\", d);\n+  strfmon (s, m, \"%-14#5.4n\", d);\n+  strfmon (s, m, \"%14#5.4n\", d);\n   /* Some more valid formats, including the GNU L length extension.  */\n   strfmon (s, m, \"abc%-11ndef%==i%%\", d, d);\n   strfmon (s, m, \"%%abc%-11ndef%==Li%=%i\", d, ld, d);\n@@ -31,7 +33,9 @@ foo (char *s, size_t m, double d, long double ld)\n   strfmon (s, m, \"%^#5.0Li\", ld);\n   strfmon (s, m, \"%^#5.4Li\", ld);\n   strfmon (s, m, \"%(#5Li\", ld);\n-  strfmon (s, m, \"%(!#5Li\", ld);\n+  strfmon (s, m, \"%!(#5Li\", ld);\n+  strfmon (s, m, \"%-14#5.4Li\", ld);\n+  strfmon (s, m, \"%14#5.4Li\", ld);\n   /* Formats with the wrong types used.  */\n   strfmon (s, m, \"%Ln\", d); /* { dg-warning \"format\" \"wrong type\" } */\n   strfmon (s, m, \"%n\", ld); /* { dg-warning \"format\" \"wrong type\" } */"}, {"sha": "934dcb18cd876fa9ed5fb6181fde83c38435a507", "filename": "gcc/testsuite/gcc.dg/format/xopen-1.c", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e5fb12fc598f17425138d7b45c9724c374b1539/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fxopen-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e5fb12fc598f17425138d7b45c9724c374b1539/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fxopen-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fxopen-1.c?ref=7e5fb12fc598f17425138d7b45c9724c374b1539", "patch": "@@ -1,6 +1,5 @@\n /* Test for X/Open format extensions, as found in the\n-   Single Unix Specification and in Austin Group draft 4, subject to some\n-   Aardvark problem reports approved as changes.\n+   Single Unix Specification and in Austin Group draft 7.\n */\n /* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n /* { dg-do compile } */\n@@ -88,10 +87,6 @@ foo (int i, unsigned int u, wint_t lc, wchar_t *ls, int *ip, double d,\n   printf (\"%'p\", p); /* { dg-warning \"flag\" \"bad use of ' flag\" } */\n   printf (\"%'n\", n); /* { dg-warning \"flag\" \"bad use of ' flag\" } */\n   /* The use of operand number $ formats is an X/Open extension.  */\n-  /* Banning gaps in the arguments used with scanf was covered in Aardvark\n-     report XSHd4 ERN 164, which was rejected, but implementation without\n-     such a ban still isn't possible within ISO C.\n-  */\n   scanf (\"%1$d\", ip);\n   printf (\"%1$d\", i);\n   printf (\"%1$d\", l); /* { dg-warning \"arg 2\" \"mismatched args with $ format\" } */\n@@ -110,6 +105,20 @@ foo (int i, unsigned int u, wint_t lc, wchar_t *ls, int *ip, double d,\n   printf (\"%3$d%1$d\", i, i, i); /* { dg-warning \"before used\" \"unused $ operand\" } */\n   printf (\"%2$d%1$d\", i, i, i); /* { dg-warning \"unused\" \"unused $ operand\" } */\n   vprintf (\"%3$d%1$d\", va); /* { dg-warning \"before used\" \"unused $ operand\" } */\n+  /* With scanf formats, gaps in the used arguments are allowed only if the\n+     arguments are all pointers.  In such a case, should only give the lesser\n+     warning about unused arguments rather than the more serious one about\n+     argument gaps.  */\n+  scanf (\"%3$d%1$d\", ip, ip, ip); /* { dg-bogus \"before used\" \"unused $ scanf pointer operand\" } */\n+  /* { dg-warning \"unused\" \"unused $ scanf pointer operand\" { target *-*-* } 112 } */\n+  /* If there are non-pointer arguments unused at the end, this is also OK.  */\n+  scanf (\"%3$d%1$d\", ip, ip, ip, i); /* { dg-bogus \"before used\" \"unused $ scanf pointer operand\" } */\n+  /* { dg-warning \"unused\" \"unused $ scanf pointer operand\" { target *-*-* } 115 } */\n+  scanf (\"%3$d%1$d\", ip, i, ip); /* { dg-warning \"before used\" \"unused $ scanf non-pointer operand\" } */\n+  /* Can't check the arguments in the vscanf case, so should suppose the\n+     lesser problem.  */\n+  vscanf (\"%3$d%1$d\", va); /* { dg-bogus \"before used\" \"unused $ scanf pointer operand\" } */\n+  /* { dg-warning \"unused\" \"unused $ scanf pointer operand\" { target *-*-* } 120 } */\n   scanf (\"%2$*d%1$d\", ip, ip); /* { dg-warning \"operand\" \"operand number with suppression\" } */\n   printf (\"%1$d%1$d\", i);\n   scanf (\"%1$d%1$d\", ip); /* { dg-warning \"more than once\" \"multiple use of scanf argument\" } */"}]}