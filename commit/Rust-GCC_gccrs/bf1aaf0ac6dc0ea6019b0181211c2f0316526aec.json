{"sha": "bf1aaf0ac6dc0ea6019b0181211c2f0316526aec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYxYWFmMGFjNmRjMGVhNjAxOWIwMTgxMjExYzJmMDMxNjUyNmFlYw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-01-04T20:58:20Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-01-04T20:58:20Z"}, "message": "varasm.c (output_constructor): Use HOST_WIDE_INT for sizes.\n\n\t* varasm.c (output_constructor): Use HOST_WIDE_INT for sizes.\n\tOnly call array_size_for_constructor if last field and array type\n\twith no upper bound.\n\nFrom-SVN: r38691", "tree": {"sha": "35b7132cf78a1659f1ec7f56c25e7dfd251387c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35b7132cf78a1659f1ec7f56c25e7dfd251387c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf1aaf0ac6dc0ea6019b0181211c2f0316526aec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf1aaf0ac6dc0ea6019b0181211c2f0316526aec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf1aaf0ac6dc0ea6019b0181211c2f0316526aec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf1aaf0ac6dc0ea6019b0181211c2f0316526aec/comments", "author": null, "committer": null, "parents": [{"sha": "ceebdb0980bee33cbd7b08dcd350f4faa7634f27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceebdb0980bee33cbd7b08dcd350f4faa7634f27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ceebdb0980bee33cbd7b08dcd350f4faa7634f27"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "d37423bc50c32af21118e34ac947c4948a92bb08", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1aaf0ac6dc0ea6019b0181211c2f0316526aec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1aaf0ac6dc0ea6019b0181211c2f0316526aec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf1aaf0ac6dc0ea6019b0181211c2f0316526aec", "patch": "@@ -1,3 +1,9 @@\n+Thu Jan  4 15:54:05 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* varasm.c (output_constructor): Use HOST_WIDE_INT for sizes.\n+\tOnly call array_size_for_constructor if last field and array type\n+\twith no upper bound.\n+\n 2001-01-04  Philip Blundell  <philb@gnu.org>\n \n \t* config/arm/arm.c (arm_gen_constant): Prefer to emit constants"}, {"sha": "4dbbbfbbff891791546f3ae0cecdb1f742b33fde", "filename": "gcc/varasm.c", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1aaf0ac6dc0ea6019b0181211c2f0316526aec/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1aaf0ac6dc0ea6019b0181211c2f0316526aec/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=bf1aaf0ac6dc0ea6019b0181211c2f0316526aec", "patch": "@@ -4549,7 +4549,7 @@ output_constructor (exp, size)\n \n       if (index && TREE_CODE (index) == RANGE_EXPR)\n \t{\n-\t  register int fieldsize\n+\t  unsigned HOST_WIDE_INT fieldsize\n \t    = int_size_in_bytes (TREE_TYPE (type));\n \t  HOST_WIDE_INT lo_index = tree_low_cst (TREE_OPERAND (index, 0), 0);\n \t  HOST_WIDE_INT hi_index = tree_low_cst (TREE_OPERAND (index, 1), 0);\n@@ -4571,7 +4571,7 @@ output_constructor (exp, size)\n \t{\n \t  /* An element that is not a bit-field.  */\n \n-\t  register int fieldsize;\n+\t  unsigned HOST_WIDE_INT fieldsize;\n \t  /* Since this structure is static,\n \t     we know the positions are constant.  */\n \t  HOST_WIDE_INT pos = field ? int_byte_position (field) : 0;\n@@ -4607,17 +4607,16 @@ output_constructor (exp, size)\n \t  /* Determine size this element should occupy.  */\n \t  if (field)\n \t    {\n-\t      if (DECL_SIZE_UNIT (field)\n-\t\t  && ! integer_zerop (DECL_SIZE_UNIT (field)))\n-\t\tfieldsize = tree_low_cst (DECL_SIZE_UNIT (field), 1);\n-\t      else if (TREE_CODE (TREE_TYPE (field)) == ARRAY_TYPE)\n-\t\t{\n-\t\t  /* If DECL_SIZE is not set or is zero, then this must be\n-\t\t     an array of unspecified length.  The initialized value\n-\t\t     must be a CONSTRUCTOR, and we take the length from the\n-\t\t     last initialized element.  */\n+\t      /* If the last field is an array with an unspecified upper\n+\t\t bound, the initializer determines the size.  */\n+\t      if (TREE_CHAIN (field) == 0\n+\t\t  && TREE_CODE (TREE_TYPE (field)) == ARRAY_TYPE\n+\t\t  && TYPE_DOMAIN (TREE_TYPE (field)) != 0\n+\t\t  && TYPE_MAX_VALUE (TYPE_DOMAIN (TREE_TYPE (field))) == 0)\n \t\t  fieldsize = array_size_for_constructor (val);\n-\t\t}\n+\t      else if (DECL_SIZE_UNIT (field)\n+\t\t  && host_integerp (DECL_SIZE_UNIT (field), 1))\n+\t\tfieldsize = tree_low_cst (DECL_SIZE_UNIT (field), 1);\n \t      else\n \t\tfieldsize = 0;\n \t    }"}]}