{"sha": "6bb45a6b52046f51193c34bbd026a13bf48b4b49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJiNDVhNmI1MjA0NmY1MTE5M2MzNGJiZDAyNmExM2JmNDhiNGI0OQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2019-02-02T09:10:58Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2019-02-02T09:10:58Z"}, "message": "re PR fortran/88685 (pointer class array argument indexing)\n\n2019-02-02  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/88685\n\t* expr.c (is_subref_array): Move the check for class pointer\n\tdummy arrays to after the reference check. If we haven't seen\n\tan array reference other than an element and a component is not\n\tclass or derived, return false.\n\n2019-02-02  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/88685\n\t* gfortran.dg/pointer_array_component_3.f90 : New test.\n\nFrom-SVN: r268472", "tree": {"sha": "3f7e9bb398c6c762970d432172a8abfebe6e0d64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f7e9bb398c6c762970d432172a8abfebe6e0d64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bb45a6b52046f51193c34bbd026a13bf48b4b49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bb45a6b52046f51193c34bbd026a13bf48b4b49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bb45a6b52046f51193c34bbd026a13bf48b4b49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bb45a6b52046f51193c34bbd026a13bf48b4b49/comments", "author": null, "committer": null, "parents": [{"sha": "01826160a3b2ab2f0c68c13b47d3467cf9618fbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01826160a3b2ab2f0c68c13b47d3467cf9618fbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01826160a3b2ab2f0c68c13b47d3467cf9618fbb"}], "stats": {"total": 70, "additions": 64, "deletions": 6}, "files": [{"sha": "1dc007d1a2e9b0afc8f88a1681350d26767b0dbc", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bb45a6b52046f51193c34bbd026a13bf48b4b49/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bb45a6b52046f51193c34bbd026a13bf48b4b49/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6bb45a6b52046f51193c34bbd026a13bf48b4b49", "patch": "@@ -1,3 +1,11 @@\n+2019-02-02  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/88685\n+\t* expr.c (is_subref_array): Move the check for class pointer\n+\tdummy arrays to after the reference check. If we haven't seen\n+\tan array reference other than an element and a component is not\n+\tclass or derived, return false.\n+\n 2019-02-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/83246"}, {"sha": "a0eb94fbbccffe4f25fbf7d1b529c1b6ec687913", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bb45a6b52046f51193c34bbd026a13bf48b4b49/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bb45a6b52046f51193c34bbd026a13bf48b4b49/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=6bb45a6b52046f51193c34bbd026a13bf48b4b49", "patch": "@@ -1072,15 +1072,17 @@ is_subref_array (gfc_expr * e)\n   if (e->symtree->n.sym->attr.subref_array_pointer)\n     return true;\n \n-  if (e->symtree->n.sym->ts.type == BT_CLASS\n-      && e->symtree->n.sym->attr.dummy\n-      && CLASS_DATA (e->symtree->n.sym)->attr.dimension\n-      && CLASS_DATA (e->symtree->n.sym)->attr.class_pointer)\n-    return true;\n-\n   seen_array = false;\n+\n   for (ref = e->ref; ref; ref = ref->next)\n     {\n+      /* If we haven't seen the array reference and this is an intrinsic,\n+\t what follows cannot be a subreference array.  */\n+      if (!seen_array && ref->type == REF_COMPONENT\n+\t  && ref->u.c.component->ts.type != BT_CLASS\n+\t  && !gfc_bt_struct (ref->u.c.component->ts.type))\n+\treturn false;\n+\n       if (ref->type == REF_ARRAY\n \t    && ref->u.ar.type != AR_ELEMENT)\n \tseen_array = true;\n@@ -1089,6 +1091,13 @@ is_subref_array (gfc_expr * e)\n \t    && ref->type != REF_ARRAY)\n \treturn seen_array;\n     }\n+\n+  if (e->symtree->n.sym->ts.type == BT_CLASS\n+      && e->symtree->n.sym->attr.dummy\n+      && CLASS_DATA (e->symtree->n.sym)->attr.dimension\n+      && CLASS_DATA (e->symtree->n.sym)->attr.class_pointer)\n+    return true;\n+\n   return false;\n }\n "}, {"sha": "bc9ca4c289ce9314ad4ac480296c5b2f0c80bf9d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bb45a6b52046f51193c34bbd026a13bf48b4b49/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bb45a6b52046f51193c34bbd026a13bf48b4b49/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6bb45a6b52046f51193c34bbd026a13bf48b4b49", "patch": "@@ -1,3 +1,8 @@\n+2019-02-02  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/88685\n+\t* gfortran.dg/pointer_array_component_3.f90 : New test.\n+\n 2019-02-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/87887"}, {"sha": "8ef205bc14fe813f066d35616b57c8a4889f18b8", "filename": "gcc/testsuite/gfortran.dg/pointer_array_component_3.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bb45a6b52046f51193c34bbd026a13bf48b4b49/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_array_component_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bb45a6b52046f51193c34bbd026a13bf48b4b49/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_array_component_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_array_component_3.f90?ref=6bb45a6b52046f51193c34bbd026a13bf48b4b49", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR88685, in which the component array references in 'doit'\n+! were being ascribed to the class pointer 'Cls' itself so that the stride\n+! measure between elements was wrong.\n+!\n+! Contributed by Antony Lewis  <antony@cosmologist.info>\n+!\n+program tester\n+  implicit none\n+  Type TArr\n+    integer, allocatable :: CL(:)\n+  end Type TArr\n+\n+  type(TArr), allocatable, target :: arr(:,:)\n+  class(TArr), pointer:: Cls(:,:)\n+  integer i\n+\n+  allocate(arr(1,1))\n+  allocate(arr(1,1)%CL(3))\n+  arr(1,1)%CL=-1\n+  cls => arr\n+  call doit(cls)\n+  if (any (arr(1,1)%cl .ne. [3,2,1])) stop 3\n+contains\n+  subroutine doit(cls)\n+    class(TArr), pointer :: Cls(:,:)\n+\n+    cls(1,1)%CL(1) = 3\n+    cls(1,1)%CL(2:3) = [2,1]\n+\n+    if (any (Cls(1,1)%CL .ne. [3,2,1])) stop 1\n+    if (Cls(1,1)%CL(2) .ne. 2) stop 2\n+\n+  end subroutine doit\n+end program tester"}]}