{"sha": "e5eb27e51fe9f28375a7ae5a8a9ed5719968b482", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTVlYjI3ZTUxZmU5ZjI4Mzc1YTdhZTVhOGE5ZWQ1NzE5OTY4YjQ4Mg==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1997-08-28T03:35:22Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-08-28T03:35:22Z"}, "message": "flags.h (flag_move_all_movables): Declare.\n\n        * flags.h (flag_move_all_movables): Declare.\n        (flag_reduce_all_givs): Likewise.\n        * loop.c (move_movables): Handle flag_move_all_movables.\n        (strength_reduce): Handle flag_reduce_all_givs.\n        * toplev.c (flag_move_all_movables): Define.\n        (flag_reduce_all_givs): Likewise.\n        (f_options): Add -fmove-all-movables and -freduce-all-givs.\n        * invoke.texi: Document new options, including alias stuff that\n        wasn't included last time.\nTwo of the \"Tooning\" options :-)\n\nFrom-SVN: r14987", "tree": {"sha": "480e183f65e682922ade7ab74d0bbc0d16008908", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/480e183f65e682922ade7ab74d0bbc0d16008908"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5eb27e51fe9f28375a7ae5a8a9ed5719968b482", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5eb27e51fe9f28375a7ae5a8a9ed5719968b482", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5eb27e51fe9f28375a7ae5a8a9ed5719968b482", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5eb27e51fe9f28375a7ae5a8a9ed5719968b482/comments", "author": null, "committer": null, "parents": [{"sha": "73624c403d6bc189395af0c8b7c47c0262d38ca0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73624c403d6bc189395af0c8b7c47c0262d38ca0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73624c403d6bc189395af0c8b7c47c0262d38ca0"}], "stats": {"total": 85, "additions": 83, "deletions": 2}, "files": [{"sha": "10aa03adc2fde115dc91b400a9bb1f20d78f90c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5eb27e51fe9f28375a7ae5a8a9ed5719968b482/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5eb27e51fe9f28375a7ae5a8a9ed5719968b482/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e5eb27e51fe9f28375a7ae5a8a9ed5719968b482", "patch": "@@ -1,3 +1,15 @@\n+Wed Aug 27 21:32:20 1997  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* flags.h (flag_move_all_movables): Declare.\n+\t(flag_reduce_all_givs): Likewise.\n+\t* loop.c (move_movables): Handle flag_move_all_movables.\n+\t(strength_reduce): Handle flag_reduce_all_givs.\n+\t* toplev.c (flag_move_all_movables): Define.\n+\t(flag_reduce_all_givs): Likewise.\n+\t(f_options): Add -fmove-all-movables and -freduce-all-givs.\n+\t* invoke.texi: Document new options, including alias stuff that\n+\twasn't included last time.\n+\n Wed Aug 27 18:08:51 1997  Bob Manson  (manson@cygnus.com)\n \n \t* t-h8300: Use TARGET_LIBGCC2_CFLAGS instead of LIBGCC2_CFLAGS."}, {"sha": "5b3c7639e06489c4f7b9bd0edc6552fe1da8df3a", "filename": "gcc/flags.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5eb27e51fe9f28375a7ae5a8a9ed5719968b482/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5eb27e51fe9f28375a7ae5a8a9ed5719968b482/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=e5eb27e51fe9f28375a7ae5a8a9ed5719968b482", "patch": "@@ -216,6 +216,16 @@ extern int flag_unroll_loops;\n \n extern int flag_unroll_all_loops;\n \n+/* Nonzero forces all invariant computations in loops to be moved\n+   outside the loop. */\n+\n+extern int flag_move_all_movables;\n+\n+/* Nonzero forces all general induction variables in loops to be\n+   strength reduced. */\n+\n+extern int flag_reduce_all_givs;\n+\n /* Nonzero for -fcse-follow-jumps:\n    have cse follow jumps to do a more extensive job.  */\n "}, {"sha": "68b21aca9d22d692374bfc41393a17ab9a3ebd21", "filename": "gcc/invoke.texi", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5eb27e51fe9f28375a7ae5a8a9ed5719968b482/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5eb27e51fe9f28375a7ae5a8a9ed5719968b482/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=e5eb27e51fe9f28375a7ae5a8a9ed5719968b482", "patch": "@@ -151,6 +151,7 @@ in the following sections.\n -frerun-cse-after-loop  -fschedule-insns\n -fschedule-insns2  -fstrength-reduce  -fthread-jumps\n -funroll-all-loops  -funroll-loops\n+-fmove-all-movables  -freduce-all-givs\n -O  -O0  -O1  -O2  -O3\n @end smallexample\n \n@@ -354,6 +355,8 @@ in the following sections.\n -freg-struct-return  -fshared-data  -fshort-enums\n -fshort-double  -fvolatile  -fvolatile-global\n -fverbose-asm -fpack-struct  -fstack-check  +e0  +e1\n+-fargument-alias  -fargument-noalias\n+-fargument-noalias-global\n @end smallexample\n @end table\n \n@@ -2176,6 +2179,31 @@ Perform the optimization of loop unrolling.  This is done for all loops\n and usually makes programs run more slowly.  @samp{-funroll-all-loops}\n implies @samp{-fstrength-reduce} as well as @samp{-frerun-cse-after-loop}.\n \n+@item -fmove-all-movables\n+Forces all invariant computations in loops to be moved\n+outside the loop.\n+\n+@item -freduce-all-givs\n+Forces all general-induction variables in loops to be\n+strength-reduced.\n+\n+@emph{Note:} When compiling programs written in Fortran,\n+@samp{-fmove-all-moveables} and @samp{-freduce-all-givs} are enabled\n+by default when you use the optimizer.\n+\n+These options may generate better or worse code; results are highly\n+dependent on the structure of loops within the source code.\n+\n+These two options are intended to be removed someday, once\n+they have helped determine the efficacy of various\n+approaches to improving loop optimizations.\n+\n+Please let us (@code{egcs@cygnus.com and fortran@@gnu.ai.mit.edu})\n+know how use of these options affects\n+the performance of your production code.\n+We're very interested in code that runs @emph{slower}\n+when these options are @emph{enabled}.\n+\n @item -fno-peephole\n Disable any machine-specific peephole optimizations.\n \n@@ -5138,6 +5166,24 @@ compilation).\n \n With @samp{+e1}, G++ actually generates the code implementing virtual\n functions defined in the code, and makes them publicly visible.\n+\n+@cindex aliasing of parameters\n+@cindex parameters, aliased\n+@item -fargument-alias\n+@item -fargument-noalias\n+@item -fargument-noalias-global\n+Specify the possible relationships among parameters and between\n+parameters and global data.\n+\n+@samp{-fargument-alias} specifies that arguments (parameters) may\n+alias each other and may alias global storage.\n+@samp{-fargument-noalias} specifies that arguments do not alias\n+each other, but may alias global storage.\n+@samp{-fargument-noalias-global} specifies that arguments do not\n+alias each other and do not alias global storage.\n+\n+Each language will automatically use whatever option is required by\n+the language standard.  You should not need to use these options yourself.\n @end table\n \n @node Environment Variables"}, {"sha": "2b4af61b5741488d457d7442698f2f95e0306294", "filename": "gcc/loop.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5eb27e51fe9f28375a7ae5a8a9ed5719968b482/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5eb27e51fe9f28375a7ae5a8a9ed5719968b482/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=e5eb27e51fe9f28375a7ae5a8a9ed5719968b482", "patch": "@@ -1722,6 +1722,7 @@ move_movables (movables, threshold, insn_count, loop_start, end, nregs)\n \t     extra cost because something else was already moved.  */\n \n \t  if (already_moved[regno]\n+\t      || flag_move_all_movables\n \t      || (threshold * savings * m->lifetime) >= insn_count\n \t      || (m->forces && m->forces->done\n \t\t  && n_times_used[m->forces->regno] == 1))\n@@ -3991,8 +3992,8 @@ strength_reduce (scan_start, end, loop_top, insn_count,\n \t     of such giv's whether or not we know they are used after the loop\n \t     exit.  */\n \n-\t  if (v->lifetime * threshold * benefit < insn_count\n-\t      && ! bl->reversed)\n+\t  if ( ! flag_reduce_all_givs && v->lifetime * threshold * benefit < insn_count\n+\t      && ! bl->reversed )\n \t    {\n \t      if (loop_dump_stream)\n \t\tfprintf (loop_dump_stream,"}, {"sha": "bd22ff00b337461d3f905ae66bf7b5e9e6df0437", "filename": "gcc/toplev.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5eb27e51fe9f28375a7ae5a8a9ed5719968b482/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5eb27e51fe9f28375a7ae5a8a9ed5719968b482/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=e5eb27e51fe9f28375a7ae5a8a9ed5719968b482", "patch": "@@ -446,6 +446,16 @@ int flag_unroll_loops;\n \n int flag_unroll_all_loops;\n \n+/* Nonzero forces all invariant computations in loops to be moved\n+   outside the loop. */\n+\n+int flag_move_all_movables = 0;\n+\n+/* Nonzero forces all general induction variables in loops to be\n+   strength reduced. */\n+\n+int flag_reduce_all_givs = 0;\n+\n /* Nonzero for -fwritable-strings:\n    store string constants in data segment and don't uniquize them.  */\n \n@@ -679,6 +689,8 @@ struct { char *string; int *variable; int on_value;} f_options[] =\n   {\"strength-reduce\", &flag_strength_reduce, 1},\n   {\"unroll-loops\", &flag_unroll_loops, 1},\n   {\"unroll-all-loops\", &flag_unroll_all_loops, 1},\n+  {\"move-all-movables\", &flag_move_all_movables, 1},\n+  {\"reduce-all-givs\", &flag_reduce_all_givs, 1},\n   {\"writable-strings\", &flag_writable_strings, 1},\n   {\"peephole\", &flag_no_peephole, 0},\n   {\"force-mem\", &flag_force_mem, 1},"}]}