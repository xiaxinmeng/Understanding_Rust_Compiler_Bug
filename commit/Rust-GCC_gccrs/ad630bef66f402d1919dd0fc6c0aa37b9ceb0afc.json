{"sha": "ad630bef66f402d1919dd0fc6c0aa37b9ceb0afc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ2MzBiZWY2NmY0MDJkMTkxOWRkMGZjNmMwYWEzN2I5Y2ViMGFmYw==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2004-11-22T20:25:31Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2004-11-22T20:25:31Z"}, "message": "rs6000.c (rs6000_return_in_memory): Test TARGET_ALTIVEC_ABI.\n\n2004-11-22  David Edelsohn  <edelsohn@gnu.org>\n\t    Fariborz Jahanian  <fjahanian@apple.com>\n\n\t* config/rs6000/rs6000.c (rs6000_return_in_memory): Test\n\tTARGET_ALTIVEC_ABI.\n\t(function_arg_boundary): Align 8 to 16 byte vectors like SPE.\n\tAlign 16 byte and larger vectors like Altivec.\n\t(function_arg_advance): Pass any 16 byte vector like Altivec vector.\n\t(function_arg): Same.\n\t(rs6000_pass_by_references): Test TARGET_ALTIVEC_ABI.\n\nCo-Authored-By: Fariborz Jahanian <fjahanian@apple.com>\n\nFrom-SVN: r91025", "tree": {"sha": "2df35654f89ce0d7e3e37a52bd7979931b4d360d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2df35654f89ce0d7e3e37a52bd7979931b4d360d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad630bef66f402d1919dd0fc6c0aa37b9ceb0afc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad630bef66f402d1919dd0fc6c0aa37b9ceb0afc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad630bef66f402d1919dd0fc6c0aa37b9ceb0afc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad630bef66f402d1919dd0fc6c0aa37b9ceb0afc/comments", "author": null, "committer": null, "parents": [{"sha": "478e2092877b02cd8d859e2ce5d623fc475c9e61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/478e2092877b02cd8d859e2ce5d623fc475c9e61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/478e2092877b02cd8d859e2ce5d623fc475c9e61"}], "stats": {"total": 37, "additions": 30, "deletions": 7}, "files": [{"sha": "f46c34b01b1e71d855b3750642e624c9ec7aa9ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad630bef66f402d1919dd0fc6c0aa37b9ceb0afc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad630bef66f402d1919dd0fc6c0aa37b9ceb0afc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad630bef66f402d1919dd0fc6c0aa37b9ceb0afc", "patch": "@@ -1,3 +1,14 @@\n+2004-11-22  David Edelsohn  <edelsohn@gnu.org>\n+\t    Fariborz Jahanian  <fjahanian@apple.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_return_in_memory): Test\n+\tTARGET_ALTIVEC_ABI.\n+\t(function_arg_boundary): Align 8 to 16 byte vectors like SPE.\n+\tAlign 16 byte and larger vectors like Altivec.\n+\t(function_arg_advance): Pass any 16 byte vector like Altivec vector.\n+\t(function_arg): Same.\n+\t(rs6000_pass_by_references): Test TARGET_ALTIVEC_ABI.\n+\n 2004-11-22  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR tree-opt/18572"}, {"sha": "63623f15b87c31cc56662c76f26e53336b87a834", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad630bef66f402d1919dd0fc6c0aa37b9ceb0afc/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad630bef66f402d1919dd0fc6c0aa37b9ceb0afc/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=ad630bef66f402d1919dd0fc6c0aa37b9ceb0afc", "patch": "@@ -4643,12 +4643,12 @@ rs6000_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n \n   /* Return synthetic vectors in memory.  */\n   if (TREE_CODE (type) == VECTOR_TYPE\n-      && int_size_in_bytes (type) > (TARGET_ALTIVEC ? 16 : 8))\n+      && int_size_in_bytes (type) > (TARGET_ALTIVEC_ABI ? 16 : 8))\n     {\n       static bool warned_for_return_big_vectors = false;\n       if (!warned_for_return_big_vectors)\n \t{\n-\t  warning (\"synthetic vectors returned by reference: \"\n+\t  warning (\"synthetic vector returned by reference: \"\n \t\t   \"non-standard ABI extension with no compatibility guarantee\");\n \t  warned_for_return_big_vectors = true;\n \t}\n@@ -4657,6 +4657,7 @@ rs6000_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n \n   if (DEFAULT_ABI == ABI_V4 && TYPE_MODE (type) == TFmode)\n     return true;\n+\n   return false;\n }\n \n@@ -4808,9 +4809,14 @@ function_arg_boundary (enum machine_mode mode, tree type)\n {\n   if (DEFAULT_ABI == ABI_V4 && GET_MODE_SIZE (mode) == 8)\n     return 64;\n-  else if (SPE_VECTOR_MODE (mode))\n+  else if (SPE_VECTOR_MODE (mode)\n+\t   || (type && TREE_CODE (type) == VECTOR_TYPE\n+\t       && int_size_in_bytes (type) >= 8\n+\t       && int_size_in_bytes (type) < 16))\n     return 64;\n-  else if (ALTIVEC_VECTOR_MODE (mode))\n+  else if (ALTIVEC_VECTOR_MODE (mode)\n+\t   || (type && TREE_CODE (type) == VECTOR_TYPE\n+\t       && int_size_in_bytes (type) >= 16))\n     return 128;\n   else if (type && TREE_CODE (type) == VECTOR_TYPE\n \t   && int_size_in_bytes (type) > 16)\n@@ -4895,7 +4901,10 @@ function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n   if (depth == 0)\n     cum->nargs_prototype--;\n \n-  if (TARGET_ALTIVEC_ABI && ALTIVEC_VECTOR_MODE (mode))\n+  if (TARGET_ALTIVEC_ABI\n+      && (ALTIVEC_VECTOR_MODE (mode)\n+\t  || (type && TREE_CODE (type) == VECTOR_TYPE\n+\t      && int_size_in_bytes (type) == 16)))\n     {\n       bool stack = false;\n \n@@ -5396,7 +5405,10 @@ function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n       }\n     else\n       return gen_rtx_REG (mode, cum->vregno);\n-  else if (TARGET_ALTIVEC_ABI && ALTIVEC_VECTOR_MODE (mode))\n+  else if (TARGET_ALTIVEC_ABI\n+\t   && (ALTIVEC_VECTOR_MODE (mode)\n+\t       || (type && TREE_CODE (type) == VECTOR_TYPE\n+\t\t   && int_size_in_bytes (type) == 16)))\n     {\n       if (named || abi == ABI_V4)\n \treturn NULL_RTX;\n@@ -5664,7 +5676,7 @@ rs6000_pass_by_reference (CUMULATIVE_ARGS *cum ATTRIBUTE_UNUSED,\n \n   /* Pass synthetic vectors in memory.  */\n   if (type && TREE_CODE (type) == VECTOR_TYPE\n-      && int_size_in_bytes (type) > (TARGET_ALTIVEC ? 16 : 8))\n+      && int_size_in_bytes (type) > (TARGET_ALTIVEC_ABI ? 16 : 8))\n     {\n       static bool warned_for_pass_big_vectors = false;\n       if (TARGET_DEBUG_ARG)"}]}