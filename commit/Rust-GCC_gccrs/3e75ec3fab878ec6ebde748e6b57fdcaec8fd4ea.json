{"sha": "3e75ec3fab878ec6ebde748e6b57fdcaec8fd4ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U3NWVjM2ZhYjg3OGVjNmViZGU3NDhlNmI1N2ZkY2FlYzhmZDRlYQ==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2017-08-30T20:04:07Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2017-08-30T20:04:07Z"}, "message": "re PR tree-optimization/81987 (ICE in verify_ssa with -O3 -march=skylake-avx512)\n\n[gcc]\n\n2017-08-30  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\tPR tree-optimization/81987\n\t* gimple-ssa-strength-reduction.c (insert_initializers): Don't\n\tinsert an initializer in a location not dominated by the stride\n\tdefinition.\n\n[gcc/testsuite]\n\n2017-08-30  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\tPR tree-optimization/81987\n\t* g++.dg/torture/pr81987.C: New file.\n\nFrom-SVN: r251547", "tree": {"sha": "fd322c5ad6f23760fd999a9b1ca4b6d6a2535281", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd322c5ad6f23760fd999a9b1ca4b6d6a2535281"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e75ec3fab878ec6ebde748e6b57fdcaec8fd4ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e75ec3fab878ec6ebde748e6b57fdcaec8fd4ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e75ec3fab878ec6ebde748e6b57fdcaec8fd4ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e75ec3fab878ec6ebde748e6b57fdcaec8fd4ea/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ba0cecd6d45506d12db4c88637565cc059e6960d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba0cecd6d45506d12db4c88637565cc059e6960d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba0cecd6d45506d12db4c88637565cc059e6960d"}], "stats": {"total": 90, "additions": 90, "deletions": 0}, "files": [{"sha": "379be0a35103829d0e39b6a22bd04e762c124b0b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e75ec3fab878ec6ebde748e6b57fdcaec8fd4ea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e75ec3fab878ec6ebde748e6b57fdcaec8fd4ea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e75ec3fab878ec6ebde748e6b57fdcaec8fd4ea", "patch": "@@ -1,3 +1,10 @@\n+2017-08-30  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\tPR tree-optimization/81987\n+\t* gimple-ssa-strength-reduction.c (insert_initializers): Don't\n+\tinsert an initializer in a location not dominated by the stride\n+\tdefinition.\n+\n 2017-08-30  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree-eh.c (lower_try_finally_switch): Set the location of the finally"}, {"sha": "6e3e93db053ca31f0ee794ca63b067ae9458d612", "filename": "gcc/gimple-ssa-strength-reduction.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e75ec3fab878ec6ebde748e6b57fdcaec8fd4ea/gcc%2Fgimple-ssa-strength-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e75ec3fab878ec6ebde748e6b57fdcaec8fd4ea/gcc%2Fgimple-ssa-strength-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-strength-reduction.c?ref=3e75ec3fab878ec6ebde748e6b57fdcaec8fd4ea", "patch": "@@ -3340,6 +3340,23 @@ insert_initializers (slsr_cand_t c)\n \t that block, the earliest one will be returned in WHERE.  */\n       bb = nearest_common_dominator_for_cands (c, incr, &where);\n \n+      /* If the NCD is not dominated by the block containing the\n+\t definition of the stride, we can't legally insert a\n+\t single initializer.  Mark the increment as unprofitable\n+\t so we don't make any replacements.  FIXME: Multiple\n+\t initializers could be placed with more analysis.  */\n+      gimple *stride_def = SSA_NAME_DEF_STMT (c->stride);\n+      basic_block stride_bb = gimple_bb (stride_def);\n+\n+      if (stride_bb && !dominated_by_p (CDI_DOMINATORS, bb, stride_bb))\n+\t{\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t    fprintf (dump_file,\n+\t\t     \"Initializer #%d cannot be legally placed\\n\", i);\n+\t  incr_vec[i].cost = COST_INFINITE;\n+\t  continue;\n+\t}\n+\n       /* If the nominal stride has a different type than the recorded\n \t stride type, build a cast from the nominal stride to that type.  */\n       if (!types_compatible_p (TREE_TYPE (c->stride), c->stride_type))"}, {"sha": "afaa91943caf52fe40061ee170b795218c6ac25a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e75ec3fab878ec6ebde748e6b57fdcaec8fd4ea/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e75ec3fab878ec6ebde748e6b57fdcaec8fd4ea/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3e75ec3fab878ec6ebde748e6b57fdcaec8fd4ea", "patch": "@@ -1,3 +1,8 @@\n+2017-08-30  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\tPR tree-optimization/81987\n+\t* g++.dg/torture/pr81987.C: New file.\n+\n 2017-08-30  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/aggr22.ad[sb]: New test."}, {"sha": "4579332ad716d26a45c6e9971153e5359cf5d1f2", "filename": "gcc/testsuite/g++.dg/torture/pr81987.C", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e75ec3fab878ec6ebde748e6b57fdcaec8fd4ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr81987.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e75ec3fab878ec6ebde748e6b57fdcaec8fd4ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr81987.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr81987.C?ref=3e75ec3fab878ec6ebde748e6b57fdcaec8fd4ea", "patch": "@@ -0,0 +1,61 @@\n+extern short var_1;\n+extern const short var_3;\n+extern unsigned long int var_9;\n+extern short var_13;\n+extern const unsigned long int var_15;\n+extern const unsigned long int var_37;\n+extern unsigned long int var_40;\n+extern long long int var_47;\n+extern short var_48;\n+extern const short var_54;\n+extern long long int var_79;\n+extern long long int var_81;\n+extern long long int var_94;\n+extern long long int var_95;\n+extern long long int var_701;\n+extern unsigned long int var_786;\n+extern short var_788;\n+extern long long int var_844;\n+\n+struct struct_1 {\n+  short member_1_2 : 15;\n+  static long long int member_1_3;\n+};\n+\n+extern struct_1 struct_obj_6;\n+extern struct_1 struct_obj_8;\n+\n+void foo() {\n+  int a = var_3 <= 602154393864UL;\n+  if (var_81 ? 0 : var_3 && var_9)\n+    ;\n+  else {\n+    var_94 = 0;\n+    if (var_3 && var_48 || var_13) {\n+      if (var_48)\n+\tvar_95 = 0;\n+      short b((2364461588881776511UL + var_3) * (2 ? var_13 : 0) || var_1);\n+      struct_obj_8.member_1_2 = b;\n+      if (var_15) {\n+\tif (var_81)\n+\t  if (var_47)\n+\t    ;\n+\t  else if (var_40)\n+\t    var_701 = 0;\n+      } else {\n+\tif (var_40)\n+\t  var_79 = 0;\n+\tif (var_54) {\n+\t  if (var_37)\n+\t    var_786 = 0;\n+\t  else\n+\t    var_788 = 0;\n+\t            struct_obj_6.member_1_3 =\n+\t\t      (2364461588881776511UL + var_3) * (2 ? var_13 : 0);\n+\t}\n+      }\n+      if ((2364461588881776511UL + var_3) * (2 ? var_13 : 0))\n+\tvar_844 = 0;\n+    }\n+  }\n+}"}]}