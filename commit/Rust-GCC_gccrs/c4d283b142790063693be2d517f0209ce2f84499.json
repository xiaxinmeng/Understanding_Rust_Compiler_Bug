{"sha": "c4d283b142790063693be2d517f0209ce2f84499", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRkMjgzYjE0Mjc5MDA2MzY5M2JlMmQ1MTdmMDIwOWNlMmY4NDQ5OQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2020-09-24T11:30:11Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2020-09-24T11:40:15Z"}, "message": "[testsuite] Scan final instead of asm in independent-cloneids-1.c\n\nWhen running test-case gcc.dg/independent-cloneids-1.c for nvptx, we get:\n...\nFAIL: scan-assembler-times (?n)^_*bar[.$_]constprop[.$_]0: 1\nFAIL: scan-assembler-times (?n)^_*bar[.$_]constprop[.$_]1: 1\nFAIL: scan-assembler-times (?n)^_*bar[.$_]constprop[.$_]2: 1\nFAIL: scan-assembler-times (?n)^_*foo[.$_]constprop[.$_]0: 1\nFAIL: scan-assembler-times (?n)^_*foo[.$_]constprop[.$_]1: 1\nFAIL: scan-assembler-times (?n)^_*foo[.$_]constprop[.$_]2: 1\n...\n\nThe test expects to find something like:\n...\nbar.constprop.0:\n...\nbut instead on nvptx we have:\n...\n.func (.param.u32 %value_out) bar$constprop$0\n...\n\nFix this by rewriting the scans to use the final dump instead.\n\nTested on x86_64.\n\ngcc/testsuite/ChangeLog:\n\n2020-09-24  Tom de Vries  <tdevries@suse.de>\n\n\t* gcc.dg/independent-cloneids-1.c: Use scan-rtl-dump instead of\n\tscan-assembler.", "tree": {"sha": "32cec7585a683b8ed4ab13c42469c6e019e07c05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32cec7585a683b8ed4ab13c42469c6e019e07c05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4d283b142790063693be2d517f0209ce2f84499", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4d283b142790063693be2d517f0209ce2f84499", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4d283b142790063693be2d517f0209ce2f84499", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4d283b142790063693be2d517f0209ce2f84499/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8d5c28233f95e3474ee8cbc4d341cbb43ab7bb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8d5c28233f95e3474ee8cbc4d341cbb43ab7bb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8d5c28233f95e3474ee8cbc4d341cbb43ab7bb6"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "efbc1c51da0bd2683f49e328bb1351f25981e9d0", "filename": "gcc/testsuite/gcc.dg/independent-cloneids-1.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d283b142790063693be2d517f0209ce2f84499/gcc%2Ftestsuite%2Fgcc.dg%2Findependent-cloneids-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d283b142790063693be2d517f0209ce2f84499/gcc%2Ftestsuite%2Fgcc.dg%2Findependent-cloneids-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Findependent-cloneids-1.c?ref=c4d283b142790063693be2d517f0209ce2f84499", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O3 -fipa-cp -fipa-cp-clone\"  } */\n+/* { dg-options \"-O3 -fipa-cp -fipa-cp-clone -fdump-rtl-final\"  } */\n /* { dg-skip-if \"Odd label definition syntax\" { mmix-*-* } } */\n \n extern int printf (const char *, ...);\n@@ -29,11 +29,11 @@ baz (int arg)\n   return foo (8);\n }\n \n-/* { dg-final { scan-assembler-times {(?n)^_*bar[.$_]constprop[.$_]0:} 1 } } */\n-/* { dg-final { scan-assembler-times {(?n)^_*bar[.$_]constprop[.$_]1:} 1 } } */\n-/* { dg-final { scan-assembler-times {(?n)^_*bar[.$_]constprop[.$_]2:} 1 } } */\n-/* { dg-final { scan-assembler-times {(?n)^_*foo[.$_]constprop[.$_]0:} 1 } } */\n-/* { dg-final { scan-assembler-times {(?n)^_*foo[.$_]constprop[.$_]1:} 1 } } */\n-/* { dg-final { scan-assembler-times {(?n)^_*foo[.$_]constprop[.$_]2:} 1 } } */\n-/* { dg-final { scan-assembler-not {(?n)^_*foo[.$_]constprop[.$_]3:} } } */\n-/* { dg-final { scan-assembler-not {(?n)^_*foo[.$_]constprop[.$_]4:} } } */\n+/* { dg-final { scan-rtl-dump-times {(?n)^;; Function bar.constprop \\(bar[.$_]constprop[.$_]0,} 1 \"final\" } } */\n+/* { dg-final { scan-rtl-dump-times {(?n)^;; Function bar.constprop \\(bar[.$_]constprop[.$_]1,} 1 \"final\" } } */\n+/* { dg-final { scan-rtl-dump-times {(?n)^;; Function bar.constprop \\(bar[.$_]constprop[.$_]2,} 1 \"final\" } } */\n+/* { dg-final { scan-rtl-dump-times {(?n)^;; Function foo.constprop \\(foo[.$_]constprop[.$_]0,} 1 \"final\" } } */\n+/* { dg-final { scan-rtl-dump-times {(?n)^;; Function foo.constprop \\(foo[.$_]constprop[.$_]1,} 1 \"final\" } } */\n+/* { dg-final { scan-rtl-dump-times {(?n)^;; Function foo.constprop \\(foo[.$_]constprop[.$_]2,} 1 \"final\" } } */\n+/* { dg-final { scan-rtl-dump-times {(?n)^;; Function foo.constprop \\(foo[.$_]constprop[.$_]3,} 0 \"final\" } } */\n+/* { dg-final { scan-rtl-dump-times {(?n)^;; Function foo.constprop \\(foo[.$_]constprop[.$_]4,} 0 \"final\" } } */"}]}