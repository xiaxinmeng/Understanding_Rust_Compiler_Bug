{"sha": "6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU5MGZjOWZiZDA3MWQxYmY2MTcyYmUyNjk4ODRlZDVhMWFjNWFhMw==", "commit": {"author": {"name": "Kai Tietz", "email": "kai.tietz@onevision.com", "date": "2008-03-20T08:24:42Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2008-03-20T08:24:42Z"}, "message": "ms format support for mingw.\n\nfor gcc:\n\t* c-format.c (replace_format_name_to_system_name): New.\n\t(cmp_attribs): New.\n\t(convert_format_name_to_system_name): New.\n\t(decode_format_attr): Add use of convert_format_name_to_system_name.\n\t(format_types_orig): Add gnu_ prefix to names.\n\t(check_format_info_main): Special treating of \\0 escaped names for\n\tsupporting multi-character format specifiers as I32, I64.\n\t(TARGET_OVERRIDES_FORMAT_ATTRIBUTES): Use of user defined attributes.\n\t(gnu_target_overrides_format_attributes): New.\n\t* c-format.h: Add structure target_ovr_attr to hold\n\tsystem specific formatter names.\n\t* config.gcc: Add for x86&x86_64 cygwin and mingw32 targets the\n\tmsformat-c.o file to c_target_objs and cxx_target_objs.\n\t* config/i386/mingw32.h (TARGET_OVERRIDES_FORMAT_ATTRIBUTES): New.\n\t(TARGET_OVERRIDES_FORMAT_ATTRIBUTES_COUNT): New.\n\t(TARGET_N_FORMAT_TYPES): New.\n\t* config/i386/msformat-c.c: New.\n\t* config/i386/t-cygming: Add build rule for msformat-c.o.\n\t* doc/extend.texi: Add new format names gnu_* and ms_* and\n\tfurther details.\n\t* doc/tm.texi: (TARGET_OVERRIDES_FORMAT_ATTRIBUTES): New.\n\nfor gcc/testsuite/\n\n\t* gcc.dg/format/ms_array-1.c: New.\n\t* gcc.dg/format/ms_c90-scanf-3.c: New.\n\t* gcc.dg/format/ms_c99-strftime-1.c: New.\n\t* gcc.dg/format/ms_no-y2k-1.c: New.\n\t* gcc.dg/format/ms_attr-1.c: New.\n\t* gcc.dg/format/ms_c90-scanf-4.c: New.\n\t* gcc.dg/format/ms_c99-strftime-2.c: New.\n\t* gcc.dg/format/ms_nonlit-1.c: New.\n\t* gcc.dg/format/ms_c90-scanf-5.c: New.\n\t* gcc.dg/format/ms_cast-1.c: New.\n\t* gcc.dg/format/ms_nonlit-2.c: New.\n\t* gcc.dg/format/ms_attr-2.c: New.\n\t* gcc.dg/format/ms_c90-strftime-1.c: New.\n\t* gcc.dg/format/ms_miss-1.c: New.\n\t* gcc.dg/format/ms_nonlit-3.c: New.\n\t* gcc.dg/format/ms_attr-3.c: New.\n\t* gcc.dg/format/ms_c90-strftime-2.c: New.\n\t* gcc.dg/format/ms_miss-2.c: New.\n\t* gcc.dg/format/ms_nul-1.c: New.\n\t* gcc.dg/format/ms_attr-4.c: New.\n\t* gcc.dg/format/ms_c94-printf-1.c: New.\n\t* gcc.dg/format/ms_miss-3.c: New.\n\t* gcc.dg/format/ms_nul-2.c: New.\n\t* gcc.dg/format/ms_attr-7.c: New.\n\t* gcc.dg/format/ms_c94-scanf-1.c: New.\n\t* gcc.dg/format/ms_miss-4.c: New.\n\t* gcc.dg/format/ms_null-1.c: New.\n\t* gcc.dg/format/ms_bitfld-1.c: New.\n\t* gcc.dg/format/ms_c99-printf-1.c: New.\n\t* gcc.dg/format/ms_miss-5.c: New.\n\t* gcc.dg/format/ms_plus-1.c: New.\n\t* gcc.dg/format/ms_branch-1.c: New.\n\t* gcc.dg/format/ms_c99-printf-2.c: New.\n\t* gcc.dg/format/ms_miss-6.c: New.\n\t* gcc.dg/format/ms_sec-1.c: New.\n\t* gcc.dg/format/ms_c90-printf-1.c: New.\n\t* gcc.dg/format/ms_c99-printf-3.c: New.\n\t* gcc.dg/format/ms_multattr-1.c: New.\n\t* gcc.dg/format/ms_unnamed-1.c: New.\n\t* gcc.dg/format/ms_c90-printf-2.c: New.\n\t* gcc.dg/format/ms_c99-scanf-1.c: New.\n\t* gcc.dg/format/ms_multattr-2.c: New.\n\t* gcc.dg/format/ms_va-1.c: New.\n\t* gcc.dg/format/ms_c90-printf-3.c: New.\n\t* gcc.dg/format/ms_c99-scanf-2.c: New.\n\t* gcc.dg/format/ms_multattr-3.c: New.\n\t* gcc.dg/format/ms_warnll-1.c: New.\n\t* gcc.dg/format/ms_c90-scanf-1.c: New.\n\t* gcc.dg/format/ms_c99-scanf-3.c: New.\n\t* gcc.dg/format/ms_no-exargs-1.c: New.\n\t* gcc.dg/format/ms_zero-length-1.c: New.\n\t* gcc.dg/format/ms_c90-scanf-2.c: New.\n\t* gcc.dg/format/ms_c99-scanf-4.c: New.\n\t* gcc.dg/format/ms_no-exargs-2.c: New.\n\t* gcc.dg/format/null-1.c: Add gnu style usage for mingw.\n\t* gcc.dg/format/miss-1.c: Likewise.\n\t* gcc.dg/format/miss-3.c: Likewise.\n\t* gcc.dg/format/multattr-2.c: Likewise.\n\t* gcc.dg/format/miss-5.c: Likewise.\n\t* gcc.dg/format/attr-2.c: Likewise.\n\t* gcc.dg/format/attr-4.c: Likewise.\n\t* gcc.dg/format/c90-scanf-4.c: Likewise.\n\t* gcc.dg/format/c99-printf-3.c: Likewise.\n\t* gcc.dg/format/multattr-1.c: Likewise.\n\t* gcc.dg/format/miss-4.c: Likewise.\n\t* gcc.dg/format/miss-6.c: Likewise.\n\t* gcc.dg/format/c90-printf-3.c: Likewise.\n\t* gcc.dg/format/attr-1.c: Likewise.\n\t* gcc.dg/format/attr-3.c: Likewise.\n\t* gcc.dg/format/attr-7.c: Likewise.\n\t* gcc.dg/format/format.h: Treat mingw and gnu style.\n\t* gcc.dg/format/sys_format.c: New.\n\nFrom-SVN: r133365", "tree": {"sha": "94f77b9dcfa7f65e6f1d0cb3bf1f33aa6aa35165", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94f77b9dcfa7f65e6f1d0cb3bf1f33aa6aa35165"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/comments", "author": null, "committer": null, "parents": [{"sha": "4e35969216150fe4be161d99ccf5c5cf749376d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e35969216150fe4be161d99ccf5c5cf749376d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e35969216150fe4be161d99ccf5c5cf749376d4"}], "stats": {"total": 2594, "additions": 2500, "deletions": 94}, "files": [{"sha": "67e924abaf997948488c2023ed0691fbc04aa38a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -1,3 +1,27 @@\n+2008-03-20\tKai Tietz  <kai.tietz@onevision.com>\n+\n+\t* c-format.c (replace_format_name_to_system_name): New.\n+\t(cmp_attribs): New.\n+\t(convert_format_name_to_system_name): New.\n+\t(decode_format_attr): Add use of convert_format_name_to_system_name.\n+\t(format_types_orig): Add gnu_ prefix to names.\n+\t(check_format_info_main): Special treating of \\0 escaped names for\n+\tsupporting multi-character format specifiers as I32, I64.\n+\t(TARGET_OVERRIDES_FORMAT_ATTRIBUTES): Use of user defined attributes.\n+\t(gnu_target_overrides_format_attributes): New.\n+\t* c-format.h: Add structure target_ovr_attr to hold\n+\tsystem specific formatter names.\n+\t* config.gcc: Add for x86&x86_64 cygwin and mingw32 targets the\n+\tmsformat-c.o file to c_target_objs and cxx_target_objs.\n+\t* config/i386/mingw32.h (TARGET_OVERRIDES_FORMAT_ATTRIBUTES): New.\n+\t(TARGET_OVERRIDES_FORMAT_ATTRIBUTES_COUNT): New.\n+\t(TARGET_N_FORMAT_TYPES): New.\n+\t* config/i386/msformat-c.c: New.\n+\t* config/i386/t-cygming: Add build rule for msformat-c.o.\n+\t* doc/extend.texi: Add new format names gnu_* and ms_* and\n+\tfurther details.\n+\t* doc/tm.texi: (TARGET_OVERRIDES_FORMAT_ATTRIBUTES): New.\n+\n 2008-03-20  Ira Rosen  <irar@il.ibm.com>\n \n \t* doc/invoke.texi (-O3): Add -ftree-vectorize to the list of"}, {"sha": "13de9106f3a8a509481cf3acb4a435468b7fa435", "filename": "gcc/c-format.c", "status": "modified", "additions": 109, "deletions": 9, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -62,8 +62,7 @@ enum format_type { printf_format_type, asm_fprintf_format_type,\n \t\t   gcc_diag_format_type, gcc_tdiag_format_type,\n \t\t   gcc_cdiag_format_type,\n \t\t   gcc_cxxdiag_format_type, gcc_gfc_format_type,\n-\t\t   scanf_format_type, strftime_format_type,\n-\t\t   strfmon_format_type, format_type_error = -1};\n+\t\t   format_type_error = -1};\n \n typedef struct function_format_info\n {\n@@ -80,7 +79,8 @@ static bool check_format_string (tree argument,\n \t\t\t\t int flags, bool *no_add_attrs);\n static bool get_constant (tree expr, unsigned HOST_WIDE_INT *value,\n \t\t\t  int validated_p);\n-\n+static const char *convert_format_name_to_system_name (const char *attr_name);\n+static bool cmp_attribs (const char *tattr_name, const char *attr_name);\n \n /* Handle a \"format_arg\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n@@ -191,6 +191,8 @@ decode_format_attr (tree args, function_format_info *info, int validated_p)\n     {\n       const char *p = IDENTIFIER_POINTER (format_type_id);\n \n+      p = convert_format_name_to_system_name (p);\n+\n       info->format_type = decode_format_type (p);\n \n       if (info->format_type == format_type_error)\n@@ -715,7 +717,7 @@ static const format_char_info monetary_char_table[] =\n /* This must be in the same order as enum format_type.  */\n static const format_kind_info format_types_orig[] =\n {\n-  { \"printf\",   printf_length_specs,  print_char_table, \" +#0-'I\", NULL,\n+  { \"gnu_printf\",   printf_length_specs,  print_char_table, \" +#0-'I\", NULL,\n     printf_flag_specs, printf_flag_pairs,\n     FMT_FLAG_ARG_CONVERT|FMT_FLAG_DOLLAR_MULTIPLE|FMT_FLAG_USE_DOLLAR|FMT_FLAG_EMPTY_PREC_OK,\n     'w', 0, 'p', 0, 'L', 0,\n@@ -757,18 +759,18 @@ static const format_kind_info format_types_orig[] =\n     0, 0, 0, 0, 0, 0,\n     NULL, NULL\n   },\n-  { \"scanf\",    scanf_length_specs,   scan_char_table,  \"*'I\", NULL,\n+  { \"gnu_scanf\",    scanf_length_specs,   scan_char_table,  \"*'I\", NULL,\n     scanf_flag_specs, scanf_flag_pairs,\n     FMT_FLAG_ARG_CONVERT|FMT_FLAG_SCANF_A_KLUDGE|FMT_FLAG_USE_DOLLAR|FMT_FLAG_ZERO_WIDTH_BAD|FMT_FLAG_DOLLAR_GAP_POINTER_OK,\n     'w', 0, 0, '*', 'L', 'm',\n     NULL, NULL\n   },\n-  { \"strftime\", NULL,                 time_char_table,  \"_-0^#\", \"EO\",\n+  { \"gnu_strftime\", NULL,                 time_char_table,  \"_-0^#\", \"EO\",\n     strftime_flag_specs, strftime_flag_pairs,\n     FMT_FLAG_FANCY_PERCENT_OK, 'w', 0, 0, 0, 0, 0,\n     NULL, NULL\n   },\n-  { \"strfmon\",  strfmon_length_specs, monetary_char_table, \"=^+(!-\", NULL,\n+  { \"gnu_strfmon\",  strfmon_length_specs, monetary_char_table, \"=^+(!-\", NULL,\n     strfmon_flag_specs, strfmon_flag_pairs,\n     FMT_FLAG_ARG_CONVERT, 'w', '#', 'p', 0, 'L', 0,\n     NULL, NULL\n@@ -847,6 +849,8 @@ decode_format_type (const char *s)\n {\n   int i;\n   int slen;\n+\n+  s = convert_format_name_to_system_name (s);\n   slen = strlen (s);\n   for (i = 0; i < n_format_types; i++)\n     {\n@@ -1776,7 +1780,22 @@ check_format_info_main (format_check_results *res,\n       if (fli)\n \t{\n \t  while (fli->name != 0 && fli->name[0] != *format_chars)\n-\t    fli++;\n+\t    {\n+\t      if (fli->name[0] == '\\0')\n+\t\t{\n+\t\t  int si  = strlen (fli->name + 1) + 1;\n+\t\t  int i = 1;\n+\t\t  while (fli->name[i] != 0 && fli->name[i] == format_chars [i - 1])\n+\t\t    ++i;\n+\t\t if (si == i)\n+\t\t   {\n+\t\t     if (si > 2)\n+\t\t       format_chars += si - 2;\n+\t\t     break;\n+\t\t   }\n+\t       }\n+\t      fli++;\n+\t    }\n \t  if (fli->name != 0)\n \t    {\n \t      format_chars++;\n@@ -2703,6 +2722,84 @@ init_dynamic_diag_info (void)\n extern const format_kind_info TARGET_FORMAT_TYPES[];\n #endif\n \n+#ifdef TARGET_OVERRIDES_FORMAT_ATTRIBUTES\n+extern const target_ovr_attr TARGET_OVERRIDES_FORMAT_ATTRIBUTES[];\n+#endif\n+\n+/* Attributes such as \"printf\" are equivalent to those such as\n+   \"gnu_printf\" unless this is overridden by a target.  */\n+static const target_ovr_attr gnu_target_overrides_format_attributes[] =\n+{\n+  { \"gnu_printf\",   \"printf\" },\n+  { \"gnu_scanf\",    \"scanf\" },\n+  { \"gnu_strftime\", \"strftime\" },\n+  { \"gnu_strfmon\",  \"strfmon\" },\n+  { NULL,           NULL }\n+};\n+\n+/* Translate to unified attribute name. This is used in decode_format_type and\n+   decode_format_attr. In attr_name the user specified argument is passed. It\n+   returns the unified format name from TARGET_OVERRIDES_FORMAT_ATTRIBUTES\n+   or the attr_name passed to this function, if there is no matching entry.  */\n+static const char *\n+convert_format_name_to_system_name (const char *attr_name)\n+{\n+  int i;\n+\n+  if (attr_name == NULL || *attr_name == 0\n+      || strncmp (attr_name, \"gcc_\", 4) == 0)\n+    return attr_name;\n+\n+#ifdef TARGET_OVERRIDES_FORMAT_ATTRIBUTES\n+  /* Check if format attribute is overridden by target.  */\n+  if (TARGET_OVERRIDES_FORMAT_ATTRIBUTES != NULL\n+      && TARGET_OVERRIDES_FORMAT_ATTRIBUTES_COUNT > 0)\n+    {\n+      for (i = 0; i < TARGET_OVERRIDES_FORMAT_ATTRIBUTES_COUNT; ++i)\n+        {\n+          if (cmp_attribs (TARGET_OVERRIDES_FORMAT_ATTRIBUTES[i].named_attr_src,\n+\t\t\t   attr_name))\n+            return attr_name;\n+          if (cmp_attribs (TARGET_OVERRIDES_FORMAT_ATTRIBUTES[i].named_attr_dst,\n+\t\t\t   attr_name))\n+            return TARGET_OVERRIDES_FORMAT_ATTRIBUTES[i].named_attr_src;\n+        }\n+    }\n+#endif\n+  /* Otherwise default to gnu format.  */\n+  for (i = 0;\n+       gnu_target_overrides_format_attributes[i].named_attr_src != NULL;\n+       ++i)\n+    {\n+      if (cmp_attribs (gnu_target_overrides_format_attributes[i].named_attr_src,\n+\t\t       attr_name))\n+        return attr_name;\n+      if (cmp_attribs (gnu_target_overrides_format_attributes[i].named_attr_dst,\n+\t\t       attr_name))\n+        return gnu_target_overrides_format_attributes[i].named_attr_src;\n+    }\n+\n+  return attr_name;\n+}\n+\n+/* Return true if TATTR_NAME and ATTR_NAME are the same format attribute,\n+   counting \"name\" and \"__name__\" as the same, false otherwise.  */\n+static bool\n+cmp_attribs (const char *tattr_name, const char *attr_name)\n+{\n+  int alen = strlen (attr_name);\n+  int slen = (tattr_name ? strlen (tattr_name) : 0);\n+  if (alen > 4 && attr_name[0] == '_' && attr_name[1] == '_'\n+      && attr_name[alen - 1] == '_' && attr_name[alen - 2] == '_')\n+    {\n+      attr_name += 2;\n+      alen -= 4;\n+    }\n+  if (alen != slen || strncmp (tattr_name, attr_name, alen) != 0)\n+    return false;\n+  return true;\n+}\n+\n /* Handle a \"format\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n tree\n@@ -2762,7 +2859,10 @@ handle_format_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n \t}\n     }\n \n-  if (info.format_type == strftime_format_type && info.first_arg_num != 0)\n+  /* Check if this is a strftime variant. Just for this variant\n+     FMT_FLAG_ARG_CONVERT is not set.  */\n+  if ((format_types[info.format_type].flags & (int) FMT_FLAG_ARG_CONVERT) == 0\n+      && info.first_arg_num != 0)\n     {\n       error (\"strftime formats cannot format arguments\");\n       *no_add_attrs = true;"}, {"sha": "6f74354c55572ce8339073d9d48eb5e3941020e7", "filename": "gcc/c-format.h", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Fc-format.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Fc-format.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.h?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -80,12 +80,13 @@ enum\n      of whether length modifiers can occur (length_char_specs).  */\n };\n \n-\n /* Structure describing a length modifier supported in format checking, and\n    possibly a doubled version such as \"hh\".  */\n typedef struct\n {\n-  /* Name of the single-character length modifier.  */\n+  /* Name of the single-character length modifier. If prefixed by\n+     a zero character, it describes a multi character length\n+     modifier, like I64, I32, etc.  */\n   const char *name;\n   /* Index into a format_char_info.types array.  */\n   enum format_lengths index;\n@@ -306,4 +307,16 @@ typedef struct\n #define T_D128  &dfloat128_type_node\n #define TEX_D128 { STD_EXT, \"_Decimal128\", T_D128 }\n \n+/* Structure describing how format attributes such as \"printf\" are\n+   interpreted as \"gnu_printf\" or \"ms_printf\" on a particular system.\n+   TARGET_OVERRIDES_FORMAT_ATTRIBUTES is used to specify target-specific\n+   defaults.  */\n+typedef struct\n+{\n+  /* The name of the to be copied format attribute. */\n+  const char *named_attr_src;\n+  /* The name of the to be overridden format attribute. */\n+  const char *named_attr_dst;\n+} target_ovr_attr;\n+\n #endif /* GCC_C_FORMAT_H */"}, {"sha": "fbb54e2d5b39d858a8a652d8c461098fab90e601", "filename": "gcc/config.gcc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -1372,8 +1372,8 @@ i[34567]86-*-pe | i[34567]86-*-cygwin*)\n \ttarget_gtfiles=\"\\$(srcdir)/config/i386/winnt.c\"\n \textra_options=\"${extra_options} i386/cygming.opt\"\n \textra_objs=\"winnt.o winnt-stubs.o\"\n-\tc_target_objs=cygwin2.o\n-\tcxx_target_objs=\"cygwin2.o winnt-cxx.o\"\n+\tc_target_objs=\"cygwin2.o msformat-c.o\"\n+\tcxx_target_objs=\"cygwin2.o winnt-cxx.o msformat-c.o\"\n \textra_gcc_objs=cygwin1.o\n \tif test x$enable_threads = xyes; then\n \t\tthread_file='posix'\n@@ -1386,7 +1386,8 @@ i[34567]86-*-mingw32* | x86_64-*-mingw32*)\n \ttarget_gtfiles=\"\\$(srcdir)/config/i386/winnt.c\"\n \textra_options=\"${extra_options} i386/cygming.opt\"\n \textra_objs=\"winnt.o winnt-stubs.o\"\n-\tcxx_target_objs=winnt-cxx.o\n+\tc_target_objs=\"msformat-c.o\"\n+\tcxx_target_objs=\"winnt-cxx.o msformat-c.o\"\n \tdefault_use_cxa_atexit=yes\n \tcase ${enable_threads} in\n \t  \"\" | yes | win32)"}, {"sha": "890a09674dd82fa419448a204146f56487e4fad6", "filename": "gcc/config/i386/mingw32.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Fconfig%2Fi386%2Fmingw32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Fconfig%2Fi386%2Fmingw32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmingw32.h?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -143,6 +143,23 @@ do {\t\t\t\t\t\t         \\\n    to register C++ static destructors.  */\n #define TARGET_CXX_USE_ATEXIT_FOR_CXA_ATEXIT hook_bool_void_true\n \n+/* Contains a pointer to type target_ovr_attr defining the target specific\n+   overrides of format attributes.  See c-format.h for structure\n+   definition.  */\n+#undef TARGET_OVERRIDES_FORMAT_ATTRIBUTES\n+#define TARGET_OVERRIDES_FORMAT_ATTRIBUTES mingw_format_attribute_overrides\n+\n+/* Specify the count of elements in TARGET_OVERRIDES_ATTRIBUTE.  */\n+#undef TARGET_OVERRIDES_FORMAT_ATTRIBUTES_COUNT\n+#define TARGET_OVERRIDES_FORMAT_ATTRIBUTES_COUNT 3\n+\n+/* MS specific format attributes for ms_printf, ms_scanf, ms_strftime.  */\n+#undef TARGET_FORMAT_TYPES\n+#define TARGET_FORMAT_TYPES mingw_format_attributes\n+\n+#undef TARGET_N_FORMAT_TYPES\n+#define TARGET_N_FORMAT_TYPES 3\n+\n /* JCR_SECTION works on mingw32.  */\n #undef TARGET_USE_JCR_SECTION\n #define TARGET_USE_JCR_SECTION 1"}, {"sha": "821be470b8ede9df5a2b7df14192e072bac5907b", "filename": "gcc/config/i386/msformat-c.c", "status": "added", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Fconfig%2Fi386%2Fmsformat-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Fconfig%2Fi386%2Fmsformat-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmsformat-c.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,175 @@\n+/* Check calls to formatted I/O functions (-Wformat).\n+   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n+   2001, 2002, 2003, 2004, 2005, 2007 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"tree.h\"\n+#include \"flags.h\"\n+#include \"c-common.h\"\n+#include \"toplev.h\"\n+#include \"intl.h\"\n+#include \"diagnostic.h\"\n+#include \"langhooks.h\"\n+#include \"c-format.h\"\n+#include \"alloc-pool.h\"\n+\n+/* Mingw specific format attributes ms_printf, ms_scanf, and ms_strftime.  */\n+\n+static const format_length_info ms_printf_length_specs[] =\n+{\n+  { \"h\", FMT_LEN_h, STD_C89, NULL, 0, 0 },\n+  { \"l\", FMT_LEN_l, STD_C89, NULL, 0, 0 },\n+  { \"\\0I32\", FMT_LEN_l, STD_EXT, NULL, 0, 0 },\n+  { \"\\0I64\", FMT_LEN_ll, STD_EXT, NULL, 0, 0 },\n+  { \"I\", FMT_LEN_L, STD_EXT, NULL, 0, 0 },\n+  { NULL, 0, 0, NULL, 0, 0 }\n+};\n+\n+static const format_flag_spec ms_printf_flag_specs[] =\n+{\n+  { ' ',  0, 0, N_(\"' ' flag\"),        N_(\"the ' ' printf flag\"),              STD_C89 },\n+  { '+',  0, 0, N_(\"'+' flag\"),        N_(\"the '+' printf flag\"),              STD_C89 },\n+  { '#',  0, 0, N_(\"'#' flag\"),        N_(\"the '#' printf flag\"),              STD_C89 },\n+  { '0',  0, 0, N_(\"'0' flag\"),        N_(\"the '0' printf flag\"),              STD_C89 },\n+  { '-',  0, 0, N_(\"'-' flag\"),        N_(\"the '-' printf flag\"),              STD_C89 },\n+  { '\\'', 0, 0, N_(\"''' flag\"),        N_(\"the ''' printf flag\"),              STD_EXT },\n+  { 'w',  0, 0, N_(\"field width\"),     N_(\"field width in printf format\"),     STD_C89 },\n+  { 'p',  0, 0, N_(\"precision\"),       N_(\"precision in printf format\"),       STD_C89 },\n+  { 'L',  0, 0, N_(\"length modifier\"), N_(\"length modifier in printf format\"), STD_C89 },\n+  { 0, 0, 0, NULL, NULL, 0 }\n+};\n+\n+static const format_flag_pair ms_printf_flag_pairs[] =\n+{\n+  { ' ', '+', 1, 0   },\n+  { '0', '-', 1, 0   }, { '0', 'p', 1, 'i' },\n+  { 0, 0, 0, 0 }\n+};\n+\n+static const format_flag_spec ms_scanf_flag_specs[] =\n+{\n+  { '*',  0, 0, N_(\"assignment suppression\"), N_(\"the assignment suppression scanf feature\"), STD_C89 },\n+  { 'a',  0, 0, N_(\"'a' flag\"),               N_(\"the 'a' scanf flag\"),                       STD_EXT },\n+  { 'w',  0, 0, N_(\"field width\"),            N_(\"field width in scanf format\"),              STD_C89 },\n+  { 'L',  0, 0, N_(\"length modifier\"),        N_(\"length modifier in scanf format\"),          STD_C89 },\n+  { '\\'', 0, 0, N_(\"''' flag\"),               N_(\"the ''' scanf flag\"),                       STD_EXT },\n+  { 0, 0, 0, NULL, NULL, 0 }\n+};\n+\n+static const format_flag_pair ms_scanf_flag_pairs[] =\n+{\n+  { '*', 'L', 0, 0 },\n+  { 0, 0, 0, 0 }\n+};\n+\n+static const format_flag_spec ms_strftime_flag_specs[] =\n+{\n+  { '#', 0,   0, N_(\"'#' flag\"),     N_(\"the '#' strftime flag\"),          STD_EXT },\n+  { 0, 0, 0, NULL, NULL, 0 }\n+};\n+\n+static const format_flag_pair ms_strftime_flag_pairs[] =\n+{\n+  { 0, 0, 0, 0 }\n+};\n+\n+static const format_char_info ms_print_char_table[] =\n+{\n+  /* C89 conversion specifiers.  */\n+  { \"di\",  0, STD_C89, { T89_I,   BADLEN,  T89_S,   T89_L,   T9L_LL,  T99_SST,  BADLEN, BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-wp0 +'\",  \"i\",  NULL },\n+  { \"oxX\", 0, STD_C89, { T89_UI,  BADLEN,  T89_US,  T89_UL,  T9L_ULL, T99_ST, BADLEN, BADLEN, BADLEN, BADLEN,  BADLEN,  BADLEN }, \"-wp0#\",     \"i\",  NULL },\n+  { \"u\",   0, STD_C89, { T89_UI,  BADLEN,  T89_US,  T89_UL,  T9L_ULL, T99_ST, BADLEN, BADLEN, BADLEN, BADLEN,  BADLEN,  BADLEN }, \"-wp0'\",    \"i\",  NULL },\n+  { \"fgG\", 0, STD_C89, { T89_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN, BADLEN, BADLEN }, \"-wp0 +#'\", \"\",   NULL },\n+  { \"eE\",  0, STD_C89, { T89_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN, BADLEN, BADLEN }, \"-wp0 +#\",  \"\",   NULL },\n+  { \"c\",   0, STD_C89, { T89_I,   BADLEN,  T89_S,  T94_WI,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"-w\",        \"\",   NULL },\n+  { \"s\",   1, STD_C89, { T89_C,   BADLEN,  T89_S,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"-wp\",       \"cR\", NULL },\n+  { \"p\",   1, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"-w\",        \"c\",  NULL },\n+  { \"n\",   1, STD_C89, { T89_I,   BADLEN,  T89_S,   T89_L,   T9L_LL,  BADLEN,  BADLEN, BADLEN,  T99_IM,  BADLEN,  BADLEN,  BADLEN }, \"\",          \"W\",  NULL },\n+  /* X/Open conversion specifiers.  */\n+  { \"C\",   0, STD_EXT, { TEX_WI,  BADLEN,  T89_S,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"-w\",        \"\",   NULL },\n+  { \"S\",   1, STD_EXT, { TEX_W,   BADLEN,  T89_S,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"-wp\",       \"R\",  NULL },\n+  { NULL,  0, 0, NOLENGTHS, NULL, NULL, NULL }\n+};\n+\n+static const format_char_info ms_scan_char_table[] =\n+{\n+  /* C89 conversion specifiers.  */\n+  { \"di\",    1, STD_C89, { T89_I,   BADLEN,  T89_S,   T89_L,   T9L_LL,  T99_SST,  BADLEN, BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*w'\", \"W\",   NULL },\n+  { \"u\",     1, STD_C89, { T89_UI,  BADLEN,  T89_US,  T89_UL,  T9L_ULL, T99_ST, BADLEN,  BADLEN, BADLEN, BADLEN,  BADLEN,  BADLEN }, \"*w'\", \"W\",   NULL },\n+  { \"oxX\",   1, STD_C89, { T89_UI,  BADLEN,  T89_US,  T89_UL,  T9L_ULL, T99_ST, BADLEN,  BADLEN, BADLEN, BADLEN,  BADLEN,  BADLEN }, \"*w\",   \"W\",   NULL },\n+  { \"efgEG\", 1, STD_C89, { T89_F,   BADLEN,  BADLEN,  T89_D,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN, BADLEN, BADLEN }, \"*w'\",  \"W\",   NULL },\n+  { \"c\",     1, STD_C89, { T89_C,   BADLEN,  T89_S,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*w\",   \"cW\",  NULL },\n+  { \"s\",     1, STD_C89, { T89_C,   BADLEN,  T89_S,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*aw\",  \"cW\",  NULL },\n+  { \"[\",     1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*aw\",  \"cW[\", NULL },\n+  { \"p\",     2, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*w\",   \"W\",   NULL },\n+  { \"n\",     1, STD_C89, { T89_I,   BADLEN,  T89_S,   T89_L,   T9L_LL,  BADLEN,  BADLEN, BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"\",     \"W\",   NULL },\n+  /* X/Open conversion specifiers.  */\n+  { \"C\",     1, STD_EXT, { TEX_W,   BADLEN,  T89_S,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*w\",   \"W\",   NULL },\n+  { \"S\",     1, STD_EXT, { TEX_W,   BADLEN,  T89_S,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*aw\",  \"W\",   NULL },\n+  { NULL, 0, 0, NOLENGTHS, NULL, NULL, NULL }\n+};\n+\n+static const format_char_info ms_time_char_table[] =\n+{\n+  /* C89 conversion specifiers.  */\n+  { \"ABZab\",\t\t0, STD_C89, NOLENGTHS, \"#\",     \"\",   NULL },\n+  { \"cx\",\t\t0, STD_C89, NOLENGTHS, \"#\",      \"3\",  NULL },\n+  { \"HIMSUWdmw\",\t0, STD_C89, NOLENGTHS, \"#\",  \"\",   NULL },\n+  { \"j\",\t\t0, STD_C89, NOLENGTHS, \"#\",  \"\",  NULL },\n+  { \"p\",\t\t0, STD_C89, NOLENGTHS, \"#\",      \"\",   NULL },\n+  { \"X\",\t\t0, STD_C89, NOLENGTHS, \"#\",      \"\",   NULL },\n+  { \"y\",\t\t0, STD_C89, NOLENGTHS, \"#\", \"4\",  NULL },\n+  { \"Y\",\t\t0, STD_C89, NOLENGTHS, \"#\", \"\",  NULL },\n+  { \"%\",\t\t0, STD_C89, NOLENGTHS, \"\",       \"\",   NULL },\n+  /* C99 conversion specifiers.  */\n+  { \"z\",\t\t0, STD_C99, NOLENGTHS, \"#\",      \"\",  NULL },\n+  { NULL,\t\t0, 0, NOLENGTHS, NULL, NULL, NULL }\n+};\n+\n+const format_kind_info mingw_format_attributes[3] =\n+{\n+  { \"ms_printf\",   ms_printf_length_specs,  ms_print_char_table, \" +#0-'\", NULL,\n+    ms_printf_flag_specs, ms_printf_flag_pairs,\n+    FMT_FLAG_ARG_CONVERT|FMT_FLAG_DOLLAR_MULTIPLE|FMT_FLAG_USE_DOLLAR|FMT_FLAG_EMPTY_PREC_OK,\n+    'w', 0, 'p', 0, 'L', 0,\n+    &integer_type_node, &integer_type_node\n+  },\n+  { \"ms_scanf\",    ms_printf_length_specs,   ms_scan_char_table,  \"*'\", NULL,\n+    ms_scanf_flag_specs, ms_scanf_flag_pairs,\n+    FMT_FLAG_ARG_CONVERT|FMT_FLAG_SCANF_A_KLUDGE|FMT_FLAG_USE_DOLLAR|FMT_FLAG_ZERO_WIDTH_BAD|FMT_FLAG_DOLLAR_GAP_POINTER_OK,\n+    'w', 0, 0, '*', 'L', 0,\n+    NULL, NULL\n+  },\n+  { \"ms_strftime\", NULL,                 ms_time_char_table,  \"\", \"#\",\n+    ms_strftime_flag_specs, ms_strftime_flag_pairs,\n+    FMT_FLAG_FANCY_PERCENT_OK, 0, 0, 0, 0, 0, 0,\n+    NULL, NULL\n+  }\n+};\n+\n+/* Default overrides for printf, scanf and strftime.  */\n+const target_ovr_attr mingw_format_attribute_overrides[4] =\n+{\n+  { \"ms_printf\", \"printf\" },\n+  { \"ms_scanf\", \"scanf\" },\n+  { \"ms_strftime\", \"strftime\" }\n+};"}, {"sha": "b2c50df01fa276cd889a8d6bd4c6637490033a6e", "filename": "gcc/config/i386/t-cygming", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Fconfig%2Fi386%2Ft-cygming", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Fconfig%2Fi386%2Ft-cygming", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-cygming?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -29,4 +29,10 @@ winnt-stubs.o: $(srcdir)/config/i386/winnt-stubs.c $(CONFIG_H) $(SYSTEM_H) coret\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t$(srcdir)/config/i386/winnt-stubs.c\n \n+msformat-c.o: $(srcdir)/config/i386/msformat-c.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n+  $(TM_H) $(RTL_H) $(REGS_H) hard-reg-set.h output.h $(TREE_H) flags.h \\\n+  $(TM_P_H) toplev.h $(HASHTAB_H) $(GGC_H)\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n+\t$(srcdir)/config/i386/msformat-c.c\n+\n STMP_FIXINC=stmp-fixinc"}, {"sha": "fd97c16d96fe6ffe6fda8bc373647c90b67e57f2", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -2204,13 +2204,22 @@ for consistency with the @code{printf} style format string argument\n @code{my_format}.\n \n The parameter @var{archetype} determines how the format string is\n-interpreted, and should be @code{printf}, @code{scanf}, @code{strftime}\n-or @code{strfmon}.  (You can also use @code{__printf__},\n-@code{__scanf__}, @code{__strftime__} or @code{__strfmon__}.)  The\n-parameter @var{string-index} specifies which argument is the format\n-string argument (starting from 1), while @var{first-to-check} is the\n-number of the first argument to check against the format string.  For\n-functions where the arguments are not available to be checked (such as\n+interpreted, and should be @code{printf}, @code{scanf}, @code{strftime},\n+@code{gnu_printf}, @code{gnu_scanf}, @code{gnu_strftime} or\n+@code{strfmon}.  (You can also use @code{__printf__},\n+@code{__scanf__}, @code{__strftime__} or @code{__strfmon__}.)  On\n+MinGW targets, @code{ms_printf}, @code{ms_scanf}, and\n+@code{ms_strftime} are also present.\n+@var{archtype} values such as @code{printf} refer to the formats accepted\n+by the system's C run-time library, while @code{gnu_} values always refer\n+to the formats accepted by the GNU C Library.  On Microsoft Windows\n+targets, @code{ms_} values refer to the formats accepted by the\n+@file{msvcrt.dll} library.\n+The parameter @var{string-index}\n+specifies which argument is the format string argument (starting\n+from 1), while @var{first-to-check} is the number of the first\n+argument to check against the format string.  For functions\n+where the arguments are not available to be checked (such as\n @code{vprintf}), specify the third parameter as zero.  In this case the\n compiler only checks the format string for consistency.  For\n @code{strftime} formats, the third parameter is required to be zero."}, {"sha": "869bb1b6a0a472d97fb81d47174c29c275915b1f", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -10319,6 +10319,18 @@ If defined, this macro is the number of entries in\n @code{TARGET_FORMAT_TYPES}.\n @end defmac\n \n+@defmac TARGET_OVERRIDES_FORMAT_ATTRIBUTES\n+If defined, this macro is the name of a global variable containing\n+target-specific format overrides for the @option{-Wformat} option. The\n+default is to have no target-specific format overrides. If defined,\n+@code{TARGET_FORMAT_TYPES} must be defined, too.\n+@end defmac\n+\n+@defmac TARGET_OVERRIDES_FORMAT_ATTRIBUTES_COUNT\n+If defined, this macro specifies the number of entries in\n+@code{TARGET_OVERRIDES_FORMAT_ATTRIBUTES}.\n+@end defmac\n+\n @deftypefn {Target Hook} bool TARGET_RELAXED_ORDERING\n If set to @code{true}, means that the target's memory model does not\n guarantee that loads which do not depend on one another will access"}, {"sha": "cee836cc8a348a59f92d767b215f1ac430bee227", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -1,3 +1,77 @@\n+2008-03-20  Kai Tietz  <kai.tietz@onevision.com>\n+\n+\t* gcc.dg/format/ms_array-1.c: New.\n+\t* gcc.dg/format/ms_c90-scanf-3.c: New.\n+\t* gcc.dg/format/ms_c99-strftime-1.c: New.\n+\t* gcc.dg/format/ms_no-y2k-1.c: New.\n+\t* gcc.dg/format/ms_attr-1.c: New.\n+\t* gcc.dg/format/ms_c90-scanf-4.c: New.\n+\t* gcc.dg/format/ms_c99-strftime-2.c: New.\n+\t* gcc.dg/format/ms_nonlit-1.c: New.\n+\t* gcc.dg/format/ms_c90-scanf-5.c: New.\n+\t* gcc.dg/format/ms_cast-1.c: New.\n+\t* gcc.dg/format/ms_nonlit-2.c: New.\n+\t* gcc.dg/format/ms_attr-2.c: New.\n+\t* gcc.dg/format/ms_c90-strftime-1.c: New.\n+\t* gcc.dg/format/ms_miss-1.c: New.\n+\t* gcc.dg/format/ms_nonlit-3.c: New.\n+\t* gcc.dg/format/ms_attr-3.c: New.\n+\t* gcc.dg/format/ms_c90-strftime-2.c: New.\n+\t* gcc.dg/format/ms_miss-2.c: New.\n+\t* gcc.dg/format/ms_nul-1.c: New.\n+\t* gcc.dg/format/ms_attr-4.c: New.\n+\t* gcc.dg/format/ms_c94-printf-1.c: New.\n+\t* gcc.dg/format/ms_miss-3.c: New.\n+\t* gcc.dg/format/ms_nul-2.c: New.\n+\t* gcc.dg/format/ms_attr-7.c: New.\n+\t* gcc.dg/format/ms_c94-scanf-1.c: New.\n+\t* gcc.dg/format/ms_miss-4.c: New.\n+\t* gcc.dg/format/ms_null-1.c: New.\n+\t* gcc.dg/format/ms_bitfld-1.c: New.\n+\t* gcc.dg/format/ms_c99-printf-1.c: New.\n+\t* gcc.dg/format/ms_miss-5.c: New.\n+\t* gcc.dg/format/ms_plus-1.c: New.\n+\t* gcc.dg/format/ms_branch-1.c: New.\n+\t* gcc.dg/format/ms_c99-printf-2.c: New.\n+\t* gcc.dg/format/ms_miss-6.c: New.\n+\t* gcc.dg/format/ms_sec-1.c: New.\n+\t* gcc.dg/format/ms_c90-printf-1.c: New.\n+\t* gcc.dg/format/ms_c99-printf-3.c: New.\n+\t* gcc.dg/format/ms_multattr-1.c: New.\n+\t* gcc.dg/format/ms_unnamed-1.c: New.\n+\t* gcc.dg/format/ms_c90-printf-2.c: New.\n+\t* gcc.dg/format/ms_c99-scanf-1.c: New.\n+\t* gcc.dg/format/ms_multattr-2.c: New.\n+\t* gcc.dg/format/ms_va-1.c: New.\n+\t* gcc.dg/format/ms_c90-printf-3.c: New.\n+\t* gcc.dg/format/ms_c99-scanf-2.c: New.\n+\t* gcc.dg/format/ms_multattr-3.c: New.\n+\t* gcc.dg/format/ms_c90-scanf-1.c: New.\n+\t* gcc.dg/format/ms_c99-scanf-3.c: New.\n+\t* gcc.dg/format/ms_no-exargs-1.c: New.\n+\t* gcc.dg/format/ms_zero-length-1.c: New.\n+\t* gcc.dg/format/ms_c90-scanf-2.c: New.\n+\t* gcc.dg/format/ms_c99-scanf-4.c: New.\n+\t* gcc.dg/format/ms_no-exargs-2.c: New.\n+\t* gcc.dg/format/null-1.c: Add gnu style usage for mingw.\n+\t* gcc.dg/format/miss-1.c: Likewise.\n+\t* gcc.dg/format/miss-3.c: Likewise.\n+\t* gcc.dg/format/multattr-2.c: Likewise.\n+\t* gcc.dg/format/miss-5.c: Likewise.\n+\t* gcc.dg/format/attr-2.c: Likewise.\n+\t* gcc.dg/format/attr-4.c: Likewise.\n+\t* gcc.dg/format/c90-scanf-4.c: Likewise.\n+\t* gcc.dg/format/c99-printf-3.c: Likewise.\n+\t* gcc.dg/format/multattr-1.c: Likewise.\n+\t* gcc.dg/format/miss-4.c: Likewise.\n+\t* gcc.dg/format/miss-6.c: Likewise.\n+\t* gcc.dg/format/c90-printf-3.c: Likewise.\n+\t* gcc.dg/format/attr-1.c: Likewise.\n+\t* gcc.dg/format/attr-3.c: Likewise.\n+\t* gcc.dg/format/attr-7.c: Likewise.\n+\t* gcc.dg/format/format.h: Treat mingw and gnu style.\n+\t* gcc.dg/format/sys_format.c: New.\n+\n 2008-03-19  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libfortran/35627"}, {"sha": "8b2f5b7a3574cf392f3ea0e7b4b9bf49fb03fc06", "filename": "gcc/testsuite/gcc.dg/format/attr-1.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-1.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -3,7 +3,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99 -Wformat\" } */\n \n+#define DONT_GNU_PROTOTYPE\n #include \"format.h\"\n \n-extern void foo0 (const char *) __attribute__((__format__(__strftime__, 1, 0)));\n-extern void foo1 (const char *, ...) __attribute__((__format__(__strftime__, 1, 2))); /* { dg-error \"cannot format\" \"strftime first_arg_num != 0\" } */\n+extern void foo0 (const char *) __attribute__((__format__(gnu_attr___strftime__, 1, 0)));\n+extern void foo1 (const char *, ...) __attribute__((__format__(gnu_attr___strftime__, 1, 2))); /* { dg-error \"cannot format\" \"strftime first_arg_num != 0\" } */"}, {"sha": "f560ed06bb1c573a2d41acbe58fa59b82d756002", "filename": "gcc/testsuite/gcc.dg/format/attr-2.c", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-2.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -3,22 +3,23 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99 -Wformat\" } */\n \n+#define DONT_GNU_PROTOTYPE\n #include \"format.h\"\n \n-extern void tformatprintf (const char *, ...) __attribute__((format(printf, 1, 2)));\n-extern void tformat__printf__ (const char *, ...) __attribute__((format(__printf__, 1, 2)));\n-extern void tformatscanf (const char *, ...) __attribute__((format(scanf, 1, 2)));\n-extern void tformat__scanf__ (const char *, ...) __attribute__((format(__scanf__, 1, 2)));\n-extern void tformatstrftime (const char *) __attribute__((format(strftime, 1, 0)));\n-extern void tformat__strftime__ (const char *) __attribute__((format(__strftime__, 1, 0)));\n+extern void tformatprintf (const char *, ...) __attribute__((format(gnu_attr_printf, 1, 2)));\n+extern void tformat__printf__ (const char *, ...) __attribute__((format(gnu_attr___printf__, 1, 2)));\n+extern void tformatscanf (const char *, ...) __attribute__((format(gnu_attr_scanf, 1, 2)));\n+extern void tformat__scanf__ (const char *, ...) __attribute__((format(gnu_attr___scanf__, 1, 2)));\n+extern void tformatstrftime (const char *) __attribute__((format(gnu_attr_strftime, 1, 0)));\n+extern void tformat__strftime__ (const char *) __attribute__((format(gnu_attr___strftime__, 1, 0)));\n extern void tformatstrfmon (const char *, ...) __attribute__((format(strfmon, 1, 2)));\n extern void tformat__strfmon__ (const char *, ...) __attribute__((format(__strfmon__, 1, 2)));\n-extern void t__format__printf (const char *, ...) __attribute__((__format__(printf, 1, 2)));\n-extern void t__format____printf__ (const char *, ...) __attribute__((__format__(__printf__, 1, 2)));\n-extern void t__format__scanf (const char *, ...) __attribute__((__format__(scanf, 1, 2)));\n-extern void t__format____scanf__ (const char *, ...) __attribute__((__format__(__scanf__, 1, 2)));\n-extern void t__format__strftime (const char *) __attribute__((__format__(strftime, 1, 0)));\n-extern void t__format____strftime__ (const char *) __attribute__((__format__(__strftime__, 1, 0)));\n+extern void t__format__printf (const char *, ...) __attribute__((__format__(gnu_attr_printf, 1, 2)));\n+extern void t__format____printf__ (const char *, ...) __attribute__((__format__(gnu_attr___printf__, 1, 2)));\n+extern void t__format__scanf (const char *, ...) __attribute__((__format__(gnu_attr_scanf, 1, 2)));\n+extern void t__format____scanf__ (const char *, ...) __attribute__((__format__(gnu_attr___scanf__, 1, 2)));\n+extern void t__format__strftime (const char *) __attribute__((__format__(gnu_attr_strftime, 1, 0)));\n+extern void t__format____strftime__ (const char *) __attribute__((__format__(gnu_attr___strftime__, 1, 0)));\n extern void t__format__strfmon (const char *, ...) __attribute__((__format__(strfmon, 1, 2)));\n extern void t__format____strfmon__ (const char *, ...) __attribute__((__format__(__strfmon__, 1, 2)));\n "}, {"sha": "bee5ff4841b0d2202255d6d2d17967ce93f8ff2c", "filename": "gcc/testsuite/gcc.dg/format/attr-3.c", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-3.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -3,20 +3,21 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99 -Wformat\" } */\n \n+#define DONT_GNU_PROTOTYPE\n #include \"format.h\"\n \n /* Proper uses of the attributes.  */\n-extern void fa0 (const char *, ...) __attribute__((format(printf, 1, 2)));\n-extern void fa1 (char *, ...) __attribute__((format(printf, 1, 2)));\n+extern void fa0 (const char *, ...) __attribute__((format(gnu_attr_printf, 1, 2)));\n+extern void fa1 (char *, ...) __attribute__((format(gnu_attr_printf, 1, 2)));\n extern char *fa2 (const char *) __attribute__((format_arg(1)));\n extern char *fa3 (char *) __attribute__((format_arg(1)));\n \n /* Uses with too few or too many arguments.  */\n extern void fb0 (const char *, ...) __attribute__((format)); /* { dg-error \"wrong number of arguments\" \"bad format\" } */\n extern void fb1 (const char *, ...) __attribute__((format())); /* { dg-error \"wrong number of arguments\" \"bad format\" } */\n-extern void fb2 (const char *, ...) __attribute__((format(printf))); /* { dg-error \"wrong number of arguments\" \"bad format\" } */\n-extern void fb3 (const char *, ...) __attribute__((format(printf, 1))); /* { dg-error \"wrong number of arguments\" \"bad format\" } */\n-extern void fb4 (const char *, ...) __attribute__((format(printf, 1, 2, 3))); /* { dg-error \"wrong number of arguments\" \"bad format\" } */\n+extern void fb2 (const char *, ...) __attribute__((format(gnu_attr_printf))); /* { dg-error \"wrong number of arguments\" \"bad format\" } */\n+extern void fb3 (const char *, ...) __attribute__((format(gnu_attr_printf, 1))); /* { dg-error \"wrong number of arguments\" \"bad format\" } */\n+extern void fb4 (const char *, ...) __attribute__((format(gnu_attr_printf, 1, 2, 3))); /* { dg-error \"wrong number of arguments\" \"bad format\" } */\n \n extern void fc1 (const char *) __attribute__((format_arg)); /* { dg-error \"wrong number of arguments\" \"bad format_arg\" } */\n extern void fc2 (const char *) __attribute__((format_arg())); /* { dg-error \"wrong number of arguments\" \"bad format_arg\" } */\n@@ -25,9 +26,9 @@ extern void fc3 (const char *) __attribute__((format_arg(1, 2))); /* { dg-error\n /* These attributes presently only apply to declarations, not to types.\n    Eventually, they should be usable with declarators for function types\n    anywhere, but still not with structure/union/enum types.  */\n-struct s0 { int i; } __attribute__((format(printf, 1, 2))); /* { dg-error \"does not apply|only applies\" \"format on struct\" } */\n-union u0 { int i; } __attribute__((format(printf, 1, 2))); /* { dg-error \"does not apply|only applies\" \"format on union\" } */\n-enum e0 { E0V0 } __attribute__((format(printf, 1, 2))); /* { dg-error \"does not apply|only applies\" \"format on enum\" } */\n+struct s0 { int i; } __attribute__((format(gnu_attr_printf, 1, 2))); /* { dg-error \"does not apply|only applies\" \"format on struct\" } */\n+union u0 { int i; } __attribute__((format(gnu_attr_printf, 1, 2))); /* { dg-error \"does not apply|only applies\" \"format on union\" } */\n+enum e0 { E0V0 } __attribute__((format(gnu_attr_printf, 1, 2))); /* { dg-error \"does not apply|only applies\" \"format on enum\" } */\n \n struct s1 { int i; } __attribute__((format_arg(1))); /* { dg-error \"does not apply|only applies\" \"format_arg on struct\" } */\n union u1 { int i; } __attribute__((format_arg(1))); /* { dg-error \"does not apply|only applies\" \"format_arg on union\" } */\n@@ -38,28 +39,28 @@ extern void fe0 (const char *, ...) __attribute__((format(12345, 1, 2))); /* { d\n extern void fe1 (const char *, ...) __attribute__((format(nosuch, 1, 2))); /* { dg-warning \"format function type\" \"unknown format\" } */\n \n /* Both the numbers must be integer constant expressions.  */\n-extern void ff0 (const char *, ...) __attribute__((format(printf, 3-2, (long long)(10/5))));\n+extern void ff0 (const char *, ...) __attribute__((format(gnu_attr_printf, 3-2, (long long)(10/5))));\n int foo;\n-extern void ff1 (const char *, ...) __attribute__((format(printf, foo, 10/5))); /* { dg-error \"invalid operand\" \"bad number\" } */\n-extern void ff2 (const char *, ...) __attribute__((format(printf, 3-2, foo))); /* { dg-error \"invalid operand\" \"bad number\" } */\n+extern void ff1 (const char *, ...) __attribute__((format(gnu_attr_printf, foo, 10/5))); /* { dg-error \"invalid operand\" \"bad number\" } */\n+extern void ff2 (const char *, ...) __attribute__((format(gnu_attr_printf, 3-2, foo))); /* { dg-error \"invalid operand\" \"bad number\" } */\n extern char *ff3 (const char *) __attribute__((format_arg(3-2)));\n extern char *ff4 (const char *) __attribute__((format_arg(foo))); /* { dg-error \"invalid operand\" \"bad format_arg number\" } */\n \n /* The format string argument must precede the arguments to be formatted.\n    This includes if no parameter types are specified (which is not valid ISO\n    C for variadic functions).  */\n-extern void fg0 () __attribute__((format(printf, 1, 2)));\n-extern void fg1 () __attribute__((format(printf, 1, 0)));\n-extern void fg2 () __attribute__((format(printf, 1, 1))); /* { dg-error \"follows\" \"bad number order\" } */\n-extern void fg3 () __attribute__((format(printf, 2, 1))); /* { dg-error \"follows\" \"bad number order\" } */\n+extern void fg0 () __attribute__((format(gnu_attr_printf, 1, 2)));\n+extern void fg1 () __attribute__((format(gnu_attr_printf, 1, 0)));\n+extern void fg2 () __attribute__((format(gnu_attr_printf, 1, 1))); /* { dg-error \"follows\" \"bad number order\" } */\n+extern void fg3 () __attribute__((format(gnu_attr_printf, 2, 1))); /* { dg-error \"follows\" \"bad number order\" } */\n \n /* The format string argument must be a string type, and the arguments to\n    be formatted must be the \"...\".  */\n-extern void fh0 (int, ...) __attribute__((format(printf, 1, 2))); /* { dg-error \"not a string\" \"format int string\" } */\n-extern void fh1 (signed char *, ...) __attribute__((format(printf, 1, 2))); /* { dg-error \"not a string\" \"signed char string\" } */\n-extern void fh2 (unsigned char *, ...) __attribute__((format(printf, 1, 2))); /* { dg-error \"not a string\" \"unsigned char string\" } */\n-extern void fh3 (const char *, ...) __attribute__((format(printf, 1, 3))); /* { dg-error \"is not\" \"not ...\" } */\n-extern void fh4 (const char *, int, ...) __attribute__((format(printf, 1, 2))); /* { dg-error \"is not\" \"not ...\" } */\n+extern void fh0 (int, ...) __attribute__((format(gnu_attr_printf, 1, 2))); /* { dg-error \"not a string\" \"format int string\" } */\n+extern void fh1 (signed char *, ...) __attribute__((format(gnu_attr_printf, 1, 2))); /* { dg-error \"not a string\" \"signed char string\" } */\n+extern void fh2 (unsigned char *, ...) __attribute__((format(gnu_attr_printf, 1, 2))); /* { dg-error \"not a string\" \"unsigned char string\" } */\n+extern void fh3 (const char *, ...) __attribute__((format(gnu_attr_printf, 1, 3))); /* { dg-error \"is not\" \"not ...\" } */\n+extern void fh4 (const char *, int, ...) __attribute__((format(gnu_attr_printf, 1, 2))); /* { dg-error \"is not\" \"not ...\" } */\n \n /* format_arg formats must take and return a string.  */\n extern char *fi0 (int) __attribute__((format_arg(1))); /* { dg-error \"not a string\" \"format_arg int string\" } */"}, {"sha": "caeed93a7905009c7fc64d06386e69eb685a219c", "filename": "gcc/testsuite/gcc.dg/format/attr-4.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-4.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -4,12 +4,13 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99 -Wformat\" } */\n \n+#define DONT_GNU_PROTOTYPE\n #include \"format.h\"\n \n-extern __attribute__((format(printf, 1, 2))) void tformatprintf0 (const char *, ...);\n-extern void __attribute__((format(printf, 1, 2))) tformatprintf1 (const char *, ...);\n-extern void foo (void), __attribute__((format(printf, 1, 2))) tformatprintf2 (const char *, ...);\n-extern __attribute__((noreturn)) void bar (void), __attribute__((format(printf, 1, 2))) tformatprintf3 (const char *, ...);\n+extern __attribute__((format(gnu_attr_printf, 1, 2))) void tformatprintf0 (const char *, ...);\n+extern void __attribute__((format(gnu_attr_printf, 1, 2))) tformatprintf1 (const char *, ...);\n+extern void foo (void), __attribute__((format(gnu_attr_printf, 1, 2))) tformatprintf2 (const char *, ...);\n+extern __attribute__((noreturn)) void bar (void), __attribute__((format(gnu_attr_printf, 1, 2))) tformatprintf3 (const char *, ...);\n \n void\n baz (int i, int *ip, double d)"}, {"sha": "c370448193fb7a1b5fa8d4d8ef323cb6d3e5fa78", "filename": "gcc/testsuite/gcc.dg/format/attr-7.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-7.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -3,12 +3,13 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99 -Wformat\" } */\n \n+#define DONT_GNU_PROTOTYPE\n #include \"format.h\"\n \n-__attribute__((format(printf, 1, 2))) void (*tformatprintf0) (const char *, ...);\n-void (*tformatprintf1) (const char *, ...) __attribute__((format(printf, 1, 2)));\n-void (__attribute__((format(printf, 1, 2))) *tformatprintf2) (const char *, ...);\n-void (__attribute__((format(printf, 1, 2))) ****tformatprintf3) (const char *, ...);\n+__attribute__((format(gnu_attr_printf, 1, 2))) void (*tformatprintf0) (const char *, ...);\n+void (*tformatprintf1) (const char *, ...) __attribute__((format(gnu_attr_printf, 1, 2)));\n+void (__attribute__((format(gnu_attr_printf, 1, 2))) *tformatprintf2) (const char *, ...);\n+void (__attribute__((format(gnu_attr_printf, 1, 2))) ****tformatprintf3) (const char *, ...);\n \n char * (__attribute__((format_arg(1))) *tformat_arg) (const char *);\n "}, {"sha": "bf48f3114e0f1759cdccb23ef33fc71a50de8c43", "filename": "gcc/testsuite/gcc.dg/format/c90-printf-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-printf-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-printf-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-printf-3.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -3,7 +3,7 @@\n    do not.\n */\n /* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n-/* { dg-do compile } */\n+/* { dg-do compile { target { ! *-*-mingw* } } } */\n /* { dg-options \"-std=iso9899:1990 -pedantic -Wformat\" } */\n \n #include \"format.h\""}, {"sha": "0a47f3f35007a592647c269683b2cb7f494d2102", "filename": "gcc/testsuite/gcc.dg/format/c90-scanf-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-scanf-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-scanf-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-scanf-4.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -3,7 +3,7 @@\n    do not.\n */\n /* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n-/* { dg-do compile } */\n+/* { dg-do compile { target { ! *-*-mingw* } } } */\n /* { dg-options \"-std=iso9899:1990 -pedantic -Wformat\" } */\n \n #include \"format.h\""}, {"sha": "2407bb60391b9414f38e6b937c1ef410ab58239f", "filename": "gcc/testsuite/gcc.dg/format/c99-printf-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-printf-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-printf-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-printf-3.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -2,7 +2,7 @@\n    attributes in strict C99 mode, but the gettext functions do not.\n */\n /* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n-/* { dg-do compile } */\n+/* { dg-do compile { target { ! *-*-mingw* } } } */\n /* { dg-options \"-std=iso9899:1999 -pedantic -Wformat\" } */\n \n #include \"format.h\""}, {"sha": "a99927e3c64ce6dc4c054dc597d7ed8805e09222", "filename": "gcc/testsuite/gcc.dg/format/format.h", "status": "modified", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fformat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fformat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fformat.h?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -1,6 +1,37 @@\n /* Format checking tests: common header.  */\n /* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n \n+/* DONT_GNU_PROTOTYPE */\n+#if defined (_WIN32) && !defined (__CYGWIN__)\n+#if !defined (USE_SYSTEM_FORMATS)\n+#define gnu_attr_printf\tgnu_printf\n+#define gnu_attr___printf__ __gnu_printf__\n+#define gnu_attr_scanf\tgnu_scanf\n+#define gnu_attr___scanf__ __gnu_scanf__\n+#define gnu_attr_strftime gnu_strftime\n+#define gnu_attr___strftime__ __gnu_strftime__\n+#endif\n+#endif\n+\n+#ifndef gnu_attr_printf\n+#define gnu_attr_printf\tprintf\n+#define gnu_attr___printf__ __printf__\n+#define gnu_attr_scanf\tscanf\n+#define gnu_attr___scanf__ __scanf__\n+#define gnu_attr_strftime strftime\n+#define gnu_attr___strftime__ __strftime__\n+#endif\n+\n+#if !defined (USE_SYSTEM_FORMATS)\n+#define USE_PRINTF(FMTPOS, WILDARG) __attribute__((format(gnu_printf, FMTPOS, WILDARG))) __attribute__((nonnull (FMTPOS)))\n+#define USE_SCANF(FMTPOS, WILDARG) __attribute__((format(gnu_scanf, FMTPOS, WILDARG))) __attribute__((nonnull (FMTPOS)))\n+#define USE_STRFTIME(FMTPOS) __attribute__((__format__(gnu_strftime, FMTPOS, 0))) __attribute__((nonnull (FMTPOS)))\n+#else\n+#define USE_PRINTF(FMTPOS, WILDARG)\n+#define USE_SCANF(FMTPOS, WILDARG)\n+#define USE_STRFTIME(FMTPOS)\n+#endif\n+\n #include <stdarg.h>\n #include <stddef.h>\n \n@@ -11,6 +42,20 @@\n typedef __WINT_TYPE__ wint_t;\n #endif\n \n+#ifdef _WIN64\n+/* Kludges to get types corresponding to size_t and ptrdiff_t.  */\n+#define unsigned signed\n+typedef signed int signed_size_t __attribute__ ((mode (DI)));\n+/* We also use this type to approximate ssize_t.  */\n+typedef signed int ssize_t __attribute__ ((mode (DI)));\n+#undef unsigned\n+#define signed /* Type might or might not have explicit 'signed'.  */\n+typedef unsigned int unsigned_ptrdiff_t __attribute__ ((mode (DI)));\n+#undef signed\n+\n+__extension__ typedef int llong  __attribute__ ((mode (DI)));\n+__extension__ typedef unsigned int ullong  __attribute__ ((mode (DI)));\n+#else\n /* Kludges to get types corresponding to size_t and ptrdiff_t.  */\n #define unsigned signed\n typedef __SIZE_TYPE__ signed_size_t;\n@@ -23,6 +68,7 @@ typedef unsigned __PTRDIFF_TYPE__ unsigned_ptrdiff_t;\n \n __extension__ typedef long long int llong;\n __extension__ typedef unsigned long long int ullong;\n+#endif\n \n /* %q formats want a \"quad\"; GCC considers this to be a long long.  */\n typedef llong quad_t;\n@@ -70,3 +116,77 @@ extern size_t strftime (char *restrict, size_t, const char *restrict,\n \t\t\tconst struct tm *restrict);\n \n extern ssize_t strfmon (char *restrict, size_t, const char *restrict, ...);\n+\n+/* Mingw specific part.  */\n+#if !defined (USE_SYSTEM_FORMATS) && defined(_WIN32) && !defined(DONT_GNU_PROTOTYPE)\n+\n+extern USE_PRINTF(2,3) int fprintf_gnu (FILE *restrict, const char *restrict, ...);\n+#undef fprintf\n+#define fprintf fprintf_gnu\n+\n+extern USE_PRINTF(1,2) int printf_gnu (const char *restrict, ...);\n+#undef printf\n+#define printf printf_gnu\n+\n+extern USE_PRINTF(2,3) int fprintf_unlocked_gnu (FILE *restrict, const char *restrict, ...);\n+#undef fprintf_unlocked\n+#define fprintf_unlocked fprintf_unlocked_gnu\n+\n+extern USE_PRINTF(1,2)int printf_unlocked_gnu (const char *restrict, ...);\n+#undef printf_unlocked\n+#define printf_unlocked printf_unlocked_gnu\n+\n+extern USE_PRINTF(2,3) int sprintf_gnu (char *restrict, const char *restrict, ...);\n+#undef sprintf\n+#define sprintf sprintf_gnu\n+\n+extern USE_PRINTF(2,0) int vfprintf_gnu (FILE *restrict, const char *restrict, va_list);\n+#undef vsprintf\n+#define vsprintf vsprintf_gnu\n+\n+extern USE_PRINTF(1,0) int vprintf_gnu (const char *restrict, va_list);\n+#undef vprintf\n+#define vprintf vprintf_gnu\n+\n+extern USE_PRINTF(2,0) int vsprintf_gnu (char *restrict, const char *restrict, va_list);\n+#undef vsprintf\n+#define vsprintf vsprintf_gnu\n+\n+extern USE_PRINTF(3,4) int snprintf_gnu (char *restrict, size_t, const char *restrict, ...);\n+#undef snprintf\n+#define snprintf snprintf_gnu\n+\n+extern USE_PRINTF(3,0) int vsnprintf_gnu (char *restrict, size_t, const char *restrict, va_list);\n+#undef vsnprintf\n+#define vsnprintf vsnprintf_gnu\n+\n+extern USE_SCANF(2,3) int fscanf_gnu (FILE *restrict, const char *restrict, ...);\n+#undef fscanf\n+#define fscanf fscanf_gnu\n+\n+extern USE_SCANF(1,2) int scanf_gnu (const char *restrict, ...);\n+#undef scanf\n+#define scanf scanf_gnu\n+\n+extern USE_SCANF(2,3) int sscanf_gnu (const char *restrict, const char *restrict, ...);\n+#undef sscanf\n+#define sscanf sscanf_gnu\n+\n+extern USE_SCANF(2,0) int vfscanf_gnu (FILE *restrict, const char *restrict, va_list);\n+#undef vfscanf\n+#define vfscanf vfscanf_gnu\n+\n+extern USE_SCANF(1,0) int vscanf_gnu (const char *restrict, va_list);\n+#undef vscanf\n+#define vscanf vscanf_gnu\n+\n+extern USE_SCANF(2,0) int vsscanf_gnu (const char *restrict, const char *restrict, va_list);\n+#undef vsscanf\n+#define vsscanf vsscanf_gnu\n+\n+extern USE_STRFTIME(3) size_t strftime_gnu (char *restrict, size_t, const char *restrict,\n+\t\t\tconst struct tm *restrict);\n+#undef strftime\n+#define strftime strftime_gnu\n+\n+#endif"}, {"sha": "3d4b99124efb33ed2f077e5a43e26c9798db2495", "filename": "gcc/testsuite/gcc.dg/format/miss-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmiss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmiss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmiss-1.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -23,7 +23,7 @@ bar (const char *fmt, ...)\n   va_end (ap);\n }\n \n-__attribute__((__format__(__printf__, 1, 2))) void\n+__attribute__((__format__(gnu_attr___printf__, 1, 2))) void\n foo2 (const char *fmt, ...)\n {\n   va_list ap;"}, {"sha": "e9cf19d1f0aa15cb3f9f2927339929e61819b7ac", "filename": "gcc/testsuite/gcc.dg/format/miss-3.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmiss-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmiss-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmiss-3.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -3,13 +3,14 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99 -Wmissing-format-attribute\" } */\n \n+#define DONT_GNU_PROTOTYPE\n #include \"format.h\"\n \n typedef void (*noattr_t) (const char *, ...);\n-typedef noattr_t __attribute__ ((__format__(__printf__, 1, 2))) attr_t;\n+typedef noattr_t __attribute__ ((__format__(gnu_attr___printf__, 1, 2))) attr_t;\n \n typedef void (*vnoattr_t) (const char *, va_list);\n-typedef vnoattr_t __attribute__ ((__format__(__printf__, 1, 0))) vattr_t;\n+typedef vnoattr_t __attribute__ ((__format__(gnu_attr___printf__, 1, 0))) vattr_t;\n \n void\n foo1 (noattr_t na, attr_t a, vnoattr_t vna, vattr_t va)\n@@ -18,7 +19,7 @@ foo1 (noattr_t na, attr_t a, vnoattr_t vna, vattr_t va)\n   noattr_t na2 = a; /* { dg-warning \"candidate\" \"initialization warning\" } */\n   attr_t a1 = na;\n   attr_t a2 = a;\n-  \n+\n   vnoattr_t vna1 = vna;\n   vnoattr_t vna2 = va; /* { dg-warning \"candidate\" \"initialization warning\" } */\n   vattr_t va1 = vna;"}, {"sha": "f6cfd64cdbf08616eaaf58cfa406fa8a6f4e1364", "filename": "gcc/testsuite/gcc.dg/format/miss-4.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmiss-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmiss-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmiss-4.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -3,28 +3,29 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99 -Wmissing-format-attribute\" } */\n \n+#define DONT_GNU_PROTOTYPE\n #include \"format.h\"\n \n typedef void (*noattr_t) (const char *, ...);\n-typedef noattr_t __attribute__ ((__format__(__printf__, 1, 2))) attr_t;\n+typedef noattr_t __attribute__ ((__format__(gnu_attr___printf__, 1, 2))) attr_t;\n \n typedef void (*vnoattr_t) (const char *, va_list);\n-typedef vnoattr_t __attribute__ ((__format__(__printf__, 1, 0))) vattr_t;\n+typedef vnoattr_t __attribute__ ((__format__(gnu_attr___printf__, 1, 0))) vattr_t;\n \n void\n foo1 (noattr_t na, attr_t a, vnoattr_t vna, vattr_t va)\n {\n   noattr_t na1, na2;\n   attr_t a1, a2;\n-  \n+\n   vnoattr_t vna1, vna2;\n   vattr_t va1, va2;\n \n   na1 = na;\n   na2 = a; /* { dg-warning \"candidate\" \"assignment warning\" } */\n   a1 = na;\n   a2 = a;\n-  \n+\n   vna1 = vna;\n   vna2 = va; /* { dg-warning \"candidate\" \"assignment warning\" } */\n   va1 = vna;"}, {"sha": "1706e369b0299d3b5ee4f498a693d2674e66d1cf", "filename": "gcc/testsuite/gcc.dg/format/miss-5.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmiss-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmiss-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmiss-5.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -3,13 +3,14 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99 -Wmissing-format-attribute\" } */\n \n+#define DONT_GNU_PROTOTYPE\n #include \"format.h\"\n \n typedef void (*noattr_t) (const char *, ...);\n-typedef noattr_t __attribute__ ((__format__(__printf__, 1, 2))) attr_t;\n+typedef noattr_t __attribute__ ((__format__(gnu_attr___printf__, 1, 2))) attr_t;\n \n typedef void (*vnoattr_t) (const char *, va_list);\n-typedef vnoattr_t __attribute__ ((__format__(__printf__, 1, 0))) vattr_t;\n+typedef vnoattr_t __attribute__ ((__format__(gnu_attr___printf__, 1, 0))) vattr_t;\n \n noattr_t\n foo1 (noattr_t na, attr_t a, int i)"}, {"sha": "77e287465e8c4105bb2eb18f4ebfe722e6a28f3e", "filename": "gcc/testsuite/gcc.dg/format/miss-6.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmiss-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmiss-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmiss-6.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -3,13 +3,14 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99 -Wmissing-format-attribute\" } */\n \n+#define DONT_GNU_PROTOTYPE\n #include \"format.h\"\n \n typedef void (*noattr_t) (const char *, ...);\n-typedef noattr_t __attribute__ ((__format__(__printf__, 1, 2))) attr_t;\n+typedef noattr_t __attribute__ ((__format__(gnu_attr___printf__, 1, 2))) attr_t;\n \n typedef void (*vnoattr_t) (const char *, va_list);\n-typedef vnoattr_t __attribute__ ((__format__(__printf__, 1, 0))) vattr_t;\n+typedef vnoattr_t __attribute__ ((__format__(gnu_attr___printf__, 1, 0))) vattr_t;\n \n extern void foo1 (noattr_t);\n extern void foo2 (attr_t);\n@@ -23,7 +24,7 @@ foo (noattr_t na, attr_t a, vnoattr_t vna, vattr_t va)\n   foo1 (a); /* { dg-warning \"candidate\" \"parameter passing warning\" } */\n   foo2 (na);\n   foo2 (a);\n-  \n+\n   foo3 (vna);\n   foo3 (va); /* { dg-warning \"candidate\" \"parameter passing warning\" } */\n   foo4 (vna);"}, {"sha": "b34506830bb8490178eb1fa9836200e77a5a9a8d", "filename": "gcc/testsuite/gcc.dg/format/ms_array-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_array-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_array-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_array-1.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,42 @@\n+/* Test for format checking of constant arrays.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=gnu99 -Wformat=2\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+const char a1[] = \"foo\";\n+const char a2[] = \"foo%d\";\n+const char b1[3] = \"foo\";\n+const char b2[1] = \"1\";\n+static const char c1[] = \"foo\";\n+static const char c2[] = \"foo%d\";\n+char d[] = \"foo\";\n+volatile const char e[] = \"foo\";\n+\n+void\n+foo (int i, long l)\n+{\n+  const char p1[] = \"bar\";\n+  const char p2[] = \"bar%d\";\n+  static const char q1[] = \"bar\";\n+  static const char q2[] = \"bar%d\";\n+  printf (a1);\n+  printf (a2, i);\n+  printf (a2, l); /* { dg-warning \"format\" \"wrong type with array\" } */\n+  printf (b1); /* { dg-warning \"unterminated\" \"unterminated array\" } */\n+  printf (b2); /* { dg-warning \"unterminated\" \"unterminated array\" } */\n+  printf (c1);\n+  printf (c2, i);\n+  printf (c2, l); /* { dg-warning \"format\" \"wrong type with array\" } */\n+  printf (p1);\n+  printf (p2, i);\n+  printf (p2, l); /* { dg-warning \"format\" \"wrong type with array\" } */\n+  printf (q1);\n+  printf (q2, i);\n+  printf (q2, l); /* { dg-warning \"format\" \"wrong type with array\" } */\n+  /* Volatile or non-constant arrays must not be checked.  */\n+  printf (d); /* { dg-warning \"not a string literal\" \"non-const\" } */\n+  printf ((const char *)e); /* { dg-warning \"not a string literal\" \"volatile\" } */\n+}"}, {"sha": "90709bb1fb06be2216c315ce1ca5f707a046d550", "filename": "gcc/testsuite/gcc.dg/format/ms_attr-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_attr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_attr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_attr-1.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,10 @@\n+/* Test for strftime format attributes: can't have first_arg_num != 0.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=gnu99 -Wformat\" } */\n+\n+#define DONT_GNU_PROTOTYPE\n+#include \"format.h\"\n+\n+extern void foo0 (const char *) __attribute__((__format__(__ms_strftime__, 1, 0)));\n+extern void foo1 (const char *, ...) __attribute__((__format__(__ms_strftime__, 1, 2))); /* { dg-error \"cannot format\" \"strftime first_arg_num != 0\" } */"}, {"sha": "9a9ce0fe35565015b77ca6fbc8871c2d23c46712", "filename": "gcc/testsuite/gcc.dg/format/ms_attr-2.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_attr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_attr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_attr-2.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,68 @@\n+/* Test for format attributes: test use of __attribute__.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=gnu99 -Wformat\" } */\n+\n+#define DONT_GNU_PROTOTYPE\n+#include \"format.h\"\n+\n+extern void tformatprintf (const char *, ...) __attribute__((format(ms_printf, 1, 2)));\n+extern void tformat__printf__ (const char *, ...) __attribute__((format(__ms_printf__, 1, 2)));\n+extern void tformatscanf (const char *, ...) __attribute__((format(ms_scanf, 1, 2)));\n+extern void tformat__scanf__ (const char *, ...) __attribute__((format(__ms_scanf__, 1, 2)));\n+extern void tformatstrftime (const char *) __attribute__((format(ms_strftime, 1, 0)));\n+extern void tformat__strftime__ (const char *) __attribute__((format(__ms_strftime__, 1, 0)));\n+extern void tformatstrfmon (const char *, ...) __attribute__((format(strfmon, 1, 2)));\n+extern void tformat__strfmon__ (const char *, ...) __attribute__((format(__strfmon__, 1, 2)));\n+extern void t__format__printf (const char *, ...) __attribute__((__format__(ms_printf, 1, 2)));\n+extern void t__format____printf__ (const char *, ...) __attribute__((__format__(__ms_printf__, 1, 2)));\n+extern void t__format__scanf (const char *, ...) __attribute__((__format__(ms_scanf, 1, 2)));\n+extern void t__format____scanf__ (const char *, ...) __attribute__((__format__(__ms_scanf__, 1, 2)));\n+extern void t__format__strftime (const char *) __attribute__((__format__(ms_strftime, 1, 0)));\n+extern void t__format____strftime__ (const char *) __attribute__((__format__(__ms_strftime__, 1, 0)));\n+extern void t__format__strfmon (const char *, ...) __attribute__((__format__(strfmon, 1, 2)));\n+extern void t__format____strfmon__ (const char *, ...) __attribute__((__format__(__strfmon__, 1, 2)));\n+\n+extern char *tformat_arg (const char *) __attribute__((format_arg(1)));\n+extern char *t__format_arg__ (const char *) __attribute__((__format_arg__(1)));\n+\n+void\n+foo (int i, int *ip, double d)\n+{\n+  tformatprintf (\"%d\", i);\n+  tformatprintf (\"%\"); /* { dg-warning \"format\" \"attribute format printf\" } */\n+  tformat__printf__ (\"%d\", i);\n+  tformat__printf__ (\"%\"); /* { dg-warning \"format\" \"attribute format __printf__\" } */\n+  tformatscanf (\"%d\", ip);\n+  tformatscanf (\"%\"); /* { dg-warning \"format\" \"attribute format scanf\" } */\n+  tformat__scanf__ (\"%d\", ip);\n+  tformat__scanf__ (\"%\"); /* { dg-warning \"format\" \"attribute format __scanf__\" } */\n+  tformatstrftime (\"%a\");\n+  tformatstrftime (\"%\"); /* { dg-warning \"format\" \"attribute format strftime\" } */\n+  tformat__strftime__ (\"%a\");\n+  tformat__strftime__ (\"%\"); /* { dg-warning \"format\" \"attribute format __strftime__\" } */\n+  tformatstrfmon (\"%n\", d);\n+  tformatstrfmon (\"%\"); /* { dg-warning \"format\" \"attribute format strfmon\" } */\n+  tformat__strfmon__ (\"%n\", d);\n+  tformat__strfmon__ (\"%\"); /* { dg-warning \"format\" \"attribute format __strfmon__\" } */\n+  t__format__printf (\"%d\", i);\n+  t__format__printf (\"%\"); /* { dg-warning \"format\" \"attribute __format__ printf\" } */\n+  t__format____printf__ (\"%d\", i);\n+  t__format____printf__ (\"%\"); /* { dg-warning \"format\" \"attribute __format__ __printf__\" } */\n+  t__format__scanf (\"%d\", ip);\n+  t__format__scanf (\"%\"); /* { dg-warning \"format\" \"attribute __format__ scanf\" } */\n+  t__format____scanf__ (\"%d\", ip);\n+  t__format____scanf__ (\"%\"); /* { dg-warning \"format\" \"attribute __format__ __scanf__\" } */\n+  t__format__strftime (\"%a\");\n+  t__format__strftime (\"%\"); /* { dg-warning \"format\" \"attribute __format__ strftime\" } */\n+  t__format____strftime__ (\"%a\");\n+  t__format____strftime__ (\"%\"); /* { dg-warning \"format\" \"attribute __format__ __strftime__\" } */\n+  t__format__strfmon (\"%n\", d);\n+  t__format__strfmon (\"%\"); /* { dg-warning \"format\" \"attribute __format__ strfmon\" } */\n+  t__format____strfmon__ (\"%n\", d);\n+  t__format____strfmon__ (\"%\"); /* { dg-warning \"format\" \"attribute __format__ __strfmon__\" } */\n+  tformatprintf (tformat_arg (\"%d\"), i);\n+  tformatprintf (tformat_arg (\"%\")); /* { dg-warning \"format\" \"attribute format_arg\" } */\n+  tformatprintf (t__format_arg__ (\"%d\"), i);\n+  tformatprintf (t__format_arg__ (\"%\")); /* { dg-warning \"format\" \"attribute __format_arg__\" } */\n+}"}, {"sha": "5341dd8164b302b6a0391f254a3a5d4d8ca9039c", "filename": "gcc/testsuite/gcc.dg/format/ms_attr-3.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_attr-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_attr-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_attr-3.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,71 @@\n+/* Test for format attributes: test bad uses of __attribute__.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=gnu99 -Wformat\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+/* Proper uses of the attributes.  */\n+extern void fa0 (const char *, ...) __attribute__((format(ms_printf, 1, 2)));\n+extern void fa1 (char *, ...) __attribute__((format(ms_printf, 1, 2)));\n+extern char *fa2 (const char *) __attribute__((format_arg(1)));\n+extern char *fa3 (char *) __attribute__((format_arg(1)));\n+\n+/* Uses with too few or too many arguments.  */\n+extern void fb0 (const char *, ...) __attribute__((format)); /* { dg-error \"wrong number of arguments\" \"bad format\" } */\n+extern void fb1 (const char *, ...) __attribute__((format())); /* { dg-error \"wrong number of arguments\" \"bad format\" } */\n+extern void fb2 (const char *, ...) __attribute__((format(ms_printf))); /* { dg-error \"wrong number of arguments\" \"bad format\" } */\n+extern void fb3 (const char *, ...) __attribute__((format(ms_printf, 1))); /* { dg-error \"wrong number of arguments\" \"bad format\" } */\n+extern void fb4 (const char *, ...) __attribute__((format(ms_printf, 1, 2, 3))); /* { dg-error \"wrong number of arguments\" \"bad format\" } */\n+\n+extern void fc1 (const char *) __attribute__((format_arg)); /* { dg-error \"wrong number of arguments\" \"bad format_arg\" } */\n+extern void fc2 (const char *) __attribute__((format_arg())); /* { dg-error \"wrong number of arguments\" \"bad format_arg\" } */\n+extern void fc3 (const char *) __attribute__((format_arg(1, 2))); /* { dg-error \"wrong number of arguments\" \"bad format_arg\" } */\n+\n+/* These attributes presently only apply to declarations, not to types.\n+   Eventually, they should be usable with declarators for function types\n+   anywhere, but still not with structure/union/enum types.  */\n+struct s0 { int i; } __attribute__((format(ms_printf, 1, 2))); /* { dg-error \"does not apply|only applies\" \"format on struct\" } */\n+union u0 { int i; } __attribute__((format(ms_printf, 1, 2))); /* { dg-error \"does not apply|only applies\" \"format on union\" } */\n+enum e0 { E0V0 } __attribute__((format(ms_printf, 1, 2))); /* { dg-error \"does not apply|only applies\" \"format on enum\" } */\n+\n+struct s1 { int i; } __attribute__((format_arg(1))); /* { dg-error \"does not apply|only applies\" \"format_arg on struct\" } */\n+union u1 { int i; } __attribute__((format_arg(1))); /* { dg-error \"does not apply|only applies\" \"format_arg on union\" } */\n+enum e1 { E1V0 } __attribute__((format_arg(1))); /* { dg-error \"does not apply|only applies\" \"format_arg on enum\" } */\n+\n+/* The format type must be an identifier, one of those recognized.  */\n+extern void fe0 (const char *, ...) __attribute__((format(12345, 1, 2))); /* { dg-error \"format specifier\" \"non-id format\" } */\n+extern void fe1 (const char *, ...) __attribute__((format(nosuch, 1, 2))); /* { dg-warning \"format function type\" \"unknown format\" } */\n+\n+/* Both the numbers must be integer constant expressions.  */\n+extern void ff0 (const char *, ...) __attribute__((format(ms_printf, 3-2, (long long)(10/5))));\n+int foo;\n+extern void ff1 (const char *, ...) __attribute__((format(ms_printf, foo, 10/5))); /* { dg-error \"invalid operand\" \"bad number\" } */\n+extern void ff2 (const char *, ...) __attribute__((format(ms_printf, 3-2, foo))); /* { dg-error \"invalid operand\" \"bad number\" } */\n+extern char *ff3 (const char *) __attribute__((format_arg(3-2)));\n+extern char *ff4 (const char *) __attribute__((format_arg(foo))); /* { dg-error \"invalid operand\" \"bad format_arg number\" } */\n+\n+/* The format string argument must precede the arguments to be formatted.\n+   This includes if no parameter types are specified (which is not valid ISO\n+   C for variadic functions).  */\n+extern void fg0 () __attribute__((format(ms_printf, 1, 2)));\n+extern void fg1 () __attribute__((format(ms_printf, 1, 0)));\n+extern void fg2 () __attribute__((format(ms_printf, 1, 1))); /* { dg-error \"follows\" \"bad number order\" } */\n+extern void fg3 () __attribute__((format(ms_printf, 2, 1))); /* { dg-error \"follows\" \"bad number order\" } */\n+\n+/* The format string argument must be a string type, and the arguments to\n+   be formatted must be the \"...\".  */\n+extern void fh0 (int, ...) __attribute__((format(ms_printf, 1, 2))); /* { dg-error \"not a string\" \"format int string\" } */\n+extern void fh1 (signed char *, ...) __attribute__((format(ms_printf, 1, 2))); /* { dg-error \"not a string\" \"signed char string\" } */\n+extern void fh2 (unsigned char *, ...) __attribute__((format(ms_printf, 1, 2))); /* { dg-error \"not a string\" \"unsigned char string\" } */\n+extern void fh3 (const char *, ...) __attribute__((format(ms_printf, 1, 3))); /* { dg-error \"is not\" \"not ...\" } */\n+extern void fh4 (const char *, int, ...) __attribute__((format(ms_printf, 1, 2))); /* { dg-error \"is not\" \"not ...\" } */\n+\n+/* format_arg formats must take and return a string.  */\n+extern char *fi0 (int) __attribute__((format_arg(1))); /* { dg-error \"not a string\" \"format_arg int string\" } */\n+extern char *fi1 (signed char *) __attribute__((format_arg(1))); /* { dg-error \"not a string\" \"format_arg signed char string\" } */\n+extern char *fi2 (unsigned char *) __attribute__((format_arg(1))); /* { dg-error \"not a string\" \"format_arg unsigned char string\" } */\n+extern int fi3 (const char *) __attribute__((format_arg(1))); /* { dg-error \"not return string\" \"format_arg ret int string\" } */\n+extern signed char *fi4 (const char *) __attribute__((format_arg(1))); /* { dg-error \"not return string\" \"format_arg ret signed char string\" } */\n+extern unsigned char *fi5 (const char *) __attribute__((format_arg(1))); /* { dg-error \"not return string\" \"format_arg ret unsigned char string\" } */"}, {"sha": "45f09ef22782dbcff5d5b59b467b5ba4e71674df", "filename": "gcc/testsuite/gcc.dg/format/ms_attr-4.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_attr-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_attr-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_attr-4.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,26 @@\n+/* Test for format attributes: test use of __attribute__\n+   in prefix attributes.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=gnu99 -Wformat\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+extern __attribute__((format(ms_printf, 1, 2))) void tformatprintf0 (const char *, ...);\n+extern void __attribute__((format(ms_printf, 1, 2))) tformatprintf1 (const char *, ...);\n+extern void foo (void), __attribute__((format(ms_printf, 1, 2))) tformatprintf2 (const char *, ...);\n+extern __attribute__((noreturn)) void bar (void), __attribute__((format(ms_printf, 1, 2))) tformatprintf3 (const char *, ...);\n+\n+void\n+baz (int i, int *ip, double d)\n+{\n+  tformatprintf0 (\"%d\", i);\n+  tformatprintf0 (\"%\"); /* { dg-warning \"format\" \"attribute format printf case 0\" } */\n+  tformatprintf1 (\"%d\", i);\n+  tformatprintf1 (\"%\"); /* { dg-warning \"format\" \"attribute format printf case 1\" } */\n+  tformatprintf2 (\"%d\", i);\n+  tformatprintf2 (\"%\"); /* { dg-warning \"format\" \"attribute format printf case 2\" } */\n+  tformatprintf3 (\"%d\", i);\n+  tformatprintf3 (\"%\"); /* { dg-warning \"format\" \"attribute format printf case 3\" } */\n+}"}, {"sha": "b169e2c3ab51e6440309a78b4610551d32298a50", "filename": "gcc/testsuite/gcc.dg/format/ms_attr-7.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_attr-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_attr-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_attr-7.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,35 @@\n+/* Test for format attributes: test applying them to types.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=gnu99 -Wformat\" } */\n+\n+#define DONT_GNU_PROTOTYPE\n+#include \"format.h\"\n+\n+__attribute__((format(ms_printf, 1, 2))) void (*tformatprintf0) (const char *, ...);\n+void (*tformatprintf1) (const char *, ...) __attribute__((format(ms_printf, 1, 2)));\n+void (__attribute__((format(ms_printf, 1, 2))) *tformatprintf2) (const char *, ...);\n+void (__attribute__((format(ms_printf, 1, 2))) ****tformatprintf3) (const char *, ...);\n+\n+char * (__attribute__((format_arg(1))) *tformat_arg) (const char *);\n+\n+void\n+baz (int i)\n+{\n+  (*tformatprintf0) (\"%d\", i);\n+  (*tformatprintf0) ((*tformat_arg) (\"%d\"), i);\n+  (*tformatprintf0) (\"%\"); /* { dg-warning \"format\" \"prefix\" } */\n+  (*tformatprintf0) ((*tformat_arg) (\"%\")); /* { dg-warning \"format\" \"prefix\" } */\n+  (*tformatprintf1) (\"%d\", i);\n+  (*tformatprintf1) ((*tformat_arg) (\"%d\"), i);\n+  (*tformatprintf1) (\"%\"); /* { dg-warning \"format\" \"postfix\" } */\n+  (*tformatprintf1) ((*tformat_arg) (\"%\")); /* { dg-warning \"format\" \"postfix\" } */\n+  (*tformatprintf2) (\"%d\", i);\n+  (*tformatprintf2) ((*tformat_arg) (\"%d\"), i);\n+  (*tformatprintf2) (\"%\"); /* { dg-warning \"format\" \"nested\" } */\n+  (*tformatprintf2) ((*tformat_arg) (\"%\")); /* { dg-warning \"format\" \"nested\" } */\n+  (****tformatprintf3) (\"%d\", i);\n+  (****tformatprintf3) ((*tformat_arg) (\"%d\"), i);\n+  (****tformatprintf3) (\"%\"); /* { dg-warning \"format\" \"nested 2\" } */\n+  (****tformatprintf3) ((*tformat_arg) (\"%\")); /* { dg-warning \"format\" \"nested 2\" } */\n+}"}, {"sha": "83eb2fec625fe1e2e278eff4a578554f30a13a68", "filename": "gcc/testsuite/gcc.dg/format/ms_bitfld-1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_bitfld-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_bitfld-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_bitfld-1.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,52 @@\n+/* Test for printf formats and bit-fields: bug 22421.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=gnu99 -Wformat\" } */\n+/* { dg-require-effective-target int32plus } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+struct s {\n+  unsigned int u1 : 1;\n+  signed int s1 : 1;\n+  unsigned int u15 : 15;\n+  signed int s15 : 15;\n+  unsigned int u16 : 16;\n+  signed int s16 : 16;\n+  unsigned long u31 : 31;\n+  signed long s31 : 31;\n+  unsigned long u32 : 32;\n+  signed long s32 : 32;\n+  unsigned long long u48 : 48;\n+} x;\n+\n+void\n+foo (void)\n+{\n+  printf (\"%d%u\", x.u1, x.u1);\n+  printf (\"%d%u\", x.s1, x.s1);\n+  printf (\"%d%u\", x.u15, x.u15);\n+  printf (\"%d%u\", x.s15, x.s15);\n+  printf (\"%d%u\", x.u16, x.u16);\n+  printf (\"%d%u\", x.s16, x.s16);\n+#if __INT_MAX__ > 32767\n+  /* If integers are 16 bits, there doesn't seem to be a way of\n+     printing these without getting an error.  */\n+  printf (\"%d%u\", x.u31, x.u31);\n+  printf (\"%d%u\", x.s31, x.s31);\n+#endif\n+#if __LONG_MAX__ > 2147483647 && __INT_MAX__ >= 2147483647\n+  /* If long is wider than 32 bits, the 32-bit bit-fields are int or\n+     unsigned int or promote to those types.  Otherwise, long is 32\n+     bits and the bit-fields are of type plain long or unsigned\n+     long.  */\n+  printf (\"%d%u\", x.u32, x.u32);\n+  printf (\"%d%u\", x.s32, x.s32);\n+#else\n+  printf (\"%ld%lu\", x.u32, x.u32);\n+  printf (\"%ld%lu\", x.s32, x.s32);\n+#endif\n+  printf (\"%I64u\", x.u48); /* { dg-warning \"has type '.*unsigned int:48'\" } */\n+  printf (\"%I64u\", (unsigned long long)x.u48);\n+}"}, {"sha": "fe3f80e57d57427f16f86bd5408b9bf148f7729d", "filename": "gcc/testsuite/gcc.dg/format/ms_branch-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_branch-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_branch-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_branch-1.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,28 @@\n+/* Test for format checking of conditional expressions.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=gnu99 -Wformat\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+void\n+foo (long l, int nfoo)\n+{\n+  printf ((nfoo > 1) ? \"%d foos\" : \"%d foo\", nfoo);\n+  printf ((l > 1) ? \"%d foos\" : \"%d foo\", l); /* { dg-warning \"int\" \"wrong type in conditional expr\" } */\n+  printf ((l > 1) ? \"%ld foos\" : \"%d foo\", l); /* { dg-warning \"int\" \"wrong type in conditional expr\" } */\n+  printf ((l > 1) ? \"%d foos\" : \"%ld foo\", l); /* { dg-warning \"int\" \"wrong type in conditional expr\" } */\n+  /* Should allow one case to have extra arguments.  */\n+  printf ((nfoo > 1) ? \"%d foos\" : \"1 foo\", nfoo);\n+  printf ((nfoo > 1) ? \"many foos\" : \"1 foo\", nfoo); /* { dg-warning \"too many\" \"too many args in all branches\" } */\n+  printf ((nfoo > 1) ? \"%d foos\" : \"\", nfoo);\n+  printf ((nfoo > 1) ? \"%d foos\" : ((nfoo > 0) ? \"1 foo\" : \"no foos\"), nfoo);\n+  printf ((nfoo > 1) ? \"%d foos\" : ((nfoo > 0) ? \"%d foo\" : \"%d foos\"), nfoo);\n+  printf ((nfoo > 1) ? \"%d foos\" : ((nfoo > 0) ? \"%d foo\" : \"%ld foos\"), nfoo); /* { dg-warning \"long int\" \"wrong type\" } */\n+  printf ((nfoo > 1) ? \"%ld foos\" : ((nfoo > 0) ? \"%d foo\" : \"%d foos\"), nfoo); /* { dg-warning \"long int\" \"wrong type\" } */\n+  printf ((nfoo > 1) ? \"%d foos\" : ((nfoo > 0) ? \"%ld foo\" : \"%d foos\"), nfoo); /* { dg-warning \"long int\" \"wrong type\" } */\n+  /* Extra arguments to NULL should be complained about.  */\n+  printf (NULL, \"foo\"); /* { dg-warning \"too many\" \"NULL extra args\" } */\n+  /* { dg-warning \"null\" \"null format arg\" { target *-*-* } 26 } */\n+}"}, {"sha": "f99d4c49db91467d2bd6be44bae6d10cdc3be611", "filename": "gcc/testsuite/gcc.dg/format/ms_c90-printf-1.c", "status": "added", "additions": 184, "deletions": 0, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c90-printf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c90-printf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c90-printf-1.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,184 @@\n+/* Test for printf formats.  Formats using C90 features, including cases\n+   where C90 specifies some aspect of the format to be ignored or where\n+   the behavior is undefined.\n+*/\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic -Wformat\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+void\n+foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n+     int *n, short int *hn, long int l, unsigned long int ul,\n+     long int *ln, long double ld, wint_t lc, wchar_t *ls, llong ll,\n+     ullong ull, unsigned int *un, const int *cn, signed char *ss,\n+     unsigned char *us, const signed char *css, unsigned int u1,\n+     unsigned int u2)\n+{\n+  /* See ISO/IEC 9899:1990 (E) subclause 7.9.6.1 (pages 131-134).  */\n+  /* Basic sanity checks for the different components of a format.  */\n+  printf (\"%d\\n\", i);\n+  printf (\"%+d\\n\", i);\n+  printf (\"%3d\\n\", i);\n+  printf (\"%-3d\\n\", i);\n+  printf (\"%*d\\n\", i1, i);\n+  printf (\"%d %lu\\n\", i, ul);\n+  /* Bogus use of width.  */\n+  printf (\"%5n\\n\", n); /* { dg-warning \"width\" \"width with %n\" } */\n+  /* Valid and invalid %% constructions.  Some of the warning messages\n+     are non-optimal, but they do detect the errorneous nature of the\n+     format string.\n+  */\n+  printf (\"%%\");\n+  printf (\"%-%\"); /* { dg-warning \"format\" \"bogus %%\" } */\n+  printf (\"%-%\\n\"); /* { dg-warning \"format\" \"bogus %%\" } */\n+  printf (\"%5%\\n\"); /* { dg-warning \"format\" \"bogus %%\" } */\n+  printf (\"%h%\\n\"); /* { dg-warning \"format\" \"bogus %%\" } */\n+  /* Valid and invalid %h, %l, %L constructions.  */\n+  printf (\"%hd\", i);\n+  printf (\"%hi\", i);\n+  /* Strictly, these parameters should be int or unsigned int according to\n+     what unsigned short promotes to.  However, GCC ignores sign\n+     differences in format checking here, and this is relied on to get the\n+     correct checking without print_char_table needing to know whether\n+     int and short are the same size.\n+  */\n+  printf (\"%ho%hu%hx%hX\", u, u, u, u);\n+  printf (\"%hn\", hn);\n+  printf (\"%hf\", d); /* { dg-warning \"length\" \"bad use of %h\" } */\n+  printf (\"%he\", d); /* { dg-warning \"length\" \"bad use of %h\" } */\n+  printf (\"%hE\", d); /* { dg-warning \"length\" \"bad use of %h\" } */\n+  printf (\"%hg\", d); /* { dg-warning \"length\" \"bad use of %h\" } */\n+  printf (\"%hG\", d); /* { dg-warning \"length\" \"bad use of %h\" } */\n+  printf (\"%hc\", i);\n+  printf (\"%hs\", hn);\n+  printf (\"%hp\", p); /* { dg-warning \"length\" \"bad use of %h\" } */\n+  printf (\"%h\"); /* { dg-warning \"conversion lacks type\" \"bare %h\" } */\n+  printf (\"%ld%li%lo%lu%lx%lX\", l, l, ul, ul, ul, ul);\n+  printf (\"%ln\", ln);\n+  printf (\"%lf\", d); /* { dg-warning \"length|C\" \"bad use of %l\" } */\n+  printf (\"%le\", d); /* { dg-warning \"length|C\" \"bad use of %l\" } */\n+  printf (\"%lE\", d); /* { dg-warning \"length|C\" \"bad use of %l\" } */\n+  printf (\"%lg\", d); /* { dg-warning \"length|C\" \"bad use of %l\" } */\n+  printf (\"%lG\", d); /* { dg-warning \"length|C\" \"bad use of %l\" } */\n+  printf (\"%lp\", p); /* { dg-warning \"length|C\" \"bad use of %l\" } */\n+  /* These next two were added in C94, but should be objected to in C90.\n+     For the first one, GCC has wanted wchar_t instead of the correct C94\n+     and C99 wint_t.\n+  */\n+  printf (\"%lc\", lc); /* { dg-warning \"length|C\" \"C90 bad use of %l\" } */\n+  printf (\"%ls\", ls); /* { dg-warning \"length|C\" \"C90 bad use of %l\" } */\n+  /* Valid uses of each bare conversion.  */\n+  printf (\"%d%i%o%u%x%X%f%e%E%g%G%c%s%p%n%%\", i, i, u, u, u, u, d, d, d, d, d,\n+\t  i, s, p, n);\n+  /* Uses of the - flag (valid on all non-%, non-n conversions).  */\n+  printf (\"%-d%-i%-o%-u%-x%-X%-f%-e%-E%-g%-G%-c%-s%-p\", i, i, u, u, u, u,\n+\t  d, d, d, d, d, i, s, p);\n+  printf (\"%-n\", n); /* { dg-warning \"flag\" \"bad use of %-n\" } */\n+  /* Uses of the + flag (valid on signed conversions only).  */\n+  printf (\"%+d%+i%+f%+e%+E%+g%+G\\n\", i, i, d, d, d, d, d);\n+  printf (\"%+o\", u); /* { dg-warning \"flag\" \"bad use of + flag\" } */\n+  printf (\"%+u\", u); /* { dg-warning \"flag\" \"bad use of + flag\" } */\n+  printf (\"%+x\", u); /* { dg-warning \"flag\" \"bad use of + flag\" } */\n+  printf (\"%+X\", u); /* { dg-warning \"flag\" \"bad use of + flag\" } */\n+  printf (\"%+c\", i); /* { dg-warning \"flag\" \"bad use of + flag\" } */\n+  printf (\"%+s\", s); /* { dg-warning \"flag\" \"bad use of + flag\" } */\n+  printf (\"%+p\", p); /* { dg-warning \"flag\" \"bad use of + flag\" } */\n+  printf (\"%+n\", n); /* { dg-warning \"flag\" \"bad use of + flag\" } */\n+  /* Uses of the space flag (valid on signed conversions only, and ignored\n+     with +).\n+  */\n+  printf (\"% +d\", i); /* { dg-warning \"use of both|ignored\" \"use of space and + flags\" } */\n+  printf (\"%+ d\", i); /* { dg-warning \"use of both|ignored\" \"use of space and + flags\" } */\n+  printf (\"% d% i% f% e% E% g% G\\n\", i, i, d, d, d, d, d);\n+  printf (\"% o\", u); /* { dg-warning \"flag\" \"bad use of space flag\" } */\n+  printf (\"% u\", u); /* { dg-warning \"flag\" \"bad use of space flag\" } */\n+  printf (\"% x\", u); /* { dg-warning \"flag\" \"bad use of space flag\" } */\n+  printf (\"% X\", u); /* { dg-warning \"flag\" \"bad use of space flag\" } */\n+  printf (\"% c\", i); /* { dg-warning \"flag\" \"bad use of space flag\" } */\n+  printf (\"% s\", s); /* { dg-warning \"flag\" \"bad use of space flag\" } */\n+  printf (\"% p\", p); /* { dg-warning \"flag\" \"bad use of space flag\" } */\n+  printf (\"% n\", n); /* { dg-warning \"flag\" \"bad use of space flag\" } */\n+  /* Uses of the # flag.  */\n+  printf (\"%#o%#x%#X%#e%#E%#f%#g%#G\", u, u, u, d, d, d, d, d);\n+  printf (\"%#d\", i); /* { dg-warning \"flag\" \"bad use of # flag\" } */\n+  printf (\"%#i\", i); /* { dg-warning \"flag\" \"bad use of # flag\" } */\n+  printf (\"%#u\", u); /* { dg-warning \"flag\" \"bad use of # flag\" } */\n+  printf (\"%#c\", i); /* { dg-warning \"flag\" \"bad use of # flag\" } */\n+  printf (\"%#s\", s); /* { dg-warning \"flag\" \"bad use of # flag\" } */\n+  printf (\"%#p\", p); /* { dg-warning \"flag\" \"bad use of # flag\" } */\n+  printf (\"%#n\", n); /* { dg-warning \"flag\" \"bad use of # flag\" } */\n+  /* Uses of the 0 flag.  */\n+  printf (\"%08d%08i%08o%08u%08x%08X%08e%08E%08f%08g%08G\", i, i, u, u, u, u,\n+\t  d, d, d, d, d);\n+  printf (\"%0c\", i); /* { dg-warning \"flag\" \"bad use of 0 flag\" } */\n+  printf (\"%0s\", s); /* { dg-warning \"flag\" \"bad use of 0 flag\" } */\n+  printf (\"%0p\", p); /* { dg-warning \"flag\" \"bad use of 0 flag\" } */\n+  printf (\"%0n\", n); /* { dg-warning \"flag\" \"bad use of 0 flag\" } */\n+  /* 0 flag ignored with - flag.  */\n+  printf (\"%-08d\", i); /* { dg-warning \"flags|ignored\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08i\", i); /* { dg-warning \"flags|ignored\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08o\", u); /* { dg-warning \"flags|ignored\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08u\", u); /* { dg-warning \"flags|ignored\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08x\", u); /* { dg-warning \"flags|ignored\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08X\", u); /* { dg-warning \"flags|ignored\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08e\", d); /* { dg-warning \"flags|ignored\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08E\", d); /* { dg-warning \"flags|ignored\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08f\", d); /* { dg-warning \"flags|ignored\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08g\", d); /* { dg-warning \"flags|ignored\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08G\", d); /* { dg-warning \"flags|ignored\" \"0 flag ignored with - flag\" } */\n+  /* Various tests of bad argument types.  */\n+  printf (\"%d\", l); /* { dg-warning \"format\" \"bad argument types\" } */\n+  printf (\"%ld\", i); /* { dg-warning \"format\" \"bad argument types\" } */\n+  printf (\"%s\", n); /* { dg-warning \"format\" \"bad argument types\" } */\n+  printf (\"%p\", i); /* { dg-warning \"format\" \"bad argument types\" } */\n+  printf (\"%n\", p); /* { dg-warning \"format\" \"bad argument types\" } */\n+  /* With -pedantic, we want some further checks for pointer targets:\n+     %p should allow only pointers to void (possibly qualified) and\n+     to character types (possibly qualified), but not function pointers\n+     or pointers to other types.  (Whether, in fact, character types are\n+     allowed here is unclear; see thread on comp.std.c, July 2000 for\n+     discussion of the requirements of rules on identical representation,\n+     and of the application of the as if rule with the new va_arg\n+     allowances in C99 to printf.)  Likewise, we should warn if\n+     pointer targets differ in signedness, except in some circumstances\n+     for character pointers.  (In C99 we should consider warning for\n+     char * or unsigned char * being passed to %hhn, even if strictly\n+     legitimate by the standard.)\n+  */\n+  printf (\"%p\", foo); /* { dg-warning \"format\" \"bad argument types\" } */\n+  printf (\"%n\", un); /* { dg-warning \"format\" \"bad argument types\" } */\n+  printf (\"%p\", n); /* { dg-warning \"format\" \"bad argument types\" } */\n+  /* Allow character pointers with %p.  */\n+  printf (\"%p%p%p%p\", s, ss, us, css);\n+  /* %s allows any character type.  */\n+  printf (\"%s%s%s%s\", s, ss, us, css);\n+  /* Warning for void * arguments for %s is GCC's historical behavior,\n+     and seems useful to keep, even if some standard versions might be\n+     read to permit it.\n+  */\n+  printf (\"%s\", p); /* { dg-warning \"format\" \"bad argument types\" } */\n+  /* The historical behavior is to allow signed / unsigned types\n+     interchangably as arguments.  For values representable in both types,\n+     such usage may be correct.  For now preserve the behavior of GCC\n+     in such cases.\n+  */\n+  printf (\"%d\", u);\n+  /* Wrong number of arguments.  */\n+  printf (\"%d%d\", i); /* { dg-warning \"arguments\" \"wrong number of args\" } */\n+  printf (\"%d\", i, i); /* { dg-warning \"arguments\" \"wrong number of args\" } */\n+  /* Miscellaneous bogus constructions.  */\n+  printf (\"\"); /* { dg-warning \"zero-length\" \"warning for empty format\" } */\n+  printf (\"\\0\"); /* { dg-warning \"embedded\" \"warning for embedded NUL\" } */\n+  printf (\"%d\\0\", i); /* { dg-warning \"embedded\" \"warning for embedded NUL\" } */\n+  printf (\"%d\\0%d\", i, i); /* { dg-warning \"embedded|too many\" \"warning for embedded NUL\" } */\n+  printf (NULL); /* { dg-warning \"null\" \"null format string warning\" } */\n+  printf (\"%\"); /* { dg-warning \"trailing\" \"trailing % warning\" } */\n+  printf (\"%++d\", i); /* { dg-warning \"repeated\" \"repeated flag warning\" } */\n+  printf (\"%n\", cn); /* { dg-warning \"constant\" \"%n with const\" } */\n+  printf ((const char *)L\"foo\"); /* { dg-warning \"wide\" \"wide string\" } */\n+  printf (\"%n\", (int *)0); /* { dg-warning \"null\" \"%n with NULL\" } */\n+  printf (\"%s\", (char *)0); /* { dg-warning \"null\" \"%s with NULL\" } */\n+}"}, {"sha": "b5395588120da67774e0a090b13d6e2f911b5e17", "filename": "gcc/testsuite/gcc.dg/format/ms_c90-printf-2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c90-printf-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c90-printf-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c90-printf-2.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,25 @@\n+/* Test for printf formats.  Formats using C99 features should be rejected\n+   outside of C99 mode.\n+*/\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic -Wformat\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+void\n+foo (int i, double d, llong ll, intmax_t j, size_t z, ptrdiff_t t)\n+{\n+  /* Some tests already in c90-printf-1.c, e.g. %lf.  */\n+  /* The widths hh, ll, j, z, t are new.  */\n+  printf (\"%hhd\", i); /* { dg-warning \"unknown|format\" \"%hh is unsupported\" } */\n+  printf (\"%I64d\", ll); /* { dg-warning \"length|C\" \"%I64 in C90\" } */\n+  printf (\"%jd\", j); /* { dg-warning \"unknown|format\" \"%j is unsupported\" } */\n+  printf (\"%zu\", z); /* { dg-warning \"unknown|format\" \"%z is unsupported\" } */\n+  printf (\"%td\", t); /* { dg-warning \"unknown|format\" \"%t is unsupported\" } */\n+  /* The formats F, a, A are new.  */\n+  printf (\"%F\", d); /* { dg-warning \"unknown|format\" \"%F is unsupported\" } */\n+  printf (\"%a\", d); /* { dg-warning \"unknown|format\" \"%a is unsupported\" } */\n+  printf (\"%A\", d); /* { dg-warning \"unknown|format\" \"%A is unsupported\" } */\n+}"}, {"sha": "8e4b19a774e482f114421eef995620e21ee8e0d4", "filename": "gcc/testsuite/gcc.dg/format/ms_c90-printf-3.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c90-printf-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c90-printf-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c90-printf-3.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,43 @@\n+/* Test for printf formats.  Test that the C90 functions get their default\n+   attributes in strict C90 mode, but the C99 and gettext functions\n+   do not.\n+*/\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic -Wformat\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+void\n+foo (int i, char *s, size_t n, va_list v0, va_list v1, va_list v2, va_list v3,\n+     va_list v4, va_list v5, va_list v6, va_list v7, va_list v8)\n+{\n+  fprintf (stdout, \"%d\", i);\n+  fprintf (stdout, \"%ld\", i); /* { dg-warning \"format\" \"fprintf\" } */\n+  printf (\"%d\", i);\n+  printf (\"%ld\", i); /* { dg-warning \"format\" \"printf\" } */\n+  /* The \"unlocked\" functions shouldn't warn in c90 mode.  */\n+  fprintf_unlocked (stdout, \"%ld\", i);\n+  printf_unlocked (\"%ld\", i);\n+  sprintf (s, \"%d\", i);\n+  sprintf (s, \"%ld\", i); /* { dg-warning \"format\" \"sprintf\" } */\n+  vfprintf (stdout, \"%d\", v0);\n+  vfprintf (stdout, \"%Y\", v1); /* { dg-warning \"format\" \"vfprintf\" } */\n+  vprintf (\"%d\", v2);\n+  vprintf (\"%Y\", v3); /* { dg-warning \"format\" \"vprintf\" } */\n+  /* The following used to give a bogus warning.  */\n+  vprintf (\"%*.*d\", v8);   /* { dg-bogus \"format\" \"vprintf\" } */\n+  vsprintf (s, \"%d\", v4);\n+  vsprintf (s, \"%Y\", v5); /* { dg-warning \"format\" \"Y is invalid\" } */\n+  snprintf (s, n, \"%d\", i);\n+  snprintf (s, n, \"%ld\", i);\n+  vsnprintf (s, n, \"%d\", v6);\n+  vsnprintf (s, n, \"%Y\", v7);\n+  printf (gettext (\"%d\"), i);\n+  printf (gettext (\"%ld\"), i);\n+  printf (dgettext (\"\", \"%d\"), i);\n+  printf (dgettext (\"\", \"%ld\"), i);\n+  printf (dcgettext (\"\", \"%d\", 0), i);\n+  printf (dcgettext (\"\", \"%ld\", 0), i);\n+}"}, {"sha": "6e2cb10063bba13f53a37960aad6658276a02e0e", "filename": "gcc/testsuite/gcc.dg/format/ms_c90-scanf-1.c", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c90-scanf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c90-scanf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c90-scanf-1.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,119 @@\n+/* Test for scanf formats.  Formats using C90 features, including cases\n+   where C90 specifies some aspect of the format to be ignored or where\n+   the behavior is undefined.\n+*/\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic -Wformat\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+void\n+foo (int *ip, unsigned int *uip, short int *hp, unsigned short int *uhp,\n+     long int *lp, unsigned long int *ulp, float *fp, double *dp,\n+     long double *ldp, char *s, signed char *ss, unsigned char *us,\n+     void **pp, int *n, llong *llp, ullong *ullp, wchar_t *ls,\n+     const int *cip, const int *cn, const char *cs, const void **ppc,\n+     void *const *pcp, short int *hn, long int *ln, void *p, char **sp,\n+     volatile void *ppv)\n+{\n+  /* See ISO/IEC 9899:1990 (E) subclause 7.9.6.2 (pages 134-138).  */\n+  /* Basic sanity checks for the different components of a format.  */\n+  scanf (\"%d\", ip);\n+  scanf (\"%*d\");\n+  scanf (\"%3d\", ip);\n+  scanf (\"%hd\", hp);\n+  scanf (\"%3ld\", lp);\n+  scanf (\"%*3d\");\n+  scanf (\"%d %ld\", ip, lp);\n+  /* Valid and invalid %% constructions.  */\n+  scanf (\"%%\");\n+  scanf (\"%*%\"); /* { dg-warning \"format\" \"bogus %%\" } */\n+  scanf (\"%*%\\n\"); /* { dg-warning \"format\" \"bogus %%\" } */\n+  scanf (\"%4%\"); /* { dg-warning \"format\" \"bogus %%\" } */\n+  scanf (\"%4%\\n\"); /* { dg-warning \"format\" \"bogus %%\" } */\n+  scanf (\"%h%\"); /* { dg-warning \"format\" \"bogus %%\" } */\n+  scanf (\"%h%\\n\"); /* { dg-warning \"format\" \"bogus %%\" } */\n+  /* Valid, invalid and silly assignment-suppression constructions.  */\n+  scanf (\"%*d%*i%*o%*u%*x%*X%*e%*E%*f%*g%*G%*s%*[abc]%*c%*p\");\n+  scanf (\"%*2d%*8s%*3c\");\n+  scanf (\"%*n\", n); /* { dg-warning \"suppress\" \"suppression of %n\" } */\n+  scanf (\"%*hd\"); /* { dg-warning \"together\" \"suppression with length\" } */\n+  /* Valid, invalid and silly width constructions.  */\n+  scanf (\"%2d%3i%4o%5u%6x%7X%8e%9E%10f%11g%12G%13s%14[abc]%15c%16p\",\n+\t ip, ip, uip, uip, uip, uip, fp, fp, fp, fp, fp, s, s, s, pp);\n+  scanf (\"%0d\", ip); /* { dg-warning \"width\" \"warning for zero width\" } */\n+  scanf (\"%3n\", n); /* { dg-warning \"width\" \"width with %n\" } */\n+  /* Valid and invalid %h, %l, %L constructions.  */\n+  scanf (\"%hd%hi%ho%hu%hx%hX%hn\", hp, hp, uhp, uhp, uhp, uhp, hn);\n+  scanf (\"%he\", fp); /* { dg-warning \"length\" \"bad use of %h\" } */\n+  scanf (\"%hE\", fp); /* { dg-warning \"length\" \"bad use of %h\" } */\n+  scanf (\"%hf\", fp); /* { dg-warning \"length\" \"bad use of %h\" } */\n+  scanf (\"%hg\", fp); /* { dg-warning \"length\" \"bad use of %h\" } */\n+  scanf (\"%hG\", fp); /* { dg-warning \"length\" \"bad use of %h\" } */\n+  scanf (\"%hs\", hp);\n+  scanf (\"%h[ac]\", s); /* { dg-warning \"length\" \"bad use of %h\" } */\n+  scanf (\"%hc\", hp);\n+  scanf (\"%hp\", pp); /* { dg-warning \"length\" \"bad use of %h\" } */\n+  scanf (\"%h\"); /* { dg-warning \"conversion lacks type\" \"bare %h\" } */\n+  scanf (\"%h.\"); /* { dg-warning \"conversion\" \"bogus %h\" } */\n+  scanf (\"%ld%li%lo%lu%lx%lX%ln\", lp, lp, ulp, ulp, ulp, ulp, ln);\n+  scanf (\"%le%lE%lf%lg%lG\", dp, dp, dp, dp, dp);\n+  scanf (\"%lp\", pp); /* { dg-warning \"length\" \"bad use of %l\" } */\n+  /* These next three formats were added in C94.  */\n+  scanf (\"%ls\", ls); /* { dg-warning \"length|C\" \"bad use of %l\" } */\n+  scanf (\"%l[ac]\", ls); /* { dg-warning \"length|C\" \"bad use of %l\" } */\n+  scanf (\"%lc\", ls); /* { dg-warning \"length|C\" \"bad use of %l\" } */\n+  scanf (\"%Ld\", llp); /* { dg-warning \"unknown|format\" \"%L is unsupported\" } */\n+  scanf (\"%Li\", llp); /* { dg-warning \"unknown|format\" \"%L is unsupported\" } */\n+  scanf (\"%Lo\", ullp); /* { dg-warning \"unknown|format\" \"%L is unsupported\" } */\n+  scanf (\"%Lu\", ullp); /* { dg-warning \"unknown|format\" \"%L is unsupported\" } */\n+  scanf (\"%Lx\", ullp); /* { dg-warning \"unknown|format\" \"%L is unsupported\" } */\n+  scanf (\"%LX\", ullp); /* { dg-warning \"unknown|format\" \"%L is unsupported\" } */\n+  scanf (\"%Ls\", s); /* { dg-warning \"unknown|format\" \"%L is unsupported\" } */\n+  scanf (\"%L[ac]\", s); /* { dg-warning \"unknown|format\" \"%L is unsupported\" } */\n+  scanf (\"%Lc\", s); /* { dg-warning \"unknown|format\" \"%L is unsupported\" } */\n+  scanf (\"%Lp\", pp); /* { dg-warning \"unknown|format\" \"%L is unsupported\" } */\n+  scanf (\"%Ln\", n); /* { dg-warning \"unknown|format\" \"%L is unsupported\" } */\n+  /* Valid uses of each bare conversion.  */\n+  scanf (\"%d%i%o%u%x%X%e%E%f%g%G%s%[abc]%c%p%n%%\", ip, ip, uip, uip, uip,\n+\t uip, fp, fp, fp, fp, fp, s, s, s, pp, n);\n+  /* Allow other character pointers with %s, %c, %[].  */\n+  scanf (\"%2s%3s%4c%5c%6[abc]%7[abc]\", ss, us, ss, us, ss, us);\n+  /* Further tests for %[].  */\n+  scanf (\"%[%d]%d\", s, ip);\n+  scanf (\"%[^%d]%d\", s, ip);\n+  scanf (\"%[]%d]%d\", s, ip);\n+  scanf (\"%[^]%d]%d\", s, ip);\n+  scanf (\"%[%d]%d\", s, ip);\n+  scanf (\"%[]abcd\", s); /* { dg-warning \"no closing\" \"incomplete scanset\" } */\n+  /* Various tests of bad argument types.  Some of these are only pedantic\n+     warnings.\n+  */\n+  scanf (\"%d\", lp); /* { dg-warning \"format\" \"bad argument types\" } */\n+  scanf (\"%d\", uip); /* { dg-warning \"format\" \"bad argument types\" } */\n+  scanf (\"%d\", pp); /* { dg-warning \"format\" \"bad argument types\" } */\n+  scanf (\"%p\", ppc); /* { dg-warning \"format\" \"bad argument types\" } */\n+  scanf (\"%p\", ppv); /* { dg-warning \"format\" \"bad argument types\" } */\n+  scanf (\"%s\", n); /* { dg-warning \"format\" \"bad argument types\" } */\n+  scanf (\"%s\", p); /* { dg-warning \"format\" \"bad argument types\" } */\n+  scanf (\"%p\", p); /* { dg-warning \"format\" \"bad argument types\" } */\n+  scanf (\"%p\", sp); /* { dg-warning \"format\" \"bad argument types\" } */\n+  /* Tests for writing into constant values.  */\n+  scanf (\"%d\", cip); /* { dg-warning \"constant\" \"%d writing into const\" } */\n+  scanf (\"%n\", cn); /* { dg-warning \"constant\" \"%n writing into const\" } */\n+  scanf (\"%s\", cs); /* { dg-warning \"constant\" \"%s writing into const\" } */\n+  scanf (\"%p\", pcp); /* { dg-warning \"constant\" \"%p writing into const\" } */\n+  /* Wrong number of arguments.  */\n+  scanf (\"%d%d\", ip); /* { dg-warning \"arguments\" \"wrong number of args\" } */\n+  scanf (\"%d\", ip, ip); /* { dg-warning \"arguments\" \"wrong number of args\" } */\n+  /* Miscellaneous bogus constructions.  */\n+  scanf (\"\"); /* { dg-warning \"zero-length\" \"warning for empty format\" } */\n+  scanf (\"\\0\"); /* { dg-warning \"embedded\" \"warning for embedded NUL\" } */\n+  scanf (\"%d\\0\", ip); /* { dg-warning \"embedded\" \"warning for embedded NUL\" } */\n+  scanf (\"%d\\0%d\", ip, ip); /* { dg-warning \"embedded|too many\" \"warning for embedded NUL\" } */\n+  scanf (NULL); /* { dg-warning \"null\" \"null format string warning\" } */\n+  scanf (\"%\"); /* { dg-warning \"trailing\" \"trailing % warning\" } */\n+  scanf (\"%d\", (int *)0); /* { dg-warning \"null\" \"writing into NULL\" } */\n+}"}, {"sha": "b55122792abf912137c91d1cc52007c29de4f7b3", "filename": "gcc/testsuite/gcc.dg/format/ms_c90-scanf-2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c90-scanf-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c90-scanf-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c90-scanf-2.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,26 @@\n+/* Test for scanf formats.  Formats using C99 features should be rejected\n+   outside of C99 mode.\n+*/\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic -Wformat\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+void\n+foo (signed char *hhp, float *fp, llong *llp, intmax_t *jp,\n+     size_t *zp, ptrdiff_t *tp)\n+{\n+  /* Some tests already in c90-scanf-1.c.  */\n+  /* The widths hh, ll, j, z, t are new.  */\n+  scanf (\"%hhd\", hhp); /* { dg-warning \"unknown|format\" \"%hh is unsupported\" } */\n+  scanf (\"%I64d\", llp); /* { dg-warning \"length|C\" \"%I64 in C90\" } */\n+  scanf (\"%jd\", jp); /* { dg-warning \"unknown|format\" \"%j is unsupported\" } */\n+  scanf (\"%zu\", zp); /* { dg-warning \"unknown|format\" \"%z is unsupported\" } */\n+  scanf (\"%td\", tp); /* { dg-warning \"unknown|format\" \"%t is unsupported\" } */\n+  /* The formats F, a, A are new.  */\n+  scanf (\"%F\", fp); /* { dg-warning \"unknown|format\" \"%F is unsupported\" } */\n+  scanf (\"%a\", fp); /* { dg-warning \"unknown|format\" \"%a is unsupported\" } */\n+  scanf (\"%A\", fp); /* { dg-warning \"unknown|format\" \"%A is unsupported\" } */\n+}"}, {"sha": "b9d3e38bc008a08a93394a09bc5e1a5722251da9", "filename": "gcc/testsuite/gcc.dg/format/ms_c90-scanf-3.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c90-scanf-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c90-scanf-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c90-scanf-3.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,20 @@\n+/* Test for scanf formats.  Formats using extensions to the standard\n+   should be rejected in strict pedantic mode.\n+*/\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic -Wformat\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+void\n+foo (char **sp, wchar_t **lsp)\n+{\n+  /* %a formats for allocation, only recognized in C90 mode, are a\n+     GNU extension.\n+  */\n+  scanf (\"%as\", sp); /* { dg-warning \"flag\" \"%as is unsupported\" } */\n+  scanf (\"%aS\", lsp); /* { dg-warning \"format|flag\" \"%aS is unsupported\" } */\n+  scanf (\"%a[bcd]\", sp); /* { dg-warning \"flag\" \"%a[] is unsupported\" } */\n+}"}, {"sha": "4b1fda7cafb092df2972a57c7fa0c51766bb549d", "filename": "gcc/testsuite/gcc.dg/format/ms_c90-scanf-4.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c90-scanf-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c90-scanf-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c90-scanf-4.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,31 @@\n+/* Test for scanf formats.  Test that the C90 functions get their default\n+   attributes in strict C90 mode, but the C99 and gettext functions\n+   do not.\n+*/\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic -Wformat\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+void\n+foo (int *ip, char *s, va_list v0, va_list v1, va_list v2, va_list v3,\n+     va_list v4, va_list v5)\n+{\n+  fscanf (stdin, \"%d\", ip);\n+  fscanf (stdin, \"%ld\", ip); /* { dg-warning \"format\" \"fscanf\" } */\n+  scanf (\"%d\", ip);\n+  scanf (\"%ld\", ip); /* { dg-warning \"format\" \"scanf\" } */\n+  sscanf (s, \"%d\", ip);\n+  sscanf (s, \"%ld\", ip); /* { dg-warning \"format\" \"sscanf\" } */\n+  vfscanf (stdin, \"%d\", v0);\n+  vscanf (\"%d\", v2);\n+  vsscanf (s, \"%d\", v4);\n+  scanf (gettext (\"%d\"), ip);\n+  scanf (gettext (\"%ld\"), ip);\n+  scanf (dgettext (\"\", \"%d\"), ip);\n+  scanf (dgettext (\"\", \"%ld\"), ip);\n+  scanf (dcgettext (\"\", \"%d\", 0), ip);\n+  scanf (dcgettext (\"\", \"%ld\", 0), ip);\n+}"}, {"sha": "c714689e06f6259fc2a6821d5cd54046ca3b1833", "filename": "gcc/testsuite/gcc.dg/format/ms_c90-scanf-5.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c90-scanf-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c90-scanf-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c90-scanf-5.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,20 @@\n+/* Test for scanf formats.  Formats using extensions to the standard\n+   should be rejected in strict pedantic mode.\n+*/\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic -Wformat\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+void\n+foo (char **sp, wchar_t **lsp)\n+{\n+  /* m assignment-allocation modifier, recognized in both C90\n+     and C99 modes, is a POSIX and ISO/IEC WDTR 24731-2 extension.  */\n+  scanf (\"%ms\", sp); /* { dg-warning \"unknown|format\" \"%ms is unsupported\" } */\n+  scanf (\"%mS\", lsp); /* { dg-warning \"unknown|format\" \"%mS is unsupported\" } */\n+  scanf (\"%mls\", lsp); /* { dg-warning \"unknown|format\" \"%mls is unsupported\" } */\n+  scanf (\"%m[bcd]\", sp); /* { dg-warning \"unknown|format\" \"%m[] is unsupported\" } */\n+  scanf (\"%ml[bcd]\", lsp); /* { dg-warning \"unknown|format\" \"%ml[] is unsupported\" } */\n+}"}, {"sha": "34143c1b2144096b14626a620f95b972f1510a57", "filename": "gcc/testsuite/gcc.dg/format/ms_c90-strftime-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c90-strftime-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c90-strftime-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c90-strftime-1.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,20 @@\n+/* Test for strftime formats.  Formats using C90 features.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic -Wformat -Wformat-y2k\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+void\n+foo (char *s, size_t m, const struct tm *tp)\n+{\n+  /* See ISO/IEC 9899:1990 (E) subclause 7.12.3.5 (pages 174-175).  */\n+  /* Formats which are Y2K-compliant (no 2-digit years).  */\n+  strftime (s, m, \"%a%A%b%B%d%H%I%j%m%M%p%S%U%w%W%X%Y%Z%%\", tp);\n+  /* Formats with 2-digit years.  */\n+  strftime (s, m, \"%y\", tp); /* { dg-warning \"only last 2\" \"2-digit year\" } */\n+  /* Formats with 2-digit years in some locales.  */\n+  strftime (s, m, \"%c\", tp); /* { dg-warning \"some locales\" \"2-digit year\" } */\n+  strftime (s, m, \"%x\", tp); /* { dg-warning \"some locales\" \"2-digit year\" } */\n+}"}, {"sha": "446f235336b03b6994fb08d492d8fe3791d05f84", "filename": "gcc/testsuite/gcc.dg/format/ms_c90-strftime-2.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c90-strftime-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c90-strftime-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c90-strftime-2.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,28 @@\n+/* Test for strftime formats.  Rejection of formats using C99 features in\n+   pedantic C90 mode.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic -Wformat -Wformat-y2k\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+void\n+foo (char *s, size_t m, const struct tm *tp)\n+{\n+  strftime (s, m, \"%C\", tp); /* { dg-warning \"format\" \"%C is unsupported\" } */\n+  strftime (s, m, \"%D\", tp); /* { dg-warning \"format\" \"%D is unsupported\" } */\n+  strftime (s, m, \"%e\", tp); /* { dg-warning \"format\" \"%e is unsupported\" } */\n+  strftime (s, m, \"%F\", tp); /* { dg-warning \"format\" \"%F is unsupported\" } */\n+  strftime (s, m, \"%g\", tp); /* { dg-warning \"format\" \"%g is unsupported\" } */\n+  strftime (s, m, \"%G\", tp); /* { dg-warning \"format\" \"%G is unsupported\" } */\n+  strftime (s, m, \"%h\", tp); /* { dg-warning \"format\" \"%h is unsupported\" } */\n+  strftime (s, m, \"%n\", tp); /* { dg-warning \"format\" \"%n is unsupported\" } */\n+  strftime (s, m, \"%r\", tp); /* { dg-warning \"format\" \"%r is unsupported\" } */\n+  strftime (s, m, \"%R\", tp); /* { dg-warning \"format\" \"%R is unsupported\" } */\n+  strftime (s, m, \"%t\", tp); /* { dg-warning \"format\" \"%t is unsupported\" } */\n+  strftime (s, m, \"%T\", tp); /* { dg-warning \"format\" \"%T is unsupported\" } */\n+  strftime (s, m, \"%u\", tp); /* { dg-warning \"format\" \"%u is unsupported\" } */\n+  strftime (s, m, \"%V\", tp); /* { dg-warning \"format\" \"%V is unsupported\" } */\n+  strftime (s, m, \"%z\", tp); /* { dg-warning \"C\" \"%z not in C90\" } */\n+}"}, {"sha": "8a7a12e3f0643928f075f36d2a5c14176b350db6", "filename": "gcc/testsuite/gcc.dg/format/ms_c94-printf-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c94-printf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c94-printf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c94-printf-1.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,19 @@\n+/* Test for printf formats.  Changes in C94 to C90.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=iso9899:199409 -pedantic -Wformat\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+void\n+foo (wint_t lc, wchar_t *ls)\n+{\n+  /* See ISO/IEC 9899:1990 (E) subclause 7.9.6.1 (pages 131-134),\n+     as amended by ISO/IEC 9899:1990/Amd.1:1995 (E) (pages 4-5).\n+     We do not repeat here all the C90 format checks, but just verify\n+     that %ls and %lc are accepted without warning.\n+  */\n+  printf (\"%lc\", lc);\n+  printf (\"%ls\", ls);\n+}"}, {"sha": "85b300f4fc65dacc5584c5f5cba8d0ae05ac58fe", "filename": "gcc/testsuite/gcc.dg/format/ms_c94-scanf-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c94-scanf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c94-scanf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c94-scanf-1.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,18 @@\n+/* Test for scanf formats.  Changes in C94 to C90.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=iso9899:199409 -pedantic -Wformat\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+void\n+foo (wchar_t *ls)\n+{\n+  /* See ISO/IEC 9899:1990 (E) subclause 7.9.6.2 (pages 134-138),\n+     as amended by ISO/IEC 9899:1990/Amd.1:1995 (E) (pages 5-6).\n+     We do not repeat here all the C90 format checks, but just verify\n+     that %ls, %lc, %l[] are accepted without warning.\n+  */\n+  scanf (\"%lc%ls%l[abc]\", ls, ls, ls);\n+}"}, {"sha": "ad5634ceb7891915701b9d6112aa27a2ecd9ffbd", "filename": "gcc/testsuite/gcc.dg/format/ms_c99-printf-1.c", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c99-printf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c99-printf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c99-printf-1.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,109 @@\n+/* Test for printf formats.  Formats using C99 features, including cases\n+   where C99 specifies some aspect of the format to be ignored or where\n+   the behavior is undefined.\n+*/\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic -Wformat\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+void\n+foo (int i, unsigned int u, double d, char *s, void *p, int *n,\n+     long double ld, wint_t lc, wchar_t *ls, long long int ll,\n+     unsigned long long int ull, signed char *ss, unsigned char *us,\n+     long long int *lln, intmax_t j, uintmax_t uj, intmax_t *jn,\n+     size_t z, signed_size_t sz, signed_size_t *zn,\n+     ptrdiff_t t, ptrdiff_t *tn)\n+{\n+  /* See ISO/IEC 9899:1999 (E) subclause 7.19.6.1 (pages 273-281).\n+     We do not repeat here most of the checks for correct C90 formats\n+     or completely broken formats.\n+  */\n+  /* Valid and invalid %h, %hh, %l, %j, %z, %t, %L constructions.  */\n+  printf (\"%hf\", d); /* { dg-warning \"length\" \"bad use of %h\" } */\n+  printf (\"%hF\", d); /* { dg-warning \"unknown|format\" \"bad use of %hF\" } */\n+  printf (\"%he\", d); /* { dg-warning \"length\" \"bad use of %h\" } */\n+  printf (\"%hE\", d); /* { dg-warning \"length\" \"bad use of %h\" } */\n+  printf (\"%hg\", d); /* { dg-warning \"length\" \"bad use of %h\" } */\n+  printf (\"%hG\", d); /* { dg-warning \"length\" \"bad use of %h\" } */\n+  printf (\"%ha\", d); /* { dg-warning \"unknown|format\" \"bad use of %ha\" } */\n+  printf (\"%hA\", d); /* { dg-warning \"unknown|format\" \"bad use of %hA\" } */\n+  printf (\"%hc\", i);\n+  printf (\"%hs\", (short *)s);\n+  printf (\"%hp\", p); /* { dg-warning \"length\" \"bad use of %h\" } */\n+  printf (\"%lc\", lc);\n+  printf (\"%ls\", ls);\n+  printf (\"%lp\", p); /* { dg-warning \"length|C\" \"bad use of %l\" } */\n+  /* Valid uses of each bare conversion.  */\n+  printf (\"%d%i%o%u%x%X%f%e%E%g%G%c%s%p%n%%\", i, i, u, u, u, u,\n+\t  d, d, d, d, d, i, s, p, n);\n+  /* Uses of the - flag (valid on all non-%, non-n conversions).  */\n+  printf (\"%-d%-i%-o%-u%-x%-X%-f%-e%-E%-g%-G%-c%-s%-p\", i, i,\n+\t  u, u, u, u, d, d, d, d, d, i, s, p);\n+  printf (\"%-n\", n); /* { dg-warning \"flag\" \"bad use of %-n\" } */\n+  /* Uses of the + flag (valid on signed conversions only).  */\n+  printf (\"%+d%+i%+f%+e%+E%+g%+G\\n\", i, i, d, d, d, d, d);\n+  printf (\"%+o\", u); /* { dg-warning \"flag\" \"bad use of + flag\" } */\n+  printf (\"%+u\", u); /* { dg-warning \"flag\" \"bad use of + flag\" } */\n+  printf (\"%+x\", u); /* { dg-warning \"flag\" \"bad use of + flag\" } */\n+  printf (\"%+X\", u); /* { dg-warning \"flag\" \"bad use of + flag\" } */\n+  printf (\"%+c\", i); /* { dg-warning \"flag\" \"bad use of + flag\" } */\n+  printf (\"%+s\", s); /* { dg-warning \"flag\" \"bad use of + flag\" } */\n+  printf (\"%+p\", p); /* { dg-warning \"flag\" \"bad use of + flag\" } */\n+  printf (\"%+n\", n); /* { dg-warning \"flag\" \"bad use of + flag\" } */\n+  /* Uses of the space flag (valid on signed conversions only, and ignored\n+     with +).\n+  */\n+  printf (\"% +d\", i); /* { dg-warning \"use of both|ignored\" \"use of space and + flags\" } */\n+  printf (\"%+ d\", i); /* { dg-warning \"use of both|ignored\" \"use of space and + flags\" } */\n+  printf (\"% d% i% f% e% E% g% G\\n\", i, i, d, d, d, d, d);\n+  printf (\"% o\", u); /* { dg-warning \"flag\" \"bad use of space flag\" } */\n+  printf (\"% u\", u); /* { dg-warning \"flag\" \"bad use of space flag\" } */\n+  printf (\"% x\", u); /* { dg-warning \"flag\" \"bad use of space flag\" } */\n+  printf (\"% X\", u); /* { dg-warning \"flag\" \"bad use of space flag\" } */\n+  printf (\"% c\", i); /* { dg-warning \"flag\" \"bad use of space flag\" } */\n+  printf (\"% s\", s); /* { dg-warning \"flag\" \"bad use of space flag\" } */\n+  printf (\"% p\", p); /* { dg-warning \"flag\" \"bad use of space flag\" } */\n+  printf (\"% n\", n); /* { dg-warning \"flag\" \"bad use of space flag\" } */\n+  /* Uses of the # flag.  */\n+  printf (\"%#o%#x%#X%#e%#E%#f%#g%#G\", u, u, u, d, d, d,\n+\t  d, d);\n+  printf (\"%#d\", i); /* { dg-warning \"flag\" \"bad use of # flag\" } */\n+  printf (\"%#i\", i); /* { dg-warning \"flag\" \"bad use of # flag\" } */\n+  printf (\"%#u\", u); /* { dg-warning \"flag\" \"bad use of # flag\" } */\n+  printf (\"%#c\", i); /* { dg-warning \"flag\" \"bad use of # flag\" } */\n+  printf (\"%#s\", s); /* { dg-warning \"flag\" \"bad use of # flag\" } */\n+  printf (\"%#p\", p); /* { dg-warning \"flag\" \"bad use of # flag\" } */\n+  printf (\"%#n\", n); /* { dg-warning \"flag\" \"bad use of # flag\" } */\n+  /* Uses of the 0 flag.  */\n+  printf (\"%08d%08i%08o%08u%08x%08X%08e%08E%08f%08g%08G\", i, i,\n+\t  u, u, u, u, d, d, d, d, d);\n+  printf (\"%0c\", i); /* { dg-warning \"flag\" \"bad use of 0 flag\" } */\n+  printf (\"%0s\", s); /* { dg-warning \"flag\" \"bad use of 0 flag\" } */\n+  printf (\"%0p\", p); /* { dg-warning \"flag\" \"bad use of 0 flag\" } */\n+  printf (\"%0n\", n); /* { dg-warning \"flag\" \"bad use of 0 flag\" } */\n+  /* 0 flag ignored with - flag.  */\n+  printf (\"%-08d\", i); /* { dg-warning \"flags|ignored\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08i\", i); /* { dg-warning \"flags|ignored\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08o\", u); /* { dg-warning \"flags|ignored\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08u\", u); /* { dg-warning \"flags|ignored\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08x\", u); /* { dg-warning \"flags|ignored\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08X\", u); /* { dg-warning \"flags|ignored\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08e\", d); /* { dg-warning \"flags|ignored\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08E\", d); /* { dg-warning \"flags|ignored\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08f\", d); /* { dg-warning \"flags|ignored\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08F\", d); /* { dg-warning \"unknown|format\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08g\", d); /* { dg-warning \"flags|ignored\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08G\", d); /* { dg-warning \"flags|ignored\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08a\", d); /* { dg-warning \"unknown|format\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08A\", d); /* { dg-warning \"unknown|format\" \"0 flag ignored with - flag\" } */\n+  /* Various tests of bad argument types.  Mostly covered in c90-printf-1.c;\n+     here just test for pointer target sign with %hhn.  (Probably allowed\n+     by the standard, but a bad idea, so GCC should diagnose if what\n+     is used is not signed char *.)\n+  */\n+  printf (\"%hhn\", s); /* { dg-warning \"unknown|format\" \"%hhn is unsupported\" } */\n+  printf (\"%hhn\", us); /* { dg-warning \"unknown|format\" \"%hhn is unsupported\" } */\n+}"}, {"sha": "0a4d3160d30269da222e8a915ec017c4ea5b7d2e", "filename": "gcc/testsuite/gcc.dg/format/ms_c99-printf-2.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c99-printf-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c99-printf-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c99-printf-2.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,32 @@\n+/* Test for printf formats.  Formats using extensions to the standard\n+   should be rejected in strict pedantic mode.\n+*/\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic -Wformat\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+void\n+foo (int i, long long ll, size_t z, wint_t lc, wchar_t *ls)\n+{\n+  /* The length modifiers q, Z and L as applied to integer formats are\n+     extensions.\n+  */\n+  printf (\"%qd\", ll); /* { dg-warning \"unknown|format\" \"%q length is unsupported\" } */\n+  printf (\"%Ld\", ll); /* { dg-warning \"unknown|format\" \"%L length is unsupported\" } */\n+  printf (\"%Zd\", z); /* { dg-warning \"unknown|format\" \"%Z length is unsupported\" } */\n+  /* The conversion specifiers C and S are X/Open extensions; the\n+     conversion specifier m is a GNU extension.\n+  */\n+  printf (\"%m\"); /* { dg-warning \"unknown\" \"printf %m is unsupported\" } */\n+  printf (\"%C\", lc); /* { dg-warning \"C\" \"printf %C\" } */\n+  printf (\"%S\", ls); /* { dg-warning \"C\" \"printf %S\" } */\n+  /* The flag character ', and the use of operand number $ formats, are\n+     X/Open extensions.\n+  */\n+  printf (\"%'d\", i); /* { dg-warning \"C\" \"printf ' flag\" } */\n+  printf (\"%1$d\", i); /* { dg-warning \"C\" \"printf $ format\" } */\n+  printf (\"%Ix\", z); /* { dg-warning \"C\" \"printf I format\" } */\n+}"}, {"sha": "d8c51eaa06385e169bf60d268b512edf14d9eb1f", "filename": "gcc/testsuite/gcc.dg/format/ms_c99-printf-3.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c99-printf-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c99-printf-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c99-printf-3.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,40 @@\n+/* Test for printf formats.  Test that the C99 functions get their default\n+   attributes in strict C99 mode, but the gettext functions do not.\n+*/\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic -Wformat\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+void\n+foo (int i, char *s, size_t n, va_list v0, va_list v1, va_list v2, va_list v3,\n+     va_list v4, va_list v5, va_list v6, va_list v7)\n+{\n+  fprintf (stdout, \"%d\", i);\n+  fprintf (stdout, \"%ld\", i); /* { dg-warning \"format\" \"fprintf\" } */\n+  printf (\"%d\", i);\n+  printf (\"%ld\", i); /* { dg-warning \"format\" \"printf\" } */\n+  /* The \"unlocked\" functions shouldn't warn in c99 mode.  */\n+  fprintf_unlocked (stdout, \"%ld\", i);\n+  printf_unlocked (\"%ld\", i);\n+  sprintf (s, \"%d\", i);\n+  sprintf (s, \"%ld\", i); /* { dg-warning \"format\" \"sprintf\" } */\n+  snprintf (s, n, \"%d\", i);\n+  snprintf (s, n, \"%ld\", i); /* { dg-warning \"format\" \"snprintf\" } */\n+  vfprintf (stdout, \"%d\", v0);\n+  vfprintf (stdout, \"%Y\", v1); /* { dg-warning \"format\" \"vfprintf\" } */\n+  vprintf (\"%d\", v0);\n+  vprintf (\"%Y\", v1); /* { dg-warning \"format\" \"vprintf\" } */\n+  vsprintf (s, \"%d\", v0);\n+  vsprintf (s, \"%Y\", v1); /* { dg-warning \"format\" \"vsprintf\" } */\n+  vsnprintf (s, n, \"%d\", v0);\n+  vsnprintf (s, n, \"%Y\", v1); /* { dg-warning \"format\" \"vsnprintf\" } */\n+  printf (gettext (\"%d\"), i);\n+  printf (gettext (\"%ld\"), (long) i);\n+  printf (dgettext (\"\", \"%d\"), i);\n+  printf (dgettext (\"\", \"%ld\"), (long) i);\n+  printf (dcgettext (\"\", \"%d\", 0), i);\n+  printf (dcgettext (\"\", \"%ld\", 0), (long) i);\n+}"}, {"sha": "f4ac706e7c4aa6ecc754f919b755ada737009d9d", "filename": "gcc/testsuite/gcc.dg/format/ms_c99-scanf-1.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c99-scanf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c99-scanf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c99-scanf-1.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,63 @@\n+/* Test for scanf formats.  Formats using C99 features, including cases\n+   where C99 specifies some aspect of the format to be ignored or where\n+   the behavior is undefined.\n+*/\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic -Wformat\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+void\n+foo (int *ip, unsigned int *uip, short int *hp, unsigned short int *uhp,\n+     signed char *hhp, unsigned char *uhhp, long int *lp,\n+     unsigned long int *ulp, float *fp, double *dp, long double *ldp, char *s,\n+     void **pp, int *n, long long *llp, unsigned long long *ullp, wchar_t *ls,\n+     short int *hn, signed char *hhn, long int *ln, long long int *lln,\n+     intmax_t *jp, uintmax_t *ujp, intmax_t *jn, size_t *zp,\n+     signed_size_t *szp, signed_size_t *zn, ptrdiff_t *tp,\n+     unsigned_ptrdiff_t *utp, ptrdiff_t *tn)\n+{\n+  /* See ISO/IEC 9899:1999 (E) subclause 7.19.6.2 (pages 281-288).\n+     We do not repeat here most of the checks for correct C90 formats\n+     or completely broken formats.\n+  */\n+  /* Valid, invalid and silly assignment-suppression\n+     and width constructions.\n+  */\n+  scanf (\"%*d%*i%*o%*u%*x%*X%*e%*E%*f%*g%*G%*s%*[abc]%*c%*p\");\n+  scanf (\"%*2d%*8s%*3c\");\n+  scanf (\"%*n\", n); /* { dg-warning \"suppress\" \"suppression of %n\" } */\n+  scanf (\"%*hd\"); /* { dg-warning \"together\" \"suppression with length\" } */\n+  scanf (\"%2d%3i%4o%5u%6x%7X%10e%11E%12f%14g%15G%16s%3[abc]%4c%5p\",\n+\t ip, ip, uip, uip, uip, uip, fp, fp, fp, fp, fp,\n+\t s, s, s, pp);\n+  scanf (\"%0d\", ip); /* { dg-warning \"width\" \"warning for zero width\" } */\n+  scanf (\"%3n\", n); /* { dg-warning \"width\" \"width with %n\" } */\n+  /* Valid and invalid %h, %hh, %l, %j, %z, %t, %L constructions.  */\n+  scanf (\"%hd%hi%ho%hu%hx%hX%hn\", hp, hp, uhp, uhp, uhp, uhp, hn);\n+  scanf (\"%he\", fp); /* { dg-warning \"length\" \"bad use of %h\" } */\n+  scanf (\"%hE\", fp); /* { dg-warning \"length\" \"bad use of %h\" } */\n+  scanf (\"%hf\", fp); /* { dg-warning \"length\" \"bad use of %h\" } */\n+  scanf (\"%hg\", fp); /* { dg-warning \"length\" \"bad use of %h\" } */\n+  scanf (\"%hG\", fp); /* { dg-warning \"length\" \"bad use of %h\" } */\n+  scanf (\"%hs\", hp);\n+  scanf (\"%h[ac]\", s); /* { dg-warning \"length\" \"bad use of %h\" } */\n+  scanf (\"%hc\", (short *)s);\n+  scanf (\"%hp\", pp); /* { dg-warning \"length\" \"bad use of %h\" } */\n+  scanf (\"%hhd\", hhp); /* { dg-warning \"unknown|format\" \"%hh is unsupported\" } */\n+  scanf (\"%ld%li%lo%lu%lx%lX%ln\", lp, lp, ulp, ulp, ulp, ulp, ln);\n+  scanf (\"%le%lE%lf%lg%lG\", dp, dp, dp, dp, dp);\n+  scanf (\"%lp\", pp); /* { dg-warning \"length\" \"bad use of %l\" } */\n+  scanf (\"%ls\", ls);\n+  scanf (\"%l[ac]\", ls);\n+  scanf (\"%lc\", ls);\n+  scanf (\"%jd\", jp); /* { dg-warning \"unknown|format\" \"%j not supported\" } */\n+  scanf (\"%zd\", zp); /* { dg-warning \"unknown|format\" \"%z not supported\" } */\n+  scanf (\"%td\", tp); /* { dg-warning \"unknown|format\" \"%t not supported\" } */\n+  scanf (\"%Lf\", llp); /* { dg-warning \"unknown|format\" \"bad use of %L is not supported\" } */\n+  /* Valid uses of each bare conversion.  */\n+  scanf (\"%d%i%o%u%x%X%e%E%f%g%G%s%[abc]%c%p%n%%\", ip, ip, uip, uip, uip,\n+         uip, fp, fp, fp, fp, fp, s, s, s, pp, n);\n+}"}, {"sha": "e16f5bfc3cae67d4e2116d7dcf55345ece93d8e5", "filename": "gcc/testsuite/gcc.dg/format/ms_c99-scanf-2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c99-scanf-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c99-scanf-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c99-scanf-2.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,27 @@\n+/* Test for scanf formats.  Formats using extensions to the standard\n+   should be rejected in strict pedantic mode.\n+*/\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic -Wformat\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+void\n+foo (int *ip, long long int *llp, wchar_t *ls)\n+{\n+  /* The length modifiers q and L as applied to integer formats are\n+     extensions.\n+  */\n+  scanf (\"%qd\", llp); /* { dg-warning \"unknown|format\" \"%q is unsupported\" } */\n+  scanf (\"%Ld\", llp); /* { dg-warning \"unknown|format\" \"%L is unsupported\" } */\n+  /* The conversion specifiers C and S are X/Open extensions.  */\n+  scanf (\"%C\", ls); /* { dg-warning \"C\" \"scanf %C\" } */\n+  scanf (\"%S\", ls); /* { dg-warning \"C\" \"scanf %S\" } */\n+  /* The use of operand number $ formats is an X/Open extension.  */\n+  scanf (\"%1$d\", ip); /* { dg-warning \"C\" \"scanf $ format\" } */\n+  /* glibc also supports flags ' and I on scanf formats as an extension.  */\n+  scanf (\"%'d\", ip); /* { dg-warning \"C\" \"scanf ' flag\" } */\n+  scanf (\"%Id\", (ssize_t *)ip); /* { dg-warning \"C\" \"scanf I flag\" } */\n+}"}, {"sha": "cde2f3703d42fb14b81f7010f7a52bf829fd0475", "filename": "gcc/testsuite/gcc.dg/format/ms_c99-scanf-3.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c99-scanf-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c99-scanf-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c99-scanf-3.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,33 @@\n+/* Test for scanf formats.  Test that the C99 functions get their default\n+   attributes in strict C99 mode, but the gettext functions do not.\n+*/\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic -Wformat\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+void\n+foo (int *ip, char *s, va_list v0, va_list v1, va_list v2, va_list v3,\n+     va_list v4, va_list v5)\n+{\n+  fscanf (stdin, \"%d\", ip);\n+  fscanf (stdin, \"%ld\", ip); /* { dg-warning \"format\" \"fscanf\" } */\n+  scanf (\"%d\", ip);\n+  scanf (\"%ld\", ip); /* { dg-warning \"format\" \"scanf\" } */\n+  sscanf (s, \"%d\", ip);\n+  sscanf (s, \"%ld\", ip); /* { dg-warning \"format\" \"sscanf\" } */\n+  vfscanf (stdin, \"%d\", v0);\n+  vfscanf (stdin, \"%Y\", v1); /* { dg-warning \"format\" \"vfscanf\" } */\n+  vscanf (\"%d\", v2);\n+  vscanf (\"%Y\", v3); /* { dg-warning \"format\" \"vscanf\" } */\n+  vsscanf (s, \"%d\", v4);\n+  vsscanf (s, \"%Y\", v5); /* { dg-warning \"format\" \"vsscanf\" } */\n+  scanf (gettext (\"%d\"), ip);\n+  scanf (gettext (\"%ld\"), ip);\n+  scanf (dgettext (\"\", \"%d\"), ip);\n+  scanf (dgettext (\"\", \"%ld\"), ip);\n+  scanf (dcgettext (\"\", \"%d\", 0), ip);\n+  scanf (dcgettext (\"\", \"%ld\", 0), ip);\n+}"}, {"sha": "bddc11dd1f44d25bcc47a4602aadb98fa18543ff", "filename": "gcc/testsuite/gcc.dg/format/ms_c99-scanf-4.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c99-scanf-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c99-scanf-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c99-scanf-4.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,20 @@\n+/* Test for scanf formats.  Formats using extensions to the standard\n+   should be rejected in strict pedantic mode.\n+*/\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic -Wformat\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+void\n+foo (char **sp, wchar_t **lsp)\n+{\n+  /* m assignment-allocation modifier, recognized in both C90\n+     and C99 modes, is a POSIX and ISO/IEC WDTR 24731-2 extension.  */\n+  scanf (\"%ms\", sp); /* { dg-warning \"unknown|format\" \"%ms is unsupported\" } */\n+  scanf (\"%mS\", lsp); /* { dg-warning \"unknown|format\" \"%mS is unsupported\" } */\n+  scanf (\"%mls\", lsp); /* { dg-warning \"unknown|format\" \"%mls is unsupported\" } */\n+  scanf (\"%m[bcd]\", sp); /* { dg-warning \"unknown|format\" \"%m[] is unsupported\" } */\n+  scanf (\"%ml[bcd]\", lsp); /* { dg-warning \"unknown|format\" \"%ml[] is unsupported\" } */\n+}"}, {"sha": "743972efab4004d0082fdf3c6e5941100341dfab", "filename": "gcc/testsuite/gcc.dg/format/ms_c99-strftime-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c99-strftime-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c99-strftime-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c99-strftime-1.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,20 @@\n+/* Test for strftime formats.  Formats using C99 features.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic -Wformat -Wformat-y2k\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+void\n+foo (char *s, size_t m, const struct tm *tp)\n+{\n+  /* See ISO/IEC 9899:1990 (E) subclause 7.12.3.5 (pages 174-175).  */\n+  /* Formats which are Y2K-compliant (no 2-digit years).  */\n+  strftime (s, m, \"%a%A%b%B%d%H%I%j%m%M%p%S%U%w%W%X%Y%z%Z%%\", tp);\n+  /* Formats with 2-digit years.  */\n+  strftime (s, m, \"%y\", tp); /* { dg-warning \"only last 2\" \"2-digit year\" } */\n+  /* Formats with 2-digit years in some locales.  */\n+  strftime (s, m, \"%c\", tp); /* { dg-warning \"some locales\" \"2-digit year\" } */\n+  strftime (s, m, \"%x\", tp); /* { dg-warning \"some locales\" \"2-digit year\" } */\n+}"}, {"sha": "9a6ae3545aefdbea8e8f4ff8cf417b089ca3451b", "filename": "gcc/testsuite/gcc.dg/format/ms_c99-strftime-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c99-strftime-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c99-strftime-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c99-strftime-2.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,20 @@\n+/* Test for strftime formats.  Rejection of extensions in pedantic mode.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic -Wformat\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+void\n+foo (char *s, size_t m, const struct tm *tp)\n+{\n+  /* %P is a lowercase version of %p.  */\n+  strftime (s, m, \"%P\", tp); /* { dg-warning \"unknown\" \"strftime %P\" } */\n+  /* %k is %H but padded with a space rather than 0 if necessary.  */\n+  strftime (s, m, \"%k\", tp); /* { dg-warning \"unknown\" \"strftime %k\" } */\n+  /* %l is %I but padded with a space rather than 0 if necessary.  */\n+  strftime (s, m, \"%l\", tp); /* { dg-warning \"unknown\" \"strftime %l\" } */\n+  /* %s is the number of seconds since the Epoch.  */\n+  strftime (s, m, \"%s\", tp); /* { dg-warning \"unknown\" \"strftime %s\" } */\n+}"}, {"sha": "08659616e70bff7f7ce54d7c19b8e3ecb6d78f28", "filename": "gcc/testsuite/gcc.dg/format/ms_cast-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_cast-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_cast-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_cast-1.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,17 @@\n+/* Test for strings cast through integer types: should not be treated\n+   as format strings unless the types are of the same width as\n+   pointers (intptr_t or similar).  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-Wformat\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+void\n+f (int x)\n+{\n+  printf(\"%s\", x); /* { dg-warning \"format\" } */\n+  printf((char *)(size_t)\"%s\", x); /* { dg-warning \"format\" } */\n+  printf((char *)(char)\"%s\", x); /* { dg-warning \"cast from pointer to integer of different size\" } */\n+}"}, {"sha": "b6c71c04f7b245397179dffbf6858bc387fa1128", "filename": "gcc/testsuite/gcc.dg/format/ms_miss-1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_miss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_miss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_miss-1.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,40 @@\n+/* Test for warnings for missing format attributes.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=gnu99 -Wmissing-format-attribute\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+void\n+foo (const char *fmt, ...)\n+{\n+  va_list ap;\n+  va_start (ap, fmt);\n+  vprintf (fmt, ap); /* { dg-warning \"candidate\" \"printf attribute warning\" } */\n+  va_end (ap);\n+}\n+\n+void\n+bar (const char *fmt, ...)\n+{\n+  va_list ap;\n+  va_start (ap, fmt);\n+  vscanf (fmt, ap); /* { dg-warning \"candidate\" \"scanf attribute warning\" } */\n+  va_end (ap);\n+}\n+\n+__attribute__((__format__(__ms_printf__, 1, 2))) void\n+foo2 (const char *fmt, ...)\n+{\n+  va_list ap;\n+  va_start (ap, fmt);\n+  vprintf (fmt, ap);\n+  va_end (ap);\n+}\n+\n+void\n+vfoo (const char *fmt, va_list arg)\n+{\n+  vprintf (fmt, arg); /* { dg-warning \"candidate\" \"printf attribute warning 2\" } */\n+}"}, {"sha": "e0dd465f8897f72c3c6bd1e0512ab06833b2efb8", "filename": "gcc/testsuite/gcc.dg/format/ms_miss-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_miss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_miss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_miss-2.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,17 @@\n+/* Test for warnings for missing format attributes.  Don't warn if no\n+   relevant parameters for a format attribute; see c/1017.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=gnu99 -Wmissing-format-attribute\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+void\n+foo (int i, ...)\n+{\n+  va_list ap;\n+  va_start (ap, i);\n+  vprintf (\"Foo %s bar %s\", ap); /* { dg-bogus \"candidate\" \"bogus printf attribute warning\" } */\n+  va_end (ap);\n+}"}, {"sha": "cf41756c0630c8bab0fd85985ba59b38fa9e7598", "filename": "gcc/testsuite/gcc.dg/format/ms_miss-3.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_miss-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_miss-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_miss-3.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,27 @@\n+/* Test warnings for missing format attributes on function pointers.  */\n+/* Origin: Kaveh Ghazi <ghazi@caip.rutgers.edu> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=gnu99 -Wmissing-format-attribute\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+typedef void (*noattr_t) (const char *, ...);\n+typedef noattr_t __attribute__ ((__format__(__ms_printf__, 1, 2))) attr_t;\n+\n+typedef void (*vnoattr_t) (const char *, va_list);\n+typedef vnoattr_t __attribute__ ((__format__(__ms_printf__, 1, 0))) vattr_t;\n+\n+void\n+foo1 (noattr_t na, attr_t a, vnoattr_t vna, vattr_t va)\n+{\n+  noattr_t na1 = na;\n+  noattr_t na2 = a; /* { dg-warning \"candidate\" \"initialization warning\" } */\n+  attr_t a1 = na;\n+  attr_t a2 = a;\n+\n+  vnoattr_t vna1 = vna;\n+  vnoattr_t vna2 = va; /* { dg-warning \"candidate\" \"initialization warning\" } */\n+  vattr_t va1 = vna;\n+  vattr_t va2 = va;\n+}"}, {"sha": "faacf5ce43be5b78884f2f8941d05b31413094d8", "filename": "gcc/testsuite/gcc.dg/format/ms_miss-4.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_miss-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_miss-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_miss-4.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,33 @@\n+/* Test warnings for missing format attributes on function pointers.  */\n+/* Origin: Kaveh Ghazi <ghazi@caip.rutgers.edu> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=gnu99 -Wmissing-format-attribute\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+typedef void (*noattr_t) (const char *, ...);\n+typedef noattr_t __attribute__ ((__format__(__ms_printf__, 1, 2))) attr_t;\n+\n+typedef void (*vnoattr_t) (const char *, va_list);\n+typedef vnoattr_t __attribute__ ((__format__(__ms_printf__, 1, 0))) vattr_t;\n+\n+void\n+foo1 (noattr_t na, attr_t a, vnoattr_t vna, vattr_t va)\n+{\n+  noattr_t na1, na2;\n+  attr_t a1, a2;\n+\n+  vnoattr_t vna1, vna2;\n+  vattr_t va1, va2;\n+\n+  na1 = na;\n+  na2 = a; /* { dg-warning \"candidate\" \"assignment warning\" } */\n+  a1 = na;\n+  a2 = a;\n+\n+  vna1 = vna;\n+  vna2 = va; /* { dg-warning \"candidate\" \"assignment warning\" } */\n+  va1 = vna;\n+  va1 = va;\n+}"}, {"sha": "a9f54c3a8ce0bcd5885f08889c51241b93fb1a52", "filename": "gcc/testsuite/gcc.dg/format/ms_miss-5.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_miss-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_miss-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_miss-5.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,49 @@\n+/* Test warnings for missing format attributes on function pointers.  */\n+/* Origin: Kaveh Ghazi <ghazi@caip.rutgers.edu> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=gnu99 -Wmissing-format-attribute\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+typedef void (*noattr_t) (const char *, ...);\n+typedef noattr_t __attribute__ ((__format__(__ms_printf__, 1, 2))) attr_t;\n+\n+typedef void (*vnoattr_t) (const char *, va_list);\n+typedef vnoattr_t __attribute__ ((__format__(__ms_printf__, 1, 0))) vattr_t;\n+\n+noattr_t\n+foo1 (noattr_t na, attr_t a, int i)\n+{\n+  if (i)\n+    return na;\n+  else\n+    return a; /* { dg-warning \"candidate\" \"return type warning\" } */\n+}\n+\n+attr_t\n+foo2 (noattr_t na, attr_t a, int i)\n+{\n+  if (i)\n+    return na;\n+  else\n+    return a;\n+}\n+\n+vnoattr_t\n+foo3 (vnoattr_t vna, vattr_t va, int i)\n+{\n+  if (i)\n+    return vna;\n+  else\n+    return va; /* { dg-warning \"candidate\" \"return type warning\" } */\n+}\n+\n+vattr_t\n+foo4 (vnoattr_t vna, vattr_t va, int i)\n+{\n+  if (i)\n+    return vna;\n+  else\n+    return va;\n+}"}, {"sha": "3e210deee50b5dfb1d22177574a11e2a7a39614e", "filename": "gcc/testsuite/gcc.dg/format/ms_miss-6.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_miss-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_miss-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_miss-6.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,32 @@\n+/* Test warnings for missing format attributes on function pointers.  */\n+/* Origin: Kaveh Ghazi <ghazi@caip.rutgers.edu> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=gnu99 -Wmissing-format-attribute\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+typedef void (*noattr_t) (const char *, ...);\n+typedef noattr_t __attribute__ ((__format__(__ms_printf__, 1, 2))) attr_t;\n+\n+typedef void (*vnoattr_t) (const char *, va_list);\n+typedef vnoattr_t __attribute__ ((__format__(__ms_printf__, 1, 0))) vattr_t;\n+\n+extern void foo1 (noattr_t);\n+extern void foo2 (attr_t);\n+extern void foo3 (vnoattr_t);\n+extern void foo4 (vattr_t);\n+\n+void\n+foo (noattr_t na, attr_t a, vnoattr_t vna, vattr_t va)\n+{\n+  foo1 (na);\n+  foo1 (a); /* { dg-warning \"candidate\" \"parameter passing warning\" } */\n+  foo2 (na);\n+  foo2 (a);\n+\n+  foo3 (vna);\n+  foo3 (va); /* { dg-warning \"candidate\" \"parameter passing warning\" } */\n+  foo4 (vna);\n+  foo4 (va);\n+}"}, {"sha": "0936f5f6e0d61cf0ea3eaf1a4f7c20fac9efcb80", "filename": "gcc/testsuite/gcc.dg/format/ms_multattr-1.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_multattr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_multattr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_multattr-1.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,51 @@\n+/* Test for multiple format attributes.  Test for printf and scanf attributes\n+   together.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=gnu99 -Wformat\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+/* If we specify multiple attributes for a single function, they should\n+   all apply.  This should apply whether they are on the same declaration\n+   or on different declarations.  */\n+\n+extern void my_vprintf_scanf (const char *, va_list, const char *, ...)\n+     __attribute__((__format__(__ms_printf__, 1, 0)))\n+     __attribute__((__format__(__ms_scanf__, 3, 4)));\n+\n+extern void my_vprintf_scanf2 (const char *, va_list, const char *, ...)\n+     __attribute__((__format__(__ms_scanf__, 3, 4)))\n+     __attribute__((__format__(__ms_printf__, 1, 0)));\n+\n+extern void my_vprintf_scanf3 (const char *, va_list, const char *, ...)\n+     __attribute__((__format__(__ms_printf__, 1, 0)));\n+extern void my_vprintf_scanf3 (const char *, va_list, const char *, ...)\n+     __attribute__((__format__(__ms_scanf__, 3, 4)));\n+\n+extern void my_vprintf_scanf4 (const char *, va_list, const char *, ...)\n+     __attribute__((__format__(__ms_scanf__, 3, 4)));\n+extern void my_vprintf_scanf4 (const char *, va_list, const char *, ...)\n+     __attribute__((__format__(__ms_printf__, 1, 0)));\n+\n+void\n+foo (va_list ap, int *ip, long *lp)\n+{\n+  my_vprintf_scanf (\"%d\", ap, \"%d\", ip);\n+  my_vprintf_scanf (\"%d\", ap, \"%ld\", lp);\n+  my_vprintf_scanf (\"%\", ap, \"%d\", ip); /* { dg-warning \"format\" \"printf\" } */\n+  my_vprintf_scanf (\"%d\", ap, \"%ld\", ip); /* { dg-warning \"format\" \"scanf\" } */\n+  my_vprintf_scanf2 (\"%d\", ap, \"%d\", ip);\n+  my_vprintf_scanf2 (\"%d\", ap, \"%ld\", lp);\n+  my_vprintf_scanf2 (\"%\", ap, \"%d\", ip); /* { dg-warning \"format\" \"printf\" } */\n+  my_vprintf_scanf2 (\"%d\", ap, \"%ld\", ip); /* { dg-warning \"format\" \"scanf\" } */\n+  my_vprintf_scanf3 (\"%d\", ap, \"%d\", ip);\n+  my_vprintf_scanf3 (\"%d\", ap, \"%ld\", lp);\n+  my_vprintf_scanf3 (\"%\", ap, \"%d\", ip); /* { dg-warning \"format\" \"printf\" } */\n+  my_vprintf_scanf3 (\"%d\", ap, \"%ld\", ip); /* { dg-warning \"format\" \"scanf\" } */\n+  my_vprintf_scanf4 (\"%d\", ap, \"%d\", ip);\n+  my_vprintf_scanf4 (\"%d\", ap, \"%ld\", lp);\n+  my_vprintf_scanf4 (\"%\", ap, \"%d\", ip); /* { dg-warning \"format\" \"printf\" } */\n+  my_vprintf_scanf4 (\"%d\", ap, \"%ld\", ip); /* { dg-warning \"format\" \"scanf\" } */\n+}"}, {"sha": "47e20e4d461fb71d332b063b4b4dfa3e7b6cfd1b", "filename": "gcc/testsuite/gcc.dg/format/ms_multattr-2.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_multattr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_multattr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_multattr-2.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,40 @@\n+/* Test for multiple format attributes.  Test for printf and scanf attributes\n+   together, in different places on the declarations.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=gnu99 -Wformat\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+/* If we specify multiple attributes for a single function, they should\n+   all apply, wherever they are placed on the declarations.  */\n+\n+extern __attribute__((__format__(__ms_printf__, 1, 0))) void\n+     my_vprintf_scanf (const char *, va_list, const char *, ...)\n+     __attribute__((__format__(__ms_scanf__, 3, 4)));\n+\n+extern void (__attribute__((__format__(__ms_printf__, 1, 0))) my_vprintf_scanf2)\n+     (const char *, va_list, const char *, ...)\n+     __attribute__((__format__(__ms_scanf__, 3, 4)));\n+\n+extern __attribute__((__format__(__ms_scanf__, 3, 4))) void\n+     (__attribute__((__format__(__ms_printf__, 1, 0))) my_vprintf_scanf3)\n+     (const char *, va_list, const char *, ...);\n+\n+void\n+foo (va_list ap, int *ip, long *lp)\n+{\n+  my_vprintf_scanf (\"%d\", ap, \"%d\", ip);\n+  my_vprintf_scanf (\"%d\", ap, \"%ld\", lp);\n+  my_vprintf_scanf (\"%\", ap, \"%d\", ip); /* { dg-warning \"format\" \"printf\" } */\n+  my_vprintf_scanf (\"%d\", ap, \"%ld\", ip); /* { dg-warning \"format\" \"scanf\" } */\n+  my_vprintf_scanf2 (\"%d\", ap, \"%d\", ip);\n+  my_vprintf_scanf2 (\"%d\", ap, \"%ld\", lp);\n+  my_vprintf_scanf2 (\"%\", ap, \"%d\", ip); /* { dg-warning \"format\" \"printf\" } */\n+  my_vprintf_scanf2 (\"%d\", ap, \"%ld\", ip); /* { dg-warning \"format\" \"scanf\" } */\n+  my_vprintf_scanf3 (\"%d\", ap, \"%d\", ip);\n+  my_vprintf_scanf3 (\"%d\", ap, \"%ld\", lp);\n+  my_vprintf_scanf3 (\"%\", ap, \"%d\", ip); /* { dg-warning \"format\" \"printf\" } */\n+  my_vprintf_scanf3 (\"%d\", ap, \"%ld\", ip); /* { dg-warning \"format\" \"scanf\" } */\n+}"}, {"sha": "1a247a7a126575942c211d88dfdc2a49c9370e3f", "filename": "gcc/testsuite/gcc.dg/format/ms_multattr-3.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_multattr-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_multattr-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_multattr-3.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,29 @@\n+/* Test for multiple format_arg attributes.  Test for both branches\n+   getting checked.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=gnu99 -Wformat\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+extern char *ngettext (const char *, const char *, unsigned long int)\n+     __attribute__((__format_arg__(1))) __attribute__((__format_arg__(2)));\n+\n+void\n+foo (long l, int nfoo)\n+{\n+  printf (ngettext (\"%d foo\", \"%d foos\", nfoo), nfoo);\n+  printf (ngettext (\"%d foo\", \"%d foos\", l), l); /* { dg-warning \"int\" \"wrong type in conditional expr\" } */\n+  printf (ngettext (\"%d foo\", \"%ld foos\", l), l); /* { dg-warning \"int\" \"wrong type in conditional expr\" } */\n+  printf (ngettext (\"%ld foo\", \"%d foos\", l), l); /* { dg-warning \"int\" \"wrong type in conditional expr\" } */\n+  /* Should allow one case to have extra arguments.  */\n+  printf (ngettext (\"1 foo\", \"%d foos\", nfoo), nfoo);\n+  printf (ngettext (\"1 foo\", \"many foos\", nfoo), nfoo); /* { dg-warning \"too many\" \"too many args in all branches\" } */\n+  printf (ngettext (\"\", \"%d foos\", nfoo), nfoo);\n+  printf (ngettext (\"1 foo\", (nfoo > 0) ? \"%d foos\" : \"no foos\", nfoo), nfoo);\n+  printf (ngettext (\"%d foo\", (nfoo > 0) ? \"%d foos\" : \"no foos\", nfoo), nfoo);\n+  printf (ngettext (\"%ld foo\", (nfoo > 0) ? \"%d foos\" : \"no foos\", nfoo), nfoo); /* { dg-warning \"long int\" \"wrong type\" } */\n+  printf (ngettext (\"%d foo\", (nfoo > 0) ? \"%ld foos\" : \"no foos\", nfoo), nfoo); /* { dg-warning \"long int\" \"wrong type\" } */\n+  printf (ngettext (\"%d foo\", (nfoo > 0) ? \"%d foos\" : \"%ld foos\", nfoo), nfoo); /* { dg-warning \"long int\" \"wrong type\" } */\n+}"}, {"sha": "659ca3e0bfbe41119536072e7dbbc21e0680913d", "filename": "gcc/testsuite/gcc.dg/format/ms_no-exargs-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_no-exargs-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_no-exargs-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_no-exargs-1.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,15 @@\n+/* Test for warnings for extra format arguments being disabled by\n+   -Wno-format-extra-args.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=gnu99 -Wformat -Wno-format-extra-args\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+void\n+foo (int i)\n+{\n+  printf (\"foo\", i);\n+  printf (\"%1$d\", i, i);\n+}"}, {"sha": "654241ddff475184744e66fd4d1251d51902a153", "filename": "gcc/testsuite/gcc.dg/format/ms_no-exargs-2.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_no-exargs-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_no-exargs-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_no-exargs-2.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,28 @@\n+/* Test for warnings for extra format arguments being disabled by\n+   -Wno-format-extra-args.  Test which warnings still apply with $\n+   operand numbers.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=gnu99 -Wformat -Wno-format-extra-args\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+void\n+foo (int i, int *ip, va_list va)\n+{\n+  printf (\"%3$d%1$d\", i, i, i); /* { dg-warning \"before used\" \"unused $ operand\" } */\n+  printf (\"%2$d%1$d\", i, i, i);\n+  vprintf (\"%3$d%1$d\", va); /* { dg-warning \"before used\" \"unused $ operand\" } */\n+  /* With scanf formats, gaps in the used arguments are allowed only if the\n+     arguments are all pointers.  In such a case, should only give the lesser\n+     warning about unused arguments rather than the more serious one about\n+     argument gaps.  */\n+  scanf (\"%3$d%1$d\", ip, ip, ip);\n+  /* If there are non-pointer arguments unused at the end, this is also OK.  */\n+  scanf (\"%3$d%1$d\", ip, ip, ip, i);\n+  scanf (\"%3$d%1$d\", ip, i, ip); /* { dg-warning \"before used\" \"unused $ scanf non-pointer operand\" } */\n+  /* Can't check the arguments in the vscanf case, so should suppose the\n+     lesser problem.  */\n+  vscanf (\"%3$d%1$d\", va);\n+}"}, {"sha": "aed760aab5f9521ddbe5e95af66e66b1764c382a", "filename": "gcc/testsuite/gcc.dg/format/ms_no-y2k-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_no-y2k-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_no-y2k-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_no-y2k-1.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,13 @@\n+/* Test for warnings for Y2K problems not being on by default.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=gnu99 -Wformat\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+void\n+foo (char *s, size_t m, const struct tm *tp)\n+{\n+  strftime (s, m, \"%y%c%x\", tp);\n+}"}, {"sha": "b29c0080e0fa089266c70195b0896a729c6f0255", "filename": "gcc/testsuite/gcc.dg/format/ms_nonlit-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_nonlit-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_nonlit-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_nonlit-1.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,14 @@\n+/* Test for warnings for non-string-literal formats.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=gnu99 -Wformat -Wformat-nonliteral\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+void\n+foo (char *s, size_t i)\n+{\n+  printf ((const char *)i, i); /* { dg-warning \"argument types\" \"non-literal\" } */\n+  printf (s, i); /* { dg-warning \"argument types\" \"non-literal\" } */\n+}"}, {"sha": "e60242187e0e3e57eeda086922e96d609e8403e6", "filename": "gcc/testsuite/gcc.dg/format/ms_nonlit-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_nonlit-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_nonlit-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_nonlit-2.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,14 @@\n+/* Test for warnings for non-string-literal formats.  Test with -Wformat=2.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=gnu99 -Wformat=2\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+void\n+foo (char *s, size_t i)\n+{\n+  printf ((const char *)i, i); /* { dg-warning \"argument types\" \"non-literal\" } */\n+  printf (s, i); /* { dg-warning \"argument types\" \"non-literal\" } */\n+}"}, {"sha": "e8c8933bc7cfef0daaf746e1e5b2111ce4982255", "filename": "gcc/testsuite/gcc.dg/format/ms_nonlit-3.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_nonlit-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_nonlit-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_nonlit-3.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,13 @@\n+/* Test for warnings for non-string-literal formats.  Test for strftime formats.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=gnu99 -Wformat -Wformat-nonliteral\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+void\n+foo (char *s, size_t m, const struct tm *tp, char *fmt)\n+{\n+  strftime (s, m, fmt, tp); /* { dg-warning \"format string\" \"non-literal\" } */\n+}"}, {"sha": "50bfd546d5aa5d485a45af63fc7f758a4f99c0c8", "filename": "gcc/testsuite/gcc.dg/format/ms_nul-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_nul-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_nul-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_nul-1.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,15 @@\n+/* Test diagnostics for suppressing contains nul\n+   -Wformat.  -Wformat.  */\n+/* Origin: Bruce Korb <bkorb@gnu.org> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-Wformat -Wno-format-contains-nul\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+void\n+foo (void)\n+{\n+  static char const fmt[] = \"x%s\\0%s\\n\\0abc\";\n+  printf (fmt+4, fmt+8); /* { dg-bogus \"embedded.*in format\" \"bogus embed warning\" } */\n+}"}, {"sha": "3dfc3c62f97cb419a4f1e7ac3845738174044e07", "filename": "gcc/testsuite/gcc.dg/format/ms_nul-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_nul-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_nul-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_nul-2.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,17 @@\n+/* Test diagnostics for options used on their own without\n+   -Wformat.  -Wformat-.  */\n+/* Origin: Bruce Korb <bkorb@gnu.org> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-Wformat\" } */\n+\n+/* { dg-warning \"embedded .* in format\" \"ignored\" { target *-*-* } 0 } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+void\n+fumble (void)\n+{\n+  static char const fmt[] = \"x%s\\0%s\\n\\0abc\";\n+  printf (fmt+4, fmt+8);\n+}"}, {"sha": "91495016ebce646469a6a4d5b47bda94385ba912", "filename": "gcc/testsuite/gcc.dg/format/ms_null-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_null-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_null-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_null-1.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,28 @@\n+/* Test for some aspects of null format string handling.  */\n+/* Origin: Jason Thorpe <thorpej@wasabisystems.com> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=gnu99 -Wformat\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+extern void my_printf (const char *, ...) __attribute__((format(ms_printf,1,2)));\n+extern const char *my_format (const char *, const char *)\n+  __attribute__((format_arg(2)));\n+\n+void\n+foo (int i1)\n+{\n+  /* Warning about a null format string has been decoupled from the actual\n+     format check.  However, we still expect to be warned about any excess\n+     arguments after a null format string.  */\n+  my_printf (NULL);\n+  my_printf (NULL, i1); /* { dg-warning \"too many\" \"null format with arguments\" } */\n+\n+  my_printf (my_format (\"\", NULL));\n+  my_printf (my_format (\"\", NULL), i1); /* { dg-warning \"too many\" \"null format_arg with arguments\" } */\n+\n+  /* While my_printf allows a null argument, dgettext does not, so we expect\n+     a null argument warning here.  */\n+  my_printf (dgettext (\"\", NULL)); /* { dg-warning \"null\" \"null format with dgettext\" } */\n+}"}, {"sha": "f6eba280acc889ef759def6c9ce4a38ffe91b102", "filename": "gcc/testsuite/gcc.dg/format/ms_plus-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_plus-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_plus-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_plus-1.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,21 @@\n+/* Test for printf formats using string literal plus constant.\n+ */\n+/* Origin: Jakub Jelinek <jakub@redhat.com> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic -Wformat=2\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+void\n+foo (int i)\n+{\n+  printf (\"%%d\\n\" + 1, i);\n+  printf (5 + \"%.-*d%3d\\n\", i);\n+  printf (\"%d%d\" + 2, i, i);\t/* { dg-warning \"arguments\" \"wrong number of args\" } */\n+  printf (3 + \"%d\\n\");\t\t/* { dg-warning \"zero-length\" \"zero-length string\" } */\n+  printf (\"%d\\n\" + i, i);\t/* { dg-warning \"not a string\" \"non-constant addend\" } */\n+  printf (\"%d\\n\" + 10);\t\t/* { dg-warning \"not a string\" \"too large addend\" } */\n+  printf (\"%d\\n\" - 1, i);\t/* { dg-warning \"not a string\" \"minus constant\" } */\n+  printf (\"%d\\n\" + -1, i);\t/* { dg-warning \"not a string\" \"negative addend\" } */\n+}"}, {"sha": "5f6b76726fcbb1ebad70dd1263995e8263839dbb", "filename": "gcc/testsuite/gcc.dg/format/ms_sec-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_sec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_sec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_sec-1.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,13 @@\n+/* Test for security warning when non-literal format has no arguments.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=gnu99 -Wformat -Wformat-security\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+void\n+foo (char *s)\n+{\n+  printf (s); /* { dg-warning \"no format arguments\" \"security warning\" } */\n+}"}, {"sha": "aa4f6cb5f3d519fe6929975d8a4f710d522a62a8", "filename": "gcc/testsuite/gcc.dg/format/ms_unnamed-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_unnamed-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_unnamed-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_unnamed-1.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,24 @@\n+/* Test for warnings with possibly unnamed integer types.  Bug 24329.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-Wformat\" } */\n+/* { dg-options \"-Wformat -msse\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+/* Definition of TItype follows same logic as in gcc.dg/titype-1.c,\n+   but must be a #define to avoid giving the type a name.  */\n+#if defined(__LP64__) && !defined(__hppa__)\n+#define TItype int __attribute__ ((mode (TI)))\n+#else\n+#define TItype long\n+#endif\n+\n+void\n+f (TItype x)\n+{\n+  printf(\"%d\", x); /* { dg-warning \"expects type\" } */\n+  printf(\"%d\", 141592653589793238462643383279502884197169399375105820974944); /* { dg-warning \"expects type\" } */\n+  /* { dg-warning \"unsigned only|too large\" \"constant\" { target *-*-* } 22 } */\n+}"}, {"sha": "97d2979e8f2f5591533646179d6ebed0288d848c", "filename": "gcc/testsuite/gcc.dg/format/ms_va-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_va-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_va-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_va-1.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,14 @@\n+/* Test for strange warning in format checking.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-Wformat\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+void\n+foo (void *p)\n+{\n+  printf (\"%d\", p); /* { dg-bogus \"va_list\" \"wrong type in format warning\" } */\n+  /* { dg-warning \"format\" \"format error\" { target *-*-* } 12 } */\n+}"}, {"sha": "d024458a4e48e43d5f311f0e0d6bd539a3383a03", "filename": "gcc/testsuite/gcc.dg/format/ms_zero-length-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_zero-length-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_zero-length-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_zero-length-1.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,16 @@\n+/* Test the -Wno-format-zero-length option, which suppresses warnings\n+   about zero-length formats.  */\n+/* Origin: Jason Thorpe <thorpej@wasabisystems.com> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic -Wformat -Wno-format-zero-length\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+void\n+foo (void)\n+{\n+  /* See ISO/IEC 9899:1990 (E) subclause 7.9.6.1 (pages 131-134).  */\n+  /* Zero-length format strings are allowed.  */\n+  printf (\"\");\n+}"}, {"sha": "c7404bedf8b962dad56c3e613d3ca4f823419d0a", "filename": "gcc/testsuite/gcc.dg/format/multattr-1.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmultattr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmultattr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmultattr-1.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -4,29 +4,30 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99 -Wformat\" } */\n \n+#define DONT_GNU_PROTOTYPE\n #include \"format.h\"\n \n /* If we specify multiple attributes for a single function, they should\n    all apply.  This should apply whether they are on the same declaration\n    or on different declarations.  */\n \n extern void my_vprintf_scanf (const char *, va_list, const char *, ...)\n-     __attribute__((__format__(__printf__, 1, 0)))\n-     __attribute__((__format__(__scanf__, 3, 4)));\n+     __attribute__((__format__(gnu_attr___printf__, 1, 0)))\n+     __attribute__((__format__(gnu_attr___scanf__, 3, 4)));\n \n extern void my_vprintf_scanf2 (const char *, va_list, const char *, ...)\n-     __attribute__((__format__(__scanf__, 3, 4)))\n-     __attribute__((__format__(__printf__, 1, 0)));\n+     __attribute__((__format__(gnu_attr___scanf__, 3, 4)))\n+     __attribute__((__format__(gnu_attr___printf__, 1, 0)));\n \n extern void my_vprintf_scanf3 (const char *, va_list, const char *, ...)\n-     __attribute__((__format__(__printf__, 1, 0)));\n+     __attribute__((__format__(gnu_attr___printf__, 1, 0)));\n extern void my_vprintf_scanf3 (const char *, va_list, const char *, ...)\n-     __attribute__((__format__(__scanf__, 3, 4)));\n+     __attribute__((__format__(gnu_attr___scanf__, 3, 4)));\n \n extern void my_vprintf_scanf4 (const char *, va_list, const char *, ...)\n-     __attribute__((__format__(__scanf__, 3, 4)));\n+     __attribute__((__format__(gnu_attr___scanf__, 3, 4)));\n extern void my_vprintf_scanf4 (const char *, va_list, const char *, ...)\n-     __attribute__((__format__(__printf__, 1, 0)));\n+     __attribute__((__format__(gnu_attr___printf__, 1, 0)));\n \n void\n foo (va_list ap, int *ip, long *lp)"}, {"sha": "4011bf14585790ec228248e42ae5f57e0ad9e280", "filename": "gcc/testsuite/gcc.dg/format/multattr-2.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmultattr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmultattr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmultattr-2.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -4,21 +4,22 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99 -Wformat\" } */\n \n+#define DONT_GNU_PROTOTYPE\n #include \"format.h\"\n \n /* If we specify multiple attributes for a single function, they should\n    all apply, wherever they are placed on the declarations.  */\n \n-extern __attribute__((__format__(__printf__, 1, 0))) void\n+extern __attribute__((__format__(gnu_attr___printf__, 1, 0))) void\n      my_vprintf_scanf (const char *, va_list, const char *, ...)\n-     __attribute__((__format__(__scanf__, 3, 4)));\n+     __attribute__((__format__(gnu_attr___scanf__, 3, 4)));\n \n-extern void (__attribute__((__format__(__printf__, 1, 0))) my_vprintf_scanf2)\n+extern void (__attribute__((__format__(gnu_attr___printf__, 1, 0))) my_vprintf_scanf2)\n      (const char *, va_list, const char *, ...)\n-     __attribute__((__format__(__scanf__, 3, 4)));\n+     __attribute__((__format__(gnu_attr___scanf__, 3, 4)));\n \n-extern __attribute__((__format__(__scanf__, 3, 4))) void\n-     (__attribute__((__format__(__printf__, 1, 0))) my_vprintf_scanf3)\n+extern __attribute__((__format__(gnu_attr___scanf__, 3, 4))) void\n+     (__attribute__((__format__(gnu_attr___printf__, 1, 0))) my_vprintf_scanf3)\n      (const char *, va_list, const char *, ...);\n \n void"}, {"sha": "ed714442be9de5557843a2d592fcec86bd70b181", "filename": "gcc/testsuite/gcc.dg/format/null-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fnull-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fnull-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fnull-1.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -3,9 +3,10 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99 -Wformat\" } */\n \n+#define DONT_GNU_PROTOTYPE\n #include \"format.h\"\n \n-extern void my_printf (const char *, ...) __attribute__((format(printf,1,2)));\n+extern void my_printf (const char *, ...) __attribute__((format(gnu_attr_printf,1,2)));\n extern const char *my_format (const char *, const char *)\n   __attribute__((format_arg(2)));\n "}, {"sha": "b69ae5bc5b52dde805e61025b0c20fa075e83cbf", "filename": "gcc/testsuite/gcc.dg/format/sys_format.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fsys_format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590fc9fbd071d1bf6172be269884ed5a1ac5aa3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fsys_format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fsys_format.c?ref=6590fc9fbd071d1bf6172be269884ed5a1ac5aa3", "patch": "@@ -0,0 +1,14 @@\n+/* Test system default printf formatter specifiers.  */\n+/* Origin: Kai Tietz <KaiTietz.@onevision.com> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=gnu89\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+__attribute__((format(printf, 1, 2))) void foo (const char *, ...);\n+\n+void bar (long long v1, long v2, int v3)\n+{\n+  foo (\"%I64d %I32d %ld %d\\n\", v1, v2, v2, v3);\n+}"}]}