{"sha": "0d35f155c06d1d273c1ff2810f6f2bc45b839035", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQzNWYxNTVjMDZkMWQyNzNjMWZmMjgxMGY2ZjJiYzQ1YjgzOTAzNQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-11-30T01:55:24Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-11-30T01:55:24Z"}, "message": "genattrtab.c (attr_rtx_1): New function containing the majority of `attr_rtx'.\n\n\t* genattrtab.c (attr_rtx_1): New function containing the\n\tmajority of `attr_rtx'.  Move variable declarations into the\n\tscope where they are used.  Eliminate unnecessary gotos.\n\t(attr_rtx): Now just a wrapper for `attr_rtx_1' using VA_OPEN,\n\tVA_FIXEDARG, and VA_CLOSE.\n\nFrom-SVN: r47465", "tree": {"sha": "8578ac0f112a186a00b9a785bd39a4d19db3f4d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8578ac0f112a186a00b9a785bd39a4d19db3f4d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d35f155c06d1d273c1ff2810f6f2bc45b839035", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d35f155c06d1d273c1ff2810f6f2bc45b839035", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d35f155c06d1d273c1ff2810f6f2bc45b839035", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d35f155c06d1d273c1ff2810f6f2bc45b839035/comments", "author": null, "committer": null, "parents": [{"sha": "45b677bc9e532a1f201f98ed6d5acab03ab06e10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45b677bc9e532a1f201f98ed6d5acab03ab06e10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45b677bc9e532a1f201f98ed6d5acab03ab06e10"}], "stats": {"total": 68, "additions": 34, "deletions": 34}, "files": [{"sha": "af7ef49740186bd5a5242918dd145f2721a61e93", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d35f155c06d1d273c1ff2810f6f2bc45b839035/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d35f155c06d1d273c1ff2810f6f2bc45b839035/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d35f155c06d1d273c1ff2810f6f2bc45b839035", "patch": "@@ -1,3 +1,11 @@\n+2001-11-29  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* genattrtab.c (attr_rtx_1): New function containing the\n+\tmajority of `attr_rtx'.  Move variable declarations into the\n+\tscope where they are used.  Eliminate unnecessary gotos.\n+\t(attr_rtx): Now just a wrapper for `attr_rtx_1' using VA_OPEN,\n+\tVA_FIXEDARG, and VA_CLOSE.\n+\n 2001-11-30  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* config/cris/cris.c (cris_notice_update_cc): Check first"}, {"sha": "1c75b2d21cc86ab312b085d50dcae2b8a495018c", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 26, "deletions": 34, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d35f155c06d1d273c1ff2810f6f2bc45b839035/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d35f155c06d1d273c1ff2810f6f2bc45b839035/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=0d35f155c06d1d273c1ff2810f6f2bc45b839035", "patch": "@@ -365,6 +365,7 @@ rtx pic_offset_table_rtx;\n static void attr_hash_add_rtx\tPARAMS ((int, rtx));\n static void attr_hash_add_string PARAMS ((int, char *));\n static rtx attr_rtx\t\tPARAMS ((enum rtx_code, ...));\n+static rtx attr_rtx_1\t\tPARAMS ((enum rtx_code, va_list));\n static char *attr_printf\tPARAMS ((unsigned int, const char *, ...))\n   ATTRIBUTE_PRINTF_2;\n static char *attr_string        PARAMS ((const char *, int));\n@@ -541,25 +542,15 @@ attr_hash_add_string (hashcode, str)\n    rtx attr_rtx (code, [element1, ..., elementn])  */\n \n static rtx\n-attr_rtx VPARAMS ((enum rtx_code code, ...))\n+attr_rtx_1 (code, p)\n+     enum rtx_code code;\n+     va_list p;\n {\n-#ifndef ANSI_PROTOTYPES\n-  enum rtx_code code;\n-#endif\n-  va_list p;\n-  int i;\t\t/* Array indices...\t\t\t*/\n-  const char *fmt;\t/* Current rtx's format...\t\t*/\n   rtx rt_val = NULL_RTX;/* RTX to return to caller...\t\t*/\n   int hashcode;\n   struct attr_hash *h;\n   struct obstack *old_obstack = rtl_obstack;\n \n-  VA_START (p, code);\n-\n-#ifndef ANSI_PROTOTYPES\n-  code = va_arg (p, enum rtx_code);\n-#endif\n-\n   /* For each of several cases, search the hash table for an existing entry.\n      Use that entry if one is found; otherwise create a new RTL and add it\n      to the table.  */\n@@ -573,7 +564,6 @@ attr_rtx VPARAMS ((enum rtx_code code, ...))\n \t{\n \t  rt_val = rtx_alloc (code);\n \t  XEXP (rt_val, 0) = arg0;\n-\t  va_end (p);\n \t  return rt_val;\n \t}\n \n@@ -582,7 +572,7 @@ attr_rtx VPARAMS ((enum rtx_code code, ...))\n \tif (h->hashcode == hashcode\n \t    && GET_CODE (h->u.rtl) == code\n \t    && XEXP (h->u.rtl, 0) == arg0)\n-\t  goto found;\n+\t  return h->u.rtl;\n \n       if (h == 0)\n \t{\n@@ -604,7 +594,6 @@ attr_rtx VPARAMS ((enum rtx_code code, ...))\n \t  rt_val = rtx_alloc (code);\n \t  XEXP (rt_val, 0) = arg0;\n \t  XEXP (rt_val, 1) = arg1;\n-\t  va_end (p);\n \t  return rt_val;\n \t}\n \n@@ -614,7 +603,7 @@ attr_rtx VPARAMS ((enum rtx_code code, ...))\n \t    && GET_CODE (h->u.rtl) == code\n \t    && XEXP (h->u.rtl, 0) == arg0\n \t    && XEXP (h->u.rtl, 1) == arg1)\n-\t  goto found;\n+\t  return h->u.rtl;\n \n       if (h == 0)\n \t{\n@@ -637,7 +626,7 @@ attr_rtx VPARAMS ((enum rtx_code code, ...))\n \tif (h->hashcode == hashcode\n \t    && GET_CODE (h->u.rtl) == code\n \t    && XSTR (h->u.rtl, 0) == arg0)\n-\t  goto found;\n+\t  return h->u.rtl;\n \n       if (h == 0)\n \t{\n@@ -659,7 +648,7 @@ attr_rtx VPARAMS ((enum rtx_code code, ...))\n \t    && GET_CODE (h->u.rtl) == code\n \t    && XSTR (h->u.rtl, 0) == arg0\n \t    && XSTR (h->u.rtl, 1) == arg1)\n-\t  goto found;\n+\t  return h->u.rtl;\n \n       if (h == 0)\n \t{\n@@ -673,19 +662,16 @@ attr_rtx VPARAMS ((enum rtx_code code, ...))\n     {\n       HOST_WIDE_INT arg0 = va_arg (p, HOST_WIDE_INT);\n       if (arg0 == 0)\n-\t{\n-\t  va_end (p);\n-\t  return false_rtx;\n-\t}\n-      if (arg0 == 1)\n-\t{\n-\t  va_end (p);\n-\t  return true_rtx;\n-\t}\n-      goto nohash;\n+\treturn false_rtx;\n+      else if (arg0 == 1)\n+\treturn true_rtx;\n+      else\n+\tgoto nohash;\n     }\n   else\n     {\n+      int i;\t\t/* Array indices...\t\t\t*/\n+      const char *fmt;\t/* Current rtx's format...\t\t*/\n     nohash:\n       rt_val = rtx_alloc (code);\t/* Allocate the storage space.  */\n \n@@ -722,19 +708,25 @@ attr_rtx VPARAMS ((enum rtx_code code, ...))\n \t      abort ();\n \t    }\n \t}\n-      va_end (p);\n       return rt_val;\n     }\n \n   rtl_obstack = old_obstack;\n-  va_end (p);\n   attr_hash_add_rtx (hashcode, rt_val);\n   RTX_INTEGRATED_P (rt_val) = 1;\n   return rt_val;\n+}\n \n- found:\n-  va_end (p);\n-  return h->u.rtl;\n+static rtx\n+attr_rtx VPARAMS ((enum rtx_code code, ...))\n+{\n+  rtx result;\n+  \n+  VA_OPEN (p, code);\n+  VA_FIXEDARG (p, enum rtx_code, code);\n+  result = attr_rtx_1 (code, p);\n+  VA_CLOSE (p);\n+  return result;\n }\n \n /* Create a new string printed with the printf line arguments into a space"}]}