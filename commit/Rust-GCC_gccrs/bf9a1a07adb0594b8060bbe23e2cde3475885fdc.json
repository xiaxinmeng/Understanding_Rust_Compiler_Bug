{"sha": "bf9a1a07adb0594b8060bbe23e2cde3475885fdc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY5YTFhMDdhZGIwNTk0YjgwNjBiYmUyM2UyY2RlMzQ3NTg4NWZkYw==", "commit": {"author": {"name": "Ilya Verbin", "email": "ilya.verbin@intel.com", "date": "2016-05-25T15:08:14Z"}, "committer": {"name": "Ilya Verbin", "email": "iverbin@gcc.gnu.org", "date": "2016-05-25T15:08:14Z"}, "message": "AVX-512F: Add vectorizer support builtins\n\ngcc/\n\t* config/i386/i386-builtin-types.def: Add V16SI_FTYPE_V16SF,\n\tV8DF_FTYPE_V8DF_ROUND, V16SF_FTYPE_V16SF_ROUND, V16SI_FTYPE_V16SF_ROUND.\n\t* config/i386/i386.c (enum ix86_builtins): Add\n\tIX86_BUILTIN_CVTPS2DQ512_MASK, IX86_BUILTIN_FLOORPS512,\n\tIX86_BUILTIN_FLOORPD512, IX86_BUILTIN_CEILPS512, IX86_BUILTIN_CEILPD512,\n\tIX86_BUILTIN_TRUNCPS512, IX86_BUILTIN_TRUNCPD512,\n\tIX86_BUILTIN_CVTPS2DQ512, IX86_BUILTIN_VEC_PACK_SFIX512,\n\tIX86_BUILTIN_FLOORPS_SFIX512, IX86_BUILTIN_CEILPS_SFIX512,\n\tIX86_BUILTIN_ROUNDPS_AZ_SFIX512.\n\t(builtin_description bdesc_args): Add __builtin_ia32_floorps512,\n\t__builtin_ia32_ceilps512, __builtin_ia32_truncps512,\n\t__builtin_ia32_floorpd512, __builtin_ia32_ceilpd512,\n\t__builtin_ia32_truncpd512, __builtin_ia32_cvtps2dq512,\n\t__builtin_ia32_vec_pack_sfix512, __builtin_ia32_roundps_az_sfix512,\n\t__builtin_ia32_floorps_sfix512, __builtin_ia32_ceilps_sfix512.\n\tChange IX86_BUILTIN_CVTPS2DQ512 to IX86_BUILTIN_CVTPS2DQ512_MASK for\n\t__builtin_ia32_cvtps2dq512_mask.\n\t(ix86_expand_args_builtin): Handle V8DF_FTYPE_V8DF_ROUND,\n\tV16SF_FTYPE_V16SF_ROUND, V16SI_FTYPE_V16SF_ROUND, V16SI_FTYPE_V16SF.\n\t(ix86_builtin_vectorized_function): Handle builtins mentioned above.\n\t* config/i386/sse.md\n\t(<mask_codefor>avx512f_fix_notruncv16sfv16si<mask_name><round_name>):\n\tRename to ...\n\t(avx512f_fix_notruncv16sfv16si<mask_name><round_name>): ... this.\n\t(<mask_codefor>avx512f_cvtpd2dq512<mask_name><round_name>): Rename\n\tto ...\n\t(avx512f_cvtpd2dq512<mask_name><round_name>): ... this.\n\t(avx512f_vec_pack_sfix_v8df): New define_expand.\n\t(avx512f_roundpd512): Rename to ...\n\t(avx512f_round<castmode>512): ... this.  Change iterator.\n\t(avx512f_roundps512_sfix): New define_expand.\n\t(round<mode>2_sfix): Change iterator.\ngcc/testsuite/\n\t* gcc.target/i386/avx512f-ceil-vec-1.c: New test.\n\t* gcc.target/i386/avx512f-ceil-vec-2.c: New test.\n\t* gcc.target/i386/avx512f-ceilf-sfix-vec-1.c: New test.\n\t* gcc.target/i386/avx512f-ceilf-sfix-vec-2.c: New test.\n\t* gcc.target/i386/avx512f-ceilf-vec-1.c: New test.\n\t* gcc.target/i386/avx512f-ceilf-vec-2.c: New test.\n\t* gcc.target/i386/avx512f-floor-vec-1.c: New test.\n\t* gcc.target/i386/avx512f-floor-vec-2.c: New test.\n\t* gcc.target/i386/avx512f-floorf-sfix-vec-1.c: New test.\n\t* gcc.target/i386/avx512f-floorf-sfix-vec-2.c: New test.\n\t* gcc.target/i386/avx512f-floorf-vec-1.c: New test.\n\t* gcc.target/i386/avx512f-floorf-vec-2.c: New test.\n\t* gcc.target/i386/avx512f-rint-sfix-vec-1.c: New test.\n\t* gcc.target/i386/avx512f-rint-sfix-vec-2.c: New test.\n\t* gcc.target/i386/avx512f-rintf-sfix-vec-1.c: New test.\n\t* gcc.target/i386/avx512f-rintf-sfix-vec-2.c: New test.\n\t* gcc.target/i386/avx512f-round-sfix-vec-1.c: New test.\n\t* gcc.target/i386/avx512f-round-sfix-vec-2.c: New test.\n\t* gcc.target/i386/avx512f-roundf-sfix-vec-1.c: New test.\n\t* gcc.target/i386/avx512f-roundf-sfix-vec-2.c: New test.\n\t* gcc.target/i386/avx512f-trunc-vec-1.c: New test.\n\t* gcc.target/i386/avx512f-trunc-vec-2.c: New test.\n\t* gcc.target/i386/avx512f-truncf-vec-1.c: New test.\n\t* gcc.target/i386/avx512f-truncf-vec-2.c: New test.\n\nFrom-SVN: r236709", "tree": {"sha": "03e1ffc0c53a6ac07871518f7f5c27a48b4b624a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03e1ffc0c53a6ac07871518f7f5c27a48b4b624a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf9a1a07adb0594b8060bbe23e2cde3475885fdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf9a1a07adb0594b8060bbe23e2cde3475885fdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf9a1a07adb0594b8060bbe23e2cde3475885fdc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/comments", "author": null, "committer": null, "parents": [{"sha": "a23faf7a4f172a09bfb095081491dff1225cbf52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a23faf7a4f172a09bfb095081491dff1225cbf52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a23faf7a4f172a09bfb095081491dff1225cbf52"}], "stats": {"total": 864, "additions": 854, "deletions": 10}, "files": [{"sha": "4af0254ca987a83d11b66f1e7f655f1368d94117", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf9a1a07adb0594b8060bbe23e2cde3475885fdc", "patch": "@@ -1,3 +1,38 @@\n+2016-05-25  Ilya Verbin  <ilya.verbin@intel.com>\n+\n+\t* config/i386/i386-builtin-types.def: Add V16SI_FTYPE_V16SF,\n+\tV8DF_FTYPE_V8DF_ROUND, V16SF_FTYPE_V16SF_ROUND, V16SI_FTYPE_V16SF_ROUND.\n+\t* config/i386/i386.c (enum ix86_builtins): Add\n+\tIX86_BUILTIN_CVTPS2DQ512_MASK, IX86_BUILTIN_FLOORPS512,\n+\tIX86_BUILTIN_FLOORPD512, IX86_BUILTIN_CEILPS512, IX86_BUILTIN_CEILPD512,\n+\tIX86_BUILTIN_TRUNCPS512, IX86_BUILTIN_TRUNCPD512,\n+\tIX86_BUILTIN_CVTPS2DQ512, IX86_BUILTIN_VEC_PACK_SFIX512,\n+\tIX86_BUILTIN_FLOORPS_SFIX512, IX86_BUILTIN_CEILPS_SFIX512,\n+\tIX86_BUILTIN_ROUNDPS_AZ_SFIX512.\n+\t(builtin_description bdesc_args): Add __builtin_ia32_floorps512,\n+\t__builtin_ia32_ceilps512, __builtin_ia32_truncps512,\n+\t__builtin_ia32_floorpd512, __builtin_ia32_ceilpd512,\n+\t__builtin_ia32_truncpd512, __builtin_ia32_cvtps2dq512,\n+\t__builtin_ia32_vec_pack_sfix512, __builtin_ia32_roundps_az_sfix512,\n+\t__builtin_ia32_floorps_sfix512, __builtin_ia32_ceilps_sfix512.\n+\tChange IX86_BUILTIN_CVTPS2DQ512 to IX86_BUILTIN_CVTPS2DQ512_MASK for\n+\t__builtin_ia32_cvtps2dq512_mask.\n+\t(ix86_expand_args_builtin): Handle V8DF_FTYPE_V8DF_ROUND,\n+\tV16SF_FTYPE_V16SF_ROUND, V16SI_FTYPE_V16SF_ROUND, V16SI_FTYPE_V16SF.\n+\t(ix86_builtin_vectorized_function): Handle builtins mentioned above.\n+\t* config/i386/sse.md\n+\t(<mask_codefor>avx512f_fix_notruncv16sfv16si<mask_name><round_name>):\n+\tRename to ...\n+\t(avx512f_fix_notruncv16sfv16si<mask_name><round_name>): ... this.\n+\t(<mask_codefor>avx512f_cvtpd2dq512<mask_name><round_name>): Rename\n+\tto ...\n+\t(avx512f_cvtpd2dq512<mask_name><round_name>): ... this.\n+\t(avx512f_vec_pack_sfix_v8df): New define_expand.\n+\t(avx512f_roundpd512): Rename to ...\n+\t(avx512f_round<castmode>512): ... this.  Change iterator.\n+\t(avx512f_roundps512_sfix): New define_expand.\n+\t(round<mode>2_sfix): Change iterator.\n+\n 2016-05-25  Nick Clifton  <nickc@redhat.com>\n \n \t* config/msp430/msp430.c (msp430_attr): Produce an error if a"}, {"sha": "c66f65108f8aebebbccc651a0db4c035858cd855", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=bf9a1a07adb0594b8060bbe23e2cde3475885fdc", "patch": "@@ -294,6 +294,7 @@ DEF_FUNCTION_TYPE (V8DF, V4DF)\n DEF_FUNCTION_TYPE (V8DF, V2DF)\n DEF_FUNCTION_TYPE (V16SI, V4SI)\n DEF_FUNCTION_TYPE (V16SI, V8SI)\n+DEF_FUNCTION_TYPE (V16SI, V16SF)\n DEF_FUNCTION_TYPE (V16SI, V16SI, V16SI, UHI)\n DEF_FUNCTION_TYPE (V8DI, V8DI, V8DI, UQI)\n DEF_FUNCTION_TYPE (V8DI, PV8DI)\n@@ -1061,14 +1062,17 @@ DEF_FUNCTION_TYPE (VOID, QI, V8DI, PCINT, INT, INT)\n \n DEF_FUNCTION_TYPE_ALIAS (V2DF_FTYPE_V2DF, ROUND)\n DEF_FUNCTION_TYPE_ALIAS (V4DF_FTYPE_V4DF, ROUND)\n+DEF_FUNCTION_TYPE_ALIAS (V8DF_FTYPE_V8DF, ROUND)\n DEF_FUNCTION_TYPE_ALIAS (V4SF_FTYPE_V4SF, ROUND)\n DEF_FUNCTION_TYPE_ALIAS (V8SF_FTYPE_V8SF, ROUND)\n+DEF_FUNCTION_TYPE_ALIAS (V16SF_FTYPE_V16SF, ROUND)\n \n DEF_FUNCTION_TYPE_ALIAS (V4SI_FTYPE_V2DF_V2DF, ROUND)\n DEF_FUNCTION_TYPE_ALIAS (V8SI_FTYPE_V4DF_V4DF, ROUND)\n DEF_FUNCTION_TYPE_ALIAS (V16SI_FTYPE_V8DF_V8DF, ROUND)\n DEF_FUNCTION_TYPE_ALIAS (V4SI_FTYPE_V4SF, ROUND)\n DEF_FUNCTION_TYPE_ALIAS (V8SI_FTYPE_V8SF, ROUND)\n+DEF_FUNCTION_TYPE_ALIAS (V16SI_FTYPE_V16SF, ROUND)\n \n DEF_FUNCTION_TYPE_ALIAS (INT_FTYPE_V2DF_V2DF, PTEST)\n DEF_FUNCTION_TYPE_ALIAS (INT_FTYPE_V2DI_V2DI, PTEST)"}, {"sha": "9a75bed92d097826b6745a756a4897ec30fc799c", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 51, "deletions": 3, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=bf9a1a07adb0594b8060bbe23e2cde3475885fdc", "patch": "@@ -30935,7 +30935,7 @@ enum ix86_builtins\n   IX86_BUILTIN_CVTPD2PS512,\n   IX86_BUILTIN_CVTPD2UDQ512,\n   IX86_BUILTIN_CVTPH2PS512,\n-  IX86_BUILTIN_CVTPS2DQ512,\n+  IX86_BUILTIN_CVTPS2DQ512_MASK,\n   IX86_BUILTIN_CVTPS2PD512,\n   IX86_BUILTIN_CVTPS2PH512,\n   IX86_BUILTIN_CVTPS2UDQ512,\n@@ -32375,14 +32375,25 @@ enum ix86_builtins\n   IX86_BUILTIN_COPYSIGNQ,\n \n   /* Vectorizer support builtins.  */\n-  IX86_BUILTIN_CEILPD_VEC_PACK_SFIX512,\n   IX86_BUILTIN_CPYSGNPS,\n   IX86_BUILTIN_CPYSGNPD,\n   IX86_BUILTIN_CPYSGNPS256,\n   IX86_BUILTIN_CPYSGNPS512,\n   IX86_BUILTIN_CPYSGNPD256,\n   IX86_BUILTIN_CPYSGNPD512,\n+  IX86_BUILTIN_FLOORPS512,\n+  IX86_BUILTIN_FLOORPD512,\n+  IX86_BUILTIN_CEILPS512,\n+  IX86_BUILTIN_CEILPD512,\n+  IX86_BUILTIN_TRUNCPS512,\n+  IX86_BUILTIN_TRUNCPD512,\n+  IX86_BUILTIN_CVTPS2DQ512,\n+  IX86_BUILTIN_VEC_PACK_SFIX512,\n+  IX86_BUILTIN_FLOORPS_SFIX512,\n   IX86_BUILTIN_FLOORPD_VEC_PACK_SFIX512,\n+  IX86_BUILTIN_CEILPS_SFIX512,\n+  IX86_BUILTIN_CEILPD_VEC_PACK_SFIX512,\n+  IX86_BUILTIN_ROUNDPS_AZ_SFIX512,\n   IX86_BUILTIN_ROUNDPD_AZ_VEC_PACK_SFIX512,\n \n \n@@ -34197,6 +34208,17 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_sqrtv8df2, \"__builtin_ia32_sqrtpd512\", IX86_BUILTIN_SQRTPD512, UNKNOWN, (int) V8DF_FTYPE_V8DF },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_sqrtv16sf2, \"__builtin_ia32_sqrtps512\", IX86_BUILTIN_SQRTPS_NR512, UNKNOWN, (int) V16SF_FTYPE_V16SF },\n   { OPTION_MASK_ISA_AVX512ER, CODE_FOR_avx512er_exp2v16sf, \"__builtin_ia32_exp2ps\", IX86_BUILTIN_EXP2PS, UNKNOWN, (int) V16SF_FTYPE_V16SF },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_roundps512, \"__builtin_ia32_floorps512\", IX86_BUILTIN_FLOORPS512, (enum rtx_code) ROUND_FLOOR, (int) V16SF_FTYPE_V16SF_ROUND },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_roundps512, \"__builtin_ia32_ceilps512\", IX86_BUILTIN_CEILPS512, (enum rtx_code) ROUND_CEIL, (int) V16SF_FTYPE_V16SF_ROUND },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_roundps512, \"__builtin_ia32_truncps512\", IX86_BUILTIN_TRUNCPS512, (enum rtx_code) ROUND_TRUNC, (int) V16SF_FTYPE_V16SF_ROUND },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_roundpd512, \"__builtin_ia32_floorpd512\", IX86_BUILTIN_FLOORPD512, (enum rtx_code) ROUND_FLOOR, (int) V8DF_FTYPE_V8DF_ROUND },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_roundpd512, \"__builtin_ia32_ceilpd512\", IX86_BUILTIN_CEILPD512, (enum rtx_code) ROUND_CEIL, (int) V8DF_FTYPE_V8DF_ROUND },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_roundpd512, \"__builtin_ia32_truncpd512\", IX86_BUILTIN_TRUNCPD512, (enum rtx_code) ROUND_TRUNC, (int) V8DF_FTYPE_V8DF_ROUND },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fix_notruncv16sfv16si, \"__builtin_ia32_cvtps2dq512\", IX86_BUILTIN_CVTPS2DQ512, UNKNOWN, (int) V16SI_FTYPE_V16SF },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_vec_pack_sfix_v8df, \"__builtin_ia32_vec_pack_sfix512\", IX86_BUILTIN_VEC_PACK_SFIX512, UNKNOWN, (int) V16SI_FTYPE_V8DF_V8DF },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_roundv16sf2_sfix, \"__builtin_ia32_roundps_az_sfix512\", IX86_BUILTIN_ROUNDPS_AZ_SFIX512, UNKNOWN, (int) V16SI_FTYPE_V16SF },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_roundps512_sfix, \"__builtin_ia32_floorps_sfix512\", IX86_BUILTIN_FLOORPS_SFIX512, (enum rtx_code) ROUND_FLOOR, (int) V16SI_FTYPE_V16SF_ROUND },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_roundps512_sfix, \"__builtin_ia32_ceilps_sfix512\", IX86_BUILTIN_CEILPS_SFIX512, (enum rtx_code) ROUND_CEIL, (int) V16SI_FTYPE_V16SF_ROUND },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_roundv8df2_vec_pack_sfix, \"__builtin_ia32_roundpd_az_vec_pack_sfix512\", IX86_BUILTIN_ROUNDPD_AZ_VEC_PACK_SFIX512, UNKNOWN, (int) V16SI_FTYPE_V8DF_V8DF },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_roundpd_vec_pack_sfix512, \"__builtin_ia32_floorpd_vec_pack_sfix512\", IX86_BUILTIN_FLOORPD_VEC_PACK_SFIX512, (enum rtx_code) ROUND_FLOOR, (int) V16SI_FTYPE_V8DF_V8DF_ROUND },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_roundpd_vec_pack_sfix512, \"__builtin_ia32_ceilpd_vec_pack_sfix512\", IX86_BUILTIN_CEILPD_VEC_PACK_SFIX512, (enum rtx_code) ROUND_CEIL, (int) V16SI_FTYPE_V8DF_V8DF_ROUND },\n@@ -35113,7 +35135,7 @@ static const struct builtin_description bdesc_round_args[] =\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_cvtpd2ps512_mask_round,  \"__builtin_ia32_cvtpd2ps512_mask\", IX86_BUILTIN_CVTPD2PS512, UNKNOWN, (int) V8SF_FTYPE_V8DF_V8SF_QI_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_ufix_notruncv8dfv8si2_mask_round, \"__builtin_ia32_cvtpd2udq512_mask\", IX86_BUILTIN_CVTPD2UDQ512, UNKNOWN, (int) V8SI_FTYPE_V8DF_V8SI_QI_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_vcvtph2ps512_mask_round,  \"__builtin_ia32_vcvtph2ps512_mask\", IX86_BUILTIN_CVTPH2PS512, UNKNOWN, (int) V16SF_FTYPE_V16HI_V16SF_HI_INT },\n-  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fix_notruncv16sfv16si_mask_round, \"__builtin_ia32_cvtps2dq512_mask\", IX86_BUILTIN_CVTPS2DQ512, UNKNOWN, (int) V16SI_FTYPE_V16SF_V16SI_HI_INT },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fix_notruncv16sfv16si_mask_round, \"__builtin_ia32_cvtps2dq512_mask\", IX86_BUILTIN_CVTPS2DQ512_MASK, UNKNOWN, (int) V16SI_FTYPE_V16SF_V16SI_HI_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_cvtps2pd512_mask_round, \"__builtin_ia32_cvtps2pd512_mask\", IX86_BUILTIN_CVTPS2PD512, UNKNOWN, (int) V8DF_FTYPE_V8SF_V8DF_QI_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_ufix_notruncv16sfv16si_mask_round, \"__builtin_ia32_cvtps2udq512_mask\", IX86_BUILTIN_CVTPS2UDQ512, UNKNOWN, (int) V16SI_FTYPE_V16SF_V16SI_HI_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_sse2_cvtsd2ss_round, \"__builtin_ia32_cvtsd2ss_round\", IX86_BUILTIN_CVTSD2SS_ROUND, UNKNOWN, (int) V4SF_FTYPE_V4SF_V2DF_INT },\n@@ -38690,10 +38712,13 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     {\n     case V2DF_FTYPE_V2DF_ROUND:\n     case V4DF_FTYPE_V4DF_ROUND:\n+    case V8DF_FTYPE_V8DF_ROUND:\n     case V4SF_FTYPE_V4SF_ROUND:\n     case V8SF_FTYPE_V8SF_ROUND:\n+    case V16SF_FTYPE_V16SF_ROUND:\n     case V4SI_FTYPE_V4SF_ROUND:\n     case V8SI_FTYPE_V8SF_ROUND:\n+    case V16SI_FTYPE_V16SF_ROUND:\n       return ix86_expand_sse_round (d, exp, target);\n     case V4SI_FTYPE_V2DF_V2DF_ROUND:\n     case V8SI_FTYPE_V4DF_V4DF_ROUND:\n@@ -38807,6 +38832,7 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V16SI_FTYPE_V8SI:\n     case V16SF_FTYPE_V4SF:\n     case V16SI_FTYPE_V4SI:\n+    case V16SI_FTYPE_V16SF:\n     case V16SF_FTYPE_V16SF:\n     case V8DI_FTYPE_UQI:\n     case V8DF_FTYPE_V4DF:\n@@ -42536,6 +42562,8 @@ ix86_builtin_vectorized_function (unsigned int fn, tree type_out,\n \t    return ix86_get_builtin (IX86_BUILTIN_FLOORPS_SFIX);\n \t  else if (out_n == 8 && in_n == 8)\n \t    return ix86_get_builtin (IX86_BUILTIN_FLOORPS_SFIX256);\n+\t  else if (out_n == 16 && in_n == 16)\n+\t    return ix86_get_builtin (IX86_BUILTIN_FLOORPS_SFIX512);\n \t}\n       break;\n \n@@ -42561,6 +42589,8 @@ ix86_builtin_vectorized_function (unsigned int fn, tree type_out,\n \t    return ix86_get_builtin (IX86_BUILTIN_CEILPS_SFIX);\n \t  else if (out_n == 8 && in_n == 8)\n \t    return ix86_get_builtin (IX86_BUILTIN_CEILPS_SFIX256);\n+\t  else if (out_n == 16 && in_n == 16)\n+\t    return ix86_get_builtin (IX86_BUILTIN_CEILPS_SFIX512);\n \t}\n       break;\n \n@@ -42573,13 +42603,17 @@ ix86_builtin_vectorized_function (unsigned int fn, tree type_out,\n \t    return ix86_get_builtin (IX86_BUILTIN_VEC_PACK_SFIX);\n \t  else if (out_n == 8 && in_n == 4)\n \t    return ix86_get_builtin (IX86_BUILTIN_VEC_PACK_SFIX256);\n+\t  else if (out_n == 16 && in_n == 8)\n+\t    return ix86_get_builtin (IX86_BUILTIN_VEC_PACK_SFIX512);\n \t}\n       if (out_mode == SImode && in_mode == SFmode)\n \t{\n \t  if (out_n == 4 && in_n == 4)\n \t    return ix86_get_builtin (IX86_BUILTIN_CVTPS2DQ);\n \t  else if (out_n == 8 && in_n == 8)\n \t    return ix86_get_builtin (IX86_BUILTIN_CVTPS2DQ256);\n+\t  else if (out_n == 16 && in_n == 16)\n+\t    return ix86_get_builtin (IX86_BUILTIN_CVTPS2DQ512);\n \t}\n       break;\n \n@@ -42605,6 +42639,8 @@ ix86_builtin_vectorized_function (unsigned int fn, tree type_out,\n \t    return ix86_get_builtin (IX86_BUILTIN_ROUNDPS_AZ_SFIX);\n \t  else if (out_n == 8 && in_n == 8)\n \t    return ix86_get_builtin (IX86_BUILTIN_ROUNDPS_AZ_SFIX256);\n+\t  else if (out_n == 16 && in_n == 16)\n+\t    return ix86_get_builtin (IX86_BUILTIN_ROUNDPS_AZ_SFIX512);\n \t}\n       break;\n \n@@ -42619,13 +42655,17 @@ ix86_builtin_vectorized_function (unsigned int fn, tree type_out,\n \t    return ix86_get_builtin (IX86_BUILTIN_FLOORPD);\n \t  else if (out_n == 4 && in_n == 4)\n \t    return ix86_get_builtin (IX86_BUILTIN_FLOORPD256);\n+\t  else if (out_n == 8 && in_n == 8)\n+\t    return ix86_get_builtin (IX86_BUILTIN_FLOORPD512);\n \t}\n       if (out_mode == SFmode && in_mode == SFmode)\n \t{\n \t  if (out_n == 4 && in_n == 4)\n \t    return ix86_get_builtin (IX86_BUILTIN_FLOORPS);\n \t  else if (out_n == 8 && in_n == 8)\n \t    return ix86_get_builtin (IX86_BUILTIN_FLOORPS256);\n+\t  else if (out_n == 16 && in_n == 16)\n+\t    return ix86_get_builtin (IX86_BUILTIN_FLOORPS512);\n \t}\n       break;\n \n@@ -42640,13 +42680,17 @@ ix86_builtin_vectorized_function (unsigned int fn, tree type_out,\n \t    return ix86_get_builtin (IX86_BUILTIN_CEILPD);\n \t  else if (out_n == 4 && in_n == 4)\n \t    return ix86_get_builtin (IX86_BUILTIN_CEILPD256);\n+\t  else if (out_n == 8 && in_n == 8)\n+\t    return ix86_get_builtin (IX86_BUILTIN_CEILPD512);\n \t}\n       if (out_mode == SFmode && in_mode == SFmode)\n \t{\n \t  if (out_n == 4 && in_n == 4)\n \t    return ix86_get_builtin (IX86_BUILTIN_CEILPS);\n \t  else if (out_n == 8 && in_n == 8)\n \t    return ix86_get_builtin (IX86_BUILTIN_CEILPS256);\n+\t  else if (out_n == 16 && in_n == 16)\n+\t    return ix86_get_builtin (IX86_BUILTIN_CEILPS512);\n \t}\n       break;\n \n@@ -42661,13 +42705,17 @@ ix86_builtin_vectorized_function (unsigned int fn, tree type_out,\n \t    return ix86_get_builtin (IX86_BUILTIN_TRUNCPD);\n \t  else if (out_n == 4 && in_n == 4)\n \t    return ix86_get_builtin (IX86_BUILTIN_TRUNCPD256);\n+\t  else if (out_n == 8 && in_n == 8)\n+\t    return ix86_get_builtin (IX86_BUILTIN_TRUNCPD512);\n \t}\n       if (out_mode == SFmode && in_mode == SFmode)\n \t{\n \t  if (out_n == 4 && in_n == 4)\n \t    return ix86_get_builtin (IX86_BUILTIN_TRUNCPS);\n \t  else if (out_n == 8 && in_n == 8)\n \t    return ix86_get_builtin (IX86_BUILTIN_TRUNCPS256);\n+\t  else if (out_n == 16 && in_n == 16)\n+\t    return ix86_get_builtin (IX86_BUILTIN_TRUNCPS512);\n \t}\n       break;\n "}, {"sha": "2297ca2fd77a250027dd7729007ff09b8c56580d", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=bf9a1a07adb0594b8060bbe23e2cde3475885fdc", "patch": "@@ -4242,7 +4242,7 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"<mask_codefor>avx512f_fix_notruncv16sfv16si<mask_name><round_name>\"\n+(define_insn \"avx512f_fix_notruncv16sfv16si<mask_name><round_name>\"\n   [(set (match_operand:V16SI 0 \"register_operand\" \"=v\")\n \t(unspec:V16SI\n \t  [(match_operand:V16SF 1 \"<round_nimm_predicate>\" \"<round_constraint>\")]\n@@ -4799,7 +4799,7 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"V2DF\")])\n \n-(define_insn \"<mask_codefor>avx512f_cvtpd2dq512<mask_name><round_name>\"\n+(define_insn \"avx512f_cvtpd2dq512<mask_name><round_name>\"\n   [(set (match_operand:V8SI 0 \"register_operand\" \"=v\")\n \t(unspec:V8SI\n \t  [(match_operand:V8DF 1 \"<round_nimm_predicate>\" \"<round_constraint>\")]\n@@ -5802,6 +5802,23 @@\n   DONE;\n })\n \n+(define_expand \"avx512f_vec_pack_sfix_v8df\"\n+  [(match_operand:V16SI 0 \"register_operand\")\n+   (match_operand:V8DF 1 \"nonimmediate_operand\")\n+   (match_operand:V8DF 2 \"nonimmediate_operand\")]\n+  \"TARGET_AVX512F\"\n+{\n+  rtx r1, r2;\n+\n+  r1 = gen_reg_rtx (V8SImode);\n+  r2 = gen_reg_rtx (V8SImode);\n+\n+  emit_insn (gen_avx512f_cvtpd2dq512 (r1, operands[1]));\n+  emit_insn (gen_avx512f_cvtpd2dq512 (r2, operands[2]));\n+  emit_insn (gen_avx_vec_concatv16si (operands[0], r1, r2));\n+  DONE;\n+})\n+\n (define_expand \"vec_pack_sfix_v4df\"\n   [(match_operand:V8SI 0 \"register_operand\")\n    (match_operand:V4DF 1 \"nonimmediate_operand\")\n@@ -15027,13 +15044,25 @@\n   DONE;\n })\n \n-(define_expand \"avx512f_roundpd512\"\n-  [(match_operand:V8DF 0 \"register_operand\")\n-   (match_operand:V8DF 1 \"nonimmediate_operand\")\n+(define_expand \"avx512f_round<castmode>512\"\n+  [(match_operand:VF_512 0 \"register_operand\")\n+   (match_operand:VF_512 1 \"nonimmediate_operand\")\n+   (match_operand:SI 2 \"const_0_to_15_operand\")]\n+  \"TARGET_AVX512F\"\n+{\n+  emit_insn (gen_avx512f_rndscale<mode> (operands[0], operands[1], operands[2]));\n+  DONE;\n+})\n+\n+(define_expand \"avx512f_roundps512_sfix\"\n+  [(match_operand:V16SI 0 \"register_operand\")\n+   (match_operand:V16SF 1 \"nonimmediate_operand\")\n    (match_operand:SI 2 \"const_0_to_15_operand\")]\n   \"TARGET_AVX512F\"\n {\n-  emit_insn (gen_avx512f_rndscalev8df (operands[0], operands[1], operands[2]));\n+  rtx tmp = gen_reg_rtx (V16SFmode);\n+  emit_insn (gen_avx512f_rndscalev16sf (tmp, operands[1], operands[2]));\n+  emit_insn (gen_fix_truncv16sfv16si2 (operands[0], tmp));\n   DONE;\n })\n \n@@ -15134,7 +15163,7 @@\n \n (define_expand \"round<mode>2_sfix\"\n   [(match_operand:<sseintvecmode> 0 \"register_operand\")\n-   (match_operand:VF1_128_256 1 \"register_operand\")]\n+   (match_operand:VF1 1 \"register_operand\")]\n   \"TARGET_ROUND && !flag_trapping_math\"\n {\n   rtx tmp = gen_reg_rtx (<MODE>mode);"}, {"sha": "8070adb9df081d86cf2005f1cbaaa204266ee79a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bf9a1a07adb0594b8060bbe23e2cde3475885fdc", "patch": "@@ -1,3 +1,30 @@\n+2016-05-25  Ilya Verbin  <ilya.verbin@intel.com>\n+\n+\t* gcc.target/i386/avx512f-ceil-vec-1.c: New test.\n+\t* gcc.target/i386/avx512f-ceil-vec-2.c: New test.\n+\t* gcc.target/i386/avx512f-ceilf-sfix-vec-1.c: New test.\n+\t* gcc.target/i386/avx512f-ceilf-sfix-vec-2.c: New test.\n+\t* gcc.target/i386/avx512f-ceilf-vec-1.c: New test.\n+\t* gcc.target/i386/avx512f-ceilf-vec-2.c: New test.\n+\t* gcc.target/i386/avx512f-floor-vec-1.c: New test.\n+\t* gcc.target/i386/avx512f-floor-vec-2.c: New test.\n+\t* gcc.target/i386/avx512f-floorf-sfix-vec-1.c: New test.\n+\t* gcc.target/i386/avx512f-floorf-sfix-vec-2.c: New test.\n+\t* gcc.target/i386/avx512f-floorf-vec-1.c: New test.\n+\t* gcc.target/i386/avx512f-floorf-vec-2.c: New test.\n+\t* gcc.target/i386/avx512f-rint-sfix-vec-1.c: New test.\n+\t* gcc.target/i386/avx512f-rint-sfix-vec-2.c: New test.\n+\t* gcc.target/i386/avx512f-rintf-sfix-vec-1.c: New test.\n+\t* gcc.target/i386/avx512f-rintf-sfix-vec-2.c: New test.\n+\t* gcc.target/i386/avx512f-round-sfix-vec-1.c: New test.\n+\t* gcc.target/i386/avx512f-round-sfix-vec-2.c: New test.\n+\t* gcc.target/i386/avx512f-roundf-sfix-vec-1.c: New test.\n+\t* gcc.target/i386/avx512f-roundf-sfix-vec-2.c: New test.\n+\t* gcc.target/i386/avx512f-trunc-vec-1.c: New test.\n+\t* gcc.target/i386/avx512f-trunc-vec-2.c: New test.\n+\t* gcc.target/i386/avx512f-truncf-vec-1.c: New test.\n+\t* gcc.target/i386/avx512f-truncf-vec-2.c: New test.\n+\n 2016-05-25  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/71265"}, {"sha": "fc48b1572b9b66a6db82a91e281c745c79b8860e", "filename": "gcc/testsuite/gcc.target/i386/avx512f-ceil-vec-1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-ceil-vec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-ceil-vec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-ceil-vec-1.c?ref=bf9a1a07adb0594b8060bbe23e2cde3475885fdc", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#define __NO_MATH_INLINES\n+#include <math.h>\n+#include \"avx512f-check.h\"\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (double *src)\n+{\n+  int i, sign = 1;\n+  double f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+avx512f_test (void)\n+{\n+  double a[NUM];\n+  double r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = ceil (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != ceil (a[i]))\n+      abort();\n+}"}, {"sha": "bf8af064cfe5065ea4f75dc9e125ee89450bfa4b", "filename": "gcc/testsuite/gcc.target/i386/avx512f-ceil-vec-2.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-ceil-vec-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-ceil-vec-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-ceil-vec-2.c?ref=bf9a1a07adb0594b8060bbe23e2cde3475885fdc", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx512f\" } */\n+\n+#include \"avx512f-ceil-vec-1.c\"\n+\n+/* { dg-final { scan-assembler-times \"vrndscalepd\\[^\\n\\]+zmm\\[0-9\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */"}, {"sha": "c6d53d89fc6e0926abff551519e127b59e42cbd4", "filename": "gcc/testsuite/gcc.target/i386/avx512f-ceilf-sfix-vec-1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-ceilf-sfix-vec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-ceilf-sfix-vec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-ceilf-sfix-vec-1.c?ref=bf9a1a07adb0594b8060bbe23e2cde3475885fdc", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#define __NO_MATH_INLINES\n+#include <math.h>\n+#include \"avx512f-check.h\"\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (float *src)\n+{\n+  int i, sign = 1;\n+  float f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+avx512f_test (void)\n+{\n+  float a[NUM];\n+  int r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = (int) ceilf (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != (int) ceilf (a[i]))\n+      abort();\n+}"}, {"sha": "80e594dbfa40230f0f85f0c4d881fdc178b94473", "filename": "gcc/testsuite/gcc.target/i386/avx512f-ceilf-sfix-vec-2.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-ceilf-sfix-vec-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-ceilf-sfix-vec-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-ceilf-sfix-vec-2.c?ref=bf9a1a07adb0594b8060bbe23e2cde3475885fdc", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx512f\" } */\n+\n+#include \"avx512f-ceilf-sfix-vec-1.c\"\n+\n+/* { dg-final { scan-assembler-times \"vrndscaleps\\[^\\n\\]+zmm\\[0-9\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttps2dq\\[^\\n\\]+zmm\\[0-9\\].{7}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */"}, {"sha": "4788825fc3d4ae1c97a3aba484bad879a62375db", "filename": "gcc/testsuite/gcc.target/i386/avx512f-ceilf-vec-1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-ceilf-vec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-ceilf-vec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-ceilf-vec-1.c?ref=bf9a1a07adb0594b8060bbe23e2cde3475885fdc", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#define __NO_MATH_INLINES\n+#include <math.h>\n+#include \"avx512f-check.h\"\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (float *src)\n+{\n+  int i, sign = 1;\n+  float f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+avx512f_test (void)\n+{\n+  float a[NUM];\n+  float r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = ceilf (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != ceilf (a[i]))\n+      abort();\n+}"}, {"sha": "95a79e29d12721e0b03c0db78dd17b325c9041cc", "filename": "gcc/testsuite/gcc.target/i386/avx512f-ceilf-vec-2.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-ceilf-vec-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-ceilf-vec-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-ceilf-vec-2.c?ref=bf9a1a07adb0594b8060bbe23e2cde3475885fdc", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx512f\" } */\n+\n+#include \"avx512f-ceilf-vec-1.c\"\n+\n+/* { dg-final { scan-assembler-times \"vrndscaleps\\[^\\n\\]+zmm\\[0-9\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */"}, {"sha": "b7cbed005dd90443f4b3e5c6e6934e1b32751d1f", "filename": "gcc/testsuite/gcc.target/i386/avx512f-floor-vec-1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-floor-vec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-floor-vec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-floor-vec-1.c?ref=bf9a1a07adb0594b8060bbe23e2cde3475885fdc", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#define __NO_MATH_INLINES\n+#include <math.h>\n+#include \"avx512f-check.h\"\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (double *src)\n+{\n+  int i, sign = 1;\n+  double f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+avx512f_test (void)\n+{\n+  double a[NUM];\n+  double r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = floor (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != floor (a[i]))\n+      abort();\n+}"}, {"sha": "0d401f78d632d50e327e5f3797d95bd72ddbcb35", "filename": "gcc/testsuite/gcc.target/i386/avx512f-floor-vec-2.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-floor-vec-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-floor-vec-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-floor-vec-2.c?ref=bf9a1a07adb0594b8060bbe23e2cde3475885fdc", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx512f\" } */\n+\n+#include \"avx512f-floor-vec-1.c\"\n+\n+/* { dg-final { scan-assembler-times \"vrndscalepd\\[^\\n\\]+zmm\\[0-9\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */"}, {"sha": "6a25f438a8e794d2b224d1b33e1793cf7776f92f", "filename": "gcc/testsuite/gcc.target/i386/avx512f-floorf-sfix-vec-1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-floorf-sfix-vec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-floorf-sfix-vec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-floorf-sfix-vec-1.c?ref=bf9a1a07adb0594b8060bbe23e2cde3475885fdc", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#define __NO_MATH_INLINES\n+#include <math.h>\n+#include \"avx512f-check.h\"\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (float *src)\n+{\n+  int i, sign = 1;\n+  float f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+avx512f_test (void)\n+{\n+  float a[NUM];\n+  int r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = (int) floorf (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != (int) floorf (a[i]))\n+      abort();\n+}"}, {"sha": "f4bfec5385e999a15a556a4efb7aec830fc153d9", "filename": "gcc/testsuite/gcc.target/i386/avx512f-floorf-sfix-vec-2.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-floorf-sfix-vec-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-floorf-sfix-vec-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-floorf-sfix-vec-2.c?ref=bf9a1a07adb0594b8060bbe23e2cde3475885fdc", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx512f\" } */\n+\n+#include \"avx512f-floorf-sfix-vec-1.c\"\n+\n+/* { dg-final { scan-assembler-times \"vrndscaleps\\[^\\n\\]+zmm\\[0-9\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttps2dq\\[^\\n\\]+zmm\\[0-9\\].{7}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */"}, {"sha": "69fc73d78efcca77b3c6654c3d1495e2175129dd", "filename": "gcc/testsuite/gcc.target/i386/avx512f-floorf-vec-1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-floorf-vec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-floorf-vec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-floorf-vec-1.c?ref=bf9a1a07adb0594b8060bbe23e2cde3475885fdc", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#define __NO_MATH_INLINES\n+#include <math.h>\n+#include \"avx512f-check.h\"\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (float *src)\n+{\n+  int i, sign = 1;\n+  float f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+avx512f_test (void)\n+{\n+  float a[NUM];\n+  float r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = floorf (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != floorf (a[i]))\n+      abort();\n+}"}, {"sha": "90c6c0fade5034477abf4a4b7682eaf3353ba4fb", "filename": "gcc/testsuite/gcc.target/i386/avx512f-floorf-vec-2.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-floorf-vec-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-floorf-vec-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-floorf-vec-2.c?ref=bf9a1a07adb0594b8060bbe23e2cde3475885fdc", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx512f\" } */\n+\n+#include \"avx512f-floorf-vec-1.c\"\n+\n+/* { dg-final { scan-assembler-times \"vrndscaleps\\[^\\n\\]+zmm\\[0-9\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */"}, {"sha": "8e1745aa13ab022e5e440ce628f04aa5f7fb65ab", "filename": "gcc/testsuite/gcc.target/i386/avx512f-rint-sfix-vec-1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-rint-sfix-vec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-rint-sfix-vec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-rint-sfix-vec-1.c?ref=bf9a1a07adb0594b8060bbe23e2cde3475885fdc", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#define __NO_MATH_INLINES\n+#include <math.h>\n+#include \"avx512f-check.h\"\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (double *src)\n+{\n+  int i, sign = 1;\n+  double f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+avx512f_test (void)\n+{\n+  double a[NUM];\n+  int r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = (int) rint (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != (int) rint (a[i]))\n+      abort();\n+}"}, {"sha": "c3f78ac3f25dfe3558c11023b951fa450e4871c8", "filename": "gcc/testsuite/gcc.target/i386/avx512f-rint-sfix-vec-2.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-rint-sfix-vec-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-rint-sfix-vec-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-rint-sfix-vec-2.c?ref=bf9a1a07adb0594b8060bbe23e2cde3475885fdc", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx512f\" } */\n+\n+#include \"avx512f-rint-sfix-vec-1.c\"\n+\n+/* { dg-final { scan-assembler-times \"vcvtpd2dq\\[^\\n\\]+ymm\\[0-9\\](?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vinserti64x4\\[^\\n\\]+zmm\\[0-9\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */"}, {"sha": "ac3e9a259735dddb9737138377a0efef458169d1", "filename": "gcc/testsuite/gcc.target/i386/avx512f-rintf-sfix-vec-1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-rintf-sfix-vec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-rintf-sfix-vec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-rintf-sfix-vec-1.c?ref=bf9a1a07adb0594b8060bbe23e2cde3475885fdc", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#define __NO_MATH_INLINES\n+#include <math.h>\n+#include \"avx512f-check.h\"\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (float *src)\n+{\n+  int i, sign = 1;\n+  float f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+avx512f_test (void)\n+{\n+  float a[NUM];\n+  int r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = (int) rintf (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != (int) rintf (a[i]))\n+      abort();\n+}"}, {"sha": "c172e61f84a7f61a6a50f317fcef2749cc1c7db4", "filename": "gcc/testsuite/gcc.target/i386/avx512f-rintf-sfix-vec-2.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-rintf-sfix-vec-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-rintf-sfix-vec-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-rintf-sfix-vec-2.c?ref=bf9a1a07adb0594b8060bbe23e2cde3475885fdc", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx512f\" } */\n+\n+#include \"avx512f-rintf-sfix-vec-1.c\"\n+\n+/* { dg-final { scan-assembler-times \"vcvtps2dq\\[^\\n\\]+zmm\\[0-9\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */"}, {"sha": "61bea578e1862b5aa49bfc32cf5e7b0c1bc0de02", "filename": "gcc/testsuite/gcc.target/i386/avx512f-round-sfix-vec-1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-round-sfix-vec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-round-sfix-vec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-round-sfix-vec-1.c?ref=bf9a1a07adb0594b8060bbe23e2cde3475885fdc", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#define __NO_MATH_INLINES\n+#include <math.h>\n+#include \"avx512f-check.h\"\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (double *src)\n+{\n+  int i, sign = 1;\n+  double f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+avx512f_test (void)\n+{\n+  double a[NUM];\n+  int r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = (int) round (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != (int) round (a[i]))\n+      abort();\n+}"}, {"sha": "5982c65d1e13cf5069d2d6f03eb9714c45c2d710", "filename": "gcc/testsuite/gcc.target/i386/avx512f-round-sfix-vec-2.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-round-sfix-vec-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-round-sfix-vec-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-round-sfix-vec-2.c?ref=bf9a1a07adb0594b8060bbe23e2cde3475885fdc", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx512f\" } */\n+\n+#include \"avx512f-round-sfix-vec-1.c\"\n+\n+/* { dg-final { scan-assembler-times \"vrndscalepd\\[^\\n\\]+zmm\\[0-9\\](?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvttpd2dq\\[^\\n\\]+zmm\\[0-9\\].{7}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */"}, {"sha": "c5ec9e7ec009697ad4802836849e671f98ccb7cf", "filename": "gcc/testsuite/gcc.target/i386/avx512f-roundf-sfix-vec-1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-roundf-sfix-vec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-roundf-sfix-vec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-roundf-sfix-vec-1.c?ref=bf9a1a07adb0594b8060bbe23e2cde3475885fdc", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#define __NO_MATH_INLINES\n+#include <math.h>\n+#include \"avx512f-check.h\"\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (float *src)\n+{\n+  int i, sign = 1;\n+  float f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+avx512f_test (void)\n+{\n+  float a[NUM];\n+  int r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = (int) roundf (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != (int) roundf (a[i]))\n+      abort();\n+}"}, {"sha": "0d8abb892d135349b9f0dd1a4f7459d6b0b47e6d", "filename": "gcc/testsuite/gcc.target/i386/avx512f-roundf-sfix-vec-2.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-roundf-sfix-vec-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-roundf-sfix-vec-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-roundf-sfix-vec-2.c?ref=bf9a1a07adb0594b8060bbe23e2cde3475885fdc", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx512f\" } */\n+\n+#include \"avx512f-roundf-sfix-vec-1.c\"\n+\n+/* { dg-final { scan-assembler-times \"vrndscaleps\\[^\\n\\]+zmm\\[0-9\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttps2dq\\[^\\n\\]+zmm\\[0-9\\].{7}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */"}, {"sha": "dfb93d723244233e3801ddd01c300d97aa0ddee5", "filename": "gcc/testsuite/gcc.target/i386/avx512f-trunc-vec-1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-trunc-vec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-trunc-vec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-trunc-vec-1.c?ref=bf9a1a07adb0594b8060bbe23e2cde3475885fdc", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#define __NO_MATH_INLINES\n+#include <math.h>\n+#include \"avx512f-check.h\"\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (double *src)\n+{\n+  int i, sign = 1;\n+  double f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+avx512f_test (void)\n+{\n+  double a[NUM];\n+  double r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = trunc (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != trunc (a[i]))\n+      abort();\n+}"}, {"sha": "e8ec0227653ad6964a86724b09ab378ef22932db", "filename": "gcc/testsuite/gcc.target/i386/avx512f-trunc-vec-2.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-trunc-vec-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-trunc-vec-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-trunc-vec-2.c?ref=bf9a1a07adb0594b8060bbe23e2cde3475885fdc", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx512f\" } */\n+\n+#include \"avx512f-trunc-vec-1.c\"\n+\n+/* { dg-final { scan-assembler-times \"vrndscalepd\\[^\\n\\]+zmm\\[0-9\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */"}, {"sha": "db13e7128298d76c4186e7b4f3377c1ff205528f", "filename": "gcc/testsuite/gcc.target/i386/avx512f-truncf-vec-1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-truncf-vec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-truncf-vec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-truncf-vec-1.c?ref=bf9a1a07adb0594b8060bbe23e2cde3475885fdc", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#define __NO_MATH_INLINES\n+#include <math.h>\n+#include \"avx512f-check.h\"\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (float *src)\n+{\n+  int i, sign = 1;\n+  float f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+avx512f_test (void)\n+{\n+  float a[NUM];\n+  float r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = truncf (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != truncf (a[i]))\n+      abort();\n+}"}, {"sha": "ae542d8276bf25e27896c7c472265d43586a009b", "filename": "gcc/testsuite/gcc.target/i386/avx512f-truncf-vec-2.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-truncf-vec-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9a1a07adb0594b8060bbe23e2cde3475885fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-truncf-vec-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-truncf-vec-2.c?ref=bf9a1a07adb0594b8060bbe23e2cde3475885fdc", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx512f\" } */\n+\n+#include \"avx512f-truncf-vec-1.c\"\n+\n+/* { dg-final { scan-assembler-times \"vrndscaleps\\[^\\n\\]+zmm\\[0-9\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */"}]}