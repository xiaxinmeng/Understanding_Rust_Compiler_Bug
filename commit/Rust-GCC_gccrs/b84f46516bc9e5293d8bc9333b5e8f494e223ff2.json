{"sha": "b84f46516bc9e5293d8bc9333b5e8f494e223ff2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg0ZjQ2NTE2YmM5ZTUyOTNkOGJjOTMzM2I1ZThmNDk0ZTIyM2ZmMg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-08-26T19:32:31Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-08-26T19:32:31Z"}, "message": "re PR c++/23491 (new declarator with constant expression gives \"error: invalid use of array with unspecified bounds\")\n\n\tPR c++/23491\n\t* cp-tree.h (build_vec_init): Adjust prototype.\n\t* init.c (perform_member_init): Adjust call to build_vec_init.\n\t(build_aggr_init): Likewise.\n\t(build_new_1): Do not call build_default_init for array types.\n\t(build_vec_init): Add explicit_default_init_p parameter.  Perform\n\tdefault initialization of vector elements when set.\n\t* typeck.c (build_modify_expr): Adjust call to build_vec_init.\n\n\tPR c++/23491\n\t* g++.dg/init/new14.C: New test.\n\t* g++.dg/expr/anew1.C: Do not XFAIL.\n\t* g++.dg/expr/anew2.C: Likewise.\n\t* g++.dg/expr/anew3.C: Likewise.\n\nFrom-SVN: r103530", "tree": {"sha": "edd60898da146e452d1ebf12a4a3cf3feccf5878", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edd60898da146e452d1ebf12a4a3cf3feccf5878"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b84f46516bc9e5293d8bc9333b5e8f494e223ff2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b84f46516bc9e5293d8bc9333b5e8f494e223ff2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b84f46516bc9e5293d8bc9333b5e8f494e223ff2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b84f46516bc9e5293d8bc9333b5e8f494e223ff2/comments", "author": null, "committer": null, "parents": [{"sha": "d6cde48033efac7c002e879cf539bb58858238e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6cde48033efac7c002e879cf539bb58858238e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6cde48033efac7c002e879cf539bb58858238e4"}], "stats": {"total": 142, "additions": 104, "deletions": 38}, "files": [{"sha": "485cccd22e0fe79cfc95937171fe5dcb126d1edb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b84f46516bc9e5293d8bc9333b5e8f494e223ff2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b84f46516bc9e5293d8bc9333b5e8f494e223ff2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b84f46516bc9e5293d8bc9333b5e8f494e223ff2", "patch": "@@ -1,3 +1,19 @@\n+2005-08-26  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/23491\n+\t* cp-tree.h (build_vec_init): Adjust prototype.\n+\t* init.c (perform_member_init): Adjust call to build_vec_init.\n+\t(build_aggr_init): Likewise.\n+\t(build_new_1): Do not call build_default_init for array types.\n+\t(build_vec_init): Add explicit_default_init_p parameter.  Perform\n+\tdefault initialization of vector elements when set.\n+\t* typeck.c (build_modify_expr): Adjust call to build_vec_init.\n+\n+\tPR c++/19004\n+\t* pt.c (uses_template_parms): Handle IDENTIFIER_NODE.\n+\t(type_dependent_expression_p): Allow BASELINKs whose associated\n+\tfunctions are simply a FUNCTION_DECL.\n+\n 2005-08-25  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/20817"}, {"sha": "17e074dc99f987f9a8fb1ff390f4bb22dbce1b74", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b84f46516bc9e5293d8bc9333b5e8f494e223ff2/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b84f46516bc9e5293d8bc9333b5e8f494e223ff2/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b84f46516bc9e5293d8bc9333b5e8f494e223ff2", "patch": "@@ -3918,7 +3918,7 @@ extern tree get_type_value\t\t\t(tree);\n extern tree build_zero_init\t\t\t(tree, tree, bool);\n extern tree build_offset_ref\t\t\t(tree, tree, bool);\n extern tree build_new\t\t\t\t(tree, tree, tree, tree, int);\n-extern tree build_vec_init\t\t\t(tree, tree, tree, int);\n+extern tree build_vec_init\t\t\t(tree, tree, tree, bool, int);\n extern tree build_x_delete\t\t\t(tree, int, tree);\n extern tree build_delete\t\t\t(tree, tree,\n \t\t\t\t\t\t special_function_kind,"}, {"sha": "690e35f8913c2cda86d02590753fd52226be403e", "filename": "gcc/cp/init.c", "status": "modified", "additions": 62, "deletions": 30, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b84f46516bc9e5293d8bc9333b5e8f494e223ff2/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b84f46516bc9e5293d8bc9333b5e8f494e223ff2/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=b84f46516bc9e5293d8bc9333b5e8f494e223ff2", "patch": "@@ -358,6 +358,7 @@ perform_member_init (tree member, tree init)\n \t{\n \t  /* Initialization of one array from another.  */\n \t  finish_expr_stmt (build_vec_init (decl, NULL_TREE, TREE_VALUE (init),\n+\t\t\t\t\t    /*explicit_default_init_p=*/false,\n \t\t\t\t\t    /* from_array=*/1));\n \t}\n       else\n@@ -1112,6 +1113,7 @@ build_aggr_init (tree exp, tree init, int flags)\n       if (itype && cp_type_quals (itype) != TYPE_UNQUALIFIED)\n \titype = TREE_TYPE (init) = TYPE_MAIN_VARIANT (itype);\n       stmt_expr = build_vec_init (exp, NULL_TREE, init,\n+\t\t\t\t  /*explicit_default_init_p=*/false,\n \t\t\t\t  itype && same_type_p (itype,\n \t\t\t\t\t\t\tTREE_TYPE (exp)));\n       TREE_READONLY (exp) = was_const;\n@@ -2055,46 +2057,59 @@ build_new_1 (tree exp)\n \n       init_expr = build_indirect_ref (data_addr, NULL);\n \n-      if (init == void_zero_node)\n-\tinit = build_default_init (full_type, nelts);\n-      else if (init && array_p)\n-\tpedwarn (\"ISO C++ forbids initialization in array new\");\n-\n       if (array_p)\n \t{\n+\t  bool explicit_default_init_p = false;\n+\n+\t  if (init == void_zero_node)\n+\t    {\n+\t      init = NULL_TREE;\n+\t      explicit_default_init_p = true;\n+\t    }\n+\t  else if (init)\n+\t    pedwarn (\"ISO C++ forbids initialization in array new\");\n+\n \t  init_expr\n \t    = build_vec_init (init_expr,\n \t\t\t      cp_build_binary_op (MINUS_EXPR, outer_nelts,\n \t\t\t\t\t\t  integer_one_node),\n-\t\t\t      init, /*from_array=*/0);\n+\t\t\t      init, \n+      \t\t\t      explicit_default_init_p,\n+\t\t\t      /*from_array=*/0);\n \n \t  /* An array initialization is stable because the initialization\n \t     of each element is a full-expression, so the temporaries don't\n \t     leak out.  */\n \t  stable = true;\n \t}\n-      else if (TYPE_NEEDS_CONSTRUCTING (type))\n-\t{\n-\t  init_expr = build_special_member_call (init_expr,\n-\t\t\t\t\t\t complete_ctor_identifier,\n-\t\t\t\t\t\t init, elt_type,\n-\t\t\t\t\t\t LOOKUP_NORMAL);\n-\t  stable = stabilize_init (init_expr, &init_preeval_expr);\n-\t}\n       else\n \t{\n-\t  /* We are processing something like `new int (10)', which\n-\t     means allocate an int, and initialize it with 10.  */\n-\n-\t  if (TREE_CODE (init) == TREE_LIST)\n-\t    init = build_x_compound_expr_from_list (init, \"new initializer\");\n+\t  if (init == void_zero_node)\n+\t    init = build_default_init (full_type, nelts);\n \n+\t  if (TYPE_NEEDS_CONSTRUCTING (type))\n+\t    {\n+\t      init_expr = build_special_member_call (init_expr,\n+\t\t\t\t\t\t     complete_ctor_identifier,\n+\t\t\t\t\t\t     init, elt_type,\n+\t\t\t\t\t\t     LOOKUP_NORMAL);\n+\t      stable = stabilize_init (init_expr, &init_preeval_expr);\n+\t    }\n \t  else\n-\t    gcc_assert (TREE_CODE (init) != CONSTRUCTOR\n-\t\t\t|| TREE_TYPE (init) != NULL_TREE);\n-\n-\t  init_expr = build_modify_expr (init_expr, INIT_EXPR, init);\n-\t  stable = stabilize_init (init_expr, &init_preeval_expr);\n+\t    {\n+\t      /* We are processing something like `new int (10)', which\n+\t\t means allocate an int, and initialize it with 10.  */\n+\t      \n+\t      if (TREE_CODE (init) == TREE_LIST)\n+\t\tinit = build_x_compound_expr_from_list (init, \n+\t\t\t\t\t\t\t\"new initializer\");\n+\t      else\n+\t\tgcc_assert (TREE_CODE (init) != CONSTRUCTOR\n+\t\t\t    || TREE_TYPE (init) != NULL_TREE);\n+\t      \n+\t      init_expr = build_modify_expr (init_expr, INIT_EXPR, init);\n+\t      stable = stabilize_init (init_expr, &init_preeval_expr);\n+\t    }\n \t}\n \n       if (init_expr == error_mark_node)\n@@ -2375,8 +2390,12 @@ get_temp_regvar (tree type, tree init)\n    MAXINDEX is the maximum index of the array (one less than the\n      number of elements).  It is only used if\n      TYPE_DOMAIN (TREE_TYPE (BASE)) == NULL_TREE.\n+\n    INIT is the (possibly NULL) initializer.\n \n+   If EXPLICIT_DEFAULT_INIT_P is true, then INIT must be NULL.  All\n+   elements in the array are default-initialized.\n+\n    FROM_ARRAY is 0 if we should init everything with INIT\n    (i.e., every element initialized from INIT).\n    FROM_ARRAY is 1 if we should index into INIT in parallel\n@@ -2385,7 +2404,9 @@ get_temp_regvar (tree type, tree init)\n    but use assignment instead of initialization.  */\n \n tree\n-build_vec_init (tree base, tree maxindex, tree init, int from_array)\n+build_vec_init (tree base, tree maxindex, tree init, \n+\t\tbool explicit_default_init_p,\n+\t\tint from_array)\n {\n   tree rval;\n   tree base2 = NULL_TREE;\n@@ -2414,6 +2435,9 @@ build_vec_init (tree base, tree maxindex, tree init, int from_array)\n   if (maxindex == NULL_TREE || maxindex == error_mark_node)\n     return error_mark_node;\n \n+  if (explicit_default_init_p)\n+    gcc_assert (!init);\n+\n   inner_elt_type = strip_array_types (atype);\n   if (init\n       && (from_array == 2\n@@ -2544,7 +2568,7 @@ build_vec_init (tree base, tree maxindex, tree init, int from_array)\n      We do need to keep going if we're copying an array.  */\n \n   if (from_array\n-      || (TYPE_NEEDS_CONSTRUCTING (type)\n+      || ((TYPE_NEEDS_CONSTRUCTING (type) || explicit_default_init_p)\n \t  && ! (host_integerp (maxindex, 0)\n \t\t&& (num_initialized_elts\n \t\t    == tree_low_cst (maxindex, 0) + 1))))\n@@ -2553,6 +2577,7 @@ build_vec_init (tree base, tree maxindex, tree init, int from_array)\n \t we've already initialized all the elements.  */\n       tree for_stmt;\n       tree elt_init;\n+      tree to;\n \n       for_stmt = begin_for_stmt ();\n       finish_for_init_stmt (for_stmt);\n@@ -2562,9 +2587,10 @@ build_vec_init (tree base, tree maxindex, tree init, int from_array)\n       finish_for_expr (build_unary_op (PREDECREMENT_EXPR, iterator, 0),\n \t\t       for_stmt);\n \n+      to = build1 (INDIRECT_REF, type, base);\n+\n       if (from_array)\n \t{\n-\t  tree to = build1 (INDIRECT_REF, type, base);\n \t  tree from;\n \n \t  if (base2)\n@@ -2587,11 +2613,17 @@ build_vec_init (tree base, tree maxindex, tree init, int from_array)\n \t    sorry\n \t      (\"cannot initialize multi-dimensional array with initializer\");\n \t  elt_init = build_vec_init (build1 (INDIRECT_REF, type, base),\n-\t\t\t\t     0, 0, 0);\n+\t\t\t\t     0, 0, \n+\t\t\t\t     /*explicit_default_init_p=*/false,\n+\t\t\t\t     0);\n \t}\n+      else if (!TYPE_NEEDS_CONSTRUCTING (type))\n+\telt_init = (build_modify_expr \n+\t\t    (to, INIT_EXPR,\n+\t\t     build_zero_init (type, size_one_node,\n+\t\t\t\t      /*static_storage_p=*/false)));\n       else\n-\telt_init = build_aggr_init (build1 (INDIRECT_REF, type, base),\n-\t\t\t\t    init, 0);\n+\telt_init = build_aggr_init (to, init, 0);\n \n       current_stmt_tree ()->stmts_are_full_exprs_p = 1;\n       finish_expr_stmt (elt_init);"}, {"sha": "96da3c636f57ed0fc8cd8531483129de45ba3dfc", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b84f46516bc9e5293d8bc9333b5e8f494e223ff2/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b84f46516bc9e5293d8bc9333b5e8f494e223ff2/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=b84f46516bc9e5293d8bc9333b5e8f494e223ff2", "patch": "@@ -5472,7 +5472,9 @@ build_modify_expr (tree lhs, enum tree_code modifycode, tree rhs)\n \n       from_array = TREE_CODE (TREE_TYPE (newrhs)) == ARRAY_TYPE\n \t\t   ? 1 + (modifycode != INIT_EXPR): 0;\n-      return build_vec_init (lhs, NULL_TREE, newrhs, from_array);\n+      return build_vec_init (lhs, NULL_TREE, newrhs, \n+\t\t\t     /*explicit_default_init_p=*/false,\n+\t\t\t     from_array);\n     }\n \n   if (modifycode == INIT_EXPR)"}, {"sha": "cb31b6aeca154e42f4ef76fe8a9243cf3a4c88ff", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b84f46516bc9e5293d8bc9333b5e8f494e223ff2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b84f46516bc9e5293d8bc9333b5e8f494e223ff2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b84f46516bc9e5293d8bc9333b5e8f494e223ff2", "patch": "@@ -1,3 +1,11 @@\n+2005-08-26  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/23491\n+\t* g++.dg/init/new14.C: New test.\n+\t* g++.dg/expr/anew1.C: Do not XFAIL.\n+\t* g++.dg/expr/anew2.C: Likewise.\n+\t* g++.dg/expr/anew3.C: Likewise.\n+\n 2005-08-26  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR middle-end/22439"}, {"sha": "d7a4288802a10f1b8ee7f810c194c86df5af9274", "filename": "gcc/testsuite/g++.dg/expr/anew1.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b84f46516bc9e5293d8bc9333b5e8f494e223ff2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fanew1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b84f46516bc9e5293d8bc9333b5e8f494e223ff2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fanew1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fanew1.C?ref=b84f46516bc9e5293d8bc9333b5e8f494e223ff2", "patch": "@@ -1,5 +1,4 @@\n-// { dg-do run { xfail *-*-* } }\n-// XFAILed until PR2123 is fixed\n+// { dg-do run }\n // PR 11228: array operator new, with zero-initialization and a variable sized array.\n // Regression test for PR \n // Author: Matt Austern <austern@apple.com>"}, {"sha": "fbf2152d4acc12166e6d8bfe6a473d5fb3b6d774", "filename": "gcc/testsuite/g++.dg/expr/anew2.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b84f46516bc9e5293d8bc9333b5e8f494e223ff2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fanew2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b84f46516bc9e5293d8bc9333b5e8f494e223ff2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fanew2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fanew2.C?ref=b84f46516bc9e5293d8bc9333b5e8f494e223ff2", "patch": "@@ -1,5 +1,4 @@\n-// { dg-do run { xfail *-*-* } }\n-// XFAILed until PR2123 is fixed\n+// { dg-do run }\n // PR 11228: array operator new, with zero-initialization and a variable sized array.\n // Regression test for PR \n // Author: Matt Austern <austern@apple.com>"}, {"sha": "9bb64ea4ea70dda96d2df5dbaadb7befc025f1be", "filename": "gcc/testsuite/g++.dg/expr/anew3.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b84f46516bc9e5293d8bc9333b5e8f494e223ff2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fanew3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b84f46516bc9e5293d8bc9333b5e8f494e223ff2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fanew3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fanew3.C?ref=b84f46516bc9e5293d8bc9333b5e8f494e223ff2", "patch": "@@ -1,5 +1,4 @@\n-// { dg-do run { xfail *-*-* } }\n-// XFAILed until PR2123 is fixed\n+// { dg-do run }\n // PR 11228: array operator new, with zero-initialization and a variable sized array.\n // Regression test for PR \n // Author: Matt Austern <austern@apple.com>"}, {"sha": "5d13da20e71058369b33e238d8cbab5316877ac8", "filename": "gcc/testsuite/g++.dg/init/new14.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b84f46516bc9e5293d8bc9333b5e8f494e223ff2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b84f46516bc9e5293d8bc9333b5e8f494e223ff2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew14.C?ref=b84f46516bc9e5293d8bc9333b5e8f494e223ff2", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/23491\n+\n+struct X\n+{\n+  int m;\n+};\n+\n+void f(int n)\n+{\n+  const X *p = new const X[1] () ;\n+}"}]}