{"sha": "523d72071960ddca69139b9fd96ad8c8ce79ac0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTIzZDcyMDcxOTYwZGRjYTY5MTM5YjlmZDk2YWQ4YzhjZTc5YWMwZQ==", "commit": {"author": {"name": "Evandro Menezes", "email": "e.menezes@samsung.com", "date": "2016-04-27T19:52:58Z"}, "committer": {"name": "Evandro Menezes", "email": "evandro@gcc.gnu.org", "date": "2016-04-27T19:52:58Z"}, "message": "[AArch64] Replace insn to zero up SIMD registers\n\ngcc/\n\t* config/aarch64/aarch64.md\n\t(*movhf_aarch64): Add \"movi %0, #0\" to zero up register and\n\tremove the \"fp\" attributes.\n\t(*movsf_aarch64): Add \"movi %0, #0\" to zero up register and\n\tadd the \"simd\" attributes.\n\t(*movdf_aarch64): Likewise.\n\t(*movtf_aarch64): Remove the \"fp\" attributes.\n\t* testsuite/gcc.target/aarch64/fmovf-zero-reg.c: Update accordingly.\n\t* testsuite/gcc.target/aarch64/fmovd-zero-reg.c: Likewise.\n\nFrom-SVN: r235532", "tree": {"sha": "b59370ede7fe24e0107317fc176846659310be3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b59370ede7fe24e0107317fc176846659310be3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/523d72071960ddca69139b9fd96ad8c8ce79ac0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/523d72071960ddca69139b9fd96ad8c8ce79ac0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/523d72071960ddca69139b9fd96ad8c8ce79ac0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/523d72071960ddca69139b9fd96ad8c8ce79ac0e/comments", "author": null, "committer": null, "parents": [{"sha": "9aa50db7bfbd8fd6f3f1966737deb8a59350c4c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aa50db7bfbd8fd6f3f1966737deb8a59350c4c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aa50db7bfbd8fd6f3f1966737deb8a59350c4c5"}], "stats": {"total": 47, "additions": 31, "deletions": 16}, "files": [{"sha": "4f35001da1d07855e4429255163460cd72fa7bb6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/523d72071960ddca69139b9fd96ad8c8ce79ac0e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/523d72071960ddca69139b9fd96ad8c8ce79ac0e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=523d72071960ddca69139b9fd96ad8c8ce79ac0e", "patch": "@@ -1,3 +1,15 @@\n+2016-04-26  Evandro Menezes  <e.menezes@samsung.com>\n+\n+\t* config/aarch64/aarch64.md\n+\t(*movhf_aarch64): Add \"movi %0, #0\" to zero up register and\n+\tremove the \"fp\" attributes.\n+\t(*movsf_aarch64): Add \"movi %0, #0\" to zero up register and\n+\tadd the \"simd\" attributes.\n+\t(*movdf_aarch64): Likewise.\n+\t(*movtf_aarch64): Remove the \"fp\" attributes.\n+\t* testsuite/gcc.target/aarch64/fmovf-zero-reg.c: Update accordingly.\n+\t* testsuite/gcc.target/aarch64/fmovd-zero-reg.c: Likewise.\n+\n 2016-04-27  David Malcolm  <dmalcolm@redhat.com>\n \n \t* emit-rtl.c (maybe_set_first_label_num): Strengthen param from"}, {"sha": "9b282f13388080b0b2d62a07f90065cf04de63fa", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/523d72071960ddca69139b9fd96ad8c8ce79ac0e/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/523d72071960ddca69139b9fd96ad8c8ce79ac0e/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=523d72071960ddca69139b9fd96ad8c8ce79ac0e", "patch": "@@ -1178,11 +1178,12 @@\n )\n \n (define_insn \"*movhf_aarch64\"\n-  [(set (match_operand:HF 0 \"nonimmediate_operand\" \"=w, ?r,w,w,m,r,m ,r\")\n-\t(match_operand:HF 1 \"general_operand\"      \"?rY, w,w,m,w,m,rY,r\"))]\n+  [(set (match_operand:HF 0 \"nonimmediate_operand\" \"=w,w  ,?r,w,w,m,r,m ,r\")\n+\t(match_operand:HF 1 \"general_operand\"      \"Y ,?rY, w,w,m,w,m,rY,r\"))]\n   \"TARGET_FLOAT && (register_operand (operands[0], HFmode)\n     || aarch64_reg_or_fp_zero (operands[1], HFmode))\"\n   \"@\n+   movi\\\\t%0.4h, #0\n    mov\\\\t%0.h[0], %w1\n    umov\\\\t%w0, %1.h[0]\n    mov\\\\t%0.h[0], %1.h[0]\n@@ -1191,18 +1192,18 @@\n    ldrh\\\\t%w0, %1\n    strh\\\\t%w1, %0\n    mov\\\\t%w0, %w1\"\n-  [(set_attr \"type\" \"neon_from_gp,neon_to_gp,neon_move,\\\n+  [(set_attr \"type\" \"neon_move,neon_from_gp,neon_to_gp,neon_move,\\\n                      f_loads,f_stores,load1,store1,mov_reg\")\n-   (set_attr \"simd\" \"yes,yes,yes,*,*,*,*,*\")\n-   (set_attr \"fp\"   \"*,*,*,yes,yes,*,*,*\")]\n+   (set_attr \"simd\" \"yes,yes,yes,yes,*,*,*,*,*\")]\n )\n \n (define_insn \"*movsf_aarch64\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=w, ?r,w,w  ,w,m,r,m ,r\")\n-\t(match_operand:SF 1 \"general_operand\"      \"?rY, w,w,Ufc,m,w,m,rY,r\"))]\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=w,w  ,?r,w,w  ,w,m,r,m ,r\")\n+\t(match_operand:SF 1 \"general_operand\"      \"Y ,?rY, w,w,Ufc,m,w,m,rY,r\"))]\n   \"TARGET_FLOAT && (register_operand (operands[0], SFmode)\n     || aarch64_reg_or_fp_zero (operands[1], SFmode))\"\n   \"@\n+   movi\\\\t%0.2s, #0\n    fmov\\\\t%s0, %w1\n    fmov\\\\t%w0, %s1\n    fmov\\\\t%s0, %s1\n@@ -1212,16 +1213,18 @@\n    ldr\\\\t%w0, %1\n    str\\\\t%w1, %0\n    mov\\\\t%w0, %w1\"\n-  [(set_attr \"type\" \"f_mcr,f_mrc,fmov,fconsts,\\\n-                     f_loads,f_stores,load1,store1,mov_reg\")]\n+  [(set_attr \"type\" \"neon_move,f_mcr,f_mrc,fmov,fconsts,\\\n+                     f_loads,f_stores,load1,store1,mov_reg\")\n+   (set_attr \"simd\" \"yes,*,*,*,*,*,*,*,*,*\")]\n )\n \n (define_insn \"*movdf_aarch64\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=w, ?r,w,w  ,w,m,r,m ,r\")\n-\t(match_operand:DF 1 \"general_operand\"      \"?rY, w,w,Ufc,m,w,m,rY,r\"))]\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=w,w  ,?r,w,w  ,w,m,r,m ,r\")\n+\t(match_operand:DF 1 \"general_operand\"      \"Y ,?rY, w,w,Ufc,m,w,m,rY,r\"))]\n   \"TARGET_FLOAT && (register_operand (operands[0], DFmode)\n     || aarch64_reg_or_fp_zero (operands[1], DFmode))\"\n   \"@\n+   movi\\\\t%d0, #0\n    fmov\\\\t%d0, %x1\n    fmov\\\\t%x0, %d1\n    fmov\\\\t%d0, %d1\n@@ -1231,8 +1234,9 @@\n    ldr\\\\t%x0, %1\n    str\\\\t%x1, %0\n    mov\\\\t%x0, %x1\"\n-  [(set_attr \"type\" \"f_mcr,f_mrc,fmov,fconstd,\\\n-                     f_loadd,f_stored,load1,store1,mov_reg\")]\n+  [(set_attr \"type\" \"neon_move,f_mcr,f_mrc,fmov,fconstd,\\\n+                     f_loadd,f_stored,load1,store1,mov_reg\")\n+   (set_attr \"simd\" \"yes,*,*,*,*,*,*,*,*,*\")]\n )\n \n (define_insn \"*movtf_aarch64\"\n@@ -1257,7 +1261,6 @@\n   [(set_attr \"type\" \"logic_reg,multiple,f_mcr,f_mrc,neon_move_q,f_mcr,\\\n                      f_loadd,f_stored,load2,store2,store2\")\n    (set_attr \"length\" \"4,8,8,8,4,4,4,4,4,4,4\")\n-   (set_attr \"fp\" \"*,*,yes,yes,*,yes,yes,yes,*,*,*\")\n    (set_attr \"simd\" \"yes,*,*,*,yes,*,*,*,*,*,*\")]\n )\n "}, {"sha": "c6c94148931750ac434b3ca93cdc8a691c048b07", "filename": "gcc/testsuite/gcc.target/aarch64/fmovd-zero-reg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/523d72071960ddca69139b9fd96ad8c8ce79ac0e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmovd-zero-reg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/523d72071960ddca69139b9fd96ad8c8ce79ac0e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmovd-zero-reg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmovd-zero-reg.c?ref=523d72071960ddca69139b9fd96ad8c8ce79ac0e", "patch": "@@ -8,4 +8,4 @@ foo (void)\n   bar (0.0);\n }\n \n-/* { dg-final { scan-assembler \"fmov\\\\td0, xzr\" } } */\n+/* { dg-final { scan-assembler \"movi\\\\td0, #0\" } } */"}, {"sha": "071dfa9da1d98420aff8eaa841b8d81c7a2ac22b", "filename": "gcc/testsuite/gcc.target/aarch64/fmovf-zero-reg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/523d72071960ddca69139b9fd96ad8c8ce79ac0e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmovf-zero-reg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/523d72071960ddca69139b9fd96ad8c8ce79ac0e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmovf-zero-reg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmovf-zero-reg.c?ref=523d72071960ddca69139b9fd96ad8c8ce79ac0e", "patch": "@@ -8,4 +8,4 @@ foo (void)\n   bar (0.0);\n }\n \n-/* { dg-final { scan-assembler \"fmov\\\\ts0, wzr\" } } */\n+/* { dg-final { scan-assembler \"movi\\\\tv0\\.2s, #0\" } } */"}]}