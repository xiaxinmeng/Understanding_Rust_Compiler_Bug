{"sha": "adc22a04eb01ef0563b1ec3382fc56f0b5101c90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRjMjJhMDRlYjAxZWYwNTYzYjFlYzMzODJmYzU2ZjBiNTEwMWM5MA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-11-23T20:26:10Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-11-23T20:26:10Z"}, "message": "(expand_expr...\n\n(expand_expr, case SAVE_EXPR): Properly recompute the value of\nUNSIGNEDP when SAVE_EXPR_RTL is nonzero and we have promoted.\n\nFrom-SVN: r6143", "tree": {"sha": "ad10528d277050a91c265c72d3572bb0fb3aba8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad10528d277050a91c265c72d3572bb0fb3aba8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/adc22a04eb01ef0563b1ec3382fc56f0b5101c90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adc22a04eb01ef0563b1ec3382fc56f0b5101c90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adc22a04eb01ef0563b1ec3382fc56f0b5101c90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adc22a04eb01ef0563b1ec3382fc56f0b5101c90/comments", "author": null, "committer": null, "parents": [{"sha": "1f17868aa6caa16f285b15c5c8fc221c5f83b781", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f17868aa6caa16f285b15c5c8fc221c5f83b781", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f17868aa6caa16f285b15c5c8fc221c5f83b781"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "99d722eb330356d1ae3cd9eeb0125774c403bc7d", "filename": "gcc/expr.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adc22a04eb01ef0563b1ec3382fc56f0b5101c90/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adc22a04eb01ef0563b1ec3382fc56f0b5101c90/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=adc22a04eb01ef0563b1ec3382fc56f0b5101c90", "patch": "@@ -3945,12 +3945,24 @@ expand_expr (exp, target, tmode, modifier)\n \n       /* If the mode of SAVE_EXPR_RTL does not match that of the expression, it\n \t must be a promoted value.  We return a SUBREG of the wanted mode,\n-\t but mark it so that we know that it was already extended.  Note\n-\t that `unsignedp' was modified above in this case.  */\n+\t but mark it so that we know that it was already extended. */\n \n       if (GET_CODE (SAVE_EXPR_RTL (exp)) == REG\n \t  && GET_MODE (SAVE_EXPR_RTL (exp)) != mode)\n \t{\n+\t  enum machine_mode var_mode = mode;\n+\n+\t  if (TREE_CODE (type) == INTEGER_TYPE\n+\t      || TREE_CODE (type) == ENUMERAL_TYPE\n+\t      || TREE_CODE (type) == BOOLEAN_TYPE\n+\t      || TREE_CODE (type) == CHAR_TYPE\n+\t      || TREE_CODE (type) == REAL_TYPE\n+\t      || TREE_CODE (type) == POINTER_TYPE\n+\t      || TREE_CODE (type) == OFFSET_TYPE)\n+\t    {\n+\t      PROMOTE_MODE (var_mode, unsignedp, type);\n+\t    }\n+\n \t  temp = gen_rtx (SUBREG, mode, SAVE_EXPR_RTL (exp), 0);\n \t  SUBREG_PROMOTED_VAR_P (temp) = 1;\n \t  SUBREG_PROMOTED_UNSIGNED_P (temp) = unsignedp;"}]}