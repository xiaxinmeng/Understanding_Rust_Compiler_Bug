{"sha": "b5cbaee240380ba1a3a48fad3810409dea32b888", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVjYmFlZTI0MDM4MGJhMWEzYTQ4ZmFkMzgxMDQwOWRlYTMyYjg4OA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-05-10T08:19:44Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-05-10T08:19:44Z"}, "message": "re PR c++/90383 (GCC generates invalid constexpr copy/move assignment operators for types with trailing padding. (Again))\n\n\tPR c++/90383\n\t* tree-inline.h (struct copy_body_data): Add do_not_fold member.\n\t* tree-inline.c (remap_gimple_op_r): Avoid folding expressions if\n\tid->do_not_fold.\n\t(copy_tree_body_r): Likewise.\n\t(copy_fn): Set id.do_not_fold to true.\n\n\t* g++.dg/cpp1y/constexpr-90383-1.C: New test.\n\t* g++.dg/cpp1y/constexpr-90383-2.C: New test.\n\nFrom-SVN: r271058", "tree": {"sha": "b139f71ecf5589c0f08d1eb5288164013361f0d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b139f71ecf5589c0f08d1eb5288164013361f0d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5cbaee240380ba1a3a48fad3810409dea32b888", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5cbaee240380ba1a3a48fad3810409dea32b888", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5cbaee240380ba1a3a48fad3810409dea32b888", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5cbaee240380ba1a3a48fad3810409dea32b888/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0a52429609a9570149af903c231c25f17da79b15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a52429609a9570149af903c231c25f17da79b15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a52429609a9570149af903c231c25f17da79b15"}], "stats": {"total": 67, "additions": 62, "deletions": 5}, "files": [{"sha": "d1b912307c0ac8da3ad59dfd21ab5cba512ec285", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5cbaee240380ba1a3a48fad3810409dea32b888/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5cbaee240380ba1a3a48fad3810409dea32b888/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5cbaee240380ba1a3a48fad3810409dea32b888", "patch": "@@ -1,3 +1,12 @@\n+2019-05-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/90383\n+\t* tree-inline.h (struct copy_body_data): Add do_not_fold member.\n+\t* tree-inline.c (remap_gimple_op_r): Avoid folding expressions if\n+\tid->do_not_fold.\n+\t(copy_tree_body_r): Likewise.\n+\t(copy_fn): Set id.do_not_fold to true.\n+\n 2019-05-10  Martin Liska  <mliska@suse.cz>\n \n \t* config/i386/i386-expand.c (ix86_expand_floorceildf_32):"}, {"sha": "0ca0b5a2a2ed25ce204219078e263191d0d36205", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5cbaee240380ba1a3a48fad3810409dea32b888/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5cbaee240380ba1a3a48fad3810409dea32b888/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b5cbaee240380ba1a3a48fad3810409dea32b888", "patch": "@@ -1,3 +1,9 @@\n+2019-05-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/90383\n+\t* g++.dg/cpp1y/constexpr-90383-1.C: New test.\n+\t* g++.dg/cpp1y/constexpr-90383-2.C: New test.\n+\n 2019-05-10  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/90093"}, {"sha": "b398331ad7dc486d792319e5f7733775208ac90a", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-90383-1.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5cbaee240380ba1a3a48fad3810409dea32b888/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-90383-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5cbaee240380ba1a3a48fad3810409dea32b888/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-90383-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-90383-1.C?ref=b5cbaee240380ba1a3a48fad3810409dea32b888", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/90383\n+// { dg-do compile { target c++14 } }\n+\n+struct alignas(8) A { constexpr A (bool x) : a(x) {} A () = delete; bool a; };\n+struct B { A b; };\n+\n+constexpr bool\n+foo ()\n+{\n+  B w{A (true)};\n+  w.b = A (true);\n+  return w.b.a;\n+}\n+\n+static_assert (foo (), \"\");"}, {"sha": "a08b1dd6f4427c15401870d45d0fae3f096cec0a", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-90383-2.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5cbaee240380ba1a3a48fad3810409dea32b888/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-90383-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5cbaee240380ba1a3a48fad3810409dea32b888/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-90383-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-90383-2.C?ref=b5cbaee240380ba1a3a48fad3810409dea32b888", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/90383\n+// { dg-do run { target c++14 } }\n+// { dg-options \"-O2\" }\n+\n+extern \"C\" void abort ();\n+struct alignas(8) A { constexpr A (bool x) : a(x) {} A () = default; bool a; };\n+struct B { A b; };\n+\n+constexpr bool\n+foo ()\n+{\n+  B w{A (true)};\n+  w.b = A (true);\n+  return w.b.a;\n+}\n+\n+int\n+main ()\n+{\n+  if (!foo ())\n+    abort ();\n+}"}, {"sha": "35c005ee9896ad6374e27f79e00d9a1ebd205691", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5cbaee240380ba1a3a48fad3810409dea32b888/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5cbaee240380ba1a3a48fad3810409dea32b888/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=b5cbaee240380ba1a3a48fad3810409dea32b888", "patch": "@@ -1101,7 +1101,7 @@ remap_gimple_op_r (tree *tp, int *walk_subtrees, void *data)\n       /* Otherwise, just copy the node.  Note that copy_tree_r already\n \t knows not to copy VAR_DECLs, etc., so this is safe.  */\n \n-      if (TREE_CODE (*tp) == MEM_REF)\n+      if (TREE_CODE (*tp) == MEM_REF && !id->do_not_fold)\n \t{\n \t  /* We need to re-canonicalize MEM_REFs from inline substitutions\n \t     that can happen when a pointer argument is an ADDR_EXPR.\n@@ -1327,11 +1327,11 @@ copy_tree_body_r (tree *tp, int *walk_subtrees, void *data)\n \t      tree type = TREE_TYPE (*tp);\n \t      tree ptr = id->do_not_unshare ? *n : unshare_expr (*n);\n \t      tree old = *tp;\n-\t      *tp = gimple_fold_indirect_ref (ptr);\n+\t      *tp = id->do_not_fold ? NULL : gimple_fold_indirect_ref (ptr);\n \t      if (! *tp)\n \t        {\n \t\t  type = remap_type (type, id);\n-\t\t  if (TREE_CODE (ptr) == ADDR_EXPR)\n+\t\t  if (TREE_CODE (ptr) == ADDR_EXPR && !id->do_not_fold)\n \t\t    {\n \t\t      *tp\n \t\t        = fold_indirect_ref_1 (EXPR_LOCATION (ptr), type, ptr);\n@@ -1360,7 +1360,7 @@ copy_tree_body_r (tree *tp, int *walk_subtrees, void *data)\n \t      return NULL;\n \t    }\n \t}\n-      else if (TREE_CODE (*tp) == MEM_REF)\n+      else if (TREE_CODE (*tp) == MEM_REF && !id->do_not_fold)\n \t{\n \t  /* We need to re-canonicalize MEM_REFs from inline substitutions\n \t     that can happen when a pointer argument is an ADDR_EXPR.\n@@ -1432,7 +1432,8 @@ copy_tree_body_r (tree *tp, int *walk_subtrees, void *data)\n \n \t  /* Handle the case where we substituted an INDIRECT_REF\n \t     into the operand of the ADDR_EXPR.  */\n-\t  if (TREE_CODE (TREE_OPERAND (*tp, 0)) == INDIRECT_REF)\n+\t  if (TREE_CODE (TREE_OPERAND (*tp, 0)) == INDIRECT_REF\n+\t      && !id->do_not_fold)\n \t    {\n \t      tree t = TREE_OPERAND (TREE_OPERAND (*tp, 0), 0);\n \t      if (TREE_TYPE (t) != TREE_TYPE (*tp))\n@@ -6370,6 +6371,7 @@ copy_fn (tree fn, tree& parms, tree& result)\n      since front-end specific mechanisms may rely on sharing.  */\n   id.regimplify = false;\n   id.do_not_unshare = true;\n+  id.do_not_fold = true;\n \n   /* We're not inside any EH region.  */\n   id.eh_lp_nr = 0;"}, {"sha": "3ede89ee697487c9377b18df0f211de61e8c4312", "filename": "gcc/tree-inline.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5cbaee240380ba1a3a48fad3810409dea32b888/gcc%2Ftree-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5cbaee240380ba1a3a48fad3810409dea32b888/gcc%2Ftree-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.h?ref=b5cbaee240380ba1a3a48fad3810409dea32b888", "patch": "@@ -113,6 +113,9 @@ struct copy_body_data\n   /* True if trees may not be unshared.  */\n   bool do_not_unshare;\n \n+  /* True if trees should not be folded during the copying.  */\n+  bool do_not_fold;\n+\n   /* True if new declarations may not be created during type remapping.  */\n   bool prevent_decl_creation_for_types;\n "}]}