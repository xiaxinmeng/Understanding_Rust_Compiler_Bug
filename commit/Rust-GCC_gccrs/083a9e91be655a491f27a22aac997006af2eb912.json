{"sha": "083a9e91be655a491f27a22aac997006af2eb912", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDgzYTllOTFiZTY1NWE0OTFmMjdhMjJhYWM5OTcwMDZhZjJlYjkxMg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@airs.com", "date": "2005-11-21T05:41:36Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2005-11-21T05:41:36Z"}, "message": "re PR rtl-optimization/24883 (fatal error: internal consistency failure building xorg-x11)\n\n./:\tPR rtl-optimization/24883\n\t* combine.c (combinable_i3pat): When checking whether the\n\tdestination of i3 is used in i3, consider paradoxical subregs.\ntestsuite/:\n\tPR rtl-optimization/24883\n\t* gcc.c-torture/compile/pr24883.c: New test.\n\nFrom-SVN: r107279", "tree": {"sha": "891b2df27aca9fecd5a0db1dc87070296af18bee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/891b2df27aca9fecd5a0db1dc87070296af18bee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/083a9e91be655a491f27a22aac997006af2eb912", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/083a9e91be655a491f27a22aac997006af2eb912", "html_url": "https://github.com/Rust-GCC/gccrs/commit/083a9e91be655a491f27a22aac997006af2eb912", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/083a9e91be655a491f27a22aac997006af2eb912/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1ef6855c51ead346b46e75c361cda328f25a796d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ef6855c51ead346b46e75c361cda328f25a796d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ef6855c51ead346b46e75c361cda328f25a796d"}], "stats": {"total": 61, "additions": 51, "deletions": 10}, "files": [{"sha": "630bebc1bbfc2b4a3a6e28bb561f9ee0c97ea502", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083a9e91be655a491f27a22aac997006af2eb912/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083a9e91be655a491f27a22aac997006af2eb912/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=083a9e91be655a491f27a22aac997006af2eb912", "patch": "@@ -1,3 +1,9 @@\n+2005-11-20  Ian Lance Taylor  <ian@airs.com>\n+\n+\tPR rtl-optimization/24883\n+\t* combine.c (combinable_i3pat): When checking whether the\n+\tdestination of i3 is used in i3, consider paradoxical subregs.\n+\n 2005-11-21  Kazu Hirata  <kazu@codesourcery.com>\n \n \tPR middle-end/20583"}, {"sha": "abd64582d3ee43c6099d84a10dc07a6ad26ecab3", "filename": "gcc/combine.c", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083a9e91be655a491f27a22aac997006af2eb912/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083a9e91be655a491f27a22aac997006af2eb912/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=083a9e91be655a491f27a22aac997006af2eb912", "patch": "@@ -1423,6 +1423,7 @@ combinable_i3pat (rtx i3, rtx *loc, rtx i2dest, rtx i1dest,\n       rtx dest = SET_DEST (set);\n       rtx src = SET_SRC (set);\n       rtx inner_dest = dest;\n+      rtx subdest;\n \n       while (GET_CODE (inner_dest) == STRICT_LOW_PART\n \t     || GET_CODE (inner_dest) == SUBREG\n@@ -1457,27 +1458,35 @@ combinable_i3pat (rtx i3, rtx *loc, rtx i2dest, rtx i1dest,\n \t  || (i1_not_in_src && reg_overlap_mentioned_p (i1dest, src)))\n \treturn 0;\n \n-      /* If DEST is used in I3, it is being killed in this insn,\n-\t so record that for later.\n+      /* If DEST is used in I3, it is being killed in this insn, so\n+\t record that for later.  We have to consider paradoxical\n+\t subregs here, since they kill the whole register, but we\n+\t ignore partial subregs, STRICT_LOW_PART, etc.\n \t Never add REG_DEAD notes for the FRAME_POINTER_REGNUM or the\n \t STACK_POINTER_REGNUM, since these are always considered to be\n \t live.  Similarly for ARG_POINTER_REGNUM if it is fixed.  */\n-      if (pi3dest_killed && REG_P (dest)\n-\t  && reg_referenced_p (dest, PATTERN (i3))\n-\t  && REGNO (dest) != FRAME_POINTER_REGNUM\n+      subdest = dest;\n+      if (GET_CODE (subdest) == SUBREG\n+\t  && (GET_MODE_SIZE (GET_MODE (subdest))\n+\t      >= GET_MODE_SIZE (GET_MODE (SUBREG_REG (subdest)))))\n+\tsubdest = SUBREG_REG (subdest);\n+      if (pi3dest_killed\n+\t  && REG_P (subdest)\n+\t  && reg_referenced_p (subdest, PATTERN (i3))\n+\t  && REGNO (subdest) != FRAME_POINTER_REGNUM\n #if HARD_FRAME_POINTER_REGNUM != FRAME_POINTER_REGNUM\n-\t  && REGNO (dest) != HARD_FRAME_POINTER_REGNUM\n+\t  && REGNO (subdest) != HARD_FRAME_POINTER_REGNUM\n #endif\n #if ARG_POINTER_REGNUM != FRAME_POINTER_REGNUM\n-\t  && (REGNO (dest) != ARG_POINTER_REGNUM\n-\t      || ! fixed_regs [REGNO (dest)])\n+\t  && (REGNO (subdest) != ARG_POINTER_REGNUM\n+\t      || ! fixed_regs [REGNO (subdest)])\n #endif\n-\t  && REGNO (dest) != STACK_POINTER_REGNUM)\n+\t  && REGNO (subdest) != STACK_POINTER_REGNUM)\n \t{\n \t  if (*pi3dest_killed)\n \t    return 0;\n \n-\t  *pi3dest_killed = dest;\n+\t  *pi3dest_killed = subdest;\n \t}\n     }\n "}, {"sha": "1a05c183fec54af9cfbd5bb817c8c49e0a5b5438", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083a9e91be655a491f27a22aac997006af2eb912/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083a9e91be655a491f27a22aac997006af2eb912/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=083a9e91be655a491f27a22aac997006af2eb912", "patch": "@@ -1,3 +1,8 @@\n+2005-11-20  Ian Lance Taylor  <ian@airs.com>\n+\n+\tPR rtl-optimization/24883\n+\t* gcc.c-torture/compile/pr24883.c: New test.\n+\n 2005-11-21  Kazu Hirata  <kazu@codesourcery.com>\n \n \tPR middle-end/20583"}, {"sha": "b2ced75ac96e594f8f44462632e1ed2265228fc4", "filename": "gcc/testsuite/gcc.c-torture/compile/pr24883.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083a9e91be655a491f27a22aac997006af2eb912/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr24883.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083a9e91be655a491f27a22aac997006af2eb912/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr24883.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr24883.c?ref=083a9e91be655a491f27a22aac997006af2eb912", "patch": "@@ -0,0 +1,21 @@\n+typedef struct _rec_stl rec_stl;\n+struct _rec_stl {\n+   unsigned char **strs;\n+};\n+orec_str_list(int count) {\n+   rec_stl *stl;\n+   int i, j;\n+   int li, lj;\n+   unsigned char ci, cj;\n+   for (i = 0; i < count; i++) {\n+      for (j = i + 1; j < count; j++) {\n+         cj = lj > 2 ? stl->strs[j][0] : (long)stl->strs[j] & 0xff;\n+         if ((count >= 16 && cj < ci) || (cj == ci && lj > li)) {\n+            stl->strs[j] = stl->strs[i];\n+            ci ^= cj;\n+            cj ^= ci;\n+            ci ^= cj;\n+         }\n+      }\n+   }\n+}"}]}