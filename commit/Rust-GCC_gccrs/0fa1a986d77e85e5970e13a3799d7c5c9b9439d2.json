{"sha": "0fa1a986d77e85e5970e13a3799d7c5c9b9439d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZhMWE5ODZkNzdlODVlNTk3MGUxM2EzNzk5ZDdjNWM5Yjk0MzlkMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-05-28T22:01:38Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-05-28T22:01:38Z"}, "message": "re PR c++/46124 ([C++0x] ICE: tree check: expected var_decl or function_decl, have error_mark in cp_parser_lambda_declarator_opt, at cp/parser.c:7817 on invalid lambda function)\n\n\tPR c++/46124\n\t* parser.c (cp_parser_lambda_expression): Improve error recovery.\n\t(cp_parser_lambda_declarator_opt): Likewise.  Return bool.\n\nFrom-SVN: r174386", "tree": {"sha": "c8b1ef3a191ccb8c22c17065d6353724176e6f37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8b1ef3a191ccb8c22c17065d6353724176e6f37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fa1a986d77e85e5970e13a3799d7c5c9b9439d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fa1a986d77e85e5970e13a3799d7c5c9b9439d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fa1a986d77e85e5970e13a3799d7c5c9b9439d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fa1a986d77e85e5970e13a3799d7c5c9b9439d2/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "32da2be4ccf3662d354e954d705b7a8e8ea5f0eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32da2be4ccf3662d354e954d705b7a8e8ea5f0eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32da2be4ccf3662d354e954d705b7a8e8ea5f0eb"}], "stats": {"total": 44, "additions": 36, "deletions": 8}, "files": [{"sha": "04ae40772bcdf13268e0381fa750adec8bd3b664", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa1a986d77e85e5970e13a3799d7c5c9b9439d2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa1a986d77e85e5970e13a3799d7c5c9b9439d2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0fa1a986d77e85e5970e13a3799d7c5c9b9439d2", "patch": "@@ -1,3 +1,9 @@\n+2011-05-28  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/46124\n+\t* parser.c (cp_parser_lambda_expression): Improve error recovery.\n+\t(cp_parser_lambda_declarator_opt): Likewise.  Return bool.\n+\n 2011-05-27  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/47277"}, {"sha": "a41008225fa7b577452f18480b0fb60d68fbe453", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa1a986d77e85e5970e13a3799d7c5c9b9439d2/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa1a986d77e85e5970e13a3799d7c5c9b9439d2/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=0fa1a986d77e85e5970e13a3799d7c5c9b9439d2", "patch": "@@ -1580,7 +1580,7 @@ static tree cp_parser_lambda_expression\n   (cp_parser *);\n static void cp_parser_lambda_introducer\n   (cp_parser *, tree);\n-static void cp_parser_lambda_declarator_opt\n+static bool cp_parser_lambda_declarator_opt\n   (cp_parser *, tree);\n static void cp_parser_lambda_body\n   (cp_parser *, tree);\n@@ -7347,6 +7347,7 @@ cp_parser_lambda_expression (cp_parser* parser)\n {\n   tree lambda_expr = build_lambda_expr ();\n   tree type;\n+  bool ok;\n \n   LAMBDA_EXPR_LOCATION (lambda_expr)\n     = cp_lexer_peek_token (parser->lexer)->location;\n@@ -7382,9 +7383,12 @@ cp_parser_lambda_expression (cp_parser* parser)\n     /* By virtue of defining a local class, a lambda expression has access to\n        the private variables of enclosing classes.  */\n \n-    cp_parser_lambda_declarator_opt (parser, lambda_expr);\n+    ok = cp_parser_lambda_declarator_opt (parser, lambda_expr);\n \n-    cp_parser_lambda_body (parser, lambda_expr);\n+    if (ok)\n+      cp_parser_lambda_body (parser, lambda_expr);\n+    else if (cp_parser_require (parser, CPP_OPEN_BRACE, RT_OPEN_BRACE))\n+      cp_parser_skip_to_end_of_block_or_statement (parser);\n \n     /* The capture list was built up in reverse order; fix that now.  */\n     {\n@@ -7418,7 +7422,8 @@ cp_parser_lambda_expression (cp_parser* parser)\n       LAMBDA_EXPR_CAPTURE_LIST (lambda_expr) = newlist;\n     }\n \n-    maybe_add_lambda_conv_op (type);\n+    if (ok)\n+      maybe_add_lambda_conv_op (type);\n \n     type = finish_struct (type, /*attributes=*/NULL_TREE);\n \n@@ -7427,7 +7432,10 @@ cp_parser_lambda_expression (cp_parser* parser)\n \n   pop_deferring_access_checks ();\n \n-  return build_lambda_object (lambda_expr);\n+  if (ok)\n+    return build_lambda_object (lambda_expr);\n+  else\n+    return error_mark_node;\n }\n \n /* Parse the beginning of a lambda expression.\n@@ -7592,7 +7600,7 @@ cp_parser_lambda_introducer (cp_parser* parser, tree lambda_expr)\n \n    LAMBDA_EXPR is the current representation of the lambda expression.  */\n \n-static void\n+static bool\n cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n {\n   /* 5.1.1.4 of the standard says:\n@@ -7688,12 +7696,17 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n     fco = grokmethod (&return_type_specs,\n \t\t      declarator,\n \t\t      attributes);\n-    DECL_INITIALIZED_IN_CLASS_P (fco) = 1;\n-    DECL_ARTIFICIAL (fco) = 1;\n+    if (fco != error_mark_node)\n+      {\n+\tDECL_INITIALIZED_IN_CLASS_P (fco) = 1;\n+\tDECL_ARTIFICIAL (fco) = 1;\n+      }\n \n     finish_member_declaration (fco);\n \n     obstack_free (&declarator_obstack, p);\n+\n+    return (fco != error_mark_node);\n   }\n }\n "}, {"sha": "524c9f449ab626ce527e445f916c97a493db2b2b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa1a986d77e85e5970e13a3799d7c5c9b9439d2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa1a986d77e85e5970e13a3799d7c5c9b9439d2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0fa1a986d77e85e5970e13a3799d7c5c9b9439d2", "patch": "@@ -1,3 +1,7 @@\n+2011-05-28  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/lambda/lambda-syntax1.C: New.\n+\n 2011-05-27  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp0x/enum18.C: Adjust."}, {"sha": "f350133ac6dfe1de47abb1c0ae20ae73252e624a", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-syntax1.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa1a986d77e85e5970e13a3799d7c5c9b9439d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-syntax1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa1a986d77e85e5970e13a3799d7c5c9b9439d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-syntax1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-syntax1.C?ref=0fa1a986d77e85e5970e13a3799d7c5c9b9439d2", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/46124\n+// { dg-options -std=c++0x }\n+\n+void foo() { [] () -> void (); } // { dg-error \"returning a function\" }\n+// { dg-error \"expected .\\{\" \"\" { target *-*-* } 4 }"}]}