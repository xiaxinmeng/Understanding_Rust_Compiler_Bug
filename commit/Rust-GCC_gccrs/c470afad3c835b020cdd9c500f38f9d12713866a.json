{"sha": "c470afad3c835b020cdd9c500f38f9d12713866a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ3MGFmYWQzYzgzNWIwMjBjZGQ5YzUwMGYzOGY5ZDEyNzEzODY2YQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-12-22T14:31:27Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-12-22T14:31:27Z"}, "message": "dwarf2out.c (save_rtx): Deleted.\n\n\t* dwarf2out.c (save_rtx): Deleted.\n\t(mem_loc_descriptor): Do equivalent operation.\n\t(add_const_value_attribute, case CONST): Likewise.\n\t(add_name_and_src_coords_attributes): Likewise.\n\nFrom-SVN: r48266", "tree": {"sha": "b796073bdba01040f52390a2e8762505de8e6e7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b796073bdba01040f52390a2e8762505de8e6e7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c470afad3c835b020cdd9c500f38f9d12713866a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c470afad3c835b020cdd9c500f38f9d12713866a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c470afad3c835b020cdd9c500f38f9d12713866a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c470afad3c835b020cdd9c500f38f9d12713866a/comments", "author": null, "committer": null, "parents": [{"sha": "7a73ad55d8dbf2a2cf99268013d41a0af0d95b02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a73ad55d8dbf2a2cf99268013d41a0af0d95b02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a73ad55d8dbf2a2cf99268013d41a0af0d95b02"}], "stats": {"total": 38, "additions": 17, "deletions": 21}, "files": [{"sha": "69e5c511373b918d399e1ebda7e6734e497f5661", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c470afad3c835b020cdd9c500f38f9d12713866a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c470afad3c835b020cdd9c500f38f9d12713866a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c470afad3c835b020cdd9c500f38f9d12713866a", "patch": "@@ -1,3 +1,10 @@\n+Sat Dec 22 08:59:50 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* dwarf2out.c (save_rtx): Deleted.\n+\t(mem_loc_descriptor): Do equivalent operation.\n+\t(add_const_value_attribute, case CONST): Likewise.\n+\t(add_name_and_src_coords_attributes): Likewise.\n+\n 2001-12-21  Kazu Hirata  <kazu@hxi.com>\n \n \t* config/h8300/h8300.h: Fix comment formatting."}, {"sha": "8c28bf4ddf743f1846ab4d36bd5c6f2f11e2f85a", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 10, "deletions": 21, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c470afad3c835b020cdd9c500f38f9d12713866a/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c470afad3c835b020cdd9c500f38f9d12713866a/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=c470afad3c835b020cdd9c500f38f9d12713866a", "patch": "@@ -3386,9 +3386,7 @@ static int comp_unit_has_inlines;\n #endif\n \n /* Array of RTXes referenced by the debugging information, which therefore\n-   must be kept around forever.  We do this rather than perform GC on\n-   the dwarf info because almost all of the dwarf info lives forever, and\n-   it's easier to support non-GC frontends this way.  */\n+   must be kept around forever.  This is a GC root.  */\n static varray_type used_rtx_varray;\n \n /* Forward declarations for functions defined in this file.  */\n@@ -3604,7 +3602,6 @@ static void init_file_table\t\tPARAMS ((void));\n static void add_incomplete_type\t\tPARAMS ((tree));\n static void retry_incomplete_types\tPARAMS ((void));\n static void gen_type_die_for_member\tPARAMS ((tree, tree, dw_die_ref));\n-static rtx save_rtx\t\t\tPARAMS ((rtx));\n static void splice_child_die\t\tPARAMS ((dw_die_ref, dw_die_ref));\n static int file_info_cmp\t\tPARAMS ((const void *, const void *));\n static dw_loc_list_ref new_loc_list     PARAMS ((dw_loc_descr_ref, \n@@ -3736,19 +3733,6 @@ dwarf2out_set_demangle_name_func (func)\n {\n   demangle_name_func = func;\n }\n-\f\n-/* Return an rtx like ORIG which lives forever.  If we're doing GC,\n-   that means adding it to used_rtx_varray.  If not, that means making\n-   a copy on the permanent_obstack.  */\n-\n-static rtx\n-save_rtx (orig)\n-     rtx orig;\n-{\n-  VARRAY_PUSH_RTX (used_rtx_varray, orig);\n-\n-  return orig;\n-}\n \n /* Test if rtl node points to a pseudo register.  */\n \n@@ -7770,7 +7754,8 @@ mem_loc_descriptor (rtl, mode)\n \n       mem_loc_result = new_loc_descr (DW_OP_addr, 0, 0);\n       mem_loc_result->dw_loc_oprnd1.val_class = dw_val_class_addr;\n-      mem_loc_result->dw_loc_oprnd1.v.val_addr = save_rtx (rtl);\n+      mem_loc_result->dw_loc_oprnd1.v.val_addr = rtl;\n+      VARRAY_PUSH_RTX (used_rtx_varray, rtl);\n       break;\n \n     case PRE_MODIFY:\n@@ -8623,7 +8608,8 @@ add_const_value_attribute (die, rtl)\n     case SYMBOL_REF:\n     case LABEL_REF:\n     case CONST:\n-      add_AT_addr (die, DW_AT_const_value, save_rtx (rtl));\n+      add_AT_addr (die, DW_AT_const_value, rtl);\n+      VARRAY_PUSH_RTX (used_rtx_varray, rtl);\n       break;\n \n     case PLUS:\n@@ -9365,8 +9351,11 @@ add_name_and_src_coords_attributes (die, decl)\n   /* Get the function's name, as described by its RTL.  This may be different\n      from the DECL_NAME name used in the source file.  */\n   if (TREE_CODE (decl) == FUNCTION_DECL && TREE_ASM_WRITTEN (decl))\n-    add_AT_addr (die, DW_AT_VMS_rtnbeg_pd_address,\n-\t\t save_rtx (XEXP (DECL_RTL (decl), 0)));\n+    {\n+      add_AT_addr (die, DW_AT_VMS_rtnbeg_pd_address,\n+\t\t   XEXP (DECL_RTL (decl), 0));\n+      VARRAY_PUSH_RTX (used_rtx_varray, XEXP (DECL_RTL (decl), 0));\n+    }\n #endif\n }\n "}]}