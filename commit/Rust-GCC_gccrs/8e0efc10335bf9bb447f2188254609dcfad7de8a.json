{"sha": "8e0efc10335bf9bb447f2188254609dcfad7de8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGUwZWZjMTAzMzViZjliYjQ0N2YyMTg4MjU0NjA5ZGNmYWQ3ZGU4YQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-01-21T22:09:53Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-01-21T22:10:02Z"}, "message": "i386: Do GNU2 TLS address computation in ptr_mode\n\nSince GNU2 TLS address from glibc run-time is in ptr_mode, we should do\nGNU2 TLS address computation in ptr_mode and zero-extend result to Pmode.\n\ngcc/\n\n\tPR target/93319\n\t* config/i386/i386.c (ix86_tls_module_base): Replace Pmode\n\twith ptr_mode.\n\t(legitimize_tls_address): Do GNU2 TLS address computation in\n\tptr_mode and zero-extend result to Pmode.\n\t*  config/i386/i386.md (@tls_dynamic_gnu2_64_<mode>): Replace\n\t:P with :PTR and Pmode with ptr_mode.\n\t(*tls_dynamic_gnu2_lea_64_<mode>): Likewise.\n\t(*tls_dynamic_gnu2_call_64_<mode>): Likewise.\n\t(*tls_dynamic_gnu2_combine_64_<mode>): Likewise.\n\ngcc/testsuite/\n\n\tPR target/93319\n\t* gcc.target/i386/pr93319-1a.c: Don't include <stdio.h>.\n\t(test1): Replace printf with __builtin_printf.", "tree": {"sha": "c75b0405936dbf46d5100ebd622e8b1b98d22236", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c75b0405936dbf46d5100ebd622e8b1b98d22236"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e0efc10335bf9bb447f2188254609dcfad7de8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e0efc10335bf9bb447f2188254609dcfad7de8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e0efc10335bf9bb447f2188254609dcfad7de8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e0efc10335bf9bb447f2188254609dcfad7de8a/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad09440a09597c34e0b93498aad9d6ef0b8ca9ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad09440a09597c34e0b93498aad9d6ef0b8ca9ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad09440a09597c34e0b93498aad9d6ef0b8ca9ae"}], "stats": {"total": 117, "additions": 62, "deletions": 55}, "files": [{"sha": "1763fe0631d42b524aae6fc1e134644c80fba92c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e0efc10335bf9bb447f2188254609dcfad7de8a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e0efc10335bf9bb447f2188254609dcfad7de8a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8e0efc10335bf9bb447f2188254609dcfad7de8a", "patch": "@@ -1,3 +1,17 @@\n+2020-01-21  H.J. Lu  <hongjiu.lu@intel.com>\n+\t    Uros Bizjak    <ubizjak@gmail.com>\n+\n+\tPR target/93319\n+\t* config/i386/i386.c (ix86_tls_module_base): Replace Pmode\n+\twith ptr_mode.\n+\t(legitimize_tls_address): Do GNU2 TLS address computation in\n+\tptr_mode and zero-extend result to Pmode.\n+\t*  config/i386/i386.md (@tls_dynamic_gnu2_64_<mode>): Replace\n+\t:P with :PTR and Pmode with ptr_mode.\n+\t(*tls_dynamic_gnu2_lea_64_<mode>): Likewise.\n+\t(*tls_dynamic_gnu2_call_64_<mode>): Likewise.\n+\t(*tls_dynamic_gnu2_combine_64_<mode>): Likewise.\n+\n 2020-01-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/93333"}, {"sha": "ffe60baa72ad466a9bc99dfcb19ce8645fb815bd", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 16, "deletions": 27, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e0efc10335bf9bb447f2188254609dcfad7de8a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e0efc10335bf9bb447f2188254609dcfad7de8a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=8e0efc10335bf9bb447f2188254609dcfad7de8a", "patch": "@@ -10717,7 +10717,7 @@ ix86_tls_module_base (void)\n   if (!ix86_tls_module_base_symbol)\n     {\n       ix86_tls_module_base_symbol\n-\t= gen_rtx_SYMBOL_REF (Pmode, \"_TLS_MODULE_BASE_\");\n+\t= gen_rtx_SYMBOL_REF (ptr_mode, \"_TLS_MODULE_BASE_\");\n \n       SYMBOL_REF_FLAGS (ix86_tls_module_base_symbol)\n \t|= TLS_MODEL_GLOBAL_DYNAMIC << SYMBOL_FLAG_TLS_SHIFT;\n@@ -10748,8 +10748,6 @@ legitimize_tls_address (rtx x, enum tls_model model, bool for_mov)\n   switch (model)\n     {\n     case TLS_MODEL_GLOBAL_DYNAMIC:\n-      dest = gen_reg_rtx (Pmode);\n-\n       if (!TARGET_64BIT)\n \t{\n \t  if (flag_pic && !TARGET_PECOFF)\n@@ -10763,24 +10761,16 @@ legitimize_tls_address (rtx x, enum tls_model model, bool for_mov)\n \n       if (TARGET_GNU2_TLS)\n \t{\n+\t  dest = gen_reg_rtx (ptr_mode);\n \t  if (TARGET_64BIT)\n-\t    emit_insn (gen_tls_dynamic_gnu2_64 (Pmode, dest, x));\n+\t    emit_insn (gen_tls_dynamic_gnu2_64 (ptr_mode, dest, x));\n \t  else\n \t    emit_insn (gen_tls_dynamic_gnu2_32 (dest, x, pic));\n \n-\t  tp = get_thread_pointer (Pmode, true);\n-\n-\t  /* NB: Since DEST set by tls_dynamic_gnu2_64 is in ptr_mode,\n-\t     make sure that PLUS is done in ptr_mode.  */\n-\t  if (Pmode != ptr_mode)\n-\t    {\n-\t      tp = lowpart_subreg (ptr_mode, tp, Pmode);\n-\t      dest = lowpart_subreg (ptr_mode, dest, Pmode);\n-\t      dest = gen_rtx_PLUS (ptr_mode, tp, dest);\n-\t      dest = gen_rtx_ZERO_EXTEND (Pmode, dest);\n-\t    }\n-\t  else\n-\t    dest = gen_rtx_PLUS (Pmode, tp, dest);\n+\t  tp = get_thread_pointer (ptr_mode, true);\n+\t  dest = gen_rtx_PLUS (ptr_mode, tp, dest);\n+\t  if (GET_MODE (dest) != Pmode)\n+\t     dest = gen_rtx_ZERO_EXTEND (Pmode, dest);\n \t  dest = force_reg (Pmode, dest);\n \n \t  if (GET_MODE (x) != Pmode)\n@@ -10792,6 +10782,7 @@ legitimize_tls_address (rtx x, enum tls_model model, bool for_mov)\n \t{\n \t  rtx caddr = ix86_tls_get_addr ();\n \n+\t  dest = gen_reg_rtx (Pmode);\n \t  if (TARGET_64BIT)\n \t    {\n \t      rtx rax = gen_rtx_REG (Pmode, AX_REG);\n@@ -10815,8 +10806,6 @@ legitimize_tls_address (rtx x, enum tls_model model, bool for_mov)\n       break;\n \n     case TLS_MODEL_LOCAL_DYNAMIC:\n-      base = gen_reg_rtx (Pmode);\n-\n       if (!TARGET_64BIT)\n \t{\n \t  if (flag_pic)\n@@ -10832,19 +10821,22 @@ legitimize_tls_address (rtx x, enum tls_model model, bool for_mov)\n \t{\n \t  rtx tmp = ix86_tls_module_base ();\n \n+\t  base = gen_reg_rtx (ptr_mode);\n \t  if (TARGET_64BIT)\n-\t    emit_insn (gen_tls_dynamic_gnu2_64 (Pmode, base, tmp));\n+\t    emit_insn (gen_tls_dynamic_gnu2_64 (ptr_mode, base, tmp));\n \t  else\n \t    emit_insn (gen_tls_dynamic_gnu2_32 (base, tmp, pic));\n \n-\t  tp = get_thread_pointer (Pmode, true);\n-\t  set_unique_reg_note (get_last_insn (), REG_EQUAL,\n-\t\t\t       gen_rtx_MINUS (Pmode, tmp, tp));\n+\t  tp = get_thread_pointer (ptr_mode, true);\n+\t  if (GET_MODE (base) != Pmode)\n+\t    base = gen_rtx_ZERO_EXTEND (Pmode, base);\n+\t  base = force_reg (Pmode, base);\n \t}\n       else\n \t{\n \t  rtx caddr = ix86_tls_get_addr ();\n \n+\t  base = gen_reg_rtx (Pmode);\n \t  if (TARGET_64BIT)\n \t    {\n \t      rtx rax = gen_rtx_REG (Pmode, AX_REG);\n@@ -10876,11 +10868,8 @@ legitimize_tls_address (rtx x, enum tls_model model, bool for_mov)\n \n       if (TARGET_GNU2_TLS)\n \t{\n-\t  /* NB: Since DEST set by tls_dynamic_gnu2_64 is in ptr_mode,\n-\t     make sure that PLUS is done in ptr_mode.  */\n-\t  if (Pmode != ptr_mode)\n+\t  if (GET_MODE (tp) != Pmode)\n \t    {\n-\t      tp = lowpart_subreg (ptr_mode, tp, Pmode);\n \t      dest = lowpart_subreg (ptr_mode, dest, Pmode);\n \t      dest = gen_rtx_PLUS (ptr_mode, tp, dest);\n \t      dest = gen_rtx_ZERO_EXTEND (Pmode, dest);"}, {"sha": "6c674aaea5bf80a6e5618e05686ac7ccef8ca905", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e0efc10335bf9bb447f2188254609dcfad7de8a/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e0efc10335bf9bb447f2188254609dcfad7de8a/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=8e0efc10335bf9bb447f2188254609dcfad7de8a", "patch": "@@ -15187,23 +15187,23 @@\n \n (define_expand \"@tls_dynamic_gnu2_64_<mode>\"\n   [(set (match_dup 2)\n-\t(unspec:P [(match_operand 1 \"tls_symbolic_operand\")]\n-\t\t  UNSPEC_TLSDESC))\n-   (parallel\n-    [(set (match_operand:P 0 \"register_operand\")\n-\t  (unspec:P [(match_dup 1) (match_dup 2) (reg:P SP_REG)]\n+\t(unspec:PTR [(match_operand 1 \"tls_symbolic_operand\")]\n \t\t    UNSPEC_TLSDESC))\n+   (parallel\n+    [(set (match_operand:PTR 0 \"register_operand\")\n+\t  (unspec:PTR [(match_dup 1) (match_dup 2) (reg:PTR SP_REG)]\n+\t\t      UNSPEC_TLSDESC))\n      (clobber (reg:CC FLAGS_REG))])]\n   \"TARGET_64BIT && TARGET_GNU2_TLS\"\n {\n-  operands[2] = can_create_pseudo_p () ? gen_reg_rtx (Pmode) : operands[0];\n+  operands[2] = can_create_pseudo_p () ? gen_reg_rtx (ptr_mode) : operands[0];\n   ix86_tls_descriptor_calls_expanded_in_cfun = true;\n })\n \n (define_insn \"*tls_dynamic_gnu2_lea_64_<mode>\"\n-  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n-\t(unspec:P [(match_operand 1 \"tls_symbolic_operand\")]\n-\t\t  UNSPEC_TLSDESC))]\n+  [(set (match_operand:PTR 0 \"register_operand\" \"=r\")\n+\t(unspec:PTR [(match_operand 1 \"tls_symbolic_operand\")]\n+\t\t    UNSPEC_TLSDESC))]\n   \"TARGET_64BIT && TARGET_GNU2_TLS\"\n   \"lea%z0\\t{%E1@TLSDESC(%%rip), %0|%0, %E1@TLSDESC[rip]}\"\n   [(set_attr \"type\" \"lea\")\n@@ -15212,10 +15212,10 @@\n    (set_attr \"length_address\" \"4\")])\n \n (define_insn \"*tls_dynamic_gnu2_call_64_<mode>\"\n-  [(set (match_operand:P 0 \"register_operand\" \"=a\")\n-\t(unspec:P [(match_operand 1 \"tls_symbolic_operand\")\n-\t\t   (match_operand:P 2 \"register_operand\" \"0\")\n-\t\t   (reg:P SP_REG)]\n+  [(set (match_operand:PTR 0 \"register_operand\" \"=a\")\n+\t(unspec:PTR [(match_operand 1 \"tls_symbolic_operand\")\n+\t\t   (match_operand:PTR 2 \"register_operand\" \"0\")\n+\t\t   (reg:PTR SP_REG)]\n \t\t  UNSPEC_TLSDESC))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && TARGET_GNU2_TLS\"\n@@ -15225,23 +15225,23 @@\n    (set_attr \"length_address\" \"0\")])\n \n (define_insn_and_split \"*tls_dynamic_gnu2_combine_64_<mode>\"\n-  [(set (match_operand:P 0 \"register_operand\" \"=&a\")\n-\t(plus:P\n-\t (unspec:P [(match_operand 2 \"tls_modbase_operand\")\n-\t\t     (match_operand:P 3)\n-\t\t     (reg:P SP_REG)]\n-\t\t   UNSPEC_TLSDESC)\n-\t (const:P (unspec:P\n-\t\t    [(match_operand 1 \"tls_symbolic_operand\")]\n-\t\t    UNSPEC_DTPOFF))))\n+  [(set (match_operand:PTR 0 \"register_operand\" \"=&a\")\n+\t(plus:PTR\n+\t (unspec:PTR [(match_operand 2 \"tls_modbase_operand\")\n+\t\t      (match_operand:PTR 3)\n+\t\t      (reg:PTR SP_REG)]\n+\t\t     UNSPEC_TLSDESC)\n+\t (const:PTR (unspec:PTR\n+\t\t     [(match_operand 1 \"tls_symbolic_operand\")]\n+\t\t     UNSPEC_DTPOFF))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && TARGET_GNU2_TLS\"\n   \"#\"\n   \"\"\n   [(set (match_dup 0) (match_dup 4))]\n {\n-  operands[4] = can_create_pseudo_p () ? gen_reg_rtx (Pmode) : operands[0];\n-  emit_insn (gen_tls_dynamic_gnu2_64 (Pmode, operands[4], operands[1]));\n+  operands[4] = can_create_pseudo_p () ? gen_reg_rtx (ptr_mode) : operands[0];\n+  emit_insn (gen_tls_dynamic_gnu2_64 (ptr_mode, operands[4], operands[1]));\n })\n \n (define_split"}, {"sha": "2130870b9fef219b65f802cb77c4b9bda3ab763d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e0efc10335bf9bb447f2188254609dcfad7de8a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e0efc10335bf9bb447f2188254609dcfad7de8a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8e0efc10335bf9bb447f2188254609dcfad7de8a", "patch": "@@ -1,3 +1,9 @@\n+2020-01-21  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/93319\n+\t* gcc.target/i386/pr93319-1a.c: Don't include <stdio.h>.\n+\t(test1): Replace printf with __builtin_printf.\n+\n 2020-01-21  Bin Cheng  <bin.linux@linux.alibaba.com>\n \n \t* g++.dg/coroutines/co-await-void_type.C: New test."}, {"sha": "122c111d0cbb2c1c92ebad09c0a3476d21f7a704", "filename": "gcc/testsuite/gcc.target/i386/pr93319-1a.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e0efc10335bf9bb447f2188254609dcfad7de8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93319-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e0efc10335bf9bb447f2188254609dcfad7de8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93319-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93319-1a.c?ref=8e0efc10335bf9bb447f2188254609dcfad7de8a", "patch": "@@ -4,21 +4,19 @@\n /* { dg-require-effective-target tls_native } */\n /* { dg-options \"-mx32 -fPIC -mtls-dialect=gnu2\" } */\n \n-#include <stdio.h>\n-\n extern __thread int bar;\n static __thread int foo = 30;\n \n int *\n test1 (void)\n {\n-  printf (\"foo: %d\\n\", foo);\n+  __builtin_printf (\"foo: %d\\n\", foo);\n   return &foo;\n }\n \n int *\n test2 (void)\n {\n-  printf (\"bar: %d\\n\", bar);\n+  __builtin_printf (\"bar: %d\\n\", bar);\n   return &bar;\n }"}]}