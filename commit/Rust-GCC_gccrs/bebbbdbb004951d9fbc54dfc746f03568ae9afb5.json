{"sha": "bebbbdbb004951d9fbc54dfc746f03568ae9afb5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmViYmJkYmIwMDQ5NTFkOWZiYzU0ZGZjNzQ2ZjAzNTY4YWU5YWZiNQ==", "commit": {"author": {"name": "Jan Brittenson", "email": "bson@gnu.org", "date": "1993-09-22T15:27:20Z"}, "committer": {"name": "Jan Brittenson", "email": "bson@gnu.org", "date": "1993-09-22T15:27:20Z"}, "message": "Initial revision\n\nFrom-SVN: r5386", "tree": {"sha": "de707184399c7c1580d913f7a9a17bdf3c0b1975", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de707184399c7c1580d913f7a9a17bdf3c0b1975"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bebbbdbb004951d9fbc54dfc746f03568ae9afb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bebbbdbb004951d9fbc54dfc746f03568ae9afb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bebbbdbb004951d9fbc54dfc746f03568ae9afb5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bebbbdbb004951d9fbc54dfc746f03568ae9afb5/comments", "author": null, "committer": null, "parents": [{"sha": "76c305963dbd7ea522df4d6473b5e0903ae8f8f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76c305963dbd7ea522df4d6473b5e0903ae8f8f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76c305963dbd7ea522df4d6473b5e0903ae8f8f6"}], "stats": {"total": 133, "additions": 133, "deletions": 0}, "files": [{"sha": "c00da5b35393fa20939d7f6ff0626f8d3c0344d4", "filename": "gcc/bc-emit.h", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bebbbdbb004951d9fbc54dfc746f03568ae9afb5/gcc%2Fbc-emit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bebbbdbb004951d9fbc54dfc746f03568ae9afb5/gcc%2Fbc-emit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbc-emit.h?ref=bebbbdbb004951d9fbc54dfc746f03568ae9afb5", "patch": "@@ -0,0 +1,133 @@\n+/* bc-emit.h - declare entry points for producing object files of bytecodes. */\n+\n+/* Internal format of symbol table for the object file. */\n+struct bc_sym\n+{\n+  /* Private copy separately malloc'd. */\n+  char *name;\n+\n+  /* Symbol has a defined value. */\n+  unsigned int defined:1;\n+\n+  /* Symbol has been globalized. */\n+  unsigned int global:1;\n+\n+  /* Symbol is common. */\n+  unsigned int common:1;\n+\n+  /* Value if defined. */\n+  unsigned long int val;\n+\n+  /* Used in internal symbol table structure. */\n+  struct bc_sym *next;\n+};\n+\n+\n+/* List of symbols defined in a particular segment. */\n+struct bc_segsym\n+{\n+  struct bc_sym *sym;\n+  struct bc_segsym *next;\n+};\n+\n+\n+/* List of relocations needed in a particular segment. */\n+struct bc_segreloc\n+{\n+  /* Offset of datum to be relocated. */\n+  unsigned int offset;\n+\n+  /* Symbol to be relocated by. */\n+  struct bc_sym *sym;\n+\n+  struct bc_segreloc *next;\n+};\n+\n+\n+/* Segment of an object file. */\n+struct bc_seg\n+{\n+  /* Size allocated to contents. */\n+  unsigned int alloc;\n+\n+  /* Pointer to base of contents. */\n+  char *data;\n+\n+  /* Actual size of contents. */\n+  unsigned int size;\n+\n+  /* List of symbols defined in this segment. */\n+  struct bc_segsym *syms;\n+\n+  /* List of relocations for this segment. */\n+  struct bc_segreloc *relocs;\n+};\n+\n+\n+/* Anonymous bytecode label within a single function. */\n+struct bc_label\n+{\n+  /* Offset of label from start of segment. */\n+  unsigned int offset;\n+\n+  /* True when offset is valid. */\n+  unsigned int defined:1;\n+\n+  /* Unique bytecode ID, used to determine innermost\n+     block containment */\n+  int uid;\n+\n+  /* Next node in list */\n+  struct bc_label *next;\n+};\n+\n+\n+/* Reference to a bc_label; a list of all such references is kept for\n+   the function, then when it is finished they are backpatched to\n+   contain the correct values. */\n+\n+struct bc_labelref\n+{\n+  /* Label referenced. */\n+  struct bc_label *label;\n+\n+  /* Code offset of reference. */\n+  unsigned int offset;\n+\n+  /* Next labelref in list */\n+  struct bc_labelref *next;\n+};\n+\n+\f\n+\n+extern void bc_initialize();\n+extern int bc_begin_function();\n+extern char *bc_emit_trampoline();\n+extern void bc_emit_bytecode();\n+extern void bc_emit_bytecode_const();\n+extern struct bc_label *bc_get_bytecode_label();\n+extern int bc_emit_bytecode_labeldef();\n+extern void bc_emit_bytecode_labelref();\n+extern void bc_emit_code_labelref();\n+extern char *bc_end_function();\n+extern void bc_align_const();\n+extern void bc_emit_const();\n+extern void bc_emit_const_skip();\n+extern int bc_emit_const_labeldef();\n+extern void bc_emit_const_labelref();\n+extern void bc_align_data();\n+extern void bc_emit_data();\n+extern void bc_emit_data_skip();\n+extern int bc_emit_data_labeldef();\n+extern void bc_emit_data_labelref();\n+extern int bc_define_pointer ();\n+extern int bc_emit_common();\n+extern void bc_globalize_label();\n+extern void bc_text();\n+extern void bc_data();\n+extern void bc_align();\n+extern void bc_emit();\n+extern void bc_emit_skip();\n+extern int bc_emit_labeldef();\n+extern void bc_emit_labelref();\n+extern void bc_write_file();"}]}