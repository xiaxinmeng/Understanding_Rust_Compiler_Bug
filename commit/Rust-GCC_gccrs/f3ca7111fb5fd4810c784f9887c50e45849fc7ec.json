{"sha": "f3ca7111fb5fd4810c784f9887c50e45849fc7ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNjYTcxMTFmYjVmZDQ4MTBjNzg0Zjk4ODdjNTBlNDU4NDlmYzdlYw==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-10-11T13:11:58Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-10-11T13:11:58Z"}, "message": "sh.h (TARGET_SH4A_ARCH): Remove macro.\n\ngcc/\n\t* config/sh/sh.h (TARGET_SH4A_ARCH): Remove macro.\n\t* config/sh/sh.h: Replace uses of TARGET_SH4A_ARCH with TARGET_SH4A.\n\t* config/sh/sh.c: Likewise.\n\t* config/sh/sh-mem.cc: Likewise.\n\t* config/sh/sh.md: Likewise.\n\t* config/sh/predicates.md: Likewise.\n\t* config/sh/sync.md: Likewise.\n\nFrom-SVN: r216119", "tree": {"sha": "09f0cc59b4c43814112afd391f9e241ed6ba40ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09f0cc59b4c43814112afd391f9e241ed6ba40ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3ca7111fb5fd4810c784f9887c50e45849fc7ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3ca7111fb5fd4810c784f9887c50e45849fc7ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3ca7111fb5fd4810c784f9887c50e45849fc7ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3ca7111fb5fd4810c784f9887c50e45849fc7ec/comments", "author": null, "committer": null, "parents": [{"sha": "1665db4dbd2b04ed42f094b399db251bb2f8b839", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1665db4dbd2b04ed42f094b399db251bb2f8b839", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1665db4dbd2b04ed42f094b399db251bb2f8b839"}], "stats": {"total": 66, "additions": 36, "deletions": 30}, "files": [{"sha": "05a596a7b342eef7d212061498f0c97f830507e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ca7111fb5fd4810c784f9887c50e45849fc7ec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ca7111fb5fd4810c784f9887c50e45849fc7ec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f3ca7111fb5fd4810c784f9887c50e45849fc7ec", "patch": "@@ -1,3 +1,13 @@\n+2014-10-11  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\t* config/sh/sh.h (TARGET_SH4A_ARCH): Remove macro.\n+\t* config/sh/sh.h: Replace uses of TARGET_SH4A_ARCH with TARGET_SH4A.\n+\t* config/sh/sh.c: Likewise.\n+\t* config/sh/sh-mem.cc: Likewise.\n+\t* config/sh/sh.md: Likewise.\n+\t* config/sh/predicates.md: Likewise.\n+\t* config/sh/sync.md: Likewise.\n+\n 2014-10-11  Martin Liska  <mliska@suse.cz>\n \n \tPR/63376"}, {"sha": "e15388b3fbaa76186e760d5df1a07093e7a0a1ed", "filename": "gcc/config/sh/predicates.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ca7111fb5fd4810c784f9887c50e45849fc7ec/gcc%2Fconfig%2Fsh%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ca7111fb5fd4810c784f9887c50e45849fc7ec/gcc%2Fconfig%2Fsh%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fpredicates.md?ref=f3ca7111fb5fd4810c784f9887c50e45849fc7ec", "patch": "@@ -1074,14 +1074,14 @@\n        (and (match_test \"satisfies_constraint_I08 (op)\")\n \t    (match_test \"mode != QImode\")\n \t    (match_test \"mode != HImode\")\n-\t    (match_test \"TARGET_SH4A_ARCH\"))))\n+\t    (match_test \"TARGET_SH4A\"))))\n \n (define_predicate \"atomic_logical_operand\"\n   (ior (match_code \"subreg,reg\")\n        (and (match_test \"satisfies_constraint_K08 (op)\")\n \t    (match_test \"mode != QImode\")\n \t    (match_test \"mode != HImode\")\n-\t    (match_test \"TARGET_SH4A_ARCH\"))))\n+\t    (match_test \"TARGET_SH4A\"))))\n \n ;; A predicate describing the T bit register in any form.\n (define_predicate \"t_reg_operand\""}, {"sha": "56898d6167c344a1e033d7ec933eeb73913e9284", "filename": "gcc/config/sh/sh-mem.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ca7111fb5fd4810c784f9887c50e45849fc7ec/gcc%2Fconfig%2Fsh%2Fsh-mem.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ca7111fb5fd4810c784f9887c50e45849fc7ec/gcc%2Fconfig%2Fsh%2Fsh-mem.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-mem.cc?ref=f3ca7111fb5fd4810c784f9887c50e45849fc7ec", "patch": "@@ -56,7 +56,7 @@ expand_block_move (rtx *operands)\n   /* If we could use mov.l to move words and dest is word-aligned, we\n      can use movua.l for loads and still generate a relatively short\n      and efficient sequence.  */\n-  if (TARGET_SH4A_ARCH && align < 4\n+  if (TARGET_SH4A && align < 4\n       && MEM_ALIGN (operands[0]) >= 32\n       && can_move_by_pieces (bytes, 32))\n     {"}, {"sha": "07ed73ea47aea9ac16b71d8245bc4a401eca2586", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ca7111fb5fd4810c784f9887c50e45849fc7ec/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ca7111fb5fd4810c784f9887c50e45849fc7ec/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=f3ca7111fb5fd4810c784f9887c50e45849fc7ec", "patch": "@@ -818,7 +818,7 @@ sh_option_override (void)\n       assembler_dialect = 1;\n       sh_cpu = PROCESSOR_SH4;\n     }\n-  if (TARGET_SH4A_ARCH)\n+  if (TARGET_SH4A)\n     {\n       assembler_dialect = 1;\n       sh_cpu = PROCESSOR_SH4A;\n@@ -11597,7 +11597,7 @@ sh_trampoline_init (rtx tramp_mem, tree fndecl, rtx cxt)\n   if (TARGET_HARD_SH4 || TARGET_SH5)\n     {\n       if (!TARGET_INLINE_IC_INVALIDATE\n-\t  || (!(TARGET_SH4A_ARCH || TARGET_SH4_300) && TARGET_USERMODE))\n+\t  || (!(TARGET_SH4A || TARGET_SH4_300) && TARGET_USERMODE))\n \temit_library_call (function_symbol (NULL, \"__ic_invalidate\",\n \t\t\t\t\t    FUNCTION_ORDINARY),\n \t\t\t   LCT_NORMAL, VOIDmode, 1, tramp, SImode);"}, {"sha": "cd058f96d43f33254e3952122c096869132cc0d0", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ca7111fb5fd4810c784f9887c50e45849fc7ec/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ca7111fb5fd4810c784f9887c50e45849fc7ec/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=f3ca7111fb5fd4810c784f9887c50e45849fc7ec", "patch": "@@ -70,13 +70,9 @@ extern int code_for_indirect_jump_scratch;\n #undef TARGET_SH4\n #define TARGET_SH4 ((target_flags & MASK_SH4) != 0 && TARGET_SH1)\n \n-/* Nonzero if we're generating code for the common subset of\n-   instructions present on both SH4a and SH4al-dsp.  */\n-#define TARGET_SH4A_ARCH TARGET_SH4A\n-\n /* Nonzero if we're generating code for SH4a, unless the use of the\n    FPU is disabled (which makes it compatible with SH4al-dsp).  */\n-#define TARGET_SH4A_FP (TARGET_SH4A_ARCH && TARGET_FPU_ANY)\n+#define TARGET_SH4A_FP (TARGET_SH4A && TARGET_FPU_ANY)\n \n /* Nonzero if we should generate code using the SHcompact instruction\n    set and 32-bit ABI.  */"}, {"sha": "63e8b4e6fbeedd1e82b9dc3cb59942141dbe23d6", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ca7111fb5fd4810c784f9887c50e45849fc7ec/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ca7111fb5fd4810c784f9887c50e45849fc7ec/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=f3ca7111fb5fd4810c784f9887c50e45849fc7ec", "patch": "@@ -6938,7 +6938,7 @@ label:\n       emit_insn (gen_ic_invalidate_line_compact (operands[0], operands[1]));\n       DONE;\n     }\n-  else if (TARGET_SH4A_ARCH || TARGET_SH4_300)\n+  else if (TARGET_SH4A || TARGET_SH4_300)\n     {\n       emit_insn (gen_ic_invalidate_line_sh4a (operands[0]));\n       DONE;\n@@ -6971,7 +6971,7 @@ label:\n (define_insn \"ic_invalidate_line_sh4a\"\n   [(unspec_volatile [(match_operand:SI 0 \"register_operand\" \"r\")]\n \t\t    UNSPEC_ICACHE)]\n-  \"TARGET_SH4A_ARCH || TARGET_SH4_300\"\n+  \"TARGET_SH4A || TARGET_SH4_300\"\n {\n   return       \"ocbwb\t@%0\"\t\"\\n\"\n \t \"\tsynco\"\t\t\"\\n\"\n@@ -13487,7 +13487,7 @@ label:\n   [(set (match_operand:SI 0 \"register_operand\" \"=z\")\n \t(unspec:SI [(match_operand:BLK 1 \"unaligned_load_operand\" \"Sua>\")]\n \t\t   UNSPEC_MOVUA))]\n-  \"TARGET_SH4A_ARCH\"\n+  \"TARGET_SH4A\"\n   \"movua.l\t%1,%0\"\n   [(set_attr \"type\" \"movua\")])\n \n@@ -13500,7 +13500,7 @@ label:\n \t(sign_extract:SI (mem:SI (match_operand:SI 1 \"register_operand\" \"\"))\n \t\t\t (const_int 32) (const_int 0)))\n    (set (match_dup 1) (plus:SI (match_dup 1) (const_int 4)))]\n-  \"TARGET_SH4A_ARCH && REGNO (operands[0]) != REGNO (operands[1])\"\n+  \"TARGET_SH4A && REGNO (operands[0]) != REGNO (operands[1])\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(sign_extract:SI (mem:SI (post_inc:SI\n \t\t\t\t  (match_operand:SI 1 \"register_operand\" \"\")))\n@@ -13512,7 +13512,7 @@ label:\n \t(sign_extract:SI (match_operand:QI 1 \"unaligned_load_operand\" \"\")\n \t\t\t (match_operand 2 \"const_int_operand\" \"\")\n \t\t\t (match_operand 3 \"const_int_operand\" \"\")))]\n-  \"TARGET_SH4A_ARCH || TARGET_SH2A\"\n+  \"TARGET_SH4A || TARGET_SH2A\"\n {\n   if (TARGET_SH2A && TARGET_BITOPS\n       && (satisfies_constraint_Sbw (operands[1])\n@@ -13525,7 +13525,7 @@ label:\n \temit_insn (gen_movsi (operands[0], gen_rtx_REG (SImode, T_REG)));\n       DONE;\n    }\n-  if (TARGET_SH4A_ARCH\n+  if (TARGET_SH4A\n       && INTVAL (operands[2]) == 32\n       && INTVAL (operands[3]) == 0\n       && MEM_P (operands[1]) && MEM_ALIGN (operands[1]) < 32)\n@@ -13544,7 +13544,7 @@ label:\n \t(zero_extract:SI (match_operand:QI 1 \"unaligned_load_operand\" \"\")\n \t\t\t (match_operand 2 \"const_int_operand\" \"\")\n \t\t\t (match_operand 3 \"const_int_operand\" \"\")))]\n-  \"TARGET_SH4A_ARCH || TARGET_SH2A\"\n+  \"TARGET_SH4A || TARGET_SH2A\"\n {\n   if (TARGET_SH2A && TARGET_BITOPS\n       && (satisfies_constraint_Sbw (operands[1])\n@@ -13557,7 +13557,7 @@ label:\n \temit_insn (gen_movsi (operands[0], gen_rtx_REG (SImode, T_REG)));\n       DONE;\n     }\n-  if (TARGET_SH4A_ARCH\n+  if (TARGET_SH4A\n       && INTVAL (operands[2]) == 32\n       && INTVAL (operands[3]) == 0\n       && MEM_P (operands[1]) && MEM_ALIGN (operands[1]) < 32)"}, {"sha": "b83abf726a4032bd0a39d22b511a9a9ebbcb00ac", "filename": "gcc/config/sh/sync.md", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ca7111fb5fd4810c784f9887c50e45849fc7ec/gcc%2Fconfig%2Fsh%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ca7111fb5fd4810c784f9887c50e45849fc7ec/gcc%2Fconfig%2Fsh%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsync.md?ref=f3ca7111fb5fd4810c784f9887c50e45849fc7ec", "patch": "@@ -224,7 +224,7 @@\n   rtx atomic_insn;\n \n   if (TARGET_ATOMIC_HARD_LLCS\n-      || (TARGET_SH4A_ARCH && <MODE>mode == SImode && !TARGET_ATOMIC_STRICT))\n+      || (TARGET_SH4A && <MODE>mode == SImode && !TARGET_ATOMIC_STRICT))\n     atomic_insn = gen_atomic_compare_and_swap<mode>_hard (old_val, addr,\n \t\t\t\t\t\t\t  exp_val, new_val);\n   else if (TARGET_ATOMIC_SOFT_GUSA)\n@@ -264,7 +264,7 @@\n \t(unspec_volatile:SI [(const_int 0)] UNSPECV_CMPXCHG_3))\n    (clobber (reg:SI R0_REG))]\n   \"TARGET_ATOMIC_HARD_LLCS\n-   || (TARGET_SH4A_ARCH && TARGET_ATOMIC_ANY && !TARGET_ATOMIC_STRICT)\"\n+   || (TARGET_SH4A && TARGET_ATOMIC_ANY && !TARGET_ATOMIC_STRICT)\"\n {\n   return \"\\r0:\tmovli.l\t@%1,r0\"\t\t\"\\n\"\n \t \"\tcmp/eq\t%2,r0\"\t\t\"\\n\"\n@@ -437,7 +437,7 @@\n   rtx atomic_insn;\n \n   if (TARGET_ATOMIC_HARD_LLCS\n-      || (TARGET_SH4A_ARCH && <MODE>mode == SImode && !TARGET_ATOMIC_STRICT))\n+      || (TARGET_SH4A && <MODE>mode == SImode && !TARGET_ATOMIC_STRICT))\n     atomic_insn = gen_atomic_exchange<mode>_hard (operands[0], addr, val);\n   else if (TARGET_ATOMIC_SOFT_GUSA)\n     atomic_insn = gen_atomic_exchange<mode>_soft_gusa (operands[0], addr, val);\n@@ -469,7 +469,7 @@\n    (set (reg:SI T_REG) (const_int 1))\n    (clobber (reg:SI R0_REG))]\n   \"TARGET_ATOMIC_HARD_LLCS\n-   || (TARGET_SH4A_ARCH && TARGET_ATOMIC_ANY && !TARGET_ATOMIC_STRICT)\"\n+   || (TARGET_SH4A && TARGET_ATOMIC_ANY && !TARGET_ATOMIC_STRICT)\"\n {\n   return \"\\r0:\tmovli.l\t@%1,r0\"\t\t\"\\n\"\n \t \"\tmov\tr0,%0\"\t\t\"\\n\"\n@@ -585,7 +585,7 @@\n   rtx atomic_insn;\n \n   if (TARGET_ATOMIC_HARD_LLCS\n-      || (TARGET_SH4A_ARCH && <MODE>mode == SImode && !TARGET_ATOMIC_STRICT))\n+      || (TARGET_SH4A && <MODE>mode == SImode && !TARGET_ATOMIC_STRICT))\n     atomic_insn = gen_atomic_fetch_<fetchop_name><mode>_hard (operands[0], addr,\n \t\t\t\t\t\t\t      operands[2]);\n   else if (TARGET_ATOMIC_SOFT_GUSA)\n@@ -622,7 +622,7 @@\n    (set (reg:SI T_REG) (const_int 1))\n    (clobber (reg:SI R0_REG))]\n   \"TARGET_ATOMIC_HARD_LLCS\n-   || (TARGET_SH4A_ARCH && TARGET_ATOMIC_ANY && !TARGET_ATOMIC_STRICT)\"\n+   || (TARGET_SH4A && TARGET_ATOMIC_ANY && !TARGET_ATOMIC_STRICT)\"\n {\n   return \"\\r0:\tmovli.l\t@%1,r0\"\t\t\"\\n\"\n \t \"\tmov\tr0,%0\"\t\t\"\\n\"\n@@ -754,7 +754,7 @@\n   rtx atomic_insn;\n \n   if (TARGET_ATOMIC_HARD_LLCS\n-      || (TARGET_SH4A_ARCH && <MODE>mode == SImode && !TARGET_ATOMIC_STRICT))\n+      || (TARGET_SH4A && <MODE>mode == SImode && !TARGET_ATOMIC_STRICT))\n     atomic_insn = gen_atomic_fetch_nand<mode>_hard (operands[0], addr,\n \t\t\t\t\t\t    operands[2]);\n   else if (TARGET_ATOMIC_SOFT_GUSA)\n@@ -791,7 +791,7 @@\n    (set (reg:SI T_REG) (const_int 1))\n    (clobber (reg:SI R0_REG))]\n   \"TARGET_ATOMIC_HARD_LLCS\n-   || (TARGET_SH4A_ARCH && TARGET_ATOMIC_ANY && !TARGET_ATOMIC_STRICT)\"\n+   || (TARGET_SH4A && TARGET_ATOMIC_ANY && !TARGET_ATOMIC_STRICT)\"\n {\n   return \"\\r0:\tmovli.l\t@%1,r0\"\t\t\"\\n\"\n \t \"\tmov\tr0,%0\"\t\t\"\\n\"\n@@ -932,7 +932,7 @@\n   rtx atomic_insn;\n \n   if (TARGET_ATOMIC_HARD_LLCS\n-      || (TARGET_SH4A_ARCH && <MODE>mode == SImode && !TARGET_ATOMIC_STRICT))\n+      || (TARGET_SH4A && <MODE>mode == SImode && !TARGET_ATOMIC_STRICT))\n     atomic_insn = gen_atomic_<fetchop_name>_fetch<mode>_hard (operands[0], addr,\n \t\t\t\t\t\t\t      operands[2]);\n   else if (TARGET_ATOMIC_SOFT_GUSA)\n@@ -969,7 +969,7 @@\n \t  UNSPEC_ATOMIC))\n    (set (reg:SI T_REG) (const_int 1))]\n   \"TARGET_ATOMIC_HARD_LLCS\n-   || (TARGET_SH4A_ARCH && TARGET_ATOMIC_ANY && !TARGET_ATOMIC_STRICT)\"\n+   || (TARGET_SH4A && TARGET_ATOMIC_ANY && !TARGET_ATOMIC_STRICT)\"\n {\n   return \"\\r0:\tmovli.l\t@%1,%0\"\t\t\"\\n\"\n \t \"\t<fetchop_name>\t%2,%0\"\t\"\\n\"\n@@ -1099,7 +1099,7 @@\n   rtx atomic_insn;\n \n   if (TARGET_ATOMIC_HARD_LLCS\n-      || (TARGET_SH4A_ARCH && <MODE>mode == SImode && !TARGET_ATOMIC_STRICT))\n+      || (TARGET_SH4A && <MODE>mode == SImode && !TARGET_ATOMIC_STRICT))\n     atomic_insn = gen_atomic_nand_fetch<mode>_hard (operands[0], addr,\n \t\t\t\t\t\t    operands[2]);\n   else if (TARGET_ATOMIC_SOFT_GUSA)\n@@ -1135,7 +1135,7 @@\n \t  UNSPEC_ATOMIC))\n    (set (reg:SI T_REG) (const_int 1))]\n   \"TARGET_ATOMIC_HARD_LLCS\n-   || (TARGET_SH4A_ARCH && TARGET_ATOMIC_ANY && !TARGET_ATOMIC_STRICT)\"\n+   || (TARGET_SH4A && TARGET_ATOMIC_ANY && !TARGET_ATOMIC_STRICT)\"\n {\n   return \"\\r0:\tmovli.l\t@%1,%0\"\t\t\"\\n\"\n \t \"\tand\t%2,%0\"\t\t\"\\n\""}]}