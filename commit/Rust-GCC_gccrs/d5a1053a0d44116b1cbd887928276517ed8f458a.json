{"sha": "d5a1053a0d44116b1cbd887928276517ed8f458a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVhMTA1M2EwZDQ0MTE2YjFjYmQ4ODc5MjgyNzY1MTdlZDhmNDU4YQ==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2012-11-29T15:40:16Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2012-11-29T15:40:16Z"}, "message": "re PR c++/53094 (constexpr vector subscripting)\n\n2012-11-29  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR c++/53094\ngcc/\n\t* fold-const.c (fold): Replace a CONSTRUCTOR with a VECTOR_CST.\ngcc/cp/\n\t* cvt.c (ocp_convert): Call convert_to_vector.\ngcc/testsuite/\n\t* g++.dg/ext/vector20.C: New testcase.\n\nFrom-SVN: r193938", "tree": {"sha": "3dce990d568815390898750b07c2fbe8db67abb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3dce990d568815390898750b07c2fbe8db67abb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5a1053a0d44116b1cbd887928276517ed8f458a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5a1053a0d44116b1cbd887928276517ed8f458a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5a1053a0d44116b1cbd887928276517ed8f458a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5a1053a0d44116b1cbd887928276517ed8f458a/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6c5bf58a15d900b2e721b487f8a844b2bc604c47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c5bf58a15d900b2e721b487f8a844b2bc604c47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c5bf58a15d900b2e721b487f8a844b2bc604c47"}], "stats": {"total": 53, "additions": 53, "deletions": 0}, "files": [{"sha": "8ca3588b3eeffdf0ac3bef024a5fec9942528892", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5a1053a0d44116b1cbd887928276517ed8f458a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5a1053a0d44116b1cbd887928276517ed8f458a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d5a1053a0d44116b1cbd887928276517ed8f458a", "patch": "@@ -1,3 +1,8 @@\n+2012-11-29  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/53094\n+\t* fold-const.c (fold): Replace a CONSTRUCTOR with a VECTOR_CST.\n+\n 2012-11-29  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-pre.c (get_expr_value_id): Do not add expr"}, {"sha": "d8d958a579cca2067b6d6f62eb5ba0bec987a9e2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5a1053a0d44116b1cbd887928276517ed8f458a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5a1053a0d44116b1cbd887928276517ed8f458a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d5a1053a0d44116b1cbd887928276517ed8f458a", "patch": "@@ -1,3 +1,8 @@\n+2012-11-29  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/53094\n+\t* cvt.c (ocp_convert): Call convert_to_vector.\n+\n 2012-11-29  Kai Tietz  <ktietz@redhat.com>\n \n \tPR target/53912"}, {"sha": "4ba7642db202da74b84c2f24f0c03914618f33a4", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5a1053a0d44116b1cbd887928276517ed8f458a/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5a1053a0d44116b1cbd887928276517ed8f458a/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=d5a1053a0d44116b1cbd887928276517ed8f458a", "patch": "@@ -690,6 +690,8 @@ ocp_convert (tree type, tree expr, int convtype, int flags,\n \t conversion.  */\n       else if (TREE_CODE (type) == COMPLEX_TYPE)\n \treturn fold_if_not_in_template (convert_to_complex (type, e));\n+      else if (TREE_CODE (type) == VECTOR_TYPE)\n+\treturn fold_if_not_in_template (convert_to_vector (type, e));\n       else if (TREE_CODE (e) == TARGET_EXPR)\n \t{\n \t  /* Don't build a NOP_EXPR of class type.  Instead, change the"}, {"sha": "071fb8c15abd6b5a6b10ef64150db753ba67d2bc", "filename": "gcc/fold-const.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5a1053a0d44116b1cbd887928276517ed8f458a/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5a1053a0d44116b1cbd887928276517ed8f458a/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=d5a1053a0d44116b1cbd887928276517ed8f458a", "patch": "@@ -14387,6 +14387,35 @@ fold (tree expr)\n \treturn t;\n       }\n \n+      /* Return a VECTOR_CST if possible.  */\n+    case CONSTRUCTOR:\n+      {\n+\ttree type = TREE_TYPE (t);\n+\tif (TREE_CODE (type) != VECTOR_TYPE)\n+\t  return t;\n+\n+\ttree *vec = XALLOCAVEC (tree, TYPE_VECTOR_SUBPARTS (type));\n+\tunsigned HOST_WIDE_INT idx, pos = 0;\n+\ttree value;\n+\n+\tFOR_EACH_CONSTRUCTOR_VALUE (CONSTRUCTOR_ELTS (t), idx, value)\n+\t  {\n+\t    if (!CONSTANT_CLASS_P (value))\n+\t      return t;\n+\t    if (TREE_CODE (value) == VECTOR_CST)\n+\t      {\n+\t\tfor (unsigned i = 0; i < VECTOR_CST_NELTS (value); ++i)\n+\t\t  vec[pos++] = VECTOR_CST_ELT (value, i);\n+\t      }\n+\t    else\n+\t      vec[pos++] = value;\n+\t  }\n+\tfor (; pos < TYPE_VECTOR_SUBPARTS (type); ++pos)\n+\t  vec[pos] = build_zero_cst (TREE_TYPE (type));\n+\n+\treturn build_vector (type, vec);\n+      }\n+\n     case CONST_DECL:\n       return fold (DECL_INITIAL (t));\n "}, {"sha": "4e623fb7df262dececaf804492084039d28b8314", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5a1053a0d44116b1cbd887928276517ed8f458a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5a1053a0d44116b1cbd887928276517ed8f458a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d5a1053a0d44116b1cbd887928276517ed8f458a", "patch": "@@ -1,3 +1,8 @@\n+2012-11-29  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/53094\n+\t* g++.dg/ext/vector20.C: New testcase.\n+\n 2012-11-28  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/52161"}, {"sha": "3d7c39250cf58d2b031b2bb734d0a5c93c3e6b45", "filename": "gcc/testsuite/g++.dg/ext/vector20.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5a1053a0d44116b1cbd887928276517ed8f458a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5a1053a0d44116b1cbd887928276517ed8f458a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector20.C?ref=d5a1053a0d44116b1cbd887928276517ed8f458a", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c++11\" } */\n+\n+typedef long vec __attribute__((vector_size (2 * sizeof (long))));\n+constexpr vec v = { 3, 4 };\n+constexpr vec s = v + v;\n+constexpr vec w = __builtin_shuffle (v, v);"}]}