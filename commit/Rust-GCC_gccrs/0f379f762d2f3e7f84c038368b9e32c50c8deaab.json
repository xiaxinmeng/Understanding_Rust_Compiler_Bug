{"sha": "0f379f762d2f3e7f84c038368b9e32c50c8deaab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGYzNzlmNzYyZDJmM2U3Zjg0YzAzODM2OGI5ZTMyYzUwYzhkZWFhYg==", "commit": {"author": {"name": "Easwaran Raman", "email": "eraman@google.com", "date": "2012-10-31T23:28:45Z"}, "committer": {"name": "Easwaran Raman", "email": "eraman@gcc.gnu.org", "date": "2012-10-31T23:28:45Z"}, "message": "re PR target/54938 (sh libgcc_unpack_df.o fails to build: ../../../srcw/libgcc/fp-bit.h:221:19: internal compiler error: in emit_cmp_and_jump_insn_1, at optabs.c:4273)\n\n2012-10-31   Easwaran Raman  <eraman@google.com>\n\n\tPR target/54938\n\tPR middle-end/54957\n\t* optabs.c (emit_cmp_and_jump_insn_1): Add REG_BR_PROB note\n\tonly if it doesn't already exist.\n\t* stmt.c (get_outgoing_edge_probs): Return 0 if BB is NULL.\n\t(emit_case_dispatch_table): Handle the case where STMT_BB is\n\tNULL.\n\t(expand_sjlj_dispatch_table): Pass BB containing before_case\n\tto emit_case_dispatch_table.\n\nFrom-SVN: r193052", "tree": {"sha": "00353207588e4eea26cb41263c8d1cd8745f0aa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00353207588e4eea26cb41263c8d1cd8745f0aa1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f379f762d2f3e7f84c038368b9e32c50c8deaab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f379f762d2f3e7f84c038368b9e32c50c8deaab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f379f762d2f3e7f84c038368b9e32c50c8deaab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f379f762d2f3e7f84c038368b9e32c50c8deaab/comments", "author": null, "committer": null, "parents": [{"sha": "5d59b5e18a878c2201471e529c40f15d49905fc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d59b5e18a878c2201471e529c40f15d49905fc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d59b5e18a878c2201471e529c40f15d49905fc8"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "21fd7265c6e6940c175f90a3224620f2522c51f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f379f762d2f3e7f84c038368b9e32c50c8deaab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f379f762d2f3e7f84c038368b9e32c50c8deaab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f379f762d2f3e7f84c038368b9e32c50c8deaab", "patch": "@@ -1,3 +1,15 @@\n+2012-10-31   Easwaran Raman  <eraman@google.com>\n+\n+\tPR target/54938\n+\tPR middle-end/54957\n+\t* optabs.c (emit_cmp_and_jump_insn_1): Add REG_BR_PROB note\n+\tonly if it doesn't already exist.\n+\t* stmt.c (get_outgoing_edge_probs): Return 0 if BB is NULL.\n+\t(emit_case_dispatch_table): Handle the case where STMT_BB is\n+\tNULL.\n+\t(expand_sjlj_dispatch_table): Pass BB containing before_case\n+\tto emit_case_dispatch_table.\n+\n 2012-10-31  Lawrence Crowl  <crowl@google.com>\n \n \t* is-a.h: New."}, {"sha": "bba93c2d5618d1fdcc85a6a89ddc6258476a260d", "filename": "gcc/optabs.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f379f762d2f3e7f84c038368b9e32c50c8deaab/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f379f762d2f3e7f84c038368b9e32c50c8deaab/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=0f379f762d2f3e7f84c038368b9e32c50c8deaab", "patch": "@@ -4268,11 +4268,9 @@ emit_cmp_and_jump_insn_1 (rtx test, enum machine_mode mode, rtx label, int prob)\n       && profile_status != PROFILE_ABSENT\n       && insn\n       && JUMP_P (insn)\n-      && any_condjump_p (insn))\n-    {\n-      gcc_assert (!find_reg_note (insn, REG_BR_PROB, 0));\n-      add_reg_note (insn, REG_BR_PROB, GEN_INT (prob));\n-    }\n+      && any_condjump_p (insn)\n+      && !find_reg_note (insn, REG_BR_PROB, 0))\n+    add_reg_note (insn, REG_BR_PROB, GEN_INT (prob));\n }\n \n /* Generate code to compare X with Y so that the condition codes are"}, {"sha": "b84fa670e70e55f21ab895f134bd760a963cbcf8", "filename": "gcc/stmt.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f379f762d2f3e7f84c038368b9e32c50c8deaab/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f379f762d2f3e7f84c038368b9e32c50c8deaab/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=0f379f762d2f3e7f84c038368b9e32c50c8deaab", "patch": "@@ -1867,6 +1867,8 @@ get_outgoing_edge_probs (basic_block bb)\n   edge e;\n   edge_iterator ei;\n   int prob_sum = 0;\n+  if (!bb)\n+    return 0;\n   FOR_EACH_EDGE(e, ei, bb->succs)\n     prob_sum += e->probability;\n   return prob_sum;\n@@ -1916,8 +1918,8 @@ emit_case_dispatch_table (tree index_expr, tree index_type,\n   rtx fallback_label = label_rtx (case_list->code_label);\n   rtx table_label = gen_label_rtx ();\n   bool has_gaps = false;\n-  edge default_edge = EDGE_SUCC(stmt_bb, 0);\n-  int default_prob = default_edge->probability;\n+  edge default_edge = stmt_bb ? EDGE_SUCC(stmt_bb, 0) : NULL;\n+  int default_prob = default_edge ? default_edge->probability : 0;\n   int base = get_outgoing_edge_probs (stmt_bb);\n   bool try_with_tablejump = false;\n \n@@ -1997,7 +1999,8 @@ emit_case_dispatch_table (tree index_expr, tree index_type,\n       default_prob = 0;\n     }\n \n-  default_edge->probability = default_prob;\n+  if (default_edge)\n+    default_edge->probability = default_prob;\n \n   /* We have altered the probability of the default edge. So the probabilities\n      of all other edges need to be adjusted so that it sums up to\n@@ -2289,7 +2292,8 @@ expand_sjlj_dispatch_table (rtx dispatch_index,\n \n       emit_case_dispatch_table (index_expr, index_type,\n \t\t\t\tcase_list, default_label,\n-\t\t\t\tminval, maxval, range, NULL);\n+\t\t\t\tminval, maxval, range,\n+                                BLOCK_FOR_INSN (before_case));\n       emit_label (default_label);\n       free_alloc_pool (case_node_pool);\n     }"}]}