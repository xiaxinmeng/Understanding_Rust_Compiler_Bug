{"sha": "231120e5d40bc975c1acae42f2c2ea289b0425ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjMxMTIwZTVkNDBiYzk3NWMxYWNhZTQyZjJjMmVhMjg5YjA0MjVhZQ==", "commit": {"author": {"name": "Trevor Saunders", "email": "tsaunders@mozilla.com", "date": "2014-05-17T23:06:33Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2014-05-17T23:06:33Z"}, "message": "rm a bunch of _stat allocation functions\n\nNow that we can use c++ default arguments there's no reason to use\nfunctions and wrapper macros.\n\ngcc/ChangeLog:\n\n\t* dwarf2out.c (tree_add_const_value_attribute): Call\n\tggc_internal_cleared_alloc instead of ggc_alloc_cleared_atomic.\n\t* gengtype.c (write_typed_alloc_def): Call ggc_internal_<x>alloc\n\tinstead of ggc_internal_<x>alloc_stat.\n\t* ggc-common.c (ggc_internal_cleared_alloc): Drop _stat suffix.\n\t(ggc_realloc): Likewise.\n\t* ggc-none.c (ggc_internal_alloc): Likewise.\n\t(ggc_internal_cleared_alloc): Likewise.\n\t* ggc-page.c: Likewise.\n\t* ggc.h (ggc_internal_alloc_stat): Likewise.\n\t(ggc_internal_alloc): Remove macro.\n\t(ggc_internal_cleared_alloc_stat): Drop _stat suffix.\n\t(ggc_internal_cleared_alloc): Remove macro.\n\t(GGC_RESIZEVEC): Adjust.\n\t(ggc_resizevar): Remove macro.\n\t(ggc_internal_vec_alloc_stat): Drop _stat suffix.\n\t(ggc_internal_cleared_vec_alloc_stat): Likewise.\n\t(ggc_internal_vec_cleared_alloc): Remove macro.\n\t(ggc_alloc_atomic_stat): Drop _stat suffix.\n\t(ggc_alloc_atomic): Remove macro.\n\t(ggc_alloc_cleared_atomic): Remove macro.\n\t(ggc_alloc_string_stat): Drop _stat suffix.\n\t(ggc_alloc_string): Remove macro.\n\t(ggc_alloc_rtx_def_stat): Adjust.\n\t(ggc_alloc_tree_node_stat): Likewise.\n\t(ggc_alloc_cleared_tree_node_stat): Likewise.\n\t(ggc_alloc_cleared_gimple_statement_stat): Likewise.\n\t(ggc_alloc_cleared_simd_clone_stat): Likewise.\n\t* gimple.c (gimple_build_omp_for): Likewise.\n\t(gimple_copy): Likewise.\n\t* stringpool.c (ggc_alloc_string_stat): Drop _stat suffix.\n\t* toplev.c (realloc_for_line_map): Adjust.\n\t* tree-data-ref.h (lambda_vector_new): Likewise.\n\t* tree-phinodes.c (allocate_phi_node): Likewise.\n\t* tree.c (grow_tree_vec_stat): Likewise.\n\t* vec.h (va_gc::reserve): Adjust.\n\ngcc/java/ChangeLog:\n\n\t* constants.c (set_constant_entry): Adjust.\n\nFrom-SVN: r210565", "tree": {"sha": "8d1527effaee14026c419a32b174fb4c0a8ad57b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d1527effaee14026c419a32b174fb4c0a8ad57b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/231120e5d40bc975c1acae42f2c2ea289b0425ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/231120e5d40bc975c1acae42f2c2ea289b0425ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/231120e5d40bc975c1acae42f2c2ea289b0425ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/231120e5d40bc975c1acae42f2c2ea289b0425ae/comments", "author": null, "committer": null, "parents": [{"sha": "9b8ac5d240574638d6373805f233b69dace1170d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b8ac5d240574638d6373805f233b69dace1170d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b8ac5d240574638d6373805f233b69dace1170d"}], "stats": {"total": 159, "additions": 92, "deletions": 67}, "files": [{"sha": "a82873adc0f872b9ad65fe9c9beac70882683d50", "filename": "gcc/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231120e5d40bc975c1acae42f2c2ea289b0425ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231120e5d40bc975c1acae42f2c2ea289b0425ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=231120e5d40bc975c1acae42f2c2ea289b0425ae", "patch": "@@ -1,3 +1,42 @@\n+2014-05-17  Trevor Saunders  <tsaunders@mozilla.com>\n+\n+\t* dwarf2out.c (tree_add_const_value_attribute): Call\n+\tggc_internal_cleared_alloc instead of ggc_alloc_cleared_atomic.\n+\t* gengtype.c (write_typed_alloc_def): Call ggc_internal_<x>alloc\n+\tinstead of ggc_internal_<x>alloc_stat.\n+\t* ggc-common.c (ggc_internal_cleared_alloc): Drop _stat suffix.\n+\t(ggc_realloc): Likewise.\n+\t* ggc-none.c (ggc_internal_alloc): Likewise.\n+\t(ggc_internal_cleared_alloc): Likewise.\n+\t* ggc-page.c: Likewise.\n+\t* ggc.h (ggc_internal_alloc_stat): Likewise.\n+\t(ggc_internal_alloc): Remove macro.\n+\t(ggc_internal_cleared_alloc_stat): Drop _stat suffix.\n+\t(ggc_internal_cleared_alloc): Remove macro.\n+\t(GGC_RESIZEVEC): Adjust.\n+\t(ggc_resizevar): Remove macro.\n+\t(ggc_internal_vec_alloc_stat): Drop _stat suffix.\n+\t(ggc_internal_cleared_vec_alloc_stat): Likewise.\n+\t(ggc_internal_vec_cleared_alloc): Remove macro.\n+\t(ggc_alloc_atomic_stat): Drop _stat suffix.\n+\t(ggc_alloc_atomic): Remove macro.\n+\t(ggc_alloc_cleared_atomic): Remove macro.\n+\t(ggc_alloc_string_stat): Drop _stat suffix.\n+\t(ggc_alloc_string): Remove macro.\n+\t(ggc_alloc_rtx_def_stat): Adjust.\n+\t(ggc_alloc_tree_node_stat): Likewise.\n+\t(ggc_alloc_cleared_tree_node_stat): Likewise.\n+\t(ggc_alloc_cleared_gimple_statement_stat): Likewise.\n+\t(ggc_alloc_cleared_simd_clone_stat): Likewise.\n+\t* gimple.c (gimple_build_omp_for): Likewise.\n+\t(gimple_copy): Likewise.\n+\t* stringpool.c (ggc_alloc_string_stat): Drop _stat suffix.\n+\t* toplev.c (realloc_for_line_map): Adjust.\n+\t* tree-data-ref.h (lambda_vector_new): Likewise.\n+\t* tree-phinodes.c (allocate_phi_node): Likewise.\n+\t* tree.c (grow_tree_vec_stat): Likewise.\n+\t* vec.h (va_gc::reserve): Adjust.\n+\n 2014-05-17  Ajit Agarwal <ajitkum@xilinx.com>\n \n \t* config/microblaze/microblaze.c"}, {"sha": "21833edb0102d05c2226bb8e4923e8af8c79504d", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231120e5d40bc975c1acae42f2c2ea289b0425ae/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231120e5d40bc975c1acae42f2c2ea289b0425ae/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=231120e5d40bc975c1acae42f2c2ea289b0425ae", "patch": "@@ -16048,7 +16048,7 @@ tree_add_const_value_attribute (dw_die_ref die, tree t)\n       if (size > 0 && (int) size == size)\n \t{\n \t  unsigned char *array = (unsigned char *)\n-\t    ggc_alloc_cleared_atomic (size);\n+\t    ggc_internal_cleared_alloc (size);\n \n \t  if (native_encode_initializer (init, array, size))\n \t    {"}, {"sha": "4abeba6b33554e020d2fead3b85b40db95da8fc6", "filename": "gcc/gengtype.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231120e5d40bc975c1acae42f2c2ea289b0425ae/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231120e5d40bc975c1acae42f2c2ea289b0425ae/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=231120e5d40bc975c1acae42f2c2ea289b0425ae", "patch": "@@ -5009,7 +5009,7 @@ write_typed_alloc_def (outf_p f,\n \t   (two_args ? \", \" : \"\"),\n \t   (quantity == vector) ? \"n\" : \"\");\n   oprintf (f, \"((%s%s *)\", type_specifier, type_name);\n-  oprintf (f, \"(ggc_internal_%salloc_stat (\", allocator_type);\n+  oprintf (f, \"(ggc_internal_%salloc (\", allocator_type);\n   if (variable_size)\n     oprintf (f, \"SIZE\");\n   else"}, {"sha": "e1cc48e6e676150e63e35022ca6cd94ea562dc8d", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231120e5d40bc975c1acae42f2c2ea289b0425ae/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231120e5d40bc975c1acae42f2c2ea289b0425ae/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=231120e5d40bc975c1acae42f2c2ea289b0425ae", "patch": "@@ -174,22 +174,22 @@ ggc_mark_roots (void)\n \n /* Allocate a block of memory, then clear it.  */\n void *\n-ggc_internal_cleared_alloc_stat (size_t size MEM_STAT_DECL)\n+ggc_internal_cleared_alloc (size_t size MEM_STAT_DECL)\n {\n-  void *buf = ggc_internal_alloc_stat (size PASS_MEM_STAT);\n+  void *buf = ggc_internal_alloc (size PASS_MEM_STAT);\n   memset (buf, 0, size);\n   return buf;\n }\n \n /* Resize a block of memory, possibly re-allocating it.  */\n void *\n-ggc_realloc_stat (void *x, size_t size MEM_STAT_DECL)\n+ggc_realloc (void *x, size_t size MEM_STAT_DECL)\n {\n   void *r;\n   size_t old_size;\n \n   if (x == NULL)\n-    return ggc_internal_alloc_stat (size PASS_MEM_STAT);\n+    return ggc_internal_alloc (size PASS_MEM_STAT);\n \n   old_size = ggc_get_size (x);\n \n@@ -211,7 +211,7 @@ ggc_realloc_stat (void *x, size_t size MEM_STAT_DECL)\n       return x;\n     }\n \n-  r = ggc_internal_alloc_stat (size PASS_MEM_STAT);\n+  r = ggc_internal_alloc (size PASS_MEM_STAT);\n \n   /* Since ggc_get_size returns the size of the pool, not the size of the\n      individually allocated object, we'd access parts of the old object"}, {"sha": "aad89bfe00970e9a23d12509dcf05a92a0d6c9b9", "filename": "gcc/ggc-none.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231120e5d40bc975c1acae42f2c2ea289b0425ae/gcc%2Fggc-none.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231120e5d40bc975c1acae42f2c2ea289b0425ae/gcc%2Fggc-none.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-none.c?ref=231120e5d40bc975c1acae42f2c2ea289b0425ae", "patch": "@@ -41,13 +41,13 @@ ggc_round_alloc_size (size_t requested_size)\n }\n \n void *\n-ggc_internal_alloc_stat (size_t size MEM_STAT_DECL)\n+ggc_internal_alloc (size_t size MEM_STAT_DECL)\n {\n   return xmalloc (size);\n }\n \n void *\n-ggc_internal_cleared_alloc_stat (size_t size MEM_STAT_DECL)\n+ggc_internal_cleared_alloc (size_t size MEM_STAT_DECL)\n {\n   return xcalloc (size, 1);\n }"}, {"sha": "ae5e88ac00ec333f0a816e6cd04137298bb46603", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231120e5d40bc975c1acae42f2c2ea289b0425ae/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231120e5d40bc975c1acae42f2c2ea289b0425ae/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=231120e5d40bc975c1acae42f2c2ea289b0425ae", "patch": "@@ -1202,7 +1202,7 @@ ggc_round_alloc_size (size_t requested_size)\n /* Allocate a chunk of memory of SIZE bytes.  Its contents are undefined.  */\n \n void *\n-ggc_internal_alloc_stat (size_t size MEM_STAT_DECL)\n+ggc_internal_alloc (size_t size MEM_STAT_DECL)\n {\n   size_t order, word, bit, object_offset, object_size;\n   struct page_entry *entry;"}, {"sha": "9bb0642e61098c562e0d8bfdf87d6e58126e034c", "filename": "gcc/ggc.h", "status": "modified", "additions": 24, "deletions": 41, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231120e5d40bc975c1acae42f2c2ea289b0425ae/gcc%2Fggc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231120e5d40bc975c1acae42f2c2ea289b0425ae/gcc%2Fggc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc.h?ref=231120e5d40bc975c1acae42f2c2ea289b0425ae", "patch": "@@ -136,59 +136,44 @@ extern void gt_pch_save (FILE *f);\n /* Allocation.  */\n \n /* The internal primitive.  */\n-extern void *ggc_internal_alloc_stat (size_t MEM_STAT_DECL)\n-  ATTRIBUTE_MALLOC;\n+extern void *ggc_internal_alloc (size_t CXX_MEM_STAT_INFO) ATTRIBUTE_MALLOC;\n \n extern size_t ggc_round_alloc_size (size_t requested_size);\n \n-#define ggc_internal_alloc(s) ggc_internal_alloc_stat (s MEM_STAT_INFO)\n-\n /* Allocates cleared memory.  */\n-extern void *ggc_internal_cleared_alloc_stat (size_t MEM_STAT_DECL)\n+extern void *ggc_internal_cleared_alloc (size_t CXX_MEM_STAT_INFO)\n   ATTRIBUTE_MALLOC;\n-#define ggc_internal_cleared_alloc(s) ggc_internal_cleared_alloc_stat (s MEM_STAT_INFO)\n \n /* Resize a block.  */\n-extern void *ggc_realloc_stat (void *, size_t MEM_STAT_DECL);\n+extern void *ggc_realloc (void *, size_t CXX_MEM_STAT_INFO);\n \n /* Free a block.  To be used when known for certain it's not reachable.  */\n extern void ggc_free (void *);\n \n extern void dump_ggc_loc_statistics (bool);\n \n-/* Reallocators.  */\n+/* Reallocator.  */\n #define GGC_RESIZEVEC(T, P, N) \\\n-    ((T *) ggc_realloc_stat ((P), (N) * sizeof (T) MEM_STAT_INFO))\n-\n-#define GGC_RESIZEVAR(T, P, N)                          \\\n-    ((T *) ggc_realloc_stat ((P), (N) MEM_STAT_INFO))\n+    ((T *) ggc_realloc ((P), (N) * sizeof (T) MEM_STAT_INFO))\n \n static inline void *\n-ggc_internal_vec_alloc_stat (size_t s, size_t c MEM_STAT_DECL)\n+ggc_internal_vec_alloc (size_t s, size_t c CXX_MEM_STAT_INFO)\n {\n-    return ggc_internal_alloc_stat (c * s PASS_MEM_STAT);\n+    return ggc_internal_alloc (c * s PASS_MEM_STAT);\n }\n \n static inline void *\n-ggc_internal_cleared_vec_alloc_stat (size_t s, size_t c MEM_STAT_DECL)\n+ggc_internal_cleared_vec_alloc (size_t s, size_t c CXX_MEM_STAT_INFO)\n {\n-    return ggc_internal_cleared_alloc_stat (c * s PASS_MEM_STAT);\n+    return ggc_internal_cleared_alloc (c * s PASS_MEM_STAT);\n }\n \n-#define ggc_internal_cleared_vec_alloc(s, c) \\\n-    (ggc_internal_cleared_vec_alloc_stat ((s), (c) MEM_STAT_INFO))\n-\n static inline void *\n-ggc_alloc_atomic_stat (size_t s MEM_STAT_DECL)\n+ggc_alloc_atomic (size_t s CXX_MEM_STAT_INFO)\n {\n-    return ggc_internal_alloc_stat (s PASS_MEM_STAT);\n+    return ggc_internal_alloc (s PASS_MEM_STAT);\n }\n \n-#define ggc_alloc_atomic(S)  (ggc_alloc_atomic_stat ((S) MEM_STAT_INFO))\n-\n-#define ggc_alloc_cleared_atomic(S)             \\\n-    (ggc_internal_cleared_alloc_stat ((S) MEM_STAT_INFO))\n-\n extern void *ggc_cleared_alloc_htab_ignore_args (size_t, size_t)\n   ATTRIBUTE_MALLOC;\n \n@@ -213,13 +198,11 @@ extern void ggc_splay_dont_free (void *, void *);\n /* Allocate a gc-able string, and fill it with LENGTH bytes from CONTENTS.\n    If LENGTH is -1, then CONTENTS is assumed to be a\n    null-terminated string and the memory sized accordingly.  */\n-extern const char *ggc_alloc_string_stat (const char *contents, int length\n-                                          MEM_STAT_DECL);\n-\n-#define ggc_alloc_string(c, l) ggc_alloc_string_stat (c, l MEM_STAT_INFO)\n+extern const char *ggc_alloc_string (const char *contents, int length\n+                                     CXX_MEM_STAT_INFO);\n \n /* Make a copy of S, in GC-able memory.  */\n-#define ggc_strdup(S) ggc_alloc_string_stat ((S), -1 MEM_STAT_INFO)\n+#define ggc_strdup(S) ggc_alloc_string ((S), -1 MEM_STAT_INFO)\n \n /* Invoke the collector.  Garbage collection occurs only when this\n    function is called, not during allocations.  */\n@@ -253,35 +236,35 @@ extern void init_ggc_heuristics (void);\n /* Memory statistics passing versions of some allocators.  Too few of them to\n    make gengtype produce them, so just define the needed ones here.  */\n static inline struct rtx_def *\n-ggc_alloc_rtx_def_stat (size_t s MEM_STAT_DECL)\n+ggc_alloc_rtx_def_stat (size_t s CXX_MEM_STAT_INFO)\n {\n-  return (struct rtx_def *) ggc_internal_alloc_stat (s PASS_MEM_STAT);\n+  return (struct rtx_def *) ggc_internal_alloc (s PASS_MEM_STAT);\n }\n \n static inline union tree_node *\n-ggc_alloc_tree_node_stat (size_t s MEM_STAT_DECL)\n+ggc_alloc_tree_node_stat (size_t s CXX_MEM_STAT_INFO)\n {\n-  return (union tree_node *) ggc_internal_alloc_stat (s PASS_MEM_STAT);\n+  return (union tree_node *) ggc_internal_alloc (s PASS_MEM_STAT);\n }\n \n static inline union tree_node *\n-ggc_alloc_cleared_tree_node_stat (size_t s MEM_STAT_DECL)\n+ggc_alloc_cleared_tree_node_stat (size_t s CXX_MEM_STAT_INFO)\n {\n-  return (union tree_node *) ggc_internal_cleared_alloc_stat (s PASS_MEM_STAT);\n+  return (union tree_node *) ggc_internal_cleared_alloc (s PASS_MEM_STAT);\n }\n \n static inline struct gimple_statement_base *\n-ggc_alloc_cleared_gimple_statement_stat (size_t s MEM_STAT_DECL)\n+ggc_alloc_cleared_gimple_statement_stat (size_t s CXX_MEM_STAT_INFO)\n {\n   return (struct gimple_statement_base *)\n-    ggc_internal_cleared_alloc_stat (s PASS_MEM_STAT);\n+    ggc_internal_cleared_alloc (s PASS_MEM_STAT);\n }\n \n static inline struct simd_clone *\n-ggc_alloc_cleared_simd_clone_stat (size_t s MEM_STAT_DECL)\n+ggc_alloc_cleared_simd_clone_stat (size_t s CXX_MEM_STAT_INFO)\n {\n   return (struct simd_clone *)\n-    ggc_internal_cleared_alloc_stat (s PASS_MEM_STAT);\n+    ggc_internal_cleared_alloc (s PASS_MEM_STAT);\n }\n \n #endif"}, {"sha": "3dfe97cf5d74c7f873741fcc08334e32d8500cb2", "filename": "gcc/gimple.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231120e5d40bc975c1acae42f2c2ea289b0425ae/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231120e5d40bc975c1acae42f2c2ea289b0425ae/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=231120e5d40bc975c1acae42f2c2ea289b0425ae", "patch": "@@ -836,8 +836,7 @@ gimple_build_omp_for (gimple_seq body, int kind, tree clauses, size_t collapse,\n   gimple_omp_for_set_kind (p, kind);\n   p->collapse = collapse;\n   p->iter =  static_cast <struct gimple_omp_for_iter *> (\n-   ggc_internal_cleared_vec_alloc_stat (sizeof (*p->iter),\n-\t\t\t\t\tcollapse MEM_STAT_INFO));\n+   ggc_internal_cleared_vec_alloc (sizeof (*p->iter), collapse));\n \n   if (pre_body)\n     gimple_omp_for_set_pre_body (p, pre_body);\n@@ -1667,9 +1666,8 @@ gimple_copy (gimple stmt)\n \t      as_a <gimple_statement_omp_for *> (copy);\n \t    omp_for_copy->iter =\n \t      static_cast <struct gimple_omp_for_iter *> (\n-\t\t  ggc_internal_vec_alloc_stat (sizeof (struct gimple_omp_for_iter),\n-\t\t\t\t\t       gimple_omp_for_collapse (stmt)\n-\t\t\t\t\t       MEM_STAT_INFO));\n+\t\t  ggc_internal_vec_alloc (sizeof (struct gimple_omp_for_iter),\n+\t\t\t\t\t  gimple_omp_for_collapse (stmt)));\n           }\n \t  for (i = 0; i < gimple_omp_for_collapse (stmt); i++)\n \t    {"}, {"sha": "b6b6c19d2ce69c5717ef3767b19bfcc046859f91", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231120e5d40bc975c1acae42f2c2ea289b0425ae/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231120e5d40bc975c1acae42f2c2ea289b0425ae/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=231120e5d40bc975c1acae42f2c2ea289b0425ae", "patch": "@@ -1,3 +1,7 @@\n+2014-05-17  Trevor Saunders  <tsaunders@mozilla.com>\n+\n+\t* constants.c (set_constant_entry): Adjust.\n+\n 2014-05-06  Richard Sandiford  <r.sandiford@uk.ibm.com>\n \n \t* boehm.c (mark_reference_fields): Don't update the mask when"}, {"sha": "c0295e9a2facc7764244291529bfb92e38e3a510", "filename": "gcc/java/constants.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231120e5d40bc975c1acae42f2c2ea289b0425ae/gcc%2Fjava%2Fconstants.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231120e5d40bc975c1acae42f2c2ea289b0425ae/gcc%2Fjava%2Fconstants.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fconstants.c?ref=231120e5d40bc975c1acae42f2c2ea289b0425ae", "patch": "@@ -46,8 +46,8 @@ set_constant_entry (CPool *cpool, int index, int tag, jword value)\n   if (cpool->data == NULL)\n     {\n       cpool->capacity = 100;\n-      cpool->tags = (uint8 *) ggc_alloc_cleared_atomic (sizeof (uint8)\n-\t\t\t\t\t\t* cpool->capacity);\n+      cpool->tags = (uint8 *) ggc_internal_cleared_alloc (sizeof (uint8)\n+\t\t\t\t\t\t\t  * cpool->capacity);\n       cpool->data = ggc_alloc_cleared_vec_cpool_entry (sizeof\n \t\t\t\t\t\t       (union cpool_entry),\n \t\t\t\t\t\t       cpool->capacity);"}, {"sha": "520f9a8eb7f110df293e4aa10c1c4a26f751e229", "filename": "gcc/rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231120e5d40bc975c1acae42f2c2ea289b0425ae/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231120e5d40bc975c1acae42f2c2ea289b0425ae/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=231120e5d40bc975c1acae42f2c2ea289b0425ae", "patch": "@@ -28,8 +28,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n-#include \"rtl.h\"\n #include \"ggc.h\"\n+#include \"rtl.h\"\n #ifdef GENERATOR_FILE\n # include \"errors.h\"\n #else"}, {"sha": "e3175250ede1eeb4098f2c399457d00b93a80ed3", "filename": "gcc/stringpool.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231120e5d40bc975c1acae42f2c2ea289b0425ae/gcc%2Fstringpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231120e5d40bc975c1acae42f2c2ea289b0425ae/gcc%2Fstringpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstringpool.c?ref=231120e5d40bc975c1acae42f2c2ea289b0425ae", "patch": "@@ -79,7 +79,7 @@ alloc_node (cpp_hash_table *table ATTRIBUTE_UNUSED)\n    nul-terminated string, and the length is calculated using strlen.  */\n \n const char *\n-ggc_alloc_string_stat (const char *contents, int length MEM_STAT_DECL)\n+ggc_alloc_string (const char *contents, int length MEM_STAT_DECL)\n {\n   char *result;\n \n@@ -91,7 +91,7 @@ ggc_alloc_string_stat (const char *contents, int length MEM_STAT_DECL)\n   if (length == 1 && ISDIGIT (contents[0]))\n     return digit_string (contents[0] - '0');\n \n-  result = (char *) ggc_alloc_atomic_stat (length + 1 PASS_MEM_STAT);\n+  result = (char *) ggc_internal_cleared_alloc (length + 1 PASS_MEM_STAT);\n   memcpy (result, contents, length);\n   result[length] = '\\0';\n   return (const char *) result;"}, {"sha": "384e73ef645708afc551a54e494c81836c45bd92", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231120e5d40bc975c1acae42f2c2ea289b0425ae/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231120e5d40bc975c1acae42f2c2ea289b0425ae/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=231120e5d40bc975c1acae42f2c2ea289b0425ae", "patch": "@@ -957,7 +957,7 @@ init_asm_output (const char *name)\n static void *\n realloc_for_line_map (void *ptr, size_t len)\n {\n-  return GGC_RESIZEVAR (void, ptr, len);\n+  return ggc_realloc (ptr, len);\n }\n \n /* A helper function: used as the allocator function for"}, {"sha": "8810a3ec559a93ae842f4dca0f923fad7e9be0bb", "filename": "gcc/tree-data-ref.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231120e5d40bc975c1acae42f2c2ea289b0425ae/gcc%2Ftree-data-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231120e5d40bc975c1acae42f2c2ea289b0425ae/gcc%2Ftree-data-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.h?ref=231120e5d40bc975c1acae42f2c2ea289b0425ae", "patch": "@@ -565,7 +565,7 @@ lambda_vector_gcd (lambda_vector vector, int size)\n static inline lambda_vector\n lambda_vector_new (int size)\n {\n-  return (lambda_vector) ggc_alloc_cleared_atomic (sizeof (int) * size);\n+  return (lambda_vector) ggc_internal_cleared_alloc (sizeof (int) * size);\n }\n \n /* Clear out vector VEC1 of length SIZE.  */"}, {"sha": "5bd8233569897d5d22341c0b1d9d33dc7721bb16", "filename": "gcc/tree-phinodes.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231120e5d40bc975c1acae42f2c2ea289b0425ae/gcc%2Ftree-phinodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231120e5d40bc975c1acae42f2c2ea289b0425ae/gcc%2Ftree-phinodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-phinodes.c?ref=231120e5d40bc975c1acae42f2c2ea289b0425ae", "patch": "@@ -124,7 +124,7 @@ allocate_phi_node (size_t len)\n   else\n     {\n       phi = static_cast <gimple_statement_phi *> (\n-\tggc_internal_alloc_stat (size MEM_STAT_INFO));\n+\tggc_internal_alloc (size));\n       if (GATHER_STATISTICS)\n \t{\n \t  enum gimple_alloc_kind kind = gimple_alloc_kind (GIMPLE_PHI);"}, {"sha": "1b89b91dd0409509463da0cda4ff0b842f3324ab", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231120e5d40bc975c1acae42f2c2ea289b0425ae/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231120e5d40bc975c1acae42f2c2ea289b0425ae/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=231120e5d40bc975c1acae42f2c2ea289b0425ae", "patch": "@@ -2016,7 +2016,7 @@ grow_tree_vec_stat (tree v, int len MEM_STAT_DECL)\n \n   record_node_allocation_statistics (TREE_VEC, length - oldlength);\n \n-  v = (tree) ggc_realloc_stat (v, length PASS_MEM_STAT);\n+  v = (tree) ggc_realloc (v, length PASS_MEM_STAT);\n \n   TREE_VEC_LENGTH (v) = len;\n "}, {"sha": "2e5313dd14682d0ac569e515f440ac552d91e2e0", "filename": "gcc/vec.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231120e5d40bc975c1acae42f2c2ea289b0425ae/gcc%2Fvec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231120e5d40bc975c1acae42f2c2ea289b0425ae/gcc%2Fvec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.h?ref=231120e5d40bc975c1acae42f2c2ea289b0425ae", "patch": "@@ -48,9 +48,10 @@ along with GCC; see the file COPYING3.  If not see\n      weak.  There are files compiled with -DGENERATOR_FILE that already\n      include ggc.h.  We only need to provide these definitions if ggc.h\n      has not been included.  Sigh.  */\n+\n   extern void ggc_free (void *);\n   extern size_t ggc_round_alloc_size (size_t requested_size);\n-  extern void *ggc_realloc_stat (void *, size_t MEM_STAT_DECL);\n+  extern void *ggc_realloc (void *, size_t CXX_MEM_STAT_INFO);\n #  endif  // GCC_GGC_H\n #endif\t// VEC_GC_ENABLED\n \n@@ -396,7 +397,7 @@ va_gc::reserve (vec<T, A, vl_embed> *&v, unsigned reserve, bool exact\n   size = vec_offset + alloc * elt_size;\n \n   unsigned nelem = v ? v->length () : 0;\n-  v = static_cast <vec<T, A, vl_embed> *> (::ggc_realloc_stat (v, size\n+  v = static_cast <vec<T, A, vl_embed> *> (::ggc_realloc (v, size\n \t\t\t\t\t\t\t       PASS_MEM_STAT));\n   v->embedded_init (alloc, nelem);\n }"}]}