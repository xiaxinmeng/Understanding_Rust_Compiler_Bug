{"sha": "d325e7048c85e13f12ea79aebf9623eddc7ffcaf", "node_id": "C_kwDOANBUbNoAKGQzMjVlNzA0OGM4NWUxM2YxMmVhNzlhZWJmOTYyM2VkZGM3ZmZjYWY", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-07-28T20:07:02Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-07-31T18:43:17Z"}, "message": "Fortran: detect blanks within literal constants in free-form mode [PR92805]\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/92805\n\t* match.cc (gfc_match_small_literal_int): Make gobbling of leading\n\twhitespace optional.\n\t(gfc_match_name): Likewise.\n\t(gfc_match_char): Likewise.\n\t* match.h (gfc_match_small_literal_int): Adjust prototype.\n\t(gfc_match_name): Likewise.\n\t(gfc_match_char): Likewise.\n\t* primary.cc (match_kind_param): Match small literal int or name\n\twithout gobbling whitespace.\n\t(get_kind): Do not skip over blanks.\n\t(match_string_constant): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/92805\n\t* gfortran.dg/literal_constants.f: New test.\n\t* gfortran.dg/literal_constants.f90: New test.\n\nCo-authored-by: Steven G. Kargl <kargl@gcc.gnu.org>", "tree": {"sha": "26f8ad6d7eab9e87f0feaa4767e672969e0b10f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26f8ad6d7eab9e87f0feaa4767e672969e0b10f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d325e7048c85e13f12ea79aebf9623eddc7ffcaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d325e7048c85e13f12ea79aebf9623eddc7ffcaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d325e7048c85e13f12ea79aebf9623eddc7ffcaf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d325e7048c85e13f12ea79aebf9623eddc7ffcaf/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0110cfd5449bae3a772f45ea2e4c5dab5b7a8ccd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0110cfd5449bae3a772f45ea2e4c5dab5b7a8ccd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0110cfd5449bae3a772f45ea2e4c5dab5b7a8ccd"}], "stats": {"total": 88, "additions": 65, "deletions": 23}, "files": [{"sha": "8b8b6e79c8b53dfeb2806fd703394145f6235789", "filename": "gcc/fortran/match.cc", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d325e7048c85e13f12ea79aebf9623eddc7ffcaf/gcc%2Ffortran%2Fmatch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d325e7048c85e13f12ea79aebf9623eddc7ffcaf/gcc%2Ffortran%2Fmatch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.cc?ref=d325e7048c85e13f12ea79aebf9623eddc7ffcaf", "patch": "@@ -454,10 +454,11 @@ gfc_match_eos (void)\n /* Match a literal integer on the input, setting the value on\n    MATCH_YES.  Literal ints occur in kind-parameters as well as\n    old-style character length specifications.  If cnt is non-NULL it\n-   will be set to the number of digits.  */\n+   will be set to the number of digits.\n+   When gobble_ws is false, do not skip over leading blanks.  */\n \n match\n-gfc_match_small_literal_int (int *value, int *cnt)\n+gfc_match_small_literal_int (int *value, int *cnt, bool gobble_ws)\n {\n   locus old_loc;\n   char c;\n@@ -466,7 +467,8 @@ gfc_match_small_literal_int (int *value, int *cnt)\n   old_loc = gfc_current_locus;\n \n   *value = -1;\n-  gfc_gobble_whitespace ();\n+  if (gobble_ws)\n+    gfc_gobble_whitespace ();\n   c = gfc_next_ascii_char ();\n   if (cnt)\n     *cnt = 0;\n@@ -608,17 +610,19 @@ gfc_match_label (void)\n /* See if the current input looks like a name of some sort.  Modifies\n    the passed buffer which must be GFC_MAX_SYMBOL_LEN+1 bytes long.\n    Note that options.cc restricts max_identifier_length to not more\n-   than GFC_MAX_SYMBOL_LEN.  */\n+   than GFC_MAX_SYMBOL_LEN.\n+   When gobble_ws is false, do not skip over leading blanks.  */\n \n match\n-gfc_match_name (char *buffer)\n+gfc_match_name (char *buffer, bool gobble_ws)\n {\n   locus old_loc;\n   int i;\n   char c;\n \n   old_loc = gfc_current_locus;\n-  gfc_gobble_whitespace ();\n+  if (gobble_ws)\n+    gfc_gobble_whitespace ();\n \n   c = gfc_next_ascii_char ();\n   if (!(ISALPHA (c) || (c == '_' && flag_allow_leading_underscore)))\n@@ -1053,15 +1057,17 @@ gfc_match_iterator (gfc_iterator *iter, int init_flag)\n \n \n /* Tries to match the next non-whitespace character on the input.\n-   This subroutine does not return MATCH_ERROR.  */\n+   This subroutine does not return MATCH_ERROR.\n+   When gobble_ws is false, do not skip over leading blanks.  */\n \n match\n-gfc_match_char (char c)\n+gfc_match_char (char c, bool gobble_ws)\n {\n   locus where;\n \n   where = gfc_current_locus;\n-  gfc_gobble_whitespace ();\n+  if (gobble_ws)\n+    gfc_gobble_whitespace ();\n \n   if (gfc_next_ascii_char () == c)\n     return MATCH_YES;"}, {"sha": "1f53e0cb67d5184abe0821f01a37187e7d5b6600", "filename": "gcc/fortran/match.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d325e7048c85e13f12ea79aebf9623eddc7ffcaf/gcc%2Ffortran%2Fmatch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d325e7048c85e13f12ea79aebf9623eddc7ffcaf/gcc%2Ffortran%2Fmatch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.h?ref=d325e7048c85e13f12ea79aebf9623eddc7ffcaf", "patch": "@@ -45,14 +45,14 @@ extern gfc_access gfc_typebound_default_access;\n match gfc_match_special_char (gfc_char_t *);\n match gfc_match_space (void);\n match gfc_match_eos (void);\n-match gfc_match_small_literal_int (int *, int *);\n+match gfc_match_small_literal_int (int *, int *, bool = true);\n match gfc_match_st_label (gfc_st_label **);\n match gfc_match_small_int (int *);\n-match gfc_match_name (char *);\n+match gfc_match_name (char *, bool = true);\n match gfc_match_symbol (gfc_symbol **, int);\n match gfc_match_sym_tree (gfc_symtree **, int);\n match gfc_match_intrinsic_op (gfc_intrinsic_op *);\n-match gfc_match_char (char);\n+match gfc_match_char (char, bool = true);\n match gfc_match (const char *, ...);\n match gfc_match_iterator (gfc_iterator *, int);\n match gfc_match_parens (void);"}, {"sha": "19f2e78c8ff4744da7069338033b8e77af78acc4", "filename": "gcc/fortran/primary.cc", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d325e7048c85e13f12ea79aebf9623eddc7ffcaf/gcc%2Ffortran%2Fprimary.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d325e7048c85e13f12ea79aebf9623eddc7ffcaf/gcc%2Ffortran%2Fprimary.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.cc?ref=d325e7048c85e13f12ea79aebf9623eddc7ffcaf", "patch": "@@ -45,11 +45,11 @@ match_kind_param (int *kind, int *is_iso_c)\n \n   *is_iso_c = 0;\n \n-  m = gfc_match_small_literal_int (kind, NULL);\n+  m = gfc_match_small_literal_int (kind, NULL, false);\n   if (m != MATCH_NO)\n     return m;\n \n-  m = gfc_match_name (name);\n+  m = gfc_match_name (name, false);\n   if (m != MATCH_YES)\n     return m;\n \n@@ -95,7 +95,7 @@ get_kind (int *is_iso_c)\n \n   *is_iso_c = 0;\n \n-  if (gfc_match_char ('_') != MATCH_YES)\n+  if (gfc_match_char ('_', false) != MATCH_YES)\n     return -2;\n \n   m = match_kind_param (&kind, is_iso_c);\n@@ -1074,17 +1074,9 @@ match_string_constant (gfc_expr **result)\n       c = gfc_next_char ();\n     }\n \n-  if (c == ' ')\n-    {\n-      gfc_gobble_whitespace ();\n-      c = gfc_next_char ();\n-    }\n-\n   if (c != '_')\n     goto no_match;\n \n-  gfc_gobble_whitespace ();\n-\n   c = gfc_next_char ();\n   if (c != '\\'' && c != '\"')\n     goto no_match;"}, {"sha": "4d1f1b7eb4c57ca7be4fd267eb23de39e7343490", "filename": "gcc/testsuite/gfortran.dg/literal_constants.f", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d325e7048c85e13f12ea79aebf9623eddc7ffcaf/gcc%2Ftestsuite%2Fgfortran.dg%2Fliteral_constants.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d325e7048c85e13f12ea79aebf9623eddc7ffcaf/gcc%2Ftestsuite%2Fgfortran.dg%2Fliteral_constants.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fliteral_constants.f?ref=d325e7048c85e13f12ea79aebf9623eddc7ffcaf", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do compile }\n+! { dg-options \"-ffixed-form\" }\n+! PR fortran/92805 - blanks within literal constants in fixed-form mode\n+\n+      implicit none\n+      integer, parameter :: ck = kind (\"a\")  ! default character kind\n+      integer, parameter :: rk = kind (1.0)  ! default real kind\n+      print *, 1_\"abc\"\n+      print *, 1 _\"abc\"\n+      print *, 1_ \"abc\"\n+      print *, ck_\"a\"\n+      print *, ck _\"ab\"\n+      print *, ck_ \"ab\"\n+      print *, 3.1415_4\n+      print *, 3.1415 _4\n+      print *, 3.1415_ 4\n+      print *, 3.1415_rk\n+      print *, 3.1415 _rk\n+      print *, 3.1415_ rk\n+      end"}, {"sha": "f8908f9ad7607a9d4a4194feb502a0ab133fad7b", "filename": "gcc/testsuite/gfortran.dg/literal_constants.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d325e7048c85e13f12ea79aebf9623eddc7ffcaf/gcc%2Ftestsuite%2Fgfortran.dg%2Fliteral_constants.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d325e7048c85e13f12ea79aebf9623eddc7ffcaf/gcc%2Ftestsuite%2Fgfortran.dg%2Fliteral_constants.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fliteral_constants.f90?ref=d325e7048c85e13f12ea79aebf9623eddc7ffcaf", "patch": "@@ -0,0 +1,24 @@\n+! { dg-do compile }\n+! { dg-options \"-ffree-form\" }\n+! PR fortran/92805 - blanks within literal constants in free-form mode\n+\n+      implicit none\n+      integer, parameter :: ck = kind (\"a\")  ! default character kind\n+      integer, parameter :: rk = kind (1.0)  ! default real kind\n+      print *, 1_\"abc\"\n+      print *, 1 _\"abc\"   ! { dg-error \"Syntax error\" }\n+      print *, 1_ \"abc\"   ! { dg-error \"Missing kind-parameter\" }\n+      print *, 1 _ \"abc\"  ! { dg-error \"Syntax error\" }\n+      print *, ck_\"a\"\n+      print *, ck _\"ab\"   ! { dg-error \"Syntax error\" }\n+      print *, ck_ \"ab\"   ! { dg-error \"Syntax error\" }\n+      print *, ck _ \"ab\"  ! { dg-error \"Syntax error\" }\n+      print *, 3.1415_4\n+      print *, 3.1415 _4  ! { dg-error \"Syntax error\" }\n+      print *, 3.1415_ 4  ! { dg-error \"Missing kind-parameter\" }\n+      print *, 3.1415 _ 4 ! { dg-error \"Syntax error\" }\n+      print *, 3.1415_rk\n+      print *, 3.1415 _rk ! { dg-error \"Syntax error\" }\n+      print *, 3.1415_ rk ! { dg-error \"Missing kind-parameter\" }\n+      print *, 3.141 _ rk ! { dg-error \"Syntax error\" }\n+      end"}]}