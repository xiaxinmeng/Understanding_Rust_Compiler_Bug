{"sha": "2061820e0d4998d1792021cfa7283c2ce345b093", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA2MTgyMGUwZDQ5OThkMTc5MjAyMWNmYTcyODNjMmNlMzQ1YjA5Mw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-06-29T14:08:55Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-06-29T14:08:55Z"}, "message": "DR 990\n\n\tDR 990\n\t* call.c (convert_like_real) [ck_user]: Handle value-initialization.\n\t(build_new_method_call_1): Likewise.\n\t* init.c (expand_default_init): Handle direct list-initialization\n\tof aggregates.\n\nFrom-SVN: r175639", "tree": {"sha": "d366c391a4221521f9154a0ece1a5d527bf85bfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d366c391a4221521f9154a0ece1a5d527bf85bfd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2061820e0d4998d1792021cfa7283c2ce345b093", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2061820e0d4998d1792021cfa7283c2ce345b093", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2061820e0d4998d1792021cfa7283c2ce345b093", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2061820e0d4998d1792021cfa7283c2ce345b093/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "902233e09cf56332a7823aaf4e28807d73229599", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/902233e09cf56332a7823aaf4e28807d73229599", "html_url": "https://github.com/Rust-GCC/gccrs/commit/902233e09cf56332a7823aaf4e28807d73229599"}], "stats": {"total": 95, "additions": 92, "deletions": 3}, "files": [{"sha": "0352c2ccf44c751bfce8293dfc23b94b3ed703d4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2061820e0d4998d1792021cfa7283c2ce345b093/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2061820e0d4998d1792021cfa7283c2ce345b093/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2061820e0d4998d1792021cfa7283c2ce345b093", "patch": "@@ -1,3 +1,11 @@\n+2011-06-29  Jason Merrill  <jason@redhat.com>\n+\n+\tDR 990\n+\t* call.c (convert_like_real) [ck_user]: Handle value-initialization.\n+\t(build_new_method_call_1): Likewise.\n+\t* init.c (expand_default_init): Handle direct list-initialization\n+\tof aggregates.\n+\n 2011-06-27  Jakub Jelinek  <jakub@redhat.com>\n \n \t* cp-tree.h (union lang_tree_node): Use it in chain_next expression."}, {"sha": "e2d455afcdeb0af68581cfb31c30ca233ddd4bf0", "filename": "gcc/cp/call.c", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2061820e0d4998d1792021cfa7283c2ce345b093/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2061820e0d4998d1792021cfa7283c2ce345b093/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=2061820e0d4998d1792021cfa7283c2ce345b093", "patch": "@@ -5592,6 +5592,18 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \ttree convfn = cand->fn;\n \tunsigned i;\n \n+\t/* If we're initializing from {}, it's value-initialization.  */\n+\tif (BRACE_ENCLOSED_INITIALIZER_P (expr)\n+\t    && CONSTRUCTOR_NELTS (expr) == 0\n+\t    && TYPE_HAS_DEFAULT_CONSTRUCTOR (totype))\n+\t  {\n+\t    expr = build_value_init (totype, complain);\n+\t    expr = get_target_expr_sfinae (expr, complain);\n+\t    if (expr != error_mark_node)\n+\t      TARGET_EXPR_LIST_INIT_P (expr) = true;\n+\t    return expr;\n+\t  }\n+\n \texpr = mark_rvalue_use (expr);\n \n \t/* When converting from an init list we consider explicit\n@@ -5634,7 +5646,7 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t{\n \t  int nelts = CONSTRUCTOR_NELTS (expr);\n \t  if (nelts == 0)\n-\t    expr = build_value_init (totype, tf_warning_or_error);\n+\t    expr = build_value_init (totype, complain);\n \t  else if (nelts == 1)\n \t    expr = CONSTRUCTOR_ELT (expr, 0)->value;\n \t  else\n@@ -7138,10 +7150,29 @@ build_new_method_call_1 (tree instance, tree fns, VEC(tree,gc) **args,\n       && BRACE_ENCLOSED_INITIALIZER_P (VEC_index (tree, *args, 0))\n       && CONSTRUCTOR_IS_DIRECT_INIT (VEC_index (tree, *args, 0)))\n     {\n+      tree init_list = VEC_index (tree, *args, 0);\n+\n       gcc_assert (VEC_length (tree, *args) == 1\n \t\t  && !(flags & LOOKUP_ONLYCONVERTING));\n \n-      add_list_candidates (fns, first_mem_arg, VEC_index (tree, *args, 0),\n+      /* If the initializer list has no elements and T is a class type with\n+\t a default constructor, the object is value-initialized.  Handle\n+\t this here so we don't need to handle it wherever we use\n+\t build_special_member_call.  */\n+      if (CONSTRUCTOR_NELTS (init_list) == 0\n+\t  && TYPE_HAS_DEFAULT_CONSTRUCTOR (basetype)\n+\t  && !processing_template_decl)\n+\t{\n+\t  tree ob, init = build_value_init (basetype, complain);\n+\t  if (integer_zerop (instance_ptr))\n+\t    return get_target_expr_sfinae (init, complain);\n+\t  ob = build_fold_indirect_ref (instance_ptr);\n+\t  init = build2 (INIT_EXPR, TREE_TYPE (ob), ob, init);\n+\t  TREE_SIDE_EFFECTS (init) = true;\n+\t  return init;\n+\t}\n+\n+      add_list_candidates (fns, first_mem_arg, init_list,\n \t\t\t   basetype, explicit_targs, template_only,\n \t\t\t   conversion_path, access_binfo, flags, &candidates);\n     }\n@@ -8365,7 +8396,7 @@ perform_implicit_conversion (tree type, tree expr, tsubst_flags_t complain)\n    permitted.  If the conversion is valid, the converted expression is\n    returned.  Otherwise, NULL_TREE is returned, except in the case\n    that TYPE is a class type; in that case, an error is issued.  If\n-   C_CAST_P is true, then this direction initialization is taking\n+   C_CAST_P is true, then this direct-initialization is taking\n    place as part of a static_cast being attempted as part of a C-style\n    cast.  */\n "}, {"sha": "17193393398905638f02dc71a6ebc9c361597615", "filename": "gcc/cp/init.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2061820e0d4998d1792021cfa7283c2ce345b093/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2061820e0d4998d1792021cfa7283c2ce345b093/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=2061820e0d4998d1792021cfa7283c2ce345b093", "patch": "@@ -1443,6 +1443,17 @@ expand_default_init (tree binfo, tree true_exp, tree exp, tree init, int flags,\n   tree rval;\n   VEC(tree,gc) *parms;\n \n+  /* If we have direct-initialization from an initializer list, pull\n+     it out of the TREE_LIST so the code below can see it.  */\n+  if (init && TREE_CODE (init) == TREE_LIST\n+      && BRACE_ENCLOSED_INITIALIZER_P (TREE_VALUE (init))\n+      && CONSTRUCTOR_IS_DIRECT_INIT (TREE_VALUE (init)))\n+    {\n+      gcc_checking_assert ((flags & LOOKUP_ONLYCONVERTING) == 0\n+\t\t\t   && TREE_CHAIN (init) == NULL_TREE);\n+      init = TREE_VALUE (init);\n+    }\n+\n   if (init && BRACE_ENCLOSED_INITIALIZER_P (init)\n       && CP_AGGREGATE_TYPE_P (type))\n     {"}, {"sha": "7ea6120583f27d0da8e8dc263e2089e45bd97bdf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2061820e0d4998d1792021cfa7283c2ce345b093/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2061820e0d4998d1792021cfa7283c2ce345b093/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2061820e0d4998d1792021cfa7283c2ce345b093", "patch": "@@ -1,3 +1,8 @@\n+2011-06-29  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/constexpr-initlist4.C: New.\n+\t* g++.dg/cpp0x/initlist-value.C: New.\n+\n 2011-06-29  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* gcc.dg/torture/pr49169.c: Restrict to ARM and MIPS targets."}, {"sha": "815185756925b092b7c2c11c2d77610f5a7846c8", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-initlist4.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2061820e0d4998d1792021cfa7283c2ce345b093/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-initlist4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2061820e0d4998d1792021cfa7283c2ce345b093/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-initlist4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-initlist4.C?ref=2061820e0d4998d1792021cfa7283c2ce345b093", "patch": "@@ -0,0 +1,8 @@\n+// { dg-options -std=c++0x }\n+\n+struct A { int i; };\n+struct B: A { constexpr B(): A{} {} };\n+struct B2: A { constexpr B2(): A{1} {} };\n+\n+struct C { protected: int i; };\n+struct D: C { constexpr D(): C{} {} };"}, {"sha": "25a3373c638bc4436c5c8e6151a9144489484c47", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist-value.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2061820e0d4998d1792021cfa7283c2ce345b093/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-value.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2061820e0d4998d1792021cfa7283c2ce345b093/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-value.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-value.C?ref=2061820e0d4998d1792021cfa7283c2ce345b093", "patch": "@@ -0,0 +1,26 @@\n+// Test for value-initialization via {}\n+// { dg-options -std=c++0x }\n+// { dg-do run }\n+\n+// Empty base so A isn't an aggregate\n+struct B {};\n+struct A: B {\n+  int i;\n+};\n+\n+struct C: A {\n+  C(): A{} {}\n+};\n+\n+int f(A a) { return a.i; }\n+\n+int main()\n+{\n+  A a{};\n+  C c;\n+  if (a.i != 0\n+      || c.i != 0\n+      || A{}.i != 0\n+      || f({}) != 0)\n+    return 1;\n+}"}]}