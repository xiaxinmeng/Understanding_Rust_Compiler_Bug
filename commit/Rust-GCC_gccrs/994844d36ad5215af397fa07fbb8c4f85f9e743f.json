{"sha": "994844d36ad5215af397fa07fbb8c4f85f9e743f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk0ODQ0ZDM2YWQ1MjE1YWYzOTdmYTA3ZmJiOGM0Zjg1ZjllNzQzZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-01-04T22:58:59Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-01-04T22:58:59Z"}, "message": "PR libstdc++/83626 Don't throw for remove(\"\") and remove_all(\"\")\n\n\tPR libstdc++/83626\n\t* src/filesystem/ops.cc (remove(const path&, error_code&))): Remove\n\tredundant call to ec.clear().\n\t(remove_all(const path&, error_code&))): Do not return an error for\n\tnon-existent paths.\n\t* src/filesystem/std-ops.cc: Likewise.\n\t* testsuite/27_io/filesystem/operations/remove.cc: New test.\n\t* testsuite/27_io/filesystem/operations/remove_all.cc: Fix expected\n\tresults for non-existent paths.\n\t* testsuite/experimental/filesystem/operations/remove.cc: New test.\n\t* testsuite/experimental/filesystem/operations/remove_all.cc: Fix\n\texpected results for non-existent paths.\n\nFrom-SVN: r256269", "tree": {"sha": "d56ca6c24dcfc46fd9e90c16f3a7bd1f63eb0ea2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d56ca6c24dcfc46fd9e90c16f3a7bd1f63eb0ea2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/994844d36ad5215af397fa07fbb8c4f85f9e743f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/994844d36ad5215af397fa07fbb8c4f85f9e743f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/994844d36ad5215af397fa07fbb8c4f85f9e743f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/994844d36ad5215af397fa07fbb8c4f85f9e743f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac2be67b328e79b3be27b0559de62f054f8bf4c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac2be67b328e79b3be27b0559de62f054f8bf4c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac2be67b328e79b3be27b0559de62f054f8bf4c7"}], "stats": {"total": 315, "additions": 273, "deletions": 42}, "files": [{"sha": "82de1ff85d009bd433f05cca982223a5788a2dbd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/994844d36ad5215af397fa07fbb8c4f85f9e743f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/994844d36ad5215af397fa07fbb8c4f85f9e743f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=994844d36ad5215af397fa07fbb8c4f85f9e743f", "patch": "@@ -1,5 +1,18 @@\n 2018-01-04  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/83626\n+\t* src/filesystem/ops.cc (remove(const path&, error_code&))): Remove\n+\tredundant call to ec.clear().\n+\t(remove_all(const path&, error_code&))): Do not return an error for\n+\tnon-existent paths.\n+\t* src/filesystem/std-ops.cc: Likewise.\n+\t* testsuite/27_io/filesystem/operations/remove.cc: New test.\n+\t* testsuite/27_io/filesystem/operations/remove_all.cc: Fix expected\n+\tresults for non-existent paths.\n+\t* testsuite/experimental/filesystem/operations/remove.cc: New test.\n+\t* testsuite/experimental/filesystem/operations/remove_all.cc: Fix\n+\texpected results for non-existent paths.\n+\n \t* include/bits/fs_ops.h (exists(const path&, error_code&))): Only\n \tcheck status_known once.\n \t* include/experimental/bits/fs_ops.h: Likewise."}, {"sha": "5a7cb599bb678f52a65f869cb448c987a6761f22", "filename": "libstdc++-v3/src/filesystem/ops.cc", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/994844d36ad5215af397fa07fbb8c4f85f9e743f/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/994844d36ad5215af397fa07fbb8c4f85f9e743f/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc?ref=994844d36ad5215af397fa07fbb8c4f85f9e743f", "patch": "@@ -1009,25 +1009,29 @@ fs::remove(const path& p)\n {\n   error_code ec;\n   bool result = fs::remove(p, ec);\n-  if (ec.value())\n+  if (ec)\n     _GLIBCXX_THROW_OR_ABORT(filesystem_error(\"cannot remove\", p, ec));\n   return result;\n }\n \n bool\n fs::remove(const path& p, error_code& ec) noexcept\n {\n-  if (exists(symlink_status(p, ec)))\n+  const auto s = symlink_status(p, ec);\n+  if (!status_known(s))\n+    return false;\n+  if (s.type() == file_type::not_found)\n     {\n-      if (::remove(p.c_str()) == 0)\n-\t{\n-\t  ec.clear();\n-\t  return true;\n-\t}\n-      else\n-\tec.assign(errno, std::generic_category());\n+      ec.clear();\n+      return false; // Nothing to do, not an error.\n     }\n-  return false;\n+  if (::remove(p.c_str()) != 0)\n+    {\n+      ec.assign(errno, std::generic_category());\n+      return false;\n+    }\n+  ec.clear();\n+  return true;\n }\n \n \n@@ -1036,22 +1040,27 @@ fs::remove_all(const path& p)\n {\n   error_code ec;\n   bool result = remove_all(p, ec);\n-  if (ec.value())\n+  if (ec)\n     _GLIBCXX_THROW_OR_ABORT(filesystem_error(\"cannot remove all\", p, ec));\n   return result;\n }\n \n std::uintmax_t\n fs::remove_all(const path& p, error_code& ec) noexcept\n {\n-  auto fs = symlink_status(p, ec);\n+  const auto s = symlink_status(p, ec);\n+  if (!status_known(s))\n+    return -1;\n+  ec.clear();\n   uintmax_t count = 0;\n-  if (ec.value() == 0 && fs.type() == file_type::directory)\n-    for (directory_iterator d(p, ec), end; ec.value() == 0 && d != end; ++d)\n+  if (s.type() == file_type::directory)\n+    for (directory_iterator d(p, ec), end; !ec && d != end; ++d)\n       count += fs::remove_all(d->path(), ec);\n-  if (ec.value())\n+  if (!ec && fs::remove(p, ec))\n+    ++count;\n+  if (ec)\n     return -1;\n-  return fs::remove(p, ec) ? ++count : -1;  // fs:remove() calls ec.clear()\n+  return count;\n }\n \n void"}, {"sha": "6ff280a9c7614ab340a1e9be1b33e7f13bf57c65", "filename": "libstdc++-v3/src/filesystem/std-ops.cc", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/994844d36ad5215af397fa07fbb8c4f85f9e743f/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-ops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/994844d36ad5215af397fa07fbb8c4f85f9e743f/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-ops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-ops.cc?ref=994844d36ad5215af397fa07fbb8c4f85f9e743f", "patch": "@@ -1266,17 +1266,21 @@ fs::remove(const path& p)\n bool\n fs::remove(const path& p, error_code& ec) noexcept\n {\n-  if (exists(symlink_status(p, ec)))\n+  const auto s = symlink_status(p, ec);\n+  if (!status_known(s))\n+    return false;\n+  if (s.type() == file_type::not_found)\n     {\n-      if (::remove(p.c_str()) == 0)\n-\t{\n-\t  ec.clear();\n-\t  return true;\n-\t}\n-      else\n-\tec.assign(errno, std::generic_category());\n+      ec.clear();\n+      return false; // Nothing to do, not an error.\n     }\n-  return false;\n+  if (::remove(p.c_str()) != 0)\n+    {\n+      ec.assign(errno, std::generic_category());\n+      return false;\n+    }\n+  ec.clear();\n+  return true;\n }\n \n \n@@ -1293,14 +1297,19 @@ fs::remove_all(const path& p)\n std::uintmax_t\n fs::remove_all(const path& p, error_code& ec)\n {\n-  auto fs = symlink_status(p, ec);\n+  const auto s = symlink_status(p, ec);\n+  if (!status_known(s))\n+    return -1;\n+  ec.clear();\n   uintmax_t count = 0;\n-  if (!ec && fs.type() == file_type::directory)\n+  if (s.type() == file_type::directory)\n     for (directory_iterator d(p, ec), end; !ec && d != end; ++d)\n       count += fs::remove_all(d->path(), ec);\n+  if (!ec && fs::remove(p, ec))\n+    ++count;\n   if (ec)\n     return -1;\n-  return fs::remove(p, ec) ? ++count : -1;  // fs:remove() calls ec.clear()\n+  return count;\n }\n \n void"}, {"sha": "ef9f06d73008d6d66f0a70d5eada468c0fd515f2", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/remove.cc", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/994844d36ad5215af397fa07fbb8c4f85f9e743f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fremove.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/994844d36ad5215af397fa07fbb8c4f85f9e743f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fremove.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fremove.cc?ref=994844d36ad5215af397fa07fbb8c4f85f9e743f", "patch": "@@ -0,0 +1,100 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-do run { target c++17 } }\n+// { dg-require-filesystem-ts \"\" }\n+\n+#include <filesystem>\n+#include <testsuite_hooks.h>\n+#include <testsuite_fs.h>\n+\n+namespace fs = std::filesystem;\n+\n+void\n+test01()\n+{\n+  std::error_code ec;\n+  const std::error_code bad_ec = make_error_code(std::errc::invalid_argument);\n+  bool n;\n+\n+  n = fs::remove(\"\", ec);\n+  VERIFY( !ec ); // This seems odd, but is what the standard requires.\n+  VERIFY( !n );\n+\n+  auto p = __gnu_test::nonexistent_path();\n+  ec = bad_ec;\n+  n = remove(p, ec);\n+  VERIFY( !ec );\n+  VERIFY( !n );\n+\n+  auto link = __gnu_test::nonexistent_path();\n+  create_symlink(p, link);  // dangling symlink\n+  ec = bad_ec;\n+  n = remove(link, ec);\n+  VERIFY( !ec );\n+  VERIFY( n );\n+  VERIFY( !exists(symlink_status(link)) );\n+\n+  __gnu_test::scoped_file f(p);\n+  create_symlink(p, link);\n+  ec = bad_ec;\n+  n = remove(link, ec);\n+  VERIFY( !ec );\n+  VERIFY( n );\n+  VERIFY( !exists(symlink_status(link)) );  // The symlink is removed, but\n+  VERIFY( exists(p) );                      // its target is not.\n+\n+  ec = bad_ec;\n+  n = remove(p, ec);\n+  VERIFY( !ec );\n+  VERIFY( n );\n+  VERIFY( !exists(symlink_status(p)) );\n+\n+  const auto dir = __gnu_test::nonexistent_path();\n+  create_directories(dir/\"a/b\");\n+  ec.clear();\n+  n = remove(dir/\"a\", ec);\n+  VERIFY( ec );\n+  VERIFY( !n );\n+  VERIFY( exists(dir/\"a/b\") );\n+\n+  permissions(dir, fs::perms::none, ec);\n+  if (!ec)\n+  {\n+    ec.clear();\n+    n = remove(dir/\"a/b\", ec);\n+    VERIFY( ec );\n+    VERIFY( !n );\n+    permissions(dir, fs::perms::owner_all, ec);\n+  }\n+\n+  ec = bad_ec;\n+  n = remove(dir/\"a/b\", ec);\n+  VERIFY( !ec );\n+  VERIFY( n );\n+  VERIFY( !exists(dir/\"a/b\") );\n+\n+  remove(dir/\"a\", ec);\n+  remove(dir, ec);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "8ee5c4d39c1577b9b197c6b60869cfbd125a25b9", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/remove_all.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/994844d36ad5215af397fa07fbb8c4f85f9e743f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fremove_all.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/994844d36ad5215af397fa07fbb8c4f85f9e743f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fremove_all.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fremove_all.cc?ref=994844d36ad5215af397fa07fbb8c4f85f9e743f", "patch": "@@ -29,19 +29,19 @@ void\n test01()\n {\n   std::error_code ec;\n+  const std::error_code bad_ec = make_error_code(std::errc::invalid_argument);\n   std::uintmax_t n;\n \n   n = fs::remove_all(\"\", ec);\n-  VERIFY( ec );\n-  VERIFY( n == std::uintmax_t(-1) );\n+  VERIFY( !ec ); // This seems odd, but is what the standard requires.\n+  VERIFY( n == 0 );\n \n   auto p = __gnu_test::nonexistent_path();\n-  ec.clear();\n+  ec = bad_ec;\n   n = remove_all(p, ec);\n-  VERIFY( ec );\n-  VERIFY( n == std::uintmax_t(-1) );\n+  VERIFY( !ec );\n+  VERIFY( n == 0 );\n \n-  const auto bad_ec = ec;\n   auto link = __gnu_test::nonexistent_path();\n   create_symlink(p, link);  // dangling symlink\n   ec = bad_ec;\n@@ -59,7 +59,7 @@ test01()\n   VERIFY( !exists(symlink_status(link)) );  // The symlink is removed, but\n   VERIFY( exists(p) );                      // its target is not.\n \n-  auto dir = __gnu_test::nonexistent_path();\n+  const auto dir = __gnu_test::nonexistent_path();\n   create_directories(dir/\"a/b/c\");\n   ec = bad_ec;\n   n = remove_all(dir/\"a\", ec);"}, {"sha": "8d1801099a2620267452c904d09d59c04d627566", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/remove.cc", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/994844d36ad5215af397fa07fbb8c4f85f9e743f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fremove.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/994844d36ad5215af397fa07fbb8c4f85f9e743f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fremove.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fremove.cc?ref=994844d36ad5215af397fa07fbb8c4f85f9e743f", "patch": "@@ -0,0 +1,100 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-lstdc++fs\" }\n+// { dg-do run { target c++11 } }\n+// { dg-require-filesystem-ts \"\" }\n+\n+#include <filesystem>\n+#include <testsuite_hooks.h>\n+#include <testsuite_fs.h>\n+\n+namespace fs = std::experimental::filesystem;\n+\n+void\n+test01()\n+{\n+  std::error_code ec;\n+  const std::error_code bad_ec = make_error_code(std::errc::invalid_argument);\n+  bool n;\n+\n+  n = fs::remove(\"\", ec);\n+  VERIFY( !ec ); // This seems odd, but is what the standard requires.\n+  VERIFY( !n );\n+\n+  auto p = __gnu_test::nonexistent_path();\n+  ec = bad_ec;\n+  n = remove(p, ec);\n+  VERIFY( !ec );\n+  VERIFY( !n );\n+\n+  auto link = __gnu_test::nonexistent_path();\n+  create_symlink(p, link);  // dangling symlink\n+  ec = bad_ec;\n+  n = remove(link, ec);\n+  VERIFY( !ec );\n+  VERIFY( n );\n+  VERIFY( !exists(symlink_status(link)) );\n+\n+  __gnu_test::scoped_file f(p);\n+  create_symlink(p, link);\n+  ec = bad_ec;\n+  n = remove(link, ec);\n+  VERIFY( !ec );\n+  VERIFY( n );\n+  VERIFY( !exists(symlink_status(link)) );  // The symlink is removed, but\n+  VERIFY( exists(p) );                      // its target is not.\n+\n+  ec = bad_ec;\n+  n = remove(p, ec);\n+  VERIFY( !ec );\n+  VERIFY( n );\n+  VERIFY( !exists(symlink_status(p)) );\n+\n+  const auto dir = __gnu_test::nonexistent_path();\n+  create_directories(dir/\"a/b\");\n+  ec.clear();\n+  n = remove(dir/\"a\", ec);\n+  VERIFY( ec );\n+  VERIFY( !n );\n+  VERIFY( exists(dir/\"a/b\") );\n+\n+  permissions(dir, fs::perms::none, ec);\n+  if (!ec)\n+  {\n+    ec.clear();\n+    n = remove(dir/\"a/b\", ec);\n+    VERIFY( ec );\n+    VERIFY( !n );\n+    permissions(dir, fs::perms::owner_all, ec);\n+  }\n+\n+  ec = bad_ec;\n+  n = remove(dir/\"a/b\", ec);\n+  VERIFY( !ec );\n+  VERIFY( n );\n+  VERIFY( !exists(dir/\"a/b\") );\n+\n+  remove(dir/\"a\", ec);\n+  remove(dir, ec);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "fa146b4317cc49810dd8acc2644bee66e8e198bc", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/remove_all.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/994844d36ad5215af397fa07fbb8c4f85f9e743f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fremove_all.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/994844d36ad5215af397fa07fbb8c4f85f9e743f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fremove_all.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fremove_all.cc?ref=994844d36ad5215af397fa07fbb8c4f85f9e743f", "patch": "@@ -29,19 +29,19 @@ void\n test01()\n {\n   std::error_code ec;\n+  const std::error_code bad_ec = make_error_code(std::errc::invalid_argument);\n   std::uintmax_t n;\n \n   n = fs::remove_all(\"\", ec);\n-  VERIFY( ec );\n-  VERIFY( n == std::uintmax_t(-1) );\n+  VERIFY( !ec ); // This seems odd, but is what the TS requires.\n+  VERIFY( n == 0 );\n \n   auto p = __gnu_test::nonexistent_path();\n-  ec.clear();\n+  ec = bad_ec;\n   n = remove_all(p, ec);\n-  VERIFY( ec );\n-  VERIFY( n == std::uintmax_t(-1) );\n+  VERIFY( !ec );\n+  VERIFY( n == 0 );\n \n-  const auto bad_ec = ec;\n   auto link = __gnu_test::nonexistent_path();\n   create_symlink(p, link);  // dangling symlink\n   ec = bad_ec;\n@@ -59,7 +59,7 @@ test01()\n   VERIFY( !exists(symlink_status(link)) );  // The symlink is removed, but\n   VERIFY( exists(p) );                      // its target is not.\n \n-  auto dir = __gnu_test::nonexistent_path();\n+  const auto dir = __gnu_test::nonexistent_path();\n   create_directories(dir/\"a/b/c\");\n   ec = bad_ec;\n   n = remove_all(dir/\"a\", ec);"}]}