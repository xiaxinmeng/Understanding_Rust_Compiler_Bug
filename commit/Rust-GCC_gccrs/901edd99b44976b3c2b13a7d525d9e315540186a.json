{"sha": "901edd99b44976b3c2b13a7d525d9e315540186a", "node_id": "C_kwDOANBUbNoAKDkwMWVkZDk5YjQ0OTc2YjNjMmIxM2E3ZDUyNWQ5ZTMxNTU0MDE4NmE", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2023-03-14T19:23:06Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2023-03-15T19:22:29Z"}, "message": "Fortran: rank checking with explicit-/assumed-size arrays and CLASS [PR58331]\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/58331\n\t* interface.cc (compare_parameter): Adjust check of array dummy\n\targuments to handle the case of CLASS variables.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/58331\n\t* gfortran.dg/class_dummy_10.f90: New test.\n\nCo-authored-by: Tobias Burnus <tobias@codesourcery.com>", "tree": {"sha": "d8f6485d1c8aa049cd067745f44adca793b9b2a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8f6485d1c8aa049cd067745f44adca793b9b2a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/901edd99b44976b3c2b13a7d525d9e315540186a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/901edd99b44976b3c2b13a7d525d9e315540186a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/901edd99b44976b3c2b13a7d525d9e315540186a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/901edd99b44976b3c2b13a7d525d9e315540186a/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be20dcc359bcc4677c5b9ce011d3cd7b4ce94a64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be20dcc359bcc4677c5b9ce011d3cd7b4ce94a64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be20dcc359bcc4677c5b9ce011d3cd7b4ce94a64"}], "stats": {"total": 83, "additions": 76, "deletions": 7}, "files": [{"sha": "db79b104dc2155220d7ae85a2dd6d9a2c0286d4c", "filename": "gcc/fortran/interface.cc", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/901edd99b44976b3c2b13a7d525d9e315540186a/gcc%2Ffortran%2Finterface.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/901edd99b44976b3c2b13a7d525d9e315540186a/gcc%2Ffortran%2Finterface.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.cc?ref=901edd99b44976b3c2b13a7d525d9e315540186a", "patch": "@@ -2349,6 +2349,7 @@ compare_parameter (gfc_symbol *formal, gfc_expr *actual,\n   char err[200];\n   gfc_component *ppc;\n   bool codimension = false;\n+  gfc_array_spec *formal_as;\n \n   /* If the formal arg has type BT_VOID, it's to one of the iso_c_binding\n      procs c_f_pointer or c_f_procpointer, and we need to accept most\n@@ -2540,6 +2541,9 @@ compare_parameter (gfc_symbol *formal, gfc_expr *actual,\n       return false;\n     }\n \n+  formal_as = (formal->ts.type == BT_CLASS\n+\t       ? CLASS_DATA (formal)->as : formal->as);\n+\n   if (codimension && formal->attr.allocatable)\n     {\n       gfc_ref *last = NULL;\n@@ -2650,10 +2654,10 @@ compare_parameter (gfc_symbol *formal, gfc_expr *actual,\n   if (symbol_rank (formal) == actual->rank || symbol_rank (formal) == -1)\n     return true;\n \n-  rank_check = where != NULL && !is_elemental && formal->as\n-\t       && (formal->as->type == AS_ASSUMED_SHAPE\n-\t\t   || formal->as->type == AS_DEFERRED)\n-\t       && actual->expr_type != EXPR_NULL;\n+  rank_check = where != NULL && !is_elemental && formal_as\n+    && (formal_as->type == AS_ASSUMED_SHAPE\n+\t|| formal_as->type == AS_DEFERRED)\n+    && actual->expr_type != EXPR_NULL;\n \n   /* Skip rank checks for NO_ARG_CHECK.  */\n   if (formal->attr.ext_attr & (1 << EXT_ATTR_NO_ARG_CHECK))\n@@ -2662,14 +2666,20 @@ compare_parameter (gfc_symbol *formal, gfc_expr *actual,\n   /* Scalar & coindexed, see: F2008, Section 12.5.2.4.  */\n   if (rank_check || ranks_must_agree\n       || (formal->attr.pointer && actual->expr_type != EXPR_NULL)\n-      || (actual->rank != 0 && !(is_elemental || formal->attr.dimension))\n+      || (actual->rank != 0\n+\t  && !(is_elemental || formal->attr.dimension\n+\t       || (formal->ts.type == BT_CLASS\n+\t\t   && CLASS_DATA (formal)->attr.dimension)))\n       || (actual->rank == 0\n \t  && ((formal->ts.type == BT_CLASS\n \t       && CLASS_DATA (formal)->as->type == AS_ASSUMED_SHAPE)\n \t      || (formal->ts.type != BT_CLASS\n \t\t   && formal->as->type == AS_ASSUMED_SHAPE))\n \t  && actual->expr_type != EXPR_NULL)\n-      || (actual->rank == 0 && formal->attr.dimension\n+      || (actual->rank == 0\n+\t  && (formal->attr.dimension\n+\t      || (formal->ts.type == BT_CLASS\n+\t\t  && CLASS_DATA (formal)->attr.dimension))\n \t  && gfc_is_coindexed (actual))\n       /* Assumed-rank actual argument; F2018 C838.  */\n       || actual->rank == -1)\n@@ -2690,7 +2700,10 @@ compare_parameter (gfc_symbol *formal, gfc_expr *actual,\n \t}\n       return false;\n     }\n-  else if (actual->rank != 0 && (is_elemental || formal->attr.dimension))\n+  else if (actual->rank != 0\n+\t   && (is_elemental || formal->attr.dimension\n+\t       || (formal->ts.type == BT_CLASS\n+\t\t   && CLASS_DATA (formal)->attr.dimension)))\n     return true;\n \n   /* At this point, we are considering a scalar passed to an array.   This"}, {"sha": "cee5d4d82b27ffa066d21c4ad46d67c6c02f903a", "filename": "gcc/testsuite/gfortran.dg/class_dummy_10.f90", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/901edd99b44976b3c2b13a7d525d9e315540186a/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_dummy_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/901edd99b44976b3c2b13a7d525d9e315540186a/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_dummy_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_dummy_10.f90?ref=901edd99b44976b3c2b13a7d525d9e315540186a", "patch": "@@ -0,0 +1,56 @@\n+! { dg-do compile }\n+! PR fortran/58331 - rank checking for CLASS dummy arguments\n+\n+module mymod\n+  implicit none\n+contains\n+  subroutine mysub(a, n)\n+    integer,  intent(in) :: n\n+    class(*), intent(in) :: a(n)\n+\n+    select type(a)\n+    type is(integer)\n+       print *,'a is integer'\n+       print *, \"n=\", n, '  a=', a\n+    class default\n+       print *,'a is unsupported type'\n+       stop 1\n+    end select\n+  end\n+\n+  ! Assumed rank\n+  subroutine sub_ar (a)\n+    class(*), intent(in) :: a(..)\n+    print *, rank (a), size (a), \":\", shape (a)\n+  end\n+\n+  ! Assumed shape\n+  subroutine sub_as1 (a)\n+    class(*), intent(in) :: a(:)\n+    print *, rank (a), size (a), \":\", shape (a)\n+  end\n+  subroutine sub_as2 (b)\n+    class(*), intent(in) :: b(:,:)\n+    print *, rank (b), size (b), \":\", shape (b)\n+  end\n+end\n+\n+program p\n+  use mymod\n+  implicit none\n+  integer :: a(3)   = [11, 12, 13]\n+  integer :: b(2,2) = reshape([21, 22, 23, 24], [2,2])\n+  integer :: c      = 1\n+\n+  call mysub(a,3)\n+  call mysub(b,4)\n+  call sub_ar(a)\n+  call sub_ar(b)\n+  call sub_ar(c)\n+  call sub_as1(a)\n+  call sub_as2(b)\n+  !\n+  call mysub(c,1) ! { dg-error \"rank-1 and scalar\" }\n+  call sub_as1(b) ! { dg-error \"rank-1 and rank-2\" }\n+  call sub_as2(a) ! { dg-error \"rank-2 and rank-1\" }\n+end"}]}