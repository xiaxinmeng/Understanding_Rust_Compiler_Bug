{"sha": "39f383b700a2ca9bbffb78a235c62b152a662425", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzlmMzgzYjcwMGEyY2E5YmJmZmI3OGEyMzVjNjJiMTUyYTY2MjQyNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-06-05T19:14:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-06-05T19:14:02Z"}, "message": "re PR c++/66405 (ICE: in tsubst, at cp/pt.c:11984)\n\n\tPR c++/66405\n\t* pt.c (argument_pack_element_is_expansion_p): Return 2 if\n\tthe expansion has extra args.\n\t(use_pack_expansion_extra_args_p): Return true in that case.\n\nFrom-SVN: r224163", "tree": {"sha": "af6fb47c02a8cc32005654f2519fd1a587d3e761", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af6fb47c02a8cc32005654f2519fd1a587d3e761"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39f383b700a2ca9bbffb78a235c62b152a662425", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39f383b700a2ca9bbffb78a235c62b152a662425", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39f383b700a2ca9bbffb78a235c62b152a662425", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39f383b700a2ca9bbffb78a235c62b152a662425/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "85d9a299152839de26b0f18b6755334a8f90592e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85d9a299152839de26b0f18b6755334a8f90592e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85d9a299152839de26b0f18b6755334a8f90592e"}], "stats": {"total": 41, "additions": 35, "deletions": 6}, "files": [{"sha": "99988ef4ba823b50e6e17bd495ae615cdd7615c3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f383b700a2ca9bbffb78a235c62b152a662425/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f383b700a2ca9bbffb78a235c62b152a662425/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=39f383b700a2ca9bbffb78a235c62b152a662425", "patch": "@@ -1,5 +1,10 @@\n 2015-06-05  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/66405\n+\t* pt.c (argument_pack_element_is_expansion_p): Return 2 if\n+\tthe expansion has extra args.\n+\t(use_pack_expansion_extra_args_p): Return true in that case.\n+\n \tPR c++/66405\n \t* pt.c (type_dependent_expression_p): EXPR_PACK_EXPANSION is\n \tdependent even if it has a type."}, {"sha": "4a9fff043e9ef7ebeaefdaf01f712acad7461912", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f383b700a2ca9bbffb78a235c62b152a662425/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f383b700a2ca9bbffb78a235c62b152a662425/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=39f383b700a2ca9bbffb78a235c62b152a662425", "patch": "@@ -9740,16 +9740,22 @@ make_fnparm_pack (tree spec_parm)\n   return extract_fnparm_pack (NULL_TREE, &spec_parm);\n }\n \n-/* Return true iff the Ith element of the argument pack ARG_PACK is a\n-   pack expansion.  */\n+/* Return 1 if the Ith element of the argument pack ARG_PACK is a\n+   pack expansion with no extra args, 2 if it has extra args, or 0\n+   if it is not a pack expansion.  */\n \n-static bool\n+static int\n argument_pack_element_is_expansion_p (tree arg_pack, int i)\n {\n   tree vec = ARGUMENT_PACK_ARGS (arg_pack);\n   if (i >= TREE_VEC_LENGTH (vec))\n-    return false;\n-  return PACK_EXPANSION_P (TREE_VEC_ELT (vec, i));\n+    return 0;\n+  tree elt = TREE_VEC_ELT (vec, i);\n+  if (!PACK_EXPANSION_P (elt))\n+    return 0;\n+  if (PACK_EXPANSION_EXTRA_ARGS (elt))\n+    return 2;\n+  return 1;\n }\n \n \n@@ -9799,7 +9805,12 @@ use_pack_expansion_extra_args_p (tree parm_packs,\n \t{\n \t  tree arg = TREE_VALUE (parm_pack);\n \n-\t  if (argument_pack_element_is_expansion_p (arg, i))\n+\t  int exp = argument_pack_element_is_expansion_p (arg, i);\n+\t  if (exp == 2)\n+\t    /* We can't substitute a pack expansion with extra args into\n+\t       our pattern.  */\n+\t    return true;\n+\t  else if (exp)\n \t    has_expansion_arg = true;\n \t  else\n \t    has_non_expansion_arg = true;"}, {"sha": "e931bc5faad6837e152c91797af35d3db42160f4", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-alias1.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f383b700a2ca9bbffb78a235c62b152a662425/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-alias1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f383b700a2ca9bbffb78a235c62b152a662425/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-alias1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-alias1.C?ref=39f383b700a2ca9bbffb78a235c62b152a662425", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/66405\n+// { dg-do compile { target c++11 } }\n+\n+template <typename T, T...> struct B;\n+template <bool... Bools> using and_c = B<bool, +Bools...>;\n+template <typename T, typename U> using Constructible = int;\n+template <typename... Ts> struct common_tuple {\n+  template <typename... Us,\n+\t    typename = and_c<Constructible<Ts, Us>{}...> >\n+    common_tuple();\n+  void foo();\n+};\n+template <> void common_tuple<>::foo(){}"}]}