{"sha": "ede62875331070c5abcf059665dcd0d7cdd237f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRlNjI4NzUzMzEwNzBjNWFiY2YwNTk2NjVkY2QwZDdjZGQyMzdmOA==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2005-03-07T00:21:27Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2005-03-07T00:21:27Z"}, "message": "predicates.md (branch_comparison_operator): Remove redundant match_code test.\n\n        * config/rs6000/predicates.md (branch_comparison_operator): Remove\n        redundant match_code test.\n        (scc_comparison_operator): Swap match_operand and match_code\n        tests.\n        (branch_positive_comparison_operator): Same.\n        (trap_comparison_operator): Use comparison_operator and swap with\n        match_code test.\n\nFrom-SVN: r96000", "tree": {"sha": "c3aab63133a2978d1b3a4e6768f065ae408fd34a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3aab63133a2978d1b3a4e6768f065ae408fd34a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ede62875331070c5abcf059665dcd0d7cdd237f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ede62875331070c5abcf059665dcd0d7cdd237f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ede62875331070c5abcf059665dcd0d7cdd237f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ede62875331070c5abcf059665dcd0d7cdd237f8/comments", "author": null, "committer": null, "parents": [{"sha": "0f2371cb2d0ad084dfeb7949b6ea1cd2eb3e5270", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f2371cb2d0ad084dfeb7949b6ea1cd2eb3e5270", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f2371cb2d0ad084dfeb7949b6ea1cd2eb3e5270"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "521aebed82dab3a48074df6913fd233519f8fca4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede62875331070c5abcf059665dcd0d7cdd237f8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede62875331070c5abcf059665dcd0d7cdd237f8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ede62875331070c5abcf059665dcd0d7cdd237f8", "patch": "@@ -1,3 +1,13 @@\n+2005-03-06  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/predicates.md (branch_comparison_operator): Remove\n+\tredundant match_code test.\n+\t(scc_comparison_operator): Swap match_operand and match_code\n+\ttests.\n+\t(branch_positive_comparison_operator): Same.\n+\t(trap_comparison_operator): Use comparison_operator and swap with\n+\tmatch_code test.\n+\n 2005-03-06  Marek Michalkiewicz  <marekm@amelek.gda.pl>\n \n \tPR target/20288"}, {"sha": "5bf3e1765fe3e7256e36d88581d85a0eeda2a88d", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede62875331070c5abcf059665dcd0d7cdd237f8/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede62875331070c5abcf059665dcd0d7cdd237f8/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=ede62875331070c5abcf059665dcd0d7cdd237f8", "patch": "@@ -680,30 +680,28 @@\n ;; instruction.  We check the opcode against the mode of the CC value.\n ;; validate_condition_mode is an assertion.\n (define_predicate \"branch_comparison_operator\"\n-  (and (match_code \"eq,ne,le,lt,ge,gt,leu,ltu,geu,gtu,unordered,ordered,unge,unle\")\n-       (and (match_operand 0 \"comparison_operator\")\n-\t    (and (match_test \"GET_MODE_CLASS (GET_MODE (XEXP (op, 0))) == MODE_CC\")\n-\t\t (match_test \"validate_condition_mode (GET_CODE (op),\n-\t\t\t\t\t\t       GET_MODE (XEXP (op, 0))),\n-\t\t\t      1\")))))\n+   (and (match_operand 0 \"comparison_operator\")\n+\t(and (match_test \"GET_MODE_CLASS (GET_MODE (XEXP (op, 0))) == MODE_CC\")\n+\t     (match_test \"validate_condition_mode (GET_CODE (op),\n+\t\t\t\t\t\t   GET_MODE (XEXP (op, 0))),\n+\t\t\t  1\"))))\n \n ;; Return 1 if OP is a comparison operation that is valid for an SCC insn --\n ;; it must be a positive comparison.\n (define_predicate \"scc_comparison_operator\"\n-  (and (match_code \"eq,lt,gt,ltu,gtu,unordered\")\n-       (match_operand 0 \"branch_comparison_operator\")))\n+  (and (match_operand 0 \"branch_comparison_operator\")\n+       (match_code \"eq,lt,gt,ltu,gtu,unordered\")))\n \n ;; Return 1 if OP is a comparison operation that is valid for a branch\n ;; insn, which is true if the corresponding bit in the CC register is set.\n (define_predicate \"branch_positive_comparison_operator\"\n-  (and (match_code \"eq,lt,gt,ltu,gtu,unordered\")\n-       (match_operand 0 \"branch_comparison_operator\")))\n+  (and (match_operand 0 \"branch_comparison_operator\")\n+       (match_code \"eq,lt,gt,ltu,gtu,unordered\")))\n \n ;; Return 1 is OP is a comparison operation that is valid for a trap insn.\n (define_predicate \"trap_comparison_operator\"\n-  (and (match_code \"eq,ne,le,lt,ge,gt,leu,ltu,geu,gtu\")\n-       (match_test \"(mode == VOIDmode || mode == GET_MODE (op))\n-\t\t    && COMPARISON_P (op)\")))\n+   (and (match_operand 0 \"comparison_operator\")\n+\t(match_code \"eq,ne,le,lt,ge,gt,leu,ltu,geu,gtu\")))\n \n ;; Return 1 if OP is a load multiple operation, known to be a PARALLEL.\n (define_predicate \"load_multiple_operation\""}]}