{"sha": "04a9ae287f6d76c60464c57be98550a25b358c34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRhOWFlMjg3ZjZkNzZjNjA0NjRjNTdiZTk4NTUwYTI1YjM1OGMzNA==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2015-12-04T17:24:30Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2015-12-04T17:24:30Z"}, "message": "gcc\t* config.gcc (extra_gcc_objs): Define for MSP430.\n\n        * common/config/msp430/msp430-common.c (msp430_handle_option):\n\tPass both -mmcu and -mcpu on to the back end if they are both\n\tdefined.\n\t* config/msp430/msp430.c (hwmult_name): New function.\n        (msp430_option_override): If an unrecognised MCU name is\n\tdetected only warn if the user has not provided suitable\n        -mhwmult and -mcpu options.  Use msp430_warn_mcu to control\n\twarning messages.  Generate warnings about conflicts between\n\t-mmcu and -mcpu and -mhwmult options. \n\tIf neither -mcpu nor -mmcu have been specified but -mhwmult=\n\tf5series has the select the 430X isa.\n\t(msp430_no_hwmult): If -mmcu has not been specified and\n\tmsp430_hwmult_type is AUTO then return true.\n\t* config/msp430/msp430.h (EXTRA_SPEC_FUNCTIONS): Define.\n\t(LIB_SPEC): Add hardware multiply library selection.\n\t* config/msp430/t-msp430: Delete hardware multiply multilibs.\n\tAdd rule to build driver-msp430.o\n\t* config/msp430/driver-msp430.c: New file.\n\t* config/msp430/msp430.opt (warn-mcu): New option.\n\t* doc/invoke.texi: Update description of -mhwmult=auto.\n        Document -mwarn-mcu option.\n\ntests\t* gcc.target/msp430/msp_abi_div_funcs.c: New test.\n\t* gcc.target/msp430/mul_main.h: New test support file.\n\t* gcc.target/msp430/mul_none.c: New test.\n\t* gcc.target/msp430/mul_16bit.c: New test.\n\t* gcc.target/msp430/mul_32bit.c: New test.\n\t* gcc.target/msp430/mul_f5.c: New test.\n\nlibgcc\t* config/msp430/mpy.c (__mulhi3): Use a faster algorithm.\n\tAllow for the second argument being negative.\n\t* config.host (extra_parts): Define for MSP430.  Create separate\n\tlibraries for each of the hardware multiply formats.\n\t* config/msp430/lib2hw_mul.S: Build only the multiply routines\n\tthat are needed.\n\t* config/msp430/lib2mul.c: Likewise.\n\t* config/msp430/t-msp430 (LIB2ADD): Remove lib2hw_mul.S.\n\tAdd rules to build hardware multiply libraries.\n\t* config/msp430/lib2divSI.c: (__mspabi_divlu): Alias for\n\t__mspabi_divul function.\n\t(__mspabi_divllu): New stub function.\n\nFrom-SVN: r231286", "tree": {"sha": "567b5a149156fde352ef52d1373ff08ead34394d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/567b5a149156fde352ef52d1373ff08ead34394d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04a9ae287f6d76c60464c57be98550a25b358c34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04a9ae287f6d76c60464c57be98550a25b358c34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04a9ae287f6d76c60464c57be98550a25b358c34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04a9ae287f6d76c60464c57be98550a25b358c34/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4b5d538ba7ff4c9d69fd73e1bb2ce88e3fca7562", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b5d538ba7ff4c9d69fd73e1bb2ce88e3fca7562", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b5d538ba7ff4c9d69fd73e1bb2ce88e3fca7562"}], "stats": {"total": 2038, "additions": 1423, "deletions": 615}, "files": [{"sha": "c918cf92931aed1dbe02f4e08b099f8f9270b395", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a9ae287f6d76c60464c57be98550a25b358c34/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a9ae287f6d76c60464c57be98550a25b358c34/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=04a9ae287f6d76c60464c57be98550a25b358c34", "patch": "@@ -1,4 +1,29 @@\n-2015-12-04  Segher Boessenkool  <segher@kernel.crashing.org>\n+2015-11-25  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config.gcc (extra_gcc_objs): Define for MSP430.\n+        * common/config/msp430/msp430-common.c (msp430_handle_option):\n+\tPass both -mmcu and -mcpu on to the back end if they are both\n+\tdefined.\n+\t* config/msp430/msp430.c (hwmult_name): New function.\n+        (msp430_option_override): If an unrecognised MCU name is\n+\tdetected only warn if the user has not provided suitable\n+        -mhwmult and -mcpu options.  Use msp430_warn_mcu to control\n+\twarning messages.  Generate warnings about conflicts between\n+\t-mmcu and -mcpu and -mhwmult options.\n+\tIf neither -mcpu nor -mmcu have been specified but -mhwmult=\n+\tf5series has the select the 430X isa.\n+\t(msp430_no_hwmult): If -mmcu has not been specified and\n+\tmsp430_hwmult_type is AUTO then return true.\n+\t* config/msp430/msp430.h (EXTRA_SPEC_FUNCTIONS): Define.\n+\t(LIB_SPEC): Add hardware multiply library selection.\n+\t* config/msp430/t-msp430: Delete hardware multiply multilibs.\n+\tAdd rule to build driver-msp430.o\n+\t* config/msp430/driver-msp430.c: New file.\n+\t* config/msp430/msp430.opt (warn-mcu): New option.\n+\t* doc/invoke.texi: Update description of -mhwmult=auto.\n+        Document -mwarn-mcu option.\n+\n+2015-12-04  Segher Boessenkool  <segher&kernel.crashing.org>\n \n \t* (cstore<mode>4_signed): New expander.\n \t(cstore<mode>4): Call it."}, {"sha": "cbceab92db325d5448b960feb0c6390de0104213", "filename": "gcc/common/config/msp430/msp430-common.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a9ae287f6d76c60464c57be98550a25b358c34/gcc%2Fcommon%2Fconfig%2Fmsp430%2Fmsp430-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a9ae287f6d76c60464c57be98550a25b358c34/gcc%2Fcommon%2Fconfig%2Fmsp430%2Fmsp430-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fmsp430%2Fmsp430-common.c?ref=04a9ae287f6d76c60464c57be98550a25b358c34", "patch": "@@ -27,9 +27,9 @@\n #include \"opts.h\"\n #include \"flags.h\"\n \n-/* Handle -mcpu= and -mmcu= here.  We want to ensure that only one\n-   of these two options - the last specified on the command line -\n-   is passed on to the msp430 backend.  */\n+/* Check for generic -mcpu= and -mmcu= names here.  If found then we\n+   convert to a baseline cpu name.  Otherwise we allow the option to\n+   be passed on to the backend where it can be checked more fully.  */\n \n static bool\n msp430_handle_option (struct gcc_options *opts ATTRIBUTE_UNUSED,\n@@ -46,13 +46,11 @@ msp430_handle_option (struct gcc_options *opts ATTRIBUTE_UNUSED,\n \t  || strcasecmp (decoded->arg, \"430xv2\") == 0)\n \t{\n \t  target_cpu = \"msp430x\";\n-\t  target_mcu = NULL;\n \t}\n       else if (strcasecmp (decoded->arg, \"msp430\") == 0\n \t       || strcasecmp (decoded->arg, \"430\") == 0)\n \t{\n \t  target_cpu = \"msp430\";\n-\t  target_mcu = NULL;\n \t}\n       else\n \t{\n@@ -77,8 +75,6 @@ msp430_handle_option (struct gcc_options *opts ATTRIBUTE_UNUSED,\n \t  target_cpu = \"msp430x\";\n \t  target_mcu = NULL;\n \t}\n-      else\n-\ttarget_cpu = NULL;\n       break;\n     }\n       "}, {"sha": "96ec76a1c16df02c9426acede69550a045b6848a", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a9ae287f6d76c60464c57be98550a25b358c34/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a9ae287f6d76c60464c57be98550a25b358c34/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=04a9ae287f6d76c60464c57be98550a25b358c34", "patch": "@@ -2236,6 +2236,7 @@ msp430*-*-*)\n \tc_target_objs=\"msp430-c.o\"\n \tcxx_target_objs=\"msp430-c.o\"\n \ttmake_file=\"${tmake_file} msp430/t-msp430\"\n+\textra_gcc_objs=\"driver-msp430.o\"\n \t;;\n nds32le-*-*)\n \ttarget_cpu_default=\"0\""}, {"sha": "0557aac5e97b59c04bea9919419a1a03b2762397", "filename": "gcc/config/msp430/driver-msp430.c", "status": "added", "additions": 703, "deletions": 0, "changes": 703, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a9ae287f6d76c60464c57be98550a25b358c34/gcc%2Fconfig%2Fmsp430%2Fdriver-msp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a9ae287f6d76c60464c57be98550a25b358c34/gcc%2Fconfig%2Fmsp430%2Fdriver-msp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fdriver-msp430.c?ref=04a9ae287f6d76c60464c57be98550a25b358c34", "patch": "@@ -0,0 +1,703 @@\n+/* Subroutines for the gcc driver.\n+   Copyright (C) 2015 Free Software Foundation, Inc.\n+   Contributed by Georg-Johann Lay <avr@gjlay.de>\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"diagnostic.h\"\n+#include \"tm.h\"\n+\n+/* This is a copy of the same data structure found in gas/config/tc-msp430.c\n+   Also another (sort-of) copy can be found in gcc/config/msp430/msp430.c\n+   Keep these three structures in sync.\n+   The data in this structure has been extracted from the devices.csv file\n+   released by TI, updated as of 8 October 2015.  */\n+\n+struct msp430_mcu_data\n+{\n+  const char * name;\n+  unsigned int revision; /* 0=> MSP430, 1=>MSP430X, 2=> MSP430Xv2.  */\n+  unsigned int hwmpy;    /* 0=>none, 1=>16-bit, 2=>16-bit w/sign extend, 4=>32-bit, 8=> 32-bit (5xx).  */\n+}\n+msp430_mcu_data [] =\n+{\n+  { \"cc430f5123\",2,8 },\n+  { \"cc430f5125\",2,8 },\n+  { \"cc430f5133\",2,8 },\n+  { \"cc430f5135\",2,8 },\n+  { \"cc430f5137\",2,8 },\n+  { \"cc430f5143\",2,8 },\n+  { \"cc430f5145\",2,8 },\n+  { \"cc430f5147\",2,8 },\n+  { \"cc430f6125\",2,8 },\n+  { \"cc430f6126\",2,8 },\n+  { \"cc430f6127\",2,8 },\n+  { \"cc430f6135\",2,8 },\n+  { \"cc430f6137\",2,8 },\n+  { \"cc430f6143\",2,8 },\n+  { \"cc430f6145\",2,8 },\n+  { \"cc430f6147\",2,8 },\n+  { \"msp430afe221\",0,2 },\n+  { \"msp430afe222\",0,2 },\n+  { \"msp430afe223\",0,2 },\n+  { \"msp430afe231\",0,2 },\n+  { \"msp430afe232\",0,2 },\n+  { \"msp430afe233\",0,2 },\n+  { \"msp430afe251\",0,2 },\n+  { \"msp430afe252\",0,2 },\n+  { \"msp430afe253\",0,2 },\n+  { \"msp430bt5190\",2,8 },\n+  { \"msp430c091\",0,0 },\n+  { \"msp430c092\",0,0 },\n+  { \"msp430c111\",0,0 },\n+  { \"msp430c1111\",0,0 },\n+  { \"msp430c112\",0,0 },\n+  { \"msp430c1121\",0,0 },\n+  { \"msp430c1331\",0,0 },\n+  { \"msp430c1351\",0,0 },\n+  { \"msp430c311s\",0,0 },\n+  { \"msp430c312\",0,0 },\n+  { \"msp430c313\",0,0 },\n+  { \"msp430c314\",0,0 },\n+  { \"msp430c315\",0,0 },\n+  { \"msp430c323\",0,0 },\n+  { \"msp430c325\",0,0 },\n+  { \"msp430c336\",0,1 },\n+  { \"msp430c337\",0,1 },\n+  { \"msp430c412\",0,0 },\n+  { \"msp430c413\",0,0 },\n+  { \"msp430cg4616\",1,1 },\n+  { \"msp430cg4617\",1,1 },\n+  { \"msp430cg4618\",1,1 },\n+  { \"msp430cg4619\",1,1 },\n+  { \"msp430e112\",0,0 },\n+  { \"msp430e313\",0,0 },\n+  { \"msp430e315\",0,0 },\n+  { \"msp430e325\",0,0 },\n+  { \"msp430e337\",0,1 },\n+  { \"msp430f110\",0,0 },\n+  { \"msp430f1101\",0,0 },\n+  { \"msp430f1101a\",0,0 },\n+  { \"msp430f1111\",0,0 },\n+  { \"msp430f1111a\",0,0 },\n+  { \"msp430f112\",0,0 },\n+  { \"msp430f1121\",0,0 },\n+  { \"msp430f1121a\",0,0 },\n+  { \"msp430f1122\",0,0 },\n+  { \"msp430f1132\",0,0 },\n+  { \"msp430f122\",0,0 },\n+  { \"msp430f1222\",0,0 },\n+  { \"msp430f123\",0,0 },\n+  { \"msp430f1232\",0,0 },\n+  { \"msp430f133\",0,0 },\n+  { \"msp430f135\",0,0 },\n+  { \"msp430f147\",0,1 },\n+  { \"msp430f1471\",0,1 },\n+  { \"msp430f148\",0,1 },\n+  { \"msp430f1481\",0,1 },\n+  { \"msp430f149\",0,1 },\n+  { \"msp430f1491\",0,1 },\n+  { \"msp430f155\",0,0 },\n+  { \"msp430f156\",0,0 },\n+  { \"msp430f157\",0,0 },\n+  { \"msp430f1610\",0,1 },\n+  { \"msp430f1611\",0,1 },\n+  { \"msp430f1612\",0,1 },\n+  { \"msp430f167\",0,1 },\n+  { \"msp430f168\",0,1 },\n+  { \"msp430f169\",0,1 },\n+  { \"msp430f2001\",0,0 },\n+  { \"msp430f2002\",0,0 },\n+  { \"msp430f2003\",0,0 },\n+  { \"msp430f2011\",0,0 },\n+  { \"msp430f2012\",0,0 },\n+  { \"msp430f2013\",0,0 },\n+  { \"msp430f2101\",0,0 },\n+  { \"msp430f2111\",0,0 },\n+  { \"msp430f2112\",0,0 },\n+  { \"msp430f2121\",0,0 },\n+  { \"msp430f2122\",0,0 },\n+  { \"msp430f2131\",0,0 },\n+  { \"msp430f2132\",0,0 },\n+  { \"msp430f2232\",0,0 },\n+  { \"msp430f2234\",0,0 },\n+  { \"msp430f2252\",0,0 },\n+  { \"msp430f2254\",0,0 },\n+  { \"msp430f2272\",0,0 },\n+  { \"msp430f2274\",0,0 },\n+  { \"msp430f233\",0,2 },\n+  { \"msp430f2330\",0,2 },\n+  { \"msp430f235\",0,2 },\n+  { \"msp430f2350\",0,2 },\n+  { \"msp430f2370\",0,2 },\n+  { \"msp430f2410\",0,2 },\n+  { \"msp430f2416\",1,2 },\n+  { \"msp430f2417\",1,2 },\n+  { \"msp430f2418\",1,2 },\n+  { \"msp430f2419\",1,2 },\n+  { \"msp430f247\",0,2 },\n+  { \"msp430f2471\",0,2 },\n+  { \"msp430f248\",0,2 },\n+  { \"msp430f2481\",0,2 },\n+  { \"msp430f249\",0,2 },\n+  { \"msp430f2491\",0,2 },\n+  { \"msp430f2616\",1,2 },\n+  { \"msp430f2617\",1,2 },\n+  { \"msp430f2618\",1,2 },\n+  { \"msp430f2619\",1,2 },\n+  { \"msp430f412\",0,0 },\n+  { \"msp430f413\",0,0 },\n+  { \"msp430f4132\",0,0 },\n+  { \"msp430f415\",0,0 },\n+  { \"msp430f4152\",0,0 },\n+  { \"msp430f417\",0,0 },\n+  { \"msp430f423\",0,1 },\n+  { \"msp430f423a\",0,1 },\n+  { \"msp430f425\",0,1 },\n+  { \"msp430f4250\",0,0 },\n+  { \"msp430f425a\",0,1 },\n+  { \"msp430f4260\",0,0 },\n+  { \"msp430f427\",0,1 },\n+  { \"msp430f4270\",0,0 },\n+  { \"msp430f427a\",0,1 },\n+  { \"msp430f435\",0,0 },\n+  { \"msp430f4351\",0,0 },\n+  { \"msp430f436\",0,0 },\n+  { \"msp430f4361\",0,0 },\n+  { \"msp430f437\",0,0 },\n+  { \"msp430f4371\",0,0 },\n+  { \"msp430f438\",0,0 },\n+  { \"msp430f439\",0,0 },\n+  { \"msp430f447\",0,1 },\n+  { \"msp430f448\",0,1 },\n+  { \"msp430f4481\",0,1 },\n+  { \"msp430f449\",0,1 },\n+  { \"msp430f4491\",0,1 },\n+  { \"msp430f4616\",1,1 },\n+  { \"msp430f46161\",1,1 },\n+  { \"msp430f4617\",1,1 },\n+  { \"msp430f46171\",1,1 },\n+  { \"msp430f4618\",1,1 },\n+  { \"msp430f46181\",1,1 },\n+  { \"msp430f4619\",1,1 },\n+  { \"msp430f46191\",1,1 },\n+  { \"msp430f47126\",1,4 },\n+  { \"msp430f47127\",1,4 },\n+  { \"msp430f47163\",1,4 },\n+  { \"msp430f47166\",1,4 },\n+  { \"msp430f47167\",1,4 },\n+  { \"msp430f47173\",1,4 },\n+  { \"msp430f47176\",1,4 },\n+  { \"msp430f47177\",1,4 },\n+  { \"msp430f47183\",1,4 },\n+  { \"msp430f47186\",1,4 },\n+  { \"msp430f47187\",1,4 },\n+  { \"msp430f47193\",1,4 },\n+  { \"msp430f47196\",1,4 },\n+  { \"msp430f47197\",1,4 },\n+  { \"msp430f477\",0,0 },\n+  { \"msp430f478\",0,0 },\n+  { \"msp430f4783\",0,4 },\n+  { \"msp430f4784\",0,4 },\n+  { \"msp430f479\",0,0 },\n+  { \"msp430f4793\",0,4 },\n+  { \"msp430f4794\",0,4 },\n+  { \"msp430f5131\",2,8 },\n+  { \"msp430f5132\",2,8 },\n+  { \"msp430f5151\",2,8 },\n+  { \"msp430f5152\",2,8 },\n+  { \"msp430f5171\",2,8 },\n+  { \"msp430f5172\",2,8 },\n+  { \"msp430f5212\",2,8 },\n+  { \"msp430f5213\",2,8 },\n+  { \"msp430f5214\",2,8 },\n+  { \"msp430f5217\",2,8 },\n+  { \"msp430f5218\",2,8 },\n+  { \"msp430f5219\",2,8 },\n+  { \"msp430f5222\",2,8 },\n+  { \"msp430f5223\",2,8 },\n+  { \"msp430f5224\",2,8 },\n+  { \"msp430f5227\",2,8 },\n+  { \"msp430f5228\",2,8 },\n+  { \"msp430f5229\",2,8 },\n+  { \"msp430f5232\",2,8 },\n+  { \"msp430f5234\",2,8 },\n+  { \"msp430f5237\",2,8 },\n+  { \"msp430f5239\",2,8 },\n+  { \"msp430f5242\",2,8 },\n+  { \"msp430f5244\",2,8 },\n+  { \"msp430f5247\",2,8 },\n+  { \"msp430f5249\",2,8 },\n+  { \"msp430f5252\",2,8 },\n+  { \"msp430f5253\",2,8 },\n+  { \"msp430f5254\",2,8 },\n+  { \"msp430f5255\",2,8 },\n+  { \"msp430f5256\",2,8 },\n+  { \"msp430f5257\",2,8 },\n+  { \"msp430f5258\",2,8 },\n+  { \"msp430f5259\",2,8 },\n+  { \"msp430f5304\",2,8 },\n+  { \"msp430f5308\",2,8 },\n+  { \"msp430f5309\",2,8 },\n+  { \"msp430f5310\",2,8 },\n+  { \"msp430f5324\",2,8 },\n+  { \"msp430f5325\",2,8 },\n+  { \"msp430f5326\",2,8 },\n+  { \"msp430f5327\",2,8 },\n+  { \"msp430f5328\",2,8 },\n+  { \"msp430f5329\",2,8 },\n+  { \"msp430f5333\",2,8 },\n+  { \"msp430f5335\",2,8 },\n+  { \"msp430f5336\",2,8 },\n+  { \"msp430f5338\",2,8 },\n+  { \"msp430f5340\",2,8 },\n+  { \"msp430f5341\",2,8 },\n+  { \"msp430f5342\",2,8 },\n+  { \"msp430f5358\",2,8 },\n+  { \"msp430f5359\",2,8 },\n+  { \"msp430f5418\",2,8 },\n+  { \"msp430f5418a\",2,8 },\n+  { \"msp430f5419\",2,8 },\n+  { \"msp430f5419a\",2,8 },\n+  { \"msp430f5435\",2,8 },\n+  { \"msp430f5435a\",2,8 },\n+  { \"msp430f5436\",2,8 },\n+  { \"msp430f5436a\",2,8 },\n+  { \"msp430f5437\",2,8 },\n+  { \"msp430f5437a\",2,8 },\n+  { \"msp430f5438\",2,8 },\n+  { \"msp430f5438a\",2,8 },\n+  { \"msp430f5500\",2,8 },\n+  { \"msp430f5501\",2,8 },\n+  { \"msp430f5502\",2,8 },\n+  { \"msp430f5503\",2,8 },\n+  { \"msp430f5504\",2,8 },\n+  { \"msp430f5505\",2,8 },\n+  { \"msp430f5506\",2,8 },\n+  { \"msp430f5507\",2,8 },\n+  { \"msp430f5508\",2,8 },\n+  { \"msp430f5509\",2,8 },\n+  { \"msp430f5510\",2,8 },\n+  { \"msp430f5513\",2,8 },\n+  { \"msp430f5514\",2,8 },\n+  { \"msp430f5515\",2,8 },\n+  { \"msp430f5517\",2,8 },\n+  { \"msp430f5519\",2,8 },\n+  { \"msp430f5521\",2,8 },\n+  { \"msp430f5522\",2,8 },\n+  { \"msp430f5524\",2,8 },\n+  { \"msp430f5525\",2,8 },\n+  { \"msp430f5526\",2,8 },\n+  { \"msp430f5527\",2,8 },\n+  { \"msp430f5528\",2,8 },\n+  { \"msp430f5529\",2,8 },\n+  { \"msp430f5630\",2,8 },\n+  { \"msp430f5631\",2,8 },\n+  { \"msp430f5632\",2,8 },\n+  { \"msp430f5633\",2,8 },\n+  { \"msp430f5634\",2,8 },\n+  { \"msp430f5635\",2,8 },\n+  { \"msp430f5636\",2,8 },\n+  { \"msp430f5637\",2,8 },\n+  { \"msp430f5638\",2,8 },\n+  { \"msp430f5658\",2,8 },\n+  { \"msp430f5659\",2,8 },\n+  { \"msp430f5xx_6xxgeneric\",2,8 },\n+  { \"msp430f6433\",2,8 },\n+  { \"msp430f6435\",2,8 },\n+  { \"msp430f6436\",2,8 },\n+  { \"msp430f6438\",2,8 },\n+  { \"msp430f6458\",2,8 },\n+  { \"msp430f6459\",2,8 },\n+  { \"msp430f6630\",2,8 },\n+  { \"msp430f6631\",2,8 },\n+  { \"msp430f6632\",2,8 },\n+  { \"msp430f6633\",2,8 },\n+  { \"msp430f6634\",2,8 },\n+  { \"msp430f6635\",2,8 },\n+  { \"msp430f6636\",2,8 },\n+  { \"msp430f6637\",2,8 },\n+  { \"msp430f6638\",2,8 },\n+  { \"msp430f6658\",2,8 },\n+  { \"msp430f6659\",2,8 },\n+  { \"msp430f6720\",2,8 },\n+  { \"msp430f6720a\",2,8 },\n+  { \"msp430f6721\",2,8 },\n+  { \"msp430f6721a\",2,8 },\n+  { \"msp430f6723\",2,8 },\n+  { \"msp430f6723a\",2,8 },\n+  { \"msp430f6724\",2,8 },\n+  { \"msp430f6724a\",2,8 },\n+  { \"msp430f6725\",2,8 },\n+  { \"msp430f6725a\",2,8 },\n+  { \"msp430f6726\",2,8 },\n+  { \"msp430f6726a\",2,8 },\n+  { \"msp430f6730\",2,8 },\n+  { \"msp430f6730a\",2,8 },\n+  { \"msp430f6731\",2,8 },\n+  { \"msp430f6731a\",2,8 },\n+  { \"msp430f6733\",2,8 },\n+  { \"msp430f6733a\",2,8 },\n+  { \"msp430f6734\",2,8 },\n+  { \"msp430f6734a\",2,8 },\n+  { \"msp430f6735\",2,8 },\n+  { \"msp430f6735a\",2,8 },\n+  { \"msp430f6736\",2,8 },\n+  { \"msp430f6736a\",2,8 },\n+  { \"msp430f6745\",2,8 },\n+  { \"msp430f67451\",2,8 },\n+  { \"msp430f67451a\",2,8 },\n+  { \"msp430f6745a\",2,8 },\n+  { \"msp430f6746\",2,8 },\n+  { \"msp430f67461\",2,8 },\n+  { \"msp430f67461a\",2,8 },\n+  { \"msp430f6746a\",2,8 },\n+  { \"msp430f6747\",2,8 },\n+  { \"msp430f67471\",2,8 },\n+  { \"msp430f67471a\",2,8 },\n+  { \"msp430f6747a\",2,8 },\n+  { \"msp430f6748\",2,8 },\n+  { \"msp430f67481\",2,8 },\n+  { \"msp430f67481a\",2,8 },\n+  { \"msp430f6748a\",2,8 },\n+  { \"msp430f6749\",2,8 },\n+  { \"msp430f67491\",2,8 },\n+  { \"msp430f67491a\",2,8 },\n+  { \"msp430f6749a\",2,8 },\n+  { \"msp430f67621\",2,8 },\n+  { \"msp430f67621a\",2,8 },\n+  { \"msp430f67641\",2,8 },\n+  { \"msp430f67641a\",2,8 },\n+  { \"msp430f6765\",2,8 },\n+  { \"msp430f67651\",2,8 },\n+  { \"msp430f67651a\",2,8 },\n+  { \"msp430f6765a\",2,8 },\n+  { \"msp430f6766\",2,8 },\n+  { \"msp430f67661\",2,8 },\n+  { \"msp430f67661a\",2,8 },\n+  { \"msp430f6766a\",2,8 },\n+  { \"msp430f6767\",2,8 },\n+  { \"msp430f67671\",2,8 },\n+  { \"msp430f67671a\",2,8 },\n+  { \"msp430f6767a\",2,8 },\n+  { \"msp430f6768\",2,8 },\n+  { \"msp430f67681\",2,8 },\n+  { \"msp430f67681a\",2,8 },\n+  { \"msp430f6768a\",2,8 },\n+  { \"msp430f6769\",2,8 },\n+  { \"msp430f67691\",2,8 },\n+  { \"msp430f67691a\",2,8 },\n+  { \"msp430f6769a\",2,8 },\n+  { \"msp430f6775\",2,8 },\n+  { \"msp430f67751\",2,8 },\n+  { \"msp430f67751a\",2,8 },\n+  { \"msp430f6775a\",2,8 },\n+  { \"msp430f6776\",2,8 },\n+  { \"msp430f67761\",2,8 },\n+  { \"msp430f67761a\",2,8 },\n+  { \"msp430f6776a\",2,8 },\n+  { \"msp430f6777\",2,8 },\n+  { \"msp430f67771\",2,8 },\n+  { \"msp430f67771a\",2,8 },\n+  { \"msp430f6777a\",2,8 },\n+  { \"msp430f6778\",2,8 },\n+  { \"msp430f67781\",2,8 },\n+  { \"msp430f67781a\",2,8 },\n+  { \"msp430f6778a\",2,8 },\n+  { \"msp430f6779\",2,8 },\n+  { \"msp430f67791\",2,8 },\n+  { \"msp430f67791a\",2,8 },\n+  { \"msp430f6779a\",2,8 },\n+  { \"msp430fe423\",0,0 },\n+  { \"msp430fe4232\",0,0 },\n+  { \"msp430fe423a\",0,0 },\n+  { \"msp430fe4242\",0,0 },\n+  { \"msp430fe425\",0,0 },\n+  { \"msp430fe4252\",0,0 },\n+  { \"msp430fe425a\",0,0 },\n+  { \"msp430fe427\",0,0 },\n+  { \"msp430fe4272\",0,0 },\n+  { \"msp430fe427a\",0,0 },\n+  { \"msp430fg4250\",0,0 },\n+  { \"msp430fg4260\",0,0 },\n+  { \"msp430fg4270\",0,0 },\n+  { \"msp430fg437\",0,0 },\n+  { \"msp430fg438\",0,0 },\n+  { \"msp430fg439\",0,0 },\n+  { \"msp430fg4616\",1,1 },\n+  { \"msp430fg4617\",1,1 },\n+  { \"msp430fg4618\",1,1 },\n+  { \"msp430fg4619\",1,1 },\n+  { \"msp430fg477\",0,0 },\n+  { \"msp430fg478\",0,0 },\n+  { \"msp430fg479\",0,0 },\n+  { \"msp430fg6425\",2,8 },\n+  { \"msp430fg6426\",2,8 },\n+  { \"msp430fg6625\",2,8 },\n+  { \"msp430fg6626\",2,8 },\n+  { \"msp430fr2032\",2,0 },\n+  { \"msp430fr2033\",2,0 },\n+  { \"msp430fr2433\",2,8 },\n+  { \"msp430fr2xx_4xxgeneric\",2,8 },\n+  { \"msp430fr4131\",2,0 },\n+  { \"msp430fr4132\",2,0 },\n+  { \"msp430fr4133\",2,0 },\n+  { \"msp430fr5720\",2,8 },\n+  { \"msp430fr5721\",2,8 },\n+  { \"msp430fr5722\",2,8 },\n+  { \"msp430fr5723\",2,8 },\n+  { \"msp430fr5724\",2,8 },\n+  { \"msp430fr5725\",2,8 },\n+  { \"msp430fr5726\",2,8 },\n+  { \"msp430fr5727\",2,8 },\n+  { \"msp430fr5728\",2,8 },\n+  { \"msp430fr5729\",2,8 },\n+  { \"msp430fr5730\",2,8 },\n+  { \"msp430fr5731\",2,8 },\n+  { \"msp430fr5732\",2,8 },\n+  { \"msp430fr5733\",2,8 },\n+  { \"msp430fr5734\",2,8 },\n+  { \"msp430fr5735\",2,8 },\n+  { \"msp430fr5736\",2,8 },\n+  { \"msp430fr5737\",2,8 },\n+  { \"msp430fr5738\",2,8 },\n+  { \"msp430fr5739\",2,8 },\n+  { \"msp430fr57xxgeneric\",2,8 },\n+  { \"msp430fr5847\",2,8 },\n+  { \"msp430fr58471\",2,8 },\n+  { \"msp430fr5848\",2,8 },\n+  { \"msp430fr5849\",2,8 },\n+  { \"msp430fr5857\",2,8 },\n+  { \"msp430fr5858\",2,8 },\n+  { \"msp430fr5859\",2,8 },\n+  { \"msp430fr5867\",2,8 },\n+  { \"msp430fr58671\",2,8 },\n+  { \"msp430fr5868\",2,8 },\n+  { \"msp430fr5869\",2,8 },\n+  { \"msp430fr5870\",2,8 },\n+  { \"msp430fr5872\",2,8 },\n+  { \"msp430fr58721\",2,8 },\n+  { \"msp430fr5887\",2,8 },\n+  { \"msp430fr5888\",2,8 },\n+  { \"msp430fr5889\",2,8 },\n+  { \"msp430fr58891\",2,8 },\n+  { \"msp430fr5922\",2,8 },\n+  { \"msp430fr59221\",2,8 },\n+  { \"msp430fr5947\",2,8 },\n+  { \"msp430fr59471\",2,8 },\n+  { \"msp430fr5948\",2,8 },\n+  { \"msp430fr5949\",2,8 },\n+  { \"msp430fr5957\",2,8 },\n+  { \"msp430fr5958\",2,8 },\n+  { \"msp430fr5959\",2,8 },\n+  { \"msp430fr5967\",2,8 },\n+  { \"msp430fr5968\",2,8 },\n+  { \"msp430fr5969\",2,8 },\n+  { \"msp430fr59691\",2,8 },\n+  { \"msp430fr5970\",2,8 },\n+  { \"msp430fr5972\",2,8 },\n+  { \"msp430fr59721\",2,8 },\n+  { \"msp430fr5986\",2,8 },\n+  { \"msp430fr5987\",2,8 },\n+  { \"msp430fr5988\",2,8 },\n+  { \"msp430fr5989\",2,8 },\n+  { \"msp430fr59891\",2,8 },\n+  { \"msp430fr5xx_6xxgeneric\",2,8 },\n+  { \"msp430fr6820\",2,8 },\n+  { \"msp430fr6822\",2,8 },\n+  { \"msp430fr68221\",2,8 },\n+  { \"msp430fr6870\",2,8 },\n+  { \"msp430fr6872\",2,8 },\n+  { \"msp430fr68721\",2,8 },\n+  { \"msp430fr6877\",2,8 },\n+  { \"msp430fr6879\",2,8 },\n+  { \"msp430fr68791\",2,8 },\n+  { \"msp430fr6887\",2,8 },\n+  { \"msp430fr6888\",2,8 },\n+  { \"msp430fr6889\",2,8 },\n+  { \"msp430fr68891\",2,8 },\n+  { \"msp430fr6920\",2,8 },\n+  { \"msp430fr6922\",2,8 },\n+  { \"msp430fr69221\",2,8 },\n+  { \"msp430fr6927\",2,8 },\n+  { \"msp430fr69271\",2,8 },\n+  { \"msp430fr6928\",2,8 },\n+  { \"msp430fr6970\",2,8 },\n+  { \"msp430fr6972\",2,8 },\n+  { \"msp430fr69721\",2,8 },\n+  { \"msp430fr6977\",2,8 },\n+  { \"msp430fr6979\",2,8 },\n+  { \"msp430fr69791\",2,8 },\n+  { \"msp430fr6987\",2,8 },\n+  { \"msp430fr6988\",2,8 },\n+  { \"msp430fr6989\",2,8 },\n+  { \"msp430fr69891\",2,8 },\n+  { \"msp430fw423\",0,0 },\n+  { \"msp430fw425\",0,0 },\n+  { \"msp430fw427\",0,0 },\n+  { \"msp430fw428\",0,0 },\n+  { \"msp430fw429\",0,0 },\n+  { \"msp430g2001\",0,0 },\n+  { \"msp430g2101\",0,0 },\n+  { \"msp430g2102\",0,0 },\n+  { \"msp430g2111\",0,0 },\n+  { \"msp430g2112\",0,0 },\n+  { \"msp430g2113\",0,0 },\n+  { \"msp430g2121\",0,0 },\n+  { \"msp430g2131\",0,0 },\n+  { \"msp430g2132\",0,0 },\n+  { \"msp430g2152\",0,0 },\n+  { \"msp430g2153\",0,0 },\n+  { \"msp430g2201\",0,0 },\n+  { \"msp430g2202\",0,0 },\n+  { \"msp430g2203\",0,0 },\n+  { \"msp430g2210\",0,0 },\n+  { \"msp430g2211\",0,0 },\n+  { \"msp430g2212\",0,0 },\n+  { \"msp430g2213\",0,0 },\n+  { \"msp430g2221\",0,0 },\n+  { \"msp430g2230\",0,0 },\n+  { \"msp430g2231\",0,0 },\n+  { \"msp430g2232\",0,0 },\n+  { \"msp430g2233\",0,0 },\n+  { \"msp430g2252\",0,0 },\n+  { \"msp430g2253\",0,0 },\n+  { \"msp430g2302\",0,0 },\n+  { \"msp430g2303\",0,0 },\n+  { \"msp430g2312\",0,0 },\n+  { \"msp430g2313\",0,0 },\n+  { \"msp430g2332\",0,0 },\n+  { \"msp430g2333\",0,0 },\n+  { \"msp430g2352\",0,0 },\n+  { \"msp430g2353\",0,0 },\n+  { \"msp430g2402\",0,0 },\n+  { \"msp430g2403\",0,0 },\n+  { \"msp430g2412\",0,0 },\n+  { \"msp430g2413\",0,0 },\n+  { \"msp430g2432\",0,0 },\n+  { \"msp430g2433\",0,0 },\n+  { \"msp430g2444\",0,0 },\n+  { \"msp430g2452\",0,0 },\n+  { \"msp430g2453\",0,0 },\n+  { \"msp430g2513\",0,0 },\n+  { \"msp430g2533\",0,0 },\n+  { \"msp430g2544\",0,0 },\n+  { \"msp430g2553\",0,0 },\n+  { \"msp430g2744\",0,0 },\n+  { \"msp430g2755\",0,0 },\n+  { \"msp430g2855\",0,0 },\n+  { \"msp430g2955\",0,0 },\n+  { \"msp430i2020\",0,2 },\n+  { \"msp430i2021\",0,2 },\n+  { \"msp430i2030\",0,2 },\n+  { \"msp430i2031\",0,2 },\n+  { \"msp430i2040\",0,2 },\n+  { \"msp430i2041\",0,2 },\n+  { \"msp430i2xxgeneric\",0,2 },\n+  { \"msp430l092\",0,0 },\n+  { \"msp430p112\",0,0 },\n+  { \"msp430p313\",0,0 },\n+  { \"msp430p315\",0,0 },\n+  { \"msp430p315s\",0,0 },\n+  { \"msp430p325\",0,0 },\n+  { \"msp430p337\",0,1 },\n+  { \"msp430sl5438a\",2,8 },\n+  { \"msp430tch5e\",0,0 },\n+  { \"msp430xgeneric\",2,8 },\n+  { \"rf430f5144\",2,8 },\n+  { \"rf430f5155\",2,8 },\n+  { \"rf430f5175\",2,8 },\n+  { \"rf430frl152h\",0,0 },\n+  { \"rf430frl152h_rom\",0,0 },\n+  { \"rf430frl153h\",0,0 },\n+  { \"rf430frl153h_rom\",0,0 },\n+  { \"rf430frl154h\",0,0 },\n+  { \"rf430frl154h_rom\",0,0 }\n+};  \n+\n+/* Implement spec function `msp430_hwmult_lib\u00b4.  */\n+\n+const char *\n+msp430_select_hwmult_lib (int argc ATTRIBUTE_UNUSED, const char ** argv ATTRIBUTE_UNUSED)\n+{\n+  int i;\n+\n+  switch (argc)\n+  {\n+  case 1:\n+    if (strcasecmp (argv[0], \"default\"))\n+      error (\"unexpected argument to msp430_select_hwmult_lib: %s\", argv[0]);\n+    break;\n+\n+  default:\n+    /* We can get three or more arguments passed to this function.\n+       This happens when the same option is repeated on the command line.\n+       For example:\n+         msp430-elf-gcc -mhwmult=none -mhwmult=16bit foo.c\n+       We have to use the last argument as our selector.  */\n+    if (strcasecmp (argv[0], \"hwmult\") == 0)\n+      {\n+\tstatic struct hwmult_options\n+\t{\n+\t  const char * name;\n+\t  const char * lib;\n+\t} hwmult_options [] =\n+\t{\n+\t  { \"none\", \"-lmul_none\" },\n+\t  { \"auto\", \"-lmul_AUTO\" }, /* Should not see this one... */\n+\t  { \"16bit\", \"-lmul_16\" },\n+\t  { \"32bit\", \"-lmul_32\" },\n+\t  { \"f5series\", \"-lmul_f5\" }\n+\t};\n+\n+\tfor (i = ARRAY_SIZE (hwmult_options); i--;)\n+\t  if (strcasecmp (argv[argc - 1], hwmult_options[i].name) == 0)\n+\t    return hwmult_options[i].lib;\n+      }\n+    else if (strcasecmp (argv[0], \"mcu\") == 0)\n+      {\n+\tfor (i = ARRAY_SIZE (msp430_mcu_data); i--;)\n+\t  if (strcasecmp (argv[argc - 1], msp430_mcu_data[i].name) == 0)\n+\t    {\n+\t      switch (msp430_mcu_data[i].hwmpy)\n+\t\t{\n+\t\tcase 0: return \"-lmul_none\";\n+\t\tcase 2:\n+\t\tcase 1: return \"-lmul_16\";\n+\t\tcase 4: return \"-lmul_32\";\n+\t\tcase 8: return \"-lmul_f5\";\n+\t\tdefault:\n+\t\t  error (\"unrecognised hwpy field in msp430_mcu_data[%d]: %d\",\n+\t\t\t i, msp430_mcu_data[i].hwmpy);\n+\t\t  break;\n+\t\t}\n+\t    }\n+      }\n+    else\n+      error (\"unexpected first argument to msp430_select_hwmult_lib: %s\", argv[0]);\n+    break;\n+\n+  case 0:\n+    error (\"msp430_select_hwmult_lib needs one or more arguments\");\n+    break;\n+  }\n+  \n+  return \"-lmul_none\";\n+}"}, {"sha": "88301c808ea8afe251ec50b1d274e57fa45ed888", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 91, "deletions": 19, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a9ae287f6d76c60464c57be98550a25b358c34/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a9ae287f6d76c60464c57be98550a25b358c34/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=04a9ae287f6d76c60464c57be98550a25b358c34", "patch": "@@ -90,7 +90,7 @@ msp430_init_machine_status (void)\n #define TARGET_OPTION_OVERRIDE\t\tmsp430_option_override\n \n /* This is a copy of the same data structure found in gas/config/tc-msp430.c\n-   Also another (sort-of) copy can be found in gcc/config/msp430/t-msp430.\n+   Also another (sort-of) copy can be found in gcc/config/msp430/devices-msp430.c\n    Keep these three structures in sync.\n    The data in this structure has been extracted from the devices.csv file\n    released by TI, updated as of 8 October 2015.  */\n@@ -717,44 +717,111 @@ msp430_mcu_name (void)\n   return msp430x ? \"__MSP430XGENERIC__\" : \"__MSP430GENERIC__\";\n }\n \n+static const char *\n+hwmult_name (unsigned int val)\n+{\n+  switch (val)\n+    {\n+    case 0: return \"none\";\n+    case 1: return \"16-bit\";\n+    case 2: return \"16-bit\";\n+    case 4: return \"32-bit\";\n+    case 8: return \"32-bit (5xx)\";\n+    default: gcc_unreachable ();\n+    }\n+}\n+\n static void\n msp430_option_override (void)\n {\n   init_machine_status = msp430_init_machine_status;\n \n   if (target_cpu)\n     {\n+      /* gcc/common/config/msp430-common.c will have\n+\t already canonicalised the string in target_cpu.  */\n       if (strcasecmp (target_cpu, \"msp430x\") == 0)\n \tmsp430x = true;\n       else /* target_cpu == \"msp430\" - already handled by the front end.  */\n \tmsp430x = false;\n     }\n-  /* Note - the front end has already ensured at most\n-     one of target_cpu and target_mcu will be set.  */\n-  else if (target_mcu)\n+\n+  if (target_mcu)\n     {\n       int i;\n \n-      /* If we are given an MCU name, we assume that it supports 430X.\n-\t Then we check to see if it is one of the known MCUs that only\n-\t supports 430.  */\n-      msp430x = true;\n-\n-      /* FIXME: This array is alpha sorted, so we could use a binary search.  */\n+      /* FIXME: If the array were alpha sorted, we could use a binary search.  */\n       for (i = ARRAY_SIZE (msp430_mcu_data); i--;)\n \tif (strcasecmp (msp430_mcu_data[i].name, target_mcu) == 0)\n \t  {\n-\t    msp430x = msp430_mcu_data[i].revision >= 1;\n+\t    bool xisa = msp430_mcu_data[i].revision >= 1; \n+\n+\t    if (msp430_warn_mcu)\n+\t      {\n+\t\tif (target_cpu&& msp430x != xisa)\n+\t\t  warning (0, \"MCU '%s' supports %s ISA but -mcpu option is set to %s\",\n+\t\t\t   target_mcu, xisa ? \"430X\" : \"430\", msp430x ? \"430X\" : \"430\");\n+\n+\t\tif (msp430_mcu_data[i].hwmpy == 0\n+\t\t    && msp430_hwmult_type != AUTO\n+\t\t    && msp430_hwmult_type != NONE)\n+\t\t  warning (0, \"MCU '%s' does not have hardware multiply support, but -mhwmult is set to %s\",\n+\t\t\t   target_mcu,\n+\t\t\t   msp430_hwmult_type == SMALL ? \"16-bit\" : msp430_hwmult_type == LARGE ? \"32-bit\" : \"f5series\");\n+\t\telse if (msp430_hwmult_type == SMALL\n+\t\t    && msp430_mcu_data[i].hwmpy != 1\n+\t\t    && msp430_mcu_data[i].hwmpy != 2 )\n+\t\t  warning (0, \"MCU '%s' supports %s hardware multiply, but -mhwmult is set to 16-bit\",\n+\t\t\t   target_mcu, hwmult_name (msp430_mcu_data[i].hwmpy));\n+\t\telse if (msp430_hwmult_type == LARGE && msp430_mcu_data[i].hwmpy != 4)\n+\t\t  warning (0, \"MCU '%s' supports %s hardware multiply, but -mhwmult is set to 32-bit\",\n+\t\t\t   target_mcu, hwmult_name (msp430_mcu_data[i].hwmpy));\n+\t\telse if (msp430_hwmult_type == F5SERIES && msp430_mcu_data[i].hwmpy != 8)\n+\t\t  warning (0, \"MCU '%s' supports %s hardware multiply, but -mhwmult is set to f5series\",\n+\t\t\t   target_mcu, hwmult_name (msp430_mcu_data[i].hwmpy));\n+\t      }\n+\n+\t    msp430x = xisa;\n \t    break;\n \t  }\n+\n       if (i < 0)\n \t{\n-\t  warning (0, \"Unrecognised MCU name '%s', assuming that it is just a MSP430 with no hardware multiply\",\n-\t\t   target_mcu);\n-\t  msp430x = false;\n+\t  if (msp430_hwmult_type == AUTO)\n+\t    {\n+\t      if (msp430_warn_mcu)\n+\t\t{\n+\t\t  if (target_cpu == NULL)\n+\t\t    warning (0,\n+\t\t\t     \"Unrecognised MCU name '%s', assuming that it is just a MSP430 with no hardware multiply.\\nUse the -mcpu and -mhwmult options to set these explicitly.\",\n+\t\t\t     target_mcu);\n+\t\t  else\n+\t\t    warning (0,\n+\t\t\t     \"Unrecognised MCU name '%s', assuming that it has no hardware multiply.\\nUse the -mhwmult option to set this explicitly.\",\n+\t\t\t     target_mcu);\n+\t\t}\n+\n+\t      msp430_hwmult_type = NONE;\n+\t    }\n+\t  else if (target_cpu == NULL)\n+\t    {\n+\t      if (msp430_warn_mcu)\n+\t\twarning (0,\n+\t\t\t \"Unrecognised MCU name '%s', assuming that it just supports the MSP430 ISA.\\nUse the -mcpu option to set the ISA explicitly.\",\n+\t\t\t target_mcu);\n+\n+\t      msp430x = false;\n+\t    }\n+\t  else if (msp430_warn_mcu)\n+\t    warning (0,\n+\t\t     \"Unrecognised MCU name '%s'.\", target_mcu);\n \t}\n     }\n \n+  /* The F5 series are all able to support the 430X ISA.  */\n+  if (target_cpu == NULL && target_mcu == NULL && msp430_hwmult_type == F5SERIES)\n+    msp430x = true;\n+\n   if (TARGET_LARGE && !msp430x)\n     error (\"-mlarge requires a 430X-compatible -mmcu=\");\n \n@@ -955,7 +1022,8 @@ msp430_addr_space_pointer_mode (addr_space_t addrspace)\n static machine_mode\n msp430_unwind_word_mode (void)\n {\n-  return TARGET_LARGE ? PSImode : HImode;\n+  /* This needs to match msp430_init_dwarf_reg_sizes_extra (below).  */\n+  return msp430x ? PSImode : HImode;\n }\n \n /* Determine if one named address space is a subset of another.  */\n@@ -1930,7 +1998,7 @@ const struct attribute_spec msp430_attribute_table[] =\n   { ATTR_NOINIT,      0, 0, true,  false, false, msp430_data_attr, false },\n   { ATTR_PERSIST,     0, 0, true,  false, false, msp430_data_attr, false },\n \n-  { NULL,             0, 0, false, false, false, NULL,        false }\n+  { NULL,             0, 0, false, false, false, NULL, false }\n };\n \n #undef  TARGET_ASM_FUNCTION_PROLOGUE\n@@ -2795,6 +2863,7 @@ msp430_init_dwarf_reg_sizes_extra (tree address)\n   rtx addr = expand_normal (address);\n   rtx mem = gen_rtx_MEM (BLKmode, addr);\n \n+  /* This needs to match msp430_unwind_word_mode (above).  */\n   if (!msp430x)\n     return;\n \n@@ -3089,8 +3158,8 @@ static const struct\n   { \"__divsi3\", \"__mspabi_divli\" },\n   { \"__divdi3\", \"__mspabi_divlli\" },\n   { \"__udivhi3\", \"__mspabi_divu\" },\n-  { \"__udivsi3\", \"__mspabi_divlu\" },\n-  { \"__udivdi3\", \"__mspabi_divllu\" },\n+  { \"__udivsi3\", \"__mspabi_divul\" },\n+  { \"__udivdi3\", \"__mspabi_divull\" },\n   { \"__modhi3\", \"__mspabi_remi\" },\n   { \"__modsi3\", \"__mspabi_remli\" },\n   { \"__moddi3\", \"__mspabi_remlli\" },\n@@ -3186,9 +3255,12 @@ msp430_no_hwmult (void)\n   if (msp430_hwmult_type == NONE)\n     return true;\n \n-  if (target_mcu == NULL || msp430_hwmult_type != AUTO)\n+  if (msp430_hwmult_type != AUTO)\n     return false;\n \n+  if (target_mcu == NULL)\n+    return true;\n+\n   if (target_mcu == cached_match)\n     return cached_result;\n "}, {"sha": "c638f2f0dbcfe2322f65f958d2e8e4eb17934559", "filename": "gcc/config/msp430/msp430.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a9ae287f6d76c60464c57be98550a25b358c34/gcc%2Fconfig%2Fmsp430%2Fmsp430.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a9ae287f6d76c60464c57be98550a25b358c34/gcc%2Fconfig%2Fmsp430%2Fmsp430.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.h?ref=04a9ae287f6d76c60464c57be98550a25b358c34", "patch": "@@ -65,13 +65,37 @@ extern bool msp430x;\n    is enabled  (the GDB testsuite relies upon unused entities not being deleted).  */\n #define LINK_SPEC \"%{mrelax:--relax} %{mlarge:%{!r:%{!g:--gc-sections}}}\"\n \n+extern const char * msp430_select_hwmult_lib (int, const char **);\n+# define EXTRA_SPEC_FUNCTIONS\t\t\t\t\\\n+  { \"msp430_hwmult_lib\", msp430_select_hwmult_lib },\n+\n+/* Specify the libraries to include on the linker command line.\n+\n+   Selecting the hardware multiply library to use is quite complex.\n+   If the user has specified -mhwmult=FOO then the mapping is quite\n+   easy (and could be handled here in the SPEC string), unless FOO\n+   is set to AUTO.  In this case the -mmcu= option must be consulted\n+   instead.  If the -mhwmult= option is not specified then the -mmcu=\n+   option must then be examined.  If neither -mhwmult= nor -mmcu= are\n+   specified then a default hardware multiply library is used.\n+\n+   Examining the -mmcu=FOO option is difficult, and it is so this\n+   reason that a spec function is used.  There are so many possible\n+   values of FOO that a table is used to look up the name and map\n+   it to a hardware multiply library.  This table (in device-msp430.c)\n+   must be kept in sync with the same table in msp430.c.  */\n #undef  LIB_SPEC\n #define LIB_SPEC \"\t\t\t\t\t\\\n --start-group\t\t\t\t\t\t\\\n+%{mhwmult=auto:%{mmcu=*:%:msp430_hwmult_lib(mcu %{mmcu=*:%*});:%:msp430_hwmult_lib(default)}; \\\n+  mhwmult=*:%:msp430_hwmult_lib(hwmult %{mhwmult=*:%*}); \\\n+  mmcu=*:%:msp430_hwmult_lib(mcu %{mmcu=*:%*});\t\t\\\n+  :%:msp430_hwmult_lib(default)}\t\t\t\\\n -lc\t\t\t\t\t\t\t\\\n -lgcc\t\t\t\t\t\t\t\\\n -lcrt\t\t\t\t\t\t\t\\\n %{msim:-lsim}\t\t\t\t\t\t\\\n+%{!msim:-lnosys}\t\t\t\t\t\\\n --end-group\t\t\t\t\t   \t\\\n %{!T*:%{!msim:%{mmcu=*:--script=%*.ld}}}\t\t\\\n %{!T*:%{!msim:%{!mmcu=*:%Tmsp430.ld}}}\t\t\t\\"}, {"sha": "51e38f5b60bd8640e78bdf996f4b6911a1437504", "filename": "gcc/config/msp430/msp430.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a9ae287f6d76c60464c57be98550a25b358c34/gcc%2Fconfig%2Fmsp430%2Fmsp430.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a9ae287f6d76c60464c57be98550a25b358c34/gcc%2Fconfig%2Fmsp430%2Fmsp430.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.opt?ref=04a9ae287f6d76c60464c57be98550a25b358c34", "patch": "@@ -10,6 +10,10 @@ mmcu=\n Target Report ToLower Joined RejectNegative Var(target_mcu)\n Specify the MCU to build for.\n \n+mwarn-mcu\n+Target Report Var(msp430_warn_mcu) Init(1)\n+Warn if an MCU name is unrecognised or conflicts with other options (default: on).\n+\n mcpu=\n Target Report Joined RejectNegative Var(target_cpu)\n Specify the ISA to build for: msp430, msp430x, msp430xv2."}, {"sha": "01e6d4cfa344203c0ebb5c18ad2e86862ed68b7e", "filename": "gcc/config/msp430/t-msp430", "status": "modified", "additions": 4, "deletions": 530, "changes": 534, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a9ae287f6d76c60464c57be98550a25b358c34/gcc%2Fconfig%2Fmsp430%2Ft-msp430", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a9ae287f6d76c60464c57be98550a25b358c34/gcc%2Fconfig%2Fmsp430%2Ft-msp430", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Ft-msp430?ref=04a9ae287f6d76c60464c57be98550a25b358c34", "patch": "@@ -18,6 +18,10 @@\n # License along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n+driver-msp430.o: $(srcdir)/config/msp430/driver-msp430.c \\\n+  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n+\n # Enable multilibs:\n \n MULTILIB_OPTIONS    = mcpu=msp430 mlarge \n@@ -259,536 +263,6 @@ MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f4794\n MULTILIB_EXCEPTIONS = mcpu=msp430/mlarge\n \n \n-# Multilibs for different types of hardware multiply support:\n-\n-MULTILIB_OPTIONS   += mhwmult=none/mhwmult=32bit/mhwmult=f5series\n-MULTILIB_DIRNAMES  +=        nomul         32mul         f5mul\n-\n-MULTILIB_EXCEPTIONS += mcpu=msp430/mlarge/mhwmult=none\n-MULTILIB_EXCEPTIONS += mcpu=msp430/mlarge/mhwmult=32bit\n-MULTILIB_EXCEPTIONS += mcpu=msp430/mlarge/mhwmult=f5series\n-MULTILIB_EXCEPTIONS += mcpu=msp430/mhwmult=f5series\n-\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430c091\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430c092\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430c111\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430c1111\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430c112\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430c1121\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430c1331\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430c1351\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430c311s\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430c312\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430c313\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430c314\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430c315\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430c323\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430c325\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430c412\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430c413\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430e112\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430e313\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430e315\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430e325\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f110\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f1101\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f1101a\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f1111\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f1111a\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f112\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f1121\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f1121a\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f1122\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f1132\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f122\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f1222\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f123\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f1232\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f133\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f135\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f155\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f156\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f157\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f2001\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f2002\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f2003\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f2011\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f2012\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f2013\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f2101\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f2111\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f2112\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f2121\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f2122\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f2131\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f2132\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f2232\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f2234\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f2252\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f2254\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f2272\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f2274\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f412\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f413\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f4132\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f415\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f4152\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f417\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f4250\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f4260\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f4270\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f435\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f4351\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f436\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f4361\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f437\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f4371\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f438\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f439\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f477\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f478\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430f479\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430fe423\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430fe4232\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430fe423a\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430fe4242\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430fe425\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430fe4252\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430fe425a\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430fe427\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430fe4272\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430fe427a\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430fg4250\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430fg4260\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430fg4270\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430fg437\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430fg438\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430fg439\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430fg477\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430fg478\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430fg479\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430fr2032\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430fr2033\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430fr4131\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430fr4132\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430fr4133\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430fw423\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430fw425\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430fw427\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430fw428\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430fw429\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2001\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2101\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2102\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2111\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2112\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2113\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2121\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2131\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2132\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2152\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2153\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2201\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2202\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2203\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2210\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2211\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2212\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2213\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2221\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2230\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2231\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2232\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2233\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2252\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2253\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2302\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2303\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2312\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2313\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2332\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2333\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2352\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2353\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2402\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2403\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2412\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2413\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2432\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2433\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2444\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2452\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2453\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2513\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2533\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2544\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2553\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2744\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2755\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2855\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430g2955\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430l092\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430p112\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430p313\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430p315\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430p315s\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430p325\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?msp430tch5e\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?rf430frl152h\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?rf430frl152h_rom\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?rf430frl153h\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?rf430frl153h_rom\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?rf430frl154h\n-MULTILIB_MATCHES   += mhwmult?none=mmcu?rf430frl154h_rom\n-\n-MULTILIB_MATCHES   += mhwmult?32bit=mmcu?msp430f47126\n-MULTILIB_MATCHES   += mhwmult?32bit=mmcu?msp430f47127\n-MULTILIB_MATCHES   += mhwmult?32bit=mmcu?msp430f47163\n-MULTILIB_MATCHES   += mhwmult?32bit=mmcu?msp430f47166\n-MULTILIB_MATCHES   += mhwmult?32bit=mmcu?msp430f47167\n-MULTILIB_MATCHES   += mhwmult?32bit=mmcu?msp430f47173\n-MULTILIB_MATCHES   += mhwmult?32bit=mmcu?msp430f47176\n-MULTILIB_MATCHES   += mhwmult?32bit=mmcu?msp430f47177\n-MULTILIB_MATCHES   += mhwmult?32bit=mmcu?msp430f47183\n-MULTILIB_MATCHES   += mhwmult?32bit=mmcu?msp430f47186\n-MULTILIB_MATCHES   += mhwmult?32bit=mmcu?msp430f47187\n-MULTILIB_MATCHES   += mhwmult?32bit=mmcu?msp430f47193\n-MULTILIB_MATCHES   += mhwmult?32bit=mmcu?msp430f47196\n-MULTILIB_MATCHES   += mhwmult?32bit=mmcu?msp430f47197\n-MULTILIB_MATCHES   += mhwmult?32bit=mmcu?msp430f4783\n-MULTILIB_MATCHES   += mhwmult?32bit=mmcu?msp430f4784\n-MULTILIB_MATCHES   += mhwmult?32bit=mmcu?msp430f4793\n-MULTILIB_MATCHES   += mhwmult?32bit=mmcu?msp430f4794\n-\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?cc430f5123\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?cc430f5125\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?cc430f5133\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?cc430f5135\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?cc430f5137\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?cc430f5143\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?cc430f5145\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?cc430f5147\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?cc430f6125\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?cc430f6126\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?cc430f6127\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?cc430f6135\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?cc430f6137\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?cc430f6143\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?cc430f6145\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?cc430f6147\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430bt5190\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5131\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5132\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5151\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5152\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5171\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5172\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5212\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5213\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5214\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5217\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5218\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5219\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5222\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5223\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5224\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5227\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5228\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5229\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5232\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5234\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5237\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5239\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5242\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5244\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5247\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5249\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5252\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5253\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5254\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5255\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5256\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5257\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5258\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5259\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5304\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5308\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5309\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5310\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5324\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5325\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5326\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5327\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5328\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5329\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5333\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5335\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5336\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5338\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5340\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5341\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5342\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5358\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5359\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5418\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5418a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5419\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5419a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5435\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5435a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5436\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5436a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5437\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5437a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5438\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5438a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5500\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5501\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5502\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5503\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5504\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5505\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5506\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5507\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5508\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5509\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5510\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5513\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5514\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5515\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5517\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5519\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5521\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5522\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5524\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5525\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5526\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5527\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5528\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5529\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5630\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5631\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5632\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5633\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5634\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5635\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5636\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5637\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5638\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5658\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5659\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f5xx_6xxgeneric\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6433\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6435\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6436\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6438\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6458\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6459\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6630\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6631\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6632\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6633\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6634\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6635\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6636\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6637\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6638\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6658\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6659\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6720\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6720a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6721\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6721a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6723\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6723a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6724\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6724a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6725\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6725a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6726\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6726a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6730\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6730a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6731\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6731a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6733\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6733a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6734\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6734a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6735\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6735a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6736\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6736a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6745\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f67451\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f67451a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6745a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6746\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f67461\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f67461a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6746a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6747\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f67471\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f67471a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6747a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6748\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f67481\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f67481a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6748a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6749\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f67491\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f67491a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6749a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f67621\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f67621a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f67641\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f67641a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6765\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f67651\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f67651a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6765a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6766\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f67661\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f67661a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6766a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6767\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f67671\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f67671a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6767a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6768\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f67681\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f67681a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6768a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6769\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f67691\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f67691a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6769a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6775\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f67751\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f67751a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6775a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6776\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f67761\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f67761a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6776a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6777\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f67771\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f67771a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6777a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6778\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f67781\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f67781a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6778a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6779\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f67791\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f67791a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430f6779a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fg6425\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fg6426\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fg6625\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fg6626\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr2433\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr2xx_4xxgeneric\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5720\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5721\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5722\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5723\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5724\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5725\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5726\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5727\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5728\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5729\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5730\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5731\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5732\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5733\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5734\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5735\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5736\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5737\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5738\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5739\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr57xxgeneric\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5847\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr58471\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5848\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5849\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5857\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5858\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5859\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5867\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr58671\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5868\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5869\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5870\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5872\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr58721\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5887\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5888\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5889\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr58891\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5922\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr59221\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5947\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr59471\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5948\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5949\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5957\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5958\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5959\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5967\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5968\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5969\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr59691\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5970\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5972\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr59721\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5986\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5987\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5988\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5989\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr59891\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr5xx_6xxgeneric\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr6820\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr6822\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr68221\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr6870\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr6872\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr68721\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr6877\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr6879\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr68791\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr6887\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr6888\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr6889\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr68891\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr6920\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr6922\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr69221\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr6927\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr69271\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr6928\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr6970\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr6972\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr69721\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr6977\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr6979\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr69791\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr6987\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr6988\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr6989\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430fr69891\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430sl5438a\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?msp430xgeneric\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?rf430f5144\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?rf430f5155\n-MULTILIB_MATCHES   += mhwmult?f5series=mmcu?rf430f5175\n-\n-# FIXME: There are a whole bunch of exceptions to these matches that\n-#  could be added here as well...\n-\n-\n MULTILIB_EXTRA_OPTS =\n \n msp430-c.o: $(srcdir)/config/msp430/msp430-c.c $(RTL_H) $(TREE_H) $(CONFIG_H) $(TM_H)"}, {"sha": "9ce37bbbb44c9645db4010fe98f150ba46f5be30", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a9ae287f6d76c60464c57be98550a25b358c34/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a9ae287f6d76c60464c57be98550a25b358c34/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=04a9ae287f6d76c60464c57be98550a25b358c34", "patch": "@@ -845,6 +845,7 @@ Objective-C and Objective-C++ Dialects}.\n \n @emph{MSP430 Options}\n @gccoptlist{-msim -masm-hex -mmcu= -mcpu= -mlarge -msmall -mrelax @gol\n+-mwarn-mcu @gol\n -mcode-region= -mdata-region= @gol\n -msilicon-errata= -msilicon-errata-warn= @gol\n -mhwmult= -minrt}\n@@ -18510,6 +18511,16 @@ cause the linker to search for a script called @file{xxx.ld}.\n \n This option is also passed on to the assembler.\n \n+@item -mwarn-mcu\n+@itemx -mno-warn-mcu\n+@opindex mwarn-mcu\n+@opindex mno-warn-mcu\n+This option enables or disables warnings about conflicts between the\n+MCU name specified by the @option{-mmcu} option and the ISA set by the\n+@option{-mcpu} option and/or the hardware multiply support set by the\n+@option{-mhwmult} option.  It also toggles warnings about unrecognised\n+MCU names.  This option is on by default.\n+\n @item -mcpu=\n @opindex mcpu=\n Specifies the ISA to use.  Accepted values are @samp{msp430},\n@@ -18544,10 +18555,9 @@ for the original 16-bit-only multiply supported by early MCUs.\n @samp{f5series} for the 16/32-bit multiply supported by F5-series MCUs.\n A value of @samp{auto} can also be given.  This tells GCC to deduce\n the hardware multiply support based upon the MCU name provided by the\n-@option{-mmcu} option.  If no @option{-mmcu} option is specified then\n-@samp{32bit} hardware multiply support is assumed.  If the MCU name is\n-not recognised then no hardware multiply support is assumed.\n-@code{auto} is the default setting.\n+@option{-mmcu} option.  If no @option{-mmcu} option is specified or if\n+the MCU name is not recognised then no hardware multiply support is\n+assumed.  @code{auto} is the default setting.\n \n Hardware multiplies are normally performed by calling a library\n routine.  This saves space in the generated code.  When compiling at"}, {"sha": "2f73100ddafefa94b79558b02d422055c1ff367f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a9ae287f6d76c60464c57be98550a25b358c34/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a9ae287f6d76c60464c57be98550a25b358c34/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=04a9ae287f6d76c60464c57be98550a25b358c34", "patch": "@@ -1,3 +1,12 @@\n+2015-11-25  Nick Clifton  <nickc@redhat.com>\n+\n+\t* gcc.target/msp430/msp_abi_div_funcs.c: New test.\n+\t* gcc.target/msp430/mul_main.h: New test support file.\n+\t* gcc.target/msp430/mul_none.c: New test.\n+\t* gcc.target/msp430/mul_16bit.c: New test.\n+\t* gcc.target/msp430/mul_32bit.c: New test.\n+\t* gcc.target/msp430/mul_f5.c: New test.\n+\n 2015-12-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/68680"}, {"sha": "2b9c9a9521715fa9118ecb6aeebe16410612a5d6", "filename": "gcc/testsuite/c-c++-common/cpp/warning-zero-location.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a9ae287f6d76c60464c57be98550a25b358c34/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fwarning-zero-location.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a9ae287f6d76c60464c57be98550a25b358c34/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fwarning-zero-location.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fwarning-zero-location.c?ref=04a9ae287f6d76c60464c57be98550a25b358c34", "patch": "@@ -5,4 +5,4 @@\n \n #define _GNU_SOURCE \t/* { dg-warning \"redefined\" } */\n \n-/* { dg-message \"\" \"#define _GNU_SOURCE\" {target *-*-* } 0 }\n+/* { dg-message \"\" \"#define _GNU_SOURCE\" {target *-*-* } 0 } */"}, {"sha": "c125ac60c5ad4eedf4b591469ea2a870d96cf6d4", "filename": "gcc/testsuite/gcc.target/msp430/msp_abi_div_funcs.c", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a9ae287f6d76c60464c57be98550a25b358c34/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmsp_abi_div_funcs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a9ae287f6d76c60464c57be98550a25b358c34/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmsp_abi_div_funcs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmsp_abi_div_funcs.c?ref=04a9ae287f6d76c60464c57be98550a25b358c34", "patch": "@@ -0,0 +1,150 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=c99\" } */\n+\n+extern int printf (const char *, ...);\n+extern void abort (void) __attribute__((noreturn));\n+\n+typedef unsigned long uint32;\n+typedef unsigned long long uint64;\n+\n+extern uint32 __mspabi_divul (uint32, uint32);\n+extern uint32 __mspabi_divlu (uint32, uint32);\n+extern uint64 __mspabi_divull (uint64, uint64);\n+extern uint64 __mspabi_divllu (uint64, uint64);\n+\n+uint32 func1 (uint32, uint32) __attribute__ ((noinline));\n+uint32 func2 (uint32, uint32) __attribute__ ((noinline));\n+uint32 func3 (uint32, uint32) __attribute__ ((noinline));\n+uint64 func4 (uint64, uint64) __attribute__ ((noinline));\n+uint64 func5 (uint64, uint64) __attribute__ ((noinline));\n+uint64 func6 (uint64, uint64) __attribute__ ((noinline));\n+\n+\n+#define DEBUG 0\n+\n+int\n+main (void)\n+{\n+  int fail = 0;\n+\n+  if (func1 (7UL, 3UL) != 2UL)\n+    {\n+#if DEBUG\n+      printf (\"FAIL: func1: 7 / 3 returns %lu\\n\", func1 (7UL, 3UL));\n+#endif\n+      ++ fail;\n+    }\n+\n+  if (func2 (7UL, 3UL) != 2UL)\n+    {\n+#if DEBUG\n+      printf (\"FAIL: func2: 7 / 3 returns %lu\\n\", func2 (7UL, 3UL));\n+#endif\n+      ++ fail;\n+    }\n+\n+  if (func3 (7UL, 3UL) != 2UL)\n+    {\n+#if DEBUG\n+      printf (\"FAIL: func4: 7 / 3 returns %lu\\n\", func3 (7UL, 3UL));\n+#endif\n+      ++ fail;\n+    }\n+\n+  if (func4 (7ULL, 3ULL) != 2ULL)\n+    {\n+#if DEBUG\n+      printf (\"FAIL: func4: 7 / 3 returns %llu\\n\", func4 (7ULL, 3ULL));\n+#endif\n+      ++ fail;\n+    }\n+\n+  if (func5 (7ULL, 3ULL) != 2ULL)\n+    {\n+#if DEBUG\n+      printf (\"FAIL: func5: 7 / 3 returns %llu\\n\", func5 (7ULL, 3ULL));\n+#endif\n+      ++ fail;\n+    }\n+\n+  if (func6 (7ULL, 3ULL) != 2ULL)\n+    {\n+#if DEBUG\n+      printf (\"FAIL: func6: 7 / 3 returns %llu\\n\", func6 (7ULL, 3ULL));\n+#endif\n+      ++ fail;\n+    }\n+\n+  if (fail)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* At high levels of optimization gcc will probably fold func1 and func4 into\n+   main, but this does not really matter.  Those two functions are just there\n+   for a sanity check at low levels of optimization.  */\n+\t\t\t      \n+uint32 func1 (uint32 a, uint32 b) { return a / b; }\n+uint32 func2 (uint32 a, uint32 b) { return __mspabi_divul (a, b); }\n+uint32 func3 (uint32 a, uint32 b) { return __mspabi_divlu (a, b); }\n+uint64 func4 (uint64 a, uint64 b) { return a / b; }\n+uint64 func5 (uint64 a, uint64 b) { return __mspabi_divull (a, b); }\n+\n+uint64\n+func6 (uint64 a, uint64 b)\n+{\n+  uint64 ret;\n+\n+  /* This test function is special.  The correctly spelt ABI function\n+     __mspabi_divull takes its first argument in registers R8::R11 and its\n+     second argument in registers R12::R15, but GCC knows that __mspabi_divllu\n+     is not the correct spelling and so it will use the normal function\n+     calling convention - first argument in R12::R15, second argument on the\n+     stack.\n+     \n+     The stub function for __mspabi_divllu in libgcc just does a BRAnch to\n+     the real __mspabi_divull function - it does *not* rearrange the arguments\n+     or pull anything off the stack.  This is correct, because in real code\n+     that calls __mspabi_divllu, compiled by *old* versions of gcc, the\n+     arguments will already be in the special ABI mandated locations.\n+\n+     As a result, in order to test __mspabi_divllu here, we have to put the\n+     arguments into the correct registers ourselves and call __mspabi_divllu\n+     manually.  This does lead to some very inefficient code generation, but\n+     that is not our concern here.  */\n+\n+#ifdef __MSP430X_LARGE__\n+  __asm (\"mov  %A1, r8\\n\\\n+        mov  %B1, r9\\n\\\n+        mov  %C1, r10\\n\\\n+        mov  %D1, r11\\n\\\n+        mov  %A2, r12\\n\\\n+        mov  %B2, r13\\n\\\n+        mov  %C2, r14\\n\\\n+        mov  %D2, r15\\n\\\n+        calla #__mspabi_divllu\\n\\\n+        mov  r12, %A0\\n\\\n+        mov  r13, %B0\\n\\\n+        mov  r14, %C0\\n\\\n+        mov  r15, %D0\\n\"\n+\t     : \"=r\" (ret) : \"r\" (a), \"m\" (b));\n+#else\n+  __asm (\"mov  %A1, r8\\n\\\n+        mov  %B1, r9\\n\\\n+        mov  %C1, r10\\n\\\n+        mov  %D1, r11\\n\\\n+        mov  %A2, r12\\n\\\n+        mov  %B2, r13\\n\\\n+        mov  %C2, r14\\n\\\n+        mov  %D2, r15\\n\\\n+        call #__mspabi_divllu\\n\\\n+        mov  r12, %A0\\n\\\n+        mov  r13, %B0\\n\\\n+        mov  r14, %C0\\n\\\n+        mov  r15, %D0\\n\"\n+\t     : \"=r\" (ret) : \"r\" (a), \"m\" (b));\n+#endif\n+\n+  return ret;\n+}"}, {"sha": "772b1e8fb937125284e1eda94642f3ad94e6d450", "filename": "gcc/testsuite/gcc.target/msp430/mul_16bit.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a9ae287f6d76c60464c57be98550a25b358c34/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmul_16bit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a9ae287f6d76c60464c57be98550a25b358c34/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmul_16bit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmul_16bit.c?ref=04a9ae287f6d76c60464c57be98550a25b358c34", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mhwmult=16bit\" } */\n+\n+#include \"mul_main.h\""}, {"sha": "36d1d9261551c840f083f6a918ba4f94ac79461b", "filename": "gcc/testsuite/gcc.target/msp430/mul_32bit.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a9ae287f6d76c60464c57be98550a25b358c34/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmul_32bit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a9ae287f6d76c60464c57be98550a25b358c34/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmul_32bit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmul_32bit.c?ref=04a9ae287f6d76c60464c57be98550a25b358c34", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mhwmult=32bit\" } */\n+\n+#include \"mul_main.h\""}, {"sha": "ac58afb95b67947242cfd97fa6ebbb84de7c1982", "filename": "gcc/testsuite/gcc.target/msp430/mul_f5.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a9ae287f6d76c60464c57be98550a25b358c34/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmul_f5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a9ae287f6d76c60464c57be98550a25b358c34/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmul_f5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmul_f5.c?ref=04a9ae287f6d76c60464c57be98550a25b358c34", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mhwmult=f5series\" } */\n+\n+#include \"mul_main.h\""}, {"sha": "b45059dd64d65df2b8e39bde2f52396d4b6bf8dc", "filename": "gcc/testsuite/gcc.target/msp430/mul_main.h", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a9ae287f6d76c60464c57be98550a25b358c34/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmul_main.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a9ae287f6d76c60464c57be98550a25b358c34/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmul_main.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmul_main.h?ref=04a9ae287f6d76c60464c57be98550a25b358c34", "patch": "@@ -0,0 +1,83 @@\n+extern void abort (void) __attribute__((noreturn));\n+extern int printf (const char *, ...);\n+\n+int func1 (int, int) __attribute__((noinline));\n+long func2 (int, int)  __attribute__((noinline));\n+long func3 (long, long)  __attribute__((noinline));\n+long long func4 (long, long)  __attribute__((noinline));\n+long long func5 (long long, long long)  __attribute__((noinline));\n+unsigned long func6 (unsigned int, unsigned int)  __attribute__((noinline));\n+unsigned long long func7 (unsigned long, unsigned long)  __attribute__((noinline));\n+\n+#define DEBUG 0\n+\n+int\n+main (void)\n+{\n+  if (func1 (6, 7) != 42)\n+    {\n+#if DEBUG\n+      printf (\"test1 fail: 6 * 7 = %d!\\n\", func1 (6, 7));\n+#endif\n+      abort ();\n+    }\n+\n+  if (func2 (1000, 1000) != 1000000L)\n+    {\n+#if DEBUG\n+      printf (\"test2 fail: 1000 * 1000 = %ld!\\n\", func2 (1000, 1000));\n+#endif\n+      abort ();\n+    }\n+\n+  if (func3 (70000L, -32L) != -2240000L)\n+    {\n+#if DEBUG\n+      printf (\"test3 fail: 70000 * -32 = %ld!\\n\", func3 (70000L, -32L));\n+#endif\n+      abort ();\n+    }\n+\n+  if (func4 (-40L, -80L) != 3200LL)\n+    {\n+#if DEBUG\n+      printf (\"test4 fail: -40 * -80 = %lld!\\n\", func4 (-40L, -80L));\n+#endif\n+      abort ();\n+    }\n+\n+  if (func5(9LL, 9LL) != 81LL)\n+    {\n+#if DEBUG\n+      printf (\"test5 fail: 9 * 9 = %lld!\\n\", func5 (9LL, 9LL));\n+#endif\n+      abort ();\n+    }\n+\n+  if (func6 (-2U, 8U) != 524272LU)\n+    {\n+#if DEBUG\n+      printf (\"test6 fail: -2 * 8 = %lu!\\n\", func6 (-2U, 8U));\n+#endif\n+      abort ();\n+    }\n+\n+  if (func7 (99UL, 101UL) != 9999LLU)\n+    {\n+#if DEBUG\n+      printf (\"test7 fail: 99 * 101 = %llu!\\n\", func7 (99UL, 101UL));\n+#endif\n+      abort ();\n+    }\n+  \n+  return 0;\n+}\n+\n+int func1 (int a, int b) { return a * b; }\n+long func2 (int a, int b) { return (long) a * (long) b; }\n+long func3 (long a, long b) { return a * b; }\n+long long func4 (long a, long b) { return (long long) a * (long long) b; }\n+long long func5 (long long a, long long b) { return a * b; }\n+unsigned long func6 (unsigned int a, unsigned int b) { return (unsigned long) a * (unsigned long) b; }\n+unsigned long long func7 (unsigned long a, unsigned long b) { return (unsigned long long) a * (unsigned long long) b; }\n+"}, {"sha": "d89f2643eb84ca7b23a072c9bebce23423eab661", "filename": "gcc/testsuite/gcc.target/msp430/mul_none.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a9ae287f6d76c60464c57be98550a25b358c34/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmul_none.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a9ae287f6d76c60464c57be98550a25b358c34/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmul_none.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmul_none.c?ref=04a9ae287f6d76c60464c57be98550a25b358c34", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mhwmult=none\" } */\n+\n+#include \"mul_main.h\"\n+"}, {"sha": "003971b0cdc828360a02baf06799112ee8475bb3", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a9ae287f6d76c60464c57be98550a25b358c34/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a9ae287f6d76c60464c57be98550a25b358c34/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=04a9ae287f6d76c60464c57be98550a25b358c34", "patch": "@@ -1,3 +1,18 @@\n+2015-12-04  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/msp430/mpy.c (__mulhi3): Use a faster algorithm.\n+\tAllow for the second argument being negative.\n+\t* config.host (extra_parts): Define for MSP430.  Create separate\n+\tlibraries for each of the hardware multiply formats.\n+\t* config/msp430/lib2hw_mul.S: Build only the multiply routines\n+\tthat are needed.\n+\t* config/msp430/lib2mul.c: Likewise.\n+\t* config/msp430/t-msp430 (LIB2ADD): Remove lib2hw_mul.S.\n+\tAdd rules to build hardware multiply libraries.\n+\t* config/msp430/lib2divSI.c: (__mspabi_divlu): Alias for\n+\t__mspabi_divul function.\n+\t(__mspabi_divllu): New stub function.\n+\n 2015-12-01  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* config/pa/fptr.c (__canonicalize_funcptr_for_compare): Initialize"}, {"sha": "b16f52a54cc12298b6ef8586e747a52846fecdca", "filename": "libgcc/config.host", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a9ae287f6d76c60464c57be98550a25b358c34/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a9ae287f6d76c60464c57be98550a25b358c34/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=04a9ae287f6d76c60464c57be98550a25b358c34", "patch": "@@ -942,6 +942,7 @@ moxie-*-rtems*)\n \t;;\n msp430*-*-elf)\n \ttmake_file=\"$tm_file t-crtstuff t-fdpbit msp430/t-msp430\"\n+        extra_parts=\"$extra_parts libmul_none.a libmul_16.a libmul_32.a libmul_f5.a\"\n \t;;\n nds32*-elf*)\n \t# Basic makefile fragment and extra_parts for crt stuff."}, {"sha": "fa6ac4552e657988d2942c625746a146f07ddc2d", "filename": "libgcc/config/msp430/lib2divSI.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a9ae287f6d76c60464c57be98550a25b358c34/libgcc%2Fconfig%2Fmsp430%2Flib2divSI.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a9ae287f6d76c60464c57be98550a25b358c34/libgcc%2Fconfig%2Fmsp430%2Flib2divSI.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmsp430%2Flib2divSI.c?ref=04a9ae287f6d76c60464c57be98550a25b358c34", "patch": "@@ -40,3 +40,32 @@ typedef int           word_type     __attribute__ ((mode (__word__)));\n #define NAME_MODE\tsi\n \n #include \"msp430-divmod.h\"\n+\n+/* ---------------------------------------------------------------------*/\n+\n+/* There is a typo in the MSP430 ABI document.  It calls the unsigned\n+   long integer division function __mspabi_divlu when it should be\n+   __mspabi_divul.  Likewise the unsigned long long integer division\n+   function is called __mspabi_divllu when it should be __mspabi_divull.\n+\n+   Earlier versions of this toolchain used generate the ABI compliant\n+   names, so in order to support object files built with those tools\n+   we provide stub functions that call the correct routines.  */\n+\n+asm (\".global __mspabi_divlu\\n\\\n+         .set __mspabi_divlu, __mspabi_divul\");\n+\n+/* We cannot use the same trick for __mspabi_divllu as that is defined\n+   in a different file.  Instead we create a stub here.  The cost of\n+   executing the branch instruction will be trivial compared to the\n+   cost of executing a long long division.  */\n+\n+#ifdef __MSP430X_LARGE__\n+asm (\".global __mspabi_divllu\\n\\\n+      __mspabi_divllu:\\n\\\n+           BRA #__mspabi_divull\");\n+#else\n+asm (\".global __mspabi_divllu\\n\\\n+      __mspabi_divllu:\\n\\\n+           BR #__mspabi_divull\");\n+#endif"}, {"sha": "908451d89f29635a913011e2ad03653fd88060fb", "filename": "libgcc/config/msp430/lib2hw_mul.S", "status": "modified", "additions": 179, "deletions": 36, "changes": 215, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a9ae287f6d76c60464c57be98550a25b358c34/libgcc%2Fconfig%2Fmsp430%2Flib2hw_mul.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a9ae287f6d76c60464c57be98550a25b358c34/libgcc%2Fconfig%2Fmsp430%2Flib2hw_mul.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmsp430%2Flib2hw_mul.S?ref=04a9ae287f6d76c60464c57be98550a25b358c34", "patch": "@@ -20,17 +20,42 @@\n ; see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n ; <http://www.gnu.org/licenses/>.\n \n-.macro start_func name\n-\t.pushsection .text.\\name,\"ax\",@progbits\n+\t;;  Macro to start a multiply function.  Each function has three\n+\t;; names, and hence three entry points - although they all go\n+\t;; through the same code.  The first name is the version generated\n+\t;; by GCC.  The second is the MSP430 EABI mandated name for the\n+\t;; *software* version of the function.  The third is the EABI\n+\t;; mandated name for the *hardware* version of the function.\n+\t;; \n+\t;;  Since we are using the hardware and software names to point\n+\t;; to the same code this effectively means that we are mapping\n+\t;; the software function onto the hardware function.  Thus if\n+\t;; the library containing this code is linked into an application\n+\t;; (before the libgcc.a library) *all* multiply functions will\n+\t;; be mapped onto the hardware versions.\n+\t;;\n+\t;;  We construct each function in its own section so that linker\n+\t;; garbage collection can be used to delete any unused functions\n+\t;; from this file.\n+.macro start_func gcc_name eabi_soft_name eabi_hard_name\n+\t.pushsection .text.\\gcc_name,\"ax\",@progbits\n \t.p2align 1\n-\t.global \\name\n-\t.type \\name , @function\n-\\name:\n+\t.global \\eabi_hard_name\n+\t.type \\eabi_hard_name , @function\n+\\eabi_hard_name:\n+\t.global \\eabi_soft_name\n+\t.type \\eabi_soft_name , @function\n+\\eabi_soft_name:\n+\t.global \\gcc_name\n+\t.type \\gcc_name , @function\n+\\gcc_name:\n \tPUSH.W\tsr\t\t\t; Save current interrupt state\n \tDINT\t\t\t\t; Disable interrupts\n \tNOP\t\t\t\t; Account for latency\n .endm\n \n+\n+\t;; End a function started with the start_func macro.\n .macro end_func name\n #ifdef __MSP430X_LARGE__\n \tPOP.W  sr\n@@ -42,6 +67,29 @@\n \t.popsection\n .endm\n \n+\n+\t;; Like the start_func macro except that it is used to\n+\t;; create a false entry point that just jumps to the\n+\t;; software function (implemented elsewhere).\n+.macro fake_func gcc_name  eabi_soft_name  eabi_hard_name\n+ \t.pushsection .text.\\gcc_name,\"ax\",@progbits\n+\t.p2align 1\n+\t.global \\eabi_hard_name\n+\t.type \\eabi_hard_name , @function\n+\\eabi_hard_name:\n+\t.global \\gcc_name\n+\t.type \\gcc_name , @function\n+\\gcc_name:\n+#ifdef __MSP430X_LARGE__\n+\tBRA\t\\eabi_soft_name\n+#else\n+\tBR\t\\eabi_soft_name\n+#endif\n+\t.size \\gcc_name , . - \\gcc_name\n+\t.popsection\n+.endm\n+\n+\n .macro mult16 OP1, OP2, RESULT\n ;* * 16-bit hardware multiply:  int16 = int16 * int16\n ;*  \n@@ -160,7 +208,66 @@\n .endm\n \n \n-;;  First generation MSP430 hardware multiplies ....\n+;; EABI mandated names:\n+;; \n+;; int16 __mspabi_mpyi (int16 x, int16 y)\n+;;            Multiply int by int.\n+;; int16 __mspabi_mpyi_hw (int16 x, int16 y)\n+;;            Multiply int by int. Uses hardware MPY16 or MPY32.\n+;; int16 __mspabi_mpyi_f5hw (int16 x, int16 y)\n+;;            Multiply int by int. Uses hardware MPY32 (F5xx devices and up).\n+;; \n+;; int32 __mspabi_mpyl (int32 x, int32 y);\n+;;  \t      Multiply long by long.\n+;; int32 __mspabi_mpyl_hw (int32 x, int32 y)\n+;; \t      Multiply long by long. Uses hardware MPY16.\n+;; int32 __mspabi_mpyl_hw32 (int32 x, int32 y)\n+;; \t      Multiply long by long. Uses hardware MPY32 (F4xx devices).\n+;; int32 __mspabi_mpyl_f5hw (int32 x, int32 y)\n+;; \t      Multiply long by long. Uses hardware MPY32 (F5xx devices and up).\n+;; \n+;; int64 __mspabi_mpyll (int64 x, int64 y)\n+;; \t      Multiply long long by long long.\n+;; int64 __mspabi_mpyll_hw (int64 x, int64 y)\n+;; \t      Multiply long long by long long. Uses hardware MPY16.\n+;; int64 __mspabi_mpyll_hw32 (int64 x, int64 y)\n+;; \t      Multiply long long by long long. Uses hardware MPY32 (F4xx devices).\n+;; int64 __mspabi_mpyll_f5hw (int64 x, int64 y)\n+;; \t      Multiply long long by long long. Uses hardware MPY32 (F5xx devices and up).\n+;;\n+;; int32 __mspabi_mpysl (int16 x, int16 y)\n+;;            Multiply int by int; result is long.\n+;; int32 __mspabi_mpysl_hw(int16 x, int16 y)\n+;; \t      Multiply int by int; result is long. Uses hardware MPY16 or MPY32\n+;; int32 __mspabi_mpysl_f5hw(int16 x, int16 y)\n+;; \t      Multiply int by int; result is long. Uses hardware MPY32 (F5xx devices and up).\n+;; \n+;; int64 __mspabi_mpysll(int32 x, int32 y)\n+;;            Multiply long by long; result is long long.\n+;; int64 __mspabi_mpysll_hw(int32 x, int32 y)\n+;; \t      Multiply long by long; result is long long. Uses hardware MPY16.\n+;; int64 __mspabi_mpysll_hw32(int32 x, int32 y)\n+;; \t      Multiply long by long; result is long long. Uses hardware MPY32 (F4xx devices).\n+;; int64 __mspabi_mpysll_f5hw(int32 x, int32 y)\n+;; \t      Multiply long by long; result is long long. Uses hardware MPY32 (F5xx devices and up).\n+;; \n+;; uint32 __mspabi_mpyul(uint16 x, uint16 y)\n+;; \t      Multiply unsigned int by unsigned int; result is unsigned long.\n+;; uint32 __mspabi_mpyul_hw(uint16 x, uint16 y)\n+;; \t      Multiply unsigned int by unsigned int; result is unsigned long. Uses hardware MPY16 or MPY32\n+;; uint32 __mspabi_mpyul_f5hw(uint16 x, uint16 y)\n+;; \t      Multiply unsigned int by unsigned int; result is unsigned long. Uses hardware MPY32 (F5xx devices and up).\n+;; \n+;; uint64 __mspabi_mpyull(uint32 x, uint32 y)\n+;; \t      Multiply unsigned long by unsigned long; result is unsigned long long.\n+;; uint64 __mspabi_mpyull_hw(uint32 x, uint32 y)\n+;; \t      Multiply unsigned long by unsigned long; result is unsigned long long. Uses hardware MPY16\n+;; uint64 __mspabi_mpyull_hw32(uint32 x, uint32 y)\n+;; \t      Multiply unsigned long by unsigned long; result is unsigned long long. Uses hardware MPY32 (F4xx devices).\n+;; uint64 _ _mspabi_mpyull_f5hw(uint32 x, uint32 y)\n+;;            Multiply unsigned long by unsigned long; result is unsigned long long. Uses hardware MPY32 (F5xx devices and up)\n+\n+\n \n .set MPY_OP1,   0x0130\n .set MPY_OP1_S, 0x0132\n@@ -169,58 +276,94 @@\n .set MAC_OP2, \t0x0138\n .set RESULT_LO, 0x013A\n .set RESULT_HI, 0x013C\n-\t\n-\tstart_func __mulhi2\n+\n+#if defined MUL_16\n+;;  First generation MSP430 hardware multiplies ...\n+\n+\tstart_func __mulhi2 __mspabi_mpyi  __mspabi_mpyi_hw\n \tmult16 MPY_OP1, MPY_OP2, RESULT_LO\n-\tend_func __mulhi2\n+\tend_func   __mulhi2\n \n-\tstart_func __mulsihi2\n+\tstart_func __mulsihi2  __mspabi_mpysl  __mspabi_mpysl_hw\n \tmult1632 MPY_OP1_S, MPY_OP2, RESULT_LO, RESULT_HI\n-\tend_func __mulsihi2\n+\tend_func   __mulsihi2\n \n-\tstart_func __umulsihi2\n+\tstart_func __umulsihi2  __mspabi_mpyul  _mspabi_mpyul_hw\n \tmult1632 MPY_OP1, MPY_OP2, RESULT_LO, RESULT_HI\n-\tend_func __umulsihi2\n+\tend_func   __umulsihi2\n \n-\tstart_func __mulsi2\n+\tstart_func __mulsi2  __mspabi_mpyl  __mspabi_mpyl_hw\n \tmult32 MPY_OP1, MPY_OP2, MAC_OP1, MAC_OP2, RESULT_LO, RESULT_HI\n-\tend_func __mulsi2\n+\tend_func   __mulsi2\n \n-\tstart_func __mulsi2_hw32\n+\t;; FIXME: We do not have hardware implementations of these\n+\t;; routines, so just jump to the software versions instead.\n+\tfake_func __muldisi2   __mspabi_mpysll  __mspabi_mpysll_hw   \n+\tfake_func __umuldisi2  __mspabi_mpyull  __mspabi_mpyull_hw  \n+\tfake_func __muldi3     __mspabi_mpyll   __mspabi_mpyll_hw\t\n+\n+#elif defined MUL_32\n+;;  Second generation MSP430 hardware multiplies ...\n+\n+\tstart_func __mulhi2  __mspabi_mpyi  __mspabi_mpyi_hw\n+\tmult16 MPY_OP1, MPY_OP2, RESULT_LO\n+\tend_func   __mulhi2\n+\n+\tstart_func __mulsihi2  __mspabi_mpysl  __mspabi_mpysl_hw\n+\tmult1632 MPY_OP1_S, MPY_OP2, RESULT_LO, RESULT_HI\n+\tend_func   __mulsihi2\n+\n+\tstart_func __umulsihi2  __mspabi_mpyul  _mspabi_mpyul_hw\n+\tmult1632 MPY_OP1, MPY_OP2, RESULT_LO, RESULT_HI\n+\tend_func   __umulsihi2\n+\n+\tstart_func __mulsi2_hw32  __mspabi_mpyl  __mspabi_mpyl_hw32\n \tmult32_hw 0x0140, 0x0142, 0x0150, 0x0152, 0x0154, 0x0156\n-\tend_func __mulsi2_hw32\n+\tend_func   __mulsi2_hw32\n \n-\tstart_func __muldisi2_hw32\n+\tstart_func __muldisi2  __mspabi_mpysll  __mspabi_mpysll_hw32\n \tmult3264_hw 0x0144, 0x146, 0x0150, 0x0152, 0x0154, 0x0156, 0x0158, 0x015A\n-\tend_func __muldisi2_hw32\n+\tend_func   __muldisi2\n \n-\tstart_func __umuldisi2_hw32\n+\tstart_func __umuldisi2 __mspabi_mpyull  __mspabi_mpyull_hw32\n \tmult3264_hw 0x0140, 0x142, 0x0150, 0x0152, 0x0154, 0x0156, 0x0158, 0x015A\n-\tend_func __umuldisi2_hw32\n-\t\n-/* The F5xxx series of MCUs support the same 16-bit hardware\n-   multiply, but it is accessed from different memory registers.  */\n+\tend_func   __umuldisi2\n+\n+\t;; FIXME: Add a hardware version of this function.\n+\tfake_func __muldi3    __mspabi_mpyll  __mspabi_mpyll_hw32 \n \t\n-\tstart_func __mulhi2_f5\n+#elif defined MUL_F5\n+/* The F5xxx series of MCUs support the same 16-bit and 32-bit multiply\n+   as the second generation hardware, but they are accessed from different\n+   memory registers.  */\n+\n+\tstart_func __mulhi2_f5 __mspabi_mpyi  __mspabi_mpyi_f5hw\n \tmult16 0x04C0, 0x04C8, 0x04CA\n-\tend_func __mulhi2_f5\n+\tend_func   __mulhi2_f5\n \n-\tstart_func __mulsihi2_f5\n+\tstart_func __mulsihi2  __mspabi_mpysl  __mspabi_mpysl_f5hw\n \tmult1632 0x04C2, 0x04C8, 0x04CA, 0x04CC\n-\tend_func __mulsihi2_f5\n+\tend_func   __mulsihi2\n \t\n-\tstart_func __umulsihi2_f5\n+\tstart_func __umulsihi2  __mspabi_mpyul  _mspabi_mpyul_f5hw\n \tmult1632 0x04C0, 0x04C8, 0x04CA, 0x04CC\n-\tend_func __umulsihi2_f5\n+\tend_func   __umulsihi2\n \n-\tstart_func __mulsi2_f5\n+\tstart_func __mulsi2_f5  __mspabi_mpyl  __mspabi_mpyl_f5hw\n \tmult32_hw 0x04D0, 0x04D2, 0x04E0, 0x04E2, 0x04E4, 0x04E6\n-\tend_func __mulsi2_f5\n+\tend_func   __mulsi2_f5\n \t\n-\tstart_func __muldisi2_f5\n+\tstart_func __muldisi2  __mspabi_mpysll  __mspabi_mpysll_f5hw\n \tmult3264_hw 0x04D4, 0x04D6, 0x04E0, 0x04E2, 0x04E4, 0x04E6, 0x04E8, 0x04EA\n-\tend_func __muldisi2_f5\n+\tend_func   __muldisi2\n \t\n-\tstart_func __umuldisi2_f5\n+\tstart_func __umuldisi2  __mspabi_mpyull  __mspabi_mpyull_f5hw\n \tmult3264_hw 0x04D0, 0x04D2, 0x04E0, 0x04E2, 0x04E4, 0x04E6, 0x04E8, 0x04EA\n-\tend_func __umuldisi2_f5\n+\tend_func   __umuldisi2\n+\n+\t;; FIXME: Add a hardware version of this function.\n+\tfake_func __muldi3   __mspabi_mpyll __mspabi_mpyll_f5hw \n+\n+#else\n+#error MUL type not defined\n+#endif"}, {"sha": "3aa0f924fa65fd49e509e2c08558e0a69c5f10da", "filename": "libgcc/config/msp430/lib2mul.c", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a9ae287f6d76c60464c57be98550a25b358c34/libgcc%2Fconfig%2Fmsp430%2Flib2mul.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a9ae287f6d76c60464c57be98550a25b358c34/libgcc%2Fconfig%2Fmsp430%2Flib2mul.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmsp430%2Flib2mul.c?ref=04a9ae287f6d76c60464c57be98550a25b358c34", "patch": "@@ -30,29 +30,44 @@ typedef unsigned int  uint08_type   __attribute__ ((mode (QI)));\n #define C3B(a,b,c) a##b##c\n #define C3(a,b,c) C3B(a,b,c)\n \n+#if defined MUL_NONE\n \n-#define UINT_TYPE\tuint16_type\n-#define BITS_MINUS_1\t15\n-#define NAME_MODE\thi\n-\n-#include \"msp430-mul.h\"\n+/* The software multiply library needs __mspabi_mpyll.  */\n \n #undef UINT_TYPE\n #undef BITS_MINUS_1\n #undef NAME_MODE\n \n-#define UINT_TYPE\tuint08_type\n-#define BITS_MINUS_1\t7\n-#define NAME_MODE\tqi\n+#define UINT_TYPE\tuint32_type\n+#define BITS_MINUS_1\t31\n+#define NAME_MODE\tsi\n \n #include \"msp430-mul.h\"\n \n+#elif defined MUL_16\n+\n+signed long long\n+__mspabi_mpysll (signed long a, signed long b)\n+{\n+  return (signed long long) a * (signed long long) b;\n+}\n+\n+unsigned long long\n+__mspabi_mpyull (unsigned long a, unsigned long b)\n+{\n+  return (unsigned long long) a * (unsigned long long) b;\n+}\n+\n+#else\n+\n #undef UINT_TYPE\n #undef BITS_MINUS_1\n #undef NAME_MODE\n \n-#define UINT_TYPE\tuint32_type\n-#define BITS_MINUS_1\t31\n-#define NAME_MODE\tsi\n+#define UINT_TYPE\tuint08_type\n+#define BITS_MINUS_1\t7\n+#define NAME_MODE\tqi\n \n #include \"msp430-mul.h\"\n+\n+#endif /* MUL_NONE */"}, {"sha": "3842d86fc356fd74966f7e59656d63e9be91e509", "filename": "libgcc/config/msp430/mpy.c", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a9ae287f6d76c60464c57be98550a25b358c34/libgcc%2Fconfig%2Fmsp430%2Fmpy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a9ae287f6d76c60464c57be98550a25b358c34/libgcc%2Fconfig%2Fmsp430%2Fmpy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmsp430%2Fmpy.c?ref=04a9ae287f6d76c60464c57be98550a25b358c34", "patch": "@@ -4,12 +4,23 @@ extern int __mulhi3 (int, int);\n int\n __mulhi3 (int x, int y)\n {\n-  volatile int rv = 0;\n+  char bit;\n+  int neg = 0;\n+  int rv = 0;\n \n-  while (y > 0)\n+  if (y < 0)\n     {\n-      rv += x;\n-      y --;\n+      y = - y;\n+      neg = 1;\n     }\n-  return rv;\n+\n+  for (bit = 0; y && bit < sizeof (y) * 8; bit ++)\n+    {\n+      if (y & 1)\n+\trv += x;\n+      x <<= 1;\n+      y >>= 1;\n+    }  \n+\n+  return neg ? - rv : rv;\n }"}, {"sha": "3ac995583820536cde98886abb7fb57fe4b600e2", "filename": "libgcc/config/msp430/t-msp430", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a9ae287f6d76c60464c57be98550a25b358c34/libgcc%2Fconfig%2Fmsp430%2Ft-msp430", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a9ae287f6d76c60464c57be98550a25b358c34/libgcc%2Fconfig%2Fmsp430%2Ft-msp430", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmsp430%2Ft-msp430?ref=04a9ae287f6d76c60464c57be98550a25b358c34", "patch": "@@ -35,7 +35,6 @@ LIB2ADD = \\\n \t$(srcdir)/config/msp430/srai.S \\\n \t$(srcdir)/config/msp430/srli.S \\\n \t$(srcdir)/config/msp430/cmpsi2.S \\\n-\t$(srcdir)/config/msp430/lib2hw_mul.S \\\n \t$(srcdir)/config/msp430/floatunhisf.c \\\n \t$(srcdir)/config/msp430/floatunhidf.c \\\n \t$(srcdir)/config/msp430/floathidf.c \\\n@@ -44,6 +43,33 @@ LIB2ADD = \\\n \n HOST_LIBGCC2_CFLAGS += -Os -ffunction-sections -fdata-sections -mhwmult=none\n \n+lib2_mul_none.o: $(srcdir)/config/msp430/lib2mul.c\n+\t$(gcc_compile) $^ -c -DMUL_NONE\n+\n+lib2_mul_16bit.o: $(srcdir)/config/msp430/lib2mul.c\n+\t$(gcc_compile) $^ -c -DMUL_16\n+\n+lib2hw_mul_16.o: $(srcdir)/config/msp430/lib2hw_mul.S\n+\t$(gcc_compile) $^ -c -DMUL_16\n+\n+lib2hw_mul_32.o: $(srcdir)/config/msp430/lib2hw_mul.S\n+\t$(gcc_compile) $^ -c -DMUL_32\n+\n+lib2hw_mul_f5.o: $(srcdir)/config/msp430/lib2hw_mul.S\n+\t$(gcc_compile) $^ -c -DMUL_F5\n+\n+libmul_none.a: lib2_mul_none.o\n+\t$(AR_CREATE_FOR_TARGET) $@ $^\n+\n+libmul_16.a: lib2hw_mul_16.o lib2_mul_16bit.o\n+\t$(AR_CREATE_FOR_TARGET) $@ $^\n+\n+libmul_32.a: lib2hw_mul_32.o\n+\t$(AR_CREATE_FOR_TARGET) $@ $^\n+\n+libmul_f5.a: lib2hw_mul_f5.o\n+\t$(AR_CREATE_FOR_TARGET) $@ $^\n+\n # Local Variables:\n # mode: Makefile\n # End:"}]}