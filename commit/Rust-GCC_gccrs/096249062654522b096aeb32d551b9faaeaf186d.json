{"sha": "096249062654522b096aeb32d551b9faaeaf186d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk2MjQ5MDYyNjU0NTIyYjA5NmFlYjMyZDU1MWI5ZmFhZWFmMTg2ZA==", "commit": {"author": {"name": "Tristan Gingold", "email": "gingold@adacore.com", "date": "2008-04-08T06:56:49Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-04-08T06:56:49Z"}, "message": "vxaddr2line.adb: Use Unsigned_32 instead of Integer for address type.\n\n2008-04-08  Tristan Gingold  <gingold@adacore.com>\n\n\t* vxaddr2line.adb: Use Unsigned_32 instead of Integer for address type.\n\tImprove error message generation.\n\nFrom-SVN: r134058", "tree": {"sha": "6147f5b33ef4f213f131ede50929a14f64f927e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6147f5b33ef4f213f131ede50929a14f64f927e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/096249062654522b096aeb32d551b9faaeaf186d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/096249062654522b096aeb32d551b9faaeaf186d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/096249062654522b096aeb32d551b9faaeaf186d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/096249062654522b096aeb32d551b9faaeaf186d/comments", "author": {"login": "gingold-adacore", "id": 16334725, "node_id": "MDQ6VXNlcjE2MzM0NzI1", "avatar_url": "https://avatars.githubusercontent.com/u/16334725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gingold-adacore", "html_url": "https://github.com/gingold-adacore", "followers_url": "https://api.github.com/users/gingold-adacore/followers", "following_url": "https://api.github.com/users/gingold-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/gingold-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/gingold-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gingold-adacore/subscriptions", "organizations_url": "https://api.github.com/users/gingold-adacore/orgs", "repos_url": "https://api.github.com/users/gingold-adacore/repos", "events_url": "https://api.github.com/users/gingold-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/gingold-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1b449f6d9829145673f95b146e672c9f46026447", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b449f6d9829145673f95b146e672c9f46026447", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b449f6d9829145673f95b146e672c9f46026447"}], "stats": {"total": 50, "additions": 30, "deletions": 20}, "files": [{"sha": "1fd85ec506f44b96bdefd2f0164d37ac1de8359a", "filename": "gcc/ada/vxaddr2line.adb", "status": "modified", "additions": 30, "deletions": 20, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096249062654522b096aeb32d551b9faaeaf186d/gcc%2Fada%2Fvxaddr2line.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096249062654522b096aeb32d551b9faaeaf186d/gcc%2Fada%2Fvxaddr2line.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvxaddr2line.adb?ref=096249062654522b096aeb32d551b9faaeaf186d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2002-2007, AdaCore                     --\n+--                     Copyright (C) 2002-2008, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -62,18 +62,21 @@\n --  (in a format <host>_<target>), and then an appropriate value to Config_List\n --  array\n \n-with Text_IO;             use Text_IO;\n-with Ada.Integer_Text_IO; use Ada.Integer_Text_IO;\n-with Ada.Command_Line;    use Ada.Command_Line;\n-with Ada.Strings.Fixed;   use Ada.Strings.Fixed;\n+with Ada.Text_IO;       use Ada.Text_IO;\n+with Ada.Command_Line;  use Ada.Command_Line;\n+with Ada.Strings.Fixed; use Ada.Strings.Fixed;\n+with Interfaces;        use Interfaces;\n \n-with GNAT.OS_Lib; use GNAT.OS_Lib;\n+with GNAT.OS_Lib;               use GNAT.OS_Lib;\n with GNAT.Directory_Operations; use GNAT.Directory_Operations;\n-with GNAT.Expect; use GNAT.Expect;\n-with GNAT.Regpat; use GNAT.Regpat;\n+with GNAT.Expect;               use GNAT.Expect;\n+with GNAT.Regpat;               use GNAT.Regpat;\n \n procedure VxAddr2Line is\n \n+   package Unsigned_32_IO is new Modular_IO (Unsigned_32);\n+   --  Instantiate Modular_IO to have Put.\n+\n    Ref_Symbol : constant String := \"adainit\";\n    --  This is the name of the reference symbol which runtime address shall\n    --  be provided as the <ref_address> argument.\n@@ -102,7 +105,7 @@ procedure VxAddr2Line is\n       --  which will avoid computational overflows. Typically only useful when\n       --  64bit addresses are provided.\n \n-      Bt_Offset_From_Call : Integer;\n+      Bt_Offset_From_Call : Unsigned_32;\n       --  Offset from a backtrace address to the address of the corresponding\n       --  call instruction. This should always be 0, except on platforms where\n       --  the backtrace addresses actually correspond to return and not call\n@@ -160,14 +163,14 @@ procedure VxAddr2Line is\n    procedure Usage;\n    --  Displays the short help message and then terminates the program\n \n-   function Get_Reference_Offset return Integer;\n+   function Get_Reference_Offset return Unsigned_32;\n    --  Computes the static offset of the reference symbol by calling nm\n \n-   function Get_Value_From_Hex_Arg (Arg : Natural) return Integer;\n+   function Get_Value_From_Hex_Arg (Arg : Natural) return Unsigned_32;\n    --  Threats the argument number Arg as a C-style hexadecimal literal\n    --  and returns its integer value\n \n-   function Hex_Image (Value : Integer) return String_Access;\n+   function Hex_Image (Value : Unsigned_32) return String_Access;\n    --  Returns access to a string that contains hexadecimal image of Value\n \n    --  Separate functions that provide build-time customization:\n@@ -238,7 +241,7 @@ procedure VxAddr2Line is\n    -- Get_Reference_Offset --\n    --------------------------\n \n-   function Get_Reference_Offset return Integer is\n+   function Get_Reference_Offset return Unsigned_32 is\n       Nm_Cmd  : constant String_Access :=\n                   Locate_Exec_On_Path (Arch_List (Cur_Arch).Nm_Binary.all);\n \n@@ -273,11 +276,11 @@ procedure VxAddr2Line is\n       declare\n          Match_String : constant String := Expect_Out_Match (Pd);\n          Matches      : Match_Array (0 .. 1);\n-         Value        : Integer;\n+         Value        : Unsigned_32;\n \n       begin\n          Match (Reference, Match_String, Matches);\n-         Value := Integer'Value\n+         Value := Unsigned_32'Value\n            (\"16#\"\n             & Match_String (Matches (1).First .. Matches (1).Last) & \"#\");\n \n@@ -313,7 +316,7 @@ procedure VxAddr2Line is\n    -- Get_Value_From_Hex_Arg --\n    ----------------------------\n \n-   function Get_Value_From_Hex_Arg (Arg : Natural) return Integer is\n+   function Get_Value_From_Hex_Arg (Arg : Natural) return Unsigned_32 is\n       Cur_Arg : constant String := Argument (Arg);\n       Offset  : Natural;\n \n@@ -332,19 +335,26 @@ procedure VxAddr2Line is\n \n       --  Convert to value\n \n-      return Integer'Value (\"16#\" & Cur_Arg (Offset .. Cur_Arg'Last) & \"#\");\n+      return Unsigned_32'Value\n+        (\"16#\" & Cur_Arg (Offset .. Cur_Arg'Last) & \"#\");\n+\n+   exception\n+      when Constraint_Error =>\n+\n+         Error (\"Can't parse backtrace address '\" & Cur_Arg & \"'\");\n+         raise;\n    end Get_Value_From_Hex_Arg;\n \n    ---------------\n    -- Hex_Image --\n    ---------------\n \n-   function Hex_Image (Value : Integer) return String_Access is\n+   function Hex_Image (Value : Unsigned_32) return String_Access is\n       Result    : String (1 .. 20);\n       Start_Pos : Natural;\n \n    begin\n-      Put (Result, Value, 16);\n+      Unsigned_32_IO.Put (Result, Value, 16);\n       Start_Pos := Index (Result, \"16#\") + 3;\n       return new String'(Result (Start_Pos .. Result'Last - 1));\n    end Hex_Image;\n@@ -362,7 +372,7 @@ procedure VxAddr2Line is\n       OS_Exit (1);\n    end Usage;\n \n-   Ref_Static_Offset, Ref_Runtime_Address, Bt_Address : Integer;\n+   Ref_Static_Offset, Ref_Runtime_Address, Bt_Address : Unsigned_32;\n \n    Addr2line_Cmd : String_Access;\n "}]}