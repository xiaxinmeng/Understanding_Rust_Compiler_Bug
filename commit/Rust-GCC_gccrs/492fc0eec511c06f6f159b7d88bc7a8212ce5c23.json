{"sha": "492fc0eec511c06f6f159b7d88bc7a8212ce5c23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDkyZmMwZWVjNTExYzA2ZjZmMTU5YjdkODhiYzdhODIxMmNlNWMyMw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-05-09T16:19:28Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-05-09T16:19:28Z"}, "message": "re PR c/4784 (Anonymous structs issues)\n\n\tPR c/4784\n\t* c-decl.c (detect_field_duplicates_hash): New.  Handle anonymous\n\tstructures and unions recursively.\n\t(detect_field_duplicates): Move duplicate detection with a hash to\n\tdetect_field_duplicates_hash.  Always use a hash if anonymous\n\tstructures or unions are present.\n\t* doc/extend.texi (Unnamed Fields): Document that duplicate fields\n\tgive errors.\n\ntestsuite:\n\t* gcc.dg/anon-struct-9.c: New test.\n\nFrom-SVN: r159204", "tree": {"sha": "40f3750c5c0d3e75e4ae38fc558b95bd1d59a14b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40f3750c5c0d3e75e4ae38fc558b95bd1d59a14b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/492fc0eec511c06f6f159b7d88bc7a8212ce5c23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/492fc0eec511c06f6f159b7d88bc7a8212ce5c23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/492fc0eec511c06f6f159b7d88bc7a8212ce5c23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/492fc0eec511c06f6f159b7d88bc7a8212ce5c23/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44f276c65fc93a5ced092eca774c772cb10acd66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44f276c65fc93a5ced092eca774c772cb10acd66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44f276c65fc93a5ced092eca774c772cb10acd66"}], "stats": {"total": 196, "additions": 179, "deletions": 17}, "files": [{"sha": "8879737b91cd4d740a248ae9d3ed07916f9fafcc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/492fc0eec511c06f6f159b7d88bc7a8212ce5c23/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/492fc0eec511c06f6f159b7d88bc7a8212ce5c23/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=492fc0eec511c06f6f159b7d88bc7a8212ce5c23", "patch": "@@ -1,3 +1,14 @@\n+2010-05-09  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/4784\n+\t* c-decl.c (detect_field_duplicates_hash): New.  Handle anonymous\n+\tstructures and unions recursively.\n+\t(detect_field_duplicates): Move duplicate detection with a hash to\n+\tdetect_field_duplicates_hash.  Always use a hash if anonymous\n+\tstructures or unions are present.\n+\t* doc/extend.texi (Unnamed Fields): Document that duplicate fields\n+\tgive errors.\n+\n 2010-05-09  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/44046"}, {"sha": "03211d674d73761c6eb6a8eeb2bd59341ed28478", "filename": "gcc/c-decl.c", "status": "modified", "additions": 33, "deletions": 15, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/492fc0eec511c06f6f159b7d88bc7a8212ce5c23/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/492fc0eec511c06f6f159b7d88bc7a8212ce5c23/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=492fc0eec511c06f6f159b7d88bc7a8212ce5c23", "patch": "@@ -6629,6 +6629,31 @@ grokfield (location_t loc,\n   return value;\n }\n \f\n+/* Subroutine of detect_field_duplicates: add the fields of FIELDLIST\n+   to HTAB, giving errors for any duplicates.  */\n+\n+static void\n+detect_field_duplicates_hash (tree fieldlist, htab_t htab)\n+{\n+  tree x, y;\n+  void **slot;\n+\n+  for (x = fieldlist; x ; x = TREE_CHAIN (x))\n+    if ((y = DECL_NAME (x)) != 0)\n+      {\n+\tslot = htab_find_slot (htab, y, INSERT);\n+\tif (*slot)\n+\t  {\n+\t    error (\"duplicate member %q+D\", x);\n+\t    DECL_NAME (x) = NULL_TREE;\n+\t  }\n+\t*slot = y;\n+      }\n+    else if (TREE_CODE (TREE_TYPE (x)) == RECORD_TYPE\n+\t     || TREE_CODE (TREE_TYPE (x)) == UNION_TYPE)\n+      detect_field_duplicates_hash (TYPE_FIELDS (TREE_TYPE (x)), htab);\n+}\n+\n /* Generate an error for any duplicate field names in FIELDLIST.  Munge\n    the list such that this does not present a problem later.  */\n \n@@ -6647,11 +6672,16 @@ detect_field_duplicates (tree fieldlist)\n     return;\n   do {\n     timeout--;\n+    if (DECL_NAME (x) == NULL_TREE\n+\t&& (TREE_CODE (TREE_TYPE (x)) == RECORD_TYPE\n+\t    || TREE_CODE (TREE_TYPE (x)) == UNION_TYPE))\n+      timeout = 0;\n     x = TREE_CHAIN (x);\n   } while (timeout > 0 && x);\n \n-  /* If there were \"few\" fields, avoid the overhead of allocating\n-     a hash table.  Instead just do the nested traversal thing.  */\n+  /* If there were \"few\" fields and no anonymous structures or unions,\n+     avoid the overhead of allocating a hash table.  Instead just do\n+     the nested traversal thing.  */\n   if (timeout > 0)\n     {\n       for (x = TREE_CHAIN (fieldlist); x ; x = TREE_CHAIN (x))\n@@ -6668,20 +6698,8 @@ detect_field_duplicates (tree fieldlist)\n   else\n     {\n       htab_t htab = htab_create (37, htab_hash_pointer, htab_eq_pointer, NULL);\n-      void **slot;\n-\n-      for (x = fieldlist; x ; x = TREE_CHAIN (x))\n-\tif ((y = DECL_NAME (x)) != 0)\n-\t  {\n-\t    slot = htab_find_slot (htab, y, INSERT);\n-\t    if (*slot)\n-\t      {\n-\t\terror (\"duplicate member %q+D\", x);\n-\t\tDECL_NAME (x) = NULL_TREE;\n-\t      }\n-\t    *slot = y;\n-\t  }\n \n+      detect_field_duplicates_hash (fieldlist, htab);\n       htab_delete (htab);\n     }\n }"}, {"sha": "7a495ebfd645ee36dad79e6cca4603c1e4c8935d", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/492fc0eec511c06f6f159b7d88bc7a8212ce5c23/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/492fc0eec511c06f6f159b7d88bc7a8212ce5c23/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=492fc0eec511c06f6f159b7d88bc7a8212ce5c23", "patch": "@@ -12760,8 +12760,7 @@ struct @{\n @end smallexample\n \n It is ambiguous which @code{a} is being referred to with @samp{foo.a}.\n-Such constructs are not supported and must be avoided.  In the future,\n-such constructs may be detected and treated as compilation errors.\n+The compiler gives errors for such constructs.\n \n @opindex fms-extensions\n Unless @option{-fms-extensions} is used, the unnamed field must be a"}, {"sha": "cf4140d7691b6e388c75e19fae98c0bde97b9866", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/492fc0eec511c06f6f159b7d88bc7a8212ce5c23/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/492fc0eec511c06f6f159b7d88bc7a8212ce5c23/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=492fc0eec511c06f6f159b7d88bc7a8212ce5c23", "patch": "@@ -1,3 +1,8 @@\n+2010-05-09  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/4784\n+\t* gcc.dg/anon-struct-9.c: New test.\n+\n 2010-05-09  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/44043"}, {"sha": "2658ccb7948137c7d3662872a25d2513b0f974c0", "filename": "gcc/testsuite/gcc.dg/anon-struct-9.c", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/492fc0eec511c06f6f159b7d88bc7a8212ce5c23/gcc%2Ftestsuite%2Fgcc.dg%2Fanon-struct-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/492fc0eec511c06f6f159b7d88bc7a8212ce5c23/gcc%2Ftestsuite%2Fgcc.dg%2Fanon-struct-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanon-struct-9.c?ref=492fc0eec511c06f6f159b7d88bc7a8212ce5c23", "patch": "@@ -0,0 +1,129 @@\n+/* Test for diagnostics for duplicate member names in anonymous\n+   structures and unions.  PR 4784.  */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+struct s1\n+{\n+  int x;\n+  struct\n+  {\n+    int x; /* { dg-error \"duplicate member\" } */\n+  };\n+};\n+\n+struct s2\n+{\n+  struct\n+  {\n+    int a;\n+    struct\n+    {\n+      int b;\n+    };\n+  };\n+  struct\n+  {\n+    int b; /* { dg-error \"duplicate member\" } */\n+  };\n+};\n+\n+struct s3\n+{\n+  struct\n+  {\n+    int a;\n+    struct\n+    {\n+      int b;\n+    };\n+  };\n+  struct\n+  {\n+    int b; /* { dg-error \"duplicate member\" } */\n+    int c;\n+  };\n+};\n+\n+struct s4\n+{\n+  int x;\n+  struct\n+  {\n+    int x;\n+  } y;\n+};\n+\n+union u1\n+{\n+  int x;\n+  union\n+  {\n+    int x; /* { dg-error \"duplicate member\" } */\n+  };\n+};\n+\n+union u2\n+{\n+  union\n+  {\n+    int a;\n+    union\n+    {\n+      int b;\n+    };\n+  };\n+  union\n+  {\n+    int b; /* { dg-error \"duplicate member\" } */\n+  };\n+};\n+\n+union u3\n+{\n+  union\n+  {\n+    int a;\n+    union\n+    {\n+      int b;\n+    };\n+  };\n+  union\n+  {\n+    int b; /* { dg-error \"duplicate member\" } */\n+    int c;\n+  };\n+};\n+\n+union u4\n+{\n+  int x;\n+  union\n+  {\n+    int x;\n+  } y;\n+};\n+\n+#define D10(x) int x##0; int x##1; int x##2; int x##3; int x##4; int x##5; int x##6; int x##7; int x##8; int x##9;\n+#define D100(x) D10(x##0) D10(x##1) D10(x##2) D10(x##3) D10(x##4) D10(x##5) D10(x##6) D10(x##7) D10(x##8) D10(x##9)\n+\n+#define S10(x) struct { D100(x##0) }; struct { D100(x##1) }; struct { D100(x##2) }; struct { D100(x##3) }; struct { D100(x##4) }; struct { D100(x##5) }; struct { D100(x##6) }; struct { D100(x##7) }; struct { D100(x##8) }; struct { D100(x##9) };\n+\n+struct sbig\n+{\n+  S10(a)\n+  S10(b)\n+  S10(c)\n+  S10(d)\n+  S10(e)\n+  S10(f)\n+  S10(g)\n+  S10(h)\n+  S10(i)\n+  S10(j)\n+  struct\n+  {\n+    int a123; /* { dg-error \"duplicate member\" } */\n+  };\n+};"}]}