{"sha": "8a22191467dbfb77381a1d204ad96515bc3022c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGEyMjE5MTQ2N2RiZmI3NzM4MWExZDIwNGFkOTY1MTViYzMwMjJjMg==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2008-06-13T20:30:48Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2008-06-13T20:30:48Z"}, "message": "re PR libfortran/35863 ([F2003] Implement ENCODING=\"UTF-8\")\n\n2008-06-13  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR fortran/35863\n\t* trans-io.c (gfc_build_io_library_fndecls): Build declaration for\n\ttransfer_character_wide which includes passing in the character kind to\n\tsupport wide character IO. (transfer_expr): If the kind == 4, create the\n\targument and build the call.\n\t* gfortran.texi: Fix typo.\n\nFrom-SVN: r136764", "tree": {"sha": "abb55703da7068777da4275fc2d290473ed1af52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abb55703da7068777da4275fc2d290473ed1af52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a22191467dbfb77381a1d204ad96515bc3022c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a22191467dbfb77381a1d204ad96515bc3022c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a22191467dbfb77381a1d204ad96515bc3022c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a22191467dbfb77381a1d204ad96515bc3022c2/comments", "author": null, "committer": null, "parents": [{"sha": "cea93abbe2d08a5a1df8cf6522d7d34aad3dca78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cea93abbe2d08a5a1df8cf6522d7d34aad3dca78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cea93abbe2d08a5a1df8cf6522d7d34aad3dca78"}], "stats": {"total": 42, "additions": 40, "deletions": 2}, "files": [{"sha": "08c93d50b83c547ef6c3822e1a555e93a3abd752", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a22191467dbfb77381a1d204ad96515bc3022c2/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a22191467dbfb77381a1d204ad96515bc3022c2/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8a22191467dbfb77381a1d204ad96515bc3022c2", "patch": "@@ -1,3 +1,12 @@\n+2008-06-13  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR fortran/35863\n+\t* trans-io.c (gfc_build_io_library_fndecls): Build declaration for\n+\ttransfer_character_wide which includes passing in the character kind to\n+\tsupport wide character IO. (transfer_expr): If the kind == 4, create the\n+\targument and build the call.\n+\t* gfortran.texi: Fix typo.\n+\n 2008-06-13  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/36476"}, {"sha": "086aab7b50b66854b572637a1cc3699cfa05cc76", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a22191467dbfb77381a1d204ad96515bc3022c2/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a22191467dbfb77381a1d204ad96515bc3022c2/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=8a22191467dbfb77381a1d204ad96515bc3022c2", "patch": "@@ -525,7 +525,7 @@ support is reported in the @ref{Fortran 2003 status} section of the\n documentation.\n \n The next version of the Fortran standard after Fortran 2003 is currently\n-being developped and the GNU Fortran compiler supports some of its new\n+being developed and the GNU Fortran compiler supports some of its new\n features. This support is based on the latest draft of the standard\n (available from @url{http://www.nag.co.uk/sc22wg5/}) and no guarantee of\n future compatibility is made, as the final standard might differ from the"}, {"sha": "f210169abe028c9d2c9837b527632c19b7f0f85f", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a22191467dbfb77381a1d204ad96515bc3022c2/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a22191467dbfb77381a1d204ad96515bc3022c2/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=8a22191467dbfb77381a1d204ad96515bc3022c2", "patch": "@@ -121,6 +121,7 @@ enum iocall\n   IOCALL_X_INTEGER,\n   IOCALL_X_LOGICAL,\n   IOCALL_X_CHARACTER,\n+  IOCALL_X_CHARACTER_WIDE,\n   IOCALL_X_REAL,\n   IOCALL_X_COMPLEX,\n   IOCALL_X_ARRAY,\n@@ -327,6 +328,13 @@ gfc_build_io_library_fndecls (void)\n \t\t\t\t     void_type_node, 3, dt_parm_type,\n \t\t\t\t     pvoid_type_node, gfc_int4_type_node);\n \n+  iocall[IOCALL_X_CHARACTER_WIDE] =\n+    gfc_build_library_function_decl (get_identifier\n+\t\t\t\t     (PREFIX(\"transfer_character_wide\")),\n+\t\t\t\t     void_type_node, 4, dt_parm_type,\n+\t\t\t\t     pvoid_type_node, gfc_charlen_type_node,\n+\t\t\t\t     gfc_int4_type_node);\n+\n   iocall[IOCALL_X_REAL] =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"transfer_real\")),\n \t\t\t\t     void_type_node, 3, dt_parm_type,\n@@ -1977,7 +1985,7 @@ transfer_array_component (tree expr, gfc_component * cm)\n static void\n transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr, gfc_code * code)\n {\n-  tree tmp, function, arg2, field, expr;\n+  tree tmp, function, arg2, arg3, field, expr;\n   gfc_component *c;\n   int kind;\n \n@@ -2009,6 +2017,7 @@ transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr, gfc_code * code)\n   kind = ts->kind;\n   function = NULL;\n   arg2 = NULL;\n+  arg3 = NULL;\n \n   switch (ts->type)\n     {\n@@ -2033,6 +2042,26 @@ transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr, gfc_code * code)\n       break;\n \n     case BT_CHARACTER:\n+      if (kind == 4)\n+\t{\n+\t  if (se->string_length)\n+\t    arg2 = se->string_length;\n+\t  else\n+\t    {\n+\t      tmp = build_fold_indirect_ref (addr_expr);\n+\t      gcc_assert (TREE_CODE (TREE_TYPE (tmp)) == ARRAY_TYPE);\n+\t      arg2 = TYPE_MAX_VALUE (TYPE_DOMAIN (TREE_TYPE (tmp)));\n+\t      arg2 = fold_convert (gfc_charlen_type_node, arg2);\n+\t    }\n+\t  arg3 = build_int_cst (NULL_TREE, kind);\n+\t  function = iocall[IOCALL_X_CHARACTER_WIDE];\n+\t  tmp = build_fold_addr_expr (dt_parm);\n+\t  tmp = build_call_expr (function, 4, tmp, addr_expr, arg2, arg3);\n+\t  gfc_add_expr_to_block (&se->pre, tmp);\n+\t  gfc_add_block_to_block (&se->pre, &se->post);\n+\t  return;\n+\t}\n+      /* Fall through. */\n     case BT_HOLLERITH:\n       if (se->string_length)\n \targ2 = se->string_length;"}]}