{"sha": "718b8ea51f0736646f9cf8a9d5eb4305a12e835e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE4YjhlYTUxZjA3MzY2NDZmOWNmOGE5ZDVlYjQzMDVhMTJlODM1ZQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-01-29T18:57:24Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-01-29T18:57:24Z"}, "message": "tree.c, tree.h (build_parse_node): Remove; was identical to build_nt.\n\n\t* tree.c, tree.h (build_parse_node): Remove; was identical to\n\tbuild_nt.\n\t* c-lang.c (start_cdtor), objc/objc-act.c\n\t(build_module_descriptor): Use build_nt instead of\n\tbuild_parse_node.\n\ncp:\n\t* decl2.c (build_expr_from_tree), lex.c (make_pointer_declarator,\n\tmake_reference_declarator, make_call_declarator), method.c\n\t(implicitly_declare_fn), parse.y (namespace_using_decl,\n\tnotype_unqualified_id, expr_or_declarator, new_type_id,\n\tafter_type_declarator, direct_after_type_declarator,\n\tnotype_declarator, complex_notype_declarator,\n\tcomplex_direct_notype_declarator, qualified_id,\n\tnotype_qualified_id, overqualified_id, direct_new_declarator,\n\tabsdcl, direct_abstract_declarator, conversion_declarator), pt.c\n\t(tsubst), semantics.c (begin_constructor_declarator): Use build_nt\n\tinstead of build_parse_node.\n\nFrom-SVN: r39332", "tree": {"sha": "b48d73c0ebfe52de5ca1bb8398e3b4a0964d226a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b48d73c0ebfe52de5ca1bb8398e3b4a0964d226a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/718b8ea51f0736646f9cf8a9d5eb4305a12e835e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/718b8ea51f0736646f9cf8a9d5eb4305a12e835e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/718b8ea51f0736646f9cf8a9d5eb4305a12e835e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/718b8ea51f0736646f9cf8a9d5eb4305a12e835e/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "adc881318b71864ad27821825c7cb9dce3c30aa2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adc881318b71864ad27821825c7cb9dce3c30aa2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adc881318b71864ad27821825c7cb9dce3c30aa2"}], "stats": {"total": 166, "additions": 78, "deletions": 88}, "files": [{"sha": "6fb73d9b4897176aff1713099791a11988ed7082", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718b8ea51f0736646f9cf8a9d5eb4305a12e835e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718b8ea51f0736646f9cf8a9d5eb4305a12e835e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=718b8ea51f0736646f9cf8a9d5eb4305a12e835e", "patch": "@@ -1,3 +1,11 @@\n+2001-01-29  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* tree.c, tree.h (build_parse_node): Remove; was identical to\n+\tbuild_nt.\n+\t* c-lang.c (start_cdtor), objc/objc-act.c\n+\t(build_module_descriptor): Use build_nt instead of\n+\tbuild_parse_node.\n+\n 2001-01-29  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/i386/i386.md (addqi_1_lea): Fix mode (QI instead of HI)."}, {"sha": "87c65fbacaee566bca9fd8eb02a59c87df76f522", "filename": "gcc/c-lang.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718b8ea51f0736646f9cf8a9d5eb4305a12e835e/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718b8ea51f0736646f9cf8a9d5eb4305a12e835e/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=718b8ea51f0736646f9cf8a9d5eb4305a12e835e", "patch": "@@ -187,10 +187,9 @@ start_cdtor (method_type)\n   tree body;\n \n   start_function (void_list_node_1,\n-\t\t  build_parse_node (CALL_EXPR, fnname,\n-\t\t\t\t    tree_cons (NULL_TREE, NULL_TREE,\n-\t\t\t\t\t       void_list_node_1),\n-\t\t\t\t    NULL_TREE),\n+\t\t  build_nt (CALL_EXPR, fnname,\n+\t\t\t    tree_cons (NULL_TREE, NULL_TREE, void_list_node_1),\n+\t\t\t    NULL_TREE),\n \t\t  NULL_TREE, NULL_TREE);\n   store_parm_decls ();\n "}, {"sha": "996adb3c3c07f55464478ceca207396a6db14fa4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718b8ea51f0736646f9cf8a9d5eb4305a12e835e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718b8ea51f0736646f9cf8a9d5eb4305a12e835e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=718b8ea51f0736646f9cf8a9d5eb4305a12e835e", "patch": "@@ -1,3 +1,17 @@\n+2001-01-29  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* decl2.c (build_expr_from_tree), lex.c (make_pointer_declarator,\n+\tmake_reference_declarator, make_call_declarator), method.c\n+\t(implicitly_declare_fn), parse.y (namespace_using_decl,\n+\tnotype_unqualified_id, expr_or_declarator, new_type_id,\n+\tafter_type_declarator, direct_after_type_declarator,\n+\tnotype_declarator, complex_notype_declarator,\n+\tcomplex_direct_notype_declarator, qualified_id,\n+\tnotype_qualified_id, overqualified_id, direct_new_declarator,\n+\tabsdcl, direct_abstract_declarator, conversion_declarator), pt.c\n+\t(tsubst), semantics.c (begin_constructor_declarator): Use build_nt\n+\tinstead of build_parse_node.\n+\n 2001-01-28  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* cp-tree.h (cp_tree_index): Delete CPTI_MINUS_ONE."}, {"sha": "6088e1073e419e82519aedd2de3779aef2d84ed1", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718b8ea51f0736646f9cf8a9d5eb4305a12e835e/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718b8ea51f0736646f9cf8a9d5eb4305a12e835e/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=718b8ea51f0736646f9cf8a9d5eb4305a12e835e", "patch": "@@ -4032,8 +4032,8 @@ build_expr_from_tree (t)\n     case ARRAY_REF:\n       if (TREE_OPERAND (t, 0) == NULL_TREE)\n \t/* new-type-id */\n-\treturn build_parse_node (ARRAY_REF, NULL_TREE,\n-\t\t\t\t build_expr_from_tree (TREE_OPERAND (t, 1)));\n+\treturn build_nt (ARRAY_REF, NULL_TREE,\n+\t\t\t build_expr_from_tree (TREE_OPERAND (t, 1)));\n       return grok_array_decl (build_expr_from_tree (TREE_OPERAND (t, 0)),\n \t\t\t      build_expr_from_tree (TREE_OPERAND (t, 1)));\n "}, {"sha": "58ab5d3aed40fc46445c9fed527ae43f4ca29d3e", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718b8ea51f0736646f9cf8a9d5eb4305a12e835e/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718b8ea51f0736646f9cf8a9d5eb4305a12e835e/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=718b8ea51f0736646f9cf8a9d5eb4305a12e835e", "patch": "@@ -149,7 +149,7 @@ make_pointer_declarator (cv_qualifiers, target)\n   if (target && TREE_CODE (target) == IDENTIFIER_NODE\n       && ANON_AGGRNAME_P (target))\n     error (\"type name expected before `*'\");\n-  target = build_parse_node (INDIRECT_REF, target);\n+  target = build_nt (INDIRECT_REF, target);\n   TREE_TYPE (target) = cv_qualifiers;\n   return target;\n }\n@@ -181,7 +181,7 @@ make_reference_declarator (cv_qualifiers, target)\n       if (TREE_CODE (target) == IDENTIFIER_NODE && ANON_AGGRNAME_P (target))\n \t  error (\"type name expected before `&'\");\n     }\n-  target = build_parse_node (ADDR_EXPR, target);\n+  target = build_nt (ADDR_EXPR, target);\n   TREE_TYPE (target) = cv_qualifiers;\n   return target;\n }\n@@ -190,11 +190,11 @@ tree\n make_call_declarator (target, parms, cv_qualifiers, exception_specification)\n      tree target, parms, cv_qualifiers, exception_specification;\n {\n-  target = build_parse_node (CALL_EXPR, target,\n-\t\t\t     tree_cons (parms, cv_qualifiers, NULL_TREE),\n-\t\t\t     /* The third operand is really RTL.  We\n-\t\t\t\tshouldn't put anything there.  */\n-\t\t\t     NULL_TREE);\n+  target = build_nt (CALL_EXPR, target,\n+\t\t     tree_cons (parms, cv_qualifiers, NULL_TREE),\n+\t\t     /* The third operand is really RTL.  We\n+\t\t\tshouldn't put anything there.  */\n+\t\t     NULL_TREE);\n   CALL_DECLARATOR_EXCEPTION_SPEC (target) = exception_specification;\n   return target;\n }"}, {"sha": "51e0c5c3cb963da517543fd456b41abdd0ff3290", "filename": "gcc/cp/method.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718b8ea51f0736646f9cf8a9d5eb4305a12e835e/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718b8ea51f0736646f9cf8a9d5eb4305a12e835e/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=718b8ea51f0736646f9cf8a9d5eb4305a12e835e", "patch": "@@ -2786,7 +2786,7 @@ implicitly_declare_fn (kind, type, const_p)\n     {\n     case sfk_destructor:\n       /* Destructor.  */\n-      name = build_parse_node (BIT_NOT_EXPR, name);\n+      name = build_nt (BIT_NOT_EXPR, name);\n       args = void_list_node;\n       raises = synthesize_exception_spec (type, &locate_dtor, 0);\n       break;\n@@ -2844,7 +2844,7 @@ implicitly_declare_fn (kind, type, const_p)\n   {\n     tree declarator = make_call_declarator (name, args, NULL_TREE, raises);\n     if (retref)\n-      declarator = build_parse_node (ADDR_EXPR, declarator);\n+      declarator = build_nt (ADDR_EXPR, declarator);\n \n     fn = grokfield (declarator, declspecs, NULL_TREE, NULL_TREE, NULL_TREE);\n   }"}, {"sha": "e84efb53a73619864b5d4731d4db546352386047", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718b8ea51f0736646f9cf8a9d5eb4305a12e835e/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718b8ea51f0736646f9cf8a9d5eb4305a12e835e/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=718b8ea51f0736646f9cf8a9d5eb4305a12e835e", "patch": "@@ -545,11 +545,11 @@ using_decl:\n \n namespace_using_decl:\n \t  USING namespace_qualifier identifier\n-\t        { $$ = build_parse_node (SCOPE_REF, $2, $3); }\n+\t        { $$ = build_nt (SCOPE_REF, $2, $3); }\n \t| USING global_scope identifier\n-\t        { $$ = build_parse_node (SCOPE_REF, global_namespace, $3); }\n+\t        { $$ = build_nt (SCOPE_REF, global_namespace, $3); }\n \t| USING global_scope namespace_qualifier identifier\n-\t        { $$ = build_parse_node (SCOPE_REF, $3, $4); }\n+\t        { $$ = build_nt (SCOPE_REF, $3, $4); }\n \t;\n \n using_directive:\n@@ -1442,9 +1442,9 @@ expr_no_comma_rangle:\n \n notype_unqualified_id:\n \t  '~' see_typename identifier\n-\t\t{ $$ = build_parse_node (BIT_NOT_EXPR, $3); }\n+\t\t{ $$ = build_nt (BIT_NOT_EXPR, $3); }\n \t| '~' see_typename template_type\n-\t\t{ $$ = build_parse_node (BIT_NOT_EXPR, $3); }\n+\t\t{ $$ = build_nt (BIT_NOT_EXPR, $3); }\n         | template_id\n \t| operator_name\n \t| IDENTIFIER\n@@ -1500,9 +1500,9 @@ expr_or_declarator_intern:\n expr_or_declarator:\n \t  notype_unqualified_id\n \t| '*' expr_or_declarator_intern  %prec UNARY\n-\t\t{ $$ = build_parse_node (INDIRECT_REF, $2); }\n+\t\t{ $$ = build_nt (INDIRECT_REF, $2); }\n \t| '&' expr_or_declarator_intern  %prec UNARY\n-\t\t{ $$ = build_parse_node (ADDR_EXPR, $2); }\n+\t\t{ $$ = build_nt (ADDR_EXPR, $2); }\n \t| '(' expr_or_declarator_intern ')'\n \t\t{ $$ = $2; }\n \t;\n@@ -2769,7 +2769,7 @@ new_type_id:\n \t\t{\n \t\t  if (pedantic)\n \t\t    pedwarn (\"ISO C++ forbids array dimensions with parenthesized type in new\");\n-\t\t  $$.t = build_parse_node (ARRAY_REF, TREE_VALUE ($2.t), $5);\n+\t\t  $$.t = build_nt (ARRAY_REF, TREE_VALUE ($2.t), $5);\n \t\t  $$.t = build_tree_list (TREE_PURPOSE ($2.t), $$.t);\n \t\t  $$.new_type_flag = $2.new_type_flag;\n \t\t}\n@@ -2830,7 +2830,7 @@ after_type_declarator:\n \t\t{ $$ = make_reference_declarator (NULL_TREE, $2); }\n \t| ptr_to_mem cv_qualifiers after_type_declarator_intern\n \t\t{ tree arg = make_pointer_declarator ($2, $3);\n-\t\t  $$ = build_parse_node (SCOPE_REF, $1, arg);\n+\t\t  $$ = build_nt (SCOPE_REF, $1, arg);\n \t\t}\n \t| direct_after_type_declarator\n \t;\n@@ -2839,14 +2839,14 @@ direct_after_type_declarator:\n \t  direct_after_type_declarator maybe_parmlist cv_qualifiers exception_specification_opt  %prec '.'\n \t\t{ $$ = make_call_declarator ($$, $2, $3, $4); }\n \t| direct_after_type_declarator '[' expr ']'\n-\t\t{ $$ = build_parse_node (ARRAY_REF, $$, $3); }\n+\t\t{ $$ = build_nt (ARRAY_REF, $$, $3); }\n \t| direct_after_type_declarator '[' ']'\n-\t\t{ $$ = build_parse_node (ARRAY_REF, $$, NULL_TREE); }\n+\t\t{ $$ = build_nt (ARRAY_REF, $$, NULL_TREE); }\n \t| '(' after_type_declarator_intern ')'\n \t\t{ $$ = $2; }\n \t| nested_name_specifier type_name  %prec EMPTY\n \t\t{ push_nested_class ($1, 3);\n-\t\t  $$ = build_parse_node (SCOPE_REF, $$, $2);\n+\t\t  $$ = build_nt (SCOPE_REF, $$, $2);\n \t\t  TREE_COMPLEXITY ($$) = current_class_depth; }\n \t| type_name  %prec EMPTY\n \t;\n@@ -2908,7 +2908,7 @@ notype_declarator:\n \t\t{ $$ = make_reference_declarator (NULL_TREE, $2); }\n \t| ptr_to_mem cv_qualifiers notype_declarator_intern\n \t\t{ tree arg = make_pointer_declarator ($2, $3);\n-\t\t  $$ = build_parse_node (SCOPE_REF, $1, arg);\n+\t\t  $$ = build_nt (SCOPE_REF, $1, arg);\n \t\t}\n \t| direct_notype_declarator\n \t;\n@@ -2924,7 +2924,7 @@ complex_notype_declarator:\n \t\t{ $$ = make_reference_declarator (NULL_TREE, $2); }\n \t| ptr_to_mem cv_qualifiers notype_declarator_intern\n \t\t{ tree arg = make_pointer_declarator ($2, $3);\n-\t\t  $$ = build_parse_node (SCOPE_REF, $1, arg);\n+\t\t  $$ = build_nt (SCOPE_REF, $1, arg);\n \t\t}\n \t| complex_direct_notype_declarator\n \t;\n@@ -2935,40 +2935,40 @@ complex_direct_notype_declarator:\n \t| '(' complex_notype_declarator ')'\n \t\t{ $$ = $2; }\n \t| direct_notype_declarator '[' expr ']'\n-\t\t{ $$ = build_parse_node (ARRAY_REF, $$, $3); }\n+\t\t{ $$ = build_nt (ARRAY_REF, $$, $3); }\n \t| direct_notype_declarator '[' ']'\n-\t\t{ $$ = build_parse_node (ARRAY_REF, $$, NULL_TREE); }\n+\t\t{ $$ = build_nt (ARRAY_REF, $$, NULL_TREE); }\n \t| notype_qualified_id\n                 { enter_scope_of ($1); }\n \t| global_scope notype_qualified_id\n                 { enter_scope_of ($2); $$ = $2;}\n \t| global_scope notype_unqualified_id\n-                { $$ = build_parse_node (SCOPE_REF, global_namespace, $2);\n+                { $$ = build_nt (SCOPE_REF, global_namespace, $2);\n \t\t  enter_scope_of ($$); \n \t\t}\n         | nested_name_specifier notype_template_declarator\n                 { got_scope = NULL_TREE;\n-\t\t  $$ = build_parse_node (SCOPE_REF, $1, $2);\n+\t\t  $$ = build_nt (SCOPE_REF, $1, $2);\n \t\t  enter_scope_of ($$);\n \t\t}\n \t;\n \n qualified_id:\n \t  nested_name_specifier unqualified_id\n \t\t{ got_scope = NULL_TREE;\n-\t\t  $$ = build_parse_node (SCOPE_REF, $$, $2); }\n+\t\t  $$ = build_nt (SCOPE_REF, $$, $2); }\n         | nested_name_specifier object_template_id\n                 { got_scope = NULL_TREE;\n- \t\t  $$ = build_parse_node (SCOPE_REF, $1, $2); }\n+ \t\t  $$ = build_nt (SCOPE_REF, $1, $2); }\n \t;\n \n notype_qualified_id:\n \t  nested_name_specifier notype_unqualified_id\n \t\t{ got_scope = NULL_TREE;\n-\t\t  $$ = build_parse_node (SCOPE_REF, $$, $2); }\n+\t\t  $$ = build_nt (SCOPE_REF, $$, $2); }\n         | nested_name_specifier object_template_id\n                 { got_scope = NULL_TREE;\n-\t\t  $$ = build_parse_node (SCOPE_REF, $1, $2); }\n+\t\t  $$ = build_nt (SCOPE_REF, $1, $2); }\n \t;\n \n overqualified_id:\n@@ -3175,21 +3175,21 @@ new_declarator:\n \t\t{ $$ = make_reference_declarator ($2, NULL_TREE); }\n \t| ptr_to_mem cv_qualifiers  %prec EMPTY\n \t\t{ tree arg = make_pointer_declarator ($2, NULL_TREE);\n-\t\t  $$ = build_parse_node (SCOPE_REF, $1, arg);\n+\t\t  $$ = build_nt (SCOPE_REF, $1, arg);\n \t\t}\n \t| ptr_to_mem cv_qualifiers new_declarator\n \t\t{ tree arg = make_pointer_declarator ($2, $3);\n-\t\t  $$ = build_parse_node (SCOPE_REF, $1, arg);\n+\t\t  $$ = build_nt (SCOPE_REF, $1, arg);\n \t\t}\n \t| direct_new_declarator  %prec EMPTY\n \t;\n \n /* ISO direct-new-declarator (5.3.4) */\n direct_new_declarator:\n \t  '[' expr ']'\n-\t\t{ $$ = build_parse_node (ARRAY_REF, NULL_TREE, $2); }\n+\t\t{ $$ = build_nt (ARRAY_REF, NULL_TREE, $2); }\n \t| direct_new_declarator '[' expr ']'\n-\t\t{ $$ = build_parse_node (ARRAY_REF, $$, $3); }\n+\t\t{ $$ = build_nt (ARRAY_REF, $$, $3); }\n \t;\n \n absdcl_intern:\n@@ -3222,11 +3222,11 @@ absdcl:\n \t\t{ $$ = make_reference_declarator (NULL_TREE, NULL_TREE); }\n \t| ptr_to_mem cv_qualifiers  %prec EMPTY\n \t\t{ tree arg = make_pointer_declarator ($2, NULL_TREE);\n-\t\t  $$ = build_parse_node (SCOPE_REF, $1, arg);\n+\t\t  $$ = build_nt (SCOPE_REF, $1, arg);\n \t\t}\n \t| ptr_to_mem cv_qualifiers absdcl_intern\n \t\t{ tree arg = make_pointer_declarator ($2, $3);\n-\t\t  $$ = build_parse_node (SCOPE_REF, $1, arg);\n+\t\t  $$ = build_nt (SCOPE_REF, $1, arg);\n \t\t}\n \t| direct_abstract_declarator  %prec EMPTY\n \t;\n@@ -3241,19 +3241,19 @@ direct_abstract_declarator:\n \t| direct_abstract_declarator LEFT_RIGHT cv_qualifiers exception_specification_opt  %prec '.'\n \t\t{ $$ = make_call_declarator ($$, empty_parms (), $3, $4); }\n \t| direct_abstract_declarator '[' expr ']'  %prec '.'\n-\t\t{ $$ = build_parse_node (ARRAY_REF, $$, $3); }\n+\t\t{ $$ = build_nt (ARRAY_REF, $$, $3); }\n \t| direct_abstract_declarator '[' ']'  %prec '.'\n-\t\t{ $$ = build_parse_node (ARRAY_REF, $$, NULL_TREE); }\n+\t\t{ $$ = build_nt (ARRAY_REF, $$, NULL_TREE); }\n \t| '(' complex_parmlist ')' cv_qualifiers exception_specification_opt  %prec '.'\n \t\t{ $$ = make_call_declarator (NULL_TREE, $2, $4, $5); }\n \t| regcast_or_absdcl cv_qualifiers exception_specification_opt  %prec '.'\n \t\t{ set_quals_and_spec ($$, $2, $3); }\n \t| fcast_or_absdcl cv_qualifiers exception_specification_opt  %prec '.'\n \t\t{ set_quals_and_spec ($$, $2, $3); }\n \t| '[' expr ']'  %prec '.'\n-\t\t{ $$ = build_parse_node (ARRAY_REF, NULL_TREE, $2); }\n+\t\t{ $$ = build_nt (ARRAY_REF, NULL_TREE, $2); }\n \t| '[' ']'  %prec '.'\n-\t\t{ $$ = build_parse_node (ARRAY_REF, NULL_TREE, NULL_TREE); }\n+\t\t{ $$ = build_nt (ARRAY_REF, NULL_TREE, NULL_TREE); }\n \t;\n \n /* For C++, decls and stmts can be intermixed, so we don't need to\n@@ -3783,7 +3783,7 @@ conversion_declarator:\n \t\t{ $$ = make_reference_declarator ($2, $3); }\n \t| ptr_to_mem cv_qualifiers conversion_declarator\n \t\t{ tree arg = make_pointer_declarator ($2, $3);\n-\t\t  $$ = build_parse_node (SCOPE_REF, $1, arg);\n+\t\t  $$ = build_nt (SCOPE_REF, $1, arg);\n \t\t}\n \t;\n "}, {"sha": "a17343d7a96564bc0fbaeefe79bea12339064f42", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718b8ea51f0736646f9cf8a9d5eb4305a12e835e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718b8ea51f0736646f9cf8a9d5eb4305a12e835e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=718b8ea51f0736646f9cf8a9d5eb4305a12e835e", "patch": "@@ -6819,7 +6819,7 @@ tsubst (t, args, complain, in_decl)\n \tif (e1 == error_mark_node || e2 == error_mark_node)\n \t  return error_mark_node;\n \n-\treturn build_parse_node (ARRAY_REF, e1, e2, tsubst_expr);\n+\treturn build_nt (ARRAY_REF, e1, e2, tsubst_expr);\n       }\n \n     case CALL_EXPR:\n@@ -6846,7 +6846,7 @@ tsubst (t, args, complain, in_decl)\n \tif (e1 == error_mark_node || e2 == error_mark_node)\n \t  return error_mark_node;\n \n-\treturn build_parse_node (TREE_CODE (t), e1, e2);\n+\treturn build_nt (TREE_CODE (t), e1, e2);\n       }\n \n     case TYPEOF_TYPE:"}, {"sha": "c5bbe1be604ca27f20d019f39189f6823667d924", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718b8ea51f0736646f9cf8a9d5eb4305a12e835e/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718b8ea51f0736646f9cf8a9d5eb4305a12e835e/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=718b8ea51f0736646f9cf8a9d5eb4305a12e835e", "patch": "@@ -1624,7 +1624,7 @@ begin_constructor_declarator (scope, name)\n      tree scope;\n      tree name;\n {\n-  tree result = build_parse_node (SCOPE_REF, scope, name);\n+  tree result = build_nt (SCOPE_REF, scope, name);\n   enter_scope_of (result);\n   return result;\n }"}, {"sha": "1cf0af9362e3ee43d0db96ec9ec6cebb4305364a", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718b8ea51f0736646f9cf8a9d5eb4305a12e835e/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718b8ea51f0736646f9cf8a9d5eb4305a12e835e/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=718b8ea51f0736646f9cf8a9d5eb4305a12e835e", "patch": "@@ -1855,12 +1855,12 @@ build_module_descriptor ()\n     /* void _GLOBAL_$I$<gnyf> () {objc_execClass (&L_OBJC_MODULES);}  */\n \n     start_function (void_list_node_1,\n-\t\t    build_parse_node (CALL_EXPR, init_function_name,\n-\t\t\t\t      /* This has the format of the output\n-\t\t\t\t\t of get_parm_info.  */\n-\t\t\t\t      tree_cons (NULL_TREE, NULL_TREE,\n-\t\t\t\t\t\t void_list_node_1),\n-\t\t\t\t      NULL_TREE),\n+\t\t    build_nt (CALL_EXPR, init_function_name,\n+\t\t\t      /* This has the format of the output\n+\t\t\t\t of get_parm_info.  */\n+\t\t\t      tree_cons (NULL_TREE, NULL_TREE,\n+\t\t\t\t\t void_list_node_1),\n+\t\t\t      NULL_TREE),\n \t\t    NULL_TREE, NULL_TREE);\n #if 0 /* This should be turned back on later\n \t for the systems where collect is not needed.  */"}, {"sha": "6e8a32e65be780ffb8eec86f48b4208b20cccf16", "filename": "gcc/tree.c", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718b8ea51f0736646f9cf8a9d5eb4305a12e835e/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718b8ea51f0736646f9cf8a9d5eb4305a12e835e/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=718b8ea51f0736646f9cf8a9d5eb4305a12e835e", "patch": "@@ -2504,36 +2504,6 @@ build_nt VPARAMS ((enum tree_code code, ...))\n   return t;\n }\n \n-/* Similar to `build_nt', except we build\n-   on the temp_decl_obstack, regardless.  */\n-\n-tree\n-build_parse_node VPARAMS ((enum tree_code code, ...))\n-{\n-#ifndef ANSI_PROTOTYPES\n-  enum tree_code code;\n-#endif\n-  va_list p;\n-  register tree t;\n-  register int length;\n-  register int i;\n-\n-  VA_START (p, code);\n-\n-#ifndef ANSI_PROTOTYPES\n-  code = va_arg (p, enum tree_code);\n-#endif\n-\n-  t = make_node (code);\n-  length = TREE_CODE_LENGTH (code);\n-\n-  for (i = 0; i < length; i++)\n-    TREE_OPERAND (t, i) = va_arg (p, tree);\n-\n-  va_end (p);\n-  return t;\n-}\n-\n #if 0\n /* Commented out because this wants to be done very\n    differently.  See cp-lex.c.  */"}, {"sha": "1ff74410a94fa71ff315bbcc7b3faa5f5fed0f83", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718b8ea51f0736646f9cf8a9d5eb4305a12e835e/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718b8ea51f0736646f9cf8a9d5eb4305a12e835e/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=718b8ea51f0736646f9cf8a9d5eb4305a12e835e", "patch": "@@ -1915,7 +1915,6 @@ extern tree maybe_get_identifier\tPARAMS ((const char *));\n \n extern tree build\t\t\tPARAMS ((enum tree_code, tree, ...));\n extern tree build_nt\t\t\tPARAMS ((enum tree_code, ...));\n-extern tree build_parse_node\t\tPARAMS ((enum tree_code, ...));\n \n extern tree build_int_2_wide\t\tPARAMS ((unsigned HOST_WIDE_INT, HOST_WIDE_INT));\n extern tree build_real\t\t\tPARAMS ((tree, REAL_VALUE_TYPE));"}]}