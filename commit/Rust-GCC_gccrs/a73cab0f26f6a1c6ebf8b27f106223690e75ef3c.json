{"sha": "a73cab0f26f6a1c6ebf8b27f106223690e75ef3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTczY2FiMGYyNmY2YTFjNmViZjhiMjdmMTA2MjIzNjkwZTc1ZWYzYw==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@cygnus.com", "date": "1998-03-21T23:49:35Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-03-21T23:49:35Z"}, "message": "Makefile.in: Various fixes for building cygwin32 native toolchains.\n\n        * Makefile.in: Various fixes for building cygwin32 native toolchains.\n        * Make-lang.in: Likewise.\n\nCo-Authored-By: Geoff Noer <noer@cygnus.com>\n\nFrom-SVN: r18745", "tree": {"sha": "a277648f5fd4f548abddcc6de9a81cf508a32f6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a277648f5fd4f548abddcc6de9a81cf508a32f6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a73cab0f26f6a1c6ebf8b27f106223690e75ef3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a73cab0f26f6a1c6ebf8b27f106223690e75ef3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a73cab0f26f6a1c6ebf8b27f106223690e75ef3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a73cab0f26f6a1c6ebf8b27f106223690e75ef3c/comments", "author": null, "committer": null, "parents": [{"sha": "35d541d4a8efb9c785782d9c504406fe10376488", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35d541d4a8efb9c785782d9c504406fe10376488", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35d541d4a8efb9c785782d9c504406fe10376488"}], "stats": {"total": 66, "additions": 39, "deletions": 27}, "files": [{"sha": "b3fe9fc99351a44f9a4c96d47cafa436d10b9e68", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73cab0f26f6a1c6ebf8b27f106223690e75ef3c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73cab0f26f6a1c6ebf8b27f106223690e75ef3c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a73cab0f26f6a1c6ebf8b27f106223690e75ef3c", "patch": "@@ -1,3 +1,9 @@\n+Sun Mar 22 00:50:42 1998  Nick Clifton  <nickc@cygnus.com>\n+                          Geoff Noer    <noer@cygnus.com>\n+\n+\t* Makefile.in: Various fixes for building cygwin32 native toolchains.\n+\t* Make-lang.in: Likewise.\n+\n Fri Mar 20 18:07:39 1998  Kriang Lerdsuwanakij  <lerdsuwa@scf.usc.edu>\n \n \t* pt.c (tsubst, TEMPLATE_TEMPLATE_PARM): Simplify."}, {"sha": "6490c7e1d666f290209713fc5ce959337d7332ae", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73cab0f26f6a1c6ebf8b27f106223690e75ef3c/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73cab0f26f6a1c6ebf8b27f106223690e75ef3c/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=a73cab0f26f6a1c6ebf8b27f106223690e75ef3c", "patch": "@@ -70,7 +70,7 @@ CXX_LIB2SRCS = $(srcdir)/cp/new.cc $(srcdir)/cp/new1.cc $(srcdir)/cp/new2.cc \\\n # Note that it would be nice to move the dependency on g++\n # into the C++ rule, but that needs a little bit of work\n # to do the right thing within all.cross.\n-C++ c++: cc1plus\n+C++ c++: cc1plus$(exeext)\n \n # Tell GNU make to ignore these if they exist.\n .PHONY: C++ c++\n@@ -124,9 +124,9 @@ CXX_SRCS = $(srcdir)/cp/call.c $(srcdir)/cp/decl2.c \\\n  $(srcdir)/cp/parse.y $(srcdir)/cp/sig.c $(srcdir)/cp/typeck2.c \\\n  $(srcdir)/cp/repo.c $(srcdir)/cp/semantics.c\n \n-cc1plus: $(P) $(CXX_SRCS) $(LIBDEPS) stamp-objlist c-common.o c-pragma.o \\\n+cc1plus$(exeext): $(P) $(CXX_SRCS) $(LIBDEPS) stamp-objlist c-common.o c-pragma.o \\\n \t$(srcdir)/cp/cp-tree.h $(srcdir)/cp/cp-tree.def\n-\tcd cp; $(MAKE) $(FLAGS_TO_PASS) $(CXX_FLAGS_TO_PASS) ../cc1plus\n+\tcd cp; $(MAKE) $(FLAGS_TO_PASS) $(CXX_FLAGS_TO_PASS) ../cc1plus$(exeext)\n #\f\n # Build hooks:\n \n@@ -139,40 +139,40 @@ c++.info:\n c++.dvi:\n \n # C++ language-support library pieces for libgcc.\n-tinfo.o: cc1plus $(srcdir)/cp/tinfo.cc\n+tinfo.o: cc1plus$(exeext) $(srcdir)/cp/tinfo.cc\n \t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) \\\n \t  -c $(srcdir)/cp/tinfo.cc\n-tinfo2.o: cc1plus $(srcdir)/cp/tinfo2.cc\n+tinfo2.o: cc1plus$(exeext) $(srcdir)/cp/tinfo2.cc\n \t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) \\\n \t  -c $(srcdir)/cp/tinfo2.cc\n-exception.o: cc1plus $(srcdir)/cp/exception.cc\n+exception.o: cc1plus$(exeext) $(srcdir)/cp/exception.cc\n \t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) \\\n \t  -c -fexceptions $(srcdir)/cp/exception.cc\n-new.o: cc1plus $(srcdir)/cp/new.cc\n+new.o: cc1plus$(exeext) $(srcdir)/cp/new.cc\n \t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) \\\n \t  -c $(srcdir)/cp/new.cc\n-opnew.o: cc1plus $(srcdir)/cp/new1.cc\n+opnew.o: cc1plus$(exeext) $(srcdir)/cp/new1.cc\n \t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) \\\n \t  -c $(srcdir)/cp/new1.cc -DL_op_new -o opnew.o\n-opnewnt.o: cc1plus $(srcdir)/cp/new1.cc\n+opnewnt.o: cc1plus$(exeext) $(srcdir)/cp/new1.cc\n \t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) \\\n \t  -c $(srcdir)/cp/new1.cc -DL_op_newnt -o opnewnt.o\n-opvnew.o: cc1plus $(srcdir)/cp/new2.cc\n+opvnew.o: cc1plus$(exeext) $(srcdir)/cp/new2.cc\n \t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) \\\n \t  -c $(srcdir)/cp/new2.cc -DL_op_vnew -o opvnew.o\n-opvnewnt.o: cc1plus $(srcdir)/cp/new2.cc\n+opvnewnt.o: cc1plus$(exeext) $(srcdir)/cp/new2.cc\n \t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) \\\n \t  -c $(srcdir)/cp/new2.cc -DL_op_vnewnt -o opvnewnt.o\n-opdel.o: cc1plus $(srcdir)/cp/new2.cc\n+opdel.o: cc1plus$(exeext) $(srcdir)/cp/new2.cc\n \t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) \\\n \t  -c $(srcdir)/cp/new2.cc -DL_op_delete -o opdel.o\n-opdelnt.o: cc1plus $(srcdir)/cp/new2.cc\n+opdelnt.o: cc1plus$(exeext) $(srcdir)/cp/new2.cc\n \t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) \\\n \t  -c $(srcdir)/cp/new2.cc -DL_op_delnt -o opdelnt.o\n-opvdel.o: cc1plus $(srcdir)/cp/new2.cc\n+opvdel.o: cc1plus$(exeext) $(srcdir)/cp/new2.cc\n \t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) \\\n \t  -c $(srcdir)/cp/new2.cc -DL_op_vdel -o opvdel.o\n-opvdelnt.o: cc1plus $(srcdir)/cp/new2.cc\n+opvdelnt.o: cc1plus$(exeext) $(srcdir)/cp/new2.cc\n \t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) \\\n \t  -c $(srcdir)/cp/new2.cc -DL_op_vdelnt -o opvdelnt.o\n "}, {"sha": "77e81960e2ce7def9ea6fb5ac523e4d227c95868", "filename": "gcc/cp/Makefile.in", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73cab0f26f6a1c6ebf8b27f106223690e75ef3c/gcc%2Fcp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73cab0f26f6a1c6ebf8b27f106223690e75ef3c/gcc%2Fcp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMakefile.in?ref=a73cab0f26f6a1c6ebf8b27f106223690e75ef3c", "patch": "@@ -125,7 +125,7 @@ all: all.indirect\n #\f\n # Now figure out from those variables how to compile and link.\n \n-all.indirect: Makefile ../cc1plus\n+all.indirect: Makefile ../cc1plus$(exeext)\n \n # IN_GCC tells obstack.h that we are using gcc's <stddef.h> file.\n INTERNAL_CFLAGS = $(CROSS) -DIN_GCC @extra_c_flags@\n@@ -172,15 +172,15 @@ CXX_OBJS = call.o decl.o errfn.o expr.o pt.o sig.o typeck2.o \\\n OBJS = `cat ../stamp-objlist` ../c-common.o ../c-pragma.o\n OBJDEPS = ../stamp-objlist ../c-common.o ../c-pragma.o\n \n-compiler: ../cc1plus\n-../cc1plus: $(P) $(CXX_OBJS) $(OBJDEPS) $(LIBDEPS)\n+compiler: ../cc1plus$(exeext)\n+../cc1plus$(exeext): $(P) $(CXX_OBJS) $(OBJDEPS) $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ \\\n \t      $(CXX_OBJS) $(OBJS) $(LIBS)\n \n Makefile: $(srcdir)/Makefile.in $(srcdir)/../configure\n \tcd ..; $(SHELL) config.status\n \n-native: config.status ../cc1plus\n+native: config.status ../cc1plus$(exeext)\n #\f\n # Compiling object files from source files.\n \n@@ -202,7 +202,7 @@ parse.o : $(PARSE_C) $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h lex.h \\\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(BIG_SWITCHFLAG) \\\n   `echo $(PARSE_C) | sed 's,^\\./,,'`\n \n-CONFLICTS = expect 19 shift/reduce conflicts and 39 reduce/reduce conflicts.\n+CONFLICTS = expect 21 shift/reduce conflicts and 49 reduce/reduce conflicts.\n $(PARSE_H) : $(PARSE_C)\n $(PARSE_C) : $(srcdir)/parse.y\n \t@echo $(CONFLICTS)"}, {"sha": "f39a6f7fef934aa5da2abdc0bc079f59dce7d1f1", "filename": "gcc/f/ChangeLog.egcs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73cab0f26f6a1c6ebf8b27f106223690e75ef3c/gcc%2Ff%2FChangeLog.egcs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73cab0f26f6a1c6ebf8b27f106223690e75ef3c/gcc%2Ff%2FChangeLog.egcs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog.egcs?ref=a73cab0f26f6a1c6ebf8b27f106223690e75ef3c", "patch": "@@ -1,3 +1,9 @@\n+Sun Mar 22 00:50:42 1998  Nick Clifton  <nickc@cygnus.com>\n+                          Geoff Noer    <noer@cygnus.com>\n+\n+\t* Makefile.in: Various fixes for building cygwin32 native toolchains.\n+\t* Make-lang.in: Likewise.\n+\n Thu Mar 12 09:39:40 1998  Manfred Hollstein  <manfred@s-direktnet.de>\n \n \t* lang-specs.h: Properly put brackets around array elements in initializer."}, {"sha": "2c2faadc3f0e00f65010f9d63d608d0b488dffdc", "filename": "gcc/f/Make-lang.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73cab0f26f6a1c6ebf8b27f106223690e75ef3c/gcc%2Ff%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73cab0f26f6a1c6ebf8b27f106223690e75ef3c/gcc%2Ff%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FMake-lang.in?ref=a73cab0f26f6a1c6ebf8b27f106223690e75ef3c", "patch": "@@ -87,7 +87,7 @@ G77_CROSS_NAME = `t='$(program_transform_cross_name)'; echo g77 | sed $$t`\n # Note that it would be nice to move the dependency on g77\n # into the F77 rule, but that needs a little bit of work\n # to do the right thing within all.cross.\n-F77 f77: f771\n+F77 f77: f771$(exeext)\n \n # Tell GNU make to ignore these if they exist.\n .PHONY: F77 f77 f77.all.build f77.all.cross \\\n@@ -228,8 +228,8 @@ F77_SRCS = \\\n  $(srcdir)/f/where.c \\\n  $(srcdir)/f/where.h\n \n-f771: $(P) $(F77_SRCS) $(LIBDEPS) stamp-objlist f/Makefile\n-\t$(MAKE) -f f/Makefile $(FLAGS_TO_PASS) VPATH=$(srcdir) srcdir=$(srcdir) f771\n+f771:$(exeext) $(P) $(F77_SRCS) $(LIBDEPS) stamp-objlist f/Makefile\n+\t$(MAKE) -f f/Makefile $(FLAGS_TO_PASS) VPATH=$(srcdir) srcdir=$(srcdir) f771$(exeext)\n \n f/Makefile: $(srcdir)/f/Makefile.in $(srcdir)/configure\n \t$(SHELL) config.status"}, {"sha": "4d502cb72bdee010cfb2ed8b33fb1033e6b26d9b", "filename": "gcc/f/Makefile.in", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73cab0f26f6a1c6ebf8b27f106223690e75ef3c/gcc%2Ff%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73cab0f26f6a1c6ebf8b27f106223690e75ef3c/gcc%2Ff%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FMakefile.in?ref=a73cab0f26f6a1c6ebf8b27f106223690e75ef3c", "patch": "@@ -139,7 +139,7 @@ all: all.indirect\n #\f\n # Now figure out from those variables how to compile and link.\n \n-all.indirect: f/Makefile f771\n+all.indirect: f/Makefile f771$(exeext)\n \n # IN_GCC tells obstack.h that we are using gcc's <stddef.h> file.\n INTERNAL_CFLAGS = $(CROSS) -DIN_GCC\n@@ -253,9 +253,9 @@ F77_OBJS = \\\n OBJS = `cat stamp-objlist | sed -e \"s:  : :g\" -e \"s: : f/:g\"`\n OBJDEPS = stamp-objlist\n \n-compiler: f771\n+compiler: f771$(exeext)\n # This is now meant to be built in the top level directory, not `f':\n-f771: $(P) f/Makefile $(F77_OBJS) $(OBJDEPS) $(LIBDEPS)\n+f771$(exeext): $(P) f/Makefile $(F77_OBJS) $(OBJDEPS) $(LIBDEPS)\n \trm -f f771$(exeext)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) $(F771_LDFLAGS) -o $@ \\\n \t      $(F77_OBJS) $(OBJS) $(LIBS)\n@@ -268,7 +268,7 @@ f/Makefile:\n \n Makefile: $(srcdir)/f/Makefile.in $(srcdir)/configure\n \n-native: f771\n+native: f771$(exeext)\n #\f\n # Compiling object files from source files.\n "}]}