{"sha": "9f5396713d9e188bad160c5816f3bfd21b6f32ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY1Mzk2NzEzZDllMTg4YmFkMTYwYzU4MTZmM2JmZDIxYjZmMzJjYQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-12-14T13:12:11Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-12-14T13:12:11Z"}, "message": "re PR middle-end/30172 (Operations with partly constant complex values not folded)\n\n2006-12-14  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/30172\n\t* fold-const.c (fold_binary): Fold __complex__ ( x, 0 )\n\t+ __complex__ ( 0, y ) to __complex__ ( x, y ).\n\tFold __complex__ (x, y) * +-I to __complex__ (-+y, +-x).\n\n\t* gcc.dg/pr30172-1.c: New testcase.\n\nFrom-SVN: r119859", "tree": {"sha": "7529cb235a0fc6106fa9a66695f0d7ae23d8c60f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7529cb235a0fc6106fa9a66695f0d7ae23d8c60f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f5396713d9e188bad160c5816f3bfd21b6f32ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f5396713d9e188bad160c5816f3bfd21b6f32ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f5396713d9e188bad160c5816f3bfd21b6f32ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f5396713d9e188bad160c5816f3bfd21b6f32ca/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "85aef79f75e6be8e8a8d7a1111f6110b98a609ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85aef79f75e6be8e8a8d7a1111f6110b98a609ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85aef79f75e6be8e8a8d7a1111f6110b98a609ca"}], "stats": {"total": 84, "additions": 84, "deletions": 0}, "files": [{"sha": "c81598c1d4387c44bdc16a5eac02f163eec5b642", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5396713d9e188bad160c5816f3bfd21b6f32ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5396713d9e188bad160c5816f3bfd21b6f32ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f5396713d9e188bad160c5816f3bfd21b6f32ca", "patch": "@@ -1,3 +1,10 @@\n+2006-12-14  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/30172\n+\t* fold-const.c (fold_binary): Fold __complex__ ( x, 0 )\n+\t+ __complex__ ( 0, y ) to __complex__ ( x, y ).\n+\tFold __complex__ (x, y) * +-I to __complex__ (-+y, +-x).\n+\n 2006-12-14  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/30198"}, {"sha": "18746096b5a3cac28c3d2be43a583860b66f91c0", "filename": "gcc/fold-const.c", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5396713d9e188bad160c5816f3bfd21b6f32ca/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5396713d9e188bad160c5816f3bfd21b6f32ca/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=9f5396713d9e188bad160c5816f3bfd21b6f32ca", "patch": "@@ -8755,6 +8755,41 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t\t\t\t    fold_convert (type, tem));\n \t    }\n \n+\t  /* Fold __complex__ ( x, 0 ) + __complex__ ( 0, y )\n+\t     to __complex__ ( x, y ).  This is not the same for SNaNs or\n+\t     if singed zeros are involved.  */\n+\t  if (!HONOR_SNANS (TYPE_MODE (TREE_TYPE (arg0)))\n+              && !HONOR_SIGNED_ZEROS (TYPE_MODE (TREE_TYPE (arg0)))\n+\t      && COMPLEX_FLOAT_TYPE_P (TREE_TYPE (arg0)))\n+\t    {\n+\t      tree rtype = TREE_TYPE (TREE_TYPE (arg0));\n+\t      tree arg0r = fold_unary (REALPART_EXPR, rtype, arg0);\n+\t      tree arg0i = fold_unary (IMAGPART_EXPR, rtype, arg0);\n+\t      bool arg0rz = false, arg0iz = false;\n+\t      if ((arg0r && (arg0rz = real_zerop (arg0r)))\n+\t\t  || (arg0i && (arg0iz = real_zerop (arg0i))))\n+\t\t{\n+\t\t  tree arg1r = fold_unary (REALPART_EXPR, rtype, arg1);\n+\t\t  tree arg1i = fold_unary (IMAGPART_EXPR, rtype, arg1);\n+\t\t  if (arg0rz && arg1i && real_zerop (arg1i))\n+\t\t    {\n+\t\t      tree rp = arg1r ? arg1r\n+\t\t\t\t  : build1 (REALPART_EXPR, rtype, arg1);\n+\t\t      tree ip = arg0i ? arg0i\n+\t\t\t\t  : build1 (IMAGPART_EXPR, rtype, arg0);\n+\t\t      return fold_build2 (COMPLEX_EXPR, type, rp, ip);\n+\t\t    }\n+\t\t  else if (arg0iz && arg1r && real_zerop (arg1r))\n+\t\t    {\n+\t\t      tree rp = arg0r ? arg0r\n+\t\t\t\t  : build1 (REALPART_EXPR, rtype, arg0);\n+\t\t      tree ip = arg1i ? arg1i\n+\t\t\t\t  : build1 (IMAGPART_EXPR, rtype, arg1);\n+\t\t      return fold_build2 (COMPLEX_EXPR, type, rp, ip);\n+\t\t    }\n+\t\t}\n+\t    }\n+\n           if (flag_unsafe_math_optimizations\n \t      && (TREE_CODE (arg0) == RDIV_EXPR || TREE_CODE (arg0) == MULT_EXPR)\n \t      && (TREE_CODE (arg1) == RDIV_EXPR || TREE_CODE (arg1) == MULT_EXPR)\n@@ -9207,6 +9242,28 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t\t}\n \t    }\n \n+\t  /* Fold z * +-I to __complex__ (-+__imag z, +-__real z).\n+\t     This is not the same for NaNs or if singed zeros are\n+\t     involved.  */\n+\t  if (!HONOR_NANS (TYPE_MODE (TREE_TYPE (arg0)))\n+              && !HONOR_SIGNED_ZEROS (TYPE_MODE (TREE_TYPE (arg0)))\n+\t      && COMPLEX_FLOAT_TYPE_P (TREE_TYPE (arg0))\n+\t      && TREE_CODE (arg1) == COMPLEX_CST\n+\t      && real_zerop (TREE_REALPART (arg1)))\n+\t    {\n+\t      tree rtype = TREE_TYPE (TREE_TYPE (arg0));\n+\t      if (real_onep (TREE_IMAGPART (arg1)))\n+\t\treturn fold_build2 (COMPLEX_EXPR, type,\n+\t\t\t\t    negate_expr (fold_build1 (IMAGPART_EXPR,\n+\t\t\t\t\t\t\t      rtype, arg0)),\n+\t\t\t\t    fold_build1 (REALPART_EXPR, rtype, arg0));\n+\t      else if (real_minus_onep (TREE_IMAGPART (arg1)))\n+\t\treturn fold_build2 (COMPLEX_EXPR, type,\n+\t\t\t\t    fold_build1 (IMAGPART_EXPR, rtype, arg0),\n+\t\t\t\t    negate_expr (fold_build1 (REALPART_EXPR,\n+\t\t\t\t\t\t\t      rtype, arg0)));\n+\t    }\n+\n \t  /* Optimize z * conj(z) for floating point complex numbers.\n \t     Guarded by flag_unsafe_math_optimizations as non-finite\n \t     imaginary components don't produce scalar results.  */"}, {"sha": "296a34ca7c3081beaf31dba7a1fe509fd09eace9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5396713d9e188bad160c5816f3bfd21b6f32ca/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5396713d9e188bad160c5816f3bfd21b6f32ca/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9f5396713d9e188bad160c5816f3bfd21b6f32ca", "patch": "@@ -1,3 +1,8 @@\n+2006-12-14  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/30172\n+\t* gcc.dg/pr30172-1.c: New testcase.\n+\n 2006-12-14  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/30198"}, {"sha": "14b5fa515f69ad637964adf7e7c36c609a21a23a", "filename": "gcc/testsuite/gcc.dg/pr30172-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5396713d9e188bad160c5816f3bfd21b6f32ca/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30172-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5396713d9e188bad160c5816f3bfd21b6f32ca/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30172-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30172-1.c?ref=9f5396713d9e188bad160c5816f3bfd21b6f32ca", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-funsafe-math-optimizations -ffinite-math-only -fdump-tree-gimple\" } */\n+\n+_Complex double test1 (double x) { return x + 1.i; }\n+_Complex double test2 (double x) { return 1 + x * 1.i; }\n+_Complex double test3 (double x, double y) { return x + y * 1.i; }\n+_Complex double test4 (double x, double y) { return (x + y * 1.i) * 1.i; }\n+_Complex double test5 (double x, double y) { return (x + y * 1.i) * -1.i; }\n+\n+/* { dg-final { scan-tree-dump \"COMPLEX_EXPR <x, 1.0e\\\\+0>\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"COMPLEX_EXPR <1.0e\\\\+0, x>\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"COMPLEX_EXPR <x, y>\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"D.* = -y;\\n.*COMPLEX_EXPR <D.*, x>\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"D.* = -x;\\n.*COMPLEX_EXPR <y, D.*>\" \"gimple\" } } */\n+/* { dg-final { cleanup-tree-dump \"original\" } } */"}]}