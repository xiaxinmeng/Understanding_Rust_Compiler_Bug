{"sha": "f9fcf754825a1e01033336f84c18690aaa971a6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjlmY2Y3NTQ4MjVhMWUwMTAzMzMzNmY4NGMxODY5MGFhYTk3MWE2Zg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-08-02T12:27:53Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-08-02T12:30:38Z"}, "message": "Optimize x ? bswap(x) : 0 in tree-ssa-phiopt\n\nMany thanks again to Jakub Jelinek for a speedy fix for PR 101642.\nInterestingly, that test case \"bswap16(x) ? : x\" also reveals a\nmissed optimization opportunity.  The resulting \"x ? bswap(x) : 0\"\ncan be further simplified to just bswap(x).\n\nConveniently, tree-ssa-phiopt.c already recognizes/optimizes the\nrelated \"x ? popcount(x) : 0\", so this patch simply makes that\ntransformation make general, additionally handling bswap, parity,\nffs and clrsb.  All of the required infrastructure is already\npresent thanks to Jakub previously adding support for clz/ctz.\nTo reflect this generalization, the name of the function is changed\nfrom cond_removal_in_popcount_clz_ctz_pattern to the hopefully\nequally descriptive cond_removal_in_builtin_zero_pattern.\n\n2021-08-02  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\t* tree-ssa-phiopt.c (cond_removal_in_builtin_zero_pattern):\n\tRenamed from cond_removal_in_popcount_clz_ctz_pattern.\n\tAdd support for BSWAP, FFS, PARITY and CLRSB builtins.\n\t(tree_ssa_phiop_worker): Update call to function above.\n\ngcc/testsuite/ChangeLog\n\t* gcc.dg/tree-ssa/phi-opt-25.c: New test case.", "tree": {"sha": "6bd92cdbb1929c2e76186091c7aaada8ff503754", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6bd92cdbb1929c2e76186091c7aaada8ff503754"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9fcf754825a1e01033336f84c18690aaa971a6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9fcf754825a1e01033336f84c18690aaa971a6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9fcf754825a1e01033336f84c18690aaa971a6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9fcf754825a1e01033336f84c18690aaa971a6f/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f0c43e97825ee54e3779afbedcd0def12443001", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f0c43e97825ee54e3779afbedcd0def12443001", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f0c43e97825ee54e3779afbedcd0def12443001"}], "stats": {"total": 120, "additions": 109, "deletions": 11}, "files": [{"sha": "c52c92e1d4503fa71dc98669767aebad9ee45f4a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/phi-opt-25.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9fcf754825a1e01033336f84c18690aaa971a6f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9fcf754825a1e01033336f84c18690aaa971a6f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-25.c?ref=f9fcf754825a1e01033336f84c18690aaa971a6f", "patch": "@@ -0,0 +1,83 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+unsigned short test_bswap16(unsigned short x)\n+{\n+  return x ? __builtin_bswap16(x) : 0;\n+}\n+\n+unsigned int test_bswap32(unsigned int x)\n+{\n+  return x ? __builtin_bswap32(x) : 0;\n+}\n+\n+unsigned long long test_bswap64(unsigned long long x)\n+{\n+  return x ? __builtin_bswap64(x) : 0;\n+}\n+\n+int test_clrsb(int x)\n+{\n+  return x ? __builtin_clrsb(x) : (__SIZEOF_INT__*8-1);\n+}\n+\n+int test_clrsbl(long x)\n+{\n+  return x ? __builtin_clrsbl(x) : (__SIZEOF_LONG__*8-1);\n+}\n+\n+int test_clrsbll(long long x)\n+{\n+  return x ? __builtin_clrsbll(x) : (__SIZEOF_LONG_LONG__*8-1);\n+}\n+\n+#if 0\n+/* BUILT_IN_FFS is transformed by match.pd */\n+int test_ffs(unsigned int x)\n+{\n+  return x ? __builtin_ffs(x) : 0;\n+}\n+\n+int test_ffsl(unsigned long x)\n+{\n+  return x ? __builtin_ffsl(x) : 0;\n+}\n+\n+int test_ffsll(unsigned long long x)\n+{\n+  return x ? __builtin_ffsll(x) : 0;\n+}\n+#endif\n+\n+int test_parity(int x)\n+{\n+  return x ? __builtin_parity(x) : 0;\n+}\n+\n+int test_parityl(long x)\n+{\n+  return x ? __builtin_parityl(x) : 0;\n+}\n+\n+int test_parityll(long long x)\n+{\n+  return x ? __builtin_parityll(x) : 0;\n+}\n+\n+int test_popcount(int x)\n+{\n+  return x ? __builtin_popcount(x) : 0;\n+}\n+\n+int test_popcountl(long x)\n+{\n+  return x ? __builtin_popcountl(x) : 0;\n+}\n+\n+int test_popcountll(long long x)\n+{\n+  return x ? __builtin_popcountll(x) : 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"goto\" \"optimized\" } } */\n+"}, {"sha": "66af902e37ec496e57eb1cf65d599681c7a5cbc5", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9fcf754825a1e01033336f84c18690aaa971a6f/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9fcf754825a1e01033336f84c18690aaa971a6f/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=f9fcf754825a1e01033336f84c18690aaa971a6f", "patch": "@@ -66,9 +66,9 @@ static bool minmax_replacement (basic_block, basic_block,\n \t\t\t\tedge, edge, gphi *, tree, tree);\n static bool spaceship_replacement (basic_block, basic_block,\n \t\t\t\t   edge, edge, gphi *, tree, tree);\n-static bool cond_removal_in_popcount_clz_ctz_pattern (basic_block, basic_block,\n-\t\t\t\t\t\t      edge, edge, gphi *,\n-\t\t\t\t\t\t      tree, tree);\n+static bool cond_removal_in_builtin_zero_pattern (basic_block, basic_block,\n+\t\t\t\t\t\t  edge, edge, gphi *,\n+\t\t\t\t\t\t  tree, tree);\n static bool cond_store_replacement (basic_block, basic_block, edge, edge,\n \t\t\t\t    hash_set<tree> *);\n static bool cond_if_else_store_replacement (basic_block, basic_block, basic_block);\n@@ -350,9 +350,8 @@ tree_ssa_phiopt_worker (bool do_store_elim, bool do_hoist_loads, bool early_p)\n \t\t\t\t\t       early_p))\n \t    cfgchanged = true;\n \t  else if (!early_p\n-\t\t   && cond_removal_in_popcount_clz_ctz_pattern (bb, bb1, e1,\n-\t\t\t\t\t\t\t\te2, phi, arg0,\n-\t\t\t\t\t\t\t\targ1))\n+\t\t   && cond_removal_in_builtin_zero_pattern (bb, bb1, e1, e2,\n+\t\t\t\t\t\t\t    phi, arg0, arg1))\n \t    cfgchanged = true;\n \t  else if (minmax_replacement (bb, bb1, e1, e2, phi, arg0, arg1))\n \t    cfgchanged = true;\n@@ -2466,7 +2465,8 @@ spaceship_replacement (basic_block cond_bb, basic_block middle_bb,\n   return true;\n }\n \n-/* Convert\n+/* Optimize x ? __builtin_fun (x) : C, where C is __builtin_fun (0).\n+   Convert\n \n    <bb 2>\n    if (b_4(D) != 0)\n@@ -2498,10 +2498,10 @@ spaceship_replacement (basic_block cond_bb, basic_block middle_bb,\n    instead of 0 above it uses the value from that macro.  */\n \n static bool\n-cond_removal_in_popcount_clz_ctz_pattern (basic_block cond_bb,\n-\t\t\t\t\t  basic_block middle_bb,\n-\t\t\t\t\t  edge e1, edge e2, gphi *phi,\n-\t\t\t\t\t  tree arg0, tree arg1)\n+cond_removal_in_builtin_zero_pattern (basic_block cond_bb,\n+\t\t\t\t      basic_block middle_bb,\n+\t\t\t\t      edge e1, edge e2, gphi *phi,\n+\t\t\t\t      tree arg0, tree arg1)\n {\n   gimple *cond;\n   gimple_stmt_iterator gsi, gsi_from;\n@@ -2549,6 +2549,12 @@ cond_removal_in_popcount_clz_ctz_pattern (basic_block cond_bb,\n   int val = 0;\n   switch (cfn)\n     {\n+    case CFN_BUILT_IN_BSWAP16:\n+    case CFN_BUILT_IN_BSWAP32:\n+    case CFN_BUILT_IN_BSWAP64:\n+    case CFN_BUILT_IN_BSWAP128:\n+    CASE_CFN_FFS:\n+    CASE_CFN_PARITY:\n     CASE_CFN_POPCOUNT:\n       break;\n     CASE_CFN_CLZ:\n@@ -2577,6 +2583,15 @@ cond_removal_in_popcount_clz_ctz_pattern (basic_block cond_bb,\n \t    }\n \t}\n       return false;\n+    case BUILT_IN_CLRSB:\n+      val = TYPE_PRECISION (integer_type_node) - 1;\n+      break;\n+    case BUILT_IN_CLRSBL:\n+      val = TYPE_PRECISION (long_integer_type_node) - 1;\n+      break;\n+    case BUILT_IN_CLRSBLL:\n+      val = TYPE_PRECISION (long_long_integer_type_node) - 1;\n+      break;\n     default:\n       return false;\n     }"}]}