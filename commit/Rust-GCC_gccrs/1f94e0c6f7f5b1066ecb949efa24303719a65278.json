{"sha": "1f94e0c6f7f5b1066ecb949efa24303719a65278", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY5NGUwYzZmN2Y1YjEwNjZlY2I5NDllZmEyNDMwMzcxOWE2NTI3OA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-05-06T18:30:11Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-05-06T18:30:11Z"}, "message": "Use backend interface for string types.\n\nFrom-SVN: r173502", "tree": {"sha": "c18af34edf1fff20f42a2c6e71229c91f0d3bd97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c18af34edf1fff20f42a2c6e71229c91f0d3bd97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f94e0c6f7f5b1066ecb949efa24303719a65278", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f94e0c6f7f5b1066ecb949efa24303719a65278", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f94e0c6f7f5b1066ecb949efa24303719a65278", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f94e0c6f7f5b1066ecb949efa24303719a65278/comments", "author": null, "committer": null, "parents": [{"sha": "2e8d9212daaa8c6162ab872485dd03d28c96ea4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e8d9212daaa8c6162ab872485dd03d28c96ea4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e8d9212daaa8c6162ab872485dd03d28c96ea4c"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "fe9674153165276ee405ea3ae1aa22bd6639d986", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f94e0c6f7f5b1066ecb949efa24303719a65278/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f94e0c6f7f5b1066ecb949efa24303719a65278/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=1f94e0c6f7f5b1066ecb949efa24303719a65278", "patch": "@@ -2172,14 +2172,27 @@ Type::lookup_complex_type(const char* name)\n // struct with two fields: a pointer to the characters and a length.\n \n tree\n-String_type::do_get_tree(Gogo*)\n-{\n-  static tree struct_type;\n-  return Gogo::builtin_struct(&struct_type, \"__go_string\", NULL_TREE, 2,\n-\t\t\t      \"__data\",\n-\t\t\t      build_pointer_type(unsigned_char_type_node),\n-\t\t\t      \"__length\",\n-\t\t\t      integer_type_node);\n+String_type::do_get_tree(Gogo* gogo)\n+{\n+  static Btype* backend_string_type;\n+  if (backend_string_type == NULL)\n+    {\n+      std::vector<Backend::Btyped_identifier> fields(2);\n+\n+      Type* b = gogo->lookup_global(\"byte\")->type_value();\n+      Type* pb = Type::make_pointer_type(b);\n+      fields[0].name = \"__data\";\n+      fields[0].btype = tree_to_type(pb->get_tree(gogo));\n+      fields[0].location = UNKNOWN_LOCATION;\n+\n+      Type* int_type = Type::lookup_integer_type(\"int\");\n+      fields[1].name = \"__length\";\n+      fields[1].btype = tree_to_type(int_type->get_tree(gogo));\n+      fields[1].location = UNKNOWN_LOCATION;\n+\n+      backend_string_type = gogo->backend()->struct_type(fields);\n+    }\n+  return type_to_tree(backend_string_type);\n }\n \n // Return a tree for the length of STRING."}]}