{"sha": "a27940feffbbff172d8ec84ee825e1997b3d0210", "node_id": "C_kwDOANBUbNoAKGEyNzk0MGZlZmZiYmZmMTcyZDhlYzg0ZWU4MjVlMTk5N2IzZDAyMTA", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-12-02T00:53:51Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-12-02T14:41:27Z"}, "message": "libphobos: Push all callee-save registers on the stack before GC scan on ARM\n\nThis is the library fix for PR103520 that also prevents the garbage\ncollector from releasing live memory.  However this requires that the\nhost compiler has been patched with this fix, so the GC will remain\ndisabled in the D front-end for now until enough time has passed for\nthis to have trickled down into enough releases.\n\nlibphobos/ChangeLog:\n\n\t* libdruntime/core/thread/osthread.d (callWithStackShell): Push all\n\tcallee-save registers on the stack for AArch64 and ARM.", "tree": {"sha": "44d313d2b592708bc7c951aa78d08c925903e756", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44d313d2b592708bc7c951aa78d08c925903e756"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a27940feffbbff172d8ec84ee825e1997b3d0210", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a27940feffbbff172d8ec84ee825e1997b3d0210", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a27940feffbbff172d8ec84ee825e1997b3d0210", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a27940feffbbff172d8ec84ee825e1997b3d0210/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b8830b6f3920b3ec6b9013230c687dc250bb6e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b8830b6f3920b3ec6b9013230c687dc250bb6e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b8830b6f3920b3ec6b9013230c687dc250bb6e9"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "c9bc1305ad06a1e52675b05b61cb67ac2ceccdd3", "filename": "libphobos/libdruntime/core/thread/osthread.d", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27940feffbbff172d8ec84ee825e1997b3d0210/libphobos%2Flibdruntime%2Fcore%2Fthread%2Fosthread.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27940feffbbff172d8ec84ee825e1997b3d0210/libphobos%2Flibdruntime%2Fcore%2Fthread%2Fosthread.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fthread%2Fosthread.d?ref=a27940feffbbff172d8ec84ee825e1997b3d0210", "patch": "@@ -1487,6 +1487,35 @@ in (fn)\n             }}\n             sp = cast(void*)&regs[0];\n         }\n+        else version (AArch64)\n+        {\n+            // Callee-save registers, x19-x28 according to AAPCS64, section\n+            // 5.1.1.  Include x29 fp because it optionally can be a callee\n+            // saved reg\n+            size_t[11] regs = void;\n+            // store the registers in pairs\n+            asm pure nothrow @nogc\n+            {\n+                \"stp x19, x20, %0\" : \"=m\" (regs[ 0]), \"=m\" (regs[1]);\n+                \"stp x21, x22, %0\" : \"=m\" (regs[ 2]), \"=m\" (regs[3]);\n+                \"stp x23, x24, %0\" : \"=m\" (regs[ 4]), \"=m\" (regs[5]);\n+                \"stp x25, x26, %0\" : \"=m\" (regs[ 6]), \"=m\" (regs[7]);\n+                \"stp x27, x28, %0\" : \"=m\" (regs[ 8]), \"=m\" (regs[9]);\n+                \"str x29, %0\"      : \"=m\" (regs[10]);\n+                \"mov %0, sp\"       : \"=r\" (sp);\n+            }\n+        }\n+        else version (ARM)\n+        {\n+            // Callee-save registers, according to AAPCS, section 5.1.1.\n+            // arm and thumb2 instructions\n+            size_t[8] regs = void;\n+            asm pure nothrow @nogc\n+            {\n+                \"stm %0, {r4-r11}\" : : \"r\" (regs.ptr) : \"memory\";\n+                \"mov %0, sp\"       : \"=r\" (sp);\n+            }\n+        }\n         else\n         {\n             __builtin_unwind_init();"}]}