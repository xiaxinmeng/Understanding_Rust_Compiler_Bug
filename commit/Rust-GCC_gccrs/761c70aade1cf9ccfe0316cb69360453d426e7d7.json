{"sha": "761c70aade1cf9ccfe0316cb69360453d426e7d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYxYzcwYWFkZTFjZjljY2ZlMDMxNmNiNjkzNjA0NTNkNDI2ZTdkNw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2002-08-20T23:27:03Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2002-08-20T23:27:03Z"}, "message": "arc.c (output_shift): Use stdio instead of asm_fprintf.\n\n\t* arc.c (output_shift): Use stdio instead of asm_fprintf.\n\t* arm.c (thumb_output_function_prologue): Likewise.\n\t* avr.c (print_operand): Likewise.\n\t* c4x.c (c4x_print_operand): Likewise.\n\t* c4x.h (ASM_OUTPUT_INTERNAL_LABEL, TRAMPOLINE_TEMPLATE,\n\tASM_OUTPUT_REG_PUSH, ASM_OUTPUT_REG_POP): Likewise.\n\t* cris.c (cris_target_asm_function_prologue,\n\tcris_asm_output_mi_thunk): Likewise.\n\t* h8300.c (print_operand): Likewise.\n\t* h8300.h (ASM_OUTPUT_ADDR_VEC_ELT): Likewise.\n\t* ip2k.c (print_operand): Likewise.  Fix format specifier.\n\t* m68hc11.c (asm_print_register, print_operand,\n\tprint_operand_address): Use stdio instead of asm_fprintf.\n\t(print_operand_address): Fix format specifier.\n\t* m68hc11.h (FUNCTION_PROFILER, ASM_OUTPUT_ADDR_DIFF_ELT,\n\tASM_OUTPUT_ADDR_VEC_ELT, ASM_OUTPUT_ALIGN): Use stdio instead of\n\tasm_fprintf.\n\t* m68k/amix.h (ASM_OUTPUT_INTERNAL_LABEL): Likewise.\n\t* m68k/atari.h (ASM_OUTPUT_INTERNAL_LABEL): Likewise.\n\t* m68k.c (m68k_output_function_prologue,\n\tm68k_output_function_epilogue, print_operand): Likewise.\n\t* mmix.c (mmix_asm_output_mi_thunk, mmix_asm_weaken_label):\n\tLikewise.  Fix format specifier.\n\t* mn10200.h (ASM_OUTPUT_ADDR_VEC_ELT): Likewise.\n\t* mn10300.h (ASM_OUTPUT_ADDR_VEC_ELT): Likewise.\n\t* v850.h (ASM_OUTPUT_ADDR_VEC_ELT): Likewise.\n\nFrom-SVN: r56472", "tree": {"sha": "e811092544bd791436a36be808b611cbdf48735e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e811092544bd791436a36be808b611cbdf48735e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/761c70aade1cf9ccfe0316cb69360453d426e7d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/761c70aade1cf9ccfe0316cb69360453d426e7d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/761c70aade1cf9ccfe0316cb69360453d426e7d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/761c70aade1cf9ccfe0316cb69360453d426e7d7/comments", "author": null, "committer": null, "parents": [{"sha": "5ce6f47b378db770b570df0b83c8c24ef4e475e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ce6f47b378db770b570df0b83c8c24ef4e475e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ce6f47b378db770b570df0b83c8c24ef4e475e3"}], "stats": {"total": 291, "additions": 161, "deletions": 130}, "files": [{"sha": "62df30ae85a8b0a94eb36a963adb704148fbdedf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761c70aade1cf9ccfe0316cb69360453d426e7d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761c70aade1cf9ccfe0316cb69360453d426e7d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=761c70aade1cf9ccfe0316cb69360453d426e7d7", "patch": "@@ -1,3 +1,32 @@\n+2002-08-20  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* arc.c (output_shift): Use stdio instead of asm_fprintf.\n+\t* arm.c (thumb_output_function_prologue): Likewise.\n+\t* avr.c (print_operand): Likewise.\n+\t* c4x.c (c4x_print_operand): Likewise.\n+\t* c4x.h (ASM_OUTPUT_INTERNAL_LABEL, TRAMPOLINE_TEMPLATE,\n+\tASM_OUTPUT_REG_PUSH, ASM_OUTPUT_REG_POP): Likewise.\n+\t* cris.c (cris_target_asm_function_prologue,\n+\tcris_asm_output_mi_thunk): Likewise.\n+\t* h8300.c (print_operand): Likewise.\n+\t* h8300.h (ASM_OUTPUT_ADDR_VEC_ELT): Likewise.\n+\t* ip2k.c (print_operand): Likewise.  Fix format specifier.\n+\t* m68hc11.c (asm_print_register, print_operand,\n+\tprint_operand_address): Use stdio instead of asm_fprintf.\n+\t(print_operand_address): Fix format specifier.\n+\t* m68hc11.h (FUNCTION_PROFILER, ASM_OUTPUT_ADDR_DIFF_ELT,\n+\tASM_OUTPUT_ADDR_VEC_ELT, ASM_OUTPUT_ALIGN): Use stdio instead of\n+\tasm_fprintf.\n+\t* m68k/amix.h (ASM_OUTPUT_INTERNAL_LABEL): Likewise.\n+\t* m68k/atari.h (ASM_OUTPUT_INTERNAL_LABEL): Likewise.\n+\t* m68k.c (m68k_output_function_prologue,\n+\tm68k_output_function_epilogue, print_operand): Likewise.\n+\t* mmix.c (mmix_asm_output_mi_thunk, mmix_asm_weaken_label):\n+\tLikewise.  Fix format specifier.\n+\t* mn10200.h (ASM_OUTPUT_ADDR_VEC_ELT): Likewise.\n+\t* mn10300.h (ASM_OUTPUT_ADDR_VEC_ELT): Likewise.\n+\t* v850.h (ASM_OUTPUT_ADDR_VEC_ELT): Likewise.\n+\n 2002-08-15  Eric Christopher  <echristo@redhat.com>\n \t    Jeff Knaggs  <jknaggs@redhat.com>\n "}, {"sha": "426cc89d8f029e9bcc7d4e043fa89525595903c8", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761c70aade1cf9ccfe0316cb69360453d426e7d7/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761c70aade1cf9ccfe0316cb69360453d426e7d7/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=761c70aade1cf9ccfe0316cb69360453d426e7d7", "patch": "@@ -1553,24 +1553,24 @@ output_shift (operands)\n \t      output_asm_insn (\"sr %4,[lp_end]\", operands);\n \t      output_asm_insn (\"nop\\n\\tnop\", operands);\n \t      if (flag_pic)\n-\t\tasm_fprintf (asm_out_file, \"\\t%s single insn loop\\n\",\n-\t\t\t     ASM_COMMENT_START);\n+\t\tfprintf (asm_out_file, \"\\t%s single insn loop\\n\",\n+\t\t\t ASM_COMMENT_START);\n \t      else\n-\t\tasm_fprintf (asm_out_file, \"1:\\t%s single insn loop\\n\",\n-\t\t\t     ASM_COMMENT_START);\n+\t\tfprintf (asm_out_file, \"1:\\t%s single insn loop\\n\",\n+\t\t\t ASM_COMMENT_START);\n \t      output_asm_insn (shift_one, operands);\n \t    }\n \t  else \n \t    {\n-\t      asm_fprintf (asm_out_file, \"1:\\t%s begin shift loop\\n\",\n-\t\t\t   ASM_COMMENT_START);\n+\t      fprintf (asm_out_file, \"1:\\t%s begin shift loop\\n\",\n+\t\t       ASM_COMMENT_START);\n \t      output_asm_insn (\"sub.f %4,%4,1\", operands);\n \t      output_asm_insn (\"nop\", operands);\n \t      output_asm_insn (\"bn.nd 2f\", operands);\n \t      output_asm_insn (shift_one, operands);\n \t      output_asm_insn (\"b.nd 1b\", operands);\n-\t      asm_fprintf (asm_out_file, \"2:\\t%s end shift loop\\n\",\n-\t\t\t   ASM_COMMENT_START);\n+\t      fprintf (asm_out_file, \"2:\\t%s end shift loop\\n\",\n+\t\t       ASM_COMMENT_START);\n \t    }\n \t}\n     }"}, {"sha": "d44ec803eb2fe25199a24dddd65b890e9bfa0814", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761c70aade1cf9ccfe0316cb69360453d426e7d7/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761c70aade1cf9ccfe0316cb69360453d426e7d7/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=761c70aade1cf9ccfe0316cb69360453d426e7d7", "patch": "@@ -10283,13 +10283,13 @@ thumb_output_function_prologue (f, size)\n       \n #define STUB_NAME \".real_start_of\"\n       \n-      asm_fprintf (f, \"\\t.code\\t16\\n\");\n+      fprintf (f, \"\\t.code\\t16\\n\");\n #ifdef ARM_PE\n       if (arm_dllexport_name_p (name))\n         name = arm_strip_name_encoding (name);\n #endif        \n       asm_fprintf (f, \"\\t.globl %s%U%s\\n\", STUB_NAME, name);\n-      asm_fprintf (f, \"\\t.thumb_func\\n\");\n+      fprintf (f, \"\\t.thumb_func\\n\");\n       asm_fprintf (f, \"%s%U%s:\\n\", STUB_NAME, name);\n     }\n     \n@@ -10299,7 +10299,7 @@ thumb_output_function_prologue (f, size)\n \t{\n \t  int num_pushes;\n \t  \n-\t  asm_fprintf (f, \"\\tpush\\t{\");\n+\t  fprintf (f, \"\\tpush\\t{\");\n \n \t  num_pushes = ARM_NUM_INTS (current_function_pretend_args_size);\n \t  \n@@ -10309,7 +10309,7 @@ thumb_output_function_prologue (f, size)\n \t    asm_fprintf (f, \"%r%s\", regno,\n \t\t\t regno == LAST_ARG_REGNUM ? \"\" : \", \");\n \n-\t  asm_fprintf (f, \"}\\n\");\n+\t  fprintf (f, \"}\\n\");\n \t}\n       else\n \tasm_fprintf (f, \"\\tsub\\t%r, %r, #%d\\n\", "}, {"sha": "e3686b0b73c1e121d812187002a31b028a8ff06a", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761c70aade1cf9ccfe0316cb69360453d426e7d7/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761c70aade1cf9ccfe0316cb69360453d426e7d7/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=761c70aade1cf9ccfe0316cb69360453d426e7d7", "patch": "@@ -1156,12 +1156,12 @@ print_operand (file, x, code)\n \tfatal_insn (\"internal compiler error.  Unknown mode:\", x);\n       REAL_VALUE_FROM_CONST_DOUBLE (rv, x);\n       REAL_VALUE_TO_TARGET_SINGLE (rv, val);\n-      asm_fprintf (file, \"0x%lx\", val);\n+      fprintf (file, \"0x%lx\", val);\n     }\n   else if (code == 'j')\n-    asm_fprintf (file, cond_string (GET_CODE (x)));\n+    fputs (cond_string (GET_CODE (x)), file);\n   else if (code == 'k')\n-    asm_fprintf (file, cond_string (reverse_condition (GET_CODE (x))));\n+    fputs (cond_string (reverse_condition (GET_CODE (x))), file);\n   else\n     print_operand_address (file, x);\n }"}, {"sha": "5b4c5709b31079bbad6b9370d856323902fcf5ee", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761c70aade1cf9ccfe0316cb69360453d426e7d7/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761c70aade1cf9ccfe0316cb69360453d426e7d7/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=761c70aade1cf9ccfe0316cb69360453d426e7d7", "patch": "@@ -1850,7 +1850,7 @@ c4x_print_operand (file, op, letter)\n     {\n     case '#':\t\t\t/* Delayed.  */\n       if (final_sequence)\n-\tasm_fprintf (file, \"d\");\n+\tfprintf (file, \"d\");\n       return;\n     }\n \n@@ -1859,7 +1859,7 @@ c4x_print_operand (file, op, letter)\n     {\n     case 'A':\t\t\t/* Direct address.  */\n       if (code == CONST_INT || code == SYMBOL_REF || code == CONST)\n-\tasm_fprintf (file, \"@\");\n+\tfprintf (file, \"@\");\n       break;\n \n     case 'H':\t\t\t/* Sethi.  */\n@@ -1892,9 +1892,9 @@ c4x_print_operand (file, op, letter)\n \t  op1 = XEXP (XEXP (op, 0), 1);\n           if (GET_CODE(op1) == CONST_INT || GET_CODE(op1) == SYMBOL_REF)\n \t    {\n-\t      asm_fprintf (file, \"\\t%s\\t@\", TARGET_C3X ? \"ldp\" : \"ldpk\");\n+\t      fprintf (file, \"\\t%s\\t@\", TARGET_C3X ? \"ldp\" : \"ldpk\");\n \t      output_address (XEXP (adjust_address (op, VOIDmode, 1), 0));\n-\t      asm_fprintf (file, \"\\n\");\n+\t      fprintf (file, \"\\n\");\n \t    }\n \t}\n       return;\n@@ -1905,9 +1905,9 @@ c4x_print_operand (file, op, letter)\n \t  && (GET_CODE (XEXP (op, 0)) == CONST\n \t      || GET_CODE (XEXP (op, 0)) == SYMBOL_REF))\n \t{\n-\t  asm_fprintf (file, \"%s\\t@\", TARGET_C3X ? \"ldp\" : \"ldpk\");\n+\t  fprintf (file, \"%s\\t@\", TARGET_C3X ? \"ldp\" : \"ldpk\");\n           output_address (XEXP (op, 0));\n-\t  asm_fprintf (file, \"\\n\\t\");\n+\t  fprintf (file, \"\\n\\t\");\n \t}\n       return;\n \n@@ -1927,7 +1927,7 @@ c4x_print_operand (file, op, letter)\n \n     case 'U':\t\t\t/* Call/callu.  */\n       if (code != SYMBOL_REF)\n-\tasm_fprintf (file, \"u\");\n+\tfprintf (file, \"u\");\n       return;\n \n     default:\n@@ -1964,43 +1964,43 @@ c4x_print_operand (file, op, letter)\n       break;\n       \n     case NE:\n-      asm_fprintf (file, \"ne\");\n+      fprintf (file, \"ne\");\n       break;\n       \n     case EQ:\n-      asm_fprintf (file, \"eq\");\n+      fprintf (file, \"eq\");\n       break;\n       \n     case GE:\n-      asm_fprintf (file, \"ge\");\n+      fprintf (file, \"ge\");\n       break;\n \n     case GT:\n-      asm_fprintf (file, \"gt\");\n+      fprintf (file, \"gt\");\n       break;\n \n     case LE:\n-      asm_fprintf (file, \"le\");\n+      fprintf (file, \"le\");\n       break;\n \n     case LT:\n-      asm_fprintf (file, \"lt\");\n+      fprintf (file, \"lt\");\n       break;\n \n     case GEU:\n-      asm_fprintf (file, \"hs\");\n+      fprintf (file, \"hs\");\n       break;\n \n     case GTU:\n-      asm_fprintf (file, \"hi\");\n+      fprintf (file, \"hi\");\n       break;\n \n     case LEU:\n-      asm_fprintf (file, \"ls\");\n+      fprintf (file, \"ls\");\n       break;\n \n     case LTU:\n-      asm_fprintf (file, \"lo\");\n+      fprintf (file, \"lo\");\n       break;\n \n     case SYMBOL_REF:"}, {"sha": "ace2397a87235ebf89d3245afa5fdcd52054afb1", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761c70aade1cf9ccfe0316cb69360453d426e7d7/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761c70aade1cf9ccfe0316cb69360453d426e7d7/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=761c70aade1cf9ccfe0316cb69360453d426e7d7", "patch": "@@ -1733,7 +1733,7 @@ c4x_file_end (FILE)\n    PREFIX is the class of label and NUM is the number within the class.  */\n \n #define ASM_OUTPUT_INTERNAL_LABEL(FILE, PREFIX, NUM)\t\\\n-asm_fprintf (FILE, \"%s%d:\\n\", PREFIX, NUM)\n+\tfprintf (FILE, \"%s%d:\\n\", PREFIX, NUM)\n \n /* This is how to store into the string LABEL\n    the symbol_ref name of an internal numbered label where\n@@ -1993,27 +1993,27 @@ do { fprintf (asm_out_file, \"\\t.sdef\\t\");\t\t\\\n {\t\t\t\t\t\t\t\t\\\n   if (TARGET_C3X)\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n-      asm_fprintf (FILE, \"\\tldiu\\t0,ar1\\n\");\t\t\t\\\n-      asm_fprintf (FILE, \"\\tlsh\\t16,ar1\\n\");\t\t\t\\\n-      asm_fprintf (FILE, \"\\tor\\t0,ar1\\n\");\t\t\t\\\n-      asm_fprintf (FILE, \"\\tldiu\\t0,ar0\\n\");\t\t\t\\\n-      asm_fprintf (FILE, \"\\tbud\\tar1\\n\");\t\t\t\\\n-      asm_fprintf (FILE, \"\\tlsh\\t16,ar0\\n\");\t\t\t\\\n-      asm_fprintf (FILE, \"\\tor\\t0,ar0\\n\");\t\t\t\\\n-      asm_fprintf (FILE, \"\\tor\\t1000h,st\\n\");\t\t\t\\\n+      fprintf (FILE, \"\\tldiu\\t0,ar1\\n\");\t\t\t\\\n+      fprintf (FILE, \"\\tlsh\\t16,ar1\\n\");\t\t\t\\\n+      fprintf (FILE, \"\\tor\\t0,ar1\\n\");\t\t\t\t\\\n+      fprintf (FILE, \"\\tldiu\\t0,ar0\\n\");\t\t\t\\\n+      fprintf (FILE, \"\\tbud\\tar1\\n\");\t\t\t\t\\\n+      fprintf (FILE, \"\\tlsh\\t16,ar0\\n\");\t\t\t\\\n+      fprintf (FILE, \"\\tor\\t0,ar0\\n\");\t\t\t\t\\\n+      fprintf (FILE, \"\\tor\\t1000h,st\\n\");\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   else\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n-      asm_fprintf (FILE, \"\\tlaj\\t$+4\\n\");\t\t\t\\\n-      asm_fprintf (FILE, \"\\taddi3\\t4,r11,ar0\\n\");\t\t\\\n-      asm_fprintf (FILE, \"\\tlda\\t*ar0,ar1\\n\");\t\t\t\\\n-      asm_fprintf (FILE, \"\\tlda\\t*+ar0(1),ar0\\n\");\t\t\\\n-      asm_fprintf (FILE, \"\\tbud\\tar1\\n\");\t\t\t\\\n-      asm_fprintf (FILE, \"\\tnop\\n\");\t\t\t\t\\\n-      asm_fprintf (FILE, \"\\tnop\\n\");\t\t\t\t\\\n-      asm_fprintf (FILE, \"\\tor\\t1000h,st\\n\");\t\t\t\\\n-      asm_fprintf (FILE, \"\\t.word\\t0\\n\");\t\t\t\\\n-      asm_fprintf (FILE, \"\\t.word\\t0\\n\");\t\t\t\\\n+      fprintf (FILE, \"\\tlaj\\t$+4\\n\");\t\t\t\t\\\n+      fprintf (FILE, \"\\taddi3\\t4,r11,ar0\\n\");\t\t\t\\\n+      fprintf (FILE, \"\\tlda\\t*ar0,ar1\\n\");\t\t\t\\\n+      fprintf (FILE, \"\\tlda\\t*+ar0(1),ar0\\n\");\t\t\t\\\n+      fprintf (FILE, \"\\tbud\\tar1\\n\");\t\t\t\t\\\n+      fprintf (FILE, \"\\tnop\\n\");\t\t\t\t\\\n+      fprintf (FILE, \"\\tnop\\n\");\t\t\t\t\\\n+      fprintf (FILE, \"\\tor\\t1000h,st\\n\");\t\t\t\\\n+      fprintf (FILE, \"\\t.word\\t0\\n\");\t\t\t\t\\\n+      fprintf (FILE, \"\\t.word\\t0\\n\");\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n }\n \n@@ -2076,13 +2076,13 @@ do { fprintf (asm_out_file, \"\\t.sdef\\t\");\t\t\\\n #define BSS_SECTION_ASM_OP \"\\t.bss\"\n \n #define ASM_OUTPUT_REG_PUSH(FILE, REGNO)  \\\n-  asm_fprintf (FILE, \"\\tpush\\t%s\\n\", reg_names[REGNO])\n+  fprintf (FILE, \"\\tpush\\t%s\\n\", reg_names[REGNO])\n \n /* This is how to output an insn to pop a register from the stack.\n    It need not be very fast code.  */\n \n #define ASM_OUTPUT_REG_POP(FILE, REGNO)  \\\n-  asm_fprintf (FILE, \"\\tpop\\t%s\\n\", reg_names[REGNO])\n+  fprintf (FILE, \"\\tpop\\t%s\\n\", reg_names[REGNO])\n \n /* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits\n    is done just by pretending it is already truncated.  */"}, {"sha": "a84933f6a1fc6541ca91381b4b7f0869a375f5d7", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761c70aade1cf9ccfe0316cb69360453d426e7d7/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761c70aade1cf9ccfe0316cb69360453d426e7d7/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=761c70aade1cf9ccfe0316cb69360453d426e7d7", "patch": "@@ -864,9 +864,9 @@ cris_target_asm_function_prologue (file, size)\n \n   /* Set up the PIC register.  */\n   if (current_function_uses_pic_offset_table)\n-    asm_fprintf (file, \"\\tmove.d $pc,$%s\\n\\tsub.d .:GOTOFF,$%s\\n\",\n-\t\t reg_names[PIC_OFFSET_TABLE_REGNUM],\n-\t\t reg_names[PIC_OFFSET_TABLE_REGNUM]);\n+    fprintf (file, \"\\tmove.d $pc,$%s\\n\\tsub.d .:GOTOFF,$%s\\n\",\n+\t     reg_names[PIC_OFFSET_TABLE_REGNUM],\n+\t     reg_names[PIC_OFFSET_TABLE_REGNUM]);\n \n   if (TARGET_PDEBUG)\n     fprintf (file,\n@@ -2580,13 +2580,13 @@ cris_asm_output_mi_thunk (stream, thunkdecl, delta, funcdecl)\n      tree funcdecl;\n {\n   if (delta > 0)\n-    asm_fprintf (stream, \"\\tadd%s %d,$%s\\n\",\n-\t\t ADDITIVE_SIZE_MODIFIER (delta), delta,\n-\t\t reg_names[CRIS_FIRST_ARG_REG]);\n+    fprintf (stream, \"\\tadd%s %d,$%s\\n\",\n+\t     ADDITIVE_SIZE_MODIFIER (delta), delta,\n+\t     reg_names[CRIS_FIRST_ARG_REG]);\n   else if (delta < 0)\n-    asm_fprintf (stream, \"\\tsub%s %d,$%s\\n\",\n-\t\t ADDITIVE_SIZE_MODIFIER (-delta), -delta,\n-\t\t reg_names[CRIS_FIRST_ARG_REG]);\n+    fprintf (stream, \"\\tsub%s %d,$%s\\n\",\n+\t     ADDITIVE_SIZE_MODIFIER (-delta), -delta,\n+\t     reg_names[CRIS_FIRST_ARG_REG]);\n \n   if (flag_pic)\n     {"}, {"sha": "841c8b7a641000a49a254389894d680f7b961cfa", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761c70aade1cf9ccfe0316cb69360453d426e7d7/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761c70aade1cf9ccfe0316cb69360453d426e7d7/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=761c70aade1cf9ccfe0316cb69360453d426e7d7", "patch": "@@ -1153,10 +1153,10 @@ print_operand (file, x, code)\n \t}\n       break;\n     case 'j':\n-      asm_fprintf (file, cond_string (GET_CODE (x)));\n+      fputs (cond_string (GET_CODE (x)), file);\n       break;\n     case 'k':\n-      asm_fprintf (file, cond_string (reverse_condition (GET_CODE (x))));\n+      fputs (cond_string (reverse_condition (GET_CODE (x))), file);\n       break;\n     case 's':\n       if (GET_CODE (x) == CONST_INT)"}, {"sha": "1ef8f78bea432bc0555e1ac9fa500b1942ffc625", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761c70aade1cf9ccfe0316cb69360453d426e7d7/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761c70aade1cf9ccfe0316cb69360453d426e7d7/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=761c70aade1cf9ccfe0316cb69360453d426e7d7", "patch": "@@ -1165,7 +1165,7 @@ struct cum_arg\n /* This is how to output an element of a case-vector that is absolute.  */\n \n #define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE) \\\n-  asm_fprintf (FILE, \"%s.L%d\\n\", ASM_WORD_OP, VALUE)\n+  fprintf (FILE, \"%s.L%d\\n\", ASM_WORD_OP, VALUE)\n \n /* This is how to output an element of a case-vector that is relative.  */\n "}, {"sha": "a41a7b6d2d1169e96b7838d78d1f16d4f54a58f0", "filename": "gcc/config/ip2k/ip2k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761c70aade1cf9ccfe0316cb69360453d426e7d7/gcc%2Fconfig%2Fip2k%2Fip2k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761c70aade1cf9ccfe0316cb69360453d426e7d7/gcc%2Fconfig%2Fip2k%2Fip2k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.c?ref=761c70aade1cf9ccfe0316cb69360453d426e7d7", "patch": "@@ -1060,7 +1060,7 @@ print_operand (file, x, code)\n \n \t  REAL_VALUE_FROM_CONST_DOUBLE (rv, x);\n \t  REAL_VALUE_TO_TARGET_SINGLE (rv, value);\n-\t  asm_fprintf (file, \"0x%x\", value);\n+\t  fprintf (file, \"0x%lx\", value);\n         }\n       break;\n "}, {"sha": "169381f7681058731df4d8728cebba64649499f6", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761c70aade1cf9ccfe0316cb69360453d426e7d7/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761c70aade1cf9ccfe0316cb69360453d426e7d7/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=761c70aade1cf9ccfe0316cb69360453d426e7d7", "patch": "@@ -2099,7 +2099,7 @@ asm_print_register (file, regno)\n   if (TARGET_NO_DIRECT_MODE && name[0] == '*')\n     name++;\n \n-  asm_fprintf (file, \"%s\", name);\n+  fprintf (file, \"%s\", name);\n }\n \n /* A C compound statement to output to stdio stream STREAM the\n@@ -2148,7 +2148,7 @@ print_operand (file, op, letter)\n   else if (letter == 'T')\n     {\n       asm_print_register (file, SOFT_TMP_REGNUM);\n-      asm_fprintf (file, \"+1\");\n+      fprintf (file, \"+1\");\n       return;\n     }\n   else if (letter == '#')\n@@ -2161,7 +2161,7 @@ print_operand (file, op, letter)\n       if (letter == 'b' && S_REG_P (op))\n \t{\n \t  asm_print_register (file, REGNO (op));\n-\t  asm_fprintf (file, \"+1\");\n+\t  fprintf (file, \"+1\");\n \t}\n       else\n \t{\n@@ -2178,7 +2178,7 @@ print_operand (file, op, letter)\n \tasm_fprintf (file, \"%0I%%hi(\");\n \n       output_addr_const (file, op);\n-      asm_fprintf (file, \")\");\n+      fprintf (file, \")\");\n       return;\n     }\n \n@@ -2204,7 +2204,7 @@ print_operand (file, op, letter)\n \tcase PRE_DEC:\n \t  if (TARGET_M6812)\n \t    {\n-\t      asm_fprintf (file, \"%u,-\", GET_MODE_SIZE (GET_MODE (op)));\n+\t      fprintf (file, \"%u,-\", GET_MODE_SIZE (GET_MODE (op)));\n \t      asm_print_register (file, REGNO (XEXP (base, 0)));\n \t    }\n \t  else\n@@ -2214,9 +2214,9 @@ print_operand (file, op, letter)\n \tcase POST_DEC:\n \t  if (TARGET_M6812)\n \t    {\n-\t      asm_fprintf (file, \"%u,\", GET_MODE_SIZE (GET_MODE (op)));\n+\t      fprintf (file, \"%u,\", GET_MODE_SIZE (GET_MODE (op)));\n \t      asm_print_register (file, REGNO (XEXP (base, 0)));\n-\t      asm_fprintf (file, \"-\");\n+\t      fprintf (file, \"-\");\n \t    }\n \t  else\n \t    abort ();\n@@ -2225,9 +2225,9 @@ print_operand (file, op, letter)\n \tcase POST_INC:\n \t  if (TARGET_M6812)\n \t    {\n-\t      asm_fprintf (file, \"%u,\", GET_MODE_SIZE (GET_MODE (op)));\n+\t      fprintf (file, \"%u,\", GET_MODE_SIZE (GET_MODE (op)));\n \t      asm_print_register (file, REGNO (XEXP (base, 0)));\n-\t      asm_fprintf (file, \"+\");\n+\t      fprintf (file, \"+\");\n \t    }\n \t  else\n \t    abort ();\n@@ -2236,7 +2236,7 @@ print_operand (file, op, letter)\n \tcase PRE_INC:\n \t  if (TARGET_M6812)\n \t    {\n-\t      asm_fprintf (file, \"%u,+\", GET_MODE_SIZE (GET_MODE (op)));\n+\t      fprintf (file, \"%u,+\", GET_MODE_SIZE (GET_MODE (op)));\n \t      asm_print_register (file, REGNO (XEXP (base, 0)));\n \t    }\n \t  else\n@@ -2277,11 +2277,11 @@ print_operand (file, op, letter)\n         need_parenthesize = must_parenthesize (op);\n \n       if (need_parenthesize)\n-        asm_fprintf (file, \"(\");\n+        fprintf (file, \"(\");\n \n       output_addr_const (file, op);\n       if (need_parenthesize)\n-        asm_fprintf (file, \")\");\n+        fprintf (file, \")\");\n     }\n }\n \n@@ -2350,7 +2350,7 @@ print_operand_address (file, addr)\n       if (!REG_P (addr) || !REG_OK_FOR_BASE_STRICT_P (addr))\n \tabort ();\n \n-      asm_fprintf (file, \"0,\");\n+      fprintf (file, \"0,\");\n       asm_print_register (file, REGNO (addr));\n       break;\n \n@@ -2361,7 +2361,7 @@ print_operand_address (file, addr)\n \tcase PRE_DEC:\n \t  if (TARGET_M6812)\n \t    {\n-\t      asm_fprintf (file, \"%u,-\", GET_MODE_SIZE (GET_MODE (addr)));\n+\t      fprintf (file, \"%u,-\", GET_MODE_SIZE (GET_MODE (addr)));\n \t      asm_print_register (file, REGNO (XEXP (base, 0)));\n \t    }\n \t  else\n@@ -2371,9 +2371,9 @@ print_operand_address (file, addr)\n \tcase POST_DEC:\n \t  if (TARGET_M6812)\n \t    {\n-\t      asm_fprintf (file, \"%u,\", GET_MODE_SIZE (GET_MODE (addr)));\n+\t      fprintf (file, \"%u,\", GET_MODE_SIZE (GET_MODE (addr)));\n \t      asm_print_register (file, REGNO (XEXP (base, 0)));\n-\t      asm_fprintf (file, \"-\");\n+\t      fprintf (file, \"-\");\n \t    }\n \t  else\n \t    abort ();\n@@ -2382,9 +2382,9 @@ print_operand_address (file, addr)\n \tcase POST_INC:\n \t  if (TARGET_M6812)\n \t    {\n-\t      asm_fprintf (file, \"%u,\", GET_MODE_SIZE (GET_MODE (addr)));\n+\t      fprintf (file, \"%u,\", GET_MODE_SIZE (GET_MODE (addr)));\n \t      asm_print_register (file, REGNO (XEXP (base, 0)));\n-\t      asm_fprintf (file, \"+\");\n+\t      fprintf (file, \"+\");\n \t    }\n \t  else\n \t    abort ();\n@@ -2393,7 +2393,7 @@ print_operand_address (file, addr)\n \tcase PRE_INC:\n \t  if (TARGET_M6812)\n \t    {\n-\t      asm_fprintf (file, \"%u,+\", GET_MODE_SIZE (GET_MODE (addr)));\n+\t      fprintf (file, \"%u,+\", GET_MODE_SIZE (GET_MODE (addr)));\n \t      asm_print_register (file, REGNO (XEXP (base, 0)));\n \t    }\n \t  else\n@@ -2403,11 +2403,11 @@ print_operand_address (file, addr)\n \tdefault:\n \t  need_parenthesis = must_parenthesize (base);\n \t  if (need_parenthesis)\n-\t    asm_fprintf (file, \"(\");\n+\t    fprintf (file, \"(\");\n \n \t  output_addr_const (file, base);\n \t  if (need_parenthesis)\n-\t    asm_fprintf (file, \")\");\n+\t    fprintf (file, \")\");\n \t  break;\n \t}\n       break;\n@@ -2425,13 +2425,13 @@ print_operand_address (file, addr)\n \t  need_parenthesis = must_parenthesize (addr);\n \n \t  if (need_parenthesis)\n-\t    asm_fprintf (file, \"(\");\n+\t    fprintf (file, \"(\");\n \n \t  output_addr_const (file, base);\n-\t  asm_fprintf (file, \"+\");\n+\t  fprintf (file, \"+\");\n \t  output_addr_const (file, offset);\n \t  if (need_parenthesis)\n-\t    asm_fprintf (file, \")\");\n+\t    fprintf (file, \")\");\n \t}\n       else if (REG_P (base) && REG_OK_FOR_BASE_STRICT_P (base))\n \t{\n@@ -2440,7 +2440,7 @@ print_operand_address (file, addr)\n \t      if (TARGET_M6812)\n \t\t{\n \t\t  asm_print_register (file, REGNO (offset));\n-\t\t  asm_fprintf (file, \",\");\n+\t\t  fprintf (file, \",\");\n \t\t  asm_print_register (file, REGNO (base));\n \t\t}\n \t      else\n@@ -2450,12 +2450,12 @@ print_operand_address (file, addr)\n \t    {\n               need_parenthesis = must_parenthesize (offset);\n               if (need_parenthesis)\n-                asm_fprintf (file, \"(\");\n+                fprintf (file, \"(\");\n \n \t      output_addr_const (file, offset);\n               if (need_parenthesis)\n-                asm_fprintf (file, \")\");\n-\t      asm_fprintf (file, \",\");\n+                fprintf (file, \")\");\n+\t      fprintf (file, \",\");\n \t      asm_print_register (file, REGNO (base));\n \t    }\n \t}\n@@ -2469,17 +2469,17 @@ print_operand_address (file, addr)\n       if (GET_CODE (addr) == CONST_INT\n \t  && INTVAL (addr) < 0x8000 && INTVAL (addr) >= -0x8000)\n \t{\n-\t  asm_fprintf (file, \"%d\", INTVAL (addr));\n+\t  fprintf (file, HOST_WIDE_INT_PRINT_DEC, INTVAL (addr));\n \t}\n       else\n \t{\n \t  need_parenthesis = must_parenthesize (addr);\n \t  if (need_parenthesis)\n-\t    asm_fprintf (file, \"(\");\n+\t    fprintf (file, \"(\");\n \n \t  output_addr_const (file, addr);\n \t  if (need_parenthesis)\n-\t    asm_fprintf (file, \")\");\n+\t    fprintf (file, \")\");\n \t}\n       break;\n     }"}, {"sha": "d42dab13e12cacde67227bd5b26de1153bc62af1", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761c70aade1cf9ccfe0316cb69360453d426e7d7/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761c70aade1cf9ccfe0316cb69360453d426e7d7/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=761c70aade1cf9ccfe0316cb69360453d426e7d7", "patch": "@@ -1135,7 +1135,7 @@ typedef struct m68hc11_args\n /* Output assembler code to FILE to increment profiler label # LABELNO\n    for profiling a function entry.  */\n #define FUNCTION_PROFILER(FILE, LABELNO)\t\t\\\n-    asm_fprintf (FILE, \"\\tldy\\t.LP%d\\n\\tjsr mcount\\n\", (LABELNO))\n+    fprintf (FILE, \"\\tldy\\t.LP%d\\n\\tjsr mcount\\n\", (LABELNO))\n /* Length in units of the trampoline for entering a nested function.  */\n #define TRAMPOLINE_SIZE\t\t(TARGET_M6811 ? 11 : 9)\n \n@@ -1650,18 +1650,18 @@ do {                                                                    \\\n /* This is how to output an element of a case-vector that is relative.  */\n \n #define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\\n-  asm_fprintf (FILE, \"\\t%s\\tL%d-L%d\\n\", integer_asm_op (2, TRUE), VALUE, REL)\n+  fprintf (FILE, \"\\t%s\\tL%d-L%d\\n\", integer_asm_op (2, TRUE), VALUE, REL)\n \n /* This is how to output an element of a case-vector that is absolute.  */\n #define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE) \\\n-  asm_fprintf (FILE, \"\\t%s\\t.L%d\\n\", integer_asm_op (2, TRUE), VALUE)\n+  fprintf (FILE, \"\\t%s\\t.L%d\\n\", integer_asm_op (2, TRUE), VALUE)\n \n /* This is how to output an assembler line that says to advance the\n    location counter to a multiple of 2**LOG bytes.  */\n #define ASM_OUTPUT_ALIGN(FILE,LOG)\t\t\t\\\n   do {                                                  \\\n       if ((LOG) > 1)                                    \\\n-          asm_fprintf ((FILE), \"%s\\n\", ALIGN_ASM_OP); \\\n+          fprintf ((FILE), \"%s\\n\", ALIGN_ASM_OP); \\\n   } while (0)\n \n \f"}, {"sha": "b302d0ece2fa825f09a309afe7ea3f97cab9d91e", "filename": "gcc/config/m68k/amix.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761c70aade1cf9ccfe0316cb69360453d426e7d7/gcc%2Fconfig%2Fm68k%2Famix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761c70aade1cf9ccfe0316cb69360453d426e7d7/gcc%2Fconfig%2Fm68k%2Famix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Famix.h?ref=761c70aade1cf9ccfe0316cb69360453d426e7d7", "patch": "@@ -146,6 +146,6 @@ do {\t\t\t\t\t\t\t\\\n #undef ASM_OUTPUT_INTERNAL_LABEL\n #define ASM_OUTPUT_INTERNAL_LABEL(FILE,PREFIX,NUM)\t\\\n   if (flag_pic && !strcmp(PREFIX,\"LC\"))\t\t\t\\\n-    asm_fprintf (FILE, \"%s%%%d:\\n\", PREFIX, NUM);\t\\\n+    fprintf (FILE, \"%s%%%d:\\n\", PREFIX, NUM);\t\t\\\n   else\t\t\t\t\t\t\t\\\n     asm_fprintf (FILE, \"%0L%s%d:\\n\", PREFIX, NUM)"}, {"sha": "54ea0c2dad6e27b298b72683bd311d752a2252d7", "filename": "gcc/config/m68k/atari.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761c70aade1cf9ccfe0316cb69360453d426e7d7/gcc%2Fconfig%2Fm68k%2Fatari.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761c70aade1cf9ccfe0316cb69360453d426e7d7/gcc%2Fconfig%2Fm68k%2Fatari.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fatari.h?ref=761c70aade1cf9ccfe0316cb69360453d426e7d7", "patch": "@@ -103,6 +103,6 @@ do {\t\t\t\t\t\t\t\\\n #undef ASM_OUTPUT_INTERNAL_LABEL\n #define ASM_OUTPUT_INTERNAL_LABEL(FILE,PREFIX,NUM)\t\\\n   if (flag_pic && !strcmp(PREFIX,\"LC\"))\t\t\t\\\n-    asm_fprintf (FILE, \"%s%%%d:\\n\", PREFIX, NUM);\t\\\n+    fprintf (FILE, \"%s%%%d:\\n\", PREFIX, NUM);\t\t\\\n   else\t\t\t\t\t\t\t\\\n     asm_fprintf (FILE, \"%0L%s%d:\\n\", PREFIX, NUM)"}, {"sha": "5302ff20e618c18b8926dc07e6e9b13fae7ec32d", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761c70aade1cf9ccfe0316cb69360453d426e7d7/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761c70aade1cf9ccfe0316cb69360453d426e7d7/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=761c70aade1cf9ccfe0316cb69360453d426e7d7", "patch": "@@ -279,13 +279,15 @@ m68k_output_function_prologue (stream, size)\n \t{\n \t/* on the 68040, pea + move is faster than link.w 0 */\n #ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tpea (%s)\\n\\tmove.l %s,%s\\n\",\n-\t       reg_names[FRAME_POINTER_REGNUM], reg_names[STACK_POINTER_REGNUM],\n-\t       reg_names[FRAME_POINTER_REGNUM]);\n+\t  fprintf (stream, \"\\tpea (%s)\\n\\tmove.l %s,%s\\n\",\n+\t\t   reg_names[FRAME_POINTER_REGNUM],\n+\t\t   reg_names[STACK_POINTER_REGNUM],\n+\t\t   reg_names[FRAME_POINTER_REGNUM]);\n #else\n-\t  asm_fprintf (stream, \"\\tpea %s@\\n\\tmovel %s,%s\\n\",\n-\t       reg_names[FRAME_POINTER_REGNUM], reg_names[STACK_POINTER_REGNUM],\n-\t       reg_names[FRAME_POINTER_REGNUM]);\n+\t  fprintf (stream, \"\\tpea %s@\\n\\tmovel %s,%s\\n\",\n+\t\t   reg_names[FRAME_POINTER_REGNUM],\n+\t\t   reg_names[STACK_POINTER_REGNUM],\n+\t\t   reg_names[FRAME_POINTER_REGNUM]);\n #endif\n \t}\n       else if (fsize < 0x8000)\n@@ -778,7 +780,7 @@ m68k_output_function_epilogue (stream, size)\n     {\n       /* Output just a no-op so that debuggers don't get confused\n \t about which function the pc is in at this address.  */\n-      asm_fprintf (stream, \"\\tnop\\n\");\n+      fprintf (stream, \"\\tnop\\n\");\n       return;\n     }\n \n@@ -878,9 +880,9 @@ m68k_output_function_epilogue (stream, size)\n \t\t\t     reg_names[FRAME_POINTER_REGNUM],\n \t\t\t     reg_names[i]);\n #else\n-\t\tasm_fprintf (stream, \"\\tmovel %s@(-%d),%s\\n\",\n-\t\t\t     reg_names[FRAME_POINTER_REGNUM],\n-\t\t\t     offset + fsize, reg_names[i]);\n+\t\tfprintf (stream, \"\\tmovel %s@(-%d),%s\\n\",\n+\t\t\t reg_names[FRAME_POINTER_REGNUM],\n+\t\t\t offset + fsize, reg_names[i]);\n #endif\n \t      }\n             offset = offset - 4;\n@@ -990,14 +992,14 @@ m68k_output_function_epilogue (stream, size)\n \t  else\n \t    {\n #ifdef MOTOROLA\n-\t      asm_fprintf (stream, \"\\tfpmovd -%d(%s), %s\\n\",\n-\t\t\t   fpoffset + fsize,\n-\t\t\t   reg_names[FRAME_POINTER_REGNUM],\n-\t\t\t   reg_names[regno]);\n+\t      fprintf (stream, \"\\tfpmovd -%d(%s), %s\\n\",\n+\t\t       fpoffset + fsize,\n+\t\t       reg_names[FRAME_POINTER_REGNUM],\n+\t\t       reg_names[regno]);\n #else\n-\t      asm_fprintf (stream, \"\\tfpmoved %s@(-%d), %s\\n\",\n-\t\t\t   reg_names[FRAME_POINTER_REGNUM],\n-\t\t\t   fpoffset + fsize, reg_names[regno]);\n+\t      fprintf (stream, \"\\tfpmoved %s@(-%d), %s\\n\",\n+\t\t       reg_names[FRAME_POINTER_REGNUM],\n+\t\t       fpoffset + fsize, reg_names[regno]);\n #endif\n \t    }\n \t  fpoffset -= 8;\n@@ -2959,7 +2961,7 @@ print_operand (file, op, letter)\n   if (letter == '.')\n     {\n #if defined (MOTOROLA) && !defined (CRDS)\n-      asm_fprintf (file, \".\");\n+      fprintf (file, \".\");\n #endif\n     }\n   else if (letter == '#')"}, {"sha": "cbda5257efb7fd2d5a5aa79e3697bb254432274e", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761c70aade1cf9ccfe0316cb69360453d426e7d7/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761c70aade1cf9ccfe0316cb69360453d426e7d7/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=761c70aade1cf9ccfe0316cb69360453d426e7d7", "patch": "@@ -785,13 +785,13 @@ mmix_asm_output_mi_thunk (stream, fndecl, delta, func)\n   const char *regname = reg_names[MMIX_FIRST_INCOMING_ARG_REGNUM];\n \n   if (delta >= 0 && delta < 65536)\n-    asm_fprintf (stream, \"\\tINCL %s,%d\\n\", delta, regname);\n+    fprintf (stream, \"\\tINCL %s,%d\\n\", regname, delta);\n   else if (delta < 0 && delta >= -255)\n-    asm_fprintf (stream, \"\\tSUBU %s,%s,%d\\n\", regname, regname, -delta);\n+    fprintf (stream, \"\\tSUBU %s,%s,%d\\n\", regname, regname, -delta);\n   else\n     {\n       mmix_output_register_setting (stream, 255, delta, 1);\n-      asm_fprintf (stream, \"\\tADDU %s,%s,$255\\n\", regname, regname);\n+      fprintf (stream, \"\\tADDU %s,%s,$255\\n\", regname, regname);\n     }\n \n   fprintf (stream, \"\\tJMP \");\n@@ -1539,9 +1539,9 @@ mmix_asm_weaken_label (stream, name)\n      FILE * stream ATTRIBUTE_UNUSED;\n      const char * name ATTRIBUTE_UNUSED;\n {\n-  asm_fprintf (stream, \"\\t.weak \");\n+  fprintf (stream, \"\\t.weak \");\n   assemble_name (stream, name);\n-  asm_fprintf (stream, \" ! mmixal-incompatible\\n\");\n+  fprintf (stream, \" ! mmixal-incompatible\\n\");\n }\n \n /* MAKE_DECL_ONE_ONLY.  */"}, {"sha": "793838fc531105f73447930e7eb4eabdf63f7312", "filename": "gcc/config/mn10200/mn10200.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761c70aade1cf9ccfe0316cb69360453d426e7d7/gcc%2Fconfig%2Fmn10200%2Fmn10200.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761c70aade1cf9ccfe0316cb69360453d426e7d7/gcc%2Fconfig%2Fmn10200%2Fmn10200.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10200%2Fmn10200.h?ref=761c70aade1cf9ccfe0316cb69360453d426e7d7", "patch": "@@ -863,7 +863,7 @@ struct cum_arg { int nbytes; };\n /* This is how to output an element of a case-vector that is absolute.  */\n \n #define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE) \\\n-  asm_fprintf (FILE, \"\\t%s .L%d\\n\", \".long\", VALUE)\n+  fprintf (FILE, \"\\t%s .L%d\\n\", \".long\", VALUE)\n \n /* This is how to output an element of a case-vector that is relative.  */\n "}, {"sha": "e78e02e50d0bf016ff53dd79cbb8eca7b7027203", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761c70aade1cf9ccfe0316cb69360453d426e7d7/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761c70aade1cf9ccfe0316cb69360453d426e7d7/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=761c70aade1cf9ccfe0316cb69360453d426e7d7", "patch": "@@ -953,7 +953,7 @@ struct cum_arg {int nbytes; };\n /* This is how to output an element of a case-vector that is absolute.  */\n \n #define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE) \\\n-  asm_fprintf (FILE, \"\\t%s .L%d\\n\", \".long\", VALUE)\n+  fprintf (FILE, \"\\t%s .L%d\\n\", \".long\", VALUE)\n \n /* This is how to output an element of a case-vector that is relative.  */\n "}, {"sha": "aff42cb319e40280fc2c3984360b5747c20da110", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761c70aade1cf9ccfe0316cb69360453d426e7d7/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761c70aade1cf9ccfe0316cb69360453d426e7d7/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=761c70aade1cf9ccfe0316cb69360453d426e7d7", "patch": "@@ -1238,8 +1238,8 @@ zbss_section ()\t\t\t\t\t\t\t\t\\\n /* This is how to output an element of a case-vector that is absolute.  */\n \n #define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE) \\\n-  asm_fprintf (FILE, \"\\t%s .L%d\\n\",\t\t\t\t\t\\\n-\t       (TARGET_BIG_SWITCH ? \".long\" : \".short\"), VALUE)\n+  fprintf (FILE, \"\\t%s .L%d\\n\",\t\t\t\t\t\\\n+\t   (TARGET_BIG_SWITCH ? \".long\" : \".short\"), VALUE)\n \n /* This is how to output an element of a case-vector that is relative.  */\n "}]}