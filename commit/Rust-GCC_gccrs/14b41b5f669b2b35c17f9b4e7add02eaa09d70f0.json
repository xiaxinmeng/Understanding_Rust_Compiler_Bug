{"sha": "14b41b5f669b2b35c17f9b4e7add02eaa09d70f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRiNDFiNWY2NjliMmIzNWMxN2Y5YjRlN2FkZDAyZWFhMDlkNzBmMA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-06-08T16:48:30Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-06-08T16:48:30Z"}, "message": "tree-ssa-dom.c (record_conditions): Only record \"unordered\" conditions from floating point comparisons.\n\n\n\t* tree-ssa-dom.c (record_conditions): Only record \"unordered\"\n\tconditions from floating point comparisons.\n\nFrom-SVN: r114489", "tree": {"sha": "f1719139ac3732aeac1c1791417008591e88884f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1719139ac3732aeac1c1791417008591e88884f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14b41b5f669b2b35c17f9b4e7add02eaa09d70f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14b41b5f669b2b35c17f9b4e7add02eaa09d70f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14b41b5f669b2b35c17f9b4e7add02eaa09d70f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14b41b5f669b2b35c17f9b4e7add02eaa09d70f0/comments", "author": null, "committer": null, "parents": [{"sha": "33b881ca3a5ced6c254d3570dea2282ed6a7534d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33b881ca3a5ced6c254d3570dea2282ed6a7534d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33b881ca3a5ced6c254d3570dea2282ed6a7534d"}], "stats": {"total": 64, "additions": 47, "deletions": 17}, "files": [{"sha": "33bbfbc2a0b883c170cc93d1eac4f7de3555320a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14b41b5f669b2b35c17f9b4e7add02eaa09d70f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14b41b5f669b2b35c17f9b4e7add02eaa09d70f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14b41b5f669b2b35c17f9b4e7add02eaa09d70f0", "patch": "@@ -1,3 +1,8 @@\n+2006-06-08  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* tree-ssa-dom.c (record_conditions): Only record \"unordered\"\n+\tconditions from floating point comparisons.\n+\n 2006-06-08  Paolo Bonzini  <bonzini@gnu.org>\n \n \tPR middle-end/27733"}, {"sha": "085a5d604823890cbfd35b74d2c2026fcc5320c0", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 42, "deletions": 17, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14b41b5f669b2b35c17f9b4e7add02eaa09d70f0/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14b41b5f669b2b35c17f9b4e7add02eaa09d70f0/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=14b41b5f669b2b35c17f9b4e7add02eaa09d70f0", "patch": "@@ -950,36 +950,61 @@ record_conditions (struct edge_info *edge_info, tree cond, tree inverted)\n     {\n     case LT_EXPR:\n     case GT_EXPR:\n-      edge_info->max_cond_equivalences = 12;\n-      edge_info->cond_equivalences = XNEWVEC (tree, 12);\n+      if (FLOAT_TYPE_P (TREE_TYPE (op0)))\n+\t{\n+\t  edge_info->max_cond_equivalences = 12;\n+\t  edge_info->cond_equivalences = XNEWVEC (tree, 12);\n+\t  build_and_record_new_cond (ORDERED_EXPR, op0, op1,\n+\t\t\t\t     &edge_info->cond_equivalences[8]);\n+\t  build_and_record_new_cond (LTGT_EXPR, op0, op1,\n+\t\t\t\t     &edge_info->cond_equivalences[10]);\n+\t}\n+      else\n+\t{\n+\t  edge_info->max_cond_equivalences = 8;\n+\t  edge_info->cond_equivalences = XNEWVEC (tree, 8);\n+\t}\n+\n       build_and_record_new_cond ((TREE_CODE (cond) == LT_EXPR\n \t\t\t\t  ? LE_EXPR : GE_EXPR),\n \t\t\t\t op0, op1, &edge_info->cond_equivalences[4]);\n-      build_and_record_new_cond (ORDERED_EXPR, op0, op1,\n-\t\t\t\t &edge_info->cond_equivalences[6]);\n       build_and_record_new_cond (NE_EXPR, op0, op1,\n-\t\t\t\t &edge_info->cond_equivalences[8]);\n-      build_and_record_new_cond (LTGT_EXPR, op0, op1,\n-\t\t\t\t &edge_info->cond_equivalences[10]);\n+\t\t\t\t &edge_info->cond_equivalences[6]);\n       break;\n \n     case GE_EXPR:\n     case LE_EXPR:\n-      edge_info->max_cond_equivalences = 6;\n-      edge_info->cond_equivalences = XNEWVEC (tree, 6);\n-      build_and_record_new_cond (ORDERED_EXPR, op0, op1,\n-\t\t\t\t &edge_info->cond_equivalences[4]);\n+      if (FLOAT_TYPE_P (TREE_TYPE (op0)))\n+\t{\n+\t  edge_info->max_cond_equivalences = 6;\n+\t  edge_info->cond_equivalences = XNEWVEC (tree, 6);\n+\t  build_and_record_new_cond (ORDERED_EXPR, op0, op1,\n+\t\t\t\t     &edge_info->cond_equivalences[4]);\n+\t}\n+      else\n+\t{\n+\t  edge_info->max_cond_equivalences = 4;\n+\t  edge_info->cond_equivalences = XNEWVEC (tree, 4);\n+\t}\n       break;\n \n     case EQ_EXPR:\n-      edge_info->max_cond_equivalences = 10;\n-      edge_info->cond_equivalences = XNEWVEC (tree, 10);\n-      build_and_record_new_cond (ORDERED_EXPR, op0, op1,\n-\t\t\t\t &edge_info->cond_equivalences[4]);\n+      if (FLOAT_TYPE_P (TREE_TYPE (op0)))\n+\t{\n+\t  edge_info->max_cond_equivalences = 10;\n+\t  edge_info->cond_equivalences = XNEWVEC (tree, 10);\n+\t  build_and_record_new_cond (ORDERED_EXPR, op0, op1,\n+\t\t\t\t     &edge_info->cond_equivalences[8]);\n+\t}\n+      else\n+\t{\n+\t  edge_info->max_cond_equivalences = 8;\n+\t  edge_info->cond_equivalences = XNEWVEC (tree, 8);\n+\t}\n       build_and_record_new_cond (LE_EXPR, op0, op1,\n-\t\t\t\t &edge_info->cond_equivalences[6]);\n+\t\t\t\t &edge_info->cond_equivalences[4]);\n       build_and_record_new_cond (GE_EXPR, op0, op1,\n-\t\t\t\t &edge_info->cond_equivalences[8]);\n+\t\t\t\t &edge_info->cond_equivalences[6]);\n       break;\n \n     case UNORDERED_EXPR:"}]}