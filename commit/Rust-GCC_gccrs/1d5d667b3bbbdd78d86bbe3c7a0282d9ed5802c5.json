{"sha": "1d5d667b3bbbdd78d86bbe3c7a0282d9ed5802c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ1ZDY2N2IzYmJiZGQ3OGQ4NmJiZTNjN2EwMjgyZDllZDU4MDJjNQ==", "commit": {"author": {"name": "Robert Mason", "email": "rbmj@verizon.net", "date": "2012-10-28T21:42:48Z"}, "committer": {"name": "Bruce Korb", "email": "korbb@gcc.gnu.org", "date": "2012-10-28T21:42:48Z"}, "message": "vxworks fixups\n\nFrom-SVN: r192898", "tree": {"sha": "7d5c98bf9a4ea92de54f98957c559ebffa468281", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d5c98bf9a4ea92de54f98957c559ebffa468281"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d5d667b3bbbdd78d86bbe3c7a0282d9ed5802c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d5d667b3bbbdd78d86bbe3c7a0282d9ed5802c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d5d667b3bbbdd78d86bbe3c7a0282d9ed5802c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d5d667b3bbbdd78d86bbe3c7a0282d9ed5802c5/comments", "author": {"login": "rbmj", "id": 359868, "node_id": "MDQ6VXNlcjM1OTg2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/359868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbmj", "html_url": "https://github.com/rbmj", "followers_url": "https://api.github.com/users/rbmj/followers", "following_url": "https://api.github.com/users/rbmj/following{/other_user}", "gists_url": "https://api.github.com/users/rbmj/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbmj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbmj/subscriptions", "organizations_url": "https://api.github.com/users/rbmj/orgs", "repos_url": "https://api.github.com/users/rbmj/repos", "events_url": "https://api.github.com/users/rbmj/events{/privacy}", "received_events_url": "https://api.github.com/users/rbmj/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c5cd5a7ed3f3a476ed17f2449598e6309cf7956c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5cd5a7ed3f3a476ed17f2449598e6309cf7956c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5cd5a7ed3f3a476ed17f2449598e6309cf7956c"}], "stats": {"total": 322, "additions": 316, "deletions": 6}, "files": [{"sha": "b41671093b883bd91e509eb0d302642d57b4fea3", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5d667b3bbbdd78d86bbe3c7a0282d9ed5802c5/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5d667b3bbbdd78d86bbe3c7a0282d9ed5802c5/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=1d5d667b3bbbdd78d86bbe3c7a0282d9ed5802c5", "patch": "@@ -1,3 +1,19 @@\n+2012-09-29  Robert Mason  <rbmj@verizon.net>\n+\n+\t* fixinc.in: Omit machine name checks for vxworks\n+\t* fixincludes/inclhack.def (AAB_vxworks_assert) new replacement fix\n+\t(AAB_vxworks_regs_vxtypes): another\n+\t(AAB_vxworks_stdint): yet another\n+\t(AAB_vxworks_unistd): and another\n+\t(vxworks_ioctl_macro): reformatting fix\n+\t(vxworks_mkdir_macro): again\n+\t(vxworks_regs): and again\n+\t(vxworks_write_const): and again\n+\t* tests/base/ioLib.h: new test result\n+\t* tests/base/math.h: likewise\n+\t* tests/base/sys/stat.h: likewise\n+\t* tests/base/testing.h: and again\n+\n 2012-09-29  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* inclhack.def (AAB_aix_fcntl): New fix."}, {"sha": "f7b8d8f1ee3bf820e242926e3e2dd3d08336f655", "filename": "fixincludes/fixinc.in", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5d667b3bbbdd78d86bbe3c7a0282d9ed5802c5/fixincludes%2Ffixinc.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5d667b3bbbdd78d86bbe3c7a0282d9ed5802c5/fixincludes%2Ffixinc.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixinc.in?ref=1d5d667b3bbbdd78d86bbe3c7a0282d9ed5802c5", "patch": "@@ -126,6 +126,22 @@ else\n   LINKS=false\n fi\n \n+# # # # # # # # # # # # # # # # # # # # #\n+#\n+#  Check to see if the machine_name fix needs to be disabled.\n+#\n+#  On some platforms, machine_name doesn't work properly and\n+#  breaks some of the header files.  Since everything works\n+#  properly without it, just wipe the macro list to\n+#  disable the fix.\n+\n+case \"${target_canonical}\" in\n+    *-*-vxworks*)\n+\ttest -f ${MACRO_LIST} &&  echo > ${MACRO_LIST}\n+        ;;\n+esac\n+\n+\n # # # # # # # # # # # # # # # # # # # # #\n #\n #  In the file macro_list are listed all the predefined"}, {"sha": "cc7d790b886d1fddcf2e604c5dff89fccbd0d0f5", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 266, "deletions": 0, "changes": 266, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5d667b3bbbdd78d86bbe3c7a0282d9ed5802c5/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5d667b3bbbdd78d86bbe3c7a0282d9ed5802c5/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=1d5d667b3bbbdd78d86bbe3c7a0282d9ed5802c5", "patch": "@@ -393,6 +393,206 @@ fix = {\n \t_EndOfHeader_;\n };\n \n+/*\n+ * Fix assert.h on VxWorks:\n+ */\n+fix = {\n+    hackname    = AAB_vxworks_assert;\n+    files       = assert.h;\n+    mach        = \"*-*-vxworks*\";\n+        \n+    replace     = <<- _EndOfHeader_\n+\t#ifndef _ASSERT_H\n+\t#define _ASSERT_H\n+\n+\t#ifdef assert\n+\t#undef assert\n+\t#endif\n+\n+\t#if defined(__STDC__) || defined(__cplusplus)\n+\textern void __assert (const char*);\n+\t#else\n+\textern void __assert ();\n+\t#endif\n+\n+\t#ifdef NDEBUG\n+\t#define assert(ign) ((void)0)\n+\t#else\n+\n+\t#define ASSERT_STRINGIFY(str) ASSERT_STRINGIFY_HELPER(str)\n+\t#define ASSERT_STRINGIFY_HELPER(str) #str\n+\n+\t#define assert(test) ((void) \\\n+\t        ((test) ? ((void)0) : \\\n+\t        __assert(\"Assertion failed: \" ASSERT_STRINGIFY(test) \", file \" \\\n+\t        __FILE__ \", line \" ASSERT_STRINGIFY(__LINE__) \"\\n\")))\n+\n+\t#endif\n+\n+\t#endif\n+\t_EndOfHeader_;\n+};\n+\n+/*\n+ * Add needed include to regs.h (NOT the gcc header) on VxWorks\n+ */\n+\n+fix = {\n+    hackname    = AAB_vxworks_regs_vxtypes;\n+    files       = regs.h;\n+    mach        = \"*-*-vxworks*\";\n+\n+    replace     = <<- _EndOfHeader_\n+\t#ifndef _REGS_H\n+\t#define _REGS_H\n+\t#include <types/vxTypesOld.h>\n+\t#include_next <arch/../regs.h>\n+\t#endif\n+\t_EndOfHeader_;\n+};\n+\n+/*\n+ * Make VxWorks stdint.h a bit more compliant - add typedefs\n+ */\n+fix = {\n+    hackname    = AAB_vxworks_stdint;\n+    files       = stdint.h;\n+    mach        = \"*-*-vxworks*\";\n+        \n+    replace     = <<- _EndOfHeader_\n+\t#ifndef _STDINT_H\n+\t#define _STDINT_H\n+\t/* get int*_t, uint*_t */\n+\t#include <types/vxTypes.h>\n+\t\n+\t/* get legacy vxworks types for compatibility */\n+\t#include <types/vxTypesOld.h>\n+\t\n+\ttypedef long intptr_t;\n+\ttypedef unsigned long uintptr_t;\n+\t\n+\ttypedef int64_t intmax_t;\n+\ttypedef uint64_t uintmax_t;\n+\t\n+\ttypedef int8_t int_least8_t;\n+\ttypedef int16_t int_least16_t;\n+\ttypedef int32_t int_least32_t;\n+\ttypedef int64_t int_least64_t;\n+\t\n+\ttypedef uint8_t uint_least8_t;\n+\ttypedef uint16_t uint_least16_t;\n+\ttypedef uint32_t uint_least32_t;\n+\ttypedef uint64_t uint_least64_t;\n+\t\n+\ttypedef int8_t int_fast8_t;\n+\ttypedef int int_fast16_t;\n+\ttypedef int32_t int_fast32_t;\n+\ttypedef int64_t int_fast64_t;\n+\t\n+\ttypedef uint8_t uint_fast8_t;\n+\ttypedef unsigned int uint_fast16_t;\n+\ttypedef uint32_t uint_fast32_t;\n+\ttypedef uint64_t uint_fast64_t;\n+\t\n+\t/* Ranges */\n+\t#define UINT8_MAX (~(uint8_t)0)\n+\t#define UINT8_MIN 0\n+\t#define UINT16_MAX (~(uint16_t)0)\n+\t#define UINT16_MIN 0\n+\t#define UINT32_MAX (~(uint32_t)0)\n+\t#define UINT32_MIN 0\n+\t#define UINT64_MAX (~(uint64_t)0)\n+\t#define UINT64_MIN 0\n+\t\n+\t#define UINTPTR_MAX (~(uintptr_t)0)\n+\t#define UINTPTR_MIN 0\n+\t\n+\t/* Need to do int_fast16_t as well, as type\n+\t   size may be architecture dependent */\n+\t#define UINT_FAST16_MAX (~(uint_fast16_t)0)\n+\t#define UINT_FAST16_MAX 0\n+\t\n+\t#define INT8_MAX (UINT8_MAX>>1)\n+\t#define INT8_MIN (INT8_MAX+1)\n+\t#define INT16_MAX (UINT16_MAX>>1)\n+\t#define INT16_MIN (INT16_MAX+1)\n+\t#define INT32_MAX (UINT32_MAX>>1)\n+\t#define INT32_MIN (INT32_MAX+1)\n+\t#define INT64_MAX (UINT64_MAX>>1)\n+\t#define INT64_MIN (INT64_MAX+1)\n+\t\n+\t#define INTPTR_MAX (UINTPTR_MAX>>1)\n+\t#define INTPTR_MIN (INTPTR_MAX+1)\t\n+\t\n+\t#define INT_FAST16_MAX (UINT_FAST16_MAX>>1)\n+\t#define INT_FAST16_MIN (INT_FAST16_MAX+1)\n+\t\n+\t/* now define equiv. constants */\n+\t#define UINT_FAST8_MAX UINT8_MAX\n+\t#define UINT_FAST8_MIN UINT_FAST8_MIN\n+\t#define INT_FAST8_MAX INT8_MAX\n+\t#define INT_FAST8_MIN INT8_MIN\n+\t#define UINT_FAST32_MAX UINT32_MAX\n+\t#define UINT_FAST32_MIN UINT32_MIN\n+\t#define INT_FAST32_MAX INT32_MAX\n+\t#define INT_FAST32_MIN INT32_MIN\n+\t#define UINT_FAST64_MAX UINT64_MAX\n+\t#define UINT_FAST64_MIN UINT64_MIN\n+\t#define INT_FAST64_MAX INT64_MAX\n+\t#define INT_FAST64_MIN INT64_MIN\n+\t\n+\t#define UINT_LEAST8_MAX UINT8_MAX\n+\t#define UINT_LEAST8_MIN UINT8_MIN\n+\t#define INT_LEAST8_MAX INT8_MAX\n+\t#define INT_LEAST8_MIN INT8_MIN\n+\t#define UINT_LEAST16_MAX UINT16_MAX\n+\t#define UINT_LEAST16_MIN UINT16_MIN\n+\t#define INT_LEAST16_MAX INT16_MAX\n+\t#define INT_LEAST16_MIN INT16_MIN\n+\t#define UINT_LEAST32_MAX UINT32_MAX\n+\t#define UINT_LEAST32_MIN UINT32_MIN\n+\t#define INT_LEAST32_MAX INT32_MAX\n+\t#define INT_LEAST32_MIN INT32_MIN\n+\t#define UINT_LEAST64_MAX UINT64_MAX\n+\t#define UINT_LEAST64_MIN UINT64_MIN\n+\t#define INT_LEAST64_MAX INT64_MAX\n+\t#define INT_LEAST64_MIN INT64_MIN\n+\t\n+\t#define UINTMAX_MAX UINT64_MAX\n+\t#define UINTMAX_MIN UINT64_MIN\n+\t#define INTMAX_MAX INT64_MAX\n+\t#define INTMAX_MIN INT64_MIN\n+\t\n+\t#endif\n+\t_EndOfHeader_;\n+};\n+\n+/*\n+ *  This hack makes makes unistd.h more POSIX-compliant on VxWorks\n+ */\n+fix = {\n+    hackname    = AAB_vxworks_unistd;\n+    files       = unistd.h;\n+    mach        = \"*-*-vxworks*\";\n+        \n+    replace     = <<- _EndOfHeader_\n+\t#ifndef _UNISTD_H\n+\t#define _UNISTD_H\n+\t#include_next <unistd.h>\n+\t#include <ioLib.h>\n+\t#ifndef STDIN_FILENO\n+\t#define STDIN_FILENO 0\n+\t#endif\n+\t#ifndef STDOUT_FILENO\n+\t#define STDOUT_FILENO 1\n+\t#endif\n+\t#ifndef STDERR_FILENO\n+\t#define STDERR_FILENO 2\n+\t#endif\n+\t#endif /* _UNISTD_H */\n+\t_EndOfHeader_;\n+};\n+\n \n /*\n  * complex.h on AIX 5 and AIX 6 define _Complex_I and I in terms of __I,\n@@ -4410,6 +4610,41 @@ fix = {\n     \"#endif /* __GNUC_TYPEOF_FEATURE_BROKEN_USE_DEFAULT_UNTIL_FIXED__ */\\n\";\n };\n \n+/*\n+ *  Wrap VxWorks ioctl to keep everything pretty\n+ */\n+fix = {\n+    hackname    = vxworks_ioctl_macro;\n+    files       = ioLib.h;\n+    mach        = \"*-*-vxworks*\";\n+\n+    c_fix       = format;\n+    c_fix_arg   = \"%0\\n\"\n+        \"#define ioctl(fd, func, arg) (ioctl)(fd, func, (int)(arg))\\n\";\n+    c_fix_arg   = \"extern[\\t ]+int[\\t ]+ioctl[\\t ]*\\\\([\\t ,[:alnum:]]*\\\\);\";\n+        \n+    test_text   = \"extern int ioctl ( int asdf1234, int jkl , int qwerty ) ;\";\n+};\n+\n+/*\n+ *  Wrap VxWorks mkdir to be posix compliant\n+ */\n+fix = {\n+    hackname    = vxworks_mkdir_macro;\n+    files       = sys/stat.h;\n+    mach        = \"*-*-vxworks*\";\n+\n+    c_fix       = format;\n+    c_fix_arg   = \"%0\\n\"\n+                \"#define mkdir(dir, ...) ((void)0, ##__VA_ARGS__, (mkdir)(dir))\\n\";\n+    c_fix_arg   = \"extern[\\t ]+STATUS[\\t ]+mkdir[\\t ]*\"\n+                \"\\\\([\\t ]*const[\\t ]+char[\\t ]*\\\\*[\\t ]*\" /* arg type */\n+                \"(|[_[:alpha:]][_[:alnum:]]*)\" /* arg name (optional) */\n+                \"\\\\)[\\t ]*;\";\n+        \n+    test_text   = \"extern STATUS mkdir (const char * _qwerty) ;\";\n+};\n+\n \n /*\n  *  Fix VxWorks <time.h> to not require including <vxTypes.h>.\n@@ -4443,6 +4678,20 @@ fix = {\n     \"# define\\t__INCstath <sys/stat.h>\";\n };\n \n+/*\n+ *  Make it so VxWorks does not include gcc/regs.h accidentally\n+ */\n+fix = {\n+    hackname    = vxworks_regs;\n+    mach        = \"*-*-vxworks*\";\n+\n+    select      = \"#[\\t ]*include[\\t ]+[<\\\"]regs.h[>\\\"]\";\n+    c_fix       = format;\n+    c_fix_arg   = \"#include <arch/../regs.h>\";\n+        \n+    test_text   = \"#include <regs.h>\\n\";\n+};\n+\n \n /*\n  *  Another bad dependency in VxWorks 5.2 <time.h>.\n@@ -4470,6 +4719,23 @@ fix = {\n                 \"#define VOIDFUNCPTR (void(*)())\";\n };\n \n+/*\n+ *  This hack makes write const-correct on VxWorks\n+ */\n+fix = {\n+    hackname    = vxworks_write_const;\n+    files       = ioLib.h;\n+    mach        = \"*-*-vxworks*\";\n+\n+    c_fix       = format;\n+    c_fix_arg   = \"extern int  write (int, const char*, size_t);\";\n+    c_fix_arg   = \"extern[\\t ]+int[\\t ]+write[\\t ]*\\\\(\"\n+                \"[\\t ]*int[\\t ]*,\"\n+                \"[\\t ]*char[\\t ]*\\\\*[\\t ]*,\"\n+                \"[\\t ]*size_t[\\t ]*\\\\)[\\t ]*;\";\n+\n+    test_text       = \"extern int write ( int , char * , size_t ) ;\";\n+};\n \n /*\n  *  There are several name conflicts with C++ reserved words in X11 header"}, {"sha": "6653fedb6eb0a96663a8e3c0859c55be4690545c", "filename": "fixincludes/mkfixinc.sh", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5d667b3bbbdd78d86bbe3c7a0282d9ed5802c5/fixincludes%2Fmkfixinc.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5d667b3bbbdd78d86bbe3c7a0282d9ed5802c5/fixincludes%2Fmkfixinc.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Fmkfixinc.sh?ref=1d5d667b3bbbdd78d86bbe3c7a0282d9ed5802c5", "patch": "@@ -15,7 +15,6 @@ case $machine in\n     i?86-*-mingw32* | \\\n     x86_64-*-mingw32* | \\\n     i?86-*-interix* | \\\n-    *-*-vxworks* | \\\n     powerpc-*-eabisim* | \\\n     powerpc-*-eabi*    | \\\n     powerpc-*-rtems*   | \\"}, {"sha": "766017280b585d915fd41e95e7a8b76bd2e79498", "filename": "fixincludes/tests/base/math.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5d667b3bbbdd78d86bbe3c7a0282d9ed5802c5/fixincludes%2Ftests%2Fbase%2Fmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5d667b3bbbdd78d86bbe3c7a0282d9ed5802c5/fixincludes%2Ftests%2Fbase%2Fmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fmath.h?ref=1d5d667b3bbbdd78d86bbe3c7a0282d9ed5802c5", "patch": "@@ -15,11 +15,6 @@\n #endif\n \n \n-#if defined( AAB_DARWIN7_9_LONG_DOUBLE_FUNCS_2_CHECK )\n-#include <architecture/ppc/math.h>\n-#endif  /* AAB_DARWIN7_9_LONG_DOUBLE_FUNCS_2_CHECK */\n-\n-\n #if defined( BROKEN_CABS_CHECK )\n #ifdef __STDC__\n \n@@ -30,6 +25,11 @@\n #endif  /* BROKEN_CABS_CHECK */\n \n \n+#if defined( DARWIN_9_LONG_DOUBLE_FUNCS_2_CHECK )\n+#include <architecture/ppc/math.h>\n+#endif  /* DARWIN_9_LONG_DOUBLE_FUNCS_2_CHECK */\n+\n+\n #if defined( HPPA_HPUX_FP_MACROS_CHECK )\n #endif /* _INCLUDE_HPUX_SOURCE */\n "}, {"sha": "9c81cff94bd6d9c3521770d48c267110c0e7b86c", "filename": "fixincludes/tests/base/sys/stat.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5d667b3bbbdd78d86bbe3c7a0282d9ed5802c5/fixincludes%2Ftests%2Fbase%2Fsys%2Fstat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5d667b3bbbdd78d86bbe3c7a0282d9ed5802c5/fixincludes%2Ftests%2Fbase%2Fsys%2Fstat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fsys%2Fstat.h?ref=1d5d667b3bbbdd78d86bbe3c7a0282d9ed5802c5", "patch": "@@ -28,6 +28,13 @@ extern int fchmod(int, mode_t);\n #endif  /* RS6000_FCHMOD_CHECK */\n \n \n+#if defined( VXWORKS_MKDIR_MACRO_CHECK )\n+extern STATUS mkdir (const char * _qwerty) ;\n+#define mkdir(dir, ...) ((void)0, ##__VA_ARGS__, (mkdir)(dir))\n+\n+#endif  /* VXWORKS_MKDIR_MACRO_CHECK */\n+\n+\n #if defined( VXWORKS_NEEDS_VXWORKS_CHECK )\n #include </dev/null> /* ULONG */\n # define\t__INCstath <sys/stat.h>"}, {"sha": "cf95321fb86d3564e1c7ca6d6aacc96cb6eff58a", "filename": "fixincludes/tests/base/testing.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5d667b3bbbdd78d86bbe3c7a0282d9ed5802c5/fixincludes%2Ftests%2Fbase%2Ftesting.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5d667b3bbbdd78d86bbe3c7a0282d9ed5802c5/fixincludes%2Ftests%2Fbase%2Ftesting.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Ftesting.h?ref=1d5d667b3bbbdd78d86bbe3c7a0282d9ed5802c5", "patch": "@@ -114,3 +114,9 @@ extern size_t\n #endif\n \n #endif  /* VMS_USE_PRAGMA_EXTERN_MODEL_CHECK */\n+\n+\n+#if defined( VXWORKS_REGS_CHECK )\n+#include <arch/../regs.h>\n+\n+#endif  /* VXWORKS_REGS_CHECK */"}]}