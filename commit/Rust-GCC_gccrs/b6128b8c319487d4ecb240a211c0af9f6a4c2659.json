{"sha": "b6128b8c319487d4ecb240a211c0af9f6a4c2659", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjYxMjhiOGMzMTk0ODdkNGVjYjI0MGEyMTFjMGFmOWY2YTRjMjY1OQ==", "commit": {"author": {"name": "Stuart Hastings", "email": "stuart@apple.com", "date": "2002-08-25T05:21:11Z"}, "committer": {"name": "Stan Shebs", "email": "shebs@gcc.gnu.org", "date": "2002-08-25T05:21:11Z"}, "message": "function.h (struct function): Add flag all_throwers_are_sibcalls.\n\n2002-08-24  Stuart Hastings  <stuart@apple.com>\n\n        * function.h (struct function): Add flag\n        all_throwers_are_sibcalls.\n        * except.c (set_nothrow_function_flags): Replaces\n        nothrow_function_p. Set new flag.\n        * except.h (set_nothrow_function_flags): Replaces\n        nothrow_function_p.\n        * dwarf2out.c (struct dw_fde_struct): Add flag\n        all_throwers_are_sibcalls.\n        (output_call_frame_info): Test it.\n        (dwarf2out_begin_prologue) Propagate it from cfun to\n        dw_fde_struct.\n        * toplev.c (rest_of_compilation): Update calls to\n        nothrow_function_p.\n\nFrom-SVN: r56561", "tree": {"sha": "3380fca11b3c1b6f649fb9a54c3af4eb23ad8090", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3380fca11b3c1b6f649fb9a54c3af4eb23ad8090"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6128b8c319487d4ecb240a211c0af9f6a4c2659", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6128b8c319487d4ecb240a211c0af9f6a4c2659", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6128b8c319487d4ecb240a211c0af9f6a4c2659", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6128b8c319487d4ecb240a211c0af9f6a4c2659/comments", "author": null, "committer": null, "parents": [{"sha": "13d3f0b659c7db21e006e8d2894c93707a95583d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13d3f0b659c7db21e006e8d2894c93707a95583d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13d3f0b659c7db21e006e8d2894c93707a95583d"}], "stats": {"total": 81, "additions": 66, "deletions": 15}, "files": [{"sha": "328a765893b98d784ec89403de3d50681a4cf891", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6128b8c319487d4ecb240a211c0af9f6a4c2659/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6128b8c319487d4ecb240a211c0af9f6a4c2659/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6128b8c319487d4ecb240a211c0af9f6a4c2659", "patch": "@@ -1,3 +1,19 @@\n+2002-08-24  Stuart Hastings  <stuart@apple.com>\n+\n+\t* function.h (struct function): Add flag\n+\tall_throwers_are_sibcalls.\n+\t* except.c (set_nothrow_function_flags): Replaces\n+\tnothrow_function_p. Set new flag.\n+\t* except.h (set_nothrow_function_flags): Replaces\n+\tnothrow_function_p.\n+\t* dwarf2out.c (struct dw_fde_struct): Add flag\n+\tall_throwers_are_sibcalls.\n+\t(output_call_frame_info): Test it.\n+\t(dwarf2out_begin_prologue) Propagate it from cfun to\n+\tdw_fde_struct.\n+\t* toplev.c (rest_of_compilation): Update calls to\n+\tnothrow_function_p.\n+\n 2002-08-23  Zack Weinberg  <zack@codesourcery.com>\n \n \t* ggc-page.c (compute_inverse): Short circuit calculation for"}, {"sha": "e8f02e62f5f56a1edefa8985188bc10f6e3124c5", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6128b8c319487d4ecb240a211c0af9f6a4c2659/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6128b8c319487d4ecb240a211c0af9f6a4c2659/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=b6128b8c319487d4ecb240a211c0af9f6a4c2659", "patch": "@@ -203,6 +203,7 @@ typedef struct dw_fde_struct\n   const char *dw_fde_end;\n   dw_cfi_ref dw_fde_cfi;\n   unsigned funcdef_number;\n+  unsigned all_throwers_are_sibcalls : 1;\n   unsigned nothrow : 1;\n   unsigned uses_eh_lsda : 1;\n }\n@@ -1952,8 +1953,9 @@ output_call_frame_info (for_eh)\n       fde = &fde_table[i];\n \n       /* Don't emit EH unwind info for leaf functions that don't need it.  */\n-      if (!flag_asynchronous_unwind_tables && for_eh && fde->nothrow\n-\t  && !  fde->uses_eh_lsda)\n+      if (!flag_asynchronous_unwind_tables && for_eh\n+\t  && (fde->nothrow || fde->all_throwers_are_sibcalls)\n+\t  && !fde->uses_eh_lsda)\n \tcontinue;\n \n       ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, FDE_LABEL, for_eh + i * 2);\n@@ -2115,6 +2117,7 @@ dwarf2out_begin_prologue (line, file)\n   fde->funcdef_number = current_function_funcdef_no;\n   fde->nothrow = current_function_nothrow;\n   fde->uses_eh_lsda = cfun->uses_eh_lsda;\n+  fde->all_throwers_are_sibcalls = cfun->all_throwers_are_sibcalls;\n \n   args_size = old_args_size = 0;\n "}, {"sha": "17eeae1bd8053fe53f8eebd8b092a58da2aeec89", "filename": "gcc/except.c", "status": "modified", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6128b8c319487d4ecb240a211c0af9f6a4c2659/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6128b8c319487d4ecb240a211c0af9f6a4c2659/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=b6128b8c319487d4ecb240a211c0af9f6a4c2659", "patch": "@@ -2893,25 +2893,50 @@ can_throw_external (insn)\n   return true;\n }\n \n-/* True if nothing in this function can throw outside this function.  */\n+/* Set current_function_nothrow and cfun->all_throwers_are_sibcalls.  */\n \n-bool\n-nothrow_function_p ()\n+void\n+set_nothrow_function_flags ()\n {\n   rtx insn;\n+  \n+  current_function_nothrow = 1;\n \n-  if (! flag_exceptions)\n-    return true;\n+  /* Assume cfun->all_throwers_are_sibcalls until we encounter\n+     something that can throw an exception.  We specifically exempt\n+     CALL_INSNs that are SIBLING_CALL_P, as these are really jumps,\n+     and can't throw.  Most CALL_INSNs are not SIBLING_CALL_P, so this\n+     is optimistic.  */\n \n+  cfun->all_throwers_are_sibcalls = 1;\n+\n+  if (! flag_exceptions)\n+    return;\n+  \n   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n     if (can_throw_external (insn))\n-      return false;\n+      {\n+\tcurrent_function_nothrow = 0;\n+\n+\tif (GET_CODE (insn) != CALL_INSN || !SIBLING_CALL_P (insn))\n+\t  {\n+\t    cfun->all_throwers_are_sibcalls = 0;\n+\t    return;\n+\t  }\n+      }\n+\n   for (insn = current_function_epilogue_delay_list; insn;\n        insn = XEXP (insn, 1))\n-    if (can_throw_external (XEXP (insn, 0)))\n-      return false;\n+    if (can_throw_external (insn))\n+      {\n+\tcurrent_function_nothrow = 0;\n \n-  return true;\n+\tif (GET_CODE (insn) != CALL_INSN || !SIBLING_CALL_P (insn))\n+\t  {\n+\t    cfun->all_throwers_are_sibcalls = 0;\n+\t    return;\n+\t  }\n+      }\n }\n \n \f"}, {"sha": "034ce51c8fe2e3bcab3cd07c7127f5035b000f62", "filename": "gcc/except.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6128b8c319487d4ecb240a211c0af9f6a4c2659/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6128b8c319487d4ecb240a211c0af9f6a4c2659/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=b6128b8c319487d4ecb240a211c0af9f6a4c2659", "patch": "@@ -91,8 +91,8 @@ extern void for_each_eh_label\t\t\tPARAMS ((void (*) (rtx)));\n extern bool can_throw_internal\t\t\tPARAMS ((rtx));\n extern bool can_throw_external\t\t\tPARAMS ((rtx));\n \n-/* Return nonzero if nothing in this function can throw.  */\n-extern bool nothrow_function_p\t\t\tPARAMS ((void));\n+/* Set current_function_nothrow and cfun->all_throwers_are_sibcalls.  */\n+extern void set_nothrow_function_flags\t\tPARAMS ((void));\n \n /* After initial rtl generation, call back to finish generating\n    exception support code.  */"}, {"sha": "ff96b9c2bb2b60628667aface0ba9bd068300db6", "filename": "gcc/function.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6128b8c319487d4ecb240a211c0af9f6a4c2659/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6128b8c319487d4ecb240a211c0af9f6a4c2659/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=b6128b8c319487d4ecb240a211c0af9f6a4c2659", "patch": "@@ -437,6 +437,13 @@ struct function GTY(())\n      we should try to cut corners where we can.  */\n   unsigned int is_thunk : 1;\n \n+  /* This bit is used by the exception handling logic.  It is set if all\n+     calls (if any) are sibling calls.  Such functions do not have to\n+     have EH tables generated, as they cannot throw.  A call to such a\n+     function, however, should be treated as throwing if any of its callees\n+     can throw. */\n+  unsigned int all_throwers_are_sibcalls : 1;\n+ \n   /* Nonzero if instrumentation calls for function entry and exit should be\n      generated.  */\n   unsigned int instrument_entry_exit : 1;"}, {"sha": "24e3f6a518307cf5350c48a954313f439f5c1031", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6128b8c319487d4ecb240a211c0af9f6a4c2659/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6128b8c319487d4ecb240a211c0af9f6a4c2659/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=b6128b8c319487d4ecb240a211c0af9f6a4c2659", "patch": "@@ -2506,7 +2506,7 @@ rest_of_compilation (decl)\n \t      free_bb_for_insn ();\n \t    }\n \n-\t  current_function_nothrow = nothrow_function_p ();\n+\t  set_nothrow_function_flags ();\n \t  if (current_function_nothrow)\n \t    /* Now we know that this can't throw; set the flag for the benefit\n \t       of other functions later in this translation unit.  */\n@@ -3528,7 +3528,7 @@ rest_of_compilation (decl)\n   shorten_branches (get_insns ());\n   timevar_pop (TV_SHORTEN_BRANCH);\n \n-  current_function_nothrow = nothrow_function_p ();\n+  set_nothrow_function_flags ();\n   if (current_function_nothrow)\n     /* Now we know that this can't throw; set the flag for the benefit\n        of other functions later in this translation unit.  */"}]}