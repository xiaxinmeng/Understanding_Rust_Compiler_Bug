{"sha": "e167c04d0610b49fe27420e71123d7dbba98bde0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE2N2MwNGQwNjEwYjQ5ZmUyNzQyMGU3MTEyM2Q3ZGJiYTk4YmRlMA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-01-07T14:06:26Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-01-07T14:06:26Z"}, "message": "re PR tree-optimization/55888 (ICE in bitmap_set_replace_value, at tree-ssa-pre.c:867)\n\n2013-01-07  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/55888\n\tPR tree-optimization/55862\n\t* tree-ssa-pre.c (phi_translate_1): Revert previous change.\n\t(valid_in_sets): Check if a NAME has a leader in AVAIL_OUT,\n\tnot if it is contained therein.\n\n\t* gcc.dg/torture/pr55888.c: New testcase.\n\nFrom-SVN: r194971", "tree": {"sha": "dc28dc21412a809e6d62d26768335ec24b6de555", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc28dc21412a809e6d62d26768335ec24b6de555"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e167c04d0610b49fe27420e71123d7dbba98bde0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e167c04d0610b49fe27420e71123d7dbba98bde0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e167c04d0610b49fe27420e71123d7dbba98bde0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e167c04d0610b49fe27420e71123d7dbba98bde0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0139aaab42fae137f8e518d85e8dc211c2a82f48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0139aaab42fae137f8e518d85e8dc211c2a82f48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0139aaab42fae137f8e518d85e8dc211c2a82f48"}], "stats": {"total": 137, "additions": 132, "deletions": 5}, "files": [{"sha": "0c5d0976b9768cde9c83c2bd3a722751ef0c3c8b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e167c04d0610b49fe27420e71123d7dbba98bde0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e167c04d0610b49fe27420e71123d7dbba98bde0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e167c04d0610b49fe27420e71123d7dbba98bde0", "patch": "@@ -1,3 +1,11 @@\n+2013-01-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/55888\n+\tPR tree-optimization/55862\n+\t* tree-ssa-pre.c (phi_translate_1): Revert previous change.\n+\t(valid_in_sets): Check if a NAME has a leader in AVAIL_OUT,\n+\tnot if it is contained therein.\n+\n 2013-01-07  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* config/avr/t-avr: Typo."}, {"sha": "f8a4563837d0cee17639e7de501136dc9dd81cd4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e167c04d0610b49fe27420e71123d7dbba98bde0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e167c04d0610b49fe27420e71123d7dbba98bde0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e167c04d0610b49fe27420e71123d7dbba98bde0", "patch": "@@ -1,3 +1,9 @@\n+2013-01-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/55888\n+\tPR tree-optimization/55862\n+\t* gcc.dg/torture/pr55888.c: New testcase.\n+\n 2013-01-07  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/55852"}, {"sha": "e75adcd2c625c56afe56deee2033f04c84a699d7", "filename": "gcc/testsuite/gcc.dg/torture/pr55888.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e167c04d0610b49fe27420e71123d7dbba98bde0/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr55888.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e167c04d0610b49fe27420e71123d7dbba98bde0/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr55888.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr55888.c?ref=e167c04d0610b49fe27420e71123d7dbba98bde0", "patch": "@@ -0,0 +1,116 @@\n+/* { dg-do compile } */\n+\n+typedef unsigned _GCC_ATTR_ALIGN_u32t;\n+typedef _GCC_ATTR_ALIGN_u32t _Uint32t __attribute__ ((__aligned__ (4)));\n+typedef unsigned int _GCC_ATTR_ALIGN_u8t __attribute__ ((__mode__ (__QI__)));\n+typedef _GCC_ATTR_ALIGN_u8t _Uint8t __attribute__ ((__aligned__ (1)));\n+typedef unsigned _Sizet;\n+typedef _Sizet size_t;\n+typedef _Uint8t uint8_t;\n+typedef _Uint32t uint32_t;\n+typedef enum\n+{\n+  PROTOBUF_C_LABEL_REQUIRED, PROTOBUF_C_LABEL_OPTIONAL,\n+    PROTOBUF_C_LABEL_REPEATED\n+}\n+ProtobufCLabel;\n+typedef enum\n+{\n+  PROTOBUF_C_TYPE_INT32, PROTOBUF_C_TYPE_SINT32, PROTOBUF_C_TYPE_SFIXED32,\n+    PROTOBUF_C_TYPE_INT64, PROTOBUF_C_TYPE_SINT64, PROTOBUF_C_TYPE_SFIXED64,\n+    PROTOBUF_C_TYPE_UINT32, PROTOBUF_C_TYPE_FIXED32, PROTOBUF_C_TYPE_UINT64,\n+    PROTOBUF_C_TYPE_FIXED64, PROTOBUF_C_TYPE_FLOAT, PROTOBUF_C_TYPE_DOUBLE,\n+    PROTOBUF_C_TYPE_BOOL, PROTOBUF_C_TYPE_ENUM, PROTOBUF_C_TYPE_STRING,\n+    PROTOBUF_C_TYPE_BYTES, PROTOBUF_C_TYPE_MESSAGE,\n+}\n+ProtobufCType;\n+typedef struct _ProtobufCBinaryData ProtobufCBinaryData;\n+struct _ProtobufCBinaryData\n+{\n+  size_t len;\n+};\n+typedef struct _ProtobufCMessageDescriptor ProtobufCMessageDescriptor;\n+typedef struct _ProtobufCFieldDescriptor ProtobufCFieldDescriptor;\n+typedef struct _ProtobufCMessage ProtobufCMessage;\n+struct _ProtobufCFieldDescriptor\n+{\n+  uint32_t id;\n+  ProtobufCLabel label;\n+  ProtobufCType type;\n+  unsigned offset;\n+};\n+struct _ProtobufCMessageDescriptor\n+{\n+  unsigned n_fields;\n+  const ProtobufCFieldDescriptor *fields;\n+};\n+struct _ProtobufCMessage\n+{\n+  const ProtobufCMessageDescriptor *descriptor;\n+};\n+typedef enum\n+{\n+  PROTOBUF_C_WIRE_TYPE_VARINT, PROTOBUF_C_WIRE_TYPE_64BIT,\n+    PROTOBUF_C_WIRE_TYPE_LENGTH_PREFIXED, PROTOBUF_C_WIRE_TYPE_START_GROUP,\n+    PROTOBUF_C_WIRE_TYPE_END_GROUP, PROTOBUF_C_WIRE_TYPE_32BIT\n+}\n+ProtobufCWireType;\n+static inline size_t\n+uint32_pack (uint32_t value, uint8_t * out)\n+{\n+  unsigned rv = 0;\n+  if (value >= 0x80)\n+    {\n+      if (value >= 0x80)\n+\t{\n+\t  value >>= 7;\n+\t}\n+    }\n+  out[rv++] = value;\n+}\n+\n+static inline size_t\n+binary_data_pack (const ProtobufCBinaryData * bd, uint8_t * out)\n+{\n+  size_t len = bd->len;\n+  size_t rv = uint32_pack (len, out);\n+  return rv + len;\n+}\n+\n+static size_t\n+required_field_pack (const ProtobufCFieldDescriptor * field,\n+\t\t     const void *member, uint8_t * out)\n+{\n+  size_t rv = tag_pack (field->id, out);\n+  switch (field->type)\n+    {\n+    case PROTOBUF_C_TYPE_BYTES:\n+      {\n+\tconst ProtobufCBinaryData *bd =\n+\t  ((const ProtobufCBinaryData *) member);\n+\tout[0] |= PROTOBUF_C_WIRE_TYPE_LENGTH_PREFIXED;\n+\treturn rv + binary_data_pack (bd, out + rv);\n+      }\n+    case PROTOBUF_C_TYPE_MESSAGE:\n+      {\n+\tout[0] |= PROTOBUF_C_WIRE_TYPE_LENGTH_PREFIXED;\n+\treturn rv +\n+\t  prefixed_message_pack (*(ProtobufCMessage * const *) member,\n+\t\t\t\t out + rv);\n+      }\n+    }\n+}\n+\n+size_t\n+protobuf_c_message_pack (const ProtobufCMessage * message, uint8_t * out)\n+{\n+  unsigned i;\n+  size_t rv = 0;\n+  for (i = 0; i < message->descriptor->n_fields; i++)\n+    {\n+      const ProtobufCFieldDescriptor *field = message->descriptor->fields + i;\n+      const void *member = ((const char *) message) + field->offset;\n+      if (field->label == PROTOBUF_C_LABEL_REQUIRED)\n+\trv += required_field_pack (field, member, out + rv);\n+    }\n+}"}, {"sha": "0f0b8d00734692720a27b5058b9978c6718db3cf", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e167c04d0610b49fe27420e71123d7dbba98bde0/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e167c04d0610b49fe27420e71123d7dbba98bde0/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=e167c04d0610b49fe27420e71123d7dbba98bde0", "patch": "@@ -1729,10 +1729,6 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \t    edge e = find_edge (pred, gimple_bb (def_stmt));\n \t    tree def = PHI_ARG_DEF (def_stmt, e->dest_idx);\n \n-\t    /* Valueize it.  */\n-\t    if (TREE_CODE (def) == SSA_NAME)\n-\t      def = VN_INFO (def)->valnum;\n-\n \t    /* Handle constant. */\n \t    if (is_gimple_min_invariant (def))\n \t      return get_or_alloc_expr_for_constant (def);\n@@ -1978,7 +1974,8 @@ valid_in_sets (bitmap_set_t set1, bitmap_set_t set2, pre_expr expr,\n   switch (expr->kind)\n     {\n     case NAME:\n-      return bitmap_set_contains_expr (AVAIL_OUT (block), expr);\n+      return bitmap_find_leader (AVAIL_OUT (block),\n+\t\t\t\t get_expr_value_id (expr)) != NULL;\n     case NARY:\n       {\n \tunsigned int i;"}]}