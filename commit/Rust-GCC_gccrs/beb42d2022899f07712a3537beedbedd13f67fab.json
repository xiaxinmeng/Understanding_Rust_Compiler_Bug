{"sha": "beb42d2022899f07712a3537beedbedd13f67fab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmViNDJkMjAyMjg5OWYwNzcxMmEzNTM3YmVlZGJlZGQxM2Y2N2ZhYg==", "commit": {"author": {"name": "Sriraman Tallam", "email": "tmsriram@google.com", "date": "2012-11-13T21:56:30Z"}, "committer": {"name": "Sriraman Tallam", "email": "tmsriram@gcc.gnu.org", "date": "2012-11-13T21:56:30Z"}, "message": "cgraph.c (insert_new_cgraph_node_version): Use cgraph_get_node instead of cgraph_get_create_node.\n\n2012-11-13  Sriraman Tallam  <tmsriram@google.com>\n\n\t* cgraph.c (insert_new_cgraph_node_version): Use cgraph_get_node\n\tinstead of cgraph_get_create_node.\n\t* config/i386/i386.c (ix86_get_function_versions_dispatcher): Move ifunc\n\tnot supported code to the end.\n\n\t* class.c (mark_versions_used): Remove.\n\t(resolve_address_of_overloaded_function): Call target hook\n\tfor versioned functions. Refactor to call\n\tget_function_versions_dispatcher.\n\t* decl.c (duplicate_decls): Add comments.\n\t* cp/call.c (get_function_version_dispatcher): Expose function.\n\t(mark_versions_used): Expose function.\n\t* cp/cp-tree.h (mark_versions_used): New declaration.\n\t(get_function_version_dispatcher): Ditto.\n\n\t* testsuite/g++.dg/mv4.C: Add require ifunc. Change error message.\n\t* testsuite/g++.dg/mv5.C: Add require ifunc.\n\t* testsuite/g++.dg/mv6.C: Add require ifunc.\n\nFrom-SVN: r193486", "tree": {"sha": "e0a478402322716f4df3e0475249558057df7da6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0a478402322716f4df3e0475249558057df7da6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/beb42d2022899f07712a3537beedbedd13f67fab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beb42d2022899f07712a3537beedbedd13f67fab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/beb42d2022899f07712a3537beedbedd13f67fab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beb42d2022899f07712a3537beedbedd13f67fab/comments", "author": {"login": "tmsri", "id": 38991943, "node_id": "MDQ6VXNlcjM4OTkxOTQz", "avatar_url": "https://avatars.githubusercontent.com/u/38991943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmsri", "html_url": "https://github.com/tmsri", "followers_url": "https://api.github.com/users/tmsri/followers", "following_url": "https://api.github.com/users/tmsri/following{/other_user}", "gists_url": "https://api.github.com/users/tmsri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmsri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmsri/subscriptions", "organizations_url": "https://api.github.com/users/tmsri/orgs", "repos_url": "https://api.github.com/users/tmsri/repos", "events_url": "https://api.github.com/users/tmsri/events{/privacy}", "received_events_url": "https://api.github.com/users/tmsri/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "73c3ed27fc6dc454b282d6e0d3fa76dbbd18e6dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73c3ed27fc6dc454b282d6e0d3fa76dbbd18e6dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73c3ed27fc6dc454b282d6e0d3fa76dbbd18e6dd"}], "stats": {"total": 129, "additions": 56, "deletions": 73}, "files": [{"sha": "4966b5dc1bc15d617677ea914f68a094c2b3543f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb42d2022899f07712a3537beedbedd13f67fab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb42d2022899f07712a3537beedbedd13f67fab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=beb42d2022899f07712a3537beedbedd13f67fab", "patch": "@@ -1,3 +1,10 @@\n+2012-11-13  Sriraman Tallam  <tmsriram@google.com>\n+\n+\t* cgraph.c (insert_new_cgraph_node_version): Use cgraph_get_node\n+\tinstead of cgraph_get_create_node.\n+\t* config/i386/i386.c (ix86_get_function_versions_dispatcher): Move ifunc\n+\tnot supported code to the end.\n+\n 2012-11-13  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/55253"}, {"sha": "1969576d00f079e1924a5327b82c8b289ca2f9b5", "filename": "gcc/cgraph.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb42d2022899f07712a3537beedbedd13f67fab/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb42d2022899f07712a3537beedbedd13f67fab/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=beb42d2022899f07712a3537beedbedd13f67fab", "patch": "@@ -206,7 +206,7 @@ insert_new_cgraph_node_version (struct cgraph_node *node)\n void\n delete_function_version (tree decl)\n {\n-  struct cgraph_node *decl_node = cgraph_get_create_node (decl);\n+  struct cgraph_node *decl_node = cgraph_get_node (decl);\n   struct cgraph_function_version_info *decl_v = NULL;\n \n   if (decl_node == NULL)"}, {"sha": "de94d4b0f7cbe9a5a442550422629dfc315841a4", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb42d2022899f07712a3537beedbedd13f67fab/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb42d2022899f07712a3537beedbedd13f67fab/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=beb42d2022899f07712a3537beedbedd13f67fab", "patch": "@@ -28961,11 +28961,6 @@ ix86_get_function_versions_dispatcher (void *decl)\n #if defined (ASM_OUTPUT_TYPE_DIRECTIVE) && HAVE_GNU_INDIRECT_FUNCTION\n   /* Right now, the dispatching is done via ifunc.  */\n   dispatch_decl = make_dispatcher_decl (default_node->symbol.decl); \n-#else\n-  error_at (DECL_SOURCE_LOCATION (default_node->symbol.decl),\n-\t    \"Multiversioning needs ifunc which is not supported \"\n-\t    \"in this configuration\");\n-#endif\n \n   dispatcher_node = cgraph_get_create_node (dispatch_decl);\n   gcc_assert (dispatcher_node != NULL);\n@@ -28982,7 +28977,11 @@ ix86_get_function_versions_dispatcher (void *decl)\n       it_v->dispatcher_resolver = dispatch_decl;\n       it_v = it_v->next;\n     }\n-\n+#else\n+  error_at (DECL_SOURCE_LOCATION (default_node->symbol.decl),\n+\t    \"multiversioning needs ifunc which is not supported \"\n+\t    \"in this configuration\");\n+#endif\n   return dispatch_decl;\n }\n "}, {"sha": "8d12568a6758ca14fbc1fd70be9686934051e8e5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb42d2022899f07712a3537beedbedd13f67fab/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb42d2022899f07712a3537beedbedd13f67fab/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=beb42d2022899f07712a3537beedbedd13f67fab", "patch": "@@ -1,3 +1,15 @@\n+2012-11-13  Sriraman Tallam  <tmsriram@google.com>\n+\n+\t* class.c (mark_versions_used): Remove.\n+\t(resolve_address_of_overloaded_function): Call target hook\n+\tfor versioned functions. Refactor to call\n+\tget_function_versions_dispatcher.\n+\t* decl.c (duplicate_decls): Add comments.\n+\t* cp/call.c (get_function_version_dispatcher): Expose function.\n+\t(mark_versions_used): Expose function.\n+\t* cp/cp-tree.h (mark_versions_used): New declaration.\n+\t(get_function_version_dispatcher): Ditto.\n+\n 2012-11-13  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/54466"}, {"sha": "bbeea8526291d9f1322615f8fc219fc3cf09a596", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb42d2022899f07712a3537beedbedd13f67fab/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb42d2022899f07712a3537beedbedd13f67fab/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=beb42d2022899f07712a3537beedbedd13f67fab", "patch": "@@ -6517,7 +6517,7 @@ magic_varargs_p (tree fn)\n \n /* Returns the decl of the dispatcher function if FN is a function version.  */\n \n-static tree\n+tree\n get_function_version_dispatcher (tree fn)\n {\n   tree dispatcher_decl = NULL;\n@@ -6530,8 +6530,8 @@ get_function_version_dispatcher (tree fn)\n \n   if (dispatcher_decl == NULL)\n     {\n-      error_at (input_location, \"Call to multiversioned function\"\n-                \" without a default is not allowed\");\n+      error_at (input_location, \"use of multiversioned function \"\n+\t\t\t\t\"without a default\");\n       return NULL;\n     }\n \n@@ -6543,7 +6543,7 @@ get_function_version_dispatcher (tree fn)\n /* fn is a function version dispatcher that is marked used. Mark all the \n    semantically identical function versions it will dispatch as used.  */\n \n-static void\n+void\n mark_versions_used (tree fn)\n {\n   struct cgraph_node *node;"}, {"sha": "0665e90f5a0bdba1e3588904a06d095e3aeeae67", "filename": "gcc/cp/class.c", "status": "modified", "additions": 10, "deletions": 59, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb42d2022899f07712a3537beedbedd13f67fab/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb42d2022899f07712a3537beedbedd13f67fab/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=beb42d2022899f07712a3537beedbedd13f67fab", "patch": "@@ -7068,38 +7068,6 @@ pop_lang_context (void)\n {\n   current_lang_name = VEC_pop (tree, current_lang_base);\n }\n-\n-/* fn is a function version dispatcher that is marked used. Mark all the \n-   semantically identical function versions it will dispatch as used.  */\n-\n-static void\n-mark_versions_used (tree fn)\n-{\n-  struct cgraph_node *node;\n-  struct cgraph_function_version_info *node_v;\n-  struct cgraph_function_version_info *it_v;\n-\n-  gcc_assert (TREE_CODE (fn) == FUNCTION_DECL);\n-\n-  node = cgraph_get_node (fn);\n-  if (node == NULL)\n-    return;\n-\n-  gcc_assert (node->dispatcher_function);\n-\n-  node_v = get_cgraph_node_version (node);\n-  if (node_v == NULL)\n-    return;\n-\n-  /* All semantically identical versions are chained.  Traverse and mark each\n-     one of them as used.  */\n-  it_v = node_v->next;\n-  while (it_v != NULL)\n-    {\n-      mark_used (it_v->this_node->symbol.decl);\n-      it_v = it_v->next;\n-    }\n-}\n \f\n /* Type instantiation routines.  */\n \n@@ -7315,22 +7283,13 @@ resolve_address_of_overloaded_function (tree target_type,\n \n       fn = TREE_PURPOSE (matches);\n \n-      /* For multi-versioned functions, more than one match is just fine.\n-\t Call decls_match to make sure they are different because they are\n-\t versioned.  */\n-      if (DECL_FUNCTION_VERSIONED (fn))\n-\t{\n-          for (match = TREE_CHAIN (matches); match; match = TREE_CHAIN (match))\n-  \t    if (!DECL_FUNCTION_VERSIONED (TREE_PURPOSE (match))\n-\t        || decls_match (fn, TREE_PURPOSE (match)))\n-\t      break;\n-\t}\n-      else\n-\t{\n-          for (match = TREE_CHAIN (matches); match; match = TREE_CHAIN (match))\n-  \t    if (!decls_match (fn, TREE_PURPOSE (match)))\n-\t      break;\n-\t}\n+      /* For multi-versioned functions, more than one match is just fine and\n+\t decls_match will return false as they are different.  */\n+      for (match = TREE_CHAIN (matches); match; match = TREE_CHAIN (match))\n+\tif (!decls_match (fn, TREE_PURPOSE (match))\n+\t    && !targetm.target_option.function_versions\n+\t       (fn, TREE_PURPOSE (match)))\n+          break;\n \n       if (match)\n \t{\n@@ -7377,17 +7336,9 @@ resolve_address_of_overloaded_function (tree target_type,\n      function version at run-time.  */\n   if (DECL_FUNCTION_VERSIONED (fn))\n     {\n-      tree dispatcher_decl = NULL;\n-      gcc_assert (targetm.get_function_versions_dispatcher);\n-      dispatcher_decl = targetm.get_function_versions_dispatcher (fn);\n-      if (!dispatcher_decl)\n-\t{\n-\t  error_at (input_location, \"Pointer to a multiversioned function\"\n-\t\t    \" without a default is not allowed\");\n-\t  return error_mark_node;\n-\t}\n-      retrofit_lang_decl (dispatcher_decl);\n-      fn = dispatcher_decl;\n+      fn = get_function_version_dispatcher (fn);\n+      if (fn == NULL)\n+\treturn error_mark_node;\n       /* Mark all the versions corresponding to the dispatcher as used.  */\n       if (!(flags & tf_conv))\n \tmark_versions_used (fn);"}, {"sha": "7dd6679868c715c0ceccfe9ba6d822c0fdaf1e93", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb42d2022899f07712a3537beedbedd13f67fab/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb42d2022899f07712a3537beedbedd13f67fab/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=beb42d2022899f07712a3537beedbedd13f67fab", "patch": "@@ -4971,6 +4971,8 @@ extern bool is_list_ctor\t\t\t(tree);\n #ifdef ENABLE_CHECKING\n extern void validate_conversion_obstack\t\t(void);\n #endif /* ENABLE_CHECKING */\n+extern void mark_versions_used\t\t\t(tree);\n+extern tree get_function_version_dispatcher\t(tree);\n \n /* in class.c */\n extern tree build_vfield_ref\t\t\t(tree, tree);"}, {"sha": "115c567d6ddb30a6fcc0564b75d582d97f5640b9", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb42d2022899f07712a3537beedbedd13f67fab/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb42d2022899f07712a3537beedbedd13f67fab/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=beb42d2022899f07712a3537beedbedd13f67fab", "patch": "@@ -2307,12 +2307,15 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n   else if (DECL_PRESERVE_P (newdecl))\n     DECL_PRESERVE_P (olddecl) = 1;\n \n-  /* If the olddecl is a version, so is the newdecl.  */\n+  /* Merge the DECL_FUNCTION_VERSIONED information.  newdecl will be copied\n+     to olddecl and deleted.  */\n   if (TREE_CODE (newdecl) == FUNCTION_DECL\n       && DECL_FUNCTION_VERSIONED (olddecl))\n     {\n+      /* Set the flag for newdecl so that it gets copied to olddecl.  */\n       DECL_FUNCTION_VERSIONED (newdecl) = 1;\n-      /* newdecl will be purged and is no longer a version.  */\n+      /* newdecl will be purged after copying to olddecl and is no longer\n+         a version.  */\n       delete_function_version (newdecl);\n     }\n "}, {"sha": "fec239c5ecba1cb650d91e7c4237b97931f42b7b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb42d2022899f07712a3537beedbedd13f67fab/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb42d2022899f07712a3537beedbedd13f67fab/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=beb42d2022899f07712a3537beedbedd13f67fab", "patch": "@@ -1,3 +1,9 @@\n+2012-11-13  Sriraman Tallam  <tmsriram@google.com>\n+\n+\t* testsuite/g++.dg/mv4.C: Add require ifunc. Change error message.\n+\t* testsuite/g++.dg/mv5.C: Add require ifunc.\n+\t* testsuite/g++.dg/mv6.C: Add require ifunc.\n+\n 2012-11-13  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/55253"}, {"sha": "ac5c5481c665835d8313350a5b93604d94bc32ba", "filename": "gcc/testsuite/g++.dg/mv4.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb42d2022899f07712a3537beedbedd13f67fab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmv4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb42d2022899f07712a3537beedbedd13f67fab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmv4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmv4.C?ref=beb42d2022899f07712a3537beedbedd13f67fab", "patch": "@@ -3,6 +3,7 @@\n    and its pointer is taken.  */\n \n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-ifunc \"\" }  */\n /* { dg-options \"-O2 -mno-sse -mno-popcnt\" } */\n \n int __attribute__ ((target (\"sse\")))\n@@ -18,6 +19,6 @@ foo ()\n \n int main ()\n {\n-  int (*p)() = &foo; /* { dg-error \"Pointer to a multiversioned function without a default is not allowed\" {} } */\n+  int (*p)() = &foo; /* { dg-error \"use of multiversioned function without a default\" {} } */\n   return (*p)();\n }"}, {"sha": "cac6d04e2e3d77d5d71e3eb4ac47613cf3afc713", "filename": "gcc/testsuite/g++.dg/mv5.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb42d2022899f07712a3537beedbedd13f67fab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmv5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb42d2022899f07712a3537beedbedd13f67fab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmv5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmv5.C?ref=beb42d2022899f07712a3537beedbedd13f67fab", "patch": "@@ -2,6 +2,7 @@\n    marked comdat with inline keyword.  */\n \n /* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-ifunc \"\" }  */\n /* { dg-options \"-O2  -mno-popcnt\" } */\n \n "}, {"sha": "a2cde53362b570f9282b512d63a8e841a8386b72", "filename": "gcc/testsuite/g++.dg/mv6.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb42d2022899f07712a3537beedbedd13f67fab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmv6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb42d2022899f07712a3537beedbedd13f67fab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmv6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmv6.C?ref=beb42d2022899f07712a3537beedbedd13f67fab", "patch": "@@ -1,6 +1,7 @@\n /* Test to check if member version multiversioning works correctly.  */\n \n /* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-ifunc \"\" }  */\n \n class Foo\n {"}]}