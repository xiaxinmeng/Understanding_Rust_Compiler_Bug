{"sha": "43f3a59d9fbdeade83036d203a25669bb69201da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNmM2E1OWQ5ZmJkZWFkZTgzMDM2ZDIwM2EyNTY2OWJiNjkyMDFkYQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-01-02T15:30:43Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-01-02T15:30:43Z"}, "message": "cygming.h: Fix comment formatting.\n\n\t* config/i386/cygming.h: Fix comment formatting.\n\t* config/i386/djgpp.h: Likewise.\n\t* config/i386/gthr-win32.c: Likewise.\n\t* config/i386/i386-interix.h: Likewise.\n\t* config/i386/i386.c: Likewise.\n\t* config/i386/i386.h: Likewise.\n\t* config/i386/openbsd.h: Likewise.\n\t* config/i386/winnt.c: Likewise.\n\t* config/i386/xm-mingw32.h: Likewise.\n\nFrom-SVN: r75324", "tree": {"sha": "cca9860de43ac15a8b676d3d7ac7ca63e476fdb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cca9860de43ac15a8b676d3d7ac7ca63e476fdb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43f3a59d9fbdeade83036d203a25669bb69201da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43f3a59d9fbdeade83036d203a25669bb69201da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43f3a59d9fbdeade83036d203a25669bb69201da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43f3a59d9fbdeade83036d203a25669bb69201da/comments", "author": null, "committer": null, "parents": [{"sha": "b0bc6e8e6cd3f0a5789f7e3079f05d583e80a565", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0bc6e8e6cd3f0a5789f7e3079f05d583e80a565", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0bc6e8e6cd3f0a5789f7e3079f05d583e80a565"}], "stats": {"total": 69, "additions": 41, "deletions": 28}, "files": [{"sha": "8f95d6ce42d07bfa87622e39f584877d24839eb5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f3a59d9fbdeade83036d203a25669bb69201da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f3a59d9fbdeade83036d203a25669bb69201da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43f3a59d9fbdeade83036d203a25669bb69201da", "patch": "@@ -1,3 +1,15 @@\n+2004-01-02  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/i386/cygming.h: Fix comment formatting.\n+\t* config/i386/djgpp.h: Likewise.\n+\t* config/i386/gthr-win32.c: Likewise.\n+\t* config/i386/i386-interix.h: Likewise.\n+\t* config/i386/i386.c: Likewise.\n+\t* config/i386/i386.h: Likewise.\n+\t* config/i386/openbsd.h: Likewise.\n+\t* config/i386/winnt.c: Likewise.\n+\t* config/i386/xm-mingw32.h: Likewise.\n+\n 2004-01-02  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* doc/gcc.texi, doc/invoke.texi, doc/install.texi: Update"}, {"sha": "11d14fef0da8d4e5cae890682fc0c7cea6b3d1eb", "filename": "gcc/config/i386/cygming.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f3a59d9fbdeade83036d203a25669bb69201da/gcc%2Fconfig%2Fi386%2Fcygming.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f3a59d9fbdeade83036d203a25669bb69201da/gcc%2Fconfig%2Fi386%2Fcygming.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.h?ref=43f3a59d9fbdeade83036d203a25669bb69201da", "patch": "@@ -230,7 +230,7 @@ do {\t\t\t\t\t\t\t\\\n \n /* By default, target has a 80387, uses IEEE compatible arithmetic,\n    returns float values in the 387 and needs stack probes.\n-   We also align doubles to 64-bits for MSVC default compatibility. */\n+   We also align doubles to 64-bits for MSVC default compatibility.  */\n \n #undef TARGET_SUBTARGET_DEFAULT\n #define TARGET_SUBTARGET_DEFAULT \\"}, {"sha": "b0c87dbbc5630e9378482ad7bdd1888005a5d77f", "filename": "gcc/config/i386/djgpp.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f3a59d9fbdeade83036d203a25669bb69201da/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f3a59d9fbdeade83036d203a25669bb69201da/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdjgpp.h?ref=43f3a59d9fbdeade83036d203a25669bb69201da", "patch": "@@ -57,9 +57,9 @@ Boston, MA 02111-1307, USA.  */\n #undef TEXT_SECTION_ASM_OP\n #define TEXT_SECTION_ASM_OP \"\\t.section .text\"\n \n-/* Define standard DJGPP installation paths.                             */\n+/* Define standard DJGPP installation paths.  */\n /* We override default /usr or /usr/local part with /dev/env/DJDIR which */\n-/* points to actual DJGPP installation directory.                        */\n+/* points to actual DJGPP installation directory.  */\n \n /* Standard include directory */\n #undef STANDARD_INCLUDE_DIR"}, {"sha": "fde4aa20936ca4208656f7242f492d4fc22cc792", "filename": "gcc/config/i386/gthr-win32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f3a59d9fbdeade83036d203a25669bb69201da/gcc%2Fconfig%2Fi386%2Fgthr-win32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f3a59d9fbdeade83036d203a25669bb69201da/gcc%2Fconfig%2Fi386%2Fgthr-win32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgthr-win32.c?ref=43f3a59d9fbdeade83036d203a25669bb69201da", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of W32-specific threads compatibility routines for\n-   libgcc2.   */ \n+   libgcc2.  */\n \n /* Copyright (C) 1999, 2000, 2002 Free Software Foundation, Inc.\n    Contributed by Mumit Khan <khan@xraylith.wisc.edu>."}, {"sha": "fa0eec2421f7116fd7137edc98817c9f0984b258", "filename": "gcc/config/i386/i386-interix.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f3a59d9fbdeade83036d203a25669bb69201da/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f3a59d9fbdeade83036d203a25669bb69201da/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-interix.h?ref=43f3a59d9fbdeade83036d203a25669bb69201da", "patch": "@@ -36,7 +36,7 @@ Boston, MA 02111-1307, USA.  */\n /* By default, target has a 80387, uses IEEE compatible arithmetic,\n    and returns float values in the 387 and needs stack probes\n    We also align doubles to 64-bits for MSVC default compatibility\n-   We do bitfields MSVC-compatibly by default, too. */\n+   We do bitfields MSVC-compatibly by default, too.  */\n #undef TARGET_SUBTARGET_DEFAULT\n #define TARGET_SUBTARGET_DEFAULT \\\n    (MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS | MASK_STACK_PROBE | \\\n@@ -140,7 +140,7 @@ Boston, MA 02111-1307, USA.  */\n    generated assembly code more compact (and thus faster to assemble)\n    as well as more readable, especially for targets like the i386\n    (where the only alternative is to output character sequences as\n-   comma separated lists of numbers).   */\n+   comma separated lists of numbers).  */\n \n #define ASM_OUTPUT_LIMITED_STRING(FILE, STR)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n@@ -242,7 +242,7 @@ Boston, MA 02111-1307, USA.  */\n    available at runtime, so it's hopeless to try.\n \n    And if the user tries to set the flag for objc, give an error\n-   so he has some clue. */\n+   so he has some clue.  */\n \n #undef  SUBTARGET_OVERRIDE_OPTIONS\n #define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\\n@@ -356,7 +356,7 @@ extern void i386_pe_unique_section (tree, int);\n /* Don't assume anything about the header files.  */\n #define NO_IMPLICIT_EXTERN_C\n \n-/* MSVC returns structs of up to 8 bytes via registers. */\n+/* MSVC returns structs of up to 8 bytes via registers.  */\n \n #define DEFAULT_PCC_STRUCT_RETURN 0\n "}, {"sha": "842a29cd7bf21d3618456c85d6635d1880f15426", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f3a59d9fbdeade83036d203a25669bb69201da/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f3a59d9fbdeade83036d203a25669bb69201da/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=43f3a59d9fbdeade83036d203a25669bb69201da", "patch": "@@ -918,7 +918,7 @@ static rtx construct_container (enum machine_mode, tree, int, int, int,\n static enum x86_64_reg_class merge_classes (enum x86_64_reg_class,\n \t\t\t\t\t    enum x86_64_reg_class);\n \n-/* Table of constants used by fldpi, fldln2, etc...  */\n+/* Table of constants used by fldpi, fldln2, etc....  */\n static REAL_VALUE_TYPE ext_80387_constants_table [5];\n static bool ext_80387_constants_init = 0;\n static void init_ext_80387_constants (void);\n@@ -1747,10 +1747,11 @@ ix86_return_pops_args (tree fundecl, tree funtype, int size)\n {\n   int rtd = TARGET_RTD && (!fundecl || TREE_CODE (fundecl) != IDENTIFIER_NODE);\n \n-    /* Cdecl functions override -mrtd, and never pop the stack.  */\n+  /* Cdecl functions override -mrtd, and never pop the stack.  */\n   if (! lookup_attribute (\"cdecl\", TYPE_ATTRIBUTES (funtype))) {\n \n-    /* Stdcall and fastcall functions will pop the stack if not variable args. */\n+    /* Stdcall and fastcall functions will pop the stack if not\n+       variable args.  */\n     if (lookup_attribute (\"stdcall\", TYPE_ATTRIBUTES (funtype))\n         || lookup_attribute (\"fastcall\", TYPE_ATTRIBUTES (funtype)))\n       rtd = 1;\n@@ -1997,7 +1998,7 @@ classify_argument (enum machine_mode mode, tree type,\n \t\t     }\n \t\t}\n \t    }\n-\t  /* And now merge the fields of structure.   */\n+\t  /* And now merge the fields of structure.  */\n \t  for (field = TYPE_FIELDS (type); field; field = TREE_CHAIN (field))\n \t    {\n \t      if (TREE_CODE (field) == FIELD_DECL)\n@@ -2634,7 +2635,7 @@ contains_128bit_aligned_vector_p (tree type)\n \t\t    return true;\n \t\t}\n \t    }\n-\t  /* And now merge the fields of structure.   */\n+\t  /* And now merge the fields of structure.  */\n \t  for (field = TYPE_FIELDS (type); field; field = TREE_CHAIN (field))\n \t    {\n \t      if (TREE_CODE (field) == FIELD_DECL\n@@ -2764,7 +2765,7 @@ ix86_return_in_memory (tree type)\n \t either (1) being abi incompatible with a -march switch,\n \t or (2) generating an error here.  Given no good solution,\n \t I think the safest thing is one warning.  The user won't\n-\t be able to use -Werror, but...  */\n+\t be able to use -Werror, but....  */\n       if (size == 16)\n \t{\n \t  static bool warned;\n@@ -6233,7 +6234,7 @@ legitimize_pic_address (rtx orig, rtx reg)\n \n \t  /* We must match stuff we generate before.  Assume the only\n \t     unspecs that can get here are ours.  Not that we could do\n-\t     anything with them anyway...  */\n+\t     anything with them anyway....  */\n \t  if (GET_CODE (addr) == UNSPEC\n \t      || (GET_CODE (addr) == PLUS\n \t\t  && GET_CODE (XEXP (addr, 0)) == UNSPEC))\n@@ -9474,7 +9475,7 @@ ix86_expand_carry_flag_compare (enum rtx_code code, rtx op0, rtx op1, rtx *pop)\n     GET_MODE (op0) != VOIDmode ? GET_MODE (op0) : GET_MODE (op1);\n \n   /* Do not handle DImode compares that go trought special path.  Also we can't\n-     deal with FP compares yet.  This is possible to add.   */\n+     deal with FP compares yet.  This is possible to add.  */\n   if ((mode == DImode && !TARGET_64BIT))\n     return false;\n   if (FLOAT_MODE_P (mode))\n@@ -9543,7 +9544,7 @@ ix86_expand_carry_flag_compare (enum rtx_code code, rtx op0, rtx op1, rtx *pop)\n \t{\n \t  op1 = gen_int_mode (INTVAL (op1) + 1, GET_MODE (op0));\n \t  /* Bail out on overflow.  We still can swap operands but that\n-\t     would force loading of the constant into register. */\n+\t     would force loading of the constant into register.  */\n \t  if (op1 == const0_rtx\n \t      || !x86_64_immediate_operand (op1, GET_MODE (op1)))\n \t    return false;\n@@ -11785,7 +11786,7 @@ memory_address_length (rtx addr)\n       else if (base == hard_frame_pointer_rtx)\n         len = 1;\n \n-      /* An index requires the two-byte modrm form...  */\n+      /* An index requires the two-byte modrm form....  */\n       if (index\n \t  /* ...like esp, which always wants an index.  */\n \t  || base == stack_pointer_rtx"}, {"sha": "148726adb960f850efbaff9735bac37b001814b4", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f3a59d9fbdeade83036d203a25669bb69201da/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f3a59d9fbdeade83036d203a25669bb69201da/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=43f3a59d9fbdeade83036d203a25669bb69201da", "patch": "@@ -320,7 +320,7 @@ extern int x86_prefetch_sse;\n \n /* WARNING: Do not mark empty strings for translation, as calling\n             gettext on an empty string does NOT return an empty\n-            string. */\n+            string.  */\n \n \n #define TARGET_SWITCHES\t\t\t\t\t\t\t      \\\n@@ -477,9 +477,9 @@ extern int x86_prefetch_sse;\n   { \"cmodel=\", &ix86_cmodel_string,\t\t\t\t\\\n     N_(\"Use given x86-64 code model\"), 0},\t\t\t\\\n   { \"debug-arg\", &ix86_debug_arg_string,\t\t\t\\\n-    \"\" /* Undocumented. */, 0},\t\t\t\t\t\\\n+    \"\" /* Undocumented.  */, 0},\t\t\t\t\\\n   { \"debug-addr\", &ix86_debug_addr_string,\t\t\t\\\n-    \"\" /* Undocumented. */, 0},\t\t\t\t\t\\\n+    \"\" /* Undocumented.  */, 0},\t\t\t\t\\\n   { \"asm=\", &ix86_asm_string,\t\t\t\t\t\\\n     N_(\"Use given assembler dialect\"), 0},\t\t\t\\\n   { \"tls-dialect=\", &ix86_tls_dialect_string,\t\t\t\\\n@@ -1311,7 +1311,7 @@ enum reg_class\n #define Q_CLASS_P(CLASS) \\\n   reg_class_subset_p ((CLASS), Q_REGS)\n \n-/* Give names of register classes as strings for dump file.   */\n+/* Give names of register classes as strings for dump file.  */\n \n #define REG_CLASS_NAMES \\\n {  \"NO_REGS\",\t\t\t\t\\\n@@ -3132,7 +3132,7 @@ enum fp_cw_mode {FP_CW_STORED, FP_CW_UNINITIALIZED, FP_CW_ANY};\n    scheduling just increases amount of live registers at time and in\n    the turn amount of fxch instructions needed.\n \n-   ??? Maybe Pentium chips benefits from renaming, someone can try...  */\n+   ??? Maybe Pentium chips benefits from renaming, someone can try....  */\n \n #define HARD_REGNO_RENAME_OK(SRC, TARGET)  \\\n    ((SRC) < FIRST_STACK_REG || (SRC) > LAST_STACK_REG)"}, {"sha": "fdef0a8efe8fd6dcf94ed90125e936aa7e1d92d9", "filename": "gcc/config/i386/openbsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f3a59d9fbdeade83036d203a25669bb69201da/gcc%2Fconfig%2Fi386%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f3a59d9fbdeade83036d203a25669bb69201da/gcc%2Fconfig%2Fi386%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fopenbsd.h?ref=43f3a59d9fbdeade83036d203a25669bb69201da", "patch": "@@ -90,7 +90,7 @@ Boston, MA 02111-1307, USA.  */\n /* Assembler format: exception region output.  */\n \n /* All configurations that don't use elf must be explicit about not using\n-   dwarf unwind information. */\n+   dwarf unwind information.  */\n #define DWARF2_UNWIND_INFO 0\n \n #undef ASM_PREFERRED_EH_DATA_FORMAT"}, {"sha": "6d29c27e0da158e8b3878551fc40ecad8c47d42a", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f3a59d9fbdeade83036d203a25669bb69201da/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f3a59d9fbdeade83036d203a25669bb69201da/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=43f3a59d9fbdeade83036d203a25669bb69201da", "patch": "@@ -124,7 +124,7 @@ ix86_handle_dll_attribute (tree * pnode, tree name, tree args, int flags,\n \t}\n     }\n \n-  /*  Report error if symbol is not accessible at global scope. */\n+  /*  Report error if symbol is not accessible at global scope.  */\n   if (!TREE_PUBLIC (node)\n       && (TREE_CODE (node) == VAR_DECL\n \t  || TREE_CODE (node) == FUNCTION_DECL))\n@@ -251,7 +251,7 @@ i386_pe_dllimport_p (tree decl)\n \n       /* We ignore the dllimport attribute for inline member functions.\n \t This differs from MSVC behavior which treats it like GNUC\n-\t 'extern inline' extension.   */\n+\t 'extern inline' extension.  */\n       else if (TREE_CODE (decl) == FUNCTION_DECL && DECL_INLINE (decl))\n         {\n \t  if (extra_warnings)\n@@ -374,7 +374,7 @@ i386_pe_mark_dllimport (tree decl)\n     }\n   else if (i386_pe_dllimport_name_p (oldname))\n     {\n-      /* Already done, but do a sanity check to prevent assembler errors. */\n+      /* Already done, but do a sanity check to prevent assembler errors.  */\n       if (!DECL_EXTERNAL (decl) || !TREE_PUBLIC (decl))\n \t{\n \t  error (\"%Jfailure in redeclaration of '%D': dllimport'd \""}, {"sha": "efd0ef9ecbeeaf70b63ff6f64eb7dbcb3c334734", "filename": "gcc/config/i386/xm-mingw32.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f3a59d9fbdeade83036d203a25669bb69201da/gcc%2Fconfig%2Fi386%2Fxm-mingw32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f3a59d9fbdeade83036d203a25669bb69201da/gcc%2Fconfig%2Fi386%2Fxm-mingw32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxm-mingw32.h?ref=43f3a59d9fbdeade83036d203a25669bb69201da", "patch": "@@ -25,5 +25,5 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #undef PATH_SEPARATOR\n #define PATH_SEPARATOR ';'\n \n-/* This is the name of the null device on windows. */ \n+/* This is the name of the null device on windows.  */\n #define HOST_BIT_BUCKET \"nul\""}]}