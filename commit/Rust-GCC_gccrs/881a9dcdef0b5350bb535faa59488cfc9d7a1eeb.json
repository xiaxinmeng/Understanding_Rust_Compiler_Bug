{"sha": "881a9dcdef0b5350bb535faa59488cfc9d7a1eeb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgxYTlkY2RlZjBiNTM1MGJiNTM1ZmFhNTk0ODhjZmM5ZDdhMWVlYg==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2012-09-10T18:48:34Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2012-09-10T18:48:34Z"}, "message": "tree-ssa-forwprop.c (simplify_bitfield_ref): New function.\n\n2012-09-10  Marc Glisse  <marc.glisse@inria.fr>\n\ngcc/\n        * tree-ssa-forwprop.c (simplify_bitfield_ref): New function.\n        (ssa_forward_propagate_and_combine): Call it.\n\ngcc/testsuite/\n        * gcc.dg/tree-ssa/forwprop-21.c: New testcase.\n\nFrom-SVN: r191158", "tree": {"sha": "90f9e4ccf5c5a6dac2bb628c6b5c6b5aa196ccc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90f9e4ccf5c5a6dac2bb628c6b5c6b5aa196ccc0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/881a9dcdef0b5350bb535faa59488cfc9d7a1eeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/881a9dcdef0b5350bb535faa59488cfc9d7a1eeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/881a9dcdef0b5350bb535faa59488cfc9d7a1eeb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/881a9dcdef0b5350bb535faa59488cfc9d7a1eeb/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "965c17988d6d4d0e8e943e087698bff6f9318a4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/965c17988d6d4d0e8e943e087698bff6f9318a4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/965c17988d6d4d0e8e943e087698bff6f9318a4a"}], "stats": {"total": 96, "additions": 96, "deletions": 0}, "files": [{"sha": "281540f416f175f33f4ca1ba53129e27c092d6fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/881a9dcdef0b5350bb535faa59488cfc9d7a1eeb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/881a9dcdef0b5350bb535faa59488cfc9d7a1eeb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=881a9dcdef0b5350bb535faa59488cfc9d7a1eeb", "patch": "@@ -1,3 +1,8 @@\n+2012-09-10  Marc Glisse  <marc.glisse@inria.fr>\n+\n+        * tree-ssa-forwprop.c (simplify_bitfield_ref): New function.\n+        (ssa_forward_propagate_and_combine): Call it.\n+\n 2012-09-10  Steve Ellcey  <sellcey@mips.com>\n \n \t* config.gcc: Add mips*-mti-linux* target"}, {"sha": "dc3577401e81d09464ae0a90020259196e3bc85e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/881a9dcdef0b5350bb535faa59488cfc9d7a1eeb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/881a9dcdef0b5350bb535faa59488cfc9d7a1eeb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=881a9dcdef0b5350bb535faa59488cfc9d7a1eeb", "patch": "@@ -1,3 +1,7 @@\n+2012-09-10  Marc Glisse  <marc.glisse@inria.fr>\n+\n+        * gcc.dg/tree-ssa/forwprop-21.c: New testcase.\n+\n 2012-09-10  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* gcc.dg/tm/reg-promotion.c: Modify dump message check."}, {"sha": "4859fa8c305946a8a624bcfddabdb31165e57198", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-21.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/881a9dcdef0b5350bb535faa59488cfc9d7a1eeb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/881a9dcdef0b5350bb535faa59488cfc9d7a1eeb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-21.c?ref=881a9dcdef0b5350bb535faa59488cfc9d7a1eeb", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-optimized\" } */\n+typedef int v4si __attribute__ ((vector_size (4 * sizeof(int))));\n+\n+int\n+test (v4si *x, v4si *y)\n+{\n+  v4si m = { 2, 3, 6, 5 };\n+  v4si z = __builtin_shuffle (*x, *y, m);\n+  return z[2];\n+}\n+/* { dg-final { scan-tree-dump-not \"VEC_PERM_EXPR\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "5692e21f19d575fd836054fe5b4509057a97bb15", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/881a9dcdef0b5350bb535faa59488cfc9d7a1eeb/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/881a9dcdef0b5350bb535faa59488cfc9d7a1eeb/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=881a9dcdef0b5350bb535faa59488cfc9d7a1eeb", "patch": "@@ -2574,6 +2574,78 @@ combine_conversions (gimple_stmt_iterator *gsi)\n   return 0;\n }\n \n+/* Combine an element access with a shuffle.  Returns true if there were\n+   any changes made, else it returns false.  */\n+ \n+static bool\n+simplify_bitfield_ref (gimple_stmt_iterator *gsi)\n+{\n+  gimple stmt = gsi_stmt (*gsi);\n+  gimple def_stmt;\n+  tree op, op0, op1, op2;\n+  tree elem_type;\n+  unsigned idx, n, size;\n+  enum tree_code code;\n+\n+  op = gimple_assign_rhs1 (stmt);\n+  gcc_checking_assert (TREE_CODE (op) == BIT_FIELD_REF);\n+\n+  op0 = TREE_OPERAND (op, 0);\n+  if (TREE_CODE (op0) != SSA_NAME\n+      || TREE_CODE (TREE_TYPE (op0)) != VECTOR_TYPE)\n+    return false;\n+\n+  elem_type = TREE_TYPE (TREE_TYPE (op0));\n+  if (TREE_TYPE (op) != elem_type)\n+    return false;\n+\n+  size = TREE_INT_CST_LOW (TYPE_SIZE (elem_type));\n+  op1 = TREE_OPERAND (op, 1);\n+  n = TREE_INT_CST_LOW (op1) / size;\n+  if (n != 1)\n+    return false;\n+\n+  def_stmt = SSA_NAME_DEF_STMT (op0);\n+  if (!def_stmt || !is_gimple_assign (def_stmt)\n+      || !can_propagate_from (def_stmt))\n+    return false;\n+\n+  op2 = TREE_OPERAND (op, 2);\n+  idx = TREE_INT_CST_LOW (op2) / size;\n+\n+  code = gimple_assign_rhs_code (def_stmt);\n+\n+  if (code == VEC_PERM_EXPR)\n+    {\n+      tree p, m, index, tem;\n+      unsigned nelts;\n+      m = gimple_assign_rhs3 (def_stmt);\n+      if (TREE_CODE (m) != VECTOR_CST)\n+\treturn false;\n+      nelts = VECTOR_CST_NELTS (m);\n+      idx = TREE_INT_CST_LOW (VECTOR_CST_ELT (m, idx));\n+      idx %= 2 * nelts;\n+      if (idx < nelts)\n+\t{\n+\t  p = gimple_assign_rhs1 (def_stmt);\n+\t}\n+      else\n+\t{\n+\t  p = gimple_assign_rhs2 (def_stmt);\n+\t  idx -= nelts;\n+\t}\n+      index = build_int_cst (TREE_TYPE (TREE_TYPE (m)), idx * size);\n+      tem = build3 (BIT_FIELD_REF, TREE_TYPE (op),\n+\t\t\t unshare_expr (p), op1, index);\n+      gimple_assign_set_rhs1 (stmt, tem);\n+      fold_stmt (gsi);\n+      update_stmt (gsi_stmt (*gsi));\n+      return true;\n+    }\n+\n+  return false;\n+}\n+\n /* Determine whether applying the 2 permutations (mask1 then mask2)\n    gives back one of the input.  */\n \n@@ -2891,6 +2963,8 @@ ssa_forward_propagate_and_combine (void)\n \t\t      cfg_changed = true;\n \t\t    changed = did_something != 0;\n \t\t  }\n+\t\telse if (code == BIT_FIELD_REF)\n+\t\t  changed = simplify_bitfield_ref (&gsi);\n \t\tbreak;\n \t      }\n "}]}