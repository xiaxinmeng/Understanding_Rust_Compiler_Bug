{"sha": "ea3ef06a75bcf28c05e16ab5fc0d4f6add4e5db9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWEzZWYwNmE3NWJjZjI4YzA1ZTE2YWI1ZmMwZDRmNmFkZDRlNWRiOQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-05-30T23:04:47Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-05-30T23:04:47Z"}, "message": "compiler: Don't crash for invalid constant types for && or ||.\n\nFrom-SVN: r188033", "tree": {"sha": "5dc59a805c198ab0f380588273905819f0f699ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5dc59a805c198ab0f380588273905819f0f699ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea3ef06a75bcf28c05e16ab5fc0d4f6add4e5db9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea3ef06a75bcf28c05e16ab5fc0d4f6add4e5db9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea3ef06a75bcf28c05e16ab5fc0d4f6add4e5db9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea3ef06a75bcf28c05e16ab5fc0d4f6add4e5db9/comments", "author": null, "committer": null, "parents": [{"sha": "fda33f152e2189356b71df582a2ce961e4f951e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fda33f152e2189356b71df582a2ce961e4f951e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fda33f152e2189356b71df582a2ce961e4f951e2"}], "stats": {"total": 18, "additions": 3, "deletions": 15}, "files": [{"sha": "f9c80b3aeff8ed3ed4d32211ab784b789d6c887c", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea3ef06a75bcf28c05e16ab5fc0d4f6add4e5db9/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea3ef06a75bcf28c05e16ab5fc0d4f6add4e5db9/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=ea3ef06a75bcf28c05e16ab5fc0d4f6add4e5db9", "patch": "@@ -4475,9 +4475,8 @@ Binary_expression::eval_constant(Operator op, Numeric_constant* left_nc,\n     case OPERATOR_LE:\n     case OPERATOR_GT:\n     case OPERATOR_GE:\n-      // These return boolean values and as such must be handled\n-      // elsewhere.\n-      go_unreachable();\n+      // These return boolean values, not numeric.\n+      return false;\n     default:\n       break;\n     }\n@@ -5304,24 +5303,13 @@ Binary_expression::operand_address(Statement_inserter* inserter,\n bool\n Binary_expression::do_numeric_constant_value(Numeric_constant* nc) const\n {\n-  Operator op = this->op_;\n-\n-  if (op == OPERATOR_EQEQ\n-      || op == OPERATOR_NOTEQ\n-      || op == OPERATOR_LT\n-      || op == OPERATOR_LE\n-      || op == OPERATOR_GT\n-      || op == OPERATOR_GE)\n-    return false;\n-\n   Numeric_constant left_nc;\n   if (!this->left_->numeric_constant_value(&left_nc))\n     return false;\n   Numeric_constant right_nc;\n   if (!this->right_->numeric_constant_value(&right_nc))\n     return false;\n-\n-  return Binary_expression::eval_constant(op, &left_nc, &right_nc,\n+  return Binary_expression::eval_constant(this->op_, &left_nc, &right_nc,\n \t\t\t\t\t  this->location(), nc);\n }\n "}]}