{"sha": "c88c0d42a1ac718915fcd7c79ebe517baa624348", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg4YzBkNDJhMWFjNzE4OTE1ZmNkN2M3OWViZTUxN2JhYTYyNDM0OA==", "commit": {"author": {"name": "Clinton Popetz", "email": "cpopetz@cygnus.com", "date": "2000-05-03T17:45:26Z"}, "committer": {"name": "Clinton Popetz", "email": "cpopetz@gcc.gnu.org", "date": "2000-05-03T17:45:26Z"}, "message": "gensupport.c: New file.\n\n\t* gensupport.c: New file.\n\t* gensupport.h: New file.\n\t* Makefile.in (HOST_RTL): Depend on gensupport.\n\t(gensupport.o) New rule.\n\t* genattr.c: Use gensupport for reading .md files.\n\t* genattrtab.c: Ditto.\n\t* gencodes.c: Ditto.\n\t* genconfig.c: Ditto.\n\t* genemit.c: Ditto.\n\t* genextract.c: Ditto.\n\t* genflags.c: Ditto.\n\t* genopinit.c: Ditto.\n\t* genoutput.c: Ditto.\n\t* genpeep.c: Ditto.\n\t* genrecog.c: Ditto.\n\t* rtl.def (define_insn_and_split): New DEF_RTL_EXPR.\n\t* md.texi (Insn Splitting): Document define_insn_and_split.\n\nFrom-SVN: r33633", "tree": {"sha": "51d16ed3ff5a009c7dd29449525fd4e9a6dc37c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51d16ed3ff5a009c7dd29449525fd4e9a6dc37c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c88c0d42a1ac718915fcd7c79ebe517baa624348", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c88c0d42a1ac718915fcd7c79ebe517baa624348", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c88c0d42a1ac718915fcd7c79ebe517baa624348", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c88c0d42a1ac718915fcd7c79ebe517baa624348/comments", "author": null, "committer": null, "parents": [{"sha": "18ca529b1976bfdc7f84b96f93d0ac3f483bf7f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18ca529b1976bfdc7f84b96f93d0ac3f483bf7f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18ca529b1976bfdc7f84b96f93d0ac3f483bf7f8"}], "stats": {"total": 723, "additions": 477, "deletions": 246}, "files": [{"sha": "2241bad1aded7ef7198cc3fa249dc0565bcb72bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c88c0d42a1ac718915fcd7c79ebe517baa624348/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c88c0d42a1ac718915fcd7c79ebe517baa624348/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c88c0d42a1ac718915fcd7c79ebe517baa624348", "patch": "@@ -1,3 +1,23 @@\n+Wed May  3 12:40:53 2000  Clinton Popetz  <cpopetz@cygnus.com>\n+\n+\t* gensupport.c: New file.\n+\t* gensupport.h: New file.\n+\t* Makefile.in (HOST_RTL): Depend on gensupport.\n+\t(gensupport.o) New rule.\n+\t* genattr.c: Use gensupport for reading .md files.\n+\t* genattrtab.c: Ditto. \n+\t* gencodes.c: Ditto. \n+\t* genconfig.c: Ditto. \n+\t* genemit.c: Ditto. \n+\t* genextract.c: Ditto. \n+\t* genflags.c: Ditto. \n+\t* genopinit.c: Ditto. \n+\t* genoutput.c: Ditto. \n+\t* genpeep.c: Ditto. \n+\t* genrecog.c: Ditto.\n+\t* rtl.def (define_insn_and_split): New DEF_RTL_EXPR.\n+\t* md.texi (Insn Splitting): Document define_insn_and_split.\n+\n Tue May  2 00:20:30 2000  Jason Eckhardt  <jle@cygnus.com>\n \n         * flow.c (verify_flow_info): Added two more sanity checks. The"}, {"sha": "5bd8cc9abc41566e8c7b6374e7a33e2b579caa4c", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c88c0d42a1ac718915fcd7c79ebe517baa624348/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c88c0d42a1ac718915fcd7c79ebe517baa624348/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=c88c0d42a1ac718915fcd7c79ebe517baa624348", "patch": "@@ -586,7 +586,9 @@ HOST_LIBS = $(USE_HOST_OBSTACK) $(USE_HOST_ALLOCA) $(USE_HOST_MALLOC)  \\\n \t    $(HOST_INTLLIBS) $(USE_HOST_VFPRINTF) $(USE_HOST_DOPRINT) \\\n \t    $(HOST_CLIB)\n \n-HOST_RTL = $(HOST_PREFIX)rtl.o $(HOST_PREFIX)bitmap.o $(HOST_PREFIX)ggc-none.o\n+HOST_RTL = $(HOST_PREFIX)rtl.o $(HOST_PREFIX)bitmap.o \\\n+\t\t$(HOST_PREFIX)ggc-none.o $(HOST_PREFIX)gensupport.o\n+\n HOST_PRINT = $(HOST_PREFIX)print-rtl.o\n HOST_ERRORS = $(HOST_PREFIX)errors.o\n \n@@ -1514,6 +1516,7 @@ toplev.o : toplev.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) function.h \\\n \t  -c `echo $(srcdir)/toplev.c | sed 's,^\\./,,'`\n \n rtl.o : rtl.c $(CONFIG_H) system.h $(RTL_H) bitmap.h $(GGC_H) toplev.h\n+gensupport.o : gensupport.c $(CONFIG_H) system.h $(RTL_H) \n \n print-rtl.o : print-rtl.c $(CONFIG_H) system.h $(RTL_H) $(BASIC_BLOCK_H)\n rtlanal.o : rtlanal.c $(CONFIG_H) system.h $(RTL_H)"}, {"sha": "36a37b1a40884f844d22592165233e354196b434", "filename": "gcc/genattr.c", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c88c0d42a1ac718915fcd7c79ebe517baa624348/gcc%2Fgenattr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c88c0d42a1ac718915fcd7c79ebe517baa624348/gcc%2Fgenattr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattr.c?ref=c88c0d42a1ac718915fcd7c79ebe517baa624348", "patch": "@@ -25,6 +25,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"rtl.h\"\n #include \"obstack.h\"\n #include \"errors.h\"\n+#include \"gensupport.h\"\n \n static struct obstack obstack;\n struct obstack *rtl_obstack = &obstack;\n@@ -222,8 +223,6 @@ main (argc, argv)\n      char **argv;\n {\n   rtx desc;\n-  FILE *infile;\n-  register int c;\n   int have_delay = 0;\n   int have_annul_true = 0;\n   int have_annul_false = 0;\n@@ -245,13 +244,8 @@ main (argc, argv)\n   if (argc <= 1)\n     fatal (\"No input file name.\");\n \n-  infile = fopen (argv[1], \"r\");\n-  if (infile == 0)\n-    {\n-      perror (argv[1]);\n-      return (FATAL_EXIT_CODE);\n-    }\n-  read_rtx_filename = argv[1];\n+  if (init_md_reader (argv[1]) != SUCCESS_EXIT_CODE)\n+    return (FATAL_EXIT_CODE);\n \n   printf (\"/* Generated automatically by the program `genattr'\\n\\\n from the machine description file `md'.  */\\n\\n\");\n@@ -266,12 +260,12 @@ from the machine description file `md'.  */\\n\\n\");\n \n   while (1)\n     {\n-      c = read_skip_spaces (infile);\n-      if (c == EOF)\n+      int line_no, insn_code_number;\n+\n+      desc = read_md_rtx (&line_no, &insn_code_number);\n+      if (desc == NULL)\n \tbreak;\n-      ungetc (c, infile);\n \n-      desc = read_rtx (infile);\n       if (GET_CODE (desc) == DEFINE_ATTR)\n \tgen_attr (desc);\n "}, {"sha": "b1be9a070e4e9ff8323d547319592d0e7b79a68a", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 38, "deletions": 48, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c88c0d42a1ac718915fcd7c79ebe517baa624348/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c88c0d42a1ac718915fcd7c79ebe517baa624348/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=c88c0d42a1ac718915fcd7c79ebe517baa624348", "patch": "@@ -100,6 +100,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"system.h\"\n #include \"rtl.h\"\n #include \"ggc.h\"\n+#include \"gensupport.h\"\n \n #ifdef HAVE_SYS_RESOURCE_H\n # include <sys/resource.h>\n@@ -4304,17 +4305,17 @@ gen_insn (exp)\n   switch (GET_CODE (exp))\n     {\n     case DEFINE_INSN:\n-      id->insn_code = insn_code_number++;\n-      id->insn_index = insn_index_number++;\n+      id->insn_code = insn_code_number;\n+      id->insn_index = insn_index_number;\n       id->num_alternatives = count_alternatives (exp);\n       if (id->num_alternatives == 0)\n \tid->num_alternatives = 1;\n       id->vec_idx = 4;\n       break;\n \n     case DEFINE_PEEPHOLE:\n-      id->insn_code = insn_code_number++;\n-      id->insn_index = insn_index_number++;\n+      id->insn_code = insn_code_number;\n+      id->insn_index = insn_index_number;\n       id->num_alternatives = count_alternatives (exp);\n       if (id->num_alternatives == 0)\n \tid->num_alternatives = 1;\n@@ -5967,15 +5968,19 @@ main (argc, argv)\n      char **argv;\n {\n   rtx desc;\n-  FILE *infile;\n-  register int c;\n   struct attr_desc *attr;\n   struct insn_def *id;\n   rtx tem;\n   int i;\n \n   progname = \"genattrtab\";\n \n+  if (argc <= 1)\n+    fatal (\"No input file name.\");\n+\n+  if (init_md_reader (argv[1]) != SUCCESS_EXIT_CODE)\n+    return (FATAL_EXIT_CODE);\n+\n #if defined (RLIMIT_STACK) && defined (HAVE_GETRLIMIT) && defined (HAVE_SETRLIMIT)\n   /* Get rid of any avoidable limit on stack size.  */\n   {\n@@ -5993,17 +5998,6 @@ main (argc, argv)\n   obstack_init (hash_obstack);\n   obstack_init (temp_obstack);\n \n-  if (argc <= 1)\n-    fatal (\"No input file name.\");\n-\n-  infile = fopen (argv[1], \"r\");\n-  if (infile == 0)\n-    {\n-      perror (argv[1]);\n-      return (FATAL_EXIT_CODE);\n-    }\n-  read_rtx_filename = argv[1];\n-\n   /* Set up true and false rtx's */\n   true_rtx = rtx_alloc (CONST_INT);\n   XWINT (true_rtx, 0) = 1;\n@@ -6021,45 +6015,41 @@ from the machine description file `md'.  */\\n\\n\");\n \n   while (1)\n     {\n-      c = read_skip_spaces (infile);\n-      if (c == EOF)\n-\tbreak;\n-      ungetc (c, infile);\n-\n-      desc = read_rtx (infile);\n-      if (GET_CODE (desc) == DEFINE_INSN\n-\t  || GET_CODE (desc) == DEFINE_PEEPHOLE\n-\t  || GET_CODE (desc) == DEFINE_ASM_ATTRIBUTES)\n-\tgen_insn (desc);\n-\n-      else if (GET_CODE (desc) == DEFINE_EXPAND)\n-\tinsn_code_number++, insn_index_number++;\n+      int line_no;\n \n-      else if (GET_CODE (desc) == DEFINE_SPLIT)\n-\tinsn_code_number++, insn_index_number++;\n-\n-      else if (GET_CODE (desc) == DEFINE_PEEPHOLE2)\n-\tinsn_code_number++, insn_index_number++;\n+      desc = read_md_rtx (&line_no, &insn_code_number);\n+      if (desc == NULL)\n+\tbreak;\n \n-      else if (GET_CODE (desc) == DEFINE_ATTR)\n+      switch (GET_CODE (desc))\n \t{\n-\t  gen_attr (desc);\n-\t  insn_index_number++;\n-\t}\n+\t  case DEFINE_INSN:\n+\t  case DEFINE_PEEPHOLE:\n+\t  case DEFINE_ASM_ATTRIBUTES:\n+\t      gen_insn(desc);\n+\t      break;\n+\t  \n+\t  case DEFINE_ATTR:\n+\t      gen_attr (desc);\n+\t      break;\n \n-      else if (GET_CODE (desc) == DEFINE_DELAY)\n-\t{\n-\t  gen_delay (desc);\n-\t  insn_index_number++;\n-\t}\n+\t  case DEFINE_DELAY:\n+\t      gen_delay (desc);\n+\t      break;\n \n-      else if (GET_CODE (desc) == DEFINE_FUNCTION_UNIT)\n-\t{\n-\t  gen_unit (desc);\n-\t  insn_index_number++;\n+\t  case DEFINE_FUNCTION_UNIT:\n+\t      gen_unit (desc);\n+\t      break;\n+\t      \t\n+\t  default:\n+\t      break;\n \t}\n+      if (GET_CODE (desc) != DEFINE_ASM_ATTRIBUTES)\n+        insn_index_number++;\n     }\n \n+  insn_code_number++;\n+\n   /* If we didn't have a DEFINE_ASM_ATTRIBUTES, make a null one.  */\n   if (! got_define_asm_attributes)\n     {"}, {"sha": "750839b39c8b05ea18da00a10aacf305cad41d07", "filename": "gcc/gencodes.c", "status": "modified", "additions": 8, "deletions": 23, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c88c0d42a1ac718915fcd7c79ebe517baa624348/gcc%2Fgencodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c88c0d42a1ac718915fcd7c79ebe517baa624348/gcc%2Fgencodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencodes.c?ref=c88c0d42a1ac718915fcd7c79ebe517baa624348", "patch": "@@ -27,6 +27,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"rtl.h\"\n #include \"obstack.h\"\n #include \"errors.h\"\n+#include \"gensupport.h\"\n \n static struct obstack obstack;\n struct obstack *rtl_obstack = &obstack;\n@@ -84,22 +85,15 @@ main (argc, argv)\n      char **argv;\n {\n   rtx desc;\n-  FILE *infile;\n-  register int c;\n \n   progname = \"gencodes\";\n   obstack_init (rtl_obstack);\n \n   if (argc <= 1)\n     fatal (\"No input file name.\");\n \n-  infile = fopen (argv[1], \"r\");\n-  if (infile == 0)\n-    {\n-      perror (argv[1]);\n-      return (FATAL_EXIT_CODE);\n-    }\n-  read_rtx_filename = argv[1];\n+  if (init_md_reader (argv[1]) != SUCCESS_EXIT_CODE)\n+    return (FATAL_EXIT_CODE);\n \n   printf (\"/* Generated automatically by the program `gencodes'\\n\\\n from the machine description file `md'.  */\\n\\n\");\n@@ -113,23 +107,14 @@ from the machine description file `md'.  */\\n\\n\");\n \n   while (1)\n     {\n-      c = read_skip_spaces (infile);\n-      if (c == EOF)\n+      int line_no;\n+\n+      desc = read_md_rtx (&line_no, &insn_code_number);\n+      if (desc == NULL)\n \tbreak;\n-      ungetc (c, infile);\n \n-      desc = read_rtx (infile);\n       if (GET_CODE (desc) == DEFINE_INSN || GET_CODE (desc) == DEFINE_EXPAND)\n-\t{\n-\t  gen_insn (desc);\n-\t  insn_code_number++;\n-\t}\n-      if (GET_CODE (desc) == DEFINE_PEEPHOLE\n-\t  || GET_CODE (desc) == DEFINE_PEEPHOLE2\n-\t  || GET_CODE (desc) == DEFINE_SPLIT)\n-\t{\n-\t  insn_code_number++;\n-\t}\n+\tgen_insn (desc);\n     }\n \n   printf (\"  CODE_FOR_nothing };\\n\");"}, {"sha": "077216292e99dd7c5125dd80985fb19faa574536", "filename": "gcc/genconfig.c", "status": "modified", "additions": 33, "deletions": 28, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c88c0d42a1ac718915fcd7c79ebe517baa624348/gcc%2Fgenconfig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c88c0d42a1ac718915fcd7c79ebe517baa624348/gcc%2Fgenconfig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconfig.c?ref=c88c0d42a1ac718915fcd7c79ebe517baa624348", "patch": "@@ -26,6 +26,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"rtl.h\"\n #include \"obstack.h\"\n #include \"errors.h\"\n+#include \"gensupport.h\"\n \n static struct obstack obstack;\n struct obstack *rtl_obstack = &obstack;\n@@ -279,22 +280,15 @@ main (argc, argv)\n      char **argv;\n {\n   rtx desc;\n-  FILE *infile;\n-  register int c;\n \n   progname = \"genconfig\";\n   obstack_init (rtl_obstack);\n \n   if (argc <= 1)\n     fatal (\"No input file name.\");\n \n-  infile = fopen (argv[1], \"r\");\n-  if (infile == 0)\n-    {\n-      perror (argv[1]);\n-      return (FATAL_EXIT_CODE);\n-    }\n-  read_rtx_filename = argv[1];\n+  if (init_md_reader (argv[1]) != SUCCESS_EXIT_CODE)\n+    return (FATAL_EXIT_CODE);\n \n   printf (\"/* Generated automatically by the program `genconfig'\\n\\\n from the machine description file `md'.  */\\n\\n\");\n@@ -307,27 +301,38 @@ from the machine description file `md'.  */\\n\\n\");\n \n   while (1)\n     {\n-      c = read_skip_spaces (infile);\n-      if (c == EOF)\n+      int line_no, insn_code_number = 0;\n+\n+      desc = read_md_rtx (&line_no, &insn_code_number);\n+      if (desc == NULL)\n \tbreak;\n-      ungetc (c, infile);\n-\n-      desc = read_rtx (infile);\n-      if (GET_CODE (desc) == DEFINE_INSN)\n-\tgen_insn (desc);\n-      if (GET_CODE (desc) == DEFINE_EXPAND)\n-\tgen_expand (desc);\n-      if (GET_CODE (desc) == DEFINE_SPLIT)\n-\tgen_split (desc);\n-      if (GET_CODE (desc) == DEFINE_PEEPHOLE2)\n-\t{\n-\t  have_peephole2_flag = 1;\n-\t  gen_split (desc);\n-\t}\n-      if (GET_CODE (desc) == DEFINE_PEEPHOLE)\n+\t\n+      switch (GET_CODE (desc)) \n \t{\n-\t  have_peephole_flag = 1;\n-\t  gen_peephole (desc);\n+  \t  case DEFINE_INSN:\n+\t    gen_insn (desc);\n+\t    break;\n+\t  \n+\t  case DEFINE_EXPAND:\n+\t    gen_expand (desc);\n+\t    break;\n+\n+\t  case DEFINE_SPLIT:\n+\t    gen_split (desc);\n+\t    break;\n+\n+\t  case DEFINE_PEEPHOLE2:\n+\t    have_peephole2_flag = 1;\n+\t    gen_split (desc);\n+\t    break;\n+\n+\t  case DEFINE_PEEPHOLE:\n+\t    have_peephole_flag = 1;\n+\t    gen_peephole (desc);\n+\t    break;\n+\n+\t  default:\n+\t    break;\n \t}\n     }\n "}, {"sha": "6fc604d7c23ed03ac19d29c1f2dab24a3f307bcd", "filename": "gcc/genemit.c", "status": "modified", "additions": 27, "deletions": 37, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c88c0d42a1ac718915fcd7c79ebe517baa624348/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c88c0d42a1ac718915fcd7c79ebe517baa624348/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=c88c0d42a1ac718915fcd7c79ebe517baa624348", "patch": "@@ -25,6 +25,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"rtl.h\"\n #include \"obstack.h\"\n #include \"errors.h\"\n+#include \"gensupport.h\"\n \n static struct obstack obstack;\n struct obstack *rtl_obstack = &obstack;\n@@ -779,22 +780,15 @@ main (argc, argv)\n      char **argv;\n {\n   rtx desc;\n-  FILE *infile;\n-  register int c;\n \n   progname = \"genemit\";\n   obstack_init (rtl_obstack);\n \n   if (argc <= 1)\n     fatal (\"No input file name.\");\n \n-  infile = fopen (argv[1], \"r\");\n-  if (infile == 0)\n-    {\n-      perror (argv[1]);\n-      return (FATAL_EXIT_CODE);\n-    }\n-  read_rtx_filename = argv[1];\n+  if (init_md_reader (argv[1]) != SUCCESS_EXIT_CODE)\n+    return (FATAL_EXIT_CODE);\n \n   /* Assign sequential codes to all entries in the machine description\n      in parallel with the tables in insn-output.c.  */\n@@ -828,37 +822,33 @@ from the machine description file `md'.  */\\n\\n\");\n \n   while (1)\n     {\n-      c = read_skip_spaces (infile);\n-      if (c == EOF)\n-\tbreak;\n-      ungetc (c, infile);\n+      int line_no;\n \n-      desc = read_rtx (infile);\n+      desc = read_md_rtx (&line_no, &insn_code_number);\n+      if (desc == NULL)\n+\tbreak;\n \n-      if (GET_CODE (desc) == DEFINE_INSN)\n+      switch (GET_CODE (desc))\n \t{\n-\t  gen_insn (desc);\n-\t  ++insn_code_number;\n-\t}\n-      if (GET_CODE (desc) == DEFINE_EXPAND)\n-\t{\n-\t  gen_expand (desc);\n-\t  ++insn_code_number;\n-\t}\n-      if (GET_CODE (desc) == DEFINE_SPLIT)\n-\t{\n-\t  gen_split (desc);\n-\t  ++insn_code_number;\n-\t}\n-      if (GET_CODE (desc) == DEFINE_PEEPHOLE2)\n-\t{\n-\t  gen_split (desc);\n-\t  ++insn_code_number;\n-\t}\n-      if (GET_CODE (desc) == DEFINE_PEEPHOLE)\n-\t{\n-\t  ++insn_code_number;\n-\t}\n+\t  case DEFINE_INSN:\n+\t      gen_insn (desc);\n+\t      break;\n+\n+\t  case DEFINE_EXPAND:\n+\t      gen_expand (desc);\n+\t      break;\n+\n+\t  case DEFINE_SPLIT:\n+\t      gen_split (desc);\n+\t      break;\n+\n+\t  case DEFINE_PEEPHOLE2:\n+\t      gen_split (desc);\n+\t      break;\n+\n+\t  default:\n+\t      break;\n+\t }\n       ++insn_index_number;\n     }\n "}, {"sha": "fea04928d24a8cbbfdd319bbe7b5cb5654dce921", "filename": "gcc/genextract.c", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c88c0d42a1ac718915fcd7c79ebe517baa624348/gcc%2Fgenextract.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c88c0d42a1ac718915fcd7c79ebe517baa624348/gcc%2Fgenextract.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenextract.c?ref=c88c0d42a1ac718915fcd7c79ebe517baa624348", "patch": "@@ -26,6 +26,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"obstack.h\"\n #include \"errors.h\"\n #include \"insn-config.h\"\n+#include \"gensupport.h\"\n \n static struct obstack obstack;\n struct obstack *rtl_obstack = &obstack;\n@@ -389,8 +390,7 @@ main (argc, argv)\n      char **argv;\n {\n   rtx desc;\n-  FILE *infile;\n-  int c, i;\n+  int i;\n   struct extraction *p;\n   struct code_ptr *link;\n   const char *name;\n@@ -401,13 +401,8 @@ main (argc, argv)\n   if (argc <= 1)\n     fatal (\"No input file name.\");\n \n-  infile = fopen (argv[1], \"r\");\n-  if (infile == 0)\n-    {\n-      perror (argv[1]);\n-      return (FATAL_EXIT_CODE);\n-    }\n-  read_rtx_filename = argv[1];\n+  if (init_md_reader (argv[1]) != SUCCESS_EXIT_CODE)\n+    return (FATAL_EXIT_CODE);\n \n   /* Assign sequential codes to all entries in the machine description\n      in parallel with the tables in insn-output.c.  */\n@@ -446,17 +441,16 @@ from the machine description file `md'.  */\\n\\n\");\n \n   while (1)\n     {\n-      c = read_skip_spaces (infile);\n-      if (c == EOF)\n+      int line_no;\n+\n+      desc = read_md_rtx (&line_no, &insn_code_number);\n+      if (desc == NULL)\n \tbreak;\n-      ungetc (c, infile);\n \n-      desc = read_rtx (infile);\n-      if (GET_CODE (desc) == DEFINE_INSN)\n+       if (GET_CODE (desc) == DEFINE_INSN)\n \t{\n \t  record_insn_name (insn_code_number, XSTR (desc, 0));\n \t  gen_insn (desc);\n-\t  ++insn_code_number;\n \t}\n \n       else if (GET_CODE (desc) == DEFINE_PEEPHOLE)\n@@ -467,13 +461,7 @@ from the machine description file `md'.  */\\n\\n\");\n \t  link->insn_code = insn_code_number;\n \t  link->next = peepholes;\n \t  peepholes = link;\n-\t  ++insn_code_number;\n \t}\n-\n-      else if (GET_CODE (desc) == DEFINE_EXPAND\n-\t       || GET_CODE (desc) == DEFINE_PEEPHOLE2\n-\t       || GET_CODE (desc) == DEFINE_SPLIT)\n-\t++insn_code_number;\n     }\n \n   /* Write out code to handle peepholes and the insn_codes that it should"}, {"sha": "f679dd2c4685c4029f31c72a8ef7a783eb044790", "filename": "gcc/genflags.c", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c88c0d42a1ac718915fcd7c79ebe517baa624348/gcc%2Fgenflags.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c88c0d42a1ac718915fcd7c79ebe517baa624348/gcc%2Fgenflags.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenflags.c?ref=c88c0d42a1ac718915fcd7c79ebe517baa624348", "patch": "@@ -27,6 +27,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"rtl.h\"\n #include \"obstack.h\"\n #include \"errors.h\"\n+#include \"gensupport.h\"\n \n static struct obstack obstack;\n struct obstack *rtl_obstack = &obstack;\n@@ -227,8 +228,6 @@ main (argc, argv)\n   rtx *call_insns;\n   rtx *normal_insns;\n   rtx *insn_ptr;\n-  FILE *infile;\n-  register int c;\n \n   progname = \"genflags\";\n   obstack_init (rtl_obstack);\n@@ -238,27 +237,21 @@ main (argc, argv)\n   if (argc <= 1)\n     fatal (\"No input file name.\");\n \n-  infile = fopen (argv[1], \"r\");\n-  if (infile == 0)\n-    {\n-      perror (argv[1]);\n-      return (FATAL_EXIT_CODE);\n-    }\n-  read_rtx_filename = argv[1];\n-\n+  if (init_md_reader (argv[1]) != SUCCESS_EXIT_CODE)\n+    return (FATAL_EXIT_CODE);\n+  \n   printf (\"/* Generated automatically by the program `genflags'\\n\\\n from the machine description file `md'.  */\\n\\n\");\n \n   /* Read the machine description.  */\n \n   while (1)\n     {\n-      c = read_skip_spaces (infile);\n-      if (c == EOF)\n-\tbreak;\n-      ungetc (c, infile);\n+      int line_no, insn_code_number = 0;\n \n-      desc = read_rtx (infile);\n+      desc = read_md_rtx (&line_no, &insn_code_number);\n+      if (desc == NULL)\n+\tbreak;\n       if (GET_CODE (desc) == DEFINE_INSN || GET_CODE (desc) == DEFINE_EXPAND)\n \tgen_insn (desc);\n     }"}, {"sha": "2cd5d8edb1c1aa588ae93afd14579571a6a08af7", "filename": "gcc/genopinit.c", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c88c0d42a1ac718915fcd7c79ebe517baa624348/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c88c0d42a1ac718915fcd7c79ebe517baa624348/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=c88c0d42a1ac718915fcd7c79ebe517baa624348", "patch": "@@ -25,6 +25,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"rtl.h\"\n #include \"obstack.h\"\n #include \"errors.h\"\n+#include \"gensupport.h\"\n \n static struct obstack obstack;\n struct obstack *rtl_obstack = &obstack;\n@@ -313,22 +314,15 @@ main (argc, argv)\n      char **argv;\n {\n   rtx desc;\n-  FILE *infile;\n-  register int c;\n \n   progname = \"genopinit\";\n   obstack_init (rtl_obstack);\n \n   if (argc <= 1)\n     fatal (\"No input file name.\");\n \n-  infile = fopen (argv[1], \"r\");\n-  if (infile == 0)\n-    {\n-      perror (argv[1]);\n-      return (FATAL_EXIT_CODE);\n-    }\n-  read_rtx_filename = argv[1];\n+  if (init_md_reader (argv[1]) != SUCCESS_EXIT_CODE)\n+    return (FATAL_EXIT_CODE);\n \n   printf (\"/* Generated automatically by the program `genopinit'\\n\\\n from the machine description file `md'.  */\\n\\n\");\n@@ -350,12 +344,12 @@ from the machine description file `md'.  */\\n\\n\");\n \n   while (1)\n     {\n-      c = read_skip_spaces (infile);\n-      if (c == EOF)\n+      int line_no, insn_code_number = 0;\n+\n+      desc = read_md_rtx (&line_no, &insn_code_number);\n+      if (desc == NULL)\n \tbreak;\n-      ungetc (c, infile);\n \n-      desc = read_rtx (infile);\n       if (GET_CODE (desc) == DEFINE_INSN || GET_CODE (desc) == DEFINE_EXPAND)\n \tgen_insn (desc);\n     }"}, {"sha": "922359dbc6d6d4e1f969849c0d4b82481abd2a85", "filename": "gcc/genoutput.c", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c88c0d42a1ac718915fcd7c79ebe517baa624348/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c88c0d42a1ac718915fcd7c79ebe517baa624348/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=c88c0d42a1ac718915fcd7c79ebe517baa624348", "patch": "@@ -90,6 +90,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"rtl.h\"\n #include \"obstack.h\"\n #include \"errors.h\"\n+#include \"gensupport.h\"\n \n /* No instruction can have more operands than this.  Sorry for this\n    arbitrary limit, but what machine will have an instruction with\n@@ -720,7 +721,7 @@ gen_insn (insn)\n   register struct data *d = (struct data *) xmalloc (sizeof (struct data));\n   register int i;\n \n-  d->code_number = next_code_number++;\n+  d->code_number = next_code_number;\n   d->index_number = next_index_number;\n   if (XSTR (insn, 0)[0])\n     d->name = XSTR (insn, 0);\n@@ -759,7 +760,7 @@ gen_peephole (peep)\n   register struct data *d = (struct data *) xmalloc (sizeof (struct data));\n   register int i;\n \n-  d->code_number = next_code_number++;\n+  d->code_number = next_code_number;\n   d->index_number = next_index_number;\n   d->name = 0;\n \n@@ -797,7 +798,7 @@ gen_expand (insn)\n   register struct data *d = (struct data *) xmalloc (sizeof (struct data));\n   register int i;\n \n-  d->code_number = next_code_number++;\n+  d->code_number = next_code_number;\n   d->index_number = next_index_number;\n   if (XSTR (insn, 0)[0])\n     d->name = XSTR (insn, 0);\n@@ -840,7 +841,7 @@ gen_split (split)\n   register struct data *d = (struct data *) xmalloc (sizeof (struct data));\n   register int i;\n \n-  d->code_number = next_code_number++;\n+  d->code_number = next_code_number;\n   d->index_number = next_index_number;\n   d->name = 0;\n \n@@ -903,22 +904,15 @@ main (argc, argv)\n      char **argv;\n {\n   rtx desc;\n-  FILE *infile;\n-  register int c;\n \n   progname = \"genoutput\";\n   obstack_init (rtl_obstack);\n \n   if (argc <= 1)\n     fatal (\"No input file name.\");\n \n-  infile = fopen (argv[1], \"r\");\n-  if (infile == 0)\n-    {\n-      perror (argv[1]);\n-      return (FATAL_EXIT_CODE);\n-    }\n-  read_rtx_filename = argv[1];\n+  if (init_md_reader (argv[1]) != SUCCESS_EXIT_CODE)\n+    return (FATAL_EXIT_CODE);\n \n   output_prologue ();\n   next_code_number = 0;\n@@ -928,12 +922,12 @@ main (argc, argv)\n \n   while (1)\n     {\n-      c = read_skip_spaces (infile);\n-      if (c == EOF)\n+      int line_no;\n+\n+      desc = read_md_rtx (&line_no, &next_code_number);\n+      if (desc == NULL)\n \tbreak;\n-      ungetc (c, infile);\n \n-      desc = read_rtx (infile);\n       if (GET_CODE (desc) == DEFINE_INSN)\n \tgen_insn (desc);\n       if (GET_CODE (desc) == DEFINE_PEEPHOLE)"}, {"sha": "b8ef9aae62bf964df9419511cd9f06f14fc0a1d7", "filename": "gcc/genpeep.c", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c88c0d42a1ac718915fcd7c79ebe517baa624348/gcc%2Fgenpeep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c88c0d42a1ac718915fcd7c79ebe517baa624348/gcc%2Fgenpeep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpeep.c?ref=c88c0d42a1ac718915fcd7c79ebe517baa624348", "patch": "@@ -25,6 +25,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"rtl.h\"\n #include \"obstack.h\"\n #include \"errors.h\"\n+#include \"gensupport.h\"\n \n static struct obstack obstack;\n struct obstack *rtl_obstack = &obstack;\n@@ -408,8 +409,6 @@ main (argc, argv)\n      char **argv;\n {\n   rtx desc;\n-  FILE *infile;\n-  register int c;\n \n   max_opno = -1;\n \n@@ -419,13 +418,8 @@ main (argc, argv)\n   if (argc <= 1)\n     fatal (\"No input file name.\");\n \n-  infile = fopen (argv[1], \"r\");\n-  if (infile == 0)\n-    {\n-      perror (argv[1]);\n-      return (FATAL_EXIT_CODE);\n-    }\n-  read_rtx_filename = argv[1];\n+  if (init_md_reader (argv[1]) != SUCCESS_EXIT_CODE)\n+    return (FATAL_EXIT_CODE);\n \n   printf (\"/* Generated automatically by the program `genpeep'\\n\\\n from the machine description file `md'.  */\\n\\n\");\n@@ -458,13 +452,13 @@ from the machine description file `md'.  */\\n\\n\");\n \n   while (1)\n     {\n-      c = read_skip_spaces (infile);\n-      if (c == EOF)\n+      int line_no, rtx_number = 0;\n+\n+      desc = read_md_rtx (&line_no, &rtx_number);\n+      if (desc == NULL)\n \tbreak;\n-      ungetc (c, infile);\n \n-      desc = read_rtx (infile);\n-      if (GET_CODE (desc) == DEFINE_PEEPHOLE)\n+       if (GET_CODE (desc) == DEFINE_PEEPHOLE)\n \t{\n \t  gen_peephole (desc);\n \t  insn_code_number++;"}, {"sha": "1f0c331b67b00f8832d7229821ca9dfdbbcdcb30", "filename": "gcc/genrecog.c", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c88c0d42a1ac718915fcd7c79ebe517baa624348/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c88c0d42a1ac718915fcd7c79ebe517baa624348/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=c88c0d42a1ac718915fcd7c79ebe517baa624348", "patch": "@@ -55,6 +55,7 @@\n #include \"rtl.h\"\n #include \"obstack.h\"\n #include \"errors.h\"\n+#include \"gensupport.h\"\n \n #define OUTPUT_LABEL(INDENT_STRING, LABEL_NUMBER) \\\n   printf(\"%sL%d: ATTRIBUTE_UNUSED_LABEL\\n\", (INDENT_STRING), (LABEL_NUMBER))\n@@ -2461,7 +2462,6 @@ make_insn_sequence (insn, type)\n \t      next_insn_code);\n       break;\n     }\n-  next_insn_code++;\n \n   return head;\n }\n@@ -2518,13 +2518,8 @@ main (argc, argv)\n   if (argc <= 1)\n     fatal (\"No input file name.\");\n \n-  infile = fopen (argv[1], \"r\");\n-  if (infile == 0)\n-    {\n-      perror (argv[1]);\n-      return FATAL_EXIT_CODE;\n-    }\n-  read_rtx_filename = argv[1];\n+  if (init_md_reader (argv[1]) != SUCCESS_EXIT_CODE)\n+    return (FATAL_EXIT_CODE);\n \n   next_insn_code = 0;\n   next_index = 0;\n@@ -2535,13 +2530,10 @@ main (argc, argv)\n \n   while (1)\n     {\n-      c = read_skip_spaces (infile);\n-      if (c == EOF)\n+      desc = read_md_rtx (&pattern_lineno, &next_insn_code);\n+      if (desc == NULL)\n \tbreak;\n-      ungetc (c, infile);\n-      pattern_lineno = read_rtx_lineno;\n \n-      desc = read_rtx (infile);\n       if (GET_CODE (desc) == DEFINE_INSN)\n \t{\n \t  h = make_insn_sequence (desc, RECOG);\n@@ -2558,9 +2550,6 @@ main (argc, argv)\n \t  merge_trees (&peephole2_tree, &h);\n \t}\n \t\n-      if (GET_CODE (desc) == DEFINE_PEEPHOLE\n-\t  || GET_CODE (desc) == DEFINE_EXPAND)\n-\tnext_insn_code++;\n       next_index++;\n     }\n "}, {"sha": "aff9d847352f4e3a4bc7186b47755cfad1c72b2f", "filename": "gcc/gensupport.c", "status": "added", "additions": 191, "deletions": 0, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c88c0d42a1ac718915fcd7c79ebe517baa624348/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c88c0d42a1ac718915fcd7c79ebe517baa624348/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=c88c0d42a1ac718915fcd7c79ebe517baa624348", "patch": "@@ -0,0 +1,191 @@\n+/* Read machine descriptions, return top level rtx for use by the\n+   various generation passes. \n+\n+   Copyright (C) 2000 Free Software Foundation, Inc.\n+\n+   This file is part of GNU CC.\n+\n+   GNU CC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2, or (at your option)\n+   any later version.\n+\n+   GNU CC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GNU CC; see the file COPYING.  If not, write to\n+   the Free Software Foundation, 59 Temple Place - Suite 330,\n+   Boston, MA 02111-1307, USA.  */\n+\n+#include \"hconfig.h\"\n+#include \"system.h\"\n+#include \"rtl.h\"\n+#include \"errors.h\"\n+#include \"gensupport.h\"\n+\n+static FILE *input_file;\n+\n+static int sequence_num;\n+\n+struct queue_elem {\n+    rtx data;\n+    struct queue_elem *next;\n+};\n+\n+static struct queue_elem *rtx_ready_queue;\n+\n+/* Recursively remove constraints from an rtx.  */\n+\n+static void\n+remove_constraints (part)\n+     rtx part;\n+{\n+  register int i, j;\n+  register const char *format_ptr;\n+\n+  if (part == 0)\n+    return;\n+\n+  if (GET_CODE (part) == MATCH_OPERAND)\n+    XSTR (part, 2) = \"\";\n+  else if (GET_CODE (part) == MATCH_SCRATCH)\n+    XSTR (part, 1) = \"\";\n+\n+  format_ptr = GET_RTX_FORMAT (GET_CODE (part));\n+\n+  for (i = 0; i < GET_RTX_LENGTH (GET_CODE (part)); i++)\n+    switch (*format_ptr++)\n+      {\n+      case 'e':\n+      case 'u':\n+\tremove_constraints (XEXP (part, i));\n+\tbreak;\n+      case 'E':\n+\tif (XVEC (part, i) != NULL)\n+\t  for (j = 0; j < XVECLEN (part, i); j++)\n+\t    remove_constraints (XVECEXP (part, i, j));\n+\tbreak;\n+      }\n+}\n+\n+/* Handle any synthetic top level rtx, i.e. anything except:\n+       DEFINE_INSN\n+       DEFINE_EXPAND\n+       DEFINE_SPLIT\n+       DEFINE_PEEPHOLE\n+       DEFINE_PEEPHOLE2\n+       DEFINE_ATTRIBUTE\n+       DEFINE_FUNCTION_UNIT\n+       DEFINE_ASM_ATTRIBUTES */\n+\n+static void\n+process_rtx (desc)\n+    rtx* desc;\n+{\n+  if (GET_CODE (*desc) == DEFINE_INSN_AND_SPLIT) \n+    {\n+      struct queue_elem* elem = xmalloc (sizeof (struct queue_elem));\n+      const char *split_cond;\n+  \n+      /* Create a split with values from the insn_and_split. */\n+      rtx split = rtx_alloc (DEFINE_SPLIT);\n+      XVEC (split, 0) = copy_rtx (XVEC (*desc, 1));\n+      remove_constraints (XVEC (split, 0));\n+      split_cond = XSTR (split, 1) = XSTR (*desc, 4);\n+  \n+      /* If the split condition starts with \"&&\", append it to the\n+         insn condition to create the new split condition.  */\n+      if (split_cond[0] == '&' && split_cond[1] == '&')\n+        {\n+\tconst char *insn_cond = XSTR (*desc, 2);\n+  \tchar *combined = \n+  \t    xmalloc (strlen (insn_cond) + strlen (split_cond) + 1);\n+  \tstrcpy (combined, insn_cond);\n+  \tstrcat (combined, split_cond);\n+  \tXSTR (split, 1) = combined;\n+        }\n+  \n+      XVEC (split, 2) = XVEC (*desc, 5);\n+      XSTR (split, 3) = XSTR (*desc, 6);\n+  \n+      /* Fix up the DEFINE_INSN.  */\n+      PUT_CODE (*desc, DEFINE_INSN);\n+      XVEC (*desc, 4) = XSTR (*desc, 7);\n+  \n+      /* Return the DEFINE_INSN part, and put the DEFINE_SPLIT\n+         in the queue.  */\n+      elem->next = rtx_ready_queue;\n+      elem->data = split;\t\n+      rtx_ready_queue = elem;  \n+    }\n+}\n+\n+/* The entry point for initializing the reader.  */\n+\n+int \n+init_md_reader (filename)\n+    const char *filename;\n+{\n+\n+  input_file = fopen (filename, \"r\");\n+\n+  if (input_file == 0)\n+    {\n+      perror (filename);\n+      return FATAL_EXIT_CODE;\n+    }\n+\n+  read_rtx_filename = filename;\n+  sequence_num = 0;\n+  rtx_ready_queue = NULL; \n+\n+  return SUCCESS_EXIT_CODE;\n+}\n+\n+\n+/* The entry point for reading a single rtx from an md file.  */\n+\n+rtx \n+read_md_rtx (lineno, seqnr)\n+    int *lineno;\n+    int *seqnr;\n+{ \n+  rtx desc;\n+\n+  if (rtx_ready_queue != NULL) \n+    {\n+      desc = rtx_ready_queue->data;\n+      rtx_ready_queue = rtx_ready_queue->next;\n+    }\n+  else \n+    {\n+      int c;\n+      c = read_skip_spaces (input_file);\n+      if (c == EOF)\n+\treturn NULL;\n+\n+      ungetc (c, input_file);\n+      desc = read_rtx (input_file);\n+      process_rtx (&desc);\n+    }\n+  *lineno = read_rtx_lineno;\n+  *seqnr = sequence_num;\n+  switch (GET_CODE (desc))\n+    {\n+      case DEFINE_INSN:\n+      case DEFINE_EXPAND:\n+      case DEFINE_SPLIT:\n+      case DEFINE_PEEPHOLE:\n+      case DEFINE_PEEPHOLE2:\n+\tsequence_num++;\n+\tbreak;\n+\n+      default:\n+\tbreak;\n+    }\n+\n+  return desc;\n+}"}, {"sha": "3dbec6b74200140167c26568c20ce66bff60151e", "filename": "gcc/gensupport.h", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c88c0d42a1ac718915fcd7c79ebe517baa624348/gcc%2Fgensupport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c88c0d42a1ac718915fcd7c79ebe517baa624348/gcc%2Fgensupport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.h?ref=c88c0d42a1ac718915fcd7c79ebe517baa624348", "patch": "@@ -0,0 +1,24 @@\n+/* Declarations for rtx-reader support for gen* routines.\n+   Copyright (C) 2000 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+extern int init_md_reader\tPARAMS ((const char *));\n+extern rtx read_md_rtx\t\tPARAMS ((int *, int *));\n+\n+"}, {"sha": "083a22811da11081a08765b4024fcde8c5b2129b", "filename": "gcc/md.texi", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c88c0d42a1ac718915fcd7c79ebe517baa624348/gcc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c88c0d42a1ac718915fcd7c79ebe517baa624348/gcc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmd.texi?ref=c88c0d42a1ac718915fcd7c79ebe517baa624348", "patch": "@@ -3431,6 +3431,56 @@ insns that don't.  Instead, write two separate @code{define_split}\n definitions, one for the insns that are valid and one for the insns that\n are not valid.\n \n+For the common case where the pattern of a define_split exactly matches the\n+pattern of a define_insn, use @code{define_insn_and_split}.  It looks like\n+this:\n+\n+@smallexample\n+(define_insn_and_split\n+  [@var{insn-pattern}]\n+  \"@var{condition}\"\n+  \"@var{output-template}\"\n+  \"@var{split-condition}\"\n+  [@var{new-insn-pattern-1}\n+   @var{new-insn-pattern-2}\n+   @dots{}]\n+  \"@var{preparation statements}\"\n+  [@var{insn-attributes}])\n+\n+@end smallexample\n+\n+@var{insn-pattern}, @var{condition}, @var{output-template}, and\n+@var{insn-attributes} are used as in @code{define_insn}.  The\n+@var{new-insn-pattern} vector and the @var{preparation-statements} are used as\n+in a @code{define_split}.  The @var{split-condition} is also used as in\n+@code{define_split}, with the additional behavior that if the condition starts\n+with @samp{&&}, the condition used for the split will be the constructed as a\n+logical \"and\" of the split condition with the insn condition.  For example,\n+from i386.md:\n+\n+@smallexample\n+(define_insn_and_split \"zero_extendhisi2_and\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+     (zero_extend:SI (match_operand:HI 1 \"register_operand\" \"0\")))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_ZERO_EXTEND_WITH_AND && !optimize_size\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(parallel [(set (match_dup 0) (and:SI (match_dup 0) (const_int 65535)))\n+\t      (clobber (reg:CC 17))])]\n+  \"\"\n+  [(set_attr \"type\" \"alu1\")])\n+\n+@end smallexample\n+\n+In this case, the actual split condition will be \n+\"TARGET_ZERO_EXTEND_WITH_AND && !optimize_size && reload_completed.\"\n+\n+The @code{define_insn_and_split} construction provides exactly the same\n+functionality as two separate @code{define_insn} and @code{define_split}\n+patterns.  It exists for compactness, and as a maintenance tool to prevent\n+having to ensure the two patterns' templates match.\n+\n @node Peephole Definitions\n @section Machine-Specific Peephole Optimizers\n @cindex peephole optimizer definitions"}, {"sha": "29cb5ee4bf8aa38e8991f5495cc364dea3c4c34b", "filename": "gcc/rtl.def", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c88c0d42a1ac718915fcd7c79ebe517baa624348/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c88c0d42a1ac718915fcd7c79ebe517baa624348/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=c88c0d42a1ac718915fcd7c79ebe517baa624348", "patch": "@@ -203,6 +203,33 @@ DEF_RTL_EXPR(DEFINE_PEEPHOLE, \"define_peephole\", \"EssV\", 'x')\n \t(`operands' is an alias here for `recog_operand').   */\n DEF_RTL_EXPR(DEFINE_SPLIT, \"define_split\", \"EsES\", 'x')\n \n+/* Definition of an insn and associated split.\n+   This is the concatenation, with a few modifications, of a define_insn\n+   and a define_split which share the same pattern.\n+   Operand:\n+   0: names this instruction.\n+      If the name is the null string, the instruction is in the\n+      machine description just to be recognized, and will never be emitted by\n+      the tree to rtl expander.\n+   1: is the pattern.\n+   2: is a string which is a C expression\n+      giving an additional condition for recognizing this pattern.\n+      A null string means no extra condition.\n+   3: is the action to execute if this pattern is matched.\n+      If this assembler code template starts with a * then it is a fragment of\n+      C code to run to decide on a template to use.  Otherwise, it is the\n+      template to use.\n+   4: C expression that must be true for split.  This may start with \"&&\"\n+      in which case the split condition is the logical and of the insn \n+      condition and what follows the \"&&\" of this operand.\n+   5: vector of insn patterns to place into a SEQUENCE\n+   6: optionally, some C code to execute before generating the\n+\tinsns.  This might, for example, create some RTX's and store them in\n+\telements of `recog_operand' for use by the vector of insn-patterns.\n+\t(`operands' is an alias here for `recog_operand').  \n+   7: optionally, a vector of attributes for this insn.  */\n+DEF_RTL_EXPR(DEFINE_INSN_AND_SPLIT, \"define_insn_and_split\", \"sEsssESV\", 'x')\n+\n /* Definition of an RTL peephole operation.\n    Follows the same arguments as define_split.  */\n DEF_RTL_EXPR(DEFINE_PEEPHOLE2, \"define_peephole2\", \"EsES\", 'x')"}]}