{"sha": "c228a0698654628c25704330a123c58c4a5380b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzIyOGEwNjk4NjU0NjI4YzI1NzA0MzMwYTEyM2M1OGM0YTUzODBiNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-01T12:31:32Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-01T12:31:32Z"}, "message": "[multiple changes]\n\n2011-08-01  Robert Dewar  <dewar@adacore.com>\n\n\t* aspects.ads, aspects.adb (Aspect_Names): Moved from body to spec.\n\t* par-ch13.adb (P_Aspect_Specifications): Check misspelled aspect name.\n\t* par.adb: Add with for Namet.Sp.\n\t* par-tchk.adb: Minor reformatting.\n\n2011-08-01  Vincent Celier  <celier@adacore.com>\n\n\t* mlib-tgt-specific-vms-alpha.adb, mlib-tgt-specific-vms-ia64.adb\n\t(Build_Dynamic_Library): Use new function Init_Proc_Name to get the name\n\tof the init procedure of a SAL.\n\t* mlib-tgt-vms_common.ads, mlib-tgt-vms_common.adb (Init_Proc_Name):\n\tNew procedure.\n\n2011-08-01  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_ch4.adb, s-tasini.ads, sem_attr.adb, s-soflin.ads: Minor\n\treformatting.\n\n2011-08-01  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n\n\t* adaint.c (__gnat_file_time_name_attr): Get rid of warning.\n\n2011-08-01  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_util.adb, sem_util.ads (Has_Overriding_Initialize): Make function\n\tconformant with its spec (return True only for types that have\n\tan overriding Initialize primitive operation that prevents them from\n\thaving preelaborable initialization).\n\t* sem_cat.adb (Validate_Object_Declaration): Fix test for preelaborable\n\tinitialization for controlled types in Ada 2005 or later mode.\n\nFrom-SVN: r177021", "tree": {"sha": "410c132ed7df4a60c4416343f473a35779582288", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/410c132ed7df4a60c4416343f473a35779582288"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c228a0698654628c25704330a123c58c4a5380b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c228a0698654628c25704330a123c58c4a5380b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c228a0698654628c25704330a123c58c4a5380b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c228a0698654628c25704330a123c58c4a5380b4/comments", "author": null, "committer": null, "parents": [{"sha": "b6193c94eb443c680cc828266fc93b654d28d250", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6193c94eb443c680cc828266fc93b654d28d250", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6193c94eb443c680cc828266fc93b654d28d250"}], "stats": {"total": 356, "additions": 215, "deletions": 141}, "files": [{"sha": "100a29807794a4a60cab3203868184dbdac8761c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c228a0698654628c25704330a123c58c4a5380b4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c228a0698654628c25704330a123c58c4a5380b4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c228a0698654628c25704330a123c58c4a5380b4", "patch": "@@ -1,3 +1,36 @@\n+2011-08-01  Robert Dewar  <dewar@adacore.com>\n+\n+\t* aspects.ads, aspects.adb (Aspect_Names): Moved from body to spec.\n+\t* par-ch13.adb (P_Aspect_Specifications): Check misspelled aspect name.\n+\t* par.adb: Add with for Namet.Sp.\n+\t* par-tchk.adb: Minor reformatting.\n+\n+2011-08-01  Vincent Celier  <celier@adacore.com>\n+\n+\t* mlib-tgt-specific-vms-alpha.adb, mlib-tgt-specific-vms-ia64.adb\n+\t(Build_Dynamic_Library): Use new function Init_Proc_Name to get the name\n+\tof the init procedure of a SAL.\n+\t* mlib-tgt-vms_common.ads, mlib-tgt-vms_common.adb (Init_Proc_Name):\n+\tNew procedure.\n+\n+2011-08-01  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_ch4.adb, s-tasini.ads, sem_attr.adb, s-soflin.ads: Minor\n+\treformatting.\n+\n+2011-08-01  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* adaint.c (__gnat_file_time_name_attr): Get rid of warning.\n+\n+2011-08-01  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_util.adb, sem_util.ads (Has_Overriding_Initialize): Make function\n+\tconformant with its spec (return True only for types that have\n+\tan overriding Initialize primitive operation that prevents them from\n+\thaving preelaborable initialization).\n+\t* sem_cat.adb (Validate_Object_Declaration): Fix test for preelaborable\n+\tinitialization for controlled types in Ada 2005 or later mode.\n+\n 2011-08-01  Robert Dewar  <dewar@adacore.com>\n \n \t* aspects.ads, aspects.adb: Add aspect Type_Invariant, Precondition,"}, {"sha": "66c277885576ca5667fd7943c9f8a987923a5744", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c228a0698654628c25704330a123c58c4a5380b4/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c228a0698654628c25704330a123c58c4a5380b4/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=c228a0698654628c25704330a123c58c4a5380b4", "patch": "@@ -1370,7 +1370,7 @@ __gnat_file_time_name_attr (char* name, struct file_attributes* attr)\n       TCHAR wname[GNAT_MAX_PATH_LEN];\n       S2WSC (wname, name, GNAT_MAX_PATH_LEN);\n \n-      if (res = GetFileAttributesEx (wname, GetFileExInfoStandard, &fad))\n+      if ((res = GetFileAttributesEx (wname, GetFileExInfoStandard, &fad)))\n \tf2t (&fad.ftLastWriteTime, &ret);\n       attr->timestamp = (OS_Time) ret;\n #else"}, {"sha": "ca87c6c2c1d4de30286e0d35e4062d77652f12d2", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 14, "deletions": 75, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c228a0698654628c25704330a123c58c4a5380b4/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c228a0698654628c25704330a123c58c4a5380b4/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=c228a0698654628c25704330a123c58c4a5380b4", "patch": "@@ -29,13 +29,12 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Atree;   use Atree;\n-with Nlists;  use Nlists;\n-with Sinfo;   use Sinfo;\n-with Snames;  use Snames;\n-with Tree_IO; use Tree_IO;\n+with Atree;    use Atree;\n+with Nlists;   use Nlists;\n+with Sinfo;    use Sinfo;\n+with Tree_IO;  use Tree_IO;\n \n-with GNAT.HTable; use GNAT.HTable;\n+with GNAT.HTable;           use GNAT.HTable;\n \n package body Aspects is\n \n@@ -63,66 +62,6 @@ package body Aspects is\n         Hash       => AS_Hash,\n         Equal      => \"=\");\n \n-   -----------------------------------------\n-   -- Table Linking Names and Aspect_Id's --\n-   -----------------------------------------\n-\n-   type Aspect_Entry is record\n-      Nam : Name_Id;\n-      Asp : Aspect_Id;\n-   end record;\n-\n-   Aspect_Names : constant array (Integer range <>) of Aspect_Entry :=\n-    ((Name_Ada_2005,                     Aspect_Ada_2005),\n-     (Name_Ada_2012,                     Aspect_Ada_2012),\n-     (Name_Address,                      Aspect_Address),\n-     (Name_Alignment,                    Aspect_Alignment),\n-     (Name_Atomic,                       Aspect_Atomic),\n-     (Name_Atomic_Components,            Aspect_Atomic_Components),\n-     (Name_Bit_Order,                    Aspect_Bit_Order),\n-     (Name_Component_Size,               Aspect_Component_Size),\n-     (Name_Dynamic_Predicate,            Aspect_Dynamic_Predicate),\n-     (Name_Discard_Names,                Aspect_Discard_Names),\n-     (Name_External_Tag,                 Aspect_External_Tag),\n-     (Name_Favor_Top_Level,              Aspect_Favor_Top_Level),\n-     (Name_Inline,                       Aspect_Inline),\n-     (Name_Inline_Always,                Aspect_Inline_Always),\n-     (Name_Input,                        Aspect_Input),\n-     (Name_Invariant,                    Aspect_Invariant),\n-     (Name_Machine_Radix,                Aspect_Machine_Radix),\n-     (Name_Object_Size,                  Aspect_Object_Size),\n-     (Name_Output,                       Aspect_Output),\n-     (Name_Pack,                         Aspect_Pack),\n-     (Name_Persistent_BSS,               Aspect_Persistent_BSS),\n-     (Name_Post,                         Aspect_Post),\n-     (Name_Postcondition,                Aspect_Postcondition),\n-     (Name_Pre,                          Aspect_Pre),\n-     (Name_Precondition,                 Aspect_Precondition),\n-     (Name_Predicate,                    Aspect_Predicate),\n-     (Name_Preelaborable_Initialization, Aspect_Preelaborable_Initialization),\n-     (Name_Pure_Function,                Aspect_Pure_Function),\n-     (Name_Read,                         Aspect_Read),\n-     (Name_Shared,                       Aspect_Shared),\n-     (Name_Size,                         Aspect_Size),\n-     (Name_Static_Predicate,             Aspect_Static_Predicate),\n-     (Name_Storage_Pool,                 Aspect_Storage_Pool),\n-     (Name_Storage_Size,                 Aspect_Storage_Size),\n-     (Name_Stream_Size,                  Aspect_Stream_Size),\n-     (Name_Suppress,                     Aspect_Suppress),\n-     (Name_Suppress_Debug_Info,          Aspect_Suppress_Debug_Info),\n-     (Name_Type_Invariant,               Aspect_Type_Invariant),\n-     (Name_Unchecked_Union,              Aspect_Unchecked_Union),\n-     (Name_Universal_Aliasing,           Aspect_Universal_Aliasing),\n-     (Name_Unmodified,                   Aspect_Unmodified),\n-     (Name_Unreferenced,                 Aspect_Unreferenced),\n-     (Name_Unreferenced_Objects,         Aspect_Unreferenced_Objects),\n-     (Name_Unsuppress,                   Aspect_Unsuppress),\n-     (Name_Value_Size,                   Aspect_Value_Size),\n-     (Name_Volatile,                     Aspect_Volatile),\n-     (Name_Volatile_Components,          Aspect_Volatile_Components),\n-     (Name_Warnings,                     Aspect_Warnings),\n-     (Name_Write,                        Aspect_Write));\n-\n    -------------------------------------\n    -- Hash Table for Aspect Id Values --\n    -------------------------------------\n@@ -147,15 +86,6 @@ package body Aspects is\n         Hash       => AI_Hash,\n         Equal      => \"=\");\n \n-   -------------------\n-   -- Get_Aspect_Id --\n-   -------------------\n-\n-   function Get_Aspect_Id (Name : Name_Id) return Aspect_Id is\n-   begin\n-      return Aspect_Id_Hash_Table.Get (Name);\n-   end Get_Aspect_Id;\n-\n    ---------------------------\n    -- Aspect_Specifications --\n    ---------------------------\n@@ -169,6 +99,15 @@ package body Aspects is\n       end if;\n    end Aspect_Specifications;\n \n+   -------------------\n+   -- Get_Aspect_Id --\n+   -------------------\n+\n+   function Get_Aspect_Id (Name : Name_Id) return Aspect_Id is\n+   begin\n+      return Aspect_Id_Hash_Table.Get (Name);\n+   end Get_Aspect_Id;\n+\n    ------------------\n    -- Move_Aspects --\n    ------------------"}, {"sha": "ed391f03a07477f4ed293af8ad8fcbf85e355f07", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 65, "deletions": 2, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c228a0698654628c25704330a123c58c4a5380b4/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c228a0698654628c25704330a123c58c4a5380b4/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=c228a0698654628c25704330a123c58c4a5380b4", "patch": "@@ -34,8 +34,9 @@\n --  aspect specifications from the tree. The semantic processing for aspect\n --  specifications is found in Sem_Ch13.Analyze_Aspect_Specifications.\n \n-with Namet; use Namet;\n-with Types; use Types;\n+with Namet;  use Namet;\n+with Snames; use Snames;\n+with Types;  use Types;\n \n package Aspects is\n \n@@ -159,6 +160,68 @@ package Aspects is\n                         Aspect_Write             => Name,\n                         Boolean_Aspects          => Optional);\n \n+   -----------------------------------------\n+   -- Table Linking Names and Aspect_Id's --\n+   -----------------------------------------\n+\n+   type Aspect_Entry is record\n+      Nam : Name_Id;\n+      Asp : Aspect_Id;\n+   end record;\n+\n+   --  Table linking aspect names and id's\n+\n+   Aspect_Names : constant array (Integer range <>) of Aspect_Entry :=\n+    ((Name_Ada_2005,                     Aspect_Ada_2005),\n+     (Name_Ada_2012,                     Aspect_Ada_2012),\n+     (Name_Address,                      Aspect_Address),\n+     (Name_Alignment,                    Aspect_Alignment),\n+     (Name_Atomic,                       Aspect_Atomic),\n+     (Name_Atomic_Components,            Aspect_Atomic_Components),\n+     (Name_Bit_Order,                    Aspect_Bit_Order),\n+     (Name_Component_Size,               Aspect_Component_Size),\n+     (Name_Dynamic_Predicate,            Aspect_Dynamic_Predicate),\n+     (Name_Discard_Names,                Aspect_Discard_Names),\n+     (Name_External_Tag,                 Aspect_External_Tag),\n+     (Name_Favor_Top_Level,              Aspect_Favor_Top_Level),\n+     (Name_Inline,                       Aspect_Inline),\n+     (Name_Inline_Always,                Aspect_Inline_Always),\n+     (Name_Input,                        Aspect_Input),\n+     (Name_Invariant,                    Aspect_Invariant),\n+     (Name_Machine_Radix,                Aspect_Machine_Radix),\n+     (Name_Object_Size,                  Aspect_Object_Size),\n+     (Name_Output,                       Aspect_Output),\n+     (Name_Pack,                         Aspect_Pack),\n+     (Name_Persistent_BSS,               Aspect_Persistent_BSS),\n+     (Name_Post,                         Aspect_Post),\n+     (Name_Postcondition,                Aspect_Postcondition),\n+     (Name_Pre,                          Aspect_Pre),\n+     (Name_Precondition,                 Aspect_Precondition),\n+     (Name_Predicate,                    Aspect_Predicate),\n+     (Name_Preelaborable_Initialization, Aspect_Preelaborable_Initialization),\n+     (Name_Pure_Function,                Aspect_Pure_Function),\n+     (Name_Read,                         Aspect_Read),\n+     (Name_Shared,                       Aspect_Shared),\n+     (Name_Size,                         Aspect_Size),\n+     (Name_Static_Predicate,             Aspect_Static_Predicate),\n+     (Name_Storage_Pool,                 Aspect_Storage_Pool),\n+     (Name_Storage_Size,                 Aspect_Storage_Size),\n+     (Name_Stream_Size,                  Aspect_Stream_Size),\n+     (Name_Suppress,                     Aspect_Suppress),\n+     (Name_Suppress_Debug_Info,          Aspect_Suppress_Debug_Info),\n+     (Name_Type_Invariant,               Aspect_Type_Invariant),\n+     (Name_Unchecked_Union,              Aspect_Unchecked_Union),\n+     (Name_Universal_Aliasing,           Aspect_Universal_Aliasing),\n+     (Name_Unmodified,                   Aspect_Unmodified),\n+     (Name_Unreferenced,                 Aspect_Unreferenced),\n+     (Name_Unreferenced_Objects,         Aspect_Unreferenced_Objects),\n+     (Name_Unsuppress,                   Aspect_Unsuppress),\n+     (Name_Value_Size,                   Aspect_Value_Size),\n+     (Name_Volatile,                     Aspect_Volatile),\n+     (Name_Volatile_Components,          Aspect_Volatile_Components),\n+     (Name_Warnings,                     Aspect_Warnings),\n+     (Name_Write,                        Aspect_Write));\n+\n    function Get_Aspect_Id (Name : Name_Id) return Aspect_Id;\n    pragma Inline (Get_Aspect_Id);\n    --  Given a name Nam, returns the corresponding aspect id value. If the name"}, {"sha": "3256cc4d779b36c7ef5c8d824f86c86fdf805e04", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c228a0698654628c25704330a123c58c4a5380b4/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c228a0698654628c25704330a123c58c4a5380b4/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=c228a0698654628c25704330a123c58c4a5380b4", "patch": "@@ -7693,7 +7693,8 @@ package body Exp_Ch4 is\n                   --  copy. We don't want to copy complex expressions, and\n                   --  indeed to do so can cause trouble (before we put in\n                   --  this guard, a discriminant expression containing an\n-                  --  AND THEN was copied, cause coverage problems\n+                  --  AND THEN was copied, causing problems to coverage\n+                  --  analysis tools).\n \n                   if Disc = Entity (Selector_Name (N))\n                     and then (Is_Entity_Name (Dval)\n@@ -7723,7 +7724,7 @@ package body Exp_Ch4 is\n \n                      elsif Is_Entity_Name (Dval)\n                        and then Nkind (Parent (Entity (Dval)))\n-                         = N_Object_Declaration\n+                                  = N_Object_Declaration\n                        and then Present (Expression (Parent (Entity (Dval))))\n                        and then\n                          not Is_Static_Expression\n@@ -7774,8 +7775,8 @@ package body Exp_Ch4 is\n \n                --  Note: the above loop should always find a matching\n                --  discriminant, but if it does not, we just missed an\n-               --  optimization due to some glitch (perhaps a previous error),\n-               --  so ignore.\n+               --  optimization due to some glitch (perhaps a previous\n+               --  error), so ignore.\n \n             end if;\n          end if;"}, {"sha": "c8e248b13eb518d0cdddba6831103f5e98f18b00", "filename": "gcc/ada/mlib-tgt-specific-vms-alpha.adb", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c228a0698654628c25704330a123c58c4a5380b4/gcc%2Fada%2Fmlib-tgt-specific-vms-alpha.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c228a0698654628c25704330a123c58c4a5380b4/gcc%2Fada%2Fmlib-tgt-specific-vms-alpha.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmlib-tgt-specific-vms-alpha.adb?ref=c228a0698654628c25704330a123c58c4a5380b4", "patch": "@@ -7,7 +7,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2003-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2003-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,9 +31,7 @@ with Ada.Characters.Handling; use Ada.Characters.Handling;\n with MLib.Fil;\n with MLib.Utl;\n \n-with MLib.Tgt.VMS_Common;\n-pragma Warnings (Off, MLib.Tgt.VMS_Common);\n---  MLib.Tgt.VMS_Common is with'ed only for elaboration purposes\n+with MLib.Tgt.VMS_Common; use MLib.Tgt.VMS_Common;\n \n with Opt;      use Opt;\n with Output;   use Output;\n@@ -251,7 +249,7 @@ package body MLib.Tgt.Specific is\n          declare\n             Macro_File_Name : constant String := Lib_Filename & \"__init.asm\";\n             Macro_File      : File_Descriptor;\n-            Init_Proc       : String := Lib_Filename & \"INIT\";\n+            Init_Proc       : constant String := Init_Proc_Name (Lib_Filename);\n             Popen_Result    : System.Address;\n             Pclose_Result   : Integer;\n             Len             : Natural;\n@@ -266,8 +264,6 @@ package body MLib.Tgt.Specific is\n             --  The mode for the invocation of Popen\n \n          begin\n-            To_Upper (Init_Proc);\n-\n             if Verbose_Mode then\n                Write_Str (\"Creating auto-init assembly file \"\"\");\n                Write_Str (Macro_File_Name);"}, {"sha": "6c6c7ae37ceef22a75ac20c8968ce2f8f161feba", "filename": "gcc/ada/mlib-tgt-specific-vms-ia64.adb", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c228a0698654628c25704330a123c58c4a5380b4/gcc%2Fada%2Fmlib-tgt-specific-vms-ia64.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c228a0698654628c25704330a123c58c4a5380b4/gcc%2Fada%2Fmlib-tgt-specific-vms-ia64.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmlib-tgt-specific-vms-ia64.adb?ref=c228a0698654628c25704330a123c58c4a5380b4", "patch": "@@ -7,7 +7,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,9 +31,7 @@ with Ada.Characters.Handling; use Ada.Characters.Handling;\n with MLib.Fil;\n with MLib.Utl;\n \n-with MLib.Tgt.VMS_Common;\n-pragma Warnings (Off, MLib.Tgt.VMS_Common);\n---  MLib.Tgt.VMS_Common is with'ed only for elaboration purposes\n+with MLib.Tgt.VMS_Common; use MLib.Tgt.VMS_Common;\n \n with Opt;      use Opt;\n with Output;   use Output;\n@@ -248,7 +246,7 @@ package body MLib.Tgt.Specific is\n          declare\n             Macro_File_Name : constant String := Lib_Filename & \"__init.asm\";\n             Macro_File      : File_Descriptor;\n-            Init_Proc       : String := Lib_Filename & \"INIT\";\n+            Init_Proc       : constant String := Init_Proc_Name (Lib_Filename);\n             Popen_Result    : System.Address;\n             Pclose_Result   : Integer;\n             Len             : Natural;\n@@ -265,8 +263,6 @@ package body MLib.Tgt.Specific is\n             --  Why odd lower case name ???\n \n          begin\n-            To_Upper (Init_Proc);\n-\n             if Verbose_Mode then\n                Write_Str (\"Creating auto-init assembly file \"\"\");\n                Write_Str (Macro_File_Name);"}, {"sha": "9855afb84ac01dd46e528d443c0cda50959f33a4", "filename": "gcc/ada/mlib-tgt-vms_common.adb", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c228a0698654628c25704330a123c58c4a5380b4/gcc%2Fada%2Fmlib-tgt-vms_common.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c228a0698654628c25704330a123c58c4a5380b4/gcc%2Fada%2Fmlib-tgt-vms_common.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmlib-tgt-vms_common.adb?ref=c228a0698654628c25704330a123c58c4a5380b4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2003-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2003-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -25,6 +25,8 @@\n \n --  This is the part of MLib.Tgt.Specific common to both VMS versions\n \n+with System.Case_Util; use System.Case_Util;\n+\n package body MLib.Tgt.VMS_Common is\n \n    --  Non default subprograms. See comments in mlib-tgt.ads\n@@ -74,6 +76,23 @@ package body MLib.Tgt.VMS_Common is\n       return \"exe\";\n    end DLL_Ext;\n \n+   --------------------\n+   -- Init_Proc_Name --\n+   --------------------\n+\n+   function Init_Proc_Name (Library_Name : String) return String is\n+      Result : String := Library_Name & \"INIT\";\n+   begin\n+      To_Upper (Result);\n+\n+      if Result = \"ADAINIT\" then\n+         return \"ADA_INIT\";\n+\n+      else\n+         return Result;\n+      end if;\n+   end Init_Proc_Name;\n+\n    -------------------\n    -- Is_Object_Ext --\n    -------------------"}, {"sha": "cdba6134ee9c793d9744bf589cbc65af0fb77853", "filename": "gcc/ada/mlib-tgt-vms_common.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c228a0698654628c25704330a123c58c4a5380b4/gcc%2Fada%2Fmlib-tgt-vms_common.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c228a0698654628c25704330a123c58c4a5380b4/gcc%2Fada%2Fmlib-tgt-vms_common.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmlib-tgt-vms_common.ads?ref=c228a0698654628c25704330a123c58c4a5380b4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---        Copyright (C) 2007-2008, Free Software Foundation, Inc.           --\n+--        Copyright (C) 2007-2010, Free Software Foundation, Inc.           --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -27,4 +27,9 @@\n \n package MLib.Tgt.VMS_Common is\n    pragma Elaborate_Body;\n+\n+   function Init_Proc_Name (Library_Name : String) return String;\n+   --  Returns, in upper case, Library_Name & \"INIT\", except when Library_Name\n+   --  is \"ada\" (case insensitive), returns \"ADA_INIT\".\n+\n end MLib.Tgt.VMS_Common;"}, {"sha": "215174e6fbd7228adbebde667ec531e51bfb8c94", "filename": "gcc/ada/par-ch13.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c228a0698654628c25704330a123c58c4a5380b4/gcc%2Fada%2Fpar-ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c228a0698654628c25704330a123c58c4a5380b4/gcc%2Fada%2Fpar-ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch13.adb?ref=c228a0698654628c25704330a123c58c4a5380b4", "patch": "@@ -427,6 +427,19 @@ package body Ch13 is\n          if A_Id = No_Aspect then\n             Error_Msg_SC (\"aspect identifier expected\");\n \n+            --  Check bad spelling\n+\n+            for J in Aspect_Names'Range loop\n+               if Is_Bad_Spelling_Of (Token_Name, Aspect_Names (J).Nam) then\n+                  Error_Msg_Name_1 := Aspect_Names (J).Nam;\n+                  Error_Msg_SC -- CODEFIX\n+                    (\"\\possible misspelling of%\");\n+                  exit;\n+               end if;\n+            end loop;\n+\n+            Scan; -- past incorrect identifier\n+\n             if Token = Tok_Apostrophe then\n                Scan; -- past '\n                Scan; -- past presumably CLASS"}, {"sha": "6efb1e96697173266b1bc2fb184fb7dc0c69b0ec", "filename": "gcc/ada/par-tchk.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c228a0698654628c25704330a123c58c4a5380b4/gcc%2Fada%2Fpar-tchk.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c228a0698654628c25704330a123c58c4a5380b4/gcc%2Fada%2Fpar-tchk.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-tchk.adb?ref=c228a0698654628c25704330a123c58c4a5380b4", "patch": "@@ -43,10 +43,10 @@ package body Tchk is\n    --  position of the error message if the token is missing (see Wrong_Token)\n \n    procedure Wrong_Token (T : Token_Type; P : Position);\n-   --  Called when scanning a reserved keyword when the keyword is not\n-   --  present. T is the token type for the keyword, and P indicates the\n-   --  position to be used to place a message relative to the current\n-   --  token if the keyword is not located nearby.\n+   --  Called when scanning a reserved keyword when the keyword is not present.\n+   --  T is the token type for the keyword, and P indicates the position to be\n+   --  used to place a message relative to the current token if the keyword is\n+   --  not located nearby.\n \n    -----------------\n    -- Check_Token --"}, {"sha": "ee05d9c60d23d92a9fe58115aec9fb5b54274f1c", "filename": "gcc/ada/par.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c228a0698654628c25704330a123c58c4a5380b4/gcc%2Fada%2Fpar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c228a0698654628c25704330a123c58c4a5380b4/gcc%2Fada%2Fpar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar.adb?ref=c228a0698654628c25704330a123c58c4a5380b4", "patch": "@@ -32,6 +32,7 @@ with Errout;   use Errout;\n with Fname;    use Fname;\n with Lib;      use Lib;\n with Namet;    use Namet;\n+with Namet.Sp; use Namet.Sp;\n with Nlists;   use Nlists;\n with Nmake;    use Nmake;\n with Opt;      use Opt;"}, {"sha": "5a2c556f5a82b73f635ae93c3cfc9be6ea91225e", "filename": "gcc/ada/s-soflin.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c228a0698654628c25704330a123c58c4a5380b4/gcc%2Fada%2Fs-soflin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c228a0698654628c25704330a123c58c4a5380b4/gcc%2Fada%2Fs-soflin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-soflin.ads?ref=c228a0698654628c25704330a123c58c4a5380b4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -146,7 +146,7 @@ package System.Soft_Links is\n \n    function Check_Abort_Status_NT return Integer;\n    --  Returns Boolean'Pos (True) iff abort signal should raise\n-   --  Standard.Abort_Signal.\n+   --  Standard'Abort_Signal.\n \n    procedure Task_Lock_NT;\n    --  Lock out other tasks (non-tasking case, does nothing)\n@@ -180,7 +180,7 @@ package System.Soft_Links is\n \n    Check_Abort_Status : Get_Integer_Call := Check_Abort_Status_NT'Access;\n    --  Called when Abort_Signal is delivered to the process.  Checks to\n-   --  see if signal should result in raising Standard.Abort_Signal.\n+   --  see if signal should result in raising Standard'Abort_Signal.\n \n    Lock_Task : No_Param_Proc := Task_Lock_NT'Access;\n    --  Locks out other tasks. Preceding a section of code by Task_Lock and"}, {"sha": "1bf82cceb26b986e9293e2e3810df9c244c6d265", "filename": "gcc/ada/s-tasini.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c228a0698654628c25704330a123c58c4a5380b4/gcc%2Fada%2Fs-tasini.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c228a0698654628c25704330a123c58c4a5380b4/gcc%2Fada%2Fs-tasini.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasini.ads?ref=c228a0698654628c25704330a123c58c4a5380b4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -127,7 +127,7 @@ package System.Tasking.Initialization is\n \n    function Check_Abort_Status return Integer;\n    --  Returns Boolean'Pos (True) iff abort signal should raise\n-   --  Standard.Abort_Signal. Only used by IRIX currently.\n+   --  Standard'Abort_Signal. Only used by IRIX currently.\n \n    --------------------------\n    -- Change Base Priority --"}, {"sha": "33a40b3ba36ee882c7790c8facbe986f1736b054", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c228a0698654628c25704330a123c58c4a5380b4/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c228a0698654628c25704330a123c58c4a5380b4/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=c228a0698654628c25704330a123c58c4a5380b4", "patch": "@@ -2065,8 +2065,7 @@ package body Sem_Attr is\n \n       when Attribute_Abort_Signal =>\n          Check_Standard_Prefix;\n-         Rewrite (N,\n-           New_Reference_To (Stand.Abort_Signal, Loc));\n+         Rewrite (N, New_Reference_To (Stand.Abort_Signal, Loc));\n          Analyze (N);\n \n       ------------"}, {"sha": "e262dc71835ac03116e0fd7188ccac35f290681b", "filename": "gcc/ada/sem_cat.adb", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c228a0698654628c25704330a123c58c4a5380b4/gcc%2Fada%2Fsem_cat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c228a0698654628c25704330a123c58c4a5380b4/gcc%2Fada%2Fsem_cat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_cat.adb?ref=c228a0698654628c25704330a123c58c4a5380b4", "patch": "@@ -1268,7 +1268,17 @@ package body Sem_Cat is\n                   end if;\n                end if;\n \n-               if Has_Overriding_Initialize (ET) then\n+               --  For controlled type or type with controlled component, check\n+               --  preelaboration flag, as there may be a non-null Initialize\n+               --  primitive. For language versions earlier than Ada 2005,\n+               --  there is no notion of preelaborable initialization, and the\n+               --  rules for controlled objects are enforced in\n+               --  Validate_Controlled_Object.\n+\n+               if (Is_Controlled (ET) or else Has_Controlled_Component (ET))\n+                    and then Ada_Version >= Ada_2005\n+                    and then not Has_Preelaborable_Initialization (ET)\n+               then\n                   Error_Msg_NE\n                     (\"controlled type& does not have\"\n                       & \" preelaborable initialization\", N, ET);"}, {"sha": "c21003efc97dded70b2ddb819465fd10f83bc873", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 27, "deletions": 30, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c228a0698654628c25704330a123c58c4a5380b4/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c228a0698654628c25704330a123c58c4a5380b4/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=c228a0698654628c25704330a123c58c4a5380b4", "patch": "@@ -4889,51 +4889,48 @@ package body Sem_Util is\n \n    function Has_Overriding_Initialize (T : Entity_Id) return Boolean is\n       BT   : constant Entity_Id := Base_Type (T);\n-      Comp : Entity_Id;\n       P    : Elmt_Id;\n \n    begin\n       if Is_Controlled (BT) then\n-\n-         --  For derived types, check immediate ancestor, excluding\n-         --  Controlled itself.\n-\n-         if Is_Derived_Type (BT)\n-           and then not In_Predefined_Unit (Etype (BT))\n-           and then Has_Overriding_Initialize (Etype (BT))\n-         then\n-            return True;\n+         if Is_RTU (Scope (BT), Ada_Finalization) then\n+            return False;\n \n          elsif Present (Primitive_Operations (BT)) then\n             P := First_Elmt (Primitive_Operations (BT));\n             while Present (P) loop\n-               if Chars (Node (P)) = Name_Initialize\n-                 and then Comes_From_Source (Node (P))\n-               then\n-                  return True;\n-               end if;\n+               declare\n+                  Init : constant Entity_Id := Node (P);\n+                  Formal : constant Entity_Id := First_Formal (Init);\n+               begin\n+                  if Ekind (Init) = E_Procedure\n+                       and then Chars (Init) = Name_Initialize\n+                       and then Comes_From_Source (Init)\n+                       and then Present (Formal)\n+                       and then Etype (Formal) = BT\n+                       and then No (Next_Formal (Formal))\n+                       and then (Ada_Version < Ada_2012\n+                                   or else not Null_Present (Parent (Init)))\n+                  then\n+                     return True;\n+                  end if;\n+               end;\n \n                Next_Elmt (P);\n             end loop;\n          end if;\n \n-         return False;\n+         --  Here if type itself does not have a non-null Initialize operation:\n+         --  check immediate ancestor.\n \n-      elsif Has_Controlled_Component (BT) then\n-         Comp := First_Component (BT);\n-         while Present (Comp) loop\n-            if Has_Overriding_Initialize (Etype (Comp)) then\n-               return True;\n-            end if;\n-\n-            Next_Component (Comp);\n-         end loop;\n-\n-         return False;\n-\n-      else\n-         return False;\n+         if Is_Derived_Type (BT)\n+           and then Has_Overriding_Initialize (Etype (BT))\n+         then\n+            return True;\n+         end if;\n       end if;\n+\n+      return False;\n    end Has_Overriding_Initialize;\n \n    --------------------------------------"}, {"sha": "2b7d2d060e4d57389754e2c2bcac92b5f79d4254", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c228a0698654628c25704330a123c58c4a5380b4/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c228a0698654628c25704330a123c58c4a5380b4/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=c228a0698654628c25704330a123c58c4a5380b4", "patch": "@@ -587,7 +587,9 @@ package Sem_Util is\n \n    function Has_Overriding_Initialize (T : Entity_Id) return Boolean;\n    --  Predicate to determine whether a controlled type has a user-defined\n-   --  Initialize primitive, which makes the type not preelaborable.\n+   --  Initialize primitive (and, in Ada 2012, whether that primitive is\n+   --  non-null), which causes the type to not have preelaborable\n+   --  initialization.\n \n    function Has_Preelaborable_Initialization (E : Entity_Id) return Boolean;\n    --  Return True iff type E has preelaborable initialization as defined in"}]}