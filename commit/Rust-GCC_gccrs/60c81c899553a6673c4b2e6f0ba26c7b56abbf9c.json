{"sha": "60c81c899553a6673c4b2e6f0ba26c7b56abbf9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBjODFjODk5NTUzYTY2NzNjNGIyZTZmMGJhMjZjN2I1NmFiYmY5Yw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-02-03T05:39:57Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-02-03T05:39:57Z"}, "message": "doloop.c, [...]: Use const0_rtx instead of GEN_INT (0).\n\n\t* doloop.c, optabs.c, regmove.c, sched-deps.c,\n\tconfig/i386/i386.c, config/i386/i386.md: Use const0_rtx\n\tinstead of GEN_INT (0).  Do the same for other constants that\n\tare readily available.\n\nFrom-SVN: r77160", "tree": {"sha": "83526b7a4efa9bcc4ee6c55a45f9df95a68c2a50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83526b7a4efa9bcc4ee6c55a45f9df95a68c2a50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60c81c899553a6673c4b2e6f0ba26c7b56abbf9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60c81c899553a6673c4b2e6f0ba26c7b56abbf9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60c81c899553a6673c4b2e6f0ba26c7b56abbf9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60c81c899553a6673c4b2e6f0ba26c7b56abbf9c/comments", "author": null, "committer": null, "parents": [{"sha": "2fb00d7f2b6e2b00f011b1ca6ee471a76e1c2542", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fb00d7f2b6e2b00f011b1ca6ee471a76e1c2542", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fb00d7f2b6e2b00f011b1ca6ee471a76e1c2542"}], "stats": {"total": 39, "additions": 23, "deletions": 16}, "files": [{"sha": "972ebf82675d7072fcd215052b000df3558e18d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60c81c899553a6673c4b2e6f0ba26c7b56abbf9c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60c81c899553a6673c4b2e6f0ba26c7b56abbf9c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=60c81c899553a6673c4b2e6f0ba26c7b56abbf9c", "patch": "@@ -1,3 +1,10 @@\n+2004-02-03  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* doloop.c, optabs.c, regmove.c, sched-deps.c,\n+\tconfig/i386/i386.c, config/i386/i386.md: Use const0_rtx\n+\tinstead of GEN_INT (0).  Do the same for other constants that\n+\tare readily available.\n+\n 2004-02-03  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* combine.c (simplify_set): Use gen_rtx_fmt_e instead of"}, {"sha": "6a0701cbfebc261981ea542b6965d790bdefbfd8", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60c81c899553a6673c4b2e6f0ba26c7b56abbf9c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60c81c899553a6673c4b2e6f0ba26c7b56abbf9c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=60c81c899553a6673c4b2e6f0ba26c7b56abbf9c", "patch": "@@ -11632,17 +11632,17 @@ ix86_expand_strlensi_unroll_1 (rtx out, rtx src, rtx align_rtx)\n \n \t  emit_cmp_and_jump_insns (align_rtx, const0_rtx, EQ, NULL,\n \t\t\t\t   Pmode, 1, align_4_label);\n-\t  emit_cmp_and_jump_insns (align_rtx, GEN_INT (2), EQ, NULL,\n+\t  emit_cmp_and_jump_insns (align_rtx, const2_rtx, EQ, NULL,\n \t\t\t\t   Pmode, 1, align_2_label);\n-\t  emit_cmp_and_jump_insns (align_rtx, GEN_INT (2), GTU, NULL,\n+\t  emit_cmp_and_jump_insns (align_rtx, const2_rtx, GTU, NULL,\n \t\t\t\t   Pmode, 1, align_3_label);\n \t}\n       else\n         {\n \t  /* Since the alignment is 2, we have to check 2 or 0 bytes;\n \t     check if is aligned to 4 - byte.  */\n \n-\t  align_rtx = expand_binop (Pmode, and_optab, scratch1, GEN_INT (2),\n+\t  align_rtx = expand_binop (Pmode, and_optab, scratch1, const2_rtx,\n \t\t\t\t    NULL_RTX, 0, OPTAB_WIDEN);\n \n \t  emit_cmp_and_jump_insns (align_rtx, const0_rtx, EQ, NULL,\n@@ -11728,7 +11728,7 @@ ix86_expand_strlensi_unroll_1 (rtx out, rtx src, rtx align_rtx)\n \t\t\t\t\t\t     tmpreg)));\n        /* Emit lea manually to avoid clobbering of flags.  */\n        emit_insn (gen_rtx_SET (SImode, reg2,\n-\t\t\t       gen_rtx_PLUS (Pmode, out, GEN_INT (2))));\n+\t\t\t       gen_rtx_PLUS (Pmode, out, const2_rtx)));\n \n        tmp = gen_rtx_REG (CCNOmode, FLAGS_REG);\n        tmp = gen_rtx_EQ (VOIDmode, tmp, const0_rtx);\n@@ -11755,9 +11755,9 @@ ix86_expand_strlensi_unroll_1 (rtx out, rtx src, rtx align_rtx)\n        /* Not in the first two.  Move two bytes forward.  */\n        emit_insn (gen_lshrsi3 (tmpreg, tmpreg, GEN_INT (16)));\n        if (TARGET_64BIT)\n-\t emit_insn (gen_adddi3 (out, out, GEN_INT (2)));\n+\t emit_insn (gen_adddi3 (out, out, const2_rtx));\n        else\n-\t emit_insn (gen_addsi3 (out, out, GEN_INT (2)));\n+\t emit_insn (gen_addsi3 (out, out, const2_rtx));\n \n        emit_label (end_2_label);\n \n@@ -14487,7 +14487,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \t\t      expand_expr (arg0, NULL_RTX, VOIDmode, 0));\n       op0 = gen_reg_rtx (V2DFmode);\n       emit_insn (gen_sse2_loadsd (op0, adjust_address (target, V2DFmode, 0)));\n-      emit_insn (gen_sse2_shufpd (op0, op0, op0, GEN_INT (0)));\n+      emit_insn (gen_sse2_shufpd (op0, op0, op0, const0_rtx));\n       return op0;\n \n     case IX86_BUILTIN_SETPD:\n@@ -14505,7 +14505,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n     case IX86_BUILTIN_LOADRPD:\n       target = ix86_expand_unop_builtin (CODE_FOR_sse2_movapd, arglist,\n \t\t\t\t\t gen_reg_rtx (V2DFmode), 1);\n-      emit_insn (gen_sse2_shufpd (target, target, target, GEN_INT (1)));\n+      emit_insn (gen_sse2_shufpd (target, target, target, const1_rtx));\n       return target;\n \n     case IX86_BUILTIN_LOADPD1:"}, {"sha": "2c7bbb4a1ffe79b7ec79accbb89087416e8c0218", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60c81c899553a6673c4b2e6f0ba26c7b56abbf9c/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60c81c899553a6673c4b2e6f0ba26c7b56abbf9c/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=60c81c899553a6673c4b2e6f0ba26c7b56abbf9c", "patch": "@@ -4887,7 +4887,7 @@\n  \n         emit_move_insn (tmp, operands[1]);\n         emit_insn (gen_sse_shufps (op0, tmp, tmp,\n-                                   GEN_INT (1)));\n+                                   const1_rtx));\n       }\n     case 2:\n       {"}, {"sha": "6d4840a236c351766a0f940dfd557849c0ca6bfd", "filename": "gcc/doloop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60c81c899553a6673c4b2e6f0ba26c7b56abbf9c/gcc%2Fdoloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60c81c899553a6673c4b2e6f0ba26c7b56abbf9c/gcc%2Fdoloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoloop.c?ref=60c81c899553a6673c4b2e6f0ba26c7b56abbf9c", "patch": "@@ -1,5 +1,5 @@\n /* Perform doloop optimizations\n-   Copyright (C) 1999, 2000, 2001, 2002, 2003\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004\n    Free Software Foundation, Inc.\n    Contributed by Michael P. Hayes (m.hayes@elec.canterbury.ac.nz)\n \n@@ -475,7 +475,7 @@ doloop_modify (const struct loop *loop, rtx iterations, rtx iterations_max,\n \tcount = GEN_INT (INTVAL (count) - 1);\n       else\n \tcount = expand_simple_binop (GET_MODE (counter_reg), MINUS,\n-\t\t\t\t     count, GEN_INT (1),\n+\t\t\t\t     count, const1_rtx,\n \t\t\t\t     0, 0, OPTAB_LIB_WIDEN);\n     }\n "}, {"sha": "e748c15a18e1bc599d48205b7c3e86dd474fc65b", "filename": "gcc/optabs.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60c81c899553a6673c4b2e6f0ba26c7b56abbf9c/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60c81c899553a6673c4b2e6f0ba26c7b56abbf9c/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=60c81c899553a6673c4b2e6f0ba26c7b56abbf9c", "patch": "@@ -2358,7 +2358,7 @@ expand_parity (enum machine_mode mode, rtx op0, rtx target)\n \t      temp = expand_unop (wider_mode, popcount_optab, xop0, NULL_RTX,\n \t\t\t\t  true);\n \t      if (temp != 0)\n-\t\ttemp = expand_binop (wider_mode, and_optab, temp, GEN_INT (1),\n+\t\ttemp = expand_binop (wider_mode, and_optab, temp, const1_rtx,\n \t\t\t\t     target, true, OPTAB_DIRECT);\n \t      if (temp == 0)\n \t\tdelete_insns_since (last);\n@@ -3337,9 +3337,9 @@ emit_libcall_block (rtx insns, rtx target, rtx result, rtx equiv)\n \t  rtx note = find_reg_note (insn, REG_EH_REGION, NULL_RTX);\n \n \t  if (note != 0)\n-\t    XEXP (note, 0) = GEN_INT (-1);\n+\t    XEXP (note, 0) = constm1_rtx;\n \t  else\n-\t    REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EH_REGION, GEN_INT (-1),\n+\t    REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EH_REGION, constm1_rtx,\n \t\t\t\t\t\t  REG_NOTES (insn));\n \t}\n "}, {"sha": "4d6c85d501cd53b46639d438b70048e498857941", "filename": "gcc/regmove.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60c81c899553a6673c4b2e6f0ba26c7b56abbf9c/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60c81c899553a6673c4b2e6f0ba26c7b56abbf9c/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=60c81c899553a6673c4b2e6f0ba26c7b56abbf9c", "patch": "@@ -167,7 +167,7 @@ discover_flags_reg (void)\n {\n   rtx tmp;\n   tmp = gen_rtx_REG (word_mode, 10000);\n-  tmp = gen_add3_insn (tmp, tmp, GEN_INT (2));\n+  tmp = gen_add3_insn (tmp, tmp, const2_rtx);\n \n   /* If we get something that isn't a simple set, or a\n      [(set ..) (clobber ..)], this whole function will go wrong.  */"}, {"sha": "390ab3e2d664c54887a6eef12634621b41f4f115", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60c81c899553a6673c4b2e6f0ba26c7b56abbf9c/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60c81c899553a6673c4b2e6f0ba26c7b56abbf9c/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=60c81c899553a6673c4b2e6f0ba26c7b56abbf9c", "patch": "@@ -1267,7 +1267,7 @@ sched_analyze (struct deps *deps, rtx head, rtx tail)\n \t      || NOTE_LINE_NUMBER (insn) == NOTE_INSN_EH_REGION_END)\n \t    rtx_region = GEN_INT (NOTE_EH_HANDLER (insn));\n \t  else\n-\t    rtx_region = GEN_INT (0);\n+\t    rtx_region = const0_rtx;\n \n \t  loop_notes = alloc_EXPR_LIST (REG_SAVE_NOTE,\n \t\t\t\t\trtx_region,"}]}