{"sha": "9bebf0e989ac6a6be39d1f14693fd011c2ce624b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJlYmYwZTk4OWFjNmE2YmUzOWQxZjE0NjkzZmQwMTFjMmNlNjI0Yg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-22T17:29:41Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-22T17:29:41Z"}, "message": "[multiple changes]\n\n2010-06-22  Robert Dewar  <dewar@adacore.com>\n\n\t* errout.adb (Finalize): Set Prev pointers.\n\t(Finalize): Delete continuations for deletion by warnings off(str).\n\t* erroutc.ads: Add Prev pointer to error message structure.\n\n2010-06-22  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem.adb (Do_Unit_And_Dependents): If the spec of the main unit is a\n\tchild unit, examine context of parent units to locate instantiated\n\tgenerics whose bodies may be needed. \n\t* sem_ch12.adb: (Mark_Context): if the enclosing unit does not have a\n\twith_clause for the instantiated generic, examine the context of its\n\tparents, to set Withed_Body flag, so that it can be visited earlier.\n\t* exp_ch4.adb (Expand_N_Op_Not): If this is a VMS operator applied to\n\tan unsigned type, use a type of the proper size for the intermediate\n\tvalue, to prevent alignment problems on unchecked conversion.\n\n2010-06-22  Geert Bosch  <bosch@adacore.com>\n\n\t* s-rannum.ads Change Generator type to be self-referential to allow\n\tRandom to update its argument. Use \"in\" mode for the generator in the\n\tReset procedures to allow them to be called from the Ada.Numerics\n\tpackages without tricks.\n\t* s-rannum.adb: Use the self-referencing argument to get write access\n\tto the internal state of the random generator.\n\t* a-nudira.ads: Make Generator a derived type of\n\tSystem.Random_Numbers.Generator.\n\t* a-nudira.adb: Remove use of 'Unrestricted_Access.\n\tPut subprograms in alpha order and add headers.\n\t* g-mbdira.ads: Change Generator type to be self-referential.\n\t* g-mbdira.adb: Remove use of 'Unrestricted_Access.\n\nFrom-SVN: r161215", "tree": {"sha": "f457566fb8fc18443973ce2b98d400affc59113c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f457566fb8fc18443973ce2b98d400affc59113c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bebf0e989ac6a6be39d1f14693fd011c2ce624b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bebf0e989ac6a6be39d1f14693fd011c2ce624b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bebf0e989ac6a6be39d1f14693fd011c2ce624b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bebf0e989ac6a6be39d1f14693fd011c2ce624b/comments", "author": null, "committer": null, "parents": [{"sha": "545cb5be91f8dcaef5b5d27977e47970773d4cca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/545cb5be91f8dcaef5b5d27977e47970773d4cca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/545cb5be91f8dcaef5b5d27977e47970773d4cca"}], "stats": {"total": 466, "additions": 268, "deletions": 198}, "files": [{"sha": "a16bc19fbf5077466f4561868761bb8831a8d933", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bebf0e989ac6a6be39d1f14693fd011c2ce624b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bebf0e989ac6a6be39d1f14693fd011c2ce624b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9bebf0e989ac6a6be39d1f14693fd011c2ce624b", "patch": "@@ -1,3 +1,36 @@\n+2010-06-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* errout.adb (Finalize): Set Prev pointers.\n+\t(Finalize): Delete continuations for deletion by warnings off(str).\n+\t* erroutc.ads: Add Prev pointer to error message structure.\n+\n+2010-06-22  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem.adb (Do_Unit_And_Dependents): If the spec of the main unit is a\n+\tchild unit, examine context of parent units to locate instantiated\n+\tgenerics whose bodies may be needed. \n+\t* sem_ch12.adb: (Mark_Context): if the enclosing unit does not have a\n+\twith_clause for the instantiated generic, examine the context of its\n+\tparents, to set Withed_Body flag, so that it can be visited earlier.\n+\t* exp_ch4.adb (Expand_N_Op_Not): If this is a VMS operator applied to\n+\tan unsigned type, use a type of the proper size for the intermediate\n+\tvalue, to prevent alignment problems on unchecked conversion.\n+\n+2010-06-22  Geert Bosch  <bosch@adacore.com>\n+\n+\t* s-rannum.ads Change Generator type to be self-referential to allow\n+\tRandom to update its argument. Use \"in\" mode for the generator in the\n+\tReset procedures to allow them to be called from the Ada.Numerics\n+\tpackages without tricks.\n+\t* s-rannum.adb: Use the self-referencing argument to get write access\n+\tto the internal state of the random generator.\n+\t* a-nudira.ads: Make Generator a derived type of\n+\tSystem.Random_Numbers.Generator.\n+\t* a-nudira.adb: Remove use of 'Unrestricted_Access.\n+\tPut subprograms in alpha order and add headers.\n+\t* g-mbdira.ads: Change Generator type to be self-referential.\n+\t* g-mbdira.adb: Remove use of 'Unrestricted_Access.\n+\n 2010-06-22  Robert Dewar  <dewar@adacore.com>\n \n \t* freeze.adb: Minor reformatting"}, {"sha": "ca81ba518958dc5889304116af0909e6671b993d", "filename": "gcc/ada/a-nudira.adb", "status": "modified", "additions": 36, "deletions": 50, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bebf0e989ac6a6be39d1f14693fd011c2ce624b/gcc%2Fada%2Fa-nudira.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bebf0e989ac6a6be39d1f14693fd011c2ce624b/gcc%2Fada%2Fa-nudira.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-nudira.adb?ref=9bebf0e989ac6a6be39d1f14693fd011c2ce624b", "patch": "@@ -29,80 +29,66 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with System.Random_Numbers; use System.Random_Numbers;\n-\n package body Ada.Numerics.Discrete_Random is\n \n-   -------------------------\n-   -- Implementation Note --\n-   -------------------------\n-\n-   --  The design of this spec is a bit awkward, as a result of Ada 95 not\n-   --  permitting in-out parameters for function formals (most naturally\n-   --  Generator values would be passed this way). In pure Ada 95, the only\n-   --  solution would be to add a self-referential component to the generator\n-   --  allowing access to the generator object from inside the function. This\n-   --  would work because the generator is limited, which prevents any copy.\n+   package SRN renames System.Random_Numbers;\n+   use SRN;\n \n-   --  This is a bit heavy, so what we do is to use Unrestricted_Access to\n-   --  get a pointer to the state in the passed Generator. This works because\n-   --  Generator is a limited type and will thus always be passed by reference.\n+   -----------\n+   -- Image --\n+   -----------\n \n-   subtype Rep_Generator is System.Random_Numbers.Generator;\n-   subtype Rep_State is System.Random_Numbers.State;\n+   function Image (Of_State : State) return String is\n+   begin\n+      return Image (SRN.State (Of_State));\n+   end Image;\n \n-   function Rep_Random is\n-      new Random_Discrete (Result_Subtype, Result_Subtype'First);\n+   ------------\n+   -- Random --\n+   ------------\n \n    function Random (Gen : Generator) return Result_Subtype is\n+      function Random is\n+        new SRN.Random_Discrete (Result_Subtype, Result_Subtype'First);\n    begin\n-      return Rep_Random (Gen.Rep);\n+      return Random (SRN.Generator (Gen));\n    end Random;\n \n-   procedure Reset\n-     (Gen       : Generator;\n-      Initiator : Integer)\n-   is\n-      G : Rep_Generator renames Gen.Rep'Unrestricted_Access.all;\n-   begin\n-      Reset (G, Initiator);\n-   end Reset;\n+   -----------\n+   -- Reset --\n+   -----------\n \n    procedure Reset (Gen : Generator) is\n-      G : Rep_Generator renames Gen.Rep'Unrestricted_Access.all;\n    begin\n-      Reset (G);\n+      Reset (SRN.Generator (Gen));\n    end Reset;\n \n-   procedure Save\n-     (Gen        : Generator;\n-      To_State   : out State)\n-   is\n+   procedure Reset (Gen : Generator; Initiator : Integer) is\n    begin\n-      Save (Gen.Rep, State (To_State));\n-   end Save;\n+      Reset (SRN.Generator (Gen), Initiator);\n+   end Reset;\n \n-   procedure Reset\n-     (Gen        : Generator;\n-      From_State : State)\n-   is\n-      G : Rep_Generator renames Gen.Rep'Unrestricted_Access.all;\n+   procedure Reset (Gen : Generator; From_State : State) is\n    begin\n-      Reset (G, From_State);\n+      Reset (SRN.Generator (Gen), SRN.State (From_State));\n    end Reset;\n \n-   function Image (Of_State : State)  return String is\n+   ----------\n+   -- Save --\n+   ----------\n+\n+   procedure Save (Gen : Generator; To_State   : out State) is\n    begin\n-      return Image (Rep_State (Of_State));\n-   end Image;\n+      Save (SRN.Generator (Gen), SRN.State (To_State));\n+   end Save;\n+\n+   -----------\n+   -- Value --\n+   -----------\n \n    function Value (Coded_State : String) return State is\n-      G : Generator;\n-      S : Rep_State;\n    begin\n-      Reset (G.Rep, Coded_State);\n-      System.Random_Numbers.Save (G.Rep, S);\n-      return State (S);\n+      return State (SRN.State'(Value (Coded_State)));\n    end Value;\n \n end Ada.Numerics.Discrete_Random;"}, {"sha": "385f33619f3bfe343ae34fc37b24089972596d4b", "filename": "gcc/ada/a-nudira.ads", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bebf0e989ac6a6be39d1f14693fd011c2ce624b/gcc%2Fada%2Fa-nudira.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bebf0e989ac6a6be39d1f14693fd011c2ce624b/gcc%2Fada%2Fa-nudira.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-nudira.ads?ref=9bebf0e989ac6a6be39d1f14693fd011c2ce624b", "patch": "@@ -66,9 +66,7 @@ package Ada.Numerics.Discrete_Random is\n \n private\n \n-   type Generator is limited record\n-      Rep : System.Random_Numbers.Generator;\n-   end record;\n+   type Generator is new System.Random_Numbers.Generator;\n \n    type State is new System.Random_Numbers.State;\n "}, {"sha": "2c6fbc47f6da2045f249d128cbd919c2e89964a1", "filename": "gcc/ada/a-nuflra.adb", "status": "modified", "additions": 22, "deletions": 44, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bebf0e989ac6a6be39d1f14693fd011c2ce624b/gcc%2Fada%2Fa-nuflra.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bebf0e989ac6a6be39d1f14693fd011c2ce624b/gcc%2Fada%2Fa-nuflra.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-nuflra.adb?ref=9bebf0e989ac6a6be39d1f14693fd011c2ce624b", "patch": "@@ -29,65 +29,52 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Interfaces; use Interfaces;\n-\n-with System.Random_Numbers; use System.Random_Numbers;\n-\n package body Ada.Numerics.Float_Random is\n \n-   -------------------------\n-   -- Implementation Note --\n-   -------------------------\n+   package SRN renames System.Random_Numbers;\n+   use SRN;\n \n-   --  The design of this spec is a bit awkward, as a result of Ada 95 not\n-   --  permitting in-out parameters for function formals (most naturally\n-   --  Generator values would be passed this way). In pure Ada 95, the only\n-   --  solution would be to add a self-referential component to the generator\n-   --  allowing access to the generator object from inside the function. This\n-   --  would work because the generator is limited, which prevents any copy.\n-\n-   --  This is a bit heavy, so what we do is to use Unrestricted_Access to\n-   --  get a pointer to the state in the passed Generator. This works because\n-   --  Generator is a limited type and will thus always be passed by reference.\n+   -----------\n+   -- Image --\n+   -----------\n \n-   subtype Rep_Generator is System.Random_Numbers.Generator;\n-   subtype Rep_State is System.Random_Numbers.State;\n+   function Image (Of_State : State) return String is\n+   begin\n+      return Image (SRN.State (Of_State));\n+   end Image;\n \n    ------------\n    -- Random --\n    ------------\n \n    function Random (Gen : Generator) return Uniformly_Distributed is\n    begin\n-      return Random (Gen.Rep);\n+      return Random (SRN.Generator (Gen));\n    end Random;\n \n    -----------\n    -- Reset --\n    -----------\n \n-   --  Version that works from given initiator value\n+   --  Version that works from calendar\n \n-   procedure Reset (Gen : Generator; Initiator : Integer) is\n-      G : Rep_Generator renames Gen.Rep'Unrestricted_Access.all;\n+   procedure Reset (Gen : Generator) is\n    begin\n-      Reset (G, Integer_32 (Initiator));\n+      Reset (SRN.Generator (Gen));\n    end Reset;\n \n-   --  Version that works from calendar\n+   --  Version that works from given initiator value\n \n-   procedure Reset (Gen : Generator) is\n-      G : Rep_Generator renames Gen.Rep'Unrestricted_Access.all;\n+   procedure Reset (Gen : Generator; Initiator : Integer) is\n    begin\n-      Reset (G);\n+      Reset (SRN.Generator (Gen), Initiator);\n    end Reset;\n \n    --  Version that works from specific saved state\n \n    procedure Reset (Gen : Generator; From_State : State) is\n-      G : Rep_Generator renames Gen.Rep'Unrestricted_Access.all;\n    begin\n-      Reset (G, From_State);\n+      Reset (SRN.Generator (Gen), From_State);\n    end Reset;\n \n    ----------\n@@ -96,28 +83,19 @@ package body Ada.Numerics.Float_Random is\n \n    procedure Save  (Gen : Generator; To_State : out State) is\n    begin\n-      Save (Gen.Rep, State (To_State));\n+      Save (SRN.Generator (Gen), To_State);\n    end Save;\n \n-   -----------\n-   -- Image --\n-   -----------\n-\n-   function Image (Of_State : State) return String is\n-   begin\n-      return Image (Rep_State (Of_State));\n-   end Image;\n-\n    -----------\n    -- Value --\n    -----------\n \n    function Value (Coded_State : String) return State is\n-      G : Generator;\n-      S : Rep_State;\n+      G : SRN.Generator;\n+      S : SRN.State;\n    begin\n-      Reset (G.Rep, Coded_State);\n-      System.Random_Numbers.Save (G.Rep, S);\n+      Reset (G, Coded_State);\n+      Save (G, S);\n       return State (S);\n    end Value;\n "}, {"sha": "5a448a7811e66181cd5afbc6ba4a6b6edddebdfb", "filename": "gcc/ada/a-nuflra.ads", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bebf0e989ac6a6be39d1f14693fd011c2ce624b/gcc%2Fada%2Fa-nuflra.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bebf0e989ac6a6be39d1f14693fd011c2ce624b/gcc%2Fada%2Fa-nuflra.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-nuflra.ads?ref=9bebf0e989ac6a6be39d1f14693fd011c2ce624b", "patch": "@@ -65,9 +65,7 @@ package Ada.Numerics.Float_Random is\n \n private\n \n-   type Generator is limited record\n-      Rep : System.Random_Numbers.Generator;\n-   end record;\n+   type Generator is new System.Random_Numbers.Generator;\n \n    type State is new System.Random_Numbers.State;\n "}, {"sha": "935bc5857d1e28ea739d7aa854472e0f9d0d5502", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bebf0e989ac6a6be39d1f14693fd011c2ce624b/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bebf0e989ac6a6be39d1f14693fd011c2ce624b/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=9bebf0e989ac6a6be39d1f14693fd011c2ce624b", "patch": "@@ -881,6 +881,7 @@ package body Errout is\n       Errors.Append\n         ((Text     => new String'(Msg_Buffer (1 .. Msglen)),\n           Next     => No_Error_Msg,\n+          Prev     => No_Error_Msg,\n           Sptr     => Sptr,\n           Optr     => Optr,\n           Sfile    => Get_Source_File_Index (Sptr),\n@@ -1215,6 +1216,16 @@ package body Errout is\n       F   : Error_Msg_Id;\n \n    begin\n+      --  Set Prev pointers\n+\n+      Cur := First_Error_Msg;\n+      while Cur /= No_Error_Msg loop\n+         Nxt := Errors.Table (Cur).Next;\n+         exit when Nxt = No_Error_Msg;\n+         Errors.Table (Nxt).Prev := Cur;\n+         Cur := Nxt;\n+      end loop;\n+\n       --  Eliminate any duplicated error messages from the list. This is\n       --  done after the fact to avoid problems with Change_Error_Text.\n \n@@ -1239,11 +1250,28 @@ package body Errout is\n       while Cur /= No_Error_Msg loop\n          if not Errors.Table (Cur).Deleted\n            and then Warning_Specifically_Suppressed\n-                     (Errors.Table (Cur).Sptr,\n-                      Errors.Table (Cur).Text)\n+                      (Errors.Table (Cur).Sptr, Errors.Table (Cur).Text)\n          then\n             Errors.Table (Cur).Deleted := True;\n             Warnings_Detected := Warnings_Detected - 1;\n+\n+            --  If this is a continuation, delete previous messages\n+\n+            F := Cur;\n+            while Errors.Table (F).Msg_Cont loop\n+               F := Errors.Table (F).Prev;\n+               Errors.Table (F).Deleted := True;\n+            end loop;\n+\n+            --  Delete any following continuations\n+\n+            F := Cur;\n+            loop\n+               F := Errors.Table (F).Next;\n+               exit when F = No_Error_Msg;\n+               exit when not Errors.Table (F).Msg_Cont;\n+               Errors.Table (F).Deleted := True;\n+            end loop;\n          end if;\n \n          Cur := Errors.Table (Cur).Next;"}, {"sha": "d7628ed01ca9ca31dc535767a7ae87769764a600", "filename": "gcc/ada/erroutc.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bebf0e989ac6a6be39d1f14693fd011c2ce624b/gcc%2Fada%2Ferroutc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bebf0e989ac6a6be39d1f14693fd011c2ce624b/gcc%2Fada%2Ferroutc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.ads?ref=9bebf0e989ac6a6be39d1f14693fd011c2ce624b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -147,6 +147,11 @@ package Erroutc is\n       --  Pointer to next message in error chain. A value of No_Error_Msg\n       --  indicates the end of the chain.\n \n+      Prev : Error_Msg_Id;\n+      --  Pointer to previous message in error chain. Only set during the\n+      --  Finalize procedure. A value of No_Error_Msg indicates the first\n+      --  message in the chain.\n+\n       Sfile : Source_File_Index;\n       --  Source table index of source file. In the case of an error that\n       --  refers to a template, always references the original template"}, {"sha": "4112254bd3014bee4645e399228ae997e1d8cc66", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bebf0e989ac6a6be39d1f14693fd011c2ce624b/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bebf0e989ac6a6be39d1f14693fd011c2ce624b/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=9bebf0e989ac6a6be39d1f14693fd011c2ce624b", "patch": "@@ -6905,12 +6905,39 @@ package body Exp_Ch4 is\n \n       if Is_VMS_Operator (Entity (N)) then\n          declare\n-            LI : constant Entity_Id := RTE (RE_Unsigned_64);\n+            Rtyp : Entity_Id;\n+            Utyp : Entity_Id;\n+\n          begin\n+            --  If this is a derived type, retrieve original VMS type so that\n+            --  the proper sized type is used for intermediate values.\n+\n+            if Is_Derived_Type (Typ) then\n+               Rtyp := First_Subtype (Etype (Typ));\n+            else\n+               Rtyp := Typ;\n+            end if;\n+\n+            --  The proper unsigned type must have a size compatible with\n+            --  the operand, to prevent misalignment..\n+\n+            if RM_Size (Rtyp) <= 8 then\n+               Utyp := RTE (RE_Unsigned_8);\n+\n+            elsif RM_Size (Rtyp) <= 16 then\n+               Utyp := RTE (RE_Unsigned_16);\n+\n+            elsif RM_Size (Rtyp) = RM_Size (Standard_Unsigned) then\n+               Utyp := Typ;\n+\n+            else\n+               Utyp := RTE (RE_Long_Long_Unsigned);\n+            end if;\n+\n             Rewrite (N,\n               Unchecked_Convert_To (Typ,\n-                (Make_Op_Not (Loc,\n-                   Right_Opnd => Unchecked_Convert_To (LI, Right_Opnd (N))))));\n+                Make_Op_Not (Loc,\n+                  Unchecked_Convert_To (Utyp, Right_Opnd (N)))));\n             Analyze_And_Resolve (N, Typ);\n             return;\n          end;"}, {"sha": "f5fd4dce60d85aa4fdbf7614730c12566aee6b89", "filename": "gcc/ada/g-mbdira.adb", "status": "modified", "additions": 12, "deletions": 30, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bebf0e989ac6a6be39d1f14693fd011c2ce624b/gcc%2Fada%2Fg-mbdira.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bebf0e989ac6a6be39d1f14693fd011c2ce624b/gcc%2Fada%2Fg-mbdira.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-mbdira.adb?ref=9bebf0e989ac6a6be39d1f14693fd011c2ce624b", "patch": "@@ -35,25 +35,8 @@ with Interfaces; use Interfaces;\n \n package body GNAT.MBBS_Discrete_Random is\n \n-   -------------------------\n-   -- Implementation Note --\n-   -------------------------\n-\n-   --  The design of this spec is a bit awkward, as a result of Ada 95 not\n-   --  permitting in-out parameters for function formals (most naturally\n-   --  Generator values would be passed this way). In pure Ada 95, the only\n-   --  solution would be to add a self-referential component to the generator\n-   --  allowing access to the generator object from inside the function. This\n-   --  would work because the generator is limited, which prevents any copy.\n-\n-   --  This is a bit heavy, so what we do is to use Unrestricted_Access to\n-   --  get a pointer to the state in the passed Generator. This works because\n-   --  Generator is a limited type and will thus always be passed by reference.\n-\n    package Calendar renames Ada.Calendar;\n \n-   type Pointer is access all State;\n-\n    Fits_In_32_Bits : constant Boolean :=\n                        Rst'Size < 31\n                          or else (Rst'Size = 31\n@@ -109,7 +92,7 @@ package body GNAT.MBBS_Discrete_Random is\n    ------------\n \n    function Random (Gen : Generator) return Rst is\n-      Genp : constant Pointer := Gen.Gen_State'Unrestricted_Access;\n+      S    : State renames Gen.Writable.Self.Gen_State;\n       Temp : Int;\n       TF   : Flt;\n \n@@ -124,21 +107,21 @@ package body GNAT.MBBS_Discrete_Random is\n \n       --  Continue with computation if non-flat range\n \n-      Genp.X1 := Square_Mod_N (Genp.X1, Genp.P);\n-      Genp.X2 := Square_Mod_N (Genp.X2, Genp.Q);\n-      Temp := Genp.X2 - Genp.X1;\n+      S.X1 := Square_Mod_N (S.X1, S.P);\n+      S.X2 := Square_Mod_N (S.X2, S.Q);\n+      Temp := S.X2 - S.X1;\n \n       --  Following duplication is not an error, it is a loop unwinding!\n \n       if Temp < 0 then\n-         Temp := Temp + Genp.Q;\n+         Temp := Temp + S.Q;\n       end if;\n \n       if Temp < 0 then\n-         Temp := Temp + Genp.Q;\n+         Temp := Temp + S.Q;\n       end if;\n \n-      TF := Offs + (Flt (Temp) * Flt (Genp.P) + Flt (Genp.X1)) * Genp.Scl;\n+      TF := Offs + (Flt (Temp) * Flt (S.P) + Flt (S.X1)) * S.Scl;\n \n       --  Pathological, but there do exist cases where the rounding implicit\n       --  in calculating the scale factor will cause rounding to 'Last + 1.\n@@ -160,7 +143,7 @@ package body GNAT.MBBS_Discrete_Random is\n    -----------\n \n    procedure Reset (Gen : Generator; Initiator : Integer) is\n-      Genp   : constant Pointer := Gen.Gen_State'Unrestricted_Access;\n+      S      : State renames Gen.Writable.Self.Gen_State;\n       X1, X2 : Int;\n \n    begin\n@@ -174,7 +157,7 @@ package body GNAT.MBBS_Discrete_Random is\n \n       --  Eliminate effects of small Initiators\n \n-      Genp.all :=\n+      S :=\n         (X1  => X1,\n          X2  => X2,\n          P   => K1,\n@@ -188,7 +171,7 @@ package body GNAT.MBBS_Discrete_Random is\n    -----------\n \n    procedure Reset (Gen : Generator) is\n-      Genp : constant Pointer       := Gen.Gen_State'Unrestricted_Access;\n+      S    : State renames Gen.Writable.Self.Gen_State;\n       Now  : constant Calendar.Time := Calendar.Clock;\n       X1   : Int;\n       X2   : Int;\n@@ -210,7 +193,7 @@ package body GNAT.MBBS_Discrete_Random is\n          X2 := Square_Mod_N (X2, K2);\n       end loop;\n \n-      Genp.all :=\n+      S :=\n         (X1  => X1,\n          X2  => X2,\n          P   => K1,\n@@ -225,9 +208,8 @@ package body GNAT.MBBS_Discrete_Random is\n    -----------\n \n    procedure Reset (Gen : Generator; From_State : State) is\n-      Genp : constant Pointer := Gen.Gen_State'Unrestricted_Access;\n    begin\n-      Genp.all := From_State;\n+      Gen.Writable.Self.Gen_State := From_State;\n    end Reset;\n \n    ----------"}, {"sha": "c415a24cfcf2882afa81ff3da3b12d43caff02b7", "filename": "gcc/ada/g-mbdira.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bebf0e989ac6a6be39d1f14693fd011c2ce624b/gcc%2Fada%2Fg-mbdira.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bebf0e989ac6a6be39d1f14693fd011c2ce624b/gcc%2Fada%2Fg-mbdira.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-mbdira.ads?ref=9bebf0e989ac6a6be39d1f14693fd011c2ce624b", "patch": "@@ -111,7 +111,12 @@ private\n       Scl : Flt := Scal;\n    end record;\n \n+   type Writable_Access (Self : access Generator) is limited null record;\n+   --  Auxiliary type to make Generator a self-referential type\n+\n    type Generator is limited record\n+      Writable  : Writable_Access (Generator'Access);\n+      --  This self reference allows functions to modify Generator arguments\n       Gen_State : State;\n    end record;\n "}, {"sha": "5065910eb39e59e86b42c1dc7b6489996c0be544", "filename": "gcc/ada/s-rannum.adb", "status": "modified", "additions": 37, "deletions": 49, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bebf0e989ac6a6be39d1f14693fd011c2ce624b/gcc%2Fada%2Fs-rannum.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bebf0e989ac6a6be39d1f14693fd011c2ce624b/gcc%2Fada%2Fs-rannum.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-rannum.adb?ref=9bebf0e989ac6a6be39d1f14693fd011c2ce624b", "patch": "@@ -95,21 +95,6 @@ use Ada;\n \n package body System.Random_Numbers is\n \n-   -------------------------\n-   -- Implementation Note --\n-   -------------------------\n-\n-   --  The design of this spec is a bit awkward, as a result of Ada 95 not\n-   --  permitting in-out parameters for function formals (most naturally\n-   --  Generator values would be passed this way). In pure Ada 95, the only\n-   --  solution would be to add a self-referential component to the generator\n-   --  allowing access to the generator object from inside the function. This\n-   --  would work because the generator is limited, which prevents any copy.\n-\n-   --  This is a bit heavy, so what we do is to use Unrestricted_Access to\n-   --  get a pointer to the state in the passed Generator. This works because\n-   --  Generator is a limited type and will thus always be passed by reference.\n-\n    Y2K : constant Calendar.Time :=\n            Calendar.Time_Of\n              (Year => 2000, Month => 1, Day => 1, Seconds => 0.0);\n@@ -168,7 +153,7 @@ package body System.Random_Numbers is\n    -- Local Subprograms --\n    -----------------------\n \n-   procedure Init (Gen : out Generator; Initiator : Unsigned_32);\n+   procedure Init (Gen : Generator; Initiator : Unsigned_32);\n    --  Perform a default initialization of the state of Gen. The resulting\n    --  state is identical for identical values of Initiator.\n \n@@ -192,7 +177,7 @@ package body System.Random_Numbers is\n    ------------\n \n    function Random (Gen : Generator) return Unsigned_32 is\n-      G : Generator renames Gen'Unrestricted_Access.all;\n+      G : Generator renames Gen.Writable.Self.all;\n       Y : State_Val;\n       I : Integer;      --  should avoid use of identifier I ???\n \n@@ -498,23 +483,23 @@ package body System.Random_Numbers is\n    -- Reset --\n    -----------\n \n-   procedure Reset (Gen : out Generator) is\n+   procedure Reset (Gen : Generator) is\n       X : constant Unsigned_32 := Unsigned_32 ((Calendar.Clock - Y2K) * 64.0);\n    begin\n       Init (Gen, X);\n    end Reset;\n \n-   procedure Reset (Gen : out Generator; Initiator : Integer_32) is\n+   procedure Reset (Gen : Generator; Initiator : Integer_32) is\n    begin\n       Init (Gen, To_Unsigned (Initiator));\n    end Reset;\n \n-   procedure Reset (Gen : out Generator; Initiator : Unsigned_32) is\n+   procedure Reset (Gen : Generator; Initiator : Unsigned_32) is\n    begin\n       Init (Gen, Initiator);\n    end Reset;\n \n-   procedure Reset (Gen : out Generator; Initiator : Integer) is\n+   procedure Reset (Gen : Generator; Initiator : Integer) is\n    begin\n       pragma Warnings (Off, \"condition is always *\");\n       --  This is probably an unnecessary precaution against future change, but\n@@ -539,27 +524,27 @@ package body System.Random_Numbers is\n       pragma Warnings (On, \"condition is always *\");\n    end Reset;\n \n-   procedure Reset (Gen : out Generator; Initiator : Initialization_Vector) is\n+   procedure Reset (Gen : Generator; Initiator : Initialization_Vector) is\n+      G    : Generator renames Gen.Writable.Self.all;\n       I, J : Integer;\n \n    begin\n-      Init (Gen, Seed1);\n+      Init (G, Seed1);\n       I := 1;\n       J := 0;\n \n       if Initiator'Length > 0 then\n          for K in reverse 1 .. Integer'Max (N, Initiator'Length) loop\n-            Gen.S (I) :=\n-              (Gen.S (I)\n-               xor ((Gen.S (I - 1) xor Shift_Right (Gen.S (I - 1), 30))\n-                    * Mult1))\n+            G.S (I) :=\n+              (G.S (I) xor ((G.S (I - 1)\n+                               xor Shift_Right (G.S (I - 1), 30)) * Mult1))\n               + Initiator (J + Initiator'First) + Unsigned_32 (J);\n \n             I := I + 1;\n             J := J + 1;\n \n             if I >= N then\n-               Gen.S (0) := Gen.S (N - 1);\n+               G.S (0) := G.S (N - 1);\n                I := 1;\n             end if;\n \n@@ -570,39 +555,42 @@ package body System.Random_Numbers is\n       end if;\n \n       for K in reverse 1 .. N - 1 loop\n-         Gen.S (I) :=\n-           (Gen.S (I) xor ((Gen.S (I - 1)\n-                            xor Shift_Right (Gen.S (I - 1), 30)) * Mult2))\n+         G.S (I) :=\n+           (G.S (I) xor ((G.S (I - 1)\n+                            xor Shift_Right (G.S (I - 1), 30)) * Mult2))\n            - Unsigned_32 (I);\n          I := I + 1;\n \n          if I >= N then\n-            Gen.S (0) := Gen.S (N - 1);\n+            G.S (0) := G.S (N - 1);\n             I := 1;\n          end if;\n       end loop;\n \n-      Gen.S (0) := Upper_Mask;\n+      G.S (0) := Upper_Mask;\n    end Reset;\n \n-   procedure Reset (Gen : out Generator; From_State : Generator) is\n+   procedure Reset (Gen : Generator; From_State : Generator) is\n+      G : Generator renames Gen.Writable.Self.all;\n    begin\n-      Gen.S := From_State.S;\n-      Gen.I := From_State.I;\n+      G.S := From_State.S;\n+      G.I := From_State.I;\n    end Reset;\n \n-   procedure Reset (Gen : out Generator; From_State : State) is\n+   procedure Reset (Gen : Generator; From_State : State) is\n+      G : Generator renames Gen.Writable.Self.all;\n    begin\n-      Gen.I := 0;\n-      Gen.S := From_State;\n+      G.I := 0;\n+      G.S := From_State;\n    end Reset;\n \n-   procedure Reset (Gen : out Generator; From_Image : String) is\n+   procedure Reset (Gen : Generator; From_Image : String) is\n+      G : Generator renames Gen.Writable.Self.all;\n    begin\n-      Gen.I := 0;\n+      G.I := 0;\n \n       for J in 0 .. N - 1 loop\n-         Gen.S (J) := Extract_Value (From_Image, J);\n+         G.S (J) := Extract_Value (From_Image, J);\n       end loop;\n    end Reset;\n \n@@ -670,17 +658,18 @@ package body System.Random_Numbers is\n    -- Init --\n    ----------\n \n-   procedure Init (Gen : out Generator; Initiator : Unsigned_32) is\n+   procedure Init (Gen : Generator; Initiator : Unsigned_32) is\n+      G : Generator renames Gen.Writable.Self.all;\n    begin\n-      Gen.S (0) := Initiator;\n+      G.S (0) := Initiator;\n \n       for I in 1 .. N - 1 loop\n-         Gen.S (I) :=\n-           Mult0 * (Gen.S (I - 1) xor Shift_Right (Gen.S (I - 1), 30)) +\n-                                                             Unsigned_32 (I);\n+         G.S (I) :=\n+           (G.S (I - 1) xor Shift_Right (G.S (I - 1), 30)) * Mult0\n+           + Unsigned_32 (I);\n       end loop;\n \n-      Gen.I := 0;\n+      G.I := 0;\n    end Init;\n \n    ------------------\n@@ -706,5 +695,4 @@ package body System.Random_Numbers is\n    begin\n       return State_Val'Value (S (Start .. Start + Image_Numeral_Length - 1));\n    end Extract_Value;\n-\n end System.Random_Numbers;"}, {"sha": "b7031d47c6f2b325721ce8500144bcbee2e74508", "filename": "gcc/ada/s-rannum.ads", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bebf0e989ac6a6be39d1f14693fd011c2ce624b/gcc%2Fada%2Fs-rannum.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bebf0e989ac6a6be39d1f14693fd011c2ce624b/gcc%2Fada%2Fs-rannum.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-rannum.ads?ref=9bebf0e989ac6a6be39d1f14693fd011c2ce624b", "patch": "@@ -88,27 +88,27 @@ package System.Random_Numbers is\n    --  in Reset).  In general, there is little point in providing more than\n    --  a certain number of values (currently 624).\n \n-   procedure Reset (Gen : out Generator);\n+   procedure Reset (Gen : Generator);\n    --  Re-initialize the state of Gen from the time of day\n \n-   procedure Reset (Gen : out Generator; Initiator : Initialization_Vector);\n-   procedure Reset (Gen : out Generator; Initiator : Interfaces.Integer_32);\n-   procedure Reset (Gen : out Generator; Initiator : Interfaces.Unsigned_32);\n-   procedure Reset (Gen : out Generator; Initiator : Integer);\n+   procedure Reset (Gen : Generator; Initiator : Initialization_Vector);\n+   procedure Reset (Gen : Generator; Initiator : Interfaces.Integer_32);\n+   procedure Reset (Gen : Generator; Initiator : Interfaces.Unsigned_32);\n+   procedure Reset (Gen : Generator; Initiator : Integer);\n    --  Re-initialize Gen based on the Initiator in various ways. Identical\n    --  values of Initiator cause identical sequences of values.\n \n-   procedure Reset (Gen : out Generator; From_State : Generator);\n+   procedure Reset (Gen : Generator; From_State : Generator);\n    --  Causes the state of Gen to be identical to that of From_State; Gen\n    --  and From_State will produce identical sequences of values subsequently.\n \n-   procedure Reset (Gen : out Generator; From_State : State);\n+   procedure Reset (Gen : Generator; From_State : State);\n    procedure Save  (Gen : Generator; To_State : out State);\n    --  The sequence\n    --     Save (Gen2, S); Reset (Gen1, S)\n    --  has the same effect as Reset (Gen2, Gen1).\n \n-   procedure Reset (Gen : out Generator; From_Image : String);\n+   procedure Reset (Gen : Generator; From_Image : String);\n    function Image (Gen : Generator) return String;\n    --  The call\n    --     Reset (Gen2, Image (Gen1))\n@@ -135,11 +135,15 @@ private\n    subtype State_Val is Interfaces.Unsigned_32;\n    type State is array (0 .. N - 1) of State_Val;\n \n+   type Writable_Access (Self : access Generator) is limited null record;\n+   --  Auxiliary type to make Generator a self-referential type\n+\n    type Generator is limited record\n-      S : State := (others => 0);\n+      Writable  : Writable_Access (Generator'Access);\n+      --  This self reference allows functions to modify Generator arguments\n+      S         : State := (others => 0);\n       --  The shift register, a circular buffer\n-\n-      I : Integer := N;\n+      I         : Integer := N;\n       --  Current starting position in shift register S (N means uninitialized)\n    end record;\n "}, {"sha": "71989ada4d2ae46a55e71d4aa15d28e2c681c422", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bebf0e989ac6a6be39d1f14693fd011c2ce624b/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bebf0e989ac6a6be39d1f14693fd011c2ce624b/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=9bebf0e989ac6a6be39d1f14693fd011c2ce624b", "patch": "@@ -1728,7 +1728,9 @@ package body Sem is\n \n       procedure Do_Unit_And_Dependents (CU : Node_Id; Item : Node_Id) is\n          Unit_Num : constant Unit_Number_Type :=\n-                      Get_Cunit_Unit_Number (CU);\n+           Get_Cunit_Unit_Number (CU);\n+         Child     : Node_Id;\n+         Parent_CU : Node_Id;\n \n          procedure Do_Withed_Units is new Walk_Withs (Do_Withed_Unit);\n \n@@ -1758,6 +1760,20 @@ package body Sem is\n \n                   if CU = Library_Unit (Main_CU) then\n                      Process_Bodies_In_Context (CU);\n+\n+                     --  If main is a child unit, examine context of parent\n+                     --  units to see if they include instantiated units.\n+\n+                     if Is_Child_Unit (Cunit_Entity (Main_Unit)) then\n+                        Child := Cunit_Entity (Main_Unit);\n+                        while Is_Child_Unit (Child) loop\n+                           Parent_CU :=\n+                             Cunit\n+                               (Get_Cunit_Entity_Unit_Number (Scope (Child)));\n+                           Process_Bodies_In_Context (Parent_CU);\n+                           Child := Scope (Child);\n+                        end loop;\n+                     end if;\n                   end if;\n \n                   Do_Action (CU, Item);"}, {"sha": "1f28f9d544f4b091b4bc9b949c21b12ba2fd4159", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bebf0e989ac6a6be39d1f14693fd011c2ce624b/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bebf0e989ac6a6be39d1f14693fd011c2ce624b/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=9bebf0e989ac6a6be39d1f14693fd011c2ce624b", "patch": "@@ -2598,7 +2598,7 @@ package body Sem_Ch12 is\n          then\n             Error_Msg_N (\"premature usage of incomplete type\", Def);\n \n-         elsif Is_Internal (Designated_Type (T)) then\n+         elsif not Is_Entity_Name (Subtype_Indication (Def)) then\n             Error_Msg_N\n               (\"only a subtype mark is allowed in a formal\", Def);\n          end if;\n@@ -10396,6 +10396,7 @@ package body Sem_Ch12 is\n    procedure Mark_Context (Inst_Decl : Node_Id; Gen_Decl : Node_Id) is\n       Inst_CU : constant Unit_Number_Type := Get_Code_Unit   (Inst_Decl);\n       Gen_CU  : constant Unit_Number_Type := Get_Source_Unit (Gen_Decl);\n+      Inst    : Entity_Id := Cunit_Entity (Inst_CU);\n       Clause  : Node_Id;\n \n    begin\n@@ -10410,10 +10411,31 @@ package body Sem_Ch12 is\n            and then  Library_Unit (Clause) = Cunit (Gen_CU)\n          then\n             Set_Withed_Body (Clause, Cunit (Gen_CU));\n+            return;\n          end if;\n \n          Next (Clause);\n       end loop;\n+\n+      --  If the with-clause for the generic unit was not found, it must\n+      --  appear in some ancestor of the current unit.\n+\n+      while Is_Child_Unit (Inst) loop\n+         Inst := Scope (Inst);\n+         Clause :=\n+           First (Context_Items (Parent (Unit_Declaration_Node (Inst))));\n+\n+         while Present (Clause) loop\n+            if Nkind (Clause) = N_With_Clause\n+              and then  Library_Unit (Clause) = Cunit (Gen_CU)\n+            then\n+               Set_Withed_Body (Clause, Cunit (Gen_CU));\n+               return;\n+            end if;\n+\n+            Next (Clause);\n+         end loop;\n+      end loop;\n    end Mark_Context;\n \n    ---------------------"}]}