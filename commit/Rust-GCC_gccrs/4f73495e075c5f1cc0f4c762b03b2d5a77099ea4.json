{"sha": "4f73495e075c5f1cc0f4c762b03b2d5a77099ea4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY3MzQ5NWUwNzVjNWYxY2MwZjRjNzYyYjAzYjJkNWE3NzA5OWVhNA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-03-28T07:34:51Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-03-28T07:34:51Z"}, "message": "rtlanal.c (rtx_addr_can_trap_p): Virtual registers cannot trap.\n\n        * rtlanal.c (rtx_addr_can_trap_p): Virtual registers cannot trap.\n        Auto-inc addresses trap only if their base register does.\n\nFrom-SVN: r40914", "tree": {"sha": "6b80be383047fa920dfb19b4071099305663ed08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b80be383047fa920dfb19b4071099305663ed08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f73495e075c5f1cc0f4c762b03b2d5a77099ea4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f73495e075c5f1cc0f4c762b03b2d5a77099ea4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f73495e075c5f1cc0f4c762b03b2d5a77099ea4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f73495e075c5f1cc0f4c762b03b2d5a77099ea4/comments", "author": null, "committer": null, "parents": [{"sha": "54590688b5cd0b11292e08a86e035b408375d4a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54590688b5cd0b11292e08a86e035b408375d4a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54590688b5cd0b11292e08a86e035b408375d4a7"}], "stats": {"total": 27, "additions": 22, "deletions": 5}, "files": [{"sha": "0b0379dee4bc324f78359e4547285b6abb23b5ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f73495e075c5f1cc0f4c762b03b2d5a77099ea4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f73495e075c5f1cc0f4c762b03b2d5a77099ea4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f73495e075c5f1cc0f4c762b03b2d5a77099ea4", "patch": "@@ -1,5 +1,8 @@\n 2001-03-27  Richard Henderson  <rth@redhat.com>\n \n+\t* rtlanal.c (rtx_addr_can_trap_p): Virtual registers cannot trap.\n+\tAuto-inc addresses trap only if their base register does.\n+\n \t* except.c (can_throw_internal): Rename from can_throw.\n \t* except.h, resource.c: Update references.\n "}, {"sha": "db8e696801024908df3fc145b5abf66d2b326ca1", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f73495e075c5f1cc0f4c762b03b2d5a77099ea4/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f73495e075c5f1cc0f4c762b03b2d5a77099ea4/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=4f73495e075c5f1cc0f4c762b03b2d5a77099ea4", "patch": "@@ -216,10 +216,16 @@ rtx_addr_can_trap_p (x)\n \n     case REG:\n       /* As in rtx_varies_p, we have to use the actual rtx, not reg number.  */\n-      return ! (x == frame_pointer_rtx || x == hard_frame_pointer_rtx\n-\t\t|| x == stack_pointer_rtx\n-\t\t/* The arg pointer varies if it is not a fixed register.  */\n-\t\t|| (x == arg_pointer_rtx && fixed_regs[ARG_POINTER_REGNUM]));\n+      if (x == frame_pointer_rtx || x == hard_frame_pointer_rtx\n+\t  || x == stack_pointer_rtx\n+\t  /* The arg pointer varies if it is not a fixed register.  */\n+\t  || (x == arg_pointer_rtx && fixed_regs[ARG_POINTER_REGNUM]))\n+\treturn 0;\n+      /* All of the virtual frame registers are stack references.  */\n+      if (REGNO (x) >= FIRST_VIRTUAL_REGISTER\n+\t  && REGNO (x) <= LAST_VIRTUAL_REGISTER)\n+\treturn 0;\n+      return 1;\n \n     case CONST:\n       return rtx_addr_can_trap_p (XEXP (x, 0));\n@@ -234,8 +240,16 @@ rtx_addr_can_trap_p (x)\n \t\t    && CONSTANT_P (XEXP (x, 1))));\n \n     case LO_SUM:\n+    case PRE_MODIFY:\n       return rtx_addr_can_trap_p (XEXP (x, 1));\n-      \n+\n+    case PRE_DEC:\n+    case PRE_INC:\n+    case POST_DEC:\n+    case POST_INC:\n+    case POST_MODIFY:\n+      return rtx_addr_can_trap_p (XEXP (x, 0));\n+\n     default:\n       break;\n     }"}]}