{"sha": "3d00045080bdf31878936a5766dbad85f8ad6efe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2QwMDA0NTA4MGJkZjMxODc4OTM2YTU3NjZkYmFkODVmOGFkNmVmZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-07-28T20:03:22Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-07-28T20:03:22Z"}, "message": "target-insns.def (atomic_test_and_set): New targetm instruction pattern.\n\ngcc/\n\t* target-insns.def (atomic_test_and_set): New targetm instruction\n\tpattern.\n\t* optabs.c (maybe_emit_atomic_test_and_set): Use it instead of\n\tHAVE_*/gen_* interface.\n\nFrom-SVN: r226325", "tree": {"sha": "ff20c002d1ff5e6b391d7f6b4bb30cc5446ac971", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff20c002d1ff5e6b391d7f6b4bb30cc5446ac971"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d00045080bdf31878936a5766dbad85f8ad6efe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d00045080bdf31878936a5766dbad85f8ad6efe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d00045080bdf31878936a5766dbad85f8ad6efe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d00045080bdf31878936a5766dbad85f8ad6efe/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2a870875df5b51ff8803dc0062fdcb02d15b364d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a870875df5b51ff8803dc0062fdcb02d15b364d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a870875df5b51ff8803dc0062fdcb02d15b364d"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "f0bbc54cdb5673249a1683705135e87b8c2d4140", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d00045080bdf31878936a5766dbad85f8ad6efe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d00045080bdf31878936a5766dbad85f8ad6efe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d00045080bdf31878936a5766dbad85f8ad6efe", "patch": "@@ -1,3 +1,10 @@\n+2015-07-28  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* target-insns.def (atomic_test_and_set): New targetm instruction\n+\tpattern.\n+\t* optabs.c (maybe_emit_atomic_test_and_set): Use it instead of\n+\tHAVE_*/gen_* interface.\n+\n 2015-07-28  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* target-insns.def (can_extend, ptr_extend): New targetm instruction"}, {"sha": "a6ca706a170add8357872cdb0f5d179d85630bbf", "filename": "gcc/optabs.c", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d00045080bdf31878936a5766dbad85f8ad6efe/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d00045080bdf31878936a5766dbad85f8ad6efe/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=3d00045080bdf31878936a5766dbad85f8ad6efe", "patch": "@@ -7258,35 +7258,30 @@ maybe_emit_compare_and_swap_exchange_loop (rtx target, rtx mem, rtx val)\n    using the atomic_test_and_set instruction pattern.  A boolean value\n    is returned from the operation, using TARGET if possible.  */\n \n-#ifndef HAVE_atomic_test_and_set\n-#define HAVE_atomic_test_and_set 0\n-#define CODE_FOR_atomic_test_and_set CODE_FOR_nothing\n-#endif\n-\n static rtx\n maybe_emit_atomic_test_and_set (rtx target, rtx mem, enum memmodel model)\n {\n   machine_mode pat_bool_mode;\n   struct expand_operand ops[3];\n \n-  if (!HAVE_atomic_test_and_set)\n+  if (!targetm.have_atomic_test_and_set ())\n     return NULL_RTX;\n \n   /* While we always get QImode from __atomic_test_and_set, we get\n      other memory modes from __sync_lock_test_and_set.  Note that we\n      use no endian adjustment here.  This matches the 4.6 behavior\n      in the Sparc backend.  */\n-  gcc_checking_assert\n-    (insn_data[CODE_FOR_atomic_test_and_set].operand[1].mode == QImode);\n+  enum insn_code icode = targetm.code_for_atomic_test_and_set;\n+  gcc_checking_assert (insn_data[icode].operand[1].mode == QImode);\n   if (GET_MODE (mem) != QImode)\n     mem = adjust_address_nv (mem, QImode, 0);\n \n-  pat_bool_mode = insn_data[CODE_FOR_atomic_test_and_set].operand[0].mode;\n+  pat_bool_mode = insn_data[icode].operand[0].mode;\n   create_output_operand (&ops[0], target, pat_bool_mode);\n   create_fixed_operand (&ops[1], mem);\n   create_integer_operand (&ops[2], model);\n \n-  if (maybe_expand_insn (CODE_FOR_atomic_test_and_set, 3, ops))\n+  if (maybe_expand_insn (icode, 3, ops))\n     return ops[0].value;\n   return NULL_RTX;\n }"}, {"sha": "d1343cde15783dab3b2a41a19accc011d5cbaeee", "filename": "gcc/target-insns.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d00045080bdf31878936a5766dbad85f8ad6efe/gcc%2Ftarget-insns.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d00045080bdf31878936a5766dbad85f8ad6efe/gcc%2Ftarget-insns.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-insns.def?ref=3d00045080bdf31878936a5766dbad85f8ad6efe", "patch": "@@ -31,6 +31,7 @@\n \n    Instructions should be documented in md.texi rather than here.  */\n DEF_TARGET_INSN (allocate_stack, (rtx x0, rtx x1))\n+DEF_TARGET_INSN (atomic_test_and_set, (rtx x0, rtx x1, rtx x2))\n DEF_TARGET_INSN (builtin_longjmp, (rtx x0))\n DEF_TARGET_INSN (builtin_setjmp_receiver, (rtx x0))\n DEF_TARGET_INSN (builtin_setjmp_setup, (rtx x0))"}]}