{"sha": "b5229628250fef5b776444daf949c14fbc3d3bbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUyMjk2MjgyNTBmZWY1Yjc3NjQ0NGRhZjk0OWMxNGZiYzNkM2JiZQ==", "commit": {"author": {"name": "John Wehle", "email": "john@feith.com", "date": "2000-01-15T20:46:21Z"}, "committer": {"name": "John Wehle", "email": "wehle@gcc.gnu.org", "date": "2000-01-15T20:46:21Z"}, "message": "gcse.c (insert_insn_end_bb): Use emit_block_insn_before instead of emit_insn_before.\n\n\t* gcse.c (insert_insn_end_bb): Use emit_block_insn_before\n\tinstead of emit_insn_before.  Also handle NOTE_INSN_BASIC_BLOCK\n\twhen walking backwards to find all the parameter loads when\n\tthe basic block ends in a call.\n\nFrom-SVN: r31437", "tree": {"sha": "8726e2d74e9443fd18e291026f6e44ac6f9fc436", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8726e2d74e9443fd18e291026f6e44ac6f9fc436"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5229628250fef5b776444daf949c14fbc3d3bbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5229628250fef5b776444daf949c14fbc3d3bbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5229628250fef5b776444daf949c14fbc3d3bbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5229628250fef5b776444daf949c14fbc3d3bbe/comments", "author": {"login": "jlwehle", "id": 46985578, "node_id": "MDQ6VXNlcjQ2OTg1NTc4", "avatar_url": "https://avatars.githubusercontent.com/u/46985578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlwehle", "html_url": "https://github.com/jlwehle", "followers_url": "https://api.github.com/users/jlwehle/followers", "following_url": "https://api.github.com/users/jlwehle/following{/other_user}", "gists_url": "https://api.github.com/users/jlwehle/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlwehle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlwehle/subscriptions", "organizations_url": "https://api.github.com/users/jlwehle/orgs", "repos_url": "https://api.github.com/users/jlwehle/repos", "events_url": "https://api.github.com/users/jlwehle/events{/privacy}", "received_events_url": "https://api.github.com/users/jlwehle/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8430ac57f2728299c0c9b3fc8bba78548815c8dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8430ac57f2728299c0c9b3fc8bba78548815c8dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8430ac57f2728299c0c9b3fc8bba78548815c8dd"}], "stats": {"total": 31, "additions": 15, "deletions": 16}, "files": [{"sha": "3041ab04f49bb4f49cdc073079d124a9a8538840", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5229628250fef5b776444daf949c14fbc3d3bbe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5229628250fef5b776444daf949c14fbc3d3bbe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5229628250fef5b776444daf949c14fbc3d3bbe", "patch": "@@ -1,3 +1,10 @@\n+Sat Jan 15 15:41:14 EST 2000  John Wehle  (john@feith.com)\n+\n+\t* gcse.c (insert_insn_end_bb): Use emit_block_insn_before\n+\tinstead of emit_insn_before.  Also handle NOTE_INSN_BASIC_BLOCK\n+\twhen walking backwards to find all the parameter loads when\n+\tthe basic block ends in a call.\n+\n 2000-01-15  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n \t* loop.c (this_loop_info): Delete."}, {"sha": "a61463d592983d192577d48a72a00b44feb9e926", "filename": "gcc/gcse.c", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5229628250fef5b776444daf949c14fbc3d3bbe/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5229628250fef5b776444daf949c14fbc3d3bbe/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=b5229628250fef5b776444daf949c14fbc3d3bbe", "patch": "@@ -4416,9 +4416,7 @@ insert_insn_end_bb (expr, bb, pre)\n \t}\n #endif\n       /* FIXME: What if something in cc0/jump uses value set in new insn?  */\n-      new_insn = emit_insn_before (pat, insn);\n-      if (BLOCK_HEAD (bb) == insn)\n-\tBLOCK_HEAD (bb) = new_insn;\n+      new_insn = emit_block_insn_before (pat, insn, BASIC_BLOCK (bb));\n     }\n   /* Likewise if the last insn is a call, as will happen in the presence\n      of exception handling.  */\n@@ -4478,19 +4476,13 @@ insert_insn_end_bb (expr, bb, pre)\n \t stopped on the head of the block, which could be a CODE_LABEL.\n \t If we inserted before the CODE_LABEL, then we would be putting\n \t the insn in the wrong basic block.  In that case, put the insn\n-\t after the CODE_LABEL.\n-\n-\t ?!? Do we need to account for NOTE_INSN_BASIC_BLOCK here?  */\n-      if (GET_CODE (insn) != CODE_LABEL)\n-\t{\n-\t  new_insn = emit_insn_before (pat, insn);\n-\t  if (BLOCK_HEAD (bb) == insn)\n-\t    BLOCK_HEAD (bb) = new_insn;\n-\t}\n-      else\n-\t{\n-\t  new_insn = emit_insn_after (pat, insn);\n-\t}\n+\t after the CODE_LABEL.  Also, respect NOTE_INSN_BASIC_BLOCK.  */\n+      if (GET_CODE (insn) == CODE_LABEL)\n+\tinsn = NEXT_INSN (insn);\n+      if (GET_CODE (insn) == NOTE\n+\t  && NOTE_LINE_NUMBER (insn) == NOTE_INSN_BASIC_BLOCK)\n+\tinsn = NEXT_INSN (insn);\n+      new_insn = emit_block_insn_before (pat, insn, BASIC_BLOCK (bb));\n     }\n   else\n     {"}]}