{"sha": "0d17b70a0a09f15f0465de7d8717d5eba8d224d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQxN2I3MGEwYTA5ZjE1ZjA0NjVkZTdkODcxN2Q1ZWJhOGQyMjRkMg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-10-02T13:11:12Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-10-02T13:11:12Z"}, "message": "re PR middle-end/37713 (ice for legal code with -O3 on 20080926)\n\n2008-10-02  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/37713\n\t* tree-ssa.c (useless_type_conversion_p_1): For COMPLEX_TYPE\n\tand VECTOR_TYPE recurse with useless_type_conversion_p which\n\tproperly handles void pointer conversion.\n \n\t* gcc.c-torture/compile/pr37713.c: New testcase.\n\nFrom-SVN: r140832", "tree": {"sha": "9867bc513626917fe695346fc25c27c99428db23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9867bc513626917fe695346fc25c27c99428db23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d17b70a0a09f15f0465de7d8717d5eba8d224d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d17b70a0a09f15f0465de7d8717d5eba8d224d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d17b70a0a09f15f0465de7d8717d5eba8d224d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d17b70a0a09f15f0465de7d8717d5eba8d224d2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "068450d0454b04398fdb5763ac182fe2c0582e5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/068450d0454b04398fdb5763ac182fe2c0582e5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/068450d0454b04398fdb5763ac182fe2c0582e5a"}], "stats": {"total": 30, "additions": 26, "deletions": 4}, "files": [{"sha": "e46778d7be16c79d7cfd7f512eb19caf055d68ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d17b70a0a09f15f0465de7d8717d5eba8d224d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d17b70a0a09f15f0465de7d8717d5eba8d224d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d17b70a0a09f15f0465de7d8717d5eba8d224d2", "patch": "@@ -1,3 +1,10 @@\n+2008-10-02  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/37713\n+\t* tree-ssa.c (useless_type_conversion_p_1): For COMPLEX_TYPE\n+\tand VECTOR_TYPE recurse with useless_type_conversion_p which\n+\tproperly handles void pointer conversion.\n+\n 2008-10-02  Danny Smith  <dannysmith@users.sourceforge.net>  \n \n \tPR target/37528"}, {"sha": "b19e9463a52736fe4608a0c5e6a5b68eb4b060ea", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d17b70a0a09f15f0465de7d8717d5eba8d224d2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d17b70a0a09f15f0465de7d8717d5eba8d224d2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0d17b70a0a09f15f0465de7d8717d5eba8d224d2", "patch": "@@ -1,3 +1,8 @@\n+2008-10-02  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/37713\n+\t* gcc.c-torture/compile/pr37713.c: New testcase.\n+\n 2008-10-01  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \t* gcc.target/powerpc/altivec-cell-1.c: New test."}, {"sha": "04b4394dc5647043987101f6a368d6c5428f207d", "filename": "gcc/testsuite/gcc.c-torture/compile/pr37713.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d17b70a0a09f15f0465de7d8717d5eba8d224d2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37713.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d17b70a0a09f15f0465de7d8717d5eba8d224d2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37713.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37713.c?ref=0d17b70a0a09f15f0465de7d8717d5eba8d224d2", "patch": "@@ -0,0 +1,10 @@\n+void add_opush(void)\n+{\n+    unsigned char formats[] = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0xff };\n+    void *dtds[sizeof(formats)];\n+    unsigned int i;\n+    unsigned char dtd = 0x08;\n+    for (i = 0; i < sizeof(formats); i++)\n+\tdtds[i] = &dtd;\n+    sdp_seq_alloc(dtds);\n+}"}, {"sha": "c53c528745388a10368ab82feff91baa7ea0019c", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d17b70a0a09f15f0465de7d8717d5eba8d224d2/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d17b70a0a09f15f0465de7d8717d5eba8d224d2/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=0d17b70a0a09f15f0465de7d8717d5eba8d224d2", "patch": "@@ -1159,15 +1159,15 @@ useless_type_conversion_p_1 (tree outer_type, tree inner_type)\n   /* Recurse for complex types.  */\n   else if (TREE_CODE (inner_type) == COMPLEX_TYPE\n \t   && TREE_CODE (outer_type) == COMPLEX_TYPE)\n-    return useless_type_conversion_p_1 (TREE_TYPE (outer_type),\n-\t\t\t\t        TREE_TYPE (inner_type));\n+    return useless_type_conversion_p (TREE_TYPE (outer_type),\n+\t\t\t\t      TREE_TYPE (inner_type));\n \n   /* Recurse for vector types with the same number of subparts.  */\n   else if (TREE_CODE (inner_type) == VECTOR_TYPE\n \t   && TREE_CODE (outer_type) == VECTOR_TYPE\n \t   && TYPE_PRECISION (inner_type) == TYPE_PRECISION (outer_type))\n-    return useless_type_conversion_p_1 (TREE_TYPE (outer_type),\n-\t\t\t\t        TREE_TYPE (inner_type));\n+    return useless_type_conversion_p (TREE_TYPE (outer_type),\n+\t\t\t\t      TREE_TYPE (inner_type));\n \n   /* For aggregates we may need to fall back to structural equality\n      checks.  */"}]}