{"sha": "0238e6c9f27f9b61f2ebcd6193c7c725c7787562", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDIzOGU2YzlmMjdmOWI2MWYyZWJjZDYxOTNjN2M3MjVjNzc4NzU2Mg==", "commit": {"author": {"name": "Daniel Frey", "email": "d.frey@gmx.de", "date": "2010-01-18T10:41:30Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-01-18T10:41:30Z"}, "message": "functional (_Bind<_Functor(_Bound_args...)>:: operator()): \"Pass\" _Result to __call*.\n\n2010-01-18  Daniel Frey  <d.frey@gmx.de>\n\n\t* include/std/functional (_Bind<_Functor(_Bound_args...)>::\n\toperator()): \"Pass\" _Result to __call*.\n\t(_Bind<_Functor(_Bound_args...)>::__call*): Adjust, simplify.\n\nFrom-SVN: r156007", "tree": {"sha": "d64ab792fd8c76affd5f3db040d6f51e4c183776", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d64ab792fd8c76affd5f3db040d6f51e4c183776"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0238e6c9f27f9b61f2ebcd6193c7c725c7787562", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0238e6c9f27f9b61f2ebcd6193c7c725c7787562", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0238e6c9f27f9b61f2ebcd6193c7c725c7787562", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0238e6c9f27f9b61f2ebcd6193c7c725c7787562/comments", "author": {"login": "d-frey", "id": 3956325, "node_id": "MDQ6VXNlcjM5NTYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/3956325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/d-frey", "html_url": "https://github.com/d-frey", "followers_url": "https://api.github.com/users/d-frey/followers", "following_url": "https://api.github.com/users/d-frey/following{/other_user}", "gists_url": "https://api.github.com/users/d-frey/gists{/gist_id}", "starred_url": "https://api.github.com/users/d-frey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/d-frey/subscriptions", "organizations_url": "https://api.github.com/users/d-frey/orgs", "repos_url": "https://api.github.com/users/d-frey/repos", "events_url": "https://api.github.com/users/d-frey/events{/privacy}", "received_events_url": "https://api.github.com/users/d-frey/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1cfd38bea344c2742a057f23ee636c9d1ccd5bb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cfd38bea344c2742a057f23ee636c9d1ccd5bb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cfd38bea344c2742a057f23ee636c9d1ccd5bb8"}], "stats": {"total": 58, "additions": 26, "deletions": 32}, "files": [{"sha": "934e65cdb1d2538997caea940ad6a72b50ccc6a4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0238e6c9f27f9b61f2ebcd6193c7c725c7787562/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0238e6c9f27f9b61f2ebcd6193c7c725c7787562/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0238e6c9f27f9b61f2ebcd6193c7c725c7787562", "patch": "@@ -1,3 +1,9 @@\n+2010-01-18  Daniel Frey  <d.frey@gmx.de>\n+\n+\t* include/std/functional (_Bind<_Functor(_Bound_args...)>::\n+\toperator()): \"Pass\" _Result to __call*.\n+\t(_Bind<_Functor(_Bound_args...)>::__call*): Adjust, simplify.\n+\n 2010-01-18  Johannes Singler  <singler@kit.edu>\n \n \t* include/parallel/base.h (__unary_negate): Correct comment."}, {"sha": "f28490ad0447e30d2dcf658586b4b082a5327263", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 20, "deletions": 32, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0238e6c9f27f9b61f2ebcd6193c7c725c7787562/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0238e6c9f27f9b61f2ebcd6193c7c725c7787562/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=0238e6c9f27f9b61f2ebcd6193c7c725c7787562", "patch": "@@ -1092,23 +1092,17 @@ namespace std\n       tuple<_Bound_args...> _M_bound_args;\n \n       // Call unqualified\n-      template<typename... _Args, int... _Indexes>\n-        typename result_of<\n-                   _Functor(typename result_of<_Mu<_Bound_args> \n-                            (_Bound_args&, tuple<_Args...>&&)>::type...)\n-                 >::type\n+      template<typename _Result, typename... _Args, int... _Indexes>\n+        _Result\n         __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)\n         {\n           return _M_f(_Mu<_Bound_args>()\n                       (get<_Indexes>(_M_bound_args), std::move(__args))...);\n         }\n \n       // Call as const\n-      template<typename... _Args, int... _Indexes>\n-        typename result_of<\n-                   const _Functor(typename result_of<_Mu<_Bound_args> \n-                                    (const _Bound_args&, tuple<_Args...>&&)\n-                                  >::type...)>::type\n+      template<typename _Result, typename... _Args, int... _Indexes>\n+        _Result\n         __call_c(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) const\n         {\n           return _M_f(_Mu<_Bound_args>()\n@@ -1117,11 +1111,8 @@ namespace std\n \n #if 0\n       // Call as volatile\n-      template<typename... _Args, int... _Indexes>\n-        typename result_of<\n-                   volatile _Functor(typename result_of<_Mu<_Bound_args> \n-                                    (volatile _Bound_args&, tuple<_Args...>&&)\n-                                  >::type...)>::type\n+      template<typename _Result, typename... _Args, int... _Indexes>\n+        _Result\n         __call_v(tuple<_Args...>&& __args, \n \t\t _Index_tuple<_Indexes...>) volatile\n         {\n@@ -1130,12 +1121,8 @@ namespace std\n         }\n \n       // Call as const volatile\n-      template<typename... _Args, int... _Indexes>\n-        typename result_of<\n-                   const volatile _Functor(typename result_of<_Mu<_Bound_args> \n-                                    (const volatile _Bound_args&, \n-                                     tuple<_Args...>&&)\n-                                  >::type...)>::type\n+      template<typename _Result, typename... _Args, int... _Indexes>\n+        _Result\n         __call_c_v(tuple<_Args...>&& __args, \n \t\t   _Index_tuple<_Indexes...>) const volatile\n         {\n@@ -1158,8 +1145,9 @@ namespace std\n         _Result\n         operator()(_Args&&... __args)\n         {\n-          return this->__call(tuple<_Args...>(std::forward<_Args>(__args)...),\n-\t\t\t      _Bound_indexes());\n+          return this->__call<_Result>(tuple<_Args...>\n+\t\t\t\t       (std::forward<_Args>(__args)...),\n+                                       _Bound_indexes());\n         }\n \n       // Call as const\n@@ -1170,9 +1158,9 @@ namespace std\n         _Result\n         operator()(_Args&&... __args) const\n         {\n-          return this->__call_c(tuple<_Args...>\n-\t\t\t\t(std::forward<_Args>(__args)...),\n-\t\t\t\t_Bound_indexes());\n+          return this->__call_c<_Result>(tuple<_Args...>\n+                                         (std::forward<_Args>(__args)...),\n+                                         _Bound_indexes());\n         }\n \n #if 0\n@@ -1184,9 +1172,9 @@ namespace std\n         _Result\n         operator()(_Args&&... __args) volatile\n         {\n-          return this->__call_v(tuple<_Args...>\n-\t\t\t\t(std::forward<_Args>(__args)...),\n-\t\t\t\t_Bound_indexes());\n+          return this->__call_v<_Result>(tuple<_Args...>\n+                                         (std::forward<_Args>(__args)...),\n+                                         _Bound_indexes());\n         }\n \n       // Call as const volatile\n@@ -1197,9 +1185,9 @@ namespace std\n         _Result\n         operator()(_Args&&... __args) const volatile\n         {\n-          return this->__call_c_v(tuple<_Args...>\n-\t\t\t\t  (std::forward<_Args>(__args)...),\n-\t\t\t\t  _Bound_indexes());\n+          return this->__call_c_v<_Result>(tuple<_Args...>\n+                                           (std::forward<_Args>(__args)...),\n+                                           _Bound_indexes());\n         }\n #endif\n     };"}]}