{"sha": "415e62e2329a7f347ee0bb0f658daa35fa929a55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE1ZTYyZTIzMjlhN2YzNDdlZTBiYjBmNjU4ZGFhMzVmYTkyOWE1NQ==", "commit": {"author": {"name": "Thomas Fitzsimmons", "email": "fitzsim@gcc.gnu.org", "date": "2007-04-27T18:08:03Z"}, "committer": {"name": "Thomas Fitzsimmons", "email": "fitzsim@gcc.gnu.org", "date": "2007-04-27T18:08:03Z"}, "message": "[multiple changes]\n\n2007-03-16  Francis Kung  <fkung@redhat.com>\n\n\t* gnu/java/awt/peer/gtk/CairoGraphics2D.java\n\t(cairoArc): Make protected rather than private so it can be over-ridden.\n\t(cairoClip): Likewise.\n\t(cairoClosePath): Likewise.\n\t(cairoCurveTo): Likewise.\n\t(cairoDrawGlyphVector): Likewise.\n\t(cairoFill): Likewise.\n\t(cairoLineTo): Likewise.\n\t(cairoMoveTo): Likewise.\n\t(cairoNewPath): Likewise.\n\t(cairoRectangle): Likewise.\n\t(cairoResetClip): Likewise.\n\t(cairoRestore): Likewise.\n\t(cairoSave): Likewise.\n\t(cairoScale): Likewise.\n\t(cairoSetAntialias): Likewise.\n\t(cairoSetDash): Likewise.\n\t(cairoSetFillRule): Likewise.\n\t(cairoSetFont): Likewise.\n\t(cairoSetLine): Likewise.\n\t(cairoSetMatrix): Likewise.\n\t(cairoSetOperator): Likewise.\n\t(cairoSetRGBAColor): Likewise.\n\t(cairoStroke): Likewise.\n\t(drawPixels): Likewise.\n\t(init): Likewise.\n\t(setGradient): Likewise.\n\t(setPaintPixels): Likewise.\n\t(cairoDrawLine): Removed.\n\t(cairoDrawRect): Removed.\n\t(cairoFillRect): Removed.\n\t(cairoPreserveClip): Removed.\n\t(cairoRelCurveTo): Removed.\n\t(cairoRelLineTo): Removed.\n\t(cairoRelMoveTo): Removed.\n\t* gnu/java/awt/peer/gtk/ComponentGraphics.java\n\t(cairoArc): New method wrapping superclass method in locks.\n\t(cairoClip): Likewise.\n\t(cairoClosePath): Likewise.\n\t(cairoCurveTo): Likewise.\n\t(cairoDrawGlyphVector): Likewise.\n\t(cairoFill): Likewise.\n\t(cairoLineTo): Likewise.\n\t(cairoMoveTo): Likewise.\n\t(cairoNewPath): Likewise.\n\t(cairoRectangle): Likewise.\n\t(cairoResetClip): Likewise.\n\t(cairoRestore): Likewise.\n\t(cairoSave): Likewise.\n\t(cairoScale): Likewise.\n\t(cairoSetAntialias): Likewise.\n\t(cairoSetDash): Likewise.\n\t(cairoSetFillRule): Likewise.\n\t(cairoSetFont): Likewise.\n\t(cairoSetLine): Likewise.\n\t(cairoSetMatrix): Likewise.\n\t(cairoSetOperator): Likewise.\n\t(cairoSetRGBAColor): Likewise.\n\t(cairoStroke): Likewise.\n\t(disposeNative): Likewise.\n\t(drawPixels): Likewise.\n\t(init): Likewise.\n\t(setGradient): Likewise.\n\t(setPaintPixels): Likewise.\n\t(draw): Do not lock, as locking is now done in the wrapped native methods.\n\t(drawComposite): Likewise.\n\t(drawGlyphVector): Likewise.\n\t(drawImage): Likewise.\n\t(drawRenderedImage): Likewise.\n\t(fill): Likewise.\n\t(setClip): Removed.\n\t(lock): Added documentation.\n\t(unlock): Added documentation.\n\t* include/gnu_java_awt_peer_gtk_CairoGraphics2D.h: Regenerated.\n\t* include/gnu_java_awt_peer_gtk_ComponentGraphics.h: Regenerated.\n\t* lib/gnu/java/awt/peer/gtk/ComponentGraphics.class: Regenerated.\n\t* lib/gnu/java/awt/peer/gtk/CairoGraphics2D.class: Regenerated.\n\t* native/jni/gtk-peer/gnu_java_awt_peer_gtk_CairoGraphics2D.c\n\t(Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoDrawLine): Removed.\n\t(Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoDrawRect): Removed.\n\t(Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoFillRect): Removed.\n\t(Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoPreserveClip): Removed.\n\t(Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoRelCurveTo): Removed.\n\t(Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoRelLineTo): Removed.\n\t(Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoRelMoveTo): Removed.\n\n2007-04-27  Thomas Fitzsimmons  <fitzsim@redhat.com>\n\n\t* gnu/java/awt/peer/gtk/CairoGraphics2D.h: Regenerate.\n\t* gnu/java/awt/peer/gtk/ComponentGraphics.h: Regenerate.\n\nFrom-SVN: r124226", "tree": {"sha": "cd4f0a646e2da364d4212a8678f7a4479d0a0ee8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd4f0a646e2da364d4212a8678f7a4479d0a0ee8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/415e62e2329a7f347ee0bb0f658daa35fa929a55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/415e62e2329a7f347ee0bb0f658daa35fa929a55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/415e62e2329a7f347ee0bb0f658daa35fa929a55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/415e62e2329a7f347ee0bb0f658daa35fa929a55/comments", "author": null, "committer": null, "parents": [{"sha": "328647780254d7781b48f21b8344dcee3c8afb2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/328647780254d7781b48f21b8344dcee3c8afb2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/328647780254d7781b48f21b8344dcee3c8afb2c"}], "stats": {"total": 1026, "additions": 682, "deletions": 344}, "files": [{"sha": "67c1389af5e3369dca5a016b5d3ecc2d52158b97", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/415e62e2329a7f347ee0bb0f658daa35fa929a55/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/415e62e2329a7f347ee0bb0f658daa35fa929a55/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=415e62e2329a7f347ee0bb0f658daa35fa929a55", "patch": "@@ -1,3 +1,8 @@\n+2007-04-27  Thomas Fitzsimmons  <fitzsim@redhat.com>\n+\n+\t* gnu/java/awt/peer/gtk/CairoGraphics2D.h: Regenerate.\n+\t* gnu/java/awt/peer/gtk/ComponentGraphics.h: Regenerate.\n+\n 2007-04-25  Kyle Galloway  <kgallowa@redhat.com>\n \n \t* gnu/classpath/jdwp/VMIdManager.java (getObjectId): Deal with null"}, {"sha": "4877b1de2f0860099e26343e021e33e3dfde0b23", "filename": "libjava/classpath/ChangeLog", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/415e62e2329a7f347ee0bb0f658daa35fa929a55/libjava%2Fclasspath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/415e62e2329a7f347ee0bb0f658daa35fa929a55/libjava%2Fclasspath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2FChangeLog?ref=415e62e2329a7f347ee0bb0f658daa35fa929a55", "patch": "@@ -1,3 +1,91 @@\n+2007-03-16  Francis Kung  <fkung@redhat.com>\n+\n+\t* gnu/java/awt/peer/gtk/CairoGraphics2D.java\n+\t(cairoArc): Make protected rather than private so it can be over-ridden.\n+\t(cairoClip): Likewise.\n+\t(cairoClosePath): Likewise.\n+\t(cairoCurveTo): Likewise.\n+\t(cairoDrawGlyphVector): Likewise.\n+\t(cairoFill): Likewise.\n+\t(cairoLineTo): Likewise.\n+\t(cairoMoveTo): Likewise.\n+\t(cairoNewPath): Likewise.\n+\t(cairoRectangle): Likewise.\n+\t(cairoResetClip): Likewise.\n+\t(cairoRestore): Likewise.\n+\t(cairoSave): Likewise.\n+\t(cairoScale): Likewise.\n+\t(cairoSetAntialias): Likewise.\n+\t(cairoSetDash): Likewise.\n+\t(cairoSetFillRule): Likewise.\n+\t(cairoSetFont): Likewise.\n+\t(cairoSetLine): Likewise.\n+\t(cairoSetMatrix): Likewise.\n+\t(cairoSetOperator): Likewise.\n+\t(cairoSetRGBAColor): Likewise.\n+\t(cairoStroke): Likewise.\n+\t(drawPixels): Likewise.\n+\t(init): Likewise.\n+\t(setGradient): Likewise.\n+\t(setPaintPixels): Likewise.\n+\t(cairoDrawLine): Removed.\n+\t(cairoDrawRect): Removed.\n+\t(cairoFillRect): Removed.\n+\t(cairoPreserveClip): Removed.\n+\t(cairoRelCurveTo): Removed.\n+\t(cairoRelLineTo): Removed.\n+\t(cairoRelMoveTo): Removed.\n+\t* gnu/java/awt/peer/gtk/ComponentGraphics.java\n+\t(cairoArc): New method wrapping superclass method in locks.\n+\t(cairoClip): Likewise.\n+\t(cairoClosePath): Likewise.\n+\t(cairoCurveTo): Likewise.\n+\t(cairoDrawGlyphVector): Likewise.\n+\t(cairoFill): Likewise.\n+\t(cairoLineTo): Likewise.\n+\t(cairoMoveTo): Likewise.\n+\t(cairoNewPath): Likewise.\n+\t(cairoRectangle): Likewise.\n+\t(cairoResetClip): Likewise.\n+\t(cairoRestore): Likewise.\n+\t(cairoSave): Likewise.\n+\t(cairoScale): Likewise.\n+\t(cairoSetAntialias): Likewise.\n+\t(cairoSetDash): Likewise.\n+\t(cairoSetFillRule): Likewise.\n+\t(cairoSetFont): Likewise.\n+\t(cairoSetLine): Likewise.\n+\t(cairoSetMatrix): Likewise.\n+\t(cairoSetOperator): Likewise.\n+\t(cairoSetRGBAColor): Likewise.\n+\t(cairoStroke): Likewise.\n+\t(disposeNative): Likewise.\n+\t(drawPixels): Likewise.\n+\t(init): Likewise.\n+\t(setGradient): Likewise.\n+\t(setPaintPixels): Likewise.\n+\t(draw): Do not lock, as locking is now done in the wrapped native methods.\n+\t(drawComposite): Likewise.\n+\t(drawGlyphVector): Likewise.\n+\t(drawImage): Likewise.\n+\t(drawRenderedImage): Likewise.\n+\t(fill): Likewise.\n+\t(setClip): Removed.\n+\t(lock): Added documentation.\n+\t(unlock): Added documentation.\n+\t* include/gnu_java_awt_peer_gtk_CairoGraphics2D.h: Regenerated.\n+\t* include/gnu_java_awt_peer_gtk_ComponentGraphics.h: Regenerated.\n+\t* lib/gnu/java/awt/peer/gtk/ComponentGraphics.class: Regenerated.\n+\t* lib/gnu/java/awt/peer/gtk/CairoGraphics2D.class: Regenerated.\n+\t* native/jni/gtk-peer/gnu_java_awt_peer_gtk_CairoGraphics2D.c\n+\t(Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoDrawLine): Removed.\n+\t(Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoDrawRect): Removed.\n+\t(Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoFillRect): Removed.\n+\t(Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoPreserveClip): Removed.\n+\t(Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoRelCurveTo): Removed.\n+\t(Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoRelLineTo): Removed.\n+\t(Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoRelMoveTo): Removed.\n+\n 2007-04-23  Jeroen Frijters  <jeroen@frijters.net>\n \n \tPR classpath/31646:"}, {"sha": "4a6ad0082598a4217adaeb89be0d326a1e321ffb", "filename": "libjava/classpath/gnu/java/awt/peer/gtk/CairoGraphics2D.java", "status": "modified", "additions": 26, "deletions": 81, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/415e62e2329a7f347ee0bb0f658daa35fa929a55/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FCairoGraphics2D.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/415e62e2329a7f347ee0bb0f658daa35fa929a55/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FCairoGraphics2D.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FCairoGraphics2D.java?ref=415e62e2329a7f347ee0bb0f658daa35fa929a55", "patch": "@@ -302,7 +302,7 @@ public void dispose()\n    * Allocate the cairographics2d structure and set the cairo_t pointer in it.\n    * @param pointer - a cairo_t pointer, casted to a long.\n    */\n-  private native long init(long pointer);\n+  protected native long init(long pointer);\n \n   /**\n    * These are declared abstract as there may be context-specific issues.\n@@ -335,56 +335,56 @@ protected abstract void copyAreaImpl(int x, int y,\n    * @param stride - stride of the array width\n    * @param i2u - affine transform array\n    */\n-  private native void drawPixels(long pointer, int[] pixels, int w, int h,\n+  protected native void drawPixels(long pointer, int[] pixels, int w, int h,\n                                  int stride, double[] i2u, double alpha,\n                                  int interpolation);\n \n-  private native void setGradient(long pointer, double x1, double y1,\n+  protected native void setGradient(long pointer, double x1, double y1,\n                                   double x2, double y2,\n                                   int r1, int g1, int b1, int a1, int r2,\n                                   int g2, int b2, int a2, boolean cyclic);\n   \n-  private native void setPaintPixels(long pointer, int[] pixels, int w,\n+  protected native void setPaintPixels(long pointer, int[] pixels, int w,\n                                        int h, int stride, boolean repeat,\n                                        int x, int y);\n \n   /**\n    * Set the current transform matrix\n    */\n-  private native void cairoSetMatrix(long pointer, double[] m);\n+  protected native void cairoSetMatrix(long pointer, double[] m);\n   \n   /**\n    * Scaling method\n    */\n-  private native void cairoScale(long pointer, double x, double y);\n+  protected native void cairoScale(long pointer, double x, double y);\n \n   /**\n    * Set the compositing operator\n    */\n-  private native void cairoSetOperator(long pointer, int cairoOperator);\n+  protected native void cairoSetOperator(long pointer, int cairoOperator);\n \n   /**\n    * Sets the current color in RGBA as a 0.0-1.0 double\n    */\n-  private native void cairoSetRGBAColor(long pointer, double red, double green,\n+  protected native void cairoSetRGBAColor(long pointer, double red, double green,\n                                         double blue, double alpha);\n \n   /**\n    * Sets the current winding rule in Cairo\n    */\n-  private native void cairoSetFillRule(long pointer, int cairoFillRule);\n+  protected native void cairoSetFillRule(long pointer, int cairoFillRule);\n \n   /**\n    * Set the line style, cap, join and miter limit.\n    * Cap and join parameters are in the BasicStroke enumerations.\n    */\n-  private native void cairoSetLine(long pointer, double width, int cap,\n+  protected native void cairoSetLine(long pointer, double width, int cap,\n                                    int join, double miterLimit);\n \n   /**\n    * Set the dash style\n    */\n-  private native void cairoSetDash(long pointer, double[] dashes, int ndash,\n+  protected native void cairoSetDash(long pointer, double[] dashes, int ndash,\n                                    double offset);\n \n   /*\n@@ -397,121 +397,66 @@ native void cairoDrawGlyphVector(long pointer, GdkFontPeer font,\n   /**\n    * Set the font in cairo.\n    */\n-  private native void cairoSetFont(long pointer, GdkFontPeer font);\n-\n-  private native void cairoRelCurveTo(long pointer, double dx1, double dy1,\n-                                      double dx2, double dy2, double dx3,\n-                                      double dy3);\n+  protected native void cairoSetFont(long pointer, GdkFontPeer font);\n \n   /**\n    * Appends a rectangle to the current path\n    */\n-  private native void cairoRectangle(long pointer, double x, double y,\n+  protected native void cairoRectangle(long pointer, double x, double y,\n                                      double width, double height);\n   \n   /**\n    * Appends an arc to the current path\n    */\n-  private native void cairoArc(long pointer, double x, double y,\n+  protected native void cairoArc(long pointer, double x, double y,\n                                double radius, double angle1, double angle2);\n \n   /**\n    * Save / restore a cairo path\n    */\n-  private native void cairoSave(long pointer);\n-  private native void cairoRestore(long pointer);\n+  protected native void cairoSave(long pointer);\n+  protected native void cairoRestore(long pointer);\n \n   /**\n    * New current path\n    */\n-  private native void cairoNewPath(long pointer);\n+  protected native void cairoNewPath(long pointer);\n \n   /** \n    * Close current path\n    */\n-  private native void cairoClosePath(long pointer);\n+  protected native void cairoClosePath(long pointer);\n \n   /** moveTo */\n-  private native void cairoMoveTo(long pointer, double x, double y);\n-\n-  /** relative moveTo */\n-  private native void cairoRelMoveTo(long pointer, double dx, double dy);\n+  protected native void cairoMoveTo(long pointer, double x, double y);\n \n   /** lineTo */\n-  private native void cairoLineTo(long pointer, double x, double y);\n-\n-  /** relative lineTo */\n-  private native void cairoRelLineTo(long pointer, double dx, double dy);\n+  protected native void cairoLineTo(long pointer, double x, double y);\n \n   /** Cubic curve-to */\n-  private native void cairoCurveTo(long pointer, double x1, double y1,\n+  protected native void cairoCurveTo(long pointer, double x1, double y1,\n                                    double x2, double y2,\n                                    double x3, double y3);\n \n   /**\n    * Stroke current path\n    */\n-  private native void cairoStroke(long pointer);\n+  protected native void cairoStroke(long pointer);\n \n   /**\n    * Fill current path\n    */\n-  private native void cairoFill(long pointer, double alpha);\n+  protected native void cairoFill(long pointer, double alpha);\n \n   /** \n    * Clip current path\n    */\n-  private native void cairoClip(long pointer);\n+  protected native void cairoClip(long pointer);\n \n   /** \n    * Save clip\n    */\n-  private native void cairoPreserveClip(long pointer);\n-\n-  /** \n-   * Save clip\n-   */\n-  private native void cairoResetClip(long pointer);\n-\n-  /**\n-   * Draws a line from (x1,y1) to (x2,y2).\n-   *\n-   * @param pointer the native pointer\n-   *\n-   * @param x1 the x coordinate of the starting point\n-   * @param y1 the y coordinate of the starting point\n-   * @param x2 the x coordinate of the end point\n-   * @param y2 the y coordinate of the end point\n-   */\n-  private native void cairoDrawLine(long pointer, double x1, double y1,\n-                                    double x2, double y2);\n-\n-  /**\n-   * Draws a rectangle at starting point (x,y) and with the specified width\n-   * and height.\n-   *\n-   * @param pointer the native pointer\n-   * @param x the x coordinate of the upper left corner\n-   * @param y the y coordinate of the upper left corner\n-   * @param w the width of the rectangle\n-   * @param h the height of the rectangle\n-   */\n-  private native void cairoDrawRect(long pointer, double x, double y, double w,\n-                                    double h);\n-\n-  /**\n-   * Fills a rectangle at starting point (x,y) and with the specified width\n-   * and height.\n-   *\n-   * @param pointer the native pointer\n-   * @param x the x coordinate of the upper left corner\n-   * @param y the y coordinate of the upper left corner\n-   * @param w the width of the rectangle\n-   * @param h the height of the rectangle\n-   */\n-  private native void cairoFillRect(long pointer, double x, double y, double w,\n-                                    double h);\n-\n+  protected native void cairoResetClip(long pointer);\n \n   ///////////////////////// TRANSFORMS ///////////////////////////////////\n   /**\n@@ -2054,4 +1999,4 @@ private static Rectangle computeIntersection(int x, int y, int w, int h,\n \n     return rect;\n   }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "be82f81ecbd9d09686ed87bfc83be484ba2d1e4d", "filename": "libjava/classpath/gnu/java/awt/peer/gtk/ComponentGraphics.java", "status": "modified", "additions": 498, "deletions": 131, "changes": 629, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/415e62e2329a7f347ee0bb0f658daa35fa929a55/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FComponentGraphics.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/415e62e2329a7f347ee0bb0f658daa35fa929a55/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FComponentGraphics.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FComponentGraphics.java?ref=415e62e2329a7f347ee0bb0f658daa35fa929a55", "patch": "@@ -112,6 +112,14 @@ private ComponentGraphics(ComponentGraphics cg)\n    */\n   private native long initState(GtkComponentPeer component);\n \n+  /**\n+   * Obtain and hold a GDK lock, which is required for all drawing operations\n+   * in this graphics context (since it is backed by an X surface).\n+   * \n+   * This method causes the GDK locking behaviour to be re-entrant.  No race\n+   * conditions are caused since a ThreadLocal is used and each thread has its\n+   * own lock counter.\n+   */\n   private void lock()\n   {\n     Integer i = (Integer) hasLock.get();\n@@ -124,6 +132,9 @@ private void lock()\n       hasLock.set(Integer.valueOf(i.intValue() + 1));\n   }\n \n+  /**\n+   * Release the re-entrant GDK lock.\n+   */\n   private void unlock()\n   {\n     Integer i = (Integer) hasLock.get();\n@@ -219,160 +230,120 @@ public void copyAreaImpl(int x, int y, int width, int height, int dx, int dy)\n    */\n   public void draw(Shape s)\n   {\n-    lock();\n-    try\n-      {\n-        if (comp == null || comp instanceof AlphaComposite)\n-          super.draw(s);\n+    if (comp == null || comp instanceof AlphaComposite)\n+      super.draw(s);\n         \n-        else\n-          {\n-            createBuffer();\n+    else\n+      {\n+        createBuffer();\n             \n-            Graphics2D g2d = (Graphics2D)buffer.getGraphics();\n-            g2d.setStroke(this.getStroke());\n-            g2d.setColor(this.getColor());\n-            g2d.draw(s);\n+        Graphics2D g2d = (Graphics2D)buffer.getGraphics();\n+        g2d.setStroke(this.getStroke());\n+        g2d.setColor(this.getColor());\n+        g2d.draw(s);\n             \n-            drawComposite(s.getBounds2D(), null);\n-          }\n-      }\n-    finally\n-      {\n-\tunlock();\n+        drawComposite(s.getBounds2D(), null);\n       }\n   }\n \n   public void fill(Shape s)\n   {\n-    lock();\n-    try\n-      {\n-        if (comp == null || comp instanceof AlphaComposite)\n-          super.fill(s);\n+    if (comp == null || comp instanceof AlphaComposite)\n+      super.fill(s);\n         \n-        else\n-          {\n-            createBuffer();\n+    else\n+      {\n+        createBuffer();\n             \n-            Graphics2D g2d = (Graphics2D)buffer.getGraphics();\n-            g2d.setPaint(this.getPaint());\n-            g2d.setColor(this.getColor());\n-            g2d.fill(s);\n+        Graphics2D g2d = (Graphics2D)buffer.getGraphics();\n+        g2d.setPaint(this.getPaint());\n+        g2d.setColor(this.getColor());\n+        g2d.fill(s);\n             \n-            drawComposite(s.getBounds2D(), null);\n-          }\n-      }\n-    finally\n-      {\n-\tunlock();\n+        drawComposite(s.getBounds2D(), null);\n       }\n   }\n \n   public void drawRenderedImage(RenderedImage image, AffineTransform xform)\n   {\n-    lock();\n-    try\n-      {\n-        if (comp == null || comp instanceof AlphaComposite)\n-          super.drawRenderedImage(image, xform);\n+    if (comp == null || comp instanceof AlphaComposite)\n+      super.drawRenderedImage(image, xform);\n         \n-        else\n-          {\n-            createBuffer();\n+    else\n+      {\n+        createBuffer();\n \n-            Graphics2D g2d = (Graphics2D)buffer.getGraphics();\n-            g2d.setRenderingHints(this.getRenderingHints());\n-            g2d.drawRenderedImage(image, xform);\n+        Graphics2D g2d = (Graphics2D)buffer.getGraphics();\n+        g2d.setRenderingHints(this.getRenderingHints());\n+        g2d.drawRenderedImage(image, xform);\n             \n-            drawComposite(buffer.getRaster().getBounds(), null);\n-          }\n-      }\n-    finally\n-      {\n-\tunlock();\n+        drawComposite(buffer.getRaster().getBounds(), null);\n       }\n   }\n \n   protected boolean drawImage(Image img, AffineTransform xform,\n \t\t\t      Color bgcolor, ImageObserver obs)\n   {\n     boolean rv;\n-    lock();\n-    try\n-      {\n-        if (comp == null || comp instanceof AlphaComposite)\n-          rv = super.drawImage(img, xform, bgcolor, obs);\n+    if (comp == null || comp instanceof AlphaComposite)\n+      rv = super.drawImage(img, xform, bgcolor, obs);\n         \n-        else\n+    else\n+      {\n+        // Get buffered image of source\n+        if( !(img instanceof BufferedImage) )\n           {\n-            // Get buffered image of source\n-            if( !(img instanceof BufferedImage) )\n-              {\n-                ImageProducer source = img.getSource();\n-                if (source == null)\n-                  return false;\n-                img = Toolkit.getDefaultToolkit().createImage(source);\n-              }\n-            BufferedImage bImg = (BufferedImage) img;\n+            ImageProducer source = img.getSource();\n+            if (source == null)\n+              return false;\n+            img = Toolkit.getDefaultToolkit().createImage(source);\n+          }\n+        BufferedImage bImg = (BufferedImage) img;\n             \n-            // Find translated bounds\n-            Point2D origin = new Point2D.Double(bImg.getMinX(), bImg.getMinY());\n-            Point2D pt = new Point2D.Double(bImg.getWidth() + bImg.getMinX(),\n-                                            bImg.getHeight() + bImg.getMinY());\n-            if (xform != null)\n-              {\n-                origin = xform.transform(origin, origin);\n-                pt = xform.transform(pt, pt);\n-              }\n+        // Find translated bounds\n+        Point2D origin = new Point2D.Double(bImg.getMinX(), bImg.getMinY());\n+        Point2D pt = new Point2D.Double(bImg.getWidth() + bImg.getMinX(),\n+                                        bImg.getHeight() + bImg.getMinY());\n+        if (xform != null)\n+          {\n+            origin = xform.transform(origin, origin);\n+            pt = xform.transform(pt, pt);\n+          }\n             \n-            // Create buffer and draw image\n-            createBuffer();\n+        // Create buffer and draw image\n+        createBuffer();\n             \n-            Graphics2D g2d = (Graphics2D)buffer.getGraphics();\n-            g2d.setRenderingHints(this.getRenderingHints());\n-            g2d.drawImage(img, xform, obs);\n-\n-            // Perform compositing\n-            rv = drawComposite(new Rectangle2D.Double(origin.getX(),\n-                                                        origin.getY(),\n-                                                        pt.getX(), pt.getY()),\n-                                 obs);\n-          }\n-      }\n-    finally\n-      {\n-\tunlock();\n+        Graphics2D g2d = (Graphics2D)buffer.getGraphics();\n+        g2d.setRenderingHints(this.getRenderingHints());\n+        g2d.drawImage(img, xform, obs);\n+\n+        // Perform compositing\n+        rv = drawComposite(new Rectangle2D.Double(origin.getX(),\n+                                                  origin.getY(),\n+                                                  pt.getX(), pt.getY()),\n+                           obs);\n       }\n     return rv;\n   }\n \n   public void drawGlyphVector(GlyphVector gv, float x, float y)\n   {\n-    lock();\n-    try\n-      {\n-        if (comp == null || comp instanceof AlphaComposite)\n-          super.drawGlyphVector(gv, x, y);\n+    if (comp == null || comp instanceof AlphaComposite)\n+      super.drawGlyphVector(gv, x, y);\n         \n-        else\n-          {\n-            createBuffer();\n+    else\n+      {\n+        createBuffer();\n \n-            Graphics2D g2d = (Graphics2D)buffer.getGraphics();\n-            g2d.setPaint(this.getPaint());\n-            g2d.setStroke(this.getStroke());\n-            g2d.drawGlyphVector(gv, x, y);\n+        Graphics2D g2d = (Graphics2D)buffer.getGraphics();\n+        g2d.setPaint(this.getPaint());\n+        g2d.setStroke(this.getStroke());\n+        g2d.drawGlyphVector(gv, x, y);\n             \n-            Rectangle2D bounds = gv.getLogicalBounds();\n-            bounds = new Rectangle2D.Double(x + bounds.getX(), y + bounds.getY(),\n-                                            bounds.getWidth(), bounds.getHeight());\n-            drawComposite(bounds, null);\n-          }\n-      }\n-    finally\n-      {\n-\tunlock();\n+        Rectangle2D bounds = gv.getLogicalBounds();\n+        bounds = new Rectangle2D.Double(x + bounds.getX(), y + bounds.getY(),\n+                                        bounds.getWidth(), bounds.getHeight());\n+        drawComposite(bounds, null);\n       }\n   }\n   \n@@ -466,20 +437,6 @@ public boolean drawImage(Image img, int x, int y, int width, int height,\n     return super.drawImage(bimg, x, y, width, height, observer);\n   }\n \n-  public void setClip(Shape s)\n-  {\n-    lock();\n-    try\n-      {\n-\tsuper.setClip(s);\n-      }\n-    finally\n-      {\n-\tunlock();\n-      }\n-  }\n-\n-  \n   private boolean drawComposite(Rectangle2D bounds, ImageObserver observer)\n   {\n     // Clip source to visible areas that need updating\n@@ -507,12 +464,10 @@ private boolean drawComposite(Rectangle2D bounds, ImageObserver observer)\n     Rectangle2D.intersect(deviceBounds, this.getClipInDevSpace(), deviceBounds);\n     \n     // Get current image on the component\n-    unlock();\n     GtkImage img = grab(component);\n     Graphics gr = componentBuffer.createGraphics();\n     gr.drawImage(img, 0, 0, null);\n     gr.dispose();\n-    lock();\n     \n     BufferedImage cBuffer = componentBuffer;\n     if (!deviceBounds.equals(cBuffer.getRaster().getBounds()))\n@@ -573,5 +528,417 @@ protected ColorModel getNativeCM()\n   {\n     return GtkVolatileImage.gdkColorModel;\n   }\n+  \n+  /* --- START OVERRIDDEN NATIVE METHODS ----\n+   * All native methods in CairoGraphics2D should be overridden here and\n+   * enclosed in locks, since the cairo surface is backed by an X surface\n+   * in this graphics context and the X surface requires external locking.\n+   * \n+   * We lock everything \"just in case\", since it's difficult to know which\n+   * calls are and aren't thread-safe.  Overriding and locking the native\n+   * methods allows superclass code in CairoGraphics2D to execute properly, \n+   * without the need to override every single method.\n+   * \n+   * CAVEAT: if native code obtains a lock (using gdk_threads_enter(), not the\n+   * lock() method provided here) and then calls back into Java and one of these\n+   * methods ends up being called, we will deadlock.  The lock is only reentrant\n+   * when called via our lock() method. \n+   */\n+  @Override\n+  protected long init(long pointer)\n+  {\n+    long ret;\n+    \n+    try\n+    {\n+      lock();\n+      ret = super.init(pointer);\n+    }\n+    finally\n+    {\n+      unlock();\n+    }\n+    \n+    return ret;\n+  }\n+  \n+  @Override\n+  public void disposeNative(long pointer)\n+  {\n+    try\n+    {\n+      lock();\n+      super.disposeNative(pointer);\n+    }\n+    finally\n+    {\n+      unlock();\n+    }\n+  }\n+  \n+  @Override\n+  protected void drawPixels(long pointer, int[] pixels, int w, int h,\n+                            int stride, double[] i2u, double alpha,\n+                            int interpolation)\n+  {\n+    try\n+    {\n+      lock();\n+      super.drawPixels(pointer, pixels, w, h, stride, i2u, alpha,\n+                       interpolation);\n+    }\n+    finally\n+    {\n+      unlock();\n+    }\n+  }\n+  \n+  @Override\n+  protected void setGradient(long pointer, double x1, double y1, \n+                             double x2, double y2, \n+                             int r1, int g1, int b1, int a1,\n+                             int r2, int g2, int b2, int a2, boolean cyclic)\n+  {\n+    try\n+    {\n+      lock();\n+      super.setGradient(pointer, x1, y1, x2, y2, r1, g1, b1, a1, r2, g2, b2, a2,\n+                        cyclic);\n+    }\n+    finally\n+    {\n+      unlock();\n+    }\n+  }\n+  \n+  @Override\n+  protected void setPaintPixels(long pointer, int[] pixels, int w, int h,\n+                                int stride, boolean repeat, int x, int y)\n+  {\n+    try\n+    {\n+      lock();\n+      super.setPaintPixels(pointer, pixels, w, h, stride, repeat, x, y);\n+    }\n+    finally\n+    {\n+      unlock();\n+    }\n+  }\n+  \n+  @Override\n+  protected void cairoSetMatrix(long pointer, double[] m)\n+  {\n+    try\n+    {\n+      lock();\n+      super.cairoSetMatrix(pointer, m);\n+    }\n+    finally\n+    {\n+      unlock();\n+    }\n+  }\n+  \n+  @Override\n+  protected void cairoScale(long pointer, double x, double y)\n+  {\n+    try\n+    {\n+      lock();\n+      super.cairoScale(pointer, x, y);\n+    }\n+    finally\n+    {\n+      unlock();\n+    }\n+  }\n+  \n+  @Override\n+  protected void cairoSetOperator(long pointer, int cairoOperator)\n+  {\n+    try\n+    {\n+      lock();\n+      super.cairoSetOperator(pointer, cairoOperator);\n+    }\n+    finally\n+    {\n+      unlock();\n+    }\n+  }\n+  \n+  @Override\n+  protected void cairoSetRGBAColor(long pointer, double red, double green,\n+                                   double blue, double alpha)\n+  {\n+    try\n+    {\n+      lock();\n+      super.cairoSetRGBAColor(pointer, red, green, blue, alpha);\n+    }\n+    finally\n+    {\n+      unlock();\n+    }\n+  }\n+  \n+  @Override\n+  protected void cairoSetFillRule(long pointer, int cairoFillRule)\n+  {\n+    try\n+    {\n+      lock();\n+      super.cairoSetFillRule(pointer, cairoFillRule);\n+    }\n+    finally\n+    {\n+      unlock();\n+    }\n+  }\n+  \n+  @Override\n+  protected void cairoSetLine(long pointer, double width, int cap, int join,\n+                              double miterLimit)\n+  {\n+    try\n+    {\n+      lock();\n+      super.cairoSetLine(pointer, width, cap, join, miterLimit);\n+    }\n+    finally\n+    {\n+      unlock();\n+    }\n+  }\n+  \n+  @Override\n+  protected void cairoSetDash(long pointer, double[] dashes, int ndash, \n+                              double offset)\n+  {\n+    try\n+    {\n+      lock();\n+      super.cairoSetDash(pointer, dashes, ndash, offset);\n+    }\n+    finally\n+    {\n+      unlock();\n+    }\n+  }\n+  \n+  @Override\n+  protected void cairoDrawGlyphVector(long pointer, GdkFontPeer font,\n+                                      float x, float y, int n,\n+                                      int[] codes, float[] positions)\n+  {\n+    try\n+    {\n+      lock();\n+      super.cairoDrawGlyphVector(pointer, font, x, y, n, codes, positions);\n+    }\n+    finally\n+    {\n+      unlock();\n+    }\n+  }\n+  \n+  @Override\n+  protected void cairoSetFont(long pointer, GdkFontPeer font)\n+  {\n+    try\n+    {\n+      lock();\n+      super.cairoSetFont(pointer, font);\n+    }\n+    finally\n+    {\n+      unlock();\n+    }\n+  }\n+  \n+  @Override\n+  protected void cairoRectangle(long pointer, double x, double y,\n+                                double width, double height)\n+  {\n+    try\n+    {\n+      lock();\n+      super.cairoRectangle(pointer, x, y, width, height);\n+    }\n+    finally\n+    {\n+      unlock();\n+    }\n+  }\n+  \n+  @Override\n+  protected void cairoArc(long pointer, double x, double y, \n+                          double radius, double angle1, double angle2)\n+  {\n+    try\n+    {\n+      lock();\n+      super.cairoArc(pointer, x, y, radius, angle1, angle2);\n+    }\n+    finally\n+    {\n+      unlock();\n+    }\n+  }\n+  \n+  @Override\n+  protected void cairoSave(long pointer)\n+  {\n+    try\n+    {\n+      lock();\n+      super.cairoSave(pointer);\n+    }\n+    finally\n+    {\n+      unlock();\n+    }\n+  }\n+  \n+  @Override\n+  protected void cairoRestore(long pointer)\n+  {\n+    try\n+    {\n+      lock();\n+      super.cairoRestore(pointer);\n+    }\n+    finally\n+    {\n+      unlock();\n+    }\n+  }\n+  \n+  @Override\n+  protected void cairoNewPath(long pointer)\n+  {\n+    try\n+    {\n+      lock();\n+      super.cairoNewPath(pointer);\n+    }\n+    finally\n+    {\n+      unlock();\n+    }\n+  }\n+  \n+  @Override\n+  protected void cairoClosePath(long pointer)\n+  {\n+    try\n+    {\n+      lock();\n+      super.cairoClosePath(pointer);\n+    }\n+    finally\n+    {\n+      unlock();\n+    }\n+  }\n+  \n+  @Override\n+  protected void cairoMoveTo(long pointer, double x, double y)\n+  {\n+    try\n+    {\n+      lock();\n+      super.cairoMoveTo(pointer, x, y);\n+    }\n+    finally\n+    {\n+      unlock();\n+    }\n+  }\n+  \n+  @Override\n+  protected void cairoLineTo(long pointer, double x, double y)\n+  {\n+    try\n+    {\n+      lock();\n+      super.cairoLineTo(pointer, x, y);\n+    }\n+    finally\n+    {\n+      unlock();\n+    }\n+  }\n+  \n+  @Override\n+  protected void cairoCurveTo(long pointer, double x1, double y1, double x2,\n+                              double y2, double x3, double y3)\n+  {\n+    try\n+    {\n+      lock();\n+      super.cairoCurveTo(pointer, x1, y1, x2, y2, x3, y3);\n+    }\n+    finally\n+    {\n+      unlock();\n+    }\n+  }\n+  \n+  @Override\n+  protected void cairoStroke(long pointer)\n+  {\n+    try\n+    {\n+      lock();\n+      super.cairoStroke(pointer);\n+    }\n+    finally\n+    {\n+      unlock();\n+    }\n+  }\n+  \n+  @Override\n+  protected void cairoFill(long pointer, double alpha)\n+  {\n+    try\n+    {\n+      lock();\n+      super.cairoFill(pointer, alpha);\n+    }\n+    finally\n+    {\n+      unlock();\n+    }\n+  }\n+  \n+  @Override\n+  protected void cairoClip(long pointer)\n+  {\n+    try\n+    {\n+      lock();\n+      super.cairoClip(pointer);\n+    }\n+    finally\n+    {\n+      unlock();\n+    }\n+  }\n+  \n+  @Override\n+  protected void cairoResetClip(long pointer)\n+  {\n+    try\n+    {\n+      lock();\n+      super.cairoResetClip(pointer);\n+    }\n+    finally\n+    {\n+      unlock();\n+    }\n+  }\n }\n-"}, {"sha": "3e88d5747f7c791dc141317393169329caf387d0", "filename": "libjava/classpath/include/gnu_java_awt_peer_gtk_CairoGraphics2D.h", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/415e62e2329a7f347ee0bb0f658daa35fa929a55/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_gtk_CairoGraphics2D.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/415e62e2329a7f347ee0bb0f658daa35fa929a55/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_gtk_CairoGraphics2D.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_gtk_CairoGraphics2D.h?ref=415e62e2329a7f347ee0bb0f658daa35fa929a55", "patch": "@@ -1,10 +1,10 @@\n /* DO NOT EDIT THIS FILE - it is machine generated */\n \n+#include <jni.h>\n+\n #ifndef __gnu_java_awt_peer_gtk_CairoGraphics2D__\n #define __gnu_java_awt_peer_gtk_CairoGraphics2D__\n \n-#include <jni.h>\n-\n #ifdef __cplusplus\n extern \"C\"\n {\n@@ -24,26 +24,20 @@ JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoSetLine (\n JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoSetDash (JNIEnv *env, jobject, jlong, jdoubleArray, jint, jdouble);\n JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoDrawGlyphVector (JNIEnv *env, jobject, jlong, jobject, jfloat, jfloat, jint, jintArray, jfloatArray);\n JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoSetFont (JNIEnv *env, jobject, jlong, jobject);\n-JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoRelCurveTo (JNIEnv *env, jobject, jlong, jdouble, jdouble, jdouble, jdouble, jdouble, jdouble);\n JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoRectangle (JNIEnv *env, jobject, jlong, jdouble, jdouble, jdouble, jdouble);\n JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoArc (JNIEnv *env, jobject, jlong, jdouble, jdouble, jdouble, jdouble, jdouble);\n JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoSave (JNIEnv *env, jobject, jlong);\n JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoRestore (JNIEnv *env, jobject, jlong);\n JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoNewPath (JNIEnv *env, jobject, jlong);\n JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoClosePath (JNIEnv *env, jobject, jlong);\n JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoMoveTo (JNIEnv *env, jobject, jlong, jdouble, jdouble);\n-JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoRelMoveTo (JNIEnv *env, jobject, jlong, jdouble, jdouble);\n JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoLineTo (JNIEnv *env, jobject, jlong, jdouble, jdouble);\n-JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoRelLineTo (JNIEnv *env, jobject, jlong, jdouble, jdouble);\n JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoCurveTo (JNIEnv *env, jobject, jlong, jdouble, jdouble, jdouble, jdouble, jdouble, jdouble);\n JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoStroke (JNIEnv *env, jobject, jlong);\n JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoFill (JNIEnv *env, jobject, jlong, jdouble);\n JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoClip (JNIEnv *env, jobject, jlong);\n-JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoPreserveClip (JNIEnv *env, jobject, jlong);\n JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoResetClip (JNIEnv *env, jobject, jlong);\n-JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoDrawLine (JNIEnv *env, jobject, jlong, jdouble, jdouble, jdouble, jdouble);\n-JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoDrawRect (JNIEnv *env, jobject, jlong, jdouble, jdouble, jdouble, jdouble);\n-JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoFillRect (JNIEnv *env, jobject, jlong, jdouble, jdouble, jdouble, jdouble);\n+\n #undef gnu_java_awt_peer_gtk_CairoGraphics2D_INTERPOLATION_NEAREST\n #define gnu_java_awt_peer_gtk_CairoGraphics2D_INTERPOLATION_NEAREST 0L\n #undef gnu_java_awt_peer_gtk_CairoGraphics2D_INTERPOLATION_BILINEAR"}, {"sha": "3dd8bb431784b84c57c18116eb4e277cb681f624", "filename": "libjava/classpath/include/gnu_java_awt_peer_gtk_ComponentGraphics.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/415e62e2329a7f347ee0bb0f658daa35fa929a55/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_gtk_ComponentGraphics.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/415e62e2329a7f347ee0bb0f658daa35fa929a55/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_gtk_ComponentGraphics.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_gtk_ComponentGraphics.h?ref=415e62e2329a7f347ee0bb0f658daa35fa929a55", "patch": "@@ -1,10 +1,10 @@\n /* DO NOT EDIT THIS FILE - it is machine generated */\n \n+#include <jni.h>\n+\n #ifndef __gnu_java_awt_peer_gtk_ComponentGraphics__\n #define __gnu_java_awt_peer_gtk_ComponentGraphics__\n \n-#include <jni.h>\n-\n #ifdef __cplusplus\n extern \"C\"\n {"}, {"sha": "10383cbaaffbae502fd825c0fb64794fb84658b0", "filename": "libjava/classpath/lib/gnu/java/awt/peer/gtk/CairoGraphics2D.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/415e62e2329a7f347ee0bb0f658daa35fa929a55/libjava%2Fclasspath%2Flib%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FCairoGraphics2D.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/415e62e2329a7f347ee0bb0f658daa35fa929a55/libjava%2Fclasspath%2Flib%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FCairoGraphics2D.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FCairoGraphics2D.class?ref=415e62e2329a7f347ee0bb0f658daa35fa929a55"}, {"sha": "54e991629c5864a0daacfb86467eb03b5b545ed4", "filename": "libjava/classpath/lib/gnu/java/awt/peer/gtk/ComponentGraphics.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/415e62e2329a7f347ee0bb0f658daa35fa929a55/libjava%2Fclasspath%2Flib%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FComponentGraphics.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/415e62e2329a7f347ee0bb0f658daa35fa929a55/libjava%2Fclasspath%2Flib%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FComponentGraphics.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FComponentGraphics.class?ref=415e62e2329a7f347ee0bb0f658daa35fa929a55"}, {"sha": "b183a1bac77e27f62fffbfad6b5816f47df3ce7f", "filename": "libjava/classpath/native/jni/gtk-peer/gnu_java_awt_peer_gtk_CairoGraphics2D.c", "status": "modified", "additions": 0, "deletions": 85, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/415e62e2329a7f347ee0bb0f658daa35fa929a55/libjava%2Fclasspath%2Fnative%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_CairoGraphics2D.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/415e62e2329a7f347ee0bb0f658daa35fa929a55/libjava%2Fclasspath%2Fnative%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_CairoGraphics2D.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fnative%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_CairoGraphics2D.c?ref=415e62e2329a7f347ee0bb0f658daa35fa929a55", "patch": "@@ -608,40 +608,6 @@ Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoCurveTo\n   cairo_curve_to (gr->cr, x1, y1, x2, y2, x3, y3);\n }\n \n-JNIEXPORT void JNICALL\n-Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoRelMoveTo \n-(JNIEnv *env __attribute__((unused)), jobject obj __attribute__((unused)),\n- jlong pointer, jdouble dx, jdouble dy)\n-{\n-  struct cairographics2d *gr = JLONG_TO_PTR(struct cairographics2d, pointer);\n-  g_assert (gr != NULL);\n-\n-  cairo_rel_move_to (gr->cr, dx, dy);\n-}\n-\n-JNIEXPORT void JNICALL\n-Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoRelLineTo \n-(JNIEnv *env __attribute__((unused)), jobject obj __attribute__((unused)),\n- jlong pointer, jdouble dx, jdouble dy)\n-{\n-  struct cairographics2d *gr = JLONG_TO_PTR(struct cairographics2d, pointer);\n-  g_assert (gr != NULL);\n-\n-  cairo_rel_line_to (gr->cr, dx, dy);\n-}\n-\n-JNIEXPORT void JNICALL\n-Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoRelCurveTo \n-(JNIEnv *env __attribute__((unused)), jobject obj __attribute__((unused)),\n- jlong pointer, jdouble dx1, jdouble dy1,\n- jdouble dx2, jdouble dy2, jdouble dx3, jdouble dy3)\n-{\n-  struct cairographics2d *gr = JLONG_TO_PTR(struct cairographics2d, pointer);\n-  g_assert (gr != NULL);\n-\n-  cairo_rel_curve_to (gr->cr, dx1, dy1, dx2, dy2, dx3, dy3);\n-}\n-\n JNIEXPORT void JNICALL\n Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoRectangle \n (JNIEnv *env __attribute__((unused)), jobject obj __attribute__((unused)),\n@@ -726,57 +692,6 @@ Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoResetClip\n   cairo_reset_clip( gr->cr );\n }\n \n-JNIEXPORT void JNICALL \n-Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoPreserveClip \n-(JNIEnv *env __attribute__((unused)), jobject obj __attribute__((unused)),\n- jlong pointer)\n-{\n-  struct cairographics2d *gr = JLONG_TO_PTR(struct cairographics2d, pointer);\n-  g_assert (gr != NULL);\n-\n-  cairo_clip_preserve( gr->cr );\n-}\n-\n-JNIEXPORT void JNICALL\n-Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoDrawLine\n-(JNIEnv *env __attribute__ ((unused)), jobject obj __attribute__ ((unused)),\n- jlong pointer, jdouble x1, jdouble y1, jdouble x2, jdouble y2)\n-{\n-  struct cairographics2d *gr = JLONG_TO_PTR(struct cairographics2d, pointer);\n-  g_assert (gr != NULL);\n-\n-  cairo_new_path(gr->cr);\n-  cairo_move_to(gr->cr, x1, y1);\n-  cairo_line_to(gr->cr, x2, y2);\n-  cairo_stroke(gr->cr);\n-}\n-\n-JNIEXPORT void JNICALL\n-Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoDrawRect\n-(JNIEnv *env __attribute__ ((unused)), jobject obj __attribute__ ((unused)),\n- jlong pointer, jdouble x, jdouble y, jdouble w, jdouble h)\n-{\n-  struct cairographics2d *gr = JLONG_TO_PTR(struct cairographics2d, pointer);\n-  g_assert (gr != NULL);\n-\n-  cairo_new_path(gr->cr);\n-  cairo_rectangle(gr->cr, x, y, w, h);\n-  cairo_stroke(gr->cr);\n-}\n-\n-JNIEXPORT void JNICALL\n-Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoFillRect\n-(JNIEnv *env __attribute__ ((unused)), jobject obj __attribute__ ((unused)),\n- jlong pointer, jdouble x, jdouble y, jdouble w, jdouble h)\n-{\n-  struct cairographics2d *gr = JLONG_TO_PTR(struct cairographics2d, pointer);\n-  g_assert (gr != NULL);\n-\n-  cairo_new_path(gr->cr);\n-  cairo_rectangle(gr->cr, x, y, w, h);\n-  cairo_fill(gr->cr);\n-}\n-\n static void \n update_pattern_transform (struct cairographics2d *gr)\n {"}, {"sha": "1be46fbaf7bc0e156f494f3a54c0e1f3b9604ff0", "filename": "libjava/gnu/java/awt/peer/gtk/CairoGraphics2D.h", "status": "modified", "additions": 28, "deletions": 35, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/415e62e2329a7f347ee0bb0f658daa35fa929a55/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FCairoGraphics2D.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/415e62e2329a7f347ee0bb0f658daa35fa929a55/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FCairoGraphics2D.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FCairoGraphics2D.h?ref=415e62e2329a7f347ee0bb0f658daa35fa929a55", "patch": "@@ -88,8 +88,8 @@ class gnu::java::awt::peer::gtk::CairoGraphics2D : public ::java::awt::Graphics2\n   virtual void copy(::gnu::java::awt::peer::gtk::CairoGraphics2D *, jlong);\n   virtual void finalize();\n   virtual void dispose();\n-private:\n-  jlong init(jlong);\n+public: // actually protected\n+  virtual jlong init(jlong);\n public:\n   virtual ::java::awt::Graphics * create() = 0;\n   virtual ::java::awt::GraphicsConfiguration * getDeviceConfiguration() = 0;\n@@ -98,41 +98,34 @@ class gnu::java::awt::peer::gtk::CairoGraphics2D : public ::java::awt::Graphics2\n   virtual ::java::awt::geom::Rectangle2D * getRealBounds() = 0;\n public:\n   virtual void disposeNative(jlong);\n-private:\n-  void drawPixels(jlong, JArray< jint > *, jint, jint, jint, JArray< jdouble > *, jdouble, jint);\n-  void setGradient(jlong, jdouble, jdouble, jdouble, jdouble, jint, jint, jint, jint, jint, jint, jint, jint, jboolean);\n-  void setPaintPixels(jlong, JArray< jint > *, jint, jint, jint, jboolean, jint, jint);\n-  void cairoSetMatrix(jlong, JArray< jdouble > *);\n-  void cairoScale(jlong, jdouble, jdouble);\n-  void cairoSetOperator(jlong, jint);\n-  void cairoSetRGBAColor(jlong, jdouble, jdouble, jdouble, jdouble);\n-  void cairoSetFillRule(jlong, jint);\n-  void cairoSetLine(jlong, jdouble, jint, jint, jdouble);\n-  void cairoSetDash(jlong, JArray< jdouble > *, jint, jdouble);\n+public: // actually protected\n+  virtual void drawPixels(jlong, JArray< jint > *, jint, jint, jint, JArray< jdouble > *, jdouble, jint);\n+  virtual void setGradient(jlong, jdouble, jdouble, jdouble, jdouble, jint, jint, jint, jint, jint, jint, jint, jint, jboolean);\n+  virtual void setPaintPixels(jlong, JArray< jint > *, jint, jint, jint, jboolean, jint, jint);\n+  virtual void cairoSetMatrix(jlong, JArray< jdouble > *);\n+  virtual void cairoScale(jlong, jdouble, jdouble);\n+  virtual void cairoSetOperator(jlong, jint);\n+  virtual void cairoSetRGBAColor(jlong, jdouble, jdouble, jdouble, jdouble);\n+  virtual void cairoSetFillRule(jlong, jint);\n+  virtual void cairoSetLine(jlong, jdouble, jint, jint, jdouble);\n+  virtual void cairoSetDash(jlong, JArray< jdouble > *, jint, jdouble);\n public: // actually package-private\n   virtual void cairoDrawGlyphVector(jlong, ::gnu::java::awt::peer::gtk::GdkFontPeer *, jfloat, jfloat, jint, JArray< jint > *, JArray< jfloat > *);\n-private:\n-  void cairoSetFont(jlong, ::gnu::java::awt::peer::gtk::GdkFontPeer *);\n-  void cairoRelCurveTo(jlong, jdouble, jdouble, jdouble, jdouble, jdouble, jdouble);\n-  void cairoRectangle(jlong, jdouble, jdouble, jdouble, jdouble);\n-  void cairoArc(jlong, jdouble, jdouble, jdouble, jdouble, jdouble);\n-  void cairoSave(jlong);\n-  void cairoRestore(jlong);\n-  void cairoNewPath(jlong);\n-  void cairoClosePath(jlong);\n-  void cairoMoveTo(jlong, jdouble, jdouble);\n-  void cairoRelMoveTo(jlong, jdouble, jdouble);\n-  void cairoLineTo(jlong, jdouble, jdouble);\n-  void cairoRelLineTo(jlong, jdouble, jdouble);\n-  void cairoCurveTo(jlong, jdouble, jdouble, jdouble, jdouble, jdouble, jdouble);\n-  void cairoStroke(jlong);\n-  void cairoFill(jlong, jdouble);\n-  void cairoClip(jlong);\n-  void cairoPreserveClip(jlong);\n-  void cairoResetClip(jlong);\n-  void cairoDrawLine(jlong, jdouble, jdouble, jdouble, jdouble);\n-  void cairoDrawRect(jlong, jdouble, jdouble, jdouble, jdouble);\n-  void cairoFillRect(jlong, jdouble, jdouble, jdouble, jdouble);\n+public: // actually protected\n+  virtual void cairoSetFont(jlong, ::gnu::java::awt::peer::gtk::GdkFontPeer *);\n+  virtual void cairoRectangle(jlong, jdouble, jdouble, jdouble, jdouble);\n+  virtual void cairoArc(jlong, jdouble, jdouble, jdouble, jdouble, jdouble);\n+  virtual void cairoSave(jlong);\n+  virtual void cairoRestore(jlong);\n+  virtual void cairoNewPath(jlong);\n+  virtual void cairoClosePath(jlong);\n+  virtual void cairoMoveTo(jlong, jdouble, jdouble);\n+  virtual void cairoLineTo(jlong, jdouble, jdouble);\n+  virtual void cairoCurveTo(jlong, jdouble, jdouble, jdouble, jdouble, jdouble, jdouble);\n+  virtual void cairoStroke(jlong);\n+  virtual void cairoFill(jlong, jdouble);\n+  virtual void cairoClip(jlong);\n+  virtual void cairoResetClip(jlong);\n public:\n   virtual void setTransform(::java::awt::geom::AffineTransform *);\n private:"}, {"sha": "534834bd1f4cfa91f53386ea6567137b904f058f", "filename": "libjava/gnu/java/awt/peer/gtk/ComponentGraphics.h", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/415e62e2329a7f347ee0bb0f658daa35fa929a55/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FComponentGraphics.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/415e62e2329a7f347ee0bb0f658daa35fa929a55/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FComponentGraphics.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FComponentGraphics.h?ref=415e62e2329a7f347ee0bb0f658daa35fa929a55", "patch": "@@ -7,6 +7,8 @@\n #pragma interface\n \n #include <gnu/java/awt/peer/gtk/CairoGraphics2D.h>\n+#include <gcj/array.h>\n+\n extern \"Java\"\n {\n   namespace gnu\n@@ -24,6 +26,7 @@ extern \"Java\"\n           namespace gtk\n           {\n               class ComponentGraphics;\n+              class GdkFontPeer;\n               class GtkComponentPeer;\n               class GtkImage;\n           }\n@@ -101,12 +104,40 @@ class gnu::java::awt::peer::gtk::ComponentGraphics : public ::gnu::java::awt::pe\n   virtual void drawGlyphVector(::java::awt::font::GlyphVector *, jfloat, jfloat);\n   virtual jboolean drawImage(::java::awt::Image *, jint, jint, ::java::awt::image::ImageObserver *);\n   virtual jboolean drawImage(::java::awt::Image *, jint, jint, jint, jint, ::java::awt::image::ImageObserver *);\n-  virtual void setClip(::java::awt::Shape *);\n private:\n   jboolean drawComposite(::java::awt::geom::Rectangle2D *, ::java::awt::image::ImageObserver *);\n   void createBuffer();\n public: // actually protected\n   virtual ::java::awt::image::ColorModel * getNativeCM();\n+  virtual jlong init(jlong);\n+public:\n+  virtual void disposeNative(jlong);\n+public: // actually protected\n+  virtual void drawPixels(jlong, JArray< jint > *, jint, jint, jint, JArray< jdouble > *, jdouble, jint);\n+  virtual void setGradient(jlong, jdouble, jdouble, jdouble, jdouble, jint, jint, jint, jint, jint, jint, jint, jint, jboolean);\n+  virtual void setPaintPixels(jlong, JArray< jint > *, jint, jint, jint, jboolean, jint, jint);\n+  virtual void cairoSetMatrix(jlong, JArray< jdouble > *);\n+  virtual void cairoScale(jlong, jdouble, jdouble);\n+  virtual void cairoSetOperator(jlong, jint);\n+  virtual void cairoSetRGBAColor(jlong, jdouble, jdouble, jdouble, jdouble);\n+  virtual void cairoSetFillRule(jlong, jint);\n+  virtual void cairoSetLine(jlong, jdouble, jint, jint, jdouble);\n+  virtual void cairoSetDash(jlong, JArray< jdouble > *, jint, jdouble);\n+  virtual void cairoDrawGlyphVector(jlong, ::gnu::java::awt::peer::gtk::GdkFontPeer *, jfloat, jfloat, jint, JArray< jint > *, JArray< jfloat > *);\n+  virtual void cairoSetFont(jlong, ::gnu::java::awt::peer::gtk::GdkFontPeer *);\n+  virtual void cairoRectangle(jlong, jdouble, jdouble, jdouble, jdouble);\n+  virtual void cairoArc(jlong, jdouble, jdouble, jdouble, jdouble, jdouble);\n+  virtual void cairoSave(jlong);\n+  virtual void cairoRestore(jlong);\n+  virtual void cairoNewPath(jlong);\n+  virtual void cairoClosePath(jlong);\n+  virtual void cairoMoveTo(jlong, jdouble, jdouble);\n+  virtual void cairoLineTo(jlong, jdouble, jdouble);\n+  virtual void cairoCurveTo(jlong, jdouble, jdouble, jdouble, jdouble, jdouble, jdouble);\n+  virtual void cairoStroke(jlong);\n+  virtual void cairoFill(jlong, jdouble);\n+  virtual void cairoClip(jlong);\n+  virtual void cairoResetClip(jlong);\n private:\n   static jboolean hasXRenderExtension;\n   ::gnu::java::awt::peer::gtk::GtkComponentPeer * __attribute__((aligned(__alignof__( ::gnu::java::awt::peer::gtk::CairoGraphics2D)))) component;"}]}