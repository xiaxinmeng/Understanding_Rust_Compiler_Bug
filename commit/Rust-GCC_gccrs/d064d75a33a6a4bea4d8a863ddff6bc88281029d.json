{"sha": "d064d75a33a6a4bea4d8a863ddff6bc88281029d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA2NGQ3NWEzM2E2YTRiZWE0ZDhhODYzZGRmZjZiYzg4MjgxMDI5ZA==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2001-03-15T07:59:53Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2001-03-15T07:59:53Z"}, "message": "Correct semantics restrictions checking in throw-expression.\n\ncp/\n\tCorrect semantics restrictions checking in throw-expression.\n\t* except.c (is_admissible_throw_operand): New function.\n\t(build_throw): Use it.\n\ntestsuite/\n\t* g++.old-deja/g++.other/eh4.C: New test.\n\nFrom-SVN: r40487", "tree": {"sha": "26a5e318a3736edd7e0207acd62e762714ec16e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26a5e318a3736edd7e0207acd62e762714ec16e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d064d75a33a6a4bea4d8a863ddff6bc88281029d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d064d75a33a6a4bea4d8a863ddff6bc88281029d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d064d75a33a6a4bea4d8a863ddff6bc88281029d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d064d75a33a6a4bea4d8a863ddff6bc88281029d/comments", "author": null, "committer": null, "parents": [{"sha": "ba133c968c260e4f4c9623630812846202b5e54f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba133c968c260e4f4c9623630812846202b5e54f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba133c968c260e4f4c9623630812846202b5e54f"}], "stats": {"total": 57, "additions": 56, "deletions": 1}, "files": [{"sha": "429a57001990337d508a1cbf4b24d6ec7d26f95d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d064d75a33a6a4bea4d8a863ddff6bc88281029d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d064d75a33a6a4bea4d8a863ddff6bc88281029d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d064d75a33a6a4bea4d8a863ddff6bc88281029d", "patch": "@@ -1,3 +1,9 @@\n+2001-03-15  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\tCorrect semantics restrictions checking in throw-expression.\n+\t* except.c (is_admissible_throw_operand): New function.\n+\t(build_throw): Use it.\n+\n 2001-03-14  Mark Mitchell  <mark@codesourcery.com>\n \n \t* decl.c (cp_make_fnname_decl): Set DECL_IGNORED_P on __FUNCTION__"}, {"sha": "595d3d66b2836d642c5dae5052bd81141819c163", "filename": "gcc/cp/except.c", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d064d75a33a6a4bea4d8a863ddff6bc88281029d/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d064d75a33a6a4bea4d8a863ddff6bc88281029d/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=d064d75a33a6a4bea4d8a863ddff6bc88281029d", "patch": "@@ -53,6 +53,7 @@ static tree build_eh_type_type_ref PARAMS ((tree));\n static tree build_terminate_handler PARAMS ((void));\n static tree alloc_eh_object PARAMS ((tree));\n static int complete_ptr_ref_or_void_ptr_p PARAMS ((tree, tree));\n+static bool is_admissible_throw_operand PARAMS ((tree));\n static int can_convert_eh PARAMS ((tree, tree));\n static void check_handlers_1 PARAMS ((tree, tree));\n static void initialize_handler_parm PARAMS ((tree));\n@@ -1027,7 +1028,7 @@ build_throw (e)\n   \n   if (e != NULL_TREE)\n     {\n-      if (!complete_ptr_ref_or_void_ptr_p (TREE_TYPE (e), e))\n+      if (!is_admissible_throw_operand (e))\n         return error_mark_node;\n     }\n \n@@ -1070,6 +1071,38 @@ complete_ptr_ref_or_void_ptr_p (type, from)\n   return 1;\n }\n \n+/* Return truth-value if EXPRESSION is admissible in throw-expression,\n+   i.e. if it is not of incomplete type or a pointer/reference to such\n+   a type or of an abstract class type.  */\n+\n+static bool\n+is_admissible_throw_operand (expr)\n+     tree expr;\n+{\n+  tree type = TREE_TYPE (expr);\n+\n+  /* 15.1/4 [...] The type of the throw-expression shall not be an\n+            incomplete type, or a pointer or a reference to an incomplete\n+            type, other than void*, const void*, volatile void*, or\n+            const volatile void*.  Except for these restriction and the\n+            restrictions on type matching mentioned in 15.3, the operand\n+            of throw is treated exactly as a function argument in a call\n+            (5.2.2) or the operand of a return statement.  */\n+  if (!complete_ptr_ref_or_void_ptr_p (type, expr))\n+    return false;\n+\n+  /* 10.4/3 An abstract class shall not be used as a parameter type,\n+            as a function return type or as type of an explicit\n+            conversion.  */\n+  else if (CLASS_TYPE_P (type) && CLASSTYPE_PURE_VIRTUALS (type))\n+    {\n+      cp_error (\"Expression '%E' of abstract class type '%T' cannot be used in throw-expression\", expr, type);\n+      return false;\n+    }\n+\n+  return true;\n+}\n+\n /* Returns nonzero if FN is a declaration of a standard C library\n    function which is known not to throw.\n "}, {"sha": "12bb57f93dd5965ad8f4e4c0a74f232ae432348b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d064d75a33a6a4bea4d8a863ddff6bc88281029d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d064d75a33a6a4bea4d8a863ddff6bc88281029d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d064d75a33a6a4bea4d8a863ddff6bc88281029d", "patch": "@@ -1,3 +1,7 @@\n+2001-03-15  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* g++.old-deja/g++.other/eh4.C: New test.\n+\n 2001-03-14  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* gcc.dg/cpp/mi1.c: Update."}, {"sha": "437d9a7095885908bb00273f9d274a0e5d7373bd", "filename": "gcc/testsuite/g++.old-deja/g++.other/eh4.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d064d75a33a6a4bea4d8a863ddff6bc88281029d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Feh4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d064d75a33a6a4bea4d8a863ddff6bc88281029d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Feh4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Feh4.C?ref=d064d75a33a6a4bea4d8a863ddff6bc88281029d", "patch": "@@ -0,0 +1,12 @@\n+// Origin: Jean-Marc Bourguet <bourguet@cadence.com>\n+// Build, don't link:\n+\n+class foo {\n+public:\n+  foo() {};\n+  void throwMe () {\n+    throw *this;                // ERROR\n+  };\n+  virtual void test () = 0;\n+};\n+"}]}