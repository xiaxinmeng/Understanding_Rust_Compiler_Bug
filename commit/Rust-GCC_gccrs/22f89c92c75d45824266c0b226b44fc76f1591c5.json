{"sha": "22f89c92c75d45824266c0b226b44fc76f1591c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJmODljOTJjNzVkNDU4MjQyNjZjMGIyMjZiNDRmYzc2ZjE1OTFjNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-05-09T20:09:29Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-05-09T20:09:29Z"}, "message": "i386.md (set_got, [...]): Remove constraints from expanders.\n\n\t* config/i386/i386.md (set_got, set_got_labelled, lwp_llwpcb,\n\tlwp_lwpval<mode>3, lwp_lwpins<mode>3): Remove constraints from\n\texpanders.\n\t* config/i386/sse.md (vec_interleave_high<mode>,\n\tvec_interleave_low<mode>, <avx512>_vpermi2var<mode>3_maskz,\n\t<avx512>_vpermt2var<mode>3_maskz): Likewise.\n\nFrom-SVN: r236045", "tree": {"sha": "a20e251f917c9a13d2892500b18ac2034906cd8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a20e251f917c9a13d2892500b18ac2034906cd8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22f89c92c75d45824266c0b226b44fc76f1591c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22f89c92c75d45824266c0b226b44fc76f1591c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22f89c92c75d45824266c0b226b44fc76f1591c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22f89c92c75d45824266c0b226b44fc76f1591c5/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8964ed82dbf9554c07ba02f060a0b4ab7d17765c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8964ed82dbf9554c07ba02f060a0b4ab7d17765c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8964ed82dbf9554c07ba02f060a0b4ab7d17765c"}], "stats": {"total": 93, "additions": 51, "deletions": 42}, "files": [{"sha": "42152ef20c4eb80a46f7cc2d0f18d028a1eb675d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22f89c92c75d45824266c0b226b44fc76f1591c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22f89c92c75d45824266c0b226b44fc76f1591c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=22f89c92c75d45824266c0b226b44fc76f1591c5", "patch": "@@ -1,3 +1,12 @@\n+2016-05-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/i386.md (set_got, set_got_labelled, lwp_llwpcb,\n+\tlwp_lwpval<mode>3, lwp_lwpins<mode>3): Remove constraints from\n+\texpanders.\n+\t* config/i386/sse.md (vec_interleave_high<mode>,\n+\tvec_interleave_low<mode>, <avx512>_vpermi2var<mode>3_maskz,\n+\t<avx512>_vpermt2var<mode>3_maskz): Likewise.\n+\n 2016-05-04  Aaron Sawdey  <acsawdey@linux.vnet.ibm.com>\n \n         * config/rs6000/rs6000.c (rs6000_reassociation_width): Add"}, {"sha": "9bd19ab04be95313626843e1dabdc81d571ecfd0", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22f89c92c75d45824266c0b226b44fc76f1591c5/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22f89c92c75d45824266c0b226b44fc76f1591c5/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=22f89c92c75d45824266c0b226b44fc76f1591c5", "patch": "@@ -12505,7 +12505,7 @@\n \n (define_expand \"set_got\"\n   [(parallel\n-     [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+     [(set (match_operand:SI 0 \"register_operand\")\n \t   (unspec:SI [(const_int 0)] UNSPEC_SET_GOT))\n       (clobber (reg:CC FLAGS_REG))])]\n   \"!TARGET_64BIT\"\n@@ -12525,7 +12525,7 @@\n \n (define_expand \"set_got_labelled\"\n   [(parallel\n-     [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+     [(set (match_operand:SI 0 \"register_operand\")\n \t   (unspec:SI [(label_ref (match_operand 1))]\n \t\t      UNSPEC_SET_GOT))\n       (clobber (reg:CC FLAGS_REG))])]\n@@ -19024,7 +19024,7 @@\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n (define_expand \"lwp_llwpcb\"\n-  [(unspec_volatile [(match_operand 0 \"register_operand\" \"r\")]\n+  [(unspec_volatile [(match_operand 0 \"register_operand\")]\n \t\t    UNSPECV_LLWP_INTRINSIC)]\n   \"TARGET_LWP\")\n \n@@ -19038,7 +19038,7 @@\n    (set_attr \"length\" \"5\")])\n \n (define_expand \"lwp_slwpcb\"\n-  [(set (match_operand 0 \"register_operand\" \"=r\")\n+  [(set (match_operand 0 \"register_operand\")\n \t(unspec_volatile [(const_int 0)] UNSPECV_SLWP_INTRINSIC))]\n   \"TARGET_LWP\"\n {\n@@ -19062,9 +19062,9 @@\n    (set_attr \"length\" \"5\")])\n \n (define_expand \"lwp_lwpval<mode>3\"\n-  [(unspec_volatile [(match_operand:SWI48 1 \"register_operand\" \"r\")\n-    \t    \t     (match_operand:SI 2 \"nonimmediate_operand\" \"rm\")\n-\t\t     (match_operand:SI 3 \"const_int_operand\" \"i\")]\n+  [(unspec_volatile [(match_operand:SWI48 1 \"register_operand\")\n+    \t    \t     (match_operand:SI 2 \"nonimmediate_operand\")\n+\t\t     (match_operand:SI 3 \"const_int_operand\")]\n \t\t    UNSPECV_LWPVAL_INTRINSIC)]\n   \"TARGET_LWP\"\n   ;; Avoid unused variable warning.\n@@ -19084,11 +19084,11 @@\n \n (define_expand \"lwp_lwpins<mode>3\"\n   [(set (reg:CCC FLAGS_REG)\n-\t(unspec_volatile:CCC [(match_operand:SWI48 1 \"register_operand\" \"r\")\n-\t\t\t      (match_operand:SI 2 \"nonimmediate_operand\" \"rm\")\n-\t\t\t      (match_operand:SI 3 \"const_int_operand\" \"i\")]\n+\t(unspec_volatile:CCC [(match_operand:SWI48 1 \"register_operand\")\n+\t\t\t      (match_operand:SI 2 \"nonimmediate_operand\")\n+\t\t\t      (match_operand:SI 3 \"const_int_operand\")]\n \t\t\t     UNSPECV_LWPINS_INTRINSIC))\n-   (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n+   (set (match_operand:QI 0 \"nonimmediate_operand\")\n \t(eq:QI (reg:CCC FLAGS_REG) (const_int 0)))]\n   \"TARGET_LWP\")\n "}, {"sha": "e993f9cdc3a08c16e7dc428dfa72b4fdfa484fca", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22f89c92c75d45824266c0b226b44fc76f1591c5/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22f89c92c75d45824266c0b226b44fc76f1591c5/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=22f89c92c75d45824266c0b226b44fc76f1591c5", "patch": "@@ -11899,9 +11899,9 @@\n    (set_attr \"mode\" \"TI\")])\n \n (define_expand \"vec_interleave_high<mode>\"\n-  [(match_operand:VI_256 0 \"register_operand\" \"=x\")\n-   (match_operand:VI_256 1 \"register_operand\" \"x\")\n-   (match_operand:VI_256 2 \"nonimmediate_operand\" \"xm\")]\n+  [(match_operand:VI_256 0 \"register_operand\")\n+   (match_operand:VI_256 1 \"register_operand\")\n+   (match_operand:VI_256 2 \"nonimmediate_operand\")]\n  \"TARGET_AVX2\"\n {\n   rtx t1 = gen_reg_rtx (<MODE>mode);\n@@ -11917,9 +11917,9 @@\n })\n \n (define_expand \"vec_interleave_low<mode>\"\n-  [(match_operand:VI_256 0 \"register_operand\" \"=x\")\n-   (match_operand:VI_256 1 \"register_operand\" \"x\")\n-   (match_operand:VI_256 2 \"nonimmediate_operand\" \"xm\")]\n+  [(match_operand:VI_256 0 \"register_operand\")\n+   (match_operand:VI_256 1 \"register_operand\")\n+   (match_operand:VI_256 2 \"nonimmediate_operand\")]\n  \"TARGET_AVX2\"\n {\n   rtx t1 = gen_reg_rtx (<MODE>mode);\n@@ -17244,11 +17244,11 @@\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_expand \"<avx512>_vpermi2var<mode>3_maskz\"\n-  [(match_operand:VI48F 0 \"register_operand\" \"=v\")\n-   (match_operand:VI48F 1 \"register_operand\" \"v\")\n-   (match_operand:<sseintvecmode> 2 \"register_operand\" \"0\")\n-   (match_operand:VI48F 3 \"nonimmediate_operand\" \"vm\")\n-   (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")]\n+  [(match_operand:VI48F 0 \"register_operand\")\n+   (match_operand:VI48F 1 \"register_operand\")\n+   (match_operand:<sseintvecmode> 2 \"register_operand\")\n+   (match_operand:VI48F 3 \"nonimmediate_operand\")\n+   (match_operand:<avx512fmaskmode> 4 \"register_operand\")]\n   \"TARGET_AVX512F\"\n {\n   emit_insn (gen_<avx512>_vpermi2var<mode>3_maskz_1 (\n@@ -17272,11 +17272,11 @@\n })\n \n (define_expand \"<avx512>_vpermi2var<mode>3_maskz\"\n-  [(match_operand:VI2_AVX512VL 0 \"register_operand\" \"=v\")\n-   (match_operand:VI2_AVX512VL 1 \"register_operand\" \"v\")\n-   (match_operand:<sseintvecmode> 2 \"register_operand\" \"0\")\n-   (match_operand:VI2_AVX512VL 3 \"nonimmediate_operand\" \"vm\")\n-   (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")]\n+  [(match_operand:VI2_AVX512VL 0 \"register_operand\")\n+   (match_operand:VI2_AVX512VL 1 \"register_operand\")\n+   (match_operand:<sseintvecmode> 2 \"register_operand\")\n+   (match_operand:VI2_AVX512VL 3 \"nonimmediate_operand\")\n+   (match_operand:<avx512fmaskmode> 4 \"register_operand\")]\n   \"TARGET_AVX512BW\"\n {\n   emit_insn (gen_<avx512>_vpermi2var<mode>3_maskz_1 (\n@@ -17373,11 +17373,11 @@\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_expand \"<avx512>_vpermt2var<mode>3_maskz\"\n-  [(match_operand:VI48F 0 \"register_operand\" \"=v\")\n-   (match_operand:<sseintvecmode> 1 \"register_operand\" \"v\")\n-   (match_operand:VI48F 2 \"register_operand\" \"0\")\n-   (match_operand:VI48F 3 \"nonimmediate_operand\" \"vm\")\n-   (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")]\n+  [(match_operand:VI48F 0 \"register_operand\")\n+   (match_operand:<sseintvecmode> 1 \"register_operand\")\n+   (match_operand:VI48F 2 \"register_operand\")\n+   (match_operand:VI48F 3 \"nonimmediate_operand\")\n+   (match_operand:<avx512fmaskmode> 4 \"register_operand\")]\n   \"TARGET_AVX512F\"\n {\n   emit_insn (gen_<avx512>_vpermt2var<mode>3_maskz_1 (\n@@ -17387,11 +17387,11 @@\n })\n \n (define_expand \"<avx512>_vpermt2var<mode>3_maskz\"\n-  [(match_operand:VI1_AVX512VL 0 \"register_operand\" \"=v\")\n-   (match_operand:<sseintvecmode> 1 \"register_operand\" \"v\")\n-   (match_operand:VI1_AVX512VL 2 \"register_operand\" \"0\")\n-   (match_operand:VI1_AVX512VL 3 \"nonimmediate_operand\" \"vm\")\n-   (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")]\n+  [(match_operand:VI1_AVX512VL 0 \"register_operand\")\n+   (match_operand:<sseintvecmode> 1 \"register_operand\")\n+   (match_operand:VI1_AVX512VL 2 \"register_operand\")\n+   (match_operand:VI1_AVX512VL 3 \"nonimmediate_operand\")\n+   (match_operand:<avx512fmaskmode> 4 \"register_operand\")]\n   \"TARGET_AVX512VBMI\"\n {\n   emit_insn (gen_<avx512>_vpermt2var<mode>3_maskz_1 (\n@@ -17401,11 +17401,11 @@\n })\n \n (define_expand \"<avx512>_vpermt2var<mode>3_maskz\"\n-  [(match_operand:VI2_AVX512VL 0 \"register_operand\" \"=v\")\n-   (match_operand:<sseintvecmode> 1 \"register_operand\" \"v\")\n-   (match_operand:VI2_AVX512VL 2 \"register_operand\" \"0\")\n-   (match_operand:VI2_AVX512VL 3 \"nonimmediate_operand\" \"vm\")\n-   (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")]\n+  [(match_operand:VI2_AVX512VL 0 \"register_operand\")\n+   (match_operand:<sseintvecmode> 1 \"register_operand\")\n+   (match_operand:VI2_AVX512VL 2 \"register_operand\")\n+   (match_operand:VI2_AVX512VL 3 \"nonimmediate_operand\")\n+   (match_operand:<avx512fmaskmode> 4 \"register_operand\")]\n   \"TARGET_AVX512BW\"\n {\n   emit_insn (gen_<avx512>_vpermt2var<mode>3_maskz_1 ("}]}