{"sha": "1823c4f69ba4b5e59a460e8a3eb59dc345f24bc2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTgyM2M0ZjY5YmE0YjVlNTlhNDYwZThhM2ViNTlkYzM0NWYyNGJjMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-08-22T08:50:37Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-08-22T08:50:37Z"}, "message": "common.opt (feliminate-dwarf2-dups): Ignore.\n\n2017-08-22  Richard Biener  <rguenther@suse.de>\n\n\t* common.opt (feliminate-dwarf2-dups): Ignore.\n\t* doc/invoke.texi (feliminate-dwarf2-dups): Remove documentation.\n\t* dwarf2out.c (push_new_compile_unit, pop_compile_unit,\n\tsame_die_p_wrap, compute_section_prefix,\n\tis_symbol_die, assign_symbol_names, break_out_includes): Remove.\n\t(comdat_symbol_id, comdat_symbol_number): Likewise.\n\t(cu_hash_table_entry, cu_hash_table_entry_hasher, cu_hash_type):\n\tLikewise.\n\t(check_duplicate_cu, record_comdat_symbol_number): Likewise.\n\t(output_die): Mark unreachable path unreachable.\n\t(dwarf2out_start_source_file): Do not create DW_TAG_GNU_BINCL.\n\t(dwarf2out_end_source_file): Do not create DW_TAG_GNU_EINCL.\n\t(dwarf2out_init): Remove code handling flag_eliminate_dwarf2_dups.\n\t(dwarf2out_early_finish): Likewise.\n\n\t* g++.dg/debug/dwarf2/dwarf2-1.C: Remove -feliminate-dwarf2-dups.\n\t* g++.dg/debug/dwarf2/dwarf2-2.C: Likewise.\n\t* g++.dg/debug/dwarf2/pr46123-2.C: Likewise.\n\t* g++.dg/debug/dwarf2/typedef5.C: Likewise.\n\t* gcc.dg/debug/dwarf2/dwarf2-3.c: Likewise.\n\t* gcc.dg/debug/dwarf2/dwarf2-3.h: Likewise.\n\t* gcc.dg/debug/dwarf2/dups-types.c: Remove.\n\t* gcc.dg/debug/dwarf2/dups-types.h: Likewise.\n\nFrom-SVN: r251262", "tree": {"sha": "aa48e2178669c2eb952dbad05b699172f99b6d34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa48e2178669c2eb952dbad05b699172f99b6d34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1823c4f69ba4b5e59a460e8a3eb59dc345f24bc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1823c4f69ba4b5e59a460e8a3eb59dc345f24bc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1823c4f69ba4b5e59a460e8a3eb59dc345f24bc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1823c4f69ba4b5e59a460e8a3eb59dc345f24bc2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4ea9e1a52406d50c63987098c060a1c54d52b46c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ea9e1a52406d50c63987098c060a1c54d52b46c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ea9e1a52406d50c63987098c060a1c54d52b46c"}], "stats": {"total": 380, "additions": 42, "deletions": 338}, "files": [{"sha": "e24f5119334033f7f606d840c08e6e9072cbf3d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1823c4f69ba4b5e59a460e8a3eb59dc345f24bc2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1823c4f69ba4b5e59a460e8a3eb59dc345f24bc2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1823c4f69ba4b5e59a460e8a3eb59dc345f24bc2", "patch": "@@ -1,3 +1,20 @@\n+2017-08-22  Richard Biener  <rguenther@suse.de>\n+\n+\t* common.opt (feliminate-dwarf2-dups): Ignore.\n+\t* doc/invoke.texi (feliminate-dwarf2-dups): Remove documentation.\n+\t* dwarf2out.c (push_new_compile_unit, pop_compile_unit,\n+\tsame_die_p_wrap, compute_section_prefix,\n+\tis_symbol_die, assign_symbol_names, break_out_includes): Remove.\n+\t(comdat_symbol_id, comdat_symbol_number): Likewise.\n+\t(cu_hash_table_entry, cu_hash_table_entry_hasher, cu_hash_type):\n+\tLikewise.\n+\t(check_duplicate_cu, record_comdat_symbol_number): Likewise.\n+\t(output_die): Mark unreachable path unreachable.\n+\t(dwarf2out_start_source_file): Do not create DW_TAG_GNU_BINCL.\n+\t(dwarf2out_end_source_file): Do not create DW_TAG_GNU_EINCL.\n+\t(dwarf2out_init): Remove code handling flag_eliminate_dwarf2_dups.\n+\t(dwarf2out_early_finish): Likewise.\n+\n 2017-08-22  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* wide-int.h (hwi_with_prec::hwi_with_prec): Sign extend."}, {"sha": "1331008f81107a13371da3d70cf71c4eb6231e1e", "filename": "gcc/common.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1823c4f69ba4b5e59a460e8a3eb59dc345f24bc2/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1823c4f69ba4b5e59a460e8a3eb59dc345f24bc2/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=1823c4f69ba4b5e59a460e8a3eb59dc345f24bc2", "patch": "@@ -1303,8 +1303,8 @@ Common Report Var(flag_early_inlining) Init(1) Optimization\n Perform early inlining.\n \n feliminate-dwarf2-dups\n-Common Report Var(flag_eliminate_dwarf2_dups)\n-Perform DWARF duplicate elimination.\n+Common Ignore\n+Does nothing.  Preserved for backward compatibility.\n \n fipa-sra\n Common Report Var(flag_ipa_sra) Init(0) Optimization"}, {"sha": "64363e54a00c56a3de545735620189f7ec0cde04", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1823c4f69ba4b5e59a460e8a3eb59dc345f24bc2/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1823c4f69ba4b5e59a460e8a3eb59dc345f24bc2/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=1823c4f69ba4b5e59a460e8a3eb59dc345f24bc2", "patch": "@@ -347,7 +347,7 @@ Objective-C and Objective-C++ Dialects}.\n -gcolumn-info  -gno-column-info @gol\n -gvms  -gxcoff  -gxcoff+  -gz@r{[}=@var{type}@r{]} @gol\n -fdebug-prefix-map=@var{old}=@var{new}  -fdebug-types-section @gol\n--feliminate-dwarf2-dups  -fno-eliminate-unused-debug-types @gol\n+-fno-eliminate-unused-debug-types @gol\n -femit-struct-debug-baseonly  -femit-struct-debug-reduced @gol\n -femit-struct-debug-detailed@r{[}=@var{spec-list}@r{]} @gol\n -feliminate-unused-debug-symbols  -femit-class-debug-always @gol\n@@ -6834,8 +6834,8 @@ for maximum benefit.\n \n GCC no longer supports DWARF Version 1, which is substantially\n different than Version 2 and later.  For historical reasons, some\n-other DWARF-related options (including @option{-feliminate-dwarf2-dups} \n-and @option{-fno-dwarf2-cfi-asm}) retain a reference to DWARF Version 2\n+other DWARF-related options such as\n+@option{-fno-dwarf2-cfi-asm}) retain a reference to DWARF Version 2\n in their names, but apply to all currently-supported versions of DWARF.\n \n @item -gstabs\n@@ -7027,12 +7027,6 @@ writing compressed debug sections, the option is rejected.  Otherwise,\n if the assembler does not support them, @option{-gz} is silently ignored\n when producing object files.\n \n-@item -feliminate-dwarf2-dups\n-@opindex feliminate-dwarf2-dups\n-Compress DWARF debugging information by eliminating duplicated\n-information about each symbol.  This option only makes sense when\n-generating DWARF debugging information.\n-\n @item -femit-struct-debug-baseonly\n @opindex femit-struct-debug-baseonly\n Emit debug information for struct-like types"}, {"sha": "0c339bd46f0eded05dd3e5186d6a9c1b312bfe0b", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 4, "deletions": 298, "changes": 302, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1823c4f69ba4b5e59a460e8a3eb59dc345f24bc2/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1823c4f69ba4b5e59a460e8a3eb59dc345f24bc2/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=1823c4f69ba4b5e59a460e8a3eb59dc345f24bc2", "patch": "@@ -3422,8 +3422,6 @@ static void equate_decl_number_to_die (tree, dw_die_ref);\n static struct var_loc_node *add_var_loc_to_decl (tree, rtx, const char *);\n static void print_spaces (FILE *);\n static void print_die (dw_die_ref, FILE *);\n-static dw_die_ref push_new_compile_unit (dw_die_ref, dw_die_ref);\n-static dw_die_ref pop_compile_unit (dw_die_ref);\n static void loc_checksum (dw_loc_descr_ref, struct md5_ctx *);\n static void attr_checksum (dw_attr_node *, struct md5_ctx *, int *);\n static void die_checksum (dw_die_ref, struct md5_ctx *, int *);\n@@ -3441,14 +3439,9 @@ static int same_loc_p (dw_loc_descr_ref, dw_loc_descr_ref, int *);\n static int same_dw_val_p (const dw_val_node *, const dw_val_node *, int *);\n static int same_attr_p (dw_attr_node *, dw_attr_node *, int *);\n static int same_die_p (dw_die_ref, dw_die_ref, int *);\n-static int same_die_p_wrap (dw_die_ref, dw_die_ref);\n-static void compute_section_prefix (dw_die_ref);\n static int is_type_die (dw_die_ref);\n static int is_comdat_die (dw_die_ref);\n-static int is_symbol_die (dw_die_ref);\n static inline bool is_template_instantiation (dw_die_ref);\n-static void assign_symbol_names (dw_die_ref);\n-static void break_out_includes (dw_die_ref);\n static int is_declaration_die (dw_die_ref);\n static int should_move_die_to_comdat (dw_die_ref);\n static dw_die_ref clone_as_declaration (dw_die_ref);\n@@ -5545,7 +5538,7 @@ dwarf2out_die_ref_for_decl (tree decl, const char **sym,\n   while (die->die_parent)\n     die = die->die_parent;\n   /* For the containing CU DIE we compute a die_symbol in\n-     compute_section_prefix.  */\n+     compute_comp_unit_symbol.  */\n   gcc_assert (die->die_tag == DW_TAG_compile_unit\n \t      && die->die_id.die_symbol != NULL);\n   *sym = die->die_id.die_symbol;\n@@ -6468,31 +6461,6 @@ check_die (dw_die_ref die)\n     }\n }\n \f\n-/* Start a new compilation unit DIE for an include file.  OLD_UNIT is the CU\n-   for the enclosing include file, if any.  BINCL_DIE is the DW_TAG_GNU_BINCL\n-   DIE that marks the start of the DIEs for this include file.  */\n-\n-static dw_die_ref\n-push_new_compile_unit (dw_die_ref old_unit, dw_die_ref bincl_die)\n-{\n-  const char *filename = get_AT_string (bincl_die, DW_AT_name);\n-  dw_die_ref new_unit = gen_compile_unit_die (filename);\n-\n-  new_unit->die_sib = old_unit;\n-  return new_unit;\n-}\n-\n-/* Close an include-file CU and reopen the enclosing one.  */\n-\n-static dw_die_ref\n-pop_compile_unit (dw_die_ref old_unit)\n-{\n-  dw_die_ref new_unit = old_unit->die_sib;\n-\n-  old_unit->die_sib = NULL;\n-  return new_unit;\n-}\n-\n #define CHECKSUM(FOO) md5_process_bytes (&(FOO), sizeof (FOO), ctx)\n #define CHECKSUM_BLOCK(FOO, SIZE) md5_process_bytes ((FOO), (SIZE), ctx)\n #define CHECKSUM_STRING(FOO) md5_process_bytes ((FOO), strlen (FOO), ctx)\n@@ -7462,27 +7430,6 @@ same_die_p (dw_die_ref die1, dw_die_ref die2, int *mark)\n   return 1;\n }\n \n-/* Do the dies look the same?  Wrapper around same_die_p.  */\n-\n-static int\n-same_die_p_wrap (dw_die_ref die1, dw_die_ref die2)\n-{\n-  int mark = 0;\n-  int ret = same_die_p (die1, die2, &mark);\n-\n-  unmark_all_dies (die1);\n-  unmark_all_dies (die2);\n-\n-  return ret;\n-}\n-\n-/* The prefix to attach to symbols on DIEs in the current comdat debug\n-   info section.  */\n-static const char *comdat_symbol_id;\n-\n-/* The index of the current symbol within the current comdat CU.  */\n-static unsigned int comdat_symbol_number;\n-\n /* Calculate the MD5 checksum of the compilation unit DIE UNIT_DIE and its\n    children, and set die_symbol.  */\n \n@@ -7523,15 +7470,6 @@ compute_comp_unit_symbol (dw_die_ref unit_die)\n   unit_die->die_id.die_symbol = xstrdup (name);\n }\n \n-static void\n-compute_section_prefix (dw_die_ref unit_die)\n-{\n-  compute_comp_unit_symbol (unit_die);\n-  unit_die->comdat_type_p = true;\n-  comdat_symbol_id = unit_die->die_id.die_symbol;\n-  comdat_symbol_number = 0;\n-}\n-\n /* Returns nonzero if DIE represents a type, in the sense of TYPE_P.  */\n \n static int\n@@ -7595,18 +7533,6 @@ is_comdat_die (dw_die_ref c)\n   return is_type_die (c);\n }\n \n-/* Returns 1 iff C is the sort of DIE that might be referred to from another\n-   compilation unit.  */\n-\n-static int\n-is_symbol_die (dw_die_ref c)\n-{\n-  return (is_type_die (c)\n-\t  || is_declaration_die (c)\n-\t  || c->die_tag == DW_TAG_namespace\n-\t  || c->die_tag == DW_TAG_module);\n-}\n-\n /* Returns true iff C is a compile-unit DIE.  */\n \n static inline bool\n@@ -7683,190 +7609,6 @@ gen_internal_sym (const char *prefix)\n   return xstrdup (buf);\n }\n \n-/* Assign symbols to all worthy DIEs under DIE.  */\n-\n-static void\n-assign_symbol_names (dw_die_ref die)\n-{\n-  dw_die_ref c;\n-\n-  if (is_symbol_die (die) && !die->comdat_type_p)\n-    {\n-      if (comdat_symbol_id)\n-\t{\n-\t  char *p = XALLOCAVEC (char, strlen (comdat_symbol_id) + 64);\n-\n-\t  sprintf (p, \"%s.%s.%x\", DIE_LABEL_PREFIX,\n-\t\t   comdat_symbol_id, comdat_symbol_number++);\n-\t  die->die_id.die_symbol = xstrdup (p);\n-\t}\n-      else\n-\tdie->die_id.die_symbol = gen_internal_sym (\"LDIE\");\n-    }\n-\n-  FOR_EACH_CHILD (die, c, assign_symbol_names (c));\n-}\n-\n-struct cu_hash_table_entry\n-{\n-  dw_die_ref cu;\n-  unsigned min_comdat_num, max_comdat_num;\n-  struct cu_hash_table_entry *next;\n-};\n-\n-/* Helpers to manipulate hash table of CUs.  */\n-\n-struct cu_hash_table_entry_hasher : pointer_hash <cu_hash_table_entry>\n-{\n-  typedef die_struct *compare_type;\n-  static inline hashval_t hash (const cu_hash_table_entry *);\n-  static inline bool equal (const cu_hash_table_entry *, const die_struct *);\n-  static inline void remove (cu_hash_table_entry *);\n-};\n-\n-inline hashval_t\n-cu_hash_table_entry_hasher::hash (const cu_hash_table_entry *entry)\n-{\n-  return htab_hash_string (entry->cu->die_id.die_symbol);\n-}\n-\n-inline bool\n-cu_hash_table_entry_hasher::equal (const cu_hash_table_entry *entry1,\n-\t\t\t\t   const die_struct *entry2)\n-{\n-  return !strcmp (entry1->cu->die_id.die_symbol, entry2->die_id.die_symbol);\n-}\n-\n-inline void\n-cu_hash_table_entry_hasher::remove (cu_hash_table_entry *entry)\n-{\n-  struct cu_hash_table_entry *next;\n-\n-  while (entry)\n-    {\n-      next = entry->next;\n-      free (entry);\n-      entry = next;\n-    }\n-}\n-\n-typedef hash_table<cu_hash_table_entry_hasher> cu_hash_type;\n-\n-/* Check whether we have already seen this CU and set up SYM_NUM\n-   accordingly.  */\n-static int\n-check_duplicate_cu (dw_die_ref cu, cu_hash_type *htable, unsigned int *sym_num)\n-{\n-  struct cu_hash_table_entry dummy;\n-  struct cu_hash_table_entry **slot, *entry, *last = &dummy;\n-\n-  dummy.max_comdat_num = 0;\n-\n-  slot = htable->find_slot_with_hash (cu,\n-\t\t\t\t      htab_hash_string (cu->die_id.die_symbol),\n-\t\t\t\t      INSERT);\n-  entry = *slot;\n-\n-  for (; entry; last = entry, entry = entry->next)\n-    {\n-      if (same_die_p_wrap (cu, entry->cu))\n-\tbreak;\n-    }\n-\n-  if (entry)\n-    {\n-      *sym_num = entry->min_comdat_num;\n-      return 1;\n-    }\n-\n-  entry = XCNEW (struct cu_hash_table_entry);\n-  entry->cu = cu;\n-  entry->min_comdat_num = *sym_num = last->max_comdat_num;\n-  entry->next = *slot;\n-  *slot = entry;\n-\n-  return 0;\n-}\n-\n-/* Record SYM_NUM to record of CU in HTABLE.  */\n-static void\n-record_comdat_symbol_number (dw_die_ref cu, cu_hash_type *htable,\n-\t\t\t     unsigned int sym_num)\n-{\n-  struct cu_hash_table_entry **slot, *entry;\n-\n-  slot = htable->find_slot_with_hash (cu,\n-\t\t\t\t      htab_hash_string (cu->die_id.die_symbol),\n-\t\t\t\t      NO_INSERT);\n-  entry = *slot;\n-\n-  entry->max_comdat_num = sym_num;\n-}\n-\n-/* Traverse the DIE (which is always comp_unit_die), and set up\n-   additional compilation units for each of the include files we see\n-   bracketed by BINCL/EINCL.  */\n-\n-static void\n-break_out_includes (dw_die_ref die)\n-{\n-  dw_die_ref c;\n-  dw_die_ref unit = NULL;\n-  limbo_die_node *node, **pnode;\n-\n-  c = die->die_child;\n-  if (c) do {\n-    dw_die_ref prev = c;\n-    c = c->die_sib;\n-    while (c->die_tag == DW_TAG_GNU_BINCL || c->die_tag == DW_TAG_GNU_EINCL\n-\t   || (unit && is_comdat_die (c)))\n-      {\n-\tdw_die_ref next = c->die_sib;\n-\n-\t/* This DIE is for a secondary CU; remove it from the main one.  */\n-\tremove_child_with_prev (c, prev);\n-\n-\tif (c->die_tag == DW_TAG_GNU_BINCL)\n-\t  unit = push_new_compile_unit (unit, c);\n-\telse if (c->die_tag == DW_TAG_GNU_EINCL)\n-\t  unit = pop_compile_unit (unit);\n-\telse\n-\t  add_child_die (unit, c);\n-\tc = next;\n-\tif (c == die->die_child)\n-\t  break;\n-      }\n-  } while (c != die->die_child);\n-\n-#if 0\n-  /* We can only use this in debugging, since the frontend doesn't check\n-     to make sure that we leave every include file we enter.  */\n-  gcc_assert (!unit);\n-#endif\n-\n-  assign_symbol_names (die);\n-  cu_hash_type cu_hash_table (10);\n-  for (node = limbo_die_list, pnode = &limbo_die_list;\n-       node;\n-       node = node->next)\n-    {\n-      int is_dupl;\n-\n-      compute_section_prefix (node->die);\n-      is_dupl = check_duplicate_cu (node->die, &cu_hash_table,\n-\t\t\t&comdat_symbol_number);\n-      assign_symbol_names (node->die);\n-      if (is_dupl)\n-\t*pnode = node->next;\n-      else\n-\t{\n-\t  pnode = &node->next;\n-\t  record_comdat_symbol_number (node->die, &cu_hash_table,\n-\t\tcomdat_symbol_number);\n-\t}\n-    }\n-}\n-\n /* Return non-zero if this DIE is a declaration.  */\n \n static int\n@@ -10452,9 +10194,9 @@ output_die (dw_die_ref die)\n \t\t  else\n \t\t    size = DWARF_OFFSET_SIZE;\n \t\t  /* ???  We cannot unconditionally output die_offset if\n-\t\t     non-zero - at least -feliminate-dwarf2-dups will\n-\t\t     create references to those DIEs via symbols.  And we\n-\t\t     do not clear its DIE offset after outputting it\n+\t\t     non-zero - others might create references to those\n+\t\t     DIEs via symbols.\n+\t\t     And we do not clear its DIE offset after outputting it\n \t\t     (and the label refers to the actual DIEs, not the\n \t\t     DWARF CU unit header which is when using label + offset\n \t\t     would be the correct thing to do).\n@@ -26946,15 +26688,6 @@ dwarf2out_source_line (unsigned int line, unsigned int column,\n static void\n dwarf2out_start_source_file (unsigned int lineno, const char *filename)\n {\n-  if (flag_eliminate_dwarf2_dups)\n-    {\n-      /* Record the beginning of the file for break_out_includes.  */\n-      dw_die_ref bincl_die;\n-\n-      bincl_die = new_die (DW_TAG_GNU_BINCL, comp_unit_die (), NULL);\n-      add_AT_string (bincl_die, DW_AT_name, remap_debug_filename (filename));\n-    }\n-\n   if (debug_info_level >= DINFO_LEVEL_VERBOSE)\n     {\n       macinfo_entry e;\n@@ -26970,10 +26703,6 @@ dwarf2out_start_source_file (unsigned int lineno, const char *filename)\n static void\n dwarf2out_end_source_file (unsigned int lineno ATTRIBUTE_UNUSED)\n {\n-  if (flag_eliminate_dwarf2_dups)\n-    /* Record the end of the file for break_out_includes.  */\n-    new_die (DW_TAG_GNU_EINCL, comp_unit_die (), NULL);\n-\n   if (debug_info_level >= DINFO_LEVEL_VERBOSE)\n     {\n       macinfo_entry e;\n@@ -27634,14 +27363,6 @@ init_sections_and_labels (bool early_lto_debug)\n static void\n dwarf2out_init (const char *filename ATTRIBUTE_UNUSED)\n {\n-  /* This option is currently broken, see (PR53118 and PR46102).  */\n-  if (flag_eliminate_dwarf2_dups\n-      && strstr (lang_hooks.name, \"C++\"))\n-    {\n-      warning (0, \"-feliminate-dwarf2-dups is broken for C++, ignoring\");\n-      flag_eliminate_dwarf2_dups = 0;\n-    }\n-\n   /* Allocate the file_table.  */\n   file_table = hash_table<dwarf_file_hasher>::create_ggc (50);\n \n@@ -30790,21 +30511,6 @@ dwarf2out_early_finish (const char *filename)\n       prune_unused_types ();\n     }\n \n-  /* Generate separate CUs for each of the include files we've seen.\n-     They will go into limbo_die_list and from there to cu_die_list.  */\n-  if (flag_eliminate_dwarf2_dups)\n-    {\n-      gcc_assert (limbo_die_list == NULL);\n-      break_out_includes (comp_unit_die ());\n-      limbo_die_node *cu;\n-      while ((cu = limbo_die_list))\n-\t{\n-\t  limbo_die_list = cu->next;\n-\t  cu->next = cu_die_list;\n-\t  cu_die_list = cu;\n-\t}\n-    }\n-\n   /* Traverse the DIE's and note DIEs with DW_OP_GNU_variable_value still\n      with dw_val_class_decl_ref operand.  */\n   note_variable_value (comp_unit_die ());"}, {"sha": "64d16180137171653e6bd442ec8dfb1cc706f627", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1823c4f69ba4b5e59a460e8a3eb59dc345f24bc2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1823c4f69ba4b5e59a460e8a3eb59dc345f24bc2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1823c4f69ba4b5e59a460e8a3eb59dc345f24bc2", "patch": "@@ -1,3 +1,14 @@\n+2017-08-22  Richard Biener  <rguenther@suse.de>\n+\n+\t* g++.dg/debug/dwarf2/dwarf2-1.C: Remove -feliminate-dwarf2-dups.\n+\t* g++.dg/debug/dwarf2/dwarf2-2.C: Likewise.\n+\t* g++.dg/debug/dwarf2/pr46123-2.C: Likewise.\n+\t* g++.dg/debug/dwarf2/typedef5.C: Likewise.\n+\t* gcc.dg/debug/dwarf2/dwarf2-3.c: Likewise.\n+\t* gcc.dg/debug/dwarf2/dwarf2-3.h: Likewise.\n+\t* gcc.dg/debug/dwarf2/dups-types.c: Remove.\n+\t* gcc.dg/debug/dwarf2/dups-types.h: Likewise.\n+\n 2017-08-21  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/81296"}, {"sha": "33ef97beec502c534dca2e0fc74b758b65491cb2", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/dwarf2-1.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1823c4f69ba4b5e59a460e8a3eb59dc345f24bc2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fdwarf2-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1823c4f69ba4b5e59a460e8a3eb59dc345f24bc2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fdwarf2-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fdwarf2-1.C?ref=1823c4f69ba4b5e59a460e8a3eb59dc345f24bc2", "patch": "@@ -1,11 +1,10 @@\n-/* { dg-bogus \"-feliminate-dwarf2-dups is broken for C\\\\+\\\\+, ignoring\" \"broken -feliminate-dwarf2-dups\" { xfail *-*-* } } */\n // Copyright (C) 2006 Free Software Foundation, Inc.\n // Contributed by Nathan Sidwell 6 Jan 2006 <nathan@codesourcery.com>\n \n // PR 24824\n // Origin:   \t wanderer@rsu.ru\n \n-// { dg-options \"-gdwarf -feliminate-dwarf2-dups\" }\n+// { dg-options \"-gdwarf\" }\n \n namespace N\n {"}, {"sha": "9c2657ca26950945162a3806106e5832fde28a45", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/dwarf2-2.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1823c4f69ba4b5e59a460e8a3eb59dc345f24bc2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fdwarf2-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1823c4f69ba4b5e59a460e8a3eb59dc345f24bc2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fdwarf2-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fdwarf2-2.C?ref=1823c4f69ba4b5e59a460e8a3eb59dc345f24bc2", "patch": "@@ -1,7 +1,6 @@\n-/* { dg-bogus \"-feliminate-dwarf2-dups is broken for C\\\\+\\\\+, ignoring\" \"broken -feliminate-dwarf2-dups\" { xfail *-*-* } } */\n // PR debug/27057\n // { dg-do compile }\n-// { dg-options \"-gdwarf -feliminate-dwarf2-dups\" }\n+// { dg-options \"-gdwarf\" }\n \n namespace N\n {"}, {"sha": "84b168223eaaa9c846e7104a8a27e5188fe9a54f", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/pr46123-2.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1823c4f69ba4b5e59a460e8a3eb59dc345f24bc2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpr46123-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1823c4f69ba4b5e59a460e8a3eb59dc345f24bc2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpr46123-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpr46123-2.C?ref=1823c4f69ba4b5e59a460e8a3eb59dc345f24bc2", "patch": "@@ -1,7 +1,6 @@\n-/* { dg-bogus \"-feliminate-dwarf2-dups is broken for C\\\\+\\\\+, ignoring\" \"broken -feliminate-dwarf2-dups\" { xfail *-*-* } } */\n // PR debug/46123\n // { dg-do compile }\n-// { dg-options \"-g -feliminate-dwarf2-dups\" }\n+// { dg-options \"-g\" }\n \n struct foo\n {"}, {"sha": "ca06433e5300d01296ba2b13b66fefac07f47209", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/typedef5.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1823c4f69ba4b5e59a460e8a3eb59dc345f24bc2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftypedef5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1823c4f69ba4b5e59a460e8a3eb59dc345f24bc2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftypedef5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftypedef5.C?ref=1823c4f69ba4b5e59a460e8a3eb59dc345f24bc2", "patch": "@@ -1,6 +1,5 @@\n-/* { dg-bogus \"-feliminate-dwarf2-dups is broken for C\\\\+\\\\+, ignoring\" \"broken -feliminate-dwarf2-dups\" { xfail *-*-* } } */\n // Origin: PR debug/46101\n-// { dg-options \"-gdwarf-2 -feliminate-dwarf2-dups\" }\n+// { dg-options \"-gdwarf-2\" }\n // { dg-do compile }\n \n typedef struct"}, {"sha": "d9c01d07da78a73e28ee3227ab63743236c44ffc", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/dups-types.c", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ea9e1a52406d50c63987098c060a1c54d52b46c/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fdups-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ea9e1a52406d50c63987098c060a1c54d52b46c/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fdups-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fdups-types.c?ref=4ea9e1a52406d50c63987098c060a1c54d52b46c", "patch": "@@ -1,8 +0,0 @@\n-/* Test that these two options can work together.  */\n-/* { dg-options \"-gdwarf-4 -dA -feliminate-dwarf2-dups -fdebug-types-section\" } */\n-/* { dg-final { scan-assembler \"DW.dups_types\\.h\\[^)\\]*. DW_TAG_typedef\" } } */\n-/* { dg-final { scan-assembler \"DW_TAG_type_unit\" } } */\n-\n-#include \"dups-types.h\"\n-\n-A2 a;"}, {"sha": "99b7d907c0f4be24de84e43fd70ae4996cca9360", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/dups-types.h", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ea9e1a52406d50c63987098c060a1c54d52b46c/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fdups-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ea9e1a52406d50c63987098c060a1c54d52b46c/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fdups-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fdups-types.h?ref=4ea9e1a52406d50c63987098c060a1c54d52b46c", "patch": "@@ -1,10 +0,0 @@\n-struct A\n-{\n-  int i;\n-  int j;\n-};\n-\n-typedef struct A A2;\n-extern A2 a;\n-\n-A2 f(A2);"}, {"sha": "b3cc8e6e71f40393223d7b85b50702a3da99890a", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/dwarf2-3.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1823c4f69ba4b5e59a460e8a3eb59dc345f24bc2/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fdwarf2-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1823c4f69ba4b5e59a460e8a3eb59dc345f24bc2/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fdwarf2-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fdwarf2-3.c?ref=1823c4f69ba4b5e59a460e8a3eb59dc345f24bc2", "patch": "@@ -1,7 +1,6 @@\n-/* Test -feliminate-dwarf2-dups */\n /* Contributed by Devang Patel <dpatel@apple.com> */\n /* { dg-do compile } */\n-/* { dg-options \"-gdwarf -feliminate-dwarf2-dups\" } */\n+/* { dg-options \"-gdwarf\" } */\n \n #include \"dwarf2-3.h\"\n "}, {"sha": "a60b6baa0270d076601cd689b3d4df2aa281d266", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/dwarf2-3.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1823c4f69ba4b5e59a460e8a3eb59dc345f24bc2/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fdwarf2-3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1823c4f69ba4b5e59a460e8a3eb59dc345f24bc2/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fdwarf2-3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fdwarf2-3.h?ref=1823c4f69ba4b5e59a460e8a3eb59dc345f24bc2", "patch": "@@ -1,4 +1,3 @@\n-/* Test -feliminate-dwarf2-dups */\n /* Contributed by Devang Patel <dpatel@apple.com> */\n \n struct point"}]}