{"sha": "7e601a1d3ef4bf1467bc85d01f641bdbbf3e7fd8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U2MDFhMWQzZWY0YmYxNDY3YmM4NWQwMWY2NDFiZGJiZjNlN2ZkOA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-10-15T18:30:15Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-10-15T18:30:15Z"}, "message": "lto-streamer-out.c (lto_variably_modified_type_p): New.\n\n2019-10-15  Richard Biener  <rguenther@suse.de>\n\n\t* lto-streamer-out.c (lto_variably_modified_type_p): New.\n\t(tree_is_indexable): Use it.\n\t* tree-streamer-out.c (pack_ts_type_common_value_fields):\n\tStream variably_modified_type_p as TYPE_LANG_FLAG_0.\n\t* tree-streamer-in.c (unpack_ts_type_common_value_fields): Likewise.\n\nFrom-SVN: r277005", "tree": {"sha": "19abd6e2980f99fdcc78a7477781141a9662017a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19abd6e2980f99fdcc78a7477781141a9662017a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e601a1d3ef4bf1467bc85d01f641bdbbf3e7fd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e601a1d3ef4bf1467bc85d01f641bdbbf3e7fd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e601a1d3ef4bf1467bc85d01f641bdbbf3e7fd8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e601a1d3ef4bf1467bc85d01f641bdbbf3e7fd8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2a0cb1644c8431660f24f25aa82118f86d7f9627", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a0cb1644c8431660f24f25aa82118f86d7f9627", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a0cb1644c8431660f24f25aa82118f86d7f9627"}], "stats": {"total": 32, "additions": 29, "deletions": 3}, "files": [{"sha": "023b8f2524c28305a9771bef49e6078a300b4055", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e601a1d3ef4bf1467bc85d01f641bdbbf3e7fd8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e601a1d3ef4bf1467bc85d01f641bdbbf3e7fd8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7e601a1d3ef4bf1467bc85d01f641bdbbf3e7fd8", "patch": "@@ -1,3 +1,11 @@\n+2019-10-15  Richard Biener  <rguenther@suse.de>\n+\n+\t* lto-streamer-out.c (lto_variably_modified_type_p): New.\n+\t(tree_is_indexable): Use it.\n+\t* tree-streamer-out.c (pack_ts_type_common_value_fields):\n+\tStream variably_modified_type_p as TYPE_LANG_FLAG_0.\n+\t* tree-streamer-in.c (unpack_ts_type_common_value_fields): Likewise.\n+\n 2019-10-15  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* config/msp430/msp430.md (zero_extendqipsi2): New."}, {"sha": "87c9e92f3af049cacb9abf40d0e25eb805d66509", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e601a1d3ef4bf1467bc85d01f641bdbbf3e7fd8/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e601a1d3ef4bf1467bc85d01f641bdbbf3e7fd8/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=7e601a1d3ef4bf1467bc85d01f641bdbbf3e7fd8", "patch": "@@ -120,6 +120,17 @@ output_type_ref (struct output_block *ob, tree node)\n   lto_output_type_ref_index (ob->decl_state, ob->main_stream, node);\n }\n \n+/* Wrapper around variably_modified_type_p avoiding type modification\n+   during WPA streaming.  */\n+\n+static bool\n+lto_variably_modified_type_p (tree type)\n+{\n+  return (in_lto_p\n+\t  ? TYPE_LANG_FLAG_0 (TYPE_MAIN_VARIANT (type))\n+\t  : variably_modified_type_p (type, NULL_TREE));\n+}\n+\n \n /* Return true if tree node T is written to various tables.  For these\n    nodes, we sometimes want to write their phyiscal representation\n@@ -134,7 +145,7 @@ tree_is_indexable (tree t)\n      definition.  */\n   if ((TREE_CODE (t) == PARM_DECL || TREE_CODE (t) == RESULT_DECL)\n       && DECL_CONTEXT (t))\n-    return variably_modified_type_p (TREE_TYPE (DECL_CONTEXT (t)), NULL_TREE);\n+    return lto_variably_modified_type_p (TREE_TYPE (DECL_CONTEXT (t)));\n   /* IMPORTED_DECL is put into BLOCK and thus it never can be shared.\n      We should no longer need to stream it.  */\n   else if (TREE_CODE (t) == IMPORTED_DECL)\n@@ -154,10 +165,10 @@ tree_is_indexable (tree t)\n      them we have to localize their members as well.\n      ???  In theory that includes non-FIELD_DECLs as well.  */\n   else if (TYPE_P (t)\n-\t   && variably_modified_type_p (t, NULL_TREE))\n+\t   && lto_variably_modified_type_p (t))\n     return false;\n   else if (TREE_CODE (t) == FIELD_DECL\n-\t   && variably_modified_type_p (DECL_CONTEXT (t), NULL_TREE))\n+\t   && lto_variably_modified_type_p (DECL_CONTEXT (t)))\n     return false;\n   else\n     return (TYPE_P (t) || DECL_P (t) || TREE_CODE (t) == SSA_NAME);"}, {"sha": "d971a74f2b0deb0b34dd5f880bec92fea3a91ff0", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e601a1d3ef4bf1467bc85d01f641bdbbf3e7fd8/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e601a1d3ef4bf1467bc85d01f641bdbbf3e7fd8/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=7e601a1d3ef4bf1467bc85d01f641bdbbf3e7fd8", "patch": "@@ -378,6 +378,7 @@ unpack_ts_type_common_value_fields (struct bitpack_d *bp, tree expr)\n   TYPE_RESTRICT (expr) = (unsigned) bp_unpack_value (bp, 1);\n   TYPE_USER_ALIGN (expr) = (unsigned) bp_unpack_value (bp, 1);\n   TYPE_READONLY (expr) = (unsigned) bp_unpack_value (bp, 1);\n+  TYPE_LANG_FLAG_0 (expr) = (unsigned) bp_unpack_value (bp, 1);\n   if (RECORD_OR_UNION_TYPE_P (expr))\n     {\n       TYPE_TRANSPARENT_AGGR (expr) = (unsigned) bp_unpack_value (bp, 1);"}, {"sha": "f2e4ca220f64c3681b103428226732fbaaaf3d36", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e601a1d3ef4bf1467bc85d01f641bdbbf3e7fd8/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e601a1d3ef4bf1467bc85d01f641bdbbf3e7fd8/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=7e601a1d3ef4bf1467bc85d01f641bdbbf3e7fd8", "patch": "@@ -326,6 +326,12 @@ pack_ts_type_common_value_fields (struct bitpack_d *bp, tree expr)\n   bp_pack_value (bp, TYPE_RESTRICT (expr), 1);\n   bp_pack_value (bp, TYPE_USER_ALIGN (expr), 1);\n   bp_pack_value (bp, TYPE_READONLY (expr), 1);\n+  unsigned vla_p;\n+  if (in_lto_p)\n+    vla_p = TYPE_LANG_FLAG_0 (TYPE_MAIN_VARIANT (expr));\n+  else\n+    vla_p = variably_modified_type_p (expr, NULL_TREE);\n+  bp_pack_value (bp, vla_p, 1);\n   /* We used to stream TYPE_ALIAS_SET == 0 information to let frontends mark\n      types that are opaque for TBAA.  This however did not work as intended,\n      because TYPE_ALIAS_SET == 0 was regularly lost in type merging.  */"}]}