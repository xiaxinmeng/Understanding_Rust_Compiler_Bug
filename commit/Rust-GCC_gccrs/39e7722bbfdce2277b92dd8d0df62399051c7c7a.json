{"sha": "39e7722bbfdce2277b92dd8d0df62399051c7c7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzllNzcyMmJiZmRjZTIyNzdiOTJkZDhkMGRmNjIzOTkwNTFjN2M3YQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-04-07T21:25:55Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-04-07T21:25:55Z"}, "message": "m68k.c (m68k_handle_option): Don't handle OPT_m68000...\n\n\t* config/m68k/m68k.c (m68k_handle_option): Don't handle\n\tOPT_m68000, OPT_mc68000, OPT_m68010, OPT_m68020, OPT_mc68020,\n\tOPT_m68030, OPT_m68040, OPT_m68060, OPT_m68302, OPT_m68332 and\n\tOPT_mcpu32.\n\t* config/m68k/m68k.h (OPTION_DEFAULT_SPECS, ASM_CPU_SPEC): Don't\n\thandle -mc68000, -m68000, -m68302, -m68010, -mc68020, -m68020,\n\t-m68030, -m68040, -m68060, -mcpu32 and -m68332.\n\t* config/m68k/m68k.opt (m68000, m68010, m68020, m68030, m68040,\n\tm68060, m68302, m68332, mc68000, mc68020, mcpu32): Use Alias.\n\t* config/m68k/t-mlibs (CANONICALIZE_OPTIONS): Remove.\n\t(MULTILIB_OPTIONS): Don't use $(CANONICALIZE_OPTIONS).\n\t(MULTILIB_MATCHES): Map -march= options to corresponding -mcpu=\n\toptions.  Don't map other m68k options manually.  Don't handle\n\told-style options as canonical.\n\t(MULTILIB_EXCEPTIONS): Don't use $(CANONICALIZE_OPTIONS).\n\t* doc/install.texi (m68k-*-*): Document binutils version\n\trequirement.\n\nFrom-SVN: r172130", "tree": {"sha": "54e91f95deb915d04884b63b9de838d1fb05a93c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54e91f95deb915d04884b63b9de838d1fb05a93c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39e7722bbfdce2277b92dd8d0df62399051c7c7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39e7722bbfdce2277b92dd8d0df62399051c7c7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39e7722bbfdce2277b92dd8d0df62399051c7c7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39e7722bbfdce2277b92dd8d0df62399051c7c7a/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf103ca449e8f5e38f42b107b3271b18c73c59a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf103ca449e8f5e38f42b107b3271b18c73c59a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf103ca449e8f5e38f42b107b3271b18c73c59a5"}], "stats": {"total": 111, "additions": 45, "deletions": 66}, "files": [{"sha": "f54b864eabd8448ecc3e41d29eb5e487d41cdb06", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39e7722bbfdce2277b92dd8d0df62399051c7c7a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39e7722bbfdce2277b92dd8d0df62399051c7c7a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=39e7722bbfdce2277b92dd8d0df62399051c7c7a", "patch": "@@ -1,3 +1,23 @@\n+2011-04-07  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/m68k/m68k.c (m68k_handle_option): Don't handle\n+\tOPT_m68000, OPT_mc68000, OPT_m68010, OPT_m68020, OPT_mc68020,\n+\tOPT_m68030, OPT_m68040, OPT_m68060, OPT_m68302, OPT_m68332 and\n+\tOPT_mcpu32.\n+\t* config/m68k/m68k.h (OPTION_DEFAULT_SPECS, ASM_CPU_SPEC): Don't\n+\thandle -mc68000, -m68000, -m68302, -m68010, -mc68020, -m68020,\n+\t-m68030, -m68040, -m68060, -mcpu32 and -m68332.\n+\t* config/m68k/m68k.opt (m68000, m68010, m68020, m68030, m68040,\n+\tm68060, m68302, m68332, mc68000, mc68020, mcpu32): Use Alias.\n+\t* config/m68k/t-mlibs (CANONICALIZE_OPTIONS): Remove.\n+\t(MULTILIB_OPTIONS): Don't use $(CANONICALIZE_OPTIONS).\n+\t(MULTILIB_MATCHES): Map -march= options to corresponding -mcpu=\n+\toptions.  Don't map other m68k options manually.  Don't handle\n+\told-style options as canonical.\n+\t(MULTILIB_EXCEPTIONS): Don't use $(CANONICALIZE_OPTIONS).\n+\t* doc/install.texi (m68k-*-*): Document binutils version\n+\trequirement.\n+\n 2011-04-07  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* basic-block.h (force_nonfallthru): Move to..."}, {"sha": "3953d01578c6224ccc1023c571ac8ac34c022783", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39e7722bbfdce2277b92dd8d0df62399051c7c7a/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39e7722bbfdce2277b92dd8d0df62399051c7c7a/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=39e7722bbfdce2277b92dd8d0df62399051c7c7a", "patch": "@@ -499,17 +499,6 @@ m68k_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n     case OPT_mtune_:\n       return m68k_find_selection (&m68k_tune_entry, all_microarchs, arg);\n \n-    case OPT_m68000:\n-    case OPT_mc68000:\n-      return m68k_find_selection (&m68k_cpu_entry, all_devices, \"68000\");\n-\n-    case OPT_m68010:\n-      return m68k_find_selection (&m68k_cpu_entry, all_devices, \"68010\");\n-\n-    case OPT_m68020:\n-    case OPT_mc68020:\n-      return m68k_find_selection (&m68k_cpu_entry, all_devices, \"68020\");\n-\n     case OPT_m68020_40:\n       return (m68k_find_selection (&m68k_tune_entry, all_microarchs,\n \t\t\t\t   \"68020-40\")\n@@ -520,22 +509,6 @@ m68k_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n \t\t\t\t   \"68020-60\")\n \t      && m68k_find_selection (&m68k_cpu_entry, all_devices, \"68020\"));\n \n-    case OPT_m68030:\n-      return m68k_find_selection (&m68k_cpu_entry, all_devices, \"68030\");\n-\n-    case OPT_m68040:\n-      return m68k_find_selection (&m68k_cpu_entry, all_devices, \"68040\");\n-\n-    case OPT_m68060:\n-      return m68k_find_selection (&m68k_cpu_entry, all_devices, \"68060\");\n-\n-    case OPT_m68302:\n-      return m68k_find_selection (&m68k_cpu_entry, all_devices, \"68302\");\n-\n-    case OPT_m68332:\n-    case OPT_mcpu32:\n-      return m68k_find_selection (&m68k_cpu_entry, all_devices, \"68332\");\n-\n     case OPT_mshared_library_id_:\n       if (value > MAX_LIBRARY_ID)\n \terror (\"-mshared-library-id=%s is not between 0 and %d\","}, {"sha": "d853d783fd0d868762ddd6dbc19c472398c1f3da", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39e7722bbfdce2277b92dd8d0df62399051c7c7a/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39e7722bbfdce2277b92dd8d0df62399051c7c7a/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=39e7722bbfdce2277b92dd8d0df62399051c7c7a", "patch": "@@ -30,19 +30,16 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Handle --with-cpu default option from configure script.  */\n #define OPTION_DEFAULT_SPECS\t\t\t\t\t\t\\\n-  { \"cpu\",   \"%{!mc68000:%{!m68000:%{!m68302:%{!m68010:%{!mc68020:%{!m68020:\\\n-%{!m68030:%{!m68040:%{!m68020-40:%{!m68020-60:%{!m68060:%{!mcpu32:%{!m68332:\\\n-%{!mcpu=*:%{!march=*:-%(VALUE)}}}}}}}}}}}}}}}\" },\n+  { \"cpu\",   \"%{!m68020-40:%{!m68020-60:\\\n+%{!mcpu=*:%{!march=*:-%(VALUE)}}}}\" },\n \n /* Pass flags to gas indicating which type of processor we have.  This\n    can be simplified when we can rely on the assembler supporting .cpu\n    and .arch directives.  */\n \n #define ASM_CPU_SPEC \"\\\n %{m68851}%{mno-68851} %{m68881}%{mno-68881} %{msoft-float:-mno-float} \\\n-%{m68000}%{m68302}%{mc68000}%{m68010}%{m68020}%{mc68020}%{m68030}\\\n-%{m68040}%{m68020-40:-m68040}%{m68020-60:-m68040}\\\n-%{m68060}%{mcpu32}%{m68332}\\\n+%{m68020-40:-m68040}%{m68020-60:-m68040}\\\n %{mcpu=*:-mcpu=%*}%{march=*:-march=%*}\\\n \"\n #define ASM_PCREL_SPEC \"%{fPIC|fpic|mpcrel:--pcrel} \\"}, {"sha": "2f0a63e9ead246e502b65d2c067750bda83ba8ba", "filename": "gcc/config/m68k/m68k.opt", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39e7722bbfdce2277b92dd8d0df62399051c7c7a/gcc%2Fconfig%2Fm68k%2Fm68k.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39e7722bbfdce2277b92dd8d0df62399051c7c7a/gcc%2Fconfig%2Fm68k%2Fm68k.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.opt?ref=39e7722bbfdce2277b92dd8d0df62399051c7c7a", "patch": "@@ -40,15 +40,15 @@ Target RejectNegative Alias(mcpu=, 5407)\n Generate code for a 5407\n \n m68000\n-Target RejectNegative\n+Target RejectNegative Alias(mcpu=, 68000)\n Generate code for a 68000\n \n m68010\n-Target RejectNegative\n+Target RejectNegative Alias(mcpu=, 68010)\n Generate code for a 68010\n \n m68020\n-Target RejectNegative\n+Target RejectNegative Alias(mcpu=, 68020)\n Generate code for a 68020\n \n m68020-40\n@@ -60,23 +60,23 @@ Target RejectNegative\n Generate code for a 68060, without any new instructions\n \n m68030\n-Target RejectNegative\n+Target RejectNegative Alias(mcpu=, 68030)\n Generate code for a 68030\n \n m68040\n-Target RejectNegative\n+Target RejectNegative Alias(mcpu=, 68040)\n Generate code for a 68040\n \n m68060\n-Target RejectNegative\n+Target RejectNegative Alias(mcpu=, 68060)\n Generate code for a 68060\n \n m68302\n-Target RejectNegative\n+Target RejectNegative Alias(mcpu=, 68302)\n Generate code for a 68302\n \n m68332\n-Target RejectNegative\n+Target RejectNegative Alias(mcpu=, 68332)\n Generate code for a 68332\n \n ; Has no effect on gcc\n@@ -101,11 +101,11 @@ Target Report Mask(BITFIELD)\n Use the bit-field instructions\n \n mc68000\n-Target RejectNegative\n+Target RejectNegative Alias(mcpu=, 68000)\n Generate code for a 68000\n \n mc68020\n-Target RejectNegative\n+Target RejectNegative Alias(mcpu=, 68020)\n Generate code for a 68020\n \n mcfv4e\n@@ -117,7 +117,7 @@ Target RejectNegative Joined\n Specify the target CPU\n \n mcpu32\n-Target RejectNegative\n+Target RejectNegative Alias(mcpu=, 68332)\n Generate code for a cpu32\n \n mdiv"}, {"sha": "11df31f210e7f977fe8c244093980b5f01d0ddab", "filename": "gcc/config/m68k/t-mlibs", "status": "modified", "additions": 9, "deletions": 22, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39e7722bbfdce2277b92dd8d0df62399051c7c7a/gcc%2Fconfig%2Fm68k%2Ft-mlibs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39e7722bbfdce2277b92dd8d0df62399051c7c7a/gcc%2Fconfig%2Fm68k%2Ft-mlibs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Ft-mlibs?ref=39e7722bbfdce2277b92dd8d0df62399051c7c7a", "patch": "@@ -45,15 +45,9 @@ ifeq ($(filter m$(M68K_MLIB_DEFAULT),$(M68K_MLIB_CPUS)),)\n $(error Error default cpu '$(target_cpu_default)' is not in multilib set '$(M68K_MLIB_CPUS)')\n endif\n \n-# Sed arguments that convert mcpu=* arguments into canonical forms.\n-# We want to use the legacy m68* options instead of the new -mcpu=68*\n-# options when compiling multilibs because the former are recognised\n-# by older binutils.\n-CANONICALIZE_OPTIONS = -e 's|mcpu=68|m68|g' -e 's|mcpu=cpu32|mcpu32|g'\n-\n MULTILIB_DIRNAMES := $(filter-out m$(M68K_MLIB_DEFAULT),$(M68K_MLIB_CPUS))\n MULTILIB_OPTIONS := $(shell echo $(MULTILIB_DIRNAMES:m%=mcpu=%) \\\n-\t\t      | sed -e 's| |/|g' $(CANONICALIZE_OPTIONS))\n+\t\t      | sed -e 's| |/|g' )\n \n # Add subtarget specific options & dirs.\n MULTILIB_DIRNAMES += $(M68K_MLIB_DIRNAMES)\n@@ -62,14 +56,13 @@ MULTILIB_OPTIONS += $(M68K_MLIB_OPTIONS)\n MULTILIB_MATCHES :=\n \n ifneq ($(M68K_ARCH),cf)\n-# Map the new-style options to the legacy m68k ones.\n-MULTILIB_MATCHES += m68000=mcpu?68000 m68000=march?68000 m68000=mc68000 \\\n-\t\t    m68000=m68302 \\\n-\t\t    m68020=mcpu?68020 m68020=march?68020 m68020=mc68020 \\\n-\t\t    m68030=mcpu?68030 m68030=march?68030 \\\n-\t\t    m68040=mcpu?68040 m68040=march?68040 \\\n-\t\t    m68060=mcpu?68060 m68060=march?68060 \\\n-\t\t    mcpu32=mcpu?cpu32 mcpu32=march?cpu32 mcpu32=m68332\n+# Map -march=* options to the representative -mcpu=* option.\n+MULTILIB_MATCHES += mcpu?68000=march?68000 \\\n+\t\t    mcpu?68020=march?68020 \\\n+\t\t    mcpu?68030=march?68030 \\\n+\t\t    mcpu?68040=march?68040 \\\n+\t\t    mcpu?68060=march?68060 \\\n+\t\t    mcpu?cpu32=march?cpu32\n endif\n \n ifneq ($(M68K_ARCH),m68k)\n@@ -82,9 +75,7 @@ endif\n MULTILIB_MATCHES += \\\n   $(call M68K_AWK, \\\n \t (CPU_NAME != MLIB) $(M68K_MLIB_CPU), \\\n-\t (match(MLIB, \"^68\") || MLIB == \"cpu32\" \\\n-\t  ? \"m\"MLIB\"=mcpu?\"CPU_NAME \\\n-\t  : \"mcpu?\"MLIB\"=mcpu?\"CPU_NAME))\n+\t (\"mcpu?\"MLIB\"=mcpu?\"CPU_NAME))\n \n MULTILIB_EXCEPTIONS :=\n \n@@ -102,9 +93,5 @@ endif\n MULTILIB_EXCEPTIONS := \\\n \t$(patsubst mcpu=$(M68K_MLIB_DEFAULT)/%,%,$(MULTILIB_EXCEPTIONS))\n \n-# Convert all options to canonical form.\n-MULTILIB_EXCEPTIONS := $(shell echo $(MULTILIB_EXCEPTIONS) | \\\n-\t\t\t sed $(CANONICALIZE_OPTIONS))\n-\n LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib"}, {"sha": "dfadb9d59defb4e0ad1f75fdaa9a2dbfc69e367d", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39e7722bbfdce2277b92dd8d0df62399051c7c7a/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39e7722bbfdce2277b92dd8d0df62399051c7c7a/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=39e7722bbfdce2277b92dd8d0df62399051c7c7a", "patch": "@@ -3773,6 +3773,8 @@ be a @option{-mcpu} argument or one of the following values:\n @samp{m68000}, @samp{m68010}, @samp{m68020}, @samp{m68030},\n @samp{m68040}, @samp{m68060}, @samp{m68020-40} and @samp{m68020-60}.\n \n+GCC requires at least binutils version 2.17 on these targets.\n+\n @html\n <hr />\n @end html"}]}