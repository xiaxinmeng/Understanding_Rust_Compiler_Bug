{"sha": "d2286af3d3fe908f84957406aba98eefd1f6e05e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDIyODZhZjNkM2ZlOTA4Zjg0OTU3NDA2YWJhOThlZWZkMWY2ZTA1ZQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2015-01-09T17:01:04Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2015-01-09T17:01:04Z"}, "message": "PR jit/64206: delay cleanup of tempdir if the user has requested debuginfo\n\ngcc/jit/ChangeLog:\n\tPR jit/64206\n\t* docs/internals/test-hello-world.exe.log.txt: Update, the log now\n\tshows tempdir creation/cleanup.\n\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n\t* jit-logging.h (class gcc::jit::log_user): Add gcc::jit::tempdir\n\tto the list of subclasses in the comment.\n\t* jit-playback.c (gcc::jit::playback::context::context): Add a\n\tcomment clarifying when the tempdir gets cleaned up.\n\t(gcc::jit::playback::context::compile): Pass the context's logger,\n\tif any, to the tempdir.\n\t(gcc::jit::playback::context::dlopen_built_dso): When creating the\n\tgcc::jit::result, if GCC_JIT_BOOL_OPTION_DEBUGINFO is set, hand\n\tover ownership of the tempdir to it.\n\t* jit-result.c: Include \"jit-tempdir.h\".\n\t(gcc::jit::result::result): Add tempdir param, saving it as\n\tm_tempdir.\n\t(gcc::jit::result::~result): Delete m_tempdir.\n\t* jit-result.h (gcc::jit::result::result): Add tempdir param.\n\t(gcc::jit::result::m_tempdir): New field.\n\t* jit-tempdir.c (gcc::jit::tempdir::tempdir): Add logger param;\n\tadd JIT_LOG_SCOPE.\n\t(gcc::jit::tempdir::create): Add JIT_LOG_SCOPE to log entry/exit,\n\tand log m_path_template and m_path_tempdir.\n\t(gcc::jit::tempdir::~tempdir): Add JIT_LOG_SCOPE to log\n\tentry/exit, and log the unlink and rmdir calls.\n\t* jit-tempdir.h: Include \"jit-logging.h\".\n\t(class gcc::jit::tempdir): Make this be a subclass of log_user.\n\t(gcc::jit::tempdir::tempdir): Add logger param.\n\t* notes.txt: Update to show the two possible places where the\n\ttempdir can be cleaned up.\n\nFrom-SVN: r219395", "tree": {"sha": "6c908a45d62d11096d3b5ae2fb3675716fcbf926", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c908a45d62d11096d3b5ae2fb3675716fcbf926"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2286af3d3fe908f84957406aba98eefd1f6e05e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2286af3d3fe908f84957406aba98eefd1f6e05e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2286af3d3fe908f84957406aba98eefd1f6e05e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2286af3d3fe908f84957406aba98eefd1f6e05e/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4c470097be7b403c8b424c703144b03a88f22b3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c470097be7b403c8b424c703144b03a88f22b3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c470097be7b403c8b424c703144b03a88f22b3b"}], "stats": {"total": 186, "additions": 165, "deletions": 21}, "files": [{"sha": "9dc133ed3ffd650bee5c4edfdaa778321269888c", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2286af3d3fe908f84957406aba98eefd1f6e05e/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2286af3d3fe908f84957406aba98eefd1f6e05e/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=d2286af3d3fe908f84957406aba98eefd1f6e05e", "patch": "@@ -1,3 +1,36 @@\n+2015-01-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR jit/64206\n+\t* docs/internals/test-hello-world.exe.log.txt: Update, the log now\n+\tshows tempdir creation/cleanup.\n+\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n+\t* jit-logging.h (class gcc::jit::log_user): Add gcc::jit::tempdir\n+\tto the list of subclasses in the comment.\n+\t* jit-playback.c (gcc::jit::playback::context::context): Add a\n+\tcomment clarifying when the tempdir gets cleaned up.\n+\t(gcc::jit::playback::context::compile): Pass the context's logger,\n+\tif any, to the tempdir.\n+\t(gcc::jit::playback::context::dlopen_built_dso): When creating the\n+\tgcc::jit::result, if GCC_JIT_BOOL_OPTION_DEBUGINFO is set, hand\n+\tover ownership of the tempdir to it.\n+\t* jit-result.c: Include \"jit-tempdir.h\".\n+\t(gcc::jit::result::result): Add tempdir param, saving it as\n+\tm_tempdir.\n+\t(gcc::jit::result::~result): Delete m_tempdir.\n+\t* jit-result.h (gcc::jit::result::result): Add tempdir param.\n+\t(gcc::jit::result::m_tempdir): New field.\n+\t* jit-tempdir.c (gcc::jit::tempdir::tempdir): Add logger param;\n+\tadd JIT_LOG_SCOPE.\n+\t(gcc::jit::tempdir::create): Add JIT_LOG_SCOPE to log entry/exit,\n+\tand log m_path_template and m_path_tempdir.\n+\t(gcc::jit::tempdir::~tempdir): Add JIT_LOG_SCOPE to log\n+\tentry/exit, and log the unlink and rmdir calls.\n+\t* jit-tempdir.h: Include \"jit-logging.h\".\n+\t(class gcc::jit::tempdir): Make this be a subclass of log_user.\n+\t(gcc::jit::tempdir::tempdir): Add logger param.\n+\t* notes.txt: Update to show the two possible places where the\n+\ttempdir can be cleaned up.\n+\n 2015-01-08  David Malcolm  <dmalcolm@redhat.com>\n \n \t* libgccjit.h (struct gcc_jit_context): Rewrite the descriptive"}, {"sha": "4c9e2ba6e3fc2d0b62a486e3c7ff59c96e582299", "filename": "gcc/jit/docs/_build/texinfo/libgccjit.texi", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2286af3d3fe908f84957406aba98eefd1f6e05e/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2286af3d3fe908f84957406aba98eefd1f6e05e/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi?ref=d2286af3d3fe908f84957406aba98eefd1f6e05e", "patch": "@@ -19,7 +19,7 @@\n \n @copying\n @quotation\n-libgccjit 5.0.0 (experimental 20150108), January 08, 2015\n+libgccjit 5.0.0 (experimental 20150109), January 09, 2015\n \n David Malcolm\n \n@@ -12468,9 +12468,12 @@ Client Code   . Generated .            libgccjit.so\n               .           .    \u2502     .               .\n               .           .    \u2502 playback::context dtor\n               .           .     \u2500\u2500>  .               .\n-              .           .       \u2502 Cleanup tempdir  .\n+              .           .       \u2502 Normally we cleanup the tempdir here:\n               .           .       \u2502   (\"fake.so\" is unlinked from the\n               .           .       \u2502    filesystem at this point)\n+              .           .       \u2502 If the client code requested debuginfo, the\n+              .           .       \u2502 cleanup happens later (in gcc_jit_result_release)\n+              .           .       \u2502 to make it easier on the debugger (see PR jit/64206)\n               .           .    <\u2500\u2500   .               .\n               .           .    \u2502     .               .\n               .           .    \u2502 end of recording::context::compile ()\n@@ -12494,6 +12497,10 @@ etc\u2502          .           .          .               .\n     \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500>      .               .\n               .           .    \u2502 dlclose () the loaded DSO\n               .           .    \u2502    (code becomes uncallable)\n+              .           .    \u2502     .               .\n+              .           .    \u2502 If the client code requested debuginfo, then\n+              .           .    \u2502 cleanup of the tempdir was delayed.\n+              .           .    \u2502 If that was the case, clean it up now.\n    <\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500      .               .\n    \u2502          .           .          .               .\n \n@@ -12621,6 +12628,12 @@ JIT:   exiting: void gcc::jit::recording::context::validate()\n JIT:   entering: gcc::jit::playback::context::context(gcc::jit::recording::context*)\n JIT:   exiting: gcc::jit::playback::context::context(gcc::jit::recording::context*)\n JIT:   entering: gcc::jit::result* gcc::jit::playback::context::compile()\n+JIT:    entering: gcc::jit::tempdir::tempdir(gcc::jit::logger*, int)\n+JIT:    exiting: gcc::jit::tempdir::tempdir(gcc::jit::logger*, int)\n+JIT:    entering: bool gcc::jit::tempdir::create()\n+JIT:     m_path_template: /tmp/libgccjit-XXXXXX\n+JIT:     m_path_tempdir: /tmp/libgccjit-CKq1M9\n+JIT:    exiting: bool gcc::jit::tempdir::create()\n JIT:    entering: void gcc::jit::playback::context::make_fake_args(vec<char*>*, const char*, vec<gcc::jit::recording::requested_dump>*)\n JIT:    exiting: void gcc::jit::playback::context::make_fake_args(vec<char*>*, const char*, vec<gcc::jit::recording::requested_dump>*)\n JIT:    entering: void gcc::jit::playback::context::acquire_mutex()\n@@ -12671,8 +12684,9 @@ JIT:     argv[5]: -fno-use-linker-plugin\n JIT:     argv[6]: (null)\n JIT:    exiting: void gcc::jit::playback::context::convert_to_dso(const char*)\n JIT:    entering: gcc::jit::result* gcc::jit::playback::context::dlopen_built_dso()\n-JIT:     entering: gcc::jit::result::result(gcc::jit::logger*, void*)\n-JIT:     exiting: gcc::jit::result::result(gcc::jit::logger*, void*)\n+JIT:     GCC_JIT_BOOL_OPTION_DEBUGINFO was set: handing over tempdir to jit::result\n+JIT:     entering: gcc::jit::result::result(gcc::jit::logger*, void*, gcc::jit::tempdir*)\n+JIT:     exiting: gcc::jit::result::result(gcc::jit::logger*, void*, gcc::jit::tempdir*)\n JIT:    exiting: gcc::jit::result* gcc::jit::playback::context::dlopen_built_dso()\n JIT:    entering: void gcc::jit::playback::context::release_mutex()\n JIT:    exiting: void gcc::jit::playback::context::release_mutex()\n@@ -12696,6 +12710,11 @@ JIT: exiting: gcc_jit_context_release\n JIT: entering: gcc_jit_result_release\n JIT:  deleting result: 0x12f75d0\n JIT:  entering: virtual gcc::jit::result::~result()\n+JIT:   entering: gcc::jit::tempdir::~tempdir()\n+JIT:    unlinking .s file: /tmp/libgccjit-CKq1M9/fake.s\n+JIT:    unlinking .so file: /tmp/libgccjit-CKq1M9/fake.so\n+JIT:    removing tempdir: /tmp/libgccjit-CKq1M9\n+JIT:   exiting: gcc::jit::tempdir::~tempdir()\n JIT:  exiting: virtual gcc::jit::result::~result()\n JIT: exiting: gcc_jit_result_release\n JIT: gcc::jit::logger::~logger()"}, {"sha": "113dc351297bdc604647de1954b2470a961df546", "filename": "gcc/jit/docs/internals/test-hello-world.exe.log.txt", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2286af3d3fe908f84957406aba98eefd1f6e05e/gcc%2Fjit%2Fdocs%2Finternals%2Ftest-hello-world.exe.log.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2286af3d3fe908f84957406aba98eefd1f6e05e/gcc%2Fjit%2Fdocs%2Finternals%2Ftest-hello-world.exe.log.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Finternals%2Ftest-hello-world.exe.log.txt?ref=d2286af3d3fe908f84957406aba98eefd1f6e05e", "patch": "@@ -46,6 +46,12 @@ JIT:   exiting: void gcc::jit::recording::context::validate()\n JIT:   entering: gcc::jit::playback::context::context(gcc::jit::recording::context*)\n JIT:   exiting: gcc::jit::playback::context::context(gcc::jit::recording::context*)\n JIT:   entering: gcc::jit::result* gcc::jit::playback::context::compile()\n+JIT:    entering: gcc::jit::tempdir::tempdir(gcc::jit::logger*, int)\n+JIT:    exiting: gcc::jit::tempdir::tempdir(gcc::jit::logger*, int)\n+JIT:    entering: bool gcc::jit::tempdir::create()\n+JIT:     m_path_template: /tmp/libgccjit-XXXXXX\n+JIT:     m_path_tempdir: /tmp/libgccjit-CKq1M9\n+JIT:    exiting: bool gcc::jit::tempdir::create()\n JIT:    entering: void gcc::jit::playback::context::make_fake_args(vec<char*>*, const char*, vec<gcc::jit::recording::requested_dump>*)\n JIT:    exiting: void gcc::jit::playback::context::make_fake_args(vec<char*>*, const char*, vec<gcc::jit::recording::requested_dump>*)\n JIT:    entering: void gcc::jit::playback::context::acquire_mutex()\n@@ -96,8 +102,9 @@ JIT:     argv[5]: -fno-use-linker-plugin\n JIT:     argv[6]: (null)\n JIT:    exiting: void gcc::jit::playback::context::convert_to_dso(const char*)\n JIT:    entering: gcc::jit::result* gcc::jit::playback::context::dlopen_built_dso()\n-JIT:     entering: gcc::jit::result::result(gcc::jit::logger*, void*)\n-JIT:     exiting: gcc::jit::result::result(gcc::jit::logger*, void*)\n+JIT:     GCC_JIT_BOOL_OPTION_DEBUGINFO was set: handing over tempdir to jit::result\n+JIT:     entering: gcc::jit::result::result(gcc::jit::logger*, void*, gcc::jit::tempdir*)\n+JIT:     exiting: gcc::jit::result::result(gcc::jit::logger*, void*, gcc::jit::tempdir*)\n JIT:    exiting: gcc::jit::result* gcc::jit::playback::context::dlopen_built_dso()\n JIT:    entering: void gcc::jit::playback::context::release_mutex()\n JIT:    exiting: void gcc::jit::playback::context::release_mutex()\n@@ -121,6 +128,11 @@ JIT: exiting: gcc_jit_context_release\n JIT: entering: gcc_jit_result_release\n JIT:  deleting result: 0x12f75d0\n JIT:  entering: virtual gcc::jit::result::~result()\n+JIT:   entering: gcc::jit::tempdir::~tempdir()\n+JIT:    unlinking .s file: /tmp/libgccjit-CKq1M9/fake.s\n+JIT:    unlinking .so file: /tmp/libgccjit-CKq1M9/fake.so\n+JIT:    removing tempdir: /tmp/libgccjit-CKq1M9\n+JIT:   exiting: gcc::jit::tempdir::~tempdir()\n JIT:  exiting: virtual gcc::jit::result::~result()\n JIT: exiting: gcc_jit_result_release\n JIT: gcc::jit::logger::~logger()"}, {"sha": "48f223de98160c9ffabffdefad432eb5688857af", "filename": "gcc/jit/jit-logging.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2286af3d3fe908f84957406aba98eefd1f6e05e/gcc%2Fjit%2Fjit-logging.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2286af3d3fe908f84957406aba98eefd1f6e05e/gcc%2Fjit%2Fjit-logging.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-logging.h?ref=d2286af3d3fe908f84957406aba98eefd1f6e05e", "patch": "@@ -112,6 +112,8 @@ log_scope::~log_scope ()\n \n       - class gcc::jit::playback::context\n \n+      - class gcc::jit::tempdir\n+\n       - class gcc::jit::result\n \n    The log_user class keeps the reference-count of a logger up-to-date.  */"}, {"sha": "401977827c408bb383c701b125f1bd1ce756ccf9", "filename": "gcc/jit/jit-playback.c", "status": "modified", "additions": 44, "deletions": 4, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2286af3d3fe908f84957406aba98eefd1f6e05e/gcc%2Fjit%2Fjit-playback.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2286af3d3fe908f84957406aba98eefd1f6e05e/gcc%2Fjit%2Fjit-playback.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.c?ref=d2286af3d3fe908f84957406aba98eefd1f6e05e", "patch": "@@ -104,8 +104,18 @@ playback::context::context (recording::context *ctxt)\n playback::context::~context ()\n {\n   JIT_LOG_SCOPE (get_logger ());\n-  if (m_tempdir)\n-    delete m_tempdir;\n+\n+  /* Normally the playback::context is responsible for cleaning up the\n+     tempdir (including \"fake.so\" within the filesystem).\n+\n+     In the normal case, clean it up now.\n+\n+     However m_tempdir can be NULL if the context has handed over\n+     responsibility for the tempdir cleanup to the jit::result object, so\n+     that the cleanup can be delayed (see PR jit/64206).  If that's the\n+     case this \"delete NULL;\" is a no-op. */\n+  delete m_tempdir;\n+\n   m_functions.release ();\n }\n \n@@ -1554,7 +1564,7 @@ compile ()\n   int keep_intermediates =\n     get_bool_option (GCC_JIT_BOOL_OPTION_KEEP_INTERMEDIATES);\n \n-  m_tempdir = new tempdir (keep_intermediates);\n+  m_tempdir = new tempdir (get_logger (), keep_intermediates);\n   if (!m_tempdir->create ())\n     return NULL;\n \n@@ -1935,7 +1945,37 @@ dlopen_built_dso ()\n     add_error (NULL, \"%s\", error);\n   }\n   if (handle)\n-    result_obj = new result (get_logger (), handle);\n+    {\n+      /* We've successfully dlopened the result; create a\n+\t jit::result object to wrap it.\n+\n+\t We're done with the tempdir for now, but if the user\n+\t has requested debugging, the user's debugger might not\n+\t be capable of dealing with the .so file being unlinked\n+\t immediately, so keep it around until after the result\n+\t is released.  We do this by handing over ownership of\n+\t the jit::tempdir to the result.  See PR jit/64206.  */\n+      tempdir *handover_tempdir;\n+      if (get_bool_option (GCC_JIT_BOOL_OPTION_DEBUGINFO))\n+\t{\n+\t  handover_tempdir = m_tempdir;\n+\t  m_tempdir = NULL;\n+\t  /* The tempdir will eventually be cleaned up in the\n+\t     jit::result's dtor. */\n+\t  log (\"GCC_JIT_BOOL_OPTION_DEBUGINFO was set:\"\n+\t       \" handing over tempdir to jit::result\");\n+\t}\n+      else\n+\t{\n+\t  handover_tempdir = NULL;\n+\t  /* ... and retain ownership of m_tempdir so we clean it\n+\t     up it the playback::context's dtor. */\n+\t  log (\"GCC_JIT_BOOL_OPTION_DEBUGINFO was not set:\"\n+\t       \" retaining ownership of tempdir\");\n+\t}\n+\n+      result_obj = new result (get_logger (), handle, handover_tempdir);\n+    }\n   else\n     result_obj = NULL;\n "}, {"sha": "a9330e591c53d034e42f4219706f0581254af4a9", "filename": "gcc/jit/jit-result.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2286af3d3fe908f84957406aba98eefd1f6e05e/gcc%2Fjit%2Fjit-result.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2286af3d3fe908f84957406aba98eefd1f6e05e/gcc%2Fjit%2Fjit-result.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-result.c?ref=d2286af3d3fe908f84957406aba98eefd1f6e05e", "patch": "@@ -25,16 +25,18 @@ along with GCC; see the file COPYING3.  If not see\n #include \"jit-common.h\"\n #include \"jit-logging.h\"\n #include \"jit-result.h\"\n+#include \"jit-tempdir.h\"\n \n namespace gcc {\n namespace jit {\n \n /* Constructor for gcc::jit::result.  */\n \n result::\n-result(logger *logger, void *dso_handle) :\n+result(logger *logger, void *dso_handle, tempdir *tempdir_) :\n   log_user (logger),\n-  m_dso_handle (dso_handle)\n+  m_dso_handle (dso_handle),\n+  m_tempdir (tempdir_)\n {\n   JIT_LOG_SCOPE (get_logger ());\n }\n@@ -48,6 +50,13 @@ result::~result()\n   JIT_LOG_SCOPE (get_logger ());\n \n   dlclose (m_dso_handle);\n+\n+  /* Responsibility for cleaning up the tempdir (including \"fake.so\" within\n+     the filesystem) might have been handed to us by the playback::context,\n+     so that the cleanup can be delayed (see PR jit/64206).\n+\n+     If so, clean it up now.  */\n+  delete m_tempdir;\n }\n \n /* Attempt to locate the given function by name within the"}, {"sha": "d9073f2694512a938a59a0efbaa45bced0fc0501", "filename": "gcc/jit/jit-result.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2286af3d3fe908f84957406aba98eefd1f6e05e/gcc%2Fjit%2Fjit-result.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2286af3d3fe908f84957406aba98eefd1f6e05e/gcc%2Fjit%2Fjit-result.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-result.h?ref=d2286af3d3fe908f84957406aba98eefd1f6e05e", "patch": "@@ -29,7 +29,7 @@ namespace jit {\n class result : public log_user\n {\n public:\n-  result(logger *logger, void *dso_handle);\n+  result(logger *logger, void *dso_handle, tempdir *tempdir_);\n \n   virtual ~result();\n \n@@ -38,6 +38,7 @@ class result : public log_user\n \n private:\n   void *m_dso_handle;\n+  tempdir *m_tempdir;\n };\n \n } // namespace gcc::jit"}, {"sha": "856b2469b4fd2575c08ffb4a385f402b460c3e9e", "filename": "gcc/jit/jit-tempdir.c", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2286af3d3fe908f84957406aba98eefd1f6e05e/gcc%2Fjit%2Fjit-tempdir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2286af3d3fe908f84957406aba98eefd1f6e05e/gcc%2Fjit%2Fjit-tempdir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-tempdir.c?ref=d2286af3d3fe908f84957406aba98eefd1f6e05e", "patch": "@@ -66,14 +66,16 @@ make_tempdir_path_template ()\n /* The constructor for the jit::tempdir object.\n    The real work is done by the jit::tempdir::create method.  */\n \n-gcc::jit::tempdir::tempdir (int keep_intermediates)\n-  : m_keep_intermediates (keep_intermediates),\n+gcc::jit::tempdir::tempdir (logger *logger, int keep_intermediates)\n+  : log_user (logger),\n+    m_keep_intermediates (keep_intermediates),\n     m_path_template (NULL),\n     m_path_tempdir (NULL),\n     m_path_c_file (NULL),\n     m_path_s_file (NULL),\n     m_path_so_file (NULL)\n {\n+  JIT_LOG_SCOPE (get_logger ());\n }\n \n /* Do the real work of creating the on-disk tempdir.\n@@ -83,16 +85,22 @@ gcc::jit::tempdir::tempdir (int keep_intermediates)\n bool\n gcc::jit::tempdir::create ()\n {\n+  JIT_LOG_SCOPE (get_logger ());\n+\n   m_path_template = make_tempdir_path_template ();\n   if (!m_path_template)\n     return false;\n \n+  log (\"m_path_template: %s\", m_path_template);\n+\n   /* Create tempdir using mkdtemp.  This is created with 0700 perms and\n      is unique.  Hence no other (non-root) users should have access to\n      the paths within it.  */\n   m_path_tempdir = mkdtemp (m_path_template);\n   if (!m_path_tempdir)\n     return false;\n+  log (\"m_path_tempdir: %s\", m_path_tempdir);\n+\n   m_path_c_file = concat (m_path_tempdir, \"/fake.c\", NULL);\n   m_path_s_file = concat (m_path_tempdir, \"/fake.s\", NULL);\n   m_path_so_file = concat (m_path_tempdir, \"/fake.so\", NULL);\n@@ -107,17 +115,28 @@ gcc::jit::tempdir::create ()\n \n gcc::jit::tempdir::~tempdir ()\n {\n+  JIT_LOG_SCOPE (get_logger ());\n+\n   if (m_keep_intermediates)\n     fprintf (stderr, \"intermediate files written to %s\\n\", m_path_tempdir);\n   else\n     {\n       /* Clean up .s/.so and tempdir. */\n       if (m_path_s_file)\n-        unlink (m_path_s_file);\n+\t{\n+\t  log (\"unlinking .s file: %s\", m_path_s_file);\n+\t  unlink (m_path_s_file);\n+\t}\n       if (m_path_so_file)\n-        unlink (m_path_so_file);\n+\t{\n+\t  log (\"unlinking .so file: %s\", m_path_so_file);\n+\t  unlink (m_path_so_file);\n+\t}\n       if (m_path_tempdir)\n-        rmdir (m_path_tempdir);\n+\t{\n+\t  log (\"removing tempdir: %s\", m_path_tempdir);\n+\t  rmdir (m_path_tempdir);\n+\t}\n     }\n \n   free (m_path_template);"}, {"sha": "2553d72f924ec95e307dca36d56a5e447caced54", "filename": "gcc/jit/jit-tempdir.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2286af3d3fe908f84957406aba98eefd1f6e05e/gcc%2Fjit%2Fjit-tempdir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2286af3d3fe908f84957406aba98eefd1f6e05e/gcc%2Fjit%2Fjit-tempdir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-tempdir.h?ref=d2286af3d3fe908f84957406aba98eefd1f6e05e", "patch": "@@ -21,6 +21,8 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef JIT_TEMPDIR_H\n #define JIT_TEMPDIR_H\n \n+#include \"jit-logging.h\"\n+\n namespace gcc {\n \n namespace jit {\n@@ -43,10 +45,10 @@ namespace jit {\n   It is normally deleted from the filesystem in the playback::context's\n   dtor, unless GCC_JIT_BOOL_OPTION_KEEP_INTERMEDIATES was set.  */\n \n-class tempdir\n+class tempdir : public log_user\n {\n  public:\n-  tempdir (int keep_intermediates);\n+  tempdir (logger *logger, int keep_intermediates);\n   ~tempdir ();\n \n   bool create ();"}, {"sha": "7df4a7bdc4e80b7c3f9e4a105eff1be8a4e42b1a", "filename": "gcc/jit/notes.txt", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2286af3d3fe908f84957406aba98eefd1f6e05e/gcc%2Fjit%2Fnotes.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2286af3d3fe908f84957406aba98eefd1f6e05e/gcc%2Fjit%2Fnotes.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fnotes.txt?ref=d2286af3d3fe908f84957406aba98eefd1f6e05e", "patch": "@@ -84,9 +84,12 @@ Client Code   . Generated .            libgccjit.so\n               .           .    \u2502     .               .\n               .           .    \u2502 playback::context dtor\n               .           .     \u2500\u2500>  .               .\n-              .           .       \u2502 Cleanup tempdir  .\n+              .           .       \u2502 Normally we cleanup the tempdir here:\n               .           .       \u2502   (\"fake.so\" is unlinked from the\n               .           .       \u2502    filesystem at this point)\n+              .           .       \u2502 If the client code requested debuginfo, the\n+              .           .       \u2502 cleanup happens later (in gcc_jit_result_release)\n+              .           .       \u2502 to make it easier on the debugger (see PR jit/64206)\n               .           .    <\u2500\u2500   .               .\n               .           .    \u2502     .               .\n               .           .    \u2502 end of recording::context::compile ()\n@@ -110,5 +113,9 @@ etc\u2502          .           .          .               .\n     \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500>      .               .\n               .           .    \u2502 dlclose () the loaded DSO\n               .           .    \u2502    (code becomes uncallable)\n+              .           .    \u2502     .               .\n+              .           .    \u2502 If the client code requested debuginfo, then\n+              .           .    \u2502 cleanup of the tempdir was delayed.\n+              .           .    \u2502 If that was the case, clean it up now.\n    <\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500      .               .\n    \u2502          .           .          .               ."}]}