{"sha": "2d8d3ae29381d13789fa5fa349ec5c302b921aac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ4ZDNhZTI5MzgxZDEzNzg5ZmE1ZmEzNDllYzVjMzAyYjkyMWFhYw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2017-01-20T08:44:35Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-01-20T08:44:35Z"}, "message": "Fix IPA CP where it forgot to add a reference in cgraph (PR ipa/71190).\n\n2017-01-20  Martin Liska  <mliska@suse.cz>\n\n\tPR ipa/71190\n\t* cgraph.h (maybe_create_reference): Remove argument and\n\tupdate comment.\n\t* cgraphclones.c (cgraph_node::create_virtual_clone): Remove one\n\targument.\n\t* ipa-cp.c (create_specialized_node): Likewise.\n\t* symtab.c (symtab_node::maybe_create_reference): Handle\n\tVAR_DECLs and ADDR_EXPRs and select ipa_ref_use type.\n\nFrom-SVN: r244687", "tree": {"sha": "79ae1578993b051576a1c049cc48e85c5e63a05d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79ae1578993b051576a1c049cc48e85c5e63a05d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d8d3ae29381d13789fa5fa349ec5c302b921aac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d8d3ae29381d13789fa5fa349ec5c302b921aac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d8d3ae29381d13789fa5fa349ec5c302b921aac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d8d3ae29381d13789fa5fa349ec5c302b921aac/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a809d56440d84fd363aa542a37d69275fd2930c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a809d56440d84fd363aa542a37d69275fd2930c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a809d56440d84fd363aa542a37d69275fd2930c5"}], "stats": {"total": 46, "additions": 31, "deletions": 15}, "files": [{"sha": "9ff10e0c34e76120542d5552f2607cad70348a3f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d8d3ae29381d13789fa5fa349ec5c302b921aac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d8d3ae29381d13789fa5fa349ec5c302b921aac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d8d3ae29381d13789fa5fa349ec5c302b921aac", "patch": "@@ -1,3 +1,14 @@\n+2017-01-20  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/71190\n+\t* cgraph.h (maybe_create_reference): Remove argument and\n+\tupdate comment.\n+\t* cgraphclones.c (cgraph_node::create_virtual_clone): Remove one\n+\targument.\n+\t* ipa-cp.c (create_specialized_node): Likewise.\n+\t* symtab.c (symtab_node::maybe_create_reference): Handle\n+\tVAR_DECLs and ADDR_EXPRs and select ipa_ref_use type.\n+\n 2017-01-20  Martin Liska  <mliska@suse.cz>\n \n \t* read-rtl-function.c (function_reader::create_function): Use"}, {"sha": "5410a71176ac5583e8a8fdd6fa648aab4b1dedd4", "filename": "gcc/cgraph.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d8d3ae29381d13789fa5fa349ec5c302b921aac/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d8d3ae29381d13789fa5fa349ec5c302b921aac/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=2d8d3ae29381d13789fa5fa349ec5c302b921aac", "patch": "@@ -131,11 +131,9 @@ class GTY((desc (\"%h.type\"), tag (\"SYMTAB_SYMBOL\"),\n \t\t\t     enum ipa_ref_use use_type, gimple *stmt);\n \n   /* If VAL is a reference to a function or a variable, add a reference from\n-     this symtab_node to the corresponding symbol table node.  USE_TYPE specify\n-     type of the use and STMT the statement (if it exists).  Return the new\n+     this symtab_node to the corresponding symbol table node.  Return the new\n      reference or NULL if none was created.  */\n-  ipa_ref *maybe_create_reference (tree val, enum ipa_ref_use use_type,\n-\t\t\t\t   gimple *stmt);\n+  ipa_ref *maybe_create_reference (tree val, gimple *stmt);\n \n   /* Clone all references from symtab NODE to this symtab_node.  */\n   void clone_references (symtab_node *node);"}, {"sha": "c2337e8455364f74450bc6bef4d2159bd265bf08", "filename": "gcc/cgraphclones.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d8d3ae29381d13789fa5fa349ec5c302b921aac/gcc%2Fcgraphclones.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d8d3ae29381d13789fa5fa349ec5c302b921aac/gcc%2Fcgraphclones.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphclones.c?ref=2d8d3ae29381d13789fa5fa349ec5c302b921aac", "patch": "@@ -624,7 +624,7 @@ cgraph_node::create_virtual_clone (vec<cgraph_edge *> redirect_callers,\n       || in_lto_p)\n     new_node->unique_name = true;\n   FOR_EACH_VEC_SAFE_ELT (tree_map, i, map)\n-    new_node->maybe_create_reference (map->new_tree, IPA_REF_ADDR, NULL);\n+    new_node->maybe_create_reference (map->new_tree, NULL);\n \n   if (ipa_transforms_to_apply.exists ())\n     new_node->ipa_transforms_to_apply"}, {"sha": "aa3c9973a66b0f7e8266e610b5752c1302916428", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d8d3ae29381d13789fa5fa349ec5c302b921aac/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d8d3ae29381d13789fa5fa349ec5c302b921aac/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=2d8d3ae29381d13789fa5fa349ec5c302b921aac", "patch": "@@ -3786,7 +3786,7 @@ create_specialized_node (struct cgraph_node *node,\n \t\t\t\t\t args_to_skip, \"constprop\");\n   ipa_set_node_agg_value_chain (new_node, aggvals);\n   for (av = aggvals; av; av = av->next)\n-    new_node->maybe_create_reference (av->value, IPA_REF_ADDR, NULL);\n+    new_node->maybe_create_reference (av->value, NULL);\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {"}, {"sha": "87febdc212f27553115f6fc3f2da996f7a53a562", "filename": "gcc/symtab.c", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d8d3ae29381d13789fa5fa349ec5c302b921aac/gcc%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d8d3ae29381d13789fa5fa349ec5c302b921aac/gcc%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymtab.c?ref=2d8d3ae29381d13789fa5fa349ec5c302b921aac", "patch": "@@ -588,18 +588,25 @@ symtab_node::create_reference (symtab_node *referred_node,\n   return ref;\n }\n \n-/* If VAL is a reference to a function or a variable, add a reference from\n-   this symtab_node to the corresponding symbol table node.  USE_TYPE specify\n-   type of the use and STMT the statement (if it exists).  Return the new\n-   reference or NULL if none was created.  */\n-\n ipa_ref *\n-symtab_node::maybe_create_reference (tree val, enum ipa_ref_use use_type,\n-\t\t\t\t     gimple *stmt)\n+symtab_node::maybe_create_reference (tree val, gimple *stmt)\n {\n   STRIP_NOPS (val);\n-  if (TREE_CODE (val) != ADDR_EXPR)\n-    return NULL;\n+  ipa_ref_use use_type;\n+\n+  switch (TREE_CODE (val))\n+    {\n+    case VAR_DECL:\n+      use_type = IPA_REF_LOAD;\n+      break;\n+    case ADDR_EXPR:\n+      use_type = IPA_REF_ADDR;\n+      break;\n+    default:\n+      gcc_assert (!handled_component_p (val));\n+      return NULL;\n+    }\n+\n   val = get_base_var (val);\n   if (val && VAR_OR_FUNCTION_DECL_P (val))\n     {"}]}