{"sha": "7e45bd18daca810d7ecbd83ffcd9e97d31de0f12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U0NWJkMThkYWNhODEwZDdlY2JkODNmZmNkOWU5N2QzMWRlMGYxMg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-06-03T16:16:46Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-06-03T16:16:46Z"}, "message": "re PR c++/21336 (Internal compiler error when using custom new operators)\n\n\tPR c++/21336\n\t* cp-tree.h (grok_op_properties): Remove friendp parameter.\n\t* decl.c (grokfndecl): Adjust call.\n\t(grok_op_properties): Determine the class of which the function is\n\ta member by looking at its DECL_CONTEXT, not current_class_type.\n\t* pt.c (tsubst_decl): Adjust call to grok_op_properties.\n\n\tPR c++/21336\n\t* g++.dg/template/new2.C: New test.\n\nFrom-SVN: r100541", "tree": {"sha": "70ac825253c7f826918234c12f73d0876c812aa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70ac825253c7f826918234c12f73d0876c812aa0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e45bd18daca810d7ecbd83ffcd9e97d31de0f12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e45bd18daca810d7ecbd83ffcd9e97d31de0f12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e45bd18daca810d7ecbd83ffcd9e97d31de0f12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e45bd18daca810d7ecbd83ffcd9e97d31de0f12/comments", "author": null, "committer": null, "parents": [{"sha": "83cd747fd944f49180cc60ddb1c3a9f889fb6b63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83cd747fd944f49180cc60ddb1c3a9f889fb6b63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83cd747fd944f49180cc60ddb1c3a9f889fb6b63"}], "stats": {"total": 119, "additions": 76, "deletions": 43}, "files": [{"sha": "28dc483398b8c46730e460fcb1edede484741be5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e45bd18daca810d7ecbd83ffcd9e97d31de0f12/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e45bd18daca810d7ecbd83ffcd9e97d31de0f12/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7e45bd18daca810d7ecbd83ffcd9e97d31de0f12", "patch": "@@ -1,3 +1,12 @@\n+2005-06-03  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/21336\n+\t* cp-tree.h (grok_op_properties): Remove friendp parameter.\n+\t* decl.c (grokfndecl): Adjust call.\n+\t(grok_op_properties): Determine the class of which the function is\n+\ta member by looking at its DECL_CONTEXT, not current_class_type.\n+\t* pt.c (tsubst_decl): Adjust call to grok_op_properties.\n+\n 2005-06-02  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* method.c (synthesize_method): Add addtional arg to warning call."}, {"sha": "0f3dfa5c89049e4765fe6ffb12c980bb7a2a0eaa", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e45bd18daca810d7ecbd83ffcd9e97d31de0f12/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e45bd18daca810d7ecbd83ffcd9e97d31de0f12/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=7e45bd18daca810d7ecbd83ffcd9e97d31de0f12", "patch": "@@ -3766,7 +3766,7 @@ extern int copy_fn_p\t\t\t\t(tree);\n extern tree get_scope_of_declarator             (const cp_declarator *);\n extern void grok_special_member_properties\t(tree);\n extern int grok_ctor_properties\t\t\t(tree, tree);\n-extern void grok_op_properties\t\t\t(tree, int, bool);\n+extern void grok_op_properties\t\t\t(tree, bool);\n extern tree xref_tag\t\t\t\t(enum tag_types, tree, tag_scope, bool);\n extern tree xref_tag_from_type\t\t\t(tree, tree, tag_scope);\n extern void xref_basetypes\t\t\t(tree, tree);"}, {"sha": "6b278ae2878e61710fbe8a631873e3cdb31d8be0", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 46, "deletions": 40, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e45bd18daca810d7ecbd83ffcd9e97d31de0f12/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e45bd18daca810d7ecbd83ffcd9e97d31de0f12/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=7e45bd18daca810d7ecbd83ffcd9e97d31de0f12", "patch": "@@ -5610,7 +5610,7 @@ grokfndecl (tree ctype,\n     }\n \n   if (IDENTIFIER_OPNAME_P (DECL_NAME (decl)))\n-    grok_op_properties (decl, friendp, /*complain=*/true);\n+    grok_op_properties (decl, /*complain=*/true);\n \n   if (ctype && decl_function_context (decl))\n     DECL_NO_STATIC_CHAIN (decl) = 1;\n@@ -8608,23 +8608,25 @@ unary_op_p (enum tree_code code)\n    errors are issued for invalid declarations.  */\n \n void\n-grok_op_properties (tree decl, int friendp, bool complain)\n+grok_op_properties (tree decl, bool complain)\n {\n   tree argtypes = TYPE_ARG_TYPES (TREE_TYPE (decl));\n   tree argtype;\n   int methodp = (TREE_CODE (TREE_TYPE (decl)) == METHOD_TYPE);\n   tree name = DECL_NAME (decl);\n   enum tree_code operator_code;\n   int arity;\n+  tree class_type;\n \n   /* Count the number of arguments.  */\n   for (argtype = argtypes, arity = 0;\n        argtype && argtype != void_list_node;\n        argtype = TREE_CHAIN (argtype))\n     ++arity;\n \n-  if (current_class_type == NULL_TREE)\n-    friendp = 1;\n+  class_type = DECL_CONTEXT (decl);\n+  if (class_type && !CLASS_TYPE_P (class_type))\n+    class_type = NULL_TREE;\n \n   if (DECL_CONV_FN_P (decl))\n     operator_code = TYPE_EXPR;\n@@ -8653,30 +8655,28 @@ grok_op_properties (tree decl, int friendp, bool complain)\n   gcc_assert (operator_code != LAST_CPLUS_TREE_CODE);\n   SET_OVERLOADED_OPERATOR_CODE (decl, operator_code);\n \n-  if (! friendp)\n-    {\n-      switch (operator_code)\n-\t{\n-\tcase NEW_EXPR:\n-\t  TYPE_HAS_NEW_OPERATOR (current_class_type) = 1;\n-\t  break;\n+  if (class_type)\n+    switch (operator_code)\n+      {\n+      case NEW_EXPR:\n+\tTYPE_HAS_NEW_OPERATOR (class_type) = 1;\n+\tbreak;\n \n-\tcase DELETE_EXPR:\n-\t  TYPE_GETS_DELETE (current_class_type) |= 1;\n-\t  break;\n+      case DELETE_EXPR:\n+\tTYPE_GETS_DELETE (class_type) |= 1;\n+\tbreak;\n \n-\tcase VEC_NEW_EXPR:\n-\t  TYPE_HAS_ARRAY_NEW_OPERATOR (current_class_type) = 1;\n-\t  break;\n+      case VEC_NEW_EXPR:\n+\tTYPE_HAS_ARRAY_NEW_OPERATOR (class_type) = 1;\n+\tbreak;\n \n-\tcase VEC_DELETE_EXPR:\n-\t  TYPE_GETS_DELETE (current_class_type) |= 2;\n-\t  break;\n+      case VEC_DELETE_EXPR:\n+\tTYPE_GETS_DELETE (class_type) |= 2;\n+\tbreak;\n \n-\tdefault:\n-\t  break;\n-\t}\n-    }\n+      default:\n+\tbreak;\n+      }\n \n     /* [basic.std.dynamic.allocation]/1:\n \n@@ -8755,32 +8755,38 @@ grok_op_properties (tree decl, int friendp, bool complain)\n       if (operator_code == CALL_EXPR)\n \treturn;\n \n-      if (IDENTIFIER_TYPENAME_P (name) && ! DECL_TEMPLATE_INFO (decl))\n+      /* Warn about conversion operators that will never be used.  */\n+      if (IDENTIFIER_TYPENAME_P (name) \n+\t  && ! DECL_TEMPLATE_INFO (decl)\n+\t  && warn_conversion\n+\t  /* Warn only declaring the function; there is no need to\n+\t     warn again about out-of-class definitions.  */\n+\t  && class_type == current_class_type)\n \t{\n \t  tree t = TREE_TYPE (name);\n-\t  if (! friendp)\n-\t    {\n-\t      int ref = (TREE_CODE (t) == REFERENCE_TYPE);\n-\t      const char *what = 0;\n+\t  int ref = (TREE_CODE (t) == REFERENCE_TYPE);\n+\t  const char *what = 0;\n \n-\t      if (ref)\n-\t\tt = TYPE_MAIN_VARIANT (TREE_TYPE (t));\n+\t  if (ref)\n+\t    t = TYPE_MAIN_VARIANT (TREE_TYPE (t));\n \n-\t      if (TREE_CODE (t) == VOID_TYPE)\n-\t        what = \"void\";\n-\t      else if (t == current_class_type)\n+\t  if (TREE_CODE (t) == VOID_TYPE)\n+\t    what = \"void\";\n+\t  else if (class_type)\n+\t    {\n+\t      if (t == class_type)\n \t\twhat = \"the same type\";\n \t      /* Don't force t to be complete here.  */\n \t      else if (IS_AGGR_TYPE (t)\n \t\t       && COMPLETE_TYPE_P (t)\n-\t\t       && DERIVED_FROM_P (t, current_class_type))\n+\t\t       && DERIVED_FROM_P (t, class_type))\n \t\twhat = \"a base class\";\n-\n-\t      if (what && warn_conversion)\n-\t\twarning (0, \"conversion to %s%s will never use a type \"\n-                         \"conversion operator\",\n-\t\t\t ref ? \"a reference to \" : \"\", what);\n \t    }\n+\n+\t  if (what)\n+\t    warning (0, \"conversion to %s%s will never use a type \"\n+\t\t     \"conversion operator\",\n+\t\t     ref ? \"a reference to \" : \"\", what);\n \t}\n       if (operator_code == COND_EXPR)\n \t{"}, {"sha": "ad1e5f33bfd4fb86020050fab857617c2611120f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e45bd18daca810d7ecbd83ffcd9e97d31de0f12/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e45bd18daca810d7ecbd83ffcd9e97d31de0f12/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=7e45bd18daca810d7ecbd83ffcd9e97d31de0f12", "patch": "@@ -6494,8 +6494,7 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \t      clone_function_decl (r, /*update_method_vec_p=*/0);\n \t  }\n \telse if (IDENTIFIER_OPNAME_P (DECL_NAME (r)))\n-\t  grok_op_properties (r, DECL_FRIEND_P (r),\n-\t\t\t      (complain & tf_error) != 0);\n+\t  grok_op_properties (r, (complain & tf_error) != 0);\n \n \tif (DECL_FRIEND_P (t) && DECL_FRIEND_CONTEXT (t))\n \t  SET_DECL_FRIEND_CONTEXT (r,"}, {"sha": "523873461f4571f9989425dea28fe7424bfe2341", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e45bd18daca810d7ecbd83ffcd9e97d31de0f12/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e45bd18daca810d7ecbd83ffcd9e97d31de0f12/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7e45bd18daca810d7ecbd83ffcd9e97d31de0f12", "patch": "@@ -1,3 +1,8 @@\n+2005-06-03  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/21336\n+\t* g++.dg/template/new2.C: New test.\n+\n 2005-06-03  Josh Conner  <jconner@apple.com>\n \n \t* gcc.dg/ppc-vector-memcpy.c (foo): Use non-zero values for"}, {"sha": "682ca6e18620f06c4415e18257bcdbe0b0956468", "filename": "gcc/testsuite/g++.dg/template/new2.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e45bd18daca810d7ecbd83ffcd9e97d31de0f12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnew2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e45bd18daca810d7ecbd83ffcd9e97d31de0f12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnew2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnew2.C?ref=7e45bd18daca810d7ecbd83ffcd9e97d31de0f12", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/21336\n+\n+typedef __SIZE_TYPE__ size_t;\n+template<class _T> void* operator new( size_t Size, _T&);\n+struct B {\n+  int a;\n+  int* m() {\n+    return new(a) int;\n+  }\n+};\n+B* n() {\n+  return new B();\n+}\n+"}]}