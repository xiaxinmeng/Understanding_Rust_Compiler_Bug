{"sha": "f079167a3064f11a7d8c17ef78389559435bad9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA3OTE2N2EzMDY0ZjExYTdkOGMxN2VmNzgzODk1NTk0MzViYWQ5ZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2016-11-18T10:04:53Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2016-11-18T10:04:53Z"}, "message": "Use rtx_mode_t instead of std::make_pair\n\nThis change makes the code less sensitive to the exact type of the mode,\ni.e. it forces a conversion where necessary.  This becomes important\nwhen wrappers like scalar_int_mode and scalar_mode can also be used\ninstead of machine_mode.\n\nUsing rtx_mode_t also abstracts away the representation.  The fact that\nit's a std::pair rather than a custom class isn't important to users of\nthe interface.\n\ngcc/\n2016-11-18  Richard Sandiford  <richard.sandiford@arm.com>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\n\t* combine.c (try_combine): Use rtx_mode_t instead of std::make_pair.\n\t* dwarf2out.c (mem_loc_descriptor, loc_descriptor): Likewise.\n\t(add_const_value_attribute): Likewise.\n\t* explow.c (plus_constant): Likewise.\n\t* expmed.c (expand_mult, make_tree): Likewise.\n\t* expr.c (convert_modes): Likewise.\n\t* loop-doloop.c (doloop_optimize): Likewise.\n\t* postreload.c (reload_cse_simplify_set): Likewise.\n\t* simplify-rtx.c (simplify_const_unary_operation): Likewise.\n\t(simplify_binary_operation_1, simplify_const_binary_operation):\n\t(simplify_const_relational_operation, simplify_immed_subreg): Likewise.\n\t* wide-int.h: Update documentation to recommend rtx_mode_t\n\tinstead of std::make_pair.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r242586", "tree": {"sha": "088a5faa65bea2b992c890d73bbec5c40806cb74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/088a5faa65bea2b992c890d73bbec5c40806cb74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f079167a3064f11a7d8c17ef78389559435bad9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f079167a3064f11a7d8c17ef78389559435bad9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f079167a3064f11a7d8c17ef78389559435bad9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f079167a3064f11a7d8c17ef78389559435bad9d/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "899ca90e6defb9d63e03764ceb9afe0fc94fbdb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/899ca90e6defb9d63e03764ceb9afe0fc94fbdb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/899ca90e6defb9d63e03764ceb9afe0fc94fbdb1"}], "stats": {"total": 81, "additions": 49, "deletions": 32}, "files": [{"sha": "a63c7952ce15407b947228398dfef6e6f2777cdf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f079167a3064f11a7d8c17ef78389559435bad9d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f079167a3064f11a7d8c17ef78389559435bad9d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f079167a3064f11a7d8c17ef78389559435bad9d", "patch": "@@ -1,3 +1,21 @@\n+2016-11-18  Richard Sandiford  <richard.sandiford@arm.com>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* combine.c (try_combine): Use rtx_mode_t instead of std::make_pair.\n+\t* dwarf2out.c (mem_loc_descriptor, loc_descriptor): Likewise.\n+\t(add_const_value_attribute): Likewise.\n+\t* explow.c (plus_constant): Likewise.\n+\t* expmed.c (expand_mult, make_tree): Likewise.\n+\t* expr.c (convert_modes): Likewise.\n+\t* loop-doloop.c (doloop_optimize): Likewise.\n+\t* postreload.c (reload_cse_simplify_set): Likewise.\n+\t* simplify-rtx.c (simplify_const_unary_operation): Likewise.\n+\t(simplify_binary_operation_1, simplify_const_binary_operation):\n+\t(simplify_const_relational_operation, simplify_immed_subreg): Likewise.\n+\t* wide-int.h: Update documentation to recommend rtx_mode_t\n+\tinstead of std::make_pair.\n+\n 2016-11-18  Richard Sandiford  <richard.sandiford@arm.com>\n  \t    Alan Hayward  <alan.hayward@arm.com>\n  \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "93621bd02fbb61ac7634f82ccf28e20d331bd23b", "filename": "gcc/combine.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f079167a3064f11a7d8c17ef78389559435bad9d/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f079167a3064f11a7d8c17ef78389559435bad9d/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=f079167a3064f11a7d8c17ef78389559435bad9d", "patch": "@@ -2870,8 +2870,8 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n \t  rtx outer = SET_SRC (temp_expr);\n \n \t  wide_int o\n-\t    = wi::insert (std::make_pair (outer, GET_MODE (SET_DEST (temp_expr))),\n-\t\t\t  std::make_pair (inner, GET_MODE (dest)),\n+\t    = wi::insert (rtx_mode_t (outer, GET_MODE (SET_DEST (temp_expr))),\n+\t\t\t  rtx_mode_t (inner, GET_MODE (dest)),\n \t\t\t  offset, width);\n \n \t  combine_merges++;"}, {"sha": "e468a4c3299d34f4927896ad15d8cf97076076dc", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f079167a3064f11a7d8c17ef78389559435bad9d/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f079167a3064f11a7d8c17ef78389559435bad9d/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=f079167a3064f11a7d8c17ef78389559435bad9d", "patch": "@@ -15127,7 +15127,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \t  mem_loc_result->dw_loc_oprnd2.val_class\n \t    = dw_val_class_wide_int;\n \t  mem_loc_result->dw_loc_oprnd2.v.val_wide = ggc_alloc<wide_int> ();\n-\t  *mem_loc_result->dw_loc_oprnd2.v.val_wide = std::make_pair (rtl, mode);\n+\t  *mem_loc_result->dw_loc_oprnd2.v.val_wide = rtx_mode_t (rtl, mode);\n \t}\n       break;\n \n@@ -15670,7 +15670,7 @@ loc_descriptor (rtx rtl, machine_mode mode,\n \t\t\t\t      GET_MODE_SIZE (mode), 0);\n \t  loc_result->dw_loc_oprnd2.val_class = dw_val_class_wide_int;\n \t  loc_result->dw_loc_oprnd2.v.val_wide = ggc_alloc<wide_int> ();\n-\t  *loc_result->dw_loc_oprnd2.v.val_wide = std::make_pair (rtl, mode);\n+\t  *loc_result->dw_loc_oprnd2.v.val_wide = rtx_mode_t (rtl, mode);\n \t}\n       break;\n \n@@ -15695,7 +15695,7 @@ loc_descriptor (rtx rtl, machine_mode mode,\n \t      for (i = 0, p = array; i < length; i++, p += elt_size)\n \t\t{\n \t\t  rtx elt = CONST_VECTOR_ELT (rtl, i);\n-\t\t  insert_wide_int (std::make_pair (elt, imode), p, elt_size);\n+\t\t  insert_wide_int (rtx_mode_t (elt, imode), p, elt_size);\n \t\t}\n \t      break;\n \n@@ -18357,7 +18357,7 @@ add_const_value_attribute (dw_die_ref die, rtx rtl)\n \n     case CONST_WIDE_INT:\n       {\n-\twide_int w1 = std::make_pair (rtl, MAX_MODE_INT);\n+\twide_int w1 = rtx_mode_t (rtl, MAX_MODE_INT);\n \tunsigned int prec = MIN (wi::min_precision (w1, UNSIGNED),\n \t\t\t\t (unsigned int)CONST_WIDE_INT_NUNITS (rtl) * HOST_BITS_PER_WIDE_INT);\n \twide_int w = wi::zext (w1, prec);\n@@ -18404,7 +18404,7 @@ add_const_value_attribute (dw_die_ref die, rtx rtl)\n \t    for (i = 0, p = array; i < length; i++, p += elt_size)\n \t      {\n \t\trtx elt = CONST_VECTOR_ELT (rtl, i);\n-\t\tinsert_wide_int (std::make_pair (elt, imode), p, elt_size);\n+\t\tinsert_wide_int (rtx_mode_t (elt, imode), p, elt_size);\n \t      }\n \t    break;\n "}, {"sha": "75af333c1c318bcd17ef166d6de27263eafb83cc", "filename": "gcc/explow.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f079167a3064f11a7d8c17ef78389559435bad9d/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f079167a3064f11a7d8c17ef78389559435bad9d/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=f079167a3064f11a7d8c17ef78389559435bad9d", "patch": "@@ -98,8 +98,7 @@ plus_constant (machine_mode mode, rtx x, HOST_WIDE_INT c,\n   switch (code)\n     {\n     CASE_CONST_SCALAR_INT:\n-      return immed_wide_int_const (wi::add (std::make_pair (x, mode), c),\n-\t\t\t\t   mode);\n+      return immed_wide_int_const (wi::add (rtx_mode_t (x, mode), c), mode);\n     case MEM:\n       /* If this is a reference to the constant pool, try replacing it with\n \t a reference to a new constant.  If the resulting address isn't"}, {"sha": "a21a632ab189f9226879ccf3704401060e61df0e", "filename": "gcc/expmed.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f079167a3064f11a7d8c17ef78389559435bad9d/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f079167a3064f11a7d8c17ef78389559435bad9d/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=f079167a3064f11a7d8c17ef78389559435bad9d", "patch": "@@ -3276,7 +3276,7 @@ expand_mult (machine_mode mode, rtx op0, rtx op1, rtx target,\n       else if (CONST_DOUBLE_AS_INT_P (scalar_op1))\n #endif\n \t{\n-\t  int shift = wi::exact_log2 (std::make_pair (scalar_op1, mode));\n+\t  int shift = wi::exact_log2 (rtx_mode_t (scalar_op1, mode));\n \t  /* Perfect power of 2 (other than 1, which is handled above).  */\n \t  if (shift > 0)\n \t    return expand_shift (LSHIFT_EXPR, mode, op0,\n@@ -5092,7 +5092,7 @@ make_tree (tree type, rtx x)\n     {\n     case CONST_INT:\n     case CONST_WIDE_INT:\n-      t = wide_int_to_tree (type, std::make_pair (x, TYPE_MODE (type)));\n+      t = wide_int_to_tree (type, rtx_mode_t (x, TYPE_MODE (type)));\n       return t;\n \n     case CONST_DOUBLE:"}, {"sha": "a51c16478d3edc23daa98a751f848eb334d39d3b", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f079167a3064f11a7d8c17ef78389559435bad9d/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f079167a3064f11a7d8c17ef78389559435bad9d/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=f079167a3064f11a7d8c17ef78389559435bad9d", "patch": "@@ -652,7 +652,7 @@ convert_modes (machine_mode mode, machine_mode oldmode, rtx x, int unsignedp)\n \t assume that all the bits are significant.  */\n       if (GET_MODE_CLASS (oldmode) != MODE_INT)\n \toldmode = MAX_MODE_INT;\n-      wide_int w = wide_int::from (std::make_pair (x, oldmode),\n+      wide_int w = wide_int::from (rtx_mode_t (x, oldmode),\n \t\t\t\t   GET_MODE_PRECISION (mode),\n \t\t\t\t   unsignedp ? UNSIGNED : SIGNED);\n       return immed_wide_int_const (w, mode);"}, {"sha": "1dff2ff3f88f2c9fbab8c94d3435f5da8f32f7ba", "filename": "gcc/loop-doloop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f079167a3064f11a7d8c17ef78389559435bad9d/gcc%2Floop-doloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f079167a3064f11a7d8c17ef78389559435bad9d/gcc%2Floop-doloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-doloop.c?ref=f079167a3064f11a7d8c17ef78389559435bad9d", "patch": "@@ -662,7 +662,7 @@ doloop_optimize (struct loop *loop)\n     }\n \n   if (desc->const_iter)\n-    iterations = widest_int::from (std::make_pair (desc->niter_expr, mode),\n+    iterations = widest_int::from (rtx_mode_t (desc->niter_expr, mode),\n \t\t\t\t   UNSIGNED);\n   else\n     iterations = 0;"}, {"sha": "fcb6bc4bd50d10500379b728797f9f2a0172fe83", "filename": "gcc/postreload.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f079167a3064f11a7d8c17ef78389559435bad9d/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f079167a3064f11a7d8c17ef78389559435bad9d/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=f079167a3064f11a7d8c17ef78389559435bad9d", "patch": "@@ -290,13 +290,13 @@ reload_cse_simplify_set (rtx set, rtx_insn *insn)\n \t      switch (extend_op)\n \t\t{\n \t\tcase ZERO_EXTEND:\n-\t\t  result = wide_int::from (std::make_pair (this_rtx,\n-\t\t\t\t\t\t\t   GET_MODE (src)),\n+\t\t  result = wide_int::from (rtx_mode_t (this_rtx,\n+\t\t\t\t\t\t       GET_MODE (src)),\n \t\t\t\t\t   BITS_PER_WORD, UNSIGNED);\n \t\t  break;\n \t\tcase SIGN_EXTEND:\n-\t\t  result = wide_int::from (std::make_pair (this_rtx,\n-\t\t\t\t\t\t\t   GET_MODE (src)),\n+\t\t  result = wide_int::from (rtx_mode_t (this_rtx,\n+\t\t\t\t\t\t       GET_MODE (src)),\n \t\t\t\t\t   BITS_PER_WORD, SIGNED);\n \t\t  break;\n \t\tdefault:"}, {"sha": "fde244302481ce2b71211d12717383f1ecfbf8d0", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f079167a3064f11a7d8c17ef78389559435bad9d/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f079167a3064f11a7d8c17ef78389559435bad9d/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=f079167a3064f11a7d8c17ef78389559435bad9d", "patch": "@@ -1716,7 +1716,7 @@ simplify_const_unary_operation (enum rtx_code code, machine_mode mode,\n \t  op_mode = MAX_MODE_INT;\n \t}\n \n-      real_from_integer (&d, mode, std::make_pair (op, op_mode), SIGNED);\n+      real_from_integer (&d, mode, rtx_mode_t (op, op_mode), SIGNED);\n \n       /* Avoid the folding if flag_signaling_nans is on and\n          operand is a signaling NaN.  */\n@@ -1740,7 +1740,7 @@ simplify_const_unary_operation (enum rtx_code code, machine_mode mode,\n \t  op_mode = MAX_MODE_INT;\n \t}\n \n-      real_from_integer (&d, mode, std::make_pair (op, op_mode), UNSIGNED);\n+      real_from_integer (&d, mode, rtx_mode_t (op, op_mode), UNSIGNED);\n \n       /* Avoid the folding if flag_signaling_nans is on and\n          operand is a signaling NaN.  */\n@@ -1755,7 +1755,7 @@ simplify_const_unary_operation (enum rtx_code code, machine_mode mode,\n     {\n       wide_int result;\n       machine_mode imode = op_mode == VOIDmode ? mode : op_mode;\n-      rtx_mode_t op0 = std::make_pair (op, imode);\n+      rtx_mode_t op0 = rtx_mode_t (op, imode);\n       int int_value;\n \n #if TARGET_SUPPORTS_WIDE_INT == 0\n@@ -2150,7 +2150,7 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n \t  else if (GET_CODE (lhs) == MULT\n \t\t   && CONST_SCALAR_INT_P (XEXP (lhs, 1)))\n \t    {\n-\t      coeff0 = std::make_pair (XEXP (lhs, 1), mode);\n+\t      coeff0 = rtx_mode_t (XEXP (lhs, 1), mode);\n \t      lhs = XEXP (lhs, 0);\n \t    }\n \t  else if (GET_CODE (lhs) == ASHIFT\n@@ -2171,7 +2171,7 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n \t  else if (GET_CODE (rhs) == MULT\n \t\t   && CONST_INT_P (XEXP (rhs, 1)))\n \t    {\n-\t      coeff1 = std::make_pair (XEXP (rhs, 1), mode);\n+\t      coeff1 = rtx_mode_t (XEXP (rhs, 1), mode);\n \t      rhs = XEXP (rhs, 0);\n \t    }\n \t  else if (GET_CODE (rhs) == ASHIFT\n@@ -2327,7 +2327,7 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n \t  else if (GET_CODE (lhs) == MULT\n \t\t   && CONST_SCALAR_INT_P (XEXP (lhs, 1)))\n \t    {\n-\t      coeff0 = std::make_pair (XEXP (lhs, 1), mode);\n+\t      coeff0 = rtx_mode_t (XEXP (lhs, 1), mode);\n \t      lhs = XEXP (lhs, 0);\n \t    }\n \t  else if (GET_CODE (lhs) == ASHIFT\n@@ -2348,7 +2348,7 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n \t  else if (GET_CODE (rhs) == MULT\n \t\t   && CONST_INT_P (XEXP (rhs, 1)))\n \t    {\n-\t      negcoeff1 = wi::neg (std::make_pair (XEXP (rhs, 1), mode));\n+\t      negcoeff1 = wi::neg (rtx_mode_t (XEXP (rhs, 1), mode));\n \t      rhs = XEXP (rhs, 0);\n \t    }\n \t  else if (GET_CODE (rhs) == ASHIFT\n@@ -2523,7 +2523,7 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n       /* Convert multiply by constant power of two into shift.  */\n       if (CONST_SCALAR_INT_P (trueop1))\n \t{\n-\t  val = wi::exact_log2 (std::make_pair (trueop1, mode));\n+\t  val = wi::exact_log2 (rtx_mode_t (trueop1, mode));\n \t  if (val >= 0)\n \t    return simplify_gen_binary (ASHIFT, mode, op0, GEN_INT (val));\n \t}\n@@ -4046,8 +4046,8 @@ simplify_const_binary_operation (enum rtx_code code, machine_mode mode,\n     {\n       wide_int result;\n       bool overflow;\n-      rtx_mode_t pop0 = std::make_pair (op0, mode);\n-      rtx_mode_t pop1 = std::make_pair (op1, mode);\n+      rtx_mode_t pop0 = rtx_mode_t (op0, mode);\n+      rtx_mode_t pop1 = rtx_mode_t (op1, mode);\n \n #if TARGET_SUPPORTS_WIDE_INT == 0\n       /* This assert keeps the simplification from producing a result\n@@ -5081,8 +5081,8 @@ simplify_const_relational_operation (enum rtx_code code,\n \t largest int representable on the target is as good as\n \t infinite.  */\n       machine_mode cmode = (mode == VOIDmode) ? MAX_MODE_INT : mode;\n-      rtx_mode_t ptrueop0 = std::make_pair (trueop0, cmode);\n-      rtx_mode_t ptrueop1 = std::make_pair (trueop1, cmode);\n+      rtx_mode_t ptrueop0 = rtx_mode_t (trueop0, cmode);\n+      rtx_mode_t ptrueop1 = rtx_mode_t (trueop1, cmode);\n \n       if (wi::eq_p (ptrueop0, ptrueop1))\n \treturn comparison_result (code, CMP_EQ);\n@@ -5738,7 +5738,7 @@ simplify_immed_subreg (machine_mode outermode, rtx op,\n \n \tcase CONST_WIDE_INT:\n \t  {\n-\t    rtx_mode_t val = std::make_pair (el, innermode);\n+\t    rtx_mode_t val = rtx_mode_t (el, innermode);\n \t    unsigned char extend = wi::sign_mask (val);\n \n \t    for (i = 0; i < elem_bitsize; i += value_bit)"}, {"sha": "72f74bed9ec01b3c79e9bb3c630d16ffb3a6b882", "filename": "gcc/wide-int.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f079167a3064f11a7d8c17ef78389559435bad9d/gcc%2Fwide-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f079167a3064f11a7d8c17ef78389559435bad9d/gcc%2Fwide-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwide-int.h?ref=f079167a3064f11a7d8c17ef78389559435bad9d", "patch": "@@ -158,10 +158,10 @@ along with GCC; see the file COPYING3.  If not see\n    However, a little more syntax is required for rtl constants since\n    they do not have an explicit precision.  To make an rtl into a\n    wide_int, you have to pair it with a mode.  The canonical way to do\n-   this is with std::make_pair as in:\n+   this is with rtx_mode_t as in:\n \n \t     rtx r = ...\n-\t     wide_int x = std::make_pair (r, mode);\n+\t     wide_int x = rtx_mode_t (r, mode);\n \n    Similarly, a wide_int can only be constructed from a host value if\n    the target precision is given explicitly, such as in:"}]}