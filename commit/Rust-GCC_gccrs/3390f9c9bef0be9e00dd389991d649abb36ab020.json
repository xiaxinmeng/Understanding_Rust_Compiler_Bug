{"sha": "3390f9c9bef0be9e00dd389991d649abb36ab020", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM5MGY5YzliZWYwYmU5ZTAwZGQzODk5OTFkNjQ5YWJiMzZhYjAyMA==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2003-08-19T20:29:01Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2003-08-19T20:29:01Z"}, "message": "PR c++/10538, PR c/5582\n\nChangeLog:\n        * langhooks-def.h (lhd_decl_uninit): Declare.\n        (LANG_HOOKS_DECL_UNINIT): New macro.\n        (LANG_HOOKS_INITIALIZER): Adjust.\n        * langhooks.h (struct lang_hooks): Add new field\n        decl_uninit.\n        * langhooks.c (lhd_decl_uninit): Define.\n        * c-common.c (c_decl_uninit_1): New function.\n        (c_decl_uninit): New function.\n        (warn_init_self): Define.\n        * c-common.h (c_decl_uninit): Declare.\n        (warn_init_self): Declare.\n        * c.opt: Introduce -Winit-self.\n        * c-opts.c (c_common_handle_options): Set warn_init_self.\n        * c-lang.c (LANG_HOOKS_DECL_UNINIT): Define.\n        * objc/objc-lang.c  (LANG_HOOKS_DECL_UNINIT): Define.\n        * function.c (uninitialized_vars_warning): Call the language hook.\n        * doc/invoke.texi: Document -Winit-self.\n\n\ncp/ChangeLog:\n        * cp/cp-lang.c (LANG_HOOKS_DECL_UNINIT): Define.\n\n\ntestsuite:\n        * gcc.dg/uninit-D.c: New Test.\n        * gcc.dg/uninit-E.c: New Test.\n        * gcc.dg/uninit-F.c: New Test.\n        * gcc.dg/uninit-G.c: New Test.\n\nFrom-SVN: r70574", "tree": {"sha": "ad286296a88a627c032b917d2d413f56d8875840", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad286296a88a627c032b917d2d413f56d8875840"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3390f9c9bef0be9e00dd389991d649abb36ab020", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3390f9c9bef0be9e00dd389991d649abb36ab020", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3390f9c9bef0be9e00dd389991d649abb36ab020", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3390f9c9bef0be9e00dd389991d649abb36ab020/comments", "author": null, "committer": null, "parents": [{"sha": "02a2edc088afbf09c3c82f5e9d37b58b7155a0ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02a2edc088afbf09c3c82f5e9d37b58b7155a0ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02a2edc088afbf09c3c82f5e9d37b58b7155a0ad"}], "stats": {"total": 50, "additions": 46, "deletions": 4}, "files": [{"sha": "d38a6e450726efd3fbfd59d534863bbd339a25b5", "filename": "gcc/c-common.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3390f9c9bef0be9e00dd389991d649abb36ab020/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3390f9c9bef0be9e00dd389991d649abb36ab020/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=3390f9c9bef0be9e00dd389991d649abb36ab020", "patch": "@@ -573,6 +573,12 @@ extern int warn_main;\n \n extern int warn_sequence_point;\n \n+/* Nonzero means warn about uninitialized variable when it is initialized with itself. \n+   For example: int i = i;, GCC will not warn about this when warn_init_self is nonzero. */\n+\n+extern int warn_init_self;\n+\n+\n /* Nonzero means to warn about compile-time division by zero.  */\n extern int warn_div_by_zero;\n \n@@ -1289,6 +1295,7 @@ extern void builtin_define_with_value (const char *, const char *, int);\n extern void c_stddef_cpp_builtins (void);\n extern void fe_file_change (const struct line_map *);\n extern int c_estimate_num_insns (tree decl);\n+extern bool c_decl_uninit (tree t);\n \n /* In c-ppoutput.c  */\n extern void init_pp_output (FILE *);"}, {"sha": "f8ab4165f4e1d8a2c95fb4ea757a57a65f4a9e63", "filename": "gcc/c-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3390f9c9bef0be9e00dd389991d649abb36ab020/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3390f9c9bef0be9e00dd389991d649abb36ab020/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=3390f9c9bef0be9e00dd389991d649abb36ab020", "patch": "@@ -87,6 +87,8 @@ enum c_language_kind c_language = clk_c;\n #define LANG_HOOKS_FUNCTION_LEAVE_NESTED c_pop_function_context\n #undef LANG_HOOKS_DUP_LANG_SPECIFIC_DECL\n #define LANG_HOOKS_DUP_LANG_SPECIFIC_DECL c_dup_lang_specific_decl\n+#undef LANG_HOOKS_DECL_UNINIT\n+#define LANG_HOOKS_DECL_UNINIT c_decl_uninit\n \n /* Attribute hooks.  */\n #undef LANG_HOOKS_COMMON_ATTRIBUTE_TABLE"}, {"sha": "da342a89aec19a7ee0d60d1abceb9081117e18dc", "filename": "gcc/c-opts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3390f9c9bef0be9e00dd389991d649abb36ab020/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3390f9c9bef0be9e00dd389991d649abb36ab020/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=3390f9c9bef0be9e00dd389991d649abb36ab020", "patch": "@@ -475,6 +475,10 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       warn_format_zero_length = value;\n       break;\n \n+    case OPT_Winit_self:\n+      warn_init_self = value;\n+      break;\n+\n     case OPT_Wimplicit:\n       set_Wimplicit (value);\n       break;"}, {"sha": "bfe81aa3d8f67bf9905b43e05c0913a38d0de55b", "filename": "gcc/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3390f9c9bef0be9e00dd389991d649abb36ab020/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3390f9c9bef0be9e00dd389991d649abb36ab020/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=3390f9c9bef0be9e00dd389991d649abb36ab020", "patch": "@@ -238,6 +238,10 @@ C ObjC\n Wformat=\n C ObjC C++ ObjC++ Joined\n \n+Winit-self\n+C ObjC C++ ObjC++\n+Warn about variables which are initialized to themselves.\n+\n Wimplicit\n C ObjC C++ ObjC++\n "}, {"sha": "8ca93610dab806ec692126632e892e35fde6abea", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3390f9c9bef0be9e00dd389991d649abb36ab020/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3390f9c9bef0be9e00dd389991d649abb36ab020/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=3390f9c9bef0be9e00dd389991d649abb36ab020", "patch": "@@ -106,6 +106,8 @@ static void cxx_initialize_diagnostics (diagnostic_context *);\n #define LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL cxx_warn_unused_global_decl\n #undef LANG_HOOKS_WRITE_GLOBALS\n #define LANG_HOOKS_WRITE_GLOBALS lhd_do_nothing\n+#undef LANG_HOOKS_DECL_UNINIT\n+#define LANG_HOOKS_DECL_UNINIT c_decl_uninit\n \n \n #undef LANG_HOOKS_FUNCTION_INIT"}, {"sha": "029c469659dc0a085b1e5547380c9800ee4b258e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3390f9c9bef0be9e00dd389991d649abb36ab020/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3390f9c9bef0be9e00dd389991d649abb36ab020/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3390f9c9bef0be9e00dd389991d649abb36ab020", "patch": "@@ -214,7 +214,7 @@ in the following sections.\n -Wimplicit  -Wimplicit-int  @gol\n -Wimplicit-function-declaration @gol\n -Werror-implicit-function-declaration @gol\n--Wimport  -Winline  -Winvalid-pch  -Wno-endif-labels @gol\n+-Winit-self Wimport  -Winline  -Winvalid-pch  -Wno-endif-labels @gol\n -Wno-invalid-offsetof @gol\n -Wlarger-than-@var{len}  -Wlong-long @gol\n -Wmain  -Wmissing-braces @gol\n@@ -2055,6 +2055,24 @@ requiring a non-null value by the @code{nonnull} function attribute.\n @option{-Wnonnull} is included in @option{-Wall} and @option{-Wformat}.  It\n can be disabled with the @option{-Wno-nonnull} option.\n \n+@item -Winit-self @r{(C, C++, and Objective-C only)} \n+@opindex Winit-self\n+Enable warning about uninitialized variables which are initalized with themselves.\n+Note this option can only be used with the @option{-Wuninitialized} option and \n+that only works with @option{-O}.\n+\n+For an example, the following code will not warn about i being uninitialized \n+without this option:\n+@smallexample\n+@group\n+int f()\n+@{\n+  int i = i;\n+  return i;\n+@}\n+@end group\n+@end smallexample\n+\n @item -Wimplicit-int\n @opindex Wimplicit-int\n Warn when a declaration does not specify a type.\n@@ -2265,6 +2283,9 @@ because they require data flow information that is computed only\n when optimizing.  If you don't specify @option{-O}, you simply won't\n get these warnings.\n \n+If you want to warn about code which uses the uninitialized value of the\n+variable in its own initializer, use the @option{-Winit-self} option.\n+\n These warnings occur only for variables that are candidates for\n register allocation.  Therefore, they do not occur for a variable that\n is declared @code{volatile}, or whose address is taken, or whose size"}, {"sha": "fd7c7f793503002132dda18b5b9b765a813929a0", "filename": "gcc/function.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3390f9c9bef0be9e00dd389991d649abb36ab020/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3390f9c9bef0be9e00dd389991d649abb36ab020/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=3390f9c9bef0be9e00dd389991d649abb36ab020", "patch": "@@ -5564,9 +5564,9 @@ uninitialized_vars_warning (tree block)\n \t     with a nonzero DECL_INITIAL had an initializer, so do not\n \t     claim it is potentially uninitialized.\n \n-\t     We do not care about the actual value in DECL_INITIAL, so we do\n-\t     not worry that it may be a dangling pointer.  */\n-\t  && DECL_INITIAL (decl) == NULL_TREE\n+\t     When the DECL_INITIAL is NULL call the language hook to tell us\n+\t     if we want to warn.  */\n+\t  && (DECL_INITIAL (decl) == NULL_TREE || lang_hooks.decl_uninit (decl))\n \t  && regno_uninitialized (REGNO (DECL_RTL (decl))))\n \twarning (\"%H'%D' might be used uninitialized in this function\",\n                  &DECL_SOURCE_LOCATION (decl), decl);"}, {"sha": "7a330ce3b61249eb32152fec7e7ab0213e944de3", "filename": "gcc/objc/objc-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3390f9c9bef0be9e00dd389991d649abb36ab020/gcc%2Fobjc%2Fobjc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3390f9c9bef0be9e00dd389991d649abb36ab020/gcc%2Fobjc%2Fobjc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-lang.c?ref=3390f9c9bef0be9e00dd389991d649abb36ab020", "patch": "@@ -79,6 +79,8 @@ enum c_language_kind c_language = clk_objc;\n #define LANG_HOOKS_DECL_PRINTABLE_NAME objc_printable_name\n #undef LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL\n #define LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL c_warn_unused_global_decl\n+#undef LANG_HOOKS_DECL_UNINIT\n+#define LANG_HOOKS_DECL_UNINIT c_decl_uninit\n \n #undef LANG_HOOKS_FUNCTION_ENTER_NESTED\n #define LANG_HOOKS_FUNCTION_ENTER_NESTED c_push_function_context"}]}