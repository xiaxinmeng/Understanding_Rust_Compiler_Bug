{"sha": "bb5d97112a8272c608b18167de9255949129890c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI1ZDk3MTEyYTgyNzJjNjA4YjE4MTY3ZGU5MjU1OTQ5MTI5ODkwYw==", "commit": {"author": {"name": "Jackson Woodruff", "email": "jackson.woodruff@arm.com", "date": "2017-09-13T16:49:42Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2017-09-13T16:49:42Z"}, "message": "[AArch64, PATCH] Improve Neon store of zero\n\nCommitted on behalf of Jackson Woodruff.\n\n---\ngcc/\n\n\t* config/aarch64/constraints.md (Umq): New constraint.\n\t* config/aarch64/aarch64-simd.md (*aarch64_simd_mov<mode>):\n\tChange to use Umq.\n\t(mov<mode>): Update condition.\n\ngcc/testsuite/\n\n\t* gcc.target/aarch64/simd/vect_str_zero.c: Update testcase.\n\nFrom-SVN: r252387", "tree": {"sha": "5d4a67986485b085379caf78c8faf44a219b815d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d4a67986485b085379caf78c8faf44a219b815d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb5d97112a8272c608b18167de9255949129890c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb5d97112a8272c608b18167de9255949129890c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb5d97112a8272c608b18167de9255949129890c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb5d97112a8272c608b18167de9255949129890c/comments", "author": null, "committer": null, "parents": [{"sha": "267bbb6fd17860dd09e69493ae031cc3e977301d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/267bbb6fd17860dd09e69493ae031cc3e977301d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/267bbb6fd17860dd09e69493ae031cc3e977301d"}], "stats": {"total": 42, "additions": 35, "deletions": 7}, "files": [{"sha": "1f941d4e8e87f915b501fe8799b198731636f31e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5d97112a8272c608b18167de9255949129890c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5d97112a8272c608b18167de9255949129890c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb5d97112a8272c608b18167de9255949129890c", "patch": "@@ -1,3 +1,10 @@\n+2017-09-13  Jackson Woodruff  <jackson.woodruff@arm.com>\n+\n+\t* config/aarch64/constraints.md (Umq): New constraint.\n+\t* config/aarch64/aarch64-simd.md (*aarch64_simd_mov<mode>):\n+\tChange to use Umq.\n+\t(mov<mode>): Update condition.\n+\n 2017-09-13  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gimple-ssa-store-merging.c (sort_by_bitpos): Compare store order"}, {"sha": "70e9339e2757324630b7333454169d82389c61d5", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5d97112a8272c608b18167de9255949129890c/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5d97112a8272c608b18167de9255949129890c/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=bb5d97112a8272c608b18167de9255949129890c", "patch": "@@ -23,10 +23,17 @@\n \t(match_operand:VALL_F16 1 \"general_operand\" \"\"))]\n   \"TARGET_SIMD\"\n   \"\n-    if (GET_CODE (operands[0]) == MEM\n-\t&& !(aarch64_simd_imm_zero (operands[1], <MODE>mode)\n-\t     && aarch64_legitimate_address_p (<MODE>mode, operands[0],\n-\t\t\t\t\t      PARALLEL, 1)))\n+  /* Force the operand into a register if it is not an\n+     immediate whose use can be replaced with xzr.\n+     If the mode is 16 bytes wide, then we will be doing\n+     a stp in DI mode, so we check the validity of that.\n+     If the mode is 8 bytes wide, then we will do doing a\n+     normal str, so the check need not apply.  */\n+  if (GET_CODE (operands[0]) == MEM\n+      && !(aarch64_simd_imm_zero (operands[1], <MODE>mode)\n+\t   && ((GET_MODE_SIZE (<MODE>mode) == 16\n+\t\t&& aarch64_mem_pair_operand (operands[0], DImode))\n+\t       || GET_MODE_SIZE (<MODE>mode) == 8)))\n       operands[1] = force_reg (<MODE>mode, operands[1]);\n   \"\n )\n@@ -126,7 +133,7 @@\n \n (define_insn \"*aarch64_simd_mov<mode>\"\n   [(set (match_operand:VQ 0 \"nonimmediate_operand\"\n-\t\t\"=w, Ump,  m,  w, ?r, ?w, ?r, w\")\n+\t\t\"=w, Umq,  m,  w, ?r, ?w, ?r, w\")\n \t(match_operand:VQ 1 \"general_operand\"\n \t\t\"m,  Dz, w,  w,  w,  r,  r, Dn\"))]\n   \"TARGET_SIMD"}, {"sha": "3649fb48a33454c208a6b81e051fdd316c495710", "filename": "gcc/config/aarch64/constraints.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5d97112a8272c608b18167de9255949129890c/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5d97112a8272c608b18167de9255949129890c/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fconstraints.md?ref=bb5d97112a8272c608b18167de9255949129890c", "patch": "@@ -156,6 +156,14 @@\n  (and (match_code \"mem\")\n       (match_test \"REG_P (XEXP (op, 0))\")))\n \n+(define_memory_constraint \"Umq\"\n+  \"@internal\n+   A memory address which uses a base register with an offset small enough for\n+   a load/store pair operation in DI mode.\"\n+   (and (match_code \"mem\")\n+\t(match_test \"aarch64_legitimate_address_p (DImode, XEXP (op, 0),\n+\t\t\t\t\t\t   PARALLEL, false)\")))\n+\n (define_memory_constraint \"Ump\"\n   \"@internal\n   A memory address suitable for a load/store pair operation.\""}, {"sha": "86d030de2d9f4f68a26d972eabc79d892e9d9680", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5d97112a8272c608b18167de9255949129890c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5d97112a8272c608b18167de9255949129890c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bb5d97112a8272c608b18167de9255949129890c", "patch": "@@ -1,3 +1,7 @@\n+2017-09-13  Jackson Woodruff  <jackson.woodruff@arm.com>\n+\n+\t* gcc.target/aarch64/simd/vect_str_zero.c: Update testcase.\n+\n 2017-09-13  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/82167"}, {"sha": "00cbf20a0b293e71ed713f0c08d89d8a525fa785", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vect_str_zero.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5d97112a8272c608b18167de9255949129890c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvect_str_zero.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5d97112a8272c608b18167de9255949129890c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvect_str_zero.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvect_str_zero.c?ref=bb5d97112a8272c608b18167de9255949129890c", "patch": "@@ -7,7 +7,7 @@ void\n f (uint32x4_t *p)\n {\n   uint32x4_t x = { 0, 0, 0, 0};\n-  p[1] = x;\n+  p[4] = x;\n \n   /* { dg-final { scan-assembler \"stp\\txzr, xzr,\" } } */\n }\n@@ -16,7 +16,9 @@ void\n g (float32x2_t *p)\n {\n   float32x2_t x = {0.0, 0.0};\n-  p[0] = x;\n+  p[400] = x;\n \n   /* { dg-final { scan-assembler \"str\\txzr, \" } } */\n }\n+\n+/* { dg-final { scan-assembler-not \"add\\tx\\[0-9\\]\\+, x0, \\[0-9\\]+\" } } */"}]}