{"sha": "2a937fb5cf805c7311f1d9ecf98b60bedc922165", "node_id": "C_kwDOANBUbNoAKDJhOTM3ZmI1Y2Y4MDVjNzMxMWYxZDllY2Y5OGI2MGJlZGM5MjIxNjU", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-01-31T12:06:31Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-01-31T16:47:39Z"}, "message": "RISC-V: Add integer binary vv C/C++ API support\n\nAdd vector intrinsic for integer binary operation, but only vector to\nvector form.\n\ngcc/ChangeLog:\n\n\t* config/riscv/constraints.md (vj): New.\n\t(vk): Ditto\n\t* config/riscv/iterators.md: Add more opcode.\n\t* config/riscv/predicates.md (vector_arith_operand): New.\n\t(vector_neg_arith_operand): New.\n\t(vector_shift_operand): New.\n\t* config/riscv/riscv-vector-builtins-bases.cc (class binop): New.\n\t* config/riscv/riscv-vector-builtins-bases.h: (vadd): New.\n\t(vsub): Ditto.\n\t(vand): Ditto.\n\t(vor): Ditto.\n\t(vxor): Ditto.\n\t(vsll): Ditto.\n\t(vsra): Ditto.\n\t(vsrl): Ditto.\n\t(vmin): Ditto.\n\t(vmax): Ditto.\n\t(vminu): Ditto.\n\t(vmaxu): Ditto.\n\t(vmul): Ditto.\n\t(vdiv): Ditto.\n\t(vrem): Ditto.\n\t(vdivu): Ditto.\n\t(vremu): Ditto.\n\t* config/riscv/riscv-vector-builtins-functions.def (vadd): New.\n\t(vsub): Ditto.\n\t(vand): Ditto.\n\t(vor): Ditto.\n\t(vxor): Ditto.\n\t(vsll): Ditto.\n\t(vsra): Ditto.\n\t(vsrl): Ditto.\n\t(vmin): Ditto.\n\t(vmax): Ditto.\n\t(vminu): Ditto.\n\t(vmaxu): Ditto.\n\t(vmul): Ditto.\n\t(vdiv): Ditto.\n\t(vrem): Ditto.\n\t(vdivu): Ditto.\n\t(vremu): Ditto.\n\t* config/riscv/riscv-vector-builtins-shapes.cc (struct binop_def): New.\n\t* config/riscv/riscv-vector-builtins-shapes.h (binop): New.\n\t* config/riscv/riscv-vector-builtins.cc (DEF_RVV_I_OPS): New.\n\t(DEF_RVV_U_OPS): New.\n\t(rvv_arg_type_info::get_base_vector_type): Handle\n\tRVV_BASE_shift_vector.\n\t(rvv_arg_type_info::get_tree_type): Ditto.\n\t* config/riscv/riscv-vector-builtins.h (enum rvv_base_type): Add\n\tRVV_BASE_shift_vector.\n\t* config/riscv/riscv.cc (riscv_print_operand): Handle 'V'.\n\t* config/riscv/vector-iterators.md: Handle more opcode.\n\t* config/riscv/vector.md (@pred_<optab><mode>): New.", "tree": {"sha": "1cd0c62e587c4a9325eb05aae96d27e890897ffa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1cd0c62e587c4a9325eb05aae96d27e890897ffa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a937fb5cf805c7311f1d9ecf98b60bedc922165", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a937fb5cf805c7311f1d9ecf98b60bedc922165", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a937fb5cf805c7311f1d9ecf98b60bedc922165", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a937fb5cf805c7311f1d9ecf98b60bedc922165/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "623730d954a051941ae6a098f851bef308916ca0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/623730d954a051941ae6a098f851bef308916ca0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/623730d954a051941ae6a098f851bef308916ca0"}], "stats": {"total": 429, "additions": 421, "deletions": 8}, "files": [{"sha": "3637380ee471ad70065b9c62d9c2c41afe0fcffb", "filename": "gcc/config/riscv/constraints.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a937fb5cf805c7311f1d9ecf98b60bedc922165/gcc%2Fconfig%2Friscv%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a937fb5cf805c7311f1d9ecf98b60bedc922165/gcc%2Fconfig%2Friscv%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fconstraints.md?ref=2a937fb5cf805c7311f1d9ecf98b60bedc922165", "patch": "@@ -140,6 +140,16 @@\n   (and (match_code \"const_vector\")\n        (match_test \"riscv_vector::const_vec_all_same_in_range_p (op, -16, 15)\")))\n \n+(define_constraint \"vj\"\n+  \"A vector negated 5-bit signed immediate.\"\n+  (and (match_code \"const_vector\")\n+       (match_test \"riscv_vector::const_vec_all_same_in_range_p (op, -15, 16)\")))\n+\n+(define_constraint \"vk\"\n+  \"A vector 5-bit unsigned immediate.\"\n+  (and (match_code \"const_vector\")\n+       (match_test \"riscv_vector::const_vec_all_same_in_range_p (op, 0, 31)\")))\n+\n (define_constraint \"Wc0\"\n   \"@internal\n  A constraint that matches a vector of immediate all zeros.\""}, {"sha": "9561403419b0415dc148e614fb534bb2e5aebc44", "filename": "gcc/config/riscv/iterators.md", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a937fb5cf805c7311f1d9ecf98b60bedc922165/gcc%2Fconfig%2Friscv%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a937fb5cf805c7311f1d9ecf98b60bedc922165/gcc%2Fconfig%2Friscv%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fiterators.md?ref=2a937fb5cf805c7311f1d9ecf98b60bedc922165", "patch": "@@ -196,7 +196,12 @@\n \t\t\t (xor \"xor\")\n \t\t\t (and \"and\")\n \t\t\t (plus \"add\")\n-\t\t\t (minus \"sub\")])\n+\t\t\t (minus \"sub\")\n+\t\t\t (smin \"smin\")\n+\t\t\t (smax \"smax\")\n+\t\t\t (umin \"umin\")\n+\t\t\t (umax \"umax\")\n+\t\t\t (mult \"mul\")])\n \n ;; <or_optab> code attributes\n (define_code_attr or_optab [(ior \"ior\")\n@@ -214,7 +219,12 @@\n \t\t\t(xor \"xor\")\n \t\t\t(and \"and\")\n \t\t\t(plus \"add\")\n-\t\t\t(minus \"sub\")])\n+\t\t\t(minus \"sub\")\n+\t\t\t(smin \"min\")\n+\t\t\t(smax \"max\")\n+\t\t\t(umin \"minu\")\n+\t\t\t(umax \"maxu\")\n+\t\t\t(mult \"mul\")])\n \n ; atomics code attribute\n (define_code_attr atomic_optab"}, {"sha": "57f7ddfbd7dd30bcbfb1e4686ad46c6df8f46f35", "filename": "gcc/config/riscv/predicates.md", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a937fb5cf805c7311f1d9ecf98b60bedc922165/gcc%2Fconfig%2Friscv%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a937fb5cf805c7311f1d9ecf98b60bedc922165/gcc%2Fconfig%2Friscv%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fpredicates.md?ref=2a937fb5cf805c7311f1d9ecf98b60bedc922165", "patch": "@@ -286,6 +286,21 @@\n \t    (match_test \"GET_CODE (op) == UNSPEC\n \t\t\t && (XINT (op, 1) == UNSPEC_VUNDEF)\"))))\n \n+(define_predicate \"vector_arith_operand\"\n+  (ior (match_operand 0 \"register_operand\")\n+       (and (match_code \"const_vector\")\n+            (match_test \"riscv_vector::const_vec_all_same_in_range_p (op, -16, 15)\"))))\n+\n+(define_predicate \"vector_neg_arith_operand\"\n+  (ior (match_operand 0 \"register_operand\")\n+       (and (match_code \"const_vector\")\n+            (match_test \"riscv_vector::const_vec_all_same_in_range_p (op, -15, 16)\"))))\n+\n+(define_predicate \"vector_shift_operand\"\n+  (ior (match_operand 0 \"register_operand\")\n+       (and (match_code \"const_vector\")\n+            (match_test \"riscv_vector::const_vec_all_same_in_range_p (op, 0, 31)\"))))\n+\n (define_special_predicate \"pmode_reg_or_0_operand\"\n   (ior (match_operand 0 \"const_0_operand\")\n        (match_operand 0 \"pmode_register_operand\")))"}, {"sha": "f4256fedc5be5ef611ae59896c8008224635bc3d", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.cc", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a937fb5cf805c7311f1d9ecf98b60bedc922165/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a937fb5cf805c7311f1d9ecf98b60bedc922165/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc?ref=2a937fb5cf805c7311f1d9ecf98b60bedc922165", "patch": "@@ -154,6 +154,19 @@ class loadstore : public function_base\n   }\n };\n \n+/* Implements\n+ * vadd/vsub/vrsub/vand/vor/vxor/vsll/vsra/vsrl/vmin/vmax/vminu/vmaxu/vdiv/vrem/vdivu/vremu/vsadd/vsaddu/vssub/vssubu.\n+ */\n+template<rtx_code CODE>\n+class binop : public function_base\n+{\n+public:\n+  rtx expand (function_expander &e) const override\n+  {\n+    return e.use_exact_insn (code_for_pred (CODE, e.vector_mode ()));\n+  }\n+};\n+\n static CONSTEXPR const vsetvl<false> vsetvl_obj;\n static CONSTEXPR const vsetvl<true> vsetvlmax_obj;\n static CONSTEXPR const loadstore<false, LST_UNIT_STRIDE, false> vle_obj;\n@@ -178,6 +191,24 @@ static CONSTEXPR const loadstore<true, LST_INDEXED, true> vsoxei8_obj;\n static CONSTEXPR const loadstore<true, LST_INDEXED, true> vsoxei16_obj;\n static CONSTEXPR const loadstore<true, LST_INDEXED, true> vsoxei32_obj;\n static CONSTEXPR const loadstore<true, LST_INDEXED, true> vsoxei64_obj;\n+static CONSTEXPR const binop<PLUS> vadd_obj;\n+static CONSTEXPR const binop<MINUS> vsub_obj;\n+static CONSTEXPR const binop<MINUS> vrsub_obj;\n+static CONSTEXPR const binop<AND> vand_obj;\n+static CONSTEXPR const binop<IOR> vor_obj;\n+static CONSTEXPR const binop<XOR> vxor_obj;\n+static CONSTEXPR const binop<ASHIFT> vsll_obj;\n+static CONSTEXPR const binop<ASHIFTRT> vsra_obj;\n+static CONSTEXPR const binop<LSHIFTRT> vsrl_obj;\n+static CONSTEXPR const binop<SMIN> vmin_obj;\n+static CONSTEXPR const binop<SMAX> vmax_obj;\n+static CONSTEXPR const binop<UMIN> vminu_obj;\n+static CONSTEXPR const binop<UMAX> vmaxu_obj;\n+static CONSTEXPR const binop<MULT> vmul_obj;\n+static CONSTEXPR const binop<DIV> vdiv_obj;\n+static CONSTEXPR const binop<MOD> vrem_obj;\n+static CONSTEXPR const binop<UDIV> vdivu_obj;\n+static CONSTEXPR const binop<UMOD> vremu_obj;\n \n /* Declare the function base NAME, pointing it to an instance\n    of class <NAME>_obj.  */\n@@ -208,5 +239,22 @@ BASE (vsoxei8)\n BASE (vsoxei16)\n BASE (vsoxei32)\n BASE (vsoxei64)\n+BASE (vadd)\n+BASE (vsub)\n+BASE (vand)\n+BASE (vor)\n+BASE (vxor)\n+BASE (vsll)\n+BASE (vsra)\n+BASE (vsrl)\n+BASE (vmin)\n+BASE (vmax)\n+BASE (vminu)\n+BASE (vmaxu)\n+BASE (vmul)\n+BASE (vdiv)\n+BASE (vrem)\n+BASE (vdivu)\n+BASE (vremu)\n \n } // end namespace riscv_vector"}, {"sha": "364de4bae6e18bc91e08b34b8aa31b1c717e291b", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a937fb5cf805c7311f1d9ecf98b60bedc922165/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a937fb5cf805c7311f1d9ecf98b60bedc922165/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h?ref=2a937fb5cf805c7311f1d9ecf98b60bedc922165", "patch": "@@ -48,6 +48,23 @@ extern const function_base *const vsoxei8;\n extern const function_base *const vsoxei16;\n extern const function_base *const vsoxei32;\n extern const function_base *const vsoxei64;\n+extern const function_base *const vadd;\n+extern const function_base *const vsub;\n+extern const function_base *const vand;\n+extern const function_base *const vor;\n+extern const function_base *const vxor;\n+extern const function_base *const vsll;\n+extern const function_base *const vsra;\n+extern const function_base *const vsrl;\n+extern const function_base *const vmin;\n+extern const function_base *const vmax;\n+extern const function_base *const vminu;\n+extern const function_base *const vmaxu;\n+extern const function_base *const vmul;\n+extern const function_base *const vdiv;\n+extern const function_base *const vrem;\n+extern const function_base *const vdivu;\n+extern const function_base *const vremu;\n }\n \n } // end namespace riscv_vector"}, {"sha": "9f9678ab6dd6085b569074575bc7c923489dbaf7", "filename": "gcc/config/riscv/riscv-vector-builtins-functions.def", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a937fb5cf805c7311f1d9ecf98b60bedc922165/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a937fb5cf805c7311f1d9ecf98b60bedc922165/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def?ref=2a937fb5cf805c7311f1d9ecf98b60bedc922165", "patch": "@@ -62,5 +62,23 @@ DEF_RVV_FUNCTION (vsoxei8, indexed_loadstore, none_m_preds, all_v_scalar_ptr_uin\n DEF_RVV_FUNCTION (vsoxei16, indexed_loadstore, none_m_preds, all_v_scalar_ptr_uint16_index_ops)\n DEF_RVV_FUNCTION (vsoxei32, indexed_loadstore, none_m_preds, all_v_scalar_ptr_uint32_index_ops)\n DEF_RVV_FUNCTION (vsoxei64, indexed_loadstore, none_m_preds, all_v_scalar_ptr_uint64_index_ops)\n+/* 11. Vector Integer Arithmetic Instructions.  */\n+DEF_RVV_FUNCTION (vadd, binop, full_preds, iu_vvv_ops)\n+DEF_RVV_FUNCTION (vsub, binop, full_preds, iu_vvv_ops)\n+DEF_RVV_FUNCTION (vand, binop, full_preds, iu_vvv_ops)\n+DEF_RVV_FUNCTION (vor, binop, full_preds, iu_vvv_ops)\n+DEF_RVV_FUNCTION (vxor, binop, full_preds, iu_vvv_ops)\n+DEF_RVV_FUNCTION (vsll, binop, full_preds, iu_shift_vvv_ops)\n+DEF_RVV_FUNCTION (vsra, binop, full_preds, iu_shift_vvv_ops)\n+DEF_RVV_FUNCTION (vsrl, binop, full_preds, iu_shift_vvv_ops)\n+DEF_RVV_FUNCTION (vmin, binop, full_preds, iu_vvv_ops)\n+DEF_RVV_FUNCTION (vmax, binop, full_preds, iu_vvv_ops)\n+DEF_RVV_FUNCTION (vminu, binop, full_preds, iu_vvv_ops)\n+DEF_RVV_FUNCTION (vmaxu, binop, full_preds, iu_vvv_ops)\n+DEF_RVV_FUNCTION (vmul, binop, full_preds, iu_vvv_ops)\n+DEF_RVV_FUNCTION (vdiv, binop, full_preds, iu_vvv_ops)\n+DEF_RVV_FUNCTION (vrem, binop, full_preds, iu_vvv_ops)\n+DEF_RVV_FUNCTION (vdivu, binop, full_preds, iu_vvv_ops)\n+DEF_RVV_FUNCTION (vremu, binop, full_preds, iu_vvv_ops)\n \n #undef DEF_RVV_FUNCTION"}, {"sha": "c8bca3598ac771edd7af2ec0d9ecc4f2d50685ac", "filename": "gcc/config/riscv/riscv-vector-builtins-shapes.cc", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a937fb5cf805c7311f1d9ecf98b60bedc922165/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a937fb5cf805c7311f1d9ecf98b60bedc922165/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc?ref=2a937fb5cf805c7311f1d9ecf98b60bedc922165", "patch": "@@ -185,9 +185,34 @@ struct indexed_loadstore_def : public function_shape\n   }\n };\n \n+/* binop_def class.  */\n+struct binop_def : public build_base\n+{\n+  char *get_name (function_builder &b, const function_instance &instance,\n+\t\t  bool overloaded_p) const override\n+  {\n+    b.append_base_name (instance.base_name);\n+    /* vop<sew>_v --> vop<sew>_v_<type>.  */\n+    if (!overloaded_p)\n+      {\n+\t/* vop<sew> --> vop<sew>_v.  */\n+\tb.append_name (operand_suffixes[instance.op_info->op]);\n+\t/* vop<sew>_v --> vop<sew>_v_<type>.  */\n+\tb.append_name (type_suffixes[instance.type.index].vector);\n+      }\n+    /* According to rvv-intrinsic-doc, it does not add \"_m\" suffix\n+       for vop_m C++ overloaded API.  */\n+    if (overloaded_p && instance.pred == PRED_TYPE_m)\n+      return b.finish_name ();\n+    b.append_name (predication_suffixes[instance.pred]);\n+    return b.finish_name ();\n+  }\n+};\n+\n SHAPE(vsetvl, vsetvl)\n SHAPE(vsetvl, vsetvlmax)\n SHAPE(loadstore, loadstore)\n SHAPE(indexed_loadstore, indexed_loadstore)\n+SHAPE(binop, binop)\n \n } // end namespace riscv_vector"}, {"sha": "2903c2dfead4f9accaec91ed3afeac5500222bda", "filename": "gcc/config/riscv/riscv-vector-builtins-shapes.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a937fb5cf805c7311f1d9ecf98b60bedc922165/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a937fb5cf805c7311f1d9ecf98b60bedc922165/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.h?ref=2a937fb5cf805c7311f1d9ecf98b60bedc922165", "patch": "@@ -28,6 +28,7 @@ extern const function_shape *const vsetvl;\n extern const function_shape *const vsetvlmax;\n extern const function_shape *const loadstore;\n extern const function_shape *const indexed_loadstore;\n+extern const function_shape *const binop;\n }\n \n } // end namespace riscv_vector"}, {"sha": "3a6c2c7c6f2d754f07918bb68b937853d45099ea", "filename": "gcc/config/riscv/riscv-vector-builtins.cc", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a937fb5cf805c7311f1d9ecf98b60bedc922165/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a937fb5cf805c7311f1d9ecf98b60bedc922165/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc?ref=2a937fb5cf805c7311f1d9ecf98b60bedc922165", "patch": "@@ -133,6 +133,13 @@ static const rvv_type_info i_ops[] = {\n #include \"riscv-vector-builtins-types.def\"\n   {NUM_VECTOR_TYPES, 0}};\n \n+/* A list of all integer will be registered for intrinsic functions.  */\n+static const rvv_type_info iu_ops[] = {\n+#define DEF_RVV_I_OPS(TYPE, REQUIRE) {VECTOR_TYPE_##TYPE, REQUIRE},\n+#define DEF_RVV_U_OPS(TYPE, REQUIRE) {VECTOR_TYPE_##TYPE, REQUIRE},\n+#include \"riscv-vector-builtins-types.def\"\n+  {NUM_VECTOR_TYPES, 0}};\n+\n /* A list of all types will be registered for intrinsic functions.  */\n static const rvv_type_info all_ops[] = {\n #define DEF_RVV_I_OPS(TYPE, REQUIRE) {VECTOR_TYPE_##TYPE, REQUIRE},\n@@ -232,6 +239,16 @@ static CONSTEXPR const rvv_arg_type_info scalar_ptr_uint64_index_args[]\n      rvv_arg_type_info (RVV_BASE_uint64_index),\n      rvv_arg_type_info (RVV_BASE_vector), rvv_arg_type_info_end};\n \n+/* A list of args for vector_type func (vector_type, vector_type) function.  */\n+static CONSTEXPR const rvv_arg_type_info vv_args[]\n+  = {rvv_arg_type_info (RVV_BASE_vector), rvv_arg_type_info (RVV_BASE_vector),\n+     rvv_arg_type_info_end};\n+\n+/* A list of args for vector_type func (vector_type, shift_type) function.  */\n+static CONSTEXPR const rvv_arg_type_info shift_vv_args[]\n+  = {rvv_arg_type_info (RVV_BASE_vector),\n+     rvv_arg_type_info (RVV_BASE_shift_vector), rvv_arg_type_info_end};\n+\n /* A list of none preds that will be registered for intrinsic functions.  */\n static CONSTEXPR const predication_type_index none_preds[]\n   = {PRED_TYPE_none, NUM_PRED_TYPES};\n@@ -372,6 +389,22 @@ static CONSTEXPR const rvv_op_info all_v_scalar_ptr_uint64_index_ops\n      rvv_arg_type_info (RVV_BASE_void), /* Return type */\n      scalar_ptr_uint64_index_args /* Args */};\n \n+/* A static operand information for vector_type func (vector_type, vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info iu_vvv_ops\n+  = {iu_ops,\t\t\t\t/* Types */\n+     OP_TYPE_vv,\t\t\t/* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     vv_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type, shift_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info iu_shift_vvv_ops\n+  = {iu_ops,\t\t\t\t/* Types */\n+     OP_TYPE_vv,\t\t\t/* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     shift_vv_args /* Args */};\n+\n /* A list of all RVV intrinsic functions.  */\n static function_group_info function_groups[] = {\n #define DEF_RVV_FUNCTION(NAME, SHAPE, PREDS, OPS_INFO)                         \\\n@@ -674,6 +707,10 @@ rvv_arg_type_info::get_base_vector_type (tree type) const\n       inner_mode = E_DImode;\n       unsigned_p = true;\n       break;\n+    case RVV_BASE_shift_vector:\n+      inner_mode = GET_MODE_INNER (TYPE_MODE (type));\n+      unsigned_p = true;\n+      break;\n     default:\n       return NUM_VECTOR_TYPES;\n     }\n@@ -737,6 +774,7 @@ rvv_arg_type_info::get_tree_type (vector_type_index type_idx) const\n     case RVV_BASE_uint16_index:\n     case RVV_BASE_uint32_index:\n     case RVV_BASE_uint64_index:\n+    case RVV_BASE_shift_vector:\n       if (get_base_vector_type (builtin_types[type_idx].vector)\n \t  != NUM_VECTOR_TYPES)\n \treturn builtin_types[get_base_vector_type ("}, {"sha": "c20d8f8835c8c29262f89d2308793d5b14735a94", "filename": "gcc/config/riscv/riscv-vector-builtins.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a937fb5cf805c7311f1d9ecf98b60bedc922165/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a937fb5cf805c7311f1d9ecf98b60bedc922165/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h?ref=2a937fb5cf805c7311f1d9ecf98b60bedc922165", "patch": "@@ -151,6 +151,7 @@ enum rvv_base_type\n   RVV_BASE_uint16_index,\n   RVV_BASE_uint32_index,\n   RVV_BASE_uint64_index,\n+  RVV_BASE_shift_vector,\n   NUM_BASE_TYPES\n };\n "}, {"sha": "209d9a53e7bd7b3a0d3885be04d02a01e9e3c6ae", "filename": "gcc/config/riscv/riscv.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a937fb5cf805c7311f1d9ecf98b60bedc922165/gcc%2Fconfig%2Friscv%2Friscv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a937fb5cf805c7311f1d9ecf98b60bedc922165/gcc%2Fconfig%2Friscv%2Friscv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.cc?ref=2a937fb5cf805c7311f1d9ecf98b60bedc922165", "patch": "@@ -4242,6 +4242,16 @@ riscv_print_operand (FILE *file, rtx op, int letter)\n \t  output_operand_lossage (\"invalid vector constant\");\n \tbreak;\n       }\n+      case 'V': {\n+\trtx elt;\n+\tif (!const_vec_duplicate_p (op, &elt))\n+\t  output_operand_lossage (\"invalid vector constant\");\n+\telse if (satisfies_constraint_vj (op))\n+\t  asm_fprintf (file, \"%wd\", -INTVAL (elt));\n+\telse\n+\t  output_operand_lossage (\"invalid vector constant\");\n+\tbreak;\n+      }\n       case 'm': {\n \tif (riscv_v_ext_vector_mode_p (mode))\n \t  {"}, {"sha": "a2f192d6ba0627e0eb5d18a6d5ce3b12ff88b6fa", "filename": "gcc/config/riscv/vector-iterators.md", "status": "modified", "additions": 183, "deletions": 0, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a937fb5cf805c7311f1d9ecf98b60bedc922165/gcc%2Fconfig%2Friscv%2Fvector-iterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a937fb5cf805c7311f1d9ecf98b60bedc922165/gcc%2Fconfig%2Friscv%2Fvector-iterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector-iterators.md?ref=2a937fb5cf805c7311f1d9ecf98b60bedc922165", "patch": "@@ -47,6 +47,14 @@\n   (VNx8DF \"TARGET_VECTOR_ELEN_FP_64\")\n ])\n \n+(define_mode_iterator VI [\n+  VNx1QI VNx2QI VNx4QI VNx8QI VNx16QI VNx32QI (VNx64QI \"TARGET_MIN_VLEN > 32\")\n+  VNx1HI VNx2HI VNx4HI VNx8HI VNx16HI (VNx32HI \"TARGET_MIN_VLEN > 32\")\n+  VNx1SI VNx2SI VNx4SI VNx8SI (VNx16SI \"TARGET_MIN_VLEN > 32\")\n+  (VNx1DI \"TARGET_MIN_VLEN > 32\") (VNx2DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx4DI \"TARGET_MIN_VLEN > 32\") (VNx8DI \"TARGET_MIN_VLEN > 32\")\n+])\n+\n (define_mode_iterator VNX1_QHSD [\n   VNx1QI VNx1HI VNx1SI\n   (VNx1DI \"TARGET_MIN_VLEN > 32\")\n@@ -177,3 +185,178 @@\n (define_int_attr order [\n   (UNSPEC_ORDERED \"o\") (UNSPEC_UNORDERED \"u\")\n ])\n+\n+(define_code_iterator any_int_binop [plus minus and ior xor ashift ashiftrt lshiftrt\n+  smax umax smin umin mult div udiv mod umod\n+])\n+\n+(define_code_attr binop_rhs1_predicate [\n+\t\t\t(plus \"register_operand\")\n+\t\t\t(minus \"vector_arith_operand\")\n+\t\t\t(ior \"register_operand\")\n+\t\t\t(xor \"register_operand\")\n+\t\t\t(and \"register_operand\")\n+\t\t\t(ashift \"register_operand\")\n+\t\t\t(ashiftrt \"register_operand\")\n+\t\t\t(lshiftrt \"register_operand\")\n+\t\t\t(smin \"register_operand\")\n+\t\t\t(smax \"register_operand\")\n+\t\t\t(umin \"register_operand\")\n+\t\t\t(umax \"register_operand\")\n+\t\t\t(mult \"register_operand\")\n+\t\t\t(div \"register_operand\")\n+\t\t\t(mod \"register_operand\")\n+\t\t\t(udiv \"register_operand\")\n+\t\t\t(umod \"register_operand\")])\n+\n+(define_code_attr binop_rhs2_predicate [\n+\t\t\t(plus \"vector_arith_operand\")\n+\t\t\t(minus \"vector_neg_arith_operand\")\n+\t\t\t(ior \"vector_arith_operand\")\n+\t\t\t(xor \"vector_arith_operand\")\n+\t\t\t(and \"vector_arith_operand\")\n+\t\t\t(ashift \"vector_shift_operand\")\n+\t\t\t(ashiftrt \"vector_shift_operand\")\n+\t\t\t(lshiftrt \"vector_shift_operand\")\n+\t\t\t(smin \"register_operand\")\n+\t\t\t(smax \"register_operand\")\n+\t\t\t(umin \"register_operand\")\n+\t\t\t(umax \"register_operand\")\n+\t\t\t(mult \"register_operand\")\n+\t\t\t(div \"register_operand\")\n+\t\t\t(mod \"register_operand\")\n+\t\t\t(udiv \"register_operand\")\n+\t\t\t(umod \"register_operand\")])\n+\n+(define_code_attr binop_rhs1_constraint [\n+\t\t\t(plus \"vr,vr,vr\")\n+\t\t\t(minus \"vr,vr,vi\")\n+\t\t\t(ior \"vr,vr,vr\")\n+\t\t\t(xor \"vr,vr,vr\")\n+\t\t\t(and \"vr,vr,vr\")\n+\t\t\t(ashift \"vr,vr,vr\")\n+\t\t\t(ashiftrt \"vr,vr,vr\")\n+\t\t\t(lshiftrt \"vr,vr,vr\")\n+\t\t\t(smin \"vr,vr,vr\")\n+\t\t\t(smax \"vr,vr,vr\")\n+\t\t\t(umin \"vr,vr,vr\")\n+\t\t\t(umax \"vr,vr,vr\")\n+\t\t\t(mult \"vr,vr,vr\")\n+\t\t\t(div \"vr,vr,vr\")\n+\t\t\t(mod \"vr,vr,vr\")\n+\t\t\t(udiv \"vr,vr,vr\")\n+\t\t\t(umod \"vr,vr,vr\")])\n+\n+(define_code_attr binop_rhs2_constraint [\n+\t\t\t(plus \"vr,vi,vr\")\n+\t\t\t(minus \"vr,vj,vr\")\n+\t\t\t(ior \"vr,vi,vr\")\n+\t\t\t(xor \"vr,vi,vr\")\n+\t\t\t(and \"vr,vi,vr\")\n+\t\t\t(ashift \"vr,vk,vr\")\n+\t\t\t(ashiftrt \"vr,vk,vr\")\n+\t\t\t(lshiftrt \"vr,vk,vr\")\n+\t\t\t(smin \"vr,vr,vr\")\n+\t\t\t(smax \"vr,vr,vr\")\n+\t\t\t(umin \"vr,vr,vr\")\n+\t\t\t(umax \"vr,vr,vr\")\n+\t\t\t(mult \"vr,vr,vr\")\n+\t\t\t(div \"vr,vr,vr\")\n+\t\t\t(mod \"vr,vr,vr\")\n+\t\t\t(udiv \"vr,vr,vr\")\n+\t\t\t(umod \"vr,vr,vr\")])\n+\n+(define_code_attr int_binop_insn_type [\n+\t\t\t(plus \"vialu\")\n+\t\t\t(minus \"vialu\")\n+\t\t\t(ior \"vialu\")\n+\t\t\t(xor \"vialu\")\n+\t\t\t(and \"vialu\")\n+\t\t\t(ashift \"vshift\")\n+\t\t\t(ashiftrt \"vshift\")\n+\t\t\t(lshiftrt \"vshift\")\n+\t\t\t(smin \"vicmp\")\n+\t\t\t(smax \"vicmp\")\n+\t\t\t(umin \"vicmp\")\n+\t\t\t(umax \"vicmp\")\n+\t\t\t(mult \"vimul\")\n+\t\t\t(div \"vidiv\")\n+\t\t\t(mod \"vidiv\")\n+\t\t\t(udiv \"vidiv\")\n+\t\t\t(umod \"vidiv\")])\n+\n+;; <binop_alt1_insn> expands to the insn name of binop matching constraint alternative = 1.\n+;; minus is negated as vadd and ss_minus is negated as vsadd, others remain <insn>.\n+(define_code_attr binop_alt1_insn [(ashift \"sll.vi\")\n+\t\t\t       (ashiftrt \"sra.vi\")\n+\t\t\t       (lshiftrt \"srl.vi\")\n+\t\t\t       (div \"div.vv\")\n+\t\t\t       (mod \"rem.vv\")\n+\t\t\t       (udiv \"divu.vv\")\n+\t\t\t       (umod \"remu.vv\")\n+\t\t\t       (ior \"or.vv\")\n+\t\t\t       (xor \"xor.vv\")\n+\t\t\t       (and \"and.vv\")\n+\t\t\t       (plus \"add.vi\")\n+\t\t\t       (minus \"add.vi\")\n+\t\t\t       (smin \"min.vv\")\n+\t\t\t       (smax \"max.vv\")\n+\t\t\t       (umin \"minu.vv\")\n+\t\t\t       (umax \"maxu.vv\")\n+\t\t\t       (mult \"mul.vv\")])\n+\n+;; <binop_alt2_insn> expands to the insn name of binop matching constraint alternative = 2.\n+;; minus is reversed as vrsub, others remain <insn>.\n+(define_code_attr binop_alt2_insn [(ashift \"sll.vv\")\n+\t\t\t       (ashiftrt \"sra.vv\")\n+\t\t\t       (lshiftrt \"srl.vv\")\n+\t\t\t       (div \"div.vv\")\n+\t\t\t       (mod \"rem.vv\")\n+\t\t\t       (udiv \"divu.vv\")\n+\t\t\t       (umod \"remu.vv\")\n+\t\t\t       (ior \"or.vv\")\n+\t\t\t       (xor \"xor.vv\")\n+\t\t\t       (and \"and.vv\")\n+\t\t\t       (plus \"add.vv\")\n+\t\t\t       (minus \"rsub.vi\")\n+\t\t\t       (smin \"min.vv\")\n+\t\t\t       (smax \"max.vv\")\n+\t\t\t       (umin \"minu.vv\")\n+\t\t\t       (umax \"maxu.vv\")\n+\t\t\t       (mult \"mul.vv\")])\n+\n+(define_code_attr binop_alt1_op [(ashift \"%3,%4\")\n+\t\t\t     (ashiftrt \"%3,%4\")\n+\t\t\t     (lshiftrt \"%3,%4\")\n+\t\t\t     (div \"%3,%4\")\n+\t\t\t     (mod \"%3,%4\")\n+\t\t\t     (udiv \"%3,%4\")\n+\t\t\t     (umod \"%3,%4\")\n+\t\t\t     (ior \"%3,%4\")\n+\t\t\t     (xor \"%3,%4\")\n+\t\t\t     (and \"%3,%4\")\n+\t\t\t     (plus \"%3,%4\")\n+\t\t\t     (minus \"%3,%V4\")\n+\t\t\t     (smin \"%3,%4\")\n+\t\t\t     (smax \"%3,%4\")\n+\t\t\t     (umin \"%3,%4\")\n+\t\t\t     (umax \"%3,%4\")\n+\t\t\t     (mult \"%3,%4\")])\n+\n+(define_code_attr binop_alt2_op [(ashift \"%3,%4\")\n+\t\t\t      (ashiftrt \"%3,%4\")\n+\t\t\t      (lshiftrt \"%3,%4\")\n+\t\t\t      (div \"%3,%4\")\n+\t\t\t      (mod \"%3,%4\")\n+\t\t\t      (udiv \"%3,%4\")\n+\t\t\t      (umod \"%3,%4\")\n+\t\t\t      (ior \"%3,%4\")\n+\t\t\t      (xor \"%3,%4\")\n+\t\t\t      (and \"%3,%4\")\n+\t\t\t      (plus \"%3,%4\")\n+\t\t\t      (minus \"%4,%v3\")\n+\t\t\t      (smin \"%3,%4\")\n+\t\t\t      (smax \"%3,%4\")\n+\t\t\t      (umin \"%3,%4\")\n+\t\t\t      (umax \"%3,%4\")\n+\t\t\t      (mult \"%3,%4\")])"}, {"sha": "e8d75f164e3d4f591b83e9fe4a3b18ce97e63bbf", "filename": "gcc/config/riscv/vector.md", "status": "modified", "additions": 43, "deletions": 6, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a937fb5cf805c7311f1d9ecf98b60bedc922165/gcc%2Fconfig%2Friscv%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a937fb5cf805c7311f1d9ecf98b60bedc922165/gcc%2Fconfig%2Friscv%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector.md?ref=2a937fb5cf805c7311f1d9ecf98b60bedc922165", "patch": "@@ -141,7 +141,8 @@\n \n ;; It is valid for instruction that require sew/lmul ratio.\n (define_attr \"ratio\" \"\"\n-  (cond [(eq_attr \"type\" \"vimov,vfmov,vldux,vldox,vstux,vstox\")\n+  (cond [(eq_attr \"type\" \"vimov,vfmov,vldux,vldox,vstux,vstox,\\\n+\t\t\t  vialu,vshift,vicmp,vimul,vidiv,vsalu\")\n \t   (const_int INVALID_ATTRIBUTE)\n \t (eq_attr \"mode\" \"VNx1QI,VNx1BI\")\n \t   (symbol_ref \"riscv_vector::get_ratio(E_VNx1QImode)\")\n@@ -191,7 +192,8 @@\n \n ;; The index of operand[] to get the merge op.\n (define_attr \"merge_op_idx\" \"\"\n-\t(cond [(eq_attr \"type\" \"vlde,vimov,vfmov,vldm,vlds,vmalu,vldux,vldox\")\n+\t(cond [(eq_attr \"type\" \"vlde,vimov,vfmov,vldm,vlds,vmalu,vldux,vldox,\\\n+\t\t\t\tvialu,vshift,vicmp,vimul,vidiv,vsalu\")\n \t (const_int 2)]\n \t(const_int INVALID_ATTRIBUTE)))\n \n@@ -207,7 +209,7 @@\n              (const_int 5)\n              (const_int 4))\n \n-\t (eq_attr \"type\" \"vldux,vldox\")\n+\t (eq_attr \"type\" \"vldux,vldox,vialu,vshift,vicmp,vimul,vidiv,vsalu\")\n \t   (const_int 5)]\n   (const_int INVALID_ATTRIBUTE)))\n \n@@ -223,7 +225,7 @@\n \t     (symbol_ref \"riscv_vector::get_ta(operands[6])\")\n \t     (symbol_ref \"riscv_vector::get_ta(operands[5])\"))\n \n-\t (eq_attr \"type\" \"vldux,vldox\")\n+\t (eq_attr \"type\" \"vldux,vldox,vialu,vshift,vicmp,vimul,vidiv,vsalu\")\n \t   (symbol_ref \"riscv_vector::get_ta(operands[6])\")]\n \t(const_int INVALID_ATTRIBUTE)))\n \n@@ -239,7 +241,7 @@\n \t     (symbol_ref \"riscv_vector::get_ma(operands[7])\")\n \t     (symbol_ref \"riscv_vector::get_ma(operands[6])\"))\n \n-\t (eq_attr \"type\" \"vldux,vldox\")\n+\t (eq_attr \"type\" \"vldux,vldox,vialu,vshift,vicmp,vimul,vidiv,vsalu\")\n \t   (symbol_ref \"riscv_vector::get_ma(operands[7])\")]\n \t(const_int INVALID_ATTRIBUTE)))\n \n@@ -257,7 +259,7 @@\n \t     (const_int INVALID_ATTRIBUTE)\n \t     (symbol_ref \"INTVAL (operands[7])\"))\n \n-\t (eq_attr \"type\" \"vldux,vldox\")\n+\t (eq_attr \"type\" \"vldux,vldox,vialu,vshift,vicmp,vimul,vidiv,vsalu\")\n \t   (symbol_ref \"INTVAL (operands[8])\")\n \t (eq_attr \"type\" \"vstux,vstox\")\n \t   (symbol_ref \"INTVAL (operands[5])\")]\n@@ -1111,3 +1113,38 @@\n   \"vs<order>xei<VNX64_Q:sew>.v\\t%3,(%1),%2%p0\"\n   [(set_attr \"type\" \"vst<order>x\")\n    (set_attr \"mode\" \"<VNX64_Q:MODE>\")])\n+\n+;; -------------------------------------------------------------------------------\n+;; ---- Predicated integer binary operations\n+;; -------------------------------------------------------------------------------\n+;; Includes:\n+;; - 11.1 Vector Single-Width Integer Add and Subtract\n+;; - 11.5 Vector Bitwise Logical Instructions\n+;; - 11.6 Vector Single-Width Bit Shift Instructions\n+;; - 11.9 Vector Integer Min/Max Instructions\n+;; - 11.11 Vector Integer Divide Instructions\n+;; - 12.1 Vector Single-Width Saturating Add and Subtract\n+;; -------------------------------------------------------------------------------\n+\n+(define_insn \"@pred_<optab><mode>\"\n+  [(set (match_operand:VI 0 \"register_operand\"                   \"=vr,   vr,   vr\")\n+\t(if_then_else:VI\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \"      vmWc1,vmWc1,vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"    \"         rK,   rK,   rK\")\n+\t     (match_operand 6 \"const_int_operand\"        \"          i,    i,    i\")\n+\t     (match_operand 7 \"const_int_operand\"        \"          i,    i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"        \"          i,    i,    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (any_int_binop:VI\n+\t    (match_operand:VI 3 \"<binop_rhs1_predicate>\" \"<binop_rhs1_constraint>\")\n+\t    (match_operand:VI 4 \"<binop_rhs2_predicate>\" \"<binop_rhs2_constraint>\"))\n+\t  (match_operand:VI 2 \"vector_merge_operand\"     \"        0vu,  0vu,  0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"@\n+   v<insn>.vv\\t%0,%3,%4%p1\n+   v<binop_alt1_insn>\\t%0,<binop_alt1_op>%p1\n+   v<binop_alt2_insn>\\t%0,<binop_alt2_op>%p1\"\n+  [(set_attr \"type\" \"<int_binop_insn_type>\")\n+   (set_attr \"mode\" \"<MODE>\")])"}]}