{"sha": "3087d1b0a2cbe8880ccbbb67744726ff4e5d390e", "node_id": "C_kwDOANBUbNoAKDMwODdkMWIwYTJjYmU4ODgwY2NiYmI2Nzc0NDcyNmZmNGU1ZDM5MGU", "commit": {"author": {"name": "Jiufu Guo", "email": "guojiufu@linux.ibm.com", "date": "2021-09-22T05:20:29Z"}, "committer": {"name": "Jiufu Guo", "email": "guojiufu@linux.ibm.com", "date": "2021-09-22T13:03:08Z"}, "message": "Set bound/cmp/control for until wrap loop.\n\nIn patch r12-3136, niter->control, niter->bound and niter->cmp are\nderived from number_of_iterations_lt.  While for 'until wrap condition',\nthe calculation in number_of_iterations_lt is not align the requirements\non the define of them and requirements in determine_exit_conditions.\n\nThis patch calculate niter->control, niter->bound and niter->cmp in\nnumber_of_iterations_until_wrap.\n\ngcc/ChangeLog:\n\n2021-09-22  Jiufu Guo  <guojiufu@linux.ibm.com>\n\n\tPR tree-optimization/102087\n\t* tree-ssa-loop-niter.c (number_of_iterations_until_wrap):\n\tUpdate bound/cmp/control for niter.\n\ngcc/testsuite/ChangeLog:\n\n2021-09-22  Jiufu Guo  <guojiufu@linux.ibm.com>\n\n\t* gcc.dg/pr102087.c: New test.\n\tPR tree-optimization/102087", "tree": {"sha": "fe5b08c9311ba6976decf4af95503040ff94e370", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe5b08c9311ba6976decf4af95503040ff94e370"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3087d1b0a2cbe8880ccbbb67744726ff4e5d390e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3087d1b0a2cbe8880ccbbb67744726ff4e5d390e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3087d1b0a2cbe8880ccbbb67744726ff4e5d390e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3087d1b0a2cbe8880ccbbb67744726ff4e5d390e/comments", "author": null, "committer": null, "parents": [{"sha": "fec75ab8c02be904de2963c0adb6d1e940a59761", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fec75ab8c02be904de2963c0adb6d1e940a59761", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fec75ab8c02be904de2963c0adb6d1e940a59761"}], "stats": {"total": 51, "additions": 50, "deletions": 1}, "files": [{"sha": "5cd094fc097f270a96928a276f12950b065eb43f", "filename": "gcc/testsuite/gcc.dg/pr102087.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3087d1b0a2cbe8880ccbbb67744726ff4e5d390e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102087.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3087d1b0a2cbe8880ccbbb67744726ff4e5d390e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102087.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102087.c?ref=3087d1b0a2cbe8880ccbbb67744726ff4e5d390e", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+unsigned __attribute__ ((noinline))\n+foo (int *__restrict__ a, int *__restrict__ b, unsigned l, unsigned n)\n+{\n+  while (n < ++l)\n+    *a++ = *b++ + 1;\n+  return l;\n+}\n+\n+volatile int a[1];\n+unsigned b;\n+int c;\n+\n+int\n+check ()\n+{\n+  int d;\n+  for (; b > 1; b++)\n+    for (c = 0; c < 2; c++)\n+      for (d = 0; d < 2; d++)\n+\ta[0];\n+  return 0;\n+}\n+\n+char **clip_image_gfi_0;\n+int clip_image_y, clip_image_shift;\n+void\n+clip_image ()\n+{\n+  for (; clip_image_y >= clip_image_shift; clip_image_y++)\n+    clip_image_gfi_0[clip_image_shift]\n+      = clip_image_gfi_0[clip_image_y];\n+}"}, {"sha": "75109407124f020ff0aaff31a6afd9cdc5055a33", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3087d1b0a2cbe8880ccbbb67744726ff4e5d390e/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3087d1b0a2cbe8880ccbbb67744726ff4e5d390e/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=3087d1b0a2cbe8880ccbbb67744726ff4e5d390e", "patch": "@@ -1482,7 +1482,7 @@ number_of_iterations_until_wrap (class loop *, tree type, affine_iv *iv0,\n \t\t\t\t affine_iv *iv1, class tree_niter_desc *niter)\n {\n   tree niter_type = unsigned_type_for (type);\n-  tree step, num, assumptions, may_be_zero;\n+  tree step, num, assumptions, may_be_zero, span;\n   wide_int high, low, max, min;\n \n   may_be_zero = fold_build2 (LE_EXPR, boolean_type_node, iv1->base, iv0->base);\n@@ -1557,6 +1557,20 @@ number_of_iterations_until_wrap (class loop *, tree type, affine_iv *iv0,\n \n   niter->control.no_overflow = false;\n \n+  /* Update bound and exit condition as:\n+     bound = niter * STEP + (IVbase - STEP).\n+     { IVbase - STEP, +, STEP } != bound\n+     Here, biasing IVbase by 1 step makes 'bound' be the value before wrap.\n+     */\n+  niter->control.base = fold_build2 (MINUS_EXPR, niter_type,\n+\t\t\t\t     niter->control.base, niter->control.step);\n+  span = fold_build2 (MULT_EXPR, niter_type, niter->niter,\n+\t\t      fold_convert (niter_type, niter->control.step));\n+  niter->bound = fold_build2 (PLUS_EXPR, niter_type, span,\n+\t\t\t      fold_convert (niter_type, niter->control.base));\n+  niter->bound = fold_convert (type, niter->bound);\n+  niter->cmp = NE_EXPR;\n+\n   return true;\n }\n "}]}