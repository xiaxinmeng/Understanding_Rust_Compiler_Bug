{"sha": "c3ba0eaaa223f7b8208d279e3f39ff134912f9e9", "node_id": "C_kwDOANBUbNoAKGMzYmEwZWFhYTIyM2Y3YjgyMDhkMjc5ZTNmMzlmZjEzNDkxMmY5ZTk", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-06-07T18:19:53Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-09-12T21:05:34Z"}, "message": "c++: template-id arguments are evaluated [PR101906]\n\nHere we're neglecting to clear cp_unevaluated_operand when substituting\ninto the arguments of the alias template-id 'skip<(T(), 0), T>' with T=A,\nwhich means cp_unevaluated_operand remains set during mark_used for\nA::A() and so we don't synthesize it.  Later constant evaluation for\nthe substituted template argument '(A(), 0)' (from coerce_template_parms)\nfails with \"'constexpr A::A()' used before its definition\" since it was\nnever synthesized.\n\nThis doesn't happen with a class template because tsubst_aggr_type\nclears cp_unevaluated_operand during substitution thereof.  But since\ntemplate arguments are generally manifestly constant-evaluated, which in\nturn are evaluated even in an unevaluated operand, we should be clearing\ncp_unevaluated_operand more broadly whenever substituting into any set\nof template arguments.  To that end this patch makes us clear it during\ntsubst_template_args.\n\n\tPR c++/101906\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (tsubst_template_args): Set cp_evaluated here.\n\t(tsubst_aggr_type): Not here.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/template/evaluated1.C: New test.\n\t* g++.dg/template/evaluated1a.C: New test.\n\t* g++.dg/template/evaluated1b.C: New test.\n\t* g++.dg/template/evaluated1c.C: New test.", "tree": {"sha": "7053a8ee00c8cae538a5c5a6f7d7559482972224", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7053a8ee00c8cae538a5c5a6f7d7559482972224"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3ba0eaaa223f7b8208d279e3f39ff134912f9e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3ba0eaaa223f7b8208d279e3f39ff134912f9e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3ba0eaaa223f7b8208d279e3f39ff134912f9e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3ba0eaaa223f7b8208d279e3f39ff134912f9e9/comments", "author": null, "committer": null, "parents": [{"sha": "03381beccb52c0e2c15da3b8b8dfa3bb6eb71df9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03381beccb52c0e2c15da3b8b8dfa3bb6eb71df9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03381beccb52c0e2c15da3b8b8dfa3bb6eb71df9"}], "stats": {"total": 73, "additions": 70, "deletions": 3}, "files": [{"sha": "4c6b343ab6ea69bb77c6f8bd5f322c087fac3818", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3ba0eaaa223f7b8208d279e3f39ff134912f9e9/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3ba0eaaa223f7b8208d279e3f39ff134912f9e9/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=c3ba0eaaa223f7b8208d279e3f39ff134912f9e9", "patch": "@@ -13616,6 +13616,9 @@ tsubst_template_args (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n   if (t == error_mark_node)\n     return error_mark_node;\n \n+  /* In \"sizeof(X<I>)\" we need to evaluate \"I\".  */\n+  cp_evaluated ev;\n+\n   const int len = TREE_VEC_LENGTH (t);\n   tree *elts = XALLOCAVEC (tree, len);\n   int expanded_len_adjust = 0;\n@@ -13888,9 +13891,6 @@ tsubst_aggr_type (tree t,\n \t  tree argvec;\n \t  tree r;\n \n-\t  /* In \"sizeof(X<I>)\" we need to evaluate \"I\".  */\n-\t  cp_evaluated ev;\n-\n \t  /* Figure out what arguments are appropriate for the\n \t     type we are trying to find.  For example, given:\n "}, {"sha": "41845c65acbd10d2085838f15488422f23e78263", "filename": "gcc/testsuite/g++.dg/template/evaluated1.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3ba0eaaa223f7b8208d279e3f39ff134912f9e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fevaluated1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3ba0eaaa223f7b8208d279e3f39ff134912f9e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fevaluated1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fevaluated1.C?ref=c3ba0eaaa223f7b8208d279e3f39ff134912f9e9", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/101906\n+// Verify the template arguments of an alias template-id are evaluated even\n+// in an unevaluated context.\n+// { dg-do compile { target c++11 } }\n+\n+template<int, class T> using skip = T;\n+\n+template<class T>\n+constexpr unsigned sizeof_() {\n+  return sizeof(skip<(T(), 0), T>);\n+}\n+\n+struct A {\n+  int m = -1;\n+};\n+\n+static_assert(sizeof_<A>() == sizeof(A), \"\");"}, {"sha": "7828687100486a67c030f5470cdba405aa440e68", "filename": "gcc/testsuite/g++.dg/template/evaluated1a.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3ba0eaaa223f7b8208d279e3f39ff134912f9e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fevaluated1a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3ba0eaaa223f7b8208d279e3f39ff134912f9e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fevaluated1a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fevaluated1a.C?ref=c3ba0eaaa223f7b8208d279e3f39ff134912f9e9", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/101906\n+// Like unevaluated1.C, but where the unevaluated context is a\n+// constraint instead of sizeof.\n+// { dg-do compile { target c++20 } }\n+\n+template<int> using voidify = void;\n+\n+template<class T>\n+concept constant_value_initializable\n+  = requires { typename voidify<(T(), 0)>; };\n+\n+struct A {\n+  int m = -1;\n+};\n+\n+static_assert(constant_value_initializable<A>);"}, {"sha": "7994065ac8677759085b4ffc76b165a3876b6914", "filename": "gcc/testsuite/g++.dg/template/evaluated1b.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3ba0eaaa223f7b8208d279e3f39ff134912f9e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fevaluated1b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3ba0eaaa223f7b8208d279e3f39ff134912f9e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fevaluated1b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fevaluated1b.C?ref=c3ba0eaaa223f7b8208d279e3f39ff134912f9e9", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/101906\n+// Like unevaluated1.C, but using a function template instead of an\n+// alias template.\n+// { dg-do compile { target c++14 } }\n+\n+template<int, class T> T skip();\n+\n+template<class T>\n+constexpr unsigned sizeof_() {\n+  return sizeof(skip<(T(), 0), T>());\n+}\n+\n+struct A {\n+  int m = -1;\n+};\n+\n+static_assert(sizeof_<A>() == sizeof(A), \"\");"}, {"sha": "15c55821c01ba2c4c4d1695ed3a3e91275a120e3", "filename": "gcc/testsuite/g++.dg/template/evaluated1c.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3ba0eaaa223f7b8208d279e3f39ff134912f9e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fevaluated1c.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3ba0eaaa223f7b8208d279e3f39ff134912f9e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fevaluated1c.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fevaluated1c.C?ref=c3ba0eaaa223f7b8208d279e3f39ff134912f9e9", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/101906\n+// Like unevaluated1b.C, but using a variable template instead of a\n+// function template.\n+// { dg-do compile { target c++14 } }\n+\n+template<int, class T> T skip;\n+\n+template<class T>\n+constexpr unsigned sizeof_() {\n+  return sizeof(skip<(T(), 0), T>);\n+}\n+\n+struct A {\n+  int m = -1;\n+};\n+\n+static_assert(sizeof_<A>() == sizeof(A), \"\");"}]}