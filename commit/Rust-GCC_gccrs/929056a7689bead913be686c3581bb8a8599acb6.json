{"sha": "929056a7689bead913be686c3581bb8a8599acb6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI5MDU2YTc2ODliZWFkOTEzYmU2ODZjMzU4MWJiOGE4NTk5YWNiNg==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2021-05-10T12:51:53Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2021-05-10T12:56:16Z"}, "message": "arm: MVE: Remove _s and _u suffixes from vcmp* builtins.\n\nThis patch brings more unification in the vector comparison builtins,\nby removing the useless 's' (signed) suffix since we no longer need\nunsigned versions.\n\n2021-05-10  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/\n\t* config/arm/arm_mve.h (__arm_vcmp*): Remove 's' suffix.\n\t* config/arm/arm_mve_builtins.def (vcmp*): Remove 's' suffix.\n\t* config/arm/mve.md (mve_vcmp*): Remove 's' suffix in pattern\n\tnames.", "tree": {"sha": "e2a5e02593a4523a500dc4dde3f57446cf5a12ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2a5e02593a4523a500dc4dde3f57446cf5a12ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/929056a7689bead913be686c3581bb8a8599acb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/929056a7689bead913be686c3581bb8a8599acb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/929056a7689bead913be686c3581bb8a8599acb6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/929056a7689bead913be686c3581bb8a8599acb6/comments", "author": null, "committer": null, "parents": [{"sha": "f56af5f9c20ca8cf4ee916bbfc06d8c1584868cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f56af5f9c20ca8cf4ee916bbfc06d8c1584868cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f56af5f9c20ca8cf4ee916bbfc06d8c1584868cb"}], "stats": {"total": 216, "additions": 108, "deletions": 108}, "files": [{"sha": "5d7826943a7a7d38350f1cb0ffd532f33781c7c6", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 60, "deletions": 60, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/929056a7689bead913be686c3581bb8a8599acb6/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/929056a7689bead913be686c3581bb8a8599acb6/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=929056a7689bead913be686c3581bb8a8599acb6", "patch": "@@ -3674,42 +3674,42 @@ __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpneq_s8 (int8x16_t __a, int8x16_t __b)\n {\n-  return __builtin_mve_vcmpneq_sv16qi (__a, __b);\n+  return __builtin_mve_vcmpneq_v16qi (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpneq_s16 (int16x8_t __a, int16x8_t __b)\n {\n-  return __builtin_mve_vcmpneq_sv8hi (__a, __b);\n+  return __builtin_mve_vcmpneq_v8hi (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpneq_s32 (int32x4_t __a, int32x4_t __b)\n {\n-  return __builtin_mve_vcmpneq_sv4si (__a, __b);\n+  return __builtin_mve_vcmpneq_v4si (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpneq_u8 (uint8x16_t __a, uint8x16_t __b)\n {\n-  return __builtin_mve_vcmpneq_sv16qi ((int8x16_t)__a, (int8x16_t)__b);\n+  return __builtin_mve_vcmpneq_v16qi ((int8x16_t)__a, (int8x16_t)__b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpneq_u16 (uint16x8_t __a, uint16x8_t __b)\n {\n-  return __builtin_mve_vcmpneq_sv8hi ((int16x8_t)__a, (int16x8_t)__b);\n+  return __builtin_mve_vcmpneq_v8hi ((int16x8_t)__a, (int16x8_t)__b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpneq_u32 (uint32x4_t __a, uint32x4_t __b)\n {\n-  return __builtin_mve_vcmpneq_sv4si ((int32x4_t)__a, (int32x4_t)__b);\n+  return __builtin_mve_vcmpneq_v4si ((int32x4_t)__a, (int32x4_t)__b);\n }\n \n __extension__ extern __inline int8x16_t\n@@ -3932,49 +3932,49 @@ __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpneq_n_u8 (uint8x16_t __a, uint8_t __b)\n {\n-  return __builtin_mve_vcmpneq_n_sv16qi ((int8x16_t)__a, (int8_t)__b);\n+  return __builtin_mve_vcmpneq_n_v16qi ((int8x16_t)__a, (int8_t)__b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmphiq_u8 (uint8x16_t __a, uint8x16_t __b)\n {\n-  return __builtin_mve_vcmphiq_uv16qi (__a, __b);\n+  return __builtin_mve_vcmphiq_v16qi (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmphiq_n_u8 (uint8x16_t __a, uint8_t __b)\n {\n-  return __builtin_mve_vcmphiq_n_uv16qi (__a, __b);\n+  return __builtin_mve_vcmphiq_n_v16qi (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpeqq_u8 (uint8x16_t __a, uint8x16_t __b)\n {\n-  return __builtin_mve_vcmpeqq_sv16qi ((int8x16_t)__a, (int8x16_t)__b);\n+  return __builtin_mve_vcmpeqq_v16qi ((int8x16_t)__a, (int8x16_t)__b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpeqq_n_u8 (uint8x16_t __a, uint8_t __b)\n {\n-  return __builtin_mve_vcmpeqq_n_sv16qi ((int8x16_t)__a, (int8_t)__b);\n+  return __builtin_mve_vcmpeqq_n_v16qi ((int8x16_t)__a, (int8_t)__b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpcsq_u8 (uint8x16_t __a, uint8x16_t __b)\n {\n-  return __builtin_mve_vcmpcsq_uv16qi (__a, __b);\n+  return __builtin_mve_vcmpcsq_v16qi (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpcsq_n_u8 (uint8x16_t __a, uint8_t __b)\n {\n-  return __builtin_mve_vcmpcsq_n_uv16qi (__a, __b);\n+  return __builtin_mve_vcmpcsq_n_v16qi (__a, __b);\n }\n \n __extension__ extern __inline uint8x16_t\n@@ -4144,77 +4144,77 @@ __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpneq_n_s8 (int8x16_t __a, int8_t __b)\n {\n-  return __builtin_mve_vcmpneq_n_sv16qi (__a, __b);\n+  return __builtin_mve_vcmpneq_n_v16qi (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpltq_s8 (int8x16_t __a, int8x16_t __b)\n {\n-  return __builtin_mve_vcmpltq_sv16qi (__a, __b);\n+  return __builtin_mve_vcmpltq_v16qi (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpltq_n_s8 (int8x16_t __a, int8_t __b)\n {\n-  return __builtin_mve_vcmpltq_n_sv16qi (__a, __b);\n+  return __builtin_mve_vcmpltq_n_v16qi (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpleq_s8 (int8x16_t __a, int8x16_t __b)\n {\n-  return __builtin_mve_vcmpleq_sv16qi (__a, __b);\n+  return __builtin_mve_vcmpleq_v16qi (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpleq_n_s8 (int8x16_t __a, int8_t __b)\n {\n-  return __builtin_mve_vcmpleq_n_sv16qi (__a, __b);\n+  return __builtin_mve_vcmpleq_n_v16qi (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpgtq_s8 (int8x16_t __a, int8x16_t __b)\n {\n-  return __builtin_mve_vcmpgtq_sv16qi (__a, __b);\n+  return __builtin_mve_vcmpgtq_v16qi (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpgtq_n_s8 (int8x16_t __a, int8_t __b)\n {\n-  return __builtin_mve_vcmpgtq_n_sv16qi (__a, __b);\n+  return __builtin_mve_vcmpgtq_n_v16qi (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpgeq_s8 (int8x16_t __a, int8x16_t __b)\n {\n-  return __builtin_mve_vcmpgeq_sv16qi (__a, __b);\n+  return __builtin_mve_vcmpgeq_v16qi (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpgeq_n_s8 (int8x16_t __a, int8_t __b)\n {\n-  return __builtin_mve_vcmpgeq_n_sv16qi (__a, __b);\n+  return __builtin_mve_vcmpgeq_n_v16qi (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpeqq_s8 (int8x16_t __a, int8x16_t __b)\n {\n-  return __builtin_mve_vcmpeqq_sv16qi (__a, __b);\n+  return __builtin_mve_vcmpeqq_v16qi (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpeqq_n_s8 (int8x16_t __a, int8_t __b)\n {\n-  return __builtin_mve_vcmpeqq_n_sv16qi (__a, __b);\n+  return __builtin_mve_vcmpeqq_n_v16qi (__a, __b);\n }\n \n __extension__ extern __inline uint8x16_t\n@@ -4774,49 +4774,49 @@ __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpneq_n_u16 (uint16x8_t __a, uint16_t __b)\n {\n-  return __builtin_mve_vcmpneq_n_sv8hi ((int16x8_t)__a, (int16_t)__b);\n+  return __builtin_mve_vcmpneq_n_v8hi ((int16x8_t)__a, (int16_t)__b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmphiq_u16 (uint16x8_t __a, uint16x8_t __b)\n {\n-  return __builtin_mve_vcmphiq_uv8hi (__a, __b);\n+  return __builtin_mve_vcmphiq_v8hi (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmphiq_n_u16 (uint16x8_t __a, uint16_t __b)\n {\n-  return __builtin_mve_vcmphiq_n_uv8hi (__a, __b);\n+  return __builtin_mve_vcmphiq_n_v8hi (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpeqq_u16 (uint16x8_t __a, uint16x8_t __b)\n {\n-  return __builtin_mve_vcmpeqq_sv8hi ((int16x8_t)__a, (int16x8_t)__b);\n+  return __builtin_mve_vcmpeqq_v8hi ((int16x8_t)__a, (int16x8_t)__b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpeqq_n_u16 (uint16x8_t __a, uint16_t __b)\n {\n-  return __builtin_mve_vcmpeqq_n_sv8hi ((int16x8_t)__a, (int16_t)__b);\n+  return __builtin_mve_vcmpeqq_n_v8hi ((int16x8_t)__a, (int16_t)__b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpcsq_u16 (uint16x8_t __a, uint16x8_t __b)\n {\n-  return __builtin_mve_vcmpcsq_uv8hi (__a, __b);\n+  return __builtin_mve_vcmpcsq_v8hi (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpcsq_n_u16 (uint16x8_t __a, uint16_t __b)\n {\n-  return __builtin_mve_vcmpcsq_n_uv8hi (__a, __b);\n+  return __builtin_mve_vcmpcsq_n_v8hi (__a, __b);\n }\n \n __extension__ extern __inline uint16x8_t\n@@ -4986,77 +4986,77 @@ __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpneq_n_s16 (int16x8_t __a, int16_t __b)\n {\n-  return __builtin_mve_vcmpneq_n_sv8hi (__a, __b);\n+  return __builtin_mve_vcmpneq_n_v8hi (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpltq_s16 (int16x8_t __a, int16x8_t __b)\n {\n-  return __builtin_mve_vcmpltq_sv8hi (__a, __b);\n+  return __builtin_mve_vcmpltq_v8hi (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpltq_n_s16 (int16x8_t __a, int16_t __b)\n {\n-  return __builtin_mve_vcmpltq_n_sv8hi (__a, __b);\n+  return __builtin_mve_vcmpltq_n_v8hi (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpleq_s16 (int16x8_t __a, int16x8_t __b)\n {\n-  return __builtin_mve_vcmpleq_sv8hi (__a, __b);\n+  return __builtin_mve_vcmpleq_v8hi (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpleq_n_s16 (int16x8_t __a, int16_t __b)\n {\n-  return __builtin_mve_vcmpleq_n_sv8hi (__a, __b);\n+  return __builtin_mve_vcmpleq_n_v8hi (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpgtq_s16 (int16x8_t __a, int16x8_t __b)\n {\n-  return __builtin_mve_vcmpgtq_sv8hi (__a, __b);\n+  return __builtin_mve_vcmpgtq_v8hi (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpgtq_n_s16 (int16x8_t __a, int16_t __b)\n {\n-  return __builtin_mve_vcmpgtq_n_sv8hi (__a, __b);\n+  return __builtin_mve_vcmpgtq_n_v8hi (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpgeq_s16 (int16x8_t __a, int16x8_t __b)\n {\n-  return __builtin_mve_vcmpgeq_sv8hi (__a, __b);\n+  return __builtin_mve_vcmpgeq_v8hi (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpgeq_n_s16 (int16x8_t __a, int16_t __b)\n {\n-  return __builtin_mve_vcmpgeq_n_sv8hi (__a, __b);\n+  return __builtin_mve_vcmpgeq_n_v8hi (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpeqq_s16 (int16x8_t __a, int16x8_t __b)\n {\n-  return __builtin_mve_vcmpeqq_sv8hi (__a, __b);\n+  return __builtin_mve_vcmpeqq_v8hi (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpeqq_n_s16 (int16x8_t __a, int16_t __b)\n {\n-  return __builtin_mve_vcmpeqq_n_sv8hi (__a, __b);\n+  return __builtin_mve_vcmpeqq_n_v8hi (__a, __b);\n }\n \n __extension__ extern __inline uint16x8_t\n@@ -5616,49 +5616,49 @@ __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpneq_n_u32 (uint32x4_t __a, uint32_t __b)\n {\n-  return __builtin_mve_vcmpneq_n_sv4si ((int32x4_t)__a, (int32_t)__b);\n+  return __builtin_mve_vcmpneq_n_v4si ((int32x4_t)__a, (int32_t)__b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmphiq_u32 (uint32x4_t __a, uint32x4_t __b)\n {\n-  return __builtin_mve_vcmphiq_uv4si (__a, __b);\n+  return __builtin_mve_vcmphiq_v4si (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmphiq_n_u32 (uint32x4_t __a, uint32_t __b)\n {\n-  return __builtin_mve_vcmphiq_n_uv4si (__a, __b);\n+  return __builtin_mve_vcmphiq_n_v4si (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpeqq_u32 (uint32x4_t __a, uint32x4_t __b)\n {\n-  return __builtin_mve_vcmpeqq_sv4si ((int32x4_t)__a, (int32x4_t)__b);\n+  return __builtin_mve_vcmpeqq_v4si ((int32x4_t)__a, (int32x4_t)__b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpeqq_n_u32 (uint32x4_t __a, uint32_t __b)\n {\n-  return __builtin_mve_vcmpeqq_n_sv4si ((int32x4_t)__a, (int32_t)__b);\n+  return __builtin_mve_vcmpeqq_n_v4si ((int32x4_t)__a, (int32_t)__b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpcsq_u32 (uint32x4_t __a, uint32x4_t __b)\n {\n-  return __builtin_mve_vcmpcsq_uv4si (__a, __b);\n+  return __builtin_mve_vcmpcsq_v4si (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpcsq_n_u32 (uint32x4_t __a, uint32_t __b)\n {\n-  return __builtin_mve_vcmpcsq_n_uv4si (__a, __b);\n+  return __builtin_mve_vcmpcsq_n_v4si (__a, __b);\n }\n \n __extension__ extern __inline uint32x4_t\n@@ -5828,77 +5828,77 @@ __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpneq_n_s32 (int32x4_t __a, int32_t __b)\n {\n-  return __builtin_mve_vcmpneq_n_sv4si (__a, __b);\n+  return __builtin_mve_vcmpneq_n_v4si (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpltq_s32 (int32x4_t __a, int32x4_t __b)\n {\n-  return __builtin_mve_vcmpltq_sv4si (__a, __b);\n+  return __builtin_mve_vcmpltq_v4si (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpltq_n_s32 (int32x4_t __a, int32_t __b)\n {\n-  return __builtin_mve_vcmpltq_n_sv4si (__a, __b);\n+  return __builtin_mve_vcmpltq_n_v4si (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpleq_s32 (int32x4_t __a, int32x4_t __b)\n {\n-  return __builtin_mve_vcmpleq_sv4si (__a, __b);\n+  return __builtin_mve_vcmpleq_v4si (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpleq_n_s32 (int32x4_t __a, int32_t __b)\n {\n-  return __builtin_mve_vcmpleq_n_sv4si (__a, __b);\n+  return __builtin_mve_vcmpleq_n_v4si (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpgtq_s32 (int32x4_t __a, int32x4_t __b)\n {\n-  return __builtin_mve_vcmpgtq_sv4si (__a, __b);\n+  return __builtin_mve_vcmpgtq_v4si (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpgtq_n_s32 (int32x4_t __a, int32_t __b)\n {\n-  return __builtin_mve_vcmpgtq_n_sv4si (__a, __b);\n+  return __builtin_mve_vcmpgtq_n_v4si (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpgeq_s32 (int32x4_t __a, int32x4_t __b)\n {\n-  return __builtin_mve_vcmpgeq_sv4si (__a, __b);\n+  return __builtin_mve_vcmpgeq_v4si (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpgeq_n_s32 (int32x4_t __a, int32_t __b)\n {\n-  return __builtin_mve_vcmpgeq_n_sv4si (__a, __b);\n+  return __builtin_mve_vcmpgeq_n_v4si (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpeqq_s32 (int32x4_t __a, int32x4_t __b)\n {\n-  return __builtin_mve_vcmpeqq_sv4si (__a, __b);\n+  return __builtin_mve_vcmpeqq_v4si (__a, __b);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmpeqq_n_s32 (int32x4_t __a, int32_t __b)\n {\n-  return __builtin_mve_vcmpeqq_n_sv4si (__a, __b);\n+  return __builtin_mve_vcmpeqq_n_v4si (__a, __b);\n }\n \n __extension__ extern __inline uint32x4_t"}, {"sha": "e9b5b28f50604e26a2191aa405cb9d5418e5ed1e", "filename": "gcc/config/arm/arm_mve_builtins.def", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/929056a7689bead913be686c3581bb8a8599acb6/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/929056a7689bead913be686c3581bb8a8599acb6/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def?ref=929056a7689bead913be686c3581bb8a8599acb6", "patch": "@@ -89,7 +89,7 @@ VAR3 (BINOP_UNONE_UNONE_IMM, vshrq_n_u, v16qi, v8hi, v4si)\n VAR3 (BINOP_NONE_NONE_IMM, vshrq_n_s, v16qi, v8hi, v4si)\n VAR1 (BINOP_NONE_NONE_UNONE, vaddlvq_p_s, v4si)\n VAR1 (BINOP_UNONE_UNONE_UNONE, vaddlvq_p_u, v4si)\n-VAR3 (BINOP_UNONE_NONE_NONE, vcmpneq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_NONE_NONE, vcmpneq_, v16qi, v8hi, v4si)\n VAR3 (BINOP_NONE_NONE_NONE, vshlq_s, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_UNONE_NONE, vshlq_u, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_UNONE_UNONE, vsubq_u, v16qi, v8hi, v4si)\n@@ -117,10 +117,10 @@ VAR3 (BINOP_UNONE_UNONE_UNONE, vhsubq_n_u, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_UNONE_UNONE, vhaddq_u, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_UNONE_UNONE, vhaddq_n_u, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_UNONE_UNONE, veorq_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vcmphiq_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vcmphiq_n_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vcmpcsq_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vcmpcsq_n_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vcmphiq_, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vcmphiq_n_, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vcmpcsq_, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vcmpcsq_n_, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_UNONE_UNONE, vbicq_u, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_UNONE_UNONE, vandq_u, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_UNONE_UNONE, vaddvq_p_u, v16qi, v8hi, v4si)\n@@ -142,17 +142,17 @@ VAR3 (BINOP_UNONE_UNONE_NONE, vbrsrq_n_u, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_UNONE_IMM, vshlq_n_u, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_UNONE_IMM, vrshrq_n_u, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_UNONE_IMM, vqshlq_n_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_NONE_NONE, vcmpneq_n_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_NONE_NONE, vcmpltq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_NONE_NONE, vcmpltq_n_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_NONE_NONE, vcmpleq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_NONE_NONE, vcmpleq_n_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_NONE_NONE, vcmpgtq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_NONE_NONE, vcmpgtq_n_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_NONE_NONE, vcmpgeq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_NONE_NONE, vcmpgeq_n_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_NONE_NONE, vcmpeqq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_NONE_NONE, vcmpeqq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_NONE_NONE, vcmpneq_n_, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_NONE_NONE, vcmpltq_, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_NONE_NONE, vcmpltq_n_, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_NONE_NONE, vcmpleq_, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_NONE_NONE, vcmpleq_n_, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_NONE_NONE, vcmpgtq_, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_NONE_NONE, vcmpgtq_n_, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_NONE_NONE, vcmpgeq_, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_NONE_NONE, vcmpgeq_n_, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_NONE_NONE, vcmpeqq_, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_NONE_NONE, vcmpeqq_n_, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_NONE_IMM, vqshluq_n_s, v16qi, v8hi, v4si)\n VAR3 (BINOP_NONE_NONE_UNONE, vaddvq_p_s, v16qi, v8hi, v4si)\n VAR3 (BINOP_NONE_NONE_NONE, vsubq_s, v16qi, v8hi, v4si)"}, {"sha": "6f5fe06d7356b0b34a68d32a40103bed9ab0796d", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/929056a7689bead913be686c3581bb8a8599acb6/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/929056a7689bead913be686c3581bb8a8599acb6/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=929056a7689bead913be686c3581bb8a8599acb6", "patch": "@@ -811,9 +811,9 @@\n    (set_attr \"length\"\"8\")])\n \n ;;\n-;; [vcmpneq_s])\n+;; [vcmpneq_])\n ;;\n-(define_insn \"mve_vcmpneq_s<mode>\"\n+(define_insn \"mve_vcmpneq_<mode>\"\n   [\n    (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n \t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n@@ -980,9 +980,9 @@\n )\n \n ;;\n-;; [vcmpcsq_n_u])\n+;; [vcmpcsq_n_])\n ;;\n-(define_insn \"mve_vcmpcsq_n_u<mode>\"\n+(define_insn \"mve_vcmpcsq_n_<mode>\"\n   [\n    (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n \t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n@@ -995,9 +995,9 @@\n ])\n \n ;;\n-;; [vcmpcsq_u])\n+;; [vcmpcsq_])\n ;;\n-(define_insn \"mve_vcmpcsq_u<mode>\"\n+(define_insn \"mve_vcmpcsq_<mode>\"\n   [\n    (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n \t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n@@ -1010,9 +1010,9 @@\n ])\n \n ;;\n-;; [vcmpeqq_n_s])\n+;; [vcmpeqq_n_])\n ;;\n-(define_insn \"mve_vcmpeqq_n_s<mode>\"\n+(define_insn \"mve_vcmpeqq_n_<mode>\"\n   [\n    (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n \t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n@@ -1025,9 +1025,9 @@\n ])\n \n ;;\n-;; [vcmpeqq_s])\n+;; [vcmpeqq_])\n ;;\n-(define_insn \"mve_vcmpeqq_s<mode>\"\n+(define_insn \"mve_vcmpeqq_<mode>\"\n   [\n    (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n \t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n@@ -1040,9 +1040,9 @@\n ])\n \n ;;\n-;; [vcmpgeq_n_s])\n+;; [vcmpgeq_n_])\n ;;\n-(define_insn \"mve_vcmpgeq_n_s<mode>\"\n+(define_insn \"mve_vcmpgeq_n_<mode>\"\n   [\n    (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n \t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n@@ -1055,9 +1055,9 @@\n ])\n \n ;;\n-;; [vcmpgeq_s])\n+;; [vcmpgeq_])\n ;;\n-(define_insn \"mve_vcmpgeq_s<mode>\"\n+(define_insn \"mve_vcmpgeq_<mode>\"\n   [\n    (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n \t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n@@ -1070,9 +1070,9 @@\n ])\n \n ;;\n-;; [vcmpgtq_n_s])\n+;; [vcmpgtq_n_])\n ;;\n-(define_insn \"mve_vcmpgtq_n_s<mode>\"\n+(define_insn \"mve_vcmpgtq_n_<mode>\"\n   [\n    (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n \t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n@@ -1085,9 +1085,9 @@\n ])\n \n ;;\n-;; [vcmpgtq_s])\n+;; [vcmpgtq_])\n ;;\n-(define_insn \"mve_vcmpgtq_s<mode>\"\n+(define_insn \"mve_vcmpgtq_<mode>\"\n   [\n    (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n \t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n@@ -1100,9 +1100,9 @@\n ])\n \n ;;\n-;; [vcmphiq_n_u])\n+;; [vcmphiq_n_])\n ;;\n-(define_insn \"mve_vcmphiq_n_u<mode>\"\n+(define_insn \"mve_vcmphiq_n_<mode>\"\n   [\n    (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n \t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n@@ -1115,9 +1115,9 @@\n ])\n \n ;;\n-;; [vcmphiq_u])\n+;; [vcmphiq_])\n ;;\n-(define_insn \"mve_vcmphiq_u<mode>\"\n+(define_insn \"mve_vcmphiq_<mode>\"\n   [\n    (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n \t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n@@ -1130,9 +1130,9 @@\n ])\n \n ;;\n-;; [vcmpleq_n_s])\n+;; [vcmpleq_n_])\n ;;\n-(define_insn \"mve_vcmpleq_n_s<mode>\"\n+(define_insn \"mve_vcmpleq_n_<mode>\"\n   [\n    (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n \t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n@@ -1145,9 +1145,9 @@\n ])\n \n ;;\n-;; [vcmpleq_s])\n+;; [vcmpleq_])\n ;;\n-(define_insn \"mve_vcmpleq_s<mode>\"\n+(define_insn \"mve_vcmpleq_<mode>\"\n   [\n    (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n \t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n@@ -1160,9 +1160,9 @@\n ])\n \n ;;\n-;; [vcmpltq_n_s])\n+;; [vcmpltq_n_])\n ;;\n-(define_insn \"mve_vcmpltq_n_s<mode>\"\n+(define_insn \"mve_vcmpltq_n_<mode>\"\n   [\n    (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n \t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n@@ -1175,9 +1175,9 @@\n ])\n \n ;;\n-;; [vcmpltq_s])\n+;; [vcmpltq_])\n ;;\n-(define_insn \"mve_vcmpltq_s<mode>\"\n+(define_insn \"mve_vcmpltq_<mode>\"\n   [\n    (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n \t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n@@ -1190,9 +1190,9 @@\n ])\n \n ;;\n-;; [vcmpneq_n_s])\n+;; [vcmpneq_n_])\n ;;\n-(define_insn \"mve_vcmpneq_n_s<mode>\"\n+(define_insn \"mve_vcmpneq_n_<mode>\"\n   [\n    (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n \t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")"}]}