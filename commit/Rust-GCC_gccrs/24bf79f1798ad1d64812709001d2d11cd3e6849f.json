{"sha": "24bf79f1798ad1d64812709001d2d11cd3e6849f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRiZjc5ZjE3OThhZDFkNjQ4MTI3MDkwMDFkMmQxMWNkM2U2ODQ5Zg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-02-17T13:33:45Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-02-17T13:41:37Z"}, "message": "c++: More set_identifier_type_value fixing [PR 99116]\n\nMy recent change looked under template_parms in two places, but that\nwas covering up a separate problem.  We were attempting to set the\nidentifier_type_value of a template_parm into the template_parm\nscope.  The peeking stopped us doing that, but confused poplevel,\nleaving an identifier value lying around.  This fixes the underlying\nproblem in do_pushtag -- we only need to set the identifier_type_value\ndirectly when we're in a template_parm scope (a later pushdecl will\npush the actual template_decl).  for non-class non-template-parm\nbindings do_pushdecl already ends up manipulating\nidentifier_type_value correctly.\n\n\tPR c++/99116\n\tgcc/cp/\n\t* name-lookup.c (do_pushdecl): Don't peek under template_parm\n\tbindings here ...\n\t(set_identifier_type_value_with_scope): ... or here.\n\t(do_pushtag): Only set_identifier_type_value_with_scope at\n\tnon-class template parm scope, and use parent scope.\n\tgcc/testsuite/\n\t* g++.dg/lookup/pr99116-1.C: New.\n\t* g++.dg/lookup/pr99116-2.C: New.", "tree": {"sha": "c7501157810903d8c2a6afae46e2d83fb0542469", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7501157810903d8c2a6afae46e2d83fb0542469"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24bf79f1798ad1d64812709001d2d11cd3e6849f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24bf79f1798ad1d64812709001d2d11cd3e6849f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24bf79f1798ad1d64812709001d2d11cd3e6849f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24bf79f1798ad1d64812709001d2d11cd3e6849f/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d46c7e2c546b26d036856cf570694b832d3b1f54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d46c7e2c546b26d036856cf570694b832d3b1f54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d46c7e2c546b26d036856cf570694b832d3b1f54"}], "stats": {"total": 76, "additions": 58, "deletions": 18}, "files": [{"sha": "6a4c10681a3f8207bd4e7245033c19143b9ed8e5", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24bf79f1798ad1d64812709001d2d11cd3e6849f/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24bf79f1798ad1d64812709001d2d11cd3e6849f/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=24bf79f1798ad1d64812709001d2d11cd3e6849f", "patch": "@@ -3691,14 +3691,9 @@ do_pushdecl (tree decl, bool hiding)\n \t    if (match == error_mark_node)\n \t      ;\n \t    else if (TREE_CODE (match) == TYPE_DECL)\n-\t      {\n-\t\tauto *l = level;\n-\t\twhile (l->kind == sk_template_parms)\n-\t\t  l = l->level_chain;\n-\t\tgcc_checking_assert (REAL_IDENTIFIER_TYPE_VALUE (name)\n-\t\t\t\t     == (l->kind == sk_namespace\n-\t\t\t\t\t ? NULL_TREE : TREE_TYPE (match)));\n-\t      }\n+\t      gcc_checking_assert (REAL_IDENTIFIER_TYPE_VALUE (name)\n+\t\t\t\t   == (level->kind == sk_namespace\n+\t\t\t\t       ? NULL_TREE : TREE_TYPE (match)));\n \t    else if (iter.hidden_p () && !hiding)\n \t      {\n \t\t/* Unhiding a previously hidden decl.  */\n@@ -4756,12 +4751,13 @@ print_binding_stack (void)\n static void\n set_identifier_type_value_with_scope (tree id, tree decl, cp_binding_level *b)\n {\n-  while (b->kind == sk_template_parms)\n-    b = b->level_chain;\n-\n   if (b->kind == sk_namespace)\n     /* At namespace scope we should not see an identifier type value.  */\n-    gcc_checking_assert (!REAL_IDENTIFIER_TYPE_VALUE (id));\n+    gcc_checking_assert (!REAL_IDENTIFIER_TYPE_VALUE (id)\n+\t\t\t /* We could be pushing a friend underneath a template\n+\t\t\t    parm (ill-formed).  */\n+\t\t\t || (TEMPLATE_PARM_P\n+\t\t\t     (TYPE_NAME (REAL_IDENTIFIER_TYPE_VALUE (id)))));\n   else\n     {\n       /* Push the current type value, so we can restore it later  */\n@@ -8257,10 +8253,8 @@ do_pushtag (tree name, tree type, TAG_how how)\n       if (decl == error_mark_node)\n \treturn decl;\n \n-      bool in_class = false;\n       if (b->kind == sk_class)\n \t{\n-\t  in_class = true;\n \t  if (!TYPE_BEING_DEFINED (current_class_type))\n \t    /* Don't push anywhere if the class is complete; a lambda in an\n \t       NSDMI is not a member of the class.  */\n@@ -8275,7 +8269,12 @@ do_pushtag (tree name, tree type, TAG_how how)\n \t    pushdecl_class_level (decl);\n \t}\n       else if (b->kind == sk_template_parms)\n-\tin_class = b->level_chain->kind == sk_class;\n+\t{\n+\t  /* Do not push the tag here -- we'll want to push the\n+\t     TEMPLATE_DECL.  */\n+\t  if (b->level_chain->kind != sk_class)\n+\t    set_identifier_type_value_with_scope (name, tdef, b->level_chain);\n+\t}\n       else\n \t{\n \t  decl = do_pushdecl_with_scope\n@@ -8293,9 +8292,6 @@ do_pushtag (tree name, tree type, TAG_how how)\n \t    }\n \t}\n \n-      if (!in_class)\n-\tset_identifier_type_value_with_scope (name, tdef, b);\n-\n       TYPE_CONTEXT (type) = DECL_CONTEXT (decl);\n \n       /* If this is a local class, keep track of it.  We need this"}, {"sha": "01b483ea9153e70f7872646d0dc52ca680110fe0", "filename": "gcc/testsuite/g++.dg/lookup/pr99116-1.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24bf79f1798ad1d64812709001d2d11cd3e6849f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr99116-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24bf79f1798ad1d64812709001d2d11cd3e6849f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr99116-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr99116-1.C?ref=24bf79f1798ad1d64812709001d2d11cd3e6849f", "patch": "@@ -0,0 +1,25 @@\n+// PR 99116 sliding hidden friends under template parm scopes\n+\n+template<int T> struct Z {\n+\n+  friend struct T; // { dg-error \"shadows template parameter\" }\n+};\n+\n+struct Y {\n+\n+  template<typename S> struct A {};\n+\n+  friend struct S;\n+};\n+\n+struct X\n+{\n+  struct S2 {};\n+  \n+  struct In\n+  {\n+    friend struct S2;\n+  };\n+};\n+\n+typedef int S2;"}, {"sha": "2a4148bade8df5f3893b10086158ee6e83759da9", "filename": "gcc/testsuite/g++.dg/lookup/pr99116-2.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24bf79f1798ad1d64812709001d2d11cd3e6849f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr99116-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24bf79f1798ad1d64812709001d2d11cd3e6849f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr99116-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr99116-2.C?ref=24bf79f1798ad1d64812709001d2d11cd3e6849f", "patch": "@@ -0,0 +1,19 @@\n+// PR 99116, we need to remove the namespace-scope meaning of\n+// IDENTIFIER_TYPE_VALUE.\n+\n+namespace __gnu_cxx \n+{\n+template<typename _CharT>\n+struct char_traits\n+{\n+  static void length();\n+};\n+\n+template<typename _T>\n+void char_traits<_T>::length ()\n+{\n+}\n+\n+}\n+       \n+struct char_traits;"}]}