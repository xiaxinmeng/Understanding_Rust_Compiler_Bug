{"sha": "657612fb9f58c9cca44b091e3cf40d704fe3ec75", "node_id": "C_kwDOANBUbNoAKDY1NzYxMmZiOWY1OGM5Y2NhNDRiMDkxZTNjZjQwZDcwNGZlM2VjNzU", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-05-19T07:32:22Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-05-23T01:57:04Z"}, "message": "Increase move cost between mask and gpr.\n\nkmovd only uses port5 which is often the bottleneck of\nperformance. Also from latency perspective, spill and reload mostly\ncould be STLF or even MRN which only take 1 cycle.\n\nSo the patch increase move cost between gpr and mask to be the same as\ngpr <-> sse register.\n\ngcc/ChangeLog:\n\n\t* config/i386/x86-tune-costs.h (skylake_cost): Increase gpr\n\t<-> mask cost from 5 to 6.\n\t(icelake_cost): Ditto.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.target/i386/spill_to_mask-1.c: New test.", "tree": {"sha": "d906d8bf40ac9c803b936c1bb7656df992c629b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d906d8bf40ac9c803b936c1bb7656df992c629b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/657612fb9f58c9cca44b091e3cf40d704fe3ec75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/657612fb9f58c9cca44b091e3cf40d704fe3ec75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/657612fb9f58c9cca44b091e3cf40d704fe3ec75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/657612fb9f58c9cca44b091e3cf40d704fe3ec75/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "260f189335054ffdbf3866dfd2bff1abb5c989f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/260f189335054ffdbf3866dfd2bff1abb5c989f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/260f189335054ffdbf3866dfd2bff1abb5c989f0"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "05cbd49ec870a39fd5a989e4c0bbfc5acd38dbb1", "filename": "gcc/config/i386/x86-tune-costs.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/657612fb9f58c9cca44b091e3cf40d704fe3ec75/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/657612fb9f58c9cca44b091e3cf40d704fe3ec75/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h?ref=657612fb9f58c9cca44b091e3cf40d704fe3ec75", "patch": "@@ -1866,7 +1866,7 @@ struct processor_costs skylake_cost = {\n   {8, 8, 8, 12, 24},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   6, 6,\t\t\t\t/* SSE->integer and integer->SSE moves */\n-  5, 5,\t\t\t\t/* mask->integer and integer->mask moves */\n+  6, 6,\t\t\t\t/* mask->integer and integer->mask moves */\n   {8, 8, 8},\t\t\t\t/* cost of loading mask register\n \t\t\t\t\t   in QImode, HImode, SImode.  */\n   {6, 6, 6},\t\t\t\t/* cost if storing mask register\n@@ -1992,7 +1992,7 @@ struct processor_costs icelake_cost = {\n   {8, 8, 8, 12, 24},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   6, 6,\t\t\t\t/* SSE->integer and integer->SSE moves */\n-  5, 5,\t\t\t\t/* mask->integer and integer->mask moves */\n+  6, 6,\t\t\t\t/* mask->integer and integer->mask moves */\n   {8, 8, 8},\t\t\t\t/* cost of loading mask register\n \t\t\t\t\t   in QImode, HImode, SImode.  */\n   {6, 6, 6},\t\t\t\t/* cost if storing mask register"}, {"sha": "be19239a685a0c3086ff6c03fab66d7321153950", "filename": "gcc/testsuite/gcc.target/i386/spill_to_mask-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/657612fb9f58c9cca44b091e3cf40d704fe3ec75/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspill_to_mask-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/657612fb9f58c9cca44b091e3cf40d704fe3ec75/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspill_to_mask-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspill_to_mask-1.c?ref=657612fb9f58c9cca44b091e3cf40d704fe3ec75", "patch": "@@ -120,7 +120,7 @@ void foo (DTYPE in[16], DTYPE out[8], const DTYPE C[16])\n     out[7] += h;\n }\n \n-/* { dg-final { scan-assembler \"kmovd\" } } */\n+/* { dg-final { scan-assembler \"kmovd\" { xfail *-*-* } } } */\n /* { dg-final { scan-assembler-not \"knot\" } } */\n /* { dg-final { scan-assembler-not \"kxor\" } } */\n /* { dg-final { scan-assembler-not \"kor\" } } */"}]}