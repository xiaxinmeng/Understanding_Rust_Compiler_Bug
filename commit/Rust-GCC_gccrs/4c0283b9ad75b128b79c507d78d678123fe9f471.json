{"sha": "4c0283b9ad75b128b79c507d78d678123fe9f471", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMwMjgzYjlhZDc1YjEyOGI3OWM1MDdkNzhkNjc4MTIzZmU5ZjQ3MQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-05-12T08:01:13Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-05-12T08:01:13Z"}, "message": "tree-vect-generic: Fix bitfield widths [PR94980 3/3]\n\nThis third patch of three actually fixes the PR.  We were using\n8-bit BIT_FIELD_REFs to access single-bit elements, and multiplying\nthe vector index by 8 bits rather than 1 bit.\n\n2020-05-12  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\tPR tree-optimization/94980\n\t* tree-vect-generic.c (expand_vector_comparison): Use\n\tvector_element_bits_tree to get the element size in bits,\n\trather than using TYPE_SIZE.\n\t(expand_vector_condition, vector_element): Likewise.\n\ngcc/testsuite/\n\tPR tree-optimization/94980\n\t* gcc.target/i386/pr94980.c: New test.", "tree": {"sha": "577ba5e88c800118e7a7ebdf085ad2639c61ffe4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/577ba5e88c800118e7a7ebdf085ad2639c61ffe4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c0283b9ad75b128b79c507d78d678123fe9f471", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c0283b9ad75b128b79c507d78d678123fe9f471", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c0283b9ad75b128b79c507d78d678123fe9f471", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c0283b9ad75b128b79c507d78d678123fe9f471/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14605b6bd8c37fffd8065c5c3fe6b1b9d7b2a294", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14605b6bd8c37fffd8065c5c3fe6b1b9d7b2a294", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14605b6bd8c37fffd8065c5c3fe6b1b9d7b2a294"}], "stats": {"total": 31, "additions": 27, "deletions": 4}, "files": [{"sha": "751b71d57104e564dafc540cf07a3494a6315ff6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c0283b9ad75b128b79c507d78d678123fe9f471/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c0283b9ad75b128b79c507d78d678123fe9f471/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c0283b9ad75b128b79c507d78d678123fe9f471", "patch": "@@ -1,3 +1,11 @@\n+2020-05-12  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/94980\n+\t* tree-vect-generic.c (expand_vector_comparison): Use\n+\tvector_element_bits_tree to get the element size in bits,\n+\trather than using TYPE_SIZE.\n+\t(expand_vector_condition, vector_element): Likewise.\n+\n 2020-05-12  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR tree-optimization/94980"}, {"sha": "dc7eb3141a43a3cde0e0ffbd2c2f284636e9d987", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c0283b9ad75b128b79c507d78d678123fe9f471/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c0283b9ad75b128b79c507d78d678123fe9f471/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4c0283b9ad75b128b79c507d78d678123fe9f471", "patch": "@@ -1,3 +1,8 @@\n+2020-05-12  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/94980\n+\t* gcc.target/i386/pr94980.c: New test.\n+\n 2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \t* gcc.target/powerpc/vec-clzm-0.c: Rename to..."}, {"sha": "488f94abec9473aa0e094dab2948971fecf9b2bd", "filename": "gcc/testsuite/gcc.target/i386/pr94980.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c0283b9ad75b128b79c507d78d678123fe9f471/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94980.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c0283b9ad75b128b79c507d78d678123fe9f471/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94980.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94980.c?ref=4c0283b9ad75b128b79c507d78d678123fe9f471", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl\" } */\n+\n+int __attribute__((__vector_size__(16))) v;\n+\n+void\n+foo(void)\n+{\n+  0 <= (0 != v) >= 0;\n+}"}, {"sha": "a7fe83da0e3810c0a2c6b6c26a15417dd284ef5f", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c0283b9ad75b128b79c507d78d678123fe9f471/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c0283b9ad75b128b79c507d78d678123fe9f471/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=4c0283b9ad75b128b79c507d78d678123fe9f471", "patch": "@@ -390,7 +390,7 @@ expand_vector_comparison (gimple_stmt_iterator *gsi, tree type, tree op0,\n \t\t\t\t\t\t(TREE_TYPE (type)))))\n \t{\n \t  tree inner_type = TREE_TYPE (TREE_TYPE (op0));\n-\t  tree part_width = TYPE_SIZE (inner_type);\n+\t  tree part_width = vector_element_bits_tree (TREE_TYPE (op0));\n \t  tree index = bitsize_int (0);\n \t  int nunits = nunits_for_known_piecewise_op (TREE_TYPE (op0));\n \t  int prec = GET_MODE_PRECISION (SCALAR_TYPE_MODE (type));\n@@ -944,9 +944,9 @@ expand_vector_condition (gimple_stmt_iterator *gsi)\n   vec<constructor_elt, va_gc> *v;\n   tree constr;\n   tree inner_type = TREE_TYPE (type);\n+  tree width = vector_element_bits_tree (type);\n   tree cond_type = TREE_TYPE (TREE_TYPE (a));\n   tree comp_inner_type = cond_type;\n-  tree width = TYPE_SIZE (inner_type);\n   tree index = bitsize_int (0);\n   tree comp_width = width;\n   tree comp_index = index;\n@@ -960,7 +960,7 @@ expand_vector_condition (gimple_stmt_iterator *gsi)\n       a1 = TREE_OPERAND (a, 0);\n       a2 = TREE_OPERAND (a, 1);\n       comp_inner_type = TREE_TYPE (TREE_TYPE (a1));\n-      comp_width = TYPE_SIZE (comp_inner_type);\n+      comp_width = vector_element_bits_tree (TREE_TYPE (a1));\n     }\n \n   if (expand_vec_cond_expr_p (type, TREE_TYPE (a1), TREE_CODE (a)))\n@@ -1333,7 +1333,7 @@ vector_element (gimple_stmt_iterator *gsi, tree vect, tree idx, tree *ptmpvec)\n         }\n       else\n         {\n-\t  tree size = TYPE_SIZE (vect_elt_type);\n+\t  tree size = vector_element_bits_tree (vect_type);\n \t  tree pos = fold_build2 (MULT_EXPR, bitsizetype, bitsize_int (index),\n \t\t\t\t  size);\n \t  return fold_build3 (BIT_FIELD_REF, vect_elt_type, vect, size, pos);"}]}