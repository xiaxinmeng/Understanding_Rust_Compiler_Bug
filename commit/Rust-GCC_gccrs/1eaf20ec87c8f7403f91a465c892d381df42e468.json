{"sha": "1eaf20ec87c8f7403f91a465c892d381df42e468", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVhZjIwZWM4N2M4Zjc0MDNmOTFhNDY1Yzg5MmQzODFkZjQyZTQ2OA==", "commit": {"author": {"name": "Ralf Wildenhues", "email": "Ralf.Wildenhues@gmx.de", "date": "2007-01-27T23:51:49Z"}, "committer": {"name": "Gerald Pfeifer", "email": "gerald@gcc.gnu.org", "date": "2007-01-27T23:51:49Z"}, "message": "sourcebuild.texi: Add comma for clarity.\n\n\t* doc/sourcebuild.texi: Add comma for clarity.\n\t* doc/extend.texi: Fix some typos.\n\t* doc/passes.texi: Likewise.\n\t* doc/cppinternals.texi: Likewise.\n\t* doc/c-tree.texi: Likewise.\n\t* doc/tree-ssa.texi: Likewise.\n\nFrom-SVN: r121241", "tree": {"sha": "def672de14809bb630fc7615a16ab025664fcfb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/def672de14809bb630fc7615a16ab025664fcfb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1eaf20ec87c8f7403f91a465c892d381df42e468", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eaf20ec87c8f7403f91a465c892d381df42e468", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1eaf20ec87c8f7403f91a465c892d381df42e468", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eaf20ec87c8f7403f91a465c892d381df42e468/comments", "author": null, "committer": null, "parents": [{"sha": "7fbb9a499c94f945e4c495e431aa16ad0ff47e8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fbb9a499c94f945e4c495e431aa16ad0ff47e8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fbb9a499c94f945e4c495e431aa16ad0ff47e8d"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "d65a3652b458dcaeb077119fa26326566227c922", "filename": "gcc/doc/c-tree.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eaf20ec87c8f7403f91a465c892d381df42e468/gcc%2Fdoc%2Fc-tree.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eaf20ec87c8f7403f91a465c892d381df42e468/gcc%2Fdoc%2Fc-tree.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fc-tree.texi?ref=1eaf20ec87c8f7403f91a465c892d381df42e468", "patch": "@@ -2193,7 +2193,7 @@ pointer or reference type.\n \n @item FIX_TRUNC_EXPR\n These nodes represent conversion of a floating-point value to an\n-integer.  The single operand will have a floating-point type, while the\n+integer.  The single operand will have a floating-point type, while\n the complete expression will have an integral (or boolean) type.  The\n operand is rounded towards zero.\n "}, {"sha": "24164243a02cf3dc7333cb2519047a757a07dadd", "filename": "gcc/doc/cppinternals.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eaf20ec87c8f7403f91a465c892d381df42e468/gcc%2Fdoc%2Fcppinternals.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eaf20ec87c8f7403f91a465c892d381df42e468/gcc%2Fdoc%2Fcppinternals.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals.texi?ref=1eaf20ec87c8f7403f91a465c892d381df42e468", "patch": "@@ -963,7 +963,7 @@ directives outside the main conditional block for the optimization to be\n on.\n \n Note that whilst we are inside the conditional block, @code{mi_valid} is\n-likely to be reset to @code{false}, but this does not matter since the\n+likely to be reset to @code{false}, but this does not matter since\n the closing @code{#endif} restores it to @code{true} if appropriate.\n \n Finally, since @code{_cpp_lex_direct} pops the file off the buffer stack"}, {"sha": "2ed8f40fc7ef31d92b89e89ab27d40fe070ad298", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eaf20ec87c8f7403f91a465c892d381df42e468/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eaf20ec87c8f7403f91a465c892d381df42e468/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=1eaf20ec87c8f7403f91a465c892d381df42e468", "patch": "@@ -1290,7 +1290,7 @@ As a GNU extension, GCC allows initialization of objects with static storage\n duration by compound literals (which is not possible in ISO C99, because\n the initializer is not a constant).\n It is handled as if the object was initialized only with the bracket\n-enclosed list if compound literal's and object types match.\n+enclosed list if the types of the compound literal and the object match.\n The initializer list of the compound literal must be constant.\n If the object being initialized has array type of unknown size, the size is\n determined by compound literal size.\n@@ -10123,7 +10123,7 @@ macros are defined.\n @cindex pragma, diagnostic\n \n Modifies the disposition of a diagnostic.  Note that not all\n-diagnostics are modifyiable; at the moment only warnings (normally\n+diagnostics are modifiable; at the moment only warnings (normally\n controlled by @samp{-W...}) can be controlled, and not all of them.\n Use @option{-fdiagnostics-show-option} to determine which diagnostics\n are controllable and which option controls them.\n@@ -11151,7 +11151,7 @@ and are now removed from G++.\n The implicit typename extension has been deprecated and is now\n removed from G++.\n \n-The use of default arguments in function pointers, function typedefs and\n+The use of default arguments in function pointers, function typedefs\n and other places where they are not permitted by the standard is\n deprecated and will be removed from a future version of G++.\n "}, {"sha": "dfca0ac8d1fa81d06d79c4cac52300d0abc47dd2", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eaf20ec87c8f7403f91a465c892d381df42e468/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eaf20ec87c8f7403f91a465c892d381df42e468/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=1eaf20ec87c8f7403f91a465c892d381df42e468", "patch": "@@ -909,7 +909,7 @@ tools can not generate or interpret stabs.\n @item --disable-multilib\n Specify that multiple target\n libraries to support different target variants, calling\n-conventions, etc should not be built.  The default is to build a\n+conventions, etc.@: should not be built.  The default is to build a\n predefined set of them.\n \n Some targets provide finer-grained control over which multilibs are built"}, {"sha": "bd8c476d933e6d92d863c974f60004f31324d65f", "filename": "gcc/doc/passes.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eaf20ec87c8f7403f91a465c892d381df42e468/gcc%2Fdoc%2Fpasses.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eaf20ec87c8f7403f91a465c892d381df42e468/gcc%2Fdoc%2Fpasses.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fpasses.texi?ref=1eaf20ec87c8f7403f91a465c892d381df42e468", "patch": "@@ -223,7 +223,7 @@ library.  The pass is located in @file{omp-low.c} and is described by\n \n @item Lower control flow\n \n-This pass flattens @code{if} statements (@code{COND_EXPR}) and\n+This pass flattens @code{if} statements (@code{COND_EXPR})\n and moves lexical bindings (@code{BIND_EXPR}) out of line.  After\n this pass, all @code{if} statements will have exactly two @code{goto}\n statements in its @code{then} and @code{else} arms.  Lexical binding\n@@ -324,7 +324,7 @@ This pass performs a flow sensitive SSA-based points-to analysis.\n The resulting may-alias, must-alias, and escape analysis information\n is used to promote variables from in-memory addressable objects to\n non-aliased variables that can be renamed into SSA form.  We also\n-update the @code{VDEF}/@code{VUSE} memory tags for non-renamable\n+update the @code{VDEF}/@code{VUSE} memory tags for non-renameable\n aggregates so that we get fewer false kills.  The pass is located\n in @file{tree-ssa-alias.c} and is described by @code{pass_may_alias}.\n "}, {"sha": "d7063313df3483e67879c2369cc95fbc35608f00", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eaf20ec87c8f7403f91a465c892d381df42e468/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eaf20ec87c8f7403f91a465c892d381df42e468/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=1eaf20ec87c8f7403f91a465c892d381df42e468", "patch": "@@ -823,7 +823,7 @@ here; FIXME: document the others.\n @node Test Idioms\n @subsection Idioms Used in Testsuite Code\n \n-In general C testcases have a trailing @file{-@var{n}.c}, starting\n+In general, C testcases have a trailing @file{-@var{n}.c}, starting\n with @file{-1.c}, in case other testcases with similar names are added\n later.  If the test is a test of some well-defined feature, it should\n have a name referring to that feature such as"}, {"sha": "9fb793955bb20672cc69da9ddbd2d1b4fd9e596d", "filename": "gcc/doc/tree-ssa.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eaf20ec87c8f7403f91a465c892d381df42e468/gcc%2Fdoc%2Ftree-ssa.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eaf20ec87c8f7403f91a465c892d381df42e468/gcc%2Fdoc%2Ftree-ssa.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftree-ssa.texi?ref=1eaf20ec87c8f7403f91a465c892d381df42e468", "patch": "@@ -874,7 +874,7 @@ incorrect assumptions about them.\n Operands are updated as soon as the statement is finished via a call\n to @code{update_stmt}.  If statement elements are changed via\n @code{SET_USE} or @code{SET_DEF}, then no further action is required\n-(ie, those macros take care of updating the statement).  If changes\n+(i.e., those macros take care of updating the statement).  If changes\n are made by manipulating the statement's tree directly, then a call\n must be made to @code{update_stmt} when complete.  Calling one of the\n @code{bsi_insert} routines or @code{bsi_replace} performs an implicit\n@@ -1109,9 +1109,9 @@ each stmt after that is done:\n     @}\n @end smallexample\n \n-There are 2 iterators which can be used. @code{FOR_EACH_IMM_USE_FAST} is used \n-when the immediate uses are not changed, ie. you are looking at the uses, but \n-not setting them.  \n+There are 2 iterators which can be used. @code{FOR_EACH_IMM_USE_FAST} is\n+used when the immediate uses are not changed, i.e., you are looking at the\n+uses, but not setting them.  \n \n If they do get changed, then care must be taken that things are not changed \n under the iterators, so use the @code{FOR_EACH_IMM_USE_STMT} and "}]}