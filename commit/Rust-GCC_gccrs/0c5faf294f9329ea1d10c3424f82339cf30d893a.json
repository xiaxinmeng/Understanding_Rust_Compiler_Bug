{"sha": "0c5faf294f9329ea1d10c3424f82339cf30d893a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM1ZmFmMjk0ZjkzMjllYTFkMTBjMzQyNGY4MjMzOWNmMzBkODkzYQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-03-24T02:28:41Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-03-24T02:28:41Z"}, "message": "reg-stack.c (get_true_reg): Handle FLOAT_TRUNCATE like FLOAT_EXTEND if flag_unsafe_math_optimizations.\n\n\n\t* reg-stack.c (get_true_reg): Handle FLOAT_TRUNCATE like FLOAT_EXTEND\n\tif flag_unsafe_math_optimizations.\n\t* config/i386/i386.md (truncdfsf2): If flag_unsafe_math_optimizations\n\tand TARGET_80387 expand using truncdfsf2_noop pattern.\n\t(truncxfsf2): Likewise using truncxfsf2_noop.\n\t(truncxfdf2): Likewise using truncxfdf2_noop.\n\t(truncdfsf2_noop, truncxfsf2_noop, truncxfdf2_noop): New patterns.\n\nFrom-SVN: r79893", "tree": {"sha": "fdc5589420c8477ac11336433d27bf34a7c6705a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fdc5589420c8477ac11336433d27bf34a7c6705a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c5faf294f9329ea1d10c3424f82339cf30d893a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c5faf294f9329ea1d10c3424f82339cf30d893a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c5faf294f9329ea1d10c3424f82339cf30d893a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c5faf294f9329ea1d10c3424f82339cf30d893a/comments", "author": null, "committer": null, "parents": [{"sha": "cbfd7e06e59e1543e5c98074ae467f93ea4d6b55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbfd7e06e59e1543e5c98074ae467f93ea4d6b55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbfd7e06e59e1543e5c98074ae467f93ea4d6b55"}], "stats": {"total": 75, "additions": 70, "deletions": 5}, "files": [{"sha": "924c0fa7f0f5d9284ad708a3f9e6aeb8a1cb930b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c5faf294f9329ea1d10c3424f82339cf30d893a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c5faf294f9329ea1d10c3424f82339cf30d893a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0c5faf294f9329ea1d10c3424f82339cf30d893a", "patch": "@@ -1,3 +1,13 @@\n+2004-03-23  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* reg-stack.c (get_true_reg): Handle FLOAT_TRUNCATE like FLOAT_EXTEND\n+\tif flag_unsafe_math_optimizations.\n+\t* config/i386/i386.md (truncdfsf2): If flag_unsafe_math_optimizations\n+\tand TARGET_80387 expand using truncdfsf2_noop pattern.\n+\t(truncxfsf2): Likewise using truncxfsf2_noop.\n+\t(truncxfdf2): Likewise using truncxfdf2_noop.\n+\t(truncdfsf2_noop, truncxfsf2_noop, truncxfdf2_noop): New patterns.\n+\n 2004-03-23  Ziemowit Laski  <zlaski@apple.com>\n \n \t* hooks.c (hook_constcharptr_tree_null): New hook."}, {"sha": "4906d35b7d0216b6467c3b9e5d1a87003f21f7c1", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 53, "deletions": 5, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c5faf294f9329ea1d10c3424f82339cf30d893a/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c5faf294f9329ea1d10c3424f82339cf30d893a/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=0c5faf294f9329ea1d10c3424f82339cf30d893a", "patch": "@@ -3653,15 +3653,29 @@\n \t      (clobber (match_dup 2))])]\n   \"TARGET_80387 || TARGET_SSE2\"\n   \"\n-   if (TARGET_80387)\n-     operands[2] = assign_386_stack_local (SFmode, 0);\n-   else\n+   if (!TARGET_80387)\n      {\n \temit_insn (gen_truncdfsf2_sse_only (operands[0], operands[1]));\n \tDONE;\n      }\n+   else if (flag_unsafe_math_optimizations)\n+     {\n+\trtx reg = REG_P (operands[0]) ? operands[0] : gen_reg_rtx (SFmode);\n+\temit_insn (gen_truncdfsf2_noop (reg, operands[1]));\n+\tif (reg != operands[0])\n+\t  emit_move_insn (operands[0], reg);\n+\tDONE;\n+     }\n+   else\n+     operands[2] = assign_386_stack_local (SFmode, 0);\n \")\n \n+(define_insn \"truncdfsf2_noop\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t(float_truncate:SF (match_operand:DF 1 \"register_operand\" \"f\")))]\n+  \"TARGET_80387 && flag_unsafe_math_optimizations\"\n+  \"#\")\n+\n (define_insn \"*truncdfsf2_1\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=m,?f#rx,?r#fx,?x#rf\")\n \t(float_truncate:SF\n@@ -3886,7 +3900,24 @@\n \t\t    (match_operand:XF 1 \"register_operand\" \"\")))\n \t      (clobber (match_dup 2))])]\n   \"TARGET_80387\"\n-  \"operands[2] = assign_386_stack_local (SFmode, 0);\")\n+  \"\n+  if (flag_unsafe_math_optimizations)\n+    {\n+      rtx reg = REG_P (operands[0]) ? operands[0] : gen_reg_rtx (SFmode);\n+      emit_insn (gen_truncxfsf2_noop (reg, operands[1]));\n+      if (reg != operands[0])\n+\temit_move_insn (operands[0], reg);\n+      DONE;\n+    }\n+  else\n+    operands[2] = assign_386_stack_local (SFmode, 0);\n+  \")\n+\n+(define_insn \"truncxfsf2_noop\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t(float_truncate:SF (match_operand:XF 1 \"register_operand\" \"f\")))]\n+  \"TARGET_80387 && flag_unsafe_math_optimizations\"\n+  \"#\")\n \n (define_insn \"*truncxfsf2_1\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=m,?f#rx,?r#fx,?x#rf\")\n@@ -3948,7 +3979,24 @@\n \t\t    (match_operand:XF 1 \"register_operand\" \"\")))\n \t      (clobber (match_dup 2))])]\n   \"TARGET_80387\"\n-  \"operands[2] = assign_386_stack_local (DFmode, 0);\")\n+  \"\n+  if (flag_unsafe_math_optimizations)\n+    {\n+      rtx reg = REG_P (operands[0]) ? operands[0] : gen_reg_rtx (DFmode);\n+      emit_insn (gen_truncxfdf2_noop (reg, operands[1]));\n+      if (reg != operands[0])\n+\temit_move_insn (operands[0], reg);\n+      DONE;\n+    }\n+  else\n+    operands[2] = assign_386_stack_local (DFmode, 0);\n+  \")\n+\n+(define_insn \"truncxfdf2_noop\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(float_truncate:DF (match_operand:XF 1 \"register_operand\" \"f\")))]\n+  \"TARGET_80387 && flag_unsafe_math_optimizations\"\n+  \"#\")\n \n (define_insn \"*truncxfdf2_1\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=m,?f#rY,?r#fY,?Y#rf\")"}, {"sha": "31ebddb46401a7370b102ee56b5b9678e1d2690a", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c5faf294f9329ea1d10c3424f82339cf30d893a/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c5faf294f9329ea1d10c3424f82339cf30d893a/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=0c5faf294f9329ea1d10c3424f82339cf30d893a", "patch": "@@ -574,6 +574,13 @@ get_true_reg (rtx *pat)\n       case FIX:\n       case FLOAT_EXTEND:\n \tpat = & XEXP (*pat, 0);\n+\tbreak;\n+\n+      case FLOAT_TRUNCATE:\n+\tif (!flag_unsafe_math_optimizations)\n+\t  return pat;\n+\tpat = & XEXP (*pat, 0);\n+\tbreak;\n       }\n }\n \f"}]}