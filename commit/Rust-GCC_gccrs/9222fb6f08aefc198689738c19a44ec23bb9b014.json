{"sha": "9222fb6f08aefc198689738c19a44ec23bb9b014", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTIyMmZiNmYwOGFlZmMxOTg2ODk3MzhjMTlhNDRlYzIzYmI5YjAxNA==", "commit": {"author": {"name": "Tim Shen", "email": "timshen91@gmail.com", "date": "2013-08-29T18:33:07Z"}, "committer": {"name": "Tim Shen", "email": "timshen@gcc.gnu.org", "date": "2013-08-29T18:33:07Z"}, "message": "regex.h (basic_regex<>::assign): Don't lose _M_traits.\n\n2013-08-29  Tim Shen  <timshen91@gmail.com>\n\n\t* include/bits/regex.h (basic_regex<>::assign): Don't lose _M_traits.\n\t  (regex_iterator<>::regex_iterator): Return nullptr when regex_search\n\t     failed.\n\t  (regex_token_iterator<>::_M_end_of_seq): Should be defined true when\n\t    _M_result is(not isn't) nullptr.\n\t* include/bits/regex_compiler.h: Store _Compiler::_M_traits by reference\n\t  instead of by value.\n\t* include/bits/regex_executor.h (_DFSExecutor<>::_DFSExecutor): Add\n\t  _M_traits to _DFSExecutor.\n\t* include/bits/regex_executor.tcc (__get_executor<>): Pass traits to\n\t  _DFSExecutor too.\n\t* testsuite/28_regex/algorithms/regex_match/extended/wstring_locale.cc:\n\t  New.\n\t* testsuite/28_regex/iterators/regex_token_iterator/wchar_t/\n\t  wstring_02.cc: New.\n\nFrom-SVN: r202082", "tree": {"sha": "47953718d312ebb6f609c71919a39de4a22c5f23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47953718d312ebb6f609c71919a39de4a22c5f23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9222fb6f08aefc198689738c19a44ec23bb9b014", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9222fb6f08aefc198689738c19a44ec23bb9b014", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9222fb6f08aefc198689738c19a44ec23bb9b014", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9222fb6f08aefc198689738c19a44ec23bb9b014/comments", "author": {"login": "timshen91", "id": 1157432, "node_id": "MDQ6VXNlcjExNTc0MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/1157432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timshen91", "html_url": "https://github.com/timshen91", "followers_url": "https://api.github.com/users/timshen91/followers", "following_url": "https://api.github.com/users/timshen91/following{/other_user}", "gists_url": "https://api.github.com/users/timshen91/gists{/gist_id}", "starred_url": "https://api.github.com/users/timshen91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timshen91/subscriptions", "organizations_url": "https://api.github.com/users/timshen91/orgs", "repos_url": "https://api.github.com/users/timshen91/repos", "events_url": "https://api.github.com/users/timshen91/events{/privacy}", "received_events_url": "https://api.github.com/users/timshen91/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3fa3690d3d5196cdd3ea59a51aa519451fbed1e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fa3690d3d5196cdd3ea59a51aa519451fbed1e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fa3690d3d5196cdd3ea59a51aa519451fbed1e2"}], "stats": {"total": 160, "additions": 143, "deletions": 17}, "files": [{"sha": "90f68ae86bea99ac2cd54475846f1c580ab6a77e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9222fb6f08aefc198689738c19a44ec23bb9b014/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9222fb6f08aefc198689738c19a44ec23bb9b014/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9222fb6f08aefc198689738c19a44ec23bb9b014", "patch": "@@ -1,3 +1,21 @@\n+2013-08-29  Tim Shen  <timshen91@gmail.com>\n+\n+\t* include/bits/regex.h (basic_regex<>::assign): Don't lose _M_traits.\n+\t  (regex_iterator<>::regex_iterator): Return nullptr when regex_search\n+\t     failed.\n+\t  (regex_token_iterator<>::_M_end_of_seq): Should be defined true when\n+\t    _M_result is(not isn't) nullptr.\n+\t* include/bits/regex_compiler.h: Store _Compiler::_M_traits by reference\n+\t  instead of by value.\n+\t* include/bits/regex_executor.h (_DFSExecutor<>::_DFSExecutor): Add\n+\t  _M_traits to _DFSExecutor.\n+\t* include/bits/regex_executor.tcc (__get_executor<>): Pass traits to\n+\t  _DFSExecutor too.\n+\t* testsuite/28_regex/algorithms/regex_match/extended/wstring_locale.cc:\n+\t  New.\n+\t* testsuite/28_regex/iterators/regex_token_iterator/wchar_t/\n+\t  wstring_02.cc: New.\n+\n 2013-08-26  Tim Shen  <timshen91@gmail.com>\n \n \t* include/Makefile.am: Add regex_scanner.{h,tcc}."}, {"sha": "412465adfa29da28b93b6a3e8495b93205b65f0a", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9222fb6f08aefc198689738c19a44ec23bb9b014/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9222fb6f08aefc198689738c19a44ec23bb9b014/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=9222fb6f08aefc198689738c19a44ec23bb9b014", "patch": "@@ -880,8 +880,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tassign(const basic_string<_Ch_type, _Ch_typeraits, _Alloc>& __s,\n \t       flag_type __flags = ECMAScript)\n \t{\n-\t  basic_regex __tmp(__s, __flags);\n-\t  this->swap(__tmp);\n+\t  _M_flags = __flags;\n+\t  _M_automaton =\n+\t    __detail::_Compiler<decltype(__s.begin()), _Ch_type, _Rx_traits>\n+\t    (__s.begin(), __s.end(), _M_traits, _M_flags)._M_get_nfa();\n \t  return *this;\n \t}\n \n@@ -2591,7 +2593,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t     regex_constants::match_flag_type __m\n \t\t     = regex_constants::match_default)\n       : _M_begin(__a), _M_end(__b), _M_pregex(&__re), _M_flags(__m), _M_match()\n-      { regex_search(_M_begin, _M_end, _M_match, *_M_pregex, _M_flags); }\n+      {\n+\tif (!regex_search(_M_begin, _M_end, _M_match, *_M_pregex, _M_flags))\n+\t  *this = regex_iterator();\n+      }\n \n       /**\n        * Copy constructs a %regex_iterator.\n@@ -2905,9 +2910,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  return (*_M_position)[_M_subs[_M_n]];\n       }\n \n-      bool\n-      _M_end_of_seq() const\n-      { return _M_result != nullptr; }\n+      constexpr bool\n+      _M_end_of_seq()\n+      { return _M_result == nullptr; }\n \n       _Position _M_position;\n       const value_type* _M_result;"}, {"sha": "a1107bb7eeb632756c06ccfbb42671a4fa0d9aaa", "filename": "libstdc++-v3/include/bits/regex_compiler.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9222fb6f08aefc198689738c19a44ec23bb9b014/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9222fb6f08aefc198689738c19a44ec23bb9b014/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h?ref=9222fb6f08aefc198689738c19a44ec23bb9b014", "patch": "@@ -214,7 +214,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn _M_traits.transform(__s.begin(), __s.end());\n       }\n \n-      _TraitsT                              _M_traits;\n+      const _TraitsT&                       _M_traits;\n       _FlagT                                _M_flags;\n       bool                                  _M_is_non_matching;\n       std::vector<_CharT>                   _M_char_set;"}, {"sha": "6d66d88158466d2f4603e2b1c59add1e0fa05467", "filename": "libstdc++-v3/include/bits/regex_executor.h", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9222fb6f08aefc198689738c19a44ec23bb9b014/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9222fb6f08aefc198689738c19a44ec23bb9b014/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h?ref=9222fb6f08aefc198689738c19a44ec23bb9b014", "patch": "@@ -120,13 +120,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef typename _BaseT::_ResultsVec                 _ResultsVec;\n       typedef regex_constants::match_flag_type             _FlagT;\n \n-      _DFSExecutor(_BiIter        __begin,\n-\t\t   _BiIter        __end,\n-\t\t   _ResultsT&     __results,\n-\t\t   const _RegexT& __nfa,\n-\t\t   _FlagT         __flags)\n+      _DFSExecutor(_BiIter         __begin,\n+\t\t   _BiIter         __end,\n+\t\t   _ResultsT&      __results,\n+\t\t   const _RegexT&  __nfa,\n+\t\t   const _TraitsT& __traits,\n+\t\t   _FlagT          __flags)\n       : _BaseT(__begin, __end, __results, __flags, __nfa._M_sub_count()),\n-\t_M_traits(_TraitsT()), _M_nfa(__nfa), _M_results_ret(this->_M_results)\n+\t_M_traits(__traits), _M_nfa(__nfa), _M_results_ret(this->_M_results)\n       { }\n \n       void\n@@ -142,9 +143,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tbool\n \t_M_dfs(_StateIdT __i);\n \n-      _ResultsVec    _M_results_ret;\n-      _TraitsT       _M_traits;\n-      const _RegexT& _M_nfa;\n+      _ResultsVec     _M_results_ret;\n+      const _TraitsT& _M_traits;\n+      const _RegexT&  _M_nfa;\n     };\n \n   // Like the DFS approach, it try every possible state transition; Unlike DFS,"}, {"sha": "788d65e54de2039aaa508b06391532626c03d298", "filename": "libstdc++-v3/include/bits/regex_executor.tcc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9222fb6f08aefc198689738c19a44ec23bb9b014/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9222fb6f08aefc198689738c19a44ec23bb9b014/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc?ref=9222fb6f08aefc198689738c19a44ec23bb9b014", "patch": "@@ -320,7 +320,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       auto __p = std::static_pointer_cast<_NFA<_CharT, _TraitsT>>\n \t(__re._M_automaton);\n       if (__p->_M_has_backref)\n-\treturn _ExecutorPtr(new _DFSExecutorT(__b, __e, __m, *__p, __flags));\n+\treturn _ExecutorPtr(new _DFSExecutorT(__b, __e, __m, *__p,\n+\t\t\t\t\t      __re._M_traits, __flags));\n       return _ExecutorPtr(new _BFSExecutorT(__b, __e, __m, *__p, __flags));\n     }\n "}, {"sha": "6ab48ca6bafe1294bbe4f8188e3525737247137e", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/extended/wstring_locale.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9222fb6f08aefc198689738c19a44ec23bb9b014/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fwstring_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9222fb6f08aefc198689738c19a44ec23bb9b014/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fwstring_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fwstring_locale.cc?ref=9222fb6f08aefc198689738c19a44ec23bb9b014", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-require-namedlocale \"de_DE.UTF-8\" }\n+\n+//\n+// 2013-08-29  Tim Shen <timshen91@gmail.com>\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 28.11.2 regex_match\n+// Tests Extended localization against a wide-string.\n+\n+#include <regex>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::wstring str2 = L\"\u00dcBER\";\n+  std::wregex re2;\n+  re2.imbue(std::locale(\"de_DE.UTF-8\"));\n+  re2.assign(L\"[[:upper:]]*\", std::regex::extended);\n+  std::wsmatch m2;\n+  VERIFY(std::regex_match(str2, m2, re2));\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "0306ee197b9ed41debf70c4629cbf3cf99bc01e4", "filename": "libstdc++-v3/testsuite/28_regex/iterators/regex_token_iterator/wchar_t/wstring_02.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9222fb6f08aefc198689738c19a44ec23bb9b014/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_token_iterator%2Fwchar_t%2Fwstring_02.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9222fb6f08aefc198689738c19a44ec23bb9b014/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_token_iterator%2Fwchar_t%2Fwstring_02.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_token_iterator%2Fwchar_t%2Fwstring_02.cc?ref=9222fb6f08aefc198689738c19a44ec23bb9b014", "patch": "@@ -0,0 +1,53 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-require-namedlocale \"en_US.UTF-8\" }\n+\n+//\n+// 2013-08-29  Tim Shen <timshen91@gmail.com>\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 28.12.2 regex_token_iterator\n+// Tests regex_token_iterator class over a localized wstring.\n+\n+#include <regex>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::setlocale(LC_ALL, \"en_US.UTF-8\");\n+\n+  std::wstring str2 = L\"\u00f6\u00e4\u00fc\";\n+  std::wregex re2;\n+  re2.assign(L\"([[:lower:]]+)\");\n+  std::wsmatch m2;\n+\n+  std::wsregex_token_iterator end {};\n+  std::wsregex_token_iterator p{str2.begin(), str2.end(), re2, {1}};\n+\n+  VERIFY(p == end);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}]}