{"sha": "8572922996bd2db0400ccbf5043b1fdbff2fd936", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU3MjkyMjk5NmJkMmRiMDQwMGNjYmY1MDQzYjFmZGJmZjJmZDkzNg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-10-21T09:16:29Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-10-21T09:16:29Z"}, "message": "sparc-modes.def (CCV): New.\n\n\t* config/sparc/sparc-modes.def (CCV): New.\n\t(CCXV): Likewise.\n\t* config/sparc/predicates.md (v_comparison_operator): New.\n\t(icc_comparison_operator): Add support for CCV/CCXV.\n\t(xcc_comparison_operator): Likewise.\n\t* config/sparc/sparc.c (output_cbranch): Likewise.\n\t(sparc_print_operand): Likewise.\n\t* config/sparc/sparc.md (UNSPEC_{ADD,SUB,NEG}V): New constants.\n\t(uaddvdi4): New expander.\n\t(addvdi4): Likewise.\n\t(uaddvdi4_sp32): New instruction.\n\t(addvdi4_sp32): Likewise.\n\t(uaddvsi4): New expander.\n\t(addvsi4): Likewise.\n\t(cmp_ccc_plus_sltu_set): New instruction.\n\t(cmp_ccv_plus): Likewise.\n\t(cmp_ccxv_plus): Likewise.\n\t(cmp_ccv_plus_set): Likewise.\n\t(cmp_ccxv_plus_set): Likewise.\n\t(cmp_ccv_plus_sltu_set): Likewise.\n\t(uaddvdi4): New expander.\n\t(subvdi4): Likewise.\n\t(usubdi4_sp32): New instruction.\n\t(subvdi4_sp32): Likewise.\n\t(usubvsi4): New expander.\n\t(subvsi4): Likewise.\n\t(cmpsi_minus_sltu_set): New instruction.\n\t(cmp_ccv_minus): Likewise.\n\t(cmp_ccxv_minus): Likewise.\n\t(cmp_ccv_minus_set): Likewise.\n\t(cmp_ccxv_minus_set): Likewise.\n\t(cmp_ccv_minus_sltu_set): Likewise.\n\t(unegvdi3): New expander.\n\t(negvdi3): Likewise.\n\t(unegdi3_sp32): New instruction.\n\t(negvdi3_sp32): Likewise.\n\t(unegvsi3): New expander.\n\t(negvsi3): Likewise.\n\t(cmp_ccc_neg_sltu_set): New instruction.\n\t(cmp_ccv_neg): Likewise.\n\t(cmp_ccxv_neg): Likewise.\n\t(cmp_ccv_neg_set): Likewise.\n\t(cmp_ccxv_neg_set): Likewise.\n\t(cmp_ccv_neg_sltu_set): Likewise.\n\nFrom-SVN: r241397", "tree": {"sha": "1c3213226bdaf9d03e4c453e15e1c9b5701c2a83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c3213226bdaf9d03e4c453e15e1c9b5701c2a83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8572922996bd2db0400ccbf5043b1fdbff2fd936", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8572922996bd2db0400ccbf5043b1fdbff2fd936", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8572922996bd2db0400ccbf5043b1fdbff2fd936", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8572922996bd2db0400ccbf5043b1fdbff2fd936/comments", "author": null, "committer": null, "parents": [{"sha": "d17f2c3b496cce8c1eea2dab929c28e5899f9cc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d17f2c3b496cce8c1eea2dab929c28e5899f9cc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d17f2c3b496cce8c1eea2dab929c28e5899f9cc4"}], "stats": {"total": 885, "additions": 879, "deletions": 6}, "files": [{"sha": "c74ba1729b8d453c3b92d39da7a574590939e054", "filename": "gcc/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8572922996bd2db0400ccbf5043b1fdbff2fd936/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8572922996bd2db0400ccbf5043b1fdbff2fd936/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8572922996bd2db0400ccbf5043b1fdbff2fd936", "patch": "@@ -1,3 +1,50 @@\n+2016-10-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/sparc/sparc-modes.def (CCV): New.\n+\t(CCXV): Likewise.\n+\t* config/sparc/predicates.md (v_comparison_operator): New.\n+\t(icc_comparison_operator): Add support for CCV/CCXV.\n+\t(xcc_comparison_operator): Likewise.\n+\t* config/sparc/sparc.c (output_cbranch): Likewise.\n+\t(sparc_print_operand): Likewise.\n+\t* config/sparc/sparc.md (UNSPEC_{ADD,SUB,NEG}V): New constants.\n+\t(uaddvdi4): New expander.\n+\t(addvdi4): Likewise.\n+\t(uaddvdi4_sp32): New instruction.\n+\t(addvdi4_sp32): Likewise.\n+\t(uaddvsi4): New expander.\n+\t(addvsi4): Likewise.\n+\t(cmp_ccc_plus_sltu_set): New instruction.\n+\t(cmp_ccv_plus): Likewise.\n+\t(cmp_ccxv_plus): Likewise.\n+\t(cmp_ccv_plus_set): Likewise.\n+\t(cmp_ccxv_plus_set): Likewise.\n+\t(cmp_ccv_plus_sltu_set): Likewise.\n+\t(uaddvdi4): New expander.\n+\t(subvdi4): Likewise.\n+\t(usubdi4_sp32): New instruction.\n+\t(subvdi4_sp32): Likewise.\n+\t(usubvsi4): New expander.\n+\t(subvsi4): Likewise.\n+\t(cmpsi_minus_sltu_set): New instruction.\n+\t(cmp_ccv_minus): Likewise.\n+\t(cmp_ccxv_minus): Likewise.\n+\t(cmp_ccv_minus_set): Likewise.\n+\t(cmp_ccxv_minus_set): Likewise.\n+\t(cmp_ccv_minus_sltu_set): Likewise.\n+\t(unegvdi3): New expander.\n+\t(negvdi3): Likewise.\n+\t(unegdi3_sp32): New instruction.\n+\t(negvdi3_sp32): Likewise.\n+\t(unegvsi3): New expander.\n+\t(negvsi3): Likewise.\n+\t(cmp_ccc_neg_sltu_set): New instruction.\n+\t(cmp_ccv_neg): Likewise.\n+\t(cmp_ccxv_neg): Likewise.\n+\t(cmp_ccv_neg_set): Likewise.\n+\t(cmp_ccxv_neg_set): Likewise.\n+\t(cmp_ccv_neg_sltu_set): Likewise.\n+\n 2016-10-21  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR rtl-optimization/78038"}, {"sha": "05ed68a1465971a72f8885e84b9b3429e11365ac", "filename": "gcc/config/sparc/predicates.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8572922996bd2db0400ccbf5043b1fdbff2fd936/gcc%2Fconfig%2Fsparc%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8572922996bd2db0400ccbf5043b1fdbff2fd936/gcc%2Fconfig%2Fsparc%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fpredicates.md?ref=8572922996bd2db0400ccbf5043b1fdbff2fd936", "patch": "@@ -420,6 +420,10 @@\n (define_predicate \"c_comparison_operator\"\n   (match_code \"ltu,geu\"))\n \n+;; Return true if OP is a valid comparison operator for CCVmode.\n+(define_predicate \"v_comparison_operator\"\n+  (match_code \"eq,ne\"))\n+\n ;; Return true if OP is an integer comparison operator.  This allows\n ;; the use of MATCH_OPERATOR to recognize all the branch insns.\n (define_predicate \"icc_comparison_operator\"\n@@ -436,6 +440,9 @@\n     case CCCmode:\n     case CCXCmode:\n       return c_comparison_operator (op, mode);\n+    case CCVmode:\n+    case CCXVmode:\n+      return v_comparison_operator (op, mode);\n     default:\n       return false;\n     }"}, {"sha": "6c3eadfb69c811f9722e17f6e7914bc048b65736", "filename": "gcc/config/sparc/sparc-modes.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8572922996bd2db0400ccbf5043b1fdbff2fd936/gcc%2Fconfig%2Fsparc%2Fsparc-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8572922996bd2db0400ccbf5043b1fdbff2fd936/gcc%2Fconfig%2Fsparc%2Fsparc-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-modes.def?ref=8572922996bd2db0400ccbf5043b1fdbff2fd936", "patch": "@@ -34,6 +34,10 @@ FLOAT_MODE (TF, 16, ieee_quad_format);\n    they explicitly set the C flag (unsigned overflow).  Only the unsigned\n    <,>= operators can be used in conjunction with it.\n \n+   We also have a CCVmode which is used by the arithmetic instructions when\n+   they explicitly set the V flag (signed overflow).  Only the =,!= operators\n+   can be used in conjunction with it.\n+\n    We also have two modes to indicate that the relevant condition code is\n    in the floating-point condition code register.  One for comparisons which\n    will generate an exception if the result is unordered (CCFPEmode) and\n@@ -46,6 +50,8 @@ CC_MODE (CCNZ);\n CC_MODE (CCXNZ);\n CC_MODE (CCC);\n CC_MODE (CCXC);\n+CC_MODE (CCV);\n+CC_MODE (CCXV);\n CC_MODE (CCFP);\n CC_MODE (CCFPE);\n "}, {"sha": "9fda4387ea367fc63b4f6b8220da4bf727fa636a", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8572922996bd2db0400ccbf5043b1fdbff2fd936/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8572922996bd2db0400ccbf5043b1fdbff2fd936/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=8572922996bd2db0400ccbf5043b1fdbff2fd936", "patch": "@@ -2784,8 +2784,9 @@ select_cc_mode (enum rtx_code op, rtx x, rtx y)\n \t  gcc_unreachable ();\n \t}\n     }\n-  else if (GET_CODE (x) == PLUS || GET_CODE (x) == MINUS\n-\t   || GET_CODE (x) == NEG || GET_CODE (x) == ASHIFT)\n+  else if ((GET_CODE (x) == PLUS || GET_CODE (x) == MINUS\n+\t    || GET_CODE (x) == NEG || GET_CODE (x) == ASHIFT)\n+\t   && y == const0_rtx)\n     {\n       if (TARGET_ARCH64 && GET_MODE (x) == DImode)\n \treturn CCXNZmode;\n@@ -2803,6 +2804,18 @@ select_cc_mode (enum rtx_code op, rtx x, rtx y)\n \t    return CCCmode;\n \t}\n \n+      /* This is for the [u]addvdi4_sp32 and [u]subvdi4_sp32 patterns.  */\n+      if (!TARGET_ARCH64 && GET_MODE (x) == DImode)\n+\t{\n+\t  if (GET_CODE (y) == UNSPEC\n+\t      && (XINT (y, 1) == UNSPEC_ADDV\n+\t\t || XINT (y, 1) == UNSPEC_SUBV\n+\t         || XINT (y, 1) == UNSPEC_NEGV))\n+\t    return CCVmode;\n+\t  else\n+\t    return CCCmode;\n+\t}\n+\n       if (TARGET_ARCH64 && GET_MODE (x) == DImode)\n \treturn CCXmode;\n       else\n@@ -7724,10 +7737,16 @@ output_cbranch (rtx op, rtx dest, int label, int reversed, int annul,\n       switch (code)\n \t{\n \tcase NE:\n-\t  branch = \"bne\";\n+\t  if (mode == CCVmode || mode == CCXVmode)\n+\t    branch = \"bvs\";\n+\t  else\n+\t    branch = \"bne\";\n \t  break;\n \tcase EQ:\n-\t  branch = \"be\";\n+\t  if (mode == CCVmode || mode == CCXVmode)\n+\t    branch = \"bvc\";\n+\t  else\n+\t    branch = \"be\";\n \t  break;\n \tcase GE:\n \t  if (mode == CCNZmode || mode == CCXNZmode)\n@@ -7794,13 +7813,15 @@ output_cbranch (rtx op, rtx dest, int label, int reversed, int annul,\n \tcase CCmode:\n \tcase CCNZmode:\n \tcase CCCmode:\n+\tcase CCVmode:\n \t  labelno = \"%%icc, \";\n \t  if (v8)\n \t    labelno = \"\";\n \t  break;\n \tcase CCXmode:\n \tcase CCXNZmode:\n \tcase CCXCmode:\n+\tcase CCXVmode:\n \t  labelno = \"%%xcc, \";\n \t  gcc_assert (!v8);\n \t  break;\n@@ -8804,11 +8825,13 @@ sparc_print_operand (FILE *file, rtx x, int code)\n \t    case CCmode:\n \t    case CCNZmode:\n \t    case CCCmode:\n+\t    case CCVmode:\n \t      s = \"%icc\";\n \t      break;\n \t    case CCXmode:\n \t    case CCXNZmode:\n \t    case CCXCmode:\n+\t    case CCXVmode:\n \t      s = \"%xcc\";\n \t      break;\n \t    default:\n@@ -8883,10 +8906,16 @@ sparc_print_operand (FILE *file, rtx x, int code)\n \tswitch (GET_CODE (x))\n \t  {\n \t  case NE:\n-\t    s = \"ne\";\n+\t    if (mode == CCVmode || mode == CCXVmode)\n+\t      s = \"vs\";\n+\t    else\n+\t      s = \"ne\";\n \t    break;\n \t  case EQ:\n-\t    s = \"e\";\n+\t    if (mode == CCVmode || mode == CCXVmode)\n+\t      s = \"vc\";\n+\t    else\n+\t      s = \"e\";\n \t    break;\n \t  case GE:\n \t    if (mode == CCNZmode || mode == CCXNZmode)"}, {"sha": "9e665130e1a52e74c2a670056c83976b1f6d1d05", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 645, "deletions": 0, "changes": 645, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8572922996bd2db0400ccbf5043b1fdbff2fd936/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8572922996bd2db0400ccbf5043b1fdbff2fd936/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=8572922996bd2db0400ccbf5043b1fdbff2fd936", "patch": "@@ -92,6 +92,10 @@\n   UNSPEC_MUL8\n   UNSPEC_MUL8SU\n   UNSPEC_MULDSU\n+\n+  UNSPEC_ADDV\n+  UNSPEC_SUBV\n+  UNSPEC_NEGV\n ])\n \n (define_c_enum \"unspecv\" [\n@@ -3714,6 +3718,51 @@\n     }\n })\n \n+(define_expand \"uaddvdi4\"\n+  [(parallel [(set (reg:CCXC CC_REG)\n+\t\t   (compare:CCXC (plus:DI (match_operand:DI 1 \"register_operand\")\n+\t\t\t\t\t  (match_operand:DI 2 \"arith_add_operand\"))\n+\t\t\t         (match_dup 1)))\n+\t      (set (match_operand:DI 0 \"register_operand\")\n+\t\t   (plus:DI (match_dup 1) (match_dup 2)))])\n+   (set (pc) (if_then_else (ltu (reg:CCXC CC_REG) (const_int 0))\n+\t\t\t   (label_ref (match_operand 3))\n+\t\t\t   (pc)))]\n+ \"\"\n+{\n+  if (!TARGET_64BIT)\n+    {\n+      emit_insn (gen_uaddvdi4_sp32 (operands[0], operands[1], operands[2]));\n+      rtx x = gen_rtx_LTU (VOIDmode, gen_rtx_REG (CCCmode, SPARC_ICC_REG),\n+\t\t\t\t     const0_rtx);\n+      emit_jump_insn (gen_cbranchcc4 (x, XEXP (x, 0), XEXP (x, 1), operands[3]));\n+      DONE;\n+    }\n+})\n+\n+(define_expand \"addvdi4\"\n+  [(parallel [(set (reg:CCXV CC_REG)\n+\t\t   (compare:CCXV (plus:DI (match_operand:DI 1 \"register_operand\")\n+\t\t\t\t\t  (match_operand:DI 2 \"arith_add_operand\"))\n+\t\t\t         (unspec:DI [(match_dup 1) (match_dup 2)]\n+\t\t\t\t\t    UNSPEC_ADDV)))\n+\t      (set (match_operand:DI 0 \"register_operand\")\n+\t\t   (plus:DI (match_dup 1) (match_dup 2)))])\n+   (set (pc) (if_then_else (ne (reg:CCXV CC_REG) (const_int 0))\n+\t\t\t   (label_ref (match_operand 3))\n+\t\t\t   (pc)))]\n+ \"\"\n+{\n+  if (!TARGET_64BIT)\n+    {\n+      emit_insn (gen_addvdi4_sp32 (operands[0], operands[1], operands[2]));\n+      rtx x = gen_rtx_NE (VOIDmode, gen_rtx_REG (CCVmode, SPARC_ICC_REG),\n+\t\t\t\t    const0_rtx);\n+      emit_jump_insn (gen_cbranchcc4 (x, XEXP (x, 0), XEXP (x, 1), operands[3]));\n+      DONE;\n+    }\n+})\n+\n (define_insn_and_split \"adddi3_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=&r\")\n \t(plus:DI (match_operand:DI 1 \"register_operand\" \"%r\")\n@@ -3740,6 +3789,80 @@\n }\n   [(set_attr \"length\" \"2\")])\n \n+(define_insn_and_split \"uaddvdi4_sp32\"\n+  [(set (reg:CCC CC_REG)\n+\t(compare:CCC (plus:DI (match_operand:DI 1 \"register_operand\" \"%r\")\n+\t\t\t      (match_operand:DI 2 \"arith_double_operand\" \"rHI\"))\n+\t\t     (match_dup 1)))\n+   (set (match_operand:DI 0 \"register_operand\" \"=&r\")\n+\t(plus:DI (match_dup 1) (match_dup 2)))]\n+  \"!TARGET_ARCH64\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(parallel [(set (reg:CCC CC_REG)\n+\t\t   (compare:CCC (plus:SI (match_dup 4) (match_dup 5))\n+\t\t\t\t(match_dup 4)))\n+\t      (set (match_dup 3)\n+\t\t   (plus:SI (match_dup 4) (match_dup 5)))])\n+   (parallel [(set (reg:CCC CC_REG)\n+\t\t   (compare:CCC (zero_extend:DI\n+\t\t\t\t  (plus:SI (plus:SI (match_dup 7) (match_dup 8))\n+\t\t\t\t\t   (ltu:SI (reg:CCC CC_REG)\n+\t\t\t\t\t\t   (const_int 0))))\n+\t\t\t\t(plus:DI (plus:DI (zero_extend:DI (match_dup 7))\n+\t\t\t\t\t\t  (zero_extend:DI (match_dup 8)))\n+\t\t\t\t\t (ltu:DI (reg:CCC CC_REG)\n+\t\t\t\t\t\t (const_int 0)))))\n+\t      (set (match_dup 6)\n+\t\t   (plus:SI (plus:SI (match_dup 7) (match_dup 8))\n+\t\t\t    (ltu:SI (reg:CCC CC_REG)\n+\t\t\t\t    (const_int 0))))])]\n+{\n+  operands[3] = gen_lowpart (SImode, operands[0]);\n+  operands[4] = gen_lowpart (SImode, operands[1]);\n+  operands[5] = gen_lowpart (SImode, operands[2]);\n+  operands[6] = gen_highpart (SImode, operands[0]);\n+  operands[7] = gen_highpart_mode (SImode, DImode, operands[1]);\n+  operands[8] = gen_highpart_mode (SImode, DImode, operands[2]);\n+}\n+  [(set_attr \"length\" \"2\")])\n+\n+(define_insn_and_split \"addvdi4_sp32\"\n+  [(set (reg:CCV CC_REG)\n+\t(compare:CCV (plus:DI (match_operand:DI 1 \"register_operand\" \"%r\")\n+\t\t\t      (match_operand:DI 2 \"arith_double_operand\" \"rHI\"))\n+\t\t     (unspec:DI [(match_dup 1) (match_dup 2)] UNSPEC_ADDV)))\n+   (set (match_operand:DI 0 \"register_operand\" \"=&r\")\n+\t(plus:DI (match_dup 1) (match_dup 2)))]\n+  \"!TARGET_ARCH64\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(parallel [(set (reg:CCC CC_REG)\n+\t\t   (compare:CCC (plus:SI (match_dup 4) (match_dup 5))\n+\t\t\t\t(match_dup 4)))\n+\t      (set (match_dup 3)\n+\t\t   (plus:SI (match_dup 4) (match_dup 5)))])\n+   (parallel [(set (reg:CCV CC_REG)\n+\t\t   (compare:CCV (plus:SI (plus:SI (match_dup 7) (match_dup 8))\n+\t\t\t\t\t (ltu:SI (reg:CCC CC_REG)\n+\t\t\t\t\t\t (const_int 0)))\n+\t\t\t\t(unspec:SI [(plus:SI (match_dup 7) (match_dup 8))\n+\t\t\t\t\t    (ltu:SI (reg:CCC CC_REG)\n+\t\t\t\t\t\t     (const_int 0))]\n+\t\t\t\t\t   UNSPEC_ADDV)))\n+\t      (set (match_dup 6)\n+\t\t   (plus:SI (plus:SI (match_dup 7) (match_dup 8))\n+\t\t\t    (ltu:SI (reg:CCC CC_REG) (const_int 0))))])]\n+{\n+  operands[3] = gen_lowpart (SImode, operands[0]);\n+  operands[4] = gen_lowpart (SImode, operands[1]);\n+  operands[5] = gen_lowpart (SImode, operands[2]);\n+  operands[6] = gen_highpart (SImode, operands[0]);\n+  operands[7] = gen_highpart_mode (SImode, DImode, operands[1]);\n+  operands[8] = gen_highpart_mode (SImode, DImode, operands[2]);\n+}\n+  [(set_attr \"length\" \"2\")])\n+\n (define_insn_and_split \"*addx_extend_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI (plus:SI (plus:SI\n@@ -3797,6 +3920,31 @@\n   [(set_attr \"type\" \"*,*\")\n    (set_attr \"fptype\" \"*,*\")])\n \n+(define_expand \"uaddvsi4\"\n+  [(parallel [(set (reg:CCC CC_REG)\n+\t\t   (compare:CCC (plus:SI (match_operand:SI 1 \"register_operand\")\n+\t\t\t\t\t (match_operand:SI 2 \"arith_operand\"))\n+\t\t\t        (match_dup 1)))\n+\t      (set (match_operand:SI 0 \"register_operand\")\n+\t\t   (plus:SI (match_dup 1) (match_dup 2)))])\n+   (set (pc) (if_then_else (ltu (reg:CCC CC_REG) (const_int 0))\n+\t\t\t   (label_ref (match_operand 3))\n+\t\t\t   (pc)))]\n+ \"\")\n+\n+(define_expand \"addvsi4\"\n+  [(parallel [(set (reg:CCV CC_REG)\n+\t\t   (compare:CCV (plus:SI (match_operand:SI 1 \"register_operand\")\n+\t\t\t\t\t (match_operand:SI 2 \"arith_operand\"))\n+\t\t\t        (unspec:SI [(match_dup 1) (match_dup 2)]\n+\t\t\t\t\t   UNSPEC_ADDV)))\n+\t      (set (match_operand:SI 0 \"register_operand\")\n+\t\t   (plus:SI (match_dup 1) (match_dup 2)))])\n+   (set (pc) (if_then_else (ne (reg:CCV CC_REG) (const_int 0))\n+\t\t\t   (label_ref (match_operand 3))\n+\t\t\t   (pc)))]\n+ \"\")\n+\n (define_insn \"*cmp_ccnz_plus\"\n   [(set (reg:CCNZ CC_REG)\n \t(compare:CCNZ (plus:SI (match_operand:SI 0 \"register_operand\" \"%r\")\n@@ -3877,6 +4025,79 @@\n   \"addcc\\t%1, %2, %0\"\n   [(set_attr \"type\" \"compare\")])\n \n+(define_insn \"*cmp_ccc_plus_sltu_set\"\n+  [(set (reg:CCC CC_REG)\n+\t(compare:CCC (zero_extend:DI\n+\t\t       (plus:SI\n+\t\t\t (plus:SI (match_operand:SI 1 \"register_operand\" \"%r\")\n+\t\t\t\t  (match_operand:SI 2 \"arith_operand\" \"rI\"))\n+\t\t       (ltu:SI (reg:CCC CC_REG) (const_int 0))))\n+\t\t     (plus:DI (plus:DI (zero_extend:DI (match_dup 1))\n+\t\t\t\t       (zero_extend:DI (match_dup 2)))\n+\t\t\t      (ltu:DI (reg:CCC CC_REG) (const_int 0)))))\n+   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(plus:SI (plus:SI (match_dup 1) (match_dup 2))\n+\t\t (ltu:SI (reg:CCC CC_REG) (const_int 0))))]\n+  \"\"\n+  \"addxcc\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"compare\")])\n+\n+(define_insn \"*cmp_ccv_plus\"\n+  [(set (reg:CCV CC_REG)\n+\t(compare:CCV (plus:SI (match_operand:SI 0 \"register_operand\" \"%r\")\n+\t\t\t      (match_operand:SI 1 \"arith_operand\" \"rI\"))\n+\t\t     (unspec:SI [(match_dup 0) (match_dup 1)] UNSPEC_ADDV)))]\n+  \"\"\n+  \"addcc\\t%0, %1, %%g0\"\n+  [(set_attr \"type\" \"compare\")])\n+\n+(define_insn \"*cmp_ccxv_plus\"\n+  [(set (reg:CCXV CC_REG)\n+\t(compare:CCXV (plus:DI (match_operand:DI 0 \"register_operand\" \"%r\")\n+\t\t\t       (match_operand:DI 1 \"arith_operand\" \"rI\"))\n+\t\t      (unspec:DI [(match_dup 0) (match_dup 1)] UNSPEC_ADDV)))]\n+  \"TARGET_ARCH64\"\n+  \"addcc\\t%0, %1, %%g0\"\n+  [(set_attr \"type\" \"compare\")])\n+\n+(define_insn \"*cmp_ccv_plus_set\"\n+  [(set (reg:CCV CC_REG)\n+\t(compare:CCV (plus:SI (match_operand:SI 1 \"register_operand\" \"%r\")\n+\t\t\t      (match_operand:SI 2 \"arith_operand\" \"rI\"))\n+\t\t     (unspec:SI [(match_dup 1) (match_dup 2)] UNSPEC_ADDV)))\n+   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(plus:SI (match_dup 1) (match_dup 2)))]\n+  \"\"\n+  \"addcc\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"compare\")])\n+\n+(define_insn \"*cmp_ccxv_plus_set\"\n+  [(set (reg:CCXV CC_REG)\n+\t(compare:CCXV (plus:DI (match_operand:DI 1 \"register_operand\" \"%r\")\n+\t\t\t       (match_operand:DI 2 \"arith_operand\" \"rI\"))\n+\t\t      (unspec:DI [(match_dup 1) (match_dup 2)] UNSPEC_ADDV)))\n+   (set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(plus:DI (match_dup 1) (match_dup 2)))]\n+  \"TARGET_ARCH64\"\n+  \"addcc\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"compare\")])\n+\n+(define_insn \"*cmp_ccv_plus_sltu_set\"\n+  [(set (reg:CCV CC_REG)\n+\t(compare:CCV (plus:SI (plus:SI (match_operand:SI 1 \"register_operand\" \"%r\")\n+\t\t\t\t       (match_operand:SI 2 \"arith_operand\" \"rI\"))\n+\t\t\t      (ltu:SI (reg:CCC CC_REG) (const_int 0)))\n+\t\t     (unspec:SI [(plus:SI (match_dup 1) (match_dup 2))\n+\t\t\t\t (ltu:SI (reg:CCC CC_REG) (const_int 0))]\n+\t\t\t\tUNSPEC_ADDV)))\n+   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(plus:SI (plus:SI (match_dup 1) (match_dup 2))\n+\t\t (ltu:SI (reg:CCC CC_REG) (const_int 0))))]\n+  \"\"\n+  \"addxcc\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"compare\")])\n+\n+\n (define_expand \"subdi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(minus:DI (match_operand:DI 1 \"register_operand\" \"\")\n@@ -3890,6 +4111,56 @@\n     }\n })\n \n+(define_expand \"usubvdi4\"\n+  [(parallel [(set (reg:CCX CC_REG)\n+\t\t   (compare:CCX (match_operand:DI 1 \"register_or_zero_operand\")\n+\t\t\t\t(match_operand:DI 2 \"arith_add_operand\")))\n+\t      (set (match_operand:DI 0 \"register_operand\")\n+\t\t   (minus:DI (match_dup 1) (match_dup 2)))])\n+   (set (pc) (if_then_else (ltu (reg:CCX CC_REG) (const_int 0))\n+\t\t\t   (label_ref (match_operand 3))\n+\t\t\t   (pc)))]\n+ \"\"\n+{\n+  if (operands[1] == const0_rtx)\n+    {\n+      emit_insn (gen_unegvdi3 (operands[0], operands[2], operands[3]));\n+      DONE;\n+    }\n+\n+  if (!TARGET_64BIT)\n+    {\n+      emit_insn (gen_usubvdi4_sp32 (operands[0], operands[1], operands[2]));\n+      rtx x = gen_rtx_LTU (VOIDmode, gen_rtx_REG (CCCmode, SPARC_ICC_REG),\n+\t\t\t\t     const0_rtx);\n+      emit_jump_insn (gen_cbranchcc4 (x, XEXP (x, 0), XEXP (x, 1), operands[3]));\n+      DONE;\n+    }\n+})\n+\n+(define_expand \"subvdi4\"\n+  [(parallel [(set (reg:CCXV CC_REG)\n+\t\t   (compare:CCXV (minus:DI (match_operand:DI 1 \"register_operand\")\n+\t\t\t\t\t   (match_operand:DI 2 \"arith_add_operand\"))\n+\t\t\t         (unspec:DI [(match_dup 1) (match_dup 2)]\n+\t\t\t\t\t    UNSPEC_SUBV)))\n+\t      (set (match_operand:DI 0 \"register_operand\")\n+\t\t   (minus:DI (match_dup 1) (match_dup 2)))])\n+   (set (pc) (if_then_else (ne (reg:CCXV CC_REG) (const_int 0))\n+\t\t\t   (label_ref (match_operand 3))\n+\t\t\t   (pc)))]\n+ \"\"\n+{\n+  if (!TARGET_64BIT)\n+    {\n+      emit_insn (gen_subvdi4_sp32 (operands[0], operands[1], operands[2]));\n+      rtx x = gen_rtx_NE (VOIDmode, gen_rtx_REG (CCVmode, SPARC_ICC_REG),\n+\t\t\t\t    const0_rtx);\n+      emit_jump_insn (gen_cbranchcc4 (x, XEXP (x, 0), XEXP (x, 1), operands[3]));\n+      DONE;\n+    }\n+})\n+\n (define_insn_and_split \"subdi3_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=&r\")\n \t(minus:DI (match_operand:DI 1 \"register_operand\" \"r\")\n@@ -3915,6 +4186,80 @@\n }\n   [(set_attr \"length\" \"2\")])\n \n+(define_insn_and_split \"usubvdi4_sp32\"\n+  [(set (reg:CCC CC_REG)\n+\t(compare:CCC (match_operand:DI 1 \"register_operand\" \"r\")\n+\t\t     (match_operand:DI 2 \"arith_double_operand\" \"rHI\")))\n+   (set (match_operand:DI 0 \"register_operand\" \"=&r\")\n+\t(minus:DI (match_dup 1) (match_dup 2)))]\n+  \"!TARGET_ARCH64\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(parallel [(set (reg:CC CC_REG)\n+\t\t   (compare:CC (match_dup 4) (match_dup 5)))\n+\t      (set (match_dup 3)\n+\t\t   (minus:SI (match_dup 4) (match_dup 5)))])\n+   (parallel [(set (reg:CCC CC_REG)\n+\t\t   (compare:CCC (zero_extend:DI\n+\t\t\t\t  (minus:SI (minus:SI (match_dup 7)\n+\t\t\t\t\t\t      (ltu:SI (reg:CC CC_REG)\n+\t\t\t\t\t\t\t      (const_int 0)))\n+\t\t\t\t\t    (match_dup 8)))\n+\t\t\t\t(minus:DI\n+\t\t\t\t  (minus:DI (zero_extend:DI (match_dup 7))\n+\t\t\t\t\t    (ltu:DI (reg:CC CC_REG)\n+\t\t\t\t\t\t    (const_int 0)))\n+\t\t\t\t  (zero_extend:DI (match_dup 8)))))\n+\t      (set (match_dup 6)\n+\t\t   (minus:SI (minus:SI (match_dup 7)\n+\t\t\t\t       (ltu:SI (reg:CC CC_REG)\n+\t\t\t\t\t       (const_int 0)))\n+\t\t\t     (match_dup 8)))])]\n+{\n+  operands[3] = gen_lowpart (SImode, operands[0]);\n+  operands[4] = gen_lowpart (SImode, operands[1]);\n+  operands[5] = gen_lowpart (SImode, operands[2]);\n+  operands[6] = gen_highpart (SImode, operands[0]);\n+  operands[7] = gen_highpart_mode (SImode, DImode, operands[1]);\n+  operands[8] = gen_highpart_mode (SImode, DImode, operands[2]);\n+}\n+  [(set_attr \"length\" \"2\")])\n+\n+(define_insn_and_split \"subvdi4_sp32\"\n+  [(set (reg:CCV CC_REG)\n+\t(compare:CCV (minus:DI (match_operand:DI 1 \"register_operand\" \"%r\")\n+\t\t\t       (match_operand:DI 2 \"arith_double_operand\" \"rHI\"))\n+\t\t     (unspec:DI [(match_dup 1) (match_dup 2)] UNSPEC_SUBV)))\n+   (set (match_operand:DI 0 \"register_operand\" \"=&r\")\n+\t(minus:DI (match_dup 1) (match_dup 2)))]\n+  \"!TARGET_ARCH64\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(parallel [(set (reg:CC CC_REG)\n+\t\t   (compare:CC (match_dup 4) (match_dup 5)))\n+\t      (set (match_dup 3)\n+\t\t   (minus:SI (match_dup 4) (match_dup 5)))])\n+   (parallel [(set (reg:CCV CC_REG)\n+\t\t   (compare:CCV (minus:SI (minus:SI (match_dup 7) (match_dup 8))\n+\t\t\t\t\t  (ltu:SI (reg:CC CC_REG)\n+\t\t\t\t\t\t  (const_int 0)))\n+\t\t\t\t(unspec:SI [(minus:SI (match_dup 7) (match_dup 8))\n+\t\t\t\t\t    (ltu:SI (reg:CC CC_REG)\n+\t\t\t\t\t\t    (const_int 0))]\n+\t\t\t\t\t   UNSPEC_SUBV)))\n+\t      (set (match_dup 6)\n+\t\t   (minus:SI (minus:SI (match_dup 7) (match_dup 8))\n+\t\t\t     (ltu:SI (reg:CC CC_REG) (const_int 0))))])]\n+{\n+  operands[3] = gen_lowpart (SImode, operands[0]);\n+  operands[4] = gen_lowpart (SImode, operands[1]);\n+  operands[5] = gen_lowpart (SImode, operands[2]);\n+  operands[6] = gen_highpart (SImode, operands[0]);\n+  operands[7] = gen_highpart_mode (SImode, DImode, operands[1]);\n+  operands[8] = gen_highpart_mode (SImode, DImode, operands[2]);\n+}\n+  [(set_attr \"length\" \"2\")])\n+\n (define_insn_and_split \"*subx_extend_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI (minus:SI (minus:SI\n@@ -3971,6 +4316,37 @@\n   [(set_attr \"type\" \"*,*\")\n    (set_attr \"fptype\" \"*,*\")])\n \n+(define_expand \"usubvsi4\"\n+  [(parallel [(set (reg:CC CC_REG)\n+\t\t   (compare:CC (match_operand:SI 1 \"register_or_zero_operand\")\n+\t\t\t       (match_operand:SI 2 \"arith_operand\")))\n+\t      (set (match_operand:SI 0 \"register_operand\")\n+\t\t   (minus:SI (match_dup 1) (match_dup 2)))])\n+   (set (pc) (if_then_else (ltu (reg:CC CC_REG) (const_int 0))\n+\t\t\t   (label_ref (match_operand 3))\n+\t\t\t   (pc)))]\n+ \"\"\n+{\n+  if (operands[1] == const0_rtx)\n+    {\n+      emit_insn (gen_unegvsi3 (operands[0], operands[2], operands[3]));\n+      DONE;\n+    }\n+})\n+\n+(define_expand \"subvsi4\"\n+  [(parallel [(set (reg:CCV CC_REG)\n+\t\t   (compare:CCV (minus:SI (match_operand:SI 1 \"register_operand\")\n+\t\t\t\t\t  (match_operand:SI 2 \"arith_operand\"))\n+\t\t\t        (unspec:SI [(match_dup 1) (match_dup 2)]\n+\t\t\t\t\t   UNSPEC_SUBV)))\n+\t      (set (match_operand:SI 0 \"register_operand\")\n+\t\t   (minus:SI (match_dup 1) (match_dup 2)))])\n+   (set (pc) (if_then_else (ne (reg:CCV CC_REG) (const_int 0))\n+\t\t\t   (label_ref (match_operand 3))\n+\t\t\t   (pc)))]\n+ \"\")\n+\n (define_insn \"*cmp_ccnz_minus\"\n   [(set (reg:CCNZ CC_REG)\n \t(compare:CCNZ (minus:SI (match_operand:SI 0 \"register_or_zero_operand\" \"rJ\")\n@@ -4031,6 +4407,82 @@\n   \"subcc\\t%r1, %2, %0\"\n   [(set_attr \"type\" \"compare\")])\n \n+(define_insn \"*cmp_ccc_minus_sltu_set\"\n+  [(set (reg:CCC CC_REG)\n+\t(compare:CCC (zero_extend:DI\n+\t\t       (minus:SI\n+\t\t\t (minus:SI\n+\t\t\t   (match_operand:SI 1 \"register_or_zero_operand\" \"rJ\")\n+\t\t\t   (ltu:SI (reg:CC CC_REG) (const_int 0)))\n+\t\t\t (match_operand:SI 2 \"arith_operand\" \"rI\")))\n+\t\t     (minus:DI\n+\t\t       (minus:DI\n+\t\t\t (zero_extend:DI (match_dup 1))\n+\t\t\t (ltu:DI (reg:CC CC_REG) (const_int 0)))\n+\t\t       (zero_extend:DI (match_dup 2)))))\n+   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(minus:SI (minus:SI (match_dup 1)\n+\t\t\t    (ltu:SI (reg:CC CC_REG) (const_int 0)))\n+\t\t  (match_dup 2)))]\n+  \"\"\n+  \"subxcc\\t%r1, %2, %0\"\n+  [(set_attr \"type\" \"compare\")])\n+\n+(define_insn \"*cmp_ccv_minus\"\n+  [(set (reg:CCV CC_REG)\n+\t(compare:CCV (minus:SI (match_operand:SI 0 \"register_or_zero_operand\" \"rJ\")\n+\t\t\t       (match_operand:SI 1 \"arith_operand\" \"rI\"))\n+\t\t     (unspec:SI [(match_dup 0) (match_dup 1)] UNSPEC_SUBV)))]\n+  \"\"\n+  \"subcc\\t%r0, %1, %%g0\"\n+  [(set_attr \"type\" \"compare\")])\n+\n+(define_insn \"*cmp_ccxv_minus\"\n+  [(set (reg:CCXV CC_REG)\n+\t(compare:CCXV (minus:DI (match_operand:DI 0 \"register_or_zero_operand\" \"rJ\")\n+\t\t\t        (match_operand:DI 1 \"arith_operand\" \"rI\"))\n+\t\t      (unspec:DI [(match_dup 0) (match_dup 1)] UNSPEC_SUBV)))]\n+  \"TARGET_ARCH64\"\n+  \"subcc\\t%r0, %1, %%g0\"\n+  [(set_attr \"type\" \"compare\")])\n+\n+(define_insn \"*cmp_ccv_minus_set\"\n+  [(set (reg:CCV CC_REG)\n+\t(compare:CCV (minus:SI (match_operand:SI 1 \"register_or_zero_operand\" \"rJ\")\n+\t\t\t       (match_operand:SI 2 \"arith_operand\" \"rI\"))\n+\t\t     (unspec:SI [(match_dup 1) (match_dup 2)] UNSPEC_SUBV)))\n+   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(minus:SI (match_dup 1) (match_dup 2)))]\n+  \"\"\n+  \"subcc\\t%r1, %2, %0\"\n+  [(set_attr \"type\" \"compare\")])\n+\n+(define_insn \"*cmp_ccxv_minus_set\"\n+  [(set (reg:CCXV CC_REG)\n+\t(compare:CCXV (minus:DI (match_operand:DI 1 \"register_or_zero_operand\" \"rJ\")\n+\t\t\t        (match_operand:DI 2 \"arith_operand\" \"rI\"))\n+\t\t      (unspec:DI [(match_dup 1) (match_dup 2)] UNSPEC_SUBV)))\n+   (set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(minus:DI (match_dup 1) (match_dup 2)))]\n+  \"TARGET_ARCH64\"\n+  \"subcc\\t%r1, %2, %0\"\n+  [(set_attr \"type\" \"compare\")])\n+\n+(define_insn \"*cmp_ccv_minus_sltu_set\"\n+  [(set (reg:CCV CC_REG)\n+\t(compare:CCV (minus:SI (minus:SI (match_operand:SI 1 \"register_or_zero_operand\" \"rJ\")\n+\t\t\t\t\t (match_operand:SI 2 \"arith_operand\" \"rI\"))\n+\t\t\t       (ltu:SI (reg:CC CC_REG) (const_int 0)))\n+\t\t     (unspec:SI [(minus:SI (match_dup 1) (match_dup 2))\n+\t\t\t\t (ltu:SI (reg:CC CC_REG) (const_int 0))]\n+\t\t\t\tUNSPEC_SUBV)))\n+   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(minus:SI (minus:SI (match_dup 1) (match_dup 2))\n+\t\t  (ltu:SI (reg:CC CC_REG) (const_int 0))))]\n+  \"\"\n+  \"subxcc\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"compare\")])\n+\n \n ;; Integer multiply/divide instructions.\n \n@@ -5127,6 +5579,50 @@\n     }\n })\n \n+(define_expand \"unegvdi3\"\n+  [(parallel [(set (reg:CCXC CC_REG)\n+\t\t   (compare:CCXC (not:DI (match_operand:DI 1 \"register_operand\" \"\"))\n+\t\t\t\t (const_int -1)))\n+\t      (set (match_operand:DI 0 \"register_operand\" \"\")\n+\t\t   (neg:DI (match_dup 1)))])\n+   (set (pc)\n+        (if_then_else (ltu (reg:CCXC CC_REG) (const_int 0))\n+\t\t      (label_ref (match_operand 2 \"\"))\n+\t\t      (pc)))]\n+  \"\"\n+{\n+  if (!TARGET_64BIT)\n+    {\n+      emit_insn (gen_unegvdi3_sp32 (operands[0], operands[1]));\n+      rtx x = gen_rtx_LTU (VOIDmode, gen_rtx_REG (CCCmode, SPARC_ICC_REG),\n+\t\t\t\t     const0_rtx);\n+      emit_jump_insn (gen_cbranchcc4 (x, XEXP (x, 0), XEXP (x, 1), operands[2]));\n+      DONE;\n+    }\n+})\n+\n+(define_expand \"negvdi3\"\n+  [(parallel [(set (reg:CCXV CC_REG)\n+\t\t   (compare:CCXV (neg:DI (match_operand:DI 1 \"register_operand\" \"\"))\n+\t\t\t\t (unspec:DI [(match_dup 1)] UNSPEC_NEGV)))\n+\t      (set (match_operand:DI 0 \"register_operand\" \"\")\n+\t\t   (neg:DI (match_dup 1)))])\n+   (set (pc)\n+        (if_then_else (ne (reg:CCXV CC_REG) (const_int 0))\n+\t\t      (label_ref (match_operand 2 \"\"))\n+\t\t      (pc)))]\n+  \"\"\n+{\n+  if (!TARGET_64BIT)\n+    {\n+      emit_insn (gen_negvdi3_sp32 (operands[0], operands[1]));\n+      rtx x = gen_rtx_NE (VOIDmode, gen_rtx_REG (CCVmode, SPARC_ICC_REG),\n+\t\t\t\t    const0_rtx);\n+      emit_jump_insn (gen_cbranchcc4 (x, XEXP (x, 0), XEXP (x, 1), operands[2]));\n+      DONE;\n+    }\n+})\n+\n (define_insn_and_split \"negdi2_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=&r\")\n \t(neg:DI (match_operand:DI 1 \"register_operand\" \"r\")))\n@@ -5145,6 +5641,64 @@\n    operands[5] = gen_lowpart (SImode, operands[1]);\"\n   [(set_attr \"length\" \"2\")])\n \n+(define_insn_and_split \"unegvdi3_sp32\"\n+  [(set (reg:CCC CC_REG)\n+\t(compare:CCC (not:DI (match_operand:DI 1 \"register_operand\" \"r\"))\n+\t\t     (const_int -1)))\n+   (set (match_operand:DI 0 \"register_operand\" \"=&r\")\n+\t(neg:DI (match_dup 1)))]\n+  \"!TARGET_ARCH64\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(parallel [(set (reg:CCC CC_REG)\n+                   (compare:CCC (not:SI (match_dup 5)) (const_int -1)))\n+              (set (match_dup 4) (neg:SI (match_dup 5)))])\n+   (parallel [(set (reg:CCC CC_REG)\n+\t\t   (compare:CCC (zero_extend:DI\n+\t\t\t\t  (neg:SI (plus:SI (match_dup 3)\n+\t\t\t\t\t\t   (ltu:SI (reg:CCC CC_REG)\n+\t\t\t\t\t\t\t   (const_int 0)))))\n+\t\t\t\t(neg:DI (plus:DI (zero_extend:DI (match_dup 3))\n+\t\t\t\t\t\t (ltu:DI (reg:CCC CC_REG)\n+\t\t\t\t\t\t\t (const_int 0))))))\n+\t      (set (match_dup 2) (neg:SI (plus:SI (match_dup 3)\n+\t\t\t\t\t\t  (ltu:SI (reg:CCC CC_REG)\n+\t\t\t\t\t\t\t  (const_int 0)))))])]\n+  \"operands[2] = gen_highpart (SImode, operands[0]);\n+   operands[3] = gen_highpart (SImode, operands[1]);\n+   operands[4] = gen_lowpart (SImode, operands[0]);\n+   operands[5] = gen_lowpart (SImode, operands[1]);\"\n+  [(set_attr \"length\" \"2\")])\n+\n+(define_insn_and_split \"negvdi3_sp32\"\n+  [(set (reg:CCV CC_REG)\n+\t(compare:CCV (neg:DI (match_operand:DI 1 \"register_operand\" \"r\"))\n+\t\t     (unspec:DI [(match_dup 1)] UNSPEC_NEGV)))\n+   (set (match_operand:DI 0 \"register_operand\" \"=&r\")\n+\t(neg:DI (match_dup 1)))]\n+  \"!TARGET_ARCH64\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(parallel [(set (reg:CCC CC_REG)\n+                   (compare:CCC (not:SI (match_dup 5)) (const_int -1)))\n+              (set (match_dup 4) (neg:SI (match_dup 5)))])\n+   (parallel [(set (reg:CCV CC_REG)\n+\t\t   (compare:CCV (neg:SI (plus:SI (match_dup 3)\n+\t\t\t\t\t\t (ltu:SI (reg:CCC CC_REG)\n+\t\t\t\t\t\t\t (const_int 0))))\n+\t\t\t\t(unspec:SI [(plus:SI (match_dup 3)\n+\t\t\t\t\t\t     (ltu:SI (reg:CCC CC_REG)\n+\t\t\t\t\t\t\t     (const_int 0)))]\n+\t\t\t\t\t   UNSPEC_NEGV)))\n+\t      (set (match_dup 2) (neg:SI (plus:SI (match_dup 3)\n+\t\t\t\t\t\t  (ltu:SI (reg:CCC CC_REG)\n+\t\t\t\t\t\t\t  (const_int 0)))))])]\n+  \"operands[2] = gen_highpart (SImode, operands[0]);\n+   operands[3] = gen_highpart (SImode, operands[1]);\n+   operands[4] = gen_lowpart (SImode, operands[0]);\n+   operands[5] = gen_lowpart (SImode, operands[1]);\"\n+  [(set_attr \"length\" \"2\")])\n+\n (define_insn \"*negdi2_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(neg:DI (match_operand:DI 1 \"register_operand\" \"r\")))]\n@@ -5157,6 +5711,30 @@\n   \"\"\n   \"sub\\t%%g0, %1, %0\")\n \n+(define_expand \"unegvsi3\"\n+  [(parallel [(set (reg:CCC CC_REG)\n+\t\t   (compare:CCC (not:SI (match_operand:SI 1 \"arith_operand\" \"\"))\n+\t\t\t\t(const_int -1)))\n+\t      (set (match_operand:SI 0 \"register_operand\" \"\")\n+\t\t   (neg:SI (match_dup 1)))])\n+   (set (pc)\n+        (if_then_else (ltu (reg:CCC CC_REG) (const_int 0))\n+\t\t      (label_ref (match_operand 2 \"\"))\n+\t\t      (pc)))]\n+  \"\")\n+\n+(define_expand \"negvsi3\"\n+  [(parallel [(set (reg:CCV CC_REG)\n+\t\t   (compare:CCV (neg:SI (match_operand:SI 1 \"arith_operand\" \"\"))\n+\t\t\t\t(unspec:SI [(match_dup 1)] UNSPEC_NEGV)))\n+\t      (set (match_operand:SI 0 \"register_operand\" \"\")\n+\t\t   (neg:SI (match_dup 1)))])\n+   (set (pc)\n+        (if_then_else (ne (reg:CCV CC_REG) (const_int 0))\n+\t\t      (label_ref (match_operand 2 \"\"))\n+\t\t      (pc)))]\n+\"\")\n+\n (define_insn \"*cmp_ccnz_neg\"\n   [(set (reg:CCNZ CC_REG)\n \t(compare:CCNZ (neg:SI (match_operand:SI 0 \"arith_operand\" \"rI\"))\n@@ -5213,6 +5791,73 @@\n   \"subcc\\t%%g0, %1, %0\"\n   [(set_attr \"type\" \"compare\")])\n \n+(define_insn \"*cmp_ccc_neg_sltu_set\"\n+  [(set (reg:CCC CC_REG)\n+\t(compare:CCC (zero_extend:DI\n+\t\t       (neg:SI (plus:SI (match_operand:SI 1 \"arith_operand\" \"rI\")\n+\t\t\t\t        (ltu:SI (reg:CCC CC_REG)\n+\t\t\t\t\t\t(const_int 0)))))\n+\t\t     (neg:DI (plus:DI (zero_extend:DI (match_dup 1))\n+\t\t\t\t      (ltu:DI (reg:CCC CC_REG)\n+\t\t\t\t\t      (const_int 0))))))\n+   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(neg:SI (plus:SI (match_dup 1)\n+\t\t\t (ltu:SI (reg:CCC CC_REG) (const_int 0)))))]\n+  \"\"\n+  \"subxcc\\t%%g0, %1, %0\"\n+  [(set_attr \"type\" \"compare\")])\n+\n+(define_insn \"*cmp_ccv_neg\"\n+  [(set (reg:CCV CC_REG)\n+\t(compare:CCV (neg:SI (match_operand:SI 0 \"arith_operand\" \"rI\"))\n+\t\t     (unspec:SI [(match_dup 0)] UNSPEC_NEGV)))]\n+  \"\"\n+  \"subcc\\t%%g0, %0, %%g0\"\n+  [(set_attr \"type\" \"compare\")])\n+\n+(define_insn \"*cmp_ccxv_neg\"\n+  [(set (reg:CCXV CC_REG)\n+\t(compare:CCXV (neg:DI (match_operand:DI 0 \"arith_operand\" \"rI\"))\n+\t\t      (unspec:DI [(match_dup 0)] UNSPEC_NEGV)))]\n+  \"TARGET_ARCH64\"\n+  \"subcc\\t%%g0, %0, %%g0\"\n+  [(set_attr \"type\" \"compare\")])\n+\n+(define_insn \"*cmp_ccv_neg_set\"\n+  [(set (reg:CCV CC_REG)\n+\t(compare:CCV (neg:SI (match_operand:SI 1 \"arith_operand\" \"rI\"))\n+\t\t     (unspec:SI [(match_dup 1)] UNSPEC_NEGV)))\n+   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(neg:SI (match_dup 1)))]\n+  \"\"\n+  \"subcc\\t%%g0, %1, %0\"\n+  [(set_attr \"type\" \"compare\")])\n+\n+(define_insn \"*cmp_ccxv_neg_set\"\n+  [(set (reg:CCXV CC_REG)\n+\t(compare:CCXV (neg:DI (match_operand:DI 1 \"arith_operand\" \"rI\"))\n+\t\t      (unspec:DI [(match_dup 1)] UNSPEC_NEGV)))\n+   (set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(neg:DI (match_dup 1)))]\n+  \"TARGET_ARCH64\"\n+  \"subcc\\t%%g0, %1, %0\"\n+  [(set_attr \"type\" \"compare\")])\n+\n+(define_insn \"*cmp_ccv_neg_sltu_set\"\n+  [(set (reg:CCV CC_REG)\n+\t(compare:CCV (neg:SI (plus:SI (match_operand:SI 1 \"arith_operand\" \"rI\")\n+\t\t\t\t      (ltu:SI (reg:CCC CC_REG) (const_int 0))))\n+\t\t     (unspec:SI [(plus:SI (match_dup 1)\n+\t\t\t\t          (ltu:SI (reg:CCC CC_REG)\n+\t\t\t\t\t\t  (const_int 0)))]\n+\t\t\t\tUNSPEC_NEGV)))\n+   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(neg:SI (plus:SI (match_dup 1)\n+\t\t\t (ltu:SI (reg:CCC CC_REG) (const_int 0)))))]\n+  \"\"\n+  \"subxcc\\t%%g0, %1, %0\"\n+  [(set_attr \"type\" \"compare\")])\n+\n \n (define_insn \"one_cmpldi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")"}, {"sha": "0e32435bba42d1774583ed361a1a6494f71802bb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8572922996bd2db0400ccbf5043b1fdbff2fd936/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8572922996bd2db0400ccbf5043b1fdbff2fd936/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8572922996bd2db0400ccbf5043b1fdbff2fd936", "patch": "@@ -1,3 +1,9 @@\n+2016-10-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.target/sparc/overflow-1.c: New test.\n+\t* gcc.target/sparc/overflow-2.c: Likewise.\n+\t* gcc.target/sparc/overflow-3.c: Likewise.\n+\n 2016-10-21  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* gcc.target/arm/pure-code/pure-code.exp: Require arm_cortex_m"}, {"sha": "e3fa0d04573abc931b93bc2e3dd9e06bebb76fde", "filename": "gcc/testsuite/gcc.target/sparc/overflow-1.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8572922996bd2db0400ccbf5043b1fdbff2fd936/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Foverflow-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8572922996bd2db0400ccbf5043b1fdbff2fd936/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Foverflow-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Foverflow-1.c?ref=8572922996bd2db0400ccbf5043b1fdbff2fd936", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -mcpu=v8\" } */\n+/* { dg-require-effective-target ilp32 } */\n+\n+#include <stdbool.h>\n+#include <stdint.h>\n+\n+bool my_uadd_overflow (uint32_t a, uint32_t b, uint32_t *res)\n+{\n+  return __builtin_add_overflow (a, b, res);\n+}\n+\n+bool my_usub_overflow (uint32_t a, uint32_t b, uint32_t *res)\n+{\n+  return __builtin_sub_overflow (a, b, res);\n+}\n+\n+bool my_uneg_overflow (uint32_t a, uint32_t *res)\n+{\n+  return __builtin_sub_overflow (0, a, res);\n+}\n+\n+bool my_add_overflow (int32_t a, int32_t b, int32_t *res)\n+{\n+  return __builtin_add_overflow (a, b, res);\n+}\n+\n+bool my_sub_overflow (int32_t a, int32_t b, int32_t *res)\n+{\n+  return __builtin_sub_overflow (a, b, res);\n+}\n+\n+bool my_neg_overflow (int32_t a, int32_t *res)\n+{\n+  return __builtin_sub_overflow (0, a, res);\n+}\n+\n+/* { dg-final { scan-assembler-times \"addcc\\t%\" 2 } } */\n+/* { dg-final { scan-assembler-times \"subcc\\t%\" 4 } } */\n+/* { dg-final { scan-assembler-times \"addx\\t%\" 3 } } */\n+/* { dg-final { scan-assembler-times \"bvs\" 3 } } */\n+/* { dg-final { scan-assembler-not \"cmp\\t%\" } } */\n+/* { dg-final { scan-assembler-not \"save\\t%\" } } */"}, {"sha": "9e42bd214de7e57238ac11c95c24db430c80f506", "filename": "gcc/testsuite/gcc.target/sparc/overflow-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8572922996bd2db0400ccbf5043b1fdbff2fd936/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Foverflow-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8572922996bd2db0400ccbf5043b1fdbff2fd936/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Foverflow-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Foverflow-2.c?ref=8572922996bd2db0400ccbf5043b1fdbff2fd936", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -mcpu=v8\" } */\n+/* { dg-require-effective-target ilp32 } */\n+\n+#include <stdbool.h>\n+#include <stdint.h>\n+\n+bool my_uadd_overflow (uint64_t a, uint64_t b, uint64_t *res)\n+{\n+  return __builtin_add_overflow (a, b, res);\n+}\n+\n+bool my_usub_overflow (uint64_t a, uint64_t b, uint64_t *res)\n+{\n+  return __builtin_sub_overflow (a, b, res);\n+}\n+\n+bool my_uneg_overflow (uint64_t a, uint64_t *res)\n+{\n+  return __builtin_sub_overflow (0, a, res);\n+}\n+\n+bool my_add_overflow (int64_t a, int64_t b, int64_t *res)\n+{\n+  return __builtin_add_overflow (a, b, res);\n+}\n+\n+bool my_sub_overflow (int64_t a, int64_t b, int64_t *res)\n+{\n+  return __builtin_sub_overflow (a, b, res);\n+}\n+\n+bool my_neg_overflow (int64_t a, int64_t *res)\n+{\n+  return __builtin_sub_overflow (0, a, res);\n+}\n+\n+/* { dg-final { scan-assembler-times \"addcc\\t%\" 2 } } */\n+/* { dg-final { scan-assembler-times \"addxcc\\t%\" 2 } } */\n+/* { dg-final { scan-assembler-times \"subcc\\t%\" 4 } } */\n+/* { dg-final { scan-assembler-times \"subxcc\\t%\" 4 } } */\n+/* { dg-final { scan-assembler-times \"addx\\t%\" 2 } } */\n+/* { dg-final { scan-assembler-times \"blu\" 1 } } */\n+/* { dg-final { scan-assembler-times \"bvs\" 3 } } */\n+/* { dg-final { scan-assembler-not \"cmp\\t%\" } } */\n+/* { dg-final { scan-assembler-not \"save\\t%\" } } */"}, {"sha": "31b326486ee9108a9b5aa4cc0bdae3c3915f15e0", "filename": "gcc/testsuite/gcc.target/sparc/overflow-3.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8572922996bd2db0400ccbf5043b1fdbff2fd936/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Foverflow-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8572922996bd2db0400ccbf5043b1fdbff2fd936/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Foverflow-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Foverflow-3.c?ref=8572922996bd2db0400ccbf5043b1fdbff2fd936", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+/* { dg-require-effective-target lp64 } */\n+\n+#include <stdbool.h>\n+#include <stdint.h>\n+\n+bool my_uadd_overflow (uint64_t a, uint64_t b, uint64_t *res)\n+{\n+  return __builtin_add_overflow (a, b, res);\n+}\n+\n+bool my_usub_overflow (uint64_t a, uint64_t b, uint64_t *res)\n+{\n+  return __builtin_sub_overflow (a, b, res);\n+}\n+\n+bool my_uneg_overflow (uint64_t a, uint64_t *res)\n+{\n+  return __builtin_sub_overflow (0, a, res);\n+}\n+\n+bool my_add_overflow (int64_t a, int64_t b, int64_t *res)\n+{\n+  return __builtin_add_overflow (a, b, res);\n+}\n+\n+bool my_sub_overflow (int64_t a, int64_t b, int64_t *res)\n+{\n+  return __builtin_sub_overflow (a, b, res);\n+}\n+\n+bool my_neg_overflow (int64_t a, int64_t *res)\n+{\n+  return __builtin_sub_overflow (0, a, res);\n+}\n+\n+/* { dg-final { scan-assembler-times \"addcc\\t%\" 2 } } */\n+/* { dg-final { scan-assembler-times \"subcc\\t%\" 4 } } */\n+/* { dg-final { scan-assembler-times \"movlu\\t%\" 1 } } */\n+/* { dg-final { scan-assembler-times \"blu\" 2 } } */\n+/* { dg-final { scan-assembler-times \"bvs\" 3 } } */\n+/* { dg-final { scan-assembler-not \"cmp\\t%\" } } */\n+/* { dg-final { scan-assembler-not \"save\\t%\" } } */"}]}