{"sha": "b74ebb2a36adbb18da52f7eb25b54655b04c7be4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc0ZWJiMmEzNmFkYmIxOGRhNTJmN2ViMjViNTQ2NTViMDRjN2JlNA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2019-05-15T15:04:08Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2019-05-15T15:04:08Z"}, "message": "i386: Emulate MMX packsswb/packssdw/packuswb with SSE2\n\nEmulate MMX packsswb/packssdw/packuswb with SSE packsswb/packssdw/packuswb\nplus moving bits 64:95 to bits 32:63 in SSE register.  Only SSE register\nsource operand is allowed.\n\n\tPR target/89021\n\t* config/i386/i386-expand.c (ix86_move_vector_high_sse_to_mmx):\n\tNew function.\n\t(ix86_split_mmx_pack): Likewise.\n\t* config/i386/i386-protos.h (ix86_move_vector_high_sse_to_mmx):\n\tNew prototype.\n\t(ix86_split_mmx_pack): Likewise.\n\t* config/i386/i386.md (mmx_isa): New.\n\t(enabled): Also check mmx_isa.\n\t* config/i386/mmx.md (any_s_truncate): New code iterator.\n\t(s_trunsuffix): New code attr.\n\t(mmx_packsswb): Removed.\n\t(mmx_packssdw): Likewise.\n\t(mmx_packuswb): Likewise.\n\t(mmx_pack<s_trunsuffix>swb): New define_insn_and_split to emulate\n\tMMX packsswb/packuswb with SSE2.\n\t(mmx_packssdw): Likewise.\n\t* config/i386/predicates.md (register_mmxmem_operand): New.\n\nCo-Authored-By: Uros Bizjak <ubizjak@gmail.com>\n\nFrom-SVN: r271215", "tree": {"sha": "ee8b7f8ff243eec0be5164ce27e4f599dd60209f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee8b7f8ff243eec0be5164ce27e4f599dd60209f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b74ebb2a36adbb18da52f7eb25b54655b04c7be4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b74ebb2a36adbb18da52f7eb25b54655b04c7be4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b74ebb2a36adbb18da52f7eb25b54655b04c7be4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b74ebb2a36adbb18da52f7eb25b54655b04c7be4/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dfa61b9ed06d71901c4c430caa89820972ad68fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfa61b9ed06d71901c4c430caa89820972ad68fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfa61b9ed06d71901c4c430caa89820972ad68fe"}], "stats": {"total": 166, "additions": 136, "deletions": 30}, "files": [{"sha": "01783a9b773539a4c780d561203ad4233be65084", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74ebb2a36adbb18da52f7eb25b54655b04c7be4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74ebb2a36adbb18da52f7eb25b54655b04c7be4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b74ebb2a36adbb18da52f7eb25b54655b04c7be4", "patch": "@@ -1,3 +1,25 @@\n+2019-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n+\t    Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/89021\n+\t* config/i386/i386-expand.c (ix86_move_vector_high_sse_to_mmx):\n+\tNew function.\n+\t(ix86_split_mmx_pack): Likewise.\n+\t* config/i386/i386-protos.h (ix86_move_vector_high_sse_to_mmx):\n+\tNew prototype.\n+\t(ix86_split_mmx_pack): Likewise.\n+\t* config/i386/i386.md (mmx_isa): New.\n+\t(enabled): Also check mmx_isa.\n+\t* config/i386/mmx.md (any_s_truncate): New code iterator.\n+\t(s_trunsuffix): New code attr.\n+\t(mmx_packsswb): Removed.\n+\t(mmx_packssdw): Likewise.\n+\t(mmx_packuswb): Likewise.\n+\t(mmx_pack<s_trunsuffix>swb): New define_insn_and_split to emulate\n+\tMMX packsswb/packuswb with SSE2.\n+\t(mmx_packssdw): Likewise.\n+\t* config/i386/predicates.md (register_mmxmem_operand): New.\n+\n 2019-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/89021"}, {"sha": "f1e05937f46dd1c5c3887cb971251922cc036654", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74ebb2a36adbb18da52f7eb25b54655b04c7be4/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74ebb2a36adbb18da52f7eb25b54655b04c7be4/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=b74ebb2a36adbb18da52f7eb25b54655b04c7be4", "patch": "@@ -662,6 +662,60 @@ ix86_expand_vector_move_misalign (machine_mode mode, rtx operands[])\n     gcc_unreachable ();\n }\n \n+/* Move bits 64:95 to bits 32:63.  */\n+\n+void\n+ix86_move_vector_high_sse_to_mmx (rtx op)\n+{\n+  rtx mask = gen_rtx_PARALLEL (VOIDmode,\n+\t\t\t       gen_rtvec (4, GEN_INT (0), GEN_INT (2),\n+\t\t\t\t\t  GEN_INT (0), GEN_INT (0)));\n+  rtx dest = lowpart_subreg (V4SImode, op, GET_MODE (op));\n+  op = gen_rtx_VEC_SELECT (V4SImode, dest, mask);\n+  rtx insn = gen_rtx_SET (dest, op);\n+  emit_insn (insn);\n+}\n+\n+/* Split MMX pack with signed/unsigned saturation with SSE/SSE2.  */\n+\n+void\n+ix86_split_mmx_pack (rtx operands[], enum rtx_code code)\n+{\n+  rtx op0 = operands[0];\n+  rtx op1 = operands[1];\n+  rtx op2 = operands[2];\n+\n+  machine_mode dmode = GET_MODE (op0);\n+  machine_mode smode = GET_MODE (op1);\n+  machine_mode inner_dmode = GET_MODE_INNER (dmode);\n+  machine_mode inner_smode = GET_MODE_INNER (smode);\n+\n+  /* Get the corresponding SSE mode for destination.  */\n+  int nunits = 16 / GET_MODE_SIZE (inner_dmode);\n+  machine_mode sse_dmode = mode_for_vector (GET_MODE_INNER (dmode),\n+\t\t\t\t\t    nunits).require ();\n+  machine_mode sse_half_dmode = mode_for_vector (GET_MODE_INNER (dmode),\n+\t\t\t\t\t\t nunits / 2).require ();\n+\n+  /* Get the corresponding SSE mode for source.  */\n+  nunits = 16 / GET_MODE_SIZE (inner_smode);\n+  machine_mode sse_smode = mode_for_vector (GET_MODE_INNER (smode),\n+\t\t\t\t\t    nunits).require ();\n+\n+  /* Generate SSE pack with signed/unsigned saturation.  */\n+  rtx dest = lowpart_subreg (sse_dmode, op0, GET_MODE (op0));\n+  op1 = lowpart_subreg (sse_smode, op1, GET_MODE (op1));\n+  op2 = lowpart_subreg (sse_smode, op2, GET_MODE (op2));\n+\n+  op1 = gen_rtx_fmt_e (code, sse_half_dmode, op1);\n+  op2 = gen_rtx_fmt_e (code, sse_half_dmode, op2);\n+  rtx insn = gen_rtx_SET (dest, gen_rtx_VEC_CONCAT (sse_dmode,\n+\t\t\t\t\t\t    op1, op2));\n+  emit_insn (insn);\n+\n+  ix86_move_vector_high_sse_to_mmx (op0);\n+}\n+\n /* Helper function of ix86_fixup_binary_operands to canonicalize\n    operand order.  Returns true if the operands should be swapped.  */\n "}, {"sha": "760f530bf503ab8655c69938f99f3ea4c7b5508c", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74ebb2a36adbb18da52f7eb25b54655b04c7be4/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74ebb2a36adbb18da52f7eb25b54655b04c7be4/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=b74ebb2a36adbb18da52f7eb25b54655b04c7be4", "patch": "@@ -200,6 +200,9 @@ extern void ix86_expand_vecop_qihi (enum rtx_code, rtx, rtx, rtx);\n \n extern rtx ix86_split_stack_guard (void);\n \n+extern void ix86_move_vector_high_sse_to_mmx (rtx);\n+extern void ix86_split_mmx_pack (rtx[], enum rtx_code);\n+\n #ifdef TREE_CODE\n extern void init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree, int);\n #endif\t/* TREE_CODE  */"}, {"sha": "2ae4bb84fdf1a7b395c7719043a285886da79a39", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74ebb2a36adbb18da52f7eb25b54655b04c7be4/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74ebb2a36adbb18da52f7eb25b54655b04c7be4/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=b74ebb2a36adbb18da52f7eb25b54655b04c7be4", "patch": "@@ -796,6 +796,10 @@\n \t\t    avx512vl,noavx512vl,x64_avx512dq,x64_avx512bw\"\n   (const_string \"base\"))\n \n+;; Define instruction set of MMX instructions\n+(define_attr \"mmx_isa\" \"base,native,x64,x64_noavx,x64_avx\"\n+  (const_string \"base\"))\n+\n (define_attr \"enabled\" \"\"\n   (cond [(eq_attr \"isa\" \"x64\") (symbol_ref \"TARGET_64BIT\")\n \t (eq_attr \"isa\" \"x64_sse2\")\n@@ -834,6 +838,15 @@\n \t (eq_attr \"isa\" \"noavx512dq\") (symbol_ref \"!TARGET_AVX512DQ\")\n \t (eq_attr \"isa\" \"avx512vl\") (symbol_ref \"TARGET_AVX512VL\")\n \t (eq_attr \"isa\" \"noavx512vl\") (symbol_ref \"!TARGET_AVX512VL\")\n+\n+\t (eq_attr \"mmx_isa\" \"native\")\n+\t   (symbol_ref \"!TARGET_MMX_WITH_SSE\")\n+\t (eq_attr \"mmx_isa\" \"x64\")\n+\t   (symbol_ref \"TARGET_MMX_WITH_SSE\")\n+\t (eq_attr \"mmx_isa\" \"x64_avx\")\n+\t   (symbol_ref \"TARGET_MMX_WITH_SSE && TARGET_AVX\")\n+\t (eq_attr \"mmx_isa\" \"x64_noavx\")\n+\t   (symbol_ref \"TARGET_MMX_WITH_SSE && !TARGET_AVX\")\n \t]\n \t(const_int 1)))\n "}, {"sha": "28c9aa744ed3b5f02f49dd30b243de634fd16097", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 37, "deletions": 30, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74ebb2a36adbb18da52f7eb25b54655b04c7be4/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74ebb2a36adbb18da52f7eb25b54655b04c7be4/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=b74ebb2a36adbb18da52f7eb25b54655b04c7be4", "patch": "@@ -1046,41 +1046,48 @@\n ;;\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n-(define_insn \"mmx_packsswb\"\n-  [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")\n+;; Used in signed and unsigned truncations with saturation.\n+(define_code_iterator any_s_truncate [ss_truncate us_truncate])\n+;; Instruction suffix for truncations with saturation.\n+(define_code_attr s_trunsuffix [(ss_truncate \"s\") (us_truncate \"u\")])\n+\n+(define_insn_and_split \"mmx_pack<s_trunsuffix>swb\"\n+  [(set (match_operand:V8QI 0 \"register_operand\" \"=y,x,Yv\")\n \t(vec_concat:V8QI\n-\t  (ss_truncate:V4QI\n-\t    (match_operand:V4HI 1 \"register_operand\" \"0\"))\n-\t  (ss_truncate:V4QI\n-\t    (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\"))))]\n-  \"TARGET_MMX\"\n-  \"packsswb\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxshft\")\n-   (set_attr \"mode\" \"DI\")])\n+\t  (any_s_truncate:V4QI\n+\t    (match_operand:V4HI 1 \"register_operand\" \"0,0,Yv\"))\n+\t  (any_s_truncate:V4QI\n+\t    (match_operand:V4HI 2 \"register_mmxmem_operand\" \"ym,x,Yv\"))))]\n+  \"TARGET_MMX || TARGET_MMX_WITH_SSE\"\n+  \"@\n+   pack<s_trunsuffix>swb\\t{%2, %0|%0, %2}\n+   #\n+   #\"\n+  \"TARGET_MMX_WITH_SSE && reload_completed\"\n+  [(const_int 0)]\n+  \"ix86_split_mmx_pack (operands, <any_s_truncate:CODE>); DONE;\"\n+  [(set_attr \"mmx_isa\" \"native,x64_noavx,x64_avx\")\n+   (set_attr \"type\" \"mmxshft,sselog,sselog\")\n+   (set_attr \"mode\" \"DI,TI,TI\")])\n \n-(define_insn \"mmx_packssdw\"\n-  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n+(define_insn_and_split \"mmx_packssdw\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=y,x,Yv\")\n \t(vec_concat:V4HI\n \t  (ss_truncate:V2HI\n-\t    (match_operand:V2SI 1 \"register_operand\" \"0\"))\n+\t    (match_operand:V2SI 1 \"register_operand\" \"0,0,Yv\"))\n \t  (ss_truncate:V2HI\n-\t    (match_operand:V2SI 2 \"nonimmediate_operand\" \"ym\"))))]\n-  \"TARGET_MMX\"\n-  \"packssdw\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxshft\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"mmx_packuswb\"\n-  [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")\n-\t(vec_concat:V8QI\n-\t  (us_truncate:V4QI\n-\t    (match_operand:V4HI 1 \"register_operand\" \"0\"))\n-\t  (us_truncate:V4QI\n-\t    (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\"))))]\n-  \"TARGET_MMX\"\n-  \"packuswb\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxshft\")\n-   (set_attr \"mode\" \"DI\")])\n+\t    (match_operand:V2SI 2 \"register_mmxmem_operand\" \"ym,x,Yv\"))))]\n+  \"TARGET_MMX || TARGET_MMX_WITH_SSE\"\n+  \"@\n+   packssdw\\t{%2, %0|%0, %2}\n+   #\n+   #\"\n+  \"TARGET_MMX_WITH_SSE && reload_completed\"\n+  [(const_int 0)]\n+  \"ix86_split_mmx_pack (operands, SS_TRUNCATE); DONE;\"\n+  [(set_attr \"mmx_isa\" \"native,x64_noavx,x64_avx\")\n+   (set_attr \"type\" \"mmxshft,sselog,sselog\")\n+   (set_attr \"mode\" \"DI,TI,TI\")])\n \n (define_insn \"mmx_punpckhbw\"\n   [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")"}, {"sha": "29867fbeab0f1fe65d18cd3228b62f5b622cd8d5", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74ebb2a36adbb18da52f7eb25b54655b04c7be4/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74ebb2a36adbb18da52f7eb25b54655b04c7be4/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=b74ebb2a36adbb18da52f7eb25b54655b04c7be4", "patch": "@@ -49,6 +49,13 @@\n   (and (match_code \"reg\")\n        (match_test \"MMX_REGNO_P (REGNO (op))\")))\n \n+;; Match register operands, but include memory operands for\n+;; !TARGET_MMX_WITH_SSE.\n+(define_predicate \"register_mmxmem_operand\"\n+  (ior (match_operand 0 \"register_operand\")\n+       (and (not (match_test \"TARGET_MMX_WITH_SSE\"))\n+\t    (match_operand 0 \"memory_operand\"))))\n+\n ;; True if the operand is an SSE register.\n (define_predicate \"sse_reg_operand\"\n   (and (match_code \"reg\")"}]}