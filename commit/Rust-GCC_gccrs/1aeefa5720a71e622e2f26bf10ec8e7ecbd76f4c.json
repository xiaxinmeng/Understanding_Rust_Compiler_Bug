{"sha": "1aeefa5720a71e622e2f26bf10ec8e7ecbd76f4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFlZWZhNTcyMGE3MWU2MjJlMmYyNmJmMTBlYzhlN2VjYmQ3NmY0Yw==", "commit": {"author": {"name": "Hongyu Wang", "email": "hongyu.wang@intel.com", "date": "2021-06-30T06:38:31Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-07-02T06:32:56Z"}, "message": "Clear odata for aes(enc|dec)(wide)?kl intrinsics when ZF is set.\n\nFor Keylocker aesenc/aesdec intrinsics, current implementation\nmoves idata to odata unconditionally, which causes safety issue when\nthe instruction meets runtime error. So we add a branch to clear\nodata when ZF is set after instruction exectution.\n\ngcc/ChangeLog:\n\n\t* config/i386/i386-expand.c (ix86_expand_builtin):\n\tAdd branch to clear odata when ZF is set for asedecenc_expand\n\tand wideaesdecenc_expand.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/keylocker-aesdec128kl.c: Update test.\n\t* gcc.target/i386/keylocker-aesdec256kl.c: Likewise.\n\t* gcc.target/i386/keylocker-aesdecwide128kl.c: Likewise.\n\t* gcc.target/i386/keylocker-aesdecwide256kl.c: Likewise.\n\t* gcc.target/i386/keylocker-aesenc128kl.c: Likewise.\n\t* gcc.target/i386/keylocker-aesenc256kl.c: Likewise.\n\t* gcc.target/i386/keylocker-aesencwide128kl.c: Likewise.\n\t* gcc.target/i386/keylocker-aesencwide256kl.c: Likewise.", "tree": {"sha": "d1cca20e8b8850c9747f5fc4eb15b123239744d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1cca20e8b8850c9747f5fc4eb15b123239744d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1aeefa5720a71e622e2f26bf10ec8e7ecbd76f4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aeefa5720a71e622e2f26bf10ec8e7ecbd76f4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aeefa5720a71e622e2f26bf10ec8e7ecbd76f4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aeefa5720a71e622e2f26bf10ec8e7ecbd76f4c/comments", "author": {"login": "wwwhhhyyy", "id": 5366075, "node_id": "MDQ6VXNlcjUzNjYwNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5366075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwwhhhyyy", "html_url": "https://github.com/wwwhhhyyy", "followers_url": "https://api.github.com/users/wwwhhhyyy/followers", "following_url": "https://api.github.com/users/wwwhhhyyy/following{/other_user}", "gists_url": "https://api.github.com/users/wwwhhhyyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwwhhhyyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwwhhhyyy/subscriptions", "organizations_url": "https://api.github.com/users/wwwhhhyyy/orgs", "repos_url": "https://api.github.com/users/wwwhhhyyy/repos", "events_url": "https://api.github.com/users/wwwhhhyyy/events{/privacy}", "received_events_url": "https://api.github.com/users/wwwhhhyyy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01d402c5e0ac1ddf5618bbe316b50067625fda46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01d402c5e0ac1ddf5618bbe316b50067625fda46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01d402c5e0ac1ddf5618bbe316b50067625fda46"}], "stats": {"total": 77, "additions": 72, "deletions": 5}, "files": [{"sha": "a63319aba26357997484d881be95978d106dd238", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aeefa5720a71e622e2f26bf10ec8e7ecbd76f4c/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aeefa5720a71e622e2f26bf10ec8e7ecbd76f4c/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=1aeefa5720a71e622e2f26bf10ec8e7ecbd76f4c", "patch": "@@ -11753,10 +11753,24 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n       if (target == 0)\n \ttarget = gen_reg_rtx (QImode);\n \n-      pat = gen_rtx_EQ (QImode, gen_rtx_REG (CCZmode, FLAGS_REG),\n-\t\t\tconst0_rtx);\n-      emit_insn (gen_rtx_SET (target, pat));\n+      /* NB: For aesenc/aesdec keylocker insn, ZF will be set when runtime\n+\t error occurs. Then the output should be cleared for safety. */\n+      rtx_code_label *ok_label;\n+      rtx tmp;\n+\n+      tmp = gen_rtx_REG (CCZmode, FLAGS_REG);\n+      pat = gen_rtx_EQ (QImode, tmp, const0_rtx);\n+      ok_label = gen_label_rtx ();\n+      emit_cmp_and_jump_insns (tmp, const0_rtx, NE, 0, GET_MODE (tmp),\n+\t\t\t       true, ok_label);\n+      /* Usually the runtime error seldom occur, so predict OK path as\n+\t hotspot to optimize it as fallthrough block. */\n+      predict_jump (REG_BR_PROB_BASE * 90 / 100);\n+\n+      emit_insn (gen_rtx_SET (op1, const0_rtx));\n \n+      emit_label (ok_label);\n+      emit_insn (gen_rtx_SET (target, pat));\n       emit_insn (gen_rtx_SET (op0, op1));\n \n       return target;\n@@ -11811,8 +11825,17 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n       if (target == 0)\n \ttarget = gen_reg_rtx (QImode);\n \n-      pat = gen_rtx_EQ (QImode, gen_rtx_REG (CCZmode, FLAGS_REG),\n-\t\t\tconst0_rtx);\n+      tmp = gen_rtx_REG (CCZmode, FLAGS_REG);\n+      pat = gen_rtx_EQ (QImode, tmp, const0_rtx);\n+      ok_label = gen_label_rtx ();\n+      emit_cmp_and_jump_insns (tmp, const0_rtx, NE, 0, GET_MODE (tmp),\n+\t\t\t       true, ok_label);\n+      predict_jump (REG_BR_PROB_BASE * 90 / 100);\n+\n+      for (i = 0; i < 8; i++)\n+\temit_insn (gen_rtx_SET (xmm_regs[i], const0_rtx));\n+\n+      emit_label (ok_label);\n       emit_insn (gen_rtx_SET (target, pat));\n \n       for (i = 0; i < 8; i++)"}, {"sha": "71111c3206ce51d8ac92632bb8cb3bcc6b2aae9e", "filename": "gcc/testsuite/gcc.target/i386/keylocker-aesdec128kl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aeefa5720a71e622e2f26bf10ec8e7ecbd76f4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesdec128kl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aeefa5720a71e622e2f26bf10ec8e7ecbd76f4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesdec128kl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesdec128kl.c?ref=1aeefa5720a71e622e2f26bf10ec8e7ecbd76f4c", "patch": "@@ -2,8 +2,10 @@\n /* { dg-options \"-mkl -O2\" } */\n /* { dg-final { scan-assembler \"movdqa\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*, %xmm0\" } } */\n /* { dg-final { scan-assembler \"aesdec128kl\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*, %xmm0\" } } */\n+/* { dg-final { scan-assembler \"j\\[ez\\]\" } } */\n /* { dg-final { scan-assembler \"sete\" } } */\n /* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm0,\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm0, %xmm0\" } } */\n \n #include <immintrin.h>\n "}, {"sha": "30189d6ae06190c9f6ec783f8247cb2ee7d76450", "filename": "gcc/testsuite/gcc.target/i386/keylocker-aesdec256kl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aeefa5720a71e622e2f26bf10ec8e7ecbd76f4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesdec256kl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aeefa5720a71e622e2f26bf10ec8e7ecbd76f4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesdec256kl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesdec256kl.c?ref=1aeefa5720a71e622e2f26bf10ec8e7ecbd76f4c", "patch": "@@ -2,8 +2,10 @@\n /* { dg-options \"-mkl -O2\" } */\n /* { dg-final { scan-assembler \"movdqa\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*, %xmm0\" } } */\n /* { dg-final { scan-assembler \"aesdec256kl\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*, %xmm0\" } } */\n+/* { dg-final { scan-assembler \"j\\[ez\\]\" } } */\n /* { dg-final { scan-assembler \"sete\" } } */\n /* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm0,\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm0, %xmm0\" } } */\n \n #include <immintrin.h>\n "}, {"sha": "93806e51508664f75096bf4a58b1c15ad0f2e172", "filename": "gcc/testsuite/gcc.target/i386/keylocker-aesdecwide128kl.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aeefa5720a71e622e2f26bf10ec8e7ecbd76f4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesdecwide128kl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aeefa5720a71e622e2f26bf10ec8e7ecbd76f4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesdecwide128kl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesdecwide128kl.c?ref=1aeefa5720a71e622e2f26bf10ec8e7ecbd76f4c", "patch": "@@ -9,6 +9,7 @@\n /* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*96\\[^\\\\n\\\\r\\]*, %xmm6\" } } */\n /* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*112\\[^\\\\n\\\\r\\]*, %xmm7\" } } */\n /* { dg-final { scan-assembler \"aesdecwide128kl\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"j\\[ez\\]\" } } */\n /* { dg-final { scan-assembler \"sete\" } } */\n /* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm0,\\[^\\\\n\\\\r\\]*\" } } */\n /* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm1,\\[^\\\\n\\\\r\\]*16\\[^\\\\n\\\\r\\]*\" } } */\n@@ -18,6 +19,14 @@\n /* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm5,\\[^\\\\n\\\\r\\]*80\\[^\\\\n\\\\r\\]*\" } } */\n /* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm6,\\[^\\\\n\\\\r\\]*96\\[^\\\\n\\\\r\\]*\" } } */\n /* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm7,\\[^\\\\n\\\\r\\]*112\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm0, %xmm0\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm1, %xmm1\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm2, %xmm2\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm3, %xmm3\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm4, %xmm4\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm5, %xmm5\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm6, %xmm6\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm7, %xmm7\" } } */\n \n #include <immintrin.h>\n "}, {"sha": "f9ccc82c7ca0cef10acabb0fd067d4866d5fb4b4", "filename": "gcc/testsuite/gcc.target/i386/keylocker-aesdecwide256kl.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aeefa5720a71e622e2f26bf10ec8e7ecbd76f4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesdecwide256kl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aeefa5720a71e622e2f26bf10ec8e7ecbd76f4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesdecwide256kl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesdecwide256kl.c?ref=1aeefa5720a71e622e2f26bf10ec8e7ecbd76f4c", "patch": "@@ -9,6 +9,7 @@\n /* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*96\\[^\\\\n\\\\r\\]*, %xmm6\" } } */\n /* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*112\\[^\\\\n\\\\r\\]*, %xmm7\" } } */\n /* { dg-final { scan-assembler \"aesdecwide256kl\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"j\\[ez\\]\" } } */\n /* { dg-final { scan-assembler \"sete\" } } */\n /* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm0,\\[^\\\\n\\\\r\\]*\" } } */\n /* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm1,\\[^\\\\n\\\\r\\]*16\\[^\\\\n\\\\r\\]*\" } } */\n@@ -18,6 +19,14 @@\n /* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm5,\\[^\\\\n\\\\r\\]*80\\[^\\\\n\\\\r\\]*\" } } */\n /* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm6,\\[^\\\\n\\\\r\\]*96\\[^\\\\n\\\\r\\]*\" } } */\n /* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm7,\\[^\\\\n\\\\r\\]*112\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm0, %xmm0\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm1, %xmm1\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm2, %xmm2\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm3, %xmm3\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm4, %xmm4\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm5, %xmm5\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm6, %xmm6\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm7, %xmm7\" } } */\n \n #include <immintrin.h>\n "}, {"sha": "61a9cc279fc7605466a1976af56ab5c9503d9bfc", "filename": "gcc/testsuite/gcc.target/i386/keylocker-aesenc128kl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aeefa5720a71e622e2f26bf10ec8e7ecbd76f4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesenc128kl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aeefa5720a71e622e2f26bf10ec8e7ecbd76f4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesenc128kl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesenc128kl.c?ref=1aeefa5720a71e622e2f26bf10ec8e7ecbd76f4c", "patch": "@@ -2,8 +2,10 @@\n /* { dg-options \"-mkl -O2\" } */\n /* { dg-final { scan-assembler \"movdqa\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*, %xmm0\" } } */\n /* { dg-final { scan-assembler \"aesenc128kl\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*, %xmm0\" } } */\n+/* { dg-final { scan-assembler \"j\\[ez\\]\" } } */\n /* { dg-final { scan-assembler \"sete\" } } */\n /* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm0,\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm0, %xmm0\" } } */\n \n #include <immintrin.h>\n "}, {"sha": "f8e6bb7321f32c0a130147e14327ae8065f0ee7a", "filename": "gcc/testsuite/gcc.target/i386/keylocker-aesenc256kl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aeefa5720a71e622e2f26bf10ec8e7ecbd76f4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesenc256kl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aeefa5720a71e622e2f26bf10ec8e7ecbd76f4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesenc256kl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesenc256kl.c?ref=1aeefa5720a71e622e2f26bf10ec8e7ecbd76f4c", "patch": "@@ -2,8 +2,10 @@\n /* { dg-options \"-mkl -O2\" } */\n /* { dg-final { scan-assembler \"movdqa\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*, %xmm0\" } } */\n /* { dg-final { scan-assembler \"aesenc256kl\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*, %xmm0\" } } */\n+/* { dg-final { scan-assembler \"j\\[ez\\]\" } } */\n /* { dg-final { scan-assembler \"sete\" } } */\n /* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm0,\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm0, %xmm0\" } } */\n \n #include <immintrin.h>\n "}, {"sha": "c0fcd28fb077526cccd603dccca358fd2e34bfbe", "filename": "gcc/testsuite/gcc.target/i386/keylocker-aesencwide128kl.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aeefa5720a71e622e2f26bf10ec8e7ecbd76f4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesencwide128kl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aeefa5720a71e622e2f26bf10ec8e7ecbd76f4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesencwide128kl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesencwide128kl.c?ref=1aeefa5720a71e622e2f26bf10ec8e7ecbd76f4c", "patch": "@@ -9,6 +9,7 @@\n /* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*96\\[^\\\\n\\\\r\\]*, %xmm6\" } } */\n /* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*112\\[^\\\\n\\\\r\\]*, %xmm7\" } } */\n /* { dg-final { scan-assembler \"aesencwide128kl\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"j\\[ez\\]\" } } */\n /* { dg-final { scan-assembler \"sete\" } } */\n /* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm0,\\[^\\\\n\\\\r\\]*\" } } */\n /* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm1,\\[^\\\\n\\\\r\\]*16\\[^\\\\n\\\\r\\]*\" } } */\n@@ -18,6 +19,14 @@\n /* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm5,\\[^\\\\n\\\\r\\]*80\\[^\\\\n\\\\r\\]*\" } } */\n /* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm6,\\[^\\\\n\\\\r\\]*96\\[^\\\\n\\\\r\\]*\" } } */\n /* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm7,\\[^\\\\n\\\\r\\]*112\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm0, %xmm0\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm1, %xmm1\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm2, %xmm2\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm3, %xmm3\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm4, %xmm4\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm5, %xmm5\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm6, %xmm6\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm7, %xmm7\" } } */\n \n #include <immintrin.h>\n "}, {"sha": "31463a8b2da4c811e4b3a3978c8f53dc67afc6e5", "filename": "gcc/testsuite/gcc.target/i386/keylocker-aesencwide256kl.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aeefa5720a71e622e2f26bf10ec8e7ecbd76f4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesencwide256kl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aeefa5720a71e622e2f26bf10ec8e7ecbd76f4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesencwide256kl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesencwide256kl.c?ref=1aeefa5720a71e622e2f26bf10ec8e7ecbd76f4c", "patch": "@@ -9,6 +9,7 @@\n /* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*96\\[^\\\\n\\\\r\\]*, %xmm6\" } } */\n /* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*112\\[^\\\\n\\\\r\\]*, %xmm7\" } } */\n /* { dg-final { scan-assembler \"aesencwide256kl\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"j\\[ez\\]\" } } */\n /* { dg-final { scan-assembler \"sete\" } } */\n /* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm0,\\[^\\\\n\\\\r\\]*\" } } */\n /* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm1,\\[^\\\\n\\\\r\\]*16\\[^\\\\n\\\\r\\]*\" } } */\n@@ -18,6 +19,14 @@\n /* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm5,\\[^\\\\n\\\\r\\]*80\\[^\\\\n\\\\r\\]*\" } } */\n /* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm6,\\[^\\\\n\\\\r\\]*96\\[^\\\\n\\\\r\\]*\" } } */\n /* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm7,\\[^\\\\n\\\\r\\]*112\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm0, %xmm0\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm1, %xmm1\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm2, %xmm2\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm3, %xmm3\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm4, %xmm4\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm5, %xmm5\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm6, %xmm6\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm7, %xmm7\" } } */\n \n #include <immintrin.h>\n "}]}