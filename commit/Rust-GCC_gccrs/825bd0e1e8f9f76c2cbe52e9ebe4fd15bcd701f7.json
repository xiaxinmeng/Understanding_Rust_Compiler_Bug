{"sha": "825bd0e1e8f9f76c2cbe52e9ebe4fd15bcd701f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI1YmQwZTFlOGY5Zjc2YzJjYmU1MmU5ZWJlNGZkMTViY2Q3MDFmNw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2005-01-07T19:34:46Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2005-01-07T19:34:46Z"}, "message": "acinclude.m4: Remove CCODECVT_H.\n\n\n2005-01-07  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* acinclude.m4: Remove CCODECVT_H.\n\t* configure: Regenerate.\n\t* include/Makefile.am (host_headers_extra): Move to...\n\t(ext_headers): ...here.\n\t* include/Makefile.in: Regenerate.\n\t* include/ext/enc_filebuf: Remove enc_filebuf, consolidate\n\tenc_traits to...\n\t* config/locale/ieee_1003.1-2001/codecvt_specializations.h: Move...\n\t* include/ext/codecvt_specializations.h: ...here. Remove\n\t_GLIBCXX_USE___ENC_TRAITS.\n\t(__enc_traits): To __encoding_state, put in __gnu_cxx namespace.\n\t(enc_char_traits): To __encoding_char_traits, put in __gnu_cxx\n\tnamespace.\n\t* config/locale/generic/codecvt_specializations.h: Remove.\n\t* include/bits/codecvt.h: Remove codecvt_specializations.h include.\n\t* src/codecvt.cc: Remove __enc_traits::_S_max_size.\n\nFrom-SVN: r93062", "tree": {"sha": "2a9d2695a75fabe6bf837b6f19e0c7c5e5fa5e9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a9d2695a75fabe6bf837b6f19e0c7c5e5fa5e9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/825bd0e1e8f9f76c2cbe52e9ebe4fd15bcd701f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/825bd0e1e8f9f76c2cbe52e9ebe4fd15bcd701f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/825bd0e1e8f9f76c2cbe52e9ebe4fd15bcd701f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/825bd0e1e8f9f76c2cbe52e9ebe4fd15bcd701f7/comments", "author": null, "committer": null, "parents": [{"sha": "5aa56f9d8f55f8575046ee7c0059c53e0337906b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5aa56f9d8f55f8575046ee7c0059c53e0337906b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5aa56f9d8f55f8575046ee7c0059c53e0337906b"}], "stats": {"total": 447, "additions": 176, "deletions": 271}, "files": [{"sha": "6391ad22ba3555ad4b711e1e78c2a4bb76ba4dfc", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825bd0e1e8f9f76c2cbe52e9ebe4fd15bcd701f7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825bd0e1e8f9f76c2cbe52e9ebe4fd15bcd701f7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=825bd0e1e8f9f76c2cbe52e9ebe4fd15bcd701f7", "patch": "@@ -1,3 +1,22 @@\n+2005-01-07  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* acinclude.m4: Remove CCODECVT_H.\n+\t* configure: Regenerate.\n+\t* include/Makefile.am (host_headers_extra): Move to...\n+\t(ext_headers): ...here.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/ext/enc_filebuf: Remove enc_filebuf, consolidate\n+\tenc_traits to...\n+\t* config/locale/ieee_1003.1-2001/codecvt_specializations.h: Move...\n+\t* include/ext/codecvt_specializations.h: ...here. Remove\n+\t_GLIBCXX_USE___ENC_TRAITS. \n+\t(__enc_traits): To __encoding_state, put in __gnu_cxx namespace.\n+\t(enc_char_traits): To __encoding_char_traits, put in __gnu_cxx\n+\tnamespace.\n+\t* config/locale/generic/codecvt_specializations.h: Remove.\n+\t* include/bits/codecvt.h: Remove codecvt_specializations.h include.\n+\t* src/codecvt.cc: Remove __enc_traits::_S_max_size.\n+\n 2005-01-06  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/bits/fstream.tcc: Remove unnecessary qualifications for"}, {"sha": "16ec53a27ac14a1b557ea601d8f2db57f0875ee3", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825bd0e1e8f9f76c2cbe52e9ebe4fd15bcd701f7/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825bd0e1e8f9f76c2cbe52e9ebe4fd15bcd701f7/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=825bd0e1e8f9f76c2cbe52e9ebe4fd15bcd701f7", "patch": "@@ -1073,7 +1073,6 @@ AC_DEFUN([GLIBCXX_ENABLE_CLOCALE], [\n \n       CLOCALE_H=config/locale/generic/c_locale.h\n       CLOCALE_CC=config/locale/generic/c_locale.cc\n-      CCODECVT_H=config/locale/generic/codecvt_specializations.h\n       CCODECVT_CC=config/locale/generic/codecvt_members.cc\n       CCOLLATE_CC=config/locale/generic/collate_members.cc\n       CCTYPE_CC=config/locale/generic/ctype_members.cc\n@@ -1090,7 +1089,6 @@ AC_DEFUN([GLIBCXX_ENABLE_CLOCALE], [\n \n       CLOCALE_H=config/locale/generic/c_locale.h\n       CLOCALE_CC=config/locale/generic/c_locale.cc\n-      CCODECVT_H=config/locale/generic/codecvt_specializations.h\n       CCODECVT_CC=config/locale/generic/codecvt_members.cc\n       CCOLLATE_CC=config/locale/generic/collate_members.cc\n       CCTYPE_CC=config/locale/darwin/ctype_members.cc\n@@ -1126,7 +1124,6 @@ AC_DEFUN([GLIBCXX_ENABLE_CLOCALE], [\n \n       CLOCALE_H=config/locale/gnu/c_locale.h\n       CLOCALE_CC=config/locale/gnu/c_locale.cc\n-      CCODECVT_H=config/locale/ieee_1003.1-2001/codecvt_specializations.h\n       CCODECVT_CC=config/locale/gnu/codecvt_members.cc\n       CCOLLATE_CC=config/locale/gnu/collate_members.cc\n       CCTYPE_CC=config/locale/gnu/ctype_members.cc\n@@ -1143,7 +1140,6 @@ AC_DEFUN([GLIBCXX_ENABLE_CLOCALE], [\n \n       CLOCALE_H=config/locale/ieee_1003.1-2001/c_locale.h\n       CLOCALE_CC=config/locale/ieee_1003.1-2001/c_locale.cc\n-      CCODECVT_H=config/locale/ieee_1003.1-2001/codecvt_specializations.h\n       CCODECVT_CC=config/locale/generic/codecvt_members.cc\n       CCOLLATE_CC=config/locale/generic/collate_members.cc\n       CCTYPE_CC=config/locale/generic/ctype_members.cc\n@@ -1173,7 +1169,6 @@ AC_DEFUN([GLIBCXX_ENABLE_CLOCALE], [\n \n   AC_SUBST(USE_NLS)\n   AC_SUBST(CLOCALE_H)\n-  AC_SUBST(CCODECVT_H)\n   AC_SUBST(CMESSAGES_H)\n   AC_SUBST(CCODECVT_CC)\n   AC_SUBST(CCOLLATE_CC)"}, {"sha": "24db4c84dc2cabe88f91e5a0c6c39903a1b3131b", "filename": "libstdc++-v3/config/locale/generic/codecvt_specializations.h", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aa56f9d8f55f8575046ee7c0059c53e0337906b/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcodecvt_specializations.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aa56f9d8f55f8575046ee7c0059c53e0337906b/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcodecvt_specializations.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcodecvt_specializations.h?ref=5aa56f9d8f55f8575046ee7c0059c53e0337906b", "patch": "@@ -1,38 +0,0 @@\n-// Locale support (codecvt) -*- C++ -*-\n-\n-// Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 22.2.1.5 Template class codecvt\n-//\n-\n-// Warning: this file is not meant for user inclusion.  Use <locale>.\n-\n-// Written by Benjamin Kosnik <bkoz@cygnus.com>\n-\n-// XXX dummy file"}, {"sha": "490c45c1c497bbf3039e0d0225de40d1c9795f49", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825bd0e1e8f9f76c2cbe52e9ebe4fd15bcd701f7/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825bd0e1e8f9f76c2cbe52e9ebe4fd15bcd701f7/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=825bd0e1e8f9f76c2cbe52e9ebe4fd15bcd701f7", "patch": "@@ -309,7 +309,7 @@ ac_includes_default=\"\\\n # include <unistd.h>\n #endif\"\n \n-ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS libtool_VERSION multi_basedir build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM mkdir_p AWK SET_MAKE am__leading_dot AMTAR am__tar am__untar glibcxx_builddir glibcxx_srcdir toplevel_srcdir CC ac_ct_CC EXEEXT OBJEXT CXX ac_ct_CXX CFLAGS CXXFLAGS LN_S AS ac_ct_AS AR ac_ct_AR RANLIB ac_ct_RANLIB MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT LIBTOOL CXXCPP CPPFLAGS enable_shared enable_static GLIBCXX_HOSTED_TRUE GLIBCXX_HOSTED_FALSE GLIBCXX_BUILD_PCH_TRUE GLIBCXX_BUILD_PCH_FALSE glibcxx_PCHFLAGS CSTDIO_H BASIC_FILE_H BASIC_FILE_CC CPP EGREP check_msgfmt glibcxx_MOFILES glibcxx_POFILES glibcxx_localedir USE_NLS CLOCALE_H CCODECVT_H CMESSAGES_H CCODECVT_CC CCOLLATE_CC CCTYPE_CC CMESSAGES_CC CMONEY_CC CNUMERIC_CC CTIME_H CTIME_CC CLOCALE_CC CLOCALE_INTERNAL_H ALLOCATOR_H ALLOCATOR_NAME C_INCLUDE_DIR GLIBCXX_C_HEADERS_C_TRUE GLIBCXX_C_HEADERS_C_FALSE GLIBCXX_C_HEADERS_C_STD_TRUE GLIBCXX_C_HEADERS_C_STD_FALSE GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE glibcxx_thread_h DEBUG_FLAGS GLIBCXX_BUILD_DEBUG_TRUE GLIBCXX_BUILD_DEBUG_FALSE EXTRA_CXX_FLAGS WERROR SECTION_FLAGS SECTION_LDFLAGS OPT_LDFLAGS LIBMATHOBJS LIBICONV SYMVER_MAP port_specific_symbol_files GLIBCXX_BUILD_VERSIONED_SHLIB_TRUE GLIBCXX_BUILD_VERSIONED_SHLIB_FALSE baseline_dir GLIBCXX_TEST_WCHAR_T_TRUE GLIBCXX_TEST_WCHAR_T_FALSE GLIBCXX_TEST_THREAD_TRUE GLIBCXX_TEST_THREAD_FALSE GLIBCXX_TEST_ABI_TRUE GLIBCXX_TEST_ABI_FALSE ATOMICITY_SRCDIR ATOMIC_WORD_SRCDIR ABI_TWEAKS_SRCDIR OS_INC_SRCDIR glibcxx_prefixdir gxx_include_dir glibcxx_toolexecdir glibcxx_toolexeclibdir GLIBCXX_INCLUDES TOPLEVEL_INCLUDES OPTIMIZE_CXXFLAGS WARN_FLAGS LIBSUPCXX_PICFLAGS LIBOBJS LTLIBOBJS'\n+ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS libtool_VERSION multi_basedir build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM mkdir_p AWK SET_MAKE am__leading_dot AMTAR am__tar am__untar glibcxx_builddir glibcxx_srcdir toplevel_srcdir CC ac_ct_CC EXEEXT OBJEXT CXX ac_ct_CXX CFLAGS CXXFLAGS LN_S AS ac_ct_AS AR ac_ct_AR RANLIB ac_ct_RANLIB MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT LIBTOOL CXXCPP CPPFLAGS enable_shared enable_static GLIBCXX_HOSTED_TRUE GLIBCXX_HOSTED_FALSE GLIBCXX_BUILD_PCH_TRUE GLIBCXX_BUILD_PCH_FALSE glibcxx_PCHFLAGS CSTDIO_H BASIC_FILE_H BASIC_FILE_CC CPP EGREP check_msgfmt glibcxx_MOFILES glibcxx_POFILES glibcxx_localedir USE_NLS CLOCALE_H CMESSAGES_H CCODECVT_CC CCOLLATE_CC CCTYPE_CC CMESSAGES_CC CMONEY_CC CNUMERIC_CC CTIME_H CTIME_CC CLOCALE_CC CLOCALE_INTERNAL_H ALLOCATOR_H ALLOCATOR_NAME C_INCLUDE_DIR GLIBCXX_C_HEADERS_C_TRUE GLIBCXX_C_HEADERS_C_FALSE GLIBCXX_C_HEADERS_C_STD_TRUE GLIBCXX_C_HEADERS_C_STD_FALSE GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE glibcxx_thread_h DEBUG_FLAGS GLIBCXX_BUILD_DEBUG_TRUE GLIBCXX_BUILD_DEBUG_FALSE EXTRA_CXX_FLAGS WERROR SECTION_FLAGS SECTION_LDFLAGS OPT_LDFLAGS LIBMATHOBJS LIBICONV SYMVER_MAP port_specific_symbol_files GLIBCXX_BUILD_VERSIONED_SHLIB_TRUE GLIBCXX_BUILD_VERSIONED_SHLIB_FALSE baseline_dir GLIBCXX_TEST_WCHAR_T_TRUE GLIBCXX_TEST_WCHAR_T_FALSE GLIBCXX_TEST_THREAD_TRUE GLIBCXX_TEST_THREAD_FALSE GLIBCXX_TEST_ABI_TRUE GLIBCXX_TEST_ABI_FALSE ATOMICITY_SRCDIR ATOMIC_WORD_SRCDIR ABI_TWEAKS_SRCDIR OS_INC_SRCDIR glibcxx_prefixdir gxx_include_dir glibcxx_toolexecdir glibcxx_toolexeclibdir GLIBCXX_INCLUDES TOPLEVEL_INCLUDES OPTIMIZE_CXXFLAGS WARN_FLAGS LIBSUPCXX_PICFLAGS LIBOBJS LTLIBOBJS'\n ac_subst_files=''\n \n # Initialize some variables set by options.\n@@ -5811,7 +5811,6 @@ echo \"${ECHO_T}generic\" >&6\n \n       CLOCALE_H=config/locale/generic/c_locale.h\n       CLOCALE_CC=config/locale/generic/c_locale.cc\n-      CCODECVT_H=config/locale/generic/codecvt_specializations.h\n       CCODECVT_CC=config/locale/generic/codecvt_members.cc\n       CCOLLATE_CC=config/locale/generic/collate_members.cc\n       CCTYPE_CC=config/locale/generic/ctype_members.cc\n@@ -5829,7 +5828,6 @@ echo \"${ECHO_T}darwin\" >&6\n \n       CLOCALE_H=config/locale/generic/c_locale.h\n       CLOCALE_CC=config/locale/generic/c_locale.cc\n-      CCODECVT_H=config/locale/generic/codecvt_specializations.h\n       CCODECVT_CC=config/locale/generic/codecvt_members.cc\n       CCOLLATE_CC=config/locale/generic/collate_members.cc\n       CCTYPE_CC=config/locale/darwin/ctype_members.cc\n@@ -5901,7 +5899,6 @@ fi\n \n       CLOCALE_H=config/locale/gnu/c_locale.h\n       CLOCALE_CC=config/locale/gnu/c_locale.cc\n-      CCODECVT_H=config/locale/ieee_1003.1-2001/codecvt_specializations.h\n       CCODECVT_CC=config/locale/gnu/codecvt_members.cc\n       CCOLLATE_CC=config/locale/gnu/collate_members.cc\n       CCTYPE_CC=config/locale/gnu/ctype_members.cc\n@@ -5919,7 +5916,6 @@ echo \"${ECHO_T}IEEE 1003.1\" >&6\n \n       CLOCALE_H=config/locale/ieee_1003.1-2001/c_locale.h\n       CLOCALE_CC=config/locale/ieee_1003.1-2001/c_locale.cc\n-      CCODECVT_H=config/locale/ieee_1003.1-2001/codecvt_specializations.h\n       CCODECVT_CC=config/locale/generic/codecvt_members.cc\n       CCOLLATE_CC=config/locale/generic/collate_members.cc\n       CCTYPE_CC=config/locale/generic/ctype_members.cc\n@@ -6253,7 +6249,6 @@ _ACEOF\n \n \n \n-\n   echo \"$as_me:$LINENO: checking for std::allocator base class to use\" >&5\n echo $ECHO_N \"checking for std::allocator base class to use... $ECHO_C\" >&6\n    # Check whether --enable-libstdcxx-allocator or --disable-libstdcxx-allocator was given.\n@@ -98509,7 +98504,6 @@ s,@glibcxx_POFILES@,$glibcxx_POFILES,;t t\n s,@glibcxx_localedir@,$glibcxx_localedir,;t t\n s,@USE_NLS@,$USE_NLS,;t t\n s,@CLOCALE_H@,$CLOCALE_H,;t t\n-s,@CCODECVT_H@,$CCODECVT_H,;t t\n s,@CMESSAGES_H@,$CMESSAGES_H,;t t\n s,@CCODECVT_CC@,$CCODECVT_CC,;t t\n s,@CCOLLATE_CC@,$CCOLLATE_CC,;t t"}, {"sha": "be8320a999080930f172e664043df1bab6c5cf26", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825bd0e1e8f9f76c2cbe52e9ebe4fd15bcd701f7/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825bd0e1e8f9f76c2cbe52e9ebe4fd15bcd701f7/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=825bd0e1e8f9f76c2cbe52e9ebe4fd15bcd701f7", "patch": "@@ -203,8 +203,8 @@ ext_headers = \\\n \t${ext_srcdir}/algorithm \\\n \t${ext_srcdir}/array_allocator.h \\\n \t${ext_srcdir}/bitmap_allocator.h \\\n+\t${ext_srcdir}/codecvt_specializations.h \\\n \t${ext_srcdir}/debug_allocator.h \\\n-\t${ext_srcdir}/enc_filebuf.h \\\n \t${ext_srcdir}/stdio_filebuf.h \\\n \t${ext_srcdir}/stdio_sync_filebuf.h \\\n \t${ext_srcdir}/functional \\\n@@ -366,8 +366,7 @@ host_headers_extra = \\\n \t${host_builddir}/c++io.h \\\n \t${host_builddir}/c++locale.h \\\n \t${host_builddir}/messages_members.h \\\n-\t${host_builddir}/time_members.h \\\n-\t${host_builddir}/codecvt_specializations.h\n+\t${host_builddir}/time_members.h \n \n thread_host_headers = \\\n \t${host_builddir}/gthr.h \\"}, {"sha": "6bdf5010ec37eade7bfa62abd6d76235ad9506f2", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825bd0e1e8f9f76c2cbe52e9ebe4fd15bcd701f7/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825bd0e1e8f9f76c2cbe52e9ebe4fd15bcd701f7/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=825bd0e1e8f9f76c2cbe52e9ebe4fd15bcd701f7", "patch": "@@ -71,7 +71,6 @@ BASIC_FILE_CC = @BASIC_FILE_CC@\n BASIC_FILE_H = @BASIC_FILE_H@\n CC = @CC@\n CCODECVT_CC = @CCODECVT_CC@\n-CCODECVT_H = @CCODECVT_H@\n CCOLLATE_CC = @CCOLLATE_CC@\n CCTYPE_CC = @CCTYPE_CC@\n CFLAGS = @CFLAGS@\n@@ -420,8 +419,8 @@ ext_headers = \\\n \t${ext_srcdir}/algorithm \\\n \t${ext_srcdir}/array_allocator.h \\\n \t${ext_srcdir}/bitmap_allocator.h \\\n+\t${ext_srcdir}/codecvt_specializations.h \\\n \t${ext_srcdir}/debug_allocator.h \\\n-\t${ext_srcdir}/enc_filebuf.h \\\n \t${ext_srcdir}/stdio_filebuf.h \\\n \t${ext_srcdir}/stdio_sync_filebuf.h \\\n \t${ext_srcdir}/functional \\\n@@ -581,8 +580,7 @@ host_headers_extra = \\\n \t${host_builddir}/c++io.h \\\n \t${host_builddir}/c++locale.h \\\n \t${host_builddir}/messages_members.h \\\n-\t${host_builddir}/time_members.h \\\n-\t${host_builddir}/codecvt_specializations.h\n+\t${host_builddir}/time_members.h \n \n thread_host_headers = \\\n \t${host_builddir}/gthr.h \\"}, {"sha": "cd9146ff16076f2b7fbbe05e81f1f5a790f32f4b", "filename": "libstdc++-v3/include/bits/codecvt.h", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825bd0e1e8f9f76c2cbe52e9ebe4fd15bcd701f7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825bd0e1e8f9f76c2cbe52e9ebe4fd15bcd701f7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h?ref=825bd0e1e8f9f76c2cbe52e9ebe4fd15bcd701f7", "patch": "@@ -1,6 +1,7 @@\n // Locale support (codecvt) -*- C++ -*-\n \n-// Copyright (C) 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005\n+//  Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -31,7 +32,7 @@\n // ISO C++ 14882: 22.2.1.5 Template class codecvt\n //\n \n-// Written by Benjamin Kosnik <bkoz@cygnus.com>\n+// Written by Benjamin Kosnik <bkoz@redhat.com>\n \n /** @file bits/codecvt.h\n  *  This is an internal header file, included by other library headers.\n@@ -466,10 +467,4 @@\n       ~codecvt_byname() { }\n     };\n \n-  // Include host and configuration specific partial specializations\n-  // with additional functionality, if possible.\n-#ifdef _GLIBCXX_USE_WCHAR_T\n-  #include <bits/codecvt_specializations.h>\n-#endif\n-\n #endif // _CODECVT_H"}, {"sha": "af343a169e3ba99ffb72982946ef503481e3c40d", "filename": "libstdc++-v3/include/ext/codecvt_specializations.h", "status": "renamed", "additions": 147, "deletions": 125, "changes": 272, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825bd0e1e8f9f76c2cbe52e9ebe4fd15bcd701f7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fcodecvt_specializations.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825bd0e1e8f9f76c2cbe52e9ebe4fd15bcd701f7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fcodecvt_specializations.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fcodecvt_specializations.h?ref=825bd0e1e8f9f76c2cbe52e9ebe4fd15bcd701f7", "patch": "@@ -1,6 +1,7 @@\n // Locale support (codecvt) -*- C++ -*-\n \n-// Copyright (C) 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005\n+//  Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -31,67 +32,66 @@\n // ISO C++ 14882: 22.2.1.5 Template class codecvt\n //\n \n-// Warning: this file is not meant for user inclusion.  Use <locale>.\n-\n-// Written by Benjamin Kosnik <bkoz@cygnus.com>\n+// Written by Benjamin Kosnik <bkoz@redhat.com>\n \n /** @file bits/codecvt_specializations.h\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  This file is a GNU extension to the Standard C++ Library.\n  */\n \n   // XXX\n   // Define this here so codecvt.cc can have _S_max_size definition.\n-#define _GLIBCXX_USE___ENC_TRAITS 1\n+#define _GLIBCXX_USE_ENCODING_STATE 1\n \n+namespace __gnu_cxx\n+{\n   /// @brief  Extension to use icov for dealing with character encodings.\n   // This includes conversions and comparisons between various character\n   // sets.  This object encapsulates data that may need to be shared between\n   // char_traits, codecvt and ctype.\n-  class __enc_traits\n+  class encoding_state\n   {\n   public:\n     // Types: \n     // NB: A conversion descriptor subsumes and enhances the\n     // functionality of a simple state type such as mbstate_t.\n-    typedef iconv_t\t__desc_type;\n+    typedef iconv_t\tdescriptor_type;\n     \n   protected:\n-    // Data Members:\n-    // Max size of charset encoding name\n-    static const int \t_S_max_size = 32;\n     // Name of internal character set encoding.\n-    char\t       \t_M_int_enc[_S_max_size];\n+    std::string\t       \t_M_int_enc;\n+\n     // Name of external character set encoding.\n-    char  \t       \t_M_ext_enc[_S_max_size];\n+    std::string  \t_M_ext_enc;\n \n     // Conversion descriptor between external encoding to internal encoding.\n-    __desc_type\t\t_M_in_desc;\n+    descriptor_type\t_M_in_desc;\n+\n     // Conversion descriptor between internal encoding to external encoding.\n-    __desc_type\t\t_M_out_desc;\n+    descriptor_type\t_M_out_desc;\n \n-    // Details the byte-order marker for the external encoding, if necessary.\n+    // The byte-order marker for the external encoding, if necessary.\n     int\t\t\t_M_ext_bom;\n \n-    // Details the byte-order marker for the internal encoding, if necessary.\n+    // The byte-order marker for the internal encoding, if necessary.\n     int\t\t\t_M_int_bom;\n \n-  public:\n-    explicit __enc_traits() \n-    : _M_in_desc(0), _M_out_desc(0), _M_ext_bom(0), _M_int_bom(0) \n-    {\n-      memset(_M_int_enc, 0, _S_max_size);\n-      memset(_M_ext_enc, 0, _S_max_size);\n-    }\n+    // Number of external bytes needed to construct one complete\n+    // character in the internal encoding.\n+    // NB: -1 indicates variable, or stateful, encodings.\n+    int \t\t_M_bytes;\n \n-    explicit __enc_traits(const char* __int, const char* __ext, \n-\t\t\t  int __ibom = 0, int __ebom = 0)\n-    : _M_in_desc(0), _M_out_desc(0), _M_ext_bom(__ebom), _M_int_bom(__ibom)\n-    {\n-      strncpy(_M_int_enc, __int, _S_max_size);\n-      strncpy(_M_ext_enc, __ext, _S_max_size);\n-      _M_init();\n-    }\n+  public:\n+    explicit \n+    encoding_state() \n+    : _M_in_desc(0), _M_out_desc(0), _M_ext_bom(0), _M_int_bom(0), _M_bytes(0)\n+    { }\n+\n+    explicit \n+    encoding_state(const char* __int, const char* __ext, \n+\t\t   int __ibom = 0, int __ebom = 0, int __bytes = 1)\n+    : _M_int_enc(__int), _M_ext_enc(__ext), _M_in_desc(0), _M_out_desc(0), \n+      _M_ext_bom(__ebom), _M_int_bom(__ibom), _M_bytes(__bytes)\n+    { init(); }\n \n     // 21.1.2 traits typedefs\n     // p4\n@@ -101,56 +101,95 @@\n     // NB: This does not preseve the actual state of the conversion\n     // descriptor member, but it does duplicate the encoding\n     // information.\n-    __enc_traits(const __enc_traits& __obj): _M_in_desc(0), _M_out_desc(0)\n-    {\n-      strncpy(_M_int_enc, __obj._M_int_enc, _S_max_size);\n-      strncpy(_M_ext_enc, __obj._M_ext_enc, _S_max_size);\n-      _M_ext_bom = __obj._M_ext_bom;\n-      _M_int_bom = __obj._M_int_bom;\n-      _M_destroy();\n-      _M_init();\n-    }\n+    encoding_state(const encoding_state& __obj) : _M_in_desc(0), _M_out_desc(0)\n+    { construct(__obj); }\n \n     // Need assignment operator as well.\n-    __enc_traits&\n-    operator=(const __enc_traits& __obj)\n+    encoding_state&\n+    operator=(const encoding_state& __obj)\n     {\n-      strncpy(_M_int_enc, __obj._M_int_enc, _S_max_size);\n-      strncpy(_M_ext_enc, __obj._M_ext_enc, _S_max_size);\n-      _M_ext_bom = __obj._M_ext_bom;\n-      _M_int_bom = __obj._M_int_bom;\n-      _M_destroy();\n-      _M_init();\n+      construct(__obj);\n       return *this;\n     }\n \n-    ~__enc_traits()\n-    { _M_destroy(); } \n+    ~encoding_state()\n+    { destroy(); } \n \n+    bool\n+    good() const throw()\n+    { \n+      const descriptor_type __err = reinterpret_cast<iconv_t>(-1);\n+      bool __test = _M_in_desc && _M_in_desc != __err; \n+      __test &=  _M_out_desc && _M_out_desc != __err;\n+      return __test;\n+    }\n+    \n+    int\n+    character_ratio() const\n+    { return _M_bytes; }\n+\n+    const std::string\n+    internal_encoding() const\n+    { return _M_int_enc; }\n+\n+    int \n+    internal_bom() const\n+    { return _M_int_bom; }\n+\n+    const std::string\n+    external_encoding() const\n+    { return _M_ext_enc; }\n+\n+    int \n+    external_bom() const\n+    { return _M_ext_bom; }\n+\n+    const descriptor_type&\n+    in_descriptor() const\n+    { return _M_in_desc; }\n+\n+    const descriptor_type&\n+    out_descriptor() const\n+    { return _M_out_desc; }\n+\n+  protected:\n     void\n-    _M_init()\n+    init()\n     {\n-      const __desc_type __err = reinterpret_cast<iconv_t>(-1);\n-      if (!_M_in_desc)\n+      const descriptor_type __err = reinterpret_cast<iconv_t>(-1);\n+      const bool __have_encodings = _M_int_enc.size() && _M_ext_enc.size();\n+      if (!_M_in_desc && __have_encodings)\n \t{\n-\t  _M_in_desc = iconv_open(_M_int_enc, _M_ext_enc);\n+\t  _M_in_desc = iconv_open(_M_int_enc.c_str(), _M_ext_enc.c_str());\n \t  if (_M_in_desc == __err)\n-\t    __throw_runtime_error(__N(\"__enc_traits::_M_init \"\n-\t\t\t\t  \"creating iconv input descriptor failed\"));\n+\t    std::__throw_runtime_error(__N(\"encoding_state::_M_init \"\n+\t\t\t\t    \"creating iconv input descriptor failed\"));\n \t}\n-      if (!_M_out_desc)\n+      if (!_M_out_desc && __have_encodings)\n \t{\n-\t  _M_out_desc = iconv_open(_M_ext_enc, _M_int_enc);\n+\t  _M_out_desc = iconv_open(_M_ext_enc.c_str(), _M_int_enc.c_str());\n \t  if (_M_out_desc == __err)\n-\t    __throw_runtime_error(__N(\"__enc_traits::_M_init \"\n+\t    std::__throw_runtime_error(__N(\"encoding_state::_M_init \"\n \t\t\t\t  \"creating iconv output descriptor failed\"));\n \t}\n     }\n \n     void\n-    _M_destroy()\n+    construct(const encoding_state& __obj)\n     {\n-      const __desc_type __err = reinterpret_cast<iconv_t>(-1);\n+      destroy();\n+      _M_int_enc = __obj._M_int_enc;\n+      _M_ext_enc = __obj._M_ext_enc;\n+      _M_ext_bom = __obj._M_ext_bom;\n+      _M_int_bom = __obj._M_int_bom;\n+      _M_bytes = __obj._M_bytes;\n+      init();\n+    }\n+\n+    void\n+    destroy() throw()\n+    {\n+      const descriptor_type __err = reinterpret_cast<iconv_t>(-1);\n       if (_M_in_desc && _M_in_desc != __err) \n \t{\n \t  iconv_close(_M_in_desc);\n@@ -162,56 +201,38 @@\n \t  _M_out_desc = 0;\n \t}\n     }\n+  };\n \n-    bool\n-    _M_good()\n-    { \n-      const __desc_type __err = reinterpret_cast<iconv_t>(-1);\n-      bool __test = _M_in_desc && _M_in_desc != __err; \n-      __test &=  _M_out_desc && _M_out_desc != __err;\n-      return __test;\n-    }\n-\n-    const __desc_type* \n-    _M_get_in_descriptor()\n-    { return &_M_in_desc; }\n-\n-    const __desc_type* \n-    _M_get_out_descriptor()\n-    { return &_M_out_desc; }\n-\n-    int \n-    _M_get_external_bom()\n-    { return _M_ext_bom; }\n-\n-    int \n-    _M_get_internal_bom()\n-    { return _M_int_bom; }\n-\n-    const char* \n-    _M_get_internal_enc()\n-    { return _M_int_enc; }\n+  /// @brief  encoding_char_traits.\n+  // Custom traits type with encoding_state for the state type, and the\n+  // associated fpos<encoding_state> for the position type, all other\n+  // bits equivalent to the required char_traits instantiations.\n+  template<typename _CharT>\n+    struct encoding_char_traits : public std::char_traits<_CharT>\n+    {\n+      typedef encoding_state\t\t\t\tstate_type;\n+      typedef typename std::fpos<state_type>\t\tpos_type;\n+    };\n+} // namespace __gnu_cxx\n \n-    const char* \n-    _M_get_external_enc()\n-    { return _M_ext_enc; }    \n-  };\n+namespace std\n+{\n+  using __gnu_cxx::encoding_state;\n \n-  /// @brief  class codecvt<InternT, _ExternT, __enc_traits> specialization.\n+  /// @brief  codecvt<InternT, _ExternT, encoding_state> specialization.\n   // This partial specialization takes advantage of iconv to provide\n   // code conversions between a large number of character encodings.\n   template<typename _InternT, typename _ExternT>\n-    class codecvt<_InternT, _ExternT, __enc_traits>\n-    : public __codecvt_abstract_base<_InternT, _ExternT, __enc_traits>\n+    class codecvt<_InternT, _ExternT, encoding_state>\n+    : public __codecvt_abstract_base<_InternT, _ExternT, encoding_state>\n     {\n     public:      \n       // Types:\n       typedef codecvt_base::result\t\t\tresult;\n       typedef _InternT \t\t\t\t\tintern_type;\n       typedef _ExternT \t\t\t\t\textern_type;\n-      typedef __enc_traits \t\t\t\tstate_type;\n-      typedef __enc_traits::__desc_type \t\t__desc_type;\n-      typedef __enc_traits\t\t\t\t__enc_type;\n+      typedef __gnu_cxx::encoding_state \t\tstate_type;\n+      typedef state_type::descriptor_type \t\tdescriptor_type;\n \n       // Data Members:\n       static locale::id \t\tid;\n@@ -222,11 +243,11 @@\n       { }\n \n       explicit \n-      codecvt(__enc_type* __enc, size_t __refs = 0)\n+      codecvt(state_type& __enc, size_t __refs = 0)\n       : __codecvt_abstract_base<intern_type, extern_type, state_type>(__refs)\n       { }\n \n-    protected:\n+     protected:\n       virtual \n       ~codecvt() { }\n \n@@ -262,7 +283,7 @@\n \n   template<typename _InternT, typename _ExternT>\n     locale::id \n-    codecvt<_InternT, _ExternT, __enc_traits>::id;\n+    codecvt<_InternT, _ExternT, encoding_state>::id;\n \n   // This adaptor works around the signature problems of the second\n   // argument to iconv():  SUSv2 and others use 'const char**', but glibc 2.2\n@@ -277,16 +298,16 @@\n \n   template<typename _InternT, typename _ExternT>\n     codecvt_base::result\n-    codecvt<_InternT, _ExternT, __enc_traits>::\n+    codecvt<_InternT, _ExternT, encoding_state>::\n     do_out(state_type& __state, const intern_type* __from, \n \t   const intern_type* __from_end, const intern_type*& __from_next,\n \t   extern_type* __to, extern_type* __to_end,\n \t   extern_type*& __to_next) const\n     {\n       result __ret = codecvt_base::error;\n-      if (__state._M_good())\n+      if (__state.good())\n \t{\n-\t  const __desc_type* __desc = __state._M_get_out_descriptor();\n+\t  const descriptor_type& __desc = __state.out_descriptor();\n \t  const size_t __fmultiple = sizeof(intern_type);\n \t  size_t __fbytes = __fmultiple * (__from_end - __from);\n \t  const size_t __tmultiple = sizeof(extern_type);\n@@ -303,7 +324,7 @@\n \t  // value for the byte order marker is NULL, so if this is\n \t  // the case, it's not necessary and we can just go on our\n \t  // merry way.\n-\t  int __int_bom = __state._M_get_internal_bom();\n+\t  int __int_bom = __state.internal_bom();\n \t  if (__int_bom)\n \t    {\t  \n \t      size_t __size = __from_end - __from;\n@@ -312,14 +333,14 @@\n \t      __cfixed[0] = static_cast<intern_type>(__int_bom);\n \t      char_traits<intern_type>::copy(__cfixed + 1, __from, __size);\n \t      __cfrom = reinterpret_cast<char*>(__cfixed);\n-\t      __conv = __iconv_adaptor(iconv, *__desc, &__cfrom,\n+\t      __conv = __iconv_adaptor(iconv, __desc, &__cfrom,\n                                         &__fbytes, &__cto, &__tbytes); \n \t    }\n \t  else\n \t    {\n \t      intern_type* __cfixed = const_cast<intern_type*>(__from);\n \t      __cfrom = reinterpret_cast<char*>(__cfixed);\n-\t      __conv = __iconv_adaptor(iconv, *__desc, &__cfrom, &__fbytes, \n+\t      __conv = __iconv_adaptor(iconv, __desc, &__cfrom, &__fbytes, \n \t\t\t\t       &__cto, &__tbytes); \n \t    }\n \n@@ -346,21 +367,21 @@\n \n   template<typename _InternT, typename _ExternT>\n     codecvt_base::result\n-    codecvt<_InternT, _ExternT, __enc_traits>::\n+    codecvt<_InternT, _ExternT, encoding_state>::\n     do_unshift(state_type& __state, extern_type* __to, \n \t       extern_type* __to_end, extern_type*& __to_next) const\n     {\n       result __ret = codecvt_base::error;\n-      if (__state._M_good())\n+      if (__state.good())\n \t{\n-\t  const __desc_type* __desc = __state._M_get_in_descriptor();\n+\t  const descriptor_type& __desc = __state.in_descriptor();\n \t  const size_t __tmultiple = sizeof(intern_type);\n \t  size_t __tlen = __tmultiple * (__to_end - __to); \n \t  \n \t  // Argument list for iconv specifies a byte sequence. Thus,\n \t  // all to/from arrays must be brutally casted to char*.\n \t  char* __cto = reinterpret_cast<char*>(__to);\n-\t  size_t __conv = __iconv_adaptor(iconv,*__desc, NULL, NULL,\n+\t  size_t __conv = __iconv_adaptor(iconv,__desc, NULL, NULL,\n                                           &__cto, &__tlen); \n \t  \n \t  if (__conv != size_t(-1))\n@@ -381,16 +402,16 @@\n    \n   template<typename _InternT, typename _ExternT>\n     codecvt_base::result\n-    codecvt<_InternT, _ExternT, __enc_traits>::\n+    codecvt<_InternT, _ExternT, encoding_state>::\n     do_in(state_type& __state, const extern_type* __from, \n \t  const extern_type* __from_end, const extern_type*& __from_next,\n \t  intern_type* __to, intern_type* __to_end, \n \t  intern_type*& __to_next) const\n     { \n       result __ret = codecvt_base::error;\n-      if (__state._M_good())\n+      if (__state.good())\n \t{\n-\t  const __desc_type* __desc = __state._M_get_in_descriptor();\n+\t  const descriptor_type& __desc = __state.in_descriptor();\n \t  const size_t __fmultiple = sizeof(extern_type);\n \t  size_t __flen = __fmultiple * (__from_end - __from);\n \t  const size_t __tmultiple = sizeof(intern_type);\n@@ -407,7 +428,7 @@\n \t  // value for the byte order marker is NULL, so if this is\n \t  // the case, it's not necessary and we can just go on our\n \t  // merry way.\n-\t  int __ext_bom = __state._M_get_external_bom();\n+\t  int __ext_bom = __state.external_bom();\n \t  if (__ext_bom)\n \t    {\t  \n \t      size_t __size = __from_end - __from;\n@@ -416,14 +437,14 @@\n \t      __cfixed[0] = static_cast<extern_type>(__ext_bom);\n \t      char_traits<extern_type>::copy(__cfixed + 1, __from, __size);\n \t      __cfrom = reinterpret_cast<char*>(__cfixed);\n-\t      __conv = __iconv_adaptor(iconv, *__desc, &__cfrom,\n+\t      __conv = __iconv_adaptor(iconv, __desc, &__cfrom,\n                                        &__flen, &__cto, &__tlen); \n \t    }\n \t  else\n \t    {\n \t      extern_type* __cfixed = const_cast<extern_type*>(__from);\n \t      __cfrom = reinterpret_cast<char*>(__cfixed);\n-\t      __conv = __iconv_adaptor(iconv, *__desc, &__cfrom,\n+\t      __conv = __iconv_adaptor(iconv, __desc, &__cfrom,\n                                        &__flen, &__cto, &__tlen); \n \t    }\n \n@@ -451,24 +472,24 @@\n   \n   template<typename _InternT, typename _ExternT>\n     int \n-    codecvt<_InternT, _ExternT, __enc_traits>::\n+    codecvt<_InternT, _ExternT, encoding_state>::\n     do_encoding() const throw()\n     {\n       int __ret = 0;\n       if (sizeof(_ExternT) <= sizeof(_InternT))\n-\t__ret = sizeof(_InternT)/sizeof(_ExternT);\n+\t__ret = sizeof(_InternT) / sizeof(_ExternT);\n       return __ret; \n     }\n   \n   template<typename _InternT, typename _ExternT>\n     bool \n-    codecvt<_InternT, _ExternT, __enc_traits>::\n+    codecvt<_InternT, _ExternT, encoding_state>::\n     do_always_noconv() const throw()\n     { return false; }\n   \n   template<typename _InternT, typename _ExternT>\n     int \n-    codecvt<_InternT, _ExternT, __enc_traits>::\n+    codecvt<_InternT, _ExternT, encoding_state>::\n     do_length(state_type&, const extern_type* __from, \n \t      const extern_type* __end, size_t __max) const\n     { return std::min(__max, static_cast<size_t>(__end - __from)); }\n@@ -477,7 +498,8 @@\n   // 74.  Garbled text for codecvt::do_max_length\n   template<typename _InternT, typename _ExternT>\n     int \n-    codecvt<_InternT, _ExternT, __enc_traits>::\n+    codecvt<_InternT, _ExternT, encoding_state>::\n     do_max_length() const throw()\n     { return 1; }\n+} // namespace std\n ", "previous_filename": "libstdc++-v3/config/locale/ieee_1003.1-2001/codecvt_specializations.h"}, {"sha": "c4df9337afce5167e7047bfbfbf0dea8621365bb", "filename": "libstdc++-v3/include/ext/enc_filebuf.h", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aa56f9d8f55f8575046ee7c0059c53e0337906b/libstdc%2B%2B-v3%2Finclude%2Fext%2Fenc_filebuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aa56f9d8f55f8575046ee7c0059c53e0337906b/libstdc%2B%2B-v3%2Finclude%2Fext%2Fenc_filebuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fenc_filebuf.h?ref=5aa56f9d8f55f8575046ee7c0059c53e0337906b", "patch": "@@ -1,74 +0,0 @@\n-// filebuf with __enc_traits state type -*- C++ -*-\n-\n-// Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-/** @file ext/enc_filebuf.h\n- *  This file is a GNU extension to the Standard C++ Library.\n- */\n-\n-#include <fstream>\n-#include <locale>\n-\n-namespace __gnu_cxx\n-{\n-  // Custom traits type with __enc_traits for the state type, and the\n-  // associated fpos<__enc_traits> for the position type, all other\n-  // bits equivalent to the required char_traits instantiations.\n-  /// @brief  class enc_char_traits.\n-  template<typename _CharT>\n-    struct enc_char_traits: public std::char_traits<_CharT>\n-    {\n-      typedef std::__enc_traits\t\t\tstate_type;\n-      typedef typename std::fpos<state_type>\tpos_type;\n-    };\n-\n-  /// @brief  class enc_filebuf.\n-  template<typename _CharT>\n-    class enc_filebuf\n-    : public std::basic_filebuf<_CharT, enc_char_traits<_CharT> >\n-    {\n-    public:\n-      typedef enc_char_traits<_CharT>\t\ttraits_type;\n-      typedef typename traits_type::state_type\tstate_type;\n-      typedef typename traits_type::pos_type\tpos_type;\n-\n-      enc_filebuf(state_type& __state)\n-      : std::basic_filebuf<_CharT, enc_char_traits<_CharT> >()\n-      {\n-\tthis->_M_state_beg = __state;\n-\tthis->_M_state_beg._M_init();\n-      }\n-\n-    private:\n-      // concept requirements:\n-      // Set state type to something useful.\n-      // Something more than copyconstructible is needed here, so\n-      // require default and copy constructible + assignment operator.\n-      __glibcxx_class_requires(state_type, _SGIAssignableConcept)\n-    };\n-} // namespace __gnu_cxx"}, {"sha": "7634225c7f5996a9804aa406a8416f4424aec057", "filename": "libstdc++-v3/src/codecvt.cc", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825bd0e1e8f9f76c2cbe52e9ebe4fd15bcd701f7/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825bd0e1e8f9f76c2cbe52e9ebe4fd15bcd701f7/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc?ref=825bd0e1e8f9f76c2cbe52e9ebe4fd15bcd701f7", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2000, 2002, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2002, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,7 +25,7 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-// Written by Benjamin Kosnik <bkoz@cygnus.com>\n+// Written by Benjamin Kosnik <bkoz@redhat.com>\n \n #include <locale>\n \n@@ -38,11 +38,6 @@ namespace std\n   locale::id codecvt<wchar_t, char, mbstate_t>::id;\n #endif\n \n-#ifdef _GLIBCXX_USE___ENC_TRAITS\n-  // Definitions for static const data members of __enc_traits.\n-  const int __enc_traits::_S_max_size;\n-#endif \n-\n   codecvt<char, char, mbstate_t>::\n   codecvt(size_t __refs)\n   : __codecvt_abstract_base<char, char, mbstate_t>(__refs),"}]}