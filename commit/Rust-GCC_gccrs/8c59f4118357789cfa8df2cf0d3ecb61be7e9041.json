{"sha": "8c59f4118357789cfa8df2cf0d3ecb61be7e9041", "node_id": "C_kwDOANBUbNoAKDhjNTlmNDExODM1Nzc4OWNmYThkZjJjZjBkM2VjYjYxYmU3ZTkwNDE", "commit": {"author": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2021-10-26T18:03:42Z"}, "committer": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2021-10-26T19:17:29Z"}, "message": "[PR102842] Consider all outputs in generation of matching reloads\n\nWithout considering all output insn operands (not only processed\nbefore), in rare cases LRA can use the same hard register for\ndifferent outputs of the insn on different assignment subpasses.  The\npatch fixes the problem.\n\ngcc/ChangeLog:\n\n\tPR rtl-optimization/102842\n\t* lra-constraints.c (match_reload): Ignore out in checking values\n\tof outs.\n\t(curr_insn_transform): Collect outputs before doing reloads of operands.\n\ngcc/testsuite/ChangeLog:\n\n\tPR rtl-optimization/102842\n\t* g++.target/arm/pr102842.C: New test.", "tree": {"sha": "c88f788cc7906fb84cbb1da9308d5e12cae80857", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c88f788cc7906fb84cbb1da9308d5e12cae80857"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c59f4118357789cfa8df2cf0d3ecb61be7e9041", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c59f4118357789cfa8df2cf0d3ecb61be7e9041", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c59f4118357789cfa8df2cf0d3ecb61be7e9041", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c59f4118357789cfa8df2cf0d3ecb61be7e9041/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfcb27cfcb1d32b8cf7bc463cc1fc5cacae8d199", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfcb27cfcb1d32b8cf7bc463cc1fc5cacae8d199", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfcb27cfcb1d32b8cf7bc463cc1fc5cacae8d199"}], "stats": {"total": 47, "additions": 35, "deletions": 12}, "files": [{"sha": "0195b4fb9c3b4c648eddfbe9aef42754425a3809", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c59f4118357789cfa8df2cf0d3ecb61be7e9041/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c59f4118357789cfa8df2cf0d3ecb61be7e9041/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=8c59f4118357789cfa8df2cf0d3ecb61be7e9041", "patch": "@@ -1102,7 +1102,7 @@ match_reload (signed char out, signed char *ins, signed char *outs,\n \t  for (i = 0; outs[i] >= 0; i++)\n \t    {\n \t      rtx other_out_rtx = *curr_id->operand_loc[outs[i]];\n-\t      if (REG_P (other_out_rtx)\n+\t      if (outs[i] != out && REG_P (other_out_rtx)\n \t\t  && (regno_val_use_in (REGNO (in_rtx), other_out_rtx)\n \t\t      != NULL_RTX))\n \t\t{\n@@ -4382,7 +4382,10 @@ curr_insn_transform (bool check_only_p)\n       }\n \n   n_outputs = 0;\n-  outputs[0] = -1;\n+  for (i = 0; i < n_operands; i++)\n+    if (curr_static_id->operand[i].type == OP_OUT)\n+      outputs[n_outputs++] = i;\n+  outputs[n_outputs] = -1;\n   for (i = 0; i < n_operands; i++)\n     {\n       int regno;\n@@ -4457,8 +4460,6 @@ curr_insn_transform (bool check_only_p)\n \t\t     lra-lives.c.  */\n \t\t  match_reload (i, goal_alt_matched[i], outputs, goal_alt[i], &before,\n \t\t\t\t&after, TRUE);\n-\t\t  outputs[n_outputs++] = i;\n-\t\t  outputs[n_outputs] = -1;\n \t\t}\n \t      continue;\n \t    }\n@@ -4636,14 +4637,6 @@ curr_insn_transform (bool check_only_p)\n \t   process_alt_operands decides that it is possible.  */\n \tgcc_unreachable ();\n \n-      /* Memorise processed outputs so that output remaining to be processed\n-\t can avoid using the same register value (see match_reload).  */\n-      if (curr_static_id->operand[i].type == OP_OUT)\n-\t{\n-\t  outputs[n_outputs++] = i;\n-\t  outputs[n_outputs] = -1;\n-\t}\n-\n       if (optional_p)\n \t{\n \t  rtx reg = op;"}, {"sha": "a2bac66091a1dcfbf83943c7e2c8057d824d45c8", "filename": "gcc/testsuite/g++.target/arm/pr102842.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c59f4118357789cfa8df2cf0d3ecb61be7e9041/gcc%2Ftestsuite%2Fg%2B%2B.target%2Farm%2Fpr102842.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c59f4118357789cfa8df2cf0d3ecb61be7e9041/gcc%2Ftestsuite%2Fg%2B%2B.target%2Farm%2Fpr102842.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Farm%2Fpr102842.C?ref=8c59f4118357789cfa8df2cf0d3ecb61be7e9041", "patch": "@@ -0,0 +1,30 @@\n+/* PR rtl-optimization/102842 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fPIC  -O2 -fno-omit-frame-pointer -mthumb -march=armv7-a+fp\" } */\n+\n+struct Plane {\n+  using T = float;\n+  T *Row();\n+};\n+using ImageF = Plane;\n+long long Mirror_x;\n+struct EnsurePaddingInPlaceRowByRow {\n+  void Process() {\n+    switch (strategy_) {\n+    case kSlow:\n+      float *row = img_.Row();\n+      long long xsize = x1_;\n+      while (Mirror_x >= xsize)\n+        if (Mirror_x)\n+          Mirror_x = 2 * xsize - 1;\n+      *row = Mirror_x;\n+    }\n+  }\n+  ImageF img_;\n+  unsigned x1_;\n+  enum { kSlow } strategy_;\n+};\n+void FinalizeImageRect() {\n+  EnsurePaddingInPlaceRowByRow ensure_padding;\n+  ensure_padding.Process();\n+}"}]}