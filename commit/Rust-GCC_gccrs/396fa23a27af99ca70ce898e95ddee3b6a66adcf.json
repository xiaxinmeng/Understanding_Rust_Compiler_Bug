{"sha": "396fa23a27af99ca70ce898e95ddee3b6a66adcf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk2ZmEyM2EyN2FmOTljYTcwY2U4OThlOTVkZGVlM2I2YTY2YWRjZg==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2015-05-19T15:45:15Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2015-05-19T15:45:15Z"}, "message": "vqrdmulh_n.c: New file.\n\n2015-05-19  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vqrdmulh_n.c: New file.\n\nFrom-SVN: r223376", "tree": {"sha": "11495d8ea5436b98b79190cdd89690d98322ae78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11495d8ea5436b98b79190cdd89690d98322ae78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/396fa23a27af99ca70ce898e95ddee3b6a66adcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/396fa23a27af99ca70ce898e95ddee3b6a66adcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/396fa23a27af99ca70ce898e95ddee3b6a66adcf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/396fa23a27af99ca70ce898e95ddee3b6a66adcf/comments", "author": null, "committer": null, "parents": [{"sha": "4f24fac17137ec3f98c2e84639e05bc312e6b561", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f24fac17137ec3f98c2e84639e05bc312e6b561", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f24fac17137ec3f98c2e84639e05bc312e6b561"}], "stats": {"total": 159, "additions": 159, "deletions": 0}, "files": [{"sha": "287b292e72ce688029e62a91ff615ecd330cc1f4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/396fa23a27af99ca70ce898e95ddee3b6a66adcf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/396fa23a27af99ca70ce898e95ddee3b6a66adcf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=396fa23a27af99ca70ce898e95ddee3b6a66adcf", "patch": "@@ -1,3 +1,7 @@\n+2015-05-19  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vqrdmulh_n.c: New file.\n+\n 2015-05-19  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/vqrdmulh_lane.c: New file."}, {"sha": "7b43f71bf091016257fc58945a4b25c86ef61df8", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqrdmulh_n.c", "status": "added", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/396fa23a27af99ca70ce898e95ddee3b6a66adcf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrdmulh_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/396fa23a27af99ca70ce898e95ddee3b6a66adcf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrdmulh_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrdmulh_n.c?ref=396fa23a27af99ca70ce898e95ddee3b6a66adcf", "patch": "@@ -0,0 +1,155 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected values of cumulative_saturation flag.  */\n+int VECT_VAR(expected_cumulative_sat,int,16,4) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,32,2) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,16,8) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,32,4) = 0;\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0xfffc, 0xfffc, 0xfffc, 0xfffd };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0xfffffffe, 0xfffffffe };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0x6, 0x6, 0x6, 0x5,\n+\t\t\t\t\t0x5, 0x4, 0x4, 0x4 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0xfffffffe, 0xfffffffe,\n+\t\t\t\t\t0xfffffffe, 0xfffffffe };\n+\n+/* Expected values of cumulative_saturation flag when multiplication\n+   saturates.  */\n+int VECT_VAR(expected_cumulative_sat_mul,int,16,4) = 1;\n+int VECT_VAR(expected_cumulative_sat_mul,int,32,2) = 1;\n+int VECT_VAR(expected_cumulative_sat_mul,int,16,8) = 1;\n+int VECT_VAR(expected_cumulative_sat_mul,int,32,4) = 1;\n+\n+/* Expected results when multiplication saturates.  */\n+VECT_VAR_DECL(expected_mul,int,16,4) [] = { 0x7fff, 0x7fff, 0x7fff, 0x7fff };\n+VECT_VAR_DECL(expected_mul,int,32,2) [] = { 0x7fffffff, 0x7fffffff };\n+VECT_VAR_DECL(expected_mul,int,16,8) [] = { 0x7fff, 0x7fff, 0x7fff, 0x7fff,\n+\t\t\t\t\t    0x7fff, 0x7fff, 0x7fff, 0x7fff };\n+VECT_VAR_DECL(expected_mul,int,32,4) [] = { 0x7fffffff, 0x7fffffff,\n+\t\t\t\t\t    0x7fffffff, 0x7fffffff };\n+\n+/* Expected values of cumulative_saturation flag when rounding\n+   should not cause saturation.  */\n+int VECT_VAR(expected_cumulative_sat_round,int,16,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_round,int,32,2) = 0;\n+int VECT_VAR(expected_cumulative_sat_round,int,16,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_round,int,32,4) = 0;\n+\n+/* Expected results when rounding should not cause saturation.  */\n+VECT_VAR_DECL(expected_round,int,16,4) [] = { 0x7fff, 0x7fff, 0x7fff, 0x7fff };\n+VECT_VAR_DECL(expected_round,int,32,2) [] = { 0x7fffffff, 0x7fffffff };\n+VECT_VAR_DECL(expected_round,int,16,8) [] = { 0x7fff, 0x7fff, 0x7fff, 0x7fff,\n+\t\t\t\t\t      0x7fff, 0x7fff, 0x7fff, 0x7fff };\n+VECT_VAR_DECL(expected_round,int,32,4) [] = { 0x7fffffff, 0x7fffffff,\n+\t\t\t\t\t      0x7fffffff, 0x7fffffff };\n+\n+#define INSN vqrdmulh\n+#define TEST_MSG \"VQRDMULH_N\"\n+\n+#define FNNAME1(NAME) void exec_ ## NAME ## _n (void)\n+#define FNNAME(NAME) FNNAME1(NAME)\n+\n+FNNAME (INSN)\n+{\n+  int i;\n+\n+  /* vector_res = vqrdmulh_n(vector,val), then store the result.  */\n+#define TEST_VQRDMULH_N2(INSN, Q, T1, T2, W, N, L, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+  Set_Neon_Cumulative_Sat(0, VECT_VAR(vector_res, T1, W, N));\t\t\\\n+  VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n+    INSN##Q##_n_##T2##W(VECT_VAR(vector, T1, W, N),\t\t\t\\\n+\t\t\tL);\t\t\t\t\t\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N),\t\t\t\t\\\n+\t\t    VECT_VAR(vector_res, T1, W, N));\t\t\t\\\n+  CHECK_CUMULATIVE_SAT(TEST_MSG, T1, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\n+  /* Two auxliary macros are necessary to expand INSN */\n+#define TEST_VQRDMULH_N1(INSN, Q, T1, T2, W, N, L, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+  TEST_VQRDMULH_N2(INSN, Q, T1, T2, W, N, L, EXPECTED_CUMULATIVE_SAT, CMT)\n+\n+#define TEST_VQRDMULH_N(Q, T1, T2, W, N, L, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+  TEST_VQRDMULH_N1(INSN, Q, T1, T2, W, N, L, EXPECTED_CUMULATIVE_SAT, CMT)\n+\n+\n+  DECL_VARIABLE(vector, int, 16, 4);\n+  DECL_VARIABLE(vector, int, 32, 2);\n+  DECL_VARIABLE(vector, int, 16, 8);\n+  DECL_VARIABLE(vector, int, 32, 4);\n+\n+  DECL_VARIABLE(vector_res, int, 16, 4);\n+  DECL_VARIABLE(vector_res, int, 32, 2);\n+  DECL_VARIABLE(vector_res, int, 16, 8);\n+  DECL_VARIABLE(vector_res, int, 32, 4);\n+\n+  clean_results ();\n+\n+  VLOAD(vector, buffer, , int, s, 16, 4);\n+  VLOAD(vector, buffer, , int, s, 32, 2);\n+  VLOAD(vector, buffer, q, int, s, 16, 8);\n+  VLOAD(vector, buffer, q, int, s, 32, 4);\n+\n+  /* Choose multiplier arbitrarily.  */\n+#define CMT \"\"\n+  TEST_VQRDMULH_N(, int, s, 16, 4, 0x2233, expected_cumulative_sat, CMT);\n+  TEST_VQRDMULH_N(, int, s, 32, 2, 0x12345678, expected_cumulative_sat, CMT);\n+  TEST_VQRDMULH_N(q, int, s, 16, 8, 0xCD12, expected_cumulative_sat, CMT);\n+  TEST_VQRDMULH_N(q, int, s, 32, 4, 0xFA23456, expected_cumulative_sat, CMT);\n+\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, CMT);\n+\n+  /* Now use input values such that the multiplication causes\n+     saturation.  */\n+#define TEST_MSG_MUL \" (check mul cumulative saturation)\"\n+  VDUP(vector, , int, s, 16, 4, 0x8000);\n+  VDUP(vector, , int, s, 32, 2, 0x80000000);\n+  VDUP(vector, q, int, s, 16, 8, 0x8000);\n+  VDUP(vector, q, int, s, 32, 4, 0x80000000);\n+\n+  TEST_VQRDMULH_N(, int, s, 16, 4, 0x8000, expected_cumulative_sat_mul,\n+\t\t  TEST_MSG_MUL);\n+  TEST_VQRDMULH_N(, int, s, 32, 2, 0x80000000, expected_cumulative_sat_mul,\n+\t\t  TEST_MSG_MUL);\n+  TEST_VQRDMULH_N(q, int, s, 16, 8, 0x8000, expected_cumulative_sat_mul,\n+\t\t  TEST_MSG_MUL);\n+  TEST_VQRDMULH_N(q, int, s, 32, 4, 0x80000000, expected_cumulative_sat_mul,\n+\t\t  TEST_MSG_MUL);\n+\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_mul, TEST_MSG_MUL);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_mul, TEST_MSG_MUL);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_mul, TEST_MSG_MUL);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_mul, TEST_MSG_MUL);\n+\n+  /* Use input values where rounding produces a result equal to the\n+     saturation value, but does not set the saturation flag.  */\n+#define TEST_MSG_ROUND \" (check rounding)\"\n+  VDUP(vector, , int, s, 16, 4, 0x8000);\n+  VDUP(vector, , int, s, 32, 2, 0x80000000);\n+  VDUP(vector, q, int, s, 16, 8, 0x8000);\n+  VDUP(vector, q, int, s, 32, 4, 0x80000000);\n+\n+  TEST_VQRDMULH_N(, int, s, 16, 4, 0x8001, expected_cumulative_sat_round,\n+\t\t  TEST_MSG_ROUND);\n+  TEST_VQRDMULH_N(, int, s, 32, 2, 0x80000001, expected_cumulative_sat_round,\n+\t\t  TEST_MSG_ROUND);\n+  TEST_VQRDMULH_N(q, int, s, 16, 8, 0x8001, expected_cumulative_sat_round,\n+\t\t  TEST_MSG_ROUND);\n+  TEST_VQRDMULH_N(q, int, s, 32, 4, 0x80000001, expected_cumulative_sat_round,\n+\t\t  TEST_MSG_ROUND);\n+\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_round, TEST_MSG_ROUND);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_round, TEST_MSG_ROUND);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_round, TEST_MSG_ROUND);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_round, TEST_MSG_ROUND);\n+}\n+\n+int main (void)\n+{\n+  exec_vqrdmulh_n ();\n+  return 0;\n+}"}]}