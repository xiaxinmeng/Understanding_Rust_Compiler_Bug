{"sha": "7365ecf7896065901cd8689f62873acdeaf38a25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM2NWVjZjc4OTYwNjU5MDFjZDg2ODlmNjI4NzNhY2RlYWYzOGEyNQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-01-14T21:21:35Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-01-14T21:21:35Z"}, "message": "2003-01-14  Michael Koch  <konqueror@gmx.de>\n\n\t* java/awt/Label.java\n\t(Label): Implements javax.accessibility.Accessible;\n\t* java/awt/List.java\n\t(List): Implements javax.accessibility.Accessible;\n\t* java/awt/ScrollPane.java\n\t(ScrollPane): Implements javax.accessibility.Accessible;\n\t* java/awt/Scrollbar.java\n\t(Scrollbar): Implements javax.accessibility.Accessible;\n\t* java/awt/TextComponent.java\n\t(setCaretPosition): Throw exception, documentation added.\n\t* java/awt/Toolkit.java:\n\tAdded some newlines in method documentations.\n\t(createButton): Exception documentation added.\n\t(createTextField): Exception documentation added.\n\t(createLabel): Exception documentation added.\n\t(createList): Exception documentation added.\n\t(createCheckbox): Exception documentation added.\n\t(createScrollbar): Exception documentation added.\n\t(createScrollPane): Exception documentation added.\n\t(createTextArea): Exception documentation added.\n\t(createChoice): Exception documentation added.\n\t(createFrame): Exception documentation added.\n\t(createWindow): Exception documentation added.\n\t(createDialog): Exception documentation added.\n\t(createMenuBar): Exception documentation added.\n\t(createMenu): Exception documentation added.\n\t(createMenuItem): Exception documentation added.\n\t(createFileDialog): Exception documentation added.\n\t(createCheckboxMenuItem): Exception documentation added.\n\t(loadSystemColors): Exception documentation added.\n\t(setDynamicLayout): Exception documentation added.\n\t(isDynamicLayoutSet): Exception documentation added.\n\t(isDynamicLayoutActive): Exception documentation added.\n\t(getScreenSize): Exception documentation added.\n\t(getScreenResolution): Exception documentation added.\n\t(getScreenInsets): Exception documentation added.\n\t(getColorModel): Exception documentation added.\n\t(getSystemClipboard): Exception documentation added.\n\t(getSystemSelection): Exception documentation added.\n\t(getMenuShortcutKeyMask): Exception documentation added.\n\t(getSystemEventQueue): Exception documentation added.\n\t* java/awt/Window.java:\n\tReindented some code.\n\t(Window): Centralized implementation, documentation added.\n\t(finalize): Documentation added.\n\t(hide): Fixed typo in comment.\n\t(getWindowListeners): Documentation added.\n\t* java/awt/color/ColorSpace.java\n\t(toRGB): Documentation added.\n\t* java/awt/color/ICC_ColorSpace.java\n\t(ICC_ColorSpace): Documentation added.\n\t(toRGB): Throw exception, documentation added.\n\t(fromRGB): Throw exception, documentation added.\n\t(toCIEXYZ): Documentation added.\n\t(fromCIEXYZ): Documentation added.\n\t(getMinValue): Documentation added.\n\t(getMaxValue): Documentation added.\n\t* java/awt/geom/Dimension2D.java\n\t(clone): Documentation added.\n\t* java/awt/geom/GeneralPath.java\n\t(clone): Documentation added.\n\t* java/awt/geom/Line2D.java\n\t(clone): Documentation added.\n\t* java/awt/geom/QuadCurve2D.java\n\t(clone): Documentation added.\n\t* java/awt/image/ColorModel.java\n\t(ColorModel): Throw exception, documentation added.\n\t* java/awt/image/ImageFilter.java\n\t(clone): Doesnt throw CloneNotSupportedException.\n\nFrom-SVN: r61303", "tree": {"sha": "666ba25bc24bce17d8c08205797a7aef5d4d6f24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/666ba25bc24bce17d8c08205797a7aef5d4d6f24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7365ecf7896065901cd8689f62873acdeaf38a25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7365ecf7896065901cd8689f62873acdeaf38a25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7365ecf7896065901cd8689f62873acdeaf38a25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7365ecf7896065901cd8689f62873acdeaf38a25/comments", "author": null, "committer": null, "parents": [{"sha": "b41621ee1493dc1bc14c763a72a689f5a9055417", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b41621ee1493dc1bc14c763a72a689f5a9055417", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b41621ee1493dc1bc14c763a72a689f5a9055417"}], "stats": {"total": 350, "additions": 317, "deletions": 33}, "files": [{"sha": "49de829240febdf4227ad84d31413aaa609d8700", "filename": "libjava/ChangeLog", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365ecf7896065901cd8689f62873acdeaf38a25/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365ecf7896065901cd8689f62873acdeaf38a25/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=7365ecf7896065901cd8689f62873acdeaf38a25", "patch": "@@ -1,3 +1,75 @@\n+2003-01-14  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/awt/Label.java\n+\t(Label): Implements javax.accessibility.Accessible;\n+\t* java/awt/List.java\n+\t(List): Implements javax.accessibility.Accessible;\n+\t* java/awt/ScrollPane.java\n+\t(ScrollPane): Implements javax.accessibility.Accessible;\n+\t* java/awt/Scrollbar.java\n+\t(Scrollbar): Implements javax.accessibility.Accessible;\n+\t* java/awt/TextComponent.java\n+\t(setCaretPosition): Throw exception, documentation added.\n+\t* java/awt/Toolkit.java:\n+\tAdded some newlines in method documentations.\n+\t(createButton): Exception documentation added.\n+\t(createTextField): Exception documentation added.\n+\t(createLabel): Exception documentation added.\n+\t(createList): Exception documentation added.\n+\t(createCheckbox): Exception documentation added.\n+\t(createScrollbar): Exception documentation added.\n+\t(createScrollPane): Exception documentation added.\n+\t(createTextArea): Exception documentation added.\n+\t(createChoice): Exception documentation added.\n+\t(createFrame): Exception documentation added.\n+\t(createWindow): Exception documentation added.\n+\t(createDialog): Exception documentation added.\n+\t(createMenuBar): Exception documentation added.\n+\t(createMenu): Exception documentation added.\n+\t(createMenuItem): Exception documentation added.\n+\t(createFileDialog): Exception documentation added.\n+\t(createCheckboxMenuItem): Exception documentation added.\n+\t(loadSystemColors): Exception documentation added.\n+\t(setDynamicLayout): Exception documentation added.\n+\t(isDynamicLayoutSet): Exception documentation added.\n+\t(isDynamicLayoutActive): Exception documentation added.\n+\t(getScreenSize): Exception documentation added.\n+\t(getScreenResolution): Exception documentation added.\n+\t(getScreenInsets): Exception documentation added.\n+\t(getColorModel): Exception documentation added.\n+\t(getSystemClipboard): Exception documentation added.\n+\t(getSystemSelection): Exception documentation added.\n+\t(getMenuShortcutKeyMask): Exception documentation added.\n+\t(getSystemEventQueue): Exception documentation added.\n+\t* java/awt/Window.java:\n+\tReindented some code.\n+\t(Window): Centralized implementation, documentation added.\n+\t(finalize): Documentation added.\n+\t(hide): Fixed typo in comment.\n+\t(getWindowListeners): Documentation added.\n+\t* java/awt/color/ColorSpace.java\n+\t(toRGB): Documentation added.\n+\t* java/awt/color/ICC_ColorSpace.java\n+\t(ICC_ColorSpace): Documentation added.\n+\t(toRGB): Throw exception, documentation added.\n+\t(fromRGB): Throw exception, documentation added.\n+\t(toCIEXYZ): Documentation added.\n+\t(fromCIEXYZ): Documentation added.\n+\t(getMinValue): Documentation added.\n+\t(getMaxValue): Documentation added.\n+\t* java/awt/geom/Dimension2D.java\n+\t(clone): Documentation added.\n+\t* java/awt/geom/GeneralPath.java\n+\t(clone): Documentation added.\n+\t* java/awt/geom/Line2D.java\n+\t(clone): Documentation added.\n+\t* java/awt/geom/QuadCurve2D.java\n+\t(clone): Documentation added.\n+\t* java/awt/image/ColorModel.java\n+\t(ColorModel): Throw exception, documentation added.\n+\t* java/awt/image/ImageFilter.java\n+\t(clone): Doesnt throw CloneNotSupportedException.\n+\n 2003-01-14  Andrew Haley  <aph@redhat.com>\n \n \t* java/lang/natRuntime.cc (_load): StackTrace access needs to be"}, {"sha": "4f248c30bb9db6963bdad36a8bdd62a07628177a", "filename": "libjava/java/awt/Label.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365ecf7896065901cd8689f62873acdeaf38a25/libjava%2Fjava%2Fawt%2FLabel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365ecf7896065901cd8689f62873acdeaf38a25/libjava%2Fjava%2Fawt%2FLabel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FLabel.java?ref=7365ecf7896065901cd8689f62873acdeaf38a25", "patch": "@@ -40,6 +40,8 @@\n \n import java.awt.peer.LabelPeer;\n import java.awt.peer.ComponentPeer;\n+import java.io.Serializable;\n+import javax.accessibility.Accessible;\n \n /**\n   * This component is used for displaying simple text strings that cannot\n@@ -48,7 +50,7 @@\n   * @author Aaron M. Renn (arenn@urbanophile.com)\n   * @author Tom Tromey <tromey@cygnus.com>\n   */\n-public class Label extends Component implements java.io.Serializable\n+public class Label extends Component implements Serializable, Accessible\n {\n \n /*"}, {"sha": "561a30d4dab297996cffea53bb2259f8ddd048cd", "filename": "libjava/java/awt/List.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365ecf7896065901cd8689f62873acdeaf38a25/libjava%2Fjava%2Fawt%2FList.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365ecf7896065901cd8689f62873acdeaf38a25/libjava%2Fjava%2Fawt%2FList.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FList.java?ref=7365ecf7896065901cd8689f62873acdeaf38a25", "patch": "@@ -46,13 +46,15 @@\n import java.awt.peer.ListPeer;\n import java.awt.peer.ComponentPeer;\n import java.util.Vector;\n+import javax.accessibility.Accessible;\n \n /**\n   * Class that implements a listbox widget\n   *\n   * @author Aaron M. Renn (arenn@urbanophile.com)\n   */\n-public class List extends Component implements ItemSelectable, Serializable\n+public class List extends Component\n+  implements ItemSelectable, Serializable, Accessible\n {\n \n /*"}, {"sha": "045600cddf262b06708b739fa50afe78b0c673e9", "filename": "libjava/java/awt/ScrollPane.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365ecf7896065901cd8689f62873acdeaf38a25/libjava%2Fjava%2Fawt%2FScrollPane.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365ecf7896065901cd8689f62873acdeaf38a25/libjava%2Fjava%2Fawt%2FScrollPane.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FScrollPane.java?ref=7365ecf7896065901cd8689f62873acdeaf38a25", "patch": "@@ -41,14 +41,16 @@\n import java.awt.peer.ScrollPanePeer;\n import java.awt.peer.ContainerPeer;\n import java.awt.peer.ComponentPeer;\n+import java.io.Serializable;\n+import javax.accessibility.Accessible;\n \n /**\n   * This widget provides a scrollable region that allows a single \n   * subcomponent to be viewed through a smaller window.\n   *\n   * @author Aaron M. Renn (arenn@urbanophile.com)\n   */\n-public class ScrollPane extends Container implements java.io.Serializable\n+public class ScrollPane extends Container implements Accessible, Serializable\n {\n \n /*"}, {"sha": "4bdc3166ad93010a69c9f440cd80af47bc781cab", "filename": "libjava/java/awt/Scrollbar.java", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365ecf7896065901cd8689f62873acdeaf38a25/libjava%2Fjava%2Fawt%2FScrollbar.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365ecf7896065901cd8689f62873acdeaf38a25/libjava%2Fjava%2Fawt%2FScrollbar.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FScrollbar.java?ref=7365ecf7896065901cd8689f62873acdeaf38a25", "patch": "@@ -42,15 +42,18 @@\n import java.awt.peer.ComponentPeer;\n import java.awt.event.AdjustmentListener;\n import java.awt.event.AdjustmentEvent;\n+import java.io.Serializable;\n+import javax.accessibility.Accessible;\n \n /**\n   * This class implements a scrollbar widget.\n   *\n   * @author Aaron M. Renn (arenn@urbanophile.com)\n   * @author Tom Tromey <tromey@cygnus.com>\n   */\n-public class Scrollbar extends Component implements Adjustable,\n-                                                    java.io.Serializable\n+public class Scrollbar extends Component implements Accessible,\n+                                                    Adjustable,\n+                                                    Serializable\n {\n \n // FIXME: Serialization readObject/writeObject"}, {"sha": "6dc904cc8b1cf16f8d94d1fb1fcb6a25fbcb271d", "filename": "libjava/java/awt/TextComponent.java", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365ecf7896065901cd8689f62873acdeaf38a25/libjava%2Fjava%2Fawt%2FTextComponent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365ecf7896065901cd8689f62873acdeaf38a25/libjava%2Fjava%2Fawt%2FTextComponent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FTextComponent.java?ref=7365ecf7896065901cd8689f62873acdeaf38a25", "patch": "@@ -291,10 +291,18 @@ public class TextComponent extends Component implements java.io.Serializable\n   * Sets the caret position to the specified value.\n   *\n   * @param caretPosition The new caret position.\n+  *\n+  * @exception IllegalArgumentException If the value supplied for position\n+  * is less than zero.\n+  *\n+  * @since 1.1\n   */\n public synchronized void\n setCaretPosition(int caretPosition)\n {\n+  if (caretPosition < 0)\n+    throw new IllegalArgumentException ();\n+  \n   TextComponentPeer tcp = (TextComponentPeer)getPeer();\n   if (tcp != null)\n     tcp.setCaretPosition(caretPosition);"}, {"sha": "da9bc0e4e4b657563b8443d68547b620d6ea2ddd", "filename": "libjava/java/awt/Toolkit.java", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365ecf7896065901cd8689f62873acdeaf38a25/libjava%2Fjava%2Fawt%2FToolkit.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365ecf7896065901cd8689f62873acdeaf38a25/libjava%2Fjava%2Fawt%2FToolkit.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FToolkit.java?ref=7365ecf7896065901cd8689f62873acdeaf38a25", "patch": "@@ -123,7 +123,10 @@ public Toolkit()\n    * Creates a peer object for the specified <code>Button</code>.\n    *\n    * @param target The <code>Button</code> to create the peer for.\n+   * \n    * @return The peer for the specified <code>Button</code> object.\n+   *\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n    */\n   protected abstract ButtonPeer createButton(Button target);\n \n@@ -132,6 +135,8 @@ public Toolkit()\n    *\n    * @param target The <code>TextField</code> to create the peer for.\n    * @return The peer for the specified <code>TextField</code> object.\n+   *\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n    */\n   protected abstract TextFieldPeer createTextField(TextField target);\n \n@@ -140,6 +145,8 @@ public Toolkit()\n    *\n    * @param target The <code>Label</code> to create the peer for.\n    * @return The peer for the specified <code>Label</code> object.\n+   *\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n    */\n   protected abstract LabelPeer createLabel(Label target);\n \n@@ -148,6 +155,8 @@ public Toolkit()\n    *\n    * @param target The <code>List</code> to create the peer for.\n    * @return The peer for the specified <code>List</code> object.\n+   *\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n    */\n   protected abstract ListPeer createList(List target);\n \n@@ -156,6 +165,8 @@ public Toolkit()\n    *\n    * @param target The <code>Checkbox</code> to create the peer for.\n    * @return The peer for the specified <code>Checkbox</code> object.\n+   *\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n    */\n   protected abstract CheckboxPeer createCheckbox(Checkbox target);\n \n@@ -164,6 +175,8 @@ public Toolkit()\n    *\n    * @param target The <code>Scrollbar</code> to create the peer for.\n    * @return The peer for the specified <code>Scrollbar</code> object.\n+   *\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n    */\n   protected abstract ScrollbarPeer createScrollbar(Scrollbar target);\n \n@@ -172,6 +185,8 @@ public Toolkit()\n    *\n    * @param target The <code>ScrollPane</code> to create the peer for.\n    * @return The peer for the specified <code>ScrollPane</code> object.\n+   *\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n    */\n   protected abstract ScrollPanePeer createScrollPane(ScrollPane target);\n \n@@ -180,6 +195,8 @@ public Toolkit()\n    *\n    * @param target The <code>TextArea</code> to create the peer for.\n    * @return The peer for the specified <code>TextArea</code> object.\n+   *\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n    */\n   protected abstract TextAreaPeer createTextArea(TextArea target);\n \n@@ -188,6 +205,8 @@ public Toolkit()\n    *\n    * @param target The <code>Choice</code> to create the peer for.\n    * @return The peer for the specified <code>Choice</code> object.\n+   *\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n    */\n   protected abstract ChoicePeer createChoice(Choice target);\n \n@@ -196,6 +215,8 @@ public Toolkit()\n    *\n    * @param target The <code>Frame</code> to create the peer for.\n    * @return The peer for the specified <code>Frame</code> object.\n+   *\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n    */\n   protected abstract FramePeer createFrame(Frame target);\n \n@@ -220,6 +241,8 @@ public Toolkit()\n    *\n    * @param target The <code>Window</code> to create the peer for.\n    * @return The peer for the specified <code>Window</code> object.\n+   *\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n    */\n   protected abstract WindowPeer createWindow(Window target);\n \n@@ -228,6 +251,8 @@ public Toolkit()\n    *\n    * @param target The dialog to create the peer for\n    * @return The peer for the specified font name.\n+   *\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n    */\n   protected abstract DialogPeer createDialog(Dialog target);\n \n@@ -236,6 +261,8 @@ public Toolkit()\n    *\n    * @param target The <code>MenuBar</code> to create the peer for.\n    * @return The peer for the specified <code>MenuBar</code> object.\n+   *\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n    */\n   protected abstract MenuBarPeer createMenuBar(MenuBar target);\n \n@@ -244,6 +271,8 @@ public Toolkit()\n    *\n    * @param target The <code>Menu</code> to create the peer for.\n    * @return The peer for the specified <code>Menu</code> object.\n+   *\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n    */\n   protected abstract MenuPeer createMenu(Menu target);\n \n@@ -252,6 +281,8 @@ public Toolkit()\n    *\n    * @param target The <code>PopupMenu</code> to create the peer for.\n    * @return The peer for the specified <code>PopupMenu</code> object.\n+   *\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n    */\n   protected abstract PopupMenuPeer createPopupMenu(PopupMenu target);\n \n@@ -260,6 +291,8 @@ public Toolkit()\n    *\n    * @param target The <code>MenuItem</code> to create the peer for.\n    * @return The peer for the specified <code>MenuItem</code> object.\n+   *\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n    */\n   protected abstract MenuItemPeer createMenuItem(MenuItem target);\n \n@@ -268,6 +301,8 @@ public Toolkit()\n    *\n    * @param target The <code>FileDialog</code> to create the peer for.\n    * @return The peer for the specified <code>FileDialog</code> object.\n+   *\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n    */\n   protected abstract FileDialogPeer createFileDialog(FileDialog target);\n \n@@ -276,6 +311,8 @@ public Toolkit()\n    *\n    * @param target The <code>CheckboxMenuItem</code> to create the peer for.\n    * @return The peer for the specified <code>CheckboxMenuItem</code> object.\n+   *\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n    */\n   protected abstract CheckboxMenuItemPeer\n     createCheckboxMenuItem(CheckboxMenuItem target);\n@@ -310,6 +347,8 @@ protected LightweightPeer createComponent(Component target)\n    * the interface used by the <code>SystemColors</code> class.\n    *\n    * @param colors The array to copy the system colors into.\n+   *\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n    */\n   protected void loadSystemColors(int systemColors[])\n   {\n@@ -318,13 +357,17 @@ protected void loadSystemColors(int systemColors[])\n \n   /**\n    * @since 1.4\n+   *\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n    */\n   public void setDynamicLayout(boolean dynamic)\n   {\n   }\n \n   /**\n    * @since 1.4\n+   *\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n    */\n   protected boolean isDynamicLayoutSet()\n   {\n@@ -333,6 +376,8 @@ protected boolean isDynamicLayoutSet()\n \n   /**\n    * @since 1.4\n+   *\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n    */\n   public boolean isDynamicLayoutActive()\n   {\n@@ -343,17 +388,23 @@ public boolean isDynamicLayoutActive()\n    * Returns the dimensions of the screen in pixels.\n    *\n    * @return The dimensions of the screen in pixels.\n+   * \n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n    */\n   public abstract Dimension getScreenSize();\n \n   /**\n    * Returns the screen resolution in dots per square inch.\n    *\n    * @return The screen resolution in dots per square inch.\n+   *\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n    */\n   public abstract int getScreenResolution();\n \n   /**\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n+   *\n    * @since 1.4\n    */\n   public Insets getScreenInsets(GraphicsConfiguration gc)\n@@ -396,6 +447,7 @@ public Insets getScreenInsets(GraphicsConfiguration gc)\n    * if the property is not set.\n    *\n    * @return An instance of the system default toolkit.\n+   *\n    * @throws AWTError If the toolkit cannot be loaded.\n    */\n   public static Toolkit getDefaultToolkit()\n@@ -450,6 +502,7 @@ public static Toolkit getDefaultToolkit()\n    * @param height The height of the image.\n    * @param observer The observer to receive events about the preparation\n    * process.\n+   *\n    * @return <code>true</code> if the image is already prepared for rendering,\n    * <code>false</code> otherwise.\n    */\n@@ -465,6 +518,7 @@ public abstract boolean prepareImage(Image image, int width, int height,\n    * @param height The height of the image.\n    * @param observer The observer to receive events about the preparation\n    * process.\n+   *\n    * @return A union of the bitmasks from\n    * <code>java.awt.image.ImageObserver</code> that indicates the current\n    * state of the imaging readying process.\n@@ -476,6 +530,7 @@ public abstract int checkImage(Image image, int width, int height,\n    * Creates an image using the specified <code>ImageProducer</code>\n    *\n    * @param producer The <code>ImageProducer</code> to create the image from.\n+   *\n    * @return The created image.\n    */\n   public abstract Image createImage(ImageProducer producer);\n@@ -485,6 +540,7 @@ public abstract int checkImage(Image image, int width, int height,\n    * a recognized format.  Supported formats vary from toolkit to toolkit.\n    *\n    * @param data The raw image data.\n+   *\n    * @return The created image.\n    */\n   public Image createImage(byte[] data)\n@@ -500,6 +556,7 @@ public Image createImage(byte[] data)\n    * @param data The raw image data.\n    * @param offset The offset into the data where the image data starts.\n    * @param len The length of the image data.\n+   *\n    * @return The created image.\n    */\n   public abstract Image createImage(byte[] data, int offset, int len);\n@@ -511,6 +568,7 @@ public Image createImage(byte[] data)\n    * @param frame The window initiating the print job.\n    * @param title The print job title.\n    * @param props The print job properties.\n+   *\n    * @return The requested print job, or <code>null</code> if the job\n    * was cancelled.\n    */\n@@ -536,10 +594,14 @@ public PrintJob getPrintJob(Frame frame, String title,\n    * Returns the system clipboard.\n    *\n    * @return THe system clipboard.\n+   *\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n    */\n   public abstract Clipboard getSystemClipboard();\n \n   /**\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n+   *\n    * @since 1.4\n    */\n   public Clipboard getSystemSelection()\n@@ -553,6 +615,8 @@ public Clipboard getSystemSelection()\n    * to change the default.\n    *\n    * @return The key mask for the menu accelerator key.\n+   *\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n    */\n   public int getMenuShortcutKeyMask()\n   {"}, {"sha": "31e6b573f537b4e903017dc1fd0a9e381f98d93f", "filename": "libjava/java/awt/Window.java", "status": "modified", "additions": 69, "deletions": 26, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365ecf7896065901cd8689f62873acdeaf38a25/libjava%2Fjava%2Fawt%2FWindow.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365ecf7896065901cd8689f62873acdeaf38a25/libjava%2Fjava%2Fawt%2FWindow.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FWindow.java?ref=7365ecf7896065901cd8689f62873acdeaf38a25", "patch": "@@ -86,44 +86,67 @@ public class Window extends Container\n    * parent.  The window will initially be invisible.\n    *\n    * @param parent The owning <code>Frame</code> of this window.\n+   *\n+   * @exception IllegalArgumentException If the owner's GraphicsConfiguration\n+   * is not from a screen device, or if owner is null; this exception is always\n+   * thrown when GraphicsEnvironment.isHeadless returns true.\n    */\n   public Window(Frame owner)\n   {\n-    this((Window) owner);\n+    this (owner, owner.getGraphicsConfiguration ());\n   }\n \n-  /** @since 1.2 */\n+  /**\n+   * Initializes a new instance of <code>Window</code> with the specified\n+   * parent.  The window will initially be invisible.   \n+   *\n+   * @exception IllegalArgumentException If the owner's GraphicsConfiguration\n+   * is not from a screen device, or if owner is null; this exception is always\n+   * thrown when GraphicsEnvironment.isHeadless returns true.\n+   *\n+   * @since 1.2\n+   */\n   public Window(Window owner)\n   {\n-    this();\n-    if (owner == null)\n-      throw new IllegalArgumentException(\"owner must not be null\");\n-    \n-    this.parent = owner;\n-\n-    // FIXME: add to owner's \"owned window\" list\n-    //owner.owned.add(this); // this should be a weak reference\n+    this (owner, owner.getGraphicsConfiguration ());\n   }\n   \n-  /** @since 1.3 */\n+  /**\n+   * Initializes a new instance of <code>Window</code> with the specified\n+   * parent.  The window will initially be invisible.   \n+   *\n+   * @exception IllegalArgumentException If owner is null or if gc is not from a\n+   * screen device; this exception is always thrown when\n+   * GraphicsEnvironment.isHeadless returns true.\n+   *\n+   * @since 1.3\n+   */\n   public Window(Window owner, GraphicsConfiguration gc)\n   {\n-    this(owner);\n+    this ();\n+\n+    if (owner == null)\n+      throw new IllegalArgumentException (\"owner must not be null\");\n \n+    this.parent = owner;\n+    \n+    // FIXME: add to owner's \"owned window\" list\n+    //owner.owned.add(this); // this should be a weak reference\n+    \n     /*  FIXME: Security check\n     SecurityManager.checkTopLevelWindow(...)\n+    */\n \n     if (gc != null\n         && gc.getDevice().getType() != GraphicsDevice.TYPE_RASTER_SCREEN)\n       throw new IllegalArgumentException (\"gc must be from a screen device\");\n \n     if (gc == null)\n       graphicsConfiguration = GraphicsEnvironment.getLocalGraphicsEnvironment()\n-\t\t\t     .getDefaultScreenDevice()\n-\t\t\t     .getDefaultConfiguration();\n+        .getDefaultScreenDevice()\n+        .getDefaultConfiguration();\n     else\n-    */    \n-    graphicsConfiguration = gc;\n+      graphicsConfiguration = gc;\n   }\n \n   GraphicsConfiguration getGraphicsConfigurationImpl()\n@@ -134,6 +157,12 @@ GraphicsConfiguration getGraphicsConfigurationImpl()\n     return super.getGraphicsConfigurationImpl();\n   }\n \n+  /**\n+   * Disposes of the input methods and context, and removes the WeakReference\n+   * which formerly pointed to this Window from the parent's owned Window list.\n+   *\n+   * @exception Throwable The Exception raised by this method.\n+   */\n   protected void finalize() throws Throwable\n   {\n     // FIXME: remove from owner's \"owned window\" list (Weak References)\n@@ -185,7 +214,7 @@ public void show()\n \n   public void hide()\n   {\n-    // FIXME: call hide() on amy \"owned\" children here.\n+    // FIXME: call hide() on any \"owned\" children here.\n     super.hide();\n   }\n \n@@ -233,8 +262,8 @@ public void toFront()\n   {\n     if (peer != null)\n       {\n-\tWindowPeer wp = (WindowPeer) peer;\n-\twp.toFront();\n+        WindowPeer wp = (WindowPeer) peer;\n+        wp.toFront();\n       }\n   }\n \n@@ -265,12 +294,12 @@ public final String getWarningString()\n     if (!secure)\n       {\n         if (warningString != null)\n-\t  return warningString;\n-\telse\n-\t  {\n-\t    String warning = System.getProperty(\"awt.appletWarning\");\n-\t    return warning;\n-\t  }\n+          return warningString;\n+        else\n+          {\n+            String warning = System.getProperty(\"awt.appletWarning\");\n+            return warning;\n+          }\n       }\n     return null;\n   }\n@@ -338,14 +367,28 @@ public synchronized void removeWindowListener(WindowListener listener)\n     windowListener = AWTEventMulticaster.remove(windowListener, listener);\n   }\n \n+  /**\n+   * Returns an array of all the window listeners registered on this window.\n+   *\n+   * @since 1.4\n+   */\n   public synchronized WindowListener[] getWindowListeners()\n   {\n     return (WindowListener[])\n       AWTEventMulticaster.getListeners(windowListener,\n                                        WindowListener.class);\n   }\n \n-  /** @since 1.3 */\n+  /**\n+   * Returns an array of all the objects currently registered as FooListeners\n+   * upon this Window. FooListeners are registered using the addFooListener\n+   * method.\n+   *\n+   * @exception ClassCastException If listenerType doesn't specify a class or\n+   * interface that implements java.util.EventListener.\n+   *\n+   * @since 1.3\n+   */\n   public EventListener[] getListeners(Class listenerType)\n   {\n     if (listenerType == WindowListener.class)"}, {"sha": "8bf0a8196c0b9ea81a249ba0155849ece54bf31c", "filename": "libjava/java/awt/color/ColorSpace.java", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365ecf7896065901cd8689f62873acdeaf38a25/libjava%2Fjava%2Fawt%2Fcolor%2FColorSpace.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365ecf7896065901cd8689f62873acdeaf38a25/libjava%2Fjava%2Fawt%2Fcolor%2FColorSpace.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fcolor%2FColorSpace.java?ref=7365ecf7896065901cd8689f62873acdeaf38a25", "patch": "@@ -131,6 +131,13 @@ public boolean isCS_sRGB()\n     return false;\n   }\n \n+  /**\n+   * Transforms a color value assumed to be in this ColorSpace into a value in\n+   * the default CS_sRGB color space.\n+   *\n+   * @exception ArrayIndexOutOfBoundsException If array length is not at least\n+   * the number of components in this ColorSpace.\n+   */\n   public abstract float[] toRGB(float[] colorvalue);\n \n   public abstract float[] fromRGB(float[] rgbvalue);"}, {"sha": "2b7016742c9fd8f38ad5855890babf38b65d8ca8", "filename": "libjava/java/awt/color/ICC_ColorSpace.java", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365ecf7896065901cd8689f62873acdeaf38a25/libjava%2Fjava%2Fawt%2Fcolor%2FICC_ColorSpace.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365ecf7896065901cd8689f62873acdeaf38a25/libjava%2Fjava%2Fawt%2Fcolor%2FICC_ColorSpace.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fcolor%2FICC_ColorSpace.java?ref=7365ecf7896065901cd8689f62873acdeaf38a25", "patch": "@@ -81,6 +81,12 @@ public class ICC_ColorSpace extends ColorSpace\n    */\n   private boolean needScaleInit;\n \n+  /**\n+   * Constructs a new ICC_ColorSpace from an ICC_Profile object.\n+   *\n+   * @exception IllegalArgumentException If profile is inappropriate for\n+   * representing a ColorSpace.\n+   */\n   public ICC_ColorSpace(ICC_Profile profile)\n   {\n     super(CS_sRGB, profile.getNumComponents());\n@@ -92,18 +98,45 @@ public ICC_Profile getProfile()\n     return thisProfile;\n   }\n \n+  /**\n+   * Transforms a color value assumed to be in this ColorSpace into a value in\n+   * the default CS_sRGB color space.\n+   *\n+   * @exception ArrayIndexOutOfBoundsException If array length is not at least\n+   * the number of components in this ColorSpace.\n+   */\n   public float[] toRGB(float[] colorvalue)\n   {\n+    if (colorvalue.length < numComponents)\n+      throw new IllegalArgumentException ();\n+      \n     // FIXME: Always assumes sRGB:\n     return colorvalue;\n   }\n \n+  /**\n+   * Transforms a color value assumed to be in the default CS_sRGB color space\n+   * into this ColorSpace.\n+   *\n+   * @exception ArrayIndexOutOfBoundsException If array length is not at\n+   * least 3.\n+   */\n   public float[] fromRGB(float[] rgbvalue)\n   {\n+    if (rgbvalue.length < 3)\n+      throw new IllegalArgumentException ();\n+    \n     // FIXME: Always assumes sRGB:\n     return rgbvalue;\n   }\n \n+  /**\n+   * Transforms a color value assumed to be in this ColorSpace into the\n+   * CS_CIEXYZ conversion color space.\n+   *\n+   * @exception ArrayIndexOutOfBoundsException If array length is not at\n+   * least the number of components in this ColorSpace.\n+   */\n   public float[] toCIEXYZ(float[] colorvalue)\n   {\n     // FIXME: Not implemented"}, {"sha": "dbbdf6b25b3b117f430887b730596ea1c53d3be9", "filename": "libjava/java/awt/geom/Dimension2D.java", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365ecf7896065901cd8689f62873acdeaf38a25/libjava%2Fjava%2Fawt%2Fgeom%2FDimension2D.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365ecf7896065901cd8689f62873acdeaf38a25/libjava%2Fjava%2Fawt%2Fgeom%2FDimension2D.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fgeom%2FDimension2D.java?ref=7365ecf7896065901cd8689f62873acdeaf38a25", "patch": "@@ -86,6 +86,7 @@ protected Dimension2D()\n    * may occur.\n    *\n    * @param d the dimension containing the new values\n+   *\n    * @throws NullPointerException if d is null\n    */\n   public void setSize(Dimension2D d)\n@@ -98,6 +99,10 @@ public void setSize(Dimension2D d)\n    * as this one.\n    *\n    * @return the clone\n+   *\n+   * @exception OutOfMemoryError If there is not enough memory available.\n+   *\n+   * @since 1.2\n    */\n   public Object clone()\n   {"}, {"sha": "6c1b578fc1931fd224904907be11307a2ca90fcf", "filename": "libjava/java/awt/geom/GeneralPath.java", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365ecf7896065901cd8689f62873acdeaf38a25/libjava%2Fjava%2Fawt%2Fgeom%2FGeneralPath.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365ecf7896065901cd8689f62873acdeaf38a25/libjava%2Fjava%2Fawt%2Fgeom%2FGeneralPath.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fgeom%2FGeneralPath.java?ref=7365ecf7896065901cd8689f62873acdeaf38a25", "patch": "@@ -338,6 +338,10 @@ public PathIterator getPathIterator(AffineTransform at, double flatness)\n    * this one.\n    *\n    * @return the clone\n+   *\n+   * @exception OutOfMemoryError If there is not enough memory available.\n+   *\n+   * @since 1.2\n    */\n   public Object clone()\n   {"}, {"sha": "d2dd65c4341908b095bc7cdfb47a8462f6bab676", "filename": "libjava/java/awt/geom/Line2D.java", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365ecf7896065901cd8689f62873acdeaf38a25/libjava%2Fjava%2Fawt%2Fgeom%2FLine2D.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365ecf7896065901cd8689f62873acdeaf38a25/libjava%2Fjava%2Fawt%2Fgeom%2FLine2D.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fgeom%2FLine2D.java?ref=7365ecf7896065901cd8689f62873acdeaf38a25", "patch": "@@ -752,6 +752,10 @@ public PathIterator getPathIterator(AffineTransform at, double flatness)\n    * this one.\n    *\n    * @return the clone\n+   *\n+   * @exception OutOfMemoryError If there is not enough memory available.\n+   *\n+   * @since 1.2\n    */\n   public Object clone()\n   {"}, {"sha": "05748fc979de7bd1df65c1a476ec66747ce69eed", "filename": "libjava/java/awt/geom/QuadCurve2D.java", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365ecf7896065901cd8689f62873acdeaf38a25/libjava%2Fjava%2Fawt%2Fgeom%2FQuadCurve2D.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365ecf7896065901cd8689f62873acdeaf38a25/libjava%2Fjava%2Fawt%2Fgeom%2FQuadCurve2D.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fgeom%2FQuadCurve2D.java?ref=7365ecf7896065901cd8689f62873acdeaf38a25", "patch": "@@ -289,6 +289,10 @@ public PathIterator getPathIterator(AffineTransform at, double flatness)\n    * this one.\n    *\n    * @return the clone\n+   *\n+   * @exception OutOfMemoryError If there is not enough memory available.\n+   *\n+   * @since 1.2\n    */\n   public Object clone()\n   {"}, {"sha": "fab51667edba3f71a385b32bc5beaf510fe67c20", "filename": "libjava/java/awt/image/ColorModel.java", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365ecf7896065901cd8689f62873acdeaf38a25/libjava%2Fjava%2Fawt%2Fimage%2FColorModel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365ecf7896065901cd8689f62873acdeaf38a25/libjava%2Fjava%2Fawt%2Fimage%2FColorModel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fimage%2FColorModel.java?ref=7365ecf7896065901cd8689f62873acdeaf38a25", "patch": "@@ -120,10 +120,32 @@ public ColorModel(int bits)\n \t Buffers.smallestAppropriateTransferType(bits * 4));\n   }\n \n+  /**\n+   * Constructs a ColorModel that translates pixel values to\n+   * color/alpha components.\n+   *\n+   * @exception IllegalArgumentException If the length of the bit array is less\n+   * than the number of color or alpha components in this ColorModel, or if the\n+   * transparency is not a valid value, or if the sum of the number of bits in\n+   * bits is less than 1 or if any of the elements in bits is less than 0.\n+   */\n   protected ColorModel(int pixel_bits, int[] bits, ColorSpace cspace,\n \t\t       boolean hasAlpha, boolean isAlphaPremultiplied,\n \t\t       int transparency, int transferType)\n   {\n+    int bits_sum = 0;\n+    for (int i = 0; i < bits.length; i++)\n+      {\n+        if (bits [i] < 0)\n+          throw new IllegalArgumentException ();\n+\n+        bits_sum |= bits [i];\n+      }\n+    \n+    if ((bits.length < cspace.numComponents)\n+        || (bits_sum < 1))\n+      throw new IllegalArgumentException ();\n+\n     this.pixel_bits = pixel_bits;\n     this.bits = bits;\n     this.cspace = cspace;"}, {"sha": "86bc0210a4bb0a9f95c6d0c915869d6e09ec41e1", "filename": "libjava/java/awt/image/ImageFilter.java", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365ecf7896065901cd8689f62873acdeaf38a25/libjava%2Fjava%2Fawt%2Fimage%2FImageFilter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365ecf7896065901cd8689f62873acdeaf38a25/libjava%2Fjava%2Fawt%2Fimage%2FImageFilter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fimage%2FImageFilter.java?ref=7365ecf7896065901cd8689f62873acdeaf38a25", "patch": "@@ -81,9 +81,18 @@ public void resendTopDownLeftRight(ImageProducer ip)\n      *\n      * @see java.lang.Object#clone ()\n      */\n-    public Object clone() throws CloneNotSupportedException\n+    public Object clone()\n     {\n-\treturn (super.clone());\n+      try\n+        {\n+          return super.clone();\n+        }\n+      catch (CloneNotSupportedException e)\n+        {\n+          // This should never happen as this class implements the\n+          // Cloneable interface.\n+          throw new InternalError ();\n+        }\n     }\n \n     /**"}]}