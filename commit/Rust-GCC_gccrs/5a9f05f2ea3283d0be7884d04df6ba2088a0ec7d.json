{"sha": "5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE5ZjA1ZjJlYTMyODNkMGJlNzg4NGQwNGRmNmJhMjA4OGEwZWM3ZA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-06-02T19:21:15Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-06-02T19:21:15Z"}, "message": "scanasm.exp (dg-scan): New function, factored out of ...\n\n\t* lib/scanasm.exp (dg-scan): New function, factored out of ...\n\t(scan-assembler): ... here.  Use dg-scan.\n\t(scan-assembler-not): Likewise.\n\t(scan-file): New function.\n\t(scan-file-not): Likewise.\n\t* gcc.dg/cpp/19990228-1.c: Use scan-file and/or scan-file-not.\n\t* gcc.dg/cpp/_Pragma4.c: Likewise.\n\t* gcc.dg/cpp/_Pragma5.c: Likewise.\n\t* gcc.dg/cpp/avoidpaste1.c: Likewise.\n\t* gcc.dg/cpp/avoidpaste2.c: Likewise.\n\t* gcc.dg/cpp/cmdlne-C2.c: Likewise.\n\t* gcc.dg/cpp/cmdlne-P.c: Likewise.\n\t* gcc.dg/cpp/cmdlne-dD-M.c: Likewise.\n\t* gcc.dg/cpp/cmdlne-dD-dM.c: Likewise.\n\t* gcc.dg/cpp/cmdlne-dI-M.c: Likewise.\n\t* gcc.dg/cpp/cmdlne-dM-M.c: Likewise.\n\t* gcc.dg/cpp/cmdlne-dM-dD.c: Likewise.\n\t* gcc.dg/cpp/cmdlne-dN-M.c: Likewise.\n\t* gcc.dg/cpp/cxxcom1.c: Likewise.\n\t* gcc.dg/cpp/line1.c: Likewise.\n\t* gcc.dg/cpp/maccom1.c: Likewise.\n\t* gcc.dg/cpp/maccom2.c: Likewise.\n\t* gcc.dg/cpp/maccom3.c: Likewise.\n\t* gcc.dg/cpp/maccom4.c: Likewise.\n\t* gcc.dg/cpp/maccom5.c: Likewise.\n\t* gcc.dg/cpp/maccom6.c: Likewise.\n\t* gcc.dg/cpp/multiline.c: Likewise.\n\t* gcc.dg/cpp/spacing1.c: Likewise.\n\t* gcc.dg/cpp/spacing2.c: Likewise.\n\t* gcc.dg/cpp/trad/cmdlne-C2.c: Likewise.\n\t* gcc.dg/cpp/trad/maccom1.c: Likewise.\n\t* gcc.dg/cpp/trad/maccom2.c: Likewise.\n\t* gcc.dg/cpp/trad/maccom3.c: Likewise.\n\t* gcc.dg/cpp/trad/maccom4.c: Likewise.\n\t* gcc.dg/cpp/trad/maccom6.c: Likewise.\n\t* gcc.dg/cpp/cxxcom2.c: Likewise.\n\t* gcc.dg/cpp/cxxcom2.h: New file.\n\nFrom-SVN: r67347", "tree": {"sha": "b9ac7ba20a1901ce01adc13a973b730607c0a573", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9ac7ba20a1901ce01adc13a973b730607c0a573"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/comments", "author": null, "committer": null, "parents": [{"sha": "245115a4b4946f9ab14e2c012f83d1a82c651607", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/245115a4b4946f9ab14e2c012f83d1a82c651607", "html_url": "https://github.com/Rust-GCC/gccrs/commit/245115a4b4946f9ab14e2c012f83d1a82c651607"}], "stats": {"total": 407, "additions": 162, "deletions": 245}, "files": [{"sha": "be88c11a1b21c729815869083c4111a7c69aa799", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d", "patch": "@@ -1,5 +1,43 @@\n 2003-06-02  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* lib/scanasm.exp (dg-scan): New function, factored out of ...\n+\t(scan-assembler): ... here.  Use dg-scan.\n+\t(scan-assembler-not): Likewise.\n+\t(scan-file): New function.\n+\t(scan-file-not): Likewise.\n+\t* gcc.dg/cpp/19990228-1.c: Use scan-file and/or scan-file-not.\n+\t* gcc.dg/cpp/_Pragma4.c: Likewise.\n+\t* gcc.dg/cpp/_Pragma5.c: Likewise.\n+\t* gcc.dg/cpp/avoidpaste1.c: Likewise.\n+\t* gcc.dg/cpp/avoidpaste2.c: Likewise.\n+\t* gcc.dg/cpp/cmdlne-C2.c: Likewise.\n+\t* gcc.dg/cpp/cmdlne-P.c: Likewise.\n+\t* gcc.dg/cpp/cmdlne-dD-M.c: Likewise.\n+\t* gcc.dg/cpp/cmdlne-dD-dM.c: Likewise.\n+\t* gcc.dg/cpp/cmdlne-dI-M.c: Likewise.\n+\t* gcc.dg/cpp/cmdlne-dM-M.c: Likewise.\n+\t* gcc.dg/cpp/cmdlne-dM-dD.c: Likewise.\n+\t* gcc.dg/cpp/cmdlne-dN-M.c: Likewise.\n+\t* gcc.dg/cpp/cxxcom1.c: Likewise.\n+\t* gcc.dg/cpp/line1.c: Likewise.\n+\t* gcc.dg/cpp/maccom1.c: Likewise.\n+\t* gcc.dg/cpp/maccom2.c: Likewise.\n+\t* gcc.dg/cpp/maccom3.c: Likewise.\n+\t* gcc.dg/cpp/maccom4.c: Likewise.\n+\t* gcc.dg/cpp/maccom5.c: Likewise.\n+\t* gcc.dg/cpp/maccom6.c: Likewise.\n+\t* gcc.dg/cpp/multiline.c: Likewise.\n+\t* gcc.dg/cpp/spacing1.c: Likewise.\n+\t* gcc.dg/cpp/spacing2.c: Likewise.\n+\t* gcc.dg/cpp/trad/cmdlne-C2.c: Likewise.\n+\t* gcc.dg/cpp/trad/maccom1.c: Likewise.\n+\t* gcc.dg/cpp/trad/maccom2.c: Likewise.\n+\t* gcc.dg/cpp/trad/maccom3.c: Likewise.\n+\t* gcc.dg/cpp/trad/maccom4.c: Likewise.\n+\t* gcc.dg/cpp/trad/maccom6.c: Likewise.\n+\t* gcc.dg/cpp/cxxcom2.c: Likewise.\n+\t* gcc.dg/cpp/cxxcom2.h: New file.\n+\n \t* gcc.dg/cpp/truefalse.cpp: Move it to ...\n \t* g++.dg/cpp/truefalse.C: Here.\n \t* gcc.dg/cpp/cpp.exp: Remove scanning of \".cpp\" files."}, {"sha": "acae1169ac457e8fa1ac28ab3bd90884cbc9abf6", "filename": "gcc/testsuite/gcc.dg/cpp/19990228-1.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F19990228-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F19990228-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F19990228-1.c?ref=5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d", "patch": "@@ -18,12 +18,4 @@ foo (\"\\\n \",\n NULL);\n \n-/*\n-   { dg-final { if ![file exists 990228-1.i] { return }\t\t\t} }\n-   { dg-final { set tmp [grep 990228-1.i \".#\"]\t\t\t\t} }\n-   { dg-final { if { [string length $tmp] == 0 } \\{\t\t\t} }\n-   { dg-final {     pass \"990228-1.c: linemarkers in middle of line\"\t} }\n-   { dg-final { \\} else \\{\t\t\t\t\t\t} }\n-   { dg-final {     fail \"990228-1.c: linemarkers in middle of line\"    } }\n-   { dg-final { \\}\t\t\t\t\t\t\t} }\n- */\n+/* { dg-final { scan-file-not 19990228-1.i \"\\[^\\\\n\\]#\" } } */"}, {"sha": "f6f43d6b242e9d011de275c3ce45da31e6a4f47a", "filename": "gcc/testsuite/gcc.dg/cpp/_Pragma4.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F_Pragma4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F_Pragma4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F_Pragma4.c?ref=5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d", "patch": "@@ -5,8 +5,4 @@\n #define b foo _Pragma (\"bar\") baz\n a b c \n \n-/*\n-   { dg-final { if ![file exists _Pragma4.i] { return }                   } }\n-   { dg-final { if { [grep _Pragma4.i \"#pragma bar\"] != \"\" }  { return }  } }\n-   { dg-final { fail \"_Pragma4.c: #pragma appearing on its own line\"      } }\n-*/\n+/* { dg-final { scan-file \"_Pragma4.i\" \"(^|\\\\n)#pragma bar($|\\\\n)\" } } */"}, {"sha": "141d56b9a755829124f01bd59dace7546541f073", "filename": "gcc/testsuite/gcc.dg/cpp/_Pragma5.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F_Pragma5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F_Pragma5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F_Pragma5.c?ref=5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d", "patch": "@@ -7,8 +7,4 @@\n #define GAMMA(C) _Pragma(\"moose\") ALPHA(C) BETA(C)\n GAMMA(baz);\n \n-/*\n-   { dg-final { if ![file exists _Pragma5.i] { return }                   } }\n-   { dg-final { if { [grep _Pragma5.i \"alpha_baz beta_baz;\"] != \"\" } { return }  } }\n-   { dg-final { fail \"_Pragma5.c: _Pragma in macro\"                       } }\n-*/\n+/* { dg-final { scan-file \"_Pragma5.i\" \"alpha_baz beta_baz;\" } } */"}, {"sha": "d304a74415589cd8b39fa9889289cc3b374d9f8c", "filename": "gcc/testsuite/gcc.dg/cpp/avoidpaste1.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Favoidpaste1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Favoidpaste1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Favoidpaste1.c?ref=5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2001 Free Software Foundation, Inc.  */\n+/* Copyright (C) 2001, 2003 Free Software Foundation, Inc.  */\n \n /* { dg-do preprocess } */\n \n@@ -24,10 +24,5 @@ in future, this test needs to change.  */\n :: :g: :f(): :f(^): tricky\n :f(:): .. .__INCLUDE_LEVEL__ __INCLUDE_LEVEL__. /* Check builtins, too.  */\n \n-/*\n-   { dg-final { if ![file exists avoidpaste1.i] { return }                } }\n-   { dg-final { if { [grep avoidpaste1.i \":: : : : : :\\\\^: 1.0e- 1\"] != \"\" } \\{   } }\n-   { dg-final { if { [grep avoidpaste1.i \": : : \\\\\\.\\\\\\. \\\\\\. 0 0 \\\\\\.\"] != \"\" } \\{  } }\n-   { dg-final { return \\} \\}                                              } }\n-   { dg-final { fail \"avoidpaste1.c: paste avoidance\"                     } }\n-*/\n+/* { dg-final { scan-file avoidpaste1.i \":: : : : : :\\\\^: 1.0e- 1\" } }\n+   { dg-final { scan-file avoidpaste1.i \": : : \\\\\\.\\\\\\. \\\\\\. 0 0 \\\\\\.\" } } */"}, {"sha": "42b549c8d6c9d309f3299dd314ef9d18cd84c63e", "filename": "gcc/testsuite/gcc.dg/cpp/avoidpaste2.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Favoidpaste2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Favoidpaste2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Favoidpaste2.c?ref=5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2001 Free Software Foundation, Inc.  */\n+/* Copyright (C) 2001, 2003 Free Software Foundation, Inc.  */\n \n /* { dg-do preprocess } */\n \n@@ -26,10 +26,5 @@ We used to get a space at the start of the line.  */\n f(:,) \n g(2, 2)\n \n-/*\n-   { dg-final { if ![file exists avoidpaste2.i] { return }                } }\n-   { dg-final { if { [grep avoidpaste2.i \"^: : : - > - >\"] != \"\" } \\{     } }\n-   { dg-final { if { [grep avoidpaste2.i \"^:2: :22 22:\"] != \"\" }   \\{     } }\n-   { dg-final { return \\} \\}                                              } }\n-   { dg-final { fail \"avoidpaste2.c: paste avoidance\"                     } }\n-*/\n+/* { dg-final { scan-file avoidpaste2.i \"(^|\\\\n): : : - > - >\" } } \n+   { dg-final { scan-file avoidpaste2.i \"(^|\\\\n):2: :22 22:\" } } */"}, {"sha": "be046704c5652cee476873850b17f2fc821f0612", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-C2.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-C2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-C2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-C2.c?ref=5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2000, 2001 Free Software Foundation, Inc.  */\n+/* Copyright (C) 2000, 2001, 2003 Free Software Foundation, Inc.  */\n \n /* { dg-do preprocess } */\n /* { dg-options \"-C\" } */\n@@ -13,9 +13,5 @@\n \n ZERO:\n \n-/*\n-   { dg-final { if ![file exists cmdlne-C2.i] { return }                  } }\n-   { dg-final { if { [grep cmdlne-C2.i \"c+omment:\"] == \"\" } { return }    } }\n-   { dg-final { fail \"cmdlne-C2.i: C++ comments in macros with -C\"        } }\n-*/\n+/* { dg-final { scan-file-not cmdlne-C2.i \"c+omment:\" } } */\n "}, {"sha": "faadf9fbf79c83c79cb95793076cddebc597a91a", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-P.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-P.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-P.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-P.c?ref=5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2000 Free Software Foundation, Inc.  */\n+/* Copyright (C) 2000, 2003 Free Software Foundation, Inc.  */\n \n /* { dg-do preprocess } */\n /* { dg-options \"-P\" } */\n@@ -8,6 +8,4 @@\n \n int x = 1;\n \n-/* { dg-final { if ![file exists cmdlne-P.i] { return }                } }\n-   { dg-final { if { [grep cmdlne-P.i \"^int x = 1;$\"] != \"\" } { return } } }\n-   { dg-final { fail \"cmdlne-P.c: stair-stepping with -P\"              } } */\n+/* { dg-final { scan-file cmdlne-P.i \"(^|\\n)int x = 1;($|\\n)\" } } */"}, {"sha": "1bc7916fcd3870ca6c49b20ec7f6a4a8ae3e2b60", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dD-M.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dD-M.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dD-M.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dD-M.c?ref=5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2002 Free Software Foundation, Inc.  */\n+/* Copyright (C) 2002, 2003 Free Software Foundation, Inc.  */\n \n /* { dg-do preprocess } */\n /* { dg-options \"-dD -M\" } */\n@@ -10,8 +10,6 @@\n #define funlike(like) fun like\n int variable;\n \n-/* { dg-final { if ![file exists cmdlne-dD-M.i] { return }                } }\n-   { dg-final { if { [grep cmdlne-dD-M.i \"^#define foo bar$\"] != \"\" } { fail \"cmdlne-dD-M.c: #define line printed\" } } }\n-   { dg-final { if { [grep cmdlne-dD-M.i \"variable\"] != \"\" } { fail \"cmdlne-dD-M.c: non-#define line printed\" } } }\n-   { dg-final { if { [grep cmdlne-dD-M.i \"^cmdlne-dD-M.*:.*cmdlne-dD-M.c\"] == \"\" } { xfail \"cmdlne-dD-M.c: dependency rule not printed\" } } }\n-   { dg-final { return } }  */\n+/* { dg-final { scan-file-not cmdlne-dD-M.i \"(^|\\\\n)#define foo bar($|\\\\n)\" } }\n+   { dg-final { scan-file-not cmdlne-dD-M.i \"variable\" } }\n+   { dg-final { scan-file-not cmdlne-dD-M.i \"(^|\\n)cmdlne-dD-M.*:.*cmdlne-dD-M.c\" { xfail *-*-* } } } */"}, {"sha": "9e3c732d35cdba985810a4ca3010464d4c09cdf1", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dD-dM.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dD-dM.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dD-dM.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dD-dM.c?ref=5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2002 Free Software Foundation, Inc.  */\n+/* Copyright (C) 2002, 2003 Free Software Foundation, Inc.  */\n \n /* { dg-do preprocess } */\n /* { dg-options \"-dD -dM\" } */\n@@ -10,7 +10,5 @@\n #define funlike(like) fun like\n int variable;\n \n-/* { dg-final { if ![file exists cmdlne-dD-dM.i] { return }                } }\n-   { dg-final { if { [grep cmdlne-dD-dM.i \"^#define foo bar$\"] == \"\" } { fail \"cmdlne-dD-dM.c: #define line not printed\" } } }\n-   { dg-final { if { [grep cmdlne-dD-dM.i \"variable\"] != \"\" } { fail \"cmdlne-dD-dM.c: non-#define line printed\" } } }\n-   { dg-final { return } }  */\n+/* { dg-final { scan-file cmdlne-dD-dM.i \"(^|\\\\n)#define foo bar($|\\\\n)\" } }\n+   { dg-final { scan-file-not cmdlne-dD-dM.i \"variable\" } } */"}, {"sha": "c003d5ade98ece3155a825aaf2f4fe1b84448da9", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dI-M.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dI-M.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dI-M.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dI-M.c?ref=5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2002 Free Software Foundation, Inc.  */\n+/* Copyright (C) 2002, 2003 Free Software Foundation, Inc.  */\n \n /* { dg-do preprocess } */\n /* { dg-options \"-dI -M\" } */\n@@ -11,8 +11,6 @@\n #define funlike(like) fun like\n int variable;\n \n-/* { dg-final { if ![file exists cmdlne-dI-M.i] { return }                } }\n-   { dg-final { if { [grep cmdlne-dI-M.i \"^#define foo bar$\"] != \"\" } { fail \"cmdlne-dI-M.c: #define line printed\" } } }\n-   { dg-final { if { [grep cmdlne-dI-M.i \"variable\"] != \"\" } { fail \"cmdlne-dI-M.c: non-#define line printed\" } } }\n-   { dg-final { if { [grep cmdlne-dI-M.i \"^cmdlne-dI-M.*:.*cmdlne-dI-M.c\"] == \"\" } { xfail \"cmdlne-dI-M.c: dependency rule not printed\" } } }\n-   { dg-final { return } }  */\n+/* { dg-final { scan-file-not cmdlne-dI-M.i \"(^|\\\\n)#define foo bar($|\\\\n)\" } }\n+   { dg-final { scan-file-not cmdlne-dI-M.i \"variable\" } }\n+   { dg-final { scan-file cmdlne-dI-M.i \"(^|\\\\n)cmdlne-dI-M.*:\\[^\\\\n\\]*cmdlne-dI-M.c\" { xfail *-*-* } } } */"}, {"sha": "fb21f40f40819c49c06ae992dc096a5572077b22", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dM-M.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dM-M.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dM-M.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dM-M.c?ref=5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2002 Free Software Foundation, Inc.  */\n+/* Copyright (C) 2002, 2003 Free Software Foundation, Inc.  */\n \n /* { dg-do preprocess } */\n /* { dg-options \"-dM -M\" } */\n@@ -10,8 +10,6 @@\n #define funlike(like) fun like\n int variable;\n \n-/* { dg-final { if ![file exists cmdlne-dM-M.i] { return }                } }\n-   { dg-final { if { [grep cmdlne-dM-M.i \"^#define foo bar$\"] == \"\" } { fail \"cmdlne-dM-M.c: #define line not printed\" } } }\n-   { dg-final { if { [grep cmdlne-dM-M.i \"variable\"] != \"\" } { fail \"cmdlne-dM-M.c: non-#define line printed\" } } }\n-   { dg-final { if { [grep cmdlne-dM-M.i \"^cmdlne-dM-M.*:.*cmdlne-dM-M.c\"] == \"\" } { xfail \"cmdlne-dM-M.c: dependency rule not printed\" } } }\n-   { dg-final { return } }  */\n+/* { dg-final { scan-file cmdlne-dM-M.i \"(^|\\\\n)#define foo bar($|\\\\n)\" } }\n+   { dg-final { scan-file-not cmdlne-dM-M.i \"variable\" } }\n+   { dg-final { scan-file cmdlne-dM-M.i \"(^|\\\\n)cmdlne-dM-M\\[^\\\\n\\]*:\\[^\\\\n\\]*cmdlne-dM-M.c\" { xfail *-*-* } } } */"}, {"sha": "66ec7dd9b9335a6c7b6fbf6e19f404a3ea74f4a0", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dM-dD.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dM-dD.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dM-dD.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dM-dD.c?ref=5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2002 Free Software Foundation, Inc.  */\n+/* Copyright (C) 2002, 2003 Free Software Foundation, Inc.  */\n \n /* { dg-do preprocess } */\n /* { dg-options \"-dM -dD\" } */\n@@ -10,7 +10,5 @@\n #define funlike(like) fun like\n int variable;\n \n-/* { dg-final { if ![file exists cmdlne-dM-dD.i] { return }                } }\n-   { dg-final { if { [grep cmdlne-dM-dD.i \"^#define foo bar$\"] == \"\" } { fail \"cmdlne-dM-dD.c: #define line not printed\" } } }\n-   { dg-final { if { [grep cmdlne-dM-dD.i \"variable\"] == \"\" } { fail \"cmdlne-dM-dD.c: non-#define line not printed\" } } }\n-   { dg-final { return } }  */\n+/* { dg-final { scan-file cmdlne-dM-dD.i \"(^|\\\\n)#define foo bar($|\\\\n)\" } }\n+   { dg-final { scan-file cmdlne-dM-dD.i \"variable\" } } */"}, {"sha": "7d8c16b1c95f79d3265914f92a77d0ede66ff485", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dN-M.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dN-M.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dN-M.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dN-M.c?ref=5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2002 Free Software Foundation, Inc.  */\n+/* Copyright (C) 2002, 2003 Free Software Foundation, Inc.  */\n \n /* { dg-do preprocess } */\n /* { dg-options \"-dN -M\" } */\n@@ -10,8 +10,6 @@\n #define funlike(like) fun like\n int variable;\n \n-/* { dg-final { if ![file exists cmdlne-dN-M.i] { return }                } }\n-   { dg-final { if { [grep cmdlne-dN-M.i \"^#define foo\"] != \"\" } { fail \"cmdlne-dN-M.c: #define line printed\" } } }\n-   { dg-final { if { [grep cmdlne-dN-M.i \"variable\"] != \"\" } { fail \"cmdlne-dN-M.c: non-#define line printed\" } } }\n-   { dg-final { if { [grep cmdlne-dN-M.i \"^cmdlne-dN-M.*:.*cmdlne-dN-M.c\"] == \"\" } { xfail \"cmdlne-dN-M.c: dependency rule not printed\" } } }\n-   { dg-final { return } }  */\n+/* { dg-final { scan-file-not cmdlne-dN-M.i \"(^|\\\\n)#define foo\" } }\n+   { dg-final { scan-file-not cmdlne-dN-M.i \"variable\" } }\n+   { dg-final { scan-file cmdlne-dN-M.i \"(^|\\\\n)cmdlne-dM-M\\[^\\\\n\\]*:\\[^\\\\n\\]*cmdlne-dM-M.c\" { xfail *-*-* } } } */"}, {"sha": "8e254ff758c59c3ed4840dbe9dd06607941b1550", "filename": "gcc/testsuite/gcc.dg/cpp/cxxcom1.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcxxcom1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcxxcom1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcxxcom1.c?ref=5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d", "patch": "@@ -7,14 +7,5 @@\n /* ...but we don't bitch about it more than once.  */\n // C++ comment is not in C89  { dg-bogus \"style comment\" \"bad warning\" }\n \n-/*\n-   { dg-final { if ![file exists cxx-comments-1.i] { return }\t\t} }\n-   { dg-final { set tmp [grep cxx-comments-1.i \"is not in C89\" line]\t} }\n-   { dg-final { # send_user \"$tmp\\n\"\t\t\t\t\t} }\n-   { dg-final { if [regexp \"is not in C89\" $tmp] \\{\t\t\t} }\n-   { dg-final {     fail \"cxx-comments-1: comment strip check\"\t\t} }\n-   { dg-final { \\} else \\{\t\t\t\t\t\t} }\n-   { dg-final {     pass \"cxx-comments-1: comment strip check\"\t\t} }\n-   { dg-final { \\}\t\t\t\t\t\t\t} }\n-*/\n+/* { dg-final { scan-file-not cxxcom1.i \"is not in C89\" } } */\n "}, {"sha": "0dbb8f2feb550ca05f6fb9fcb31a2938f57a4627", "filename": "gcc/testsuite/gcc.dg/cpp/cxxcom2.c", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcxxcom2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcxxcom2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcxxcom2.c?ref=5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d", "patch": "@@ -1,20 +1,7 @@\n /* { dg-do preprocess } */\n-/* { dg-options \"-pedantic -std=c89\" } */\n+/* { dg-options \"-pedantic -std=c89 -Wall\" } */\n \n-/* This is an extension and therefore gets a warning.  */\n-#line 5 \"cxx-comments-2.c\" 3  /* { dg-warning \"extra tokens\" \"#line extension\" } */\n+#include \"cxxcom2.h\"\n \n-/* A system header may contain C++ comments irrespective of mode.  */\n-// C++ comment is not in C89  { dg-bogus \"style comment\" \"bad warning\" }\n-\n-/*\n-   { dg-final { if ![file exists cxx-comments-2.i] { return }\t\t} }\n-   { dg-final { set tmp [grep cxx-comments-2.i \"is not in C89\" line]\t} }\n-   { dg-final { # send_user \"$tmp\\n\"\t\t\t\t\t} }\n-   { dg-final { if [regexp \"is not in C89\" $tmp] \\{\t\t\t} }\n-   { dg-final {     fail \"cxx-comments-2: comment strip check\"\t\t} }\n-   { dg-final { \\} else \\{\t\t\t\t\t\t} }\n-   { dg-final {     pass \"cxx-comments-2: comment strip check\"\t\t} }\n-   { dg-final { \\}\t\t\t\t\t\t\t} }\n-*/\n+/* { dg-final { scan-file-not cxxcom2.i \"is not in C89\" } } */\n "}, {"sha": "546b8fd9217a022650c9618d0aab0c64e2d889e9", "filename": "gcc/testsuite/gcc.dg/cpp/cxxcom2.h", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcxxcom2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcxxcom2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcxxcom2.h?ref=5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d", "patch": "@@ -0,0 +1,4 @@\n+/* A system header may contain C++ comments irrespective of mode.  */\n+#pragma GCC system_header\n+// C++ comment is not in C89  { dg-bogus \"style comment\" \"bad warning\" }\n+"}, {"sha": "b13c1229d449cf95fd55f14ff6f6559b81116e49", "filename": "gcc/testsuite/gcc.dg/cpp/line1.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fline1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fline1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fline1.c?ref=5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2000  Free Software Foundation.\n+/* Copyright (C) 2000, 2003  Free Software Foundation.\n \n    by Alexandre Oliva  <oliva@lsd.ic.unicamp.br>  */\n \n@@ -9,10 +9,4 @@\n #line 10 \"baz\"\n wibble\n \n-/*\n-  { dg-final { if \\{ [grep line1.i baz] != \"\" \\} \\{ } }\n-  { dg-final {   pass \"line1.i: #line directive optimization\" } }\n-  { dg-final { \\} else \\{ } }\n-  { dg-final {   fail \"line1.i: #line directive optimization\" } }\n-  { dg-final { \\} } }\n-*/\n+/* { dg-final { scan-file line1.i baz } } */"}, {"sha": "2e01911c60906d796e597af03bf3026a38186617", "filename": "gcc/testsuite/gcc.dg/cpp/maccom1.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmaccom1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmaccom1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmaccom1.c?ref=5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d", "patch": "@@ -10,8 +10,5 @@\n \n def\n \n-/*\n-   { dg-final { if ![file exists maccom1.i] { return }                    } }\n-   { dg-final { if { [grep maccom1.i \"^passed\"] != \"\" } { return }        } }\n-   { dg-final { fail \"maccom1.c: comment between # and directive name with -CC\" } }\n-*/\n+/* { dg-final { scan-file maccom1.i \"(^|\\\\n)passed\" } } */\n+"}, {"sha": "a448082e53ced68babdc547fb1764d6506f19451", "filename": "gcc/testsuite/gcc.dg/cpp/maccom2.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmaccom2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmaccom2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmaccom2.c?ref=5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d", "patch": "@@ -11,8 +11,4 @@\n \n def\n \n-/*\n-   { dg-final { if ![file exists maccom2.i] { return }                    } }\n-   { dg-final { if { [grep maccom2.i \"^passed\"] != \"\" } { return }        } }\n-   { dg-final { fail \"maccom2.c: comment between #define and identifier with -CC\" } }\n-*/\n+/* { dg-final { scan-file maccom2.i \"(^|\\n)passed\" } } */"}, {"sha": "580c52c067d616d9e2a6b0b3e2738995c601e7ab", "filename": "gcc/testsuite/gcc.dg/cpp/maccom3.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmaccom3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmaccom3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmaccom3.c?ref=5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d", "patch": "@@ -10,8 +10,4 @@\n \n def(x,y)\n \n-/*\n-   { dg-final { if ![file exists maccom3.i] { return }                     } }\n-   { dg-final { if { [grep maccom3.i \"^passed\"] != \"\" } { return }         } }\n-   { dg-final { fail \"maccom3.c: comment in macro parameter list with -CC\" } }\n-*/\n+/* { dg-final { scan-file maccom3.i \"(^|\\n)passed\" } } */"}, {"sha": "54806c154eb38737c0c4f7e4d646ad9bb559aa2b", "filename": "gcc/testsuite/gcc.dg/cpp/maccom4.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmaccom4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmaccom4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmaccom4.c?ref=5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d", "patch": "@@ -13,7 +13,5 @@ def\n \n /*\n    /* The + in the regexp prevents it from matching itself.  */\n-   { dg-final { if ![file exists maccom4.i] { return }                    } }\n-   { dg-final { if { [grep maccom4.i \"p+assed\"] != \"\" } { return }        } }\n-   { dg-final { fail \"maccom4.c: comment in macro expansion with -CC\"     } }\n+   { dg-final { scan-file maccom4.i \"p+assed\" } }\n */"}, {"sha": "b01a045e00db8d1943cf7ebbe2bc41ca8f308b53", "filename": "gcc/testsuite/gcc.dg/cpp/maccom5.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmaccom5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmaccom5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmaccom5.c?ref=5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d", "patch": "@@ -13,9 +13,6 @@\n \n /*\n    /* The + in the regexp prevents it from matching itself.  */\n-   { dg-final { if ![file exists maccom5.i] { return }                    } }\n-   { dg-final { if \\{ [grep maccom5.i \"p+assed\"] != \"\" \\} \\{              } }\n-   { dg-final { if \\{ [grep maccom5.i \"p+assed:\"] == \"\" \\} \\{             } }\n-   { dg-final { return \\} \\}                                              } }\n-   { dg-final { fail \"maccom5.c: C++ comment in macro expansion with -CC\" } }\n+   { dg-final { scan-file maccom5.i \"p+assed\" } }\n+   { dg-final { scan-file-not maccom5.i \"p+assed:\" } }\n */"}, {"sha": "09ca87d4e72453e89332041d4f2bcdd4385f3289", "filename": "gcc/testsuite/gcc.dg/cpp/maccom6.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmaccom6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmaccom6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmaccom6.c?ref=5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d", "patch": "@@ -17,8 +17,4 @@ failed\n passed\n #endif\n \n-/*\n-   { dg-final { if ![file exists maccom6.i] { return }                    } }\n-   { dg-final { if { [grep maccom6.i \"^passed\"] != \"\" } { return }        } }\n-   { dg-final { fail \"maccom6.c: comments in macro expressions with -CC\"  } }\n-*/\n+/* { dg-final { scan-file maccom6.i \"(^|\\n)passed\" } } */"}, {"sha": "a71ebc69d88fab07aaaa8cb17fb572c161c403de", "filename": "gcc/testsuite/gcc.dg/cpp/multiline.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmultiline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmultiline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmultiline.c?ref=5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d", "patch": "@@ -18,9 +18,6 @@ L\"line 1\n   line 4\"\n /* Nowhere in the output of this file should there be a blank line.\n    We check for that in the .i file.\n-   { dg-final { if ![file exists multiline.i] { return }                } }\n-   { dg-final { if \\{ [grep multiline.i \"^$\"] == \"\" \\} \\{               } }\n-   { dg-final { return \\}                                               } }\n-   { dg-final { fail \"multiline.c: multi-line tokens\"                   } } */\n+   { dg-final { scan-file-not multiline.i \"(^|\\\\n)\\\\n\" } } */\n /* { dg-bogus \"missing term\" \"multiline strings\" { target *-*-* } 11 } */\n /* { dg-bogus \"warning\" \"warning in place of error\" { target *-*-* } 15 } */"}, {"sha": "27249600b569d31c7f8891e6aeab25a203eef76d", "filename": "gcc/testsuite/gcc.dg/cpp/spacing1.c", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fspacing1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fspacing1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fspacing1.c?ref=5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2000, 2001 Free Software Foundation, Inc.  */\n+/* Copyright (C) 2000, 2001, 2003 Free Software Foundation, Inc.  */\n \n /* { dg-do preprocess } */\n \n@@ -43,13 +43,8 @@ f (g) str\n ) f\n (bam) baz\n \n-/*\n-   { dg-final { if ![file exists spacing1.i] { return }                   } }\n-   { dg-final { if \\{ [grep spacing1.i \" 44 ;\"] != \"\" \\}              \\{  } }\n-   { dg-final { if \\{ [grep spacing1.i \"B Q B Q A Q A:\"] != \"\" \\}     \\{  } }\n-   { dg-final { if \\{ [grep spacing1.i \"f.*bar\"] == \"\" \\} \\{              } }\n-   { dg-final { if \\{ [grep spacing1.i \"^bar\"] != \"\" \\}   \\{              } }\n-   { dg-final { if \\{ [grep spacing1.i \"g \\\"1 2\\\" bam baz\"] != \"\" \\} \\{   } }\n-   { dg-final { return \\} \\} \\} \\} \\}                                     } }\n-   { dg-final { fail \"spacing1.c: spacing and new-line preservation\"      } }\n-*/\n+/* { dg-final { scan-file spacing1.i \" 44 ;\" } }\n+   { dg-final { scan-file spacing1.i \"B Q B Q A Q A:\" } }\n+   { dg-final { scan-file-not spacing1.i \"f\\[^\\n\\]*bar\" } }\n+   { dg-final { scan-file spacing1.i \"(^|\\n)bar\" } }\n+   { dg-final { scan-file spacing1.i \"g \\\"1 2\\\" bam baz\" } } */"}, {"sha": "6cfa5a3d35ad6f4ab80700a13fcd12ca1fae80ad", "filename": "gcc/testsuite/gcc.dg/cpp/spacing2.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fspacing2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fspacing2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fspacing2.c?ref=5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2001 Free Software Foundation, Inc.  */\n+/* Copyright (C) 2001, 2003 Free Software Foundation, Inc.  */\n \n /* { dg-do preprocess } */\n \n@@ -13,9 +13,4 @@\n a = EMPTY\n foo..\t\t\t\t/* No leading space on output.  */\n \n-/*\n-   { dg-final { if ![file exists spacing2.i] { return }                   } }\n-   { dg-final { if \\{ [grep spacing2.i \"^bar\\.\\.\"] != \"\" \\}           \\{  } }\n-   { dg-final { return \\}                                                 } }\n-   { dg-final { fail \"spacing2.c: spacing issues\"\t\t\t  } }\n-*/\n+/* { dg-final { scan-file spacing2.i \"(^|\\n)bar\\.\\.\" } } */"}, {"sha": "96bd371a9680e29cb031208653cdbac9d2d89bb2", "filename": "gcc/testsuite/gcc.dg/cpp/trad/cmdlne-C2.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fcmdlne-C2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fcmdlne-C2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fcmdlne-C2.c?ref=5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2002 Free Software Foundation, Inc.  */\n+/* Copyright (C) 2002, 2003 Free Software Foundation, Inc.  */\n \n /* { dg-do preprocess } */\n /* { dg-options \"-C -traditional-cpp\" } */\n@@ -7,9 +7,5 @@\n \n    Neil Booth, 24 Jun 2002.  */\n \n-/*\n-   { dg-final { if ![file exists cmdlne-C2.i] { return }                  } }\n-   { dg-final { if { [grep cmdlne-C2.i \"dg-final\"] != \"\" } { return }    } }\n-   { dg-final { fail \"cmdlne-C2.i: C comments output with -C\"        } }\n-*/\n+/* { dg-final { scan-file cmdlne-C2.i \"dg-final\" } } */\n "}, {"sha": "28602a51aeb8fb39f8a5b7f15e7476aa21c5f24b", "filename": "gcc/testsuite/gcc.dg/cpp/trad/maccom1.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmaccom1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmaccom1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmaccom1.c?ref=5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d", "patch": "@@ -10,8 +10,4 @@\n \n def\n \n-/*\n-   { dg-final { if ![file exists maccom1.i] { return }                    } }\n-   { dg-final { if { [grep maccom1.i \"^passed\"] != \"\" } { return }        } }\n-   { dg-final { fail \"maccom1.c: comment between # and directive name with -CC\" } }\n-*/\n+/* { dg-final { scan-file maccom1.i \"(^|\\n)passed\" } } */"}, {"sha": "068c357c18c064dc40a03bc19adb9bad9b3d3442", "filename": "gcc/testsuite/gcc.dg/cpp/trad/maccom2.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmaccom2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmaccom2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmaccom2.c?ref=5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d", "patch": "@@ -11,8 +11,4 @@\n \n def\n \n-/*\n-   { dg-final { if ![file exists maccom2.i] { return }                    } }\n-   { dg-final { if { [grep maccom2.i \"^passed\"] != \"\" } { return }        } }\n-   { dg-final { fail \"maccom2.c: comment between #define and identifier with -CC\" } }\n-*/\n+/* { dg-final { scan-file maccom2.i \"(^|\\n)passed\" } } */"}, {"sha": "a6eb3f854598bb1896b4f388b82895f9702b7560", "filename": "gcc/testsuite/gcc.dg/cpp/trad/maccom3.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmaccom3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmaccom3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmaccom3.c?ref=5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d", "patch": "@@ -10,8 +10,4 @@\n \n def(x,y)\n \n-/*\n-   { dg-final { if ![file exists maccom3.i] { return }                     } }\n-   { dg-final { if { [grep maccom3.i \"^passed\"] != \"\" } { return }         } }\n-   { dg-final { fail \"maccom3.c: comment in macro parameter list with -CC\" } }\n-*/\n+/* { dg-final { scan-file maccom3.i \"(^|\\n)passed\" } } */"}, {"sha": "eac52da0d3a7464ce035656d85800479b5a293ff", "filename": "gcc/testsuite/gcc.dg/cpp/trad/maccom4.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmaccom4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmaccom4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmaccom4.c?ref=5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d", "patch": "@@ -13,7 +13,5 @@ def\n \n /*\n    /* The + in the regexp prevents it from matching itself.  */\n-   { dg-final { if ![file exists maccom4.i] { return }                    } }\n-   { dg-final { if { [grep maccom4.i \"p+assed\"] != \"\" } { return }        } }\n-   { dg-final { fail \"maccom4.c: comment in macro expansion with -CC\"     } }\n+   { dg-final { scan-file maccom4.i \"p+assed\" } }\n */"}, {"sha": "baf5e980df43d127f17c8af3097ed682d3c30035", "filename": "gcc/testsuite/gcc.dg/cpp/trad/maccom6.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmaccom6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmaccom6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmaccom6.c?ref=5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d", "patch": "@@ -17,8 +17,4 @@ failed\n passed\n #endif\n \n-/*\n-   { dg-final { if ![file exists maccom6.i] { return }                    } }\n-   { dg-final { if { [grep maccom6.i \"^passed\"] != \"\" } { return }        } }\n-   { dg-final { fail \"maccom6.c: comments in macro expressions with -CC\"  } }\n-*/\n+/* { dg-final { scan-file maccom6.i \"(^|\\n)passed\" } } */"}, {"sha": "cf414fb25cd8d4e7c9a11e89ac9378ed194718f9", "filename": "gcc/testsuite/lib/scanasm.exp", "status": "modified", "additions": 55, "deletions": 53, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Flib%2Fscanasm.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d/gcc%2Ftestsuite%2Flib%2Fscanasm.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fscanasm.exp?ref=5a9f05f2ea3283d0be7884d04df6ba2088a0ec7d", "patch": "@@ -1,4 +1,4 @@\n-#   Copyright (C) 2000, 2002 Free Software Foundation, Inc.\n+#   Copyright (C) 2000, 2002, 2003 Free Software Foundation, Inc.\n \n # This program is free software; you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n@@ -18,44 +18,79 @@\n # g++-dg.exp.\n \n # Utility for scanning compiler result, invoked via dg-final.\n-# Call pass if pattern is present, otherwise fail.\n-proc scan-assembler { args } {\n-    if { [llength $args] < 1 } {\n-\terror \"scan-assembler: too few arguments\"\n+\n+# Scan the OUTPUT_FILE for a pattern.  If it is present and POSITIVE\n+# is non-zero, or it is not present and POSITIVE is zero, the test\n+# passes.  The ORIG_ARGS is the list of arguments provided by dg-final\n+# to scan-assembler.  The first element in ORIG_ARGS is the regular\n+# expression to look for in the file.  The second element, if present,\n+# is a DejaGNU target selector.\n+\n+proc dg-scan { name positive testcase output_file orig_args } {\n+    if { [llength $orig_args] < 1 } {\n+\terror \"$name: too few arguments\"\n         return\n     }\n-    if { [llength $args] > 2 } {\n-\terror \"scan-assembler: too many arguments\"\n+    if { [llength $orig_args] > 2 } {\n+\terror \"$name: too many arguments\"\n \treturn\n     }\n-    if { [llength $args] >= 2 } {\n-\tswitch [dg-process-target [lindex $args 1]] {\n+    if { [llength $orig_args] >= 2 } {\n+\tswitch [dg-process-target [lindex $orig_args 1]] {\n \t    \"S\" { }\n \t    \"N\" { return }\n \t    \"F\" { setup_xfail \"*-*-*\" }\n \t    \"P\" { }\n \t}\n     }\n \n-    # This assumes that we are two frames down from dg-test, and that\n-    # it still stores the filename of the testcase in a local variable \"name\".\n-    # A cleaner solution would require a new dejagnu release.\n-    upvar 2 name testcase\n-\n-    # This must match the rule in gcc-dg.exp.\n-    set output_file \"[file rootname [file tail $testcase]].s\"\n-\n     set fd [open $output_file r]\n     set text [read $fd]\n     close $fd\n \n-    if [regexp -- [lindex $args 0] $text] {\n-\tpass \"$testcase scan-assembler [lindex $args 0]\"\n+    set match [regexp -- [lindex $orig_args 0] $text]\n+    if { $match == $positive } {\n+\tpass \"$testcase $name [lindex $orig_args 0]\"\n     } else {\n-\tfail \"$testcase scan-assembler [lindex $args 0]\"\n+\tfail \"$testcase $name [lindex $orig_args 0]\"\n     }\n }\n \n+# Look for a pattern in the .s file produced by the compiler.  See\n+# dg-scan for details.\n+\n+proc scan-assembler { args } {\n+    upvar 2 name testcase\n+    set output_file \"[file rootname [file tail $testcase]].s\"\n+\n+    dg-scan \"scan-assembler\" 1 $testcase $output_file $args\n+}\n+\n+# Check that a pattern is not present in the .s file produced by the\n+# compiler.  See dg-scan for details.\n+\n+proc scan-assembler-not { args } {\n+    upvar 2 name testcase\n+    set output_file \"[file rootname [file tail $testcase]].s\"\n+\n+    dg-scan \"scan-assembler-not\" 0 $testcase $output_file $args\n+}\n+\n+# Look for a pattern in OUTPUT_FILE.  See dg-scan for details.\n+\n+proc scan-file { output_file args } {\n+    upvar 2 name testcase\n+    dg-scan \"scan-file\" 1 $testcase $output_file $args\n+}\n+\n+# Check that a pattern is not present in the OUTPUT_FILE.  See dg-scan\n+# for details.\n+\n+proc scan-file-not { output_file args } {\n+    upvar 2 name testcase\n+    dg-scan \"scan-file-not\" 0 $testcase $output_file $args\n+}\n+\n # Call pass if pattern is present given number of times, otherwise fail.\n proc scan-assembler-times { args } {\n     if { [llength $args] < 2 } {\n@@ -94,39 +129,6 @@ proc scan-assembler-times { args } {\n     }\n }\n \n-# Call pass if pattern is not present, otherwise fail.\n-proc scan-assembler-not { args } {\n-    if { [llength $args] < 1 } {\n-\terror \"scan-assembler-not: too few arguments\"\n-        return\n-    }\n-    if { [llength $args] > 2 } {\n-\terror \"scan-assembler-not: too many arguments\"\n-\treturn\n-    }\n-    if { [llength $args] >= 2 } {\n-\tswitch [dg-process-target [lindex $args 1]] {\n-\t    \"S\" { }\n-\t    \"N\" { return }\n-\t    \"F\" { setup_xfail \"*-*-*\" }\n-\t    \"P\" { }\n-\t}\n-    }\n-\n-    upvar 2 name testcase\n-    set output_file \"[file rootname [file tail $testcase]].s\"\n-\n-    set fd [open $output_file r]\n-    set text [read $fd]\n-    close $fd\n-\n-    if ![regexp -- [lindex $args 0] $text] {\n-\tpass \"$testcase scan-assembler-not [lindex $args 0]\"\n-    } else {\n-\tfail \"$testcase scan-assembler-not [lindex $args 0]\"\n-    }\n-}\n-\n # Utility for scanning demangled compiler result, invoked via dg-final.\n # Call pass if pattern is present, otherwise fail.\n proc scan-assembler-dem { args } {"}]}