{"sha": "48d8568e1f69a3459e236831ed6d17a05384eb5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhkODU2OGUxZjY5YTM0NTllMjM2ODMxZWQ2ZDE3YTA1Mzg0ZWI1ZA==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-05-16T22:54:32Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-05-16T22:54:32Z"}, "message": "re PR target/51244 ([SH] Inefficient conditional branch and code around T bit)\n\ngcc/\n\tPR target/51244\n\t* config/sh/sh.c (sh_eval_treg_value): Handle t_reg_operand and\n\tnegt_reg_operand cases.\n\t* config/sh/sh.md (*cset_zero): Likewise by using cbranch_treg_value\n\tpredicate.\n\t* config/sh/predicates.md (cbranch_treg_value): Simplify.\n\nFrom-SVN: r210535", "tree": {"sha": "6b0a253f4b48111e2ec57c6ec646fbdadeba8b9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b0a253f4b48111e2ec57c6ec646fbdadeba8b9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48d8568e1f69a3459e236831ed6d17a05384eb5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48d8568e1f69a3459e236831ed6d17a05384eb5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48d8568e1f69a3459e236831ed6d17a05384eb5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48d8568e1f69a3459e236831ed6d17a05384eb5d/comments", "author": null, "committer": null, "parents": [{"sha": "d580af0f7a9ba7eaf20d448986cc0da4d27e80ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d580af0f7a9ba7eaf20d448986cc0da4d27e80ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d580af0f7a9ba7eaf20d448986cc0da4d27e80ef"}], "stats": {"total": 38, "additions": 29, "deletions": 9}, "files": [{"sha": "2af2ef3b7b85e99cb75a53b1716deccb3a24845a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48d8568e1f69a3459e236831ed6d17a05384eb5d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48d8568e1f69a3459e236831ed6d17a05384eb5d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=48d8568e1f69a3459e236831ed6d17a05384eb5d", "patch": "@@ -1,3 +1,12 @@\n+2014-05-16  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/51244\n+\t* config/sh/sh.c (sh_eval_treg_value): Handle t_reg_operand and\n+\tnegt_reg_operand cases.\n+\t* config/sh/sh.md (*cset_zero): Likewise by using cbranch_treg_value\n+\tpredicate.\n+\t* config/sh/predicates.md (cbranch_treg_value): Simplify.\n+\n 2014-05-16  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \t* config/sh/sh.c (sh_option_override): Set branch cost to 2 for all"}, {"sha": "1307bbf7d3bdc55695b33ae3fb2cc9fdfa70f489", "filename": "gcc/config/sh/predicates.md", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48d8568e1f69a3459e236831ed6d17a05384eb5d/gcc%2Fconfig%2Fsh%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48d8568e1f69a3459e236831ed6d17a05384eb5d/gcc%2Fconfig%2Fsh%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fpredicates.md?ref=48d8568e1f69a3459e236831ed6d17a05384eb5d", "patch": "@@ -1119,10 +1119,8 @@\n ;; A predicate that returns true if OP is a valid construct around the T bit\n ;; that can be used as an operand for conditional branches.\n (define_predicate \"cbranch_treg_value\"\n-  (match_code \"eq,ne,reg,subreg,xor,sign_extend,zero_extend\")\n-{\n-  return sh_eval_treg_value (op) >= 0;\n-})\n+  (and (match_code \"eq,ne,reg,subreg,xor,sign_extend,zero_extend\")\n+       (match_test \"sh_eval_treg_value (op) >= 0\")))\n \n ;; Returns true if OP is arith_reg_operand or t_reg_operand.\n (define_predicate \"arith_reg_or_t_reg_operand\""}, {"sha": "a0c46283e2ec9d117917aa6eb2a699ff4c683793", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48d8568e1f69a3459e236831ed6d17a05384eb5d/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48d8568e1f69a3459e236831ed6d17a05384eb5d/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=48d8568e1f69a3459e236831ed6d17a05384eb5d", "patch": "@@ -2250,7 +2250,12 @@ expand_cbranchdi4 (rtx *operands, enum rtx_code comparison)\n int\n sh_eval_treg_value (rtx op)\n {\n-  enum rtx_code code = GET_CODE (op);\n+  if (t_reg_operand (op, GET_MODE (op)))\n+    return 1;\n+  if (negt_reg_operand (op, GET_MODE (op)))\n+    return 0;\n+\n+  rtx_code code = GET_CODE (op);\n   if ((code != EQ && code != NE) || !CONST_INT_P (XEXP (op, 1)))\n     return -1;\n "}, {"sha": "640188e5d5620ff30fa8a158ea99b8b35e236fa1", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48d8568e1f69a3459e236831ed6d17a05384eb5d/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48d8568e1f69a3459e236831ed6d17a05384eb5d/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=48d8568e1f69a3459e236831ed6d17a05384eb5d", "patch": "@@ -11624,14 +11624,22 @@ label:\n \n (define_insn \"*cset_zero\"\n   [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n-\t(if_then_else:SI (match_operand:SI 1 \"t_reg_operand\")\n+\t(if_then_else:SI (match_operand:SI 1 \"cbranch_treg_value\")\n \t\t\t (match_operand:SI 2 \"arith_reg_operand\" \"0\")\n \t\t\t (const_int 0)))]\n   \"TARGET_SH1 && TARGET_ZDCBRANCH\"\n {\n-  return       \"bt\t0f\"\t\"\\n\"\n-\t \"\tmov\t#0,%0\"\t\"\\n\"\n-\t \"0:\";\n+  int tval = sh_eval_treg_value (operands[1]);\n+  if (tval == true)\n+    return     \"bt\t0f\"\t\"\\n\"\n+\t   \"\tmov\t#0,%0\"\t\"\\n\"\n+\t   \"0:\";\n+  else if (tval == false)\n+    return     \"bf\t0f\"\t\"\\n\"\n+\t   \"\tmov\t#0,%0\"\t\"\\n\"\n+\t   \"0:\";\n+  else\n+    gcc_unreachable ();\n }\n   [(set_attr \"type\" \"arith\") ;; poor approximation\n    (set_attr \"length\" \"4\")])"}]}