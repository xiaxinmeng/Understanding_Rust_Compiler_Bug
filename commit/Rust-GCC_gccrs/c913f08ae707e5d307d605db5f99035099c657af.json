{"sha": "c913f08ae707e5d307d605db5f99035099c657af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzkxM2YwOGFlNzA3ZTVkMzA3ZDYwNWRiNWY5OTAzNTA5OWM2NTdhZg==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "rakdver@atrey.karlin.mff.cuni.cz", "date": "2004-08-05T21:33:21Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2004-08-05T21:33:21Z"}, "message": "tree-ssa-loop-manip.c: New file.\n\n\t* tree-ssa-loop-manip.c: New file.\n\t* Makefile.in (tree-ssa-loop-manip.o): Add.\n\t* tree-flow.h (rewrite_into_loop_closed_ssa, verify_loop_closed_ssa):\n\tDeclare.\n\t* tree-ssa-loop.c (tree_loop_optimizer_init): Create loop closed ssa\n\tform.\n\t(tree_ssa_loop_done): Verify loop closed ssa form.\n\t* tree-ssa-loop-im.c (move_computations): Update loop closed ssa form.\n\nFrom-SVN: r85613", "tree": {"sha": "e51628740931c0a8c1eeb06f3739d49e38c6827c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e51628740931c0a8c1eeb06f3739d49e38c6827c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c913f08ae707e5d307d605db5f99035099c657af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c913f08ae707e5d307d605db5f99035099c657af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c913f08ae707e5d307d605db5f99035099c657af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c913f08ae707e5d307d605db5f99035099c657af/comments", "author": null, "committer": null, "parents": [{"sha": "48a8c56547c5651a58c1e612444db7c7f51a6a3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48a8c56547c5651a58c1e612444db7c7f51a6a3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48a8c56547c5651a58c1e612444db7c7f51a6a3c"}], "stats": {"total": 374, "additions": 373, "deletions": 1}, "files": [{"sha": "33753a63bb66334771e4f150faca9c7437735b1b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c913f08ae707e5d307d605db5f99035099c657af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c913f08ae707e5d307d605db5f99035099c657af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c913f08ae707e5d307d605db5f99035099c657af", "patch": "@@ -1,3 +1,14 @@\n+2004-08-05  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n+\n+\t* tree-ssa-loop-manip.c: New file.\n+\t* Makefile.in (tree-ssa-loop-manip.o): Add.\n+\t* tree-flow.h (rewrite_into_loop_closed_ssa, verify_loop_closed_ssa):\n+\tDeclare.\n+\t* tree-ssa-loop.c (tree_loop_optimizer_init): Create loop closed ssa\n+\tform.\n+\t(tree_ssa_loop_done): Verify loop closed ssa form.\n+\t* tree-ssa-loop-im.c (move_computations): Update loop closed ssa form.\n+\n 2004-08-05  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* pa.c (pa_asm_output_aligned_bss, pa_asm_output_aligned_common,"}, {"sha": "7215087fb1fe890b0f6868a969735746eda74cfa", "filename": "gcc/Makefile.in", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c913f08ae707e5d307d605db5f99035099c657af/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c913f08ae707e5d307d605db5f99035099c657af/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=c913f08ae707e5d307d605db5f99035099c657af", "patch": "@@ -898,7 +898,7 @@ OBJS-common = \\\n  tree-ssa-phiopt.o tree-ssa-forwprop.o tree-nested.o tree-ssa-dse.o\t   \\\n  tree-ssa-dom.o domwalk.o tree-tailcall.o gimple-low.o tree-iterator.o\t   \\\n  tree-phinodes.o tree-ssanames.o tree-sra.o tree-complex.o tree-ssa-loop.o \\\n- tree-ssa-loop-niter.o \\\n+ tree-ssa-loop-niter.o tree-ssa-loop-manip.o\t\t\t\t   \\\n  alias.o bb-reorder.o bitmap.o builtins.o caller-save.o calls.o\t  \t   \\\n  cfg.o cfganal.o cfgbuild.o cfgcleanup.o cfglayout.o cfgloop.o\t\t   \\\n  cfgloopanal.o cfgloopmanip.o loop-init.o loop-unswitch.o loop-unroll.o\t   \\\n@@ -1689,6 +1689,10 @@ tree-ssa-loop-ch.o : tree-ssa-loop-ch.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(RTL_H) $(TREE_H) $(TM_P_H) $(CFGLOOP_H) tree-inline.h \\\n    output.h diagnostic.h $(TIMEVAR_H) $(TM_H) coretypes.h $(TREE_DUMP_H) \\\n    tree-pass.h flags.h\n+tree-ssa-loop-manip.o : tree-ssa-loop-manip.c $(TREE_FLOW_H) $(CONFIG_H) \\\n+   $(SYSTEM_H) $(RTL_H) $(TREE_H) $(TM_P_H) $(CFGLOOP_H) \\\n+   output.h diagnostic.h $(TIMEVAR_H) $(TM_H) coretypes.h $(TREE_DUMP_H) \\\n+   tree-pass.h cfglayout.h\n tree-ssa-loop-im.o : tree-ssa-loop-im.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(RTL_H) $(TREE_H) $(TM_P_H) $(CFGLOOP_H) domwalk.h $(PARAMS_H)\\\n    output.h diagnostic.h $(TIMEVAR_H) $(TM_H) coretypes.h $(TREE_DUMP_H) \\"}, {"sha": "f55943b5cdbc702b229cad98cdee93862ba207b6", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c913f08ae707e5d307d605db5f99035099c657af/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c913f08ae707e5d307d605db5f99035099c657af/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=c913f08ae707e5d307d605db5f99035099c657af", "patch": "@@ -645,6 +645,8 @@ tree find_loop_niter_by_eval (struct loop *, edge *);\n void estimate_numbers_of_iterations (struct loops *);\n tree can_count_iv_in_wider_type (struct loop *, tree, tree, tree, tree);\n void free_numbers_of_iterations_estimates (struct loops *);\n+void rewrite_into_loop_closed_ssa (void);\n+void verify_loop_closed_ssa (void);\n void loop_commit_inserts (void);\n bool for_each_index (tree *, bool (*) (tree, tree *, void *), void *);\n "}, {"sha": "465442615cbcbebb49daf75440b50343fb043341", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c913f08ae707e5d307d605db5f99035099c657af/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c913f08ae707e5d307d605db5f99035099c657af/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=c913f08ae707e5d307d605db5f99035099c657af", "patch": "@@ -675,6 +675,13 @@ move_computations (void)\n \n   loop_commit_inserts ();\n   rewrite_into_ssa (false);\n+  if (bitmap_first_set_bit (vars_to_rename) >= 0)\n+    {\n+      /* The rewrite of ssa names may cause violation of loop closed ssa\n+\t form invariants.  TODO -- avoid these rewrites completely.\n+\t Information in virtual phi nodes is sufficient for it.  */\n+      rewrite_into_loop_closed_ssa ();\n+    }\n   bitmap_clear (vars_to_rename);\n }\n "}, {"sha": "19b0ca25589103144913c0561df1fd39397bba76", "filename": "gcc/tree-ssa-loop-manip.c", "status": "added", "additions": 339, "deletions": 0, "changes": 339, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c913f08ae707e5d307d605db5f99035099c657af/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c913f08ae707e5d307d605db5f99035099c657af/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=c913f08ae707e5d307d605db5f99035099c657af", "patch": "@@ -0,0 +1,339 @@\n+/* High-level loop manipulation functions.\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+   \n+This file is part of GCC.\n+   \n+GCC is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 2, or (at your option) any\n+later version.\n+   \n+GCC is distributed in the hope that it will be useful, but WITHOUT\n+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+   \n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"tree.h\"\n+#include \"rtl.h\"\n+#include \"tm_p.h\"\n+#include \"hard-reg-set.h\"\n+#include \"basic-block.h\"\n+#include \"output.h\"\n+#include \"diagnostic.h\"\n+#include \"tree-flow.h\"\n+#include \"tree-dump.h\"\n+#include \"timevar.h\"\n+#include \"cfgloop.h\"\n+#include \"tree-pass.h\"\n+#include \"cfglayout.h\"\n+#include \"tree-scalar-evolution.h\"\n+\n+/* Add exit phis for the USE on EXIT.  */\n+\n+static void\n+add_exit_phis_edge (basic_block exit, tree use)\n+{\n+  tree phi, def_stmt = SSA_NAME_DEF_STMT (use);\n+  basic_block def_bb = bb_for_stmt (def_stmt);\n+  struct loop *def_loop;\n+  edge e;\n+\n+  /* Check that some of the edges entering the EXIT block exits a loop in\n+     that USE is defined.  */\n+  for (e = exit->pred; e; e = e->pred_next)\n+    {\n+      def_loop = find_common_loop (def_bb->loop_father, e->src->loop_father);\n+      if (!flow_bb_inside_loop_p (def_loop, e->dest))\n+\tbreak;\n+    }\n+\n+  if (!e)\n+    return;\n+\n+  phi = create_phi_node (use, exit);\n+\n+  for (e = exit->pred; e; e = e->pred_next)\n+    add_phi_arg (&phi, use, e);\n+\n+  SSA_NAME_DEF_STMT (use) = def_stmt;\n+}\n+\n+/* Add exit phis for VAR that is used in LIVEIN.\n+   Exits of the loops are stored in EXITS.  */\n+\n+static void\n+add_exit_phis_var (tree var, bitmap livein, bitmap exits)\n+{\n+  bitmap def;\n+  int index;\n+  basic_block def_bb = bb_for_stmt (SSA_NAME_DEF_STMT (var));\n+\n+  bitmap_clear_bit (livein, def_bb->index);\n+\n+  def = BITMAP_XMALLOC ();\n+  bitmap_set_bit (def, def_bb->index);\n+  compute_global_livein (livein, def);\n+  BITMAP_XFREE (def);\n+\n+  EXECUTE_IF_AND_IN_BITMAP (exits, livein, 0, index,\n+\t\t\t    add_exit_phis_edge (BASIC_BLOCK (index), var));\n+}\n+\n+/* Add exit phis for the names marked in NAMES_TO_RENAME.\n+   Exits of the loops are stored in EXITS.  Sets of blocks where the ssa\n+   names are used are stored in USE_BLOCKS.  */\n+\n+static void\n+add_exit_phis (bitmap names_to_rename, bitmap *use_blocks, bitmap loop_exits)\n+{\n+  unsigned i;\n+\n+  EXECUTE_IF_SET_IN_BITMAP (names_to_rename, 0, i,\n+    {\n+      add_exit_phis_var (ssa_name (i), use_blocks[i], loop_exits);\n+    });\n+}\n+\n+/* Returns a bitmap of all loop exit edge targets.  */\n+\n+static bitmap\n+get_loops_exits (void)\n+{\n+  bitmap exits = BITMAP_XMALLOC ();\n+  basic_block bb;\n+  edge e;\n+\n+  FOR_EACH_BB (bb)\n+    {\n+      for (e = bb->pred; e; e = e->pred_next)\n+\tif (e->src != ENTRY_BLOCK_PTR\n+\t    && !flow_bb_inside_loop_p (e->src->loop_father, bb))\n+\t  {\n+\t    bitmap_set_bit (exits, bb->index);\n+\t    break;\n+\t  }\n+    }\n+\n+  return exits;\n+}\n+\n+/* For USE in BB, if it is used outside of the loop it is defined in,\n+   mark it for rewrite.  Record basic block BB where it is used\n+   to USE_BLOCKS.  */\n+\n+static void\n+find_uses_to_rename_use (basic_block bb, tree use, bitmap *use_blocks)\n+{\n+  unsigned ver;\n+  basic_block def_bb;\n+  struct loop *def_loop;\n+\n+  if (TREE_CODE (use) != SSA_NAME)\n+    return;\n+\n+  ver = SSA_NAME_VERSION (use);\n+  def_bb = bb_for_stmt (SSA_NAME_DEF_STMT (use));\n+  if (!def_bb)\n+    return;\n+  def_loop = def_bb->loop_father;\n+\n+  /* If the definition is not inside loop, it is not interesting.  */\n+  if (!def_loop->outer)\n+    return;\n+\n+  if (!use_blocks[ver])\n+    use_blocks[ver] = BITMAP_XMALLOC ();\n+  bitmap_set_bit (use_blocks[ver], bb->index);\n+\n+  if (!flow_bb_inside_loop_p (def_loop, bb))\n+    mark_for_rewrite (use);\n+}\n+\n+/* For uses in STMT, mark names that are used outside of the loop they are\n+   defined to rewrite.  Record the set of blocks in that the ssa\n+   names are defined to USE_BLOCKS.  */\n+\n+static void\n+find_uses_to_rename_stmt (tree stmt, bitmap *use_blocks)\n+{\n+  use_optype uses;\n+  vuse_optype vuses;\n+  v_may_def_optype v_may_defs;\n+  stmt_ann_t ann;\n+  unsigned i;\n+  basic_block bb = bb_for_stmt (stmt);\n+\n+  get_stmt_operands (stmt);\n+  ann = stmt_ann (stmt);\n+\n+  uses = USE_OPS (ann);\n+  for (i = 0; i < NUM_USES (uses); i++)\n+    find_uses_to_rename_use (bb, USE_OP (uses, i), use_blocks);\n+\n+  vuses = VUSE_OPS (ann);\n+  for (i = 0; i < NUM_VUSES (vuses); i++)\n+    find_uses_to_rename_use (bb, VUSE_OP (vuses, i),use_blocks);\n+\n+  v_may_defs = V_MAY_DEF_OPS (ann);\n+  for (i = 0; i < NUM_V_MAY_DEFS (v_may_defs); i++)\n+    find_uses_to_rename_use (bb, V_MAY_DEF_OP (v_may_defs, i), use_blocks);\n+}\n+\n+/* Marks names that are used outside of the loop they are defined in\n+   for rewrite.  Records the set of blocks in that the ssa\n+   names are defined to USE_BLOCKS.  */\n+\n+static void\n+find_uses_to_rename (bitmap *use_blocks)\n+{\n+  basic_block bb;\n+  block_stmt_iterator bsi;\n+  tree phi;\n+  unsigned i;\n+\n+  FOR_EACH_BB (bb)\n+    {\n+      for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+\tfor (i = 0; i < (unsigned) PHI_NUM_ARGS (phi); i++)\n+\t  find_uses_to_rename_use (PHI_ARG_EDGE (phi, i)->src,\n+\t\t\t\t   PHI_ARG_DEF (phi, i), use_blocks);\n+\n+      for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n+\tfind_uses_to_rename_stmt (bsi_stmt (bsi), use_blocks);\n+    }\n+}\n+\n+/* Rewrites the program into a loop closed ssa form -- i.e. inserts extra\n+   phi nodes to ensure that no variable is used outside the loop it is\n+   defined in.\n+\n+   This strengthening of the basic ssa form has several advantages:\n+\n+   1) Updating it during unrolling/peeling/versioning is trivial, since\n+      we do not need to care about the uses outside of the loop.\n+   2) The behavior of all uses of an induction variable is the same.\n+      Without this, you need to distinguish the case when the variable\n+      is used outside of the loop it is defined in, for example\n+\n+      for (i = 0; i < 100; i++)\n+\t{\n+\t  for (j = 0; j < 100; j++)\n+\t    {\n+\t      k = i + j;\n+\t      use1 (k);\n+\t    }\n+\t  use2 (k);\n+\t}\n+\n+      Looking from the outer loop with the normal SSA form, the first use of k\n+      is not well-behaved, while the second one is an induction variable with\n+      base 99 and step 1.  */\n+\n+void\n+rewrite_into_loop_closed_ssa (void)\n+{\n+  bitmap loop_exits = get_loops_exits ();\n+  bitmap *use_blocks;\n+  unsigned i;\n+  bitmap names_to_rename;\n+\n+  if (any_marked_for_rewrite_p ())\n+    abort ();\n+\n+  use_blocks = xcalloc (num_ssa_names, sizeof (bitmap));\n+\n+  /* Find the uses outside loops.  */\n+  find_uses_to_rename (use_blocks);\n+\n+  /* Add the phi nodes on exits of the loops for the names we need to\n+     rewrite.  */\n+  names_to_rename = marked_ssa_names ();\n+  add_exit_phis (names_to_rename, use_blocks, loop_exits);\n+\n+  for (i = 0; i < num_ssa_names; i++)\n+    BITMAP_XFREE (use_blocks[i]);\n+  free (use_blocks);\n+  BITMAP_XFREE (loop_exits);\n+  BITMAP_XFREE (names_to_rename);\n+\n+  /* Do the rewriting.  */\n+  rewrite_ssa_into_ssa ();\n+}\n+\n+/* Check invariants of the loop closed ssa form for the USE in BB.  */\n+\n+static void\n+check_loop_closed_ssa_use (basic_block bb, tree use)\n+{\n+  tree def;\n+  basic_block def_bb;\n+  \n+  if (TREE_CODE (use) != SSA_NAME)\n+    return;\n+\n+  def = SSA_NAME_DEF_STMT (use);\n+  def_bb = bb_for_stmt (def);\n+  if (def_bb\n+      && !flow_bb_inside_loop_p (def_bb->loop_father, bb))\n+    abort ();\n+}\n+\n+/* Checks invariants of loop closed ssa form in statement STMT in BB.  */\n+\n+static void\n+check_loop_closed_ssa_stmt (basic_block bb, tree stmt)\n+{\n+  use_optype uses;\n+  vuse_optype vuses;\n+  v_may_def_optype v_may_defs;\n+  stmt_ann_t ann;\n+  unsigned i;\n+\n+  get_stmt_operands (stmt);\n+  ann = stmt_ann (stmt);\n+\n+  uses = USE_OPS (ann);\n+  for (i = 0; i < NUM_USES (uses); i++)\n+    check_loop_closed_ssa_use (bb, USE_OP (uses, i));\n+\n+  vuses = VUSE_OPS (ann);\n+  for (i = 0; i < NUM_VUSES (vuses); i++)\n+    check_loop_closed_ssa_use (bb, VUSE_OP (vuses, i));\n+\n+  v_may_defs = V_MAY_DEF_OPS (ann);\n+  for (i = 0; i < NUM_V_MAY_DEFS (v_may_defs); i++)\n+    check_loop_closed_ssa_use (bb, V_MAY_DEF_OP (v_may_defs, i));\n+}\n+\n+/* Checks that invariants of the loop closed ssa form are preserved.  */\n+\n+void\n+verify_loop_closed_ssa (void)\n+{\n+  basic_block bb;\n+  block_stmt_iterator bsi;\n+  tree phi;\n+  unsigned i;\n+\n+  verify_ssa ();\n+\n+  FOR_EACH_BB (bb)\n+    {\n+      for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+\tfor (i = 0; i < (unsigned) PHI_NUM_ARGS (phi); i++)\n+\t  check_loop_closed_ssa_use (PHI_ARG_EDGE (phi, i)->src,\n+\t\t\t\t     PHI_ARG_DEF (phi, i));\n+\n+      for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n+\tcheck_loop_closed_ssa_stmt (bb, bsi_stmt (bsi));\n+    }\n+}"}, {"sha": "a1e6494712a501a6753c9efe3546ca364c20bf61", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c913f08ae707e5d307d605db5f99035099c657af/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c913f08ae707e5d307d605db5f99035099c657af/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=c913f08ae707e5d307d605db5f99035099c657af", "patch": "@@ -60,6 +60,11 @@ tree_loop_optimizer_init (FILE *dump)\n   rewrite_into_ssa (false);\n   bitmap_clear (vars_to_rename);\n \n+  rewrite_into_loop_closed_ssa ();\n+#ifdef ENABLE_CHECKING\n+  verify_loop_closed_ssa ();\n+#endif\n+\n   return loops;\n }\n \n@@ -152,6 +157,10 @@ tree_ssa_loop_done (void)\n   if (!current_loops)\n     return;\n \n+#ifdef ENABLE_CHECKING\n+  verify_loop_closed_ssa ();\n+#endif\n+\n   loop_optimizer_finalize (current_loops,\n \t\t\t   (dump_flags & TDF_DETAILS ? dump_file : NULL));\n   current_loops = NULL;"}]}