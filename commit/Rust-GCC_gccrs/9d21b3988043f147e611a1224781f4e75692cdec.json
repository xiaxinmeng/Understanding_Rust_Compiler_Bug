{"sha": "9d21b3988043f147e611a1224781f4e75692cdec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQyMWIzOTg4MDQzZjE0N2U2MTFhMTIyNDc4MWY0ZTc1NjkyY2RlYw==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2018-08-17T19:06:52Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2018-08-17T19:06:52Z"}, "message": "C-SKY port: Testsuite\n\n2018-08-17  Sandra Loosemore  <sandra@codesourcery.com>\n\t    Chung-Lin Tang  <cltang@codesourcery.com>\n\t    Xianmiao Qu  <xianmiao_qu@c-sky.com>\n\n\tC-SKY port: Testsuite\n\n\tgcc/testsuite/\n\t* g++.dg/Wno-frame-address.C: Adjust for C-SKY.\n\t* g++.dg/torture/type-generic-1.C: Likewise.\n\t* gcc.c-torture/compile/20000804-1.c: Likewise.\n\t* gcc.c-torture/execute/20101011-1.c: Likewise.\n\t* gcc.c-torture/execute/ieee/mul-subnormal-single-1.x: Likewise.\n\t* gcc.dg/20020312-2.c: Likewise.\n\t* gcc.dg/Wno-frame-address.c: Likewise.\n\t* gcc.dg/c11-true_min-1.c: Likewise.\n\t* gcc.dg/sibcall-10.c: Likewise.\n\t* gcc.dg/sibcall-9.c: Likewise.\n\t* gcc.dg/stack-usage-1.c: Likewise.\n\t* gcc.dg/torture/float32-tg-3.c: Likewise.\n\t* gcc.dg/torture/float32x-tg-3.c: Likewise.\n\t* gcc.dg/torture/float64-tg-3.c: Likewise.\n\t* gcc.dg/torture/float64x-tg-3.c: Likewise.\n\t* gcc.dg/torture/type-generic-1.c: Likewise.\n\t* gcc.target/csky/*: New.\n\t* lib/target-supports.exp (check_profiling_available): Add\n\tcsky-*-elf.\n\t(check_effective_target_hard_float): Handle C-SKY targets with\n\tsingle-precision hard float only.\n\t(check_effective_target_logical_op_short_circuit): Handle C-SKY.\n\nCo-Authored-By: Chung-Lin Tang <cltang@codesourcery.com>\nCo-Authored-By: Xianmiao Qu <xianmiao_qu@c-sky.com>\n\nFrom-SVN: r263630", "tree": {"sha": "3e348622422c1c54b49eb4a22d51c52c5ad8d296", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e348622422c1c54b49eb4a22d51c52c5ad8d296"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d21b3988043f147e611a1224781f4e75692cdec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d21b3988043f147e611a1224781f4e75692cdec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d21b3988043f147e611a1224781f4e75692cdec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d21b3988043f147e611a1224781f4e75692cdec/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fbceb769e61bfed5f87736eecd065f4ee5ac738b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbceb769e61bfed5f87736eecd065f4ee5ac738b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbceb769e61bfed5f87736eecd065f4ee5ac738b"}], "stats": {"total": 475, "additions": 471, "deletions": 4}, "files": [{"sha": "ea1f1fa6061fe98d77ebc289b0a6e00c57938b9d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9d21b3988043f147e611a1224781f4e75692cdec", "patch": "@@ -1,3 +1,32 @@\n+2018-08-17  Sandra Loosemore  <sandra@codesourcery.com>\n+\t    Chung-Lin Tang  <cltang@codesourcery.com>\n+\t    Xianmiao Qu  <xianmiao_qu@c-sky.com>\n+\n+\tC-SKY port: Testsuite\n+\n+\t* g++.dg/Wno-frame-address.C: Adjust for C-SKY.\n+\t* g++.dg/torture/type-generic-1.C: Likewise.\n+\t* gcc.c-torture/compile/20000804-1.c: Likewise.\n+\t* gcc.c-torture/execute/20101011-1.c: Likewise.\n+\t* gcc.c-torture/execute/ieee/mul-subnormal-single-1.x: Likewise.\n+\t* gcc.dg/20020312-2.c: Likewise.\n+\t* gcc.dg/Wno-frame-address.c: Likewise.\n+\t* gcc.dg/c11-true_min-1.c: Likewise.\n+\t* gcc.dg/sibcall-10.c: Likewise.\n+\t* gcc.dg/sibcall-9.c: Likewise.\n+\t* gcc.dg/stack-usage-1.c: Likewise.\n+\t* gcc.dg/torture/float32-tg-3.c: Likewise.\n+\t* gcc.dg/torture/float32x-tg-3.c: Likewise.\n+\t* gcc.dg/torture/float64-tg-3.c: Likewise.\n+\t* gcc.dg/torture/float64x-tg-3.c: Likewise.\n+\t* gcc.dg/torture/type-generic-1.c: Likewise.\n+\t* gcc.target/csky/*: New.\n+\t* lib/target-supports.exp (check_profiling_available): Add\n+\tcsky-*-elf.\n+\t(check_effective_target_hard_float): Handle C-SKY targets with\n+\tsingle-precision hard float only.\n+\t(check_effective_target_logical_op_short_circuit): Handle C-SKY.\n+\n 2018-08-17  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc.dg/format/gcc_diag-1.c: Fix typo.  Add test coverage for"}, {"sha": "54a02fe8c9fb3d1252098427ffbb3da54378eb76", "filename": "gcc/testsuite/g++.dg/Wno-frame-address.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FWno-frame-address.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FWno-frame-address.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FWno-frame-address.C?ref=9d21b3988043f147e611a1224781f4e75692cdec", "patch": "@@ -1,5 +1,5 @@\n // { dg-do compile }\n-// { dg-skip-if \"Cannot access arbitrary stack frames.\" { arm*-*-* hppa*-*-* ia64-*-* } }\n+// { dg-skip-if \"Cannot access arbitrary stack frames.\" { arm*-*-* hppa*-*-* ia64-*-* csky*-*-* } }\n // { dg-options \"-Werror\" }\n // { dg-additional-options \"-mbackchain\" { target s390*-*-* } }\n "}, {"sha": "7708724afe5c214f290f22fedb5ee51f35d8230a", "filename": "gcc/testsuite/g++.dg/torture/type-generic-1.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Ftype-generic-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Ftype-generic-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Ftype-generic-1.C?ref=9d21b3988043f147e611a1224781f4e75692cdec", "patch": "@@ -4,6 +4,7 @@\n /* { dg-do run } */\n /* { dg-add-options ieee } */\n /* { dg-skip-if \"No Inf/NaN support\" { spu-*-* } } */\n+/* { dg-skip-if \"No subnormal support\" { csky-*-* } { \"-mhard-float\" } } */\n \n #include \"../../gcc.dg/tg-tests.h\"\n "}, {"sha": "35464c212d2dfe909259b15fe4780e57e6a5003e", "filename": "gcc/testsuite/gcc.c-torture/compile/20000804-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000804-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000804-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000804-1.c?ref=9d21b3988043f147e611a1224781f4e75692cdec", "patch": "@@ -4,6 +4,7 @@\n /* { dg-skip-if \"\" { { i?86-*-* x86_64-*-* } && { ia32 && { ! nonpic } } } } */\n /* { dg-skip-if \"No 64-bit registers\" { m32c-*-* } } */\n /* { dg-skip-if \"Not enough 64-bit registers\" { pdp11-*-* } { \"-O0\" } { \"\" } } */\n+/* { dg-xfail-if \"Inconsistent constraint on asm\" { csky-*-* } { \"-O0\" } { \"\" } } */\n /* { dg-xfail-if \"\" { h8300-*-* } } */\n \n /* Copyright (C) 2000, 2003 Free Software Foundation */"}, {"sha": "f95d900deaf9999b6b1dd4e40b4c16c76b783f04", "filename": "gcc/testsuite/gcc.c-torture/execute/20101011-1.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20101011-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20101011-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20101011-1.c?ref=9d21b3988043f147e611a1224781f4e75692cdec", "patch": "@@ -93,6 +93,10 @@ __aeabi_idiv0 (int return_value)\n #elif defined (__nvptx__)\n /* There isn't even a signal function.  */\n # define DO_TEST 0\n+#elif defined (__csky__)\n+  /* This presently doesn't raise SIGFPE even on csky-linux-gnu, much\n+     less bare metal.  See the implementation of __divsi3 in libgcc.  */\n+# define DO_TEST 0\n #else\n # define DO_TEST 1\n #endif"}, {"sha": "ee40863d4a7ae6546f7cc10dab87676fb87f6b9d", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/mul-subnormal-single-1.x", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fmul-subnormal-single-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fmul-subnormal-single-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fmul-subnormal-single-1.x?ref=9d21b3988043f147e611a1224781f4e75692cdec", "patch": "@@ -1,3 +1,8 @@\n+if {[istarget \"csky-*-*\"] && [check_effective_target_hard_float]} {\n+    # The C-SKY hardware FPU only supports flush-to-zero mode.\n+    set torture_execute_xfail \"csky-*-*\"\n+    return 1\n+}\n if [istarget \"epiphany-*-*\"] {\n     # The Epiphany single-precision floating point format does not\n     # support subnormals."}, {"sha": "f8be3ce2964c47d61f56ca9f0d5e0ea75a0f08a0", "filename": "gcc/testsuite/gcc.dg/20020312-2.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.dg%2F20020312-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.dg%2F20020312-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20020312-2.c?ref=9d21b3988043f147e611a1224781f4e75692cdec", "patch": "@@ -111,6 +111,11 @@ extern void abort (void);\n /* No pic register.  */\n #elif defined (__nvptx__)\n /* No pic register.  */\n+#elif defined (__csky__)\n+/* Pic register is r28, but some cores only have r0-r15.  */\n+# if defined (__CK807__) || defined (__CK810__)\n+#   define PIC_REG  \"r28\"\n+# endif\n #else\n # error \"Modify the test for your target.\"\n #endif"}, {"sha": "9fe4d073fa5dfb332d04960a1f58d9b588cca0ea", "filename": "gcc/testsuite/gcc.dg/Wno-frame-address.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.dg%2FWno-frame-address.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.dg%2FWno-frame-address.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWno-frame-address.c?ref=9d21b3988043f147e611a1224781f4e75692cdec", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-skip-if \"Cannot access arbitrary stack frames\" { arm*-*-* avr-*-* hppa*-*-* ia64-*-* visium-*-* } } */\n+/* { dg-skip-if \"Cannot access arbitrary stack frames\" { arm*-*-* avr-*-* hppa*-*-* ia64-*-* visium-*-* csky-*-* } } */\n /* { dg-options \"-Werror\" } */\n /* { dg-additional-options \"-mbackchain\" { target { s390*-*-* } } } */\n "}, {"sha": "1fbf51485b8f5298e592085fcfc7d375fcc7eafb", "filename": "gcc/testsuite/gcc.dg/c11-true_min-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-true_min-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-true_min-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-true_min-1.c?ref=9d21b3988043f147e611a1224781f4e75692cdec", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do run } */\n /* { dg-options \"-std=c11\" } */\n /* { dg-xfail-run-if \"PR58757 -mieee is required to compare denormals\" { alpha*-*-* } } */\n+/* { dg-skip-if \"No subnormal support\" { csky-*-* } { \"-mhard-float\" } } */\n \n /* Test that the smallest positive value is not 0. This needs to be true\n    even when denormals are not supported, so we do not pass any flag"}, {"sha": "54cc604aecf61e675b295604497c24a6418f76ae", "filename": "gcc/testsuite/gcc.dg/sibcall-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-10.c?ref=9d21b3988043f147e611a1224781f4e75692cdec", "patch": "@@ -5,7 +5,7 @@\n    Copyright (C) 2002 Free Software Foundation Inc.\n    Contributed by Hans-Peter Nilsson  <hp@bitrange.com>  */\n \n-/* { dg-do run { xfail { { cris-*-* crisv32-*-* h8300-*-* hppa*64*-*-* m32r-*-* mcore-*-* mn10300-*-* msp430*-*-* nds32*-*-* xstormy16-*-* v850*-*-* vax-*-* xtensa*-*-* } || { arm*-*-* && { ! arm32 } } } } } */\n+/* { dg-do run { xfail { { cris-*-* crisv32-*-* csky-*-* h8300-*-* hppa*64*-*-* m32r-*-* mcore-*-* mn10300-*-* msp430*-*-* nds32*-*-* xstormy16-*-* v850*-*-* vax-*-* xtensa*-*-* } || { arm*-*-* && { ! arm32 } } } } } */\n /* -mlongcall disables sibcall patterns.  */\n /* { dg-skip-if \"\" { powerpc*-*-* } { \"-mlongcall\" } { \"\" } } */\n /* -msave-restore disables sibcall patterns.  */"}, {"sha": "fc3bd9dcf1624ce1da2b653ca2583fbe10ede6f1", "filename": "gcc/testsuite/gcc.dg/sibcall-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-9.c?ref=9d21b3988043f147e611a1224781f4e75692cdec", "patch": "@@ -5,7 +5,7 @@\n    Copyright (C) 2002 Free Software Foundation Inc.\n    Contributed by Hans-Peter Nilsson  <hp@bitrange.com>  */\n \n-/* { dg-do run { xfail { { cris-*-* crisv32-*-* h8300-*-* hppa*64*-*-* m32r-*-* mcore-*-* mn10300-*-* msp430*-*-* nds32*-*-* nvptx-*-* xstormy16-*-* v850*-*-* vax-*-* xtensa*-*-* } || { arm*-*-* && { ! arm32 } } } } } */\n+/* { dg-do run { xfail { { cris-*-* crisv32-*-* csky-*-* h8300-*-* hppa*64*-*-* m32r-*-* mcore-*-* mn10300-*-* msp430*-*-* nds32*-*-* nvptx-*-* xstormy16-*-* v850*-*-* vax-*-* xtensa*-*-* } || { arm*-*-* && { ! arm32 } } } } } */\n /* -mlongcall disables sibcall patterns.  */\n /* { dg-skip-if \"\" { powerpc*-*-* } { \"-mlongcall\" } { \"\" } } */\n /* -msave-restore disables sibcall patterns.  */"}, {"sha": "e6440142e1db6ed03e02a77d340e67d85c897189", "filename": "gcc/testsuite/gcc.dg/stack-usage-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-usage-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-usage-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-usage-1.c?ref=9d21b3988043f147e611a1224781f4e75692cdec", "patch": "@@ -101,6 +101,8 @@\n #define SIZE 252\n #elif defined (__M32R__)\n #define SIZE 252\n+#elif defined (__csky__)\n+#  define SIZE 252\n #else\n #  define SIZE 256\n #endif"}, {"sha": "e478a233e705a7357b7675dded5b99687e024f22", "filename": "gcc/testsuite/gcc.dg/torture/float32-tg-3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat32-tg-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat32-tg-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat32-tg-3.c?ref=9d21b3988043f147e611a1224781f4e75692cdec", "patch": "@@ -4,6 +4,7 @@\n /* { dg-add-options float32 } */\n /* { dg-add-options ieee } */\n /* { dg-require-effective-target float32_runtime } */\n+/* { dg-skip-if \"No subnormal support\" { csky-*-* } { \"-mhard-float\" } } */\n \n #define WIDTH 32\n #define EXT 0"}, {"sha": "6f55779782dbd1cded651698c93ed5a5d30acaca", "filename": "gcc/testsuite/gcc.dg/torture/float32x-tg-3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat32x-tg-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat32x-tg-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat32x-tg-3.c?ref=9d21b3988043f147e611a1224781f4e75692cdec", "patch": "@@ -4,6 +4,7 @@\n /* { dg-add-options float32x } */\n /* { dg-add-options ieee } */\n /* { dg-require-effective-target float32x_runtime } */\n+/* { dg-skip-if \"No subnormal support\" { csky-*-* } { \"-mhard-float\" } } */\n \n #define WIDTH 32\n #define EXT 1"}, {"sha": "a1fead711ae7839aa4139cdff2e910c825c45783", "filename": "gcc/testsuite/gcc.dg/torture/float64-tg-3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat64-tg-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat64-tg-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat64-tg-3.c?ref=9d21b3988043f147e611a1224781f4e75692cdec", "patch": "@@ -4,6 +4,7 @@\n /* { dg-add-options float64 } */\n /* { dg-add-options ieee } */\n /* { dg-require-effective-target float64_runtime } */\n+/* { dg-skip-if \"No subnormal support\" { csky-*-* } { \"-mhard-float\" } } */\n \n #define WIDTH 64\n #define EXT 0"}, {"sha": "3cdd933b29ccd083b37f7e070ec293689b2ff678", "filename": "gcc/testsuite/gcc.dg/torture/float64x-tg-3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat64x-tg-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat64x-tg-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat64x-tg-3.c?ref=9d21b3988043f147e611a1224781f4e75692cdec", "patch": "@@ -4,6 +4,7 @@\n /* { dg-add-options float64x } */\n /* { dg-add-options ieee } */\n /* { dg-require-effective-target float64x_runtime } */\n+/* { dg-skip-if \"No subnormal support\" { csky-*-* } { \"-mhard-float\" } } */\n \n #define WIDTH 64\n #define EXT 1"}, {"sha": "a5fa8e83f7f6223b4471d63a930679bbd81474aa", "filename": "gcc/testsuite/gcc.dg/torture/type-generic-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ftype-generic-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ftype-generic-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ftype-generic-1.c?ref=9d21b3988043f147e611a1224781f4e75692cdec", "patch": "@@ -3,6 +3,7 @@\n \n /* { dg-do run } */\n /* { dg-skip-if \"No Inf/NaN support\" { spu-*-* } } */\n+/* { dg-skip-if \"No subnormal support\" { csky-*-* } { \"-mhard-float\" } } */\n /* { dg-options \"-DUNSAFE\" { target tic6x*-*-* visium-*-* nvptx-*-* } } */\n /* { dg-add-options ieee } */\n "}, {"sha": "14ce11acb8d77b1e14888ce7292c51b0b267385a", "filename": "gcc/testsuite/gcc.target/csky/and1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Fand1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Fand1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Fand1.c?ref=9d21b3988043f147e611a1224781f4e75692cdec", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-csky-options \"-O1\" } */\n+\n+/* Test special code generation patterns for bit operators.  */\n+\n+int and1 (int x)\n+{\n+  return x & 0xfff7ffff;\n+}\n+\n+/* { dg-final { scan-assembler \"bclri\" } } */\n+"}, {"sha": "c661199e90c3282c4043990c227c889724541986", "filename": "gcc/testsuite/gcc.target/csky/and2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Fand2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Fand2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Fand2.c?ref=9d21b3988043f147e611a1224781f4e75692cdec", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-csky-options \"-O1\" } */\n+\n+/* Test special code generation patterns for bit operators.  */\n+\n+int and2 (int x)\n+{\n+  return x & 0xfff00000;\n+}\n+\n+/* { dg-final { scan-assembler \"lsri\" } } */\n+/* { dg-final { scan-assembler \"lsli\" } } */"}, {"sha": "3d706f6eb58bed45802f36e0bdf3c494dc581222", "filename": "gcc/testsuite/gcc.target/csky/and3a.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Fand3a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Fand3a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Fand3a.c?ref=9d21b3988043f147e611a1224781f4e75692cdec", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-csky-options \"-mcpu=ck801 -O1\" } */\n+\n+/* Test special code generation patterns for bit operators.  */\n+\n+int and3 (int x)\n+{\n+  return x & 0x000fffff;\n+}\n+\n+/* { dg-final { scan-assembler \"lsli\" } } */\n+/* { dg-final { scan-assembler \"lsri\" } } */"}, {"sha": "127207dcf307921d0396d9cadd3c0860c215e841", "filename": "gcc/testsuite/gcc.target/csky/and3b.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Fand3b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Fand3b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Fand3b.c?ref=9d21b3988043f147e611a1224781f4e75692cdec", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-csky-options \"-mcpu=ck810f -O1\" } */\n+\n+/* Test special code generation patterns for bit operators.  */\n+\n+int and3 (int x)\n+{\n+  return x & 0x000fffff;\n+}\n+\n+/* { dg-final { scan-assembler \"zext\" } } */"}, {"sha": "95e6962447574c7efc28f0bd896ec4948cae893f", "filename": "gcc/testsuite/gcc.target/csky/ck801-branch.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Fck801-branch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Fck801-branch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Fck801-branch.c?ref=9d21b3988043f147e611a1224781f4e75692cdec", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-csky-options \"-mcpu=ck801 -O1 -fno-reorder-blocks\" } */\n+\n+/* Test branch generation on CK801, which cannot rely on assembler\n+   branch relaxation because long branches clobber lr.  */\n+\n+#define nop8 asm (\"nop\\nnop\\nnop\\nnop\\nnop\\nnop\\nnop\\nnop\")\n+#define nop64 nop8; nop8; nop8; nop8; nop8; nop8; nop8; nop8\n+#define nop512 nop64; nop64; nop64; nop64; nop64; nop64; nop64; nop64\n+#define nop4k nop512; nop512; nop512; nop512; nop512; nop512; nop512; nop512\n+#define nop32k nop4k; nop4k; nop4k; nop4k; nop4k; nop4k; nop4k; nop4k\n+\n+extern void g (int);\n+int f (int x, int y, int z)\n+{\n+  if (x == 0)\t\t// cmpnei; jbt\n+    {\n+      nop64;\n+      x = y;\n+    }\n+  if (y == 0)\t\t// cmpnei; jbf; jbr\n+    {\n+      nop512;\n+      y = z;\n+    }\n+  if (z == 0)\t\t// cmpnei; jbf; bsr\n+    {\n+      nop32k;\n+      z = x;\n+    }\n+  return x + y + z;\n+}\n+\n+/* { dg-final { scan-assembler \"push.*lr\" } } */\n+/* { dg-final { scan-assembler \"pop.*lr\" } } */\n+/* { dg-final { scan-assembler-times \"cmpnei\" 3 } } */\n+/* { dg-final { scan-assembler-times \"jbt\" 1 } } */\n+/* { dg-final { scan-assembler-times \"jbf\" 2 } } */\n+/* { dg-final { scan-assembler-times \"jbr\" 1 } } */\n+/* { dg-final { scan-assembler-times \"bsr\" 1 } } */"}, {"sha": "5c7cfdc73bdbaa8e4ba9481097d5699992e52481", "filename": "gcc/testsuite/gcc.target/csky/constpool-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Fconstpool-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Fconstpool-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Fconstpool-1.c?ref=9d21b3988043f147e611a1224781f4e75692cdec", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-csky-options \"-mcpu=ck801 -O1\" } */\n+\n+/* Make sure that constant pools are emitted by the compiler for ck801.\n+   If this is deferred to the assembler, the compiler will compute\n+   incorrect branch offsets.  */\n+\n+void f (unsigned int *u, long long int *l, float *f, double *d)\n+{\n+  *u = 0xdeadbeef;\n+  *l = 0xcafef00dc0ffeeULL;\n+  *f = 3.14159F;\n+  *d = 2.718281828459;\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\.long\" 6 } } */"}, {"sha": "d654420bc3f35973fed3943dd22056aca3f8c1a2", "filename": "gcc/testsuite/gcc.target/csky/constpool-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Fconstpool-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Fconstpool-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Fconstpool-2.c?ref=9d21b3988043f147e611a1224781f4e75692cdec", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-csky-options \"-mcpu=ck810f -O1 -mconstpool\" } */\n+\n+/* Make sure that constant pools are emitted by the compiler when\n+   -mconstpool is provided.  */\n+\n+void f (unsigned int *u, long long int *l, float *f, double *d)\n+{\n+  *u = 0xdeadbeef;\n+  *l = 0xcafef00dc0ffeeULL;\n+  *f = 3.14159F;\n+  *d = 2.718281828459;\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\.long\" 6 } } */"}, {"sha": "e3a6e095f5b9d01b066c0997d63e1bcc1243b4a2", "filename": "gcc/testsuite/gcc.target/csky/constpool-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Fconstpool-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Fconstpool-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Fconstpool-3.c?ref=9d21b3988043f147e611a1224781f4e75692cdec", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-csky-options \"-mcpu=ck810f -O1 -mno-constpool\" } */\n+\n+/* Make sure that constant pools are not emitted by the compiler when\n+   -mno-constpool is provided.  */\n+\n+void f (unsigned int *u, long long int *l, float *f, double *d)\n+{\n+  *u = 0xdeadbeef;\n+  *l = 0xcafef00dc0ffeeULL;\n+  *f = 3.14159F;\n+  *d = 2.718281828459;\n+}\n+\n+/* { dg-final { scan-assembler-not \"\\\\.long\" } } */"}, {"sha": "b97a16e78c4e6e53d2d609935038fd12133e9b57", "filename": "gcc/testsuite/gcc.target/csky/cse-cc.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Fcse-cc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Fcse-cc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Fcse-cc.c?ref=9d21b3988043f147e611a1224781f4e75692cdec", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-csky-options \"-O2\" } */\n+\n+/* Test that the two comparisons are combined.  This was formerly handled\n+   by a no-longer-present target-specific pass and is now supposed to\n+   be handled by generic CSE.  */\n+\n+int e1, e2;\n+\n+void func (int a, int b, int c, int d, int f, int g)\n+{\n+  e1 = a > b ? f : g;\n+  e2 = a > b ? c : d;\n+\n+  return;\n+}\n+\n+/* { dg-final { scan-assembler-times \"cmp\" 1 } } */\n+"}, {"sha": "9569490fe8d412ed9a6d3c553f94c8df5c9229d8", "filename": "gcc/testsuite/gcc.target/csky/csky.exp", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Fcsky.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Fcsky.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Fcsky.exp?ref=9d21b3988043f147e611a1224781f4e75692cdec", "patch": "@@ -0,0 +1,79 @@\n+# GCC testsuite for C-SKY targets.\n+# Copyright (C) 2012-2018 Free Software Foundation, Inc.\n+# Contributed by C-SKY Microsystems and Mentor Graphics.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# Exit immediately if this isn't a C-SKY target.\n+if ![istarget csky*-*-*] then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# Like dg-options, but treats certain C-SKY-specific options specially:\n+#\n+#    -mcpu=*\n+#\tSelect the target cpu. Skip the test if the multilib flags force\n+#\ta different cpu.\n+proc dg-csky-options {args} {\n+    upvar dg-extra-tool-flags extra_tool_flags\n+    upvar dg-do-what do_what\n+\n+    set multilib_cpu \"\"\n+    set multilib_hf \"\"\n+    set cpu \"\"\n+\n+    foreach flag [target_info multilib_flags] {\n+\tregexp \"^-mcpu=(.*)\" $flag dummy multilib_cpu\n+        regexp \"^-mhard-float\" $flag multilib_hf\n+    }\n+\n+    set flags [lindex $args 1]\n+\n+    foreach flag $flags {\n+\tregexp \"^-mcpu=(.*)\" $flag dummy cpu\n+    }\n+\n+    if {$cpu == \"\"} then {\n+      set extra_tool_flags $flags\n+    } elseif {$multilib_cpu == \"\" || $multilib_cpu == $cpu} then {\n+        if { ($cpu == \"ck801\" || $cpu == \"ck802\") \n+\t     && $multilib_hf != \"\" } then {\n+\t    set do_what [list [lindex $do_what 0] \"N\" \"P\"]\n+\t} else {\n+\t    set extra_tool_flags $flags\n+\t}\n+    } else {\n+\tset do_what [list [lindex $do_what 0] \"N\" \"P\"]\n+    }\n+}\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cCS\\]]] \\\n+\t\"\" $DEFAULT_CFLAGS\n+\n+# All done.\n+dg-finish"}, {"sha": "5cc85b6ea97eff8961102969cb21b7f6c547cde2", "filename": "gcc/testsuite/gcc.target/csky/fnargs-1.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Ffnargs-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Ffnargs-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Ffnargs-1.c?ref=9d21b3988043f147e611a1224781f4e75692cdec", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+\n+/* Check that a structure argument passed partially in registers and\n+   partially on the stack works.  */\n+\n+#include <stdlib.h>\n+#include <string.h>\n+\n+struct s {\n+  unsigned int i;\n+  double d;\n+  char s[16];\n+};\n+\n+/* Note specifically that, since there are 4 argument registers, the\n+   value of ss.d is split between the last argument register and the\n+   stack.  */\n+void\n+f (struct s *sp, int j, struct s ss, int k)\n+{\n+  if (sp->i != ss.i\n+      || sp->d != ss.d\n+      || strcmp (sp->s, ss.s))\n+    abort ();\n+  if (j != -k)\n+    abort ();\n+}\n+\n+int\n+main (void)\n+{\n+  struct s ss;\n+  ss.i = 0xdeadbeef;\n+  ss.d = 2.71828;\n+  strcpy (ss.s, \"shazam!\");\n+  f (&ss, 42, ss, -42);\n+  return 0;\n+}"}, {"sha": "d4e1b71cf71fdae28628034c64eb52f567c4a8ff", "filename": "gcc/testsuite/gcc.target/csky/fnargs-2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Ffnargs-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Ffnargs-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Ffnargs-2.c?ref=9d21b3988043f147e611a1224781f4e75692cdec", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+\n+/* Check that varargs passed partially in registers and\n+   partially on the stack works.  */\n+\n+#include <stdlib.h>\n+#include <string.h>\n+#include <stdarg.h>\n+\n+struct s {\n+  unsigned int i;\n+  double d;\n+  char s[16];\n+};\n+\n+/* Note specifically that, as there are 4 argument registers,\n+   the value of ss.d is split between the last argument register\n+   and the stack.  */\n+void\n+f (struct s *sp, ...)\n+{\n+  int j, k;\n+  unsigned int i;\n+  double d;\n+  char *s;\n+  va_list ap;\n+  va_start (ap, sp);\n+  j = va_arg (ap, int);\n+  i = va_arg (ap, unsigned int);\n+  d = va_arg (ap, double);\n+  s = va_arg (ap, char *);\n+  k = va_arg (ap, int);\n+  va_end (ap);\n+\n+  if (sp->i != i\n+      || sp->d != d\n+      || strcmp (sp->s, s))\n+    abort ();\n+  if (j != -k)\n+    abort ();\n+}\n+\n+int\n+main (void)\n+{\n+  struct s ss;\n+  ss.i = 0xdeadbeef;\n+  ss.d = 2.71828;\n+  strcpy (ss.s, \"shazam!\");\n+  f (&ss, 42, ss.i, ss.d, ss.s, -42);\n+  return 0;\n+}"}, {"sha": "8cf3e5ce7f68ad298ef4005786d294cc66778374", "filename": "gcc/testsuite/gcc.target/csky/fnargs-3.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Ffnargs-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Ffnargs-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Ffnargs-3.c?ref=9d21b3988043f147e611a1224781f4e75692cdec", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+\n+/* Check that sub-word sized elements of structures passed in in\n+   registers are handled correctly with respect to the current endianness.  */\n+\n+#include <stdlib.h>\n+#include <string.h>\n+\n+struct s {\n+  short h;\n+  char s[8];\n+};\n+\n+void\n+f (struct s *sp, struct s ss)\n+{\n+  if (sp->h != ss.h\n+      || strcmp (sp->s, ss.s))\n+    abort ();\n+}\n+\n+int\n+main (void)\n+{\n+  struct s ss;\n+  ss.h = 42;\n+  strcpy (ss.s, \"shazam!\");\n+  f (&ss, ss);\n+  return 0;\n+}\n+"}, {"sha": "e5ca51cad115609e2851a04c4d9098f59d7b8d83", "filename": "gcc/testsuite/gcc.target/csky/land1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Fland1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Fland1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Fland1.c?ref=9d21b3988043f147e611a1224781f4e75692cdec", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-csky-options \"-O1\" } */\n+\n+/* Test special code generation patterns for bit operators.  */\n+\n+long long int land1 (long long int x)\n+{\n+  return x & 0xffffffff00000000LL;\n+}\n+\n+/* { dg-final { scan-assembler \"movi.*, 0\" } } */"}, {"sha": "b45e7b66286c702f8596a603e0d5a8050654cd1b", "filename": "gcc/testsuite/gcc.target/csky/land2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Fland2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Fland2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Fland2.c?ref=9d21b3988043f147e611a1224781f4e75692cdec", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-csky-options \"-O1\" } */\n+\n+/* Test special code generation patterns for bit operators.  */\n+\n+long long int land2 (long long int x)\n+{\n+  return x & 0x00000000ffffffffLL;\n+}\n+\n+/* { dg-final { scan-assembler \"movi.*, 0\" } } */"}, {"sha": "f81984c63f8fabac91c2af6537c312c207d5ae52", "filename": "gcc/testsuite/gcc.target/csky/naked.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Fnaked.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Fnaked.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2Fnaked.c?ref=9d21b3988043f147e611a1224781f4e75692cdec", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-final { scan-assembler-not \"push\" } } */\n+/* { dg-final { scan-assembler-not \"pop\" } } */\n+\n+/* Check that there is no prologue/epilogue code emitted for a function\n+   with the naked attribute.  Without the attribute, this function would\n+   push/pop lr.  */\n+\n+extern void g (int);\n+\n+int __attribute__((naked))\n+f (int x)\n+{\n+  g (x);\n+  return 42;\n+}"}, {"sha": "24918bc3603a39d1180f9878377ab65a9a079951", "filename": "gcc/testsuite/gcc.target/csky/or1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2For1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2For1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcsky%2For1.c?ref=9d21b3988043f147e611a1224781f4e75692cdec", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-csky-options \"-O1\" } */\n+\n+/* Test special code generation patterns for bit operators.  */\n+\n+int or1 (int x)\n+{\n+  return x | 0x00100000;\n+}\n+\n+/* { dg-final { scan-assembler \"bseti\" } } */"}, {"sha": "b04ceb6508e77b1e7d489207652d8e5d4ea8cf35", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d21b3988043f147e611a1224781f4e75692cdec/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=9d21b3988043f147e611a1224781f4e75692cdec", "patch": "@@ -669,6 +669,7 @@ proc check_profiling_available { test_what } {\n \t     || [istarget bfin-*-*]\n \t     || [istarget cris-*-*]\n \t     || [istarget crisv32-*-*]\n+\t     || [istarget csky-*-elf]\n \t     || [istarget fido-*-elf]\n \t     || [istarget h8300-*-*]\n \t     || [istarget lm32-*-*]\n@@ -1228,6 +1229,16 @@ proc check_effective_target_hard_float { } {\n \t# }]\n     }\n \n+    # The generic test doesn't work for C-SKY because some cores have\n+    # hard float for single precision only.\n+    if { [istarget csky*-*-*] } {\n+       return [check_no_compiler_messages hard_float assembly {\n+               #if defined __csky_soft_float__\n+               #error __csky_soft_float__\n+               #endif\n+       }]\n+    }\n+\n     # The generic test equates hard_float with \"no call for adding doubles\".\n     return [check_no_messages_and_pattern hard_float \"!\\\\(call\" rtl-expand {\n \tdouble a (double b, double c) { return b + c; }\n@@ -8843,6 +8854,7 @@ proc check_effective_target_logical_op_short_circuit {} {\n \t || [istarget arc*-*-*]\n \t || [istarget avr*-*-*]\n \t || [istarget crisv32-*-*] || [istarget cris-*-*]\n+\t || [istarget csky*-*-*]\n \t || [istarget mmix-*-*]\n \t || [istarget s390*-*-*]\n \t || [istarget powerpc*-*-*]\n@@ -8861,6 +8873,7 @@ proc check_effective_target_logical_op_short_circuit {} {\n proc check_effective_target_branch_cost {} {\n     if { [   istarget arm*-*-*]\n \t || [istarget avr*-*-*]\n+\t || [istarget csky*-*-*]\n \t || [istarget epiphany*-*-*]\n \t || [istarget frv*-*-*]\n \t || [istarget i?86-*-*] || [istarget x86_64-*-*]"}]}