{"sha": "dcb3736a30154c614de0c1df967d5e23fb8598a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNiMzczNmEzMDE1NGM2MTRkZTBjMWRmOTY3ZDVlMjNmYjg1OThhMQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-01-19T21:16:56Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-01-19T21:16:56Z"}, "message": "* cp-tree.h, name-lookup.h: Remove unused prototypes.\n\nFrom-SVN: r93920", "tree": {"sha": "ef1a70ec7dce1a4d95ab58770164239503662894", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef1a70ec7dce1a4d95ab58770164239503662894"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcb3736a30154c614de0c1df967d5e23fb8598a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcb3736a30154c614de0c1df967d5e23fb8598a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcb3736a30154c614de0c1df967d5e23fb8598a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcb3736a30154c614de0c1df967d5e23fb8598a1/comments", "author": null, "committer": null, "parents": [{"sha": "fed758a42bb9158ac146f7c41bf281968ae38d93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fed758a42bb9158ac146f7c41bf281968ae38d93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fed758a42bb9158ac146f7c41bf281968ae38d93"}], "stats": {"total": 30, "additions": 4, "deletions": 26}, "files": [{"sha": "5891fde0a50a662e5747165803c9ba0d39fb7818", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcb3736a30154c614de0c1df967d5e23fb8598a1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcb3736a30154c614de0c1df967d5e23fb8598a1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=dcb3736a30154c614de0c1df967d5e23fb8598a1", "patch": "@@ -1,3 +1,7 @@\n+2005-01-19  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* cp-tree.h, name-lookup.h: Remove unused prototypes.\n+\n 2005-01-19  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/19375"}, {"sha": "27ae2e8dfdd6798e03d665d25b51e1833ee88dab", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcb3736a30154c614de0c1df967d5e23fb8598a1/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcb3736a30154c614de0c1df967d5e23fb8598a1/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=dcb3736a30154c614de0c1df967d5e23fb8598a1", "patch": "@@ -3659,7 +3659,6 @@ extern tree build_x_va_arg (tree, tree);\n extern tree cxx_type_promotes_to (tree);\n extern tree type_passed_as (tree);\n extern tree convert_for_arg_passing (tree, tree);\n-extern tree cp_convert_parm_for_inlining        (tree, tree, tree);\n extern bool is_properly_derived_from (tree, tree);\n extern tree initialize_reference (tree, tree, tree, tree *);\n extern tree make_temporary_var_for_ref_to_temp (tree, tree);\n@@ -3747,10 +3746,8 @@ enum cp_tree_node_structure_enum cp_tree_node_structure\n extern bool cxx_mark_addressable\t\t(tree);\n extern void cxx_push_function_context\t\t(struct function *);\n extern void cxx_pop_function_context\t\t(struct function *);\n-extern void cxx_mark_function_context\t\t(struct function *);\n extern void maybe_push_cleanup_level (tree);\n extern void finish_scope                        (void);\n-extern void add_block_current_level\t\t(tree);\n extern void push_switch\t\t\t\t(tree);\n extern void pop_switch\t\t\t\t(void);\n extern tree pushtag\t\t\t\t(tree, tree, int);\n@@ -3763,7 +3760,6 @@ extern tree push_using_decl                     (tree, tree);\n extern tree declare_local_label                 (tree);\n extern tree define_label\t\t\t(location_t, tree);\n extern void check_goto\t\t\t\t(tree);\n-extern void define_case_label\t\t\t(void);\n extern tree make_typename_type\t\t\t(tree, tree, enum tag_types, tsubst_flags_t);\n extern tree make_unbound_class_template\t\t(tree, tree, tree, tsubst_flags_t);\n extern tree check_for_out_of_scope_variable     (tree);\n@@ -3773,7 +3769,6 @@ extern tree build_cp_library_fn_ptr\t\t(const char *, tree);\n extern tree push_library_fn\t\t\t(tree, tree);\n extern tree push_void_library_fn\t\t(tree, tree);\n extern tree push_throw_library_fn\t\t(tree, tree);\n-extern int init_type_desc\t\t\t(void);\n extern tree check_tag_decl\t\t\t(cp_decl_specifier_seq *);\n extern tree shadow_tag\t\t\t\t(cp_decl_specifier_seq *);\n extern tree groktypename\t\t\t(cp_decl_specifier_seq *, const cp_declarator *);\n@@ -3812,7 +3807,6 @@ extern void fixup_anonymous_aggr                (tree);\n extern int check_static_variable_definition     (tree, tree);\n extern tree compute_array_index_type\t\t(tree, tree);\n extern tree check_default_argument              (tree, tree);\n-extern int sigtable_decl_p                      (tree, void *);\n typedef int (*walk_namespaces_fn)               (tree, void *);\n extern int walk_namespaces                      (walk_namespaces_fn,\n \t\t\t\t\t\t       void *);\n@@ -3852,10 +3846,8 @@ extern tree check_classfn (tree, tree, tree);\n extern void check_member_template (tree);\n extern tree grokfield (const cp_declarator *, cp_decl_specifier_seq *, tree, tree, tree);\n extern tree grokbitfield (const cp_declarator *, cp_decl_specifier_seq *, tree);\n-extern tree groktypefield\t\t\t(tree, tree);\n extern void cplus_decl_attributes (tree *, tree, int);\n extern void finish_anon_union (tree);\n-extern tree finish_table (tree, tree, tree, int);\n extern void cp_finish_file (void);\n extern tree coerce_new_type (tree);\n extern tree coerce_delete_type (tree);\n@@ -3898,11 +3890,8 @@ extern void print_instantiation_context         (void);\n extern void init_exception_processing\t\t(void);\n extern tree expand_start_catch_block\t\t(tree);\n extern void expand_end_catch_block\t\t(void);\n-extern void expand_builtin_throw\t\t(void);\n-extern void expand_exception_blocks\t\t(void);\n extern tree build_exc_ptr\t\t\t(void);\n extern tree build_throw\t\t\t\t(tree);\n-extern void mark_all_runtime_matches            (void);\n extern int nothrow_libfn_p\t\t\t(tree);\n extern void check_handlers\t\t\t(tree);\n extern void choose_personality_routine\t\t(enum languages);\n@@ -3943,12 +3932,8 @@ extern tree integral_constant_value \t\t(tree);\n \n /* in lex.c */\n extern void cxx_dup_lang_specific_decl\t\t(tree);\n-extern void print_parse_statistics\t\t(void);\n-extern void do_pending_inlines\t\t\t(void);\n extern void yyungetc\t\t\t\t(int, int);\n-extern void snarf_method\t\t\t(tree);\n \n-extern void see_typename\t\t\t(void);\n extern tree unqualified_name_lookup_error       (tree);\n extern tree unqualified_fn_lookup_error         (tree);\n extern tree build_lang_decl\t\t\t(enum tree_code, tree, tree);\n@@ -4086,7 +4071,6 @@ extern bool at_class_scope_p                    (void);\n extern bool at_namespace_scope_p                (void);\n extern tree context_for_name_lookup\t\t(tree);\n extern tree lookup_conversions\t\t\t(tree);\n-extern tree binfo_for_vtable\t\t\t(tree);\n extern tree binfo_from_vbase\t\t\t(tree);\n extern tree binfo_for_vbase\t\t\t(tree, tree);\n extern tree look_for_overrides_here\t\t(tree, tree);\n@@ -4151,7 +4135,6 @@ extern void finish_function_handler_sequence    (tree);\n extern void finish_cleanup_try_block            (tree);\n extern tree begin_handler                       (void);\n extern void finish_handler_parms                (tree, tree);\n-extern void begin_catch_block                   (tree);\n extern void finish_handler                      (tree);\n extern void finish_cleanup                      (tree, tree);\n \n@@ -4166,7 +4149,6 @@ extern void finish_compound_stmt                (tree);\n extern tree finish_asm_stmt                     (int, tree, tree, tree, tree);\n extern tree finish_label_stmt                   (tree);\n extern void finish_label_decl                   (tree);\n-extern void finish_subobject                    (tree);\n extern tree finish_parenthesized_expr           (tree);\n extern tree finish_non_static_data_member       (tree, tree, tree);\n extern tree begin_stmt_expr                     (void);\n@@ -4184,7 +4166,6 @@ extern void finish_translation_unit             (void);\n extern tree finish_template_type_parm           (tree, tree);\n extern tree finish_template_template_parm       (tree, tree);\n extern tree begin_class_definition              (tree);\n-extern void finish_default_args                 (void);\n extern void finish_template_decl                (tree);\n extern tree finish_template_type                (tree, tree, int);\n extern tree finish_base_specifier               (tree, tree, bool);\n@@ -4198,10 +4179,7 @@ extern tree finish_typeof\t\t\t(tree);\n extern void finish_decl_cleanup                 (tree, tree);\n extern void finish_eh_cleanup                   (tree);\n extern void expand_body                         (tree);\n-extern void cxx_expand_function_start\t\t(void);\n extern void finish_mem_initializers             (tree);\n-extern void setup_vtbl_ptr\t\t\t(tree, tree);\n-extern void clear_out_block                     (void);\n extern tree check_template_template_default_arg (tree);\n extern void expand_or_defer_fn\t\t\t(tree);\n extern void check_accessibility_of_qualified_id (tree, tree, tree);\n@@ -4231,16 +4209,13 @@ extern tree build_min_nt\t\t\t(enum tree_code, ...);\n extern tree build_min_non_dep\t\t\t(enum tree_code, tree, ...);\n extern tree build_cplus_new\t\t\t(tree, tree);\n extern tree get_target_expr\t\t\t(tree);\n-extern tree build_cplus_staticfn_type\t\t(tree, tree, tree);\n extern tree build_cplus_array_type\t\t(tree, tree);\n extern tree hash_tree_cons\t\t\t(tree, tree, tree);\n extern tree hash_tree_chain\t\t\t(tree, tree);\n extern int is_overloaded_fn\t\t\t(tree);\n extern tree get_first_fn\t\t\t(tree);\n extern tree ovl_cons                            (tree, tree);\n extern tree build_overload                      (tree, tree);\n-extern tree function_arg_chain\t\t\t(tree);\n-extern int promotes_to_aggr_type\t\t(tree, enum tree_code);\n extern const char *cxx_printable_name\t\t(tree, int);\n extern tree build_exception_variant\t\t(tree, tree);\n extern tree bind_template_template_parm\t\t(tree, tree);"}, {"sha": "2e14494bdd0bc3e0d5845b8c079af08ad9cd4a2c", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcb3736a30154c614de0c1df967d5e23fb8598a1/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcb3736a30154c614de0c1df967d5e23fb8598a1/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=dcb3736a30154c614de0c1df967d5e23fb8598a1", "patch": "@@ -325,7 +325,6 @@ extern void push_local_binding (tree, tree, int);\n extern bool pushdecl_class_level (tree);\n extern tree pushdecl_namespace_level (tree);\n extern bool push_class_level_binding (tree, tree);\n-extern void storetags (tree);\n extern tree getdecls (void);\n extern tree cp_namespace_decls (tree);\n extern void set_decl_namespace (tree, tree, bool);"}]}