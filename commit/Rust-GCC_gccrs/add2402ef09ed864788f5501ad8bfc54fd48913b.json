{"sha": "add2402ef09ed864788f5501ad8bfc54fd48913b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRkMjQwMmVmMDllZDg2NDc4OGY1NTAxYWQ4YmZjNTRmZDQ4OTEzYg==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2004-10-07T21:16:28Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2004-10-07T21:16:28Z"}, "message": "Radar 3813796\n\n2004-10-07  Geoffrey Keating  <geoffk@apple.com>\n\n\tRadar 3813796\n\t* config/rs6000/rs6000.c (rs6000_generate_compare): When\n\tflag_trapping_math is in effect, don't generate subtract\n\tinstructions.\n\nIndex: testsuite/ChangeLog\n2004-10-07  Geoffrey Keating  <geoffk@apple.com>\n\n\t* gcc.dg/ppc-fsel-3.c: New file.\n\t* gcc.dg/ppc-fsel-1.c: Add -fno-trapping-math, update comment.\n\nFrom-SVN: r88707", "tree": {"sha": "0a4cba33bf6409dcc3b1575e611f81b7f8fcf8dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a4cba33bf6409dcc3b1575e611f81b7f8fcf8dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/add2402ef09ed864788f5501ad8bfc54fd48913b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/add2402ef09ed864788f5501ad8bfc54fd48913b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/add2402ef09ed864788f5501ad8bfc54fd48913b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/add2402ef09ed864788f5501ad8bfc54fd48913b/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0dfa6c5eae5ef20030ee5b7ad79504ec35c6200a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dfa6c5eae5ef20030ee5b7ad79504ec35c6200a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dfa6c5eae5ef20030ee5b7ad79504ec35c6200a"}], "stats": {"total": 53, "additions": 46, "deletions": 7}, "files": [{"sha": "01f41a23c03235d4f7444f4fbd18026a8419e985", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/add2402ef09ed864788f5501ad8bfc54fd48913b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/add2402ef09ed864788f5501ad8bfc54fd48913b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=add2402ef09ed864788f5501ad8bfc54fd48913b", "patch": "@@ -1,3 +1,10 @@\n+2004-10-07  Geoffrey Keating  <geoffk@apple.com>\n+\n+\tRadar 3813796\n+\t* config/rs6000/rs6000.c (rs6000_generate_compare): When\n+\tflag_trapping_math is in effect, don't generate subtract\n+\tinstructions.\n+\n 2004-10-07  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/s390/s390-protos.h (s390_narrow_logical_operator): Add."}, {"sha": "0d5c8b4d4b07f565f6f5fe663351d814d51d85ba", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/add2402ef09ed864788f5501ad8bfc54fd48913b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/add2402ef09ed864788f5501ad8bfc54fd48913b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=add2402ef09ed864788f5501ad8bfc54fd48913b", "patch": "@@ -11489,6 +11489,7 @@ rs6000_emit_cmove (rtx dest, rtx op, rtx true_cond, rtx false_cond)\n   enum machine_mode compare_mode = GET_MODE (op0);\n   enum machine_mode result_mode = GET_MODE (dest);\n   rtx temp;\n+  bool is_against_zero;\n \n   /* These modes should always match.  */\n   if (GET_MODE (op1) != compare_mode\n@@ -11513,6 +11514,17 @@ rs6000_emit_cmove (rtx dest, rtx op, rtx true_cond, rtx false_cond)\n \t   && GET_MODE_CLASS (compare_mode) == MODE_FLOAT)\n     return 0;\n \n+  is_against_zero = op1 == CONST0_RTX (compare_mode);\n+  \n+  /* A floating-point subtract might overflow, underflow, or produce\n+     an inexact result, thus changing the floating-point flags, so it\n+     can't be generated if we care about that.  It's safe if one side\n+     of the construct is zero, since then no subtract will be\n+     generated.  */\n+  if (GET_MODE_CLASS (compare_mode) == MODE_FLOAT\n+      && flag_trapping_math && ! is_against_zero)\n+    return 0;\n+\n   /* Eliminate half of the comparisons by switching operands, this\n      makes the remaining code simpler.  */\n   if (code == UNLT || code == UNGT || code == UNORDERED || code == NE\n@@ -11545,14 +11557,18 @@ rs6000_emit_cmove (rtx dest, rtx op, rtx true_cond, rtx false_cond)\n \t  || (! rtx_equal_p (op0, true_cond)\n \t      && ! rtx_equal_p (op1, true_cond))))\n     return 0;\n+\n   /* At this point we know we can use fsel.  */\n \n   /* Reduce the comparison to a comparison against zero.  */\n-  temp = gen_reg_rtx (compare_mode);\n-  emit_insn (gen_rtx_SET (VOIDmode, temp,\n-\t\t\t  gen_rtx_MINUS (compare_mode, op0, op1)));\n-  op0 = temp;\n-  op1 = CONST0_RTX (compare_mode);\n+  if (! is_against_zero)\n+    {\n+      temp = gen_reg_rtx (compare_mode);\n+      emit_insn (gen_rtx_SET (VOIDmode, temp,\n+\t\t\t      gen_rtx_MINUS (compare_mode, op0, op1)));\n+      op0 = temp;\n+      op1 = CONST0_RTX (compare_mode);\n+    }\n \n   /* If we don't care about NaNs we can reduce some of the comparisons\n      down to faster ones.  */"}, {"sha": "6a0cd628625bfa9328dfd92fc097b2381045f840", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/add2402ef09ed864788f5501ad8bfc54fd48913b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/add2402ef09ed864788f5501ad8bfc54fd48913b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=add2402ef09ed864788f5501ad8bfc54fd48913b", "patch": "@@ -1,3 +1,8 @@\n+2004-10-07  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* gcc.dg/ppc-fsel-3.c: New file.\n+\t* gcc.dg/ppc-fsel-1.c: Add -fno-trapping-math, update comment.\n+\n 2004-10-07  Paul Brook  <paul@codesourcery.com>\n \n \t* gfortran.dg/intrinsic_verify_1.f90: New test."}, {"sha": "8d364352ac9834a9e08cef1f7f20a99049704d24", "filename": "gcc/testsuite/gcc.dg/ppc-fsel-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/add2402ef09ed864788f5501ad8bfc54fd48913b/gcc%2Ftestsuite%2Fgcc.dg%2Fppc-fsel-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/add2402ef09ed864788f5501ad8bfc54fd48913b/gcc%2Ftestsuite%2Fgcc.dg%2Fppc-fsel-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fppc-fsel-1.c?ref=add2402ef09ed864788f5501ad8bfc54fd48913b", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do compile { target powerpc*-*-* } } */\n-/* { dg-options \"-O -mpowerpc-gfxopt\" } */\n+/* { dg-options \"-O -mpowerpc-gfxopt -fno-trapping-math\" } */\n /* { dg-final { scan-assembler \"fsel\" } } */\n \n-/* Check that fsel can be generated even without -ffast-math.  */\n+/* If the user doesn't care about signals, fsel can be used in many cases.  */\n \n double foo(double a, double b, double c, double d)\n {"}, {"sha": "1d07c528eb11b4e1c0080aa7d66e70e8853ac8ac", "filename": "gcc/testsuite/gcc.dg/ppc-fsel-3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/add2402ef09ed864788f5501ad8bfc54fd48913b/gcc%2Ftestsuite%2Fgcc.dg%2Fppc-fsel-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/add2402ef09ed864788f5501ad8bfc54fd48913b/gcc%2Ftestsuite%2Fgcc.dg%2Fppc-fsel-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fppc-fsel-3.c?ref=add2402ef09ed864788f5501ad8bfc54fd48913b", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target powerpc*-*-* } } */\n+/* { dg-options \"-O -mpowerpc-gfxopt\" } */\n+/* { dg-final { scan-assembler-not \"fsub\" } } */\n+\n+/* Check that an fsub isn't generated when no arithmetic was requested;\n+   such an fsub might incorrectly set floating-point exception flags.  */\n+\n+double foo(double a, double b, double c, double d)\n+{\n+  return a < b ? c : d;\n+}"}]}