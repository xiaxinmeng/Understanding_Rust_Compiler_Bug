{"sha": "2313938e75f98487eb83d605e0670e2d108c3353", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjMxMzkzOGU3NWY5ODQ4N2ViODNkNjA1ZTA2NzBlMmQxMDhjMzM1Mw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-05-07T15:30:40Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-07T15:30:40Z"}, "message": "Improve API docs for std::regex\n\n\t* include/bits/regex.h: Improve docs.\n\t* include/bits/regex.tcc: Do not document implementation details.\n\nFrom-SVN: r270952", "tree": {"sha": "3a4dde86b9412b25f73a88790ab937710d3e25ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a4dde86b9412b25f73a88790ab937710d3e25ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2313938e75f98487eb83d605e0670e2d108c3353", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2313938e75f98487eb83d605e0670e2d108c3353", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2313938e75f98487eb83d605e0670e2d108c3353", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2313938e75f98487eb83d605e0670e2d108c3353/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99f129598901e7bd289261d537bc8e879718b352", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99f129598901e7bd289261d537bc8e879718b352", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99f129598901e7bd289261d537bc8e879718b352"}], "stats": {"total": 61, "additions": 43, "deletions": 18}, "files": [{"sha": "5acf43eab333cd3ae4f8a323fd7e7aef9b240a7a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2313938e75f98487eb83d605e0670e2d108c3353/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2313938e75f98487eb83d605e0670e2d108c3353/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2313938e75f98487eb83d605e0670e2d108c3353", "patch": "@@ -1,5 +1,8 @@\n 2019-05-07  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/regex.h: Improve docs.\n+\t* include/bits/regex.tcc: Do not document implementation details.\n+\n \t* testsuite/19_diagnostics/error_code/hash.cc: New test.\n \n 2019-05-06  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>"}, {"sha": "76219b5ae3ba9d794f0bd8114ff887d8ea8915f9", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 30, "deletions": 16, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2313938e75f98487eb83d605e0670e2d108c3353/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2313938e75f98487eb83d605e0670e2d108c3353/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=2313938e75f98487eb83d605e0670e2d108c3353", "patch": "@@ -838,6 +838,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n    * @brief Swaps the contents of two regular expression objects.\n    * @param __lhs First regular expression.\n    * @param __rhs Second regular expression.\n+   * @relates basic_regex\n    */\n   template<typename _Ch_type, typename _Rx_traits>\n     inline void\n@@ -937,10 +938,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       { return this->_M_str().compare(__s); }\n       // @}\n \n+      /// @cond undocumented\n       // Non-standard, used by comparison operators\n       int\n       _M_compare(const value_type* __s, size_t __n) const\n       { return this->_M_str().compare({__s, __n}); }\n+      /// @endcond\n \n     private:\n       // Simplified basic_string_view for C++11\n@@ -1015,6 +1018,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n   // [7.9.2] sub_match non-member operators\n \n+  /// @relates sub_match @{\n+\n   /**\n    * @brief Tests the equivalence of two regular expression submatches.\n    * @param __lhs First regular expression submatch.\n@@ -1081,11 +1086,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     operator>(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>& __rhs)\n     { return __lhs.compare(__rhs) > 0; }\n \n+  /// @cond undocumented\n+\n   // Alias for a basic_string that can be compared to a sub_match.\n   template<typename _Bi_iter, typename _Ch_traits, typename _Ch_alloc>\n     using __sub_match_string = basic_string<\n \t\t\t      typename iterator_traits<_Bi_iter>::value_type,\n \t\t\t      _Ch_traits, _Ch_alloc>;\n+  /// @endcond\n \n   /**\n    * @brief Tests the equivalence of a string and a regular expression\n@@ -1554,6 +1562,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t       const sub_match<_Bi_iter>& __m)\n     { return __os << __m.str(); }\n \n+  // @} relates sub_match\n+\n   // [7.10] Class template match_results\n \n   /**\n@@ -1575,8 +1585,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n    * of characters [first, second) which formed that match. Otherwise matched\n    * is false, and members first and second point to the end of the sequence\n    * that was searched.\n-   *\n-   * @nosubgrouping\n    */\n   template<typename _Bi_iter,\n \t   typename _Alloc = allocator<sub_match<_Bi_iter> > >\n@@ -1606,7 +1614,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n     public:\n       /**\n-       * @name 10.? Public Types\n+       * @name 28.10 Public Types\n        */\n       //@{\n       typedef sub_match<_Bi_iter>\t\t\t   value_type;\n@@ -1630,17 +1638,18 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       /**\n        * @brief Constructs a default %match_results container.\n        * @post size() returns 0 and str() returns an empty string.\n-       * @{\n        */\n       match_results() : match_results(_Alloc()) { }\n \n+      /**\n+       * @brief Constructs a default %match_results container.\n+       * @post size() returns 0 and str() returns an empty string.\n+       */\n       explicit\n       match_results(const _Alloc& __a) noexcept\n       : _Base_type(__a)\n       { }\n \n-      // @}\n-\n       /**\n        * @brief Copy constructs a %match_results.\n        */\n@@ -1712,7 +1721,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       //@}\n \n       /**\n-       * @name 10.3 Element Access\n+       * @name 28.10.4 Element Access\n        */\n       //@{\n \n@@ -1837,7 +1846,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       //@}\n \n       /**\n-       * @name 10.4 Formatting\n+       * @name 28.10.5 Formatting\n        *\n        * These functions perform formatted substitution of the matched\n        * character sequences into their target.  The format specifiers and\n@@ -1898,7 +1907,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       //@}\n \n       /**\n-       * @name 10.5 Allocator\n+       * @name 28.10.6 Allocator\n        */\n       //@{\n \n@@ -1912,7 +1921,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       //@}\n \n       /**\n-       * @name 10.6 Swap\n+       * @name 28.10.7 Swap\n        */\n        //@{\n \n@@ -1929,12 +1938,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       //@}\n \n     private:\n-      template<typename, typename, typename, bool>\n-\tfriend class __detail::_Executor;\n-\n       template<typename, typename, typename>\n \tfriend class regex_iterator;\n \n+      /// @cond undocumented\n+\n+      template<typename, typename, typename, bool>\n+\tfriend class __detail::_Executor;\n+\n       template<typename _Bp, typename _Ap, typename _Cp, typename _Rp,\n \t__detail::_RegexExecutorPolicy, bool>\n \tfriend bool\n@@ -1971,6 +1982,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       { return _Base_type::operator[](_Base_type::size() - 1); }\n \n       _Bi_iter _M_begin;\n+      /// @endcond\n     };\n \n   typedef match_results<const char*>\t\t cmatch;\n@@ -1981,10 +1993,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #endif\n \n   // match_results comparisons\n+\n   /**\n    * @brief Compares two match_results for equality.\n    * @returns true if the two objects refer to the same match,\n-   * false otherwise.\n+   *          false otherwise.\n    */\n   template<typename _Bi_iter, typename _Alloc>\n     inline bool\n@@ -2008,7 +2021,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   /**\n    * @brief Compares two match_results for inequality.\n    * @returns true if the two objects do not refer to the same match,\n-   * false otherwise.\n+   *          false otherwise.\n    */\n   template<typename _Bi_iter, class _Alloc>\n     inline bool\n@@ -2030,9 +2043,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t match_results<_Bi_iter, _Alloc>& __rhs) noexcept\n     { __lhs.swap(__rhs); }\n \n+\n _GLIBCXX_END_NAMESPACE_CXX11\n \n-  // [7.11.2] Function template regex_match\n+  // [28.11.2] Function template regex_match\n   /**\n    * @name Matching, Searching, and Replacing\n    */"}, {"sha": "dbe348dbfe88ba691555ef102ca112e57edbf6c9", "filename": "libstdc++-v3/include/bits/regex.tcc", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2313938e75f98487eb83d605e0670e2d108c3353/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2313938e75f98487eb83d605e0670e2d108c3353/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.tcc?ref=2313938e75f98487eb83d605e0670e2d108c3353", "patch": "@@ -34,6 +34,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n namespace __detail\n {\n+  /// @cond undocumented\n+\n   // Result of merging regex_match and regex_search.\n   //\n   // __policy now can be _S_auto (auto dispatch) and _S_alternate (use\n@@ -118,7 +120,10 @@ namespace __detail\n \t}\n       return __ret;\n     }\n-}\n+  /// @endcond\n+} // namespace __detail\n+\n+  /// @cond\n \n   template<typename _Ch_type>\n   template<typename _Fwd_iter>\n@@ -352,7 +357,8 @@ namespace __detail\n \n   template<typename _Bi_iter, typename _Alloc>\n   template<typename _Out_iter>\n-    _Out_iter match_results<_Bi_iter, _Alloc>::\n+    _Out_iter\n+    match_results<_Bi_iter, _Alloc>::\n     format(_Out_iter __out,\n \t   const match_results<_Bi_iter, _Alloc>::char_type* __fmt_first,\n \t   const match_results<_Bi_iter, _Alloc>::char_type* __fmt_last,\n@@ -667,5 +673,7 @@ namespace __detail\n \t_M_result = nullptr;\n     }\n \n+  /// @endcond\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}]}