{"sha": "51914674f406579519e45f82ce7567910ed48032", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE5MTQ2NzRmNDA2NTc5NTE5ZTQ1ZjgyY2U3NTY3OTEwZWQ0ODAzMg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-10-11T18:01:35Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-10-11T18:01:35Z"}, "message": "NIOSocket.java (setChannel): Initialize impl.\n\n2003-10-11  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/nio/NIOSocket.java (setChannel): Initialize impl.\n\t* gnu/java/nio/ServerSocketChannelImpl.java\n\t(serverSocket): Made it a NIOServerSocket.\n\t(impl): Removed.\n\t(ServerSocketChannelImpl): Initialize only serverSocket.\n\t(initServerSocket): Removed.\n\t(getNativeFD): Rewritten.\n\t(implConfigureBlocking): Set socket timeout and removed comment.\n\t(accept): Rewritten.\n\t* gnu/java/nio/SocketChannelImpl.java\n\t(impl): New variable.\n\t(connected): Removed.\n\t(SocketChannelImpl): Initialize impl too.\n\t(getImpl): New method.\n\t(isConnected): Rewritten.\n\t(read): Rewritten, set position in buffer correctly.\n\t(write): Set position in buffer correctly.\n\t* java/net/ServerSocket.java (getImpl): New method.\n\t* gnu/java/nio/NIOServerSocket.java,\n\tgnu/java/nio/natNIOServerSocket.cc: New files.\n\t* gnu/java/nio/natServerSocketChannelImpl.cc: Removed.\n\t* Makefile.am\n\t(ordinary_java_source_files):\n\tAdded gnu/java/nio/NIOServerSocket.java.\n\t(nat_source_files):\n\tRemoved gnu/java/nio/natServerSocketChannelImpl.cc\n\tand added gnu/java/nio/natNIOServerSocket.cc.\n\t* Makefile.in: Regenerated.\n\nFrom-SVN: r72345", "tree": {"sha": "f3c9f1f5921233e31d10682889fd919d402a47e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3c9f1f5921233e31d10682889fd919d402a47e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51914674f406579519e45f82ce7567910ed48032", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51914674f406579519e45f82ce7567910ed48032", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51914674f406579519e45f82ce7567910ed48032", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51914674f406579519e45f82ce7567910ed48032/comments", "author": null, "committer": null, "parents": [{"sha": "5a2a057de88dc9da544788f7e5a02567dd28e39d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a2a057de88dc9da544788f7e5a02567dd28e39d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a2a057de88dc9da544788f7e5a02567dd28e39d"}], "stats": {"total": 275, "additions": 224, "deletions": 51}, "files": [{"sha": "78d5b340ca6e5c0dd94e97098e54fe12b17e31b1", "filename": "libjava/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51914674f406579519e45f82ce7567910ed48032/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51914674f406579519e45f82ce7567910ed48032/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=51914674f406579519e45f82ce7567910ed48032", "patch": "@@ -1,3 +1,34 @@\n+2003-10-11  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/nio/NIOSocket.java (setChannel): Initialize impl.\n+\t* gnu/java/nio/ServerSocketChannelImpl.java\n+\t(serverSocket): Made it a NIOServerSocket.\n+\t(impl): Removed.\n+\t(ServerSocketChannelImpl): Initialize only serverSocket.\n+\t(initServerSocket): Removed.\n+\t(getNativeFD): Rewritten.\n+\t(implConfigureBlocking): Set socket timeout and removed comment.\n+\t(accept): Rewritten.\n+\t* gnu/java/nio/SocketChannelImpl.java\n+\t(impl): New variable.\n+\t(connected): Removed.\n+\t(SocketChannelImpl): Initialize impl too.\n+\t(getImpl): New method.\n+\t(isConnected): Rewritten.\n+\t(read): Rewritten, set position in buffer correctly.\n+\t(write): Set position in buffer correctly.\n+\t* java/net/ServerSocket.java (getImpl): New method.\n+\t* gnu/java/nio/NIOServerSocket.java,\n+\tgnu/java/nio/natNIOServerSocket.cc: New files.\n+\t* gnu/java/nio/natServerSocketChannelImpl.cc: Removed.\n+\t* Makefile.am\n+\t(ordinary_java_source_files):\n+\tAdded gnu/java/nio/NIOServerSocket.java.\n+\t(nat_source_files):\n+\tRemoved gnu/java/nio/natServerSocketChannelImpl.cc\n+\tand added gnu/java/nio/natNIOServerSocket.cc.\n+\t* Makefile.in: Regenerated.\n+\n 2003-10-11  Michael Koch  <konqueror@gmx.de>\n \n \t* java/awt/ActiveEvent.java,"}, {"sha": "47c4b1ad788e798eecc1a3a2fb10d785fa329f80", "filename": "libjava/Makefile.am", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51914674f406579519e45f82ce7567910ed48032/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51914674f406579519e45f82ce7567910ed48032/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=51914674f406579519e45f82ce7567910ed48032", "patch": "@@ -2187,6 +2187,7 @@ gnu/java/nio/DatagramChannelSelectionKey.java \\\n gnu/java/nio/FileLockImpl.java \\\n gnu/java/nio/NIOConstants.java \\\n gnu/java/nio/NIODatagramSocket.java \\\n+gnu/java/nio/NIOServerSocket.java \\\n gnu/java/nio/NIOSocket.java \\\n gnu/java/nio/PipeImpl.java \\\n gnu/java/nio/SelectionKeyImpl.java \\\n@@ -2659,7 +2660,7 @@ gnu/java/net/natPlainSocketImpl.cc \\\n gnu/java/net/protocol/core/natCoreInputStream.cc \\\n gnu/java/nio/natFileLockImpl.cc \\\n gnu/java/nio/natSelectorImpl.cc \\\n-gnu/java/nio/natServerSocketChannelImpl.cc \\\n+gnu/java/nio/natNIOServerSocket.cc \\\n java/io/natFile.cc \\\n java/io/natFileDescriptor.cc \\\n java/io/natObjectInputStream.cc \\"}, {"sha": "08a68befe1c97ac80b1b38a3ca773a1d3fe03285", "filename": "libjava/Makefile.in", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51914674f406579519e45f82ce7567910ed48032/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51914674f406579519e45f82ce7567910ed48032/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=51914674f406579519e45f82ce7567910ed48032", "patch": "@@ -1906,6 +1906,7 @@ gnu/java/nio/DatagramChannelSelectionKey.java \\\n gnu/java/nio/FileLockImpl.java \\\n gnu/java/nio/NIOConstants.java \\\n gnu/java/nio/NIODatagramSocket.java \\\n+gnu/java/nio/NIOServerSocket.java \\\n gnu/java/nio/NIOSocket.java \\\n gnu/java/nio/PipeImpl.java \\\n gnu/java/nio/SelectionKeyImpl.java \\\n@@ -2377,7 +2378,7 @@ gnu/java/net/natPlainSocketImpl.cc \\\n gnu/java/net/protocol/core/natCoreInputStream.cc \\\n gnu/java/nio/natFileLockImpl.cc \\\n gnu/java/nio/natSelectorImpl.cc \\\n-gnu/java/nio/natServerSocketChannelImpl.cc \\\n+gnu/java/nio/natNIOServerSocket.cc \\\n java/io/natFile.cc \\\n java/io/natFileDescriptor.cc \\\n java/io/natObjectInputStream.cc \\\n@@ -2555,7 +2556,7 @@ gnu/java/net/natPlainDatagramSocketImpl.lo \\\n gnu/java/net/natPlainSocketImpl.lo \\\n gnu/java/net/protocol/core/natCoreInputStream.lo \\\n gnu/java/nio/natFileLockImpl.lo gnu/java/nio/natSelectorImpl.lo \\\n-gnu/java/nio/natServerSocketChannelImpl.lo java/io/natFile.lo \\\n+gnu/java/nio/natNIOServerSocket.lo java/io/natFile.lo \\\n java/io/natFileDescriptor.lo java/io/natObjectInputStream.lo \\\n java/io/natVMObjectStreamClass.lo java/lang/natCharacter.lo \\\n java/lang/natClass.lo java/lang/natClassLoader.lo \\\n@@ -3035,7 +3036,8 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/gnu/java/nio/DatagramChannelImpl.P \\\n .deps/gnu/java/nio/DatagramChannelSelectionKey.P \\\n .deps/gnu/java/nio/FileLockImpl.P .deps/gnu/java/nio/NIOConstants.P \\\n-.deps/gnu/java/nio/NIODatagramSocket.P .deps/gnu/java/nio/NIOSocket.P \\\n+.deps/gnu/java/nio/NIODatagramSocket.P \\\n+.deps/gnu/java/nio/NIOServerSocket.P .deps/gnu/java/nio/NIOSocket.P \\\n .deps/gnu/java/nio/PipeImpl.P .deps/gnu/java/nio/SelectionKeyImpl.P \\\n .deps/gnu/java/nio/SelectorImpl.P \\\n .deps/gnu/java/nio/SelectorProviderImpl.P \\\n@@ -3052,8 +3054,8 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/gnu/java/nio/charset/UTF_16Encoder.P \\\n .deps/gnu/java/nio/charset/UTF_16LE.P \\\n .deps/gnu/java/nio/charset/UTF_8.P .deps/gnu/java/nio/natFileLockImpl.P \\\n+.deps/gnu/java/nio/natNIOServerSocket.P \\\n .deps/gnu/java/nio/natSelectorImpl.P \\\n-.deps/gnu/java/nio/natServerSocketChannelImpl.P \\\n .deps/gnu/java/rmi/RMIMarshalledObjectInputStream.P \\\n .deps/gnu/java/rmi/RMIMarshalledObjectOutputStream.P \\\n .deps/gnu/java/rmi/dgc/DGCImpl.P .deps/gnu/java/rmi/dgc/DGCImpl_Skel.P \\"}, {"sha": "89def3bb5ee2f2fc439ed6cf6e1178e4a297b4de", "filename": "libjava/gnu/java/nio/NIOServerSocket.java", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51914674f406579519e45f82ce7567910ed48032/libjava%2Fgnu%2Fjava%2Fnio%2FNIOServerSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51914674f406579519e45f82ce7567910ed48032/libjava%2Fgnu%2Fjava%2Fnio%2FNIOServerSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FNIOServerSocket.java?ref=51914674f406579519e45f82ce7567910ed48032", "patch": "@@ -0,0 +1,80 @@\n+/* NIOServerSocket.java -- \n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.nio;\n+\n+import gnu.java.net.PlainSocketImpl;\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.nio.channels.ServerSocketChannel;\n+import java.nio.channels.SocketChannel;\n+\n+/**\n+ * @author Michael Koch\n+ */\n+public final class NIOServerSocket extends ServerSocket\n+{\n+  private PlainSocketImpl impl;\n+  private ServerSocketChannelImpl channel;\n+    \n+  protected NIOServerSocket (ServerSocketChannelImpl channel)\n+    throws IOException\n+  {\n+    super();\n+    this.channel = channel;\n+  }\n+\n+  public native PlainSocketImpl getPlainSocketImpl();\n+\n+  public ServerSocketChannel getChannel()\n+  {\n+    return channel;\n+  }\n+\n+  public Socket accept() throws IOException\n+  {\n+    SecurityManager sm = System.getSecurityManager();\n+    if (sm != null)\n+      sm.checkListen (getLocalPort());\n+\n+    SocketChannel socketChannel = channel.provider().openSocketChannel();\n+    implAccept (socketChannel.socket());\n+    return socketChannel.socket();\n+  }\n+}"}, {"sha": "ba9807396be1e0d3c32d4b2a968b724b8ca13e27", "filename": "libjava/gnu/java/nio/NIOSocket.java", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51914674f406579519e45f82ce7567910ed48032/libjava%2Fgnu%2Fjava%2Fnio%2FNIOSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51914674f406579519e45f82ce7567910ed48032/libjava%2Fgnu%2Fjava%2Fnio%2FNIOSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FNIOSocket.java?ref=51914674f406579519e45f82ce7567910ed48032", "patch": "@@ -66,6 +66,7 @@ public final PlainSocketImpl getImpl()\n \n   final void setChannel (SocketChannelImpl channel)\n   {\n+    this.impl = channel.getImpl();\n     this.channel = channel;\n   }\n   "}, {"sha": "89bbdec87464ad4f9de22c148ff389c25e4f8bc6", "filename": "libjava/gnu/java/nio/ServerSocketChannelImpl.java", "status": "modified", "additions": 32, "deletions": 18, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51914674f406579519e45f82ce7567910ed48032/libjava%2Fgnu%2Fjava%2Fnio%2FServerSocketChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51914674f406579519e45f82ce7567910ed48032/libjava%2Fgnu%2Fjava%2Fnio%2FServerSocketChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FServerSocketChannelImpl.java?ref=51914674f406579519e45f82ce7567910ed48032", "patch": "@@ -1,5 +1,5 @@\n /* ServerSocketChannelImpl.java -- \n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -44,35 +44,30 @@\n import java.net.ServerSocket;\n import java.net.Socket;\n import java.net.SocketAddress;\n+import java.net.SocketException;\n+import java.net.SocketTimeoutException;\n+import java.nio.channels.ClosedChannelException;\n+import java.nio.channels.NotYetBoundException;\n import java.nio.channels.ServerSocketChannel;\n import java.nio.channels.SocketChannel;\n import java.nio.channels.spi.SelectorProvider;\n \n public final class ServerSocketChannelImpl extends ServerSocketChannel\n {\n-  ServerSocket serverSocket;\n-  PlainSocketImpl impl;\n+  NIOServerSocket serverSocket;\n   boolean blocking = true;\n   boolean connected = false;\n \n   protected ServerSocketChannelImpl (SelectorProvider provider)\n     throws IOException\n   {\n     super (provider);\n-    impl = new PlainSocketImpl();\n-    initServerSocket();\n+    serverSocket = new NIOServerSocket (this);\n   }\n \n-  /*\n-   * This method is only need to call a package private constructor\n-   * of java.net.ServerSocket. It only initializes the member variables\n-   * \"serverSocket\".\n-   */\n-  private native void initServerSocket() throws IOException;\n-\n   public int getNativeFD()\n   {\n-    return impl.getNativeFD();\n+    return serverSocket.getPlainSocketImpl().getNativeFD();\n   }\n  \n   public void finalizer()\n@@ -97,15 +92,34 @@ protected void implCloseSelectableChannel () throws IOException\n \n   protected void implConfigureBlocking (boolean blocking) throws IOException\n   {\n-    this.blocking = blocking; // FIXME\n+    serverSocket.setSoTimeout (blocking ? 0 : NIOConstants.DEFAULT_TIMEOUT);\n+    this.blocking = blocking;\n   }\n \n   public SocketChannel accept () throws IOException\n   {\n-    SocketChannelImpl result = new SocketChannelImpl (provider ());\n-    Socket socket = serverSocket.accept();\n-    //socket.setChannel (result); // FIXME\n-    return result;\n+    if (!isOpen())\n+      throw new ClosedChannelException();\n+\n+    if (!serverSocket.isBound())\n+      throw new NotYetBoundException();\n+\n+    boolean completed = false;\n+    \n+    try\n+      {\n+        NIOSocket socket = (NIOSocket) serverSocket.accept();\n+        completed = true;\n+        return socket.getChannel();\n+      }\n+    catch (SocketTimeoutException e)\n+      {\n+        return null;\n+      }\n+    finally\n+      {\n+        end (completed);\n+      }\n   }\n \n   public ServerSocket socket ()"}, {"sha": "0478e32ea99e4ca54c247a0c515f1c08fda43ab2", "filename": "libjava/gnu/java/nio/SocketChannelImpl.java", "status": "modified", "additions": 37, "deletions": 27, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51914674f406579519e45f82ce7567910ed48032/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51914674f406579519e45f82ce7567910ed48032/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java?ref=51914674f406579519e45f82ce7567910ed48032", "patch": "@@ -63,25 +63,26 @@\n \n public final class SocketChannelImpl extends SocketChannel\n {\n+  private PlainSocketImpl impl;\n   private NIOSocket socket;\n   private boolean blocking = true;\n-  private boolean connected = false;\n   private boolean connectionPending = false;\n \n   SocketChannelImpl (SelectorProvider provider)\n     throws IOException\n   {\n     super (provider);\n-    socket = new NIOSocket (new PlainSocketImpl(), this);\n+    impl = new PlainSocketImpl();\n+    socket = new NIOSocket (impl, this);\n   }\n   \n   SocketChannelImpl (SelectorProvider provider,\n                      NIOSocket socket)\n     throws IOException\n   {\n     super (provider);\n+    this.impl = socket.getImpl();\n     this.socket = socket;\n-    this.connected = socket.isConnected();\n   }\n \n   public void finalizer()\n@@ -98,14 +99,18 @@ public void finalizer()\n       }\n   }\n \n+  PlainSocketImpl getImpl()\n+  {\n+    return impl;\n+  }\n+\n   int getNativeFD()\n   {\n     return socket.getImpl().getNativeFD();\n   }\n \n   protected void implCloseSelectableChannel () throws IOException\n   {\n-    connected = false;\n     socket.close();\n   }\n \n@@ -136,15 +141,13 @@ public boolean connect (SocketAddress remote) throws IOException\n       {\n         // Do blocking connect.\n         socket.connect (remote);\n-        connected = true;\n         return true;\n       }\n \n     // Do non-blocking connect.\n     try\n       {\n         socket.connect (remote, NIOConstants.DEFAULT_TIMEOUT);\n-        connected = true;\n         return true;\n       }\n     catch (SocketTimeoutException e)\n@@ -174,15 +177,13 @@ public boolean finishConnect ()\n     if (isBlocking())\n       {\n         selector.select(); // blocking until channel is connected.\n-        connected = true;\n         connectionPending = false;\n         return true;\n       }\n \n     int ready = selector.selectNow(); // non-blocking\n     if (ready == 1)\n       {\n-        connected = true;\n         connectionPending = false;\n         return true;\n       }\n@@ -192,7 +193,7 @@ public boolean finishConnect ()\n \n   public boolean isConnected ()\n   {\n-    return connected;\n+    return socket.isConnected();\n   }\n     \n   public boolean isConnectionPending ()\n@@ -207,13 +208,21 @@ public Socket socket ()\n \n   public int read (ByteBuffer dst) throws IOException\n   {\n-    if (!connected)\n+    if (!isConnected())\n       throw new NotYetConnectedException();\n     \n     byte[] data;\n     int offset = 0;\n+    InputStream input = socket.getInputStream();\n+    int available = input.available();\n     int len = dst.remaining();\n \t\n+    if (available == 0)\n+      return 0;\n+    \n+    if (len > available)\n+      len = available;\n+\n     if (dst.hasArray())\n       {\n         offset = dst.arrayOffset() + dst.position();\n@@ -224,15 +233,6 @@ public int read (ByteBuffer dst) throws IOException\n         data = new byte [len];\n       }\n \n-    InputStream input = socket.getInputStream();\n-    int available = input.available();\n-\n-    if (available == 0)\n-      return 0;\n-    \n-    if (len > available)\n-      len = available;\n-\n     int readBytes = 0;\n     boolean completed = false;\n \n@@ -247,19 +247,23 @@ public int read (ByteBuffer dst) throws IOException\n         end (completed);\n       }\n \n-    if (readBytes > 0\n-        && !dst.hasArray())\n-      {\n-        dst.put (data, offset, len);\n-      }\n+    if (readBytes > 0)\n+      if (dst.hasArray())\n+\t{\n+\t  dst.position (dst.position() + readBytes);\n+\t}\n+      else\n+        {\n+          dst.put (data, offset, len);\n+        }\n \n     return readBytes;\n   }\n     \n   public long read (ByteBuffer[] dsts, int offset, int length)\n     throws IOException\n   {\n-    if (!connected)\n+    if (!isConnected())\n       throw new NotYetConnectedException();\n     \n     if ((offset < 0)\n@@ -279,7 +283,7 @@ public long read (ByteBuffer[] dsts, int offset, int length)\n   public int write (ByteBuffer src)\n     throws IOException\n   {\n-    if (!connected)\n+    if (!isConnected())\n       throw new NotYetConnectedException();\n     \n     byte[] data;\n@@ -301,13 +305,19 @@ public int write (ByteBuffer src)\n     \n     OutputStream output = socket.getOutputStream();\n     output.write (data, offset, len);\n+\n+    if (src.hasArray())\n+      {\n+\tsrc.position (src.position() + len);\n+      }\n+    \n     return len;\n   }\n \n   public long write (ByteBuffer[] srcs, int offset, int length)\n     throws IOException\n   {\n-    if (!connected)\n+    if (!isConnected())\n       throw new NotYetConnectedException();\n     \n     if ((offset < 0)"}, {"sha": "2d3fb2db7605a4c4ec4614b6ec8ecdc00a9a878f", "filename": "libjava/gnu/java/nio/natNIOServerSocket.cc", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51914674f406579519e45f82ce7567910ed48032/libjava%2Fgnu%2Fjava%2Fnio%2FnatNIOServerSocket.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51914674f406579519e45f82ce7567910ed48032/libjava%2Fgnu%2Fjava%2Fnio%2FnatNIOServerSocket.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FnatNIOServerSocket.cc?ref=51914674f406579519e45f82ce7567910ed48032", "patch": "@@ -0,0 +1,24 @@\n+// natNIOServerSocket.cc\n+\n+/* Copyright (C) 2003  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+#include <config.h>\n+#include <platform.h>\n+\n+#include <gnu/java/net/PlainSocketImpl.h>\n+#include <gnu/java/nio/NIOServerSocket.h>\n+#include <java/net/ServerSocket.h>\n+#include <java/net/SocketImpl.h>\n+\n+gnu::java::net::PlainSocketImpl*\n+gnu::java::nio::NIOServerSocket::getPlainSocketImpl()\n+{\n+  return (gnu::java::net::PlainSocketImpl*)\n+    ::java::net::ServerSocket::getImpl();\n+}"}, {"sha": "f4d1ecc45de003422d7030b82cd28d6258416858", "filename": "libjava/java/net/ServerSocket.java", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51914674f406579519e45f82ce7567910ed48032/libjava%2Fjava%2Fnet%2FServerSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51914674f406579519e45f82ce7567910ed48032/libjava%2Fjava%2Fnet%2FServerSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FServerSocket.java?ref=51914674f406579519e45f82ce7567910ed48032", "patch": "@@ -76,7 +76,7 @@\n   private boolean closed = false;\n \n   /*\n-   * This is only used by java.nio.\n+   * This constructor is only used by java.nio.\n    */\n   // FIXME: Workaround a bug in gcj.\n   //ServerSocket (PlainSocketImpl impl) throws IOException\n@@ -85,6 +85,16 @@\n     this.impl = impl;\n     this.impl.create (true);\n   }\n+\n+  /*\n+   * This method is only used by java.nio.\n+   */\n+  // FIXME: Workaround a bug in gcj.\n+  //PlainSocketImpl getImpl()\n+  SocketImpl getImpl()\n+  {\n+    return impl;\n+  }\n   \n   /**\n    * Constructor that simply sets the implementation."}]}