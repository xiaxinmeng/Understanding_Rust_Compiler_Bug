{"sha": "a26ff83ed07e33c4aa46f3314553c0d15ca21100", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI2ZmY4M2VkMDdlMzNjNGFhNDZmMzMxNDU1M2MwZDE1Y2EyMTEwMA==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-02T05:05:54Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-16T08:35:29Z"}, "message": "Check mask type when doing cond_op related gimple simplification.\n\ngcc/ChangeLog:\n\n\tPR middle-end/102080\n\t* match.pd: Check mask type when doing cond_op related gimple\n\tsimplification.\n\t* tree.c (is_truth_type_for): New function.\n\t* tree.h (is_truth_type_for): New declaration.\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/102080\n\t* gcc.target/i386/pr102080.c: New test.", "tree": {"sha": "5f6c5fa4a159fb95184b17896df2a1ada6e72059", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f6c5fa4a159fb95184b17896df2a1ada6e72059"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a26ff83ed07e33c4aa46f3314553c0d15ca21100", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a26ff83ed07e33c4aa46f3314553c0d15ca21100", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a26ff83ed07e33c4aa46f3314553c0d15ca21100", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a26ff83ed07e33c4aa46f3314553c0d15ca21100/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a73d59089a9daca7316eeccece13166ad60dbf13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a73d59089a9daca7316eeccece13166ad60dbf13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a73d59089a9daca7316eeccece13166ad60dbf13"}], "stats": {"total": 57, "additions": 53, "deletions": 4}, "files": [{"sha": "41f9e6d97f0f3ec3cbeebbfab58df32337ff28b0", "filename": "gcc/match.pd", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a26ff83ed07e33c4aa46f3314553c0d15ca21100/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a26ff83ed07e33c4aa46f3314553c0d15ca21100/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=a26ff83ed07e33c4aa46f3314553c0d15ca21100", "patch": "@@ -7020,13 +7020,13 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (vec_cond @0 (view_convert? (uncond_op@4 @1 @2)) @3)\n   (with { tree op_type = TREE_TYPE (@4); }\n    (if (vectorized_internal_fn_supported_p (as_internal_fn (cond_op), op_type)\n-\t&& element_precision (type) == element_precision (op_type))\n+\t&& is_truth_type_for (op_type, TREE_TYPE (@0)))\n     (view_convert (cond_op @0 @1 @2 (view_convert:op_type @3))))))\n  (simplify\n   (vec_cond @0 @1 (view_convert? (uncond_op@4 @2 @3)))\n   (with { tree op_type = TREE_TYPE (@4); }\n    (if (vectorized_internal_fn_supported_p (as_internal_fn (cond_op), op_type)\n-\t&& element_precision (type) == element_precision (op_type))\n+\t&& is_truth_type_for (op_type, TREE_TYPE (@0)))\n     (view_convert (cond_op (bit_not @0) @2 @3 (view_convert:op_type @1)))))))\n \n /* Same for ternary operations.  */\n@@ -7036,13 +7036,13 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (vec_cond @0 (view_convert? (uncond_op@5 @1 @2 @3)) @4)\n   (with { tree op_type = TREE_TYPE (@5); }\n    (if (vectorized_internal_fn_supported_p (as_internal_fn (cond_op), op_type)\n-\t&& element_precision (type) == element_precision (op_type))\n+\t&& is_truth_type_for (op_type, TREE_TYPE (@0)))\n     (view_convert (cond_op @0 @1 @2 @3 (view_convert:op_type @4))))))\n  (simplify\n   (vec_cond @0 @1 (view_convert? (uncond_op@5 @2 @3 @4)))\n   (with { tree op_type = TREE_TYPE (@5); }\n    (if (vectorized_internal_fn_supported_p (as_internal_fn (cond_op), op_type)\n-\t&& element_precision (type) == element_precision (op_type))\n+\t&& is_truth_type_for (op_type, TREE_TYPE (@0)))\n     (view_convert (cond_op (bit_not @0) @2 @3 @4\n \t\t  (view_convert:op_type @1)))))))\n #endif"}, {"sha": "4c5ee32ee6378c741b9b157db1bc1d163deeb9d7", "filename": "gcc/testsuite/gcc.target/i386/pr102080.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a26ff83ed07e33c4aa46f3314553c0d15ca21100/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102080.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a26ff83ed07e33c4aa46f3314553c0d15ca21100/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102080.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102080.c?ref=a26ff83ed07e33c4aa46f3314553c0d15ca21100", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#include<immintrin.h>\n+typedef float __m256 __attribute__((__vector_size__(32)));\n+__m256 _mm256_blendv_ps___Y, _mm256_blendv_ps___M, _mm256_mul_ps___A,\n+  _mm256_mul_ps___B, IfThenElse___trans_tmp_9;\n+\n+void\n+__attribute__ ((target(\"avx\")))\n+IfThenElse (__m256 no) {\n+  IfThenElse___trans_tmp_9 = _mm256_blendv_ps (no, _mm256_blendv_ps___Y, _mm256_blendv_ps___M);\n+}\n+void\n+__attribute__ ((target(\"avx512vl\")))\n+EncodedFromDisplay() {\n+  __m256 __trans_tmp_11 = _mm256_mul_ps___A * _mm256_mul_ps___B;\n+  IfThenElse(__trans_tmp_11);\n+}"}, {"sha": "994775d7314fa7307cd4b471b2713d168663e21f", "filename": "gcc/tree.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a26ff83ed07e33c4aa46f3314553c0d15ca21100/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a26ff83ed07e33c4aa46f3314553c0d15ca21100/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=a26ff83ed07e33c4aa46f3314553c0d15ca21100", "patch": "@@ -10737,6 +10737,35 @@ signed_type_for (tree type)\n   return signed_or_unsigned_type_for (0, type);\n }\n \n+/* - For VECTOR_TYPEs:\n+    - The truth type must be a VECTOR_BOOLEAN_TYPE.\n+    - The number of elements must match (known_eq).\n+    - targetm.vectorize.get_mask_mode exists, and exactly\n+      the same mode as the truth type.\n+   - Otherwise, the truth type must be a BOOLEAN_TYPE\n+     or useless_type_conversion_p to BOOLEAN_TYPE.  */\n+bool\n+is_truth_type_for (tree type, tree truth_type)\n+{\n+  machine_mode mask_mode = TYPE_MODE (truth_type);\n+  machine_mode vmode = TYPE_MODE (type);\n+  machine_mode tmask_mode;\n+\n+  if (TREE_CODE (type) == VECTOR_TYPE)\n+    {\n+      if (VECTOR_BOOLEAN_TYPE_P (truth_type)\n+\t  && known_eq (TYPE_VECTOR_SUBPARTS (type),\n+\t\t       TYPE_VECTOR_SUBPARTS (truth_type))\n+\t  && targetm.vectorize.get_mask_mode (vmode).exists (&tmask_mode)\n+\t  && tmask_mode == mask_mode)\n+\treturn true;\n+\n+      return false;\n+    }\n+\n+  return useless_type_conversion_p (boolean_type_node, truth_type);\n+}\n+\n /* If TYPE is a vector type, return a signed integer vector type with the\n    same width and number of subparts. Otherwise return boolean_type_node.  */\n "}, {"sha": "8477f8914cbaca1172643f9df1301304cbb34565", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a26ff83ed07e33c4aa46f3314553c0d15ca21100/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a26ff83ed07e33c4aa46f3314553c0d15ca21100/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=a26ff83ed07e33c4aa46f3314553c0d15ca21100", "patch": "@@ -4591,6 +4591,7 @@ extern tree build_string_literal (unsigned, const char * = NULL,\n extern tree signed_or_unsigned_type_for (int, tree);\n extern tree signed_type_for (tree);\n extern tree unsigned_type_for (tree);\n+extern bool is_truth_type_for (tree, tree);\n extern tree truth_type_for (tree);\n extern tree build_pointer_type_for_mode (tree, machine_mode, bool);\n extern tree build_pointer_type (tree);"}]}