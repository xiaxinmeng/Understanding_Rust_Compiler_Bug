{"sha": "362aa474604751c48e9ff6c39fcf81ee9adad8d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzYyYWE0NzQ2MDQ3NTFjNDhlOWZmNmMzOWZjZjgxZWU5YWRhZDhkMg==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2012-06-27T17:38:00Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2012-06-27T17:38:00Z"}, "message": "re PR fortran/41951 ([OOP] Not diagnosing ambiguous operators (TB vs. INTERFACE))\n\n2012-06-27  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/41951\n\tPR fortran/49591\n\t* interface.c (check_new_interface): Rename, add 'loc' argument,\n\tmake non-static.\n\t(gfc_add_interface): Rename 'check_new_interface'\n\t* gfortran.h (gfc_check_new_interface): Add prototype.\n\t* resolve.c (resolve_typebound_intrinsic_op): Add typebound operator\n\ttargets to non-typebound operator list.\n\n\n2012-06-27  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/41951\n\tPR fortran/49591\n\t* gfortran.dg/typebound_operator_16.f03: New.\n\nFrom-SVN: r189022", "tree": {"sha": "e4e01843836bcc2058fb6dd585f2390353bb6a21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4e01843836bcc2058fb6dd585f2390353bb6a21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/362aa474604751c48e9ff6c39fcf81ee9adad8d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/362aa474604751c48e9ff6c39fcf81ee9adad8d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/362aa474604751c48e9ff6c39fcf81ee9adad8d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/362aa474604751c48e9ff6c39fcf81ee9adad8d2/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b585a51fb9b8c310ec7877bd7f0a93626b1d822a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b585a51fb9b8c310ec7877bd7f0a93626b1d822a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b585a51fb9b8c310ec7877bd7f0a93626b1d822a"}], "stats": {"total": 137, "additions": 117, "deletions": 20}, "files": [{"sha": "bbd0b50a9045390e5aef48046ab1791874d34135", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362aa474604751c48e9ff6c39fcf81ee9adad8d2/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362aa474604751c48e9ff6c39fcf81ee9adad8d2/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=362aa474604751c48e9ff6c39fcf81ee9adad8d2", "patch": "@@ -1,3 +1,14 @@\n+2012-06-27  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/41951\n+\tPR fortran/49591\n+\t* interface.c (check_new_interface): Rename, add 'loc' argument,\n+\tmake non-static.\n+\t(gfc_add_interface): Rename 'check_new_interface'\n+\t* gfortran.h (gfc_check_new_interface): Add prototype.\n+\t* resolve.c (resolve_typebound_intrinsic_op): Add typebound operator\n+\ttargets to non-typebound operator list.\n+\n 2012-06-22  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/47710"}, {"sha": "caa23bd6388d68b80caf0909fdd3dbd648216d6c", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362aa474604751c48e9ff6c39fcf81ee9adad8d2/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362aa474604751c48e9ff6c39fcf81ee9adad8d2/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=362aa474604751c48e9ff6c39fcf81ee9adad8d2", "patch": "@@ -2851,6 +2851,7 @@ gfc_symbol *gfc_search_interface (gfc_interface *, int,\n match gfc_extend_expr (gfc_expr *);\n void gfc_free_formal_arglist (gfc_formal_arglist *);\n gfc_try gfc_extend_assign (gfc_code *, gfc_namespace *);\n+gfc_try gfc_check_new_interface (gfc_interface *, gfc_symbol *, locus);\n gfc_try gfc_add_interface (gfc_symbol *);\n gfc_interface *gfc_current_interface_head (void);\n void gfc_set_current_interface_head (gfc_interface *);"}, {"sha": "34e1ad7f88bc6c4b17547c6566752fc8e9fac6be", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 34, "deletions": 20, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362aa474604751c48e9ff6c39fcf81ee9adad8d2/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362aa474604751c48e9ff6c39fcf81ee9adad8d2/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=362aa474604751c48e9ff6c39fcf81ee9adad8d2", "patch": "@@ -3551,17 +3551,17 @@ gfc_extend_assign (gfc_code *c, gfc_namespace *ns)\n    the given interface list.  Ambiguity isn't checked yet since module\n    procedures can be present without interfaces.  */\n \n-static gfc_try\n-check_new_interface (gfc_interface *base, gfc_symbol *new_sym)\n+gfc_try\n+gfc_check_new_interface (gfc_interface *base, gfc_symbol *new_sym, locus loc)\n {\n   gfc_interface *ip;\n \n   for (ip = base; ip; ip = ip->next)\n     {\n       if (ip->sym == new_sym)\n \t{\n-\t  gfc_error (\"Entity '%s' at %C is already present in the interface\",\n-\t\t     new_sym->name);\n+\t  gfc_error (\"Entity '%s' at %L is already present in the interface\",\n+\t\t     new_sym->name, &loc);\n \t  return FAILURE;\n \t}\n     }\n@@ -3591,48 +3591,61 @@ gfc_add_interface (gfc_symbol *new_sym)\n \t  {\n \t    case INTRINSIC_EQ:\n \t    case INTRINSIC_EQ_OS:\n-\t      if (check_new_interface (ns->op[INTRINSIC_EQ], new_sym) == FAILURE ||\n-\t          check_new_interface (ns->op[INTRINSIC_EQ_OS], new_sym) == FAILURE)\n+\t      if (gfc_check_new_interface (ns->op[INTRINSIC_EQ], new_sym,\n+\t\t\t\t\t   gfc_current_locus) == FAILURE\n+\t          || gfc_check_new_interface (ns->op[INTRINSIC_EQ_OS], new_sym,\n+\t\t\t\t\t      gfc_current_locus) == FAILURE)\n \t\treturn FAILURE;\n \t      break;\n \n \t    case INTRINSIC_NE:\n \t    case INTRINSIC_NE_OS:\n-\t      if (check_new_interface (ns->op[INTRINSIC_NE], new_sym) == FAILURE ||\n-\t          check_new_interface (ns->op[INTRINSIC_NE_OS], new_sym) == FAILURE)\n+\t      if (gfc_check_new_interface (ns->op[INTRINSIC_NE], new_sym,\n+\t\t\t\t\t   gfc_current_locus) == FAILURE\n+\t          || gfc_check_new_interface (ns->op[INTRINSIC_NE_OS], new_sym,\n+\t\t\t\t\t      gfc_current_locus) == FAILURE)\n \t\treturn FAILURE;\n \t      break;\n \n \t    case INTRINSIC_GT:\n \t    case INTRINSIC_GT_OS:\n-\t      if (check_new_interface (ns->op[INTRINSIC_GT], new_sym) == FAILURE ||\n-\t          check_new_interface (ns->op[INTRINSIC_GT_OS], new_sym) == FAILURE)\n+\t      if (gfc_check_new_interface (ns->op[INTRINSIC_GT], new_sym,\n+\t\t\t\t\t   gfc_current_locus) == FAILURE\n+\t          || gfc_check_new_interface (ns->op[INTRINSIC_GT_OS], new_sym,\n+\t\t\t\t\t      gfc_current_locus) == FAILURE)\n \t\treturn FAILURE;\n \t      break;\n \n \t    case INTRINSIC_GE:\n \t    case INTRINSIC_GE_OS:\n-\t      if (check_new_interface (ns->op[INTRINSIC_GE], new_sym) == FAILURE ||\n-\t          check_new_interface (ns->op[INTRINSIC_GE_OS], new_sym) == FAILURE)\n+\t      if (gfc_check_new_interface (ns->op[INTRINSIC_GE], new_sym,\n+\t\t\t\t\t   gfc_current_locus) == FAILURE\n+\t          || gfc_check_new_interface (ns->op[INTRINSIC_GE_OS], new_sym,\n+\t\t\t\t\t      gfc_current_locus) == FAILURE)\n \t\treturn FAILURE;\n \t      break;\n \n \t    case INTRINSIC_LT:\n \t    case INTRINSIC_LT_OS:\n-\t      if (check_new_interface (ns->op[INTRINSIC_LT], new_sym) == FAILURE ||\n-\t          check_new_interface (ns->op[INTRINSIC_LT_OS], new_sym) == FAILURE)\n+\t      if (gfc_check_new_interface (ns->op[INTRINSIC_LT], new_sym,\n+\t\t\t\t\t   gfc_current_locus) == FAILURE\n+\t          || gfc_check_new_interface (ns->op[INTRINSIC_LT_OS], new_sym,\n+\t\t\t\t\t      gfc_current_locus) == FAILURE)\n \t\treturn FAILURE;\n \t      break;\n \n \t    case INTRINSIC_LE:\n \t    case INTRINSIC_LE_OS:\n-\t      if (check_new_interface (ns->op[INTRINSIC_LE], new_sym) == FAILURE ||\n-\t          check_new_interface (ns->op[INTRINSIC_LE_OS], new_sym) == FAILURE)\n+\t      if (gfc_check_new_interface (ns->op[INTRINSIC_LE], new_sym,\n+\t\t\t\t\t   gfc_current_locus) == FAILURE\n+\t          || gfc_check_new_interface (ns->op[INTRINSIC_LE_OS], new_sym,\n+\t\t\t\t\t      gfc_current_locus) == FAILURE)\n \t\treturn FAILURE;\n \t      break;\n \n \t    default:\n-\t      if (check_new_interface (ns->op[current_interface.op], new_sym) == FAILURE)\n+\t      if (gfc_check_new_interface (ns->op[current_interface.op], new_sym,\n+\t\t\t\t\t   gfc_current_locus) == FAILURE)\n \t\treturn FAILURE;\n \t  }\n \n@@ -3646,16 +3659,17 @@ gfc_add_interface (gfc_symbol *new_sym)\n \t  if (sym == NULL)\n \t    continue;\n \n-\t  if (check_new_interface (sym->generic, new_sym) == FAILURE)\n+\t  if (gfc_check_new_interface (sym->generic, new_sym, gfc_current_locus)\n+\t      == FAILURE)\n \t    return FAILURE;\n \t}\n \n       head = &current_interface.sym->generic;\n       break;\n \n     case INTERFACE_USER_OP:\n-      if (check_new_interface (current_interface.uop->op, new_sym)\n-\t  == FAILURE)\n+      if (gfc_check_new_interface (current_interface.uop->op, new_sym,\n+\t\t\t\t   gfc_current_locus) == FAILURE)\n \treturn FAILURE;\n \n       head = &current_interface.uop->op;"}, {"sha": "0434e0804c7445eb4ba5d52851a7d58b8174fc3a", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362aa474604751c48e9ff6c39fcf81ee9adad8d2/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362aa474604751c48e9ff6c39fcf81ee9adad8d2/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=362aa474604751c48e9ff6c39fcf81ee9adad8d2", "patch": "@@ -11264,6 +11264,22 @@ resolve_typebound_intrinsic_op (gfc_symbol* derived, gfc_intrinsic_op op,\n \n       if (!gfc_check_operator_interface (target_proc, op, p->where))\n \tgoto error;\n+\n+      /* Add target to non-typebound operator list.  */\n+      if (!target->specific->deferred && !derived->attr.use_assoc\n+\t  && p->access != ACCESS_PRIVATE)\n+\t{\n+\t  gfc_interface *head, *intr;\n+\t  if (gfc_check_new_interface (derived->ns->op[op], target_proc,\n+\t\t\t\t       p->where) == FAILURE)\n+\t    return FAILURE;\n+\t  head = derived->ns->op[op];\n+\t  intr = gfc_get_interface ();\n+\t  intr->sym = target_proc;\n+\t  intr->where = p->where;\n+\t  intr->next = head;\n+\t  derived->ns->op[op] = intr;\n+\t}\n     }\n \n   return SUCCESS;"}, {"sha": "3f2a06fafe41076fe9780d1c16d2f7aa016a8fd3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362aa474604751c48e9ff6c39fcf81ee9adad8d2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362aa474604751c48e9ff6c39fcf81ee9adad8d2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=362aa474604751c48e9ff6c39fcf81ee9adad8d2", "patch": "@@ -1,3 +1,9 @@\n+2012-06-27  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/41951\n+\tPR fortran/49591\n+\t* gfortran.dg/typebound_operator_16.f03: New.\n+\n 2012-06-27  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.target/i386/sse4_1-pmuldq.c (TEST): Initialize"}, {"sha": "eff43ebe53bddeb6f1690420a6091aa6e07e6792", "filename": "gcc/testsuite/gfortran.dg/typebound_operator_16.f03", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362aa474604751c48e9ff6c39fcf81ee9adad8d2/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_operator_16.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362aa474604751c48e9ff6c39fcf81ee9adad8d2/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_operator_16.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_operator_16.f03?ref=362aa474604751c48e9ff6c39fcf81ee9adad8d2", "patch": "@@ -0,0 +1,49 @@\n+! { dg-do compile }\n+!\n+! PR 49591: [OOP] Multiple identical specific procedures in type-bound operator not detected\n+!\n+! This is interpretation request F03/0018:\n+! http://www.j3-fortran.org/doc/meeting/195/11-214.txt\n+!\n+! Contributed by Tobias Burnus <burnus@gcc.gnu.org>\n+\n+module M1\n+  type T\n+    integer x\n+  contains\n+    procedure :: MyAdd_t => myadd\n+    generic :: operator(+) => myAdd_t\n+  end type T\n+  type X\n+    real q\n+  contains\n+    procedure, pass(b) :: MyAdd_x => myadd\n+    generic :: operator(+) => myAdd_x       ! { dg-error \"is already present in the interface\" }\n+  end type X\n+contains\n+  integer function MyAdd ( A, B )\n+    class(t), intent(in) :: A\n+    class(x), intent(in) :: B\n+    myadd = a%x + b%q\n+  end function MyAdd\n+end module\n+\n+module M2\n+  interface operator(+)\n+    procedure MyAdd\n+  end interface\n+  type T\n+    integer x\n+  contains\n+    procedure :: MyAdd_t => myadd\n+    generic :: operator(+) => myAdd_t  ! { dg-error \"is already present in the interface\" }\n+  end type T\n+contains\n+  integer function MyAdd ( A, B )\n+    class(t), intent(in) :: A\n+    real, intent(in) :: B\n+    myadd = a%x + b\n+  end function MyAdd\n+end module\n+\n+! { dg-final { cleanup-modules \"M1 M2\" } }"}]}