{"sha": "2a45675fd08dd485d1766008982995d23c6a3e85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE0NTY3NWZkMDhkZDQ4NWQxNzY2MDA4OTgyOTk1ZDIzYzZhM2U4NQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2009-06-18T15:38:36Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2009-06-18T15:38:36Z"}, "message": "tree-sra.c: Include statistics.h\n\n2009-06-18  Martin Jambor  <mjambor@suse.cz>\n\n\t* tree-sra.c: Include statistics.h\n\t(sra_stats): New variable.\n\t(sra_initialize): Clear sra_stats.\n\t(create_access_replacement): Increment sra_stats.replacements.\n\t(get_access_replacement): Do not return twice.\n\t(analyze_all_variable_accesses): Increment statistics counter by the\n\tnumber of scalarized aggregates.\n\t(generate_subtree_copies): Increment sra_stats.subtree_copies.\n\t(sra_modify_expr): Increment sra_stats.exprs.\n\t(load_assign_lhs_subreplacements): Increment sra_stats.subreplacements.\n\t(sra_modify_assign): Increment sra_stats.exprs,\n\tsra_stats.separate_lhs_rhs_handling and sra_stats.deleted.\n\t(perform_intra_sra): Update statistics counters.\n\t* Makefile.in (tree-sra.o): Add statistics.h to dependencies.\n\nFrom-SVN: r148663", "tree": {"sha": "439adfe3d9e1f960cc6f4f06d9d64cc8daa17594", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/439adfe3d9e1f960cc6f4f06d9d64cc8daa17594"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a45675fd08dd485d1766008982995d23c6a3e85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a45675fd08dd485d1766008982995d23c6a3e85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a45675fd08dd485d1766008982995d23c6a3e85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a45675fd08dd485d1766008982995d23c6a3e85/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b506a5a2387f4a5f69a8c23840e1c733bcb1e595", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b506a5a2387f4a5f69a8c23840e1c733bcb1e595", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b506a5a2387f4a5f69a8c23840e1c733bcb1e595"}], "stats": {"total": 89, "additions": 80, "deletions": 9}, "files": [{"sha": "86be13ee26f2a298300e8da8bc105fa2e2c9fe1f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a45675fd08dd485d1766008982995d23c6a3e85/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a45675fd08dd485d1766008982995d23c6a3e85/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a45675fd08dd485d1766008982995d23c6a3e85", "patch": "@@ -1,3 +1,20 @@\n+2009-06-18  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* tree-sra.c: Include statistics.h\n+\t(sra_stats): New variable.\n+\t(sra_initialize): Clear sra_stats.\n+\t(create_access_replacement): Increment sra_stats.replacements.\n+\t(get_access_replacement): Do not return twice.\n+\t(analyze_all_variable_accesses): Increment statistics counter by the\n+\tnumber of scalarized aggregates.\n+\t(generate_subtree_copies): Increment sra_stats.subtree_copies.\n+\t(sra_modify_expr): Increment sra_stats.exprs.\n+\t(load_assign_lhs_subreplacements): Increment sra_stats.subreplacements.\n+\t(sra_modify_assign): Increment sra_stats.exprs,\n+\tsra_stats.separate_lhs_rhs_handling and sra_stats.deleted.\n+\t(perform_intra_sra): Update statistics counters.\n+\t* Makefile.in (tree-sra.o): Add statistics.h to dependencies.\n+\n 2009-06-18  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* config/arm/arm.c (TARGET_SCALAR_MODE_SUPPORTED_P): Redefine."}, {"sha": "744dab2a966c452cbc545f854ccedcd0da092bdc", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a45675fd08dd485d1766008982995d23c6a3e85/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a45675fd08dd485d1766008982995d23c6a3e85/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=2a45675fd08dd485d1766008982995d23c6a3e85", "patch": "@@ -2773,8 +2773,8 @@ tree-ssa-ccp.o : tree-ssa-ccp.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(TREE_DUMP_H) $(BASIC_BLOCK_H) $(TREE_PASS_H) langhooks.h \\\n    tree-ssa-propagate.h value-prof.h $(FLAGS_H) $(TARGET_H) $(TOPLEV_H)\n tree-sra.o : tree-sra.c $(CONFIG_H) $(SYSTEM_H) coretypes.h alloc-pool.h \\\n-   $(TM_H) $(TREE_H) $(GIMPLE_H) $(TREE_FLOW_H) $(DIAGNOSTIC_H) $(TREE_DUMP_H) \\\n-   $(TIMEVAR_H) $(PARAMS_H) $(TARGET_H) $(FLAGS_H)\n+   $(TM_H) $(TREE_H) $(GIMPLE_H) $(TREE_FLOW_H) $(DIAGNOSTIC_H) statistics.h \\\n+   $(TREE_DUMP_H) $(TIMEVAR_H) $(PARAMS_H) $(TARGET_H) $(FLAGS_H)\n tree-switch-conversion.o : tree-switch-conversion.c $(CONFIG_H) $(SYSTEM_H) \\\n     $(TREE_H) $(TM_P_H) $(TREE_FLOW_H) $(DIAGNOSTIC_H) $(TREE_INLINE_H) \\\n     $(TIMEVAR_H) $(TM_H) coretypes.h $(TREE_DUMP_H) $(GIMPLE_H) \\"}, {"sha": "497b47b11757a454c49e9caa5b7746fa55d1329b", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 61, "deletions": 7, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a45675fd08dd485d1766008982995d23c6a3e85/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a45675fd08dd485d1766008982995d23c6a3e85/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=2a45675fd08dd485d1766008982995d23c6a3e85", "patch": "@@ -80,6 +80,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple.h\"\n #include \"tree-flow.h\"\n #include \"diagnostic.h\"\n+#include \"statistics.h\"\n #include \"tree-dump.h\"\n #include \"timevar.h\"\n #include \"params.h\"\n@@ -219,6 +220,33 @@ static struct access *work_queue_head;\n    representative fields are dumped, otherwise those which only describe the\n    individual access are.  */\n \n+static struct\n+{\n+  /* Number of created scalar replacements.  */\n+  int replacements;\n+\n+  /* Number of times sra_modify_expr or sra_modify_assign themselves changed an\n+     expression.  */\n+  int exprs;\n+\n+  /* Number of statements created by generate_subtree_copies.  */\n+  int subtree_copies;\n+\n+  /* Number of statements created by load_assign_lhs_subreplacements.  */\n+  int subreplacements;\n+\n+  /* Number of times sra_modify_assign has deleted a statement.  */\n+  int deleted;\n+\n+  /* Number of times sra_modify_assign has to deal with subaccesses of LHS and\n+     RHS reparately due to type conversions or nonexistent matching\n+     references.  */\n+  int separate_lhs_rhs_handling;\n+\n+  /* Number of processed aggregates is readily available in\n+     analyze_all_variable_accesses and so is not stored here.  */\n+} sra_stats;\n+\n static void\n dump_access (FILE *f, struct access *access, bool grp)\n {\n@@ -435,6 +463,7 @@ sra_initialize (void)\n   access_pool = create_alloc_pool (\"SRA accesses\", sizeof (struct access), 16);\n   link_pool = create_alloc_pool (\"SRA links\", sizeof (struct assign_link), 16);\n   base_access_vec = pointer_map_create ();\n+  memset (&sra_stats, 0, sizeof (sra_stats));\n }\n \n /* Hook fed to pointer_map_traverse, deallocate stored vectors.  */\n@@ -1275,6 +1304,7 @@ create_access_replacement (struct access *access)\n       print_generic_expr (dump_file, repl, 0);\n       fprintf (dump_file, \"\\n\");\n     }\n+  sra_stats.replacements++;\n \n   return repl;\n }\n@@ -1286,10 +1316,8 @@ get_access_replacement (struct access *access)\n {\n   gcc_assert (access->grp_to_be_replaced);\n \n-  if (access->replacement_decl)\n-    return access->replacement_decl;\n-\n-  access->replacement_decl = create_access_replacement (access);\n+  if (!access->replacement_decl)\n+    access->replacement_decl = create_access_replacement (access);\n   return access->replacement_decl;\n }\n \n@@ -1597,7 +1625,7 @@ analyze_all_variable_accesses (void)\n {\n   tree var;\n   referenced_var_iterator rvi;\n-  bool res = false;\n+  int res = 0;\n \n   FOR_EACH_REFERENCED_VAR (var, rvi)\n     if (bitmap_bit_p (candidate_bitmap, DECL_UID (var)))\n@@ -1621,7 +1649,7 @@ analyze_all_variable_accesses (void)\n \n \tif (analyze_access_trees (access))\n \t  {\n-\t    res = true;\n+\t    res++;\n \t    if (dump_file && (dump_flags & TDF_DETAILS))\n \t      {\n \t\tfprintf (dump_file, \"\\nAccess trees for \");\n@@ -1635,7 +1663,13 @@ analyze_all_variable_accesses (void)\n \t  disqualify_candidate (var, \"No scalar replacements to be created.\");\n       }\n \n-  return res;\n+  if (res)\n+    {\n+      statistics_counter_event (cfun, \"Scalarized aggregates\", res);\n+      return true;\n+    }\n+  else\n+    return false;\n }\n \n /* Return true iff a reference statement into aggregate AGG can be built for\n@@ -1726,6 +1760,7 @@ generate_subtree_copies (struct access *access, tree agg,\n \t\t\t\t\t\t insert_after ? GSI_NEW_STMT\n \t\t\t\t\t\t : GSI_SAME_STMT);\n \t      stmt = gimple_build_assign (expr, repl);\n+\t      sra_stats.subtree_copies++;\n \t    }\n \n \t  if (insert_after)\n@@ -1862,6 +1897,7 @@ sra_modify_expr (tree *expr, gimple_stmt_iterator *gsi, bool write,\n \t  gcc_assert (useless_type_conversion_p (type, access->type));\n \t  *expr = repl;\n \t}\n+      sra_stats.exprs++;\n     }\n \n   if (access->first_child)\n@@ -1956,6 +1992,7 @@ load_assign_lhs_subreplacements (struct access *lacc, struct access *top_racc,\n \t  stmt = gimple_build_assign (get_access_replacement (lacc), rhs);\n \t  gsi_insert_after (new_gsi, stmt, GSI_NEW_STMT);\n \t  update_stmt (stmt);\n+\t  sra_stats.subreplacements++;\n \t}\n       else if (lacc->grp_read && !lacc->grp_covered && !*refreshed)\n \t{\n@@ -2059,6 +2096,7 @@ sra_modify_assign (gimple *stmt, gimple_stmt_iterator *gsi,\n       modify_this_stmt = true;\n       if (lacc->grp_partial_lhs)\n \tforce_gimple_rhs = true;\n+      sra_stats.exprs++;\n     }\n \n   if (racc && racc->grp_to_be_replaced)\n@@ -2067,6 +2105,7 @@ sra_modify_assign (gimple *stmt, gimple_stmt_iterator *gsi,\n       modify_this_stmt = true;\n       if (racc->grp_partial_lhs)\n \tforce_gimple_rhs = true;\n+      sra_stats.exprs++;\n     }\n \n   if (modify_this_stmt)\n@@ -2158,6 +2197,7 @@ sra_modify_assign (gimple *stmt, gimple_stmt_iterator *gsi,\n       if (access_has_children_p (lacc))\n \tgenerate_subtree_copies (lacc->first_child, lacc->base, 0, 0, 0,\n \t\t\t\t gsi, true, true);\n+      sra_stats.separate_lhs_rhs_handling++;\n     }\n   else\n     {\n@@ -2184,6 +2224,7 @@ sra_modify_assign (gimple *stmt, gimple_stmt_iterator *gsi,\n \n \t      unlink_stmt_vdef (*stmt);\n \t      gsi_remove (&orig_gsi, true);\n+\t      sra_stats.deleted++;\n \t      return SRA_SA_REMOVED;\n \t    }\n \t}\n@@ -2199,6 +2240,7 @@ sra_modify_assign (gimple *stmt, gimple_stmt_iterator *gsi,\n \t\t  gcc_assert (*stmt == gsi_stmt (*gsi));\n \t\t  unlink_stmt_vdef (*stmt);\n \t\t  gsi_remove (gsi, true);\n+\t\t  sra_stats.deleted++;\n \t\t  return SRA_SA_REMOVED;\n \t\t}\n \t      else\n@@ -2274,6 +2316,18 @@ perform_intra_sra (void)\n   scan_function (sra_modify_expr, sra_modify_assign, NULL,\n \t\t false, NULL);\n   initialize_parameter_reductions ();\n+\n+  statistics_counter_event (cfun, \"Scalar replacements created\",\n+\t\t\t    sra_stats.replacements);\n+  statistics_counter_event (cfun, \"Modified expressions\", sra_stats.exprs);\n+  statistics_counter_event (cfun, \"Subtree copy stmts\",\n+\t\t\t    sra_stats.subtree_copies);\n+  statistics_counter_event (cfun, \"Subreplacement stmts\",\n+\t\t\t    sra_stats.subreplacements);\n+  statistics_counter_event (cfun, \"Deleted stmts\", sra_stats.deleted);\n+  statistics_counter_event (cfun, \"Separate LHS and RHS handling\",\n+\t\t\t    sra_stats.separate_lhs_rhs_handling);\n+\n   ret = TODO_update_ssa;\n \n  out:"}]}