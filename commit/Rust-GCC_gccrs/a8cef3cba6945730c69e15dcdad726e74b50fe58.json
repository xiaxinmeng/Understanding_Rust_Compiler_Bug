{"sha": "a8cef3cba6945730c69e15dcdad726e74b50fe58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThjZWYzY2JhNjk0NTczMGM2OWUxNWRjZGFkNzI2ZTc0YjUwZmU1OA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-01-23T05:24:17Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-01-23T05:24:17Z"}, "message": "c++: 'this' injection and static member functions [PR97399]\n\nIn the testcase pr97399.C below, finish_qualified_id_expr at parse time\nadds an implicit 'this->' to the expression tmp::integral<T> (because\nit's type-dependent, and also current_class_ptr is set at this point)\nwithin the trailing return type.  Later when substituting into this\ntrailing return type we crash because we can't resolve the 'this', since\ntsubst_function_type does inject_this_parm only for non-static member\nfunctions, which tmp::func is not.\n\nThis patch fixes this issue by removing the type-dependence check\nin finish_qualified_id_expr added by r9-5972, and instead relaxes\nshared_member_p to handle dependent USING_DECLs:\n\n> I think I was wrong in my assertion around Alex's patch that\n> shared_member_p should abort on a dependent USING_DECL; it now seems\n> appropriate for it to return false if we don't know, we just need to\n> adjust the comment to say that.\n\nAnd when parsing a friend function declaration, we shouldn't be setting\ncurrent_class_ptr at all, so this patch additionally suppresses\ninject_this_parm in this case.\n\nFinally, the self-contained change to cp_parser_init_declarator is so\nthat we properly communicate static-ness to cp_parser_direct_declarator\nwhen parsing a member function template.  This lets us reject the\nexplicit use of 'this' in the testcase this2.C below.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/97399\n\t* cp-tree.h (shared_member_p): Adjust declaration.\n\t* parser.c (cp_parser_init_declarator): If the storage class\n\tspecifier is sc_static, pass true for static_p to\n\tcp_parser_declarator.\n\t(cp_parser_direct_declarator): Don't do inject_this_parm when\n\tthe declarator is a friend.\n\t* search.c (shared_member_p): Change return type to bool and\n\tadjust function body accordingly.  Return false for a dependent\n\tUSING_DECL instead of aborting.\n\t* semantics.c (finish_qualified_id_expr): Rely on shared_member_p\n\teven when type-dependent.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/88548\n\tPR c++/97399\n\t* g++.dg/cpp0x/this2.C: New test.\n\t* g++.dg/template/pr97399.C: New test.", "tree": {"sha": "3917c7c5a471207cb6f2deeec15c3e4a4608fdc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3917c7c5a471207cb6f2deeec15c3e4a4608fdc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8cef3cba6945730c69e15dcdad726e74b50fe58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8cef3cba6945730c69e15dcdad726e74b50fe58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8cef3cba6945730c69e15dcdad726e74b50fe58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8cef3cba6945730c69e15dcdad726e74b50fe58/comments", "author": null, "committer": null, "parents": [{"sha": "eb9883c1312c3801e5c25e763729d011343b22c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb9883c1312c3801e5c25e763729d011343b22c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb9883c1312c3801e5c25e763729d011343b22c3"}], "stats": {"total": 61, "additions": 47, "deletions": 14}, "files": [{"sha": "3046c8386305924522a3b6bd3c29930a11b0207a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8cef3cba6945730c69e15dcdad726e74b50fe58/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8cef3cba6945730c69e15dcdad726e74b50fe58/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a8cef3cba6945730c69e15dcdad726e74b50fe58", "patch": "@@ -7312,7 +7312,7 @@ extern tree adjust_result_of_qualified_name_lookup\n \t\t\t\t\t\t(tree, tree, tree);\n extern tree copied_binfo\t\t\t(tree, tree);\n extern tree original_binfo\t\t\t(tree, tree);\n-extern int shared_member_p\t\t\t(tree);\n+extern bool shared_member_p\t\t\t(tree);\n extern bool any_dependent_bases_p (tree = current_nonlambda_class_type ());\n extern bool maybe_check_overriding_exception_spec (tree, tree);\n "}, {"sha": "e196db141139bbd661c62379cfe0d00d793438de", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8cef3cba6945730c69e15dcdad726e74b50fe58/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8cef3cba6945730c69e15dcdad726e74b50fe58/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=a8cef3cba6945730c69e15dcdad726e74b50fe58", "patch": "@@ -21413,6 +21413,7 @@ cp_parser_init_declarator (cp_parser* parser,\n   bool is_non_constant_init;\n   int ctor_dtor_or_conv_p;\n   bool friend_p = cp_parser_friend_p (decl_specifiers);\n+  bool static_p = decl_specifiers->storage_class == sc_static;\n   tree pushed_scope = NULL_TREE;\n   bool range_for_decl_p = false;\n   bool saved_default_arg_ok_p = parser->default_arg_ok_p;\n@@ -21446,7 +21447,7 @@ cp_parser_init_declarator (cp_parser* parser,\n     = cp_parser_declarator (parser, CP_PARSER_DECLARATOR_NAMED,\n \t\t\t    flags, &ctor_dtor_or_conv_p,\n \t\t\t    /*parenthesized_p=*/NULL,\n-\t\t\t    member_p, friend_p, /*static_p=*/false);\n+\t\t\t    member_p, friend_p, static_p);\n   /* Gather up the deferred checks.  */\n   stop_deferring_access_checks ();\n \n@@ -22122,7 +22123,7 @@ cp_parser_direct_declarator (cp_parser* parser,\n \n \t\t  tree save_ccp = current_class_ptr;\n \t\t  tree save_ccr = current_class_ref;\n-\t\t  if (memfn)\n+\t\t  if (memfn && !friend_p)\n \t\t    /* DR 1207: 'this' is in scope after the cv-quals.  */\n \t\t    inject_this_parameter (current_class_type, cv_quals);\n "}, {"sha": "81bdd45e40ddc5541304e840df56ca757b9ebc7a", "filename": "gcc/cp/search.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8cef3cba6945730c69e15dcdad726e74b50fe58/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8cef3cba6945730c69e15dcdad726e74b50fe58/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=a8cef3cba6945730c69e15dcdad726e74b50fe58", "patch": "@@ -910,7 +910,7 @@ struct lookup_field_info {\n   const char *errstr;\n };\n \n-/* Nonzero for a class member means that it is shared between all objects\n+/* True for a class member means that it is shared between all objects\n    of that class.\n \n    [class.member.lookup]:If the resulting set of declarations are not all\n@@ -920,25 +920,27 @@ struct lookup_field_info {\n \n    This function checks that T contains no non-static members.  */\n \n-int\n+bool\n shared_member_p (tree t)\n {\n-  if (VAR_P (t) || TREE_CODE (t) == TYPE_DECL \\\n+  if (VAR_P (t) || TREE_CODE (t) == TYPE_DECL\n       || TREE_CODE (t) == CONST_DECL)\n-    return 1;\n+    return true;\n   if (is_overloaded_fn (t))\n     {\n       for (ovl_iterator iter (get_fns (t)); iter; ++iter)\n \t{\n \t  tree decl = strip_using_decl (*iter);\n-\t  /* We don't expect or support dependent decls.  */\n-\t  gcc_assert (TREE_CODE (decl) != USING_DECL);\n+\t  if (TREE_CODE (decl) == USING_DECL)\n+\t    /* Conservatively assume a dependent using-declaration\n+\t       might resolve to a non-static member.  */\n+\t    return false;\n \t  if (DECL_NONSTATIC_MEMBER_FUNCTION_P (decl))\n-\t    return 0;\n+\t    return false;\n \t}\n-      return 1;\n+      return true;\n     }\n-  return 0;\n+  return false;\n }\n \n /* Routine to see if the sub-object denoted by the binfo PARENT can be"}, {"sha": "51841dcf24a0a83400a7e1c5095005e0ec6ffe74", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8cef3cba6945730c69e15dcdad726e74b50fe58/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8cef3cba6945730c69e15dcdad726e74b50fe58/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=a8cef3cba6945730c69e15dcdad726e74b50fe58", "patch": "@@ -2214,8 +2214,7 @@ finish_qualified_id_expr (tree qualifying_class,\n     {\n       /* See if any of the functions are non-static members.  */\n       /* If so, the expression may be relative to 'this'.  */\n-      if ((type_dependent_expression_p (expr)\n-\t   || !shared_member_p (expr))\n+      if (!shared_member_p (expr)\n \t  && current_class_ptr\n \t  && DERIVED_FROM_P (qualifying_class,\n \t\t\t     current_nonlambda_class_type ()))"}, {"sha": "ccc2608feb2711f62af349130a0a7d11aed21cf8", "filename": "gcc/testsuite/g++.dg/cpp0x/this2.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8cef3cba6945730c69e15dcdad726e74b50fe58/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fthis2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8cef3cba6945730c69e15dcdad726e74b50fe58/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fthis2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fthis2.C?ref=a8cef3cba6945730c69e15dcdad726e74b50fe58", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/88548\n+// { dg-do compile { target c++11 } }\n+\n+struct S {\n+  int a;\n+  template <class> static auto m1 ()\n+    -> decltype(this->a) { return 0; } // { dg-error \"'this'\" }\n+};"}, {"sha": "4bb818908fd2dde4fa15ea4cae9b42640c33ef68", "filename": "gcc/testsuite/g++.dg/template/pr97399.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8cef3cba6945730c69e15dcdad726e74b50fe58/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr97399.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8cef3cba6945730c69e15dcdad726e74b50fe58/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr97399.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr97399.C?ref=a8cef3cba6945730c69e15dcdad726e74b50fe58", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/97399\n+// { dg-do compile { target c++11 } }\n+\n+template <bool> struct enable_if_t {};\n+\n+struct tmp {\n+  template <class> static constexpr bool is_integral();\n+  template <class T> static auto f()\n+    -> enable_if_t<tmp::is_integral<T>()>;\n+  template <class T> friend auto g(tmp, T)\n+    -> enable_if_t<!tmp::is_integral<T>()>;\n+};\n+\n+template <class> constexpr bool tmp::is_integral() { return true; }\n+\n+template <class T> auto tmp::f()\n+  -> enable_if_t<tmp::is_integral<T>()> { return {}; }\n+\n+int main()\n+{\n+  tmp::f<int>();\n+  g(tmp{}, 0);\n+}"}]}