{"sha": "beed3f8f60492289ca6211d86c54a2254a642035", "node_id": "C_kwDOANBUbNoAKGJlZWQzZjhmNjA0OTIyODljYTYyMTFkODZjNTRhMjI1NGE2NDIwMzU", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-12-15T14:09:48Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2022-01-04T11:28:02Z"}, "message": "nvptx: Transition nvptx backend to STORE_FLAG_VALUE = 1\n\nThis patch to the nvptx backend changes the backend's STORE_FLAG_VALUE\nfrom -1 to 1, by using BImode predicates and selp instructions, instead\nof set instructions (almost always followed by integer negation).\n\nHistorically, it was reasonable (through rare) for backends to use -1\nfor representing true during the RTL passes.  However with tree-ssa,\nGCC now emits lots of code that reads and writes _Bool values, requiring\nSTORE_FLAG_VALUE=-1 targets to frequently convert 0/-1 pseudos to 0/1\npseudos using integer negation.  Unfortunately, this process prevents\nor complicates many optimizations (negate isn't associative with logical\nAND, OR and XOR, and interferes with range/vrp/nonzerobits bounds etc.).\n\nThe impact of this is that for a relatively simple logical expression\nlike \"return (x==21) && (y==69);\", the nvptx backend currently generates:\n\n                mov.u32 %r26, %ar0;\n                mov.u32 %r27, %ar1;\n                set.u32.eq.u32  %r30, %r26, 21;\n                neg.s32 %r31, %r30;\n                mov.u32 %r29, %r31;\n                set.u32.eq.u32  %r33, %r27, 69;\n                neg.s32 %r34, %r33;\n                mov.u32 %r32, %r34;\n                cvt.u16.u8      %r39, %r29;\n                mov.u16 %r36, %r39;\n                cvt.u16.u8      %r39, %r32;\n                mov.u16 %r37, %r39;\n                and.b16 %r35, %r36, %r37;\n                cvt.u32.u16     %r38, %r35;\n                cvt.u32.u8      %value, %r38;\n\nThis patch tweaks nvptx to generate 0/1 values instead, requiring the\nsame number of instructions, using (BImode) predicate registers and selp\ninstructions so as to now generate the almost identical:\n\n                mov.u32 %r26, %ar0;\n                mov.u32 %r27, %ar1;\n                setp.eq.u32     %r31, %r26, 21;\n                selp.u32        %r30, 1, 0, %r31;\n                mov.u32 %r29, %r30;\n                setp.eq.u32     %r34, %r27, 69;\n                selp.u32        %r33, 1, 0, %r34;\n                mov.u32 %r32, %r33;\n                cvt.u16.u8      %r39, %r29;\n                mov.u16 %r36, %r39;\n                cvt.u16.u8      %r39, %r32;\n                mov.u16 %r37, %r39;\n                and.b16 %r35, %r36, %r37;\n                cvt.u32.u16     %r38, %r35;\n                cvt.u32.u8      %value, %r38;\n\nThe hidden benefit is that this sequence can (in theory) be optimized\nby the RTL passes to eventually generate a much shorter sequence using\nan and.pred instruction (just like Nvidia's nvcc compiler).\n\nThis patch has been tested nvptx-none with a \"make\" and \"make -k check\"\n(including newlib) hosted on x86_64-pc-linux-gnu with no new failures.\n\ngcc/ChangeLog:\n\n\t* config/nvptx/nvptx.h (STORE_FLAG_VALUE): Change to 1.\n\t* config/nvptx/nvptx.md (movbi): Use P1 constraint for true.\n\t(setcc_from_bi): Remove SImode specific pattern.\n\t(setcc<mode>_from_bi): Provide more general HSDIM pattern.\n\t(extendbi<mode>2, zeroextendbi<mode>2): Provide instructions\n\tfor sign- and zero-extending BImode predicates to integers.\n\t(setcc_int<mode>): Remove previous (-1-based) instructions.\n\t(cstorebi4): Remove BImode to SImode specific expander.\n\t(cstore<mode>4): Fix indentation.  Expand using setccsi_from_bi.\n\t(cstore<mode>4): For both integer and floating point modes.", "tree": {"sha": "decc94b8e351664b22f98f7ccbc14ce8bf694851", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/decc94b8e351664b22f98f7ccbc14ce8bf694851"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/beed3f8f60492289ca6211d86c54a2254a642035", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beed3f8f60492289ca6211d86c54a2254a642035", "html_url": "https://github.com/Rust-GCC/gccrs/commit/beed3f8f60492289ca6211d86c54a2254a642035", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beed3f8f60492289ca6211d86c54a2254a642035/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a54d11749f0ce98192cfe28e5ccc0633d4db3982", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a54d11749f0ce98192cfe28e5ccc0633d4db3982", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a54d11749f0ce98192cfe28e5ccc0633d4db3982"}], "stats": {"total": 78, "additions": 41, "deletions": 37}, "files": [{"sha": "d61bd70c3644633ffe4008bc481c460da5834ff2", "filename": "gcc/config/nvptx/nvptx.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beed3f8f60492289ca6211d86c54a2254a642035/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beed3f8f60492289ca6211d86c54a2254a642035/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.h?ref=beed3f8f60492289ca6211d86c54a2254a642035", "patch": "@@ -319,7 +319,7 @@ struct GTY(()) machine_function\n #define NO_DOT_IN_LABEL\n #define ASM_COMMENT_START \"//\"\n \n-#define STORE_FLAG_VALUE -1\n+#define STORE_FLAG_VALUE 1\n #define FLOAT_STORE_FLAG_VALUE(MODE) REAL_VALUE_ATOF(\"1.0\", (MODE))\n \n #define CASE_VECTOR_MODE SImode"}, {"sha": "a4c14a3f6c774bde907ee5c7481c43fc4a37985a", "filename": "gcc/config/nvptx/nvptx.md", "status": "modified", "additions": 40, "deletions": 36, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beed3f8f60492289ca6211d86c54a2254a642035/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beed3f8f60492289ca6211d86c54a2254a642035/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.md?ref=beed3f8f60492289ca6211d86c54a2254a642035", "patch": "@@ -215,7 +215,7 @@\n ;; get variables in this mode and pseudos are never spilled.\n (define_insn \"movbi\"\n   [(set (match_operand:BI 0 \"nvptx_register_operand\" \"=R,R,R\")\n-\t(match_operand:BI 1 \"nvptx_nonmemory_operand\" \"R,P0,Pn\"))]\n+\t(match_operand:BI 1 \"nvptx_nonmemory_operand\" \"R,P0,P1\"))]\n   \"\"\n   \"@\n    %.\\\\tmov%t0\\\\t%0, %1;\n@@ -859,12 +859,26 @@\n \n ;; Conditional stores\n \n-(define_insn \"setcc_from_bi\"\n-  [(set (match_operand:SI 0 \"nvptx_register_operand\" \"=R\")\n-\t(ne:SI (match_operand:BI 1 \"nvptx_register_operand\" \"R\")\n-\t       (const_int 0)))]\n+(define_insn \"setcc<mode>_from_bi\"\n+  [(set (match_operand:HSDIM 0 \"nvptx_register_operand\" \"=R\")\n+\t(ne:HSDIM (match_operand:BI 1 \"nvptx_register_operand\" \"R\")\n+\t\t   (const_int 0)))]\n+  \"\"\n+  \"%.\\\\tselp%t0\\\\t%0, 1, 0, %1;\")\n+\n+(define_insn \"extendbi<mode>2\"\n+  [(set (match_operand:HSDIM 0 \"nvptx_register_operand\" \"=R\")\n+\t(sign_extend:HSDIM\n+\t (match_operand:BI 1 \"nvptx_register_operand\" \"R\")))]\n+  \"\"\n+  \"%.\\\\tselp%t0\\\\t%0, -1, 0, %1;\")\n+\n+(define_insn \"zero_extendbi<mode>2\"\n+  [(set (match_operand:HSDIM 0 \"nvptx_register_operand\" \"=R\")\n+\t(zero_extend:HSDIM\n+\t (match_operand:BI 1 \"nvptx_register_operand\" \"R\")))]\n   \"\"\n-  \"%.\\\\tselp%t0 %0,-1,0,%1;\")\n+  \"%.\\\\tselp%t0\\\\t%0, 1, 0, %1;\")\n \n (define_insn \"sel_true<mode>\"\n   [(set (match_operand:HSDIM 0 \"nvptx_register_operand\" \"=R\")\n@@ -902,22 +916,6 @@\n   \"\"\n   \"%.\\\\tselp%t0\\\\t%0, %3, %2, %1;\")\n \n-(define_insn \"setcc_int<mode>\"\n-  [(set (match_operand:SI 0 \"nvptx_register_operand\" \"=R\")\n-\t(match_operator:SI 1 \"nvptx_comparison_operator\"\n-\t  [(match_operand:HSDIM 2 \"nvptx_register_operand\" \"R\")\n-\t   (match_operand:HSDIM 3 \"nvptx_nonmemory_operand\" \"Ri\")]))]\n-  \"\"\n-  \"%.\\\\tset%t0%c1\\\\t%0, %2, %3;\")\n-\n-(define_insn \"setcc_int<mode>\"\n-  [(set (match_operand:SI 0 \"nvptx_register_operand\" \"=R\")\n-\t(match_operator:SI 1 \"nvptx_float_comparison_operator\"\n-\t   [(match_operand:SDFM 2 \"nvptx_register_operand\" \"R\")\n-\t    (match_operand:SDFM 3 \"nvptx_nonmemory_operand\" \"RF\")]))]\n-  \"\"\n-  \"%.\\\\tset%t0%c1\\\\t%0, %2, %3;\")\n-\n (define_insn \"setcc_float<mode>\"\n   [(set (match_operand:SF 0 \"nvptx_register_operand\" \"=R\")\n \t(match_operator:SF 1 \"nvptx_comparison_operator\"\n@@ -934,29 +932,35 @@\n   \"\"\n   \"%.\\\\tset%t0%c1\\\\t%0, %2, %3;\")\n \n-(define_expand \"cstorebi4\"\n-  [(set (match_operand:SI 0 \"nvptx_register_operand\")\n-\t(match_operator:SI 1 \"ne_operator\"\n-         [(match_operand:BI 2 \"nvptx_register_operand\")\n-          (match_operand:BI 3 \"const0_operand\")]))]\n-  \"\"\n-  \"\")\n-\n (define_expand \"cstore<mode>4\"\n   [(set (match_operand:SI 0 \"nvptx_register_operand\")\n \t(match_operator:SI 1 \"nvptx_comparison_operator\"\n-         [(match_operand:HSDIM 2 \"nvptx_register_operand\")\n-          (match_operand:HSDIM 3 \"nvptx_nonmemory_operand\")]))]\n+\t  [(match_operand:HSDIM 2 \"nvptx_register_operand\")\n+\t   (match_operand:HSDIM 3 \"nvptx_nonmemory_operand\")]))]\n   \"\"\n-  \"\")\n+{\n+  rtx reg = gen_reg_rtx (BImode);\n+  rtx cmp = gen_rtx_fmt_ee (GET_CODE (operands[1]), BImode,\n+\t\t\t    operands[2], operands[3]);\n+  emit_move_insn (reg, cmp);\n+  emit_insn (gen_setccsi_from_bi (operands[0], reg));\n+  DONE;\n+})\n \n (define_expand \"cstore<mode>4\"\n   [(set (match_operand:SI 0 \"nvptx_register_operand\")\n \t(match_operator:SI 1 \"nvptx_float_comparison_operator\"\n-         [(match_operand:SDFM 2 \"nvptx_register_operand\")\n-          (match_operand:SDFM 3 \"nvptx_nonmemory_operand\")]))]\n+\t  [(match_operand:SDFM 2 \"nvptx_register_operand\")\n+\t   (match_operand:SDFM 3 \"nvptx_nonmemory_operand\")]))]\n   \"\"\n-  \"\")\n+{\n+  rtx reg = gen_reg_rtx (BImode);\n+  rtx cmp = gen_rtx_fmt_ee (GET_CODE (operands[1]), BImode,\n+\t\t\t    operands[2], operands[3]);\n+  emit_move_insn (reg, cmp);\n+  emit_insn (gen_setccsi_from_bi (operands[0], reg));\n+  DONE;\n+})\n \n ;; Calls\n "}]}