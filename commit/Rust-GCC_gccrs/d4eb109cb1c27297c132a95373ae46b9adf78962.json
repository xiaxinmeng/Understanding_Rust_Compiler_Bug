{"sha": "d4eb109cb1c27297c132a95373ae46b9adf78962", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRlYjEwOWNiMWMyNzI5N2MxMzJhOTUzNzNhZTQ2YjlhZGY3ODk2Mg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2000-07-30T05:35:14Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2000-07-30T05:35:14Z"}, "message": "configure.in (CC_FOR_TARGET, [...]): Do not override if already set in the environment or in configure.\n\n* configure.in (CC_FOR_TARGET, CHILL_FOR_TARGET, CXX_FOR_TARGET):\nDo not override if already set in the environment or in configure.\nDon't duplicate $(FLAGS_FOR_TARGET) if it already appears in them.\n(FLAGS_FOR_TARGET): Don't use host directories on Canadian crosses.\n\nFrom-SVN: r35332", "tree": {"sha": "617076f3a662c60356fdce2af9b794f9ccc6fb5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/617076f3a662c60356fdce2af9b794f9ccc6fb5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4eb109cb1c27297c132a95373ae46b9adf78962", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4eb109cb1c27297c132a95373ae46b9adf78962", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4eb109cb1c27297c132a95373ae46b9adf78962", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4eb109cb1c27297c132a95373ae46b9adf78962/comments", "author": null, "committer": null, "parents": [{"sha": "c09cda19a6f9d172ea46cb93f3527b2c1c8c79ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c09cda19a6f9d172ea46cb93f3527b2c1c8c79ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c09cda19a6f9d172ea46cb93f3527b2c1c8c79ad"}], "stats": {"total": 56, "additions": 47, "deletions": 9}, "files": [{"sha": "1e4564f152fe6eca5921b0b247f9b3e5ed9b1b5c", "filename": "ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4eb109cb1c27297c132a95373ae46b9adf78962/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4eb109cb1c27297c132a95373ae46b9adf78962/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=d4eb109cb1c27297c132a95373ae46b9adf78962", "patch": "@@ -1,3 +1,10 @@\n+2000-07-30  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* configure.in (CC_FOR_TARGET, CHILL_FOR_TARGET, CXX_FOR_TARGET):\n+\tDo not override if already set in the environment or in configure.\n+\tDon't duplicate $(FLAGS_FOR_TARGET) if it already appears in them.\n+\t(FLAGS_FOR_TARGET): Don't use host directories on Canadian crosses.\n+\n 2000-07-28  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* libtool.m4, ltcf-c.sh, ltcf-cxx.sh, ltcf-gcj.sh: New files from"}, {"sha": "6a5a9bda1552bd94ce48f58d4a4d4e50589736b9", "filename": "configure.in", "status": "modified", "additions": 40, "deletions": 9, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4eb109cb1c27297c132a95373ae46b9adf78962/configure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4eb109cb1c27297c132a95373ae46b9adf78962/configure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.in?ref=d4eb109cb1c27297c132a95373ae46b9adf78962", "patch": "@@ -1228,41 +1228,64 @@ if test -d ${topsrcdir}/gcc; then\n   # below), and we want gcc/include to be searched first.\n   FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -B$$r/gcc/'\n fi\n+\n case \" $skipdirs \" in\n *\" target-newlib \"*) ;;\n *)\n    case \"$target\" in\n-   i[3456]86-*-cygwin*)\n+   *-cygwin*)\n      FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -L$$r/$(TARGET_SUBDIR)/winsup -L$$r/$(TARGET_SUBDIR)/winsup/cygwin -L$$r/$(TARGET_SUBDIR)/winsup/w32api/lib -isystem $$s/winsup/include -isystem $$s/winsup/cygwin/include -isystem $$s/winsup/w32api/include -isystem $$s/newlib/libc/sys/cygwin -isystem $$s/newlib/libc/sys/cygwin32' ;;\n    esac\n \n+   # If we're using a pre-built compiler (which is the case for\n+   # Canadian crosses or when gcc isn't being built), don't discard\n+   # standard headers.\n+   if test \"${build}\" = \"${host}\" && test ! -d ${topsrcdir}/gcc; then\n+     FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -nostdinc'\n+   fi\n+\n    # If we're building newlib, use its generic headers last, but search\n    # for any libc-related directories first (so make it the last -B\n    # switch).\n-   FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -nostdinc -B$$r/$(TARGET_SUBDIR)/newlib/ -isystem $$r/$(TARGET_SUBDIR)/newlib/targ-include -isystem $$s/newlib/libc/include'\n+   FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -B$$r/$(TARGET_SUBDIR)/newlib/ -isystem $$r/$(TARGET_SUBDIR)/newlib/targ-include -isystem $$s/newlib/libc/include'\n    ;;\n esac\n-if test -d ${topsrcdir}/gcc; then\n+\n+# On Canadian crosses, we'll be searching the right directories for\n+# the previously-installed cross compiler, so don't bother to add\n+# flags for directories within the install tree of the compiler\n+# being built; programs in there won't even run.\n+if test \"${build}\" = \"${host}\" && test -d ${topsrcdir}/gcc; then\n   # Search for pre-installed headers if nothing else fits.\n   FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -B$(build_tooldir)/bin/ -B$(build_tooldir)/lib/ -isystem $(build_tooldir)/include'\n fi\n+\n if test \"x${use_gnu_ld}\" = x && test \"x${with_gnu_ld}\" != xno &&\n    echo \" ${configdirs} \" | grep \" ld \" > /dev/null &&\n    test -d ${srcdir}/ld; then\n   # Arrange for us to find uninstalled linker scripts.\n   FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -L$$r/ld'\n fi\n \n-if test -d ${topsrcdir}/gcc; then\n+if test \"x${CC_FOR_TARGET+set}\" = xset; then\n+  :\n+elif test -d ${topsrcdir}/gcc; then\n   CC_FOR_TARGET='$$r/gcc/xgcc'\n elif test \"$host\" = \"$target\"; then\n   CC_FOR_TARGET='$(CC)'\n else\n   CC_FOR_TARGET=`echo gcc | sed -e 's/x/x/' ${program_transform_name}`\n fi\n-CC_FOR_TARGET=$CC_FOR_TARGET' $(FLAGS_FOR_TARGET)'\n+# On Canadian crosses, configure reads CC_FOR_TARGET from Makefile,\n+# if Makefile exists.  Prevent $(FLAGS_FOR_TARGET) from being duplicated.\n+case $CC_FOR_TARGET in\n+*' $(FLAGS_FOR_TARGET)') ;;\n+*) CC_FOR_TARGET=$CC_FOR_TARGET' $(FLAGS_FOR_TARGET)' ;;\n+esac\n \n-if test -d ${topsrcdir}/gcc &&\n+if test \"x${CHILL_FOR_TARGET+set}\" = xset; then\n+  :\n+elif test -d ${topsrcdir}/gcc &&\n    echo \",${enable_languages-${LANGUAGES-CHILL}},\" |\n    grep ,CHILL, > /dev/null ; then\n   CHILL_FOR_TARGET='$$r/gcc/xgcc -L$$r/gcc/ch/runtime/'\n@@ -1271,9 +1294,14 @@ elif test \"$host\" = \"$target\"; then\n else\n   CHILL_FOR_TARGET=`echo gcc | sed -e 's/x/x/' ${program_transform_name}`\n fi\n-CHILL_FOR_TARGET=$CHILL_FOR_TARGET' $(FLAGS_FOR_TARGET)'\n+case $CHILL_FOR_TARGET in\n+*' $(FLAGS_FOR_TARGET)') ;;\n+*) CHILL_FOR_TARGET=$CHILL_FOR_TARGET' $(FLAGS_FOR_TARGET)' ;;\n+esac\n \n-if test -d ${topsrcdir}/gcc &&\n+if test \"x${CXX_FOR_TARGET+set}\" = xset; then\n+  :\n+elif test -d ${topsrcdir}/gcc &&\n    echo \",${enable_languages-${LANGUAGES-c++}},\" |\n    grep ',c[+][+],' > /dev/null ; then\n   CXX_FOR_TARGET='$$r/gcc/g++ -nostdinc++ '$libstdcxx_flags\n@@ -1282,7 +1310,10 @@ elif test \"$host\" = \"$target\"; then\n else\n   CXX_FOR_TARGET=`echo c++ | sed -e 's/x/x/' ${program_transform_name}`\n fi\n-CXX_FOR_TARGET=$CXX_FOR_TARGET' $(FLAGS_FOR_TARGET)'\n+case $CXX_FOR_TARGET in\n+*' $(FLAGS_FOR_TARGET)') ;;\n+*) CXX_FOR_TARGET=$CXX_FOR_TARGET' $(FLAGS_FOR_TARGET)' ;;\n+esac\n \n targargs=\"--cache-file=../config.cache --host=${target_alias} --build=${build_alias} ${targargs}\"\n sed -e \"s:^TARGET_CONFIGDIRS[ \t]*=.*$:TARGET_CONFIGDIRS = ${target_configdirs}:\" \\"}]}