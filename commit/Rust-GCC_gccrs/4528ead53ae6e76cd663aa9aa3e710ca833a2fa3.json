{"sha": "4528ead53ae6e76cd663aa9aa3e710ca833a2fa3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDUyOGVhZDUzYWU2ZTc2Y2Q2NjNhYTlhYTNlNzEwY2E4MzNhMmZhMw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-01-06T09:02:05Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-01-06T09:02:05Z"}, "message": "[multiple changes]\n\n2015-01-06  Bob Duff  <duff@adacore.com>\n\n\t* a-cfinve.adb (Copy): Set the discriminant to the Length when\n\tCapacity = 0.\n\t* a-cofove.ads (Capacity): Add a postcondition.\n\t* a-cfinve.ads (Capacity): Add a postcondition.\n\t(Reserve_Capacity): Correct the postcondition in the case where\n\tCapacity = 0; that means \"Capacity => Length (Container)\".\n\t* a-cofove.adb (Elems[c]): Add a comment\n\texplaining the dangers and how to avoid them.\n\n2015-01-06  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch12.adb: Code clean up.\n\nFrom-SVN: r219225", "tree": {"sha": "86a00e154cab2ccb628beeff36147e71d4af90b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86a00e154cab2ccb628beeff36147e71d4af90b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4528ead53ae6e76cd663aa9aa3e710ca833a2fa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4528ead53ae6e76cd663aa9aa3e710ca833a2fa3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4528ead53ae6e76cd663aa9aa3e710ca833a2fa3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4528ead53ae6e76cd663aa9aa3e710ca833a2fa3/comments", "author": null, "committer": null, "parents": [{"sha": "17d01d213579c0ee53913f82f4f9e40109f069ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17d01d213579c0ee53913f82f4f9e40109f069ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17d01d213579c0ee53913f82f4f9e40109f069ca"}], "stats": {"total": 70, "additions": 48, "deletions": 22}, "files": [{"sha": "b0b4b967eef9aaa473dd8e59142dba11bb91da21", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4528ead53ae6e76cd663aa9aa3e710ca833a2fa3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4528ead53ae6e76cd663aa9aa3e710ca833a2fa3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4528ead53ae6e76cd663aa9aa3e710ca833a2fa3", "patch": "@@ -1,3 +1,17 @@\n+2015-01-06  Bob Duff  <duff@adacore.com>\n+\n+\t* a-cfinve.adb (Copy): Set the discriminant to the Length when\n+\tCapacity = 0.\n+\t* a-cofove.ads (Capacity): Add a postcondition.\n+\t* a-cfinve.ads (Capacity): Add a postcondition.\n+\t(Reserve_Capacity): Correct the postcondition in the case where\n+\tCapacity = 0; that means \"Capacity => Length (Container)\".\n+\t* a-cofove.adb (Elems[c]): Add a comment\n+\texplaining the dangers and how to avoid them.\n+\n+2015-01-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb: Code clean up.\n 2015-01-06  Arnaud Charlet  <charlet@adacore.com>\n \n \t* gnatvsn.ads: Bump copyright year."}, {"sha": "f088b9ed11872c04326f5c951d9ad5ee0fbf91ed", "filename": "gcc/ada/a-cfinve.adb", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4528ead53ae6e76cd663aa9aa3e710ca833a2fa3/gcc%2Fada%2Fa-cfinve.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4528ead53ae6e76cd663aa9aa3e710ca833a2fa3/gcc%2Fada%2Fa-cfinve.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cfinve.adb?ref=4528ead53ae6e76cd663aa9aa3e710ca833a2fa3", "patch": "@@ -2,8 +2,7 @@\n --                                                                          --\n --                         GNAT LIBRARY COMPONENTS                          --\n --                                                                          --\n---                          A D A . C O N T A I N E R S\n---           . F O R M A L _ I N D E F I N I T E _ V E C T O R S            --\n+--                 ADA.CONTAINERS.FORMAL_INDEFINITE_VECTORS                 --\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n@@ -89,7 +88,8 @@ is\n \n    function Contains\n      (Container : Vector;\n-      Item      : Element_Type) return Boolean is\n+      Item      : Element_Type) return Boolean\n+   is\n      (Contains (Container.V, H (Item)));\n \n    ----------\n@@ -98,8 +98,10 @@ is\n \n    function Copy\n      (Source   : Vector;\n-      Capacity : Capacity_Range := 0) return Vector is\n-     (Capacity, V => Copy (Source.V, Capacity));\n+      Capacity : Capacity_Range := 0) return Vector\n+   is\n+     ((if Capacity = 0 then Length (Source) else Capacity),\n+       V => Copy (Source.V, Capacity));\n \n    ---------------------\n    -- Current_To_Last --\n@@ -139,7 +141,8 @@ is\n    function Find_Index\n      (Container : Vector;\n       Item      : Element_Type;\n-      Index     : Index_Type := Index_Type'First) return Extended_Index is\n+      Index     : Index_Type := Index_Type'First) return Extended_Index\n+   is\n      (Find_Index (Container.V, H (Item), Index));\n \n    -------------------\n@@ -200,7 +203,9 @@ is\n    -----------------\n \n    function Has_Element\n-     (Container : Vector; Position : Extended_Index) return Boolean is\n+     (Container : Vector;\n+      Position  : Extended_Index) return Boolean\n+   is\n      (Has_Element (Container.V, Position));\n \n    --------------\n@@ -272,7 +277,8 @@ is\n    function Reverse_Find_Index\n      (Container : Vector;\n       Item      : Element_Type;\n-      Index     : Index_Type := Index_Type'Last) return Extended_Index is\n+      Index     : Index_Type := Index_Type'Last) return Extended_Index\n+   is\n      (Reverse_Find_Index (Container.V, H (Item), Index));\n \n    ----------\n@@ -290,7 +296,8 @@ is\n \n    function To_Vector\n      (New_Item : Element_Type;\n-      Length   : Capacity_Range) return Vector is\n+      Length   : Capacity_Range) return Vector\n+   is\n    begin\n       return (Length, To_Vector (H (New_Item), Length));\n    end To_Vector;"}, {"sha": "7559df6e4b5dfc351173e013d18de58789c52cfe", "filename": "gcc/ada/a-cfinve.ads", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4528ead53ae6e76cd663aa9aa3e710ca833a2fa3/gcc%2Fada%2Fa-cfinve.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4528ead53ae6e76cd663aa9aa3e710ca833a2fa3/gcc%2Fada%2Fa-cfinve.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cfinve.ads?ref=4528ead53ae6e76cd663aa9aa3e710ca833a2fa3", "patch": "@@ -2,8 +2,7 @@\n --                                                                          --\n --                         GNAT LIBRARY COMPONENTS                          --\n --                                                                          --\n---                          A D A . C O N T A I N E R S\n---           . F O R M A L _ I N D E F I N I T E _ V E C T O R S            --\n+--                 ADA.CONTAINERS.FORMAL_INDEFINITE_VECTORS                 --\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n@@ -41,7 +40,7 @@ generic\n    type Index_Type is range <>;\n    type Element_Type (<>) is private;\n    Max_Size_In_Storage_Elements : Natural :=\n-     Element_Type'Max_Size_In_Storage_Elements;\n+                                    Element_Type'Max_Size_In_Storage_Elements;\n    --  This has the same meaning as in Ada.Containers.Bounded_Holders, with the\n    --  same restrictions.\n \n@@ -81,7 +80,8 @@ is\n      Global => null;\n \n    function Capacity (Container : Vector) return Capacity_Range with\n-     Global => null;\n+     Global => null,\n+     Post   => Capacity'Result >= Container.Capacity;\n \n    procedure Reserve_Capacity\n      (Container : in out Vector;\n@@ -111,7 +111,7 @@ is\n       Capacity : Capacity_Range := 0) return Vector\n    with\n      Global => null,\n-     Pre    => (if Bounded then Length (Source) <= Capacity);\n+     Pre    => (if Bounded then (Capacity = 0 or Length (Source) <= Capacity));\n \n    function Element\n      (Container : Vector;\n@@ -133,16 +133,17 @@ is\n       New_Item  : Vector)\n    with\n      Global => null,\n-     Pre    => (if Bounded then\n-                 Length (Container) + Length (New_Item) <= Container.Capacity);\n+     Pre    => (if Bounded\n+                then Length (Container) + Length (New_Item) <=\n+                                                       Container.Capacity);\n \n    procedure Append\n      (Container : in out Vector;\n       New_Item  : Element_Type)\n    with\n      Global => null,\n-     Pre    => (if Bounded then\n-                  Length (Container) < Container.Capacity);\n+     Pre    => (if Bounded\n+                then Length (Container) < Container.Capacity);\n \n    procedure Delete_Last\n      (Container : in out Vector)\n@@ -243,7 +244,7 @@ private\n    package Def is new Formal_Vectors (Index_Type, Holder, \"=\", Bounded);\n    use Def;\n \n-   --  ????Assert that Def subtypes have the same range.\n+   --  ????Assert that Def subtypes have the same range\n \n    type Vector (Capacity : Capacity_Range) is limited record\n       V : Def.Vector (Capacity);"}, {"sha": "ef37cc0226e271ca37ff70d22e4a1efa6372fc42", "filename": "gcc/ada/a-cofove.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4528ead53ae6e76cd663aa9aa3e710ca833a2fa3/gcc%2Fada%2Fa-cofove.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4528ead53ae6e76cd663aa9aa3e710ca833a2fa3/gcc%2Fada%2Fa-cofove.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cofove.adb?ref=4528ead53ae6e76cd663aa9aa3e710ca833a2fa3", "patch": "@@ -59,6 +59,9 @@ is\n    --  possible bounds. This means that the pointer is a thin pointer. This is\n    --  necessary because 'Unrestricted_Access doesn't work when it produces\n    --  access-to-unconstrained and is returned from a function.\n+   --\n+   --  Note that this is dangerous: make sure calls to this use an indexed\n+   --  component or slice that is within the bounds 1 .. Length (Container).\n \n    function Get_Element\n      (Container : Vector;"}, {"sha": "3d4c1b37ecdd2c22e7335335febc2a481874b5df", "filename": "gcc/ada/a-cofove.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4528ead53ae6e76cd663aa9aa3e710ca833a2fa3/gcc%2Fada%2Fa-cofove.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4528ead53ae6e76cd663aa9aa3e710ca833a2fa3/gcc%2Fada%2Fa-cofove.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cofove.ads?ref=4528ead53ae6e76cd663aa9aa3e710ca833a2fa3", "patch": "@@ -84,7 +84,8 @@ is\n      Global => null;\n \n    function Capacity (Container : Vector) return Capacity_Range with\n-     Global => null;\n+     Global => null,\n+     Post => Capacity'Result >= Container.Capacity;\n \n    procedure Reserve_Capacity\n      (Container : in out Vector;"}, {"sha": "ab118c620757884a82b63e4faa65c039bd9f91cf", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4528ead53ae6e76cd663aa9aa3e710ca833a2fa3/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4528ead53ae6e76cd663aa9aa3e710ca833a2fa3/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=4528ead53ae6e76cd663aa9aa3e710ca833a2fa3", "patch": "@@ -1804,12 +1804,13 @@ package body Sem_Ch12 is\n                               (Defining_Entity (Analyzed_Formal)))\n                        and then Ekind (Defining_Entity (Analyzed_Formal)) =\n                                                                     E_Function\n+                       and then Expander_Active\n                      then\n                         --  If actual is an entity (function or operator),\n                         --  and expander is active, build wrapper for it.\n                         --  Note that wrappers play no role within a generic.\n \n-                        if Present (Match) and then Expander_Active then\n+                        if Present (Match) then\n                            if Nkind (Match) = N_Operator_Symbol then\n \n                               --  If the name is a default, find its visible\n@@ -1837,7 +1838,6 @@ package body Sem_Ch12 is\n                         elsif Box_Present (Formal)\n                            and then Nkind (Defining_Entity (Analyzed_Formal)) =\n                                                     N_Defining_Operator_Symbol\n-                           and then Expander_Active\n                         then\n                            Append_To (Assoc,\n                              Build_Operator_Wrapper"}]}