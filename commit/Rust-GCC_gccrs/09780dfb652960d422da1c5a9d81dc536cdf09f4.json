{"sha": "09780dfb652960d422da1c5a9d81dc536cdf09f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk3ODBkZmI2NTI5NjBkNDIyZGExYzVhOWQ4MWRjNTM2Y2RmMDlmNA==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "rakdver@atrey.karlin.mff.cuni.cz", "date": "2003-05-04T15:20:26Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2003-05-04T15:20:26Z"}, "message": "Makefile.in (LIBGCOV): Add _gcov_merge_add.\n\n\t* Makefile.in (LIBGCOV): Add _gcov_merge_add.\n\t* gcov-io.h: Make GCOV_LINKAGE extern in libgcov and prevent resulting\n\tnamespace clash.\n\t(GCOV_MERGE_FUNCTIONS): New.\n\t(gcov_merge_fn): Declare.\n\t(struct gcov_ctr_info): New field \"merge\".\n\t(__gcov_merge_add): Declare.\n\t* coverage.c (ctr_merge_functions): New.\n\t(build_ctr_info_type, build_ctr_info_value): Initialize merge field\n\tof gcov_ctr_info type.\n\t* libgcov.c (__gcov_merge_add): New.\n\t(gcov_exit): Call a hook to merge values of counters.\n\nFrom-SVN: r66457", "tree": {"sha": "05de4edb80cb0ae6e59ff9b0f5b6509cae6fde04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05de4edb80cb0ae6e59ff9b0f5b6509cae6fde04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09780dfb652960d422da1c5a9d81dc536cdf09f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09780dfb652960d422da1c5a9d81dc536cdf09f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09780dfb652960d422da1c5a9d81dc536cdf09f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09780dfb652960d422da1c5a9d81dc536cdf09f4/comments", "author": null, "committer": null, "parents": [{"sha": "c71f2ffd78811e3aaafdca4618c737c0c10e72ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c71f2ffd78811e3aaafdca4618c737c0c10e72ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c71f2ffd78811e3aaafdca4618c737c0c10e72ca"}], "stats": {"total": 135, "additions": 123, "deletions": 12}, "files": [{"sha": "4830beadad96ee1e4ea298e66a21ebe8dea91366", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09780dfb652960d422da1c5a9d81dc536cdf09f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09780dfb652960d422da1c5a9d81dc536cdf09f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=09780dfb652960d422da1c5a9d81dc536cdf09f4", "patch": "@@ -1,3 +1,18 @@\n+2003-05-04  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n+\n+\t* Makefile.in (LIBGCOV): Add _gcov_merge_add.\n+\t* gcov-io.h: Make GCOV_LINKAGE extern in libgcov and prevent resulting\n+\tnamespace clash.\n+\t(GCOV_MERGE_FUNCTIONS): New.\n+\t(gcov_merge_fn): Declare.\n+\t(struct gcov_ctr_info): New field \"merge\".\n+\t(__gcov_merge_add): Declare.\n+\t* coverage.c (ctr_merge_functions): New.\n+\t(build_ctr_info_type, build_ctr_info_value): Initialize merge field\n+\tof gcov_ctr_info type.\n+\t* libgcov.c (__gcov_merge_add): New.\n+\t(gcov_exit): Call a hook to merge values of counters.\n+\n 2003-05-04  Gabriel Dos Reis <gdr@integrable-solutions.net>\n \n \t* toplev.h (pedwarn_with_file_and_line): Don't declare."}, {"sha": "70df3eadfe67efa7cb263e20e8d8b5f8676ac237", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09780dfb652960d422da1c5a9d81dc536cdf09f4/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09780dfb652960d422da1c5a9d81dc536cdf09f4/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=09780dfb652960d422da1c5a9d81dc536cdf09f4", "patch": "@@ -854,7 +854,7 @@ STAGESTUFF = *$(objext) insn-flags.h insn-config.h insn-codes.h \\\n LIB2FUNCS_ST = _eprintf __gcc_bcmp\n \n # Defined in libgcov.c, included only in gcov library\n-LIBGCOV = _gcov\n+LIBGCOV = _gcov _gcov_merge_add\n \n FPBIT_FUNCS = _pack_sf _unpack_sf _addsub_sf _mul_sf _div_sf \\\n     _fpcmp_parts_sf _compare_sf _eq_sf _ne_sf _gt_sf _ge_sf \\"}, {"sha": "36400f32e9c39cd901b6908e636982428659c8ef", "filename": "gcc/coverage.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09780dfb652960d422da1c5a9d81dc536cdf09f4/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09780dfb652960d422da1c5a9d81dc536cdf09f4/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=09780dfb652960d422da1c5a9d81dc536cdf09f4", "patch": "@@ -98,6 +98,9 @@ static htab_t counts_hash = NULL;\n /* The names of the counter tables.  */\n static GTY(()) rtx ctr_labels[GCOV_COUNTERS];\n \n+/* The names of merge functions for counters.  */\n+static const char *ctr_merge_functions[GCOV_COUNTERS] = GCOV_MERGE_FUNCTIONS;\n+\n /* Forward declarations.  */\n static hashval_t htab_counts_entry_hash PARAMS ((const void *));\n static int htab_counts_entry_eq PARAMS ((const void *, const void *));\n@@ -559,6 +562,7 @@ build_ctr_info_type ()\n {\n   tree type = (*lang_hooks.types.make_type) (RECORD_TYPE);\n   tree field, fields = NULL_TREE;\n+  tree gcov_merge_fn_type;\n   \n   /* counters */\n   field = build_decl (FIELD_DECL, NULL_TREE, unsigned_type_node);\n@@ -571,6 +575,18 @@ build_ctr_info_type ()\n   TREE_CHAIN (field) = fields;\n   fields = field;\n \n+  /* merge */\n+  gcov_merge_fn_type =\n+\tbuild_function_type_list (\n+\t\tvoid_type_node,\n+\t\tbuild_pointer_type (make_signed_type (GCOV_TYPE_SIZE)),\n+\t\tunsigned_type_node,\n+\t\tNULL_TREE);\n+  field = build_decl (FIELD_DECL, NULL_TREE,\n+\t\t      build_pointer_type (gcov_merge_fn_type));\n+  TREE_CHAIN (field) = fields;\n+  fields = field;\n+\n   finish_builtin_struct (type, \"__gcov_ctr_info\", fields, NULL_TREE);\n \n   return type;\n@@ -587,6 +603,7 @@ build_ctr_info_value (counter, type)\n {\n   tree value = NULL_TREE;\n   tree fields = TYPE_FIELDS (type);\n+  tree fn;\n \n   /* counters */\n   value = tree_cons (fields,\n@@ -614,6 +631,20 @@ build_ctr_info_value (counter, type)\n     }\n   else\n     value = tree_cons (fields, null_pointer_node, value);\n+  fields = TREE_CHAIN (fields);\n+\n+  fn = build_decl (FUNCTION_DECL,\n+\t\t   get_identifier (ctr_merge_functions[counter]),\n+\t\t   TREE_TYPE (TREE_TYPE (fields)));\n+  DECL_EXTERNAL (fn) = 1;\n+  TREE_PUBLIC (fn) = 1;\n+  DECL_ARTIFICIAL (fn) = 1;\n+  TREE_NOTHROW (fn) = 1;\n+  value = tree_cons (fields,\n+\t\t     build1 (ADDR_EXPR,\n+\t\t\t     TREE_TYPE (fields),\n+\t\t\t     fn),\n+\t\t     value);\n \n   value = build_constructor (type, nreverse (value));\n   "}, {"sha": "19b43aba35faded76ad3ac0c48cb462fafc330c7", "filename": "gcc/gcov-io.h", "status": "modified", "additions": 45, "deletions": 5, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09780dfb652960d422da1c5a9d81dc536cdf09f4/gcc%2Fgcov-io.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09780dfb652960d422da1c5a9d81dc536cdf09f4/gcc%2Fgcov-io.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.h?ref=09780dfb652960d422da1c5a9d81dc536cdf09f4", "patch": "@@ -176,15 +176,46 @@ typedef HOST_WIDEST_INT gcov_type;\n #endif\n #endif\n \n-/* In lib gcov we want function linkage to be static, so we do not\n-   polute the global namespace. In the compiler we want it extern, so\n-   that they can be accessed from elsewhere.  */\n-#if IN_LIBGCOV || IN_GCOV\n+/* In gcov we want function linkage to be static, so we do not\n+   polute the global namespace. In libgcov we need these functions\n+   to be extern, so prefix them with __gcov so that we do not conflict.\n+   In the compiler we want it extern, so that they can be accessed from\n+   elsewhere.  */\n+#if IN_LIBGCOV\n+\n+#define GCOV_LINKAGE /* nothing */\n+#define gcov_var __gcov_var\n+#define gcov_open __gcov_open\n+#define gcov_close __gcov_close\n+#define gcov_write_bytes __gcov_write_bytes\n+#define gcov_write_unsigned __gcov_write_unsigned\n+#define gcov_write_counter __gcov_write_counter\n+#define gcov_write_string __gcov_write_string\n+#define gcov_write_tag __gcov_write_tag\n+#define gcov_write_length __gcov_write_length\n+#define gcov_write_summary __gcov_write_summary\n+#define gcov_read_bytes __gcov_read_bytes\n+#define gcov_read_unsigned __gcov_read_unsigned\n+#define gcov_read_counter __gcov_read_counter\n+#define gcov_read_string __gcov_read_string\n+#define gcov_read_summary __gcov_read_summary\n+#define gcov_position __gcov_position\n+#define gcov_seek __gcov_seek\n+#define gcov_seek_end __gcov_seek_end\n+#define gcov_is_eof __gcov_is_eof\n+#define gcov_is_error __gcov_is_error\n+#define gcov_time __gcov_time\n+\n+#elif IN_GCOV\n+\n #define GCOV_LINKAGE static\n-#else\n+\n+#else /* !IN_LIBGCOV && !IN_GCOV */\n+\n #ifndef GCOV_LINKAGE\n #define GCOV_LINKAGE extern\n #endif\n+\n #endif\n \n /* File suffixes.  */\n@@ -220,6 +251,9 @@ typedef HOST_WIDEST_INT gcov_type;\n /* A list of human readable names of the counters */\n #define GCOV_COUNTER_NAMES\t{\"arcs\"}\n \n+/* Names of merge functions for counters.  */\n+#define GCOV_MERGE_FUNCTIONS\t{\"__gcov_merge_add\"}\n+\n /* Convert a counter index to a tag. */\n #define GCOV_TAG_FOR_COUNTER(COUNT)\t\t\t\t\\\n \t(GCOV_TAG_COUNTER_BASE + ((COUNT) << 17))\n@@ -286,11 +320,15 @@ struct gcov_fn_info\n   unsigned n_ctrs[0];\t\t/* instrumented counters */\n };\n \n+/* Type of function used to merge counters.  */\n+typedef void (*gcov_merge_fn) (gcov_type *, unsigned);\n+\n /* Information about counters.  */\n struct gcov_ctr_info\n {\n   unsigned num;\t\t/* number of counters.  */\n   gcov_type *values;\t/* their values.  */\n+  gcov_merge_fn merge;  /* The function used to merge them.  */\n };\n \n /* Information about a single object file.  */\n@@ -317,6 +355,8 @@ extern void __gcov_init (struct gcov_info *);\n /* Called before fork, to avoid double counting.  */\n extern void __gcov_flush (void);\n \n+/* The merge function that just sums the counters.  */\n+extern void __gcov_merge_add (gcov_type *, unsigned);\n #endif /* IN_LIBGCOV */\n \n /* Because small reads and writes, interspersed with seeks cause lots"}, {"sha": "74e8fa123de24fb129df0e811b330a8633be7026", "filename": "gcc/libgcov.c", "status": "modified", "additions": 31, "deletions": 6, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09780dfb652960d422da1c5a9d81dc536cdf09f4/gcc%2Flibgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09780dfb652960d422da1c5a9d81dc536cdf09f4/gcc%2Flibgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcov.c?ref=09780dfb652960d422da1c5a9d81dc536cdf09f4", "patch": "@@ -32,11 +32,19 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #if defined(inhibit_libc)\n /* If libc and its header files are not available, provide dummy functions.  */\n \n+#ifdef L_gcov\n void __gcov_init (void *p);\n void __gcov_flush (void);\n \n void __gcov_init (void *p) { }\n void __gcov_flush (void) { }\n+#endif\n+\n+#ifdef L_gcov_merge_add\n+void __gcov_merge_add (gcov_type *, unsigned);\n+\n+void __gcov_merge_add (gcov_type *counters, unsigned n_counters) { }\n+#endif\n \n #else\n \n@@ -59,6 +67,8 @@ void __gcov_flush (void) { }\n #endif\n #define IN_LIBGCOV 1\n #include \"gcov-io.h\"\n+\n+#ifdef L_gcov\n #include \"gcov-io.c\"\n \n /* Chain of per-object gcov structures.  */\n@@ -227,19 +237,18 @@ gcov_exit (void)\n \t\tif ((1 << t_ix) & gi_ptr->ctr_mask)\n \t\t  {\n \t\t    unsigned n_counts;\n-\t\t    gcov_type *c_ptr;\n+\t\t    gcov_merge_fn merge;\n \t\t    \n \t\t    tag = gcov_read_unsigned ();\n \t\t    length = gcov_read_unsigned ();\n \n \t\t    if (tag != GCOV_TAG_FOR_COUNTER (t_ix)\n \t\t\t|| fi_ptr->n_ctrs[c_ix] * 8 != length)\n \t\t      goto read_mismatch;\n-\t\t    c_ptr = values[c_ix];\n-\t\t    for (n_counts = fi_ptr->n_ctrs[c_ix];\n-\t\t\t n_counts--; c_ptr++)\n-\t\t      *c_ptr += gcov_read_counter ();\n-\t\t    values[c_ix] = c_ptr;\n+\t\t    n_counts = fi_ptr->n_ctrs[c_ix];\n+\t\t    merge = gi_ptr->counts[c_ix].merge;\n+\t\t    (*merge) (values[c_ix], n_counts);\n+\t\t    values[c_ix] += n_counts;\n \t\t    c_ix++;\n \t\t}\n \t      if ((error = gcov_is_error ()))\n@@ -450,4 +459,20 @@ __gcov_flush (void)\n     }\n }\n \n+#endif /* L_gcov */\n+\n+#ifdef L_gcov_merge_add\n+/* The profile merging function that just adds the counters.  It is given\n+   an array COUNTERS of N_COUNTERS old counters and it reads the same number\n+   of counters from the gcov file.  */\n+void\n+__gcov_merge_add (counters, n_counters)\n+     gcov_type *counters;\n+     unsigned n_counters;\n+{\n+  for (; n_counters; counters++, n_counters--)\n+    *counters += gcov_read_counter ();\n+}\n+#endif /* L_gcov_merge_add */\n+\n #endif /* inhibit_libc */"}]}