{"sha": "6d9f628e059c1999f0469084e1e4e4774495f64f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ5ZjYyOGUwNTljMTk5OWYwNDY5MDg0ZTFlNGU0Nzc0NDk1ZjY0Zg==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@redhat.com", "date": "2002-08-04T22:45:31Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2002-08-04T22:45:31Z"}, "message": "Index: ChangeLog\n2002-08-04  Geoffrey Keating  <geoffk@redhat.com>\n\n\t* Makefile.in (sdbout.o): Doesn't need $(OBSTACK_H).\n\t* collect2.h (permanent_obstack): Delete declaration.\n\t* collect2.c (permanent_obstack): Delete definition.\n\t(main): Don't initialise permanent_obstack.  Use xstrdup instead.\n\t* expr.c: Don't include obstack.h.\n\t(permanent_obstack): Delete declaration.\n\t* function.c: Don't include obstack.h.\n\t(permanent_obstack): Delete declaration.\n\t* integrate.c: Don't include obstack.h.\n\t(function_maybepermanent_obstack): Delete declaration.\n\t* print-tree.c (debug_tree): Use x*alloc not permalloc.\n\t* sdbout.c (gen_fake_label): Use x*alloc not permalloc.\n\t* tlink.c (pfgets): Use xstrdup not permanent_obstack.\n\t* toplev.c (lang_independent_init): Rename init_obstacks to init_ttree.\n\t* tree.h: Rename init_obstacks to init_ttree.  Remove declarations\n\tof permalloc, expralloc, perm_calloc.\n\t* tree.c (permanent_obstack): Delete definition.\n\t(init_ttree): Rename from init_obstacks.\n\t(permalloc): Delete.\n\t(perm_calloc): Delete.\n\t(dump_tree_statistics): Don't print information about\n\tpermanent_obstack.\n\t* varasm.c (assemble_start_function): Use xstrdup instead of\n\tpermalloc/strcpy.\n\t(assemble_variable): Likewise.\n\t* config/alpha/alpha.c (unicosmk_need_dex): Use xmalloc instead of\n\tpermalloc.\n\t(unicosmk_add_extern): Likewise.\n\t* config/c4x/c4x.c (c4x_external_ref): Likewise.\n\t(c4x_global_label): Likewise.\n\t* config/frv/frv.c (frv_encode_section_info): Likewise.\n\t* config/i386/winnt.c (i386_pe_record_external_function): Likewise.\n\t(i386_pe_record_exported_symbol): Likewise.\n\t* config/mips/mips.c (mips_output_external): Likewise.\n\t(mips_output_external_libcall): Likewise.\n\t* config/pa/pa.c: (permanent_obstack): Delete declaration.\n\t(output_call): Use ggc_strdup instead of allocating on\n\tpermanent_obstack.\n\t* config/romp/romp.c: Include ggc.h.\n\t(get_symref): Don't declare permanent_obstack, use ggc_strdup\n\tintead of permanent_obstack.\n\t* config/rs6000/aix31.h (ASM_OUTPUT_EXTERNAL): Use concat\n\tinstead of permalloc.\n\t* config/rs6000/rs6000.c (rs6000_gen_section_name): Use xmalloc\n\tinstead of permalloc\n\t* config/rs6000/xcoff.h (ASM_OUTPUT_EXTERNAL): Use concat\n\tinstead of permalloc.\n\t* config/vax/vax.c (vms_check_external): Use xmalloc instead of\n\tpermalloc.\n\nIndex: cp/ChangeLog\n2002-08-04  Geoffrey Keating  <geoffk@redhat.com>\n\n\t* cvt.c (ocp_convert): Delete obsolete code.\n\t* parse.y (permanent_obstack): Delete declaration.\n\t* pt.c (permanent_obstack): Delete declaration.\n\t* repo.c (permanent_obstack): Delete declaration.\n\t(open_repo_file): Use xmalloc instead of permanent_obstack.\n\t(init_repo): Use xstrdup instead of permanent_obstack.\n\nIndex: java/ChangeLog\n2002-08-04  Geoffrey Keating  <geoffk@redhat.com>\n\n\t* class.c: (permanent_obstack): Delete declaration.\n\t* constants.c: (permanent_obstack): Delete declaration.\n\t* except.c: (permanent_obstack): Delete declaration.\n\t* expr.c: (permanent_obstack): Delete declaration.\n\t* jcf-parse.c: (permanent_obstack): Delete declaration.\n\t(saveable_obstack): Delete declaration.\n\t* parse.h: (permanent_obstack): Delete declaration.\n\t* typeck.c: (permanent_obstack): Delete declaration.\n\nFrom-SVN: r56035", "tree": {"sha": "1a2ee6015c9e6c4f08b35ecd8a67ece8bed0f090", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a2ee6015c9e6c4f08b35ecd8a67ece8bed0f090"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d9f628e059c1999f0469084e1e4e4774495f64f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d9f628e059c1999f0469084e1e4e4774495f64f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d9f628e059c1999f0469084e1e4e4774495f64f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d9f628e059c1999f0469084e1e4e4774495f64f/comments", "author": null, "committer": null, "parents": [{"sha": "86a0cbcb9f15690df0f44ba0b6045206d096b0c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86a0cbcb9f15690df0f44ba0b6045206d096b0c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86a0cbcb9f15690df0f44ba0b6045206d096b0c6"}], "stats": {"total": 294, "additions": 140, "deletions": 154}, "files": [{"sha": "bc20197df6a1cc7310ae3c8ddf0e28c0eaf35cf9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d9f628e059c1999f0469084e1e4e4774495f64f", "patch": "@@ -1,3 +1,55 @@\n+2002-08-04  Geoffrey Keating  <geoffk@redhat.com>\n+\n+\t* Makefile.in (sdbout.o): Doesn't need $(OBSTACK_H).\n+\t* collect2.h (permanent_obstack): Delete declaration.\n+\t* collect2.c (permanent_obstack): Delete definition.\n+\t(main): Don't initialise permanent_obstack.  Use xstrdup instead.\n+\t* expr.c: Don't include obstack.h.\n+\t(permanent_obstack): Delete declaration.\n+\t* function.c: Don't include obstack.h.\n+\t(permanent_obstack): Delete declaration.\n+\t* integrate.c: Don't include obstack.h.\n+\t(function_maybepermanent_obstack): Delete declaration.\n+\t* print-tree.c (debug_tree): Use x*alloc not permalloc.\n+\t* sdbout.c (gen_fake_label): Use x*alloc not permalloc.\n+\t* tlink.c (pfgets): Use xstrdup not permanent_obstack.\n+\t* toplev.c (lang_independent_init): Rename init_obstacks to init_ttree.\n+\t* tree.h: Rename init_obstacks to init_ttree.  Remove declarations\n+\tof permalloc, expralloc, perm_calloc.\n+\t* tree.c (permanent_obstack): Delete definition.\n+\t(init_ttree): Rename from init_obstacks.\n+\t(permalloc): Delete.\n+\t(perm_calloc): Delete.\n+\t(dump_tree_statistics): Don't print information about\n+\tpermanent_obstack.\n+\t* varasm.c (assemble_start_function): Use xstrdup instead of\n+\tpermalloc/strcpy.\n+\t(assemble_variable): Likewise.\n+\t* config/alpha/alpha.c (unicosmk_need_dex): Use xmalloc instead of\n+\tpermalloc.\n+\t(unicosmk_add_extern): Likewise.\n+\t* config/c4x/c4x.c (c4x_external_ref): Likewise.\n+\t(c4x_global_label): Likewise.\n+\t* config/frv/frv.c (frv_encode_section_info): Likewise.\n+\t* config/i386/winnt.c (i386_pe_record_external_function): Likewise.\n+\t(i386_pe_record_exported_symbol): Likewise.\n+\t* config/mips/mips.c (mips_output_external): Likewise.\n+\t(mips_output_external_libcall): Likewise.\n+\t* config/pa/pa.c: (permanent_obstack): Delete declaration.\n+\t(output_call): Use ggc_strdup instead of allocating on\n+\tpermanent_obstack.\n+\t* config/romp/romp.c: Include ggc.h.\n+\t(get_symref): Don't declare permanent_obstack, use ggc_strdup\n+\tintead of permanent_obstack.\n+\t* config/rs6000/aix31.h (ASM_OUTPUT_EXTERNAL): Use concat\n+\tinstead of permalloc.\n+\t* config/rs6000/rs6000.c (rs6000_gen_section_name): Use xmalloc\n+\tinstead of permalloc\n+\t* config/rs6000/xcoff.h (ASM_OUTPUT_EXTERNAL): Use concat\n+\tinstead of permalloc.\n+\t* config/vax/vax.c (vms_check_external): Use xmalloc instead of\n+\tpermalloc.\n+\n 2002-08-04  Bernd Schmidt  <bernds@redhat.com>\n \n \tContribute a port developed primarily by Michael Meissner,"}, {"sha": "b9fc3648180ec3983cdaade6a9d55ebced58864a", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=6d9f628e059c1999f0469084e1e4e4774495f64f", "patch": "@@ -1446,7 +1446,7 @@ dbxout.o : dbxout.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) flags.h \\\n debug.o : debug.c debug.h $(CONFIG_H) $(SYSTEM_H)\n sdbout.o : sdbout.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) flags.h \\\n    function.h $(EXPR_H) output.h hard-reg-set.h $(REGS_H) real.h \\\n-   insn-config.h $(OBSTACK_H) xcoffout.h c-pragma.h ggc.h \\\n+   insn-config.h xcoffout.h c-pragma.h ggc.h \\\n    sdbout.h toplev.h $(TM_P_H) except.h debug.h langhooks.h gt-sdbout.h\n dwarfout.o : dwarfout.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) dwarf.h \\\n    flags.h insn-config.h reload.h output.h toplev.h $(TM_P_H) \\"}, {"sha": "c9b8865e62780caf5220482108d86d53e142cf2c", "filename": "gcc/collect2.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=6d9f628e059c1999f0469084e1e4e4774495f64f", "patch": "@@ -231,7 +231,6 @@ static struct head exports;\t\t/* list of exported symbols */\n static struct head frame_tables;\t/* list of frame unwind info tables */\n \n struct obstack temporary_obstack;\n-struct obstack permanent_obstack;\n char * temporary_firstobj;\n \n /* Holds the return value of pexecute.  */\n@@ -916,7 +915,6 @@ main (argc, argv)\n #endif\n \n   obstack_begin (&temporary_obstack, 0);\n-  obstack_begin (&permanent_obstack, 0);\n   temporary_firstobj = (char *) obstack_alloc (&temporary_obstack, 0);\n \n   current_demangling_style = auto_demangling;\n@@ -1076,18 +1074,18 @@ main (argc, argv)\n     {\n       const char *q = extract_string (&p);\n       if (*q == '-' && (q[1] == 'm' || q[1] == 'f'))\n-\t*c_ptr++ = obstack_copy0 (&permanent_obstack, q, strlen (q));\n+\t*c_ptr++ = xstrdup (q);\n       if (strcmp (q, \"-EL\") == 0 || strcmp (q, \"-EB\") == 0)\n-\t*c_ptr++ = obstack_copy0 (&permanent_obstack, q, strlen (q));\n+\t*c_ptr++ = xstrdup (q);\n       if (strcmp (q, \"-shared\") == 0)\n \tshared_obj = 1;\n       if (*q == '-' && q[1] == 'B')\n \t{\n-\t  *c_ptr++ = obstack_copy0 (&permanent_obstack, q, strlen (q));\n+\t  *c_ptr++ = xstrdup (q);\n \t  if (q[2] == 0)\n \t    {\n \t      q = extract_string (&p);\n-\t      *c_ptr++ = obstack_copy0 (&permanent_obstack, q, strlen (q));\n+\t      *c_ptr++ = xstrdup (q);\n \t    }\n \t}\n     }"}, {"sha": "f67882025391b5e39a3cfc036cf66458a514d99d", "filename": "gcc/collect2.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fcollect2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fcollect2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.h?ref=6d9f628e059c1999f0469084e1e4e4774495f64f", "patch": "@@ -36,7 +36,6 @@ extern int file_exists PARAMS ((const char *));\n extern const char *ldout;\n extern const char *c_file_name;\n extern struct obstack temporary_obstack;\n-extern struct obstack permanent_obstack;\n extern char *temporary_firstobj;\n extern int vflag, debug;\n "}, {"sha": "9b6f02669e5a04226bb20cef8a889e637503e3a6", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=6d9f628e059c1999f0469084e1e4e4774495f64f", "patch": "@@ -9824,7 +9824,7 @@ unicosmk_add_extern (name)\n   struct unicosmk_extern_list *p;\n \n   p = (struct unicosmk_extern_list *)\n-       permalloc (sizeof (struct unicosmk_extern_list));\n+       xmalloc (sizeof (struct unicosmk_extern_list));\n   p->next = unicosmk_extern_head;\n   p->name = name;\n   unicosmk_extern_head = p;\n@@ -9906,7 +9906,7 @@ unicosmk_need_dex (x)\n       --i;\n     }\n       \n-  dex = (struct unicosmk_dex *) permalloc (sizeof (struct unicosmk_dex));\n+  dex = (struct unicosmk_dex *) xmalloc (sizeof (struct unicosmk_dex));\n   dex->name = name;\n   dex->next = unicosmk_dex_list;\n   unicosmk_dex_list = dex;"}, {"sha": "f5c987c6d4a034788e9baaee900b45feb4a78bc8", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=6d9f628e059c1999f0469084e1e4e4774495f64f", "patch": "@@ -4497,7 +4497,7 @@ c4x_global_label (name)\n \treturn;\n       p = p->next;\n     }\n-  p = (struct name_list *) permalloc (sizeof *p);\n+  p = (struct name_list *) xmalloc (sizeof *p);\n   p->next = global_head;\n   p->name = name;\n   global_head = p;\n@@ -4546,7 +4546,7 @@ c4x_external_ref (name)\n \treturn;\n       p = p->next;\n     }\n-  p = (struct name_list *) permalloc (sizeof *p);\n+  p = (struct name_list *) xmalloc (sizeof *p);\n   p->next = extern_head;\n   p->name = name;\n   extern_head = p;"}, {"sha": "11b3674fee8db4e8e8737d6b793103d5bdd15be4", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=6d9f628e059c1999f0469084e1e4e4774495f64f", "patch": "@@ -748,7 +748,7 @@ frv_encode_section_info (decl)\n       if (is_small)\n \t{\n \t  rtx sym_ref = XEXP (DECL_RTL (decl), 0);\n-\t  char * str = permalloc (2 + strlen (XSTR (sym_ref, 0)));\n+\t  char * str = xmalloc (2 + strlen (XSTR (sym_ref, 0)));\n \n \t  str[0] = SDATA_FLAG_CHAR;\n \t  strcpy (&str[1], XSTR (sym_ref, 0));"}, {"sha": "f629d35570b6f33a92c8a0d1a25d74126efafcc6", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=6d9f628e059c1999f0469084e1e4e4774495f64f", "patch": "@@ -622,7 +622,7 @@ i386_pe_record_external_function (name)\n {\n   struct extern_list *p;\n \n-  p = (struct extern_list *) permalloc (sizeof *p);\n+  p = (struct extern_list *) xmalloc (sizeof *p);\n   p->next = extern_head;\n   p->name = name;\n   extern_head = p;\n@@ -652,7 +652,7 @@ i386_pe_record_exported_symbol (name, is_data)\n {\n   struct export_list *p;\n \n-  p = (struct export_list *) permalloc (sizeof *p);\n+  p = (struct export_list *) xmalloc (sizeof *p);\n   p->next = export_head;\n   p->name = name;\n   p->is_data = is_data;"}, {"sha": "31cd0d04ba05bf7b31bd954ad7ab85aa17d1ee54", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=6d9f628e059c1999f0469084e1e4e4774495f64f", "patch": "@@ -6044,7 +6044,7 @@ mips_output_external (file, decl, name)\n \t  || strcmp (TREE_STRING_POINTER (section_name), \".sbss\") == 0\n \t  || strcmp (TREE_STRING_POINTER (section_name), \".sdata\") == 0))\n     {\n-      p = (struct extern_list *) permalloc (sizeof (struct extern_list));\n+      p = (struct extern_list *) xmalloc (sizeof (struct extern_list));\n       p->next = extern_head;\n       p->name = name;\n       p->size = len;\n@@ -6060,7 +6060,7 @@ mips_output_external (file, decl, name)\n \t bootstrap under Irix 5.1.  */\n       && strcmp (name, \"__builtin_next_arg\"))\n     {\n-      p = (struct extern_list *) permalloc (sizeof (struct extern_list));\n+      p = (struct extern_list *) xmalloc (sizeof (struct extern_list));\n       p->next = extern_head;\n       p->name = name;\n       p->size = -1;\n@@ -6079,7 +6079,7 @@ mips_output_external_libcall (file, name)\n {\n   register struct extern_list *p;\n \n-  p = (struct extern_list *) permalloc (sizeof (struct extern_list));\n+  p = (struct extern_list *) xmalloc (sizeof (struct extern_list));\n   p->next = extern_head;\n   p->name = name;\n   p->size = -1;"}, {"sha": "7b5e7af178b1f8ac938f2203c49401daff77f614", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=6d9f628e059c1999f0469084e1e4e4774495f64f", "patch": "@@ -6168,8 +6168,6 @@ output_millicode_call (insn, call_dest)\n   return \"\";\n }\n \n-extern struct obstack permanent_obstack;\n-\n /* INSN is either a function call.  It may have an unconditional jump\n    in its delay slot.\n \n@@ -6298,9 +6296,7 @@ output_call (insn, call_dest, sibcall)\n \n \t      i = n_deferred_plabels++;\n \t      deferred_plabels[i].internal_label = gen_label_rtx ();\n-\t      deferred_plabels[i].name = obstack_alloc (&permanent_obstack,\n-\t\t\t\t\t\t\tstrlen (name) + 1);\n-\t      strcpy (deferred_plabels[i].name, name);\n+\t      deferred_plabels[i].name = ggc_strdup (name);\n \n \t      /* Gross.  We have just implicitly taken the address of this\n \t\t function, mark it as such.  */"}, {"sha": "c01ab051f99cec7cb747a232d178efcbb7b157a2", "filename": "gcc/config/romp/romp.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fconfig%2Fromp%2Fromp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fconfig%2Fromp%2Fromp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.c?ref=6d9f628e059c1999f0469084e1e4e4774495f64f", "patch": "@@ -37,6 +37,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"tree.h\"\n #include \"function.h\"\n #include \"expr.h\"\n+#include \"ggc.h\"\n #include \"toplev.h\"\n #include \"tm_p.h\"\n #include \"target.h\"\n@@ -1345,7 +1346,6 @@ rtx\n get_symref (name)\n      register const char *name;\n {\n-  extern struct obstack permanent_obstack;\n   register const char *sp = name;\n   unsigned int hash = 0;\n   struct symref_hashent *p, **last_p;\n@@ -1367,10 +1367,8 @@ get_symref (name)\n     {\n       /* Ensure SYMBOL_REF will stay around.  */\n       p = *last_p = (struct symref_hashent *)\n-\t\t\tpermalloc (sizeof (struct symref_hashent));\n-      p->symref = gen_rtx_SYMBOL_REF (Pmode,\n-\t\t\t\t      obstack_copy0 (&permanent_obstack,\n-\t\t\t\t\t\t     name, strlen (name)));\n+\t\t\txmalloc (sizeof (struct symref_hashent));\n+      p->symref = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (name));\n       p->next = 0;\n     }\n "}, {"sha": "7379a34178519faa8e731146821e6fec2b790d39", "filename": "gcc/config/rs6000/aix31.h", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fconfig%2Frs6000%2Faix31.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fconfig%2Frs6000%2Faix31.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix31.h?ref=6d9f628e059c1999f0469084e1e4e4774495f64f", "patch": "@@ -29,25 +29,25 @@ Boston, MA 02111-1307, USA.  */\n    where we can't, it gets stripped off.  */\n \n #undef ASM_OUTPUT_EXTERNAL\n-#define ASM_OUTPUT_EXTERNAL(FILE, DECL, NAME)\t\\\n-{ rtx _symref = XEXP (DECL_RTL (DECL), 0);\t\\\n-  if ((TREE_CODE (DECL) == VAR_DECL\t\t\\\n-       || TREE_CODE (DECL) == FUNCTION_DECL)\t\\\n-      && (NAME)[strlen (NAME) - 1] != ']')\t\\\n-    {\t\t\t\t\t\t\\\n-      char *_name = (char *) permalloc (strlen (XSTR (_symref, 0)) + 5); \\\n-      strcpy (_name, XSTR (_symref, 0));\t\\\n-      strcat (_name, TREE_CODE (DECL) == FUNCTION_DECL ? \"[DS]\" : \"[RW]\"); \\\n-      XSTR (_symref, 0) = _name;\t\t\\\n-    }\t\t\t\t\t\t\\\n-  fputs (\"\\t.extern \", FILE);\t\t\t\\\n-  assemble_name (FILE, XSTR (_symref, 0));\t\\\n-  if (TREE_CODE (DECL) == FUNCTION_DECL)\t\\\n-    {\t\t\t\t\t\t\\\n-      fputs (\"\\n\\t.extern .\", FILE);\t\t\\\n-      RS6000_OUTPUT_BASENAME (FILE, XSTR (_symref, 0));\t\\\n-    }\t\t\t\t\t\t\\\n-  putc ('\\n', FILE);\t\t\t\t\\\n+#define ASM_OUTPUT_EXTERNAL(FILE, DECL, NAME)\t\t\t\t\\\n+{ rtx _symref = XEXP (DECL_RTL (DECL), 0);\t\t\t\t\\\n+  if ((TREE_CODE (DECL) == VAR_DECL\t\t\t\t\t\\\n+       || TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\t\\\n+      && (NAME)[strlen (NAME) - 1] != ']')\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      XSTR (_symref, 0) = concat (XSTR (_symref, 0),\t\t\t\\\n+\t\t\t\t  (TREE_CODE (DECL) == FUNCTION_DECL\t\\\n+\t\t\t\t   ? \"[DS]\" : \"[RW]\"), \t\t\t\\\n+\t\t\t\t  NULL);\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  fputs (\"\\t.extern \", FILE);\t\t\t\t\t\t\\\n+  assemble_name (FILE, XSTR (_symref, 0));\t\t\t\t\\\n+  if (TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fputs (\"\\n\\t.extern .\", FILE);\t\t\t\t\t\\\n+      RS6000_OUTPUT_BASENAME (FILE, XSTR (_symref, 0));\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  putc ('\\n', FILE);\t\t\t\t\t\t\t\\\n }\n \n /* Similar, but for libcall.  We only have to worry about the function name,"}, {"sha": "3e6a9a9359975dc977acf60ad5d15a67e673dd1c", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=6d9f628e059c1999f0469084e1e4e4774495f64f", "patch": "@@ -11874,7 +11874,7 @@ rs6000_gen_section_name (buf, filename, section_desc)\n     }\n \n   len = strlen (after_last_slash) + strlen (section_desc) + 2;\n-  *buf = (char *) permalloc (len);\n+  *buf = (char *) xmalloc (len);\n \n   p = *buf;\n   *p++ = '_';"}, {"sha": "1e53a0c4e4a6a37f21e10287c86089837861cf9d", "filename": "gcc/config/rs6000/xcoff.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxcoff.h?ref=6d9f628e059c1999f0469084e1e4e4774495f64f", "patch": "@@ -306,17 +306,17 @@ toc_section ()\t\t\t\t\t\t\\\n /* This says how to output an external.  */\n \n #undef ASM_OUTPUT_EXTERNAL\n-#define ASM_OUTPUT_EXTERNAL(FILE, DECL, NAME)\t\\\n-{ rtx _symref = XEXP (DECL_RTL (DECL), 0);\t\\\n-  if ((TREE_CODE (DECL) == VAR_DECL\t\t\\\n-       || TREE_CODE (DECL) == FUNCTION_DECL)\t\\\n-      && (NAME)[strlen (NAME) - 1] != ']')\t\\\n-    {\t\t\t\t\t\t\\\n-      char *_name = (char *) permalloc (strlen (XSTR (_symref, 0)) + 5); \\\n-      strcpy (_name, XSTR (_symref, 0));\t\\\n-      strcat (_name, TREE_CODE (DECL) == FUNCTION_DECL ? \"[DS]\" : \"[RW]\"); \\\n-      XSTR (_symref, 0) = _name;\t\t\\\n-    }\t\t\t\t\t\t\\\n+#define ASM_OUTPUT_EXTERNAL(FILE, DECL, NAME)\t\t\t\t\\\n+{ rtx _symref = XEXP (DECL_RTL (DECL), 0);\t\t\t\t\\\n+  if ((TREE_CODE (DECL) == VAR_DECL\t\t\t\t\t\\\n+       || TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\t\\\n+      && (NAME)[strlen (NAME) - 1] != ']')\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      XSTR (_symref, 0) = concat (XSTR (_symref, 0),\t\t\t\\\n+\t\t\t\t  (TREE_CODE (DECL) == FUNCTION_DECL\t\\\n+\t\t\t\t   ? \"[DS]\" : \"[RW]\"),\t\t\t\\\n+\t\t\t\t  NULL);\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n }\n \n /* This is how to output an internal numbered label where"}, {"sha": "0cca78c769cd8f971f11caf9ee3d641842460761", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=6d9f628e059c1999f0469084e1e4e4774495f64f", "patch": "@@ -810,7 +810,7 @@ vms_check_external (decl, name, pending)\n       }\n \n   /* Not previously seen; create a new list entry.  */\n-  p = (struct extern_list *)permalloc ((long) sizeof (struct extern_list));\n+  p = (struct extern_list *) xmalloc (sizeof (struct extern_list));\n   p->name = name;\n \n   if (pending)"}, {"sha": "4001a17557cb4aec5f5e763a12330c15c3b15a40", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6d9f628e059c1999f0469084e1e4e4774495f64f", "patch": "@@ -1,3 +1,12 @@\n+2002-08-04  Geoffrey Keating  <geoffk@redhat.com>\n+\n+\t* cvt.c (ocp_convert): Delete obsolete code.\n+\t* parse.y (permanent_obstack): Delete declaration.\n+\t* pt.c (permanent_obstack): Delete declaration.\n+\t* repo.c (permanent_obstack): Delete declaration.\n+\t(open_repo_file): Use xmalloc instead of permanent_obstack.\n+\t(init_repo): Use xstrdup instead of permanent_obstack.\n+\n 2002-08-04  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* cp-tree.h (VF_DERIVED_VALUE): Remove."}, {"sha": "fd4b6b96757ec49d2680209d45087b3944c8e055", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=6d9f628e059c1999f0469084e1e4e4774495f64f", "patch": "@@ -779,14 +779,6 @@ ocp_convert (type, expr, convtype, flags)\n \treturn build_cplus_new (type, ctor);\n     }\n \n-  /* If TYPE or TREE_TYPE (E) is not on the permanent_obstack,\n-     then it won't be hashed and hence compare as not equal,\n-     even when it is.  */\n-  if (code == ARRAY_TYPE\n-      && TREE_TYPE (TREE_TYPE (e)) == TREE_TYPE (type)\n-      && index_type_equal (TYPE_DOMAIN (TREE_TYPE (e)), TYPE_DOMAIN (type)))\n-    return e;\n-\n   if (flags & LOOKUP_COMPLAIN)\n     error (\"conversion from `%T' to non-scalar type `%T' requested\",\n \t      TREE_TYPE (expr), type);"}, {"sha": "b7b9d30c236c57ea5aea713cfcc20d8d34b852a1", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=6d9f628e059c1999f0469084e1e4e4774495f64f", "patch": "@@ -44,8 +44,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"toplev.h\"\n #include \"ggc.h\"\n \n-extern struct obstack permanent_obstack;\n-\n /* Like YYERROR but do call yyerror.  */\n #define YYERROR1 { yyerror (\"syntax error\"); YYERROR; }\n "}, {"sha": "406e54aa1b8c165df1947217b036c445f5d60211", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=6d9f628e059c1999f0469084e1e4e4774495f64f", "patch": "@@ -47,8 +47,6 @@ Boston, MA 02111-1307, USA.  */\n    returning an int.  */\n typedef int (*tree_fn_t) PARAMS ((tree, void*));\n \n-extern struct obstack permanent_obstack;\n-\n /* The PENDING_TEMPLATES is a TREE_LIST of templates whose\n    instantiations have been deferred, either because their definitions\n    were not yet available, or because we were putting off doing the"}, {"sha": "e27d8c2199e97d1eadbe72db462d5101229c2946", "filename": "gcc/cp/repo.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fcp%2Frepo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fcp%2Frepo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frepo.c?ref=6d9f628e059c1999f0469084e1e4e4774495f64f", "patch": "@@ -50,7 +50,6 @@ static FILE *repo_file;\n static char *old_args, *old_dir, *old_main;\n \n static struct obstack temporary_obstack;\n-extern struct obstack permanent_obstack;\n \n #define IDENTIFIER_REPO_USED(NODE)   (TREE_LANG_FLAG_3 (NODE))\n #define IDENTIFIER_REPO_CHOSEN(NODE) (TREE_LANG_FLAG_4 (NODE))\n@@ -292,8 +291,9 @@ open_repo_file (filename)\n   if (! p)\n     p = s + strlen (s);\n \n-  obstack_grow (&permanent_obstack, s, p - s);\n-  repo_name = obstack_copy0 (&permanent_obstack, \".rpo\", 4);\n+  repo_name = xmalloc (p - s + 5);\n+  memcpy (repo_name, s, p - s);\n+  memcpy (repo_name + (p - s), \".rpo\", 5);\n \n   repo_file = fopen (repo_name, \"r\");\n }\n@@ -332,16 +332,13 @@ init_repo (filename)\n       switch (buf[0])\n \t{\n \tcase 'A':\n-\t  old_args = obstack_copy0 (&permanent_obstack, buf + 2,\n-\t\t\t\t    strlen (buf + 2));\n+\t  old_args = ggc_strdup (buf + 2);\n \t  break;\n \tcase 'D':\n-\t  old_dir = obstack_copy0 (&permanent_obstack, buf + 2,\n-\t\t\t\t   strlen (buf + 2));\n+\t  old_dir = ggc_strdup (buf + 2);\n \t  break;\n \tcase 'M':\n-\t  old_main = obstack_copy0 (&permanent_obstack, buf + 2,\n-\t\t\t\t    strlen (buf + 2));\n+\t  old_main = ggc_strdup (buf + 2);\n \t  break;\n \tcase 'C':\n \tcase 'O':"}, {"sha": "5ee1ef36752a55ded17507810e55b9d462c7bcb9", "filename": "gcc/expr.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=6d9f628e059c1999f0469084e1e4e4774495f64f", "patch": "@@ -25,7 +25,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"real.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n-#include \"obstack.h\"\n #include \"flags.h\"\n #include \"regs.h\"\n #include \"hard-reg-set.h\"\n@@ -118,8 +117,6 @@ struct store_by_pieces\n   int reverse;\n };\n \n-extern struct obstack permanent_obstack;\n-\n static rtx enqueue_insn\t\tPARAMS ((rtx, rtx));\n static unsigned HOST_WIDE_INT move_by_pieces_ninsns\n \t\t\t\tPARAMS ((unsigned HOST_WIDE_INT,"}, {"sha": "47fa24de05a56ff66a93bd3d3643af90dadf8b1d", "filename": "gcc/function.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=6d9f628e059c1999f0469084e1e4e4774495f64f", "patch": "@@ -53,7 +53,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"recog.h\"\n #include \"output.h\"\n #include \"basic-block.h\"\n-#include \"obstack.h\"\n #include \"toplev.h\"\n #include \"hashtab.h\"\n #include \"ggc.h\"\n@@ -6421,8 +6420,6 @@ expand_main_function ()\n #endif\n }\n \f\n-extern struct obstack permanent_obstack;\n-\n /* The PENDING_SIZES represent the sizes of variable-sized types.\n    Create RTL for the various sizes now (using temporary variables),\n    so that we can refer to the sizes from the RTL we are generating"}, {"sha": "8d23ae9d754b4ac2696343b784ca7f709ad5d4e6", "filename": "gcc/integrate.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=6d9f628e059c1999f0469084e1e4e4774495f64f", "patch": "@@ -45,10 +45,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"target.h\"\n #include \"langhooks.h\"\n \n-#include \"obstack.h\"\n-\n-extern struct obstack *function_maybepermanent_obstack;\n-\n /* Similar, but round to the next highest integer that meets the\n    alignment.  */\n #define CEIL_ROUND(VALUE,ALIGN)\t(((VALUE) + (ALIGN) - 1) & ~((ALIGN)- 1))"}, {"sha": "b0469aec3513ef09cd6509e709adbf11649234bb", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=6d9f628e059c1999f0469084e1e4e4774495f64f", "patch": "@@ -1,3 +1,14 @@\n+2002-08-04  Geoffrey Keating  <geoffk@redhat.com>\n+\n+\t* class.c: (permanent_obstack): Delete declaration.\n+\t* constants.c: (permanent_obstack): Delete declaration.\n+\t* except.c: (permanent_obstack): Delete declaration.\n+\t* expr.c: (permanent_obstack): Delete declaration.\n+\t* jcf-parse.c: (permanent_obstack): Delete declaration.\n+\t(saveable_obstack): Delete declaration.\n+\t* parse.h: (permanent_obstack): Delete declaration.\n+\t* typeck.c: (permanent_obstack): Delete declaration.\n+\n 2002-08-04  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* gcj.texi (version-gcc): Increase to 3.3."}, {"sha": "e167e0d0f86aa9f067255921060d9d6049cd7281", "filename": "gcc/java/class.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=6d9f628e059c1999f0469084e1e4e4774495f64f", "patch": "@@ -60,7 +60,6 @@ static tree build_method_symbols_entry PARAMS ((tree));\n static GTY(()) rtx registerClass_libfunc;\n static GTY(()) rtx registerResource_libfunc;\n \n-extern struct obstack permanent_obstack;\n struct obstack temporary_obstack;\n \n /* The compiler generates different code depending on whether or not"}, {"sha": "83c2e5528d6ca0cc5a58521379c8e7f72e294c70", "filename": "gcc/java/constants.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fjava%2Fconstants.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fjava%2Fconstants.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fconstants.c?ref=6d9f628e059c1999f0469084e1e4e4774495f64f", "patch": "@@ -29,8 +29,6 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"toplev.h\"\n #include \"ggc.h\"\n \n-extern struct obstack permanent_obstack;\n-\n static void set_constant_entry PARAMS ((CPool *, int, int, jword));\n static int find_class_or_string_constant PARAMS ((CPool *, int, tree));\n static int find_name_and_type_constant PARAMS ((CPool *, tree, tree));"}, {"sha": "ef773e4a6b32456c907e8e14fafa9bc4acd81838", "filename": "gcc/java/except.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fjava%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fjava%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexcept.c?ref=6d9f628e059c1999f0469084e1e4e4774495f64f", "patch": "@@ -44,8 +44,6 @@ static void link_handler PARAMS ((struct eh_range *, struct eh_range *));\n static void check_start_handlers PARAMS ((struct eh_range *, int));\n static void free_eh_ranges PARAMS ((struct eh_range *range));\n \n-extern struct obstack permanent_obstack;\n-\n struct eh_range *current_method_handlers;\n \n struct eh_range *current_try_block = NULL;"}, {"sha": "133fa039b45617b2befb9b438d0b7e57b405b8f1", "filename": "gcc/java/expr.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=6d9f628e059c1999f0469084e1e4e4774495f64f", "patch": "@@ -86,7 +86,6 @@ static int emit_init_test_initialization PARAMS ((void **entry,\n static int get_offset_table_index PARAMS ((tree));\n \n static GTY(()) tree operand_type[59];\n-extern struct obstack permanent_obstack;\n \n static GTY(()) tree methods_ident;\n static GTY(()) tree ncode_ident;"}, {"sha": "fc755f0ce711003b67ab18d2ea9012b416b8f224", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=6d9f628e059c1999f0469084e1e4e4774495f64f", "patch": "@@ -66,9 +66,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n \n #include \"jcf.h\"\n \n-extern struct obstack *saveable_obstack;\n extern struct obstack temporary_obstack;\n-extern struct obstack permanent_obstack;\n \n /* Set to non-zero value in order to emit class initilization code\n    before static field references.  */"}, {"sha": "9d7b30ae9d5b19c17985056302ef0e1cf56398c6", "filename": "gcc/java/parse.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fjava%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fjava%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.h?ref=6d9f628e059c1999f0469084e1e4e4774495f64f", "patch": "@@ -31,7 +31,6 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n /* Extern global variable declarations */\n extern int java_error_count;\n extern struct obstack temporary_obstack;\n-extern struct obstack permanent_obstack;\n extern int quiet_flag;\n \n #ifndef JC1_LITE"}, {"sha": "4a1894f641e60e77338d828da386a3078e22b368", "filename": "gcc/java/typeck.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fjava%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fjava%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Ftypeck.c?ref=6d9f628e059c1999f0469084e1e4e4774495f64f", "patch": "@@ -44,7 +44,6 @@ static tree lookup_do PARAMS ((tree, tree, tree, tree, tree (*)(tree)));\n static tree build_null_signature PARAMS ((tree));\n \n tree * type_map;\n-extern struct obstack permanent_obstack;\n \n /* Set the type of the local variable with index SLOT to TYPE. */\n "}, {"sha": "3104f1be214820fc8d33ad05e1f17ea8e8f97bb0", "filename": "gcc/print-tree.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=6d9f628e059c1999f0469084e1e4e4774495f64f", "patch": "@@ -48,8 +48,7 @@ void\n debug_tree (node)\n      tree node;\n {\n-  table = (struct bucket **) permalloc (HASH_SIZE * sizeof (struct bucket *));\n-  memset ((char *) table, 0, HASH_SIZE * sizeof (struct bucket *));\n+  table = (struct bucket **) xcalloc (HASH_SIZE, sizeof (struct bucket *));\n   print_node (stderr, \"\", node, 0);\n   table = 0;\n   fprintf (stderr, \"\\n\");\n@@ -213,7 +212,7 @@ print_node (file, prefix, node, indent)\n       }\n \n   /* Add this node to the table.  */\n-  b = (struct bucket *) permalloc (sizeof (struct bucket));\n+  b = (struct bucket *) xmalloc (sizeof (struct bucket));\n   b->node = node;\n   b->next = table[hash];\n   table[hash] = b;"}, {"sha": "aa928de13419cf4bfe63e8270e0a41d1cccf4d9c", "filename": "gcc/sdbout.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=6d9f628e059c1999f0469084e1e4e4774495f64f", "patch": "@@ -361,8 +361,7 @@ gen_fake_label ()\n   char *labelstr;\n   SDB_GENERATE_FAKE (label, unnamed_struct_number);\n   unnamed_struct_number++;\n-  labelstr = (char *) permalloc (strlen (label) + 1);\n-  strcpy (labelstr, label);\n+  labelstr = xstrdup (label);\n   return labelstr;\n }\n \f"}, {"sha": "21d82f75ffe0633d882a14aed6feed2b32ed0c04", "filename": "gcc/tlink.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Ftlink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Ftlink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftlink.c?ref=6d9f628e059c1999f0469084e1e4e4774495f64f", "patch": "@@ -334,7 +334,7 @@ static char *\n pfgets (stream)\n      FILE *stream;\n {\n-  return obstack_fgets (stream, &permanent_obstack);\n+  return xstrdup (tfgets (stream));\n }\n \f\n /* Real tlink code.  */"}, {"sha": "5717507f37041d70d3a6c83d40b1a61985ba515f", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=6d9f628e059c1999f0469084e1e4e4774495f64f", "patch": "@@ -5161,7 +5161,7 @@ lang_independent_init (no_backend)\n   init_ggc ();\n \n   init_stringpool ();\n-  init_obstacks ();\n+  init_ttree ();\n \n   if (no_backend)\n     return;"}, {"sha": "9e725db7958d28519261ed7a1c339d23560c3a47", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 38, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=6d9f628e059c1999f0469084e1e4e4774495f64f", "patch": "@@ -27,11 +27,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    nodes of that code.\n \n    It is intended to be language-independent, but occasionally\n-   calls language-dependent routines defined (for C) in typecheck.c.\n-\n-   The low-level allocation routines oballoc and permalloc\n-   are used also for allocating many other kinds of objects\n-   by all passes of the compiler.  */\n+   calls language-dependent routines defined (for C) in typecheck.c.  */\n \n #include \"config.h\"\n #include \"system.h\"\n@@ -51,10 +47,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n /* obstack.[ch] explicitly declined to prototype this.  */\n extern int _obstack_allocated_p PARAMS ((struct obstack *h, PTR obj));\n \n-/* Objects allocated on this obstack last forever.  */\n-\n-struct obstack permanent_obstack;\n-\n #ifdef GATHER_STATISTICS\n /* Statistics-gathering stuff.  */\n typedef enum\n@@ -136,43 +128,17 @@ static int type_hash_marked_p PARAMS ((const void *));\n tree global_trees[TI_MAX];\n tree integer_types[itk_none];\n \f\n-/* Init the principal obstacks.  */\n+/* Init tree.c.  */\n \n void\n-init_obstacks ()\n+init_ttree ()\n {\n-  gcc_obstack_init (&permanent_obstack);\n-\n   /* Initialize the hash table of types.  */\n   type_hash_table = htab_create (TYPE_HASH_INITIAL_SIZE, type_hash_hash,\n \t\t\t\t type_hash_eq, 0);\n }\n \n \f\n-/* Allocate SIZE bytes in the permanent obstack\n-   and return a pointer to them.  */\n-\n-char *\n-permalloc (size)\n-     int size;\n-{\n-  return (char *) obstack_alloc (&permanent_obstack, size);\n-}\n-\n-/* Allocate NELEM items of SIZE bytes in the permanent obstack\n-   and return a pointer to them.  The storage is cleared before\n-   returning the value.  */\n-\n-char *\n-perm_calloc (nelem, size)\n-     int nelem;\n-     long size;\n-{\n-  char *rval = (char *) obstack_alloc (&permanent_obstack, nelem * size);\n-  memset (rval, 0, nelem * size);\n-  return rval;\n-}\n-\n /* The name of the object as the assembler will see it (but before any\n    translations made by ASM_OUTPUT_LABELREF).  Often this is the same\n    as DECL_NAME.  It is an IDENTIFIER_NODE.  */\n@@ -4359,7 +4325,6 @@ dump_tree_statistics ()\n #else\n   fprintf (stderr, \"(No per-node statistics)\\n\");\n #endif\n-  print_obstack_statistics (\"permanent_obstack\", &permanent_obstack);\n   print_type_hash_statistics ();\n   (*lang_hooks.print_statistics) ();\n }"}, {"sha": "fd8a5596488374a31dffc0a6befad3f816062708", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=6d9f628e059c1999f0469084e1e4e4774495f64f", "patch": "@@ -2103,8 +2103,6 @@ extern GTY(()) tree integer_types[itk_none];\n    statistical reports, not code generation.  */\n extern double approx_sqrt\t\tPARAMS ((double));\n \n-extern char *permalloc\t\t\tPARAMS ((int));\n-extern char *expralloc\t\t\tPARAMS ((int));\n extern tree decl_assembler_name\t\tPARAMS ((tree));\n \n /* Compute the number of bytes occupied by 'node'.  This routine only\n@@ -2730,7 +2728,6 @@ extern tree builtin_function\t\tPARAMS ((const char *, tree, int,\n \t\t\t\t\t       const char *, tree));\n \f\n /* In tree.c */\n-extern char *perm_calloc\t\t\tPARAMS ((int, long));\n extern void clean_symbol_name\t\t\tPARAMS ((char *));\n extern tree get_file_function_name_long \tPARAMS ((const char *));\n extern tree get_set_constructor_bits\t\tPARAMS ((tree, char *, int));\n@@ -2891,7 +2888,7 @@ extern int real_onep\t\t\tPARAMS ((tree));\n extern int real_twop\t\t\tPARAMS ((tree));\n extern int real_minus_onep\t\tPARAMS ((tree));\n extern void gcc_obstack_init\t\tPARAMS ((struct obstack *));\n-extern void init_obstacks\t\tPARAMS ((void));\n+extern void init_ttree\t\t\tPARAMS ((void));\n extern void build_common_tree_nodes\tPARAMS ((int));\n extern void build_common_tree_nodes_2\tPARAMS ((int));\n "}, {"sha": "3b250ac51a83dc0cf1ecf28ebd5430aecf0706c5", "filename": "gcc/varasm.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9f628e059c1999f0469084e1e4e4774495f64f/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=6d9f628e059c1999f0469084e1e4e4774495f64f", "patch": "@@ -1205,8 +1205,7 @@ assemble_start_function (decl, fnname)\n \t  char *name;\n \n \t  p = (* targetm.strip_name_encoding) (fnname);\n-\t  name = permalloc (strlen (p) + 1);\n-\t  strcpy (name, p);\n+\t  name = xstrdup (p);\n \n \t  if (! DECL_WEAK (decl) && ! DECL_ONE_ONLY (decl))\n \t    first_global_object_name = name;\n@@ -1529,8 +1528,7 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n       char *xname;\n \n       p = (* targetm.strip_name_encoding) (name);\n-      xname = permalloc (strlen (p) + 1);\n-      strcpy (xname, p);\n+      xname = xstrdup (p);\n       first_global_object_name = xname;\n     }\n "}]}