{"sha": "db3015e9e3b5bd8bae0cf6c629f4f8333a01f855", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGIzMDE1ZTllM2I1YmQ4YmFlMGNmNmM2MjlmNGY4MzMzYTAxZjg1NQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-09-02T20:52:42Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-09-02T20:52:42Z"}, "message": "compiler: Mark erroneous constants as invalid.\n\n    \n    When the compiler failed to evaluate a numeric constant because\n    because it was erroneous, there was no way for parent nodes to\n    discover the error and lower themselves into error nodes.  This patch\n    now uses the NC_INVALID enumerator to mark numeric constants with a\n    known, reported error.\n    \n    Fixes golang/go#11541.\n    \n    Reviewed-on: https://go-review.googlesource.com/13904\n\nFrom-SVN: r227420", "tree": {"sha": "18599c3d079da6234590aae68822f2d9aff90c8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18599c3d079da6234590aae68822f2d9aff90c8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db3015e9e3b5bd8bae0cf6c629f4f8333a01f855", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db3015e9e3b5bd8bae0cf6c629f4f8333a01f855", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db3015e9e3b5bd8bae0cf6c629f4f8333a01f855", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db3015e9e3b5bd8bae0cf6c629f4f8333a01f855/comments", "author": null, "committer": null, "parents": [{"sha": "ce8bdcefc527fdf027c4d65454357d6cf9b73905", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce8bdcefc527fdf027c4d65454357d6cf9b73905", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce8bdcefc527fdf027c4d65454357d6cf9b73905"}], "stats": {"total": 72, "additions": 61, "deletions": 11}, "files": [{"sha": "f74d2ca565b31d5f9b17f39658458ba1a647ae8b", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3015e9e3b5bd8bae0cf6c629f4f8333a01f855/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3015e9e3b5bd8bae0cf6c629f4f8333a01f855/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=db3015e9e3b5bd8bae0cf6c629f4f8333a01f855", "patch": "@@ -1,4 +1,4 @@\n-a63e173b20baa1a48470dd31a1fb1f2704b37011\n+3f8feb4f905535448833a14e4f5c83f682087749\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "5abfb27b3f1c8b6dd6057e7a0060683e2b2405c6", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 50, "deletions": 9, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3015e9e3b5bd8bae0cf6c629f4f8333a01f855/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3015e9e3b5bd8bae0cf6c629f4f8333a01f855/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=db3015e9e3b5bd8bae0cf6c629f4f8333a01f855", "patch": "@@ -4567,6 +4567,7 @@ Binary_expression::eval_integer(Operator op, const Numeric_constant* left_nc,\n       if (mpz_sizeinbase(val, 2) > 0x100000)\n \t{\n \t  error_at(location, \"constant addition overflow\");\n+          nc->set_invalid();\n \t  mpz_set_ui(val, 1);\n \t}\n       break;\n@@ -4575,6 +4576,7 @@ Binary_expression::eval_integer(Operator op, const Numeric_constant* left_nc,\n       if (mpz_sizeinbase(val, 2) > 0x100000)\n \t{\n \t  error_at(location, \"constant subtraction overflow\");\n+          nc->set_invalid();\n \t  mpz_set_ui(val, 1);\n \t}\n       break;\n@@ -4589,6 +4591,7 @@ Binary_expression::eval_integer(Operator op, const Numeric_constant* left_nc,\n       if (mpz_sizeinbase(val, 2) > 0x100000)\n \t{\n \t  error_at(location, \"constant multiplication overflow\");\n+          nc->set_invalid();\n \t  mpz_set_ui(val, 1);\n \t}\n       break;\n@@ -4598,6 +4601,7 @@ Binary_expression::eval_integer(Operator op, const Numeric_constant* left_nc,\n       else\n \t{\n \t  error_at(location, \"division by zero\");\n+          nc->set_invalid();\n \t  mpz_set_ui(val, 0);\n \t}\n       break;\n@@ -4607,6 +4611,7 @@ Binary_expression::eval_integer(Operator op, const Numeric_constant* left_nc,\n       else\n \t{\n \t  error_at(location, \"division by zero\");\n+          nc->set_invalid();\n \t  mpz_set_ui(val, 0);\n \t}\n       break;\n@@ -4618,6 +4623,7 @@ Binary_expression::eval_integer(Operator op, const Numeric_constant* left_nc,\n \telse\n \t  {\n \t    error_at(location, \"shift count overflow\");\n+            nc->set_invalid();\n \t    mpz_set_ui(val, 1);\n \t  }\n \tbreak;\n@@ -4629,6 +4635,7 @@ Binary_expression::eval_integer(Operator op, const Numeric_constant* left_nc,\n \tif (mpz_cmp_ui(right_val, shift) != 0)\n \t  {\n \t    error_at(location, \"shift count overflow\");\n+            nc->set_invalid();\n \t    mpz_set_ui(val, 1);\n \t  }\n \telse\n@@ -4723,6 +4730,7 @@ Binary_expression::eval_float(Operator op, const Numeric_constant* left_nc,\n       else\n \t{\n \t  error_at(location, \"division by zero\");\n+          nc->set_invalid();\n \t  mpfr_set_ui(val, 0, GMP_RNDN);\n \t}\n       break;\n@@ -4787,6 +4795,7 @@ Binary_expression::eval_complex(Operator op, const Numeric_constant* left_nc,\n       if (mpc_cmp_si(right_val, 0) == 0)\n \t{\n \t  error_at(location, \"division by zero\");\n+          nc->set_invalid();\n \t  mpc_set_ui(val, 0, MPC_RNDNN);\n \t  break;\n \t}\n@@ -4849,7 +4858,14 @@ Binary_expression::do_lower(Gogo* gogo, Named_object*,\n \t    Numeric_constant nc;\n \t    if (!Binary_expression::eval_constant(op, &left_nc, &right_nc,\n \t\t\t\t\t\t  location, &nc))\n-\t      return this;\n+              {\n+                if (nc.is_invalid())\n+                  {\n+                    go_assert(saw_errors());\n+                    return Expression::make_error(location);\n+                  }\n+                return this;\n+              }\n \t    return nc.expression(location);\n \t  }\n       }\n@@ -15189,7 +15205,7 @@ Numeric_constant::set_type(Type* type, bool issue_error, Location loc)\n \n bool\n Numeric_constant::check_int_type(Integer_type* type, bool issue_error,\n-\t\t\t\t Location location) const\n+\t\t\t\t Location location)\n {\n   mpz_t val;\n   switch (this->classification_)\n@@ -15203,7 +15219,11 @@ Numeric_constant::check_int_type(Integer_type* type, bool issue_error,\n       if (!mpfr_integer_p(this->u_.float_val))\n \t{\n \t  if (issue_error)\n-\t    error_at(location, \"floating point constant truncated to integer\");\n+            {\n+              error_at(location,\n+                       \"floating point constant truncated to integer\");\n+              this->set_invalid();\n+            }\n \t  return false;\n \t}\n       mpz_init(val);\n@@ -15215,7 +15235,10 @@ Numeric_constant::check_int_type(Integer_type* type, bool issue_error,\n \t  || !mpfr_zero_p(mpc_imagref(this->u_.complex_val)))\n \t{\n \t  if (issue_error)\n-\t    error_at(location, \"complex constant truncated to integer\");\n+            {\n+              error_at(location, \"complex constant truncated to integer\");\n+              this->set_invalid();\n+            }\n \t  return false;\n \t}\n       mpz_init(val);\n@@ -15253,7 +15276,10 @@ Numeric_constant::check_int_type(Integer_type* type, bool issue_error,\n     }\n \n   if (!ret && issue_error)\n-    error_at(location, \"integer constant overflow\");\n+    {\n+      error_at(location, \"integer constant overflow\");\n+      this->set_invalid();\n+    }\n \n   return ret;\n }\n@@ -15281,7 +15307,10 @@ Numeric_constant::check_float_type(Float_type* type, bool issue_error,\n       if (!mpfr_zero_p(mpc_imagref(this->u_.complex_val)))\n \t{\n \t  if (issue_error)\n-\t    error_at(location, \"complex constant truncated to float\");\n+            {\n+              this->set_invalid();\n+              error_at(location, \"complex constant truncated to float\");\n+            }\n \t  return false;\n \t}\n       mpfr_init_set(val, mpc_realref(this->u_.complex_val), GMP_RNDN);\n@@ -15344,7 +15373,10 @@ Numeric_constant::check_float_type(Float_type* type, bool issue_error,\n   mpfr_clear(val);\n \n   if (!ret && issue_error)\n-    error_at(location, \"floating point constant overflow\");\n+    {\n+      error_at(location, \"floating point constant overflow\");\n+      this->set_invalid();\n+    }\n \n   return ret;\n } \n@@ -15399,7 +15431,10 @@ Numeric_constant::check_complex_type(Complex_type* type, bool issue_error,\n       && mpfr_get_exp(mpc_realref(val)) > max_exp)\n     {\n       if (issue_error)\n-\terror_at(location, \"complex real part overflow\");\n+        {\n+          error_at(location, \"complex real part overflow\");\n+          this->set_invalid();\n+        }\n       ret = false;\n     }\n \n@@ -15409,7 +15444,10 @@ Numeric_constant::check_complex_type(Complex_type* type, bool issue_error,\n       && mpfr_get_exp(mpc_imagref(val)) > max_exp)\n     {\n       if (issue_error)\n-\terror_at(location, \"complex imaginary part overflow\");\n+        {\n+          error_at(location, \"complex imaginary part overflow\");\n+          this->set_invalid();\n+        }\n       ret = false;\n     }\n \n@@ -15455,6 +15493,9 @@ Numeric_constant::expression(Location loc) const\n       return Expression::make_float(&this->u_.float_val, this->type_, loc);\n     case NC_COMPLEX:\n       return Expression::make_complex(&this->u_.complex_val, this->type_, loc);\n+    case NC_INVALID:\n+      go_assert(saw_errors());\n+      return Expression::make_error(loc);\n     default:\n       go_unreachable();\n     }"}, {"sha": "3e3950985cb623cba588047dd9759493c7822aaa", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3015e9e3b5bd8bae0cf6c629f4f8333a01f855/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3015e9e3b5bd8bae0cf6c629f4f8333a01f855/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=db3015e9e3b5bd8bae0cf6c629f4f8333a01f855", "patch": "@@ -3460,6 +3460,11 @@ class Numeric_constant\n   void\n   set_complex(Type*, const mpc_t);\n \n+  // Mark numeric constant as invalid.\n+  void\n+  set_invalid()\n+  { this->classification_ = NC_INVALID; }\n+\n   // Classifiers.\n   bool\n   is_int() const\n@@ -3477,6 +3482,10 @@ class Numeric_constant\n   is_complex() const\n   { return this->classification_ == Numeric_constant::NC_COMPLEX; }\n \n+  bool\n+  is_invalid() const\n+  { return this->classification_ == Numeric_constant::NC_INVALID; }\n+\n   // Value retrievers.  These will initialize the values as well as\n   // set them.  GET_INT is only valid if IS_INT returns true, and\n   // likewise respectively.\n@@ -3554,7 +3563,7 @@ class Numeric_constant\n   mpfr_to_unsigned_long(const mpfr_t fval, unsigned long *val) const;\n \n   bool\n-  check_int_type(Integer_type*, bool, Location) const;\n+  check_int_type(Integer_type*, bool, Location);\n \n   bool\n   check_float_type(Float_type*, bool, Location);"}]}