{"sha": "234bdd5b07ad021270b1e81e419c9bd7ce679877", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM0YmRkNWIwN2FkMDIxMjcwYjFlODFlNDE5YzliZDdjZTY3OTg3Nw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-04-24T05:55:27Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-04-24T05:55:27Z"}, "message": "compiler: Error for invalid use of ... in call.\n\nFrom-SVN: r186739", "tree": {"sha": "93b0bd4898df6c13ba34c6e43534f925692a4cdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93b0bd4898df6c13ba34c6e43534f925692a4cdf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/234bdd5b07ad021270b1e81e419c9bd7ce679877", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/234bdd5b07ad021270b1e81e419c9bd7ce679877", "html_url": "https://github.com/Rust-GCC/gccrs/commit/234bdd5b07ad021270b1e81e419c9bd7ce679877", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/234bdd5b07ad021270b1e81e419c9bd7ce679877/comments", "author": null, "committer": null, "parents": [{"sha": "5e0cea668e8a8d44674ebbc751afbe9dcc17339c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e0cea668e8a8d44674ebbc751afbe9dcc17339c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e0cea668e8a8d44674ebbc751afbe9dcc17339c"}], "stats": {"total": 24, "additions": 22, "deletions": 2}, "files": [{"sha": "e6d1a0d4db248a89a0fe6c5ee0d2697c174c38b3", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/234bdd5b07ad021270b1e81e419c9bd7ce679877/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/234bdd5b07ad021270b1e81e419c9bd7ce679877/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=234bdd5b07ad021270b1e81e419c9bd7ce679877", "patch": "@@ -8641,7 +8641,14 @@ Call_expression::lower_varargs(Gogo* gogo, Named_object* function,\n \tnew_args->push_back(*pa);\n       else if (this->is_varargs_)\n \t{\n-\t  this->report_error(_(\"too many arguments\"));\n+\t  if ((*pa)->type()->is_slice_type())\n+\t    this->report_error(_(\"too many arguments\"));\n+\t  else\n+\t    {\n+\t      error_at(this->location(),\n+\t\t       _(\"invalid use of %<...%> with non-slice\"));\n+\t      this->set_is_error();\n+\t    }\n \t  return;\n \t}\n       else\n@@ -8886,6 +8893,9 @@ Call_expression::check_argument_type(int i, const Type* parameter_type,\n void\n Call_expression::do_check_types(Gogo*)\n {\n+  if (this->classification() == EXPRESSION_ERROR)\n+    return;\n+\n   Function_type* fntype = this->get_function_type();\n   if (fntype == NULL)\n     {\n@@ -8921,7 +8931,17 @@ Call_expression::do_check_types(Gogo*)\n     }\n \n   // Note that varargs was handled by the lower_varargs() method, so\n-  // we don't have to worry about it here.\n+  // we don't have to worry about it here unless something is wrong.\n+  if (this->is_varargs_ && !this->varargs_are_lowered_)\n+    {\n+      if (!fntype->is_varargs())\n+\t{\n+\t  error_at(this->location(),\n+\t\t   _(\"invalid use of %<...%> calling non-variadic function\"));\n+\t  this->set_is_error();\n+\t  return;\n+\t}\n+    }\n \n   const Typed_identifier_list* parameters = fntype->parameters();\n   if (this->args_ == NULL)"}]}