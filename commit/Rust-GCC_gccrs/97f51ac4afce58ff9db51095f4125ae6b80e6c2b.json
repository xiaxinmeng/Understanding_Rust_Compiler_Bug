{"sha": "97f51ac4afce58ff9db51095f4125ae6b80e6c2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdmNTFhYzRhZmNlNThmZjlkYjUxMDk1ZjQxMjVhZTZiODBlNmMyYg==", "commit": {"author": {"name": "Rodney Brown", "email": "rbrown64@csc.com.au", "date": "2002-07-17T18:09:56Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-07-17T18:09:56Z"}, "message": "i386.c (ix86_expand_int_movcc): In the general case suppress addition when either ct or cf are zero.\n\n        * config/i386/i386.c (ix86_expand_int_movcc): In the general case\n        suppress addition when either ct or cf are zero.\n\nFrom-SVN: r55540", "tree": {"sha": "18dabd39e1bec7b63ff27ba44c5cbea4f27fe8de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18dabd39e1bec7b63ff27ba44c5cbea4f27fe8de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97f51ac4afce58ff9db51095f4125ae6b80e6c2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97f51ac4afce58ff9db51095f4125ae6b80e6c2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97f51ac4afce58ff9db51095f4125ae6b80e6c2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97f51ac4afce58ff9db51095f4125ae6b80e6c2b/comments", "author": null, "committer": null, "parents": [{"sha": "f1a73cfecf88d38c1c917c93b60cb8b2e4d82960", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1a73cfecf88d38c1c917c93b60cb8b2e4d82960", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1a73cfecf88d38c1c917c93b60cb8b2e4d82960"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "9e10f29d9a8b95f5fdcf40a492fd91117bf30643", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97f51ac4afce58ff9db51095f4125ae6b80e6c2b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97f51ac4afce58ff9db51095f4125ae6b80e6c2b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97f51ac4afce58ff9db51095f4125ae6b80e6c2b", "patch": "@@ -1,3 +1,8 @@\n+2002-07-17  Rodney Brown  <rbrown64@csc.com.au>\n+\n+\t* config/i386/i386.c (ix86_expand_int_movcc): In the general case\n+\tsuppress addition when either ct or cf are zero.\n+\n 2002-06-17  Eric Botcazou <ebotcazou@multimania.com>\n             Glen Nakamura <glen@imodulo.com>\n "}, {"sha": "68b3d4a95f5abddc854cd9960fb7f3463b132172", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97f51ac4afce58ff9db51095f4125ae6b80e6c2b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97f51ac4afce58ff9db51095f4125ae6b80e6c2b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=97f51ac4afce58ff9db51095f4125ae6b80e6c2b", "patch": "@@ -8866,8 +8866,8 @@ ix86_expand_int_movcc (operands)\n \t\t\t\t ix86_compare_op1, VOIDmode, 0, 1);\n \n \t  nops = 0;\n-\t  /* On x86_64 the lea instruction operates on Pmode, so we need to get arithmetics\n-\t     done in proper mode to match.  */\n+\t  /* On x86_64 the lea instruction operates on Pmode, so we need\n+\t     to get arithmetics done in proper mode to match.  */\n \t  if (diff == 1)\n \t    tmp = out;\n \t  else\n@@ -8931,10 +8931,10 @@ ix86_expand_int_movcc (operands)\n \n       if (!optimize_size && !TARGET_CMOVE)\n \t{\n-\t  if (ct == 0)\n+\t  if (cf == 0)\n \t    {\n-\t      ct = cf;\n-\t      cf = 0;\n+\t      cf = ct;\n+\t      ct = 0;\n \t      if (FLOAT_MODE_P (GET_MODE (ix86_compare_op0)))\n \t\t/* We may be reversing unordered compare to normal compare,\n \t\t   that is not valid in general (we may convert non-trapping\n@@ -8983,18 +8983,16 @@ ix86_expand_int_movcc (operands)\n \t      out = emit_store_flag (out, code, ix86_compare_op0,\n \t\t\t\t     ix86_compare_op1, VOIDmode, 0, 1);\n \n-\t      out = expand_simple_binop (mode, PLUS,\n-\t\t\t\t\t out, constm1_rtx,\n+\t      out = expand_simple_binop (mode, PLUS, out, constm1_rtx,\n \t\t\t\t\t out, 1, OPTAB_DIRECT);\n \t    }\n \n-\t  out = expand_simple_binop (mode, AND,\n-\t\t\t\t     out,\n+\t  out = expand_simple_binop (mode, AND, out,\n \t\t\t\t     gen_int_mode (cf - ct, mode),\n \t\t\t\t     out, 1, OPTAB_DIRECT);\n-\t  out = expand_simple_binop (mode, PLUS,\n-\t\t\t\t     out, GEN_INT (ct),\n-\t\t\t\t     out, 1, OPTAB_DIRECT);\n+\t  if (ct)\n+\t    out = expand_simple_binop (mode, PLUS, out, GEN_INT (ct),\n+\t\t\t\t       out, 1, OPTAB_DIRECT);\n \t  if (out != operands[0])\n \t    emit_move_insn (operands[0], out);\n "}]}