{"sha": "1c773c7a2ecd36d0d58a285b535dc4fddcb1b370", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM3NzNjN2EyZWNkMzZkMGQ1OGEyODViNTM1ZGM0ZmRkY2IxYjM3MA==", "commit": {"author": {"name": "Kai Tietz", "email": "ktietz@redhat.com", "date": "2012-12-28T21:49:59Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2012-12-28T21:49:59Z"}, "message": "rtti.c (LONGPTR_T): New helper-macro.\n\n        * rtti.c (LONGPTR_T): New helper-macro.\n        (get_pseudo_ti_init): Initialize offset_type by LONGPTR_T\n        type instead of 'long' type.\n        (create_tinfo_types): Use for offset/flags field LONGPTR_T\n        type instead of 'long' type.\n\nFrom-SVN: r194745", "tree": {"sha": "968e91501ffdcc82581e75d7cf5355921f4100cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/968e91501ffdcc82581e75d7cf5355921f4100cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c773c7a2ecd36d0d58a285b535dc4fddcb1b370", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c773c7a2ecd36d0d58a285b535dc4fddcb1b370", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c773c7a2ecd36d0d58a285b535dc4fddcb1b370", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c773c7a2ecd36d0d58a285b535dc4fddcb1b370/comments", "author": null, "committer": null, "parents": [{"sha": "5fabac29f7201639991f102e8354b3bb85ac2bc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fabac29f7201639991f102e8354b3bb85ac2bc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fabac29f7201639991f102e8354b3bb85ac2bc9"}], "stats": {"total": 18, "additions": 16, "deletions": 2}, "files": [{"sha": "a57051ebf5fa1587b7f44929b9bc714ada1a9865", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c773c7a2ecd36d0d58a285b535dc4fddcb1b370/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c773c7a2ecd36d0d58a285b535dc4fddcb1b370/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1c773c7a2ecd36d0d58a285b535dc4fddcb1b370", "patch": "@@ -1,3 +1,11 @@\n+2012-12-28  Kai Tietz  <ktietz@redhat.com>\n+\n+\t* rtti.c (LONGPTR_T): New helper-macro.\n+\t(get_pseudo_ti_init): Initialize offset_type by LONGPTR_T\n+\ttype instead of 'long' type.\n+\t(create_tinfo_types): Use for offset/flags field LONGPTR_T\n+\ttype instead of 'long' type.\n+\n 2012-12-19  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/55724"}, {"sha": "de28371c67968b81dbf7f89b0efad3e0dc26e2b1", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c773c7a2ecd36d0d58a285b535dc4fddcb1b370/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c773c7a2ecd36d0d58a285b535dc4fddcb1b370/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=1c773c7a2ecd36d0d58a285b535dc4fddcb1b370", "patch": "@@ -89,6 +89,12 @@ typedef enum tinfo_kind\n   /* ...\t\t   abi::__vmi_type_info<I> */\n } tinfo_kind;\n \n+/* Helper macro to get maximum scalar-width of pointer or of the 'long'-type.\n+   This of interest for llp64 targets.  */\n+#define LONGPTR_T \\\n+  integer_types[(POINTER_SIZE <= TYPE_PRECISION (integer_types[itk_long]) \\\n+\t\t ? itk_long : itk_long_long)]\n+\n /* A vector of all tinfo decls that haven't yet been emitted.  */\n vec<tree, va_gc> *unemitted_tinfo_decls;\n \n@@ -1116,7 +1122,7 @@ get_pseudo_ti_init (tree type, unsigned tk_index)\n \ttree binfo = TYPE_BINFO (type);\n \tint nbases = BINFO_N_BASE_BINFOS (binfo);\n \tvec<tree, va_gc> *base_accesses = BINFO_BASE_ACCESSES (binfo);\n-\ttree offset_type = integer_types[itk_long];\n+\ttree offset_type = LONGPTR_T;\n \ttree base_inits = NULL_TREE;\n \tint ix;\n \tvec<constructor_elt, va_gc> *init_vec = NULL;\n@@ -1420,7 +1426,7 @@ create_tinfo_types (void)\n     fields = field;\n \n     field = build_decl (BUILTINS_LOCATION,\n-\t\t\tFIELD_DECL, NULL_TREE, integer_types[itk_long]);\n+\t\t\tFIELD_DECL, NULL_TREE, LONGPTR_T);\n     DECL_CHAIN (field) = fields;\n     fields = field;\n "}]}