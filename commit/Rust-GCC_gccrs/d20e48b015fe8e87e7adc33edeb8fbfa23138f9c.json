{"sha": "d20e48b015fe8e87e7adc33edeb8fbfa23138f9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDIwZTQ4YjAxNWZlOGU4N2U3YWRjMzNlZGViOGZiZmEyMzEzOGY5Yw==", "commit": {"author": {"name": "Renlin Li", "email": "renlin.li@arm.com", "date": "2013-09-20T14:59:18Z"}, "committer": {"name": "Marcus Shawcroft", "email": "mshawcroft@gcc.gnu.org", "date": "2013-09-20T14:59:18Z"}, "message": "[AArch64] Use plus_constant.\n\n2013-09-20  Renlin Li  <renlin.li@arm.com>\n\n\t* config/aarch64/aarch64.c (aarch64_expand_prologue): Use plus_constant.\n\t(aarch64_expand_epilogue): Likewise.\n\t(aarch64_legitimize_reload_address): Likewise.\n\nFrom-SVN: r202780", "tree": {"sha": "e802c2f282f8db48d00bda07089aee22df792dc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e802c2f282f8db48d00bda07089aee22df792dc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d20e48b015fe8e87e7adc33edeb8fbfa23138f9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d20e48b015fe8e87e7adc33edeb8fbfa23138f9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d20e48b015fe8e87e7adc33edeb8fbfa23138f9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d20e48b015fe8e87e7adc33edeb8fbfa23138f9c/comments", "author": null, "committer": null, "parents": [{"sha": "59bb154488e270f67308538c5bba68e478b8ad9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59bb154488e270f67308538c5bba68e478b8ad9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59bb154488e270f67308538c5bba68e478b8ad9c"}], "stats": {"total": 38, "additions": 22, "deletions": 16}, "files": [{"sha": "68a0f2eb51d094d732da8b314c586f678c800805", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d20e48b015fe8e87e7adc33edeb8fbfa23138f9c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d20e48b015fe8e87e7adc33edeb8fbfa23138f9c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d20e48b015fe8e87e7adc33edeb8fbfa23138f9c", "patch": "@@ -1,3 +1,9 @@\n+2013-09-20  Renlin Li  <renlin.li@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_expand_prologue): Use plus_constant.\n+\t(aarch64_expand_epilogue): Likewise.\n+\t(aarch64_legitimize_reload_address): Likewise.\n+\n 2013-09-20  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR middle-end/57748"}, {"sha": "c65d8451b1dcedf7bba1856db35c6c4cc7099a5b", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d20e48b015fe8e87e7adc33edeb8fbfa23138f9c/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d20e48b015fe8e87e7adc33edeb8fbfa23138f9c/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=d20e48b015fe8e87e7adc33edeb8fbfa23138f9c", "patch": "@@ -2065,9 +2065,9 @@ aarch64_expand_prologue (void)\n \t  emit_insn (gen_add2_insn (stack_pointer_rtx, op0));\n \t  aarch64_set_frame_expr (gen_rtx_SET\n \t\t\t\t  (Pmode, stack_pointer_rtx,\n-\t\t\t\t   gen_rtx_PLUS (Pmode,\n-\t\t\t\t\t\t stack_pointer_rtx,\n-\t\t\t\t\t\t GEN_INT (-frame_size))));\n+\t\t\t\t   plus_constant (Pmode,\n+\t\t\t\t\t\t  stack_pointer_rtx,\n+\t\t\t\t\t\t  -frame_size)));\n \t}\n       else if (frame_size > 0)\n \t{\n@@ -2151,9 +2151,9 @@ aarch64_expand_prologue (void)\n \t\t\t\t\t   GEN_INT (fp_offset)));\n \t  aarch64_set_frame_expr (gen_rtx_SET\n \t\t\t\t  (Pmode, hard_frame_pointer_rtx,\n-\t\t\t\t   gen_rtx_PLUS (Pmode,\n-\t\t\t\t\t\t stack_pointer_rtx,\n-\t\t\t\t\t\t GEN_INT (fp_offset))));\n+\t\t\t\t   plus_constant (Pmode,\n+\t\t\t\t\t\t  stack_pointer_rtx,\n+\t\t\t\t\t\t  fp_offset)));\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n \t  insn = emit_insn (gen_stack_tie (stack_pointer_rtx,\n \t\t\t\t\t   hard_frame_pointer_rtx));\n@@ -2349,9 +2349,9 @@ aarch64_expand_epilogue (bool for_sibcall)\n \t  emit_insn (gen_add2_insn (stack_pointer_rtx, op0));\n \t  aarch64_set_frame_expr (gen_rtx_SET\n \t\t\t\t  (Pmode, stack_pointer_rtx,\n-\t\t\t\t   gen_rtx_PLUS (Pmode,\n-\t\t\t\t\t\t stack_pointer_rtx,\n-\t\t\t\t\t\t GEN_INT (frame_size))));\n+\t\t\t\t   plus_constant (Pmode,\n+\t\t\t\t\t\t  stack_pointer_rtx,\n+\t\t\t\t\t\t  frame_size)));\n \t}\n       else if (frame_size > 0)\n \t{\n@@ -2373,10 +2373,10 @@ aarch64_expand_epilogue (bool for_sibcall)\n \t    }\n \t}\n \n-      aarch64_set_frame_expr (gen_rtx_SET (Pmode, stack_pointer_rtx,\n-\t\t\t\t\t   gen_rtx_PLUS (Pmode,\n-\t\t\t\t\t\t\t stack_pointer_rtx,\n-\t\t\t\t\t\t\t GEN_INT (offset))));\n+        aarch64_set_frame_expr (gen_rtx_SET (Pmode, stack_pointer_rtx,\n+\t\t\t\t\t     plus_constant (Pmode,\n+\t\t\t\t\t\t\t    stack_pointer_rtx,\n+\t\t\t\t\t\t\t    offset)));\n     }\n \n   emit_use (gen_rtx_REG (DImode, LR_REGNUM));\n@@ -4014,9 +4014,9 @@ aarch64_legitimize_reload_address (rtx *x_p,\n \n       /* Reload high part into base reg, leaving the low part\n \t in the mem instruction.  */\n-      x = gen_rtx_PLUS (xmode,\n-\t\t\tgen_rtx_PLUS (xmode, XEXP (x, 0), cst),\n-\t\t\tGEN_INT (low));\n+      x = plus_constant (xmode,\n+\t\t\t gen_rtx_PLUS (xmode, XEXP (x, 0), cst),\n+\t\t\t low);\n \n       push_reload (XEXP (x, 0), NULL_RTX, &XEXP (x, 0), NULL,\n \t\t   BASE_REG_CLASS, xmode, VOIDmode, 0, 0,"}]}