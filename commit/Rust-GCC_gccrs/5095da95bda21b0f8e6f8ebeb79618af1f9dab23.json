{"sha": "5095da95bda21b0f8e6f8ebeb79618af1f9dab23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA5NWRhOTViZGEyMWIwZjhlNmY4ZWJlYjc5NjE4YWYxZjlkYWIyMw==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-10-11T15:08:28Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-10-11T15:08:28Z"}, "message": "vec.h (VEC_qsort): Define.\n\ngcc/\n\t* vec.h (VEC_qsort): Define.\n\t* dbxout.c (output_used_types): Use it.\n\t* df-scan.c (df_sort_and_compress_refs): Likewise.\n\t(df_sort_and_compress_mws): Likewise.\n\t* genautomata.c (uniq_sort_alt_states): Likewise.\n\t(evaluate_equiv_classes): Likewise.\n\t(output_trans_table): Likewise.\n\t(output_state): Likewise.\n\t* gimplify.c (compare_case_labels): Likewise.\n\t* graphite-sese-to-poly.c (graphite_sort_dominated_info): Likewise.\n\t* ipa.c (build_cdtor_fns): Likewise.\n\t* lto.c (lto_wpa_write_files): Likewise.\n\t* sel-sched.c (fill_vec_av_set): Likewise.\n\t* tree-predcom.c (determine_roots_comp): Likewise.\n\t* tree-sra.c (sort_and_spliace_var_accesses): Likewise.\n\t(splice_param_accesses): Likewise.\n\t* tree-ssa-live.c (dump_enumerated_decls): Likewise.\n\t* tree-ssa-reassoc.c (undistribute_ops_list): Likewise.\n\t(reassociate_bb): Likewise.\n\t* tree-ssa-sccvn.c (sort_scc): Likewise.\n\t* tree-ssa-structalias.c (sort_fieldstack): Likewise.\n\ngcc/ada/\n\t* gcc-interface/utils2.c (gnat_build_constructor): Use VEC_qsort.\n\nFrom-SVN: r165314", "tree": {"sha": "9d05eb59338986451cac8fc5dec9e34fe0c18b48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d05eb59338986451cac8fc5dec9e34fe0c18b48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5095da95bda21b0f8e6f8ebeb79618af1f9dab23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5095da95bda21b0f8e6f8ebeb79618af1f9dab23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5095da95bda21b0f8e6f8ebeb79618af1f9dab23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5095da95bda21b0f8e6f8ebeb79618af1f9dab23/comments", "author": null, "committer": null, "parents": [{"sha": "3748f5c9d3d8f7b7c2c0c8c79b3ad605b04acaf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3748f5c9d3d8f7b7c2c0c8c79b3ad605b04acaf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3748f5c9d3d8f7b7c2c0c8c79b3ad605b04acaf3"}], "stats": {"total": 126, "additions": 58, "deletions": 68}, "files": [{"sha": "b77141937a7f705161ed7bb67dcc3f5580098dd4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5095da95bda21b0f8e6f8ebeb79618af1f9dab23/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5095da95bda21b0f8e6f8ebeb79618af1f9dab23/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5095da95bda21b0f8e6f8ebeb79618af1f9dab23", "patch": "@@ -1,3 +1,27 @@\n+2010-10-11  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* vec.h (VEC_qsort): Define.\n+\t* dbxout.c (output_used_types): Use it.\n+\t* df-scan.c (df_sort_and_compress_refs): Likewise.\n+\t(df_sort_and_compress_mws): Likewise.\n+\t* genautomata.c (uniq_sort_alt_states): Likewise.\n+\t(evaluate_equiv_classes): Likewise.\n+\t(output_trans_table): Likewise.\n+\t(output_state): Likewise.\n+\t* gimplify.c (compare_case_labels): Likewise.\n+\t* graphite-sese-to-poly.c (graphite_sort_dominated_info): Likewise.\n+\t* ipa.c (build_cdtor_fns): Likewise.\n+\t* lto.c (lto_wpa_write_files): Likewise.\n+\t* sel-sched.c (fill_vec_av_set): Likewise.\n+\t* tree-predcom.c (determine_roots_comp): Likewise.\n+\t* tree-sra.c (sort_and_spliace_var_accesses): Likewise.\n+\t(splice_param_accesses): Likewise.\n+\t* tree-ssa-live.c (dump_enumerated_decls): Likewise.\n+\t* tree-ssa-reassoc.c (undistribute_ops_list): Likewise.\n+\t(reassociate_bb): Likewise.\n+\t* tree-ssa-sccvn.c (sort_scc): Likewise.\n+\t* tree-ssa-structalias.c (sort_fieldstack): Likewise.\n+\n 2010-10-11  Ian Lance Taylor  <iant@google.com>\n \n \t* tree.h (TREE_THIS_NOTRAP): Use TREE_CHECK5."}, {"sha": "ebb7882791a97a07dba79f2b53fbcc4265d05749", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5095da95bda21b0f8e6f8ebeb79618af1f9dab23/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5095da95bda21b0f8e6f8ebeb79618af1f9dab23/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5095da95bda21b0f8e6f8ebeb79618af1f9dab23", "patch": "@@ -1,3 +1,7 @@\n+2010-10-11  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* gcc-interface/utils2.c (gnat_build_constructor): Use VEC_qsort.\n+\n 2010-10-11  Robert Dewar  <dewar@adacore.com>\n \n \t* g-htable.ads (Get_First): New procedural version for Simple_HTable"}, {"sha": "8d5bbeff7a6e82bdda6bbf4ddb3e03c3cdb508c3", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5095da95bda21b0f8e6f8ebeb79618af1f9dab23/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5095da95bda21b0f8e6f8ebeb79618af1f9dab23/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=5095da95bda21b0f8e6f8ebeb79618af1f9dab23", "patch": "@@ -1562,8 +1562,7 @@ gnat_build_constructor (tree type, VEC(constructor_elt,gc) *v)\n      by increasing bit position.  This is necessary to ensure the\n      constructor can be output as static data.  */\n   if (allconstant && TREE_CODE (type) == RECORD_TYPE && n_elmts > 1)\n-    qsort (VEC_address (constructor_elt, v), n_elmts,\n-           sizeof (constructor_elt), compare_elmt_bitpos);\n+    VEC_qsort (constructor_elt, v, compare_elmt_bitpos);\n \n   result = build_constructor (type, v);\n   TREE_CONSTANT (result) = TREE_STATIC (result) = allconstant;"}, {"sha": "2eb4f0bf9a9280f63b73dcfaebf75042906600bc", "filename": "gcc/dbxout.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5095da95bda21b0f8e6f8ebeb79618af1f9dab23/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5095da95bda21b0f8e6f8ebeb79618af1f9dab23/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=5095da95bda21b0f8e6f8ebeb79618af1f9dab23", "patch": "@@ -2505,8 +2505,7 @@ output_used_types (void)\n       htab_traverse (cfun->used_types_hash, output_used_types_helper, &types);\n \n       /* Sort by UID to prevent dependence on hash table ordering.  */\n-      qsort (VEC_address (tree, types), VEC_length (tree, types),\n-\t     sizeof (tree), output_types_sort);\n+      VEC_qsort (tree, types, output_types_sort);\n \n       FOR_EACH_VEC_ELT (tree, types, i, type)\n \tdebug_queue_symbol (type);"}, {"sha": "b2b88b5d97b21a1c04939eb03214b90ffa027b74", "filename": "gcc/df-scan.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5095da95bda21b0f8e6f8ebeb79618af1f9dab23/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5095da95bda21b0f8e6f8ebeb79618af1f9dab23/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=5095da95bda21b0f8e6f8ebeb79618af1f9dab23", "patch": "@@ -2392,8 +2392,7 @@ df_sort_and_compress_refs (VEC(df_ref,stack) **ref_vec)\n          of DF_REF_COMPARE.  */\n       if (i == count - 1)\n         return;\n-      qsort (VEC_address (df_ref, *ref_vec), count, sizeof (df_ref),\n-\t     df_ref_compare);\n+      VEC_qsort (df_ref, *ref_vec, df_ref_compare);\n     }\n \n   for (i=0; i<count-dist; i++)\n@@ -2492,8 +2491,7 @@ df_sort_and_compress_mws (VEC(df_mw_hardreg_ptr,stack) **mw_vec)\n         }\n     }\n   else\n-    qsort (VEC_address (df_mw_hardreg_ptr, *mw_vec), count,\n-\t   sizeof (struct df_mw_hardreg *), df_mw_compare);\n+    VEC_qsort (df_mw_hardreg_ptr, *mw_vec, df_mw_compare);\n \n   for (i=0; i<count-dist; i++)\n     {"}, {"sha": "afc97afd4a2d8bc1ff9a3de42111eed3e2457a62", "filename": "gcc/genautomata.c", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5095da95bda21b0f8e6f8ebeb79618af1f9dab23/gcc%2Fgenautomata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5095da95bda21b0f8e6f8ebeb79618af1f9dab23/gcc%2Fgenautomata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenautomata.c?ref=5095da95bda21b0f8e6f8ebeb79618af1f9dab23", "patch": "@@ -3252,9 +3252,7 @@ uniq_sort_alt_states (alt_state_t alt_states_list)\n        curr_alt_state = curr_alt_state->next_alt_state)\n     VEC_safe_push (alt_state_t, heap, alt_states, curr_alt_state);\n \n-  qsort (VEC_address (alt_state_t, alt_states),\n-\t VEC_length  (alt_state_t, alt_states),\n-\t sizeof (alt_state_t), alt_state_cmp);\n+  VEC_qsort (alt_state_t, alt_states, alt_state_cmp);\n \n   prev_unique_state_ind = 0;\n   for (i = 1; i < VEC_length (alt_state_t, alt_states); i++)\n@@ -6004,9 +6002,7 @@ evaluate_equiv_classes (automaton_t automaton,\n   all_achieved_states = VEC_alloc (state_t, heap, 1500);\n   pass_states (automaton, add_achieved_state);\n   pass_states (automaton, cache_presence);\n-  qsort (VEC_address (state_t, all_achieved_states),\n-\t VEC_length (state_t, all_achieved_states),\n-         sizeof (state_t), compare_states_for_equiv);\n+  VEC_qsort (state_t, all_achieved_states, compare_states_for_equiv);\n \n   odd_iteration_flag = 0;\n   new_equiv_class_num = init_equiv_class (all_achieved_states,\n@@ -7456,9 +7452,7 @@ output_trans_table (automaton_t automaton)\n      from the state (state with the maximum num is the first).  */\n   output_states_vect = 0;\n   pass_states (automaton, add_states_vect_el);\n-  qsort (VEC_address (state_t, output_states_vect),\n-\t VEC_length (state_t, output_states_vect),\n-         sizeof (state_t), compare_transition_els_num);\n+  VEC_qsort (state_t, output_states_vect, compare_transition_els_num);\n \n   for (i = 0; i < VEC_length (state_t, output_states_vect); i++)\n     {\n@@ -8944,9 +8938,7 @@ output_state (state_t state)\n   fprintf (output_description_file,\n \t   state->new_cycle_p ? \" (new cycle)\\n\" : \"\\n\");\n   add_state_reservs (state);\n-  qsort (VEC_address (reserv_sets_t, state_reservs),\n-\t VEC_length (reserv_sets_t, state_reservs),\n-         sizeof (reserv_sets_t), state_reservs_cmp);\n+  VEC_qsort (reserv_sets_t, state_reservs, state_reservs_cmp);\n   remove_state_duplicate_reservs ();\n   for (i = 0; i < VEC_length (reserv_sets_t, state_reservs); i++)\n     {"}, {"sha": "4f1e39954cd36936eb909422999f33eb5c7955d1", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5095da95bda21b0f8e6f8ebeb79618af1f9dab23/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5095da95bda21b0f8e6f8ebeb79618af1f9dab23/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=5095da95bda21b0f8e6f8ebeb79618af1f9dab23", "patch": "@@ -1476,9 +1476,7 @@ compare_case_labels (const void *p1, const void *p2)\n void\n sort_case_labels (VEC(tree,heap)* label_vec)\n {\n-  size_t len = VEC_length (tree, label_vec);\n-  qsort (VEC_address (tree, label_vec), len, sizeof (tree),\n-         compare_case_labels);\n+  VEC_qsort (tree, label_vec, compare_case_labels);\n }\n \n "}, {"sha": "77930d5c67b0a9756b3448556a7377245f063636", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5095da95bda21b0f8e6f8ebeb79618af1f9dab23/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5095da95bda21b0f8e6f8ebeb79618af1f9dab23/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=5095da95bda21b0f8e6f8ebeb79618af1f9dab23", "patch": "@@ -395,10 +395,7 @@ compare_bb_depths (const void *p1, const void *p2)\n static void\n graphite_sort_dominated_info (VEC (basic_block, heap) *dom)\n {\n-  size_t len = VEC_length (basic_block, dom);\n-\n-  qsort (VEC_address (basic_block, dom), len, sizeof (basic_block),\n-\t compare_bb_depths);\n+  VEC_qsort (basic_block, dom, compare_bb_depths);\n }\n \n /* Recursive helper function for build_scops_bbs.  */"}, {"sha": "dcf1e9ac072f16e6ccf5177433d245726868e2ca", "filename": "gcc/ipa.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5095da95bda21b0f8e6f8ebeb79618af1f9dab23/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5095da95bda21b0f8e6f8ebeb79618af1f9dab23/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=5095da95bda21b0f8e6f8ebeb79618af1f9dab23", "patch": "@@ -1557,20 +1557,14 @@ build_cdtor_fns (void)\n   if (!VEC_empty (tree, static_ctors))\n     {\n       gcc_assert (!targetm.have_ctors_dtors || in_lto_p);\n-      qsort (VEC_address (tree, static_ctors),\n-\t     VEC_length (tree, static_ctors),\n-\t     sizeof (tree),\n-\t     compare_ctor);\n+      VEC_qsort (tree, static_ctors, compare_ctor);\n       build_cdtor (/*ctor_p=*/true, static_ctors);\n     }\n \n   if (!VEC_empty (tree, static_dtors))\n     {\n       gcc_assert (!targetm.have_ctors_dtors || in_lto_p);\n-      qsort (VEC_address (tree, static_dtors),\n-\t     VEC_length (tree, static_dtors),\n-\t     sizeof (tree),\n-\t     compare_dtor);\n+      VEC_qsort (tree, static_dtors, compare_dtor);\n       build_cdtor (/*ctor_p=*/false, static_dtors);\n     }\n }"}, {"sha": "d1a2206919057398e3315d73cc2130381aef1098", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5095da95bda21b0f8e6f8ebeb79618af1f9dab23/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5095da95bda21b0f8e6f8ebeb79618af1f9dab23/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=5095da95bda21b0f8e6f8ebeb79618af1f9dab23", "patch": "@@ -1475,8 +1475,7 @@ lto_wpa_write_files (void)\n   blen = strlen (temp_filename);\n \n   n_sets = VEC_length (ltrans_partition, ltrans_partitions);\n-  qsort (VEC_address (ltrans_partition, ltrans_partitions), n_sets,\n-\t sizeof (ltrans_partition), cmp_partitions);\n+  VEC_qsort (ltrans_partition, ltrans_partitions, cmp_partitions);\n   for (i = 0; i < n_sets; i++)\n     {\n       size_t len;"}, {"sha": "12af486918a039ec693754c4f77c83d1a163be85", "filename": "gcc/sel-sched.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5095da95bda21b0f8e6f8ebeb79618af1f9dab23/gcc%2Fsel-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5095da95bda21b0f8e6f8ebeb79618af1f9dab23/gcc%2Fsel-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched.c?ref=5095da95bda21b0f8e6f8ebeb79618af1f9dab23", "patch": "@@ -3719,8 +3719,7 @@ fill_vec_av_set (av_set_t av, blist_t bnds, fence_t fence,\n     }\n \n   /* Sort the vector.  */\n-  qsort (VEC_address (expr_t, vec_av_set), VEC_length (expr_t, vec_av_set),\n-         sizeof (expr_t), sel_rank_for_schedule);\n+  VEC_qsort (expr_t, vec_av_set, sel_rank_for_schedule);\n \n   /* We record maximal priority of insns in av set for current instruction\n      group.  */\n@@ -3934,8 +3933,7 @@ fill_vec_av_set (av_set_t av, blist_t bnds, fence_t fence,\n     gcc_assert (min_need_stall == 0);\n \n   /* Sort the vector.  */\n-  qsort (VEC_address (expr_t, vec_av_set), VEC_length (expr_t, vec_av_set),\n-         sizeof (expr_t), sel_rank_for_schedule);\n+  VEC_qsort (expr_t, vec_av_set, sel_rank_for_schedule);\n \n   if (sched_verbose >= 4)\n     {"}, {"sha": "3ebc5a0352cc48134761fcd0d1ecefa1d864dcc0", "filename": "gcc/tree-predcom.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5095da95bda21b0f8e6f8ebeb79618af1f9dab23/gcc%2Ftree-predcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5095da95bda21b0f8e6f8ebeb79618af1f9dab23/gcc%2Ftree-predcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.c?ref=5095da95bda21b0f8e6f8ebeb79618af1f9dab23", "patch": "@@ -1192,8 +1192,7 @@ determine_roots_comp (struct loop *loop,\n       return;\n     }\n \n-  qsort (VEC_address (dref, comp->refs), VEC_length (dref, comp->refs),\n-\t sizeof (dref), order_drefs);\n+  VEC_qsort (dref, comp->refs, order_drefs);\n \n   FOR_EACH_VEC_ELT (dref, comp->refs, i, a)\n     {"}, {"sha": "3328261b9e47c583674a40e89ddcba12c54c0b54", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5095da95bda21b0f8e6f8ebeb79618af1f9dab23/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5095da95bda21b0f8e6f8ebeb79618af1f9dab23/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=5095da95bda21b0f8e6f8ebeb79618af1f9dab23", "patch": "@@ -1580,8 +1580,7 @@ sort_and_splice_var_accesses (tree var)\n   access_count = VEC_length (access_p, access_vec);\n \n   /* Sort by <OFFSET, SIZE>.  */\n-  qsort (VEC_address (access_p, access_vec), access_count, sizeof (access_p),\n-\t compare_access_positions);\n+  VEC_qsort (access_p, access_vec, compare_access_positions);\n \n   i = 0;\n   while (i < access_count)\n@@ -3524,8 +3523,7 @@ splice_param_accesses (tree parm, bool *ro_grp)\n     return &no_accesses_representant;\n   access_count = VEC_length (access_p, access_vec);\n \n-  qsort (VEC_address (access_p, access_vec), access_count, sizeof (access_p),\n-\t compare_access_positions);\n+  VEC_qsort (access_p, access_vec, compare_access_positions);\n \n   i = 0;\n   total_size = 0;"}, {"sha": "232df844a49c1a527680cb9f26b7792f9826c2c5", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5095da95bda21b0f8e6f8ebeb79618af1f9dab23/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5095da95bda21b0f8e6f8ebeb79618af1f9dab23/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=5095da95bda21b0f8e6f8ebeb79618af1f9dab23", "patch": "@@ -1256,9 +1256,7 @@ dump_enumerated_decls (FILE *file, int flags)\n \t  walk_gimple_stmt (&gsi, NULL, dump_enumerated_decls_push, &wi);\n     }\n   decl_list = (VEC (numbered_tree, heap) *) wi.info;\n-  qsort (VEC_address (numbered_tree, decl_list),\n-\t VEC_length (numbered_tree, decl_list),\n-\t sizeof (numbered_tree), compare_decls_by_uid);\n+  VEC_qsort (numbered_tree, decl_list, compare_decls_by_uid);\n   if (VEC_length (numbered_tree, decl_list))\n     {\n       unsigned ix;"}, {"sha": "b4cadfedae5b0628dbaa320fe41e2dd907154601", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5095da95bda21b0f8e6f8ebeb79618af1f9dab23/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5095da95bda21b0f8e6f8ebeb79618af1f9dab23/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=5095da95bda21b0f8e6f8ebeb79618af1f9dab23", "patch": "@@ -1093,8 +1093,7 @@ undistribute_ops_list (enum tree_code opcode,\n   htab_delete (ctable);\n \n   /* Sort the counting table.  */\n-  qsort (VEC_address (oecount, cvec), VEC_length (oecount, cvec),\n-\t sizeof (oecount), oecount_cmp);\n+  VEC_qsort (oecount, cvec, oecount_cmp);\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n@@ -2093,18 +2092,12 @@ reassociate_bb (basic_block bb)\n \n \t      gimple_set_visited (stmt, true);\n \t      linearize_expr_tree (&ops, stmt, true, true);\n-\t      qsort (VEC_address (operand_entry_t, ops),\n-\t\t     VEC_length (operand_entry_t, ops),\n-\t\t     sizeof (operand_entry_t),\n-\t\t     sort_by_operand_rank);\n+\t      VEC_qsort (operand_entry_t, ops, sort_by_operand_rank);\n \t      optimize_ops_list (rhs_code, &ops);\n \t      if (undistribute_ops_list (rhs_code, &ops,\n \t\t\t\t\t loop_containing_stmt (stmt)))\n \t\t{\n-\t\t  qsort (VEC_address (operand_entry_t, ops),\n-\t\t\t VEC_length (operand_entry_t, ops),\n-\t\t\t sizeof (operand_entry_t),\n-\t\t\t sort_by_operand_rank);\n+\t\t  VEC_qsort (operand_entry_t, ops, sort_by_operand_rank);\n \t\t  optimize_ops_list (rhs_code, &ops);\n \t\t}\n "}, {"sha": "557c393037ad6f54522eb4099a161d1d6b34c2b4", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5095da95bda21b0f8e6f8ebeb79618af1f9dab23/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5095da95bda21b0f8e6f8ebeb79618af1f9dab23/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=5095da95bda21b0f8e6f8ebeb79618af1f9dab23", "patch": "@@ -3044,10 +3044,7 @@ compare_ops (const void *pa, const void *pb)\n static void\n sort_scc (VEC (tree, heap) *scc)\n {\n-  qsort (VEC_address (tree, scc),\n-\t VEC_length (tree, scc),\n-\t sizeof (tree),\n-\t compare_ops);\n+  VEC_qsort (tree, scc, compare_ops);\n }\n \n /* Insert the no longer used nary ONARY to the hash INFO.  */"}, {"sha": "83cc95352f33e517addd7d31c95ca0ae5698da69", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5095da95bda21b0f8e6f8ebeb79618af1f9dab23/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5095da95bda21b0f8e6f8ebeb79618af1f9dab23/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=5095da95bda21b0f8e6f8ebeb79618af1f9dab23", "patch": "@@ -4972,10 +4972,7 @@ fieldoff_compare (const void *pa, const void *pb)\n static void\n sort_fieldstack (VEC(fieldoff_s,heap) *fieldstack)\n {\n-  qsort (VEC_address (fieldoff_s, fieldstack),\n-\t VEC_length (fieldoff_s, fieldstack),\n-\t sizeof (fieldoff_s),\n-\t fieldoff_compare);\n+  VEC_qsort (fieldoff_s, fieldstack, fieldoff_compare);\n }\n \n /* Return true if V is a tree that we can have subvars for."}, {"sha": "bc55592a2be6dbde1c63dd0cb87f3cbe7210c33d", "filename": "gcc/vec.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5095da95bda21b0f8e6f8ebeb79618af1f9dab23/gcc%2Fvec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5095da95bda21b0f8e6f8ebeb79618af1f9dab23/gcc%2Fvec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.h?ref=5095da95bda21b0f8e6f8ebeb79618af1f9dab23", "patch": "@@ -442,6 +442,12 @@ along with GCC; see the file COPYING3.  If not see\n \n #define VEC_address(T,V)\t\t(VEC_OP(T,base,address)(VEC_BASE(V)))\n \n+/* Conveniently sort the contents of the vector with qsort.\n+   void VEC_qsort (VEC(T) *v, int (*cmp_func)(const void *, const void *))  */\n+\n+#define VEC_qsort(T,V,CMP) qsort(VEC_address (T,V), VEC_length(T,V),\t\\\n+\t\t\t\t sizeof (T), CMP)\n+\n /* Find the first index in the vector not less than the object.\n    unsigned VEC_T_lower_bound (VEC(T) *v, const T val,\n                                bool (*lessthan) (const T, const T)); // Integer"}]}