{"sha": "d1f05f931e1689f7a0811acc39379831d40dcea9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFmMDVmOTMxZTE2ODlmN2EwODExYWNjMzkzNzk4MzFkNDBkY2VhOQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-09-16T15:21:41Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-09-16T15:21:41Z"}, "message": "class.c (copy_virtuals): Remove.\n\n\t* class.c (copy_virtuals): Remove.\n\t(build_primary_vtable): Use copy_list directly.\n\t(build_secondary_vtable): Likewise.\n\t(update_vtable_entry_for_fn): Clear BV_CALL_INDEX here.\n\t(create_vtable_ptr): Likewise.\n\nFrom-SVN: r87604", "tree": {"sha": "93415cafb5004bb88bc7ce318f4d4c5f76b6ca65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93415cafb5004bb88bc7ce318f4d4c5f76b6ca65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1f05f931e1689f7a0811acc39379831d40dcea9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1f05f931e1689f7a0811acc39379831d40dcea9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1f05f931e1689f7a0811acc39379831d40dcea9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1f05f931e1689f7a0811acc39379831d40dcea9/comments", "author": null, "committer": null, "parents": [{"sha": "4b30ad7eef8f5a1b33130a999d0f62bd9de58056", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b30ad7eef8f5a1b33130a999d0f62bd9de58056", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b30ad7eef8f5a1b33130a999d0f62bd9de58056"}], "stats": {"total": 32, "additions": 13, "deletions": 19}, "files": [{"sha": "6c46adc27891fea878514d7a08b5a3b606617c4b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f05f931e1689f7a0811acc39379831d40dcea9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f05f931e1689f7a0811acc39379831d40dcea9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d1f05f931e1689f7a0811acc39379831d40dcea9", "patch": "@@ -1,3 +1,11 @@\n+2004-09-16  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* class.c (copy_virtuals): Remove.\n+\t(build_primary_vtable): Use copy_list directly.\n+\t(build_secondary_vtable): Likewise.\n+\t(update_vtable_entry_for_fn): Clear BV_CALL_INDEX here.\n+\t(create_vtable_ptr): Likewise.\n+\n 2004-09-16  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* search.c: Follow spelling conventions."}, {"sha": "c16b872a9d83c6975864e81bb3181481ef1c9736", "filename": "gcc/cp/class.c", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f05f931e1689f7a0811acc39379831d40dcea9/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f05f931e1689f7a0811acc39379831d40dcea9/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=d1f05f931e1689f7a0811acc39379831d40dcea9", "patch": "@@ -183,7 +183,6 @@ static void build_vcall_and_vbase_vtbl_entries (tree,\n static void clone_constructors_and_destructors (tree);\n static tree build_clone (tree, tree);\n static void update_vtable_entry_for_fn (tree, tree, tree, tree *, unsigned);\n-static tree copy_virtuals (tree);\n static void build_ctor_vtbl_group (tree, tree);\n static void build_vtt (tree);\n static tree binfo_ctor_vtable (tree);\n@@ -709,22 +708,6 @@ get_vtable_decl (tree type, int complete)\n   return decl;\n }\n \n-/* Returns a copy of the BINFO_VIRTUALS list in BINFO.  The\n-   BV_VCALL_INDEX for each entry is cleared.  */\n-\n-static tree\n-copy_virtuals (tree binfo)\n-{\n-  tree copies;\n-  tree t;\n-\n-  copies = copy_list (BINFO_VIRTUALS (binfo));\n-  for (t = copies; t; t = TREE_CHAIN (t))\n-    BV_VCALL_INDEX (t) = NULL_TREE;\n-\n-  return copies;\n-}\n-\n /* Build the primary virtual function table for TYPE.  If BINFO is\n    non-NULL, build the vtable starting with the initial approximation\n    that it is the same as the one which is the head of the association\n@@ -746,7 +729,7 @@ build_primary_vtable (tree binfo, tree type)\n \t   no need to do it again.  */\n \treturn 0;\n       \n-      virtuals = copy_virtuals (binfo);\n+      virtuals = copy_list (BINFO_VIRTUALS (binfo));\n       TREE_TYPE (decl) = TREE_TYPE (get_vtbl_decl_for_binfo (binfo));\n       DECL_SIZE (decl) = TYPE_SIZE (TREE_TYPE (decl));\n       DECL_SIZE_UNIT (decl) = TYPE_SIZE_UNIT (TREE_TYPE (decl));\n@@ -797,7 +780,7 @@ build_secondary_vtable (tree binfo)\n   SET_BINFO_NEW_VTABLE_MARKED (binfo);\n   \n   /* Make fresh virtual list, so we can smash it later.  */\n-  BINFO_VIRTUALS (binfo) = copy_virtuals (binfo);\n+  BINFO_VIRTUALS (binfo) = copy_list (BINFO_VIRTUALS (binfo));\n \n   /* Secondary vtables are laid out as part of the same structure as\n      the primary vtable.  */\n@@ -2237,6 +2220,8 @@ update_vtable_entry_for_fn (tree t, tree binfo, tree fn, tree* virtuals,\n   if (virtual_base)\n     BV_VCALL_INDEX (*virtuals) \n       = get_vcall_index (overrider_target, BINFO_TYPE (virtual_base));\n+  else\n+    BV_VCALL_INDEX (*virtuals) = NULL_TREE;\n }\n \n /* Called from modify_all_vtables via dfs_walk.  */\n@@ -4199,6 +4184,7 @@ create_vtable_ptr (tree t, tree* virtuals_p)\n \t\n \tBV_FN (new_virtual) = fn;\n \tBV_DELTA (new_virtual) = integer_zero_node;\n+\tBV_VCALL_INDEX (new_virtual) = NULL_TREE;\n \n \tTREE_CHAIN (new_virtual) = *virtuals_p;\n \t*virtuals_p = new_virtual;"}]}