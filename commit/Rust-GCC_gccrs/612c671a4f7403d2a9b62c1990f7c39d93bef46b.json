{"sha": "612c671a4f7403d2a9b62c1990f7c39d93bef46b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjEyYzY3MWE0Zjc0MDNkMmE5YjYyYzE5OTBmN2MzOWQ5M2JlZjQ2Yg==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "1999-09-29T01:10:44Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "1999-09-29T01:10:44Z"}, "message": "Implement function template instantiation pretty printing.\n\n1999-09-28  Gabriel Dos Reis  <gdr@codesourcery.com>\n\n\tImplement function template instantiation pretty printing.\n\n        * pt.c (most_general_template): Adjust declaration.\n\n        * cp-tree.h: (most_general_template): Declare.\n\n        * error.c (dump_template_value): Rename to ...\n        (dump_template_argument): This.\n        (dump_template_argument_list): New function.\n        (dump_type): Use it.\n        (dump_template_parameter): New function.\n        (dump_template_decl): Use it.\n        (dump_template_bindings): New function.\n        (dump_function_decl): Use it. Pretty print function template\n        instantiations.\n\nFrom-SVN: r29702", "tree": {"sha": "7fb8a184ebdab14b778d32c37cd6d95f10506642", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fb8a184ebdab14b778d32c37cd6d95f10506642"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/612c671a4f7403d2a9b62c1990f7c39d93bef46b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/612c671a4f7403d2a9b62c1990f7c39d93bef46b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/612c671a4f7403d2a9b62c1990f7c39d93bef46b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/612c671a4f7403d2a9b62c1990f7c39d93bef46b/comments", "author": null, "committer": null, "parents": [{"sha": "224a6bca72f55814fda63e6ffdd051611ae6c9d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/224a6bca72f55814fda63e6ffdd051611ae6c9d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/224a6bca72f55814fda63e6ffdd051611ae6c9d4"}], "stats": {"total": 213, "additions": 159, "deletions": 54}, "files": [{"sha": "fd957bf4b65e5deb8c61836c223fc1c1a5b42920", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/612c671a4f7403d2a9b62c1990f7c39d93bef46b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/612c671a4f7403d2a9b62c1990f7c39d93bef46b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=612c671a4f7403d2a9b62c1990f7c39d93bef46b", "patch": "@@ -1,3 +1,19 @@\n+1999-09-28  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+        * pt.c (most_general_template): Adjust declaration.\n+\n+        * cp-tree.h: (most_general_template): Declare.\n+\n+        * error.c (dump_template_value): Rename to ...\n+        (dump_template_argument): This.\n+        (dump_template_argument_list): New function.\n+        (dump_type): Use it.\n+        (dump_template_parameter): New function.\n+        (dump_template_decl): Use it.\n+        (dump_template_bindings): New function.\n+        (dump_function_decl): Use it. Pretty print function template\n+        instantiations.\n+\n 1999-09-28  Nathan Sidwell  <nathan@acm.org>\n \n \t* decl.c (grokdeclarator): Distinguish parameter context for"}, {"sha": "3627c53a06ebdb016e8fefd143c92e0a331d1093", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/612c671a4f7403d2a9b62c1990f7c39d93bef46b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/612c671a4f7403d2a9b62c1990f7c39d93bef46b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=612c671a4f7403d2a9b62c1990f7c39d93bef46b", "patch": "@@ -3644,6 +3644,7 @@ extern tree most_specialized_instantiation      PROTO((tree, tree));\n extern void print_candidates                    PROTO((tree));\n extern int instantiate_pending_templates        PROTO((void));\n extern tree tsubst_default_argument             PROTO((tree, tree, tree));\n+extern tree most_general_template\t\tPROTO((tree));\n \n extern int processing_template_parmlist;\n "}, {"sha": "706c2e64160c22293cff52e808a0855dfc6ee735", "filename": "gcc/cp/error.c", "status": "modified", "additions": 141, "deletions": 52, "changes": 193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/612c671a4f7403d2a9b62c1990f7c39d93bef46b/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/612c671a4f7403d2a9b62c1990f7c39d93bef46b/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=612c671a4f7403d2a9b62c1990f7c39d93bef46b", "patch": "@@ -89,7 +89,10 @@ static void dump_parameters PROTO((tree, enum tree_string_flags));\n static void dump_exception_spec PROTO((tree, enum tree_string_flags));\n static const char *aggr_variety PROTO((tree));\n static tree ident_fndecl PROTO((tree));\n-static void dump_template_value PROTO((tree, enum tree_string_flags));\n+static void dump_template_argument PROTO((tree, enum tree_string_flags));\n+static void dump_template_argument_list PROTO((tree, enum tree_string_flags));\n+static void dump_template_parameter PROTO((tree, enum tree_string_flags));\n+static void dump_template_bindings PROTO((tree, tree, enum tree_string_flags));\n static void dump_scope PROTO((tree, enum tree_string_flags));\n static void dump_template_parms PROTO((tree, int, enum tree_string_flags));\n \n@@ -211,21 +214,120 @@ dump_qualifiers (t, p)\n    value.  */\n static char digit_buffer[128];\n \n-/* Dump a template parameter or template argument VALUE under\n-   control of FLAGS. */\n+/* Dump the template ARGument under control of FLAGS.  */\n \n static void\n-dump_template_value (value, flags)\n-     tree value;\n+dump_template_argument (arg, flags)\n+     tree arg;\n      enum tree_string_flags flags;\n {\n-  if (TREE_CODE_CLASS (TREE_CODE (value)) == 't'\n-      || TREE_CODE (value) == TEMPLATE_DECL)\n-    dump_type (value, flags & ~TS_AGGR_TAGS);\n+  if (TREE_CODE_CLASS (TREE_CODE (arg)) == 't'\n+      || TREE_CODE (arg) == TEMPLATE_DECL)\n+    dump_type (arg, flags & ~TS_AGGR_TAGS);\n   else\n-    dump_expr (value, (flags | TS_EXPR_PARENS) & ~TS_AGGR_TAGS);\n+    dump_expr (arg, (flags | TS_EXPR_PARENS) & ~TS_AGGR_TAGS);\n }\n \n+/* Dump a template-argument-list ARGS (always a TREE_VEC) under control\n+   of FLAGS.  */\n+\n+static void\n+dump_template_argument_list (args, flags)\n+     tree args;\n+     enum tree_string_flags flags;\n+{\n+  int n = TREE_VEC_LENGTH (args);\n+  int need_comma = 0;\n+  int i;\n+\n+  for (i = 0; i< n; ++i)\n+    {\n+      if (need_comma)\n+        OB_PUTS (\", \");\n+      dump_template_argument (TREE_VEC_ELT (args, i), flags);\n+      need_comma = 1;\n+    }\n+}\n+\n+/* Dump a template parameter PARM (a TREE_LIST) under control of FLAGS.  */\n+\n+static void\n+dump_template_parameter (parm, flags)\n+     tree parm;\n+     enum tree_string_flags flags;\n+{\n+  tree p = TREE_VALUE (parm);\n+  tree a = TREE_PURPOSE (parm);\n+\n+  if (TREE_CODE (p) == TYPE_DECL)\n+    {\n+      if (flags & TS_DECL_TYPE)\n+        {\n+          OB_PUTS (\"class\");\n+          if (DECL_NAME (p))\n+            {\n+              OB_PUTC (' ');\n+              OB_PUTID (DECL_NAME (p));\n+            }\n+        }\n+      else if (DECL_NAME (p))\n+        OB_PUTID (DECL_NAME (p));\n+      else\n+        OB_PUTS (\"{template default argument error}\");\n+    }\n+  else\n+    dump_decl (p, flags | TS_DECL_TYPE);\n+\n+  if ((flags & TS_PARM_DEFAULTS) && a != NULL_TREE)\n+    {\n+      OB_PUTS (\" = \");\n+      if (TREE_CODE (a) == TYPE_DECL || TREE_CODE (a) == TEMPLATE_DECL)\n+        dump_type (a, flags & ~TS_CHASE_TYPEDEFS);\n+      else\n+        dump_expr (a, flags | TS_EXPR_PARENS);\n+    }\n+}\n+\n+/* Dump, under control of FLAGS, a template-parameter-list binding.\n+   PARMS is a TREE_LIST of TREE_VEC of TREE_LIST and ARGS is a\n+   TREE_VEC.  */\n+\n+static void\n+dump_template_bindings (parms, args, flags)\n+     tree parms, args;\n+     enum tree_string_flags flags;\n+{\n+  int arg_idx = 0;\n+  int need_comma = 0;\n+\n+  while (parms)\n+    {\n+      tree p = TREE_VALUE (parms);\n+      int i;\n+\n+      for (i = 0; i < TREE_VEC_LENGTH (p); ++i)\n+        {\n+          tree arg = TREE_VEC_ELT (args, arg_idx);\n+\n+          if (need_comma)\n+            OB_PUTS (\", \");\n+          dump_template_parameter (TREE_VEC_ELT (p, i), TS_PLAIN);\n+          OB_PUTS (\" = \");\n+          if (arg)\n+            dump_template_argument (arg, TS_PLAIN);\n+          else\n+            OB_PUTS (\"{missing}\");\n+          \n+          ++arg_idx;\n+          need_comma = 1;\n+        }\n+\n+      parms = TREE_CHAIN (parms);\n+    }\n+}\n+\n+\n+\n /* Dump into the obstack a human-readable equivalent of TYPE.  FLAGS\n    controls the format.  */\n \n@@ -315,21 +417,14 @@ dump_type (t, flags)\n \t  if (TYPE_IDENTIFIER (t))\n \t    OB_PUTID (TYPE_IDENTIFIER (t));\n \t  else\n-\t    OB_PUTS (\"{anonymous template template parm}\");\n+\t    OB_PUTS (\"{anonymous template template parameter}\");\n \t}\n       else\n \t{\n-\t  int i;\n \t  tree args = TYPE_TI_ARGS (t);\n \t  OB_PUTID (TYPE_IDENTIFIER (t));\n \t  OB_PUTC ('<');\n-\t  for (i = 0; i < TREE_VEC_LENGTH (args); i++)\n-\t    {\n-\t      tree arg = TREE_VEC_ELT (args, i);\n-\t      if (i)\n-\t        OB_PUTS (\", \");\n-\t      dump_template_value (arg, flags);\n-\t    }\n+          dump_template_argument_list (args, flags);\n \t  OB_END_TEMPLATE_ID ();\n \t}\n       break;\n@@ -339,7 +434,7 @@ dump_type (t, flags)\n       if (TYPE_IDENTIFIER (t))\n \tOB_PUTID (TYPE_IDENTIFIER (t));\n       else\n-\tOB_PUTS (\"{anonymous template type parm}\");\n+\tOB_PUTS (\"{anonymous template type parameter}\");\n       break;\n \n       /* This is not always necessary for pointers and such, but doing this\n@@ -375,7 +470,7 @@ dump_type (t, flags)\n       /* Fall through to error. */\n \n     case ERROR_MARK:\n-      OB_PUTS (\"{typeerror}\");\n+      OB_PUTS (\"{type error}\");\n       break;\n     }\n }\n@@ -742,7 +837,7 @@ dump_simple_decl (t, type, flags)\n   if (DECL_NAME (t))\n     dump_decl (DECL_NAME (t), flags);\n   else\n-    OB_PUTS (\"{anon}\");\n+    OB_PUTS (\"{anonymous}\");\n   if (flags & TS_DECL_TYPE)\n     dump_type_suffix (type, flags);\n }\n@@ -802,7 +897,7 @@ dump_decl (t, flags)\n     case NAMESPACE_DECL:\n       dump_scope (CP_DECL_CONTEXT (t), flags);\n       if (DECL_NAME (t) == anonymous_namespace_name)\n-\tOB_PUTS (\"{anonymous}\");\n+\tOB_PUTS (\"{unnamed}\");\n       else\n \tOB_PUTID (DECL_NAME (t));\n       break;\n@@ -892,7 +987,7 @@ dump_decl (t, flags)\n \tOB_PUTC ('<');\n \tfor (args = TREE_OPERAND (t, 1); args; args = TREE_CHAIN (args))\n \t  {\n-\t    dump_template_value (TREE_VALUE (args), flags);\n+\t    dump_template_argument (TREE_VALUE (args), flags);\n \t    if (TREE_CHAIN (args))\n \t      OB_PUTS (\", \");\n \t  }\n@@ -934,7 +1029,7 @@ dump_decl (t, flags)\n       /* Fallthrough to error.  */\n \n     case ERROR_MARK:\n-      OB_PUTS (\"{declerror}\");\n+      OB_PUTS (\"{declaration error}\");\n       break;\n     }\n }\n@@ -962,33 +1057,9 @@ dump_template_decl (t, flags)\n           OB_PUTS (\"template <\");\n           for (i = 0; i < len; i++)\n             {\n-\t      tree arg = TREE_VEC_ELT (TREE_VALUE (args), i);\n-\t      tree defval = TREE_PURPOSE (arg);\n-\t      arg = TREE_VALUE (arg);\n               if (i)\n                 OB_PUTS (\", \");\n-\t      if (TREE_CODE (arg) == TYPE_DECL)\n-\t        {\n-\t          if (DECL_NAME (arg))\n-\t            {\n-\t\t      OB_PUTS (\"class \");\n-\t\t      OB_PUTID (DECL_NAME (arg));\n-\t            }\n-\t          else\n-\t            OB_PUTS (\"class\");\n-\t        }\n-\t      else\n-\t        dump_decl (arg, flags | TS_DECL_TYPE);\n-\t      \n-\t      if (defval)\n-\t        {\n-\t          OB_PUTS (\" = \");\n-\t          if (TREE_CODE (arg) == TYPE_DECL\n-\t\t      || TREE_CODE (arg) == TEMPLATE_DECL)\n-\t            dump_type (defval, flags);\n-\t          else\n-\t            dump_expr (defval, flags | TS_EXPR_PARENS);\n-\t        }\n+              dump_template_parameter (TREE_VEC_ELT (args, i), flags);\n             }\n           OB_END_TEMPLATE_ID ();\n           OB_PUTC (' ');\n@@ -1034,11 +1105,21 @@ dump_function_decl (t, flags)\n   tree fntype;\n   tree parmtypes;\n   tree cname = NULL_TREE;\n+  tree template_args = NULL_TREE;\n+  tree template_parms = NULL_TREE;\n   int show_return = !(flags & TS_FUNC_NORETURN) && (flags & TS_DECL_TYPE);\n \n   if (TREE_CODE (t) == TEMPLATE_DECL)\n     t = DECL_TEMPLATE_RESULT (t);\n \n+  /* Pretty print template instantiations only.  */\n+  if (DECL_USE_TEMPLATE (t) == 1 || DECL_USE_TEMPLATE (t) == 3)\n+    {\n+      template_args = DECL_TI_ARGS (t);\n+      t = most_general_template (t);\n+      template_parms = DECL_TEMPLATE_PARMS (t);\n+    }\n+\n   fntype = TREE_TYPE (t);\n   parmtypes = TYPE_ARG_TYPES (fntype);\n \n@@ -1098,6 +1179,14 @@ dump_function_decl (t, flags)\n   \n   if (flags & TS_FUNC_THROW)\n     dump_exception_spec (TYPE_RAISES_EXCEPTIONS (fntype), flags);\n+\n+  /* If T is a template instantiation, dump the parameter binding.  */\n+  if (template_parms != NULL_TREE && template_args != NULL_TREE)\n+    {\n+      OB_PUTS (\" [with \");\n+      dump_template_bindings (template_parms, template_args, flags);\n+      OB_PUTC (']');\n+    }\n }\n \n /* Print a parameter list. If this is for a member function, the\n@@ -1255,9 +1344,9 @@ dump_template_parms (info, primary, flags)\n             OB_PUTS (\", \");\n               \n           if (!arg)\n-            OB_PUTS (\"{tplparmerror}\");\n+            OB_PUTS (\"{template parameter error}\");\n           else\n-            dump_template_value (arg, flags);\n+            dump_template_argument (arg, flags);\n           need_comma = 1;\n         }\n     }\n@@ -1956,7 +2045,7 @@ dump_expr (t, flags)\n \n       /* fall through to ERROR_MARK...  */\n     case ERROR_MARK:\n-      OB_PUTCP (\"{exprerror}\");\n+      OB_PUTCP (\"{expression error}\");\n       break;\n     }\n }"}, {"sha": "15ec4fd23b4b9c6a2e826dd820521e1a6e8c1638", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/612c671a4f7403d2a9b62c1990f7c39d93bef46b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/612c671a4f7403d2a9b62c1990f7c39d93bef46b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=612c671a4f7403d2a9b62c1990f7c39d93bef46b", "patch": "@@ -136,7 +136,6 @@ static tree tsubst_template_parms PROTO((tree, tree, int));\n static void regenerate_decl_from_template PROTO((tree, tree));\n static tree most_specialized PROTO((tree, tree, tree));\n static tree most_specialized_class PROTO((tree, tree));\n-static tree most_general_template PROTO((tree));\n static void set_mangled_name_for_template_decl PROTO((tree));\n static int template_class_depth_real PROTO((tree, int));\n static tree tsubst_aggr_type PROTO((tree, tree, int, tree, int));\n@@ -9088,7 +9087,7 @@ most_specialized (fns, decl, explicit_args)\n    if TMPL is `template <class U> void S<int*>::f(U)' this will return\n    `template <class T> template <class U> S<T*>::f(U)'.  */\n \n-static tree\n+tree\n most_general_template (decl)\n      tree decl;\n {"}]}