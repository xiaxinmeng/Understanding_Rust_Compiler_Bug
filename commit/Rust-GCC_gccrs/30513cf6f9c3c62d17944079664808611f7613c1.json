{"sha": "30513cf6f9c3c62d17944079664808611f7613c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA1MTNjZjZmOWMzYzYyZDE3OTQ0MDc5NjY0ODA4NjExZjc2MTNjMQ==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2004-12-02T14:05:50Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2004-12-02T14:05:50Z"}, "message": "varasm.c (decode_reg_name): Revert change to check for zero length strings.\n\n2004-12-02  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        * varasm.c (decode_reg_name): Revert change to check for zero\n        length strings.\n        (make_decl_rtl): Make sure that we call decode_reg_name only\n        when needed.\n\nFrom-SVN: r91638", "tree": {"sha": "eb0b4daf67ef3e3b5188988294375dc441f7648e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb0b4daf67ef3e3b5188988294375dc441f7648e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30513cf6f9c3c62d17944079664808611f7613c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30513cf6f9c3c62d17944079664808611f7613c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30513cf6f9c3c62d17944079664808611f7613c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30513cf6f9c3c62d17944079664808611f7613c1/comments", "author": null, "committer": null, "parents": [{"sha": "bfe5acd6af822f4e8e668fe767b68b6704ea5d2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfe5acd6af822f4e8e668fe767b68b6704ea5d2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfe5acd6af822f4e8e668fe767b68b6704ea5d2b"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "cd605116ec42d428876e50c14de854562fc57dd6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30513cf6f9c3c62d17944079664808611f7613c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30513cf6f9c3c62d17944079664808611f7613c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30513cf6f9c3c62d17944079664808611f7613c1", "patch": "@@ -1,3 +1,10 @@\n+2004-12-02  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\t* varasm.c (decode_reg_name): Revert change to check for zero\n+\tlength strings.\n+\t(make_decl_rtl): Make sure that we call decode_reg_name only\n+\twhen needed.\n+\n 2004-12-02  Dorit Naishlos  <dorit@il.ibm.com>\n \n \tPR tree-opt/18716"}, {"sha": "d270701a83bb28d5b44ac921c680b36102d07e88", "filename": "gcc/varasm.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30513cf6f9c3c62d17944079664808611f7613c1/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30513cf6f9c3c62d17944079664808611f7613c1/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=30513cf6f9c3c62d17944079664808611f7613c1", "patch": "@@ -791,7 +791,7 @@ set_user_assembler_name (tree decl, const char *name)\n int\n decode_reg_name (const char *asmspec)\n {\n-  if (asmspec != 0 && strlen (asmspec) != 0)\n+  if (asmspec != 0)\n     {\n       int i;\n \n@@ -901,10 +901,10 @@ make_decl_rtl (tree decl)\n \n   name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n \n-  reg_number = decode_reg_name (name);\n \n   if (TREE_CODE (decl) != FUNCTION_DECL && DECL_REGISTER (decl))\n     {\n+      reg_number = decode_reg_name (name);\n       /* First detect errors in declaring global registers.  */\n       if (reg_number == -1)\n \terror (\"%Jregister name not specified for %qD\", decl, decl);\n@@ -955,12 +955,19 @@ make_decl_rtl (tree decl)\n \t  return;\n \t}\n     }\n-\n   /* Now handle ordinary static variables and functions (in memory).\n      Also handle vars declared register invalidly.  */\n-\n-  if (name[0] == '*' && (reg_number >= 0 || reg_number == -3))\n-    error (\"%Jregister name given for non-register variable %qD\", decl, decl);\n+  else if (name[0] == '*')\n+  {\n+#ifdef REGISTER_PREFIX\n+    if (strlen (REGISTER_PREFIX) != 0)\n+      {\n+\treg_number = decode_reg_name (name)\n+\tif (reg_number >= 0 || reg_number == -3)\n+\t  error (\"%Jregister name given for non-register variable %qD\", decl, decl);\n+      }\n+#endif\n+  }\n \n   /* Specifying a section attribute on a variable forces it into a\n      non-.bss section, and thus it cannot be common.  */"}]}