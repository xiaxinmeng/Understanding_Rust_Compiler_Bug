{"sha": "108fdd6d848eb083021de4a43f3e682fa7babbf3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA4ZmRkNmQ4NDhlYjA4MzAyMWRlNGE0M2YzZTY4MmZhN2JhYmJmMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-01-23T22:29:17Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-01-23T22:29:17Z"}, "message": "re PR tree-optimization/79088 (wrong code at -O2 on x86_64-linux-gnu)\n\n2017-01-23  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/79088\n\tPR tree-optimization/79188\n\t* tree-ssa-threadupdate.c (mark_threaded_blocks): Move code\n\tresetting loop bounds after last path deletion.  Reset loop\n\tbounds of the target loop, make code match the comments.\n\t* tree-ssa-threadbackwards.c (pass_early_thread_jumps::execute):\n\tMake sure loops need no fixups.\n\n\t* gcc.dg/torture/pr79088.c: New testcase.\n\t* gcc.dg/torture/pr79188.c: Likewise.\n\nFrom-SVN: r244837", "tree": {"sha": "abeeed22e3f2d4c6218cc99541dddd430b990a67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abeeed22e3f2d4c6218cc99541dddd430b990a67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/108fdd6d848eb083021de4a43f3e682fa7babbf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/108fdd6d848eb083021de4a43f3e682fa7babbf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/108fdd6d848eb083021de4a43f3e682fa7babbf3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/108fdd6d848eb083021de4a43f3e682fa7babbf3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "01f26e0e1f69a8462e20a44eb9f15ae9c1b541fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01f26e0e1f69a8462e20a44eb9f15ae9c1b541fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01f26e0e1f69a8462e20a44eb9f15ae9c1b541fe"}], "stats": {"total": 164, "additions": 128, "deletions": 36}, "files": [{"sha": "8df91c72f4d3c54b52864a6a75f0385a327362fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/108fdd6d848eb083021de4a43f3e682fa7babbf3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/108fdd6d848eb083021de4a43f3e682fa7babbf3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=108fdd6d848eb083021de4a43f3e682fa7babbf3", "patch": "@@ -1,3 +1,13 @@\n+2017-01-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/79088\n+\tPR tree-optimization/79188\n+\t* tree-ssa-threadupdate.c (mark_threaded_blocks): Move code\n+\tresetting loop bounds after last path deletion.  Reset loop\n+\tbounds of the target loop, make code match the comments.\n+\t* tree-ssa-threadbackwards.c (pass_early_thread_jumps::execute):\n+\tMake sure loops need no fixups.\n+\n 2017-01-23  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \t* config/rs6000/rs6000-builtin.def (VSIEDPF): Add scalar insert"}, {"sha": "c05ea54fe748ed6a8833e18910e8bf4b3adc151a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/108fdd6d848eb083021de4a43f3e682fa7babbf3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/108fdd6d848eb083021de4a43f3e682fa7babbf3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=108fdd6d848eb083021de4a43f3e682fa7babbf3", "patch": "@@ -1,3 +1,10 @@\n+2017-01-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/79088\n+\tPR tree-optimization/79188\n+\t* gcc.dg/torture/pr79088.c: New testcase.\n+\t* gcc.dg/torture/pr79188.c: Likewise.\n+\n 2017-01-23  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \t* gcc.target/powerpc/bfp/scalar-insert-exp-3.c: New test."}, {"sha": "7c78f15e3da4d6041209148ff5a0b124071312ef", "filename": "gcc/testsuite/gcc.dg/torture/pr79088.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/108fdd6d848eb083021de4a43f3e682fa7babbf3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr79088.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/108fdd6d848eb083021de4a43f3e682fa7babbf3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr79088.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr79088.c?ref=108fdd6d848eb083021de4a43f3e682fa7babbf3", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+\n+int a, b, c, d, e = 1;\n+\n+int main ()\n+{\n+  int f;\n+  if (a)\n+    goto L;\n+  for (f = 0; f < e; e++)\n+    {\n+L:\n+      if (d)\n+\tcontinue;\n+      if (c)\n+\tgoto L;\n+      for (a = 0; a < 6; a++)\n+\tfor (f = 0; f < 3; f++)\n+\t  while (b)\n+\t    c++;\n+    }\n+  return 0;\n+}"}, {"sha": "fc3208c40321f884dac15109fec1b6c4e5ff34fa", "filename": "gcc/testsuite/gcc.dg/torture/pr79188.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/108fdd6d848eb083021de4a43f3e682fa7babbf3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr79188.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/108fdd6d848eb083021de4a43f3e682fa7babbf3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr79188.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr79188.c?ref=108fdd6d848eb083021de4a43f3e682fa7babbf3", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+\n+int a, b, c, d, e, f, h, j, k;\n+\n+static void fn1 ()\n+{\n+  int g = 1, i;\n+  if (!f)\n+    {\n+      for (; d < 1; d++)\n+\tfor (i = 0, j = 1; i < 1; i = j)\n+\t  a = 2;\n+      for (; e < 1; e++)\n+\t{\n+\t  for (; k; k++)\n+\t    L:\n+\t\t;\n+\t  for (c = 0; c < 2; c++)\n+\t    {\n+\t      for (i = 0; i < 4; i++)\n+\t\t{\n+\t\t  for (; h; h++)\n+\t\t    g = 0;\n+\t\t  b = 0;\n+\t\t}\n+\t      if (b)\n+\t\tgoto L;\n+\t    }\n+\t  a = 0;\n+\t}\n+      if (g < 0)\n+\tgoto L;\n+    }\n+}\n+\n+int main ()\n+{\n+  fn1 ();\n+\n+  if (a != 0) \n+    __builtin_abort ();\n+\n+  return 0; \n+}"}, {"sha": "51f30a7639c7ca9adba1da702438731d0cd08ca8", "filename": "gcc/tree-ssa-threadbackward.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/108fdd6d848eb083021de4a43f3e682fa7babbf3/gcc%2Ftree-ssa-threadbackward.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/108fdd6d848eb083021de4a43f3e682fa7babbf3/gcc%2Ftree-ssa-threadbackward.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadbackward.c?ref=108fdd6d848eb083021de4a43f3e682fa7babbf3", "patch": "@@ -865,6 +865,8 @@ pass_early_thread_jumps::gate (function *fun ATTRIBUTE_UNUSED)\n unsigned int\n pass_early_thread_jumps::execute (function *fun)\n {\n+  loop_optimizer_init (AVOID_CFG_MODIFICATIONS);\n+\n   /* Try to thread each block with more than one successor.  */\n   basic_block bb;\n   FOR_EACH_BB_FN (bb, fun)\n@@ -873,6 +875,8 @@ pass_early_thread_jumps::execute (function *fun)\n \tfind_jump_threads_backwards (bb, false);\n     }\n   thread_through_all_blocks (true);\n+\n+  loop_optimizer_finalize ();\n   return 0;\n }\n "}, {"sha": "8e08ae29e03d33e7d9c3dbb9853d51e5049dfcb0", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 40, "deletions": 36, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/108fdd6d848eb083021de4a43f3e682fa7babbf3/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/108fdd6d848eb083021de4a43f3e682fa7babbf3/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=108fdd6d848eb083021de4a43f3e682fa7babbf3", "patch": "@@ -2086,42 +2086,6 @@ mark_threaded_blocks (bitmap threaded_blocks)\n   else\n     bitmap_copy (threaded_blocks, tmp);\n \n-  /* Look for jump threading paths which cross multiple loop headers.\n-\n-     The code to thread through loop headers will change the CFG in ways\n-     that invalidate the cached loop iteration information.  So we must\n-     detect that case and wipe the cached information.  */\n-  EXECUTE_IF_SET_IN_BITMAP (tmp, 0, i, bi)\n-    {\n-      basic_block bb = BASIC_BLOCK_FOR_FN (cfun, i);\n-      FOR_EACH_EDGE (e, ei, bb->preds)\n-\t{\n-\t  if (e->aux)\n-\t    {\n-\t      vec<jump_thread_edge *> *path = THREAD_PATH (e);\n-\n-\t      for (unsigned int i = 0, crossed_headers = 0;\n-\t\t   i < path->length ();\n-\t\t   i++)\n-\t\t{\n-\t\t  basic_block dest = (*path)[i]->e->dest;\n-\t\t  basic_block src = (*path)[i]->e->src;\n-\t\t  crossed_headers += (dest == dest->loop_father->header);\n-\t\t  /* If we step from a block outside an irreducible region\n-\t\t     to a block inside an irreducible region, then we have\n-\t\t     crossed into a loop.  */\n-\t\t  crossed_headers += ((src->flags & BB_IRREDUCIBLE_LOOP)\n-\t\t\t\t      != (dest->flags & BB_IRREDUCIBLE_LOOP));\n-\t\t  if (crossed_headers > 1)\n-\t\t    {\n-\t\t      vect_free_loop_info_assumptions (dest->loop_father);\n-\t\t      break;\n-\t\t    }\n-\t\t}\n-\t    }\n-\t}\n-    }\n-\n   /* If we have a joiner block (J) which has two successors S1 and S2 and\n      we are threading though S1 and the final destination of the thread\n      is S2, then we must verify that any PHI nodes in S2 have the same\n@@ -2166,6 +2130,46 @@ mark_threaded_blocks (bitmap threaded_blocks)\n \t}\n     }\n \n+  /* Look for jump threading paths which cross multiple loop headers.\n+\n+     The code to thread through loop headers will change the CFG in ways\n+     that invalidate the cached loop iteration information.  So we must\n+     detect that case and wipe the cached information.  */\n+  EXECUTE_IF_SET_IN_BITMAP (tmp, 0, i, bi)\n+    {\n+      basic_block bb = BASIC_BLOCK_FOR_FN (cfun, i);\n+      FOR_EACH_EDGE (e, ei, bb->preds)\n+\t{\n+\t  if (e->aux)\n+\t    {\n+\t      vec<jump_thread_edge *> *path = THREAD_PATH (e);\n+\n+\t      for (unsigned int i = 0, crossed_headers = 0;\n+\t\t   i < path->length ();\n+\t\t   i++)\n+\t\t{\n+\t\t  basic_block dest = (*path)[i]->e->dest;\n+\t\t  basic_block src = (*path)[i]->e->src;\n+\t\t  /* If we enter a loop.  */\n+\t\t  if (flow_loop_nested_p (src->loop_father, dest->loop_father))\n+\t\t    ++crossed_headers;\n+\t\t  /* If we step from a block outside an irreducible region\n+\t\t     to a block inside an irreducible region, then we have\n+\t\t     crossed into a loop.  */\n+\t\t  else if (! (src->flags & BB_IRREDUCIBLE_LOOP)\n+\t\t\t   && (dest->flags & BB_IRREDUCIBLE_LOOP))\n+\t\t      ++crossed_headers;\n+\t\t  if (crossed_headers > 1)\n+\t\t    {\n+\t\t      vect_free_loop_info_assumptions\n+\t\t\t((*path)[path->length () - 1]->e->dest->loop_father);\n+\t\t      break;\n+\t\t    }\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n   BITMAP_FREE (tmp);\n }\n "}]}