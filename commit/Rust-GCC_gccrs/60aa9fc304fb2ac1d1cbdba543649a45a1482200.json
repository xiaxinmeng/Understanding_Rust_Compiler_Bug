{"sha": "60aa9fc304fb2ac1d1cbdba543649a45a1482200", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBhYTlmYzMwNGZiMmFjMWQxY2JkYmE1NDM2NDlhNDVhMTQ4MjIwMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2003-10-23T17:05:01Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-10-23T17:05:01Z"}, "message": "locale_facets.tcc (money_get<>::do_get(..., string_type&)): Use find_first_not_of to strip leading zeros...\n\n2003-10-23  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/locale_facets.tcc (money_get<>::do_get(...,\n\tstring_type&)): Use find_first_not_of to strip leading\n\tzeros; if __tmp_units == \"0\" never prefix it with '-';\n\talways fail if __tmp_units is empty.\n\t* testsuite/22_locale/money_get/get/char/10.cc: New.\n\t* testsuite/22_locale/money_get/get/wchar_t/10.cc: Ditto.\n\nFrom-SVN: r72860", "tree": {"sha": "4a2e69daf81ca59127b07835c4cc1bf79218b081", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a2e69daf81ca59127b07835c4cc1bf79218b081"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60aa9fc304fb2ac1d1cbdba543649a45a1482200", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60aa9fc304fb2ac1d1cbdba543649a45a1482200", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60aa9fc304fb2ac1d1cbdba543649a45a1482200", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60aa9fc304fb2ac1d1cbdba543649a45a1482200/comments", "author": null, "committer": null, "parents": [{"sha": "0e67400ab4f95d41decb49c32975f49ceb1e9f8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e67400ab4f95d41decb49c32975f49ceb1e9f8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e67400ab4f95d41decb49c32975f49ceb1e9f8b"}], "stats": {"total": 189, "additions": 168, "deletions": 21}, "files": [{"sha": "548cc71463719245a4002d4b6c523e1e55e97635", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60aa9fc304fb2ac1d1cbdba543649a45a1482200/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60aa9fc304fb2ac1d1cbdba543649a45a1482200/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=60aa9fc304fb2ac1d1cbdba543649a45a1482200", "patch": "@@ -1,3 +1,12 @@\n+2003-10-23  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/locale_facets.tcc (money_get<>::do_get(...,\n+\tstring_type&)): Use find_first_not_of to strip leading\n+\tzeros; if __tmp_units == \"0\" never prefix it with '-';\n+\talways fail if __tmp_units is empty.\n+\t* testsuite/22_locale/money_get/get/char/10.cc: New.\n+\t* testsuite/22_locale/money_get/get/wchar_t/10.cc: Ditto.\n+\n 2003-10-23  Phil Edwards  <phil@codesourcery.com>\n \n \t* config/os/vxworks/ctype_noninline.h:  Adjust ctor to match"}, {"sha": "4a68771644eca0337f49ee9394bd62bf0a59701a", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 33, "deletions": 21, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60aa9fc304fb2ac1d1cbdba543649a45a1482200/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60aa9fc304fb2ac1d1cbdba543649a45a1482200/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=60aa9fc304fb2ac1d1cbdba543649a45a1482200", "patch": "@@ -1284,38 +1284,50 @@ namespace std\n \t    __testvalid = false;\n \t}\n \n-      // Strip leading zeros.\n-      while (__tmp_units.size() > 1 && __tmp_units[0] == __ctype.widen('0'))\n-\t__tmp_units.erase(__tmp_units.begin());\n-\n-      if (__sign.size() && __sign == __neg_sign)\n-\t__tmp_units.insert(__tmp_units.begin(), __ctype.widen('-'));\n+      const char_type __zero = __ctype.widen('0');\n \n-      // Test for grouping fidelity.\n-      if (__grouping.size() && __grouping_tmp.size())\n+      // Strip leading zeros.\n+      if (__tmp_units.size() > 1)\n \t{\n-\t  if (!std::__verify_grouping(__grouping, __grouping_tmp))\n-\t    __testvalid = false;\n+\t  const size_type __first = __tmp_units.find_first_not_of(__zero);\n+\t  const bool __only_zeros = __first == string_type::npos;\n+\t  if (__first)\n+\t    __tmp_units.erase(0, __only_zeros  ? __tmp_units.size() - 1\n+\t\t\t                       : __first);\n \t}\n \n-      // Iff no more characters are available.      \n-      if (__c == __eof)\n-\t__err |= ios_base::eofbit;\n-\n-      // Iff not enough digits were supplied after the decimal-point.\n-      if (__testdecfound)\n+      if (__tmp_units.size())\n \t{\n-\t  const int __frac = __intl ? __mpt.frac_digits() \n-\t\t\t\t    : __mpf.frac_digits();\n-\t  if (__frac > 0)\n+\t  // 22.2.6.1.2, p4\n+\t  if (__sign.size() && __sign == __neg_sign\n+\t      && __tmp_units[0] != __zero)\n+\t    __tmp_units.insert(__tmp_units.begin(), __ctype.widen('-'));      \n+\n+\t  // Test for grouping fidelity.\n+\t  if (__grouping.size() && __grouping_tmp.size())\n \t    {\n-\t      if (__sep_pos != __frac)\n+\t      if (!std::__verify_grouping(__grouping, __grouping_tmp))\n+\t\t__testvalid = false;\n+\t    }\n+\n+\t  // Iff not enough digits were supplied after the decimal-point.\n+\t  if (__testdecfound)\n+\t    {\n+\t      const int __frac = __intl ? __mpt.frac_digits() \n+\t\t                        : __mpf.frac_digits();\n+\t      if (__frac > 0 && __sep_pos != __frac)\n \t\t__testvalid = false;\n \t    }\n \t}\n+      else\n+\t__testvalid = false;\n+\n+      // Iff no more characters are available.      \n+      if (__c == __eof)\n+\t__err |= ios_base::eofbit;\n \n       // Iff valid sequence is not recognized.\n-      if (!__testvalid || !__tmp_units.size())\n+      if (!__testvalid)\n \t__err |= ios_base::failbit;\n       else\n \t// Use the \"swap trick\" to copy __tmp_units into __units."}, {"sha": "1711e25e4b77e98330802098a17a04b7f640e3a1", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/char/10.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60aa9fc304fb2ac1d1cbdba543649a45a1482200/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F10.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60aa9fc304fb2ac1d1cbdba543649a45a1482200/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F10.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F10.cc?ref=60aa9fc304fb2ac1d1cbdba543649a45a1482200", "patch": "@@ -0,0 +1,63 @@\n+// 2003-10-23  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.1.1 money_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<char> iterator_type;\n+\n+  bool test __attribute__((unused)) = true;\n+\n+  locale loc_us = __gnu_test::try_named_locale(\"en_US\");\n+\n+  iterator_type end;\n+  istringstream iss;\n+  iss.imbue(loc_us);\n+\n+  const money_get<char>& mon_get = use_facet<money_get<char> >(iss.getloc());\n+\n+  iss.str(\"-$0 \");\n+  iterator_type is_it(iss);\n+  string extracted_amount;\n+  ios_base::iostate err = ios_base::goodbit;\n+  mon_get.get(is_it, end, false, iss, err, extracted_amount);\n+  VERIFY( extracted_amount == \"0\" );\n+  VERIFY( err == ios_base::goodbit );\n+\n+  iss.str(\"-$ \");\n+  iterator_type is_it_2(iss);\n+  extracted_amount.clear();\n+  err = ios_base::goodbit;\n+  mon_get.get(is_it_2, end, false, iss, err, extracted_amount);\n+  VERIFY( extracted_amount.empty() );\n+  VERIFY( err == ios_base::failbit );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c1e26c87518adc2d172e0846e4f5020302cfd0ba", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/wchar_t/10.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60aa9fc304fb2ac1d1cbdba543649a45a1482200/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F10.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60aa9fc304fb2ac1d1cbdba543649a45a1482200/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F10.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F10.cc?ref=60aa9fc304fb2ac1d1cbdba543649a45a1482200", "patch": "@@ -0,0 +1,63 @@\n+// 2003-10-23  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.1.1 money_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<wchar_t> iterator_type;\n+\n+  bool test __attribute__((unused)) = true;\n+\n+  locale loc_us = __gnu_test::try_named_locale(\"en_US\");\n+\n+  iterator_type end;\n+  wistringstream iss;\n+  iss.imbue(loc_us);\n+\n+  const money_get<wchar_t>& mon_get = use_facet<money_get<wchar_t> >(iss.getloc());\n+\n+  iss.str(L\"-$0 \");\n+  iterator_type is_it(iss);\n+  wstring extracted_amount;\n+  ios_base::iostate err = ios_base::goodbit;\n+  mon_get.get(is_it, end, false, iss, err, extracted_amount);\n+  VERIFY( extracted_amount == L\"0\" );\n+  VERIFY( err == ios_base::goodbit );\n+\n+  iss.str(L\"-$ \");\n+  iterator_type is_it_2(iss);\n+  extracted_amount.clear();\n+  err = ios_base::goodbit;\n+  mon_get.get(is_it_2, end, false, iss, err, extracted_amount);\n+  VERIFY( extracted_amount.empty() );\n+  VERIFY( err == ios_base::failbit );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}