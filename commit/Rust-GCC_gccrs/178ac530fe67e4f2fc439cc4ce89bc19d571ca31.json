{"sha": "178ac530fe67e4f2fc439cc4ce89bc19d571ca31", "node_id": "C_kwDOANBUbNoAKDE3OGFjNTMwZmU2N2U0ZjJmYzQzOWNjNGNlODliYzE5ZDU3MWNhMzE", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-10-24T13:19:00Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-10-24T13:19:00Z"}, "message": "OpenMP: Fix reverse offload GOMP_TARGET_REV IFN corner cases [PR107236]\n\nFor 'target parallel' and similarly nested directives, cgraph_node's\ncalls_declare_variant_alt was not set in the parent region node but in\ncfun->decl. Hence, pass_omp_device_lower did not process handle the\ninternal function GOMP_TARGET_REV. - Solution is to set it to the\nDECL_CONTEXT, which is set in adjust_context_and_scope.\n\nThe cgraph_node::create_clone issue is exposed with -O2 for the existing\nlibgomp.fortran/reverse-offload-1.f90.\n\n\tPR middle-end/107236\n\ngcc/ChangeLog:\n\t* omp-expand.cc (expand_omp_target): Set calls_declare_variant_alt\n\tin DECL_CONTEXT and not to cfun->decl.\n\t* cgraphclones.cc (cgraph_node::create_clone): Copy also the\n\tnode's calls_declare_variant_alt value.\n\ngcc/testsuite/ChangeLog:\n\t* gfortran.dg/gomp/target-device-ancestor-6.f90: New test.", "tree": {"sha": "3cc708fdbbbf527804a9b46c3f596a14e442d314", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3cc708fdbbbf527804a9b46c3f596a14e442d314"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/178ac530fe67e4f2fc439cc4ce89bc19d571ca31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/178ac530fe67e4f2fc439cc4ce89bc19d571ca31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/178ac530fe67e4f2fc439cc4ce89bc19d571ca31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/178ac530fe67e4f2fc439cc4ce89bc19d571ca31/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97d1ed67fc6a5773c8c00875bfa3616a457cf5f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97d1ed67fc6a5773c8c00875bfa3616a457cf5f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97d1ed67fc6a5773c8c00875bfa3616a457cf5f9"}], "stats": {"total": 31, "additions": 24, "deletions": 7}, "files": [{"sha": "bb4b3c5407d56c1ea23b97131a7b91fa5b362e02", "filename": "gcc/cgraphclones.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178ac530fe67e4f2fc439cc4ce89bc19d571ca31/gcc%2Fcgraphclones.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178ac530fe67e4f2fc439cc4ce89bc19d571ca31/gcc%2Fcgraphclones.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphclones.cc?ref=178ac530fe67e4f2fc439cc4ce89bc19d571ca31", "patch": "@@ -375,6 +375,7 @@ cgraph_node::create_clone (tree new_decl, profile_count prof_count,\n   if (!new_inlined_to)\n     prof_count = count.combine_with_ipa_count (prof_count);\n   new_node->count = prof_count;\n+  new_node->calls_declare_variant_alt = this->calls_declare_variant_alt;\n \n   /* Update IPA profile.  Local profiles need no updating in original.  */\n   if (update_original)"}, {"sha": "c636a174e361e4905ce28532e9390f45e25524d1", "filename": "gcc/omp-expand.cc", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178ac530fe67e4f2fc439cc4ce89bc19d571ca31/gcc%2Fomp-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178ac530fe67e4f2fc439cc4ce89bc19d571ca31/gcc%2Fomp-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.cc?ref=178ac530fe67e4f2fc439cc4ce89bc19d571ca31", "patch": "@@ -10054,13 +10054,8 @@ expand_omp_target (struct omp_region *region)\n \n       /* Handle the case that an inner ancestor:1 target is called by an outer\n \t target region. */\n-      if (!is_ancestor)\n-\tcgraph_node::get (child_fn)->calls_declare_variant_alt\n-\t  |= cgraph_node::get (cfun->decl)->calls_declare_variant_alt;\n-      else  /* Duplicate function to create empty nonhost variant. */\n+      if (is_ancestor)\n \t{\n-\t  /* Enable pass_omp_device_lower pass.  */\n-\t  cgraph_node::get (cfun->decl)->calls_declare_variant_alt = 1;\n \t  cgraph_node *fn2_node;\n \t  child_fn2 = build_decl (DECL_SOURCE_LOCATION (child_fn),\n \t\t\t\t  FUNCTION_DECL,\n@@ -10074,7 +10069,7 @@ expand_omp_target (struct omp_region *region)\n \t  TREE_PUBLIC (child_fn2) = 0;\n \t  DECL_UNINLINABLE (child_fn2) = 1;\n \t  DECL_EXTERNAL (child_fn2) = 0;\n-\t  DECL_CONTEXT (child_fn2) = NULL_TREE;\n+\t  DECL_CONTEXT (child_fn2) = DECL_CONTEXT (child_fn);\n \t  DECL_INITIAL (child_fn2) = make_node (BLOCK);\n \t  BLOCK_SUPERCONTEXT (DECL_INITIAL (child_fn2)) = child_fn2;\n \t  DECL_ATTRIBUTES (child_fn)\n@@ -10098,6 +10093,10 @@ expand_omp_target (struct omp_region *region)\n \t  fn2_node->force_output = 1;\n \t  node->offloadable = 0;\n \n+\t  /* Enable pass_omp_device_lower pass.  */\n+\t  fn2_node = cgraph_node::get (DECL_CONTEXT (child_fn));\n+\t  fn2_node->calls_declare_variant_alt = 1;\n+\n \t  t = build_decl (DECL_SOURCE_LOCATION (child_fn),\n \t\t\t  RESULT_DECL, NULL_TREE, void_type_node);\n \t  DECL_ARTIFICIAL (t) = 1;"}, {"sha": "821e7852e85bc4988e5a311c53cfaa9709a2268d", "filename": "gcc/testsuite/gfortran.dg/gomp/target-device-ancestor-6.f90", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178ac530fe67e4f2fc439cc4ce89bc19d571ca31/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Ftarget-device-ancestor-6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178ac530fe67e4f2fc439cc4ce89bc19d571ca31/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Ftarget-device-ancestor-6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Ftarget-device-ancestor-6.f90?ref=178ac530fe67e4f2fc439cc4ce89bc19d571ca31", "patch": "@@ -0,0 +1,17 @@\n+! PR middle-end/107236\n+\n+! Did ICE before because IFN .GOMP_TARGET_REV was not\n+! processed in omp-offload.cc.\n+! Note: Test required ENABLE_OFFLOADING being true inside GCC.\n+\n+implicit none\n+!$omp requires reverse_offload\n+!$omp target parallel num_threads(4)\n+  !$omp target device(ancestor:1)\n+    call foo()\n+  !$omp end target \n+!$omp end target parallel\n+contains\n+  subroutine foo\n+  end\n+end"}]}