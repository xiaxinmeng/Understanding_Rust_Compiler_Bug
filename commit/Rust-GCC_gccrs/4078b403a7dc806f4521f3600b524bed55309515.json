{"sha": "4078b403a7dc806f4521f3600b524bed55309515", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA3OGI0MDNhN2RjODA2ZjQ1MjFmMzYwMGI1MjRiZWQ1NTMwOTUxNQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2002-08-01T06:20:46Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-08-01T06:20:46Z"}, "message": "c-common.c: Define all C/ObjC/C++ warning and flag variables.\n\n\t* c-common.c: Define all C/ObjC/C++ warning and flag variables.\n\t* c-common.h: Declare all C/ObjC/C++ warning and flag variables.\n\t* c-decl.c: Move all warning and flag variables to c-common.c.\n\t* c-format.c: Move all warning variables to c-common.c.\n\t* c-tree.h: Move all warning and flag declarations to c-common.h.\n\t* objc/objc-act.c: Move all warning variables to c-common.c.\n\t(flag_warn_protocol): Rename warn_protocol.\ncp:\n\t* cp-tree.h: Move all warning and flag declarations to c-common.h.\n\t* decl.c: Move all warning and flag variables to c-common.c.\n\t* decl2.c: Move all warning and flag variables to c-common.c.\n\t* lex.c (flag_digraphs): Remove.\n\t(warn_traditional): Now in c-common.c.\n\nFrom-SVN: r55923", "tree": {"sha": "95cf90c12538551f48b4627b824d1738b2af0986", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95cf90c12538551f48b4627b824d1738b2af0986"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4078b403a7dc806f4521f3600b524bed55309515", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4078b403a7dc806f4521f3600b524bed55309515", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4078b403a7dc806f4521f3600b524bed55309515", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4078b403a7dc806f4521f3600b524bed55309515/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d8278e27fe53214e0750c886529d43a4fc468383", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8278e27fe53214e0750c886529d43a4fc468383", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8278e27fe53214e0750c886529d43a4fc468383"}], "stats": {"total": 1542, "additions": 762, "deletions": 780}, "files": [{"sha": "49a41f816be51c614a5971416617359f255f2f05", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4078b403a7dc806f4521f3600b524bed55309515/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4078b403a7dc806f4521f3600b524bed55309515/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4078b403a7dc806f4521f3600b524bed55309515", "patch": "@@ -1,3 +1,13 @@\n+2002-08-01  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* c-common.c: Define all C/ObjC/C++ warning and flag variables.\n+\t* c-common.h: Declare all C/ObjC/C++ warning and flag variables.\n+\t* c-decl.c: Move all warning and flag variables to c-common.c.\n+\t* c-format.c: Move all warning variables to c-common.c.\n+\t* c-tree.h: Move all warning and flag declarations to c-common.h.\n+\t* objc/objc-act.c: Move all warning variables to c-common.c.\n+\t(flag_warn_protocol): Rename warn_protocol.\n+\n 2002-07-31  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* pa-linux.h (GLOBAL_ASM_OP): Fix typo."}, {"sha": "7eb391a768af73d7cb0ad9986fabd3e346fabb8d", "filename": "gcc/c-common.c", "status": "modified", "additions": 393, "deletions": 0, "changes": 393, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4078b403a7dc806f4521f3600b524bed55309515/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4078b403a7dc806f4521f3600b524bed55309515/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=4078b403a7dc806f4521f3600b524bed55309515", "patch": "@@ -192,6 +192,8 @@ enum c_language_kind c_language;\n \n tree c_global_trees[CTI_MAX];\n \n+/* Switches common to the C front ends.  */\n+\n /* Nonzero if prepreprocessing only.  */\n int flag_preprocess_only;\n \n@@ -223,22 +225,408 @@ int flag_short_wchar;\n /* Nonzero means allow Microsoft extensions without warnings or errors.  */\n int flag_ms_extensions;\n \n+/* Nonzero means don't recognize the keyword `asm'.  */\n+\n+int flag_no_asm;\n+\n+/* Nonzero means give string constants the type `const char *', as mandated\n+   by the standard.  */\n+\n+int flag_const_strings;\n+\n+/* Nonzero means `$' can be in an identifier.  */\n+\n+#ifndef DOLLARS_IN_IDENTIFIERS\n+#define DOLLARS_IN_IDENTIFIERS 1\n+#endif\n+int dollars_in_ident = DOLLARS_IN_IDENTIFIERS;\n+\n+/* Nonzero means to treat bitfields as signed unless they say `unsigned'.  */\n+\n+int flag_signed_bitfields = 1;\n+int explicit_flag_signed_bitfields;\n+\n+/* Nonzero means warn about pointer casts that can drop a type qualifier\n+   from the pointer target type.  */\n+\n+int warn_cast_qual;\n+\n+/* Warn about functions which might be candidates for format attributes.  */\n+\n+int warn_missing_format_attribute;\n+\n+/* Nonzero means warn about sizeof(function) or addition/subtraction\n+   of function pointers.  */\n+\n+int warn_pointer_arith;\n+\n+/* Nonzero means warn for any global function def\n+   without separate previous prototype decl.  */\n+\n+int warn_missing_prototypes;\n+\n+/* Warn if adding () is suggested.  */\n+\n+int warn_parentheses;\n+\n+/* Warn if initializer is not completely bracketed.  */\n+\n+int warn_missing_braces;\n+\n+/* Warn about comparison of signed and unsigned values.\n+   If -1, neither -Wsign-compare nor -Wno-sign-compare has been specified.  */\n+\n+int warn_sign_compare;\n+\n+/* Nonzero means warn about usage of long long when `-pedantic'.  */\n+\n+int warn_long_long = 1;\n+\n+/* Nonzero means warn about deprecated conversion from string constant to\n+   `char *'.  */\n+\n+int warn_write_strings;\n+\n+/* Nonzero means warn about multiple (redundant) decls for the same single\n+   variable or function.  */\n+\n+int warn_redundant_decls;\n+\n+/* Warn about testing equality of floating point numbers. */\n+\n+int warn_float_equal;\n+\n+/* Warn about a subscript that has type char.  */\n+\n+int warn_char_subscripts;\n+\n+/* Warn if a type conversion is done that might have confusing results.  */\n+\n+int warn_conversion;\n+\n+/* Warn about #pragma directives that are not recognised.  */      \n+\n+int warn_unknown_pragmas; /* Tri state variable.  */  \n+\n /* Nonzero means warn about use of multicharacter literals.  */\n \n int warn_multichar = 1;\n \n+/* Warn about format/argument anomalies in calls to formatted I/O functions\n+   (*printf, *scanf, strftime, strfmon, etc.).  */\n+\n+int warn_format;\n+\n+/* Warn about Y2K problems with strftime formats.  */\n+\n+int warn_format_y2k;\n+\n+/* Warn about excess arguments to formats.  */\n+\n+int warn_format_extra_args;\n+\n+/* Warn about zero-length formats.  */\n+\n+int warn_format_zero_length;\n+\n+/* Warn about non-literal format arguments.  */\n+\n+int warn_format_nonliteral;\n+\n+/* Warn about possible security problems with calls to format functions.  */\n+\n+int warn_format_security;\n+\n+\n+/* C/ObjC language option variables.  */\n+\n+\n+/* Nonzero means message about use of implicit function declarations;\n+ 1 means warning; 2 means error.  */\n+\n+int mesg_implicit_function_declaration = -1;\n+\n+/* Nonzero means allow type mismatches in conditional expressions;\n+   just make their values `void'.  */\n+\n+int flag_cond_mismatch;\n+\n+/* Nonzero means enable C89 Amendment 1 features.  */\n+\n+int flag_isoc94;\n+\n+/* Nonzero means use the ISO C99 dialect of C.  */\n+\n+int flag_isoc99;\n+\n+/* Nonzero means that we have builtin functions, and main is an int */\n+\n+int flag_hosted = 1;\n+\n+/* Nonzero means add default format_arg attributes for functions not\n+   in ISO C.  */\n+\n+int flag_noniso_default_format_attributes = 1;\n+\n+/* Nonzero means warn when casting a function call to a type that does\n+   not match the return type (e.g. (float)sqrt() or (anything*)malloc()\n+   when there is no previous declaration of sqrt or malloc.  */\n+\n+int warn_bad_function_cast;\n+\n+/* Warn about traditional constructs whose meanings changed in ANSI C.  */\n+\n+int warn_traditional;\n+\n+/* Nonzero means warn for non-prototype function decls\n+   or non-prototyped defs without previous prototype.  */\n+\n+int warn_strict_prototypes;\n+\n+/* Nonzero means warn for any global function def\n+   without separate previous decl.  */\n+\n+int warn_missing_declarations;\n+\n+/* Nonzero means warn about declarations of objects not at\n+   file-scope level and about *all* declarations of functions (whether\n+   or static) not at file-scope level.  Note that we exclude\n+   implicit function declarations.  To get warnings about those, use\n+   -Wimplicit.  */\n+\n+int warn_nested_externs;\n+\n+/* Warn if main is suspicious.  */\n+\n+int warn_main;\n+\n /* Nonzero means warn about possible violations of sequence point rules.  */\n \n int warn_sequence_point;\n \n /* Nonzero means to warn about compile-time division by zero.  */\n int warn_div_by_zero = 1;\n \n+/* Nonzero means warn about use of implicit int.  */\n+\n+int warn_implicit_int;\n+\n /* Warn about NULL being passed to argument slots marked as requiring\n    non-NULL.  */ \n       \n int warn_nonnull;\n \n+\n+/* ObjC language option variables.  */\n+\n+\n+/* Open and close the file for outputting class declarations, if\n+   requested (ObjC).  */\n+\n+int flag_gen_declaration;\n+\n+/* Generate code for GNU or NeXT runtime environment.  */\n+\n+#ifdef NEXT_OBJC_RUNTIME\n+int flag_next_runtime = 1;\n+#else\n+int flag_next_runtime = 0;\n+#endif\n+\n+/* Tells the compiler that this is a special run.  Do not perform any\n+   compiling, instead we are to test some platform dependent features\n+   and output a C header file with appropriate definitions.  */\n+\n+int print_struct_values;\n+\n+/* ???.  Undocumented.  */\n+\n+const char *constant_string_class_name;\n+\n+/* Warn if multiple methods are seen for the same selector, but with\n+   different argument types.  */\n+\n+int warn_selector;\n+\n+/* Warn if methods required by a protocol are not implemented in the \n+   class adopting it.  When turned off, methods inherited to that\n+   class are also considered implemented.  */\n+\n+int warn_protocol = 1;\n+\n+\n+/* C++ language option variables.  */\n+\n+\n+/* Nonzero means don't recognize any extension keywords.  */\n+\n+int flag_no_gnu_keywords;\n+\n+/* Nonzero means do emit exported implementations of functions even if\n+   they can be inlined.  */\n+\n+int flag_implement_inlines = 1;\n+\n+/* Nonzero means do emit exported implementations of templates, instead of\n+   multiple static copies in each file that needs a definition.  */\n+\n+int flag_external_templates;\n+\n+/* Nonzero means that the decision to emit or not emit the implementation of a\n+   template depends on where the template is instantiated, rather than where\n+   it is defined.  */\n+\n+int flag_alt_external_templates;\n+\n+/* Nonzero means that implicit instantiations will be emitted if needed.  */\n+\n+int flag_implicit_templates = 1;\n+\n+/* Nonzero means that implicit instantiations of inline templates will be\n+   emitted if needed, even if instantiations of non-inline templates\n+   aren't.  */\n+\n+int flag_implicit_inline_templates = 1;\n+\n+/* Nonzero means generate separate instantiation control files and\n+   juggle them at link time.  */\n+\n+int flag_use_repository;\n+\n+/* Nonzero if we want to issue diagnostics that the standard says are not\n+   required.  */\n+\n+int flag_optional_diags = 1;\n+\n+/* Nonzero means we should attempt to elide constructors when possible.  */\n+\n+int flag_elide_constructors = 1;\n+\n+/* Nonzero means that member functions defined in class scope are\n+   inline by default.  */\n+\n+int flag_default_inline = 1;\n+\n+/* Controls whether compiler generates 'type descriptor' that give\n+   run-time type information.  */\n+\n+int flag_rtti = 1;\n+\n+/* Nonzero if we want to conserve space in the .o files.  We do this\n+   by putting uninitialized data and runtime initialized data into\n+   .common instead of .data at the expense of not flagging multiple\n+   definitions.  */\n+\n+int flag_conserve_space;\n+\n+/* Nonzero if we want to obey access control semantics.  */\n+\n+int flag_access_control = 1;\n+\n+/* Nonzero if we want to check the return value of new and avoid calling\n+   constructors if it is a null pointer.  */\n+\n+int flag_check_new;\n+\n+/* Nonzero if we want the new ISO rules for pushing a new scope for `for'\n+   initialization variables.\n+   0: Old rules, set by -fno-for-scope.\n+   2: New ISO rules, set by -ffor-scope.\n+   1: Try to implement new ISO rules, but with backup compatibility\n+   (and warnings).  This is the default, for now.  */\n+\n+int flag_new_for_scope = 1;\n+\n+/* Nonzero if we want to emit defined symbols with common-like linkage as\n+   weak symbols where possible, in order to conform to C++ semantics.\n+   Otherwise, emit them as local symbols.  */\n+\n+int flag_weak = 1;\n+\n+/* Nonzero to use __cxa_atexit, rather than atexit, to register\n+   destructors for local statics and global objects.  */\n+\n+int flag_use_cxa_atexit = DEFAULT_USE_CXA_ATEXIT;\n+\n+/* Nonzero means output .vtable_{entry,inherit} for use in doing vtable gc.  */\n+\n+int flag_vtable_gc;\n+\n+/* Nonzero means make the default pedwarns warnings instead of errors.\n+   The value of this flag is ignored if -pedantic is specified.  */\n+\n+int flag_permissive;\n+\n+/* Nonzero means to implement standard semantics for exception\n+   specifications, calling unexpected if an exception is thrown that\n+   doesn't match the specification.  Zero means to treat them as\n+   assertions and optimize accordingly, but not check them.  */\n+\n+int flag_enforce_eh_specs = 1;\n+\n+/* Nonzero means warn about implicit declarations.  */\n+\n+int warn_implicit = 1;\n+\n+/* Nonzero means warn when all ctors or dtors are private, and the class\n+   has no friends.  */\n+\n+int warn_ctor_dtor_privacy = 1;\n+\n+/* Non-zero means warn in function declared in derived class has the\n+   same name as a virtual in the base class, but fails to match the\n+   type signature of any virtual function in the base class.  */\n+\n+int warn_overloaded_virtual;\n+\n+/* Non-zero means warn when declaring a class that has a non virtual\n+   destructor, when it really ought to have a virtual one.  */\n+\n+int warn_nonvdtor;\n+\n+/* Non-zero means warn when the compiler will reorder code.  */\n+\n+int warn_reorder;\n+\n+/* Non-zero means warn when synthesis behavior differs from Cfront's.  */\n+\n+int warn_synth;\n+\n+/* Non-zero means warn when we convert a pointer to member function\n+   into a pointer to (void or function).  */\n+\n+int warn_pmf2ptr = 1;\n+\n+/* Nonzero means warn about violation of some Effective C++ style rules.  */\n+\n+int warn_ecpp;\n+\n+/* Nonzero means warn where overload resolution chooses a promotion from\n+   unsigned to signed over a conversion to an unsigned of the same size.  */\n+\n+int warn_sign_promo;\n+\n+/* Nonzero means warn when an old-style cast is used.  */\n+\n+int warn_old_style_cast;\n+\n+/* Nonzero means warn when non-templatized friend functions are\n+   declared within a template */\n+\n+int warn_nontemplate_friend = 1;\n+\n+/* Nonzero means complain about deprecated features.  */\n+\n+int warn_deprecated = 1;\n+\n+/* Maximum template instantiation depth.  This limit is rather\n+   arbitrary, but it exists to limit the time it takes to notice\n+   infinite template instantiations.  */\n+\n+int max_tinst_depth = 500;\n+\n+\n+\n /* The elements of `ridpointers' are identifier nodes for the reserved\n    type names and storage classes.  It is indexed by a RID_... value.  */\n tree *ridpointers;\n@@ -4269,6 +4657,11 @@ c_common_init_options (lang)\n   if (lang == clk_objective_c)\n     cpp_get_options (parse_in)->objc = 1;\n \n+  flag_const_strings = (lang == clk_cplusplus);\n+  warn_pointer_arith = (lang == clk_cplusplus);\n+  if (lang == clk_c)\n+    warn_sign_compare = -1;\n+\n   /* Mark as \"unspecified\" (see c_common_post_options).  */\n   flag_bounds_check = -1;\n }"}, {"sha": "514280ce6de99b1d7d06e3aeccb15b6a288dedb6", "filename": "gcc/c-common.h", "status": "modified", "additions": 347, "deletions": 31, "changes": 378, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4078b403a7dc806f4521f3600b524bed55309515/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4078b403a7dc806f4521f3600b524bed55309515/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=4078b403a7dc806f4521f3600b524bed55309515", "patch": "@@ -367,6 +367,9 @@ struct c_lang_decl GTY(()) {\n \n extern c_language_kind c_language;\n \n+\n+/* Switches common to the C front ends.  */\n+\n /* Nonzero if prepreprocessing only.  */\n extern int flag_preprocess_only;\n \n@@ -378,10 +381,14 @@ extern int flag_iso;\n    and assertions.  */\n extern int flag_undef;\n \n-/* Nonzero means give string constants the type `const char *', rather\n-   than `char *'.  */\n+/* Nonzero means don't recognize the non-ANSI builtin functions.  */\n \n-extern int flag_const_strings;\n+extern int flag_no_builtin;\n+\n+/* Nonzero means don't recognize the non-ANSI builtin functions.\n+   -ansi sets this.  */\n+\n+extern int flag_no_nonansi_builtin;\n \n /* Nonzero means give `double' the same size as `float'.  */\n \n@@ -394,10 +401,92 @@ extern int flag_short_wchar;\n /* Nonzero means allow Microsoft extensions without warnings or errors.  */\n extern int flag_ms_extensions;\n \n+/* Nonzero means don't recognize the keyword `asm'.  */\n+\n+extern int flag_no_asm;\n+\n+/* Nonzero means give string constants the type `const char *', as mandated\n+   by the standard.  */\n+\n+extern int flag_const_strings;\n+\n+/* Nonzero means `$' can be in an identifier.  */\n+\n+extern int dollars_in_ident;\n+\n+/* Nonzero means to treat bitfields as signed unless they say `unsigned'.  */\n+\n+extern int flag_signed_bitfields;\n+extern int explicit_flag_signed_bitfields;\n+\n+/* Nonzero means warn about pointer casts that can drop a type qualifier\n+   from the pointer target type.  */\n+\n+extern int warn_cast_qual;\n+\n+/* Warn about functions which might be candidates for format attributes.  */\n+\n+extern int warn_missing_format_attribute;\n+\n+/* Nonzero means warn about sizeof(function) or addition/subtraction\n+   of function pointers.  */\n+\n+extern int warn_pointer_arith;\n+\n+/* Nonzero means warn for any global function def\n+   without separate previous prototype decl.  */\n+\n+extern int warn_missing_prototypes;\n+\n+/* Warn if adding () is suggested.  */\n+\n+extern int warn_parentheses;\n+\n+/* Warn if initializer is not completely bracketed.  */\n+\n+extern int warn_missing_braces;\n+\n+/* Warn about comparison of signed and unsigned values.\n+   If -1, neither -Wsign-compare nor -Wno-sign-compare has been specified.  */\n+\n+extern int warn_sign_compare;\n+\n+/* Nonzero means warn about usage of long long when `-pedantic'.  */\n+\n+extern int warn_long_long;\n+\n+/* Nonzero means warn about deprecated conversion from string constant to\n+   `char *'.  */\n+\n+extern int warn_write_strings;\n+\n+/* Nonzero means warn about multiple (redundant) decls for the same single\n+   variable or function.  */\n+\n+extern int warn_redundant_decls;\n+\n+/* Warn about testing equality of floating point numbers. */\n+\n+extern int warn_float_equal;\n+\n+/* Warn about a subscript that has type char.  */\n+\n+extern int warn_char_subscripts;\n+\n+/* Warn if a type conversion is done that might have confusing results.  */\n+\n+extern int warn_conversion;\n+\n+/* Warn about #pragma directives that are not recognised.  */      \n+\n+extern int warn_unknown_pragmas; /* Tri state variable.  */  \n+\n /* Nonzero means warn about use of multicharacter literals.  */\n+\n extern int warn_multichar;\n \n-/* Warn about *printf or *scanf format/argument anomalies.  */\n+/* Warn about format/argument anomalies in calls to formatted I/O functions\n+   (*printf, *scanf, strftime, strfmon, etc.).  */\n \n extern int warn_format;\n \n@@ -421,26 +510,19 @@ extern int warn_format_nonliteral;\n \n extern int warn_format_security;\n \n-/* Warn about NULL being passed to argument slots marked as requiring\n-   non-NULL.  */\n \n-extern int warn_nonnull;\n+/* C/ObjC language option variables.  */\n \n-/* Warn about possible violations of sequence point rules.  */\n \n-extern int warn_sequence_point;\n+/* Nonzero means message about use of implicit function declarations;\n+ 1 means warning; 2 means error.  */\n \n-/* Warn about functions which might be candidates for format attributes.  */\n+extern int mesg_implicit_function_declaration;\n \n-extern int warn_missing_format_attribute;\n+/* Nonzero means allow type mismatches in conditional expressions;\n+   just make their values `void'.  */\n \n-/* Nonzero means warn about sizeof (function) or addition/subtraction\n-   of function pointers.  */\n-\n-extern int warn_pointer_arith;\n-\n-/* Nonzero means to warn about compile-time division by zero.  */\n-extern int warn_div_by_zero;\n+extern int flag_cond_mismatch;\n \n /* Nonzero means enable C89 Amendment 1 features.  */\n \n@@ -450,7 +532,7 @@ extern int flag_isoc94;\n \n extern int flag_isoc99;\n \n-/* Nonzero means environment is hosted (i.e., not freestanding) */\n+/* Nonzero means that we have builtin functions, and main is an int */\n \n extern int flag_hosted;\n \n@@ -459,27 +541,261 @@ extern int flag_hosted;\n \n extern int flag_noniso_default_format_attributes;\n \n-/* Nonzero means don't recognize any builtin functions.  */\n+/* Nonzero means warn when casting a function call to a type that does\n+   not match the return type (e.g. (float)sqrt() or (anything*)malloc()\n+   when there is no previous declaration of sqrt or malloc.  */\n \n-extern int flag_no_builtin;\n+extern int warn_bad_function_cast;\n \n-/* Nonzero means don't recognize the non-ANSI builtin functions.\n-   -ansi sets this.  */\n+/* Warn about traditional constructs whose meanings changed in ANSI C.  */\n \n-extern int flag_no_nonansi_builtin;\n+extern int warn_traditional;\n \n-/* Nonzero means warn about suggesting putting in ()'s.  */\n+/* Nonzero means warn for non-prototype function decls\n+   or non-prototyped defs without previous prototype.  */\n \n-extern int warn_parentheses;\n+extern int warn_strict_prototypes;\n \n-/* Warn if a type conversion is done that might have confusing results.  */\n+/* Nonzero means warn for any global function def\n+   without separate previous decl.  */\n+\n+extern int warn_missing_declarations;\n+\n+/* Nonzero means warn about extern declarations of objects not at\n+   file-scope level and about *all* declarations of functions (whether\n+   extern or static) not at file-scope level.  Note that we exclude\n+   implicit function declarations.  To get warnings about those, use\n+   -Wimplicit.  */\n+\n+extern int warn_nested_externs;\n+\n+/* Warn if main is suspicious.  */\n+\n+extern int warn_main;\n+\n+/* Nonzero means warn about possible violations of sequence point rules.  */\n+\n+extern int warn_sequence_point;\n+\n+/* Nonzero means to warn about compile-time division by zero.  */\n+extern int warn_div_by_zero;\n+\n+/* Nonzero means warn about use of implicit int.  */\n+\n+extern int warn_implicit_int;\n+\n+/* Warn about NULL being passed to argument slots marked as requiring\n+   non-NULL.  */ \n+      \n+extern int warn_nonnull;\n+\n+\n+/* ObjC language option variables.  */\n+\n+\n+/* Open and close the file for outputting class declarations, if\n+   requested (ObjC).  */\n+\n+extern int flag_gen_declaration;\n+\n+/* Generate code for GNU or NeXT runtime environment.  */\n+\n+extern int flag_next_runtime;\n+\n+/* Tells the compiler that this is a special run.  Do not perform any\n+   compiling, instead we are to test some platform dependent features\n+   and output a C header file with appropriate definitions.  */\n+\n+extern int print_struct_values;\n+\n+/* ???.  Undocumented.  */\n+\n+const char *constant_string_class_name;\n+\n+/* Warn if multiple methods are seen for the same selector, but with\n+   different argument types.  */\n+\n+extern int warn_selector;\n+\n+/* Warn if methods required by a protocol are not implemented in the \n+   class adopting it.  When turned off, methods inherited to that\n+   class are also considered implemented.  */\n+\n+extern int warn_protocol;\n+\n+\n+/* C++ language option variables.  */\n+\n+\n+/* Nonzero means don't recognize any extension keywords.  */\n+\n+extern int flag_no_gnu_keywords;\n+\n+/* Nonzero means do emit exported implementations of functions even if\n+   they can be inlined.  */\n+\n+extern int flag_implement_inlines;\n+\n+/* Nonzero means do emit exported implementations of templates, instead of\n+   multiple static copies in each file that needs a definition.  */\n+\n+extern int flag_external_templates;\n+\n+/* Nonzero means that the decision to emit or not emit the implementation of a\n+   template depends on where the template is instantiated, rather than where\n+   it is defined.  */\n+\n+extern int flag_alt_external_templates;\n+\n+/* Nonzero means that implicit instantiations will be emitted if needed.  */\n+\n+extern int flag_implicit_templates;\n+\n+/* Nonzero means that implicit instantiations of inline templates will be\n+   emitted if needed, even if instantiations of non-inline templates\n+   aren't.  */\n+\n+extern int flag_implicit_inline_templates;\n+\n+/* Nonzero means generate separate instantiation control files and\n+   juggle them at link time.  */\n+\n+extern int flag_use_repository;\n+\n+/* Nonzero if we want to issue diagnostics that the standard says are not\n+   required.  */\n+\n+extern int flag_optional_diags;\n+\n+/* Nonzero means we should attempt to elide constructors when possible.  */\n+\n+extern int flag_elide_constructors;\n+\n+/* Nonzero means that member functions defined in class scope are\n+   inline by default.  */\n+\n+extern int flag_default_inline;\n+\n+/* Controls whether compiler generates 'type descriptor' that give\n+   run-time type information.  */\n+\n+extern int flag_rtti;\n+\n+/* Nonzero if we want to conserve space in the .o files.  We do this\n+   by putting uninitialized data and runtime initialized data into\n+   .common instead of .data at the expense of not flagging multiple\n+   definitions.  */\n+\n+extern int flag_conserve_space;\n+\n+/* Nonzero if we want to obey access control semantics.  */\n+\n+extern int flag_access_control;\n+\n+/* Nonzero if we want to check the return value of new and avoid calling\n+   constructors if it is a null pointer.  */\n+\n+extern int flag_check_new;\n+\n+/* Nonzero if we want the new ISO rules for pushing a new scope for `for'\n+   initialization variables.\n+   0: Old rules, set by -fno-for-scope.\n+   2: New ISO rules, set by -ffor-scope.\n+   1: Try to implement new ISO rules, but with backup compatibility\n+   (and warnings).  This is the default, for now.  */\n+\n+extern int flag_new_for_scope;\n+\n+/* Nonzero if we want to emit defined symbols with common-like linkage as\n+   weak symbols where possible, in order to conform to C++ semantics.\n+   Otherwise, emit them as local symbols.  */\n+\n+extern int flag_weak;\n+\n+/* Nonzero to use __cxa_atexit, rather than atexit, to register\n+   destructors for local statics and global objects.  */\n+\n+extern int flag_use_cxa_atexit;\n+\n+/* Nonzero means output .vtable_{entry,inherit} for use in doing vtable gc.  */\n+\n+extern int flag_vtable_gc;\n+\n+/* Nonzero means make the default pedwarns warnings instead of errors.\n+   The value of this flag is ignored if -pedantic is specified.  */\n+\n+extern int flag_permissive;\n+\n+/* Nonzero means to implement standard semantics for exception\n+   specifications, calling unexpected if an exception is thrown that\n+   doesn't match the specification.  Zero means to treat them as\n+   assertions and optimize accordingly, but not check them.  */\n+\n+extern int flag_enforce_eh_specs;\n+\n+/* Nonzero means warn about implicit declarations.  */\n+\n+extern int warn_implicit;\n+\n+/* Nonzero means warn when all ctors or dtors are private, and the class\n+   has no friends.  */\n+\n+extern int warn_ctor_dtor_privacy;\n+\n+/* Non-zero means warn in function declared in derived class has the\n+   same name as a virtual in the base class, but fails to match the\n+   type signature of any virtual function in the base class.  */\n+\n+extern int warn_overloaded_virtual;\n+\n+/* Non-zero means warn when declaring a class that has a non virtual\n+   destructor, when it really ought to have a virtual one.  */\n+\n+extern int warn_nonvdtor;\n+\n+/* Non-zero means warn when the compiler will reorder code.  */\n+\n+extern int warn_reorder;\n+\n+/* Non-zero means warn when synthesis behavior differs from Cfront's.  */\n+\n+extern int warn_synth;\n+\n+/* Non-zero means warn when we convert a pointer to member function\n+   into a pointer to (void or function).  */\n+\n+extern int warn_pmf2ptr;\n+\n+/* Nonzero means warn about violation of some Effective C++ style rules.  */\n+\n+extern int warn_ecpp;\n+\n+/* Nonzero means warn where overload resolution chooses a promotion from\n+   unsigned to signed over a conversion to an unsigned of the same size.  */\n+\n+extern int warn_sign_promo;\n+\n+/* Nonzero means warn when an old-style cast is used.  */\n+\n+extern int warn_old_style_cast;\n+\n+/* Nonzero means warn when non-templatized friend functions are\n+   declared within a template */\n+\n+extern int warn_nontemplate_friend;\n+\n+/* Nonzero means complain about deprecated features.  */\n+\n+extern int warn_deprecated;\n+\n+/* Maximum template instantiation depth.  This limit is rather\n+   arbitrary, but it exists to limit the time it takes to notice\n+   infinite template instantiations.  */\n+\n+extern int max_tinst_depth;\n \n-extern int warn_conversion;\n \n-/* Nonzero means warn about usage of long long,\n-   when `-pedantic' and not C99.  */\n \n-extern int warn_long_long;\n \n /* C types are partitioned into three subsets: object, function, and\n    incomplete types.  */"}, {"sha": "aed707db6eb61db53c8ddca0369a4eaeb4b57cdc", "filename": "gcc/c-decl.c", "status": "modified", "additions": 0, "deletions": 144, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4078b403a7dc806f4521f3600b524bed55309515/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4078b403a7dc806f4521f3600b524bed55309515/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=4078b403a7dc806f4521f3600b524bed55309515", "patch": "@@ -283,150 +283,6 @@ static tree c_make_fname_decl           PARAMS ((tree, int));\n static void c_expand_body               PARAMS ((tree, int, int));\n static void warn_if_shadowing\t\tPARAMS ((tree, tree));\n \f\n-/* C-specific option variables.  */\n-\n-/* Nonzero means allow type mismatches in conditional expressions;\n-   just make their values `void'.  */\n-\n-int flag_cond_mismatch;\n-\n-/* Nonzero means don't recognize the keyword `asm'.  */\n-\n-int flag_no_asm;\n-\n-/* Nonzero means enable C89 Amendment 1 features.  */\n-\n-int flag_isoc94 = 0;\n-\n-/* Nonzero means use the ISO C99 dialect of C.  */\n-\n-int flag_isoc99 = 0;\n-\n-/* Nonzero means that we have builtin functions, and main is an int */\n-\n-int flag_hosted = 1;\n-\n-/* Nonzero means add default format_arg attributes for functions not\n-   in ISO C.  */\n-\n-int flag_noniso_default_format_attributes = 1;\n-\n-/* Nonzero means to treat bitfields as signed unless they say `unsigned'.  */\n-\n-int flag_signed_bitfields = 1;\n-int explicit_flag_signed_bitfields = 0;\n-\n-/* Nonzero means warn about use of implicit int.  */\n-\n-int warn_implicit_int;\n-\n-/* Nonzero means warn about usage of long long when `-pedantic'.  */\n-\n-int warn_long_long = 1;\n-\n-/* Nonzero means message about use of implicit function declarations;\n- 1 means warning; 2 means error.  */\n-\n-int mesg_implicit_function_declaration = -1;\n-\n-/* Nonzero means give string constants the type `const char *'\n-   to get extra warnings from them.  These warnings will be too numerous\n-   to be useful, except in thoroughly ANSIfied programs.  */\n-\n-int flag_const_strings;\n-\n-/* Nonzero means warn about pointer casts that can drop a type qualifier\n-   from the pointer target type.  */\n-\n-int warn_cast_qual;\n-\n-/* Nonzero means warn when casting a function call to a type that does\n-   not match the return type (e.g. (float)sqrt() or (anything*)malloc()\n-   when there is no previous declaration of sqrt or malloc.  */\n-\n-int warn_bad_function_cast;\n-\n-/* Warn about functions which might be candidates for format attributes.  */\n-\n-int warn_missing_format_attribute;\n-\n-/* Warn about traditional constructs whose meanings changed in ANSI C.  */\n-\n-int warn_traditional;\n-\n-/* Nonzero means warn about sizeof(function) or addition/subtraction\n-   of function pointers.  */\n-\n-int warn_pointer_arith;\n-\n-/* Nonzero means warn for non-prototype function decls\n-   or non-prototyped defs without previous prototype.  */\n-\n-int warn_strict_prototypes;\n-\n-/* Nonzero means warn for any global function def\n-   without separate previous prototype decl.  */\n-\n-int warn_missing_prototypes;\n-\n-/* Nonzero means warn for any global function def\n-   without separate previous decl.  */\n-\n-int warn_missing_declarations;\n-\n-/* Nonzero means warn about multiple (redundant) decls for the same single\n-   variable or function.  */\n-\n-int warn_redundant_decls = 0;\n-\n-/* Nonzero means warn about extern declarations of objects not at\n-   file-scope level and about *all* declarations of functions (whether\n-   extern or static) not at file-scope level.  Note that we exclude\n-   implicit function declarations.  To get warnings about those, use\n-   -Wimplicit.  */\n-\n-int warn_nested_externs = 0;\n-\n-/* Warn about a subscript that has type char.  */\n-\n-int warn_char_subscripts = 0;\n-\n-/* Warn if a type conversion is done that might have confusing results.  */\n-\n-int warn_conversion;\n-\n-/* Warn if adding () is suggested.  */\n-\n-int warn_parentheses;\n-\n-/* Warn if initializer is not completely bracketed.  */\n-\n-int warn_missing_braces;\n-\n-/* Warn if main is suspicious.  */\n-\n-int warn_main;\n-\n-/* Warn about #pragma directives that are not recognised.  */\n-\n-int warn_unknown_pragmas = 0; /* Tri state variable.  */\n-\n-/* Warn about comparison of signed and unsigned values.\n-   If -1, neither -Wsign-compare nor -Wno-sign-compare has been specified.  */\n-\n-int warn_sign_compare = -1;\n-\n-/* Warn about testing equality of floating point numbers.  */\n-\n-int warn_float_equal = 0;\n-\n-/* Nonzero means `$' can be in an identifier.  */\n-\n-#ifndef DOLLARS_IN_IDENTIFIERS\n-#define DOLLARS_IN_IDENTIFIERS 1\n-#endif\n-int dollars_in_ident = DOLLARS_IN_IDENTIFIERS;\n-\n /* States indicating how grokdeclarator() should handle declspecs marked\n    with __attribute__((deprecated)).  An object declared as\n    __attribute__((deprecated)) suppresses warnings of uses of other"}, {"sha": "959022fc84bce46b505832807b61f3c02f2aab0e", "filename": "gcc/c-format.c", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4078b403a7dc806f4521f3600b524bed55309515/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4078b403a7dc806f4521f3600b524bed55309515/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=4078b403a7dc806f4521f3600b524bed55309515", "patch": "@@ -29,33 +29,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"diagnostic.h\"\n #include \"langhooks.h\"\n \f\n-/* Command line options and their associated flags.  */\n-\n-/* Warn about format/argument anomalies in calls to formatted I/O functions\n-   (*printf, *scanf, strftime, strfmon, etc.).  */\n-\n-int warn_format;\n-\n-/* Warn about Y2K problems with strftime formats.  */\n-\n-int warn_format_y2k;\n-\n-/* Warn about excess arguments to formats.  */\n-\n-int warn_format_extra_args;\n-\n-/* Warn about zero-length formats.  */\n-\n-int warn_format_zero_length;\n-\n-/* Warn about non-literal format arguments.  */\n-\n-int warn_format_nonliteral;\n-\n-/* Warn about possible security problems with calls to format functions.  */\n-\n-int warn_format_security;\n-\n /* Set format warning options according to a -Wformat=n option.  */\n \n void"}, {"sha": "348619b763af48b48f04dddd714314ef7254be4a", "filename": "gcc/c-tree.h", "status": "modified", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4078b403a7dc806f4521f3600b524bed55309515/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4078b403a7dc806f4521f3600b524bed55309515/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=4078b403a7dc806f4521f3600b524bed55309515", "patch": "@@ -317,82 +317,10 @@ extern int current_function_returns_abnormally;\n \n extern int skip_evaluation;\n \n-/* Nonzero means `$' can be in an identifier.  */\n-\n-extern int dollars_in_ident;\n-\n-/* Nonzero means allow type mismatches in conditional expressions;\n-   just make their values `void'.  */\n-\n-extern int flag_cond_mismatch;\n-\n-/* Nonzero means don't recognize the keyword `asm'.  */\n-\n-extern int flag_no_asm;\n-\n-/* Nonzero means warn about implicit declarations.  */\n-\n-extern int warn_implicit;\n-\n-/* Nonzero means warn for all old-style non-prototype function decls.  */\n-\n-extern int warn_strict_prototypes;\n-\n-/* Nonzero means warn about multiple (redundant) decls for the same single\n-   variable or function.  */\n-\n-extern int warn_redundant_decls;\n-\n-/* Nonzero means warn about extern declarations of objects not at\n-   file-scope level and about *all* declarations of functions (whether\n-   extern or static) not at file-scope level.  Note that we exclude\n-   implicit function declarations.  To get warnings about those, use\n-   -Wimplicit.  */\n-\n-extern int warn_nested_externs;\n-\n-/* Nonzero means warn about pointer casts that can drop a type qualifier\n-   from the pointer target type.  */\n-\n-extern int warn_cast_qual;\n-\n-/* Nonzero means warn when casting a function call to a type that does\n-   not match the return type (e.g. (float)sqrt() or (anything*)malloc()\n-   when there is no previous declaration of sqrt or malloc.  */\n-\n-extern int warn_bad_function_cast;\n-\n-/* Warn about traditional constructs whose meanings changed in ANSI C.  */\n-\n-extern int warn_traditional;\n-\n-/* Warn about a subscript that has type char.  */\n-\n-extern int warn_char_subscripts;\n-\n-/* Warn if main is suspicious.  */\n-\n-extern int warn_main;\n-\n-/* Warn if initializer is not completely bracketed.  */\n-\n-extern int warn_missing_braces;\n-\n-/* Warn about comparison of signed and unsigned values.  */\n-\n-extern int warn_sign_compare;\n-\n-/* Warn about testing equality of floating point numbers.  */\n-\n-extern int warn_float_equal;\n-\n /* Nonzero means we are reading code that came from a system header file.  */\n \n extern int system_header_p;\n \n-/* Warn about implicit declarations.  1 = warning, 2 = error.  */\n-extern int mesg_implicit_function_declaration;\n-\n /* In c-decl.c */\n extern void c_finish_incomplete_decl PARAMS ((tree));\n "}, {"sha": "84b1a98acd2324ed5154999b2698a080ede491c6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4078b403a7dc806f4521f3600b524bed55309515/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4078b403a7dc806f4521f3600b524bed55309515/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4078b403a7dc806f4521f3600b524bed55309515", "patch": "@@ -1,3 +1,11 @@\n+2002-08-01  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* cp-tree.h: Move all warning and flag declarations to c-common.h.\n+\t* decl.c: Move all warning and flag variables to c-common.c.\n+\t* decl2.c: Move all warning and flag variables to c-common.c.\n+\t* lex.c (flag_digraphs): Remove.\n+\t(warn_traditional): Now in c-common.c.\n+\n 2002-07-31  Mark Mitchell  <mark@codesourcery.com>\n \n \t* call.c (build_field_call): Do not look up the field by name."}, {"sha": "711fd8113e00952a8f96f95b199bbab8536af3c4", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 185, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4078b403a7dc806f4521f3600b524bed55309515/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4078b403a7dc806f4521f3600b524bed55309515/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4078b403a7dc806f4521f3600b524bed55309515", "patch": "@@ -213,23 +213,6 @@ struct diagnostic_context;\n \n #endif\n \n-\f\n-/* ABI control.  */\n-\n-/* Nonzero to use __cxa_atexit, rather than atexit, to register\n-   destructors for local statics and global objects.  */\n-\n-extern int flag_use_cxa_atexit;\n-\n-/* Nonzero means generate 'rtti' that give run-time type information.  */\n-\n-extern int flag_rtti;\n-\n-/* Nonzero if we want to support huge (> 2^(sizeof(short)*8-1) bytes)\n-   objects.  */\n-\n-extern int flag_huge_objects;\n-\n \f\n /* Language-dependent contents of an identifier.  */\n \n@@ -948,143 +931,12 @@ extern GTY(()) tree global_namespace;\n #define ansi_assopname(CODE) \\\n   (assignment_operator_name_info[(int) (CODE)].identifier)\n \n-/* Nonzero means `$' can be in an identifier.  */\n-\n-extern int dollars_in_ident;\n-\n-/* Nonzero means don't recognize the keyword `asm'.  */\n-\n-extern int flag_no_asm;\n-\n-/* Nonzero means don't recognize any extended keywords.  */\n-\n-extern int flag_no_gnu_keywords;\n-\n-/* For environments where you can use GNU binutils (as, ld in particular).  */\n-\n-extern int flag_gnu_binutils;\n-\n-/* Nonzero means warn about implicit declarations.  */\n-\n-extern int warn_implicit;\n-\n-/* Nonzero means warn when all ctors or dtors are private, and the class\n-   has no friends.  */\n-\n-extern int warn_ctor_dtor_privacy;\n-\n-/* Nonzero means warn about deprecated conversion from string constant to\n-   `char *'.  */\n-\n-extern int warn_write_strings;\n-\n-/* Nonzero means warn about multiple (redundant) decls for the same single\n-   variable or function.  */\n-\n-extern int warn_redundant_decls;\n-\n-/* Warn if initializer is not completely bracketed.  */\n-\n-extern int warn_missing_braces;\n-\n-/* Warn about comparison of signed and unsigned values.  */\n-\n-extern int warn_sign_compare;\n-\n-/* Warn about testing equality of floating point numbers. */\n-\n-extern int warn_float_equal;\n-\n-/* Warn about a subscript that has type char.  */\n-\n-extern int warn_char_subscripts;\n-\n-/* Nonzero means warn about pointer casts that can drop a type qualifier\n-   from the pointer target type.  */\n-\n-extern int warn_cast_qual;\n-\n-/* Nonzero means warn about non virtual destructors in classes that have\n-   virtual functions.  */\n-\n-extern int warn_nonvdtor;\n-\n-/* Non-zero means warn when we convert a pointer to member function\n-   into a pointer to (void or function).  */\n-\n-extern int warn_pmf2ptr;\n-\n-/* Nonzero means warn about violation of some Effective C++ style rules.  */\n-\n-extern int warn_ecpp;\n-\n-/* Nonzero means warn where overload resolution chooses a promotion from\n-   unsigned to signed over a conversion to an unsigned of the same size.  */\n-\n-extern int warn_sign_promo;\n-\n-/* Non-zero means warn when an old-style cast is used.  */\n-\n-extern int warn_old_style_cast;\n-\n-/* Non-zero means warn when the compiler will reorder code.  */\n-\n-extern int warn_reorder;\n-\n-/* Non-zero means warn about deprecated features.  */\n-\n-extern int warn_deprecated;\n-\n-/* Nonzero means to treat bitfields as unsigned unless they say `signed'.  */\n-\n-extern int flag_signed_bitfields;\n-\n /* INTERFACE_ONLY nonzero means that we are in an \"interface\"\n    section of the compiler.  INTERFACE_UNKNOWN nonzero means\n    we cannot trust the value of INTERFACE_ONLY.  If INTERFACE_UNKNOWN\n    is zero and INTERFACE_ONLY is zero, it means that we are responsible\n    for exporting definitions that others might need.  */\n extern int interface_only, interface_unknown;\n-\n-/* Nonzero means we should attempt to elide constructors when possible.  */\n-\n-extern int flag_elide_constructors;\n-\n-/* Nonzero means that member functions defined in class scope are\n-   inline by default.  */\n-\n-extern int flag_default_inline;\n-\n-/* Nonzero means generate separate instantiation control files and juggle\n-   them at link time.  */\n-extern int flag_use_repository;\n-\n-/* Nonzero if we want to issue diagnostics that the standard says are not\n-   required.  */\n-extern int flag_optional_diags;\n-\n-/* Nonzero means output .vtable_{entry,inherit} for use in doing vtable gc.  */\n-extern int flag_vtable_gc;\n-\n-/* Nonzero means make the default pedwarns warnings instead of errors.\n-   The value of this flag is ignored if -pedantic is specified.  */\n-extern int flag_permissive;\n-\n-/* Nonzero means to implement standard semantics for exception\n-   specifications, calling unexpected if an exception is thrown that\n-   doesn't match the specification.  Zero means to treat them as\n-   assertions and optimize accordingly, but not check them.  */\n-extern int flag_enforce_eh_specs;\n-\n-/* Nonzero if we want to obey access control semantics.  */\n-\n-extern int flag_access_control;\n-\n-/* Nonzero if we want to check the return value of new and avoid calling\n-   constructors if it is a null pointer.  */\n-\n-extern int flag_check_new;\n-\n \f\n /* C++ language-specific tree codes.  */\n #define DEFTREECODE(SYM, NAME, TYPE, LENGTH) SYM,\n@@ -2517,8 +2369,6 @@ struct lang_decl GTY(())\n   (TYPE_POLYMORPHIC_P (NODE)\t\t\t\\\n    || TYPE_USES_VIRTUAL_BASECLASSES (NODE))\n \n-extern int flag_new_for_scope;\n-\n /* This flag is true of a local VAR_DECL if it was declared in a for\n    statement, but we are no longer in the scope of the for.  */\n #define DECL_DEAD_FOR_LOCAL(NODE) DECL_LANG_FLAG_7 (VAR_DECL_CHECK (NODE))\n@@ -3235,21 +3085,11 @@ typedef enum base_kind {\n \t\t\t     binfo. */\n } base_kind;\n \n-/* Non-zero means warn in function declared in derived class has the\n-   same name as a virtual in the base class, but fails to match the\n-   type signature of any virtual function in the base class.  */\n-extern int warn_overloaded_virtual;\n-\n /* Set by add_implicitly_declared_members() to keep those members from\n    being flagged as deprecated or reported as using deprecated\n    types.  */\n extern int adding_implicit_members;\n \n-/* Non-zero means warn if a non-templatized friend function is\n-   declared in a templatized class. This behavior is warned about with\n-   flag_guiding_decls in do_friend. */\n-extern int warn_nontemplate_friend;\n-\n /* in decl{2}.c */\n /* A node that is a list (length 1) of error_mark_nodes.  */\n extern GTY(()) tree error_mark_list;\n@@ -3424,31 +3264,6 @@ extern GTY(()) varray_type local_classes;\n     && MAIN_NAME_P (DECL_NAME (NODE)))\n \n \f\n-/* Things for handling inline functions.  */\n-\n-/* Nonzero means do emit exported implementations of functions even if\n-   they can be inlined.  */\n-\n-extern int flag_implement_inlines;\n-\n-/* Nonzero means templates obey #pragma interface and implementation.  */\n-\n-extern int flag_external_templates;\n-\n-/* Nonzero means templates are emitted where they are instantiated.  */\n-\n-extern int flag_alt_external_templates;\n-\n-/* Nonzero means implicit template instantiations are emitted.  */\n-\n-extern int flag_implicit_templates;\n-\n-/* Nonzero if we want to emit defined symbols with common-like linkage as\n-   weak symbols where possible, in order to conform to C++ semantics.\n-   Otherwise, emit them as local symbols.  */\n-\n-extern int flag_weak;\n-\n /* Nonzero if we're done parsing and into end-of-file activities.  */\n \n extern int at_eof;"}, {"sha": "f64ba299cb5fde7b0152e1616298d1ae7798771c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4078b403a7dc806f4521f3600b524bed55309515/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4078b403a7dc806f4521f3600b524bed55309515/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=4078b403a7dc806f4521f3600b524bed55309515", "patch": "@@ -255,32 +255,7 @@ struct named_label_list GTY(())\n };\n \n #define named_labels cp_function_chain->x_named_labels\n-\n-/* Nonzero means use the ISO C94 dialect of C.  */\n-\n-int flag_isoc94;\n-\n-/* Nonzero means use the ISO C99 dialect of C.  */\n-\n-int flag_isoc99;\n-\n-/* Nonzero means we are a hosted implementation for code shared with C.  */\n-\n-int flag_hosted = 1;\n-\n-/* Nonzero means add default format_arg attributes for functions not\n-   in ISO C.  */\n-\n-int flag_noniso_default_format_attributes = 1;\n-\n-/* Nonzero if we want to conserve space in the .o files.  We do this\n-   by putting uninitialized data and runtime initialized data into\n-   .common instead of .data at the expense of not flagging multiple\n-   definitions.  */\n-extern int flag_conserve_space;\n \f\n-/* C and C++ flags are in decl2.c.  */\n-\n /* The name of the anonymous namespace, throughout this translation\n    unit.  */\n tree anonymous_namespace_name;"}, {"sha": "cd02ae662542dcc21b8e8b72ef10627224d4ccfd", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 0, "deletions": 256, "changes": 256, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4078b403a7dc806f4521f3600b524bed55309515/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4078b403a7dc806f4521f3600b524bed55309515/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=4078b403a7dc806f4521f3600b524bed55309515", "patch": "@@ -122,262 +122,6 @@ tree static_dtors;\n \n tree global_namespace;\n \f\n-/* C (and C++) language-specific option variables.  */\n-\n-/* Nonzero means don't recognize the keyword `asm'.  */\n-\n-int flag_no_asm;\n-\n-/* Nonzero means don't recognize any extension keywords.  */\n-\n-int flag_no_gnu_keywords;\n-\n-/* Nonzero means to treat bitfields as unsigned unless they say `signed'.  */\n-\n-int flag_signed_bitfields = 1;\n-\n-/* Nonzero means do emit exported implementations of functions even if\n-   they can be inlined.  */\n-\n-int flag_implement_inlines = 1;\n-\n-/* Nonzero means do emit exported implementations of templates, instead of\n-   multiple static copies in each file that needs a definition.  */\n-\n-int flag_external_templates;\n-\n-/* Nonzero means that the decision to emit or not emit the implementation of a\n-   template depends on where the template is instantiated, rather than where\n-   it is defined.  */\n-\n-int flag_alt_external_templates;\n-\n-/* Nonzero means that implicit instantiations will be emitted if needed.  */\n-\n-int flag_implicit_templates = 1;\n-\n-/* Nonzero means that implicit instantiations of inline templates will be\n-   emitted if needed, even if instantiations of non-inline templates\n-   aren't.  */\n-\n-int flag_implicit_inline_templates = 1;\n-\n-/* Nonzero means warn about implicit declarations.  */\n-\n-int warn_implicit = 1;\n-\n-/* Nonzero means warn about usage of long long when `-pedantic'.  */\n-\n-int warn_long_long = 1;\n-\n-/* Nonzero means warn when all ctors or dtors are private, and the class\n-   has no friends.  */\n-\n-int warn_ctor_dtor_privacy = 1;\n-\n-/* Nonzero means generate separate instantiation control files and juggle\n-   them at link time.  */\n-\n-int flag_use_repository;\n-\n-/* Nonzero if we want to issue diagnostics that the standard says are not\n-   required.  */\n-\n-int flag_optional_diags = 1;\n-\n-/* Nonzero means give string constants the type `const char *', as mandated\n-   by the standard.  */\n-\n-int flag_const_strings = 1;\n-\n-/* Nonzero means warn about deprecated conversion from string constant to\n-   `char *'.  */\n-\n-int warn_write_strings;\n-\n-/* Nonzero means warn about pointer casts that can drop a type qualifier\n-   from the pointer target type.  */\n-\n-int warn_cast_qual;\n-\n-/* Nonzero means warn about sizeof(function) or addition/subtraction\n-   of function pointers.  */\n-\n-int warn_pointer_arith = 1;\n-\n-/* Nonzero means warn for any function def without prototype decl.  */\n-\n-int warn_missing_prototypes;\n-\n-/* Nonzero means warn about multiple (redundant) decls for the same single\n-   variable or function.  */\n-\n-int warn_redundant_decls;\n-\n-/* Warn if initializer is not completely bracketed.  */\n-\n-int warn_missing_braces;\n-\n-/* Warn about comparison of signed and unsigned values.  */\n-\n-int warn_sign_compare;\n-\n-/* Warn about testing equality of floating point numbers. */\n-\n-int warn_float_equal = 0;\n-\n-/* Warn about functions which might be candidates for format attributes.  */\n-\n-int warn_missing_format_attribute;\n-\n-/* Warn about a subscript that has type char.  */\n-\n-int warn_char_subscripts;\n-\n-/* Warn if a type conversion is done that might have confusing results.  */\n-\n-int warn_conversion;\n-\n-/* Warn if adding () is suggested.  */\n-\n-int warn_parentheses;\n-\n-/* Non-zero means warn in function declared in derived class has the\n-   same name as a virtual in the base class, but fails to match the\n-   type signature of any virtual function in the base class.  */\n-\n-int warn_overloaded_virtual;\n-\n-/* Non-zero means warn when declaring a class that has a non virtual\n-   destructor, when it really ought to have a virtual one.  */\n-\n-int warn_nonvdtor;\n-\n-/* Non-zero means warn when the compiler will reorder code.  */\n-\n-int warn_reorder;\n-\n-/* Non-zero means warn when synthesis behavior differs from Cfront's.  */\n-\n-int warn_synth;\n-\n-/* Non-zero means warn when we convert a pointer to member function\n-   into a pointer to (void or function).  */\n-\n-int warn_pmf2ptr = 1;\n-\n-/* Nonzero means warn about violation of some Effective C++ style rules.  */\n-\n-int warn_ecpp;\n-\n-/* Nonzero means warn where overload resolution chooses a promotion from\n-   unsigned to signed over a conversion to an unsigned of the same size.  */\n-\n-int warn_sign_promo;\n-\n-/* Nonzero means warn when an old-style cast is used.  */\n-\n-int warn_old_style_cast;\n-\n-/* Warn about #pragma directives that are not recognised.  */      \n-\n-int warn_unknown_pragmas; /* Tri state variable.  */  \n-\n-/* Nonzero means warn when non-templatized friend functions are\n-   declared within a template */\n-\n-int warn_nontemplate_friend = 1;\n-\n-/* Nonzero means complain about deprecated features.  */\n-\n-int warn_deprecated = 1;\n-\n-/* Nonzero means `$' can be in an identifier.  */\n-\n-#ifndef DOLLARS_IN_IDENTIFIERS\n-#define DOLLARS_IN_IDENTIFIERS 1\n-#endif\n-int dollars_in_ident = DOLLARS_IN_IDENTIFIERS;\n-\n-/* C++ specific flags.  */   \n-\n-/* Nonzero means we should attempt to elide constructors when possible.  */\n-\n-int flag_elide_constructors = 1;\n-\n-/* Nonzero means that member functions defined in class scope are\n-   inline by default.  */\n-\n-int flag_default_inline = 1;\n-\n-/* Controls whether compiler generates 'type descriptor' that give\n-   run-time type information.  */\n-\n-int flag_rtti = 1;\n-\n-/* Nonzero if we want to support huge (> 2^(sizeof(short)*8-1) bytes)\n-   objects.  */\n-\n-int flag_huge_objects;\n-\n-/* Nonzero if we want to conserve space in the .o files.  We do this\n-   by putting uninitialized data and runtime initialized data into\n-   .common instead of .data at the expense of not flagging multiple\n-   definitions.  */\n-\n-int flag_conserve_space;\n-\n-/* Nonzero if we want to obey access control semantics.  */\n-\n-int flag_access_control = 1;\n-\n-/* Nonzero if we want to check the return value of new and avoid calling\n-   constructors if it is a null pointer.  */\n-\n-int flag_check_new;\n-\n-/* Nonzero if we want the new ISO rules for pushing a new scope for `for'\n-   initialization variables.\n-   0: Old rules, set by -fno-for-scope.\n-   2: New ISO rules, set by -ffor-scope.\n-   1: Try to implement new ISO rules, but with backup compatibility\n-   (and warnings).  This is the default, for now.  */\n-\n-int flag_new_for_scope = 1;\n-\n-/* Nonzero if we want to emit defined symbols with common-like linkage as\n-   weak symbols where possible, in order to conform to C++ semantics.\n-   Otherwise, emit them as local symbols.  */\n-\n-int flag_weak = 1;\n-\n-/* Nonzero to use __cxa_atexit, rather than atexit, to register\n-   destructors for local statics and global objects.  */\n-\n-int flag_use_cxa_atexit = DEFAULT_USE_CXA_ATEXIT;\n-\n-/* Maximum template instantiation depth.  This limit is rather\n-   arbitrary, but it exists to limit the time it takes to notice\n-   infinite template instantiations.  */\n-\n-int max_tinst_depth = 500;\n-\n-/* Nonzero means output .vtable_{entry,inherit} for use in doing vtable gc.  */\n-\n-int flag_vtable_gc;\n-\n-/* Nonzero means make the default pedwarns warnings instead of errors.\n-   The value of this flag is ignored if -pedantic is specified.  */\n-\n-int flag_permissive;\n-\n-/* Nonzero means to implement standard semantics for exception\n-   specifications, calling unexpected if an exception is thrown that\n-   doesn't match the specification.  Zero means to treat them as\n-   assertions and optimize accordingly, but not check them.  */\n-\n-int flag_enforce_eh_specs = 1;\n-\n /* Table of language-dependent -f options.\n    STRING is the option name.  VARIABLE is the address of the variable.\n    ON_VALUE is the value to store in VARIABLE"}, {"sha": "183efd72ca5cec64f92b2203f2e9adf011834697", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4078b403a7dc806f4521f3600b524bed55309515/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4078b403a7dc806f4521f3600b524bed55309515/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=4078b403a7dc806f4521f3600b524bed55309515", "patch": "@@ -81,11 +81,6 @@ extern int yychar;\t\t/*  the lookahead symbol\t\t*/\n extern YYSTYPE yylval;\t\t/*  the semantic value of the\t\t*/\n \t\t\t\t/*  lookahead symbol\t\t\t*/\n \n-/* These flags are used by c-lex.c.  In C++, they're always off and on,\n-   respectively.  */\n-int warn_traditional = 0;\n-int flag_digraphs = 1;\n-\n /* the declaration found for the last IDENTIFIER token read in.  yylex\n    must look this up to detect typedefs, which get token type\n    tTYPENAME, so it is left around in case the identifier is not a"}, {"sha": "2ea47bc2ec90a3730a72056b2e526eb411da6ac5", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 4, "deletions": 35, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4078b403a7dc806f4521f3600b524bed55309515/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4078b403a7dc806f4521f3600b524bed55309515/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=4078b403a7dc806f4521f3600b524bed55309515", "patch": "@@ -324,8 +324,6 @@ static void generate_struct_by_value_array\tPARAMS ((void))\n \n #define PROTOCOL_OBJECT_CLASS_NAME \"Protocol\"\n \n-static const char *constant_string_class_name = NULL;\n-\n static const char *TAG_GETCLASS;\n static const char *TAG_GETMETACLASS;\n static const char *TAG_MSGSEND;\n@@ -356,46 +354,17 @@ extern enum debug_info_type write_symbols;\n \n extern const char *dump_base_name;\n \f\n-/* Generate code for GNU or NeXT runtime environment.  */\n-\n-#ifdef NEXT_OBJC_RUNTIME\n-int flag_next_runtime = 1;\n-#else\n-int flag_next_runtime = 0;\n-#endif\n-\n-int flag_typed_selectors;\n-\n-/* Open and close the file for outputting class declarations, if requested.  */\n-\n-int flag_gen_declaration = 0;\n+static int flag_typed_selectors;\n \n FILE *gen_declaration_file;\n \n-/* Warn if multiple methods are seen for the same selector, but with\n-   different argument types.  */\n-\n-int warn_selector = 0;\n-\n-/* Warn if methods required by a protocol are not implemented in the \n-   class adopting it.  When turned off, methods inherited to that\n-   class are also considered implemented */\n-\n-int flag_warn_protocol = 1;\n-\n /* Tells \"encode_pointer/encode_aggregate\" whether we are generating\n    type descriptors for instance variables (as opposed to methods).\n    Type descriptors for instance variables contain more information\n    than methods (for static typing and embedded structures).  */\n \n static int generating_instance_variables = 0;\n \n-/* Tells the compiler that this is a special run.  Do not perform any\n-   compiling, instead we are to test some platform dependent features\n-   and output a C header file with appropriate definitions.  */\n-\n-static int print_struct_values = 0;\n-\n /* Some platforms pass small structures through registers versus\n    through an invisible pointer.  Determine at what size structure is\n    the transition point between the two possibilities.  */\n@@ -540,9 +509,9 @@ objc_decode_option (argc, argv)\n   else if (!strcmp (p, \"-Wno-selector\"))\n     warn_selector = 0;\n   else if (!strcmp (p, \"-Wprotocol\"))\n-    flag_warn_protocol = 1;\n+    warn_protocol = 1;\n   else if (!strcmp (p, \"-Wno-protocol\"))\n-    flag_warn_protocol = 0;\n+    warn_protocol = 0;\n   else if (!strcmp (p, \"-fgnu-runtime\"))\n     flag_next_runtime = 0;\n   else if (!strcmp (p, \"-fno-next-runtime\"))\n@@ -5878,7 +5847,7 @@ check_protocol (p, type, name)\n       int f1, f2;\n \n       /* Ensure that all protocols have bodies!  */\n-      if (flag_warn_protocol)\n+      if (warn_protocol)\n \t{\n \t  f1 = check_methods (PROTOCOL_CLS_METHODS (p),\n \t\t\t      CLASS_CLS_METHODS (objc_implementation_context),"}]}