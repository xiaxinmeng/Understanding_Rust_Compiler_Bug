{"sha": "1f7273e5dbd7e59cb97111d2d2bc73c896e12c1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY3MjczZTVkYmQ3ZTU5Y2I5NzExMWQyZDJiYzczYzg5NmUxMmMxZg==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2018-01-13T21:01:27Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2018-01-13T21:01:27Z"}, "message": "Allow for lack of VM_MEMORY_OS_ALLOC_ONCE on Mac OS X (PR sanitizer/82824)\n\n\tPR sanitizer/82824\n\t* lsan/lsan_common_mac.cc: Cherry-pick upstream r322437.\n\nFrom-SVN: r256650", "tree": {"sha": "185838565b0af4b1c82f033264b064fd673e689c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/185838565b0af4b1c82f033264b064fd673e689c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f7273e5dbd7e59cb97111d2d2bc73c896e12c1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f7273e5dbd7e59cb97111d2d2bc73c896e12c1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f7273e5dbd7e59cb97111d2d2bc73c896e12c1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f7273e5dbd7e59cb97111d2d2bc73c896e12c1f/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f208c5ccc76fe9f15776e62d466ccb8f565d2284", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f208c5ccc76fe9f15776e62d466ccb8f565d2284", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f208c5ccc76fe9f15776e62d466ccb8f565d2284"}], "stats": {"total": 14, "additions": 13, "deletions": 1}, "files": [{"sha": "2f57f6acd8252b9b9f823d165a2288506323baed", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f7273e5dbd7e59cb97111d2d2bc73c896e12c1f/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f7273e5dbd7e59cb97111d2d2bc73c896e12c1f/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=1f7273e5dbd7e59cb97111d2d2bc73c896e12c1f", "patch": "@@ -1,3 +1,8 @@\n+2018-01-13  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\tPR sanitizer/82824\n+\t* lsan/lsan_common_mac.cc: Cherry-pick upstream r322437.\n+\n 2017-12-05  Martin Liska  <mliska@suse.cz>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "6e763dab7f8627e5c0282ce336888d47dfd3f27d", "filename": "libsanitizer/lsan/lsan_common_mac.cc", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f7273e5dbd7e59cb97111d2d2bc73c896e12c1f/libsanitizer%2Flsan%2Flsan_common_mac.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f7273e5dbd7e59cb97111d2d2bc73c896e12c1f/libsanitizer%2Flsan%2Flsan_common_mac.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Flsan%2Flsan_common_mac.cc?ref=1f7273e5dbd7e59cb97111d2d2bc73c896e12c1f", "patch": "@@ -22,6 +22,13 @@\n \n #include <mach/mach.h>\n \n+// Only introduced in Mac OS X 10.9.\n+#ifdef VM_MEMORY_OS_ALLOC_ONCE\n+static const int kSanitizerVmMemoryOsAllocOnce = VM_MEMORY_OS_ALLOC_ONCE;\n+#else\n+static const int kSanitizerVmMemoryOsAllocOnce = 73;\n+#endif\n+\n namespace __lsan {\n \n typedef struct {\n@@ -155,7 +162,7 @@ void ProcessPlatformSpecificAllocations(Frontier *frontier) {\n \n     // libxpc stashes some pointers in the Kernel Alloc Once page,\n     // make sure not to report those as leaks.\n-    if (info.user_tag == VM_MEMORY_OS_ALLOC_ONCE) {\n+    if (info.user_tag == kSanitizerVmMemoryOsAllocOnce) {\n       ScanRangeForPointers(address, end_address, frontier, \"GLOBAL\",\n                            kReachable);\n "}]}