{"sha": "c7a69ce198cb28d64bfb2864fb6d3a1d57df5a7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdhNjljZTE5OGNiMjhkNjRiZmIyODY0ZmI2ZDNhMWQ1N2RmNWE3ZA==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2011-04-07T09:28:11Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2011-04-07T09:28:11Z"}, "message": "re PR target/43920 (Choosing conditional execution over conditional branches for code size in some cases.)\n\n2011-04-07  Tom de Vries  <tom@codesourcery.com>\n\n\tPR target/43920\n\t* lib/scanasm.exp (object-size): New proc.\n\t* gcc.target/arm/pr43920-2.c: New test.\n\nFrom-SVN: r172093", "tree": {"sha": "1c3164608f71336e857b8505a86236c9e809154c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c3164608f71336e857b8505a86236c9e809154c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7a69ce198cb28d64bfb2864fb6d3a1d57df5a7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7a69ce198cb28d64bfb2864fb6d3a1d57df5a7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7a69ce198cb28d64bfb2864fb6d3a1d57df5a7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7a69ce198cb28d64bfb2864fb6d3a1d57df5a7d/comments", "author": null, "committer": null, "parents": [{"sha": "823918aef31c377e62be41dc4712aea11d82ef69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/823918aef31c377e62be41dc4712aea11d82ef69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/823918aef31c377e62be41dc4712aea11d82ef69"}], "stats": {"total": 122, "additions": 122, "deletions": 0}, "files": [{"sha": "6c4b6b36d8e630c9666008979caf5d2265ecef0d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a69ce198cb28d64bfb2864fb6d3a1d57df5a7d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a69ce198cb28d64bfb2864fb6d3a1d57df5a7d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c7a69ce198cb28d64bfb2864fb6d3a1d57df5a7d", "patch": "@@ -1,3 +1,9 @@\n+2011-04-07  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR target/43920\n+\t* lib/scanasm.exp (object-size): New proc.\n+\t* gcc.target/arm/pr43920-2.c: New test.\n+\n 2011-04-06  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/18918"}, {"sha": "f647165bd6319d1fcd077c800592cc5b4b3dd9c8", "filename": "gcc/testsuite/gcc.target/arm/pr43920-2.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a69ce198cb28d64bfb2864fb6d3a1d57df5a7d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr43920-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a69ce198cb28d64bfb2864fb6d3a1d57df5a7d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr43920-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr43920-2.c?ref=c7a69ce198cb28d64bfb2864fb6d3a1d57df5a7d", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-mthumb -Os -save-temps\" }  */\n+/* { dg-require-effective-target arm_thumb2_ok } */\n+\n+#include <stdio.h>\n+\n+int getFileStartAndLength (int fd, int *start_, size_t *length_)\n+{\n+      int start, end;\n+      size_t length;\n+\n+      start = lseek (fd, 0L, SEEK_CUR);\n+      end = lseek (fd, 0L, SEEK_END);\n+\n+      if (start == -1 || end == -1)\n+         return -1;\n+\n+      length = end - start;\n+      if (length == 0)\n+         return -1;\n+\n+      *start_ = start;\n+      *length_ = length;\n+\n+      return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pop\" 2 } } */\n+/* { dg-final { scan-assembler-times \"beq\" 3 } } */\n+/* { dg-final { object-size text <= 54 } } */"}, {"sha": "fe66264d974d08850c1c4fbde5cd516386587a25", "filename": "gcc/testsuite/lib/scanasm.exp", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a69ce198cb28d64bfb2864fb6d3a1d57df5a7d/gcc%2Ftestsuite%2Flib%2Fscanasm.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a69ce198cb28d64bfb2864fb6d3a1d57df5a7d/gcc%2Ftestsuite%2Flib%2Fscanasm.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fscanasm.exp?ref=c7a69ce198cb28d64bfb2864fb6d3a1d57df5a7d", "patch": "@@ -315,6 +315,92 @@ proc scan-assembler-dem-not { args } {\n     }\n }\n \n+# Call pass if object size is ok, otherwise fail.\n+# example: /* { dg-final { object-size text <= 54 } } */\n+proc object-size { args } {\n+    global size\n+    global base_dir\n+\n+    if { [llength $args] < 3 } {\n+\terror \"object-size: too few arguments\"\n+        return\n+    }\n+    if { [llength $args] > 4 } {\n+\terror \"object-size: too many arguments\"\n+\treturn\n+    }\n+    if { [llength $args] >= 4 } {\n+\tswitch [dg-process-target [lindex $args 1]] {\n+\t    \"S\" { }\n+\t    \"N\" { return }\n+\t    \"F\" { setup_xfail \"*-*-*\" }\n+\t    \"P\" { }\n+\t}\n+    }\n+\n+    # Find size like we find g++ in g++.exp.\n+    if ![info exists size]  {\n+\tset size [findfile $base_dir/../../../binutils/size \\\n+\t\t  $base_dir/../../../binutils/size \\\n+\t\t  [findfile $base_dir/../../size $base_dir/../../size \\\n+\t\t   [findfile $base_dir/size $base_dir/size \\\n+\t\t    [transform size]]]]\n+\tverbose -log \"size is $size\"\n+    }\n+\n+    upvar 2 name testcase\n+    set testcase [lindex $testcase 0]\n+    set output_file \"[file rootname [file tail $testcase]].o\"\n+    set output [remote_exec host \"$size\" \"$output_file\"]\n+    set status [lindex $output 0]\n+    if { $status != 0 } {\n+        error \"object-size: $size failed\"\n+        return\n+    }\n+\n+    set text [lindex $output 1]\n+    set lines [split $text \"\\n\"]\n+\n+    set line0 [lindex $lines 0]\n+    if ![regexp {^\\s*text\\s+data\\s+bss\\s+dec\\s+hex\\s+filename\\s*$} $line0] {\n+        error \"object-size: $size did not produce expected first line: $line0\"\n+        return\n+    }\n+\n+    set line1 [lindex $lines 1]\n+    if ![regexp {^\\s*\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+[\\da-fA-F]+\\s+} $line1] {\n+        error \"object-size: $size did not produce expected second line: $line1\"\n+        return\n+    }\n+\n+    set what [lindex $args 0]\n+    set where [lsearch { text data bss total } $what]\n+    if { $where == -1 } {\n+        error \"object-size: illegal argument: $what\"\n+        return\n+    }\n+    set actual [lindex $line1 $where]\n+    verbose -log \"$what size is $actual\"\n+\n+    set cmp [lindex $args 1]\n+    if { [lsearch { < > <= >= == != } $cmp] == -1 } {\n+        error \"object-size: illegal argument: $cmp\"\n+        return\n+    }\n+\n+    set with [lindex $args 2]\n+    if ![string is integer $with ] {\n+        error \"object-size: illegal argument: $with\"\n+        return\n+    }\n+\n+    if [expr $actual $cmp $with] {\n+\tpass \"$testcase object-size $what $cmp $with\"\n+    } else {\n+\tfail \"$testcase object-size $what $cmp $with\"\n+    }\n+}\n+\n # Utility for testing that a function is defined on the current line.\n # Call pass if so, otherwise fail.  Invoked directly; the file must\n # have been compiled with -g -dA."}]}