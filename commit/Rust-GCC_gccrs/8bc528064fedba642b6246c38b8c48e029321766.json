{"sha": "8bc528064fedba642b6246c38b8c48e029321766", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJjNTI4MDY0ZmVkYmE2NDJiNjI0NmMzOGI4YzQ4ZTAyOTMyMTc2Ng==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2002-03-28T23:33:52Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2002-03-28T23:33:52Z"}, "message": "re PR rtl-optimization/3311 (GCC-SH: gcc loses result of AND operation due to force_to_mode bug)\n\n\t* combine.c (simplify_and_const_int): Make sure to apply mask\n\twhen force_to_mode returns a constant integer.  PR3311.\n\nFrom-SVN: r51532", "tree": {"sha": "77e64e6603c75e448adfa247ed58effe997b148b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77e64e6603c75e448adfa247ed58effe997b148b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bc528064fedba642b6246c38b8c48e029321766", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bc528064fedba642b6246c38b8c48e029321766", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bc528064fedba642b6246c38b8c48e029321766", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bc528064fedba642b6246c38b8c48e029321766/comments", "author": null, "committer": null, "parents": [{"sha": "279dccc5db570d56e327fa74361ecf593038433a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/279dccc5db570d56e327fa74361ecf593038433a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/279dccc5db570d56e327fa74361ecf593038433a"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "a804219ef1212073d61d4bb96e9646be3e22e6b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc528064fedba642b6246c38b8c48e029321766/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc528064fedba642b6246c38b8c48e029321766/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8bc528064fedba642b6246c38b8c48e029321766", "patch": "@@ -1,3 +1,8 @@\n+Thu Mar 28 16:35:31 2002  Jeffrey A Law  (law@redhat.com)\n+\n+\t* combine.c (simplify_and_const_int): Make sure to apply mask\n+\twhen force_to_mode returns a constant integer.  PR3311.\n+\n 2002-03-28  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* pa-linux.h (LOCAL_LABEL_PREFIX): Define."}, {"sha": "adb034d80cab98ca1a9d4e9a8d16e4da90a10d52", "filename": "gcc/combine.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc528064fedba642b6246c38b8c48e029321766/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc528064fedba642b6246c38b8c48e029321766/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=8bc528064fedba642b6246c38b8c48e029321766", "patch": "@@ -7838,14 +7838,23 @@ simplify_and_const_int (x, mode, varop, constop)\n   int i;\n \n   /* Simplify VAROP knowing that we will be only looking at some of the\n-     bits in it.  */\n+     bits in it.\n+\n+     Note by passing in CONSTOP, we guarantee that the bits not set in\n+     CONSTOP are not significant and will never be examined.  We must\n+     ensure that is the case by explicitly masking out those bits\n+     before returning.  */\n   varop = force_to_mode (varop, mode, constop, NULL_RTX, 0);\n \n-  /* If VAROP is a CLOBBER, we will fail so return it; if it is a\n-     CONST_INT, we are done.  */\n-  if (GET_CODE (varop) == CLOBBER || GET_CODE (varop) == CONST_INT)\n+  /* If VAROP is a CLOBBER, we will fail so return it.  */\n+  if (GET_CODE (varop) == CLOBBER)\n     return varop;\n \n+  /* If VAROP is a CONST_INT, then we need to apply the mask in CONSTOP\n+     to VAROP and return the new constant.  */\n+  if (GET_CODE (varop) == CONST_INT)\n+    return GEN_INT (trunc_int_for_mode (INTVAL (varop) & constop, mode));\n+\n   /* See what bits may be nonzero in VAROP.  Unlike the general case of\n      a call to nonzero_bits, here we don't care about bits outside\n      MODE.  */"}]}