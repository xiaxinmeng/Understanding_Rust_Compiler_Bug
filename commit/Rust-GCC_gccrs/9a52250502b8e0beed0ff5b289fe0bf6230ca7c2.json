{"sha": "9a52250502b8e0beed0ff5b289fe0bf6230ca7c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE1MjI1MDUwMmI4ZTBiZWVkMGZmNWIyODlmZTBiZjYyMzBjYTdjMg==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2015-04-22T00:44:08Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2015-04-22T00:44:08Z"}, "message": "add default definition of EH_RETURN_DATA_REGNO\n\ngcc/ChangeLog:\n\n2015-04-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* defaults.h: New definition of EH_RETURN_DATA_REGNO.\n\t* except.c: Remove definition of EH_RETURN_DATA_REGNO.\n\t* builtins.c (expand_builtin): Remove check if\n\tEH_RETURN_DATA_REGNO is defined.\n\t* df-scan.c (df_bb_refs_collect): Likewise.\n\t(df_get_exit_block_use_set): Likewise.\n\t* haifa-sched.c (initiate_bb_reg_pressure_info): Likewise.\n\t* ira-lives.c (process_bb_node_lives): Likewise.\n\t* lra-lives.c (process_bb_lives): Likewise.\n\nFrom-SVN: r222293", "tree": {"sha": "b01d63c7bbc4b59a52128e604fff80ffe63987ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b01d63c7bbc4b59a52128e604fff80ffe63987ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a52250502b8e0beed0ff5b289fe0bf6230ca7c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a52250502b8e0beed0ff5b289fe0bf6230ca7c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a52250502b8e0beed0ff5b289fe0bf6230ca7c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a52250502b8e0beed0ff5b289fe0bf6230ca7c2/comments", "author": null, "committer": null, "parents": [{"sha": "858d4a15b7c954b57290a131df4898bd1aaa1d95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/858d4a15b7c954b57290a131df4898bd1aaa1d95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/858d4a15b7c954b57290a131df4898bd1aaa1d95"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "b9a1b8d01a15a4a532d97bccd703bc86bd6d370d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a52250502b8e0beed0ff5b289fe0bf6230ca7c2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a52250502b8e0beed0ff5b289fe0bf6230ca7c2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a52250502b8e0beed0ff5b289fe0bf6230ca7c2", "patch": "@@ -1,3 +1,15 @@\n+2015-04-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* defaults.h: New definition of EH_RETURN_DATA_REGNO.\n+\t* except.c: Remove definition of EH_RETURN_DATA_REGNO.\n+\t* builtins.c (expand_builtin): Remove check if\n+\tEH_RETURN_DATA_REGNO is defined.\n+\t* df-scan.c (df_bb_refs_collect): Likewise.\n+\t(df_get_exit_block_use_set): Likewise.\n+\t* haifa-sched.c (initiate_bb_reg_pressure_info): Likewise.\n+\t* ira-lives.c (process_bb_node_lives): Likewise.\n+\t* lra-lives.c (process_bb_lives): Likewise.\n+\n 2015-04-21  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (ARGP_REG, FRAME_REG, BND2_REG, BND3_REG,"}, {"sha": "028d793c34c8bb8f9a7307619c7c4eb2cc50b3de", "filename": "gcc/builtins.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a52250502b8e0beed0ff5b289fe0bf6230ca7c2/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a52250502b8e0beed0ff5b289fe0bf6230ca7c2/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=9a52250502b8e0beed0ff5b289fe0bf6230ca7c2", "patch": "@@ -6510,10 +6510,8 @@ expand_builtin (tree exp, rtx target, rtx subtarget, machine_mode mode,\n       expand_builtin_eh_return (CALL_EXPR_ARG (exp, 0),\n \t\t\t\tCALL_EXPR_ARG (exp, 1));\n       return const0_rtx;\n-#ifdef EH_RETURN_DATA_REGNO\n     case BUILT_IN_EH_RETURN_DATA_REGNO:\n       return expand_builtin_eh_return_data_regno (exp);\n-#endif\n     case BUILT_IN_EXTEND_POINTER:\n       return expand_builtin_extend_pointer (CALL_EXPR_ARG (exp, 0));\n     case BUILT_IN_EH_POINTER:"}, {"sha": "911c2f8df13bfc7e7c9b00a6a1b9c89d8ff45704", "filename": "gcc/defaults.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a52250502b8e0beed0ff5b289fe0bf6230ca7c2/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a52250502b8e0beed0ff5b289fe0bf6230ca7c2/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=9a52250502b8e0beed0ff5b289fe0bf6230ca7c2", "patch": "@@ -377,6 +377,12 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #endif\n #endif\n \n+/* Provide defaults for stuff that may not be defined when using\n+   sjlj exceptions.  */\n+#ifndef EH_RETURN_DATA_REGNO\n+#define EH_RETURN_DATA_REGNO(N) INVALID_REGNUM\n+#endif\n+\n /* If we have named section and we support weak symbols, then use the\n    .jcr section for recording java classes which need to be registered\n    at program start-up time.  */"}, {"sha": "b2e2e5d9382ab84fde2f5f9cbad6390edb0d21f7", "filename": "gcc/df-scan.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a52250502b8e0beed0ff5b289fe0bf6230ca7c2/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a52250502b8e0beed0ff5b289fe0bf6230ca7c2/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=9a52250502b8e0beed0ff5b289fe0bf6230ca7c2", "patch": "@@ -3332,7 +3332,6 @@ df_bb_refs_collect (struct df_collection_rec *collection_rec, basic_block bb)\n       return;\n     }\n \n-#ifdef EH_RETURN_DATA_REGNO\n   if (bb_has_eh_pred (bb))\n     {\n       unsigned int i;\n@@ -3346,7 +3345,6 @@ df_bb_refs_collect (struct df_collection_rec *collection_rec, basic_block bb)\n \t\t\t bb, NULL, DF_REF_REG_DEF, DF_REF_AT_TOP);\n \t}\n     }\n-#endif\n \n   /* Add the hard_frame_pointer if this block is the target of a\n      non-local goto.  */\n@@ -3751,7 +3749,6 @@ df_get_exit_block_use_set (bitmap exit_block_uses)\n \t  bitmap_set_bit (exit_block_uses, i);\n     }\n \n-#ifdef EH_RETURN_DATA_REGNO\n   /* Mark the registers that will contain data for the handler.  */\n   if (reload_completed && crtl->calls_eh_return)\n     for (i = 0; ; ++i)\n@@ -3761,7 +3758,6 @@ df_get_exit_block_use_set (bitmap exit_block_uses)\n \t  break;\n \tbitmap_set_bit (exit_block_uses, regno);\n       }\n-#endif\n \n #ifdef EH_RETURN_STACKADJ_RTX\n   if ((!HAVE_epilogue || ! epilogue_completed)"}, {"sha": "e05e196989975f4e4858d887e4340b2ce73c9e1a", "filename": "gcc/except.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a52250502b8e0beed0ff5b289fe0bf6230ca7c2/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a52250502b8e0beed0ff5b289fe0bf6230ca7c2/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=9a52250502b8e0beed0ff5b289fe0bf6230ca7c2", "patch": "@@ -174,12 +174,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfgloop.h\"\n #include \"builtins.h\"\n \n-/* Provide defaults for stuff that may not be defined when using\n-   sjlj exceptions.  */\n-#ifndef EH_RETURN_DATA_REGNO\n-#define EH_RETURN_DATA_REGNO(N) INVALID_REGNUM\n-#endif\n-\n static GTY(()) int call_site_base;\n \n struct tree_hash_traits : default_hashmap_traits"}, {"sha": "6b231c2505ed0a124ebf06e7b3e72bd7e04b1d31", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a52250502b8e0beed0ff5b289fe0bf6230ca7c2/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a52250502b8e0beed0ff5b289fe0bf6230ca7c2/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=9a52250502b8e0beed0ff5b289fe0bf6230ca7c2", "patch": "@@ -1070,7 +1070,6 @@ initiate_bb_reg_pressure_info (basic_block bb)\n       if (NONDEBUG_INSN_P (insn))\n \tsetup_ref_regs (PATTERN (insn));\n   initiate_reg_pressure_info (df_get_live_in (bb));\n-#ifdef EH_RETURN_DATA_REGNO\n   if (bb_has_eh_pred (bb))\n     for (i = 0; ; ++i)\n       {\n@@ -1082,7 +1081,6 @@ initiate_bb_reg_pressure_info (basic_block bb)\n \t  mark_regno_birth_or_death (curr_reg_live, curr_reg_pressure,\n \t\t\t\t     regno, true);\n       }\n-#endif\n }\n \n /* Save current register pressure related info.  */"}, {"sha": "2837349ae8d19c31e9cdead5598af9e68defac4a", "filename": "gcc/ira-lives.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a52250502b8e0beed0ff5b289fe0bf6230ca7c2/gcc%2Fira-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a52250502b8e0beed0ff5b289fe0bf6230ca7c2/gcc%2Fira-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-lives.c?ref=9a52250502b8e0beed0ff5b289fe0bf6230ca7c2", "patch": "@@ -1319,7 +1319,6 @@ process_bb_node_lives (ira_loop_tree_node_t loop_tree_node)\n \t  curr_point++;\n \t}\n \n-#ifdef EH_RETURN_DATA_REGNO\n       if (bb_has_eh_pred (bb))\n \tfor (j = 0; ; ++j)\n \t  {\n@@ -1328,7 +1327,6 @@ process_bb_node_lives (ira_loop_tree_node_t loop_tree_node)\n \t      break;\n \t    make_hard_regno_born (regno);\n \t  }\n-#endif\n \n       /* Allocnos can't go in stack regs at the start of a basic block\n \t that is reached by an abnormal edge. Likewise for call"}, {"sha": "47a9ba22b5ae6aa0ac18921f94307345e31c16b9", "filename": "gcc/lra-lives.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a52250502b8e0beed0ff5b289fe0bf6230ca7c2/gcc%2Flra-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a52250502b8e0beed0ff5b289fe0bf6230ca7c2/gcc%2Flra-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-lives.c?ref=9a52250502b8e0beed0ff5b289fe0bf6230ca7c2", "patch": "@@ -954,7 +954,6 @@ process_bb_lives (basic_block bb, int &curr_point, bool dead_insn_p)\n \tadd_reg_note (curr_insn, REG_UNUSED, regno_reg_rtx[j]);\n     }\n \n-#ifdef EH_RETURN_DATA_REGNO\n   if (bb_has_eh_pred (bb))\n     for (j = 0; ; ++j)\n       {\n@@ -964,7 +963,6 @@ process_bb_lives (basic_block bb, int &curr_point, bool dead_insn_p)\n \t  break;\n \tmake_hard_regno_born (regno, false);\n       }\n-#endif\n \n   /* Pseudos can't go in stack regs at the start of a basic block that\n      is reached by an abnormal edge. Likewise for call clobbered regs,"}]}