{"sha": "9b43c474f53803635b04c5b530f1ceddb13355f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI0M2M0NzRmNTM4MDM2MzViMDRjNWI1MzBmMWNlZGRiMTMzNTVmNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2006-02-03T21:57:08Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2006-02-03T21:57:08Z"}, "message": "re PR c++/25979 (incorrect codegen for conditional [SVO issue])\n\n        PR c++/25979\n        * gimplify.c (gimplify_modify_expr_rhs): Disable *& optimization for now.\n\n        PR middle-end/25977\n        * gimplify.c (gimplify_modify_expr_rhs): It's not always safe to do RVO\n        on the return slot if it's an NRV.\n\nFrom-SVN: r110565", "tree": {"sha": "53e25d711d1130e3fded2395bdbce1e6aef3db0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53e25d711d1130e3fded2395bdbce1e6aef3db0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b43c474f53803635b04c5b530f1ceddb13355f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b43c474f53803635b04c5b530f1ceddb13355f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b43c474f53803635b04c5b530f1ceddb13355f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b43c474f53803635b04c5b530f1ceddb13355f5/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "28e5f1f1151bf5ca1c77743234f08bb0e9d26174", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28e5f1f1151bf5ca1c77743234f08bb0e9d26174", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28e5f1f1151bf5ca1c77743234f08bb0e9d26174"}], "stats": {"total": 122, "additions": 120, "deletions": 2}, "files": [{"sha": "ffa7c5f7e8e4c1f5344b497fdc17c6f15bd6aa66", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b43c474f53803635b04c5b530f1ceddb13355f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b43c474f53803635b04c5b530f1ceddb13355f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b43c474f53803635b04c5b530f1ceddb13355f5", "patch": "@@ -1,3 +1,12 @@\n+2006-02-03  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/25979\n+\t* gimplify.c (gimplify_modify_expr_rhs): Disable *& optimization for now.\n+\n+\tPR middle-end/25977\n+\t* gimplify.c (gimplify_modify_expr_rhs): It's not always safe to do RVO\n+\ton the return slot if it's an NRV.\n+\n 2006-02-03  Zdenek Dvorak <dvorakz@suse.cz>\n \n \t* tree-ssa-loop-ivopts.c (enum use_type): Remove USE_OUTER."}, {"sha": "f64b1cbc8a8bb40c4dc70b776d91b4e51e00ac47", "filename": "gcc/gimplify.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b43c474f53803635b04c5b530f1ceddb13355f5/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b43c474f53803635b04c5b530f1ceddb13355f5/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=9b43c474f53803635b04c5b530f1ceddb13355f5", "patch": "@@ -3190,6 +3190,7 @@ gimplify_modify_expr_rhs (tree *expr_p, tree *from_p, tree *to_p, tree *pre_p,\n   while (ret != GS_UNHANDLED)\n     switch (TREE_CODE (*from_p))\n       {\n+#if 0\n       case INDIRECT_REF:\n \t{\n \t  /* If we have code like \n@@ -3211,6 +3212,7 @@ gimplify_modify_expr_rhs (tree *expr_p, tree *from_p, tree *to_p, tree *pre_p,\n \t    ret = GS_UNHANDLED;\n \t  break;\n \t}\n+#endif\n \n       case TARGET_EXPR:\n \t{\n@@ -3272,8 +3274,9 @@ gimplify_modify_expr_rhs (tree *expr_p, tree *from_p, tree *to_p, tree *pre_p,\n \t    bool use_target;\n \n \t    if (TREE_CODE (*to_p) == RESULT_DECL\n+\t\t&& DECL_NAME (*to_p) == NULL_TREE\n \t\t&& needs_to_live_in_memory (*to_p))\n-\t      /* It's always OK to use the return slot directly.  */\n+\t      /* It's OK to use the return slot directly unless it's an NRV. */\n \t      use_target = true;\n \t    else if (!is_gimple_non_addressable (*to_p))\n \t      /* Don't use the original target if it's already addressable;"}, {"sha": "d4cb92c334169489eeddd384ee44d74e9a08e54f", "filename": "gcc/testsuite/g++.dg/opt/nrv10.C", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b43c474f53803635b04c5b530f1ceddb13355f5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fnrv10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b43c474f53803635b04c5b530f1ceddb13355f5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fnrv10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fnrv10.C?ref=9b43c474f53803635b04c5b530f1ceddb13355f5", "patch": "@@ -0,0 +1,48 @@\n+// PR c++/25979\n+// Bug: we were eliding too many temporaries, so that a1 was used\n+// as both 'a' and 'x' in the second operator+.\n+// { dg-do run }\n+\n+struct A\n+{\n+    A() : data1_(0), data2_(0) {}\n+    A(int i, int j) : data1_(i), data2_(j) {}\n+    A operator+(int);\n+    friend A operator+(int, const A&);\n+    ~A() {}\n+//private:\n+    int data1_;\n+    int data2_;\n+};\n+\n+extern bool x;\n+\n+extern \"C\" void abort ();\n+\n+int main()\n+{\n+    A a1(1,2);\n+    a1 = (x ? a1 + 3 : 3 + a1);\n+    if (a1.data1_ != 3 || a1.data2_ != 2)\n+      abort ();\n+}\n+\n+bool x = false;\n+\n+A\n+A::operator+(int i)\n+{\n+    A a;\n+    a = *this;\n+    a.data2_ = i;\n+    return a;\n+}\n+\n+A\n+operator+(int i, const A& x)\n+{\n+    A a;\n+    a = x;\n+    a.data1_ = i;\n+    return a;\n+}"}, {"sha": "2b72f790b6eeaa3d3a078bbb079dc89f6723d455", "filename": "gcc/testsuite/g++.dg/opt/nrv11.C", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b43c474f53803635b04c5b530f1ceddb13355f5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fnrv11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b43c474f53803635b04c5b530f1ceddb13355f5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fnrv11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fnrv11.C?ref=9b43c474f53803635b04c5b530f1ceddb13355f5", "patch": "@@ -0,0 +1,58 @@\n+// PR middle-end/25977\n+// Bug: We were assuming that the return slot of the current function is\n+// always safe to use as the return slot for another call, because its\n+// address cannot escape.  But its address can escape if we perform the\n+// named return value optimization.\n+\n+// { dg-do run }\n+\n+struct A\n+{\n+    A( int left, int top, int width, int height )\n+      : x1(left), y1(top), x2(left+width-1), y2(top+height-1) {}\n+\n+    //A(const A& o) : x1(o.x1), y1(o.y1), x2(o.x2), y2(o.y2) {}\n+    //A& operator=(const A& o ) { x1=o.x1; y1=o.y1; x2=o.x2; y2=o.y2; return *this; }\n+\n+    A  operator&(const A &r) const\n+    {\n+\tA tmp(0, 0, -1, -1);\n+\ttmp.x1 = ((r.x1) < (x1) ? (x1) : (r.x1));\n+\ttmp.x2 = ((x2) < (r.x2) ? (x2) : (r.x2));\n+\ttmp.y1 = ((r.y1) < (y1) ? (y1) : (r.y1));\n+\ttmp.y2 = ((y2) < (r.y2) ? (y2) : (r.y2));\n+\treturn tmp;\n+    }\n+\n+    int x1;\n+    int y1;\n+    int x2;\n+    int y2;\n+};\n+\n+bool operator==( const A &r1, const A &r2 )\n+{\n+    return r1.x1==r2.x1 && r1.x2==r2.x2 && r1.y1==r2.y1 && r1.y2==r2.y2;\n+}\n+\n+static A test()\n+{\n+    A all = A( 0, 0, 1024, 768);\n+    A a = all;\n+    A r = all;\n+    a = a & r;\n+    return a;\n+}\n+\n+extern \"C\" void abort(void);\n+\n+int main( int argc, char ** argv )\n+{\n+    A all = A( 0, 0, 1024, 768);\n+    A a = test();\n+\n+    if ( ! ( a == all))\n+      abort();\n+\n+    return 0;\n+}"}, {"sha": "6b0e2f3906d379466b30e9c23efe4c2766c4ef17", "filename": "gcc/testsuite/g++.dg/opt/temp1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b43c474f53803635b04c5b530f1ceddb13355f5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Ftemp1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b43c474f53803635b04c5b530f1ceddb13355f5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Ftemp1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Ftemp1.C?ref=9b43c474f53803635b04c5b530f1ceddb13355f5", "patch": "@@ -1,6 +1,6 @@\n // PR c++/16405\n // { dg-options \"-O2\" } \n-// { dg-do run }\n+// { dg-do run { xfail *-*-* } }\n \n // There should be exactly one temporary generated for the code in \"f\"\n // below when optimizing -- for the result of \"b + c\".  We have no"}]}