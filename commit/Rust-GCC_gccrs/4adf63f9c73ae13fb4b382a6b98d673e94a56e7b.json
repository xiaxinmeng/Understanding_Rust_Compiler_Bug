{"sha": "4adf63f9c73ae13fb4b382a6b98d673e94a56e7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFkZjYzZjljNzNhZTEzZmI0YjM4MmE2Yjk4ZDY3M2U5NGE1NmU3Yg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2014-05-23T11:33:42Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-05-23T11:33:42Z"}, "message": "* varasm.c (output_constructor_bitfield): Fix thinkos in latest change.\n\nFrom-SVN: r210856", "tree": {"sha": "29cdea61d06d772e3fcd03646094a0000fce52cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29cdea61d06d772e3fcd03646094a0000fce52cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4adf63f9c73ae13fb4b382a6b98d673e94a56e7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4adf63f9c73ae13fb4b382a6b98d673e94a56e7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4adf63f9c73ae13fb4b382a6b98d673e94a56e7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4adf63f9c73ae13fb4b382a6b98d673e94a56e7b/comments", "author": null, "committer": null, "parents": [{"sha": "0aadce73310807081b7df2b2310f6463e2379e00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0aadce73310807081b7df2b2310f6463e2379e00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0aadce73310807081b7df2b2310f6463e2379e00"}], "stats": {"total": 42, "additions": 24, "deletions": 18}, "files": [{"sha": "01f3ca138205f02cd8b5ee9cb100fad4ecf0da46", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4adf63f9c73ae13fb4b382a6b98d673e94a56e7b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4adf63f9c73ae13fb4b382a6b98d673e94a56e7b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4adf63f9c73ae13fb4b382a6b98d673e94a56e7b", "patch": "@@ -1,3 +1,7 @@\n+2014-05-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* varasm.c (output_constructor_bitfield): Fix thinkos in latest change.\n+\n 2014-05-23  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* gimple.h (enum gf_mask): Add and use GF_OMP_FOR_SIMD."}, {"sha": "57b33d78419319fe8907a2494b1a4bb0091c088f", "filename": "gcc/varasm.c", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4adf63f9c73ae13fb4b382a6b98d673e94a56e7b/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4adf63f9c73ae13fb4b382a6b98d673e94a56e7b/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=4adf63f9c73ae13fb4b382a6b98d673e94a56e7b", "patch": "@@ -5082,50 +5082,52 @@ output_constructor_bitfield (oc_local_state *local, unsigned int bit_offset)\n       this_time = MIN (end_offset - next_offset, BITS_PER_UNIT - next_bit);\n       if (BYTES_BIG_ENDIAN)\n \t{\n-\t  /* On big-endian machine, take the most significant bits\n-\t     first (of the bits that are significant)\n-\t     and put them into bytes from the most significant end.  */\n+\t  /* On big-endian machine, take the most significant bits (of the\n+\t     bits that are significant) first and put them into bytes from\n+\t     the most significant end.  */\n \t  shift = end_offset - next_offset - this_time;\n \n \t  /* Don't try to take a bunch of bits that cross\n-\t     the word boundary in the INTEGER_CST. We can\n-\t     only select bits from the LOW or HIGH part\n-\t     not from both.  */\n+\t     the word boundary in the INTEGER_CST.  We can\n+\t     only select bits from one element.  */\n \t  if ((shift / HOST_BITS_PER_WIDE_INT)\n- \t      != ((shift + this_time) / HOST_BITS_PER_WIDE_INT))\n-\t    this_time = (shift + this_time) & (HOST_BITS_PER_WIDE_INT - 1);\n+\t      != ((shift + this_time - 1) / HOST_BITS_PER_WIDE_INT))\n+\t    {\n+\t      const int end = shift + this_time - 1;\n+\t      shift = end & -HOST_BITS_PER_WIDE_INT;\n+\t      this_time = end - shift + 1;\n+\t    }\n \n \t  /* Now get the bits from the appropriate constant word.  */\n \t  value = TREE_INT_CST_ELT (local->val, shift / HOST_BITS_PER_WIDE_INT);\n \t  shift = shift & (HOST_BITS_PER_WIDE_INT - 1);\n \n-\t  /* Get the result. This works only when:\n+\t  /* Get the result.  This works only when:\n \t     1 <= this_time <= HOST_BITS_PER_WIDE_INT.  */\n \t  local->byte |= (((value >> shift)\n \t\t\t   & (((HOST_WIDE_INT) 2 << (this_time - 1)) - 1))\n \t\t\t  << (BITS_PER_UNIT - this_time - next_bit));\n \t}\n       else\n \t{\n-\t  /* On little-endian machines,\n-\t     take first the least significant bits of the value\n-\t     and pack them starting at the least significant\n+\t  /* On little-endian machines, take the least significant bits of\n+\t     the value first and pack them starting at the least significant\n \t     bits of the bytes.  */\n \t  shift = next_offset - byte_relative_ebitpos;\n \n \t  /* Don't try to take a bunch of bits that cross\n-\t     the word boundary in the INTEGER_CST. We can\n-\t     only select bits from the LOW or HIGH part\n-\t     not from both.  */\n+\t     the word boundary in the INTEGER_CST.  We can\n+\t     only select bits from one element.  */\n \t  if ((shift / HOST_BITS_PER_WIDE_INT)\n-\t      != ((shift + this_time) / HOST_BITS_PER_WIDE_INT))\n-\t    this_time = (HOST_BITS_PER_WIDE_INT - shift);\n+\t      != ((shift + this_time - 1) / HOST_BITS_PER_WIDE_INT))\n+\t    this_time\n+\t      = HOST_BITS_PER_WIDE_INT - (shift & (HOST_BITS_PER_WIDE_INT - 1));\n \n \t  /* Now get the bits from the appropriate constant word.  */\n \t  value = TREE_INT_CST_ELT (local->val, shift / HOST_BITS_PER_WIDE_INT);\n \t  shift = shift & (HOST_BITS_PER_WIDE_INT - 1);\n \n-\t  /* Get the result. This works only when:\n+\t  /* Get the result.  This works only when:\n \t     1 <= this_time <= HOST_BITS_PER_WIDE_INT.  */\n \t  local->byte |= (((value >> shift)\n \t\t\t   & (((HOST_WIDE_INT) 2 << (this_time - 1)) - 1))"}]}