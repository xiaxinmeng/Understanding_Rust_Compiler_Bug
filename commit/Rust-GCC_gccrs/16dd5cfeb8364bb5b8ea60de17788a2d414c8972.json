{"sha": "16dd5cfeb8364bb5b8ea60de17788a2d414c8972", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZkZDVjZmViODM2NGJiNWI4ZWE2MGRlMTc3ODhhMmQ0MTRjODk3Mg==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2004-02-02T20:20:58Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2004-02-02T20:20:58Z"}, "message": "[multiple changes]\n\n2004-02-02  Eric Christopher  <echristo@redhat.com>\n            Zack Weinberg  <zack@codesourcery.com>\n\n        * c-opts.c (c_common_handle_option): Add -finput-charset.\n        * c.opt: Ditto.\n        * cppcharset.c (one_iso88591_to_utf8): Remove.\n        (convert_iso88591_utf8): Ditto.\n        (conversion_tab): Remove 8859-1 converter.\n        (_cpp_input_to_utf8): Remove.\n        (_cpp_init_iconv_buffer): Ditto.\n        (_cpp_close_iconv_buffer): Ditto.\n        (_cpp_convert_input): New function.\n        (_cpp_default_encoding): Ditto.\n        * cpphash.h: Add/remove prototypes for above.\n        * cppfiles.c (read_file_guts): Use _cpp_convert_input.\n        * cppinit.c (cpp_create_reader): Use _cpp_default_encoding\n        for narrow execution and input character sets.\n        * cpplib.c (cpp_push_buffer): Delete uses of removed functions.\n        * doc/cppopts.texi: Document -finput-charset.\n\n2004-02-02 Eric Christopher  <echristo@redhat.com>\n           Zack Weinberg  <zack@codesourcery.com>\n\n        * gcc.c-torture/execute/wchar_t-1.c: Add -finput-charset.\n\n2004-01-29  Eric Christopher  <echristo@redhat.com>\n            Zack Weinberg  <zack@codesourcery.com>\n\n        * testsuite/22_locale/collate/compare/wchar_t/2.cc: Remove xfail. Use\n        -finput-charset.\n        * testsuite/22_locale/collate/compare/wchar_t/wrapped_env.cc: Ditto.\n        * testsuite/22_locale/collate/compare/wchar_t/wrapped_locale.cc: Ditto\n        * testsuite/22_locale/collate/hash/wchar_t/2.cc: Ditto.\n        * testsuite/22_locale/collate/hash/wchar_t/wrapped_env.cc: Ditto.\n        * testsuite/22_locale/collate/hash/wchar_t/wrapped_locale.cc: Ditto.\n        * testsuite/22_locale/collate/transform/wchar_t/2.cc: Ditto.\n        * testsuite/22_locale/collate/transform/wchar_t/wrapped_env.cc: Ditto.\n        * testsuite/22_locale/collate/transform/wchar_t/wrapped_locale.cc:\n        Ditto.\n\nFrom-SVN: r77136", "tree": {"sha": "ceb6203dee329b18b1ae6797a54fb24e65a13847", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ceb6203dee329b18b1ae6797a54fb24e65a13847"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16dd5cfeb8364bb5b8ea60de17788a2d414c8972", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16dd5cfeb8364bb5b8ea60de17788a2d414c8972", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16dd5cfeb8364bb5b8ea60de17788a2d414c8972", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/comments", "author": null, "committer": null, "parents": [{"sha": "6699d593734ee8f2cf7472ac581e123e54936be4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6699d593734ee8f2cf7472ac581e123e54936be4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6699d593734ee8f2cf7472ac581e123e54936be4"}], "stats": {"total": 354, "additions": 186, "deletions": 168}, "files": [{"sha": "740bc212ea23aec95c6e8f3b1791ac5a945960df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=16dd5cfeb8364bb5b8ea60de17788a2d414c8972", "patch": "@@ -1,3 +1,23 @@\n+2004-02-02  Eric Christopher  <echristo@redhat.com>\n+            Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* c-opts.c (c_common_handle_option): Add -finput-charset.\n+        * c.opt: Ditto.\n+        * cppcharset.c (one_iso88591_to_utf8): Remove.\n+        (convert_iso88591_utf8): Ditto.\n+        (conversion_tab): Remove 8859-1 converter.\n+        (_cpp_input_to_utf8): Remove.\n+        (_cpp_init_iconv_buffer): Ditto.\n+        (_cpp_close_iconv_buffer): Ditto.\n+        (_cpp_convert_input): New function.\n+        (_cpp_default_encoding): Ditto.\n+        * cpphash.h: Add/remove prototypes for above.\n+        * cppfiles.c (read_file_guts): Use _cpp_convert_input.\n+        * cppinit.c (cpp_create_reader): Use _cpp_default_encoding\n+        for narrow execution and input character sets.\n+        * cpplib.c (cpp_push_buffer): Delete uses of removed functions.\n+        * doc/cppopts.texi: Document -finput-charset.\n+\n 2004-02-02  David Edelsohn  <edelsohn@gnu.org>\n \n \t* rtlanal.c (refers_to_regno_p): Test regno, not inner_regno,\n@@ -86,7 +106,7 @@\n \t* postreload.c (reload_combine, reload_combine_note_store,\n \treload_combine_note_use, reload_cse_move2add, move2add_note_store): Likewise.\n \t* ra-colorize.c (combine, color_usable_p, get_free_reg,\n-\tcalculate_dont_begin, calculate_dont_begin, colorize_one_web, \n+\tcalculate_dont_begin, calculate_dont_begin, colorize_one_web,\n \ttry_recolor_web, insert_coalesced_conflicts, check_colors,\n \tbreak_precolored_alias): Likewise.\n \t* ra-debug.c: Include regs.h\n@@ -210,7 +230,7 @@\n \tconstant.\n \t(write_node): Simplify comparisons against small constants\n \tbefore printing tests.\n-\t\n+\n 2004-01-31  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/m32r/m32r.c (m32r_load_pic_register): Use GEN_INT\n@@ -435,8 +455,8 @@\n \t(mark_constant_pool): Use new pool datastructures.\n \n 2004-01-30  Fariborz Jahanian <fjahanian@apple.com>\n-        \n-        * config/rs6000/rs6000.c (rs6000_emit_move): Remove #if 0. \n+\n+        * config/rs6000/rs6000.c (rs6000_emit_move): Remove #if 0.\n \tCopy operands[1] to pseudo for simplify_gen_subreg.\n \n 2004-01-30  Kazu Hirata  <kazu@cs.umass.edu>\n@@ -447,7 +467,7 @@\n 2004-01-30  Andrew Pinski <pinskia@physics.uc.edu>\n \n \t* toplev.c: Include alloc-pool.h.\n-\t* Makefile.in (toplev.c): Update dependencies. \n+\t* Makefile.in (toplev.c): Update dependencies.\n \n 2004-01-30  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n@@ -533,7 +553,7 @@\n 2004-01-29  Devang Patel  <dpatel@apple.com>\n \n \t* dwarf2out.c (gen_field_die): Do not equate decl number to die.\n-\t\n+\n 2004-01-28  Ian Lance Taylor  <ian@wasabisystems.com>\n \n \tPR inline-asm/6162\n@@ -682,7 +702,7 @@\n \ttarget macros.\n \n 2004-01-28  Daniel Berlin  <dberlin@dberlin.org>\n-\t\n+\n \t* timevar.c (timevar_print): Mention when checking is enabled.\n \n 2004-01-28  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n@@ -3984,4 +4004,3 @@\n \t* invoke.texi (-O1): Document change.\n \n See ChangeLog.10 for earlier changes.\n-"}, {"sha": "c89ba0040e68bdc6f0be8b0f74c5fdc30c0f9801", "filename": "gcc/c-opts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=16dd5cfeb8364bb5b8ea60de17788a2d414c8972", "patch": "@@ -904,6 +904,10 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       cpp_opts->wide_charset = arg;\n       break;\n \n+    case OPT_finput_charset_:\n+      cpp_opts->input_charset = arg;\n+      break;\n+\n     case OPT_ftemplate_depth_:\n       max_tinst_depth = value;\n       break;"}, {"sha": "4856fc5aea18a9d21d1137d11932c275c278f594", "filename": "gcc/c.opt", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=16dd5cfeb8364bb5b8ea60de17788a2d414c8972", "patch": "@@ -482,6 +482,11 @@ fexec-charset=\n C ObjC C++ ObjC++ Joined RejectNegative\n -fexec-charset=<cset>\tConvert all strings and character constants to character set <cset>\n \n+finput-charset=\n+C ObjC C++ ObjC++ Joined RejectNegative\n+-finput-charset=<cset>      Specify the default character set for source files.\n+\n+\n fexternal-templates\n C++ ObjC++\n "}, {"sha": "b73128d60e9b293d3fbe7102080cc039b1fb8280", "filename": "gcc/cppcharset.c", "status": "modified", "additions": 44, "deletions": 64, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/gcc%2Fcppcharset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/gcc%2Fcppcharset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppcharset.c?ref=16dd5cfeb8364bb5b8ea60de17788a2d414c8972", "patch": "@@ -446,31 +446,6 @@ one_utf16_to_utf8 (iconv_t bigend, const uchar **inbufp, size_t *inbytesleftp,\n   return 0;\n }\n \n-/* The first 256 code points of ISO 8859.1 have the same numeric\n-   values as the first 256 code points of Unicode, therefore the\n-   incoming ISO 8859.1 character can be passed directly to\n-   one_cppchar_to_utf8 (which expects a Unicode value).  */\n-\n-static int\n-one_iso88591_to_utf8 (iconv_t bigend ATTRIBUTE_UNUSED, const uchar **inbufp,\n-\t\t      size_t *inbytesleftp, uchar **outbufp, size_t *outbytesleftp)\n-{\n-  const uchar *inbuf = *inbufp;\n-  int rval;\n-\n-  if (*inbytesleftp > 1)\n-    return EINVAL;\n-\n-  rval = one_cppchar_to_utf8 ((cppchar_t)*inbuf, outbufp, outbytesleftp);\n-  if (rval)\n-    return rval;\n-\n-  *inbufp += 1;\n-  *inbytesleftp -= 1;\n-\n-  return 0;\n-}\n-\n /* Helper routine for the next few functions.  The 'const' on\n    one_conversion means that we promise not to modify what function is\n    pointed to, which lets the inliner see through it.  */\n@@ -554,14 +529,6 @@ convert_utf32_utf8 (iconv_t cd, const uchar *from, size_t flen,\n   return conversion_loop (one_utf32_to_utf8, cd, from, flen, to);\n }\n \n-static bool\n-convert_iso88591_utf8 (iconv_t cd, const uchar *from, size_t flen,\n-                       struct _cpp_strbuf *to)\n-{\n-  return conversion_loop (one_iso88591_to_utf8, cd, from, flen, to);\n-}\n-\n-\n /* Identity conversion, used when we have no alternative.  */\n static bool\n convert_no_conversion (iconv_t cd ATTRIBUTE_UNUSED,\n@@ -639,7 +606,6 @@ static const struct conversion conversion_tab[] = {\n   { \"UTF-32BE/UTF-8\", convert_utf32_utf8, (iconv_t)1 },\n   { \"UTF-16LE/UTF-8\", convert_utf16_utf8, (iconv_t)0 },\n   { \"UTF-16BE/UTF-8\", convert_utf16_utf8, (iconv_t)1 },\n-  { \"ISO-8859-1/UTF-8\", convert_iso88591_utf8, (iconv_t)0 },\n };\n \n /* Subroutine of cpp_init_iconv: initialize and return a\n@@ -1388,44 +1354,58 @@ cpp_interpret_charconst (cpp_reader *pfile, const cpp_token *token,\n }\n \n uchar *\n-_cpp_input_to_utf8 (cpp_reader *pfile, const uchar *input, cppchar_t length)\n+_cpp_convert_input (cpp_reader *pfile, const char *input_charset,\n+\t\t    uchar *input, size_t size, size_t len, off_t *st_size)\n {\n-  struct _cpp_strbuf tbuf;\n-  struct cset_converter cvt = pfile->buffer->input_cset_desc;\n+  struct cset_converter input_cset;\n+  struct _cpp_strbuf to;\n \n-  tbuf.asize = MAX (OUTBUF_BLOCK_SIZE, length);\n-  tbuf.text = xmalloc (tbuf.asize);\n-  tbuf.len = 0;\n+  input_cset = init_iconv_desc (pfile, SOURCE_CHARSET, input_charset);\n+  if (input_cset.func == convert_no_conversion)\n+    {\n+      to.text = input;\n+      to.asize = size;\n+      to.len = len;\n+    }\n+  else\n+    {\n+      to.asize = MAX (65536, len);\n+      to.text = xmalloc (to.asize);\n+      to.len = 0;\n \n-  if (!APPLY_CONVERSION (cvt, input, length, &tbuf))\n-   {\n-      cpp_error (pfile, CPP_DL_ERROR, \"converting input to source character set.\");\n-      return NULL;\n-   }\n+      if (!APPLY_CONVERSION (input_cset, input, len, &to))\n+\tcpp_error (pfile, CPP_DL_ERROR,\n+\t\t   \"failure to convert %s to %s\",\n+\t\t   CPP_OPTION (pfile, input_charset), SOURCE_CHARSET);\n \n-  if (length)\n-    tbuf.text[tbuf.len] = '\\n';\n-  else\n-    tbuf.text[0] = '\\n';\n+      free (input);\n+    }\n \n-  return tbuf.text;\n-}\n+  /* Clean up the mess.  */\n+  if (input_cset.func == convert_using_iconv)\n+    iconv_close (input_cset.cd);\n \n-  /* Check the input file format. At present assuming the input file\n-     is in iso-8859-1 format. Convert this input character set to\n-     source character set format (UTF-8). */\n+  /* Resize buffer if we allocated substantially too much, or if we\n+     haven't enough space for the \\n-terminator.  */\n+  if (to.len + 4096 < to.asize || to.len >= to.asize)\n+    to.text = xrealloc (to.text, to.len + 1);\n \n-void\n-_cpp_init_iconv_buffer (cpp_reader *pfile, const char *from)\n-{\n-  pfile->buffer->input_cset_desc = init_iconv_desc (pfile, SOURCE_CHARSET,\n-\t\t\t\t\t\t    from);\n+  to.text[to.len] = '\\n';\n+  *st_size = to.len;\n+  return to.text;\n }\n \n-void\n-_cpp_close_iconv_buffer (cpp_reader *pfile)\n+const char *\n+_cpp_default_encoding (void)\n {\n-  if (HAVE_ICONV\n-      && pfile->buffer->input_cset_desc.func == convert_using_iconv)\n-    iconv_close (pfile->buffer->input_cset_desc.cd);\n+  const char *current_encoding = NULL;\n+\n+#if defined (HAVE_LOCALE_H) && defined (HAVE_LANGINFO_CODESET)\n+  setlocale (LC_CTYPE, \"\");\n+  current_encoding = nl_langinfo (CODESET);\n+#endif\n+  if (current_encoding == NULL || *current_encoding == '\\0')\n+    current_encoding = SOURCE_CHARSET;\n+\n+  return current_encoding;\n }"}, {"sha": "c886c891681f3e3d23ee46ddd00b593f4b830187", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 24, "deletions": 31, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=16dd5cfeb8364bb5b8ea60de17788a2d414c8972", "patch": "@@ -312,7 +312,7 @@ pch_open_file (cpp_reader *pfile, _cpp_file *file, bool *invalid_pch)\n \n /* Try to open the path FILE->name appended to FILE->dir.  This is\n    where remap and PCH intercept the file lookup process.  Return true\n-   if the file was found, whether or not the open was successful.  \n+   if the file was found, whether or not the open was successful.\n    Set *INVALID_PCH to true if a PCH file is found but wasn't valid.  */\n \n static bool\n@@ -398,10 +398,10 @@ _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir, bool f\n \t  open_file_failed (pfile, file);\n \t  if (invalid_pch)\n \t    {\n-\t      cpp_error (pfile, CPP_DL_ERROR, \n+\t      cpp_error (pfile, CPP_DL_ERROR,\n \t       \"one or more PCH files were found, but they were invalid\");\n \t      if (!cpp_get_options (pfile)->warn_invalid_pch)\n-\t\tcpp_error (pfile, CPP_DL_ERROR, \n+\t\tcpp_error (pfile, CPP_DL_ERROR,\n \t\t\t   \"use -Winvalid-pch for more information\");\n \t    }\n \t  break;\n@@ -457,7 +457,7 @@ read_file_guts (cpp_reader *pfile, _cpp_file *file)\n   ssize_t size, total, count;\n   uchar *buf;\n   bool regular;\n-  \n+\n   if (S_ISBLK (file->st.st_mode))\n     {\n       cpp_error (pfile, CPP_DL_ERROR, \"%s is a block device\", file->path);\n@@ -514,15 +514,8 @@ read_file_guts (cpp_reader *pfile, _cpp_file *file)\n     cpp_error (pfile, CPP_DL_WARNING,\n \t       \"%s is shorter than expected\", file->path);\n \n-  /* Shrink buffer if we allocated substantially too much.  */\n-  if (total + 4096 < size)\n-    buf = xrealloc (buf, total + 1);\n-\n-  /* The lexer requires that the buffer be \\n-terminated.  */\n-  buf[total] = '\\n';\n-\n-  file->buffer = buf;\n-  file->st.st_size = total;\n+  file->buffer = _cpp_convert_input (pfile, CPP_OPTION (pfile, input_charset),\n+\t\t\t\t     buf, size, total, &file->st.st_size);\n   file->buffer_valid = true;\n \n   return true;\n@@ -566,7 +559,7 @@ should_stack_file (cpp_reader *pfile, _cpp_file *file, bool import)\n   if (file->once_only)\n     return false;\n \n-  /* We must mark the file once-only if #import now, before header \n+  /* We must mark the file once-only if #import now, before header\n      guard checks.  Otherwise, undefining the header guard might\n      cause the file to be re-stacked.  */\n   if (import)\n@@ -1283,7 +1276,7 @@ struct pchf_data {\n      This is used as an optimisation, it means we don't have to search\n      the structure if we're processing a regular #include.  */\n   bool have_once_only;\n-  \n+\n   struct pchf_entry {\n     /* The size of this file.  This is used to save running a MD5 checksum\n        if the sizes don't match.  */\n@@ -1298,7 +1291,7 @@ struct pchf_data {\n static struct pchf_data *pchf;\n \n /* Data for pchf_addr.  */\n-struct pchf_adder_info \n+struct pchf_adder_info\n {\n   cpp_reader *pfile;\n   struct pchf_data *d;\n@@ -1322,11 +1315,11 @@ pchf_adder (void **slot, void *data)\n \t the PCH file shouldn't be written...  */\n       if (f->dont_read || f->err_no)\n \treturn 1;\n-      \n+\n       d->entries[count].once_only = f->once_only;\n       d->have_once_only |= f->once_only;\n       if (f->buffer_valid)\n-\t  md5_buffer ((const char *)f->buffer, \n+\t  md5_buffer ((const char *)f->buffer,\n \t\t      f->st.st_size, d->entries[count].sum);\n       else\n \t{\n@@ -1365,22 +1358,22 @@ _cpp_save_file_entries (cpp_reader *pfile, FILE *f)\n   struct pchf_data *result;\n   size_t result_size;\n   struct pchf_adder_info pai;\n-  \n+\n   count = htab_elements (pfile->file_hash);\n-  result_size = (sizeof (struct pchf_data) \n+  result_size = (sizeof (struct pchf_data)\n \t\t + sizeof (struct pchf_entry) * (count - 1));\n   result = xcalloc (result_size, 1);\n-  \n+\n   result->count = 0;\n   result->have_once_only = false;\n-  \n+\n   pai.pfile = pfile;\n   pai.d = result;\n   htab_traverse (pfile->file_hash, pchf_adder, &pai);\n \n   result_size = (sizeof (struct pchf_data)\n                  + sizeof (struct pchf_entry) * (result->count - 1));\n-  \n+\n   qsort (result->entries, result->count, sizeof (struct pchf_entry),\n \t pchf_save_compare);\n \n@@ -1393,11 +1386,11 @@ bool\n _cpp_read_file_entries (cpp_reader *pfile ATTRIBUTE_UNUSED, FILE *f)\n {\n   struct pchf_data d;\n-  \n+\n   if (fread (&d, sizeof (struct pchf_data) - sizeof (struct pchf_entry), 1, f)\n        != 1)\n     return false;\n-  \n+\n   pchf = xmalloc (sizeof (struct pchf_data)\n \t\t  + sizeof (struct pchf_entry) * (d.count - 1));\n   memcpy (pchf, &d, sizeof (struct pchf_data) - sizeof (struct pchf_entry));\n@@ -1422,7 +1415,7 @@ struct pchf_compare_data\n \n   /* Do we need to worry about entries that don't have ONCE_ONLY set?  */\n   bool check_included;\n-  \n+\n   /* The file that we're searching for.  */\n   _cpp_file *f;\n };\n@@ -1435,15 +1428,15 @@ pchf_compare (const void *d_p, const void *e_p)\n   const struct pchf_entry *e = (const struct pchf_entry *)e_p;\n   struct pchf_compare_data *d = (struct pchf_compare_data *)d_p;\n   int result;\n-  \n+\n   result = memcmp (&d->size, &e->size, sizeof (off_t));\n   if (result != 0)\n     return result;\n-  \n+\n   if (! d->sum_computed)\n     {\n       _cpp_file *const f = d->f;\n-      \n+\n       md5_buffer ((const char *)f->buffer, f->st.st_size, d->sum);\n       d->sum_computed = true;\n     }\n@@ -1458,7 +1451,7 @@ pchf_compare (const void *d_p, const void *e_p)\n     return 1;\n }\n \n-/* Check that F is not in a list read from a PCH file (if any).  \n+/* Check that F is not in a list read from a PCH file (if any).\n    Assumes that f->buffer_valid is true.  Return TRUE if the file\n    should not be read.  */\n \n@@ -1468,7 +1461,7 @@ check_file_against_entries (cpp_reader *pfile ATTRIBUTE_UNUSED,\n \t\t\t    bool check_included)\n {\n   struct pchf_compare_data d;\n-  \n+\n   if (pchf == NULL\n       || (! check_included && ! pchf->have_once_only))\n     return false;"}, {"sha": "660674671582b65d4d4d1bd139a6f1829545c413", "filename": "gcc/cpphash.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=16dd5cfeb8364bb5b8ea60de17788a2d414c8972", "patch": "@@ -563,9 +563,6 @@ extern void _cpp_init_internal_pragmas (cpp_reader *);\n extern void _cpp_do_file_change (cpp_reader *, enum lc_reason, const char *,\n \t\t\t\t unsigned int, unsigned int);\n extern void _cpp_pop_buffer (cpp_reader *);\n-extern uchar *_cpp_input_to_utf8 (cpp_reader *, const unsigned char *, cppchar_t);\n-extern void _cpp_init_iconv_buffer (cpp_reader *, const char *);\n-extern void _cpp_close_iconv_buffer (cpp_reader *);\n \n /* In cpptrad.c.  */\n extern bool _cpp_scan_out_logical_line (cpp_reader *, cpp_macro *);\n@@ -582,8 +579,12 @@ extern size_t _cpp_replacement_text_len (const cpp_macro *);\n extern cppchar_t _cpp_valid_ucn (cpp_reader *, const uchar **,\n \t\t\t\t const uchar *, int);\n extern void _cpp_destroy_iconv (cpp_reader *);\n-extern bool _cpp_interpret_string_notranslate (cpp_reader *, const cpp_string *,\n+extern bool _cpp_interpret_string_notranslate (cpp_reader *,\n+\t\t\t\t\t       const cpp_string *,\n \t\t\t\t\t       cpp_string *);\n+extern uchar *_cpp_convert_input (cpp_reader *, const char *, uchar *,\n+\t\t\t\t  size_t, size_t, off_t *);\n+extern const char *_cpp_default_encoding (void);\n \n /* Utility routines and macros.  */\n #define DSC(str) (const uchar *)str, sizeof str - 1"}, {"sha": "d6509fd6a3f04255ff93b24173c871d383d08aed", "filename": "gcc/cppinit.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=16dd5cfeb8364bb5b8ea60de17788a2d414c8972", "patch": "@@ -159,11 +159,11 @@ cpp_create_reader (enum c_lang lang, hash_table *table,\n   CPP_OPTION (pfile, bytes_big_endian) = 1;  /* does not matter */\n \n   /* Default to no charset conversion.  */\n-  CPP_OPTION (pfile, narrow_charset) = 0;\n+  CPP_OPTION (pfile, narrow_charset) = _cpp_default_encoding ();\n   CPP_OPTION (pfile, wide_charset) = 0;\n \n-  /* Default the input character set to iso-8859-1 for now. */\n-  CPP_OPTION (pfile, input_charset) = \"ISO-8859-1\";\n+  /* Default the input character set to UTF-8.  */\n+  CPP_OPTION (pfile, input_charset) = _cpp_default_encoding ();\n \n   /* A fake empty \"directory\" used as the starting point for files\n      looked up without a search path.  Name cannot be '/' because we\n@@ -579,7 +579,7 @@ read_original_directory (cpp_reader *pfile)\n       debugdir[token->val.str.len - 4] = '\\0';\n \n       pfile->cb.dir_change (pfile, debugdir);\n-    }      \n+    }\n \n   /* We want to process the fake line changes as regular changes, to\n      get them output.  */\n@@ -591,7 +591,7 @@ read_original_directory (cpp_reader *pfile)\n /* This is called at the end of preprocessing.  It pops the last\n    buffer and writes dependency output, and returns the number of\n    errors.\n- \n+\n    Maybe it should also reset state, such that you could call\n    cpp_start_read with a new filename to restart processing.  */\n int"}, {"sha": "fa168594651aa0fe456a27297b24c655fff0c3c6", "filename": "gcc/cpplib.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=16dd5cfeb8364bb5b8ea60de17788a2d414c8972", "patch": "@@ -1925,7 +1925,6 @@ cpp_push_buffer (cpp_reader *pfile, const uchar *buffer, size_t len,\n \t\t int from_stage3)\n {\n   cpp_buffer *new = xobnew (&pfile->buffer_ob, cpp_buffer);\n-  const char *input = CPP_OPTION (pfile, input_charset);\n \n   /* Clears, amongst other things, if_stack and mi_cmacro.  */\n   memset (new, 0, sizeof (cpp_buffer));\n@@ -1937,7 +1936,6 @@ cpp_push_buffer (cpp_reader *pfile, const uchar *buffer, size_t len,\n   new->need_line = true;\n \n   pfile->buffer = new;\n-  _cpp_init_iconv_buffer (pfile, input);\n \n   return new;\n }\n@@ -1960,8 +1958,6 @@ _cpp_pop_buffer (cpp_reader *pfile)\n   /* In case of a missing #endif.  */\n   pfile->state.skipping = 0;\n \n-  _cpp_close_iconv_buffer (pfile);\n-\n   /* _cpp_do_file_change expects pfile->buffer to be the new one.  */\n   pfile->buffer = buffer->prev;\n "}, {"sha": "4649e6ec8f22f23db70b628cf950b3c1daead1c7", "filename": "gcc/doc/cppopts.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/gcc%2Fdoc%2Fcppopts.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/gcc%2Fdoc%2Fcppopts.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppopts.texi?ref=16dd5cfeb8364bb5b8ea60de17788a2d414c8972", "patch": "@@ -511,6 +511,16 @@ corresponds to the width of @code{wchar_t}.  As with\n by the system's @code{iconv} library routine; however, you will have\n problems with encodings that do not fit exactly in @code{wchar_t}.\n \n+@item -finput-charset=@var{charset}\n+@opindex finput-charset\n+Set the input character set, used for translation from the character\n+set of the input file to the source character set used by GCC. If the\n+locale does not specify, or GCC cannot get this information from the\n+locale, the default is UTF-8. This can be overriden by either the locale\n+or this command line option. Currently the command line option takes\n+precedence if there's a conflict. @var{charset} can be any encoding\n+supported by the system's @code{iconv} library routine.\n+\n @item -fworking-directory\n @opindex fworking-directory\n @opindex fno-working-directory"}, {"sha": "84a9692c28647e37f724af3a386f7798e4cb1d9a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=16dd5cfeb8364bb5b8ea60de17788a2d414c8972", "patch": "@@ -1,3 +1,8 @@\n+2004-02-02 Eric Christopher  <echristo@redhat.com>\n+           Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* gcc.c-torture/execute/wchar_t-1.c: Add -finput-charset.\n+\n 2004-02-02  Zack Weinberg  <zack@codesourcery.com>\n \n \t* g++.dg/eh/forced1.C, g++.dg/eh/forced2.C, g++.dg/eh/forced3.C\n@@ -20556,5 +20561,3 @@ rlsruhe.de>\n \tcorrespond to c-torture\t1.11.\n \n \t* New file.\n-\n-"}, {"sha": "7e90cc08f5ea5361d42a8f639fd284eb5c5916ea", "filename": "gcc/testsuite/gcc.c-torture/execute/wchar_t-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fwchar_t-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fwchar_t-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fwchar_t-1.c?ref=16dd5cfeb8364bb5b8ea60de17788a2d414c8972", "patch": "@@ -1,3 +1,4 @@\n+/* { dg-options \"-finput-charset=utf-8\" } */\n typedef __WCHAR_TYPE__ wchar_t;\n wchar_t x[] = L\"\u00c4\";\n wchar_t y = L'\u00c4';"}, {"sha": "c1759b61be9643d558b6f5fba46a6c9f1a9357aa", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 38, "deletions": 23, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=16dd5cfeb8364bb5b8ea60de17788a2d414c8972", "patch": "@@ -1,3 +1,18 @@\n+2004-01-29  Eric Christopher  <echristo@redhat.com>\n+            Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* testsuite/22_locale/collate/compare/wchar_t/2.cc: Remove xfail. Use\n+        -finput-charset.\n+        * testsuite/22_locale/collate/compare/wchar_t/wrapped_env.cc: Ditto.\n+        * testsuite/22_locale/collate/compare/wchar_t/wrapped_locale.cc: Ditto\n+\t* testsuite/22_locale/collate/hash/wchar_t/2.cc: Ditto.\n+        * testsuite/22_locale/collate/hash/wchar_t/wrapped_env.cc: Ditto.\n+        * testsuite/22_locale/collate/hash/wchar_t/wrapped_locale.cc: Ditto.\n+        * testsuite/22_locale/collate/transform/wchar_t/2.cc: Ditto.\n+        * testsuite/22_locale/collate/transform/wchar_t/wrapped_env.cc: Ditto.\n+        * testsuite/22_locale/collate/transform/wchar_t/wrapped_locale.cc:\n+\tDitto.\n+\n 2004-02-02  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/stl_function.h: Additional minor tweaks.\n@@ -97,7 +112,7 @@\n \t* testsuite/21_strings/basic_string/cons/char/6.cc: New.\n \t* testsuite/21_strings/basic_string/cons/wchar_t/6.cc: New.\n \t* testsuite/performance/21_strings/string_cons_input_iterator.cc: New.\n-\t\n+\n 2004-01-30  Felix Yen  <fwy@alumni.brown.edu>\n \n \t* testsuite/performance/20_util/allocator_thread.cc (do_loop):\n@@ -108,7 +123,7 @@\n \t* src/demangle.cc: Add instantiations.\n \t* src/Makefile.am: Remove special rules for demangle.lo, demangle.o.\n \t* src/Makefile.in: Regenerate.\n-\t\n+\n 2004-01-30  David Edelsohn  <edelsohn@gnu.org>\n \n \t* src/allocator.cc: Protect _S_get_thread_id() and\n@@ -196,7 +211,7 @@\n \n \t* include/bits/allocator.h: Temporary switch to new_allocator as\n \tthe default to unjam bootstraps.\n-\t\n+\n 2004-01-28  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/Makefile.am (bits_headers): Remove allocator_traits.h.\n@@ -212,7 +227,7 @@\n \t* src/Makefile.am (sources): Add allocator.cc.\n \t* src/Makefile.in: Regenerate.\n \t* testsuite/20_util/allocator/1.cc: Split second test into...\n-\t* testsuite/20_util/allocator/8230.cc: ...this. \n+\t* testsuite/20_util/allocator/8230.cc: ...this.\n \t* include/bits/stl_bvector.h (__gnu_norm): Change bit_vector\n \ttypedef to use std::allocatore. Format.\n \t* include/ext/pool_allocator.h: Remove allocator_traits.h include,\n@@ -228,14 +243,14 @@\n \timplementation details.\n \n \t* include/ext/mt_allocator.h: Replace free with delete.\n-\t\n+\n 2004-01-28  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* src/globals_io.cc: Change to __gnu_internal namespace.\n \t* src/globals_locale.cc: Same.\n \t* src/locale_init.cc: Same.\n \t* src/ios_init.cc: Same.\n-\t\n+\n 2004-01-28  Stefan Olsson  <stefan@snon.net>\n \n \t* include/ext/mt_allocator.h: Replaced all malloc() calls with\n@@ -264,7 +279,7 @@\n \t* include/bits/basic_string.h (_Rep::operator[]): Tweak\n \tsignature to take a size_type, consistently with the other\n \tmembers.\n-\t\n+\n 2004-01-27  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/27_io/ios_base/storage/11584.cc: Correct new and\n@@ -304,7 +319,7 @@\n \n \tPR libstdc++/13884\n \t* include/bits/sstream.tcc: Guard use of extern template.\n-\t\n+\n 2004-01-27  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/basic_string.tcc\n@@ -616,7 +631,7 @@\n \t_CharT, const _Alloc&)): Remove redundant try/catch.\n \t(_M_mutate(size_type, size_type, size_type)): Ditto.\n \t(_M_clone(const _Alloc&, size_type)): Ditto.\n-\t\n+\n 2004-01-18  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/basic_string.h (c_str()): Simplify, due to\n@@ -652,7 +667,7 @@\n 2004-01-16  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/ext/enc_filebuf/char/13189.cc: Fix guards.\n-\t* testsuite/ext/enc_filebuf/wchar_t/13189.cc: Same.\t\n+\t* testsuite/ext/enc_filebuf/wchar_t/13189.cc: Same.\n \n 2004-01-16  Danny Smith  <dannysmith@users.sourceforge.net>\n \n@@ -675,15 +690,15 @@\n \t... here, change signature to take a const char* and a size_t\n \tfor the grouping; not a template anymore.\n \t(__add_grouping, num_put::_M_group_int, num_put::_M_group_float):\n-\tLikewise change signature and tweak consistently. \n+\tLikewise change signature and tweak consistently.\n \t(num_get::_M_extract_float, num_get::_M_extract_int,\n \tnum_put::_M_insert_int, num_put::_M_insert_float,\n \tmoney_get::do_get(string_type&), money_get::do_put(string_type)):\n-\tUpdate callers. \n+\tUpdate callers.\n \t* config/locale/generic/numeric_members.cc\n-\t(numpunct<>::_M_initialize_numpunct): Assign the new member.\t\n+\t(numpunct<>::_M_initialize_numpunct): Assign the new member.\n \t* config/locale/gnu/numeric_members.cc\n-\t(numpunct<>::_M_initialize_numpunct): Likewise.\t\n+\t(numpunct<>::_M_initialize_numpunct): Likewise.\n \t* src/locale-inst.cc (__add_grouping): Tweak signature.\n \t(__verify_grouping): Don't instantiate, not a template anymore.\n \n@@ -698,13 +713,13 @@\n \t* include/ext/mt_allocator.h: Fixups.\n \t* testsuite/performance/allocator.cc: Enable __mt_alloc tests.\n \t* testsuite/performance/allocator_thread.cc: Same.\n-\t\n+\n 2004-01-13  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/performance/ifstream_extract_float.cc: Add higher\n \tprecision tests.\n \t* testsuite/performance/ofstream_insert_float.cc: Same.\n-\t\n+\n 2004-01-13  Paolo Carlini  <pcarlini@suse.de>\n \n \t* src/locale-misc-inst.cc (__convert_from_v(long),\n@@ -830,7 +845,7 @@\n \t* testsuite/27_io/basic_filebuf/imbue/wchar_t/13582-3.cc: Ditto.\n \t* testsuite/27_io/objects/wchar_t/13582-1_xin.cc: Ditto.\n \t* testsuite/27_io/objects/wchar_t/13582-1_xin.in: Ditto.\n-\t\n+\n 2004-01-10  Paolo Carlini  <pcarlini@suse.de>\n \n \t* docs/html/ext/lwg-active.html, docs/html/ext/lwg-defects.html:\n@@ -860,7 +875,7 @@\n \t* config.h.in: Regenerate.\n \t* aclocal.m4: Same.\n \t* configure: Same.\n-\t\n+\n 2004-01-07  Gawain Bolton  <gp.bolton@computer.org>\n \n \t* include/bits/stl_list.h:\n@@ -874,7 +889,7 @@\n         Remove inheritance from iterator class and create separate\n         classes for non-constant and constant iterators.\n \t* include/bits/stl_tree.h (_Rb_tree class):\n-\t* src/tree.cc: \n+\t* src/tree.cc:\n         Only erase contents in destructor.\n         Eliminate unnecessary initialization in assignment operator.\n         Optimize for the nominal case by not checking whether\n@@ -886,9 +901,9 @@\n         Use  _M_leftmost() and _M_end() to improve readability where\n         appropriate.\n         Create separate classes for non-constant and constant\n-        iterators to clarify code, avoid extra template parameters and \n-        casting away constness.\t\t\n-\t\n+        iterators to clarify code, avoid extra template parameters and\n+        casting away constness.\n+\n 2004-01-07  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* src/Makefile.am (sources): Add list.cc, tree.cc.\n@@ -900,7 +915,7 @@\n \t* testsuite/23_containers/set/operators/1_neg.cc: Add excess errors.\n \n \t* bits/stl_vector.h: Column wrap comments.\n-\t\n+\n 2004-01-07  Loren J. Rittle  <ljrittle@acm.org>\n \n \t(re-open) PR libstdc++/12658"}, {"sha": "97ce326f810cbe28da657c16b1bd47a881088de8", "filename": "libstdc++-v3/testsuite/22_locale/collate/compare/wchar_t/2.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fwchar_t%2F2.cc?ref=16dd5cfeb8364bb5b8ea60de17788a2d414c8972", "patch": "@@ -18,9 +18,8 @@\n // Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n // USA.\n \n-// Doesn't work due to use of literal ISO8859.1 characters.  PR 11439\n-// { dg-do compile { xfail *-*-* } } should be run\n-// { dg-excess-errors \"\" }\n+// { dg-do run }\n+// { dg-options \"-finput-charset=iso-8859-1\" }\n \n // 22.2.4.1.1 collate members\n "}, {"sha": "dd4ef2aeff533c4c69861e9f2a31e3687886ac25", "filename": "libstdc++-v3/testsuite/22_locale/collate/compare/wchar_t/wrapped_env.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fwchar_t%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fwchar_t%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fwchar_t%2Fwrapped_env.cc?ref=16dd5cfeb8364bb5b8ea60de17788a2d414c8972", "patch": "@@ -20,9 +20,8 @@\n \n // 22.2.4.1.1 collate members\n \n-// Doesn't work due to use of literal ISO8859.1 characters.  PR 11439\n-// { dg-do compile { xfail *-*-* } } should be run\n-// { dg-excess-errors \"\" }\n+// { dg-do run }\n+// { dg-options \"-finput-charset=iso-8859-1\" }\n \n #include <testsuite_hooks.h>\n "}, {"sha": "f8af6497cedf03a79a6c2404d25cede333586db8", "filename": "libstdc++-v3/testsuite/22_locale/collate/compare/wchar_t/wrapped_locale.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fwchar_t%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fwchar_t%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fwchar_t%2Fwrapped_locale.cc?ref=16dd5cfeb8364bb5b8ea60de17788a2d414c8972", "patch": "@@ -20,9 +20,8 @@\n \n // 22.2.4.1.1 collate members\n \n-// Doesn't work due to use of literal ISO8859.1 characters.  PR 11439\n-// { dg-do compile { xfail *-*-* } } should be run\n-// { dg-excess-errors \"\" }\n+// { dg-do run }\n+// { dg-options \"-finput-charset=iso-8859-1\" }\n \n #include <testsuite_hooks.h>\n "}, {"sha": "c10c50786fc9a1d4bc7c423b74ce9c880da04ec2", "filename": "libstdc++-v3/testsuite/22_locale/collate/hash/wchar_t/2.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fwchar_t%2F2.cc?ref=16dd5cfeb8364bb5b8ea60de17788a2d414c8972", "patch": "@@ -20,9 +20,8 @@\n \n // 22.2.4.1.1 collate members\n \n-// Doesn't work due to use of literal ISO8859.1 characters.  PR 11439\n-// { dg-do compile { xfail *-*-* } } should be run\n-// { dg-excess-errors \"\" }\n+// { dg-do run }\n+// { dg-options \"-finput-charset=iso-8859-1\" }\n \n #include <locale>\n #include <testsuite_hooks.h>"}, {"sha": "dd4ef2aeff533c4c69861e9f2a31e3687886ac25", "filename": "libstdc++-v3/testsuite/22_locale/collate/hash/wchar_t/wrapped_env.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fwchar_t%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fwchar_t%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fwchar_t%2Fwrapped_env.cc?ref=16dd5cfeb8364bb5b8ea60de17788a2d414c8972", "patch": "@@ -20,9 +20,8 @@\n \n // 22.2.4.1.1 collate members\n \n-// Doesn't work due to use of literal ISO8859.1 characters.  PR 11439\n-// { dg-do compile { xfail *-*-* } } should be run\n-// { dg-excess-errors \"\" }\n+// { dg-do run }\n+// { dg-options \"-finput-charset=iso-8859-1\" }\n \n #include <testsuite_hooks.h>\n "}, {"sha": "f8af6497cedf03a79a6c2404d25cede333586db8", "filename": "libstdc++-v3/testsuite/22_locale/collate/hash/wchar_t/wrapped_locale.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fwchar_t%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fwchar_t%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fwchar_t%2Fwrapped_locale.cc?ref=16dd5cfeb8364bb5b8ea60de17788a2d414c8972", "patch": "@@ -20,9 +20,8 @@\n \n // 22.2.4.1.1 collate members\n \n-// Doesn't work due to use of literal ISO8859.1 characters.  PR 11439\n-// { dg-do compile { xfail *-*-* } } should be run\n-// { dg-excess-errors \"\" }\n+// { dg-do run }\n+// { dg-options \"-finput-charset=iso-8859-1\" }\n \n #include <testsuite_hooks.h>\n "}, {"sha": "41044fd52edfbf4f02aa3e0ca9dab211bb86c5d9", "filename": "libstdc++-v3/testsuite/22_locale/collate/transform/wchar_t/2.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fwchar_t%2F2.cc?ref=16dd5cfeb8364bb5b8ea60de17788a2d414c8972", "patch": "@@ -20,9 +20,8 @@\n \n // 22.2.4.1.1 collate members\n \n-// Doesn't work due to use of literal ISO8859.1 characters.  PR 11439\n-// { dg-do compile { xfail *-*-* } } should be run\n-// { dg-excess-errors \"\" }\n+// { dg-do run }\n+// { dg-options \"-finput-charset=iso-8859-1\" }\n \n #include <locale>\n #include <testsuite_hooks.h>"}, {"sha": "7c251724a5bc18321942aed874299740d8469e74", "filename": "libstdc++-v3/testsuite/22_locale/collate/transform/wchar_t/wrapped_env.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fwchar_t%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fwchar_t%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fwchar_t%2Fwrapped_env.cc?ref=16dd5cfeb8364bb5b8ea60de17788a2d414c8972", "patch": "@@ -20,9 +20,8 @@\n \n // 22.2.4.1.1 collate members\n \n-// Doesn't work due to use of literal ISO8859.1 characters.  PR 11439\n-// { dg-do compile { xfail *-*-* } } should be run\n-// { dg-excess-errors \"\" }\n+// { dg-do run }\n+// { dg-options \"-finput-charset=iso-8859-1\" }\n \n #include <testsuite_hooks.h>\n "}, {"sha": "cffa25df532ee0f80106a96d45f36fca3c4c9679", "filename": "libstdc++-v3/testsuite/22_locale/collate/transform/wchar_t/wrapped_locale.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fwchar_t%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16dd5cfeb8364bb5b8ea60de17788a2d414c8972/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fwchar_t%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fwchar_t%2Fwrapped_locale.cc?ref=16dd5cfeb8364bb5b8ea60de17788a2d414c8972", "patch": "@@ -20,9 +20,8 @@\n \n // 22.2.4.1.1 collate members\n \n-// Doesn't work due to use of literal ISO8859.1 characters.  PR 11439\n-// { dg-do compile { xfail *-*-* } } should be run\n-// { dg-excess-errors \"\" }\n+// { dg-do run }\n+// { dg-options \"-finput-charset=iso-8859-1\" }\n \n #include <testsuite_hooks.h>\n "}]}