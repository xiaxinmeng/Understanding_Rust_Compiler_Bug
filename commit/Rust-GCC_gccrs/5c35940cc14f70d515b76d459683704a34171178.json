{"sha": "5c35940cc14f70d515b76d459683704a34171178", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMzNTk0MGNjMTRmNzBkNTE1Yjc2ZDQ1OTY4MzcwNGEzNDE3MTE3OA==", "commit": {"author": {"name": "Nathanael Nerode", "email": "neroden@twcny.rr.com", "date": "2002-05-31T20:11:49Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2002-05-31T20:11:49Z"}, "message": "Makefile.in: Replace HOST_PREFIX...\n\n* gcc/Makefile.in: Replace HOST_PREFIX, HOST_PREFIX_1 with\nBUILD_PREFIX, BUILD_PREFIX_1, to correct nomenclature.\n* gcc/mklibgcc.in: Likewise.\n* gcc/config/arc/t-arc: Likewise.\n* gcc/configure.in: Likewise.\n* gcc/configure: Regenerate.\n\nFrom-SVN: r54118", "tree": {"sha": "a7086c24fe165ab77cee3991420c37c592e6a7e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7086c24fe165ab77cee3991420c37c592e6a7e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c35940cc14f70d515b76d459683704a34171178", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c35940cc14f70d515b76d459683704a34171178", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c35940cc14f70d515b76d459683704a34171178", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c35940cc14f70d515b76d459683704a34171178/comments", "author": null, "committer": null, "parents": [{"sha": "e9667b3cce309605c11abc2d7886e57195287b0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9667b3cce309605c11abc2d7886e57195287b0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9667b3cce309605c11abc2d7886e57195287b0f"}], "stats": {"total": 113, "additions": 61, "deletions": 52}, "files": [{"sha": "5882f22fc33ee35e190b9231428cf4fa7c22840b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c35940cc14f70d515b76d459683704a34171178/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c35940cc14f70d515b76d459683704a34171178/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c35940cc14f70d515b76d459683704a34171178", "patch": "@@ -1,3 +1,12 @@\n+2002-05-31  Nathanael Nerode  <neroden@twcny.rr.com>\n+\n+\t* gcc/Makefile.in: Replace HOST_PREFIX, HOST_PREFIX_1 with \n+\tBUILD_PREFIX, BUILD_PREFIX_1, to correct nomenclature.\n+\t* gcc/mklibgcc.in: Likewise.\n+\t* gcc/config/arc/t-arc: Likewise.\n+\t* gcc/configure.in: Likewise.\n+\t* gcc/configure: Regenerate.\n+\n 2002-05-31  Stan Shebs  <shebs@apple.com>\n \t    Turly O'Connor  <turly@apple.com>\n "}, {"sha": "4743a074d9ebc5a1b52f4b74f0ad2d581965743f", "filename": "gcc/Makefile.in", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c35940cc14f70d515b76d459683704a34171178/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c35940cc14f70d515b76d459683704a34171178/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=5c35940cc14f70d515b76d459683704a34171178", "patch": "@@ -468,12 +468,12 @@ DIR = ../gcc\n # Flags to use when cross-building GCC.\n # Prefix to apply to names of object files when using them\n # to run on the machine we are compiling on.\n-HOST_PREFIX = @HOST_PREFIX@\n+BUILD_PREFIX = @BUILD_PREFIX@\n # Prefix to apply to names of object files when compiling them\n # to run on the machine we are compiling on.\n # The default for this variable is chosen to keep these rules\n # out of the way of the other rules for compiling the same source files.\n-HOST_PREFIX_1 = @HOST_PREFIX_1@\n+BUILD_PREFIX_1 = @BUILD_PREFIX_1@\n # Native compiler for the build machine and its switches.\n HOST_CC = @HOST_CC@\n HOST_CFLAGS= @HOST_CFLAGS@ -DGENERATOR_FILE\n@@ -623,12 +623,12 @@ SYSLIBS = @GNAT_LIBEXC@\n # even if we are cross-building GCC.\n HOST_LIBS = $(BUILD_LIBIBERTY)\n \n-HOST_RTL = $(HOST_PREFIX)rtl.o read-rtl.o $(HOST_PREFIX)bitmap.o \\\n-\t\t$(HOST_PREFIX)ggc-none.o gensupport.o\n+HOST_RTL = $(BUILD_PREFIX)rtl.o read-rtl.o $(BUILD_PREFIX)bitmap.o \\\n+\t\t$(BUILD_PREFIX)ggc-none.o gensupport.o\n \n-HOST_PRINT = $(HOST_PREFIX)print-rtl.o\n-HOST_ERRORS = $(HOST_PREFIX)errors.o\n-HOST_VARRAY = $(HOST_PREFIX)varray.o\n+HOST_PRINT = $(BUILD_PREFIX)print-rtl.o\n+HOST_ERRORS = $(BUILD_PREFIX)errors.o\n+HOST_VARRAY = $(BUILD_PREFIX)varray.o\n \n # Specify the directories to be searched for header files.\n # Both . and srcdir are used, in that order,\n@@ -1034,7 +1034,7 @@ LIBGCC_DEPS = $(GCC_PASSES) $(LANGUAGES) stmp-int-hdrs $(STMP_FIXPROTO) \\\n \n libgcc.a: $(LIBGCC_DEPS)\n \t$(MAKE) GCC_FOR_TARGET=\"$(GCC_FOR_TARGET)\" \\\n-\t  HOST_PREFIX=\"$(HOST_PREFIX)\" HOST_PREFIX_1=\"$(HOST_PREFIX_1)\" \\\n+\t  BUILD_PREFIX=\"$(BUILD_PREFIX)\" BUILD_PREFIX_1=\"$(BUILD_PREFIX_1)\" \\\n \t  AR_FOR_TARGET=\"$(AR_FOR_TARGET)\" \\\n \t  AR_CREATE_FOR_TARGET=\"$(AR_CREATE_FOR_TARGET)\" \\\n \t  AR_FLAGS_FOR_TARGET=\"$(AR_FLAGS_FOR_TARGET)\" \\\n@@ -1072,7 +1072,7 @@ s-mlib: $(srcdir)/genmultilib Makefile\n # Build multiple copies of libgcc.a, one for each target switch.\n stmp-multilib: $(LIBGCC_DEPS)\n \t$(MAKE) GCC_FOR_TARGET=\"$(GCC_FOR_TARGET)\" \\\n-\t  HOST_PREFIX=\"$(HOST_PREFIX)\" HOST_PREFIX_1=\"$(HOST_PREFIX_1)\" \\\n+\t  BUILD_PREFIX=\"$(BUILD_PREFIX)\" BUILD_PREFIX_1=\"$(BUILD_PREFIX_1)\" \\\n \t  AR_FOR_TARGET=\"$(AR_FOR_TARGET)\" \\\n \t  AR_CREATE_FOR_TARGET=\"$(AR_CREATE_FOR_TARGET)\" \\\n \t  AR_FLAGS_FOR_TARGET=\"$(AR_FLAGS_FOR_TARGET)\" \\\n@@ -1928,43 +1928,43 @@ genpreds.o : genpreds.c $(RTL_BASE_H) $(HCONFIG_H) $(SYSTEM_H)\n #\f\n # Compile the libraries to be used by gen*.\n # If we are not cross-building, gen* use the same .o's that cc1 will use,\n-# and HOST_PREFIX_1 is `loser-', just to ensure these rules don't conflict\n+# and BUILD_PREFIX_1 is `loser-', just to ensure these rules don't conflict\n # with the rules for rtl.o, etc.\n-$(HOST_PREFIX_1)rtl.o: $(srcdir)/rtl.c $(HCONFIG_H) $(SYSTEM_H) $(RTL_H) \\\n+$(BUILD_PREFIX_1)rtl.o: $(srcdir)/rtl.c $(HCONFIG_H) $(SYSTEM_H) $(RTL_H) \\\n   real.h $(GGC_H) errors.h\n-\trm -f $(HOST_PREFIX)rtl.c\n-\tsed -e 's/config[.]h/hconfig.h/' $(srcdir)/rtl.c > $(HOST_PREFIX)rtl.c\n-\t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)rtl.c $(OUTPUT_OPTION)\n+\trm -f $(BUILD_PREFIX)rtl.c\n+\tsed -e 's/config[.]h/hconfig.h/' $(srcdir)/rtl.c > $(BUILD_PREFIX)rtl.c\n+\t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(BUILD_PREFIX)rtl.c $(OUTPUT_OPTION)\n \n-$(HOST_PREFIX_1)print-rtl.o: $(srcdir)/print-rtl.c $(HCONFIG_H) \\\n+$(BUILD_PREFIX_1)print-rtl.o: $(srcdir)/print-rtl.c $(HCONFIG_H) \\\n   $(RTL_H) $(TREE_H) hard-reg-set.h $(BASIC_BLOCK_H)\n-\trm -f $(HOST_PREFIX)print-rtl.c\n-\tsed -e 's/config[.]h/hconfig.h/' $(srcdir)/print-rtl.c > $(HOST_PREFIX)print-rtl.c\n-\t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)print-rtl.c $(OUTPUT_OPTION)\n+\trm -f $(BUILD_PREFIX)print-rtl.c\n+\tsed -e 's/config[.]h/hconfig.h/' $(srcdir)/print-rtl.c > $(BUILD_PREFIX)print-rtl.c\n+\t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(BUILD_PREFIX)print-rtl.c $(OUTPUT_OPTION)\n \n-$(HOST_PREFIX_1)bitmap.o: $(srcdir)/bitmap.c $(HCONFIG_H) $(SYSTEM_H) $(RTL_H) \\\n+$(BUILD_PREFIX_1)bitmap.o: $(srcdir)/bitmap.c $(HCONFIG_H) $(SYSTEM_H) $(RTL_H) \\\n   flags.h $(BASIC_BLOCK_H) $(REGS_H)\n-\trm -f $(HOST_PREFIX)bitmap.c\n-\tsed -e 's/config[.]h/hconfig.h/' $(srcdir)/bitmap.c > $(HOST_PREFIX)bitmap.c\n-\t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)bitmap.c $(OUTPUT_OPTION)\n+\trm -f $(BUILD_PREFIX)bitmap.c\n+\tsed -e 's/config[.]h/hconfig.h/' $(srcdir)/bitmap.c > $(BUILD_PREFIX)bitmap.c\n+\t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(BUILD_PREFIX)bitmap.c $(OUTPUT_OPTION)\n \n-$(HOST_PREFIX_1)errors.o: errors.c $(HCONFIG_H) $(SYSTEM_H) errors.h\n-\trm -f $(HOST_PREFIX)errors.c\n-\tsed -e 's/config[.]h/hconfig.h/' $(srcdir)/errors.c > $(HOST_PREFIX)errors.c\n-\t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)errors.c $(OUTPUT_OPTION)\n+$(BUILD_PREFIX_1)errors.o: errors.c $(HCONFIG_H) $(SYSTEM_H) errors.h\n+\trm -f $(BUILD_PREFIX)errors.c\n+\tsed -e 's/config[.]h/hconfig.h/' $(srcdir)/errors.c > $(BUILD_PREFIX)errors.c\n+\t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(BUILD_PREFIX)errors.c $(OUTPUT_OPTION)\n \n-$(HOST_PREFIX_1)varray.o: varray.c $(HCONFIG_H) $(SYSTEM_H) varray.h $(RTL_H) \\\n+$(BUILD_PREFIX_1)varray.o: varray.c $(HCONFIG_H) $(SYSTEM_H) varray.h $(RTL_H) \\\n   $(TREE_H) bitmap.h errors.h\n-\trm -f $(HOST_PREFIX)varray.c\n+\trm -f $(BUILD_PREFIX)varray.c\n \tsed -e 's/config[.]h/hconfig.h/' $(srcdir)/varray.c > \\\n-\t\t$(HOST_PREFIX)varray.c\n+\t\t$(BUILD_PREFIX)varray.c\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) \\\n-\t\t$(HOST_PREFIX)varray.c $(OUTPUT_OPTION)\n+\t\t$(BUILD_PREFIX)varray.c $(OUTPUT_OPTION)\n \n-$(HOST_PREFIX_1)ggc-none.o: ggc-none.c $(HCONFIG_H) $(SYSTEM_H) $(GCC_H)\n-\trm -f $(HOST_PREFIX)ggc-none.c\n-\tsed -e 's/config[.]h/hconfig.h/' $(srcdir)/ggc-none.c > $(HOST_PREFIX)ggc-none.c\n-\t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)ggc-none.c $(OUTPUT_OPTION)\n+$(BUILD_PREFIX_1)ggc-none.o: ggc-none.c $(HCONFIG_H) $(SYSTEM_H) $(GCC_H)\n+\trm -f $(BUILD_PREFIX)ggc-none.c\n+\tsed -e 's/config[.]h/hconfig.h/' $(srcdir)/ggc-none.c > $(BUILD_PREFIX)ggc-none.c\n+\t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(BUILD_PREFIX)ggc-none.c $(OUTPUT_OPTION)\n \n #\f\n # Remake internationalization support.\n@@ -2446,9 +2446,9 @@ mostlyclean: $(INTL_MOSTLYCLEAN) lang.mostlyclean\n \t-rm -f $(STAGESTUFF)\n \t-rm -rf libgcc\n # Delete the temporary source copies for cross compilation.\n-\t-rm -f $(HOST_PREFIX_1)rtl.c $(HOST_PREFIX_1)print-rtl.c\n-\t-rm -f $(HOST_PREFIX_1)bitmap.c $(HOST_PREFIX_1)errors.c\n-\t-rm -f $(HOST_PREFIX_1)ggc-none.c\n+\t-rm -f $(BUILD_PREFIX_1)rtl.c $(BUILD_PREFIX_1)print-rtl.c\n+\t-rm -f $(BUILD_PREFIX_1)bitmap.c $(BUILD_PREFIX_1)errors.c\n+\t-rm -f $(BUILD_PREFIX_1)ggc-none.c\n # Delete the temp files made in the course of building libgcc.a.\n \t-rm -f xlimits.h\n # Delete other built files.\n@@ -2754,7 +2754,7 @@ install-libgcc: libgcc.mk libgcc.a installdirs\n \t  r_f_t=: ; \\\n \tfi; \\\n \t$(MAKE) GCC_FOR_TARGET=\"$(GCC_FOR_TARGET)\" \\\n-\t  HOST_PREFIX=\"$(HOST_PREFIX)\" HOST_PREFIX_1=\"$(HOST_PREFIX_1)\" \\\n+\t  BUILD_PREFIX=\"$(BUILD_PREFIX)\" BUILD_PREFIX_1=\"$(BUILD_PREFIX_1)\" \\\n \t  AR_FOR_TARGET=\"$(AR_FOR_TARGET)\" \\\n \t  AR_CREATE_FOR_TARGET=\"$(AR_CREATE_FOR_TARGET)\" \\\n \t  AR_FLAGS_FOR_TARGET=\"$(AR_FLAGS_FOR_TARGET)\" \\\n@@ -2780,7 +2780,7 @@ install-multilib: stmp-multilib installdirs\n \t  r_f_t=: ; \\\n \tfi; \\\n \t$(MAKE) GCC_FOR_TARGET=\"$(GCC_FOR_TARGET)\" \\\n-\t  HOST_PREFIX=\"$(HOST_PREFIX)\" HOST_PREFIX_1=\"$(HOST_PREFIX_1)\" \\\n+\t  BUILD_PREFIX=\"$(BUILD_PREFIX)\" BUILD_PREFIX_1=\"$(BUILD_PREFIX_1)\" \\\n \t  AR_FOR_TARGET=\"$(AR_FOR_TARGET)\" \\\n \t  AR_CREATE_FOR_TARGET=\"$(AR_CREATE_FOR_TARGET)\" \\\n \t  AR_FLAGS_FOR_TARGET=\"$(AR_FLAGS_FOR_TARGET)\" \\"}, {"sha": "688603b5d312795952f5ddcf9b17b1b54d69aa58", "filename": "gcc/config/arc/t-arc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c35940cc14f70d515b76d459683704a34171178/gcc%2Fconfig%2Farc%2Ft-arc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c35940cc14f70d515b76d459683704a34171178/gcc%2Fconfig%2Farc%2Ft-arc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Ft-arc?ref=5c35940cc14f70d515b76d459683704a34171178", "patch": "@@ -51,7 +51,7 @@ stmp-multilib-arc: stmp-multilib\n \t  flags=`echo $$i | sed -e 's/^[^;]*;//' -e 's/@/ -/g'`; \\\n \t  $(MAKE) GCC_FOR_TARGET=\"$(GCC_FOR_TARGET)\" \\\n \t    CC=\"$(CC)\" CFLAGS=\"$(CFLAGS)\" \\\n-\t    HOST_PREFIX=\"$(HOST_PREFIX)\" HOST_PREFIX_1=\"$(HOST_PREFIX_1)\" \\\n+\t    BUILD_PREFIX=\"$(BUILD_PREFIX)\" BUILD_PREFIX_1=\"$(BUILD_PREFIX_1)\" \\\n \t    GCC_CFLAGS=\"$(GCC_CFLAGS) $${flags}\" \\\n \t    INCLUDES=\"$(INCLUDES)\" CRTSTUFF_T_CFLAGS=$(CRTSTUFF_T_CFLAGS) \\\n \t    dir=\"$${dir}\" x-crtinit.o x-crtfini.o; \\"}, {"sha": "5defdaa0a03eaee59fa94a5e6155aa3fda405ded", "filename": "gcc/configure", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c35940cc14f70d515b76d459683704a34171178/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c35940cc14f70d515b76d459683704a34171178/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=5c35940cc14f70d515b76d459683704a34171178", "patch": "@@ -6797,8 +6797,8 @@ fi\n # FIXME.\n \n # These are the normal (build=host) settings:\n-HOST_PREFIX=\t\t\t\n-HOST_PREFIX_1=ignore-\t\t\n+BUILD_PREFIX=\t\t\t\n+BUILD_PREFIX_1=ignore-\t\t\n HOST_CC='$(CC)'\t\t\t\n HOST_CFLAGS='$(ALL_CFLAGS)'\t\n \n@@ -6808,8 +6808,8 @@ STMP_FIXPROTO=stmp-fixproto\n # And these apply if build != host.\n if test x$build != x$host\n then\n-    HOST_PREFIX=build-\n-    HOST_PREFIX_1=build-\n+    BUILD_PREFIX=build-\n+    BUILD_PREFIX_1=build-\n     HOST_CC='$(CC_FOR_BUILD)'\n     HOST_CFLAGS='$(INTERNAL_CFLAGS) $(T_CFLAGS) $(CFLAGS_FOR_BUILD) $(XCFLAGS)'\n \n@@ -8543,8 +8543,8 @@ s%@CROSS@%$CROSS%g\n s%@ALL@%$ALL%g\n s%@SYSTEM_HEADER_DIR@%$SYSTEM_HEADER_DIR%g\n s%@inhibit_libc@%$inhibit_libc%g\n-s%@HOST_PREFIX@%$HOST_PREFIX%g\n-s%@HOST_PREFIX_1@%$HOST_PREFIX_1%g\n+s%@BUILD_PREFIX@%$BUILD_PREFIX%g\n+s%@BUILD_PREFIX_1@%$BUILD_PREFIX_1%g\n s%@HOST_CC@%$HOST_CC%g\n s%@HOST_CFLAGS@%$HOST_CFLAGS%g\n s%@STMP_FIXINC@%$STMP_FIXINC%g"}, {"sha": "a76dac824f00eaee962d0d84cca63a8b3b33f9c8", "filename": "gcc/configure.in", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c35940cc14f70d515b76d459683704a34171178/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c35940cc14f70d515b76d459683704a34171178/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=5c35940cc14f70d515b76d459683704a34171178", "patch": "@@ -1146,8 +1146,8 @@ AC_SUBST(inhibit_libc)\n # FIXME.\n \n # These are the normal (build=host) settings:\n-HOST_PREFIX=\t\t\tAC_SUBST(HOST_PREFIX)\n-HOST_PREFIX_1=ignore-\t\tAC_SUBST(HOST_PREFIX_1)\n+BUILD_PREFIX=\t\t\tAC_SUBST(BUILD_PREFIX)\n+BUILD_PREFIX_1=ignore-\t\tAC_SUBST(BUILD_PREFIX_1)\n HOST_CC='$(CC)'\t\t\tAC_SUBST(HOST_CC)\n HOST_CFLAGS='$(ALL_CFLAGS)'\tAC_SUBST(HOST_CFLAGS)\n \n@@ -1157,8 +1157,8 @@ STMP_FIXPROTO=stmp-fixproto\tAC_SUBST(STMP_FIXPROTO)\n # And these apply if build != host.\n if test x$build != x$host\n then\n-    HOST_PREFIX=build-\n-    HOST_PREFIX_1=build-\n+    BUILD_PREFIX=build-\n+    BUILD_PREFIX_1=build-\n     HOST_CC='$(CC_FOR_BUILD)'\n     HOST_CFLAGS='$(INTERNAL_CFLAGS) $(T_CFLAGS) $(CFLAGS_FOR_BUILD) $(XCFLAGS)'\n "}, {"sha": "12f54460a6f0f840017080289cb83fd5ea01ee16", "filename": "gcc/mklibgcc.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c35940cc14f70d515b76d459683704a34171178/gcc%2Fmklibgcc.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c35940cc14f70d515b76d459683704a34171178/gcc%2Fmklibgcc.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmklibgcc.in?ref=5c35940cc14f70d515b76d459683704a34171178", "patch": "@@ -56,8 +56,8 @@ make_compile='$(MAKE) GCC_FOR_TARGET=\"$(GCC_FOR_TARGET)\" \\\n \t  AR_EXTRACT_FOR_TARGET=\"$(AR_EXTRACT_FOR_TARGET)\" \\\n \t  AR_FLAGS_FOR_TARGET=\"$(AR_FLAGS_FOR_TARGET)\" \\\n \t  CC=\"$(CC)\" CFLAGS=\"$(CFLAGS)\" \\\n-\t  HOST_PREFIX=\"$(HOST_PREFIX)\" \\\n-\t  HOST_PREFIX_1=\"$(HOST_PREFIX_1)\" \\\n+\t  BUILD_PREFIX=\"$(BUILD_PREFIX)\" \\\n+\t  BUILD_PREFIX_1=\"$(BUILD_PREFIX_1)\" \\\n \t  LANGUAGES=\"$(LANGUAGES)\"'\n \n # Dependencies for libgcc2.c"}]}