{"sha": "3439657b02869299685d259c3a77aa38714565b7", "node_id": "C_kwDOANBUbNoAKDM0Mzk2NTdiMDI4NjkyOTk2ODVkMjU5YzNhNzdhYTM4NzE0NTY1Yjc", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-11-04T15:51:37Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-11-09T14:40:33Z"}, "message": "libstdc++: Support getentropy and arc4random in std::random_device\n\nThis adds additional \"getentropy\" and \"arc4random\" tokens to\nstd::random_device. The former is supported on Glibc and OpenBSD (and\napparently wasm), and the latter is supported on various BSDs.\n\nlibstdc++-v3/ChangeLog:\n\n\t* acinclude.m4 (GLIBCXX_CHECK_GETENTROPY, GLIBCXX_CHECK_ARC4RANDOM):\n\tDefine.\n\t* configure.ac (GLIBCXX_CHECK_GETENTROPY, GLIBCXX_CHECK_ARC4RANDOM):\n\tUse them.\n\t* config.h.in: Regenerate.\n\t* configure: Regenerate.\n\t* src/c++11/random.cc (random_device): Add getentropy and\n\tarc4random as sources.\n\t* testsuite/26_numerics/random/random_device/cons/token.cc:\n\tCheck new tokens.\n\t* testsuite/26_numerics/random/random_device/entropy.cc:\n\tLikewise.", "tree": {"sha": "1dab70303e55e7101cdb6bde499de3239cda0cfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1dab70303e55e7101cdb6bde499de3239cda0cfc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3439657b02869299685d259c3a77aa38714565b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3439657b02869299685d259c3a77aa38714565b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3439657b02869299685d259c3a77aa38714565b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3439657b02869299685d259c3a77aa38714565b7/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d2d0a6c4391e462555db6d33b2cc00f3da0932f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d2d0a6c4391e462555db6d33b2cc00f3da0932f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d2d0a6c4391e462555db6d33b2cc00f3da0932f"}], "stats": {"total": 236, "additions": 234, "deletions": 2}, "files": [{"sha": "497af5723e158abdadf8fdd7932d9f5e45cfd1f5", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3439657b02869299685d259c3a77aa38714565b7/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3439657b02869299685d259c3a77aa38714565b7/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=3439657b02869299685d259c3a77aa38714565b7", "patch": "@@ -4830,6 +4830,52 @@ AC_DEFUN([GLIBCXX_CHECK_EXCEPTION_PTR_SYMVER], [\n   fi\n ])\n \n+dnl\n+dnl Check whether getentropy is present in <unistd.h>.\n+dnl\n+AC_DEFUN([GLIBCXX_CHECK_GETENTROPY], [\n+\n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  AC_MSG_CHECKING([for getentropy])\n+  AC_CACHE_VAL(glibcxx_cv_getentropy, [\n+      AC_TRY_COMPILE(\n+\t[#include <unistd.h>],\n+\t[unsigned i;\n+\t ::getentropy(&i, sizeof(i));],\n+\t[glibcxx_cv_getentropy=yes], [glibcxx_cv_getentropy=no])\n+    ])\n+\n+  if test $glibcxx_cv_getentropy = yes; then\n+    AC_DEFINE(HAVE_GETENTROPY, 1, [Define if getentropy is available in <unistd.h>.])\n+  fi\n+  AC_MSG_RESULT($glibcxx_cv_getentropy)\n+  AC_LANG_RESTORE\n+])\n+\n+dnl\n+dnl Check whether arc4random is present in <stdlib.h>.\n+dnl\n+AC_DEFUN([GLIBCXX_CHECK_ARC4RANDOM], [\n+\n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  AC_MSG_CHECKING([for arc4random])\n+  AC_CACHE_VAL(glibcxx_cv_arc4random, [\n+      AC_TRY_COMPILE(\n+\t[#include <stdlib.h>],\n+\t[unsigned i = ::arc4random();],\n+\t[glibcxx_cv_arc4random=yes], [glibcxx_cv_arc4random=no])\n+    ])\n+\n+  if test $glibcxx_cv_arc4random = yes; then\n+    AC_DEFINE(HAVE_ARC4RANDOM, 1, [Define if arc4random is available in <stdlib.h>.])\n+  fi\n+  AC_MSG_RESULT($glibcxx_cv_arc4random)\n+  AC_LANG_RESTORE\n+])\n+\n+\n # Macros from the top-level gcc directory.\n m4_include([../config/gc++filt.m4])\n m4_include([../config/tls.m4])"}, {"sha": "420021fcb1af54c4d6de6794852f3eb90481b681", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3439657b02869299685d259c3a77aa38714565b7/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3439657b02869299685d259c3a77aa38714565b7/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=3439657b02869299685d259c3a77aa38714565b7", "patch": "@@ -9,6 +9,9 @@\n /* Define to 1 if you have the `aligned_alloc' function. */\n #undef HAVE_ALIGNED_ALLOC\n \n+/* Define if arc4random is available in <stdlib.h>. */\n+#undef HAVE_ARC4RANDOM\n+\n /* Define to 1 if you have the <arpa/inet.h> header file. */\n #undef HAVE_ARPA_INET_H\n \n@@ -132,6 +135,9 @@\n /* Define to 1 if you have the `frexpl' function. */\n #undef HAVE_FREXPL\n \n+/* Define if getentropy is available in <unistd.h>. */\n+#undef HAVE_GETENTROPY\n+\n /* Define if _Unwind_GetIPInfo is available. */\n #undef HAVE_GETIPINFO\n "}, {"sha": "21371031b66174a301fa00145815d282ccf0ef6c", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3439657b02869299685d259c3a77aa38714565b7/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3439657b02869299685d259c3a77aa38714565b7/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=3439657b02869299685d259c3a77aa38714565b7", "patch": "@@ -75429,6 +75429,109 @@ $as_echo \"#define _GLIBCXX_X86_RDSEED 1\" >>confdefs.h\n $as_echo \"$ac_cv_x86_rdseed\" >&6; }\n \n \n+# Check for other random number APIs\n+\n+\n+\n+  ac_ext=cpp\n+ac_cpp='$CXXCPP $CPPFLAGS'\n+ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for getentropy\" >&5\n+$as_echo_n \"checking for getentropy... \" >&6; }\n+  if ${glibcxx_cv_getentropy+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+      cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <unistd.h>\n+int\n+main ()\n+{\n+unsigned i;\n+\t ::getentropy(&i, sizeof(i));\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  glibcxx_cv_getentropy=yes\n+else\n+  glibcxx_cv_getentropy=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+fi\n+\n+\n+  if test $glibcxx_cv_getentropy = yes; then\n+\n+$as_echo \"#define HAVE_GETENTROPY 1\" >>confdefs.h\n+\n+  fi\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_getentropy\" >&5\n+$as_echo \"$glibcxx_cv_getentropy\" >&6; }\n+  ac_ext=c\n+ac_cpp='$CPP $CPPFLAGS'\n+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_c_compiler_gnu\n+\n+\n+\n+\n+\n+  ac_ext=cpp\n+ac_cpp='$CXXCPP $CPPFLAGS'\n+ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for arc4random\" >&5\n+$as_echo_n \"checking for arc4random... \" >&6; }\n+  if ${glibcxx_cv_arc4random+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+      cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <stdlib.h>\n+int\n+main ()\n+{\n+unsigned i = ::arc4random();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  glibcxx_cv_arc4random=yes\n+else\n+  glibcxx_cv_arc4random=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+fi\n+\n+\n+  if test $glibcxx_cv_arc4random = yes; then\n+\n+$as_echo \"#define HAVE_ARC4RANDOM 1\" >>confdefs.h\n+\n+  fi\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_arc4random\" >&5\n+$as_echo \"$glibcxx_cv_arc4random\" >&6; }\n+  ac_ext=c\n+ac_cpp='$CPP $CPPFLAGS'\n+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_c_compiler_gnu\n+\n+\n+\n # This depends on GLIBCXX_ENABLE_SYMVERS and GLIBCXX_IS_NATIVE.\n \n   # Do checks for resource limit functions."}, {"sha": "5b3c92f4bd7a7a994992f71178fbde4cce1cc881", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3439657b02869299685d259c3a77aa38714565b7/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3439657b02869299685d259c3a77aa38714565b7/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=3439657b02869299685d259c3a77aa38714565b7", "patch": "@@ -468,6 +468,10 @@ GLIBCXX_CHECK_X86_RDRAND\n # Check if assembler supports rdseed opcode.\n GLIBCXX_CHECK_X86_RDSEED\n \n+# Check for other random number APIs\n+GLIBCXX_CHECK_GETENTROPY\n+GLIBCXX_CHECK_ARC4RANDOM\n+\n # This depends on GLIBCXX_ENABLE_SYMVERS and GLIBCXX_IS_NATIVE.\n GLIBCXX_CONFIGURE_TESTSUITE\n "}, {"sha": "4a553e0d84fd6c435ffe1b17907e7b9f993817ef", "filename": "libstdc++-v3/src/c++11/random.cc", "status": "modified", "additions": 67, "deletions": 2, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3439657b02869299685d259c3a77aa38714565b7/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Frandom.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3439657b02869299685d259c3a77aa38714565b7/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Frandom.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Frandom.cc?ref=3439657b02869299685d259c3a77aa38714565b7", "patch": "@@ -68,7 +68,12 @@\n # include <stdlib.h>\n #endif\n \n-#if defined _GLIBCXX_USE_CRT_RAND_S || defined _GLIBCXX_USE_DEV_RANDOM\n+#ifdef _GLIBCXX_HAVE_GETENTROPY\n+# include <unistd.h>\n+#endif\n+\n+#if defined _GLIBCXX_USE_CRT_RAND_S || defined _GLIBCXX_USE_DEV_RANDOM \\\n+  || _GLIBCXX_HAVE_GETENTROPY\n // The OS provides a source of randomness we can use.\n # pragma GCC poison _M_mt\n #elif defined USE_RDRAND || defined USE_RDSEED || defined USE_DARN\n@@ -166,6 +171,25 @@ namespace std _GLIBCXX_VISIBILITY(default)\n     }\n #endif\n \n+#ifdef _GLIBCXX_HAVE_GETENTROPY\n+    unsigned int\n+    __libc_getentropy(void*)\n+    {\n+      unsigned int val;\n+      if (::getentropy(&val, sizeof(val)) != 0)\n+\tstd::__throw_runtime_error(__N(\"random_device: getentropy failed\"));\n+      return val;\n+    }\n+#endif\n+\n+#ifdef _GLIBCXX_HAVE_ARC4RANDOM\n+    unsigned int\n+    __libc_arc4random(void*)\n+    {\n+      return ::arc4random();\n+    }\n+#endif\n+\n #ifdef USE_LCG\n     // TODO: use this to seed std::mt19937 engine too.\n     unsigned\n@@ -214,7 +238,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n #endif\n \n     enum Which : unsigned {\n-      device_file = 1, prng = 2, rand_s = 4,\n+      device_file = 1, prng = 2, rand_s = 4, getentropy = 8, arc4random = 16,\n       rdseed = 64, rdrand = 128, darn = 256,\n       any = 0xffff\n     };\n@@ -256,6 +280,16 @@ namespace std _GLIBCXX_VISIBILITY(default)\n \treturn device_file;\n #endif\n \n+#ifdef _GLIBCXX_HAVE_ARC4RANDOM\n+      if (func == __libc_arc4random)\n+\treturn arc4random;\n+#endif\n+\n+#ifdef _GLIBCXX_HAVE_GETENTROPY\n+      if (func == __libc_getentropy)\n+\treturn getentropy;\n+#endif\n+\n #ifdef USE_LCG\n       if (func == &__lcg)\n \treturn prng;\n@@ -311,6 +345,14 @@ namespace std _GLIBCXX_VISIBILITY(default)\n     else if (token == \"rand_s\")\n       which = rand_s;\n #endif // _GLIBCXX_USE_CRT_RAND_S\n+#ifdef _GLIBCXX_HAVE_GETENTROPY\n+    else if (token == \"getentropy\")\n+      which = getentropy;\n+#endif // _GLIBCXX_HAVE_GETENTROPY\n+#ifdef _GLIBCXX_HAVE_ARC4RANDOM\n+    else if (token == \"arc4random\")\n+      which = arc4random;\n+#endif // _GLIBCXX_HAVE_ARC4RANDOM\n #ifdef _GLIBCXX_USE_DEV_RANDOM\n     else if (token == \"/dev/urandom\" || token == \"/dev/random\")\n       {\n@@ -395,6 +437,26 @@ namespace std _GLIBCXX_VISIBILITY(default)\n       }\n #endif // USE_DARN\n \n+#ifdef _GLIBCXX_HAVE_ARC4RANDOM\n+    if (which & arc4random)\n+      {\n+\t_M_func = &__libc_arc4random;\n+\treturn;\n+      }\n+#endif // _GLIBCXX_HAVE_ARC4RANDOM\n+\n+#ifdef _GLIBCXX_HAVE_GETENTROPY\n+    if (which & getentropy)\n+      {\n+\tunsigned int i;\n+\tif (::getentropy(&i, sizeof(i)) == 0) // On linux the syscall can fail.\n+\t  {\n+\t    _M_func = &__libc_getentropy;\n+\t    return;\n+\t  }\n+      }\n+#endif // _GLIBCXX_HAVE_GETENTROPY\n+\n #ifdef _GLIBCXX_USE_DEV_RANDOM\n     if (which & device_file)\n     {\n@@ -548,6 +610,9 @@ namespace std _GLIBCXX_VISIBILITY(default)\n     case rdseed:\n     case darn:\n       return (double) max;\n+    case arc4random:\n+    case getentropy:\n+      return (double) max;\n     case rand_s:\n     case prng:\n       return 0.0;"}, {"sha": "e56afbc9c975c9dcbc1c297d9e326fd2a9da22f6", "filename": "libstdc++-v3/testsuite/26_numerics/random/random_device/cons/token.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3439657b02869299685d259c3a77aa38714565b7/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2Fcons%2Ftoken.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3439657b02869299685d259c3a77aa38714565b7/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2Fcons%2Ftoken.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2Fcons%2Ftoken.cc?ref=3439657b02869299685d259c3a77aa38714565b7", "patch": "@@ -53,6 +53,7 @@ test03()\n   const std::string tokens[] = {\n     \"rdseed\", \"rdrand\", \"darn\",\n     \"rand_s\", \"/dev/urandom\", \"/dev/random\",\n+    \"getentropy\", \"arc4random\",\n     \"mt19937\", \"prng\"\n   };\n   int count = 0;"}, {"sha": "63b7043bf9b77230072f7c1377951fa453351135", "filename": "libstdc++-v3/testsuite/26_numerics/random/random_device/entropy.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3439657b02869299685d259c3a77aa38714565b7/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2Fentropy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3439657b02869299685d259c3a77aa38714565b7/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2Fentropy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2Fentropy.cc?ref=3439657b02869299685d259c3a77aa38714565b7", "patch": "@@ -28,6 +28,13 @@ test01()\n       const double entropy = std::random_device(token).entropy();\n       VERIFY( entropy == max );\n     }\n+\n+    for (auto token : { \"getentropy\", \"arc4random\" })\n+    if (__gnu_test::random_device_available(token))\n+    {\n+      const double entropy = std::random_device(token).entropy();\n+      VERIFY( entropy == max );\n+    }\n }\n \n int"}]}