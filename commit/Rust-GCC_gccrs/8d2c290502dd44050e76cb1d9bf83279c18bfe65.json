{"sha": "8d2c290502dd44050e76cb1d9bf83279c18bfe65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQyYzI5MDUwMmRkNDQwNTBlNzZjYjFkOWJmODMyNzljMThiZmU2NQ==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "coudert@clipper.ens.fr", "date": "2006-10-09T07:43:39Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2006-10-09T07:43:39Z"}, "message": "intrinsic.c (add_sym_0s, [...]): Use macro ACTUAL_NO...\n\n\t* intrinsic.c (add_sym_0s, add_sym_1s, add_sym_2s, add_sym_3s,\n\tadd_sym_4s, add_sym_5s, add_functions): Use macro ACTUAL_NO,\n\tACTUAL_YES, NOT_ELEMENTAL and ELEMENTAL instead of constants\n\t0 and 1 as second and third arguments to add_sym* functions.\n\nFrom-SVN: r117569", "tree": {"sha": "259913c0a0174c3e430253e5450f3233099cba48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/259913c0a0174c3e430253e5450f3233099cba48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d2c290502dd44050e76cb1d9bf83279c18bfe65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d2c290502dd44050e76cb1d9bf83279c18bfe65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d2c290502dd44050e76cb1d9bf83279c18bfe65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d2c290502dd44050e76cb1d9bf83279c18bfe65/comments", "author": null, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cee9bb59b46bc3d34557cad125e68fc1540bbcaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cee9bb59b46bc3d34557cad125e68fc1540bbcaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cee9bb59b46bc3d34557cad125e68fc1540bbcaf"}], "stats": {"total": 530, "additions": 272, "deletions": 258}, "files": [{"sha": "a8758cd54fdcba03297c88c6e007afcef1ded290", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2c290502dd44050e76cb1d9bf83279c18bfe65/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2c290502dd44050e76cb1d9bf83279c18bfe65/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8d2c290502dd44050e76cb1d9bf83279c18bfe65", "patch": "@@ -1,3 +1,10 @@\n+2006-10-09  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\t* intrinsic.c (add_sym_0s, add_sym_1s, add_sym_2s, add_sym_3s,\n+\tadd_sym_4s, add_sym_5s, add_functions): Use macro ACTUAL_NO,\n+\tACTUAL_YES, NOT_ELEMENTAL and ELEMENTAL instead of constants\n+\t0 and 1 as second and third arguments to add_sym* functions.\n+\n 2006-10-08  Erik Edelmann <edelmann@gcc.gnu.org>\n \t    Paul Thomas <pault@gcc.gnu.org>\n "}, {"sha": "c2c37e829a090ef4a2f247543fa0419a1d398f1d", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 265, "deletions": 258, "changes": 523, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2c290502dd44050e76cb1d9bf83279c18bfe65/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2c290502dd44050e76cb1d9bf83279c18bfe65/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=8d2c290502dd44050e76cb1d9bf83279c18bfe65", "patch": "@@ -50,6 +50,12 @@ static enum\n { SZ_NOTHING = 0, SZ_SUBS, SZ_FUNCS, SZ_CONVS }\n sizing;\n \n+#define NOT_ELEMENTAL\t0\n+#define ELEMENTAL\t1\n+\n+#define ACTUAL_NO\t0\n+#define ACTUAL_YES\t1\n+\n #define REQUIRED\t0\n #define OPTIONAL\t1\n \n@@ -346,7 +352,7 @@ add_sym_0s (const char * name, int standard,\n   sf.f1 = NULL;\n   rf.s1 = resolve;\n \n-  add_sym (name, 1, 0, BT_UNKNOWN, 0, standard, cf, sf, rf,\n+  add_sym (name, ELEMENTAL, ACTUAL_NO, BT_UNKNOWN, 0, standard, cf, sf, rf,\n \t   (void*)0);\n }\n \n@@ -395,7 +401,7 @@ add_sym_1s (const char *name, int elemental, bt type,\n   sf.f1 = simplify;\n   rf.s1 = resolve;\n \n-  add_sym (name, elemental, 0, type, kind, standard, cf, sf, rf,\n+  add_sym (name, elemental, ACTUAL_NO, type, kind, standard, cf, sf, rf,\n \t   a1, type1, kind1, optional1,\n \t   (void*)0);\n }\n@@ -475,7 +481,7 @@ add_sym_2s (const char *name, int elemental, bt type,\n   sf.f2 = simplify;\n   rf.s1 = resolve;\n \n-  add_sym (name, elemental, 0, type, kind, standard, cf, sf, rf,\n+  add_sym (name, elemental, ACTUAL_NO, type, kind, standard, cf, sf, rf,\n \t   a1, type1, kind1, optional1,\n \t   a2, type2, kind2, optional2,\n \t   (void*)0);\n@@ -590,7 +596,7 @@ add_sym_3s (const char *name, int elemental, bt type,\n   sf.f3 = simplify;\n   rf.s1 = resolve;\n \n-  add_sym (name, elemental, 0, type, kind, standard, cf, sf, rf,\n+  add_sym (name, elemental, ACTUAL_NO, type, kind, standard, cf, sf, rf,\n \t   a1, type1, kind1, optional1,\n \t   a2, type2, kind2, optional2,\n \t   a3, type3, kind3, optional3,\n@@ -651,7 +657,7 @@ add_sym_4s (const char *name, int elemental,\n   sf.f4 = simplify;\n   rf.s1 = resolve;\n \n-  add_sym (name, elemental, 0, type, kind, standard, cf, sf, rf,\n+  add_sym (name, elemental, ACTUAL_NO, type, kind, standard, cf, sf, rf,\n \t   a1, type1, kind1, optional1,\n \t   a2, type2, kind2, optional2,\n \t   a3, type3, kind3, optional3,\n@@ -683,7 +689,7 @@ add_sym_5s (const char *name, int elemental,\n   sf.f5 = simplify;\n   rf.s1 = resolve;\n \n-  add_sym (name, elemental, 0, type, kind, standard, cf, sf, rf,\n+  add_sym (name, elemental, ACTUAL_NO, type, kind, standard, cf, sf, rf,\n \t   a1, type1, kind1, optional1,\n \t   a2, type2, kind2, optional2,\n \t   a3, type3, kind3, optional3,\n@@ -918,23 +924,23 @@ add_functions (void)\n   dz = gfc_default_complex_kind;\n   ii = gfc_index_integer_kind;\n \n-  add_sym_1 (\"abs\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n+  add_sym_1 (\"abs\", ELEMENTAL, ACTUAL_YES, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_abs, gfc_simplify_abs, gfc_resolve_abs,\n \t     a, BT_REAL, dr, REQUIRED);\n \n-  add_sym_1 (\"iabs\", 1, 1, BT_INTEGER, di, GFC_STD_F77,\n+  add_sym_1 (\"iabs\", ELEMENTAL, ACTUAL_YES, BT_INTEGER, di, GFC_STD_F77,\n \t     NULL, gfc_simplify_abs, gfc_resolve_abs,\n \t     a, BT_INTEGER, di, REQUIRED);\n \n-  add_sym_1 (\"dabs\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n+  add_sym_1 (\"dabs\", ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_abs, gfc_resolve_abs,\n \t     a, BT_REAL, dd, REQUIRED);\n \n-  add_sym_1 (\"cabs\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n+  add_sym_1 (\"cabs\", ELEMENTAL, ACTUAL_YES, BT_REAL, dr, GFC_STD_F77,\n \t     NULL, gfc_simplify_abs, gfc_resolve_abs,\n \t     a, BT_COMPLEX, dz, REQUIRED);\n \n-  add_sym_1 (\"zabs\", 1, 1, BT_REAL, dd, GFC_STD_GNU, \n+  add_sym_1 (\"zabs\", ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_GNU, \n \t     NULL, gfc_simplify_abs, gfc_resolve_abs, \n \t     a, BT_COMPLEX, dd, REQUIRED);\n \n@@ -944,231 +950,231 @@ add_functions (void)\n \n   /* The checking function for ACCESS is called gfc_check_access_func\n      because the name gfc_check_access is already used in module.c.  */\n-  add_sym_2 (\"access\", 0, 0, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_2 (\"access\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_access_func, NULL, gfc_resolve_access,\n \t     nm, BT_CHARACTER, dc, REQUIRED, md, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"access\", GFC_ISYM_ACCESS, GFC_STD_GNU);\n \n-  add_sym_1 (\"achar\", 1, 0, BT_CHARACTER, dc, GFC_STD_F95,\n+  add_sym_1 (\"achar\", ELEMENTAL, ACTUAL_NO, BT_CHARACTER, dc, GFC_STD_F95,\n \t     gfc_check_achar, gfc_simplify_achar, NULL,\n \t     i, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"achar\", GFC_ISYM_ACHAR, GFC_STD_F95);\n \n-  add_sym_1 (\"acos\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n+  add_sym_1 (\"acos\", ELEMENTAL, ACTUAL_YES, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_fn_r, gfc_simplify_acos, gfc_resolve_acos,\n \t     x, BT_REAL, dr, REQUIRED);\n \n-  add_sym_1 (\"dacos\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n+  add_sym_1 (\"dacos\", ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_acos, gfc_resolve_acos,\n \t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"acos\", GFC_ISYM_ACOS, GFC_STD_F77);\n \n-  add_sym_1 (\"acosh\", 1, 1, BT_REAL, dr, GFC_STD_GNU,\n+  add_sym_1 (\"acosh\", ELEMENTAL, ACTUAL_YES, BT_REAL, dr, GFC_STD_GNU,\n \t     gfc_check_fn_r, gfc_simplify_acosh, gfc_resolve_acosh,\n \t     x, BT_REAL, dr, REQUIRED);\n \n-  add_sym_1 (\"dacosh\", 1, 1, BT_REAL, dd, GFC_STD_GNU,\n+  add_sym_1 (\"dacosh\", ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_GNU,\n \t     NULL, gfc_simplify_acosh, gfc_resolve_acosh,\n \t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"acosh\", GFC_ISYM_ACOSH, GFC_STD_GNU);\n \n-  add_sym_1 (\"adjustl\", 1, 0, BT_CHARACTER, dc, GFC_STD_F95,\n+  add_sym_1 (\"adjustl\", ELEMENTAL, ACTUAL_NO, BT_CHARACTER, dc, GFC_STD_F95,\n \t     NULL, gfc_simplify_adjustl, NULL,\n \t     stg, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"adjustl\", GFC_ISYM_ADJUSTL, GFC_STD_F95);\n \n-  add_sym_1 (\"adjustr\", 1, 0, BT_CHARACTER, dc, GFC_STD_F95,\n+  add_sym_1 (\"adjustr\", ELEMENTAL, ACTUAL_NO, BT_CHARACTER, dc, GFC_STD_F95,\n \t     NULL, gfc_simplify_adjustr, NULL,\n \t     stg, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"adjustr\", GFC_ISYM_ADJUSTR, GFC_STD_F95);\n \n-  add_sym_1 (\"aimag\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n+  add_sym_1 (\"aimag\", ELEMENTAL, ACTUAL_YES, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_fn_c, gfc_simplify_aimag, gfc_resolve_aimag,\n \t     z, BT_COMPLEX, dz, REQUIRED);\n \n   make_alias (\"imag\", GFC_STD_GNU);\n   make_alias (\"imagpart\", GFC_STD_GNU);\n \n-  add_sym_1 (\"dimag\", 1, 1, BT_REAL, dd, GFC_STD_GNU, \n+  add_sym_1 (\"dimag\", ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_GNU, \n \t     NULL, gfc_simplify_aimag, gfc_resolve_aimag, \n \t     z, BT_COMPLEX, dd, REQUIRED);\n \n   make_generic (\"aimag\", GFC_ISYM_AIMAG, GFC_STD_F77);\n \n-  add_sym_2 (\"aint\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n+  add_sym_2 (\"aint\", ELEMENTAL, ACTUAL_YES, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_a_xkind, gfc_simplify_aint, gfc_resolve_aint,\n \t     a, BT_REAL, dr, REQUIRED, kind, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_1 (\"dint\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n+  add_sym_1 (\"dint\", ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_dint, gfc_resolve_dint,\n \t     a, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"aint\", GFC_ISYM_AINT, GFC_STD_F77);\n \n-  add_sym_2 (\"all\", 0, 0, BT_UNKNOWN, 0, GFC_STD_F95,\n+  add_sym_2 (\"all\", NOT_ELEMENTAL, ACTUAL_NO, BT_UNKNOWN, 0, GFC_STD_F95,\n \t     gfc_check_all_any, NULL, gfc_resolve_all,\n \t     msk, BT_LOGICAL, dl, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL);\n \n   make_generic (\"all\", GFC_ISYM_ALL, GFC_STD_F95);\n \n-  add_sym_1 (\"allocated\", 0, 0, BT_LOGICAL, dl, GFC_STD_F95,\n+  add_sym_1 (\"allocated\", NOT_ELEMENTAL, ACTUAL_NO, BT_LOGICAL, dl, GFC_STD_F95,\n \t     gfc_check_allocated, NULL, NULL,\n \t     ar, BT_UNKNOWN, 0, REQUIRED);\n \n   make_generic (\"allocated\", GFC_ISYM_ALLOCATED, GFC_STD_F95);\n \n-  add_sym_2 (\"anint\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n+  add_sym_2 (\"anint\", ELEMENTAL, ACTUAL_YES, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_a_xkind, gfc_simplify_anint, gfc_resolve_anint,\n \t     a, BT_REAL, dr, REQUIRED, kind, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_1 (\"dnint\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n+  add_sym_1 (\"dnint\", ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_dnint, gfc_resolve_dnint,\n \t     a, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"anint\", GFC_ISYM_ANINT, GFC_STD_F77);\n \n-  add_sym_2 (\"any\", 0, 0, BT_UNKNOWN, 0, GFC_STD_F95,\n+  add_sym_2 (\"any\", NOT_ELEMENTAL, ACTUAL_NO, BT_UNKNOWN, 0, GFC_STD_F95,\n \t     gfc_check_all_any, NULL, gfc_resolve_any,\n \t     msk, BT_LOGICAL, dl, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL);\n \n   make_generic (\"any\", GFC_ISYM_ANY, GFC_STD_F95);\n \n-  add_sym_1 (\"asin\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n+  add_sym_1 (\"asin\", ELEMENTAL, ACTUAL_YES, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_fn_r, gfc_simplify_asin, gfc_resolve_asin,\n \t     x, BT_REAL, dr, REQUIRED);\n \n-  add_sym_1 (\"dasin\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n+  add_sym_1 (\"dasin\", ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_asin, gfc_resolve_asin,\n \t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"asin\", GFC_ISYM_ASIN, GFC_STD_F77);\n   \n-  add_sym_1 (\"asinh\", 1, 1, BT_REAL, dr, GFC_STD_GNU,\n+  add_sym_1 (\"asinh\", ELEMENTAL, ACTUAL_YES, BT_REAL, dr, GFC_STD_GNU,\n \t     gfc_check_fn_r, gfc_simplify_asinh, gfc_resolve_asinh,\n \t     x, BT_REAL, dr, REQUIRED);\n \n-  add_sym_1 (\"dasinh\", 1, 1, BT_REAL, dd, GFC_STD_GNU,\n+  add_sym_1 (\"dasinh\", ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_GNU,\n \t     NULL, gfc_simplify_asinh, gfc_resolve_asinh,\n \t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"asinh\", GFC_ISYM_ASINH, GFC_STD_GNU);\n \n-  add_sym_2 (\"associated\", 0, 0, BT_LOGICAL, dl, GFC_STD_F95,\n-\t     gfc_check_associated, NULL, NULL,\n+  add_sym_2 (\"associated\", NOT_ELEMENTAL, ACTUAL_NO, BT_LOGICAL, dl,\n+\t     GFC_STD_F95, gfc_check_associated, NULL, NULL,\n \t     pt, BT_UNKNOWN, 0, REQUIRED, tg, BT_UNKNOWN, 0, OPTIONAL);\n \n   make_generic (\"associated\", GFC_ISYM_ASSOCIATED, GFC_STD_F95);\n \n-  add_sym_1 (\"atan\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n+  add_sym_1 (\"atan\", ELEMENTAL, ACTUAL_YES, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_fn_r, gfc_simplify_atan, gfc_resolve_atan,\n \t     x, BT_REAL, dr, REQUIRED);\n \n-  add_sym_1 (\"datan\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n+  add_sym_1 (\"datan\", ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_atan, gfc_resolve_atan,\n \t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"atan\", GFC_ISYM_ATAN, GFC_STD_F77);\n   \n-  add_sym_1 (\"atanh\", 1, 1, BT_REAL, dr, GFC_STD_GNU,\n+  add_sym_1 (\"atanh\", ELEMENTAL, ACTUAL_YES, BT_REAL, dr, GFC_STD_GNU,\n \t     gfc_check_fn_r, gfc_simplify_atanh, gfc_resolve_atanh,\n \t     x, BT_REAL, dr, REQUIRED);\n \n-  add_sym_1 (\"datanh\", 1, 1, BT_REAL, dd, GFC_STD_GNU,\n+  add_sym_1 (\"datanh\", ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_GNU,\n \t     NULL, gfc_simplify_atanh, gfc_resolve_atanh,\n \t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"atanh\", GFC_ISYM_ATANH, GFC_STD_GNU);\n \n-  add_sym_2 (\"atan2\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n+  add_sym_2 (\"atan2\", ELEMENTAL, ACTUAL_YES, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_atan2, gfc_simplify_atan2, gfc_resolve_atan2,\n \t     y, BT_REAL, dr, REQUIRED, x, BT_REAL, dr, REQUIRED);\n \n-  add_sym_2 (\"datan2\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n+  add_sym_2 (\"datan2\", ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_atan2, gfc_resolve_atan2,\n \t     y, BT_REAL, dd, REQUIRED, x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"atan2\", GFC_ISYM_ATAN2, GFC_STD_F77);\n   \n   /* Bessel and Neumann functions for G77 compatibility.  */\n-  add_sym_1 (\"besj0\", 1, 0, BT_REAL, dr, GFC_STD_GNU,\n+  add_sym_1 (\"besj0\", ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_GNU,\n \t     gfc_check_g77_math1, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dr, REQUIRED);\n \n-  add_sym_1 (\"dbesj0\", 1, 0, BT_REAL, dd, GFC_STD_GNU,\n+  add_sym_1 (\"dbesj0\", ELEMENTAL, ACTUAL_NO, BT_REAL, dd, GFC_STD_GNU,\n \t     gfc_check_g77_math1, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"besj0\", GFC_ISYM_J0, GFC_STD_GNU);\n \n-  add_sym_1 (\"besj1\", 1, 0, BT_REAL, dr, GFC_STD_GNU,\n+  add_sym_1 (\"besj1\", ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_GNU,\n \t     gfc_check_g77_math1, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dr, REQUIRED);\n \n-  add_sym_1 (\"dbesj1\", 1, 0, BT_REAL, dd, GFC_STD_GNU,\n+  add_sym_1 (\"dbesj1\", ELEMENTAL, ACTUAL_NO, BT_REAL, dd, GFC_STD_GNU,\n \t     gfc_check_g77_math1, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"besj1\", GFC_ISYM_J1, GFC_STD_GNU);\n \n-  add_sym_2 (\"besjn\", 1, 0, BT_REAL, dr, GFC_STD_GNU,\n+  add_sym_2 (\"besjn\", ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_GNU,\n \t     gfc_check_besn, NULL, gfc_resolve_besn,\n \t     n, BT_INTEGER, di, REQUIRED, x, BT_REAL, dr, REQUIRED);\n \n-  add_sym_2 (\"dbesjn\", 1, 0, BT_REAL, dd, GFC_STD_GNU,\n+  add_sym_2 (\"dbesjn\", ELEMENTAL, ACTUAL_NO, BT_REAL, dd, GFC_STD_GNU,\n \t     gfc_check_besn, NULL, gfc_resolve_besn,\n \t     n, BT_INTEGER, di, REQUIRED, x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"besjn\", GFC_ISYM_JN, GFC_STD_GNU);\n \n-  add_sym_1 (\"besy0\", 1, 0, BT_REAL, dr, GFC_STD_GNU,\n+  add_sym_1 (\"besy0\", ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_GNU,\n \t     gfc_check_g77_math1, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dr, REQUIRED);\n \n-  add_sym_1 (\"dbesy0\", 1, 0, BT_REAL, dd, GFC_STD_GNU,\n+  add_sym_1 (\"dbesy0\", ELEMENTAL, ACTUAL_NO, BT_REAL, dd, GFC_STD_GNU,\n \t     gfc_check_g77_math1, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"besy0\", GFC_ISYM_Y0, GFC_STD_GNU);\n \n-  add_sym_1 (\"besy1\", 1, 0, BT_REAL, dr, GFC_STD_GNU,\n+  add_sym_1 (\"besy1\", ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_GNU,\n \t     gfc_check_g77_math1, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dr, REQUIRED);\n \n-  add_sym_1 (\"dbesy1\", 1, 0, BT_REAL, dd, GFC_STD_GNU,\n+  add_sym_1 (\"dbesy1\", ELEMENTAL, ACTUAL_NO, BT_REAL, dd, GFC_STD_GNU,\n \t     gfc_check_g77_math1, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"besy1\", GFC_ISYM_Y1, GFC_STD_GNU);\n \n-  add_sym_2 (\"besyn\", 1, 0, BT_REAL, dr, GFC_STD_GNU,\n+  add_sym_2 (\"besyn\", ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_GNU,\n \t     gfc_check_besn, NULL, gfc_resolve_besn,\n \t     n, BT_INTEGER, di, REQUIRED, x, BT_REAL, dr, REQUIRED);\n \n-  add_sym_2 (\"dbesyn\", 1, 0, BT_REAL, dd, GFC_STD_GNU,\n+  add_sym_2 (\"dbesyn\", ELEMENTAL, ACTUAL_NO, BT_REAL, dd, GFC_STD_GNU,\n \t     gfc_check_besn, NULL, gfc_resolve_besn,\n \t     n, BT_INTEGER, di, REQUIRED, x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"besyn\", GFC_ISYM_YN, GFC_STD_GNU);\n \n-  add_sym_1 (\"bit_size\", 0, 0, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_1 (\"bit_size\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_i, gfc_simplify_bit_size, NULL,\n \t     i, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"bit_size\", GFC_ISYM_NONE, GFC_STD_F95);\n \n-  add_sym_2 (\"btest\", 1, 0, BT_LOGICAL, dl, GFC_STD_F95,\n+  add_sym_2 (\"btest\", ELEMENTAL, ACTUAL_NO, BT_LOGICAL, dl, GFC_STD_F95,\n \t     gfc_check_btest, gfc_simplify_btest, gfc_resolve_btest,\n \t     i, BT_INTEGER, di, REQUIRED, pos, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"btest\", GFC_ISYM_BTEST, GFC_STD_F95);\n \n-  add_sym_2 (\"ceiling\", 1, 0, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_2 (\"ceiling\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_a_ikind, gfc_simplify_ceiling, gfc_resolve_ceiling,\n \t     a, BT_REAL, dr, REQUIRED, kind, BT_INTEGER, di, OPTIONAL);\n \n@@ -1180,32 +1186,32 @@ add_functions (void)\n \n   make_generic (\"char\", GFC_ISYM_CHAR, GFC_STD_F77);\n \n-  add_sym_1 (\"chdir\", 0, 0, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_1 (\"chdir\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_chdir, NULL, gfc_resolve_chdir,\n \t     a, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"chdir\", GFC_ISYM_CHDIR, GFC_STD_GNU);\n \n-  add_sym_2 (\"chmod\", 0, 0, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_2 (\"chmod\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_chmod, NULL, gfc_resolve_chmod,\n \t     nm, BT_CHARACTER, dc, REQUIRED, md, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"chmod\", GFC_ISYM_CHMOD, GFC_STD_GNU);\n \n-  add_sym_3 (\"cmplx\", 1, 0, BT_COMPLEX, dz, GFC_STD_F77,\n+  add_sym_3 (\"cmplx\", ELEMENTAL, ACTUAL_NO, BT_COMPLEX, dz, GFC_STD_F77,\n \t     gfc_check_cmplx, gfc_simplify_cmplx, gfc_resolve_cmplx,\n \t     x, BT_UNKNOWN, dr, REQUIRED, y, BT_UNKNOWN, dr, OPTIONAL,\n \t     kind, BT_INTEGER, di, OPTIONAL);\n \n   make_generic (\"cmplx\", GFC_ISYM_CMPLX, GFC_STD_F77);\n \n-  add_sym_0 (\"command_argument_count\", 1, 0, BT_INTEGER, di, GFC_STD_F2003,\n-\t     NULL, NULL, NULL);\n+  add_sym_0 (\"command_argument_count\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di,\n+\t     GFC_STD_F2003, NULL, NULL, NULL);\n \n   make_generic (\"command_argument_count\", GFC_ISYM_COMMAND_ARGUMENT_COUNT,\n \t        GFC_STD_F2003);\n \n-  add_sym_2 (\"complex\", 1, 0, BT_COMPLEX, dz, GFC_STD_GNU,\n+  add_sym_2 (\"complex\", ELEMENTAL, ACTUAL_NO, BT_COMPLEX, dz, GFC_STD_GNU,\n \t     gfc_check_complex, gfc_simplify_complex, gfc_resolve_complex,\n \t     x, BT_UNKNOWN, dr, REQUIRED, y, BT_UNKNOWN, dr, REQUIRED);\n \n@@ -1214,556 +1220,557 @@ add_functions (void)\n   /* Making dcmplx a specific of cmplx causes cmplx to return a double\n      complex instead of the default complex.  */\n \n-  add_sym_2 (\"dcmplx\", 1, 0, BT_COMPLEX, dd, GFC_STD_GNU,\n+  add_sym_2 (\"dcmplx\", ELEMENTAL, ACTUAL_NO, BT_COMPLEX, dd, GFC_STD_GNU,\n \t     gfc_check_dcmplx, gfc_simplify_dcmplx, gfc_resolve_dcmplx,\n \t     x, BT_REAL, dd, REQUIRED, y, BT_REAL, dd, OPTIONAL);\n \n   make_generic (\"dcmplx\", GFC_ISYM_CMPLX, GFC_STD_GNU);\n \n-  add_sym_1 (\"conjg\", 1, 1, BT_COMPLEX, dz, GFC_STD_F77,\n+  add_sym_1 (\"conjg\", ELEMENTAL, ACTUAL_YES, BT_COMPLEX, dz, GFC_STD_F77,\n \t     gfc_check_fn_c, gfc_simplify_conjg, gfc_resolve_conjg,\n \t     z, BT_COMPLEX, dz, REQUIRED);\n \n-  add_sym_1 (\"dconjg\", 1, 1, BT_COMPLEX, dd, GFC_STD_GNU,\n+  add_sym_1 (\"dconjg\", ELEMENTAL, ACTUAL_YES, BT_COMPLEX, dd, GFC_STD_GNU,\n \t     NULL, gfc_simplify_conjg, gfc_resolve_conjg, \n \t     z, BT_COMPLEX, dd, REQUIRED);\n \n   make_generic (\"conjg\", GFC_ISYM_CONJG, GFC_STD_F77);\n \n-  add_sym_1 (\"cos\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n+  add_sym_1 (\"cos\", ELEMENTAL, ACTUAL_YES, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_fn_rc, gfc_simplify_cos, gfc_resolve_cos,\n \t     x, BT_REAL, dr, REQUIRED);\n \n-  add_sym_1 (\"dcos\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n+  add_sym_1 (\"dcos\", ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n \t     gfc_check_fn_rc, gfc_simplify_cos, gfc_resolve_cos,\n \t     x, BT_REAL, dd, REQUIRED);\n \n-  add_sym_1 (\"ccos\", 1, 1, BT_COMPLEX, dz, GFC_STD_F77,\n+  add_sym_1 (\"ccos\", ELEMENTAL, ACTUAL_YES, BT_COMPLEX, dz, GFC_STD_F77,\n \t     NULL, gfc_simplify_cos, gfc_resolve_cos,\n \t     x, BT_COMPLEX, dz, REQUIRED);\n \n-  add_sym_1 (\"zcos\", 1, 1, BT_COMPLEX, dd, GFC_STD_GNU,\n+  add_sym_1 (\"zcos\", ELEMENTAL, ACTUAL_YES, BT_COMPLEX, dd, GFC_STD_GNU,\n \t     NULL, gfc_simplify_cos, gfc_resolve_cos, \n \t     x, BT_COMPLEX, dd, REQUIRED);\n \n   make_alias (\"cdcos\", GFC_STD_GNU);\n \n   make_generic (\"cos\", GFC_ISYM_COS, GFC_STD_F77);\n \n-  add_sym_1 (\"cosh\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n+  add_sym_1 (\"cosh\", ELEMENTAL, ACTUAL_YES, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_fn_r, gfc_simplify_cosh, gfc_resolve_cosh,\n \t     x, BT_REAL, dr, REQUIRED);\n \n-  add_sym_1 (\"dcosh\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n+  add_sym_1 (\"dcosh\", ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_cosh, gfc_resolve_cosh,\n \t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"cosh\", GFC_ISYM_COSH, GFC_STD_F77);\n \n-  add_sym_2 (\"count\", 0, 0, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_2 (\"count\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_count, NULL, gfc_resolve_count,\n \t     msk, BT_LOGICAL, dl, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL);\n \n   make_generic (\"count\", GFC_ISYM_COUNT, GFC_STD_F95);\n \n-  add_sym_3 (\"cshift\", 0, 0, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_3 (\"cshift\", NOT_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_cshift, NULL, gfc_resolve_cshift,\n \t     ar, BT_REAL, dr, REQUIRED, sh, BT_INTEGER, di, REQUIRED,\n \t     dm, BT_INTEGER, ii, OPTIONAL);\n \n   make_generic (\"cshift\", GFC_ISYM_CSHIFT, GFC_STD_F95);\n \n-  add_sym_1 (\"ctime\", 0, 0, BT_CHARACTER, 0, GFC_STD_GNU,\n+  add_sym_1 (\"ctime\", NOT_ELEMENTAL, ACTUAL_NO, BT_CHARACTER, 0, GFC_STD_GNU,\n               gfc_check_ctime, NULL, gfc_resolve_ctime,\n \t      tm, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"ctime\", GFC_ISYM_CTIME, GFC_STD_GNU);\n \n-  add_sym_1 (\"dble\", 1, 0, BT_REAL, dd, GFC_STD_F77,\n+  add_sym_1 (\"dble\", ELEMENTAL, ACTUAL_NO, BT_REAL, dd, GFC_STD_F77,\n \t     gfc_check_dble, gfc_simplify_dble, gfc_resolve_dble,\n \t     a, BT_REAL, dr, REQUIRED);\n \n   make_alias (\"dfloat\", GFC_STD_GNU);\n \n   make_generic (\"dble\", GFC_ISYM_DBLE, GFC_STD_F77);\n \n-  add_sym_1 (\"digits\", 0, 0, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_1 (\"digits\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_digits, gfc_simplify_digits, NULL,\n \t     x, BT_UNKNOWN, dr, REQUIRED);\n \n   make_generic (\"digits\", GFC_ISYM_NONE, GFC_STD_F95);\n \n-  add_sym_2 (\"dim\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n+  add_sym_2 (\"dim\", ELEMENTAL, ACTUAL_YES, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_a_p, gfc_simplify_dim, gfc_resolve_dim,\n \t     x, BT_REAL, dr, REQUIRED, y, BT_UNKNOWN, dr, REQUIRED);\n \n-  add_sym_2 (\"idim\", 1, 1, BT_INTEGER, di, GFC_STD_F77,\n+  add_sym_2 (\"idim\", ELEMENTAL, ACTUAL_YES, BT_INTEGER, di, GFC_STD_F77,\n \t     NULL, gfc_simplify_dim, gfc_resolve_dim,\n \t     x, BT_INTEGER, di, REQUIRED, y, BT_INTEGER, di, REQUIRED);\n \n-  add_sym_2 (\"ddim\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n+  add_sym_2 (\"ddim\", ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_dim, gfc_resolve_dim,\n \t     x, BT_REAL, dd, REQUIRED, y, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"dim\", GFC_ISYM_DIM, GFC_STD_F77);\n \n-  add_sym_2 (\"dot_product\", 0, 0, BT_UNKNOWN, 0, GFC_STD_F95,\n-\t     gfc_check_dot_product, NULL, gfc_resolve_dot_product,\n+  add_sym_2 (\"dot_product\", NOT_ELEMENTAL, ACTUAL_NO, BT_UNKNOWN, 0,\n+\t     GFC_STD_F95, gfc_check_dot_product, NULL, gfc_resolve_dot_product,\n \t     va, BT_REAL, dr, REQUIRED, vb, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"dot_product\", GFC_ISYM_DOT_PRODUCT, GFC_STD_F95);\n \n-  add_sym_2 (\"dprod\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n+  add_sym_2 (\"dprod\", ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_dprod, gfc_resolve_dprod,\n \t     x, BT_REAL, dr, REQUIRED, y, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"dprod\", GFC_ISYM_DPROD, GFC_STD_F77);\n \n-  add_sym_1 (\"dreal\", 1, 0, BT_REAL, dd, GFC_STD_GNU,\n+  add_sym_1 (\"dreal\", ELEMENTAL, ACTUAL_NO, BT_REAL, dd, GFC_STD_GNU,\n \t     NULL, NULL, NULL,\n \t     a, BT_COMPLEX, dd, REQUIRED);\n \n   make_generic (\"dreal\", GFC_ISYM_REAL, GFC_STD_GNU);\n \n-  add_sym_4 (\"eoshift\", 0, 0, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_4 (\"eoshift\", NOT_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_eoshift, NULL, gfc_resolve_eoshift,\n \t     ar, BT_REAL, dr, 0, sh, BT_INTEGER, ii, REQUIRED,\n \t     bd, BT_REAL, dr, 1, dm, BT_INTEGER, ii, OPTIONAL);\n \n   make_generic (\"eoshift\", GFC_ISYM_EOSHIFT, GFC_STD_F95);\n \n-  add_sym_1 (\"epsilon\", 0, 0, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_1 (\"epsilon\", NOT_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_x, gfc_simplify_epsilon, NULL,\n \t     x, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"epsilon\", GFC_ISYM_NONE, GFC_STD_F95);\n \n   /* G77 compatibility for the ERF() and ERFC() functions.  */\n-  add_sym_1 (\"erf\", 1, 0, BT_REAL, dr, GFC_STD_GNU,\n+  add_sym_1 (\"erf\", ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_GNU,\n \t     gfc_check_g77_math1, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dr, REQUIRED);\n \n-  add_sym_1 (\"derf\", 1, 0, BT_REAL, dd, GFC_STD_GNU,\n+  add_sym_1 (\"derf\", ELEMENTAL, ACTUAL_NO, BT_REAL, dd, GFC_STD_GNU,\n \t     gfc_check_g77_math1, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"erf\", GFC_ISYM_ERF, GFC_STD_GNU);\n \n-  add_sym_1 (\"erfc\", 1, 0, BT_REAL, dr, GFC_STD_GNU,\n+  add_sym_1 (\"erfc\", ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_GNU,\n \t     gfc_check_g77_math1, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dr, REQUIRED);\n \n-  add_sym_1 (\"derfc\", 1, 0, BT_REAL, dd, GFC_STD_GNU,\n+  add_sym_1 (\"derfc\", ELEMENTAL, ACTUAL_NO, BT_REAL, dd, GFC_STD_GNU,\n \t     gfc_check_g77_math1, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"erfc\", GFC_ISYM_ERFC, GFC_STD_GNU);\n \n   /* G77 compatibility */\n-  add_sym_1 (\"etime\", 0, 0, BT_REAL, 4,  GFC_STD_GNU,\n+  add_sym_1 (\"etime\", NOT_ELEMENTAL, ACTUAL_NO, BT_REAL, 4,  GFC_STD_GNU,\n \t     gfc_check_etime, NULL, NULL,\n \t     x, BT_REAL, 4, REQUIRED);\n \n   make_alias (\"dtime\", GFC_STD_GNU);\n \n   make_generic (\"etime\", GFC_ISYM_ETIME, GFC_STD_GNU);\n \n-  add_sym_1 (\"exp\", 1, 1, BT_REAL, dr,  GFC_STD_F77,\n+  add_sym_1 (\"exp\", ELEMENTAL, ACTUAL_YES, BT_REAL, dr,  GFC_STD_F77,\n \t     gfc_check_fn_rc, gfc_simplify_exp, gfc_resolve_exp,\n \t     x, BT_REAL, dr, REQUIRED);\n \n-  add_sym_1 (\"dexp\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n+  add_sym_1 (\"dexp\", ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_exp, gfc_resolve_exp,\n \t     x, BT_REAL, dd, REQUIRED);\n \n-  add_sym_1 (\"cexp\", 1, 1, BT_COMPLEX, dz, GFC_STD_F77,\n+  add_sym_1 (\"cexp\", ELEMENTAL, ACTUAL_YES, BT_COMPLEX, dz, GFC_STD_F77,\n \t     NULL, gfc_simplify_exp, gfc_resolve_exp,\n \t     x, BT_COMPLEX, dz, REQUIRED);\n \n-  add_sym_1 (\"zexp\", 1, 1, BT_COMPLEX, dd,  GFC_STD_GNU,\n+  add_sym_1 (\"zexp\", ELEMENTAL, ACTUAL_YES, BT_COMPLEX, dd,  GFC_STD_GNU,\n \t     NULL, gfc_simplify_exp, gfc_resolve_exp, \n \t     x, BT_COMPLEX, dd, REQUIRED);\n \n   make_alias (\"cdexp\", GFC_STD_GNU);\n \n   make_generic (\"exp\", GFC_ISYM_EXP, GFC_STD_F77);\n \n-  add_sym_1 (\"exponent\", 1, 0, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_1 (\"exponent\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_x, gfc_simplify_exponent, gfc_resolve_exponent,\n \t     x, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"exponent\", GFC_ISYM_EXPONENT, GFC_STD_F95);\n \n-  add_sym_0 (\"fdate\", 1, 0, BT_CHARACTER, dc, GFC_STD_GNU,\n+  add_sym_0 (\"fdate\", ELEMENTAL, ACTUAL_NO, BT_CHARACTER, dc, GFC_STD_GNU,\n \t     NULL, NULL, gfc_resolve_fdate);\n \n   make_generic (\"fdate\", GFC_ISYM_FDATE, GFC_STD_GNU);\n \n-  add_sym_2 (\"floor\", 1, 0, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_2 (\"floor\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_a_ikind, gfc_simplify_floor, gfc_resolve_floor,\n \t     a, BT_REAL, dr, REQUIRED, kind, BT_INTEGER, di, OPTIONAL);\n \n   make_generic (\"floor\", GFC_ISYM_FLOOR, GFC_STD_F95);\n \n   /* G77 compatible fnum */\n-  add_sym_1 (\"fnum\", 0, 0, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_1 (\"fnum\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_fnum, NULL, gfc_resolve_fnum,\n \t     ut, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"fnum\", GFC_ISYM_FNUM, GFC_STD_GNU);\n \n-  add_sym_1 (\"fraction\", 1, 0, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_1 (\"fraction\", ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_x, gfc_simplify_fraction, gfc_resolve_fraction,\n \t     x, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"fraction\", GFC_ISYM_FRACTION, GFC_STD_F95);\n \n-  add_sym_2 (\"fstat\", 0, 0, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_2 (\"fstat\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_fstat, NULL, gfc_resolve_fstat,\n \t     a, BT_INTEGER, di, REQUIRED, b, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"fstat\", GFC_ISYM_FSTAT, GFC_STD_GNU);\n \n-  add_sym_1 (\"ftell\", 0, 0, BT_INTEGER, ii, GFC_STD_GNU,\n+  add_sym_1 (\"ftell\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, ii, GFC_STD_GNU,\n \t     gfc_check_ftell, NULL, gfc_resolve_ftell,\n \t     ut, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"ftell\", GFC_ISYM_FTELL, GFC_STD_GNU);\n \n-  add_sym_2 (\"fgetc\", 0, 0, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_2 (\"fgetc\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_fgetputc, NULL, gfc_resolve_fgetc,\n \t     ut, BT_INTEGER, di, REQUIRED, c, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"fgetc\", GFC_ISYM_FGETC, GFC_STD_GNU);\n \n-  add_sym_1 (\"fget\", 0, 0, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_1 (\"fget\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_fgetput, NULL, gfc_resolve_fget,\n \t     c, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"fget\", GFC_ISYM_FGET, GFC_STD_GNU);\n \n-  add_sym_2 (\"fputc\", 0, 0, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_2 (\"fputc\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_fgetputc, NULL, gfc_resolve_fputc,\n \t     ut, BT_INTEGER, di, REQUIRED, c, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"fputc\", GFC_ISYM_FPUTC, GFC_STD_GNU);\n \n-  add_sym_1 (\"fput\", 0, 0, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_1 (\"fput\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_fgetput, NULL, gfc_resolve_fput,\n \t     c, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"fput\", GFC_ISYM_FPUT, GFC_STD_GNU);\n \n   /* Unix IDs (g77 compatibility)  */\n-  add_sym_1 (\"getcwd\", 0, 0, BT_INTEGER, di,  GFC_STD_GNU,\n+  add_sym_1 (\"getcwd\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di,  GFC_STD_GNU,\n \t     NULL, NULL, gfc_resolve_getcwd,\n \t     c, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"getcwd\", GFC_ISYM_GETCWD, GFC_STD_GNU);\n \n-  add_sym_0 (\"getgid\", 1, 0, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_0 (\"getgid\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n \t     NULL, NULL, gfc_resolve_getgid);\n \n   make_generic (\"getgid\", GFC_ISYM_GETGID, GFC_STD_GNU);\n \n-  add_sym_0 (\"getpid\", 1, 0, BT_INTEGER, di, GFC_STD_GNU, \n+  add_sym_0 (\"getpid\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU, \n \t     NULL, NULL, gfc_resolve_getpid);\n \n   make_generic (\"getpid\", GFC_ISYM_GETPID, GFC_STD_GNU);\n \n-  add_sym_0 (\"getuid\", 1, 0, BT_INTEGER, di, GFC_STD_GNU, \n+  add_sym_0 (\"getuid\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU, \n \t     NULL, NULL, gfc_resolve_getuid);\n \n   make_generic (\"getuid\", GFC_ISYM_GETUID, GFC_STD_GNU);\n \n-  add_sym_1 (\"hostnm\", 0, 0, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_1 (\"hostnm\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_hostnm, NULL, gfc_resolve_hostnm,\n \t     a, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"hostnm\", GFC_ISYM_HOSTNM, GFC_STD_GNU);\n \n-  add_sym_1 (\"huge\", 0, 0, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_1 (\"huge\", NOT_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_huge, gfc_simplify_huge, NULL,\n \t     x, BT_UNKNOWN, dr, REQUIRED);\n \n   make_generic (\"huge\", GFC_ISYM_NONE, GFC_STD_F95);\n \n-  add_sym_1 (\"iachar\", 1, 0, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_1 (\"iachar\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_ichar_iachar, gfc_simplify_iachar, NULL,\n \t     c, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"iachar\", GFC_ISYM_IACHAR, GFC_STD_F95);\n \n-  add_sym_2 (\"iand\", 1, 0, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_2 (\"iand\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_iand, gfc_simplify_iand, gfc_resolve_iand,\n \t     i, BT_INTEGER, di, REQUIRED, j, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"iand\", GFC_ISYM_IAND, GFC_STD_F95);\n \n-  add_sym_2 (\"and\", 1, 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2 (\"and\", ELEMENTAL, ACTUAL_NO, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t     gfc_check_and, gfc_simplify_and, gfc_resolve_and,\n \t     i, BT_UNKNOWN, 0, REQUIRED, j, BT_UNKNOWN, 0, REQUIRED);\n \n   make_generic (\"and\", GFC_ISYM_AND, GFC_STD_GNU);\n \n-  add_sym_0 (\"iargc\", 1, 0, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_0 (\"iargc\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n \t     NULL, NULL, NULL);\n \n   make_generic (\"iargc\", GFC_ISYM_IARGC, GFC_STD_GNU);\n \n-  add_sym_2 (\"ibclr\", 1, 0, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_2 (\"ibclr\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_ibclr, gfc_simplify_ibclr, gfc_resolve_ibclr,\n \t     i, BT_INTEGER, di, REQUIRED, pos, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"ibclr\", GFC_ISYM_IBCLR, GFC_STD_F95);\n \n-  add_sym_3 (\"ibits\", 1, 0, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_3 (\"ibits\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_ibits, gfc_simplify_ibits, gfc_resolve_ibits,\n \t     i, BT_INTEGER, di, REQUIRED, pos, BT_INTEGER, di, REQUIRED,\n \t     ln, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"ibits\", GFC_ISYM_IBITS, GFC_STD_F95);\n \n-  add_sym_2 (\"ibset\", 1, 0, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_2 (\"ibset\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_ibset, gfc_simplify_ibset, gfc_resolve_ibset,\n \t     i, BT_INTEGER, di, REQUIRED, pos, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"ibset\", GFC_ISYM_IBSET, GFC_STD_F95);\n \n-  add_sym_1 (\"ichar\", 1, 0, BT_INTEGER, di, GFC_STD_F77,\n+  add_sym_1 (\"ichar\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F77,\n \t     gfc_check_ichar_iachar, gfc_simplify_ichar, gfc_resolve_ichar,\n \t     c, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"ichar\", GFC_ISYM_ICHAR, GFC_STD_F77);\n \n-  add_sym_2 (\"ieor\", 1, 0, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_2 (\"ieor\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_ieor, gfc_simplify_ieor, gfc_resolve_ieor,\n \t     i, BT_INTEGER, di, REQUIRED, j, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"ieor\", GFC_ISYM_IEOR, GFC_STD_F95);\n \n-  add_sym_2 (\"xor\", 1, 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2 (\"xor\", ELEMENTAL, ACTUAL_NO, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t     gfc_check_and, gfc_simplify_xor, gfc_resolve_xor,\n \t     i, BT_UNKNOWN, 0, REQUIRED, j, BT_UNKNOWN, 0, REQUIRED);\n \n   make_generic (\"xor\", GFC_ISYM_XOR, GFC_STD_GNU);\n \n-  add_sym_0 (\"ierrno\", 1, 0, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_0 (\"ierrno\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n \t     NULL, NULL, gfc_resolve_ierrno);\n \n   make_generic (\"ierrno\", GFC_ISYM_IERRNO, GFC_STD_GNU);\n \n   /* The resolution function for INDEX is called gfc_resolve_index_func\n      because the name gfc_resolve_index is already used in resolve.c.  */\n-  add_sym_3 (\"index\", 1, 1, BT_INTEGER, di, GFC_STD_F77,\n+  add_sym_3 (\"index\", ELEMENTAL, ACTUAL_YES, BT_INTEGER, di, GFC_STD_F77,\n \t     gfc_check_index, gfc_simplify_index, gfc_resolve_index_func,\n \t     stg, BT_CHARACTER, dc, REQUIRED, ssg, BT_CHARACTER, dc, REQUIRED,\n \t     bck, BT_LOGICAL, dl, OPTIONAL);\n \n   make_generic (\"index\", GFC_ISYM_INDEX, GFC_STD_F77);\n \n-  add_sym_2 (\"int\", 1, 0, BT_INTEGER, di, GFC_STD_F77,\n+  add_sym_2 (\"int\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F77,\n \t     gfc_check_int, gfc_simplify_int, gfc_resolve_int,\n \t     a, BT_REAL, dr, REQUIRED, kind, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_1 (\"ifix\", 1, 0, BT_INTEGER, di, GFC_STD_F77,\n+  add_sym_1 (\"ifix\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F77,\n \t     NULL, gfc_simplify_ifix, NULL,\n \t     a, BT_REAL, dr, REQUIRED);\n \n-  add_sym_1 (\"idint\", 1, 0, BT_INTEGER, di, GFC_STD_F77,\n+  add_sym_1 (\"idint\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F77,\n \t     NULL, gfc_simplify_idint, NULL,\n \t     a, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"int\", GFC_ISYM_INT, GFC_STD_F77);\n \n-  add_sym_1 (\"int2\", 1, 0, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_1 (\"int2\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_intconv, gfc_simplify_int2, gfc_resolve_int2,\n \t     a, BT_REAL, dr, REQUIRED);\n \n   make_alias (\"short\", GFC_STD_GNU);\n \n   make_generic (\"int2\", GFC_ISYM_INT2, GFC_STD_GNU);\n \n-  add_sym_1 (\"int8\", 1, 0, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_1 (\"int8\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_intconv, gfc_simplify_int8, gfc_resolve_int8,\n \t     a, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"int8\", GFC_ISYM_INT8, GFC_STD_GNU);\n \n-  add_sym_1 (\"long\", 1, 0, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_1 (\"long\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_intconv, gfc_simplify_long, gfc_resolve_long,\n \t     a, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"long\", GFC_ISYM_LONG, GFC_STD_GNU);\n \n-  add_sym_2 (\"ior\", 1, 0, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_2 (\"ior\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_ior, gfc_simplify_ior, gfc_resolve_ior,\n \t     i, BT_INTEGER, di, REQUIRED, j, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"ior\", GFC_ISYM_IOR, GFC_STD_F95);\n \n-  add_sym_2 (\"or\", 1, 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2 (\"or\", ELEMENTAL, ACTUAL_NO, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t     gfc_check_and, gfc_simplify_or, gfc_resolve_or,\n \t     i, BT_UNKNOWN, 0, REQUIRED, j, BT_UNKNOWN, 0, REQUIRED);\n \n   make_generic (\"or\", GFC_ISYM_OR, GFC_STD_GNU);\n \n   /* The following function is for G77 compatibility.  */\n-  add_sym_1 (\"irand\", 0, 0, BT_INTEGER, 4, GFC_STD_GNU,\n+  add_sym_1 (\"irand\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, 4, GFC_STD_GNU,\n              gfc_check_irand, NULL, NULL,\n \t     i, BT_INTEGER, 4, OPTIONAL);\n \n   make_generic (\"irand\", GFC_ISYM_IRAND, GFC_STD_GNU);\n \n-  add_sym_1 (\"isatty\", 0, 0, BT_LOGICAL, dl, GFC_STD_GNU,\n+  add_sym_1 (\"isatty\", NOT_ELEMENTAL, ACTUAL_NO, BT_LOGICAL, dl, GFC_STD_GNU,\n \t     gfc_check_isatty, NULL, gfc_resolve_isatty,\n \t     ut, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"isatty\", GFC_ISYM_ISATTY, GFC_STD_GNU);\n \n-  add_sym_2 (\"rshift\", 1, 0, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_2 (\"rshift\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_ishft, NULL, gfc_resolve_rshift,\n \t     i, BT_INTEGER, di, REQUIRED, sh, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"rshift\", GFC_ISYM_RSHIFT, GFC_STD_GNU);\n \n-  add_sym_2 (\"lshift\", 1, 0, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_2 (\"lshift\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_ishft, NULL, gfc_resolve_lshift,\n \t     i, BT_INTEGER, di, REQUIRED, sh, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"lshift\", GFC_ISYM_LSHIFT, GFC_STD_GNU);\n \n-  add_sym_2 (\"ishft\", 1, 0, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_2 (\"ishft\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_ishft, gfc_simplify_ishft, gfc_resolve_ishft,\n \t     i, BT_INTEGER, di, REQUIRED, sh, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"ishft\", GFC_ISYM_ISHFT, GFC_STD_F95);\n \n-  add_sym_3 (\"ishftc\", 1, 0, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_3 (\"ishftc\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_ishftc, gfc_simplify_ishftc, gfc_resolve_ishftc,\n \t     i, BT_INTEGER, di, REQUIRED, sh, BT_INTEGER, di, REQUIRED,\n \t     sz, BT_INTEGER, di, OPTIONAL);\n \n   make_generic (\"ishftc\", GFC_ISYM_ISHFTC, GFC_STD_F95);\n \n-  add_sym_2 (\"kill\", 1, 0, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_2 (\"kill\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_kill, NULL, gfc_resolve_kill,\n \t     a, BT_INTEGER, di, REQUIRED, b, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"kill\", GFC_ISYM_KILL, GFC_STD_GNU);\n \n-  add_sym_1 (\"kind\", 0, 0, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_1 (\"kind\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_kind, gfc_simplify_kind, NULL,\n \t     x, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"kind\", GFC_ISYM_NONE, GFC_STD_F95);\n \n-  add_sym_2 (\"lbound\", 0, 0, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_2 (\"lbound\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_lbound, gfc_simplify_lbound, gfc_resolve_lbound,\n \t     ar, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, di, OPTIONAL);\n \n   make_generic (\"lbound\", GFC_ISYM_LBOUND, GFC_STD_F95);\n \n-  add_sym_1 (\"len\", 0, 1, BT_INTEGER, di, GFC_STD_F77,\n+  add_sym_1 (\"len\", NOT_ELEMENTAL, ACTUAL_YES, BT_INTEGER, di, GFC_STD_F77,\n \t     NULL, gfc_simplify_len, gfc_resolve_len,\n \t     stg, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"len\", GFC_ISYM_LEN, GFC_STD_F77);\n \n-  add_sym_1 (\"len_trim\", 1, 0, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_1 (\"len_trim\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n \t     NULL, gfc_simplify_len_trim, gfc_resolve_len_trim,\n \t     stg, BT_CHARACTER, dc, REQUIRED);\n \n   make_alias (\"lnblnk\", GFC_STD_GNU);\n \n   make_generic (\"len_trim\", GFC_ISYM_LEN_TRIM, GFC_STD_F95);\n \n-  add_sym_2 (\"lge\", 1, 0, BT_LOGICAL, dl, GFC_STD_F77,\n+  add_sym_2 (\"lge\", ELEMENTAL, ACTUAL_NO, BT_LOGICAL, dl, GFC_STD_F77,\n \t     NULL, gfc_simplify_lge, NULL,\n \t     sta, BT_CHARACTER, dc, REQUIRED, stb, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"lge\", GFC_ISYM_LGE, GFC_STD_F77);\n \n-  add_sym_2 (\"lgt\", 1, 0, BT_LOGICAL, dl, GFC_STD_F77,\n+  add_sym_2 (\"lgt\", ELEMENTAL, ACTUAL_NO, BT_LOGICAL, dl, GFC_STD_F77,\n \t     NULL, gfc_simplify_lgt, NULL,\n \t     sta, BT_CHARACTER, dc, REQUIRED, stb, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"lgt\", GFC_ISYM_LGT, GFC_STD_F77);\n \n-  add_sym_2 (\"lle\", 1, 0, BT_LOGICAL, dl, GFC_STD_F77,\n+  add_sym_2 (\"lle\", ELEMENTAL, ACTUAL_NO, BT_LOGICAL, dl, GFC_STD_F77,\n \t     NULL, gfc_simplify_lle, NULL,\n \t     sta, BT_CHARACTER, dc, REQUIRED, stb, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"lle\", GFC_ISYM_LLE, GFC_STD_F77);\n \n-  add_sym_2 (\"llt\", 1, 0, BT_LOGICAL, dl, GFC_STD_F77,\n+  add_sym_2 (\"llt\", ELEMENTAL, ACTUAL_NO, BT_LOGICAL, dl, GFC_STD_F77,\n \t     NULL, gfc_simplify_llt, NULL,\n \t     sta, BT_CHARACTER, dc, REQUIRED, stb, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"llt\", GFC_ISYM_LLT, GFC_STD_F77);\n \n-  add_sym_2 (\"link\", 0, 0, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_2 (\"link\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_link, NULL, gfc_resolve_link,\n \t     a, BT_CHARACTER, dc, REQUIRED, b, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"link\", GFC_ISYM_LINK, GFC_STD_GNU);\n   \n-  add_sym_1 (\"log\", 1, 0, BT_REAL, dr, GFC_STD_F77,\n+  add_sym_1 (\"log\", ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_fn_rc, gfc_simplify_log, gfc_resolve_log,\n \t     x, BT_REAL, dr, REQUIRED);\n \n-  add_sym_1 (\"alog\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n+  add_sym_1 (\"alog\", ELEMENTAL, ACTUAL_YES, BT_REAL, dr, GFC_STD_F77,\n \t     NULL, gfc_simplify_log, gfc_resolve_log,\n \t     x, BT_REAL, dr, REQUIRED);\n \n-  add_sym_1 (\"dlog\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n+  add_sym_1 (\"dlog\", ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_log, gfc_resolve_log,\n \t     x, BT_REAL, dd, REQUIRED);\n \n-  add_sym_1 (\"clog\", 1, 1, BT_COMPLEX, dz, GFC_STD_F77,\n+  add_sym_1 (\"clog\", ELEMENTAL, ACTUAL_YES, BT_COMPLEX, dz, GFC_STD_F77,\n \t     NULL, gfc_simplify_log, gfc_resolve_log,\n \t     x, BT_COMPLEX, dz, REQUIRED);\n \n-  add_sym_1 (\"zlog\", 1, 1, BT_COMPLEX, dd,  GFC_STD_GNU,\n+  add_sym_1 (\"zlog\", ELEMENTAL, ACTUAL_YES, BT_COMPLEX, dd,  GFC_STD_GNU,\n \t     NULL, gfc_simplify_log, gfc_resolve_log,\n \t     x, BT_COMPLEX, dd, REQUIRED);\n \n   make_alias (\"cdlog\", GFC_STD_GNU);\n \n   make_generic (\"log\", GFC_ISYM_LOG, GFC_STD_F77);\n \n-  add_sym_1 (\"log10\", 1, 0, BT_REAL, dr, GFC_STD_F77,\n+  add_sym_1 (\"log10\", ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_fn_r, gfc_simplify_log10, gfc_resolve_log10,\n \t     x, BT_REAL, dr, REQUIRED);\n \n-  add_sym_1 (\"alog10\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n+  add_sym_1 (\"alog10\", ELEMENTAL, ACTUAL_YES, BT_REAL, dr, GFC_STD_F77,\n \t     NULL, gfc_simplify_log10, gfc_resolve_log10,\n \t     x, BT_REAL, dr, REQUIRED);\n \n-  add_sym_1 (\"dlog10\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n+  add_sym_1 (\"dlog10\", ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_log10, gfc_resolve_log10,\n \t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"log10\", GFC_ISYM_LOG10, GFC_STD_F77);\n \n-  add_sym_2 (\"logical\", 1, 0, BT_LOGICAL, dl, GFC_STD_F95,\n+  add_sym_2 (\"logical\", ELEMENTAL, ACTUAL_NO, BT_LOGICAL, dl, GFC_STD_F95,\n \t     gfc_check_logical, gfc_simplify_logical, gfc_resolve_logical,\n \t     l, BT_LOGICAL, dl, REQUIRED, kind, BT_INTEGER, di, OPTIONAL);\n \n   make_generic (\"logical\", GFC_ISYM_LOGICAL, GFC_STD_F95);\n \n-  add_sym_2 (\"lstat\", 0, 0, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_2 (\"lstat\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_stat, NULL, gfc_resolve_lstat,\n \t     a, BT_CHARACTER, dc, REQUIRED, b, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"lstat\", GFC_ISYM_LSTAT, GFC_STD_GNU);\n \n-  add_sym_1 (\"malloc\", 0, 0, BT_INTEGER, ii, GFC_STD_GNU, gfc_check_malloc,\n-\t     NULL, gfc_resolve_malloc, a, BT_INTEGER, di, REQUIRED);\n+  add_sym_1 (\"malloc\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, ii, GFC_STD_GNU,\n+\t     gfc_check_malloc, NULL, gfc_resolve_malloc, a, BT_INTEGER, di,\n+\t     REQUIRED);\n \n   make_generic (\"malloc\", GFC_ISYM_MALLOC, GFC_STD_GNU);\n \n-  add_sym_2 (\"matmul\", 0, 0, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_2 (\"matmul\", NOT_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_matmul, NULL, gfc_resolve_matmul,\n \t     ma, BT_REAL, dr, REQUIRED, mb, BT_REAL, dr, REQUIRED);\n \n@@ -1772,63 +1779,63 @@ add_functions (void)\n   /* Note: amax0 is equivalent to real(max), max1 is equivalent to\n      int(max).  The max function must take at least two arguments.  */\n \n-  add_sym_1m (\"max\", 1, 0, BT_UNKNOWN, 0, GFC_STD_F77,\n+  add_sym_1m (\"max\", ELEMENTAL, ACTUAL_NO, BT_UNKNOWN, 0, GFC_STD_F77,\n \t     gfc_check_min_max, gfc_simplify_max, gfc_resolve_max,\n \t     a1, BT_UNKNOWN, dr, REQUIRED, a2, BT_UNKNOWN, dr, REQUIRED);\n \n-  add_sym_1m (\"max0\", 1, 0, BT_INTEGER, di, GFC_STD_F77,\n+  add_sym_1m (\"max0\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F77,\n \t     gfc_check_min_max_integer, gfc_simplify_max, NULL,\n \t     a1, BT_INTEGER, di, REQUIRED, a2, BT_INTEGER, di, REQUIRED);\n \n-  add_sym_1m (\"amax0\", 1, 0, BT_REAL, dr, GFC_STD_F77,\n+  add_sym_1m (\"amax0\", ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_min_max_integer, gfc_simplify_max, NULL,\n \t     a1, BT_INTEGER, di, REQUIRED, a2, BT_INTEGER, di, REQUIRED);\n \n-  add_sym_1m (\"amax1\", 1, 0, BT_REAL, dr, GFC_STD_F77,\n+  add_sym_1m (\"amax1\", ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_min_max_real, gfc_simplify_max, NULL,\n \t     a1, BT_REAL, dr, REQUIRED, a2, BT_REAL, dr, REQUIRED);\n \n-  add_sym_1m (\"max1\", 1, 0, BT_INTEGER, di, GFC_STD_F77,\n+  add_sym_1m (\"max1\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F77,\n \t     gfc_check_min_max_real, gfc_simplify_max, NULL,\n \t     a1, BT_REAL, dr, REQUIRED, a2, BT_REAL, dr, REQUIRED);\n \n-  add_sym_1m (\"dmax1\", 1, 0, BT_REAL, dd, GFC_STD_F77,\n+  add_sym_1m (\"dmax1\", ELEMENTAL, ACTUAL_NO, BT_REAL, dd, GFC_STD_F77,\n \t     gfc_check_min_max_double, gfc_simplify_max, NULL,\n \t     a1, BT_REAL, dd, REQUIRED, a2, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"max\", GFC_ISYM_MAX, GFC_STD_F77);\n \n-  add_sym_1 (\"maxexponent\", 0, 0, BT_INTEGER, di, GFC_STD_F95,\n-\t     gfc_check_x, gfc_simplify_maxexponent, NULL,\n+  add_sym_1 (\"maxexponent\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di,\n+\t     GFC_STD_F95, gfc_check_x, gfc_simplify_maxexponent, NULL,\n \t     x, BT_UNKNOWN, dr, REQUIRED);\n \n   make_generic (\"maxexponent\", GFC_ISYM_NONE, GFC_STD_F95);\n \n-  add_sym_3ml (\"maxloc\", 0, 0, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_3ml (\"maxloc\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n \t       gfc_check_minloc_maxloc, NULL, gfc_resolve_maxloc,\n \t       ar, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL,\n \t       msk, BT_LOGICAL, dl, OPTIONAL);\n \n   make_generic (\"maxloc\", GFC_ISYM_MAXLOC, GFC_STD_F95);\n \n-  add_sym_3red (\"maxval\", 0, 0, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_3red (\"maxval\", NOT_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F95,\n                 gfc_check_minval_maxval, NULL, gfc_resolve_maxval,\n \t\tar, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL,\n \t\tmsk, BT_LOGICAL, dl, OPTIONAL);\n \n   make_generic (\"maxval\", GFC_ISYM_MAXVAL, GFC_STD_F95);\n \n-  add_sym_0 (\"mclock\", 1, 0, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_0 (\"mclock\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n \t     NULL, NULL, gfc_resolve_mclock);\n \n   make_generic (\"mclock\", GFC_ISYM_MCLOCK, GFC_STD_GNU);\n \n-  add_sym_0 (\"mclock8\", 1, 0, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_0 (\"mclock8\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n \t     NULL, NULL, gfc_resolve_mclock8);\n \n   make_generic (\"mclock8\", GFC_ISYM_MCLOCK8, GFC_STD_GNU);\n \n-  add_sym_3 (\"merge\", 1, 0, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_3 (\"merge\", ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_merge, NULL, gfc_resolve_merge,\n \t     ts, BT_REAL, dr, REQUIRED, fs, BT_REAL, dr, REQUIRED,\n \t     msk, BT_LOGICAL, dl, REQUIRED);\n@@ -1838,138 +1845,138 @@ add_functions (void)\n   /* Note: amin0 is equivalent to real(min), min1 is equivalent to\n      int(min).  */\n \n-  add_sym_1m (\"min\", 1, 0, BT_UNKNOWN, 0, GFC_STD_F77,\n+  add_sym_1m (\"min\", ELEMENTAL, ACTUAL_NO, BT_UNKNOWN, 0, GFC_STD_F77,\n \t      gfc_check_min_max, gfc_simplify_min, gfc_resolve_min,\n \t     a1, BT_REAL, dr, REQUIRED, a2, BT_REAL, dr, REQUIRED);\n \n-  add_sym_1m (\"min0\", 1, 0, BT_INTEGER, di, GFC_STD_F77,\n+  add_sym_1m (\"min0\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F77,\n \t      gfc_check_min_max_integer, gfc_simplify_min, NULL,\n \t     a1, BT_INTEGER, di, REQUIRED, a2, BT_INTEGER, di, REQUIRED);\n \n-  add_sym_1m (\"amin0\", 1, 0, BT_REAL, dr, GFC_STD_F77,\n+  add_sym_1m (\"amin0\", ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F77,\n \t      gfc_check_min_max_integer, gfc_simplify_min, NULL,\n \t     a1, BT_INTEGER, di, REQUIRED, a2, BT_INTEGER, di, REQUIRED);\n \n-  add_sym_1m (\"amin1\", 1, 0, BT_REAL, dr, GFC_STD_F77,\n+  add_sym_1m (\"amin1\", ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F77,\n \t      gfc_check_min_max_real, gfc_simplify_min, NULL,\n \t     a1, BT_REAL, dr, REQUIRED, a2, BT_REAL, dr, REQUIRED);\n \n-  add_sym_1m (\"min1\", 1, 0, BT_INTEGER, di, GFC_STD_F77,\n+  add_sym_1m (\"min1\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F77,\n \t      gfc_check_min_max_real, gfc_simplify_min, NULL,\n \t     a1, BT_REAL, dr, REQUIRED, a2, BT_REAL, dr, REQUIRED);\n \n-  add_sym_1m (\"dmin1\", 1, 0, BT_REAL, dd, GFC_STD_F77,\n+  add_sym_1m (\"dmin1\", ELEMENTAL, ACTUAL_NO, BT_REAL, dd, GFC_STD_F77,\n \t      gfc_check_min_max_double, gfc_simplify_min, NULL,\n \t     a1, BT_REAL, dd, REQUIRED, a2, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"min\", GFC_ISYM_MIN, GFC_STD_F77);\n \n-  add_sym_1 (\"minexponent\", 0, 0, BT_INTEGER, di, GFC_STD_F95,\n-\t     gfc_check_x, gfc_simplify_minexponent, NULL,\n+  add_sym_1 (\"minexponent\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di,\n+\t     GFC_STD_F95, gfc_check_x, gfc_simplify_minexponent, NULL,\n \t     x, BT_UNKNOWN, dr, REQUIRED);\n \n   make_generic (\"minexponent\", GFC_ISYM_NONE, GFC_STD_F95);\n \n-  add_sym_3ml (\"minloc\", 0, 0, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_3ml (\"minloc\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n \t       gfc_check_minloc_maxloc, NULL, gfc_resolve_minloc,\n \t       ar, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL,\n \t       msk, BT_LOGICAL, dl, OPTIONAL);\n \n   make_generic (\"minloc\", GFC_ISYM_MINLOC, GFC_STD_F95);\n \n-  add_sym_3red (\"minval\", 0, 0, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_3red (\"minval\", NOT_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F95,\n                 gfc_check_minval_maxval, NULL, gfc_resolve_minval,\n \t\tar, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL,\n \t\tmsk, BT_LOGICAL, dl, OPTIONAL);\n \n   make_generic (\"minval\", GFC_ISYM_MINVAL, GFC_STD_F95);\n \n-  add_sym_2 (\"mod\", 1, 1, BT_INTEGER, di, GFC_STD_F77,\n+  add_sym_2 (\"mod\", ELEMENTAL, ACTUAL_YES, BT_INTEGER, di, GFC_STD_F77,\n \t     gfc_check_a_p, gfc_simplify_mod, gfc_resolve_mod,\n \t     a, BT_INTEGER, di, REQUIRED, p, BT_INTEGER, di, REQUIRED);\n \n-  add_sym_2 (\"amod\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n+  add_sym_2 (\"amod\", ELEMENTAL, ACTUAL_YES, BT_REAL, dr, GFC_STD_F77,\n \t     NULL, gfc_simplify_mod, gfc_resolve_mod,\n \t     a, BT_REAL, dr, REQUIRED, p, BT_REAL, dr, REQUIRED);\n \n-  add_sym_2 (\"dmod\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n+  add_sym_2 (\"dmod\", ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_mod, gfc_resolve_mod,\n \t     a, BT_REAL, dd, REQUIRED, p, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"mod\", GFC_ISYM_MOD, GFC_STD_F77);\n \n-  add_sym_2 (\"modulo\", 1, 0, BT_REAL, di, GFC_STD_F95,\n+  add_sym_2 (\"modulo\", ELEMENTAL, ACTUAL_NO, BT_REAL, di, GFC_STD_F95,\n \t     gfc_check_a_p, gfc_simplify_modulo, gfc_resolve_modulo,\n \t     a, BT_REAL, di, REQUIRED, p, BT_REAL, di, REQUIRED);\n \n   make_generic (\"modulo\", GFC_ISYM_MODULO, GFC_STD_F95);\n \n-  add_sym_2 (\"nearest\", 1, 0, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_2 (\"nearest\", ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_nearest, gfc_simplify_nearest, gfc_resolve_nearest,\n \t     x, BT_REAL, dr, REQUIRED, s, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"nearest\", GFC_ISYM_NEAREST, GFC_STD_F95);\n \n-  add_sym_1 (\"new_line\", 0, 0, BT_CHARACTER, dc, GFC_STD_F2003,\n-             gfc_check_new_line, gfc_simplify_new_line, NULL,\n+  add_sym_1 (\"new_line\", NOT_ELEMENTAL, ACTUAL_NO, BT_CHARACTER, dc,\n+\t     GFC_STD_F2003, gfc_check_new_line, gfc_simplify_new_line, NULL,\n              i, BT_CHARACTER, dc, REQUIRED);\n \n-  add_sym_2 (\"nint\", 1, 1, BT_INTEGER, di, GFC_STD_F77,\n+  add_sym_2 (\"nint\", ELEMENTAL, ACTUAL_YES, BT_INTEGER, di, GFC_STD_F77,\n \t     gfc_check_a_ikind, gfc_simplify_nint, gfc_resolve_nint,\n \t     a, BT_REAL, dr, REQUIRED, kind, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_1 (\"idnint\", 1, 1, BT_INTEGER, di, GFC_STD_F77,\n+  add_sym_1 (\"idnint\", ELEMENTAL, ACTUAL_YES, BT_INTEGER, di, GFC_STD_F77,\n \t     gfc_check_idnint, gfc_simplify_idnint, gfc_resolve_idnint,\n \t     a, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"nint\", GFC_ISYM_NINT, GFC_STD_F77);\n \n-  add_sym_1 (\"not\", 1, 0, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_1 (\"not\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_i, gfc_simplify_not, gfc_resolve_not,\n \t     i, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"not\", GFC_ISYM_NOT, GFC_STD_F95);\n \n-  add_sym_1 (\"null\", 0, 0, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_1 (\"null\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_null, gfc_simplify_null, NULL,\n \t     mo, BT_INTEGER, di, OPTIONAL);\n \n   make_generic (\"null\", GFC_ISYM_NONE, GFC_STD_F95);\n \n-  add_sym_3 (\"pack\", 0, 0, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_3 (\"pack\", NOT_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_pack, NULL, gfc_resolve_pack,\n \t     ar, BT_REAL, dr, REQUIRED, msk, BT_LOGICAL, dl, REQUIRED,\n \t     v, BT_REAL, dr, OPTIONAL);\n \n   make_generic (\"pack\", GFC_ISYM_PACK, GFC_STD_F95);\n \n-  add_sym_1 (\"precision\", 0, 0, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_1 (\"precision\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_precision, gfc_simplify_precision, NULL,\n \t     x, BT_UNKNOWN, 0, REQUIRED);\n \n   make_generic (\"precision\", GFC_ISYM_NONE, GFC_STD_F95);\n \n-  add_sym_1 (\"present\", 0, 0, BT_LOGICAL, dl, GFC_STD_F95,\n+  add_sym_1 (\"present\", NOT_ELEMENTAL, ACTUAL_NO, BT_LOGICAL, dl, GFC_STD_F95,\n \t     gfc_check_present, NULL, NULL,\n \t     a, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"present\", GFC_ISYM_PRESENT, GFC_STD_F95);\n \n-  add_sym_3red (\"product\", 0, 0, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_3red (\"product\", NOT_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F95,\n                 gfc_check_product_sum, NULL, gfc_resolve_product,\n \t\tar, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL,\n \t\tmsk, BT_LOGICAL, dl, OPTIONAL);\n \n   make_generic (\"product\", GFC_ISYM_PRODUCT, GFC_STD_F95);\n \n-  add_sym_1 (\"radix\", 0, 0, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_1 (\"radix\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_radix, gfc_simplify_radix, NULL,\n \t     x, BT_UNKNOWN, 0, REQUIRED);\n \n   make_generic (\"radix\", GFC_ISYM_NONE, GFC_STD_F95);\n \n   /* The following function is for G77 compatibility.  */\n-  add_sym_1 (\"rand\", 0, 0, BT_REAL, 4, GFC_STD_GNU,\n+  add_sym_1 (\"rand\", NOT_ELEMENTAL, ACTUAL_NO, BT_REAL, 4, GFC_STD_GNU,\n              gfc_check_rand, NULL, NULL,\n              i, BT_INTEGER, 4, OPTIONAL);\n \n@@ -1979,318 +1986,318 @@ add_functions (void)\n \n   make_generic (\"rand\", GFC_ISYM_RAND, GFC_STD_GNU);\n \n-  add_sym_1 (\"range\", 0, 0, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_1 (\"range\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_range, gfc_simplify_range, NULL,\n \t     x, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"range\", GFC_ISYM_NONE, GFC_STD_F95);\n \n-  add_sym_2 (\"real\", 1, 0, BT_REAL, dr, GFC_STD_F77,\n+  add_sym_2 (\"real\", ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_real, gfc_simplify_real, gfc_resolve_real,\n \t     a, BT_UNKNOWN, dr, REQUIRED, kind, BT_INTEGER, di, OPTIONAL);\n \n   /* This provides compatibility with g77.  */\n-  add_sym_1 (\"realpart\", 1, 0, BT_REAL, dr, GFC_STD_GNU,\n+  add_sym_1 (\"realpart\", ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_GNU,\n \t     gfc_check_fn_c, gfc_simplify_realpart, gfc_resolve_realpart,\n \t     a, BT_UNKNOWN, dr, REQUIRED);\n \n-  add_sym_1 (\"float\", 1, 0, BT_REAL, dr, GFC_STD_F77,\n+  add_sym_1 (\"float\", ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_i, gfc_simplify_float, NULL,\n \t     a, BT_INTEGER, di, REQUIRED);\n \n-  add_sym_1 (\"sngl\", 1, 0, BT_REAL, dr, GFC_STD_F77,\n+  add_sym_1 (\"sngl\", ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F77,\n \t     NULL, gfc_simplify_sngl, NULL,\n \t     a, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"real\", GFC_ISYM_REAL, GFC_STD_F77);\n \n-  add_sym_2 (\"rename\", 0, 0, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_2 (\"rename\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_rename, NULL, gfc_resolve_rename,\n \t     a, BT_CHARACTER, dc, REQUIRED, b, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"rename\", GFC_ISYM_RENAME, GFC_STD_GNU);\n   \n-  add_sym_2 (\"repeat\", 0, 0, BT_CHARACTER, dc, GFC_STD_F95,\n+  add_sym_2 (\"repeat\", NOT_ELEMENTAL, ACTUAL_NO, BT_CHARACTER, dc, GFC_STD_F95,\n \t     gfc_check_repeat, gfc_simplify_repeat, gfc_resolve_repeat,\n \t     stg, BT_CHARACTER, dc, REQUIRED, n, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"repeat\", GFC_ISYM_REPEAT, GFC_STD_F95);\n \n-  add_sym_4 (\"reshape\", 0, 0, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_4 (\"reshape\", NOT_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_reshape, gfc_simplify_reshape, gfc_resolve_reshape,\n \t     src, BT_REAL, dr, REQUIRED, shp, BT_INTEGER, ii, REQUIRED,\n \t     pad, BT_REAL, dr, OPTIONAL, ord, BT_INTEGER, ii, OPTIONAL);\n \n   make_generic (\"reshape\", GFC_ISYM_RESHAPE, GFC_STD_F95);\n \n-  add_sym_1 (\"rrspacing\", 1, 0, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_1 (\"rrspacing\", ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_x, gfc_simplify_rrspacing, gfc_resolve_rrspacing,\n \t     x, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"rrspacing\", GFC_ISYM_RRSPACING, GFC_STD_F95);\n \n-  add_sym_2 (\"scale\", 1, 0, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_2 (\"scale\", ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_scale, gfc_simplify_scale, gfc_resolve_scale,\n \t     x, BT_REAL, dr, REQUIRED, i, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"scale\", GFC_ISYM_SCALE, GFC_STD_F95);\n \n-  add_sym_3 (\"scan\", 1, 0, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_3 (\"scan\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_scan, gfc_simplify_scan, gfc_resolve_scan,\n \t     stg, BT_CHARACTER, dc, REQUIRED, set, BT_CHARACTER, dc, REQUIRED,\n \t     bck, BT_LOGICAL, dl, OPTIONAL);\n \n   make_generic (\"scan\", GFC_ISYM_SCAN, GFC_STD_F95);\n \n   /* Added for G77 compatibility garbage.  */\n-  add_sym_0 (\"second\", 0, 0, BT_REAL, 4, GFC_STD_GNU,\n+  add_sym_0 (\"second\", NOT_ELEMENTAL, ACTUAL_NO, BT_REAL, 4, GFC_STD_GNU,\n \t     NULL, NULL, NULL);\n \n   make_generic (\"second\", GFC_ISYM_SECOND, GFC_STD_GNU);\n \n   /* Added for G77 compatibility.  */\n-  add_sym_1 (\"secnds\", 0, 0, BT_REAL, dr, GFC_STD_GNU,\n+  add_sym_1 (\"secnds\", NOT_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_GNU,\n \t     gfc_check_secnds, NULL, gfc_resolve_secnds,\n \t     x, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"secnds\", GFC_ISYM_SECNDS, GFC_STD_GNU);\n \n-  add_sym_1 (\"selected_int_kind\", 0, 0, BT_INTEGER, di,  GFC_STD_F95,\n-\t     gfc_check_selected_int_kind, gfc_simplify_selected_int_kind, NULL,\n-\t     r, BT_INTEGER, di, REQUIRED);\n+  add_sym_1 (\"selected_int_kind\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di,\n+\t     GFC_STD_F95, gfc_check_selected_int_kind,\n+\t     gfc_simplify_selected_int_kind, NULL, r, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"selected_int_kind\", GFC_ISYM_SI_KIND, GFC_STD_F95);\n \n-  add_sym_2 (\"selected_real_kind\", 0, 0, BT_INTEGER, di,  GFC_STD_F95,\n-\t     gfc_check_selected_real_kind, gfc_simplify_selected_real_kind,\n-\t     NULL,\n+  add_sym_2 (\"selected_real_kind\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di,\n+\t     GFC_STD_F95, gfc_check_selected_real_kind,\n+\t     gfc_simplify_selected_real_kind, NULL,\n \t     p, BT_INTEGER, di, OPTIONAL, r, BT_INTEGER, di, OPTIONAL);\n \n   make_generic (\"selected_real_kind\", GFC_ISYM_SR_KIND, GFC_STD_F95);\n \n-  add_sym_2 (\"set_exponent\", 1, 0, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_2 (\"set_exponent\", ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_set_exponent, gfc_simplify_set_exponent,\n \t     gfc_resolve_set_exponent,\n \t     x, BT_REAL, dr, REQUIRED, i, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"set_exponent\", GFC_ISYM_SET_EXPONENT, GFC_STD_F95);\n \n-  add_sym_1 (\"shape\", 0, 0, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_1 (\"shape\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_shape, gfc_simplify_shape, gfc_resolve_shape,\n \t     src, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"shape\", GFC_ISYM_SHAPE, GFC_STD_F95);\n \n-  add_sym_2 (\"sign\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n+  add_sym_2 (\"sign\", ELEMENTAL, ACTUAL_YES, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_sign, gfc_simplify_sign, gfc_resolve_sign,\n \t     a, BT_REAL, dr, REQUIRED, b, BT_REAL, dr, REQUIRED);\n \n-  add_sym_2 (\"isign\", 1, 1, BT_INTEGER, di, GFC_STD_F77,\n+  add_sym_2 (\"isign\", ELEMENTAL, ACTUAL_YES, BT_INTEGER, di, GFC_STD_F77,\n \t     NULL, gfc_simplify_sign, gfc_resolve_sign,\n \t     a, BT_INTEGER, di, REQUIRED, b, BT_INTEGER, di, REQUIRED);\n \n-  add_sym_2 (\"dsign\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n+  add_sym_2 (\"dsign\", ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_sign, gfc_resolve_sign,\n \t     a, BT_REAL, dd, REQUIRED, b, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"sign\", GFC_ISYM_SIGN, GFC_STD_F77);\n \n-  add_sym_2 (\"signal\", 1, 0, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_2 (\"signal\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_signal, NULL, gfc_resolve_signal,\n \t     num, BT_INTEGER, di, REQUIRED, han, BT_UNKNOWN, 0, REQUIRED);\n \n   make_generic (\"signal\", GFC_ISYM_SIGNAL, GFC_STD_GNU);\n \n-  add_sym_1 (\"sin\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n+  add_sym_1 (\"sin\", ELEMENTAL, ACTUAL_YES, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_fn_rc, gfc_simplify_sin, gfc_resolve_sin,\n \t     x, BT_REAL, dr, REQUIRED);\n \n-  add_sym_1 (\"dsin\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n+  add_sym_1 (\"dsin\", ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_sin, gfc_resolve_sin,\n \t     x, BT_REAL, dd, REQUIRED);\n \n-  add_sym_1 (\"csin\", 1, 1, BT_COMPLEX, dz, GFC_STD_F77,\n+  add_sym_1 (\"csin\", ELEMENTAL, ACTUAL_YES, BT_COMPLEX, dz, GFC_STD_F77,\n \t     NULL, gfc_simplify_sin, gfc_resolve_sin,\n \t     x, BT_COMPLEX, dz, REQUIRED);\n \n-  add_sym_1 (\"zsin\", 1, 1, BT_COMPLEX, dd, GFC_STD_GNU,\n+  add_sym_1 (\"zsin\", ELEMENTAL, ACTUAL_YES, BT_COMPLEX, dd, GFC_STD_GNU,\n \t     NULL, gfc_simplify_sin, gfc_resolve_sin,\n \t     x, BT_COMPLEX, dd, REQUIRED);\n \n   make_alias (\"cdsin\", GFC_STD_GNU);\n \n   make_generic (\"sin\", GFC_ISYM_SIN, GFC_STD_F77);\n \n-  add_sym_1 (\"sinh\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n+  add_sym_1 (\"sinh\", ELEMENTAL, ACTUAL_YES, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_fn_r, gfc_simplify_sinh, gfc_resolve_sinh,\n \t     x, BT_REAL, dr, REQUIRED);\n \n-  add_sym_1 (\"dsinh\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n+  add_sym_1 (\"dsinh\", ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_sinh, gfc_resolve_sinh,\n \t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"sinh\", GFC_ISYM_SINH, GFC_STD_F77);\n \n-  add_sym_2 (\"size\", 0, 0, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_2 (\"size\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_size, gfc_simplify_size, NULL,\n \t     ar, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL);\n \n   make_generic (\"size\", GFC_ISYM_SIZE, GFC_STD_F95);\n \n-  add_sym_1 (\"spacing\", 1, 0, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_1 (\"spacing\", ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_x, gfc_simplify_spacing, gfc_resolve_spacing,\n \t     x, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"spacing\", GFC_ISYM_SPACING, GFC_STD_F95);\n \n-  add_sym_3 (\"spread\", 0, 0, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_3 (\"spread\", NOT_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_spread, NULL, gfc_resolve_spread,\n \t     src, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, ii, REQUIRED,\n \t     n, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"spread\", GFC_ISYM_SPREAD, GFC_STD_F95);\n \n-  add_sym_1 (\"sqrt\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n+  add_sym_1 (\"sqrt\", ELEMENTAL, ACTUAL_YES, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_fn_rc, gfc_simplify_sqrt, gfc_resolve_sqrt,\n \t     x, BT_REAL, dr, REQUIRED);\n \n-  add_sym_1 (\"dsqrt\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n+  add_sym_1 (\"dsqrt\", ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_sqrt, gfc_resolve_sqrt,\n \t     x, BT_REAL, dd, REQUIRED);\n \n-  add_sym_1 (\"csqrt\", 1, 1, BT_COMPLEX, dz, GFC_STD_F77,\n+  add_sym_1 (\"csqrt\", ELEMENTAL, ACTUAL_YES, BT_COMPLEX, dz, GFC_STD_F77,\n \t     NULL, gfc_simplify_sqrt, gfc_resolve_sqrt,\n \t     x, BT_COMPLEX, dz, REQUIRED);\n \n-  add_sym_1 (\"zsqrt\", 1, 1, BT_COMPLEX, dd, GFC_STD_GNU,\n+  add_sym_1 (\"zsqrt\", ELEMENTAL, ACTUAL_YES, BT_COMPLEX, dd, GFC_STD_GNU,\n \t     NULL, gfc_simplify_sqrt, gfc_resolve_sqrt,\n \t     x, BT_COMPLEX, dd, REQUIRED);\n \n   make_alias (\"cdsqrt\", GFC_STD_GNU);\n \n   make_generic (\"sqrt\", GFC_ISYM_SQRT, GFC_STD_F77);\n \n-  add_sym_2 (\"stat\", 0, 0, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_2 (\"stat\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_stat, NULL, gfc_resolve_stat,\n \t     a, BT_CHARACTER, dc, REQUIRED, b, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"stat\", GFC_ISYM_STAT, GFC_STD_GNU);\n \n-  add_sym_3red (\"sum\", 0, 0, BT_UNKNOWN, 0, GFC_STD_F95,\n+  add_sym_3red (\"sum\", NOT_ELEMENTAL, ACTUAL_NO, BT_UNKNOWN, 0, GFC_STD_F95,\n                 gfc_check_product_sum, NULL, gfc_resolve_sum,\n \t\tar, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL,\n \t\tmsk, BT_LOGICAL, dl, OPTIONAL);\n \n   make_generic (\"sum\", GFC_ISYM_SUM, GFC_STD_F95);\n \n-  add_sym_2 (\"symlnk\", 0, 0, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_2 (\"symlnk\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_symlnk, NULL, gfc_resolve_symlnk,\n \t     a, BT_CHARACTER, dc, REQUIRED, b, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"symlnk\", GFC_ISYM_SYMLNK, GFC_STD_GNU);\n \n-  add_sym_1 (\"system\", 1, 0, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_1 (\"system\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n \t     NULL, NULL, NULL,\n \t     c, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"system\", GFC_ISYM_SYSTEM, GFC_STD_GNU);\n \n-  add_sym_1 (\"tan\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n+  add_sym_1 (\"tan\", ELEMENTAL, ACTUAL_YES, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_fn_r, gfc_simplify_tan, gfc_resolve_tan,\n \t     x, BT_REAL, dr, REQUIRED);\n \n-  add_sym_1 (\"dtan\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n+  add_sym_1 (\"dtan\", ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_tan, gfc_resolve_tan,\n \t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"tan\", GFC_ISYM_TAN, GFC_STD_F77);\n \n-  add_sym_1 (\"tanh\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n+  add_sym_1 (\"tanh\", ELEMENTAL, ACTUAL_YES, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_fn_r, gfc_simplify_tanh, gfc_resolve_tanh,\n \t     x, BT_REAL, dr, REQUIRED);\n \n-  add_sym_1 (\"dtanh\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n+  add_sym_1 (\"dtanh\", ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_tanh, gfc_resolve_tanh,\n \t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"tanh\", GFC_ISYM_TANH, GFC_STD_F77);\n \n-  add_sym_0 (\"time\", 1, 0, BT_INTEGER, di, GFC_STD_GNU, \n+  add_sym_0 (\"time\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU, \n \t     NULL, NULL, gfc_resolve_time);\n \n   make_generic (\"time\", GFC_ISYM_TIME, GFC_STD_GNU);\n \n-  add_sym_0 (\"time8\", 1, 0, BT_INTEGER, di, GFC_STD_GNU, \n+  add_sym_0 (\"time8\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU, \n \t     NULL, NULL, gfc_resolve_time8);\n \n   make_generic (\"time8\", GFC_ISYM_TIME8, GFC_STD_GNU);\n \n-  add_sym_1 (\"tiny\", 0, 0, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_1 (\"tiny\", NOT_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_x, gfc_simplify_tiny, NULL,\n \t     x, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"tiny\", GFC_ISYM_NONE, GFC_STD_F95);\n \n-  add_sym_3 (\"transfer\", 0, 0, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_3 (\"transfer\", NOT_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_transfer, gfc_simplify_transfer, gfc_resolve_transfer,\n \t     src, BT_REAL, dr, REQUIRED, mo, BT_REAL, dr, REQUIRED,\n \t     sz, BT_INTEGER, di, OPTIONAL);\n \n   make_generic (\"transfer\", GFC_ISYM_TRANSFER, GFC_STD_F95);\n \n-  add_sym_1 (\"transpose\", 0, 0, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_1 (\"transpose\", NOT_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_transpose, NULL, gfc_resolve_transpose,\n \t     m, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"transpose\", GFC_ISYM_TRANSPOSE, GFC_STD_F95);\n \n-  add_sym_1 (\"trim\", 0, 0, BT_CHARACTER, dc, GFC_STD_F95,\n+  add_sym_1 (\"trim\", NOT_ELEMENTAL, ACTUAL_NO, BT_CHARACTER, dc, GFC_STD_F95,\n \t     gfc_check_trim, gfc_simplify_trim, gfc_resolve_trim,\n \t     stg, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"trim\", GFC_ISYM_TRIM, GFC_STD_F95);\n \n-  add_sym_1 (\"ttynam\", 0, 0, BT_CHARACTER, 0, GFC_STD_GNU,\n+  add_sym_1 (\"ttynam\", NOT_ELEMENTAL, ACTUAL_NO, BT_CHARACTER, 0, GFC_STD_GNU,\n               gfc_check_ttynam, NULL, gfc_resolve_ttynam,\n \t      ut, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"ttynam\", GFC_ISYM_TTYNAM, GFC_STD_GNU);\n \n-  add_sym_2 (\"ubound\", 0, 0, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_2 (\"ubound\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_ubound, gfc_simplify_ubound, gfc_resolve_ubound,\n \t     ar, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL);\n \n   make_generic (\"ubound\", GFC_ISYM_UBOUND, GFC_STD_F95);\n \n   /* g77 compatibility for UMASK.  */\n-  add_sym_1 (\"umask\", 0, 0, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_1 (\"umask\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_umask, NULL, gfc_resolve_umask,\n \t     a, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"umask\", GFC_ISYM_UMASK, GFC_STD_GNU);\n \n   /* g77 compatibility for UNLINK.  */\n-  add_sym_1 (\"unlink\", 0, 0, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_1 (\"unlink\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_unlink, NULL, gfc_resolve_unlink,\n \t     a, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"unlink\", GFC_ISYM_UNLINK, GFC_STD_GNU);\n \n-  add_sym_3 (\"unpack\", 0, 0, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_3 (\"unpack\", NOT_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_unpack, NULL, gfc_resolve_unpack,\n \t     v, BT_REAL, dr, REQUIRED, msk, BT_LOGICAL, dl, REQUIRED,\n \t     f, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"unpack\", GFC_ISYM_UNPACK, GFC_STD_F95);\n \n-  add_sym_3 (\"verify\", 1, 0, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_3 (\"verify\", ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_verify, gfc_simplify_verify, gfc_resolve_verify,\n \t     stg, BT_CHARACTER, dc, REQUIRED, set, BT_CHARACTER, dc, REQUIRED,\n \t     bck, BT_LOGICAL, dl, OPTIONAL);\n \n   make_generic (\"verify\", GFC_ISYM_VERIFY, GFC_STD_F95);\n     \n-  add_sym_1 (\"loc\", 0, 0, BT_INTEGER, ii, GFC_STD_GNU,\n+  add_sym_1 (\"loc\", NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, ii, GFC_STD_GNU,\n \t    gfc_check_loc, NULL, gfc_resolve_loc,\n \t    ar, BT_UNKNOWN, 0, REQUIRED);\n \t\t"}]}