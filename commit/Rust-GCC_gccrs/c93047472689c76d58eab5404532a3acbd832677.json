{"sha": "c93047472689c76d58eab5404532a3acbd832677", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzkzMDQ3NDcyNjg5Yzc2ZDU4ZWFiNTQwNDUzMmEzYWNiZDgzMjY3Nw==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@cygnus.com", "date": "1999-08-25T10:01:59Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "1999-08-25T10:01:59Z"}, "message": "Add support for generating .weak, .type and .size assembler directives.\n\nFrom-SVN: r28853", "tree": {"sha": "b54c6c02b2abc01b462be1301881381131dda94c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b54c6c02b2abc01b462be1301881381131dda94c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c93047472689c76d58eab5404532a3acbd832677", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c93047472689c76d58eab5404532a3acbd832677", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c93047472689c76d58eab5404532a3acbd832677", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c93047472689c76d58eab5404532a3acbd832677/comments", "author": null, "committer": null, "parents": [{"sha": "4e5f1329cb2d90a22977ea0e185d6add144a12ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e5f1329cb2d90a22977ea0e185d6add144a12ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e5f1329cb2d90a22977ea0e185d6add144a12ac"}], "stats": {"total": 188, "additions": 163, "deletions": 25}, "files": [{"sha": "f5ff0bd74f1c261c823476514f379b1e2bb91478", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c93047472689c76d58eab5404532a3acbd832677/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c93047472689c76d58eab5404532a3acbd832677/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c93047472689c76d58eab5404532a3acbd832677", "patch": "@@ -1,3 +1,12 @@\n+Wed Aug 25 10:57:12 1999  Nick Clifton  <nickc@cygnus.com>\n+\n+\t* config/arm/telf.h (ASM_WEAKEN_LABEL): Define.\n+\t(ASM_DECLARE_FUNCTION_NAME): Define.\n+\t(TYPE_ASM_OP, SIZE_ASM_OP, TYPE_OPERAND_FORMAT,\n+\tASM_DECLARE_RESULT, ASM_DECLARE_OBJECT_NAME,\n+\tASM_FINISH_DECLARE_OBJECT, ASM_DECLARE_FUNCTION_SIZE): Define if\n+\tnot already defined.\n+\n Wed Aug 25 01:36:11 1999  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* calls.c (emit_call_1): Use call_pop/call_value_pop for all values"}, {"sha": "14527ceef424e4c3a357ddc37c4ba192d1170e2e", "filename": "gcc/config/arm/telf.h", "status": "modified", "additions": 154, "deletions": 25, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c93047472689c76d58eab5404532a3acbd832677/gcc%2Fconfig%2Farm%2Ftelf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c93047472689c76d58eab5404532a3acbd832677/gcc%2Fconfig%2Farm%2Ftelf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ftelf.h?ref=c93047472689c76d58eab5404532a3acbd832677", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler,\n    for Thumb with ELF obj format.\n-   Copyright (C) 1995, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1995, 1996, 1999 Free Software Foundation, Inc.\n    \n This file is part of GNU CC.\n \n@@ -213,14 +213,14 @@ extern int arm_structure_size_boundary;\n #endif\n \n #define RDATA_SECTION_FUNCTION \\\n-void\t\t\t\t\t\t\t\t\t\\\n-rdata_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_rdata)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", RDATA_SECTION_ASM_OP);\t\t\\\n-      in_section = in_rdata;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+rdata_section ()\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_rdata)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", RDATA_SECTION_ASM_OP);\t\\\n+      in_section = in_rdata;\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n }\n \n #define CTOR_LIST_BEGIN                                 \\\n@@ -240,25 +240,25 @@ asm (DTORS_SECTION_ASM_OP);                             \\\n func_ptr __DTOR_END__[1] = { (func_ptr) 0 };\n \n #define CTORS_SECTION_FUNCTION \\\n-void\t\t\t\t\t\t\t\t\t\\\n-ctors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_ctors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_ctors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+ctors_section ()\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_ctors)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\\\n+      in_section = in_ctors;\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n }\n \n #define DTORS_SECTION_FUNCTION \\\n-void\t\t\t\t\t\t\t\t\t\\\n-dtors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_dtors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_dtors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+dtors_section ()\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_dtors)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\\\n+      in_section = in_dtors;\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n }\n \f\n /* Support the ctors/dtors sections for g++.  */\n@@ -341,3 +341,132 @@ dtors_section ()\t\t\t\t\t\t\t\\\n       DECL_SECTION_NAME (DECL) = build_string (len, string);\t\\\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n+\n+/* This is how we tell the assembler that a symbol is weak.  */\n+#ifndef ASM_WEAKEN_LABEL\n+#define ASM_WEAKEN_LABEL(FILE, NAME) \t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      fputs (\"\\t.weak\\t\", FILE);\t\t\\\n+      assemble_name (FILE, NAME); \t\t\\\n+      fputc ('\\n', FILE);\t\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+#endif\n+\n+#ifndef TYPE_ASM_OP\n+\n+/* These macros generate the special .type and .size directives which\n+   are used to set the corresponding fields of the linker symbol table\n+   entries in an ELF object file under SVR4.  These macros also output\n+   the starting labels for the relevant functions/objects.  */\n+#define TYPE_ASM_OP     \".type\"\n+#define SIZE_ASM_OP     \".size\"\n+\n+/* The following macro defines the format used to output the second\n+   operand of the .type assembler directive.  Different svr4 assemblers\n+   expect various different forms for this operand.  The one given here\n+   is just a default.  You may need to override it in your machine-\n+   specific tm.h file (depending upon the particulars of your assembler).  */\n+#define TYPE_OPERAND_FMT\t\"%s\"\n+\n+/* Write the extra assembler code needed to declare a function's result.\n+   Most svr4 assemblers don't require any special declaration of the\n+   result value, but there are exceptions.  */\n+#ifndef ASM_DECLARE_RESULT\n+#define ASM_DECLARE_RESULT(FILE, RESULT)\n+#endif\n+\n+/* Write the extra assembler code needed to declare a function properly.\n+   Some svr4 assemblers need to also have something extra said about the\n+   function's return value.  We allow for that here.  */\n+#undef  ASM_DECLARE_FUNCTION_NAME\n+#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      fprintf (FILE, \"\\t%s\\t \", TYPE_ASM_OP);\t\t\\\n+      assemble_name (FILE, NAME);\t\t\t\\\n+      putc (',', FILE);\t\t\t\t\t\\\n+      fprintf (FILE, TYPE_OPERAND_FMT, \"function\");\t\\\n+      putc ('\\n', FILE);\t\t\t\t\\\n+      ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));\t\\\n+      if (! is_called_in_ARM_mode (decl))\t\t\\\n+        fprintf (FILE, \"\\t.thumb_func\\n\") ;\t\t\\\n+      else\t\t\t\t\t\t\\\n+        fprintf (FILE, \"\\t.code\\t32\\n\") ;\t\t\\\n+      ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+/* Write the extra assembler code needed to declare an object properly.  */\n+#define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      fprintf (FILE, \"\\t%s\\t \", TYPE_ASM_OP);\t\t\t\\\n+      assemble_name (FILE, NAME);\t\t\t\t\\\n+      putc (',', FILE);\t\t\t\t\t\t\\\n+      fprintf (FILE, TYPE_OPERAND_FMT, \"object\");\t\t\\\n+      putc ('\\n', FILE);\t\t\t\t\t\\\n+      size_directive_output = 0;\t\t\t\t\\\n+      if (!flag_inhibit_size_directive && DECL_SIZE (DECL))\t\\\n+        {\t\t\t\t\t\t\t\\\n+\t  size_directive_output = 1;\t\t\t\t\\\n+\t  fprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\\\n+\t  assemble_name (FILE, NAME);\t\t\t\t\\\n+\t  putc (',', FILE);\t\t\t\t\t\\\n+\t  fprintf (FILE, HOST_WIDE_INT_PRINT_DEC,\t\t\\\n+\t\t   int_size_in_bytes (TREE_TYPE (DECL)));\t\\\n+\t  fputc ('\\n', FILE);\t\t\t\t\t\\\n+        }\t\t\t\t\t\t\t\\\n+      ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+/* Output the size directive for a decl in rest_of_decl_compilation\n+   in the case where we did not do so before the initializer.\n+   Once we find the error_mark_node, we know that the value of\n+   size_directive_output was set\n+   by ASM_DECLARE_OBJECT_NAME when it was run for the same decl.  */\n+#define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      char * name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\\\n+      if (!flag_inhibit_size_directive && DECL_SIZE (DECL)\t\\\n+          && ! AT_END && TOP_LEVEL\t\t\t\t\\\n+\t  && DECL_INITIAL (DECL) == error_mark_node\t\t\\\n+\t  && !size_directive_output)\t\t\t\t\\\n+        {\t\t\t\t\t\t\t\\\n+\t  size_directive_output = 1;\t\t\t\t\\\n+\t  fprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\\\n+\t  assemble_name (FILE, name);\t\t\t\t\\\n+\t  putc (',', FILE);\t\t\t\t\t\\\n+\t  fprintf (FILE, HOST_WIDE_INT_PRINT_DEC,\t\t\\\n+\t\t  int_size_in_bytes (TREE_TYPE (DECL)));\t\\\n+\t fputc ('\\n', FILE);\t\t\t\t\t\\\n+        }\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+/* This is how to declare the size of a function.  */\n+#define ASM_DECLARE_FUNCTION_SIZE(FILE, FNAME, DECL)\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      if (!flag_inhibit_size_directive)\t\t\t\t\\\n+        {\t\t\t\t\t\t\t\\\n+          char label[256];\t\t\t\t\t\\\n+\t  static int labelno;\t\t\t\t\t\\\n+\t  labelno ++;\t\t\t\t\t\t\\\n+\t  ASM_GENERATE_INTERNAL_LABEL (label, \"Lfe\", labelno);\t\\\n+\t  ASM_OUTPUT_INTERNAL_LABEL (FILE, \"Lfe\", labelno);\t\\\n+\t  fprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\\\n+\t  assemble_name (FILE, (FNAME));\t\t\t\\\n+          fprintf (FILE, \",\");\t\t\t\t\t\\\n+\t  assemble_name (FILE, label);\t\t\t\t\\\n+          fprintf (FILE, \"-\");\t\t\t\t\t\\\n+\t  assemble_name (FILE, (FNAME));\t\t\t\\\n+\t  putc ('\\n', FILE);\t\t\t\t\t\\\n+        }\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#endif /* TYPE_ASM_OP */"}]}