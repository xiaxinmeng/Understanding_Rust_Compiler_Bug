{"sha": "725214ac5ecba8ec8c92dbc72d99579276d63a0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI1MjE0YWM1ZWNiYThlYzhjOTJkYmM3MmQ5OTU3OTI3NmQ2M2EwZA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-09-29T13:59:08Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-09-29T13:59:08Z"}, "message": "tree.h (SCOPE_FILE_SCOPE_P): New macro.\n\n2010-09-29  Richard Guenther  <rguenther@suse.de>\n\n\t* tree.h (SCOPE_FILE_SCOPE_P): New macro.\n\t(DECL_FILE_SCOPE_P): Use it.\n\t(TYPE_FILE_SCOPE_P): New macro.\n\n        cp/\n\t* cp-tree.h (CP_DECL_CONTEXT): Check DECL_FILE_SCOPE_P.\n\t(CP_TYPE_CONTEXT): Similar.\n\t(FROB_CONTEXT): Frob global_namespace to the global\n\tTRANSLATION_UNIT_DECL.\n\t* decl.c (cxx_init_decl_processing): Build a TRANSLATION_UNIT_DECL,\n\tset DECL_CONTEXT of global_namespace to it.\n\t(start_decl): Use CP_DECL_CONTEXT and test TYPE_P\n\tinstead of zeroing context.\n\t(cp_finish_decl): Use DECL_FILE_SCOPE_P.\n\t(grokfndecl): Likewise.\n\t(start_preparsed_function): Likewise.\n\t* name-lookup.c (maybe_push_decl): Use DECL_NAMESPACE_SCOPE_P.\n\t(namespace_binding): Use SCOPE_FILE_SCOPE_P.\n\t* pt.c (template_class_depth): Use CP_TYPE_CONTEXT.\n\t(is_specialization_of_friend): Use CP_DECL_CONTEXT.\n\t(push_template_decl_real): Likewise.\n\t(tsubst_friend_class): Likewise.  Adjust context comparisons.\n\t(instantiate_class_template): Use CP_TYPE_CONTEXT.\n\t(tsubst): Do not substitute into TRANSLATION_UNIT_DECL.\n\t* cxx-pretty-print.c (pp_cxx_nested_name_specifier): Use\n\tSCOPE_FILE_SCOPE_P.\n\nFrom-SVN: r164719", "tree": {"sha": "2cbe7215d3413ac50b94430f2f38d095f618b315", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2cbe7215d3413ac50b94430f2f38d095f618b315"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/725214ac5ecba8ec8c92dbc72d99579276d63a0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/725214ac5ecba8ec8c92dbc72d99579276d63a0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/725214ac5ecba8ec8c92dbc72d99579276d63a0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/725214ac5ecba8ec8c92dbc72d99579276d63a0d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "085c1b4766696a735918705c56819cf4e71f4b15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/085c1b4766696a735918705c56819cf4e71f4b15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/085c1b4766696a735918705c56819cf4e71f4b15"}], "stats": {"total": 94, "additions": 60, "deletions": 34}, "files": [{"sha": "bcc30b4a2238952b5013db6bb165b898e253f157", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725214ac5ecba8ec8c92dbc72d99579276d63a0d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725214ac5ecba8ec8c92dbc72d99579276d63a0d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=725214ac5ecba8ec8c92dbc72d99579276d63a0d", "patch": "@@ -1,3 +1,9 @@\n+2010-09-29  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree.h (SCOPE_FILE_SCOPE_P): New macro.\n+\t(DECL_FILE_SCOPE_P): Use it.\n+\t(TYPE_FILE_SCOPE_P): New macro.\n+\n 2010-09-29  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* c-parser.c (c_lex_one_token): In Objective-C, when dealing with"}, {"sha": "29f77e4bc78a8afbccaa98358b0ade8a2f2b287b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725214ac5ecba8ec8c92dbc72d99579276d63a0d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725214ac5ecba8ec8c92dbc72d99579276d63a0d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=725214ac5ecba8ec8c92dbc72d99579276d63a0d", "patch": "@@ -1,3 +1,27 @@\n+2010-09-29  Richard Guenther  <rguenther@suse.de>\n+\n+\t* cp-tree.h (CP_DECL_CONTEXT): Check DECL_FILE_SCOPE_P.\n+\t(CP_TYPE_CONTEXT): Similar.\n+\t(FROB_CONTEXT): Frob global_namespace to the global\n+\tTRANSLATION_UNIT_DECL.\n+\t* decl.c (cxx_init_decl_processing): Build a TRANSLATION_UNIT_DECL,\n+\tset DECL_CONTEXT of global_namespace to it.\n+\t(start_decl): Use CP_DECL_CONTEXT and test TYPE_P\n+\tinstead of zeroing context.\n+\t(cp_finish_decl): Use DECL_FILE_SCOPE_P.\n+\t(grokfndecl): Likewise.\n+\t(start_preparsed_function): Likewise.\n+\t* name-lookup.c (maybe_push_decl): Use DECL_NAMESPACE_SCOPE_P.\n+\t(namespace_binding): Use SCOPE_FILE_SCOPE_P.\n+\t* pt.c (template_class_depth): Use CP_TYPE_CONTEXT.\n+\t(is_specialization_of_friend): Use CP_DECL_CONTEXT.\n+\t(push_template_decl_real): Likewise.\n+\t(tsubst_friend_class): Likewise.  Adjust context comparisons.\n+\t(instantiate_class_template): Use CP_TYPE_CONTEXT.\n+\t(tsubst): Do not substitute into TRANSLATION_UNIT_DECL.\n+\t* cxx-pretty-print.c (pp_cxx_nested_name_specifier): Use\n+\tSCOPE_FILE_SCOPE_P.\n+\n 2010-09-29  Yao Qi  <yao@codesourcery.com>\n \n \t* decl.c (get_atexit_node): Fix typo."}, {"sha": "aa1fe4d11ff0aec578aa3ade5c0a10f28eef144f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725214ac5ecba8ec8c92dbc72d99579276d63a0d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725214ac5ecba8ec8c92dbc72d99579276d63a0d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=725214ac5ecba8ec8c92dbc72d99579276d63a0d", "patch": "@@ -2361,12 +2361,12 @@ struct GTY((variable_size)) lang_decl {\n #define SET_DECL_FRIEND_CONTEXT(NODE, CONTEXT) \\\n   (LANG_DECL_FN_CHECK (NODE)->context = (CONTEXT))\n \n-/* NULL_TREE in DECL_CONTEXT represents the global namespace.  */\n #define CP_DECL_CONTEXT(NODE) \\\n-  (DECL_CONTEXT (NODE) ? DECL_CONTEXT (NODE) : global_namespace)\n+  (!DECL_FILE_SCOPE_P (NODE) ? DECL_CONTEXT (NODE) : global_namespace)\n #define CP_TYPE_CONTEXT(NODE) \\\n-  (TYPE_CONTEXT (NODE) ? TYPE_CONTEXT (NODE) : global_namespace)\n-#define FROB_CONTEXT(NODE)   ((NODE) == global_namespace ? NULL_TREE : (NODE))\n+  (!TYPE_FILE_SCOPE_P (NODE) ? TYPE_CONTEXT (NODE) : global_namespace)\n+#define FROB_CONTEXT(NODE) \\\n+  ((NODE) == global_namespace ? DECL_CONTEXT (NODE) : (NODE))\n \n /* 1 iff NODE has namespace scope, including the global namespace.  */\n #define DECL_NAMESPACE_SCOPE_P(NODE)\t\t\t\t\\"}, {"sha": "c3701c244329d80aa8926d83c12337dce8724362", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725214ac5ecba8ec8c92dbc72d99579276d63a0d/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725214ac5ecba8ec8c92dbc72d99579276d63a0d/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=725214ac5ecba8ec8c92dbc72d99579276d63a0d", "patch": "@@ -260,7 +260,7 @@ pp_cxx_template_keyword_if_needed (cxx_pretty_printer *pp, tree scope, tree t)\n static void\n pp_cxx_nested_name_specifier (cxx_pretty_printer *pp, tree t)\n {\n-  if (t != NULL && t != pp->enclosing_scope)\n+  if (!SCOPE_FILE_SCOPE_P (t) && t != pp->enclosing_scope)\n     {\n       tree scope = TYPE_P (t) ? TYPE_CONTEXT (t) : DECL_CONTEXT (t);\n       pp_cxx_nested_name_specifier (pp, scope);"}, {"sha": "7fcfb8b59bd6648de1b4f772b112b9d5fb8685b2", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725214ac5ecba8ec8c92dbc72d99579276d63a0d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725214ac5ecba8ec8c92dbc72d99579276d63a0d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=725214ac5ecba8ec8c92dbc72d99579276d63a0d", "patch": "@@ -3417,6 +3417,7 @@ cxx_init_decl_processing (void)\n   gcc_assert (global_namespace == NULL_TREE);\n   global_namespace = build_lang_decl (NAMESPACE_DECL, global_scope_name,\n \t\t\t\t      void_type_node);\n+  DECL_CONTEXT (global_namespace) = build_translation_unit_decl (NULL_TREE);\n   TREE_PUBLIC (global_namespace) = 1;\n   begin_scope (sk_namespace, global_namespace);\n \n@@ -4163,16 +4164,9 @@ start_decl (const cp_declarator *declarator,\n       || decl == error_mark_node)\n     return error_mark_node;\n \n-  context = DECL_CONTEXT (decl);\n-\n-  if (context)\n-    {\n-      *pushed_scope_p = push_scope (context);\n-\n-      /* We are only interested in class contexts, later.  */\n-      if (TREE_CODE (context) == NAMESPACE_DECL)\n-\tcontext = NULL_TREE;\n-    }\n+  context = CP_DECL_CONTEXT (decl);\n+  if (context != global_namespace)\n+    *pushed_scope_p = push_scope (context);\n \n   if (initialized)\n     /* Is it valid for this decl to have an initializer at all?\n@@ -4241,7 +4235,7 @@ start_decl (const cp_declarator *declarator,\n       && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (decl)))\n     warning (0, \"inline function %q+D given attribute noinline\", decl);\n \n-  if (context && COMPLETE_TYPE_P (complete_type (context)))\n+  if (TYPE_P (context) && COMPLETE_TYPE_P (complete_type (context)))\n     {\n       if (TREE_CODE (decl) == VAR_DECL)\n \t{\n@@ -5802,7 +5796,7 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n \t  && !COMPLETE_TYPE_P (TREE_TYPE (decl)))\n \tTYPE_DECL_SUPPRESS_DEBUG (decl) = 1;\n \n-      rest_of_decl_compilation (decl, DECL_CONTEXT (decl) == NULL_TREE,\n+      rest_of_decl_compilation (decl, DECL_FILE_SCOPE_P (decl),\n \t\t\t\tat_eof);\n       goto finish_end;\n     }\n@@ -6888,8 +6882,7 @@ grokfndecl (tree ctype,\n \t   && strncmp (IDENTIFIER_POINTER (declarator)+2, \"builtin_\", 8) == 0))\n       && current_lang_name == lang_name_cplusplus\n       && ctype == NULL_TREE\n-      /* NULL_TREE means global namespace.  */\n-      && DECL_CONTEXT (decl) == NULL_TREE)\n+      && DECL_FILE_SCOPE_P (decl))\n     SET_DECL_LANGUAGE (decl, lang_c);\n \n   /* Should probably propagate const out from type to decl I bet (mrs).  */\n@@ -12068,7 +12061,7 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n \t with any previous declarations; if the original declaration\n \t has a linkage specification, that specification applies to\n \t the definition as well, and may affect the mangled name.  */\n-      if (!DECL_CONTEXT (decl1))\n+      if (DECL_FILE_SCOPE_P (decl1))\n \tmaybe_apply_pragma_weak (decl1);\n     }\n "}, {"sha": "e980cb685e69e5669a6fa9e80b307f3be981e68e", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725214ac5ecba8ec8c92dbc72d99579276d63a0d/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725214ac5ecba8ec8c92dbc72d99579276d63a0d/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=725214ac5ecba8ec8c92dbc72d99579276d63a0d", "patch": "@@ -1169,7 +1169,7 @@ maybe_push_decl (tree decl)\n \t  && DECL_CONTEXT (decl) != NULL_TREE\n \t  /* Definitions of namespace members outside their namespace are\n \t     possible.  */\n-\t  && TREE_CODE (DECL_CONTEXT (decl)) != NAMESPACE_DECL)\n+\t  && !DECL_NAMESPACE_SCOPE_P (decl))\n       || (TREE_CODE (decl) == TEMPLATE_DECL && !namespace_bindings_p ())\n       || type == unknown_type_node\n       /* The declaration of a template specialization does not affect\n@@ -3068,7 +3068,7 @@ namespace_binding (tree name, tree scope)\n {\n   cxx_binding *binding;\n \n-  if (scope == NULL)\n+  if (SCOPE_FILE_SCOPE_P (scope))\n     scope = global_namespace;\n   else\n     /* Unnecessary for the global namespace because it can't be an alias. */"}, {"sha": "eabd11b7e93bcd6afeec3b95e844f264ec175c54", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725214ac5ecba8ec8c92dbc72d99579276d63a0d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725214ac5ecba8ec8c92dbc72d99579276d63a0d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=725214ac5ecba8ec8c92dbc72d99579276d63a0d", "patch": "@@ -344,7 +344,7 @@ template_class_depth (tree type)\n   for (depth = 0;\n        type && TREE_CODE (type) != NAMESPACE_DECL;\n        type = (TREE_CODE (type) == FUNCTION_DECL)\n-\t ? CP_DECL_CONTEXT (type) : TYPE_CONTEXT (type))\n+\t ? CP_DECL_CONTEXT (type) : CP_TYPE_CONTEXT (type))\n     {\n       tree tinfo = get_template_info (type);\n \n@@ -1130,7 +1130,7 @@ is_specialization_of_friend (tree decl, tree friend_decl)\n      nonzero.  To determine if DECL is a friend of FRIEND, we first\n      check if the enclosing class is a specialization of another.  */\n \n-  template_depth = template_class_depth (DECL_CONTEXT (friend_decl));\n+  template_depth = template_class_depth (CP_DECL_CONTEXT (friend_decl));\n   if (template_depth\n       && DECL_CLASS_SCOPE_P (decl)\n       && is_specialization_of (TYPE_NAME (DECL_CONTEXT (decl)),\n@@ -4346,7 +4346,7 @@ push_template_decl_real (tree decl, bool is_friend)\n   if (is_friend)\n     /* For a friend, we want the context of the friend function, not\n        the type of which it is a friend.  */\n-    ctx = DECL_CONTEXT (decl);\n+    ctx = CP_DECL_CONTEXT (decl);\n   else if (CP_DECL_CONTEXT (decl)\n \t   && TREE_CODE (CP_DECL_CONTEXT (decl)) != NAMESPACE_DECL)\n     /* In the case of a virtual function, we want the class in which\n@@ -7530,9 +7530,9 @@ tsubst_friend_class (tree friend_tmpl, tree args)\n   tree tmpl;\n   tree context;\n \n-  context = DECL_CONTEXT (friend_tmpl);\n+  context = CP_DECL_CONTEXT (friend_tmpl);\n \n-  if (context)\n+  if (context != global_namespace)\n     {\n       if (TREE_CODE (context) == NAMESPACE_DECL)\n \tpush_nested_namespace (context);\n@@ -7621,7 +7621,7 @@ tsubst_friend_class (tree friend_tmpl, tree args)\n       friend_type = TREE_TYPE (pushdecl_top_level_maybe_friend (tmpl, true));\n     }\n \n-  if (context)\n+  if (context != global_namespace)\n     {\n       if (TREE_CODE (context) == NAMESPACE_DECL)\n \tpop_nested_namespace (context);\n@@ -7883,14 +7883,13 @@ instantiate_class_template (tree type)\n   if (BINFO_N_BASE_BINFOS (pbinfo))\n     {\n       tree pbase_binfo;\n-      tree context = TYPE_CONTEXT (type);\n       tree pushed_scope;\n       int i;\n \n       /* We must enter the scope containing the type, as that is where\n \t the accessibility of types named in dependent bases are\n \t looked up from.  */\n-      pushed_scope = push_scope (context ? context : global_namespace);\n+      pushed_scope = push_scope (CP_TYPE_CONTEXT (type));\n \n       /* Substitute into each of the bases to determine the actual\n \t basetypes.  */\n@@ -10012,7 +10011,8 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n       || t == void_type_node\n       || t == char_type_node\n       || t == unknown_type_node\n-      || TREE_CODE (t) == NAMESPACE_DECL)\n+      || TREE_CODE (t) == NAMESPACE_DECL\n+      || TREE_CODE (t) == TRANSLATION_UNIT_DECL)\n     return t;\n \n   if (DECL_P (t))"}, {"sha": "8c7a897203cfd1024189f152960e9624aa426be6", "filename": "gcc/tree.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725214ac5ecba8ec8c92dbc72d99579276d63a0d/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725214ac5ecba8ec8c92dbc72d99579276d63a0d/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=725214ac5ecba8ec8c92dbc72d99579276d63a0d", "patch": "@@ -2687,10 +2687,13 @@ struct GTY(()) tree_decl_minimal {\n #define DECL_LANG_FLAG_8(NODE) \\\n   (DECL_COMMON_CHECK (NODE)->decl_common.lang_flag_8)\n \n+/* Nonzero for a scope which is equal to file scope.  */\n+#define SCOPE_FILE_SCOPE_P(EXP)\t\\\n+  (! (EXP) || TREE_CODE (EXP) == TRANSLATION_UNIT_DECL)\n /* Nonzero for a decl which is at file scope.  */\n-#define DECL_FILE_SCOPE_P(EXP) \t\t\t\t\t\\\n-  (! DECL_CONTEXT (EXP)\t\t\t\t\t\t\\\n-   || TREE_CODE (DECL_CONTEXT (EXP)) == TRANSLATION_UNIT_DECL)\n+#define DECL_FILE_SCOPE_P(EXP) SCOPE_FILE_SCOPE_P (DECL_CONTEXT (EXP))\n+/* Nonzero for a type which is at file scope.  */\n+#define TYPE_FILE_SCOPE_P(EXP) SCOPE_FILE_SCOPE_P (TYPE_CONTEXT (EXP))\n \n /* Nonzero for a decl that is decorated using attribute used.\n    This indicates to compiler tools that this decl needs to be preserved.  */"}]}