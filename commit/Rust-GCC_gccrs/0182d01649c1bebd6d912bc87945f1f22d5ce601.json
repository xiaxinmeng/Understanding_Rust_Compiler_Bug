{"sha": "0182d01649c1bebd6d912bc87945f1f22d5ce601", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE4MmQwMTY0OWMxYmViZDZkOTEyYmM4Nzk0NWYxZjIyZDVjZTYwMQ==", "commit": {"author": {"name": "Basile Starynkevitch", "email": "basile@starynkevitch.net", "date": "2009-09-22T21:00:09Z"}, "committer": {"name": "Rafael Espindola", "email": "espindola@gcc.gnu.org", "date": "2009-09-22T21:00:09Z"}, "message": "gengtype.c (write_types, [...]): Add the output_header argument.\n\n2009-09-22  Basile Starynkevitch  <basile@starynkevitch.net>\n            Rafael Avila de Espindola  <espindola@google.com>\n\n\t* gengtype.c (write_types, write_local): Add the output_header\n\targument. Update all callers.\n\n\nCo-Authored-By: Rafael Avila de Espindola <espindola@google.com>\n\nFrom-SVN: r152046", "tree": {"sha": "fac708cb168bf8782958d44f718295e0b522e571", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fac708cb168bf8782958d44f718295e0b522e571"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0182d01649c1bebd6d912bc87945f1f22d5ce601", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0182d01649c1bebd6d912bc87945f1f22d5ce601", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0182d01649c1bebd6d912bc87945f1f22d5ce601", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0182d01649c1bebd6d912bc87945f1f22d5ce601/comments", "author": {"login": "bstarynk", "id": 90412, "node_id": "MDQ6VXNlcjkwNDEy", "avatar_url": "https://avatars.githubusercontent.com/u/90412?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstarynk", "html_url": "https://github.com/bstarynk", "followers_url": "https://api.github.com/users/bstarynk/followers", "following_url": "https://api.github.com/users/bstarynk/following{/other_user}", "gists_url": "https://api.github.com/users/bstarynk/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstarynk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstarynk/subscriptions", "organizations_url": "https://api.github.com/users/bstarynk/orgs", "repos_url": "https://api.github.com/users/bstarynk/repos", "events_url": "https://api.github.com/users/bstarynk/events{/privacy}", "received_events_url": "https://api.github.com/users/bstarynk/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d40a19da1370ab4930788ede0a5c9e9171a16656", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d40a19da1370ab4930788ede0a5c9e9171a16656", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d40a19da1370ab4930788ede0a5c9e9171a16656"}], "stats": {"total": 70, "additions": 39, "deletions": 31}, "files": [{"sha": "9ec07994293e19de3476eb72edcfec8ef96f5040", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0182d01649c1bebd6d912bc87945f1f22d5ce601/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0182d01649c1bebd6d912bc87945f1f22d5ce601/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0182d01649c1bebd6d912bc87945f1f22d5ce601", "patch": "@@ -1,3 +1,9 @@\n+2009-09-22  Basile Starynkevitch  <basile@starynkevitch.net>\n+            Rafael Avila de Espindola  <espindola@google.com>\n+\n+\t* gengtype.c (write_types, write_local): Add the output_header\n+\targument. Update all callers.\n+\n 2009-09-22  Dodji Seketeli  <dodji@redhat.com>\n \n \t* dwarf2out.c (template_parameter_pack_die,"}, {"sha": "0ee9c48050a518de89dc529e3860401e0e37b747", "filename": "gcc/gengtype.c", "status": "modified", "additions": 33, "deletions": 31, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0182d01649c1bebd6d912bc87945f1f22d5ce601/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0182d01649c1bebd6d912bc87945f1f22d5ce601/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=0182d01649c1bebd6d912bc87945f1f22d5ce601", "patch": "@@ -1876,14 +1876,16 @@ static void write_func_for_structure\n       const struct write_types_data *wtd);\n static void write_types_process_field\n      (type_p f, const struct walk_type_data *d);\n-static void write_types (type_p structures,\n+static void write_types (outf_p output_header,\n+                         type_p structures,\n \t\t\t type_p param_structs,\n \t\t\t const struct write_types_data *wtd);\n static void write_types_local_process_field\n      (type_p f, const struct walk_type_data *d);\n static void write_local_func_for_structure\n      (type_p orig_s, type_p s, type_p * param);\n-static void write_local (type_p structures,\n+static void write_local (outf_p output_header,\n+                         type_p structures,\n \t\t\t type_p param_structs);\n static void write_enum_defn (type_p structures, type_p param_structs);\n static int contains_scalar_p (type_p t);\n@@ -2698,12 +2700,12 @@ write_func_for_structure (type_p orig_s, type_p s, type_p *param,\n /* Write out marker routines for STRUCTURES and PARAM_STRUCTS.  */\n \n static void\n-write_types (type_p structures, type_p param_structs,\n+write_types (outf_p output_header, type_p structures, type_p param_structs,\n \t     const struct write_types_data *wtd)\n {\n   type_p s;\n \n-  oprintf (header_file, \"\\n/* %s*/\\n\", wtd->comment);\n+  oprintf (output_header, \"\\n/* %s*/\\n\", wtd->comment);\n   for (s = structures; s; s = s->next)\n     if (s->gc_used == GC_POINTED_TO\n \t|| s->gc_used == GC_MAYBE_POINTED_TO)\n@@ -2714,13 +2716,13 @@ write_types (type_p structures, type_p param_structs,\n \t    && s->u.s.line.file == NULL)\n \t  continue;\n \n-\toprintf (header_file, \"#define gt_%s_\", wtd->prefix);\n-\toutput_mangled_typename (header_file, s);\n-\toprintf (header_file, \"(X) do { \\\\\\n\");\n-\toprintf (header_file,\n+\toprintf (output_header, \"#define gt_%s_\", wtd->prefix);\n+\toutput_mangled_typename (output_header, s);\n+\toprintf (output_header, \"(X) do { \\\\\\n\");\n+\toprintf (output_header,\n \t\t \"  if (X != NULL) gt_%sx_%s (X);\\\\\\n\", wtd->prefix,\n \t\t s->u.s.tag);\n-\toprintf (header_file,\n+\toprintf (output_header,\n \t\t \"  } while (0)\\n\");\n \n \tfor (opt = s->u.s.opt; opt; opt = opt->next)\n@@ -2730,7 +2732,7 @@ write_types (type_p structures, type_p param_structs,\n \t      if (t->kind == TYPE_STRUCT\n \t\t  || t->kind == TYPE_UNION\n \t\t  || t->kind == TYPE_LANG_STRUCT)\n-\t\toprintf (header_file,\n+\t\toprintf (output_header,\n \t\t\t \"#define gt_%sx_%s gt_%sx_%s\\n\",\n \t\t\t wtd->prefix, s->u.s.tag, wtd->prefix, t->u.s.tag);\n \t      else\n@@ -2742,7 +2744,7 @@ write_types (type_p structures, type_p param_structs,\n \t  continue;\n \n \t/* Declare the marker procedure only once.  */\n-\toprintf (header_file,\n+\toprintf (output_header,\n \t\t \"extern void gt_%sx_%s (void *);\\n\",\n \t\t wtd->prefix, s->u.s.tag);\n \n@@ -2770,9 +2772,9 @@ write_types (type_p structures, type_p param_structs,\n \ttype_p stru = s->u.param_struct.stru;\n \n \t/* Declare the marker procedure.  */\n-\toprintf (header_file, \"extern void gt_%s_\", wtd->prefix);\n-\toutput_mangled_typename (header_file, s);\n-\toprintf (header_file, \" (void *);\\n\");\n+\toprintf (output_header, \"extern void gt_%s_\", wtd->prefix);\n+\toutput_mangled_typename (output_header, s);\n+\toprintf (output_header, \" (void *);\\n\");\n \n \tif (stru->u.s.line.file == NULL)\n \t  {\n@@ -2887,13 +2889,13 @@ write_local_func_for_structure (type_p orig_s, type_p s, type_p *param)\n /* Write out local marker routines for STRUCTURES and PARAM_STRUCTS.  */\n \n static void\n-write_local (type_p structures, type_p param_structs)\n+write_local (outf_p output_header, type_p structures, type_p param_structs)\n {\n   type_p s;\n \n-  if (!header_file) \n+  if (!output_header) \n     return;\n-  oprintf (header_file, \"\\n/* Local pointer-walking routines.  */\\n\");\n+  oprintf (output_header, \"\\n/* Local pointer-walking routines.  */\\n\");\n   for (s = structures; s; s = s->next)\n     if (s->gc_used == GC_POINTED_TO\n \t|| s->gc_used == GC_MAYBE_POINTED_TO)\n@@ -2911,11 +2913,11 @@ write_local (type_p structures, type_p param_structs)\n \t\t  || t->kind == TYPE_UNION\n \t\t  || t->kind == TYPE_LANG_STRUCT)\n \t\t{\n-\t\t  oprintf (header_file, \"#define gt_pch_p_\");\n-\t\t  output_mangled_typename (header_file, s);\n-\t\t  oprintf (header_file, \" gt_pch_p_\");\n-\t\t  output_mangled_typename (header_file, t);\n-\t\t  oprintf (header_file, \"\\n\");\n+\t\t  oprintf (output_header, \"#define gt_pch_p_\");\n+\t\t  output_mangled_typename (output_header, s);\n+\t\t  oprintf (output_header, \" gt_pch_p_\");\n+\t\t  output_mangled_typename (output_header, t);\n+\t\t  oprintf (output_header, \"\\n\");\n \t\t}\n \t      else\n \t\terror_at_line (&s->u.s.line,\n@@ -2926,9 +2928,9 @@ write_local (type_p structures, type_p param_structs)\n \t  continue;\n \n \t/* Declare the marker procedure only once.  */\n-\toprintf (header_file, \"extern void gt_pch_p_\");\n-\toutput_mangled_typename (header_file, s);\n-\toprintf (header_file,\n+\toprintf (output_header, \"extern void gt_pch_p_\");\n+\toutput_mangled_typename (output_header, s);\n+\toprintf (output_header,\n \t \"\\n    (void *, void *, gt_pointer_operator, void *);\\n\");\n \n \tif (s->kind == TYPE_LANG_STRUCT)\n@@ -2948,9 +2950,9 @@ write_local (type_p structures, type_p param_structs)\n \ttype_p stru = s->u.param_struct.stru;\n \n \t/* Declare the marker procedure.  */\n-\toprintf (header_file, \"extern void gt_pch_p_\");\n-\toutput_mangled_typename (header_file, s);\n-\toprintf (header_file,\n+\toprintf (output_header, \"extern void gt_pch_p_\");\n+\toutput_mangled_typename (output_header, s);\n+\toprintf (output_header,\n \t \"\\n    (void *, void *, gt_pointer_operator, void *);\\n\");\n \n \tif (stru->u.s.line.file == NULL)\n@@ -3689,9 +3691,9 @@ main (int argc, char **argv)\n \n   open_base_files ();\n   write_enum_defn (structures, param_structs);\n-  write_types (structures, param_structs, &ggc_wtd);\n-  write_types (structures, param_structs, &pch_wtd);\n-  write_local (structures, param_structs);\n+  write_types (header_file, structures, param_structs, &ggc_wtd);\n+  write_types (header_file, structures, param_structs, &pch_wtd);\n+  write_local (header_file, structures, param_structs);\n   write_roots (variables);\n   write_rtx_next ();\n   close_output_files ();"}]}