{"sha": "965eb47478f9eeaf06925b495d1258d285f3db21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY1ZWI0NzQ3OGY5ZWVhZjA2OTI1YjQ5NWQxMjU4ZDI4NWYzZGIyMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-07-26T06:37:29Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-07-26T06:37:29Z"}, "message": "arc.h (EXPAND_BUILTIN_VA_START): New.\n\n        * arc.h (EXPAND_BUILTIN_VA_START): New.\n        (EXPAND_BUILTIN_VA_ARG): New.\n        * arc.c (arc_setup_incoming_varargs): Set alias set of\n        varargs save area.\n        (arc_va_start): New.\n        (arc_va_arg): New.\n\nFrom-SVN: r28254", "tree": {"sha": "03106160d962f990c2cafb047d3ef21f390fd562", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03106160d962f990c2cafb047d3ef21f390fd562"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/965eb47478f9eeaf06925b495d1258d285f3db21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/965eb47478f9eeaf06925b495d1258d285f3db21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/965eb47478f9eeaf06925b495d1258d285f3db21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/965eb47478f9eeaf06925b495d1258d285f3db21/comments", "author": null, "committer": null, "parents": [{"sha": "80c83e63223528b5e2d3f27cd29c45e30ba402dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80c83e63223528b5e2d3f27cd29c45e30ba402dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80c83e63223528b5e2d3f27cd29c45e30ba402dc"}], "stats": {"total": 109, "additions": 108, "deletions": 1}, "files": [{"sha": "bfaaf383b0b3326a8ab6ca4b6b1d282668d31c4e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965eb47478f9eeaf06925b495d1258d285f3db21/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965eb47478f9eeaf06925b495d1258d285f3db21/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=965eb47478f9eeaf06925b495d1258d285f3db21", "patch": "@@ -1,3 +1,12 @@\n+Sun Jul 25 22:56:47 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* arc.h (EXPAND_BUILTIN_VA_START): New.\n+\t(EXPAND_BUILTIN_VA_ARG): New.\n+\t* arc.c (arc_setup_incoming_varargs): Set alias set of \n+\tvarargs save area.\n+\t(arc_va_start): New.\n+\t(arc_va_arg): New.\n+\n Sun Jul 25 22:45:55 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* alpha.h (EXPAND_BUILTIN_SAVEREGS): Delete."}, {"sha": "957db0b5227fddc045cebfde37865c1a87b37241", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 90, "deletions": 1, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965eb47478f9eeaf06925b495d1258d285f3db21/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965eb47478f9eeaf06925b495d1258d285f3db21/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=965eb47478f9eeaf06925b495d1258d285f3db21", "patch": "@@ -751,7 +751,7 @@ arc_double_limm_p (value)\n \n    We do things a little weird here.  We're supposed to only allocate space\n    for the anonymous arguments.  However we need to keep the stack eight byte\n-   aligned.  So we round the space up if necessary, and leave it to va-arc.h\n+   aligned.  So we round the space up if necessary, and leave it to va_start\n    to compensate.  */\n \n void\n@@ -789,6 +789,8 @@ arc_setup_incoming_varargs (cum, mode, type, pretend_size, no_rtl)\n \t\t\t  plus_constant (arg_pointer_rtx,\n \t\t\t\t\t FIRST_PARM_OFFSET (0)\n \t\t\t\t\t + align_slop * UNITS_PER_WORD));\n+      MEM_ALIAS_SET (regblock) = get_varargs_alias_set ();\n+\n       move_block_from_reg (first_reg_offset, regblock,\n \t\t\t   MAX_ARC_PARM_REGS - first_reg_offset,\n \t\t\t   ((MAX_ARC_PARM_REGS - first_reg_offset)\n@@ -2201,3 +2203,90 @@ arc_ccfsm_record_branch_deleted ()\n      for the just deleted branch.  */\n   current_insn_set_cc_p = last_insn_set_cc_p;\n }\n+\f\n+void\n+arc_va_start (stdarg_p, valist, nextarg)\n+     int stdarg_p;\n+     tree valist;\n+     rtx nextarg;\n+{\n+  /* See arc_setup_incoming_varargs for reasons for this oddity.  */\n+  if (current_function_args_info < 8\n+      && (current_function_args_info & 1))\n+    nextarg = plus_constant (nextarg, UNITS_PER_WORD);\n+\n+  std_expand_builtin_va_start (stdarg_p, valist, nextarg);\n+}\n+\n+rtx\n+arc_va_arg (valist, type)\n+     tree valist, type;\n+{\n+  rtx addr_rtx;\n+  tree addr, incr;\n+  tree type_ptr = build_pointer_type (type);\n+\n+  /* All aggregates are passed by reference.  All scalar types larger\n+     than 8 bytes are passed by reference.  */\n+\n+  if (AGGREGATE_TYPE_P (type) || int_size_in_bytes (type) > 8)\n+    {\n+      tree type_ptr_ptr = build_pointer_type (type_ptr);\n+\n+      addr = build (INDIRECT_REF, type_ptr,\n+\t\t    build (NOP_EXPR, type_ptr_ptr, valist));\n+\n+      incr = build (PLUS_EXPR, TREE_TYPE (valist),\n+\t\t    valist, build_int_2 (UNITS_PER_WORD, 0));\n+    }\n+  else\n+    {\n+      HOST_WIDE_INT align, rounded_size;\n+\n+      /* Compute the rounded size of the type.  */\n+      align = PARM_BOUNDARY / BITS_PER_UNIT;\n+      rounded_size = (((TREE_INT_CST_LOW (TYPE_SIZE (type)) / BITS_PER_UNIT\n+\t\t\t+ align - 1) / align) * align);\n+\n+      /* Align 8 byte operands.  */\n+      addr = valist;\n+      if (TYPE_ALIGN (type) > BITS_PER_WORD)\n+\t{\n+\t  /* AP = (TYPE *)(((int)AP + 7) & -8)  */\n+\n+\t  addr = build (NOP_EXPR, integer_type_node, valist);\n+\t  addr = fold (build (PLUS_EXPR, integer_type_node, addr,\n+\t\t\t      build_int_2 (7, 0)));\n+\t  addr = fold (build (BIT_AND_EXPR, integer_type_node, addr,\n+\t\t\t      build_int_2 (-8, 0)));\n+\t  addr = fold (build (NOP_EXPR, TREE_TYPE (valist), addr));\n+\t}\n+\n+      /* The increment is always rounded_size past the aligned pointer.  */\n+      incr = fold (build (PLUS_EXPR, TREE_TYPE (addr), addr,\n+\t\t\t  build_int_2 (rounded_size, 0)));\n+\n+      /* Adjust the pointer in big-endian mode.  */\n+      if (BYTES_BIG_ENDIAN)\n+\t{\n+\t  HOST_WIDE_INT adj;\n+\t  adj = TREE_INT_CST_LOW (TYPE_SIZE (type)) / BITS_PER_UNIT;\n+\t  if (rounded_size > align)\n+\t    adj = rounded_size;\n+\n+\t  addr = fold (build (PLUS_EXPR, TREE_TYPE (addr), addr,\n+\t\t\t      build_int_2 (rounded_size - adj, 0)));\n+\t}\n+    }\n+\n+  /* Evaluate the data address.  */\n+  addr_rtx = expand_expr (addr, NULL_RTX, Pmode, EXPAND_NORMAL);\n+  addr_rtx = copy_to_reg (addr_rtx);\n+  \n+  /* Compute new value for AP.  */\n+  incr = build (MODIFY_EXPR, TREE_TYPE (valist), valist, incr);\n+  TREE_SIDE_EFFECTS (incr) = 1;\n+  expand_expr (incr, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+\n+  return addr_rtx;\n+}"}, {"sha": "81c6c875ae101730b2a44e564ac876dd316a8b6c", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965eb47478f9eeaf06925b495d1258d285f3db21/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965eb47478f9eeaf06925b495d1258d285f3db21/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=965eb47478f9eeaf06925b495d1258d285f3db21", "patch": "@@ -1640,3 +1640,12 @@ enum arc_function_type {\n ((TYPE) == ARC_FUNCTION_ILINK1 || (TYPE) == ARC_FUNCTION_ILINK2)\n /* Compute the type of a function from its DECL.  */\n enum arc_function_type arc_compute_function_type ();\n+\n+\f\n+/* Implement `va_start' for varargs and stdarg.  */\n+#define EXPAND_BUILTIN_VA_START(stdarg, valist, nextarg) \\\n+  arc_va_start (stdarg, valist, nextarg)\n+\n+/* Implement `va_arg'.  */\n+#define EXPAND_BUILTIN_VA_ARG(valist, type) \\\n+  arc_va_arg (valist, type)"}]}