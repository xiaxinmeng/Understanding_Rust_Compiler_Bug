{"sha": "b1b46af04f50513e823845c5f782860814f1f40c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFiNDZhZjA0ZjUwNTEzZTgyMzg0NWM1Zjc4Mjg2MDgxNGYxZjQwYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-01-26T13:01:44Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-01-26T13:01:44Z"}, "message": "re PR lto/69254 (ICE in streamer_get_builtin_tree when using -fsanitize=shift on the compile side only)\n\n\tPR lto/69254\n\t* opts.h (parse_sanitizer_options): New prototype.\n\t* opts.c (sanitizer_opts): New array.\n\t(parse_sanitizer_options): New function.\n\t(common_handle_option): Use parse_sanitizer_options.\n\nFrom-SVN: r232826", "tree": {"sha": "dbe207737ca2c13c923868c98b54870935302103", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbe207737ca2c13c923868c98b54870935302103"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1b46af04f50513e823845c5f782860814f1f40c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1b46af04f50513e823845c5f782860814f1f40c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1b46af04f50513e823845c5f782860814f1f40c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1b46af04f50513e823845c5f782860814f1f40c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "81cd202e24b322ba4c592a4b99a6e773238c5b27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81cd202e24b322ba4c592a4b99a6e773238c5b27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81cd202e24b322ba4c592a4b99a6e773238c5b27"}], "stats": {"total": 253, "additions": 132, "deletions": 121}, "files": [{"sha": "e84acc123acaa6ee62716fdf119b645849cbff75", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1b46af04f50513e823845c5f782860814f1f40c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1b46af04f50513e823845c5f782860814f1f40c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b1b46af04f50513e823845c5f782860814f1f40c", "patch": "@@ -1,3 +1,11 @@\n+2016-01-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR lto/69254\n+\t* opts.h (parse_sanitizer_options): New prototype.\n+\t* opts.c (sanitizer_opts): New array.\n+\t(parse_sanitizer_options): New function.\n+\t(common_handle_option): Use parse_sanitizer_options.\n+\n 2016-01-26  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/68986"}, {"sha": "0a18c26d6e1e1d6279f849642e7147d891b97dff", "filename": "gcc/opts.c", "status": "modified", "additions": 122, "deletions": 121, "changes": 243, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1b46af04f50513e823845c5f782860814f1f40c/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1b46af04f50513e823845c5f782860814f1f40c/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=b1b46af04f50513e823845c5f782860814f1f40c", "patch": "@@ -1433,6 +1433,104 @@ enable_fdo_optimizations (struct gcc_options *opts,\n     opts->x_flag_tree_loop_distribute_patterns = value;\n }\n \n+/* -f{,no-}sanitize{,-recover}= suboptions.  */\n+static const struct sanitizer_opts_s\n+{\n+  const char *const name;\n+  unsigned int flag;\n+  size_t len;\n+} sanitizer_opts[] =\n+{\n+#define SANITIZER_OPT(name, flags) { #name, flags, sizeof #name - 1 }\n+  SANITIZER_OPT (address, SANITIZE_ADDRESS | SANITIZE_USER_ADDRESS),\n+  SANITIZER_OPT (kernel-address, SANITIZE_ADDRESS | SANITIZE_KERNEL_ADDRESS),\n+  SANITIZER_OPT (thread, SANITIZE_THREAD),\n+  SANITIZER_OPT (leak, SANITIZE_LEAK),\n+  SANITIZER_OPT (shift, SANITIZE_SHIFT),\n+  SANITIZER_OPT (integer-divide-by-zero, SANITIZE_DIVIDE),\n+  SANITIZER_OPT (undefined, SANITIZE_UNDEFINED),\n+  SANITIZER_OPT (unreachable, SANITIZE_UNREACHABLE),\n+  SANITIZER_OPT (vla-bound, SANITIZE_VLA),\n+  SANITIZER_OPT (return, SANITIZE_RETURN),\n+  SANITIZER_OPT (null, SANITIZE_NULL),\n+  SANITIZER_OPT (signed-integer-overflow, SANITIZE_SI_OVERFLOW),\n+  SANITIZER_OPT (bool, SANITIZE_BOOL),\n+  SANITIZER_OPT (enum, SANITIZE_ENUM),\n+  SANITIZER_OPT (float-divide-by-zero, SANITIZE_FLOAT_DIVIDE),\n+  SANITIZER_OPT (float-cast-overflow, SANITIZE_FLOAT_CAST),\n+  SANITIZER_OPT (bounds, SANITIZE_BOUNDS),\n+  SANITIZER_OPT (bounds-strict, SANITIZE_BOUNDS | SANITIZE_BOUNDS_STRICT),\n+  SANITIZER_OPT (alignment, SANITIZE_ALIGNMENT),\n+  SANITIZER_OPT (nonnull-attribute, SANITIZE_NONNULL_ATTRIBUTE),\n+  SANITIZER_OPT (returns-nonnull-attribute, SANITIZE_RETURNS_NONNULL_ATTRIBUTE),\n+  SANITIZER_OPT (object-size, SANITIZE_OBJECT_SIZE),\n+  SANITIZER_OPT (vptr, SANITIZE_VPTR),\n+  SANITIZER_OPT (all, ~0),\n+#undef SANITIZER_OPT\n+  { NULL, 0, 0 }\n+};\n+\n+/* Parse comma separated sanitizer suboptions from P for option SCODE,\n+   adjust previous FLAGS and return new ones.  If COMPLAIN is false,\n+   don't issue diagnostics.  */\n+\n+unsigned int\n+parse_sanitizer_options (const char *p, location_t loc, int scode,\n+\t\t\t unsigned int flags, int value, bool complain)\n+{\n+  enum opt_code code = (enum opt_code) scode;\n+  while (*p != 0)\n+    {\n+      size_t len, i;\n+      bool found = false;\n+      const char *comma = strchr (p, ',');\n+\n+      if (comma == NULL)\n+\tlen = strlen (p);\n+      else\n+\tlen = comma - p;\n+      if (len == 0)\n+\t{\n+\t  p = comma + 1;\n+\t  continue;\n+\t}\n+\n+      /* Check to see if the string matches an option class name.  */\n+      for (i = 0; sanitizer_opts[i].name != NULL; ++i)\n+\tif (len == sanitizer_opts[i].len\n+\t    && memcmp (p, sanitizer_opts[i].name, len) == 0)\n+\t  {\n+\t    /* Handle both -fsanitize and -fno-sanitize cases.  */\n+\t    if (value && sanitizer_opts[i].flag == ~0U)\n+\t      {\n+\t\tif (code == OPT_fsanitize_)\n+\t\t  {\n+\t\t    if (complain)\n+\t\t      error_at (loc, \"-fsanitize=all option is not valid\");\n+\t\t  }\n+\t\telse\n+\t\t  flags |= ~(SANITIZE_USER_ADDRESS | SANITIZE_THREAD\n+\t\t\t     | SANITIZE_LEAK);\n+\t      }\n+\t    else if (value)\n+\t      flags |= sanitizer_opts[i].flag;\n+\t    else\n+\t      flags &= ~sanitizer_opts[i].flag;\n+\t    found = true;\n+\t    break;\n+\t  }\n+\n+      if (! found && complain)\n+\terror_at (loc, \"unrecognized argument to -fsanitize%s= option: %q.*s\",\n+\t\t  code == OPT_fsanitize_ ? \"\" : \"-recover\", (int) len, p);\n+\n+      if (comma == NULL)\n+\tbreak;\n+      p = comma + 1;\n+    }\n+  return flags;\n+}\n+\n /* Handle target- and language-independent options.  Return zero to\n    generate an \"unknown option\" message.  Only options that need\n    extra handling need to be listed here; if you simply want\n@@ -1626,129 +1724,32 @@ common_handle_option (struct gcc_options *opts,\n       break;\n \n     case OPT_fsanitize_:\n-    case OPT_fsanitize_recover_:\n-      {\n-\tconst char *p = arg;\n-\tunsigned int *flag\n-\t  = code == OPT_fsanitize_ ? &opts->x_flag_sanitize\n-\t  : &opts->x_flag_sanitize_recover;\n-\twhile (*p != 0)\n-\t  {\n-\t    static const struct\n-\t    {\n-\t      const char *const name;\n-\t      unsigned int flag;\n-\t      size_t len;\n-\t    } spec[] =\n-\t    {\n-\t      { \"address\", SANITIZE_ADDRESS | SANITIZE_USER_ADDRESS,\n-\t\tsizeof \"address\" - 1 },\n-\t      { \"kernel-address\", SANITIZE_ADDRESS | SANITIZE_KERNEL_ADDRESS,\n-\t\tsizeof \"kernel-address\" - 1 },\n-\t      { \"thread\", SANITIZE_THREAD, sizeof \"thread\" - 1 },\n-\t      { \"leak\", SANITIZE_LEAK, sizeof \"leak\" - 1 },\n-\t      { \"shift\", SANITIZE_SHIFT, sizeof \"shift\" - 1 },\n-\t      { \"integer-divide-by-zero\", SANITIZE_DIVIDE,\n-\t\tsizeof \"integer-divide-by-zero\" - 1 },\n-\t      { \"undefined\", SANITIZE_UNDEFINED, sizeof \"undefined\" - 1 },\n-\t      { \"unreachable\", SANITIZE_UNREACHABLE,\n-\t\tsizeof \"unreachable\" - 1 },\n-\t      { \"vla-bound\", SANITIZE_VLA, sizeof \"vla-bound\" - 1 },\n-\t      { \"return\", SANITIZE_RETURN, sizeof \"return\" - 1 },\n-\t      { \"null\", SANITIZE_NULL, sizeof \"null\" - 1 },\n-\t      { \"signed-integer-overflow\", SANITIZE_SI_OVERFLOW,\n-\t\tsizeof \"signed-integer-overflow\" -1 },\n-\t      { \"bool\", SANITIZE_BOOL, sizeof \"bool\" - 1 },\n-\t      { \"enum\", SANITIZE_ENUM, sizeof \"enum\" - 1 },\n-\t      { \"float-divide-by-zero\", SANITIZE_FLOAT_DIVIDE,\n-\t\tsizeof \"float-divide-by-zero\" - 1 },\n-\t      { \"float-cast-overflow\", SANITIZE_FLOAT_CAST,\n-\t\tsizeof \"float-cast-overflow\" - 1 },\n-\t      { \"bounds\", SANITIZE_BOUNDS, sizeof \"bounds\" - 1 },\n-\t      { \"bounds-strict\", SANITIZE_BOUNDS | SANITIZE_BOUNDS_STRICT,\n-\t\tsizeof \"bounds-strict\" - 1 },\n-\t      { \"alignment\", SANITIZE_ALIGNMENT, sizeof \"alignment\" - 1 },\n-\t      { \"nonnull-attribute\", SANITIZE_NONNULL_ATTRIBUTE,\n-\t\tsizeof \"nonnull-attribute\" - 1 },\n-\t      { \"returns-nonnull-attribute\",\n-\t\tSANITIZE_RETURNS_NONNULL_ATTRIBUTE,\n-\t\tsizeof \"returns-nonnull-attribute\" - 1 },\n-\t      { \"object-size\", SANITIZE_OBJECT_SIZE,\n-\t\tsizeof \"object-size\" - 1 },\n-\t      { \"vptr\", SANITIZE_VPTR, sizeof \"vptr\" - 1 },\n-\t      { \"all\", ~0, sizeof \"all\" - 1 },\n-\t      { NULL, 0, 0 }\n-\t    };\n-\t    const char *comma;\n-\t    size_t len, i;\n-\t    bool found = false;\n-\n-\t    comma = strchr (p, ',');\n-\t    if (comma == NULL)\n-\t      len = strlen (p);\n-\t    else\n-\t      len = comma - p;\n-\t    if (len == 0)\n-\t      {\n-\t\tp = comma + 1;\n-\t\tcontinue;\n-\t      }\n-\n-\t    /* Check to see if the string matches an option class name.  */\n-\t    for (i = 0; spec[i].name != NULL; ++i)\n-\t      if (len == spec[i].len\n-\t\t  && memcmp (p, spec[i].name, len) == 0)\n-\t\t{\n-\t\t  /* Handle both -fsanitize and -fno-sanitize cases.  */\n-\t\t  if (value && spec[i].flag == ~0U)\n-\t\t    {\n-\t\t      if (code == OPT_fsanitize_)\n-\t\t\terror_at (loc, \"-fsanitize=all option is not valid\");\n-\t\t      else\n-\t\t\t*flag |= ~(SANITIZE_USER_ADDRESS | SANITIZE_THREAD\n-\t\t\t\t   | SANITIZE_LEAK);\n-\t\t    }\n-\t\t  else if (value)\n-\t\t    *flag |= spec[i].flag;\n-\t\t  else\n-\t\t    *flag &= ~spec[i].flag;\n-\t\t  found = true;\n-\t\t  break;\n-\t\t}\n+      opts->x_flag_sanitize\n+\t= parse_sanitizer_options (arg, loc, code,\n+\t\t\t\t   opts->x_flag_sanitize, value, true);\n \n-\t    if (! found)\n-\t      error_at (loc,\n-\t\t\t\"unrecognized argument to -fsanitize%s= option: %q.*s\",\n-\t\t\tcode == OPT_fsanitize_ ? \"\" : \"-recover\", (int) len, p);\n-\n-\t    if (comma == NULL)\n-\t      break;\n-\t    p = comma + 1;\n-\t  }\n-\n-\tif (code != OPT_fsanitize_)\n-\t  break;\n-\n-\t/* Kernel ASan implies normal ASan but does not yet support\n-\t   all features.  */\n-\tif (opts->x_flag_sanitize & SANITIZE_KERNEL_ADDRESS)\n-\t  {\n-\t    maybe_set_param_value (PARAM_ASAN_INSTRUMENTATION_WITH_CALL_THRESHOLD, 0,\n-\t\t\t\t   opts->x_param_values,\n-\t\t\t\t   opts_set->x_param_values);\n-\t    maybe_set_param_value (PARAM_ASAN_GLOBALS, 0,\n-\t\t\t\t   opts->x_param_values,\n-\t\t\t\t   opts_set->x_param_values);\n-\t    maybe_set_param_value (PARAM_ASAN_STACK, 0,\n-\t\t\t\t   opts->x_param_values,\n-\t\t\t\t   opts_set->x_param_values);\n-\t    maybe_set_param_value (PARAM_ASAN_USE_AFTER_RETURN, 0,\n-\t\t\t\t   opts->x_param_values,\n-\t\t\t\t   opts_set->x_param_values);\n-\t  }\n+      /* Kernel ASan implies normal ASan but does not yet support\n+\t all features.  */\n+      if (opts->x_flag_sanitize & SANITIZE_KERNEL_ADDRESS)\n+\t{\n+\t  maybe_set_param_value (PARAM_ASAN_INSTRUMENTATION_WITH_CALL_THRESHOLD,\n+\t\t\t\t 0, opts->x_param_values,\n+\t\t\t\t opts_set->x_param_values);\n+\t  maybe_set_param_value (PARAM_ASAN_GLOBALS, 0, opts->x_param_values,\n+\t\t\t\t opts_set->x_param_values);\n+\t  maybe_set_param_value (PARAM_ASAN_STACK, 0, opts->x_param_values,\n+\t\t\t\t opts_set->x_param_values);\n+\t  maybe_set_param_value (PARAM_ASAN_USE_AFTER_RETURN, 0,\n+\t\t\t\t opts->x_param_values,\n+\t\t\t\t opts_set->x_param_values);\n+\t}\n+      break;\n \n-\tbreak;\n-      }\n+    case OPT_fsanitize_recover_:\n+      opts->x_flag_sanitize_recover\n+\t= parse_sanitizer_options (arg, loc, code,\n+\t\t\t\t   opts->x_flag_sanitize_recover, value, true);\n+      break;\n \n     case OPT_fasan_shadow_offset_:\n       /* Deferred.  */"}, {"sha": "6e6dbead94693b3902100a97ccd66130bf852626", "filename": "gcc/opts.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1b46af04f50513e823845c5f782860814f1f40c/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1b46af04f50513e823845c5f782860814f1f40c/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=b1b46af04f50513e823845c5f782860814f1f40c", "patch": "@@ -372,6 +372,8 @@ extern void control_warning_option (unsigned int opt_index, int kind,\n extern char *write_langs (unsigned int mask);\n extern void print_ignored_options (void);\n extern void handle_common_deferred_options (void);\n+unsigned int parse_sanitizer_options (const char *, location_t, int,\n+\t\t\t\t      unsigned int, int, bool);\n extern bool common_handle_option (struct gcc_options *opts,\n \t\t\t\t  struct gcc_options *opts_set,\n \t\t\t\t  const struct cl_decoded_option *decoded,"}]}