{"sha": "d9b2742a3d4bfc03500e14e4e9bcc7ae9275a079", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDliMjc0MmEzZDRiZmMwMzUwMGUxNGU0ZTliY2M3YWU5Mjc1YTA3OQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-03-22T03:28:39Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-03-22T03:28:39Z"}, "message": "c-common.c: Include intl.h.\n\n\t* c-common.c: Include intl.h.\n\t(shadow_warning): Rewrite to allow better diagnostic translations.\n\t* c-common.h: Update prototype of shadow_warning.  Declare sw_kind enum.\n\t* c-decl.c (warn_if_shadowing): Update calls to shadow_warning;\n\tuse it throughout.\n\t* Makefile.in (c-common.o): Add intl.h.\ncp:\n\t* decl.c: Update calls to shadow_warning.\npo:\n\t* gcc.pot: Regenerate.\n\nFrom-SVN: r64699", "tree": {"sha": "f2f70c0a43139b7fcdfc3aeacf5ad628d08890c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2f70c0a43139b7fcdfc3aeacf5ad628d08890c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9b2742a3d4bfc03500e14e4e9bcc7ae9275a079", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9b2742a3d4bfc03500e14e4e9bcc7ae9275a079", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9b2742a3d4bfc03500e14e4e9bcc7ae9275a079", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9b2742a3d4bfc03500e14e4e9bcc7ae9275a079/comments", "author": null, "committer": null, "parents": [{"sha": "bea41393885329698043d1b7a22cb3e7a8791031", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bea41393885329698043d1b7a22cb3e7a8791031", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bea41393885329698043d1b7a22cb3e7a8791031"}], "stats": {"total": 8343, "additions": 4359, "deletions": 3984}, "files": [{"sha": "7e8c2a6bbf38076bd48f9376b7703103c2bbb2a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9b2742a3d4bfc03500e14e4e9bcc7ae9275a079/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9b2742a3d4bfc03500e14e4e9bcc7ae9275a079/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9b2742a3d4bfc03500e14e4e9bcc7ae9275a079", "patch": "@@ -1,3 +1,12 @@\n+2003-03-21  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* c-common.c: Include intl.h.\n+\t(shadow_warning): Rewrite to allow better diagnostic translations.\n+\t* c-common.h: Update prototype of shadow_warning.  Declare sw_kind enum.\n+\t* c-decl.c (warn_if_shadowing): Update calls to shadow_warning;\n+\tuse it throughout.\n+\t* Makefile.in (c-common.o): Add intl.h.\n+\n 2003-03-21  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* config.gcc: Remove 'float_format'."}, {"sha": "d4f6cc938949b86e75d2be7637764b09a9337844", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9b2742a3d4bfc03500e14e4e9bcc7ae9275a079/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9b2742a3d4bfc03500e14e4e9bcc7ae9275a079/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=d9b2742a3d4bfc03500e14e4e9bcc7ae9275a079", "patch": "@@ -1302,7 +1302,7 @@ tlink.o: tlink.c $(DEMANGLE_H) $(HASHTAB_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h\n # A file used by all variants of C.\n \n c-common.o : c-common.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n-\t$(OBSTACK_H) $(C_COMMON_H) flags.h toplev.h output.h c-pragma.h \\\n+\t$(OBSTACK_H) $(C_COMMON_H) flags.h toplev.h output.h c-pragma.h intl.h \\\n \t$(GGC_H) $(EXPR_H) $(TM_P_H) builtin-types.def builtin-attrs.def \\\n \tdiagnostic.h gt-c-common.h langhooks.h varray.h $(RTL_H) $(TARGET_H)\n c-pretty-print.o : c-pretty-print.c c-pretty-print.h pretty-print.h \\"}, {"sha": "ee4549c61e8952c5d66656419eca1163d243936e", "filename": "gcc/c-common.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9b2742a3d4bfc03500e14e4e9bcc7ae9275a079/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9b2742a3d4bfc03500e14e4e9bcc7ae9275a079/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=d9b2742a3d4bfc03500e14e4e9bcc7ae9275a079", "patch": "@@ -23,6 +23,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n+#include \"intl.h\"\n #include \"tree.h\"\n #include \"flags.h\"\n #include \"toplev.h\"\n@@ -4807,14 +4808,23 @@ c_common_insert_default_attributes (decl)\n #undef DEF_FN_ATTR\n }\n \n-/* Output a -Wshadow warning MSGID about NAME, an IDENTIFIER_NODE, and\n-   additionally give the location of the previous declaration DECL.  */\n+/* Output a -Wshadow warning MSGCODE about NAME, and give the location\n+   of the previous declaration DECL.  MANDATORY says whether this is a\n+   mandatory warning (i.e. use pedwarn).  */\n void\n-shadow_warning (msgid, name, decl)\n-     const char *msgid;\n-     tree name, decl;\n+shadow_warning (msgcode, mandatory, name, decl)\n+     enum sw_kind msgcode;\n+     int mandatory;  /* really bool */\n+     const char *name;\n+     tree decl;\n {\n-  warning (\"declaration of `%s' shadows %s\", IDENTIFIER_POINTER (name), msgid);\n+  static const char *const msgs[] = {\n+    /* SW_PARAM  */ N_(\"declaration of \\\"%s\\\" shadows a parameter\"),\n+    /* SW_LOCAL  */ N_(\"declaration of \\\"%s\\\" shadows a previous local\"),\n+    /* SW_GLOBAL */ N_(\"declaration of \\\"%s\\\" shadows a global declaration\")\n+  };\n+\n+  (mandatory ? pedwarn : warning) (msgs[msgcode], name);\n   warning_with_file_and_line (DECL_SOURCE_FILE (decl),\n \t\t\t      DECL_SOURCE_LINE (decl),\n \t\t\t      \"shadowed declaration is here\");"}, {"sha": "20c7c394aa0e9a4025b55b397e7307f64022836b", "filename": "gcc/c-common.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9b2742a3d4bfc03500e14e4e9bcc7ae9275a079/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9b2742a3d4bfc03500e14e4e9bcc7ae9275a079/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=d9b2742a3d4bfc03500e14e4e9bcc7ae9275a079", "patch": "@@ -332,12 +332,13 @@ extern tree walk_stmt_tree\t\t\tPARAMS ((tree *,\n \t\t\t\t\t\t\t void *));\n extern void prep_stmt                           PARAMS ((tree));\n extern void expand_stmt                         PARAMS ((tree));\n-extern void shadow_warning\t\t\tPARAMS ((const char *,\n-\t\t\t\t\t\t\t tree, tree));\n extern tree c_begin_if_stmt\t\t\tPARAMS ((void));\n extern tree c_begin_while_stmt\t\t\tPARAMS ((void));\n extern void c_finish_while_stmt_cond\t\tPARAMS ((tree, tree));\n \n+enum sw_kind { SW_PARAM = 0, SW_LOCAL, SW_GLOBAL };\n+extern void shadow_warning\t\t\tPARAMS ((enum sw_kind, int,\n+\t\t\t\t\t\t\t const char *, tree));\n \n /* Extra information associated with a DECL.  Other C dialects extend\n    this structure in various ways.  The C front-end only uses this"}, {"sha": "52b42a18c06b3323700c0fd3e50746b62d5b0ce1", "filename": "gcc/c-decl.c", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9b2742a3d4bfc03500e14e4e9bcc7ae9275a079/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9b2742a3d4bfc03500e14e4e9bcc7ae9275a079/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=d9b2742a3d4bfc03500e14e4e9bcc7ae9275a079", "patch": "@@ -1599,12 +1599,14 @@ static void\n warn_if_shadowing (x, oldlocal)\n      tree x, oldlocal;\n {\n-  tree name;\n+  tree sym;\n+  const char *name;\n \n   if (DECL_EXTERNAL (x))\n     return;\n \n-  name = DECL_NAME (x);\n+  sym = DECL_NAME (x);\n+  name = IDENTIFIER_POINTER (sym);\n \n   /* Warn if shadowing an argument at the top level of the body.  */\n   if (oldlocal != 0\n@@ -1615,14 +1617,7 @@ warn_if_shadowing (x, oldlocal)\n       /* Check that the decl being shadowed\n \t comes from the parm level, one level up.  */\n       && chain_member (oldlocal, current_binding_level->level_chain->names))\n-    {\n-      if (TREE_CODE (oldlocal) == PARM_DECL)\n-\tpedwarn (\"declaration of `%s' shadows a parameter\",\n-\t\t IDENTIFIER_POINTER (name));\n-      else\n-\tpedwarn (\"declaration of `%s' shadows a symbol from the parameter list\",\n-\t\t IDENTIFIER_POINTER (name));\n-    }\n+    shadow_warning (SW_PARAM, true, name, oldlocal);\n   /* Maybe warn if shadowing something else.  */\n   else if (warn_shadow\n \t   /* No shadow warnings for internally generated vars.  */\n@@ -1641,14 +1636,14 @@ warn_if_shadowing (x, oldlocal)\n       else if (oldlocal)\n \t{\n \t  if (TREE_CODE (oldlocal) == PARM_DECL)\n-\t    shadow_warning (\"a parameter\", name, oldlocal);\n+\t    shadow_warning (SW_PARAM, false, name, oldlocal);\n \t  else\n-\t    shadow_warning (\"a previous local\", name, oldlocal);\n+\t    shadow_warning (SW_LOCAL, false, name, oldlocal);\n \t}\n-      else if (IDENTIFIER_GLOBAL_VALUE (name) != 0\n-\t       && IDENTIFIER_GLOBAL_VALUE (name) != error_mark_node)\n-\tshadow_warning (\"a global declaration\", name,\n-\t\t\tIDENTIFIER_GLOBAL_VALUE (name));\n+      else if (IDENTIFIER_GLOBAL_VALUE (sym) != 0\n+\t       && IDENTIFIER_GLOBAL_VALUE (sym) != error_mark_node)\n+\tshadow_warning (SW_GLOBAL, false, name,\n+\t\t\tIDENTIFIER_GLOBAL_VALUE (sym));\n     }\n }\n "}, {"sha": "616078ab272d8b603c8d864b2b7c155e8a57ccd2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9b2742a3d4bfc03500e14e4e9bcc7ae9275a079/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9b2742a3d4bfc03500e14e4e9bcc7ae9275a079/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d9b2742a3d4bfc03500e14e4e9bcc7ae9275a079", "patch": "@@ -1,3 +1,7 @@\n+2003-03-21  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* decl.c: Update calls to shadow_warning.\n+\n 2003-03-21  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/9898\n@@ -22,8 +26,8 @@\n \t(init_rtti_processing): initialize unemitted_tinfo_decls varray.\n \t(get_tinfo_decls): push new tinfo decl on unemitted_tinfo_decls.\n \t(emit_tinfo_decl): remove unused second parameter, add assertion\n-\tthat decl hasn't already been emitted.\t\n-\t\n+\tthat decl hasn't already been emitted.\n+\n 2003-03-19  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* dump.c (cp_dump_tree), cp-tree.h (cp_dump_tree): Change return\n@@ -47,7 +51,7 @@\n 2003-03-17  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/10091\n-\t* typeck.c (build_class_member_access_expr): Compare \n+\t* typeck.c (build_class_member_access_expr): Compare\n \tTYPE_MAIN_VARIANTs.\n \n 2003-03-17  Mark Mitchell  <mark@codesourcery.com>\n@@ -493,14 +497,14 @@\n \n 2003-03-04  Gabriel Dos Reis <gdr@integrable-solutions.net>\n \n-        * cp-tree.h (cxx_saved_binding): Declare.\n-        (struct saved_scope): Adjust type of field 'old_binding'.\n-        * decl.c (cxx_saved_binding_make): New macro.\n-        (struct cxx_saved_binding): Define.\n-        (store_bindings): Adjust prototype.  Use cxx_saved_binding to save\n-        C++ bindings.\n-        (maybe_push_to_top_level): Adjust local variable type.\n-        (pop_from_top_level): Likewise.\n+\t* cp-tree.h (cxx_saved_binding): Declare.\n+\t(struct saved_scope): Adjust type of field 'old_binding'.\n+\t* decl.c (cxx_saved_binding_make): New macro.\n+\t(struct cxx_saved_binding): Define.\n+\t(store_bindings): Adjust prototype.  Use cxx_saved_binding to save\n+\tC++ bindings.\n+\t(maybe_push_to_top_level): Adjust local variable type.\n+\t(pop_from_top_level): Likewise.\n \n 2003-03-04  Tom Tromey  <tromey@redhat.com>\n \n@@ -599,9 +603,9 @@\n \n 2003-02-28  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * parser.c (cp_parser_init_declarator): Revert opaque\n-        vector_opaque_p change.\n-        Do not include target.h.\n+\t* parser.c (cp_parser_init_declarator): Revert opaque\n+\tvector_opaque_p change.\n+\tDo not include target.h.\n \n 2003-02-28  Mark Mitchell  <mark@codesourcery.com>\n \n@@ -905,7 +909,7 @@\n \n 2003-02-14   Andrew Pinski <pinskia@physics.uc.edu>\n \n-        * decl.c: (define_label): Fix warning for return 0 instead of NULL.\n+\t* decl.c: (define_label): Fix warning for return 0 instead of NULL.\n \n 2003-02-13  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n@@ -1109,7 +1113,7 @@\n \n 2003-01-29  Fariborz Jahanian  <fjahanian@apple.com>\n \n-        * pt.c (last_pending_template) Declare GTY().\n+\t* pt.c (last_pending_template) Declare GTY().\n \n 2003-01-29  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n@@ -1234,7 +1238,7 @@\n \tPR c++/9285\n \tPR c++/9294\n \t* parser.c (cp_parser_simple_declaration): Return quickly when\n-        encountering errors.\n+\tencountering errors.\n \n 2003-01-21  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n@@ -1508,10 +1512,10 @@\n \n 2003-01-09  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n-        * cfns.gperf: ANSIfy function declarations.\n-        * cfns.h: Regenerate.\n-        * cp-tree.h: ANSIfy function declarations.\n-        * parser.c: ANSIfy function declarations & definitions.\n+\t* cfns.gperf: ANSIfy function declarations.\n+\t* cfns.h: Regenerate.\n+\t* cp-tree.h: ANSIfy function declarations.\n+\t* parser.c: ANSIfy function declarations & definitions.\n \n \t* decl.c (bad_specifiers): Fix parameter order error I introduced.\n "}, {"sha": "99898d02b95c92ce89f697feccb7d2117164f48d", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9b2742a3d4bfc03500e14e4e9bcc7ae9275a079/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9b2742a3d4bfc03500e14e4e9bcc7ae9275a079/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d9b2742a3d4bfc03500e14e4e9bcc7ae9275a079", "patch": "@@ -4123,7 +4123,8 @@ pushdecl (tree x)\n \t\t}\n \n \t      if (warn_shadow && !err)\n-\t\tshadow_warning (\"a parameter\", name, oldlocal);\n+\t\tshadow_warning (SW_PARAM, false,\n+\t\t\t\tIDENTIFIER_POINTER (name), oldlocal);\n \t    }\n \n \t  /* Maybe warn if shadowing something else.  */\n@@ -4140,11 +4141,13 @@ pushdecl (tree x)\n \t\t\t    IDENTIFIER_POINTER (name));\n \t      else if (oldlocal != NULL_TREE\n \t\t       && TREE_CODE (oldlocal) == VAR_DECL)\n-\t\tshadow_warning (\"a previous local\", name, oldlocal);\n+\t\tshadow_warning (SW_LOCAL, false,\n+\t\t\t\tIDENTIFIER_POINTER (name), oldlocal);\n \t      else if (oldglobal != NULL_TREE\n \t\t       && TREE_CODE (oldglobal) == VAR_DECL)\n \t\t/* XXX shadow warnings in outer-more namespaces */\n-\t\tshadow_warning (\"a global declaration\", name, oldglobal);\n+\t\tshadow_warning (SW_GLOBAL, false,\n+\t\t\t\tIDENTIFIER_POINTER (name), oldglobal);\n \t    }\n \t}\n "}, {"sha": "18f879f097beb0d72252c11c2cf41a7f1cd7c6d8", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9b2742a3d4bfc03500e14e4e9bcc7ae9275a079/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9b2742a3d4bfc03500e14e4e9bcc7ae9275a079/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=d9b2742a3d4bfc03500e14e4e9bcc7ae9275a079", "patch": "@@ -1,3 +1,7 @@\n+2003-03-21  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* gcc.pot: Regenerate.\n+\n 2003-02-04  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* be.po, de.po: New files.\n@@ -15,7 +19,7 @@\n \n \t* tr.po, es.po, fr.po: Update to version for 20020415\n \tsnapshot.\n-\t\n+\n 2002-04-23  Philipp Thomas  <pthomas@suse.de>\n \n \t* gcc.pot: Regenerate."}, {"sha": "b14c3b09ba8636c3a28cb4d0d90f535c378cb6ef", "filename": "gcc/po/gcc.pot", "status": "modified", "additions": 4283, "deletions": 3934, "changes": 8217, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9b2742a3d4bfc03500e14e4e9bcc7ae9275a079/gcc%2Fpo%2Fgcc.pot", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9b2742a3d4bfc03500e14e4e9bcc7ae9275a079/gcc%2Fpo%2Fgcc.pot", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2Fgcc.pot?ref=d9b2742a3d4bfc03500e14e4e9bcc7ae9275a079"}]}