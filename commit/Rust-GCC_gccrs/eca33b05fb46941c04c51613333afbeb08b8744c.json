{"sha": "eca33b05fb46941c04c51613333afbeb08b8744c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNhMzNiMDVmYjQ2OTQxYzA0YzUxNjEzMzMzYWZiZWIwOGI4NzQ0Yw==", "commit": {"author": {"name": "Kresten Krab Thorup", "email": "krab@gcc.gnu.org", "date": "1993-04-12T15:43:31Z"}, "committer": {"name": "Kresten Krab Thorup", "email": "krab@gcc.gnu.org", "date": "1993-04-12T15:43:31Z"}, "message": "Stripped anything added by\nkane@cc.purdue.edu which is not considered \"minor changes\"\n\nFrom-SVN: r4092", "tree": {"sha": "c41d97216f196eec8c1c0dcf5ec1db41e7fbed8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c41d97216f196eec8c1c0dcf5ec1db41e7fbed8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eca33b05fb46941c04c51613333afbeb08b8744c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eca33b05fb46941c04c51613333afbeb08b8744c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eca33b05fb46941c04c51613333afbeb08b8744c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eca33b05fb46941c04c51613333afbeb08b8744c/comments", "author": null, "committer": null, "parents": [{"sha": "ab65ae3cec54f86b6155185ecedc11016adb7190", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab65ae3cec54f86b6155185ecedc11016adb7190", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab65ae3cec54f86b6155185ecedc11016adb7190"}], "stats": {"total": 202, "additions": 0, "deletions": 202}, "files": [{"sha": "e8b6c8af27ce446ad3b3058c7d328683cda53e30", "filename": "gcc/objc/objc-api.h", "status": "modified", "additions": 0, "deletions": 202, "changes": 202, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca33b05fb46941c04c51613333afbeb08b8744c/gcc%2Fobjc%2Fobjc-api.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca33b05fb46941c04c51613333afbeb08b8744c/gcc%2Fobjc%2Fobjc-api.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-api.h?ref=eca33b05fb46941c04c51613333afbeb08b8744c", "patch": "@@ -31,13 +31,6 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n static const ARGSIZE = 96;\t\t/* for `method_get_argsize()' */\n \n-/*\n-** Points to the function that the runtime system calls to handle\n-** an error.  By default, it prints formatted error messages to the\n-** standard error stream and calls abort to produce a core file.\n-** The function is guaranteed to be passed a valid object and a\n-** non-NULL format string.\n-*/\n extern void (*_objc_error)(id object, const char *format, va_list args);\n \n /*\n@@ -48,118 +41,30 @@ extern void (*_objc_error)(id object, const char *format, va_list args);\n */\n extern Class_t (*_objc_lookup_class)(const char *name);\n \n-/*\n-** Points to the function that the runtime system calls to allocate\n-** memory for new instances.  Called through class_create_instance(),\n-** this function should return a valid block of memory of at least\n-** class_get_instance_size() bytes, or nil upon failure.  The\n-** function is guaranteed to be passed a valid class object.\n-*/\n extern id (*_objc_object_alloc)(Class_t class);\n \n-/*\n-** Points to the function that the runtime system calls to create\n-** an exact copy of an object.  Called through object_copy(), this\n-** function should return a new instance of object's class created\n-** by class_create_instance() which is bit-identical to object, or\n-** nil upon failure.  The function is guaranteed to be passed a\n-** valid instance object.\n-*/\n extern id (*_objc_object_copy)(id object);\n \n-/*\n-** Points to the function that the runtime system calls to free\n-** instances.  Called through object_dispose(), this function\n-** should free the memory pointed to by object and return nil.\n-** This function is not responsible for freeing memory pointed\n-** to by any of the object's instance variables.  The function\n-** is guaranteed to be passed a valid instance object.\n-*/\n extern id (*_objc_object_dispose)(id object);\n \n-/*\n-** Searches for a class method specified by aSel, starting with the\n-** metaclass class and proceeding up the class hierarchy, until either\n-** the method is found or the root class has been examined.  Returns\n-** a pointer to the method's Method structure if found.  Returns the\n-** value METHOD_NULL if the method is not found, class is not a\n-** metaclass object, or aSel is not a valid selector.\n-*/\n Method_t class_get_class_method(MetaClass_t class, SEL aSel);\n \n-/*\n-** Searches for an instance method specified by aSel, starting with\n-** the class class and proceeding up the class hierarchy, until either\n-** the method is found or the root class has been examined.  Returns\n-** a pointer to the method's Method structure if found.  Returns the\n-** value METHOD_NULL if the method is not found, class is not a class\n-** object, or aSel is not a valid selector.\n-*/\n Method_t class_get_instance_method(Class_t class, SEL aSel);\n \n-/*\n-** Causes impostor to pose as its superclass.  Messages sent to the\n-** superclass will actually be sent to the posing class.  Instance\n-** variables may not be declared in the posing class.  The posing\n-** class can add new methods to the class or override existing methods\n-** in the superclass.  Returns non-nil on success.  Returns nil if\n-** either of impostor or superclass are not class objects, impostor is\n-** not a subclass of superclass, or upon some other error.\n-*/\n Class_t class_pose_as(Class_t impostor, Class_t superclass);\n \n-/*\n-** Returns the class object for the class named name.  If name does not\n-** identify a known class, the hook _objc_lookup_class is called.  If\n-** this fails, an error message is issued and the system aborts.\n-*/\n Class_t objc_get_class(const char *name);\n \n-/*\n-** Returns the class object for the class named name.  If name does not\n-** identify a known class, the hook _objc_lookup_class is called.  If\n-** this fails, nil is returned.\n-*/\n Class_t objc_lookup_class(const char *name);\n \n-/*\n-** Returns the method name associated with selector, or NULL\n-** if selector is not defined.\n-*/\n const char *sel_get_name(SEL selector);\n \n-/*\n-** Returns the selector associated with the method name name.  If name\n-** has not been defined or name is NULL, 0 is returned.\n-*/\n SEL sel_get_uid(const char *name);\n \n-/*\n-** Registers a selector for name and returns the new selector.  If\n-** name is NULL or the empty string (\"\"), 0 is returned.\n-*/\n SEL sel_register_name(const char *name);\n \n-/*\n-** Indicate if aSel is a valid selector.  This is not a safe\n-** operation, and it should really never be nessecary to use.\n-*/\n BOOL sel_is_mapped (SEL aSel);\n \n-/*******************************************************************/\n-/*                                                                 */\n-/* Internal __inline functions                                     */\n-/*                                                                 */\n-/*******************************************************************/\n-\n-/*\n-** Allocates memory for a new object of class class by calling the\n-** function specified by the variable _objc_object_alloc if non-zero,\n-** otherwise uses a default method.  Then, initializes the object's\n-** isa instance variable to class, and returns the new object.\n-** Returns nil if the memory could not be allocated or class is not\n-** a class object.\n-*/\n extern inline id\n class_create_instance(Class_t class)\n {\n@@ -173,128 +78,70 @@ class_create_instance(Class_t class)\n   return new;\n }\n \n-/*\n-** Returns name of the class class or empty string if class is not\n-** a class object.  If class is Nil, the string \"Nil\" is returned.\n-*/\n static inline const char *\n class_get_class_name(Class_t class)\n {\n   return CLS_ISCLASS(class)?class->name:((class==Nil)?\"Nil\":0);\n }\n \n-/*\n-** Returns the size of an instance of class class in bytes, or 0 if\n-** class is not a class.  The size of an instance is at least 4 bytes.\n-*/\n static inline long\n class_get_instance_size(Class_t class)\n {\n   return CLS_ISCLASS(class)?class->instance_size:0;\n }\n \n-/*\n-** Returns a pointer to class's metaclass, or Nil if class is not a\n-** class.\n-*/\n static inline MetaClass_t\n class_get_meta_class(Class_t class)\n {\n   return CLS_ISCLASS(class)?class->class_pointer:Nil;\n }\n \n-/*\n-** Returns a pointer to class's superclass, or Nil if class is not a\n-** class.  Note that the superclass of Object is Nil.\n-*/\n static inline Class_t\n class_get_super_class(Class_t class)\n {\n   return CLS_ISCLASS(class)?class->super_class:Nil;\n }\n \n-/*\n-** Returns the version number for the class, or -1 if class is not a\n-** class.\n-*/\n static inline int\n class_get_version(Class_t class)\n {\n   return CLS_ISCLASS(class)?class->version:-1;\n }\n \n-/*\n-** Returns YES if class is a class, or NO if not.\n-*/\n static inline BOOL\n class_is_class(Class_t class)\n {\n   return CLS_ISCLASS(class);\n }\n \n-/*\n-** Returns YES if class is a metaclass, or NO if not.\n-*/\n static inline BOOL\n class_is_meta_class(Class_t class)\n {\n   return CLS_ISMETA(class);\n }\n \n \n-/*\n-** Sets the version number of class class.  Does nothing if class is\n-** not a class.\n-*/\n static inline void\n class_set_version(Class_t class, long version)\n {\n   if (CLS_ISCLASS(class))\n     class->version = version;\n }\n \n-/*\n-** Returns the size in bytes of the argument frame to a method.  Since\n-** at least two parameters (self and _cmd) are sent to each method, this\n-** value will be at least 8.  If method is not a valid method, 0 is\n-** returned.\n-** \n-** Currently, the frame size info is only reliable on a NeXT, so until\n-** we get this fixed, we'll use a value which is most possibly large\n-** enough. You can possibly reduce this value (96) on anything but a\n-** Sparc if you don't return structs from the methods forwarded to.\n-*/\n static inline unsigned int\n method_get_argsize(Method_t method)\n {\n   return ARGSIZE;\t\t/* This was a magic number (96)... */\n }\n \n-/*\n-** Returns a pointer to the implementation of method method.  If method\n-** is not a method, NULL is returned.\n-*/\n static inline IMP\n method_get_imp(Method_t method)\n {\n   return (method!=METHOD_NULL)?method->method_imp:(IMP)0;\n }\n \n-/*\n-** Returns the implementation (pointer to function) of the method\n-** identified by a (class, selector) pair.  Use this, and *not* \n-** objc_msg_lookup, since objc_msg_lookup may eventually return a\n-** pointer to an internal function which does lazy initialization...\n-*/\n IMP get_imp (Class_t class, SEL sel);\n \n-/*\n-** Creates a new instance object that's an exact copy of object by\n-** calling the function pointed to by the variable _objc_object_copy if\n-** non-zero, otherwise uses a default method.  Returns the new object.\n-** Returns nil if object is not an instance object, memory for the new\n-** object could not be allocated, or some other error occurred.\n-*/\n extern inline id\n object_copy(id object)\n {\n@@ -313,12 +160,6 @@ object_copy(id object)\n     }\n }\n \n-/*\n-** Frees the memory occupied by object by calling the function pointed\n-** to by the variable _objc_object_dispose if non-zero, otherwise uses\n-** a default method.  Always returns nil.  If object is not an instance\n-** object, does nothing.\n-*/\n extern inline id\n object_dispose(id object)\n {\n@@ -332,13 +173,6 @@ object_dispose(id object)\n   return nil;\n }\n \n-/*\n-** Returns the class of an object.  If object is an instance, this is\n-** its class object.  If object is a class object, returns object (this\n-** is arguably not correct, but is implemented this way for compatibility\n-** with NeXT (and Stepstone?)).  If object is a metaclass object, or\n-** object is nil, returns Nil.\n-*/\n static inline Class_t\n object_get_class(id object)\n {\n@@ -351,11 +185,6 @@ object_get_class(id object)\n \t  : Nil);\n }\n \n-/*\n-** Returns the name of the class of object.  If object is an instace,\n-** this is the name of its class.  If object is a class or a metaclass,\n-** returns its name.  If object is nil, returns \"Nil\".\n-*/\n static inline const char *\n object_get_class_name(id object)\n {\n@@ -365,11 +194,6 @@ object_get_class_name(id object)\n                        :\"Nil\");\n }\n \n-/*\n-** Returns the metaclass of an object.  If object is an instance or a\n-** class, this is the metaclass object for it.  If object is a metaclass\n-** object, or object is nil, returns Nil.\n-*/\n static inline MetaClass_t\n object_get_meta_class(id object)\n {\n@@ -381,11 +205,6 @@ object_get_meta_class(id object)\n                        :Nil);\n }\n \n-/*\n-** Returns the superclass of object.  If object is an instance or\n-** a class, this is its superclass-object for it.  If object is a\n-** metaclass-object or nil, this is Nil.\n-*/\n static inline Class_t\n object_get_super_class(id object)\n {\n@@ -397,44 +216,23 @@ object_get_super_class(id object)\n                        :Nil);\n }\n \n-/*\n-** YES if object is a class, NO if not.\n-*/\n static inline BOOL\n object_is_class(id object)\n {\n   return CLS_ISCLASS((Class_t)object);\n }\n \n-/*\n-** YES if object is an instance, NO if not.\n-*/\n static inline BOOL\n object_is_instance(id object)\n {\n   return (object!=nil)&&CLS_ISCLASS(object->class_pointer);\n }\n \n-/*\n-** YES if object is a metaclass, NO if not.\n-*/\n static inline BOOL\n object_is_meta_class(id object)\n {\n   return CLS_ISMETA((Class_t)object);\n }\n \n-/*\n-** Functions used for archiving.  This is not documented yet!\n-*/\n-\n-TypedStream* new_typed_stream(FILE* physical);\n-void free_typed_stream(TypedStream* stream);\n-\n-void objc_write_object(TypedStream* stream, id object);\n-int objc_read_object(TypedStream* stream, id *object);\n-\n-void objc_write_type(TypedStream* stream, const char* type, const void* data);\n-void objc_read_type(TypedStream* stream, const char* type, void* data);\n \n #endif /* not __objc_api_INCLUDE_GNU */"}]}