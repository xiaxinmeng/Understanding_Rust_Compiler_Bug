{"sha": "1dd4fe1fd892458ce29f15f3ca95125a11b2534f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRkNGZlMWZkODkyNDU4Y2UyOWYxNWYzY2E5NTEyNWExMWIyNTM0Zg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2012-11-26T12:33:02Z"}, "committer": {"name": "Greta Yorsh", "email": "gretay@gcc.gnu.org", "date": "2012-11-26T12:33:02Z"}, "message": "arm.h (TARGET_FPU_ARMV8): New macro.\n\ngcc/\n\n2012-11-26  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n\n\t* config/arm/arm.h (TARGET_FPU_ARMV8): New macro.\n\t* config/arm/arm.md (UNSPEC_VRINTZ, UNSPEC_VRINTP, UNSPEC_VRINTM)\n\t(UNSPEC_VRINTR, UNSPEC_VRINTX, UNSPEC_VRINTA): New unspecs.\n\t(f_rints, f_rintd): New types.\n\t* config/arm/iterators.md (VRINT): New int iterator.\n\t(F_fma_type): Remove.\n\t(vfp_type): New mode attribute.\n\t(vfp_double_cond): Likewise.\n\t(vrint_pattern, vrint_variant, vrint_predicable): New int attribute.\n\t* config/arm/vfp.md (fma<SDF:mode>4): Use vfp_type iterator\n\tinstead of F_fma_type.\n\t(*fmsub<SDF:mode>4, *fnmsub<SDF:mode>4, *fnmadd<SDF:mode>4): Likewise.\n\t(<vrint_pattern><SDF:mode>2): New pattern.\n\nFrom-SVN: r193813", "tree": {"sha": "5a65426955ffce1108cecf4a27b6ddbd65697dc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a65426955ffce1108cecf4a27b6ddbd65697dc0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1dd4fe1fd892458ce29f15f3ca95125a11b2534f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dd4fe1fd892458ce29f15f3ca95125a11b2534f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dd4fe1fd892458ce29f15f3ca95125a11b2534f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dd4fe1fd892458ce29f15f3ca95125a11b2534f/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "67ae67ec9487385b396ed1ca5a0b8da8da915061", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67ae67ec9487385b396ed1ca5a0b8da8da915061", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67ae67ec9487385b396ed1ca5a0b8da8da915061"}], "stats": {"total": 85, "additions": 79, "deletions": 6}, "files": [{"sha": "52b59c09ebc89b8ac232aa4d957d9594c907ef18", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dd4fe1fd892458ce29f15f3ca95125a11b2534f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dd4fe1fd892458ce29f15f3ca95125a11b2534f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1dd4fe1fd892458ce29f15f3ca95125a11b2534f", "patch": "@@ -1,3 +1,19 @@\n+2012-11-26  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/arm/arm.h (TARGET_FPU_ARMV8): New macro.\n+\t* config/arm/arm.md (UNSPEC_VRINTZ, UNSPEC_VRINTP, UNSPEC_VRINTM)\n+\t(UNSPEC_VRINTR, UNSPEC_VRINTX, UNSPEC_VRINTA): New unspecs.\n+\t(f_rints, f_rintd): New types.\n+\t* config/arm/iterators.md (VRINT): New int iterator.\n+\t(F_fma_type): Remove.\n+\t(vfp_type): New mode attribute.\n+\t(vfp_double_cond): Likewise.\n+\t(vrint_pattern, vrint_variant, vrint_predicable): New int attribute.\n+\t* config/arm/vfp.md (fma<SDF:mode>4): Use vfp_type iterator\n+\tinstead of F_fma_type.\n+\t(*fmsub<SDF:mode>4, *fnmsub<SDF:mode>4, *fnmadd<SDF:mode>4): Likewise.\n+\t(<vrint_pattern><SDF:mode>2): New pattern.\n+\n 2012-11-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* fold-const.c (const_binop): Adjust comment."}, {"sha": "f520cc717aaf389b201dcdfb1f497f6c830cf253", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dd4fe1fd892458ce29f15f3ca95125a11b2534f/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dd4fe1fd892458ce29f15f3ca95125a11b2534f/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=1dd4fe1fd892458ce29f15f3ca95125a11b2534f", "patch": "@@ -298,6 +298,9 @@ extern void (*arm_lang_output_object_attributes_hook)(void);\n /* FPU supports fused-multiply-add operations.  */\n #define TARGET_FMA (TARGET_VFP && arm_fpu_desc->rev >= 4)\n \n+/* FPU is ARMv8 compatible.  */\n+#define TARGET_FPU_ARMV8 (TARGET_VFP && arm_fpu_desc->rev >= 8)\n+\n /* FPU supports Crypto extensions.  */\n #define TARGET_CRYPTO (TARGET_VFP && arm_fpu_desc->crypto)\n "}, {"sha": "3002009b3d08e3618fdcb7b750ffe2506f8388ad", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dd4fe1fd892458ce29f15f3ca95125a11b2534f/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dd4fe1fd892458ce29f15f3ca95125a11b2534f/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=1dd4fe1fd892458ce29f15f3ca95125a11b2534f", "patch": "@@ -111,6 +111,18 @@\n   UNSPEC_UNALIGNED_STORE ; Same for str/strh.\n   UNSPEC_PIC_UNIFIED    ; Create a common pic addressing form.\n   UNSPEC_LL\t\t; Represent an unpaired load-register-exclusive.\n+  UNSPEC_VRINTZ         ; Represent a float to integral float rounding\n+                        ; towards zero.\n+  UNSPEC_VRINTP         ; Represent a float to integral float rounding\n+                        ; towards +Inf.\n+  UNSPEC_VRINTM         ; Represent a float to integral float rounding\n+                        ; towards -Inf.\n+  UNSPEC_VRINTR         ; Represent a float to integral float rounding\n+                        ; FPSCR rounding mode.\n+  UNSPEC_VRINTX         ; Represent a float to integral float rounding\n+                        ; FPSCR rounding mode and signal inexactness.\n+  UNSPEC_VRINTA         ; Represent a float to integral float rounding\n+                        ; towards nearest, ties away from zero.\n ])\n \n ;; UNSPEC_VOLATILE Usage:\n@@ -366,6 +378,8 @@\n   fmuld,\\\n   fmacs,\\\n   fmacd,\\\n+  f_rints,\\\n+  f_rintd,\\\n   f_flag,\\\n   f_loads,\\\n   f_loadd,\\"}, {"sha": "fe5eb525681895e87b160e241e7e52dac856e54d", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dd4fe1fd892458ce29f15f3ca95125a11b2534f/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dd4fe1fd892458ce29f15f3ca95125a11b2534f/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=1dd4fe1fd892458ce29f15f3ca95125a11b2534f", "patch": "@@ -191,6 +191,13 @@\n ;; Right shifts\n (define_code_iterator rshifts [ashiftrt lshiftrt])\n \n+;;----------------------------------------------------------------------------\n+;; Int iterators\n+;;----------------------------------------------------------------------------\n+\n+(define_int_iterator VRINT [UNSPEC_VRINTZ UNSPEC_VRINTP UNSPEC_VRINTM\n+                            UNSPEC_VRINTR UNSPEC_VRINTX UNSPEC_VRINTA])\n+\n ;;----------------------------------------------------------------------------\n ;; Mode attributes\n ;;----------------------------------------------------------------------------\n@@ -431,9 +438,10 @@\n ;; Mode attribute for vshll.\n (define_mode_attr V_innermode [(V8QI \"QI\") (V4HI \"HI\") (V2SI \"SI\")])\n \n-;; Mode attributes used for fused-multiply-accumulate VFP support\n+;; Mode attributes used for VFP support.\n (define_mode_attr F_constraint [(SF \"t\") (DF \"w\")])\n-(define_mode_attr F_fma_type [(SF \"fmacs\") (DF \"fmacd\")])\n+(define_mode_attr vfp_type [(SF \"s\") (DF \"d\")])\n+(define_mode_attr vfp_double_cond [(SF \"\") (DF \"&& TARGET_VFP_DOUBLE\")])\n \n ;;----------------------------------------------------------------------------\n ;; Code attributes\n@@ -457,3 +465,21 @@\n (define_code_attr shift [(ashiftrt \"ashr\") (lshiftrt \"lshr\")])\n (define_code_attr shifttype [(ashiftrt \"signed\") (lshiftrt \"unsigned\")])\n \n+;;----------------------------------------------------------------------------\n+;; Int attributes\n+;;----------------------------------------------------------------------------\n+\n+;; Standard names for floating point to integral rounding instructions.\n+(define_int_attr vrint_pattern [(UNSPEC_VRINTZ \"btrunc\") (UNSPEC_VRINTP \"ceil\")\n+                         (UNSPEC_VRINTA \"round\") (UNSPEC_VRINTM \"floor\")\n+                         (UNSPEC_VRINTR \"nearbyint\") (UNSPEC_VRINTX \"rint\")])\n+\n+;; Suffixes for vrint instructions specifying rounding modes.\n+(define_int_attr vrint_variant [(UNSPEC_VRINTZ \"z\") (UNSPEC_VRINTP \"p\")\n+                               (UNSPEC_VRINTA \"a\") (UNSPEC_VRINTM \"m\")\n+                               (UNSPEC_VRINTR \"r\") (UNSPEC_VRINTX \"x\")])\n+\n+;; Some of the vrint instuctions are predicable.\n+(define_int_attr vrint_predicable [(UNSPEC_VRINTZ \"yes\") (UNSPEC_VRINTP \"no\")\n+                                  (UNSPEC_VRINTA \"no\") (UNSPEC_VRINTM \"no\")\n+                                  (UNSPEC_VRINTR \"yes\") (UNSPEC_VRINTX \"yes\")])"}, {"sha": "480a88d3983cedfdf21d9d4c0416a0a93477ec88", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dd4fe1fd892458ce29f15f3ca95125a11b2534f/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dd4fe1fd892458ce29f15f3ca95125a11b2534f/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=1dd4fe1fd892458ce29f15f3ca95125a11b2534f", "patch": "@@ -908,7 +908,7 @@\n   \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FMA\"\n   \"vfma%?.<V_if_elem>\\\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"type\" \"<F_fma_type>\")]\n+   (set_attr \"type\" \"fmac<vfp_type>\")]\n )\n \n (define_insn \"*fmsub<SDF:mode>4\"\n@@ -920,7 +920,7 @@\n   \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FMA\"\n   \"vfms%?.<V_if_elem>\\\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"type\" \"<F_fma_type>\")]\n+   (set_attr \"type\" \"fmac<vfp_type>\")]\n )\n \n (define_insn \"*fnmsub<SDF:mode>4\"\n@@ -931,7 +931,7 @@\n   \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FMA\"\n   \"vfnms%?.<V_if_elem>\\\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"type\" \"<F_fma_type>\")]\n+   (set_attr \"type\" \"fmac<vfp_type>\")]\n )\n \n (define_insn \"*fnmadd<SDF:mode>4\"\n@@ -943,7 +943,7 @@\n   \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FMA\"\n   \"vfnma%?.<V_if_elem>\\\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"type\" \"<F_fma_type>\")]\n+   (set_attr \"type\" \"fmac<vfp_type>\")]\n )\n \n \n@@ -1248,6 +1248,20 @@\n   [(set_attr \"type\" \"f_stored\")]\n )\n \n+;; VRINT round to integral instructions.\n+;; Invoked for the patterns: btruncsf2, btruncdf2, ceilsf2, ceildf2,\n+;; roundsf2, rounddf2, floorsf2, floordf2, nearbyintsf2, nearbyintdf2,\n+;; rintsf2, rintdf2.\n+(define_insn \"<vrint_pattern><SDF:mode>2\"\n+  [(set (match_operand:SDF 0 \"register_operand\" \"=<F_constraint>\")\n+        (unspec:SDF [(match_operand:SDF 1\n+\t\t         \"register_operand\" \"<F_constraint>\")]\n+         VRINT))]\n+  \"TARGET_HARD_FLOAT && TARGET_FPU_ARMV8 <vfp_double_cond>\"\n+  \"vrint<vrint_variant>%?.<V_if_elem>\\\\t%<V_reg>0, %<V_reg>1\"\n+  [(set_attr \"predicable\" \"<vrint_predicable>\")\n+   (set_attr \"type\" \"f_rint<vfp_type>\")]\n+)\n \n ;; Unimplemented insns:\n ;; fldm*"}]}