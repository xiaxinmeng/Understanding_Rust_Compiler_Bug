{"sha": "6ffe3a32247f5be7c6c90ddeaa98911a309f6edb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZmZTNhMzIyNDdmNWJlN2M2YzkwZGRlYWE5ODkxMWEzMDlmNmVkYg==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1994-04-13T01:18:43Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1994-04-13T01:18:43Z"}, "message": "libgcc2.c (__builtin_vec_{delete,new}): New functions per the latest C++ working paper.\n\n        * libgcc2.c (__builtin_vec_{delete,new}): New functions per the\n        latest C++ working paper.\n        (__default_new_handler): No longer static.\n        (__set_new_handler): Lose.\n\nFrom-SVN: r7043", "tree": {"sha": "beda28bf5119eaaf7f5f197aebafba5a846bb2ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/beda28bf5119eaaf7f5f197aebafba5a846bb2ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ffe3a32247f5be7c6c90ddeaa98911a309f6edb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ffe3a32247f5be7c6c90ddeaa98911a309f6edb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ffe3a32247f5be7c6c90ddeaa98911a309f6edb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ffe3a32247f5be7c6c90ddeaa98911a309f6edb/comments", "author": null, "committer": null, "parents": [{"sha": "4c657af546aadee5c1d29af64fb1502a7183e7e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c657af546aadee5c1d29af64fb1502a7183e7e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c657af546aadee5c1d29af64fb1502a7183e7e0"}], "stats": {"total": 61, "additions": 44, "deletions": 17}, "files": [{"sha": "c25d5fba542686d3a577cdc7f56bd2922e53e662", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 44, "deletions": 17, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ffe3a32247f5be7c6c90ddeaa98911a309f6edb/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ffe3a32247f5be7c6c90ddeaa98911a309f6edb/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=6ffe3a32247f5be7c6c90ddeaa98911a309f6edb", "patch": "@@ -1560,14 +1560,16 @@ __bb_init_func (struct bb *blocks)\n #endif /* not BLOCK_PROFILER_CODE */\n #endif /* L_bb */\n \f\n-/* frills for C++ */\n+/* Default free-store management functions for C++, per sections 12.5 and\n+   17.3.3 of the Working Paper. */\n \n #ifdef L_op_new\n-typedef void (*vfp)(void);\n+/* operator new (size_t), described in 17.3.3.5.  This function is used by\n+   C++ programs to allocate a block of memory to hold a single object. */\n \n+typedef void (*vfp)(void);\n extern vfp __new_handler;\n \n-/* void * operator new (size_t sz) */\n void *\n __builtin_new (size_t sz)\n {\n@@ -1587,7 +1589,23 @@ __builtin_new (size_t sz)\n }\n #endif /* L_op_new */\n \n+#ifdef L_op_vec_new\n+/* void * operator new [] (size_t), described in 17.3.3.6.  This function\n+   is used by C++ programs to allocate a block of memory for an array.  */\n+\n+extern void * __builtin_new (size_t);\n+\n+void *\n+__builtin_vec_new (size_t sz)\n+{\n+  return __builtin_new (sz);\n+}\n+#endif /* L_op_vec_new */\n+\n #ifdef L_new_handler\n+/* set_new_handler (fvoid_t *) and the default new handler, described in\n+   17.3.3.2 and 17.3.3.5.  These functions define the result of a failure\n+   to allocate the amount of memory requested from operator new or new []. */\n \n #ifndef inhibit_libc\n /* This gets us __GNU_LIBRARY__.  */\n@@ -1602,15 +1620,12 @@ __builtin_new (size_t sz)\n #endif /* inhibit_libc */\n \n typedef void (*vfp)(void);\n-\n-extern void *__builtin_new (size_t);\n-static void __default_new_handler (void);\n+void __default_new_handler (void);\n \n vfp __new_handler = __default_new_handler;\n \n vfp\n-__set_new_handler (handler)\n-     vfp handler;\n+set_new_handler (vfp handler)\n {\n   vfp prev_handler;\n \n@@ -1620,16 +1635,9 @@ __set_new_handler (handler)\n   return prev_handler;\n }\n \n-vfp\n-set_new_handler (handler)\n-     vfp handler;\n-{\n-  return __set_new_handler (handler);\n-}\n-\n #define MESSAGE \"Virtual memory exceeded in `new'\\n\"\n \n-static void\n+void\n __default_new_handler ()\n {\n   /* don't use fprintf (stderr, ...) because it may need to call malloc.  */\n@@ -1643,14 +1651,33 @@ __default_new_handler ()\n #endif\n \n #ifdef L_op_delete\n-/* void operator delete (void *ptr) */\n+/* operator delete (void *), described in 17.3.3.3.  This function is used\n+   by C++ programs to return to the free store a block of memory allocated\n+   as a single object. */\n+\n void\n __builtin_delete (void *ptr)\n {\n   if (ptr)\n     free (ptr);\n }\n #endif\n+\n+#ifdef L_op_vec_delete\n+/* operator delete [] (void *), described in 17.3.3.4.  This function is\n+   used by C++ programs to return to the free store a block of memory\n+   allocated as an array. */\n+\n+extern void __builtin_delete (void *);\n+\n+void\n+__builtin_vec_delete (void *ptr)\n+{\n+  __builtin_delete (ptr);\n+}\n+#endif\n+\n+/* End of C++ free-store management functions */\n \f\n #ifdef L_shtab\n unsigned int __shtab[] = {"}]}