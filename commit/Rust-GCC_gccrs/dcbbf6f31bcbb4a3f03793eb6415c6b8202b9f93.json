{"sha": "dcbbf6f31bcbb4a3f03793eb6415c6b8202b9f93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNiYmY2ZjMxYmNiYjRhM2YwMzc5M2ViNjQxNWM2YjgyMDJiOWY5Mw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-06-23T16:03:52Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-06-23T16:03:52Z"}, "message": "re PR libstdc++/16154 (input iterator concept too restrictive)\n\n2004-06-23  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/16154\n\t* include/bits/boost_concept_check.h (struct _TrivialIteratorConcept):\n\tDon't require the _DefaultConstructibleConcept.\n\t(struct _ForwardIteratorConcept): Require it here.\n\nFrom-SVN: r83554", "tree": {"sha": "788797f43df20d0f1b10636815ec5c2a7216df7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/788797f43df20d0f1b10636815ec5c2a7216df7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcbbf6f31bcbb4a3f03793eb6415c6b8202b9f93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcbbf6f31bcbb4a3f03793eb6415c6b8202b9f93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcbbf6f31bcbb4a3f03793eb6415c6b8202b9f93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcbbf6f31bcbb4a3f03793eb6415c6b8202b9f93/comments", "author": null, "committer": null, "parents": [{"sha": "e1d2bd1e44971a4becd718272277361b4f64fcad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1d2bd1e44971a4becd718272277361b4f64fcad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1d2bd1e44971a4becd718272277361b4f64fcad"}], "stats": {"total": 10, "additions": 9, "deletions": 1}, "files": [{"sha": "18c1ead570c8da35383ce885c5cf058a11ecff57", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcbbf6f31bcbb4a3f03793eb6415c6b8202b9f93/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcbbf6f31bcbb4a3f03793eb6415c6b8202b9f93/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=dcbbf6f31bcbb4a3f03793eb6415c6b8202b9f93", "patch": "@@ -1,3 +1,10 @@\n+2004-06-23  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/16154\n+\t* include/bits/boost_concept_check.h (struct _TrivialIteratorConcept):\n+\tDon't require the _DefaultConstructibleConcept.\n+\t(struct _ForwardIteratorConcept): Require it here.\n+\n 2004-06-22  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* include/bits/istream.tcc (getline): Make sure arguments passed"}, {"sha": "7c99838dcb79b17cf9ef3ec19d65cfa0a516d9c7", "filename": "libstdc++-v3/include/bits/boost_concept_check.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcbbf6f31bcbb4a3f03793eb6415c6b8202b9f93/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcbbf6f31bcbb4a3f03793eb6415c6b8202b9f93/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h?ref=dcbbf6f31bcbb4a3f03793eb6415c6b8202b9f93", "patch": "@@ -418,7 +418,7 @@ struct _Aux_require_same<_Tp,_Tp> { typedef _Tp _Type; };\n   struct _TrivialIteratorConcept\n   {\n     void __constraints() {\n-      __function_requires< _DefaultConstructibleConcept<_Tp> >();\n+//    __function_requires< _DefaultConstructibleConcept<_Tp> >();\n       __function_requires< _AssignableConcept<_Tp> >();\n       __function_requires< _EqualityComparableConcept<_Tp> >();\n //      typedef typename std::iterator_traits<_Tp>::value_type _V;\n@@ -475,6 +475,7 @@ struct _Aux_require_same<_Tp,_Tp> { typedef _Tp _Type; };\n   {\n     void __constraints() {\n       __function_requires< _InputIteratorConcept<_Tp> >();\n+      __function_requires< _DefaultConstructibleConcept<_Tp> >();\n       __function_requires< _ConvertibleConcept<\n         typename std::iterator_traits<_Tp>::iterator_category,\n         std::forward_iterator_tag> >();"}]}