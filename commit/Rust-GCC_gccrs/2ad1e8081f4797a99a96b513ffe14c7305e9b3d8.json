{"sha": "2ad1e8081f4797a99a96b513ffe14c7305e9b3d8", "node_id": "C_kwDOANBUbNoAKDJhZDFlODA4MWY0Nzk3YTk5YTk2YjUxM2ZmZTE0YzczMDVlOWIzZDg", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-11-08T01:19:29Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-11-08T01:19:29Z"}, "message": "[Gimple] Simplify (trunc)fma ((extend)a, (extend)b, (extend)c) to IFN_FMA (a,b, c).\n\na, b, c are same type as truncation type and has less precision than\nextend type, the optimization is guarded under\nflag_unsafe_math_optimizations.\n\ngcc/ChangeLog:\n\tPR target/102464\n\t* match.pd: Simplify\n\t(trunc)fma ((extend)a, (extend)b, (extend)c) to IFN_FMA (a, b,\n\tc) under flag_unsafe_math_optimizations.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr102464-fma.c: New test.", "tree": {"sha": "ba4ae7744d19251728e893ab0a1023288f44e183", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba4ae7744d19251728e893ab0a1023288f44e183"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ad1e8081f4797a99a96b513ffe14c7305e9b3d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ad1e8081f4797a99a96b513ffe14c7305e9b3d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ad1e8081f4797a99a96b513ffe14c7305e9b3d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ad1e8081f4797a99a96b513ffe14c7305e9b3d8/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cb25fd1adb26cddc57cd9ae356f72de96ec2daa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cb25fd1adb26cddc57cd9ae356f72de96ec2daa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cb25fd1adb26cddc57cd9ae356f72de96ec2daa"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "869b26d16a0cd4e71f8b7bf3daf439445521479a", "filename": "gcc/match.pd", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ad1e8081f4797a99a96b513ffe14c7305e9b3d8/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ad1e8081f4797a99a96b513ffe14c7305e9b3d8/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=2ad1e8081f4797a99a96b513ffe14c7305e9b3d8", "patch": "@@ -6217,6 +6217,21 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t\t\t\t\t  type, OPTIMIZE_FOR_BOTH))\n     (IFN_COPYSIGN @0 @1))))\n \n+(for froms (BUILT_IN_FMAF BUILT_IN_FMA BUILT_IN_FMAL)\n+     tos (IFN_FMA IFN_FMA IFN_FMA)\n+ (simplify\n+  (convert (froms (convert@3 @0) (convert @1) (convert @2)))\n+   (if (flag_unsafe_math_optimizations\n+       && optimize\n+       && FLOAT_TYPE_P (type)\n+       && FLOAT_TYPE_P (TREE_TYPE (@3))\n+       && types_match (type, TREE_TYPE (@0))\n+       && types_match (type, TREE_TYPE (@1))\n+       && types_match (type, TREE_TYPE (@2))\n+       && TYPE_PRECISION (type) < TYPE_PRECISION (TREE_TYPE (@3))\n+       && direct_internal_fn_supported_p (as_internal_fn (tos),\n+\t\t\t\t\t  type, OPTIMIZE_FOR_BOTH))\n+    (tos @0 @1 @2))))\n #endif\n \n (for froms (XFLOORL XCEILL XROUNDL XRINTL)"}, {"sha": "9c70d93d98038634e0784f81ca781b0ce5d716cf", "filename": "gcc/testsuite/gcc.target/i386/pr102464-fma.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ad1e8081f4797a99a96b513ffe14c7305e9b3d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102464-fma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ad1e8081f4797a99a96b513ffe14c7305e9b3d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102464-fma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102464-fma.c?ref=2ad1e8081f4797a99a96b513ffe14c7305e9b3d8", "patch": "@@ -0,0 +1,32 @@\n+/* PR target/102464.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -ffast-math -ftree-vectorize -mtune=generic -mfpmath=sse\" } */\n+/* { dg-final { scan-assembler-times \"vfmadd...ph\" 3 } }  */\n+/* { dg-final { scan-assembler-times \"vfmadd...sh\" 3 } }  */\n+/* { dg-final { scan-assembler-times \"vfmadd...ps\" 2 } }  */\n+/* { dg-final { scan-assembler-times \"vfmadd...ss\" 2 } }  */\n+/* { dg-final { scan-assembler-times \"vfmadd...pd\" 1 } }  */\n+/* { dg-final { scan-assembler-times \"vfmadd...sd\" 1 } }  */\n+\n+#include<math.h>\n+#define FOO(TYPE,SUFFIX)\t\t\t\t\t\t\\\n+  void\t\t\t\t\t\t\t\t\t\\\n+  foo_vect_##TYPE##SUFFIX (TYPE* __restrict a, TYPE* b, TYPE* c, TYPE* d) \\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i != 8; i++)\t\t\t\t\t\\\n+      a[i] = fma##SUFFIX (b[i], c[i], d[i]);\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+  TYPE\t\t\t\t\t\t\t\t\t\\\n+  foo_##TYPE##SUFFIX (TYPE b, TYPE c, TYPE d)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    return fma##l (b, c, d);\t\t\t\t\t\t\\\n+  }\n+\n+FOO (_Float16, f);\n+FOO (_Float16,);\n+FOO (_Float16, l);\n+\n+FOO (float,);\n+FOO (float, l);\n+\n+FOO (double, l);"}]}