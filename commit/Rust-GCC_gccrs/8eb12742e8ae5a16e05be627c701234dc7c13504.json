{"sha": "8eb12742e8ae5a16e05be627c701234dc7c13504", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGViMTI3NDJlOGFlNWExNmUwNWJlNjI3YzcwMTIzNGRjN2MxMzUwNA==", "commit": {"author": {"name": "Matthew Malcomson", "email": "matthew.malcomson@arm.com", "date": "2020-11-25T16:31:35Z"}, "committer": {"name": "Matthew Malcomson", "email": "matthew.malcomson@arm.com", "date": "2020-11-25T16:35:31Z"}, "message": "libsanitizer: Hwasan reporting check for dladdr failing\n\nIn `GetGlobalSizeFromDescriptor` we use `dladdr` to get info on the the\ncurrent address.  `dladdr` returns 0 if it failed.\nDuring testing on Linux this returned 0 to indicate failure, and\npopulated the `info` structure with a NULL pointer which was\ndereferenced later.\n\nThis patch checks for `dladdr` returning 0, and in that case returns 0\nfrom `GetGlobalSizeFromDescriptor` to indicate failure of identifying\nthe address.\n\nThis occurs when `GetModuleNameAndOffsetForPC` succeeds for some address\nnot in a dynamically loaded library.  One example is when the found\n\"module\" is '[stack]' having come from parsing /proc/self/maps.\n\nCherry-pick from 83ac18205ec69a00ac2be3b603bc3a61293fbe89.\n\nDifferential Revision: https://reviews.llvm.org/D91344", "tree": {"sha": "790322638eedb4a867dc18779c490330d982d0fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/790322638eedb4a867dc18779c490330d982d0fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8eb12742e8ae5a16e05be627c701234dc7c13504", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eb12742e8ae5a16e05be627c701234dc7c13504", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8eb12742e8ae5a16e05be627c701234dc7c13504", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eb12742e8ae5a16e05be627c701234dc7c13504/comments", "author": {"login": "mmalcomson", "id": 57484298, "node_id": "MDQ6VXNlcjU3NDg0Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmalcomson", "html_url": "https://github.com/mmalcomson", "followers_url": "https://api.github.com/users/mmalcomson/followers", "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}", "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions", "organizations_url": "https://api.github.com/users/mmalcomson/orgs", "repos_url": "https://api.github.com/users/mmalcomson/repos", "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}", "received_events_url": "https://api.github.com/users/mmalcomson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mmalcomson", "id": 57484298, "node_id": "MDQ6VXNlcjU3NDg0Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmalcomson", "html_url": "https://github.com/mmalcomson", "followers_url": "https://api.github.com/users/mmalcomson/followers", "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}", "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions", "organizations_url": "https://api.github.com/users/mmalcomson/orgs", "repos_url": "https://api.github.com/users/mmalcomson/repos", "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}", "received_events_url": "https://api.github.com/users/mmalcomson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ee3d1ef105c5181fbf298b8ddb638f8e3cbaaca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ee3d1ef105c5181fbf298b8ddb638f8e3cbaaca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ee3d1ef105c5181fbf298b8ddb638f8e3cbaaca"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "894a149775f291bae9cad833b1ac54914212f405", "filename": "libsanitizer/hwasan/hwasan_report.cpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb12742e8ae5a16e05be627c701234dc7c13504/libsanitizer%2Fhwasan%2Fhwasan_report.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb12742e8ae5a16e05be627c701234dc7c13504/libsanitizer%2Fhwasan%2Fhwasan_report.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fhwasan%2Fhwasan_report.cpp?ref=8eb12742e8ae5a16e05be627c701234dc7c13504", "patch": "@@ -254,7 +254,8 @@ static bool TagsEqual(tag_t tag, tag_t *tag_ptr) {\n static uptr GetGlobalSizeFromDescriptor(uptr ptr) {\n   // Find the ELF object that this global resides in.\n   Dl_info info;\n-  dladdr(reinterpret_cast<void *>(ptr), &info);\n+  if (dladdr(reinterpret_cast<void *>(ptr), &info) == 0)\n+    return 0;\n   auto *ehdr = reinterpret_cast<const ElfW(Ehdr) *>(info.dli_fbase);\n   auto *phdr_begin = reinterpret_cast<const ElfW(Phdr) *>(\n       reinterpret_cast<const u8 *>(ehdr) + ehdr->e_phoff);"}]}