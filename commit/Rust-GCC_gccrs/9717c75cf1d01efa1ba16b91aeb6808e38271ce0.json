{"sha": "9717c75cf1d01efa1ba16b91aeb6808e38271ce0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTcxN2M3NWNmMWQwMWVmYTFiYTE2YjkxYWViNjgwOGUzODI3MWNlMA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@purist.soma.redhat.com", "date": "2000-11-01T21:38:32Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-11-01T21:38:32Z"}, "message": "basic_file.h (_M_open_mode): Change signature, move specializations to..\n\n\n2000-11-01  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n\n\t* bits/basic_file.h (_M_open_mode): Change signature, move\n\tspecializations to..\n\t* config/c_io_libio.cc: ...here.\n\t* acinclude.m4 (GLIBCPP_ENABLE_CSTDIO): Add sdtio option, remove wince.\n\t* aclocal.m4: Regenerate.\n\t* configure: Regenerate.\n\t* config/c_io_stdio.h: New file.\n\t* config/c_io_stdio.cc: New file.\n\t* docs/configopts.html: Modify documentation.\n\nFrom-SVN: r37195", "tree": {"sha": "f58432c925bdca9daac30d802cf562a3be6a03a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f58432c925bdca9daac30d802cf562a3be6a03a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9717c75cf1d01efa1ba16b91aeb6808e38271ce0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9717c75cf1d01efa1ba16b91aeb6808e38271ce0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9717c75cf1d01efa1ba16b91aeb6808e38271ce0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9717c75cf1d01efa1ba16b91aeb6808e38271ce0/comments", "author": null, "committer": null, "parents": [{"sha": "a0a9606d4b5b7545b6dcabaa9a8a915ab96bd166", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0a9606d4b5b7545b6dcabaa9a8a915ab96bd166", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0a9606d4b5b7545b6dcabaa9a8a915ab96bd166"}], "stats": {"total": 2980, "additions": 1591, "deletions": 1389}, "files": [{"sha": "c68a9eb34f16419f5e8a3e4a61b043d2b7d16153", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9717c75cf1d01efa1ba16b91aeb6808e38271ce0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9717c75cf1d01efa1ba16b91aeb6808e38271ce0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9717c75cf1d01efa1ba16b91aeb6808e38271ce0", "patch": "@@ -1,3 +1,15 @@\n+2000-11-01  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n+\n+\t* bits/basic_file.h (_M_open_mode): Change signature, move\n+\tspecializations to..\n+\t* config/c_io_libio.cc: ...here.\n+\t* acinclude.m4 (GLIBCPP_ENABLE_CSTDIO): Add sdtio option, remove wince.\n+\t* aclocal.m4: Regenerate.\n+\t* configure: Regenerate.\n+\t* config/c_io_stdio.h: New file.\n+\t* config/c_io_stdio.cc: New file.\n+\t* docs/configopts.html: Modify documentation.\n+\t\n 2000-10-31  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n \n \t* include/c/bits/std_cwctype.h: Add more undefs."}, {"sha": "daf01de5e52b4fb03732a6f0d608c16fc50bd755", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 1, "deletions": 42, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9717c75cf1d01efa1ba16b91aeb6808e38271ce0/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9717c75cf1d01efa1ba16b91aeb6808e38271ce0/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=9717c75cf1d01efa1ba16b91aeb6808e38271ce0", "patch": "@@ -133,48 +133,7 @@ MULTICLEAN = true\n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n # values defined in terms of make variables, as is the case for CC and\n # friends when we are called from the top level Makefile.\n-AM_MAKEFLAGS = \\\n-\t\"AR_FLAGS=$(AR_FLAGS)\" \\\n-\t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \\\n-\t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \\\n-\t\"CFLAGS=$(CFLAGS)\" \\\n-\t\"CXXFLAGS=$(CXXFLAGS)\" \\\n-\t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \\\n-\t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \\\n-\t\"INSTALL=$(INSTALL)\" \\\n-\t\"INSTALL_DATA=$(INSTALL_DATA)\" \\\n-\t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \\\n-\t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \\\n-\t\"LDFLAGS=$(LDFLAGS)\" \\\n-\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n-\t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \\\n-\t\"MAKE=$(MAKE)\" \\\n-\t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \\\n-\t\"PICFLAG=$(PICFLAG)\" \\\n-\t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \\\n-\t\"SHELL=$(SHELL)\" \\\n-\t\"EXPECT=$(EXPECT)\" \\\n-\t\"RUNTEST=$(RUNTEST)\" \\\n-\t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \\\n-\t\"exec_prefix=$(exec_prefix)\" \\\n-\t\"infodir=$(infodir)\" \\\n-\t\"libdir=$(libdir)\" \\\n-\t\"includedir=$(includedir)\" \\\n-\t\"prefix=$(prefix)\" \\\n-\t\"tooldir=$(tooldir)\" \\\n-\t\"AR=$(AR)\" \\\n-\t\"AS=$(AS)\" \\\n-\t\"CC=$(CC)\" \\\n-\t\"CXX=$(CXX)\" \\\n-\t\"LD=$(LD)\" \\\n-\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n-\t\"PICFLAG=$(PICFLAG)\" \\\n-\t\"RANLIB=$(RANLIB)\" \\\n-\t\"NM=$(NM)\" \\\n-\t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \\\n-\t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \\\n-\t\"DESTDIR=$(DESTDIR)\" \\\n-\t\"WERROR=$(WERROR)\" \n+AM_MAKEFLAGS =  \t\"AR_FLAGS=$(AR_FLAGS)\" \t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \t\"CFLAGS=$(CFLAGS)\" \t\"CXXFLAGS=$(CXXFLAGS)\" \t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \t\"INSTALL=$(INSTALL)\" \t\"INSTALL_DATA=$(INSTALL_DATA)\" \t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \t\"LDFLAGS=$(LDFLAGS)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \t\"MAKE=$(MAKE)\" \t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \t\"SHELL=$(SHELL)\" \t\"EXPECT=$(EXPECT)\" \t\"RUNTEST=$(RUNTEST)\" \t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \t\"exec_prefix=$(exec_prefix)\" \t\"infodir=$(infodir)\" \t\"libdir=$(libdir)\" \t\"includedir=$(includedir)\" \t\"prefix=$(prefix)\" \t\"tooldir=$(tooldir)\" \t\"AR=$(AR)\" \t\"AS=$(AS)\" \t\"CC=$(CC)\" \t\"CXX=$(CXX)\" \t\"LD=$(LD)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"RANLIB=$(RANLIB)\" \t\"NM=$(NM)\" \t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \t\"DESTDIR=$(DESTDIR)\" \t\"WERROR=$(WERROR)\" \n \n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs"}, {"sha": "5a61993e1fe1a0e42d3b86e1dda028a9007ae7b1", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9717c75cf1d01efa1ba16b91aeb6808e38271ce0/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9717c75cf1d01efa1ba16b91aeb6808e38271ce0/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=9717c75cf1d01efa1ba16b91aeb6808e38271ce0", "patch": "@@ -1326,11 +1326,10 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n          fi\n       fi\n       ;;\n-\n-    xwince)\n-      CSTDIO_H=config/c_io_wince.h\n-      CSTDIO_CC=config/c_io_wince.cc\n-      AC_MSG_RESULT(wince)\n+    xstdio)\n+      CSTDIO_H=config/c_io_stdio.h\n+      CSTDIO_CC=config/c_io_stdio.cc\n+      AC_MSG_RESULT(stdio)\n \n       need_libio=no\n       ;;"}, {"sha": "e526be917e0ec3108a0b4ddbc2ead072fda1b362", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9717c75cf1d01efa1ba16b91aeb6808e38271ce0/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9717c75cf1d01efa1ba16b91aeb6808e38271ce0/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=9717c75cf1d01efa1ba16b91aeb6808e38271ce0", "patch": "@@ -1344,6 +1344,13 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n       CSTDIO_CC=config/c_io_wince.cc\n       AC_MSG_RESULT(wince)\n \n+      need_libio=no\n+      ;;\n+    xstdio)\n+      CSTDIO_H=config/c_io_stdio.h\n+      CSTDIO_CC=config/c_io_stdio.cc\n+      AC_MSG_RESULT(stdio)\n+\n       need_libio=no\n       ;;\n     *)"}, {"sha": "1747ddb3e6d0beeb2dfde8900a1d832a8a98199c", "filename": "libstdc++-v3/config/c_io_libio.cc", "status": "modified", "additions": 105, "deletions": 11, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9717c75cf1d01efa1ba16b91aeb6808e38271ce0/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9717c75cf1d01efa1ba16b91aeb6808e38271ce0/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.cc?ref=9717c75cf1d01efa1ba16b91aeb6808e38271ce0", "patch": "@@ -36,9 +36,97 @@\n \n namespace std {\n \n-  // Need to instantiate base class here for type-info bits, etc\n-  template struct __basic_file_base<char>;\n-  template struct __basic_file_base<wchar_t>;\n+  // __basic_file<char> specializations\n+  template<>\n+    __basic_file<char>::__basic_file(__c_lock* __lock);\n+\n+  template<>\n+    int \n+    __basic_file<char>::overflow(int __c);\n+\n+  template<>\n+    int \n+    __basic_file<char>::underflow();\n+\n+  template<>\n+    int \n+    __basic_file<char>::uflow();\n+\n+  template<>\n+    int \n+    __basic_file<char>::pbackfail(int __c);\n+\n+  template<>\n+    streamsize \n+    __basic_file<char>::xsputn(const char* __s, streamsize __n);\n+\n+  template<>\n+    streamoff\n+    __basic_file<char>::seekoff(streamoff __off, ios_base::seekdir __way, \n+\t\t\t\tios_base::openmode __mode);\n+\n+  template<>\n+    streamoff\n+    __basic_file<char>::seekpos(streamoff __pos, ios_base::openmode __mode);\n+\n+  template<>\n+    streambuf* \n+    __basic_file<char>::setbuf(char* __b, int __len);\n+\n+  template<>\n+    int \n+    __basic_file<char>::sync();\n+\n+  template<>\n+    int \n+    __basic_file<char>::doallocate();\n+\n+  // __basic_file<wchar_t> specializations\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  template<>\n+    __basic_file<wchar_t>::__basic_file(__c_lock* __lock);\n+\n+  template<>\n+    int \n+    __basic_file<wchar_t>::overflow(int __c);\n+\n+  template<>\n+    int \n+    __basic_file<wchar_t>::underflow();\n+\n+  template<>\n+    int \n+    __basic_file<wchar_t>::uflow();\n+\n+  template<>\n+    int \n+    __basic_file<wchar_t>::pbackfail(int __c);\n+\n+  template<>\n+    streamsize \n+    __basic_file<wchar_t>::xsputn(const wchar_t* __s, streamsize __n);\n+\n+  template<>\n+    streamoff\n+    __basic_file<wchar_t>::seekoff(streamoff __off, ios_base::seekdir __way, \n+\t\t\t\tios_base::openmode __mode);\n+\n+  template<>\n+    streamoff\n+    __basic_file<wchar_t>::seekpos(streamoff __pos, ios_base::openmode __mode);\n+\n+  template<>\n+    streambuf* \n+    __basic_file<wchar_t>::setbuf(wchar_t* __b, int __len);\n+\n+  template<>\n+    int \n+    __basic_file<wchar_t>::sync();\n+\n+  template<>\n+    int \n+    __basic_file<wchar_t>::doallocate();\n+#endif\n \n   // Generic definitions for __basic_file\n   template<typename _CharT>\n@@ -53,7 +141,8 @@ namespace std {\n   template<typename _CharT>\n     void \n     __basic_file<_CharT>::_M_open_mode(ios_base::openmode __mode, \n-\t\t\t\t       int& __p_mode, int& __rw_mode)\n+\t\t\t\t       int& __p_mode, int& __rw_mode, \n+\t\t\t\t       char* /*__c_mode*/)\n     {  \n #ifdef O_BINARY\n       bool __testb = __mode & ios_base::binary;\n@@ -106,8 +195,9 @@ namespace std {\n       __basic_file* __ret = NULL;\n       int __p_mode = 0;\n       int __rw_mode = _IO_NO_READS + _IO_NO_WRITES; \n+      char __c_mode[4];\n       \n-      _M_open_mode(__mode, __p_mode, __rw_mode);\n+      _M_open_mode(__mode, __p_mode, __rw_mode, __c_mode);\n \n       if (!_IO_file_is_open(this))\n \t{\n@@ -125,13 +215,14 @@ namespace std {\n   template<typename _CharT>\n     __basic_file<_CharT>* \n     __basic_file<_CharT>::open(const char* __name, ios_base::openmode __mode, \n-\t\t\t       int __prot = 0664)\n+\t\t\t       int __prot)\n     {\n       __basic_file* __ret = NULL;\n       int __p_mode = 0;\n       int __rw_mode = _IO_NO_READS + _IO_NO_WRITES; \n-      \n-      _M_open_mode(__mode, __p_mode, __rw_mode);\n+      char __c_mode[4];\n+\n+      _M_open_mode(__mode, __p_mode, __rw_mode, __c_mode);\n       if (!_IO_file_is_open(this))\n \t{\n \t  __c_file_type* __f;\n@@ -260,8 +351,6 @@ namespace std {\n   __basic_file<char>::doallocate() \n   { return _IO_file_doallocate(this); }\n \n-  template class __basic_file<char>;\n-\n   // __basic_file<wchar_t> definitions\n #ifdef _GLIBCPP_USE_WCHAR_T\n   __basic_file<wchar_t>::__basic_file(__c_lock* __lock)\n@@ -339,10 +428,15 @@ namespace std {\n   int \n   __basic_file<wchar_t>::doallocate() \n   { return _IO_wfile_doallocate(this); }\n+#endif\n \n+  // Need to instantiate base class here for type-info bits, etc\n+  template struct __basic_file_base<char>;\n+  template class __basic_file<char>;\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  template struct __basic_file_base<wchar_t>;\n   template class __basic_file<wchar_t>;\n #endif\n-\n }  // namespace std\n \n "}, {"sha": "515a09eafe5d8b97fd8ea972f8c1ec762578495a", "filename": "libstdc++-v3/config/c_io_libio.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9717c75cf1d01efa1ba16b91aeb6808e38271ce0/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9717c75cf1d01efa1ba16b91aeb6808e38271ce0/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.h?ref=9717c75cf1d01efa1ba16b91aeb6808e38271ce0", "patch": "@@ -56,15 +56,14 @@ namespace std {\n   typedef int          __c_lock;\n #endif\n \n-\n // from basic_file.h\n #define _GLIBCPP_BASIC_FILE_INHERITANCE 1\n   typedef _IO_FILE \t__c_file_type;\n   typedef _IO_wide_data __c_wfile_type;\n \n #ifdef _GLIBCPP_USE_WCHAR_T\n   extern \"C\" _IO_codecvt __c_libio_codecvt;\n-#endif /* defined (_GLIBCPP_USE_WCHAR_T) */\n+#endif \n \n // from ios_base.h\n   struct __ios_flags"}, {"sha": "ddcdff4b6761e79233005e22bbf332ff646a2dcf", "filename": "libstdc++-v3/config/c_io_stdio.cc", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9717c75cf1d01efa1ba16b91aeb6808e38271ce0/libstdc%2B%2B-v3%2Fconfig%2Fc_io_stdio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9717c75cf1d01efa1ba16b91aeb6808e38271ce0/libstdc%2B%2B-v3%2Fconfig%2Fc_io_stdio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fc_io_stdio.cc?ref=9717c75cf1d01efa1ba16b91aeb6808e38271ce0", "patch": "@@ -0,0 +1,262 @@\n+// Wrapper of C-language FILE struct -*- C++ -*-\n+\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 27.8  File-based streams\n+//\n+\n+#include <bits/basic_file.h>\n+\n+namespace std {\n+\n+  // Generic definitions for __basic_file\n+  template<typename _CharT>\n+    __basic_file<_CharT>::__basic_file(__c_lock* /*__lock*/) \n+    : _M_fileno(-1), _M_cfile(NULL) { }\n+\n+  template<typename _CharT>\n+    int \n+    __basic_file<_CharT>::get_fileno(void)\n+    { return _M_fileno; }\n+ \n+  template<typename _CharT>\n+    __basic_file<_CharT>::~__basic_file()\n+    {\n+      if (this->is_open())\n+\t{\n+\t  fflush(_M_cfile);\n+\t  this->close();\n+\t}\n+    }\n+      \n+  template<typename _CharT>\n+    void \n+    __basic_file<_CharT>::_M_open_mode(ios_base::openmode __mode, \n+\t\t\t\t       int& /*__p_mode*/, int& /*__rw_mode*/, \n+\t\t\t\t       char* __c_mode)\n+    {  \n+      bool __testb = __mode & ios_base::binary;\n+      bool __testi = __mode & ios_base::in;\n+      bool __testo = __mode & ios_base::out;\n+      bool __testt = __mode & ios_base::trunc;\n+      bool __testa = __mode & ios_base::app;\n+      \n+      if (!__testi && __testo && !__testt && !__testa)\n+\tstrcpy(__c_mode, \"w\");\n+      if (!__testi && __testo && !__testt && __testa)\n+\tstrcpy(__c_mode, \"a\");\n+      if (!__testi && __testo && __testt && !__testa)\n+\tstrcpy(__c_mode, \"w\");\n+      if (__testi && !__testo && !__testt && !__testa)\n+\tstrcpy(__c_mode, \"r\");\n+      if (__testi && __testo && !__testt && !__testa)\n+\tstrcpy(__c_mode, \"r+\");\n+      if (__testi && __testo && __testt && !__testa)\n+\tstrcpy(__c_mode, \"w+\");\n+      if (__testb)\n+\tstrcat(__c_mode, \"b\");\n+    }\n+  \n+  template<typename _CharT>\n+    __basic_file<_CharT>*\n+    __basic_file<_CharT>::sys_open(int __fd, ios_base::openmode __mode) \n+    {\n+      __basic_file* __ret = NULL;\n+      int __p_mode = 0;\n+      int __rw_mode = 0;\n+      char __c_mode[4];\n+\n+      _M_open_mode(__mode, __p_mode, __rw_mode, __c_mode);\n+\n+      if (!this->is_open())\n+\t{\n+\t  if ((_M_cfile = fdopen(__fd, __c_mode)))\n+\t    {\n+\t      _M_fileno = __fd;\n+\t      __ret = this;\n+\t    }\n+\t}\n+      return __ret;\n+    }\n+  \n+  template<typename _CharT>\n+    __basic_file<_CharT>* \n+    __basic_file<_CharT>::open(const char* __name, ios_base::openmode __mode, \n+\t\t\t       int /*__prot*/)\n+    {\n+      __basic_file* __ret = NULL;\n+      int __p_mode = 0;\n+      int __rw_mode = 0;\n+      char __c_mode[4];\n+      \n+      _M_open_mode(__mode, __p_mode, __rw_mode, __c_mode);\n+\n+      if (!this->is_open())\n+\t{\n+\t  if ((_M_cfile = fopen(__name, __c_mode)))\n+\t    {\n+\t      _M_fileno = fileno(_M_cfile);\n+\t      __ret = this;\n+\t    }\n+\t}\n+      return __ret;\n+    }\n+  \n+  template<typename _CharT>\n+    bool \n+    __basic_file<_CharT>::is_open() { return _M_fileno >= 0; }\n+  \n+  template<typename _CharT>\n+    __basic_file<_CharT>* \n+    __basic_file<_CharT>::close()\n+    { \n+      __basic_file* __retval = static_cast<__basic_file*>(NULL);\n+      bool __testopen = fclose(_M_cfile);\n+      if (!__testopen)\n+\t{\n+\t  __retval = this;\n+\t  _M_fileno = -1;\n+\t}  \n+      return __retval;\n+    }\n+ \n+  template<typename _CharT>\n+    streamsize \n+    __basic_file<_CharT>::xsgetn(_CharT* __s, streamsize __n)\n+    { return fread(__s, 1, __n, _M_cfile); }\n+\n+  template<typename _CharT>\n+    streamsize \n+    __basic_file<_CharT>::xsputn(const _CharT* __s, streamsize __n)\n+    { return fwrite(__s, 1, __n, _M_cfile); }\n+ \n+  template<typename _CharT>\n+    streamoff\n+    __basic_file<_CharT>::seekoff(streamoff __off, ios_base::seekdir __way, \n+\t\t\t\t  ios_base::openmode /*__mode*/)\n+   { return fseek(_M_cfile, __off, __way); }\n+\n+  template<typename _CharT>\n+    streamoff\n+    __basic_file<_CharT>::seekpos(streamoff __pos, \n+\t\t\t\t  ios_base::openmode /*__mode*/)\n+   { return fseek(_M_cfile, __pos, ios_base::beg); }\n+\n+  template<typename _CharT>\n+    int \n+    __basic_file<_CharT>::sync()\n+    { return fflush(_M_cfile); }\n+\n+  // NB: Unused.\n+  template<typename _CharT>\n+    int \n+    __basic_file<_CharT>::overflow(int /*__c*/) \n+    { return EOF; }\n+\n+  // NB: Unused.\n+  template<typename _CharT>\n+    int \n+    __basic_file<_CharT>::underflow()  \n+    { return EOF; } \n+\n+  // NB: Unused.\n+  template<typename _CharT>\n+    int \n+    __basic_file<_CharT>::uflow()  \n+    { return EOF; }\n+\n+  // NB: Unused.\n+  template<typename _CharT>\n+    int \n+    __basic_file<_CharT>::pbackfail(int /*__c*/) \n+    { return EOF; } \n+ \n+ // NB: Unused.\n+  template<typename _CharT>\n+    streambuf* \n+    __basic_file<_CharT>::setbuf(_CharT* /*__b*/, int /*__len*/)\n+    { return reinterpret_cast<streambuf*>(this); }\n+\n+  // NB: Unused.\n+  template<typename _CharT>\n+    int \n+    __basic_file<_CharT>::doallocate() \n+    { return EOF; }\n+\n+  // NB: Unused.\n+  template<typename _CharT>\n+    streamsize \n+    __basic_file<_CharT>::sys_read(_CharT* __s, streamsize __n) \n+    { return fread(__s, 1, __n, _M_cfile); }\n+\n+  // NB: Unused.    \n+  template<typename _CharT>\n+    streamsize \n+    __basic_file<_CharT>::sys_write(const _CharT* __s, streamsize __n) \n+    { return fwrite(__s, 1, __n, _M_cfile); }\n+\n+  // NB: Unused.\n+  template<typename _CharT>\n+    streamoff\n+    __basic_file<_CharT>::sys_seek(streamoff __pos, ios_base::seekdir __way)\n+   { return fseek(_M_cfile, __pos, __way); }\n+  \n+  // NB: Unused.\n+  template<typename _CharT>\n+    int \n+    __basic_file<_CharT>::sys_close() \n+    { return fclose(_M_cfile); }\n+\n+  // NB: Unused.\n+  template<typename _CharT>\n+    int \n+    __basic_file<_CharT>::sys_stat(void* /*__v*/) \n+    { return EOF; }\n+\n+  // NB: Unused.\n+  template<typename _CharT>\n+    int \n+    __basic_file<_CharT>::showmanyc() \n+    { return EOF; }\n+\n+  // NB: Unused.\n+  template<typename _CharT>\n+    void \n+    __basic_file<_CharT>::imbue(void* /*__v*/) { }\n+\n+  // Need to instantiate base class here for type-info bits, etc\n+  template struct __basic_file_base<char>;\n+  template class __basic_file<char>;\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  template struct __basic_file_base<wchar_t>;\n+  template class __basic_file<wchar_t>;\n+#endif\n+}  // namespace std\n+\n+"}, {"sha": "134d0544b8dddd679ca003fc4b9ba24930c476f4", "filename": "libstdc++-v3/config/c_io_stdio.h", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9717c75cf1d01efa1ba16b91aeb6808e38271ce0/libstdc%2B%2B-v3%2Fconfig%2Fc_io_stdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9717c75cf1d01efa1ba16b91aeb6808e38271ce0/libstdc%2B%2B-v3%2Fconfig%2Fc_io_stdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fc_io_stdio.h?ref=9717c75cf1d01efa1ba16b91aeb6808e38271ce0", "patch": "@@ -0,0 +1,115 @@\n+// underlying io library  -*- C++ -*-\n+\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// c_io_stdio.h - Defines for using \"C\" stdio.h\n+\n+#ifndef _CPP_IO_STDIO_H\n+#define _CPP_IO_STDIO_H 1\n+\n+#include <stdio.h>\n+#include <bits/c++threads.h>\n+\n+namespace std {\n+\n+// from fpos.h\n+  typedef long  \tstreamoff;\n+  typedef size_t \tstreamsize; // Signed integral type\n+#if _GLIBCPP_USE_WCHAR_T\n+  typedef long  \twstreamoff;\n+  typedef size_t \twstreamsize;\n+#endif\n+  typedef fpos_t  \t__c_streampos;\n+\n+#ifdef _GLIBCPP_USE_THREADS\n+  typedef __mutext_type __c_lock;\n+#else\n+  typedef int          \t__c_lock;\n+#endif\n+\n+// from basic_file.h\n+#define _GLIBCPP_BASIC_FILE_ENCAPSULATION 1\n+  typedef FILE __c_file_type;\n+\n+  typedef _IO_wide_data __c_wfile_type;\n+\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  extern \"C\" struct __c_libio_codecvt { };\n+#endif \n+\n+// from ios_base.h\n+  struct __ios_flags\n+ {\n+   typedef short __int_type;\n+\n+   static const __int_type _S_boolalpha =\t0x0001;\n+   static const __int_type _S_dec =\t\t0x0002;\n+   static const __int_type _S_fixed = \t\t0x0004;\n+   static const __int_type _S_hex =\t\t0x0008;\n+   static const __int_type _S_internal = \t0x0010;\n+   static const __int_type _S_left =   \t\t0x0020;\n+   static const __int_type _S_oct =\t\t0x0040;\n+   static const __int_type _S_right =\t\t0x0080;\n+   static const __int_type _S_scientific =\t0x0100;\n+   static const __int_type _S_showbase =       \t0x0200;\n+   static const __int_type _S_showpoint =\t0x0400;\n+   static const __int_type _S_showpos =\t\t0x0800;\n+   static const __int_type _S_skipws =\t\t0x1000;\n+   static const __int_type _S_unitbuf =\t\t0x2000;\n+   static const __int_type _S_uppercase\t=\t0x4000;\n+   static const __int_type _S_adjustfield =\t0x0020 | 0x0080 | 0x0010;\n+   static const __int_type _S_basefield =\t0x0002 | 0x0040 | 0x0008;\n+   static const __int_type _S_floatfield =\t0x0100 | 0x0004;\n+\n+    // 27.4.2.1.3  Type ios_base::iostate\n+   static const __int_type _S_badbit =\t\t0x01;\n+   static const __int_type _S_eofbit =\t\t0x02;\n+   static const __int_type _S_failbit =\t\t0x04;\n+\n+    // 27.4.2.1.4  Type openmode\n+   static const __int_type _S_app =\t\t0x01;\n+   static const __int_type _S_ate =\t\t0x02;\n+   static const __int_type _S_bin =\t\t0x04;\n+   static const __int_type _S_in =\t\t0x08;\n+   static const __int_type _S_out =\t\t0x10;\n+   static const __int_type _S_trunc =\t\t0x20;\n+  };\n+\n+}\n+\n+#endif // _CPP_IO_STDIO_H\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+"}, {"sha": "af661a4497954cd90db2a2365604d2deef1d54f7", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1017, "deletions": 1021, "changes": 2038, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9717c75cf1d01efa1ba16b91aeb6808e38271ce0/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9717c75cf1d01efa1ba16b91aeb6808e38271ce0/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=9717c75cf1d01efa1ba16b91aeb6808e38271ce0"}, {"sha": "58c13985727d3b640a27c77221b1721ed08fdf77", "filename": "libstdc++-v3/docs/configopts.html", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9717c75cf1d01efa1ba16b91aeb6808e38271ce0/libstdc%2B%2B-v3%2Fdocs%2Fconfigopts.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9717c75cf1d01efa1ba16b91aeb6808e38271ce0/libstdc%2B%2B-v3%2Fdocs%2Fconfigopts.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fconfigopts.html?ref=9717c75cf1d01efa1ba16b91aeb6808e38271ce0", "patch": "@@ -9,7 +9,7 @@\n    <TITLE>libstdc++-v3 configure options</TITLE>\n <LINK REL=\"home\" HREF=\"http://sources.redhat.com/libstdc++/\">\n <LINK REL=StyleSheet HREF=\"lib3styles.css\">\n-<!-- $Id: configopts.html,v 1.14 2000/10/25 14:41:16 bkoz Exp $ -->\n+<!-- $Id: configopts.html,v 1.15 2000/10/26 14:56:04 bkoz Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -67,10 +67,7 @@ <H1 CLASS=\"centered\"><A NAME=\"top\">Interesting <TT>configure</TT>\n         snapshot 2.90.8, the choices are 'libio' to specify the GNU\n         I/O package (from\n         <A HREF=\"http://sources.redhat.com/glibc/\">glibc</A>, the\n-        GNU C library), or 'wince' to specify the Microsoft Windows CE\n-        library.  Eventually a generic cstdio interface will be added\n-        so that people who want to use libstdc++-v3 with say, the Palm\n-        Pilot, will be able to use libstdc++-v3 without libio.\n+        GNU C library), or 'stdio' to use a generic \"C\" abstraction.\n      </P>\n \n  <DT><TT>--enable-long-long  </TT>\n@@ -185,7 +182,7 @@ <H1 CLASS=\"centered\"><A NAME=\"top\">Interesting <TT>configure</TT>\n \n <HR>\n <P CLASS=\"fineprint\"><EM>\n-$Id: configopts.html,v 1.14 2000/10/25 14:41:16 bkoz Exp $\n+$Id: configopts.html,v 1.15 2000/10/26 14:56:04 bkoz Exp $\n </EM></P>\n \n "}, {"sha": "902337a801c4d882b50998831a2a7b6e723fd21b", "filename": "libstdc++-v3/include/bits/basic_file.h", "status": "modified", "additions": 2, "deletions": 94, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9717c75cf1d01efa1ba16b91aeb6808e38271ce0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_file.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9717c75cf1d01efa1ba16b91aeb6808e38271ce0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_file.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_file.h?ref=9717c75cf1d01efa1ba16b91aeb6808e38271ce0", "patch": "@@ -128,7 +128,8 @@ namespace std {\n       __basic_file(__c_lock* __lock = 0);\n       \n       void \n-      _M_open_mode(ios_base::openmode __mode, int& __p_mode, int& __rw_mode);\n+      _M_open_mode(ios_base::openmode __mode, int& __p_mode, int& __rw_mode, \n+\t\t   char* __c_mode);\n       \n       // Eqivalent to the normal fopen function.\n       __basic_file* \n@@ -234,99 +235,6 @@ namespace std {\n       virtual void \n       imbue(void* __v);\n     };\n-\n-  // __basic_file<char> specializations\n-  template<>\n-    __basic_file<char>::__basic_file(__c_lock* __lock);\n-\n-  template<>\n-    int \n-    __basic_file<char>::overflow(int __c);\n-\n-  template<>\n-    int \n-    __basic_file<char>::underflow();\n-\n-  template<>\n-    int \n-    __basic_file<char>::uflow();\n-\n-  template<>\n-    int \n-    __basic_file<char>::pbackfail(int __c);\n-\n-  template<>\n-    streamsize \n-    __basic_file<char>::xsputn(const char* __s, streamsize __n);\n-\n-  template<>\n-    streamoff\n-    __basic_file<char>::seekoff(streamoff __off, ios_base::seekdir __way, \n-\t\t\t\tios_base::openmode __mode);\n-\n-  template<>\n-    streamoff\n-    __basic_file<char>::seekpos(streamoff __pos, ios_base::openmode __mode);\n-\n-  template<>\n-    streambuf* \n-    __basic_file<char>::setbuf(char* __b, int __len);\n-\n-  template<>\n-    int \n-    __basic_file<char>::sync();\n-\n-  template<>\n-    int \n-    __basic_file<char>::doallocate();\n-\n-  // __basic_file<wchar_t> specializations\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-  template<>\n-    __basic_file<wchar_t>::__basic_file(__c_lock* __lock);\n-\n-  template<>\n-    int \n-    __basic_file<wchar_t>::overflow(int __c);\n-\n-  template<>\n-    int \n-    __basic_file<wchar_t>::underflow();\n-\n-  template<>\n-    int \n-    __basic_file<wchar_t>::uflow();\n-\n-  template<>\n-    int \n-    __basic_file<wchar_t>::pbackfail(int __c);\n-\n-  template<>\n-    streamsize \n-    __basic_file<wchar_t>::xsputn(const wchar_t* __s, streamsize __n);\n-\n-  template<>\n-    streamoff\n-    __basic_file<wchar_t>::seekoff(streamoff __off, ios_base::seekdir __way, \n-\t\t\t\tios_base::openmode __mode);\n-\n-  template<>\n-    streamoff\n-    __basic_file<wchar_t>::seekpos(streamoff __pos, ios_base::openmode __mode);\n-\n-  template<>\n-    streambuf* \n-    __basic_file<wchar_t>::setbuf(wchar_t* __b, int __len);\n-\n-  template<>\n-    int \n-    __basic_file<wchar_t>::sync();\n-\n-  template<>\n-    int \n-    __basic_file<wchar_t>::doallocate();\n-#endif\n-\n } // namespace std\n \n #endif\t/* _CPP_BASIC_FILE */"}, {"sha": "dda8aed9848d09dfb0225f98dcba9f085f29918d", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9717c75cf1d01efa1ba16b91aeb6808e38271ce0/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9717c75cf1d01efa1ba16b91aeb6808e38271ce0/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=9717c75cf1d01efa1ba16b91aeb6808e38271ce0", "patch": "@@ -120,21 +120,14 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES = \\\n-\t-nostdinc++ \\\n-\t-I$(top_builddir)/include -I$(GLIBCPP_INCLUDE_DIR) \\\n-\t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n+INCLUDES =  \t-nostdinc++ \t-I$(top_builddir)/include -I$(GLIBCPP_INCLUDE_DIR) \t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n \n \n-libio_headers = \\\n-        libio.h libioP.h iolibio.h\n+libio_headers =          libio.h libioP.h iolibio.h\n \n-@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = @GLIBCPP_NEED_LIBIO_TRUE@\\\n-@GLIBCPP_NEED_LIBIO_TRUE@\tfiledoalloc.c genops.c fileops.c stdfiles.c c_codecvt.c iofclose.c \\\n-@GLIBCPP_NEED_LIBIO_TRUE@    iofopen.c stdio.c\n+@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = \tfiledoalloc.c genops.c fileops.c stdfiles.c c_codecvt.c iofclose.c     iofopen.c stdio.c\n @GLIBCPP_NEED_LIBIO_FALSE@LIBIO_SRCS = \n-@GLIBCPP_NEED_WLIBIO_TRUE@LIBIO_WSRCS = @GLIBCPP_NEED_WLIBIO_TRUE@\\\n-@GLIBCPP_NEED_WLIBIO_TRUE@\twfiledoalloc.c wfileops.c wgenops.c iofwide.c\n+@GLIBCPP_NEED_WLIBIO_TRUE@LIBIO_WSRCS = \twfiledoalloc.c wfileops.c wgenops.c iofwide.c\n @GLIBCPP_NEED_WLIBIO_FALSE@LIBIO_WSRCS = \n \n EXTRA_DIST = iostreamP.h"}, {"sha": "6b9b7043f264c19622683c5962c6a2db363ca754", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9717c75cf1d01efa1ba16b91aeb6808e38271ce0/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9717c75cf1d01efa1ba16b91aeb6808e38271ce0/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=9717c75cf1d01efa1ba16b91aeb6808e38271ce0", "patch": "@@ -111,31 +111,18 @@ AUTOMAKE_OPTIONS = 1.3 cygnus\n \n noinst_LTLIBRARIES = libmath.la\n \n-EXTRA_LONG_DOUBLE_yes = \\\n-\tccosl.c cexpl.c c_logl.c clog10l.c cpowl.c csinhl.c \\\n-\tcsqrtl.c ctanhl.c ctanl.c cargl.c hypotl.c \\\n-\tsignbitl.c cabsl.c \n+EXTRA_LONG_DOUBLE_yes =  \tccosl.c cexpl.c c_logl.c clog10l.c cpowl.c csinhl.c \tcsqrtl.c ctanhl.c ctanl.c cargl.c hypotl.c \tsignbitl.c cabsl.c \n \n \n-EXTRA_DIST = \\\n-\tccos.c ccosf.c ccosh.c ccoshf.c ccoshl.c \\\n-\tcexp.c cexpf.c c_log.c c_logf.c  clog10.c clog10f.c \\\n-\tcpow.c cpowf.c csin.c csinf.c csinh.c csinhf.c \\\n-\tcsinl.c csqrt.c csqrtf.c  ctan.c ctanf.c ctanh.c \\\n-\tctanhf.c  carg.c cargf.c hypot.c hypotf.c\\\n-\tatan2f.c expf.c \\\n-\t$(EXTRA_LONG_DOUBLE_yes) \n+EXTRA_DIST =  \tccos.c ccosf.c ccosh.c ccoshf.c ccoshl.c \tcexp.c cexpf.c c_log.c c_logf.c  clog10.c clog10f.c \tcpow.c cpowf.c csin.c csinf.c csinh.c csinhf.c \tcsinl.c csqrt.c csqrtf.c  ctan.c ctanf.c ctanh.c \tctanhf.c  carg.c cargf.c hypot.c hypotf.c \tatan2f.c expf.c \t$(EXTRA_LONG_DOUBLE_yes) \n \n \n-libmath_la_LIBADD = \\\n-\t@LIBMATHOBJS@ \\\n-\t$(EXTRA_LONG_DOUBLE_$(USE_COMPLEX_LONG_DOUBLE)) \n+libmath_la_LIBADD =  \t@LIBMATHOBJS@ \t$(EXTRA_LONG_DOUBLE_$(USE_COMPLEX_LONG_DOUBLE)) \n \n \n libmath_la_DEPENDENCIES = $(libmath_la_LIBADD)\n \n-libmath_la_SOURCES = \\\n-\tsignbit.c signbitf.c\n+libmath_la_SOURCES =  \tsignbit.c signbitf.c\n \n \n LINK = $(LIBTOOL) --mode=link \"$(CCLD)\" $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@\n@@ -149,9 +136,7 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES = \\\n-\t-I$(GLIBCPP_INCLUDE_DIR) -I$(top_builddir)/include  \\\n-\t$(TOPLEVEL_INCLUDES) \n+INCLUDES =  \t-I$(GLIBCPP_INCLUDE_DIR) -I$(top_builddir)/include  \t$(TOPLEVEL_INCLUDES) \n \n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = ../config.h"}, {"sha": "e52e1c4fc0007863a230064e3c927dfc9e6534a3", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 17, "deletions": 44, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9717c75cf1d01efa1ba16b91aeb6808e38271ce0/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9717c75cf1d01efa1ba16b91aeb6808e38271ce0/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=9717c75cf1d01efa1ba16b91aeb6808e38271ce0", "patch": "@@ -109,12 +109,12 @@ MAINT_CHARSET = latin1\n \n # Cross compiler and multilib support.\n # Install a library built with a cross compiler in tooldir, not libdir.\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@gcc_version = @USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@@gcc_version@\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexecdir = @USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@$(libdir)/gcc-lib/$(target_alias)\n-@USE_LIBDIR_FALSE@toolexecdir = @USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexeclibdir = @USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@$(toolexecdir)/$(gcc_version)\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_FALSE@toolexeclibdir = @USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_FALSE@$(libdir)$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexeclibdir = @USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@gcc_version = @gcc_version@\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexecdir = $(libdir)/gcc-lib/$(target_alias)\n+@USE_LIBDIR_FALSE@toolexecdir = $(exec_prefix)/$(target_alias)\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexeclibdir = $(toolexecdir)/$(gcc_version)\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_FALSE@toolexeclibdir = $(libdir)$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexeclibdir = $(toolexecdir)/lib$(MULTISUBDIR)\n \n # Need this library to both be part of libstdc++.a, and installed\n # separately too.\n@@ -130,13 +130,11 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS = \\\n-\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n \n \n # Warning flags to use.\n-WARN_CXXFLAGS = \\\n-\t@WARN_FLAGS@ $(WERROR) @WFMT_FLAGS@\n+WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) @WFMT_FLAGS@\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -148,38 +146,20 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES = \\\n-\t-I$(top_srcdir)/../gcc -I$(top_srcdir)/../include \\\n-\t$(CSHADOW_INCLUDES)  $(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDE_DIR) \\\n-\t$(CONFIG_INCLUDES) -I$(top_builddir)/include\n+INCLUDES =  \t-I$(top_srcdir)/../gcc -I$(top_srcdir)/../include \t$(CSHADOW_INCLUDES)  $(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDE_DIR) \t$(CONFIG_INCLUDES) -I$(top_builddir)/include\n \n \n-headers = \\\n-\tcxxabi.h exception new new.h typeinfo\n+headers =  \tcxxabi.h exception new new.h typeinfo\n \n \n-sources = \\\n-\tdel_op.cc \\\n-\tdel_opnt.cc \\\n-\tdel_opv.cc \\\n-\tdel_opvnt.cc \\\n-\texception_support.cc \\\n-\tnew_handler.cc \\\n-\tnew_op.cc \\\n-\tnew_opnt.cc \\\n-\tnew_opv.cc \\\n-\tnew_opvnt.cc \\\n-\tpure.cc \\\n-\ttinfo.cc \\\n-\ttinfo2.cc \\\n-\tvec.cc\n+sources =  \tdel_op.cc \tdel_opnt.cc \tdel_opv.cc \tdel_opvnt.cc \texception_support.cc \tnew_handler.cc \tnew_op.cc \tnew_opnt.cc \tnew_opv.cc \tnew_opvnt.cc \tpure.cc \ttinfo.cc \ttinfo2.cc \tvec.cc\n \n \n libsupc___la_SOURCES = $(sources)\n libsupc__convenience_la_SOURCES = $(sources)\n-@GXX_INCLUDE_DIR_TRUE@glibcppinstalldir = @GXX_INCLUDE_DIR_TRUE@@gxx_include_dir@\n-@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@glibcppinstalldir = @GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@$(libdir)/gcc-lib/$(target_alias)/@gcc_version@/include/g++\n-@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@glibcppinstalldir = @GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@$(prefix)/include/g++-@libstdcxx_interface@\n+@GXX_INCLUDE_DIR_TRUE@glibcppinstalldir = @gxx_include_dir@\n+@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@glibcppinstalldir = $(libdir)/gcc-lib/$(target_alias)/@gcc_version@/include/g++\n+@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@glibcppinstalldir = $(prefix)/include/g++-@libstdcxx_interface@\n \n glibcppinstall_HEADERS = $(headers)\n \n@@ -192,12 +172,7 @@ LIBSUPCXX_CXXFLAGS = -prefer-pic\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion call for it. (ie, --enable-debug)\n-AM_CXXFLAGS = \\\n-\t-fno-implicit-templates \\\n-\t$(LIBSUPCXX_CXXFLAGS) \\\n-\t$(WARN_CXXFLAGS) \\\n-\t$(OPTIMIZE_CXXFLAGS) \\\n-\t$(CONFIG_CXXFLAGS) \n+AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n \n \n # libstdc++ libtool notes\n@@ -218,16 +193,14 @@ AM_CXXFLAGS = \\\n # correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n # attempt to infer which configuration to use\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n-\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We have a problem when building the shared libstdc++ object if\n # the rules automake generates would be used.  We cannot allow CXX to\n # be used in libtool since this would add -lstdc++ to the link line\n # which of course is problematic at this point.\n-CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" \\\n-\t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" \t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = ../config.h"}, {"sha": "2a9b4c0a7816fd63a12d63e3bd1bc113339fa3b8", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 36, "deletions": 133, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9717c75cf1d01efa1ba16b91aeb6808e38271ce0/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9717c75cf1d01efa1ba16b91aeb6808e38271ce0/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=9717c75cf1d01efa1ba16b91aeb6808e38271ce0", "patch": "@@ -109,12 +109,12 @@ MAINT_CHARSET = latin1\n \n # Cross compiler and multilib support.\n # Install a library built with a cross compiler in tooldir, not libdir.\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@gcc_version = @USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@@gcc_version@\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexecdir = @USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@$(libdir)/gcc-lib/$(target_alias)\n-@USE_LIBDIR_FALSE@toolexecdir = @USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexeclibdir = @USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@$(toolexecdir)/$(gcc_version)\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_FALSE@toolexeclibdir = @USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_FALSE@$(libdir)$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexeclibdir = @USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@gcc_version = @gcc_version@\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexecdir = $(libdir)/gcc-lib/$(target_alias)\n+@USE_LIBDIR_FALSE@toolexecdir = $(exec_prefix)/$(target_alias)\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexeclibdir = $(toolexecdir)/$(gcc_version)\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_FALSE@toolexeclibdir = $(libdir)$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexeclibdir = $(toolexecdir)/lib$(MULTISUBDIR)\n \n toolexeclib_LTLIBRARIES = libstdc++.la\n EXTRA_LTLIBRARIES = libinst-string.la libinst-wstring.la\n@@ -126,13 +126,11 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS = \\\n-\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n \n \n # Warning flags to use.\n-WARN_CXXFLAGS = \\\n-\t@WARN_FLAGS@ $(WERROR) @WFMT_FLAGS@\n+WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) @WFMT_FLAGS@\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -144,119 +142,34 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES = \\\n-\t-D_GNU_SOURCE -D_ISOC99_SOURCE -nostdinc++ \\\n-\t$(CSHADOW_INCLUDES) $(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDE_DIR) \\\n-\t$(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) -I$(top_builddir)/include \\\n-\t$(TOPLEVEL_INCLUDES)\t\n-\n-\n-base_headers = \\\n-\tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \\\n-\tbits/basic_string.h bits/std_string.h  bits/string.tcc \\\n-\tbits/generic_shadow.h bits/std_utility.h \\\n-\tbits/std_complex.h \\\n-\tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \\\n-\tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \\\n-\tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \\\n-\tbits/exception_support.h \\\n-\tbits/std_fstream.h bits/std_iomanip.h \\\n-\tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \\\n-\tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \\\n-\tbits/std_istream.h bits/istream.tcc bits/std_locale.h \\\n-\tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \\\n-\tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \\\n-\tbits/streambuf.tcc bits/basic_file.h \\\n-\tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \\\n-\tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \\\n-\tbits/stl_threads.h bits/stl_iterator_base.h \\\n-\tbackward/algo.h backward/algobase.h backward/alloc.h \\\n-\tbackward/bvector.h backward/defalloc.h backward/deque.h \\\n-\tbackward/function.h backward/hash_map.h backward/hash_set.h \\\n-\tbackward/hashtable.h backward/heap.h backward/iterator.h \\\n-\tbackward/list.h backward/map.h backward/multimap.h backward/new.h \\\n-\tbackward/multiset.h backward/pair.h backward/iostream.h \\\n-\tbackward/rope.h backward/set.h backward/slist.h backward/stack.h \\\n-\tbackward/tempbuf.h backward/tree.h backward/vector.h \\\n-\tbackward/fstream.h \\\n-\tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \\\n-\tbits/std_iterator.h bits/std_list.h \\\n-\tbits/std_map.h bits/std_memory.h bits/std_numeric.h \\\n-\tbits/std_queue.h bits/std_set.h bits/std_stack.h \\\n-\tbits/std_stdexcept.h bits/std_vector.h \\\n-\tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \\\n-\tbits/stl_deque.h bits/stl_function.h \\\n-\tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \\\n-\tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \\\n-\tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \\\n-\tbits/stl_relops.h bits/stl_set.h \\\n-\tbits/stl_stack.h bits/stl_string_fwd.h bits/stl_tempbuf.h \\\n-\tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \\\n-\tbits/type_traits.h bits/stl_range_errors.h bits/std_algorithm.h \\\n-\tbits/concept_checks.h bits/container_concepts.h \\\n-\tbits/sequence_concepts.h bits/std_strstream.h \\\n-\text/ropeimpl.h ext/stl_rope.h \\\n-\text/stl_bvector.h bits/stl_config.h bits/stl_construct.h \\\n-\text/stl_hashtable.h ext/stl_hash_fun.h \\\n-\text/hash_map ext/hash_set ext/rope ext/slist \\\n-\text/tree ext/bvector \n-\n-\n-c_base_headers = \\\n-\tbits/std_cassert.h bits/std_cctype.h bits/std_cerrno.h \\\n-\tbits/std_cfloat.h bits/std_climits.h bits/std_clocale.h \\\n-\tbits/std_cmath.h bits/std_csetjmp.h bits/std_csignal.h \\\n-\tbits/std_cstdarg.h bits/std_cstddef.h bits/std_cstdio.h \\\n-\tbits/std_cstdlib.h bits/std_cstring.h bits/std_ctime.h \\\n-\tbits/std_cwchar.h bits/std_cwctype.h \n-\n-\n-c_shadow_headers = \\\n-\tassert.h ctype.h errno.h float.h limits.h locale.h math.h setjmp.h \\\n-\tsignal.h stdarg.h stddef.h stdio.h stdlib.h string.h time.h wchar.h \\\n-\twctype.h fcntl.h libio.h iolibio.h libioP.h pthread.h iconv.h \\\n-\tfeatures.h \\\n-\tbits/wrap_libio.h bits/wrap_iolibio.h bits/wrap_libioP.h \\\n-\tbits/wrap_iconv.h bits/wrap_fcntl.h bits/wrap_pthread.h \\\n-\tbits/wrap_features.h \\\n-\tsys/cdefs.h \n-\n-@GLIBCPP_USE_CSHADOW_TRUE@c_headers = @GLIBCPP_USE_CSHADOW_TRUE@$(c_base_headers) $(c_shadow_headers)\n-@GLIBCPP_USE_CSHADOW_FALSE@c_headers = @GLIBCPP_USE_CSHADOW_FALSE@$(c_base_headers)\n-\n-std_headers = \\\n-\talgorithm bitset complex deque fstream functional \\\n-\tiomanip ios iosfwd iostream istream iterator limits list locale \\\n-\tmap memory numeric ostream queue set sstream stack stdexcept \\\n-\tstreambuf string strstream utility valarray vector \\\n-\tcassert cctype cerrno cfloat climits clocale ciso646 \\\n-\tcmath csetjmp csignal cstdarg cstddef cstdio cstdlib \\\n-\tcstring ctime cwchar cwctype\n-\n-@GLIBCPP_NEED_LIBIO_TRUE@libio_headers = @GLIBCPP_NEED_LIBIO_TRUE@\\\n-@GLIBCPP_NEED_LIBIO_TRUE@\t$(top_srcdir)/libio/_G_config.h $(top_srcdir)/libio/libio.h\n+INCLUDES =  \t-D_GNU_SOURCE -D_ISOC99_SOURCE -nostdinc++ \t$(CSHADOW_INCLUDES) $(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDE_DIR) \t$(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) -I$(top_builddir)/include \t$(TOPLEVEL_INCLUDES)\t\n+\n+\n+base_headers =  \tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \tbits/basic_string.h bits/std_string.h  bits/string.tcc \tbits/generic_shadow.h bits/std_utility.h \tbits/std_complex.h \tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \tbits/exception_support.h \tbits/std_fstream.h bits/std_iomanip.h \tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \tbits/std_istream.h bits/istream.tcc bits/std_locale.h \tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \tbits/streambuf.tcc bits/basic_file.h \tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \tbits/stl_threads.h bits/stl_iterator_base.h \tbackward/algo.h backward/algobase.h backward/alloc.h \tbackward/bvector.h backward/defalloc.h backward/deque.h \tbackward/function.h backward/hash_map.h backward/hash_set.h \tbackward/hashtable.h backward/heap.h backward/iterator.h \tbackward/list.h backward/map.h backward/multimap.h backward/new.h \tbackward/multiset.h backward/pair.h backward/iostream.h \tbackward/rope.h backward/set.h backward/slist.h backward/stack.h \tbackward/tempbuf.h backward/tree.h backward/vector.h \tbackward/fstream.h \tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \tbits/std_iterator.h bits/std_list.h \tbits/std_map.h bits/std_memory.h bits/std_numeric.h \tbits/std_queue.h bits/std_set.h bits/std_stack.h \tbits/std_stdexcept.h bits/std_vector.h \tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \tbits/stl_deque.h bits/stl_function.h \tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \tbits/stl_relops.h bits/stl_set.h \tbits/stl_stack.h bits/stl_string_fwd.h bits/stl_tempbuf.h \tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \tbits/type_traits.h bits/stl_range_errors.h bits/std_algorithm.h \tbits/concept_checks.h bits/container_concepts.h \tbits/sequence_concepts.h bits/std_strstream.h \text/ropeimpl.h ext/stl_rope.h \text/stl_bvector.h bits/stl_config.h bits/stl_construct.h \text/stl_hashtable.h ext/stl_hash_fun.h \text/hash_map ext/hash_set ext/rope ext/slist \text/tree ext/bvector \n+\n+\n+c_base_headers =  \tbits/std_cassert.h bits/std_cctype.h bits/std_cerrno.h \tbits/std_cfloat.h bits/std_climits.h bits/std_clocale.h \tbits/std_cmath.h bits/std_csetjmp.h bits/std_csignal.h \tbits/std_cstdarg.h bits/std_cstddef.h bits/std_cstdio.h \tbits/std_cstdlib.h bits/std_cstring.h bits/std_ctime.h \tbits/std_cwchar.h bits/std_cwctype.h \n+\n+\n+c_shadow_headers =  \tassert.h ctype.h errno.h float.h limits.h locale.h math.h setjmp.h \tsignal.h stdarg.h stddef.h stdio.h stdlib.h string.h time.h wchar.h \twctype.h fcntl.h libio.h iolibio.h libioP.h pthread.h iconv.h \tfeatures.h \tbits/wrap_libio.h bits/wrap_iolibio.h bits/wrap_libioP.h \tbits/wrap_iconv.h bits/wrap_fcntl.h bits/wrap_pthread.h \tbits/wrap_features.h \tsys/cdefs.h \n+\n+@GLIBCPP_USE_CSHADOW_TRUE@c_headers = $(c_base_headers) $(c_shadow_headers)\n+@GLIBCPP_USE_CSHADOW_FALSE@c_headers = $(c_base_headers)\n+\n+std_headers =  \talgorithm bitset complex deque fstream functional \tiomanip ios iosfwd iostream istream iterator limits list locale \tmap memory numeric ostream queue set sstream stack stdexcept \tstreambuf string strstream utility valarray vector \tcassert cctype cerrno cfloat climits clocale ciso646 \tcmath csetjmp csignal cstdarg cstddef cstdio cstdlib \tcstring ctime cwchar cwctype\n+\n+@GLIBCPP_NEED_LIBIO_TRUE@libio_headers = \t$(top_srcdir)/libio/_G_config.h $(top_srcdir)/libio/libio.h\n @GLIBCPP_NEED_LIBIO_FALSE@libio_headers = \n \n-build_headers = \\\n-\tbits/std_limits.h bits/c++config.h bits/c++io.h bits/c++threads.h \\\n-\tbits/atomicity.h bits/os_defines.h \\\n-\tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n+build_headers =  \tbits/std_limits.h bits/c++config.h bits/c++io.h bits/c++threads.h \tbits/atomicity.h bits/os_defines.h \tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n \n \n headers = $(base_headers) $(c_headers)\n \n-sources = \\\n-\tlimitsMEMBERS.cc \\\n-\tcmath.cc \\\n-\tcomplex.cc complexf.cc complexl.cc complex_io.cc \\\n-\tstdexcept.cc \\\n-\tc++io.cc ios.cc stdstreams.cc strstream.cc \\\n-\tlocale.cc localename.cc codecvt.cc \\\n-\tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc string-inst.cc\n+sources =  \tlimitsMEMBERS.cc \tcmath.cc \tcomplex.cc complexf.cc complexl.cc complex_io.cc \tstdexcept.cc \tc++io.cc ios.cc stdstreams.cc strstream.cc \tlocale.cc localename.cc codecvt.cc \tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc string-inst.cc\n \n \n-wstring_sources = \\\n-\twstring-inst.cc\n+wstring_sources =  \twstring-inst.cc\n \n VPATH =  $(top_srcdir) $(top_srcdir)/src $(GLIBCPP_INCLUDE_DIR)  $(GLIBCPP_INCLUDE_DIR)/std $(C_INCLUDE_DIR)\n \n@@ -267,32 +180,24 @@ libstdc___la_SOURCES = $(sources)\n \n libinst_wstring_la_SOURCES = $(wstring_sources)\n \n-libstdc___la_LIBADD = \\\n-\t../libmath/libmath.la ../libio/libio.la \\\n-\t../libsupc++/libsupc++convenience.la \\\n-\t@libinst_wstring_la@\n+libstdc___la_LIBADD =  \t../libmath/libmath.la ../libio/libio.la \t../libsupc++/libsupc++convenience.la \t@libinst_wstring_la@\n \n \n libstdc___la_LDFLAGS = -version-info 3:0:0 -lm\n \n libstdc___la_DEPENDENCIES = $(libstdc___la_LIBADD)\n-@GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_H = @GLIBCPP_USE_CSHADOW_TRUE@$(top_builddir)/stamp-cshadow\n+@GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_H = $(top_builddir)/stamp-cshadow\n @GLIBCPP_USE_CSHADOW_FALSE@CSHADOW_H = \n-@GXX_INCLUDE_DIR_TRUE@myincludep = @GXX_INCLUDE_DIR_TRUE@@gxx_include_dir@\n-@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@myincludep = @GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@$(libdir)/gcc-lib/$(target_alias)/@gcc_version@/include/g++\n-@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@myincludep = @GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@$(prefix)/include/g++-@libstdcxx_interface@\n+@GXX_INCLUDE_DIR_TRUE@myincludep = @gxx_include_dir@\n+@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@myincludep = $(libdir)/gcc-lib/$(target_alias)/@gcc_version@/include/g++\n+@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@myincludep = $(prefix)/include/g++-@libstdcxx_interface@\n \n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n # modified in a per-library or per-sub-library way.  Need to manually\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion call for it. (ie, --enable-debug)\n-AM_CXXFLAGS = \\\n-\t-fno-implicit-templates \\\n-\t$(LIBSUPCXX_CXXFLAGS) \\\n-\t$(WARN_CXXFLAGS) \\\n-\t$(OPTIMIZE_CXXFLAGS) \\\n-\t$(CONFIG_CXXFLAGS) \n+AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n \n \n # libstdc++ libtool notes\n@@ -313,16 +218,14 @@ AM_CXXFLAGS = \\\n # correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n # attempt to infer which configuration to use\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n-\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We have a problem when building the shared libstdc++ object if\n # the rules automake generates would be used.  We cannot allow CXX to\n # be used in libtool since this would add -lstdc++ to the link line\n # which of course is problematic at this point.\n-CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" \\\n-\t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" \t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = ../config.h"}]}