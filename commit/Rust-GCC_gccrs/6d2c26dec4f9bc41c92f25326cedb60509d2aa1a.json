{"sha": "6d2c26dec4f9bc41c92f25326cedb60509d2aa1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQyYzI2ZGVjNGY5YmM0MWM5MmYyNTMyNmNlZGI2MDUwOWQyYWExYQ==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2007-10-03T12:59:57Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2007-10-03T12:59:57Z"}, "message": "re PR java/33639 (gcj generates assembler errors)\n\n2007-10-03  Andrew Haley  <aph@redhat.com>\n\n        PR java/33639\n        * class.c (mangled_classname): Detect and replace illegal\n        characters in assembly language symbols.\n        (gen_indirect_dispatch_tables): Call mangled_classname() on\n        the type.\n\nFrom-SVN: r128981", "tree": {"sha": "5cc89dbc00bbc10b8f999101d2d2ff45011e340d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cc89dbc00bbc10b8f999101d2d2ff45011e340d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d2c26dec4f9bc41c92f25326cedb60509d2aa1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d2c26dec4f9bc41c92f25326cedb60509d2aa1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d2c26dec4f9bc41c92f25326cedb60509d2aa1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d2c26dec4f9bc41c92f25326cedb60509d2aa1a/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "448d2cd2f73e2e16e2bdd5c407174afebf3ed845", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/448d2cd2f73e2e16e2bdd5c407174afebf3ed845", "html_url": "https://github.com/Rust-GCC/gccrs/commit/448d2cd2f73e2e16e2bdd5c407174afebf3ed845"}], "stats": {"total": 65, "additions": 63, "deletions": 2}, "files": [{"sha": "4378b8f26d89d778933ff8f739a8aac354caab2d", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d2c26dec4f9bc41c92f25326cedb60509d2aa1a/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d2c26dec4f9bc41c92f25326cedb60509d2aa1a/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=6d2c26dec4f9bc41c92f25326cedb60509d2aa1a", "patch": "@@ -1,3 +1,11 @@\n+2007-10-03  Andrew Haley  <aph@redhat.com>\n+\n+\tPR java/33639\n+\t* class.c (mangled_classname): Detect and replace illegal\n+\tcharacters in assembly language symbols.\n+\t(gen_indirect_dispatch_tables): Call mangled_classname() on\n+\tthe type.\n+\n 2007-09-27  Jakub Jelinek  <jakub@redhat.com>\n \n \t* lang.c (java_print_error_function): Add third argument."}, {"sha": "75ee58aaedd2091c91efc3602756ff4904bc5479", "filename": "gcc/java/class.c", "status": "modified", "additions": 55, "deletions": 2, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d2c26dec4f9bc41c92f25326cedb60509d2aa1a/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d2c26dec4f9bc41c92f25326cedb60509d2aa1a/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=6d2c26dec4f9bc41c92f25326cedb60509d2aa1a", "patch": "@@ -314,10 +314,63 @@ identifier_subst (const tree old_id,\n tree\n mangled_classname (const char *prefix, tree type)\n {\n+  tree result;\n   tree ident = TYPE_NAME (type);\n   if (TREE_CODE (ident) != IDENTIFIER_NODE)\n     ident = DECL_NAME (ident);\n-  return identifier_subst (ident, prefix, '.', '_', \"\");\n+  result = identifier_subst (ident, prefix, '.', '_', \"\");\n+\n+  /* Replace any characters that aren't in the set [0-9a-zA-Z_$] with\n+     \"_0xXX\".  Class names containing such chracters are uncommon, but\n+     they do sometimes occur in class files.  Without this check,\n+     these names cause assembly errors.\n+\n+     There is a possibility that a real class name could conflict with\n+     the identifier we generate, but it is unlikely and will\n+     immediately be detected as an assembler error.  At some point we\n+     should do something more elaborate (perhaps using the full\n+     unicode mangling scheme) in order to prevent such a conflict.  */\n+  {\n+    int i;\n+    const int len = IDENTIFIER_LENGTH (result);\n+    const char *p = IDENTIFIER_POINTER (result);\n+    int illegal_chars = 0;\n+\n+    /* Make two passes over the identifier.  The first pass is merely\n+       to count illegal characters; we need to do this in order to\n+       allocate a buffer.  */\n+    for (i = 0; i < len; i++)\n+      {\n+\tchar c = p[i];\n+\tillegal_chars += (! ISALNUM (c) && c != '_' && c != '$');\n+      }\n+\n+    /* And the second pass, which is rarely executed, does the\n+       rewriting.  */\n+    if (illegal_chars != 0)\n+      {\n+\tchar *buffer = alloca (illegal_chars * 4 + len + 1);\n+\tint j;\n+\n+\tfor (i = 0, j = 0; i < len; i++)\n+\t  {\n+\t    char c = p[i];\n+\t    if (! ISALNUM (c) && c != '_' && c != '$')\n+\t      {\n+\t\tbuffer[j++] = '_';\n+\t\tsprintf (&buffer[j], \"0x%02x\", c);\n+\t\tj += 4;\n+\t      }\n+\t    else\n+\t      buffer[j++] = c;\n+\t  }\n+\n+\tbuffer[j] = 0;\n+\tresult = get_identifier (buffer);\n+      }\n+  }\n+\n+  return result;\n }\n \n tree\n@@ -389,7 +442,7 @@ while (0)\n void\n gen_indirect_dispatch_tables (tree type)\n {\n-  const char *typename = IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (type)));\n+  const char *typename = IDENTIFIER_POINTER (mangled_classname (\"\", type));\n   {  \n     tree field = NULL;\n     char *buf = alloca (strlen (typename) + strlen (\"_catch_classes_\") + 1);"}]}