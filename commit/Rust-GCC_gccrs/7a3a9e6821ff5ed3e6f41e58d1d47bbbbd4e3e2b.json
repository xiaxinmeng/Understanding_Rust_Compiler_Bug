{"sha": "7a3a9e6821ff5ed3e6f41e58d1d47bbbbd4e3e2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2EzYTllNjgyMWZmNWVkM2U2ZjQxZTU4ZDFkNDdiYmJiZDRlM2UyYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-11-12T17:51:26Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-11-12T17:51:26Z"}, "message": "* include/std/complex (real, imag): Add ABI tag in C++11 mode.\n\nFrom-SVN: r193445", "tree": {"sha": "9d03c6c760c0b202a6f73035ff95c1763e7801ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d03c6c760c0b202a6f73035ff95c1763e7801ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a3a9e6821ff5ed3e6f41e58d1d47bbbbd4e3e2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a3a9e6821ff5ed3e6f41e58d1d47bbbbd4e3e2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a3a9e6821ff5ed3e6f41e58d1d47bbbbd4e3e2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a3a9e6821ff5ed3e6f41e58d1d47bbbbd4e3e2b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "132a1a23e66a62ab31f33c4fca10fadad9a4f05e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/132a1a23e66a62ab31f33c4fca10fadad9a4f05e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/132a1a23e66a62ab31f33c4fca10fadad9a4f05e"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "391e5d9010cdb107a8dc0b1c027f971439e7c042", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3a9e6821ff5ed3e6f41e58d1d47bbbbd4e3e2b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3a9e6821ff5ed3e6f41e58d1d47bbbbd4e3e2b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7a3a9e6821ff5ed3e6f41e58d1d47bbbbd4e3e2b", "patch": "@@ -1,3 +1,7 @@\n+2012-11-11  Jason Merrill  <jason@redhat.com>\n+\n+\t* include/std/complex (real, imag): Add ABI tag in C++11 mode.\n+\n 2012-11-11  Andreas Schwab  <schwab@linux-m68k.org>\n \n \t* doc/xml/chapter.txml: Remove whitespace inside <keyword>."}, {"sha": "b13b11becc5c0bd1929fadfaf822570ed5f6c194", "filename": "libstdc++-v3/include/std/complex", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3a9e6821ff5ed3e6f41e58d1d47bbbbd4e3e2b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3a9e6821ff5ed3e6f41e58d1d47bbbbd4e3e2b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex?ref=7a3a9e6821ff5ed3e6f41e58d1d47bbbbd4e3e2b", "patch": "@@ -141,9 +141,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus >= 201103L\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR 387. std::complex over-encapsulated.\n+      __attribute ((__abi_tag__ (\"cxx11\")))\n       constexpr _Tp \n       real() { return _M_real; }\n \n+      __attribute ((__abi_tag__ (\"cxx11\")))\n       constexpr _Tp \n       imag() { return _M_imag; }\n #else\n@@ -1061,9 +1063,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus >= 201103L\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR 387. std::complex over-encapsulated.\n+      __attribute ((__abi_tag__ (\"cxx11\")))\n       constexpr float \n       real() { return __real__ _M_value; }\n \n+      __attribute ((__abi_tag__ (\"cxx11\")))\n       constexpr float \n       imag() { return __imag__ _M_value; }\n #else\n@@ -1210,9 +1214,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus >= 201103L\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR 387. std::complex over-encapsulated.\n+      __attribute ((__abi_tag__ (\"cxx11\")))\n       constexpr double \n       real() { return __real__ _M_value; }\n \n+      __attribute ((__abi_tag__ (\"cxx11\")))\n       constexpr double \n       imag() { return __imag__ _M_value; }\n #else\n@@ -1360,9 +1366,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus >= 201103L\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR 387. std::complex over-encapsulated.\n+      __attribute ((__abi_tag__ (\"cxx11\")))\n       constexpr long double \n       real() { return __real__ _M_value; }\n \n+      __attribute ((__abi_tag__ (\"cxx11\")))\n       constexpr long double \n       imag() { return __imag__ _M_value; }\n #else"}, {"sha": "a84546672288cf12d6e74ef26f10a98d3674f620", "filename": "libstdc++-v3/testsuite/26_numerics/complex/abi_tag.cc", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3a9e6821ff5ed3e6f41e58d1d47bbbbd4e3e2b/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fabi_tag.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3a9e6821ff5ed3e6f41e58d1d47bbbbd4e3e2b/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fabi_tag.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fabi_tag.cc?ref=7a3a9e6821ff5ed3e6f41e58d1d47bbbbd4e3e2b", "patch": "@@ -0,0 +1,25 @@\n+// Test that the C++11 variants of real/imag have an ABI tag\n+// { dg-do compile }\n+// { dg-options -std=c++11 }\n+\n+#include <complex>\n+\n+// { dg-final { scan-assembler \"_ZNKSt7complexIfE4realB5cxx11Ev\" } }\n+float (std::complex<float>::*p1)() const = &std::complex<float>::real;\n+// { dg-final { scan-assembler \"_ZNKSt7complexIdE4realB5cxx11Ev\" } }\n+double (std::complex<double>::*p2)() const = &std::complex<double>::real;\n+// { dg-final { scan-assembler \"_ZNKSt7complexIeE4realB5cxx11Ev\" } }\n+long double (std::complex<long double>::*p3)() const\n+  = &std::complex<long double>::real;\n+// { dg-final { scan-assembler \"_ZNKSt7complexIiE4realB5cxx11Ev\" } }\n+int (std::complex<int>::*p4)() const = &std::complex<int>::real;\n+\n+// { dg-final { scan-assembler \"_ZNKSt7complexIfE4imagB5cxx11Ev\" } }\n+float (std::complex<float>::*p5)() const = &std::complex<float>::imag;\n+// { dg-final { scan-assembler \"_ZNKSt7complexIdE4imagB5cxx11Ev\" } }\n+double (std::complex<double>::*p6)() const = &std::complex<double>::imag;\n+// { dg-final { scan-assembler \"_ZNKSt7complexIeE4imagB5cxx11Ev\" } }\n+long double (std::complex<long double>::*p7)() const\n+  = &std::complex<long double>::imag;\n+// { dg-final { scan-assembler \"_ZNKSt7complexIiE4imagB5cxx11Ev\" } }\n+int (std::complex<int>::*p8)() const = &std::complex<int>::imag;"}]}