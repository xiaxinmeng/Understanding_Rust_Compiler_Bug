{"sha": "19970253373d37faecea458bd9f511c9cb3ed6e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk5NzAyNTMzNzNkMzdmYWVjZWE0NThiZDlmNTExYzljYjNlZDZlNw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2017-04-18T16:41:06Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2017-04-18T16:41:06Z"}, "message": "re PR target/80099 (ICE in rs6000_expand_vector_extract, at config/rs6000/rs6000.c:7450)\n\n[gcc]\n2017-04-18  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/80099\n\t* config/rs6000/rs6000.c (rs6000_expand_vector_extract): Eliminate\n\tunneeded test for TARGET_UPPER_REGS_SF.\n\t* config/rs6000/vsx.md (vsx_extract_v4sf_var): Likewise.\n\n[gcc/testsuite]\n2017-04-18  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/80099\n\t* gcc.target/powerpc/pr80099-1.c: New test.\n\t* gcc.target/powerpc/pr80099-2.c: Likewise.\n\t* gcc.target/powerpc/pr80099-3.c: Likewise.\n\t* gcc.target/powerpc/pr80099-4.c: Likewise.\n\t* gcc.target/powerpc/pr80099-5.c: Likewise.\n\nFrom-SVN: r246972", "tree": {"sha": "4086e3c965992544b2a3f9171b018c2b69878038", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4086e3c965992544b2a3f9171b018c2b69878038"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19970253373d37faecea458bd9f511c9cb3ed6e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19970253373d37faecea458bd9f511c9cb3ed6e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19970253373d37faecea458bd9f511c9cb3ed6e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19970253373d37faecea458bd9f511c9cb3ed6e7/comments", "author": null, "committer": null, "parents": [{"sha": "3b5fb3cb5b3831765df93691f6a452c478985366", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b5fb3cb5b3831765df93691f6a452c478985366", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b5fb3cb5b3831765df93691f6a452c478985366"}], "stats": {"total": 551, "additions": 543, "deletions": 8}, "files": [{"sha": "fa3e2575ec113ca469168594ba6686b526f21668", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19970253373d37faecea458bd9f511c9cb3ed6e7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19970253373d37faecea458bd9f511c9cb3ed6e7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=19970253373d37faecea458bd9f511c9cb3ed6e7", "patch": "@@ -1,3 +1,10 @@\n+2017-04-18  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/80099\n+\t* config/rs6000/rs6000.c (rs6000_expand_vector_extract): Eliminate\n+\tunneeded test for TARGET_UPPER_REGS_SF.\n+\t* config/rs6000/vsx.md (vsx_extract_v4sf_var): Likewise.\n+\n 2017-04-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR sanitizer/80444"}, {"sha": "8f68d84a8fe1d5afa1033c111b2936f7c19e3166", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19970253373d37faecea458bd9f511c9cb3ed6e7/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19970253373d37faecea458bd9f511c9cb3ed6e7/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=19970253373d37faecea458bd9f511c9cb3ed6e7", "patch": "@@ -7600,12 +7600,8 @@ rs6000_expand_vector_extract (rtx target, rtx vec, rtx elt)\n \t  return;\n \n \tcase V4SFmode:\n-\t  if (TARGET_UPPER_REGS_SF)\n-\t    {\n-\t      emit_insn (gen_vsx_extract_v4sf_var (target, vec, elt));\n-\t      return;\n-\t    }\n-\t  break;\n+\t  emit_insn (gen_vsx_extract_v4sf_var (target, vec, elt));\n+\t  return;\n \n \tcase V4SImode:\n \t  emit_insn (gen_vsx_extract_v4si_var (target, vec, elt));"}, {"sha": "28fc5b5f3cf15df985632542a32db47b71c0f34f", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19970253373d37faecea458bd9f511c9cb3ed6e7/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19970253373d37faecea458bd9f511c9cb3ed6e7/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=19970253373d37faecea458bd9f511c9cb3ed6e7", "patch": "@@ -2419,8 +2419,7 @@\n \t\t   UNSPEC_VSX_EXTRACT))\n    (clobber (match_scratch:DI 3 \"=r,&b,&b\"))\n    (clobber (match_scratch:V2DI 4 \"=&v,X,X\"))]\n-  \"VECTOR_MEM_VSX_P (V4SFmode) && TARGET_DIRECT_MOVE_64BIT\n-   && TARGET_UPPER_REGS_SF\"\n+  \"VECTOR_MEM_VSX_P (V4SFmode) && TARGET_DIRECT_MOVE_64BIT\"\n   \"#\"\n   \"&& reload_completed\"\n   [(const_int 0)]"}, {"sha": "000f471714341ad7ee7626daa50e4fbad5f8182f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19970253373d37faecea458bd9f511c9cb3ed6e7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19970253373d37faecea458bd9f511c9cb3ed6e7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=19970253373d37faecea458bd9f511c9cb3ed6e7", "patch": "@@ -1,3 +1,12 @@\n+2017-04-18  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/80099\n+\t* gcc.target/powerpc/pr80099-1.c: New test.\n+\t* gcc.target/powerpc/pr80099-2.c: Likewise.\n+\t* gcc.target/powerpc/pr80099-3.c: Likewise.\n+\t* gcc.target/powerpc/pr80099-4.c: Likewise.\n+\t* gcc.target/powerpc/pr80099-5.c: Likewise.\n+\n 2017-04-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR sanitizer/80444"}, {"sha": "9f34c5fbef8a58721adcf87f177790934a501d9e", "filename": "gcc/testsuite/gcc.target/powerpc/pr80099-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19970253373d37faecea458bd9f511c9cb3ed6e7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80099-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19970253373d37faecea458bd9f511c9cb3ed6e7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80099-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80099-1.c?ref=19970253373d37faecea458bd9f511c9cb3ed6e7", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-options \"-mcpu=power8 -O2 -mno-upper-regs-sf\" } */\n+\n+/* PR target/80099: compiler internal error if -mno-upper-regs-sf used.  */\n+\n+int a;\n+int int_from_mem (vector float *c)\n+{\n+  return __builtin_vec_extract (*c, a);\n+}"}, {"sha": "5800db6321208de75fe3fd40ddf1d98d067e27d0", "filename": "gcc/testsuite/gcc.target/powerpc/pr80099-2.c", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19970253373d37faecea458bd9f511c9cb3ed6e7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80099-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19970253373d37faecea458bd9f511c9cb3ed6e7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80099-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80099-2.c?ref=19970253373d37faecea458bd9f511c9cb3ed6e7", "patch": "@@ -0,0 +1,128 @@\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-options \"-mcpu=power8 -O2 -mno-upper-regs-sf\" } */\n+\n+/* PR target/80099 was an issue with -mno-upper-regs-sf.  Test for all variable\n+   extract types with various -mno-upper-regs-* options.  */\n+\n+double\n+d_extract_arg_n (vector double v, unsigned long n)\n+{\n+  return __builtin_vec_extract (v, n);\n+}\n+\n+float\n+f_extract_arg_n (vector float v, unsigned long n)\n+{\n+  return __builtin_vec_extract (v, n);\n+}\n+\n+long\n+sl_extract_arg_n (vector long v, unsigned long n)\n+{\n+  return (long) __builtin_vec_extract (v, n);\n+}\n+\n+unsigned long\n+ul_extract_arg_n (vector unsigned long v, unsigned long n)\n+{\n+  return (unsigned long) __builtin_vec_extract (v, n);\n+}\n+\n+long\n+si_extract_arg_n (vector int v, unsigned long n)\n+{\n+  return (int) __builtin_vec_extract (v, n);\n+}\n+\n+unsigned long\n+ui_extract_arg_n (vector unsigned int v, unsigned long n)\n+{\n+  return (unsigned int) __builtin_vec_extract (v, n);\n+}\n+\n+long\n+ss_extract_arg_n (vector short v, unsigned long n)\n+{\n+  return (short) __builtin_vec_extract (v, n);\n+}\n+\n+unsigned long\n+us_extract_arg_n (vector unsigned short v, unsigned long n)\n+{\n+  return (unsigned short) __builtin_vec_extract (v, n);\n+}\n+\n+long\n+sc_extract_arg_n (vector signed char v, unsigned long n)\n+{\n+  return (signed char) __builtin_vec_extract (v, n);\n+}\n+\n+unsigned long\n+uc_extract_arg_n (vector unsigned char v, unsigned long n)\n+{\n+  return (unsigned char) __builtin_vec_extract (v, n);\n+}\n+\n+\f\n+double\n+d_extract_mem_n (vector double *p, unsigned long n)\n+{\n+  return __builtin_vec_extract (*p, n);\n+}\n+\n+float\n+f_extract_mem_n (vector float *p, unsigned long n)\n+{\n+  return __builtin_vec_extract (*p, n);\n+}\n+\n+long\n+sl_extract_mem_n (vector long *p, unsigned long n)\n+{\n+  return (long) __builtin_vec_extract (*p, n);\n+}\n+\n+unsigned long\n+ul_extract_mem_n (vector unsigned long *p, unsigned long n)\n+{\n+  return (unsigned long) __builtin_vec_extract (*p, n);\n+}\n+\n+long\n+si_extract_mem_n (vector int *p, unsigned long n)\n+{\n+  return (int) __builtin_vec_extract (*p, n);\n+}\n+\n+unsigned long\n+ui_extract_mem_n (vector unsigned int *p, unsigned long n)\n+{\n+  return (unsigned int) __builtin_vec_extract (*p, n);\n+}\n+\n+long\n+ss_extract_mem_n (vector short *p, unsigned long n)\n+{\n+  return (short) __builtin_vec_extract (*p, n);\n+}\n+\n+unsigned long\n+us_extract_mem_n (vector unsigned short *p, unsigned long n)\n+{\n+  return (unsigned short) __builtin_vec_extract (*p, n);\n+}\n+\n+long\n+sc_extract_mem_n (vector signed char *p, unsigned long n)\n+{\n+  return (signed char) __builtin_vec_extract (*p, n);\n+}\n+\n+unsigned long\n+uc_extract_mem_n (vector unsigned char *p, unsigned long n)\n+{\n+  return (unsigned char) __builtin_vec_extract (*p, n);\n+}"}, {"sha": "71c2b40b0d138cfc5f2b3418799d60bc36a2ae2d", "filename": "gcc/testsuite/gcc.target/powerpc/pr80099-3.c", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19970253373d37faecea458bd9f511c9cb3ed6e7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80099-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19970253373d37faecea458bd9f511c9cb3ed6e7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80099-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80099-3.c?ref=19970253373d37faecea458bd9f511c9cb3ed6e7", "patch": "@@ -0,0 +1,128 @@\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-options \"-mcpu=power8 -O2 -mno-upper-regs-df\" } */\n+\n+/* PR target/80099 was an issue with -mno-upper-regs-sf.  Test for all variable\n+   extract types with various -mno-upper-regs-* options.  */\n+\n+double\n+d_extract_arg_n (vector double v, unsigned long n)\n+{\n+  return __builtin_vec_extract (v, n);\n+}\n+\n+float\n+f_extract_arg_n (vector float v, unsigned long n)\n+{\n+  return __builtin_vec_extract (v, n);\n+}\n+\n+long\n+sl_extract_arg_n (vector long v, unsigned long n)\n+{\n+  return (long) __builtin_vec_extract (v, n);\n+}\n+\n+unsigned long\n+ul_extract_arg_n (vector unsigned long v, unsigned long n)\n+{\n+  return (unsigned long) __builtin_vec_extract (v, n);\n+}\n+\n+long\n+si_extract_arg_n (vector int v, unsigned long n)\n+{\n+  return (int) __builtin_vec_extract (v, n);\n+}\n+\n+unsigned long\n+ui_extract_arg_n (vector unsigned int v, unsigned long n)\n+{\n+  return (unsigned int) __builtin_vec_extract (v, n);\n+}\n+\n+long\n+ss_extract_arg_n (vector short v, unsigned long n)\n+{\n+  return (short) __builtin_vec_extract (v, n);\n+}\n+\n+unsigned long\n+us_extract_arg_n (vector unsigned short v, unsigned long n)\n+{\n+  return (unsigned short) __builtin_vec_extract (v, n);\n+}\n+\n+long\n+sc_extract_arg_n (vector signed char v, unsigned long n)\n+{\n+  return (signed char) __builtin_vec_extract (v, n);\n+}\n+\n+unsigned long\n+uc_extract_arg_n (vector unsigned char v, unsigned long n)\n+{\n+  return (unsigned char) __builtin_vec_extract (v, n);\n+}\n+\n+\f\n+double\n+d_extract_mem_n (vector double *p, unsigned long n)\n+{\n+  return __builtin_vec_extract (*p, n);\n+}\n+\n+float\n+f_extract_mem_n (vector float *p, unsigned long n)\n+{\n+  return __builtin_vec_extract (*p, n);\n+}\n+\n+long\n+sl_extract_mem_n (vector long *p, unsigned long n)\n+{\n+  return (long) __builtin_vec_extract (*p, n);\n+}\n+\n+unsigned long\n+ul_extract_mem_n (vector unsigned long *p, unsigned long n)\n+{\n+  return (unsigned long) __builtin_vec_extract (*p, n);\n+}\n+\n+long\n+si_extract_mem_n (vector int *p, unsigned long n)\n+{\n+  return (int) __builtin_vec_extract (*p, n);\n+}\n+\n+unsigned long\n+ui_extract_mem_n (vector unsigned int *p, unsigned long n)\n+{\n+  return (unsigned int) __builtin_vec_extract (*p, n);\n+}\n+\n+long\n+ss_extract_mem_n (vector short *p, unsigned long n)\n+{\n+  return (short) __builtin_vec_extract (*p, n);\n+}\n+\n+unsigned long\n+us_extract_mem_n (vector unsigned short *p, unsigned long n)\n+{\n+  return (unsigned short) __builtin_vec_extract (*p, n);\n+}\n+\n+long\n+sc_extract_mem_n (vector signed char *p, unsigned long n)\n+{\n+  return (signed char) __builtin_vec_extract (*p, n);\n+}\n+\n+unsigned long\n+uc_extract_mem_n (vector unsigned char *p, unsigned long n)\n+{\n+  return (unsigned char) __builtin_vec_extract (*p, n);\n+}"}, {"sha": "145dd1724afb09d6edafb956498f6e1923910171", "filename": "gcc/testsuite/gcc.target/powerpc/pr80099-4.c", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19970253373d37faecea458bd9f511c9cb3ed6e7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80099-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19970253373d37faecea458bd9f511c9cb3ed6e7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80099-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80099-4.c?ref=19970253373d37faecea458bd9f511c9cb3ed6e7", "patch": "@@ -0,0 +1,128 @@\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-options \"-mcpu=power8 -O2 -mno-upper-regs-di\" } */\n+\n+/* PR target/80099 was an issue with -mno-upper-regs-sf.  Test for all variable\n+   extract types with various -mno-upper-regs-* options.  */\n+\n+double\n+d_extract_arg_n (vector double v, unsigned long n)\n+{\n+  return __builtin_vec_extract (v, n);\n+}\n+\n+float\n+f_extract_arg_n (vector float v, unsigned long n)\n+{\n+  return __builtin_vec_extract (v, n);\n+}\n+\n+long\n+sl_extract_arg_n (vector long v, unsigned long n)\n+{\n+  return (long) __builtin_vec_extract (v, n);\n+}\n+\n+unsigned long\n+ul_extract_arg_n (vector unsigned long v, unsigned long n)\n+{\n+  return (unsigned long) __builtin_vec_extract (v, n);\n+}\n+\n+long\n+si_extract_arg_n (vector int v, unsigned long n)\n+{\n+  return (int) __builtin_vec_extract (v, n);\n+}\n+\n+unsigned long\n+ui_extract_arg_n (vector unsigned int v, unsigned long n)\n+{\n+  return (unsigned int) __builtin_vec_extract (v, n);\n+}\n+\n+long\n+ss_extract_arg_n (vector short v, unsigned long n)\n+{\n+  return (short) __builtin_vec_extract (v, n);\n+}\n+\n+unsigned long\n+us_extract_arg_n (vector unsigned short v, unsigned long n)\n+{\n+  return (unsigned short) __builtin_vec_extract (v, n);\n+}\n+\n+long\n+sc_extract_arg_n (vector signed char v, unsigned long n)\n+{\n+  return (signed char) __builtin_vec_extract (v, n);\n+}\n+\n+unsigned long\n+uc_extract_arg_n (vector unsigned char v, unsigned long n)\n+{\n+  return (unsigned char) __builtin_vec_extract (v, n);\n+}\n+\n+\f\n+double\n+d_extract_mem_n (vector double *p, unsigned long n)\n+{\n+  return __builtin_vec_extract (*p, n);\n+}\n+\n+float\n+f_extract_mem_n (vector float *p, unsigned long n)\n+{\n+  return __builtin_vec_extract (*p, n);\n+}\n+\n+long\n+sl_extract_mem_n (vector long *p, unsigned long n)\n+{\n+  return (long) __builtin_vec_extract (*p, n);\n+}\n+\n+unsigned long\n+ul_extract_mem_n (vector unsigned long *p, unsigned long n)\n+{\n+  return (unsigned long) __builtin_vec_extract (*p, n);\n+}\n+\n+long\n+si_extract_mem_n (vector int *p, unsigned long n)\n+{\n+  return (int) __builtin_vec_extract (*p, n);\n+}\n+\n+unsigned long\n+ui_extract_mem_n (vector unsigned int *p, unsigned long n)\n+{\n+  return (unsigned int) __builtin_vec_extract (*p, n);\n+}\n+\n+long\n+ss_extract_mem_n (vector short *p, unsigned long n)\n+{\n+  return (short) __builtin_vec_extract (*p, n);\n+}\n+\n+unsigned long\n+us_extract_mem_n (vector unsigned short *p, unsigned long n)\n+{\n+  return (unsigned short) __builtin_vec_extract (*p, n);\n+}\n+\n+long\n+sc_extract_mem_n (vector signed char *p, unsigned long n)\n+{\n+  return (signed char) __builtin_vec_extract (*p, n);\n+}\n+\n+unsigned long\n+uc_extract_mem_n (vector unsigned char *p, unsigned long n)\n+{\n+  return (unsigned char) __builtin_vec_extract (*p, n);\n+}"}, {"sha": "9ebc0fe466dadb2f72b5c710f3e8a5fcbed16063", "filename": "gcc/testsuite/gcc.target/powerpc/pr80099-5.c", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19970253373d37faecea458bd9f511c9cb3ed6e7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80099-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19970253373d37faecea458bd9f511c9cb3ed6e7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80099-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80099-5.c?ref=19970253373d37faecea458bd9f511c9cb3ed6e7", "patch": "@@ -0,0 +1,128 @@\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-options \"-mcpu=power8 -O2 -mno-upper-regs\" } */\n+\n+/* PR target/80099 was an issue with -mno-upper-regs-sf.  Test for all variable\n+   extract types with various -mno-upper-regs-* options.  */\n+\n+double\n+d_extract_arg_n (vector double v, unsigned long n)\n+{\n+  return __builtin_vec_extract (v, n);\n+}\n+\n+float\n+f_extract_arg_n (vector float v, unsigned long n)\n+{\n+  return __builtin_vec_extract (v, n);\n+}\n+\n+long\n+sl_extract_arg_n (vector long v, unsigned long n)\n+{\n+  return (long) __builtin_vec_extract (v, n);\n+}\n+\n+unsigned long\n+ul_extract_arg_n (vector unsigned long v, unsigned long n)\n+{\n+  return (unsigned long) __builtin_vec_extract (v, n);\n+}\n+\n+long\n+si_extract_arg_n (vector int v, unsigned long n)\n+{\n+  return (int) __builtin_vec_extract (v, n);\n+}\n+\n+unsigned long\n+ui_extract_arg_n (vector unsigned int v, unsigned long n)\n+{\n+  return (unsigned int) __builtin_vec_extract (v, n);\n+}\n+\n+long\n+ss_extract_arg_n (vector short v, unsigned long n)\n+{\n+  return (short) __builtin_vec_extract (v, n);\n+}\n+\n+unsigned long\n+us_extract_arg_n (vector unsigned short v, unsigned long n)\n+{\n+  return (unsigned short) __builtin_vec_extract (v, n);\n+}\n+\n+long\n+sc_extract_arg_n (vector signed char v, unsigned long n)\n+{\n+  return (signed char) __builtin_vec_extract (v, n);\n+}\n+\n+unsigned long\n+uc_extract_arg_n (vector unsigned char v, unsigned long n)\n+{\n+  return (unsigned char) __builtin_vec_extract (v, n);\n+}\n+\n+\f\n+double\n+d_extract_mem_n (vector double *p, unsigned long n)\n+{\n+  return __builtin_vec_extract (*p, n);\n+}\n+\n+float\n+f_extract_mem_n (vector float *p, unsigned long n)\n+{\n+  return __builtin_vec_extract (*p, n);\n+}\n+\n+long\n+sl_extract_mem_n (vector long *p, unsigned long n)\n+{\n+  return (long) __builtin_vec_extract (*p, n);\n+}\n+\n+unsigned long\n+ul_extract_mem_n (vector unsigned long *p, unsigned long n)\n+{\n+  return (unsigned long) __builtin_vec_extract (*p, n);\n+}\n+\n+long\n+si_extract_mem_n (vector int *p, unsigned long n)\n+{\n+  return (int) __builtin_vec_extract (*p, n);\n+}\n+\n+unsigned long\n+ui_extract_mem_n (vector unsigned int *p, unsigned long n)\n+{\n+  return (unsigned int) __builtin_vec_extract (*p, n);\n+}\n+\n+long\n+ss_extract_mem_n (vector short *p, unsigned long n)\n+{\n+  return (short) __builtin_vec_extract (*p, n);\n+}\n+\n+unsigned long\n+us_extract_mem_n (vector unsigned short *p, unsigned long n)\n+{\n+  return (unsigned short) __builtin_vec_extract (*p, n);\n+}\n+\n+long\n+sc_extract_mem_n (vector signed char *p, unsigned long n)\n+{\n+  return (signed char) __builtin_vec_extract (*p, n);\n+}\n+\n+unsigned long\n+uc_extract_mem_n (vector unsigned char *p, unsigned long n)\n+{\n+  return (unsigned char) __builtin_vec_extract (*p, n);\n+}"}]}