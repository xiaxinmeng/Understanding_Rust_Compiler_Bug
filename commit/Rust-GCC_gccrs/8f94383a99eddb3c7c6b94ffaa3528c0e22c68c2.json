{"sha": "8f94383a99eddb3c7c6b94ffaa3528c0e22c68c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY5NDM4M2E5OWVkZGIzYzdjNmI5NGZmYWEzNTI4YzBlMjJjNjhjMg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-01-21T22:21:22Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-01-21T22:21:22Z"}, "message": "compiler: Check for calling value method with dereferenced value.\n\nFrom-SVN: r183379", "tree": {"sha": "87dcedfe8fceed6eaddc57fa6e83af82295c8832", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87dcedfe8fceed6eaddc57fa6e83af82295c8832"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f94383a99eddb3c7c6b94ffaa3528c0e22c68c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f94383a99eddb3c7c6b94ffaa3528c0e22c68c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f94383a99eddb3c7c6b94ffaa3528c0e22c68c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f94383a99eddb3c7c6b94ffaa3528c0e22c68c2/comments", "author": null, "committer": null, "parents": [{"sha": "98dfd7ff168ecce9305ad2bc713bf1aa3dbda7a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98dfd7ff168ecce9305ad2bc713bf1aa3dbda7a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98dfd7ff168ecce9305ad2bc713bf1aa3dbda7a7"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "bb06edb7f7f9c39d8c858826d747a7ec805f5791", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f94383a99eddb3c7c6b94ffaa3528c0e22c68c2/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f94383a99eddb3c7c6b94ffaa3528c0e22c68c2/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=8f94383a99eddb3c7c6b94ffaa3528c0e22c68c2", "patch": "@@ -8605,6 +8605,7 @@ Type::bind_field_or_method(Gogo* gogo, const Type* type, Expression* expr,\n \n   // If this is a pointer to a pointer, then it is possible that the\n   // pointed-to type has methods.\n+  bool dereferenced = false;\n   if (nt == NULL\n       && st == NULL\n       && it == NULL\n@@ -8617,6 +8618,7 @@ Type::bind_field_or_method(Gogo* gogo, const Type* type, Expression* expr,\n \treturn Expression::make_error(location);\n       nt = type->points_to()->named_type();\n       st = type->points_to()->struct_type();\n+      dereferenced = true;\n     }\n \n   bool receiver_can_be_pointer = (expr->type()->points_to() != NULL\n@@ -8656,6 +8658,12 @@ Type::bind_field_or_method(Gogo* gogo, const Type* type, Expression* expr,\n \t  else\n \t    go_unreachable();\n \t  go_assert(m != NULL);\n+\t  if (dereferenced && m->is_value_method())\n+\t    {\n+\t      error_at(location,\n+\t\t       \"calling value method requires explicit dereference\");\n+\t      return Expression::make_error(location);\n+\t    }\n \t  if (!m->is_value_method() && expr->type()->points_to() == NULL)\n \t    expr = Expression::make_unary(OPERATOR_AND, expr, location);\n \t  ret = m->bind_method(expr, location);"}]}