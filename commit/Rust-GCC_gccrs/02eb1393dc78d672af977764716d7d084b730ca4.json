{"sha": "02eb1393dc78d672af977764716d7d084b730ca4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJlYjEzOTNkYzc4ZDY3MmFmOTc3NzY0NzE2ZDdkMDg0YjczMGNhNA==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "1999-03-22T14:27:23Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1999-03-22T14:27:23Z"}, "message": "reload1.c (reload_as_needed): Set reload_is_output_reload / reload_has_output_reload for auto_inc expressions...\n\n\t* reload1.c (reload_as_needed): Set reload_is_output_reload /\n\treload_has_output_reload for auto_inc expressions that could be\n\treloaded.  Call forget_old_reloads for REG_INC notes.\n\nFrom-SVN: r25899", "tree": {"sha": "c91cde79385f2b22b1cd431fd7737dc3c85653f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c91cde79385f2b22b1cd431fd7737dc3c85653f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02eb1393dc78d672af977764716d7d084b730ca4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02eb1393dc78d672af977764716d7d084b730ca4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02eb1393dc78d672af977764716d7d084b730ca4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02eb1393dc78d672af977764716d7d084b730ca4/comments", "author": null, "committer": null, "parents": [{"sha": "50270076bd7e9aaca337ab7dd944268082b25b42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50270076bd7e9aaca337ab7dd944268082b25b42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50270076bd7e9aaca337ab7dd944268082b25b42"}], "stats": {"total": 39, "additions": 32, "deletions": 7}, "files": [{"sha": "c0764bc1c9857caa677da5ede54d7aa7ace4842d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02eb1393dc78d672af977764716d7d084b730ca4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02eb1393dc78d672af977764716d7d084b730ca4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=02eb1393dc78d672af977764716d7d084b730ca4", "patch": "@@ -1,3 +1,9 @@\n+Mon Mar 22 22:24:30 1999  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* reload1.c (reload_as_needed): Set reload_is_output_reload /\n+\treload_has_output_reload for auto_inc expressions that could be\n+\treloaded.  Call forget_old_reloads for REG_INC notes.\n+\n Mon Mar 22 21:51:57 1999  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* cse.c (cse_insn): Don't change the result register of a libcall."}, {"sha": "1295d322ee5ab77e2ae4f799f1ffe1d89362c281", "filename": "gcc/reload1.c", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02eb1393dc78d672af977764716d7d084b730ca4/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02eb1393dc78d672af977764716d7d084b730ca4/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=02eb1393dc78d672af977764716d7d084b730ca4", "patch": "@@ -4414,17 +4414,37 @@ reload_as_needed (live_known)\n \t\t\t  break;\n \t\t\t}\n \t\t      if (n == 1)\n-\t\t\tREG_NOTES (p) = gen_rtx_EXPR_LIST (REG_INC, reload_reg,\n-\t\t\t\t\t\t\t   REG_NOTES (p));\n+\t\t\t{\n+\t\t\t  REG_NOTES (p)\n+\t\t\t    = gen_rtx_EXPR_LIST (REG_INC, reload_reg,\n+\t\t\t\t\t\t REG_NOTES (p));\n+\t\t\t  /* Mark this as having an output reload so that the\n+\t\t\t     REG_INC processing code below won't invalidate\n+\t\t\t     the reload for inheritance.  */\n+\t\t\t  SET_HARD_REG_BIT (reg_is_output_reload,\n+\t\t\t\t\t    REGNO (reload_reg));\n+\t\t\t  reg_has_output_reload[REGNO (XEXP (in_reg, 0))] = 1;\n+\t\t\t}\n \t\t      else\n \t\t\tforget_old_reloads_1 (XEXP (in_reg, 0), NULL_RTX);\n \t\t    }\n+\t\t  else if ((code == PRE_INC || code == PRE_DEC)\n+\t\t\t   && TEST_HARD_REG_BIT (reg_reloaded_valid,\n+\t\t\t\t\t\t REGNO (reload_reg_rtx[i]))\n+\t\t\t   /* Make sure it is the inc/dec pseudo, and not\n+\t\t\t      some other (e.g. output operand) pseudo.  */\n+\t\t\t   && (reg_reloaded_contents[REGNO (reload_reg_rtx[i])]\n+\t\t\t       == REGNO (XEXP (in_reg, 0))))\n+\t\t    {\n+\t\t      SET_HARD_REG_BIT (reg_is_output_reload,\n+\t\t\t\t\tREGNO (reload_reg_rtx[i]));\n+\t\t      reg_has_output_reload[REGNO (XEXP (in_reg, 0))] = 1;\n+\t\t    }\n \t\t}\n \t    }\n-#if 0 /* ??? Is this code obsolete now?  Need to check carefully. */\n-\t  /* Likewise for regs altered by auto-increment in this insn.\n-\t     But note that the reg-notes are not changed by reloading:\n-\t     they still contain the pseudo-regs, not the spill regs.  */\n+\t  /* If a pseudo that got a hard register is auto-incremented,\n+\t     we must purge records of copying it into pseudos without\n+\t     hard registers.  */\n \t  for (x = REG_NOTES (insn); x; x = XEXP (x, 1))\n \t    if (REG_NOTE_KIND (x) == REG_INC)\n \t      {\n@@ -4438,7 +4458,6 @@ reload_as_needed (live_known)\n \t\tif (i == n_reloads)\n \t\t  forget_old_reloads_1 (XEXP (x, 0), NULL_RTX);\n \t      }\n-#endif\n #endif\n \t}\n       /* A reload reg's contents are unknown after a label.  */"}]}