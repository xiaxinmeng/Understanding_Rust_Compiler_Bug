{"sha": "ca49b74e1caf638d0ef862551b6ff0bfe779d137", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E0OWI3NGUxY2FmNjM4ZDBlZjg2MjU1MWI2ZmYwYmZlNzc5ZDEzNw==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2014-05-08T03:08:12Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2014-05-08T03:08:12Z"}, "message": "c-cppbuiltin.c (print_bits_of_hex): New.\n\n* c-cppbuiltin.c (print_bits_of_hex): New.\n(builtin_define_type_minmax): Print values using hex so as not to\nrequire a pre-computed list of string values.\n\nFrom-SVN: r210202", "tree": {"sha": "16396db3dbbac6550036c70c766d8f824908bc7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16396db3dbbac6550036c70c766d8f824908bc7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca49b74e1caf638d0ef862551b6ff0bfe779d137", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca49b74e1caf638d0ef862551b6ff0bfe779d137", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca49b74e1caf638d0ef862551b6ff0bfe779d137", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca49b74e1caf638d0ef862551b6ff0bfe779d137/comments", "author": null, "committer": null, "parents": [{"sha": "42aea2d8f9282b7bb34fedc7f125840a393ee639", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42aea2d8f9282b7bb34fedc7f125840a393ee639", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42aea2d8f9282b7bb34fedc7f125840a393ee639"}], "stats": {"total": 81, "additions": 58, "deletions": 23}, "files": [{"sha": "b7c65d35ff254041ba850b2b617590fd058dc536", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca49b74e1caf638d0ef862551b6ff0bfe779d137/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca49b74e1caf638d0ef862551b6ff0bfe779d137/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=ca49b74e1caf638d0ef862551b6ff0bfe779d137", "patch": "@@ -1,3 +1,9 @@\n+2014-05-07  DJ Delorie  <dj@redhat.com>\n+\n+\t* c-cppbuiltin.c (print_bits_of_hex): New.\n+\t(builtin_define_type_minmax): Print values using hex so as not to\n+\trequire a pre-computed list of string values.\n+\n 2014-05-06  Kenneth Zadeck  <zadeck@naturalbridge.com>\n \t    Mike Stump  <mikestump@comcast.net>\n \t    Richard Sandiford  <rdsandiford@googlemail.com>"}, {"sha": "d07c9809eab3c27b058a1309b006dd1b02d3d888", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 52, "deletions": 23, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca49b74e1caf638d0ef862551b6ff0bfe779d137/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca49b74e1caf638d0ef862551b6ff0bfe779d137/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=ca49b74e1caf638d0ef862551b6ff0bfe779d137", "patch": "@@ -1288,39 +1288,68 @@ builtin_define_type_max (const char *macro, tree type)\n   builtin_define_type_minmax (NULL, macro, type);\n }\n \n+/* Given a value with COUNT LSBs set, fill BUF with a hexidecimal\n+   representation of that value.  For example, a COUNT of 10 would\n+   return \"0x3ff\".  */\n+\n+static void\n+print_bits_of_hex (char *buf, int bufsz, int count)\n+{\n+  gcc_assert (bufsz > 3);\n+  *buf++ = '0';\n+  *buf++ = 'x';\n+  bufsz -= 2;\n+\n+  gcc_assert (count > 0);\n+\n+  switch (count % 4) {\n+  case 0:\n+    break;\n+  case 1:\n+    *buf++ = '1';\n+    bufsz --;\n+    count -= 1;\n+    break;\n+  case 2:\n+    *buf++ = '3';\n+    bufsz --;\n+    count -= 2;\n+    break;\n+  case 3:\n+    *buf++ = '7';\n+    bufsz --;\n+    count -= 3;\n+    break;\n+  }\n+  while (count >= 4)\n+    {\n+      gcc_assert (bufsz > 1);\n+      *buf++ = 'f';\n+      bufsz --;\n+      count -= 4;\n+    }\n+  gcc_assert (bufsz > 0);\n+  *buf++ = 0;\n+}\n+\n /* Define MIN_MACRO (if not NULL) and MAX_MACRO for TYPE based on the\n    precision of the type.  */\n \n static void\n builtin_define_type_minmax (const char *min_macro, const char *max_macro,\n \t\t\t    tree type)\n {\n-  static const char *const values[]\n-    = { \"127\", \"255\",\n-\t\"32767\", \"65535\",\n-\t\"2147483647\", \"4294967295\",\n-\t\"9223372036854775807\", \"18446744073709551615\",\n-\t\"170141183460469231731687303715884105727\",\n-\t\"340282366920938463463374607431768211455\" };\n-\n-  const char *value, *suffix;\n+#define PBOH_SZ (MAX_BITSIZE_MODE_ANY_INT/4+4)\n+  char value[PBOH_SZ];\n+\n+  const char *suffix;\n   char *buf;\n-  size_t idx;\n+  int bits;\n \n-  /* Pre-rendering the values mean we don't have to futz with printing a\n-     multi-word decimal value.  There are also a very limited number of\n-     precisions that we support, so it's really a waste of time.  */\n-  switch (TYPE_PRECISION (type))\n-    {\n-    case 8:\tidx = 0; break;\n-    case 16:\tidx = 2; break;\n-    case 32:\tidx = 4; break;\n-    case 64:\tidx = 6; break;\n-    case 128:\tidx = 8; break;\n-    default:    gcc_unreachable ();\n-    }\n+  bits = TYPE_PRECISION (type) + (TYPE_UNSIGNED (type) ? 0 : -1);\n+\n+  print_bits_of_hex (value, PBOH_SZ, bits);\n \n-  value = values[idx + TYPE_UNSIGNED (type)];\n   suffix = type_suffix (type);\n \n   buf = (char *) alloca (strlen (max_macro) + 1 + strlen (value)"}]}