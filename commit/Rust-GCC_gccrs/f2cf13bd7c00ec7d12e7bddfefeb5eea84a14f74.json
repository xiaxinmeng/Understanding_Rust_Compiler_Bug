{"sha": "f2cf13bd7c00ec7d12e7bddfefeb5eea84a14f74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJjZjEzYmQ3YzAwZWM3ZDEyZTdiZGRmZWZlYjVlZWE4NGExNGY3NA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-07-05T07:59:14Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-07-05T07:59:14Z"}, "message": "target-insns.def (clear_cache): New targetm instruction pattern.\n\ngcc/\n\t* target-insns.def (clear_cache): New targetm instruction pattern.\n\t* builtins.c (expand_builtin___clear_cache): Use it instead of\n\tHAVE_*/gen_* interface.\n\nFrom-SVN: r225430", "tree": {"sha": "595f8a5160947bc2430984eba6a62c7e4c24e2ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/595f8a5160947bc2430984eba6a62c7e4c24e2ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2cf13bd7c00ec7d12e7bddfefeb5eea84a14f74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2cf13bd7c00ec7d12e7bddfefeb5eea84a14f74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2cf13bd7c00ec7d12e7bddfefeb5eea84a14f74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2cf13bd7c00ec7d12e7bddfefeb5eea84a14f74/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "10169a8b991800c73cbe6dbfdcf7761aac3e542c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10169a8b991800c73cbe6dbfdcf7761aac3e542c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10169a8b991800c73cbe6dbfdcf7761aac3e542c"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "a0fa9747d6884fff74bbff0c1826b7d9ae474c77", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2cf13bd7c00ec7d12e7bddfefeb5eea84a14f74/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2cf13bd7c00ec7d12e7bddfefeb5eea84a14f74/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f2cf13bd7c00ec7d12e7bddfefeb5eea84a14f74", "patch": "@@ -1,3 +1,9 @@\n+2015-07-05  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* target-insns.def (clear_cache): New targetm instruction pattern.\n+\t* builtins.c (expand_builtin___clear_cache): Use it instead of\n+\tHAVE_*/gen_* interface.\n+\n 2015-07-05  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* target-insns.def (allocate_stack, check_stack, probe_stack)"}, {"sha": "f5923b12016e5fedc8bd4afa00582802b4afe4fb", "filename": "gcc/builtins.c", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2cf13bd7c00ec7d12e7bddfefeb5eea84a14f74/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2cf13bd7c00ec7d12e7bddfefeb5eea84a14f74/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=f2cf13bd7c00ec7d12e7bddfefeb5eea84a14f74", "patch": "@@ -4807,20 +4807,22 @@ expand_builtin_copysign (tree exp, rtx target, rtx subtarget)\n /* Expand a call to __builtin___clear_cache.  */\n \n static rtx\n-expand_builtin___clear_cache (tree exp ATTRIBUTE_UNUSED)\n+expand_builtin___clear_cache (tree exp)\n {\n-#ifndef HAVE_clear_cache\n+  if (!targetm.code_for_clear_cache)\n+    {\n #ifdef CLEAR_INSN_CACHE\n-  /* There is no \"clear_cache\" insn, and __clear_cache() in libgcc\n-     does something.  Just do the default expansion to a call to\n-     __clear_cache().  */\n-  return NULL_RTX;\n+      /* There is no \"clear_cache\" insn, and __clear_cache() in libgcc\n+\t does something.  Just do the default expansion to a call to\n+\t __clear_cache().  */\n+      return NULL_RTX;\n #else\n-  /* There is no \"clear_cache\" insn, and __clear_cache() in libgcc\n-     does nothing.  There is no need to call it.  Do nothing.  */\n-  return const0_rtx;\n+      /* There is no \"clear_cache\" insn, and __clear_cache() in libgcc\n+\t does nothing.  There is no need to call it.  Do nothing.  */\n+      return const0_rtx;\n #endif /* CLEAR_INSN_CACHE */\n-#else\n+    }\n+\n   /* We have a \"clear_cache\" insn, and it will handle everything.  */\n   tree begin, end;\n   rtx begin_rtx, end_rtx;\n@@ -4834,7 +4836,7 @@ expand_builtin___clear_cache (tree exp ATTRIBUTE_UNUSED)\n       return const0_rtx;\n     }\n \n-  if (HAVE_clear_cache)\n+  if (targetm.have_clear_cache ())\n     {\n       struct expand_operand ops[2];\n \n@@ -4846,11 +4848,10 @@ expand_builtin___clear_cache (tree exp ATTRIBUTE_UNUSED)\n \n       create_address_operand (&ops[0], begin_rtx);\n       create_address_operand (&ops[1], end_rtx);\n-      if (maybe_expand_insn (CODE_FOR_clear_cache, 2, ops))\n+      if (maybe_expand_insn (targetm.code_for_clear_cache, 2, ops))\n \treturn const0_rtx;\n     }\n   return const0_rtx;\n-#endif /* HAVE_clear_cache */\n }\n \n /* Given a trampoline address, make sure it satisfies TRAMPOLINE_ALIGNMENT.  */"}, {"sha": "2a9b23bafe680e73888202e5affa03a9c00a0d6a", "filename": "gcc/target-insns.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2cf13bd7c00ec7d12e7bddfefeb5eea84a14f74/gcc%2Ftarget-insns.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2cf13bd7c00ec7d12e7bddfefeb5eea84a14f74/gcc%2Ftarget-insns.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-insns.def?ref=f2cf13bd7c00ec7d12e7bddfefeb5eea84a14f74", "patch": "@@ -37,6 +37,7 @@ DEF_TARGET_INSN (builtin_setjmp_setup, (rtx x0))\n DEF_TARGET_INSN (canonicalize_funcptr_for_compare, (rtx x0, rtx x1))\n DEF_TARGET_INSN (casesi, (rtx x0, rtx x1, rtx x2, rtx x3, rtx x4))\n DEF_TARGET_INSN (check_stack, (rtx x0))\n+DEF_TARGET_INSN (clear_cache, (rtx x0, rtx x1))\n DEF_TARGET_INSN (epilogue, (void))\n DEF_TARGET_INSN (exception_receiver, (void))\n DEF_TARGET_INSN (jump, (rtx x0))"}]}