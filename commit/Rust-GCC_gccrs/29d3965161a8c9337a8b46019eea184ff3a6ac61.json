{"sha": "29d3965161a8c9337a8b46019eea184ff3a6ac61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjlkMzk2NTE2MWE4YzkzMzdhOGI0NjAxOWVlYTE4NGZmM2E2YWM2MQ==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2021-05-19T18:24:13Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-07-07T16:23:18Z"}, "message": "[Ada] Optimize away certain elaboration checks\n\ngcc/ada/\n\n\t* checks.adb (Install_Primitive_Elaboration_Check): Do not\n\tgenerate elaboration checks for primitives if pragma Pure or\n\tPreelaborate is present.  Misc comment fixes, including\n\treferring to the correct kind of check (elaboration, not\n\taccessibility).\n\t* checks.ads, restrict.adb, sem_cat.ads, sinfo.ads: Minor\n\treformatting and comment fixes.", "tree": {"sha": "ff38fc921294b5758f81332aade9fe3bdb0cb689", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff38fc921294b5758f81332aade9fe3bdb0cb689"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29d3965161a8c9337a8b46019eea184ff3a6ac61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29d3965161a8c9337a8b46019eea184ff3a6ac61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29d3965161a8c9337a8b46019eea184ff3a6ac61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29d3965161a8c9337a8b46019eea184ff3a6ac61/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1eb4441733ca9b80faf4f51a29418d720014ae1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1eb4441733ca9b80faf4f51a29418d720014ae1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1eb4441733ca9b80faf4f51a29418d720014ae1"}], "stats": {"total": 34, "additions": 20, "deletions": 14}, "files": [{"sha": "cebeac5ab0c7ddaa5c97c1eed67b249a3ebecffd", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d3965161a8c9337a8b46019eea184ff3a6ac61/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d3965161a8c9337a8b46019eea184ff3a6ac61/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=29d3965161a8c9337a8b46019eea184ff3a6ac61", "patch": "@@ -48,6 +48,7 @@ with Sem;            use Sem;\n with Sem_Aux;        use Sem_Aux;\n with Sem_Ch3;        use Sem_Ch3;\n with Sem_Ch8;        use Sem_Ch8;\n+with Sem_Cat;        use Sem_Cat;\n with Sem_Disp;       use Sem_Disp;\n with Sem_Eval;       use Sem_Eval;\n with Sem_Mech;       use Sem_Mech;\n@@ -84,7 +85,7 @@ package body Checks is\n    --  such as Apply_Scalar_Range_Check that do not insert any code can be\n    --  safely called even when the Expander is inactive (but Errors_Detected\n    --  is 0). The benefit of executing this code when expansion is off, is\n-   --  the ability to emit constraint error warning for static expressions\n+   --  the ability to emit constraint error warnings for static expressions\n    --  even when we are not generating code.\n \n    --  The above is modified in gnatprove mode to ensure that proper check\n@@ -8634,7 +8635,7 @@ package body Checks is\n          return;\n \n       --  Do not generate an elaboration check if the related subprogram is\n-      --  not subjected to accessibility checks.\n+      --  not subject to elaboration checks.\n \n       elsif Elaboration_Checks_Suppressed (Subp_Id) then\n          return;\n@@ -8644,14 +8645,20 @@ package body Checks is\n       elsif Restriction_Active (No_Elaboration_Code) then\n          return;\n \n+      --  If pragma Pure or Preelaborate applies, then these elaboration checks\n+      --  cannot fail, so do not generate them.\n+\n+      elsif In_Preelaborated_Unit then\n+         return;\n+\n       --  Do not generate an elaboration check if exceptions cannot be used,\n       --  caught, or propagated.\n \n       elsif not Exceptions_OK then\n          return;\n \n-      --  Do not consider subprograms which act as compilation units, because\n-      --  they cannot be the target of a dispatching call.\n+      --  Do not consider subprograms that are compilation units, because they\n+      --  cannot be the target of a dispatching call.\n \n       elsif Nkind (Context) = N_Compilation_Unit then\n          return;\n@@ -8681,10 +8688,10 @@ package body Checks is\n       elsif Analyzed (Subp_Body) then\n          return;\n \n-      --  Do not consider primitives which occur within an instance that acts\n-      --  as a compilation unit. Such an instance defines its spec and body out\n-      --  of order (body is first) within the tree, which causes the reference\n-      --  to the elaboration flag to appear as an undefined symbol.\n+      --  Do not consider primitives that occur within an instance that is a\n+      --  compilation unit. Such an instance defines its spec and body out of\n+      --  order (body is first) within the tree, which causes the reference to\n+      --  the elaboration flag to appear as an undefined symbol.\n \n       elsif Within_Compilation_Unit_Instance (Subp_Id) then\n          return;"}, {"sha": "a3835d9a4fdeb272cad35ae54cb32e6d10c5c6a9", "filename": "gcc/ada/checks.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d3965161a8c9337a8b46019eea184ff3a6ac61/gcc%2Fada%2Fchecks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d3965161a8c9337a8b46019eea184ff3a6ac61/gcc%2Fada%2Fchecks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.ads?ref=29d3965161a8c9337a8b46019eea184ff3a6ac61", "patch": "@@ -357,7 +357,7 @@ package Checks is\n    --  if so inserts the appropriate run-time check.\n \n    procedure Install_Primitive_Elaboration_Check (Subp_Body : Node_Id);\n-   --  Insert a check which ensures that subprogram body Subp_Body has been\n+   --  Insert a check to ensure that subprogram body Subp_Body has been\n    --  properly elaborated. The check is installed only when Subp_Body is the\n    --  body of a nonabstract library-level primitive of a tagged type. Further\n    --  restrictions may apply, see the body for details."}, {"sha": "d97a42eb2f5411aa47b5afe0dcb038a405ddd1eb", "filename": "gcc/ada/restrict.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d3965161a8c9337a8b46019eea184ff3a6ac61/gcc%2Fada%2Frestrict.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d3965161a8c9337a8b46019eea184ff3a6ac61/gcc%2Fada%2Frestrict.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.adb?ref=29d3965161a8c9337a8b46019eea184ff3a6ac61", "patch": "@@ -396,10 +396,9 @@ package body Restrict is\n       N : Node_Id;\n       V : Uint := Uint_Minus_1)\n    is\n-      Msg_Issued : Boolean;\n-      pragma Unreferenced (Msg_Issued);\n+      Ignore_Msg_Issued : Boolean;\n    begin\n-      Check_Restriction (Msg_Issued, R, N, V);\n+      Check_Restriction (Ignore_Msg_Issued, R, N, V);\n    end Check_Restriction;\n \n    procedure Check_Restriction"}, {"sha": "90a713bd87117f29a53d42dba688013475c14cd9", "filename": "gcc/ada/sem_cat.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d3965161a8c9337a8b46019eea184ff3a6ac61/gcc%2Fada%2Fsem_cat.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d3965161a8c9337a8b46019eea184ff3a6ac61/gcc%2Fada%2Fsem_cat.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_cat.ads?ref=29d3965161a8c9337a8b46019eea184ff3a6ac61", "patch": "@@ -27,7 +27,7 @@\n --  the semantic restrictions required for the categorization pragmas:\n --\n --    Preelaborate\n---    Pure,\n+--    Pure\n --    Remote_Call_Interface\n --    Remote_Types\n --    Shared_Passive"}, {"sha": "71da7fc583e1aa028ea41cd961172be3f024b5c7", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d3965161a8c9337a8b46019eea184ff3a6ac61/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d3965161a8c9337a8b46019eea184ff3a6ac61/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=29d3965161a8c9337a8b46019eea184ff3a6ac61", "patch": "@@ -2082,7 +2082,7 @@ package Sinfo is\n    --    that no elaboration check is needed on the call, because it appears in\n    --    the context of a local Suppress pragma. This is used on calls within\n    --    task bodies, where the actual elaboration checks are applied after\n-   --    analysis, when the local scope stack is not present\n+   --    analysis, when the local scope stack is not present.\n \n    --  No_Entities_Ref_In_Spec\n    --    Present in N_With_Clause nodes. Set if the with clause is on the"}]}