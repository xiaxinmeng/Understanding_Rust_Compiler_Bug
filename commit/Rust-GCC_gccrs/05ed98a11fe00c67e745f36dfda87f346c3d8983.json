{"sha": "05ed98a11fe00c67e745f36dfda87f346c3d8983", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVlZDk4YTExZmUwMGM2N2U3NDVmMzZkZmRhODdmMzQ2YzNkODk4Mw==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2000-08-15T13:32:11Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2000-08-15T13:32:11Z"}, "message": "ARM support for unordered FP operations.\n\n* arm-protos.h (arm_comparison_operator): Declare.\n* arm.c (arm_comparison_operator): New function.\n(arm_select_cc_mode): Add unordered comparison codes.\n(get_arm_condition_code): Likewise.\n(arm_final_prescan_insn): Can't handle unordered jumps that can't\nbe done in one insn.\n* arm.h (PREDICATE_CODES): Add arm_comparison_operator.\n* arm.md (all uses of comparison_operator): Replace with\narm_comparison_operator.\n(bunordered, bordered, bugt, bunlt, bunge, bunle, buneq, bltgt): New\nexpands.\n(arm_buneq, arm_bltgt, arm_buneq_reversed, arm_bltgt_reveresed): New\npatterns.\n\n[[Split portion of a mixed commit.]]\n\nFrom-SVN: r35703.2", "tree": {"sha": "f3c9fe71eda1209203e805221bad28a24001f452", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3c9fe71eda1209203e805221bad28a24001f452"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05ed98a11fe00c67e745f36dfda87f346c3d8983", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05ed98a11fe00c67e745f36dfda87f346c3d8983", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05ed98a11fe00c67e745f36dfda87f346c3d8983", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05ed98a11fe00c67e745f36dfda87f346c3d8983/comments", "author": null, "committer": null, "parents": [{"sha": "8b2100ba88359c6e7d0cd0d3fe285959c49f7058", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b2100ba88359c6e7d0cd0d3fe285959c49f7058", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b2100ba88359c6e7d0cd0d3fe285959c49f7058"}], "stats": {"total": 816, "additions": 583, "deletions": 233}, "files": [{"sha": "641f3c218948884c65668a90b6cb18a6b8dba2a0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05ed98a11fe00c67e745f36dfda87f346c3d8983/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05ed98a11fe00c67e745f36dfda87f346c3d8983/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=05ed98a11fe00c67e745f36dfda87f346c3d8983", "patch": "@@ -1,3 +1,20 @@\n+2000-08-15  Richard Earnshaw <rearnsha@arm.com>\n+\n+\tARM support for unordered FP operations.\n+\t* arm-protos.h (arm_comparison_operator): Declare.\n+\t* arm.c (arm_comparison_operator): New function.\n+\t(arm_select_cc_mode): Add unordered comparison codes.\n+\t(get_arm_condition_code): Likewise.\n+\t(arm_final_prescan_insn): Can't handle unordered jumps that can't\n+\tbe done in one insn.\n+\t* arm.h (PREDICATE_CODES): Add arm_comparison_operator.\n+\t* arm.md (all uses of comparison_operator): Replace with\n+\tarm_comparison_operator.\n+\t(bunordered, bordered, bugt, bunlt, bunge, bunle, buneq, bltgt): New\n+\texpands.\n+\t(arm_buneq, arm_bltgt, arm_buneq_reversed, arm_bltgt_reveresed): New\n+\tpatterns.\n+\t\n Tue Aug 15 00:36:36 2000  Ovidiu Predescu  <ovidiu@cup.hp.com>\n \n \t* gthr-posix.h: Conditionally include <sched.h>; include"}, {"sha": "ae2a7de30849ebffc0630f1b8ae0831ca2306e39", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05ed98a11fe00c67e745f36dfda87f346c3d8983/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05ed98a11fe00c67e745f36dfda87f346c3d8983/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=05ed98a11fe00c67e745f36dfda87f346c3d8983", "patch": "@@ -76,6 +76,7 @@ extern int    nonimmediate_soft_df_operand PARAMS ((rtx, enum machine_mode));\n extern int    soft_df_operand\t\tPARAMS ((rtx, enum machine_mode));\n extern int    index_operand\t\tPARAMS ((rtx, enum machine_mode));\n extern int    const_shift_operand\tPARAMS ((rtx, enum machine_mode));\n+extern int    arm_comparison_operator\tPARAMS ((rtx, enum machine_mode));\n extern int    shiftable_operator\tPARAMS ((rtx, enum machine_mode));\n extern int    shift_operator\t\tPARAMS ((rtx, enum machine_mode));\n extern int    equality_operator\t\tPARAMS ((rtx, enum machine_mode));"}, {"sha": "e2d72a0fb78f4881074a72b80aedd5258acca961", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 565, "deletions": 233, "changes": 798, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05ed98a11fe00c67e745f36dfda87f346c3d8983/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05ed98a11fe00c67e745f36dfda87f346c3d8983/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=05ed98a11fe00c67e745f36dfda87f346c3d8983", "patch": "@@ -124,9 +124,8 @@\n ; CLOB means that the condition codes are altered in an undefined manner, if\n ; they are altered at all\n \n-; JUMP_CLOB is used when the conditions are not defined if a branch is taken,\n-; but are if the branch wasn't taken; the effect is to limit the branch\n-; elimination scanning.\n+; JUMP_CLOB is used when the condition cannot be represented by a single\n+; instruction (UNEQ and LTGT).  These cannot be predicated.\n \n ; NOCOND means that the condition codes are neither altered nor affect the\n ; output of this insn\n@@ -698,15 +697,15 @@\n \n (define_insn \"incscc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n-        (plus:SI (match_operator:SI 2 \"comparison_operator\"\n+        (plus:SI (match_operator:SI 2 \"arm_comparison_operator\"\n                     [(match_operand:CC 3 \"cc_register\" \"\") (const_int 0)])\n                  (match_operand:SI 1 \"s_register_operand\" \"0,?r\")))]\n   \"TARGET_ARM\"\n   \"@\n   add%d2\\\\t%0, %1, #1\n   mov%D2\\\\t%0, %1\\;add%d2\\\\t%0, %1, #1\"\n-[(set_attr \"conds\" \"use\")\n- (set_attr \"length\" \"4,8\")])\n+  [(set_attr \"conds\" \"use\")\n+   (set_attr \"length\" \"4,8\")])\n \n ; If a constant is too big to fit in a single instruction then the constant\n ; will be pre-loaded into a register taking at least two insns, we might be\n@@ -1012,7 +1011,7 @@\n (define_insn \"decscc\"\n   [(set (match_operand:SI            0 \"s_register_operand\" \"=r,r\")\n         (minus:SI (match_operand:SI  1 \"s_register_operand\" \"0,?r\")\n-\t\t  (match_operator:SI 2 \"comparison_operator\"\n+\t\t  (match_operator:SI 2 \"arm_comparison_operator\"\n                    [(match_operand   3 \"cc_register\" \"\") (const_int 0)])))]\n   \"TARGET_ARM\"\n   \"@\n@@ -5152,7 +5151,7 @@\n (define_insn \"cbranchsi4\"\n   [(set (pc)\n \t(if_then_else\n-\t    (match_operator                    0 \"comparison_operator\"\n+\t    (match_operator                    0 \"arm_comparison_operator\"\n \t                    [(match_operand:SI 1 \"register_operand\"   \"l,r\")\n \t\t\t     (match_operand:SI 2 \"nonmemory_operand\" \"rI,r\")])\n \t    (label_ref       (match_operand    3 \"\" \"\"))\n@@ -5187,7 +5186,7 @@\n (define_insn \"*negated_cbranchsi4\"\n   [(set (pc)\n \t(if_then_else\n-\t    (match_operator                            0 \"comparison_operator\"\n+\t    (match_operator                            0 \"arm_comparison_operator\"\n \t                    [(match_operand:SI         1 \"register_operand\"  \"l\")\n \t\t\t     (neg:SI (match_operand:SI 2 \"nonmemory_operand\" \"l\"))])\n \t    (label_ref       (match_operand            3 \"\" \"\"))\n@@ -5529,11 +5528,123 @@\n   \"operands[1] = arm_gen_compare_reg (LTU, arm_compare_op0, arm_compare_op1);\"\n )\n \n-;; patterns to match conditional branch insns\n+(define_expand \"bunordered\"\n+  [(set (pc)\n+\t(if_then_else (unordered (match_dup 1) (const_int 0))\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"TARGET_ARM && TARGET_HARD_FLOAT\"\n+  \"operands[1] = arm_gen_compare_reg (UNORDERED, arm_compare_op0,\n+\t\t\t\t      arm_compare_op1);\"\n+)\n+\n+(define_expand \"bordered\"\n+  [(set (pc)\n+\t(if_then_else (ordered (match_dup 1) (const_int 0))\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"TARGET_ARM && TARGET_HARD_FLOAT\"\n+  \"operands[1] = arm_gen_compare_reg (ORDERED, arm_compare_op0,\n+\t\t\t\t      arm_compare_op1);\"\n+)\n+\n+(define_expand \"bungt\"\n+  [(set (pc)\n+\t(if_then_else (ungt (match_dup 1) (const_int 0))\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"TARGET_ARM && TARGET_HARD_FLOAT\"\n+  \"operands[1] = arm_gen_compare_reg (UNGT, arm_compare_op0, arm_compare_op1);\"\n+)\n+\n+(define_expand \"bunlt\"\n+  [(set (pc)\n+\t(if_then_else (unlt (match_dup 1) (const_int 0))\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"TARGET_ARM && TARGET_HARD_FLOAT\"\n+  \"operands[1] = arm_gen_compare_reg (UNLT, arm_compare_op0, arm_compare_op1);\"\n+)\n+\n+(define_expand \"bunge\"\n+  [(set (pc)\n+\t(if_then_else (unge (match_dup 1) (const_int 0))\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"TARGET_ARM && TARGET_HARD_FLOAT\"\n+  \"operands[1] = arm_gen_compare_reg (UNGE, arm_compare_op0, arm_compare_op1);\"\n+)\n+\n+(define_expand \"bunle\"\n+  [(set (pc)\n+\t(if_then_else (unle (match_dup 1) (const_int 0))\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"TARGET_ARM && TARGET_HARD_FLOAT\"\n+  \"operands[1] = arm_gen_compare_reg (UNLE, arm_compare_op0, arm_compare_op1);\"\n+)\n+\n+;; The following two patterns need two branch instructions, since there is\n+;; no single instruction that will handle all cases.\n+(define_expand \"buneq\"\n+  [(set (pc)\n+\t(if_then_else (uneq (match_dup 1) (const_int 0))\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"TARGET_ARM && TARGET_HARD_FLOAT\"\n+  \"operands[1] = arm_gen_compare_reg (UNEQ, arm_compare_op0, arm_compare_op1);\"\n+)\n+\n+(define_expand \"bltgt\"\n+  [(set (pc)\n+\t(if_then_else (ltgt (match_dup 1) (const_int 0))\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"TARGET_ARM && TARGET_HARD_FLOAT\"\n+  \"operands[1] = arm_gen_compare_reg (LTGT, arm_compare_op0, arm_compare_op1);\"\n+)\n+\n+;;\n+;; Patterns to match conditional branch insns.\n+;;\n+\n+; Special pattern to match UNEQ.\n+(define_insn \"*arm_buneq\"\n+  [(set (pc)\n+\t(if_then_else (uneq (match_operand 1 \"cc_register\" \"\") (const_int 0))\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"TARGET_ARM && TARGET_HARD_FLOAT\"\n+  \"*\n+  if (arm_ccfsm_state != 0)\n+    abort ();\n+\n+  return \\\"bvs\\\\t%l0;beq\\\\t%l0\\\";\n+  \"\n+  [(set_attr \"conds\" \"jump_clob\")\n+   (set_attr \"length\" \"8\")]\n+)\n+\n+; Special pattern to match LTGT.\n+(define_insn \"*arm_bltgt\"\n+  [(set (pc)\n+\t(if_then_else (ltgt (match_operand 1 \"cc_register\" \"\") (const_int 0))\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"TARGET_ARM && TARGET_HARD_FLOAT\"\n+  \"*\n+  if (arm_ccfsm_state != 0)\n+    abort ();\n+\n+  return \\\"bmi\\\\t%l0;bgt\\\\t%l0\\\";\n+  \"\n+  [(set_attr \"conds\" \"jump_clob\")\n+   (set_attr \"length\" \"8\")]\n+)\n \n (define_insn \"*arm_cond_branch\"\n   [(set (pc)\n-\t(if_then_else (match_operator 1 \"comparison_operator\"\n+\t(if_then_else (match_operator 1 \"arm_comparison_operator\"\n \t\t       [(match_operand 2 \"cc_register\" \"\") (const_int 0)])\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n@@ -5549,9 +5660,43 @@\n   [(set_attr \"conds\" \"use\")]\n )\n \n+; Special pattern to match reversed UNEQ.\n+(define_insn \"*arm_buneq_reversed\"\n+  [(set (pc)\n+\t(if_then_else (uneq (match_operand 1 \"cc_register\" \"\") (const_int 0))\n+\t\t      (pc)\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n+  \"TARGET_ARM && TARGET_HARD_FLOAT\"\n+  \"*\n+  if (arm_ccfsm_state != 0)\n+    abort ();\n+\n+  return \\\"bmi\\\\t%l0;bgt\\\\t%l0\\\";\n+  \"\n+  [(set_attr \"conds\" \"jump_clob\")\n+   (set_attr \"length\" \"8\")]\n+)\n+\n+; Special pattern to match reversed LTGT.\n+(define_insn \"*arm_bltgt_reversed\"\n+  [(set (pc)\n+\t(if_then_else (ltgt (match_operand 1 \"cc_register\" \"\") (const_int 0))\n+\t\t      (pc)\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n+  \"TARGET_ARM && TARGET_HARD_FLOAT\"\n+  \"*\n+  if (arm_ccfsm_state != 0)\n+    abort ();\n+\n+  return \\\"bvs\\\\t%l0;beq\\\\t%l0\\\";\n+  \"\n+  [(set_attr \"conds\" \"jump_clob\")\n+   (set_attr \"length\" \"8\")]\n+)\n+\n (define_insn \"*arm_cond_branch_reversed\"\n   [(set (pc)\n-\t(if_then_else (match_operator 1 \"comparison_operator\"\n+\t(if_then_else (match_operator 1 \"arm_comparison_operator\"\n \t\t       [(match_operand 2 \"cc_register\" \"\") (const_int 0)])\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n@@ -5641,9 +5786,74 @@\n   \"operands[1] = arm_gen_compare_reg (LTU, arm_compare_op0, arm_compare_op1);\"\n )\n \n+(define_expand \"sunordered\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(unordered:SI (match_dup 1) (const_int 0)))]\n+  \"TARGET_ARM && TARGET_HARD_FLOAT\"\n+  \"operands[1] = arm_gen_compare_reg (UNORDERED, arm_compare_op0,\n+\t\t\t\t      arm_compare_op1);\"\n+)\n+\n+(define_expand \"sordered\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(ordered:SI (match_dup 1) (const_int 0)))]\n+  \"TARGET_ARM && TARGET_HARD_FLOAT\"\n+  \"operands[1] = arm_gen_compare_reg (ORDERED, arm_compare_op0,\n+\t\t\t\t      arm_compare_op1);\"\n+)\n+\n+(define_expand \"sungt\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(ungt:SI (match_dup 1) (const_int 0)))]\n+  \"TARGET_ARM && TARGET_HARD_FLOAT\"\n+  \"operands[1] = arm_gen_compare_reg (UNGT, arm_compare_op0,\n+\t\t\t\t      arm_compare_op1);\"\n+)\n+\n+(define_expand \"sunge\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(unge:SI (match_dup 1) (const_int 0)))]\n+  \"TARGET_ARM && TARGET_HARD_FLOAT\"\n+  \"operands[1] = arm_gen_compare_reg (UNGE, arm_compare_op0,\n+\t\t\t\t      arm_compare_op1);\"\n+)\n+\n+(define_expand \"sunlt\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(unlt:SI (match_dup 1) (const_int 0)))]\n+  \"TARGET_ARM && TARGET_HARD_FLOAT\"\n+  \"operands[1] = arm_gen_compare_reg (UNLT, arm_compare_op0,\n+\t\t\t\t      arm_compare_op1);\"\n+)\n+\n+(define_expand \"sunle\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(unle:SI (match_dup 1) (const_int 0)))]\n+  \"TARGET_ARM && TARGET_HARD_FLOAT\"\n+  \"operands[1] = arm_gen_compare_reg (UNLE, arm_compare_op0,\n+\t\t\t\t      arm_compare_op1);\"\n+)\n+\n+;;; DO NOT add patterns for SUNEQ or SLTGT, these can't be represented with\n+;;; simple ARM instructions. \n+;\n+; (define_expand \"suneq\"\n+;   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+; \t(uneq:SI (match_dup 1) (const_int 0)))]\n+;   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n+;   \"abort ();\"\n+; )\n+;\n+; (define_expand \"sltgt\"\n+;   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+; \t(ltgt:SI (match_dup 1) (const_int 0)))]\n+;   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n+;   \"abort ();\"\n+; )\n+\n (define_insn \"*mov_scc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(match_operator:SI 1 \"comparison_operator\"\n+\t(match_operator:SI 1 \"arm_comparison_operator\"\n \t [(match_operand 2 \"cc_register\" \"\") (const_int 0)]))]\n   \"TARGET_ARM\"\n   \"mov%D1\\\\t%0, #0\\;mov%d1\\\\t%0, #1\"\n@@ -5653,7 +5863,7 @@\n \n (define_insn \"*mov_negscc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(neg:SI (match_operator:SI 1 \"comparison_operator\"\n+\t(neg:SI (match_operator:SI 1 \"arm_comparison_operator\"\n \t\t [(match_operand 2 \"cc_register\" \"\") (const_int 0)])))]\n   \"TARGET_ARM\"\n   \"mov%D1\\\\t%0, #0\\;mvn%d1\\\\t%0, #0\"\n@@ -5663,7 +5873,7 @@\n \n (define_insn \"*mov_notscc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(not:SI (match_operator:SI 1 \"comparison_operator\"\n+\t(not:SI (match_operator:SI 1 \"arm_comparison_operator\"\n \t\t [(match_operand 2 \"cc_register\" \"\") (const_int 0)])))]\n   \"TARGET_ARM\"\n   \"mov%D1\\\\t%0, #0\\;mvn%d1\\\\t%0, #1\"\n@@ -5676,7 +5886,7 @@\n \n (define_expand \"movsicc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n-\t(if_then_else:SI (match_operand 1 \"comparison_operator\" \"\")\n+\t(if_then_else:SI (match_operand 1 \"arm_comparison_operator\" \"\")\n \t\t\t (match_operand:SI 2 \"arm_not_operand\" \"\")\n \t\t\t (match_operand:SI 3 \"arm_not_operand\" \"\")))]\n   \"TARGET_ARM\"\n@@ -5690,7 +5900,7 @@\n \n (define_expand \"movsfcc\"\n   [(set (match_operand:SF 0 \"s_register_operand\" \"\")\n-\t(if_then_else:SF (match_operand 1 \"comparison_operator\" \"\")\n+\t(if_then_else:SF (match_operand 1 \"arm_comparison_operator\" \"\")\n \t\t\t (match_operand:SF 2 \"s_register_operand\" \"\")\n \t\t\t (match_operand:SF 3 \"nonmemory_operand\" \"\")))]\n   \"TARGET_ARM\"\n@@ -5712,7 +5922,7 @@\n \n (define_expand \"movdfcc\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"\")\n-\t(if_then_else:DF (match_operand 1 \"comparison_operator\" \"\")\n+\t(if_then_else:DF (match_operand 1 \"arm_comparison_operator\" \"\")\n \t\t\t (match_operand:DF 2 \"s_register_operand\" \"\")\n \t\t\t (match_operand:DF 3 \"fpu_add_operand\" \"\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n@@ -5727,7 +5937,7 @@\n (define_insn \"*movsicc_insn\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r,r,r,r,r,r\")\n \t(if_then_else:SI\n-\t (match_operator 3 \"comparison_operator\"\n+\t (match_operator 3 \"arm_comparison_operator\"\n \t  [(match_operand 4 \"cc_register\" \"\") (const_int 0)])\n \t (match_operand:SI 1 \"arm_not_operand\" \"0,0,rI,K,rI,rI,K,K\")\n \t (match_operand:SI 2 \"arm_not_operand\" \"rI,K,0,0,rI,K,rI,K\")))]\n@@ -5747,7 +5957,7 @@\n (define_insn \"*movsfcc_hard_insn\"\n   [(set (match_operand:SF 0 \"s_register_operand\" \"=f,f,f,f,f,f,f,f\")\n \t(if_then_else:SF\n-\t (match_operator 3 \"comparison_operator\" \n+\t (match_operator 3 \"arm_comparison_operator\" \n \t  [(match_operand 4 \"cc_register\" \"\") (const_int 0)])\n \t (match_operand:SF 1 \"fpu_add_operand\" \"0,0,fG,H,fG,fG,H,H\")\n \t (match_operand:SF 2 \"fpu_add_operand\" \"fG,H,0,0,fG,H,fG,H\")))]\n@@ -5767,20 +5977,21 @@\n \n (define_insn \"*movsfcc_soft_insn\"\n   [(set (match_operand:SF 0 \"s_register_operand\" \"=r,r\")\n-\t(if_then_else:SF (match_operator 3 \"comparison_operator\"\n+\t(if_then_else:SF (match_operator 3 \"arm_comparison_operator\"\n \t\t\t  [(match_operand 4 \"cc_register\" \"\") (const_int 0)])\n \t\t\t (match_operand:SF 1 \"s_register_operand\" \"0,r\")\n \t\t\t (match_operand:SF 2 \"s_register_operand\" \"r,0\")))]\n   \"TARGET_ARM && TARGET_SOFT_FLOAT\"\n   \"@\n    mov%D3\\\\t%0, %2\n    mov%d3\\\\t%0, %1\"\n-  [(set_attr \"conds\" \"use\")])\n+  [(set_attr \"conds\" \"use\")]\n+)\n \n (define_insn \"*movdfcc_insn\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f,f,f,f,f,f,f,f\")\n \t(if_then_else:DF\n-\t (match_operator 3 \"comparison_operator\"\n+\t (match_operator 3 \"arm_comparison_operator\"\n \t  [(match_operand 4 \"cc_register\" \"\") (const_int 0)])\n \t (match_operand:DF 1 \"fpu_add_operand\" \"0,0,fG,H,fG,fG,H,H\")\n \t (match_operand:DF 2 \"fpu_add_operand\" \"fG,H,0,0,fG,H,fG,H\")))]\n@@ -6128,41 +6339,43 @@\n \n (define_insn \"*cond_return\"\n   [(set (pc)\n-        (if_then_else (match_operator 0 \"comparison_operator\"\n+        (if_then_else (match_operator 0 \"arm_comparison_operator\"\n \t\t       [(match_operand 1 \"cc_register\" \"\") (const_int 0)])\n                       (return)\n                       (pc)))]\n   \"TARGET_ARM && USE_RETURN_INSN (TRUE)\"\n   \"*\n-{\n-  if (arm_ccfsm_state == 2)\n-    {\n-      arm_ccfsm_state += 2;\n-      return \\\"\\\";\n-    }\n-  return output_return_instruction (operands[0], TRUE, FALSE);\n-}\"\n-[(set_attr \"conds\" \"use\")\n- (set_attr \"type\" \"load\")])\n+  {\n+    if (arm_ccfsm_state == 2)\n+      {\n+        arm_ccfsm_state += 2;\n+        return \\\"\\\";\n+      }\n+    return output_return_instruction (operands[0], TRUE, FALSE);\n+  }\"\n+  [(set_attr \"conds\" \"use\")\n+   (set_attr \"type\" \"load\")]\n+)\n \n (define_insn \"*cond_return_inverted\"\n   [(set (pc)\n-        (if_then_else (match_operator 0 \"comparison_operator\"\n+        (if_then_else (match_operator 0 \"arm_comparison_operator\"\n \t\t       [(match_operand 1 \"cc_register\" \"\") (const_int 0)])\n                       (pc)\n \t\t      (return)))]\n   \"TARGET_ARM && USE_RETURN_INSN (TRUE)\"\n   \"*\n-{\n-  if (arm_ccfsm_state == 2)\n-    {\n-      arm_ccfsm_state += 2;\n-      return \\\"\\\";\n-    }\n-  return output_return_instruction (operands[0], TRUE, TRUE);\n-}\"\n-[(set_attr \"conds\" \"use\")\n- (set_attr \"type\" \"load\")])\n+  {\n+    if (arm_ccfsm_state == 2)\n+      {\n+        arm_ccfsm_state += 2;\n+        return \\\"\\\";\n+      }\n+    return output_return_instruction (operands[0], TRUE, TRUE);\n+  }\"\n+  [(set_attr \"conds\" \"use\")\n+   (set_attr \"type\" \"load\")]\n+)\n \n ;; Call subroutine returning any type.\n \n@@ -6502,175 +6715,185 @@\n    (clobber (match_scratch:SI 0 \"=&r\"))]\n   \"TARGET_ARM && reload_in_progress\"\n   \"*\n-  output_add_immediate (operands);\n-  return \\\"mla%?s\\\\t%0, %3, %4, %0\\\";\n-\"\n-[(set_attr \"length\" \"20\")\n- (set_attr \"conds\" \"set\")\n- (set_attr \"type\" \"mult\")])\n+    output_add_immediate (operands);\n+    return \\\"mla%?s\\\\t%0, %3, %4, %0\\\";\n+  \"\n+  [(set_attr \"length\" \"20\")\n+   (set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"mult\")]\n+)\n \n \f\n \n (define_insn \"*and_scc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(and:SI (match_operator:SI 1 \"comparison_operator\"\n+\t(and:SI (match_operator:SI 1 \"arm_comparison_operator\"\n \t\t [(match_operand 3 \"cc_register\" \"\") (const_int 0)])\n \t\t(match_operand:SI 2 \"s_register_operand\" \"r\")))]\n   \"TARGET_ARM\"\n   \"mov%D1\\\\t%0, #0\\;and%d1\\\\t%0, %2, #1\"\n-[(set_attr \"conds\" \"use\")\n- (set_attr \"length\" \"8\")])\n+  [(set_attr \"conds\" \"use\")\n+   (set_attr \"length\" \"8\")]\n+)\n \n (define_insn \"*ior_scc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n-\t(ior:SI (match_operator:SI 2 \"comparison_operator\"\n+\t(ior:SI (match_operator:SI 2 \"arm_comparison_operator\"\n \t\t [(match_operand 3 \"cc_register\" \"\") (const_int 0)])\n \t\t(match_operand:SI 1 \"s_register_operand\" \"0,?r\")))]\n   \"TARGET_ARM\"\n   \"@\n    orr%d2\\\\t%0, %1, #1\n    mov%D2\\\\t%0, %1\\;orr%d2\\\\t%0, %1, #1\"\n-[(set_attr \"conds\" \"use\")\n- (set_attr \"length\" \"4,8\")])\n+  [(set_attr \"conds\" \"use\")\n+   (set_attr \"length\" \"4,8\")]\n+)\n \n (define_insn \"*compare_scc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n-\t(match_operator:SI 1 \"comparison_operator\"\n+\t(match_operator:SI 1 \"arm_comparison_operator\"\n \t [(match_operand:SI 2 \"s_register_operand\" \"r,r\")\n \t  (match_operand:SI 3 \"arm_add_operand\" \"rI,L\")]))\n    (clobber (reg:CC 24))]\n   \"TARGET_ARM\"\n   \"*\n-  if (GET_CODE (operands[1]) == LT && operands[3] == const0_rtx)\n-    return \\\"mov\\\\t%0, %2, lsr #31\\\";\n+    if (GET_CODE (operands[1]) == LT && operands[3] == const0_rtx)\n+      return \\\"mov\\\\t%0, %2, lsr #31\\\";\n \n-  if (GET_CODE (operands[1]) == GE && operands[3] == const0_rtx)\n-    return \\\"mvn\\\\t%0, %2\\;mov\\\\t%0, %0, lsr #31\\\";\n+    if (GET_CODE (operands[1]) == GE && operands[3] == const0_rtx)\n+      return \\\"mvn\\\\t%0, %2\\;mov\\\\t%0, %0, lsr #31\\\";\n \n-  if (GET_CODE (operands[1]) == NE)\n-    {\n-      if (which_alternative == 1)\n-\treturn \\\"adds\\\\t%0, %2, #%n3\\;movne\\\\t%0, #1\\\";\n-      return \\\"subs\\\\t%0, %2, %3\\;movne\\\\t%0, #1\\\";\n-    }\n-  if (which_alternative == 1)\n-    output_asm_insn (\\\"cmn\\\\t%2, #%n3\\\", operands);\n-  else\n-    output_asm_insn (\\\"cmp\\\\t%2, %3\\\", operands);\n-  return \\\"mov%D1\\\\t%0, #0\\;mov%d1\\\\t%0, #1\\\";\n-\"\n-[(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"12\")])\n+    if (GET_CODE (operands[1]) == NE)\n+      {\n+        if (which_alternative == 1)\n+\t  return \\\"adds\\\\t%0, %2, #%n3\\;movne\\\\t%0, #1\\\";\n+        return \\\"subs\\\\t%0, %2, %3\\;movne\\\\t%0, #1\\\";\n+      }\n+    if (which_alternative == 1)\n+      output_asm_insn (\\\"cmn\\\\t%2, #%n3\\\", operands);\n+    else\n+      output_asm_insn (\\\"cmp\\\\t%2, %3\\\", operands);\n+    return \\\"mov%D1\\\\t%0, #0\\;mov%d1\\\\t%0, #1\\\";\n+  \"\n+  [(set_attr \"conds\" \"clob\")\n+   (set_attr \"length\" \"12\")]\n+)\n \n (define_insn \"*cond_move\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n \t(if_then_else:SI (match_operator 3 \"equality_operator\"\n-\t\t\t  [(match_operator 4 \"comparison_operator\"\n+\t\t\t  [(match_operator 4 \"arm_comparison_operator\"\n \t\t\t    [(match_operand 5 \"cc_register\" \"\") (const_int 0)])\n \t\t\t   (const_int 0)])\n \t\t\t (match_operand:SI 1 \"arm_rhs_operand\" \"0,rI,?rI\")\n \t\t\t (match_operand:SI 2 \"arm_rhs_operand\" \"rI,0,rI\")))]\n   \"TARGET_ARM\"\n   \"*\n-  if (GET_CODE (operands[3]) == NE)\n-    {\n-      if (which_alternative != 1)\n-\toutput_asm_insn (\\\"mov%D4\\\\t%0, %2\\\", operands);\n-      if (which_alternative != 0)\n-\toutput_asm_insn (\\\"mov%d4\\\\t%0, %1\\\", operands);\n-      return \\\"\\\";\n-    }\n-  if (which_alternative != 0)\n-    output_asm_insn (\\\"mov%D4\\\\t%0, %1\\\", operands);\n-  if (which_alternative != 1)\n-    output_asm_insn (\\\"mov%d4\\\\t%0, %2\\\", operands);\n-  return \\\"\\\";\n-\"\n-[(set_attr \"conds\" \"use\")\n- (set_attr \"length\" \"4,4,8\")])\n+    if (GET_CODE (operands[3]) == NE)\n+      {\n+        if (which_alternative != 1)\n+\t  output_asm_insn (\\\"mov%D4\\\\t%0, %2\\\", operands);\n+        if (which_alternative != 0)\n+\t  output_asm_insn (\\\"mov%d4\\\\t%0, %1\\\", operands);\n+        return \\\"\\\";\n+      }\n+    if (which_alternative != 0)\n+      output_asm_insn (\\\"mov%D4\\\\t%0, %1\\\", operands);\n+    if (which_alternative != 1)\n+      output_asm_insn (\\\"mov%d4\\\\t%0, %2\\\", operands);\n+    return \\\"\\\";\n+  \"\n+  [(set_attr \"conds\" \"use\")\n+   (set_attr \"length\" \"4,4,8\")]\n+)\n \n (define_insn \"*cond_arith\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n         (match_operator:SI 5 \"shiftable_operator\" \n-\t [(match_operator:SI 4 \"comparison_operator\"\n+\t [(match_operator:SI 4 \"arm_comparison_operator\"\n            [(match_operand:SI 2 \"s_register_operand\" \"r,r\")\n \t    (match_operand:SI 3 \"arm_rhs_operand\" \"rI,rI\")])\n           (match_operand:SI 1 \"s_register_operand\" \"0,?r\")]))\n    (clobber (reg:CC 24))]\n   \"TARGET_ARM\"\n   \"*\n-  if (GET_CODE (operands[4]) == LT && operands[3] == const0_rtx)\n-    return \\\"%i5\\\\t%0, %1, %2, lsr #31\\\";\n+    if (GET_CODE (operands[4]) == LT && operands[3] == const0_rtx)\n+      return \\\"%i5\\\\t%0, %1, %2, lsr #31\\\";\n \n-  output_asm_insn (\\\"cmp\\\\t%2, %3\\\", operands);\n-  if (GET_CODE (operands[5]) == AND)\n-    output_asm_insn (\\\"mov%D4\\\\t%0, #0\\\", operands);\n-  else if (GET_CODE (operands[5]) == MINUS)\n-    output_asm_insn (\\\"rsb%D4\\\\t%0, %1, #0\\\", operands);\n-  else if (which_alternative != 0)\n-    output_asm_insn (\\\"mov%D4\\\\t%0, %1\\\", operands);\n-  return \\\"%i5%d4\\\\t%0, %1, #1\\\";\n-\"\n-[(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"12\")])\n+    output_asm_insn (\\\"cmp\\\\t%2, %3\\\", operands);\n+    if (GET_CODE (operands[5]) == AND)\n+      output_asm_insn (\\\"mov%D4\\\\t%0, #0\\\", operands);\n+    else if (GET_CODE (operands[5]) == MINUS)\n+      output_asm_insn (\\\"rsb%D4\\\\t%0, %1, #0\\\", operands);\n+    else if (which_alternative != 0)\n+      output_asm_insn (\\\"mov%D4\\\\t%0, %1\\\", operands);\n+    return \\\"%i5%d4\\\\t%0, %1, #1\\\";\n+  \"\n+  [(set_attr \"conds\" \"clob\")\n+   (set_attr \"length\" \"12\")]\n+)\n \n (define_insn \"*cond_sub\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n         (minus:SI (match_operand:SI 1 \"s_register_operand\" \"0,?r\")\n-\t\t  (match_operator:SI 4 \"comparison_operator\"\n+\t\t  (match_operator:SI 4 \"arm_comparison_operator\"\n                    [(match_operand:SI 2 \"s_register_operand\" \"r,r\")\n \t\t    (match_operand:SI 3 \"arm_rhs_operand\" \"rI,rI\")])))\n    (clobber (reg:CC 24))]\n   \"TARGET_ARM\"\n   \"*\n-  output_asm_insn (\\\"cmp\\\\t%2, %3\\\", operands);\n-  if (which_alternative != 0)\n-    output_asm_insn (\\\"mov%D4\\\\t%0, %1\\\", operands);\n-  return \\\"sub%d4\\\\t%0, %1, #1\\\";\n-\"\n-[(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"8,12\")])\n+    output_asm_insn (\\\"cmp\\\\t%2, %3\\\", operands);\n+    if (which_alternative != 0)\n+      output_asm_insn (\\\"mov%D4\\\\t%0, %1\\\", operands);\n+    return \\\"sub%d4\\\\t%0, %1, #1\\\";\n+  \"\n+  [(set_attr \"conds\" \"clob\")\n+   (set_attr \"length\" \"8,12\")]\n+)\n \n (define_insn \"*cmp_ite0\"\n   [(set (match_operand 6 \"dominant_cc_register\" \"\")\n \t(compare\n \t (if_then_else:SI\n-\t  (match_operator 4 \"comparison_operator\"\n+\t  (match_operator 4 \"arm_comparison_operator\"\n \t   [(match_operand:SI 0 \"s_register_operand\" \"r,r,r,r\")\n \t    (match_operand:SI 1 \"arm_add_operand\" \"rI,L,rI,L\")])\n-\t  (match_operator:SI 5 \"comparison_operator\"\n+\t  (match_operator:SI 5 \"arm_comparison_operator\"\n \t   [(match_operand:SI 2 \"s_register_operand\" \"r,r,r,r\")\n \t    (match_operand:SI 3 \"arm_add_operand\" \"rI,rI,L,L\")])\n \t  (const_int 0))\n \t (const_int 0)))]\n   \"TARGET_ARM\"\n   \"*\n-{\n-  char * opcodes[4][2] =\n   {\n-    {\\\"cmp\\\\t%2, %3\\;cmp%d5\\\\t%0, %1\\\",\\\"cmp\\\\t%0, %1\\;cmp%d4\\\\t%2, %3\\\"},\n-    {\\\"cmp\\\\t%2, %3\\;cmn%d5\\\\t%0, #%n1\\\", \\\"cmn\\\\t%0, #%n1\\;cmp%d4\\\\t%2, %3\\\"},\n-    {\\\"cmn\\\\t%2, #%n3\\;cmp%d5\\\\t%0, %1\\\", \\\"cmp\\\\t%0, %1\\;cmn%d4\\\\t%2, #%n3\\\"},\n-    {\\\"cmn\\\\t%2, #%n3\\;cmn%d5\\\\t%0, #%n1\\\",\n-     \\\"cmn\\\\t%0, #%n1\\;cmn%d4\\\\t%2, #%n3\\\"}\n-  };\n-  int swap =\n-    comparison_dominates_p (GET_CODE (operands[5]), GET_CODE (operands[4]));\n-\n-  return opcodes[which_alternative][swap];\n-}\n-\"\n-[(set_attr \"conds\" \"set\")\n- (set_attr \"length\" \"8\")])\n+    static const char * const opcodes[4][2] =\n+    {\n+      {\\\"cmp\\\\t%2, %3\\;cmp%d5\\\\t%0, %1\\\",\n+       \\\"cmp\\\\t%0, %1\\;cmp%d4\\\\t%2, %3\\\"},\n+      {\\\"cmp\\\\t%2, %3\\;cmn%d5\\\\t%0, #%n1\\\",\n+       \\\"cmn\\\\t%0, #%n1\\;cmp%d4\\\\t%2, %3\\\"},\n+      {\\\"cmn\\\\t%2, #%n3\\;cmp%d5\\\\t%0, %1\\\",\n+       \\\"cmp\\\\t%0, %1\\;cmn%d4\\\\t%2, #%n3\\\"},\n+      {\\\"cmn\\\\t%2, #%n3\\;cmn%d5\\\\t%0, #%n1\\\",\n+       \\\"cmn\\\\t%0, #%n1\\;cmn%d4\\\\t%2, #%n3\\\"}\n+    };\n+    int swap =\n+      comparison_dominates_p (GET_CODE (operands[5]), GET_CODE (operands[4]));\n+\n+    return opcodes[which_alternative][swap];\n+  }\"\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"length\" \"8\")]\n+)\n \n (define_insn \"*cmp_ite1\"\n   [(set (match_operand 6 \"dominant_cc_register\" \"\")\n \t(compare\n \t (if_then_else:SI\n-\t  (match_operator 4 \"comparison_operator\"\n+\t  (match_operator 4 \"arm_comparison_operator\"\n \t   [(match_operand:SI 0 \"s_register_operand\" \"r,r,r,r\")\n \t    (match_operand:SI 1 \"arm_add_operand\" \"rI,L,rI,L\")])\n-\t  (match_operator:SI 5 \"comparison_operator\"\n+\t  (match_operator:SI 5 \"arm_comparison_operator\"\n \t   [(match_operand:SI 2 \"s_register_operand\" \"r,r,r,r\")\n \t    (match_operand:SI 3 \"arm_add_operand\" \"rI,rI,L,L\")])\n \t  (const_int 1))\n@@ -6693,12 +6916,13 @@\n   return opcodes[which_alternative][swap];\n }\n \"\n-[(set_attr \"conds\" \"set\")\n- (set_attr \"length\" \"8\")])\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"length\" \"8\")]\n+)\n \n (define_insn \"*negscc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(neg:SI (match_operator 3 \"comparison_operator\"\n+\t(neg:SI (match_operator 3 \"arm_comparison_operator\"\n \t\t [(match_operand:SI 1 \"s_register_operand\" \"r\")\n \t\t  (match_operand:SI 2 \"arm_rhs_operand\" \"rI\")])))\n    (clobber (reg:CC 24))]\n@@ -6717,13 +6941,14 @@\n   output_asm_insn (\\\"mov%D3\\\\t%0, #0\\\", operands);\n   return \\\"mvn%d3\\\\t%0, #0\\\";\n \"\n-[(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"12\")])\n+  [(set_attr \"conds\" \"clob\")\n+   (set_attr \"length\" \"12\")]\n+)\n \n (define_insn \"movcond\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n \t(if_then_else:SI\n-\t (match_operator 5 \"comparison_operator\"\n+\t (match_operator 5 \"arm_comparison_operator\"\n \t  [(match_operand:SI 3 \"s_register_operand\" \"r,r,r\")\n \t   (match_operand:SI 4 \"arm_add_operand\" \"rIL,rIL,rIL\")])\n \t (match_operand:SI 1 \"arm_rhs_operand\" \"0,rI,?rI\")\n@@ -6779,12 +7004,13 @@\n     output_asm_insn (\\\"mov%D5\\\\t%0, %2\\\", operands);\n   return \\\"\\\";\n \"\n-[(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"8,8,12\")])\n+  [(set_attr \"conds\" \"clob\")\n+   (set_attr \"length\" \"8,8,12\")]\n+)\n \n (define_insn \"*ifcompare_plus_move\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n-\t(if_then_else:SI (match_operator 6 \"comparison_operator\"\n+\t(if_then_else:SI (match_operator 6 \"arm_comparison_operator\"\n \t\t\t  [(match_operand:SI 4 \"s_register_operand\" \"r,r\")\n \t\t\t   (match_operand:SI 5 \"arm_add_operand\" \"rIL,rIL\")])\n \t\t\t (plus:SI\n@@ -6794,13 +7020,14 @@\n    (clobber (reg:CC 24))]\n   \"TARGET_ARM\"\n   \"#\"\n-[(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"8,12\")])\n+  [(set_attr \"conds\" \"clob\")\n+   (set_attr \"length\" \"8,12\")]\n+)\n \n (define_insn \"*if_plus_move\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r,r\")\n \t(if_then_else:SI\n-\t (match_operator 4 \"comparison_operator\"\n+\t (match_operator 4 \"arm_comparison_operator\"\n \t  [(match_operand 5 \"cc_register\" \"\") (const_int 0)])\n \t (plus:SI\n \t  (match_operand:SI 2 \"s_register_operand\" \"r,r,r,r\")\n@@ -6812,13 +7039,14 @@\n    sub%d4\\\\t%0, %2, #%n3\n    add%d4\\\\t%0, %2, %3\\;mov%D4\\\\t%0, %1\n    sub%d4\\\\t%0, %2, #%n3\\;mov%D4\\\\t%0, %1\"\n-[(set_attr \"conds\" \"use\")\n- (set_attr \"length\" \"4,4,8,8\")\n- (set_attr \"type\" \"*,*,*,*\")])\n+  [(set_attr \"conds\" \"use\")\n+   (set_attr \"length\" \"4,4,8,8\")\n+   (set_attr \"type\" \"*,*,*,*\")]\n+)\n \n (define_insn \"*ifcompare_move_plus\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n-\t(if_then_else:SI (match_operator 6 \"comparison_operator\"\n+\t(if_then_else:SI (match_operator 6 \"arm_comparison_operator\"\n \t\t\t  [(match_operand:SI 4 \"s_register_operand\" \"r,r\")\n \t\t\t   (match_operand:SI 5 \"arm_add_operand\" \"rIL,rIL\")])\n \t\t\t (match_operand:SI 1 \"arm_rhs_operand\" \"0,?rI\")\n@@ -6828,13 +7056,14 @@\n    (clobber (reg:CC 24))]\n   \"TARGET_ARM\"\n   \"#\"\n-[(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"8,12\")])\n+  [(set_attr \"conds\" \"clob\")\n+   (set_attr \"length\" \"8,12\")]\n+)\n \n (define_insn \"*if_move_plus\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r,r\")\n \t(if_then_else:SI\n-\t (match_operator 4 \"comparison_operator\"\n+\t (match_operator 4 \"arm_comparison_operator\"\n \t  [(match_operand 5 \"cc_register\" \"\") (const_int 0)])\n \t (match_operand:SI 1 \"arm_rhs_operand\" \"0,0,?rI,?rI\")\n \t (plus:SI\n@@ -6846,13 +7075,14 @@\n    sub%D4\\\\t%0, %2, #%n3\n    add%D4\\\\t%0, %2, %3\\;mov%d4\\\\t%0, %1\n    sub%D4\\\\t%0, %2, #%n3\\;mov%d4\\\\t%0, %1\"\n-[(set_attr \"conds\" \"use\")\n- (set_attr \"length\" \"4,4,8,8\")\n- (set_attr \"type\" \"*,*,*,*\")])\n+  [(set_attr \"conds\" \"use\")\n+   (set_attr \"length\" \"4,4,8,8\")\n+   (set_attr \"type\" \"*,*,*,*\")]\n+)\n \n (define_insn \"*ifcompare_arith_arith\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(if_then_else:SI (match_operator 9 \"comparison_operator\"\n+\t(if_then_else:SI (match_operator 9 \"arm_comparison_operator\"\n \t\t\t  [(match_operand:SI 5 \"s_register_operand\" \"r\")\n \t\t\t   (match_operand:SI 6 \"arm_add_operand\" \"rIL\")])\n \t\t\t (match_operator:SI 8 \"shiftable_operator\"\n@@ -6864,12 +7094,13 @@\n    (clobber (reg:CC 24))]\n   \"TARGET_ARM\"\n   \"#\"\n-[(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"12\")])\n+  [(set_attr \"conds\" \"clob\")\n+   (set_attr \"length\" \"12\")]\n+)\n \n (define_insn \"*if_arith_arith\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(if_then_else:SI (match_operator 5 \"comparison_operator\"\n+\t(if_then_else:SI (match_operator 5 \"arm_comparison_operator\"\n \t\t\t  [(match_operand 8 \"cc_register\" \"\") (const_int 0)])\n \t\t\t (match_operator:SI 6 \"shiftable_operator\"\n \t\t\t  [(match_operand:SI 1 \"s_register_operand\" \"r\")\n@@ -6879,12 +7110,13 @@\n \t\t\t   (match_operand:SI 4 \"arm_rhs_operand\" \"rI\")])))]\n   \"TARGET_ARM\"\n   \"%I6%d5\\\\t%0, %1, %2\\;%I7%D5\\\\t%0, %3, %4\"\n-[(set_attr \"conds\" \"use\")\n- (set_attr \"length\" \"8\")])\n+  [(set_attr \"conds\" \"use\")\n+   (set_attr \"length\" \"8\")]\n+)\n \n (define_insn \"*ifcompare_arith_move\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n-\t(if_then_else:SI (match_operator 6 \"comparison_operator\"\n+\t(if_then_else:SI (match_operator 6 \"arm_comparison_operator\"\n \t\t\t  [(match_operand:SI 2 \"s_register_operand\" \"r,r\")\n \t\t\t   (match_operand:SI 3 \"arm_add_operand\" \"rIL,rIL\")])\n \t\t\t (match_operator:SI 7 \"shiftable_operator\"\n@@ -6919,12 +7151,13 @@\n     return \\\"mov%D6\\\\t%0, %1\\\";\n   return \\\"\\\";\n \"\n-[(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"8,12\")])\n+  [(set_attr \"conds\" \"clob\")\n+   (set_attr \"length\" \"8,12\")]\n+)\n \n (define_insn \"*if_arith_move\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n-\t(if_then_else:SI (match_operator 4 \"comparison_operator\"\n+\t(if_then_else:SI (match_operator 4 \"arm_comparison_operator\"\n \t\t\t  [(match_operand 6 \"cc_register\" \"\") (const_int 0)])\n \t\t\t (match_operator:SI 5 \"shiftable_operator\"\n \t\t\t  [(match_operand:SI 2 \"s_register_operand\" \"r,r\")\n@@ -6934,13 +7167,14 @@\n   \"@\n    %I5%d4\\\\t%0, %2, %3\n    %I5%d4\\\\t%0, %2, %3\\;mov%D4\\\\t%0, %1\"\n-[(set_attr \"conds\" \"use\")\n- (set_attr \"length\" \"4,8\")\n- (set_attr \"type\" \"*,*\")])\n+  [(set_attr \"conds\" \"use\")\n+   (set_attr \"length\" \"4,8\")\n+   (set_attr \"type\" \"*,*\")]\n+)\n \n (define_insn \"*ifcompare_move_arith\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n-\t(if_then_else:SI (match_operator 6 \"comparison_operator\"\n+\t(if_then_else:SI (match_operator 6 \"arm_comparison_operator\"\n \t\t\t  [(match_operand:SI 4 \"s_register_operand\" \"r,r\")\n \t\t\t   (match_operand:SI 5 \"arm_add_operand\" \"rIL,rIL\")])\n \t\t\t (match_operand:SI 1 \"arm_rhs_operand\" \"0,?rI\")\n@@ -6976,13 +7210,14 @@\n     output_asm_insn (\\\"mov%d6\\\\t%0, %1\\\", operands);\n   return \\\"%I7%D6\\\\t%0, %2, %3\\\";\n \"\n-[(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"8,12\")])\n+  [(set_attr \"conds\" \"clob\")\n+   (set_attr \"length\" \"8,12\")]\n+)\n \n (define_insn \"*if_move_arith\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(if_then_else:SI\n-\t (match_operator 4 \"comparison_operator\"\n+\t (match_operator 4 \"arm_comparison_operator\"\n \t  [(match_operand 6 \"cc_register\" \"\") (const_int 0)])\n \t (match_operand:SI 1 \"arm_rhs_operand\" \"0,?rI\")\n \t (match_operator:SI 5 \"shiftable_operator\"\n@@ -6992,14 +7227,15 @@\n   \"@\n    %I5%D4\\\\t%0, %2, %3\n    %I5%D4\\\\t%0, %2, %3\\;mov%d4\\\\t%0, %1\"\n-[(set_attr \"conds\" \"use\")\n- (set_attr \"length\" \"4,8\")\n- (set_attr \"type\" \"*,*\")])\n+  [(set_attr \"conds\" \"use\")\n+   (set_attr \"length\" \"4,8\")\n+   (set_attr \"type\" \"*,*\")]\n+)\n \n (define_insn \"*ifcompare_move_not\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(if_then_else:SI\n-\t (match_operator 5 \"comparison_operator\"\n+\t (match_operator 5 \"arm_comparison_operator\"\n \t  [(match_operand:SI 3 \"s_register_operand\" \"r,r\")\n \t   (match_operand:SI 4 \"arm_add_operand\" \"rIL,rIL\")])\n \t (match_operand:SI 1 \"arm_not_operand\" \"0,?rIK\")\n@@ -7008,13 +7244,14 @@\n    (clobber (reg:CC 24))]\n   \"TARGET_ARM\"\n   \"#\"\n-[(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"8,12\")])\n+  [(set_attr \"conds\" \"clob\")\n+   (set_attr \"length\" \"8,12\")]\n+)\n \n (define_insn \"*if_move_not\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n \t(if_then_else:SI\n-\t (match_operator 4 \"comparison_operator\"\n+\t (match_operator 4 \"arm_comparison_operator\"\n \t  [(match_operand 3 \"cc_register\" \"\") (const_int 0)])\n \t (match_operand:SI 1 \"arm_not_operand\" \"0,?rI,K\")\n \t (not:SI (match_operand:SI 2 \"s_register_operand\" \"r,r,r\"))))]\n@@ -7023,13 +7260,14 @@\n    mvn%D4\\\\t%0, %2\n    mov%d4\\\\t%0, %1\\;mvn%D4\\\\t%0, %2\n    mvn%d4\\\\t%0, #%B1\\;mvn%D4\\\\t%0, %2\"\n-[(set_attr \"conds\" \"use\")\n- (set_attr \"length\" \"4,8,8\")])\n+  [(set_attr \"conds\" \"use\")\n+   (set_attr \"length\" \"4,8,8\")]\n+)\n \n (define_insn \"*ifcompare_not_move\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(if_then_else:SI \n-\t (match_operator 5 \"comparison_operator\"\n+\t (match_operator 5 \"arm_comparison_operator\"\n \t  [(match_operand:SI 3 \"s_register_operand\" \"r,r\")\n \t   (match_operand:SI 4 \"arm_add_operand\" \"rIL,rIL\")])\n \t (not:SI\n@@ -7038,13 +7276,14 @@\n    (clobber (reg:CC 24))]\n   \"TARGET_ARM\"\n   \"#\"\n-[(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"8,12\")])\n+  [(set_attr \"conds\" \"clob\")\n+   (set_attr \"length\" \"8,12\")]\n+)\n \n (define_insn \"*if_not_move\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n \t(if_then_else:SI\n-\t (match_operator 4 \"comparison_operator\"\n+\t (match_operator 4 \"arm_comparison_operator\"\n \t  [(match_operand 3 \"cc_register\" \"\") (const_int 0)])\n \t (not:SI (match_operand:SI 2 \"s_register_operand\" \"r,r,r\"))\n \t (match_operand:SI 1 \"arm_not_operand\" \"0,?rI,K\")))]\n@@ -7053,13 +7292,14 @@\n    mvn%d4\\\\t%0, %2\n    mov%D4\\\\t%0, %1\\;mvn%d4\\\\t%0, %2\n    mvn%D4\\\\t%0, #%B1\\;mvn%d4\\\\t%0, %2\"\n-[(set_attr \"conds\" \"use\")\n- (set_attr \"length\" \"4,8,8\")])\n+  [(set_attr \"conds\" \"use\")\n+   (set_attr \"length\" \"4,8,8\")]\n+)\n \n (define_insn \"*ifcompare_shift_move\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(if_then_else:SI\n-\t (match_operator 6 \"comparison_operator\"\n+\t (match_operator 6 \"arm_comparison_operator\"\n \t  [(match_operand:SI 4 \"s_register_operand\" \"r,r\")\n \t   (match_operand:SI 5 \"arm_add_operand\" \"rIL,rIL\")])\n \t (match_operator:SI 7 \"shift_operator\"\n@@ -7069,13 +7309,14 @@\n    (clobber (reg:CC 24))]\n   \"TARGET_ARM\"\n   \"#\"\n-[(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"8,12\")])\n+  [(set_attr \"conds\" \"clob\")\n+   (set_attr \"length\" \"8,12\")]\n+)\n \n (define_insn \"*if_shift_move\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n \t(if_then_else:SI\n-\t (match_operator 5 \"comparison_operator\"\n+\t (match_operator 5 \"arm_comparison_operator\"\n \t  [(match_operand 6 \"cc_register\" \"\") (const_int 0)])\n \t (match_operator:SI 4 \"shift_operator\"\n \t  [(match_operand:SI 2 \"s_register_operand\" \"r,r,r\")\n@@ -7086,13 +7327,14 @@\n    mov%d5\\\\t%0, %2%S4\n    mov%D5\\\\t%0, %1\\;mov%d5\\\\t%0, %2%S4\n    mvn%D5\\\\t%0, #%B1\\;mov%d5\\\\t%0, %2%S4\"\n-[(set_attr \"conds\" \"use\")\n- (set_attr \"length\" \"4,8,8\")])\n+  [(set_attr \"conds\" \"use\")\n+   (set_attr \"length\" \"4,8,8\")]\n+)\n \n (define_insn \"*ifcompare_move_shift\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(if_then_else:SI\n-\t (match_operator 6 \"comparison_operator\"\n+\t (match_operator 6 \"arm_comparison_operator\"\n \t  [(match_operand:SI 4 \"s_register_operand\" \"r,r\")\n \t   (match_operand:SI 5 \"arm_add_operand\" \"rIL,rIL\")])\n \t (match_operand:SI 1 \"arm_not_operand\" \"0,?rIK\")\n@@ -7102,13 +7344,14 @@\n    (clobber (reg:CC 24))]\n   \"TARGET_ARM\"\n   \"#\"\n-[(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"8,12\")])\n+  [(set_attr \"conds\" \"clob\")\n+   (set_attr \"length\" \"8,12\")]\n+)\n \n (define_insn \"*if_move_shift\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n \t(if_then_else:SI\n-\t (match_operator 5 \"comparison_operator\"\n+\t (match_operator 5 \"arm_comparison_operator\"\n \t  [(match_operand 6 \"cc_register\" \"\") (const_int 0)])\n \t (match_operand:SI 1 \"arm_not_operand\" \"0,?rI,K\")\n \t (match_operator:SI 4 \"shift_operator\"\n@@ -7119,13 +7362,14 @@\n    mov%D5\\\\t%0, %2%S4\n    mov%d5\\\\t%0, %1\\;mov%D5\\\\t%0, %2%S4\n    mvn%d5\\\\t%0, #%B1\\;mov%D5\\\\t%0, %2%S4\"\n-[(set_attr \"conds\" \"use\")\n- (set_attr \"length\" \"4,8,8\")])\n+  [(set_attr \"conds\" \"use\")\n+   (set_attr \"length\" \"4,8,8\")]\n+)\n \n (define_insn \"*ifcompare_shift_shift\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(if_then_else:SI\n-\t (match_operator 7 \"comparison_operator\"\n+\t (match_operator 7 \"arm_comparison_operator\"\n \t  [(match_operand:SI 5 \"s_register_operand\" \"r\")\n \t   (match_operand:SI 6 \"arm_add_operand\" \"rIL\")])\n \t (match_operator:SI 8 \"shift_operator\"\n@@ -7137,13 +7381,14 @@\n    (clobber (reg:CC 24))]\n   \"TARGET_ARM\"\n   \"#\"\n-[(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"12\")])\n+  [(set_attr \"conds\" \"clob\")\n+   (set_attr \"length\" \"12\")]\n+)\n \n (define_insn \"*if_shift_shift\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(if_then_else:SI\n-\t (match_operator 5 \"comparison_operator\"\n+\t (match_operator 5 \"arm_comparison_operator\"\n \t  [(match_operand 8 \"cc_register\" \"\") (const_int 0)])\n \t (match_operator:SI 6 \"shift_operator\"\n \t  [(match_operand:SI 1 \"s_register_operand\" \"r\")\n@@ -7153,13 +7398,14 @@\n \t   (match_operand:SI 4 \"arm_rhs_operand\" \"rM\")])))]\n   \"TARGET_ARM\"\n   \"mov%d5\\\\t%0, %1%S6\\;mov%D5\\\\t%0, %3%S7\"\n-[(set_attr \"conds\" \"use\")\n- (set_attr \"length\" \"8\")])\n+  [(set_attr \"conds\" \"use\")\n+   (set_attr \"length\" \"8\")]\n+)\n \n (define_insn \"*ifcompare_not_arith\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(if_then_else:SI\n-\t (match_operator 6 \"comparison_operator\"\n+\t (match_operator 6 \"arm_comparison_operator\"\n \t  [(match_operand:SI 4 \"s_register_operand\" \"r\")\n \t   (match_operand:SI 5 \"arm_add_operand\" \"rIL\")])\n \t (not:SI (match_operand:SI 1 \"s_register_operand\" \"r\"))\n@@ -7169,27 +7415,29 @@\n    (clobber (reg:CC 24))]\n   \"TARGET_ARM\"\n   \"#\"\n-[(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"12\")])\n+  [(set_attr \"conds\" \"clob\")\n+   (set_attr \"length\" \"12\")]\n+)\n \n (define_insn \"*if_not_arith\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(if_then_else:SI\n-\t (match_operator 5 \"comparison_operator\"\n+\t (match_operator 5 \"arm_comparison_operator\"\n \t  [(match_operand 4 \"cc_register\" \"\") (const_int 0)])\n \t (not:SI (match_operand:SI 1 \"s_register_operand\" \"r\"))\n \t (match_operator:SI 6 \"shiftable_operator\"\n \t  [(match_operand:SI 2 \"s_register_operand\" \"r\")\n \t   (match_operand:SI 3 \"arm_rhs_operand\" \"rI\")])))]\n   \"TARGET_ARM\"\n   \"mvn%d5\\\\t%0, %1\\;%I6%D5\\\\t%0, %2, %3\"\n-[(set_attr \"conds\" \"use\")\n- (set_attr \"length\" \"8\")])\n+  [(set_attr \"conds\" \"use\")\n+   (set_attr \"length\" \"8\")]\n+)\n \n (define_insn \"*ifcompare_arith_not\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(if_then_else:SI\n-\t (match_operator 6 \"comparison_operator\"\n+\t (match_operator 6 \"arm_comparison_operator\"\n \t  [(match_operand:SI 4 \"s_register_operand\" \"r\")\n \t   (match_operand:SI 5 \"arm_add_operand\" \"rIL\")])\n \t (match_operator:SI 7 \"shiftable_operator\"\n@@ -7199,41 +7447,44 @@\n    (clobber (reg:CC 24))]\n   \"TARGET_ARM\"\n   \"#\"\n-[(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"12\")])\n+  [(set_attr \"conds\" \"clob\")\n+   (set_attr \"length\" \"12\")]\n+)\n \n (define_insn \"*if_arith_not\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(if_then_else:SI\n-\t (match_operator 5 \"comparison_operator\"\n+\t (match_operator 5 \"arm_comparison_operator\"\n \t  [(match_operand 4 \"cc_register\" \"\") (const_int 0)])\n \t (match_operator:SI 6 \"shiftable_operator\"\n \t  [(match_operand:SI 2 \"s_register_operand\" \"r\")\n \t   (match_operand:SI 3 \"arm_rhs_operand\" \"rI\")])\n \t (not:SI (match_operand:SI 1 \"s_register_operand\" \"r\"))))]\n   \"TARGET_ARM\"\n   \"mvn%D5\\\\t%0, %1\\;%I6%d5\\\\t%0, %2, %3\"\n-[(set_attr \"conds\" \"use\")\n- (set_attr \"length\" \"8\")])\n+  [(set_attr \"conds\" \"use\")\n+   (set_attr \"length\" \"8\")]\n+)\n \n (define_insn \"*ifcompare_neg_move\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(if_then_else:SI\n-\t (match_operator 5 \"comparison_operator\"\n+\t (match_operator 5 \"arm_comparison_operator\"\n \t  [(match_operand:SI 3 \"s_register_operand\" \"r,r\")\n \t   (match_operand:SI 4 \"arm_add_operand\" \"rIL,rIL\")])\n \t (neg:SI (match_operand:SI 2 \"s_register_operand\" \"r,r\"))\n \t (match_operand:SI 1 \"arm_not_operand\" \"0,?rIK\")))\n    (clobber (reg:CC 24))]\n   \"TARGET_ARM\"\n   \"#\"\n-[(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"8,12\")])\n+  [(set_attr \"conds\" \"clob\")\n+   (set_attr \"length\" \"8,12\")]\n+)\n \n (define_insn \"*if_neg_move\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n \t(if_then_else:SI\n-\t (match_operator 4 \"comparison_operator\"\n+\t (match_operator 4 \"arm_comparison_operator\"\n \t  [(match_operand 3 \"cc_register\" \"\") (const_int 0)])\n \t (neg:SI (match_operand:SI 2 \"s_register_operand\" \"r,r,r\"))\n \t (match_operand:SI 1 \"arm_not_operand\" \"0,?rI,K\")))]\n@@ -7242,27 +7493,29 @@\n    rsb%d4\\\\t%0, %2, #0\n    mov%D4\\\\t%0, %1\\;rsb%d4\\\\t%0, %2, #0\n    mvn%D4\\\\t%0, #%B1\\;rsb%d4\\\\t%0, %2, #0\"\n-[(set_attr \"conds\" \"use\")\n- (set_attr \"length\" \"4,8,8\")])\n+  [(set_attr \"conds\" \"use\")\n+   (set_attr \"length\" \"4,8,8\")]\n+)\n \n (define_insn \"*ifcompare_move_neg\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(if_then_else:SI\n-\t (match_operator 5 \"comparison_operator\"\n+\t (match_operator 5 \"arm_comparison_operator\"\n \t  [(match_operand:SI 3 \"s_register_operand\" \"r,r\")\n \t   (match_operand:SI 4 \"arm_add_operand\" \"rIL,rIL\")])\n \t (match_operand:SI 1 \"arm_not_operand\" \"0,?rIK\")\n \t (neg:SI (match_operand:SI 2 \"s_register_operand\" \"r,r\"))))\n    (clobber (reg:CC 24))]\n   \"TARGET_ARM\"\n   \"#\"\n-[(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"8,12\")])\n+  [(set_attr \"conds\" \"clob\")\n+   (set_attr \"length\" \"8,12\")]\n+)\n \n (define_insn \"*if_move_neg\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n \t(if_then_else:SI\n-\t (match_operator 4 \"comparison_operator\"\n+\t (match_operator 4 \"arm_comparison_operator\"\n \t  [(match_operand 3 \"cc_register\" \"\") (const_int 0)])\n \t (match_operand:SI 1 \"arm_not_operand\" \"0,?rI,K\")\n \t (neg:SI (match_operand:SI 2 \"s_register_operand\" \"r,r,r\"))))]\n@@ -7872,7 +8125,7 @@\n   [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n \t(and:SI (ge:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n \t\t       (const_int 0))\n-\t\t(neg:SI (match_operator:SI 2 \"comparison_operator\"\n+\t\t(neg:SI (match_operator:SI 2 \"arm_comparison_operator\"\n \t\t\t [(match_operand:SI 3 \"s_register_operand\" \"\")\n \t\t\t  (match_operand:SI 4 \"arm_rhs_operand\" \"\")]))))\n    (clobber (match_operand:SI 5 \"s_register_operand\" \"\"))]\n@@ -7985,12 +8238,91 @@\n \n (define_split\n   [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n-\t(if_then_else:SI (match_operator 1 \"comparison_operator\"\n+\t(if_then_else:SI (match_operator 1 \"arm_comparison_operator\"\n+\t\t\t  [(match_operand 2 \"\" \"\") (match_operand 3 \"\" \"\")])\n+\t\t\t (match_dup 0)\n+\t\t\t (match_operand 4 \"\" \"\")))\n+   (clobber (reg:CC 24))]\n+  \"TARGET_ARM && reload_completed\"\n+  [(set (match_dup 5) (match_dup 6))\n+   (cond_exec (match_dup 7)\n+\t      (set (match_dup 0) (match_dup 4)))]\n+  \"\n+  {\n+    enum machine_mode mode = SELECT_CC_MODE (GET_CODE (operands[1]),\n+\t\t\t\t\t     operands[2], operands[3]);\n+    enum rtx_code rc = GET_CODE (operands[1]);\n+\n+    operands[5] = gen_rtx_REG (mode, 24);\n+    operands[6] = gen_rtx_COMPARE (mode, operands[2], operands[3]);\n+    if (mode == CCFPmode || mode == CCFPEmode)\n+      rc = reverse_condition_maybe_unordered (rc);\n+    else\n+      rc = reverse_condition (rc);\n+\n+    operands[7] = gen_rtx_fmt_ee (rc, VOIDmode, operands[5], const0_rtx);\n+  }\"\n+)\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+\t(if_then_else:SI (match_operator 1 \"arm_comparison_operator\"\n+\t\t\t  [(match_operand 2 \"\" \"\") (match_operand 3 \"\" \"\")])\n+\t\t\t (match_operand 4 \"\" \"\")\n+\t\t\t (match_dup 0)))\n+   (clobber (reg:CC 24))]\n+  \"TARGET_ARM && reload_completed\"\n+  [(set (match_dup 5) (match_dup 6))\n+   (cond_exec (match_op_dup 1 [(match_dup 5) (const_int 0)])\n+\t      (set (match_dup 0) (match_dup 4)))]\n+  \"\n+  {\n+    enum machine_mode mode = SELECT_CC_MODE (GET_CODE (operands[1]),\n+\t\t\t\t\t     operands[2], operands[3]);\n+\n+    operands[5] = gen_rtx_REG (mode, 24);\n+    operands[6] = gen_rtx_COMPARE (mode, operands[2], operands[3]);\n+  }\"\n+)\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+\t(if_then_else:SI (match_operator 1 \"arm_comparison_operator\"\n \t\t\t  [(match_operand 2 \"\" \"\") (match_operand 3 \"\" \"\")])\n \t\t\t (match_operand 4 \"\" \"\")\n \t\t\t (match_operand 5 \"\" \"\")))\n    (clobber (reg:CC 24))]\n   \"TARGET_ARM && reload_completed\"\n+  [(set (match_dup 6) (match_dup 7))\n+   (cond_exec (match_op_dup 1 [(match_dup 6) (const_int 0)])\n+\t      (set (match_dup 0) (match_dup 4)))\n+   (cond_exec (match_dup 8)\n+\t      (set (match_dup 0) (match_dup 5)))]\n+  \"\n+  {\n+    enum machine_mode mode = SELECT_CC_MODE (GET_CODE (operands[1]),\n+\t\t\t\t\t     operands[2], operands[3]);\n+    enum rtx_code rc = GET_CODE (operands[1]);\n+\n+    operands[6] = gen_rtx_REG (mode, 24);\n+    operands[7] = gen_rtx_COMPARE (mode, operands[2], operands[3]);\n+    if (mode == CCFPmode || mode == CCFPEmode)\n+      rc = reverse_condition_maybe_unordered (rc);\n+    else\n+      rc = reverse_condition (rc);\n+\n+    operands[8] = gen_rtx_fmt_ee (rc, VOIDmode, operands[6], const0_rtx);\n+  }\"\n+)\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+\t(if_then_else:SI (match_operator 1 \"arm_comparison_operator\"\n+\t\t\t  [(match_operand 2 \"\" \"\") (match_operand 3 \"\" \"\")])\n+\t\t\t (match_operand 4 \"\" \"\")\n+\t\t\t (match_operand 5 \"\" \"\")))\n+   (clobber (reg:CC 24))]\n+  \"TARGET_ARM && reload_completed && 0\"\n   [(set (match_dup 6) (match_dup 7))\n    (set (match_dup 0) \n \t(if_then_else:SI (match_op_dup 1 [(match_dup 6) (const_int 0)])\n@@ -8008,7 +8340,7 @@\n \n (define_split\n   [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n-\t(if_then_else:SI (match_operator 1 \"comparison_operator\"\n+\t(if_then_else:SI (match_operator 1 \"arm_comparison_operator\"\n \t\t\t  [(match_operand:SI 2 \"s_register_operand\" \"\")\n \t\t\t   (match_operand:SI 3 \"arm_add_operand\" \"\")])\n \t\t\t (match_operand:SI 4 \"arm_rhs_operand\" \"\")\n@@ -8033,7 +8365,7 @@\n \n (define_insn \"*cond_move_not\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n-\t(if_then_else:SI (match_operator 4 \"comparison_operator\"\n+\t(if_then_else:SI (match_operator 4 \"arm_comparison_operator\"\n \t\t\t  [(match_operand 3 \"cc_register\" \"\") (const_int 0)])\n \t\t\t (match_operand:SI 1 \"arm_rhs_operand\" \"0,?rI\")\n \t\t\t (not:SI"}]}