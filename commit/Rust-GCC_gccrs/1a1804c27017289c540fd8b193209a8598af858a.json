{"sha": "1a1804c27017289c540fd8b193209a8598af858a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWExODA0YzI3MDE3Mjg5YzU0MGZkOGIxOTMyMDlhODU5OGFmODU4YQ==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@redhat.com", "date": "2004-10-18T18:01:10Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2004-10-18T18:01:10Z"}, "message": "tree-cfg.c (bsi_for_stmt): Rename from stmt_for_bsi.\n\n\n\t* tree-cfg.c (bsi_for_stmt): Rename from stmt_for_bsi.\n\tUpdate all callers.\n\t* tree-ssa.c (replace_immediate_uses): Call bsi_for_stmt.\n\tDon't call fold_stmt more than once, use bsi_replace.\n\nFrom-SVN: r89234", "tree": {"sha": "65fa2dda5884adcb69fca3aa5ca69487f2799ab4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65fa2dda5884adcb69fca3aa5ca69487f2799ab4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a1804c27017289c540fd8b193209a8598af858a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a1804c27017289c540fd8b193209a8598af858a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a1804c27017289c540fd8b193209a8598af858a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a1804c27017289c540fd8b193209a8598af858a/comments", "author": null, "committer": null, "parents": [{"sha": "bca9e17b5aade3e19ae49ff9c211510674b46a02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bca9e17b5aade3e19ae49ff9c211510674b46a02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bca9e17b5aade3e19ae49ff9c211510674b46a02"}], "stats": {"total": 38, "additions": 17, "deletions": 21}, "files": [{"sha": "fe4213bd8c7e053e4e6e63623c94e92009e63b13", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a1804c27017289c540fd8b193209a8598af858a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a1804c27017289c540fd8b193209a8598af858a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1a1804c27017289c540fd8b193209a8598af858a", "patch": "@@ -1,3 +1,10 @@\n+2004-10-18  Diego Novillo  <dnovillo@redhat.com>\n+\n+\t* tree-cfg.c (bsi_for_stmt): Rename from stmt_for_bsi.\n+\tUpdate all callers.\n+\t* tree-ssa.c (replace_immediate_uses): Call bsi_for_stmt.\n+\tDon't call fold_stmt more than once, use bsi_replace.\n+\n 2004-10-18  Diego Novillo  <dnovillo@redhat.com>\n \n \tPR tree-optimization/17656"}, {"sha": "4ad62b49eff58e1d5c242bb9c9213dee6820593e", "filename": "gcc/lambda-code.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a1804c27017289c540fd8b193209a8598af858a/gcc%2Flambda-code.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a1804c27017289c540fd8b193209a8598af858a/gcc%2Flambda-code.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flambda-code.c?ref=1a1804c27017289c540fd8b193209a8598af858a", "patch": "@@ -1937,7 +1937,7 @@ lambda_loopnest_to_gcc_loopnest (struct loop *old_loopnest,\n \t\t  LBV_COEFFICIENTS (lbv)[i] = 1;\n \t\t  lbv = lambda_body_vector_compute_new (transform, lbv);\n \t\t  newiv = lbv_to_gcc_expression (lbv, new_ivs, &stmts);\n-\t\t  bsi = stmt_for_bsi (stmt);\n+\t\t  bsi = bsi_for_stmt (stmt);\n \t\t  /* Insert the statements to build that\n \t\t     expression.  */\n \t\t  bsi_insert_before (&bsi, stmts, BSI_SAME_STMT);"}, {"sha": "72cbbd88044843040dce6748c7e2c8d48ae93a21", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a1804c27017289c540fd8b193209a8598af858a/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a1804c27017289c540fd8b193209a8598af858a/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=1a1804c27017289c540fd8b193209a8598af858a", "patch": "@@ -2638,7 +2638,7 @@ set_bb_for_stmt (tree t, basic_block bb)\n /* Finds iterator for STMT.  */\n \n extern block_stmt_iterator\n-stmt_for_bsi (tree stmt)\n+bsi_for_stmt (tree stmt)\n {\n   block_stmt_iterator bsi;\n "}, {"sha": "4db7fa9833be677e3e7971f66437fce6a8dff888", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a1804c27017289c540fd8b193209a8598af858a/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a1804c27017289c540fd8b193209a8598af858a/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=1a1804c27017289c540fd8b193209a8598af858a", "patch": "@@ -416,7 +416,7 @@ typedef struct {\n static inline block_stmt_iterator bsi_start (basic_block);\n static inline block_stmt_iterator bsi_last (basic_block);\n static inline block_stmt_iterator bsi_after_labels (basic_block);\n-block_stmt_iterator stmt_for_bsi (tree);\n+block_stmt_iterator bsi_for_stmt (tree);\n static inline bool bsi_end_p (block_stmt_iterator);\n static inline void bsi_next (block_stmt_iterator *);\n static inline void bsi_prev (block_stmt_iterator *);"}, {"sha": "a620aca8ce44f9b299fefd678de7b737d3717512", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a1804c27017289c540fd8b193209a8598af858a/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a1804c27017289c540fd8b193209a8598af858a/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=1a1804c27017289c540fd8b193209a8598af858a", "patch": "@@ -3878,7 +3878,7 @@ remove_statement (tree stmt, bool including_defined_name)\n     }\n   else\n     {\n-      block_stmt_iterator bsi = stmt_for_bsi (stmt);\n+      block_stmt_iterator bsi = bsi_for_stmt (stmt);\n \n       bsi_remove (&bsi);\n     }\n@@ -3916,7 +3916,7 @@ rewrite_use_nonlinear_expr (struct ivopts_data *data,\n \n     case MODIFY_EXPR:\n       tgt = TREE_OPERAND (use->stmt, 0);\n-      bsi = stmt_for_bsi (use->stmt);\n+      bsi = bsi_for_stmt (use->stmt);\n       break;\n \n     default:\n@@ -4055,7 +4055,7 @@ rewrite_use_address (struct ivopts_data *data,\n {\n   tree comp = unshare_expr (get_computation (data->current_loop,\n \t\t\t\t\t     use, cand));\n-  block_stmt_iterator bsi = stmt_for_bsi (use->stmt);\n+  block_stmt_iterator bsi = bsi_for_stmt (use->stmt);\n   tree stmts;\n   tree op = force_gimple_operand (comp, &stmts, true, NULL_TREE);\n \n@@ -4074,7 +4074,7 @@ rewrite_use_compare (struct ivopts_data *data,\n {\n   tree comp;\n   tree *op_p, cond, op, stmts, bound;\n-  block_stmt_iterator bsi = stmt_for_bsi (use->stmt);\n+  block_stmt_iterator bsi = bsi_for_stmt (use->stmt);\n   enum tree_code compare;\n   \n   if (may_eliminate_iv (data->current_loop,"}, {"sha": "7f73bcf6e73e831968168edcccc5d28fdf07686b", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a1804c27017289c540fd8b193209a8598af858a/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a1804c27017289c540fd8b193209a8598af858a/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=1a1804c27017289c540fd8b193209a8598af858a", "patch": "@@ -1105,20 +1105,9 @@ replace_immediate_uses (tree var, tree repl)\n \t  fold_stmt (&tmp);\n \t  if (tmp != stmt)\n \t    {\n-\t      basic_block bb = bb_for_stmt (stmt);\n-\t      block_stmt_iterator si;\n-\n-\t      /* Start iterating at the start of the basic block\n-\t\t holding STMT until we reach it.  This is slow, but\n-\t\t it's the only way to get a statement pointer\n-\t\t reliably.  */\n-\t      for (si = bsi_start (bb); !bsi_end_p (si); bsi_next (&si))\n-\t\tif (bsi_stmt (si) == stmt)\n-\t\t  {\n-\t\t    fold_stmt (bsi_stmt_ptr (si));\n-\t\t    stmt = bsi_stmt (si);\n-\t\t    break;\n-\t\t  }\n+\t      block_stmt_iterator si = bsi_for_stmt (stmt);\n+\t      bsi_replace (&si, tmp, true);\n+\t      stmt = bsi_stmt (si);\n \t    }\n \t}\n "}]}