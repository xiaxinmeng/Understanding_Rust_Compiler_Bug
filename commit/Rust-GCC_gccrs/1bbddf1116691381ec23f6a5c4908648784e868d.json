{"sha": "1bbddf1116691381ec23f6a5c4908648784e868d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJiZGRmMTExNjY5MTM4MWVjMjNmNmE1YzQ5MDg2NDg3ODRlODY4ZA==", "commit": {"author": {"name": "James Van Artsdalen", "email": "jrv@gnu.org", "date": "1992-08-28T01:49:35Z"}, "committer": {"name": "James Van Artsdalen", "email": "jrv@gnu.org", "date": "1992-08-28T01:49:35Z"}, "message": "(expand_builtin): Add sin and cos as built-in functions.c\n\nFrom-SVN: r1983", "tree": {"sha": "ecc7b4e306feeadde49005cdbcbcc10d33de572a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ecc7b4e306feeadde49005cdbcbcc10d33de572a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bbddf1116691381ec23f6a5c4908648784e868d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bbddf1116691381ec23f6a5c4908648784e868d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bbddf1116691381ec23f6a5c4908648784e868d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bbddf1116691381ec23f6a5c4908648784e868d/comments", "author": null, "committer": null, "parents": [{"sha": "a199fdd6758aa7e3bdff4a2a2a383d8a1baea657", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a199fdd6758aa7e3bdff4a2a2a383d8a1baea657", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a199fdd6758aa7e3bdff4a2a2a383d8a1baea657"}], "stats": {"total": 21, "additions": 18, "deletions": 3}, "files": [{"sha": "17a8fb6ed6821dac7bc6f4c1e839794f9e900b7e", "filename": "gcc/expr.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bbddf1116691381ec23f6a5c4908648784e868d/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bbddf1116691381ec23f6a5c4908648784e868d/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=1bbddf1116691381ec23f6a5c4908648784e868d", "patch": "@@ -5057,6 +5057,7 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n   rtx op0;\n   rtx lab1, insns;\n   enum machine_mode value_mode = TYPE_MODE (TREE_TYPE (exp));\n+  optab builtin_optab;\n \n   switch (DECL_FUNCTION_CODE (fndecl))\n     {\n@@ -5066,6 +5067,8 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n       /* build_function_call changes these into ABS_EXPR.  */\n       abort ();\n \n+    case BUILT_IN_SIN:\n+    case BUILT_IN_COS:\n     case BUILT_IN_FSQRT:\n       /* If not optimizing, call the library function.  */\n       if (! optimize)\n@@ -5093,10 +5096,22 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n       emit_queue ();\n       start_sequence ();\n \n-      /* Compute sqrt into TARGET. \n+      switch (DECL_FUNCTION_CODE (fndecl))\n+\t{\n+\tcase BUILT_IN_SIN:\n+\t  builtin_optab = sin_optab; break;\n+\tcase BUILT_IN_COS:\n+\t  builtin_optab = cos_optab; break;\n+\tcase BUILT_IN_FSQRT:\n+\t  builtin_optab = sqrt_optab; break;\n+\tdefault:\n+\t  abort ();\n+\t}\n+\n+      /* Compute into TARGET.\n \t Set TARGET to wherever the result comes back.  */\n       target = expand_unop (TYPE_MODE (TREE_TYPE (TREE_VALUE (arglist))),\n-\t\t\t    sqrt_optab, op0, target, 0);\n+\t\t\t    builtin_optab, op0, target, 0);\n \n       /* If we were unable to expand via the builtin, stop the\n \t sequence (without outputting the insns) and break, causing\n@@ -5112,7 +5127,7 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \n       if (! flag_fast_math)\n \t{\n-\t  /* Don't define the sqrt instructions\n+\t  /* Don't define the builtin FP instructions\n \t     if your machine is not IEEE.  */\n \t  if (TARGET_FLOAT_FORMAT != IEEE_FLOAT_FORMAT)\n \t    abort ();"}]}