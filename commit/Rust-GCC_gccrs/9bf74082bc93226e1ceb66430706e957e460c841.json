{"sha": "9bf74082bc93226e1ceb66430706e957e460c841", "node_id": "C_kwDOANBUbNoAKDliZjc0MDgyYmM5MzIyNmUxY2ViNjY0MzA3MDZlOTU3ZTQ2MGM4NDE", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-10-08T00:34:53Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-10-12T15:38:05Z"}, "message": "c++: defer all consteval in default args [DR2631]\n\nThe proposed resolution of CWG2631 extends our current handling of\nsource_location::current to all consteval functions: default arguments\nare not evaluated until they're used in a call, the same should apply to\nevaluation of immediate invocations.  And similarly for default member\ninitializers.\n\nPreviously we folded source_location::current in cp_fold_r; now we fold all\nconsteval calls in default arguments/member initializers in bot_replace.\n\n\tDR 2631\n\ngcc/cp/ChangeLog:\n\n\t* cp-tree.h (source_location_current_p): Remove.\n\t* name-lookup.h (struct cp_binding_level): Remove\n\timmediate_fn_ctx_p.\n\t* call.cc (in_immediate_context): All default args\n\tand DMI are potentially immediate context.\n\t(immediate_invocation_p): Don't treat source_location specially.\n\t(struct in_consteval_if_p_temp_override): Move to cp-tree.h.\n\t* constexpr.cc (get_nth_callarg): Move to cp-tree.h.\n\t* cp-gimplify.cc (cp_fold_r): Don't fold consteval.\n\t* name-lookup.cc (begin_scope): Don't set immediate_fn_ctx_p.\n\t* parser.cc (cp_parser_lambda_declarator_opt): Likewise.\n\t(cp_parser_direct_declarator): Likewise.\n\t* pt.cc (tsubst_default_argument): Open sk_function_parms level.\n\t* tree.cc (source_location_current_p): Remove.\n\t(bot_replace): Fold consteval here.\n\t(break_out_target_exprs): Handle errors.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/consteval-defarg3.C: New test.", "tree": {"sha": "43df246d62d87945fb10948b4cdab83734adfe55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43df246d62d87945fb10948b4cdab83734adfe55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bf74082bc93226e1ceb66430706e957e460c841", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bf74082bc93226e1ceb66430706e957e460c841", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bf74082bc93226e1ceb66430706e957e460c841", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bf74082bc93226e1ceb66430706e957e460c841/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfcd9f84531fa99e9d00efd8bcfd3c8ac16fa360", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfcd9f84531fa99e9d00efd8bcfd3c8ac16fa360", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfcd9f84531fa99e9d00efd8bcfd3c8ac16fa360"}], "stats": {"total": 206, "additions": 95, "deletions": 111}, "files": [{"sha": "2fa33c5c60498bec28cb136de56a299381a5421b", "filename": "gcc/cp/call.cc", "status": "modified", "additions": 13, "deletions": 25, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf74082bc93226e1ceb66430706e957e460c841/gcc%2Fcp%2Fcall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf74082bc93226e1ceb66430706e957e460c841/gcc%2Fcp%2Fcall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.cc?ref=9bf74082bc93226e1ceb66430706e957e460c841", "patch": "@@ -9301,45 +9301,33 @@ build_trivial_dtor_call (tree instance, bool no_ptr_deref)\n }\n \n /* Return true if in an immediate function context, or an unevaluated operand,\n-   or a subexpression of an immediate invocation.  */\n+   or a default argument/member initializer, or a subexpression of an immediate\n+   invocation.  */\n \n bool\n in_immediate_context ()\n {\n   return (cp_unevaluated_operand != 0\n \t  || (current_function_decl != NULL_TREE\n \t      && DECL_IMMEDIATE_FUNCTION_P (current_function_decl))\n-\t  || (current_binding_level->kind == sk_function_parms\n-\t      && current_binding_level->immediate_fn_ctx_p)\n+\t  /* DR 2631: default args and DMI aren't immediately evaluated.\n+\t     Return true here so immediate_invocation_p returns false.  */\n+\t  || current_binding_level->kind == sk_function_parms\n+\t  || current_binding_level->kind == sk_template_parms\n+\t  || parsing_nsdmi ()\n \t  || in_consteval_if_p);\n }\n \n /* Return true if a call to FN with number of arguments NARGS\n    is an immediate invocation.  */\n \n static bool\n-immediate_invocation_p (tree fn, int nargs)\n+immediate_invocation_p (tree fn)\n {\n   return (TREE_CODE (fn) == FUNCTION_DECL\n \t  && DECL_IMMEDIATE_FUNCTION_P (fn)\n-\t  && !in_immediate_context ()\n-\t  /* As an exception, we defer std::source_location::current ()\n-\t     invocations until genericization because LWG3396 mandates\n-\t     special behavior for it.  */\n-\t  && (nargs > 1 || !source_location_current_p (fn)));\n-}\n-\n-/* temp_override for in_consteval_if_p, which can't use make_temp_override\n-   because it is a bitfield.  */\n-\n-struct in_consteval_if_p_temp_override {\n-  bool save_in_consteval_if_p;\n-  in_consteval_if_p_temp_override ()\n-    : save_in_consteval_if_p (in_consteval_if_p) {}\n-  void reset () { in_consteval_if_p = save_in_consteval_if_p; }\n-  ~in_consteval_if_p_temp_override ()\n-  { reset (); }\n-};\n+\t  && !in_immediate_context ());\n+}\n \n /* Subroutine of the various build_*_call functions.  Overload resolution\n    has chosen a winning candidate CAND; build up a CALL_EXPR accordingly.\n@@ -9398,7 +9386,7 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n       SET_EXPR_LOCATION (expr, input_location);\n       if (TREE_THIS_VOLATILE (fn) && cfun)\n \tcurrent_function_returns_abnormally = 1;\n-      if (immediate_invocation_p (fn, vec_safe_length (args)))\n+      if (immediate_invocation_p (fn))\n \t{\n \t  tree obj_arg = NULL_TREE, exprimm = expr;\n \t  if (DECL_CONSTRUCTOR_P (fn))\n@@ -9543,7 +9531,7 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n   in_consteval_if_p_temp_override icip;\n   /* If the call is immediate function invocation, make sure\n      taking address of immediate functions is allowed in its arguments.  */\n-  if (immediate_invocation_p (STRIP_TEMPLATE (fn), nargs))\n+  if (immediate_invocation_p (STRIP_TEMPLATE (fn)))\n     in_consteval_if_p = true;\n \n   /* The implicit parameters to a constructor are not considered by overload\n@@ -10072,7 +10060,7 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n   if (TREE_CODE (fn) == ADDR_EXPR)\n     {\n       tree fndecl = STRIP_TEMPLATE (TREE_OPERAND (fn, 0));\n-      if (immediate_invocation_p (fndecl, nargs))\n+      if (immediate_invocation_p (fndecl))\n \t{\n \t  tree obj_arg = NULL_TREE;\n \t  /* Undo convert_from_reference called by build_cxx_call.  */"}, {"sha": "2038f43425bde2fbb5b2ff8652f31d49b8c90f28", "filename": "gcc/cp/constexpr.cc", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf74082bc93226e1ceb66430706e957e460c841/gcc%2Fcp%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf74082bc93226e1ceb66430706e957e460c841/gcc%2Fcp%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.cc?ref=9bf74082bc93226e1ceb66430706e957e460c841", "patch": "@@ -1324,26 +1324,6 @@ save_fundef_copy (tree fun, tree copy)\n   *slot = copy;\n }\n \n-/* We have an expression tree T that represents a call, either CALL_EXPR\n-   or AGGR_INIT_EXPR.  Return the Nth argument.  */\n-\n-static inline tree\n-get_nth_callarg (tree t, int n)\n-{\n-  switch (TREE_CODE (t))\n-    {\n-    case CALL_EXPR:\n-      return CALL_EXPR_ARG (t, n);\n-\n-    case AGGR_INIT_EXPR:\n-      return AGGR_INIT_EXPR_ARG (t, n);\n-\n-    default:\n-      gcc_unreachable ();\n-      return NULL;\n-    }\n-}\n-\n /* Whether our evaluation wants a prvalue (e.g. CONSTRUCTOR or _CST),\n    a glvalue (e.g. VAR_DECL or _REF), or nothing.  */\n "}, {"sha": "a937060b029cb8115c33415eb54ddeed51994ef3", "filename": "gcc/cp/cp-gimplify.cc", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf74082bc93226e1ceb66430706e957e460c841/gcc%2Fcp%2Fcp-gimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf74082bc93226e1ceb66430706e957e460c841/gcc%2Fcp%2Fcp-gimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.cc?ref=9bf74082bc93226e1ceb66430706e957e460c841", "patch": "@@ -1010,13 +1010,6 @@ cp_fold_r (tree *stmt_p, int *walk_subtrees, void *data_)\n \t}\n       break;\n \n-    case CALL_EXPR:\n-      if (tree fndecl = cp_get_callee_fndecl_nofold (stmt))\n-\tif (DECL_IMMEDIATE_FUNCTION_P (fndecl)\n-\t    && source_location_current_p (fndecl))\n-\t  *stmt_p = stmt = cxx_constant_value (stmt);\n-      break;\n-\n     default:\n       break;\n     }"}, {"sha": "80037fabb41fa592e9f899403b5d8e397774456e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf74082bc93226e1ceb66430706e957e460c841/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf74082bc93226e1ceb66430706e957e460c841/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=9bf74082bc93226e1ceb66430706e957e460c841", "patch": "@@ -2030,6 +2030,18 @@ make_temp_override (T& var, type_identity_t<T> overrider)\n   return { var, overrider };\n }\n \n+/* temp_override for in_consteval_if_p, which can't use make_temp_override\n+   because it is a bitfield.  */\n+\n+struct in_consteval_if_p_temp_override {\n+  bool save_in_consteval_if_p;\n+  in_consteval_if_p_temp_override ()\n+    : save_in_consteval_if_p (in_consteval_if_p) {}\n+  void reset () { in_consteval_if_p = save_in_consteval_if_p; }\n+  ~in_consteval_if_p_temp_override ()\n+  { reset (); }\n+};\n+\n /* The cached class binding level, from the most recently exited\n    class, or NULL if none.  */\n \n@@ -4201,6 +4213,25 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n   for ((arg) = first_aggr_init_expr_arg ((call), &(iter)); (arg);\t\\\n        (arg) = next_aggr_init_expr_arg (&(iter)))\n \n+/* We have an expression tree T that represents a call, either CALL_EXPR\n+   or AGGR_INIT_EXPR.  Return a reference to the Nth argument.  */\n+\n+static inline tree&\n+get_nth_callarg (tree t, int n)\n+{\n+  switch (TREE_CODE (t))\n+    {\n+    case CALL_EXPR:\n+      return CALL_EXPR_ARG (t, n);\n+\n+    case AGGR_INIT_EXPR:\n+      return AGGR_INIT_EXPR_ARG (t, n);\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n /* VEC_INIT_EXPR accessors.  */\n #define VEC_INIT_EXPR_SLOT(NODE) TREE_OPERAND (VEC_INIT_EXPR_CHECK (NODE), 0)\n #define VEC_INIT_EXPR_INIT(NODE) TREE_OPERAND (VEC_INIT_EXPR_CHECK (NODE), 1)\n@@ -7880,7 +7911,6 @@ extern tree bind_template_template_parm\t\t(tree, tree);\n extern tree array_type_nelts_total\t\t(tree);\n extern tree array_type_nelts_top\t\t(tree);\n extern bool array_of_unknown_bound_p\t\t(const_tree);\n-extern bool source_location_current_p\t\t(tree);\n extern tree break_out_target_exprs\t\t(tree, bool = false);\n extern tree build_ctor_subob_ref\t\t(tree, tree, tree);\n extern tree replace_placeholders\t\t(tree, tree, bool * = NULL);"}, {"sha": "14e937d81cb82cb1e3f4a533ac5cd60ac6929b2e", "filename": "gcc/cp/name-lookup.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf74082bc93226e1ceb66430706e957e460c841/gcc%2Fcp%2Fname-lookup.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf74082bc93226e1ceb66430706e957e460c841/gcc%2Fcp%2Fname-lookup.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.cc?ref=9bf74082bc93226e1ceb66430706e957e460c841", "patch": "@@ -4302,8 +4302,6 @@ begin_scope (scope_kind kind, tree entity)\n \n     case sk_function_parms:\n       scope->keep = keep_next_level_flag;\n-      if (entity)\n-\tscope->immediate_fn_ctx_p = DECL_IMMEDIATE_FUNCTION_P (entity);\n       break;\n \n     case sk_namespace:"}, {"sha": "9e3b69865a63d3f199102665fc0c3f86cab583f0", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf74082bc93226e1ceb66430706e957e460c841/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf74082bc93226e1ceb66430706e957e460c841/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=9bf74082bc93226e1ceb66430706e957e460c841", "patch": "@@ -307,13 +307,10 @@ struct GTY(()) cp_binding_level {\n      'this_entity'.  */\n   unsigned defining_class_p : 1;\n \n-  /* true for SK_FUNCTION_PARMS of immediate functions.  */\n-  unsigned immediate_fn_ctx_p : 1;\n-\n   /* True for SK_FUNCTION_PARMS of a requires-expression.  */\n   unsigned requires_expression: 1;\n \n-  /* 21 bits left to fill a 32-bit word.  */\n+  /* 22 bits left to fill a 32-bit word.  */\n };\n \n /* The binding level currently in effect.  */"}, {"sha": "4e3ed660e6857e3974e2021535bd7d4440eafaa4", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf74082bc93226e1ceb66430706e957e460c841/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf74082bc93226e1ceb66430706e957e460c841/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=9bf74082bc93226e1ceb66430706e957e460c841", "patch": "@@ -11519,31 +11519,11 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n      opening parenthesis if present.  */\n   if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN))\n     {\n-      bool is_consteval = false;\n-      /* For C++20, before parsing the parameter list check if there is\n-\t a consteval specifier in the corresponding decl-specifier-seq.  */\n-      if (cxx_dialect >= cxx20)\n-\t{\n-\t  for (size_t n = cp_parser_skip_balanced_tokens (parser, 1);\n-\t       cp_lexer_nth_token_is (parser->lexer, n, CPP_KEYWORD); n++)\n-\t    {\n-\t      if (cp_lexer_peek_nth_token (parser->lexer, n)->keyword\n-\t\t  == RID_CONSTEVAL)\n-\t\t{\n-\t\t  is_consteval = true;\n-\t\t  break;\n-\t\t}\n-\t    }\n-\t}\n-\n       matching_parens parens;\n       parens.consume_open (parser);\n \n       begin_scope (sk_function_parms, /*entity=*/NULL_TREE);\n \n-      if (is_consteval)\n-\tcurrent_binding_level->immediate_fn_ctx_p = true;\n-\n       /* Parse parameters.  */\n       param_list\n \t= cp_parser_parameter_declaration_clause\n@@ -23186,10 +23166,6 @@ cp_parser_direct_declarator (cp_parser* parser,\n \n \t      begin_scope (sk_function_parms, NULL_TREE);\n \n-\t      /* Signal we are in the immediate function context.  */\n-\t      if (flags & CP_PARSER_FLAGS_CONSTEVAL)\n-\t\tcurrent_binding_level->immediate_fn_ctx_p = true;\n-\n \t      /* Parse the parameter-declaration-clause.  */\n \t      params\n \t\t= cp_parser_parameter_declaration_clause (parser, flags);"}, {"sha": "ec337e2349e4e9a81c9d11fb2d71389a6e1a2b03", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf74082bc93226e1ceb66430706e957e460c841/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf74082bc93226e1ceb66430706e957e460c841/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=9bf74082bc93226e1ceb66430706e957e460c841", "patch": "@@ -13933,6 +13933,8 @@ tsubst_default_argument (tree fn, int parmnum, tree type, tree arg,\n   push_to_top_level ();\n   push_access_scope (fn);\n   push_deferring_access_checks (dk_no_deferred);\n+  /* So in_immediate_context knows this is a default argument.  */\n+  begin_scope (sk_function_parms, fn);\n   start_lambda_scope (parm);\n \n   /* The default argument expression may cause implicitly defined\n@@ -13956,6 +13958,7 @@ tsubst_default_argument (tree fn, int parmnum, tree type, tree arg,\n     inform (input_location,\n \t    \"  when instantiating default argument for call to %qD\", fn);\n \n+  leave_scope ();\n   pop_deferring_access_checks ();\n   pop_access_scope (fn);\n   pop_from_top_level ();"}, {"sha": "45348c58bb685486ead5fb60e02fa8f97b1a7b10", "filename": "gcc/cp/tree.cc", "status": "modified", "additions": 24, "deletions": 28, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf74082bc93226e1ceb66430706e957e460c841/gcc%2Fcp%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf74082bc93226e1ceb66430706e957e460c841/gcc%2Fcp%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.cc?ref=9bf74082bc93226e1ceb66430706e957e460c841", "patch": "@@ -3125,32 +3125,6 @@ array_type_nelts_total (tree type)\n   return sz;\n }\n \n-/* Return true if FNDECL is std::source_location::current () method.  */\n-\n-bool\n-source_location_current_p (tree fndecl)\n-{\n-  gcc_checking_assert (TREE_CODE (fndecl) == FUNCTION_DECL\n-\t\t       && DECL_IMMEDIATE_FUNCTION_P (fndecl));\n-  if (DECL_NAME (fndecl) == NULL_TREE\n-      || TREE_CODE (TREE_TYPE (fndecl)) != FUNCTION_TYPE\n-      || TREE_CODE (TREE_TYPE (TREE_TYPE (fndecl))) != RECORD_TYPE\n-      || DECL_CONTEXT (fndecl) != TREE_TYPE (TREE_TYPE (fndecl))\n-      || !id_equal (DECL_NAME (fndecl), \"current\"))\n-    return false;\n-\n-  tree source_location = DECL_CONTEXT (fndecl);\n-  if (TYPE_NAME (source_location) == NULL_TREE\n-      || TREE_CODE (TYPE_NAME (source_location)) != TYPE_DECL\n-      || TYPE_IDENTIFIER (source_location) == NULL_TREE\n-      || !id_equal (TYPE_IDENTIFIER (source_location),\n-\t\t    \"source_location\")\n-      || !decl_in_std_namespace_p (TYPE_NAME (source_location)))\n-    return false;\n-\n-  return true;\n-}\n-\n struct bot_data\n {\n   splay_tree target_remap;\n@@ -3298,7 +3272,7 @@ bot_manip (tree* tp, int* walk_subtrees, void* data_)\n    variables.  */\n \n static tree\n-bot_replace (tree* t, int* /*walk_subtrees*/, void* data_)\n+bot_replace (tree* t, int* walk_subtrees, void* data_)\n {\n   bot_data &data = *(bot_data*)data_;\n   splay_tree target_remap = data.target_remap;\n@@ -3328,6 +3302,27 @@ bot_replace (tree* t, int* /*walk_subtrees*/, void* data_)\n \t\t\t    /*check_access=*/false, /*nonnull=*/true,\n \t\t\t    tf_warning_or_error);\n     }\n+  else if (cxx_dialect >= cxx20\n+\t   && (TREE_CODE (*t) == CALL_EXPR\n+\t       || TREE_CODE (*t) == AGGR_INIT_EXPR)\n+\t   && !in_immediate_context ())\n+    {\n+      /* Expand immediate invocations.  */\n+      if (tree fndecl = cp_get_callee_fndecl_nofold (*t))\n+\tif (DECL_IMMEDIATE_FUNCTION_P (fndecl))\n+\t  {\n+\t    /* Make in_immediate_context true within the args.  */\n+\t    in_consteval_if_p_temp_override ito;\n+\t    in_consteval_if_p = true;\n+\t    int nargs = call_expr_nargs (*t);\n+\t    for (int i = 0; i < nargs; ++i)\n+\t      cp_walk_tree (&get_nth_callarg (*t, i), bot_replace, data_, NULL);\n+\t    *t = cxx_constant_value (*t);\n+\t    if (*t == error_mark_node)\n+\t      return error_mark_node;\n+\t    *walk_subtrees = 0;\n+\t  }\n+    }\n \n   return NULL_TREE;\n }\n@@ -3353,7 +3348,8 @@ break_out_target_exprs (tree t, bool clear_location /* = false */)\n   bot_data data = { target_remap, clear_location };\n   if (cp_walk_tree (&t, bot_manip, &data, NULL) == error_mark_node)\n     t = error_mark_node;\n-  cp_walk_tree (&t, bot_replace, &data, NULL);\n+  if (cp_walk_tree (&t, bot_replace, &data, NULL) == error_mark_node)\n+    t = error_mark_node;\n \n   if (!--target_remap_count)\n     {"}, {"sha": "316219c65479532ea08d3b6d8666fac662c6e0ad", "filename": "gcc/testsuite/g++.dg/cpp2a/consteval-defarg3.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf74082bc93226e1ceb66430706e957e460c841/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval-defarg3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf74082bc93226e1ceb66430706e957e460c841/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval-defarg3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval-defarg3.C?ref=9bf74082bc93226e1ceb66430706e957e460c841", "patch": "@@ -0,0 +1,23 @@\n+// DR 2631: default args and DMI aren't immediately evaluated\n+// { dg-do compile { target c++20 } }\n+// { dg-final { scan-assembler-not \"foober\" } }\n+\n+consteval int foober();\n+\n+int g(int = foober());\n+struct A { int i = foober(); };\n+template <int i = foober()> struct B { };\n+struct C\n+{\n+  consteval C(int = foober()) { }\n+};\n+int h(C = C());\n+\n+consteval int foober() { return 42; }\n+\n+int main() {\n+  A a;\n+  B<> b;\n+  g();\n+  h();\n+}"}]}