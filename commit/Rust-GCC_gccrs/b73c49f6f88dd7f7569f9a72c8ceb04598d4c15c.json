{"sha": "b73c49f6f88dd7f7569f9a72c8ceb04598d4c15c", "node_id": "C_kwDOANBUbNoAKGI3M2M0OWY2Zjg4ZGQ3Zjc1NjlmOWE3MmM4Y2ViMDQ1OThkNGMxNWM", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2022-07-14T10:31:31Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2022-08-30T14:50:17Z"}, "message": "amdgcn: OpenMP SIMD routine support\n\nEnable and configure SIMD clones for amdgcn.  This affects both the __simd__\nfunction attribute, and the OpenMP \"declare simd\" directive.\n\nNote that the masked SIMD variants are generated, but the middle end doesn't\nactually support calling them yet.\n\ngcc/ChangeLog:\n\n\t* config/gcn/gcn.cc (gcn_simd_clone_compute_vecsize_and_simdlen): New.\n\t(gcn_simd_clone_adjust): New.\n\t(gcn_simd_clone_usable): New.\n\t(TARGET_SIMD_CLONE_ADJUST): New.\n\t(TARGET_SIMD_CLONE_COMPUTE_VECSIZE_AND_SIMDLEN): New.\n\t(TARGET_SIMD_CLONE_USABLE): New.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/vect/vect-simd-clone-1.c: Add dg-warning.\n\t* gcc.dg/vect/vect-simd-clone-2.c: Add dg-warning.\n\t* gcc.dg/vect/vect-simd-clone-3.c: Add dg-warning.\n\t* gcc.dg/vect/vect-simd-clone-4.c: Add dg-warning.\n\t* gcc.dg/vect/vect-simd-clone-5.c: Add dg-warning.\n\t* gcc.dg/vect/vect-simd-clone-8.c: Add dg-warning.", "tree": {"sha": "a38c5cb0ec6ceadfb19375209e9d65cbeb0909a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a38c5cb0ec6ceadfb19375209e9d65cbeb0909a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b73c49f6f88dd7f7569f9a72c8ceb04598d4c15c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b73c49f6f88dd7f7569f9a72c8ceb04598d4c15c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b73c49f6f88dd7f7569f9a72c8ceb04598d4c15c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b73c49f6f88dd7f7569f9a72c8ceb04598d4c15c/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f134a25ee8c29646f35f7e466109f6a7f5b9e824", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f134a25ee8c29646f35f7e466109f6a7f5b9e824", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f134a25ee8c29646f35f7e466109f6a7f5b9e824"}], "stats": {"total": 72, "additions": 72, "deletions": 0}, "files": [{"sha": "ceb690008079389c9ff3d13177aa1db246bb1c37", "filename": "gcc/config/gcn/gcn.cc", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b73c49f6f88dd7f7569f9a72c8ceb04598d4c15c/gcc%2Fconfig%2Fgcn%2Fgcn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b73c49f6f88dd7f7569f9a72c8ceb04598d4c15c/gcc%2Fconfig%2Fgcn%2Fgcn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.cc?ref=b73c49f6f88dd7f7569f9a72c8ceb04598d4c15c", "patch": "@@ -52,6 +52,7 @@\n #include \"rtl-iter.h\"\n #include \"dwarf2.h\"\n #include \"gimple.h\"\n+#include \"cgraph.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -4555,6 +4556,61 @@ gcn_vectorization_cost (enum vect_cost_for_stmt ARG_UNUSED (type_of_cost),\n   return 1;\n }\n \n+/* Implement TARGET_SIMD_CLONE_COMPUTE_VECSIZE_AND_SIMDLEN.  */\n+\n+static int\n+gcn_simd_clone_compute_vecsize_and_simdlen (struct cgraph_node *ARG_UNUSED (node),\n+\t\t\t\t\t    struct cgraph_simd_clone *clonei,\n+\t\t\t\t\t    tree base_type,\n+\t\t\t\t\t    int ARG_UNUSED (num))\n+{\n+  unsigned int elt_bits = GET_MODE_BITSIZE (SCALAR_TYPE_MODE (base_type));\n+\n+  if (known_eq (clonei->simdlen, 0U))\n+    clonei->simdlen = 64;\n+  else if (maybe_ne (clonei->simdlen, 64U))\n+    {\n+      /* Note that x86 has a similar message that is likely to trigger on\n+\t sizes that are OK for gcn; the user can't win.  */\n+      warning_at (DECL_SOURCE_LOCATION (node->decl), 0,\n+\t\t  \"unsupported simdlen %wd (amdgcn)\",\n+\t\t  clonei->simdlen.to_constant ());\n+      return 0;\n+    }\n+\n+  clonei->vecsize_mangle = 'n';\n+  clonei->vecsize_int = 0;\n+  clonei->vecsize_float = 0;\n+\n+  /* DImode ought to be more natural here, but VOIDmode produces better code,\n+     at present, due to the shift-and-test steps not being optimized away\n+     inside the in-branch clones.  */\n+  clonei->mask_mode = VOIDmode;\n+\n+  return 1;\n+}\n+\n+/* Implement TARGET_SIMD_CLONE_ADJUST.  */\n+\n+static void\n+gcn_simd_clone_adjust (struct cgraph_node *ARG_UNUSED (node))\n+{\n+  /* This hook has to be defined when\n+     TARGET_SIMD_CLONE_COMPUTE_VECSIZE_AND_SIMDLEN is defined, but we don't\n+     need it to do anything yet.  */\n+}\n+\n+/* Implement TARGET_SIMD_CLONE_USABLE.  */\n+\n+static int\n+gcn_simd_clone_usable (struct cgraph_node *ARG_UNUSED (node))\n+{\n+  /* We don't need to do anything here because\n+     gcn_simd_clone_compute_vecsize_and_simdlen currently only returns one\n+     possibility.  */\n+  return 0;\n+}\n+\n /* }}}  */\n /* {{{ md_reorg pass.  */\n \n@@ -6643,6 +6699,13 @@ gcn_dwarf_register_span (rtx rtl)\n #define TARGET_SECTION_TYPE_FLAGS gcn_section_type_flags\n #undef  TARGET_SCALAR_MODE_SUPPORTED_P\n #define TARGET_SCALAR_MODE_SUPPORTED_P gcn_scalar_mode_supported_p\n+#undef  TARGET_SIMD_CLONE_ADJUST\n+#define TARGET_SIMD_CLONE_ADJUST gcn_simd_clone_adjust\n+#undef  TARGET_SIMD_CLONE_COMPUTE_VECSIZE_AND_SIMDLEN\n+#define TARGET_SIMD_CLONE_COMPUTE_VECSIZE_AND_SIMDLEN \\\n+  gcn_simd_clone_compute_vecsize_and_simdlen\n+#undef  TARGET_SIMD_CLONE_USABLE\n+#define TARGET_SIMD_CLONE_USABLE gcn_simd_clone_usable\n #undef  TARGET_SMALL_REGISTER_CLASSES_FOR_MODE_P\n #define TARGET_SMALL_REGISTER_CLASSES_FOR_MODE_P \\\n   gcn_small_register_classes_for_mode_p"}, {"sha": "cd65fc343f1893accb6f25a6222a22f64a8b4b2e", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b73c49f6f88dd7f7569f9a72c8ceb04598d4c15c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b73c49f6f88dd7f7569f9a72c8ceb04598d4c15c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-1.c?ref=b73c49f6f88dd7f7569f9a72c8ceb04598d4c15c", "patch": "@@ -56,3 +56,5 @@ main ()\n   return 0;\n }\n \n+/* { dg-warning {unsupported simdlen 8 \\(amdgcn\\)} \"\" { target amdgcn*-*-* } 18 } */\n+/* { dg-warning {unsupported simdlen 4 \\(amdgcn\\)} \"\" { target amdgcn*-*-* } 18 } */"}, {"sha": "ffcbf9380d609d7a3ed7420a38df5c11f632b46a", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b73c49f6f88dd7f7569f9a72c8ceb04598d4c15c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b73c49f6f88dd7f7569f9a72c8ceb04598d4c15c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-2.c?ref=b73c49f6f88dd7f7569f9a72c8ceb04598d4c15c", "patch": "@@ -50,3 +50,5 @@ main ()\n   return 0;\n }\n \n+/* { dg-warning {unsupported simdlen 8 \\(amdgcn\\)} \"\" { target amdgcn*-*-* } 18 } */\n+/* { dg-warning {unsupported simdlen 4 \\(amdgcn\\)} \"\" { target amdgcn*-*-* } 18 } */"}, {"sha": "18d68779cc5dd8faec77a71a8f1cfa9785ff36ed", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b73c49f6f88dd7f7569f9a72c8ceb04598d4c15c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b73c49f6f88dd7f7569f9a72c8ceb04598d4c15c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-3.c?ref=b73c49f6f88dd7f7569f9a72c8ceb04598d4c15c", "patch": "@@ -43,3 +43,4 @@ main ()\n   return 0;\n }\n \n+/* { dg-warning {unsupported simdlen 4 \\(amdgcn\\)} \"\" { target amdgcn*-*-* } 15 } */"}, {"sha": "e9af0b83162e5bbd40e6a54df7d656ad956a8fd8", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-4.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b73c49f6f88dd7f7569f9a72c8ceb04598d4c15c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b73c49f6f88dd7f7569f9a72c8ceb04598d4c15c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-4.c?ref=b73c49f6f88dd7f7569f9a72c8ceb04598d4c15c", "patch": "@@ -46,3 +46,4 @@ main ()\n   return 0;\n }\n \n+/* { dg-warning {unsupported simdlen 8 \\(amdgcn\\)} \"\" { target amdgcn*-*-* } 17 } */"}, {"sha": "46da496524d99ff70e3673682040c0d5067afe03", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-5.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b73c49f6f88dd7f7569f9a72c8ceb04598d4c15c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b73c49f6f88dd7f7569f9a72c8ceb04598d4c15c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-5.c?ref=b73c49f6f88dd7f7569f9a72c8ceb04598d4c15c", "patch": "@@ -41,3 +41,4 @@ main ()\n   return 0;\n }\n \n+/* { dg-warning {unsupported simdlen 4 \\(amdgcn\\)} \"\" { target amdgcn*-*-* } 15 } */"}, {"sha": "f414285a170c7e3469fdad07256ef09e1b46e17b", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-8.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b73c49f6f88dd7f7569f9a72c8ceb04598d4c15c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b73c49f6f88dd7f7569f9a72c8ceb04598d4c15c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-8.c?ref=b73c49f6f88dd7f7569f9a72c8ceb04598d4c15c", "patch": "@@ -92,3 +92,5 @@ main ()\n   return 0;\n }\n \n+/* { dg-warning {unsupported simdlen 8 \\(amdgcn\\)} \"\" { target amdgcn*-*-* } 17 } */\n+/* { dg-warning {unsupported simdlen 8 \\(amdgcn\\)} \"\" { target amdgcn*-*-* } 24 } */"}]}