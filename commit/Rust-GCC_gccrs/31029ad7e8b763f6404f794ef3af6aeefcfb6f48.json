{"sha": "31029ad7e8b763f6404f794ef3af6aeefcfb6f48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzEwMjlhZDdlOGI3NjNmNjQwNGY3OTRlZjNhZjZhZWVmY2ZiNmY0OA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-08-29T13:34:10Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-08-29T13:34:10Z"}, "message": "Makefile.in (ch-version.c): Constify a char*.\n\n\t* Makefile.in (ch-version.c): Constify a char*.\n\n\t* actions.c (id_cmp, warn_unhandled, adjust_return_value,\n\tupdate_else_range_for_int_const, update_else_range_for_range,\n\tupdate_else_range_for_range_expr, update_else_range_for_type,\n\tcompute_else_range, check_case_value,\n\tchill_handle_case_label_range,\n\tchill_handle_multi_case_label_range,\n\tchill_handle_multi_case_else_label, chill_handle_multi_case_label,\n\tchill_handle_multi_case_label_list print_missing_cases): Add\n\tstatic prototypes.\n\t(build_exception_variant): Cast the function argument of qsort.\n\t(build_rts_call, warn_unhandled, chill_convert_for_assignment,\n\tadjust_return_value, chill_expand_result,\n\tbuild_multi_case_selector_expression, print_missing_cases):\n\tConstify a char*.\n\t(print_missing_cases): Introduce an intermediary non-const ptr.\n\tAdd brackets and indent.\n\n\t* ch-tree.h (maybe_building_objc_message_expr,\n\tmaybe_objc_comptypes, comptypes_record_hook): Remove declarations.\n\t(push_handler, pop_handler): Add prototypes.\n\t(builtin_function, valid_array_index_p,\n\tbuild_chill_exception_decl, build_rts_call,\n\tchill_convert_for_assignment, display_int_cst,\n\tbuild_chill_addr_expr, check_have_mode, get_identifier3,\n\tbuild_chill_string, register_seize_path, get_unique_identifier,\n\tadd_taskstuff_to_list, gnuchill_version): Constify a char*.\n\t(finish_chill_function): Add void prototype argument.\n\n\t* convert.c (convert_to_reference, convert_to_boolean,\n\tconvert_to_char, base_type_size_in_bytes, remove_tree_element,\n\tcheck_ps_range, digest_powerset_tuple, digest_structure_tuple,\n\tdigest_array_tuple, convert1): Add static prototypes.\n\t(base_type_size_in_bytes): Hide unused function.\n\t(display_int_cst, digest_array_tuple): Constify a char*.\n\n\t* decl.c (set_nesting_level, make_chill_variants, fix_identifier,\n\tproclaim_decl, maybe_acons, push_scope_decls, pop_scope_decls,\n\tbuild_implied_names, bind_sub_modules, layout_array_type,\n\tdo_based_decl, handle_one_level, label_value_cmp,\n\tfind_implied_types): Add static prototypes.\n\t(boolean_code_name, chill_tree_code_type, chill_tree_code_name):\n\tConstify a char*.\n\t(layout_chill_variants): Cast the function argument of qsort.\n\t(start_chill_function, fix_identifier, init_decl_processing):\n\tConstify a char*.\n\t(init_decl_processing): Prefer memcpy over bcopy to avoid casts.\n\tUse xcalloc instead of xmalloc/bzero.\n\t(builtin_function, build_chill_exception_decl,\n\tfinish_outer_function): Constify a char*.\n\n\t* except.c (start_handler_array, finish_handler_array): Add static\n\tprototypes.\n\n\t* expr.c (chill_expand_expr, chill_expand_case_expr,\n\tcheck_arglist_length, internal_build_compound_expr,\n\tis_really_instance, invalid_operand, invalid_right_operand,\n\tbuild_chill_abstime, build_allocate_memory_call,\n\tbuild_allocate_global_memory_call, build_return_memory,\n\tbuild_chill_duration, build_chill_floatcall,\n\tbuild_allocate_getstack, build_chill_allocate,\n\tbuild_chill_getstack, build_chill_terminate, build_chill_inttime,\n\tbuild_chill_lower_or_upper, build_max_min,\n\tbuild_chill_pred_or_succ, expand_packed_set, fold_set_expr,\n\tbuild_compare_set_expr, scalar_to_string, build_concat_expr,\n\tbuild_compare_string_expr, compare_records, string_char_rep,\n\tbuild_boring_bitstring): Add static prototypes.\n\t(check_have_mode, chill_expand_expr, build_chill_floatcall,\n\tbuild_allocate_getstack, build_max_min, build_chill_function_call,\n\texpand_packed_set, build_compare_set_expr, build_chill_addr_expr,\n\tstring_char_rep): Constify a char*.\n\n\t* gperf (hash, in_word_set): Add prototypes.\n\n\t* grant.c (newstring, strfree, append, prepend,\n\tgrant_use_seizefile, decode_layout, grant_array_type,\n\tgrant_array_type_selective, get_tag_value,\n\tget_tag_value_selective, print_enumeral, print_enumeral_selective,\n\tprint_integer_type, find_enum_parent, print_integer_selective,\n\tprint_struct, print_struct_selective, print_proc_exceptions,\n\tprint_proc_tail, print_proc_tail_selective, find_in_decls,\n\tin_ridpointers, grant_seized_identifier, globalize_decl,\n\tgrant_one_decl_selective, compare_memory_file, search_in_list,\n\treally_grant_this): Add static prototypes.\n\t(newstring, append, prepend, grant_use_seizefile,\n\tprint_integer_type, decode_constant, grant_one_decl_selective,\n\theader_template): Constify a char *.\n\n\t* inout.c (add_enum_to_list, build_chill_io_list_type,\n\tbuild_io_types, declare_predefined_file, build_access_part,\n\ttextlocation_mode, check_assoc, assoc_call, check_transfer,\n\tconnect_process_optionals, connect_text, connect_access,\n\tcheck_access, check_text, get_final_type_and_range,\n\tprocess_io_list, check_format_string, get_max_size,\n\tcheck_exprlist): Add static prototypes.\n\t(declare_predefined_file, check_assoc, assoc_call, check_transfer,\n\tcheck_access, check_text, process_io_list): Constify a char*.\n\n\t* lang.c (deep_const_expr, chill_print_error_function): Add static\n\tprototypes.\n\n\t* lex.c (close_input_file, maybe_number, string_or_char): Constify\n\ta char*.\n\t(ch_lex_init, skip_directive, same_file, getlc, yywrap,\n\tyy_refill): Add static prototypes.\n\t(build_chill_string, same_file, register_seize_path): Constify a\n\tchar*.\n\n\t* lex.h (finish_chill_seizes): Remove unused prototypes.\n\n\t* loop.c (build_temporary_variable, maybe_make_for_temp,\n\tget_unique_identifier): Constify a char*.\n\n\t* parse.c (ch_parse_init, check_end_label, end_function,\n\tbuild_prefix_clause, PEEK_TOKEN, peek_token_, pushback_token,\n\tforward_token_, require, check_token, expect, define__PROCNAME__):\n\tAdd static prototypes.\n\t(build_prefix_clause, expect): Constify a char*.\n\t(parse_expression, parse_primval, parse_untyped_expr,\n\tparse_opt_untyped_expr, parse_opt_actions): Add void prototype\n\targument.\n\t(parse_opt_name_string, parse_simple_name_string,\n\tparse_name_string, parse_defining_occurrence, parse_name,\n\tparse_optlabel, parse_opt_end_label_semi_colon, parse_modulion,\n\tparse_spec_module, parse_semi_colon,\n\tparse_defining_occurrence_list, parse_mode_definition,\n\tparse_mode_definition_statement, parse_synonym_definition,\n\tparse_synonym_definition_statement, parse_on_exception_list,\n\tparse_on_alternatives, parse_loc_declaration,\n\tparse_declaration_statement, parse_optforbid, parse_postfix,\n\tparse_postfix_list, parse_rename_clauses, parse_opt_prefix_clause,\n\tparse_grant_statement, parse_seize_statement,\n\tparse_param_name_list, parse_param_attr, parse_formpar,\n\tparse_formparlist, parse_opt_result_spec, parse_opt_except,\n\tparse_opt_recursive, parse_procedureattr, parse_proc_body,\n\tparse_procedure_definition, parse_processpar,\n\tparse_processparlist, parse_process_definition,\n\tparse_signal_definition, parse_signal_definition_statement,\n\tparse_then_clause, parse_opt_else_clause, parse_expr_list,\n\tparse_range_list_clause, pushback_paren_expr, parse_case_label,\n\tparse_case_label_list, parse_case_label_specification,\n\tparse_single_dimension_case_action,\n\tparse_multi_dimension_case_action, parse_case_action,\n\tparse_asm_operands, parse_asm_clobbers, ch_expand_asm_operands,\n\tparse_asm_action, parse_begin_end_block, parse_if_action,\n\tparse_iteration, parse_delay_case_event_list,\n\tparse_delay_case_action, parse_do_action, parse_receive_spec,\n\tparse_receive_case_action, parse_send_action, parse_start_action,\n\tparse_call, parse_tuple_fieldname_list, parse_tuple_element,\n\tparse_opt_element_list, parse_tuple, parse_operand6,\n\tparse_operand5, parse_operand4, parse_operand3, parse_operand2,\n\tparse_operand1, parse_operand0, parse_case_expression,\n\tparse_then_alternative, parse_else_alternative,\n\tparse_if_expression, parse_index_mode, parse_set_mode, parse_pos,\n\tparse_step, parse_opt_layout, parse_field_name_list,\n\tparse_fixed_field, parse_variant_field_list,\n\tparse_variant_alternative, parse_field, parse_structure_mode,\n\tparse_opt_queue_size, parse_procedure_mode, parse_program,\n\tparse_pass_1_2): Add static prototypes.\n\t(parse_process_definition): Remove extra argument in function call.\n\t(parse_range_list_clause): Likewise.\n\n\t* satisfy.c (satisfy, cycle_error_print, safe_satisfy_decl,\n\tsatisfy_list, satisfy_list_values): Add static prototype.\n\t(safe_satisfy_decl): Cast DECL_TASKING_CODE_DECL() to (tree).\n\n\t* tasking.c (make_process_struct): Remove unused prototype.\n\t(validate_process_parameters, get_struct_variable_name,\n\tdecl_tasking_code_variable, get_struct_debug_type_name,\n\tget_process_wrapper_name, build_tasking_enum,\n\tbuild_tasking_message_type, build_receive_signal_case_label,\n\tbuild_receive_buffer_case_label, build_receive_buffer_case_end,\n\tbuild_receive_signal_case_end): Add static prototypes.\n\t(struct_name, struct_debug_name, data_name, wrapper_name,\n\tget_struct_type_name, get_struct_debug_type_name,\n\tget_tasking_code_name, get_struct_variable_name,\n\tget_process_wrapper_name): Constify a char*.\n\t(validate_process_parameters, get_struct_variable_name,\n\tdecl_tasking_code_variable): Hide unused functions.\n\t(build_start_process, add_taskstuff_to_list, build_queue_length):\n\tConstify a char*.\n\n\t* tree.c (make_powerset_type): Add static prototype.\n\t(get_identifier3, build_alias_decl, decl_check_rename): Constify a\n\tchar*.\n\n\t* typeck.c (extract_constant_from_buffer,\n\texpand_constant_to_buffer, build_empty_string,\n\tmake_chill_pointer_type, make_chill_range_type,\n\tapply_chill_array_layout, field_decl_cmp, make_chill_struct_type,\n\tapply_chill_field_layout): Add static prototype.\n\t(valid_array_index_p, extract_constant_from_buffer,\n\tchill_expand_tuple): Constify a char*.\n\t(layout_chill_struct_type): Cast the function argument of qsort.\n\nFrom-SVN: r28965", "tree": {"sha": "7bf9cfb32cd0bfa4f72bd0f88824002977c51c50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7bf9cfb32cd0bfa4f72bd0f88824002977c51c50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31029ad7e8b763f6404f794ef3af6aeefcfb6f48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31029ad7e8b763f6404f794ef3af6aeefcfb6f48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31029ad7e8b763f6404f794ef3af6aeefcfb6f48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/comments", "author": null, "committer": null, "parents": [{"sha": "cd0e1e4893f4064e0c05581f8e3a2d720bd1756b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd0e1e4893f4064e0c05581f8e3a2d720bd1756b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd0e1e4893f4064e0c05581f8e3a2d720bd1756b"}], "stats": {"total": 947, "additions": 722, "deletions": 225}, "files": [{"sha": "0b6da80ad16e29252d7f82bbdba6be2714cd2e34", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 198, "deletions": 0, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=31029ad7e8b763f6404f794ef3af6aeefcfb6f48", "patch": "@@ -1,3 +1,201 @@\n+1999-08-29  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Makefile.in (ch-version.c): Constify a char*.\n+\n+\t* actions.c (id_cmp, warn_unhandled, adjust_return_value,\n+\tupdate_else_range_for_int_const, update_else_range_for_range,\n+\tupdate_else_range_for_range_expr, update_else_range_for_type,\n+\tcompute_else_range, check_case_value,\n+\tchill_handle_case_label_range,\n+\tchill_handle_multi_case_label_range,\n+\tchill_handle_multi_case_else_label, chill_handle_multi_case_label,\n+\tchill_handle_multi_case_label_list print_missing_cases): Add\n+\tstatic prototypes.\n+\t(build_exception_variant): Cast the function argument of qsort.\n+\t(build_rts_call, warn_unhandled, chill_convert_for_assignment,\n+\tadjust_return_value, chill_expand_result,\n+\tbuild_multi_case_selector_expression, print_missing_cases):\n+\tConstify a char*.\n+\t(print_missing_cases): Introduce an intermediary non-const ptr.\n+\tAdd brackets and indent.\n+\n+\t* ch-tree.h (maybe_building_objc_message_expr,\n+\tmaybe_objc_comptypes, comptypes_record_hook): Remove declarations.\n+\t(push_handler, pop_handler): Add prototypes.\n+\t(builtin_function, valid_array_index_p,\n+\tbuild_chill_exception_decl, build_rts_call,\n+\tchill_convert_for_assignment, display_int_cst,\n+\tbuild_chill_addr_expr, check_have_mode, get_identifier3,\n+\tbuild_chill_string, register_seize_path, get_unique_identifier,\n+\tadd_taskstuff_to_list, gnuchill_version): Constify a char*.\n+\t(finish_chill_function): Add void prototype argument.\n+\n+\t* convert.c (convert_to_reference, convert_to_boolean,\n+\tconvert_to_char, base_type_size_in_bytes, remove_tree_element,\n+\tcheck_ps_range, digest_powerset_tuple, digest_structure_tuple,\n+\tdigest_array_tuple, convert1): Add static prototypes.\n+\t(base_type_size_in_bytes): Hide unused function.\n+\t(display_int_cst, digest_array_tuple): Constify a char*.\n+\n+\t* decl.c (set_nesting_level, make_chill_variants, fix_identifier,\n+\tproclaim_decl, maybe_acons, push_scope_decls, pop_scope_decls,\n+\tbuild_implied_names, bind_sub_modules, layout_array_type,\n+\tdo_based_decl, handle_one_level, label_value_cmp,\n+\tfind_implied_types): Add static prototypes.\n+\t(boolean_code_name, chill_tree_code_type, chill_tree_code_name):\n+\tConstify a char*.\n+\t(layout_chill_variants): Cast the function argument of qsort.\n+\t(start_chill_function, fix_identifier, init_decl_processing):\n+\tConstify a char*.\n+\t(init_decl_processing): Prefer memcpy over bcopy to avoid casts.\n+\tUse xcalloc instead of xmalloc/bzero.\n+\t(builtin_function, build_chill_exception_decl,\n+\tfinish_outer_function): Constify a char*.\n+\n+\t* except.c (start_handler_array, finish_handler_array): Add static\n+\tprototypes.\n+\n+\t* expr.c (chill_expand_expr, chill_expand_case_expr,\n+\tcheck_arglist_length, internal_build_compound_expr,\n+\tis_really_instance, invalid_operand, invalid_right_operand,\n+\tbuild_chill_abstime, build_allocate_memory_call,\n+\tbuild_allocate_global_memory_call, build_return_memory,\n+\tbuild_chill_duration, build_chill_floatcall,\n+\tbuild_allocate_getstack, build_chill_allocate,\n+\tbuild_chill_getstack, build_chill_terminate, build_chill_inttime,\n+\tbuild_chill_lower_or_upper, build_max_min,\n+\tbuild_chill_pred_or_succ, expand_packed_set, fold_set_expr,\n+\tbuild_compare_set_expr, scalar_to_string, build_concat_expr,\n+\tbuild_compare_string_expr, compare_records, string_char_rep,\n+\tbuild_boring_bitstring): Add static prototypes.\n+\t(check_have_mode, chill_expand_expr, build_chill_floatcall,\n+\tbuild_allocate_getstack, build_max_min, build_chill_function_call,\n+\texpand_packed_set, build_compare_set_expr, build_chill_addr_expr,\n+\tstring_char_rep): Constify a char*.\n+\n+\t* gperf (hash, in_word_set): Add prototypes.\n+\n+\t* grant.c (newstring, strfree, append, prepend,\n+\tgrant_use_seizefile, decode_layout, grant_array_type,\n+\tgrant_array_type_selective, get_tag_value,\n+\tget_tag_value_selective, print_enumeral, print_enumeral_selective,\n+\tprint_integer_type, find_enum_parent, print_integer_selective,\n+\tprint_struct, print_struct_selective, print_proc_exceptions,\n+\tprint_proc_tail, print_proc_tail_selective, find_in_decls,\n+\tin_ridpointers, grant_seized_identifier, globalize_decl,\n+\tgrant_one_decl_selective, compare_memory_file, search_in_list,\n+\treally_grant_this): Add static prototypes.\n+\t(newstring, append, prepend, grant_use_seizefile,\n+\tprint_integer_type, decode_constant, grant_one_decl_selective,\n+\theader_template): Constify a char *.\n+\n+\t* inout.c (add_enum_to_list, build_chill_io_list_type,\n+\tbuild_io_types, declare_predefined_file, build_access_part,\n+\ttextlocation_mode, check_assoc, assoc_call, check_transfer,\n+\tconnect_process_optionals, connect_text, connect_access,\n+\tcheck_access, check_text, get_final_type_and_range,\n+\tprocess_io_list, check_format_string, get_max_size,\n+\tcheck_exprlist): Add static prototypes.\n+\t(declare_predefined_file, check_assoc, assoc_call, check_transfer,\n+\tcheck_access, check_text, process_io_list): Constify a char*.\n+\n+\t* lang.c (deep_const_expr, chill_print_error_function): Add static\n+\tprototypes.\n+\n+\t* lex.c (close_input_file, maybe_number, string_or_char): Constify\n+\ta char*.\n+\t(ch_lex_init, skip_directive, same_file, getlc, yywrap,\n+\tyy_refill): Add static prototypes.\n+\t(build_chill_string, same_file, register_seize_path): Constify a\n+\tchar*.\n+\n+\t* lex.h (finish_chill_seizes): Remove unused prototypes.\n+\n+\t* loop.c (build_temporary_variable, maybe_make_for_temp,\n+\tget_unique_identifier): Constify a char*.\n+\n+\t* parse.c (ch_parse_init, check_end_label, end_function,\n+\tbuild_prefix_clause, PEEK_TOKEN, peek_token_, pushback_token,\n+\tforward_token_, require, check_token, expect, define__PROCNAME__):\n+\tAdd static prototypes.\n+\t(build_prefix_clause, expect): Constify a char*.\n+\t(parse_expression, parse_primval, parse_untyped_expr,\n+\tparse_opt_untyped_expr, parse_opt_actions): Add void prototype\n+\targument.\n+\t(parse_opt_name_string, parse_simple_name_string,\n+\tparse_name_string, parse_defining_occurrence, parse_name,\n+\tparse_optlabel, parse_opt_end_label_semi_colon, parse_modulion,\n+\tparse_spec_module, parse_semi_colon,\n+\tparse_defining_occurrence_list, parse_mode_definition,\n+\tparse_mode_definition_statement, parse_synonym_definition,\n+\tparse_synonym_definition_statement, parse_on_exception_list,\n+\tparse_on_alternatives, parse_loc_declaration,\n+\tparse_declaration_statement, parse_optforbid, parse_postfix,\n+\tparse_postfix_list, parse_rename_clauses, parse_opt_prefix_clause,\n+\tparse_grant_statement, parse_seize_statement,\n+\tparse_param_name_list, parse_param_attr, parse_formpar,\n+\tparse_formparlist, parse_opt_result_spec, parse_opt_except,\n+\tparse_opt_recursive, parse_procedureattr, parse_proc_body,\n+\tparse_procedure_definition, parse_processpar,\n+\tparse_processparlist, parse_process_definition,\n+\tparse_signal_definition, parse_signal_definition_statement,\n+\tparse_then_clause, parse_opt_else_clause, parse_expr_list,\n+\tparse_range_list_clause, pushback_paren_expr, parse_case_label,\n+\tparse_case_label_list, parse_case_label_specification,\n+\tparse_single_dimension_case_action,\n+\tparse_multi_dimension_case_action, parse_case_action,\n+\tparse_asm_operands, parse_asm_clobbers, ch_expand_asm_operands,\n+\tparse_asm_action, parse_begin_end_block, parse_if_action,\n+\tparse_iteration, parse_delay_case_event_list,\n+\tparse_delay_case_action, parse_do_action, parse_receive_spec,\n+\tparse_receive_case_action, parse_send_action, parse_start_action,\n+\tparse_call, parse_tuple_fieldname_list, parse_tuple_element,\n+\tparse_opt_element_list, parse_tuple, parse_operand6,\n+\tparse_operand5, parse_operand4, parse_operand3, parse_operand2,\n+\tparse_operand1, parse_operand0, parse_case_expression,\n+\tparse_then_alternative, parse_else_alternative,\n+\tparse_if_expression, parse_index_mode, parse_set_mode, parse_pos,\n+\tparse_step, parse_opt_layout, parse_field_name_list,\n+\tparse_fixed_field, parse_variant_field_list,\n+\tparse_variant_alternative, parse_field, parse_structure_mode,\n+\tparse_opt_queue_size, parse_procedure_mode, parse_program,\n+\tparse_pass_1_2): Add static prototypes.\n+\t(parse_process_definition): Remove extra argument in function call.\n+\t(parse_range_list_clause): Likewise.\n+\n+\t* satisfy.c (satisfy, cycle_error_print, safe_satisfy_decl,\n+\tsatisfy_list, satisfy_list_values): Add static prototype.\n+\t(safe_satisfy_decl): Cast DECL_TASKING_CODE_DECL() to (tree).\n+\n+\t* tasking.c (make_process_struct): Remove unused prototype.\n+\t(validate_process_parameters, get_struct_variable_name,\n+\tdecl_tasking_code_variable, get_struct_debug_type_name,\n+\tget_process_wrapper_name, build_tasking_enum,\n+\tbuild_tasking_message_type, build_receive_signal_case_label,\n+\tbuild_receive_buffer_case_label, build_receive_buffer_case_end,\n+\tbuild_receive_signal_case_end): Add static prototypes.\n+\t(struct_name, struct_debug_name, data_name, wrapper_name,\n+\tget_struct_type_name, get_struct_debug_type_name,\n+\tget_tasking_code_name, get_struct_variable_name,\n+\tget_process_wrapper_name): Constify a char*.\n+\t(validate_process_parameters, get_struct_variable_name,\n+\tdecl_tasking_code_variable): Hide unused functions.\n+\t(build_start_process, add_taskstuff_to_list, build_queue_length):\n+\tConstify a char*.\n+\n+\t* tree.c (make_powerset_type): Add static prototype.\n+\t(get_identifier3, build_alias_decl, decl_check_rename): Constify a\n+\tchar*.\n+\n+\t* typeck.c (extract_constant_from_buffer,\n+\texpand_constant_to_buffer, build_empty_string,\n+\tmake_chill_pointer_type, make_chill_range_type,\n+\tapply_chill_array_layout, field_decl_cmp, make_chill_struct_type,\n+\tapply_chill_field_layout): Add static prototype.\n+\t(valid_array_index_p, extract_constant_from_buffer,\n+\tchill_expand_tuple): Constify a char*.\n+\t(layout_chill_struct_type): Cast the function argument of qsort.\n+\n 1999-08-09  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n         * actions.c (lang_identify): Constify a char*."}, {"sha": "2cd85442174ddfd2319751c33fe384ac08625ae4", "filename": "gcc/ch/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FMakefile.in?ref=31029ad7e8b763f6404f794ef3af6aeefcfb6f48", "patch": "@@ -316,7 +316,7 @@ typeck.o : typeck.c $(CONFIG_H) $(CHILL_TREE_H) ../insn-codes.h \\\n \t$(srcdir)/../system.h $(srcdir)/../toplev.h\n ch-version.o : ch-version.c\n ch-version.c : Makefile\n-\techo 'char *gnuchill_version = \"$(GNUCHILL_VERSION)\";' > $@\n+\techo 'const char * const gnuchill_version = \"$(GNUCHILL_VERSION)\";' > $@\n \n ## This is ugly, but I don't want GNU make to put these variables in\n ## the environment.  Older makes will see this as a set of targets"}, {"sha": "e121cb441f99463fc2efc81d046599f3dffabbc9", "filename": "gcc/ch/actions.c", "status": "modified", "additions": 47, "deletions": 26, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2Factions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2Factions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Factions.c?ref=31029ad7e8b763f6404f794ef3af6aeefcfb6f48", "patch": "@@ -32,6 +32,22 @@ Boston, MA 02111-1307, USA.  */\n #include \"assert.h\"\n #include \"toplev.h\"\n \n+static int id_cmp PROTO ((tree *, tree *));\n+static void warn_unhandled PROTO ((const char *));\n+static tree adjust_return_value PROTO ((tree, const char *));\n+static tree update_else_range_for_int_const PROTO ((tree, tree));\n+static tree update_else_range_for_range PROTO ((tree, tree, tree));\n+static tree update_else_range_for_range_expr PROTO ((tree, tree));\n+static tree update_else_range_for_type PROTO ((tree, tree));\n+static tree compute_else_range PROTO ((tree, tree, int));\n+static tree check_case_value PROTO ((tree, tree));\n+static void chill_handle_case_label_range PROTO ((tree, tree, tree));\n+static tree chill_handle_multi_case_label_range PROTO ((tree, tree, tree));\n+static tree chill_handle_multi_case_else_label PROTO ((tree));\n+static tree chill_handle_multi_case_label PROTO ((tree, tree));\n+static tree chill_handle_multi_case_label_list PROTO ((tree, tree));\n+static void print_missing_cases PROTO ((tree, const unsigned char *, long));\n+\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n@@ -155,7 +171,8 @@ build_exception_variant (type, raises)\n \ta[i] = t;\n       /* NULL terminator for list.  */\n       a[i] = NULL_TREE;\n-      qsort (a, i, sizeof (tree), id_cmp);\n+      qsort (a, i, sizeof (tree),\n+\t     (int (*) PROTO((const void*, const void*))) id_cmp);\n       while (i--)\n \tTREE_CHAIN (a[i]) = a[i+1];\n       raises = a[0];\n@@ -214,7 +231,7 @@ build_exception_variant (type, raises)\n \f\n tree\n build_rts_call (name, type, args)\n-     char *name;\n+     const char *name;\n      tree type, args;\n {\n   tree decl = lookup_name (get_identifier (name));\n@@ -262,7 +279,7 @@ static struct already_type *already_warned = 0;\n \n static void\n warn_unhandled (ex)\n-     char *ex;\n+     const char *ex;\n {\n   struct already_type *p = already_warned;\n \n@@ -460,7 +477,7 @@ check_non_null (expr)\n tree\n chill_convert_for_assignment (type, expr, place)\n      tree type, expr;\n-     char *place; /* location description for error messages */\n+     const char *place; /* location description for error messages */\n {\n   tree ttype = type;\n   tree etype = TREE_TYPE (expr);\n@@ -596,7 +613,7 @@ chill_convert_for_assignment (type, expr, place)\n static tree\n adjust_return_value (expr, action)\n      tree expr;\n-     char *action;\n+     const char *action;\n {\n   tree type = TREE_TYPE (TREE_TYPE (current_function_decl));\n \n@@ -632,7 +649,7 @@ chill_expand_result (expr, result_or_return)\n      int result_or_return;\n {\n   tree type;\n-  char *action_name = result_or_return ? \"RESULT\" : \"RETURN\";\n+  const char *action_name = result_or_return ? \"RESULT\" : \"RETURN\";\n   \n   if (pass == 1)\n     return;\n@@ -1352,7 +1369,7 @@ build_multi_case_selector_expression (selector_list, label_spec)\n static void\n print_missing_cases (type, cases_seen, count)\n      tree type;\n-     unsigned char *cases_seen;\n+     const unsigned char *cases_seen;\n      long count;\n {\n   long i;\n@@ -1364,7 +1381,7 @@ print_missing_cases (type, cases_seen, count)\n \t  long x = i;\n \t  long j;\n \t  tree t = type;\n-\t  char *err_val_name = \"???\";\n+\t  const char *err_val_name = \"???\";\n \t  if (TYPE_MIN_VALUE (t)\n \t      && TREE_CODE (TYPE_MIN_VALUE (t)) == INTEGER_CST)\n \t    x += TREE_INT_CST_LOW (TYPE_MIN_VALUE (t));\n@@ -1377,24 +1394,28 @@ print_missing_cases (type, cases_seen, count)\n \t      err_val_name = x ? \"TRUE\" : \"FALSE\";\n \t      break;\n \t    case CHAR_TYPE:\n-\t      if ((x >= ' ' && x < 127) && x != '\\'' && x != '^')\n-\t\tsprintf (buf, \"'%c'\", (char)x);\n-\t      else\n-\t\tsprintf (buf, \"'^(%ld)'\", x);\n-\t      err_val_name = buf;\n-\t      j = i;\n-\t      while (j < count && !BITARRAY_TEST(cases_seen, j))\n-\t\tj++;\n-\t      if (j > i + 1)\n-\t\t{\n-\t\t  long y = x+j-i-1;\n-\t\t  err_val_name += strlen (err_val_name);\n-\t\t  if ((y >= ' ' && y < 127) && y != '\\'' && y != '^')\n-\t\t    sprintf (err_val_name, \"%s:'%c'\", buf, (char)y);\n-\t\t  else\n-\t\t    sprintf (err_val_name, \"%s:'^(%ld)'\", buf, y);\n-\t\t  i = j - 1;      \n-\t\t}\n+\t      {\n+\t\tchar *bufptr;\n+\t\tif ((x >= ' ' && x < 127) && x != '\\'' && x != '^')\n+\t\t  sprintf (buf, \"'%c'\", (char)x);\n+\t\telse\n+\t\t  sprintf (buf, \"'^(%ld)'\", x);\n+\t\tbufptr = buf;\n+\t\tj = i;\n+\t\twhile (j < count && !BITARRAY_TEST(cases_seen, j))\n+\t\t  j++;\n+\t\tif (j > i + 1)\n+\t\t  {\n+\t\t    long y = x+j-i-1;\n+\t\t    bufptr += strlen (bufptr);\n+\t\t    if ((y >= ' ' && y < 127) && y != '\\'' && y != '^')\n+\t\t      sprintf (bufptr, \"%s:'%c'\", buf, (char)y);\n+\t\t    else\n+\t\t      sprintf (bufptr, \"%s:'^(%ld)'\", buf, y);\n+\t\t    i = j - 1;      \n+\t\t  }\n+\t\terr_val_name = bufptr;\n+\t      }\n \t      break;\n \t    case ENUMERAL_TYPE:\n \t      for (v = TYPE_VALUES (t);  v && x;  v = TREE_CHAIN (v))"}, {"sha": "51a25652a0a374a52c3043236b07b23369172ab4", "filename": "gcc/ch/ch-tree.h", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2Fch-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2Fch-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fch-tree.h?ref=31029ad7e8b763f6404f794ef3af6aeefcfb6f48", "patch": "@@ -374,9 +374,6 @@ struct mode_chain;  /* Forward reference */\n #define CH_REFERABLE(EXPR) chill_referable(EXPR)\n #define CH_LOCATION_P(EXPR) chill_location (EXPR)\n \f\n-extern int maybe_objc_comptypes ();\n-extern tree maybe_building_objc_message_expr ();\n-\f\n /* Standard named or nameless data types of the C compiler.  */\n \n /* Nonzero means `$' can be in an identifier.  */\n@@ -457,11 +454,6 @@ extern int flag_traditional;\n \n extern int warn_parentheses;\n \n-/* Nonzero means this is a function to call to perform comptypes\n-   on two record types.  */\n-\n-extern int (*comptypes_record_hook) ();\n-\n /* Nonzero means we are reading code that came from a system header file.  */\n extern int system_header_p;\n \n@@ -666,6 +658,8 @@ extern tree global_function_decl;\n \n /* in except.c */\n extern void except_init_pass_2                  PROTO((void));\n+extern void push_handler\t\t\tPROTO((void));\n+extern void pop_handler\t\t\t\tPROTO((int));\n \n /* in ch-loop.c */\n extern int flag_local_loop_counter;\n@@ -681,7 +675,7 @@ extern void nonvalue_begin_loop_scope           PROTO((void));\n extern void nonvalue_end_loop_scope             PROTO((void));\n \n extern tree build_enumerator                    PROTO((tree, tree));\n-extern tree builtin_function                    PROTO((char *, tree, enum built_in_function function_, char *));\n+extern tree builtin_function                    PROTO((const char *, tree, enum built_in_function function_, const char *));\n extern tree c_build_type_variant                PROTO((tree, int, int));\n extern int  c_decode_option                     PROTO((int, char **));\n extern void c_mark_varargs                      PROTO((void));\n@@ -769,7 +763,7 @@ extern void set_init_index                      PROTO((tree, tree));\n extern void set_init_label                      PROTO((tree));\n extern void start_init                          PROTO((tree, tree, int));\n extern void store_init_value                    PROTO((tree, tree));\n-extern tree valid_array_index_p                 PROTO((tree, tree, char *, int));\n+extern tree valid_array_index_p                 PROTO((tree, tree, const char *, int));\n \n /* in ch/actions.c */\n extern int grant_only_flag;\n@@ -782,7 +776,7 @@ extern tree build_chill_binary_op               PROTO((enum chill_tree_code, tre\n extern tree build_chill_card                    PROTO((tree));\n extern tree build_chill_case_expr               PROTO((tree, tree, tree)); \n extern tree build_cause_exception               PROTO((tree, int));\n-extern tree build_chill_exception_decl          PROTO((char *));\n+extern tree build_chill_exception_decl          PROTO((const char *));\n extern tree build_chill_function_call           PROTO((tree, tree));\n extern tree build_chill_length                  PROTO((tree));\n extern tree build_chill_indirect_ref            PROTO((tree, tree, int));\n@@ -801,10 +795,10 @@ extern tree build_chill_upper                   PROTO((tree));\n extern tree build_exception_variant             PROTO((tree, tree));\n extern tree build_generalized_call              PROTO((tree, tree));\n extern tree build_lang_decl                     PROTO((enum chill_tree_code, tree, tree));\n-extern tree build_rts_call                      PROTO((char *, tree, tree));\n+extern tree build_rts_call                      PROTO((const char *, tree, tree));\n extern tree build_varying_struct                PROTO((tree));\n extern void chill_check_decl                    PROTO((tree));\n-extern tree chill_convert_for_assignment        PROTO((tree, tree, char*));\n+extern tree chill_convert_for_assignment        PROTO((tree, tree, const char *));\n extern void chill_expand_return                 PROTO((tree, int));\n extern void chill_expand_result                 PROTO((tree, int));\n extern void chill_handle_case_default           PROTO((void));\n@@ -831,7 +825,7 @@ extern tree build_array_type_for_scalar         PROTO((tree));\n extern tree convert                             PROTO((tree, tree));\n extern tree convert_from_reference              PROTO((tree));\n extern tree convert_to_class                    PROTO((ch_class, tree));\n-extern char* display_int_cst\t\t\tPROTO((tree));\n+extern const char *display_int_cst\t\tPROTO((tree));\n \n /* in ch/decl.c */\n extern tree build_enumerator\t\t        PROTO((tree, tree));\n@@ -844,7 +838,7 @@ extern tree do_decl                             PROTO((tree, tree, int, int, tre\n extern void do_decls                            PROTO((tree, tree, int, int, tree, int));\n extern void expand_chill_outparms               PROTO((void));\n extern void find_granted_decls\t\t        PROTO((void));\n-extern void finish_chill_function               PROTO(());\n+extern void finish_chill_function               PROTO((void));\n extern tree finish_enum\t\t                PROTO((tree, tree));\n extern void fixup_chill_parms                   PROTO((tree));\n extern void finish_outer_function               PROTO((void));\n@@ -885,7 +879,7 @@ extern void expand_goto_except_cleanup          PROTO((int));\n extern int is_handled\t\t\t\tPROTO((tree));\n \n /* in ch/expr.c */\n-extern tree build_chill_addr_expr               PROTO((tree, char *));\n+extern tree build_chill_addr_expr               PROTO((tree, const char *));\n extern tree build_chill_arrow_expr              PROTO((tree, int));\n extern tree build_component_ref\t\t        PROTO((tree, tree));\n extern tree build_chill_compound_expr           PROTO((tree));\n@@ -898,7 +892,7 @@ extern tree build_compare_discrete_expr\t\tPROTO((enum tree_code,\n \t\t\t\t\t\t       tree, tree));\n extern tree check_case_selector                 PROTO((tree));\n extern tree check_case_selector_list            PROTO((tree));\n-extern tree check_have_mode                     PROTO((tree, char*));\n+extern tree check_have_mode                     PROTO((tree, const char *));\n extern void init_chill_expand                   PROTO((void));\n extern void chill_expand_assignment             PROTO((tree, enum chill_tree_code, tree));\n extern void expand_assignment_action            PROTO((tree, enum chill_tree_code, tree));\n@@ -934,7 +928,7 @@ extern tree build_chill_range_type              PROTO((tree, tree, tree));\n extern tree build_chill_reference_type          PROTO((tree));\n extern tree build_simple_array_type             PROTO((tree, tree, tree));\n extern tree const_expr                          PROTO((tree));\n-extern tree get_identifier3\t\t\tPROTO((char*, char*, char*));\n+extern tree get_identifier3\t\t\tPROTO((const char *, const char *, const char *));\n extern tree layout_chill_array_type             PROTO((tree));\n extern tree layout_chill_range_type             PROTO((tree, int));\n extern tree layout_chill_pointer_type           PROTO((tree));\n@@ -950,19 +944,19 @@ extern int  recognize_objc_keyword              PROTO((void));\n /* in ch/lex.l */\n extern tree use_seizefile_name;\n extern tree current_seizefile_name;\n-extern tree build_chill_string                  PROTO((int, char *));\n+extern tree build_chill_string                  PROTO((int, const char *));\n extern int  check_newline                       PROTO((void));\n extern tree get_chill_filename                  PROTO((void)); \n extern tree get_chill_linenumber                PROTO((void));       \n-extern void register_seize_path                 PROTO((char *));\n+extern void register_seize_path                 PROTO((const char *));\n extern void reinit_parse_for_function           PROTO((void));\n extern void mark_use_seizefile_written          PROTO((tree));\n \n /* in ch/loop.c */\n extern void begin_chill_loop                    PROTO((tree, tree));\n extern tree build_chill_iterator                PROTO((tree, tree, tree, int, int, int));\n extern void end_chill_loop                      PROTO((void));\n-extern tree get_unique_identifier               PROTO((char *));\n+extern tree get_unique_identifier               PROTO((const char *));\n \n /* in ch/inout.c */\n extern tree access_recordmode                   PROTO((tree));\n@@ -1027,7 +1021,7 @@ extern void to_global_binding_level             PROTO((void));\n extern tree satisfy_decl \t                PROTO((tree, int));\n \n /* in ch/tasking.c */\n-extern void add_taskstuff_to_list               PROTO((tree, char *, tree, tree, tree));\n+extern void add_taskstuff_to_list               PROTO((tree, const char *, tree, tree, tree));\n extern void process_buffer_decls                PROTO((tree, tree, int));\n extern tree buffer_element_mode                 PROTO((tree));\n extern void invalidate_buffer_element_mode      PROTO((tree));\n@@ -1187,4 +1181,7 @@ extern struct module *current_module;\n \n /* fold a tree to constant as much as possible */\n extern tree deep_fold PROTO((tree));\n+\n+extern const char * const gnuchill_version;\n+\n #endif"}, {"sha": "84093b8c5fd1c4695f77c3fe7803f529d6b675a7", "filename": "gcc/ch/convert.c", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fconvert.c?ref=31029ad7e8b763f6404f794ef3af6aeefcfb6f48", "patch": "@@ -36,6 +36,19 @@ Boston, MA 02111-1307, USA.  */\n extern tree bit_one_node, bit_zero_node;\n extern tree string_one_type_node;\n extern tree bitstring_one_type_node;\n+\n+static tree convert_to_reference\tPROTO ((tree, tree));\n+static tree convert_to_boolean\t\tPROTO ((tree, tree));\n+static tree convert_to_char\t\tPROTO ((tree, tree));\n+#if 0\n+static tree base_type_size_in_bytes\tPROTO ((tree));\n+#endif\n+static tree remove_tree_element\t\tPROTO ((tree, tree *));\n+static tree check_ps_range\t\tPROTO ((tree, tree, tree));\n+static tree digest_powerset_tuple\tPROTO ((tree, tree));\n+static tree digest_structure_tuple\tPROTO ((tree, tree));\n+static tree digest_array_tuple\t\tPROTO ((tree, tree, int));\n+static tree convert1\t\t\tPROTO ((tree, tree));\n \f\n static tree\n convert_to_reference (reftype, expr)\n@@ -143,7 +156,8 @@ convert_to_char (type, expr)\n   }\n }\n \f\n-tree\n+#if 0\n+static tree\n base_type_size_in_bytes (type)\n      tree type;\n {\n@@ -153,6 +167,7 @@ base_type_size_in_bytes (type)\n     return error_mark_node;\n   return size_in_bytes (TREE_TYPE (type));\n }\n+#endif\n \n /*\n  * build a singleton array type, of TYPE objects.\n@@ -564,7 +579,7 @@ digest_structure_tuple (type, inits)\n /* Return a Chill representation of the INTEGER_CST VAL.\n    The result may be in a static buffer, */\n \n-char *\n+const char *\n display_int_cst (val)\n      tree val;\n {\n@@ -737,7 +752,8 @@ digest_array_tuple (type, init, allow_missing_elements)\n \n       if (! CH_COMPATIBLE (value, element_type))\n \t{\n-\t  char *err_val_name = first ? display_int_cst (first) : \"(default)\";\n+\t  const char *err_val_name =\n+\t    first ? display_int_cst (first) : \"(default)\";\n \t  error (\"incompatible array tuple element %s\", err_val_name);\n \t  value = error_mark_node;\n \t}\n@@ -779,7 +795,7 @@ digest_array_tuple (type, init, allow_missing_elements)\n \tptr = &TREE_CHAIN (*ptr);\n       if (*ptr && ! tree_int_cst_lt (CONSTRUCTOR_ELT_HI (*ptr), first))\n \t{\n-\t  char *err_val_name = display_int_cst (first);\n+\t  const char *err_val_name = display_int_cst (first);\n \t  error (\"array tuple has duplicate index %s\", err_val_name);\n \t  errors++;\n \t  continue;\n@@ -862,7 +878,7 @@ digest_array_tuple (type, init, allow_missing_elements)\n \t    }\n \t  else\n \t    {\n-\t      char *err_val_name = display_int_cst (first);\n+\t      const char *err_val_name = display_int_cst (first);\n \t      if (TREE_CODE (last) != INTEGER_CST)\n \t\terror (\"dynamic array tuple without (*) or (ELSE)\");\n \t      else if (tree_int_cst_equal (first, last))"}, {"sha": "880478a4fe7b453f1641f8f601ea1de9c9f81243", "filename": "gcc/ch/decl.c", "status": "modified", "additions": 49, "deletions": 31, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fdecl.c?ref=31029ad7e8b763f6404f794ef3af6aeefcfb6f48", "patch": "@@ -243,6 +243,18 @@ int result_never_set;\n static void pushdecllist                     PROTO((tree, int));\n static int  init_nonvalue_struct             PROTO((tree));\n static int  init_nonvalue_array              PROTO((tree));\n+static void set_nesting_level                PROTO((tree, int));\n+static tree make_chill_variants              PROTO((tree, tree, tree));\n+static tree fix_identifier                   PROTO((tree));\n+static void proclaim_decl                    PROTO((tree, int));\n+static tree maybe_acons                      PROTO((tree, tree));\n+static void push_scope_decls                 PROTO((int));\n+static void pop_scope_decls                  PROTO((tree, tree));\n+static tree build_implied_names              PROTO((tree));\n+static void bind_sub_modules                 PROTO((int));\n+static void layout_array_type                PROTO((tree));\n+static void do_based_decl                    PROTO((tree, tree, tree));\n+static void handle_one_level                 PROTO((tree, tree));\n \n int current_nesting_level = BUILTIN_NESTING_LEVEL;\n int current_module_nesting_level = 0;\n@@ -406,7 +418,7 @@ tree string_ftype_ptr_ptr, int_ftype_string_string;\n tree int_ftype_cptr_cptr_sizet;\n #endif\n \n-char **boolean_code_name;\n+const char **boolean_code_name;\n \n /* Two expressions that are constants with value zero.\n    The first is of type `int', the second of type `void *'.  */\n@@ -666,7 +678,7 @@ int warn_missing_braces;\n \n #define DEFTREECODE(SYM, NAME, TYPE, LENGTH) TYPE,\n   \n-  char chill_tree_code_type[] = {\n+  const char chill_tree_code_type[] = {\n     'x',\n #include \"ch-tree.def\"\n   };\n@@ -689,7 +701,7 @@ int chill_tree_code_length[] = {\n    Used for printing out the tree and error messages.  */\n #define DEFTREECODE(SYM, NAME, TYPE, LEN) NAME,\n   \n-char *chill_tree_code_name[] = {\n+const char *chill_tree_code_name[] = {\n     \"@@dummy\",\n #include \"ch-tree.def\"\n   };\n@@ -1038,7 +1050,7 @@ init_nonvalue_array (expr)\n \f\n /* This excessive piece of code sets DECL_NESTING_LEVEL (DECL) to LEVEL. */\n \n-void\n+static void\n set_nesting_level (decl, level)\n      tree decl;\n      int level;\n@@ -1618,6 +1630,8 @@ struct tree_pair\n   tree decl;\n };\n \n+static int  label_value_cmp                  PROTO((struct tree_pair *,\n+\t\t\t\t\t\t    struct tree_pair *));\n \n /* Function to help qsort sort variant labels by value order.  */\n static int\n@@ -1627,7 +1641,7 @@ label_value_cmp (x, y)\n   return TREE_INT_CST_LOW (x->value) - TREE_INT_CST_LOW (y->value);\n }\n \f\n-tree\n+static tree\n make_chill_variants (tagfields, body, variantelse)\n      tree tagfields;\n      tree body;\n@@ -1809,7 +1823,8 @@ layout_chill_variants (utype)\n     {\n       int limit;\n       qsort (label_value_array,\n-\t     label_index, sizeof (struct tree_pair), label_value_cmp);\n+\t     label_index, sizeof (struct tree_pair),\n+\t     (int (*) PROTO ((const void *, const void *))) label_value_cmp);\n       limit = label_index - 1;\n       for (label_index = 0; label_index < limit; label_index++)\n \t{\n@@ -2035,7 +2050,8 @@ start_chill_function (label, rtype, parms, exceptlist, attrs)\n     {\n       /* We use the same name as the keyword.\n \t This makes it easy to print and change the RESULT from gdb. */\n-      char *result_str = (ignore_case || ! special_UC) ? \"result\" : \"RESULT\";\n+      const char *result_str =\n+\t(ignore_case || ! special_UC) ? \"result\" : \"RESULT\";\n       if (pass == 2 && TREE_CODE (result_type) == ERROR_MARK)\n \tTREE_TYPE (current_scope->remembered_decls) = result_type;\n       chill_result_decl = do_decl (get_identifier (result_str),\n@@ -2331,14 +2347,14 @@ push_module (name, is_spec_module)\n   return name;   /* may have generated a name */\n }\n /* Make a copy of the identifier NAME, replacing each '!' by '__'. */\n-tree\n+static tree\n fix_identifier (name)\n      tree name;\n {\n   char *buf = (char*)alloca (2 * IDENTIFIER_LENGTH (name) + 1);\n   int fixed = 0;\n   register char *dptr = buf;\n-  register char *sptr = IDENTIFIER_POINTER (name);\n+  register const char *sptr = IDENTIFIER_POINTER (name);\n   for (; *sptr; sptr++)\n     {\n       if (*sptr == '!')\n@@ -2492,7 +2508,7 @@ kept_level_p ()\n    Check redefinitions at the same level.\n    Suppress error messages if QUIET is true. */\n \n-void\n+static void\n proclaim_decl (decl, quiet)\n      tree decl;\n      int quiet;\n@@ -2561,12 +2577,14 @@ struct path\n   struct path *prev;\n   tree node;\n };\n+\n+static tree find_implied_types            PROTO((tree, struct path *, tree));\n \f\n /* Look for implied types (enumeral types) implied by TYPE (a decl or type).\n    Add these to list.\n    Use old_path to guard against cycles. */\n \n-tree\n+static tree\n find_implied_types (type, old_path, list)\n      tree type;\n      struct path *old_path;\n@@ -3503,7 +3521,7 @@ init_decl_processing ()\n     sizetype = long_unsigned_type_node;\n #else\n   {\n-    char *size_type_c_name = SIZE_TYPE;\n+    const char *size_type_c_name = SIZE_TYPE;\n     if (strncmp (size_type_c_name, \"long long \", 10) == 0)\n       sizetype = long_long_unsigned_type_node;\n     else if (strncmp (size_type_c_name, \"long \", 5) == 0)\n@@ -3709,20 +3727,20 @@ init_decl_processing ()\n   DECL_SOURCE_LINE (temp) = 0;\n   initializer_type = TREE_TYPE (temp);\n \n-  bcopy (chill_tree_code_type,\n-         tree_code_type + (int) LAST_AND_UNUSED_TREE_CODE,\n-         (((int) LAST_CHILL_TREE_CODE - (int) LAST_AND_UNUSED_TREE_CODE)\n-          * sizeof (char)));\n-  bcopy ((char *) chill_tree_code_length,\n-         (char *) (tree_code_length + (int) LAST_AND_UNUSED_TREE_CODE),\n-         (((int) LAST_CHILL_TREE_CODE - (int) LAST_AND_UNUSED_TREE_CODE)\n-          * sizeof (int)));\n-  bcopy ((char *) chill_tree_code_name,\n-         (char *) (tree_code_name + (int) LAST_AND_UNUSED_TREE_CODE),\n-         (((int) LAST_CHILL_TREE_CODE - (int) LAST_AND_UNUSED_TREE_CODE)\n-          * sizeof (char *)));\n-  boolean_code_name = (char **) xmalloc (sizeof (char *) * (int) LAST_CHILL_TREE_CODE);\n-  bzero ((char *) boolean_code_name, sizeof (char *) * (int) LAST_CHILL_TREE_CODE);\n+  memcpy (tree_code_type + (int) LAST_AND_UNUSED_TREE_CODE,\n+\t  chill_tree_code_type,\n+\t  (((int) LAST_CHILL_TREE_CODE - (int) LAST_AND_UNUSED_TREE_CODE)\n+\t   * sizeof (char)));\n+  memcpy (tree_code_length + (int) LAST_AND_UNUSED_TREE_CODE,\n+\t  chill_tree_code_length,\n+\t  (((int) LAST_CHILL_TREE_CODE - (int) LAST_AND_UNUSED_TREE_CODE)\n+\t   * sizeof (int)));\n+  memcpy (tree_code_name + (int) LAST_AND_UNUSED_TREE_CODE,\n+\t  chill_tree_code_name,\n+\t  (((int) LAST_CHILL_TREE_CODE - (int) LAST_AND_UNUSED_TREE_CODE)\n+\t   * sizeof (char *)));\n+  boolean_code_name = (const char **) xcalloc (sizeof (char *),\n+\t\t\t\t\t       (int) LAST_CHILL_TREE_CODE);\n \n   boolean_code_name[EQ_EXPR] = \"=\";\n   boolean_code_name[NE_EXPR] = \"/=\";\n@@ -4268,10 +4286,10 @@ init_decl_processing ()\n \n tree\n builtin_function (name, type, function_code, library_name)\n-     char *name;\n+     const char *name;\n      tree type;\n      enum built_in_function function_code;\n-     char *library_name;\n+     const char *library_name;\n {\n   tree decl = build_decl (FUNCTION_DECL, get_identifier (name), type);\n   DECL_EXTERNAL (decl) = 1;\n@@ -4980,7 +4998,7 @@ save_expr_under_name (name, expr)\n   pushdecllist (alias, 0);\n }\n \n-void\n+static void\n do_based_decl (name, mode, base_var)\n      tree name, mode, base_var;\n {\n@@ -5081,7 +5099,7 @@ static char exception_prefix [] = \"__Ex_\";\n \n tree\n build_chill_exception_decl (name)\n-     char *name;\n+     const char *name;\n {\n   tree decl, ex_name, ex_init, ex_type;\n   int  name_len = strlen (name);\n@@ -5142,7 +5160,7 @@ finish_outer_function ()\n      and fill in the module's function's address. */\n \n   extern tree initializer_type;\n-  char *fname_str = IDENTIFIER_POINTER (DECL_NAME (current_function_decl));\n+  const char *fname_str = IDENTIFIER_POINTER (DECL_NAME (current_function_decl));\n   char *init_entry_name = (char *)xmalloc ((unsigned)(strlen (fname_str) + 20));\n   tree  init_entry_id;\n   tree  init_entry_decl;"}, {"sha": "82ab16d35ab6d61dde1a39b575df223256c6cb27", "filename": "gcc/ch/except.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fexcept.c?ref=31029ad7e8b763f6404f794ef3af6aeefcfb6f48", "patch": "@@ -62,6 +62,8 @@ static tree unlink_handler_decl;\n static int exceptions_initialized = 0;\n static void emit_setup_handler PROTO((void));\n static void initialize_exceptions PROTO((void));\n+static tree start_handler_array PROTO((void));\n+static void finish_handler_array PROTO((void));\n static tree char_pointer_type_for_handler;\n \n /* If this is 1, operations to push and pop on the __exceptionStack"}, {"sha": "5781e38c19b39cb3be9c28d59665e7fb55c29ede", "filename": "gcc/ch/expr.c", "status": "modified", "additions": 65, "deletions": 31, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fexpr.c?ref=31029ad7e8b763f6404f794ef3af6aeefcfb6f48", "patch": "@@ -52,9 +52,43 @@ extern int  special_UC;\n #define HOURS_MAX                                         1193\n #define DAYS_MAX                                            49\n \n-/* forward declaration */\n-rtx chill_expand_expr PROTO((tree, rtx, enum machine_mode, \n-\t\t\t     enum expand_modifier));\n+/* forward declarations */\n+static rtx chill_expand_expr\t\tPROTO ((tree, rtx, enum machine_mode, \n+\t\t\t\t\t\tenum expand_modifier));\n+static tree chill_expand_case_expr\tPROTO ((tree));\n+static int check_arglist_length\t\tPROTO ((tree, int, int, tree));\n+static tree internal_build_compound_expr PROTO ((tree, int));\n+static int is_really_instance\t\tPROTO ((tree));\n+static int invalid_operand\t\tPROTO ((enum chill_tree_code,\n+\t\t\t\t\t\ttree, int));\n+static int invalid_right_operand\tPROTO ((enum chill_tree_code, tree));\n+static tree build_chill_abstime\t\tPROTO ((tree));\n+static tree build_allocate_memory_call\tPROTO ((tree, tree));\n+static tree build_allocate_global_memory_call PROTO ((tree, tree));\n+static tree build_return_memory\t\tPROTO ((tree));\n+static tree build_chill_duration\tPROTO ((tree, unsigned long,\n+\t\t\t\t\t\ttree, unsigned long));\n+static tree build_chill_floatcall\tPROTO ((tree, const char *,\n+\t\t\t\t\t\tconst char *));\n+static tree build_allocate_getstack\tPROTO ((tree, tree, const char *,\n+\t\t\t\t\t\tconst char *, tree, tree));\n+static tree build_chill_allocate\tPROTO ((tree, tree));\n+static tree build_chill_getstack\tPROTO ((tree, tree));\n+static tree build_chill_terminate\tPROTO ((tree));\n+static tree build_chill_inttime\t\tPROTO ((tree, tree));\n+static tree build_chill_lower_or_upper\tPROTO ((tree, int));\n+static tree build_max_min\t\tPROTO ((tree, int));\n+static tree build_chill_pred_or_succ\tPROTO ((tree, enum tree_code));\n+static tree expand_packed_set\t\tPROTO ((const char *, int, tree));\n+static tree fold_set_expr\t\tPROTO ((enum chill_tree_code,\n+\t\t\t\t\t\ttree, tree));\n+static tree build_compare_set_expr\tPROTO ((enum tree_code, tree, tree));\n+static tree scalar_to_string\t\tPROTO ((tree));\n+static tree build_concat_expr\t\tPROTO ((tree, tree));\n+static tree build_compare_string_expr\tPROTO ((enum tree_code, tree, tree));\n+static tree compare_records\t\tPROTO ((tree, tree));\n+static tree string_char_rep\t\tPROTO ((int, tree));\n+static tree build_boring_bitstring\tPROTO ((long, int));\n \n /* variable to hold the type the DESCR built-in returns */\n static tree descr_type = NULL_TREE;\n@@ -84,7 +118,7 @@ force_addr_of (value)\n tree\n check_have_mode (exp, context)\n      tree exp;\n-     char *context;\n+     const char *context;\n {\n   if (TREE_CODE (exp) != ERROR_MARK && TREE_TYPE (exp) == NULL_TREE)\n     {\n@@ -134,7 +168,7 @@ check_case_selector_list (list)\n   return nreverse(return_list);\n }\n \n-tree\n+static tree\n chill_expand_case_expr (expr)\n      tree expr;\n {\n@@ -208,7 +242,7 @@ chill_expand_case_expr (expr)\n \f\n /* Hook used by expand_expr to expand CHILL-specific tree codes.  */\n \n-rtx\n+static rtx\n chill_expand_expr (exp, target, tmode, modifier)\n      tree exp;\n      rtx target;\n@@ -221,7 +255,7 @@ chill_expand_expr (exp, target, tmode, modifier)\n   rtx original_target = target;\n   rtx op0, op1;\n   int ignore = target == const0_rtx;\n-  char *lib_func;                   /* name of library routine */\n+  const char *lib_func;                   /* name of library routine */\n \n   if (ignore)\n     target = 0, original_target = 0;\n@@ -1189,7 +1223,7 @@ build_chill_abs (expr)\n   return temp;\n }\n \n-tree\n+static tree\n build_chill_abstime (exprlist)\n      tree exprlist;\n {\n@@ -1242,7 +1276,7 @@ build_chill_abstime (exprlist)\n }\n \n \n-tree\n+static tree\n build_allocate_memory_call (ptr, size)\n   tree ptr, size;\n {\n@@ -1283,7 +1317,7 @@ build_allocate_memory_call (ptr, size)\n }\n \n \n-tree\n+static tree\n build_allocate_global_memory_call (ptr, size)\n   tree ptr, size;\n {\n@@ -1324,7 +1358,7 @@ build_allocate_global_memory_call (ptr, size)\n }\n \n \n-tree\n+static tree\n build_return_memory (ptr)\n   tree ptr;\n {\n@@ -1484,7 +1518,7 @@ build_chill_descr (expr)\n    MILLISECS, SECS, MINUTES, HOURS and DAYS.\n    The built duration value is in milliseconds. */\n \n-tree\n+static tree\n build_chill_duration (expr, multiplier, fnname, maxvalue)\n      tree           expr;\n      unsigned long  multiplier;\n@@ -1516,8 +1550,8 @@ build_chill_duration (expr, multiplier, fnname, maxvalue)\n static tree\n build_chill_floatcall (expr, chillname, funcname)\n      tree expr;\n-     char *chillname;\n-     char *funcname;\n+     const char *chillname;\n+     const char *funcname;\n {\n   tree result;\n   tree type;\n@@ -1545,8 +1579,8 @@ static tree\n build_allocate_getstack (mode, value, chill_name, fnname, filename, linenumber)\n      tree mode;\n      tree value;\n-     char *chill_name;\n-     char *fnname;\n+     const char *chill_name;\n+     const char *fnname;\n      tree filename;\n      tree linenumber;\n {\n@@ -1622,7 +1656,7 @@ build_allocate_getstack (mode, value, chill_name, fnname, filename, linenumber)\n }\n \n /* process the ALLOCATE built-in */\n-tree\n+static tree\n build_chill_allocate (mode, value)\n      tree mode;\n      tree value;\n@@ -1632,7 +1666,7 @@ build_chill_allocate (mode, value)\n }\n \n /* process the GETSTACK built-in */\n-tree\n+static tree\n build_chill_getstack (mode, value)\n      tree mode;\n      tree value;\n@@ -1642,7 +1676,7 @@ build_chill_getstack (mode, value)\n }\n \n /* process the TERMINATE built-in */\n-tree\n+static tree\n build_chill_terminate (ptr)\n      tree ptr;\n {\n@@ -1686,7 +1720,7 @@ build_chill_inttime_type ()\n   satisfy_decl (decl, 0);\n }\n \n-tree\n+static tree\n build_chill_inttime (t, loclist)\n      tree t, loclist;\n {\n@@ -1993,7 +2027,7 @@ build_max_min (expr, max_min)\n       else\n \t{\n \t  tree parmlist, filename, lineno;\n-\t  char *funcname;\n+\t  const char *funcname;\n \t  \n \t  /* set up to call appropriate runtime function */\n \t  if (max_min)\n@@ -2479,7 +2513,7 @@ build_chill_function_call (function, expr)\n  \n   if (valtail != 0 && TREE_VALUE (valtail) != void_type_node)\n     {\n-      char *errstr = \"too many arguments to procedure\";\n+      const char *errstr = \"too many arguments to procedure\";\n       if (name)\n \terror (\"%s `%s'\", errstr, IDENTIFIER_POINTER (name));\n       else\n@@ -2488,7 +2522,7 @@ build_chill_function_call (function, expr)\n     }\n   else if (typetail != 0 && TREE_VALUE (typetail) != void_type_node)\n     {\n-      char *errstr = \"too few arguments to procedure\";\n+      const char *errstr = \"too few arguments to procedure\";\n       if (name)\n \terror (\"%s `%s'\", errstr, IDENTIFIER_POINTER (name));\n       else\n@@ -2985,9 +3019,9 @@ build_generalized_call (func, args)\n \f\n /* Given a set stored as one bit per char (in BUFFER[0 .. BIT_SIZE-1]),\n    return a CONTRUCTOR, of type TYPE (a SET_TYPE). */\n-tree\n+static tree\n expand_packed_set (buffer, bit_size, type)\n-     char *buffer;\n+     const char *buffer;\n      int   bit_size;\n      tree type;\n {\n@@ -3131,7 +3165,7 @@ build_compare_set_expr (code, op0, op1)\n      tree op0, op1;\n {\n   tree result_type = NULL_TREE;\n-  char *fnname;\n+  const char *fnname;\n   tree x;\n \n   /* These conversions are needed if -fold-strings. */\n@@ -3428,7 +3462,7 @@ build_compare_string_expr (code, op0, op1)\n   return build (code, boolean_type_node, op0, op1);\n }\n \n-tree\n+static tree\n compare_records (exp0, exp1)\n      tree exp0, exp1;\n {\n@@ -4017,7 +4051,7 @@ build_chill_arrow_expr (ref, force)\n tree\n build_chill_addr_expr (ref, errormsg)\n      tree ref;\n-     char *errormsg;\n+     const char *errormsg;\n {\n   if (ref == error_mark_node)\n     return ref;\n@@ -4067,15 +4101,15 @@ build_chill_binary_op (code, op0, op1)\n /*\n  * process a string repetition phrase '(' COUNT ')' STRING\n  */\n-tree\n+static tree\n string_char_rep (count, string)\n      int count;\n      tree string;\n {\n   int slen, charindx, repcnt;\n   char ch;\n   char *temp;\n-  char *inp;\n+  const char *inp;\n   char *outp;\n   tree type;\n \n@@ -4102,7 +4136,7 @@ string_char_rep (count, string)\n /* Build a bit-string constant containing with the given LENGTH\n    containing all ones (if VALUE is true), or all zeros (if VALUE is false). */\n \n-tree\n+static tree\n build_boring_bitstring (length, value)\n      long length;\n      int value;"}, {"sha": "c6edb6803b06de4077e304d1c22310f259e8545f", "filename": "gcc/ch/gperf", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2Fgperf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2Fgperf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fgperf?ref=31029ad7e8b763f6404f794ef3af6aeefcfb6f48", "patch": "@@ -5,6 +5,14 @@ struct resword {\n   enum toktype { RESERVED, DIRECTIVE, PREDEF } flags;\n };\n extern tree ridpointers [];\n+#ifdef __GNUC__\n+__inline\n+#endif\n+static unsigned int hash\tPARAMS ((const char *, unsigned int));\n+#ifdef __GNUC__\n+__inline\n+#endif\n+struct resword *in_word_set\tPARAMS ((const char *, unsigned int));\n %%\n access,\t\t\tACCESS,\t\t\tNORID,\tRESERVED\n after,\t\t\tAFTER,\t\t\tNORID,\tRESERVED"}, {"sha": "095080f50c741fb20b83089e13843821b56d26f5", "filename": "gcc/ch/grant.c", "status": "modified", "additions": 39, "deletions": 12, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2Fgrant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2Fgrant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fgrant.c?ref=31029ad7e8b763f6404f794ef3af6aeefcfb6f48", "patch": "@@ -58,7 +58,6 @@ int chill_at_module_level = 0;\n static int spec_module_generated = 0;\n \n /* define version strings */\n-extern char *gnuchill_version;\n extern char *version_string;\n \n /* define a faster string handling */\n@@ -84,6 +83,34 @@ static MYSTRING *decode_constant_selective  PROTO((tree, tree));\n static MYSTRING *decode_mode_selective      PROTO((tree, tree));\n static MYSTRING *get_type_selective         PROTO((tree, tree));\n static MYSTRING *decode_decl_selective      PROTO((tree, tree));\n+static MYSTRING *newstring                  PROTO((const char *));\n+static void strfree                         PROTO((MYSTRING *));\n+static MYSTRING *append                     PROTO((MYSTRING *, const char *));\n+static MYSTRING *prepend                    PROTO((MYSTRING *, const char *));\n+static void grant_use_seizefile             PROTO((const char *));\n+static MYSTRING *decode_layout              PROTO((tree));\n+static MYSTRING *grant_array_type           PROTO((tree));\n+static MYSTRING *grant_array_type_selective PROTO((tree, tree));\n+static MYSTRING *get_tag_value              PROTO((tree));\n+static MYSTRING *get_tag_value_selective    PROTO((tree, tree));\n+static MYSTRING *print_enumeral             PROTO((tree));\n+static MYSTRING *print_enumeral_selective   PROTO((tree, tree));\n+static MYSTRING *print_integer_type         PROTO((tree));\n+static tree find_enum_parent                PROTO((tree, tree));\n+static MYSTRING *print_integer_selective    PROTO((tree, tree));\n+static MYSTRING *print_struct               PROTO((tree));\n+static MYSTRING *print_struct_selective     PROTO((tree, tree));\n+static MYSTRING *print_proc_exceptions      PROTO((tree));\n+static MYSTRING *print_proc_tail            PROTO((tree, tree, int));\n+static MYSTRING *print_proc_tail_selective  PROTO((tree, tree, tree));\n+static tree find_in_decls                   PROTO((tree, tree));\n+static int in_ridpointers                   PROTO((tree));\n+static void grant_seized_identifier         PROTO((tree));\n+static void globalize_decl                  PROTO((tree));\n+static void grant_one_decl_selective        PROTO((tree, tree));\n+static int compare_memory_file              PROTO((const char *, const char *));\n+static int search_in_list                   PROTO((tree, tree));\n+static int really_grant_this                PROTO((tree, tree));\n \n /* list of the VAR_DECLs of the module initializer entries */\n tree      module_init_list = NULL_TREE;\n@@ -101,7 +128,7 @@ static seizefile_list *selective_seizes = 0;\n \f\n static MYSTRING *\n newstring (str)\n-    char\t*str;\n+    const char\t*str;\n {\n     MYSTRING\t*tmp = (MYSTRING *) xmalloc (sizeof (MYSTRING));\n     unsigned\tlen = strlen (str);\n@@ -124,7 +151,7 @@ strfree (str)\n static MYSTRING *\n append (inout, in)\n     MYSTRING\t*inout;\n-    char\t*in;\n+    const char\t*in;\n {\n     int\tinlen = strlen (in);\n     int amount = ALLOCAMOUNT;\n@@ -141,7 +168,7 @@ append (inout, in)\n static MYSTRING *\n prepend (inout, in)\n     MYSTRING\t*inout;\n-    char\t*in;\n+    const char\t*in;\n {\n   MYSTRING *res = inout;\n   if (strlen (in))\n@@ -153,9 +180,9 @@ prepend (inout, in)\n   return res;\n }\n \f\n-void\n+static void\n grant_use_seizefile (seize_filename)\n-     char *seize_filename;\n+     const char *seize_filename;\n {\n   APPEND (gstring, \"<> USE_SEIZE_FILE \\\"\");\n   APPEND (gstring, seize_filename);\n@@ -523,7 +550,7 @@ print_integer_type (type)\n {\n   MYSTRING *result = newstring (\"\");\n   MYSTRING *mode_string;\n-  char     *name_ptr;\n+  const char *name_ptr;\n   tree\t    base_type;\n \n   if (TREE_TYPE (type))\n@@ -1683,7 +1710,7 @@ decode_constant (init)\n   MYSTRING *tmp_string;\n   tree\t    type = TREE_TYPE (init);\n   tree\tval = init;\n-  char *op;\n+  const char *op;\n   char\twrk[256];\n   MYSTRING *mode_string;\n     \n@@ -1835,7 +1862,7 @@ decode_constant (init)\n \n     case STRING_CST:\n       {\n-\tchar *ptr = TREE_STRING_POINTER (val);\n+\tconst char *ptr = TREE_STRING_POINTER (val);\n \tint i = TREE_STRING_LENGTH (val);\n \tAPPEND (result, \"\\\"\");\n \twhile (--i >= 0)\n@@ -2586,8 +2613,8 @@ grant_one_decl_selective (decl, all_decls)\n \n static int\n compare_memory_file (fname, buf)\n-    char\t*fname;\n-    char\t*buf;\n+    const char\t*fname;\n+    const char\t*buf;\n {\n   FILE\t*fb;\n   int\t\tc;\n@@ -2802,7 +2829,7 @@ really_grant_this (decl, granted_decls)\n \f\n /* Write a SPEC MODULE using the declarations in the list DECLS. */\n static int header_written = 0;\n-static char *header_template =\n+static const char *header_template =\n \"--\\n-- WARNING: this file was generated by\\n\\\n -- GNUCHILL version %s\\n-- based on gcc version %s\\n--\\n\";\n "}, {"sha": "4d7c02ab7b09d14044cab8bfa9604bfffbb310de", "filename": "gcc/ch/hash.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2Fhash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2Fhash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fhash.h?ref=31029ad7e8b763f6404f794ef3af6aeefcfb6f48", "patch": "@@ -1,12 +1,20 @@\n /* C code produced by gperf version 2.7.1 (19981006 egcs) */\n /* Command-line: gperf -L C -F , 0, 0, 0 -D -E -S1 -p -j1 -i 1 -g -o -t -k* gperf.tmp  */\n struct resword {\n-  const char   *name;\n+  const char  *name;\n   short        token;\n   enum rid     rid;\n   enum toktype { RESERVED, DIRECTIVE, PREDEF } flags;\n };\n extern tree ridpointers [];\n+#ifdef __GNUC__\n+__inline\n+#endif\n+static unsigned int hash\tPARAMS ((const char *, unsigned int));\n+#ifdef __GNUC__\n+__inline\n+#endif\n+struct resword *in_word_set\tPARAMS ((const char *, unsigned int));\n /* maximum key range = 2815, duplicates = 6 */\n \n #ifdef __GNUC__"}, {"sha": "f4050fff64516abfda361bd5f909626325c02d79", "filename": "gcc/ch/inout.c", "status": "modified", "additions": 35, "deletions": 10, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2Finout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2Finout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Finout.c?ref=31029ad7e8b763f6404f794ef3af6aeefcfb6f48", "patch": "@@ -35,7 +35,26 @@ extern int ignore_case;\n /* set non-zero if special words are to be entered in uppercase */\n extern int special_UC;\n \n-static int intsize_of_charsexpr PROTO((tree));\n+static int intsize_of_charsexpr\t\tPROTO ((tree));\n+static tree add_enum_to_list\t\tPROTO ((tree, tree));\n+static void build_chill_io_list_type\tPROTO ((void));\n+static void build_io_types\t\tPROTO ((void));\n+static void declare_predefined_file\tPROTO ((const char *, const char *));\n+static tree build_access_part\t        PROTO ((void));\n+static tree textlocation_mode\t\tPROTO ((tree));\n+static int check_assoc\t\t\tPROTO ((tree, int, const char *));\n+static tree assoc_call\t\t\tPROTO ((tree, tree, const char *));\n+static int check_transfer\t\tPROTO ((tree, int, const char *));\n+static int connect_process_optionals\tPROTO ((tree, tree *, tree *, tree));\n+static tree connect_text\t\tPROTO ((tree, tree, tree, tree));\n+static tree connect_access\t\tPROTO ((tree, tree, tree, tree));\n+static int check_access\t\t\tPROTO ((tree, int, const char *));\n+static int check_text\t\t\tPROTO ((tree, int, const char *));\n+static tree get_final_type_and_range\tPROTO ((tree, tree *, tree *));\n+static void process_io_list\t\tPROTO ((tree, tree *, tree *, rtx *,\n+\t\t\t\t\t\tint, int));\n+static void check_format_string\t\tPROTO ((tree, tree, int));\n+static int get_max_size\t\t\tPROTO ((tree));\n \n /* association mode */\n tree association_type_node;\n@@ -1047,8 +1066,8 @@ build_io_types ()\n \f\n static void\n declare_predefined_file (name, assembler_name)\n-     char *name;\n-     char* assembler_name;\n+     const char *name;\n+     const char *assembler_name;\n {\n   tree decl = build_lang_decl (VAR_DECL, get_identifier (name),\n \t\t\t       stdio_type_node);\n@@ -1727,7 +1746,7 @@ static int\n check_assoc (assoc, argnum, errmsg)\n      tree assoc;\n      int argnum;\n-     char *errmsg;\n+     const char *errmsg;\n {\n   if (assoc == NULL_TREE || TREE_CODE (assoc) == ERROR_MARK)\n     return 0;\n@@ -1860,7 +1879,7 @@ static tree\n assoc_call (assoc, func, name)\n      tree assoc;\n      tree func;\n-     char *name;\n+     const char *name;\n {\n   tree arg1, arg2, arg3;\n   tree result;\n@@ -2107,7 +2126,7 @@ static int\n check_transfer (transfer, argnum, errmsg)\n      tree transfer;\n      int argnum;\n-     char *errmsg;\n+     const char *errmsg;\n {\n   int result = 0;\n \n@@ -2483,7 +2502,7 @@ static int\n check_access (access, argnum, errmsg)\n      tree access;\n      int argnum;\n-     char *errmsg;\n+     const char *errmsg;\n {\n   if (access == NULL_TREE || TREE_CODE (access) == ERROR_MARK)\n     return 1;\n@@ -2719,7 +2738,7 @@ static int\n check_text (text, argnum, errmsg)\n      tree text;\n      int argnum;\n-     char *errmsg;\n+     const char *errmsg;\n {\n   if (text == NULL_TREE || TREE_CODE (text) == ERROR_MARK)\n     return 0;\n@@ -3023,8 +3042,8 @@ process_io_list (exprlist, iolist_addr, iolist_length, iolist_rtx, do_read,\n     {\n       tree item = TREE_VALUE (exprlist);\n       tree idx = build_int_2 (idxcnt++, 0);\n-      char *fieldname = 0;\n-      char *enumname = 0;\n+      const char *fieldname = 0;\n+      const char *enumname = 0;\n       tree array_ref = build_chill_array_ref_1 (iolist, idx);\n       tree item_type;\n       tree range_low = NULL_TREE, range_high = NULL_TREE;\n@@ -3788,6 +3807,9 @@ typedef enum\n } convcode_t;\n static convcode_t     convcode;\n \n+static tree check_exprlist\t\tPROTO ((convcode_t, tree, int,\n+\t\t\t\t\t\tunsigned long));\n+\n typedef enum\n {\n   False, True,\n@@ -3822,6 +3844,9 @@ typedef enum {\n   NormalEnd, EndAtParen, TextFailEnd \n } formatexit_t;\n \n+static formatexit_t scanformcont\tPROTO ((char *, int, char **, int *,\n+\t\t\t\t\t\ttree, tree *, int, int *));\n+\n /* NOTE: varibale have to be set to False before calling check_format_string */\n static Boolean empty_printed;\n "}, {"sha": "7be6d5c75f04dd635d0c41a1b2503985b4b12abb", "filename": "gcc/ch/lang.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Flang.c?ref=31029ad7e8b763f6404f794ef3af6aeefcfb6f48", "patch": "@@ -51,10 +51,13 @@ char* chill_real_input_filename;\n extern FILE* finput;\n \n extern int maximum_field_alignment;\n+\n+static int deep_const_expr\t\t\tPROTO ((tree));\n+static void chill_print_error_function\t\tPROTO ((const char *));\n \f\n /* return 1 if the expression tree given has all\n    constant nodes as its leaves; return 0 otherwise. */\n-int\n+static int\n deep_const_expr (exp)\n      tree exp;\n {\n@@ -234,7 +237,7 @@ lang_decode_option (argc, argv)\n   return 1;\n }\n \n-void\n+static void\n chill_print_error_function (file)\n      const char *file;\n {"}, {"sha": "b7fe5f4665fef9560b2b0a249f170f83dc5f3c3f", "filename": "gcc/ch/lex.c", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Flex.c?ref=31029ad7e8b763f6404f794ef3af6aeefcfb6f48", "patch": "@@ -67,11 +67,11 @@ extern struct obstack permanent_obstack;\n extern struct obstack temporary_obstack;\n \n /* forward declarations */\n-static void close_input_file         PROTO((char *));\n+static void close_input_file         PROTO((const char *));\n static tree convert_bitstring        PROTO((char *));\n static tree convert_integer          PROTO((char *));\n static void maybe_downcase           PROTO((char *));\n-static int  maybe_number             PROTO((char *));\n+static int  maybe_number             PROTO((const char *));\n static tree equal_number             PROTO((void));\n static void handle_use_seizefile_directive PROTO((int));\n static int  handle_name\t\t     PROTO((tree));\n@@ -82,7 +82,11 @@ static tree read_number              PROTO((int));\n static void skip_c_comment           PROTO((void));\n static void skip_line_comment        PROTO((void));\n static int  skip_whitespace          PROTO((void));\n-static tree string_or_char           PROTO((int, char *));\n+static tree string_or_char           PROTO((int, const char *));\n+static void ch_lex_init              PROTO((void));\n+static void skip_directive           PROTO((void));\n+static int same_file                 PROTO((const char *, const char *));\n+static int getlc                     PROTO((FILE *));\n \n /* next variables are public, because ch-actions uses them */\n \n@@ -289,7 +293,8 @@ finish_parse ()\n     fclose (finput);\n }\n \f\n-static int yywrap ();\n+static int yywrap PROTO ((void));\n+static int yy_refill PROTO ((void));\n \n #define YY_PUTBACK_SIZE 5\n #define YY_BUF_SIZE 1000\n@@ -298,7 +303,8 @@ static char yy_buffer[YY_PUTBACK_SIZE + YY_BUF_SIZE];\n static char *yy_cur = yy_buffer + YY_PUTBACK_SIZE;\n static char *yy_lim = yy_buffer + YY_PUTBACK_SIZE;\n \n-int yy_refill ()\n+static int\n+yy_refill ()\n {\n   char *buf = yy_buffer + YY_PUTBACK_SIZE;\n   int c, result;\n@@ -593,7 +599,7 @@ yylex ()\n \n static void\n close_input_file (fn)\n-  char *fn;\n+  const char *fn;\n {\n   if (finput == NULL)\n     abort ();\n@@ -838,7 +844,7 @@ read_directive ()\n tree\n build_chill_string (len, str)\n     int   len;\n-    char  *str;\n+    const char  *str;\n {\n   tree t;\n \n@@ -855,7 +861,7 @@ build_chill_string (len, str)\n static tree\n string_or_char (len, str)\n      int   len;\n-     char *str;\n+     const char *str;\n {\n   tree result;\n   \n@@ -890,7 +896,7 @@ maybe_downcase (str)\n \n static int\n maybe_number (s)\n-  char\t*s;\n+  const char *s;\n {\n   char\tfc;\n   \n@@ -1349,11 +1355,11 @@ convert_bitstring (p)\n \n static int\n same_file (filename1, filename2)\n-     char *filename1;\n-     char *filename2;\n+     const char *filename1;\n+     const char *filename2;\n {\n   struct stat s[2];\n-  char        *fn_input[2];\n+  const char *fn_input[2];\n   int         i, stat_status;\n   \n   if (grant_only_flag)\n@@ -1457,7 +1463,7 @@ handle_use_seizefile_directive (restricted)\n /*\n  * get input, convert to lower case for comparison\n  */\n-int\n+static int\n getlc (file)\n      FILE *file;\n {\n@@ -2104,7 +2110,7 @@ equal_number ()\n  */\n void\n register_seize_path (path)\n-     char *path;\n+     const char *path;\n {\n   int          pathlen = strlen (path);\n   char        *new_path = (char *)xmalloc (pathlen + 1);"}, {"sha": "fd7c4b92131b4482a9730a985bb7f77ca3f4a601", "filename": "gcc/ch/lex.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2Flex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2Flex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Flex.h?ref=31029ad7e8b763f6404f794ef3af6aeefcfb6f48", "patch": "@@ -94,6 +94,4 @@ extern tree current_seize_file;\n extern int chill_at_module_level;\n extern tree chill_initializer_name;\n \n-extern void finish_chill_seizes ();\n-\n extern void prepare_paren_colon PROTO((void));"}, {"sha": "5a1385e916e5b65098014115ec9c6033b3854bed", "filename": "gcc/ch/loop.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Floop.c?ref=31029ad7e8b763f6404f794ef3af6aeefcfb6f48", "patch": "@@ -41,8 +41,8 @@ static int  initialize_iter_var      PROTO((void));\n static void maybe_skip_loop          PROTO((void));\n static int  bottom_loop_end_check    PROTO((void));\n static int  increment_temps          PROTO((void));\n-static tree build_temporary_variable PROTO((char *, tree));\n-static tree maybe_make_for_temp      PROTO((tree, char *, tree));\n+static tree build_temporary_variable PROTO((const char *, tree));\n+static tree maybe_make_for_temp      PROTO((tree, const char *, tree));\n #if 0\n static tree chill_unsigned_type      PROTO((tree));\n #endif\n@@ -1006,7 +1006,7 @@ top_loop_end_check (condition)\n \tcase DO_POWERSET:\n \t  {\n \t    tree temp1;\n-\t    char *func_name;\n+\t    const char *func_name;\n \t    tree user_type = TREE_TYPE (ip->user_var);\n \n \t    if (ip->down_flag)\n@@ -1158,7 +1158,7 @@ increment_temps ()\n  */\n tree\n get_unique_identifier (lead)\n-     char *lead;\n+     const char *lead;\n {\n   char idbuf [256];\n   static int idcount = 0;\n@@ -1174,7 +1174,7 @@ get_unique_identifier (lead)\n  */\n static tree\n build_temporary_variable (name, type)\n-     char *name;\n+     const char *name;\n      tree type;\n {\n   return decl_temp1 (get_unique_identifier (name), type, 0, NULL_TREE, 0, 0);\n@@ -1190,7 +1190,7 @@ build_temporary_variable (name, type)\n static tree\n maybe_make_for_temp (exp, temp_name, exp_type)\n      tree exp;\n-     char *temp_name;\n+     const char *temp_name;\n      tree exp_type;\n {\n   tree result = exp;"}, {"sha": "72d1db68771cc6dfb09c9a00008d8761a7e3cc13", "filename": "gcc/ch/parse.c", "status": "modified", "additions": 131, "deletions": 22, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fparse.c?ref=31029ad7e8b763f6404f794ef3af6aeefcfb6f48", "patch": "@@ -80,6 +80,18 @@ extern struct rtx_def *expand_expr  \tPROTO((tree, struct rtx_def *,\n \t\t\t\t\t       enum machine_mode, int));\n \n static int parse_action\t\t\t\tPROTO((void));\n+static void ch_parse_init\t\t\tPROTO((void));\n+static void check_end_label\t\t\tPROTO((tree, tree));\n+static void end_function       \t\t\tPROTO((void));\n+static tree build_prefix_clause\t\t\tPROTO((tree));\n+static enum terminal PEEK_TOKEN\t\t\tPROTO((void));\n+static int peek_token_\t\t\t\tPROTO((int));\n+static void pushback_token\t\t\tPROTO((int, tree));\n+static void forward_token_\t\t\tPROTO((void));\n+static void require\t\t\t\tPROTO((enum terminal));\n+static int check_token\t\t\t\tPROTO((enum terminal));\n+static int expect\t\t\t\tPROTO((enum terminal, const char *));\n+static void define__PROCNAME__\t\t\tPROTO((void));\n \n extern int  lineno;\n extern char *input_filename;\n@@ -226,7 +238,7 @@ build_prefix_clause (id)\n   if (!id)\n     {\n       if (current_module && current_module->name)\n-\t{ char *module_name = IDENTIFIER_POINTER (current_module->name);\n+\t{ const char *module_name = IDENTIFIER_POINTER (current_module->name);\n \t  if (module_name[0] && module_name[0] != '_')\n \t    return current_module->name;\n \t}\n@@ -315,7 +327,7 @@ forward_token_()\n /* Skip the next token.\n    if it isn't TOKEN, the parser is broken. */\n \n-void\n+static void\n require(token)\n      enum terminal token;\n {\n@@ -328,7 +340,7 @@ require(token)\n   FORWARD_TOKEN();\n }\n \n-int\n+static int\n check_token (token)\n      enum terminal token;\n {\n@@ -341,10 +353,10 @@ check_token (token)\n /* return 0 if expected token was not found,\n    else return 1.\n */\n-int\n+static int\n expect(token, message)\n      enum terminal token;\n-     char *message;\n+     const char *message;\n {\n   if (PEEK_TOKEN() != token)\n     {\n@@ -363,7 +375,7 @@ expect(token, message)\n static void\n define__PROCNAME__ ()\n {\n-  char *fname;\n+  const char *fname;\n   tree string;\n   tree procname;\n \n@@ -378,17 +390,114 @@ define__PROCNAME__ ()\n }\n \n /* Forward declarations. */\n-static tree parse_expression ();\n-static tree parse_primval ();\n+static tree parse_expression PROTO((void));\n+static tree parse_primval PROTO((void));\n static tree parse_mode PROTO((void));\n static tree parse_opt_mode PROTO((void));\n-static tree parse_untyped_expr ();\n-static tree parse_opt_untyped_expr ();\n+static tree parse_untyped_expr PROTO((void));\n+static tree parse_opt_untyped_expr PROTO((void));\n static int parse_definition PROTO((int));\n-static void parse_opt_actions ();\n+static void parse_opt_actions PROTO((void));\n static void parse_body PROTO((void));\n static tree parse_if_expression_body PROTO((void));\n static tree parse_opt_handler PROTO((void));\n+static tree parse_opt_name_string PROTO((int));\n+static tree parse_simple_name_string PROTO((void));\n+static tree parse_name_string PROTO((void));\n+static tree parse_defining_occurrence PROTO((void));\n+static tree parse_name PROTO((void));\n+static tree parse_optlabel PROTO((void));\n+static void parse_opt_end_label_semi_colon PROTO((tree));\n+static void parse_modulion PROTO((tree));\n+static void parse_spec_module PROTO((tree));\n+static void parse_semi_colon PROTO((void));\n+static tree parse_defining_occurrence_list PROTO((void));\n+static void parse_mode_definition PROTO((int));\n+static void parse_mode_definition_statement PROTO((int));\n+static void parse_synonym_definition PROTO((void));\n+static void parse_synonym_definition_statement PROTO((void));\n+static tree parse_on_exception_list PROTO((void));\n+static void parse_on_alternatives PROTO((void));\n+static void parse_loc_declaration PROTO((int));\n+static void parse_declaration_statement PROTO((int));\n+static tree parse_optforbid PROTO((void));\n+static tree parse_postfix PROTO((enum terminal));\n+static tree parse_postfix_list PROTO((enum terminal));\n+static void parse_rename_clauses PROTO((enum terminal));\n+static tree parse_opt_prefix_clause PROTO((void));\n+static void parse_grant_statement PROTO((void));\n+static void parse_seize_statement PROTO((void));\n+static tree parse_param_name_list PROTO((void));\n+static tree parse_param_attr PROTO((void));\n+static tree parse_formpar PROTO((void));\n+static tree parse_formparlist PROTO((void));\n+static tree parse_opt_result_spec PROTO((void));\n+static tree parse_opt_except PROTO((void));\n+static tree parse_opt_recursive PROTO((void));\n+static tree parse_procedureattr PROTO((void));\n+static void parse_proc_body PROTO((tree, tree));\n+static void parse_procedure_definition PROTO((int));\n+static tree parse_processpar PROTO((void));\n+static tree parse_processparlist PROTO((void));\n+static void parse_process_definition PROTO((int));\n+static void parse_signal_definition PROTO((void));\n+static void parse_signal_definition_statement PROTO((void));\n+static void parse_then_clause PROTO((void));\n+static void parse_opt_else_clause PROTO((void));\n+static tree parse_expr_list PROTO((void));\n+static tree parse_range_list_clause PROTO((void));\n+static void pushback_paren_expr PROTO((tree));\n+static tree parse_case_label PROTO((void));\n+static tree parse_case_label_list PROTO((tree, int));\n+static tree parse_case_label_specification PROTO((tree));\n+static void parse_single_dimension_case_action PROTO((tree));\n+static void parse_multi_dimension_case_action PROTO((tree));\n+static void parse_case_action PROTO((tree));\n+static tree parse_asm_operands PROTO((void));\n+static tree parse_asm_clobbers PROTO((void));\n+static void ch_expand_asm_operands PROTO((tree, tree, tree, tree, int, char *, int));\n+static void parse_asm_action PROTO((void));\n+static void parse_begin_end_block PROTO((tree));\n+static void parse_if_action PROTO((tree));\n+static void parse_iteration PROTO((void));\n+static tree parse_delay_case_event_list PROTO((void));\n+static void parse_delay_case_action PROTO((tree));\n+static void parse_do_action PROTO((tree));\n+static tree parse_receive_spec PROTO((void));\n+static void parse_receive_case_action PROTO((tree));\n+static void parse_send_action PROTO((void));\n+static void parse_start_action PROTO((void));\n+static tree parse_call PROTO((tree));\n+static tree parse_tuple_fieldname_list PROTO((void));\n+static tree parse_tuple_element PROTO((void));\n+static tree parse_opt_element_list PROTO((void));\n+static tree parse_tuple PROTO((tree));\n+static tree parse_operand6 PROTO((void));\n+static tree parse_operand5 PROTO((void));\n+static tree parse_operand4 PROTO((void));\n+static tree parse_operand3 PROTO((void));\n+static tree parse_operand2 PROTO((void));\n+static tree parse_operand1 PROTO((void));\n+static tree parse_operand0 PROTO((void));\n+static tree parse_case_expression PROTO((void));\n+static tree parse_then_alternative PROTO((void));\n+static tree parse_else_alternative PROTO((void));\n+static tree parse_if_expression PROTO((void));\n+static tree parse_index_mode PROTO((void));\n+static tree parse_set_mode PROTO((void));\n+static tree parse_pos PROTO((void));\n+static tree parse_step PROTO((void));\n+static tree parse_opt_layout PROTO((int));\n+static tree parse_field_name_list PROTO((void));\n+static tree parse_fixed_field PROTO((void));\n+static tree parse_variant_field_list PROTO((void));\n+static tree parse_variant_alternative PROTO((void));\n+static tree parse_field PROTO((void));\n+static tree parse_structure_mode PROTO((void));\n+static tree parse_opt_queue_size PROTO((void));\n+static tree parse_procedure_mode PROTO((void));\n+static void parse_program PROTO((void));\n+static void parse_pass_1_2 PROTO((void));\n \n static tree\n parse_opt_name_string (allow_all)\n@@ -622,7 +731,7 @@ parse_mode_definition (is_newmode)\n   ignoring = save_ignoring;\n }\n \n-void\n+static void\n parse_mode_definition_statement (is_newmode)\n      int is_newmode;\n {\n@@ -883,7 +992,7 @@ parse_declaration_statement (in_spec_module)\n   parse_semi_colon ();\n }\n \n-tree\n+static tree\n parse_optforbid ()\n {\n   if (check_token (FORBID) == 0)\n@@ -905,7 +1014,7 @@ parse_optforbid ()\n /* Matches: <grant postfix> or <seize postfix>\n    Returns: A (singleton) TREE_LIST. */\n \n-tree\n+static tree\n parse_postfix (grant_or_seize)\n      enum terminal grant_or_seize;\n {\n@@ -921,7 +1030,7 @@ parse_postfix (grant_or_seize)\n   return build_tree_list (forbid, name);\n }\n \n-tree\n+static tree\n parse_postfix_list (grant_or_seize)\n      enum terminal grant_or_seize;\n {\n@@ -931,7 +1040,7 @@ parse_postfix_list (grant_or_seize)\n   return list;\n }\n \n-void\n+static void\n parse_rename_clauses (grant_or_seize)\n      enum terminal grant_or_seize;\n {\n@@ -972,7 +1081,7 @@ parse_opt_prefix_clause ()\n   return build_prefix_clause (parse_opt_name_string (0));\n }\n \n-void\n+static void\n parse_grant_statement ()\n {\n   require (GRANT);\n@@ -988,7 +1097,7 @@ parse_grant_statement ()\n     }\n }\n \n-void\n+static void\n parse_seize_statement ()\n {\n   require (SEIZE);\n@@ -1282,7 +1391,7 @@ parse_process_definition (in_spec_module)\n     ignoring = 0;\n   require (COLON); require (PROCESS);\n   expect (LPRN, \"missing '(' after PROCESS\");\n-  params = parse_processparlist (in_spec_module);\n+  params = parse_processparlist ();\n   expect (RPRN, \"missing ')' in PROCESS\");\n   ignoring = save_ignoring;\n   if (in_spec_module)\n@@ -1479,7 +1588,7 @@ parse_range_list_clause ()\n     return NULL_TREE;\n   while (check_token (COMMA))\n     {\n-      name = parse_name_string (0);\n+      name = parse_name_string ();\n     }\n   if (check_token (SC))\n     {\n@@ -1899,7 +2008,7 @@ parse_asm_clobbers ()\n   return list;\n }\n \n-void\n+static void\n ch_expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n      tree string, outputs, inputs, clobbers;\n      int vol;\n@@ -4166,7 +4275,7 @@ parse_program()\n   finish_outer_function ();\n }\n \n-void\n+static void\n parse_pass_1_2()\n {\n   parse_program();"}, {"sha": "8ab22f24b01d78f22a36615597c06d21c244b916", "filename": "gcc/ch/satisfy.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2Fsatisfy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2Fsatisfy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fsatisfy.c?ref=31029ad7e8b763f6404f794ef3af6aeefcfb6f48", "patch": "@@ -35,8 +35,12 @@ struct decl_chain\n   tree decl;\n };\n \n-/* forward declaration */\n-tree satisfy PROTO((tree, struct decl_chain *));\n+/* forward declarations */\n+static tree satisfy\t\tPROTO ((tree, struct decl_chain *));\n+static void cycle_error_print\tPROTO ((struct decl_chain *, tree));\n+static tree safe_satisfy_decl\tPROTO ((tree, struct decl_chain *));\n+static void satisfy_list\tPROTO ((tree, struct decl_chain *));\n+static void satisfy_list_values\tPROTO ((tree, struct decl_chain *));\n \n static struct decl_chain dummy_chain;\n #define LOOKUP_ONLY (chain==&dummy_chain)\n@@ -55,7 +59,7 @@ cycle_error_print (chain, decl)\n     }\n }\n \n-tree\n+static tree\n safe_satisfy_decl (decl, prev_chain)\n      tree decl;\n      struct decl_chain *prev_chain;\n@@ -200,8 +204,7 @@ safe_satisfy_decl (decl, prev_chain)\n     case FUNCTION_DECL:\n       SATISFY (TREE_TYPE (decl));\n       if (CH_DECL_PROCESS (decl))\n-\tsafe_satisfy_decl (DECL_TASKING_CODE_DECL (decl), \n-\t\t\t   prev_chain);\n+\tsafe_satisfy_decl ((tree) DECL_TASKING_CODE_DECL (decl), prev_chain);\n       break;\n     case PARM_DECL:\n       SATISFY (TREE_TYPE (decl));\n@@ -211,8 +214,7 @@ safe_satisfy_decl (decl, prev_chain)\n     case TYPE_DECL:\n       SATISFY (TREE_TYPE (decl));\n       if (CH_DECL_SIGNAL (decl))\n-\tsafe_satisfy_decl (DECL_TASKING_CODE_DECL (decl), \n-\t\t\t   prev_chain);\n+\tsafe_satisfy_decl ((tree) DECL_TASKING_CODE_DECL (decl), prev_chain);\n       if (!LOOKUP_ONLY)\n \t{\n \t  if (TYPE_NAME (TREE_TYPE (decl)) == NULL_TREE)\n@@ -300,7 +302,7 @@ satisfy_list_values (exp, chain)\n     }\n }\n \n-tree\n+static tree\n satisfy (exp, chain)\n      tree exp;\n      struct decl_chain *chain;"}, {"sha": "db8c90bf9eb9fef9d4bcbc5887fbc71aaa27cd79", "filename": "gcc/ch/tasking.c", "status": "modified", "additions": 35, "deletions": 20, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2Ftasking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2Ftasking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Ftasking.c?ref=31029ad7e8b763f6404f794ef3af6aeefcfb6f48", "patch": "@@ -44,8 +44,19 @@ tree generic_signal_type_node;\n tree chill_taskingcode_type_node;\n \n /* forward declarations */\n-void validate_process_parameters PROTO((tree));\n-tree make_process_struct         PROTO((tree, tree));\n+#if 0\n+static void validate_process_parameters\t\tPROTO((tree));\n+static tree get_struct_variable_name\t\tPROTO((tree));\n+static tree decl_tasking_code_variable\t\tPROTO((tree, tree *, int));\n+#endif\n+static tree get_struct_debug_type_name\t\tPROTO((tree));\n+static tree get_process_wrapper_name\t\tPROTO((tree));\n+static tree build_tasking_enum\t\t\tPROTO((void));\n+static void build_tasking_message_type\t\tPROTO((void));\n+static tree build_receive_signal_case_label\tPROTO((tree, tree));\n+static tree build_receive_buffer_case_label\tPROTO((tree, tree));\n+static void build_receive_buffer_case_end\tPROTO((tree, tree));\n+static void build_receive_signal_case_end\tPROTO((tree, tree));\n \n /* list of this module's process, buffer, etc. decls.\n  This is a list of TREE_VECs, chain by their TREE_CHAINs. */\n@@ -58,18 +69,18 @@ tree tasking_list = NULL_TREE;\n #define TASK_INFO_STUFF_TYPE(NODE) TREE_VEC_ELT(NODE,4)\n \n /* name template for process argument type */\n-static char * struct_name = \"__tmp_%s_arg_type\";\n+static const char * struct_name = \"__tmp_%s_arg_type\";\n \n /* name template for process arguments for debugging type */\n-static char * struct_debug_name = \"__tmp_%s_debug_type\";\n+static const char * struct_debug_name = \"__tmp_%s_debug_type\";\n \n #if 0\n /* name template for process argument variable */\n-static char * data_name = \"__tmp_%s_arg_variable\";\n+static const char * data_name = \"__tmp_%s_arg_variable\";\n #endif\n \n /* name template for process wrapper */\n-static char * wrapper_name = \"__tmp_%s_wrapper\";\n+static const char * wrapper_name = \"__tmp_%s_wrapper\";\n \n extern int ignoring;\n static tree void_ftype_void;\n@@ -80,18 +91,18 @@ tree\n get_struct_type_name (name)\n      tree name;\n {\n-  char *idp = IDENTIFIER_POINTER (name);        /* process name */\n+  const char *idp = IDENTIFIER_POINTER (name);        /* process name */\n   char *tmpname = xmalloc (strlen (idp) + strlen (struct_name) + 1);\n \n   sprintf (tmpname, struct_name, idp);\n   return get_identifier (tmpname);\n }\n \n-tree\n+static tree\n get_struct_debug_type_name (name)\n      tree name;\n {\n-  char *idp = IDENTIFIER_POINTER (name);        /* process name */\n+  const char *idp = IDENTIFIER_POINTER (name);        /* process name */\n   char *tmpname = xmalloc (strlen (idp) + strlen (struct_debug_name) + 1);\n \n   sprintf (tmpname, struct_debug_name, idp);\n@@ -103,8 +114,8 @@ tree\n get_tasking_code_name (name)\n      tree name;\n {\n-  char *skelname = \"__tmp_%s_code\";\n-  char *name_str = IDENTIFIER_POINTER (name);\n+  const char *skelname = \"__tmp_%s_code\";\n+  const char *name_str = IDENTIFIER_POINTER (name);\n   char *tmpname  = (char *)alloca (IDENTIFIER_LENGTH (name) +\n \t\t\t\t   strlen (skelname) + 1);\n \n@@ -117,7 +128,7 @@ static tree\n get_struct_variable_name (name)\n      tree name;\n {\n-  char *idp = IDENTIFIER_POINTER (name);        /* process name */\n+  const char *idp = IDENTIFIER_POINTER (name);        /* process name */\n   char *tmpname = xmalloc (strlen (idp) + strlen (data_name) + 1);\n \n   sprintf (tmpname, data_name, idp);\n@@ -129,7 +140,7 @@ static tree\n get_process_wrapper_name (name)\n     tree name;\n {\n-  char *idp = IDENTIFIER_POINTER (name);\n+  const char *idp = IDENTIFIER_POINTER (name);\n   char *tmpname = xmalloc (strlen (idp) + strlen (wrapper_name) + 1);\n     \n   sprintf (tmpname, wrapper_name, idp);\n@@ -182,7 +193,8 @@ generate_tasking_code_variable (name, tasking_code_ptr, quasi_flag)\n  * be initialized.  The other module will do that.  This is just \n  * for BUFFERs and EVENTs.\n  */\n-tree\n+#if 0\n+static tree\n decl_tasking_code_variable (name, tasking_code_ptr, quasi_flag)\n      tree name, *tasking_code_ptr;\n      int  quasi_flag;\n@@ -223,6 +235,7 @@ decl_tasking_code_variable (name, tasking_code_ptr, quasi_flag)\n \t\t\t\t     *tasking_code_ptr));\n   return decl;\n }\n+#endif\n \f\n /*\n  * Transmute a process parameter list into an argument structure \n@@ -492,11 +505,13 @@ build_process_wrapper (plabel, processdata)\n     property\"\n  */\n \n-void\n+#if 0\n+static void\n validate_process_parameters (parms)\n      tree parms ATTRIBUTE_UNUSED;\n {\n }\n+#endif\n \f\n /*\n  * build the tree for a start process action.  Loop through the\n@@ -612,15 +627,15 @@ build_start_process (process_name, copynum,\n   \n       if (valtail != 0 && TREE_VALUE (valtail) != void_type_node)\n \t{\n-\t  char *errstr = \"too many arguments to process\";\n+\t  const char *errstr = \"too many arguments to process\";\n \t  if (process_name)\n \t    error (\"%s `%s'\", errstr, IDENTIFIER_POINTER (process_name));\n \t  else\n \t    error (errstr);\n \t}\n       else if (typetail != 0 && TREE_VALUE (typetail) != void_type_node)\n \t{\n-\t  char *errstr = \"too few arguments to process\";\n+\t  const char *errstr = \"too few arguments to process\";\n \t  if (process_name)\n \t    error (\"%s `%s'\", errstr, IDENTIFIER_POINTER (process_name));\n \t  else\n@@ -926,7 +941,7 @@ void\n add_taskstuff_to_list (code_decl, stufftype, stuffnumber,\n \t\t       proc_decl, entry)\n      tree code_decl;\n-     char *stufftype;\n+     const char *stufftype;\n      tree stuffnumber, proc_decl, entry;\n {\n   if (pass == 1)\n@@ -1101,7 +1116,7 @@ build_queue_length (buf_ev)\n   if (CH_IS_BUFFER_MODE (TREE_TYPE (buf_ev)) ||\n       CH_IS_EVENT_MODE (TREE_TYPE (buf_ev)))\n     {\n-      char *field_name;\n+      const char *field_name;\n       tree  arg1, arg2;\n \n       if (CH_IS_EVENT_MODE (TREE_TYPE (buf_ev)))\n@@ -1217,7 +1232,7 @@ build_instance_type ()\n  *\n #endif\n \n-void\n+static void\n build_tasking_message_type ()\n {\n   tree type_name;"}, {"sha": "6d4f9bdf06c7527e1e5db4a478c634902e79e6d1", "filename": "gcc/ch/tree.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Ftree.c?ref=31029ad7e8b763f6404f794ef3af6aeefcfb6f48", "patch": "@@ -33,6 +33,8 @@ extern struct obstack permanent_obstack;\n /* This is special sentinel used to communicate from build_string_type\n    to layout_chill_range_type for the index range of a string. */\n tree string_index_type_dummy;\n+\n+static tree make_powerset_type\t\t\t\tPROTO ((tree));\n \f\n /* Build a chill string type.\n    For a character string, ELT_TYPE==char_type_node; \n@@ -88,7 +90,7 @@ build_string_type (elt_type, length)\n   return t;\n }\n \f\n-tree\n+static tree\n make_powerset_type (domain)\n      tree domain;\n {\n@@ -156,7 +158,7 @@ build_bitstring_type (size_in_bits)\n \n tree\n get_identifier3 (part1, part2, part3)\n-     char *part1, *part2, *part3;\n+     const char *part1, *part2, *part3;\n {\n   char *buf = (char*)\n     alloca (strlen(part1) + strlen(part2) + strlen(part3) + 1);\n@@ -173,7 +175,7 @@ build_alias_decl (old_prefix, new_prefix, postfix)\n {\n   tree decl = make_node (ALIAS_DECL);\n \n-  char *postfix_pointer = IDENTIFIER_POINTER (postfix);\n+  const char *postfix_pointer = IDENTIFIER_POINTER (postfix);\n   int postfix_length = IDENTIFIER_LENGTH (postfix);\n   int old_length = old_prefix ? IDENTIFIER_LENGTH(old_prefix) : 0;\n   int new_length = new_prefix ? IDENTIFIER_LENGTH(new_prefix) : 0;\n@@ -234,7 +236,7 @@ tree\n decl_check_rename (alias, old_name)\n      tree alias, old_name;\n {\n-  char *old_pointer = IDENTIFIER_POINTER (old_name);\n+  const char *old_pointer = IDENTIFIER_POINTER (old_name);\n   int old_len = IDENTIFIER_LENGTH (old_name);\n   if (DECL_OLD_PREFIX (alias))\n     {"}, {"sha": "f4d8d80d9710620918fa8f84d8b6ce66ef650725", "filename": "gcc/ch/typeck.c", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31029ad7e8b763f6404f794ef3af6aeefcfb6f48/gcc%2Fch%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Ftypeck.c?ref=31029ad7e8b763f6404f794ef3af6aeefcfb6f48", "patch": "@@ -56,8 +56,15 @@ extern tree unsigned_intTI_type_node;\n \n /* forward declarations */\n static int chill_l_equivalent PROTO((tree, tree, struct mode_chain*));\n-static tree extract_constant_from_buffer PROTO((tree, unsigned char *, int));\n+static tree extract_constant_from_buffer PROTO((tree, const unsigned char *, int));\n static int expand_constant_to_buffer PROTO((tree, unsigned char *, int));\n+static tree build_empty_string PROTO((tree));\n+static tree make_chill_pointer_type PROTO((tree, enum tree_code));\n+static tree make_chill_range_type PROTO((tree, tree, tree));\n+static void apply_chill_array_layout PROTO((tree));\n+static int field_decl_cmp PROTO((tree *, tree*));\n+static tree make_chill_struct_type PROTO((tree));\n+static int apply_chill_field_layout PROTO((tree, int *));\n \f\n /*\n  * This function checks an array access.\n@@ -72,7 +79,7 @@ static int expand_constant_to_buffer PROTO((tree, unsigned char *, int));\n tree\n valid_array_index_p (array, idx, error_message, is_varying_lhs)\n      tree array, idx;\n-     char *error_message;\n+     const char *error_message;\n      int is_varying_lhs;\n {\n   tree cond, low_limit, high_cond, atype, domain;\n@@ -854,7 +861,7 @@ expand_constant_to_buffer (value, buffer, buf_size)\n static tree\n extract_constant_from_buffer (type, buffer, buf_size)\n      tree type;\n-     unsigned char *buffer;\n+     const unsigned char *buffer;\n      int buf_size;\n {\n   tree value;\n@@ -1287,7 +1294,7 @@ tree\n chill_expand_tuple (type, constructor)\n      tree type, constructor;\n {\n-  char *name;\n+  const char *name;\n   tree nonreft = type;\n \n   if (TYPE_NAME (type) != NULL_TREE)\n@@ -2407,7 +2414,7 @@ build_chill_modify_expr (lhs, rhs)\n /* Construct, lay out and return the type of pointers to TO_TYPE.\n    If such a type has already been constructed, reuse it.  */\n \n-tree\n+static tree\n make_chill_pointer_type (to_type, code)\n      tree to_type;\n      enum tree_code code;  /* POINTER_TYPE or REFERENCE_TYPE */\n@@ -2494,7 +2501,7 @@ build_chill_reference_type (to_type)\n   return t;\n }\n \f\n-tree\n+static tree\n make_chill_range_type (type, lowval, highval)\n      tree type, lowval, highval;\n {\n@@ -2994,7 +3001,7 @@ field_decl_cmp (x, y)\n   return (long)DECL_NAME (*x) - (long)DECL_NAME (*y);\n }\n \n-tree\n+static tree\n make_chill_struct_type (fieldlist)\n      tree fieldlist;\n {\n@@ -3302,7 +3309,8 @@ layout_chill_struct_type (t)\n \tfor (x = fieldlist; x; x = TREE_CHAIN (x))\n \t  field_array[len++] = x;\n \n-\tqsort (field_array, len, sizeof (tree), field_decl_cmp);\n+\tqsort (field_array, len, sizeof (tree),\n+\t       (int (*) PROTO ((const void *, const void *))) field_decl_cmp);\n       }\n   }\n "}]}