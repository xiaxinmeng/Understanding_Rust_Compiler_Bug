{"sha": "02a57c739e5928a65e99261c692203ddd52d7ec7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJhNTdjNzM5ZTU5MjhhNjVlOTkyNjFjNjkyMjAzZGRkNTJkN2VjNw==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2003-03-22T18:53:08Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2003-03-22T18:53:08Z"}, "message": "pa.c (output_cbranch, [...]): Output nop for conditional branch to the following instruction.\n\n\t* pa.c (output_cbranch, output_bb, output_bvb): Output nop for\n\tconditional branch to the following instruction.  Use next_real_insn\n\tinstead of next_active_insn.\n\t(output_dbra, output_movb, jump_in_call_delay): Use next_real_insn\n\tinstead of next_active_insn.\n\nFrom-SVN: r64723", "tree": {"sha": "7da17decc38c69fa495d2096189f3f5798ab989c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7da17decc38c69fa495d2096189f3f5798ab989c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02a57c739e5928a65e99261c692203ddd52d7ec7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02a57c739e5928a65e99261c692203ddd52d7ec7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02a57c739e5928a65e99261c692203ddd52d7ec7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02a57c739e5928a65e99261c692203ddd52d7ec7/comments", "author": null, "committer": null, "parents": [{"sha": "97c6f7ad7363ba6842373bbf8e14f9a34b5db413", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97c6f7ad7363ba6842373bbf8e14f9a34b5db413", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97c6f7ad7363ba6842373bbf8e14f9a34b5db413"}], "stats": {"total": 39, "additions": 26, "deletions": 13}, "files": [{"sha": "c426f5102d492703b401e6484addb44ff1ee8af6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a57c739e5928a65e99261c692203ddd52d7ec7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a57c739e5928a65e99261c692203ddd52d7ec7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=02a57c739e5928a65e99261c692203ddd52d7ec7", "patch": "@@ -1,3 +1,11 @@\n+2003-03-22  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\t* pa.c (output_cbranch, output_bb, output_bvb): Output nop for\n+\tconditional branch to the following instruction.  Use next_real_insn\n+\tinstead of next_active_insn.\n+\t(output_dbra, output_movb, jump_in_call_delay): Use next_real_insn\n+\tinstead of next_active_insn.\n+\n 2003-03-22  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/s390/s390.md (\"movti\", \"*movdi_31\", \"*movdf_31\"): Use 'o' instead"}, {"sha": "2a79f85155630be1f5a4acd8029b1bcbfcb72f6c", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a57c739e5928a65e99261c692203ddd52d7ec7/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a57c739e5928a65e99261c692203ddd52d7ec7/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=02a57c739e5928a65e99261c692203ddd52d7ec7", "patch": "@@ -5549,13 +5549,18 @@ output_cbranch (operands, nullify, length, negated, insn)\n   int useskip = 0;\n   rtx xoperands[5];\n \n-  /* A conditional branch to the following instruction (eg the delay slot) is\n-     asking for a disaster.  This can happen when not optimizing.\n+  /* A conditional branch to the following instruction (eg the delay slot)\n+     is asking for a disaster.  This can happen when not optimizing and\n+     when jump optimization fails.\n \n-     In such cases it is safe to emit nothing.  */\n+     While it usually safe to emit nothing, this can fail if the preceding\n+     instruction is a nullified branch with an empty delay slot and the\n+     same branch target as this branch.  We could check for this but\n+     jump optimization should eliminate these jumps.  It is always\n+     safe to emit a nop.  */\n \n-  if (next_active_insn (JUMP_LABEL (insn)) == next_active_insn (insn))\n-    return \"\";\n+  if (next_real_insn (JUMP_LABEL (insn)) == next_real_insn (insn))\n+    return \"nop\";\n \n   /* If this is a long branch with its delay slot unfilled, set `nullify'\n      as it can nullify the delay slot and save a nop.  */\n@@ -5851,8 +5856,8 @@ output_bb (operands, nullify, length, negated, insn, which)\n      is only used when optimizing; jump optimization should eliminate the\n      jump.  But be prepared just in case.  */\n \n-  if (next_active_insn (JUMP_LABEL (insn)) == next_active_insn (insn))\n-    return \"\";\n+  if (next_real_insn (JUMP_LABEL (insn)) == next_real_insn (insn))\n+    return \"nop\";\n \n   /* If this is a long branch with its delay slot unfilled, set `nullify'\n      as it can nullify the delay slot and save a nop.  */\n@@ -5999,8 +6004,8 @@ output_bvb (operands, nullify, length, negated, insn, which)\n      is only used when optimizing; jump optimization should eliminate the\n      jump.  But be prepared just in case.  */\n \n-  if (next_active_insn (JUMP_LABEL (insn)) == next_active_insn (insn))\n-    return \"\";\n+  if (next_real_insn (JUMP_LABEL (insn)) == next_real_insn (insn))\n+    return \"nop\";\n \n   /* If this is a long branch with its delay slot unfilled, set `nullify'\n      as it can nullify the delay slot and save a nop.  */\n@@ -6140,7 +6145,7 @@ output_dbra (operands, insn, which_alternative)\n   /* A conditional branch to the following instruction (eg the delay slot) is\n      asking for a disaster.  Be prepared!  */\n \n-  if (next_active_insn (JUMP_LABEL (insn)) == next_active_insn (insn))\n+  if (next_real_insn (JUMP_LABEL (insn)) == next_real_insn (insn))\n     {\n       if (which_alternative == 0)\n \treturn \"ldo %1(%0),%0\";\n@@ -6247,7 +6252,7 @@ output_movb (operands, insn, which_alternative, reverse_comparison)\n   /* A conditional branch to the following instruction (eg the delay slot) is\n      asking for a disaster.  Be prepared!  */\n \n-  if (next_active_insn (JUMP_LABEL (insn)) == next_active_insn (insn))\n+  if (next_real_insn (JUMP_LABEL (insn)) == next_real_insn (insn))\n     {\n       if (which_alternative == 0)\n \treturn \"copy %1,%0\";\n@@ -7585,9 +7590,9 @@ jump_in_call_delay (insn)\n \n   if (PREV_INSN (insn)\n       && PREV_INSN (PREV_INSN (insn))\n-      && GET_CODE (next_active_insn (PREV_INSN (PREV_INSN (insn)))) == INSN)\n+      && GET_CODE (next_real_insn (PREV_INSN (PREV_INSN (insn)))) == INSN)\n     {\n-      rtx test_insn = next_active_insn (PREV_INSN (PREV_INSN (insn)));\n+      rtx test_insn = next_real_insn (PREV_INSN (PREV_INSN (insn)));\n \n       return (GET_CODE (PATTERN (test_insn)) == SEQUENCE\n \t      && XVECEXP (PATTERN (test_insn), 0, 1) == insn);"}]}