{"sha": "3c99493bf39a7fef9213e6f5af94b78bb15fcfdc", "node_id": "C_kwDOANBUbNoAKDNjOTk0OTNiZjM5YTdmZWY5MjEzZTZmNWFmOTRiNzhiYjE1ZmNmZGM", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2023-01-19T04:09:15Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2023-01-19T04:09:15Z"}, "message": "[PR106746] drop cselib addr lookup in debug insn mem\n\nThe testcase used to get scheduled differently depending on the\npresence of debug insns with MEMs.  It's not clear to me why those\nMEMs affected scheduling, but the cselib pre-canonicalization of the\nMEM address is not used at all when analyzing debug insns, so the\nmemory allocation and lookup are pure waste.  Somehow, avoiding that\nwaste fixes the problem, or makes it go latent.\n\n\nfor  gcc/ChangeLog\n\n\tPR debug/106746\n\t* sched-deps.cc (sched_analyze_2): Skip cselib address lookup\n\twithin debug insns.\n\nfor  gcc/testsuite/ChangeLog\n\n\tPR debug/106746\n\t* gcc.target/i386/pr106746.c: New.", "tree": {"sha": "8b1d0fb468fa1bb49b22e43c2df1bd6070bd3b52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b1d0fb468fa1bb49b22e43c2df1bd6070bd3b52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c99493bf39a7fef9213e6f5af94b78bb15fcfdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c99493bf39a7fef9213e6f5af94b78bb15fcfdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c99493bf39a7fef9213e6f5af94b78bb15fcfdc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c99493bf39a7fef9213e6f5af94b78bb15fcfdc/comments", "author": null, "committer": null, "parents": [{"sha": "9f98cfa51b416a2b40884b7d5202eb4daa801ec0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f98cfa51b416a2b40884b7d5202eb4daa801ec0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f98cfa51b416a2b40884b7d5202eb4daa801ec0"}], "stats": {"total": 65, "additions": 47, "deletions": 18}, "files": [{"sha": "a9214f674329aeb1cd0030a46a0769db82aee7d3", "filename": "gcc/sched-deps.cc", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c99493bf39a7fef9213e6f5af94b78bb15fcfdc/gcc%2Fsched-deps.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c99493bf39a7fef9213e6f5af94b78bb15fcfdc/gcc%2Fsched-deps.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.cc?ref=3c99493bf39a7fef9213e6f5af94b78bb15fcfdc", "patch": "@@ -2605,26 +2605,26 @@ sched_analyze_2 (class deps_desc *deps, rtx x, rtx_insn *insn)\n \n     case MEM:\n       {\n-\t/* Reading memory.  */\n-\trtx_insn_list *u;\n-\trtx_insn_list *pending;\n-\trtx_expr_list *pending_mem;\n-\trtx t = x;\n-\n-\tif (sched_deps_info->use_cselib)\n-\t  {\n-\t    machine_mode address_mode = get_address_mode (t);\n-\n-\t    t = shallow_copy_rtx (t);\n-\t    cselib_lookup_from_insn (XEXP (t, 0), address_mode, 1,\n-\t\t\t\t     GET_MODE (t), insn);\n-\t    XEXP (t, 0)\n-\t      = cselib_subst_to_values_from_insn (XEXP (t, 0), GET_MODE (t),\n-\t\t\t\t\t\t  insn);\n-\t  }\n-\n \tif (!DEBUG_INSN_P (insn))\n \t  {\n+\t    /* Reading memory.  */\n+\t    rtx_insn_list *u;\n+\t    rtx_insn_list *pending;\n+\t    rtx_expr_list *pending_mem;\n+\t    rtx t = x;\n+\n+\t    if (sched_deps_info->use_cselib)\n+\t      {\n+\t\tmachine_mode address_mode = get_address_mode (t);\n+\n+\t\tt = shallow_copy_rtx (t);\n+\t\tcselib_lookup_from_insn (XEXP (t, 0), address_mode, 1,\n+\t\t\t\t\t GET_MODE (t), insn);\n+\t\tXEXP (t, 0)\n+\t\t  = cselib_subst_to_values_from_insn (XEXP (t, 0), GET_MODE (t),\n+\t\t\t\t\t\t      insn);\n+\t      }\n+\n \t    t = canon_rtx (t);\n \t    pending = deps->pending_read_insns;\n \t    pending_mem = deps->pending_read_mems;"}, {"sha": "14f7dab71d691cc87f7937025bc9ffef2ec15091", "filename": "gcc/testsuite/gcc.target/i386/pr106746.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c99493bf39a7fef9213e6f5af94b78bb15fcfdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106746.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c99493bf39a7fef9213e6f5af94b78bb15fcfdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106746.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106746.c?ref=3c99493bf39a7fef9213e6f5af94b78bb15fcfdc", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fsched2-use-superblocks -fcompare-debug -Wno-psabi\" } */\n+\n+typedef char __attribute__((__vector_size__ (64))) U;\n+typedef short __attribute__((__vector_size__ (64))) V;\n+typedef int __attribute__((__vector_size__ (64))) W;\n+\n+char c;\n+U a;\n+U *r;\n+W foo0_v512u32_0;\n+\n+void\n+foo (W)\n+{\n+  U u;\n+  V v;\n+  W w = __builtin_shuffle (foo0_v512u32_0, foo0_v512u32_0);\n+  u =\n+    __builtin_shufflevector (a, u, 3, 0, 4, 9, 9, 6, 7, 8, 5,\n+\t\t\t     0, 6, 1, 8, 1, 2, 8, 6,\n+\t\t\t     1, 8, 4, 9, 3, 8, 4, 6, 0, 9, 0, 1, 8, 2, 3, 3,\n+\t\t\t     0, 4, 9, 9, 6, 7, 8, 5,\n+\t\t\t     0, 6, 1, 8, 1, 2, 8, 6,\n+\t\t\t     1, 8, 4, 9, 3, 8, 4, 6, 0, 9, 0, 1, 8, 2, 3);\n+  v *= c;\n+  w &= c;\n+  *r = (U) v + (U) w;\n+}"}]}