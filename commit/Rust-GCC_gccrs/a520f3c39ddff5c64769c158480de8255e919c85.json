{"sha": "a520f3c39ddff5c64769c158480de8255e919c85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUyMGYzYzM5ZGRmZjVjNjQ3NjljMTU4NDgwZGU4MjU1ZTkxOWM4NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-10-13T16:08:04Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-10-13T16:08:04Z"}, "message": "sse.md (reduc_umin_v8hi): New pattern.\n\n\t* config/i386/sse.md (reduc_umin_v8hi): New pattern.\n\t* config/i386/i386.c (ix86_build_const_vector): Handle\n\talso V32QI, V16QI, V16HI and V8HI modes.\n\t(emit_reduc_half): New function.\n\t(ix86_expand_reduc): Use phminposuw insn for V8HImode UMIN.\n\tUse emit_reduc_half helper function.\n\n\t* gcc.target/i386/sse4_1-phminposuw-2.c: New test.\n\t* gcc.target/i386/sse4_1-phminposuw-3.c: New test.\n\t* gcc.target/i386/avx-vphminposuw-2.c: New test.\n\t* gcc.target/i386/avx-vphminposuw-3.c: New test.\n\nFrom-SVN: r179929", "tree": {"sha": "4294158cd9016ef9a0d5e6b259c6ef0c407cd9a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4294158cd9016ef9a0d5e6b259c6ef0c407cd9a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a520f3c39ddff5c64769c158480de8255e919c85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a520f3c39ddff5c64769c158480de8255e919c85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a520f3c39ddff5c64769c158480de8255e919c85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a520f3c39ddff5c64769c158480de8255e919c85/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "35f5b1c1b98f5f7f6b8882614d5b37fe51c845f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35f5b1c1b98f5f7f6b8882614d5b37fe51c845f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35f5b1c1b98f5f7f6b8882614d5b37fe51c845f6"}], "stats": {"total": 254, "additions": 205, "deletions": 49}, "files": [{"sha": "c5567d16cecda5e2053adde492b454de20f27ae6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a520f3c39ddff5c64769c158480de8255e919c85/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a520f3c39ddff5c64769c158480de8255e919c85/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a520f3c39ddff5c64769c158480de8255e919c85", "patch": "@@ -1,3 +1,12 @@\n+2011-10-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/sse.md (reduc_umin_v8hi): New pattern.\n+\t* config/i386/i386.c (ix86_build_const_vector): Handle\n+\talso V32QI, V16QI, V16HI and V8HI modes.\n+\t(emit_reduc_half): New function.\n+\t(ix86_expand_reduc): Use phminposuw insn for V8HImode UMIN.\n+\tUse emit_reduc_half helper function.\n+\n 2011-10-13   Lawrence Crowl  <crowl@google.com>\n \t     Diego Novillo  <dnovillo@google.com>\n "}, {"sha": "a81292b88c8f233893ee3caf22119ee93c34aeec", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 81, "deletions": 49, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a520f3c39ddff5c64769c158480de8255e919c85/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a520f3c39ddff5c64769c158480de8255e919c85/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a520f3c39ddff5c64769c158480de8255e919c85", "patch": "@@ -17008,6 +17008,10 @@ ix86_build_const_vector (enum machine_mode mode, bool vect, rtx value)\n \n   switch (mode)\n     {\n+    case V32QImode:\n+    case V16QImode:\n+    case V16HImode:\n+    case V8HImode:\n     case V8SImode:\n     case V4SImode:\n     case V4DImode:\n@@ -33250,72 +33254,100 @@ ix86_expand_vector_extract (bool mmx_ok, rtx target, rtx vec, int elt)\n     }\n }\n \n-/* Expand a vector reduction.  FN is the binary pattern to reduce;\n-   DEST is the destination; IN is the input vector.  */\n+/* Generate code to copy vector bits i / 2 ... i - 1 from vector SRC\n+   to bits 0 ... i / 2 - 1 of vector DEST, which has the same mode.\n+   The upper bits of DEST are undefined, though they shouldn't cause\n+   exceptions (some bits from src or all zeros are ok).  */\n \n-void\n-ix86_expand_reduc (rtx (*fn) (rtx, rtx, rtx), rtx dest, rtx in)\n+static void\n+emit_reduc_half (rtx dest, rtx src, int i)\n {\n-  rtx tmp1, tmp2, tmp3, tmp4, tmp5;\n-  enum machine_mode mode = GET_MODE (in);\n-  int i;\n-\n-  tmp1 = gen_reg_rtx (mode);\n-  tmp2 = gen_reg_rtx (mode);\n-  tmp3 = gen_reg_rtx (mode);\n-\n-  switch (mode)\n+  rtx tem;\n+  switch (GET_MODE (src))\n     {\n     case V4SFmode:\n-      emit_insn (gen_sse_movhlps (tmp1, in, in));\n-      emit_insn (fn (tmp2, tmp1, in));\n-      emit_insn (gen_sse_shufps_v4sf (tmp3, tmp2, tmp2,\n-\t\t\t\t      const1_rtx, const1_rtx,\n-\t\t\t\t      GEN_INT (1+4), GEN_INT (1+4)));\n+      if (i == 128)\n+\ttem = gen_sse_movhlps (dest, src, src);\n+      else\n+\ttem = gen_sse_shufps_v4sf (dest, src, src, const1_rtx, const1_rtx,\n+\t\t\t\t   GEN_INT (1 + 4), GEN_INT (1 + 4));\n+      break;\n+    case V2DFmode:\n+      tem = gen_vec_interleave_highv2df (dest, src, src);\n+      break;\n+    case V16QImode:\n+    case V8HImode:\n+    case V4SImode:\n+    case V2DImode:\n+      tem = gen_sse2_lshrv1ti3 (gen_lowpart (V1TImode, dest),\n+\t\t\t\tgen_lowpart (V1TImode, src),\n+\t\t\t\tGEN_INT (i / 2));\n       break;\n     case V8SFmode:\n-      tmp4 = gen_reg_rtx (mode);\n-      tmp5 = gen_reg_rtx (mode);\n-      emit_insn (gen_avx_vperm2f128v8sf3 (tmp4, in, in, const1_rtx));\n-      emit_insn (fn (tmp5, tmp4, in));\n-      emit_insn (gen_avx_shufps256 (tmp1, tmp5, tmp5, GEN_INT (2+12)));\n-      emit_insn (fn (tmp2, tmp1, tmp5));\n-      emit_insn (gen_avx_shufps256 (tmp3, tmp2, tmp2, const1_rtx));\n+      if (i == 256)\n+\ttem = gen_avx_vperm2f128v8sf3 (dest, src, src, const1_rtx);\n+      else\n+\ttem = gen_avx_shufps256 (dest, src, src,\n+\t\t\t\t GEN_INT (i == 128 ? 2 + (3 << 2) : 1));\n       break;\n     case V4DFmode:\n-      emit_insn (gen_avx_vperm2f128v4df3 (tmp1, in, in, const1_rtx));\n-      emit_insn (fn (tmp2, tmp1, in));\n-      emit_insn (gen_avx_shufpd256 (tmp3, tmp2, tmp2, const1_rtx));\n+      if (i == 256)\n+\ttem = gen_avx_vperm2f128v4df3 (dest, src, src, const1_rtx);\n+      else\n+\ttem = gen_avx_shufpd256 (dest, src, src, const1_rtx);\n       break;\n     case V32QImode:\n     case V16HImode:\n     case V8SImode:\n     case V4DImode:\n-      emit_insn (gen_avx2_permv2ti (gen_lowpart (V4DImode, tmp1),\n-\t\t\t\t    gen_lowpart (V4DImode, in),\n-\t\t\t\t    gen_lowpart (V4DImode, in),\n-\t\t\t\t    const1_rtx));\n-      tmp4 = in;\n-      tmp5 = tmp1;\n-      for (i = 64; i >= GET_MODE_BITSIZE (GET_MODE_INNER (mode)); i >>= 1)\n-\t{\n-\t  if (i != 64)\n-\t    {\n-\t      tmp2 = gen_reg_rtx (mode);\n-\t      tmp3 = gen_reg_rtx (mode);\n-\t    }\n-\t  emit_insn (fn (tmp2, tmp4, tmp5));\n-\t  emit_insn (gen_avx2_lshrv2ti3 (gen_lowpart (V2TImode, tmp3),\n-\t\t\t\t\t gen_lowpart (V2TImode, tmp2),\n-\t\t\t\t\t GEN_INT (i)));\n-\t  tmp4 = tmp2;\n-\t  tmp5 = tmp3;\n-\t}\n+      if (i == 256)\n+\ttem = gen_avx2_permv2ti (gen_lowpart (V4DImode, dest),\n+\t\t\t\t gen_lowpart (V4DImode, src),\n+\t\t\t\t gen_lowpart (V4DImode, src),\n+\t\t\t\t const1_rtx);\n+      else\n+\ttem = gen_avx2_lshrv2ti3 (gen_lowpart (V2TImode, dest),\n+\t\t\t\t  gen_lowpart (V2TImode, src),\n+\t\t\t\t  GEN_INT (i / 2));\n       break;\n     default:\n       gcc_unreachable ();\n     }\n-  emit_insn (fn (dest, tmp2, tmp3));\n+  emit_insn (tem);\n+}\n+\n+/* Expand a vector reduction.  FN is the binary pattern to reduce;\n+   DEST is the destination; IN is the input vector.  */\n+\n+void\n+ix86_expand_reduc (rtx (*fn) (rtx, rtx, rtx), rtx dest, rtx in)\n+{\n+  rtx half, dst, vec = in;\n+  enum machine_mode mode = GET_MODE (in);\n+  int i;\n+\n+  /* SSE4 has a special instruction for V8HImode UMIN reduction.  */\n+  if (TARGET_SSE4_1\n+      && mode == V8HImode\n+      && fn == gen_uminv8hi3)\n+    {\n+      emit_insn (gen_sse4_1_phminposuw (dest, in));\n+      return;\n+    }\n+\n+  for (i = GET_MODE_BITSIZE (mode);\n+       i > GET_MODE_BITSIZE (GET_MODE_INNER (mode));\n+       i >>= 1)\n+    {\n+      half = gen_reg_rtx (mode);\n+      emit_reduc_half (half, vec, i);\n+      if (i == GET_MODE_BITSIZE (GET_MODE_INNER (mode)) * 2)\n+\tdst = dest;\n+      else\n+\tdst = gen_reg_rtx (mode);\n+      emit_insn (fn (dst, half, vec));\n+      vec = dst;\n+    }\n }\n \f\n /* Target hook for scalar_mode_supported_p.  */"}, {"sha": "748a66c1c6a2ab2166038346eef6a34d83dab990", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a520f3c39ddff5c64769c158480de8255e919c85/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a520f3c39ddff5c64769c158480de8255e919c85/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=a520f3c39ddff5c64769c158480de8255e919c85", "patch": "@@ -1303,6 +1303,16 @@\n   DONE;\n })\n \n+(define_expand \"reduc_umin_v8hi\"\n+  [(umin:V8HI\n+     (match_operand:V8HI 0 \"register_operand\" \"\")\n+     (match_operand:V8HI 1 \"register_operand\" \"\"))]\n+  \"TARGET_SSE4_1\"\n+{\n+  ix86_expand_reduc (gen_uminv8hi3, operands[0], operands[1]);\n+  DONE;\n+})\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; Parallel floating point comparisons"}, {"sha": "9f06ab446fd5a9a1a5d935f94be6c980894c47da", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a520f3c39ddff5c64769c158480de8255e919c85/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a520f3c39ddff5c64769c158480de8255e919c85/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a520f3c39ddff5c64769c158480de8255e919c85", "patch": "@@ -1,3 +1,10 @@\n+2011-10-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.target/i386/sse4_1-phminposuw-2.c: New test.\n+\t* gcc.target/i386/sse4_1-phminposuw-3.c: New test.\n+\t* gcc.target/i386/avx-vphminposuw-2.c: New test.\n+\t* gcc.target/i386/avx-vphminposuw-3.c: New test.\n+\n 2011-10-13  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.target/i386/pr50712.c: Check ia32 instead of ilp32."}, {"sha": "3ae122c7e88f5bede3f1f226337f77e209b79f54", "filename": "gcc/testsuite/gcc.target/i386/avx-vphminposuw-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a520f3c39ddff5c64769c158480de8255e919c85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vphminposuw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a520f3c39ddff5c64769c158480de8255e919c85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vphminposuw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vphminposuw-2.c?ref=a520f3c39ddff5c64769c158480de8255e919c85", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O3 -mavx -mno-avx2\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse4_1-phminposuw-2.c\""}, {"sha": "4a37ba542ac57d95cfb08f8f186fe833bf87ee2d", "filename": "gcc/testsuite/gcc.target/i386/avx-vphminposuw-3.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a520f3c39ddff5c64769c158480de8255e919c85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vphminposuw-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a520f3c39ddff5c64769c158480de8255e919c85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vphminposuw-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vphminposuw-3.c?ref=a520f3c39ddff5c64769c158480de8255e919c85", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mavx -mno-avx2\" } */\n+\n+#include \"avx-vphminposuw-2.c\"\n+\n+/* { dg-final { scan-assembler \"vphminposuw\\[^\\n\\r\\]*xmm\" } } */"}, {"sha": "c9f9c1cdf34958997f9873ecdd9e2cb480c780cc", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-phminposuw-2.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a520f3c39ddff5c64769c158480de8255e919c85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-phminposuw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a520f3c39ddff5c64769c158480de8255e919c85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-phminposuw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-phminposuw-2.c?ref=a520f3c39ddff5c64769c158480de8255e919c85", "patch": "@@ -0,0 +1,78 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O3 -msse4.1 -mno-avx2\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+extern void abort (void);\n+\n+#define N 1024\n+short a[N], c, e;\n+unsigned short b[N], d, f;\n+\n+__attribute__((noinline)) short\n+vecsmax (void)\n+{\n+  int i;\n+  short r = -32768;\n+  for (i = 0; i < N; ++i)\n+    if (r < a[i]) r = a[i];\n+  return r;\n+}\n+\n+__attribute__((noinline)) unsigned short\n+vecumax (void)\n+{\n+  int i;\n+  unsigned short r = 0;\n+  for (i = 0; i < N; ++i)\n+    if (r < b[i]) r = b[i];\n+  return r;\n+}\n+\n+__attribute__((noinline)) short\n+vecsmin (void)\n+{\n+  int i;\n+  short r = 32767;\n+  for (i = 0; i < N; ++i)\n+    if (r > a[i]) r = a[i];\n+  return r;\n+}\n+\n+__attribute__((noinline)) unsigned short\n+vecumin (void)\n+{\n+  int i;\n+  unsigned short r = 65535;\n+  for (i = 0; i < N; ++i)\n+    if (r > b[i]) r = b[i];\n+  return r;\n+}\n+\n+static void\n+TEST (void)\n+{\n+  int i;\n+  for (i = 0; i < N; ++i)\n+    {\n+      a[i] = i - N / 2;\n+      b[i] = i + 32768 - N / 2;\n+    }\n+  a[N / 3] = N;\n+  a[2 * N / 3] = -N;\n+  b[N / 5] = 32768 + N;\n+  b[4 * N / 5] = 32768 - N;\n+  if (vecsmax () != N || vecsmin () != -N)\n+    abort ();\n+  if (vecumax () != 32768 + N || vecumin () != 32768 - N)\n+    abort ();\n+}"}, {"sha": "95c5f059d97c4537c95f99dbf5ddb225f5647b00", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-phminposuw-3.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a520f3c39ddff5c64769c158480de8255e919c85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-phminposuw-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a520f3c39ddff5c64769c158480de8255e919c85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-phminposuw-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-phminposuw-3.c?ref=a520f3c39ddff5c64769c158480de8255e919c85", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -msse4.1 -mno-avx2\" } */\n+\n+#include \"sse4_1-phminposuw-2.c\"\n+\n+/* { dg-final { scan-assembler \"phminposuw\\[^\\n\\r\\]*xmm\" } } */"}]}