{"sha": "335123531f234436288975eb80d3655756878d29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM1MTIzNTMxZjIzNDQzNjI4ODk3NWViODBkMzY1NTc1Njg3OGQyOQ==", "commit": {"author": {"name": "Chung-Lin Tang", "email": "cltang@gcc.gnu.org", "date": "2014-06-24T06:33:58Z"}, "committer": {"name": "Chung-Lin Tang", "email": "cltang@gcc.gnu.org", "date": "2014-06-24T06:33:58Z"}, "message": "[multiple changes]\n\n2014-06-24  Chung-Lin Tang  <cltang@codesourcery.com>\n\n\tPR tree-optimization/61554\n\t* tree-ssa-propagate.c: Include \"bitmap.h\".\n\t(substitute_and_fold_dom_walker): Add 'bitmap need_eh_cleanup' member,\n\tproperly update constructor/destructor.\n\t(substitute_and_fold_dom_walker::before_dom_children):\n\tRemove call to gimple_purge_dead_eh_edges, add bb->index to\n\tneed_eh_cleaup instead.\n\t(substitute_and_fold): Call gimple_purge_all_dead_eh_edges on\n\tneed_eh_cleanup.\n\ntestsuite/\n2014-06-24  Markus Trippelsdorf  <markus@trippelsdorf.de>\n\n\tPR tree-optimization/61554\n\t* g++.dg/torture/pr61554.C: New testcase.\n\nFrom-SVN: r211928", "tree": {"sha": "38ca9da17cc881a1bc24ece1cc2a23834dea889c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38ca9da17cc881a1bc24ece1cc2a23834dea889c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/335123531f234436288975eb80d3655756878d29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/335123531f234436288975eb80d3655756878d29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/335123531f234436288975eb80d3655756878d29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/335123531f234436288975eb80d3655756878d29/comments", "author": null, "committer": null, "parents": [{"sha": "0967188e42115c36e063bc76dab4e82d0bdf7738", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0967188e42115c36e063bc76dab4e82d0bdf7738", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0967188e42115c36e063bc76dab4e82d0bdf7738"}], "stats": {"total": 77, "additions": 75, "deletions": 2}, "files": [{"sha": "567c09a6ff0f9909f2de8731d009cb0602bf2417", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/335123531f234436288975eb80d3655756878d29/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/335123531f234436288975eb80d3655756878d29/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=335123531f234436288975eb80d3655756878d29", "patch": "@@ -1,3 +1,15 @@\n+2014-06-24  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\tPR tree-optimization/61554\n+\t* tree-ssa-propagate.c: Include \"bitmap.h\".\n+\t(substitute_and_fold_dom_walker): Add 'bitmap need_eh_cleanup' member,\n+\tproperly update constructor/destructor.\n+\t(substitute_and_fold_dom_walker::before_dom_children):\n+\tRemove call to gimple_purge_dead_eh_edges, add bb->index to\n+\tneed_eh_cleaup instead.\n+\t(substitute_and_fold): Call gimple_purge_all_dead_eh_edges on\n+\tneed_eh_cleanup.\n+\n 2014-06-23  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* varpool.c (dump_varpool_node): Dump used_by_single_function."}, {"sha": "e797c79ed540af4886e600a920e63c3663526f2b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/335123531f234436288975eb80d3655756878d29/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/335123531f234436288975eb80d3655756878d29/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=335123531f234436288975eb80d3655756878d29", "patch": "@@ -1,3 +1,8 @@\n+2014-06-24  Markus Trippelsdorf  <markus@trippelsdorf.de>\n+\n+\tPR tree-optimization/61554\n+\t* g++.dg/torture/pr61554.C: New testcase.\n+\n 2014-06-23  Max Ostapenko  <m.ostapenko@partner.samsung.com>\n \n \t* c-c++-common/asan/strlen-overflow-1.c: Change match patterns."}, {"sha": "6f609c8be09af753efb434f3f0efb98d112f4e3c", "filename": "gcc/testsuite/g++.dg/torture/pr61554.C", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/335123531f234436288975eb80d3655756878d29/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr61554.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/335123531f234436288975eb80d3655756878d29/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr61554.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr61554.C?ref=335123531f234436288975eb80d3655756878d29", "patch": "@@ -0,0 +1,46 @@\n+// { dg-do compile }\n+\n+struct A\n+{\n+  A ();\n+};\n+const unsigned long &min (const unsigned long &, const unsigned long &) {}\n+\n+template <typename _InputIterator1, typename _InputIterator2,\n+          typename _OutputIterator, typename _BinaryOperation>\n+void transform (_InputIterator1 p1, _InputIterator2, _OutputIterator,\n+                _BinaryOperation p4)\n+{\n+  for (; p1;)\n+    p4 (0, 0);\n+}\n+\n+class multi_array\n+{\n+public:\n+  multi_array (int &, int &);\n+  int &resize_ranges;\n+  int resize___trans_tmp_1;\n+  void m_fn1 ()\n+  {\n+    multi_array a (resize_ranges, this->m_fn2 ());\n+    const unsigned long &(*b)(const unsigned long &, const unsigned long &)\n+      = min;\n+    transform (&resize___trans_tmp_1, 0, 0, b);\n+    A c;\n+  }\n+  ~multi_array ()\n+  {\n+    for (int i; &base_;)\n+      ;\n+  }\n+  int base_;\n+  int &m_fn2 ();\n+};\n+\n+class B\n+{\n+  void m_fn3 (const int &, const int &);\n+  multi_array _bookingSnapshotBlock;\n+};\n+void B::m_fn3 (const int &, const int &) { _bookingSnapshotBlock.m_fn1 (); }"}, {"sha": "2e337e428c667db1a200729dcc7d13c843ca238b", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/335123531f234436288975eb80d3655756878d29/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/335123531f234436288975eb80d3655756878d29/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=335123531f234436288975eb80d3655756878d29", "patch": "@@ -29,6 +29,7 @@\n #include \"function.h\"\n #include \"gimple-pretty-print.h\"\n #include \"dumpfile.h\"\n+#include \"bitmap.h\"\n #include \"sbitmap.h\"\n #include \"tree-ssa-alias.h\"\n #include \"internal-fn.h\"\n@@ -1031,8 +1032,13 @@ class substitute_and_fold_dom_walker : public dom_walker\n       fold_fn (fold_fn_), do_dce (do_dce_), something_changed (false)\n     {\n       stmts_to_remove.create (0);\n+      need_eh_cleanup = BITMAP_ALLOC (NULL);\n+    }\n+    ~substitute_and_fold_dom_walker ()\n+    {\n+      stmts_to_remove.release ();\n+      BITMAP_FREE (need_eh_cleanup);\n     }\n-    ~substitute_and_fold_dom_walker () { stmts_to_remove.release (); }\n \n     virtual void before_dom_children (basic_block);\n     virtual void after_dom_children (basic_block) {}\n@@ -1042,6 +1048,7 @@ class substitute_and_fold_dom_walker : public dom_walker\n     bool do_dce;\n     bool something_changed;\n     vec<gimple> stmts_to_remove;\n+    bitmap need_eh_cleanup;\n };\n \n void\n@@ -1144,7 +1151,7 @@ substitute_and_fold_dom_walker::before_dom_children (basic_block bb)\n \t  /* If we cleaned up EH information from the statement,\n \t     remove EH edges.  */\n \t  if (maybe_clean_or_replace_eh_stmt (old_stmt, stmt))\n-\t    gimple_purge_dead_eh_edges (bb);\n+\t    bitmap_set_bit (need_eh_cleanup, bb->index);\n \n \t  if (is_gimple_assign (stmt)\n \t      && (get_gimple_rhs_class (gimple_assign_rhs_code (stmt))\n@@ -1235,6 +1242,9 @@ substitute_and_fold (ssa_prop_get_value_fn get_value_fn,\n \t}\n     }\n \n+  if (!bitmap_empty_p (walker.need_eh_cleanup))\n+    gimple_purge_all_dead_eh_edges (walker.need_eh_cleanup);\n+\n   statistics_counter_event (cfun, \"Constants propagated\",\n \t\t\t    prop_stats.num_const_prop);\n   statistics_counter_event (cfun, \"Copies propagated\","}]}