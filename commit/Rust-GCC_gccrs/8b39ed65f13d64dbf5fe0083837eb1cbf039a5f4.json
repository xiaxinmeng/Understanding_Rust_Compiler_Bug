{"sha": "8b39ed65f13d64dbf5fe0083837eb1cbf039a5f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGIzOWVkNjVmMTNkNjRkYmY1ZmUwMDgzODM3ZWIxY2JmMDM5YTVmNA==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1994-01-03T21:59:04Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1994-01-03T21:59:04Z"}, "message": "(build_binary_op, case *_DIV_EXPR): Use same shorten\ncondition as for TRUNC_MOD_EXPR.\n\nFrom-SVN: r6353", "tree": {"sha": "d0e525f2fb27f91e0d80d35d569661ba38170f28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0e525f2fb27f91e0d80d35d569661ba38170f28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b39ed65f13d64dbf5fe0083837eb1cbf039a5f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b39ed65f13d64dbf5fe0083837eb1cbf039a5f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b39ed65f13d64dbf5fe0083837eb1cbf039a5f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b39ed65f13d64dbf5fe0083837eb1cbf039a5f4/comments", "author": null, "committer": null, "parents": [{"sha": "61f275ffe786a4003baf23a4dae8b044a59ea8fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61f275ffe786a4003baf23a4dae8b044a59ea8fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61f275ffe786a4003baf23a4dae8b044a59ea8fd"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "b952828cbe65b14f5697300dda21cbb2d0a76e85", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b39ed65f13d64dbf5fe0083837eb1cbf039a5f4/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b39ed65f13d64dbf5fe0083837eb1cbf039a5f4/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=8b39ed65f13d64dbf5fe0083837eb1cbf039a5f4", "patch": "@@ -1940,9 +1940,17 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \t  if (!(code0 == INTEGER_TYPE && code1 == INTEGER_TYPE))\n \t    resultcode = RDIV_EXPR;\n \t  else\n-\t    /* When dividing two signed integers, you have to promote to int.\n-\t       E.g. (short) -32768 / (short) -1 doesn't fit in a short.  */\n-\t    shorten = TREE_UNSIGNED (orig_op0);\n+\t    {\n+\t      /* Although it would be tempting to shorten always here, that\n+\t\t loses on some targets, since the modulo instruction is\n+\t\t undefined if the quotient can't be represented in the\n+\t\t computation mode.  We shorten only if unsigned or if\n+\t\t dividing by something we know != -1.  */\n+\t      shorten = (TREE_UNSIGNED (orig_op0)\n+\t\t\t || (TREE_CODE (op1) == INTEGER_CST\n+\t\t\t     && (TREE_INT_CST_LOW (op1) != -1\n+\t\t\t\t || TREE_INT_CST_HIGH (op1) != -1)));\n+\t    }\n \t  common = 1;\n \t}\n       break;"}]}