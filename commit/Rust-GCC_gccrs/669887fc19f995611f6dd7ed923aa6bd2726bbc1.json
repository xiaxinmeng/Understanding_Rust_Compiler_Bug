{"sha": "669887fc19f995611f6dd7ed923aa6bd2726bbc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY5ODg3ZmMxOWY5OTU2MTFmNmRkN2VkOTIzYWE2YmQyNzI2YmJjMQ==", "commit": {"author": {"name": "Duncan Sands", "email": "baldrick@free.fr", "date": "2010-02-22T14:18:10Z"}, "committer": {"name": "Duncan Sands", "email": "baldrick@gcc.gnu.org", "date": "2010-02-22T14:18:10Z"}, "message": "If a pass occurs in several pass lists...\n\nIf a pass occurs in several pass lists, like pass_cleanup_eh which occurs in\nboth all_small_ipa_passes and all_passes, make sure all instances of it are\nconsidered for replacement/insertion when ref_pass_instance_number is zero,\nnot just the instance in the first pass list.\n\nFrom-SVN: r156961", "tree": {"sha": "069106f741da0cb8952d28b2c2cd0ec8010b6fd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/069106f741da0cb8952d28b2c2cd0ec8010b6fd1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/669887fc19f995611f6dd7ed923aa6bd2726bbc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/669887fc19f995611f6dd7ed923aa6bd2726bbc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/669887fc19f995611f6dd7ed923aa6bd2726bbc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/669887fc19f995611f6dd7ed923aa6bd2726bbc1/comments", "author": {"login": "CunningBaldrick", "id": 1713707, "node_id": "MDQ6VXNlcjE3MTM3MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/1713707?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CunningBaldrick", "html_url": "https://github.com/CunningBaldrick", "followers_url": "https://api.github.com/users/CunningBaldrick/followers", "following_url": "https://api.github.com/users/CunningBaldrick/following{/other_user}", "gists_url": "https://api.github.com/users/CunningBaldrick/gists{/gist_id}", "starred_url": "https://api.github.com/users/CunningBaldrick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CunningBaldrick/subscriptions", "organizations_url": "https://api.github.com/users/CunningBaldrick/orgs", "repos_url": "https://api.github.com/users/CunningBaldrick/repos", "events_url": "https://api.github.com/users/CunningBaldrick/events{/privacy}", "received_events_url": "https://api.github.com/users/CunningBaldrick/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9efc83f4ba0dc4c9148256f477f203eab10134db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9efc83f4ba0dc4c9148256f477f203eab10134db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9efc83f4ba0dc4c9148256f477f203eab10134db"}], "stats": {"total": 81, "additions": 46, "deletions": 35}, "files": [{"sha": "cb5b113c0f9e0ca371de9352b3da2d344327014c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/669887fc19f995611f6dd7ed923aa6bd2726bbc1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/669887fc19f995611f6dd7ed923aa6bd2726bbc1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=669887fc19f995611f6dd7ed923aa6bd2726bbc1", "patch": "@@ -1,3 +1,8 @@\n+2010-02-22  Duncan Sands  <baldrick@free.fr>\n+\n+\t* passes.c (register_pass): Always consider all pass lists when\n+\tref_pass_instance_number is zero.\n+\n 2010-02-22  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/42749"}, {"sha": "9d0c55ab16f9b6f45a72aa2020d8d95538ba76de", "filename": "gcc/passes.c", "status": "modified", "additions": 41, "deletions": 35, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/669887fc19f995611f6dd7ed923aa6bd2726bbc1/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/669887fc19f995611f6dd7ed923aa6bd2726bbc1/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=669887fc19f995611f6dd7ed923aa6bd2726bbc1", "patch": "@@ -632,6 +632,8 @@ position_pass (struct register_pass_info *new_pass_info,\n void\n register_pass (struct register_pass_info *pass_info)\n {\n+  bool all_instances, success;\n+\n   /* The checks below could fail in buggy plugins.  Existing GCC\n      passes should never fail these checks, so we mention plugin in\n      the messages.  */\n@@ -647,46 +649,50 @@ register_pass (struct register_pass_info *pass_info)\n \t pass_info->pass->name);\n \n   /* Try to insert the new pass to the pass lists.  We need to check\n-     all three lists as the reference pass could be in one (or all) of\n+     all five lists as the reference pass could be in one (or all) of\n      them.  */\n-  if (!position_pass (pass_info, &all_lowering_passes)\n-      && !position_pass (pass_info, &all_small_ipa_passes)\n-      && !position_pass (pass_info, &all_regular_ipa_passes)\n-      && !position_pass (pass_info, &all_lto_gen_passes)\n-      && !position_pass (pass_info, &all_passes))\n+  all_instances = pass_info->ref_pass_instance_number == 0;\n+  success = position_pass (pass_info, &all_lowering_passes);\n+  if (!success || all_instances)\n+    success |= position_pass (pass_info, &all_small_ipa_passes);\n+  if (!success || all_instances)\n+    success |= position_pass (pass_info, &all_regular_ipa_passes);\n+  if (!success || all_instances)\n+    success |= position_pass (pass_info, &all_lto_gen_passes);\n+  if (!success || all_instances)\n+    success |= position_pass (pass_info, &all_passes);\n+  if (!success)\n     fatal_error\n       (\"pass %qs not found but is referenced by new pass %qs\",\n        pass_info->reference_pass_name, pass_info->pass->name);\n-  else\n+\n+  /* OK, we have successfully inserted the new pass. We need to register\n+     the dump files for the newly added pass and its duplicates (if any).\n+     Because the registration of plugin/backend passes happens after the\n+     command-line options are parsed, the options that specify single\n+     pass dumping (e.g. -fdump-tree-PASSNAME) cannot be used for new\n+     passes. Therefore we currently can only enable dumping of\n+     new passes when the 'dump-all' flags (e.g. -fdump-tree-all)\n+     are specified. While doing so, we also delete the pass_list_node\n+     objects created during pass positioning.  */\n+  while (added_pass_nodes)\n     {\n-      /* OK, we have successfully inserted the new pass. We need to register\n-         the dump files for the newly added pass and its duplicates (if any).\n-         Because the registration of plugin/backend passes happens after the\n-         command-line options are parsed, the options that specify single\n-         pass dumping (e.g. -fdump-tree-PASSNAME) cannot be used for new\n-         passes. Therefore we currently can only enable dumping of\n-         new passes when the 'dump-all' flags (e.g. -fdump-tree-all)\n-         are specified. While doing so, we also delete the pass_list_node\n-         objects created during pass positioning.  */\n-      while (added_pass_nodes)\n-        {\n-          struct pass_list_node *next_node = added_pass_nodes->next;\n-          enum tree_dump_index tdi;\n-          register_one_dump_file (added_pass_nodes->pass);\n-          if (added_pass_nodes->pass->type == SIMPLE_IPA_PASS\n-              || added_pass_nodes->pass->type == IPA_PASS)\n-            tdi = TDI_ipa_all;\n-          else if (added_pass_nodes->pass->type == GIMPLE_PASS)\n-            tdi = TDI_tree_all;\n-          else\n-            tdi = TDI_rtl_all;\n-          /* Check if dump-all flag is specified.  */\n-          if (get_dump_file_info (tdi)->state)\n-            get_dump_file_info (added_pass_nodes->pass->static_pass_number)\n-                ->state = get_dump_file_info (tdi)->state;\n-          XDELETE (added_pass_nodes);\n-          added_pass_nodes = next_node;\n-        }\n+      struct pass_list_node *next_node = added_pass_nodes->next;\n+      enum tree_dump_index tdi;\n+      register_one_dump_file (added_pass_nodes->pass);\n+      if (added_pass_nodes->pass->type == SIMPLE_IPA_PASS\n+          || added_pass_nodes->pass->type == IPA_PASS)\n+        tdi = TDI_ipa_all;\n+      else if (added_pass_nodes->pass->type == GIMPLE_PASS)\n+        tdi = TDI_tree_all;\n+      else\n+        tdi = TDI_rtl_all;\n+      /* Check if dump-all flag is specified.  */\n+      if (get_dump_file_info (tdi)->state)\n+        get_dump_file_info (added_pass_nodes->pass->static_pass_number)\n+            ->state = get_dump_file_info (tdi)->state;\n+      XDELETE (added_pass_nodes);\n+      added_pass_nodes = next_node;\n     }\n }\n "}]}