{"sha": "0caade1b544071ecef4601f2dbe786496677ead8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNhYWRlMWI1NDQwNzFlY2VmNDYwMWYyZGJlNzg2NDk2Njc3ZWFkOA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2001-09-27T16:49:13Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-09-27T16:49:13Z"}, "message": "IdentityHashMap.java (containsKey): Use getHash.\n\n\t* java/util/IdentityHashMap.java (containsKey): Use getHash.\n\t(get): Likewise.\n\t(put): Likewise.\n\t(remove): Likewise.\n\t(getHash): New method.\n\t(tombstone, emptyslot): Now static final.\n\t(put): Correctly determine when to rehash, and correctly rehash.\n\t(containsKey, remove): Test against table length with `>='.\n\nFrom-SVN: r45841", "tree": {"sha": "9de64cbb27269963917f1df98d09816e61b3e110", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9de64cbb27269963917f1df98d09816e61b3e110"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0caade1b544071ecef4601f2dbe786496677ead8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0caade1b544071ecef4601f2dbe786496677ead8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0caade1b544071ecef4601f2dbe786496677ead8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0caade1b544071ecef4601f2dbe786496677ead8/comments", "author": null, "committer": null, "parents": [{"sha": "c9e7a60950592e24cc380f0237bea7e652b9f3ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9e7a60950592e24cc380f0237bea7e652b9f3ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9e7a60950592e24cc380f0237bea7e652b9f3ce"}], "stats": {"total": 40, "additions": 29, "deletions": 11}, "files": [{"sha": "56fecfbaf6807af30543c61bea7ad6f32d773555", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0caade1b544071ecef4601f2dbe786496677ead8/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0caade1b544071ecef4601f2dbe786496677ead8/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=0caade1b544071ecef4601f2dbe786496677ead8", "patch": "@@ -1,3 +1,14 @@\n+2001-09-27  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/util/IdentityHashMap.java (containsKey): Use getHash.\n+\t(get): Likewise.\n+\t(put): Likewise.\n+\t(remove): Likewise.\n+\t(getHash): New method.\n+\t(tombstone, emptyslot): Now static final.\n+\t(put): Correctly determine when to rehash, and correctly rehash.\n+\t(containsKey, remove): Test against table length with `>='.\n+\n 2001-09-26  Tom Tromey  <tromey@redhat.com>\n \n \t* gnu/classpath/Configuration.java.in (INIT_LOAD_LIBRARY): New"}, {"sha": "da028ed9c02452d59afef1d1676ca62a49a8e6aa", "filename": "libjava/java/util/IdentityHashMap.java", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0caade1b544071ecef4601f2dbe786496677ead8/libjava%2Fjava%2Futil%2FIdentityHashMap.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0caade1b544071ecef4601f2dbe786496677ead8/libjava%2Fjava%2Futil%2FIdentityHashMap.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FIdentityHashMap.java?ref=0caade1b544071ecef4601f2dbe786496677ead8", "patch": "@@ -103,7 +103,7 @@ public Object clone ()\n \n   public boolean containsKey (Object key)\n   {\n-    int h = Math.abs (2 * System.identityHashCode (key) % table.length);\n+    int h = getHash (key);\n     int save = h;\n     while (true)\n       {\n@@ -112,7 +112,7 @@ public boolean containsKey (Object key)\n \tif (table[h] == emptyslot)\n \t  return false;\n \th += 2;\n-\tif (h > table.length)\n+\tif (h >= table.length)\n \t  h = 0;\n \tif (h == save)\n \t  return false;\n@@ -174,7 +174,7 @@ public boolean remove (Object o)\n \n   public Object get (Object key)\n   {\n-    int h = Math.abs (2 * System.identityHashCode (key) % table.length);\n+    int h = getHash (key);\n     int save = h;\n     while (true)\n       {\n@@ -230,14 +230,15 @@ public boolean remove (Object o)\n \n   public Object put (Object key, Object value)\n   {\n-    // Rehash is the load factor is too high.\n-    if (size * 3 / 2 > table.length)\n+    // Rehash if the load factor is too high.  We use a factor of 1.5\n+    // -- the division by 2 is implicit on both sides.\n+    if (size * 3 > table.length)\n       {\n \tObject[] old = table;\n \ttable = new Object[old.length * 2];\n \tArrays.fill (table, emptyslot);\n \tsize = 0;\n-\tfor (int i = 0; i < old.length; ++i)\n+\tfor (int i = 0; i < old.length; i += 2)\n \t  {\n \t    if (old[i] != tombstone && old[i] != emptyslot)\n \t      {\n@@ -248,7 +249,7 @@ public Object put (Object key, Object value)\n \t  }\n       }\n \n-    int h = Math.abs (2 * System.identityHashCode (key) % table.length);\n+    int h = getHash (key);\n     int save = h;\n     int del = -1;\n     while (true)\n@@ -288,7 +289,7 @@ else if (table[h] == emptyslot)\n \n   public Object remove (Object key)\n   {\n-    int h = Math.abs (2 * System.identityHashCode (key) % table.length);\n+    int h = getHash (key);\n     int save = h;\n     while (true)\n       {\n@@ -301,7 +302,7 @@ public Object remove (Object key)\n \t    return r;\n \t  }\n \th += 2;\n-\tif (h > table.length)\n+\tif (h >= table.length)\n \t  h = 0;\n \tif (h == save)\n \t  break;\n@@ -413,14 +414,20 @@ private void writeObject (ObjectOutputStream s)\n       }\n   }\n \n+  // Compute the hash value we will use for an object.\n+  private int getHash (Object o)\n+  {\n+    return 2 * Math.abs (System.identityHashCode (o) % (table.length / 2));\n+  }\n+\n   // Number of items in hash table.\n   private int size;\n   // The table itself.\n   private Object[] table;\n \n   // This object is used to mark deleted items.\n-  private Object tombstone = new Object ();\n+  private static final Object tombstone = new Object ();\n   // This object is used to mark empty slots.  We need this because\n   // using null is ambiguous.\n-  private Object emptyslot = new Object ();\n+  private static final Object emptyslot = new Object ();\n }"}]}