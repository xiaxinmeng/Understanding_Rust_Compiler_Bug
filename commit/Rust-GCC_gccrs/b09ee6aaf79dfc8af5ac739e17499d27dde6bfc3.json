{"sha": "b09ee6aaf79dfc8af5ac739e17499d27dde6bfc3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA5ZWU2YWFmNzlkZmM4YWY1YWM3MzllMTc0OTlkMjdkZGU2YmZjMw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-10-11T12:53:24Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-10-11T12:53:24Z"}, "message": "i386.md (*setcc_di_1): New insn_and_split pattern.\n\n\t* config/i386/i386.md (*setcc_di_1): New insn_and_split pattern.\n\t(*setcc_si_1_and): Ditto.\n\t(*setcc_si_1_movzbl): Ditto.\n\t(*setcc_<mode>_2): Ditto.\n\t(*setcc_qi): Rename from *setcc_1.\n\t(*setcc_qi_slp): Rename from *setcc_2.\n\n\t(*zero_extendqihi2_movzbw_and splitter): Use ix86_expand_clear.\n\t(*zero_extendqisi2_movzbw_and splitter): Ditto.\n\n\t* config/i386/i386.c (ix86_expand_clear): Remove reload_completed from\n\t\"if\" condition, there is already assert with reload_completed present.\n\nFrom-SVN: r152642", "tree": {"sha": "1fdfe87f76e13e7ba38e23654ced8e3394cda247", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fdfe87f76e13e7ba38e23654ced8e3394cda247"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b09ee6aaf79dfc8af5ac739e17499d27dde6bfc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b09ee6aaf79dfc8af5ac739e17499d27dde6bfc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b09ee6aaf79dfc8af5ac739e17499d27dde6bfc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b09ee6aaf79dfc8af5ac739e17499d27dde6bfc3/comments", "author": null, "committer": null, "parents": [{"sha": "1aa4ade670cede4150aba97c5498d78e1704d53c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aa4ade670cede4150aba97c5498d78e1704d53c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aa4ade670cede4150aba97c5498d78e1704d53c"}], "stats": {"total": 109, "additions": 92, "deletions": 17}, "files": [{"sha": "668a75636ea4f765f103e443e40d09e41240f087", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b09ee6aaf79dfc8af5ac739e17499d27dde6bfc3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b09ee6aaf79dfc8af5ac739e17499d27dde6bfc3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b09ee6aaf79dfc8af5ac739e17499d27dde6bfc3", "patch": "@@ -1,10 +1,24 @@\n+2009-10-11  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*setcc_di_1): New insn_and_split pattern.\n+\t(*setcc_si_1_and): Ditto.\n+\t(*setcc_si_1_movzbl): Ditto.\n+\t(*setcc_<mode>_2): Ditto.\n+\t(*setcc_qi): Rename from *setcc_1.\n+\t(*setcc_qi_slp): Rename from *setcc_2.\n+\n+\t(*zero_extendqihi2_movzbw_and splitter): Use ix86_expand_clear.\n+\t(*zero_extendqisi2_movzbw_and splitter): Ditto.\n+\n+\t* config/i386/i386.c (ix86_expand_clear): Remove reload_completed from\n+\t\"if\" condition, there is already assert with reload_completed present.\n+\n 2009-10-11  Gerald Pfeifer  <gerald@pfeifer.com>\n \n-\t* plugin.c (try_init_one_plugin): Improve constness of variable\n-\terr.\n+\t* plugin.c (try_init_one_plugin): Improve constness of variable err.\n \n 2009-10-10  Gerald Pfeifer  <gerald@pfeifer.com>\n-\t\n+\n \t* doc/install.texi (Final install): Refer to\n \thttp://gcc.gnu.org/bugs/ for bug reporting.\n "}, {"sha": "2a1ed6d2984de764bfd01edadf2116923020d76c", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b09ee6aaf79dfc8af5ac739e17499d27dde6bfc3/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b09ee6aaf79dfc8af5ac739e17499d27dde6bfc3/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b09ee6aaf79dfc8af5ac739e17499d27dde6bfc3", "patch": "@@ -12637,7 +12637,7 @@ ix86_expand_clear (rtx dest)\n   tmp = gen_rtx_SET (VOIDmode, dest, const0_rtx);\n \n   /* This predicate should match that for movsi_xor and movdi_xor_rex64.  */\n-  if (reload_completed && (!TARGET_USE_MOV0 || optimize_insn_for_speed_p ()))\n+  if (!TARGET_USE_MOV0 || optimize_insn_for_speed_p ())\n     {\n       rtx clob = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (CCmode, FLAGS_REG));\n       tmp = gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, tmp, clob));"}, {"sha": "8f2afc4c41cde49ecd2002578b0a3404bdd2a995", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 74, "deletions": 13, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b09ee6aaf79dfc8af5ac739e17499d27dde6bfc3/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b09ee6aaf79dfc8af5ac739e17499d27dde6bfc3/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=b09ee6aaf79dfc8af5ac739e17499d27dde6bfc3", "patch": "@@ -4080,9 +4080,11 @@\n    && (TARGET_ZERO_EXTEND_WITH_AND\n        && optimize_function_for_speed_p (cfun))\n    && !reg_overlap_mentioned_p (operands[0], operands[1])\"\n-  [(set (match_dup 0) (const_int 0))\n-   (set (strict_low_part (match_dup 2)) (match_dup 1))]\n-  \"operands[2] = gen_lowpart (QImode, operands[0]);\")\n+  [(set (strict_low_part (match_dup 2)) (match_dup 1))]\n+{\n+  operands[2] = gen_lowpart (QImode, operands[0]);\n+  ix86_expand_clear (operands[0]);\n+})\n \n ;; Rest is handled by single and.\n (define_split\n@@ -4112,7 +4114,7 @@\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"*zero_extendqisi2_movzbw_and\"\n+(define_insn \"*zero_extendqisi2_movzbl_and\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n      (zero_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"qm,0\")))\n    (clobber (reg:CC FLAGS_REG))]\n@@ -4121,7 +4123,7 @@\n   [(set_attr \"type\" \"imovx,alu1\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"*zero_extendqisi2_movzbw\"\n+(define_insn \"*zero_extendqisi2_movzbl\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n      (zero_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"qm\")))]\n   \"(!TARGET_ZERO_EXTEND_WITH_AND || optimize_function_for_size_p (cfun))\n@@ -4152,9 +4154,11 @@\n    && (ANY_QI_REG_P (operands[1]) || MEM_P (operands[1]))\n    && (TARGET_ZERO_EXTEND_WITH_AND && optimize_function_for_speed_p (cfun))\n    && !reg_overlap_mentioned_p (operands[0], operands[1])\"\n-  [(set (match_dup 0) (const_int 0))\n-   (set (strict_low_part (match_dup 2)) (match_dup 1))]\n-  \"operands[2] = gen_lowpart (QImode, operands[0]);\")\n+  [(set (strict_low_part (match_dup 2)) (match_dup 1))]\n+{\n+  operands[2] = gen_lowpart (QImode, operands[0]);\n+  ix86_expand_clear (operands[0]);\n+})\n \n ;; Rest is handled by single and.\n (define_split\n@@ -13766,11 +13770,68 @@\n ;; For all sCOND expanders, also expand the compare or test insn that\n ;; generates cc0.  Generate an equality comparison if `seq' or `sne'.\n \n-;; %%% Do the expansion to SImode.  If PII, do things the xor+setcc way\n-;; to avoid partial register stalls.  Otherwise do things the setcc+movzx\n-;; way, which can later delete the movzx if only QImode is needed.\n+(define_insn_and_split \"*setcc_di_1\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=q\")\n+\t(match_operator:DI 1 \"ix86_comparison_operator\"\n+\t  [(reg FLAGS_REG) (const_int 0)]))]\n+  \"TARGET_64BIT && !TARGET_PARTIAL_REG_STALL\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 2) (match_dup 1))\n+   (set (match_dup 0) (zero_extend:DI (match_dup 2)))]\n+{\n+  PUT_MODE (operands[1], QImode);\n+  operands[2] = gen_lowpart (QImode, operands[0]);\n+})\n+\n+(define_insn_and_split \"*setcc_si_1_and\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=q\")\n+\t(match_operator:SI 1 \"ix86_comparison_operator\"\n+\t  [(reg FLAGS_REG) (const_int 0)]))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"!TARGET_PARTIAL_REG_STALL\n+   && TARGET_ZERO_EXTEND_WITH_AND && optimize_function_for_speed_p (cfun)\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 2) (match_dup 1))\n+   (parallel [(set (match_dup 0) (zero_extend:SI (match_dup 2)))\n+\t      (clobber (reg:CC FLAGS_REG))])]\n+{\n+  PUT_MODE (operands[1], QImode);\n+  operands[2] = gen_lowpart (QImode, operands[0]);\n+})\n+\n+(define_insn_and_split \"*setcc_si_1_movzbl\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=q\")\n+\t(match_operator:SI 1 \"ix86_comparison_operator\"\n+\t  [(reg FLAGS_REG) (const_int 0)]))]\n+  \"!TARGET_PARTIAL_REG_STALL\n+   && (!TARGET_ZERO_EXTEND_WITH_AND || optimize_function_for_size_p (cfun))\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 2) (match_dup 1))\n+   (set (match_dup 0) (zero_extend:SI (match_dup 2)))]\n+{\n+  PUT_MODE (operands[1], QImode);\n+  operands[2] = gen_lowpart (QImode, operands[0]);\n+})\n+\n+(define_insn_and_split \"*setcc_<mode>_2\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=q\")\n+\t(match_operator:SWI48 1 \"ix86_comparison_operator\"\n+\t  [(reg FLAGS_REG) (const_int 0)]))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_PARTIAL_REG_STALL\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (strict_low_part (match_dup 2)) (match_dup 1))]\n+{\n+  PUT_MODE (operands[1], QImode);\n+  operands[2] = gen_lowpart (QImode, operands[0]);\n+  ix86_expand_clear (operands[0]);\n+})\n \n-(define_insn \"*setcc_1\"\n+(define_insn \"*setcc_qi\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n \t(match_operator:QI 1 \"ix86_comparison_operator\"\n \t  [(reg FLAGS_REG) (const_int 0)]))]\n@@ -13779,7 +13840,7 @@\n   [(set_attr \"type\" \"setcc\")\n    (set_attr \"mode\" \"QI\")])\n \n-(define_insn \"*setcc_2\"\n+(define_insn \"*setcc_qi_slp\"\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm\"))\n \t(match_operator:QI 1 \"ix86_comparison_operator\"\n \t  [(reg FLAGS_REG) (const_int 0)]))]"}]}