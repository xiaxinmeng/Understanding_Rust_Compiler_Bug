{"sha": "e75fde1a84c8930f2908a53945306537385f3f3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc1ZmRlMWE4NGM4OTMwZjI5MDhhNTM5NDUzMDY1MzczODVmM2YzYg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-01-13T10:36:27Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-01-13T10:36:27Z"}, "message": "builtins.c (get_object_alignment_2): Minor tweak.\n\n\t* builtins.c (get_object_alignment_2): Minor tweak.\n\t* tree-ssa-loop-ivopts.c (may_be_unaligned_p): Rewrite.\n\nFrom-SVN: r206576", "tree": {"sha": "a301a83873dcf8ecd2e5711b02a0c6b0e195c46e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a301a83873dcf8ecd2e5711b02a0c6b0e195c46e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e75fde1a84c8930f2908a53945306537385f3f3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e75fde1a84c8930f2908a53945306537385f3f3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e75fde1a84c8930f2908a53945306537385f3f3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e75fde1a84c8930f2908a53945306537385f3f3b/comments", "author": null, "committer": null, "parents": [{"sha": "eae298d69947eeb41770b908ab7511c1e51a9ae1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eae298d69947eeb41770b908ab7511c1e51a9ae1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eae298d69947eeb41770b908ab7511c1e51a9ae1"}], "stats": {"total": 116, "additions": 81, "deletions": 35}, "files": [{"sha": "b601c0e56b3c92cb05e3542d10d45cb6de1e781d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e75fde1a84c8930f2908a53945306537385f3f3b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e75fde1a84c8930f2908a53945306537385f3f3b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e75fde1a84c8930f2908a53945306537385f3f3b", "patch": "@@ -1,7 +1,12 @@\n+2014-01-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* builtins.c (get_object_alignment_2): Minor tweak.\n+\t* tree-ssa-loop-ivopts.c (may_be_unaligned_p): Rewrite.\n+\n 2014-01-13  Christian Bruel  <christian.bruel@st.com>\n \n \t* config/sh/sh-mem.cc (sh_expand_cmpnstr): Unroll small sizes and\n-\t  optimized non constant lengths.\n+\toptimized non constant lengths.\n \n 2014-01-13  Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "c983768f2f07ab6c11e3413abeddfa870069da93", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e75fde1a84c8930f2908a53945306537385f3f3b/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e75fde1a84c8930f2908a53945306537385f3f3b/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=e75fde1a84c8930f2908a53945306537385f3f3b", "patch": "@@ -434,7 +434,7 @@ get_object_alignment_2 (tree exp, unsigned int *alignp,\n      alignment that can prevail.  */\n   if (offset)\n     {\n-      int trailing_zeros = tree_ctz (offset);\n+      unsigned int trailing_zeros = tree_ctz (offset);\n       if (trailing_zeros < HOST_BITS_PER_INT)\n \t{\n \t  unsigned int inner = (1U << trailing_zeros) * BITS_PER_UNIT;"}, {"sha": "8c0d0622956dafafdef0b5f7daffe2c4410f1080", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e75fde1a84c8930f2908a53945306537385f3f3b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e75fde1a84c8930f2908a53945306537385f3f3b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e75fde1a84c8930f2908a53945306537385f3f3b", "patch": "@@ -1,3 +1,8 @@\n+2014-01-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/loop_optimization17.adb: New test.\n+\t* gnat.dg/loop_optimization17_pkg.ad[sb]: New helper.\n+\n 2014-01-13  Christian Bruel  <christian.bruel@st.com>\n \n \t* gcc.target/sh/cmpstrn.c: New case."}, {"sha": "2178b65bf1f05f0f6591f937033f1e018008c374", "filename": "gcc/testsuite/gnat.dg/loop_optimization17.adb", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e75fde1a84c8930f2908a53945306537385f3f3b/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization17.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e75fde1a84c8930f2908a53945306537385f3f3b/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization17.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization17.adb?ref=e75fde1a84c8930f2908a53945306537385f3f3b", "patch": "@@ -0,0 +1,22 @@\n+-- { dg-do run }\n+-- { dg-options \"-O\" }\n+\n+with Loop_Optimization17_Pkg; use Loop_Optimization17_Pkg;\n+\n+procedure Loop_Optimization17 is\n+\n+  Data : Arr;\n+\n+begin\n+\n+  Data := (others => (I  => 0,\n+                      V1 => (others => 0.0),\n+                      V2 => (others => 0.0),\n+                      S  => 0.0));\n+\n+  for I in Index_T'Range loop\n+    Object (I).V1 := F (Data (I).V1);\n+    Object (I).V2 := F (Data (I).V2);\n+  end loop;\n+\n+end;"}, {"sha": "20815af4775f0feff340d4ec36df3f13acf01cce", "filename": "gcc/testsuite/gnat.dg/loop_optimization17_pkg.adb", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e75fde1a84c8930f2908a53945306537385f3f3b/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization17_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e75fde1a84c8930f2908a53945306537385f3f3b/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization17_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization17_pkg.adb?ref=e75fde1a84c8930f2908a53945306537385f3f3b", "patch": "@@ -0,0 +1,5 @@\n+package body Loop_Optimization17_Pkg is\n+\n+  function F (V : Vector) return Vector is begin return V; end;\n+\n+end Loop_Optimization17_Pkg;"}, {"sha": "5b650dfa886466c4251d2177482f75ea8cae08c6", "filename": "gcc/testsuite/gnat.dg/loop_optimization17_pkg.ads", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e75fde1a84c8930f2908a53945306537385f3f3b/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization17_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e75fde1a84c8930f2908a53945306537385f3f3b/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization17_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization17_pkg.ads?ref=e75fde1a84c8930f2908a53945306537385f3f3b", "patch": "@@ -0,0 +1,29 @@\n+package Loop_Optimization17_Pkg is\n+\n+   type vector is array (1..3) of Long_Float;\n+\n+   type Rec is\n+      record\n+         I : Integer;\n+         V1, V2 : Vector;\n+         S : Long_Float;\n+      end record;\n+\n+   for  Rec  use\n+      record\n+         I  at   0 range  0 .. 31;\n+         V1 at   4 range  0 .. 191;\n+         V2 at  28 range  0 .. 191;\n+         S  at  52 range  0 .. 63;\n+      end  record;\n+   for Rec'Alignment use 4;\n+   for Rec'Size use 480;\n+\n+   type Index_T is range 1 .. 5;\n+   type Arr is array (Index_T) of Rec;\n+\n+   Object : Arr;\n+\n+   function F (V : Vector) return Vector;\n+\n+end Loop_Optimization17_Pkg;"}, {"sha": "14ba20fce7724bf43b3310b1b4c2b34aa2b0d9a6", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 13, "deletions": 33, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e75fde1a84c8930f2908a53945306537385f3f3b/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e75fde1a84c8930f2908a53945306537385f3f3b/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=e75fde1a84c8930f2908a53945306537385f3f3b", "patch": "@@ -1668,50 +1668,30 @@ constant_multiple_of (tree top, tree bot, double_int *mul)\n     }\n }\n \n-/* Returns true if memory reference REF with step STEP may be unaligned.  */\n+/* Return true if memory reference REF with step STEP may be unaligned.  */\n \n static bool\n may_be_unaligned_p (tree ref, tree step)\n {\n-  tree base;\n-  tree base_type;\n-  HOST_WIDE_INT bitsize;\n-  HOST_WIDE_INT bitpos;\n-  tree toffset;\n-  enum machine_mode mode;\n-  int unsignedp, volatilep;\n-  unsigned base_align;\n-\n   /* TARGET_MEM_REFs are translated directly to valid MEMs on the target,\n      thus they are not misaligned.  */\n   if (TREE_CODE (ref) == TARGET_MEM_REF)\n     return false;\n \n-  /* The test below is basically copy of what expr.c:normal_inner_ref\n-     does to check whether the object must be loaded by parts when\n-     STRICT_ALIGNMENT is true.  */\n-  base = get_inner_reference (ref, &bitsize, &bitpos, &toffset, &mode,\n-\t\t\t      &unsignedp, &volatilep, true);\n-  base_type = TREE_TYPE (base);\n-  base_align = get_object_alignment (base);\n-  base_align = MAX (base_align, TYPE_ALIGN (base_type));\n-\n-  if (mode != BLKmode)\n-    {\n-      unsigned mode_align = GET_MODE_ALIGNMENT (mode);\n-\n-      if (base_align < mode_align\n-\t  || (bitpos % mode_align) != 0\n-\t  || (bitpos % BITS_PER_UNIT) != 0)\n-\treturn true;\n+  unsigned int align = TYPE_ALIGN (TREE_TYPE (ref));\n \n-      if (toffset\n-\t  && (highest_pow2_factor (toffset) * BITS_PER_UNIT) < mode_align)\n-\treturn true;\n+  unsigned HOST_WIDE_INT bitpos;\n+  unsigned int ref_align;\n+  get_object_alignment_1 (ref, &ref_align, &bitpos);\n+  if (ref_align < align\n+      || (bitpos % align) != 0\n+      || (bitpos % BITS_PER_UNIT) != 0)\n+    return true;\n \n-      if ((highest_pow2_factor (step) * BITS_PER_UNIT) < mode_align)\n-\treturn true;\n-    }\n+  unsigned int trailing_zeros = tree_ctz (step);\n+  if (trailing_zeros < HOST_BITS_PER_INT\n+      && (1U << trailing_zeros) * BITS_PER_UNIT < align)\n+    return true;\n \n   return false;\n }"}]}