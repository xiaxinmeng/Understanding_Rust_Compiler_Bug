{"sha": "767094ddfda30cbecd8944f64395640b217446b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY3MDk0ZGRmZGEzMGNiZWNkODk0NGY2NDM5NTY0MGIyMTc0NDZiNQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-06-26T22:47:11Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-06-26T22:47:11Z"}, "message": "c-tree.texi, [...]: Use two spaces after ends of sentences.\n\n\t* doc/c-tree.texi, doc/cpp.texi, doc/extend.texi, doc/gcc.texi,\n\tdoc/install.texi, doc/invoke.texi, doc/objc.texi, doc/rtl.texi,\n\tdoc/tm.texi: Use two spaces after ends of sentences.\n\nFrom-SVN: r43594", "tree": {"sha": "529fd0ebaf11900261df5b5828d32f2f453e8df0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/529fd0ebaf11900261df5b5828d32f2f453e8df0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/767094ddfda30cbecd8944f64395640b217446b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/767094ddfda30cbecd8944f64395640b217446b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/767094ddfda30cbecd8944f64395640b217446b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/767094ddfda30cbecd8944f64395640b217446b5/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6823cb5cd201cf9a126d3b10387cf37280e75c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6823cb5cd201cf9a126d3b10387cf37280e75c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6823cb5cd201cf9a126d3b10387cf37280e75c6"}], "stats": {"total": 476, "additions": 241, "deletions": 235}, "files": [{"sha": "cf9b60006b6bbe8cb70e0529c69ed2ff1c7155e5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/767094ddfda30cbecd8944f64395640b217446b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/767094ddfda30cbecd8944f64395640b217446b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=767094ddfda30cbecd8944f64395640b217446b5", "patch": "@@ -1,3 +1,9 @@\n+2001-06-26  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* doc/c-tree.texi, doc/cpp.texi, doc/extend.texi, doc/gcc.texi,\n+\tdoc/install.texi, doc/invoke.texi, doc/objc.texi, doc/rtl.texi,\n+\tdoc/tm.texi: Use two spaces after ends of sentences.\n+\n 2001-06-26  Daniel Berlin  <dan@cgsoftware.com>\n \n \t* toplev.c (display_help): Fix param thinko."}, {"sha": "e824efaa3a92b9f33e7d72a918d920e211b5c005", "filename": "gcc/doc/c-tree.texi", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/767094ddfda30cbecd8944f64395640b217446b5/gcc%2Fdoc%2Fc-tree.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/767094ddfda30cbecd8944f64395640b217446b5/gcc%2Fdoc%2Fc-tree.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fc-tree.texi?ref=767094ddfda30cbecd8944f64395640b217446b5", "patch": "@@ -401,7 +401,7 @@ This predicate holds for a pointer to function type.\n \n @item TYPE_PTROB_P\n This predicate holds for a pointer to object type.  Note however that it\n-does not hold for the generic pointer to object type @code{void *}. You\n+does not hold for the generic pointer to object type @code{void *}.  You\n may use @code{TYPE_PTROBV_P} to test for a pointer to object type as\n well as @code{void *}.\n \n@@ -544,7 +544,7 @@ the type of @code{m}.\n @item TYPENAME_TYPE\n Used to represent a construct of the form @code{typename T::A}.  The\n @code{TYPE_CONTEXT} is @code{T}; the @code{TYPE_NAME} is an\n-@code{IDENTIFIER_NODE} for @code{A}. If the type is specified via a\n+@code{IDENTIFIER_NODE} for @code{A}.  If the type is specified via a\n template-id, then @code{TYPENAME_TYPE_FULLNAME} yields a\n @code{TEMPLATE_ID_EXPR}.  The @code{TREE_TYPE} is non-@code{NULL} if the\n node is implicitly generated in support for the implicit typename\n@@ -724,7 +724,7 @@ Almost all non-function members are available on the @code{TYPE_FIELDS}\n list.  Given one member, the next can be found by following the\n @code{TREE_CHAIN}.  You should not depend in any way on the order in\n which fields appear on this list.  All nodes on this list will be\n-@samp{DECL} nodes. A @code{FIELD_DECL} is used to represent a non-static\n+@samp{DECL} nodes.  A @code{FIELD_DECL} is used to represent a non-static\n data member, a @code{VAR_DECL} is used to represent a static data\n member, and a @code{TYPE_DECL} is used to represent a type.  Note that\n the @code{CONST_DECL} for an enumeration constant will appear on this\n@@ -930,7 +930,7 @@ analogous to @code{TYPE_SIZE} and @code{TYPE_ALIGN}.  For a declaration,\n you should always use the @code{DECL_SIZE} and @code{DECL_ALIGN} rather\n than the @code{TYPE_SIZE} and @code{TYPE_ALIGN} given by the\n @code{TREE_TYPE}, since special attributes may have been applied to the\n-variable to give it a particular size and alignment. You may use the\n+variable to give it a particular size and alignment.  You may use the\n predicates @code{DECL_THIS_STATIC} or @code{DECL_THIS_EXTERN} to test\n whether the storage class specifiers @code{static} or @code{extern} were\n used to declare a variable.\n@@ -1640,8 +1640,8 @@ And, if an exception is thrown while the expression is executing,\n @code{terminate} must be called.\n \n @item USING_STMT\n-Used to represent a @code{using} directive. The namespace is given by\n-@code{USING_STMT_NAMESPACE}, which will be a NAMESPACE_DECL. This node\n+Used to represent a @code{using} directive.  The namespace is given by\n+@code{USING_STMT_NAMESPACE}, which will be a NAMESPACE_DECL.  This node\n is needed inside template functions, to implement using directives\n during instantiation.\n "}, {"sha": "26c1578dff229a95d62cd16b5b0c763884825f42", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/767094ddfda30cbecd8944f64395640b217446b5/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/767094ddfda30cbecd8944f64395640b217446b5/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=767094ddfda30cbecd8944f64395640b217446b5", "patch": "@@ -424,7 +424,7 @@ Your program will be more portable this way, too.\n After the textual transformations are finished, the input file is\n converted into a sequence of @dfn{preprocessing tokens}.  These mostly\n correspond to the syntactic tokens used by the C compiler, but there are\n-a few differences. White space separates tokens; it is not itself a\n+a few differences.  White space separates tokens; it is not itself a\n token of any kind.  Tokens do not have to be separated by white space,\n but it is often necessary to avoid ambiguities.\n \n@@ -575,7 +575,7 @@ have the same meaning.\n @end example\n \n @noindent\n-(where @samp{^@@} is ASCII NUL). Within string or character constants,\n+(where @samp{^@@} is ASCII NUL).  Within string or character constants,\n NULs are preserved.  In the latter two cases the preprocessor emits a\n warning message.\n \n@@ -1634,7 +1634,7 @@ eprintf(\"success!\\n\", );\n      @expansion{} fprintf(stderr, \"success!\\n\", );\n @end example\n \n-GNU CPP has a pair of extensions which deal with this problem. First,\n+GNU CPP has a pair of extensions which deal with this problem.  First,\n you are allowed to leave the variable argument out entirely:\n \n @example\n@@ -3092,8 +3092,8 @@ compilers.  They are documented in the GCC manual.\n @ftable @code\n @item #pragma GCC dependency\n @code{#pragma GCC dependency} allows you to check the relative dates of\n-the current file and another file. If the other file is more recent than\n-the current file, a warning is issued. This is useful if the current\n+the current file and another file.  If the other file is more recent than\n+the current file, a warning is issued.  This is useful if the current\n file is derived from the other file, and should be regenerated.  The\n other file is searched for using the normal include search path.\n Optional trailing text can be used to give more information in the\n@@ -3502,7 +3502,7 @@ by available memory.\n \n @item Number of parameters in a macro definition and arguments in a macro call.\n \n-We allow @code{USHRT_MAX}, which is no smaller than 65,535. The minimum\n+We allow @code{USHRT_MAX}, which is no smaller than 65,535.  The minimum\n required by the standard is 127.\n \n @item Number of characters on a logical source line.\n@@ -3559,7 +3559,7 @@ An assertion looks like this:\n @end example\n \n @noindent\n-@var{predicate} must be a single identifier. @var{answer} can be any\n+@var{predicate} must be a single identifier.  @var{answer} can be any\n sequence of tokens; all characters are significant except for leading\n and trailing whitespace, and differences in internal whitespace\n sequences are ignored.  (This is similar to the rules governing macro\n@@ -3993,7 +3993,7 @@ $(objpfx)foo.o: foo.c\n @item -MQ @var{target}\n \n Same as @option{-MT}, but it quotes any characters which are special to\n-Make. @option{@w{-MQ '$(objpfx)foo.o'}} gives\n+Make.  @option{@w{-MQ '$(objpfx)foo.o'}} gives\n \n @example\n $$(objpfx)foo.o: foo.c\n@@ -4233,13 +4233,13 @@ source line, since the first token on the line is no longer a @samp{#}.\n \n @item -gcc\n Define the macros @sc{__gnuc__}, @sc{__gnuc_minor__} and\n-@sc{__gnuc_patchlevel__}. These are defined automatically when you use\n+@sc{__gnuc_patchlevel__}.  These are defined automatically when you use\n @command{gcc -E}; you can turn them off in that case with\n @option{-no-gcc}.\n \n @item -traditional\n Try to imitate the behavior of old-fashioned C, as opposed to ISO\n-C@. @xref{Traditional Mode}.\n+C@.  @xref{Traditional Mode}.\n \n @item -trigraphs\n Process trigraph sequences.  @xref{Initial processing}."}, {"sha": "152d6de65fd7498c28877f9e245105a83dab9c77", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/767094ddfda30cbecd8944f64395640b217446b5/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/767094ddfda30cbecd8944f64395640b217446b5/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=767094ddfda30cbecd8944f64395640b217446b5", "patch": "@@ -2003,7 +2003,7 @@ slightly under 32kbytes of data.\n Use this option on the AVR to indicate that the specified\n function is an signal handler.  The compiler will generate function\n entry and exit sequences suitable for use in an signal handler when this\n-attribute is present. Interrupts will be disabled inside function.\n+attribute is present.  Interrupts will be disabled inside function.\n \n @item naked\n @cindex function without a prologue/epilogue code\n@@ -2561,7 +2561,7 @@ section, consider using the facilities of the linker instead.\n @cindex @code{shared} variable attribute\n On Windows NT, in addition to putting variable definitions in a named\n section, the section can also be shared among all running copies of an\n-executable or DLL. For example, this small program defines shared data\n+executable or DLL.  For example, this small program defines shared data\n by putting it in a named section @code{shared} and marking the section\n shareable:\n \n@@ -3602,8 +3602,8 @@ This extension is not supported by GNU C++.\n @cindex @code{__func__} identifier\n \n GCC predefines two magic identifiers to hold the name of the current\n-function. The identifier @code{__FUNCTION__} holds the name of the function\n-as it appears in the source. The identifier @code{__PRETTY_FUNCTION__}\n+function.  The identifier @code{__FUNCTION__} holds the name of the function\n+as it appears in the source.  The identifier @code{__PRETTY_FUNCTION__}\n holds the name of the function pretty printed in a language specific\n fashion.\n \n@@ -3642,10 +3642,10 @@ __PRETTY_FUNCTION__ = int  a::sub (int)\n @end smallexample\n \n The compiler automagically replaces the identifiers with a string\n-literal containing the appropriate name. Thus, they are neither\n+literal containing the appropriate name.  Thus, they are neither\n preprocessor macros, like @code{__FILE__} and @code{__LINE__}, nor\n-variables. This means that they catenate with other string literals, and\n-that they can be used to initialize char arrays. For example\n+variables.  This means that they catenate with other string literals, and\n+that they can be used to initialize char arrays.  For example\n \n @smallexample\n char here[] = \"Function \" __FUNCTION__ \" in \" __FILE__;\n@@ -3668,7 +3668,7 @@ static const char __func__[] = \"function-name\";\n @end smallexample\n \n appeared, where function-name is the name of the lexically-enclosing\n-function. This name is the unadorned name of the function.\n+function.  This name is the unadorned name of the function.\n @end display\n \n By this definition, @code{__func__} is a variable, not a string literal.\n@@ -3991,24 +3991,24 @@ works correctly.\n @cindex volatile write\n @cindex volatile access\n \n-Both the C and C++ standard have the concept of volatile objects. These\n-are normally accessed by pointers and used for accessing hardware. The\n+Both the C and C++ standard have the concept of volatile objects.  These\n+are normally accessed by pointers and used for accessing hardware.  The\n standards encourage compilers to refrain from optimizations\n concerning accesses to volatile objects that it might perform on\n-non-volatile objects. The C standard leaves it implementation defined\n-as to what constitutes a volatile access. The C++ standard omits to\n+non-volatile objects.  The C standard leaves it implementation defined\n+as to what constitutes a volatile access.  The C++ standard omits to\n specify this, except to say that C++ should behave in a similar manner\n-to C with respect to volatiles, where possible. The minimum either\n+to C with respect to volatiles, where possible.  The minimum either\n standard specifies is that at a sequence point all previous accesses to\n volatile objects have stabilized and no subsequent accesses have\n-occurred. Thus an implementation is free to reorder and combine\n+occurred.  Thus an implementation is free to reorder and combine\n volatile accesses which occur between sequence points, but cannot do so\n-for accesses across a sequence point. The use of volatiles does not\n+for accesses across a sequence point.  The use of volatiles does not\n allow you to violate the restriction on updating objects multiple times\n within a sequence point.\n \n In most expressions, it is intuitively obvious what is a read and what is\n-a write. For instance\n+a write.  For instance\n \n @example\n volatile int *dst = @var{somevalue};\n@@ -4018,12 +4018,12 @@ volatile int *src = @var{someothervalue};\n \n @noindent\n will cause a read of the volatile object pointed to by @var{src} and stores the\n-value into the volatile object pointed to by @var{dst}. There is no\n+value into the volatile object pointed to by @var{dst}.  There is no\n guarantee that these reads and writes are atomic, especially for objects\n larger than @code{int}.\n \n Less obvious expressions are where something which looks like an access\n-is used in a void context. An example would be,\n+is used in a void context.  An example would be,\n \n @example\n volatile int *src = @var{somevalue};\n@@ -4032,15 +4032,15 @@ volatile int *src = @var{somevalue};\n \n With C, such expressions are rvalues, and as rvalues cause a read of\n the object, GCC interprets this as a read of the volatile being pointed\n-to. The C++ standard specifies that such expressions do not undergo\n+to.  The C++ standard specifies that such expressions do not undergo\n lvalue to rvalue conversion, and that the type of the dereferenced\n-object may be incomplete. The C++ standard does not specify explicitly\n+object may be incomplete.  The C++ standard does not specify explicitly\n that it is this lvalue to rvalue conversion which is responsible for\n-causing an access. However, there is reason to believe that it is,\n-because otherwise certain simple expressions become undefined. However,\n+causing an access.  However, there is reason to believe that it is,\n+because otherwise certain simple expressions become undefined.  However,\n because it would surprise most programmers, G++ treats dereferencing a\n pointer to volatile object of complete type in a void context as a read\n-of the object. When the object has incomplete type, G++ issues a\n+of the object.  When the object has incomplete type, G++ issues a\n warning.\n \n @example\n@@ -4053,16 +4053,16 @@ volatile T *ptr2 = @var{somevalue};\n @end example\n \n In this example, a warning is issued for @code{*ptr1}, and @code{*ptr2}\n-causes a read of the object pointed to. If you wish to force an error on\n+causes a read of the object pointed to.  If you wish to force an error on\n the first case, you must force a conversion to rvalue with, for instance\n a static cast, @code{static_cast<S>(*ptr1)}.\n \n When using a reference to volatile, G++ does not treat equivalent\n expressions as accesses to volatiles, but instead issues a warning that\n-no volatile is accessed. The rationale for this is that otherwise it\n+no volatile is accessed.  The rationale for this is that otherwise it\n becomes difficult to determine where volatile access occur, and not\n possible to ignore the return value from functions returning volatile\n-references. Again, if you wish to force a read, cast the reference to\n+references.  Again, if you wish to force a read, cast the reference to\n an rvalue.\n \n @node Restricted Pointers\n@@ -4073,7 +4073,7 @@ an rvalue.\n \n As with gcc, g++ understands the C99 feature of restricted pointers,\n specified with the @code{__restrict__}, or @code{__restrict} type\n-qualifier. Because you cannot compile C++ by specifying the @option{-std=c99}\n+qualifier.  Because you cannot compile C++ by specifying the @option{-std=c99}\n language flag, @code{restrict} is not a keyword in C++.\n \n In addition to allowing restricted pointers, you can specify restricted\n@@ -4103,14 +4103,14 @@ void T::fn () __restrict__\n \n @noindent\n Within the body of @code{T::fn}, @var{this} will have the effective\n-definition @code{T *__restrict__ const this}. Notice that the\n+definition @code{T *__restrict__ const this}.  Notice that the\n interpretation of a @code{__restrict__} member function qualifier is\n different to that of @code{const} or @code{volatile} qualifier, in that it\n-is applied to the pointer rather than the object. This is consistent with\n+is applied to the pointer rather than the object.  This is consistent with\n other compilers which implement restricted pointers.\n \n As with all outermost parameter qualifiers, @code{__restrict__} is\n-ignored in function definition matching. This means you only need to\n+ignored in function definition matching.  This means you only need to\n specify @code{__restrict__} in a function definition, rather than\n in a function prototype as well.\n \n@@ -4519,7 +4519,7 @@ fptr p = (fptr)(a.*fp);\n @end example\n \n For PMF constants (i.e. expressions of the form @samp{&Klasse::Member}),\n-no object is needed to obtain the address of the function. They can be\n+no object is needed to obtain the address of the function.  They can be\n converted to function pointers directly:\n \n @example\n@@ -4609,10 +4609,10 @@ versa, but there may be bugs in this area.\n @section Deprecated Features\n \n In the past, the GNU C++ compiler was extended to experiment with new\n-features, at a time when the C++ language was still evolving. Now that\n+features, at a time when the C++ language was still evolving.  Now that\n the C++ standard is complete, some of those features are superseded by\n-superior alternatives. Using the old features might cause a warning in\n-some cases that the feature will be dropped in the future. In other\n+superior alternatives.  Using the old features might cause a warning in\n+some cases that the feature will be dropped in the future.  In other\n cases, the feature might be gone already.\n \n While the list below is not exhaustive, it documents some of the options\n@@ -4622,16 +4622,16 @@ that are now deprecated:\n @item -fexternal-templates\n @itemx -falt-external-templates\n These are two of the many ways for g++ to implement template\n-instantiation. @xref{Template Instantiation}. The C++ standard clearly\n+instantiation.  @xref{Template Instantiation}.  The C++ standard clearly\n defines how template definitions have to be organized across\n-implementation units. g++ has an implicit instantiation mechanism that\n+implementation units.  g++ has an implicit instantiation mechanism that\n should work just fine for standard-conforming code.\n \n @item -fstrict-prototype\n @itemx -fno-strict-prototype\n Previously it was possible to use an empty prototype parameter list to\n indicate an unspecified number of parameters (like C), rather than no\n-parameters, as C++ demands. This feature has been removed, except where\n+parameters, as C++ demands.  This feature has been removed, except where\n it is required for backwards compatibility @xref{Backwards Compatibility}.\n @end table\n \n@@ -4647,25 +4647,25 @@ and will be removed from g++ at some point.\n @cindex ARM [Annotated C++ Reference Manual]\n \n Now that there is a definitive ISO standard C++, g++ has a specification\n-to adhere to. The C++ language evolved over time, and features that\n+to adhere to.  The C++ language evolved over time, and features that\n used to be acceptable in previous drafts of the standard, such as the ARM\n-[Annotated C++ Reference Manual], are no longer accepted. In order to allow\n+[Annotated C++ Reference Manual], are no longer accepted.  In order to allow\n compilation of C++ written to such drafts, g++ contains some backwards\n-compatibilities. @emph{All such backwards compatibility features are\n+compatibilities.  @emph{All such backwards compatibility features are\n liable to disappear in future versions of g++.} They should be considered\n deprecated @xref{Deprecated Features}.\n \n @table @code\n @item For scope\n If a variable is declared at for scope, it used to remain in scope until\n the end of the scope which contained the for statement (rather than just\n-within the for scope). g++ retains this, but issues a warning, if such a\n+within the for scope).  g++ retains this, but issues a warning, if such a\n variable is accessed outside the for scope.\n \n @item implicit C language\n Old C system header files did not contain an @code{extern \"C\" @{@dots{}@}}\n-scope to set the language. On such systems, all header files are\n-implicitly scoped inside a C language scope. Also, an empty prototype\n+scope to set the language.  On such systems, all header files are\n+implicitly scoped inside a C language scope.  Also, an empty prototype\n @code{()} will be treated as an unspecified number of arguments, rather\n than no arguments, as C++ demands.\n @end table"}, {"sha": "1167ab44245f0a995f134ef75706d47525377cd0", "filename": "gcc/doc/gcc.texi", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/767094ddfda30cbecd8944f64395640b217446b5/gcc%2Fdoc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/767094ddfda30cbecd8944f64395640b217446b5/gcc%2Fdoc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc.texi?ref=767094ddfda30cbecd8944f64395640b217446b5", "patch": "@@ -299,8 +299,8 @@ bugs.  It corresponds to GCC version 3.1.\n @cindex CHILL\n Several versions of the compiler (C, C++, Objective-C, Fortran, Java\n and CHILL) are integrated; this is why we use the name\n-``GNU Compiler Collection''. GCC can compile programs written in any of these\n-languages. The Fortran, CHILL, and Java compilers are described in\n+``GNU Compiler Collection''.  GCC can compile programs written in any of these\n+languages.  The Fortran, CHILL, and Java compilers are described in\n separate manuals.\n \n @cindex GCC\n@@ -322,7 +322,7 @@ compiler.  For example, we refer to the optimization options as\n affecting the behavior of ``GCC'' or sometimes just ``the compiler''.\n \n Front ends for other languages, such as Ada 95 and Pascal exist but\n-have not yet been integrated into GCC. These front ends, like that for C++,\n+have not yet been integrated into GCC.  These front ends, like that for C++,\n are built in subdirectories of GCC and link to it.  The result is an\n integrated compiler that can compile programs written in C, C++,\n Objective-C, or any of the languages for which you have installed front\n@@ -1603,9 +1603,9 @@ charfunc (tmp.c_str ());\n @subsection Implicit Copy-Assignment for Virtual Bases\n \n When a base class is virtual, only one subobject of the base class\n-belongs to each full object. Also, the constructors and destructors are\n-invoked only once, and called from the most-derived class. However, such\n-objects behave unspecified when being assigned. For example:\n+belongs to each full object.  Also, the constructors and destructors are\n+invoked only once, and called from the most-derived class.  However, such\n+objects behave unspecified when being assigned.  For example:\n \n @example\n struct Base@{\n@@ -1638,19 +1638,19 @@ void func(Derived &d1, Derived &d2)\n @end example\n \n The C++ standard specifies that @samp{Base::Base} is only called once\n-when constructing or copy-constructing a Derived object. It is\n+when constructing or copy-constructing a Derived object.  It is\n unspecified whether @samp{Base::operator=} is called more than once when\n the implicit copy-assignment for Derived objects is invoked (as it is\n inside @samp{func} in the example).\n \n g++ implements the ``intuitive'' algorithm for copy-assignment: assign all\n-direct bases, then assign all members. In that algorithm, the virtual\n-base subobject can be encountered many times. In the example, copying\n+direct bases, then assign all members.  In that algorithm, the virtual\n+base subobject can be encountered many times.  In the example, copying\n proceeds in the following order: @samp{val}, @samp{name} (via\n @code{strdup}), @samp{bval}, and @samp{name} again.\n \n If application code relies on copy-assignment, a user-defined\n-copy-assignment operator removes any uncertainties. With such an\n+copy-assignment operator removes any uncertainties.  With such an\n operator, the application can define whether and how the virtual base\n subobject is assigned.\n \n@@ -2181,7 +2181,7 @@ requires.  If the bug is in the compiler proper (@file{cc1}), send the\n preprocessor output generated by adding @option{-save-temps} to the\n compilation command (@pxref{Debugging Options}).  When you do this, use\n the same @option{-I}, @option{-D} or @option{-U} options that you used in\n-actual compilation. Then send the @var{input}.i or @var{input}.ii files\n+actual compilation.  Then send the @var{input}.i or @var{input}.ii files\n generated.\n \n A single statement is not enough of an example.  In order to compile it,\n@@ -2389,15 +2389,15 @@ we should be able to reproduce the crash ourselves.\n @cindex gccbug script\n \n To simplify creation of bug reports, and to allow better tracking of\n-reports, we use the GNATS bug tracking system. Part of that system is\n-the @code{gccbug} script. This is a Unix shell script, so you need a\n-shell to run it. It is normally installed in the same directory where\n+reports, we use the GNATS bug tracking system.  Part of that system is\n+the @code{gccbug} script.  This is a Unix shell script, so you need a\n+shell to run it.  It is normally installed in the same directory where\n @code{gcc} is installed.\n \n The gccbug script is derived from send-pr, @pxref{using\n-send-pr,,Creating new Problem Reports,send-pr,Reporting Problems}. When\n+send-pr,,Creating new Problem Reports,send-pr,Reporting Problems}.  When\n invoked, it starts a text editor so you can fill out the various fields\n-of the report. When the you quit the editor, the report is automatically\n+of the report.  When the you quit the editor, the report is automatically\n send to the bug reporting address.\n \n A number of fields in this bug report form are specific to GCC, and are\n@@ -3139,7 +3139,7 @@ closing files, and sequencing the passes.\n The parsing pass is invoked only once, to parse the entire input.  A\n high level tree representation is then generated from the input, \n one function at a time.  This tree code is then transformed into RTL\n-intermediate code, and processed. The files involved in transforming\n+intermediate code, and processed.  The files involved in transforming\n the trees into RTL are @file{expr.c}, @file{expmed.c}, and\n @file{stmt.c}. \n @c Note, the above files aren't strictly the only files involved. It's\n@@ -3342,7 +3342,7 @@ The source file of this pass is @file{sibcall.c}\n \n @opindex di\n The option @option{-di} causes a debugging dump of the RTL code after\n-this pass is run. This dump file's name is made by appending\n+this pass is run.  This dump file's name is made by appending\n @samp{.sibling} to the input file name.\n \n @cindex jump optimization\n@@ -3405,10 +3405,10 @@ the input file name.\n @cindex Single Static Assignment optimizations\n @opindex fssa\n @item\n-Static Single Assignment (SSA) based optimization passes. The\n+Static Single Assignment (SSA) based optimization passes.  The\n SSA conversion passes (to/from) are turned on by the @option{-fssa}\n option (it is also done automatically if you enable an SSA optimization pass).\n-These passes utilize a form called Static Single Assignment. In SSA form,\n+These passes utilize a form called Static Single Assignment.  In SSA form,\n each variable (pseudo register) is only set once, giving you def-use\n and use-def chains for free, and enabling a lot more optimization\n passes to be run in linear time.\n@@ -3431,7 +3431,7 @@ is never executed.  It operates in linear time.\n \n @opindex dX\n The option @option{-dX} causes a debugging dump of the RTL code after\n-this pass. This dump file's name is made by appending @samp{.dce} to\n+this pass.  This dump file's name is made by appending @samp{.dce} to\n the input file name.\n @end itemize\n @cindex global common subexpression elimination\n@@ -3448,7 +3448,7 @@ invariants out of loops---that is left to  the loop optimization pass.\n If MR PRE GCSE is done, code hoisting (aka unification) is also done, as\n well as load motion.\n If you are optimizing for speed, LCM (lazy code motion) based GCSE is\n-done. LCM is based on the work of Knoop, Ruthing, and Steffen.  LCM\n+done.  LCM is based on the work of Knoop, Ruthing, and Steffen.  LCM\n based GCSE also does loop invariant code motion.  We also perform load\n and store motion when optimizing for speed.\n Regardless of which type of GCSE is used, the GCSE pass also performs\n@@ -3537,7 +3537,7 @@ the input file name.\n \n @cindex register movement\n @item\n-Register movement (@file{regmove.c}). This pass looks for cases where\n+Register movement (@file{regmove.c}).  This pass looks for cases where\n matching constraints would force an instruction to need a reload, and\n this reload would be a register to register move.  It then attempts\n to change the registers used by the instruction to avoid the move\n@@ -3628,15 +3628,15 @@ to the input file name.\n @cindex reordering, block\n @item\n Basic block reordering.  This pass implements profile guided code\n-positioning. If profile information is not available, various types of\n+positioning.  If profile information is not available, various types of\n static analysis are performed to make the predictions normally coming\n from the profile feedback (IE execution frequency, branch probability,\n-etc). It is implemented in the file @file{bb-reorder.c}, and the\n+etc).  It is implemented in the file @file{bb-reorder.c}, and the\n various prediction routines are in @file{predict.c}.\n \n @opindex dB\n The option @option{-dB} causes a debugging dump of the RTL code after\n-this pass. This dump file's name is made by appending @samp{.bbro} to\n+this pass.  This dump file's name is made by appending @samp{.bbro} to\n the input file name.\n \n @cindex cross-jumping\n@@ -3992,8 +3992,8 @@ initialization when a compilation driver is being initialized.\n @item UPDATE_PATH_HOST_CANONICALIZE (@var{path}, @var{key})\n If defined, a C statement (sans semicolon) that performs host-dependent\n canonicalization when a path used in a compilation driver or preprocessor is\n-canonicalized. @var{path} is the path to be canonicalized, and @var{key} is\n-a translation prefix when its value isn't @code{NULL}. If the C statement\n+canonicalized.  @var{path} is the path to be canonicalized, and @var{key} is\n+a translation prefix when its value isn't @code{NULL}.  If the C statement\n does canonicalize @var{path}, the new path should be returned.\n @end table\n "}, {"sha": "f544aca98303e32911437fe97ee3e047b3bbf420", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/767094ddfda30cbecd8944f64395640b217446b5/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/767094ddfda30cbecd8944f64395640b217446b5/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=767094ddfda30cbecd8944f64395640b217446b5", "patch": "@@ -33,7 +33,7 @@\n @settitle Installing GCC: Binaries\n @end ifset\n \n-@comment $Id: install.texi,v 1.33 2001/06/23 23:41:59 jsm28 Exp $\n+@comment $Id: install.texi,v 1.34 2001/06/25 00:21:28 jsm28 Exp $\n @c Copyright (C) 2001 Free Software Foundation, Inc.\n @c *** Converted to texinfo by Dean Wakerley, dean@wakerley.com\n \n@@ -105,8 +105,8 @@ This document describes the generic installation procedure for GCC as well\n as detailing some target specific installation instructions. \n \n GCC includes several components that previously were separate distributions \n-with their own installation instructions. This document supersedes all \n-package specific installation instructions. We provide the component \n+with their own installation instructions.  This document supersedes all \n+package specific installation instructions.  We provide the component \n specific installation information in the source distribution for historical \n reference purposes only. \n \n@@ -147,7 +147,7 @@ The installation procedure itself is broken into five steps.\n @end ifnotinfo\n \n Please note that GCC does not support @samp{make uninstall} and probably\n-won't do so in the near future as this would open a can of worms. Instead, \n+won't do so in the near future as this would open a can of worms.  Instead, \n we suggest that you install GCC into a directory of its own and simply\n remove that directory when you do not need that specific version of GCC\n any longer. \n@@ -193,7 +193,7 @@ are also included in the full distribution.\n If you choose to download specific components, you must download the core\n gcc distribution plus any language specific distributions you wish to\n use.  The core distribution includes the C language front end as well as the\n-shared components. Each language has a tarball which includes the language\n+shared components.  Each language has a tarball which includes the language\n front end as well as the language runtime (when appropriate).\n \n Unpack the core distribution as well as any language specific\n@@ -401,7 +401,7 @@ argument, only @option{--enable-shared} does.\n \n @item @anchor{with-gnu-as}--with-gnu-as\n Specify that the compiler should assume that the\n-assembler it finds is the GNU assembler. However, this does not modify\n+assembler it finds is the GNU assembler.  However, this does not modify\n the rules to find an assembler and will result in confusion if found\n assembler is not actually the GNU assembler.  (Confusion will also\n result if the compiler finds the GNU assembler but has not been\n@@ -434,14 +434,14 @@ Check the\n @file{@var{exec_prefix}/lib/gcc-lib/@var{target}/@var{version}}\n directory, where @var{exec_prefix} defaults to @var{prefix} which\n defaults to @file{/usr/local} unless overridden by the\n-@option{--prefix=/pathname} switch described above. @var{target} is the\n+@option{--prefix=/pathname} switch described above.  @var{target} is the\n target system triple, such as @var{sparc-sun-solaris2.7}, and\n @var{version} denotes the GCC version, such as 2.95.2.\n @item\n Check operating system specific directories (e.g. @file{/usr/ccs/bin} on\n Sun Solaris).\n @end itemize\n-Note that these rules do not check for the value of @env{PATH}. You may\n+Note that these rules do not check for the value of @env{PATH}.  You may\n want to use @option{--with-as} if no assembler is installed in the\n directories listed above, or if you have multiple assemblers installed\n and want to choose one that is not found by the above rules.\n@@ -545,7 +545,7 @@ Microsoft Win32 API thread support.\n Specify which cpu variant the\n compiler should generate code for by default.  This is currently\n only supported on the some ports, specifically arm, powerpc, and\n-SPARC. If configure does not recognize the model name (e.g. arm700,\n+SPARC.  If configure does not recognize the model name (e.g. arm700,\n 603e, or ultrasparc) you provide, please check the configure script\n for a complete list of supported models.\n \n@@ -564,10 +564,10 @@ in @file{@var{prefix}/@var{dirname}/cpp}, in addition to @var{bindir}.\n @item --enable-maintainer-mode\n The build rules that\n regenerate the GCC master message catalog @file{gcc.pot} are normally\n-disabled. This is because it can only be rebuilt if the complete source\n-tree is present. If you have changed the sources and want to rebuild the\n+disabled.  This is because it can only be rebuilt if the complete source\n+tree is present.  If you have changed the sources and want to rebuild the\n catalog, configuring with @option{--enable-maintainer-mode} will enable\n-this. Note that you need a recent version of the @code{gettext} tools\n+this.  Note that you need a recent version of the @code{gettext} tools\n to do so.\n \n @item --enable-version-specific-runtime-libs\n@@ -578,12 +578,12 @@ addition, libstdc++'s include files will be installed in\n @file{@var{libsubdir}/include/g++} unless you overruled it by using\n @option{--with-gxx-include-dir=@var{dirname}}.  Using this option is\n particularly useful if you intend to use several versions of GCC in\n-parallel. This is currently supported by @samp{libf2c} and\n+parallel.  This is currently supported by @samp{libf2c} and\n @samp{libstdc++}.\n \n @item --enable-languages=@var{lang1},@var{lang2},@dots{}\n Specify that only a particular subset of compilers and\n-their runtime libraries should be built. For a list of valid values for\n+their runtime libraries should be built.  For a list of valid values for\n @var{langN} you can issue the following command in the\n @file{gcc} directory of your GCC source tree:@* @samp{grep language=\n */config-lang.in}@* Currently, you can use any of the following:\n@@ -624,10 +624,10 @@ to look up installations paths in the registry using the following key:\n @end smallexample\n \n @var{KEY} defaults to GCC version number, and can be overridden by the\n-@option{--enable-win32-registry=@var{KEY}} option. Vendors and distributors\n+@option{--enable-win32-registry=@var{KEY}} option.  Vendors and distributors\n who use custom installers are encouraged to provide a different key,\n perhaps one comprised of vendor name and GCC version number, to\n-avoid conflict with existing installations. This feature is enabled\n+avoid conflict with existing installations.  This feature is enabled\n by default, and can be disabled by @option{--disable-win32-registry}\n option.  This option has no effect on the other hosts.\n \n@@ -654,8 +654,8 @@ checks @samp{rtl} and @samp{gcac} are very expensive.\n @itemx --disable-nls\n The @option{--enable-nls} option enables Native Language Support (NLS),\n which lets GCC output diagnostics in languages other than American\n-English. Native Language Support is enabled by default if not doing a\n-canadian cross build. The @option{--disable-nls} option disables NLS.\n+English.  Native Language Support is enabled by default if not doing a\n+canadian cross build.  The @option{--disable-nls} option disables NLS.\n \n @item --with-included-gettext\n If NLS is enabled, the @option{--with-included-gettext} option causes the build\n@@ -819,7 +819,7 @@ bootstrap4} to increase the number of stages of bootstrap.\n \n If you used the flag @option{--enable-languages=@dots{}} to restrict\n the compilers to be built, only those you've actually enabled will be\n-built. This will of course only build those runtime libraries, for\n+built.  This will of course only build those runtime libraries, for\n which the particular compiler has been built.  Please note,\n that re-defining LANGUAGES when calling @samp{make bootstrap}\n @strong{does not} work anymore!\n@@ -907,7 +907,7 @@ the number of processors in your machine.\n to current development versions of GCC and GCC 3.0 or later. \n GCC 2.95.x does not come with a testsuite.}\n \n-Before you install GCC, you might wish to run the testsuite. This\n+Before you install GCC, you might wish to run the testsuite.  This\n step is optional and may require you to download additional software.\n \n First, you must have @uref{download.html,,downloaded the testsuites}. \n@@ -959,7 +959,7 @@ compilers as well as the C++ and Java runtime libraries.\n \n As a first possibility to cut down the number of tests that are run it is\n possible to use @samp{make check-gcc} or @samp{make check-g++}\n-in the gcc subdirectory of the object directory. To further cut down the\n+in the gcc subdirectory of the object directory.  To further cut down the\n tests the following is possible:\n \n @example\n@@ -985,9 +985,9 @@ output of @samp{make check} into a file and look at the\n @section How to interpret test results\n \n After the testsuite has run you'll find various @file{*.sum} and @file{*.log}\n-files in the testsuite subdirectories. The @file{*.log} files contain a\n+files in the testsuite subdirectories.  The @file{*.log} files contain a\n detailed log of the compiler invocations and the corresponding\n-results, the @file{*.sum} files summarize the results. These summaries list\n+results, the @file{*.sum} files summarize the results.  These summaries list\n all the tests that have been run with a corresponding status code:\n \n @itemize @bullet\n@@ -1016,22 +1016,22 @@ problem in future releases.\n @section Submitting test results\n \n If you want to report the results to the GCC project, use the\n-@file{contrib/test_summary} shell script. Start it in the @var{objdir} with\n+@file{contrib/test_summary} shell script.  Start it in the @var{objdir} with\n \n @example\n     @var{srcdir}/contrib/test_summary -p your_commentary.txt \\\n         -m gcc-testresults@@gcc.gnu.org |sh\n @end example\n \n This script uses the @command{Mail} program to send the results, so\n-make sure it is in your @env{PATH}. The file @file{your_commentary.txt} is\n+make sure it is in your @env{PATH}.  The file @file{your_commentary.txt} is\n prepended to the testsuite summary and should contain any special\n-remarks you have on your results or your build environment. Please\n+remarks you have on your results or your build environment.  Please\n do not edit the testsuite result block or the subject line, as these\n messages are automatically parsed and presented at the \n @uref{http://gcc.gnu.org/testresults/,,GCC testresults} web\n page.  Here you can also gather information on how specific tests\n-behave on different platforms and compare them with your results. A\n+behave on different platforms and compare them with your results.  A\n few failing testcases are possible even on released versions and you\n should look here first if you think your results are unreasonable.\n \n@@ -1110,7 +1110,7 @@ recent version of GCC.\n @cindex Binaries\n @cindex Installing GCC: Binaries\n \n-We are often asked about pre-compiled versions of GCC. While we cannot\n+We are often asked about pre-compiled versions of GCC.  While we cannot\n provide these for all platforms, below you'll find links to binaries for\n various platforms where creating them by yourself is not easy due to various\n reasons.\n@@ -1172,9 +1172,9 @@ In addition to those specific offerings, you can get a binary\n distribution CD-ROM from the\n @uref{http://www.fsf.org/order/order.html,,Free Software Foundation}. \n It contains binaries for a number of platforms, and\n-includes not only GCC, but other stuff as well. The current CD does\n+includes not only GCC, but other stuff as well.  The current CD does\n not contain the latest version of GCC, but it should allow\n-bootstrapping the compiler. An updated version of that disk is in the\n+bootstrapping the compiler.  An updated version of that disk is in the\n works.\n \n @html\n@@ -1411,7 +1411,7 @@ MIL-STD-1750A processors.\n \n The MIL-STD-1750A cross configuration produces output for\n @code{as1750}, an assembler/linker available under the GNU Public\n-License for the 1750A. @code{as1750} can be obtained at\n+License for the 1750A.  @code{as1750} can be obtained at\n @uref{ftp://ftp.fta-berlin.de/pub/crossgcc/1750gals/}.\n A similarly licensed simulator for\n the 1750A is available from same address.\n@@ -1902,15 +1902,15 @@ glibc 2.2.4 whether patches for GCC 3.0 are needed.  You can use glibc\n @heading @anchor{ix86-*-linux*oldld}i?86-*-linux*oldld\n Use this configuration to generate @file{a.out} binaries on Linux-based\n GNU systems if you do not have gas/binutils version 2.5.2 or later\n-installed. This is an obsolete configuration.\n+installed.  This is an obsolete configuration.\n \n @html\n </p>\n <hr>\n @end html\n @heading @anchor{ix86-*-linux*aout}i?86-*-linux*aout\n Use this configuration to generate @file{a.out} binaries on Linux-based\n-GNU systems. This configuration is being superseded. You must use\n+GNU systems.  This configuration is being superseded.  You must use\n gas/binutils version 2.5.2 or later.\n \n @html\n@@ -1965,7 +1965,7 @@ native compiler.}\n \n Use of the @option{-march-pentiumpro} flag can result in\n unrecognized opcodes when using the native assembler on OS versions before\n-5.0.6. (Support for P6 opcodes was added to the native ELF assembler in\n+5.0.6.  (Support for P6 opcodes was added to the native ELF assembler in\n that version.)  While it's rather rare to see these emitted by GCC yet, \n errors of the basic form:\n \n@@ -2322,11 +2322,11 @@ bootstrap.  Binaries are available from the OSU-CIS archive, at\n <hr>\n @end html\n @heading @anchor{m68k-bull-sysv}m68k-bull-sysv\n-Bull DPX/2 series 200 and 300 with BOS-2.00.45 up to BOS-2.01. GCC works\n-either with native assembler or GNU assembler. You can use\n+Bull DPX/2 series 200 and 300 with BOS-2.00.45 up to BOS-2.01.  GCC works\n+either with native assembler or GNU assembler.  You can use\n GNU assembler with native coff generation by providing @option{--with-gnu-as} to\n the configure script or use GNU assembler with dbx-in-coff encapsulation\n-by providing @samp{--with-gnu-as --stabs}. For any problem with native\n+by providing @samp{--with-gnu-as --stabs}.  For any problem with native\n assembler or for availability of the DPX/2 port of GAS, contact\n @email{F.Pierresteguy@@frcl.bull.fr}.\n \n@@ -2710,7 +2710,7 @@ and use the @option{--with-gnu-as} configure option when configuring gcc.\n GNU as is distributed as part of the binutils package.\n \n You must use GAS on these platforms, as the native assembler can not handle \n-the code for exception handling support. Either of these messages indicates \n+the code for exception handling support.  Either of these messages indicates \n that you are using the MIPS assembler when instead you should be using GAS:\n \n @samp{  as0: Error: ./libgcc2.c, line 1:Badly delimited numeric literal\n@@ -2780,18 +2780,18 @@ with O32 ABI only support by configuring it for the mips-sgi-irix5\n target.  See the link below for details.\n \n GCC does not correctly pass/return structures which are\n-smaller than 16 bytes and which are not 8 bytes. The problem is very\n-involved and difficult to fix. It affects a number of other targets also,\n+smaller than 16 bytes and which are not 8 bytes.  The problem is very\n+involved and difficult to fix.  It affects a number of other targets also,\n but IRIX 6 is affected the most, because it is a 64 bit target, and 4 byte\n-structures are common. The exact problem is that structures are being padded\n+structures are common.  The exact problem is that structures are being padded\n at the wrong end, e.g. a 4 byte structure is loaded into the lower 4 bytes\n of the register when it should be loaded into the upper 4 bytes of the\n register.\n \n GCC is consistent with itself, but not consistent with the SGI C compiler\n (and the SGI supplied runtime libraries), so the only failures that can\n happen are when there are library functions that take/return such\n-structures. There are very few such library functions. I can only recall\n+structures.  There are very few such library functions.  I can only recall\n seeing two of them: inet_ntoa, and semctl.\n \n See @uref{http://freeware.sgi.com/,,http://freeware.sgi.com/} for more\n@@ -2860,7 +2860,7 @@ switch by using the configure option @option{--with-cpu-@var{cpu_type}}.\n \n You will need \n @uref{ftp://ftp.varesearch.com/pub/support/hjl/binutils,,binutils-2.9.4.0.8} \n-or newer for a working GCC. It is strongly recommended to recompile binutils\n+or newer for a working GCC.  It is strongly recommended to recompile binutils\n if you initially built it with gcc-2.7.2.x.\n \n You can specify a default version for the @option{-mcpu=@var{cpu_type}}\n@@ -2955,7 +2955,7 @@ can be safely ignored; the stage 3 compiler is correct.\n @end html\n @heading @anchor{*-*-solaris*}*-*-solaris*\n \n-Starting with Solaris, Sun does not ship a C compiler any more. To\n+Starting with Solaris, Sun does not ship a C compiler any more.  To\n bootstrap and install GCC you first have to install a pre-built\n compiler, see our @uref{binaries.html,,binaries page} for\n details.\n@@ -3026,13 +3026,13 @@ For example, the linker may hang indefinitely.  The fix is to remove\n @file{/usr/ucb} from your @code{PATH}.\n \n All releases of GNU binutils prior to 2.11.1 have known bugs on this\n-platform. We recommend the use of GNU binutils 2.11.1 or the vendor\n+platform.  We recommend the use of GNU binutils 2.11.1 or the vendor\n tools (Sun as, Sun ld).\n \n Unfortunately, C++ shared libraries, including libstdc++, won't work\n properly if assembled with Sun as: the linker will complain about\n relocations in read-only sections, in the definition of virtual\n-tables. Also, Sun as fails to process long symbols resulting from\n+tables.  Also, Sun as fails to process long symbols resulting from\n mangling template-heavy C++ function names.\n \n @html"}, {"sha": "61d21e9152b11c24fad61e09ef9f883c639b40ae", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 53, "deletions": 53, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/767094ddfda30cbecd8944f64395640b217446b5/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/767094ddfda30cbecd8944f64395640b217446b5/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=767094ddfda30cbecd8944f64395640b217446b5", "patch": "@@ -1352,7 +1352,7 @@ otherwise be invalid, or have different behavior.\n @item -fno-gnu-keywords\n @opindex fno-gnu-keywords\n Do not recognize @code{typeof} as a keyword, so that code can use this\n-word as an identifier. You can use the keyword @code{__typeof__} instead.\n+word as an identifier.  You can use the keyword @code{__typeof__} instead.\n @option{-ansi} implies @option{-fno-gnu-keywords}.\n \n @item -fno-honor-std\n@@ -1440,7 +1440,7 @@ This information is generally only useful to the G++ development team.\n @opindex ftemplate-depth\n Set the maximum instantiation depth for template classes to @var{n}.\n A limit on the template instantiation depth is needed to detect\n-endless recursions during template class instantiation. ANSI/ISO C++\n+endless recursions during template class instantiation.  ANSI/ISO C++\n conforming programs must not rely on a maximum depth greater than 17.\n \n @item -fuse-cxa-atexit\n@@ -1531,18 +1531,18 @@ you can use @samp{grep -v} to filter out those warnings.\n \n @item -Wno-deprecated (C++ only)\n @opindex Wno-deprecated\n-Do not warn about usage of deprecated features. @xref{Deprecated Features}.\n+Do not warn about usage of deprecated features.  @xref{Deprecated Features}.\n \n @item -Wno-non-template-friend (C++ only)\n @opindex Wno-non-template-friend\n Disable warnings when non-templatized friend functions are declared\n-within a template. With the advent of explicit template specification\n+within a template.  With the advent of explicit template specification\n support in g++, if the name of the friend is an unqualified-id (i.e.,\n @samp{friend foo(int)}), the C++ language specification demands that the\n-friend declare or define an ordinary, nontemplate function. (Section\n-14.5.3). Before g++ implemented explicit specification, unqualified-ids\n+friend declare or define an ordinary, nontemplate function.  (Section\n+14.5.3).  Before g++ implemented explicit specification, unqualified-ids\n could be interpreted as a particular specialization of a templatized\n-function. Because this non-conforming behavior is no longer the default\n+function.  Because this non-conforming behavior is no longer the default\n behavior for g++, @option{-Wnon-template-friend} allows the compiler to\n check existing code for potential trouble spots, and is on by default.\n This new compiler behavior can be turned off with\n@@ -2003,7 +2003,7 @@ Warn whenever a function is defined with a return-type that defaults to\n return-value in a function whose return-type is not @code{void}.\n \n For C++, a function without return type always produces a diagnostic\n-message, even when @option{-Wno-return-type} is specified. The only\n+message, even when @option{-Wno-return-type} is specified.  The only\n exceptions are @samp{main} and functions defined in system headers.\n \n @item -Wswitch\n@@ -2991,32 +2991,32 @@ options, in particular with and without @option{-g}.\n @item -fdump-translation-unit-@var{number} (C and C++ only)\n @opindex fdump-translation-unit\n Dump a representation of the tree structure for the entire translation\n-unit to a file. The file name is made by appending @file{.tu} to the\n-source file name. If the @samp{-@var{number}} form is used, @var{number}\n+unit to a file.  The file name is made by appending @file{.tu} to the\n+source file name.  If the @samp{-@var{number}} form is used, @var{number}\n controls the details of the dump as described for the @option{-fdump-tree} options.\n \n @item -fdump-class-hierarchy (C++ only)\n @item -fdump-class-hierarchy-@var{number} (C++ only)\n @opindex fdump-class-hierarchy\n Dump a representation of each class's hierarchy and virtual function\n-table layout to a file. The file name is made by appending @file{.class}\n-to the source file name. If the @samp{-@var{number}} form is used, @var{number}\n+table layout to a file.  The file name is made by appending @file{.class}\n+to the source file name.  If the @samp{-@var{number}} form is used, @var{number}\n controls the details of the dump as described for the @option{-fdump-tree}\n options.\n \n @item -fdump-ast-@var{switch} (C++ only)\n @item -fdump-ast-@var{switch}-@var{number} (C++ only)\n @opindex fdump-ast\n Control the dumping at various stages of processing the abstract syntax\n-tree to a file. The file name is generated by appending a switch\n-specific suffix to the source file name. If the @samp{-@var{number}} form is\n+tree to a file.  The file name is generated by appending a switch\n+specific suffix to the source file name.  If the @samp{-@var{number}} form is\n used, @var{number} is a bit mask which controls the details of the\n-dump. The following bits are meaningful (these are not set symbolically,\n+dump.  The following bits are meaningful (these are not set symbolically,\n as the primary function of these dumps is for debugging gcc itself):\n \n @table @samp\n @item bit0 (1)\n-Print the address of each node. Usually this is not meaningful as it\n+Print the address of each node.  Usually this is not meaningful as it\n changes according to the environment and source file.\n @item bit1 (2)\n Inhibit dumping of members of a scope or body of a function, unless they\n@@ -3458,14 +3458,14 @@ This pass also performs global constant and copy propagation.\n @item -fgcse-lm\n @opindex fgcse-lm\n When @option{-fgcse-lm} is enabled, global common subexpression elimination will\n-attempt to move loads which are only killed by stores into themselves. This\n+attempt to move loads which are only killed by stores into themselves.  This\n allows a loop containing a load/store sequence to be changed to a load outside\n the loop, and a copy/store within the loop.\n \n @item -fgcse-sm\n @opindex fgcse-sm\n When @option{-fgcse-sm} is enabled, A store motion pass is run after global common\n-subexpression elimination. This pass will attempt to move stores out of loops.\n+subexpression elimination.  This pass will attempt to move stores out of loops.\n When used in conjunction with @option{-fgcse-lm}, loops containing a load/store sequence\n can be changed to a load before the loop and a store after the loop.\n \n@@ -3906,7 +3906,7 @@ file.  The preprocessor outputs one @code{make} rule containing the\n object file name for that source file, a colon, and the names of all the\n included files.  Unless overridden explicitly, the object file name\n consists of the basename of the source file with any suffix replaced with\n-object file suffix. If there are many included files then the\n+object file suffix.  If there are many included files then the\n rule is split into several lines using @samp{\\}-newline.\n \n @option{-M} implies @option{-E}.\n@@ -4217,7 +4217,7 @@ mechanism when this option is specified.\n @opindex nostdlib\n Do not use the standard system startup files or libraries when linking.\n No startup files and only the libraries you specify will be passed to\n-the linker. The compiler may generate calls to memcmp, memset, and memcpy\n+the linker.  The compiler may generate calls to memcmp, memset, and memcpy\n for System V (and ISO C) environments or to bcopy and bzero for\n BSD environments.  These entries are usually resolved by entries in\n libc.  These entry points should be supplied through some other\n@@ -4264,10 +4264,10 @@ form an executable.  Not all systems support this option.  For predictable\n results, you must also specify the same set of options that were used to\n generate code (@option{-fpic}, @option{-fPIC}, or model suboptions)\n when you specify this option.@footnote{On some systems, @samp{gcc -shared}\n-needs to build supplementary stub code for constructors to work. On\n+needs to build supplementary stub code for constructors to work.  On\n multi-libbed systems, @samp{gcc -shared} must select the correct support\n libraries to link against.  Failing to supply the correct flags may lead\n-to subtle defects. Supplying them in cases where they are not necessary\n+to subtle defects.  Supplying them in cases where they are not necessary\n is innocuous.}\n \n @item -shared-libgcc\n@@ -4345,7 +4345,7 @@ searched for header files.  This can be used to override a system header\n file, substituting your own version, since these directories are\n searched before the system header file directories.  However, you should\n not use this option to add directories that contain vendor-supplied\n-system header files (use @option{-isystem} for that). If you use more than\n+system header files (use @option{-isystem} for that).  If you use more than\n one @option{-I} option, the directories are scanned in left-to-right\n order; the standard system directories come after.\n \n@@ -4627,7 +4627,7 @@ disposal mechanism.\n \n @item %.@var{SUFFIX}\n Substitutes @var{.SUFFIX} for the suffixes of a matched switch's args\n-when it is subsequently output with @samp{%*}. @var{SUFFIX} is\n+when it is subsequently output with @samp{%*}.  @var{SUFFIX} is\n terminated by the next space or %.\n \n @item %w\n@@ -5093,7 +5093,7 @@ does not have code to emulate those instructions.\n \n @item -mcpu32\n @opindex mcpu32\n-Generate output for a CPU32. This is the default\n+Generate output for a CPU32.  This is the default\n when the compiler is configured for CPU32-based systems.\n \n Use this option for microcontrollers with a\n@@ -5417,7 +5417,7 @@ Cypress CY7C602 chip, as used in the SparcStation/SparcServer 3xx series.\n This is also appropriate for the older SparcStation 1, 2, IPX etc.\n \n With @option{-msupersparc} the compiler optimizes code for the SuperSparc cpu, as\n-used in the SparcStation 10, 1000 and 2000 series. This flag also enables use\n+used in the SparcStation 10, 1000 and 2000 series.  This flag also enables use\n of the full SPARC v8 instruction set.\n \n These options are deprecated and will be deleted in a future GCC release.\n@@ -6338,7 +6338,7 @@ SVr4.\n @end enumerate\n \n @option{-msvr4} is the default for the m88k-motorola-sysv4 and\n-m88k-dg-dgux m88k configurations. @option{-msvr3} is the default for all\n+m88k-dg-dgux m88k configurations.  @option{-msvr3} is the default for all\n other m88k configurations.\n \n @item -mversion-03.00\n@@ -7379,7 +7379,7 @@ in ordinary CPU registers instead.\n @opindex mno-fancy-math-387\n Some 387 emulators do not support the @code{sin}, @code{cos} and\n @code{sqrt} instructions for the 387.  Specify this option to avoid\n-generating those instructions. This option is the default on FreeBSD.\n+generating those instructions.  This option is the default on FreeBSD.\n As of revision 2.6.1, these instructions are not generated unless you\n also use the @option{-funsafe-math-optimizations} switch.\n \n@@ -7497,37 +7497,37 @@ may want to reduce the preferred alignment to\n \n @item -mpush-args\n @opindex mpush-args\n-Use PUSH operations to store outgoing parameters. This method is shorter\n+Use PUSH operations to store outgoing parameters.  This method is shorter\n and usually equally fast as method using SUB/MOV operations and is enabled\n-by default. In some cases disabling it may improve performance because of\n+by default.  In some cases disabling it may improve performance because of\n improved scheduling and reduced dependencies.\n \n @item -maccumulate-outgoing-args\n @opindex maccumulate-outgoing-args\n If enabled, the maximum amount of space required for outgoing arguments will be\n-computed in the function prologue. This in faster on most modern CPUs\n+computed in the function prologue.  This in faster on most modern CPUs\n because of reduced dependencies, improved scheduling and reduced stack usage\n when preferred stack boundary is not equal to 2.  The drawback is a notable\n-increase in code size. This switch implies @option{-mno-push-args}.\n+increase in code size.  This switch implies @option{-mno-push-args}.\n \n @item -mthreads\n @opindex mthreads\n-Support thread-safe exception handling on @samp{Mingw32}. Code that relies\n+Support thread-safe exception handling on @samp{Mingw32}.  Code that relies\n on thread-safe exception handling must compile and link all code with the\n-@option{-mthreads} option. When compiling, @option{-mthreads} defines\n+@option{-mthreads} option.  When compiling, @option{-mthreads} defines\n @option{-D_MT}; when linking, it links in a special thread helper library\n @option{-lmingwthrd} which cleans up per thread exception handling data.\n \n @item -mno-align-stringops\n @opindex mno-align-stringops\n-Do not align destination of inlined string operations. This switch reduces\n+Do not align destination of inlined string operations.  This switch reduces\n code size and improves performance in case the destination is already aligned,\n but gcc don't know about it.\n \n @item -minline-all-stringops\n @opindex minline-all-stringops\n By default GCC inlines string operations only when destination is known to be\n-aligned at least to 4 byte boundary. This enables more inlining, increase code\n+aligned at least to 4 byte boundary.  This enables more inlining, increase code\n size, but may improve performance of code that depends on fast memcpy, strlen\n and memset for short lengths.\n \n@@ -8043,7 +8043,7 @@ These @samp{-m} options are defined for the Clipper implementations:\n @table @gcctabopt\n @item -mc300\n @opindex mc300\n-Produce code for a C300 Clipper processor. This is the default.\n+Produce code for a C300 Clipper processor.  This is the default.\n \n @item -mc400\n @opindex mc400\n@@ -8531,22 +8531,22 @@ This is the default for all systems.\n @item -m32381\n @opindex m32381\n Generate output containing 32381 instructions for floating point.  This\n-also implies @option{-m32081}. The 32381 is only compatible with the 32332\n-and 32532 cpus. This is the default for the pc532-netbsd configuration.\n+also implies @option{-m32081}.  The 32381 is only compatible with the 32332\n+and 32532 cpus.  This is the default for the pc532-netbsd configuration.\n \n @item -mmulti-add\n @opindex mmulti-add\n Try and generate multiply-add floating point instructions @code{polyF}\n-and @code{dotF}. This option is only available if the @option{-m32381}\n-option is in effect. Using these instructions requires changes to to\n+and @code{dotF}.  This option is only available if the @option{-m32381}\n+option is in effect.  Using these instructions requires changes to to\n register allocation which generally has a negative impact on\n performance.  This option should only be enabled when compiling code\n particularly likely to make heavy use of multiply-add instructions.\n \n @item -mnomulti-add\n @opindex mnomulti-add\n Do not try and generate multiply-add floating point instructions\n-@code{polyF} and @code{dotF}. This is the default on all platforms.\n+@code{polyF} and @code{dotF}.  This is the default on all platforms.\n \n @item -msoft-float\n @opindex msoft-float\n@@ -8555,12 +8555,12 @@ Generate output containing library calls for floating point.\n \n @item -mnobitfield\n @opindex mnobitfield\n-Do not use the bit-field instructions. On some machines it is faster to\n-use shifting and masking operations. This is the default for the pc532.\n+Do not use the bit-field instructions.  On some machines it is faster to\n+use shifting and masking operations.  This is the default for the pc532.\n \n @item -mbitfield\n @opindex mbitfield\n-Do use the bit-field instructions. This is the default for all platforms\n+Do use the bit-field instructions.  This is the default for all platforms\n except the pc532.\n \n @item -mrtd\n@@ -8596,19 +8596,19 @@ compiled with the Unix compiler.\n \n @item -mnoregparam\n @opindex mnoregparam\n-Do not pass any arguments in registers. This is the default for all\n+Do not pass any arguments in registers.  This is the default for all\n targets.\n \n @item -msb\n @opindex msb\n It is OK to use the sb as an index register which is always loaded with\n-zero. This is the default for the pc532-netbsd target.\n+zero.  This is the default for the pc532-netbsd target.\n \n @item -mnosb\n @opindex mnosb\n The sb register is not available for use or has not been initialized to\n-zero by the run time system. This is the default for all targets except\n-the pc532-netbsd. It is also implied whenever @option{-mhimem} or\n+zero by the run time system.  This is the default for all targets except\n+the pc532-netbsd.  It is also implied whenever @option{-mhimem} or\n @option{-fpic} is set.\n \n @item -mhimem\n@@ -8672,7 +8672,7 @@ Code size will be smaller.\n @item -mcall-prologues\n @opindex mcall-prologues\n Functions prologues/epilogues expanded as call to appropriate\n-subroutines. Code size will be smaller.\n+subroutines.  Code size will be smaller.\n \n @item -mno-tablejump\n @opindex mno-tablejump\n@@ -8924,7 +8924,7 @@ it.\n @table @gcctabopt\n @item -fexceptions\n @opindex fexceptions\n-Enable exception handling. Generates extra code needed to propagate\n+Enable exception handling.  Generates extra code needed to propagate\n exceptions.  For some targets, this implies GCC will generate frame\n unwind information for all functions, which can produce significant data\n size overhead, although it does not affect execution.  If you do not\n@@ -9311,7 +9311,7 @@ option, and that not all targets provide complete support for it.\n \n This section describes several environment variables that affect how GCC\n operates.  Some of them work by specifying directories or prefixes to use\n-when searching for various kinds of files. Some are used to specify other\n+when searching for various kinds of files.  Some are used to specify other\n aspects of the compilation environment.\n \n @ifclear INTERNALS\n@@ -9459,7 +9459,7 @@ file @var{file} using @var{target} as the target name.\n @item LANG\n @findex LANG\n @cindex locale definition\n-This variable is used to pass locale information to the compiler. One way in\n+This variable is used to pass locale information to the compiler.  One way in\n which this information is used is to determine the character set to be used\n when character literals, string literals and comments are parsed in C and C++.\n When the compiler is configured to allow multibyte characters,"}, {"sha": "f23e3d0b12a85a38a35381c1a11f4a32c2198da5", "filename": "gcc/doc/objc.texi", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/767094ddfda30cbecd8944f64395640b217446b5/gcc%2Fdoc%2Fobjc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/767094ddfda30cbecd8944f64395640b217446b5/gcc%2Fdoc%2Fobjc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fobjc.texi?ref=767094ddfda30cbecd8944f64395640b217446b5", "patch": "@@ -9,7 +9,7 @@\n @chapter GNU Objective-C runtime features\n \n This document is meant to describe some of the GNU Objective-C runtime\n-features. It is not intended to teach you Objective-C, there are several\n+features.  It is not intended to teach you Objective-C, there are several\n resources on the Internet that present the language.  Questions and\n comments about this document to Ovidiu Predescu\n @email{ovidiu@@cup.hp.com}.\n@@ -28,12 +28,12 @@ comments about this document to Ovidiu Predescu\n \n The GNU Objective-C runtime provides a way that allows you to execute\n code before the execution of the program enters the @code{main}\n-function. The code is executed on a per-class and a per-category basis,\n+function.  The code is executed on a per-class and a per-category basis,\n through a special class method @code{+load}.\n \n This facility is very useful if you want to initialize global variables\n which can be accessed by the program directly, without sending a message\n-to the class first. The usual way to initialize global variables, in the\n+to the class first.  The usual way to initialize global variables, in the\n @code{+initialize} method, might not be useful because\n @code{+initialize} is only called when the first message is sent to a\n class object, which in some cases could be too late.\n@@ -63,12 +63,12 @@ FileStream *Stderr = nil;\n @end example\n \n In this example, the initialization of @code{Stdin}, @code{Stdout} and\n-@code{Stderr} in @code{+initialize} occurs too late. The programmer can\n+@code{Stderr} in @code{+initialize} occurs too late.  The programmer can\n send a message to one of these objects before the variables are actually\n-initialized, thus sending messages to the @code{nil} object. The\n+initialized, thus sending messages to the @code{nil} object.  The\n @code{+initialize} method which actually initializes the global\n variables is not invoked until the first message is sent to the class\n-object. The solution would require these variables to be initialized\n+object.  The solution would require these variables to be initialized\n just before entering @code{main}.\n \n The correct solution of the above problem is to use the @code{+load}\n@@ -90,7 +90,7 @@ method instead of @code{+initialize}:\n \n @end example\n \n-The @code{+load} is a method that is not overridden by categories. If a\n+The @code{+load} is a method that is not overridden by categories.  If a\n class and a category of it both implement @code{+load}, both methods are\n invoked.  This allows some additional initializations to be performed in\n a category.\n@@ -147,23 +147,23 @@ category implemented in the same file;\n @end itemize\n \n You should make no assumptions about receiving @code{+load} in sibling\n-classes when you write @code{+load} of a class. The order in which\n+classes when you write @code{+load} of a class.  The order in which\n sibling classes receive @code{+load} is not guaranteed.\n \n The order in which @code{+load} and @code{+initialize} are called could\n-be problematic if this matters. If you don't allocate objects inside\n+be problematic if this matters.  If you don't allocate objects inside\n @code{+load}, it is guaranteed that @code{+load} is called before\n-@code{+initialize}. If you create an object inside @code{+load} the\n+@code{+initialize}.  If you create an object inside @code{+load} the\n @code{+initialize} method of object's class is invoked even if\n-@code{+load} was not invoked. Note if you explicitly call @code{+load}\n-on a class, @code{+initialize} will be called first. To avoid possible\n+@code{+load} was not invoked.  Note if you explicitly call @code{+load}\n+on a class, @code{+initialize} will be called first.  To avoid possible\n problems try to implement only one of these methods.\n \n The @code{+load} method is also invoked when a bundle is dynamically\n-loaded into your running program. This happens automatically without any\n-intervening operation from you. When you write bundles and you need to\n+loaded into your running program.  This happens automatically without any\n+intervening operation from you.  When you write bundles and you need to\n write @code{+load} you can safely create and send messages to objects whose\n-classes already exist in the running program. The same restrictions as\n+classes already exist in the running program.  The same restrictions as\n above apply to classes defined in bundle.\n \n \n@@ -172,7 +172,7 @@ above apply to classes defined in bundle.\n @section Type encoding\n \n The Objective-C compiler generates type encodings for all the\n-types. These type encodings are used at runtime to find out information\n+types.  These type encodings are used at runtime to find out information\n about selectors and methods and about objects and classes.\n \n The types are encoded in the following way:\n@@ -224,12 +224,12 @@ The types are encoded in the following way:\n \n The encoding of bit-fields has changed to allow bit-fields to be properly\n handled by the runtime functions that compute sizes and alignments of\n-types that contain bit-fields. The previous encoding contained only the\n-size of the bit-field. Using only this information it is not possible to\n-reliably compute the size occupied by the bit-field. This is very\n+types that contain bit-fields.  The previous encoding contained only the\n+size of the bit-field.  Using only this information it is not possible to\n+reliably compute the size occupied by the bit-field.  This is very\n important in the presence of the Boehm's garbage collector because the\n objects are allocated using the typed memory facility available in this\n-collector. The typed memory allocation requires information about where\n+collector.  The typed memory allocation requires information about where\n the pointers are located inside the object.\n \n The position in the bit-field is the position, counting in bits, of the\n@@ -279,7 +279,7 @@ struct @{\n @sp 1\n \n In addition to the types the compiler also encodes the type\n-specifiers. The table below describes the encoding of the current\n+specifiers.  The table below describes the encoding of the current\n Objective-C type specifiers:\n \n @sp 1\n@@ -303,7 +303,7 @@ Objective-C type specifiers:\n \n @sp 1\n \n-The type specifiers are encoded just before the type. Unlike types\n+The type specifiers are encoded just before the type.  Unlike types\n however, the type specifiers are only encoded when they appear in method\n argument types.\n \n@@ -313,34 +313,34 @@ argument types.\n \n Support for a new memory management policy has been added by using a\n powerful conservative garbage collector, known as the\n-Boehm-Demers-Weiser conservative garbage collector. It is available from\n+Boehm-Demers-Weiser conservative garbage collector.  It is available from\n @w{@uref{http://www.hpl.hp.com/personal/Hans_Boehm/gc/}}.\n \n To enable the support for it you have to configure the compiler using an\n-additional argument, @w{@option{--enable-objc-gc}}. You need to have\n-garbage collector installed before building the compiler. This will\n+additional argument, @w{@option{--enable-objc-gc}}.  You need to have\n+garbage collector installed before building the compiler.  This will\n build an additional runtime library which has several enhancements to\n-support the garbage collector. The new library has a new name,\n+support the garbage collector.  The new library has a new name,\n @file{libobjc_gc.a} to not conflict with the non-garbage-collected\n library.\n \n When the garbage collector is used, the objects are allocated using the\n so-called typed memory allocation mechanism available in the\n-Boehm-Demers-Weiser collector. This mode requires precise information on\n-where pointers are located inside objects. This information is computed\n+Boehm-Demers-Weiser collector.  This mode requires precise information on\n+where pointers are located inside objects.  This information is computed\n once per class, immediately after the class has been initialized.\n \n There is a new runtime function @code{class_ivar_set_gcinvisible()}\n which can be used to declare a so-called @dfn{weak pointer}\n-reference. Such a pointer is basically hidden for the garbage collector;\n+reference.  Such a pointer is basically hidden for the garbage collector;\n this can be useful in certain situations, especially when you want to\n keep track of the allocated objects, yet allow them to be\n-collected. This kind of pointers can only be members of objects, you\n-cannot declare a global pointer as a weak reference. Every type which is\n+collected.  This kind of pointers can only be members of objects, you\n+cannot declare a global pointer as a weak reference.  Every type which is\n a pointer type can be declared a weak pointer, including @code{id},\n @code{Class} and @code{SEL}.\n \n-Here is an example of how to use this feature. Suppose you want to\n+Here is an example of how to use this feature.  Suppose you want to\n implement a class whose instances hold a weak pointer reference; the\n following class does this:\n \n@@ -379,7 +379,7 @@ following class does this:\n @end example\n \n Weak pointers are supported through a new type character specifier\n-represented by the @samp{!} character. The\n+represented by the @samp{!} character.  The\n @code{class_ivar_set_gcinvisible()} function adds or removes this\n specifier to the string type description of the instance variable named\n as argument.\n@@ -389,7 +389,7 @@ as argument.\n @section Constant string objects\n \n GNU Objective-C provides constant string objects that are generated\n-directly by the compiler. You declare a constant string object by\n+directly by the compiler.  You declare a constant string object by\n prefixing a C constant string with the character @samp{@@}:\n \n @example\n@@ -398,11 +398,11 @@ prefixing a C constant string with the character @samp{@@}:\n \n The constant string objects are usually instances of the\n @code{NXConstantString} class which is provided by the GNU Objective-C\n-runtime. To get the definition of this class you must include the\n+runtime.  To get the definition of this class you must include the\n @file{objc/NXConstStr.h} header file.\n \n User defined libraries may want to implement their own constant string\n-class. To be able to support them, the GNU Objective-C compiler provides\n+class.  To be able to support them, the GNU Objective-C compiler provides\n a new command line options @option{-fconstant-string-class=@var{class-name}}.\n The provided class should adhere to a strict structure, the same\n as @code{NXConstantString}'s structure:\n@@ -419,12 +419,12 @@ as @code{NXConstantString}'s structure:\n @end example\n \n User class libraries may choose to inherit the customized constant\n-string class from a different class than @code{Object}. There is no\n+string class from a different class than @code{Object}.  There is no\n requirement in the methods the constant string class has to implement.\n \n When a file is compiled with the @option{-fconstant-string-class} option,\n all the constant string objects will be instances of the class specified\n-as argument to this option. It is possible to have multiple compilation\n+as argument to this option.  It is possible to have multiple compilation\n units referring to different constant string classes, neither the\n compiler nor the linker impose any restrictions in doing this.\n "}, {"sha": "81af0157bfb32b3bd0ca918ff23d8233f4244855", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/767094ddfda30cbecd8944f64395640b217446b5/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/767094ddfda30cbecd8944f64395640b217446b5/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=767094ddfda30cbecd8944f64395640b217446b5", "patch": "@@ -160,7 +160,7 @@ An RTX code for other three input operations.  Currently only\n \n @item i\n An RTX code for an entire instruction:  @code{INSN}, @code{JUMP_INSN}, and\n-@code{CALL_INSN}. @xref{Insns}.\n+@code{CALL_INSN}.  @xref{Insns}.\n \n @item m\n An RTX code for something that matches in insns, such as\n@@ -1345,8 +1345,8 @@ by incrementing it, but there is no need to mention this in the RTL.\n @item (mem:@var{m} @var{addr} @var{alias})\n This RTX represents a reference to main memory at an address\n represented by the expression @var{addr}.  @var{m} specifies how large\n-a unit of memory is accessed. @var{alias} specifies an alias set for the\n-reference. In general two items are in different alias sets if they cannot\n+a unit of memory is accessed.  @var{alias} specifies an alias set for the\n+reference.  In general two items are in different alias sets if they cannot\n reference the same memory address.\n \n @findex addressof\n@@ -1432,7 +1432,7 @@ However, they can pretend to do so when only the sign of the result will\n be used, which is the case when the result is stored in the condition\n code.  And that is the @emph{only} way this kind of expression may\n validly be used: as a value to be stored in the condition codes, either\n-@code{(cc0)} or a register. @xref{Comparisons}.\n+@code{(cc0)} or a register.  @xref{Comparisons}.\n \n The mode @var{m} is not related to the modes of @var{x} and @var{y}, but\n instead is the mode of the condition code value.  If @code{(cc0)} is"}, {"sha": "880b505e797265af5effd3fbc0055c540c943020", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/767094ddfda30cbecd8944f64395640b217446b5/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/767094ddfda30cbecd8944f64395640b217446b5/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=767094ddfda30cbecd8944f64395640b217446b5", "patch": "@@ -1909,7 +1909,7 @@ The byte offset.\n The mode of a top level SUBREG (or what may become one).\n @end table\n The default function can be found in rtlanal.c, function\n-@code{subreg_regno_offset}. Normally this does not need to be defined.\n+@code{subreg_regno_offset}.  Normally this does not need to be defined.\n @end table\n \n @node Leaf Functions\n@@ -3008,7 +3008,7 @@ header files, it defaults to 0.\n \n @findex PUSH_ARGS\n @item PUSH_ARGS\n-A C expression. If nonzero, push insns will be used to pass\n+A C expression.  If nonzero, push insns will be used to pass\n outgoing arguments.\n If the target machine does not have a push instruction, set it to zero.\n That directs GCC to use an alternate strategy: to\n@@ -3039,7 +3039,7 @@ alignment.  Then the definition should be\n @findex ACCUMULATE_OUTGOING_ARGS\n @findex current_function_outgoing_args_size\n @item ACCUMULATE_OUTGOING_ARGS\n-A C expression. If nonzero, the maximum amount of space required for outgoing arguments\n+A C expression.  If nonzero, the maximum amount of space required for outgoing arguments\n will be computed and placed into the variable\n @code{current_function_outgoing_args_size}.  No space will be pushed\n onto the stack for each call; instead, the function prologue should\n@@ -4179,7 +4179,7 @@ values accessed by @code{__builtin_args_info}.\n @item __builtin_next_arg (@var{lastarg})\n This is the equivalent of @code{__builtin_args_info}, for stack\n arguments.  It returns the address of the first anonymous stack\n-argument, as type @code{void *}. If @code{ARGS_GROW_DOWNWARD}, it\n+argument, as type @code{void *}.  If @code{ARGS_GROW_DOWNWARD}, it\n returns the address of the location above the first anonymous stack\n argument.  Use it in @code{va_start} to initialize the pointer for\n fetching arguments from the stack.  Also use it in @code{va_start} to\n@@ -4523,7 +4523,7 @@ not define this macro, the default name is used, which is\n @findex INIT_TARGET_OPTABS\n @item INIT_TARGET_OPTABS\n Define this macro as a C statement that declares additional library\n-routines renames existing ones. @code{init_optabs} calls this macro after\n+routines renames existing ones.  @code{init_optabs} calls this macro after\n initializing all the normal library routines.\n \n @findex FLOAT_LIB_COMPARE_RETURNS_BOOL (@var{mode}, @var{comparison})\n@@ -5406,7 +5406,7 @@ If defined, a C statement that calls the function named as the sole\n argument of this macro.  This is used in @file{crtstuff.c} if\n @code{INIT_SECTION_ASM_OP} or @code{FINI_SECTION_ASM_OP} to calls to\n initialization and finalization functions from the init and fini\n-sections. By default, this macro is a simple function call.  Some\n+sections.  By default, this macro is a simple function call.  Some\n ports need hand-crafted assembly code to avoid dependencies on\n registers initialized in the function prologue or to ensure that\n constant pools don't end up too far way in the text section.\n@@ -8585,7 +8585,7 @@ Expand a call to a machine specific built-in function that was set up by\n @samp{MD_INIT_BUILTINS}.  @var{exp} is the expression for the function call;\n the result should go to @var{target} if that is convenient, and have mode\n @var{mode} if that is convenient.  @var{subtarget} may be used as the target\n-for computing one of @var{exp}'s operands. @var{ignore} is nonzero if the value\n+for computing one of @var{exp}'s operands.  @var{ignore} is nonzero if the value\n is to be ignored.\n This macro should return the result of the call to the built-in function.\n "}]}