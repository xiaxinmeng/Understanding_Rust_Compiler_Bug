{"sha": "c078c9f4478d6d27dd8d2b7f8a6f8e9a5849dc47", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA3OGM5ZjQ0NzhkNmQyN2RkOGQyYjdmOGE2ZjhlOWE1ODQ5ZGM0Nw==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2019-07-23T23:02:07Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2019-07-23T23:02:07Z"}, "message": "re PR fortran/54072 (BOZ with -std=f2008: wrongly accepted to TRANSFER/ABS/...; two BOZ not rejected for IOR/IEOR/IAND)\n\n2019-07-23  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n PR fortran/54072\n * check.c (gfc_invalid_boz): Fix comment.\n (illegal_boz_arg): New function.\n (gfc_check_transfer): Use to arguments.\n (gfc_check_storage_size): Ditto.\n (gfc_check_complex): Remove leftover comment from BOZ patch.\n * primary.c (match_boz_constant): Remove leftover comment. \n\n2019-07-23  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n PR fortran/54072\n * gfortran.dg/illegal_boz_arg_1.f90: New tests.\n\nFrom-SVN: r273748", "tree": {"sha": "c72194e001bd05a0bba95d8d5aff368862f1f588", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c72194e001bd05a0bba95d8d5aff368862f1f588"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c078c9f4478d6d27dd8d2b7f8a6f8e9a5849dc47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c078c9f4478d6d27dd8d2b7f8a6f8e9a5849dc47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c078c9f4478d6d27dd8d2b7f8a6f8e9a5849dc47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c078c9f4478d6d27dd8d2b7f8a6f8e9a5849dc47/comments", "author": null, "committer": null, "parents": [{"sha": "8dc63166e0b859546ba53093c5fc6c09925210dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dc63166e0b859546ba53093c5fc6c09925210dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dc63166e0b859546ba53093c5fc6c09925210dd"}], "stats": {"total": 58, "additions": 51, "deletions": 7}, "files": [{"sha": "622f5762a84f090bb29d5f5a00f920c7ca309d63", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c078c9f4478d6d27dd8d2b7f8a6f8e9a5849dc47/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c078c9f4478d6d27dd8d2b7f8a6f8e9a5849dc47/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c078c9f4478d6d27dd8d2b7f8a6f8e9a5849dc47", "patch": "@@ -1,3 +1,13 @@\n+2019-07-23  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/54072\n+\t* check.c (gfc_invalid_boz): Fix comment.\n+\t(illegal_boz_arg): New function.\n+\t(gfc_check_transfer): Use to arguments.\n+\t(gfc_check_storage_size): Ditto.\n+\t(gfc_check_complex): Remove leftover comment from BOZ patch.\n+\t* primary.c (match_boz_constant): Remove leftover comment. \n+\n 2019-07-23  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \t* arith.c (gfc_convert_integer, gfc_convert_real, gfc_convert_complex):"}, {"sha": "376edd3ae838de9cdb2e134e2afb9d628bc9c851", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c078c9f4478d6d27dd8d2b7f8a6f8e9a5849dc47/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c078c9f4478d6d27dd8d2b7f8a6f8e9a5849dc47/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=c078c9f4478d6d27dd8d2b7f8a6f8e9a5849dc47", "patch": "@@ -35,10 +35,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target-memory.h\"\n \n /* A BOZ literal constant can appear in a limited number of contexts.\n-   gfc_invalid_boz() is a help function to simplify error/warning generation.\n-   Note, gfortran accepts the nonstandard 'X' for 'Z' the nonstandard\n-   suffix location.  If -fallow-invalid-boz is used, then issue a warning;\n-   otherwise issue an error.  */\n+   gfc_invalid_boz() is a helper function to simplify error/warning\n+   generation.  gfortran accepts the nonstandard 'X' for 'Z', and gfortran\n+   allows the BOZ indicator to appear as a suffix.  If -fallow-invalid-boz\n+   is used, then issue a warning; otherwise issue an error.  */\n \n bool\n gfc_invalid_boz (const char *msg, locus *loc)\n@@ -54,6 +54,20 @@ gfc_invalid_boz (const char *msg, locus *loc)\n }\n \n \n+/* Issue an error for an illegal BOZ argument.  */\n+static bool\n+illegal_boz_arg (gfc_expr *x)\n+{\n+  if (x->ts.type == BT_BOZ)\n+    {\n+      gfc_error (\"BOZ literal constant at %L cannot be an actual argument \"\n+\t\t \"to %qs\", &x->where, gfc_current_intrinsic);\n+      return true;\n+    }\n+\n+  return false;\n+}\n+\n /* Some precedures take two arguments such that both cannot be BOZ.  */\n \n static bool\n@@ -2202,8 +2216,6 @@ gfc_check_co_sum (gfc_expr *a, gfc_expr *result_image, gfc_expr *stat,\n bool\n gfc_check_complex (gfc_expr *x, gfc_expr *y)\n {\n-\n-  /* FIXME BOZ.  What to do with complex?  */\n   if (!boz_args_check (x, y))\n     return false;\n \n@@ -5894,6 +5906,12 @@ gfc_check_transfer (gfc_expr *source, gfc_expr *mold, gfc_expr *size)\n       return false;\n     }\n \n+  if (source->ts.type == BT_BOZ && illegal_boz_arg (source))\n+    return false;\n+\n+  if (mold->ts.type == BT_BOZ && illegal_boz_arg (mold))\n+    return false;\n+\n   /* MOLD shall be a scalar or array of any type.  */\n   if (mold->ts.type == BT_PROCEDURE\n       && mold->symtree->n.sym->attr.subroutine == 1)\n@@ -7125,6 +7143,9 @@ gfc_check_storage_size (gfc_expr *a, gfc_expr *kind)\n       return false;\n     }\n \n+  if (a->ts.type == BT_BOZ && illegal_boz_arg (a))\n+    return false;\n+\n   if (kind == NULL)\n     return true;\n "}, {"sha": "1cc1018d0aadf3380dfe352155c8c94d183eff1a", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c078c9f4478d6d27dd8d2b7f8a6f8e9a5849dc47/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c078c9f4478d6d27dd8d2b7f8a6f8e9a5849dc47/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=c078c9f4478d6d27dd8d2b7f8a6f8e9a5849dc47", "patch": "@@ -494,7 +494,6 @@ match_boz_constant (gfc_expr **result)\n   e->boz.str = XCNEWVEC (char, length + 1);\n   strncpy (e->boz.str, buffer, length);\n \n-  /* FIXME BOZ.  */\n   if (!gfc_in_match_data ()\n       && (!gfc_notify_std(GFC_STD_F2003, \"BOZ used outside a DATA \"\n \t\t\t  \"statement at %L\", &e->where)))"}, {"sha": "342ba982c75cf7c0cda425914e38b945b2ec4792", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c078c9f4478d6d27dd8d2b7f8a6f8e9a5849dc47/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c078c9f4478d6d27dd8d2b7f8a6f8e9a5849dc47/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c078c9f4478d6d27dd8d2b7f8a6f8e9a5849dc47", "patch": "@@ -1,3 +1,8 @@\n+2019-07-23  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/54072\n+\t* gfortran.dg/illegal_boz_arg_1.f90: New tests.\n+\n 2019-07-23  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \t* gfortran.dg/achar_5.f90: Fix for new BOZ handling."}, {"sha": "8a79a5219d20a7fbfabde71d8f0bb7bca4d1ea16", "filename": "gcc/testsuite/gfortran.dg/illegal_boz_arg_1.f90", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c078c9f4478d6d27dd8d2b7f8a6f8e9a5849dc47/gcc%2Ftestsuite%2Fgfortran.dg%2Fillegal_boz_arg_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c078c9f4478d6d27dd8d2b7f8a6f8e9a5849dc47/gcc%2Ftestsuite%2Fgfortran.dg%2Fillegal_boz_arg_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fillegal_boz_arg_1.f90?ref=c078c9f4478d6d27dd8d2b7f8a6f8e9a5849dc47", "patch": "@@ -0,0 +1,9 @@\n+! { dg-do compile }\n+program foo\n+   implicit none\n+   integer :: i = 42\n+   print *, storage_size(z'1234')     ! { dg-error \"cannot be an actual\" }\n+   print *, transfer(z'1234', i)      ! { dg-error \"cannot be an actual\" }\n+   print *, transfer(i, z'1234')      ! { dg-error \"cannot be an actual\" }\n+   print *, transfer(i, i, z'1234')   ! { dg-error \"must be INTEGER\" }\n+end program foo"}]}