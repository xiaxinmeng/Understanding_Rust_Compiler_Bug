{"sha": "3bed814135dda6a1aa1171c0719675f1903f346f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JlZDgxNDEzNWRkYTZhMWFhMTE3MWMwNzE5Njc1ZjE5MDNmMzQ2Zg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-12-28T11:08:28Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-12-28T11:08:28Z"}, "message": "(simplify_comparison, case NEG): Replace large block of code with\nequivalent call to num_sign_bit_copies.\n\nFrom-SVN: r2972", "tree": {"sha": "2450c6894c80409fd357f064632fe9d3bbac57e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2450c6894c80409fd357f064632fe9d3bbac57e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bed814135dda6a1aa1171c0719675f1903f346f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bed814135dda6a1aa1171c0719675f1903f346f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bed814135dda6a1aa1171c0719675f1903f346f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bed814135dda6a1aa1171c0719675f1903f346f/comments", "author": null, "committer": null, "parents": [{"sha": "cbec710efcae143355573a17944f821557fb78af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbec710efcae143355573a17944f821557fb78af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbec710efcae143355573a17944f821557fb78af"}], "stats": {"total": 25, "additions": 3, "deletions": 22}, "files": [{"sha": "90a02cf0578d032efcdce02633beb0cff2af3dd1", "filename": "gcc/combine.c", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bed814135dda6a1aa1171c0719675f1903f346f/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bed814135dda6a1aa1171c0719675f1903f346f/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=3bed814135dda6a1aa1171c0719675f1903f346f", "patch": "@@ -8029,28 +8029,9 @@ simplify_comparison (code, pop0, pop1)\n \t      continue;\n \t    }\n \n-\t  /* If we have NEG of something that is the result of a\n-\t     SIGN_EXTEND, SIGN_EXTRACT, or ASHIFTRT, we know that the\n-\t     two high-order bits must be the same and hence that\n-\t     \"(-a) < 0\" is equivalent to \"a > 0\".  Otherwise, we can't\n-\t     do this.  */\n-\t  if (GET_CODE (XEXP (op0, 0)) == SIGN_EXTEND\n-\t      || (GET_CODE (XEXP (op0, 0)) == SIGN_EXTRACT\n-\t\t  && GET_CODE (XEXP (XEXP (op0, 0), 1)) == CONST_INT\n-\t\t  && (INTVAL (XEXP (XEXP (op0, 0), 1))\n-\t\t      < GET_MODE_BITSIZE (GET_MODE (XEXP (XEXP (op0, 0), 0)))))\n-\t      || (GET_CODE (XEXP (op0, 0)) == ASHIFTRT\n-\t\t  && GET_CODE (XEXP (XEXP (op0, 0), 1)) == CONST_INT\n-\t\t  && XEXP (XEXP (op0, 0), 1) != const0_rtx)\n-\t      || ((tem = get_last_value (XEXP (op0, 0))) != 0\n-\t\t  && (GET_CODE (tem) == SIGN_EXTEND\n-\t\t      || (GET_CODE (tem) == SIGN_EXTRACT\n-\t\t\t  && GET_CODE (XEXP (tem, 1)) == CONST_INT\n-\t\t\t  && (INTVAL (XEXP (tem, 1))\n-\t\t\t      < GET_MODE_BITSIZE (GET_MODE (XEXP (tem, 0)))))\n-\t\t      || (GET_CODE (tem) == ASHIFTRT\n-\t\t\t  && GET_CODE (XEXP (tem, 1)) == CONST_INT\n-\t\t\t  && XEXP (tem, 1) != const0_rtx))))\n+\t  /* If we have NEG of something whose two high-order bits are the\n+\t     same, we know that \"(-a) < 0\" is equivalent to \"a > 0\". */\n+\t  if (num_sign_bit_copies (op0, mode) >= 2)\n \t    {\n \t      op0 = XEXP (op0, 0);\n \t      code = swap_condition (code);"}]}