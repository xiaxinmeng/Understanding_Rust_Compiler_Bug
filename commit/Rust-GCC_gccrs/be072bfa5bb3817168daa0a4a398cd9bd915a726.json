{"sha": "be072bfa5bb3817168daa0a4a398cd9bd915a726", "node_id": "C_kwDOANBUbNoAKGJlMDcyYmZhNWJiMzgxNzE2OGRhYTBhNGEzOThjZDliZDkxNWE3MjY", "commit": {"author": {"name": "Hongyu Wang", "email": "hongyu.wang@intel.com", "date": "2021-08-30T07:18:35Z"}, "committer": {"name": "Hongyu Wang", "email": "hongyu.wang@intel.com", "date": "2021-10-15T06:44:22Z"}, "message": "AVX512FP16: Enhance vector shuffle builtins\n\nSupport HFmode vector shuffle by creating HImode subreg when\nexpanding permutation expr.\n\ngcc/ChangeLog:\n\n\t* config/i386/i386-expand.c (ix86_expand_vec_perm): Convert\n\tHFmode input operand to HImode.\n\t(ix86_vectorize_vec_perm_const): Likewise.\n\t* config/i386/sse.md (*avx512bw_permvar_truncv16siv16hi_1_hf):\n\tNew define_insn.\n\t(*avx512f_permvar_truncv8siv8hi_1_hf):\n\tLikewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512fp16-builtin_shuffle-1.c: New test.\n\t* gcc.target/i386/avx512fp16-pr101846.c: Ditto.\n\t* gcc.target/i386/avx512fp16-pr94680.c: Ditto.", "tree": {"sha": "dabf5d6e184e749a1730abe7a1f7c564b4067f98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dabf5d6e184e749a1730abe7a1f7c564b4067f98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be072bfa5bb3817168daa0a4a398cd9bd915a726", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be072bfa5bb3817168daa0a4a398cd9bd915a726", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be072bfa5bb3817168daa0a4a398cd9bd915a726", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be072bfa5bb3817168daa0a4a398cd9bd915a726/comments", "author": {"login": "wwwhhhyyy", "id": 5366075, "node_id": "MDQ6VXNlcjUzNjYwNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5366075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwwhhhyyy", "html_url": "https://github.com/wwwhhhyyy", "followers_url": "https://api.github.com/users/wwwhhhyyy/followers", "following_url": "https://api.github.com/users/wwwhhhyyy/following{/other_user}", "gists_url": "https://api.github.com/users/wwwhhhyyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwwhhhyyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwwhhhyyy/subscriptions", "organizations_url": "https://api.github.com/users/wwwhhhyyy/orgs", "repos_url": "https://api.github.com/users/wwwhhhyyy/repos", "events_url": "https://api.github.com/users/wwwhhhyyy/events{/privacy}", "received_events_url": "https://api.github.com/users/wwwhhhyyy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wwwhhhyyy", "id": 5366075, "node_id": "MDQ6VXNlcjUzNjYwNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5366075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwwhhhyyy", "html_url": "https://github.com/wwwhhhyyy", "followers_url": "https://api.github.com/users/wwwhhhyyy/followers", "following_url": "https://api.github.com/users/wwwhhhyyy/following{/other_user}", "gists_url": "https://api.github.com/users/wwwhhhyyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwwhhhyyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwwhhhyyy/subscriptions", "organizations_url": "https://api.github.com/users/wwwhhhyyy/orgs", "repos_url": "https://api.github.com/users/wwwhhhyyy/repos", "events_url": "https://api.github.com/users/wwwhhhyyy/events{/privacy}", "received_events_url": "https://api.github.com/users/wwwhhhyyy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "147ed0184f403b51b4f180f94b0779e9905faa3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/147ed0184f403b51b4f180f94b0779e9905faa3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/147ed0184f403b51b4f180f94b0779e9905faa3a"}], "stats": {"total": 281, "additions": 280, "deletions": 1}, "files": [{"sha": "56dd99b551195c4809d15e2bb558f4cf59e7f7f7", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be072bfa5bb3817168daa0a4a398cd9bd915a726/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be072bfa5bb3817168daa0a4a398cd9bd915a726/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=be072bfa5bb3817168daa0a4a398cd9bd915a726", "patch": "@@ -4846,6 +4846,16 @@ ix86_expand_vec_perm (rtx operands[])\n   e = GET_MODE_UNIT_SIZE (mode);\n   gcc_assert (w <= 64);\n \n+  /* For HF mode vector, convert it to HI using subreg.  */\n+  if (GET_MODE_INNER (mode) == HFmode)\n+    {\n+      machine_mode orig_mode = mode;\n+      mode = mode_for_vector (HImode, w).require ();\n+      target = lowpart_subreg (mode, target, orig_mode);\n+      op0 = lowpart_subreg (mode, op0, orig_mode);\n+      op1 = lowpart_subreg (mode, op1, orig_mode);\n+    }\n+\n   if (TARGET_AVX512F && one_operand_shuffle)\n     {\n       rtx (*gen) (rtx, rtx, rtx) = NULL;\n@@ -21139,6 +21149,20 @@ ix86_vectorize_vec_perm_const (machine_mode vmode, rtx target, rtx op0,\n   unsigned int i, nelt, which;\n   bool two_args;\n \n+  /* For HF mode vector, convert it to HI using subreg.  */\n+  if (GET_MODE_INNER (vmode) == HFmode)\n+    {\n+      machine_mode orig_mode = vmode;\n+      vmode = mode_for_vector (HImode,\n+\t\t\t       GET_MODE_NUNITS (vmode)).require ();\n+      if (target)\n+\ttarget = lowpart_subreg (vmode, target, orig_mode);\n+      if (op0)\n+\top0 = lowpart_subreg (vmode, op0, orig_mode);\n+      if (op1)\n+\top1 = lowpart_subreg (vmode, op1, orig_mode);\n+    }\n+\n   d.target = target;\n   d.op0 = op0;\n   d.op1 = op1;"}, {"sha": "fbf056bf9e6711c75027d280080f8a51b5ac94a0", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be072bfa5bb3817168daa0a4a398cd9bd915a726/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be072bfa5bb3817168daa0a4a398cd9bd915a726/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=be072bfa5bb3817168daa0a4a398cd9bd915a726", "patch": "@@ -12757,6 +12757,33 @@\n \t(truncate:V16HI (match_dup 1)))]\n   \"operands[1] = lowpart_subreg (V16SImode, operands[1], V32HImode);\")\n \n+(define_insn_and_split \"*avx512bw_permvar_truncv16siv16hi_1_hf\"\n+  [(set (match_operand:V16HF 0 \"nonimmediate_operand\")\n+\t(vec_select:V16HF\n+\t  (subreg:V32HF\n+\t    (unspec:V32HI\n+\t      [(match_operand:V32HI 1 \"register_operand\")\n+\t       (match_operand:V32HI 2 \"permvar_truncate_operand\")]\n+\t     UNSPEC_VPERMVAR) 0)\n+\t  (parallel [(const_int 0) (const_int 1)\n+\t\t     (const_int 2) (const_int 3)\n+\t\t     (const_int 4) (const_int 5)\n+\t\t     (const_int 6) (const_int 7)\n+\t\t     (const_int 8) (const_int 9)\n+\t\t     (const_int 10) (const_int 11)\n+\t\t     (const_int 12) (const_int 13)\n+\t\t     (const_int 14) (const_int 15)])))]\n+  \"TARGET_AVX512BW && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(truncate:V16HI (match_dup 1)))]\n+{\n+  operands[0] = lowpart_subreg (V16HImode, operands[0], V16HFmode);\n+  operands[1] = lowpart_subreg (V16SImode, operands[1], V32HImode);\n+})\n+\n+\n (define_insn_and_split \"*avx512f_permvar_truncv8siv8hi_1\"\n   [(set (match_operand:V8HI 0 \"nonimmediate_operand\")\n \t(vec_select:V8HI\n@@ -12775,6 +12802,28 @@\n \t(truncate:V8HI (match_dup 1)))]\n   \"operands[1] = lowpart_subreg (V8SImode, operands[1], V16HImode);\")\n \n+(define_insn_and_split \"*avx512f_permvar_truncv8siv8hi_1_hf\"\n+  [(set (match_operand:V8HF 0 \"nonimmediate_operand\")\n+\t(vec_select:V8HF\n+\t  (subreg:V16HF\n+\t    (unspec:V16HI\n+\t      [(match_operand:V16HI 1 \"register_operand\")\n+\t       (match_operand:V16HI 2 \"permvar_truncate_operand\")]\n+\t     UNSPEC_VPERMVAR) 0)\n+\t  (parallel [(const_int 0) (const_int 1)\n+\t\t     (const_int 2) (const_int 3)\n+\t\t     (const_int 4) (const_int 5)\n+\t\t     (const_int 6) (const_int 7)])))]\n+  \"TARGET_AVX512VL && TARGET_AVX512BW && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(truncate:V8HI (match_dup 1)))]\n+{\n+  operands[0] = lowpart_subreg (V8HImode, operands[0], V8HFmode);\n+  operands[1] = lowpart_subreg (V8SImode, operands[1], V16HImode);\n+})\n+\n (define_insn_and_split \"*avx512f_vpermvar_truncv8div8si_1\"\n   [(set (match_operand:V8SI 0 \"nonimmediate_operand\")\n \t(vec_select:V8SI\n@@ -15787,12 +15836,15 @@\n \n (define_mode_iterator VEC_PERM_AVX2\n   [V16QI V8HI V4SI V2DI V4SF V2DF\n+   (V8HF \"TARGET_AVX512FP16\")\n    (V32QI \"TARGET_AVX2\") (V16HI \"TARGET_AVX2\")\n    (V8SI \"TARGET_AVX2\") (V4DI \"TARGET_AVX2\")\n    (V8SF \"TARGET_AVX2\") (V4DF \"TARGET_AVX2\")\n+   (V16HF \"TARGET_AVX512FP16\")\n    (V16SF \"TARGET_AVX512F\") (V8DF \"TARGET_AVX512F\")\n    (V16SI \"TARGET_AVX512F\") (V8DI \"TARGET_AVX512F\")\n-   (V32HI \"TARGET_AVX512BW\") (V64QI \"TARGET_AVX512VBMI\")])\n+   (V32HI \"TARGET_AVX512BW\") (V64QI \"TARGET_AVX512VBMI\")\n+   (V32HF \"TARGET_AVX512FP16\")])\n \n (define_expand \"vec_perm<mode>\"\n   [(match_operand:VEC_PERM_AVX2 0 \"register_operand\")"}, {"sha": "89d3567a66bf44b6c39f069219fa9df2c085a42d", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-builtin_shuffle-1.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be072bfa5bb3817168daa0a4a398cd9bd915a726/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-builtin_shuffle-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be072bfa5bb3817168daa0a4a398cd9bd915a726/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-builtin_shuffle-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-builtin_shuffle-1.c?ref=be072bfa5bb3817168daa0a4a398cd9bd915a726", "patch": "@@ -0,0 +1,86 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-not \"movw\" } } */\n+/* { dg-final { scan-assembler-times \"vpermi2w\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpermw\" 6 } } */\n+/* { dg-final { scan-assembler-times \"vpshufb\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpermt2w\" 6 } } */\n+\n+typedef _Float16 v32hf __attribute__((vector_size (64)));\n+typedef _Float16 v16hf __attribute__((vector_size (32)));\n+typedef _Float16 v8hf __attribute__((vector_size (16)));\n+typedef short v32hi __attribute__((vector_size (64)));\n+typedef short v16hi __attribute__((vector_size (32)));\n+typedef short v8hi __attribute__((vector_size (16)));\n+\n+#define PERM_CONST_RANDOM_v32hi\t\\\n+{ 0, 21, 15, 9, 43, 25, 37, 48,\t\\\n+  8, 16, 27, 51, 30, 12, 6, 46,\t\\\n+  34, 3, 11, 5, 17, 53, 26, 39,\t\\\n+  2, 18, 40, 61, 19, 4, 50, 29 }\n+\n+#define PERM_CONST_RANDOM_RANGE32_v32hi \\\n+{ 0, 21, 10, 23, 8, 18, 7, 19, \\\n+  4, 25, 3, 31, 5, 22, 11, 17, \\\n+  9, 20, 2, 24, 1, 30, 12, 27, \\\n+  13, 28, 6, 29, 14, 16, 15, 23 }\n+\n+#define PERM_CONST_RANDOM_v16hi \\\n+{ 0, 21, 15, 9, 13, 25, 30, 18,\t\\\n+  8, 16, 17, 11, 4, 22, 6, 7 }\n+\n+#define PERM_CONST_RANDOM_RANGE16_v16hi \\\n+{ 0, 9, 1, 12, 4, 15, 7, 13,\t\\\n+  3, 10, 6, 14, 5, 8, 2, 11 }\n+\n+#define PERM_CONST_RANDOM_v8hi \\\n+{ 0, 14, 15, 9, 13, 2, 3, 5 }\n+\n+#define PERM_CONST_RANDOM_RANGE8_v8hi \\\n+{ 0, 7, 2, 5, 3, 4, 1, 6 }\n+\n+#define PERM_CONST_RANDOM(size)\t\\\n+  PERM_CONST_RANDOM_v##size##hi\n+\n+#define PERM_CONST_RANDOM_RANGE(size) \\\n+  PERM_CONST_RANDOM_RANGE##size##_v##size##hi\n+\n+#define SHUFFLE_CONST_RANDOM(type, itype, size) \\\n+type foo_##type##shuffle_2param_const_random (type a, type b) \\\n+{ \\\n+  return __builtin_shuffle (a, b, \\\n+\t\t\t    (itype) PERM_CONST_RANDOM (size)); \\\n+} \\\n+type foo_##type##shuffle_2param_const_random_range (type a, type b) \\\n+{ \\\n+  return __builtin_shuffle (a, b, \\\n+\t\t\t    (itype) PERM_CONST_RANDOM_RANGE (size)); \\\n+} \\\n+type foo_##type##shuffle_1param_const_random (type a) \\\n+{ \\\n+  return __builtin_shuffle (a, \\\n+\t\t\t    (itype) PERM_CONST_RANDOM (size)); \\\n+} \\\n+type foo_##type##shuffle_1param_const_random_range (type a) \\\n+{ \\\n+  return __builtin_shuffle (a, \\\n+\t\t\t    (itype) PERM_CONST_RANDOM_RANGE (size)); \\\n+}\n+\n+#define SHUFFLE_VEC_INDEX(type, itype) \\\n+type foo##type##itype##shuffle_2param_vec (type a, type b, itype c) \\\n+{ \\\n+  return __builtin_shuffle (a, b, c); \\\n+} \\\n+type foo##type##itype##shuffle_1param_vec (type a, itype c) \\\n+{ \\\n+  return __builtin_shuffle (a, c); \\\n+}\n+\n+SHUFFLE_CONST_RANDOM (v32hf, v32hi, 32)\n+SHUFFLE_CONST_RANDOM (v16hf, v16hi, 16)\n+SHUFFLE_CONST_RANDOM (v8hf, v8hi, 8)\n+\n+SHUFFLE_VEC_INDEX (v32hf, v32hi)\n+SHUFFLE_VEC_INDEX (v16hf, v16hi)\n+SHUFFLE_VEC_INDEX (v8hf, v8hi)"}, {"sha": "abd91561785c059bc8c65bb49e2a90bf958fa809", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-pr101846.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be072bfa5bb3817168daa0a4a398cd9bd915a726/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-pr101846.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be072bfa5bb3817168daa0a4a398cd9bd915a726/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-pr101846.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-pr101846.c?ref=be072bfa5bb3817168daa0a4a398cd9bd915a726", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpmovzxwd\" \"3\" } } */\n+/* { dg-final { scan-assembler-times \"vpmovdw\" \"3\" } } */\n+\n+typedef _Float16 v32hf __attribute__((vector_size (64)));\n+typedef _Float16 v16hf __attribute__((vector_size (32)));\n+typedef _Float16 v8hf __attribute__((vector_size (16)));\n+typedef _Float16 v4hf __attribute__((vector_size (8)));\n+typedef short v4hi __attribute__((vector_size (8)));\n+typedef short v8hi __attribute__((vector_size (16)));\n+\n+#define PERM_CONST_INTERLEAVE_v32hi \\\n+0, 16, 1, 17, 2, 18, 3, 19, \\\n+4, 20, 5, 21, 6, 22, 7, 23, \\\n+8, 24, 9, 25, 10, 26, 11, 27, \\\n+12, 28, 13, 29, 14, 30, 15, 31\n+\n+#define PERM_CONST_INTERLEAVE_v16hi \\\n+0, 8, 1, 9, 2, 10, 3, 11, \\\n+4, 12, 5, 13, 6, 14, 7, 15\n+\n+#define PERM_CONST_INTERLEAVE_v8hi \\\n+0, 4, 1, 5, 2, 6, 3, 7\n+\n+#define PERM_CONST_TRUNCATE_v32hi \\\n+0, 2, 4, 6, 8, 10, 12, 14, \\\n+16, 18, 20, 22, 24, 26, 28, 30\n+\n+#define PERM_CONST_TRUNCATE_v16hi \\\n+0, 2, 4, 6, 8, 10, 12, 14\n+\n+#define PERM_CONST_TRUNCATE_v8hi \\\n+0, 2, 4, 6\n+\n+#define PERM_CONST_INTERLEAVE(size) \\\n+  PERM_CONST_INTERLEAVE_v##size##hi\n+\n+#define PERM_CONST_TRUNCATE(size) \\\n+  PERM_CONST_TRUNCATE_v##size##hi\n+\n+#define SHUFFLE_CONST_INTERLEAVE(type, rtype, size) \\\n+rtype foo_##type##shufflevector_const_interleave (type a) \\\n+{ \\\n+  return __builtin_shufflevector (a, (type) {}, \\\n+\t\t\t\t  PERM_CONST_INTERLEAVE (size)); \\\n+} \\\n+type foo_##type##shufflevector_const_trunc (rtype a) \\\n+{ \\\n+  return __builtin_shufflevector (a, a, \\\n+\t\t\t\t  PERM_CONST_TRUNCATE (size)); \\\n+}\n+\n+SHUFFLE_CONST_INTERLEAVE (v16hf, v32hf, 32)\n+SHUFFLE_CONST_INTERLEAVE (v8hf, v16hf, 16)\n+SHUFFLE_CONST_INTERLEAVE (v4hf, v8hf, 8)"}, {"sha": "bfe11236eefaae1c40e0799be2eef9c7bcd98c25", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-pr94680.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be072bfa5bb3817168daa0a4a398cd9bd915a726/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-pr94680.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be072bfa5bb3817168daa0a4a398cd9bd915a726/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-pr94680.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-pr94680.c?ref=be072bfa5bb3817168daa0a4a398cd9bd915a726", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vmovdqa\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vmovq\" 2 } } */\n+\n+typedef _Float16 v32hf __attribute__((vector_size (64)));\n+typedef _Float16 v16hf __attribute__((vector_size (32)));\n+typedef _Float16 v8hf __attribute__((vector_size (16)));\n+typedef short v32hi __attribute__((vector_size (64)));\n+typedef short v16hi __attribute__((vector_size (32)));\n+typedef short v8hi __attribute__((vector_size (16)));\n+\n+\n+#define PERM_CONST_CONCAT0_v32hi \\\n+{ 0, 1, 2, 3, 4, 5, 6, 7, \\\n+  8, 9, 10, 11, 12, 13, 14, 15,\t\\\n+  34, 53, 41, 55, 57, 43, 36, 39, \\\n+  62, 48, 50, 51, 49, 44, 60, 37 }\n+\n+#define PERM_CONST_CONCAT0_v32hi_l \\\n+{ 32, 33, 34, 35, 36, 37, 38, 39, \\\n+  40, 41, 42, 43, 44, 45, 46, 47, \\\n+  31, 0, 29, 2, 27, 4, 25, 6, 23, \\\n+  8, 21, 10, 19, 12, 17, 14 }\n+\n+#define PERM_CONST_CONCAT0_v16hi \\\n+{ 0, 1, 2, 3, 4, 5, 6, 7, \\\n+  21, 26, 17, 31, 24, 22, 30, 19 }\n+\n+#define PERM_CONST_CONCAT0_v16hi_l \\\n+{ 16, 17, 18, 19, 20, 21, 22, 23, \\\n+  15, 0, 13, 2, 11, 4, 9, 6 }\n+\n+#define PERM_CONST_CONCAT0_v8hi \\\n+{ 0, 1, 2, 3, 9, 11, 14, 12 }\n+\n+#define PERM_CONST_CONCAT0_v8hi_l \\\n+{ 8, 9, 10, 11, 3, 5, 1, 7 }\n+\n+#define PERM_CONST_CONCAT0(type) \\\n+  PERM_CONST_CONCAT0_##type\n+\n+#define PERM_CONST_CONCAT0_L(type) \\\n+  PERM_CONST_CONCAT0_##type##_l\n+\n+#define SHUFFLE_CONST_CONCAT0(type, itype) \\\n+type foo_##type##shuffle_const_concat0 (type a) \\\n+{ \\\n+  return __builtin_shuffle (a, (type) {0}, \\\n+\t\t\t    (itype) PERM_CONST_CONCAT0 (itype)); \\\n+} \\\n+type foo_##type##shuffle_const_concat0_l (type a) \\\n+{ \\\n+  return __builtin_shuffle ((type) {0}, a, \\\n+\t\t\t    (itype) PERM_CONST_CONCAT0_L (itype)); \\\n+}\n+\n+SHUFFLE_CONST_CONCAT0 (v32hf, v32hi)\n+SHUFFLE_CONST_CONCAT0 (v16hf, v16hi)\n+SHUFFLE_CONST_CONCAT0 (v8hf, v8hi)\n+"}]}