{"sha": "fd326ba823f7a8cbb2f7c47a2a3d15a8e098a976", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQzMjZiYTgyM2Y3YThjYmIyZjdjNDdhMmEzZDE1YThlMDk4YTk3Ng==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2004-10-28T12:47:21Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2004-10-28T12:47:21Z"}, "message": "re PR target/15286 (ICE cause by reload)\n\n\tPR target/15286\n\t* final.c (alter_subreg): Compute correct offset to use with\n\tparadoxical SUBREGs of memory operands.\n\t* recog.c (general_operand): Allow paradoxical SUBREGs of\n\tmemory operands after reload.\n\t* simplify-rtx.c (simplify_gen_subreg): Fail if simplify_subreg\n\thas failed when passed a hard register.\n\nFrom-SVN: r89752", "tree": {"sha": "a9bda2464d7b200ebd679487ccda3fef16f416b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9bda2464d7b200ebd679487ccda3fef16f416b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd326ba823f7a8cbb2f7c47a2a3d15a8e098a976", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd326ba823f7a8cbb2f7c47a2a3d15a8e098a976", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd326ba823f7a8cbb2f7c47a2a3d15a8e098a976", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd326ba823f7a8cbb2f7c47a2a3d15a8e098a976/comments", "author": null, "committer": null, "parents": [{"sha": "4af46a327e490e1a24a353bc55f0d64631ba85de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4af46a327e490e1a24a353bc55f0d64631ba85de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4af46a327e490e1a24a353bc55f0d64631ba85de"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "e4de1ded60cef5b63132cfe1bd836b80bb1d22c8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd326ba823f7a8cbb2f7c47a2a3d15a8e098a976/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd326ba823f7a8cbb2f7c47a2a3d15a8e098a976/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd326ba823f7a8cbb2f7c47a2a3d15a8e098a976", "patch": "@@ -1,3 +1,13 @@\n+2004-10-28  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\tPR target/15286\n+\t* final.c (alter_subreg): Compute correct offset to use with\n+\tparadoxical SUBREGs of memory operands.\n+\t* recog.c (general_operand): Allow paradoxical SUBREGs of\n+\tmemory operands after reload.\n+\t* simplify-rtx.c (simplify_gen_subreg): Fail if simplify_subreg\n+\thas failed when passed a hard register.\n+\n 2004-10-28  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* function.c (assign_parm_setup_block): Handle parallels correctly."}, {"sha": "3952b9ff82c64f072dd406ed848b0a526d3f02e2", "filename": "gcc/final.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd326ba823f7a8cbb2f7c47a2a3d15a8e098a976/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd326ba823f7a8cbb2f7c47a2a3d15a8e098a976/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=fd326ba823f7a8cbb2f7c47a2a3d15a8e098a976", "patch": "@@ -2608,7 +2608,24 @@ alter_subreg (rtx *xp)\n   /* simplify_subreg does not remove subreg from volatile references.\n      We are required to.  */\n   if (MEM_P (y))\n-    *xp = adjust_address (y, GET_MODE (x), SUBREG_BYTE (x));\n+    {\n+      int offset = SUBREG_BYTE (x);\n+\n+      /* For paradoxical subregs on big-endian machines, SUBREG_BYTE\n+\t contains 0 instead of the proper offset.  See simplify_subreg.  */\n+      if (offset == 0\n+\t  && GET_MODE_SIZE (GET_MODE (y)) < GET_MODE_SIZE (GET_MODE (x)))\n+        {\n+          int difference = GET_MODE_SIZE (GET_MODE (y))\n+\t\t\t   - GET_MODE_SIZE (GET_MODE (x));\n+          if (WORDS_BIG_ENDIAN)\n+            offset += (difference / UNITS_PER_WORD) * UNITS_PER_WORD;\n+          if (BYTES_BIG_ENDIAN)\n+            offset += difference % UNITS_PER_WORD;\n+        }\n+\n+      *xp = adjust_address (y, GET_MODE (x), offset);\n+    }\n   else\n     {\n       rtx new = simplify_subreg (GET_MODE (x), y, GET_MODE (y),"}, {"sha": "eeb37afe9bb82f49b5af4024e668721d55595b72", "filename": "gcc/recog.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd326ba823f7a8cbb2f7c47a2a3d15a8e098a976/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd326ba823f7a8cbb2f7c47a2a3d15a8e098a976/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=fd326ba823f7a8cbb2f7c47a2a3d15a8e098a976", "patch": "@@ -936,8 +936,10 @@ general_operand (rtx op, enum machine_mode mode)\n \n #ifdef INSN_SCHEDULING\n       /* On machines that have insn scheduling, we want all memory\n-\t reference to be explicit, so outlaw paradoxical SUBREGs.  */\n-      if (MEM_P (sub)\n+\t reference to be explicit, so outlaw paradoxical SUBREGs.\n+\t However, we must allow them after reload so that they can\n+\t get cleaned up by cleanup_subreg_operands.  */\n+      if (!reload_completed && MEM_P (sub)\n \t  && GET_MODE_SIZE (mode) > GET_MODE_SIZE (GET_MODE (sub)))\n \treturn 0;\n #endif"}, {"sha": "e463fef1efe59e49a26d3e0a7cd04b995b7c58da", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd326ba823f7a8cbb2f7c47a2a3d15a8e098a976/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd326ba823f7a8cbb2f7c47a2a3d15a8e098a976/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=fd326ba823f7a8cbb2f7c47a2a3d15a8e098a976", "patch": "@@ -3789,7 +3789,8 @@ simplify_gen_subreg (enum machine_mode outermode, rtx op,\n   if (newx)\n     return newx;\n \n-  if (GET_CODE (op) == SUBREG || GET_MODE (op) == VOIDmode)\n+  if (GET_CODE (op) == SUBREG || GET_MODE (op) == VOIDmode\n+      || (REG_P (op) && REGNO (op) < FIRST_PSEUDO_REGISTER))\n     return NULL_RTX;\n \n   return gen_rtx_SUBREG (outermode, op, byte);"}]}