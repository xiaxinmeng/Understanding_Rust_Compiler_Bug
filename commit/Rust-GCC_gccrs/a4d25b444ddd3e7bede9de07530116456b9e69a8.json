{"sha": "a4d25b444ddd3e7bede9de07530116456b9e69a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRkMjViNDQ0ZGRkM2U3YmVkZTlkZTA3NTMwMTE2NDU2YjllNjlhOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-09-20T19:37:57Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-09-20T19:37:57Z"}, "message": "call.c (convert_default_arg): Avoid redundant copy.\n\n\t* call.c (convert_default_arg): Avoid redundant copy.\n\t* tree.c (bot_manip): Copy everything.\n\nFrom-SVN: r179016", "tree": {"sha": "a3bb743bf4f077e62aa102d85b6214ee2a127845", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3bb743bf4f077e62aa102d85b6214ee2a127845"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4d25b444ddd3e7bede9de07530116456b9e69a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4d25b444ddd3e7bede9de07530116456b9e69a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4d25b444ddd3e7bede9de07530116456b9e69a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4d25b444ddd3e7bede9de07530116456b9e69a8/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c067f4dbc095a2471388aadcf7632520b482f60e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c067f4dbc095a2471388aadcf7632520b482f60e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c067f4dbc095a2471388aadcf7632520b482f60e"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "da3f491c66ebe4a3b89eefb440467f7e42c1c956", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d25b444ddd3e7bede9de07530116456b9e69a8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d25b444ddd3e7bede9de07530116456b9e69a8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a4d25b444ddd3e7bede9de07530116456b9e69a8", "patch": "@@ -1,3 +1,8 @@\n+2011-09-20  Jason Merrill  <jason@redhat.com>\n+\n+\t* call.c (convert_default_arg): Avoid redundant copy.\n+\t* tree.c (bot_manip): Copy everything.\n+\n 2011-09-20 Roberto Agostino Vitillo <ravitillo@lbl.gov>\n \n \t* call.c (build_new_method_call_1): Use non-virtual lookup"}, {"sha": "b616cffde5da28c038f94312554be69b02a0003c", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d25b444ddd3e7bede9de07530116456b9e69a8/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d25b444ddd3e7bede9de07530116456b9e69a8/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=a4d25b444ddd3e7bede9de07530116456b9e69a8", "patch": "@@ -6130,6 +6130,8 @@ convert_default_arg (tree type, tree arg, tree fn, int parmnum)\n \n      we must not perform access checks here.  */\n   push_deferring_access_checks (dk_no_check);\n+  /* We must make a copy of ARG, in case subsequent processing\n+     alters any part of it.  */\n   arg = break_out_target_exprs (arg);\n   if (TREE_CODE (arg) == CONSTRUCTOR)\n     {\n@@ -6140,14 +6142,6 @@ convert_default_arg (tree type, tree arg, tree fn, int parmnum)\n     }\n   else\n     {\n-      /* We must make a copy of ARG, in case subsequent processing\n-\t alters any part of it.  For example, during gimplification a\n-\t cast of the form (T) &X::f (where \"f\" is a member function)\n-\t will lead to replacing the PTRMEM_CST for &X::f with a\n-\t VAR_DECL.  We can avoid the copy for constants, since they\n-\t are never modified in place.  */\n-      if (!CONSTANT_CLASS_P (arg))\n-\targ = unshare_expr (arg);\n       arg = convert_for_initialization (0, type, arg, LOOKUP_IMPLICIT,\n \t\t\t\t\tICR_DEFAULT_ARGUMENT, fn, parmnum,\n                                         tf_warning_or_error);"}, {"sha": "a9e1a26200ee8348e81ac670fdba75daed28f713", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d25b444ddd3e7bede9de07530116456b9e69a8/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d25b444ddd3e7bede9de07530116456b9e69a8/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=a4d25b444ddd3e7bede9de07530116456b9e69a8", "patch": "@@ -1865,9 +1865,13 @@ bot_manip (tree* tp, int* walk_subtrees, void* data)\n \n   if (!TYPE_P (t) && TREE_CONSTANT (t) && !TREE_SIDE_EFFECTS (t))\n     {\n-      /* There can't be any TARGET_EXPRs or their slot variables below\n-\t this point.  */\n+      /* There can't be any TARGET_EXPRs or their slot variables below this\n+\t point.  But we must make a copy, in case subsequent processing\n+\t alters any part of it.  For example, during gimplification a cast\n+\t of the form (T) &X::f (where \"f\" is a member function) will lead\n+\t to replacing the PTRMEM_CST for &X::f with a VAR_DECL.  */\n       *walk_subtrees = 0;\n+      *tp = unshare_expr (t);\n       return NULL_TREE;\n     }\n   if (TREE_CODE (t) == TARGET_EXPR)\n@@ -1928,8 +1932,8 @@ bot_replace (tree* t,\n \n /* When we parse a default argument expression, we may create\n    temporary variables via TARGET_EXPRs.  When we actually use the\n-   default-argument expression, we make a copy of the expression, but\n-   we must replace the temporaries with appropriate local versions.  */\n+   default-argument expression, we make a copy of the expression\n+   and replace the temporaries with appropriate local versions.  */\n \n tree\n break_out_target_exprs (tree t)"}]}