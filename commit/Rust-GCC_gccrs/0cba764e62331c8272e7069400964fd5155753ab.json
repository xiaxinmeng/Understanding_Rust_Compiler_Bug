{"sha": "0cba764e62331c8272e7069400964fd5155753ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNiYTc2NGU2MjMzMWM4MjcyZTcwNjk0MDA5NjRmZDUxNTU3NTNhYg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-08-16T01:23:46Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-08-16T01:23:46Z"}, "message": "calls.c (ECF_SP_DEPRESSED): New macro.\n\n\t* calls.c (ECF_SP_DEPRESSED): New macro.\n\t(calls_function_1): Treat calling sp-depressed function as alloca.\n\t(emit_call_1): Don't adjust SP if calling sp-depressed function.\n\t(expand_call): Set ECF_SP_DEPRESSED if TYPE_RETURNS_STACK_DEPRESSED.\n\tIf sp-depressed, ensure block saves and restores SP.\n\t* fold-const.c (extract_muldiv): Only check TYPE_IS_SIZETYPE\n\tfor INTEGER_TYPE.\n\t* function.c (keep_stack_depressed): New function.\n\t(thread_prologue_and_epilogue_insns): Call it.\n\t* print-tree.c (print_node): Use HOST_WIDE_INT_PRINT_UNSIGNED\n\tto print DECL_OFFSET_ALIGN.\n\tPrint no-force-blk and transparent-union flags properly.\n\t* stmt.c (expand_goto_internal): Don't restore stack if last block\n\tand function returns with sp depressed.\n\t(fixup_gotos): Likewise.\n\t(save_stack_pointer): New function, from code in expand_decl.\n\t(expand_decl): Call new function.\n\t* tree.h (TYPE_IS_SIZETYPE): Call INTEGER_TYPE_CHECK.\n\t(TYPE_RETURNS_STACK_DEPRESSED): New macro.\n\t(save_stack_pointer): New declaration.\n\nFrom-SVN: r35735", "tree": {"sha": "b694b469192e5051776e7faa76af40a89d02b002", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b694b469192e5051776e7faa76af40a89d02b002"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cba764e62331c8272e7069400964fd5155753ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cba764e62331c8272e7069400964fd5155753ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cba764e62331c8272e7069400964fd5155753ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cba764e62331c8272e7069400964fd5155753ab/comments", "author": null, "committer": null, "parents": [{"sha": "7393c6422b26ff6275354b69b74cb06c280caa16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7393c6422b26ff6275354b69b74cb06c280caa16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7393c6422b26ff6275354b69b74cb06c280caa16"}], "stats": {"total": 45, "additions": 32, "deletions": 13}, "files": [{"sha": "c951766bfa31343aaf9cb337d8fbd1407787b5e5", "filename": "gcc/print-tree.c", "status": "modified", "additions": 32, "deletions": 13, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cba764e62331c8272e7069400964fd5155753ab/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cba764e62331c8272e7069400964fd5155753ab/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=0cba764e62331c8272e7069400964fd5155753ab", "patch": "@@ -412,7 +412,11 @@ print_node (file, prefix, node, indent)\n \t{\n \t  fprintf (file, \" align %d\", DECL_ALIGN (node));\n \t  if (TREE_CODE (node) == FIELD_DECL)\n-\t    fprintf (file, \" offset_align %d\", DECL_OFFSET_ALIGN (node));\n+\t    {\n+\t      fprintf (file, \" offset_align \");\n+\t      fprintf (file, HOST_WIDE_INT_PRINT_UNSIGNED,\n+\t\t       DECL_OFFSET_ALIGN (node));\n+\t    }\n \t}\n       else if (DECL_INLINE (node))\n \t{\n@@ -478,23 +482,36 @@ print_node (file, prefix, node, indent)\n       break;\n \n     case 't':\n-      if (TYPE_NO_FORCE_BLK (node))\n+      /* The no-force-blk flag is used for different things in\n+\t different types.  */\n+      if ((TREE_CODE (node) == RECORD_TYPE\n+\t   || TREE_CODE (node) == UNION_TYPE\n+\t   || TREE_CODE (node) == QUAL_UNION_TYPE)\n+\t  && TYPE_NO_FORCE_BLK (node))\n \tfputs (\" no-force-blk\", file);\n+      else if (TREE_CODE (node) == INTEGER_TYPE\n+\t       && TYPE_IS_SIZETYPE (node))\n+\tfputs (\" sizetype\", file);\n+      else if (TREE_CODE (node) == FUNCTION_TYPE\n+\t       && TYPE_RETURNS_STACK_DEPRESSED (node))\n+\tfputs (\" returns-stack-depressed\", file);\n+\n       if (TYPE_STRING_FLAG (node))\n \tfputs (\" string-flag\", file);\n       if (TYPE_NEEDS_CONSTRUCTING (node))\n \tfputs (\" needs-constructing\", file);\n+\n       /* The transparent-union flag is used for different things in\n \t different nodes.  */\n-      if (TYPE_CHECK (node)->type.transparent_union_flag)\n-\t{\n-\t  if (TREE_CODE (node) == UNION_TYPE)\n-\t    fputs (\" transparent-union\", file);\n-\t  else if (TREE_CODE (node) == ARRAY_TYPE)\n-\t    fputs (\" nonaliased-component\", file);\n-\t  else\n-\t    fputs (\" tu-flag\", file);\n-\t}\n+      if (TREE_CODE (node) == UNION_TYPE && TYPE_TRANSPARENT_UNION (node))\n+\tfputs (\" transparent-union\", file);\n+      else if (TREE_CODE (node) == ARRAY_TYPE\n+\t       && TYPE_NONALIASED_COMPONENT (node))\n+\tfputs (\" nonaliased-component\", file);\n+      else if (TREE_CODE (node) == FUNCTION_TYPE\n+\t       && TYPE_AMBIENT_BOUNDEDNESS (node))\n+\tfputs (\" ambient-boundedness\", file);\n+\n       if (TYPE_PACKED (node))\n \tfputs (\" packed\", file);\n \n@@ -550,10 +567,12 @@ print_node (file, prefix, node, indent)\n \t       || TREE_CODE (node) == UNION_TYPE\n \t       || TREE_CODE (node) == QUAL_UNION_TYPE)\n \tprint_node (file, \"fields\", TYPE_FIELDS (node), indent + 4);\n-      else if (TREE_CODE (node) == FUNCTION_TYPE || TREE_CODE (node) == METHOD_TYPE)\n+      else if (TREE_CODE (node) == FUNCTION_TYPE\n+\t       || TREE_CODE (node) == METHOD_TYPE)\n \t{\n \t  if (TYPE_METHOD_BASETYPE (node))\n-\t    print_node_brief (file, \"method basetype\", TYPE_METHOD_BASETYPE (node), indent + 4);\n+\t    print_node_brief (file, \"method basetype\",\n+\t\t\t      TYPE_METHOD_BASETYPE (node), indent + 4);\n \t  print_node (file, \"arg-types\", TYPE_ARG_TYPES (node), indent + 4);\n \t}\n       else if (TREE_CODE (node) == OFFSET_TYPE)"}]}