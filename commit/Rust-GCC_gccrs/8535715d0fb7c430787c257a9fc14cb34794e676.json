{"sha": "8535715d0fb7c430787c257a9fc14cb34794e676", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUzNTcxNWQwZmI3YzQzMDc4N2MyNTdhOWZjMTRjYjM0Nzk0ZTY3Ng==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-12-06T20:03:25Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-12-06T20:03:25Z"}, "message": "re PR libstdc++/51438 (std::exception and derived classes are not compatible with std::nested_exception and C++11 in general)\n\n2011-12-06  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/51438\n\t* libsupc++/nested_exception.h (nested_exception::~nested_exception):\n\tDeclare noexcept.\n\t* libsupc++/nested_exception.cc: Adjust.\n\t* testsuite/18_support/nested_exception/51438.cc: New.\n\t* testsuite/18_support/nested_exception/throw_with_nested.cc: Adjust.\n\t* testsuite/18_support/nested_exception/rethrow_if_nested.cc:\n\tLikewise.\n\n\t* src/shared_ptr.cc: Use noexcept where appropriate.\n\t* include/std/system_error: Likewise.\n\t* include/std/functional: Likewise.\n\t* include/bits/shared_ptr_base.h: Likewise.\n\t* src/stdexcept.cc: Use _GLIBCXX_USE_NOEXCEPT where appropriate.\n\t* include/std/stdexcept: Likewise.\n\t* libsupc++/bad_cast.cc: Likewise.\n\t* libsupc++/bad_typeid.cc: Likewise.\n\t* libsupc++/eh_exception.cc: Likewise.\n\t* libsupc++/typeinfo: Likewise.\n\t* libsupc++/exception: Likewise.\n\t* libsupc++/eh_ptr.cc: Likewise.\n\t* libsupc++/bad_alloc.cc: Likewise.\n\t* libsupc++/exception_ptr.h: Likewise.\n\n\t* include/std/chrono: Use noexcept where appropriate.\n\t* src/chrono.cc: Likewise.\n\nFrom-SVN: r182064", "tree": {"sha": "d7d90c64c9fb734a886b94cbda14b7158939c565", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7d90c64c9fb734a886b94cbda14b7158939c565"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8535715d0fb7c430787c257a9fc14cb34794e676", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8535715d0fb7c430787c257a9fc14cb34794e676", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8535715d0fb7c430787c257a9fc14cb34794e676", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8535715d0fb7c430787c257a9fc14cb34794e676/comments", "author": null, "committer": null, "parents": [{"sha": "0e642d0671db79acb4bccc4268e461fdcf5c1cdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e642d0671db79acb4bccc4268e461fdcf5c1cdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e642d0671db79acb4bccc4268e461fdcf5c1cdf"}], "stats": {"total": 307, "additions": 190, "deletions": 117}, "files": [{"sha": "065b6357e96a6b28ccb97f5efd17352f96c4bf27", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8535715d0fb7c430787c257a9fc14cb34794e676", "patch": "@@ -1,3 +1,32 @@\n+2011-12-06  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/51438\n+\t* libsupc++/nested_exception.h (nested_exception::~nested_exception):\n+\tDeclare noexcept.\n+\t* libsupc++/nested_exception.cc: Adjust.\n+\t* testsuite/18_support/nested_exception/51438.cc: New.\n+\t* testsuite/18_support/nested_exception/throw_with_nested.cc: Adjust.\n+\t* testsuite/18_support/nested_exception/rethrow_if_nested.cc:\n+\tLikewise.\n+\n+\t* src/shared_ptr.cc: Use noexcept where appropriate.\n+\t* include/std/system_error: Likewise.\n+\t* include/std/functional: Likewise.\n+\t* include/bits/shared_ptr_base.h: Likewise.\n+\t* src/stdexcept.cc: Use _GLIBCXX_USE_NOEXCEPT where appropriate.\n+\t* include/std/stdexcept: Likewise.\n+\t* libsupc++/bad_cast.cc: Likewise.\n+\t* libsupc++/bad_typeid.cc: Likewise.\n+\t* libsupc++/eh_exception.cc: Likewise.\n+\t* libsupc++/typeinfo: Likewise.\n+\t* libsupc++/exception: Likewise.\n+\t* libsupc++/eh_ptr.cc: Likewise.\n+\t* libsupc++/bad_alloc.cc: Likewise.\n+\t* libsupc++/exception_ptr.h: Likewise.\n+\n+\t* include/std/chrono: Use noexcept where appropriate.\n+\t* src/chrono.cc: Likewise.\n+\n 2011-12-06  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \t    Chris Jefferson  <chris@bubblescope.net>\n "}, {"sha": "c024b70fb5087a07f76986d7fb7251543142747b", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=8535715d0fb7c430787c257a9fc14cb34794e676", "patch": "@@ -63,7 +63,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     virtual char const*\n     what() const noexcept;\n \n-    virtual ~bad_weak_ptr() throw();    \n+    virtual ~bad_weak_ptr() noexcept;    \n   };\n \n   // Substitute for bad_weak_ptr object in the case of -fno-exceptions."}, {"sha": "0806a5dc1c5f75adbabca8cbeebb293bfa449d2e", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=8535715d0fb7c430787c257a9fc14cb34794e676", "patch": "@@ -686,18 +686,18 @@ _GLIBCXX_END_NAMESPACE_VERSION\n       static constexpr bool is_steady = false;\n \n       static time_point\n-      now() throw ();\n+      now() noexcept;\n \n       // Map to C API\n       static std::time_t\n-      to_time_t(const time_point& __t)\n+      to_time_t(const time_point& __t) noexcept\n       {\n \treturn std::time_t(duration_cast<chrono::seconds>\n \t\t\t   (__t.time_since_epoch()).count());\n       }\n \n       static time_point\n-      from_time_t(std::time_t __t)\n+      from_time_t(std::time_t __t) noexcept\n       {\n \ttypedef chrono::time_point<system_clock, seconds>\t__from;\n \treturn time_point_cast<system_clock::duration>\n@@ -717,7 +717,7 @@ _GLIBCXX_END_NAMESPACE_VERSION\n       static constexpr bool is_steady = true;\n \n       static time_point\n-      now();\n+      now() noexcept;\n     };\n #else\n     typedef system_clock steady_clock;"}, {"sha": "4be1bc793f365889068c69e0096957ffcbe03843", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=8535715d0fb7c430787c257a9fc14cb34794e676", "patch": "@@ -1633,7 +1633,7 @@ _GLIBCXX_HAS_NESTED_TYPE(result_type)\n   class bad_function_call : public std::exception\n   {\n   public:\n-    virtual ~bad_function_call() throw();\n+    virtual ~bad_function_call() noexcept;\n   };\n \n   /**"}, {"sha": "2cbf207df9ee7d1624264b6f0b46ebd6068c6101", "filename": "libstdc++-v3/include/std/stdexcept", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstdexcept", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstdexcept", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstdexcept?ref=8535715d0fb7c430787c257a9fc14cb34794e676", "patch": "@@ -62,12 +62,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     explicit \n     logic_error(const string& __arg);\n \n-    virtual ~logic_error() throw();\n+    virtual ~logic_error() _GLIBCXX_USE_NOEXCEPT;\n \n     /** Returns a C-style character string describing the general cause of\n      *  the current error (the same string passed to the ctor).  */\n     virtual const char* \n-    what() const throw();\n+    what() const _GLIBCXX_USE_NOEXCEPT;\n   };\n \n   /** Thrown by the library, or by you, to report domain errors (domain in\n@@ -76,15 +76,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   {\n   public:\n     explicit domain_error(const string& __arg);\n-    virtual ~domain_error() throw();\n+    virtual ~domain_error() _GLIBCXX_USE_NOEXCEPT;\n   };\n \n   /** Thrown to report invalid arguments to functions.  */\n   class invalid_argument : public logic_error \n   {\n   public:\n     explicit invalid_argument(const string& __arg);\n-    virtual ~invalid_argument() throw();\n+    virtual ~invalid_argument() _GLIBCXX_USE_NOEXCEPT;\n   };\n \n   /** Thrown when an object is constructed that would exceed its maximum\n@@ -93,7 +93,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   {\n   public:\n     explicit length_error(const string& __arg);\n-    virtual ~length_error() throw();\n+    virtual ~length_error() _GLIBCXX_USE_NOEXCEPT;\n   };\n \n   /** This represents an argument whose value is not within the expected\n@@ -102,7 +102,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   {\n   public:\n     explicit out_of_range(const string& __arg);\n-    virtual ~out_of_range() throw();\n+    virtual ~out_of_range() _GLIBCXX_USE_NOEXCEPT;\n   };\n \n   /** Runtime errors represent problems outside the scope of a program;\n@@ -119,36 +119,36 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     explicit \n     runtime_error(const string& __arg);\n \n-    virtual ~runtime_error() throw();\n+    virtual ~runtime_error() _GLIBCXX_USE_NOEXCEPT;\n \n     /** Returns a C-style character string describing the general cause of\n      *  the current error (the same string passed to the ctor).  */\n     virtual const char* \n-    what() const throw();\n+    what() const _GLIBCXX_USE_NOEXCEPT;\n   };\n \n   /** Thrown to indicate range errors in internal computations.  */\n   class range_error : public runtime_error \n   {\n   public:\n     explicit range_error(const string& __arg);\n-    virtual ~range_error() throw();\n+    virtual ~range_error() _GLIBCXX_USE_NOEXCEPT;\n   };\n \n   /** Thrown to indicate arithmetic overflow.  */\n   class overflow_error : public runtime_error \n   {\n   public:\n     explicit overflow_error(const string& __arg);\n-    virtual ~overflow_error() throw();\n+    virtual ~overflow_error() _GLIBCXX_USE_NOEXCEPT;\n   };\n \n   /** Thrown to indicate arithmetic underflow.  */\n   class underflow_error : public runtime_error \n   {\n   public:\n     explicit underflow_error(const string& __arg);\n-    virtual ~underflow_error() throw();\n+    virtual ~underflow_error() _GLIBCXX_USE_NOEXCEPT;\n   };\n \n   // @} group exceptions"}, {"sha": "129cbeefe59e7d76c65317ac4d97a501bfa8c7bb", "filename": "libstdc++-v3/include/std/system_error", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error?ref=8535715d0fb7c430787c257a9fc14cb34794e676", "patch": "@@ -337,7 +337,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : runtime_error(__what + \": \" + error_code(__v, __ecat).message()),\n       _M_code(__v, __ecat) { }\n \n-    virtual ~system_error() throw();\n+    virtual ~system_error() noexcept;\n \n     const error_code& \n     code() const noexcept { return _M_code; }"}, {"sha": "b5ed6da490856a34c08545819f32501de260c5c2", "filename": "libstdc++-v3/libsupc++/bad_alloc.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fbad_alloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fbad_alloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fbad_alloc.cc?ref=8535715d0fb7c430787c257a9fc14cb34794e676", "patch": "@@ -1,6 +1,6 @@\n // Implementation file for the -*- C++ -*- dynamic memory management header.\n \n-// Copyright (C) 2010 Free Software Foundation\n+// Copyright (C) 2010, 2011 Free Software Foundation\n //\n // This file is part of GCC.\n //\n@@ -25,10 +25,10 @@\n \n #include \"new\"\n \n-std::bad_alloc::~bad_alloc() throw() { }\n+std::bad_alloc::~bad_alloc() _GLIBCXX_USE_NOEXCEPT { }\n \n const char* \n-std::bad_alloc::what() const throw()\n+std::bad_alloc::what() const _GLIBCXX_USE_NOEXCEPT\n {\n   return \"std::bad_alloc\";\n }"}, {"sha": "e6d492d7f2808ca22fe6a18cb1cf8ff9022db17e", "filename": "libstdc++-v3/libsupc++/bad_cast.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fbad_cast.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fbad_cast.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fbad_cast.cc?ref=8535715d0fb7c430787c257a9fc14cb34794e676", "patch": "@@ -1,5 +1,5 @@\n // Copyright (C) 1994, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2007,\n-// 2009  Free Software Foundation\n+// 2009, 2010, 2011  Free Software Foundation\n //\n // This file is part of GCC.\n //\n@@ -26,10 +26,10 @@\n \n namespace std {\n \n-bad_cast::~bad_cast() throw() { }\n+bad_cast::~bad_cast() _GLIBCXX_USE_NOEXCEPT { }\n \n const char* \n-bad_cast::what() const throw()\n+bad_cast::what() const _GLIBCXX_USE_NOEXCEPT\n {\n   return \"std::bad_cast\";\n }"}, {"sha": "36a0d601b7cad579fae07f0c131a6ca373f90c42", "filename": "libstdc++-v3/libsupc++/bad_typeid.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fbad_typeid.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fbad_typeid.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fbad_typeid.cc?ref=8535715d0fb7c430787c257a9fc14cb34794e676", "patch": "@@ -1,5 +1,5 @@\n // Copyright (C) 1994, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2007,\n-// 2009  Free Software Foundation\n+// 2009, 2010, 2011  Free Software Foundation\n //\n // This file is part of GCC.\n //\n@@ -26,10 +26,10 @@\n \n namespace std {\n \n-bad_typeid::~bad_typeid() throw() { }\n+bad_typeid::~bad_typeid() _GLIBCXX_USE_NOEXCEPT { }\n \n const char* \n-bad_typeid::what() const throw()\n+bad_typeid::what() const _GLIBCXX_USE_NOEXCEPT\n {\n   return \"std::bad_typeid\";\n }"}, {"sha": "cbdca199ba9403775d0fb5e3c16cbf0c5599ae4c", "filename": "libstdc++-v3/libsupc++/eh_exception.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_exception.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_exception.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_exception.cc?ref=8535715d0fb7c430787c257a9fc14cb34794e676", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- std::exception implementation.\n // Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n-// 2003, 2004, 2005, 2006, 2007, 2009\n+// 2003, 2004, 2005, 2006, 2007, 2009, 2010, 2011\n // Free Software Foundation\n //\n // This file is part of GCC.\n@@ -28,16 +28,16 @@\n #include \"exception\"\n #include <cxxabi.h>\n \n-std::exception::~exception() throw() { }\n+std::exception::~exception() _GLIBCXX_USE_NOEXCEPT { }\n \n-std::bad_exception::~bad_exception() throw() { }\n+std::bad_exception::~bad_exception() _GLIBCXX_USE_NOEXCEPT { }\n \n abi::__forced_unwind::~__forced_unwind() throw() { }\n \n abi::__foreign_exception::~__foreign_exception() throw() { }\n \n const char* \n-std::exception::what() const throw()\n+std::exception::what() const _GLIBCXX_USE_NOEXCEPT\n {\n   // NB: Another elegant option would be returning typeid(*this).name()\n   // and not overriding what() in bad_exception, bad_alloc, etc.  In\n@@ -46,7 +46,7 @@ std::exception::what() const throw()\n }\n \n const char* \n-std::bad_exception::what() const throw()\n+std::bad_exception::what() const _GLIBCXX_USE_NOEXCEPT\n {\n   return \"std::bad_exception\";\n }"}, {"sha": "684580f413ee82051fb89cf90c5569b359ea2cb4", "filename": "libstdc++-v3/libsupc++/eh_ptr.cc", "status": "modified", "additions": 25, "deletions": 17, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc?ref=8535715d0fb7c430787c257a9fc14cb34794e676", "patch": "@@ -35,39 +35,41 @@\n \n using namespace __cxxabiv1;\n \n-std::__exception_ptr::exception_ptr::exception_ptr() throw()\n+std::__exception_ptr::exception_ptr::exception_ptr() _GLIBCXX_USE_NOEXCEPT\n : _M_exception_object(0) { }\n \n \n-std::__exception_ptr::exception_ptr::exception_ptr(void* obj) throw()\n+std::__exception_ptr::exception_ptr::exception_ptr(void* obj)\n+_GLIBCXX_USE_NOEXCEPT\n : _M_exception_object(obj)  { _M_addref(); }\n \n \n-std::__exception_ptr::exception_ptr::exception_ptr(__safe_bool) throw()\n+std::__exception_ptr::exception_ptr::exception_ptr(__safe_bool)\n+_GLIBCXX_USE_NOEXCEPT\n : _M_exception_object(0) { }\n \n \n std::__exception_ptr::\n-exception_ptr::exception_ptr(const exception_ptr& other) throw()\n+exception_ptr::exception_ptr(const exception_ptr& other) _GLIBCXX_USE_NOEXCEPT\n : _M_exception_object(other._M_exception_object)\n { _M_addref(); }\n \n \n-std::__exception_ptr::exception_ptr::~exception_ptr() throw()\n+std::__exception_ptr::exception_ptr::~exception_ptr() _GLIBCXX_USE_NOEXCEPT\n { _M_release(); }\n \n \n std::__exception_ptr::exception_ptr&\n std::__exception_ptr::\n-exception_ptr::operator=(const exception_ptr& other) throw()\n+exception_ptr::operator=(const exception_ptr& other) _GLIBCXX_USE_NOEXCEPT\n {\n   exception_ptr(other).swap(*this);\n   return *this;\n }\n \n \n void\n-std::__exception_ptr::exception_ptr::_M_addref() throw()\n+std::__exception_ptr::exception_ptr::_M_addref() _GLIBCXX_USE_NOEXCEPT\n {\n   if (_M_exception_object)\n     {\n@@ -79,7 +81,7 @@ std::__exception_ptr::exception_ptr::_M_addref() throw()\n \n \n void\n-std::__exception_ptr::exception_ptr::_M_release() throw()\n+std::__exception_ptr::exception_ptr::_M_release() _GLIBCXX_USE_NOEXCEPT\n {\n   if (_M_exception_object)\n     {\n@@ -98,12 +100,13 @@ std::__exception_ptr::exception_ptr::_M_release() throw()\n \n \n void*\n-std::__exception_ptr::exception_ptr::_M_get() const throw()\n+std::__exception_ptr::exception_ptr::_M_get() const _GLIBCXX_USE_NOEXCEPT\n { return _M_exception_object; }\n \n \n void\n-std::__exception_ptr::exception_ptr::swap(exception_ptr &other) throw()\n+std::__exception_ptr::exception_ptr::swap(exception_ptr &other)\n+  _GLIBCXX_USE_NOEXCEPT\n {\n   void *tmp = _M_exception_object;\n   _M_exception_object = other._M_exception_object;\n@@ -113,42 +116,47 @@ std::__exception_ptr::exception_ptr::swap(exception_ptr &other) throw()\n \n // Retained for compatibility with CXXABI_1.3.\n void\n-std::__exception_ptr::exception_ptr::_M_safe_bool_dummy() throw () { }\n+std::__exception_ptr::exception_ptr::_M_safe_bool_dummy()\n+  _GLIBCXX_USE_NOEXCEPT { }\n \n \n // Retained for compatibility with CXXABI_1.3.\n bool\n-std::__exception_ptr::exception_ptr::operator!() const throw()\n+std::__exception_ptr::exception_ptr::operator!() const _GLIBCXX_USE_NOEXCEPT\n { return _M_exception_object == 0; }\n \n \n // Retained for compatibility with CXXABI_1.3.\n-std::__exception_ptr::exception_ptr::operator __safe_bool() const throw()\n+std::__exception_ptr::exception_ptr::operator __safe_bool() const\n+_GLIBCXX_USE_NOEXCEPT\n {\n   return _M_exception_object ? &exception_ptr::_M_safe_bool_dummy : 0;\n }\n \n \n const std::type_info*\n-std::__exception_ptr::exception_ptr::__cxa_exception_type() const throw()\n+std::__exception_ptr::exception_ptr::__cxa_exception_type() const\n+  _GLIBCXX_USE_NOEXCEPT\n {\n   __cxa_exception *eh = __get_exception_header_from_obj (_M_exception_object);\n   return eh->exceptionType;\n }\n \n \n bool std::__exception_ptr::operator==(const exception_ptr& lhs,\n-\t\t\t\t      const exception_ptr& rhs) throw()\n+\t\t\t\t      const exception_ptr& rhs)\n+  _GLIBCXX_USE_NOEXCEPT\n { return lhs._M_exception_object == rhs._M_exception_object; }\n \n \n bool std::__exception_ptr::operator!=(const exception_ptr& lhs,\n-\t\t\t\t      const exception_ptr& rhs) throw()\n+\t\t\t\t      const exception_ptr& rhs)\n+  _GLIBCXX_USE_NOEXCEPT\n { return !(lhs == rhs);}\n \n \n std::exception_ptr\n-std::current_exception() throw()\n+std::current_exception() _GLIBCXX_USE_NOEXCEPT\n {\n   __cxa_eh_globals *globals = __cxa_get_globals ();\n   __cxa_exception *header = globals->caughtExceptions;"}, {"sha": "94a0bcbc662dec8939d0810af35cfb07ee95a1b5", "filename": "libstdc++-v3/libsupc++/exception", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception?ref=8535715d0fb7c430787c257a9fc14cb34794e676", "patch": "@@ -62,27 +62,27 @@ namespace std\n   class exception\n   {\n   public:\n-    exception() throw() { }\n-    virtual ~exception() throw();\n+    exception() _GLIBCXX_USE_NOEXCEPT { }\n+    virtual ~exception() _GLIBCXX_USE_NOEXCEPT;\n \n     /** Returns a C-style character string describing the general cause\n      *  of the current error.  */\n-    virtual const char* what() const throw();\n+    virtual const char* what() const _GLIBCXX_USE_NOEXCEPT;\n   };\n \n   /** If an %exception is thrown which is not listed in a function's\n    *  %exception specification, one of these may be thrown.  */\n   class bad_exception : public exception\n   {\n   public:\n-    bad_exception() throw() { }\n+    bad_exception() _GLIBCXX_USE_NOEXCEPT { }\n \n     // This declaration is not useless:\n     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118\n-    virtual ~bad_exception() throw();\n+    virtual ~bad_exception() _GLIBCXX_USE_NOEXCEPT;\n \n     // See comment in eh_exception.cc.\n-    virtual const char* what() const throw();\n+    virtual const char* what() const _GLIBCXX_USE_NOEXCEPT;\n   };\n \n   /// If you write a replacement %terminate handler, it must be of this type.\n@@ -92,14 +92,14 @@ namespace std\n   typedef void (*unexpected_handler) ();\n \n   /// Takes a new handler function as an argument, returns the old function.\n-  terminate_handler set_terminate(terminate_handler) throw();\n+  terminate_handler set_terminate(terminate_handler) _GLIBCXX_USE_NOEXCEPT;\n \n   /** The runtime will call this function if %exception handling must be\n    *  abandoned for any reason.  It can also be called by the user.  */\n-  void terminate() throw() __attribute__ ((__noreturn__));\n+  void terminate() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__noreturn__));\n \n   /// Takes a new handler function as an argument, returns the old function.\n-  unexpected_handler set_unexpected(unexpected_handler) throw();\n+  unexpected_handler set_unexpected(unexpected_handler) _GLIBCXX_USE_NOEXCEPT;\n \n   /** The runtime will call this function if an %exception is thrown which\n    *  violates the function's %exception specification.  */\n@@ -116,7 +116,7 @@ namespace std\n    *  %exception can result in a call of @c terminate()\n    *  (15.5.1).'\n    */\n-  bool uncaught_exception() throw() __attribute__ ((__pure__));\n+  bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));\n \n   // @} group exceptions\n } // namespace std"}, {"sha": "b6fd08e09a87f52ad1257c26a772caf155bf4d0c", "filename": "libstdc++-v3/libsupc++/exception_ptr.h", "status": "modified", "additions": 30, "deletions": 27, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h?ref=8535715d0fb7c430787c257a9fc14cb34794e676", "patch": "@@ -59,7 +59,7 @@ namespace std\n    *  is none, or the currently handled exception is foreign, return the null\n    *  value.\n    */\n-  exception_ptr current_exception() throw();\n+  exception_ptr current_exception() _GLIBCXX_USE_NOEXCEPT;\n \n   /// Throw the object pointed to by the exception_ptr.\n   void rethrow_exception(exception_ptr) __attribute__ ((__noreturn__));\n@@ -74,27 +74,27 @@ namespace std\n     {\n       void* _M_exception_object;\n \n-      explicit exception_ptr(void* __e) throw();\n+      explicit exception_ptr(void* __e) _GLIBCXX_USE_NOEXCEPT;\n \n-      void _M_addref() throw();\n-      void _M_release() throw();\n+      void _M_addref() _GLIBCXX_USE_NOEXCEPT;\n+      void _M_release() _GLIBCXX_USE_NOEXCEPT;\n \n-      void *_M_get() const throw() __attribute__ ((__pure__));\n+      void *_M_get() const _GLIBCXX_NOEXCEPT __attribute__ ((__pure__));\n \n-      friend exception_ptr std::current_exception() throw();\n+      friend exception_ptr std::current_exception() _GLIBCXX_USE_NOEXCEPT;\n       friend void std::rethrow_exception(exception_ptr);\n \n     public:\n-      exception_ptr() throw();\n+      exception_ptr() _GLIBCXX_USE_NOEXCEPT;\n \n-      exception_ptr(const exception_ptr&) throw();\n+      exception_ptr(const exception_ptr&) _GLIBCXX_USE_NOEXCEPT;\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      exception_ptr(nullptr_t) throw()\n+      exception_ptr(nullptr_t) noexcept\n       : _M_exception_object(0)\n       { }\n \n-      exception_ptr(exception_ptr&& __o) throw()\n+      exception_ptr(exception_ptr&& __o) noexcept\n       : _M_exception_object(__o._M_exception_object)\n       { __o._M_exception_object = 0; }\n #endif\n@@ -103,31 +103,33 @@ namespace std\n       typedef void (exception_ptr::*__safe_bool)();\n \n       // For construction from nullptr or 0.\n-      exception_ptr(__safe_bool) throw();\n+      exception_ptr(__safe_bool) _GLIBCXX_USE_NOEXCEPT;\n #endif\n \n       exception_ptr& \n-      operator=(const exception_ptr&) throw();\n+      operator=(const exception_ptr&) _GLIBCXX_USE_NOEXCEPT;\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       exception_ptr& \n-      operator=(exception_ptr&& __o) throw()\n+      operator=(exception_ptr&& __o) noexcept\n       {\n         exception_ptr(static_cast<exception_ptr&&>(__o)).swap(*this);\n         return *this;\n       }\n #endif\n \n-      ~exception_ptr() throw();\n+      ~exception_ptr() _GLIBCXX_USE_NOEXCEPT;\n \n       void \n-      swap(exception_ptr&) throw();\n+      swap(exception_ptr&) _GLIBCXX_USE_NOEXCEPT;\n \n #ifdef _GLIBCXX_EH_PTR_COMPAT\n       // Retained for compatibility with CXXABI_1.3.\n-      void _M_safe_bool_dummy() throw() __attribute__ ((__const__));\n-      bool operator!() const throw() __attribute__ ((__pure__));\n-      operator __safe_bool() const throw();\n+      void _M_safe_bool_dummy() _GLIBCXX_USE_NOEXCEPT\n+\t__attribute__ ((__const__));\n+      bool operator!() const _GLIBCXX_USE_NOEXCEPT\n+\t__attribute__ ((__pure__));\n+      operator __safe_bool() const _GLIBCXX_USE_NOEXCEPT;\n #endif\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n@@ -136,20 +138,21 @@ namespace std\n #endif\n \n       friend bool \n-      operator==(const exception_ptr&, const exception_ptr&) throw() \n-      __attribute__ ((__pure__));\n+      operator==(const exception_ptr&, const exception_ptr&)\n+\t_GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));\n \n       const class type_info*\n-      __cxa_exception_type() const throw() __attribute__ ((__pure__));\n+      __cxa_exception_type() const _GLIBCXX_USE_NOEXCEPT\n+\t__attribute__ ((__pure__));\n     };\n \n     bool \n-    operator==(const exception_ptr&, const exception_ptr&) throw() \n-    __attribute__ ((__pure__));\n+    operator==(const exception_ptr&, const exception_ptr&)\n+      _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));\n \n     bool \n-    operator!=(const exception_ptr&, const exception_ptr&) throw() \n-    __attribute__ ((__pure__));\n+    operator!=(const exception_ptr&, const exception_ptr&)\n+      _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));\n \n     inline void\n     swap(exception_ptr& __lhs, exception_ptr& __rhs)\n@@ -161,7 +164,7 @@ namespace std\n   /// Obtain an exception_ptr pointing to a copy of the supplied object.\n   template<typename _Ex>\n     exception_ptr \n-    copy_exception(_Ex __ex) throw()\n+    copy_exception(_Ex __ex) _GLIBCXX_USE_NOEXCEPT\n     {\n       __try\n \t{\n@@ -180,7 +183,7 @@ namespace std\n   /// Obtain an exception_ptr pointing to a copy of the supplied object.\n   template<typename _Ex>\n     exception_ptr \n-    make_exception_ptr(_Ex __ex) throw()\n+    make_exception_ptr(_Ex __ex) _GLIBCXX_USE_NOEXCEPT\n     { return std::copy_exception<_Ex>(__ex); }\n \n   // @} group exceptions"}, {"sha": "ec56369393cb893a720560da0862f195a6b5ae46", "filename": "libstdc++-v3/libsupc++/nested_exception.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnested_exception.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnested_exception.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnested_exception.cc?ref=8535715d0fb7c430787c257a9fc14cb34794e676", "patch": "@@ -26,6 +26,6 @@\n namespace std \n {\n #if ATOMIC_INT_LOCK_FREE > 1\n-  nested_exception::~nested_exception() = default;\n+  nested_exception::~nested_exception() noexcept = default;\n #endif\n } // namespace std"}, {"sha": "d88f021c5c5844c8749c1340be339965c3c753fe", "filename": "libstdc++-v3/libsupc++/nested_exception.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnested_exception.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnested_exception.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnested_exception.h?ref=8535715d0fb7c430787c257a9fc14cb34794e676", "patch": "@@ -57,13 +57,13 @@ namespace std\n     exception_ptr _M_ptr;\n \n   public:\n-    nested_exception() throw() : _M_ptr(current_exception()) { }\n+    nested_exception() noexcept : _M_ptr(current_exception()) { }\n \n     nested_exception(const nested_exception&) = default;\n \n     nested_exception& operator=(const nested_exception&) = default;\n \n-    virtual ~nested_exception();\n+    virtual ~nested_exception() noexcept;\n \n     void\n     rethrow_nested() const __attribute__ ((__noreturn__))"}, {"sha": "aaa756bfebcd29e6e853c63c92f6ed8f934c9f17", "filename": "libstdc++-v3/libsupc++/typeinfo", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo?ref=8535715d0fb7c430787c257a9fc14cb34794e676", "patch": "@@ -190,14 +190,14 @@ namespace std\n   class bad_cast : public exception \n   {\n   public:\n-    bad_cast() throw() { }\n+    bad_cast() _GLIBCXX_USE_NOEXCEPT { }\n \n     // This declaration is not useless:\n     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118\n-    virtual ~bad_cast() throw();\n+    virtual ~bad_cast() _GLIBCXX_USE_NOEXCEPT;\n \n     // See comment in eh_exception.cc.\n-    virtual const char* what() const throw();\n+    virtual const char* what() const _GLIBCXX_USE_NOEXCEPT;\n   };\n   \n   /** \n@@ -207,14 +207,14 @@ namespace std\n   class bad_typeid : public exception \n   {\n   public:\n-    bad_typeid () throw() { }\n+    bad_typeid () _GLIBCXX_USE_NOEXCEPT { }\n \n     // This declaration is not useless:\n     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118\n-    virtual ~bad_typeid() throw();\n+    virtual ~bad_typeid() _GLIBCXX_USE_NOEXCEPT;\n \n     // See comment in eh_exception.cc.\n-    virtual const char* what() const throw();\n+    virtual const char* what() const _GLIBCXX_USE_NOEXCEPT;\n   };\n } // namespace std\n "}, {"sha": "17b3402c76cd157315ab8df4b1ac8a93fed29248", "filename": "libstdc++-v3/src/chrono.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Fsrc%2Fchrono.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Fsrc%2Fchrono.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fchrono.cc?ref=8535715d0fb7c430787c257a9fc14cb34794e676", "patch": "@@ -42,7 +42,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n     constexpr bool system_clock::is_steady;\n \n     system_clock::time_point\n-    system_clock::now() throw ()\n+    system_clock::now() noexcept\n     {\n #ifdef _GLIBCXX_USE_CLOCK_REALTIME\n       timespec tp;\n@@ -64,9 +64,9 @@ namespace std _GLIBCXX_VISIBILITY(default)\n     \n #ifdef _GLIBCXX_USE_CLOCK_MONOTONIC\n     constexpr bool steady_clock::is_steady;\n-    \n+\n     steady_clock::time_point\n-    steady_clock::now()\n+    steady_clock::now() noexcept\n     {\n       timespec tp;\n       // -EINVAL, -EFAULT"}, {"sha": "911e745ebe2e9ed9c0a65858714e347442c71e8c", "filename": "libstdc++-v3/src/shared_ptr.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Fsrc%2Fshared_ptr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Fsrc%2Fshared_ptr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fshared_ptr.cc?ref=8535715d0fb7c430787c257a9fc14cb34794e676", "patch": "@@ -29,10 +29,10 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  bad_weak_ptr::~bad_weak_ptr() throw() = default;\n+  bad_weak_ptr::~bad_weak_ptr() noexcept = default;\n \n   char const*\n-  bad_weak_ptr::what() const throw()  \n+  bad_weak_ptr::what() const noexcept\n   { return \"std::bad_weak_ptr\"; }\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "dbc8f408e2f4d3294d543951632de68188c790c9", "filename": "libstdc++-v3/src/stdexcept.cc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Fsrc%2Fstdexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Fsrc%2Fstdexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstdexcept.cc?ref=8535715d0fb7c430787c257a9fc14cb34794e676", "patch": "@@ -37,55 +37,55 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   logic_error::logic_error(const string& __arg)\n   : exception(), _M_msg(__arg) { }\n \n-  logic_error::~logic_error() throw() { }\n+  logic_error::~logic_error() _GLIBCXX_USE_NOEXCEPT { }\n \n   const char*\n-  logic_error::what() const throw()\n+  logic_error::what() const _GLIBCXX_USE_NOEXCEPT\n   { return _M_msg.c_str(); }\n \n   domain_error::domain_error(const string& __arg)\n   : logic_error(__arg) { }\n \n-  domain_error::~domain_error() throw() { }\n+  domain_error::~domain_error() _GLIBCXX_USE_NOEXCEPT { }\n \n   invalid_argument::invalid_argument(const string& __arg)\n   : logic_error(__arg) { }\n \n-  invalid_argument::~invalid_argument() throw() { }\n+  invalid_argument::~invalid_argument() _GLIBCXX_USE_NOEXCEPT { }\n \n   length_error::length_error(const string& __arg)\n   : logic_error(__arg) { }\n \n-  length_error::~length_error() throw() { }\n+  length_error::~length_error() _GLIBCXX_USE_NOEXCEPT { }\n \n   out_of_range::out_of_range(const string& __arg)\n   : logic_error(__arg) { }\n \n-  out_of_range::~out_of_range() throw() { }\n+  out_of_range::~out_of_range() _GLIBCXX_USE_NOEXCEPT { }\n \n   runtime_error::runtime_error(const string& __arg)\n   : exception(), _M_msg(__arg) { }\n \n-  runtime_error::~runtime_error() throw() { }\n+  runtime_error::~runtime_error() _GLIBCXX_USE_NOEXCEPT { }\n \n   const char*\n-  runtime_error::what() const throw()\n+  runtime_error::what() const _GLIBCXX_USE_NOEXCEPT\n   { return _M_msg.c_str(); }\n \n   range_error::range_error(const string& __arg)\n   : runtime_error(__arg) { }\n \n-  range_error::~range_error() throw() { }\n+  range_error::~range_error() _GLIBCXX_USE_NOEXCEPT { }\n \n   overflow_error::overflow_error(const string& __arg)\n   : runtime_error(__arg) { }\n \n-  overflow_error::~overflow_error() throw() { }\n+  overflow_error::~overflow_error() _GLIBCXX_USE_NOEXCEPT { }\n \n   underflow_error::underflow_error(const string& __arg)\n   : runtime_error(__arg) { }\n \n-  underflow_error::~underflow_error() throw() { }\n+  underflow_error::~underflow_error() _GLIBCXX_USE_NOEXCEPT { }\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "f4a81ff7bfe46e9051d02fc8c878ca45a0be226a", "filename": "libstdc++-v3/testsuite/18_support/nested_exception/51438.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnested_exception%2F51438.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnested_exception%2F51438.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnested_exception%2F51438.cc?ref=8535715d0fb7c430787c257a9fc14cb34794e676", "patch": "@@ -0,0 +1,33 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <exception>\n+#include <stdexcept>\n+\n+// libstdc++/51438\n+void test()\n+{\n+  try {\n+    throw 2;\n+  } catch(int) {\n+    std::throw_with_nested(std::runtime_error(\"test\"));\n+  }\n+}"}, {"sha": "f76cbdf8242b69213d17155ca1989715bc60793c", "filename": "libstdc++-v3/testsuite/18_support/nested_exception/rethrow_if_nested.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnested_exception%2Frethrow_if_nested.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnested_exception%2Frethrow_if_nested.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnested_exception%2Frethrow_if_nested.cc?ref=8535715d0fb7c430787c257a9fc14cb34794e676", "patch": "@@ -1,7 +1,7 @@\n // { dg-options \"-std=gnu++0x\" }\n // { dg-require-atomic-builtins \"\" }\n \n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -23,8 +23,8 @@\n \n struct derived : std::nested_exception { };\n \n-struct base { virtual ~base(); };\n-inline base::~base() = default;\n+struct base { virtual ~base() noexcept; };\n+inline base::~base() noexcept = default;\n \n struct derived2 : base, std::nested_exception { };\n "}, {"sha": "f4d85777c2948ad6c90953ce5ad1611fd72ecb1e", "filename": "libstdc++-v3/testsuite/18_support/nested_exception/throw_with_nested.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnested_exception%2Fthrow_with_nested.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8535715d0fb7c430787c257a9fc14cb34794e676/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnested_exception%2Fthrow_with_nested.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnested_exception%2Fthrow_with_nested.cc?ref=8535715d0fb7c430787c257a9fc14cb34794e676", "patch": "@@ -1,7 +1,7 @@\n // { dg-options \"-std=gnu++0x\" }\n // { dg-require-atomic-builtins \"\" }\n \n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -23,8 +23,8 @@\n \n struct derived : std::nested_exception { };\n \n-struct not_derived { virtual ~not_derived(); };\n-inline not_derived::~not_derived() = default;\n+struct not_derived { virtual ~not_derived() noexcept; };\n+inline not_derived::~not_derived() noexcept = default;\n \n void test01() \n {"}]}