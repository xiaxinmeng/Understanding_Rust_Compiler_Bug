{"sha": "283b1707f2373794c9ff724f01429586359f0b71", "node_id": "C_kwDOANBUbNoAKDI4M2IxNzA3ZjIzNzM3OTRjOWZmNzI0ZjAxNDI5NTg2MzU5ZjBiNzE", "commit": {"author": {"name": "Jim Wilson", "email": "jimw@sifive.com", "date": "2021-08-23T07:50:22Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2021-10-25T09:06:13Z"}, "message": "RISC-V: Implement instruction patterns for ZBA extension.\n\n2021-10-25  Jim Wilson  <jimw@sifive.com>\n\t    Kito Cheng  <kito.cheng@sifive.com>\n\t    Jia-Wei Chen  <jiawei@iscas.ac.cn>\n\ngcc/ChangeLog:\n\n\t* config/riscv/bitmanip.md (*zero_extendsidi2_bitmanip): New.\n\t(*shNadd): Ditto.\n\t(*shNadduw): Ditto.\n\t(*add.uw): Ditto.\n\t(*slliuw): Ditto.\n\t(riscv_rtx_costs): Ditto.\n\t* config/riscv/riscv.md: Include bitmanip.md\n\t(type): Add bitmanip bype.\n\t(zero_extendsidi2): Change to define_expand pattern.\n\t(*zero_extendsidi2_internal): New.\n\t(zero_extendsidi2_shifted): Disable for ZBA.\n\n2021-10-25  Kito Cheng  <kito.cheng@sifive.com>\n\t    Jia-Wei Chen  <jiawei@iscas.ac.cn>\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/zba-adduw.c: New.\n\t* gcc.target/riscv/zba-shNadd-01.c: Ditto.\n\t* gcc.target/riscv/zba-shNadd-02.c: Ditto.\n\t* gcc.target/riscv/zba-shNadd-03.c: Ditto.\n\t* gcc.target/riscv/zba-slliuw.c: Ditto.\n\t* gcc.target/riscv/zba-zextw.c: Ditto.\n\nCo-authored-by: Kito Cheng <kito.cheng@sifive.com>\nCo-authored-by: Jia-Wei Chen <jiawei@iscas.ac.cn>", "tree": {"sha": "ac1d6759d88f09336dc5873f7ae1429c56fc9fcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac1d6759d88f09336dc5873f7ae1429c56fc9fcb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/283b1707f2373794c9ff724f01429586359f0b71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/283b1707f2373794c9ff724f01429586359f0b71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/283b1707f2373794c9ff724f01429586359f0b71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/283b1707f2373794c9ff724f01429586359f0b71/comments", "author": null, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "149e217033f01410a9783c5cb2d020cf8334ae4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/149e217033f01410a9783c5cb2d020cf8334ae4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/149e217033f01410a9783c5cb2d020cf8334ae4c"}], "stats": {"total": 192, "additions": 188, "deletions": 4}, "files": [{"sha": "3849d21dc1503c5bfb4dff20a8438e0351652d50", "filename": "gcc/config/riscv/bitmanip.md", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/283b1707f2373794c9ff724f01429586359f0b71/gcc%2Fconfig%2Friscv%2Fbitmanip.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/283b1707f2373794c9ff724f01429586359f0b71/gcc%2Fconfig%2Friscv%2Fbitmanip.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fbitmanip.md?ref=283b1707f2373794c9ff724f01429586359f0b71", "patch": "@@ -0,0 +1,76 @@\n+;; Machine description for RISC-V Bit Manipulation operations.\n+;; Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+;; This file is part of GCC.\n+\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+;; ZBA extension.\n+\n+(define_insn \"*zero_extendsidi2_bitmanip\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n+\t(zero_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"r,m\")))]\n+  \"TARGET_64BIT && TARGET_ZBA\"\n+  \"@\n+   zext.w\\t%0,%1\n+   lwu\\t%0,%1\"\n+  [(set_attr \"type\" \"bitmanip,load\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"*shNadd\"\n+  [(set (match_operand:X 0 \"register_operand\" \"=r\")\n+\t(plus:X (ashift:X (match_operand:X 1 \"register_operand\" \"r\")\n+\t\t\t  (match_operand:QI 2 \"immediate_operand\" \"I\"))\n+\t\t(match_operand:X 3 \"register_operand\" \"r\")))]\n+  \"TARGET_ZBA\n+   && (INTVAL (operands[2]) >= 1) && (INTVAL (operands[2]) <= 3)\"\n+  \"sh%2add\\t%0,%1,%3\"\n+  [(set_attr \"type\" \"bitmanip\")\n+   (set_attr \"mode\" \"<X:MODE>\")])\n+\n+(define_insn \"*shNadduw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(plus:DI\n+\t  (and:DI (ashift:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+\t\t\t     (match_operand:QI 2 \"immediate_operand\" \"I\"))\n+\t\t (match_operand 3 \"immediate_operand\" \"\"))\n+\t  (match_operand:DI 4 \"register_operand\" \"r\")))]\n+  \"TARGET_64BIT && TARGET_ZBA\n+   && (INTVAL (operands[2]) >= 1) && (INTVAL (operands[2]) <= 3)\n+   && (INTVAL (operands[3]) >> INTVAL (operands[2])) == 0xffffffff\"\n+  \"sh%2add.uw\\t%0,%1,%4\"\n+  [(set_attr \"type\" \"bitmanip\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"*add.uw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(plus:DI (zero_extend:DI\n+\t\t   (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t\t (match_operand:DI 2 \"register_operand\" \"r\")))]\n+  \"TARGET_64BIT && TARGET_ZBA\"\n+  \"add.uw\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"bitmanip\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"*slliuw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(and:DI (ashift:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+\t\t\t   (match_operand:QI 2 \"immediate_operand\" \"I\"))\n+\t\t(match_operand 3 \"immediate_operand\" \"\")))]\n+  \"TARGET_64BIT && TARGET_ZBA\n+   && (INTVAL (operands[3]) >> INTVAL (operands[2])) == 0xffffffff\"\n+  \"slli.uw\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"bitmanip\")\n+   (set_attr \"mode\" \"DI\")])"}, {"sha": "904d6a0691f5a843b83d2426f9bd9f6311f18af5", "filename": "gcc/config/riscv/riscv.md", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/283b1707f2373794c9ff724f01429586359f0b71/gcc%2Fconfig%2Friscv%2Friscv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/283b1707f2373794c9ff724f01429586359f0b71/gcc%2Fconfig%2Friscv%2Friscv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.md?ref=283b1707f2373794c9ff724f01429586359f0b71", "patch": "@@ -170,7 +170,7 @@\n (define_attr \"type\"\n   \"unknown,branch,jump,call,load,fpload,store,fpstore,\n    mtc,mfc,const,arith,logical,shift,slt,imul,idiv,move,fmove,fadd,fmul,\n-   fmadd,fdiv,fcmp,fcvt,fsqrt,multi,auipc,sfb_alu,nop,ghost\"\n+   fmadd,fdiv,fcmp,fcvt,fsqrt,multi,auipc,sfb_alu,nop,ghost,bitmanip\"\n   (cond [(eq_attr \"got\" \"load\") (const_string \"load\")\n \n \t ;; If a doubleword move uses these expensive instructions,\n@@ -1302,11 +1302,16 @@\n \n ;; Extension insns.\n \n-(define_insn_and_split \"zero_extendsidi2\"\n+(define_expand \"zero_extendsidi2\"\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(zero_extend:DI (match_operand:SI 1 \"nonimmediate_operand\")))]\n+  \"TARGET_64BIT\")\n+\n+(define_insn_and_split \"*zero_extendsidi2_internal\"\n   [(set (match_operand:DI     0 \"register_operand\"     \"=r,r\")\n \t(zero_extend:DI\n \t    (match_operand:SI 1 \"nonimmediate_operand\" \" r,m\")))]\n-  \"TARGET_64BIT\"\n+  \"TARGET_64BIT && !(TARGET_ZBA || TARGET_ZBB)\"\n   \"@\n    #\n    lwu\\t%0,%1\"\n@@ -2078,7 +2083,7 @@\n \t\t\t   (match_operand:QI 2 \"immediate_operand\" \"I\"))\n \t\t(match_operand 3 \"immediate_operand\" \"\")))\n    (clobber (match_scratch:DI 4 \"=&r\"))]\n-  \"TARGET_64BIT\n+  \"TARGET_64BIT && !TARGET_ZBA\n    && ((INTVAL (operands[3]) >> INTVAL (operands[2])) == 0xffffffff)\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -2845,6 +2850,7 @@\n   \"<load>\\t%3, %1\\;<load>\\t%0, %2\\;xor\\t%0, %3, %0\\;li\\t%3, 0\"\n   [(set_attr \"length\" \"12\")])\n \n+(include \"bitmanip.md\")\n (include \"sync.md\")\n (include \"peephole.md\")\n (include \"pic.md\")"}, {"sha": "cac1e84972889ee5f03488a283f62caa8b958746", "filename": "gcc/testsuite/gcc.target/riscv/zba-adduw.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/283b1707f2373794c9ff724f01429586359f0b71/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzba-adduw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/283b1707f2373794c9ff724f01429586359f0b71/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzba-adduw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzba-adduw.c?ref=283b1707f2373794c9ff724f01429586359f0b71", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gc_zba_zbs -mabi=lp64 -O2\" } */\n+\n+int foo(int n, unsigned char *arr, unsigned y){\n+  int s = 0;\n+  unsigned x = 0;\n+  for (;x<n;x++)\n+    s += arr[x+y];\n+  return s;\n+}\n+\n+/* { dg-final { scan-assembler \"add.uw\" } } */"}, {"sha": "aaabaf5e4e4736b257cefe6cba9481268b2fbc6a", "filename": "gcc/testsuite/gcc.target/riscv/zba-shNadd-01.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/283b1707f2373794c9ff724f01429586359f0b71/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzba-shNadd-01.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/283b1707f2373794c9ff724f01429586359f0b71/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzba-shNadd-01.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzba-shNadd-01.c?ref=283b1707f2373794c9ff724f01429586359f0b71", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gc_zba -mabi=lp64 -O2\" } */\n+\n+long test_1(long a, long b)\n+{\n+  return a + (b << 1);\n+}\n+long test_2(long a, long b)\n+{\n+  return a + (b << 2);\n+}\n+long test_3(long a, long b)\n+{\n+  return a + (b << 3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sh1add\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sh2add\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sh3add\" 1 } } */"}, {"sha": "8dfea4a1a855fcc8a7b58ccce3ca300470732e3a", "filename": "gcc/testsuite/gcc.target/riscv/zba-shNadd-02.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/283b1707f2373794c9ff724f01429586359f0b71/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzba-shNadd-02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/283b1707f2373794c9ff724f01429586359f0b71/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzba-shNadd-02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzba-shNadd-02.c?ref=283b1707f2373794c9ff724f01429586359f0b71", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gc_zba -mabi=ilp32 -O2\" } */\n+\n+long test_1(long a, long b)\n+{\n+  return a + (b << 1);\n+}\n+long test_2(long a, long b)\n+{\n+  return a + (b << 2);\n+}\n+long test_3(long a, long b)\n+{\n+  return a + (b << 3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sh1add\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sh2add\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sh3add\" 1 } } */"}, {"sha": "b2ea231a255ce56be4756c5c1f6552b87580a4e7", "filename": "gcc/testsuite/gcc.target/riscv/zba-shNadd-03.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/283b1707f2373794c9ff724f01429586359f0b71/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzba-shNadd-03.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/283b1707f2373794c9ff724f01429586359f0b71/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzba-shNadd-03.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzba-shNadd-03.c?ref=283b1707f2373794c9ff724f01429586359f0b71", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gc_zba -mabi=lp64 -O2\" } */\n+\n+/* RV64 only.  */\n+int foos(short *x, int n){\n+  return x[n];\n+}\n+int fooi(int *x, int n){\n+  return x[n];\n+}\n+int fooll(long long *x, int n){\n+  return x[n];\n+}\n+\n+/* RV64 only.  */\n+int ufoos(short *x, unsigned int n){\n+  return x[n];\n+}\n+int ufooi(int *x, unsigned int n){\n+  return x[n];\n+}\n+int ufooll(long long *x, unsigned int n){\n+  return x[n];\n+}\n+\n+/* { dg-final { scan-assembler-times \"sh1add\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sh2add\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sh3add\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sh3add.uw\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sh3add.uw\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sh3add.uw\" 1 } } */"}, {"sha": "50399f68e089d136d6771fe7411a30321d87b80c", "filename": "gcc/testsuite/gcc.target/riscv/zba-slliuw.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/283b1707f2373794c9ff724f01429586359f0b71/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzba-slliuw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/283b1707f2373794c9ff724f01429586359f0b71/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzba-slliuw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzba-slliuw.c?ref=283b1707f2373794c9ff724f01429586359f0b71", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gc_zba -mabi=lp64 -O2\" } */\n+\n+long\n+foo (long i)\n+{\n+  return (long)(unsigned int)i << 10;\n+}\n+/* XXX: This pattern need combine improvement or intermediate instruction\n+ *      from zbs.   */\n+/* { dg-final { scan-assembler-not \"slli.uw\" } } */"}, {"sha": "26fd64d70ec98bc58a04cca6dd7ff3a5af5e4360", "filename": "gcc/testsuite/gcc.target/riscv/zba-zextw.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/283b1707f2373794c9ff724f01429586359f0b71/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzba-zextw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/283b1707f2373794c9ff724f01429586359f0b71/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzba-zextw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzba-zextw.c?ref=283b1707f2373794c9ff724f01429586359f0b71", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gc_zba_zbs -mabi=lp64 -O2\" } */\n+\n+long\n+foo (long i)\n+{\n+  return (long)(unsigned int)i;\n+}\n+/* XXX: This pattern require combine improvement.   */\n+/* { dg-final { scan-assembler-not \"slli.uw\" } } */"}]}