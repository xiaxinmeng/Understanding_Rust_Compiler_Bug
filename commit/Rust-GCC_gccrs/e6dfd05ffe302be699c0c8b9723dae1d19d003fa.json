{"sha": "e6dfd05ffe302be699c0c8b9723dae1d19d003fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZkZmQwNWZmZTMwMmJlNjk5YzBjOGI5NzIzZGFlMWQxOWQwMDNmYQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2001-02-02T18:20:29Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2001-02-02T18:20:29Z"}, "message": "sh.c (output_far_jump): Don't use braf on SH1.\n\n* config/sh/sh.c (output_far_jump): Don't use braf on SH1.  Emit\nlabel before alignment to be used as the braf base address.\n* config/sh/sh.md (length): Use longer lengths for SH1 PIC far\nbranches.\n(casesi_jump_2): Require at least TARGET_SH2.\n\nFrom-SVN: r39410", "tree": {"sha": "16c1afc47c7bb50194a1926d9777174059b437e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16c1afc47c7bb50194a1926d9777174059b437e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6dfd05ffe302be699c0c8b9723dae1d19d003fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6dfd05ffe302be699c0c8b9723dae1d19d003fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6dfd05ffe302be699c0c8b9723dae1d19d003fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6dfd05ffe302be699c0c8b9723dae1d19d003fa/comments", "author": null, "committer": null, "parents": [{"sha": "38df95a4c9a1af7f22b10694f5b92ffabbe55cdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38df95a4c9a1af7f22b10694f5b92ffabbe55cdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38df95a4c9a1af7f22b10694f5b92ffabbe55cdf"}], "stats": {"total": 39, "additions": 34, "deletions": 5}, "files": [{"sha": "49c06286224ae9c7a1772e0bac53f7549b512b21", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6dfd05ffe302be699c0c8b9723dae1d19d003fa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6dfd05ffe302be699c0c8b9723dae1d19d003fa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e6dfd05ffe302be699c0c8b9723dae1d19d003fa", "patch": "@@ -1,5 +1,11 @@\n 2001-02-02  Alexandre Oliva  <aoliva@redhat.com>\n \n+\t* config/sh/sh.c (output_far_jump): Don't use braf on SH1.  Emit\n+\tlabel before alignment to be used as the braf base address.\n+\t* config/sh/sh.md (length): Use longer lengths for SH1 PIC far\n+\tbranches.\n+\t(casesi_jump_2): Require at least TARGET_SH2.\n+\n \t* config/float-sh.h (LDBL_EPSILON, LDBL_MIN, LDBL_MAX): Prevent\n \ttruncation to 32-bit doubles on -m3e and -m4-single-only.\n "}, {"sha": "4385a0fa6e03078b83fc4f6577a18aff07c889f5", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6dfd05ffe302be699c0c8b9723dae1d19d003fa/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6dfd05ffe302be699c0c8b9723dae1d19d003fa/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=e6dfd05ffe302be699c0c8b9723dae1d19d003fa", "patch": "@@ -715,6 +715,7 @@ output_far_jump (insn, op)\n      rtx op;\n {\n   struct { rtx lab, reg, op; } this;\n+  rtx braf_base_lab;\n   const char *jump;\n   int far;\n   int offset = branch_dest (insn) - INSN_ADDRESSES (INSN_UID (insn));\n@@ -726,21 +727,28 @@ output_far_jump (insn, op)\n       && offset - get_attr_length (insn) <= 32766)\n     {\n       far = 0;\n-      jump = \"mov.w\t%O0,%1;braf\t%1\";\n+      jump = \"mov.w\t%O0,%1; braf\t%1\";\n     }\n   else\n     {\n       far = 1;\n       if (flag_pic)\n-\tjump = \"mov.l\t%O0,%1;braf\t%1\";\n+\t{\n+\t  if (TARGET_SH2)\n+\t    jump = \"mov.l\t%O0,%1; braf\t%1\";\n+\t  else\n+\t    jump = \"mov.l\tr0,@-r15; mova\t%O0,r0; mov.l\t@r0,%1; add\tr0,%1; mov.l\t@r15+,r0; jmp\t@%1\";\n+\t}\n       else\n-\tjump = \"mov.l\t%O0,%1;jmp\t@%1\";\n+\tjump = \"mov.l\t%O0,%1; jmp\t@%1\";\n     }\n   /* If we have a scratch register available, use it.  */\n   if (GET_CODE (PREV_INSN (insn)) == INSN\n       && INSN_CODE (PREV_INSN (insn)) == CODE_FOR_indirect_jump_scratch)\n     {\n       this.reg = SET_DEST (PATTERN (PREV_INSN (insn)));\n+      if (REGNO (this.reg) == R0_REG && flag_pic && ! TARGET_SH2)\n+\tjump = \"mov.l\tr1,@-r15; mova\t%O0,r0; mov.l\t@r0,r1; add\tr1,r0; mov.l\t@r15+,r1; jmp\t@%1\";\n       output_asm_insn (jump, &this.lab);\n       if (dbr_sequence_length ())\n \tprint_slot (final_sequence);\n@@ -758,12 +766,22 @@ output_far_jump (insn, op)\n       output_asm_insn (jump, &this.lab);\n       output_asm_insn (\"mov.l\t@r15+,r13\", 0);\n     }\n+  if (far && flag_pic && TARGET_SH2)\n+    {\n+      braf_base_lab = gen_label_rtx ();\n+      ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"L\",\n+\t\t\t\t CODE_LABEL_NUMBER (braf_base_lab));\n+    }\n   if (far)\n     output_asm_insn (\".align\t2\", 0);\n   ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"L\", CODE_LABEL_NUMBER (this.lab));\n   this.op = op;\n   if (far && flag_pic)\n-    output_asm_insn (\".long\t%O2-%O0\", &this.lab);\n+    {\n+      if (TARGET_SH2)\n+\tthis.lab = braf_base_lab;\n+      output_asm_insn (\".long\t%O2-%O0\", &this.lab);\n+    }\n   else\n     output_asm_insn (far ? \".long\t%O2\" : \".word %O2-%O0\", &this.lab);\n   return \"\";"}, {"sha": "7f5aefe518894dd79785cf36885c224725e01f97", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6dfd05ffe302be699c0c8b9723dae1d19d003fa/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6dfd05ffe302be699c0c8b9723dae1d19d003fa/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=e6dfd05ffe302be699c0c8b9723dae1d19d003fa", "patch": "@@ -290,6 +290,8 @@\n ;; ??? using pc is not computed transitively.\n \t\t(ne (match_dup 0) (match_dup 0))\n \t\t(const_int 14)\n+\t\t(ne (symbol_ref (\"flag_pic\")) (const_int 0))\n+\t\t(const_int 24)\n \t\t] (const_int 16))\n \t (eq_attr \"type\" \"jump\")\n \t (cond [(eq_attr \"med_branch_p\" \"yes\")\n@@ -306,6 +308,8 @@\n ;; ??? using pc is not computed transitively.\n \t\t(ne (match_dup 0) (match_dup 0))\n \t\t(const_int 12)\n+\t\t(ne (symbol_ref (\"flag_pic\")) (const_int 0))\n+\t\t(const_int 22)\n \t\t] (const_int 14))\n \t ] (const_int 2)))\n \n@@ -3674,7 +3678,8 @@\n   [(set (pc) (plus:SI (match_operand:SI 0 \"register_operand\" \"r\")\n \t\t      (label_ref (match_operand 1 \"\" \"\"))))\n    (use (label_ref (match_operand 2 \"\" \"\")))]\n-  \"! INSN_UID (operands[1]) || prev_real_insn (operands[1]) == insn\"\n+  \"TARGET_SH2\n+   && (! INSN_UID (operands[1]) || prev_real_insn (operands[1]) == insn)\"\n   \"braf\t%0%#\"\n   [(set_attr \"needs_delay_slot\" \"yes\")\n    (set_attr \"type\" \"jump_ind\")])"}]}