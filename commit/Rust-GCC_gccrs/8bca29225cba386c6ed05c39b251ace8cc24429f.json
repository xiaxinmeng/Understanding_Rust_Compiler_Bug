{"sha": "8bca29225cba386c6ed05c39b251ace8cc24429f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJjYTI5MjI1Y2JhMzg2YzZlZDA1YzM5YjI1MWFjZThjYzI0NDI5Zg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-06-28T00:23:08Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-06-28T00:23:08Z"}, "message": "(split_di): New; from i386.c.\n\nFrom-SVN: r12340", "tree": {"sha": "b893c21f797d6bcf908ac55f6e70cc8ca5fc3ad1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b893c21f797d6bcf908ac55f6e70cc8ca5fc3ad1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bca29225cba386c6ed05c39b251ace8cc24429f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bca29225cba386c6ed05c39b251ace8cc24429f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bca29225cba386c6ed05c39b251ace8cc24429f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bca29225cba386c6ed05c39b251ace8cc24429f/comments", "author": null, "committer": null, "parents": [{"sha": "3aceff0d36536f9136f1b3a957e6f7da1d19b41a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aceff0d36536f9136f1b3a957e6f7da1d19b41a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3aceff0d36536f9136f1b3a957e6f7da1d19b41a"}], "stats": {"total": 35, "additions": 34, "deletions": 1}, "files": [{"sha": "0e07662fa313476a67cb6e091b4d0eaf59cf45ea", "filename": "gcc/config/ns32k/ns32k.c", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bca29225cba386c6ed05c39b251ace8cc24429f/gcc%2Fconfig%2Fns32k%2Fns32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bca29225cba386c6ed05c39b251ace8cc24429f/gcc%2Fconfig%2Fns32k%2Fns32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.c?ref=8bca29225cba386c6ed05c39b251ace8cc24429f", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for assembler code output on the NS32000.\n-   Copyright (C) 1988, 1994, 1995 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1994, 1995, 1996 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -227,6 +227,39 @@ reg_or_mem_operand (op, mode)\n \t      || GET_CODE (op) == MEM));\n }\n \f\n+/* Split one or more DImode RTL references into pairs of SImode\n+   references.  The RTL can be REG, offsettable MEM, integer constant, or\n+   CONST_DOUBLE.  \"operands\" is a pointer to an array of DImode RTL to\n+   split and \"num\" is its length.  lo_half and hi_half are output arrays\n+   that parallel \"operands\". */\n+\n+void\n+split_di (operands, num, lo_half, hi_half)\n+     rtx operands[];\n+     int num;\n+     rtx lo_half[], hi_half[];\n+{\n+  while (num--)\n+    {\n+      if (GET_CODE (operands[num]) == REG)\n+\t{\n+\t  lo_half[num] = gen_rtx (REG, SImode, REGNO (operands[num]));\n+\t  hi_half[num] = gen_rtx (REG, SImode, REGNO (operands[num]) + 1);\n+\t}\n+      else if (CONSTANT_P (operands[num]))\n+\t{\n+\t  split_double (operands[num], &lo_half[num], &hi_half[num]);\n+\t}\n+      else if (offsettable_memref_p (operands[num]))\n+\t{\n+\t  lo_half[num] = operands[num];\n+\t  hi_half[num] = adj_offsettable_operand (operands[num], 4);\n+\t}\n+      else\n+\tabort();\n+    }\n+}\n+\f\n /* Return the best assembler insn template\n    for moving operands[1] into operands[0] as a fullword.  */\n "}]}