{"sha": "838f8562e6f18d9450c8a4c30e2d1cab4c0229a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM4Zjg1NjJlNmYxOGQ5NDUwYzhhNGMzMGUyZDFjYWI0YzAyMjlhMA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-07-21T20:08:36Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-07-21T20:08:36Z"}, "message": "Warning fixes:\n\n\t* cp-demangle.c (cp_demangle_type): Wrap in IN_LIBGCC2.\n\n\t* setenv.c (setenv): Initialize variable `ep'.\n\n\t* sigsetmask.c (abort): Prototype.\n\n\t* vasprintf.c: Include config.h.  Check ANSI_PROTOTYPES, not\n\t__STDC__ for stdarg.h include.\n\t(int_vasprintf): Prototype.\n\t(checkit): Prototype.  Use VPARAMS/ANSI_PROTOTYPES/VA_START in\n\tdefinition.  Cast `global_total_width' in comparison.\n\t(main): Prototype.  Return a value.\n\n\t* vfork.c (fork): Prototype.\n\n\t* xexit.c: Include config.h.\n\nFrom-SVN: r35178", "tree": {"sha": "9c6b2d3c7e513a58a41d0e61372b5492764fb4e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c6b2d3c7e513a58a41d0e61372b5492764fb4e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/838f8562e6f18d9450c8a4c30e2d1cab4c0229a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/838f8562e6f18d9450c8a4c30e2d1cab4c0229a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/838f8562e6f18d9450c8a4c30e2d1cab4c0229a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/838f8562e6f18d9450c8a4c30e2d1cab4c0229a0/comments", "author": null, "committer": null, "parents": [{"sha": "058ef853fd5adbde3d5a0bd6fae3d6df7db446ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/058ef853fd5adbde3d5a0bd6fae3d6df7db446ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/058ef853fd5adbde3d5a0bd6fae3d6df7db446ea"}], "stats": {"total": 95, "additions": 67, "deletions": 28}, "files": [{"sha": "c8a5f91f4c6904d7f29d0d605f81d8a53aecd47c", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/838f8562e6f18d9450c8a4c30e2d1cab4c0229a0/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/838f8562e6f18d9450c8a4c30e2d1cab4c0229a0/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=838f8562e6f18d9450c8a4c30e2d1cab4c0229a0", "patch": "@@ -1,3 +1,22 @@\n+2000-07-21  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* cp-demangle.c (cp_demangle_type): Wrap in IN_LIBGCC2.\n+\n+\t* setenv.c (setenv): Initialize variable `ep'.\n+\n+\t* sigsetmask.c (abort): Prototype.\n+\n+\t* vasprintf.c: Include config.h.  Check ANSI_PROTOTYPES, not\n+\t__STDC__ for stdarg.h include.\n+\t(int_vasprintf): Prototype.\n+\t(checkit): Prototype.  Use VPARAMS/ANSI_PROTOTYPES/VA_START in\n+\tdefinition.  Cast `global_total_width' in comparison.\n+\t(main): Prototype.  Return a value.\n+\n+\t* vfork.c (fork): Prototype.\n+\n+\t* xexit.c: Include config.h.\n+\n 2000-07-20  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* cplus-dem.c (demangle_fund_type): Make 'dec' an unsigned int,"}, {"sha": "13a746cb95f956bab42e666e67fcd7372c2e7d40", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/838f8562e6f18d9450c8a4c30e2d1cab4c0229a0/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/838f8562e6f18d9450c8a4c30e2d1cab4c0229a0/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=838f8562e6f18d9450c8a4c30e2d1cab4c0229a0", "patch": "@@ -852,8 +852,10 @@ static status_t demangle_discriminator\n   PARAMS ((demangling_t, int));\n static status_t cp_demangle\n   PARAMS ((const char *, dyn_string_t));\n+#ifdef IN_LIBGCC2\n static status_t cp_demangle_type\n   PARAMS ((const char*, dyn_string_t));\n+#endif\n \n /* When passed to demangle_bare_function_type, indicates that the\n    function's return type is not encoded before its parameter types.  */\n@@ -3023,6 +3025,7 @@ cp_demangle (name, result)\n    dyn_string_t.  On success, returns STATUS_OK.  On failiure, returns\n    an error message, and the contents of RESULT are unchanged.  */\n \n+#ifdef IN_LIBGCC2\n static status_t\n cp_demangle_type (type_name, result)\n      const char* type_name;\n@@ -3060,9 +3063,6 @@ cp_demangle_type (type_name, result)\n   return status;\n }\n \n-\n-#ifdef IN_LIBGCC2\n-\n extern char *__cxa_demangle PARAMS ((const char *, char *, size_t *, int *));\n \n /* ABI-mandated entry point in the C++ runtime library for performing"}, {"sha": "f025716e7f5fc0a2e929a289eb7c4051a2e5ea0a", "filename": "libiberty/setenv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/838f8562e6f18d9450c8a4c30e2d1cab4c0229a0/libiberty%2Fsetenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/838f8562e6f18d9450c8a4c30e2d1cab4c0229a0/libiberty%2Fsetenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fsetenv.c?ref=838f8562e6f18d9450c8a4c30e2d1cab4c0229a0", "patch": "@@ -63,7 +63,7 @@ setenv (name, value, replace)\n      const char *value;\n      int replace;\n {\n-  register char **ep;\n+  register char **ep = 0;\n   register size_t size;\n   const size_t namelen = strlen (name);\n   const size_t vallen = strlen (value) + 1;"}, {"sha": "db6408df75a78c0685897cdb52692cdf18ad91be", "filename": "libiberty/sigsetmask.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/838f8562e6f18d9450c8a4c30e2d1cab4c0229a0/libiberty%2Fsigsetmask.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/838f8562e6f18d9450c8a4c30e2d1cab4c0229a0/libiberty%2Fsigsetmask.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fsigsetmask.c?ref=838f8562e6f18d9450c8a4c30e2d1cab4c0229a0", "patch": "@@ -12,6 +12,8 @@\n #include <sys/types.h>\n #include <signal.h>\n \n+extern void abort PARAMS ((void)) ATTRIBUTE_NORETURN;\n+\n #ifdef SIG_SETMASK\n int\n DEFUN(sigsetmask,(set),"}, {"sha": "c34585d04987c5efb2fc54f040c15bf71f4d5da7", "filename": "libiberty/vasprintf.c", "status": "modified", "additions": 33, "deletions": 21, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/838f8562e6f18d9450c8a4c30e2d1cab4c0229a0/libiberty%2Fvasprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/838f8562e6f18d9450c8a4c30e2d1cab4c0229a0/libiberty%2Fvasprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fvasprintf.c?ref=838f8562e6f18d9450c8a4c30e2d1cab4c0229a0", "patch": "@@ -18,21 +18,31 @@ License along with libiberty; see the file COPYING.LIB.  If\n not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-#ifdef __STDC__\n+#ifdef HAVE_CONFIG_H\n+#include \"config.h\"\n+#endif\n+#include <ansidecl.h>\n+#ifdef ANSI_PROTOTYPES\n #include <stdarg.h>\n #else\n #include <varargs.h>\n #endif\n #include <stdio.h>\n #include <string.h>\n-#include <ansidecl.h>\n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#else\n+extern unsigned long strtoul ();\n+extern PTR malloc ();\n+#endif\n+#include \"libiberty.h\"\n \n #ifdef TEST\n int global_total_width;\n #endif\n \n-unsigned long strtoul ();\n-char *malloc ();\n+\n+static int int_vasprintf PARAMS ((char **, const char *, va_list *));\n \n static int\n int_vasprintf (result, format, args)\n@@ -60,7 +70,7 @@ int_vasprintf (result, format, args)\n \t      total_width += abs (va_arg (ap, int));\n \t    }\n \t  else\n-\t    total_width += strtoul (p, &p, 10);\n+\t    total_width += strtoul (p, (char **) &p, 10);\n \t  if (*p == '.')\n \t    {\n \t      ++p;\n@@ -70,7 +80,7 @@ int_vasprintf (result, format, args)\n \t\t  total_width += abs (va_arg (ap, int));\n \t\t}\n \t      else\n-\t      total_width += strtoul (p, &p, 10);\n+\t      total_width += strtoul (p, (char **) &p, 10);\n \t    }\n \t  while (strchr (\"hlL\", *p))\n \t    ++p;\n@@ -132,33 +142,33 @@ vasprintf (result, format, args)\n }\n \n #ifdef TEST\n-void\n-checkit\n-#ifdef __STDC__\n-     (const char* format, ...)\n-#else\n-     (va_alist)\n-     va_dcl\n-#endif\n+static void checkit PARAMS ((const char *, ...));\n+\n+static void\n+checkit VPARAMS ((const char* format, ...))\n {\n   va_list args;\n   char *result;\n+#ifndef ANSI_PROTOTYPES\n+  const char *format;\n+#endif\n \n-#ifdef __STDC__\n-  va_start (args, format);\n-#else\n-  char *format;\n-  va_start (args);\n-  format = va_arg (args, char *);\n+  VA_START (args, format);\n+\n+#ifndef ANSI_PROTOTYPES\n+  format = va_arg (args, const char *);\n #endif\n+\n   vasprintf (&result, format, args);\n-  if (strlen (result) < global_total_width)\n+  if (strlen (result) < (size_t) global_total_width)\n     printf (\"PASS: \");\n   else\n     printf (\"FAIL: \");\n   printf (\"%d %s\\n\", global_total_width, result);\n }\n \n+extern int main PARAMS ((void));\n+\n int\n main ()\n {\n@@ -169,5 +179,7 @@ main ()\n   checkit (\"%s\", \"jjjjjjjjjiiiiiiiiiiiiiiioooooooooooooooooppppppppppppaa\\n\\\n 777777777777777777333333333333366666666666622222222222777777777777733333\");\n   checkit (\"%f%s%d%s\", 1.0, \"foo\", 77, \"asdjffffffffffffffiiiiiiiiiiixxxxx\");\n+\n+  return 0;\n }\n #endif /* TEST */"}, {"sha": "5e8772100815f107d1927ab11cb253c08e8aad71", "filename": "libiberty/vfork.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/838f8562e6f18d9450c8a4c30e2d1cab4c0229a0/libiberty%2Fvfork.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/838f8562e6f18d9450c8a4c30e2d1cab4c0229a0/libiberty%2Fvfork.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fvfork.c?ref=838f8562e6f18d9450c8a4c30e2d1cab4c0229a0", "patch": "@@ -1,6 +1,10 @@\n /* Emulate vfork using just plain fork, for systems without a real vfork.\n    This function is in the public domain. */\n \n+#include \"ansidecl.h\"\n+\n+extern int fork PARAMS ((void));\n+\n int\n vfork ()\n {"}, {"sha": "e8b1ed1c00738044762cc7f5381ce91439ee8c2c", "filename": "libiberty/xexit.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/838f8562e6f18d9450c8a4c30e2d1cab4c0229a0/libiberty%2Fxexit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/838f8562e6f18d9450c8a4c30e2d1cab4c0229a0/libiberty%2Fxexit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fxexit.c?ref=838f8562e6f18d9450c8a4c30e2d1cab4c0229a0", "patch": "@@ -17,13 +17,15 @@ License along with libiberty; see the file COPYING.LIB.  If not, write\n to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-#include \"ansidecl.h\"\n-#include \"libiberty.h\"\n-\n+#ifdef HAVE_CONFIG_H\n+#include \"config.h\"\n+#endif\n #include <stdio.h>\n #ifdef HAVE_STDLIB_H\n #include <stdlib.h>\n #endif\n+#include \"libiberty.h\"\n+\n \n /* This variable is set by xatexit if it is called.  This way, xmalloc\n    doesn't drag xatexit into the link.  */"}]}