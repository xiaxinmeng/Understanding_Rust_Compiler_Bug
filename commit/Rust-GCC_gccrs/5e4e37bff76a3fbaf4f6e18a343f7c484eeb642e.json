{"sha": "5e4e37bff76a3fbaf4f6e18a343f7c484eeb642e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU0ZTM3YmZmNzZhM2ZiYWY0ZjZlMThhMzQzZjdjNDg0ZWViNjQyZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-08-30T11:17:20Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-08-30T11:17:20Z"}, "message": "[50/77] Add helper routines for SUBREG_PROMOTED_VAR_P subregs\n\nWhen subregs contain promoted values, as indicated by\nSUBREG_PROMOTED_VAR_P, both the unpromoted (outer) and\npromoted (inner) values are known to be scalar integers.\nThis patch adds helper routines that get the modes as\nscalar_int_modes.\n\n2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* rtl.h (subreg_unpromoted_mode, subreg_promoted_mode): New functions.\n\t* expr.c (convert_move): Use them.\n\t(convert_modes): Likewise.\n\t(store_expr_with_bounds): Likewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r251502", "tree": {"sha": "d48a76de8eb38795478f41a6e359ffce506390ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d48a76de8eb38795478f41a6e359ffce506390ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e4e37bff76a3fbaf4f6e18a343f7c484eeb642e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e4e37bff76a3fbaf4f6e18a343f7c484eeb642e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e4e37bff76a3fbaf4f6e18a343f7c484eeb642e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e4e37bff76a3fbaf4f6e18a343f7c484eeb642e/comments", "author": null, "committer": null, "parents": [{"sha": "401581b6eb93369a5e60c05e9f13d072ba23cff4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/401581b6eb93369a5e60c05e9f13d072ba23cff4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/401581b6eb93369a5e60c05e9f13d072ba23cff4"}], "stats": {"total": 44, "additions": 36, "deletions": 8}, "files": [{"sha": "98fe42325df759cec99d344b532776d5b6950647", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e4e37bff76a3fbaf4f6e18a343f7c484eeb642e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e4e37bff76a3fbaf4f6e18a343f7c484eeb642e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e4e37bff76a3fbaf4f6e18a343f7c484eeb642e", "patch": "@@ -1,3 +1,12 @@\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* rtl.h (subreg_unpromoted_mode, subreg_promoted_mode): New functions.\n+\t* expr.c (convert_move): Use them.\n+\t(convert_modes): Likewise.\n+\t(store_expr_with_bounds): Likewise.\n+\n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "7afb4cd802f61dd7b15351d2d98b6db08bbeb1d4", "filename": "gcc/expr.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e4e37bff76a3fbaf4f6e18a343f7c484eeb642e/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e4e37bff76a3fbaf4f6e18a343f7c484eeb642e/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=5e4e37bff76a3fbaf4f6e18a343f7c484eeb642e", "patch": "@@ -243,7 +243,7 @@ convert_move (rtx to, rtx from, int unsignedp)\n   if (GET_CODE (from) == SUBREG\n       && SUBREG_PROMOTED_VAR_P (from)\n       && is_a <scalar_int_mode> (to_mode, &to_int_mode)\n-      && (GET_MODE_PRECISION (GET_MODE (SUBREG_REG (from)))\n+      && (GET_MODE_PRECISION (subreg_promoted_mode (from))\n \t  >= GET_MODE_PRECISION (to_int_mode))\n       && SUBREG_CHECK_PROMOTED_SIGN (from, unsignedp))\n     from = gen_lowpart (to_int_mode, from), from_mode = to_int_mode;\n@@ -641,7 +641,8 @@ convert_modes (machine_mode mode, machine_mode oldmode, rtx x, int unsignedp)\n   if (GET_CODE (x) == SUBREG\n       && SUBREG_PROMOTED_VAR_P (x)\n       && is_a <scalar_int_mode> (mode, &int_mode)\n-      && GET_MODE_SIZE (GET_MODE (SUBREG_REG (x))) >= GET_MODE_SIZE (int_mode)\n+      && (GET_MODE_PRECISION (subreg_promoted_mode (x))\n+\t  >= GET_MODE_PRECISION (int_mode))\n       && SUBREG_CHECK_PROMOTED_SIGN (x, unsignedp))\n     x = gen_lowpart (int_mode, SUBREG_REG (x));\n \n@@ -5422,6 +5423,8 @@ store_expr_with_bounds (tree exp, rtx target, int call_param_p,\n        expression.  */\n     {\n       rtx inner_target = 0;\n+      scalar_int_mode outer_mode = subreg_unpromoted_mode (target);\n+      scalar_int_mode inner_mode = subreg_promoted_mode (target);\n \n       /* We can do the conversion inside EXP, which will often result\n \t in some optimizations.  Do the conversion in two steps: first\n@@ -5431,7 +5434,7 @@ store_expr_with_bounds (tree exp, rtx target, int call_param_p,\n \t converting modes.  */\n       if (INTEGRAL_TYPE_P (TREE_TYPE (exp))\n \t  && TREE_TYPE (TREE_TYPE (exp)) == 0\n-\t  && GET_MODE_PRECISION (GET_MODE (target))\n+\t  && GET_MODE_PRECISION (outer_mode)\n \t     == TYPE_PRECISION (TREE_TYPE (exp)))\n \t{\n \t  if (!SUBREG_CHECK_PROMOTED_SIGN (target,\n@@ -5451,8 +5454,7 @@ store_expr_with_bounds (tree exp, rtx target, int call_param_p,\n \t    }\n \n \t  exp = fold_convert_loc (loc, lang_hooks.types.type_for_mode\n-\t\t\t\t  (GET_MODE (SUBREG_REG (target)),\n-\t\t\t\t   SUBREG_PROMOTED_SIGN (target)),\n+\t\t\t\t  (inner_mode, SUBREG_PROMOTED_SIGN (target)),\n \t\t\t\t  exp);\n \n \t  inner_target = SUBREG_REG (target);\n@@ -5478,10 +5480,9 @@ store_expr_with_bounds (tree exp, rtx target, int call_param_p,\n \t sure that we properly convert it.  */\n       if (CONSTANT_P (temp) && GET_MODE (temp) == VOIDmode)\n \t{\n-\t  temp = convert_modes (GET_MODE (target), TYPE_MODE (TREE_TYPE (exp)),\n+\t  temp = convert_modes (outer_mode, TYPE_MODE (TREE_TYPE (exp)),\n \t\t\t\ttemp, SUBREG_PROMOTED_SIGN (target));\n-\t  temp = convert_modes (GET_MODE (SUBREG_REG (target)),\n-\t\t\t        GET_MODE (target), temp,\n+\t  temp = convert_modes (inner_mode, outer_mode, temp,\n \t\t\t\tSUBREG_PROMOTED_SIGN (target));\n \t}\n "}, {"sha": "8f4c1fa36f15be1e29dafb2fb555b25d4ed8ce9a", "filename": "gcc/rtl.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e4e37bff76a3fbaf4f6e18a343f7c484eeb642e/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e4e37bff76a3fbaf4f6e18a343f7c484eeb642e/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=5e4e37bff76a3fbaf4f6e18a343f7c484eeb642e", "patch": "@@ -2764,6 +2764,24 @@ unwrap_const_vec_duplicate (T x)\n   return x;\n }\n \n+/* Return the unpromoted (outer) mode of SUBREG_PROMOTED_VAR_P subreg X.  */\n+\n+inline scalar_int_mode\n+subreg_unpromoted_mode (rtx x)\n+{\n+  gcc_checking_assert (SUBREG_PROMOTED_VAR_P (x));\n+  return as_a <scalar_int_mode> (GET_MODE (x));\n+}\n+\n+/* Return the promoted (inner) mode of SUBREG_PROMOTED_VAR_P subreg X.  */\n+\n+inline scalar_int_mode\n+subreg_promoted_mode (rtx x)\n+{\n+  gcc_checking_assert (SUBREG_PROMOTED_VAR_P (x));\n+  return as_a <scalar_int_mode> (GET_MODE (SUBREG_REG (x)));\n+}\n+\n /* In emit-rtl.c */\n extern rtvec gen_rtvec_v (int, rtx *);\n extern rtvec gen_rtvec_v (int, rtx_insn **);"}]}