{"sha": "9acd5a01175a3a0998eaaf306305890081d8550f", "node_id": "C_kwDOANBUbNoAKDlhY2Q1YTAxMTc1YTNhMDk5OGVhYWYzMDYzMDU4OTAwODFkODU1MGY", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-24T10:52:30Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-24T10:52:30Z"}, "message": "fortran: Extend -fconvert= option for ppc64le r16_ieee and r16_ibm\n\nThis patch on top of the previously posted option handling changes patch\nallows specifying -fconvert=swap,r16_ieee etc. (but will error on it\nwhen not on powerpc64le because in the library such swapping is only\nimplemented for HAVE_REAL_17).\n\n2022-01-24  Jakub Jelinek  <jakub@redhat.com>\n\n\t* lang.opt (fconvert=): Add EnumSet property and mention also\n\tr16_ieee and r16_ibm arguments.\n\t(big-endian, little-endian, native, swap): Add Set(1) property.\n\t(r16_ieee, r16_ibm): New EnumValue entries with Set(2) property.\n\t* trans-types.cc (gfc_init_kinds): Emit gfc_fatal_error for\n\t-fconvert=r16_ieee or -fconvert=r16_ibm when R16_IEEE <=> R16_IBM\n\tconversions aren't supported.", "tree": {"sha": "1a305d8a5b689a4b7007db08a77a7e1a5b7459d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a305d8a5b689a4b7007db08a77a7e1a5b7459d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9acd5a01175a3a0998eaaf306305890081d8550f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9acd5a01175a3a0998eaaf306305890081d8550f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9acd5a01175a3a0998eaaf306305890081d8550f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9acd5a01175a3a0998eaaf306305890081d8550f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd0377a460db9d8b286e03a701227ebd62132c89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd0377a460db9d8b286e03a701227ebd62132c89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd0377a460db9d8b286e03a701227ebd62132c89"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "cf397129d55b528495c68d23d3b003b5b18167b5", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9acd5a01175a3a0998eaaf306305890081d8550f/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9acd5a01175a3a0998eaaf306305890081d8550f/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=9acd5a01175a3a0998eaaf306305890081d8550f", "patch": "@@ -421,23 +421,29 @@ Fortran\n Produce a warning at runtime if a array temporary has been created for a procedure argument.\n \n fconvert=\n-Fortran RejectNegative Joined Enum(gfc_convert) Var(flag_convert) Init(GFC_FLAG_CONVERT_NATIVE)\n--fconvert=<big-endian|little-endian|native|swap>\tThe endianness used for unformatted files.\n+Fortran RejectNegative Joined Enum(gfc_convert) EnumSet Var(flag_convert) Init(GFC_FLAG_CONVERT_NATIVE)\n+-fconvert=<big-endian|little-endian|native|swap|r16_ieee|r16_ibm>\tThe endianness used for unformatted files.\n \n Enum\n Name(gfc_convert) Type(enum gfc_convert) UnknownError(Unrecognized option to endianness value: %qs)\n \n EnumValue\n-Enum(gfc_convert) String(big-endian) Value(GFC_FLAG_CONVERT_BIG)\n+Enum(gfc_convert) String(big-endian) Value(GFC_FLAG_CONVERT_BIG) Set(1)\n \n EnumValue\n-Enum(gfc_convert) String(little-endian) Value(GFC_FLAG_CONVERT_LITTLE)\n+Enum(gfc_convert) String(little-endian) Value(GFC_FLAG_CONVERT_LITTLE) Set(1)\n \n EnumValue\n-Enum(gfc_convert) String(native) Value(GFC_FLAG_CONVERT_NATIVE)\n+Enum(gfc_convert) String(native) Value(GFC_FLAG_CONVERT_NATIVE) Set(1)\n \n EnumValue\n-Enum(gfc_convert) String(swap) Value(GFC_FLAG_CONVERT_SWAP)\n+Enum(gfc_convert) String(swap) Value(GFC_FLAG_CONVERT_SWAP) Set(1)\n+\n+EnumValue\n+Enum(gfc_convert) String(r16_ieee) Value(GFC_FLAG_CONVERT_R16_IEEE) Set(2)\n+\n+EnumValue\n+Enum(gfc_convert) String(r16_ibm) Value(GFC_FLAG_CONVERT_R16_IBM) Set(2)\n \n fcray-pointer\n Fortran Var(flag_cray_pointer)"}, {"sha": "3cdc529eb2813ffe5bdd87d675c688b68fe60711", "filename": "gcc/fortran/trans-types.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9acd5a01175a3a0998eaaf306305890081d8550f/gcc%2Ffortran%2Ftrans-types.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9acd5a01175a3a0998eaaf306305890081d8550f/gcc%2Ffortran%2Ftrans-types.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.cc?ref=9acd5a01175a3a0998eaaf306305890081d8550f", "patch": "@@ -527,6 +527,9 @@ gfc_init_kinds (void)\n \t      }\n \t  }\n     }\n+  else if ((flag_convert & (GFC_CONVERT_R16_IEEE | GFC_CONVERT_R16_IBM)) != 0)\n+    gfc_fatal_error (\"%<-fconvert=r16_ieee%> or %<-fconvert=r16_ibm%> not \"\n+\t\t     \"supported on this architecture\");\n \n   /* Choose the default integer kind.  We choose 4 unless the user directs us\n      otherwise.  Even if the user specified that the default integer kind is 8,"}]}