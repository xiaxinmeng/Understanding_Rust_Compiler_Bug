{"sha": "4177437ead62c0c74d560f3611b3583078f59688", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE3NzQzN2VhZDYyYzBjNzRkNTYwZjM2MTFiMzU4MzA3OGY1OTY4OA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2016-05-19T15:45:35Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2016-05-19T15:45:35Z"}, "message": "re PR tree-optimization/71031 (ICE in extract_range_from_binary_expr_1, at tree-vrp.c:2535 w/ -Os)\n\n\tPR tree-optimization/71031\n\t* tree-vrp.c (extract_range_from_binary_expr_1): Turn assert into a\n\tcondition and adjust the code a bit.\n\n\t* gcc.dg/tree-ssa/vrp100.c: New test.\n\nFrom-SVN: r236477", "tree": {"sha": "5200744a52d46eb0df44b3e719769f1f4e7cdaa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5200744a52d46eb0df44b3e719769f1f4e7cdaa1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4177437ead62c0c74d560f3611b3583078f59688", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4177437ead62c0c74d560f3611b3583078f59688", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4177437ead62c0c74d560f3611b3583078f59688", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4177437ead62c0c74d560f3611b3583078f59688/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "00426f9a9e57175d6373359aec3e7956a6d2a1c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00426f9a9e57175d6373359aec3e7956a6d2a1c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00426f9a9e57175d6373359aec3e7956a6d2a1c1"}], "stats": {"total": 60, "additions": 51, "deletions": 9}, "files": [{"sha": "4900c7e2d4643f8aa6ab5eea945620e844b88da5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4177437ead62c0c74d560f3611b3583078f59688/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4177437ead62c0c74d560f3611b3583078f59688/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4177437ead62c0c74d560f3611b3583078f59688", "patch": "@@ -1,3 +1,9 @@\n+2016-05-19  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR tree-optimization/71031\n+\t* tree-vrp.c (extract_range_from_binary_expr_1): Turn assert into a\n+\tcondition and adjust the code a bit.\n+\n 2016-05-19  Martin Liska  <mliska@suse.cz>\n \n \t* tree-vect-stmts.c (vectorizable_simd_clone_call): Utilize"}, {"sha": "f9ea24016ca2e9f9ff97d832b120dc74d469606c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4177437ead62c0c74d560f3611b3583078f59688/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4177437ead62c0c74d560f3611b3583078f59688/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4177437ead62c0c74d560f3611b3583078f59688", "patch": "@@ -1,3 +1,8 @@\n+2016-05-19  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR tree-optimization/71031\n+\t* gcc.dg/tree-ssa/vrp100.c: New test.\n+\n 2016-05-19  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \tPR rtl-optimization/71148"}, {"sha": "c0fe4b50963df2e52f6cea55f07388f407075c49", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp100.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4177437ead62c0c74d560f3611b3583078f59688/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp100.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4177437ead62c0c74d560f3611b3583078f59688/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp100.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp100.c?ref=4177437ead62c0c74d560f3611b3583078f59688", "patch": "@@ -0,0 +1,32 @@\n+/* PR tree-optimization/71031 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Os\" } */\n+\n+int zj;\n+int **yr;\n+\n+void\n+nn (void)\n+{\n+  unsigned int od = 4;\n+\n+  for (;;)\n+    {\n+      int lk;\n+\n+      for (lk = 0; lk < 2; ++lk)\n+        {\n+          static int cm;\n+\n+          zj = 0;\n+          if (od == 0)\n+            return;\n+          ++od;\n+          for (cm = 0; cm < 2; ++cm)\n+            {\n+              --od;\n+              **yr = 0;\n+            }\n+        }\n+    }\n+}"}, {"sha": "92d889cd1e2e0d18924dd1f4c4cb48d587a15b80", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4177437ead62c0c74d560f3611b3583078f59688/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4177437ead62c0c74d560f3611b3583078f59688/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=4177437ead62c0c74d560f3611b3583078f59688", "patch": "@@ -2519,20 +2519,13 @@ extract_range_from_binary_expr_1 (value_range *vr,\n \t\t  min = wide_int_to_tree (expr_type, tmin);\n \t\t  max = wide_int_to_tree (expr_type, tmax);\n \t\t}\n-\t      else if (min_ovf == -1 && max_ovf == 1)\n-\t\t{\n-\t\t  /* Underflow and overflow, drop to VR_VARYING.  */\n-\t\t  set_value_range_to_varying (vr);\n-\t\t  return;\n-\t\t}\n-\t      else\n+\t      else if ((min_ovf == -1 && max_ovf == 0)\n+\t\t       || (max_ovf == 1 && min_ovf == 0))\n \t\t{\n \t\t  /* Min underflow or max overflow.  The range kind\n \t\t     changes to VR_ANTI_RANGE.  */\n \t\t  bool covers = false;\n \t\t  wide_int tem = tmin;\n-\t\t  gcc_assert ((min_ovf == -1 && max_ovf == 0)\n-\t\t\t      || (max_ovf == 1 && min_ovf == 0));\n \t\t  type = VR_ANTI_RANGE;\n \t\t  tmin = tmax + 1;\n \t\t  if (wi::cmp (tmin, tmax, sgn) < 0)\n@@ -2551,6 +2544,12 @@ extract_range_from_binary_expr_1 (value_range *vr,\n \t\t  min = wide_int_to_tree (expr_type, tmin);\n \t\t  max = wide_int_to_tree (expr_type, tmax);\n \t\t}\n+\t      else\n+\t\t{\n+\t\t  /* Other underflow and/or overflow, drop to VR_VARYING.  */\n+\t\t  set_value_range_to_varying (vr);\n+\t\t  return;\n+\t\t}\n \t    }\n \t  else\n \t    {"}]}