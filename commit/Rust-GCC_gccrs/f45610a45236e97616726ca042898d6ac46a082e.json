{"sha": "f45610a45236e97616726ca042898d6ac46a082e", "node_id": "C_kwDOANBUbNoAKGY0NTYxMGE0NTIzNmU5NzYxNjcyNmNhMDQyODk4ZDZhYzQ2YTA4MmU", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-10-19T07:24:57Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-10-19T07:24:57Z"}, "message": "c++: Don't reject calls through PMF during constant evaluation [PR102786]\n\nThe following testcase incorrectly rejects the c initializer,\nwhile in the s.*a case cxx_eval_* sees .__pfn reads etc.,\nin the s.*&S::foo case get_member_function_from_ptrfunc creates\nexpressions which use INTEGER_CSTs with type of pointer to METHOD_TYPE.\nAnd cxx_eval_constant_expression rejects any INTEGER_CSTs with pointer\ntype if they aren't 0.\nEither we'd need to make sure we defer such folding till cp_fold but the\nfunction and pfn_from_ptrmemfunc is used from lots of places, or\nthe following patch just tries to reject only non-zero INTEGER_CSTs\nwith pointer types if they don't point to METHOD_TYPE in the hope that\nall such INTEGER_CSTs with POINTER_TYPE to METHOD_TYPE are result of\nfolding valid pointer-to-member function expressions.\nI don't immediately see how one could create such INTEGER_CSTs otherwise,\ncast of integers to PMF is rejected and would have the PMF RECORD_TYPE\nanyway, etc.\n\n2021-10-19  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/102786\n\t* constexpr.c (cxx_eval_constant_expression): Don't reject\n\tINTEGER_CSTs with type POINTER_TYPE to METHOD_TYPE.\n\n\t* g++.dg/cpp2a/constexpr-virtual19.C: New test.", "tree": {"sha": "766d47e11fff8bea1ceab16e2ce4c35dc6ceb9e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/766d47e11fff8bea1ceab16e2ce4c35dc6ceb9e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f45610a45236e97616726ca042898d6ac46a082e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f45610a45236e97616726ca042898d6ac46a082e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f45610a45236e97616726ca042898d6ac46a082e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f45610a45236e97616726ca042898d6ac46a082e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "caab0139761b04226fab14d87c4a4f981d942bbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caab0139761b04226fab14d87c4a4f981d942bbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caab0139761b04226fab14d87c4a4f981d942bbf"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "6f83d303cdd7cff06d2c62775186546ad41422e3", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f45610a45236e97616726ca042898d6ac46a082e/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f45610a45236e97616726ca042898d6ac46a082e/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=f45610a45236e97616726ca042898d6ac46a082e", "patch": "@@ -6191,6 +6191,10 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \n       if (TREE_CODE (t) == INTEGER_CST\n \t  && TYPE_PTR_P (TREE_TYPE (t))\n+\t  /* INTEGER_CST with pointer-to-method type is only used\n+\t     for a virtual method in a pointer to member function.\n+\t     Don't reject those.  */\n+\t  && TREE_CODE (TREE_TYPE (TREE_TYPE (t))) != METHOD_TYPE\n \t  && !integer_zerop (t))\n \t{\n \t  if (!ctx->quiet)"}, {"sha": "cb0d1bed0b122bee825399050c1ae04ba3e9bb10", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-virtual19.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f45610a45236e97616726ca042898d6ac46a082e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f45610a45236e97616726ca042898d6ac46a082e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual19.C?ref=f45610a45236e97616726ca042898d6ac46a082e", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/102786\n+// { dg-do compile { target c++20 } }\n+\n+struct S {\n+  virtual constexpr int foo () const { return 42; }\n+};\n+\n+constexpr S s;\n+constexpr auto a = &S::foo;\n+constexpr auto b = (s.*a) ();\n+constexpr auto c = (s.*&S::foo) ();"}]}