{"sha": "5defb0f2085dc651c1d36539198da5d72fa09516", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRlZmIwZjIwODVkYzY1MWMxZDM2NTM5MTk4ZGE1ZDcyZmEwOTUxNg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-10-07T14:49:20Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-10-07T14:49:20Z"}, "message": "stl_iterator.h (operator-(const reverse_iterator<>&, const reverse_iterator<>&), [...]): Use the auto -> return type syntax, implement DR 685.\n\n2008-10-07  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/stl_iterator.h (operator-(const reverse_iterator<>&,\n\tconst reverse_iterator<>&), operator-(const __normal_iterator<>&,\n\tconst __normal_iterator<>&), operator-(const move_iterator<>&,\n\tconst move_iterator<>&)): Use the auto -> return type syntax,\n\timplement DR 685.\n\nFrom-SVN: r140937", "tree": {"sha": "19d70c07846160ccf8819552a01f63d97da3f44f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19d70c07846160ccf8819552a01f63d97da3f44f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5defb0f2085dc651c1d36539198da5d72fa09516", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5defb0f2085dc651c1d36539198da5d72fa09516", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5defb0f2085dc651c1d36539198da5d72fa09516", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5defb0f2085dc651c1d36539198da5d72fa09516/comments", "author": null, "committer": null, "parents": [{"sha": "ebca2d912914002b1b3953bb535b2e664047b05e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebca2d912914002b1b3953bb535b2e664047b05e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebca2d912914002b1b3953bb535b2e664047b05e"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "90c48823c9339e6e3bc4ace1665053ee415a7408", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5defb0f2085dc651c1d36539198da5d72fa09516/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5defb0f2085dc651c1d36539198da5d72fa09516/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5defb0f2085dc651c1d36539198da5d72fa09516", "patch": "@@ -1,3 +1,11 @@\n+2008-10-07  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/stl_iterator.h (operator-(const reverse_iterator<>&,\n+\tconst reverse_iterator<>&), operator-(const __normal_iterator<>&,\n+\tconst __normal_iterator<>&), operator-(const move_iterator<>&,\n+\tconst move_iterator<>&)): Use the auto -> return type syntax,\n+\timplement DR 685.\n+\n 2008-10-06  Jason Merrill  <jason@redhat.com>\n \n \t* config/abi/pre/gnu.ver: Update char16/32_t manglings."}, {"sha": "d161e303e3055ea3b3c37efa18e691c085b7872d", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5defb0f2085dc651c1d36539198da5d72fa09516/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5defb0f2085dc651c1d36539198da5d72fa09516/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=5defb0f2085dc651c1d36539198da5d72fa09516", "patch": "@@ -365,9 +365,17 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     { return !(__x < __y); }\n \n   template<typename _IteratorL, typename _IteratorR>\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+    // DR 685.\n+    inline auto\n+    operator-(const reverse_iterator<_IteratorL>& __x,\n+\t      const reverse_iterator<_IteratorR>& __y)\n+    -> decltype(__y.base() - __x.base())\n+#else\n     inline typename reverse_iterator<_IteratorL>::difference_type\n     operator-(const reverse_iterator<_IteratorL>& __x,\n \t      const reverse_iterator<_IteratorR>& __y)\n+#endif\n     { return __y.base() - __x.base(); }\n   //@}\n \n@@ -835,9 +843,17 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   // operators but also operator- must accept mixed iterator/const_iterator\n   // parameters.\n   template<typename _IteratorL, typename _IteratorR, typename _Container>\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+    // DR 685.\n+    inline auto\n+    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,\n+\t      const __normal_iterator<_IteratorR, _Container>& __rhs)\n+    -> decltype(__lhs.base() - __rhs.base())\n+#else\n     inline typename __normal_iterator<_IteratorL, _Container>::difference_type\n     operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,\n \t      const __normal_iterator<_IteratorR, _Container>& __rhs)\n+#endif\n     { return __lhs.base() - __rhs.base(); }\n \n   template<typename _Iterator, typename _Container>\n@@ -1001,10 +1017,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t       const move_iterator<_IteratorR>& __y)\n     { return !(__x < __y); }\n \n+  // DR 685.\n   template<typename _IteratorL, typename _IteratorR>\n-    inline typename move_iterator<_IteratorL>::difference_type\n+    inline auto\n     operator-(const move_iterator<_IteratorL>& __x,\n \t      const move_iterator<_IteratorR>& __y)\n+    -> decltype(__x.base() - __y.base())\n     { return __x.base() - __y.base(); }\n \n   template<typename _Iterator>"}]}