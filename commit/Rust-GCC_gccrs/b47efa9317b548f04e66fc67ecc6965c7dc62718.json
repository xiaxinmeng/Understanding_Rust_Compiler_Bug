{"sha": "b47efa9317b548f04e66fc67ecc6965c7dc62718", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ3ZWZhOTMxN2I1NDhmMDRlNjZmYzY3ZWNjNjk2NWM3ZGM2MjcxOA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2005-11-15T14:04:22Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-11-15T14:04:22Z"}, "message": "sem_warn.ads, [...] (Publicly_Referenceable): Generic formals of a generic subprogram are not visible outside the body.\n\n2005-11-14  Ed Schonberg  <schonberg@adacore.com>\n\t    Robert Dewar  <dewar@adacore.com>\n\n\t* sem_warn.ads, sem_warn.adb (Publicly_Referenceable): Generic formals\n\tof a generic subprogram are not visible outside the body.\n\t(Set_Warning_Switch): New procedure (code to set warning mode moved\n\there from Switch.C so that it can be shared by pragma processing.\n\t(Check_References): Special case warning for non-modified non-imported\n\tvolatile objects.\n\t* par-prag.adb: Modify processing of pragma Warnings to accomodate new\n\tform with a string literal argument\n\nFrom-SVN: r107008", "tree": {"sha": "e8e70b5e8261c96dee5b03868e6dd377cf4c8a98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8e70b5e8261c96dee5b03868e6dd377cf4c8a98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b47efa9317b548f04e66fc67ecc6965c7dc62718", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b47efa9317b548f04e66fc67ecc6965c7dc62718", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b47efa9317b548f04e66fc67ecc6965c7dc62718", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b47efa9317b548f04e66fc67ecc6965c7dc62718/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "21024a3946b25d19107c51011b2c6897b45bb8b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21024a3946b25d19107c51011b2c6897b45bb8b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21024a3946b25d19107c51011b2c6897b45bb8b8"}], "stats": {"total": 260, "additions": 243, "deletions": 17}, "files": [{"sha": "5c87fa92a3be6e1b92e28f7200adb2b296629a50", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b47efa9317b548f04e66fc67ecc6965c7dc62718/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b47efa9317b548f04e66fc67ecc6965c7dc62718/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=b47efa9317b548f04e66fc67ecc6965c7dc62718", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -233,7 +233,7 @@ function Prag (Pragma_Node : Node_Id; Semi : Source_Ptr) return Node_Id is\n          elsif Id = Name_No_Dependence then\n             Set_Restriction_No_Dependence\n               (Unit => Expr,\n-               Warn  => Prag_Id = Pragma_Restriction_Warnings);\n+               Warn => Prag_Id = Pragma_Restriction_Warnings);\n          end if;\n \n          Next (Arg);\n@@ -963,22 +963,28 @@ begin\n       ---------------------\n \n       --  pragma Warnings (On | Off, [LOCAL_NAME])\n+      --  pragma Warnings (static_string_EXPRESSION);\n \n-      --  The one argument case is processed by the parser, since it may\n-      --  control parser warnings as well as semantic warnings, and in any\n-      --  case we want to be absolutely sure that the range in the warnings\n-      --  table is set well before any semantic analysis is performed.\n+      --  The one argument ON/OFF case is processed by the parser, since it may\n+      --  control parser warnings as well as semantic warnings, and in any case\n+      --  we want to be absolutely sure that the range in the warnings table is\n+      --  set well before any semantic analysis is performed.\n \n       when Pragma_Warnings =>\n          if Arg_Count = 1 then\n             Check_No_Identifier (Arg1);\n-            Check_Arg_Is_On_Or_Off (Arg1);\n \n-            if Chars (Expression (Arg1)) = Name_On then\n-               Set_Warnings_Mode_On (Pragma_Sloc);\n-            else\n-               Set_Warnings_Mode_Off (Pragma_Sloc);\n-            end if;\n+            declare\n+               Argx : constant Node_Id := Expression (Arg1);\n+            begin\n+               if Nkind (Argx) = N_Identifier then\n+                  if Chars (Argx) = Name_On then\n+                     Set_Warnings_Mode_On (Pragma_Sloc);\n+                  elsif Chars (Argx) = Name_Off then\n+                     Set_Warnings_Mode_Off (Pragma_Sloc);\n+                  end if;\n+               end if;\n+            end;\n          end if;\n \n       -----------------------"}, {"sha": "3f3d938a8486a00187ae0eca194eed05cb60a7c3", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 215, "deletions": 4, "changes": 219, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b47efa9317b548f04e66fc67ecc6965c7dc62718/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b47efa9317b548f04e66fc67ecc6965c7dc62718/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=b47efa9317b548f04e66fc67ecc6965c7dc62718", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1999-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1999-2005, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -294,7 +294,20 @@ package body Sem_Warn is\n                       or else List_Containing (Prev)\n                         /= Generic_Formal_Declarations (P);\n \n-               --  if we reach a subprogram body, entity is not referenceable\n+               --  Similarly, the generic formals of a generic subprogram\n+               --  are not accessible.\n+\n+               when N_Generic_Subprogram_Declaration  =>\n+                  if Is_List_Member (Prev)\n+                    and then List_Containing (Prev) =\n+                               Generic_Formal_Declarations (P)\n+                  then\n+                     return False;\n+                  else\n+                     P := Parent (P);\n+                  end if;\n+\n+               --  If we reach a subprogram body, entity is not referenceable\n                --  unless it is the defining entity of the body. This will\n                --  happen, e.g. when a function is an attribute renaming that\n                --  is rewritten as a body.\n@@ -451,8 +464,20 @@ package body Sem_Warn is\n                  and then Is_True_Constant (E1)\n                  and then not Generic_Package_Spec_Entity (E1)\n                then\n-                  Error_Msg_N\n-                    (\"& is not modified, could be declared constant?\", E1);\n+                  --  A special case, if this variable is volatile and not\n+                  --  imported, it is not helpful to tell the programmer\n+                  --  to mark the variable as constant, since this would be\n+                  --  illegal by virtue of RM C.6(13).\n+\n+                  if (Is_Volatile (E1) or else Has_Volatile_Components (E1))\n+                    and then not Is_Imported (E1)\n+                  then\n+                     Error_Msg_N\n+                       (\"& is not modified, volatile has no effect?\", E1);\n+                  else\n+                     Error_Msg_N\n+                       (\"& is not modified, could be declared constant?\", E1);\n+                  end if;\n                end if;\n \n                --  Check for unset reference, note that we exclude access\n@@ -1565,6 +1590,192 @@ package body Sem_Warn is\n       end loop;\n    end Output_Unreferenced_Messages;\n \n+   ------------------------\n+   -- Set_Warning_Switch --\n+   ------------------------\n+\n+   function Set_Warning_Switch (C : Character) return Boolean is\n+   begin\n+      case C is\n+         when 'a' =>\n+            Check_Unreferenced              := True;\n+            Check_Unreferenced_Formals      := True;\n+            Check_Withs                     := True;\n+            Constant_Condition_Warnings     := True;\n+            Implementation_Unit_Warnings    := True;\n+            Ineffective_Inline_Warnings     := True;\n+            Warn_On_Ada_2005_Compatibility  := True;\n+            Warn_On_Bad_Fixed_Value         := True;\n+            Warn_On_Constant                := True;\n+            Warn_On_Export_Import           := True;\n+            Warn_On_Modified_Unread         := True;\n+            Warn_On_No_Value_Assigned       := True;\n+            Warn_On_Obsolescent_Feature     := True;\n+            Warn_On_Redundant_Constructs    := True;\n+            Warn_On_Unchecked_Conversion    := True;\n+            Warn_On_Unrecognized_Pragma     := True;\n+\n+         when 'A' =>\n+            Check_Unreferenced              := False;\n+            Check_Unreferenced_Formals      := False;\n+            Check_Withs                     := False;\n+            Constant_Condition_Warnings     := False;\n+            Elab_Warnings                   := False;\n+            Implementation_Unit_Warnings    := False;\n+            Ineffective_Inline_Warnings     := False;\n+            Warn_On_Ada_2005_Compatibility  := False;\n+            Warn_On_Bad_Fixed_Value         := False;\n+            Warn_On_Constant                := False;\n+            Warn_On_Dereference             := False;\n+            Warn_On_Export_Import           := False;\n+            Warn_On_Hiding                  := False;\n+            Warn_On_Modified_Unread         := False;\n+            Warn_On_No_Value_Assigned       := False;\n+            Warn_On_Obsolescent_Feature     := False;\n+            Warn_On_Redundant_Constructs    := False;\n+            Warn_On_Unchecked_Conversion    := False;\n+            Warn_On_Unrecognized_Pragma     := False;\n+\n+         when 'b' =>\n+            Warn_On_Bad_Fixed_Value         := True;\n+\n+         when 'B' =>\n+            Warn_On_Bad_Fixed_Value         := False;\n+\n+         when 'c' =>\n+            Constant_Condition_Warnings     := True;\n+\n+         when 'C' =>\n+            Constant_Condition_Warnings     := False;\n+\n+         when 'd' =>\n+            Warn_On_Dereference             := True;\n+\n+         when 'D' =>\n+            Warn_On_Dereference             := False;\n+\n+         when 'e' =>\n+            Warning_Mode                    := Treat_As_Error;\n+\n+         when 'f' =>\n+            Check_Unreferenced_Formals      := True;\n+\n+         when 'F' =>\n+            Check_Unreferenced_Formals      := False;\n+\n+         when 'g' =>\n+            Warn_On_Unrecognized_Pragma     := True;\n+\n+         when 'G' =>\n+            Warn_On_Unrecognized_Pragma     := False;\n+\n+         when 'h' =>\n+            Warn_On_Hiding                  := True;\n+\n+         when 'H' =>\n+            Warn_On_Hiding                  := False;\n+\n+         when 'i' =>\n+            Implementation_Unit_Warnings    := True;\n+\n+         when 'I' =>\n+            Implementation_Unit_Warnings    := False;\n+\n+         when 'j' =>\n+            Warn_On_Obsolescent_Feature     := True;\n+\n+         when 'J' =>\n+            Warn_On_Obsolescent_Feature     := False;\n+\n+         when 'k' =>\n+            Warn_On_Constant                := True;\n+\n+         when 'K' =>\n+            Warn_On_Constant                := False;\n+\n+         when 'l' =>\n+            Elab_Warnings                   := True;\n+\n+         when 'L' =>\n+            Elab_Warnings                   := False;\n+\n+         when 'm' =>\n+            Warn_On_Modified_Unread         := True;\n+\n+         when 'M' =>\n+            Warn_On_Modified_Unread         := False;\n+\n+         when 'n' =>\n+            Warning_Mode                    := Normal;\n+\n+         when 'o' =>\n+            Address_Clause_Overlay_Warnings := True;\n+\n+         when 'O' =>\n+            Address_Clause_Overlay_Warnings := False;\n+\n+         when 'p' =>\n+            Ineffective_Inline_Warnings     := True;\n+\n+         when 'P' =>\n+            Ineffective_Inline_Warnings     := False;\n+\n+         when 'r' =>\n+            Warn_On_Redundant_Constructs    := True;\n+\n+         when 'R' =>\n+            Warn_On_Redundant_Constructs    := False;\n+\n+         when 's' =>\n+            Warning_Mode                    := Suppress;\n+\n+         when 'u' =>\n+            Check_Unreferenced              := True;\n+            Check_Withs                     := True;\n+            Check_Unreferenced_Formals      := True;\n+\n+         when 'U' =>\n+            Check_Unreferenced              := False;\n+            Check_Withs                     := False;\n+            Check_Unreferenced_Formals      := False;\n+\n+         when 'v' =>\n+            Warn_On_No_Value_Assigned       := True;\n+\n+         when 'V' =>\n+            Warn_On_No_Value_Assigned       := False;\n+\n+         when 'x' =>\n+            Warn_On_Export_Import           := True;\n+\n+         when 'X' =>\n+            Warn_On_Export_Import           := False;\n+\n+         when 'y' =>\n+            Warn_On_Ada_2005_Compatibility  := True;\n+\n+         when 'Y' =>\n+            Warn_On_Ada_2005_Compatibility  := False;\n+\n+         when 'z' =>\n+            Warn_On_Unchecked_Conversion    := True;\n+\n+         when 'Z' =>\n+            Warn_On_Unchecked_Conversion    := False;\n+\n+            --  Allow and ignore 'w' so that the old\n+            --  format (e.g. -gnatwuwl) will work.\n+\n+         when 'w' =>\n+            null;\n+\n+         when others =>\n+            return False;\n+      end case;\n+\n+      return True;\n+   end Set_Warning_Switch;\n+\n    -----------------------------\n    -- Warn_On_Known_Condition --\n    -----------------------------"}, {"sha": "be2fd6f11af06539d201254314cc9c3d4a7f7a1f", "filename": "gcc/ada/sem_warn.ads", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b47efa9317b548f04e66fc67ecc6965c7dc62718/gcc%2Fada%2Fsem_warn.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b47efa9317b548f04e66fc67ecc6965c7dc62718/gcc%2Fada%2Fsem_warn.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.ads?ref=b47efa9317b548f04e66fc67ecc6965c7dc62718", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1999-2001 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1999-2005, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,6 +32,15 @@ with Types; use Types;\n \n package Sem_Warn is\n \n+   --------------------\n+   -- Initialization --\n+   --------------------\n+\n+   function Set_Warning_Switch (C : Character) return Boolean;\n+   --  This function sets the warning switch or switches corresponding to\n+   --  the given character. It is used for processing a -gnatw switch on the\n+   --  command line, or a string literal in pragma Warnings.\n+\n    ------------------------------------------\n    -- Routines to Handle Unused References --\n    ------------------------------------------"}]}