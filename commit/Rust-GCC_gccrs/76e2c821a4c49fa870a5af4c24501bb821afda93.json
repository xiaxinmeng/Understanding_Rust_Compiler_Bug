{"sha": "76e2c821a4c49fa870a5af4c24501bb821afda93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZlMmM4MjFhNGM0OWZhODcwYTVhZjRjMjQ1MDFiYjgyMWFmZGE5Mw==", "commit": {"author": {"name": "Jan Beulich", "email": "jbeulich@suse.com", "date": "2016-08-01T09:39:52Z"}, "committer": {"name": "Jan Beulich", "email": "jbeulich@gcc.gnu.org", "date": "2016-08-01T09:39:52Z"}, "message": "extend shift count warnings to vector types\n\ngcc/c/\n2016-08-01  Jan Beulich  <jbeulich@suse.com>\n\n\t* c-fold.c (c_fully_fold_internal): Also emit shift count\n\twarnings for vector types.\n\t* c-typeck.c (build_binary_op): Likewise.\n\ngcc/testsuite/\n2016-08-01  Jan Beulich  <jbeulich@suse.com>\n\n\t* gcc.dg/vshift-6.c, gcc.dg/vshift-7.c: New.\n\nFrom-SVN: r238936", "tree": {"sha": "c33699b002f7c68697dd27cd0f86b3ad7e46ea09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c33699b002f7c68697dd27cd0f86b3ad7e46ea09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76e2c821a4c49fa870a5af4c24501bb821afda93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76e2c821a4c49fa870a5af4c24501bb821afda93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76e2c821a4c49fa870a5af4c24501bb821afda93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76e2c821a4c49fa870a5af4c24501bb821afda93/comments", "author": {"login": "jbeulich", "id": 5610135, "node_id": "MDQ6VXNlcjU2MTAxMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbeulich", "html_url": "https://github.com/jbeulich", "followers_url": "https://api.github.com/users/jbeulich/followers", "following_url": "https://api.github.com/users/jbeulich/following{/other_user}", "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions", "organizations_url": "https://api.github.com/users/jbeulich/orgs", "repos_url": "https://api.github.com/users/jbeulich/repos", "events_url": "https://api.github.com/users/jbeulich/events{/privacy}", "received_events_url": "https://api.github.com/users/jbeulich/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "77c3c27eccd630e2484a7b65a0d2f20d883e1908", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77c3c27eccd630e2484a7b65a0d2f20d883e1908", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77c3c27eccd630e2484a7b65a0d2f20d883e1908"}], "stats": {"total": 175, "additions": 148, "deletions": 27}, "files": [{"sha": "1c0688b29a1020f740e7fe3551e700914b32a7bb", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e2c821a4c49fa870a5af4c24501bb821afda93/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e2c821a4c49fa870a5af4c24501bb821afda93/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=76e2c821a4c49fa870a5af4c24501bb821afda93", "patch": "@@ -1,3 +1,9 @@\n+2016-08-01  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* c-fold.c (c_fully_fold_internal): Also emit shift count\n+\twarnings for vector types.\n+\t* c-typeck.c (build_binary_op): Likewise.\n+\n 2016-07-29  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/71742"}, {"sha": "8bc3a9c178f5ff708e31505b0b60c79cdea20f8a", "filename": "gcc/c/c-fold.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e2c821a4c49fa870a5af4c24501bb821afda93/gcc%2Fc%2Fc-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e2c821a4c49fa870a5af4c24501bb821afda93/gcc%2Fc%2Fc-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-fold.c?ref=76e2c821a4c49fa870a5af4c24501bb821afda93", "patch": "@@ -320,8 +320,6 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n       if ((code == LSHIFT_EXPR || code == RSHIFT_EXPR)\n \t  && TREE_CODE (orig_op1) != INTEGER_CST\n \t  && TREE_CODE (op1) == INTEGER_CST\n-\t  && (TREE_CODE (TREE_TYPE (orig_op0)) == INTEGER_TYPE\n-\t      || TREE_CODE (TREE_TYPE (orig_op0)) == FIXED_POINT_TYPE)\n \t  && TREE_CODE (TREE_TYPE (orig_op1)) == INTEGER_TYPE\n \t  && c_inhibit_evaluation_warnings == 0)\n \t{\n@@ -330,13 +328,23 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n \t\t\t(code == LSHIFT_EXPR\n \t\t\t ? G_(\"left shift count is negative\")\n \t\t\t : G_(\"right shift count is negative\")));\n-\t  else if (compare_tree_int (op1,\n-\t\t\t\t     TYPE_PRECISION (TREE_TYPE (orig_op0)))\n-\t\t   >= 0)\n+\t  else if ((TREE_CODE (TREE_TYPE (orig_op0)) == INTEGER_TYPE\n+\t\t    || TREE_CODE (TREE_TYPE (orig_op0)) == FIXED_POINT_TYPE)\n+\t\t   && compare_tree_int (op1,\n+\t\t\t\t\tTYPE_PRECISION (TREE_TYPE (orig_op0)))\n+\t\t      >= 0)\n \t    warning_at (loc, OPT_Wshift_count_overflow,\n \t\t\t(code == LSHIFT_EXPR\n \t\t\t ? G_(\"left shift count >= width of type\")\n \t\t\t : G_(\"right shift count >= width of type\")));\n+\t  else if (TREE_CODE (TREE_TYPE (orig_op0)) == VECTOR_TYPE\n+\t\t   && compare_tree_int (op1,\n+\t\t\t\t\tTYPE_PRECISION (TREE_TYPE (TREE_TYPE (orig_op0))))\n+\t\t      >= 0)\n+\t    warning_at (loc, OPT_Wshift_count_overflow,\n+\t\t\tcode == LSHIFT_EXPR\n+\t\t\t? G_(\"left shift count >= width of vector element\")\n+\t\t\t: G_(\"right shift count >= width of vector element\"));\n \t}\n       if (code == LSHIFT_EXPR\n \t  /* If either OP0 has been folded to INTEGER_CST...  */"}, {"sha": "33c06d40417cf8a89af9a4f2ec7aedf37517c930", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 36, "deletions": 22, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e2c821a4c49fa870a5af4c24501bb821afda93/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e2c821a4c49fa870a5af4c24501bb821afda93/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=76e2c821a4c49fa870a5af4c24501bb821afda93", "patch": "@@ -10986,21 +10986,16 @@ build_binary_op (location_t location, enum tree_code code,\n \t Also set SHORT_SHIFT if shifting rightward.  */\n \n     case RSHIFT_EXPR:\n-      if (code0 == VECTOR_TYPE && code1 == INTEGER_TYPE\n-          && TREE_CODE (TREE_TYPE (type0)) == INTEGER_TYPE)\n-        {\n-          result_type = type0;\n-          converted = 1;\n-        }\n-      else if (code0 == VECTOR_TYPE && code1 == VECTOR_TYPE\n-\t       && TREE_CODE (TREE_TYPE (type0)) == INTEGER_TYPE\n-\t       && TREE_CODE (TREE_TYPE (type1)) == INTEGER_TYPE\n-\t       && TYPE_VECTOR_SUBPARTS (type0) == TYPE_VECTOR_SUBPARTS (type1))\n+      if (code0 == VECTOR_TYPE && code1 == VECTOR_TYPE\n+\t  && TREE_CODE (TREE_TYPE (type0)) == INTEGER_TYPE\n+\t  && TREE_CODE (TREE_TYPE (type1)) == INTEGER_TYPE\n+\t  && TYPE_VECTOR_SUBPARTS (type0) == TYPE_VECTOR_SUBPARTS (type1))\n \t{\n \t  result_type = type0;\n \t  converted = 1;\n \t}\n-      else if ((code0 == INTEGER_TYPE || code0 == FIXED_POINT_TYPE)\n+      else if ((code0 == INTEGER_TYPE || code0 == FIXED_POINT_TYPE\n+\t\t|| code0 == VECTOR_TYPE)\n \t       && code1 == INTEGER_TYPE)\n \t{\n \t  doing_shift = true;\n@@ -11013,6 +11008,18 @@ build_binary_op (location_t location, enum tree_code code,\n \t\t    warning_at (location, OPT_Wshift_count_negative,\n \t\t\t\t\"right shift count is negative\");\n \t\t}\n+\t      else if (code0 == VECTOR_TYPE)\n+\t\t{\n+\t\t  if (compare_tree_int (op1,\n+\t\t\t\t\tTYPE_PRECISION (TREE_TYPE (type0)))\n+\t\t      >= 0)\n+\t\t    {\n+\t\t      int_const = false;\n+\t\t      if (c_inhibit_evaluation_warnings == 0)\n+\t\t\twarning_at (location, OPT_Wshift_count_overflow,\n+\t\t\t\t    \"right shift count >= width of vector element\");\n+\t\t    }\n+\t\t}\n \t      else\n \t\t{\n \t\t  if (!integer_zerop (op1))\n@@ -11036,21 +11043,16 @@ build_binary_op (location_t location, enum tree_code code,\n       break;\n \n     case LSHIFT_EXPR:\n-      if (code0 == VECTOR_TYPE && code1 == INTEGER_TYPE\n-          && TREE_CODE (TREE_TYPE (type0)) == INTEGER_TYPE)\n-        {\n-          result_type = type0;\n-          converted = 1;\n-        }\n-      else if (code0 == VECTOR_TYPE && code1 == VECTOR_TYPE\n-\t       && TREE_CODE (TREE_TYPE (type0)) == INTEGER_TYPE\n-\t       && TREE_CODE (TREE_TYPE (type1)) == INTEGER_TYPE\n-\t       && TYPE_VECTOR_SUBPARTS (type0) == TYPE_VECTOR_SUBPARTS (type1))\n+      if (code0 == VECTOR_TYPE && code1 == VECTOR_TYPE\n+\t  && TREE_CODE (TREE_TYPE (type0)) == INTEGER_TYPE\n+\t  && TREE_CODE (TREE_TYPE (type1)) == INTEGER_TYPE\n+\t  && TYPE_VECTOR_SUBPARTS (type0) == TYPE_VECTOR_SUBPARTS (type1))\n \t{\n \t  result_type = type0;\n \t  converted = 1;\n \t}\n-      else if ((code0 == INTEGER_TYPE || code0 == FIXED_POINT_TYPE)\n+      else if ((code0 == INTEGER_TYPE || code0 == FIXED_POINT_TYPE\n+\t\t|| code0 == VECTOR_TYPE)\n \t       && code1 == INTEGER_TYPE)\n \t{\n \t  doing_shift = true;\n@@ -11074,6 +11076,18 @@ build_binary_op (location_t location, enum tree_code code,\n \t\t    warning_at (location, OPT_Wshift_count_negative,\n \t\t\t\t\"left shift count is negative\");\n \t\t}\n+\t      else if (code0 == VECTOR_TYPE)\n+\t\t{\n+\t\t  if (compare_tree_int (op1,\n+\t\t\t\t\tTYPE_PRECISION (TREE_TYPE (type0)))\n+\t\t      >= 0)\n+\t\t    {\n+\t\t      int_const = false;\n+\t\t      if (c_inhibit_evaluation_warnings == 0)\n+\t\t\twarning_at (location, OPT_Wshift_count_overflow,\n+\t\t\t\t    \"left shift count >= width of vector element\");\n+\t\t    }\n+\t\t}\n \t      else if (compare_tree_int (op1, TYPE_PRECISION (type0)) >= 0)\n \t\t{\n \t\t  int_const = false;"}, {"sha": "c16b269862499aa399ad8ee33644768ddf48bc66", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e2c821a4c49fa870a5af4c24501bb821afda93/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e2c821a4c49fa870a5af4c24501bb821afda93/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=76e2c821a4c49fa870a5af4c24501bb821afda93", "patch": "@@ -1,3 +1,7 @@\n+2016-08-01  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* gcc.dg/vshift-6.c, gcc.dg/vshift-7.c: New.\n+\n 2016-07-31  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/divkc3-1.c: Require POWER8 hardware."}, {"sha": "6f7a0b05b8892e1aded4c53e8f747206462af351", "filename": "gcc/testsuite/gcc.dg/vshift-6.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e2c821a4c49fa870a5af4c24501bb821afda93/gcc%2Ftestsuite%2Fgcc.dg%2Fvshift-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e2c821a4c49fa870a5af4c24501bb821afda93/gcc%2Ftestsuite%2Fgcc.dg%2Fvshift-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvshift-6.c?ref=76e2c821a4c49fa870a5af4c24501bb821afda93", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wshift-count-negative -Wshift-count-overflow\" } */\n+\n+typedef unsigned int v1qi_t __attribute__((mode(QI), vector_size(1)));\n+typedef unsigned int v1hi_t __attribute__((mode(HI), vector_size(2)));\n+typedef unsigned int v1si_t __attribute__((mode(SI), vector_size(4)));\n+\n+v1qi_t test1qi(v1qi_t x, int c) {\n+\tswitch(c) {\n+\tcase 0: return x << -1; /* { dg-warning \"shift count is negative\" } */\n+\tcase 1: return x << 7;\n+\tcase 2: return x << 8; /* { dg-warning \"shift count >= width\" } */\n+\tcase ~0: return x >> -1; /* { dg-warning \"shift count is negative\" } */\n+\tcase ~1: return x >> 7;\n+\tcase ~2: return x >> 8; /* { dg-warning \"shift count >= width\" } */\n+\t}\n+\treturn c < 0 ? x >> -c : x << c;\n+}\n+\n+v1hi_t test1hi(v1hi_t x, int c) {\n+\tswitch(c) {\n+\tcase 0: return x << -1; /* { dg-warning \"shift count is negative\" } */\n+\tcase 1: return x << 15;\n+\tcase 2: return x << 16; /* { dg-warning \"shift count >= width\" } */\n+\tcase ~0: return x >> -1; /* { dg-warning \"shift count is negative\" } */\n+\tcase ~1: return x >> 15;\n+\tcase ~2: return x >> 16; /* { dg-warning \"shift count >= width\" } */\n+\t}\n+\treturn c < 0 ? x >> -c : x << c;\n+}\n+\n+v1si_t test1si(v1si_t x, int c) {\n+\tswitch(c) {\n+\tcase 0: return x << -1; /* { dg-warning \"shift count is negative\" } */\n+\tcase 1: return x << 31;\n+\tcase 2: return x << 32; /* { dg-warning \"shift count >= width\" } */\n+\tcase ~0: return x >> -1; /* { dg-warning \"shift count is negative\" } */\n+\tcase ~1: return x >> 31;\n+\tcase ~2: return x >> 32; /* { dg-warning \"shift count >= width\" } */\n+\t}\n+\treturn c < 0 ? x >> -c : x << c;\n+}"}, {"sha": "27321209deafc1f7a51f8249c64cde88c4543e8e", "filename": "gcc/testsuite/gcc.dg/vshift-7.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e2c821a4c49fa870a5af4c24501bb821afda93/gcc%2Ftestsuite%2Fgcc.dg%2Fvshift-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e2c821a4c49fa870a5af4c24501bb821afda93/gcc%2Ftestsuite%2Fgcc.dg%2Fvshift-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvshift-7.c?ref=76e2c821a4c49fa870a5af4c24501bb821afda93", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -Wshift-count-negative -Wshift-count-overflow\" } */\n+\n+typedef unsigned int v1qi_t __attribute__((mode(QI), vector_size(1)));\n+typedef unsigned int v1hi_t __attribute__((mode(HI), vector_size(2)));\n+typedef unsigned int v1si_t __attribute__((mode(SI), vector_size(4)));\n+\n+static const signed shift_neg = -1;\n+static const unsigned shift_qi = 8;\n+static const unsigned shift_hi = 16;\n+static const unsigned shift_si = 32;\n+\n+v1qi_t test1qi(v1qi_t x, int c) {\n+\tswitch(c) {\n+\tcase 0: return x << shift_neg; /* { dg-warning \"shift count is negative\" } */\n+\tcase 1: return x << (shift_qi - 1);\n+\tcase 2: return x << shift_qi; /* { dg-warning \"shift count >= width\" } */\n+\tcase ~0: return x >> shift_neg; /* { dg-warning \"shift count is negative\" } */\n+\tcase ~1: return x >> (shift_qi - 1);\n+\tcase ~2: return x >> shift_qi; /* { dg-warning \"shift count >= width\" } */\n+\t}\n+\treturn c < 0 ? x >> -c : x << c;\n+}\n+\n+v1hi_t test1hi(v1hi_t x, int c) {\n+\tswitch(c) {\n+\tcase 0: return x << shift_neg; /* { dg-warning \"shift count is negative\" } */\n+\tcase 1: return x << (shift_hi - 1);\n+\tcase 2: return x << shift_hi; /* { dg-warning \"shift count >= width\" } */\n+\tcase ~0: return x >> shift_neg; /* { dg-warning \"shift count is negative\" } */\n+\tcase ~1: return x >> (shift_hi - 1);\n+\tcase ~2: return x >> shift_hi; /* { dg-warning \"shift count >= width\" } */\n+\t}\n+\treturn c < 0 ? x >> -c : x << c;\n+}\n+\n+v1si_t test1si(v1si_t x, int c) {\n+\tswitch(c) {\n+\tcase 0: return x << shift_neg; /* { dg-warning \"shift count is negative\" } */\n+\tcase 1: return x << (shift_si - 1);\n+\tcase 2: return x << shift_si; /* { dg-warning \"shift count >= width\" } */\n+\tcase ~0: return x >> shift_neg; /* { dg-warning \"shift count is negative\" } */\n+\tcase ~1: return x >> (shift_si - 1);\n+\tcase ~2: return x >> shift_si; /* { dg-warning \"shift count >= width\" } */\n+\t}\n+\treturn c < 0 ? x >> -c : x << c;\n+}"}]}