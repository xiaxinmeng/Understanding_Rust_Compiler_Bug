{"sha": "0f05dcc2c239a72f763649796b68158f29ff5132", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGYwNWRjYzJjMjM5YTcyZjc2MzY0OTc5NmI2ODE1OGYyOWZmNTEzMg==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1995-12-17T19:32:56Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1995-12-17T19:32:56Z"}, "message": "* pa.md: Add 2nd reload peephole somehow omitted from Nov27 changes.\n\nFrom-SVN: r10791", "tree": {"sha": "589aa7dbaa45e7f049db6bf3004ce8bd27fe26bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/589aa7dbaa45e7f049db6bf3004ce8bd27fe26bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f05dcc2c239a72f763649796b68158f29ff5132", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f05dcc2c239a72f763649796b68158f29ff5132", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f05dcc2c239a72f763649796b68158f29ff5132", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f05dcc2c239a72f763649796b68158f29ff5132/comments", "author": null, "committer": null, "parents": [{"sha": "041d71807974f04fc621367fe49b0bba6468bb5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/041d71807974f04fc621367fe49b0bba6468bb5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/041d71807974f04fc621367fe49b0bba6468bb5c"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "80f5db3e201bfaaa195cae14bdb05228e8494877", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f05dcc2c239a72f763649796b68158f29ff5132/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f05dcc2c239a72f763649796b68158f29ff5132/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=0f05dcc2c239a72f763649796b68158f29ff5132", "patch": "@@ -4769,6 +4769,40 @@\n   return \\\"\\\";\n }\")\n \n+(define_peephole\n+  [(set (match_operand 0 \"register_operand\" \"f\")\n+\t(match_operand 1 \"reg_or_nonsymb_mem_operand\" \"\"))\n+   (set (match_operand 2 \"register_operand\" \"f\")\n+\t(match_dup 1))]\n+  \"! TARGET_SOFT_FLOAT\n+   && GET_CODE (operands[1]) == MEM\n+   && ! MEM_VOLATILE_P (operands[1])\n+   && GET_MODE (operands[0]) == GET_MODE (operands[1])\n+   && GET_MODE (operands[0]) == GET_MODE (operands[2])\n+   && GET_MODE (operands[0]) == DFmode\n+   && REGNO_REG_CLASS (REGNO (operands[1]))\n+      == REGNO_REG_CLASS (REGNO (operands[2]))\"\n+  \"*\n+{\n+  enum machine_mode mode = GET_MODE (operands[0]);\n+  rtx xoperands[2];\n+\n+  if (FP_REG_P (operands[0]))\n+    output_asm_insn (output_fp_move_double (operands), operands);\n+  else\n+    output_asm_insn (output_move_double (operands), operands);\n+\n+  xoperands[0] = operands[2];\n+  xoperands[1] = operands[0];\n+      \n+  if (FP_REG_P (xoperands[1]))\n+    output_asm_insn (output_fp_move_double (xoperands), xoperands);\n+  else\n+    output_asm_insn (output_move_double (xoperands), xoperands);\n+\n+  return \\\"\\\";\n+}\")\n+\n ;; Flush the I and D cache line found at the address in operand 0.\n ;; This is used by the trampoline code for nested functions.\n ;; So long as the trampoline itself is less than 32 bytes this"}]}