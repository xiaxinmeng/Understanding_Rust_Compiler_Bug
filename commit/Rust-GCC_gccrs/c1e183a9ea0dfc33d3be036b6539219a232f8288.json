{"sha": "c1e183a9ea0dfc33d3be036b6539219a232f8288", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFlMTgzYTllYTBkZmMzM2QzYmUwMzZiNjUzOTIxOWEyMzJmODI4OA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-06-05T16:34:15Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-06-05T16:34:15Z"}, "message": "alpha.c (alpha_emit_conditional_move): Swap all GE, GT, GEU and GTU compares, modulo DImode compares with zero.\n\n\t* config/alpha/alpha.c (alpha_emit_conditional_move): Swap all\n\tGE, GT, GEU and GTU compares, modulo DImode compares with zero.\n\nFrom-SVN: r199701", "tree": {"sha": "4643790d33a8f0aa5dd9f99e1527f228eba03a0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4643790d33a8f0aa5dd9f99e1527f228eba03a0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1e183a9ea0dfc33d3be036b6539219a232f8288", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1e183a9ea0dfc33d3be036b6539219a232f8288", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1e183a9ea0dfc33d3be036b6539219a232f8288", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1e183a9ea0dfc33d3be036b6539219a232f8288/comments", "author": null, "committer": null, "parents": [{"sha": "0378bddb9a01c78e75c95d4978e3e8eb04ab6d4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0378bddb9a01c78e75c95d4978e3e8eb04ab6d4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0378bddb9a01c78e75c95d4978e3e8eb04ab6d4b"}], "stats": {"total": 58, "additions": 30, "deletions": 28}, "files": [{"sha": "6de45ba1161a9305a7cc4cbb56275898e6c89216", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1e183a9ea0dfc33d3be036b6539219a232f8288/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1e183a9ea0dfc33d3be036b6539219a232f8288/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c1e183a9ea0dfc33d3be036b6539219a232f8288", "patch": "@@ -1,3 +1,8 @@\n+2013-06-05  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/alpha/alpha.c (alpha_emit_conditional_move): Swap all\n+\tGE, GT, GEU and GTU compares, modulo DImode compares with zero.\n+\n 2013-06-05  Jan Hubicka  <jh@suse.cz>\n \n \t* varasm.c (mark_decl_referenced): Revert the removal until targets\n@@ -98,8 +103,7 @@\n \n \t* config/aarch64/aarch64.md (*mov<mode>_aarch64): Call\n \tinto function to generate MOVI instruction.\n-\t* config/aarch64/aarch64.c (aarch64_simd_container_mode):\n-\tNew function.\n+\t* config/aarch64/aarch64.c (aarch64_simd_container_mode): New function.\n \t(aarch64_preferred_simd_mode): Turn into wrapper.\n \t(aarch64_output_scalar_simd_mov_immediate): New function.\n \t* config/aarch64/aarch64-protos.h: Add prototype for above.\n@@ -156,8 +160,7 @@\n 2013-06-04  Catherine Moore  <clm@codesourcery.com>\n \n \t* config/mips/mips.opt (meva): New.\n-\t* config/mips/mips.h (TARGET_CPU_CPP_BUILTINS):\n-\tDefine __mips_eva.\n+\t* config/mips/mips.h (TARGET_CPU_CPP_BUILTINS): Define __mips_eva.\n \t(ASM_SPEC): Handle -meva.\n \t* doc/invoke.texi (meva):  Document.\n \n@@ -276,11 +279,9 @@\n \t(cpp_implicit_aliases_done): ... this one.\n \t(cgraph_create_function_alias): Update.\n \t(cgraph_same_body_alias): Update.\n-\t(dump_cgraph_node): Remove alias dumping; simplify\n-\tthunk dumping.\n+\t(dump_cgraph_node): Remove alias dumping; simplify thunk dumping.\n \t(verify_edge_corresponds_to_fndecl): Simplify.\n-\t* cgraph.h (symtab_node_base): Add cpp_implicit_alias,\n-\talias_target.\n+\t* cgraph.h (symtab_node_base): Add cpp_implicit_alias, alias_target.\n \t(cgraph_node): Remove same_body_alias.\n \t(varpool_node): Remove alias_of and extra_name_alias.\n \t(same_body_aliases_done): Rename to ..\n@@ -414,8 +415,7 @@\n 2013-05-31  Tobias Burnus  <burnus@net-b.de>\n \n \tPR middle-end/57073\n-\t* tree-ssa-math-opts.c (execute_cse_sincos): Move check\n-\tfurther up.\n+\t* tree-ssa-math-opts.c (execute_cse_sincos): Move check further up.\n \n 2013-05-31  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n@@ -738,7 +738,8 @@\n \t(symtab_alias_target): New function.\n \t(cgraph_alias_aliased_node, varpool_alias_aliased_node): Rename to ...\n \t(cgraph_alias_target, varpool_alias_target): .. this one; simplify.\n-\t(cgraph_function_or_thunk_node): Simplify using symtab_alias_ultimate_target.\n+\t(cgraph_function_or_thunk_node): Simplify using\n+\tsymtab_alias_ultimate_target.\n \t(varpool_variable_node): Likewise.\n \t* cgraph.c (cgraph_create_function_alias): Update.\n \t(cgraph_add_thunk): Update.\n@@ -756,7 +757,8 @@\n \tpropagate_constants_accross_call, devirtualization_time_bonus,\n \tipcp_propagate_stage): Update.\n \t* tree-emutls.c (create_emultls_var, ipa_lower_emutls): Update.\n-\t* ipa-inline-transform.c (clone_inlined_nodes, preserve_function_body_p): Update.\n+\t* ipa-inline-transform.c (clone_inlined_nodes,\n+\tpreserve_function_body_p): Update.\n \t* ipa-reference.c (propagate): Update.\n \t(write_node_summary_p): Update.\n \t* toplev.c (wrapup_global_declaration_2): Update.\n@@ -797,8 +799,8 @@\n \t* tree-eh.c (tree_could_trap_p): Update.\n \t* ipa-split.c (consider_split, execute_split_functions): Update.\n \t* ipa.c (cgraph_non_local_node_p_1, cgraph_local_node_p,\n-\t has_addr_references_p): Update;\n-\tmove ahead in file for better readability.\n+\thas_addr_references_p): Update; move ahead in file for better\n+\treadability.\n \t(process_references): Simplify.\n \t(symtab_remove_unreachable_nodes): Update; cleanup way function/var\n \tbodies are removed.\n@@ -813,8 +815,8 @@\n \tinline_write_summary): Update.\n \t* gimple-fold.c (can_refer_decl_in_current_unit_p): Update.\n \t* ipa-prop.c (ipa_compute_jump_functions): Update.\n-\t(ipa_print_node_params, ipa_prop_read_section, ipa_update_after_lto_read,\n-\tread_replacements_section): Update.\n+\t(ipa_print_node_params, ipa_prop_read_section,\n+\tipa_update_after_lto_read, read_replacements_section): Update.\n \t* varasm.c (mark_decl_referenced): Update.\n \t(assemble_alias, dump_tm_clone_pairs): Update.\n \t* tree-inline.c (copy_bb): Update.\n@@ -826,7 +828,8 @@\n \t* tree-ssa-structalias.c (get_constraint_for_ssa_var,\n \tcreate_variable_info_for, associate_varinfo_to_alias, ipa_pta_execute):\n \tUpdate.\n-\t* passes.c (ipa_write_summaries, ipa_write_optimization_summaries): Update.\n+\t* passes.c (ipa_write_summaries, ipa_write_optimization_summaries):\n+\tUpdate.\n \t* i386.c (ix86_get_function_versions_dispatcher,\n \tix86_generate_version_dispatcher_body): Update.\n \t(fold_builtin_cpu): Use varpool_add_new_variable.\n@@ -835,7 +838,8 @@\n \t(dump_varpool_node, varpool_node_for_asm,\n \tcgraph_variable_initializer_availability, varpool_analyze_node,\n \tvarpool_assemble_decl, varpool_remove_unreferenced_decls,\n-\tvarpool_finalize_named_section_flags, varpool_create_variable_alias): Update\n+\tvarpool_finalize_named_section_flags, varpool_create_variable_alias):\n+\tUpdate.\n \n 2013-05-29  Jan Hubicka  <jh@suse.cz>\n \n@@ -851,8 +855,7 @@\n \n \t* rx/rx.h (TARGET_CPU_CPP_BUILTINS): Add macros for RX100, RX200,\n \tand RX600.\n-\t* rx/rx.opt: Add macro for rx100 with string rx100 and value\n-\tRX100.\n+\t* rx/rx.opt: Add macro for rx100 with string rx100 and value RX100.\n \t* rx/rx-opts.h (rx_cpu_types): Add new cpu type rx100.\n \t* rx/t-rx: Add rx100 under multi library matches option for nofpu\n \toption.\n@@ -867,8 +870,7 @@\n \n \t* config/mips/mti-linux.h (SYSROOT_SUFFIX_SPEC): Add micromips\n \tand mips16 directories.\n-\t* config/mips/t-mti-linux (MULTILIB_OPTIONS): Add micromips and\n-\tmips16.\n+\t* config/mips/t-mti-linux (MULTILIB_OPTIONS): Add micromips and mips16.\n \t(MULTILIB_DIRNAMES): Ditto.\n \t(MULTILIB_EXCEPTIONS): Add new exceptions.\n \t* config/mips/t-mti-elf (MULTILIB_OPTIONS): Add micromips."}, {"sha": "267067013503e6a5b08e61b55ad529dd8e30d96c", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1e183a9ea0dfc33d3be036b6539219a232f8288/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1e183a9ea0dfc33d3be036b6539219a232f8288/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=c1e183a9ea0dfc33d3be036b6539219a232f8288", "patch": "@@ -2700,12 +2700,12 @@ alpha_emit_conditional_move (rtx cmp, enum machine_mode mode)\n       break;\n \n     case GE:  case GT:  case GEU:  case GTU:\n-      /* These must be swapped.  */\n-      if (op1 != CONST0_RTX (cmp_mode))\n-\t{\n-\t  code = swap_condition (code);\n-\t  tem = op0, op0 = op1, op1 = tem;\n-\t}\n+      /* These normally need swapping, but for integer zero we have\n+\t special patterns that recognize swapped operands.  */\n+      if (cmp_mode == DImode && op1 == const0_rtx)\n+\tbreak;\n+      code = swap_condition (code);\n+      tem = op0, op0 = op1, op1 = tem;\n       break;\n \n     default:"}]}