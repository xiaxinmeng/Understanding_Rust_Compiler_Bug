{"sha": "866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY2ZTRkMzg1M2NjYzBiYzYxZTM3NjQ5MTFkMmEwZjY5YzI4MWYwYw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-11-21T20:47:09Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-11-21T20:47:09Z"}, "message": "PR libstdc++/48101 improve errors for invalid container specializations\n\n\tPR libstdc++/48101\n\t* include/bits/allocator.h (allocator<const _Tp>)\n\t(allocator<volatile _Tp>, allocator<const volatile _Tp>): Add partial\n\tspecializations.\n\t* include/bits/forward_list.h (forward_list): Add static assertions.\n\t* include/bits/hashtable.h (__cache_default): Use\n\t__is_nothrow_invocable instead of __is_noexcept_hash.\n\t(_Hashtable): Add static assertions.\n\t* include/bits/hashtable_policy.h (__is_noexcept_hash): Remove.\n\t* include/bits/stl_deque.h (deque): Add static assertions.\n\t* include/bits/stl_function.h (_Identity<const _Tp>): Add partial\n\tspecialization.\n\t* include/bits/stl_list.h (list): Add static assertions.\n\t* include/bits/stl_map.h (map): Likewise.\n\t* include/bits/stl_multimap.h (multimap): Likewise.\n\t* include/bits/stl_multiset.h (multiset): Likewise.\n\t* include/bits/stl_set.h (set): Likewise.\n\t* include/bits/stl_tree.h (_Rb_tree): Likewise.\n\t* include/bits/stl_vector.h (vector): Likewise.\n\t* include/bits/unordered_map.h (unordered_map, unordered_multimap):\n\tUse typename instead of class in template-parameter-list and remove\n\tspaces.\n\t* include/bits/unordered_set.h (unordered_set, unordered_multiset):\n\tLikewise.\n\t* testsuite/23_containers/deque/48101-2_neg.cc: New test.\n\t* testsuite/23_containers/deque/48101_neg.cc: New test.\n\t* testsuite/23_containers/forward_list/48101-2_neg.cc: New test.\n\t* testsuite/23_containers/forward_list/48101_neg.cc: New test.\n\t* testsuite/23_containers/list/48101-2_neg.cc: New test.\n\t* testsuite/23_containers/list/48101_neg.cc: New test.\n\t* testsuite/23_containers/map/48101-2_neg.cc: New test.\n\t* testsuite/23_containers/map/48101_neg.cc: New test.\n\t* testsuite/23_containers/map/operations/31440.cc: Fix comparison\n\tobject to have const-qualified call operator.\n\t* testsuite/23_containers/multimap/48101-2_neg.cc: New test.\n\t* testsuite/23_containers/multimap/48101_neg.cc: New test.\n\t* testsuite/23_containers/multiset/48101-2_neg.cc: New test.\n\t* testsuite/23_containers/multiset/48101_neg.cc: New test.\n\t* testsuite/23_containers/set/48101-2_neg.cc: New test.\n\t* testsuite/23_containers/set/48101_neg.cc: New test.\n\t* testsuite/23_containers/unordered_map/48101-2_neg.cc: New test.\n\t* testsuite/23_containers/unordered_map/48101_neg.cc: New test.\n\t* testsuite/23_containers/unordered_multimap/48101-2_neg.cc: New test.\n\t* testsuite/23_containers/unordered_multimap/48101_neg.cc: New test.\n\t* testsuite/23_containers/unordered_multiset/48101-2_neg.cc: New test.\n\t* testsuite/23_containers/unordered_multiset/48101_neg.cc: New test.\n\t* testsuite/23_containers/unordered_set/48101-2_neg.cc: New test.\n\t* testsuite/23_containers/unordered_set/48101_neg.cc: New test.\n\t* testsuite/23_containers/unordered_set/instantiation_neg.cc: Adjust\n\tdg-error line number.\n\t* testsuite/23_containers/vector/48101-2_neg.cc: New test.\n\t* testsuite/23_containers/vector/48101_neg.cc: New test.\n\nFrom-SVN: r255035", "tree": {"sha": "a5b1601ca999eb5b5adc347e7dbc787e7e89b78f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5b1601ca999eb5b5adc347e7dbc787e7e89b78f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a33d0ff21e941fc3a65f23a753cc318aaae82b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a33d0ff21e941fc3a65f23a753cc318aaae82b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a33d0ff21e941fc3a65f23a753cc318aaae82b5"}], "stats": {"total": 931, "additions": 903, "deletions": 28}, "files": [{"sha": "c2f870a17704a76c51342dafd50a6b22fcca48a1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -1,3 +1,58 @@\n+2017-11-21  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/48101\n+\t* include/bits/allocator.h (allocator<const _Tp>)\n+\t(allocator<volatile _Tp>, allocator<const volatile _Tp>): Add partial\n+\tspecializations.\n+\t* include/bits/forward_list.h (forward_list): Add static assertions.\n+\t* include/bits/hashtable.h (__cache_default): Use\n+\t__is_nothrow_invocable instead of __is_noexcept_hash.\n+\t(_Hashtable): Add static assertions.\n+\t* include/bits/hashtable_policy.h (__is_noexcept_hash): Remove.\n+\t* include/bits/stl_deque.h (deque): Add static assertions.\n+\t* include/bits/stl_function.h (_Identity<const _Tp>): Add partial\n+\tspecialization.\n+\t* include/bits/stl_list.h (list): Add static assertions.\n+\t* include/bits/stl_map.h (map): Likewise.\n+\t* include/bits/stl_multimap.h (multimap): Likewise.\n+\t* include/bits/stl_multiset.h (multiset): Likewise.\n+\t* include/bits/stl_set.h (set): Likewise.\n+\t* include/bits/stl_tree.h (_Rb_tree): Likewise.\n+\t* include/bits/stl_vector.h (vector): Likewise.\n+\t* include/bits/unordered_map.h (unordered_map, unordered_multimap):\n+\tUse typename instead of class in template-parameter-list and remove\n+\tspaces.\n+\t* include/bits/unordered_set.h (unordered_set, unordered_multiset):\n+\tLikewise.\n+\t* testsuite/23_containers/deque/48101-2_neg.cc: New test.\n+\t* testsuite/23_containers/deque/48101_neg.cc: New test.\n+\t* testsuite/23_containers/forward_list/48101-2_neg.cc: New test.\n+\t* testsuite/23_containers/forward_list/48101_neg.cc: New test.\n+\t* testsuite/23_containers/list/48101-2_neg.cc: New test.\n+\t* testsuite/23_containers/list/48101_neg.cc: New test.\n+\t* testsuite/23_containers/map/48101-2_neg.cc: New test.\n+\t* testsuite/23_containers/map/48101_neg.cc: New test.\n+\t* testsuite/23_containers/map/operations/31440.cc: Fix comparison\n+\tobject to have const-qualified call operator.\n+\t* testsuite/23_containers/multimap/48101-2_neg.cc: New test.\n+\t* testsuite/23_containers/multimap/48101_neg.cc: New test.\n+\t* testsuite/23_containers/multiset/48101-2_neg.cc: New test.\n+\t* testsuite/23_containers/multiset/48101_neg.cc: New test.\n+\t* testsuite/23_containers/set/48101-2_neg.cc: New test.\n+\t* testsuite/23_containers/set/48101_neg.cc: New test.\n+\t* testsuite/23_containers/unordered_map/48101-2_neg.cc: New test.\n+\t* testsuite/23_containers/unordered_map/48101_neg.cc: New test.\n+\t* testsuite/23_containers/unordered_multimap/48101-2_neg.cc: New test.\n+\t* testsuite/23_containers/unordered_multimap/48101_neg.cc: New test.\n+\t* testsuite/23_containers/unordered_multiset/48101-2_neg.cc: New test.\n+\t* testsuite/23_containers/unordered_multiset/48101_neg.cc: New test.\n+\t* testsuite/23_containers/unordered_set/48101-2_neg.cc: New test.\n+\t* testsuite/23_containers/unordered_set/48101_neg.cc: New test.\n+\t* testsuite/23_containers/unordered_set/instantiation_neg.cc: Adjust\n+\tdg-error line number.\n+\t* testsuite/23_containers/vector/48101-2_neg.cc: New test.\n+\t* testsuite/23_containers/vector/48101_neg.cc: New test.\n+\n 2017-11-21  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n \n \t* doc/xml/manual/using.xml (manual.intro.using.macros): Move"}, {"sha": "b5a2bad07c0f46e0cc17be1248baaff5868656dc", "filename": "libstdc++-v3/include/bits/allocator.h", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -105,7 +105,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @tparam  _Tp  Type of allocated object.\n    */\n   template<typename _Tp>\n-    class allocator: public __allocator_base<_Tp>\n+    class allocator : public __allocator_base<_Tp>\n     {\n    public:\n       typedef size_t     size_type;\n@@ -165,6 +165,32 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _GLIBCXX_USE_NOEXCEPT\n     { return false; }\n \n+  // Invalid allocator<cv T> partial specializations.\n+  // allocator_traits::rebind_alloc can be used to form a valid allocator type.\n+  template<typename _Tp>\n+    class allocator<const _Tp>\n+    {\n+    public:\n+      typedef _Tp value_type;\n+      template<typename _Up> allocator(const allocator<_Up>&) { }\n+    };\n+\n+  template<typename _Tp>\n+    class allocator<volatile _Tp>\n+    {\n+    public:\n+      typedef _Tp value_type;\n+      template<typename _Up> allocator(const allocator<_Up>&) { }\n+    };\n+\n+  template<typename _Tp>\n+    class allocator<const volatile _Tp>\n+    {\n+    public:\n+      typedef _Tp value_type;\n+      template<typename _Up> allocator(const allocator<_Up>&) { }\n+    };\n+\n   /// @} group allocator\n \n   // Inhibit implicit instantiations for required instantiations,"}, {"sha": "96494cc20de574d6b319394104bb2b04700e5b6e", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -406,9 +406,16 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n    *  specialized algorithms %unique to linked lists, such as\n    *  splicing, sorting, and in-place reversal.\n    */\n-  template<typename _Tp, typename _Alloc = allocator<_Tp> >\n+  template<typename _Tp, typename _Alloc = allocator<_Tp>>\n     class forward_list : private _Fwd_list_base<_Tp, _Alloc>\n     {\n+      static_assert(is_same<typename remove_cv<_Tp>::type, _Tp>::value,\n+\t  \"std::forward_list must have a non-const, non-volatile value_type\");\n+#ifdef __STRICT_ANSI__\n+      static_assert(is_same<typename _Alloc::value_type, _Tp>::value,\n+\t  \"std::forward_list must have the same value_type as its allocator\");\n+#endif\n+\n     private:\n       typedef _Fwd_list_base<_Tp, _Alloc>                  _Base;\n       typedef _Fwd_list_node<_Tp>                          _Node;"}, {"sha": "a9473c16bde500121a524938a9002a5e7cba3808", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -46,7 +46,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       =  __not_<__and_<// Do not cache for fast hasher.\n \t\t       __is_fast_hash<_Hash>,\n \t\t       // Mandatory to have erase not throwing.\n-\t\t       __detail::__is_noexcept_hash<_Tp, _Hash>>>;\n+\t\t       __is_nothrow_invocable<const _Hash&, const _Tp&>>>;\n \n   /**\n    *  Primary class template _Hashtable.\n@@ -186,6 +186,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t       __detail::_Hash_node<_Value,\n \t\t\t\t\t    _Traits::__hash_cached::value>>>\n     {\n+      static_assert(is_same<typename remove_cv<_Value>::type, _Value>::value,\n+\t  \"unordered container must have a non-const, non-volatile value_type\");\n+#ifdef __STRICT_ANSI__\n+      static_assert(is_same<typename _Alloc::value_type, _Value>{},\n+\t  \"unordered container must have the same value_type as its allocator\");\n+#endif\n+      static_assert(__is_invocable<const _H1&, const _Key&>{},\n+\t  \"hash function must be invocable with an argument of key type\");\n+      static_assert(__is_invocable<const _Equal&, const _Key&, const _Key&>{},\n+\t  \"key equality predicate must be invocable with two arguments of \"\n+\t  \"key type\");\n+\n       using __traits_type = _Traits;\n       using __hash_cached = typename __traits_type::__hash_cached;\n       using __node_type = __detail::_Hash_node<_Value, __hash_cached::value>;"}, {"sha": "4dd0e1717f86e30fc75b6cbc7793e4c2439ded5a", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -79,12 +79,6 @@ namespace __detail\n       return __distance_fw(__first, __last, _Tag());\n     }\n \n-  // Helper type used to detect whether the hash functor is noexcept.\n-  template <typename _Key, typename _Hash>\n-    struct __is_noexcept_hash : std::__bool_constant<\n-\tnoexcept(declval<const _Hash&>()(declval<const _Key&>()))>\n-    { };\n-\n   struct _Identity\n   {\n     template<typename _Tp>"}, {"sha": "93c82ca8909b99c39c63f2eda4163bd3551de24d", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -840,6 +840,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)\n #endif\n \n+#if __cplusplus >= 201103L\n+      static_assert(is_same<typename remove_cv<_Tp>::type, _Tp>::value,\n+\t  \"std::deque must have a non-const, non-volatile value_type\");\n+# ifdef __STRICT_ANSI__\n+      static_assert(is_same<typename _Alloc::value_type, _Tp>::value,\n+\t  \"std::deque must have the same value_type as its allocator\");\n+# endif\n+#endif\n+\n       typedef _Deque_base<_Tp, _Alloc>\t\t\t_Base;\n       typedef typename _Base::_Tp_alloc_type\t\t_Tp_alloc_type;\n       typedef typename _Base::_Alloc_traits\t\t_Alloc_traits;"}, {"sha": "5cd8e3aeb7c2f8f42b6ea03c232b515d2b15367c", "filename": "libstdc++-v3/include/bits/stl_function.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -867,7 +867,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Tp>\n     struct _Identity\n-    : public unary_function<_Tp,_Tp>\n+    : public unary_function<_Tp, _Tp>\n     {\n       _Tp&\n       operator()(_Tp& __x) const\n@@ -878,6 +878,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return __x; }\n     };\n \n+  // Partial specialization, avoids confusing errors in e.g. std::set<const T>.\n+  template<typename _Tp> struct _Identity<const _Tp> : _Identity<_Tp> { };\n+\n   template<typename _Pair>\n     struct _Select1st\n     : public unary_function<_Pair, typename _Pair::first_type>"}, {"sha": "8ed97f7c8b0a3092fd9cce49059e0a0eb49f78de", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -571,6 +571,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)\n #endif\n \n+#if __cplusplus >= 201103L\n+      static_assert(is_same<typename remove_cv<_Tp>::type, _Tp>::value,\n+\t  \"std::list must have a non-const, non-volatile value_type\");\n+# ifdef __STRICT_ANSI__\n+      static_assert(is_same<typename _Alloc::value_type, _Tp>::value,\n+\t  \"std::list must have the same value_type as its allocator\");\n+# endif\n+#endif\n+\n       typedef _List_base<_Tp, _Alloc>\t\t\t_Base;\n       typedef typename _Base::_Tp_alloc_type\t\t_Tp_alloc_type;\n       typedef typename _Base::_Tp_alloc_traits\t\t_Tp_alloc_traits;"}, {"sha": "bec6c47c08658bd1a3c202633cba58da3d4ecaf5", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -118,6 +118,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       __glibcxx_class_requires2(value_type, _Alloc_value_type, _SameTypeConcept)\n #endif\n \n+#if __cplusplus >= 201103L && defined(__STRICT_ANSI__)\n+      static_assert(is_same<typename _Alloc::value_type, value_type>::value,\n+\t  \"std::map must have the same value_type as its allocator\");\n+#endif\n+\n     public:\n       class value_compare\n       : public std::binary_function<value_type, value_type, bool>"}, {"sha": "24ac4a3c1865c6e804312812ada335eb31fc006d", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -117,6 +117,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       __glibcxx_class_requires2(value_type, _Alloc_value_type, _SameTypeConcept)\n #endif\n \n+#if __cplusplus >= 201103L && defined(__STRICT_ANSI__)\n+      static_assert(is_same<typename _Alloc::value_type, value_type>::value,\n+\t  \"std::multimap must have the same value_type as its allocator\");\n+#endif\n+\n     public:\n       class value_compare\n       : public std::binary_function<value_type, value_type, bool>"}, {"sha": "ff7d3dca5869868012907bd48ababe0eafd4cc83", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -106,6 +106,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       __glibcxx_class_requires2(_Key, _Alloc_value_type, _SameTypeConcept)\n #endif\n \n+#if __cplusplus >= 201103L\n+      static_assert(is_same<typename remove_cv<_Key>::type, _Key>::value,\n+\t  \"std::multiset must have a non-const, non-volatile value_type\");\n+# ifdef __STRICT_ANSI__\n+      static_assert(is_same<typename _Alloc::value_type, _Key>::value,\n+\t  \"std::multiset must have the same value_type as its allocator\");\n+# endif\n+#endif\n+\n     public:\n       // typedefs:\n       typedef _Key     key_type;"}, {"sha": "e07d78124eb88a7342e49cafcaa05fcfe839ea12", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -104,6 +104,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       __glibcxx_class_requires2(_Key, _Alloc_value_type, _SameTypeConcept)\n #endif\n \n+#if __cplusplus >= 201103L\n+      static_assert(is_same<typename remove_cv<_Key>::type, _Key>::value,\n+\t  \"std::set must have a non-const, non-volatile value_type\");\n+# ifdef __STRICT_ANSI__\n+      static_assert(is_same<typename _Alloc::value_type, _Key>::value,\n+\t  \"std::set must have the same value_type as its allocator\");\n+# endif\n+#endif\n+\n     public:\n       // typedefs:\n       //@{"}, {"sha": "ff36618bccfc13ca0f511289243e9718122f4402", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -448,6 +448,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       typedef __gnu_cxx::__alloc_traits<_Node_allocator> _Alloc_traits;\n \n+#if __cplusplus >= 201103L\n+      static_assert(__is_invocable<const _Compare&, const _Key&, const _Key&>{},\n+\t  \"comparison object must be invocable with two arguments of key type\");\n+#endif\n+\n     protected:\n       typedef _Rb_tree_node_base* \t\t_Base_ptr;\n       typedef const _Rb_tree_node_base* \t_Const_Base_ptr;"}, {"sha": "aeeba820020d6cc9e19f0ae2469317cac5565e39", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -347,6 +347,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)\n #endif\n \n+#if __cplusplus >= 201103L\n+      static_assert(is_same<typename remove_cv<_Tp>::type, _Tp>::value,\n+\t  \"std::vector must have a non-const, non-volatile value_type\");\n+# ifdef __STRICT_ANSI__\n+      static_assert(is_same<typename _Alloc::value_type, _Tp>::value,\n+\t  \"std::vector must have the same value_type as its allocator\");\n+# endif\n+#endif\n+\n       typedef _Vector_base<_Tp, _Alloc>\t\t\t_Base;\n       typedef typename _Base::_Tp_alloc_type\t\t_Tp_alloc_type;\n       typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type>\t_Alloc_traits;"}, {"sha": "cb5bcb89a163d9ee4866df434fbfa77d1cb20e02", "filename": "libstdc++-v3/include/bits/unordered_map.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -95,10 +95,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n    *  Base is _Hashtable, dispatched at compile time via template\n    *  alias __umap_hashtable.\n    */\n-  template<class _Key, class _Tp,\n-\t   class _Hash = hash<_Key>,\n-\t   class _Pred = std::equal_to<_Key>,\n-\t   class _Alloc = std::allocator<std::pair<const _Key, _Tp> > >\n+  template<typename _Key, typename _Tp,\n+\t   typename _Hash = hash<_Key>,\n+\t   typename _Pred = equal_to<_Key>,\n+\t   typename _Alloc = allocator<std::pair<const _Key, _Tp>>>\n     class unordered_map\n     {\n       typedef __umap_hashtable<_Key, _Tp, _Hash, _Pred, _Alloc>  _Hashtable;\n@@ -1229,10 +1229,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n    *  Base is _Hashtable, dispatched at compile time via template\n    *  alias __ummap_hashtable.\n    */\n-  template<class _Key, class _Tp,\n-\t   class _Hash = hash<_Key>,\n-\t   class _Pred = std::equal_to<_Key>,\n-\t   class _Alloc = std::allocator<std::pair<const _Key, _Tp> > >\n+  template<typename _Key, typename _Tp,\n+\t   typename _Hash = hash<_Key>,\n+\t   typename _Pred = equal_to<_Key>,\n+\t   typename _Alloc = allocator<std::pair<const _Key, _Tp>>>\n     class unordered_multimap\n     {\n       typedef __ummap_hashtable<_Key, _Tp, _Hash, _Pred, _Alloc>  _Hashtable;"}, {"sha": "550548c42db5a7e7e8514a1ac27d8fcc3fc758b6", "filename": "libstdc++-v3/include/bits/unordered_set.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -90,10 +90,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n    *  Base is _Hashtable, dispatched at compile time via template\n    *  alias __uset_hashtable.\n    */\n-  template<class _Value,\n-\t   class _Hash = hash<_Value>,\n-\t   class _Pred = std::equal_to<_Value>,\n-\t   class _Alloc = std::allocator<_Value> >\n+  template<typename _Value,\n+\t   typename _Hash = hash<_Value>,\n+\t   typename _Pred = equal_to<_Value>,\n+\t   typename _Alloc = allocator<_Value>>\n     class unordered_set\n     {\n       typedef __uset_hashtable<_Value, _Hash, _Pred, _Alloc>  _Hashtable;\n@@ -888,10 +888,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n    *  Base is _Hashtable, dispatched at compile time via template\n    *  alias __umset_hashtable.\n    */\n-  template<class _Value,\n-\t   class _Hash = hash<_Value>,\n-\t   class _Pred = std::equal_to<_Value>,\n-\t   class _Alloc = std::allocator<_Value> >\n+  template<typename _Value,\n+\t   typename _Hash = hash<_Value>,\n+\t   typename _Pred = equal_to<_Value>,\n+\t   typename _Alloc = allocator<_Value>>\n     class unordered_multiset\n     {\n       typedef __umset_hashtable<_Value, _Hash, _Pred, _Alloc>  _Hashtable;"}, {"sha": "7bb63731ffe37087490bfecd3b698f6413284442", "filename": "libstdc++-v3/testsuite/23_containers/deque/48101-2_neg.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2F48101-2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2F48101-2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2F48101-2_neg.cc?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile }\n+// { dg-options \"-std=c++11\" }\n+\n+#include <deque>\n+\n+void\n+test01()\n+{\n+  std::deque<int, std::allocator<long>> c;\n+}\n+\n+// { dg-error \"same value_type as its allocator\" \"\" { target *-*-* } 0 }"}, {"sha": "57327e085e53822e5f4c73b729763c335516229b", "filename": "libstdc++-v3/testsuite/23_containers/deque/48101_neg.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2F48101_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2F48101_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2F48101_neg.cc?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <deque>\n+\n+void\n+test01()\n+{\n+  std::deque<const int> c;\n+}\n+\n+// { dg-error \"non-const, non-volatile value_type\" \"\" { target *-*-* } 0 }\n+// { dg-prune-output \"std::allocator<.* has no member named \" }"}, {"sha": "a830d7a15bdebee4564d522bb4e394472bee8c18", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/48101-2_neg.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2F48101-2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2F48101-2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2F48101-2_neg.cc?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile }\n+// { dg-options \"-std=c++11\" }\n+\n+#include <forward_list>\n+\n+void\n+test01()\n+{\n+  std::forward_list<int, std::allocator<long>> c;\n+}\n+\n+// { dg-error \"same value_type as its allocator\" \"\" { target *-*-* } 0 }"}, {"sha": "268c06d445097443fcd93c0ed77f8258cb9333f1", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/48101_neg.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2F48101_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2F48101_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2F48101_neg.cc?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <forward_list>\n+\n+void\n+test01()\n+{\n+  std::forward_list<const int> c;\n+}\n+\n+// { dg-error \"non-const, non-volatile value_type\" \"\" { target *-*-* } 0 }\n+// { dg-prune-output \"std::allocator<.* has no member named \" }"}, {"sha": "bce7e34c76fe0bdd3c89f653b1ac19a4f9f39c23", "filename": "libstdc++-v3/testsuite/23_containers/list/48101-2_neg.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2F48101-2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2F48101-2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2F48101-2_neg.cc?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile }\n+// { dg-options \"-std=c++11\" }\n+\n+#include <list>\n+\n+void\n+test01()\n+{\n+  std::list<int, std::allocator<long>> c;\n+}\n+\n+// { dg-error \"same value_type as its allocator\" \"\" { target *-*-* } 0 }"}, {"sha": "9652e072e56067b9c8680b9b8aa8849f7f1630f4", "filename": "libstdc++-v3/testsuite/23_containers/list/48101_neg.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2F48101_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2F48101_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2F48101_neg.cc?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <list>\n+\n+void\n+test01()\n+{\n+  std::list<const int> c;\n+}\n+\n+// { dg-error \"non-const, non-volatile value_type\" \"\" { target *-*-* } 0 }\n+// { dg-prune-output \"std::allocator<.* has no member named \" }"}, {"sha": "dcb43356bbe06701d86aa30c4ab9d81db9a1b03d", "filename": "libstdc++-v3/testsuite/23_containers/map/48101-2_neg.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2F48101-2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2F48101-2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2F48101-2_neg.cc?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile }\n+// { dg-options \"-std=c++11\" }\n+\n+#include <map>\n+\n+void\n+test01()\n+{\n+  std::map<int, int, std::less<int>, std::allocator<int>> c;\n+}\n+\n+// { dg-error \"same value_type as its allocator\" \"\" { target *-*-* } 0 }"}, {"sha": "75821faf6c5c403e3cbf6d53722c5c2b6c1de791", "filename": "libstdc++-v3/testsuite/23_containers/map/48101_neg.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2F48101_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2F48101_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2F48101_neg.cc?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -0,0 +1,30 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile }\n+// { dg-options \"-std=c++11\" }\n+\n+#include <map>\n+\n+void\n+test01()\n+{\n+  std::map<int, int, std::less<int*>> c;      // { dg-error \"here\" }\n+  std::map<int, int, std::allocator<int>> c2; // { dg-error \"here\" }\n+}\n+\n+// { dg-error \"comparison object must be invocable\" \"\" { target *-*-* } 0 }"}, {"sha": "531c74d74180be3d755b2ead23ae4883067a8df5", "filename": "libstdc++-v3/testsuite/23_containers/map/operations/31440.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Foperations%2F31440.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Foperations%2F31440.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Foperations%2F31440.cc?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -38,7 +38,7 @@ class MemoTable\n \n struct MemoTable::dagNodeLt\n {\n-  bool operator()(const DagNode*, const DagNode*);\n+  bool operator()(const DagNode*, const DagNode*) const;\n };\n \n class MemoTable::MemoMap"}, {"sha": "2b8db2cb8217daa6d4786bc553c53ebd33cdf62e", "filename": "libstdc++-v3/testsuite/23_containers/multimap/48101-2_neg.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2F48101-2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2F48101-2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2F48101-2_neg.cc?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile }\n+// { dg-options \"-std=c++11\" }\n+\n+#include <map>\n+\n+void\n+test01()\n+{\n+  std::multimap<int, int, std::less<int>, std::allocator<int>> c;\n+}\n+\n+// { dg-error \"same value_type as its allocator\" \"\" { target *-*-* } 0 }"}, {"sha": "a303c75dec11d8c32750c7a26d6a448e35831aed", "filename": "libstdc++-v3/testsuite/23_containers/multimap/48101_neg.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2F48101_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2F48101_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2F48101_neg.cc?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -0,0 +1,30 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile }\n+// { dg-options \"-std=c++11\" }\n+\n+#include <map>\n+\n+void\n+test01()\n+{\n+  std::multimap<int, int, std::less<int*>> c;      // { dg-error \"here\" }\n+  std::multimap<int, int, std::allocator<int>> c2; // { dg-error \"here\" }\n+}\n+\n+// { dg-error \"comparison object must be invocable\" \"\" { target *-*-* } 0 }"}, {"sha": "c9bb1f4b3256671f1641dfcaee6edcc939c3ca2e", "filename": "libstdc++-v3/testsuite/23_containers/multiset/48101-2_neg.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2F48101-2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2F48101-2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2F48101-2_neg.cc?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile }\n+// { dg-options \"-std=c++11\" }\n+\n+#include <set>\n+\n+void\n+test01()\n+{\n+  std::multiset<int, std::less<int>, std::allocator<long>> c;\n+}\n+\n+// { dg-error \"same value_type as its allocator\" \"\" { target *-*-* } 0 }"}, {"sha": "3697d32898223131d2543c356991621b95aa421c", "filename": "libstdc++-v3/testsuite/23_containers/multiset/48101_neg.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2F48101_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2F48101_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2F48101_neg.cc?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -0,0 +1,31 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <set>\n+\n+void\n+test01()\n+{\n+  std::multiset<const int> c;\t\t   // { dg-error \"here\" }\n+  std::multiset<int, std::less<long*>> c2; // { dg-error \"here\" }\n+}\n+\n+// { dg-error \"non-const, non-volatile value_type\" \"\" { target *-*-* } 0 }\n+// { dg-error \"comparison object must be invocable\" \"\" { target *-*-* } 0 }\n+// { dg-prune-output \"std::allocator<.* has no member named \" }"}, {"sha": "925d4ad2b2a1273264d7971101cef024c33726fe", "filename": "libstdc++-v3/testsuite/23_containers/set/48101-2_neg.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2F48101-2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2F48101-2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2F48101-2_neg.cc?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile }\n+// { dg-options \"-std=c++11\" }\n+\n+#include <set>\n+\n+void\n+test01()\n+{\n+  std::set<int, std::less<int>, std::allocator<long>> c;\n+}\n+\n+// { dg-error \"same value_type as its allocator\" \"\" { target *-*-* } 0 }"}, {"sha": "258fab8dd68fc5791e9804563035d7306256ce0d", "filename": "libstdc++-v3/testsuite/23_containers/set/48101_neg.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2F48101_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2F48101_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2F48101_neg.cc?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -0,0 +1,31 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <set>\n+\n+void\n+test01()\n+{\n+  std::set<const int> c;\t      // { dg-error \"here\" }\n+  std::set<int, std::less<long*>> c2; // { dg-error \"here\" }\n+}\n+\n+// { dg-error \"non-const, non-volatile value_type\" \"\" { target *-*-* } 0 }\n+// { dg-error \"comparison object must be invocable\" \"\" { target *-*-* } 0 }\n+// { dg-prune-output \"std::allocator<.* has no member named \" }"}, {"sha": "847ac8074d4634042c298b529d4ee416cd05657b", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/48101-2_neg.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2F48101-2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2F48101-2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2F48101-2_neg.cc?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -0,0 +1,30 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile }\n+// { dg-options \"-std=c++11\" }\n+\n+#include <unordered_map>\n+\n+void\n+test01()\n+{\n+  using namespace std;\n+  unordered_map<int, int, hash<int>, equal_to<int>, allocator<long>> c;\n+}\n+\n+// { dg-error \"same value_type as its allocator\" \"\" { target *-*-* } 0 }"}, {"sha": "6180c2d2210e81e80419280e125102286a326025", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/48101_neg.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2F48101_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2F48101_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2F48101_neg.cc?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -0,0 +1,31 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <unordered_map>\n+\n+void\n+test01()\n+{\n+  using namespace std;\n+  unordered_map<int, int, equal_to<int>, hash<int>> c2;  // { dg-error \"here\" }\n+}\n+\n+// { dg-error \"hash function must be invocable\" \"\" { target *-*-* } 0 }\n+// { dg-error \"key equality predicate must be invocable\" \"\" { target *-*-* } 0 }\n+// { dg-prune-output \"use of deleted function\" }"}, {"sha": "6b2660ab924ed104210faa5acdf704ac1ee21988", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/48101-2_neg.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2F48101-2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2F48101-2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2F48101-2_neg.cc?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -0,0 +1,30 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile }\n+// { dg-options \"-std=c++11\" }\n+\n+#include <unordered_map>\n+\n+void\n+test01()\n+{\n+  using namespace std;\n+  unordered_multimap<int, int, hash<int>, equal_to<int>, allocator<long>> c;\n+}\n+\n+// { dg-error \"same value_type as its allocator\" \"\" { target *-*-* } 0 }"}, {"sha": "538d1dcfa0e3d2e2adf6f469f89d22e9a558f92f", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/48101_neg.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2F48101_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2F48101_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2F48101_neg.cc?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -0,0 +1,31 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <unordered_map>\n+\n+void\n+test01()\n+{\n+  using namespace std;\n+  unordered_multimap<int, int, equal_to<int>, hash<int>> c2; // { dg-error \"here\" }\n+}\n+\n+// { dg-error \"hash function must be invocable\" \"\" { target *-*-* } 0 }\n+// { dg-error \"key equality predicate must be invocable\" \"\" { target *-*-* } 0 }\n+// { dg-prune-output \"use of deleted function\" }"}, {"sha": "6dccaa7aa846ef4ec2002762f2c82a8d6b30761d", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/48101-2_neg.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2F48101-2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2F48101-2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2F48101-2_neg.cc?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -0,0 +1,30 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile }\n+// { dg-options \"-std=c++11\" }\n+\n+#include <unordered_set>\n+\n+void\n+test01()\n+{\n+  using namespace std;\n+  unordered_multiset<int, hash<int>, equal_to<int>, allocator<long>> c;\n+}\n+\n+// { dg-error \"same value_type as its allocator\" \"\" { target *-*-* } 0 }"}, {"sha": "3ec61dd2b01c731ecb0994195f237fbd6bca582b", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/48101_neg.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2F48101_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2F48101_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2F48101_neg.cc?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -0,0 +1,33 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <unordered_set>\n+\n+void\n+test01()\n+{\n+  using namespace std;\n+  unordered_multiset<const int, hash<int>> c;\t\t// { dg-error \"here\" }\n+  unordered_multiset<int, equal_to<int>, hash<int>> c2; // { dg-error \"here\" }\n+}\n+\n+// { dg-error \"non-const, non-volatile value_type\" \"\" { target *-*-* } 0 }\n+// { dg-error \"hash function must be invocable\" \"\" { target *-*-* } 0 }\n+// { dg-error \"key equality predicate must be invocable\" \"\" { target *-*-* } 0 }\n+// { dg-prune-output \"use of deleted function\" }"}, {"sha": "1221b8ad6ae014ae149041e87d64afca6c46cb77", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/48101-2_neg.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F48101-2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F48101-2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F48101-2_neg.cc?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -0,0 +1,30 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile }\n+// { dg-options \"-std=c++11\" }\n+\n+#include <unordered_set>\n+\n+void\n+test01()\n+{\n+  using namespace std;\n+  unordered_set<int, hash<int>, equal_to<int>, allocator<long>> c;\n+}\n+\n+// { dg-error \"same value_type as its allocator\" \"\" { target *-*-* } 0 }"}, {"sha": "d74370bd2defd18ef509141ebb54939c214893b7", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/48101_neg.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F48101_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F48101_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F48101_neg.cc?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -0,0 +1,33 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <unordered_set>\n+\n+void\n+test01()\n+{\n+  using namespace std;\n+  unordered_set<const int, hash<int>> c;\t    // { dg-error \"here\" }\n+  unordered_set<int, equal_to<int>, hash<int>> c2;  // { dg-error \"here\" }\n+}\n+\n+// { dg-error \"non-const, non-volatile value_type\" \"\" { target *-*-* } 0 }\n+// { dg-error \"hash function must be invocable\" \"\" { target *-*-* } 0 }\n+// { dg-error \"key equality predicate must be invocable\" \"\" { target *-*-* } 0 }\n+// { dg-prune-output \"use of deleted function\" }"}, {"sha": "60e5b2b7982e71bef4b586e645b2f11ee2888d2e", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/instantiation_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Finstantiation_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Finstantiation_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Finstantiation_neg.cc?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -18,7 +18,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-error \"with noexcept\" \"\" { target *-*-* } 268 }\n+// { dg-error \"qualify your functors .* with noexcept\" \"\" { target *-*-* } 0 }\n \n #include <unordered_set>\n "}, {"sha": "0a54a4896527dbd7d73b6638bb670942e8476f61", "filename": "libstdc++-v3/testsuite/23_containers/vector/48101-2_neg.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2F48101-2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2F48101-2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2F48101-2_neg.cc?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile }\n+// { dg-options \"-std=c++11\" }\n+\n+#include <vector>\n+\n+void\n+test01()\n+{\n+  std::vector<int, std::allocator<long>> c;\n+}\n+\n+// { dg-error \"same value_type as its allocator\" \"\" { target *-*-* } 0 }"}, {"sha": "ed70156369905ad8e4a14e205558f33d0ba83a73", "filename": "libstdc++-v3/testsuite/23_containers/vector/48101_neg.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2F48101_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e4d3853ccc0bc61e3764911d2a0f69c281f0c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2F48101_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2F48101_neg.cc?ref=866e4d3853ccc0bc61e3764911d2a0f69c281f0c", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <vector>\n+\n+void\n+test01()\n+{\n+  std::vector<const int> c;\n+}\n+\n+// { dg-error \"non-const, non-volatile value_type\" \"\" { target *-*-* } 0 }\n+// { dg-prune-output \"std::allocator<.* has no member named \" }"}]}