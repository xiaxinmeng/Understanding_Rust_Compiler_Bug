{"sha": "dfb1d76f1caaa5448184522716fc7c05276ffc49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZiMWQ3NmYxY2FhYTU0NDgxODQ1MjI3MTZmYzdjMDUyNzZmZmM0OQ==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2000-10-25T16:54:47Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-10-25T16:54:47Z"}, "message": "configure.in: Check for gconv.h.\n\n\n2000-10-25  Phil Edwards  <pme@sources.redhat.com>\n\n        * configure.in:  Check for gconv.h.\n        * libio/wfileops.c:  Wrap gconv.h in HAVE_GCONV_H.\n\n        * config/c_io_libio_codecvt.c:  Change __mbstate_t to __c_mbstate_t.\n        * libio/_G_config.h:  And here.\n        * libio/iofwide.c:  And here.\n        * libio/libio.h:  And here.\n\n        * config/os/solaris/solaris2.7/bits/ctype_noninline.h:  Remove\n          exception specification to match declaration.\n        * include/bits/locale_facets.tcc:  Include bits/std_clocale.h.\n\nFrom-SVN: r37053", "tree": {"sha": "0c708ed376115ae13567b696378dfabfdbb490b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c708ed376115ae13567b696378dfabfdbb490b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfb1d76f1caaa5448184522716fc7c05276ffc49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfb1d76f1caaa5448184522716fc7c05276ffc49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfb1d76f1caaa5448184522716fc7c05276ffc49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfb1d76f1caaa5448184522716fc7c05276ffc49/comments", "author": null, "committer": null, "parents": [{"sha": "dc5041ab711fd5760a0c7fb0a9ae4b3292608eca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc5041ab711fd5760a0c7fb0a9ae4b3292608eca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc5041ab711fd5760a0c7fb0a9ae4b3292608eca"}], "stats": {"total": 139, "additions": 100, "deletions": 39}, "files": [{"sha": "113e7ef4128f2002c9372c8b5d6490e148fdd243", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb1d76f1caaa5448184522716fc7c05276ffc49/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb1d76f1caaa5448184522716fc7c05276ffc49/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=dfb1d76f1caaa5448184522716fc7c05276ffc49", "patch": "@@ -1,3 +1,17 @@\n+2000-10-25  Phil Edwards  <pme@sources.redhat.com>\n+\n+        * configure.in:  Check for gconv.h.\n+        * libio/wfileops.c:  Wrap gconv.h in HAVE_GCONV_H.\n+\n+        * config/c_io_libio_codecvt.c:  Change __mbstate_t to __c_mbstate_t.\n+        * libio/_G_config.h:  And here.\n+        * libio/iofwide.c:  And here.\n+        * libio/libio.h:  And here.\n+\n+        * config/os/solaris/solaris2.7/bits/ctype_noninline.h:  Remove\n+          exception specification to match declaration.\n+        * include/bits/locale_facets.tcc:  Include bits/std_clocale.h.\n+\n 2000-10-24   Mark Harig <mharig@landmark.com>\n \n         * docs/configopts.html: Added documentation for the"}, {"sha": "1e1291df57c8a3ed13e60018f869d8e3eb0b46a8", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb1d76f1caaa5448184522716fc7c05276ffc49/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb1d76f1caaa5448184522716fc7c05276ffc49/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=dfb1d76f1caaa5448184522716fc7c05276ffc49", "patch": "@@ -624,6 +624,9 @@\n /* Define if you have the <fp.h> header file.  */\n #undef HAVE_FP_H\n \n+/* Define if you have the <gconv.h> header file.  */\n+#undef HAVE_GCONV_H\n+\n /* Define if you have the <ieeefp.h> header file.  */\n #undef HAVE_IEEEFP_H\n "}, {"sha": "4fc7fc0cf0027f77f5afba98beffeac95c020655", "filename": "libstdc++-v3/config/c_io_libio_codecvt.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb1d76f1caaa5448184522716fc7c05276ffc49/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio_codecvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb1d76f1caaa5448184522716fc7c05276ffc49/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio_codecvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio_codecvt.c?ref=dfb1d76f1caaa5448184522716fc7c05276ffc49", "patch": "@@ -30,25 +30,25 @@\n \n /* Prototypes of libio's codecvt functions.  */\n static enum __codecvt_result \n-do_out(struct _IO_codecvt *codecvt, __mbstate_t *statep,\n+do_out(struct _IO_codecvt *codecvt, __c_mbstate_t *statep,\n        const wchar_t *from_start, const wchar_t *from_end,\n        const wchar_t **from_stop, char *to_start, char *to_end, \n        char **to_stop);\n \n static enum __codecvt_result \n-do_unshift(struct _IO_codecvt *codecvt, __mbstate_t *statep, char *to_start, \n+do_unshift(struct _IO_codecvt *codecvt, __c_mbstate_t *statep, char *to_start, \n \t   char *to_end, char **to_stop);\n \n static enum __codecvt_result \n-do_in(struct _IO_codecvt *codecvt, __mbstate_t *statep, \n+do_in(struct _IO_codecvt *codecvt, __c_mbstate_t *statep, \n       const char *from_start, const char *from_end, const char **from_stop, \n       wchar_t *to_start, wchar_t *to_end, wchar_t **to_stop);\n \n static int \n do_encoding(struct _IO_codecvt *codecvt);\n \n static int \n-do_length(struct _IO_codecvt *codecvt, __mbstate_t *statep, \n+do_length(struct _IO_codecvt *codecvt, __c_mbstate_t *statep, \n \t  const char *from_start, const char *from_end, _IO_size_t max);\n \n static int \n@@ -72,7 +72,7 @@ struct _IO_codecvt __c_libio_codecvt =\n };\n \n static enum __codecvt_result\n-do_out(struct _IO_codecvt *codecvt, __mbstate_t *statep,\n+do_out(struct _IO_codecvt *codecvt, __c_mbstate_t *statep,\n        const wchar_t *from_start, const wchar_t *from_end,\n        const wchar_t **from_stop, char *to_start, char *to_end,\n        char **to_stop)\n@@ -97,7 +97,7 @@ do_out(struct _IO_codecvt *codecvt, __mbstate_t *statep,\n \n \n static enum __codecvt_result\n-do_unshift(struct _IO_codecvt *codecvt, __mbstate_t *statep,\n+do_unshift(struct _IO_codecvt *codecvt, __c_mbstate_t *statep,\n \t   char *to_start, char *to_end, char **to_stop)\n {\n   *to_stop = to_start;\n@@ -106,7 +106,7 @@ do_unshift(struct _IO_codecvt *codecvt, __mbstate_t *statep,\n \n \n static enum __codecvt_result\n-do_in(struct _IO_codecvt *codecvt, __mbstate_t *statep,\n+do_in(struct _IO_codecvt *codecvt, __c_mbstate_t *statep,\n       const char *from_start, const char *from_end, const char **from_stop,\n       wchar_t *to_start, wchar_t *to_end, wchar_t **to_stop)\n {\n@@ -140,7 +140,7 @@ do_always_noconv(struct _IO_codecvt *codecvt)\n \n \n static int\n-do_length(struct _IO_codecvt *codecvt, __mbstate_t *statep,\n+do_length(struct _IO_codecvt *codecvt, __c_mbstate_t *statep,\n \t  const char *from_start, const char *from_end, _IO_size_t max)\n { return from_end - from_start; }\n "}, {"sha": "f5ec1717ce8b5c03b12f0c2d034d7fa5ed76279d", "filename": "libstdc++-v3/config/os/solaris/solaris2.7/bits/ctype_noninline.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb1d76f1caaa5448184522716fc7c05276ffc49/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb1d76f1caaa5448184522716fc7c05276ffc49/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fbits%2Fctype_noninline.h?ref=dfb1d76f1caaa5448184522716fc7c05276ffc49", "patch": "@@ -34,7 +34,7 @@\n // Information as gleaned from /usr/include/ctype.h\n   \n   ctype<char>::ctype(const mask* __table = 0, bool __del = false, \n-\tsize_t __refs = 0) throw()\n+\tsize_t __refs = 0)\n     : _Ctype_nois<char>(__refs), _M_del(__table != 0 && __del), \n       _M_toupper(__trans_upper), _M_tolower(__trans_lower),\n       _M_ctable(__ctype_mask), _M_table(__table == 0 ? _M_ctable: __table) "}, {"sha": "d2603a27800588f7e7cd39f3cbecf3a141816089", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 46, "deletions": 6, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb1d76f1caaa5448184522716fc7c05276ffc49/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb1d76f1caaa5448184522716fc7c05276ffc49/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=dfb1d76f1caaa5448184522716fc7c05276ffc49", "patch": "@@ -18570,6 +18570,46 @@ EOF\n \n fi\n \n+  for ac_hdr in gconv.h\n+do\n+ac_safe=`echo \"$ac_hdr\" | sed 'y%./+-%__p_%'`\n+echo $ac_n \"checking for $ac_hdr\"\"... $ac_c\" 1>&6\n+echo \"configure:18578: checking for $ac_hdr\" >&5\n+if eval \"test \\\"`echo '$''{'ac_cv_header_$ac_safe'+set}'`\\\" = set\"; then\n+  echo $ac_n \"(cached) $ac_c\" 1>&6\n+else\n+  cat > conftest.$ac_ext <<EOF\n+#line 18583 \"configure\"\n+#include \"confdefs.h\"\n+#include <$ac_hdr>\n+EOF\n+ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n+{ (eval echo configure:18588: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n+if test -z \"$ac_err\"; then\n+  rm -rf conftest*\n+  eval \"ac_cv_header_$ac_safe=yes\"\n+else\n+  echo \"$ac_err\" >&5\n+  echo \"configure: failed program was:\" >&5\n+  cat conftest.$ac_ext >&5\n+  rm -rf conftest*\n+  eval \"ac_cv_header_$ac_safe=no\"\n+fi\n+rm -f conftest*\n+fi\n+if eval \"test \\\"`echo '$ac_cv_header_'$ac_safe`\\\" = yes\"; then\n+  echo \"$ac_t\"\"yes\" 1>&6\n+    ac_tr_hdr=HAVE_`echo $ac_hdr | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`\n+  cat >> confdefs.h <<EOF\n+#define $ac_tr_hdr 1\n+EOF\n+ \n+else\n+  echo \"$ac_t\"\"no\" 1>&6\n+fi\n+done\n+\n fi\n \n \n@@ -18611,19 +18651,19 @@ fi\n \n if test $ac_cv_header_locale_h = yes; then\n     echo $ac_n \"checking for LC_MESSAGES\"\"... $ac_c\" 1>&6\n-echo \"configure:18615: checking for LC_MESSAGES\" >&5\n+echo \"configure:18655: checking for LC_MESSAGES\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_val_LC_MESSAGES'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 18620 \"configure\"\n+#line 18660 \"configure\"\n #include \"confdefs.h\"\n #include <locale.h>\n int main() {\n return LC_MESSAGES\n ; return 0; }\n EOF\n-if { (eval echo configure:18627: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:18667: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   ac_cv_val_LC_MESSAGES=yes\n else\n@@ -18660,14 +18700,14 @@ INTERFACE=v3\n # Check for the interface version number for specifying where header\n # files are installed, if a version number is provided.\n echo $ac_n \"checking for interface version number\"\"... $ac_c\" 1>&6\n-echo \"configure:18664: checking for interface version number\" >&5\n+echo \"configure:18704: checking for interface version number\" >&5\n libstdcxx_interface=$INTERFACE\n echo \"$ac_t\"\"$libstdcxx_interface\" 1>&6\n \n \n # Process the option --with-gxx-include-dir=<path to include-files directory>\n echo $ac_n \"checking for --with-gxx-include-dir\"\"... $ac_c\" 1>&6\n-echo \"configure:18671: checking for --with-gxx-include-dir\" >&5\n+echo \"configure:18711: checking for --with-gxx-include-dir\" >&5\n # Check whether --with-gxx-include-dir or --without-gxx-include-dir was given.\n if test \"${with_gxx_include_dir+set}\" = set; then\n   withval=\"$with_gxx_include_dir\"\n@@ -18701,7 +18741,7 @@ fi\n \n # Process the option \"--enable-version-specific-runtime-libs\"\n echo $ac_n \"checking for --enable-version-specific-runtime-libs\"\"... $ac_c\" 1>&6\n-echo \"configure:18705: checking for --enable-version-specific-runtime-libs\" >&5\n+echo \"configure:18745: checking for --enable-version-specific-runtime-libs\" >&5\n # Check whether --enable-version-specific-runtime-libs or --disable-version-specific-runtime-libs was given.\n if test \"${enable_version_specific_runtime_libs+set}\" = set; then\n   enableval=\"$enable_version_specific_runtime_libs\""}, {"sha": "1ffc0cb9c63605cb7caf0e78675090c3815aee7f", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb1d76f1caaa5448184522716fc7c05276ffc49/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb1d76f1caaa5448184522716fc7c05276ffc49/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=dfb1d76f1caaa5448184522716fc7c05276ffc49", "patch": "@@ -135,6 +135,7 @@ else\n   GLIBCPP_CHECK_CTYPE\n \n   AC_FUNC_MMAP\n+  AC_CHECK_HEADERS(gconv.h)\n fi\n \n AM_CONDITIONAL(CANADIAN, test \"$CANADIAN\" = yes)"}, {"sha": "3a404dd7ec154f2f2dfbe9e04785952593f8f96a", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb1d76f1caaa5448184522716fc7c05276ffc49/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb1d76f1caaa5448184522716fc7c05276ffc49/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=dfb1d76f1caaa5448184522716fc7c05276ffc49", "patch": "@@ -33,6 +33,7 @@\n #define _CPP_BITS_LOCFACETS_TCC 1\n \n #include <bits/std_cerrno.h>\n+#include <bits/std_clocale.h>   // For localeconv\n #include <bits/std_cstdlib.h>   // For strof, strtold\n #include <bits/std_limits.h>    // For numeric_limits\n #include <bits/std_memory.h>    // For auto_ptr"}, {"sha": "4e79f74db8209fa499cd41185c1b996e7cfb60af", "filename": "libstdc++-v3/libio/_G_config.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb1d76f1caaa5448184522716fc7c05276ffc49/libstdc%2B%2B-v3%2Flibio%2F_G_config.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb1d76f1caaa5448184522716fc7c05276ffc49/libstdc%2B%2B-v3%2Flibio%2F_G_config.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2F_G_config.h?ref=dfb1d76f1caaa5448184522716fc7c05276ffc49", "patch": "@@ -37,15 +37,15 @@ typedef unsigned int wint_t;\n \n /* For use as part of glibc (native) or as part of libstdc++ (maybe\n    not glibc) */\n-#ifndef __mbstate_t_defined\n-# define __mbstate_t_defined\t1\n-# ifdef _GLIBCPP_USE_WCHAR_T\n+#ifndef __c_mbstate_t_defined\n+# define __c_mbstate_t_defined\t1\n+/*# ifdef _GLIBCPP_USE_WCHAR_T*/\n typedef struct\n {\n   int count;\n   wint_t value;\n-}__mbstate_t;\n-# endif\n+}__c_mbstate_t;\n+/*# endif*/\n #endif\n #undef __need_mbstate_t\n \n@@ -56,13 +56,13 @@ typedef size_t _G_size_t;\n typedef struct\n {\n   __off_t __pos;\n-  __mbstate_t __state;\n+  __c_mbstate_t __state;\n } _G_fpos_t;\n \n typedef struct\n {\n   __off64_t __pos;\n-  __mbstate_t __state;\n+  __c_mbstate_t __state;\n } _G_fpos64_t;\n #else\n typedef __off_t _G_fpos_t;"}, {"sha": "0ec1182b4ff1f29fb2355d116f7d34ec4fc2cd44", "filename": "libstdc++-v3/libio/iofwide.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb1d76f1caaa5448184522716fc7c05276ffc49/libstdc%2B%2B-v3%2Flibio%2Fiofwide.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb1d76f1caaa5448184522716fc7c05276ffc49/libstdc%2B%2B-v3%2Flibio%2Fiofwide.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2Fiofwide.c?ref=dfb1d76f1caaa5448184522716fc7c05276ffc49", "patch": "@@ -41,22 +41,22 @@\n \n /* Prototypes of libio's codecvt functions.  */\n static enum __codecvt_result do_out (struct _IO_codecvt *codecvt,\n-\t\t\t\t     __mbstate_t *statep,\n+\t\t\t\t     __c_mbstate_t *statep,\n \t\t\t\t     const wchar_t *from_start,\n \t\t\t\t     const wchar_t *from_end,\n \t\t\t\t     const wchar_t **from_stop, char *to_start,\n \t\t\t\t     char *to_end, char **to_stop);\n static enum __codecvt_result do_unshift (struct _IO_codecvt *codecvt,\n-\t\t\t\t\t __mbstate_t *statep, char *to_start,\n+\t\t\t\t\t __c_mbstate_t *statep, char *to_start,\n \t\t\t\t\t char *to_end, char **to_stop);\n static enum __codecvt_result do_in (struct _IO_codecvt *codecvt,\n-\t\t\t\t    __mbstate_t *statep,\n+\t\t\t\t    __c_mbstate_t *statep,\n \t\t\t\t    const char *from_start,\n \t\t\t\t    const char *from_end,\n \t\t\t\t    const char **from_stop, wchar_t *to_start,\n \t\t\t\t    wchar_t *to_end, wchar_t **to_stop);\n static int do_encoding (struct _IO_codecvt *codecvt);\n-static int do_length (struct _IO_codecvt *codecvt, __mbstate_t *statep,\n+static int do_length (struct _IO_codecvt *codecvt, __c_mbstate_t *statep,\n \t\t      const char *from_start,\n \t\t      const char *from_end, _IO_size_t max);\n static int do_max_length (struct _IO_codecvt *codecvt);\n@@ -116,8 +116,8 @@ _IO_fwide (fp, mode)\n \tstruct gconv_fcts fcts;\n \n \t/* Clear the state.  We start all over again.  */\n-\tmemset (&fp->_wide_data->_IO_state, '\\0', sizeof (__mbstate_t));\n-\tmemset (&fp->_wide_data->_IO_last_state, '\\0', sizeof (__mbstate_t));\n+\tmemset (&fp->_wide_data->_IO_state, '\\0', sizeof (__c_mbstate_t));\n+\tmemset (&fp->_wide_data->_IO_last_state, '\\0', sizeof (__c_mbstate_t));\n \n \t__wcsmbs_clone_conv (&fcts);\n \n@@ -188,7 +188,7 @@ weak_alias (_IO_fwide, fwide)\n \n \n static enum __codecvt_result\n-do_out (struct _IO_codecvt *codecvt, __mbstate_t *statep,\n+do_out (struct _IO_codecvt *codecvt, __c_mbstate_t *statep,\n \tconst wchar_t *from_start, const wchar_t *from_end,\n \tconst wchar_t **from_stop, char *to_start, char *to_end,\n \tchar **to_stop)\n@@ -257,7 +257,7 @@ do_out (struct _IO_codecvt *codecvt, __mbstate_t *statep,\n \n \n static enum __codecvt_result\n-do_unshift (struct _IO_codecvt *codecvt, __mbstate_t *statep,\n+do_unshift (struct _IO_codecvt *codecvt, __c_mbstate_t *statep,\n \t    char *to_start, char *to_end, char **to_stop)\n {\n   enum __codecvt_result result;\n@@ -318,7 +318,7 @@ do_unshift (struct _IO_codecvt *codecvt, __mbstate_t *statep,\n \n \n static enum __codecvt_result\n-do_in (struct _IO_codecvt *codecvt, __mbstate_t *statep,\n+do_in (struct _IO_codecvt *codecvt, __c_mbstate_t *statep,\n        const char *from_start, const char *from_end, const char **from_stop,\n        wchar_t *to_start, wchar_t *to_end, wchar_t **to_stop)\n {\n@@ -416,7 +416,7 @@ do_always_noconv (struct _IO_codecvt *codecvt)\n \n \n static int\n-do_length (struct _IO_codecvt *codecvt, __mbstate_t *statep,\n+do_length (struct _IO_codecvt *codecvt, __c_mbstate_t *statep,\n \t   const char *from_start, const char *from_end, _IO_size_t max)\n {\n   int result;"}, {"sha": "6fd503ee985dceb443e6c553490a45573d2a9bdb", "filename": "libstdc++-v3/libio/libio.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb1d76f1caaa5448184522716fc7c05276ffc49/libstdc%2B%2B-v3%2Flibio%2Flibio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb1d76f1caaa5448184522716fc7c05276ffc49/libstdc%2B%2B-v3%2Flibio%2Flibio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2Flibio.h?ref=dfb1d76f1caaa5448184522716fc7c05276ffc49", "patch": "@@ -206,22 +206,22 @@ struct _IO_codecvt\n {\n   void (*__codecvt_destr) (struct _IO_codecvt *);\n   enum __codecvt_result (*__codecvt_do_out) (struct _IO_codecvt *,\n-\t\t\t\t\t     __mbstate_t *,\n+\t\t\t\t\t     __c_mbstate_t *,\n \t\t\t\t\t     const wchar_t *,\n \t\t\t\t\t     const wchar_t *,\n \t\t\t\t\t     const wchar_t **, char *,\n \t\t\t\t\t     char *, char **);\n   enum __codecvt_result (*__codecvt_do_unshift) (struct _IO_codecvt *,\n-\t\t\t\t\t\t __mbstate_t *, char *,\n+\t\t\t\t\t\t __c_mbstate_t *, char *,\n \t\t\t\t\t\t char *, char **);\n   enum __codecvt_result (*__codecvt_do_in) (struct _IO_codecvt *,\n-\t\t\t\t\t    __mbstate_t *,\n+\t\t\t\t\t    __c_mbstate_t *,\n \t\t\t\t\t    const char *, const char *,\n \t\t\t\t\t    const char **, wchar_t *,\n \t\t\t\t\t    wchar_t *, wchar_t **);\n   int (*__codecvt_do_encoding) (struct _IO_codecvt *);\n   int (*__codecvt_do_always_noconv) (struct _IO_codecvt *);\n-  int (*__codecvt_do_length) (struct _IO_codecvt *, __mbstate_t *,\n+  int (*__codecvt_do_length) (struct _IO_codecvt *, __c_mbstate_t *,\n \t\t\t      const char *, const char *, _IO_size_t);\n   int (*__codecvt_do_max_length) (struct _IO_codecvt *);\n \n@@ -247,8 +247,8 @@ struct _IO_wide_data\n   wchar_t *_IO_save_end;\t/* Pointer to end of non-current get area. */\n \n #if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T\n-  __mbstate_t _IO_state;\n-  __mbstate_t _IO_last_state;\n+  __c_mbstate_t _IO_state;\n+  __c_mbstate_t _IO_last_state;\n #endif\n   struct _IO_codecvt _codecvt;\n "}, {"sha": "376014b2d7c02d1bc2f46127e941f721d48b119d", "filename": "libstdc++-v3/libio/wfileops.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb1d76f1caaa5448184522716fc7c05276ffc49/libstdc%2B%2B-v3%2Flibio%2Fwfileops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb1d76f1caaa5448184522716fc7c05276ffc49/libstdc%2B%2B-v3%2Flibio%2Fwfileops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2Fwfileops.c?ref=dfb1d76f1caaa5448184522716fc7c05276ffc49", "patch": "@@ -28,7 +28,9 @@\n #include <assert.h>\n #include <libioP.h>\n #include <wchar.h>\n-#include <gconv.h>\n+#ifdef HAVE_GCONV_H\n+#  include <gconv.h>\n+#endif\n #include <stdlib.h>\n #include <string.h>\n "}]}