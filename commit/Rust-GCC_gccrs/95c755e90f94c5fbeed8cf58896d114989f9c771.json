{"sha": "95c755e90f94c5fbeed8cf58896d114989f9c771", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVjNzU1ZTkwZjk0YzVmYmVlZDhjZjU4ODk2ZDExNDk4OWY5Yzc3MQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2004-01-14T22:54:50Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2004-01-14T22:54:50Z"}, "message": "cgraph.c (create_edge): Use local.redefined_extern_inline.\n\n\n\t* cgraph.c (create_edge): Use local.redefined_extern_inline.\n\t* cgraph.h (cgraph_local_info): Sort fields by size; add\n\tredefined_extern_inline\n\t(cgraph_global_info): Sort fields by size.\n\t(cgraph_node): Likewise.\n\t* cgraphunit.c (cgraph_finalize_function): Se\n\tlocal.redefined_extern_inline on redefinition.\n\t(cgraph_analyze_function): Use it; fix formating.\n\nFrom-SVN: r75890", "tree": {"sha": "8b1b7c30c31af7eeaa57d8ea5898e75bae608347", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b1b7c30c31af7eeaa57d8ea5898e75bae608347"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95c755e90f94c5fbeed8cf58896d114989f9c771", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95c755e90f94c5fbeed8cf58896d114989f9c771", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95c755e90f94c5fbeed8cf58896d114989f9c771", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95c755e90f94c5fbeed8cf58896d114989f9c771/comments", "author": null, "committer": null, "parents": [{"sha": "092b50e2d7faa1cf0441da77a0d2d72a983276b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/092b50e2d7faa1cf0441da77a0d2d72a983276b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/092b50e2d7faa1cf0441da77a0d2d72a983276b1"}], "stats": {"total": 50, "additions": 38, "deletions": 12}, "files": [{"sha": "29bcb0631d393c089bfa0640659a45286e8b4102", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95c755e90f94c5fbeed8cf58896d114989f9c771/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95c755e90f94c5fbeed8cf58896d114989f9c771/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=95c755e90f94c5fbeed8cf58896d114989f9c771", "patch": "@@ -1,3 +1,14 @@\n+2004-01-14  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cgraph.c (create_edge): Use local.redefined_extern_inline.\n+\t* cgraph.h (cgraph_local_info): Sort fields by size; add\n+\tredefined_extern_inline\n+\t(cgraph_global_info): Sort fields by size.\n+\t(cgraph_node): Likewise.\n+\t* cgraphunit.c (cgraph_finalize_function): Se\n+\tlocal.redefined_extern_inline on redefinition.\n+\t(cgraph_analyze_function): Use it; fix formating.\n+\n 2004-01-14  Jan Hubicka  <jh@suse.cz>\n \n \tPR c++/10776"}, {"sha": "ec3bcca34e7a4ff5e2ede98467025670814dc09a", "filename": "gcc/cgraph.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95c755e90f94c5fbeed8cf58896d114989f9c771/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95c755e90f94c5fbeed8cf58896d114989f9c771/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=95c755e90f94c5fbeed8cf58896d114989f9c771", "patch": "@@ -159,6 +159,9 @@ create_edge (struct cgraph_node *caller, struct cgraph_node *callee)\n \n   if (!DECL_SAVED_TREE (callee->decl))\n     edge->inline_failed = N_(\"function body not available\");\n+  else if (callee->local.redefined_extern_inline)\n+    edge->inline_failed = N_(\"redefined extern inline functions are not \"\n+\t\t\t     \"considered for inlining\");\n   else if (callee->local.inlinable)\n     edge->inline_failed = N_(\"function not considered for inlining\");\n   else"}, {"sha": "ee4372ee91bbe83699871d79a344fba4db0fb824", "filename": "gcc/cgraph.h", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95c755e90f94c5fbeed8cf58896d114989f9c771/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95c755e90f94c5fbeed8cf58896d114989f9c771/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=95c755e90f94c5fbeed8cf58896d114989f9c771", "patch": "@@ -27,6 +27,9 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n struct cgraph_local_info GTY(())\n {\n+  /* Size of the function before inlining.  */\n+  int self_insns;\n+\n   /* Set when function function is visible in current compilation unit only\n      and it's address is never taken.  */\n   bool local;\n@@ -37,24 +40,25 @@ struct cgraph_local_info GTY(())\n   bool inlinable;\n   /* True when function should be inlined independently on it's size.  */\n   bool disregard_inline_limits;\n-  /* Size of the function before inlining.  */\n-  int self_insns;\n+  /* True when the function has been originally extern inline, but it is\n+     redefined now.  */\n+  bool redefined_extern_inline;\n };\n \n /* Information about the function that needs to be computed globally\n    once compilation is finished.  Available only with -funit-at-time.  */\n \n struct cgraph_global_info GTY(())\n {\n-  /* Set when the function will be inlined exactly once.  */\n-  bool inline_once;\n-\n   /* Estimated size of the function after inlining.  */\n   int insns;\n \n   /* Number of times given function will be cloned during output.  */\n   int cloned_times;\n \n+  /* Set when the function will be inlined exactly once.  */\n+  bool inline_once;\n+\n   /* Set to true for all reachable functions before inlining is decided.\n      Once we inline all calls to the function and the function is local,\n      it is set to false.  */\n@@ -93,10 +97,13 @@ struct cgraph_node GTY((chain_next (\"%h.next\"), chain_prev (\"%h.previous\")))\n   struct cgraph_node *next_nested;\n   /* Pointer to the next function in cgraph_nodes_queue.  */\n   struct cgraph_node *next_needed;\n-  /* Unique id of the node.  */\n-  int uid;\n   PTR GTY ((skip (\"\"))) aux;\n \n+  struct cgraph_local_info local;\n+  struct cgraph_global_info global;\n+  struct cgraph_rtl_info rtl;\n+  /* Unique id of the node.  */\n+  int uid;\n   /* Set when function must be output - it is externally visible\n      or it's address is taken.  */\n   bool needed;\n@@ -108,9 +115,6 @@ struct cgraph_node GTY((chain_next (\"%h.next\"), chain_prev (\"%h.previous\")))\n   bool analyzed;\n   /* Set when function is scheduled to be assembled.  */\n   bool output;\n-  struct cgraph_local_info local;\n-  struct cgraph_global_info global;\n-  struct cgraph_rtl_info rtl;\n };\n \n struct cgraph_edge GTY(())"}, {"sha": "27e4d8d8d7ce7d57717e1fc8184bae1fabc4c1be", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95c755e90f94c5fbeed8cf58896d114989f9c771/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95c755e90f94c5fbeed8cf58896d114989f9c771/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=95c755e90f94c5fbeed8cf58896d114989f9c771", "patch": "@@ -184,6 +184,7 @@ cgraph_finalize_function (tree decl, bool nested)\n       memset (&node->global, 0, sizeof (node->global));\n       memset (&node->rtl, 0, sizeof (node->rtl));\n       node->analyzed = false;\n+      node->local.redefined_extern_inline = true;\n       while (node->callees)\n \tcgraph_remove_edge (node, node->callees->callee);\n \n@@ -330,8 +331,15 @@ cgraph_analyze_function (struct cgraph_node *node)\n       = (*lang_hooks.tree_inlining.disregard_inline_limits) (decl);\n   for (e = node->callers; e; e = e->next_caller)\n     if (e->inline_failed)\n-      e->inline_failed = (!node->local.inlinable ? N_(\"function not inlinable\")\n-\t\t\t  : N_(\"function not considered for inlining\"));\n+      {\n+\tif (node->local.redefined_extern_inline)\n+\t  e->inline_failed = N_(\"redefined extern inline functions are not \"\n+\t\t\t\t\"considered for inlining\");\n+\telse if (!node->local.inlinable)\n+\t  e->inline_failed = N_(\"function not inlinable\");\n+\telse\n+\t  e->inline_failed = N_(\"function not considered for inlining\");\n+      }\n   if (flag_really_no_inline && !node->local.disregard_inline_limits)\n     node->local.inlinable = 0;\n   /* Inlining characteristics are maintained by the cgraph_mark_inline.  */"}]}