{"sha": "c3a88be88a471325a3684af578c348bca2034fd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNhODhiZTg4YTQ3MTMyNWEzNjg0YWY1NzhjMzQ4YmNhMjAzNGZkMw==", "commit": {"author": {"name": "Ryan Mansfield", "email": "rmansfield@qnx.com", "date": "2006-12-01T15:55:11Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-12-01T15:55:11Z"}, "message": "re PR c++/29066 (ptrmemfunc_vbit_in_delta is broken)\n\n2006-12-01  Ryan Mansfield  <rmansfield@qnx.com>\n\n        PR c++/29066\n        * typeck.c (build_binary_op):  Fix pointer to member function\n        comparison for ptrmemfunc_vbit_in_delta targets.\n\n2006-12-01  Ryan Mansfield  <rmansfield@qnx.com>\n\n        PR c++/29066\n        * g++.dg/expr/pr29066.c: New.\n\nFrom-SVN: r119403", "tree": {"sha": "ce2a5f0b7bbe59c508fd8ca9dae17ecf20026a7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce2a5f0b7bbe59c508fd8ca9dae17ecf20026a7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3a88be88a471325a3684af578c348bca2034fd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3a88be88a471325a3684af578c348bca2034fd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3a88be88a471325a3684af578c348bca2034fd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3a88be88a471325a3684af578c348bca2034fd3/comments", "author": null, "committer": null, "parents": [{"sha": "5308e943096315fecd571582b8ca50396ff0cacc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5308e943096315fecd571582b8ca50396ff0cacc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5308e943096315fecd571582b8ca50396ff0cacc"}], "stats": {"total": 140, "additions": 124, "deletions": 16}, "files": [{"sha": "edcb3880e6810bdeed97ed60c0a0483510aee262", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a88be88a471325a3684af578c348bca2034fd3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a88be88a471325a3684af578c348bca2034fd3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c3a88be88a471325a3684af578c348bca2034fd3", "patch": "@@ -1,3 +1,9 @@\n+2006-12-01  Ryan Mansfield  <rmansfield@qnx.com>\n+\n+        PR c++/29066\n+\t* typeck.c (build_binary_op):  Fix pointer to member function\n+\tcomparison for ptrmemfunc_vbit_in_delta targets.\n+\n 2006-12-01  Dirk Mueller  <dmueller@suse.de>\n \n \tPR c++/18313"}, {"sha": "c5c9f38bbb94e4d5c511247aecff4c44e20df135", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 71, "deletions": 16, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a88be88a471325a3684af578c348bca2034fd3/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a88be88a471325a3684af578c348bca2034fd3/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=c3a88be88a471325a3684af578c348bca2034fd3", "patch": "@@ -3266,8 +3266,28 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \t}\n       else if (TYPE_PTRMEMFUNC_P (type0) && null_ptr_cst_p (op1))\n \t{\n-\t  op0 = build_ptrmemfunc_access_expr (op0, pfn_identifier);\n-\t  op1 = cp_convert (TREE_TYPE (op0), integer_zero_node);\n+\t  if (TARGET_PTRMEMFUNC_VBIT_LOCATION\n+\t      == ptrmemfunc_vbit_in_delta)\n+\t    {\n+\t      tree pfn0 = pfn_from_ptrmemfunc (op0);\n+\t      tree delta0 = build_ptrmemfunc_access_expr (op0,\n+\t\t\t \t \t\t\t  delta_identifier);\n+\t      tree e1 = cp_build_binary_op (EQ_EXPR,\n+\t  \t\t\t            pfn0,\t\n+\t\t\t\t      \t    fold_convert (TREE_TYPE (pfn0),\n+\t\t\t\t\t\t\t  integer_zero_node));\n+\t      tree e2 = cp_build_binary_op (BIT_AND_EXPR, \n+\t\t\t\t\t    delta0,\n+\t\t\t\t            integer_one_node);\n+\t      e2 = cp_build_binary_op (EQ_EXPR, e2, integer_zero_node);\n+\t      op0 = cp_build_binary_op (TRUTH_ANDIF_EXPR, e1, e2);\n+\t      op1 = cp_convert (TREE_TYPE (op0), integer_one_node); \n+\t    }\n+     \t  else \n+\t    {\n+\t      op0 = build_ptrmemfunc_access_expr (op0, pfn_identifier);\n+\t      op1 = cp_convert (TREE_TYPE (op0), integer_zero_node); \n+\t    }\n \t  result_type = TREE_TYPE (op0);\n \t}\n       else if (TYPE_PTRMEMFUNC_P (type1) && null_ptr_cst_p (op0))\n@@ -3290,26 +3310,61 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \t  if (TREE_SIDE_EFFECTS (op1))\n \t    op1 = save_expr (op1);\n \n-\t  /* We generate:\n-\n-\t     (op0.pfn == op1.pfn\n-\t      && (!op0.pfn || op0.delta == op1.delta))\n-\n-\t     The reason for the `!op0.pfn' bit is that a NULL\n-\t     pointer-to-member is any member with a zero PFN; the\n-\t     DELTA field is unspecified.  */\n \t  pfn0 = pfn_from_ptrmemfunc (op0);\n \t  pfn1 = pfn_from_ptrmemfunc (op1);\n \t  delta0 = build_ptrmemfunc_access_expr (op0,\n \t\t\t\t\t\t delta_identifier);\n \t  delta1 = build_ptrmemfunc_access_expr (op1,\n \t\t\t\t\t\t delta_identifier);\n-\t  e1 = cp_build_binary_op (EQ_EXPR, delta0, delta1);\n-\t  e2 = cp_build_binary_op (EQ_EXPR,\n-\t\t\t\t   pfn0,\n-\t\t\t\t   cp_convert (TREE_TYPE (pfn0),\n-\t\t\t\t\t       integer_zero_node));\n-\t  e1 = cp_build_binary_op (TRUTH_ORIF_EXPR, e1, e2);\n+\t  if (TARGET_PTRMEMFUNC_VBIT_LOCATION\n+\t      == ptrmemfunc_vbit_in_delta)\n+\t    {\n+\t      /* We generate:\n+\n+\t\t (op0.pfn == op1.pfn\n+\t\t  && ((op0.delta == op1.delta)\n+     \t\t       || (!op0.pfn && op0.delta & 1 == 0 \n+\t\t\t   && op1.delta & 1 == 0))\n+\n+\t         The reason for the `!op0.pfn' bit is that a NULL\n+\t         pointer-to-member is any member with a zero PFN and\n+\t         LSB of the DELTA field is 0.  */\n+\n+\t      e1 = cp_build_binary_op (BIT_AND_EXPR,\n+\t\t\t\t       delta0, \n+\t\t\t\t       integer_one_node);\n+\t      e1 = cp_build_binary_op (EQ_EXPR, e1, integer_zero_node);\n+\t      e2 = cp_build_binary_op (BIT_AND_EXPR,\n+\t\t\t\t       delta1,\n+\t\t\t\t       integer_one_node);\n+\t      e2 = cp_build_binary_op (EQ_EXPR, e2, integer_zero_node);\n+\t      e1 = cp_build_binary_op (TRUTH_ANDIF_EXPR, e2, e1);\n+\t      e2 = cp_build_binary_op (EQ_EXPR,\n+\t\t\t\t       pfn0,\n+\t\t\t\t       fold_convert (TREE_TYPE (pfn0),\n+\t\t\t\t\t\t     integer_zero_node));\n+\t      e2 = cp_build_binary_op (TRUTH_ANDIF_EXPR, e2, e1);\n+\t      e1 = cp_build_binary_op (EQ_EXPR, delta0, delta1);\n+\t      e1 = cp_build_binary_op (TRUTH_ORIF_EXPR, e1, e2);\n+\t    }\n+\t  else\n+\t    {\n+\t      /* We generate:\n+\n+\t         (op0.pfn == op1.pfn\n+\t         && (!op0.pfn || op0.delta == op1.delta))\n+\n+\t         The reason for the `!op0.pfn' bit is that a NULL\n+\t         pointer-to-member is any member with a zero PFN; the\n+\t         DELTA field is unspecified.  */\n+ \n+    \t      e1 = cp_build_binary_op (EQ_EXPR, delta0, delta1);\n+\t      e2 = cp_build_binary_op (EQ_EXPR,\n+\t\t      \t\t       pfn0,\n+\t\t\t   \t       fold_convert (TREE_TYPE (pfn0),\n+\t\t\t\t\t\t   integer_zero_node));\n+\t      e1 = cp_build_binary_op (TRUTH_ORIF_EXPR, e1, e2);\n+\t    }\n \t  e2 = build2 (EQ_EXPR, boolean_type_node, pfn0, pfn1);\n \t  e = cp_build_binary_op (TRUTH_ANDIF_EXPR, e2, e1);\n \t  if (code == EQ_EXPR)"}, {"sha": "ce14b6d9460547242be951a6c55a39d028de5452", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a88be88a471325a3684af578c348bca2034fd3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a88be88a471325a3684af578c348bca2034fd3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c3a88be88a471325a3684af578c348bca2034fd3", "patch": "@@ -1,3 +1,8 @@\n+2006-12-01  Ryan Mansfield  <rmansfield@qnx.com>\n+\n+\tPR c++/29066\n+\t* g++.dg/expr/pr29066.c: New.\n+\n 2006-12-01  H.J. Lu  <hongjiu.lu@intel.com>\n \t    Zdenek Dvorak <dvorakz@suse.cz>\n "}, {"sha": "cd841654104687e803106565c4a39872c9035600", "filename": "gcc/testsuite/g++.dg/expr/pr29066.C", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a88be88a471325a3684af578c348bca2034fd3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fpr29066.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a88be88a471325a3684af578c348bca2034fd3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fpr29066.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fpr29066.C?ref=c3a88be88a471325a3684af578c348bca2034fd3", "patch": "@@ -0,0 +1,42 @@\n+// PR c++/29066\n+// Test pointer to member function comparison\n+// { dg-do run }\n+\n+extern \"C\" void abort (void);\n+\n+struct X\n+{\n+  virtual void a(void)=0;\n+};\n+\n+struct Z : public X\n+{\n+  void a(void) {};\n+};\n+\n+\n+void f(X *obj)\n+{\n+  void (X::*xp)(void) = 0;\n+  void (X::*xp2)(void) = 0;\n+\n+  xp = &X::a;\n+\n+  if (xp == xp2)\n+    {\n+      abort(); \n+    } \n+\n+  if (xp == 0)\n+    {\n+      abort();\n+    }\n+}\n+\n+int main(int argc, char* argv[])\n+{\n+  Z myobj;\n+\n+  f(&myobj);\n+  return 0;\n+}"}]}