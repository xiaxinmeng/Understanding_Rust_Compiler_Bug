{"sha": "27b3d34428801397e562b7fcc5ca10b13961f3e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdiM2QzNDQyODgwMTM5N2U1NjJiN2ZjYzVjYTEwYjEzOTYxZjNlMQ==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-05T14:49:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-05T14:49:56Z"}, "message": "Merge #546\n\n546: shebang handling r=philberty a=dkm\n\n Mark Wielaard:\r\n> Shebang handling, the first line starting with #! was not done fully\r\n> correct and it isn't necessary to keep track of the shebang line in\r\n> the AST or HIR Crate classes.\r\n> \r\n> Because an inner attribute also starts with #! the first line isn't\r\n> regarded as a shebang line if the #! is followed by (optional)\r\n> whitespace and comments and a [. In that case the #! is seen as the\r\n> start of an inner attribute.\r\n> \r\n> I added various testcases that hopefully show the funny things you can\r\n> get when the first line starts with #!.\n\nCo-authored-by: Mark Wielaard <mark@klomp.org>", "tree": {"sha": "c88d5c958ebb9f5a80d2ab7945d6cf0f29181553", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c88d5c958ebb9f5a80d2ab7945d6cf0f29181553"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27b3d34428801397e562b7fcc5ca10b13961f3e1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg4xwUCRBK7hj4Ov3rIwAATNUIAABpydILAds9rVMjZ1C/V0jc\nPHGI+8WBc8rZRg277D2UMyofNlKfe0J0gMeNUQhO7qQQqAs2KwB8xtdk+EOLZoz2\npOMj9KfoKssfu3nWVcQtFyT4/qBKZ3WU9H9/H+E/69F9rbe5i+Cln0Sg12Sbsfq4\nqUy488c3WlN5JVdLdunc4z2XdRw1bVkr2JA6jn2AeWADPYuoa/PQGsiJIbueamGF\njNO2PQe8j1eVHR0Yqpd+aqPxp88wjnLvmNGVJL5MhnnWD2xtolTdl0Hj1iv24zr1\nE1L1KMpLj48ak6Yh4HWPd9SKHpBcmdP3Vyls5xe+mhrAMtkif68TZQRyf30O3wE=\n=9vvR\n-----END PGP SIGNATURE-----\n", "payload": "tree c88d5c958ebb9f5a80d2ab7945d6cf0f29181553\nparent 3c7c2f427c8cc69c67f53281391f954df212914a\nparent afe6eb7d16b1c2336381c74e7d416c57129e88c6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1625496596 +0000\ncommitter GitHub <noreply@github.com> 1625496596 +0000\n\nMerge #546\n\n546: shebang handling r=philberty a=dkm\n\n Mark Wielaard:\r\n> Shebang handling, the first line starting with #! was not done fully\r\n> correct and it isn't necessary to keep track of the shebang line in\r\n> the AST or HIR Crate classes.\r\n> \r\n> Because an inner attribute also starts with #! the first line isn't\r\n> regarded as a shebang line if the #! is followed by (optional)\r\n> whitespace and comments and a [. In that case the #! is seen as the\r\n> start of an inner attribute.\r\n> \r\n> I added various testcases that hopefully show the funny things you can\r\n> get when the first line starts with #!.\n\nCo-authored-by: Mark Wielaard <mark@klomp.org>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27b3d34428801397e562b7fcc5ca10b13961f3e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27b3d34428801397e562b7fcc5ca10b13961f3e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27b3d34428801397e562b7fcc5ca10b13961f3e1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c7c2f427c8cc69c67f53281391f954df212914a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c7c2f427c8cc69c67f53281391f954df212914a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c7c2f427c8cc69c67f53281391f954df212914a"}, {"sha": "afe6eb7d16b1c2336381c74e7d416c57129e88c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afe6eb7d16b1c2336381c74e7d416c57129e88c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afe6eb7d16b1c2336381c74e7d416c57129e88c6"}], "stats": {"total": 161, "additions": 107, "deletions": 54}, "files": [{"sha": "12ef255bcbf96144269ecf01cffa2acf760702d8", "filename": "gcc/rust/ast/rust-ast-full-test.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27b3d34428801397e562b7fcc5ca10b13961f3e1/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27b3d34428801397e562b7fcc5ca10b13961f3e1/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-test.cc?ref=27b3d34428801397e562b7fcc5ca10b13961f3e1", "patch": "@@ -172,13 +172,10 @@ Crate::as_string () const\n   rust_debug (\"beginning crate recursive as-string\");\n \n   std::string str (\"Crate: \");\n-  // add utf8bom and shebang\n+  // add utf8bom\n   if (has_utf8bom)\n     str += \"\\n has utf8bom\";\n \n-  if (has_shebang)\n-    str += \"\\n has shebang\";\n-\n   // inner attributes\n   str += append_attributes (inner_attrs, INNER);\n "}, {"sha": "ce55e1beb5eb5c8b9c743acb1d8b3fb4d15ed9fb", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27b3d34428801397e562b7fcc5ca10b13961f3e1/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27b3d34428801397e562b7fcc5ca10b13961f3e1/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=27b3d34428801397e562b7fcc5ca10b13961f3e1", "patch": "@@ -1551,7 +1551,6 @@ class MacroInvocationSemi : public MacroItem,\n struct Crate\n {\n   bool has_utf8bom;\n-  bool has_shebang;\n \n   std::vector<Attribute> inner_attrs;\n   // dodgy spacing required here\n@@ -1564,17 +1563,16 @@ struct Crate\n public:\n   // Constructor\n   Crate (std::vector<std::unique_ptr<Item> > items,\n-\t std::vector<Attribute> inner_attrs, bool has_utf8bom = false,\n-\t bool has_shebang = false)\n-    : has_utf8bom (has_utf8bom), has_shebang (has_shebang),\n-      inner_attrs (std::move (inner_attrs)), items (std::move (items)),\n+\t std::vector<Attribute> inner_attrs, bool has_utf8bom = false)\n+    : has_utf8bom (has_utf8bom), inner_attrs (std::move (inner_attrs)),\n+      items (std::move (items)),\n       node_id (Analysis::Mappings::get ()->get_next_node_id ())\n   {}\n \n   // Copy constructor with vector clone\n   Crate (Crate const &other)\n-    : has_utf8bom (other.has_utf8bom), has_shebang (other.has_shebang),\n-      inner_attrs (other.inner_attrs), node_id (other.node_id)\n+    : has_utf8bom (other.has_utf8bom), inner_attrs (other.inner_attrs),\n+      node_id (other.node_id)\n   {\n     items.reserve (other.items.size ());\n     for (const auto &e : other.items)\n@@ -1587,7 +1585,6 @@ struct Crate\n   Crate &operator= (Crate const &other)\n   {\n     inner_attrs = other.inner_attrs;\n-    has_shebang = other.has_shebang;\n     has_utf8bom = other.has_utf8bom;\n     node_id = other.node_id;\n "}, {"sha": "0f3c86dc7bf8e865b054056edfa208831397f115", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27b3d34428801397e562b7fcc5ca10b13961f3e1/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27b3d34428801397e562b7fcc5ca10b13961f3e1/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=27b3d34428801397e562b7fcc5ca10b13961f3e1", "patch": "@@ -41,7 +41,6 @@ ASTLowering::go ()\n {\n   std::vector<std::unique_ptr<HIR::Item> > items;\n   bool has_utf8bom = false;\n-  bool has_shebang = false;\n \n   for (auto it = astCrate.items.begin (); it != astCrate.items.end (); it++)\n     {\n@@ -57,7 +56,7 @@ ASTLowering::go ()\n \t\t\t\t UNKNOWN_LOCAL_DEFID);\n \n   return HIR::Crate (std::move (items), astCrate.get_inner_attrs (), mapping,\n-\t\t     has_utf8bom, has_shebang);\n+\t\t     has_utf8bom);\n }\n \n // rust-ast-lower-block.h"}, {"sha": "051ba8736ad0a76433e2b2d32748a600bdf58df2", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27b3d34428801397e562b7fcc5ca10b13961f3e1/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27b3d34428801397e562b7fcc5ca10b13961f3e1/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=27b3d34428801397e562b7fcc5ca10b13961f3e1", "patch": "@@ -73,15 +73,11 @@ std::string\n Crate::as_string () const\n {\n   std::string str (\"HIR::Crate: \");\n-  // add utf8bom and shebang\n+  // add utf8bom\n   if (has_utf8bom)\n     {\n       str += \"\\n has utf8bom\";\n     }\n-  if (has_shebang)\n-    {\n-      str += \"\\n has shebang\";\n-    }\n \n   // inner attributes\n   str += \"\\n inner attributes: \";"}, {"sha": "f918f2dc106796f29406eaa38ef03238124c5988", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27b3d34428801397e562b7fcc5ca10b13961f3e1/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27b3d34428801397e562b7fcc5ca10b13961f3e1/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=27b3d34428801397e562b7fcc5ca10b13961f3e1", "patch": "@@ -679,7 +679,6 @@ class ImplItem\n struct Crate\n {\n   bool has_utf8bom;\n-  bool has_shebang;\n \n   AST::AttrVec inner_attrs;\n   // dodgy spacing required here\n@@ -692,17 +691,15 @@ struct Crate\n public:\n   // Constructor\n   Crate (std::vector<std::unique_ptr<Item> > items, AST::AttrVec inner_attrs,\n-\t Analysis::NodeMapping mappings, bool has_utf8bom = false,\n-\t bool has_shebang = false)\n-    : has_utf8bom (has_utf8bom), has_shebang (has_shebang),\n-      inner_attrs (std::move (inner_attrs)), items (std::move (items)),\n-      mappings (mappings)\n+\t Analysis::NodeMapping mappings, bool has_utf8bom = false)\n+    : has_utf8bom (has_utf8bom), inner_attrs (std::move (inner_attrs)),\n+      items (std::move (items)), mappings (mappings)\n   {}\n \n   // Copy constructor with vector clone\n   Crate (Crate const &other)\n-    : has_utf8bom (other.has_utf8bom), has_shebang (other.has_shebang),\n-      inner_attrs (other.inner_attrs), mappings (other.mappings)\n+    : has_utf8bom (other.has_utf8bom), inner_attrs (other.inner_attrs),\n+      mappings (other.mappings)\n   {\n     items.reserve (other.items.size ());\n     for (const auto &e : other.items)\n@@ -715,7 +712,6 @@ struct Crate\n   Crate &operator= (Crate const &other)\n   {\n     inner_attrs = other.inner_attrs;\n-    has_shebang = other.has_shebang;\n     has_utf8bom = other.has_utf8bom;\n     mappings = other.mappings;\n "}, {"sha": "ebd69de0fd1cb0862b6865860717017bf93ff61a", "filename": "gcc/rust/lex/rust-lex.cc", "status": "modified", "additions": 60, "deletions": 19, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27b3d34428801397e562b7fcc5ca10b13961f3e1/gcc%2Frust%2Flex%2Frust-lex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27b3d34428801397e562b7fcc5ca10b13961f3e1/gcc%2Frust%2Flex%2Frust-lex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flex%2Frust-lex.cc?ref=27b3d34428801397e562b7fcc5ca10b13961f3e1", "patch": "@@ -237,28 +237,63 @@ Lexer::build_token ()\n       current_char = peek_input ();\n       skip_input ();\n \n-      // return end of file token if end of file\n-      if (current_char == EOF)\n-\treturn Token::make (END_OF_FILE, loc);\n-\n       // detect shebang\n-      if (loc == 1 && current_line == 1 && current_char == '#')\n+      // Must be the first thing on the first line, starting with #!\n+      // But since an attribute can also start with an #! we don't count it as a\n+      // shebang line when after any whitespace or comments there is a [. If it\n+      // is a shebang line we simple drop the line. Otherwise we don't consume\n+      // any characters and fall through to the real tokenizer.\n+      if (current_line == 1 && current_column == 1 && current_char == '#'\n+\t  && peek_input () == '!')\n \t{\n-\t  current_char = peek_input ();\n-\n-\t  if (current_char == '!')\n+\t  int n = 1;\n+\t  while (true)\n \t    {\n-\t      skip_input ();\n-\t      current_char = peek_input ();\n-\n-\t      if (current_char == '/')\n+\t      int next_char = peek_input (n);\n+\t      if (is_whitespace (next_char))\n+\t\tn++;\n+\t      else if (next_char == '/' && peek_input (n + 1) == '/')\n \t\t{\n-\t\t  // definitely shebang\n-\n-\t\t  skip_input ();\n-\n-\t\t  // ignore rest of line\n-\t\t  while (current_char != '\\n')\n+\t\t  // A single line comment\n+\t\t  n += 2;\n+\t\t  next_char = peek_input (n);\n+\t\t  while (next_char != '\\n' && next_char != EOF)\n+\t\t    {\n+\t\t      n++;\n+\t\t      next_char = peek_input (n);\n+\t\t    }\n+\t\t  if (next_char == '\\n')\n+\t\t    n++;\n+\t\t}\n+\t      else if (next_char == '/' && peek_input (n + 1) == '*')\n+\t\t{\n+\t\t  // Start of a block comment\n+\t\t  n += 2;\n+\t\t  int level = 1;\n+\t\t  while (level > 0)\n+\t\t    {\n+\t\t      if (peek_input (n) == EOF)\n+\t\t\tbreak;\n+\t\t      else if (peek_input (n) == '/'\n+\t\t\t       && peek_input (n + 1) == '*')\n+\t\t\t{\n+\t\t\t  n += 2;\n+\t\t\t  level += 1;\n+\t\t\t}\n+\t\t      else if (peek_input (n) == '*'\n+\t\t\t       && peek_input (n + 1) == '/')\n+\t\t\t{\n+\t\t\t  n += 2;\n+\t\t\t  level -= 1;\n+\t\t\t}\n+\t\t      else\n+\t\t\tn++;\n+\t\t    }\n+\t\t}\n+\t      else if (next_char != '[')\n+\t\t{\n+\t\t  // definitely shebang, ignore the first line\n+\t\t  while (current_char != '\\n' && current_char != EOF)\n \t\t    {\n \t\t      current_char = peek_input ();\n \t\t      skip_input ();\n@@ -269,11 +304,17 @@ Lexer::build_token ()\n \t\t  current_column = 1;\n \t\t  // tell line_table that new line starts\n \t\t  line_map->start_line (current_line, max_column_hint);\n-\t\t  continue;\n+\t\t  break;\n \t\t}\n+\t      else\n+\t\tbreak; /* Definitely not a shebang line. */\n \t    }\n \t}\n \n+      // return end of file token if end of file\n+      if (current_char == EOF)\n+\treturn Token::make (END_OF_FILE, loc);\n+\n       // if not end of file, start tokenising\n       switch (current_char)\n \t{"}, {"sha": "136b34371f116f45f5eddf48b957daa2db243b2f", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27b3d34428801397e562b7fcc5ca10b13961f3e1/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27b3d34428801397e562b7fcc5ca10b13961f3e1/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=27b3d34428801397e562b7fcc5ca10b13961f3e1", "patch": "@@ -393,12 +393,11 @@ template <typename ManagedTokenSource>\n AST::Crate\n Parser<ManagedTokenSource>::parse_crate ()\n {\n-  /* TODO: determine if has utf8bom and shebang. Currently, they are eliminated\n-   * by the lexing phase. Neither are useful for the compiler anyway, so maybe a\n+  /* TODO: determine if has utf8bom. Currently, is eliminated\n+   * by the lexing phase. Not useful for the compiler anyway, so maybe a\n    * better idea would be to eliminate\n-   * the has_utf8bom and has_shebang variables from the crate data structure. */\n+   * the has_utf8bom variable from the crate data structure. */\n   bool has_utf8bom = false;\n-  bool has_shebang = false;\n \n   // parse inner attributes\n   AST::AttrVec inner_attrs = parse_inner_attributes ();\n@@ -430,8 +429,7 @@ Parser<ManagedTokenSource>::parse_crate ()\n   for (const auto &error : error_table)\n     error.emit_error ();\n \n-  return AST::Crate (std::move (items), std::move (inner_attrs), has_utf8bom,\n-\t\t     has_shebang);\n+  return AST::Crate (std::move (items), std::move (inner_attrs), has_utf8bom);\n }\n \n // Parse a contiguous block of inner attributes.\n@@ -484,7 +482,7 @@ Parser<ManagedTokenSource>::parse_inner_attribute ()\n   if (lexer.peek_token ()->get_id () != EXCLAM)\n     {\n       Error error (lexer.peek_token ()->get_locus (),\n-\t\t   \"expected %<!%> or %<[%> for inner attribute or shebang\");\n+\t\t   \"expected %<!%> or %<[%> for inner attribute\");\n       add_error (std::move (error));\n \n       return AST::Attribute::create_empty ();"}, {"sha": "37e01b659408e916ee554b4ef355a1164244c7ed", "filename": "gcc/testsuite/rust/compile/torture/not_shebang.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27b3d34428801397e562b7fcc5ca10b13961f3e1/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fnot_shebang.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27b3d34428801397e562b7fcc5ca10b13961f3e1/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fnot_shebang.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fnot_shebang.rs?ref=27b3d34428801397e562b7fcc5ca10b13961f3e1", "patch": "@@ -0,0 +1,3 @@\n+#!\n+[allow(unused)]\n+fn main () { }"}, {"sha": "662f65067497946b7339e9af063cad552c843e1a", "filename": "gcc/testsuite/rust/compile/torture/not_shebang_block_comment.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27b3d34428801397e562b7fcc5ca10b13961f3e1/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fnot_shebang_block_comment.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27b3d34428801397e562b7fcc5ca10b13961f3e1/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fnot_shebang_block_comment.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fnot_shebang_block_comment.rs?ref=27b3d34428801397e562b7fcc5ca10b13961f3e1", "patch": "@@ -0,0 +1 @@\n+#!/*/this/is/a/comment*/[allow(unused)] fn main () { }"}, {"sha": "273ae4e8e2aa75c0b94cf21df4ef02dc5604dfa4", "filename": "gcc/testsuite/rust/compile/torture/not_shebang_comment.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27b3d34428801397e562b7fcc5ca10b13961f3e1/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fnot_shebang_comment.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27b3d34428801397e562b7fcc5ca10b13961f3e1/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fnot_shebang_comment.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fnot_shebang_comment.rs?ref=27b3d34428801397e562b7fcc5ca10b13961f3e1", "patch": "@@ -0,0 +1,3 @@\n+#!//this/is/a/comment\n+[allow(unused)]   \n+fn main () { }"}, {"sha": "86800b14cb325f6bfc95a52d8bba6a7f38340bcc", "filename": "gcc/testsuite/rust/compile/torture/not_shebang_multiline_comment.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27b3d34428801397e562b7fcc5ca10b13961f3e1/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fnot_shebang_multiline_comment.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27b3d34428801397e562b7fcc5ca10b13961f3e1/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fnot_shebang_multiline_comment.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fnot_shebang_multiline_comment.rs?ref=27b3d34428801397e562b7fcc5ca10b13961f3e1", "patch": "@@ -0,0 +1,7 @@\n+#!//this/is/a/comment\n+\n+/* Also a /* nested */\n+   multiline // comment\n+   with some more whitespace after, but then finally a [, so not a real #! line.  */\n+\n+[allow(unused)] fn main () { }"}, {"sha": "6b94a69111a3c7e8a8d04d8496cd4025d943a159", "filename": "gcc/testsuite/rust/compile/torture/not_shebang_spaces.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27b3d34428801397e562b7fcc5ca10b13961f3e1/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fnot_shebang_spaces.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27b3d34428801397e562b7fcc5ca10b13961f3e1/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fnot_shebang_spaces.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fnot_shebang_spaces.rs?ref=27b3d34428801397e562b7fcc5ca10b13961f3e1", "patch": "@@ -0,0 +1,6 @@\n+#!   \n+\n+    [allow(unused)]   \n+\n+        fn main () { }\n+    "}, {"sha": "1c8b9c9a955c5f084e9302716e109ad7daf1deab", "filename": "gcc/testsuite/rust/compile/torture/shebang.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27b3d34428801397e562b7fcc5ca10b13961f3e1/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fshebang.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27b3d34428801397e562b7fcc5ca10b13961f3e1/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fshebang.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fshebang.rs?ref=27b3d34428801397e562b7fcc5ca10b13961f3e1", "patch": "@@ -0,0 +1,3 @@\n+#!/usr/bin/env cat \n+\n+fn main () { }"}, {"sha": "075bc6cf5941d7fb8540df78a4e769599d7f55dd", "filename": "gcc/testsuite/rust/compile/torture/shebang_plus_attr.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27b3d34428801397e562b7fcc5ca10b13961f3e1/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fshebang_plus_attr.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27b3d34428801397e562b7fcc5ca10b13961f3e1/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fshebang_plus_attr.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fshebang_plus_attr.rs?ref=27b3d34428801397e562b7fcc5ca10b13961f3e1", "patch": "@@ -0,0 +1,3 @@\n+#!/usr/bin/env cat \n+#![allow(unused)]\n+fn main () { }"}, {"sha": "ece8a52381c0816376b4b76331015c40e86d2e2c", "filename": "gcc/testsuite/rust/compile/torture/shebang_plus_attr2.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27b3d34428801397e562b7fcc5ca10b13961f3e1/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fshebang_plus_attr2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27b3d34428801397e562b7fcc5ca10b13961f3e1/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fshebang_plus_attr2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fshebang_plus_attr2.rs?ref=27b3d34428801397e562b7fcc5ca10b13961f3e1", "patch": "@@ -0,0 +1,3 @@\n+#!//usr/bin/env cat \n+#![allow(unused)]\n+fn main () { }"}]}