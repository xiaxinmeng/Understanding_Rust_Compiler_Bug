{"sha": "c5df8392c5848c0462558f41cdf6eab31db301cf", "node_id": "C_kwDOANBUbNoAKGM1ZGY4MzkyYzU4NDhjMDQ2MjU1OGY0MWNkZjZlYWIzMWRiMzAxY2Y", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-11-17T08:43:31Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-11-18T07:37:23Z"}, "message": "tree-optimization/107647 - avoid FMA from SLP with -ffp-contract=off\n\nOnly with -ffp-contract=fast we can synthesize FMA operations like\nvfmaddsub231ps, so properly guard the transform in SLP pattern\ndetection.\n\n\tPR tree-optimization/107647\n\t* tree-vect-slp-patterns.cc (addsub_pattern::recognize): Only\n\tallow FMA generation with -ffp-contract=fast for FP types.\n\t(complex_mul_pattern::matches): Likewise.\n\n\t* gcc.target/i386/pr107647.c: New testcase.", "tree": {"sha": "6b85c07744f373070b696c17c2d72d05314c1db2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b85c07744f373070b696c17c2d72d05314c1db2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5df8392c5848c0462558f41cdf6eab31db301cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5df8392c5848c0462558f41cdf6eab31db301cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5df8392c5848c0462558f41cdf6eab31db301cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5df8392c5848c0462558f41cdf6eab31db301cf/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0024bfb228f94e60e06dc32a4983e40a9b90be5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0024bfb228f94e60e06dc32a4983e40a9b90be5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0024bfb228f94e60e06dc32a4983e40a9b90be5"}], "stats": {"total": 32, "additions": 28, "deletions": 4}, "files": [{"sha": "45fcb55d6984743fefd254dbe5e015678650df7f", "filename": "gcc/testsuite/gcc.target/i386/pr107647.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5df8392c5848c0462558f41cdf6eab31db301cf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107647.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5df8392c5848c0462558f41cdf6eab31db301cf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107647.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107647.c?ref=c5df8392c5848c0462558f41cdf6eab31db301cf", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ffp-contract=off -mavx2 -mfma\" } */\n+\n+void cscal(int n, float da_r, float *x)\n+{\n+  for (int i = 0; i < n; i += 4)\n+    {\n+      float temp0  =  da_r * x[i]   - x[i+1];\n+      float temp1  =  da_r * x[i+2] - x[i+3];\n+      x[i+1]       =  da_r * x[i+1] + x[i];\n+      x[i+3]       =  da_r * x[i+3] + x[i+2];\n+      x[i]         =  temp0;\n+      x[i+2]       =  temp1;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-not \"fma\" } } */"}, {"sha": "122d697a809dde263b414e55a406e4d261c4fe6a", "filename": "gcc/tree-vect-slp-patterns.cc", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5df8392c5848c0462558f41cdf6eab31db301cf/gcc%2Ftree-vect-slp-patterns.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5df8392c5848c0462558f41cdf6eab31db301cf/gcc%2Ftree-vect-slp-patterns.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp-patterns.cc?ref=c5df8392c5848c0462558f41cdf6eab31db301cf", "patch": "@@ -1035,8 +1035,11 @@ complex_mul_pattern::matches (complex_operation_t op,\n   auto_vec<slp_tree> left_op, right_op;\n   slp_tree add0 = NULL;\n \n-  /* Check if we may be a multiply add.  */\n+  /* Check if we may be a multiply add.  It's only valid to form FMAs\n+     with -ffp-contract=fast.  */\n   if (!mul0\n+      && (flag_fp_contract_mode == FP_CONTRACT_FAST\n+\t  || !FLOAT_TYPE_P (SLP_TREE_VECTYPE (l0node[0])))\n       && vect_match_expression_p (l0node[0], PLUS_EXPR))\n     {\n       auto vals = SLP_TREE_CHILDREN (l0node[0]);\n@@ -1501,9 +1504,13 @@ addsub_pattern::recognize (slp_tree_to_load_perm_map_t *,\n     }\n \n   /* Now we have either { -, +, -, + ... } (!l0add_p) or { +, -, +, - ... }\n-     (l0add_p), see whether we have FMA variants.  */\n-  if (!l0add_p\n-      && vect_match_expression_p (SLP_TREE_CHILDREN (l0node)[0], MULT_EXPR))\n+     (l0add_p), see whether we have FMA variants.  We can only form FMAs\n+     if allowed via -ffp-contract=fast.  */\n+  if (flag_fp_contract_mode != FP_CONTRACT_FAST\n+      && FLOAT_TYPE_P (SLP_TREE_VECTYPE (l0node)))\n+    ;\n+  else if (!l0add_p\n+\t   && vect_match_expression_p (SLP_TREE_CHILDREN (l0node)[0], MULT_EXPR))\n     {\n       /* (c * d) -+ a */\n       if (vect_pattern_validate_optab (IFN_VEC_FMADDSUB, node))"}]}