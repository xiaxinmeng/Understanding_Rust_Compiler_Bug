{"sha": "4cb1359729c72f65a8b6da12af6baab74082dd3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNiMTM1OTcyOWM3MmY2NWE4YjZkYTEyYWY2YmFhYjc0MDgyZGQzZg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2013-10-15T14:15:07Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2013-10-15T14:15:07Z"}, "message": "ipa-utils.h (ipa_edge_within_scc): Declare.\n\n2013-10-15  Martin Jambor  <mjambor@suse.cz>\n\n\t* ipa-utils.h (ipa_edge_within_scc): Declare.\n\t* ipa-cp.c (edge_within_scc): Moved...\n\t* ipa-utils.c (ipa_edge_within_scc): ...here.  Updated all callers.\n\nFrom-SVN: r203607", "tree": {"sha": "034042b55baa73cd22e73f36b314087fb4581427", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/034042b55baa73cd22e73f36b314087fb4581427"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cb1359729c72f65a8b6da12af6baab74082dd3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cb1359729c72f65a8b6da12af6baab74082dd3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cb1359729c72f65a8b6da12af6baab74082dd3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cb1359729c72f65a8b6da12af6baab74082dd3f/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2e2206faab182f079bc6d6019f7872820d830bee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e2206faab182f079bc6d6019f7872820d830bee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e2206faab182f079bc6d6019f7872820d830bee"}], "stats": {"total": 53, "additions": 30, "deletions": 23}, "files": [{"sha": "63c6cd87e4a50b93574c59493517a1f0b48f688c", "filename": "ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cb1359729c72f65a8b6da12af6baab74082dd3f/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cb1359729c72f65a8b6da12af6baab74082dd3f/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=4cb1359729c72f65a8b6da12af6baab74082dd3f", "patch": "@@ -1,3 +1,9 @@\n+2013-10-15  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-utils.h (ipa_edge_within_scc): Declare.\n+\t* ipa-cp.c (edge_within_scc): Moved...\n+\t* ipa-utils.c (ipa_edge_within_scc): ...here.  Updated all callers.\n+\n 2013-01-10  Joern Rennecke  <joern.rennecke@embecosm.com>\n \n \tImport from savannah.gnu.org:"}, {"sha": "54afbfc22e1728695e7cb74cd13ff3e7bdb06ff5", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 7, "deletions": 23, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cb1359729c72f65a8b6da12af6baab74082dd3f/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cb1359729c72f65a8b6da12af6baab74082dd3f/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=4cb1359729c72f65a8b6da12af6baab74082dd3f", "patch": "@@ -287,22 +287,6 @@ ipa_lat_is_single_const (struct ipcp_lattice *lat)\n     return true;\n }\n \n-/* Return true iff the CS is an edge within a strongly connected component as\n-   computed by ipa_reduced_postorder.  */\n-\n-static inline bool\n-edge_within_scc (struct cgraph_edge *cs)\n-{\n-  struct ipa_dfs_info *caller_dfs = (struct ipa_dfs_info *) cs->caller->symbol.aux;\n-  struct ipa_dfs_info *callee_dfs;\n-  struct cgraph_node *callee = cgraph_function_node (cs->callee, NULL);\n-\n-  callee_dfs = (struct ipa_dfs_info *) callee->symbol.aux;\n-  return (caller_dfs\n-\t  && callee_dfs\n-\t  && caller_dfs->scc_no == callee_dfs->scc_no);\n-}\n-\n /* Print V which is extracted from a value in a lattice to F.  */\n \n static void\n@@ -957,7 +941,7 @@ add_value_to_lattice (struct ipcp_lattice *lat, tree newval,\n   for (val = lat->values; val; val = val->next)\n     if (values_equal_for_ipcp_p (val->value, newval))\n       {\n-\tif (edge_within_scc (cs))\n+\tif (ipa_edge_within_scc (cs))\n \t  {\n \t    struct ipcp_value_source *s;\n \t    for (s = val->sources; s ; s = s->next)\n@@ -1030,7 +1014,7 @@ propagate_vals_accross_pass_through (struct cgraph_edge *cs,\n      are arithmetic functions with circular dependencies, there is infinite\n      number of them and we would just make lattices bottom.  */\n   if ((ipa_get_jf_pass_through_operation (jfunc) != NOP_EXPR)\n-      and edge_within_scc (cs))\n+      && ipa_edge_within_scc (cs))\n     ret = set_lattice_contains_variable (dest_lat);\n   else\n     for (src_val = src_lat->values; src_val; src_val = src_val->next)\n@@ -1061,7 +1045,7 @@ propagate_vals_accross_ancestor (struct cgraph_edge *cs,\n   struct ipcp_value *src_val;\n   bool ret = false;\n \n-  if (edge_within_scc (cs))\n+  if (ipa_edge_within_scc (cs))\n     return set_lattice_contains_variable (dest_lat);\n \n   for (src_val = src_lat->values; src_val; src_val = src_val->next)\n@@ -2137,7 +2121,7 @@ propagate_constants_topo (struct topo_info *topo)\n \t  struct cgraph_edge *cs;\n \n \t  for (cs = v->callees; cs; cs = cs->next_callee)\n-\t    if (edge_within_scc (cs)\n+\t    if (ipa_edge_within_scc (cs)\n \t\t&& propagate_constants_accross_call (cs))\n \t      push_node_to_stack (topo, cs->callee);\n \t  v = pop_node_from_stack (topo);\n@@ -2154,7 +2138,7 @@ propagate_constants_topo (struct topo_info *topo)\n \t    estimate_local_effects (v);\n \t    add_all_node_vals_to_toposort (v);\n \t    for (cs = v->callees; cs; cs = cs->next_callee)\n-\t      if (!edge_within_scc (cs))\n+\t      if (!ipa_edge_within_scc (cs))\n \t\tpropagate_constants_accross_call (cs);\n \t  }\n       cycle_nodes.release ();\n@@ -3470,7 +3454,7 @@ spread_undeadness (struct cgraph_node *node)\n   struct cgraph_edge *cs;\n \n   for (cs = node->callees; cs; cs = cs->next_callee)\n-    if (edge_within_scc (cs))\n+    if (ipa_edge_within_scc (cs))\n       {\n \tstruct cgraph_node *callee;\n \tstruct ipa_node_params *info;\n@@ -3501,7 +3485,7 @@ has_undead_caller_from_outside_scc_p (struct cgraph_node *node,\n \t\t\t\t\thas_undead_caller_from_outside_scc_p,\n \t\t\t\t\tNULL, true))\n       return true;\n-    else if (!edge_within_scc (cs)\n+    else if (!ipa_edge_within_scc (cs)\n \t     && !IPA_NODE_REF (cs->caller)->node_dead)\n       return true;\n   return false;"}, {"sha": "5802884afdf6aef136a5387aad08760b01525959", "filename": "gcc/ipa-utils.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cb1359729c72f65a8b6da12af6baab74082dd3f/gcc%2Fipa-utils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cb1359729c72f65a8b6da12af6baab74082dd3f/gcc%2Fipa-utils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-utils.c?ref=4cb1359729c72f65a8b6da12af6baab74082dd3f", "patch": "@@ -253,6 +253,22 @@ ipa_get_nodes_in_cycle (struct cgraph_node *node)\n   return v;\n }\n \n+/* Return true iff the CS is an edge within a strongly connected component as\n+   computed by ipa_reduced_postorder.  */\n+\n+bool\n+ipa_edge_within_scc (struct cgraph_edge *cs)\n+{\n+  struct ipa_dfs_info *caller_dfs = (struct ipa_dfs_info *) cs->caller->symbol.aux;\n+  struct ipa_dfs_info *callee_dfs;\n+  struct cgraph_node *callee = cgraph_function_node (cs->callee, NULL);\n+\n+  callee_dfs = (struct ipa_dfs_info *) callee->symbol.aux;\n+  return (caller_dfs\n+\t  && callee_dfs\n+\t  && caller_dfs->scc_no == callee_dfs->scc_no);\n+}\n+\n struct postorder_stack\n {\n   struct cgraph_node *node;"}, {"sha": "374ac2a3effd9cf13847cee5c778d9a58e3f9636", "filename": "gcc/ipa-utils.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cb1359729c72f65a8b6da12af6baab74082dd3f/gcc%2Fipa-utils.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cb1359729c72f65a8b6da12af6baab74082dd3f/gcc%2Fipa-utils.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-utils.h?ref=4cb1359729c72f65a8b6da12af6baab74082dd3f", "patch": "@@ -42,6 +42,7 @@ int ipa_reduced_postorder (struct cgraph_node **, bool, bool,\n \t\t\t  bool (*ignore_edge) (struct cgraph_edge *));\n void ipa_free_postorder_info (void);\n vec<cgraph_node_ptr> ipa_get_nodes_in_cycle (struct cgraph_node *);\n+bool ipa_edge_within_scc (struct cgraph_edge *);\n int ipa_reverse_postorder (struct cgraph_node **);\n tree get_base_var (tree);\n void ipa_merge_profiles (struct cgraph_node *dst,"}]}