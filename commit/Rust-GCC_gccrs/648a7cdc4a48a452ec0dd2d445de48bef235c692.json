{"sha": "648a7cdc4a48a452ec0dd2d445de48bef235c692", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ4YTdjZGM0YTQ4YTQ1MmVjMGRkMmQ0NDVkZTQ4YmVmMjM1YzY5Mg==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-11-21T19:17:52Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-11-21T19:17:52Z"}, "message": "avr.c (output_reload_in_const): Loading a byte with 0 must not affect cc0.\n\n\t* config/avr/avr.c (output_reload_in_const): Loading a byte with 0\n\tmust not affect cc0.\n\t* config/avr/avr.md (*movhi, *movpsi, *movsi, *movsf): Zero to any\n\tregister does not change cc0. Same for any constant to ld-register.\n\nFrom-SVN: r181592", "tree": {"sha": "1a2ac0e53f5bfe74e97753eaf917a0ee66d4e4df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a2ac0e53f5bfe74e97753eaf917a0ee66d4e4df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/648a7cdc4a48a452ec0dd2d445de48bef235c692", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/648a7cdc4a48a452ec0dd2d445de48bef235c692", "html_url": "https://github.com/Rust-GCC/gccrs/commit/648a7cdc4a48a452ec0dd2d445de48bef235c692", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/648a7cdc4a48a452ec0dd2d445de48bef235c692/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc9945a4f9b3978fbd6065fcbfc940d69602db18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc9945a4f9b3978fbd6065fcbfc940d69602db18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc9945a4f9b3978fbd6065fcbfc940d69602db18"}], "stats": {"total": 32, "additions": 22, "deletions": 10}, "files": [{"sha": "ceebe84fb2b950536bbe0bb18e84ba2db640d96f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/648a7cdc4a48a452ec0dd2d445de48bef235c692/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/648a7cdc4a48a452ec0dd2d445de48bef235c692/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=648a7cdc4a48a452ec0dd2d445de48bef235c692", "patch": "@@ -1,3 +1,10 @@\n+2011-11-21  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* config/avr/avr.c (output_reload_in_const): Loading a byte with 0\n+\tmust not affect cc0.\n+\t* config/avr/avr.md (*movhi, *movpsi, *movsi, *movsf): Zero to any\n+\tregister does not change cc0. Same for any constant to ld-register.\n+\n 2011-11-21  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/mmx.md (unspec) <UNSPEC_MOVNTQ, UNSPEC_PFRCP,"}, {"sha": "543bb9c56c154d1b9b0c3da22e20a575cb54ffa1", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/648a7cdc4a48a452ec0dd2d445de48bef235c692/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/648a7cdc4a48a452ec0dd2d445de48bef235c692/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=648a7cdc4a48a452ec0dd2d445de48bef235c692", "patch": "@@ -8836,7 +8836,13 @@ avr_regno_mode_code_ok_for_base_p (int regno,\n    LEN != NULL: set *LEN to the length of the instruction sequence\n                 (in words) printed with LEN = NULL.\n    If CLEAR_P is true, OP[0] had been cleard to Zero already.\n-   If CLEAR_P is false, nothing is known about OP[0].  */\n+   If CLEAR_P is false, nothing is known about OP[0].\n+\n+   The effect on cc0 is as follows:\n+\n+   Load 0 to any register          : NONE\n+   Load ld register with any value : NONE\n+   Anything else:                  : CLOBBER  */\n \n static void\n output_reload_in_const (rtx *op, rtx clobber_reg, int *len, bool clear_p)\n@@ -8914,7 +8920,7 @@ output_reload_in_const (rtx *op, rtx clobber_reg, int *len, bool clear_p)\n           xop[2] = clobber_reg;\n \n           if (n >= 2 + (avr_current_arch->n_segments > 1))\n-            avr_asm_len (\"clr %0\", xop, len, 1);\n+            avr_asm_len (\"mov %0,__zero_reg__\", xop, len, 1);\n           else\n             avr_asm_len (asm_code[n][ldreg_p], xop, len, ldreg_p ? 1 : 2);\n           continue;\n@@ -8946,14 +8952,13 @@ output_reload_in_const (rtx *op, rtx clobber_reg, int *len, bool clear_p)\n             }\n         }\n \n-      /* Use CLR to zero a value so that cc0 is set as expected\n-         for zero.  */\n+      /* Don't use CLR so that cc0 is set as expected.  */\n       \n       if (ival[n] == 0)\n         {\n           if (!clear_p)\n-            avr_asm_len (\"clr %0\", &xdest[n], len, 1);\n-          \n+            avr_asm_len (ldreg_p ? \"ldi %0,0\" : \"mov %0,__zero_reg__\",\n+                         &xdest[n], len, 1);\n           continue;\n         }\n "}, {"sha": "73632d880f78022792904562a931c33f886c9a47", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/648a7cdc4a48a452ec0dd2d445de48bef235c692/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/648a7cdc4a48a452ec0dd2d445de48bef235c692/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=648a7cdc4a48a452ec0dd2d445de48bef235c692", "patch": "@@ -649,7 +649,7 @@\n   }\n   [(set_attr \"length\" \"2,2,6,7,2,6,5,2\")\n    (set_attr \"adjust_len\" \"mov16\")\n-   (set_attr \"cc\" \"none,clobber,clobber,clobber,none,clobber,none,none\")])\n+   (set_attr \"cc\" \"none,none,clobber,clobber,none,clobber,none,none\")])\n \n (define_peephole2 ; movw\n   [(set (match_operand:QI 0 \"even_register_operand\" \"\")\n@@ -752,7 +752,7 @@\n   }\n   [(set_attr \"length\" \"3,3,8,9,4,10\")\n    (set_attr \"adjust_len\" \"mov24\")\n-   (set_attr \"cc\" \"none,set_zn,clobber,clobber,clobber,clobber\")])\n+   (set_attr \"cc\" \"none,none,clobber,clobber,none,clobber\")])\n   \n ;;==========================================================================\n ;; move double word (32 bit)\n@@ -793,7 +793,7 @@\n   }\n   [(set_attr \"length\" \"4,4,8,9,4,10\")\n    (set_attr \"adjust_len\" \"mov32\")\n-   (set_attr \"cc\" \"none,set_zn,clobber,clobber,clobber,clobber\")])\n+   (set_attr \"cc\" \"none,none,clobber,clobber,none,clobber\")])\n \n ;; fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n ;; move floating point numbers (32 bit)\n@@ -809,7 +809,7 @@\n   }\n   [(set_attr \"length\" \"4,4,8,9,4,10\")\n    (set_attr \"adjust_len\" \"mov32\")\n-   (set_attr \"cc\" \"none,set_zn,clobber,clobber,clobber,clobber\")])\n+   (set_attr \"cc\" \"none,none,clobber,clobber,none,clobber\")])\n \n (define_peephole2 ; *reload_insf\n   [(match_scratch:QI 2 \"d\")"}]}