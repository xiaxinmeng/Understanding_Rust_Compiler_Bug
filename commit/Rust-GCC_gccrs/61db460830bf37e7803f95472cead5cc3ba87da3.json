{"sha": "61db460830bf37e7803f95472cead5cc3ba87da3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFkYjQ2MDgzMGJmMzdlNzgwM2Y5NTQ3MmNlYWQ1Y2MzYmE4N2RhMw==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2001-01-09T03:10:13Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2001-01-09T03:10:13Z"}, "message": "Use init/mark/free machine status functions.\n\nFix compile time warnings building varasm.o\nDefine USER_LABEL_PREFIX, undefine ASM_OUTPUT_LABELREF\n\nFrom-SVN: r38815", "tree": {"sha": "7bbc36c914d89b60b410cb1330e86a534e642f13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7bbc36c914d89b60b410cb1330e86a534e642f13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61db460830bf37e7803f95472cead5cc3ba87da3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61db460830bf37e7803f95472cead5cc3ba87da3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61db460830bf37e7803f95472cead5cc3ba87da3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61db460830bf37e7803f95472cead5cc3ba87da3/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4a70b13a4c3ec96305f3f724aa8cfc706c3c30e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a70b13a4c3ec96305f3f724aa8cfc706c3c30e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a70b13a4c3ec96305f3f724aa8cfc706c3c30e7"}], "stats": {"total": 108, "additions": 62, "deletions": 46}, "files": [{"sha": "c0279fe07ae5bc8bb389b69933b0734f2d265265", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61db460830bf37e7803f95472cead5cc3ba87da3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61db460830bf37e7803f95472cead5cc3ba87da3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61db460830bf37e7803f95472cead5cc3ba87da3", "patch": "@@ -1,3 +1,20 @@\n+2001-01-08  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/v850/v850.c (ra_rtx): Delete.\n+        (v850_save_machine_status): Delete.\n+\t(v850_restore_machine_status): Delete.\n+\t(v850_init_machine_status): New function.\n+\t(v850_mark_machine_status): New function.\n+\t(v850_free_machine_status): New function.\n+\t(v850_return_addr): Use ra_rtx field in machine structure.\n+\t(v850_init_expanders): Use new functions.\n+\n+\t* config/v850/v850-protos.h: Fix prototypes for v850_output_*\n+\t* config/v850/v850.c: Change arguments to v850_output+* functions\n+\tto take a const char *, to avoid compile time warning.\n+\t* config/v850/v850.h (ASM_OUTPUT_LABELREF): Undefine, not needed.\n+\t(USER_LABEL_PREFIX): Redefine.\n+\t\n 2000-01-08  Jim Wilson  <wilson@redhat.com>\n \n \t* sched-rgn.c (BITSET_ADD, BITSET_REMOVE, bitset_member): Cast"}, {"sha": "8bc38711961784daaddc0919b096a1c097ae0bf2", "filename": "gcc/config/v850/v850-protos.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61db460830bf37e7803f95472cead5cc3ba87da3/gcc%2Fconfig%2Fv850%2Fv850-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61db460830bf37e7803f95472cead5cc3ba87da3/gcc%2Fconfig%2Fv850%2Fv850-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850-protos.h?ref=61db460830bf37e7803f95472cead5cc3ba87da3", "patch": "@@ -76,9 +76,9 @@ extern int    v850_valid_machine_decl_attribute  PARAMS ((tree, tree, tree));\n extern void   v850_encode_data_area         PARAMS ((tree));\n extern void   v850_set_default_decl_attr    PARAMS ((tree));\n extern int    v850_interrupt_function_p     PARAMS ((tree));\n-extern void   v850_output_aligned_bss       PARAMS ((FILE *, tree, char *, int, int));\n-extern void   v850_output_common            PARAMS ((FILE *, tree, char *, int, int));\n-extern void   v850_output_local             PARAMS ((FILE *, tree, char *, int, int));\n+extern void   v850_output_aligned_bss       PARAMS ((FILE *, tree, const char *, int, int));\n+extern void   v850_output_common            PARAMS ((FILE *, tree, const char *, int, int));\n+extern void   v850_output_local             PARAMS ((FILE *, tree, const char *, int, int));\n extern v850_data_area v850_get_data_area    PARAMS ((tree));\n #ifdef HAVE_MACHINE_MODES\n extern int    function_arg_partial_nregs    PARAMS ((CUMULATIVE_ARGS *, Mmode, tree, int));"}, {"sha": "ffc2a2474de0ad925fe8e1e0ad5736e2526dc752", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61db460830bf37e7803f95472cead5cc3ba87da3/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61db460830bf37e7803f95472cead5cc3ba87da3/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=61db460830bf37e7803f95472cead5cc3ba87da3", "patch": "@@ -47,14 +47,14 @@ Boston, MA 02111-1307, USA.  */\n #endif\n \n /* Function prototypes for stupid compilers:  */\n-static void const_double_split\n-  PARAMS ((rtx, HOST_WIDE_INT *, HOST_WIDE_INT *));\n-static int  const_costs_int        PARAMS ((HOST_WIDE_INT, int));\n-static void substitute_ep_register PARAMS ((rtx, rtx, int, int, rtx *, rtx *));\n-static int  ep_memory_offset       PARAMS ((enum machine_mode, int));\n-static void v850_set_data_area     PARAMS ((tree, v850_data_area));\n-static void v850_save_machine_status    PARAMS ((struct function *));\n-static void v850_restore_machine_status PARAMS ((struct function *));\n+static void const_double_split       PARAMS ((rtx, HOST_WIDE_INT *, HOST_WIDE_INT *));\n+static int  const_costs_int          PARAMS ((HOST_WIDE_INT, int));\n+static void substitute_ep_register   PARAMS ((rtx, rtx, int, int, rtx *, rtx *));\n+static int  ep_memory_offset         PARAMS ((enum machine_mode, int));\n+static void v850_set_data_area       PARAMS ((tree, v850_data_area));\n+static void v850_init_machine_status PARAMS ((struct function *));\n+static void v850_mark_machine_status PARAMS ((struct function *));\n+static void v850_free_machine_status PARAMS ((struct function *));\n \n /* True if the current function has anonymous arguments.  */\n int current_function_anonymous_args;\n@@ -1153,7 +1153,7 @@ Saved %d bytes (%d uses of register %s) in function %s, starting as insn %d, end\n    as a C statement to act on the code starting at INSN.\n \n    On the 850, we use it to implement the -mep mode to copy heavily used\n-   pointers to ep to use the implicit addressing */\n+   pointers to ep to use the implicit addressing.  */\n \n void v850_reorg (start_insn)\n      rtx start_insn;\n@@ -1173,7 +1173,7 @@ void v850_reorg (start_insn)\n   rtx insn;\n   rtx pattern;\n \n-  /* If not ep mode, just return now */\n+  /* If not ep mode, just return now.  */\n   if (!TARGET_EP)\n     return;\n \n@@ -2556,7 +2556,7 @@ void\n v850_output_aligned_bss (file, decl, name, size, align)\n      FILE * file;\n      tree decl;\n-     char * name;\n+     const char * name;\n      int size;\n      int align;\n {\n@@ -2596,7 +2596,7 @@ void\n v850_output_common (file, decl, name, size, align)\n      FILE * file;\n      tree decl;\n-     char * name;\n+     const char * name;\n      int size;\n      int align;\n {\n@@ -2635,7 +2635,7 @@ void\n v850_output_local (file, decl, name, size, align)\n      FILE * file;\n      tree decl;\n-     char * name;\n+     const char * name;\n      int size;\n      int align;\n {\n@@ -2788,29 +2788,31 @@ v850_va_arg (valist, type)\n }\n \f\n /* Functions to save and restore machine-specific function data.  */\n-\n-static rtx ra_rtx;\n-\n struct machine_function\n {\n   /* Records __builtin_return address.  */\n   struct rtx_def * ra_rtx;\n };\n \n static void\n-v850_save_machine_status (p)\n+v850_init_machine_status (p)\n      struct function * p;\n {\n   p->machine =\n     (struct machine_function *) xcalloc (1, sizeof (struct machine_function));\n-  p->machine->ra_rtx = ra_rtx;\n }\n \n static void\n-v850_restore_machine_status (p)\n+v850_mark_machine_status (p)\n+     struct function * p;\n+{\n+  ggc_mark_rtx (p->machine->ra_rtx);\n+}\n+\n+static void\n+v850_free_machine_status (p)\n      struct function * p;\n {\n-  ra_rtx = p->machine->ra_rtx;\n   free (p->machine);\n   p->machine = NULL;\n }\n@@ -2825,35 +2827,33 @@ v850_return_addr (count)\n   if (count != 0)\n     return const0_rtx;\n \n-  if (ra_rtx == NULL)\n+  if (cfun->machine->ra_rtx == NULL)\n     {\n       rtx init;\n       \n       /* No rtx yet.  Invent one, and initialize it for r31 (lp) in \n        the prologue.  */\n-      ra_rtx = gen_reg_rtx (Pmode);\n+      cfun->machine->ra_rtx = gen_reg_rtx (Pmode);\n       \n       init = gen_rtx_REG (Pmode, LINK_POINTER_REGNUM);\n \n-      init = gen_rtx_SET (VOIDmode, ra_rtx, init);\n+      init = gen_rtx_SET (VOIDmode, cfun->machine->ra_rtx, init);\n \n       /* Emit the insn to the prologue with the other argument copies.  */\n       push_topmost_sequence ();\n       emit_insn_after (init, get_insns ());\n       pop_topmost_sequence ();\n     }\n \n-  debug_rtx (ra_rtx);\n-  return ra_rtx;\n+  return cfun->machine->ra_rtx;\n }\n \n /* Do anything needed before RTL is emitted for each function.  */\n \n void\n v850_init_expanders ()\n {\n-  ra_rtx = NULL;\n-\n-  save_machine_status    = v850_save_machine_status;\n-  restore_machine_status = v850_restore_machine_status;\n+  init_machine_status = v850_init_machine_status;\n+  mark_machine_status = v850_mark_machine_status;\n+  free_machine_status = v850_free_machine_status;\n }"}, {"sha": "3c364b8a89d195e97cc65a9c9db6de90c8449e89", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61db460830bf37e7803f95472cead5cc3ba87da3/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61db460830bf37e7803f95472cead5cc3ba87da3/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=61db460830bf37e7803f95472cead5cc3ba87da3", "patch": "@@ -1262,6 +1262,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define ASM_APP_OFF \"#NO_APP\\n\"\n \n+#undef  USER_LABEL_PREFIX\n+#define USER_LABEL_PREFIX \"_\"\n+\n /* This is how to output an assembler line defining a `double' constant.\n    It is .double or .float, depending.  */\n \n@@ -1341,19 +1344,15 @@ do { char dstr[30];\t\t\t\t\t\\\n /* This is how to output a command to make the user-level label named NAME\n    defined for reference from other files.  */\n \n-#define ASM_GLOBALIZE_LABEL(FILE, NAME)\t\\\n-  do { fputs (\"\\t.global \", FILE); assemble_name (FILE, NAME); fputs (\"\\n\", FILE);} while (0)\n-\n-/* This is how to output a reference to a user-level label named NAME.\n-   `assemble_name' uses this.  */\n+#define ASM_GLOBALIZE_LABEL(FILE, NAME)\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      fputs (\"\\t.global \", FILE);\t\t\\\n+      assemble_name (FILE, NAME);\t\t\\\n+      fputs (\"\\n\", FILE);\t\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n \n-#undef ASM_OUTPUT_LABELREF\n-#define ASM_OUTPUT_LABELREF(FILE, NAME)\t          \\\n-  do {                                            \\\n-  const char * real_name;                         \\\n-  STRIP_NAME_ENCODING (real_name, (NAME));        \\\n-  fprintf (FILE, \"_%s\", real_name);               \\\n-  } while (0)           \n \n /* Store in OUTPUT a string (made with alloca) containing\n    an assembler-name for a local static variable named NAME.\n@@ -1608,11 +1607,11 @@ extern union tree_node * GHS_current_section_names [(int) COUNT_OF_GHS_SECTION_K\n #define SDA_NAME_P(NAME) (*(NAME) == SDA_NAME_FLAG_CHAR)\n \n #define ENCODED_NAME_P(SYMBOL_NAME)    \\\n-  (ZDA_NAME_P (SYMBOL_NAME)            \\\n+  (   ZDA_NAME_P (SYMBOL_NAME)         \\\n    || TDA_NAME_P (SYMBOL_NAME)         \\\n    || SDA_NAME_P (SYMBOL_NAME))\n \n-#define STRIP_NAME_ENCODING(VAR,SYMBOL_NAME) \\\n+#define STRIP_NAME_ENCODING(VAR, SYMBOL_NAME) \\\n      (VAR) = (SYMBOL_NAME) + (ENCODED_NAME_P (SYMBOL_NAME) || *(SYMBOL_NAME) == '*')\n \n /* Define this if you have defined special-purpose predicates in the"}]}