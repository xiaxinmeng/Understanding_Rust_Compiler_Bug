{"sha": "deff3e5e46d740c9b857bf96daf9f9206bd22ea7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGVmZjNlNWU0NmQ3NDBjOWI4NTdiZjk2ZGFmOWY5MjA2YmQyMmVhNw==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2008-08-20T14:27:50Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-20T14:27:50Z"}, "message": "exp_ch4.adb (Expand_N_And_Then, [...]): Improve constant folding.\n\n2008-08-20  Bob Duff  <duff@adacore.com>\n\n\t* exp_ch4.adb (Expand_N_And_Then, Expand_N_Or_Else): Improve constant\n\tfolding. We were folding things like \"False and then ...\", but not\n\t\"X and then ...\" where X is a constant whose value is known at compile\n\ttime.\n\nFrom-SVN: r139304", "tree": {"sha": "c08133b942bdfbbdc34891f607732e710e1a692f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c08133b942bdfbbdc34891f607732e710e1a692f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/deff3e5e46d740c9b857bf96daf9f9206bd22ea7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/deff3e5e46d740c9b857bf96daf9f9206bd22ea7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/deff3e5e46d740c9b857bf96daf9f9206bd22ea7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/deff3e5e46d740c9b857bf96daf9f9206bd22ea7/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ffafb51e7f4f509491b7637145ecc35f3ee73361", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffafb51e7f4f509491b7637145ecc35f3ee73361", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffafb51e7f4f509491b7637145ecc35f3ee73361"}], "stats": {"total": 42, "additions": 20, "deletions": 22}, "files": [{"sha": "c0c20416276dcc640a6d93fe0648bafd9c0f0086", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deff3e5e46d740c9b857bf96daf9f9206bd22ea7/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deff3e5e46d740c9b857bf96daf9f9206bd22ea7/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=deff3e5e46d740c9b857bf96daf9f9206bd22ea7", "patch": "@@ -3591,34 +3591,33 @@ package body Exp_Ch4 is\n          Set_Etype (N, Standard_Boolean);\n       end if;\n \n-      --  Check for cases of left argument is True or False\n+      --  Check for cases where left argument is known to be True or False\n \n-      if Nkind (Left) = N_Identifier then\n+      if Compile_Time_Known_Value (Left) then\n \n          --  If left argument is True, change (True and then Right) to Right.\n          --  Any actions associated with Right will be executed unconditionally\n          --  and can thus be inserted into the tree unconditionally.\n \n-         if Entity (Left) = Standard_True then\n+         if Expr_Value_E (Left) = Standard_True then\n             if Present (Actions (N)) then\n                Insert_Actions (N, Actions (N));\n             end if;\n \n             Rewrite (N, Right);\n-            Adjust_Result_Type (N, Typ);\n-            return;\n \n          --  If left argument is False, change (False and then Right) to False.\n          --  In this case we can forget the actions associated with Right,\n          --  since they will never be executed.\n \n-         elsif Entity (Left) = Standard_False then\n+         else pragma Assert (Expr_Value_E (Left) = Standard_False);\n             Kill_Dead_Code (Right);\n             Kill_Dead_Code (Actions (N));\n             Rewrite (N, New_Occurrence_Of (Standard_False, Loc));\n-            Adjust_Result_Type (N, Typ);\n-            return;\n          end if;\n+\n+         Adjust_Result_Type (N, Typ);\n+         return;\n       end if;\n \n       --  If Actions are present, we expand\n@@ -3650,19 +3649,19 @@ package body Exp_Ch4 is\n \n       --  No actions present, check for cases of right argument True/False\n \n-      if Nkind (Right) = N_Identifier then\n+      if Compile_Time_Known_Value (Right) then\n \n          --  Change (Left and then True) to Left. Note that we know there are\n          --  no actions associated with the True operand, since we just checked\n          --  for this case above.\n \n-         if Entity (Right) = Standard_True then\n+         if Expr_Value_E (Right) = Standard_True then\n             Rewrite (N, Left);\n \n          --  Change (Left and then False) to False, making sure to preserve any\n          --  side effects associated with the Left operand.\n \n-         elsif Entity (Right) = Standard_False then\n+         else pragma Assert (Expr_Value_E (Right) = Standard_False);\n             Remove_Side_Effects (Left);\n             Rewrite\n               (N, New_Occurrence_Of (Standard_False, Loc));\n@@ -6707,34 +6706,33 @@ package body Exp_Ch4 is\n          Set_Etype (N, Standard_Boolean);\n       end if;\n \n-      --  Check for cases of left argument is True or False\n+      --  Check for cases where left argument is known to be True or False\n \n-      if Nkind (Left) = N_Identifier then\n+      if Compile_Time_Known_Value (Left) then\n \n          --  If left argument is False, change (False or else Right) to Right.\n          --  Any actions associated with Right will be executed unconditionally\n          --  and can thus be inserted into the tree unconditionally.\n \n-         if Entity (Left) = Standard_False then\n+         if Expr_Value_E (Left) = Standard_False then\n             if Present (Actions (N)) then\n                Insert_Actions (N, Actions (N));\n             end if;\n \n             Rewrite (N, Right);\n-            Adjust_Result_Type (N, Typ);\n-            return;\n \n          --  If left argument is True, change (True and then Right) to True. In\n          --  this case we can forget the actions associated with Right, since\n          --  they will never be executed.\n \n-         elsif Entity (Left) = Standard_True then\n+         else pragma Assert (Expr_Value_E (Left) = Standard_True);\n             Kill_Dead_Code (Right);\n             Kill_Dead_Code (Actions (N));\n             Rewrite (N, New_Occurrence_Of (Standard_True, Loc));\n-            Adjust_Result_Type (N, Typ);\n-            return;\n          end if;\n+\n+         Adjust_Result_Type (N, Typ);\n+         return;\n       end if;\n \n       --  If Actions are present, we expand\n@@ -6766,19 +6764,19 @@ package body Exp_Ch4 is\n \n       --  No actions present, check for cases of right argument True/False\n \n-      if Nkind (Right) = N_Identifier then\n+      if Compile_Time_Known_Value (Right) then\n \n          --  Change (Left or else False) to Left. Note that we know there are\n          --  no actions associated with the True operand, since we just checked\n          --  for this case above.\n \n-         if Entity (Right) = Standard_False then\n+         if Expr_Value_E (Right) = Standard_False then\n             Rewrite (N, Left);\n \n          --  Change (Left or else True) to True, making sure to preserve any\n          --  side effects associated with the Left operand.\n \n-         elsif Entity (Right) = Standard_True then\n+         else pragma Assert (Expr_Value_E (Right) = Standard_True);\n             Remove_Side_Effects (Left);\n             Rewrite\n               (N, New_Occurrence_Of (Standard_True, Loc));"}]}