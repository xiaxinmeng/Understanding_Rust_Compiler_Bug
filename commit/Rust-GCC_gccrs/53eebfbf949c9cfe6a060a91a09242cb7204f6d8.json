{"sha": "53eebfbf949c9cfe6a060a91a09242cb7204f6d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNlZWJmYmY5NDljOWNmZTZhMDYwYTkxYTA5MjQyY2I3MjA0ZjZkOA==", "commit": {"author": {"name": "Jim Meyering", "email": "meyering@gcc.gnu.org", "date": "2011-04-20T18:18:43Z"}, "committer": {"name": "Jim Meyering", "email": "meyering@gcc.gnu.org", "date": "2011-04-20T18:18:43Z"}, "message": "discourage unnecessary use of if before free\n\n* README.Portability: Explain why \"if (P) free (P)\" is best avoided.\n\nFrom-SVN: r172784", "tree": {"sha": "383467c3fd67db83bd7cf20b900410bf5d8b1a80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/383467c3fd67db83bd7cf20b900410bf5d8b1a80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53eebfbf949c9cfe6a060a91a09242cb7204f6d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53eebfbf949c9cfe6a060a91a09242cb7204f6d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53eebfbf949c9cfe6a060a91a09242cb7204f6d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53eebfbf949c9cfe6a060a91a09242cb7204f6d8/comments", "author": null, "committer": null, "parents": [{"sha": "6788475ac17e1c9ed67dddac0e3a519cccf0a017", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6788475ac17e1c9ed67dddac0e3a519cccf0a017", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6788475ac17e1c9ed67dddac0e3a519cccf0a017"}], "stats": {"total": 27, "additions": 20, "deletions": 7}, "files": [{"sha": "4101a2f7b4240e998f83f5bd61583b6c92b33cac", "filename": "gcc/README.Portability", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53eebfbf949c9cfe6a060a91a09242cb7204f6d8/gcc%2FREADME.Portability", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53eebfbf949c9cfe6a060a91a09242cb7204f6d8/gcc%2FREADME.Portability", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FREADME.Portability?ref=53eebfbf949c9cfe6a060a91a09242cb7204f6d8", "patch": "@@ -51,14 +51,28 @@ foo (bar, )\n needs to be coded in some other way.\n \n \n-free and realloc\n-----------------\n+Avoid unnecessary test before free\n+----------------------------------\n \n-Some implementations crash upon attempts to free or realloc the null\n-pointer.  Thus if mem might be null, you need to write\n+Since SunOS 4 stopped being a reasonable portability target,\n+(which happened around 2007) there has been no need to guard\n+against \"free (NULL)\".  Thus, any guard like the following\n+constitutes a redundant test:\n+\n+  if (P)\n+    free (P);\n+\n+It is better to avoid the test.[*]\n+Instead, simply free P, regardless of whether it is NULL.\n+\n+[*] However, if your profiling exposes a test like this in a\n+performance-critical loop, say where P is nearly always NULL, and\n+the cost of calling free on a NULL pointer would be prohibitively\n+high, consider using __builtin_expect, e.g., like this:\n+\n+  if (__builtin_expect (ptr != NULL, 0))\n+    free (ptr);\n \n-  if (mem)\n-    free (mem);\n \n \n Trigraphs\n@@ -194,4 +208,3 @@ o Passing incorrect types to fprintf and friends.\n \n o Adding a function declaration for a module declared in another file to\n   a .c file instead of to a .h file.\n-"}]}