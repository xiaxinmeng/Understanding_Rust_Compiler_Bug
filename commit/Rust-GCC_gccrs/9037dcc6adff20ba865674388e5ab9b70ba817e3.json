{"sha": "9037dcc6adff20ba865674388e5ab9b70ba817e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTAzN2RjYzZhZGZmMjBiYTg2NTY3NDM4OGU1YWI5YjcwYmE4MTdlMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2012-10-26T10:12:35Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-10-26T10:12:35Z"}, "message": "re PR tree-optimization/54824 (ICE in verify_loop_structure)\n\n2012-10-26  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/54824\n\t* tree-optimize.c (execute_fixup_cfg): Insert __builtin_unreachable\n\tat the end of blocks with no successors.\n\n\t* gcc.dg/torture/pr54824.c: New testcase.\n\nFrom-SVN: r192841", "tree": {"sha": "44fbb99e75e09d9b2374c79fd95d10119f0db2d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44fbb99e75e09d9b2374c79fd95d10119f0db2d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9037dcc6adff20ba865674388e5ab9b70ba817e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9037dcc6adff20ba865674388e5ab9b70ba817e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9037dcc6adff20ba865674388e5ab9b70ba817e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9037dcc6adff20ba865674388e5ab9b70ba817e3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3a0d99bb607788d14a703a5ce8594c629e5e91dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a0d99bb607788d14a703a5ce8594c629e5e91dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a0d99bb607788d14a703a5ce8594c629e5e91dc"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "96e604565a7d25c0566681569cdeabd23f9ebd76", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9037dcc6adff20ba865674388e5ab9b70ba817e3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9037dcc6adff20ba865674388e5ab9b70ba817e3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9037dcc6adff20ba865674388e5ab9b70ba817e3", "patch": "@@ -1,3 +1,9 @@\n+2012-10-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/54824\n+\t* tree-optimize.c (execute_fixup_cfg): Insert __builtin_unreachable\n+\tat the end of blocks with no successors.\n+\n 2012-10-26  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Uros Bizjak  <ubizjak@gmail.com>\n "}, {"sha": "c3badec964f86bacb73eb611c185cfa9c893c54e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9037dcc6adff20ba865674388e5ab9b70ba817e3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9037dcc6adff20ba865674388e5ab9b70ba817e3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9037dcc6adff20ba865674388e5ab9b70ba817e3", "patch": "@@ -1,3 +1,8 @@\n+2012-10-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/54824\n+\t* gcc.dg/torture/pr54824.c: New testcase.\n+\n 2012-10-26  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \n \t* gcc.target/i386/fxsave-1.c: New."}, {"sha": "82b822b099347109bb1f944b480eaafc9ad22f8f", "filename": "gcc/testsuite/gcc.dg/torture/pr54824.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9037dcc6adff20ba865674388e5ab9b70ba817e3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr54824.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9037dcc6adff20ba865674388e5ab9b70ba817e3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr54824.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr54824.c?ref=9037dcc6adff20ba865674388e5ab9b70ba817e3", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-w\" } */\n+\n+void __attribute__((noreturn)) bar(void)\n+{\n+}\n+\n+void foo(int i, char *p, char *q)\n+{\n+  while (*p++) {\n+      if (i)\n+\tp++;\n+      if (!*q++)\n+\tbar();\n+  }\n+}"}, {"sha": "3e7ca89e94da42976bb352fe9802a21dc861ba37", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9037dcc6adff20ba865674388e5ab9b70ba817e3/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9037dcc6adff20ba865674388e5ab9b70ba817e3/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=9037dcc6adff20ba865674388e5ab9b70ba817e3", "patch": "@@ -180,6 +180,25 @@ execute_fixup_cfg (void)\n       FOR_EACH_EDGE (e, ei, bb->succs)\n         e->count = (e->count * count_scale\n \t\t    + REG_BR_PROB_BASE / 2) / REG_BR_PROB_BASE;\n+\n+      /* If we have a basic block with no successors that does not\n+\t end with a control statement or a noreturn call end it with\n+\t a call to __builtin_unreachable.  This situation can occur\n+\t when inlining a noreturn call that does in fact return.  */\n+      if (EDGE_COUNT (bb->succs) == 0)\n+\t{\n+\t  gimple stmt = last_stmt (bb);\n+\t  if (!stmt\n+\t      || (!is_ctrl_stmt (stmt)\n+\t\t  && (!is_gimple_call (stmt)\n+\t\t      || (gimple_call_flags (stmt) & ECF_NORETURN) == 0)))\n+\t    {\n+\t      stmt = gimple_build_call\n+\t\t  (builtin_decl_implicit (BUILT_IN_UNREACHABLE), 0);\n+\t      gimple_stmt_iterator gsi = gsi_last_bb (bb);\n+\t      gsi_insert_after (&gsi, stmt, GSI_NEW_STMT);\n+\t    }\n+\t}\n     }\n   if (count_scale != REG_BR_PROB_BASE)\n     compute_function_frequency ();"}]}