{"sha": "592ed7db12ed0d6c71bca0cbfef6dcdf383bc24f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTkyZWQ3ZGIxMmVkMGQ2YzcxYmNhMGNiZmVmNmRjZGYzODNiYzI0Zg==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2021-06-03T10:44:53Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2021-06-03T11:15:21Z"}, "message": "arc: Remove obsolete options\n\nRemove the following obsolete options:\n- munalign-prob-threshold\n- malign-call\n- mmixed-code\n\nThe ARC's options are marked as obsolete and ignored for backwards\ncompatibility.\n\ngcc/\n2021-06-03  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* common/config/arc/arc-common.c (arc_option_optimization_table):\n\tRemove malign-call.\n\t* config/arc/arc.c (arc_unalign_branch_p): Remove unused function.\n\t* config/arc/arc.h (TARGET_MIXED_CODE): Remove macro.\n\t(INDEX_REG_CLASS): Only refer to GENERAL_REGS.\n\t* config/arc/arc.md (abssi2_mixed): Remove pattern.\n\t* config/arc/arc.opt (munalign-prob-threshold): Mark it obsolete.\n\t(malign-call): Likewise.\n\t(mmixed-code): Likewise.\n\t* doc/invoke.texi (ARC): Update doc.\n\nSigned-off-by: Claudiu Zissulescu <claziss@synopsys.com>", "tree": {"sha": "2a9068f3ad4b2d850af459fe0095240e7a38de29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a9068f3ad4b2d850af459fe0095240e7a38de29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/592ed7db12ed0d6c71bca0cbfef6dcdf383bc24f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/592ed7db12ed0d6c71bca0cbfef6dcdf383bc24f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/592ed7db12ed0d6c71bca0cbfef6dcdf383bc24f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/592ed7db12ed0d6c71bca0cbfef6dcdf383bc24f/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1681f22b4b44096f7bd8a2cf42f54762305c3ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1681f22b4b44096f7bd8a2cf42f54762305c3ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1681f22b4b44096f7bd8a2cf42f54762305c3ae"}], "stats": {"total": 67, "additions": 10, "deletions": 57}, "files": [{"sha": "6a119029616789e80410b9f4c91a0fac70055b48", "filename": "gcc/common/config/arc/arc-common.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/592ed7db12ed0d6c71bca0cbfef6dcdf383bc24f/gcc%2Fcommon%2Fconfig%2Farc%2Farc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/592ed7db12ed0d6c71bca0cbfef6dcdf383bc24f/gcc%2Fcommon%2Fconfig%2Farc%2Farc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Farc%2Farc-common.c?ref=592ed7db12ed0d6c71bca0cbfef6dcdf383bc24f", "patch": "@@ -62,7 +62,6 @@ static const struct default_options arc_option_optimization_table[] =\n     { OPT_LEVELS_SIZE, OPT_fif_conversion, NULL, 0 },\n     { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n     { OPT_LEVELS_3_PLUS_SPEED_ONLY, OPT_msize_level_, NULL, 0 },\n-    { OPT_LEVELS_3_PLUS_SPEED_ONLY, OPT_malign_call, NULL, 1 },\n     { OPT_LEVELS_NONE, 0, NULL, 0 }\n   };\n "}, {"sha": "b77d0566386fc44b6c6bdf98c0d05ff7a89c3d16", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/592ed7db12ed0d6c71bca0cbfef6dcdf383bc24f/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/592ed7db12ed0d6c71bca0cbfef6dcdf383bc24f/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=592ed7db12ed0d6c71bca0cbfef6dcdf383bc24f", "patch": "@@ -9868,29 +9868,6 @@ gen_acc2 (void)\n   return gen_rtx_REG (SImode, TARGET_BIG_ENDIAN ? 57: 56);\n }\n \n-/* FIXME: a parameter should be added, and code added to final.c,\n-   to reproduce this functionality in shorten_branches.  */\n-#if 0\n-/* Return nonzero iff BRANCH should be unaligned if possible by upsizing\n-   a previous instruction.  */\n-int\n-arc_unalign_branch_p (rtx branch)\n-{\n-  rtx note;\n-\n-  if (!TARGET_UNALIGN_BRANCH)\n-    return 0;\n-  /* Do not do this if we have a filled delay slot.  */\n-  if (get_attr_delay_slot_filled (branch) == DELAY_SLOT_FILLED_YES\n-      && !NEXT_INSN (branch)->deleted ())\n-    return 0;\n-  note = find_reg_note (branch, REG_BR_PROB, 0);\n-  return (!note\n-\t  || (arc_unalign_prob_threshold && !br_prob_note_reliable_p (note))\n-\t  || INTVAL (XEXP (note, 0)) < arc_unalign_prob_threshold);\n-}\n-#endif\n-\n /* When estimating sizes during arc_reorg, when optimizing for speed, there\n    are three reasons why we need to consider branches to be length 6:\n    - annull-false delay slot insns are implemented using conditional execution,"}, {"sha": "0224ae65074f1032e5a80c08dbfe4705e6ee265f", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/592ed7db12ed0d6c71bca0cbfef6dcdf383bc24f/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/592ed7db12ed0d6c71bca0cbfef6dcdf383bc24f/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=592ed7db12ed0d6c71bca0cbfef6dcdf383bc24f", "patch": "@@ -115,8 +115,6 @@ extern const char *arc_cpu_to_as (int argc, const char **argv);\n \n /* Run-time compilation parameters selecting different hardware subsets.  */\n \n-#define TARGET_MIXED_CODE (TARGET_MIXED_CODE_SET)\n-\n #define TARGET_SPFP (TARGET_SPFP_FAST_SET || TARGET_SPFP_COMPACT_SET)\n #define TARGET_DPFP (TARGET_DPFP_FAST_SET || TARGET_DPFP_COMPACT_SET\t\\\n \t\t     || TARGET_FP_DP_AX)\n@@ -571,7 +569,7 @@ extern enum reg_class arc_regno_reg_class[];\n    a scale factor or added to another register (as well as added to a\n    displacement).  */\n \n-#define INDEX_REG_CLASS (TARGET_MIXED_CODE ? ARCOMPACT16_REGS : GENERAL_REGS)\n+#define INDEX_REG_CLASS GENERAL_REGS\n \n /* The class value for valid base registers. A base register is one used in\n    an address which is the register value plus a displacement.  */"}, {"sha": "de61b2b790f7f72576cc0c455a72bd7f20623bcc", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/592ed7db12ed0d6c71bca0cbfef6dcdf383bc24f/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/592ed7db12ed0d6c71bca0cbfef6dcdf383bc24f/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=592ed7db12ed0d6c71bca0cbfef6dcdf383bc24f", "patch": "@@ -2011,14 +2011,6 @@ core_3, archs4x, archs4xd, archs4xd_slow\"\n \n ;; Absolute instructions\n \n-(define_insn \"*abssi2_mixed\"\n-  [(set (match_operand:SI 0 \"compact_register_operand\" \"=q\")\n-\t(abs:SI (match_operand:SI 1 \"compact_register_operand\" \"q\")))]\n-  \"TARGET_MIXED_CODE\"\n-  \"abs%? %0,%1%&\"\n-  [(set_attr \"type\" \"two_cycle_core\")\n-   (set_attr \"iscompact\" \"true\")])\n-\n (define_insn \"abssi2\"\n   [(set (match_operand:SI 0 \"dest_reg_operand\" \"=Rcq#q,w,w\")\n \t(abs:SI (match_operand:SI 1 \"nonmemory_operand\" \"Rcq#q,cL,Cal\")))]"}, {"sha": "a8935db2dd85bb13f599a2cc162f86030d67c8a3", "filename": "gcc/config/arc/arc.opt", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/592ed7db12ed0d6c71bca0cbfef6dcdf383bc24f/gcc%2Fconfig%2Farc%2Farc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/592ed7db12ed0d6c71bca0cbfef6dcdf383bc24f/gcc%2Fconfig%2Farc%2Farc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.opt?ref=592ed7db12ed0d6c71bca0cbfef6dcdf383bc24f", "patch": "@@ -136,12 +136,8 @@ Target Mask(CODE_DENSITY)\n Enable code density instructions for ARCv2.\n \n mmixed-code\n-Target Mask(MIXED_CODE_SET)\n-Tweak register allocation to help 16-bit instruction generation.\n-; originally this was:\n-;Generate ARCompact 16-bit instructions intermixed with 32-bit instructions\n-; but we do that without -mmixed-code, too, it's just a different instruction\n-; count / size tradeoff.\n+Target Ignore\n+Does nothing.  Preserved for backward compatibility.\n \n ; We use an explict definition for the negative form because that is the\n ; actually interesting option, and we want that to have its own comment.\n@@ -292,11 +288,9 @@ mmul32x16\n Target Mask(MULMAC_32BY16_SET)\n Generate 32x16 multiply and mac instructions.\n \n-; the initializer is supposed to be: Init(REG_BR_PROB_BASE/2) ,\n-; alas, basic-block.h is not included in options.c .\n munalign-prob-threshold=\n-Target RejectNegative Joined UInteger Var(arc_unalign_prob_threshold) Init(10000/2)\n-Set probability threshold for unaligning branches.\n+Target Ignore\n+Does nothing.  Preserved for backward compatibility.\n \n mmedium-calls\n Target Var(TARGET_MEDIUM_CALLS) Init(TARGET_MMEDIUM_CALLS_DEFAULT)\n@@ -307,8 +301,8 @@ Target Var(TARGET_ANNOTATE_ALIGN)\n Explain what alignment considerations lead to the decision to make an insn short or long.\n \n malign-call\n-Target Var(TARGET_ALIGN_CALL)\n-Do alignment optimizations for call instructions.\n+Target Ignore\n+Does nothing.  Preserved for backward compatibility.\n \n mRcq\n Target Var(TARGET_Rcq)"}, {"sha": "eb8142f596d2ffb5ab0c1ead54818fc2c2f2c37a", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/592ed7db12ed0d6c71bca0cbfef6dcdf383bc24f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/592ed7db12ed0d6c71bca0cbfef6dcdf383bc24f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=592ed7db12ed0d6c71bca0cbfef6dcdf383bc24f", "patch": "@@ -19255,7 +19255,7 @@ The following options fine tune code generation:\n @table @gcctabopt\n @item -malign-call\n @opindex malign-call\n-Do alignment optimizations for call instructions.\n+Does nothing.  Preserved for backward compatibility.\n \n @item -mauto-modify-reg\n @opindex mauto-modify-reg\n@@ -19350,9 +19350,7 @@ code-density feature.\n \n @item -mmixed-code\n @opindex mmixed-code\n-Tweak register allocation to help 16-bit instruction generation.\n-This generally has the effect of decreasing the average instruction size\n-while increasing the instruction count.\n+Does nothing.  Preserved for backward compatibility.\n \n @item -mq-class\n @opindex mq-class\n@@ -19428,12 +19426,7 @@ normal instruction.\n \n @item -munalign-prob-threshold=@var{probability}\n @opindex munalign-prob-threshold\n-Set probability threshold for unaligning branches.\n-When tuning for @samp{ARC700} and optimizing for speed, branches without\n-filled delay slot are preferably emitted unaligned and long, unless\n-profiling indicates that the probability for the branch to be taken\n-is below @var{probability}.  @xref{Cross-profiling}.\n-The default is (REG_BR_PROB_BASE/2), i.e.@: 5000.\n+Does nothing.  Preserved for backward compatibility.\n \n @end table\n "}]}