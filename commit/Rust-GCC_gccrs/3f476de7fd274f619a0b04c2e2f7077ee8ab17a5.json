{"sha": "3f476de7fd274f619a0b04c2e2f7077ee8ab17a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y0NzZkZTdmZDI3NGY2MTlhMGIwNGMyZTJmNzA3N2VlOGFiMTdhNQ==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-05-17T19:53:39Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-05-17T22:11:24Z"}, "message": "Once a range becomes constant, make it invariant.\n\nOnce a range is forced to a constant globally, simply make it invariant.\nUnify this with the code which makes non-zero pointer ranges invariant.\n\n\tgcc/\n\tPR tree-optimization/100512\n\t* gimple-range-cache.cc (ranger_cache::set_global_range): Mark const\n\tand non-zero pointer ranges as invariant.\n\t* gimple-range.cc (gimple_ranger::range_of_stmt): Remove pointer\n\tprocessing from here.\n\n\tgcc/testsuite/\n\tPR tree-optimization/100512\n\t* gcc.dg/pr100512.c: New.", "tree": {"sha": "043de12912155b313456535691049de649e06284", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/043de12912155b313456535691049de649e06284"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f476de7fd274f619a0b04c2e2f7077ee8ab17a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f476de7fd274f619a0b04c2e2f7077ee8ab17a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f476de7fd274f619a0b04c2e2f7077ee8ab17a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f476de7fd274f619a0b04c2e2f7077ee8ab17a5/comments", "author": null, "committer": null, "parents": [{"sha": "5282b2ac00148a39d7ae09821d64dbc9c32cbf5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5282b2ac00148a39d7ae09821d64dbc9c32cbf5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5282b2ac00148a39d7ae09821d64dbc9c32cbf5f"}], "stats": {"total": 45, "additions": 38, "deletions": 7}, "files": [{"sha": "2c922e32913ba4ab7e5441821b0b8d56db0350ba", "filename": "gcc/gimple-range-cache.cc", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f476de7fd274f619a0b04c2e2f7077ee8ab17a5/gcc%2Fgimple-range-cache.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f476de7fd274f619a0b04c2e2f7077ee8ab17a5/gcc%2Fgimple-range-cache.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-cache.cc?ref=3f476de7fd274f619a0b04c2e2f7077ee8ab17a5", "patch": "@@ -703,8 +703,19 @@ ranger_cache::set_global_range (tree name, const irange &r)\n \n       propagate_updated_value (name, bb);\n     }\n-  // Mark the value as up-to-date.\n-  m_temporal->set_timestamp (name);\n+  // Constants no longer need to tracked.  Any further refinement has to be\n+  // undefined. Propagation works better with constants. PR 100512.\n+  // Pointers which resolve to non-zero also do not need\n+  // tracking in the cache as they will never change.  See PR 98866.\n+  // Otherwise mark the value as up-to-date.\n+  if (r.singleton_p ()\n+      || (POINTER_TYPE_P (TREE_TYPE (name)) && r.nonzero_p ()))\n+    {\n+      set_range_invariant (name);\n+      m_temporal->set_always_current (name);\n+    }\n+  else\n+    m_temporal->set_timestamp (name);\n }\n \n // Register a dependency on DEP to name.  If the timestamp for DEP is ever"}, {"sha": "710bc7f963215c9c953e552af1f6cf94c2c3201d", "filename": "gcc/gimple-range.cc", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f476de7fd274f619a0b04c2e2f7077ee8ab17a5/gcc%2Fgimple-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f476de7fd274f619a0b04c2e2f7077ee8ab17a5/gcc%2Fgimple-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range.cc?ref=3f476de7fd274f619a0b04c2e2f7077ee8ab17a5", "patch": "@@ -1082,11 +1082,6 @@ gimple_ranger::range_of_stmt (irange &r, gimple *s, tree name)\n   r.intersect (tmp);\n   m_cache.set_global_range (name, r);\n \n-  // Pointers which resolve to non-zero at the defintion point do not need\n-  // tracking in the cache as they will never change.  See PR 98866.\n-  if (POINTER_TYPE_P (TREE_TYPE (name)) && r.nonzero_p ())\n-    m_cache.set_range_invariant (name);\n-\n   return true;\n }\n "}, {"sha": "70b90e04be96bc88cc63009e1199e17802615b50", "filename": "gcc/testsuite/gcc.dg/pr100512.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f476de7fd274f619a0b04c2e2f7077ee8ab17a5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr100512.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f476de7fd274f619a0b04c2e2f7077ee8ab17a5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr100512.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr100512.c?ref=3f476de7fd274f619a0b04c2e2f7077ee8ab17a5", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -w\" } */\n+\n+#include <stdint.h>\n+int a;\n+void b() {\n+  int16_t *c;\n+  uint16_t d = 2;\n+  if (0 == d) {\n+    uint64_t e;\n+    uint64_t *f = &e;\n+    for (;;) {\n+      if (e += 0 >= 0)\n+        for (;;)\n+          ;\n+    g:\n+      for (; a;) {\n+        int16_t i = &d;\n+        *c = i && *f;\n+      }\n+    }\n+  }\n+  goto g;\n+}\n+"}]}