{"sha": "99dccabc3ce6ab4859abe72c0fce799b3a6be995", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTlkY2NhYmMzY2U2YWI0ODU5YWJlNzJjMGZjZTc5OWIzYTZiZTk5NQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-09-04T02:19:29Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-04T02:19:29Z"}, "message": "Makefile.in (CXX_TREE_H): Include function.h.\n\n\n\t* Makefile.in (CXX_TREE_H): Include function.h.\n\t(decl.o): Don't depend on function.h.\n\t(decl2.o): Likewise.\n\t(typeck.o): Likewise.\n\t(init.o): Likewise.\n\t(method.o): Likewise.\n\t* cp-tree.h: Include function.h.\n\t(cp_function): Rename to language_function.  Remove next.\n\t(cp_function_chain): Make it a macro, not a variable.\n\t(push_cp_function_context): Don't declare.\n\t(pop_cp_function_context): Likewise.\n\t* decl.c: Don't include function.h.\n\t(push_cp_function_context): Make it static.  Make it suitable for\n\ta save_lang_status callback.\n\t(pop_cp_function_context): Likewise.\n\t(maybe_push_to_top_level): Call push_function_context_to, not\n\tpush_cp_function_context.\n\t(pop_from_top_level): Call pop_function_context_from, not\n\tpop_cp_function_context.\n\t(init_decl_processing):  Set save_lang_status and\n\trestore_lang_status.  Call push_function_context_to, not\n\tpush_cp_function_context.\n\t(cp_function_chain): Remove.\n\t* decl2.c: Don't include function.h.\n\t* except.c: Don't include function.h.\n\t(start_anon_func): Call push_function_context_to, not\n\tpush_cp_function_context.\n\t(end_anon_func):  Call pop_function_context_from, not\n\tpop_cp_function_context.\n\t* init.c: Don't include function.h.\n\t* lex.c (begin_definition_of_inclass_inline): Call\n\tpush_function_context_to, not push_cp_function_context.\n\t(process_next_inline):  Call pop_function_context_from, not\n\tpop_cp_function_context.\n\t* method.c: Don't include function.h.\n\t(synthesize_method): Call push_function_context_to, not\n\tpush_cp_function_context.  Call pop_function_context_from, not\n\tpop_cp_function_context.\n\t* typeck.c: Don't include function.h.\n\nFrom-SVN: r29096", "tree": {"sha": "d2cde4436b711cd58164f9c519e9849a4f187ec5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2cde4436b711cd58164f9c519e9849a4f187ec5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99dccabc3ce6ab4859abe72c0fce799b3a6be995", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99dccabc3ce6ab4859abe72c0fce799b3a6be995", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99dccabc3ce6ab4859abe72c0fce799b3a6be995", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99dccabc3ce6ab4859abe72c0fce799b3a6be995/comments", "author": null, "committer": null, "parents": [{"sha": "8c5666b4c171c4f9989f1974272c1e393423d2f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c5666b4c171c4f9989f1974272c1e393423d2f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c5666b4c171c4f9989f1974272c1e393423d2f6"}], "stats": {"total": 144, "additions": 83, "deletions": 61}, "files": [{"sha": "d1771818bac69fa88cde910ec47488df43190659", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99dccabc3ce6ab4859abe72c0fce799b3a6be995/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99dccabc3ce6ab4859abe72c0fce799b3a6be995/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=99dccabc3ce6ab4859abe72c0fce799b3a6be995", "patch": "@@ -1,5 +1,45 @@\n 1999-09-03  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* Makefile.in (CXX_TREE_H): Include function.h.\n+\t(decl.o): Don't depend on function.h.\n+\t(decl2.o): Likewise.\n+\t(typeck.o): Likewise.\n+\t(init.o): Likewise.\n+\t(method.o): Likewise.\n+\t* cp-tree.h: Include function.h.\n+\t(cp_function): Rename to language_function.  Remove next.\n+\t(cp_function_chain): Make it a macro, not a variable.\n+\t(push_cp_function_context): Don't declare.\n+\t(pop_cp_function_context): Likewise.\n+\t* decl.c: Don't include function.h.\n+\t(push_cp_function_context): Make it static.  Make it suitable for\n+\ta save_lang_status callback.\n+\t(pop_cp_function_context): Likewise.\n+\t(maybe_push_to_top_level): Call push_function_context_to, not\n+\tpush_cp_function_context.\n+\t(pop_from_top_level): Call pop_function_context_from, not\n+\tpop_cp_function_context.\n+\t(init_decl_processing):  Set save_lang_status and\n+\trestore_lang_status.  Call push_function_context_to, not\n+\tpush_cp_function_context.\n+\t(cp_function_chain): Remove.\n+\t* decl2.c: Don't include function.h.\n+\t* except.c: Don't include function.h.\n+\t(start_anon_func): Call push_function_context_to, not\n+\tpush_cp_function_context.\n+\t(end_anon_func):  Call pop_function_context_from, not\n+\tpop_cp_function_context.\n+\t* init.c: Don't include function.h.\n+\t* lex.c (begin_definition_of_inclass_inline): Call\n+\tpush_function_context_to, not push_cp_function_context. \n+\t(process_next_inline):  Call pop_function_context_from, not\n+\tpop_cp_function_context.\n+\t* method.c: Don't include function.h.\n+\t(synthesize_method): Call push_function_context_to, not\n+\tpush_cp_function_context.  Call pop_function_context_from, not\n+\tpop_cp_function_context.\n+\t* typeck.c: Don't include function.h.\n+\t\n \t* decl.c (expand_static_init): Tweak handling of static\n \tinitializations for objects without constructors.\n "}, {"sha": "d71938f293eee3163a94975a0158be7287fda0f0", "filename": "gcc/cp/Makefile.in", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99dccabc3ce6ab4859abe72c0fce799b3a6be995/gcc%2Fcp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99dccabc3ce6ab4859abe72c0fce799b3a6be995/gcc%2Fcp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMakefile.in?ref=99dccabc3ce6ab4859abe72c0fce799b3a6be995", "patch": "@@ -201,7 +201,8 @@ RTL_H = $(srcdir)/../rtl.h $(srcdir)/../rtl.def \\\n \t$(srcdir)/../machmode.h $(srcdir)/../machmode.def\n TREE_H = $(srcdir)/../tree.h $(srcdir)/../real.h $(srcdir)/../tree.def \\\n \t$(srcdir)/../machmode.h $(srcdir)/../machmode.def\n-CXX_TREE_H = $(TREE_H) cp-tree.h $(srcdir)/../c-common.h cp-tree.def\n+CXX_TREE_H = $(TREE_H) cp-tree.h $(srcdir)/../c-common.h cp-tree.def \\\n+\t$(srcdir)/../function.h\n PARSE_H = $(srcdir)/parse.h\n PARSE_C = $(srcdir)/parse.c\n EXPR_H = $(srcdir)/../expr.h ../insn-codes.h\n@@ -244,17 +245,16 @@ lex.o : lex.c $(CONFIG_H) $(CXX_TREE_H) \\\n decl.o : decl.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h \\\n   lex.h decl.h $(srcdir)/../stack.h $(srcdir)/../output.h  \\\n   $(srcdir)/../except.h $(srcdir)/../system.h $(srcdir)/../toplev.h \\\n-  $(srcdir)/../hash.h $(srcdir)/../function.h\n+  $(srcdir)/../hash.h\n decl2.o : decl2.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h \\\n-  lex.h decl.h $(EXPR_H) $(srcdir)/../except.h $(srcdir)/../function.h \\\n+  lex.h decl.h $(EXPR_H) $(srcdir)/../except.h \\\n   $(srcdir)/../output.h $(srcdir)/../except.h $(srcdir)/../system.h \\\n   $(srcdir)/../toplev.h $(srcdir)/../dwarf2out.h $(srcdir)/../dwarfout.h \\\n   $(srcdir)/../../include/splay-tree.h $(srcdir)/../varray.h\n typeck2.o : typeck2.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h \\\n   $(srcdir)/../system.h $(srcdir)/../toplev.h\n typeck.o : typeck.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h $(RTL_H) \\\n-  $(EXPR_H) $(srcdir)/../system.h $(srcdir)/../toplev.h \\\n-  $(srcdir)/../function.h\n+  $(EXPR_H) $(srcdir)/../system.h $(srcdir)/../toplev.h \n class.o : class.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h \\\n   $(srcdir)/../system.h $(srcdir)/../toplev.h \\\n   $(srcdir)/../../include/splay-tree.h\n@@ -263,10 +263,9 @@ call.o : call.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h \\\n friend.o : friend.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h $(RTL_H) \\\n   $(srcdir)/../system.h $(srcdir)/../toplev.h\n init.o : init.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h $(RTL_H) \\\n-  $(EXPR_H) $(srcdir)/../system.h $(srcdir)/../toplev.h \\\n-  $(srcdir)/../function.h\n+  $(EXPR_H) $(srcdir)/../system.h $(srcdir)/../toplev.h \n method.o : method.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../system.h \\\n-  $(srcdir)/../toplev.h $(srcdir)/../function.h\n+  $(srcdir)/../toplev.h\n cvt.o : cvt.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../system.h decl.h \\\n   $(srcdir)/../flags.h $(srcdir)/../toplev.h $(srcdir)/../convert.h\n search.o : search.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../stack.h \\"}, {"sha": "52e1717134deafd31ce3b9a387c80360a6102cad", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99dccabc3ce6ab4859abe72c0fce799b3a6be995/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99dccabc3ce6ab4859abe72c0fce799b3a6be995/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=99dccabc3ce6ab4859abe72c0fce799b3a6be995", "patch": "@@ -20,6 +20,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n #include \"c-common.h\"\n+#include \"function.h\"\n \n #ifndef _CP_TREE_H\n #define _CP_TREE_H\n@@ -434,7 +435,7 @@ extern tree cp_global_trees[CPTI_MAX];\n \n /* Global state pertinent to the current function.  */\n \n-struct cp_function\n+struct language_function\n {\n   tree named_labels;\n   tree ctor_label;\n@@ -464,14 +465,11 @@ struct cp_function\n \n   struct named_label_list *named_label_uses;\n   struct binding_level *binding_level;\n-\n-  struct cp_function *next;\n };\n \n-/* A stack of cp_functions.  The head is the one that is used for all\n-   the per-function globals.  */\n+/* The current C++-specific per-function global variables.  */\n \n-extern struct cp_function *cp_function_chain;\n+#define cp_function_chain (outer_function_chain->language)\n \n /* In a destructor, the point at which all derived class destroying\n    has been done, just before any base class destroying will be done.  */\n@@ -3074,8 +3072,6 @@ extern tree maybe_build_cleanup_and_delete\tPROTO((tree));\n extern tree maybe_build_cleanup\t\t\tPROTO((tree));\n extern void cplus_expand_expr_stmt\t\tPROTO((tree));\n extern void finish_stmt\t\t\t\tPROTO((void));\n-extern void push_cp_function_context\t\tPROTO((tree));\n-extern void pop_cp_function_context\t\tPROTO((tree));\n extern int in_function_p\t\t\tPROTO((void));\n extern void replace_defarg\t\t\tPROTO((tree, tree));\n extern void print_other_binding_stack\t\tPROTO((struct binding_level *));"}, {"sha": "0c7a88e1ba10f9d8d02f1c46b2200f8df4d1a4eb", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 26, "deletions": 34, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99dccabc3ce6ab4859abe72c0fce799b3a6be995/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99dccabc3ce6ab4859abe72c0fce799b3a6be995/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=99dccabc3ce6ab4859abe72c0fce799b3a6be995", "patch": "@@ -31,7 +31,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"system.h\"\n #include \"tree.h\"\n #include \"rtl.h\"\n-#include \"function.h\"\n #include \"flags.h\"\n #include \"cp-tree.h\"\n #include \"decl.h\"\n@@ -197,6 +196,8 @@ static void maybe_commonize_var PROTO((tree));\n static tree build_cleanup_on_safe_obstack PROTO((tree));\n static void check_initializer PROTO((tree, tree *));\n static void make_rtl_for_nonlocal_decl PROTO((tree, tree, const char *));\n+static void push_cp_function_context PROTO((struct function *));\n+static void pop_cp_function_context PROTO((struct function *));\n \n #if defined (DEBUG_CP_BINDING_LEVELS)\n static void indent PROTO((void));\n@@ -2485,7 +2486,7 @@ maybe_push_to_top_level (pseudo)\n   struct binding_level *b = current_binding_level;\n   tree old_bindings = NULL_TREE;\n \n-  push_cp_function_context (NULL_TREE);\n+  push_function_context_to (NULL_TREE);\n \n   if (previous_class_type)\n     old_bindings = store_bindings (previous_class_values, old_bindings);\n@@ -2621,7 +2622,7 @@ pop_from_top_level ()\n \n   free (s);\n \n-  pop_cp_function_context (NULL_TREE);\n+  pop_function_context_from (NULL_TREE);\n }\n \f\n /* Push a definition of struct, union or enum tag \"name\".\n@@ -6173,8 +6174,13 @@ init_decl_processing ()\n   lang_name_c = get_identifier (\"C\");\n   lang_name_java = get_identifier (\"Java\");\n \n+  /* Let the back-end now how to save and restore language-specific\n+     per-function globals.  */\n+  save_lang_status = &push_cp_function_context;\n+  restore_lang_status = &pop_cp_function_context;\n+\n   /* Create the global per-function variables.  */\n-  push_cp_function_context (NULL_TREE);\n+  push_function_context_to (NULL_TREE);\n \n   /* Enter the global namespace. */\n   my_friendly_assert (global_namespace == NULL_TREE, 375);\n@@ -14496,28 +14502,21 @@ revert_static_member_fn (decl, fn, argtypes)\n     *argtypes = args;\n }\n \n-struct cp_function *cp_function_chain;\n-\n /* Save and reinitialize the variables\n    used during compilation of a C++ function.  */\n \n-void\n-push_cp_function_context (context)\n-     tree context;\n-{\n-  struct cp_function *p;\n-\n-  /* Push the language-independent context.  */\n-  push_function_context_to (context);\n-\n-  /* Push the C++-specific context.  */\n-  p = (struct cp_function *) xmalloc (sizeof (struct cp_function));\n-  if (cp_function_chain)\n-    *p = *cp_function_chain;\n+static void\n+push_cp_function_context (f)\n+     struct function *f;\n+{\n+  struct language_function *p \n+    = ((struct language_function *) \n+       xmalloc (sizeof (struct language_function)));\n+  f->language = p;\n+  if (f->next)\n+    *p = *f->next->language;\n   else\n-    bzero (p, sizeof (struct cp_function));\n-  p->next = cp_function_chain;\n-  cp_function_chain = p;\n+    bzero (p, sizeof (struct language_function));\n \n   /* For now, we always assume we're expanding all the way to RTL\n      unless we're explicitly doing otherwise.  */\n@@ -14530,19 +14529,12 @@ push_cp_function_context (context)\n \n /* Restore the variables used during compilation of a C++ function.  */\n \n-void\n-pop_cp_function_context (context)\n-     tree context;\n+static void\n+pop_cp_function_context (f)\n+     struct function *f;\n {\n-  struct cp_function *p;\n-\n-  /* Pop the language-independent context.  */\n-  pop_function_context_from (context);\n-\n-  /* Pop the C++-specific context.  */\n-  p = cp_function_chain;\n-  cp_function_chain = p->next;\n-  free (p);\n+  free (f->language);\n+  f->language = 0;\n }\n \n int"}, {"sha": "2aac32a3ada35c0d7a5f44169953f14c74b31a90", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99dccabc3ce6ab4859abe72c0fce799b3a6be995/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99dccabc3ce6ab4859abe72c0fce799b3a6be995/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=99dccabc3ce6ab4859abe72c0fce799b3a6be995", "patch": "@@ -37,7 +37,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"lex.h\"\n #include \"output.h\"\n #include \"except.h\"\n-#include \"function.h\"\n #include \"expr.h\"\n #include \"defaults.h\"\n #include \"toplev.h\""}, {"sha": "c5a80de73674e2c8b5495e65a4e9da05a12a784f", "filename": "gcc/cp/except.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99dccabc3ce6ab4859abe72c0fce799b3a6be995/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99dccabc3ce6ab4859abe72c0fce799b3a6be995/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=99dccabc3ce6ab4859abe72c0fce799b3a6be995", "patch": "@@ -32,7 +32,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"expr.h\"\n #include \"output.h\"\n #include \"except.h\"\n-#include \"function.h\"\n #include \"defaults.h\"\n #include \"toplev.h\"\n #include \"eh-common.h\"\n@@ -807,7 +806,7 @@ start_anon_func ()\n   tree params;\n   tree t;\n \n-  push_cp_function_context (NULL_TREE);\n+  push_function_context_to (NULL_TREE);\n   push_to_top_level ();\n \n   /* No need to mangle this.  */\n@@ -847,7 +846,7 @@ end_anon_func ()\n   finish_function (lineno, 0, 0);\n \n   pop_from_top_level ();\n-  pop_cp_function_context (NULL_TREE);\n+  pop_function_context_from (NULL_TREE);\n }\n \n /* Return a pointer to a buffer for an exception object of type TYPE.  */"}, {"sha": "33a82ccaac1adf48220200112f9a66f728584fbe", "filename": "gcc/cp/init.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99dccabc3ce6ab4859abe72c0fce799b3a6be995/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99dccabc3ce6ab4859abe72c0fce799b3a6be995/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=99dccabc3ce6ab4859abe72c0fce799b3a6be995", "patch": "@@ -25,7 +25,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"system.h\"\n #include \"tree.h\"\n #include \"rtl.h\"\n-#include \"function.h\"\n #include \"cp-tree.h\"\n #include \"flags.h\"\n #include \"output.h\""}, {"sha": "31999ff8baa3baea50a5871b4c74d180a81a7f94", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99dccabc3ce6ab4859abe72c0fce799b3a6be995/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99dccabc3ce6ab4859abe72c0fce799b3a6be995/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=99dccabc3ce6ab4859abe72c0fce799b3a6be995", "patch": "@@ -1265,7 +1265,7 @@ begin_definition_of_inclass_inline (pi)\n      surrounding the local class.  */\n   context = hack_decl_function_context (pi->fndecl);\n   if (context)\n-    push_cp_function_context (context);\n+    push_function_context_to (context);\n \n   feed_input (pi->buf, pi->len, pi->filename, pi->lineno);\n   yychar = PRE_PARSED_FUNCTION_DECL;\n@@ -1327,7 +1327,7 @@ process_next_inline (t)\n   struct pending_inline *i = (struct pending_inline *) TREE_PURPOSE (t);\n   context = hack_decl_function_context (i->fndecl);  \n   if (context)\n-    pop_cp_function_context (context);\n+    pop_function_context_from (context);\n   i = i->next;\n   if (yychar == YYEMPTY)\n     yychar = yylex ();"}, {"sha": "e3b26773faa027023b6634501973c3571a95b2df", "filename": "gcc/cp/method.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99dccabc3ce6ab4859abe72c0fce799b3a6be995/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99dccabc3ce6ab4859abe72c0fce799b3a6be995/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=99dccabc3ce6ab4859abe72c0fce799b3a6be995", "patch": "@@ -37,7 +37,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"obstack.h\"\n #include \"rtl.h\"\n #include \"expr.h\"\n-#include \"function.h\"\n #include \"output.h\"\n #include \"hard-reg-set.h\"\n #include \"flags.h\"\n@@ -2365,7 +2364,7 @@ synthesize_method (fndecl)\n   if (! context)\n     push_to_top_level ();\n   else if (nested)\n-    push_cp_function_context (context);\n+    push_function_context_to (context);\n \n   interface_unknown = 1;\n   start_function (NULL_TREE, fndecl, NULL_TREE, 1);\n@@ -2399,5 +2398,5 @@ synthesize_method (fndecl)\n   if (! context)\n     pop_from_top_level ();\n   else if (nested)\n-    pop_cp_function_context (context);\n+    pop_function_context_from (context);\n }"}, {"sha": "0a8eb8703f0465c5d2bc8ba066eedd1ef4dbd247", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99dccabc3ce6ab4859abe72c0fce799b3a6be995/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99dccabc3ce6ab4859abe72c0fce799b3a6be995/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=99dccabc3ce6ab4859abe72c0fce799b3a6be995", "patch": "@@ -37,7 +37,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"flags.h\"\n #include \"output.h\"\n #include \"expr.h\"\n-#include \"function.h\"\n #include \"toplev.h\"\n #include \"defaults.h\"\n "}]}