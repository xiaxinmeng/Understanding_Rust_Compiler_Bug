{"sha": "9ea10c480565fa42b1804fb436f7e26ca77b71a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVhMTBjNDgwNTY1ZmE0MmIxODA0ZmI0MzZmN2UyNmNhNzdiNzFhMw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-07-16T19:47:06Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-07-16T19:47:06Z"}, "message": "analyzer: add __analyzer_dump_state\n\ngcc/analyzer/ChangeLog:\n\t* engine.cc (exploded_node::on_stmt_pre): Handle\n\t__analyzer_dump_state.\n\t* program-state.cc (extrinsic_state::get_sm_idx_by_name): New.\n\t(program_state::impl_call_analyzer_dump_state): New.\n\t* program-state.h (extrinsic_state::get_sm_idx_by_name): New decl.\n\t(program_state::impl_call_analyzer_dump_state): New decl.\n\t* region-model-impl-calls.cc\n\t(call_details::get_arg_string_literal): New.\n\t* region-model.h (call_details::get_arg_string_literal): New decl.\n\ngcc/ChangeLog:\n\t* doc/analyzer.texi: Add __analyzer_dump_state.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/analyzer/analyzer-decls.h (__analyzer_dump_state): New.\n\t* gcc.dg/analyzer/dump-state.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "06cc69c3752438b1cdccfa134b6e763d9a1ad303", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06cc69c3752438b1cdccfa134b6e763d9a1ad303"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ea10c480565fa42b1804fb436f7e26ca77b71a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ea10c480565fa42b1804fb436f7e26ca77b71a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ea10c480565fa42b1804fb436f7e26ca77b71a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ea10c480565fa42b1804fb436f7e26ca77b71a3/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5932dd35eaa816e8d9b6406c6c433395ff5b6162", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5932dd35eaa816e8d9b6406c6c433395ff5b6162", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5932dd35eaa816e8d9b6406c6c433395ff5b6162"}], "stats": {"total": 105, "additions": 105, "deletions": 0}, "files": [{"sha": "f9fc58180b76e3d4782e00e6fa16f219252bd28c", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ea10c480565fa42b1804fb436f7e26ca77b71a3/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ea10c480565fa42b1804fb436f7e26ca77b71a3/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=9ea10c480565fa42b1804fb436f7e26ca77b71a3", "patch": "@@ -1270,6 +1270,9 @@ exploded_node::on_stmt_pre (exploded_graph &eg,\n \t  state->dump (eg.get_ext_state (), true);\n \t  return;\n \t}\n+      else if (is_special_named_call_p (call, \"__analyzer_dump_state\", 2))\n+\tstate->impl_call_analyzer_dump_state (call, eg.get_ext_state (),\n+\t\t\t\t\t      ctxt);\n       else if (is_setjmp_call_p (call))\n \t{\n \t  state->m_region_model->on_setjmp (call, this, ctxt);"}, {"sha": "30812176bd8de2b6ef45619f71ffedffebc9894d", "filename": "gcc/analyzer/program-state.cc", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ea10c480565fa42b1804fb436f7e26ca77b71a3/gcc%2Fanalyzer%2Fprogram-state.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ea10c480565fa42b1804fb436f7e26ca77b71a3/gcc%2Fanalyzer%2Fprogram-state.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-state.cc?ref=9ea10c480565fa42b1804fb436f7e26ca77b71a3", "patch": "@@ -131,6 +131,27 @@ extrinsic_state::get_model_manager () const\n     return NULL; /* for selftests.  */\n }\n \n+/* Try to find a state machine named NAME.\n+   If found, return true and write its index to *OUT.\n+   Otherwise return false.  */\n+\n+bool\n+extrinsic_state::get_sm_idx_by_name (const char *name, unsigned *out) const\n+{\n+  unsigned i;\n+  state_machine *sm;\n+  FOR_EACH_VEC_ELT (m_checkers, i, sm)\n+    if (0 == strcmp (name, sm->get_name ()))\n+      {\n+\t/* Found NAME.  */\n+\t*out = i;\n+\treturn true;\n+      }\n+\n+  /* NAME not found.  */\n+  return false;\n+}\n+\n /* struct sm_state_map::entry_t.  */\n \n int\n@@ -1290,6 +1311,34 @@ program_state::detect_leaks (const program_state &src_state,\n \tdest_state.m_region_model->unset_dynamic_extents (reg);\n }\n \n+/* Handle calls to \"__analyzer_dump_state\".  */\n+\n+void\n+program_state::impl_call_analyzer_dump_state (const gcall *call,\n+\t\t\t\t\t      const extrinsic_state &ext_state,\n+\t\t\t\t\t      region_model_context *ctxt)\n+{\n+  call_details cd (call, m_region_model, ctxt);\n+  const char *sm_name = cd.get_arg_string_literal (0);\n+  if (!sm_name)\n+    {\n+      error_at (call->location, \"cannot determine state machine\");\n+      return;\n+    }\n+  unsigned sm_idx;\n+  if (!ext_state.get_sm_idx_by_name (sm_name, &sm_idx))\n+    {\n+      error_at (call->location, \"unrecognized state machine %qs\", sm_name);\n+      return;\n+    }\n+  const sm_state_map *smap = m_checker_states[sm_idx];\n+\n+  const svalue *sval = cd.get_arg_svalue (1);\n+\n+  state_machine::state_t state = smap->get_state (sval, ext_state);\n+  warning_at (call->location, 0, \"state: %qs\", state->get_name ());\n+}\n+\n #if CHECKING_P\n \n namespace selftest {"}, {"sha": "8dee930665cce2330845e82ed933ac50b804b681", "filename": "gcc/analyzer/program-state.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ea10c480565fa42b1804fb436f7e26ca77b71a3/gcc%2Fanalyzer%2Fprogram-state.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ea10c480565fa42b1804fb436f7e26ca77b71a3/gcc%2Fanalyzer%2Fprogram-state.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-state.h?ref=9ea10c480565fa42b1804fb436f7e26ca77b71a3", "patch": "@@ -58,6 +58,8 @@ class extrinsic_state\n   engine *get_engine () const { return m_engine; }\n   region_model_manager *get_model_manager () const;\n \n+  bool get_sm_idx_by_name (const char *name, unsigned *out) const;\n+\n private:\n   /* The state machines.  */\n   auto_delete_vec <state_machine> &m_checkers;\n@@ -256,6 +258,10 @@ class program_state\n \t\t\t    const extrinsic_state &ext_state,\n \t\t\t    region_model_context *ctxt);\n \n+  void impl_call_analyzer_dump_state (const gcall *call,\n+\t\t\t\t      const extrinsic_state &ext_state,\n+\t\t\t\t      region_model_context *ctxt);\n+\n   /* TODO: lose the pointer here (const-correctness issues?).  */\n   region_model *m_region_model;\n   auto_delete_vec<sm_state_map> m_checker_states;"}, {"sha": "545634b9dc79a0edd3fc61ab97755108c7316524", "filename": "gcc/analyzer/region-model-impl-calls.cc", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ea10c480565fa42b1804fb436f7e26ca77b71a3/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ea10c480565fa42b1804fb436f7e26ca77b71a3/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc?ref=9ea10c480565fa42b1804fb436f7e26ca77b71a3", "patch": "@@ -140,6 +140,24 @@ call_details::get_arg_svalue (unsigned idx) const\n   return m_model->get_rvalue (arg, m_ctxt);\n }\n \n+/* Attempt to get the string literal for argument IDX, or return NULL\n+   otherwise.\n+   For use when implementing \"__analyzer_*\" functions that take\n+   string literals.  */\n+\n+const char *\n+call_details::get_arg_string_literal (unsigned idx) const\n+{\n+  const svalue *str_arg = get_arg_svalue (idx);\n+  if (const region *pointee = str_arg->maybe_get_region ())\n+    if (const string_region *string_reg = pointee->dyn_cast_string_region ())\n+      {\n+\ttree string_cst = string_reg->get_string_cst ();\n+\treturn TREE_STRING_POINTER (string_cst);\n+      }\n+  return NULL;\n+}\n+\n /* Dump a multiline representation of this call to PP.  */\n \n void"}, {"sha": "f07a287f681d0d0c5a6c883f16b0c3756095e6c2", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ea10c480565fa42b1804fb436f7e26ca77b71a3/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ea10c480565fa42b1804fb436f7e26ca77b71a3/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=9ea10c480565fa42b1804fb436f7e26ca77b71a3", "patch": "@@ -468,6 +468,7 @@ class call_details\n   tree get_arg_tree (unsigned idx) const;\n   tree get_arg_type (unsigned idx) const;\n   const svalue *get_arg_svalue (unsigned idx) const;\n+  const char *get_arg_string_literal (unsigned idx) const;\n \n   void dump_to_pp (pretty_printer *pp, bool simple) const;\n   void dump (bool simple) const;"}, {"sha": "aadb0de0798a9a8a97659084989615977d403d4d", "filename": "gcc/doc/analyzer.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ea10c480565fa42b1804fb436f7e26ca77b71a3/gcc%2Fdoc%2Fanalyzer.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ea10c480565fa42b1804fb436f7e26ca77b71a3/gcc%2Fdoc%2Fanalyzer.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fanalyzer.texi?ref=9ea10c480565fa42b1804fb436f7e26ca77b71a3", "patch": "@@ -521,6 +521,15 @@ it will also dump all of the states within the ``processed'' nodes.\n @end smallexample\n will dump the region_model's state to stderr.\n \n+@smallexample\n+__analyzer_dump_state (\"malloc\", ptr);\n+@end smallexample\n+\n+will emit a warning describing the state of the 2nd argument\n+(which can be of any type) with respect to the state machine with\n+a name matching the 1st argument (which must be a string literal).\n+This is for use when debugging, and may be of use in DejaGnu tests.\n+\n @smallexample\n __analyzer_eval (expr);\n @end smallexample"}, {"sha": "e8745c0933f74826e0de3c3f4b3f6cf4033fd7d9", "filename": "gcc/testsuite/gcc.dg/analyzer/analyzer-decls.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ea10c480565fa42b1804fb436f7e26ca77b71a3/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fanalyzer-decls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ea10c480565fa42b1804fb436f7e26ca77b71a3/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fanalyzer-decls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fanalyzer-decls.h?ref=9ea10c480565fa42b1804fb436f7e26ca77b71a3", "patch": "@@ -35,6 +35,11 @@ extern void __analyzer_dump_path (void);\n /* Dump the region_model's state to stderr.  */\n extern void __analyzer_dump_region_model (void);\n \n+/* Emit a warning describing the state of the 2nd argument\n+   (which can be of any type) with respect to NAME.\n+   This is for use when debugging, and may be of use in DejaGnu tests.  */\n+extern void __analyzer_dump_state (const char *name, ...);\n+\n /* Emit a warning with text \"TRUE\", FALSE\" or \"UNKNOWN\" based on the\n    truthfulness of the argument.  */\n extern void __analyzer_eval (int);"}, {"sha": "618a5a9d7810f0949bc4ff2a5f856db95fb0911e", "filename": "gcc/testsuite/gcc.dg/analyzer/dump-state.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ea10c480565fa42b1804fb436f7e26ca77b71a3/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdump-state.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ea10c480565fa42b1804fb436f7e26ca77b71a3/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdump-state.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdump-state.c?ref=9ea10c480565fa42b1804fb436f7e26ca77b71a3", "patch": "@@ -0,0 +1,14 @@\n+/* Verify that __analyzer_dump_state works as expected.  */\n+\n+#include <stdlib.h>\n+#include \"analyzer-decls.h\"\n+\n+void test_1 (void)\n+{\n+  void *p = malloc (1024);\n+  __analyzer_dump_state (\"malloc\", p); /* { dg-warning \"state: 'unchecked'\" } */\n+  free (p);\n+  __analyzer_dump_state (\"malloc\", p); /* { dg-warning \"state: 'freed'\" } */\n+  __analyzer_dump_state (NULL, p); /* { dg-error \"cannot determine state machine\" } */\n+  __analyzer_dump_state (\"not a state machine\", p); /* { dg-error \"unrecognized state machine 'not a state machine'\" } */\n+}"}]}