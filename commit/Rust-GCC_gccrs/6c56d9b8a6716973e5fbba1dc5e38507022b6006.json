{"sha": "6c56d9b8a6716973e5fbba1dc5e38507022b6006", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM1NmQ5YjhhNjcxNjk3M2U1ZmJiYTFkYzVlMzg1MDcwMjJiNjAwNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-04T08:00:05Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-04T08:00:05Z"}, "message": "[multiple changes]\n\n2014-08-04  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch4.adb: Minor reformatting.\n\n2014-08-04  Olivier Hainque  <hainque@adacore.com>\n\n\t* link.c: remove const on __gnat_objlist_file_supported for AIX\n\n2014-08-04  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_util.ads: Minor addition of comment.\n\n2014-08-04  Vincent Celier  <celier@adacore.com>\n\n\t* prj-dect.adb (Check_Package_Allowed): Allow package IDE in\n\tall projects, including aggregate and aggregate library projects.\n\n2014-08-04  Yannick Moy  <moy@adacore.com>\n\n\t* back_end.adb (Call_Back_End): Do not call gigi in GNATprove mode.\n\n2014-08-04  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_eval.adb (Test_In_Range): Always in range for\n\tIs_Known_Valid target type, where input type has smaller or\n\tequal size and does not have biased rep.\n\n2014-08-04  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_attr.adb (Eval_Attribute): Constrained is not treated as\n\ta static attribute, and the Static flag must not be set on it\n\tduring resolution. It may be constant-folded during expansion,\n\tbut if expansion is disabled it is not a static expression.\n\nFrom-SVN: r213535", "tree": {"sha": "4541d55206ad7bc88376f6ecb54e971ea03dbf08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4541d55206ad7bc88376f6ecb54e971ea03dbf08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c56d9b8a6716973e5fbba1dc5e38507022b6006", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c56d9b8a6716973e5fbba1dc5e38507022b6006", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c56d9b8a6716973e5fbba1dc5e38507022b6006", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c56d9b8a6716973e5fbba1dc5e38507022b6006/comments", "author": null, "committer": null, "parents": [{"sha": "ad5edba5cec413cf60b5c71046e7787a0048357f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad5edba5cec413cf60b5c71046e7787a0048357f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad5edba5cec413cf60b5c71046e7787a0048357f"}], "stats": {"total": 104, "additions": 86, "deletions": 18}, "files": [{"sha": "ed625f2a3e0de6bb574dfa4220667198eee4a4f0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56d9b8a6716973e5fbba1dc5e38507022b6006/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56d9b8a6716973e5fbba1dc5e38507022b6006/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6c56d9b8a6716973e5fbba1dc5e38507022b6006", "patch": "@@ -1,3 +1,37 @@\n+2014-08-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch4.adb: Minor reformatting.\n+\n+2014-08-04  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* link.c: remove const on __gnat_objlist_file_supported for AIX\n+\n+2014-08-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_util.ads: Minor addition of comment.\n+\n+2014-08-04  Vincent Celier  <celier@adacore.com>\n+\n+\t* prj-dect.adb (Check_Package_Allowed): Allow package IDE in\n+\tall projects, including aggregate and aggregate library projects.\n+\n+2014-08-04  Yannick Moy  <moy@adacore.com>\n+\n+\t* back_end.adb (Call_Back_End): Do not call gigi in GNATprove mode.\n+\n+2014-08-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_eval.adb (Test_In_Range): Always in range for\n+\tIs_Known_Valid target type, where input type has smaller or\n+\tequal size and does not have biased rep.\n+\n+2014-08-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_attr.adb (Eval_Attribute): Constrained is not treated as\n+\ta static attribute, and the Static flag must not be set on it\n+\tduring resolution. It may be constant-folded during expansion,\n+\tbut if expansion is disabled it is not a static expression.\n+\n 2014-08-04  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_ch8.adb (Build_Class_Wide_Wrapper): Mark the primitive as"}, {"sha": "3e535547db632d8072e285e14f81e3488beed421", "filename": "gcc/ada/back_end.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56d9b8a6716973e5fbba1dc5e38507022b6006/gcc%2Fada%2Fback_end.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56d9b8a6716973e5fbba1dc5e38507022b6006/gcc%2Fada%2Fback_end.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fback_end.adb?ref=6c56d9b8a6716973e5fbba1dc5e38507022b6006", "patch": "@@ -126,7 +126,8 @@ package body Back_End is\n            Nat (Physical_To_Logical (Last_Source_Line (J), J));\n       end loop;\n \n-      --  Deal with case of generating SCIL, we should not be here!\n+      --  Deal with case of generating SCIL, we should not be here unless\n+      --  debugging CodePeer mode in GNAT.\n \n       if Generate_SCIL then\n          Error_Msg_N (\"'S'C'I'L generation not available\", Cunit (Main_Unit));\n@@ -139,6 +140,14 @@ package body Back_End is\n          end if;\n       end if;\n \n+      --  We should be here in GNATprove mode only when debugging GNAT. Do not\n+      --  call gigi in that case, as it is not prepared to handle the special\n+      --  form of the tree obtained in GNATprove mode.\n+\n+      if GNATprove_Mode then\n+         return;\n+      end if;\n+\n       --  The actual call to the back end\n \n       gigi"}, {"sha": "d012fc6f59a5b815f7b4ea2fd3b934643b294456", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56d9b8a6716973e5fbba1dc5e38507022b6006/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56d9b8a6716973e5fbba1dc5e38507022b6006/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=6c56d9b8a6716973e5fbba1dc5e38507022b6006", "patch": "@@ -10416,18 +10416,22 @@ package body Exp_Ch4 is\n          --  If the level of the operand type is statically deeper than the\n          --  level of the target type, then force Program_Error. Note that this\n          --  can only occur for cases where the attribute is within the body of\n-         --  an instantiation (otherwise the conversion will already have been\n-         --  rejected as illegal). (Note: warnings are issued by the analyzer\n-         --  for the instance cases.) The case where the target type is an\n-         --  anonymous access type of a discriminant is excluded, because the\n-         --  level of such a type depends on the context and currently the\n-         --  level returned for such types is zero, resulting in warnings about\n-         --  about check failures in certain legal cases involving class-wide\n-         --  interfaces as the designated type (some cases, such as return\n-         --  statements, are checked at run time, but not clear if these are\n-         --  handled right in general, see 3.10.2(12/2-12.5/3) ???).\n+         --  an instantiation, otherwise the conversion will already have been\n+         --  rejected as illegal.\n+\n+         --  Note: warnings are issued by the analyzer for the instance cases\n \n          elsif In_Instance_Body\n+\n+           --  The case where the target type is an anonymous access type of\n+           --  a discriminant is excluded, because the level of such a type\n+           --  depends on the context and currently the level returned for such\n+           --  types is zero, resulting in warnings about about check failures\n+           --  in certain legal cases involving class-wide interfaces as the\n+           --  designated type (some cases, such as return statements, are\n+           --  checked at run time, but not clear if these are handled right\n+           --  in general, see 3.10.2(12/2-12.5/3) ???).\n+\n            and then\n              not (Ekind (Target_Type) = E_Anonymous_Access_Type\n                    and then Present (Associated_Node_For_Itype (Target_Type))"}, {"sha": "ee591471af04f569b841a887a2f677d74d9a40f8", "filename": "gcc/ada/link.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56d9b8a6716973e5fbba1dc5e38507022b6006/gcc%2Fada%2Flink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56d9b8a6716973e5fbba1dc5e38507022b6006/gcc%2Fada%2Flink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flink.c?ref=6c56d9b8a6716973e5fbba1dc5e38507022b6006", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *          Copyright (C) 1992-2012, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2014, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -153,7 +153,7 @@ const char *__gnat_run_path_option = \"\";\n char __gnat_shared_libgnat_default = STATIC;\n char __gnat_shared_libgcc_default = STATIC;\n int __gnat_link_max = 15000;\n-const unsigned char __gnat_objlist_file_supported = 1;\n+unsigned char __gnat_objlist_file_supported = 1;\n const char *__gnat_object_library_extension = \".a\";\n unsigned char __gnat_separate_run_path_options = 0;\n const char *__gnat_default_libgcc_subdir = \"lib\";"}, {"sha": "9053cfca54f08f402f00d42ddef53b2fa1970f56", "filename": "gcc/ada/prj-dect.adb", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56d9b8a6716973e5fbba1dc5e38507022b6006/gcc%2Fada%2Fprj-dect.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56d9b8a6716973e5fbba1dc5e38507022b6006/gcc%2Fada%2Fprj-dect.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-dect.adb?ref=6c56d9b8a6716973e5fbba1dc5e38507022b6006", "patch": "@@ -214,10 +214,12 @@ package body Prj.Dect is\n                  Project_Qualifier_Of (Project, In_Tree);\n       Name   : constant Name_Id := Name_Of (Current_Package, In_Tree);\n    begin\n-      if (Qualif = Aggregate and then Name /= Snames.Name_Builder)\n-        or else (Qualif = Aggregate_Library\n-                  and then Name /= Snames.Name_Builder\n-                  and then Name /= Snames.Name_Install)\n+      if Name /= Snames.Name_Ide\n+        and then\n+          ((Qualif = Aggregate         and then Name /= Snames.Name_Builder)\n+              or else\n+           (Qualif = Aggregate_Library and then Name /= Snames.Name_Builder\n+                                       and then Name /= Snames.Name_Install))\n       then\n          Error_Msg_Name_1 := Name;\n          Error_Msg"}, {"sha": "2b4cee2e37874559471859fa599fa53f5060ec0a", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56d9b8a6716973e5fbba1dc5e38507022b6006/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56d9b8a6716973e5fbba1dc5e38507022b6006/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=6c56d9b8a6716973e5fbba1dc5e38507022b6006", "patch": "@@ -7775,6 +7775,12 @@ package body Sem_Attr is\n       --  could be handled at compile time. To be looked at later.\n \n       when Attribute_Constrained =>\n+\n+         --  The expander might fold it and set the static flag accordingly,\n+         --  but with expansion disabled (as in ASIS), it remains as an\n+         --  attribute reference, and this reference is not static.\n+\n+         Set_Is_Static_Expression (N, False);\n          null;\n \n       ---------------"}, {"sha": "2fb5d3757c95187f9ed8855c3523b69ce6ccfbe7", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56d9b8a6716973e5fbba1dc5e38507022b6006/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56d9b8a6716973e5fbba1dc5e38507022b6006/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=6c56d9b8a6716973e5fbba1dc5e38507022b6006", "patch": "@@ -6193,6 +6193,18 @@ package body Sem_Eval is\n       then\n          return In_Range;\n \n+      --  Another special case. For signed integer types, if the target type\n+      --  has Is_Known_Valid set, and the source type does not have a larger\n+      --  size, then the source value must be in range. We exclude biased\n+      --  types, because they bizarrely can generate out of range values.\n+\n+      elsif Is_Signed_Integer_Type (Etype (N))\n+        and then Is_Known_Valid (Typ)\n+        and then Esize (Etype (N)) <= Esize (Typ)\n+        and then not Has_Biased_Representation (Etype (N))\n+      then\n+         return In_Range;\n+\n       --  For all other cases, result is unknown\n \n       else"}, {"sha": "b322405401f7e724dae3688f7e25dde74d1d9b36", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56d9b8a6716973e5fbba1dc5e38507022b6006/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56d9b8a6716973e5fbba1dc5e38507022b6006/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=6c56d9b8a6716973e5fbba1dc5e38507022b6006", "patch": "@@ -1318,7 +1318,8 @@ package Sem_Util is\n    --  declaration.\n \n    function Is_SPARK_Object_Reference (N : Node_Id) return Boolean;\n-   --  Determines if the tree referenced by N represents an object in SPARK\n+   --  Determines if the tree referenced by N represents an object in SPARK.\n+   --  This differs from Is_Object_Reference in that ???\n \n    function Is_Statement (N : Node_Id) return Boolean;\n    pragma Inline (Is_Statement);"}]}