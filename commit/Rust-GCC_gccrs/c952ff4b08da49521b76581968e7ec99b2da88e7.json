{"sha": "c952ff4b08da49521b76581968e7ec99b2da88e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk1MmZmNGIwOGRhNDk1MjFiNzY1ODE5NjhlN2VjOTliMmRhODhlNw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-11-16T14:02:56Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-11-16T14:02:56Z"}, "message": "expr.c (expand_expr, [...]): Refine test for when to copy misaligned data.\n\n\t* expr.c (expand_expr, case ADDR_EXPR): Refine test for when to\n\tcopy misaligned data.\n\t* varasm.c (assemble_variable): Set alignment into MEM when changed.\n\nFrom-SVN: r47089", "tree": {"sha": "645b82a170424a338299393c111daedf76451151", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/645b82a170424a338299393c111daedf76451151"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c952ff4b08da49521b76581968e7ec99b2da88e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c952ff4b08da49521b76581968e7ec99b2da88e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c952ff4b08da49521b76581968e7ec99b2da88e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c952ff4b08da49521b76581968e7ec99b2da88e7/comments", "author": null, "committer": null, "parents": [{"sha": "f4dc10d1cb94e94ee72bf6cdd1239ac2c89c99f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4dc10d1cb94e94ee72bf6cdd1239ac2c89c99f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4dc10d1cb94e94ee72bf6cdd1239ac2c89c99f8"}], "stats": {"total": 25, "additions": 20, "deletions": 5}, "files": [{"sha": "e7e264a369d667d3b377894ab439dd52a75ccc22", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c952ff4b08da49521b76581968e7ec99b2da88e7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c952ff4b08da49521b76581968e7ec99b2da88e7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c952ff4b08da49521b76581968e7ec99b2da88e7", "patch": "@@ -1,3 +1,9 @@\n+Fri Nov 16 09:06:25 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* expr.c (expand_expr, case ADDR_EXPR): Refine test for when to\n+\tcopy misaligned data.\n+\t* varasm.c (assemble_variable): Set alignment into MEM when changed.\n+\n 2001-11-16  Graham Stott  <grahams@redhat.com>\n \n \t* optabs.c (prepare_cmp_insn): Correct lossage in last change fix"}, {"sha": "92397ee4064a5247551607f5c375c9adaf28694e", "filename": "gcc/expr.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c952ff4b08da49521b76581968e7ec99b2da88e7/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c952ff4b08da49521b76581968e7ec99b2da88e7/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=c952ff4b08da49521b76581968e7ec99b2da88e7", "patch": "@@ -8649,11 +8649,19 @@ expand_expr (exp, target, tmode, modifier)\n \t      return op0;\n \t    }\n \n-\t  /* If OP0 is not aligned as least as much as the type requires,\n-\t     we need to make a temporary, copy OP0 to it, and take the\n-\t     address of the temporary.  */\n-\t  if (GET_MODE (op0) == BLKmode\n-\t      && expr_align (TREE_OPERAND (exp, 0)) > MEM_ALIGN (op0))\n+\t  /* If OP0 is not aligned as least as much as the type requires, we\n+\t     need to make a temporary, copy OP0 to it, and take the address of\n+\t     the temporary.  We want to use the alignment of the type, not of\n+\t     the operand.  Note that this is incorrect for FUNCTION_TYPE, but\n+\t     the test for BLKmode means that can't happen.  The test for\n+\t     BLKmode is because we never make mis-aligned MEMs with\n+\t     non-BLKmode.\n+\n+\t     We don't need to do this at all if the machine doesn't have\n+\t     strict alignment.  */\n+\t  if (STRICT_ALIGNMENT && GET_MODE (op0) == BLKmode\n+\t      && (TYPE_ALIGN (TREE_TYPE (TREE_OPERAND (exp, 0)))\n+\t\t  > MEM_ALIGN (op0)))\n \t    {\n \t      tree inner_type = TREE_TYPE (TREE_OPERAND (exp, 0));\n \t      rtx new"}, {"sha": "697276234b04aa8c58e39df7daa6a85545158770", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c952ff4b08da49521b76581968e7ec99b2da88e7/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c952ff4b08da49521b76581968e7ec99b2da88e7/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=c952ff4b08da49521b76581968e7ec99b2da88e7", "patch": "@@ -1615,6 +1615,7 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n   /* Reset the alignment in case we have made it tighter, so we can benefit\n      from it in get_pointer_alignment.  */\n   DECL_ALIGN (decl) = align;\n+  set_mem_align (decl_rtl, align);\n \n   /* Handle uninitialized definitions.  */\n "}]}