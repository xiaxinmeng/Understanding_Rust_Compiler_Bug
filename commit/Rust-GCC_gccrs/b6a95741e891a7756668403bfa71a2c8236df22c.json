{"sha": "b6a95741e891a7756668403bfa71a2c8236df22c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZhOTU3NDFlODkxYTc3NTY2Njg0MDNiZmE3MWEyYzgyMzZkZjIyYw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-01-24T20:46:34Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-01-24T20:46:34Z"}, "message": "num_put_members_wchar_t.cc (test03): Use _GLIBCPP_HAVE_SETENV.\n\n\n2002-01-24   Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/22_locale/num_put_members_wchar_t.cc (test03): Use\n\t_GLIBCPP_HAVE_SETENV.\n\t* testsuite/22_locale/codecvt_members_wchar_t_char.cc (test02): Same.\n\t* testsuite/22_locale/collate_members_char.cc (test02): Same.\n\t* testsuite/22_locale/ctype_members_char.cc (test03): Same.\n\t* testsuite/22_locale/ctype_members_wchar_t.cc (test03): Same.\n\t* testsuite/22_locale/messages_members_char.cc (test02): Same.\n\t* testsuite/22_locale/moneypunct_members_char.cc (test02): Same.\n\t* testsuite/22_locale/moneypunct_members_wchar_t.cc (test02): Same.\n\t* testsuite/22_locale/money_put_members_char.cc (test04): Same.\n\t* testsuite/22_locale/money_put_members_wchar_t.cc (test04): Same.\n\t* testsuite/22_locale/num_get_members_char.cc (test03): Same.\n\t* testsuite/22_locale/num_get_members_wchar_t.cc (test03): Same.\n\t* testsuite/22_locale/numpunct_members_char.cc (test02): Same.\n\t* testsuite/22_locale/numpunct_members_wchar_t.cc (test02): Same.\n\t* testsuite/22_locale/time_get_members_char.cc (test07): Same.\n\t* testsuite/22_locale/time_get_members_wchar_t.cc (test07): Same.\n\t* testsuite/22_locale/time_put_members_char.cc (test03): Same.\n\t* testsuite/22_locale/time_put_members_wchar_t.cc (test03): Same.\n\t* testsuite/22_locale/num_put_members_char.cc (test03): Same.\n\t* acinclude.m4 (GLIBCPP_CONFIGURE_TESTSUITE): Check for setenv.\n\t* aclocal.m4: Regenerate.\n\t* configure: Regenerate.\n\t* config.h.in: Regenerate.\n\nFrom-SVN: r49191", "tree": {"sha": "6fd887d55923b3b7840bfd2e48e9abf9cdf99a40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fd887d55923b3b7840bfd2e48e9abf9cdf99a40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6a95741e891a7756668403bfa71a2c8236df22c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6a95741e891a7756668403bfa71a2c8236df22c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6a95741e891a7756668403bfa71a2c8236df22c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6a95741e891a7756668403bfa71a2c8236df22c/comments", "author": null, "committer": null, "parents": [{"sha": "054117f98d07c00962b995d6a716aeb2e873f47d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/054117f98d07c00962b995d6a716aeb2e873f47d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/054117f98d07c00962b995d6a716aeb2e873f47d"}], "stats": {"total": 407, "additions": 386, "deletions": 21}, "files": [{"sha": "e9e3282ad9fe63639c66cc9476eee3f182d60e20", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b6a95741e891a7756668403bfa71a2c8236df22c", "patch": "@@ -1,3 +1,30 @@\n+2002-01-24   Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite/22_locale/num_put_members_wchar_t.cc (test03): Use\n+\t_GLIBCPP_HAVE_SETENV.\n+\t* testsuite/22_locale/codecvt_members_wchar_t_char.cc (test02): Same.\n+\t* testsuite/22_locale/collate_members_char.cc (test02): Same.\n+\t* testsuite/22_locale/ctype_members_char.cc (test03): Same.\n+\t* testsuite/22_locale/ctype_members_wchar_t.cc (test03): Same.\n+\t* testsuite/22_locale/messages_members_char.cc (test02): Same.\n+\t* testsuite/22_locale/moneypunct_members_char.cc (test02): Same.\n+\t* testsuite/22_locale/moneypunct_members_wchar_t.cc (test02): Same.\n+\t* testsuite/22_locale/money_put_members_char.cc (test04): Same.\n+\t* testsuite/22_locale/money_put_members_wchar_t.cc (test04): Same.\n+\t* testsuite/22_locale/num_get_members_char.cc (test03): Same.\n+\t* testsuite/22_locale/num_get_members_wchar_t.cc (test03): Same.\n+\t* testsuite/22_locale/numpunct_members_char.cc (test02): Same.\n+\t* testsuite/22_locale/numpunct_members_wchar_t.cc (test02): Same.\n+\t* testsuite/22_locale/time_get_members_char.cc (test07): Same.\n+\t* testsuite/22_locale/time_get_members_wchar_t.cc (test07): Same.\n+\t* testsuite/22_locale/time_put_members_char.cc (test03): Same.\n+\t* testsuite/22_locale/time_put_members_wchar_t.cc (test03): Same.\n+\t* testsuite/22_locale/num_put_members_char.cc (test03): Same.\n+\t* acinclude.m4 (GLIBCPP_CONFIGURE_TESTSUITE): Check for setenv.\n+\t* aclocal.m4: Regenerate.\n+\t* configure: Regenerate.\n+\t* config.h.in: Regenerate.\n+\t\n 2002-01-23  Loren Rittle <ljrittle@acm.org>\n \n \t* testsuite/thread/pthread1.cc: New test."}, {"sha": "8b0f4b2bc7bbb62383de4a6b62f3252a25223735", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=b6a95741e891a7756668403bfa71a2c8236df22c", "patch": "@@ -1936,6 +1936,9 @@ dnl\n dnl GLIBCPP_CONFIGURE_TESTSUITE  [no args]\n AC_DEFUN(GLIBCPP_CONFIGURE_TESTSUITE, [\n   GLIBCPP_CHECK_SETRLIMIT\n+\n+  # Look for setenv, so that extended locale tests can be performed.\n+  AC_CHECK_FUNCS(setenv)\n ])\n \n "}, {"sha": "617f2e02cf6f98a5860f8e5d1539eef5725d80e8", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=b6a95741e891a7756668403bfa71a2c8236df22c", "patch": "@@ -1948,6 +1948,9 @@ dnl\n dnl GLIBCPP_CONFIGURE_TESTSUITE  [no args]\n AC_DEFUN(GLIBCPP_CONFIGURE_TESTSUITE, [\n   GLIBCPP_CHECK_SETRLIMIT\n+\n+  # Look for setenv, so that extended locale tests can be performed.\n+  AC_CHECK_FUNCS(setenv)\n ])\n \n "}, {"sha": "e254c8a777ed7509e5b872a96a120af94c4e68e7", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=b6a95741e891a7756668403bfa71a2c8236df22c", "patch": "@@ -498,6 +498,9 @@\n /* Define if you have the qfpclass function.  */\n #undef HAVE_QFPCLASS\n \n+/* Define if you have the setenv function.  */\n+#undef HAVE_SETENV\n+\n /* Define if you have the signbitl function.  */\n #undef HAVE_SIGNBITL\n "}, {"sha": "110ed18cb00fb05eaac8b045a74a0d60037c1d4b", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 61, "deletions": 4, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=b6a95741e891a7756668403bfa71a2c8236df22c", "patch": "@@ -18998,6 +18998,63 @@ EOF\n   echo \"$ac_t\"\"$ac_mem_limits\" 1>&6\n \n \n+  # Look for setenv, so that extended locale tests can be performed.\n+  for ac_func in setenv\n+do\n+echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n+echo \"configure:19006: checking for $ac_func\" >&5\n+if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n+  echo $ac_n \"(cached) $ac_c\" 1>&6\n+else\n+  cat > conftest.$ac_ext <<EOF\n+#line 19011 \"configure\"\n+#include \"confdefs.h\"\n+/* System header to define __stub macros and hopefully few prototypes,\n+    which can conflict with char $ac_func(); below.  */\n+#include <assert.h>\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+/* We use char because int might match the return type of a gcc2\n+    builtin and then its argument prototype would still apply.  */\n+char $ac_func();\n+\n+int main() {\n+\n+/* The GNU C library defines this for functions which it implements\n+    to always fail with ENOSYS.  Some functions are actually named\n+    something starting with __ and the normal name is an alias.  */\n+#if defined (__stub_$ac_func) || defined (__stub___$ac_func)\n+choke me\n+#else\n+$ac_func();\n+#endif\n+\n+; return 0; }\n+EOF\n+if { (eval echo configure:19034: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+  rm -rf conftest*\n+  eval \"ac_cv_func_$ac_func=yes\"\n+else\n+  echo \"configure: failed program was:\" >&5\n+  cat conftest.$ac_ext >&5\n+  rm -rf conftest*\n+  eval \"ac_cv_func_$ac_func=no\"\n+fi\n+rm -f conftest*\n+fi\n+\n+if eval \"test \\\"`echo '$ac_cv_func_'$ac_func`\\\" = yes\"; then\n+  echo \"$ac_t\"\"yes\" 1>&6\n+    ac_tr_func=HAVE_`echo $ac_func | tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`\n+  cat >> confdefs.h <<EOF\n+#define $ac_tr_func 1\n+EOF\n+ \n+else\n+  echo \"$ac_t\"\"no\" 1>&6\n+fi\n+done\n+\n+\n fi\n \n \n@@ -19087,13 +19144,13 @@ glibcpp_toolexeclibdir=no\n glibcpp_prefixdir=${prefix}\n \n echo $ac_n \"checking for interface version number\"\"... $ac_c\" 1>&6\n-echo \"configure:19091: checking for interface version number\" >&5\n+echo \"configure:19148: checking for interface version number\" >&5\n libstdcxx_interface=$INTERFACE\n echo \"$ac_t\"\"$libstdcxx_interface\" 1>&6\n \n # Process the option --with-gxx-include-dir=<path to include-files directory>\n echo $ac_n \"checking for --with-gxx-include-dir\"\"... $ac_c\" 1>&6\n-echo \"configure:19097: checking for --with-gxx-include-dir\" >&5\n+echo \"configure:19154: checking for --with-gxx-include-dir\" >&5\n # Check whether --with-gxx-include-dir or --without-gxx-include-dir was given.\n if test \"${with_gxx_include_dir+set}\" = set; then\n   withval=\"$with_gxx_include_dir\"\n@@ -19117,7 +19174,7 @@ echo \"$ac_t\"\"$gxx_include_dir\" 1>&6\n \n # Process the option \"--enable-version-specific-runtime-libs\"\n echo $ac_n \"checking for --enable-version-specific-runtime-libs\"\"... $ac_c\" 1>&6\n-echo \"configure:19121: checking for --enable-version-specific-runtime-libs\" >&5\n+echo \"configure:19178: checking for --enable-version-specific-runtime-libs\" >&5\n # Check whether --enable-version-specific-runtime-libs or --disable-version-specific-runtime-libs was given.\n if test \"${enable_version_specific_runtime_libs+set}\" = set; then\n   enableval=\"$enable_version_specific_runtime_libs\"\n@@ -19164,7 +19221,7 @@ if test x\"$glibcpp_toolexecdir\" = x\"no\"; then\n fi\n \n echo $ac_n \"checking for install location\"\"... $ac_c\" 1>&6\n-echo \"configure:19168: checking for install location\" >&5\n+echo \"configure:19225: checking for install location\" >&5\n echo \"$ac_t\"\"$gxx_include_dir\" 1>&6\n \n "}, {"sha": "367ee986f4765692ace2b1eb516b1ca4574d0a83", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 240, "deletions": 14, "changes": 254, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=b6a95741e891a7756668403bfa71a2c8236df22c", "patch": "@@ -158,53 +158,279 @@ glibcpp_builddir = @glibcpp_builddir@\n \n bits_srcdir = ${glibcpp_srcdir}/include/bits\n bits_builddir = ./bits\n-bits_headers =  \t${bits_srcdir}/basic_file.h \t${bits_srcdir}/basic_ios.h \t${bits_srcdir}/basic_ios.tcc \t${bits_srcdir}/basic_string.h \t${bits_srcdir}/basic_string.tcc \t${bits_srcdir}/boost_concept_check.h \t${bits_srcdir}/char_traits.h \t${bits_srcdir}/codecvt.h \t${bits_srcdir}/concept_check.h \t${bits_srcdir}/cpp_type_traits.h \t${bits_srcdir}/fpos.h \t${bits_srcdir}/fstream.tcc \t${bits_srcdir}/functexcept.h \t${bits_srcdir}/generic_shadow.h \t${bits_srcdir}/gslice.h \t${bits_srcdir}/gslice_array.h \t${bits_srcdir}/indirect_array.h \t${bits_srcdir}/ios_base.h \t${bits_srcdir}/istream.tcc \t${bits_srcdir}/locale_facets.h \t${bits_srcdir}/locale_facets.tcc \t${bits_srcdir}/localefwd.h \t${bits_srcdir}/mask_array.h \t${bits_srcdir}/ostream.tcc \t${bits_srcdir}/pthread_allocimpl.h \t${bits_srcdir}/stream_iterator.h \t${bits_srcdir}/streambuf_iterator.h \t${bits_srcdir}/slice.h \t${bits_srcdir}/slice_array.h \t${bits_srcdir}/sstream.tcc \t${bits_srcdir}/stl_algo.h \t${bits_srcdir}/stl_algobase.h \t${bits_srcdir}/stl_alloc.h \t${bits_srcdir}/stl_bvector.h \t${bits_srcdir}/stl_construct.h \t${bits_srcdir}/stl_deque.h \t${bits_srcdir}/stl_function.h \t${bits_srcdir}/stl_heap.h \t${bits_srcdir}/stl_iterator.h \t${bits_srcdir}/stl_iterator_base_funcs.h \t${bits_srcdir}/stl_iterator_base_types.h \t${bits_srcdir}/stl_list.h \t${bits_srcdir}/stl_map.h \t${bits_srcdir}/stl_multimap.h \t${bits_srcdir}/stl_multiset.h \t${bits_srcdir}/stl_numeric.h \t${bits_srcdir}/stl_pair.h \t${bits_srcdir}/stl_pthread_alloc.h \t${bits_srcdir}/stl_queue.h \t${bits_srcdir}/stl_raw_storage_iter.h \t${bits_srcdir}/stl_relops.h \t${bits_srcdir}/stl_set.h \t${bits_srcdir}/stl_stack.h \t${bits_srcdir}/stl_tempbuf.h \t${bits_srcdir}/stl_threads.h \t${bits_srcdir}/stl_tree.h \t${bits_srcdir}/stl_uninitialized.h \t${bits_srcdir}/stl_vector.h \t${bits_srcdir}/streambuf.tcc \t${bits_srcdir}/stringfwd.h \t${bits_srcdir}/type_traits.h \t${bits_srcdir}/valarray_array.h \t${bits_srcdir}/valarray_array.tcc \t${bits_srcdir}/valarray_meta.h\n+bits_headers = \\\n+\t${bits_srcdir}/basic_file.h \\\n+\t${bits_srcdir}/basic_ios.h \\\n+\t${bits_srcdir}/basic_ios.tcc \\\n+\t${bits_srcdir}/basic_string.h \\\n+\t${bits_srcdir}/basic_string.tcc \\\n+\t${bits_srcdir}/boost_concept_check.h \\\n+\t${bits_srcdir}/char_traits.h \\\n+\t${bits_srcdir}/codecvt.h \\\n+\t${bits_srcdir}/concept_check.h \\\n+\t${bits_srcdir}/cpp_type_traits.h \\\n+\t${bits_srcdir}/fpos.h \\\n+\t${bits_srcdir}/fstream.tcc \\\n+\t${bits_srcdir}/functexcept.h \\\n+\t${bits_srcdir}/generic_shadow.h \\\n+\t${bits_srcdir}/gslice.h \\\n+\t${bits_srcdir}/gslice_array.h \\\n+\t${bits_srcdir}/indirect_array.h \\\n+\t${bits_srcdir}/ios_base.h \\\n+\t${bits_srcdir}/istream.tcc \\\n+\t${bits_srcdir}/locale_facets.h \\\n+\t${bits_srcdir}/locale_facets.tcc \\\n+\t${bits_srcdir}/localefwd.h \\\n+\t${bits_srcdir}/mask_array.h \\\n+\t${bits_srcdir}/ostream.tcc \\\n+\t${bits_srcdir}/pthread_allocimpl.h \\\n+\t${bits_srcdir}/stream_iterator.h \\\n+\t${bits_srcdir}/streambuf_iterator.h \\\n+\t${bits_srcdir}/slice.h \\\n+\t${bits_srcdir}/slice_array.h \\\n+\t${bits_srcdir}/sstream.tcc \\\n+\t${bits_srcdir}/stl_algo.h \\\n+\t${bits_srcdir}/stl_algobase.h \\\n+\t${bits_srcdir}/stl_alloc.h \\\n+\t${bits_srcdir}/stl_bvector.h \\\n+\t${bits_srcdir}/stl_construct.h \\\n+\t${bits_srcdir}/stl_deque.h \\\n+\t${bits_srcdir}/stl_function.h \\\n+\t${bits_srcdir}/stl_heap.h \\\n+\t${bits_srcdir}/stl_iterator.h \\\n+\t${bits_srcdir}/stl_iterator_base_funcs.h \\\n+\t${bits_srcdir}/stl_iterator_base_types.h \\\n+\t${bits_srcdir}/stl_list.h \\\n+\t${bits_srcdir}/stl_map.h \\\n+\t${bits_srcdir}/stl_multimap.h \\\n+\t${bits_srcdir}/stl_multiset.h \\\n+\t${bits_srcdir}/stl_numeric.h \\\n+\t${bits_srcdir}/stl_pair.h \\\n+\t${bits_srcdir}/stl_pthread_alloc.h \\\n+\t${bits_srcdir}/stl_queue.h \\\n+\t${bits_srcdir}/stl_raw_storage_iter.h \\\n+\t${bits_srcdir}/stl_relops.h \\\n+\t${bits_srcdir}/stl_set.h \\\n+\t${bits_srcdir}/stl_stack.h \\\n+\t${bits_srcdir}/stl_tempbuf.h \\\n+\t${bits_srcdir}/stl_threads.h \\\n+\t${bits_srcdir}/stl_tree.h \\\n+\t${bits_srcdir}/stl_uninitialized.h \\\n+\t${bits_srcdir}/stl_vector.h \\\n+\t${bits_srcdir}/streambuf.tcc \\\n+\t${bits_srcdir}/stringfwd.h \\\n+\t${bits_srcdir}/type_traits.h \\\n+\t${bits_srcdir}/valarray_array.h \\\n+\t${bits_srcdir}/valarray_array.tcc \\\n+\t${bits_srcdir}/valarray_meta.h\n \n \n backward_srcdir = ${glibcpp_srcdir}/include/backward\n backward_builddir = ./backward\n-backward_headers =  \t${backward_srcdir}/complex.h \t${backward_srcdir}/iomanip.h \t${backward_srcdir}/istream.h \t${backward_srcdir}/ostream.h \t${backward_srcdir}/stream.h \t${backward_srcdir}/streambuf.h \t${backward_srcdir}/algo.h \t${backward_srcdir}/algobase.h \t${backward_srcdir}/alloc.h \t${backward_srcdir}/bvector.h \t${backward_srcdir}/defalloc.h \t${backward_srcdir}/deque.h \t${backward_srcdir}/function.h \t${backward_srcdir}/hash_map.h \t${backward_srcdir}/hash_set.h \t${backward_srcdir}/hashtable.h \t${backward_srcdir}/heap.h \t${backward_srcdir}/iostream.h \t${backward_srcdir}/iterator.h \t${backward_srcdir}/list.h \t${backward_srcdir}/map.h \t${backward_srcdir}/multimap.h \t${backward_srcdir}/new.h \t${backward_srcdir}/multiset.h \t${backward_srcdir}/pair.h \t${backward_srcdir}/queue.h \t${backward_srcdir}/rope.h \t${backward_srcdir}/set.h \t${backward_srcdir}/slist.h \t${backward_srcdir}/stack.h \t${backward_srcdir}/tempbuf.h \t${backward_srcdir}/tree.h \t${backward_srcdir}/vector.h \t${backward_srcdir}/fstream.h \t${backward_srcdir}/strstream.h \t${backward_srcdir}/strstream \t${backward_srcdir}/backward_warning.h\n+backward_headers = \\\n+\t${backward_srcdir}/complex.h \\\n+\t${backward_srcdir}/iomanip.h \\\n+\t${backward_srcdir}/istream.h \\\n+\t${backward_srcdir}/ostream.h \\\n+\t${backward_srcdir}/stream.h \\\n+\t${backward_srcdir}/streambuf.h \\\n+\t${backward_srcdir}/algo.h \\\n+\t${backward_srcdir}/algobase.h \\\n+\t${backward_srcdir}/alloc.h \\\n+\t${backward_srcdir}/bvector.h \\\n+\t${backward_srcdir}/defalloc.h \\\n+\t${backward_srcdir}/deque.h \\\n+\t${backward_srcdir}/function.h \\\n+\t${backward_srcdir}/hash_map.h \\\n+\t${backward_srcdir}/hash_set.h \\\n+\t${backward_srcdir}/hashtable.h \\\n+\t${backward_srcdir}/heap.h \\\n+\t${backward_srcdir}/iostream.h \\\n+\t${backward_srcdir}/iterator.h \\\n+\t${backward_srcdir}/list.h \\\n+\t${backward_srcdir}/map.h \\\n+\t${backward_srcdir}/multimap.h \\\n+\t${backward_srcdir}/new.h \\\n+\t${backward_srcdir}/multiset.h \\\n+\t${backward_srcdir}/pair.h \\\n+\t${backward_srcdir}/queue.h \\\n+\t${backward_srcdir}/rope.h \\\n+\t${backward_srcdir}/set.h \\\n+\t${backward_srcdir}/slist.h \\\n+\t${backward_srcdir}/stack.h \\\n+\t${backward_srcdir}/tempbuf.h \\\n+\t${backward_srcdir}/tree.h \\\n+\t${backward_srcdir}/vector.h \\\n+\t${backward_srcdir}/fstream.h \\\n+\t${backward_srcdir}/strstream.h \\\n+\t${backward_srcdir}/strstream \\\n+\t${backward_srcdir}/backward_warning.h\n \n \n ext_srcdir = ${glibcpp_srcdir}/include/ext\n ext_builddir = ./ext\n-ext_headers =  \t${ext_srcdir}/algorithm \t${ext_srcdir}/functional \t${ext_srcdir}/hash_map \t${ext_srcdir}/hash_set \t${ext_srcdir}/iterator \t${ext_srcdir}/memory \t${ext_srcdir}/numeric \t${ext_srcdir}/rb_tree \t${ext_srcdir}/rope \t${ext_srcdir}/ropeimpl.h \t${ext_srcdir}/slist \t${ext_srcdir}/stl_hash_fun.h \t${ext_srcdir}/stl_hashtable.h \t${ext_srcdir}/stl_rope.h\n+ext_headers = \\\n+\t${ext_srcdir}/algorithm \\\n+\t${ext_srcdir}/functional \\\n+\t${ext_srcdir}/hash_map \\\n+\t${ext_srcdir}/hash_set \\\n+\t${ext_srcdir}/iterator \\\n+\t${ext_srcdir}/memory \\\n+\t${ext_srcdir}/numeric \\\n+\t${ext_srcdir}/rb_tree \\\n+\t${ext_srcdir}/rope \\\n+\t${ext_srcdir}/ropeimpl.h \\\n+\t${ext_srcdir}/slist \\\n+\t${ext_srcdir}/stl_hash_fun.h \\\n+\t${ext_srcdir}/stl_hashtable.h \\\n+\t${ext_srcdir}/stl_rope.h\n \n \n # This is the common subset of files that all three \"C\" header models use.\n c_base_srcdir = @C_INCLUDE_DIR@\n c_base_builddir = .\n-c_base_headers =  \t${c_base_srcdir}/std_cassert.h \t${c_base_srcdir}/std_cctype.h \t${c_base_srcdir}/std_cerrno.h \t${c_base_srcdir}/std_cfloat.h \t${c_base_srcdir}/std_ciso646.h \t${c_base_srcdir}/std_climits.h \t${c_base_srcdir}/std_clocale.h \t${c_base_srcdir}/std_cmath.h \t${c_base_srcdir}/std_csetjmp.h \t${c_base_srcdir}/std_csignal.h \t${c_base_srcdir}/std_cstdarg.h \t${c_base_srcdir}/std_cstddef.h \t${c_base_srcdir}/std_cstdio.h \t${c_base_srcdir}/std_cstdlib.h \t${c_base_srcdir}/std_cstring.h \t${c_base_srcdir}/std_ctime.h \t${c_base_srcdir}/std_cwchar.h \t${c_base_srcdir}/std_cwctype.h \n+c_base_headers = \\\n+\t${c_base_srcdir}/std_cassert.h \\\n+\t${c_base_srcdir}/std_cctype.h \\\n+\t${c_base_srcdir}/std_cerrno.h \\\n+\t${c_base_srcdir}/std_cfloat.h \\\n+\t${c_base_srcdir}/std_ciso646.h \\\n+\t${c_base_srcdir}/std_climits.h \\\n+\t${c_base_srcdir}/std_clocale.h \\\n+\t${c_base_srcdir}/std_cmath.h \\\n+\t${c_base_srcdir}/std_csetjmp.h \\\n+\t${c_base_srcdir}/std_csignal.h \\\n+\t${c_base_srcdir}/std_cstdarg.h \\\n+\t${c_base_srcdir}/std_cstddef.h \\\n+\t${c_base_srcdir}/std_cstdio.h \\\n+\t${c_base_srcdir}/std_cstdlib.h \\\n+\t${c_base_srcdir}/std_cstring.h \\\n+\t${c_base_srcdir}/std_ctime.h \\\n+\t${c_base_srcdir}/std_cwchar.h \\\n+\t${c_base_srcdir}/std_cwctype.h \n \n # Some of the \"C\" headers need extra files.\n-c_base_headers_extra =  \t${c_base_srcdir}/cmath.tcc \n-\n-c_base_headers_rename =  \tcassert \tcctype \tcerrno \tcfloat \tciso646 \tclimits \tclocale \tcmath \tcsetjmp \tcsignal \tcstdarg \tcstddef \tcstdio \tcstdlib \tcstring \tctime \tcwchar \tcwctype \n+c_base_headers_extra = \\\n+\t${c_base_srcdir}/cmath.tcc \n+\n+c_base_headers_rename = \\\n+\tcassert \\\n+\tcctype \\\n+\tcerrno \\\n+\tcfloat \\\n+\tciso646 \\\n+\tclimits \\\n+\tclocale \\\n+\tcmath \\\n+\tcsetjmp \\\n+\tcsignal \\\n+\tcstdarg \\\n+\tcstddef \\\n+\tcstdio \\\n+\tcstdlib \\\n+\tcstring \\\n+\tctime \\\n+\tcwchar \\\n+\tcwctype \n \n \n std_srcdir = ${glibcpp_srcdir}/include/std\n std_builddir = .\n-std_headers =  \t${std_srcdir}/std_algorithm.h \t${std_srcdir}/std_bitset.h \t${std_srcdir}/std_complex.h \t${std_srcdir}/std_deque.h \t${std_srcdir}/std_fstream.h \t${std_srcdir}/std_functional.h \t${std_srcdir}/std_iomanip.h \t${std_srcdir}/std_ios.h \t${std_srcdir}/std_iosfwd.h \t${std_srcdir}/std_iostream.h \t${std_srcdir}/std_istream.h \t${std_srcdir}/std_iterator.h \t${std_srcdir}/std_limits.h \t${std_srcdir}/std_list.h \t${std_srcdir}/std_locale.h \t${std_srcdir}/std_map.h \t${std_srcdir}/std_memory.h \t${std_srcdir}/std_numeric.h \t${std_srcdir}/std_ostream.h \t${std_srcdir}/std_queue.h \t${std_srcdir}/std_set.h \t${std_srcdir}/std_sstream.h \t${std_srcdir}/std_stack.h \t${std_srcdir}/std_stdexcept.h \t${std_srcdir}/std_streambuf.h \t${std_srcdir}/std_string.h \t${std_srcdir}/std_utility.h \t${std_srcdir}/std_valarray.h \t${std_srcdir}/std_vector.h\n+std_headers = \\\n+\t${std_srcdir}/std_algorithm.h \\\n+\t${std_srcdir}/std_bitset.h \\\n+\t${std_srcdir}/std_complex.h \\\n+\t${std_srcdir}/std_deque.h \\\n+\t${std_srcdir}/std_fstream.h \\\n+\t${std_srcdir}/std_functional.h \\\n+\t${std_srcdir}/std_iomanip.h \\\n+\t${std_srcdir}/std_ios.h \\\n+\t${std_srcdir}/std_iosfwd.h \\\n+\t${std_srcdir}/std_iostream.h \\\n+\t${std_srcdir}/std_istream.h \\\n+\t${std_srcdir}/std_iterator.h \\\n+\t${std_srcdir}/std_limits.h \\\n+\t${std_srcdir}/std_list.h \\\n+\t${std_srcdir}/std_locale.h \\\n+\t${std_srcdir}/std_map.h \\\n+\t${std_srcdir}/std_memory.h \\\n+\t${std_srcdir}/std_numeric.h \\\n+\t${std_srcdir}/std_ostream.h \\\n+\t${std_srcdir}/std_queue.h \\\n+\t${std_srcdir}/std_set.h \\\n+\t${std_srcdir}/std_sstream.h \\\n+\t${std_srcdir}/std_stack.h \\\n+\t${std_srcdir}/std_stdexcept.h \\\n+\t${std_srcdir}/std_streambuf.h \\\n+\t${std_srcdir}/std_string.h \\\n+\t${std_srcdir}/std_utility.h \\\n+\t${std_srcdir}/std_valarray.h \\\n+\t${std_srcdir}/std_vector.h\n \n # Renamed at build time. \n-std_headers_rename =  \talgorithm \tbitset \tcomplex \tdeque \tfstream \tfunctional \tiomanip \tios \tiosfwd \tiostream \tistream \titerator \tlimits \tlist \tlocale \tmap \tmemory \tnumeric \tostream \tqueue \tset \tsstream \tstack \tstdexcept \tstreambuf \tstring \tutility \tvalarray \tvector\n+std_headers_rename = \\\n+\talgorithm \\\n+\tbitset \\\n+\tcomplex \\\n+\tdeque \\\n+\tfstream \\\n+\tfunctional \\\n+\tiomanip \\\n+\tios \\\n+\tiosfwd \\\n+\tiostream \\\n+\tistream \\\n+\titerator \\\n+\tlimits \\\n+\tlist \\\n+\tlocale \\\n+\tmap \\\n+\tmemory \\\n+\tnumeric \\\n+\tostream \\\n+\tqueue \\\n+\tset \\\n+\tsstream \\\n+\tstack \\\n+\tstdexcept \\\n+\tstreambuf \\\n+\tstring \\\n+\tutility \\\n+\tvalarray \\\n+\tvector\n \n \n target_srcdir = ${glibcpp_srcdir}/@OS_INC_SRCDIR@\n target_builddir = ./${target_alias}/bits\n-target_headers =  \t${target_srcdir}/ctype_base.h \t${target_srcdir}/ctype_inline.h \t${target_srcdir}/ctype_noninline.h \t${target_srcdir}/os_defines.h \t${glibcpp_srcdir}/@ATOMICITY_INC_SRCDIR@/atomicity.h \t${glibcpp_srcdir}/@CPU_LIMITS_INC_SRCDIR@/cpu_limits.h \n+target_headers = \\\n+\t${target_srcdir}/ctype_base.h \\\n+\t${target_srcdir}/ctype_inline.h \\\n+\t${target_srcdir}/ctype_noninline.h \\\n+\t${target_srcdir}/os_defines.h \\\n+\t${glibcpp_srcdir}/@ATOMICITY_INC_SRCDIR@/atomicity.h \\\n+\t${glibcpp_srcdir}/@CPU_LIMITS_INC_SRCDIR@/cpu_limits.h \n \n # These extra_target_headers files are all built with ad hoc naming rules.\n-extra_target_headers =  \t${target_builddir}/basic_file_model.h \t${target_builddir}/c++config.h \t${target_builddir}/c++io.h \t${target_builddir}/c++locale.h \t${target_builddir}/messages_members.h \t${target_builddir}/codecvt_specializations.h\n+extra_target_headers = \\\n+\t${target_builddir}/basic_file_model.h \\\n+\t${target_builddir}/c++config.h \\\n+\t${target_builddir}/c++io.h \\\n+\t${target_builddir}/c++locale.h \\\n+\t${target_builddir}/messages_members.h \\\n+\t${target_builddir}/codecvt_specializations.h\n \n \n thread_builddir = ./${target_alias}/bits\n-thread_headers =  \t${thread_builddir}/gthr.h \t${thread_builddir}/gthr-single.h \t${thread_builddir}/gthr-default.h\n+thread_headers = \\\n+\t${thread_builddir}/gthr.h \\\n+\t${thread_builddir}/gthr-single.h \\\n+\t${thread_builddir}/gthr-default.h\n \n \n # List of all timestamp files.  By keeping only one copy of this list, both\n # CLEANFILES and all-local are kept up-to-date.\n-allstamps = stamp-std stamp-bits stamp-c_base stamp-backward stamp-ext \tstamp-target stamp-thread \n+allstamps = stamp-std stamp-bits stamp-c_base stamp-backward stamp-ext \\\n+\tstamp-target stamp-thread \n \n \n # Target includes for threads\n@@ -227,7 +453,7 @@ DIST_COMMON =  Makefile.am Makefile.in\n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = tar\n+TAR = gtar\n GZIP_ENV = --best\n all: all-redirect\n .SUFFIXES:"}, {"sha": "a08695bc6d1b3adabd11756b08fa04355f26cd3a", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=b6a95741e891a7756668403bfa71a2c8236df22c", "patch": "@@ -464,7 +464,7 @@ namespace std\n       return *this;\n     }\n \n-  // 27.6.2.5.4 Character inserters\n+  // 27.6.2.5.4 Character inserters.\n   template<typename _CharT, typename _Traits>\n     basic_ostream<_CharT, _Traits>&\n     operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)\n@@ -499,7 +499,7 @@ namespace std\n       return __out;\n     }\n   \n-  // Specialization\n+  // Specializations.\n   template <class _Traits> \n     basic_ostream<char, _Traits>&\n     operator<<(basic_ostream<char, _Traits>& __out, char __c)\n@@ -614,7 +614,7 @@ namespace std\n       return __out;\n     }\n \n-  // Partial specializationss\n+  // Partial specializations.\n   template<class _Traits>\n     basic_ostream<char, _Traits>&\n     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)"}, {"sha": "97c4201ee319bba05c307134329fdd9e585c4a9c", "filename": "libstdc++-v3/testsuite/22_locale/codecvt_members_char_char.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_members_char_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_members_char_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_members_char_char.cc?ref=b6a95741e891a7756668403bfa71a2c8236df22c", "patch": "@@ -82,6 +82,7 @@ void test01()\n // libstdc++/5280\n void test02()\n {\n+#ifdef _GLIBCPP_HAVE_SETENV \n   // Set the global locale to non-\"C\".\n   std::locale loc_de(\"de_DE\");\n   std::locale::global(loc_de);\n@@ -93,6 +94,7 @@ void test02()\n       test01();\n       setenv(\"LANG\", oldLANG, 1);\n     }\n+#endif\n }\n \n int main ()"}, {"sha": "e9ce1b2c63ca8f99185c445fb72b71b2b2a5e494", "filename": "libstdc++-v3/testsuite/22_locale/codecvt_members_wchar_t_char.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_members_wchar_t_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_members_wchar_t_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_members_wchar_t_char.cc?ref=b6a95741e891a7756668403bfa71a2c8236df22c", "patch": "@@ -114,6 +114,7 @@ void test01()\n // libstdc++/5280\n void test02()\n {\n+#ifdef _GLIBCPP_HAVE_SETENV \n   // Set the global locale to non-\"C\".\n   std::locale loc_de(\"de_DE\");\n   std::locale::global(loc_de);\n@@ -125,6 +126,7 @@ void test02()\n       test01();\n       setenv(\"LANG\", oldLANG, 1);\n     }\n+#endif\n }\n #endif /* !defined(_GLIBCPP_USE_WCHAR_T) */\n "}, {"sha": "92c4d3c73b0a758448e1af415529237322eb32b9", "filename": "libstdc++-v3/testsuite/22_locale/collate_members_char.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_members_char.cc?ref=b6a95741e891a7756668403bfa71a2c8236df22c", "patch": "@@ -132,6 +132,7 @@ void test01()\n // libstdc++/5280\n void test02()\n {\n+#ifdef _GLIBCPP_HAVE_SETENV \n   // Set the global locale to non-\"C\".\n   std::locale loc_de(\"de_DE\");\n   std::locale::global(loc_de);\n@@ -143,6 +144,7 @@ void test02()\n       test01();\n       setenv(\"LANG\", oldLANG, 1);\n     }\n+#endif\n }\n \n int main()"}, {"sha": "f9c2bd97c392a13e337d3c592d5f09fcba428f56", "filename": "libstdc++-v3/testsuite/22_locale/collate_members_wchar_t.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_members_wchar_t.cc?ref=b6a95741e891a7756668403bfa71a2c8236df22c", "patch": "@@ -132,6 +132,7 @@ void test01()\n // libstdc++/5280\n void test02()\n {\n+#ifdef _GLIBCPP_HAVE_SETENV \n   // Set the global locale to non-\"C\".\n   std::locale loc_de(\"de_DE\");\n   std::locale::global(loc_de);\n@@ -143,6 +144,7 @@ void test02()\n       test01();\n       setenv(\"LANG\", oldLANG, 1);\n     }\n+#endif\n }\n #endif\n "}, {"sha": "96ccafb35b7a914c34d6ca8d0b621b4f141347d9", "filename": "libstdc++-v3/testsuite/22_locale/ctype_members_char.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_members_char.cc?ref=b6a95741e891a7756668403bfa71a2c8236df22c", "patch": "@@ -246,6 +246,7 @@ class comma_ctype: public std::ctype<char>\n // libstdc++/5280\n void test03()\n {\n+#ifdef _GLIBCPP_HAVE_SETENV \n   // Set the global locale to non-\"C\".\n   std::locale loc_de(\"de_DE\");\n   std::locale::global(loc_de);\n@@ -258,6 +259,7 @@ void test03()\n       test02();\n       setenv(\"LANG\", oldLANG, 1);\n     }\n+#endif\n }\n \n int main() "}, {"sha": "448d937f0c4c5999f1bc6345065e860eee0b9e84", "filename": "libstdc++-v3/testsuite/22_locale/ctype_members_wchar_t.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_members_wchar_t.cc?ref=b6a95741e891a7756668403bfa71a2c8236df22c", "patch": "@@ -100,6 +100,7 @@ void test01()\n // libstdc++/5280\n void test03()\n {\n+#ifdef _GLIBCPP_HAVE_SETENV \n   // Set the global locale to non-\"C\".\n   std::locale loc_de(\"de_DE\");\n   std::locale::global(loc_de);\n@@ -111,6 +112,7 @@ void test03()\n       test01();\n       setenv(\"LANG\", oldLANG, 1);\n     }\n+#endif\n }\n #endif /* !defined(_GLIBCPP_USE_WCHAR_T) */\n "}, {"sha": "405e4ee5379f8a82e5c17c70b748afc3604d3dfb", "filename": "libstdc++-v3/testsuite/22_locale/messages_members_char.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_members_char.cc?ref=b6a95741e891a7756668403bfa71a2c8236df22c", "patch": "@@ -84,6 +84,7 @@ void test01()\n // libstdc++/5280\n void test02()\n {\n+#ifdef _GLIBCPP_HAVE_SETENV \n   // Set the global locale to non-\"C\".\n   std::locale loc_de(\"de_DE\");\n   std::locale::global(loc_de);\n@@ -95,6 +96,7 @@ void test02()\n       test01();\n       setenv(\"LANG\", oldLANG, 1);\n     }\n+#endif\n }\n \n int main()"}, {"sha": "4ec1b3fa7a24bac171a92cf45a3bbb19b217dfad", "filename": "libstdc++-v3/testsuite/22_locale/money_get_members_char.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_char.cc?ref=b6a95741e891a7756668403bfa71a2c8236df22c", "patch": "@@ -292,6 +292,7 @@ void test03()\n // libstdc++/5280\n void test04()\n {\n+#ifdef _GLIBCPP_HAVE_SETENV \n   // Set the global locale to non-\"C\".\n   std::locale loc_de(\"de_DE\");\n   std::locale::global(loc_de);\n@@ -305,6 +306,7 @@ void test04()\n       test03();\n       setenv(\"LANG\", oldLANG, 1);\n     }\n+#endif\n }\n \n int main()"}, {"sha": "2fd8d6689e567d3b63dae1be21c0dc0f5a466d92", "filename": "libstdc++-v3/testsuite/22_locale/money_get_members_wchar_t.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_wchar_t.cc?ref=b6a95741e891a7756668403bfa71a2c8236df22c", "patch": "@@ -294,6 +294,7 @@ void test03()\n // libstdc++/5280\n void test04()\n {\n+#ifdef _GLIBCPP_HAVE_SETENV \n   // Set the global locale to non-\"C\".\n   std::locale loc_de(\"de_DE\");\n   std::locale::global(loc_de);\n@@ -307,6 +308,7 @@ void test04()\n       test03();\n       setenv(\"LANG\", oldLANG, 1);\n     }\n+#endif\n }\n #endif\n "}, {"sha": "ad47695c7978b7bfe807ac72756cf5b1e991eadf", "filename": "libstdc++-v3/testsuite/22_locale/money_put_members_char.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_char.cc?ref=b6a95741e891a7756668403bfa71a2c8236df22c", "patch": "@@ -286,6 +286,7 @@ void test03()\n // libstdc++/5280\n void test04()\n {\n+#ifdef _GLIBCPP_HAVE_SETENV \n   // Set the global locale to non-\"C\".\n   std::locale loc_de(\"de_DE\");\n   std::locale::global(loc_de);\n@@ -299,6 +300,7 @@ void test04()\n       test03();\n       setenv(\"LANG\", oldLANG, 1);\n     }\n+#endif\n }\n \n int main()"}, {"sha": "2e2f31ddb8611911cb195fd1a03fa28523344668", "filename": "libstdc++-v3/testsuite/22_locale/money_put_members_wchar_t.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_wchar_t.cc?ref=b6a95741e891a7756668403bfa71a2c8236df22c", "patch": "@@ -286,6 +286,7 @@ void test03()\n // libstdc++/5280\n void test04()\n {\n+#ifdef _GLIBCPP_HAVE_SETENV \n   // Set the global locale to non-\"C\".\n   std::locale loc_de(\"de_DE\");\n   std::locale::global(loc_de);\n@@ -299,6 +300,7 @@ void test04()\n       test03();\n       setenv(\"LANG\", oldLANG, 1);\n     }\n+#endif\n }\n #endif\n "}, {"sha": "9260ea5d5877142f258ce80f006dfd95c14aa821", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct_members_char.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_members_char.cc?ref=b6a95741e891a7756668403bfa71a2c8236df22c", "patch": "@@ -108,6 +108,7 @@ void test01()\n // libstdc++/5280\n void test02()\n {\n+#ifdef _GLIBCPP_HAVE_SETENV \n   // Set the global locale to non-\"C\".\n   std::locale loc_de(\"de_DE\");\n   std::locale::global(loc_de);\n@@ -119,6 +120,7 @@ void test02()\n       test01();\n       setenv(\"LANG\", oldLANG, 1);\n     }\n+#endif\n }\n \n int main()"}, {"sha": "a301b270ed660ab359ccf41ac15ac63d8e3d3db3", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct_members_wchar_t.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_members_wchar_t.cc?ref=b6a95741e891a7756668403bfa71a2c8236df22c", "patch": "@@ -109,6 +109,7 @@ void test01()\n // libstdc++/5280\n void test02()\n {\n+#ifdef _GLIBCPP_HAVE_SETENV \n   // Set the global locale to non-\"C\".\n   std::locale loc_de(\"de_DE\");\n   std::locale::global(loc_de);\n@@ -120,6 +121,7 @@ void test02()\n       test01();\n       setenv(\"LANG\", oldLANG, 1);\n     }\n+#endif\n }\n #endif\n "}, {"sha": "53b4b70a8277ecf00cc6b8ba6a764a9081a3a3f7", "filename": "libstdc++-v3/testsuite/22_locale/num_get_members_char.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_char.cc?ref=b6a95741e891a7756668403bfa71a2c8236df22c", "patch": "@@ -316,6 +316,7 @@ void test02()\n // libstdc++/5280\n void test03()\n {\n+#ifdef _GLIBCPP_HAVE_SETENV \n   // Set the global locale to non-\"C\".\n   std::locale loc_de(\"de_DE\");\n   std::locale::global(loc_de);\n@@ -328,6 +329,7 @@ void test03()\n       test02();\n       setenv(\"LANG\", oldLANG, 1);\n     }\n+#endif\n }\n \n int main()"}, {"sha": "2b4ad35aa0ce554514815b67be51bfd11d5df374", "filename": "libstdc++-v3/testsuite/22_locale/num_get_members_wchar_t.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_wchar_t.cc?ref=b6a95741e891a7756668403bfa71a2c8236df22c", "patch": "@@ -318,6 +318,7 @@ void test02()\n // libstdc++/5280\n void test03()\n {\n+#ifdef _GLIBCPP_HAVE_SETENV \n   // Set the global locale to non-\"C\".\n   std::locale loc_de(\"de_DE\");\n   std::locale::global(loc_de);\n@@ -330,6 +331,7 @@ void test03()\n       test02();\n       setenv(\"LANG\", oldLANG, 1);\n     }\n+#endif\n }\n #endif\n "}, {"sha": "0e2836d271765bf582fceb1e8f31f19bdd36b046", "filename": "libstdc++-v3/testsuite/22_locale/num_put_members_char.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put_members_char.cc?ref=b6a95741e891a7756668403bfa71a2c8236df22c", "patch": "@@ -294,6 +294,7 @@ void test02()\n // libstdc++/5280\n void test03()\n {\n+#ifdef _GLIBCPP_HAVE_SETENV \n   // Set the global locale to non-\"C\".\n   std::locale loc_de(\"de_DE\");\n   std::locale::global(loc_de);\n@@ -306,6 +307,7 @@ void test03()\n       test02();\n       setenv(\"LANG\", oldLANG, 1);\n     }\n+#endif\n }\n \n int main()"}, {"sha": "5a91813261267ce90b4cc03bf6d399d21afc5c58", "filename": "libstdc++-v3/testsuite/22_locale/num_put_members_wchar_t.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put_members_wchar_t.cc?ref=b6a95741e891a7756668403bfa71a2c8236df22c", "patch": "@@ -294,6 +294,7 @@ void test02()\n // libstdc++/5280\n void test03()\n {\n+#ifdef _GLIBCPP_HAVE_SETENV \n   // Set the global locale to non-\"C\".\n   std::locale loc_de(\"de_DE\");\n   std::locale::global(loc_de);\n@@ -306,6 +307,7 @@ void test03()\n       test02();\n       setenv(\"LANG\", oldLANG, 1);\n     }\n+#endif\n }\n #endif\n "}, {"sha": "04657eb48411ce1b08a045633651eaa999bc7a84", "filename": "libstdc++-v3/testsuite/22_locale/numpunct_members_char.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_members_char.cc?ref=b6a95741e891a7756668403bfa71a2c8236df22c", "patch": "@@ -86,6 +86,7 @@ void test01()\n // libstdc++/5280\n void test02()\n {\n+#ifdef _GLIBCPP_HAVE_SETENV \n   // Set the global locale to non-\"C\".\n   std::locale loc_de(\"de_DE\");\n   std::locale::global(loc_de);\n@@ -97,6 +98,7 @@ void test02()\n       test01();\n       setenv(\"LANG\", oldLANG, 1);\n     }\n+#endif\n }\n \n int main()"}, {"sha": "8aea0f07bb5b4b35dd1a15dae9e6f64c0663440a", "filename": "libstdc++-v3/testsuite/22_locale/numpunct_members_wchar_t.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_members_wchar_t.cc?ref=b6a95741e891a7756668403bfa71a2c8236df22c", "patch": "@@ -84,6 +84,7 @@ void test01()\n // libstdc++/5280\n void test02()\n {\n+#ifdef _GLIBCPP_HAVE_SETENV \n   // Set the global locale to non-\"C\".\n   std::locale loc_de(\"de_DE\");\n   std::locale::global(loc_de);\n@@ -95,6 +96,7 @@ void test02()\n       test01();\n       setenv(\"LANG\", oldLANG, 1);\n     }\n+#endif\n }\n #endif\n "}, {"sha": "9e9891d215864e7982222ea4eb8aa447bd2eeca2", "filename": "libstdc++-v3/testsuite/22_locale/time_get_members_char.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get_members_char.cc?ref=b6a95741e891a7756668403bfa71a2c8236df22c", "patch": "@@ -679,6 +679,7 @@ void test06()\n // libstdc++/5280\n void test07()\n {\n+#ifdef _GLIBCPP_HAVE_SETENV \n   // Set the global locale to non-\"C\".\n   std::locale loc_de(\"de_DE\");\n   std::locale::global(loc_de);\n@@ -695,6 +696,7 @@ void test07()\n       test06();\n       setenv(\"LANG\", oldLANG, 1);\n     }\n+#endif\n }\n \n int main()"}, {"sha": "7a97d6ad582603aa7ee747f77070b925ba9b204c", "filename": "libstdc++-v3/testsuite/22_locale/time_get_members_wchar_t.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get_members_wchar_t.cc?ref=b6a95741e891a7756668403bfa71a2c8236df22c", "patch": "@@ -679,6 +679,7 @@ void test06()\n // libstdc++/5280\n void test07()\n {\n+#ifdef _GLIBCPP_HAVE_SETENV \n   // Set the global locale to non-\"C\".\n   std::locale loc_de(\"de_DE\");\n   std::locale::global(loc_de);\n@@ -695,6 +696,7 @@ void test07()\n       test06();\n       setenv(\"LANG\", oldLANG, 1);\n     }\n+#endif\n }\n #endif\n "}, {"sha": "e01b324568637a21691c08e60f96ee7a807143a9", "filename": "libstdc++-v3/testsuite/22_locale/time_put_members_char.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put_members_char.cc?ref=b6a95741e891a7756668403bfa71a2c8236df22c", "patch": "@@ -234,6 +234,7 @@ void test02()\n // libstdc++/5280\n void test03()\n {\n+#ifdef _GLIBCPP_HAVE_SETENV \n   // Set the global locale to non-\"C\".\n   std::locale loc_de(\"de_DE\");\n   std::locale::global(loc_de);\n@@ -246,6 +247,7 @@ void test03()\n       test02();\n       setenv(\"LANG\", oldLANG, 1);\n     }\n+#endif\n }\n \n int main()"}, {"sha": "8f82dc7afb8064bb931303e9310fb5e980248f64", "filename": "libstdc++-v3/testsuite/22_locale/time_put_members_wchar_t.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a95741e891a7756668403bfa71a2c8236df22c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put_members_wchar_t.cc?ref=b6a95741e891a7756668403bfa71a2c8236df22c", "patch": "@@ -236,6 +236,7 @@ void test02()\n // libstdc++/5280\n void test03()\n {\n+#ifdef _GLIBCPP_HAVE_SETENV \n   // Set the global locale to non-\"C\".\n   std::locale loc_de(\"de_DE\");\n   std::locale::global(loc_de);\n@@ -248,6 +249,7 @@ void test03()\n       test02();\n       setenv(\"LANG\", oldLANG, 1);\n     }\n+#endif\n }\n #endif\n "}]}