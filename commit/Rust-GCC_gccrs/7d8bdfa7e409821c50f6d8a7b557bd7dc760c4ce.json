{"sha": "7d8bdfa7e409821c50f6d8a7b557bd7dc760c4ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q4YmRmYTdlNDA5ODIxYzUwZjZkOGE3YjU1N2JkN2RjNzYwYzRjZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-15T08:50:00Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-15T08:50:00Z"}, "message": "[AArch64] Optimise aarch64_add_offset for SVE VL constants\n\naarch64_add_offset contains code to decompose all SVE VL-based constants\ninto native operations.  The worst-case fallback is to load the number\nof SVE elements into a register and use a general multiplication.\nThis patch improves that fallback by reusing expand_mult if\ncan_create_pseudo_p, rather than emitting a MULT pattern directly.\n\nIn order to increase the chances of being able to use a simple\nadd-and-shift, the patch also tries to compute VG * the lowest set\nbit of the multiplier, rather than always using CNTD as the basis\nfor the multiplication path.\n\nThis is tested by the ACLE patches but is really an independent\nimprovement.\n\n2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64.c (aarch64_add_offset): In the fallback\n\tmultiplication case, try to compute VG * (lowest set bit) directly\n\trather than always basing the multiplication on VG.  Use\n\texpand_mult for the multiplication if we can.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/loop_add_4.c: Expect 10 INCWs and\n\tINCDs rather than 8.\n\nFrom-SVN: r274519", "tree": {"sha": "c4d75ce784343724ba194d97760ed6c654d87698", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4d75ce784343724ba194d97760ed6c654d87698"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d8bdfa7e409821c50f6d8a7b557bd7dc760c4ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d8bdfa7e409821c50f6d8a7b557bd7dc760c4ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d8bdfa7e409821c50f6d8a7b557bd7dc760c4ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d8bdfa7e409821c50f6d8a7b557bd7dc760c4ce/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0fdc30bcf56d7b46122d7e67d61b56c0a198f3b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fdc30bcf56d7b46122d7e67d61b56c0a198f3b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fdc30bcf56d7b46122d7e67d61b56c0a198f3b3"}], "stats": {"total": 55, "additions": 43, "deletions": 12}, "files": [{"sha": "5fbf319475f860aeb8c1a324cfe30014e9c3366f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8bdfa7e409821c50f6d8a7b557bd7dc760c4ce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8bdfa7e409821c50f6d8a7b557bd7dc760c4ce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d8bdfa7e409821c50f6d8a7b557bd7dc760c4ce", "patch": "@@ -1,3 +1,10 @@\n+2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_add_offset): In the fallback\n+\tmultiplication case, try to compute VG * (lowest set bit) directly\n+\trather than always basing the multiplication on VG.  Use\n+\texpand_mult for the multiplication if we can.\n+\n 2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64-protos.h"}, {"sha": "3b0dceaa27f418f49166d5360b3093644ccc0016", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8bdfa7e409821c50f6d8a7b557bd7dc760c4ce/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8bdfa7e409821c50f6d8a7b557bd7dc760c4ce/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=7d8bdfa7e409821c50f6d8a7b557bd7dc760c4ce", "patch": "@@ -73,6 +73,7 @@\n #include \"selftest-rtl.h\"\n #include \"rtx-vector-builder.h\"\n #include \"intl.h\"\n+#include \"expmed.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -3465,20 +3466,36 @@ aarch64_add_offset (scalar_int_mode mode, rtx dest, rtx src,\n \t}\n       else\n \t{\n-\t  /* Use CNTD, then multiply it by FACTOR.  */\n-\t  val = gen_int_mode (poly_int64 (2, 2), mode);\n+\t  /* Base the factor on LOW_BIT if we can calculate LOW_BIT\n+\t     directly, since that should increase the chances of being\n+\t     able to use a shift and add sequence.  If LOW_BIT itself\n+\t     is out of range, just use CNTD.  */\n+\t  if (low_bit <= 16 * 8)\n+\t    factor /= low_bit;\n+\t  else\n+\t    low_bit = 1;\n+\n+\t  val = gen_int_mode (poly_int64 (low_bit * 2, low_bit * 2), mode);\n \t  val = aarch64_force_temporary (mode, temp1, val);\n \n-\t  /* Go back to using a negative multiplication factor if we have\n-\t     no register from which to subtract.  */\n-\t  if (code == MINUS && src == const0_rtx)\n+\t  if (can_create_pseudo_p ())\n \t    {\n-\t      factor = -factor;\n-\t      code = PLUS;\n+\t      rtx coeff1 = gen_int_mode (factor, mode);\n+\t      val = expand_mult (mode, val, coeff1, NULL_RTX, false, true);\n+\t    }\n+\t  else\n+\t    {\n+\t      /* Go back to using a negative multiplication factor if we have\n+\t\t no register from which to subtract.  */\n+\t      if (code == MINUS && src == const0_rtx)\n+\t\t{\n+\t\t  factor = -factor;\n+\t\t  code = PLUS;\n+\t\t}\n+\t      rtx coeff1 = gen_int_mode (factor, mode);\n+\t      coeff1 = aarch64_force_temporary (mode, temp2, coeff1);\n+\t      val = gen_rtx_MULT (mode, val, coeff1);\n \t    }\n-\t  rtx coeff1 = gen_int_mode (factor, mode);\n-\t  coeff1 = aarch64_force_temporary (mode, temp2, coeff1);\n-\t  val = gen_rtx_MULT (mode, val, coeff1);\n \t}\n \n       if (shift > 0)"}, {"sha": "0008ff94b37686a596791418754acac72a9e2830", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8bdfa7e409821c50f6d8a7b557bd7dc760c4ce/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8bdfa7e409821c50f6d8a7b557bd7dc760c4ce/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7d8bdfa7e409821c50f6d8a7b557bd7dc760c4ce", "patch": "@@ -1,3 +1,8 @@\n+2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/loop_add_4.c: Expect 10 INCWs and\n+\tINCDs rather than 8.\n+\n 2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/revb_1.c: Restrict to little-endian targets."}, {"sha": "9ead9c21b3593499674a8e2029fe48f162251548", "filename": "gcc/testsuite/gcc.target/aarch64/sve/loop_add_4.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8bdfa7e409821c50f6d8a7b557bd7dc760c4ce/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Floop_add_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8bdfa7e409821c50f6d8a7b557bd7dc760c4ce/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Floop_add_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Floop_add_4.c?ref=7d8bdfa7e409821c50f6d8a7b557bd7dc760c4ce", "patch": "@@ -68,7 +68,8 @@ TEST_ALL (LOOP)\n /* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.s, w[0-9]+, w[0-9]+\\n} 3 } } */\n /* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.s, p[0-7]+/z, \\[x[0-9]+, x[0-9]+, lsl 2\\]} 8 } } */\n /* { dg-final { scan-assembler-times {\\tst1w\\tz[0-9]+\\.s, p[0-7]+, \\[x[0-9]+, x[0-9]+, lsl 2\\]} 8 } } */\n-/* { dg-final { scan-assembler-times {\\tincw\\tx[0-9]+\\n} 8 } } */\n+/* 2 for the calculations of -17 and 17.  */\n+/* { dg-final { scan-assembler-times {\\tincw\\tx[0-9]+\\n} 10 } } */\n \n /* { dg-final { scan-assembler-times {\\tdecw\\tz[0-9]+\\.s, all, mul #16\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tdecw\\tz[0-9]+\\.s, all, mul #15\\n} 1 } } */\n@@ -85,7 +86,8 @@ TEST_ALL (LOOP)\n /* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.d, x[0-9]+, x[0-9]+\\n} 3 } } */\n /* { dg-final { scan-assembler-times {\\tld1d\\tz[0-9]+\\.d, p[0-7]+/z, \\[x[0-9]+, x[0-9]+, lsl 3\\]} 8 } } */\n /* { dg-final { scan-assembler-times {\\tst1d\\tz[0-9]+\\.d, p[0-7]+, \\[x[0-9]+, x[0-9]+, lsl 3\\]} 8 } } */\n-/* { dg-final { scan-assembler-times {\\tincd\\tx[0-9]+\\n} 8 } } */\n+/* 2 for the calculations of -17 and 17.  */\n+/* { dg-final { scan-assembler-times {\\tincd\\tx[0-9]+\\n} 10 } } */\n \n /* { dg-final { scan-assembler-times {\\tdecd\\tz[0-9]+\\.d, all, mul #16\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tdecd\\tz[0-9]+\\.d, all, mul #15\\n} 1 } } */"}]}