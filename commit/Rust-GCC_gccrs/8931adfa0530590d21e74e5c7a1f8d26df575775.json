{"sha": "8931adfa0530590d21e74e5c7a1f8d26df575775", "node_id": "C_kwDOANBUbNoAKDg5MzFhZGZhMDUzMDU5MGQyMWU3NGU1YzdhMWY4ZDI2ZGY1NzU3NzU", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-01-14T14:49:59Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-01-14T22:50:37Z"}, "message": "analyzer: fix ICE in taint checker on unary ops [PR104029]\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/104029\n\t* sm-taint.cc (taint_state_machine::alt_get_inherited_state):\n\tRemove gcc_unreachable from default case for unary ops.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/104029\n\t* gcc.dg/analyzer/pr104029.c: New test.\n\t* gcc.dg/analyzer/taint-ops.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "7e63415c7255cf5c12ee7c9c2ccf214726eb24b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e63415c7255cf5c12ee7c9c2ccf214726eb24b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8931adfa0530590d21e74e5c7a1f8d26df575775", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8931adfa0530590d21e74e5c7a1f8d26df575775", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8931adfa0530590d21e74e5c7a1f8d26df575775", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8931adfa0530590d21e74e5c7a1f8d26df575775/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70e24c9682ddbcade0301665bccd8e7f928d0082", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70e24c9682ddbcade0301665bccd8e7f928d0082", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70e24c9682ddbcade0301665bccd8e7f928d0082"}], "stats": {"total": 222, "additions": 221, "deletions": 1}, "files": [{"sha": "3a46256b020d024f2a961a3c709a570ef8477489", "filename": "gcc/analyzer/sm-taint.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8931adfa0530590d21e74e5c7a1f8d26df575775/gcc%2Fanalyzer%2Fsm-taint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8931adfa0530590d21e74e5c7a1f8d26df575775/gcc%2Fanalyzer%2Fsm-taint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-taint.cc?ref=8931adfa0530590d21e74e5c7a1f8d26df575775", "patch": "@@ -649,7 +649,6 @@ taint_state_machine::alt_get_inherited_state (const sm_state_map &map,\n \t      return arg_state;\n \t    }\n \t  default:\n-\t    gcc_unreachable ();\n \t    break;\n \t  }\n       }"}, {"sha": "adf15ed356f7350d1c774ce1f4d7e72c64fa3b4f", "filename": "gcc/testsuite/gcc.dg/analyzer/pr104029.c", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8931adfa0530590d21e74e5c7a1f8d26df575775/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr104029.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8931adfa0530590d21e74e5c7a1f8d26df575775/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr104029.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr104029.c?ref=8931adfa0530590d21e74e5c7a1f8d26df575775", "patch": "@@ -0,0 +1,115 @@\n+// TODO: remove need for this option\n+/* { dg-additional-options \"-fanalyzer-checker=taint\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+typedef const void *t_comptype;\n+typedef int (*t_compfunc)(t_comptype, t_comptype);\n+\n+extern int *__errno_location(void)\n+  __attribute__((__nothrow__, __leaf__,__const__));\n+extern void free(void *__ptr)\n+  __attribute__((__nothrow__, __leaf__));\n+extern void *my_malloc1(const char *file, int line, size_t size);\n+\n+int heapsort(void *vbase, size_t nmemb, size_t size, t_compfunc compar) {\n+  char tmp, *tmp1, *tmp2, *abase, *k, *p, *t;\n+  size_t cnt, i, j, l;\n+\n+  if (nmemb <= 1)\n+    return (0);\n+\n+  if (!size) {\n+    (*__errno_location()) = 22;\n+    return (-1);\n+  }\n+\n+  k = my_malloc1(__FILE__, __LINE__, size);\n+\n+  abase = (char *)vbase - size;\n+\n+  for (l = nmemb / 2 + 1; --l;) {\n+    for (i = l; (j = i * 2) <= nmemb; i = j) {\n+      p = abase + j * size;\n+      if (j < nmemb && compar(p, p + size) < 0) {\n+        p += size;\n+        ++j;\n+      }\n+      t = abase + i * size;\n+      if (compar(p, t) <= 0)\n+        break;\n+      {\n+        cnt = size;\n+        do {\n+          tmp = *t;\n+          *t++ = *p;\n+          *p++ = tmp;\n+        } while (--cnt);\n+      };\n+    }\n+  };\n+\n+  while (nmemb > 1) {\n+    {\n+      cnt = size;\n+      tmp1 = k;\n+      tmp2 = abase + nmemb * size;\n+      do {\n+        *tmp1++ = *tmp2++;\n+      } while (--cnt);\n+    };\n+    {\n+      cnt = size;\n+      tmp1 = abase + nmemb * size;\n+      tmp2 = abase + size;\n+      do {\n+        *tmp1++ = *tmp2++;\n+      } while (--cnt);\n+    };\n+    --nmemb;\n+    {\n+      for (i = 1; (j = i * 2) <= nmemb; i = j) {\n+        p = abase + j * size;\n+        if (j < nmemb && compar(p, p + size) < 0) {\n+          p += size;\n+          ++j;\n+        }\n+        t = abase + i * size;\n+        {\n+          cnt = size;\n+          tmp1 = t;\n+          tmp2 = p;\n+          do {\n+            *tmp1++ = *tmp2++;\n+          } while (--cnt);\n+        };\n+      }\n+      for (;;) {\n+        j = i;\n+        i = j / 2;\n+        p = abase + j * size;\n+        t = abase + i * size;\n+        if (j == 1 || compar(k, t) < 0) {\n+          {\n+            cnt = size;\n+            tmp1 = p;\n+            tmp2 = k;\n+            do {\n+              *tmp1++ = *tmp2++;\n+            } while (--cnt);\n+          };\n+          break;\n+        }\n+        {\n+          cnt = size;\n+          tmp1 = p;\n+          tmp2 = t;\n+          do {\n+            *tmp1++ = *tmp2++;\n+          } while (--cnt);\n+        };\n+      }\n+    };\n+  }\n+  free(k);\n+  return (0);\n+}"}, {"sha": "729dbe53a0c4b4be0d48fe00d39a6d71c317c4d3", "filename": "gcc/testsuite/gcc.dg/analyzer/taint-ops.c", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8931adfa0530590d21e74e5c7a1f8d26df575775/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftaint-ops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8931adfa0530590d21e74e5c7a1f8d26df575775/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftaint-ops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftaint-ops.c?ref=8931adfa0530590d21e74e5c7a1f8d26df575775", "patch": "@@ -0,0 +1,106 @@\n+/* { dg-additional-options \"-fanalyzer-checker=taint\" } */\n+// TODO: remove need for this option\n+/* This test can probably be removed when -fanalyzer enables\n+   the taint checker by default.  */\n+\n+#include \"analyzer-decls.h\"\n+\n+void\n+test_1 (char a)\n+{\n+  char b = -a;\n+}\n+\n+/* Copies of code from data-model-1.c.  */\n+\n+void test_20 (int i, int j)\n+{\n+  __analyzer_eval (i + 1); /* { dg-warning \"UNKNOWN\" } */\n+  __analyzer_eval (i + j); /* { dg-warning \"UNKNOWN\" } */\n+\n+  __analyzer_eval (i - 1); /* { dg-warning \"UNKNOWN\" } */\n+  __analyzer_eval (i - j); /* { dg-warning \"UNKNOWN\" } */\n+\n+  __analyzer_eval (i * 2); /* { dg-warning \"UNKNOWN\" } */\n+  __analyzer_eval (i * j); /* { dg-warning \"UNKNOWN\" } */\n+\n+  __analyzer_eval (i / 2); /* { dg-warning \"UNKNOWN\" } */\n+  __analyzer_eval (i / j); /* { dg-warning \"UNKNOWN\" } */\n+\n+  __analyzer_eval (i % 2); /* { dg-warning \"UNKNOWN\" } */\n+  __analyzer_eval (i % j); /* { dg-warning \"UNKNOWN\" } */\n+\n+  __analyzer_eval (i & 1); /* { dg-warning \"UNKNOWN\" } */\n+  __analyzer_eval (i & j); /* { dg-warning \"UNKNOWN\" } */\n+\n+  __analyzer_eval (i | 1); /* { dg-warning \"UNKNOWN\" } */\n+  __analyzer_eval (i | j); /* { dg-warning \"UNKNOWN\" } */\n+\n+  __analyzer_eval (i ^ 1); /* { dg-warning \"UNKNOWN\" } */\n+  __analyzer_eval (i ^ j); /* { dg-warning \"UNKNOWN\" } */\n+\n+  __analyzer_eval (i >> 1); /* { dg-warning \"UNKNOWN\" } */\n+  __analyzer_eval (i >> j); /* { dg-warning \"UNKNOWN\" } */\n+\n+  __analyzer_eval (i << 1); /* { dg-warning \"UNKNOWN\" } */\n+  __analyzer_eval (i << j); /* { dg-warning \"UNKNOWN\" } */\n+\n+  __analyzer_eval (i && 0); /* { dg-warning \"FALSE\" } */\n+  __analyzer_eval (i && 1); /* { dg-warning \"UNKNOWN\" } */\n+  __analyzer_eval (i && j); /* { dg-warning \"UNKNOWN\" } */\n+\n+  __analyzer_eval (i || 0); /* { dg-warning \"UNKNOWN\" } */\n+\n+  __analyzer_eval (i || 1); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (i || j); /* { dg-warning \"UNKNOWN\" } */\n+\n+  __analyzer_eval (~i); /* { dg-warning \"UNKNOWN\" } */\n+  __analyzer_eval (-i); /* { dg-warning \"UNKNOWN\" } */\n+  __analyzer_eval (+i); /* { dg-warning \"UNKNOWN\" } */\n+\n+  /* Anything added above should be added to the next function also.  */\n+}\n+\n+void test_21 (void)\n+{\n+  int i, j, zero;\n+  int *pi = &i;\n+  int *pj = &j;\n+  int *pzero = &zero;\n+  *pi = 5;\n+  *pj = 3;\n+  *pzero = 0;\n+\n+  __analyzer_eval (i + j == 8); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (i - j == 2); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (i * j == 15); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (i / j == 1); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (i % j == 2); /* { dg-warning \"TRUE\" } */\n+\n+  /* Division by zero.  */\n+  // TODO: should we warn for this?\n+  __analyzer_eval (i / zero); /* { dg-warning \"UNKNOWN\" } */\n+  __analyzer_eval (i % zero); /* { dg-warning \"UNKNOWN\" } */\n+\n+  __analyzer_eval ((i & 1) == (5 & 1)); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval ((i & j) == (5 & 3)); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval ((i | 1) == (5 | 1)); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval ((i | j) == (5 | 3)); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval ((i ^ 1) == (5 ^ 1)); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval ((i ^ j) == (5 ^ 3)); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval ((i >> 1) == (5 >> 1)); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval ((i >> j) == (5 >> 3)); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval ((i << 1) == (5 << 1)); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval ((i << j) == (5 << 3)); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (i && 0); /* { dg-warning \"FALSE\" } */\n+  __analyzer_eval (i && 1); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (i && j); /* { dg-warning \"TRUE\" } */\n+\n+  __analyzer_eval (i || 0); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (i || 1); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (i || j); /* { dg-warning \"TRUE\" } */\n+\n+  __analyzer_eval (~i == ~5); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (-i == -5); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (+i == +5); /* { dg-warning \"TRUE\" } */\n+}"}]}