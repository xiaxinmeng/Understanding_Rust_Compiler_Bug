{"sha": "bd246ac68239d944b01c213c39d6e212362c1b40", "node_id": "C_kwDOANBUbNoAKGJkMjQ2YWM2ODIzOWQ5NDRiMDFjMjEzYzM5ZDZlMjEyMzYyYzFiNDA", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-27T10:16:43Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-27T10:16:43Z"}, "message": "cgraph: Adjust verify_corresponds_to_fndecl [PR106061]\n\nIPA passes redirect some calls in what it determines to be unreachable code\nto builtin_decl_unreachable.  But that function returns sometimes\nbuiltin_decl_explicit (BUILT_IN_UNREACHABLE) (which was what GCC 12\nand earlier did always), or builtin_decl_explicit (BUILT_IN_TRAP)\n(e.g. for -funreachable-traps, -O0, -Og).\nNow the cgraph verification code has a code to verify cgraph edges\nand has there an exception for these redirections to BUILT_IN_UNREACHABLE,\nbut doesn't have for BUILT_IN_TRAP, so e.g. the following testcase\nICEs during that verification.\n\nThe following patch just adds BUILT_IN_TRAP to those exceptions.\n\n2023-01-27  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR ipa/106061\n\t* cgraph.cc (cgraph_edge::verify_corresponds_to_fndecl): Allow\n\tredirection of calls to __builtin_trap in addition to redirection\n\tto __builtin_unreachable.\n\n\t* gcc.dg/pr106061.c: New test.", "tree": {"sha": "af4d0a9c45d7a7ec36a36f48cbbe2d1654c972ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af4d0a9c45d7a7ec36a36f48cbbe2d1654c972ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd246ac68239d944b01c213c39d6e212362c1b40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd246ac68239d944b01c213c39d6e212362c1b40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd246ac68239d944b01c213c39d6e212362c1b40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd246ac68239d944b01c213c39d6e212362c1b40/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b9a1ac14cdca6eef8dbcab0d33f3c03774a6c77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b9a1ac14cdca6eef8dbcab0d33f3c03774a6c77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b9a1ac14cdca6eef8dbcab0d33f3c03774a6c77"}], "stats": {"total": 24, "additions": 22, "deletions": 2}, "files": [{"sha": "b810237c91957541ae8d811f042d6b1c24c74f65", "filename": "gcc/cgraph.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd246ac68239d944b01c213c39d6e212362c1b40/gcc%2Fcgraph.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd246ac68239d944b01c213c39d6e212362c1b40/gcc%2Fcgraph.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.cc?ref=bd246ac68239d944b01c213c39d6e212362c1b40", "patch": "@@ -3248,9 +3248,11 @@ cgraph_edge::verify_corresponds_to_fndecl (tree decl)\n   node = node->ultimate_alias_target ();\n \n   /* Optimizers can redirect unreachable calls or calls triggering undefined\n-     behavior to builtin_unreachable.  */\n+     behavior to __builtin_unreachable or __builtin_trap.  */\n \n-  if (fndecl_built_in_p (callee->decl, BUILT_IN_UNREACHABLE))\n+  if (fndecl_built_in_p (callee->decl, BUILT_IN_NORMAL)\n+      && (DECL_FUNCTION_CODE (callee->decl) == BUILT_IN_UNREACHABLE\n+\t  || DECL_FUNCTION_CODE (callee->decl) == BUILT_IN_TRAP))\n     return false;\n \n   if (callee->former_clone_of != node->decl"}, {"sha": "bba8d29bf47560177c510d39a5dc87f534332ca5", "filename": "gcc/testsuite/gcc.dg/pr106061.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd246ac68239d944b01c213c39d6e212362c1b40/gcc%2Ftestsuite%2Fgcc.dg%2Fpr106061.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd246ac68239d944b01c213c39d6e212362c1b40/gcc%2Ftestsuite%2Fgcc.dg%2Fpr106061.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr106061.c?ref=bd246ac68239d944b01c213c39d6e212362c1b40", "patch": "@@ -0,0 +1,18 @@\n+/* PR ipa/106061 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Og\" } */\n+\n+extern void foo (void);\n+\n+inline void\n+bar (int x)\n+{\n+  if (x)\n+    foo ();\n+}\n+\n+void\n+baz (void)\n+{\n+  bar (0);\n+}"}]}