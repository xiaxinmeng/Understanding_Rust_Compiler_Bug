{"sha": "bc8f0ed7042280282035168428f6afc839997cf0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmM4ZjBlZDcwNDIyODAyODIwMzUxNjg0MjhmNmFmYzgzOTk5N2NmMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-07-02T07:46:18Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-07-02T11:15:28Z"}, "message": "libstdc++: Revert changes to std::unique_ptr<T[]>::operator[] [PR 101271]\n\nThis reverts the changes in r12-1778 which added a noexcept-specifier to\nstd::unique_ptr<T[]>::operator[], and the changes in r12-1844 which\ntried to make it work with incomplete types (for PR 101236).\n\nThe noexcept-specifier is not required by the standard, and is causing\nregressions, so just remove it.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/101271\n\t* include/bits/unique_ptr.h (unique_ptr<T[],D>::operator[]):\n\tRemove noexcept-specifier.\n\t(unique_ptr<T[],D>::_S_nothrow_deref): Remove.\n\t* testsuite/20_util/unique_ptr/lwg2762.cc: Remove checks for\n\toperator[].", "tree": {"sha": "a03b1499a32468ac5133c8909839c2b2663bec08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a03b1499a32468ac5133c8909839c2b2663bec08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc8f0ed7042280282035168428f6afc839997cf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc8f0ed7042280282035168428f6afc839997cf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc8f0ed7042280282035168428f6afc839997cf0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc8f0ed7042280282035168428f6afc839997cf0/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "496e1d6a1f973b3952a37163441f9149501dfb26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/496e1d6a1f973b3952a37163441f9149501dfb26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/496e1d6a1f973b3952a37163441f9149501dfb26"}], "stats": {"total": 33, "additions": 0, "deletions": 33}, "files": [{"sha": "d483f13f2b0354401d9518f368f8d7b4e43a70cd", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc8f0ed7042280282035168428f6afc839997cf0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc8f0ed7042280282035168428f6afc839997cf0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=bc8f0ed7042280282035168428f6afc839997cf0", "patch": "@@ -491,20 +491,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  = __and_< is_base_of<_Tp, _Up>,\n \t\t    __not_<is_same<__remove_cv<_Tp>, __remove_cv<_Up>>> >;\n \n-      // This checks whether p[n] is noexcept, but fails gracefully when\n-      // element_type is incomplete. The standard requires a complete type\n-      // for unique_ptr<T[], D>, but we try to support it anyway (PR 101236).\n-      template<typename _Ptr, typename _Elt>\n-\tstatic constexpr auto\n-\t_S_nothrow_deref(size_t __n)\n-\t-> decltype(sizeof(_Elt) != 0) // PR c++/101239\n-\t{ return noexcept(std::declval<_Ptr>()[__n]); }\n-\n-      template<typename _Ptr, typename _Elt>\n-\tstatic constexpr bool\n-\t_S_nothrow_deref(...)\n-\t{ return false; }\n-\n     public:\n       using pointer\t  = typename __uniq_ptr_impl<_Tp, _Dp>::pointer;\n       using element_type  = _Tp;\n@@ -669,7 +655,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       /// Access an element of owned array.\n       typename std::add_lvalue_reference<element_type>::type\n       operator[](size_t __i) const\n-      noexcept(_S_nothrow_deref<pointer, element_type>(0))\n       {\n \t__glibcxx_assert(get() != pointer());\n \treturn get()[__i];"}, {"sha": "ea067eb3af3b2bbb0adcbb8f0eb9ab9094075ac6", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/lwg2762.cc", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc8f0ed7042280282035168428f6afc839997cf0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Flwg2762.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc8f0ed7042280282035168428f6afc839997cf0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Flwg2762.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Flwg2762.cc?ref=bc8f0ed7042280282035168428f6afc839997cf0", "patch": "@@ -12,11 +12,6 @@ struct deleter\n     int& operator*() && noexcept(B);  // this is used by unique_ptr\n     int& operator*() const& = delete; // this should not be\n \n-    int& operator[](std::size_t) && noexcept(B); // this is used by unique_ptr\n-    int& operator[](std::size_t) const& = delete; // should not be used\n-    int& operator[](int) && = delete; // should not be used\n-    int& operator[](double) && = delete; // should not be used\n-\n     int* operator->() noexcept(false); // noexcept here doesn't affect anything\n \n     // Needed for NullablePointer requirements\n@@ -40,16 +35,3 @@ static_assert( noexcept(std::declval<std::unique_ptr<long>>().operator->()),\n \t       \"operator-> is always noexcept\" );\n static_assert( noexcept(std::declval<UPtr<int, false>&>().operator->()),\n \t       \"operator-> is always noexcept\" );\n-\n-// This is not required by the standard, but we make it depend on the pointer.\n-static_assert( noexcept(std::declval<std::unique_ptr<long[]>>()[0]), \"QoI\" );\n-static_assert( noexcept(std::declval<UPtr<int[], true>&>()[0]), \"QoI\" );\n-static_assert( ! noexcept(std::declval<UPtr<int[], false>&>()[0]), \"QoI\" );\n-\n-// This is forbidden by the standard (\"T shall be a complete type\")\n-// but we try to support it anyway, see PR libstdc++/101236.\n-struct Incomplete;\n-static_assert( ! noexcept(std::declval<UPtr<Incomplete[], true>>()[0]),\n-\t       \"this would be noexcept if the type was complete\");\n-static_assert( ! noexcept(std::declval<UPtr<Incomplete[], false>>()[0]),\n-\t       \"this would still be noexcept(false) if the type was complete\");"}]}