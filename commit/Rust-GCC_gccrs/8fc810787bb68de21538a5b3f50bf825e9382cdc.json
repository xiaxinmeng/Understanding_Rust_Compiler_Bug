{"sha": "8fc810787bb68de21538a5b3f50bf825e9382cdc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZjODEwNzg3YmI2OGRlMjE1MzhhNWIzZjUwYmY4MjVlOTM4MmNkYw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-06-03T19:15:56Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-06-03T19:15:56Z"}, "message": "c++config (std::size_t, [...]): Provide typedefs.\n\n2010-06-03  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/c++config (std::size_t, std::ptrdiff_t,\n        std::nullptr_t): Provide typedefs.\n\t* include/c_std/cstddef: Don't provide std::size_t and\n\tstd::ptrdiff_t here.\n\t* include/c_global/cstddef: Likewise.\n\t* src/condition_variable.cc: Don't include <cstddef>,\n\tdon't use NULL, use std::size_t and std::ptrdiff_t.\n\t* src/mt_allocator.cc: Likewise.\n\t* src/localename.cc: Likewise.\n\t* src/chrono.cc: Likewise.\n\t* src/thread.cc: Likewise.\n\t* include/debug/formatter.h: Likewise.\n\t* include/debug/functions.h: Likewise.\n\t* include/std/valarray: Likewise.\n\t* include/std/thread: Likewise.\n\t* include/std/type_traits: Likewise.\n\t* include/std/atomic: Likewise.\n\t* include/std/iterator: Likewise.\n\t* include/std/bitset: Likewise.\n\t* include/std/fstream: Likewise.\n\t* include/std/mutex: Likewise.\n\t* include/c_std/cstdlib: Likewise.\n\t* include/c_std/cstdio: Likewise.\n\t* include/c_std/ctime: Likewise.\n\t* include/c_std/cwchar: Likewise.\n\t* include/c_std/cstring: Likewise.\n\t* include/parallel/multiway_merge.h: Likewise.\n\t* include/parallel/multiseq_selection.h: Likewise.\n\t* include/parallel/base.h: Likewise.\n\t* include/parallel/basic_iterator.h: Likewise.\n\t* include/parallel/multiway_mergesort.h\n\t* include/parallel/partition.h: Likewise.\n\t* include/ext/string_conversions.h: Likewise.\n\t* include/ext/pb_ds/assoc_container.hpp: Likewise.\n\t* include/ext/pb_ds/detail/resize_policy/sample_size_policy.hpp:\n\tLikewise.\n\t* include/ext/pb_ds/detail/resize_policy/\n\thash_prime_size_policy_imp.hpp: Likewise.\n\t* include/ext/pb_ds/detail/resize_policy/\n\tsample_resize_policy.hpp: Likewise.\n\t* include/ext/pb_ds/detail/resize_policy/\n\tsample_resize_trigger.hpp: Likewise.\n\t* include/ext/pb_ds/detail/binomial_heap_base_/\n\terase_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/binomial_heap_base_/\n\tfind_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/binomial_heap_base_/\n\tinsert_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/binomial_heap_base_/\n\tconstructors_destructor_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/binomial_heap_base_/\n\tdebug_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/binomial_heap_base_/\n\tsplit_join_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\terase_store_hash_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/d: Likewise.etail/cc_hash_table_map_/\n\tinsert_no_store_hash_fn_imps.hpp\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\tcmp_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\tfind_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\tinsert_store_hash_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\tdebug_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\tinfo_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\tentry_list_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\ttrace_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\terase_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\tcc_ht_map_.hpp: Likewise.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\tresize_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\tconstructor_destructor_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\terase_no_store_hash_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/unordered_iterator/\n\titerator.hpp: Likewise.\n\t* include/ext/pb_ds/detail/unordered_iterator/\n\tconst_iterator.hpp: Likewise.\n\t* include/ext/pb_ds/detail/unordered_iterator/\n\tpoint_iterator.hpp: Likewise.\n\t* include/ext/pb_ds/detail/unordered_iterator/\n\tconst_point_iterator.hpp: Likewise.\n\t* include/ext/pb_ds/detail/pat_trie_/r_erase_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/pat_trie_/find_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/pat_trie_/child_iterator.hpp: Likewise.\n\t* include/ext/pb_ds/detail/pat_trie_/update_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/pat_trie_/\n\tinsert_join_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/pat_trie_/\n\tconstructors_destructor_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/pat_trie_/debug_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/pat_trie_/\n\tconst_child_iterator.hpp: Likewise.\n\t* include/ext/pb_ds/detail/pat_trie_/split_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/pat_trie_/rotate_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/pat_trie_/trace_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/pat_trie_/erase_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/pat_trie_/node_iterators.hpp: Likewise.\n\t* include/ext/pb_ds/detail/pat_trie_/internal_node.hpp: Likewise.\n\t* include/ext/pb_ds/detail/pat_trie_/point_iterators.hpp: Likewise.\n\t* include/ext/pb_ds/detail/pat_trie_/iterators_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/bin_search_tree_/\n\tfind_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/bin_search_tree_/\n\tr_erase_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/bin_search_tree_/\n\tconstructors_destructor_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/bin_search_tree_/\n\tdebug_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/bin_search_tree_/\n\trotate_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/bin_search_tree_/\n\terase_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/bin_search_tree_/\n\tinsert_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/bin_search_tree_/\n\tnode_iterators.hpp: Likewise.\n\t* include/ext/pb_ds/detail/bin_search_tree_/\n\tpoint_iterators.hpp: Likewise.\n\t* include/ext/pb_ds/detail/bin_search_tree_/\n\tsplit_join_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/bin_search_tree_/\n\titerators_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\tfind_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\tgp_ht_map_.hpp: Likewise.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\tresize_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\tstandard_policies.hpp: Likewise.\n\t* include/ext/pb_ds/detail/tree_policy/\n\tsample_tree_node_update.hpp: Likewise.\n\t* include/ext/pb_ds/detail/basic_tree_policy/\n\tnull_node_metadata.hpp: Likewise.\n\t* include/ext/pb_ds/detail/binary_heap_/const_iterator.hpp: Likewise.\n\t* include/ext/pb_ds/detail/binary_heap_/\n\tconst_point_iterator.hpp: Likewise.\n\t* include/ext/pb_ds/detail/binary_heap_/\n\tsplit_join_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/trie_policy/\n\tsample_trie_node_update.hpp: Likewise.\n\t* include/ext/pb_ds/detail/trie_policy/\n\tsample_trie_e_access_traits.hpp: Likewise.\n\t* include/ext/pb_ds/detail/pairing_heap_/erase_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/pairing_heap_/insert_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/pairing_heap_/debug_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/pairing_heap_/\n\tsplit_join_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/list_update_policy/\n\tcounter_lu_metadata.hpp: Likewise.\n\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n\ttrace_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n\terase_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n\tnull_metadata.hpp: Likewise.\n\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n\tconst_iterator.hpp: Likewise.\n\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n\tinsert_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n\tconstructors_destructor_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n\tdebug_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n\titerators_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n\tconst_point_iterator.hpp: Likewise.\n\t* include/ext/pb_ds/detail/thin_heap_/erase_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/thin_heap_/find_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/thin_heap_/insert_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/thin_heap_/\n\tconstructors_destructor_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/thin_heap_/debug_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/thin_heap_/\n\tsplit_join_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/ov_tree_map_/erase_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/ov_tree_map_/insert_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/ov_tree_map_/\n\tconstructors_destructor_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/ov_tree_map_/debug_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/ov_tree_map_/node_iterators.hpp: Likewise.\n\t* include/ext/pb_ds/detail/ov_tree_map_/\n\titerators_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/hash_fn/sample_probe_fn.hpp: Likewise.\n\t* include/ext/pb_ds/detail/hash_fn/\n\tsample_ranged_probe_fn.hpp: Likewise.\n\t* include/ext/pb_ds/detail/hash_fn/sample_range_hashing.hpp: Likewise.\n\t* include/ext/pb_ds/detail/hash_fn/\n\tsample_ranged_hash_fn.hpp: Likewise.\n\t* include/ext/pb_ds/detail/splay_tree_/erase_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/splay_tree_/find_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/splay_tree_/insert_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/splay_tree_/debug_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/splay_tree_/splay_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/splay_tree_/\n\tsplit_join_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/list_update_map_/\n\ttrace_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/list_update_map_/\n\terase_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/list_update_map_/\n\tfind_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/list_update_map_/lu_map_.hpp: Likewise.\n\t* include/ext/pb_ds/detail/list_update_map_/\n\tconstructor_destructor_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/list_update_map_/\n\tinsert_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/list_update_map_/\n\tinfo_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/list_update_map_/\n\titerators_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/rc_binomial_heap_/\n\terase_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/rc_binomial_heap_/\n\tinsert_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/rc_binomial_heap_/\n\tdebug_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/rb_tree_map_/erase_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/rb_tree_map_/insert_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/rb_tree_map_/debug_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/rb_tree_map_/\n\tsplit_join_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/rb_tree_map_/info_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/list_update_policy.hpp: Likewise.\n\t* include/ext/pb_ds/exception.hpp: Likewise.\n\t* include/ext/pb_ds/tree_policy.hpp: Likewise.\n\t* include/ext/pb_ds/tag_and_trait.hpp: Likewise.\n\t* include/ext/pb_ds/hash_policy.hpp: Likewise.\n\t* include/ext/pb_ds/trie_policy.hpp: Likewise.\n\t* include/ext/pb_ds/priority_queue.hpp: Likewise.\n\t* include/ext/throw_allocator.h: Likewis: Likewise.e.\n\t* include/ext/bitmap_allocator.h\n\t* include/ext/rc_string_base.h: Likewise.\n\t* include/ext/new_allocator.h: Likewise.\n\t* include/ext/codecvt_specializations.h: Likewise.\n\t* include/ext/functional: Likewise.: Likewise.\n\t* include/ext/array_allocator.h: Likewise.\n\t* include/ext/mt_allocator.h: Likewise.\n\t* include/ext/sso_string_base.h: Likewise.\n\t* include/profile/impl/profiler_trace.h: Likewise.\n\t* include/profile/impl/profiler_node.h: Likewise.\n\t* include/bits/stl_algobase.h: Likewise.\n\t* include/bits/functional_hash.h: Likewise.\n\t* include/bits/locale_facets.tcc: Likewise.\n\t* include/bits/locale_facets.h: Likewise.\n\t* include/bits/stl_iterator_base_types.h: Likewise.\n\t* include/bits/move.h: Likewise.\n\t* include/bits/boost_concept_check.h: Likewise.\n\t* include/bits/basic_string.tcc: Likewise.\n\t* include/bits/locale_facets_nonio.tcc: Likewise.\n\t* include/bits/fstream.tcc: Likewise.\n\t* include/bits/locale_facets_nonio.h: Likewise.\n\t* include/c_global/cstdlib: Likewise.\n\t* include/c_global/cstdio: Likewise.\n\t* include/c_global/ctime: Likewise.\n\t* include/c_global/cwchar: Likewise.\n\t* include/c_global/cstring\n\t* include/tr1/type_traits: Likewise.\n\t* include/backward/hash_fun.h: Likewise.\n\t* libsupc++/new: Likewise.\n\t* libsupc++/initializer_list: Likewise.\n\t* testsuite/27_io/basic_ofstream/pthread2.cc: Likewise.\n\t* testsuite/27_io/basic_iostream/cons/2020.cc: Likewise.\n\t* testsuite/27_io/basic_streambuf/sgetn/wchar_t/1.cc: Likewise.\n\t* testsuite/27_io/basic_streambuf/sgetn/char/1.cc: Likewise.\n\t* testsuite/27_io/basic_streambuf/overflow/wchar_t/1.cc: Likewise.\n\t* testsuite/27_io/basic_streambuf/overflow/char/1.cc: Likewise.\n\t* testsuite/27_io/basic_streambuf/sgetc/wchar_t/1.cc: Likewise.\n\t* testsuite/27_io/basic_streambuf/sgetc/char/1.cc: Likewise.\n\t* testsuite/27_io/basic_streambuf/sputn/wchar_t/1057.cc: Likewise.\n\t* testsuite/27_io/basic_streambuf/sputn/wchar_t/1.cc: Likewise.\n\t* testsuite/27_io/basic_streambuf/sputn/char/1057.cc: Likewise.\n\t* testsuite/27_io/basic_streambuf/sputn/char/1.cc: Likewise.\n\t* testsuite/27_io/basic_streambuf/sputc/wchar_t/1057.cc: Likewise.\n\t* testsuite/27_io/basic_streambuf/sputc/char/1057.cc: Likewise.\n\t* testsuite/27_io/objects/wchar_t/5268.cc: Likewise.\n\t* testsuite/27_io/objects/char/9661-1.cc: Likewise.\n\t* testsuite/27_io/objects/char/5268.cc: Likewise.\n\t* testsuite/27_io/objects/char/10.cc: Likewise.\n\t* testsuite/27_io/basic_ios/copyfmt/char/1.cc: Likewise.\n\t* testsuite/27_io/basic_ios/copyfmt/char/2.cc: Likewise.\n\t* testsuite/27_io/basic_ios/exceptions/char/1.cc: Likewise.\n\t* testsuite/27_io/basic_ios/locales/char/1.cc: Likewise.\n\t* testsuite/27_io/basic_ios/clear/char/1.cc: Likewise.\n\t* testsuite/27_io/basic_ostringstream/pthread3.cc: Likewise.\n\t* testsuite/27_io/basic_stringbuf/sputc/wchar_t/1057.cc: Likewise.\n\t* testsuite/27_io/basic_stringbuf/sputc/char/1057.cc: Likewise.\n\t* testsuite/27_io/basic_stringbuf/sputn/wchar_t/1057.cc: Likewise.\n\t* testsuite/27_io/basic_stringbuf/sputn/char/1057.cc: Likewise.\n\t* testsuite/27_io/basic_istream/get/wchar_t/1.cc: Likewise.\n\t* testsuite/27_io/basic_istream/get/char/1.cc: Likewise.\n\t* testsuite/27_io/basic_istream/ignore/wchar_t/1.cc: Likewise.\n\t* testsuite/27_io/basic_istream/ignore/char/1.cc: Likewise.\n\t* testsuite/27_io/basic_istream/peek/wchar_t/1.cc: Likewise.\n\t* testsuite/27_io/basic_istream/peek/char/1.cc: Likewise.\n\t* testsuite/27_io/basic_istream/getline/wchar_t/1.cc: Likewise.\n\t* testsuite/27_io/basic_istream/getline/char/1.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_other/wchar_t/\n\texceptions_null.cc\n\t* testsuite/27_io/basic_istream/extractors_other/wchar_t/\n\t1.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_other/char/\n\texceptions_null.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_other/char/1.cc: Likewise.\n\t* testsuite/27_io/basic_istream/cons/3.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/\n\twchar_t/01.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/\n\tchar/01.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_character/\n\twchar_t/1.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_character/\n\twchar_t/2.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_character/\n\twchar_t/3.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_character/\n\tchar/1.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_character/\n\tchar/2.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_character/\n\tchar/3.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_character/\n\tchar/9826.cc: Likewise.\n\t* testsuite/27_io/basic_istream/read/wchar_t/1.cc: Likewise.\n\t* testsuite/27_io/basic_istream/read/char/1.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_other/wchar_t/\n\texceptions_null.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_other/wchar_t/\n\t1.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_other/char/\n\texceptions_null.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_other/char/1.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/cons/2020.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/sentry/pod/1.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_character/\n\twchar_t/8.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_character/\n\tchar/8.cc: Likewise.\n\t* testsuite/27_io/basic_filebuf/setbuf/char/1.cc: Likewise.\n\t* testsuite/27_io/basic_filebuf/sputc/char/1057.cc: Likewise.\n\t* testsuite/27_io/basic_filebuf/open/char/1.cc: Likewise.\n\t* testsuite/27_io/basic_filebuf/open/char/2.cc: Likewise.\n\t* testsuite/27_io/basic_filebuf/open/char/9507.cc: Likewise.\n\t* testsuite/27_io/basic_filebuf/imbue/wchar_t/14975-2.cc: Likewise.\n\t* testsuite/27_io/basic_filebuf/overflow/wchar_t/11305-1.cc: Likewise.\n\t* testsuite/27_io/basic_filebuf/overflow/wchar_t/11305-2.cc: Likewise.\n\t* testsuite/27_io/basic_filebuf/overflow/wchar_t/11305-3.cc: Likewise.\n\t* testsuite/27_io/basic_filebuf/overflow/wchar_t/11305-4.cc: Likewise.\n\t* testsuite/27_io/basic_filebuf/close/wchar_t/12790-3.cc: Likewise.\n\t* testsuite/27_io/basic_filebuf/close/char/9964.cc: Likewise.\n\t* testsuite/27_io/basic_filebuf/close/char/1.cc: Likewise.\n\t* testsuite/27_io/basic_filebuf/close/char/2.cc: Likewise.\n\t* testsuite/27_io/basic_filebuf/close/char/12790-3.cc: Likewise.\n\t* testsuite/27_io/basic_filebuf/sputn/char/1057.cc: Likewise.\n\t* testsuite/24_iterators/ostreambuf_iterator/2.cc: Likewise.\n\t* testsuite/18_support/bad_exception/23591_thread-1.c\n\t* testsuite/18_support/new_delete_placement.cc: Likewise.\n\t* testsuite/18_support/pthread_guard.cc: Likewise.\n\t* testsuite/21_strings/basic_string/operations/wchar_t/1.cc: Likewise.\n\t* testsuite/21_strings/basic_string/operations/char/1.cc: Likewise.\n\t* testsuite/21_strings/basic_string/pthread4.cc: Likewise.\n\t* testsuite/21_strings/basic_string/cons/wchar_t/5.cc: Likewise.\n\t* testsuite/21_strings/basic_string/cons/char/5.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/cons/assign_neg.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/cons/copy_neg.cc: Likewise.\n\t* testsuite/30_threads/recursive_mutex/cons/assign_neg.cc: Likewise.\n\t* testsuite/30_threads/recursive_mutex/cons/copy_neg.cc: Likewise.\n\t* testsuite/30_threads/mutex/cons/assign_neg.cc: Likewise.\n\t* testsuite/30_threads/mutex/cons/copy_neg.cc: Likewise.\n\t* testsuite/30_threads/thread/cons/assign_neg.cc: Likewise.\n\t* testsuite/30_threads/thread/cons/copy_neg.cc: Likewise.\n\t* testsuite/30_threads/recursive_timed_mutex/cons/\n\tassign_neg.cc: Likewise.\n\t* testsuite/30_threads/recursive_timed_mutex/cons/\n\tcopy_neg.cc: Likewise.\n\t* testsuite/ext/mt_allocator/22309_thread.cc: Likewise.\n\t* testsuite/ext/slist/23781.cc: Likewise.\n\t* testsuite/ext/rope/pthread7-rope.cc: Likewise.\n\t* testsuite/ext/stdio_filebuf/char/10063-2.cc: Likewise.\n\t* testsuite/22_locale/ctype/is/wchar_t/1.cc: Likewise.\n\t* testsuite/22_locale/ctype/is/char/1.cc: Likewise.\n\t* testsuite/22_locale/time_put/put/char/12439_1.cc: Likewise.\n\t* testsuite/22_locale/time_put/put/char/12439_3.cc: Likewise.\n\t* testsuite/22_locale/locale/cons/2.cc: Likewise.\n\t* testsuite/22_locale/locale/cons/12658_thread-1.cc: Likewise.\n\t* testsuite/22_locale/locale/cons/29217.cc: Likewise.\n\t* testsuite/22_locale/locale/global_locale_objects/14071.cc: Likewise.\n\t* testsuite/22_locale/locale/global_locale_objects/2.cc: Likewise.\n\t* testsuite/tr1/6_containers/unordered_multimap/\n\trequirements/iterator_null_neg.cc: Likewise.\n\t* testsuite/tr1/6_containers/unordered_multiset/\n\trequirements/iterator_null_neg.cc: Likewise.\n\t* testsuite/29_atomics/atomic_address/cons/single_value.cc: Likewise.\n\t* testsuite/29_atomics/atomic_address/cons/aggregate.cc: Likewise.\n\t* testsuite/23_containers/multimap/23781.cc: Likewise.\n\t* testsuite/23_containers/set/23781.cc: Likewise.\n\t* testsuite/23_containers/multiset/23781.cc: Likewise.\n\t* testsuite/23_containers/list/pthread1.cc: Likewise.\n\t* testsuite/23_containers/list/23781.cc: Likewise.\n\t* testsuite/23_containers/map/pthread6.cc: Likewise.\n\t* testsuite/23_containers/map/23781.cc: Likewise.\n\t* testsuite/util/regression/rand/priority_queue/\n\trand_regression_test.hpp: Likewise.\n\t* testsuite/util/regression/rand/priority_queue/\n\tcontainer_rand_regression_test.tcc: Likewise.\n\t* testsuite/util/regression/rand/assoc/\n\trand_regression_test.hpp: Likewise.\n\t* testsuite/util/regression/rand/assoc/\n\tcontainer_rand_regression_test.tcc: Likewise.\n\t* testsuite/util/testsuite_hooks.cc: Likewise.\n\t* testsuite/util/testsuite_io.h: Likewise.\n\t* testsuite/util/testsuite_iterators.h: Likewise.\n\t* testsuite/util/replacement_memory_operators.h: Likewise.\n\t* testsuite/util/testsuite_allocator.h: Likewise.\n\t* testsuite/util/testsuite_performance.h: Likewise.\n\nFrom-SVN: r160231", "tree": {"sha": "e653e0ed2019cffb2e05d1df0d41476cbaba0c85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e653e0ed2019cffb2e05d1df0d41476cbaba0c85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fc810787bb68de21538a5b3f50bf825e9382cdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fc810787bb68de21538a5b3f50bf825e9382cdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fc810787bb68de21538a5b3f50bf825e9382cdc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fc810787bb68de21538a5b3f50bf825e9382cdc/comments", "author": null, "committer": null, "parents": [{"sha": "1c314335e78d3db824b5d3c3d8bf605221a39528", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c314335e78d3db824b5d3c3d8bf605221a39528", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c314335e78d3db824b5d3c3d8bf605221a39528"}], "stats": {"total": 2914, "additions": 1685, "deletions": 1229}, "files": [{"sha": "ff8a796ceda0c20b721f04398e20b833704ff602", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 428, "deletions": 0, "changes": 428, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,3 +1,431 @@\n+2010-06-03  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/c++config (std::size_t, std::ptrdiff_t,\n+        std::nullptr_t): Provide typedefs.\n+\t* include/c_std/cstddef: Don't provide std::size_t and\n+\tstd::ptrdiff_t here.\n+\t* include/c_global/cstddef: Likewise.\n+\t* src/condition_variable.cc: Don't include <cstddef>,\n+\tdon't use NULL, use std::size_t and std::ptrdiff_t.\n+\t* src/mt_allocator.cc: Likewise.\n+\t* src/localename.cc: Likewise.\n+\t* src/chrono.cc: Likewise.\n+\t* src/thread.cc: Likewise.\n+\t* include/debug/formatter.h: Likewise.\n+\t* include/debug/functions.h: Likewise.\n+\t* include/std/valarray: Likewise.\n+\t* include/std/thread: Likewise.\n+\t* include/std/type_traits: Likewise.\n+\t* include/std/atomic: Likewise.\n+\t* include/std/iterator: Likewise.\n+\t* include/std/bitset: Likewise.\n+\t* include/std/fstream: Likewise.\n+\t* include/std/mutex: Likewise.\n+\t* include/c_std/cstdlib: Likewise.\n+\t* include/c_std/cstdio: Likewise.\n+\t* include/c_std/ctime: Likewise.\n+\t* include/c_std/cwchar: Likewise.\n+\t* include/c_std/cstring: Likewise.\n+\t* include/parallel/multiway_merge.h: Likewise.\n+\t* include/parallel/multiseq_selection.h: Likewise.\n+\t* include/parallel/base.h: Likewise.\n+\t* include/parallel/basic_iterator.h: Likewise.\n+\t* include/parallel/multiway_mergesort.h\n+\t* include/parallel/partition.h: Likewise.\n+\t* include/ext/string_conversions.h: Likewise.\n+\t* include/ext/pb_ds/assoc_container.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/resize_policy/sample_size_policy.hpp:\n+\tLikewise.\n+\t* include/ext/pb_ds/detail/resize_policy/\n+\thash_prime_size_policy_imp.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/resize_policy/\n+\tsample_resize_policy.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/resize_policy/\n+\tsample_resize_trigger.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/binomial_heap_base_/\n+\terase_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/binomial_heap_base_/\n+\tfind_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/binomial_heap_base_/\n+\tinsert_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/binomial_heap_base_/\n+\tconstructors_destructor_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/binomial_heap_base_/\n+\tdebug_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/binomial_heap_base_/\n+\tsplit_join_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\terase_store_hash_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/d: Likewise.etail/cc_hash_table_map_/\n+\tinsert_no_store_hash_fn_imps.hpp\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\tcmp_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\tfind_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\tinsert_store_hash_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\tdebug_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\tinfo_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\tentry_list_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\ttrace_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\terase_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\tcc_ht_map_.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\tresize_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\tconstructor_destructor_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\terase_no_store_hash_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/unordered_iterator/\n+\titerator.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/unordered_iterator/\n+\tconst_iterator.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/unordered_iterator/\n+\tpoint_iterator.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/unordered_iterator/\n+\tconst_point_iterator.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/pat_trie_/r_erase_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/pat_trie_/find_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/pat_trie_/child_iterator.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/pat_trie_/update_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/pat_trie_/\n+\tinsert_join_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/pat_trie_/\n+\tconstructors_destructor_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/pat_trie_/debug_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/pat_trie_/\n+\tconst_child_iterator.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/pat_trie_/split_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/pat_trie_/rotate_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/pat_trie_/trace_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/pat_trie_/erase_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/pat_trie_/node_iterators.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/pat_trie_/internal_node.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/pat_trie_/point_iterators.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/pat_trie_/iterators_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/\n+\tfind_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/\n+\tr_erase_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/\n+\tconstructors_destructor_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/\n+\tdebug_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/\n+\trotate_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/\n+\terase_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/\n+\tinsert_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/\n+\tnode_iterators.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/\n+\tpoint_iterators.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/\n+\tsplit_join_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/\n+\titerators_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\tfind_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\tgp_ht_map_.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\tresize_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\tstandard_policies.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/tree_policy/\n+\tsample_tree_node_update.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/basic_tree_policy/\n+\tnull_node_metadata.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/binary_heap_/const_iterator.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/binary_heap_/\n+\tconst_point_iterator.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/binary_heap_/\n+\tsplit_join_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/trie_policy/\n+\tsample_trie_node_update.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/trie_policy/\n+\tsample_trie_e_access_traits.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/pairing_heap_/erase_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/pairing_heap_/insert_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/pairing_heap_/debug_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/pairing_heap_/\n+\tsplit_join_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/list_update_policy/\n+\tcounter_lu_metadata.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n+\ttrace_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n+\terase_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n+\tnull_metadata.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n+\tconst_iterator.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n+\tinsert_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n+\tconstructors_destructor_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n+\tdebug_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n+\titerators_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n+\tconst_point_iterator.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/thin_heap_/erase_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/thin_heap_/find_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/thin_heap_/insert_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/thin_heap_/\n+\tconstructors_destructor_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/thin_heap_/debug_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/thin_heap_/\n+\tsplit_join_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/erase_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/insert_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/\n+\tconstructors_destructor_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/debug_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/node_iterators.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/\n+\titerators_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/hash_fn/sample_probe_fn.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/hash_fn/\n+\tsample_ranged_probe_fn.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/hash_fn/sample_range_hashing.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/hash_fn/\n+\tsample_ranged_hash_fn.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/splay_tree_/erase_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/splay_tree_/find_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/splay_tree_/insert_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/splay_tree_/debug_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/splay_tree_/splay_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/splay_tree_/\n+\tsplit_join_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/list_update_map_/\n+\ttrace_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/list_update_map_/\n+\terase_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/list_update_map_/\n+\tfind_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/list_update_map_/lu_map_.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/list_update_map_/\n+\tconstructor_destructor_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/list_update_map_/\n+\tinsert_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/list_update_map_/\n+\tinfo_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/list_update_map_/\n+\titerators_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/rc_binomial_heap_/\n+\terase_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/rc_binomial_heap_/\n+\tinsert_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/rc_binomial_heap_/\n+\tdebug_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/rb_tree_map_/erase_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/rb_tree_map_/insert_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/rb_tree_map_/debug_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/rb_tree_map_/\n+\tsplit_join_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/rb_tree_map_/info_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/list_update_policy.hpp: Likewise.\n+\t* include/ext/pb_ds/exception.hpp: Likewise.\n+\t* include/ext/pb_ds/tree_policy.hpp: Likewise.\n+\t* include/ext/pb_ds/tag_and_trait.hpp: Likewise.\n+\t* include/ext/pb_ds/hash_policy.hpp: Likewise.\n+\t* include/ext/pb_ds/trie_policy.hpp: Likewise.\n+\t* include/ext/pb_ds/priority_queue.hpp: Likewise.\n+\t* include/ext/throw_allocator.h: Likewis: Likewise.e.\n+\t* include/ext/bitmap_allocator.h\n+\t* include/ext/rc_string_base.h: Likewise.\n+\t* include/ext/new_allocator.h: Likewise.\n+\t* include/ext/codecvt_specializations.h: Likewise.\n+\t* include/ext/functional: Likewise.: Likewise.\n+\t* include/ext/array_allocator.h: Likewise.\n+\t* include/ext/mt_allocator.h: Likewise.\n+\t* include/ext/sso_string_base.h: Likewise.\n+\t* include/profile/impl/profiler_trace.h: Likewise.\n+\t* include/profile/impl/profiler_node.h: Likewise.\n+\t* include/bits/stl_algobase.h: Likewise.\n+\t* include/bits/functional_hash.h: Likewise.\n+\t* include/bits/locale_facets.tcc: Likewise.\n+\t* include/bits/locale_facets.h: Likewise.\n+\t* include/bits/stl_iterator_base_types.h: Likewise.\n+\t* include/bits/move.h: Likewise.\n+\t* include/bits/boost_concept_check.h: Likewise.\n+\t* include/bits/basic_string.tcc: Likewise.\n+\t* include/bits/locale_facets_nonio.tcc: Likewise.\n+\t* include/bits/fstream.tcc: Likewise.\n+\t* include/bits/locale_facets_nonio.h: Likewise.\n+\t* include/c_global/cstdlib: Likewise.\n+\t* include/c_global/cstdio: Likewise.\n+\t* include/c_global/ctime: Likewise.\n+\t* include/c_global/cwchar: Likewise.\n+\t* include/c_global/cstring\n+\t* include/tr1/type_traits: Likewise.\n+\t* include/backward/hash_fun.h: Likewise.\n+\t* libsupc++/new: Likewise.\n+\t* libsupc++/initializer_list: Likewise.\n+\t* testsuite/27_io/basic_ofstream/pthread2.cc: Likewise.\n+\t* testsuite/27_io/basic_iostream/cons/2020.cc: Likewise.\n+\t* testsuite/27_io/basic_streambuf/sgetn/wchar_t/1.cc: Likewise.\n+\t* testsuite/27_io/basic_streambuf/sgetn/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_streambuf/overflow/wchar_t/1.cc: Likewise.\n+\t* testsuite/27_io/basic_streambuf/overflow/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_streambuf/sgetc/wchar_t/1.cc: Likewise.\n+\t* testsuite/27_io/basic_streambuf/sgetc/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_streambuf/sputn/wchar_t/1057.cc: Likewise.\n+\t* testsuite/27_io/basic_streambuf/sputn/wchar_t/1.cc: Likewise.\n+\t* testsuite/27_io/basic_streambuf/sputn/char/1057.cc: Likewise.\n+\t* testsuite/27_io/basic_streambuf/sputn/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_streambuf/sputc/wchar_t/1057.cc: Likewise.\n+\t* testsuite/27_io/basic_streambuf/sputc/char/1057.cc: Likewise.\n+\t* testsuite/27_io/objects/wchar_t/5268.cc: Likewise.\n+\t* testsuite/27_io/objects/char/9661-1.cc: Likewise.\n+\t* testsuite/27_io/objects/char/5268.cc: Likewise.\n+\t* testsuite/27_io/objects/char/10.cc: Likewise.\n+\t* testsuite/27_io/basic_ios/copyfmt/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_ios/copyfmt/char/2.cc: Likewise.\n+\t* testsuite/27_io/basic_ios/exceptions/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_ios/locales/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_ios/clear/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_ostringstream/pthread3.cc: Likewise.\n+\t* testsuite/27_io/basic_stringbuf/sputc/wchar_t/1057.cc: Likewise.\n+\t* testsuite/27_io/basic_stringbuf/sputc/char/1057.cc: Likewise.\n+\t* testsuite/27_io/basic_stringbuf/sputn/wchar_t/1057.cc: Likewise.\n+\t* testsuite/27_io/basic_stringbuf/sputn/char/1057.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/get/wchar_t/1.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/get/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/ignore/wchar_t/1.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/ignore/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/peek/wchar_t/1.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/peek/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/getline/wchar_t/1.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/getline/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_other/wchar_t/\n+\texceptions_null.cc\n+\t* testsuite/27_io/basic_istream/extractors_other/wchar_t/\n+\t1.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_other/char/\n+\texceptions_null.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_other/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/cons/3.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/\n+\twchar_t/01.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/\n+\tchar/01.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_character/\n+\twchar_t/1.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_character/\n+\twchar_t/2.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_character/\n+\twchar_t/3.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_character/\n+\tchar/1.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_character/\n+\tchar/2.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_character/\n+\tchar/3.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_character/\n+\tchar/9826.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/read/wchar_t/1.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/read/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_other/wchar_t/\n+\texceptions_null.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_other/wchar_t/\n+\t1.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_other/char/\n+\texceptions_null.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_other/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/cons/2020.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/sentry/pod/1.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_character/\n+\twchar_t/8.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_character/\n+\tchar/8.cc: Likewise.\n+\t* testsuite/27_io/basic_filebuf/setbuf/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_filebuf/sputc/char/1057.cc: Likewise.\n+\t* testsuite/27_io/basic_filebuf/open/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_filebuf/open/char/2.cc: Likewise.\n+\t* testsuite/27_io/basic_filebuf/open/char/9507.cc: Likewise.\n+\t* testsuite/27_io/basic_filebuf/imbue/wchar_t/14975-2.cc: Likewise.\n+\t* testsuite/27_io/basic_filebuf/overflow/wchar_t/11305-1.cc: Likewise.\n+\t* testsuite/27_io/basic_filebuf/overflow/wchar_t/11305-2.cc: Likewise.\n+\t* testsuite/27_io/basic_filebuf/overflow/wchar_t/11305-3.cc: Likewise.\n+\t* testsuite/27_io/basic_filebuf/overflow/wchar_t/11305-4.cc: Likewise.\n+\t* testsuite/27_io/basic_filebuf/close/wchar_t/12790-3.cc: Likewise.\n+\t* testsuite/27_io/basic_filebuf/close/char/9964.cc: Likewise.\n+\t* testsuite/27_io/basic_filebuf/close/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_filebuf/close/char/2.cc: Likewise.\n+\t* testsuite/27_io/basic_filebuf/close/char/12790-3.cc: Likewise.\n+\t* testsuite/27_io/basic_filebuf/sputn/char/1057.cc: Likewise.\n+\t* testsuite/24_iterators/ostreambuf_iterator/2.cc: Likewise.\n+\t* testsuite/18_support/bad_exception/23591_thread-1.c\n+\t* testsuite/18_support/new_delete_placement.cc: Likewise.\n+\t* testsuite/18_support/pthread_guard.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/operations/wchar_t/1.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/operations/char/1.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/pthread4.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/cons/wchar_t/5.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/cons/char/5.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/cons/assign_neg.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/cons/copy_neg.cc: Likewise.\n+\t* testsuite/30_threads/recursive_mutex/cons/assign_neg.cc: Likewise.\n+\t* testsuite/30_threads/recursive_mutex/cons/copy_neg.cc: Likewise.\n+\t* testsuite/30_threads/mutex/cons/assign_neg.cc: Likewise.\n+\t* testsuite/30_threads/mutex/cons/copy_neg.cc: Likewise.\n+\t* testsuite/30_threads/thread/cons/assign_neg.cc: Likewise.\n+\t* testsuite/30_threads/thread/cons/copy_neg.cc: Likewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/cons/\n+\tassign_neg.cc: Likewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/cons/\n+\tcopy_neg.cc: Likewise.\n+\t* testsuite/ext/mt_allocator/22309_thread.cc: Likewise.\n+\t* testsuite/ext/slist/23781.cc: Likewise.\n+\t* testsuite/ext/rope/pthread7-rope.cc: Likewise.\n+\t* testsuite/ext/stdio_filebuf/char/10063-2.cc: Likewise.\n+\t* testsuite/22_locale/ctype/is/wchar_t/1.cc: Likewise.\n+\t* testsuite/22_locale/ctype/is/char/1.cc: Likewise.\n+\t* testsuite/22_locale/time_put/put/char/12439_1.cc: Likewise.\n+\t* testsuite/22_locale/time_put/put/char/12439_3.cc: Likewise.\n+\t* testsuite/22_locale/locale/cons/2.cc: Likewise.\n+\t* testsuite/22_locale/locale/cons/12658_thread-1.cc: Likewise.\n+\t* testsuite/22_locale/locale/cons/29217.cc: Likewise.\n+\t* testsuite/22_locale/locale/global_locale_objects/14071.cc: Likewise.\n+\t* testsuite/22_locale/locale/global_locale_objects/2.cc: Likewise.\n+\t* testsuite/tr1/6_containers/unordered_multimap/\n+\trequirements/iterator_null_neg.cc: Likewise.\n+\t* testsuite/tr1/6_containers/unordered_multiset/\n+\trequirements/iterator_null_neg.cc: Likewise.\n+\t* testsuite/29_atomics/atomic_address/cons/single_value.cc: Likewise.\n+\t* testsuite/29_atomics/atomic_address/cons/aggregate.cc: Likewise.\n+\t* testsuite/23_containers/multimap/23781.cc: Likewise.\n+\t* testsuite/23_containers/set/23781.cc: Likewise.\n+\t* testsuite/23_containers/multiset/23781.cc: Likewise.\n+\t* testsuite/23_containers/list/pthread1.cc: Likewise.\n+\t* testsuite/23_containers/list/23781.cc: Likewise.\n+\t* testsuite/23_containers/map/pthread6.cc: Likewise.\n+\t* testsuite/23_containers/map/23781.cc: Likewise.\n+\t* testsuite/util/regression/rand/priority_queue/\n+\trand_regression_test.hpp: Likewise.\n+\t* testsuite/util/regression/rand/priority_queue/\n+\tcontainer_rand_regression_test.tcc: Likewise.\n+\t* testsuite/util/regression/rand/assoc/\n+\trand_regression_test.hpp: Likewise.\n+\t* testsuite/util/regression/rand/assoc/\n+\tcontainer_rand_regression_test.tcc: Likewise.\n+\t* testsuite/util/testsuite_hooks.cc: Likewise.\n+\t* testsuite/util/testsuite_io.h: Likewise.\n+\t* testsuite/util/testsuite_iterators.h: Likewise.\n+\t* testsuite/util/replacement_memory_operators.h: Likewise.\n+\t* testsuite/util/testsuite_allocator.h: Likewise.\n+\t* testsuite/util/testsuite_performance.h: Likewise.\n+\n 2010-06-02  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* testsuite/tr1/2_general_utilities/shared_ptr/cons/pointer.cc: Fix"}, {"sha": "66e31d844cd2db6bdf09335b162dc353e41e482b", "filename": "libstdc++-v3/include/backward/hash_fun.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhash_fun.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhash_fun.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhash_fun.h?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -57,7 +57,7 @@\n #ifndef _BACKWARD_HASH_FUN_H\n #define _BACKWARD_HASH_FUN_H 1\n \n-#include <cstddef>\n+#include <bits/c++config.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n "}, {"sha": "ab71ad67e17d6a53bc8461ae4417dc631b978ce5", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,7 +1,7 @@\n // Components for manipulating sequences of characters -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009\n+// 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -130,7 +130,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #endif\n \t// NB: Not required, but considered best practice.\n \tif (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)\n-\t  __throw_logic_error(__N(\"basic_string::_S_construct NULL not valid\"));\n+\t  __throw_logic_error(__N(\"basic_string::_S_construct null not valid\"));\n \n \tconst size_type __dnew = static_cast<size_type>(std::distance(__beg,\n \t\t\t\t\t\t\t\t      __end));"}, {"sha": "cffd7fb2d051f2e03f0f90578caddaab91db05b2", "filename": "libstdc++-v3/include/bits/boost_concept_check.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,7 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2004, 2005, 2006, 2007, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006, 2007, 2009, 2010\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -41,7 +42,7 @@\n \n #pragma GCC system_header\n \n-#include <cstddef>                // for ptrdiff_t, used next\n+#include <bits/c++config.h>\n #include <bits/stl_iterator_base_types.h>    // for traits and tags\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)"}, {"sha": "9dc9ac24cd8d473e3c2082ed68f1f7e2e489087d", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,7 +1,7 @@\n // Predefined symbols and macros -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n+// 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -376,4 +376,19 @@ _GLIBCXX_END_NAMESPACE\n # endif\n #endif\n \n+#ifdef __cplusplus\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  typedef __SIZE_TYPE__         size_t;\n+  typedef __PTRDIFF_TYPE__   ptrdiff_t;\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  typedef decltype(nullptr)  nullptr_t;\n+#endif\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+#endif // __cplusplus\n+\n // End of prewritten config; the discovered settings follow."}, {"sha": "c498f48caeee6544c9d07b9f7749245842edbc1b", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -64,21 +64,21 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       if (_M_buf_allocated)\n \t{\n \t  delete [] _M_buf;\n-\t  _M_buf = NULL;\n+\t  _M_buf = 0;\n \t  _M_buf_allocated = false;\n \t}\n       delete [] _M_ext_buf;\n-      _M_ext_buf = NULL;\n+      _M_ext_buf = 0;\n       _M_ext_buf_size = 0;\n-      _M_ext_next = NULL;\n-      _M_ext_end = NULL;\n+      _M_ext_next = 0;\n+      _M_ext_end = 0;\n     }\n \n   template<typename _CharT, typename _Traits>\n     basic_filebuf<_CharT, _Traits>::\n     basic_filebuf() : __streambuf_type(), _M_lock(), _M_file(&_M_lock),\n     _M_mode(ios_base::openmode(0)), _M_state_beg(), _M_state_cur(),\n-    _M_state_last(), _M_buf(NULL), _M_buf_size(BUFSIZ),\n+    _M_state_last(), _M_buf(0), _M_buf_size(BUFSIZ),\n     _M_buf_allocated(false), _M_reading(false), _M_writing(false), _M_pback(), \n     _M_pback_cur_save(0), _M_pback_end_save(0), _M_pback_init(false),\n     _M_codecvt(0), _M_ext_buf(0), _M_ext_buf_size(0), _M_ext_next(0),\n@@ -93,7 +93,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     basic_filebuf<_CharT, _Traits>::\n     open(const char* __s, ios_base::openmode __mode)\n     {\n-      __filebuf_type *__ret = NULL;\n+      __filebuf_type *__ret = 0;\n       if (!this->is_open())\n \t{\n \t  _M_file.open(__s, __mode);\n@@ -128,7 +128,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     close()\n     {\n       if (!this->is_open())\n-\treturn NULL;\n+\treturn 0;\n \n       bool __testfail = false;\n       {\n@@ -167,7 +167,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t__testfail = true;\n \n       if (__testfail)\n-\treturn NULL;\n+\treturn 0;\n       else\n \treturn this;\n     }"}, {"sha": "a207ffa6bd0cef56934abc3504e796f7af5a52f0", "filename": "libstdc++-v3/include/bits/functional_hash.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -32,7 +32,7 @@\n \n #pragma GCC system_header\n \n-#include <cstddef>\n+#include <bits/c++config.h>\n #include <bits/stl_function.h>\n \n namespace std"}, {"sha": "79bfd03026dac88dda6318f28905d2fec1ad6ff3", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1587,12 +1587,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       bool\t\t\t\t_M_allocated;\n \n-      __numpunct_cache(size_t __refs = 0) : facet(__refs),\n-      _M_grouping(NULL), _M_grouping_size(0), _M_use_grouping(false),\n-      _M_truename(NULL), _M_truename_size(0), _M_falsename(NULL),\n-      _M_falsename_size(0), _M_decimal_point(_CharT()),\n-      _M_thousands_sep(_CharT()), _M_allocated(false)\n-      { }\n+      __numpunct_cache(size_t __refs = 0)\n+      : facet(__refs), _M_grouping(0), _M_grouping_size(0),\n+\t_M_use_grouping(false),\n+\t_M_truename(0), _M_truename_size(0), _M_falsename(0),\n+\t_M_falsename_size(0), _M_decimal_point(_CharT()),\n+\t_M_thousands_sep(_CharT()), _M_allocated(false)\n+        { }\n \n       ~__numpunct_cache();\n \n@@ -1657,7 +1658,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  @param  refs  Refcount to pass to the base class.\n        */\n       explicit\n-      numpunct(size_t __refs = 0) : facet(__refs), _M_data(NULL)\n+      numpunct(size_t __refs = 0)\n+      : facet(__refs), _M_data(0)\n       { _M_initialize_numpunct(); }\n \n       /**\n@@ -1685,7 +1687,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        */\n       explicit\n       numpunct(__c_locale __cloc, size_t __refs = 0)\n-      : facet(__refs), _M_data(NULL)\n+      : facet(__refs), _M_data(0)\n       { _M_initialize_numpunct(__cloc); }\n \n       /**\n@@ -1841,7 +1843,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       // For use at construction time only.\n       void\n-      _M_initialize_numpunct(__c_locale __cloc = NULL);\n+      _M_initialize_numpunct(__c_locale __cloc = 0);\n     };\n \n   template<typename _CharT>"}, {"sha": "52bafd36dfe5dc716510b3bd0c1f313db8ab8e0b", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,7 +1,7 @@\n // Locale support -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009\n+// 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -56,7 +56,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \tconst locale::facet** __caches = __loc._M_impl->_M_caches;\n \tif (!__caches[__i])\n \t  {\n-\t    __numpunct_cache<_CharT>* __tmp = NULL;\n+\t    __numpunct_cache<_CharT>* __tmp = 0;\n \t    __try\n \t      {\n \t\t__tmp = new __numpunct_cache<_CharT>;"}, {"sha": "fdc810d12be9cd4b2c34dbe71fd64e669226abd5", "filename": "libstdc++-v3/include/bits/locale_facets_nonio.h", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -118,20 +118,20 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       bool\t\t\t\t_M_allocated;\n \n       __timepunct_cache(size_t __refs = 0) : facet(__refs),\n-      _M_date_format(NULL), _M_date_era_format(NULL), _M_time_format(NULL),\n-      _M_time_era_format(NULL), _M_date_time_format(NULL),\n-      _M_date_time_era_format(NULL), _M_am(NULL), _M_pm(NULL),\n-      _M_am_pm_format(NULL), _M_day1(NULL), _M_day2(NULL), _M_day3(NULL),\n-      _M_day4(NULL), _M_day5(NULL), _M_day6(NULL), _M_day7(NULL),\n-      _M_aday1(NULL), _M_aday2(NULL), _M_aday3(NULL), _M_aday4(NULL),\n-      _M_aday5(NULL), _M_aday6(NULL), _M_aday7(NULL), _M_month01(NULL),\n-      _M_month02(NULL), _M_month03(NULL), _M_month04(NULL), _M_month05(NULL),\n-      _M_month06(NULL), _M_month07(NULL), _M_month08(NULL), _M_month09(NULL),\n-      _M_month10(NULL), _M_month11(NULL), _M_month12(NULL), _M_amonth01(NULL),\n-      _M_amonth02(NULL), _M_amonth03(NULL), _M_amonth04(NULL),\n-      _M_amonth05(NULL), _M_amonth06(NULL), _M_amonth07(NULL),\n-      _M_amonth08(NULL), _M_amonth09(NULL), _M_amonth10(NULL),\n-      _M_amonth11(NULL), _M_amonth12(NULL), _M_allocated(false)\n+      _M_date_format(0), _M_date_era_format(0), _M_time_format(0),\n+      _M_time_era_format(0), _M_date_time_format(0),\n+      _M_date_time_era_format(0), _M_am(0), _M_pm(0),\n+      _M_am_pm_format(0), _M_day1(0), _M_day2(0), _M_day3(0),\n+      _M_day4(0), _M_day5(0), _M_day6(0), _M_day7(0),\n+      _M_aday1(0), _M_aday2(0), _M_aday3(0), _M_aday4(0),\n+      _M_aday5(0), _M_aday6(0), _M_aday7(0), _M_month01(0),\n+      _M_month02(0), _M_month03(0), _M_month04(0), _M_month05(0),\n+      _M_month06(0), _M_month07(0), _M_month08(0), _M_month09(0),\n+      _M_month10(0), _M_month11(0), _M_month12(0), _M_amonth01(0),\n+      _M_amonth02(0), _M_amonth03(0), _M_amonth04(0),\n+      _M_amonth05(0), _M_amonth06(0), _M_amonth07(0),\n+      _M_amonth08(0), _M_amonth09(0), _M_amonth10(0),\n+      _M_amonth11(0), _M_amonth12(0), _M_allocated(false)\n       { }\n \n       ~__timepunct_cache();\n@@ -313,7 +313,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       // For use at construction time only.\n       void\n-      _M_initialize_timepunct(__c_locale __cloc = NULL);\n+      _M_initialize_timepunct(__c_locale __cloc = 0);\n     };\n \n   template<typename _CharT>\n@@ -883,11 +883,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       bool\t\t\t\t_M_allocated;\n \n       __moneypunct_cache(size_t __refs = 0) : facet(__refs),\n-      _M_grouping(NULL), _M_grouping_size(0), _M_use_grouping(false),\n+      _M_grouping(0), _M_grouping_size(0), _M_use_grouping(false),\n       _M_decimal_point(_CharT()), _M_thousands_sep(_CharT()),\n-      _M_curr_symbol(NULL), _M_curr_symbol_size(0),\n-      _M_positive_sign(NULL), _M_positive_sign_size(0),\n-      _M_negative_sign(NULL), _M_negative_sign_size(0),\n+      _M_curr_symbol(0), _M_curr_symbol_size(0),\n+      _M_positive_sign(0), _M_positive_sign_size(0),\n+      _M_negative_sign(0), _M_negative_sign_size(0),\n       _M_frac_digits(0),\n       _M_pos_format(money_base::pattern()),\n       _M_neg_format(money_base::pattern()), _M_allocated(false)\n@@ -955,7 +955,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  @param refs  Passed to the base facet class.\n       */\n       explicit\n-      moneypunct(size_t __refs = 0) : facet(__refs), _M_data(NULL)\n+      moneypunct(size_t __refs = 0)\n+      : facet(__refs), _M_data(0)\n       { _M_initialize_moneypunct(); }\n \n       /**\n@@ -983,7 +984,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       */\n       explicit\n       moneypunct(__c_locale __cloc, const char* __s, size_t __refs = 0)\n-      : facet(__refs), _M_data(NULL)\n+      : facet(__refs), _M_data(0)\n       { _M_initialize_moneypunct(__cloc, __s); }\n \n       /**\n@@ -1271,8 +1272,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       // For use at construction time only.\n        void\n-       _M_initialize_moneypunct(__c_locale __cloc = NULL,\n-\t\t\t\tconst char* __name = NULL);\n+       _M_initialize_moneypunct(__c_locale __cloc = 0,\n+\t\t\t\tconst char* __name = 0);\n     };\n \n   template<typename _CharT, bool _Intl>"}, {"sha": "b5c77b9d7c004c075ae968fa8ca3c68a36cf50bd", "filename": "libstdc++-v3/include/bits/locale_facets_nonio.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -44,7 +44,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \tconst locale::facet** __caches = __loc._M_impl->_M_caches;\n \tif (!__caches[__i])\n \t  {\n-\t    __moneypunct_cache<_CharT, _Intl>* __tmp = NULL;\n+\t    __moneypunct_cache<_CharT, _Intl>* __tmp = 0;\n \t    __try\n \t      {\n \t\t__tmp = new __moneypunct_cache<_CharT, _Intl>;"}, {"sha": "98755dc7e57c4ca4fa4fffccf8519bb2e88dfd3a", "filename": "libstdc++-v3/include/bits/move.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -31,7 +31,6 @@\n #define _MOVE_H 1\n \n #include <bits/c++config.h>\n-#include <cstddef>\n #include <bits/concept_check.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)"}, {"sha": "fc3047b6bed71f7544738f1c75255121c8f40678", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -58,7 +58,6 @@\n #define _STL_ALGOBASE_H 1\n \n #include <bits/c++config.h>\n-#include <cstddef>\n #include <bits/functexcept.h>\n #include <bits/cpp_type_traits.h>\n #include <ext/type_traits.h>"}, {"sha": "d934f434e6d0d82b62d57459ef7d4a5b43560990", "filename": "libstdc++-v3/include/bits/stl_iterator_base_types.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -63,7 +63,6 @@\n #pragma GCC system_header\n \n #include <bits/c++config.h>\n-#include <cstddef>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n "}, {"sha": "d9a7383e68d4f1bc6c1b05a1915d982e8f2a5f93", "filename": "libstdc++-v3/include/c_global/cstddef", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstddef", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstddef", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstddef?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -42,15 +42,3 @@\n \n #include <bits/c++config.h>\n #include <stddef.h>\n-\n-#ifndef _GLIBCXX_CSTDDEF\n-#define _GLIBCXX_CSTDDEF 1\n-\n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n-  using ::ptrdiff_t;\n-  using ::size_t;\n-\n-_GLIBCXX_END_NAMESPACE\n-\n-#endif"}, {"sha": "b547fbe40b89a6e45fc245ed743b4590495600f6", "filename": "libstdc++-v3/include/c_global/cstdio", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdio", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdio", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdio?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -41,7 +41,6 @@\n #pragma GCC system_header\n \n #include <bits/c++config.h>\n-#include <cstddef>\n #include <stdio.h>\n \n #ifndef _GLIBCXX_CSTDIO\n@@ -151,13 +150,13 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n #if _GLIBCXX_USE_C99_CHECK || _GLIBCXX_USE_C99_DYNAMIC\n   extern \"C\" int\n-  (snprintf)(char * restrict, size_t, const char * restrict, ...) throw ();\n+  (snprintf)(char * restrict, std::size_t, const char * restrict, ...) throw ();\n   extern \"C\" int\n   (vfscanf)(FILE * restrict, const char * restrict, __gnuc_va_list);\n   extern \"C\" int (vscanf)(const char * restrict, __gnuc_va_list);\n   extern \"C\" int\n-  (vsnprintf)(char * restrict, size_t, const char * restrict, __gnuc_va_list)\n-  throw ();\n+  (vsnprintf)(char * restrict, std::size_t, const char * restrict,\n+\t      __gnuc_va_list) throw ();\n   extern \"C\" int\n   (vsscanf)(const char * restrict, const char * restrict, __gnuc_va_list)\n   throw ();"}, {"sha": "da95c0fe56c09b12ef3a9d8ee3e20661ca229deb", "filename": "libstdc++-v3/include/c_global/cstdlib", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdlib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdlib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdlib?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -41,7 +41,6 @@\n #pragma GCC system_header\n \n #include <bits/c++config.h>\n-#include <cstddef>\n \n #ifndef _GLIBCXX_CSTDLIB\n #define _GLIBCXX_CSTDLIB 1"}, {"sha": "21721be67ed55867808bcf0837c0a2d80039bc38", "filename": "libstdc++-v3/include/c_global/cstring", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstring?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -41,7 +41,6 @@\n #pragma GCC system_header\n \n #include <bits/c++config.h>\n-#include <cstddef>\n #include <string.h>\n \n #ifndef _GLIBCXX_CSTRING"}, {"sha": "f5bb49ccbc9451aa8982b87ff598a06aa1a595f2", "filename": "libstdc++-v3/include/c_global/ctime", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fctime", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fctime", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fctime?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -40,7 +40,7 @@\n \n #pragma GCC system_header\n \n-#include <cstddef>\n+#include <bits/c++config.h>\n #include <time.h>\n \n #ifndef _GLIBCXX_CTIME"}, {"sha": "b16eb4685720c0787fab599e7446a228211febcc", "filename": "libstdc++-v3/include/c_global/cwchar", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcwchar", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcwchar", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcwchar?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -41,7 +41,6 @@\n #pragma GCC system_header\n \n #include <bits/c++config.h>\n-#include <cstddef>\n \n #if _GLIBCXX_HAVE_WCHAR_H\n #include <wchar.h>"}, {"sha": "006c432d7bcd4613479f54f36f48169c67adaa97", "filename": "libstdc++-v3/include/c_std/cstddef", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstddef", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstddef", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstddef?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -45,11 +45,4 @@\n #include <bits/c++config.h>\n #include <stddef.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n-  using ::ptrdiff_t;\n-  using ::size_t;\n-\n-_GLIBCXX_END_NAMESPACE\n-\n #endif"}, {"sha": "4a8acdddb6288cc7865854730de43fc98435113a", "filename": "libstdc++-v3/include/c_std/cstdio", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdio", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdio", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdio?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -43,8 +43,6 @@\n #pragma GCC system_header\n \n #include <bits/c++config.h>\n-#include <cstddef>\n-\n #include <stdio.h>\n \n // Get rid of those macros defined in <stdio.h> in lieu of real functions.\n@@ -151,13 +149,13 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n #if _GLIBCXX_USE_C99_CHECK || _GLIBCXX_USE_C99_DYNAMIC\n   extern \"C\" int\n-  (snprintf)(char * restrict, size_t, const char * restrict, ...) throw ();\n+  (snprintf)(char * restrict, std::size_t, const char * restrict, ...) throw ();\n   extern \"C\" int\n   (vfscanf)(FILE * restrict, const char * restrict, __gnuc_va_list);\n   extern \"C\" int (vscanf)(const char * restrict, __gnuc_va_list);\n   extern \"C\" int\n-  (vsnprintf)(char * restrict, size_t, const char * restrict, __gnuc_va_list)\n-  throw ();\n+  (vsnprintf)(char * restrict, std::size_t, const char * restrict,\n+\t      __gnuc_va_list) throw ();\n   extern \"C\" int\n   (vsscanf)(const char * restrict, const char * restrict, __gnuc_va_list)\n   throw ();"}, {"sha": "734745a67751a4832df6809c8c323d955ab32099", "filename": "libstdc++-v3/include/c_std/cstdlib", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdlib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdlib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdlib?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -43,7 +43,6 @@\n #pragma GCC system_header\n \n #include <bits/c++config.h>\n-#include <cstddef>\n \n #if !_GLIBCXX_HOSTED\n // The C standard does not require a freestanding implementation to"}, {"sha": "06bf12fba9d2b5c6be17764cc6cfdeba626f087a", "filename": "libstdc++-v3/include/c_std/cstring", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstring?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -44,7 +44,6 @@\n #pragma GCC system_header\n \n #include <bits/c++config.h>\n-#include <cstddef>\n #include <string.h>\n \n // Get rid of those macros defined in <string.h> in lieu of real functions."}, {"sha": "459c8fc7b60a8cfc9bbea32d958d487ff6d5a7d7", "filename": "libstdc++-v3/include/c_std/ctime", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fctime", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fctime", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fctime?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -42,7 +42,7 @@\n \n #pragma GCC system_header\n \n-#include <cstddef>\n+#include <bits/c++config.h>\n #include <time.h>\n \n // Get rid of those macros defined in <time.h> in lieu of real functions."}, {"sha": "20c6ca3512aa409db4bfe36c144cc97108f29c75", "filename": "libstdc++-v3/include/c_std/cwchar", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcwchar", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcwchar", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcwchar?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -44,7 +44,6 @@\n #pragma GCC system_header\n \n #include <bits/c++config.h>\n-#include <cstddef>\n \n #if _GLIBCXX_HAVE_WCHAR_H\n #include <wchar.h>"}, {"sha": "a98ebd84a8d219ece5547b8ff13183d4d379182b", "filename": "libstdc++-v3/include/debug/formatter.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -338,7 +338,7 @@ namespace __gnu_debug\n       const _Error_formatter&\n       _M_iterator(const _Iterator& __it, const char* __name = 0)  const\n       {\n-\tif (_M_num_parameters < size_t(__max_parameters))\n+\tif (_M_num_parameters < std::size_t(__max_parameters))\n \t  _M_parameters[_M_num_parameters++] = _Parameter(__it, __name,\n \t\t\t\t\t\t\t  _Is_iterator());\n \treturn *this;\n@@ -347,15 +347,15 @@ namespace __gnu_debug\n     const _Error_formatter&\n     _M_integer(long __value, const char* __name = 0) const\n     {\n-      if (_M_num_parameters < size_t(__max_parameters))\n+      if (_M_num_parameters < std::size_t(__max_parameters))\n \t_M_parameters[_M_num_parameters++] = _Parameter(__value, __name);\n       return *this;\n     }\n \n     const _Error_formatter&\n     _M_string(const char* __value, const char* __name = 0) const\n     {\n-      if (_M_num_parameters < size_t(__max_parameters))\n+      if (_M_num_parameters < std::size_t(__max_parameters))\n \t_M_parameters[_M_num_parameters++] = _Parameter(__value, __name);\n       return *this;\n     }\n@@ -364,7 +364,7 @@ namespace __gnu_debug\n       const _Error_formatter&\n       _M_sequence(const _Sequence& __seq, const char* __name = 0) const\n       {\n-\tif (_M_num_parameters < size_t(__max_parameters))\n+\tif (_M_num_parameters < std::size_t(__max_parameters))\n \t  _M_parameters[_M_num_parameters++] = _Parameter(__seq, __name,\n \t\t\t\t\t\t\t  _Is_sequence());\n \treturn *this;\n@@ -381,7 +381,7 @@ namespace __gnu_debug\n     _M_error() const;\n \n   private:\n-    _Error_formatter(const char* __file, size_t __line)\n+    _Error_formatter(const char* __file, std::size_t __line)\n     : _M_file(__file), _M_line(__line), _M_num_parameters(0), _M_text(0),\n       _M_max_length(78), _M_column(1), _M_first_line(true), _M_wordwrap(false)\n     { _M_get_max_length(); }\n@@ -402,19 +402,19 @@ namespace __gnu_debug\n     enum { __max_parameters = 9 };\n \n     const char*         _M_file;\n-    size_t              _M_line;\n+    std::size_t         _M_line;\n     mutable _Parameter  _M_parameters[__max_parameters];\n-    mutable size_t      _M_num_parameters;\n+    mutable std::size_t _M_num_parameters;\n     mutable const char* _M_text;\n-    mutable size_t      _M_max_length;\n+    mutable std::size_t _M_max_length;\n     enum { _M_indent = 4 } ;\n-    mutable size_t      _M_column;\n+    mutable std::size_t _M_column;\n     mutable bool        _M_first_line;\n     mutable bool        _M_wordwrap;\n \n   public:\n     static _Error_formatter\n-    _M_at(const char* __file, size_t __line)\n+    _M_at(const char* __file, std::size_t __line)\n     { return _Error_formatter(__file, __line); }\n   };\n } // namespace __gnu_debug"}, {"sha": "237c0e66909744627628bb410401d73abce64971", "filename": "libstdc++-v3/include/debug/functions.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // Debugging support implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -31,7 +31,6 @@\n #define _GLIBCXX_DEBUG_FUNCTIONS_H 1\n \n #include <bits/c++config.h>\n-#include <cstddef>                       // for ptrdiff_t\n #include <bits/stl_iterator_base_types.h> // for iterator_traits, categories\n #include <bits/cpp_type_traits.h>         // for __is_integer\n "}, {"sha": "ca4d0d19b0178d55278a4dd49ebdc795c36f33be", "filename": "libstdc++-v3/include/ext/array_allocator.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -30,7 +30,7 @@\n #ifndef _ARRAY_ALLOCATOR_H\n #define _ARRAY_ALLOCATOR_H 1\n \n-#include <cstddef>\n+#include <bits/c++config.h>\n #include <new>\n #include <bits/functexcept.h>\n #include <tr1/array>\n@@ -114,15 +114,15 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n         struct rebind\n         { typedef array_allocator<_Tp1, _Array1> other; };\n \n-      array_allocator(array_type* __array = NULL) throw() \n+      array_allocator(array_type* __array = 0) throw() \n       : _M_array(__array), _M_used(size_type()) { }\n \n       array_allocator(const array_allocator& __o)  throw() \n       : _M_array(__o._M_array), _M_used(__o._M_used) { }\n \n       template<typename _Tp1, typename _Array1>\n         array_allocator(const array_allocator<_Tp1, _Array1>&) throw()\n-\t: _M_array(NULL), _M_used(size_type()) { }\n+\t: _M_array(0), _M_used(size_type()) { }\n \n       ~array_allocator() throw() { }\n "}, {"sha": "2aa08706c9d57713206090e33e57f076f7461609", "filename": "libstdc++-v3/include/ext/bitmap_allocator.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -30,9 +30,8 @@\n #ifndef _BITMAP_ALLOCATOR_H\n #define _BITMAP_ALLOCATOR_H 1\n \n-#include <cstddef> // For std::size_t, and ptrdiff_t.\n-#include <bits/functexcept.h> // For __throw_bad_alloc().\n #include <utility> // For std::pair.\n+#include <bits/functexcept.h> // For __throw_bad_alloc().\n #include <functional> // For greater_equal, and less_equal.\n #include <new> // For operator new.\n #include <debug/debug.h> // _GLIBCXX_DEBUG_ASSERT"}, {"sha": "53295891bac42a2ca61290414c22ad7b675524b2", "filename": "libstdc++-v3/include/ext/codecvt_specializations.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fcodecvt_specializations.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fcodecvt_specializations.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fcodecvt_specializations.h?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,7 +1,8 @@\n // Locale support (codecvt) -*- C++ -*-\n \n-// Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009\n-//  Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,\n+// 2008, 2009, 2010\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -381,7 +382,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  // Argument list for iconv specifies a byte sequence. Thus,\n \t  // all to/from arrays must be brutally casted to char*.\n \t  char* __cto = reinterpret_cast<char*>(__to);\n-\t  size_t __conv = __iconv_adaptor(iconv,__desc, NULL, NULL,\n+\t  size_t __conv = __iconv_adaptor(iconv,__desc, 0, 0,\n                                           &__cto, &__tlen); \n \t  \n \t  if (__conv != size_t(-1))"}, {"sha": "7cf6a45a0a307a8b2c437083a7166fb896558ad7", "filename": "libstdc++-v3/include/ext/functional", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Ffunctional?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // Functional extensions -*- C++ -*-\n \n-// Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2009\n+// Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -60,7 +60,6 @@\n #pragma GCC system_header\n \n #include <functional>\n-#include <cstddef>\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n "}, {"sha": "1f6561db464accfce64091c11f351d2021bd7fd8", "filename": "libstdc++-v3/include/ext/mt_allocator.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -154,11 +154,11 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n     explicit \n     __pool_base() \n-    : _M_options(_Tune()), _M_binmap(NULL), _M_init(false) { }\n+    : _M_options(_Tune()), _M_binmap(0), _M_init(false) { }\n \n     explicit \n     __pool_base(const _Tune& __options)\n-    : _M_options(__options), _M_binmap(NULL), _M_init(false) { }\n+    : _M_options(__options), _M_binmap(0), _M_init(false) { }\n \n   private:\n     explicit \n@@ -235,10 +235,10 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       { }\n \n       explicit __pool() \n-      : _M_bin(NULL), _M_bin_size(1) { }\n+      : _M_bin(0), _M_bin_size(1) { }\n \n       explicit __pool(const __pool_base::_Tune& __tune) \n-      : __pool_base(__tune), _M_bin(NULL), _M_bin_size(1) { }\n+      : __pool_base(__tune), _M_bin(0), _M_bin_size(1) { }\n \n     private:\n       // An \"array\" of bin_records each of which represents a specific\n@@ -358,12 +358,12 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       _M_get_thread_id();\n \n       explicit __pool() \n-      : _M_bin(NULL), _M_bin_size(1), _M_thread_freelist(NULL) \n+      : _M_bin(0), _M_bin_size(1), _M_thread_freelist(0) \n       { }\n \n       explicit __pool(const __pool_base::_Tune& __tune) \n-      : __pool_base(__tune), _M_bin(NULL), _M_bin_size(1), \n-      _M_thread_freelist(NULL) \n+      : __pool_base(__tune), _M_bin(0), _M_bin_size(1), \n+\t_M_thread_freelist(0) \n       { }\n \n     private:"}, {"sha": "5450565420712b63f6081f501912be3af6e7a78d", "filename": "libstdc++-v3/include/ext/new_allocator.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -30,6 +30,7 @@\n #ifndef _NEW_ALLOCATOR_H\n #define _NEW_ALLOCATOR_H 1\n \n+#include <bits/c++config.h>\n #include <new>\n #include <bits/functexcept.h>\n #include <bits/move.h>"}, {"sha": "9cec3b72c5427a95a247fc34a0fd99dbe871dfd6", "filename": "libstdc++-v3/include/ext/pb_ds/assoc_container.hpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fassoc_container.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fassoc_container.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fassoc_container.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -41,6 +41,7 @@\n #ifndef PB_DS_ASSOC_CNTNR_HPP\n #define PB_DS_ASSOC_CNTNR_HPP\n \n+#include <bits/c++config.h>\n #include <ext/typelist.h>\n #include <ext/pb_ds/tag_and_trait.hpp>\n #include <ext/pb_ds/detail/standard_policies.hpp>"}, {"sha": "d9cc2dbfc4403edf85b03b6692252355f8753c24", "filename": "libstdc++-v3/include/ext/pb_ds/detail/basic_tree_policy/null_node_metadata.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbasic_tree_policy%2Fnull_node_metadata.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbasic_tree_policy%2Fnull_node_metadata.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbasic_tree_policy%2Fnull_node_metadata.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -38,8 +38,8 @@\n  * Contains an implementation class for tree-like classes.\n  */\n \n-#ifndef PB_DS_NULL_NODE_METADATA_HPP\n-#define PB_DS_NULL_NODE_METADATA_HPP\n+#ifndef PB_DS_0_NODE_METADATA_HPP\n+#define PB_DS_0_NODE_METADATA_HPP\n \n #include <ext/pb_ds/detail/types_traits.hpp>\n "}, {"sha": "b9f80e960aa6e5d243aef915b72405164f47ca89", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fconstructors_destructor_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -92,7 +92,7 @@ PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n     __try\n       {\n         m_p_head->m_p_parent = recursive_copy_node(other.m_p_head->m_p_parent);\n-        if (m_p_head->m_p_parent != NULL)\n+        if (m_p_head->m_p_parent != 0)\n \t  m_p_head->m_p_parent->m_p_parent = m_p_head;\n         m_size = other.m_size;\n         initialize_min_max();\n@@ -142,7 +142,7 @@ void\n PB_DS_CLASS_C_DEC::\n initialize()\n {\n-  m_p_head->m_p_parent = NULL;\n+  m_p_head->m_p_parent = 0;\n   m_p_head->m_p_left = m_p_head;\n   m_p_head->m_p_right = m_p_head;\n   m_size = 0;\n@@ -153,8 +153,8 @@ typename PB_DS_CLASS_C_DEC::node_pointer\n PB_DS_CLASS_C_DEC::\n recursive_copy_node(const node_pointer p_nd)\n {\n-  if (p_nd == NULL)\n-    return (NULL);\n+  if (p_nd == 0)\n+    return (0);\n \n   node_pointer p_ret = s_node_allocator.allocate(1);\n   __try\n@@ -167,7 +167,7 @@ recursive_copy_node(const node_pointer p_nd)\n       __throw_exception_again;\n     }\n \n-  p_ret->m_p_left = p_ret->m_p_right = NULL;\n+  p_ret->m_p_left = p_ret->m_p_right = 0;\n \n   __try\n     {\n@@ -180,10 +180,10 @@ recursive_copy_node(const node_pointer p_nd)\n       __throw_exception_again;\n     }\n \n-  if (p_ret->m_p_left != NULL)\n+  if (p_ret->m_p_left != 0)\n     p_ret->m_p_left->m_p_parent = p_ret;\n \n-  if (p_ret->m_p_right != NULL)\n+  if (p_ret->m_p_right != 0)\n     p_ret->m_p_right->m_p_parent = p_ret;\n \n   _GLIBCXX_DEBUG_ONLY(assert_node_consistent(p_ret);)\n@@ -195,22 +195,22 @@ void\n PB_DS_CLASS_C_DEC::\n initialize_min_max()\n {\n-  if (m_p_head->m_p_parent == NULL)\n+  if (m_p_head->m_p_parent == 0)\n     {\n       m_p_head->m_p_left = m_p_head->m_p_right = m_p_head;\n       return;\n     }\n \n   {\n     node_pointer p_min = m_p_head->m_p_parent;\n-    while (p_min->m_p_left != NULL)\n+    while (p_min->m_p_left != 0)\n       p_min = p_min->m_p_left;\n     m_p_head->m_p_left = p_min;\n   }\n \n   {\n     node_pointer p_max = m_p_head->m_p_parent;\n-    while (p_max->m_p_right != NULL)\n+    while (p_max->m_p_right != 0)\n       p_max = p_max->m_p_right;\n     m_p_head->m_p_right = p_max;\n   }"}, {"sha": "e1013e78f1b7c8596c0e4b98409fe9789e91360e", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/debug_fn_imps.hpp", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fdebug_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -49,7 +49,7 @@ assert_valid() const\n   assert_consistent_with_debug_base();\n   assert_size();\n   assert_iterators();\n-  if (m_p_head->m_p_parent == NULL)\n+  if (m_p_head->m_p_parent == 0)\n     {\n       _GLIBCXX_DEBUG_ASSERT(m_size == 0);\n     }\n@@ -64,8 +64,8 @@ void\n PB_DS_CLASS_C_DEC::\n structure_only_assert_valid() const\n {\n-  _GLIBCXX_DEBUG_ASSERT(m_p_head != NULL);\n-  if (m_p_head->m_p_parent == NULL)\n+  _GLIBCXX_DEBUG_ASSERT(m_p_head != 0);\n+  if (m_p_head->m_p_parent == 0)\n     {\n       _GLIBCXX_DEBUG_ASSERT(m_p_head->m_p_left == m_p_head);\n       _GLIBCXX_DEBUG_ASSERT(m_p_head->m_p_right == m_p_head);\n@@ -77,7 +77,7 @@ structure_only_assert_valid() const\n       _GLIBCXX_DEBUG_ASSERT(m_p_head->m_p_right != m_p_head);\n     }\n \n-  if (m_p_head->m_p_parent != NULL)\n+  if (m_p_head->m_p_parent != 0)\n     assert_node_consistent(m_p_head->m_p_parent);\n   assert_min();\n   assert_max();\n@@ -96,35 +96,35 @@ typename PB_DS_CLASS_C_DEC::node_consistent_t\n PB_DS_CLASS_C_DEC::\n assert_node_consistent_(const node_pointer p_nd) const\n {\n-  if (p_nd == NULL)\n-    return (std::make_pair((const_pointer)NULL,(const_pointer)NULL));\n+  if (p_nd == 0)\n+    return (std::make_pair((const_pointer)0,(const_pointer)0));\n \n   assert_node_consistent_with_left(p_nd);\n   assert_node_consistent_with_right(p_nd);\n \n   const std::pair<const_pointer, const_pointer>\n     l_range = assert_node_consistent_(p_nd->m_p_left);\n \n-  if (l_range.second != NULL)\n+  if (l_range.second != 0)\n     _GLIBCXX_DEBUG_ASSERT(Cmp_Fn::operator()(PB_DS_V2F(*l_range.second),\n \t\t\t\t\t     PB_DS_V2F(p_nd->m_value)));\n \n   const std::pair<const_pointer, const_pointer>\n     r_range = assert_node_consistent_(p_nd->m_p_right);\n \n-  if (r_range.first != NULL)\n+  if (r_range.first != 0)\n     _GLIBCXX_DEBUG_ASSERT(Cmp_Fn::operator()(PB_DS_V2F(p_nd->m_value),\n \t\t\t\t\t     PB_DS_V2F(*r_range.first)));\n \n-  return (std::make_pair((l_range.first != NULL)? l_range.first :& p_nd->m_value,(r_range.second != NULL)? r_range.second :& p_nd->m_value));\n+  return (std::make_pair((l_range.first != 0)? l_range.first :& p_nd->m_value,(r_range.second != 0)? r_range.second :& p_nd->m_value));\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n assert_node_consistent_with_left(const node_pointer p_nd) const\n {\n-  if (p_nd->m_p_left == NULL)\n+  if (p_nd->m_p_left == 0)\n     return;\n   _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_left->m_p_parent == p_nd);\n   _GLIBCXX_DEBUG_ASSERT(!Cmp_Fn::operator()(PB_DS_V2F(p_nd->m_value),\n@@ -136,7 +136,7 @@ void\n PB_DS_CLASS_C_DEC::\n assert_node_consistent_with_right(const node_pointer p_nd) const\n {\n-  if (p_nd->m_p_right == NULL)\n+  if (p_nd->m_p_right == 0)\n     return;\n   _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_right->m_p_parent == p_nd);\n   _GLIBCXX_DEBUG_ASSERT(!Cmp_Fn::operator()(PB_DS_V2F(p_nd->m_p_right->m_value),\n@@ -156,13 +156,13 @@ void\n PB_DS_CLASS_C_DEC::\n assert_min_imp(const node_pointer p_nd) const\n {\n-  if (p_nd == NULL)\n+  if (p_nd == 0)\n     {\n       _GLIBCXX_DEBUG_ASSERT(m_p_head->m_p_left == m_p_head);\n       return;\n     }\n \n-  if (p_nd->m_p_left == NULL)\n+  if (p_nd->m_p_left == 0)\n     {\n       _GLIBCXX_DEBUG_ASSERT(p_nd == m_p_head->m_p_left);\n       return;\n@@ -183,13 +183,13 @@ void\n PB_DS_CLASS_C_DEC::\n assert_max_imp(const node_pointer p_nd) const\n {\n-  if (p_nd == NULL)\n+  if (p_nd == 0)\n     {\n       _GLIBCXX_DEBUG_ASSERT(m_p_head->m_p_right == m_p_head);\n       return;\n     }\n \n-  if (p_nd->m_p_right == NULL)\n+  if (p_nd->m_p_right == 0)\n     {\n       _GLIBCXX_DEBUG_ASSERT(p_nd == m_p_head->m_p_right);\n       return;\n@@ -254,7 +254,7 @@ void\n PB_DS_CLASS_C_DEC::\n assert_consistent_with_debug_base(const node_pointer p_nd) const\n {\n-  if (p_nd == NULL)\n+  if (p_nd == 0)\n     return;\n   debug_base::check_key_exists(PB_DS_V2F(p_nd->m_value));\n   assert_consistent_with_debug_base(p_nd->m_p_left);"}, {"sha": "a050a4be7b16af893cadef655047cf61179fdabb", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/erase_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Ferase_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -106,7 +106,7 @@ void\n PB_DS_CLASS_C_DEC::\n clear_imp(node_pointer p_nd)\n {\n-  if (p_nd == NULL)\n+  if (p_nd == 0)\n     return;\n \n   clear_imp(p_nd->m_p_left);"}, {"sha": "74af48a73277a2fbe22fd345f90dd350c995bdc9", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/find_fn_imps.hpp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Ffind_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -46,7 +46,7 @@ lower_bound(const_key_reference r_key) const\n   node_pointer p_pot = m_p_head;\n   node_pointer p_nd = m_p_head->m_p_parent;\n \n-  while (p_nd != NULL)\n+  while (p_nd != 0)\n     if (Cmp_Fn::operator()(\n \t\t\t   PB_DS_V2F(p_nd->m_value),\n \t\t\t   r_key))\n@@ -69,7 +69,7 @@ lower_bound(const_key_reference r_key)\n   node_pointer p_pot = m_p_head;\n   node_pointer p_nd = m_p_head->m_p_parent;\n \n-  while (p_nd != NULL)\n+  while (p_nd != 0)\n     if (Cmp_Fn::operator()(\n \t\t\t   PB_DS_V2F(p_nd->m_value),\n \t\t\t   r_key))\n@@ -92,7 +92,7 @@ upper_bound(const_key_reference r_key) const\n   node_pointer p_pot = m_p_head;\n   node_pointer p_nd = m_p_head->m_p_parent;\n \n-  while (p_nd != NULL)\n+  while (p_nd != 0)\n     if (Cmp_Fn::operator()(r_key,\n \t\t\t   PB_DS_V2F(p_nd->m_value)))\n       {\n@@ -114,7 +114,7 @@ upper_bound(const_key_reference r_key)\n   node_pointer p_pot = m_p_head;\n   node_pointer p_nd = m_p_head->m_p_parent;\n \n-  while (p_nd != NULL)\n+  while (p_nd != 0)\n     if (Cmp_Fn::operator()(r_key,\n \t\t\t   PB_DS_V2F(p_nd->m_value)))\n       {\n@@ -138,7 +138,7 @@ find(const_key_reference r_key)\n     node_pointer p_pot = m_p_head;\n   node_pointer p_nd = m_p_head->m_p_parent;\n \n-  while (p_nd != NULL)\n+  while (p_nd != 0)\n     if (!Cmp_Fn::operator()(PB_DS_V2F(p_nd->m_value), r_key))\n       {\n \tp_pot = p_nd;\n@@ -164,7 +164,7 @@ find(const_key_reference r_key) const\n     node_pointer p_pot = m_p_head;\n   node_pointer p_nd = m_p_head->m_p_parent;\n \n-  while (p_nd != NULL)\n+  while (p_nd != 0)\n     if (!Cmp_Fn::operator()(PB_DS_V2F(p_nd->m_value), r_key))\n       {\n \tp_pot = p_nd;"}, {"sha": "6714c6f10bee8f2d303ea68dd9cddbda0c18aa99", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/insert_fn_imps.hpp", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Finsert_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -53,7 +53,7 @@ insert_leaf(const_reference r_value)\n   node_pointer p_nd = m_p_head->m_p_parent;\n   node_pointer p_pot = m_p_head;\n \n-  while (p_nd != NULL)\n+  while (p_nd != 0)\n     if (!Cmp_Fn::operator()(\n \t\t\t    PB_DS_V2F(p_nd->m_value),\n \t\t\t    PB_DS_V2F(r_value)))\n@@ -86,12 +86,12 @@ insert_leaf(const_reference r_value)\n \t\t\t\t\t\t\t  PB_DS_V2F(r_value)));\n \n   p_nd = p_pot->m_p_left;\n-  if (p_nd == NULL)\n+  if (p_nd == 0)\n     return (std::make_pair(\n \t\t\t   insert_leaf_new(r_value, p_pot, true),\n \t\t\t   true));\n \n-  while (p_nd->m_p_right != NULL)\n+  while (p_nd->m_p_right != 0)\n     p_nd = p_nd->m_p_right;\n \n   return (std::make_pair(\n@@ -109,7 +109,7 @@ insert_leaf_new(const_reference r_value, node_pointer p_nd, bool left_nd)\n \n   if (left_nd)\n     {\n-      _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_left == NULL);\n+      _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_left == 0);\n       _GLIBCXX_DEBUG_ASSERT(Cmp_Fn::operator()(\n \t\t\t\t\t  PB_DS_V2F(r_value),\n \t\t\t\t\t  PB_DS_V2F(p_nd->m_value)));\n@@ -121,7 +121,7 @@ insert_leaf_new(const_reference r_value, node_pointer p_nd, bool left_nd)\n     }\n   else\n     {\n-      _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_right == NULL);\n+      _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_right == 0);\n       _GLIBCXX_DEBUG_ASSERT(Cmp_Fn::operator()(\n \t\t\t\t\t  PB_DS_V2F(p_nd->m_value),\n \t\t\t\t\t  PB_DS_V2F(r_value)));\n@@ -134,7 +134,7 @@ insert_leaf_new(const_reference r_value, node_pointer p_nd, bool left_nd)\n \n   p_new_nd->m_p_parent = p_nd;\n \n-  p_new_nd->m_p_left = p_new_nd->m_p_right = NULL;\n+  p_new_nd->m_p_left = p_new_nd->m_p_right = 0;\n \n   _GLIBCXX_DEBUG_ONLY(assert_node_consistent(p_nd));\n \n@@ -159,7 +159,7 @@ insert_imp_empty(const_reference r_value)\n \n   p_new_node->m_p_parent = m_p_head;\n \n-  p_new_node->m_p_left = p_new_node->m_p_right = NULL;\n+  p_new_node->m_p_left = p_new_node->m_p_right = 0;\n \n   _GLIBCXX_DEBUG_ONLY(debug_base::insert_new(\n \t\t\t\t\t    PB_DS_V2F(r_value)));\n@@ -184,7 +184,7 @@ get_new_node_for_leaf_insert(const_reference r_val, false_type)\n \n   cond.set_no_action();\n \n-  p_new_nd->m_p_left = p_new_nd->m_p_right = NULL;\n+  p_new_nd->m_p_left = p_new_nd->m_p_right = 0;\n \n   ++m_size;\n \n@@ -202,7 +202,7 @@ get_new_node_for_leaf_insert(const_reference r_val, true_type)\n \t\t\t  static_cast<const void* >(&p_new_nd->m_value)))\n     typename node::value_type(r_val);\n \n-  p_new_nd->m_p_left = p_new_nd->m_p_right = NULL;\n+  p_new_nd->m_p_left = p_new_nd->m_p_right = 0;\n \n   ++m_size;\n "}, {"sha": "e20a4134a8bd8c4353edd475ba0450b9c4772d2a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/iterators_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fiterators_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fiterators_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fiterators_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -123,14 +123,14 @@ inline typename PB_DS_CLASS_C_DEC::const_node_iterator\n PB_DS_CLASS_C_DEC::\n node_end() const\n {\n-  return (const_node_iterator(NULL));\n+  return (const_node_iterator(0));\n }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::node_iterator\n PB_DS_CLASS_C_DEC::\n node_end()\n {\n-  return (node_iterator(NULL));\n+  return (node_iterator(0));\n }\n "}, {"sha": "284c0e9bcc9fed7c8a8e450f49b670d629d4ece5", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/node_iterators.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fnode_iterators.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fnode_iterators.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fnode_iterators.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -105,7 +105,7 @@ namespace __gnu_pbds\n       */\n \n       inline\n-      bin_search_tree_const_node_it_(const node_pointer p_nd = NULL) : m_p_nd(const_cast<node_pointer>(p_nd))\n+      bin_search_tree_const_node_it_(const node_pointer p_nd = 0) : m_p_nd(const_cast<node_pointer>(p_nd))\n       { }\n \n       // Access.\n@@ -197,7 +197,7 @@ namespace __gnu_pbds\n       */\n \n       inline\n-      bin_search_tree_node_it_(const node_pointer p_nd = NULL) : PB_DS_TREE_CONST_NODE_ITERATOR_CLASS_C_DEC(\n+      bin_search_tree_node_it_(const node_pointer p_nd = 0) : PB_DS_TREE_CONST_NODE_ITERATOR_CLASS_C_DEC(\n \t\t\t\t\t\t\t\t\t\t\t\t\t    const_cast<node_pointer>(p_nd))\n       { }\n "}, {"sha": "5bf3f229f5d1dd70ceb3944121fcb59e571c4202", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/point_iterators.hpp", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fpoint_iterators.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fpoint_iterators.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fpoint_iterators.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -124,7 +124,7 @@ namespace __gnu_pbds\n     public:\n \n       inline\n-      bin_search_tree_const_it_(const Node_Pointer p_nd = NULL) \n+      bin_search_tree_const_it_(const Node_Pointer p_nd = 0) \n       : m_p_nd(const_cast<Node_Pointer>(p_nd))\n       { }\n \n@@ -152,14 +152,14 @@ namespace __gnu_pbds\n       inline const_pointer\n       operator->() const\n       {\n-\t_GLIBCXX_DEBUG_ASSERT(m_p_nd != NULL);\n+\t_GLIBCXX_DEBUG_ASSERT(m_p_nd != 0);\n \treturn &m_p_nd->m_value;\n       }\n \n       inline const_reference\n       operator*() const\n       {\n-\t_GLIBCXX_DEBUG_ASSERT(m_p_nd != NULL);\n+\t_GLIBCXX_DEBUG_ASSERT(m_p_nd != 0);\n \treturn m_p_nd->m_value;\n       }\n \n@@ -182,7 +182,7 @@ namespace __gnu_pbds\n       inline PB_DS_TREE_CONST_IT_C_DEC& \n       operator++()\n       {\n-\t_GLIBCXX_DEBUG_ASSERT(m_p_nd != NULL);\n+\t_GLIBCXX_DEBUG_ASSERT(m_p_nd != 0);\n \tinc(integral_constant<int,Is_Forward_Iterator>());\n \treturn *this;\n       }\n@@ -225,10 +225,10 @@ namespace __gnu_pbds\n \t    return;\n \t  }\n \n-\tif (m_p_nd->m_p_right != NULL)\n+\tif (m_p_nd->m_p_right != 0)\n \t  {\n \t    m_p_nd = m_p_nd->m_p_right;\n-\t    while (m_p_nd->m_p_left != NULL)\n+\t    while (m_p_nd->m_p_left != 0)\n \t      m_p_nd = m_p_nd->m_p_left;\n \t    return;\n \t  }\n@@ -257,10 +257,10 @@ namespace __gnu_pbds\n \t    return;\n \t  }\n \n-\tif (m_p_nd->m_p_left != NULL)\n+\tif (m_p_nd->m_p_left != 0)\n \t  {\n \t    Node_Pointer p_y = m_p_nd->m_p_left;\n-\t    while (p_y->m_p_right != NULL)\n+\t    while (p_y->m_p_right != 0)\n \t      p_y = p_y->m_p_right;\n \t    m_p_nd = p_y;\n \t    return;\n@@ -297,7 +297,7 @@ namespace __gnu_pbds\n     public:\n \n       inline\n-      bin_search_tree_it_(const Node_Pointer p_nd = NULL) \n+      bin_search_tree_it_(const Node_Pointer p_nd = 0) \n       : PB_DS_TREE_CONST_IT_C_DEC((Node_Pointer)p_nd)\n       { }\n \n@@ -325,14 +325,14 @@ namespace __gnu_pbds\n       inline typename PB_DS_TREE_CONST_IT_C_DEC::pointer\n       operator->() const\n       {\n-\t_GLIBCXX_DEBUG_ASSERT(base_it_type::m_p_nd != NULL);\n+\t_GLIBCXX_DEBUG_ASSERT(base_it_type::m_p_nd != 0);\n \treturn &base_it_type::m_p_nd->m_value;\n       }\n \n       inline typename PB_DS_TREE_CONST_IT_C_DEC::reference\n       operator*() const\n       {\n-\t_GLIBCXX_DEBUG_ASSERT(base_it_type::m_p_nd != NULL);\n+\t_GLIBCXX_DEBUG_ASSERT(base_it_type::m_p_nd != 0);\n \treturn base_it_type::m_p_nd->m_value;\n       }\n "}, {"sha": "76c543f149ad14b40d4a302db5fe19c48492bc87", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/r_erase_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fr_erase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fr_erase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fr_erase_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -106,7 +106,7 @@ void\n PB_DS_CLASS_C_DEC::\n clear_imp(node_pointer p_nd)\n {\n-  if (p_nd == NULL)\n+  if (p_nd == 0)\n     return;\n \n   clear_imp(p_nd->m_p_left);"}, {"sha": "b21e98102df95aa1ff7888712f5590e599ca0cd9", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/rotate_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Frotate_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Frotate_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Frotate_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -47,7 +47,7 @@ rotate_left(node_pointer p_x)\n \n   p_x->m_p_right = p_y->m_p_left;\n \n-  if (p_y->m_p_left != NULL)\n+  if (p_y->m_p_left != 0)\n     p_y->m_p_left->m_p_parent = p_x;\n \n   p_y->m_p_parent = p_x->m_p_parent;\n@@ -78,7 +78,7 @@ rotate_right(node_pointer p_x)\n \n   p_x->m_p_left = p_y->m_p_right;\n \n-  if (p_y->m_p_right != NULL)\n+  if (p_y->m_p_right != 0)\n     p_y->m_p_right->m_p_parent = p_x;\n \n   p_y->m_p_parent = p_x->m_p_parent;\n@@ -131,7 +131,7 @@ apply_update(node_pointer p_nd, Node_Update_*  /*p_update*/)\n {\n   node_update::operator()(\n \t\t\t   node_iterator(p_nd),\n-\t\t\t   const_node_iterator(static_cast<node_pointer>(NULL)));\n+\t\t\t   const_node_iterator(static_cast<node_pointer>(0)));\n }\n \n PB_DS_CLASS_T_DEC"}, {"sha": "2c027f6ab985bb6a8ca10f604fa01f058f31246a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/split_join_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fsplit_join_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -139,7 +139,7 @@ typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n recursive_count(node_pointer p) const\n {\n-  if (p == NULL)\n+  if (p == 0)\n     return 0;\n   return 1 + recursive_count(p->m_p_left) + recursive_count(p->m_p_right);\n }"}, {"sha": "76cf80bd54432deb621c87302f2ff91f5fab80b4", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/const_iterator.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fconst_iterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fconst_iterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fconst_iterator.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -125,7 +125,7 @@ namespace __gnu_pbds\n       inline PB_DS_CLASS_C_DEC& \n       operator++()\n       {\n-\t_GLIBCXX_DEBUG_ASSERT(base_type::m_p_e != NULL);\n+\t_GLIBCXX_DEBUG_ASSERT(base_type::m_p_e != 0);\n \tinc();\n \treturn *this;\n       }"}, {"sha": "ab5efe2bb64537f947867ab8d513cbcdc34ed2d1", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/const_point_iterator.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fconst_point_iterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fconst_point_iterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fconst_point_iterator.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -92,7 +92,7 @@ namespace __gnu_pbds\n \n       // Default constructor.\n       inline\n-      binary_heap_const_point_iterator_() : m_p_e(NULL) { }\n+      binary_heap_const_point_iterator_() : m_p_e(0) { }\n \n       // Copy constructor.\n       inline\n@@ -104,15 +104,15 @@ namespace __gnu_pbds\n       inline const_pointer\n       operator->() const\n       {\n-\t_GLIBCXX_DEBUG_ASSERT(m_p_e != NULL);\n+\t_GLIBCXX_DEBUG_ASSERT(m_p_e != 0);\n \treturn to_ptr(integral_constant<int, Simple>());\n       }\n \n       // Access.\n       inline const_reference\n       operator*() const\n       {\n-\t_GLIBCXX_DEBUG_ASSERT(m_p_e != NULL);\n+\t_GLIBCXX_DEBUG_ASSERT(m_p_e != 0);\n \treturn *to_ptr(integral_constant<int, Simple>());\n       }\n "}, {"sha": "dfceb689132943b6fdda62421d987c3affe5c369", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/split_join_fn_imps.hpp", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fsplit_join_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -68,8 +68,8 @@ split(Pred pred, PB_DS_CLASS_C_DEC& other)\n   const size_type other_actual_size =\n     other.get_new_size_for_arbitrary(ersd);\n \n-  entry_pointer a_entries = NULL;\n-  entry_pointer a_other_entries = NULL;\n+  entry_pointer a_entries = 0;\n+  entry_pointer a_other_entries = 0;\n \n   __try\n     {\n@@ -79,10 +79,10 @@ split(Pred pred, PB_DS_CLASS_C_DEC& other)\n     }\n   __catch(...)\n     {\n-      if (a_entries != NULL)\n+      if (a_entries != 0)\n \ts_entry_allocator.deallocate(a_entries, actual_size);\n \n-      if (a_other_entries != NULL)\n+      if (a_other_entries != 0)\n \ts_entry_allocator.deallocate(a_other_entries, other_actual_size);\n \n       __throw_exception_again;\n@@ -128,8 +128,8 @@ join(PB_DS_CLASS_C_DEC& other)\n   const size_type len = m_size + other.m_size;\n   const size_type actual_size = resize_policy::get_new_size_for_arbitrary(len);\n \n-  entry_pointer a_entries = NULL;\n-  entry_pointer a_other_entries = NULL;\n+  entry_pointer a_entries = 0;\n+  entry_pointer a_other_entries = 0;\n \n   __try\n     {\n@@ -138,10 +138,10 @@ join(PB_DS_CLASS_C_DEC& other)\n     }\n   __catch(...)\n     {\n-      if (a_entries != NULL)\n+      if (a_entries != 0)\n \ts_entry_allocator.deallocate(a_entries, actual_size);\n \n-      if (a_other_entries != NULL)\n+      if (a_other_entries != 0)\n \ts_entry_allocator.deallocate(a_other_entries, resize_policy::min_size);\n \n       __throw_exception_again;"}, {"sha": "983df099dd7db417060f1bf5f12e6c23d005b601", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binomial_heap_base_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fconstructors_destructor_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -53,7 +53,7 @@ copy_from_range(It first_it, It last_it)\n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n binomial_heap_base_() :\n-  m_p_max(NULL)\n+  m_p_max(0)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid(false);)\n     }\n@@ -62,7 +62,7 @@ PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n binomial_heap_base_(const Cmp_Fn& r_cmp_fn) :\n   PB_DS_BASE_C_DEC(r_cmp_fn),\n-  m_p_max(NULL)\n+  m_p_max(0)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid(false);)\n     }\n@@ -71,7 +71,7 @@ PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n binomial_heap_base_(const PB_DS_CLASS_C_DEC& other) :\n   PB_DS_BASE_C_DEC(other),\n-  m_p_max(NULL)\n+  m_p_max(0)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid(false);)\n     }"}, {"sha": "1ccee551402b3fa47a2c7c76593d61087be87911", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binomial_heap_base_/debug_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fdebug_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -55,9 +55,9 @@ void\n PB_DS_CLASS_C_DEC::\n assert_max() const\n {\n-  if (m_p_max == NULL)\n+  if (m_p_max == 0)\n     return;\n-  _GLIBCXX_DEBUG_ASSERT(base_type::parent(m_p_max) == NULL);\n+  _GLIBCXX_DEBUG_ASSERT(base_type::parent(m_p_max) == 0);\n   for (const_iterator it = base_type::begin(); it != base_type::end(); ++it)\n     _GLIBCXX_DEBUG_ASSERT(!Cmp_Fn::operator()(m_p_max->m_value,\n \t\t\t\t\t      it.m_p_nd->m_value));\n@@ -71,14 +71,14 @@ assert_node_consistent(const_node_pointer p_nd, bool strictly_binomial,\n {\n   _GLIBCXX_DEBUG_ASSERT(increasing || strictly_binomial);\n   base_type::assert_node_consistent(p_nd, false);\n-  if (p_nd == NULL)\n+  if (p_nd == 0)\n     return;\n   _GLIBCXX_DEBUG_ASSERT(p_nd->m_metadata == base_type::degree(p_nd));\n   _GLIBCXX_DEBUG_ASSERT(base_type::size_under_node(p_nd) ==\n \t\t   static_cast<size_type>(1 << p_nd->m_metadata));\n   assert_node_consistent(p_nd->m_p_next_sibling, strictly_binomial, increasing);\n   assert_node_consistent(p_nd->m_p_l_child, true, false);\n-  if (p_nd->m_p_next_sibling != NULL)\n+  if (p_nd->m_p_next_sibling != 0)\n     {\n       if (increasing)\n \t{"}, {"sha": "d6ead1e51c3ae63dfa1248e1737ddc1fbc3d98b2", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binomial_heap_base_/erase_fn_imps.hpp", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Ferase_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -46,18 +46,18 @@ pop()\n   _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n     _GLIBCXX_DEBUG_ASSERT(!base_type::empty());\n \n-  if (m_p_max == NULL)\n+  if (m_p_max == 0)\n     find_max();\n \n-  _GLIBCXX_DEBUG_ASSERT(m_p_max != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(m_p_max != 0);\n \n   node_pointer p_nd = m_p_max;\n \n   remove_parentless_node(m_p_max);\n \n   base_type::actual_erase_node(p_nd);\n \n-  m_p_max = NULL;\n+  m_p_max = 0;\n \n   _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n     }\n@@ -67,33 +67,33 @@ void\n PB_DS_CLASS_C_DEC::\n remove_parentless_node(node_pointer p_nd)\n {\n-  _GLIBCXX_DEBUG_ASSERT(p_nd != NULL);\n-  _GLIBCXX_DEBUG_ASSERT(base_type::parent(p_nd) == NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd != 0);\n+  _GLIBCXX_DEBUG_ASSERT(base_type::parent(p_nd) == 0);\n \n   node_pointer p_cur_root = p_nd == base_type::m_p_root?\n     p_nd->m_p_next_sibling :\n     base_type::m_p_root;\n \n-  if (p_cur_root != NULL)\n-    p_cur_root->m_p_prev_or_parent = NULL;\n+  if (p_cur_root != 0)\n+    p_cur_root->m_p_prev_or_parent = 0;\n \n-  if (p_nd->m_p_prev_or_parent != NULL)\n+  if (p_nd->m_p_prev_or_parent != 0)\n     p_nd->m_p_prev_or_parent->m_p_next_sibling = p_nd->m_p_next_sibling;\n \n-  if (p_nd->m_p_next_sibling != NULL)\n+  if (p_nd->m_p_next_sibling != 0)\n     p_nd->m_p_next_sibling->m_p_prev_or_parent = p_nd->m_p_prev_or_parent;\n \n   node_pointer p_child = p_nd->m_p_l_child;\n \n-  if (p_child != NULL)\n+  if (p_child != 0)\n     {\n-      p_child->m_p_prev_or_parent = NULL;\n+      p_child->m_p_prev_or_parent = 0;\n \n-      while (p_child->m_p_next_sibling != NULL)\n+      while (p_child->m_p_next_sibling != 0)\n \tp_child = p_child->m_p_next_sibling;\n     }\n \n-  m_p_max = NULL;\n+  m_p_max = 0;\n \n   base_type::m_p_root = join(p_cur_root, p_child);\n }\n@@ -105,7 +105,7 @@ clear()\n {\n   base_type::clear();\n \n-  m_p_max = NULL;\n+  m_p_max = 0;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -122,7 +122,7 @@ erase(point_iterator it)\n \n   base_type::actual_erase_node(it.m_p_nd);\n \n-  m_p_max = NULL;\n+  m_p_max = 0;\n \n   _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n     }\n@@ -148,7 +148,7 @@ erase_if(Pred pred)\n \n   size_type ersd = 0;\n \n-  while (p_out != NULL)\n+  while (p_out != 0)\n     {\n       ++ersd;\n \n@@ -161,19 +161,19 @@ erase_if(Pred pred)\n \n   node_pointer p_cur = base_type::m_p_root;\n \n-  base_type::m_p_root = NULL;\n+  base_type::m_p_root = 0;\n \n-  while (p_cur != NULL)\n+  while (p_cur != 0)\n     {\n       node_pointer p_next = p_cur->m_p_next_sibling;\n \n-      p_cur->m_p_l_child = p_cur->m_p_prev_or_parent = NULL;\n+      p_cur->m_p_l_child = p_cur->m_p_prev_or_parent = 0;\n \n       p_cur->m_metadata = 0;\n \n       p_cur->m_p_next_sibling = base_type::m_p_root;\n \n-      if (base_type::m_p_root != NULL)\n+      if (base_type::m_p_root != 0)\n \tbase_type::m_p_root->m_p_prev_or_parent = p_cur;\n \n       base_type::m_p_root = p_cur;\n@@ -183,7 +183,7 @@ erase_if(Pred pred)\n       p_cur = p_next;\n     }\n \n-  m_p_max = NULL;\n+  m_p_max = 0;\n \n   _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n "}, {"sha": "3c8ff109def348515804e72c7dc9b88f2cb8d36f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binomial_heap_base_/find_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Ffind_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -46,10 +46,10 @@ top() const\n   _GLIBCXX_DEBUG_ONLY(assert_valid(false);)\n     _GLIBCXX_DEBUG_ASSERT(!base_type::empty());\n \n-  if (m_p_max == NULL)\n+  if (m_p_max == 0)\n     const_cast<PB_DS_CLASS_C_DEC* >(this)->find_max();\n \n-  _GLIBCXX_DEBUG_ASSERT(m_p_max != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(m_p_max != 0);\n   return m_p_max->m_value;\n }\n \n@@ -62,7 +62,7 @@ find_max()\n \n   m_p_max = p_cur;\n \n-  while (p_cur != NULL)\n+  while (p_cur != 0)\n     {\n       if (Cmp_Fn::operator()(m_p_max->m_value, p_cur->m_value))\n \tm_p_max = p_cur;"}, {"sha": "735bddbb71a82b74328b4f346f093b2c9fdd86e4", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binomial_heap_base_/insert_fn_imps.hpp", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Finsert_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -49,7 +49,7 @@ push(const_reference r_val)\n \n   insert_node(p_nd);\n \n-  m_p_max = NULL;\n+  m_p_max = 0;\n \n   _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n \n@@ -61,10 +61,10 @@ inline void\n PB_DS_CLASS_C_DEC::\n insert_node(node_pointer p_nd)\n {\n-  if (base_type::m_p_root == NULL)\n+  if (base_type::m_p_root == 0)\n     {\n       p_nd->m_p_next_sibling = p_nd->m_p_prev_or_parent =\n-\tp_nd->m_p_l_child = NULL;\n+\tp_nd->m_p_l_child = 0;\n \n       p_nd->m_metadata = 0;\n \n@@ -75,7 +75,7 @@ insert_node(node_pointer p_nd)\n \n   if (base_type::m_p_root->m_metadata > 0)\n     {\n-      p_nd->m_p_prev_or_parent = p_nd->m_p_l_child = NULL;\n+      p_nd->m_p_prev_or_parent = p_nd->m_p_l_child = 0;\n \n       p_nd->m_p_next_sibling = base_type::m_p_root;\n \n@@ -92,23 +92,23 @@ insert_node(node_pointer p_nd)\n     {\n       p_nd->m_p_next_sibling = base_type::m_p_root->m_p_next_sibling;\n \n-      p_nd->m_p_prev_or_parent = NULL;\n+      p_nd->m_p_prev_or_parent = 0;\n \n       p_nd->m_metadata = 1;\n \n       p_nd->m_p_l_child = base_type::m_p_root;\n \n       base_type::m_p_root->m_p_prev_or_parent = p_nd;\n \n-      base_type::m_p_root->m_p_next_sibling = NULL;\n+      base_type::m_p_root->m_p_next_sibling = 0;\n \n       base_type::m_p_root = p_nd;\n     }\n   else\n     {\n-      p_nd->m_p_next_sibling = NULL;\n+      p_nd->m_p_next_sibling = 0;\n \n-      p_nd->m_p_l_child = NULL;\n+      p_nd->m_p_l_child = 0;\n \n       p_nd->m_p_prev_or_parent = base_type::m_p_root;\n \n@@ -128,7 +128,7 @@ inline typename PB_DS_CLASS_C_DEC::node_pointer\n PB_DS_CLASS_C_DEC::\n fix(node_pointer p_nd) const\n {\n-  while (p_nd->m_p_next_sibling != NULL&& \n+  while (p_nd->m_p_next_sibling != 0&& \n \t p_nd->m_metadata == p_nd->m_p_next_sibling->m_metadata)\n     {\n       node_pointer p_next = p_nd->m_p_next_sibling;\n@@ -138,7 +138,7 @@ fix(node_pointer p_nd) const\n \t  p_next->m_p_prev_or_parent =\n \t    p_nd->m_p_prev_or_parent;\n \n-\t  if (p_nd->m_p_prev_or_parent != NULL)\n+\t  if (p_nd->m_p_prev_or_parent != 0)\n \t    p_nd->m_p_prev_or_parent->m_p_next_sibling = p_next;\n \n \t  base_type::make_child_of(p_nd, p_next);\n@@ -151,16 +151,16 @@ fix(node_pointer p_nd) const\n         {\n \t  p_nd->m_p_next_sibling = p_next->m_p_next_sibling;\n \n-\t  if (p_nd->m_p_next_sibling != NULL)\n-\t    p_next->m_p_next_sibling = NULL;\n+\t  if (p_nd->m_p_next_sibling != 0)\n+\t    p_next->m_p_next_sibling = 0;\n \n \t  base_type::make_child_of(p_next, p_nd);\n \n \t  ++p_nd->m_metadata;\n         }\n     }\n \n-  if (p_nd->m_p_next_sibling != NULL)\n+  if (p_nd->m_p_next_sibling != 0)\n     p_nd->m_p_next_sibling->m_p_prev_or_parent = p_nd;\n \n   return p_nd;\n@@ -174,7 +174,7 @@ modify(point_iterator it, const_reference r_new_val)\n   _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n     node_pointer p_nd = it.m_p_nd;\n \n-  _GLIBCXX_DEBUG_ASSERT(p_nd != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd != 0);\n   _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(p_nd, false);)\n \n     const bool bubble_up = Cmp_Fn::operator()(p_nd->m_value, r_new_val);\n@@ -185,18 +185,18 @@ modify(point_iterator it, const_reference r_new_val)\n     {\n       node_pointer p_parent = base_type::parent(p_nd);\n \n-      while (p_parent != NULL&& \n+      while (p_parent != 0&& \n \t     Cmp_Fn::operator()(p_parent->m_value, p_nd->m_value))\n         {\n \t  base_type::swap_with_parent(p_nd, p_parent);\n \n \t  p_parent = base_type::parent(p_nd);\n         }\n \n-      if (p_nd->m_p_prev_or_parent == NULL)\n+      if (p_nd->m_p_prev_or_parent == 0)\n \tbase_type::m_p_root = p_nd;\n \n-      m_p_max = NULL;\n+      m_p_max = 0;\n \n       _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n \n@@ -209,7 +209,7 @@ modify(point_iterator it, const_reference r_new_val)\n \n   insert_node(p_nd);\n \n-  m_p_max = NULL;\n+  m_p_max = 0;\n \n   _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n     }"}, {"sha": "2a96236fb9ef00c66c23513fd97ff31ef04f2430", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binomial_heap_base_/split_join_fn_imps.hpp", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fsplit_join_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -61,7 +61,7 @@ split(Pred pred, PB_DS_CLASS_C_DEC& other)\n \n   node_pointer p_out = base_type::prune(pred);\n \n-  while (p_out != NULL)\n+  while (p_out != 0)\n     {\n       _GLIBCXX_DEBUG_ASSERT(base_type::m_size > 0);\n       --base_type::m_size;\n@@ -70,13 +70,13 @@ split(Pred pred, PB_DS_CLASS_C_DEC& other)\n \n       node_pointer p_next = p_out->m_p_next_sibling;\n \n-      p_out->m_p_l_child = p_out->m_p_prev_or_parent = NULL;\n+      p_out->m_p_l_child = p_out->m_p_prev_or_parent = 0;\n \n       p_out->m_metadata = 0;\n \n       p_out->m_p_next_sibling = other.m_p_root;\n \n-      if (other.m_p_root != NULL)\n+      if (other.m_p_root != 0)\n \tother.m_p_root->m_p_prev_or_parent = p_out;\n \n       other.m_p_root = p_out;\n@@ -90,19 +90,19 @@ split(Pred pred, PB_DS_CLASS_C_DEC& other)\n \n     node_pointer p_cur = base_type::m_p_root;\n \n-  base_type::m_p_root = NULL;\n+  base_type::m_p_root = 0;\n \n-  while (p_cur != NULL)\n+  while (p_cur != 0)\n     {\n       node_pointer p_next = p_cur->m_p_next_sibling;\n \n-      p_cur->m_p_l_child = p_cur->m_p_prev_or_parent = NULL;\n+      p_cur->m_p_l_child = p_cur->m_p_prev_or_parent = 0;\n \n       p_cur->m_metadata = 0;\n \n       p_cur->m_p_next_sibling = base_type::m_p_root;\n \n-      if (base_type::m_p_root != NULL)\n+      if (base_type::m_p_root != 0)\n \tbase_type::m_p_root->m_p_prev_or_parent = p_cur;\n \n       base_type::m_p_root = p_cur;\n@@ -112,7 +112,7 @@ split(Pred pred, PB_DS_CLASS_C_DEC& other)\n       p_cur = p_next;\n     }\n \n-  m_p_max = NULL;\n+  m_p_max = 0;\n \n   _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n     _GLIBCXX_DEBUG_ONLY(other.assert_valid(true);)\n@@ -128,7 +128,7 @@ join(PB_DS_CLASS_C_DEC& other)\n \n     node_pointer p_other = other.m_p_root;\n \n-  if (p_other != NULL)\n+  if (p_other != 0)\n     do\n       {\n \tnode_pointer p_next = p_other->m_p_next_sibling;\n@@ -137,15 +137,15 @@ join(PB_DS_CLASS_C_DEC& other)\n \n \tp_other = p_next;\n       }\n-    while (p_other != NULL);\n+    while (p_other != 0);\n \n   base_type::m_p_root = join(base_type::m_p_root, other.m_p_root);\n   base_type::m_size += other.m_size;\n-  m_p_max = NULL;\n+  m_p_max = 0;\n \n-  other.m_p_root = NULL;\n+  other.m_p_root = 0;\n   other.m_size = 0;\n-  other.m_p_max = NULL;\n+  other.m_p_max = 0;\n \n   _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n     _GLIBCXX_DEBUG_ONLY(other.assert_valid(true);)\n@@ -156,15 +156,15 @@ inline typename PB_DS_CLASS_C_DEC::node_pointer\n PB_DS_CLASS_C_DEC::\n join(node_pointer p_lhs, node_pointer p_rhs) const\n {\n-  node_pointer p_ret = NULL;\n+  node_pointer p_ret = 0;\n \n-  node_pointer p_cur = NULL;\n+  node_pointer p_cur = 0;\n \n-  while (p_lhs != NULL || p_rhs != NULL)\n+  while (p_lhs != 0 || p_rhs != 0)\n     {\n-      if (p_rhs == NULL)\n+      if (p_rhs == 0)\n         {\n-\t  if (p_cur == NULL)\n+\t  if (p_cur == 0)\n \t    p_ret = p_cur = p_lhs;\n \t  else\n             {\n@@ -173,11 +173,11 @@ join(node_pointer p_lhs, node_pointer p_rhs) const\n \t      p_lhs->m_p_prev_or_parent = p_cur;\n             }\n \n-\t  p_cur = p_lhs = NULL;\n+\t  p_cur = p_lhs = 0;\n         }\n-      else if (p_lhs == NULL || p_rhs->m_metadata < p_lhs->m_metadata)\n+      else if (p_lhs == 0 || p_rhs->m_metadata < p_lhs->m_metadata)\n         {\n-\t  if (p_cur == NULL)\n+\t  if (p_cur == 0)\n             {\n \t      p_ret = p_cur = p_rhs;\n \n@@ -196,7 +196,7 @@ join(node_pointer p_lhs, node_pointer p_rhs) const\n         }\n       else if (p_lhs->m_metadata < p_rhs->m_metadata)\n         {\n-\t  if (p_cur == NULL)\n+\t  if (p_cur == 0)\n \t    p_ret = p_cur = p_lhs;\n \t  else\n             {\n@@ -221,11 +221,11 @@ join(node_pointer p_lhs, node_pointer p_rhs) const\n         }\n     }\n \n-  if (p_cur != NULL)\n-    p_cur->m_p_next_sibling = NULL;\n+  if (p_cur != 0)\n+    p_cur->m_p_next_sibling = 0;\n \n-  if (p_ret != NULL)\n-    p_ret->m_p_prev_or_parent = NULL;\n+  if (p_ret != 0)\n+    p_ret->m_p_prev_or_parent = 0;\n \n   return p_ret;\n }"}, {"sha": "2bace9c5ebd0aa25c72b6a6aa142cbc721ab386d", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/cc_ht_map_.hpp", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcc_ht_map_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcc_ht_map_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcc_ht_map_.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -374,15 +374,15 @@ namespace __gnu_pbds\n \tentry_pointer p_e = m_entries[pos];\n \tresize_base::notify_insert_search_start();\n \n-\twhile (p_e != NULL \n+\twhile (p_e != 0 \n \t       && !hash_eq_fn_base::operator()(p_e->m_value.first, r_key))\n \t  {\n \t    resize_base::notify_insert_search_collision();\n \t    p_e = p_e->m_p_next;\n \t  }\n \n \tresize_base::notify_insert_search_end();\n-\tif (p_e != NULL)\n+\tif (p_e != 0)\n \t  {\n \t    _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(r_key);)\n \t    return (p_e->m_value.second);\n@@ -399,15 +399,15 @@ namespace __gnu_pbds\n \tcomp_hash pos_hash_pair = ranged_hash_fn_base::operator()(r_key);\n \tentry_pointer p_e = m_entries[pos_hash_pair.first];\n \tresize_base::notify_insert_search_start();\n-\twhile (p_e != NULL && \n+\twhile (p_e != 0 && \n \t       !hash_eq_fn_base::operator()(p_e->m_value.first, p_e->m_hash, r_key, pos_hash_pair.second))\n \t  {\n \t    resize_base::notify_insert_search_collision();\n \t    p_e = p_e->m_p_next;\n \t  }\n \n \tresize_base::notify_insert_search_end();\n-\tif (p_e != NULL)\n+\tif (p_e != 0)\n \t  {\n \t    _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(r_key);)\n \t    return p_e->m_value.second;\n@@ -468,7 +468,7 @@ namespace __gnu_pbds\n       {\n \tentry_pointer p_e = m_entries[ranged_hash_fn_base::operator()(r_key)];\n \tresize_base::notify_find_search_start();\n-\twhile (p_e != NULL && \n+\twhile (p_e != 0 && \n \t       !hash_eq_fn_base::operator()(PB_DS_V2F(p_e->m_value), r_key))\n \t  {\n \t    resize_base::notify_find_search_collision();\n@@ -478,7 +478,7 @@ namespace __gnu_pbds\n \tresize_base::notify_find_search_end();\n \n #ifdef _GLIBCXX_DEBUG\n-\tif (p_e == NULL)\n+\tif (p_e == 0)\n \t  debug_base::check_key_does_not_exist(r_key);\n \telse\n \t  debug_base::check_key_exists(r_key);\n@@ -492,7 +492,7 @@ namespace __gnu_pbds\n \tcomp_hash pos_hash_pair = ranged_hash_fn_base::operator()(r_key);\n \tentry_pointer p_e = m_entries[pos_hash_pair.first];\n \tresize_base::notify_find_search_start();\n-\twhile (p_e != NULL && \n+\twhile (p_e != 0 && \n \t       !hash_eq_fn_base::operator()(PB_DS_V2F(p_e->m_value),\n \t\t\t\t\t    p_e->m_hash,\n \t\t\t\t\t    r_key, pos_hash_pair.second))\n@@ -504,7 +504,7 @@ namespace __gnu_pbds\n \tresize_base::notify_find_search_end();\n \n #ifdef _GLIBCXX_DEBUG\n-\tif (p_e == NULL)\n+\tif (p_e == 0)\n \t  debug_base::check_key_does_not_exist(r_key);\n \telse\n \t  debug_base::check_key_exists(r_key);\n@@ -534,36 +534,36 @@ namespace __gnu_pbds\n       inc_it_state(const_pointer& r_p_value, \n \t\t   std::pair<entry_pointer, size_type>& r_pos) const\n       {\n-\t_GLIBCXX_DEBUG_ASSERT(r_p_value != NULL);\n+\t_GLIBCXX_DEBUG_ASSERT(r_p_value != 0);\n \tr_pos.first = r_pos.first->m_p_next;\n-\tif (r_pos.first != NULL)\n+\tif (r_pos.first != 0)\n \t  {\n \t    r_p_value = &r_pos.first->m_value;\n \t    return;\n \t  }\n \n \tfor (++r_pos.second; r_pos.second < m_num_e; ++r_pos.second)\n-\t  if (m_entries[r_pos.second] != NULL)\n+\t  if (m_entries[r_pos.second] != 0)\n \t    {\n \t      r_pos.first = m_entries[r_pos.second];\n \t      r_p_value = &r_pos.first->m_value;\n \t      return;\n \t    }\n-\tr_p_value = NULL;\n+\tr_p_value = 0;\n       }\n \n       void\n       get_start_it_state(pointer& r_p_value, \n \t\t\t std::pair<entry_pointer, size_type>& r_pos) const\n       {\n \tfor (r_pos.second = 0; r_pos.second < m_num_e; ++r_pos.second)\n-\t  if (m_entries[r_pos.second] != NULL)\n+\t  if (m_entries[r_pos.second] != 0)\n \t    {\n \t      r_pos.first = m_entries[r_pos.second];\n \t      r_p_value = &r_pos.first->m_value;\n \t      return;\n \t    }\n-\tr_p_value = NULL;\n+\tr_p_value = 0;\n       }\n \n #ifdef _GLIBCXX_DEBUG"}, {"sha": "c52684472323952c05ed408abc997c7a5ca34dd7", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/cmp_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcmp_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcmp_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcmp_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -64,7 +64,7 @@ cmp_with_other(const Other_Map_Type& other) const\n \tconst_cast<PB_DS_CLASS_C_DEC& >(*this).\n \tfind_key_pointer(r_key, traits_base::m_store_extra_indicator);\n \n-      if (p_mapped_value == NULL)\n+      if (p_mapped_value == 0)\n \treturn false;\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR"}, {"sha": "f67254169b71de1273b43107759c1f0d5137b4af", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/constructor_destructor_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -87,7 +87,7 @@ PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn) :\n   m_num_e(resize_base::get_nearest_larger_size(1)), m_num_used_e(0),\n   m_entries(s_entry_pointer_allocator.allocate(m_num_e))\n {\n-  std::fill(m_entries, m_entries + m_num_e, (entry_pointer)NULL);\n+  std::fill(m_entries, m_entries + m_num_e, (entry_pointer)0);\n   Resize_Policy::notify_cleared();\n   ranged_hash_fn_base::notify_resized(m_num_e);\n   _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n@@ -184,7 +184,7 @@ void\n PB_DS_CLASS_C_DEC::\n initialize()\n {\n-  std::fill(m_entries, m_entries + m_num_e, entry_pointer(NULL));\n+  std::fill(m_entries, m_entries + m_num_e, entry_pointer(0));\n   Resize_Policy::notify_resized(m_num_e);\n   Resize_Policy::notify_cleared();\n   ranged_hash_fn_base::notify_resized(m_num_e);"}, {"sha": "81d68e3311e4d8806aac5cfed54e9bb6803177ff", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/debug_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -58,7 +58,7 @@ assert_entry_pointer_array_valid(const entry_pointer_array a_p_entries) const\n   for (size_type pos = 0; pos < m_num_e; ++pos)\n     {\n       entry_pointer p_e = a_p_entries[pos];\n-      while (p_e != NULL)\n+      while (p_e != 0)\n         {\n \t  ++iterated_num_used_e;\n \t  assert_entry_pointer_valid(p_e, traits_base::m_store_extra_indicator);"}, {"sha": "912535f93901a3268ea64678add78f5f9bafe4a3", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/entry_list_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fentry_list_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fentry_list_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fentry_list_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -43,7 +43,7 @@ void\n PB_DS_CLASS_C_DEC::\n deallocate_links_in_list(entry_pointer p_e)\n {\n-  while (p_e != NULL)\n+  while (p_e != 0)\n     {\n       entry_pointer p_dealloc_e = p_e;\n       p_e = p_e->m_p_next;"}, {"sha": "e1260c0d9bdc2557a466edeab16387b9b32a56bd", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/erase_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -61,7 +61,7 @@ erase_if(Pred pred)\n   size_type num_ersd = 0;\n   for (size_type pos = 0; pos < m_num_e; ++pos)\n     {\n-      while (m_entries[pos] != NULL && pred(m_entries[pos]->m_value))\n+      while (m_entries[pos] != 0 && pred(m_entries[pos]->m_value))\n         {\n \t  ++num_ersd;\n \t  entry_pointer p_next_e = m_entries[pos]->m_p_next;\n@@ -70,7 +70,7 @@ erase_if(Pred pred)\n         }\n \n       entry_pointer p_e = m_entries[pos];\n-      while (p_e != NULL && p_e->m_p_next != NULL)\n+      while (p_e != 0 && p_e->m_p_next != 0)\n         {\n \t  if (pred(p_e->m_p_next->m_value))\n             {\n@@ -92,7 +92,7 @@ PB_DS_CLASS_C_DEC::\n clear()\n {\n   for (size_type pos = 0; pos < m_num_e; ++pos)\n-    while (m_entries[pos] != NULL)\n+    while (m_entries[pos] != 0)\n       erase_entry_pointer(m_entries[pos]);\n   do_resize_if_needed_no_throw();\n   resize_base::notify_cleared();"}, {"sha": "1f8fa06bda36c9940458274dc22b3aace3ed093d", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/erase_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_no_store_hash_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -56,7 +56,7 @@ erase_in_pos_imp(const_key_reference r_key, size_type pos)\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n   entry_pointer p_e = m_entries[pos];\n   resize_base::notify_erase_search_start();\n-  if (p_e == NULL)\n+  if (p_e == 0)\n     {\n       resize_base::notify_erase_search_end();\n       _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key);)\n@@ -77,7 +77,7 @@ erase_in_pos_imp(const_key_reference r_key, size_type pos)\n   while (true)\n     {\n       entry_pointer p_next_e = p_e->m_p_next;\n-      if (p_next_e == NULL)\n+      if (p_next_e == 0)\n         {\n \t  resize_base::notify_erase_search_end();\n \t  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key);)"}, {"sha": "01192b4cefddccb5a248c8295a84a510902a045b", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/erase_store_hash_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_store_hash_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -47,7 +47,7 @@ erase_in_pos_imp(const_key_reference r_key, const comp_hash& r_pos_hash_pair)\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n   entry_pointer p_e = m_entries[r_pos_hash_pair.first];\n   resize_base::notify_erase_search_start();\n-  if (p_e == NULL)\n+  if (p_e == 0)\n     {\n       resize_base::notify_erase_search_end();\n       _GLIBCXX_DEBUG_ONLY(debug_base:: check_key_does_not_exist(r_key);)\n@@ -69,7 +69,7 @@ erase_in_pos_imp(const_key_reference r_key, const comp_hash& r_pos_hash_pair)\n   while (true)\n     {\n       entry_pointer p_next_e = p_e->m_p_next;\n-      if (p_next_e == NULL)\n+      if (p_next_e == 0)\n         {\n \t  resize_base::notify_erase_search_end();\n \t  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key);)"}, {"sha": "03db9f84f2836eddd75179eedb05c58857deb42f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/find_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ffind_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -61,11 +61,11 @@ PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::point_iterator\n PB_DS_CLASS_C_DEC::\n find_end()\n-{ return NULL; }\n+{ return 0; }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::const_point_iterator\n PB_DS_CLASS_C_DEC::\n find_end() const\n-{ return NULL; }\n+{ return 0; }\n "}, {"sha": "5722c775def3bb7f43bbcbec3224738b1acb043e", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/info_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finfo_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finfo_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finfo_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -81,7 +81,7 @@ cmp_with_other(const Other_Map_Type& other) const\n \tconst_cast<PB_DS_CLASS_C_DEC& >(*this).\n \tfind_key_pointer(r_key, traits_base::m_store_extra_indicator);\n \n-      if (p_mapped_value == NULL)\n+      if (p_mapped_value == 0)\n \treturn false;\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR"}, {"sha": "3d23eab5c35f5e39b2802ad5d1b33904ed207bfe", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/insert_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -50,15 +50,15 @@ insert_imp(const_reference r_val, false_type)\n   entry_pointer p_e = m_entries[pos];\n   resize_base::notify_insert_search_start();\n \n-  while (p_e != NULL && !hash_eq_fn_base::operator()(PB_DS_V2F(p_e->m_value), \n+  while (p_e != 0 && !hash_eq_fn_base::operator()(PB_DS_V2F(p_e->m_value), \n \t\t\t\t\t\t     r_key))\n     {\n       resize_base::notify_insert_search_collision();\n       p_e = p_e->m_p_next;\n     }\n \n   resize_base::notify_insert_search_end();\n-  if (p_e != NULL)\n+  if (p_e != 0)\n     {\n       _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(r_key);)\n       return std::make_pair(&p_e->m_value, false);"}, {"sha": "b35570690af5d865605f19fe48c82278106f6c2c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/insert_store_hash_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_store_hash_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -50,7 +50,7 @@ insert_imp(const_reference r_val, true_type)\n   entry_pointer p_e = m_entries[pos_hash_pair.first];\n   resize_base::notify_insert_search_start();\n \n-  while (p_e != NULL && !hash_eq_fn_base::operator()(PB_DS_V2F(p_e->m_value),\n+  while (p_e != 0 && !hash_eq_fn_base::operator()(PB_DS_V2F(p_e->m_value),\n \t\t\t\t\t\t     p_e->m_hash,\n \t\t\t\t\t\t    key, pos_hash_pair.second))\n     {\n@@ -59,7 +59,7 @@ insert_imp(const_reference r_val, true_type)\n     }\n \n   resize_base::notify_insert_search_end();\n-  if (p_e != NULL)\n+  if (p_e != 0)\n     {\n       _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(key);)\n       return std::make_pair(&p_e->m_value, false);"}, {"sha": "11e2583bc47d600c6a6d4d7f1c75b03272250f66", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/resize_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fresize_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fresize_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fresize_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -112,12 +112,12 @@ PB_DS_CLASS_C_DEC::\n resize_imp_no_exceptions(size_type new_size, entry_pointer_array a_p_entries_resized, size_type old_size)\n {\n   std::fill(a_p_entries_resized, a_p_entries_resized + m_num_e,\n-\t    entry_pointer(NULL));\n+\t    entry_pointer(0));\n \n   for (size_type pos = 0; pos < old_size; ++pos)\n     {\n       entry_pointer p_e = m_entries[pos];\n-      while (p_e != NULL)\n+      while (p_e != 0)\n \tp_e = resize_imp_no_exceptions_reassign_pointer(p_e, a_p_entries_resized,  traits_base::m_store_extra_indicator);\n     }\n "}, {"sha": "77735aeafdd259810d5002eca71f0c1ea93121a4", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/trace_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ftrace_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ftrace_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ftrace_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -62,7 +62,7 @@ PB_DS_CLASS_C_DEC::\n trace_list(const_entry_pointer p_l) const\n {\n   size_type iterated_num_used_e = 0;\n-  while (p_l != NULL)\n+  while (p_l != 0)\n     {\n       std::cerr << PB_DS_V2F(p_l->m_value) << \" \";\n       p_l = p_l->m_p_next;"}, {"sha": "d39735c563275b55e502f9a8b1b478816e53c024", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/find_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ffind_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -60,11 +60,11 @@ PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::point_iterator\n PB_DS_CLASS_C_DEC::\n find_end()\n-{ return NULL; }\n+{ return 0; }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::const_point_iterator\n PB_DS_CLASS_C_DEC::\n find_end() const\n-{ return NULL; }\n+{ return 0; }\n "}, {"sha": "5b2df85a8c295db078b9703cf62f28b2f24cf983", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/gp_ht_map_.hpp", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fgp_ht_map_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fgp_ht_map_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fgp_ht_map_.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -490,7 +490,7 @@ namespace __gnu_pbds\n \t\t  resize_base::notify_find_search_end();\n \t\t  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(key);)\n \n-\t\t    return NULL;\n+\t\t    return 0;\n \t\t}\n \t\tbreak;\n \t      case valid_entry_status:\n@@ -513,7 +513,7 @@ namespace __gnu_pbds\n \n \t_GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(key);)\n \tresize_base::notify_find_search_end();\n-\treturn NULL;\n+\treturn 0;\n       }\n \n       inline pointer\n@@ -538,7 +538,7 @@ namespace __gnu_pbds\n \t\t  resize_base::notify_find_search_end();\n \t\t  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(key);)\n \n-\t\t  return NULL;\n+\t\t  return 0;\n \t\t}\n \t\tbreak;\n \t      case valid_entry_status:\n@@ -562,7 +562,7 @@ namespace __gnu_pbds\n \n \t_GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(key);)\n \tresize_base::notify_find_search_end();\n-\treturn NULL;\n+\treturn 0;\n       }\n \n       inline bool\n@@ -583,7 +583,7 @@ namespace __gnu_pbds\n       void\n       inc_it_state(const_pointer& r_p_value, size_type& r_pos) const\n       {\n-\t_GLIBCXX_DEBUG_ASSERT(r_p_value != NULL);\n+\t_GLIBCXX_DEBUG_ASSERT(r_p_value != 0);\n \tfor (++r_pos; r_pos < m_num_e; ++r_pos)\n \t  {\n \t    const_entry_pointer p_e =& m_entries[r_pos];\n@@ -593,7 +593,7 @@ namespace __gnu_pbds\n \t\treturn;\n \t      }\n \t  }\n-\tr_p_value = NULL;\n+\tr_p_value = 0;\n       }\n \n       void\n@@ -608,7 +608,7 @@ namespace __gnu_pbds\n \t\treturn;\n \t      }\n \t  }\n-\tr_p_value = NULL;\n+\tr_p_value = 0;\n       }\n \n       void\n@@ -623,7 +623,7 @@ namespace __gnu_pbds\n \t\treturn;\n \t      }\n \t  }\n-\tr_p_value = NULL;\n+\tr_p_value = 0;\n       }\n \n #ifdef _GLIBCXX_DEBUG"}, {"sha": "115a8bf0dda6100823606bea10347ca7de7c020f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/resize_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -87,7 +87,7 @@ resize_imp(size_type new_size)\n \n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n   const size_type old_size = m_num_e;\n-  entry_array a_entries_resized = NULL;\n+  entry_array a_entries_resized = 0;\n \n   // Following line might throw an exception.\n   a_entries_resized = s_entry_allocator.allocate(new_size);"}, {"sha": "dac063927f69446c4eb22958c11a5e955b4eef62", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/standard_policies.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fstandard_policies.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fstandard_policies.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fstandard_policies.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -60,7 +60,7 @@ namespace __gnu_pbds\n       typedef\n       typename __conditional_type<\n       is_same<\n-      __gnu_pbds::direct_mask_range_hashing<size_t>,\n+\t__gnu_pbds::direct_mask_range_hashing<std::size_t>,\n       Comb_Probe_Fn>::value,\n       __gnu_pbds::linear_probe_fn<size_type>,\n       __gnu_pbds::quadratic_probe_fn<size_type> >::__type"}, {"sha": "7dcd82588c1bca857ab2394e13b4ff836c9aa789", "filename": "libstdc++-v3/include/ext/pb_ds/detail/hash_fn/sample_probe_fn.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fsample_probe_fn.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fsample_probe_fn.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fsample_probe_fn.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -48,7 +48,7 @@ class sample_probe_fn\n public:\n \n   // Size type.\n-  typedef size_t size_type;\n+  typedef std::size_t size_type;\n \n public:\n "}, {"sha": "988f111ea20d1442cea811888b9b5482d33d0ef0", "filename": "libstdc++-v3/include/ext/pb_ds/detail/hash_fn/sample_range_hashing.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fsample_range_hashing.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fsample_range_hashing.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fsample_range_hashing.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -48,7 +48,7 @@ class sample_range_hashing\n public:\n \n   // Size type.\n-  typedef size_t size_type;\n+  typedef std::size_t size_type;\n \n public:\n "}, {"sha": "8fa04d140e5b1a28aae2ebcfb1fe3c421fc4da35", "filename": "libstdc++-v3/include/ext/pb_ds/detail/hash_fn/sample_ranged_hash_fn.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fsample_ranged_hash_fn.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fsample_ranged_hash_fn.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fsample_ranged_hash_fn.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -48,7 +48,7 @@ class sample_ranged_hash_fn\n public:\n \n   // Size type.\n-  typedef size_t size_type;\n+  typedef std::size_t size_type;\n \n public:\n "}, {"sha": "2bcfdf51a5422452f9c2121ec938cc5ea792f2f0", "filename": "libstdc++-v3/include/ext/pb_ds/detail/hash_fn/sample_ranged_probe_fn.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fsample_ranged_probe_fn.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fsample_ranged_probe_fn.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fsample_ranged_probe_fn.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -48,7 +48,7 @@ class sample_ranged_probe_fn\n public:\n \n   // Size type.\n-  typedef size_t size_type;\n+  typedef std::size_t size_type;\n \n public:\n \n@@ -70,7 +70,7 @@ class sample_ranged_probe_fn\n \n   // Transforms the const key reference r_key into the i-th position within the table. This method is called for each collision within the probe sequence.\n   inline size_type\n-  operator()(const_key_reference r_key, size_t hash, size_type i) const;\n+  operator()(const_key_reference r_key, std::size_t hash, size_type i) const;\n \n };\n "}, {"sha": "4c085d4c69dfd62bad04f9d3b5b39b00fc5dd4ad", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/const_iterator.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fconst_iterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fconst_iterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fconst_iterator.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -118,7 +118,7 @@ namespace __gnu_pbds\n       inline PB_DS_CLASS_C_DEC& \n       operator++()\n       {\n-\t_GLIBCXX_DEBUG_ASSERT(base_type::m_p_nd != NULL);\n+\t_GLIBCXX_DEBUG_ASSERT(base_type::m_p_nd != 0);\n \tinc();\n \treturn (*this);\n       }\n@@ -135,10 +135,10 @@ namespace __gnu_pbds\n       void\n       inc()\n       {\n-\tif (base_type::m_p_nd->m_p_next_sibling != NULL)\n+\tif (base_type::m_p_nd->m_p_next_sibling != 0)\n \t  {\n \t    base_type::m_p_nd = base_type::m_p_nd->m_p_next_sibling;\n-\t    while (base_type::m_p_nd->m_p_l_child != NULL)\n+\t    while (base_type::m_p_nd->m_p_l_child != 0)\n \t      base_type::m_p_nd = base_type::m_p_nd->m_p_l_child;\n \t    return;\n \t  }\n@@ -147,7 +147,7 @@ namespace __gnu_pbds\n \t  {\n \t    node_pointer p_next = base_type::m_p_nd;\n \t    base_type::m_p_nd = base_type::m_p_nd->m_p_prev_or_parent;\n-\t    if (base_type::m_p_nd == NULL || base_type::m_p_nd->m_p_l_child == p_next)\n+\t    if (base_type::m_p_nd == 0 || base_type::m_p_nd->m_p_l_child == p_next)\n \t      return;\n \t  }\n       }"}, {"sha": "8eb1574446b814b8ee1f13d84514915612c469c6", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/const_point_iterator.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fconst_point_iterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fconst_point_iterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fconst_point_iterator.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -107,7 +107,7 @@ namespace __gnu_pbds\n \n       // Default constructor.\n       inline\n-      left_child_next_sibling_heap_node_const_point_iterator_() : m_p_nd(NULL)\n+      left_child_next_sibling_heap_node_const_point_iterator_() : m_p_nd(0)\n       { }\n \n       // Copy constructor.\n@@ -119,15 +119,15 @@ namespace __gnu_pbds\n       inline const_pointer\n       operator->() const\n       {\n-\t_GLIBCXX_DEBUG_ASSERT(m_p_nd != NULL);\n+\t_GLIBCXX_DEBUG_ASSERT(m_p_nd != 0);\n \treturn &m_p_nd->m_value;\n       }\n \n       // Access.\n       inline const_reference\n       operator*() const\n       {\n-\t_GLIBCXX_DEBUG_ASSERT(m_p_nd != NULL);\n+\t_GLIBCXX_DEBUG_ASSERT(m_p_nd != 0);\n \treturn m_p_nd->m_value;\n       }\n "}, {"sha": "536ac66ea4b93ff7c1a4bd18278238c8980e7827", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fconstructors_destructor_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -49,7 +49,7 @@ PB_DS_CLASS_C_DEC::s_no_throw_copies_ind;\n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n left_child_next_sibling_heap_() :\n-  m_p_root(NULL),\n+  m_p_root(0),\n   m_size(0)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n@@ -59,7 +59,7 @@ PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n left_child_next_sibling_heap_(const Cmp_Fn& r_cmp_fn) :\n   Cmp_Fn(r_cmp_fn),\n-  m_p_root(NULL),\n+  m_p_root(0),\n   m_size(0)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n@@ -68,7 +68,7 @@ left_child_next_sibling_heap_(const Cmp_Fn& r_cmp_fn) :\n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n left_child_next_sibling_heap_(const PB_DS_CLASS_C_DEC& other) \n-: Cmp_Fn(other), m_p_root(NULL), m_size(0)\n+: Cmp_Fn(other), m_p_root(0), m_size(0)\n {\n   m_size = other.m_size;\n   _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n@@ -111,8 +111,8 @@ typename PB_DS_CLASS_C_DEC::node_pointer\n PB_DS_CLASS_C_DEC::\n recursive_copy_node(const_node_pointer p_nd)\n {\n-  if (p_nd == NULL)\n-    return (NULL);\n+  if (p_nd == 0)\n+    return (0);\n \n   node_pointer p_ret = s_node_allocator.allocate(1);\n \n@@ -127,7 +127,7 @@ recursive_copy_node(const_node_pointer p_nd)\n     }\n \n   p_ret->m_p_l_child = p_ret->m_p_next_sibling =\n-    p_ret->m_p_prev_or_parent = NULL;\n+    p_ret->m_p_prev_or_parent = 0;\n \n   __try\n     {\n@@ -140,12 +140,12 @@ recursive_copy_node(const_node_pointer p_nd)\n       __throw_exception_again;\n     }\n \n-  if (p_ret->m_p_l_child != NULL)\n+  if (p_ret->m_p_l_child != 0)\n     p_ret->m_p_l_child->m_p_prev_or_parent = p_ret;\n \n-  if (p_ret->m_p_next_sibling != NULL)\n+  if (p_ret->m_p_next_sibling != 0)\n     p_ret->m_p_next_sibling->m_p_prev_or_parent =\n-      p_nd->m_p_next_sibling->m_p_prev_or_parent == p_nd ? p_ret : NULL;\n+      p_nd->m_p_next_sibling->m_p_prev_or_parent == p_nd ? p_ret : 0;\n \n   return p_ret;\n }"}, {"sha": "16b8217bd61f9f4d547501431bb8ca047d796a02", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/debug_fn_imps.hpp", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fdebug_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -45,9 +45,9 @@ void\n PB_DS_CLASS_C_DEC::\n assert_valid() const\n {\n-  _GLIBCXX_DEBUG_ASSERT(m_p_root == NULL || m_p_root->m_p_prev_or_parent == NULL);\n+  _GLIBCXX_DEBUG_ASSERT(m_p_root == 0 || m_p_root->m_p_prev_or_parent == 0);\n \n-  if (m_p_root != NULL)\n+  if (m_p_root != 0)\n     assert_node_consistent(m_p_root, Single_Link_Roots);\n   assert_size();\n   assert_iterators();\n@@ -58,22 +58,22 @@ void\n PB_DS_CLASS_C_DEC::\n assert_node_consistent(const_node_pointer p_nd, bool single_link) const\n {\n-  if (p_nd == NULL)\n+  if (p_nd == 0)\n     return;\n \n   assert_node_consistent(p_nd->m_p_l_child, false);\n   assert_node_consistent(p_nd->m_p_next_sibling, single_link);\n \n   if (single_link)\n-    _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_prev_or_parent == NULL);\n-  else if (p_nd->m_p_next_sibling != NULL)\n+    _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_prev_or_parent == 0);\n+  else if (p_nd->m_p_next_sibling != 0)\n     _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_next_sibling->m_p_prev_or_parent == p_nd);\n \n-  if (p_nd->m_p_l_child == NULL)\n+  if (p_nd->m_p_l_child == 0)\n     return;\n \n   const_node_pointer p_child = p_nd->m_p_l_child;\n-  while (p_child != NULL)\n+  while (p_child != 0)\n     {\n       const_node_pointer p_next_child = p_child->m_p_next_sibling;\n       _GLIBCXX_DEBUG_ASSERT(!Cmp_Fn::operator()(p_nd->m_value, p_child->m_value));\n@@ -115,7 +115,7 @@ PB_DS_CLASS_C_DEC::\n size_from_node(const_node_pointer p_nd)\n {\n   size_type ret = 0;\n-  while (p_nd != NULL)\n+  while (p_nd != 0)\n     {\n       ret += 1 + size_from_node(p_nd->m_p_l_child);\n       p_nd = p_nd->m_p_next_sibling;\n@@ -130,7 +130,7 @@ degree(const_node_pointer p_nd)\n {\n   size_type ret = 0;\n   const_node_pointer p_child = p_nd->m_p_l_child;\n-  while (p_child != NULL)\n+  while (p_child != 0)\n     {\n       ++ret;\n       p_child = p_child->m_p_next_sibling;"}, {"sha": "605457fd4cbd8b33104c18515b69cc764d75afa5", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/erase_fn_imps.hpp", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Ferase_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -45,7 +45,7 @@ clear()\n {\n   clear_imp(m_p_root);\n   _GLIBCXX_DEBUG_ASSERT(m_size == 0);\n-  m_p_root = NULL;\n+  m_p_root = 0;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -64,7 +64,7 @@ void\n PB_DS_CLASS_C_DEC::\n clear_imp(node_pointer p_nd)\n {\n-  while (p_nd != NULL)\n+  while (p_nd != 0)\n     {\n       clear_imp(p_nd->m_p_l_child);\n       node_pointer p_next = p_nd->m_p_next_sibling;\n@@ -80,8 +80,8 @@ to_linked_list()\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n   node_pointer p_cur = m_p_root;\n-  while (p_cur != NULL)\n-    if (p_cur->m_p_l_child != NULL)\n+  while (p_cur != 0)\n+    if (p_cur->m_p_l_child != 0)\n       {\n \tnode_pointer p_child_next = p_cur->m_p_l_child->m_p_next_sibling;\n \tp_cur->m_p_l_child->m_p_next_sibling = p_cur->m_p_next_sibling;\n@@ -94,10 +94,10 @@ to_linked_list()\n #ifdef _GLIBCXX_DEBUG\n   const_node_pointer p_counter = m_p_root;\n   size_type count = 0;\n-  while (p_counter != NULL)\n+  while (p_counter != 0)\n     {\n       ++count;\n-      _GLIBCXX_DEBUG_ASSERT(p_counter->m_p_l_child == NULL);\n+      _GLIBCXX_DEBUG_ASSERT(p_counter->m_p_l_child == 0);\n       p_counter = p_counter->m_p_next_sibling;\n     }\n   _GLIBCXX_DEBUG_ASSERT(count == m_size);\n@@ -111,22 +111,22 @@ PB_DS_CLASS_C_DEC::\n prune(Pred pred)\n {\n   node_pointer p_cur = m_p_root;\n-  m_p_root = NULL;\n-  node_pointer p_out = NULL;\n-  while (p_cur != NULL)\n+  m_p_root = 0;\n+  node_pointer p_out = 0;\n+  while (p_cur != 0)\n     {\n       node_pointer p_next = p_cur->m_p_next_sibling;\n       if (pred(p_cur->m_value))\n         {\n \t  p_cur->m_p_next_sibling = p_out;\n-\t  if (p_out != NULL)\n+\t  if (p_out != 0)\n \t    p_out->m_p_prev_or_parent = p_cur;\n \t  p_out = p_cur;\n         }\n       else\n         {\n \t  p_cur->m_p_next_sibling = m_p_root;\n-\t  if (m_p_root != NULL)\n+\t  if (m_p_root != 0)\n \t    m_p_root->m_p_prev_or_parent = p_cur;\n \t  m_p_root = p_cur;\n         }\n@@ -141,7 +141,7 @@ PB_DS_CLASS_C_DEC::\n bubble_to_top(node_pointer p_nd)\n {\n   node_pointer p_parent = parent(p_nd);\n-  while (p_parent != NULL)\n+  while (p_parent != 0)\n     {\n       swap_with_parent(p_nd, p_parent);\n       p_parent = parent(p_nd);"}, {"sha": "478abe018b0cc657a8807ecaabc4ad72084afb12", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/insert_fn_imps.hpp", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Finsert_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -87,12 +87,12 @@ inline void\n PB_DS_CLASS_C_DEC::\n make_child_of(node_pointer p_nd, node_pointer p_new_parent)\n {\n-  _GLIBCXX_DEBUG_ASSERT(p_nd != NULL);\n-  _GLIBCXX_DEBUG_ASSERT(p_new_parent != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd != 0);\n+  _GLIBCXX_DEBUG_ASSERT(p_new_parent != 0);\n \n   p_nd->m_p_next_sibling = p_new_parent->m_p_l_child;\n \n-  if (p_new_parent->m_p_l_child != NULL)\n+  if (p_new_parent->m_p_l_child != 0)\n     p_new_parent->m_p_l_child->m_p_prev_or_parent = p_nd;\n \n   p_nd->m_p_prev_or_parent = p_new_parent;\n@@ -109,7 +109,7 @@ parent(node_pointer p_nd)\n     {\n       node_pointer p_pot = p_nd->m_p_prev_or_parent;\n \n-      if (p_pot == NULL || p_pot->m_p_l_child == p_nd)\n+      if (p_pot == 0 || p_pot->m_p_l_child == p_nd)\n \treturn p_pot;\n \n       p_nd = p_pot;\n@@ -124,12 +124,12 @@ swap_with_parent(node_pointer p_nd, node_pointer p_parent)\n   if (p_parent == m_p_root)\n     m_p_root = p_nd;\n \n-  _GLIBCXX_DEBUG_ASSERT(p_nd != NULL);\n-  _GLIBCXX_DEBUG_ASSERT(p_parent != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd != 0);\n+  _GLIBCXX_DEBUG_ASSERT(p_parent != 0);\n   _GLIBCXX_DEBUG_ASSERT(parent(p_nd) == p_parent);\n \n   const bool nd_direct_child = p_parent->m_p_l_child == p_nd;\n-  const bool parent_root = p_parent->m_p_prev_or_parent == NULL;\n+  const bool parent_root = p_parent->m_p_prev_or_parent == 0;\n   const bool parent_direct_child =\n     !parent_root&&  p_parent->m_p_prev_or_parent->m_p_l_child == p_parent;\n \n@@ -138,16 +138,16 @@ swap_with_parent(node_pointer p_nd, node_pointer p_parent)\n   std::swap(p_parent->m_p_l_child, p_nd->m_p_l_child);\n   std::swap(p_parent->m_metadata, p_nd->m_metadata);\n \n-  _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_l_child != NULL);\n-  _GLIBCXX_DEBUG_ASSERT(p_parent->m_p_prev_or_parent != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_l_child != 0);\n+  _GLIBCXX_DEBUG_ASSERT(p_parent->m_p_prev_or_parent != 0);\n \n-  if (p_nd->m_p_next_sibling != NULL)\n+  if (p_nd->m_p_next_sibling != 0)\n     p_nd->m_p_next_sibling->m_p_prev_or_parent = p_nd;\n \n-  if (p_parent->m_p_next_sibling != NULL)\n+  if (p_parent->m_p_next_sibling != 0)\n     p_parent->m_p_next_sibling->m_p_prev_or_parent = p_parent;\n \n-  if (p_parent->m_p_l_child != NULL)\n+  if (p_parent->m_p_l_child != 0)\n     p_parent->m_p_l_child->m_p_prev_or_parent = p_parent;\n \n   if (parent_direct_child)"}, {"sha": "b6587e229f2219338a629d9515bf46df2cc31e5c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/iterators_fn_imps.hpp", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fiterators_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fiterators_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fiterators_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -45,10 +45,10 @@ begin()\n {\n   node_pointer p_nd = m_p_root;\n \n-  if (p_nd == NULL)\n-    return (iterator(NULL));\n+  if (p_nd == 0)\n+    return (iterator(0));\n \n-  while (p_nd->m_p_l_child != NULL)\n+  while (p_nd->m_p_l_child != 0)\n     p_nd = p_nd->m_p_l_child;\n \n   return (iterator(p_nd));\n@@ -61,10 +61,10 @@ begin() const\n {\n   node_pointer p_nd = m_p_root;\n \n-  if (p_nd == NULL)\n-    return (const_iterator(NULL));\n+  if (p_nd == 0)\n+    return (const_iterator(0));\n \n-  while (p_nd->m_p_l_child != NULL)\n+  while (p_nd->m_p_l_child != 0)\n     p_nd = p_nd->m_p_l_child;\n \n   return (const_iterator(p_nd));\n@@ -75,14 +75,14 @@ inline typename PB_DS_CLASS_C_DEC::iterator\n PB_DS_CLASS_C_DEC::\n end()\n {\n-  return (iterator(NULL));\n+  return (iterator(0));\n }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::const_iterator\n PB_DS_CLASS_C_DEC::\n end() const\n {\n-  return (const_iterator(NULL));\n+  return (const_iterator(0));\n }\n "}, {"sha": "7ba4bf6ee8b60b9b06d0ed5bd8a303b69b4f254a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/null_metadata.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fnull_metadata.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fnull_metadata.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fnull_metadata.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -38,8 +38,8 @@\n  * Contains an implementation struct for this type of heap's node.\n  */\n \n-#ifndef PB_DS_LEFT_CHILD_NEXT_SIBLING_HEAP_NULL_METADATA_HPP\n-#define PB_DS_LEFT_CHILD_NEXT_SIBLING_HEAP_NULL_METADATA_HPP\n+#ifndef PB_DS_LEFT_CHILD_NEXT_SIBLING_HEAP_0_METADATA_HPP\n+#define PB_DS_LEFT_CHILD_NEXT_SIBLING_HEAP_0_METADATA_HPP\n \n namespace __gnu_pbds\n {\n@@ -52,4 +52,4 @@ namespace __gnu_pbds\n   } // namespace detail\n } // namespace __gnu_pbds\n \n-#endif // #ifndef PB_DS_LEFT_CHILD_NEXT_SIBLING_HEAP_NULL_METADATA_HPP\n+#endif // #ifndef PB_DS_LEFT_CHILD_NEXT_SIBLING_HEAP_0_METADATA_HPP"}, {"sha": "8d33baa10acf77c8eef67d855bb8f6c7fc611e83", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/trace_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Ftrace_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Ftrace_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Ftrace_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -57,7 +57,7 @@ void\n PB_DS_CLASS_C_DEC::\n trace_node(const_node_pointer p_nd, size_type level)\n {\n-  while (p_nd != NULL)\n+  while (p_nd != 0)\n     {\n       for (size_type i = 0; i < level; ++i)\n \tstd::cerr << ' ';"}, {"sha": "662f40f34e88760a2a887a8bbe5763c90b102799", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/constructor_destructor_fn_imps.hpp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fconstructor_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fconstructor_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fconstructor_destructor_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -67,13 +67,13 @@ copy_from_range(It first_it, It last_it)\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-PB_DS_CLASS_NAME() : m_p_l(NULL)\n+PB_DS_CLASS_NAME() : m_p_l(0)\n { _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n \n PB_DS_CLASS_T_DEC\n template<typename It>\n PB_DS_CLASS_C_DEC::\n-PB_DS_CLASS_NAME(It first_it, It last_it) : m_p_l(NULL)\n+PB_DS_CLASS_NAME(It first_it, It last_it) : m_p_l(0)\n {\n   copy_from_range(first_it, last_it);\n   _GLIBCXX_DEBUG_ONLY(assert_valid(););\n@@ -85,7 +85,7 @@ PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n #ifdef _GLIBCXX_DEBUG\n   debug_base(),\n #endif\n-m_p_l(NULL)\n+m_p_l(0)\n {\n   __try\n     {\n@@ -125,13 +125,13 @@ PB_DS_CLASS_C_DEC::\n deallocate_all()\n {\n   entry_pointer p_l = m_p_l;\n-  while (p_l != NULL)\n+  while (p_l != 0)\n     {\n       entry_pointer p_next_l = p_l->m_p_next;\n       actual_erase_entry(p_l);\n       p_l = p_next_l;\n     }\n-  m_p_l = NULL;\n+  m_p_l = 0;\n }\n \n PB_DS_CLASS_T_DEC"}, {"sha": "a7d0fbadf89f4a218489c363214149cf1e2c6535", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/erase_fn_imps.hpp", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ferase_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -44,7 +44,7 @@ PB_DS_CLASS_C_DEC::\n erase(const_key_reference r_key)\n {\n   _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n-  if (m_p_l == NULL)\n+  if (m_p_l == 0)\n     return false;\n \n   if (s_eq_fn(r_key, PB_DS_V2F(m_p_l->m_value)))\n@@ -56,7 +56,7 @@ erase(const_key_reference r_key)\n     }\n \n   entry_pointer p_l = m_p_l;\n-  while (p_l->m_p_next != NULL)\n+  while (p_l->m_p_next != 0)\n     if (s_eq_fn(r_key, PB_DS_V2F(p_l->m_p_next->m_value)))\n       {\n \terase_next(p_l);\n@@ -83,19 +83,19 @@ erase_if(Pred pred)\n {\n   _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n   size_type num_ersd = 0;\n-  while (m_p_l != NULL && pred(m_p_l->m_value))\n+  while (m_p_l != 0 && pred(m_p_l->m_value))\n     {\n       entry_pointer p_next = m_p_l->m_p_next;\n       ++num_ersd;\n       actual_erase_entry(m_p_l);\n       m_p_l = p_next;\n     }\n \n-  if (m_p_l == NULL)\n+  if (m_p_l == 0)\n     return num_ersd;\n \n   entry_pointer p_l = m_p_l;\n-  while (p_l->m_p_next != NULL)\n+  while (p_l->m_p_next != 0)\n     {\n       if (pred(p_l->m_p_next->m_value))\n         {\n@@ -115,9 +115,9 @@ void\n PB_DS_CLASS_C_DEC::\n erase_next(entry_pointer p_l)\n {\n-  _GLIBCXX_DEBUG_ASSERT(p_l != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_l != 0);\n   _GLIBCXX_DEBUG_ASSERT(p_l != m_p_l);\n-  _GLIBCXX_DEBUG_ASSERT(p_l->m_p_next != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_l->m_p_next != 0);\n   entry_pointer p_next_l = p_l->m_p_next->m_p_next;\n   actual_erase_entry(p_l->m_p_next);\n   p_l->m_p_next = p_next_l;"}, {"sha": "e7f5ed1d3f8a76bfc86d2a361b4a5f708f873145", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/find_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ffind_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -43,8 +43,8 @@ inline typename PB_DS_CLASS_C_DEC::entry_pointer\n PB_DS_CLASS_C_DEC::\n find_imp(const_key_reference r_key) const\n {\n-  if (m_p_l == NULL)\n-    return NULL;\n+  if (m_p_l == 0)\n+    return 0;\n   if (s_eq_fn(r_key, PB_DS_V2F(m_p_l->m_value)))\n     {\n       apply_update(m_p_l, s_metadata_type_indicator);\n@@ -53,7 +53,7 @@ find_imp(const_key_reference r_key) const\n     }\n \n   entry_pointer p_l = m_p_l;\n-  while (p_l->m_p_next != NULL)\n+  while (p_l->m_p_next != 0)\n     {\n       entry_pointer p_next = p_l->m_p_next;\n       if (s_eq_fn(r_key, PB_DS_V2F(p_next->m_value)))\n@@ -72,7 +72,7 @@ find_imp(const_key_reference r_key) const\n     }\n \n   _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key);)\n-  return NULL;\n+  return 0;\n }\n \n PB_DS_CLASS_T_DEC"}, {"sha": "1aaaf1edd926fc4b1cff726cdc4c10a1f4962cf2", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/info_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Finfo_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Finfo_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Finfo_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -54,4 +54,4 @@ PB_DS_CLASS_T_DEC\n inline bool\n PB_DS_CLASS_C_DEC::\n empty() const\n-{ return (m_p_l == NULL); }\n+{ return (m_p_l == 0); }"}, {"sha": "197cfbc6d1870a65329c1cc97d452fba098a6ad0", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/insert_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Finsert_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -48,7 +48,7 @@ insert(const_reference r_val)\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n   entry_pointer p_l = find_imp(PB_DS_V2F(r_val));\n \n-  if (p_l != NULL)\n+  if (p_l != 0)\n     {\n       _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(PB_DS_V2F(r_val));)\n       return std::make_pair(point_iterator(&p_l->m_value), false);"}, {"sha": "4d4e0b417c29b995b972119f634f8881d1d7fca2", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/iterators_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fiterators_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fiterators_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fiterators_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -43,7 +43,7 @@ inline typename PB_DS_CLASS_C_DEC::iterator\n PB_DS_CLASS_C_DEC::\n begin()\n {\n-  if (m_p_l == NULL)\n+  if (m_p_l == 0)\n     {\n       _GLIBCXX_DEBUG_ASSERT(empty());\n       return end();\n@@ -56,7 +56,7 @@ inline typename PB_DS_CLASS_C_DEC::const_iterator\n PB_DS_CLASS_C_DEC::\n begin() const\n {\n-  if (m_p_l == NULL)\n+  if (m_p_l == 0)\n     {\n       _GLIBCXX_DEBUG_ASSERT(empty());\n       return end();\n@@ -68,13 +68,13 @@ PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::iterator\n PB_DS_CLASS_C_DEC::\n end()\n-{ return iterator(NULL, NULL, this); }\n+{ return iterator(0, 0, this); }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::const_iterator\n PB_DS_CLASS_C_DEC::\n end() const\n {\n-  return const_iterator(NULL, NULL, const_cast<PB_DS_CLASS_C_DEC* const>(this));\n+  return const_iterator(0, 0, const_cast<PB_DS_CLASS_C_DEC* const>(this));\n }\n "}, {"sha": "cf43064e504aef9832182769fa10d4445881c280", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/lu_map_.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Flu_map_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Flu_map_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Flu_map_.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -233,15 +233,15 @@ namespace __gnu_pbds\n       {\n \t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n \tentry_pointer p_e = find_imp(r_key);\n-\treturn point_iterator(p_e == NULL ? NULL: &p_e->m_value);\n+\treturn point_iterator(p_e == 0 ? 0: &p_e->m_value);\n       }\n \n       inline const_point_iterator\n       find(const_key_reference r_key) const\n       {\n \t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n \tentry_pointer p_e = find_imp(r_key);\n-\treturn const_point_iterator(p_e == NULL ? NULL: &p_e->m_value);\n+\treturn const_point_iterator(p_e == 0 ? 0: &p_e->m_value);\n       }\n \n       inline bool\n@@ -315,7 +315,7 @@ namespace __gnu_pbds\n       inc_it_state(const_pointer& r_p_value, entry_pointer& r_pos) const\n       {\n \tr_pos = r_pos->m_p_next;\n-\tr_p_value = (r_pos == NULL) ? NULL : &r_pos->m_value;\n+\tr_p_value = (r_pos == 0) ? 0 : &r_pos->m_value;\n       }\n \n       template<typename Metadata>"}, {"sha": "7c8defcdf06c349c4eec3eb60bef2167c2fdfd1b", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/trace_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ftrace_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ftrace_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ftrace_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -47,7 +47,7 @@ trace() const\n {\n   std::cerr << m_p_l << std::endl << std::endl;\n   const_entry_pointer p_l = m_p_l;\n-  while (p_l != NULL)\n+  while (p_l != 0)\n     {\n       std::cerr << PB_DS_V2F(p_l->m_value) << std::endl;\n       p_l = p_l->m_p_next;"}, {"sha": "8e476cb91b9088f03c713307a0d0400b926f2337", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_policy/counter_lu_metadata.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_policy%2Fcounter_lu_metadata.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_policy%2Fcounter_lu_metadata.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_policy%2Fcounter_lu_metadata.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -47,7 +47,7 @@ namespace __gnu_pbds\n \n     // A list-update metadata type that moves elements to the front of\n     // the list based on the counter algorithm.\n-    template<typename Size_Type = size_t>\n+    template<typename Size_Type = std::size_t>\n     class counter_lu_metadata\n     {\n     public:"}, {"sha": "3245566e39a6c0ba155f4a8283bb91e64dec974d", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fconstructors_destructor_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -49,19 +49,19 @@ PB_DS_CLASS_C_DEC::s_metadata_alloc;\n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n PB_DS_OV_TREE_CLASS_NAME() :\n-  m_a_values(NULL),\n-  m_a_metadata(NULL),\n-  m_end_it(NULL),\n+  m_a_values(0),\n+  m_a_metadata(0),\n+  m_end_it(0),\n   m_size(0)\n { _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();) }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n PB_DS_OV_TREE_CLASS_NAME(const Cmp_Fn& r_cmp_fn) :\n   cmp_fn_base(r_cmp_fn),\n-  m_a_values(NULL),\n-  m_a_metadata(NULL),\n-  m_end_it(NULL),\n+  m_a_values(0),\n+  m_a_metadata(0),\n+  m_end_it(0),\n   m_size(0)\n { _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();) }\n \n@@ -70,9 +70,9 @@ PB_DS_CLASS_C_DEC::\n PB_DS_OV_TREE_CLASS_NAME(const Cmp_Fn& r_cmp_fn, const node_update& r_node_update) :\n   cmp_fn_base(r_cmp_fn),\n   node_update(r_node_update),\n-  m_a_values(NULL),\n-  m_a_metadata(NULL),\n-  m_end_it(NULL),\n+  m_a_values(0),\n+  m_a_metadata(0),\n+  m_end_it(0),\n   m_size(0)\n { _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();) }\n \n@@ -87,9 +87,9 @@ PB_DS_OV_TREE_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n #endif \n   cmp_fn_base(other),\n   node_update(other),\n-  m_a_values(NULL),\n-  m_a_metadata(NULL),\n-  m_end_it(NULL),\n+  m_a_values(0),\n+  m_a_metadata(0),\n+  m_end_it(0),\n   m_size(0)\n {\n   copy_from_ordered_range(other.begin(), other.end());"}, {"sha": "9b7011b1ff6d694995001fdcc4a2d79a9384d324", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/debug_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fdebug_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -47,8 +47,8 @@ assert_valid() const\n {\n   std::cout << \"av1\" << std::endl;\n \n-  if (m_a_values == NULL || m_end_it == NULL || m_size == 0)\n-    _GLIBCXX_DEBUG_ASSERT(m_a_values == NULL &&  m_end_it == NULL && m_size == 0);\n+  if (m_a_values == 0 || m_end_it == 0 || m_size == 0)\n+    _GLIBCXX_DEBUG_ASSERT(m_a_values == 0 &&  m_end_it == 0 && m_size == 0);\n \n   std::cout << \"av2\" << std::endl;\n   assert_iterators();"}, {"sha": "dd24114f490b59b35a5cb2530c9787a4cd0b0b54", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/erase_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Ferase_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -56,7 +56,7 @@ clear()\n     }\n \n   _GLIBCXX_DEBUG_ONLY(debug_base::clear();)\n-  m_a_values = NULL;\n+  m_a_values = 0;\n   m_size = 0;\n   m_end_it = m_a_values;\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)"}, {"sha": "08d6bfc2293bdfbd5b04265f8abc7917d2455348", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/insert_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Finsert_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -50,9 +50,9 @@ void\n PB_DS_CLASS_C_DEC::\n reallocate_metadata(Node_Update_* , size_type new_size)\n {\n-  metadata_pointer a_new_metadata_vec =(new_size == 0) ? NULL : s_metadata_alloc.allocate(new_size);\n+  metadata_pointer a_new_metadata_vec =(new_size == 0) ? 0 : s_metadata_alloc.allocate(new_size);\n \n-  if (m_a_metadata != NULL)\n+  if (m_a_metadata != 0)\n     {\n       for (size_type i = 0; i < m_size; ++i)\n \tm_a_metadata[i].~metadata_type();"}, {"sha": "0417ae1dd9ec53f9ce66aa96508620fff94e76fd", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/iterators_fn_imps.hpp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fiterators_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fiterators_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fiterators_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -69,8 +69,8 @@ PB_DS_node_begin_imp() const\n {\n   return const_node_iterator(const_cast<pointer>(mid_pointer(begin(), end())),\n \t\t\t      const_cast<pointer>(begin()),\n-\t\t\t      const_cast<pointer>(end()),(m_a_metadata == NULL)?\n-\t\t\t      NULL :\n+\t\t\t      const_cast<pointer>(end()),(m_a_metadata == 0)?\n+\t\t\t      0 :\n \t\t\t      mid_pointer(m_a_metadata, m_a_metadata + m_size));\n }\n \n@@ -80,7 +80,7 @@ PB_DS_CLASS_C_DEC::\n PB_DS_node_end_imp() const\n {\n   return const_node_iterator(end(), end(), end(),\n-\t\t     (m_a_metadata == NULL) ? NULL : m_a_metadata + m_size);\n+\t\t     (m_a_metadata == 0) ? 0 : m_a_metadata + m_size);\n }\n \n PB_DS_CLASS_T_DEC\n@@ -89,7 +89,7 @@ PB_DS_CLASS_C_DEC::\n PB_DS_node_begin_imp()\n {\n   return node_iterator(mid_pointer(begin(), end()), begin(), end(),\n-\t\t       (m_a_metadata == NULL) ? NULL : mid_pointer(m_a_metadata, m_a_metadata + m_size));\n+\t\t       (m_a_metadata == 0) ? 0 : mid_pointer(m_a_metadata, m_a_metadata + m_size));\n }\n \n PB_DS_CLASS_T_DEC\n@@ -98,6 +98,6 @@ PB_DS_CLASS_C_DEC::\n PB_DS_node_end_imp()\n {\n   return node_iterator(end(), end(),\n-\t\t  end(),(m_a_metadata == NULL) ? NULL : m_a_metadata + m_size);\n+\t\t  end(),(m_a_metadata == 0) ? 0 : m_a_metadata + m_size);\n }\n "}, {"sha": "1c45c51c1d85a9d60d41ea08c6ef2b9b8d0e6604", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/node_iterators.hpp", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fnode_iterators.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fnode_iterators.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fnode_iterators.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -118,7 +118,7 @@ namespace __gnu_pbds\n \n     public:\n       inline\n-      ov_tree_node_const_it_(const_pointer p_nd = NULL,  const_pointer p_begin_nd = NULL,  const_pointer p_end_nd = NULL,  const_metadata_pointer p_metadata = NULL) : m_p_value(const_cast<pointer>(p_nd)), m_p_begin_value(const_cast<pointer>(p_begin_nd)), m_p_end_value(const_cast<pointer>(p_end_nd)), m_p_metadata(p_metadata)\n+      ov_tree_node_const_it_(const_pointer p_nd = 0,  const_pointer p_begin_nd = 0,  const_pointer p_end_nd = 0,  const_metadata_pointer p_metadata = 0) : m_p_value(const_cast<pointer>(p_nd)), m_p_begin_value(const_cast<pointer>(p_begin_nd)), m_p_end_value(const_cast<pointer>(p_end_nd)), m_p_metadata(p_metadata)\n       { }\n \n       inline const_reference\n@@ -134,7 +134,7 @@ namespace __gnu_pbds\n \t  };\n \n \tPB_DS_STATIC_ASSERT(should_have_metadata, has_metadata);\n-\t_GLIBCXX_DEBUG_ASSERT(m_p_metadata != NULL);\n+\t_GLIBCXX_DEBUG_ASSERT(m_p_metadata != 0);\n \treturn *m_p_metadata;\n       }\n \n@@ -164,8 +164,8 @@ namespace __gnu_pbds\n \n \treturn (this_type(mid_pointer(m_p_value + 1, m_p_end_value),\n \t\t\t  m_p_value + 1,\n-\t\t\t  m_p_end_value,(m_p_metadata == NULL) ?\n-\t\t\t  NULL : mid_pointer(m_p_metadata + 1, p_end_metadata)));\n+\t\t\t  m_p_end_value,(m_p_metadata == 0) ?\n+\t\t\t  0 : mid_pointer(m_p_metadata + 1, p_end_metadata)));\n       }\n \n       inline bool\n@@ -241,7 +241,7 @@ namespace __gnu_pbds\n \n     public:\n       inline\n-      ov_tree_node_it_(const_pointer p_nd = NULL,  const_pointer p_begin_nd = NULL,  const_pointer p_end_nd = NULL,  const_metadata_pointer p_metadata = NULL) : base_type(p_nd,  p_begin_nd,  p_end_nd,  p_metadata)\n+      ov_tree_node_it_(const_pointer p_nd = 0,  const_pointer p_begin_nd = 0,  const_pointer p_end_nd = 0,  const_metadata_pointer p_metadata = 0) : base_type(p_nd,  p_begin_nd,  p_end_nd,  p_metadata)\n       { }\n \n       // Access.\n@@ -277,8 +277,8 @@ namespace __gnu_pbds\n \n \treturn (this_type(base_type::mid_pointer(base_type::m_p_value + 1, base_type::m_p_end_value),\n \t\t\t  base_type::m_p_value + 1,\n-\t\t\t  base_type::m_p_end_value,(base_type::m_p_metadata == NULL)?\n-\t\t\t  NULL : base_type::mid_pointer(base_type::m_p_metadata + 1, p_end_metadata)));\n+\t\t\t  base_type::m_p_end_value,(base_type::m_p_metadata == 0)?\n+\t\t\t  0 : base_type::mid_pointer(base_type::m_p_metadata + 1, p_end_metadata)));\n       }\n \n     };"}, {"sha": "51afa4fab92a8dbc29ae67ad1dddcdb066ee1b02", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pairing_heap_/debug_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fdebug_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -45,8 +45,8 @@ void\n PB_DS_CLASS_C_DEC::\n assert_valid() const\n {\n-  _GLIBCXX_DEBUG_ASSERT(base_type::m_p_root == NULL \n-\t\t        || base_type::m_p_root->m_p_next_sibling == NULL);\n+  _GLIBCXX_DEBUG_ASSERT(base_type::m_p_root == 0 \n+\t\t        || base_type::m_p_root->m_p_next_sibling == 0);\n   base_type::assert_valid();\n }\n "}, {"sha": "226e9531ada53606e83fd9b521a634a4a1f9968a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pairing_heap_/erase_fn_imps.hpp", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Ferase_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -48,8 +48,8 @@ pop()\n \n   node_pointer p_new_root = join_node_children(base_type::m_p_root);\n   _GLIBCXX_DEBUG_ONLY(assert_node_consistent(p_new_root, false);)\n-  if (p_new_root != NULL)\n-    p_new_root->m_p_prev_or_parent = NULL;\n+  if (p_new_root != 0)\n+    p_new_root->m_p_prev_or_parent = 0;\n \n   base_type::actual_erase_node(base_type::m_p_root);\n   base_type::m_p_root = p_new_root;\n@@ -78,53 +78,53 @@ remove_node(node_pointer p_nd)\n   node_pointer p_new_child = join_node_children(p_nd);\n \n #ifdef _GLIBCXX_DEBUG\n-  if (p_new_child != NULL)\n+  if (p_new_child != 0)\n     base_type::assert_node_consistent(p_new_child, false);\n #endif \n \n   if (p_nd == base_type::m_p_root)\n     {\n-      if (p_new_child != NULL)\n-\tp_new_child->m_p_prev_or_parent = NULL;\n+      if (p_new_child != 0)\n+\tp_new_child->m_p_prev_or_parent = 0;\n       base_type::m_p_root = p_new_child;\n       _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(base_type::m_p_root, false);)\n       return;\n     }\n \n-  _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_prev_or_parent != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_prev_or_parent != 0);\n   if (p_nd->m_p_prev_or_parent->m_p_l_child == p_nd)\n     {\n-      if (p_new_child != NULL)\n+      if (p_new_child != 0)\n         {\n \t  p_new_child->m_p_prev_or_parent = p_nd->m_p_prev_or_parent;\n \t  p_new_child->m_p_next_sibling = p_nd->m_p_next_sibling;\n-\t  if (p_new_child->m_p_next_sibling != NULL)\n+\t  if (p_new_child->m_p_next_sibling != 0)\n \t    p_new_child->m_p_next_sibling->m_p_prev_or_parent = p_new_child;\n \t  p_nd->m_p_prev_or_parent->m_p_l_child = p_new_child;\n \t  _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(p_nd->m_p_prev_or_parent, false);)\n           return;\n         }\n \n       p_nd->m_p_prev_or_parent->m_p_l_child = p_nd->m_p_next_sibling;\n-      if (p_nd->m_p_next_sibling != NULL)\n+      if (p_nd->m_p_next_sibling != 0)\n \tp_nd->m_p_next_sibling->m_p_prev_or_parent = p_nd->m_p_prev_or_parent;\n       _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(p_nd->m_p_prev_or_parent, false);)\n       return;\n     }\n \n-  if (p_new_child != NULL)\n+  if (p_new_child != 0)\n     {\n       p_new_child->m_p_prev_or_parent = p_nd->m_p_prev_or_parent;\n       p_new_child->m_p_next_sibling = p_nd->m_p_next_sibling;\n-      if (p_new_child->m_p_next_sibling != NULL)\n+      if (p_new_child->m_p_next_sibling != 0)\n \tp_new_child->m_p_next_sibling->m_p_prev_or_parent = p_new_child;\n       p_new_child->m_p_prev_or_parent->m_p_next_sibling = p_new_child;\n       _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(p_nd->m_p_prev_or_parent, false);)\n       return;\n     }\n \n   p_nd->m_p_prev_or_parent->m_p_next_sibling = p_nd->m_p_next_sibling;\n-  if (p_nd->m_p_next_sibling != NULL)\n+  if (p_nd->m_p_next_sibling != 0)\n     p_nd->m_p_next_sibling->m_p_prev_or_parent = p_nd->m_p_prev_or_parent;\n   _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(p_nd->m_p_prev_or_parent, false);)\n }\n@@ -134,11 +134,11 @@ typename PB_DS_CLASS_C_DEC::node_pointer\n PB_DS_CLASS_C_DEC::\n join_node_children(node_pointer p_nd)\n {\n-  _GLIBCXX_DEBUG_ASSERT(p_nd != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd != 0);\n   node_pointer p_ret = p_nd->m_p_l_child;\n-  if (p_ret == NULL)\n-    return NULL;\n-  while (p_ret->m_p_next_sibling != NULL)\n+  if (p_ret == 0)\n+    return 0;\n+  while (p_ret->m_p_next_sibling != 0)\n     p_ret = forward_join(p_ret, p_ret->m_p_next_sibling);\n   while (p_ret->m_p_prev_or_parent != p_nd)\n     p_ret = back_join(p_ret->m_p_prev_or_parent, p_ret);\n@@ -151,25 +151,25 @@ typename PB_DS_CLASS_C_DEC::node_pointer\n PB_DS_CLASS_C_DEC::\n forward_join(node_pointer p_nd, node_pointer p_next)\n {\n-  _GLIBCXX_DEBUG_ASSERT(p_nd != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd != 0);\n   _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_next_sibling == p_next);\n   if (Cmp_Fn::operator()(p_nd->m_value, p_next->m_value))\n     {\n       p_next->m_p_prev_or_parent = p_nd->m_p_prev_or_parent;\n       base_type::make_child_of(p_nd, p_next);\n-      return p_next->m_p_next_sibling == NULL \n+      return p_next->m_p_next_sibling == 0 \n \t? p_next : p_next->m_p_next_sibling;\n     }\n \n-  if (p_next->m_p_next_sibling != NULL)\n+  if (p_next->m_p_next_sibling != 0)\n     {\n       p_next->m_p_next_sibling->m_p_prev_or_parent = p_nd;\n       p_nd->m_p_next_sibling = p_next->m_p_next_sibling;\n       base_type::make_child_of(p_next, p_nd);\n       return p_nd->m_p_next_sibling;\n     }\n \n-  p_nd->m_p_next_sibling = NULL;\n+  p_nd->m_p_next_sibling = 0;\n   base_type::make_child_of(p_next, p_nd);\n   _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(p_nd, false));\n   return p_nd;\n@@ -180,8 +180,8 @@ typename PB_DS_CLASS_C_DEC::node_pointer\n PB_DS_CLASS_C_DEC::\n back_join(node_pointer p_nd, node_pointer p_next)\n {\n-  _GLIBCXX_DEBUG_ASSERT(p_nd != NULL);\n-  _GLIBCXX_DEBUG_ASSERT(p_next->m_p_next_sibling == NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd != 0);\n+  _GLIBCXX_DEBUG_ASSERT(p_next->m_p_next_sibling == 0);\n \n   if (Cmp_Fn::operator()(p_nd->m_value, p_next->m_value))\n     {\n@@ -191,7 +191,7 @@ back_join(node_pointer p_nd, node_pointer p_next)\n       return p_next;\n     }\n \n-  p_nd->m_p_next_sibling = NULL;\n+  p_nd->m_p_next_sibling = 0;\n   base_type::make_child_of(p_next, p_nd);\n   _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(p_nd, false));\n   return p_nd;\n@@ -212,7 +212,7 @@ erase_if(Pred pred)\n   base_type::to_linked_list();\n   node_pointer p_out = base_type::prune(pred);\n   size_type ersd = 0;\n-  while (p_out != NULL)\n+  while (p_out != 0)\n     {\n       ++ersd;\n       node_pointer p_next = p_out->m_p_next_sibling;\n@@ -221,11 +221,11 @@ erase_if(Pred pred)\n     }\n \n   node_pointer p_cur = base_type::m_p_root;\n-  base_type::m_p_root = NULL;\n-  while (p_cur != NULL)\n+  base_type::m_p_root = 0;\n+  while (p_cur != 0)\n     {\n       node_pointer p_next = p_cur->m_p_next_sibling;\n-      p_cur->m_p_l_child = p_cur->m_p_next_sibling = p_cur->m_p_prev_or_parent = NULL;\n+      p_cur->m_p_l_child = p_cur->m_p_next_sibling = p_cur->m_p_prev_or_parent = 0;\n \n       push_imp(p_cur);\n       p_cur = p_next;"}, {"sha": "af929e58131cf008a59c32a2b1fe4f1ec39e2adf", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pairing_heap_/insert_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Finsert_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -59,17 +59,17 @@ inline void\n PB_DS_CLASS_C_DEC::\n push_imp(node_pointer p_nd)\n {\n-  p_nd->m_p_l_child = NULL;\n+  p_nd->m_p_l_child = 0;\n \n-  if (base_type::m_p_root == NULL)\n+  if (base_type::m_p_root == 0)\n     {\n-      p_nd->m_p_next_sibling = p_nd->m_p_prev_or_parent = NULL;\n+      p_nd->m_p_next_sibling = p_nd->m_p_prev_or_parent = 0;\n \n       base_type::m_p_root = p_nd;\n     }\n   else if (Cmp_Fn::operator()(base_type::m_p_root->m_value, p_nd->m_value))\n     {\n-      p_nd->m_p_next_sibling = p_nd->m_p_prev_or_parent = NULL;\n+      p_nd->m_p_next_sibling = p_nd->m_p_prev_or_parent = 0;\n \n       base_type::make_child_of(base_type::m_p_root, p_nd);\n       _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(p_nd, false));"}, {"sha": "12032734f4ed35e79ce9547b7b160cc972c47372", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pairing_heap_/split_join_fn_imps.hpp", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fsplit_join_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -61,7 +61,7 @@ split(Pred pred, PB_DS_CLASS_C_DEC& other)\n \n   node_pointer p_out = base_type::prune(pred);\n \n-  while (p_out != NULL)\n+  while (p_out != 0)\n     {\n       _GLIBCXX_DEBUG_ASSERT(base_type::m_size > 0);\n       --base_type::m_size;\n@@ -70,7 +70,7 @@ split(Pred pred, PB_DS_CLASS_C_DEC& other)\n \n       node_pointer p_next = p_out->m_p_next_sibling;\n \n-      p_out->m_p_l_child = p_out->m_p_next_sibling = p_out->m_p_prev_or_parent = NULL;\n+      p_out->m_p_l_child = p_out->m_p_next_sibling = p_out->m_p_prev_or_parent = 0;\n \n       other.push_imp(p_out);\n \n@@ -81,13 +81,13 @@ split(Pred pred, PB_DS_CLASS_C_DEC& other)\n \n     node_pointer p_cur = base_type::m_p_root;\n \n-  base_type::m_p_root = NULL;\n+  base_type::m_p_root = 0;\n \n-  while (p_cur != NULL)\n+  while (p_cur != 0)\n     {\n       node_pointer p_next = p_cur->m_p_next_sibling;\n \n-      p_cur->m_p_l_child = p_cur->m_p_next_sibling = p_cur->m_p_prev_or_parent = NULL;\n+      p_cur->m_p_l_child = p_cur->m_p_next_sibling = p_cur->m_p_prev_or_parent = 0;\n \n       push_imp(p_cur);\n \n@@ -106,15 +106,15 @@ join(PB_DS_CLASS_C_DEC& other)\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n \n-    if (other.m_p_root == NULL)\n+    if (other.m_p_root == 0)\n       {\n         _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \t  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n \n \t  return;\n       }\n \n-  if (base_type::m_p_root == NULL)\n+  if (base_type::m_p_root == 0)\n     base_type::m_p_root = other.m_p_root;\n   else if (Cmp_Fn::operator()(base_type::m_p_root->m_value, other.m_p_root->m_value))\n     {\n@@ -131,7 +131,7 @@ join(PB_DS_CLASS_C_DEC& other)\n \n   base_type::m_size += other.m_size;\n \n-  other.m_p_root = NULL;\n+  other.m_p_root = 0;\n   other.m_size = 0;\n \n   _GLIBCXX_DEBUG_ONLY(assert_valid();)"}, {"sha": "8decad5a7f0d40a02d6c5f776f49c2e318a011b1", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/child_iterator.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fchild_iterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fchild_iterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fchild_iterator.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -48,8 +48,8 @@ struct iterator : public const_iterator\n   typedef node_pointer_reference reference;\n \n   inline\n-  iterator(node_pointer_pointer p_p_cur = NULL,  \n-\t   node_pointer_pointer p_p_end = NULL) \n+  iterator(node_pointer_pointer p_p_cur = 0,  \n+\t   node_pointer_pointer p_p_end = 0) \n   : const_iterator(p_p_cur, p_p_end)\n   { }\n "}, {"sha": "5cc9c2234c605c280eb6722697d69403855c24d0", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/const_child_iterator.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fconst_child_iterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fconst_child_iterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fconst_child_iterator.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -53,8 +53,8 @@ struct const_iterator\n \n public:\n   inline\n-  const_iterator(node_pointer_pointer p_p_cur = NULL,  \n-\t\t node_pointer_pointer p_p_end = NULL) \n+  const_iterator(node_pointer_pointer p_p_cur = 0,  \n+\t\t node_pointer_pointer p_p_end = 0) \n   : m_p_p_cur(p_p_cur), m_p_p_end(p_p_end)\n   { }\n \n@@ -71,7 +71,7 @@ struct const_iterator\n   {\n     do\n       ++m_p_p_cur;\n-    while (m_p_p_cur != m_p_p_end&& * m_p_p_cur == NULL);\n+    while (m_p_p_cur != m_p_p_end&& * m_p_p_cur == 0);\n     return *this;\n   }\n \n@@ -101,7 +101,7 @@ struct const_iterator\n #ifdef _GLIBCXX_DEBUG\n   void\n   assert_referencible() const\n-  { _GLIBCXX_DEBUG_ASSERT(m_p_p_cur != m_p_p_end&& * m_p_p_cur != NULL); }\n+  { _GLIBCXX_DEBUG_ASSERT(m_p_p_cur != m_p_p_end&& * m_p_p_cur != 0); }\n #endif \n \n public:"}, {"sha": "4d4b52a55ebfef36747d5291a81d4035c9188aea", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fconstructors_destructor_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -85,7 +85,7 @@ PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n   initialize();\n   m_size = other.m_size;\n   _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-    if (other.m_p_head->m_p_parent == NULL)\n+    if (other.m_p_head->m_p_parent == 0)\n       {\n         _GLIBCXX_DEBUG_ONLY(assert_valid();)\n         return;\n@@ -143,7 +143,7 @@ PB_DS_CLASS_C_DEC::\n initialize()\n {\n   new (m_p_head) head();\n-  m_p_head->m_p_parent = NULL;\n+  m_p_head->m_p_parent = 0;\n   m_p_head->m_p_min = m_p_head;\n   m_p_head->m_p_max = m_p_head;\n   m_size = 0;\n@@ -164,7 +164,7 @@ typename PB_DS_CLASS_C_DEC::node_pointer\n PB_DS_CLASS_C_DEC::\n recursive_copy_node(const_node_pointer p_other_nd)\n {\n-  _GLIBCXX_DEBUG_ASSERT(p_other_nd != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_other_nd != 0);\n   if (p_other_nd->m_type == pat_trie_leaf_node_type)\n     {\n       const_leaf_pointer p_other_leaf = static_cast<const_leaf_pointer>(p_other_nd);"}, {"sha": "664206499b21849c9d036e5d3df6b081e76d8b9d", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/debug_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fdebug_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -45,11 +45,11 @@ void\n PB_DS_CLASS_C_DEC::\n assert_valid() const\n {\n-  if (m_p_head->m_p_parent != NULL)\n+  if (m_p_head->m_p_parent != 0)\n     m_p_head->m_p_parent->assert_valid(this);\n   assert_iterators();\n   assert_reverse_iterators();\n-  if (m_p_head->m_p_parent == NULL)\n+  if (m_p_head->m_p_parent == 0)\n     {\n       _GLIBCXX_DEBUG_ASSERT(m_p_head->m_p_min == m_p_head);\n       _GLIBCXX_DEBUG_ASSERT(m_p_head->m_p_max == m_p_head);\n@@ -99,7 +99,7 @@ typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n recursive_count_leafs(const_node_pointer p_nd)\n {\n-  if (p_nd == NULL)\n+  if (p_nd == 0)\n     return (0);\n   if (p_nd->m_type == pat_trie_leaf_node_type)\n     return (1);"}, {"sha": "57e998981a8dc40b06a44939d6fdeb8fb2edb060", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/erase_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ferase_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -44,7 +44,7 @@ PB_DS_CLASS_C_DEC::\n erase(const_key_reference r_key)\n {\n   node_pointer p_nd = find_imp(r_key);\n-  if (p_nd == NULL || p_nd->m_type == pat_trie_internal_node_type)\n+  if (p_nd == 0 || p_nd->m_type == pat_trie_internal_node_type)\n     {\n       _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key));\n       return false;"}, {"sha": "f53af2563395cbdd06a3767829bc12b5a7bb1821", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/find_fn_imps.hpp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ffind_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -46,7 +46,7 @@ find(const_key_reference r_key)\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n   node_pointer p_nd = find_imp(r_key);\n \n-  if (p_nd == NULL || p_nd->m_type != pat_trie_leaf_node_type)\n+  if (p_nd == 0 || p_nd->m_type != pat_trie_leaf_node_type)\n     {\n       _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key);)\n       return end();\n@@ -71,7 +71,7 @@ find(const_key_reference r_key) const\n \n   const_node_pointer p_nd = const_cast<PB_DS_CLASS_C_DEC* >(this)->find_imp(r_key);\n \n-  if (p_nd == NULL || p_nd->m_type != pat_trie_leaf_node_type)\n+  if (p_nd == 0 || p_nd->m_type != pat_trie_leaf_node_type)\n     {\n       _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key);)\n       return end();\n@@ -93,22 +93,22 @@ PB_DS_CLASS_C_DEC::\n find_imp(const_key_reference r_key)\n {\n   if (empty())\n-    return (NULL);\n+    return (0);\n \n   typename synth_e_access_traits::const_iterator b_it =\n     synth_e_access_traits::begin(r_key);\n   typename synth_e_access_traits::const_iterator e_it =\n     synth_e_access_traits::end(r_key);\n \n   node_pointer p_nd = m_p_head->m_p_parent;\n-  _GLIBCXX_DEBUG_ASSERT(p_nd != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd != 0);\n \n   while (p_nd->m_type != pat_trie_leaf_node_type)\n     {\n       _GLIBCXX_DEBUG_ASSERT(p_nd->m_type == pat_trie_internal_node_type);\n       node_pointer p_next_nd = static_cast<internal_node_pointer>(p_nd)->get_child_node(b_it,  e_it,  this);\n \n-      if (p_next_nd == NULL)\n+      if (p_next_nd == 0)\n \treturn p_nd;\n       p_nd = p_next_nd;\n     }\n@@ -124,7 +124,7 @@ lower_bound_imp(const_key_reference r_key)\n     return (m_p_head);\n \n   node_pointer p_nd = m_p_head->m_p_parent;\n-  _GLIBCXX_DEBUG_ASSERT(p_nd != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd != 0);\n \n   typename PB_DS_CLASS_C_DEC::const_e_iterator b_it =\n     synth_e_access_traits::begin(r_key);"}, {"sha": "de3cb35276b8001ae0ef6a9f5336107e0d964311", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/insert_join_fn_imps.hpp", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finsert_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finsert_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finsert_join_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -165,7 +165,7 @@ rec_join_prep(const_internal_node_pointer p_l, const_internal_node_pointer p_r,\n \t   it != p_r->end(); ++ it)\n         {\n \t  const_node_pointer p_l_join_child = p_l->get_join_child(*it, this);\n-\t  if (p_l_join_child != NULL)\n+\t  if (p_l_join_child != 0)\n \t    rec_join_prep(p_l_join_child, * it, r_bag);\n         }\n       return;\n@@ -175,7 +175,7 @@ rec_join_prep(const_internal_node_pointer p_l, const_internal_node_pointer p_r,\n       p_r->should_be_mine(p_l->pref_b_it(), p_l->pref_e_it(), 0, this))\n     {\n       const_node_pointer p_r_join_child = p_r->get_join_child(p_l, this);\n-      if (p_r_join_child != NULL)\n+      if (p_r_join_child != 0)\n \trec_join_prep(p_r_join_child, p_l, r_bag);\n       return;\n     }\n@@ -184,7 +184,7 @@ rec_join_prep(const_internal_node_pointer p_l, const_internal_node_pointer p_r,\n       p_r->should_be_mine(p_l->pref_b_it(), p_l->pref_e_it(), 0, this))\n     {\n       const_node_pointer p_r_join_child = p_r->get_join_child(p_l, this);\n-      if (p_r_join_child != NULL)\n+      if (p_r_join_child != 0)\n \trec_join_prep(p_r_join_child, p_l, r_bag);\n       return;\n     }\n@@ -196,8 +196,8 @@ typename PB_DS_CLASS_C_DEC::node_pointer\n PB_DS_CLASS_C_DEC::\n rec_join(node_pointer p_l, node_pointer p_r, size_type checked_ind, split_join_branch_bag& r_bag)\n {\n-  _GLIBCXX_DEBUG_ASSERT(p_r != NULL);\n-  if (p_l == NULL)\n+  _GLIBCXX_DEBUG_ASSERT(p_r != 0);\n+  if (p_l == 0)\n     {\n       apply_update(p_r, (node_update* )this);\n       return (p_r);\n@@ -245,8 +245,8 @@ typename PB_DS_CLASS_C_DEC::node_pointer\n PB_DS_CLASS_C_DEC::\n rec_join(leaf_pointer p_l, leaf_pointer p_r, split_join_branch_bag& r_bag)\n {\n-  _GLIBCXX_DEBUG_ASSERT(p_r != NULL);\n-  if (p_l == NULL)\n+  _GLIBCXX_DEBUG_ASSERT(p_r != 0);\n+  if (p_l == 0)\n     return (p_r);\n   node_pointer p_ret = insert_branch(p_l, p_r, r_bag);\n   _GLIBCXX_DEBUG_ASSERT(recursive_count_leafs(p_ret) == 2);\n@@ -264,7 +264,7 @@ rec_join(leaf_pointer p_l, internal_node_pointer p_r, size_type checked_ind,\n   const size_type rhs_leafs = recursive_count_leafs(p_r);\n #endif \n \n-  _GLIBCXX_DEBUG_ASSERT(p_r != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_r != 0);\n   node_pointer p_ret = rec_join(p_r, p_l, checked_ind, r_bag);\n   _GLIBCXX_DEBUG_ASSERT(recursive_count_leafs(p_ret) == lhs_leafs + rhs_leafs);\n   return p_ret;\n@@ -275,8 +275,8 @@ typename PB_DS_CLASS_C_DEC::node_pointer\n PB_DS_CLASS_C_DEC::\n rec_join(internal_node_pointer p_l, leaf_pointer p_r, size_type checked_ind, split_join_branch_bag& r_bag)\n {\n-  _GLIBCXX_DEBUG_ASSERT(p_l != NULL);\n-  _GLIBCXX_DEBUG_ASSERT(p_r != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_l != 0);\n+  _GLIBCXX_DEBUG_ASSERT(p_r != 0);\n \n #ifdef _GLIBCXX_DEBUG\n   const size_type lhs_leafs = recursive_count_leafs(p_l);\n@@ -313,8 +313,8 @@ typename PB_DS_CLASS_C_DEC::node_pointer\n PB_DS_CLASS_C_DEC::\n rec_join(internal_node_pointer p_l, internal_node_pointer p_r, split_join_branch_bag& r_bag)\n {\n-  _GLIBCXX_DEBUG_ASSERT(p_l != NULL);\n-  _GLIBCXX_DEBUG_ASSERT(p_r != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_l != 0);\n+  _GLIBCXX_DEBUG_ASSERT(p_r != 0);\n \n #ifdef _GLIBCXX_DEBUG\n   const size_type lhs_leafs = recursive_count_leafs(p_l);\n@@ -378,7 +378,7 @@ PB_DS_CLASS_C_DEC::\n insert(const_reference r_val)\n {\n   node_pointer p_lf = find_imp(PB_DS_V2F(r_val));\n-  if (p_lf != NULL && p_lf->m_type == pat_trie_leaf_node_type && \n+  if (p_lf != 0 && p_lf->m_type == pat_trie_leaf_node_type && \n       synth_e_access_traits::equal_keys(PB_DS_V2F(static_cast<leaf_pointer>(p_lf)->value()), PB_DS_V2F(r_val)))\n     {\n       _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(PB_DS_V2F(r_val)));"}, {"sha": "56cf13304976c075b49b2ada4e59b603a7b99a99", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/internal_node.hpp", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finternal_node.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finternal_node.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finternal_node.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -226,7 +226,7 @@ namespace __gnu_pbds\n     get_pref_pos(const_e_iterator b_it, const_e_iterator e_it, \n \t\t const_e_access_traits_pointer p_traits) const\n     {\n-      if (static_cast<size_t>(std::distance(b_it, e_it)) <= m_e_ind)\n+      if (static_cast<std::size_t>(std::distance(b_it, e_it)) <= m_e_ind)\n \treturn 0;\n       std::advance(b_it, m_e_ind);\n       return 1 + p_traits->e_pos(*b_it);\n@@ -240,7 +240,7 @@ namespace __gnu_pbds\n     {\n       std::advance(m_pref_e_it, m_e_ind);\n       std::fill(m_a_p_children, m_a_p_children + arr_size,\n-\t\tstatic_cast<node_pointer>(NULL));\n+\t\tstatic_cast<node_pointer>(0));\n     }\n \n     PB_DS_CLASS_T_DEC\n@@ -317,7 +317,7 @@ namespace __gnu_pbds\n     {\n       const size_type i = get_pref_pos(b_it, e_it, p_traits);\n       _GLIBCXX_DEBUG_ASSERT(i < arr_size);\n-      _GLIBCXX_DEBUG_ASSERT(m_a_p_children[i] != NULL);\n+      _GLIBCXX_DEBUG_ASSERT(m_a_p_children[i] != 0);\n       return iterator(m_a_p_children + i, m_a_p_children + i);\n     }\n \n@@ -345,11 +345,11 @@ namespace __gnu_pbds\n       size_type i = get_pref_pos(b_it, e_it, p_traits);\n       _GLIBCXX_DEBUG_ASSERT(i < arr_size);\n \n-      if (m_a_p_children[i] != NULL)\n+      if (m_a_p_children[i] != 0)\n \treturn m_a_p_children[i];\n \n       while (++i < arr_size)\n-\tif (m_a_p_children[i] != NULL)\n+\tif (m_a_p_children[i] != 0)\n \t  {\n \t    if (m_a_p_children[i]->m_type == pat_trie_leaf_node_type)\n \t      return m_a_p_children[i];\n@@ -370,7 +370,7 @@ namespace __gnu_pbds\n     {\n       const size_type i = get_pref_pos(b_it, e_it, p_traits);\n       _GLIBCXX_DEBUG_ASSERT(i < arr_size);\n-      if (m_a_p_children[i] == NULL)\n+      if (m_a_p_children[i] == 0)\n \t{\n \t  m_a_p_children[i] = p_nd;\n \t  p_nd->m_p_parent = this;\n@@ -423,7 +423,7 @@ namespace __gnu_pbds\n       for (; i < arr_size; ++i)\n \tif (m_a_p_children[i] == p_nd)\n \t  {\n-\t    m_a_p_children[i] = NULL;\n+\t    m_a_p_children[i] = 0;\n \t    return;\n \t  }\n       _GLIBCXX_DEBUG_ASSERT(i != arr_size);\n@@ -436,7 +436,7 @@ namespace __gnu_pbds\n     {\n       iterator ret = it;\n       ++ret;\n-      * it.m_p_p_cur = NULL;\n+      * it.m_p_p_cur = 0;\n       return ret;\n     }\n \n@@ -558,7 +558,7 @@ namespace __gnu_pbds\n     get_begin_pos() const\n     {\n       size_type i;\n-      for (i = 0; i < arr_size && m_a_p_children[i] == NULL; ++i)\n+      for (i = 0; i < arr_size && m_a_p_children[i] == 0; ++i)\n \t;\n       return i;\n     }"}, {"sha": "893a762056d5bb5969e4e19d9baaf57e85332b99", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/iterators_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fiterators_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fiterators_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fiterators_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -110,11 +110,11 @@ PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::const_node_iterator\n PB_DS_CLASS_C_DEC::\n node_end() const\n-{ return const_node_iterator(NULL, this); }\n+{ return const_node_iterator(0, this); }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::node_iterator\n PB_DS_CLASS_C_DEC::\n node_end()\n-{ return node_iterator(NULL, this); }\n+{ return node_iterator(0, this); }\n "}, {"sha": "eb5e0002b9f6577de8a1172b7204ae98209e5f68", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/node_iterators.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fnode_iterators.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fnode_iterators.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fnode_iterators.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -180,8 +180,8 @@ namespace __gnu_pbds\n \tpat_trie_const_node_it_()\n       */\n       inline\n-      pat_trie_const_node_it_(node_pointer p_nd = NULL,  \n-\t\t\t      const_e_access_traits_pointer p_traits = NULL) \n+      pat_trie_const_node_it_(node_pointer p_nd = 0,  \n+\t\t\t      const_e_access_traits_pointer p_traits = 0) \n       : m_p_nd(const_cast<node_pointer>(p_nd)), m_p_traits(p_traits)\n       { }\n \n@@ -299,7 +299,7 @@ namespace __gnu_pbds\n       */\n \n       inline\n-      pat_trie_node_it_(node_pointer p_nd = NULL,  const_e_access_traits_pointer p_traits = NULL) : base_type(p_nd, p_traits)\n+      pat_trie_node_it_(node_pointer p_nd = 0,  const_e_access_traits_pointer p_traits = 0) : base_type(p_nd, p_traits)\n       { }\n \n       // Access; returns the iterator*  associated with the current leaf."}, {"sha": "0a142478eb81512142f40c974ae6c381a162dd17", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/point_iterators.hpp", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpoint_iterators.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpoint_iterators.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpoint_iterators.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -145,7 +145,7 @@ namespace __gnu_pbds\n     public:\n \n       inline\n-      pat_trie_const_it_(node_pointer p_nd = NULL) : m_p_nd(p_nd)\n+      pat_trie_const_it_(node_pointer p_nd = 0) : m_p_nd(p_nd)\n       { }\n \n       inline\n@@ -245,7 +245,7 @@ namespace __gnu_pbds\n \n \tnode_pointer p_y = m_p_nd->m_p_parent;\n \twhile (p_y->m_type != pat_trie_head_node_type && \n-\t       get_larger_sibling(m_p_nd) == NULL)\n+\t       get_larger_sibling(m_p_nd) == 0)\n \t  {\n \t    m_p_nd = p_y;\n \t    p_y = p_y->m_p_parent;\n@@ -274,7 +274,7 @@ namespace __gnu_pbds\n \n \tnode_pointer p_y = m_p_nd->m_p_parent;\n \twhile (p_y->m_type != pat_trie_head_node_type && \n-\t       get_smaller_sibling(m_p_nd) == NULL)\n+\t       get_smaller_sibling(m_p_nd) == 0)\n \t  {\n \t    m_p_nd = p_y;\n \t    p_y = p_y->m_p_parent;\n@@ -300,7 +300,7 @@ namespace __gnu_pbds\n \n \ttypename Internal_Node::iterator next_it = it;\n \t++next_it;\n-\treturn ((next_it == p_parent->end())? NULL :* next_it);\n+\treturn ((next_it == p_parent->end())? 0 :* next_it);\n       }\n \n       inline static node_pointer\n@@ -312,7 +312,7 @@ namespace __gnu_pbds\n \ttypename Internal_Node::iterator it = p_parent->begin();\n \n \tif (*it == p_nd)\n-\t  return (NULL);\n+\t  return (0);\n \ttypename Internal_Node::iterator prev_it;\n \tdo\n \t  {\n@@ -324,7 +324,7 @@ namespace __gnu_pbds\n \twhile (true);\n \n \t_GLIBCXX_DEBUG_ASSERT(false);\n-\treturn (NULL);\n+\treturn (0);\n       }\n \n       inline static leaf_pointer\n@@ -397,7 +397,7 @@ namespace __gnu_pbds\n       typedef typename Type_Traits::reference reference;\n \n       inline\n-      pat_trie_it_(node_pointer p_nd = NULL) : PB_DS_CONST_IT_C_DEC((node_pointer)p_nd)\n+      pat_trie_it_(node_pointer p_nd = 0) : PB_DS_CONST_IT_C_DEC((node_pointer)p_nd)\n       { }\n \n       inline"}, {"sha": "bfb456392b232966b22dfd498ff5cf591ee93ce1", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/r_erase_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fr_erase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fr_erase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fr_erase_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -93,7 +93,7 @@ void\n PB_DS_CLASS_C_DEC::\n clear_imp(node_pointer p_nd)\n {\n-  if (p_nd == NULL)\n+  if (p_nd == 0)\n     return;\n   clear_imp(p_nd->m_p_left);\n   clear_imp(p_nd->m_p_right);"}, {"sha": "40dc38c71b4d493b6211cff80a25cb5b1bca3bba", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/rotate_fn_imps.hpp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Frotate_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Frotate_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Frotate_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -46,7 +46,7 @@ rotate_left(node_pointer p_x)\n   node_pointer p_y = p_x->m_p_right;\n   p_x->m_p_right = p_y->m_p_left;\n \n-  if (p_y->m_p_left != NULL)\n+  if (p_y->m_p_left != 0)\n     p_y->m_p_left->m_p_parent = p_x;\n \n   p_y->m_p_parent = p_x->m_p_parent;\n@@ -75,7 +75,7 @@ rotate_right(node_pointer p_x)\n   node_pointer p_y = p_x->m_p_left;\n   p_x->m_p_left = p_y->m_p_right;\n \n-  if (p_y->m_p_right != NULL)\n+  if (p_y->m_p_right != 0)\n     p_y->m_p_right->m_p_parent = p_x;\n \n   p_y->m_p_parent = p_x->m_p_parent;\n@@ -122,10 +122,10 @@ inline void\n PB_DS_CLASS_C_DEC::\n apply_update(node_pointer p_nd, Node_Update_* p_update)\n {\n-  p_update->operator()(& PB_DS_V2F(p_nd->m_value),(p_nd->m_p_left == NULL) ?\n-\t\t\tNULL :\n-\t\t\t& PB_DS_V2F(p_nd->m_p_left->m_value),(p_nd->m_p_right == NULL) ?\n-\t\t\tNULL :\n+  p_update->operator()(& PB_DS_V2F(p_nd->m_value),(p_nd->m_p_left == 0) ?\n+\t\t\t0 :\n+\t\t\t& PB_DS_V2F(p_nd->m_p_left->m_value),(p_nd->m_p_right == 0) ?\n+\t\t\t0 :\n \t\t\t& PB_DS_V2F(p_nd->m_p_right->m_value));\n }\n "}, {"sha": "320d32c0667181f9e922d99638f709afbddfe547", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/split_fn_imps.hpp", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fsplit_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fsplit_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fsplit_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -47,7 +47,7 @@ split(const_key_reference r_key, PB_DS_CLASS_C_DEC& other)\n   _GLIBCXX_DEBUG_ONLY(other.assert_valid(););\n   split_join_branch_bag bag;\n   leaf_pointer p_split_lf = split_prep(r_key, other, bag);\n-  if (p_split_lf == NULL)\n+  if (p_split_lf == 0)\n     {\n       _GLIBCXX_DEBUG_ASSERT(bag.empty());\n       _GLIBCXX_DEBUG_ONLY(assert_valid();)\n@@ -88,7 +88,7 @@ split_prep(const_key_reference r_key, PB_DS_CLASS_C_DEC& other, split_join_branc\n       other.clear();\n       _GLIBCXX_DEBUG_ONLY(assert_valid(););\n       _GLIBCXX_DEBUG_ONLY(other.assert_valid(););\n-      return (NULL);\n+      return (0);\n     }\n \n   if (synth_e_access_traits::cmp_keys(r_key,\n@@ -98,15 +98,15 @@ split_prep(const_key_reference r_key, PB_DS_CLASS_C_DEC& other, split_join_branc\n       value_swap(other);\n       _GLIBCXX_DEBUG_ONLY(assert_valid(););\n       _GLIBCXX_DEBUG_ONLY(other.assert_valid(););\n-      return (NULL);\n+      return (0);\n     }\n \n   if (!synth_e_access_traits::cmp_keys(r_key,\n \t\t\t\t       PB_DS_V2F(static_cast<const_leaf_pointer>(m_p_head->m_p_max)->value())))\n     {\n       _GLIBCXX_DEBUG_ONLY(assert_valid(););\n       _GLIBCXX_DEBUG_ONLY(other.assert_valid(););\n-      return (NULL);\n+      return (0);\n     }\n \n   iterator it = lower_bound(r_key);\n@@ -134,7 +134,7 @@ rec_split(node_pointer p_nd, const_e_iterator b_it, const_e_iterator e_it, PB_DS\n {\n   if (p_nd->m_type == pat_trie_leaf_node_type)\n     {\n-      _GLIBCXX_DEBUG_ASSERT(other.m_p_head->m_p_parent == NULL);\n+      _GLIBCXX_DEBUG_ASSERT(other.m_p_head->m_p_parent == 0);\n       return (p_nd);\n     }\n \n@@ -202,27 +202,27 @@ PB_DS_CLASS_C_DEC::\n split_insert_branch(size_type e_ind, const_e_iterator b_it, typename internal_node::iterator child_b_it, size_type num_children, split_join_branch_bag& r_bag)\n {\n #ifdef _GLIBCXX_DEBUG\n-  if (m_p_head->m_p_parent != NULL)\n+  if (m_p_head->m_p_parent != 0)\n     m_p_head->m_p_parent->assert_valid(this);\n #endif \n \n-  const size_type total_num_children =((m_p_head->m_p_parent == NULL)? 0 : 1) + num_children;\n+  const size_type total_num_children =((m_p_head->m_p_parent == 0)? 0 : 1) + num_children;\n \n   if (total_num_children == 0)\n     {\n-      _GLIBCXX_DEBUG_ASSERT(m_p_head->m_p_parent == NULL);\n+      _GLIBCXX_DEBUG_ASSERT(m_p_head->m_p_parent == 0);\n       return;\n     }\n \n   if (total_num_children == 1)\n     {\n-      if (m_p_head->m_p_parent != NULL)\n+      if (m_p_head->m_p_parent != 0)\n         {\n \t  _GLIBCXX_DEBUG_ONLY(m_p_head->m_p_parent->assert_valid(this);)\n           return;\n         }\n \n-      _GLIBCXX_DEBUG_ASSERT(m_p_head->m_p_parent == NULL);\n+      _GLIBCXX_DEBUG_ASSERT(m_p_head->m_p_parent == 0);\n       m_p_head->m_p_parent =* child_b_it;\n       m_p_head->m_p_parent->m_p_parent = m_p_head;\n       apply_update(m_p_head->m_p_parent, (node_update* )this);\n@@ -242,7 +242,7 @@ split_insert_branch(size_type e_ind, const_e_iterator b_it, typename internal_no\n       ++child_b_it;\n     }\n \n-  if (m_p_head->m_p_parent != NULL)\n+  if (m_p_head->m_p_parent != 0)\n     p_new_root->add_child(m_p_head->m_p_parent, \n \t\t\t  pref_begin(m_p_head->m_p_parent),\n \t\t\t  pref_end(m_p_head->m_p_parent), this);"}, {"sha": "e6af80413a4bc18b17db51fe2a433da645e51106", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/trace_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ftrace_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ftrace_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ftrace_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -46,7 +46,7 @@ PB_DS_CLASS_C_DEC::\n trace() const\n {\n   std::cerr << std::endl;\n-  if (m_p_head->m_p_parent == NULL)\n+  if (m_p_head->m_p_parent == 0)\n     return;\n   trace_node(m_p_head->m_p_parent, 0);\n   std::cerr << std::endl;"}, {"sha": "1eecdc109904e3b1da41916895c26d9f9aeaafca", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/update_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fupdate_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fupdate_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fupdate_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -51,5 +51,5 @@ PB_DS_CLASS_C_DEC::\n apply_update(node_pointer p_nd, Node_Update_*  /*p_update*/)\n {\n   Node_Update_::operator()(node_iterator(p_nd, this),\n-\t\t\t   const_node_iterator(NULL, this));\n+\t\t\t   const_node_iterator(0, this));\n }"}, {"sha": "7cdadfc5f83fb9e80a15c9f054edff06c76f26ff", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/debug_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fdebug_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -45,7 +45,7 @@ typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n assert_node_consistent(const node_pointer p_nd) const\n {\n-  if (p_nd == NULL)\n+  if (p_nd == 0)\n     return 1;\n \n   const size_type l_height = assert_node_consistent(p_nd->m_p_left);\n@@ -67,7 +67,7 @@ assert_valid() const\n   base_type::assert_valid();\n   const node_pointer p_head = base_type::m_p_head;\n   _GLIBCXX_DEBUG_ASSERT(p_head->m_red);\n-  if (p_head->m_p_parent != NULL)\n+  if (p_head->m_p_parent != 0)\n     {\n       _GLIBCXX_DEBUG_ASSERT(!p_head->m_p_parent->m_red);\n       assert_node_consistent(p_head->m_p_parent);"}, {"sha": "2ae4cef072cff47ba2fc82f542f1ae23d4781237", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/erase_fn_imps.hpp", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Ferase_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -123,25 +123,25 @@ remove_node(node_pointer p_z)\n {\n   update_min_max_for_erased_node(p_z);\n   node_pointer p_y = p_z;\n-  node_pointer p_x = NULL;\n-  node_pointer p_new_x_parent = NULL;\n+  node_pointer p_x = 0;\n+  node_pointer p_new_x_parent = 0;\n \n-  if (p_y->m_p_left == NULL)\n+  if (p_y->m_p_left == 0)\n     p_x = p_y->m_p_right;\n-  else if (p_y->m_p_right == NULL)\n+  else if (p_y->m_p_right == 0)\n     p_x = p_y->m_p_left;\n   else\n     {\n       p_y = p_y->m_p_right;\n-      while (p_y->m_p_left != NULL)\n+      while (p_y->m_p_left != 0)\n \tp_y = p_y->m_p_left;\n       p_x = p_y->m_p_right;\n     }\n \n   if (p_y == p_z)\n     {\n       p_new_x_parent = p_y->m_p_parent;\n-      if (p_x != NULL)\n+      if (p_x != 0)\n \tp_x->m_p_parent = p_y->m_p_parent;\n \n       if (base_type::m_p_head->m_p_parent == p_z)\n@@ -153,7 +153,7 @@ remove_node(node_pointer p_z)\n         }\n       else\n         {\n-\t  p_y->m_p_left = NULL;\n+\t  p_y->m_p_left = 0;\n \t  p_z->m_p_parent->m_p_right = p_x;\n         }\n     }\n@@ -164,7 +164,7 @@ remove_node(node_pointer p_z)\n       if (p_y != p_z->m_p_right)\n         {\n \t  p_new_x_parent = p_y->m_p_parent;\n-\t  if (p_x != NULL)\n+\t  if (p_x != 0)\n \t    p_x->m_p_parent = p_y->m_p_parent;\n \t  p_y->m_p_parent->m_p_left = p_x;\n \t  p_y->m_p_right = p_z->m_p_right;\n@@ -198,7 +198,7 @@ void\n PB_DS_CLASS_C_DEC::\n remove_fixup(node_pointer p_x, node_pointer p_new_x_parent)\n {\n-  _GLIBCXX_DEBUG_ASSERT(p_x == NULL || p_x->m_p_parent == p_new_x_parent);\n+  _GLIBCXX_DEBUG_ASSERT(p_x == 0 || p_x->m_p_parent == p_new_x_parent);\n \n   while (p_x != base_type::m_p_head->m_p_parent && is_effectively_black(p_x))\n     if (p_x == p_new_x_parent->m_p_left)\n@@ -223,7 +223,7 @@ remove_fixup(node_pointer p_x, node_pointer p_new_x_parent)\n \t  {\n \t    if (is_effectively_black(p_w->m_p_right))\n \t      {\n-\t\tif (p_w->m_p_left != NULL)\n+\t\tif (p_w->m_p_left != 0)\n \t\t  p_w->m_p_left->m_red = false;\n \n \t\tp_w->m_red = true;\n@@ -234,7 +234,7 @@ remove_fixup(node_pointer p_x, node_pointer p_new_x_parent)\n \t    p_w->m_red = p_new_x_parent->m_red;\n \t    p_new_x_parent->m_red = false;\n \n-\t    if (p_w->m_p_right != NULL)\n+\t    if (p_w->m_p_right != 0)\n \t      p_w->m_p_right->m_red = false;\n \n \t    base_type::rotate_left(p_new_x_parent);\n@@ -264,7 +264,7 @@ remove_fixup(node_pointer p_x, node_pointer p_new_x_parent)\n \t  {\n \t    if (is_effectively_black(p_w->m_p_left))\n \t      {\n-\t\tif (p_w->m_p_right != NULL)\n+\t\tif (p_w->m_p_right != 0)\n \t\t  p_w->m_p_right->m_red = false;\n \n \t\tp_w->m_red = true;\n@@ -275,7 +275,7 @@ remove_fixup(node_pointer p_x, node_pointer p_new_x_parent)\n \t    p_w->m_red = p_new_x_parent->m_red;\n \t    p_new_x_parent->m_red = false;\n \n-\t    if (p_w->m_p_left != NULL)\n+\t    if (p_w->m_p_left != 0)\n \t      p_w->m_p_left->m_red = false;\n \n \t    base_type::rotate_right(p_new_x_parent);\n@@ -284,6 +284,6 @@ remove_fixup(node_pointer p_x, node_pointer p_new_x_parent)\n \t  }\n       }\n \n-  if (p_x != NULL)\n+  if (p_x != 0)\n     p_x->m_red = false;\n }"}, {"sha": "97eba22f6f858bea1af5d53a198dad015f41f661", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/info_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Finfo_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Finfo_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Finfo_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -42,5 +42,5 @@ PB_DS_CLASS_T_DEC\n inline bool\n PB_DS_CLASS_C_DEC::\n is_effectively_black(const node_pointer p_nd)\n-{ return (p_nd == NULL || !p_nd->m_red); }\n+{ return (p_nd == 0 || !p_nd->m_red); }\n "}, {"sha": "a6a60160ccadccfd03e4cd53a0c56e7913f9d042", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/insert_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Finsert_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -67,7 +67,7 @@ insert_fixup(node_pointer p_nd)\n       if (p_nd->m_p_parent == p_nd->m_p_parent->m_p_parent->m_p_left)\n         {\n \t  node_pointer p_y = p_nd->m_p_parent->m_p_parent->m_p_right;\n-\t  if (p_y != NULL && p_y->m_red)\n+\t  if (p_y != 0 && p_y->m_red)\n             {\n \t      p_nd->m_p_parent->m_red = false;\n \t      p_y->m_red = false;\n@@ -89,7 +89,7 @@ insert_fixup(node_pointer p_nd)\n       else\n         {\n \t  node_pointer p_y = p_nd->m_p_parent->m_p_parent->m_p_left;\n-\t  if (p_y != NULL && p_y->m_red)\n+\t  if (p_y != 0 && p_y->m_red)\n             {\n \t      p_nd->m_p_parent->m_red = false;\n \t      p_y->m_red = false;"}, {"sha": "96280564dd2730bc2578b1772c7c87f20d17b3bb", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/split_join_fn_imps.hpp", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fsplit_join_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -67,8 +67,8 @@ void\n PB_DS_CLASS_C_DEC::\n join_imp(node_pointer p_x, node_pointer p_r)\n {\n-  _GLIBCXX_DEBUG_ASSERT(p_x != NULL);\n-  if (p_r != NULL)\n+  _GLIBCXX_DEBUG_ASSERT(p_x != 0);\n+  if (p_r != 0)\n     p_r->m_red = false;\n \n   const size_type h = black_height(base_type::m_p_head->m_p_parent);\n@@ -88,7 +88,7 @@ join_imp(node_pointer p_x, node_pointer p_r)\n     {\n       p_x_l = base_type::m_p_head->m_p_parent;\n       base_type::m_p_head->m_p_parent = p_r;\n-      if (p_r != NULL)\n+      if (p_r != 0)\n \tp_r->m_p_parent = base_type::m_p_head;\n \n       join_pos = find_join_pos_left(base_type::m_p_head->m_p_parent, \n@@ -112,11 +112,11 @@ join_imp(node_pointer p_x, node_pointer p_r)\n     }\n \n   p_x->m_p_left = p_x_l;\n-  if (p_x_l != NULL)\n+  if (p_x_l != 0)\n     p_x_l->m_p_parent = p_x;\n \n   p_x->m_p_right = p_x_r;\n-  if (p_x_r != NULL)\n+  if (p_x_r != 0)\n     p_x_r->m_p_parent = p_x;\n \n   p_x->m_red = true;\n@@ -153,8 +153,8 @@ find_join_pos_right(node_pointer p_l, size_type h_l, size_type h_r)\n {\n   _GLIBCXX_DEBUG_ASSERT(h_l >= h_r);\n \n-  if (base_type::m_p_head->m_p_parent == NULL)\n-    return (std::make_pair((node_pointer)NULL, base_type::m_p_head));\n+  if (base_type::m_p_head->m_p_parent == 0)\n+    return (std::make_pair((node_pointer)0, base_type::m_p_head));\n \n   node_pointer p_l_parent = base_type::m_p_head;\n   while (h_l > h_r)\n@@ -177,7 +177,7 @@ find_join_pos_right(node_pointer p_l, size_type h_l, size_type h_r)\n \n   _GLIBCXX_DEBUG_ASSERT(is_effectively_black(p_l));\n   _GLIBCXX_DEBUG_ASSERT(black_height(p_l) == h_r);\n-  _GLIBCXX_DEBUG_ASSERT(p_l == NULL || p_l->m_p_parent == p_l_parent);\n+  _GLIBCXX_DEBUG_ASSERT(p_l == 0 || p_l->m_p_parent == p_l_parent);\n   return std::make_pair(p_l, p_l_parent);\n }\n \n@@ -189,8 +189,8 @@ PB_DS_CLASS_C_DEC::\n find_join_pos_left(node_pointer p_r, size_type h_l, size_type h_r)\n {\n   _GLIBCXX_DEBUG_ASSERT(h_r > h_l);\n-  if (base_type::m_p_head->m_p_parent == NULL)\n-    return (std::make_pair((node_pointer)NULL,\n+  if (base_type::m_p_head->m_p_parent == 0)\n+    return (std::make_pair((node_pointer)0,\n \t\t\t   base_type::m_p_head));\n   node_pointer p_r_parent = base_type::m_p_head;\n   while (h_r > h_l)\n@@ -213,7 +213,7 @@ find_join_pos_left(node_pointer p_r, size_type h_l, size_type h_r)\n \n   _GLIBCXX_DEBUG_ASSERT(is_effectively_black(p_r));\n   _GLIBCXX_DEBUG_ASSERT(black_height(p_r) == h_l);\n-  _GLIBCXX_DEBUG_ASSERT(p_r == NULL || p_r->m_p_parent == p_r_parent);\n+  _GLIBCXX_DEBUG_ASSERT(p_r == 0 || p_r->m_p_parent == p_r_parent);\n   return std::make_pair(p_r, p_r_parent);\n }\n \n@@ -223,7 +223,7 @@ PB_DS_CLASS_C_DEC::\n black_height(node_pointer p_nd)\n {\n   size_type h = 1;\n-  while (p_nd != NULL)\n+  while (p_nd != 0)\n     {\n       if (p_nd->m_red == false)\n \t++h;\n@@ -275,15 +275,15 @@ void\n PB_DS_CLASS_C_DEC::\n split_at_node(node_pointer p_nd, PB_DS_CLASS_C_DEC& other)\n {\n-  _GLIBCXX_DEBUG_ASSERT(p_nd != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd != 0);\n \n   node_pointer p_l = p_nd->m_p_left;\n   node_pointer p_r = p_nd->m_p_right;\n   node_pointer p_parent = p_nd->m_p_parent;\n   if (p_parent == base_type::m_p_head)\n     {\n       base_type::m_p_head->m_p_parent = p_l;\n-      if (p_l != NULL)\n+      if (p_l != 0)\n         {\n \t  p_l->m_p_parent = base_type::m_p_head;\n \t  p_l->m_red = false;\n@@ -296,7 +296,7 @@ split_at_node(node_pointer p_nd, PB_DS_CLASS_C_DEC& other)\n       else\n \tp_parent->m_p_right = p_l;\n \n-      if (p_l != NULL)\n+      if (p_l != 0)\n \tp_l->m_p_parent = p_parent;\n \n       update_to_top(p_parent, (node_update* )this);"}, {"sha": "4b8878ee84c9af9ca70df01a1822557e1d442dae", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rc_binomial_heap_/debug_fn_imps.hpp", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Fdebug_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -48,7 +48,7 @@ assert_valid() const\n   base_type::assert_valid(false);\n   if (!base_type::empty())\n     {\n-      _GLIBCXX_DEBUG_ASSERT(base_type::m_p_max != NULL);\n+      _GLIBCXX_DEBUG_ASSERT(base_type::m_p_max != 0);\n       base_type::assert_max();\n     }\n \n@@ -57,21 +57,21 @@ assert_valid() const\n   if (m_rc.empty())\n     {\n       base_type::assert_valid(true);\n-      _GLIBCXX_DEBUG_ASSERT(next_2_pointer(base_type::m_p_root) == NULL);\n+      _GLIBCXX_DEBUG_ASSERT(next_2_pointer(base_type::m_p_root) == 0);\n       return;\n     }\n \n   const_node_pointer p_nd = next_2_pointer(base_type::m_p_root);\n   typename rc_t::const_iterator it = m_rc.end();\n   --it;\n \n-  while (p_nd != NULL)\n+  while (p_nd != 0)\n     {\n       _GLIBCXX_DEBUG_ASSERT(*it == p_nd);\n       const_node_pointer p_next = p_nd->m_p_next_sibling;\n-      _GLIBCXX_DEBUG_ASSERT(p_next != NULL);\n+      _GLIBCXX_DEBUG_ASSERT(p_next != 0);\n       _GLIBCXX_DEBUG_ASSERT(p_nd->m_metadata == p_next->m_metadata);\n-      _GLIBCXX_DEBUG_ASSERT(p_next->m_p_next_sibling == NULL ||\n+      _GLIBCXX_DEBUG_ASSERT(p_next->m_p_next_sibling == 0 ||\n \t\t       p_next->m_metadata < p_next->m_p_next_sibling->m_metadata);\n \n       --it;\n@@ -85,13 +85,13 @@ typename PB_DS_CLASS_C_DEC::const_node_pointer\n PB_DS_CLASS_C_DEC::\n next_2_pointer(const_node_pointer p_nd)\n {\n-  if (p_nd == NULL)\n-    return NULL;\n+  if (p_nd == 0)\n+    return 0;\n \n   node_pointer p_next = p_nd->m_p_next_sibling;\n \n-  if (p_next == NULL)\n-    return NULL;\n+  if (p_next == 0)\n+    return 0;\n \n   if (p_nd->m_metadata == p_next->m_metadata)\n     return p_nd;\n@@ -104,13 +104,13 @@ typename PB_DS_CLASS_C_DEC::const_node_pointer\n PB_DS_CLASS_C_DEC::\n next_after_0_pointer(const_node_pointer p_nd)\n {\n-  if (p_nd == NULL)\n-    return NULL;\n+  if (p_nd == 0)\n+    return 0;\n \n   node_pointer p_next = p_nd->m_p_next_sibling;\n \n-  if (p_next == NULL)\n-    return NULL;\n+  if (p_next == 0)\n+    return 0;\n \n   if (p_nd->m_metadata < p_next->m_metadata)\n     return p_next;"}, {"sha": "1f187a55749c341888b59118c3548f72ee624e85", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rc_binomial_heap_/erase_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Ferase_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -64,10 +64,10 @@ PB_DS_CLASS_C_DEC::\n make_binomial_heap()\n {\n   node_pointer p_nd = base_type::m_p_root;\n-  while (p_nd != NULL)\n+  while (p_nd != 0)\n     {\n       node_pointer p_next = p_nd->m_p_next_sibling;\n-      if (p_next == NULL)\n+      if (p_next == 0)\n \tp_nd = p_next;\n       else if (p_nd->m_metadata == p_next->m_metadata)\n \tp_nd = link_with_next_sibling(p_nd);"}, {"sha": "2a3badccb5b3e70fa9f4123ff44459fe2b672c81", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rc_binomial_heap_/insert_fn_imps.hpp", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Finsert_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -51,20 +51,20 @@ push(const_reference r_val)\n \n     node_pointer p_nd = base_type::get_new_node_for_insert(r_val);\n \n-  p_nd->m_p_l_child = p_nd->m_p_prev_or_parent = NULL;\n+  p_nd->m_p_l_child = p_nd->m_p_prev_or_parent = 0;\n   p_nd->m_metadata = 0;\n \n-  if (base_type::m_p_max == NULL || Cmp_Fn::operator()(base_type::m_p_max->m_value, r_val))\n+  if (base_type::m_p_max == 0 || Cmp_Fn::operator()(base_type::m_p_max->m_value, r_val))\n     base_type::m_p_max = p_nd;\n \n   p_nd->m_p_next_sibling = base_type::m_p_root;\n \n-  if (base_type::m_p_root != NULL)\n+  if (base_type::m_p_root != 0)\n     base_type::m_p_root->m_p_prev_or_parent = p_nd;\n \n   base_type::m_p_root = p_nd;\n \n-  if (p_nd->m_p_next_sibling != NULL&&  p_nd->m_p_next_sibling->m_metadata == 0)\n+  if (p_nd->m_p_next_sibling != 0&&  p_nd->m_p_next_sibling->m_metadata == 0)\n     m_rc.push(p_nd);\n \n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n@@ -95,14 +95,14 @@ link_with_next_sibling(node_pointer p_nd)\n {\n   node_pointer p_next = p_nd->m_p_next_sibling;\n \n-  _GLIBCXX_DEBUG_ASSERT(p_next != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_next != 0);\n   _GLIBCXX_DEBUG_ASSERT(p_next->m_p_prev_or_parent == p_nd);\n \n   if (Cmp_Fn::operator()(p_nd->m_value, p_next->m_value))\n     {\n       p_next->m_p_prev_or_parent = p_nd->m_p_prev_or_parent;\n \n-      if (p_next->m_p_prev_or_parent == NULL)\n+      if (p_next->m_p_prev_or_parent == 0)\n \tbase_type::m_p_root = p_next;\n       else\n \tp_next->m_p_prev_or_parent->m_p_next_sibling = p_next;\n@@ -119,7 +119,7 @@ link_with_next_sibling(node_pointer p_nd)\n \n   p_nd->m_p_next_sibling = p_next->m_p_next_sibling;\n \n-  if (p_nd->m_p_next_sibling != NULL)\n+  if (p_nd->m_p_next_sibling != 0)\n     p_nd->m_p_next_sibling->m_p_prev_or_parent = p_nd;\n \n   if (base_type::m_p_max == p_next)\n@@ -144,11 +144,11 @@ make_0_exposed()\n \n   m_rc.pop();\n \n-  _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_next_sibling != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_next_sibling != 0);\n   _GLIBCXX_DEBUG_ASSERT(p_nd->m_metadata == p_nd->m_p_next_sibling->m_metadata);\n \n   node_pointer p_res = link_with_next_sibling(p_nd);\n \n-  if (p_res->m_p_next_sibling != NULL&&  p_res->m_metadata == p_res->m_p_next_sibling->m_metadata)\n+  if (p_res->m_p_next_sibling != 0&&  p_res->m_metadata == p_res->m_p_next_sibling->m_metadata)\n     m_rc.push(p_res);\n }"}, {"sha": "c816cfdeac8f0a29f1cbf45cb5e5d5f030138d2b", "filename": "libstdc++-v3/include/ext/pb_ds/detail/resize_policy/hash_prime_size_policy_imp.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_prime_size_policy_imp.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_prime_size_policy_imp.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_prime_size_policy_imp.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -150,7 +150,7 @@ inline PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n get_nearest_smaller_size(size_type n) const\n {\n-  const size_t* p_lower = std::lower_bound(detail::g_a_sizes, \n+  const std::size_t* p_lower = std::lower_bound(detail::g_a_sizes, \n \t\t       detail::g_a_sizes + detail::num_distinct_sizes, n);\n \n   if (*p_lower >= n &&  p_lower != detail::g_a_sizes)"}, {"sha": "33aecdf5fcc4bd68d1cc54d5e942ac14f1f841b9", "filename": "libstdc++-v3/include/ext/pb_ds/detail/resize_policy/sample_resize_policy.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fsample_resize_policy.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fsample_resize_policy.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fsample_resize_policy.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -47,7 +47,7 @@ class sample_resize_policy\n public:\n \n   // Size type.\n-  typedef size_t size_type;\n+  typedef std::size_t size_type;\n \n   // Default constructor.\n   sample_resize_policy();"}, {"sha": "963c5530a462aaeb0db5453032cebfa0b327f8f8", "filename": "libstdc++-v3/include/ext/pb_ds/detail/resize_policy/sample_resize_trigger.hpp", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fsample_resize_trigger.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fsample_resize_trigger.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fsample_resize_trigger.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,7 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -47,7 +48,7 @@ class sample_resize_trigger\n public:\n \n   // Size type.\n-  typedef size_t size_type;\n+  typedef std::size_t size_type;\n \n   // Default constructor.\n   sample_resize_trigger();"}, {"sha": "9b3ba031c4b0ddac63ca1afde16e96873682b1b8", "filename": "libstdc++-v3/include/ext/pb_ds/detail/resize_policy/sample_size_policy.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fsample_size_policy.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fsample_size_policy.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fsample_size_policy.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -47,7 +47,7 @@ class sample_size_policy\n public:\n \n   // Size type.\n-  typedef size_t size_type;\n+  typedef std::size_t size_type;\n \n   // Default constructor.\n   sample_size_policy();"}, {"sha": "f673877aed226e5839510ffaeb6393adeb64150c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/debug_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fdebug_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -55,7 +55,7 @@ void\n PB_DS_CLASS_C_DEC::\n assert_special_imp(const node_pointer p_nd) const\n {\n-  if (p_nd == NULL)\n+  if (p_nd == 0)\n     return;\n \n   if (p_nd == base_type::m_p_head)"}, {"sha": "507b8ba407ce3a030d14af9073e8c2ddaa0f1393", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/erase_fn_imps.hpp", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ferase_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -108,7 +108,7 @@ void\n PB_DS_CLASS_C_DEC::\n erase_node(node_pointer p_nd)\n {\n-  _GLIBCXX_DEBUG_ASSERT(p_nd != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd != 0);\n   splay(p_nd);\n \n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n@@ -119,27 +119,27 @@ erase_node(node_pointer p_nd)\n \n   base_type::update_min_max_for_erased_node(p_nd);\n   base_type::actual_erase_node(p_nd);\n-  if (p_r == NULL)\n+  if (p_r == 0)\n     {\n       base_type::m_p_head->m_p_parent = p_l;\n-      if (p_l != NULL)\n+      if (p_l != 0)\n \tp_l->m_p_parent = base_type::m_p_head;\n       _GLIBCXX_DEBUG_ONLY(assert_valid();)\n       return;\n     }\n \n   node_pointer p_target_r = leftmost(p_r);\n-  _GLIBCXX_DEBUG_ASSERT(p_target_r != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_target_r != 0);\n   p_r->m_p_parent = base_type::m_p_head;\n   base_type::m_p_head->m_p_parent = p_r;\n   splay(p_target_r);\n \n-  _GLIBCXX_DEBUG_ONLY(p_target_r->m_p_left = NULL);\n+  _GLIBCXX_DEBUG_ONLY(p_target_r->m_p_left = 0);\n   _GLIBCXX_DEBUG_ASSERT(p_target_r->m_p_parent == this->m_p_head);\n   _GLIBCXX_DEBUG_ASSERT(this->m_p_head->m_p_parent == p_target_r);\n \n   p_target_r->m_p_left = p_l;\n-  if (p_l != NULL)\n+  if (p_l != 0)\n     p_l->m_p_parent = p_target_r;\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n   apply_update(p_target_r, (node_update* )this);\n@@ -150,8 +150,8 @@ inline typename PB_DS_CLASS_C_DEC::node_pointer\n PB_DS_CLASS_C_DEC::\n leftmost(node_pointer p_nd)\n {\n-  _GLIBCXX_DEBUG_ASSERT(p_nd != NULL);\n-  while (p_nd->m_p_left != NULL)\n+  _GLIBCXX_DEBUG_ASSERT(p_nd != 0);\n+  while (p_nd->m_p_left != 0)\n     p_nd = p_nd->m_p_left;\n   return p_nd;\n }"}, {"sha": "e27142c17ecd5857debbb21b17d31b8ce7486edf", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/find_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ffind_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -67,7 +67,7 @@ find_imp(const_key_reference r_key)\n {\n   _GLIBCXX_DEBUG_ONLY(base_type::structure_only_assert_valid();)\n   node_pointer p_nd = base_type::m_p_head->m_p_parent;\n-  while (p_nd != NULL)\n+  while (p_nd != 0)\n     if (!Cmp_Fn::operator()(PB_DS_V2F(p_nd->m_value), r_key))\n       {\n \tif (!Cmp_Fn::operator()(r_key, PB_DS_V2F(p_nd->m_value)))\n@@ -86,7 +86,7 @@ find_imp(const_key_reference r_key) const\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n   node_pointer p_nd = base_type::m_p_head->m_p_parent;\n-  while (p_nd != NULL)\n+  while (p_nd != 0)\n     if (!Cmp_Fn::operator()(PB_DS_V2F(p_nd->m_value), r_key))\n       {\n \tif (!Cmp_Fn::operator()(r_key, PB_DS_V2F(p_nd->m_value)))"}, {"sha": "8381174d29fea111b8d9e829125bf54f60abe657", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/insert_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Finsert_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -64,7 +64,7 @@ insert_leaf_imp(const_reference r_value)\n   node_pointer p_nd = base_type::m_p_head->m_p_parent;\n   node_pointer p_pot = base_type::m_p_head;\n \n-  while (p_nd != NULL)\n+  while (p_nd != 0)\n     if (!Cmp_Fn::operator()(PB_DS_V2F(p_nd->m_value), PB_DS_V2F(r_value)))\n       {\n \tif (!Cmp_Fn::operator()(PB_DS_V2F(r_value), PB_DS_V2F(p_nd->m_value)))\n@@ -83,10 +83,10 @@ insert_leaf_imp(const_reference r_value)\n   _GLIBCXX_DEBUG_ONLY(base_type::check_key_does_not_exist(PB_DS_V2F(r_value)));\n \n   p_nd = p_pot->m_p_left;\n-  if (p_nd == NULL)\n+  if (p_nd == 0)\n     return (std::make_pair(base_type::insert_leaf_new(r_value, p_pot, true), true));\n \n-  while (p_nd->m_p_right != NULL)\n+  while (p_nd->m_p_right != 0)\n     p_nd = p_nd->m_p_right;\n \n   return std::make_pair(insert_leaf_new(r_value, p_nd, false), true);"}, {"sha": "b6993590acb89984887ab5694b243cf4b9d41389", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/splay_fn_imps.hpp", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplay_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplay_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplay_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -114,11 +114,11 @@ splay_zig_zag_left(node_pointer p_nd, node_pointer p_parent,\n   p_grandparent->m_p_parent = p_nd;\n \n   p_parent->m_p_left = p_b;\n-  if (p_b != NULL)\n+  if (p_b != 0)\n     p_b->m_p_parent = p_parent;\n \n   p_grandparent->m_p_right = p_c;\n-  if (p_c != NULL)\n+  if (p_c != 0)\n     p_c->m_p_parent = p_grandparent;\n \n   splay_zz_end(p_nd, p_parent, p_grandparent);\n@@ -150,11 +150,11 @@ splay_zig_zag_right(node_pointer p_nd, node_pointer p_parent,\n   p_grandparent->m_p_parent = p_nd;\n \n   p_parent->m_p_right = p_b;\n-  if (p_b != NULL)\n+  if (p_b != 0)\n     p_b->m_p_parent = p_parent;\n \n   p_grandparent->m_p_left = p_c;\n-  if (p_c != NULL)\n+  if (p_c != 0)\n     p_c->m_p_parent = p_grandparent;\n \n   splay_zz_end(p_nd, p_parent, p_grandparent);\n@@ -186,11 +186,11 @@ splay_zig_zig_left(node_pointer p_nd, node_pointer p_parent,\n   p_grandparent->m_p_parent = p_parent;\n \n   p_parent->m_p_left = p_b;\n-  if (p_b != NULL)\n+  if (p_b != 0)\n     p_b->m_p_parent = p_parent;\n \n   p_grandparent->m_p_left = p_c;\n-  if (p_c != NULL)\n+  if (p_c != 0)\n     p_c->m_p_parent = p_grandparent;\n \n   splay_zz_end(p_nd, p_parent, p_grandparent);\n@@ -220,11 +220,11 @@ splay_zig_zig_right(node_pointer p_nd, node_pointer p_parent,\n   p_grandparent->m_p_parent = p_parent;\n \n   p_parent->m_p_right = p_b;\n-  if (p_b != NULL)\n+  if (p_b != 0)\n     p_b->m_p_parent = p_parent;\n \n   p_grandparent->m_p_right = p_c;\n-  if (p_c != NULL)\n+  if (p_c != 0)\n     p_c->m_p_parent = p_grandparent;\n \n   base_type::update_to_top(p_grandparent, (node_update* )this);\n@@ -242,9 +242,9 @@ splay_zz_start(node_pointer p_nd,\n #endif\n \t       node_pointer p_grandparent)\n {\n-  _GLIBCXX_DEBUG_ASSERT(p_nd != NULL);\n-  _GLIBCXX_DEBUG_ASSERT(p_parent != NULL);\n-  _GLIBCXX_DEBUG_ASSERT(p_grandparent != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd != 0);\n+  _GLIBCXX_DEBUG_ASSERT(p_parent != 0);\n+  _GLIBCXX_DEBUG_ASSERT(p_grandparent != 0);\n \n   const bool grandparent_head = p_grandparent->m_p_parent == base_type::m_p_head;\n "}, {"sha": "401f22c0369c9f66e24e886bfa7f74568ba3702e", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/split_join_fn_imps.hpp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplit_join_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -53,15 +53,15 @@ join(PB_DS_CLASS_C_DEC& other)\n     }\n \n   node_pointer p_target_r = other.leftmost(other.m_p_head);\n-  _GLIBCXX_DEBUG_ASSERT(p_target_r != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_target_r != 0);\n   other.splay(p_target_r);\n \n   _GLIBCXX_DEBUG_ASSERT(p_target_r == other.m_p_head->m_p_parent);\n-  _GLIBCXX_DEBUG_ASSERT(p_target_r->m_p_left == NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_target_r->m_p_left == 0);\n \n   p_target_r->m_p_left = base_type::m_p_head->m_p_parent;\n \n-  _GLIBCXX_DEBUG_ASSERT(p_target_r->m_p_left != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_target_r->m_p_left != 0);\n   p_target_r->m_p_left->m_p_parent = p_target_r;\n \n   base_type::m_p_head->m_p_parent = p_target_r;\n@@ -90,19 +90,19 @@ split(const_key_reference r_key, PB_DS_CLASS_C_DEC& other)\n     }\n \n   node_pointer p_upper_bound = upper_bound(r_key).m_p_nd;\n-  _GLIBCXX_DEBUG_ASSERT(p_upper_bound != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_upper_bound != 0);\n \n   splay(p_upper_bound);\n   _GLIBCXX_DEBUG_ASSERT(p_upper_bound->m_p_parent == this->m_p_head);\n \n   node_pointer p_new_root = p_upper_bound->m_p_left;\n-  _GLIBCXX_DEBUG_ASSERT(p_new_root != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_new_root != 0);\n \n   base_type::m_p_head->m_p_parent = p_new_root;\n   p_new_root->m_p_parent = base_type::m_p_head;\n   other.m_p_head->m_p_parent = p_upper_bound;\n   p_upper_bound->m_p_parent = other.m_p_head;\n-  p_upper_bound->m_p_left = NULL;\n+  p_upper_bound->m_p_left = 0;\n   apply_update(p_upper_bound, (node_update* )this);\n   base_type::split_finish(other);\n "}, {"sha": "5a09f7c402084a18c327ae668caed390a64128c3", "filename": "libstdc++-v3/include/ext/pb_ds/detail/thin_heap_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fconstructors_destructor_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -52,7 +52,7 @@ copy_from_range(It first_it, It last_it)\n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n thin_heap_() :\n-  m_p_max(NULL)\n+  m_p_max(0)\n {\n   initialize();\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n@@ -62,7 +62,7 @@ PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n thin_heap_(const Cmp_Fn& r_cmp_fn) :\n   PB_DS_BASE_C_DEC(r_cmp_fn),\n-  m_p_max(NULL)\n+  m_p_max(0)\n {\n   initialize();\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n@@ -75,7 +75,7 @@ thin_heap_(const PB_DS_CLASS_C_DEC& other) :\n {\n   initialize();\n   m_p_max = base_type::m_p_root;\n-  for (node_pointer p_nd = base_type::m_p_root; p_nd != NULL; p_nd = p_nd->m_p_next_sibling)\n+  for (node_pointer p_nd = base_type::m_p_root; p_nd != 0; p_nd = p_nd->m_p_next_sibling)\n     if (Cmp_Fn::operator()(m_p_max->m_value, p_nd->m_value))\n       m_p_max = p_nd;\n \n@@ -102,5 +102,5 @@ PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n initialize()\n-{ std::fill(m_a_aux, m_a_aux + max_rank, static_cast<node_pointer>(NULL)); }\n+{ std::fill(m_a_aux, m_a_aux + max_rank, static_cast<node_pointer>(0)); }\n "}, {"sha": "0aedadb9f843a9fbe4226d262e2db18ba3f00ca3", "filename": "libstdc++-v3/include/ext/pb_ds/detail/thin_heap_/debug_fn_imps.hpp", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fdebug_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -57,23 +57,23 @@ PB_DS_CLASS_C_DEC::\n assert_aux_null() const\n {\n   for (size_type i = 0; i < max_rank; ++i)\n-    _GLIBCXX_DEBUG_ASSERT(m_a_aux[i] == NULL);\n+    _GLIBCXX_DEBUG_ASSERT(m_a_aux[i] == 0);\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n assert_max() const\n {\n-  if (m_p_max == NULL)\n+  if (m_p_max == 0)\n     {\n       _GLIBCXX_DEBUG_ASSERT(base_type::empty());\n       return;\n     }\n \n   _GLIBCXX_DEBUG_ASSERT(!base_type::empty());\n-  _GLIBCXX_DEBUG_ASSERT(base_type::parent(m_p_max) == NULL);\n-  _GLIBCXX_DEBUG_ASSERT(m_p_max->m_p_prev_or_parent == NULL);\n+  _GLIBCXX_DEBUG_ASSERT(base_type::parent(m_p_max) == 0);\n+  _GLIBCXX_DEBUG_ASSERT(m_p_max->m_p_prev_or_parent == 0);\n   for (const_iterator it = base_type::begin(); it != base_type::end(); ++it)\n     _GLIBCXX_DEBUG_ASSERT(!Cmp_Fn::operator()(m_p_max->m_value, it.m_p_nd->m_value));\n }\n@@ -84,25 +84,25 @@ PB_DS_CLASS_C_DEC::\n assert_node_consistent(const_node_pointer p_nd, bool root) const\n {\n   base_type::assert_node_consistent(p_nd, root);\n-  if (p_nd == NULL)\n+  if (p_nd == 0)\n     return;\n \n   assert_node_consistent(p_nd->m_p_next_sibling, root);\n   assert_node_consistent(p_nd->m_p_l_child, false);\n   if (!root)\n     {\n       if (p_nd->m_metadata == 0)\n-\t_GLIBCXX_DEBUG_ASSERT(p_nd->m_p_next_sibling == NULL);\n+\t_GLIBCXX_DEBUG_ASSERT(p_nd->m_p_next_sibling == 0);\n       else\n \t_GLIBCXX_DEBUG_ASSERT(p_nd->m_metadata == p_nd->m_p_next_sibling->m_metadata + 1);\n     }\n \n-  if (p_nd->m_p_l_child != NULL)\n+  if (p_nd->m_p_l_child != 0)\n     _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_l_child->m_metadata + 1 == base_type::degree(p_nd));\n \n-  const bool unmarked_valid =(p_nd->m_p_l_child == NULL&&  p_nd->m_metadata == 0) ||(p_nd->m_p_l_child != NULL&&  p_nd->m_metadata == p_nd->m_p_l_child->m_metadata + 1);\n+  const bool unmarked_valid =(p_nd->m_p_l_child == 0&&  p_nd->m_metadata == 0) ||(p_nd->m_p_l_child != 0&&  p_nd->m_metadata == p_nd->m_p_l_child->m_metadata + 1);\n \n-  const bool marked_valid =(p_nd->m_p_l_child == NULL&&  p_nd->m_metadata == 1) ||(p_nd->m_p_l_child != NULL&&  p_nd->m_metadata == p_nd->m_p_l_child->m_metadata + 2);\n+  const bool marked_valid =(p_nd->m_p_l_child == 0&&  p_nd->m_metadata == 1) ||(p_nd->m_p_l_child != 0&&  p_nd->m_metadata == p_nd->m_p_l_child->m_metadata + 2);\n \n   _GLIBCXX_DEBUG_ASSERT(unmarked_valid || marked_valid);\n   if (root)"}, {"sha": "6f1b20b441a8e0ada0ec3a4bc9a5e2057387faee", "filename": "libstdc++-v3/include/ext/pb_ds/detail/thin_heap_/erase_fn_imps.hpp", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Ferase_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -46,7 +46,7 @@ pop()\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     _GLIBCXX_DEBUG_ASSERT(!base_type::empty());\n \n-  _GLIBCXX_DEBUG_ASSERT(m_p_max != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(m_p_max != 0);\n \n   node_pointer p_nd = m_p_max;\n \n@@ -85,11 +85,11 @@ to_aux_except_max()\n \n   p_add = m_p_max->m_p_l_child;\n \n-  while (p_add != NULL)\n+  while (p_add != 0)\n     {\n       node_pointer p_next_add = p_add->m_p_next_sibling;\n \n-      p_add->m_metadata = p_add->m_p_l_child == NULL?\n+      p_add->m_metadata = p_add->m_p_l_child == 0?\n \t0 :\n \tp_add->m_p_l_child->m_metadata + 1;\n \n@@ -100,7 +100,7 @@ to_aux_except_max()\n \n   p_add = m_p_max->m_p_next_sibling;\n \n-  while (p_add != NULL)\n+  while (p_add != 0)\n     {\n       node_pointer p_next_add = p_add->m_p_next_sibling;\n \n@@ -117,7 +117,7 @@ add_to_aux(node_pointer p_nd)\n {\n   size_type r = p_nd->m_metadata;\n \n-  while (m_a_aux[r] != NULL)\n+  while (m_a_aux[r] != 0)\n     {\n       _GLIBCXX_DEBUG_ASSERT(p_nd->m_metadata < rank_bound());\n \n@@ -130,7 +130,7 @@ add_to_aux(node_pointer p_nd)\n \t  p_nd = m_a_aux[r];\n         }\n \n-      m_a_aux[r] = NULL;\n+      m_a_aux[r] = 0;\n \n       ++r;\n     }\n@@ -159,19 +159,19 @@ inline void\n PB_DS_CLASS_C_DEC::\n make_from_aux()\n {\n-  base_type::m_p_root = m_p_max = NULL;\n+  base_type::m_p_root = m_p_max = 0;\n \n   const size_type rnk_bnd = rank_bound();\n \n   size_type i = 0;\n \n   while (i < rnk_bnd)\n     {\n-      if (m_a_aux[i] != NULL)\n+      if (m_a_aux[i] != 0)\n         {\n \t  make_root_and_link(m_a_aux[i]);\n \n-\t  m_a_aux[i] = NULL;\n+\t  m_a_aux[i] = 0;\n         }\n \n       ++i;\n@@ -186,18 +186,18 @@ PB_DS_CLASS_C_DEC::\n remove_node(node_pointer p_nd)\n {\n   node_pointer p_parent = p_nd;\n-  while (base_type::parent(p_parent) != NULL)\n+  while (base_type::parent(p_parent) != 0)\n     p_parent = base_type::parent(p_parent);\n \n   base_type::bubble_to_top(p_nd);\n \n   m_p_max = p_nd;\n \n   node_pointer p_fix = base_type::m_p_root;\n-  while (p_fix != NULL&&  p_fix->m_p_next_sibling != p_parent)\n+  while (p_fix != 0&&  p_fix->m_p_next_sibling != p_parent)\n     p_fix = p_fix->m_p_next_sibling;\n \n-  if (p_fix != NULL)\n+  if (p_fix != 0)\n     p_fix->m_p_next_sibling = p_nd;\n \n   remove_max_node();\n@@ -210,7 +210,7 @@ clear()\n {\n   base_type::clear();\n \n-  m_p_max = NULL;\n+  m_p_max = 0;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -251,7 +251,7 @@ erase_if(Pred pred)\n \n   size_type ersd = 0;\n \n-  while (p_out != NULL)\n+  while (p_out != 0)\n     {\n       ++ersd;\n \n@@ -264,9 +264,9 @@ erase_if(Pred pred)\n \n   node_pointer p_cur = base_type::m_p_root;\n \n-  m_p_max = base_type::m_p_root = NULL;\n+  m_p_max = base_type::m_p_root = 0;\n \n-  while (p_cur != NULL)\n+  while (p_cur != 0)\n     {\n       node_pointer p_next = p_cur->m_p_next_sibling;\n "}, {"sha": "700486a60d779cb4d24bd468ad82eecd04f71895", "filename": "libstdc++-v3/include/ext/pb_ds/detail/thin_heap_/find_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Ffind_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -46,6 +46,6 @@ top() const\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     _GLIBCXX_DEBUG_ASSERT(!base_type::empty());\n \n-  _GLIBCXX_DEBUG_ASSERT(m_p_max != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(m_p_max != 0);\n   return m_p_max->m_value;\n }"}, {"sha": "4e8a1c2d8cc9af534c6e5a32d1257e9d558d10f3", "filename": "libstdc++-v3/include/ext/pb_ds/detail/thin_heap_/insert_fn_imps.hpp", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Finsert_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -49,11 +49,11 @@ push(const_reference r_val)\n \n   p_nd->m_metadata = 0;\n \n-  p_nd->m_p_prev_or_parent = p_nd->m_p_l_child = NULL;\n+  p_nd->m_p_prev_or_parent = p_nd->m_p_l_child = 0;\n \n-  if (base_type::m_p_root == NULL)\n+  if (base_type::m_p_root == 0)\n     {\n-      p_nd->m_p_next_sibling = NULL;\n+      p_nd->m_p_next_sibling = 0;\n \n       m_p_max = base_type::m_p_root = p_nd;\n \n@@ -64,7 +64,7 @@ push(const_reference r_val)\n \n   p_nd->m_p_next_sibling = base_type::m_p_root;\n \n-  base_type::m_p_root->m_p_prev_or_parent = NULL;\n+  base_type::m_p_root->m_p_prev_or_parent = 0;\n \n   base_type::m_p_root = p_nd;\n \n@@ -81,7 +81,7 @@ PB_DS_CLASS_C_DEC::\n make_root(node_pointer p_nd)\n {\n   p_nd->m_metadata =\n-    p_nd->m_p_l_child == NULL?\n+    p_nd->m_p_l_child == 0?\n     0 :\n     1 + p_nd->m_p_l_child->m_metadata;\n }\n@@ -93,12 +93,12 @@ make_root_and_link(node_pointer p_nd)\n {\n   make_root(p_nd);\n \n-  p_nd->m_p_prev_or_parent = NULL;\n+  p_nd->m_p_prev_or_parent = 0;\n \n   p_nd->m_p_next_sibling = base_type::m_p_root;\n \n-  if (base_type::m_p_root != NULL)\n-    base_type::m_p_root->m_p_prev_or_parent = NULL;\n+  if (base_type::m_p_root != 0)\n+    base_type::m_p_root->m_p_prev_or_parent = 0;\n \n   base_type::m_p_root = p_nd;\n \n@@ -112,15 +112,15 @@ fix(node_pointer p_y)\n {\n   while (true)\n     {\n-      if (p_y->m_p_prev_or_parent == NULL)\n+      if (p_y->m_p_prev_or_parent == 0)\n         {\n \t  fix_root(p_y);\n \n \t  return;\n         }\n-      else if (p_y->m_metadata == 1&&  p_y->m_p_next_sibling == NULL)\n+      else if (p_y->m_metadata == 1&&  p_y->m_p_next_sibling == 0)\n         {\n-\t  if (p_y->m_p_l_child != NULL)\n+\t  if (p_y->m_p_l_child != 0)\n             {\n \t      fix_sibling_rank_1_unmarked(p_y);\n \n@@ -133,7 +133,7 @@ fix(node_pointer p_y)\n         }\n       else if (p_y->m_metadata > p_y->m_p_next_sibling->m_metadata + 1)\n         {\n-\t  _GLIBCXX_DEBUG_ASSERT(p_y->m_p_l_child != NULL);\n+\t  _GLIBCXX_DEBUG_ASSERT(p_y->m_p_l_child != 0);\n \n \t  if (p_y->m_metadata != p_y->m_p_l_child->m_metadata + 2)\n             {\n@@ -146,8 +146,8 @@ fix(node_pointer p_y)\n \n \t  p_y = p_y->m_p_prev_or_parent;\n         }\n-      else if ((p_y->m_p_l_child == NULL&& \n-                p_y->m_metadata == 2) ||(p_y->m_p_l_child != NULL&& \n+      else if ((p_y->m_p_l_child == 0&& \n+                p_y->m_metadata == 2) ||(p_y->m_p_l_child != 0&& \n \t\t\t\t\t p_y->m_metadata == p_y->m_p_l_child->m_metadata + 3))\n         {\n \t  node_pointer p_z = p_y->m_p_prev_or_parent;\n@@ -166,7 +166,7 @@ inline void\n PB_DS_CLASS_C_DEC::\n fix_root(node_pointer p_y)\n {\n-  _GLIBCXX_DEBUG_ASSERT(p_y->m_p_prev_or_parent == NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_y->m_p_prev_or_parent == 0);\n \n   make_root(p_y);\n \n@@ -178,18 +178,18 @@ inline void\n PB_DS_CLASS_C_DEC::\n fix_sibling_rank_1_unmarked(node_pointer p_y)\n {\n-  _GLIBCXX_DEBUG_ASSERT(p_y->m_p_prev_or_parent != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_y->m_p_prev_or_parent != 0);\n \n   _GLIBCXX_DEBUG_ONLY(node_pointer p_w = p_y->m_p_l_child;)\n-    _GLIBCXX_DEBUG_ASSERT(p_w != NULL);\n-  _GLIBCXX_DEBUG_ASSERT(p_w->m_p_next_sibling == NULL);\n-  _GLIBCXX_DEBUG_ASSERT(p_y->m_p_next_sibling == NULL);\n+    _GLIBCXX_DEBUG_ASSERT(p_w != 0);\n+  _GLIBCXX_DEBUG_ASSERT(p_w->m_p_next_sibling == 0);\n+  _GLIBCXX_DEBUG_ASSERT(p_y->m_p_next_sibling == 0);\n \n   p_y->m_p_next_sibling = p_y->m_p_l_child;\n \n   p_y->m_p_next_sibling->m_p_prev_or_parent = p_y;\n \n-  p_y->m_p_l_child = NULL;\n+  p_y->m_p_l_child = 0;\n \n   _GLIBCXX_DEBUG_ONLY(assert_node_consistent(p_y, false);)\n     }\n@@ -199,8 +199,8 @@ inline void\n PB_DS_CLASS_C_DEC::\n fix_sibling_rank_1_marked(node_pointer p_y)\n {\n-  _GLIBCXX_DEBUG_ASSERT(p_y->m_p_prev_or_parent != NULL);\n-  _GLIBCXX_DEBUG_ASSERT(p_y->m_p_l_child == NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_y->m_p_prev_or_parent != 0);\n+  _GLIBCXX_DEBUG_ASSERT(p_y->m_p_l_child == 0);\n \n   p_y->m_metadata = 0;\n \n@@ -212,17 +212,17 @@ inline void\n PB_DS_CLASS_C_DEC::\n fix_sibling_general_unmarked(node_pointer p_y)\n {\n-  _GLIBCXX_DEBUG_ASSERT(p_y->m_p_prev_or_parent != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_y->m_p_prev_or_parent != 0);\n \n   node_pointer p_w = p_y->m_p_l_child;\n-  _GLIBCXX_DEBUG_ASSERT(p_w != NULL);\n-  _GLIBCXX_DEBUG_ASSERT(p_w->m_p_next_sibling != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_w != 0);\n+  _GLIBCXX_DEBUG_ASSERT(p_w->m_p_next_sibling != 0);\n \n   p_y->m_p_l_child = p_w->m_p_next_sibling;\n   p_w->m_p_next_sibling->m_p_prev_or_parent = p_y;\n \n   p_w->m_p_next_sibling = p_y->m_p_next_sibling;\n-  _GLIBCXX_DEBUG_ASSERT(p_w->m_p_next_sibling != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_w->m_p_next_sibling != 0);\n   p_w->m_p_next_sibling->m_p_prev_or_parent = p_w;\n \n   p_y->m_p_next_sibling = p_w;\n@@ -236,7 +236,7 @@ inline void\n PB_DS_CLASS_C_DEC::\n fix_sibling_general_marked(node_pointer p_y)\n {\n-  _GLIBCXX_DEBUG_ASSERT(p_y->m_p_prev_or_parent != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_y->m_p_prev_or_parent != 0);\n \n   --p_y->m_metadata;\n \n@@ -248,9 +248,9 @@ inline void\n PB_DS_CLASS_C_DEC::\n fix_child(node_pointer p_y)\n {\n-  _GLIBCXX_DEBUG_ASSERT(p_y->m_p_prev_or_parent != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_y->m_p_prev_or_parent != 0);\n \n-  if (p_y->m_p_next_sibling != NULL)\n+  if (p_y->m_p_next_sibling != 0)\n     p_y->m_p_next_sibling->m_p_prev_or_parent = p_y->m_p_prev_or_parent;\n \n   if (p_y->m_p_prev_or_parent->m_p_l_child == p_y)\n@@ -269,7 +269,7 @@ modify(point_iterator it, const_reference r_new_val)\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     node_pointer p_nd = it.m_p_nd;\n \n-  _GLIBCXX_DEBUG_ASSERT(p_nd != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd != 0);\n \n   const bool smaller = Cmp_Fn::operator()(r_new_val, p_nd->m_value);\n \n@@ -279,7 +279,7 @@ modify(point_iterator it, const_reference r_new_val)\n     {\n       remove_node(p_nd);\n \n-      p_nd->m_p_l_child = NULL;\n+      p_nd->m_p_l_child = 0;\n \n       make_root_and_link(p_nd);\n \n@@ -288,7 +288,7 @@ modify(point_iterator it, const_reference r_new_val)\n         return;\n     }\n \n-  if (p_nd->m_p_prev_or_parent == NULL)\n+  if (p_nd->m_p_prev_or_parent == 0)\n     {\n       update_max(p_nd);\n \n@@ -298,9 +298,9 @@ modify(point_iterator it, const_reference r_new_val)\n     }\n \n   node_pointer p_y = p_nd->m_p_prev_or_parent;\n-  _GLIBCXX_DEBUG_ASSERT(p_y != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_y != 0);\n \n-  if (p_nd->m_p_next_sibling != NULL)\n+  if (p_nd->m_p_next_sibling != 0)\n     p_nd->m_p_next_sibling->m_p_prev_or_parent = p_y;\n \n   if (p_y->m_p_l_child == p_nd)\n@@ -320,7 +320,7 @@ inline void\n PB_DS_CLASS_C_DEC::\n update_max(node_pointer p_nd)\n {\n-  if (m_p_max == NULL || Cmp_Fn::operator()(m_p_max->m_value, p_nd->m_value))\n+  if (m_p_max == 0 || Cmp_Fn::operator()(m_p_max->m_value, p_nd->m_value))\n     m_p_max = p_nd;\n }\n "}, {"sha": "85ebe4cb400dbaf1069d6e8b642dd6165bdc81a7", "filename": "libstdc++-v3/include/ext/pb_ds/detail/thin_heap_/split_join_fn_imps.hpp", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fsplit_join_fn_imps.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -61,7 +61,7 @@ split(Pred pred, PB_DS_CLASS_C_DEC& other)\n \n   node_pointer p_out = base_type::prune(pred);\n \n-  while (p_out != NULL)\n+  while (p_out != 0)\n     {\n       _GLIBCXX_DEBUG_ASSERT(base_type::m_size > 0);\n       --base_type::m_size;\n@@ -79,11 +79,11 @@ split(Pred pred, PB_DS_CLASS_C_DEC& other)\n \n     node_pointer p_cur = base_type::m_p_root;\n \n-  m_p_max = NULL;\n+  m_p_max = 0;\n \n-  base_type::m_p_root = NULL;\n+  base_type::m_p_root = 0;\n \n-  while (p_cur != NULL)\n+  while (p_cur != 0)\n     {\n       node_pointer p_next = p_cur->m_p_next_sibling;\n \n@@ -106,7 +106,7 @@ join(PB_DS_CLASS_C_DEC& other)\n \n     node_pointer p_other = other.m_p_root;\n \n-  while (p_other != NULL)\n+  while (p_other != 0)\n     {\n       node_pointer p_next = p_other->m_p_next_sibling;\n \n@@ -117,9 +117,9 @@ join(PB_DS_CLASS_C_DEC& other)\n \n   base_type::m_size += other.m_size;\n \n-  other.m_p_root = NULL;\n+  other.m_p_root = 0;\n   other.m_size = 0;\n-  other.m_p_max = NULL;\n+  other.m_p_max = 0;\n \n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     _GLIBCXX_DEBUG_ONLY(other.assert_valid();)"}, {"sha": "b8c19a587f8b04bf18011378e32206d8279784e1", "filename": "libstdc++-v3/include/ext/pb_ds/detail/tree_policy/sample_tree_node_update.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftree_policy%2Fsample_tree_node_update.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftree_policy%2Fsample_tree_node_update.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftree_policy%2Fsample_tree_node_update.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -56,7 +56,7 @@ class sample_tree_node_update\n public:\n \n   // Metadata type.\n-  typedef size_t metadata_type;\n+  typedef std::size_t metadata_type;\n \n protected:\n "}, {"sha": "2ecad89c9a73ae4e9417151e8df604e5e7d32216", "filename": "libstdc++-v3/include/ext/pb_ds/detail/trie_policy/sample_trie_e_access_traits.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Fsample_trie_e_access_traits.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Fsample_trie_e_access_traits.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Fsample_trie_e_access_traits.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -48,7 +48,7 @@ class sample_trie_e_access_traits\n public:\n \n   // Size type.\n-  typedef size_t size_type;\n+  typedef std::size_t size_type;\n \n   // Key type.\n   typedef std::string key_type;"}, {"sha": "8b2c6b591f74f07cae20e14a56f446815b6c0a2f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/trie_policy/sample_trie_node_update.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Fsample_trie_node_update.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Fsample_trie_node_update.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Fsample_trie_node_update.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -56,7 +56,7 @@ class sample_trie_node_update\n public:\n \n   // Metadata type.\n-  typedef size_t metadata_type;\n+  typedef std::size_t metadata_type;\n \n protected:\n "}, {"sha": "71e262617940ecf90bd15bb26f8cae994debb50e", "filename": "libstdc++-v3/include/ext/pb_ds/detail/unordered_iterator/const_iterator.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fconst_iterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fconst_iterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fconst_iterator.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -74,7 +74,7 @@ class const_iterator_ :\n   inline\n   const_iterator_()\n \n-    : m_p_tbl(NULL)\n+    : m_p_tbl(0)\n   { }\n \n   // Increments."}, {"sha": "5574b28e1e19c0fa1051a96d2fee460d8a4e9114", "filename": "libstdc++-v3/include/ext/pb_ds/detail/unordered_iterator/const_point_iterator.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fconst_point_iterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fconst_point_iterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fconst_point_iterator.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -78,7 +78,7 @@ class const_point_iterator_\n   inline\n   const_point_iterator_()\n \n-    : m_p_value(NULL)\n+    : m_p_value(0)\n   { }\n \n   // Copy constructor.\n@@ -99,7 +99,7 @@ class const_point_iterator_\n   inline const_pointer\n   operator->() const\n   {\n-    _GLIBCXX_DEBUG_ASSERT(m_p_value != NULL);\n+    _GLIBCXX_DEBUG_ASSERT(m_p_value != 0);\n \n     return (m_p_value);\n   }\n@@ -108,7 +108,7 @@ class const_point_iterator_\n   inline const_reference\n   operator*() const\n   {\n-    _GLIBCXX_DEBUG_ASSERT(m_p_value != NULL);\n+    _GLIBCXX_DEBUG_ASSERT(m_p_value != 0);\n \n     return (*m_p_value);\n   }"}, {"sha": "2836c17bea5114789232a87301784dc15a42402b", "filename": "libstdc++-v3/include/ext/pb_ds/detail/unordered_iterator/iterator.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fiterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fiterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fiterator.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -74,7 +74,7 @@ class iterator_ :\n   inline\n   iterator_()\n \n-    : const_iterator_(NULL, PB_DS_GEN_POS(), NULL)\n+    : const_iterator_(0, PB_DS_GEN_POS(), 0)\n   { }\n \n   // Conversion to a point-type iterator.\n@@ -97,7 +97,7 @@ class iterator_ :\n   inline pointer\n   operator->() const\n   {\n-    _GLIBCXX_DEBUG_ASSERT(base_type::m_p_value != NULL);\n+    _GLIBCXX_DEBUG_ASSERT(base_type::m_p_value != 0);\n \n     return (const_cast<pointer>(base_type::m_p_value));\n   }\n@@ -106,7 +106,7 @@ class iterator_ :\n   inline reference\n   operator*() const\n   {\n-    _GLIBCXX_DEBUG_ASSERT(base_type::m_p_value != NULL);\n+    _GLIBCXX_DEBUG_ASSERT(base_type::m_p_value != 0);\n \n     return (const_cast<reference>(*base_type::m_p_value));\n   }"}, {"sha": "c009106e0dde6d5431879677ed13773b61cba1cc", "filename": "libstdc++-v3/include/ext/pb_ds/detail/unordered_iterator/point_iterator.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fpoint_iterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fpoint_iterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fpoint_iterator.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -72,7 +72,7 @@ class point_iterator_\n   inline\n   point_iterator_()\n \n-    : m_p_value(NULL)\n+    : m_p_value(0)\n   { }\n \n   // Copy constructor.\n@@ -86,7 +86,7 @@ class point_iterator_\n   inline pointer\n   operator->() const\n   {\n-    _GLIBCXX_DEBUG_ASSERT(m_p_value != NULL);\n+    _GLIBCXX_DEBUG_ASSERT(m_p_value != 0);\n \n     return (m_p_value);\n   }\n@@ -95,7 +95,7 @@ class point_iterator_\n   inline reference\n   operator*() const\n   {\n-    _GLIBCXX_DEBUG_ASSERT(m_p_value != NULL);\n+    _GLIBCXX_DEBUG_ASSERT(m_p_value != 0);\n \n     return (*m_p_value);\n   }"}, {"sha": "b34e3ed26f220f69d7ac8adb1d3f42c8f654b948", "filename": "libstdc++-v3/include/ext/pb_ds/exception.hpp", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fexception.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fexception.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fexception.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,7 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -41,6 +42,7 @@\n #ifndef PB_DS_EXCEPTION_HPP\n #define PB_DS_EXCEPTION_HPP\n \n+#include <bits/c++config.h>\n #include <stdexcept>\n #include <cstdlib>\n "}, {"sha": "f3bc86e97314cc176355b02b64eca1d22b988f64", "filename": "libstdc++-v3/include/ext/pb_ds/hash_policy.hpp", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fhash_policy.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fhash_policy.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fhash_policy.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -41,6 +41,7 @@\n #ifndef PB_DS_HASH_POLICY_HPP\n #define PB_DS_HASH_POLICY_HPP\n \n+#include <bits/c++config.h>\n #include <algorithm>\n #include <vector>\n #include <cmath>\n@@ -66,7 +67,7 @@ namespace __gnu_pbds\n #define PB_DS_CLASS_C_DEC linear_probe_fn<Size_Type>\n \n   // A probe sequence policy using fixed increments.\n-  template<typename Size_Type = size_t>\n+  template<typename Size_Type = std::size_t>\n   class linear_probe_fn\n   {\n   public:\n@@ -90,7 +91,7 @@ namespace __gnu_pbds\n #define PB_DS_CLASS_C_DEC quadratic_probe_fn<Size_Type>\n \n   // A probe sequence policy using square increments.\n-  template<typename Size_Type = size_t>\n+  template<typename Size_Type = std::size_t>\n   class quadratic_probe_fn\n   {\n   public:\n@@ -114,7 +115,7 @@ namespace __gnu_pbds\n #define PB_DS_CLASS_C_DEC direct_mask_range_hashing<Size_Type>\n \n   // A mask range-hashing class (uses a bit-mask).\n-  template<typename Size_Type = size_t>\n+  template<typename Size_Type = std::size_t>\n   class direct_mask_range_hashing \n   : public detail::mask_based_range_hashing<Size_Type>\n   {\n@@ -146,7 +147,7 @@ namespace __gnu_pbds\n #define PB_DS_CLASS_C_DEC direct_mod_range_hashing<Size_Type>\n \n   // A mod range-hashing class (uses the modulo function).\n-  template<typename Size_Type = size_t>\n+  template<typename Size_Type = std::size_t>\n   class direct_mod_range_hashing \n   : public detail::mod_based_range_hashing<Size_Type>\n   {\n@@ -180,7 +181,7 @@ namespace __gnu_pbds\n \n   // A resize trigger policy based on a load check. It keeps the\n   // load factor between some load factors load_min and load_max.\n-  template<bool External_Load_Access = false, typename Size_Type = size_t>\n+  template<bool External_Load_Access = false, typename Size_Type = std::size_t>\n   class hash_load_check_resize_trigger : private PB_DS_SIZE_BASE_C_DEC\n   {\n   public:\n@@ -295,7 +296,7 @@ namespace __gnu_pbds\n \n   // A resize trigger policy based on collision checks. It keeps the\n   // simulated load factor lower than some given load factor.\n-  template<bool External_Load_Access = false, typename Size_Type = size_t>\n+  template<bool External_Load_Access = false, typename Size_Type = std::size_t>\n   class cc_hash_max_collision_check_resize_trigger\n   {\n   public:\n@@ -396,7 +397,7 @@ namespace __gnu_pbds\n \n   // A size policy whose sequence of sizes form an exponential\n   // sequence (typically powers of 2.\n-  template<typename Size_Type = size_t>\n+  template<typename Size_Type = std::size_t>\n   class hash_exponential_size_policy\n   {\n   public:\n@@ -438,7 +439,7 @@ namespace __gnu_pbds\n   {\n   public:\n     // Size type.\n-    typedef size_t size_type;\n+    typedef std::size_t size_type;\n \n     // Default constructor, or onstructor taking a start_size The\n     // policy will use the sequence of sizes approximately\n@@ -472,7 +473,7 @@ namespace __gnu_pbds\n   template<typename Size_Policy = hash_exponential_size_policy<>,\n \t   typename Trigger_Policy = hash_load_check_resize_trigger<>,\n \t   bool External_Size_Access = false,\n-\t   typename Size_Type = size_t>\n+\t   typename Size_Type = std::size_t>\n   class hash_standard_resize_policy \n   : public Size_Policy, public Trigger_Policy\n   {"}, {"sha": "54a67c6e563b0cab095bb9083352431bcfb61590", "filename": "libstdc++-v3/include/ext/pb_ds/list_update_policy.hpp", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Flist_update_policy.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Flist_update_policy.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Flist_update_policy.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,7 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2009, 2010\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -41,6 +42,7 @@\n #ifndef PB_DS_LU_POLICY_HPP\n #define PB_DS_LU_POLICY_HPP\n \n+#include <bits/c++config.h>\n #include <cstdlib>\n #include <ext/pb_ds/detail/list_update_policy/counter_lu_metadata.hpp>\n \n@@ -87,12 +89,13 @@ namespace __gnu_pbds\n #undef PB_DS_CLASS_T_DEC\n #undef PB_DS_CLASS_C_DEC\n \n-#define PB_DS_CLASS_T_DEC template<size_t Max_Count, class Allocator>\n+#define PB_DS_CLASS_T_DEC template<std::size_t Max_Count, class Allocator>\n #define PB_DS_CLASS_C_DEC counter_lu_policy<Max_Count, Allocator>\n \n   // A list-update policy that moves elements to the front of the list\n   // based on the counter algorithm.\n-  template<size_t Max_Count = 5, typename Allocator = std::allocator<char> >\n+  template<std::size_t Max_Count = 5,\n+\t   typename Allocator = std::allocator<char> >\n   class counter_lu_policy \n   : private detail::counter_lu_policy_base<typename Allocator::size_type>\n   {"}, {"sha": "b6088e7d73a2ceb3ebe2bae4fcc6e6832fcfb866", "filename": "libstdc++-v3/include/ext/pb_ds/priority_queue.hpp", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fpriority_queue.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fpriority_queue.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fpriority_queue.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -41,6 +41,7 @@\n #ifndef PB_DS_PRIORITY_QUEUE_HPP\n #define PB_DS_PRIORITY_QUEUE_HPP\n \n+#include <bits/c++config.h>\n #include <ext/pb_ds/tag_and_trait.hpp>\n #include <ext/pb_ds/detail/priority_queue_base_dispatch.hpp>\n #include <ext/pb_ds/detail/standard_policies.hpp>\n@@ -53,10 +54,13 @@ namespace __gnu_pbds\n \t   typename Tag = pairing_heap_tag,\n \t   typename Allocator = std::allocator<char> >\n   class priority_queue \n-  : public detail::priority_queue_base_dispatch<Value_Type,Cmp_Fn,Tag,Allocator>::type\n+  : public detail::priority_queue_base_dispatch<Value_Type,\n+\t\t\t\t\t\tCmp_Fn,Tag,Allocator>::type\n   {\n   private:\n-    typedef typename detail::priority_queue_base_dispatch<Value_Type,Cmp_Fn,Tag,Allocator>::type base_type;\n+    typedef typename\n+    detail::priority_queue_base_dispatch<Value_Type, Cmp_Fn,\n+\t\t\t\t\t Tag, Allocator>::type base_type;\n \n   public:\n     typedef Value_Type \t\t\t\t\tvalue_type;"}, {"sha": "ef445336137d6f7bd16ab51198742b74c6815a5b", "filename": "libstdc++-v3/include/ext/pb_ds/tag_and_trait.hpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Ftag_and_trait.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Ftag_and_trait.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Ftag_and_trait.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -42,6 +42,7 @@\n #ifndef PB_DS_TAG_AND_TRAIT_HPP\n #define PB_DS_TAG_AND_TRAIT_HPP\n \n+#include <bits/c++config.h>\n #include <ext/pb_ds/detail/type_utils.hpp>\n \n /**"}, {"sha": "4af1adbde707cfa1c118ddb0dc2ae248fe6254ab", "filename": "libstdc++-v3/include/ext/pb_ds/tree_policy.hpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Ftree_policy.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Ftree_policy.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Ftree_policy.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -41,6 +41,7 @@\n #ifndef PB_DS_TREE_POLICY_HPP\n #define PB_DS_TREE_POLICY_HPP\n \n+#include <bits/c++config.h>\n #include <iterator>\n #include <ext/pb_ds/detail/type_utils.hpp>\n #include <ext/pb_ds/detail/basic_tree_policy/basic_tree_policy_base.hpp>"}, {"sha": "fc452104f75aacb3b917fb96fb1b1e78ad86d521", "filename": "libstdc++-v3/include/ext/pb_ds/trie_policy.hpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Ftrie_policy.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Ftrie_policy.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Ftrie_policy.hpp?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -41,6 +41,7 @@\n #ifndef PB_DS_TRIE_POLICY_HPP\n #define PB_DS_TRIE_POLICY_HPP\n \n+#include <bits/c++config.h>\n #include <string>\n #include <ext/pb_ds/detail/type_utils.hpp>\n #include <ext/pb_ds/detail/trie_policy/trie_policy_base.hpp>"}, {"sha": "dd18738dc57af2e4ddbbb1f0339071e3833e6af7", "filename": "libstdc++-v3/include/ext/rc_string_base.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -554,7 +554,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t// NB: Not required, but considered best practice.\n \tif (__is_null_pointer(__beg) && __beg != __end)\n \t  std::__throw_logic_error(__N(\"__rc_string_base::\"\n-\t\t\t\t       \"_S_construct NULL not valid\"));\n+\t\t\t\t       \"_S_construct null not valid\"));\n \n \tconst size_type __dnew = static_cast<size_type>(std::distance(__beg,\n \t\t\t\t\t\t\t\t      __end));"}, {"sha": "43d44528999e83e81211bf9d2ee7d2a5ef0b7d11", "filename": "libstdc++-v3/include/ext/sso_string_base.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -434,7 +434,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t// NB: Not required, but considered best practice.\n \tif (__is_null_pointer(__beg) && __beg != __end)\n \t  std::__throw_logic_error(__N(\"__sso_string_base::\"\n-\t\t\t\t       \"_M_construct NULL not valid\"));\n+\t\t\t\t       \"_M_construct null not valid\"));\n \n \tsize_type __dnew = static_cast<size_type>(std::distance(__beg, __end));\n "}, {"sha": "a4276f30ba2cfe86fb3e1b0c97445716dbcc3401", "filename": "libstdc++-v3/include/ext/string_conversions.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstring_conversions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstring_conversions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstring_conversions.h?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // String Conversions -*- C++ -*-\n \n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,9 +27,9 @@\n \n #pragma GCC system_header\n \n+#include <bits/c++config.h>\n #include <ext/numeric_traits.h>\n #include <bits/functexcept.h>\n-#include <cstddef>\n #include <cstdlib>\n #include <cwchar>\n #include <cstdio>"}, {"sha": "669d433e27295edac9a80ab42f06bd8f8962602a", "filename": "libstdc++-v3/include/ext/throw_allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -110,7 +110,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     void\n     insert(void* p, size_t size)\n     {\n-      if (p == NULL)\n+      if (!p)\n \t{\n \t  std::string error(\"annotate_base::insert null insert!\\n\");\n \t  log_to_string(error, make_entry(p, size));"}, {"sha": "7bff97f7706af6867edba2c73e449c7503c6d21c", "filename": "libstdc++-v3/include/parallel/base.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -267,8 +267,8 @@ namespace __gnu_parallel\n \n   /** @brief Similar to std::plus, but allows two different types. */\n   template<typename _Tp1, typename _Tp2, typename _Result\n-\t   = __typeof__(*static_cast<_Tp1*>(NULL)\n-\t\t\t+ *static_cast<_Tp2*>(NULL))>\n+\t   = __typeof__(*static_cast<_Tp1*>(0)\n+\t\t\t+ *static_cast<_Tp2*>(0))>\n     struct _Plus : public std::binary_function<_Tp1, _Tp2, _Result>\n     {\n       _Result\n@@ -283,8 +283,8 @@ namespace __gnu_parallel\n \n   /** @brief Similar to std::multiplies, but allows two different types. */\n   template<typename _Tp1, typename _Tp2, typename _Result\n-\t   = __typeof__(*static_cast<_Tp1*>(NULL)\n-\t\t\t* *static_cast<_Tp2*>(NULL))>\n+\t   = __typeof__(*static_cast<_Tp1*>(0)\n+\t\t\t* *static_cast<_Tp2*>(0))>\n     struct _Multiplies : public std::binary_function<_Tp1, _Tp2, _Result>\n     {\n       _Result"}, {"sha": "a624edc1a3b5936fe59102ceb5f29cb801c7064a", "filename": "libstdc++-v3/include/parallel/basic_iterator.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbasic_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbasic_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbasic_iterator.h?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2007, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -34,7 +34,6 @@\n #define _GLIBCXX_PARALLEL_BASIC_ITERATOR_H 1\n \n #include <bits/c++config.h>\n-#include <cstddef>\n #include <bits/stl_iterator_base_types.h>\n #include <bits/stl_iterator_base_funcs.h>\n #include <bits/stl_iterator.h>"}, {"sha": "e77653aeefa8b97cdefe15ec88254e2da496f87b", "filename": "libstdc++-v3/include/parallel/multiseq_selection.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiseq_selection.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiseq_selection.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiseq_selection.h?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -230,7 +230,7 @@ namespace __gnu_parallel\n           __n /= 2;\n \n           _SeqNumber __lmax_seq = -1;  // to avoid warning\n-          const _ValueType* __lmax = NULL; // impossible to avoid the warning?\n+          const _ValueType* __lmax = 0; // impossible to avoid the warning?\n           for (_SeqNumber __i = 0; __i < __m; __i++)\n             {\n               if (__a[__i] > 0)\n@@ -332,8 +332,8 @@ namespace __gnu_parallel\n       // Compare the keys on both edges of the border.\n \n       // Maximum of left edge, minimum of right edge.\n-      _ValueType* __maxleft = NULL;\n-      _ValueType* __minright = NULL;\n+      _ValueType* __maxleft = 0;\n+      _ValueType* __minright = 0;\n       for (_SeqNumber __i = 0; __i < __m; __i++)\n         {\n           if (__a[__i] > 0)\n@@ -482,7 +482,7 @@ namespace __gnu_parallel\n         {\n           __n /= 2;\n \n-          const _Tp* __lmax = NULL;\n+          const _Tp* __lmax = 0;\n           for (_SeqNumber __i = 0; __i < __m; ++__i)\n             {\n               if (__a[__i] > 0)"}, {"sha": "1baf76beb9ca0d411e64972554c1344c4ef2b931", "filename": "libstdc++-v3/include/parallel/multiway_merge.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -502,11 +502,11 @@ namespace __gnu_parallel\n       _LT __lt(__k, __comp);\n \n       // Default value for potentially non-default-constructible types.\n-      _ValueType* __arbitrary_element = NULL;\n+      _ValueType* __arbitrary_element = 0;\n \n       for (_SeqNumber __t = 0; __t < __k; ++__t)\n \t{\n-          if(__arbitrary_element == NULL\n+          if(!__arbitrary_element\n \t     && _GLIBCXX_PARALLEL_LENGTH(__seqs_begin[__t]) > 0)\n             __arbitrary_element = &(*__seqs_begin[__t].first);\n \t}"}, {"sha": "8e2c53ec661e9255bbf6e70bc610559cffa96a78", "filename": "libstdc++-v3/include/parallel/multiway_mergesort.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_mergesort.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_mergesort.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_mergesort.h?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -434,7 +434,7 @@ namespace __gnu_parallel\n \t\t(::operator new(__size * sizeof(_ValueType)));\n \t    }\n \t  else\n-\t    __sd._M_samples = NULL;\n+\t    __sd._M_samples = 0;\n \n \t  __sd._M_offsets = new _DifferenceType[__num_threads - 1];\n \t  __sd._M_pieces"}, {"sha": "27b3871f41b0ea868e0e5c7213a9b93b94575ffb", "filename": "libstdc++-v3/include/parallel/partition.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartition.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartition.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartition.h?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -73,7 +73,7 @@ namespace __gnu_parallel\n                                         __leftnew, __rightnew;\n \n       // just 0 or 1, but int to allow atomic operations\n-      int* __reserved_left = NULL, * __reserved_right = NULL;\n+      int* __reserved_left = 0, * __reserved_right = 0;\n \n       _DifferenceType __chunk_size = __s.partition_chunk_size;\n "}, {"sha": "97bb061300a7370824e3ca73bd066be2e4578e54", "filename": "libstdc++-v3/include/profile/impl/profiler_node.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_node.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_node.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_node.h?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n //\n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -65,14 +65,14 @@ inline __stack_t __get_stack()\n #if defined _GLIBCXX_HAVE_EXECINFO_H\n   size_t __max_depth = __stack_max_depth();\n   if (__max_depth == 0)\n-    return NULL;\n+    return 0;\n   __stack_npt __buffer(__max_depth);\n   int __depth = backtrace(&__buffer[0], __max_depth);\n   __stack_t __stack = new __stack_npt(__depth);\n   memcpy(&(*__stack)[0], &__buffer[0], __depth * sizeof(__object_t));\n   return __stack;\n #else\n-  return NULL;\n+  return 0;\n #endif\n }\n "}, {"sha": "19a2a8273ef6103e2fce200ee5db435ff397f903", "filename": "libstdc++-v3/include/profile/impl/profiler_trace.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_trace.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_trace.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_trace.h?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -87,8 +87,8 @@ struct __warning_data\n   const char* __warning_id;\n   const char* __warning_message;\n   __warning_data()\n-  : __magnitude(0.0), __context(NULL), __warning_id(NULL),\n-    __warning_message(NULL) { }\n+  : __magnitude(0.0), __context(0), __warning_id(0),\n+    __warning_message(0) { }\n   __warning_data(float __m, __stack_t __c, const char* __id, \n                  const char* __msg)\n   : __magnitude(__m), __context(__c), __warning_id(__id), \n@@ -141,13 +141,13 @@ struct __cost_factor\n \n typedef std::_GLIBCXX_STD_PR::vector<__cost_factor*> __cost_factor_vector;\n \n-_GLIBCXX_PROFILE_DEFINE_DATA(__trace_hash_func*, _S_hash_func, NULL);\n-_GLIBCXX_PROFILE_DEFINE_DATA(__trace_hashtable_size*, _S_hashtable_size, NULL);\n-_GLIBCXX_PROFILE_DEFINE_DATA(__trace_map2umap*, _S_map2umap, NULL);\n-_GLIBCXX_PROFILE_DEFINE_DATA(__trace_vector_size*, _S_vector_size, NULL);\n-_GLIBCXX_PROFILE_DEFINE_DATA(__trace_vector_to_list*, _S_vector_to_list, NULL);\n-_GLIBCXX_PROFILE_DEFINE_DATA(__trace_list_to_slist*, _S_list_to_slist, NULL); \n-_GLIBCXX_PROFILE_DEFINE_DATA(__trace_list_to_vector*, _S_list_to_vector, NULL);\n+_GLIBCXX_PROFILE_DEFINE_DATA(__trace_hash_func*, _S_hash_func, 0);\n+_GLIBCXX_PROFILE_DEFINE_DATA(__trace_hashtable_size*, _S_hashtable_size, 0);\n+_GLIBCXX_PROFILE_DEFINE_DATA(__trace_map2umap*, _S_map2umap, 0);\n+_GLIBCXX_PROFILE_DEFINE_DATA(__trace_vector_size*, _S_vector_size, 0);\n+_GLIBCXX_PROFILE_DEFINE_DATA(__trace_vector_to_list*, _S_vector_to_list, 0);\n+_GLIBCXX_PROFILE_DEFINE_DATA(__trace_list_to_slist*, _S_list_to_slist, 0); \n+_GLIBCXX_PROFILE_DEFINE_DATA(__trace_list_to_vector*, _S_list_to_vector, 0);\n \n _GLIBCXX_PROFILE_DEFINE_DATA(__cost_factor, __vector_shift_cost_factor, \n                              {\"__vector_shift_cost_factor\", 1.0});\n@@ -177,7 +177,7 @@ _GLIBCXX_PROFILE_DEFINE_DATA(__cost_factor, __umap_find_cost_factor,\n                              {\"__umap_find_cost_factor\", 10.0});\n _GLIBCXX_PROFILE_DEFINE_DATA(__cost_factor, __umap_iterate_cost_factor,\n                              {\"__umap_iterate_cost_factor\", 1.7});\n-_GLIBCXX_PROFILE_DEFINE_DATA(__cost_factor_vector*, __cost_factors, NULL);\n+_GLIBCXX_PROFILE_DEFINE_DATA(__cost_factor_vector*, __cost_factors, 0);\n \n _GLIBCXX_PROFILE_DEFINE_DATA(const char*, _S_trace_file_name,\n                              _GLIBCXX_PROFILE_TRACE_PATH_ROOT);\n@@ -249,7 +249,7 @@ __trace_base<__object_info, __stack_info>::__trace_base()\n   __object_table.rehash(10000);\n   __stack_table.rehash(10000);\n   __stack_table_byte_size = 0;\n-  __id = NULL;\n+  __id = 0;\n }\n \n template <typename __object_info, typename __stack_info>\n@@ -277,7 +277,7 @@ __object_info* __trace_base<__object_info, __stack_info>::__get_object_info(\n       __object_table.find(__object);\n   if (__object_it == __object_table.end()){\n     this->__object_table_lock.unlock();\n-    return NULL;\n+    return 0;\n   } else {\n     this->__object_table_lock.unlock();\n     return &__object_it->second;\n@@ -336,7 +336,7 @@ inline size_t __env_to_size_t(const char* __env_var, size_t __default_value)\n {\n   char* __env_value = getenv(__env_var);\n   if (__env_value) {\n-    long int __converted_value = strtol(__env_value, NULL, 10);\n+    long int __converted_value = strtol(__env_value, 0, 10);\n     if (errno || __converted_value < 0) {\n       fprintf(stderr, \"Bad value for environment variable '%s'.\\n\", __env_var);\n       abort();"}, {"sha": "d4f685ced547fa09f3b4d42a91530f0906f5fba5", "filename": "libstdc++-v3/include/std/atomic", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -38,8 +38,8 @@\n # include <bits/c++0x_warning.h>\n #endif\n \n+#include <bits/c++config.h>\n #include <bits/atomic_base.h>\n-#include <cstddef>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n "}, {"sha": "32ca091706221332b223e508cd2663956af6836d", "filename": "libstdc++-v3/include/std/bitset", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -45,7 +45,6 @@\n \n #pragma GCC system_header\n \n-#include <cstddef>     // For size_t\n #include <string>\n #include <bits/functexcept.h>   // For invalid_argument, out_of_range,\n                                 // overflow_error"}, {"sha": "00690bee9384c012d99466e755f36dd5dd91e413", "filename": "libstdc++-v3/include/std/fstream", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -397,7 +397,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \tif (__testout && __off == 0 && _M_buf_size > 1 )\n \t  this->setp(_M_buf, _M_buf + _M_buf_size - 1);\n \telse\n-\t  this->setp(NULL, NULL);\n+\t  this->setp(0, 0);\n       }\n     };\n \n@@ -795,7 +795,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       explicit\n       basic_fstream(const char* __s,\n \t\t    ios_base::openmode __mode = ios_base::in | ios_base::out)\n-      : __iostream_type(NULL), _M_filebuf()\n+      : __iostream_type(0), _M_filebuf()\n       {\n \tthis->init(&_M_filebuf);\n \tthis->open(__s, __mode);\n@@ -810,7 +810,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       explicit\n       basic_fstream(const std::string& __s,\n \t\t    ios_base::openmode __mode = ios_base::in | ios_base::out)\n-      : __iostream_type(NULL), _M_filebuf()\n+      : __iostream_type(0), _M_filebuf()\n       {\n \tthis->init(&_M_filebuf);\n \tthis->open(__s, __mode);"}, {"sha": "5395106ae6aa9919b4ccfd25858ecbc140747048", "filename": "libstdc++-v3/include/std/iterator", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiterator", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiterator", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiterator?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // <iterator> -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -58,7 +58,6 @@\n #pragma GCC system_header\n \n #include <bits/c++config.h>\n-#include <cstddef>\n #include <bits/stl_iterator_base_types.h>\n #include <bits/stl_iterator_base_funcs.h>\n #include <bits/stl_iterator.h>"}, {"sha": "b236f0db91d73324308ecac460d3f553edc566dc", "filename": "libstdc++-v3/include/std/mutex", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -37,7 +37,6 @@\n #else\n \n #include <tuple>\n-#include <cstddef>\n #include <chrono>\n #include <exception>\n #include <type_traits>"}, {"sha": "c348c76bc40ee518c5fff298776e00b755d77abc", "filename": "libstdc++-v3/include/std/thread", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -40,7 +40,6 @@\n #include <memory>\n #include <mutex>\n #include <condition_variable>\n-#include <cstddef>\n #include <bits/functexcept.h>\n #include <bits/functional_hash.h>\n #include <bits/gthr.h>"}, {"sha": "3253f419645b729566cbb2924ecf2a7fc58da4d1", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -39,7 +39,7 @@\n #  error C++0x header cannot be included from TR1 header\n #endif\n \n-#include <cstddef>\n+#include <bits/c++config.h>\n \n #if defined(_GLIBCXX_INCLUDE_AS_CXX0X)\n #  include <tr1_impl/type_traits>"}, {"sha": "f15ac92b0bf76f351ad30dcc1a87755e5415105a", "filename": "libstdc++-v3/include/std/valarray", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,7 +1,7 @@\n // The template and inlines for the -*- C++ -*- valarray class.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009\n+// 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -36,7 +36,6 @@\n #pragma GCC system_header\n \n #include <bits/c++config.h>\n-#include <cstddef>\n #include <cmath>\n #include <algorithm>\n #include <debug/debug.h>"}, {"sha": "33083ff9c7371ee77db331e74856163e6120167b", "filename": "libstdc++-v3/include/tr1/type_traits", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,7 @@\n // TR1 type_traits -*- C++ -*-\n \n-// Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -35,7 +36,7 @@\n #  error TR1 header cannot be included from C++0x header\n #endif\n \n-#include <cstddef>\n+#include <bits/c++config.h>\n \n #if defined(_GLIBCXX_INCLUDE_AS_TR1)\n #  include <tr1_impl/type_traits>"}, {"sha": "f4a8f864259b2db789358299899871b0e41b18c5", "filename": "libstdc++-v3/libsupc++/initializer_list", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Finitializer_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Finitializer_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Finitializer_list?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -36,7 +36,7 @@\n \n #pragma GCC visibility push(default)\n \n-#include <cstddef>\n+#include <bits/c++config.h>\n \n namespace std\n {\n@@ -61,7 +61,7 @@ namespace std\n       : _M_array(__a), _M_len(__l) { }\n \n     public:\n-      initializer_list() : _M_array(NULL), _M_len(0) { }\n+      initializer_list() : _M_array(0), _M_len(0) { }\n \n       // Number of elements.\n       size_type"}, {"sha": "80ee3ba0fd89332e3cc5f8f5254853e5e9b6ef81", "filename": "libstdc++-v3/libsupc++/new", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -38,7 +38,7 @@\n \n #pragma GCC system_header\n \n-#include <cstddef>\n+#include <bits/c++config.h>\n #include <exception>\n \n #pragma GCC visibility push(default)"}, {"sha": "6d7a64d0080416ea9a3a1b9ff397b3824e7c91d8", "filename": "libstdc++-v3/src/chrono.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Fsrc%2Fchrono.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Fsrc%2Fchrono.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fchrono.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // chrono -*- C++ -*-\n \n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -51,7 +51,7 @@ namespace std\n #elif defined(_GLIBCXX_USE_GETTIMEOFDAY)\n       timeval tv;\n       // EINVAL, EFAULT\n-      gettimeofday(&tv, NULL);\n+      gettimeofday(&tv, 0);\n       return time_point(duration(chrono::seconds(tv.tv_sec)\n \t\t\t\t + chrono::microseconds(tv.tv_usec)));\n #else"}, {"sha": "d3f29f657f40fb32a100d0dfff611bfa42a54503", "filename": "libstdc++-v3/src/condition_variable.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Fsrc%2Fcondition_variable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Fsrc%2Fcondition_variable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcondition_variable.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // condition_variable -*- C++ -*-\n \n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -34,7 +34,7 @@ namespace std\n     __native_type __tmp = __GTHREAD_COND_INIT;\n     _M_cond = __tmp;\n #else\n-    int __e = __gthread_cond_init(&_M_cond, NULL);\n+    int __e = __gthread_cond_init(&_M_cond, 0);\n \n     if (__e)\n       __throw_system_error(__e);"}, {"sha": "1dc1d6891c6c2a12a23fa84e14bfdd4d954ca188", "filename": "libstdc++-v3/src/localename.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -137,7 +137,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  }\n       }\n     else\n-      __throw_runtime_error(__N(\"locale::locale NULL not valid\"));\n+      __throw_runtime_error(__N(\"locale::locale null not valid\"));\n   }\n \n   locale::locale(const locale& __base, const char* __s, category __cat)"}, {"sha": "b04fe5b05e447882e223f5f0bb26329a9e1a8cc9", "filename": "libstdc++-v3/src/mt_allocator.cc", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Fsrc%2Fmt_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Fsrc%2Fmt_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fmt_allocator.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // Allocator details.\n \n-// Copyright (C) 2004, 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -150,7 +150,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t__block->_M_next = reinterpret_cast<_Block_record*>(__c);\n \t__block = __block->_M_next;\n       }\n-    __block->_M_next = NULL;\n+    __block->_M_next = 0;\n \n     __block = __bin._M_first[__thread_id];\n     __bin._M_first[__thread_id] = __block->_M_next;\n@@ -206,8 +206,8 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t_Bin_record& __bin = _M_bin[__n];\n \t__v = ::operator new(sizeof(_Block_record*));\n \t__bin._M_first = static_cast<_Block_record**>(__v);\n-\t__bin._M_first[0] = NULL;\n-\t__bin._M_address = NULL;\n+\t__bin._M_first[0] = 0;\n+\t__bin._M_address = 0;\n       }\n     _M_init = true;\n   }\n@@ -362,7 +362,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     //   blocks on global list (and if not add new ones) and\n     //   get the first one.\n     _Bin_record& __bin = _M_bin[__which];\n-    _Block_record* __block = NULL;\n+    _Block_record* __block = 0;\n     if (__gthread_active_p())\n       {\n \t// Resync the _M_used counters.\n@@ -374,7 +374,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t__atomic_add(&__reclaimed_base[__thread_id], -__reclaimed);\n \n \t__gthread_mutex_lock(__bin._M_mutex);\n-\tif (__bin._M_first[0] == NULL)\n+\tif (__bin._M_first[0] == 0)\n \t  {\n \t    void* __v = ::operator new(__options._M_chunk_size);\n \t    _Block_address* __address = static_cast<_Block_address*>(__v);\n@@ -395,7 +395,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t\t__block->_M_next = reinterpret_cast<_Block_record*>(__c);\n \t\t__block = __block->_M_next;\n \t      }\n-\t    __block->_M_next = NULL;\n+\t    __block->_M_next = 0;\n \t  }\n \telse\n \t  {\n@@ -407,7 +407,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t      {\n \t\t__bin._M_free[__thread_id] = __bin._M_free[0];\n \t\t__bin._M_free[0] = 0;\n-\t\t__bin._M_first[0] = NULL;\n+\t\t__bin._M_first[0] = 0;\n \t      }\n \t    else\n \t      {\n@@ -417,7 +417,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t\twhile (--__block_count > 0)\n \t\t  __block = __block->_M_next;\n \t\t__bin._M_first[0] = __block->_M_next;\n-\t\t__block->_M_next = NULL;\n+\t\t__block->_M_next = 0;\n \t      }\n \t    __gthread_mutex_unlock(__bin._M_mutex);\n \t  }\n@@ -439,7 +439,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t    __block->_M_next = reinterpret_cast<_Block_record*>(__c);\n \t    __block = __block->_M_next;\n \t  }\n-\t__block->_M_next = NULL;\n+\t__block->_M_next = 0;\n       }\n       \n     __block = __bin._M_first[__thread_id];\n@@ -527,7 +527,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t\t}\n \n \t      // Set last record.\n-\t      _M_thread_freelist[__i - 1]._M_next = NULL;\n+\t      _M_thread_freelist[__i - 1]._M_next = 0;\n \t      _M_thread_freelist[__i - 1]._M_id = __i;\n \n \t      if (!freelist._M_thread_freelist_array)\n@@ -572,7 +572,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t    std::memset(__v, 0, sizeof(_Block_record*) * __max_threads);    \n \t    __bin._M_first = static_cast<_Block_record**>(__v);\n \n-\t    __bin._M_address = NULL;\n+\t    __bin._M_address = 0;\n \n \t    __v = ::operator new(sizeof(size_t) * __max_threads);\n \t    std::memset(__v, 0, sizeof(size_t) * __max_threads);\n@@ -606,8 +606,8 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t    _Bin_record& __bin = _M_bin[__n];\n \t    __v = ::operator new(sizeof(_Block_record*));\n \t    __bin._M_first = static_cast<_Block_record**>(__v);\n-\t    __bin._M_first[0] = NULL;\n-\t    __bin._M_address = NULL;\n+\t    __bin._M_first[0] = 0;\n+\t    __bin._M_address = 0;\n \t  }\n       }\n     _M_init = true;\n@@ -722,7 +722,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t\t}\n \n \t      // Set last record.\n-\t      _M_thread_freelist[__i - 1]._M_next = NULL;\n+\t      _M_thread_freelist[__i - 1]._M_next = 0;\n \t      _M_thread_freelist[__i - 1]._M_id = __i;\n \n \t      if (!freelist._M_thread_freelist_array)\n@@ -767,7 +767,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t    std::memset(__v, 0, sizeof(_Block_record*) * __max_threads);\n \t    __bin._M_first = static_cast<_Block_record**>(__v);\n \n-\t    __bin._M_address = NULL;\n+\t    __bin._M_address = 0;\n \n \t    __v = ::operator new(sizeof(size_t) * __max_threads);\n \t    std::memset(__v, 0, sizeof(size_t) * __max_threads);\n@@ -800,8 +800,8 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t    _Bin_record& __bin = _M_bin[__n];\n \t    __v = ::operator new(sizeof(_Block_record*));\n \t    __bin._M_first = static_cast<_Block_record**>(__v);\n-\t    __bin._M_first[0] = NULL;\n-\t    __bin._M_address = NULL;\n+\t    __bin._M_first[0] = 0;\n+\t    __bin._M_address = 0;\n \t  }\n       }\n     _M_init = true;"}, {"sha": "2ea6a490735b0e631271e12e9eeee6fb5e10f595", "filename": "libstdc++-v3/src/thread.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Fsrc%2Fthread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Fsrc%2Fthread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fthread.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // thread -*- C++ -*-\n \n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -58,7 +58,7 @@ namespace std\n     int __e = EINVAL;\n \n     if (_M_id != id())\n-      __e = __gthread_join(_M_id._M_thread, NULL);\n+      __e = __gthread_join(_M_id._M_thread, 0);\n \n     if (__e)\n       __throw_system_error(__e);"}, {"sha": "f6c623043cd4fad4145d79b65b5f860e92a7d4b8", "filename": "libstdc++-v3/testsuite/18_support/bad_exception/23591_thread-1.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fbad_exception%2F23591_thread-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fbad_exception%2F23591_thread-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fbad_exception%2F23591_thread-1.c?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,7 +1,7 @@\n // { dg-require-sharedlib \"\" }\n // { dg-options \"-g -O2 -pthread -ldl -x c\" { target *-*-linux* } }\n \n-// Copyright (C) 2005, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,30 +32,30 @@ static void* run(void* arg)\n   void (*cb)();\n \n   lib = dlopen(\"./testsuite_shared.so\", RTLD_NOW);\n-  if (lib == NULL)\n+  if (!lib)\n     {\n       printf(\"dlopen failed: %s\\n\", strerror(errno));\n-      return NULL;\n+      return 0;\n     }\n   cb = (function_type) dlsym(lib, \"try_throw_exception\");\n-  if (cb == NULL)\n+  if (!cb)\n     {\n       printf(\"dlsym failed: %s\\n\", strerror(errno));\n-      return NULL;\n+      return 0;\n     }\n   cb();\n   dlclose(lib);\n-  return NULL;\n+  return 0;\n }\n \n // libstdc++/23591\n int main(void)\n {\n   pthread_t pt;\n \n-  if (pthread_create(&pt, NULL, &run, NULL) != 0)\n+  if (pthread_create(&pt, 0, &run, 0) != 0)\n     return 1;\n-  if (pthread_join(pt, NULL) != 0)\n+  if (pthread_join(pt, 0) != 0)\n     return 1;\n \n   return 0;"}, {"sha": "866a89b79cb45726d128d09a16f771bf631b0c25", "filename": "libstdc++-v3/testsuite/18_support/new_delete_placement.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnew_delete_placement.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnew_delete_placement.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnew_delete_placement.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // 2002-07-24 Benjamin Kosnik\n \n-// Copyright (C) 2002, 2004, 2009 Free Software Foundation\n+// Copyright (C) 2002, 2004, 2009, 2010 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,7 +27,7 @@ void test01()\n {\n   void* pc = new char;\n   void* pa = new char[10];\n-  void* tmp = NULL;\n+  void* tmp = 0;\n   operator delete(pc, tmp);\n   operator delete[](pa, tmp);\n }"}, {"sha": "5389316bab0c88f1fdb0e9e2beb9f86568fa57e2", "filename": "libstdc++-v3/testsuite/18_support/pthread_guard.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fpthread_guard.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fpthread_guard.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fpthread_guard.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,5 +1,5 @@\n //\n-// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -40,18 +40,18 @@ void*\n do_something (void *arg)\n {\n   static int bar __attribute__((unused)) = get_bar ();\n-  return NULL;\n+  return 0;\n }\n \n int\n get_foo (void)\n {\n   pthread_t new_thread;\n \n-  if (pthread_create (&new_thread, NULL, do_something, NULL) != 0)\n+  if (pthread_create (&new_thread, 0, do_something, 0) != 0)\n     std::abort ();\n \n-  if (pthread_join (new_thread, NULL) != 0)\n+  if (pthread_join (new_thread, 0) != 0)\n     std::abort ();\n \n   return 1;"}, {"sha": "5652478f42b07e768f42338d43c4316ab33ecd59", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/char/5.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F5.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // 1999-06-04 bkoz\n \n-// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2009\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -33,7 +33,7 @@ void test05()\n   std::string empty2(empty.begin(), empty.end());\n \n   // libstdc++/8716 (same underlying situation, same fix)\n-  char const * s = NULL;\n+  char const * s = 0;\n   std::string zero_length_built_with_NULL(s,0);\n }\n "}, {"sha": "e72377de66a01953b44424f19e5a80516fcdfd29", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/wchar_t/5.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F5.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // 1999-06-04 bkoz\n \n-// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2009\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -33,7 +33,7 @@ void test05()\n   std::wstring empty2(empty.begin(), empty.end());\n \n   // libstdc++/8716 (same underlying situation, same fix)\n-  wchar_t const * s = NULL;\n+  wchar_t const * s = 0;\n   std::wstring zero_length_built_with_NULL(s,0);\n }\n "}, {"sha": "de0fe168e98219fdb47e42a15283c99ee61e7acb", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/char/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fchar%2F1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2004, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,7 +29,7 @@ int test01(void)\n   // data() for size == 0 is non-NULL.\n   VERIFY( empty.size() == 0 );\n   const std::string::value_type* p = empty.data();\n-  VERIFY( p != NULL );\n+  VERIFY( p );\n \n   return 0;\n }"}, {"sha": "a57464aa5b55c9203b3c2baabb0b27fd6c92d9f3", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/wchar_t/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fwchar_t%2F1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2004, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,7 +29,7 @@ int test01(void)\n   // data() for size == 0 is non-NULL.\n   VERIFY( empty.size() == 0 );\n   const std::wstring::value_type* p = empty.data();\n-  VERIFY( p != NULL );\n+  VERIFY( p );\n \n   return 0;\n }"}, {"sha": "b3dc9b20e7c71792c35af62e562208afe71e8640", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/pthread4.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fpthread4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fpthread4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fpthread4.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -2,7 +2,7 @@\n // Adapted from http://gcc.gnu.org/ml/gcc-bugs/2002-01/msg00679.html\n // which was adapted from pthread1.cc by Mike Lu <MLu@dynamicsoft.com>\n //\n-// Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2009\n+// Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -95,12 +95,12 @@ main (void)\n #endif\n \n   pthread_t prod;\n-  pthread_create (&prod, NULL, produce, NULL);\n+  pthread_create (&prod, 0, produce, 0);\n   pthread_t cons;\n-  pthread_create (&cons, NULL, consume, NULL);\n+  pthread_create (&cons, 0, consume, 0);\n \n-  pthread_join (prod, NULL);\n-  pthread_join (cons, NULL);\n+  pthread_join (prod, 0);\n+  pthread_join (cons, 0);\n \n   return 0;\n }"}, {"sha": "2df9553a35d645602114b1c1028f898743187693", "filename": "libstdc++-v3/testsuite/22_locale/ctype/is/char/1.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fchar%2F1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,4 +1,5 @@\n-// Copyright (C) 2000, 2001, 2002, 2003, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2002, 2003, 2009, 2010\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -84,8 +85,8 @@ void test01()\n   std::ctype_base::mask m01[3];\n   std::ctype_base::mask m02[13];\n   const char_type* cc0 = strlit00;\n-  const char_type* cc1 = NULL;\n-  const char_type* cc2 = NULL;\n+  const char_type* cc1 = 0;\n+  const char_type* cc2 = 0;\n \n   cc0 = strlit00;\n   for (std::size_t i = 0; i < 3; ++i)"}, {"sha": "0b989cbe729f905edea63323b4b61067a014a280", "filename": "libstdc++-v3/testsuite/22_locale/ctype/is/wchar_t/1.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fwchar_t%2F1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,4 +1,5 @@\n-// Copyright (C) 2000, 2001, 2002, 2003, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2002, 2003, 2009, 2010\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -84,8 +85,8 @@ void test01()\n   std::ctype_base::mask m01[3];\n   std::ctype_base::mask m02[13];\n   const char_type* cc0 = strlit00;\n-  const char_type* cc1 = NULL;\n-  const char_type* cc2 = NULL;\n+  const char_type* cc1 = 0;\n+  const char_type* cc2 = 0;\n \n   cc0 = strlit00;\n   for (std::size_t i = 0; i < 3; ++i)"}, {"sha": "f36559ea27c9a96a2c231adb2ab3f40d6ac3c0ec", "filename": "libstdc++-v3/testsuite/22_locale/locale/cons/12658_thread-1.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F12658_thread-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F12658_thread-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F12658_thread-1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -3,7 +3,7 @@\n // { dg-options \"-pthreads\" { target *-*-solaris* } }\n // { dg-require-namedlocale \"\" }\n \n-// Copyright (C) 2004, 2005, 2007, 2009 Free Software Foundation\n+// Copyright (C) 2004, 2005, 2007, 2009, 2010 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -59,10 +59,10 @@ main()\n   pthread_t tid[max_thread_count];\n   \n   for (int i = 0; i < max_thread_count; i++)\n-    pthread_create (&tid[i], NULL, thread_main, 0);\n+    pthread_create (&tid[i], 0, thread_main, 0);\n   \n   for (int i = 0; i < max_thread_count; i++)\n-    pthread_join (tid[i], NULL);\n+    pthread_join (tid[i], 0);\n \n   return 0;\n }"}, {"sha": "c09b000130ec7c501285c2cd3689c356fe9daddd", "filename": "libstdc++-v3/testsuite/22_locale/locale/cons/2.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F2.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -2,7 +2,8 @@\n \n // 2000-09-13 Benjamin Kosnik <bkoz@redhat.com>\n \n-// Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009\n+// Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,\n+// 2009, 2010\n // Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -96,7 +97,7 @@ void test01()\n   VERIFY( loc07 != loc02 );  \n   VERIFY( loc07.name() != \"\" );\n   try\n-    { locale loc08(static_cast<const char*>(NULL)); }\n+    { locale loc08(static_cast<const char*>(0)); }\n   catch(runtime_error& obj)\n     { VERIFY( true ); }\n   catch(...)\n@@ -130,7 +131,7 @@ void test01()\n     VERIFY( loc11 == loc01 );  \n \n     try\n-      { locale loc12(loc01, static_cast<const char*>(NULL), locale::ctype); }\n+      { locale loc12(loc01, static_cast<const char*>(0), locale::ctype); }\n     catch(runtime_error& obj)\n       { VERIFY( true ); }\n     catch(...)\n@@ -178,7 +179,7 @@ void test01()\n     VERIFY( loc11 == loc01 );\n \n     try\n-      { locale loc12(loc01, static_cast<const char*>(NULL), locale::ctype); }\n+      { locale loc12(loc01, static_cast<const char*>(0), locale::ctype); }\n     catch(runtime_error& obj)\n       { VERIFY( true ); }\n     catch(...)"}, {"sha": "6693f5d2d6de553a3ec18d56a5c9f41c83460a95", "filename": "libstdc++-v3/testsuite/22_locale/locale/cons/29217.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F29217.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F29217.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F29217.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // { dg-require-namedlocale \"\" }\n \n-// Copyright (C) 2006, 2009 Free Software Foundation\n+// Copyright (C) 2006, 2009, 2010 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -36,7 +36,7 @@ void test01()\n \t  \"LC_PAPER=C;LC_NAME=C;LC_ADDRESS=C;LC_TELEPHONE=C;\"\n \t  \"LC_MEASUREMENT=C;LC_IDENTIFICATION=C\" );\n \n-  VERIFY( locale().name() == setlocale(LC_ALL, NULL) );\n+  VERIFY( locale().name() == setlocale(LC_ALL, 0) );\n \n   locale loc1 = locale(locale::classic(), \"en_US.UTF-8\", locale::time);\n "}, {"sha": "30e133fd49a5dfecd786937701b7a23d58c61169", "filename": "libstdc++-v3/testsuite/22_locale/locale/global_locale_objects/14071.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fglobal_locale_objects%2F14071.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fglobal_locale_objects%2F14071.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fglobal_locale_objects%2F14071.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -2,7 +2,7 @@\n \n // 2004-02-09  Petur Runolfsson  <peturr02@ru.is>\n \n-// Copyright (C) 2004, 2005, 2009 Free Software Foundation\n+// Copyright (C) 2004, 2005, 2009, 2010 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -39,7 +39,7 @@ void test01()\n   if (loc.name() != \"*\")\n     {\n       locale::global(loc);\n-      VERIFY( loc.name() == setlocale(LC_ALL, NULL) );\n+      VERIFY( loc.name() == setlocale(LC_ALL, 0) );\n     }\n }\n "}, {"sha": "3265f71a29cd2f01125d2212c94effcb9512f7e5", "filename": "libstdc++-v3/testsuite/22_locale/locale/global_locale_objects/2.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fglobal_locale_objects%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fglobal_locale_objects%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fglobal_locale_objects%2F2.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -2,7 +2,7 @@\n \n // 2000-09-13 Benjamin Kosnik <bkoz@redhat.com>\n \n-// Copyright (C) 2000, 2002, 2003, 2005, 2009 Free Software Foundation\n+// Copyright (C) 2000, 2002, 2003, 2005, 2009, 2010 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -33,7 +33,7 @@ void test02()\n   \n   const string ph(\"en_PH\");\n   const string mx(\"es_MX\");\n-  const char* orig = setlocale(LC_ALL, NULL);\n+  const char* orig = setlocale(LC_ALL, 0);\n   const char* testph = setlocale(LC_ALL, ph.c_str());\n   const char* testmx = setlocale(LC_ALL, mx.c_str());\n   setlocale(LC_ALL, orig);\n@@ -54,7 +54,7 @@ void test02()\n       \n       // Change global locale.\n       locale global_orig = locale::global(loc_mx);\n-      const char* lc_all_mx = setlocale(LC_ALL, NULL);\n+      const char* lc_all_mx = setlocale(LC_ALL, 0);\n       if (lc_all_mx)\n \t{\n \t  VERIFY( mx == lc_all_mx );"}, {"sha": "3c6ad92e48315b46abb800f7e96ec5fc53fef86c", "filename": "libstdc++-v3/testsuite/22_locale/time_put/put/char/12439_1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Fput%2Fchar%2F12439_1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Fput%2Fchar%2F12439_1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Fput%2Fchar%2F12439_1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2003, 2009 Free Software Foundation\n+// Copyright (C) 2003, 2009, 2010 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -47,7 +47,7 @@ void test01()\n   bool test __attribute__((unused)) = true;\n   \n   ostringstream stream;\n-  time_t tt = time(NULL);\n+  time_t tt = time(0);\n   \n   const char* fmt = \"%c\";\n   "}, {"sha": "3d19d36c20b9cf60be8ab574372d9de095b87343", "filename": "libstdc++-v3/testsuite/22_locale/time_put/put/char/12439_3.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Fput%2Fchar%2F12439_3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Fput%2Fchar%2F12439_3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Fput%2Fchar%2F12439_3.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2003, 2009 Free Software Foundation\n+// Copyright (C) 2003, 2009, 2010 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -46,7 +46,7 @@ void test03()\n   bool test __attribute__((unused)) = true;\n   \n   ostringstream stream;\n-  time_t tt = time(NULL);\n+  time_t tt = time(0);\n   \n   const char* fmt = \"%c\";\n   "}, {"sha": "7b291df798acfc9ce7c99bbdfdbe97c943dae3ef", "filename": "libstdc++-v3/testsuite/23_containers/list/23781.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2F23781.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2F23781.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2F23781.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // 2005-09-10  Paolo Carlini  <pcarlini@suse.de>\n //\n-// Copyright (C) 2005, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,6 +22,7 @@\n \n // libstdc++/23781\n #include <list>\n+#include <cstddef>\n \n typedef std::list<int> list_type;\n list_type::iterator it = NULL; // { dg-error \"conversion\" }"}, {"sha": "7a1de4d660773751b3de2b5624d374e20c805cb4", "filename": "libstdc++-v3/testsuite/23_containers/list/pthread1.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fpthread1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fpthread1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fpthread1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // 2002-01-23  Loren J. Rittle <rittle@labs.mot.com> <ljrittle@acm.org>\n //\n-// Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2009\n+// Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -31,6 +31,7 @@\n \n #include <list>\n #include <cstdlib>\n+#include <cstddef>\n #include <pthread.h>\n \n const int thread_cycles = 10;"}, {"sha": "e282c75466710c323eed5b13a17e19ae7369f50e", "filename": "libstdc++-v3/testsuite/23_containers/map/23781.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2F23781.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2F23781.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2F23781.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // 2005-09-10  Paolo Carlini  <pcarlini@suse.de>\n //\n-// Copyright (C) 2005, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,6 +22,7 @@\n \n // libstdc++/23781\n #include <map>\n+#include <cstddef>\n \n std::map<int, int>::iterator it = NULL; // { dg-error \"conversion\" }\n std::map<int, int>::const_iterator cit = NULL; // { dg-error \"conversion\" }"}, {"sha": "8680ebbcc44dd8e64b1340524801a5935151ec79", "filename": "libstdc++-v3/testsuite/23_containers/map/pthread6.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fpthread6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fpthread6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fpthread6.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,7 +1,7 @@\n // 2002-01-23  Loren J. Rittle <rittle@labs.mot.com> <ljrittle@acm.org>\n // Adpated from libstdc++/5444 submitted by markus.breuer@materna.de\n //\n-// Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2009\n+// Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -26,6 +26,7 @@\n #include <string>\n #include <map>\n #include <vector>\n+#include <cstddef>\n #include <pthread.h>\n \n const int max_thread_count = 8;"}, {"sha": "50ec929064e4408a5ee4ae8711c50758dbf9f027", "filename": "libstdc++-v3/testsuite/23_containers/multimap/23781.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2F23781.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2F23781.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2F23781.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // 2005-09-10  Paolo Carlini  <pcarlini@suse.de>\n //\n-// Copyright (C) 2005, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,6 +22,7 @@\n \n // libstdc++/23781\n #include <map>\n+#include <cstddef>\n \n std::multimap<int, int>::iterator it = NULL; // { dg-error \"conversion\" }\n std::multimap<int, int>::const_iterator cit = NULL; // { dg-error \"conversion\" }"}, {"sha": "6b0bacf955b83a903d7a727bd49e00d2987c6b2b", "filename": "libstdc++-v3/testsuite/23_containers/multiset/23781.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2F23781.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2F23781.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2F23781.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // 2005-09-10  Paolo Carlini  <pcarlini@suse.de>\n //\n-// Copyright (C) 2005, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,6 +22,7 @@\n \n // libstdc++/23781\n #include <set>\n+#include <cstddef>\n \n std::multiset<int>::iterator it = NULL; // { dg-error \"conversion\" }\n std::multiset<int>::const_iterator cit = NULL; // { dg-error \"conversion\" }"}, {"sha": "b47b748ec8d97d16c73115d6249de535a68c64e7", "filename": "libstdc++-v3/testsuite/23_containers/set/23781.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2F23781.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2F23781.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2F23781.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // 2005-09-10  Paolo Carlini  <pcarlini@suse.de>\n //\n-// Copyright (C) 2005, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,6 +22,7 @@\n \n // libstdc++/23781\n #include <set>\n+#include <cstddef>\n \n std::set<int>::iterator it = NULL; // { dg-error \"conversion\" }\n std::set<int>::const_iterator cit = NULL; // { dg-error \"conversion\" }"}, {"sha": "0b86efacb923e20ede1cc42b5539b056684aa4be", "filename": "libstdc++-v3/testsuite/24_iterators/ostreambuf_iterator/2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostreambuf_iterator%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostreambuf_iterator%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostreambuf_iterator%2F2.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // 2001-04-30  Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001, 2003, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2003, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -49,7 +49,7 @@ bool test02(void)\n   *ostrb_it01;\n   VERIFY( !ostrb_it01.failed() );\n \n-  costreambuf_iter ostrb_it02(NULL);\n+  costreambuf_iter ostrb_it02(0);\n   VERIFY( ostrb_it02.failed() );\n   ostrb_it02++;\n   ++ostrb_it02;"}, {"sha": "0a12e7224507aaf9d68768d3dd85b896a5c16aeb", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/close/char/1.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2001, 2002, 2003, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -61,19 +61,19 @@ void test_01()\n   // filebuf_type* close()\n   std::filebuf* f;\n   f = fb_01.close();\n-  VERIFY( f != NULL );\n+  VERIFY( f );\n   VERIFY( !fb_01.is_open() );\n \n   f = fb_02.close();\n-  VERIFY( f != NULL );\n+  VERIFY( f );\n   VERIFY( !fb_02.is_open() );\n \n   f = fb_03.close();\n-  VERIFY( f != NULL );\n+  VERIFY( f );\n   VERIFY( !fb_03.is_open() );\n \n   f = fb_03.close();\n-  VERIFY( f == NULL );\n+  VERIFY( !f );\n   VERIFY( !fb_03.is_open() );\n }\n "}, {"sha": "fe0624d109e6d0ec0a94fc64428cf38228bfee13", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/close/char/12790-3.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F12790-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F12790-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F12790-3.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2003, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -71,7 +71,7 @@ void test01()\n   VERIFY( !cvt->unshift_called );\n   filebuf* ret = fb.close();\n   VERIFY( cvt->unshift_called );\n-  VERIFY( ret == NULL );\n+  VERIFY( !ret );\n }\n \n int main()"}, {"sha": "c1a0f79c8e26e7e539463a7cb19f432fa8fac3bb", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/close/char/2.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F2.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2001, 2002, 2003, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -48,7 +48,7 @@ void test_02()\n \n   // read (ext)\n   FILE* f2 = fopen(name_01, \"r\");\n-  VERIFY( f2 != NULL );\n+  VERIFY( f2 );\n   if (f2)\n   {\n     __gnu_cxx::stdio_filebuf<char> fb(f2, std::ios_base::in, 512);\n@@ -58,7 +58,7 @@ void test_02()\n \n   // read (standard)\n   FILE* f = fopen(name_01, \"r\");\n-  VERIFY( f != NULL );\n+  VERIFY( f );\n   if (f)\n   {\n     std::ifstream ifstream1(name_01);"}, {"sha": "f2c5abc3eb3accaf9773724a5ecb943202586301", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/close/char/9964.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F9964.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F9964.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F9964.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,7 +1,7 @@\n // { dg-require-fork \"\" }\n // { dg-require-mkfifo \"\" }\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -69,14 +69,14 @@ bool test_07()\n   \n   filebuf fb;\n   filebuf* ret = fb.open(name, ios_base::in | ios_base::out);\n-  VERIFY( ret != NULL );\n+  VERIFY( ret != 0 );\n   VERIFY( fb.is_open() );\n   s1.signal();\n   s2.wait();\n   fb.sputc('a');\n \n   ret = fb.close();\n-  VERIFY( ret != NULL );\n+  VERIFY( ret != 0 );\n   VERIFY( !fb.is_open() );\n \n   return test;"}, {"sha": "417fbc2ce39af6f85f3b97268cf3558a193a5dd4", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/close/wchar_t/12790-3.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fwchar_t%2F12790-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fwchar_t%2F12790-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fwchar_t%2F12790-3.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2003, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -69,7 +69,7 @@ void test01()\n   VERIFY( !cvt->unshift_called );\n   wfilebuf* ret = fb.close();\n   VERIFY( cvt->unshift_called );\n-  VERIFY( ret == NULL );\n+  VERIFY( !ret );\n }\n \n int main()"}, {"sha": "b233f65637e26a522d1a088905dc4f110cb2243a", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/imbue/wchar_t/14975-2.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fwchar_t%2F14975-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fwchar_t%2F14975-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fwchar_t%2F14975-2.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -4,7 +4,8 @@\n \n // 2004-04-16  Petur Runolfsson  <peturr02@ru.is>\n \n-// Copyright (C) 2004, 2005, 2006, 2007, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006, 2007, 2009, 2010\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -68,7 +69,7 @@ bool test01()\n   wfilebuf fb;\n   fb.pubimbue(loc_us);\n   wfilebuf* ret = fb.open(name, ios_base::out);\n-  VERIFY( ret != NULL );\n+  VERIFY( ret != 0 );\n   VERIFY( fb.is_open() );\n \n   s1.wait();"}, {"sha": "1a40da155cf2a321a1495470fccbd0b358d1828a", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/open/char/1.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2Fchar%2F1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2001, 2002, 2003, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -53,11 +53,11 @@ void test_01()\n   // Should keep the old file attached, and disregard attempt to overthrow.\n   std::filebuf* f = fb_02.open(name_02, std::ios_base::in | std::ios_base::out \n \t\t\t       | std::ios_base::trunc);\n-  VERIFY( f != NULL );\n+  VERIFY( f );\n   VERIFY( fb_02.is_open() );\n   \n   f = fb_02.open(name_03, std::ios_base::in | std::ios_base::out);\n-  VERIFY( f == NULL );\n+  VERIFY( !f );\n   VERIFY( fb_02.is_open() );\n \n   fb_03.open(name_03, std::ios_base::out | std::ios_base::trunc);"}, {"sha": "755784fb9ae7a04d90d296c0a26d1369863fe944", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/open/char/2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2Fchar%2F2.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2001, 2002, 2003, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -41,7 +41,7 @@ void test_03()\n   int first_fd = ::open(name_01, O_RDONLY);\n   VERIFY( first_fd != -1 );\n   FILE* first_file = ::fdopen(first_fd, \"r\");\n-  VERIFY( first_file != NULL );\n+  VERIFY( first_file );\n   __gnu_cxx::stdio_filebuf<char> fb(first_file, std::ios_base::in);\n \n   int second_fd = fb.fd();"}, {"sha": "5b404375e63efaae635f95b03393ac9118f58886", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/open/char/9507.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2Fchar%2F9507.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2Fchar%2F9507.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2Fchar%2F9507.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,7 @@\n // { dg-require-mkfifo \"\" }\n \n-// Copyright (C) 2001, 2002, 2003, 2005, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2005, 2009, 2010\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -55,7 +56,7 @@ void test_06()\n \t\t\t      std::ios_base::in \n \t\t\t      | std::ios_base::out\n \t\t\t      | std::ios_base::ate);\n-  if (r == NULL)\n+  if (!r)\n     VERIFY( !fbuf.is_open() );\n   else\n     VERIFY( fbuf.is_open() );"}, {"sha": "d762fb48c2c6a243b36b9a5d13e616604188963b", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/overflow/wchar_t/11305-1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fwchar_t%2F11305-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fwchar_t%2F11305-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fwchar_t%2F11305-1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // { dg-require-namedlocale \"\" }\n \n-// Copyright (C) 2003, 2005, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2005, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -37,7 +37,7 @@ void test01()\n   wfilebuf* f = fb.close();\n   \n   VERIFY( n1 != wfilebuf::traits_type::eof() );\n-  VERIFY( f != NULL );\n+  VERIFY( f );\n }\n \n int main()"}, {"sha": "f11916e6f77bbda006f972ad31ede57f2e19dcf8", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/overflow/wchar_t/11305-2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fwchar_t%2F11305-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fwchar_t%2F11305-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fwchar_t%2F11305-2.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // { dg-require-namedlocale \"\" }\n \n-// Copyright (C) 2003, 2005, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2005, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -39,7 +39,7 @@ void test02()\n   \n   VERIFY( n1 != wfilebuf::traits_type::eof() );\n   VERIFY( n2 != wfilebuf::traits_type::eof() );\n-  VERIFY( f != NULL );\n+  VERIFY( f );\n }\n \n int main()"}, {"sha": "2be9b52cbd2d904eb0bb066fd67fb837003f7472", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/overflow/wchar_t/11305-3.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fwchar_t%2F11305-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fwchar_t%2F11305-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fwchar_t%2F11305-3.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // { dg-require-namedlocale \"\" }\n \n-// Copyright (C) 2003, 2005, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2005, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -36,7 +36,7 @@ void test03()\n   wfilebuf* f = fb.close();\n \t\n   VERIFY( n1 != wfilebuf::traits_type::eof() );\n-  VERIFY( f != NULL );\n+  VERIFY( f );\n }\n \n int main()"}, {"sha": "7b48bfe7bb90ef5ca127a631fcc78d07bc15e84d", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/overflow/wchar_t/11305-4.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fwchar_t%2F11305-4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fwchar_t%2F11305-4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fwchar_t%2F11305-4.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // { dg-require-namedlocale \"\" }\n \n-// Copyright (C) 2003, 2005, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2005, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -38,7 +38,7 @@ void test04()\n   \n   VERIFY( n1 != wfilebuf::traits_type::eof() );\n   VERIFY( n2 != wfilebuf::traits_type::eof() );\n-  VERIFY( f != NULL );\n+  VERIFY( f );\n }\n \n int main()"}, {"sha": "42688e825e0e3859f6f624b5be78d7f41e0bdc6b", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/setbuf/char/1.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsetbuf%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsetbuf%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsetbuf%2Fchar%2F1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001, 2002, 2003, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -40,8 +40,8 @@ class testbuf : public std::filebuf\n   check_pointers()\n   { \n     bool test __attribute__((unused)) = true;\n-    test = (this->pbase() == NULL);\n-    test &= (this->pptr() == NULL);\n+    test = (!this->pbase());\n+    test &= (!this->pptr());\n     return test;\n   }\n };"}, {"sha": "a2368f93203a388039e3fa3dd80476b6889659f8", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputc/char/1057.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F1057.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F1057.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F1057.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // 1999-10-11 bkoz\n \n-// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2009\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -32,7 +32,7 @@ class nullsetpbuf : public std::filebuf\n   nullsetpbuf()\n   {\n     setp(foo, foo + 64);\n-    setp(NULL, NULL);\n+    setp(0, 0);\n   }\n };\n "}, {"sha": "c84a079d298f43a883bb42744d07ec25a33f7cee", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputn/char/1057.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F1057.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F1057.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F1057.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // 1999-10-11 bkoz\n \n-// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2009\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -32,7 +32,7 @@ class nullsetpbuf : public std::filebuf\n   nullsetpbuf()\n   {\n     setp(foo, foo + 64);\n-    setp(NULL, NULL);\n+    setp(0, 0);\n   }\n };\n "}, {"sha": "b65d0890064c9848c0b062f2692b19522596b302", "filename": "libstdc++-v3/testsuite/27_io/basic_ios/clear/char/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fclear%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fclear%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fclear%2Fchar%2F1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // 1999-09-20 bkoz\n \n-// Copyright (C) 1999, 2003, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2003, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -35,7 +35,7 @@ void test01()\n \n   iostate iostate02, iostate03;\n   const iostate iostate01 = std::ios_base::badbit | std::ios_base::eofbit;\n-  std::ios ios_01(NULL);\n+  std::ios ios_01(0);\n \n   // bool fail() const\n   VERIFY( ios_01.fail() );"}, {"sha": "0cf07f212b8dec31e0a14fbfe7294f7bff318c59", "filename": "libstdc++-v3/testsuite/27_io/basic_ios/copyfmt/char/1.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fcopyfmt%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fcopyfmt%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fcopyfmt%2Fchar%2F1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // 1999-09-20 bkoz\n \n-// Copyright (C) 1999, 2003, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2003, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -35,8 +35,8 @@ void test02()\n \n   // basic_ios& copyfmt(const basic_ios& rhs)\n   {\n-    std::ios ios_01(NULL);\n-    std::ios ios_02(NULL);  \n+    std::ios ios_01(0);\n+    std::ios ios_02(0);  \n     ios_01.exceptions(std::ios_base::eofbit);\n     ios_02.exceptions(std::ios_base::eofbit);\n     \n@@ -49,8 +49,8 @@ void test02()\n   }\n \n   {\n-    std::ios ios_01(NULL);\n-    std::ios ios_02(NULL);  \n+    std::ios ios_01(0);\n+    std::ios ios_02(0);  \n     ios_01.clear(std::ios_base::eofbit);\n     ios_02.exceptions(std::ios_base::eofbit);\n "}, {"sha": "79390eaca1cc11e2c709d0a74e3d722bb888dffb", "filename": "libstdc++-v3/testsuite/27_io/basic_ios/copyfmt/char/2.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fcopyfmt%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fcopyfmt%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fcopyfmt%2Fchar%2F2.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -2,7 +2,7 @@\n \n // 1999-09-20 bkoz\n \n-// Copyright (C) 1999, 2003, 2005, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2003, 2005, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -37,8 +37,8 @@ void test03()\n   typedef std::ios_base::iostate iostate;\n   locale loc_c = locale::classic();\n   locale loc_de = locale(\"de_DE\");\n-  std::ios ios_01(NULL);\n-  std::ios ios_02(NULL);\n+  std::ios ios_01(0);\n+  std::ios ios_02(0);\n   ios_01.imbue(loc_c);\n   ios_02.imbue(loc_de);\n   ios_02.setstate(ios_base::badbit);"}, {"sha": "f0494bd458df61d3963830d853f1a5510f058982", "filename": "libstdc++-v3/testsuite/27_io/basic_ios/exceptions/char/1.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fexceptions%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fexceptions%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fexceptions%2Fchar%2F1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // 1999-09-20 bkoz\n \n-// Copyright (C) 1999, 2003, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2003, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -35,13 +35,13 @@ void test01()\n   // iostate exceptions() const\n   iostate iostate02;\n   {\n-    std::ios ios_01(NULL);\n+    std::ios ios_01(0);\n     VERIFY( ios_01.exceptions() == std::ios_base::goodbit );\n   }\n \n   // void exceptions(iostate except)\n   {\n-    std::ios ios_01(NULL);\n+    std::ios ios_01(0);\n     try {\n       ios_01.exceptions(std::ios_base::eofbit);\n     }\t\t \n@@ -53,7 +53,7 @@ void test01()\n   }\n \n   {\n-    std::ios ios_01(NULL);\n+    std::ios ios_01(0);\n     ios_01.clear(std::ios_base::eofbit);\n     try {\n       ios_01.exceptions(std::ios_base::eofbit);"}, {"sha": "20de8a95708aa9a5fb6ebc33759591101eebc4ee", "filename": "libstdc++-v3/testsuite/27_io/basic_ios/locales/char/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Flocales%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Flocales%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Flocales%2Fchar%2F1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // 1999-09-20 bkoz\n \n-// Copyright (C) 1999, 2003, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2003, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,7 +29,7 @@ void test01()\n   bool test __attribute__((unused)) = true;\n   const std::locale c_loc = std::locale::classic();\n \n-  std::ios ios_01(NULL);\n+  std::ios ios_01(0);\n   std::ios::char_type ct01;\n   std::ios::char_type ct02('x');;\n "}, {"sha": "44fe41323c70f0f50f952eaf93e3eb889b6206da", "filename": "libstdc++-v3/testsuite/27_io/basic_iostream/cons/2020.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_iostream%2Fcons%2F2020.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_iostream%2Fcons%2F2020.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_iostream%2Fcons%2F2020.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,7 +1,7 @@\n // 1999-01-17 bkoz test functionality of basic_filebuf for char_type == char\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009\n+// 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -34,7 +34,7 @@ void test07()\n \n   try\n     { \n-      gnu_iostr obj(NULL); \n+      gnu_iostr obj(0); \n     }\n   catch(std::exception& obj)\n     { "}, {"sha": "3b2cb845e08ea51d767adbddbf882de745836739", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/cons/3.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fcons%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fcons%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fcons%2F3.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,7 @@\n // 1999-01-17 bkoz test functionality of basic_filebuf for char_type == char\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2009\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n+// 2005, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -33,7 +34,7 @@ void test07()\n   typedef std::basic_istream<__gnu_test::pod_ushort> gnu_istr;\n \n   try\n-    { gnu_istr obj(NULL); }\n+    { gnu_istr obj(0); }\n   catch(std::exception& obj)\n     { \n       test = false; "}, {"sha": "9f1593eac99e267d75f9c64e612ae02a10d07958", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/char/01.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F01.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F01.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F01.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,7 @@\n // 1999-04-12 bkoz\n \n-// Copyright (C) 1999, 2000, 2002, 2003, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2000, 2002, 2003, 2009, 2010\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -35,7 +36,7 @@ std::stringbuf isbuf_02(str_02, std::ios_base::in);\n std::stringbuf isbuf_03(str_03, std::ios_base::in);\n std::stringbuf isbuf_04(str_04, std::ios_base::in);\n \n-std::istream is_01(NULL);\n+std::istream is_01(0);\n std::istream is_02(&isbuf_02);\n std::istream is_03(&isbuf_03);\n std::istream is_04(&isbuf_04);"}, {"sha": "36ddabad065216f5ab4e6a53b09fc63ef1c54f76", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/01.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F01.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F01.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F01.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2004, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -33,7 +33,7 @@ std::wstringbuf isbuf_02(str_02, std::ios_base::in);\n std::wstringbuf isbuf_03(str_03, std::ios_base::in);\n std::wstringbuf isbuf_04(str_04, std::ios_base::in);\n \n-std::wistream is_01(NULL);\n+std::wistream is_01(0);\n std::wistream is_02(&isbuf_02);\n std::wistream is_03(&isbuf_03);\n std::wistream is_04(&isbuf_04);"}, {"sha": "7e4387d315d0a583decf340e3e176c90cda7927d", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_character/char/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // 1999-07-26 bkoz\n \n-// Copyright (C) 1999, 2003, 2005, 2009 Free Software Foundation\n+// Copyright (C) 1999, 2003, 2005, 2009, 2010 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,7 +32,7 @@ void test01()\n \n   std::stringbuf isbuf_01(std::ios_base::in);\n   std::stringbuf isbuf_02(str_02, std::ios_base::in);\n-  std::istream is_01(NULL);\n+  std::istream is_01(0);\n   std::istream is_02(&isbuf_02);\n \n   std::ios_base::iostate state1, state2, statefail;"}, {"sha": "812d5413412c0a608435c5294d898fe04b882e0f", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_character/char/2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F2.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // 1999-07-26 bkoz\n \n-// Copyright (C) 1999, 2003, 2009 Free Software Foundation\n+// Copyright (C) 1999, 2003, 2009, 2010 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -34,7 +34,7 @@ void test02()\n \n   std::stringbuf isbuf_01(std::ios_base::in);\n   std::stringbuf isbuf_02(str_02, std::ios_base::in);\n-  std::istream is_01(NULL);\n+  std::istream is_01(0);\n   std::istream is_02(&isbuf_02);\n   std::ios_base::iostate state1, state2, statefail;\n   statefail = std::ios_base::failbit;"}, {"sha": "551cb111a490b9fe903216cf90afa87fb4e50109", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_character/char/3.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F3.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // 1999-07-26 bkoz\n \n-// Copyright (C) 1999, 2003, 2009 Free Software Foundation\n+// Copyright (C) 1999, 2003, 2009, 2010 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,7 +32,7 @@ void test01()\n \n   std::stringbuf isbuf_01(std::ios_base::in);\n   std::stringbuf isbuf_02(str_02, std::ios_base::in);\n-  std::istream is_01(NULL);\n+  std::istream is_01(0);\n   std::istream is_02(&isbuf_02);\n \n   std::ios_base::iostate state1, state2, statefail;"}, {"sha": "a2e480ebce64cdb142f031e272473c1045dc718b", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_character/char/9826.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F9826.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F9826.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F9826.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // 2002-07-25 Benjamin Kosnik <bkoz@redhat.com>\n \n-// Copyright (C) 2002, 2003, 2005, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2003, 2005, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -39,7 +39,7 @@ void test02()\n   sstr >> str;\n \n   // 2\n-  pod_char*  chr = NULL;\n+  pod_char*  chr = 0;\n   sstr >> chr;\n \n   // 3"}, {"sha": "f7b749a5df057cf0074c60ec76aee9b57e0fb54b", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_character/wchar_t/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2004, 2005, 2009 Free Software Foundation\n+// Copyright (C) 2004, 2005, 2009, 2010 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,7 +30,7 @@ void test01()\n \n   std::wstringbuf isbuf_01(std::ios_base::in);\n   std::wstringbuf isbuf_02(str_02, std::ios_base::in);\n-  std::wistream is_01(NULL);\n+  std::wistream is_01(0);\n   std::wistream is_02(&isbuf_02);\n \n   std::ios_base::iostate state1, state2, statefail;"}, {"sha": "a697ef2b256db714a10866e669a2b21122f9a1c1", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_character/wchar_t/2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F2.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2004, 2009 Free Software Foundation\n+// Copyright (C) 2004, 2009, 2010 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,7 +30,7 @@ void test02()\n \n   std::wstringbuf isbuf_01(std::ios_base::in);\n   std::wstringbuf isbuf_02(str_02, std::ios_base::in);\n-  std::wistream is_01(NULL);\n+  std::wistream is_01(0);\n   std::wistream is_02(&isbuf_02);\n   std::ios_base::iostate state1, state2, statefail;\n   statefail = std::ios_base::failbit;"}, {"sha": "6ea22e395debfcc713339856d3f334ca4f472a48", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_character/wchar_t/3.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F3.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2004, 2009 Free Software Foundation\n+// Copyright (C) 2004, 2009, 2010 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,7 +30,7 @@ void test01()\n \n   std::wstringbuf isbuf_01(std::ios_base::in);\n   std::wstringbuf isbuf_02(str_02, std::ios_base::in);\n-  std::wistream is_01(NULL);\n+  std::wistream is_01(0);\n   std::wistream is_02(&isbuf_02);\n \n   std::ios_base::iostate state1, state2, statefail;"}, {"sha": "854dc7c856586d374a53ac3bfc6be66bc16c2fe5", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_other/char/1.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2F1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,7 @@\n // 1999-07-28 bkoz\n \n-// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2009\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,\n+// 2009, 2010\n // Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -41,7 +42,7 @@ void test01()\n   std::stringbuf isbuf_04(str_02, std::ios_base::in);\n   std::stringbuf isbuf_05(str_02, std::ios_base::in | std::ios_base::out);\n \n-  std::istream is_00(NULL);\n+  std::istream is_00(0);\n   std::istream is_01(&isbuf_01);\n   std::istream is_02(&isbuf_02);\n   std::istream is_03(&isbuf_03);"}, {"sha": "96ba7193021bb029be6aef951ce80414352eb53d", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_other/char/exceptions_null.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2Fexceptions_null.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2Fexceptions_null.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2Fexceptions_null.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2003, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,7 +28,7 @@ void test2()\n {\n   bool test __attribute__((unused)) = true;\n   istringstream stream;\n-  stream >> static_cast<streambuf*>(NULL);\n+  stream >> static_cast<streambuf*>(0);\n   VERIFY(stream.rdstate() & ios_base::failbit);\n }\n \n@@ -40,7 +40,7 @@ void test4()\n \n   try\n     {\n-      stream >> static_cast<streambuf*>(NULL);\n+      stream >> static_cast<streambuf*>(0);\n       VERIFY(false);\n     }\n   catch (ios_base::failure&)"}, {"sha": "eab6650b1acfaf75c222f0a94af7b7c653e0043b", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_other/wchar_t/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2F1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2004, 2005, 2006, 2009 Free Software Foundation\n+// Copyright (C) 2004, 2005, 2006, 2009, 2010 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -38,7 +38,7 @@ void test01()\n   std::wstringbuf isbuf_04(str_02, std::ios_base::in);\n   std::wstringbuf isbuf_05(str_02, std::ios_base::in | std::ios_base::out);\n \n-  std::wistream is_00(NULL);\n+  std::wistream is_00(0);\n   std::wistream is_01(&isbuf_01);\n   std::wistream is_02(&isbuf_02);\n   std::wistream is_03(&isbuf_03);"}, {"sha": "bc04b7d9b22a9795a225555a0763ae47df019c0c", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_other/wchar_t/exceptions_null.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2Fexceptions_null.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2Fexceptions_null.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2Fexceptions_null.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2004, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,7 +28,7 @@ void test2()\n {\n   bool test __attribute__((unused)) = true;\n   wistringstream stream;\n-  stream >> static_cast<wstreambuf*>(NULL);\n+  stream >> static_cast<wstreambuf*>(0);\n   VERIFY( stream.rdstate() & ios_base::failbit );\n }\n \n@@ -40,7 +40,7 @@ void test4()\n \n   try\n     {\n-      stream >> static_cast<wstreambuf*>(NULL);\n+      stream >> static_cast<wstreambuf*>(0);\n       VERIFY( false );\n     }\n   catch (ios_base::failure&)"}, {"sha": "f7957d8a51c5ff4e9ad82b41c1190bdfb1d8d871", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/get/char/1.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fget%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fget%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fget%2Fchar%2F1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,7 @@\n // 1999-08-11 bkoz\n \n-// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2009 Free Software Foundation\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2009, 2010\n+// Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -41,7 +42,7 @@ test03()\n   std::stringbuf sbuf_04(str01, std::ios_base::in);\n   std::stringbuf sbuf_05(str01, std::ios_base::in);\n \n-  std::istream is_00(NULL);\n+  std::istream is_00(0);\n   std::istream is_04(&sbuf_04);\n   std::istream is_05(&sbuf_05);\n   std::ios_base::iostate statefail, stateeof;"}, {"sha": "b3027c3af95465ae9fa3bcd312e5ae764cc26875", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/get/wchar_t/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fget%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fget%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fget%2Fwchar_t%2F1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2004, 2009 Free Software Foundation\n+// Copyright (C) 2004, 2009, 2010 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -39,7 +39,7 @@ test03()\n   std::wstringbuf sbuf_04(str01, std::ios_base::in);\n   std::wstringbuf sbuf_05(str01, std::ios_base::in);\n \n-  std::wistream is_00(NULL);\n+  std::wistream is_00(0);\n   std::wistream is_04(&sbuf_04);\n   std::wistream is_05(&sbuf_05);\n   std::ios_base::iostate statefail, stateeof;"}, {"sha": "48b245f9b96622ebe0dc81b8a9735a7328b050cf", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/getline/char/1.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fchar%2F1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,7 @@\n // 1999-08-11 bkoz\n \n-// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2009 Free Software Foundation\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2009, 2010\n+// Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -41,7 +42,7 @@ test02()\n \n   std::stringbuf sbuf_04(str01, std::ios_base::in);\n \n-  std::istream is_00(NULL);\n+  std::istream is_00(0);\n   std::istream is_04(&sbuf_04);\n   std::ios_base::iostate state1, state2, statefail, stateeof;\n   statefail = std::ios_base::failbit;\n@@ -54,7 +55,7 @@ test02()\n   is_00.getline(carray1, 20, '*');\n   state2 = is_00.rdstate();\n   // make sure failbit was set, since we couldn't extract\n-  // from the NULL streambuf...\n+  // from the null streambuf...\n   VERIFY( state1 != state2 );\n   VERIFY( static_cast<bool>(state2 & statefail) );\n   "}, {"sha": "2445dd4f7494d654c95fe2a353761c2f6ade0ced", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/getline/wchar_t/1.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fwchar_t%2F1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2004, 2009 Free Software Foundation\n+// Copyright (C) 2004, 2009, 2010 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -39,7 +39,7 @@ test02()\n \n   std::wstringbuf sbuf_04(str01, std::ios_base::in);\n \n-  std::wistream is_00(NULL);\n+  std::wistream is_00(0);\n   std::wistream is_04(&sbuf_04);\n   std::ios_base::iostate state1, state2, statefail, stateeof;\n   statefail = std::ios_base::failbit;\n@@ -52,7 +52,7 @@ test02()\n   is_00.getline(carray1, 20, L'*');\n   state2 = is_00.rdstate();\n   // make sure failbit was set, since we couldn't extract\n-  // from the NULL streambuf...\n+  // from the null streambuf...\n   VERIFY( state1 != state2 );\n   VERIFY( static_cast<bool>(state2 & statefail) );\n   "}, {"sha": "de0546c321dea502820bd52be3746ea020ec7947", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/ignore/char/1.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fignore%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fignore%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fignore%2Fchar%2F1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,7 @@\n // 1999-08-11 bkoz\n \n-// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2009 Free Software Foundation\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2009, 2010\n+// Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -36,7 +37,7 @@ test01()\n   std::stringbuf isbuf_03(str_02, std::ios_base::in);\n   std::stringbuf isbuf_04(str_02, std::ios_base::in);\n \n-  std::istream is_00(NULL);\n+  std::istream is_00(0);\n   std::istream is_03(&isbuf_03);\n   std::istream is_04(&isbuf_04);\n   std::ios_base::iostate state1, state2, statefail, stateeof;"}, {"sha": "57c827dd65bd7b1e209ce940d19b26260a3c1bd7", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/ignore/wchar_t/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fignore%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fignore%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fignore%2Fwchar_t%2F1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2004, 2009 Free Software Foundation\n+// Copyright (C) 2004, 2009, 2010 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -34,7 +34,7 @@ test01()\n   std::wstringbuf isbuf_03(str_02, std::ios_base::in);\n   std::wstringbuf isbuf_04(str_02, std::ios_base::in);\n \n-  std::wistream is_00(NULL);\n+  std::wistream is_00(0);\n   std::wistream is_03(&isbuf_03);\n   std::wistream is_04(&isbuf_04);\n   std::ios_base::iostate state1, state2, statefail, stateeof;"}, {"sha": "4b818b299ca495435b2410e046f5bf4c31d55936", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/peek/char/1.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fpeek%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fpeek%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fpeek%2Fchar%2F1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,7 @@\n // 1999-08-11 bkoz\n \n-// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2009 Free Software Foundation\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2009, 2010\n+// Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -36,7 +37,7 @@ test01()\n   std::stringbuf isbuf_03(str_02, std::ios_base::in);\n   std::stringbuf isbuf_04(str_02, std::ios_base::in);\n \n-  std::istream is_00(NULL);\n+  std::istream is_00(0);\n   std::istream is_03(&isbuf_03);\n   std::istream is_04(&isbuf_04);\n   std::ios_base::iostate state1, state2, statefail, stateeof;"}, {"sha": "8aa4ecf4ef58424405345ee256513ece25cd0993", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/peek/wchar_t/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fpeek%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fpeek%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fpeek%2Fwchar_t%2F1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2004, 2009 Free Software Foundation\n+// Copyright (C) 2004, 2009, 2010 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -34,7 +34,7 @@ test01()\n   std::wstringbuf isbuf_03(str_02, std::ios_base::in);\n   std::wstringbuf isbuf_04(str_02, std::ios_base::in);\n \n-  std::wistream is_00(NULL);\n+  std::wistream is_00(0);\n   std::wistream is_03(&isbuf_03);\n   std::wistream is_04(&isbuf_04);\n   std::ios_base::iostate state1, state2, statefail, stateeof;"}, {"sha": "3879f7b422d682d724bfa5ec156c4bb77c42b129", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/read/char/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fread%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fread%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fread%2Fchar%2F1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // 1999-08-11 bkoz\n \n-// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2009\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2009, 2010\n // Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -34,7 +34,7 @@ test01()\n   std::stringbuf isbuf_03(str_02, std::ios_base::in);\n   std::stringbuf isbuf_04(str_02, std::ios_base::in);\n \n-  std::istream is_00(NULL);\n+  std::istream is_00(0);\n   std::istream is_03(&isbuf_03);\n   std::istream is_04(&isbuf_04);\n   std::ios_base::iostate state1, state2, statefail, stateeof;"}, {"sha": "508e0c8cb4dc7d6ae43ef8497c3db37a7b94bf6b", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/read/wchar_t/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fread%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fread%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fread%2Fwchar_t%2F1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2004, 2009 Free Software Foundation\n+// Copyright (C) 2004, 2009, 2010 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -31,7 +31,7 @@ test01()\n   std::wstringbuf isbuf_03(str_02, std::ios_base::in);\n   std::wstringbuf isbuf_04(str_02, std::ios_base::in);\n \n-  std::wistream is_00(NULL);\n+  std::wistream is_00(0);\n   std::wistream is_03(&isbuf_03);\n   std::wistream is_04(&isbuf_04);\n   std::ios_base::iostate state1, state2, statefail, stateeof;"}, {"sha": "cb683666cccfd2fed81bf3b84b7e5b5e294f1fac", "filename": "libstdc++-v3/testsuite/27_io/basic_ofstream/pthread2.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fpthread2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fpthread2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fpthread2.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,7 +1,7 @@\n // 2002-01-23  Loren J. Rittle <rittle@labs.mot.com> <ljrittle@acm.org>\n // Adpated from libstdc++/5347 submitted by markus.breuer@materna.de\n //\n-// Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2009\n+// Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -51,10 +51,10 @@ main()\n #endif\n \n   for (int i = 0; i < max_thread_count; i++)\n-    pthread_create (&tid[i], NULL, thread_main, 0);\n+    pthread_create (&tid[i], 0, thread_main, 0);\n \n   for (int i = 0; i < max_thread_count; i++)\n-    pthread_join (tid[i], NULL);\n+    pthread_join (tid[i], 0);\n \n   return 0;\n }"}, {"sha": "07fb7b82eb2e7414609b9584cc7be6282eef5043", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/cons/2020.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fcons%2F2020.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fcons%2F2020.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fcons%2F2020.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,7 @@\n // 1999-01-17 bkoz test functionality of basic_filebuf for char_type == char\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2009\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n+// 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -34,7 +35,7 @@ void test07()\n \n   try\n     { \n-      gnu_ostr obj(NULL); \n+      gnu_ostr obj(0); \n     }\n   catch(std::exception& obj)\n     { "}, {"sha": "f38e2e703dbdb0d6f2ec9f161d452edd605528b3", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_character/char/8.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fchar%2F8.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fchar%2F8.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fchar%2F8.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // 1999-08-16 bkoz\n \n-// Copyright (C) 1999, 2000, 2002, 2003, 2009 Free Software Foundation\n+// Copyright (C) 1999, 2000, 2002, 2003, 2009, 2010 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,7 +27,7 @@\n void test08()\n {\n   bool test __attribute__((unused)) = true;\n-  char* pt = NULL;\n+  char* pt = 0;\n \n   // 1\n   std::ostringstream oss;"}, {"sha": "76490b3c590a06d7a0bbe25fd73a86ce2f9b5a44", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_character/wchar_t/8.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F8.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F8.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F8.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // 1999-08-16 bkoz\n \n-// Copyright (C) 1999, 2000, 2002, 2003, 2009 Free Software Foundation\n+// Copyright (C) 1999, 2000, 2002, 2003, 2009, 2010 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,7 +27,7 @@\n void test08()\n {\n   bool test __attribute__((unused)) = true;\n-  char* pt = NULL;\n+  char* pt = 0;\n \n   // 2\n   std::wostringstream woss;\n@@ -40,7 +40,7 @@ void test08()\n   VERIFY( woss.good() );\n \n   // 3\n-  wchar_t* wt = NULL;\n+  wchar_t* wt = 0;\n   woss.clear();\n   woss << wt;\n   VERIFY( woss.bad() );"}, {"sha": "0c94c68156f406526310dda97c7e233de418babc", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/char/1.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2F1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,7 +1,8 @@\n // 1999-08-16 bkoz\n // 1999-11-01 bkoz\n \n-// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2009 Free Software Foundation\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2009, 2010\n+// Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -46,7 +47,7 @@ test02()\n   // filebuf-> NULL \n   std::ifstream f_in1(name_01);\n   std::ofstream f_out1(name_02);\n-  std::stringbuf* strbuf01 = NULL;\n+  std::stringbuf* strbuf01 = 0;\n   iostate state01 = f_in1.rdstate();\n   f_in1 >> strbuf01;\n   iostate state02 = f_in1.rdstate();"}, {"sha": "6d28c5f04594aea3998f370bc8af09715c8ae58f", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/char/exceptions_null.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Fexceptions_null.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Fexceptions_null.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Fexceptions_null.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2003, 2005, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2005, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,7 +28,7 @@ void test1()\n   bool test __attribute__((unused)) = true;\n \n   ostringstream stream;\n-  stream << static_cast<streambuf*>(NULL);\n+  stream << static_cast<streambuf*>(0);\n   VERIFY( stream.rdstate() & ios_base::badbit );\n }\n \n@@ -42,7 +42,7 @@ void test3()\n \t\n   try\n     {\n-      stream << static_cast<streambuf*>(NULL);\n+      stream << static_cast<streambuf*>(0);\n       VERIFY( false );\n     }\n   catch (ios_base::failure&)"}, {"sha": "6e12a65bfbe91e4cffc2aee271adaf9abb47cf0e", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/wchar_t/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2F1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2005, 2009 Free Software Foundation\n+// Copyright (C) 2005, 2009, 2010 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -41,7 +41,7 @@ test02()\n   // filebuf-> NULL \n   std::wifstream f_in1(name_01);\n   std::wofstream f_out1(name_02);\n-  std::wstringbuf* strbuf01 = NULL;\n+  std::wstringbuf* strbuf01 = 0;\n   iostate state01 = f_in1.rdstate();\n   f_in1 >> strbuf01;\n   iostate state02 = f_in1.rdstate();"}, {"sha": "076aece647586fec332d3992da26de17e0f7eeb9", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/wchar_t/exceptions_null.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2Fexceptions_null.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2Fexceptions_null.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2Fexceptions_null.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2005, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,7 +28,7 @@ void test1()\n   bool test __attribute__((unused)) = true;\n \n   wostringstream stream;\n-  stream << static_cast<wstreambuf*>(NULL);\n+  stream << static_cast<wstreambuf*>(0);\n   VERIFY( stream.rdstate() & ios_base::badbit );\n }\n \n@@ -42,7 +42,7 @@ void test3()\n \t\n   try\n     {\n-      stream << static_cast<wstreambuf*>(NULL);\n+      stream << static_cast<wstreambuf*>(0);\n       VERIFY( false );\n     }\n   catch (ios_base::failure&)"}, {"sha": "00becef2587ccfac4b462f65a41d9d9a8e649a57", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/sentry/pod/1.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fsentry%2Fpod%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fsentry%2Fpod%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fsentry%2Fpod%2F1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,7 @@\n // 1999-10-14 bkoz\n \n-// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,\n+// 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -40,7 +41,7 @@ void test01()\n \n \n   const string_type str01;\n-  stringbuf_type* strbuf01 = NULL;\n+  stringbuf_type* strbuf01 = 0;\n   stringbuf_type strbuf02(str01);\n   ostream_type ostr01(strbuf01);\n   ostream_type ostr02(&strbuf02);"}, {"sha": "5b87d84c0228addabc5d6351a52a957ea5f62e1a", "filename": "libstdc++-v3/testsuite/27_io/basic_ostringstream/pthread3.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fpthread3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fpthread3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fpthread3.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,7 +1,7 @@\n // 2002-01-23  Loren J. Rittle <rittle@labs.mot.com> <ljrittle@acm.org>\n // Adpated from libstdc++/5347 submitted by markus.breuer@materna.de\n //\n-// Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2009\n+// Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -48,10 +48,10 @@ main()\n #endif\n \n   for (int i = 0; i < max_thread_count; i++)\n-    pthread_create (&tid[i], NULL, thread_main, 0);\n+    pthread_create (&tid[i], 0, thread_main, 0);\n \n   for (int i = 0; i < max_thread_count; i++)\n-    pthread_join (tid[i], NULL);\n+    pthread_join (tid[i], 0);\n \n   return 0;\n }"}, {"sha": "65aff09ec2770793da04e2848fbe8f308224dc08", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/overflow/char/1.cc", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Foverflow%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Foverflow%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Foverflow%2Fchar%2F1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,7 @@\n // 1999-10-11 bkoz\n \n-// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,\n+// 2007, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -40,12 +41,12 @@ class testbuf : public std::streambuf\n   check_pointers()\n   { \n     bool test __attribute__((unused)) = true;\n-    VERIFY( this->eback() == NULL );\n-    VERIFY( this->gptr() == NULL );\n-    VERIFY( this->egptr() == NULL );\n-    VERIFY( this->pbase() == NULL );\n-    VERIFY( this->pptr() == NULL );\n-    VERIFY( this->epptr() == NULL );\n+    VERIFY( !this->eback() );\n+    VERIFY( !this->gptr() );\n+    VERIFY( !this->egptr() );\n+    VERIFY( !this->pbase() );\n+    VERIFY( !this->pptr() );\n+    VERIFY( !this->epptr() );\n     return test;\n   }\n "}, {"sha": "30b67e4e6d16d1fcc5b65634d8320430a6869dc1", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/overflow/wchar_t/1.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Foverflow%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Foverflow%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Foverflow%2Fwchar_t%2F1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // 1999-10-11 bkoz\n \n-// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2009\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -40,12 +40,12 @@ class testbuf : public std::wstreambuf\n   check_pointers()\n   { \n     bool test __attribute__((unused)) = true;\n-    VERIFY( this->eback() == NULL );\n-    VERIFY( this->gptr() == NULL );\n-    VERIFY( this->egptr() == NULL );\n-    VERIFY( this->pbase() == NULL );\n-    VERIFY( this->pptr() == NULL );\n-    VERIFY( this->epptr() == NULL );\n+    VERIFY( !this->eback() );\n+    VERIFY( !this->gptr() );\n+    VERIFY( !this->egptr() );\n+    VERIFY( !this->pbase() );\n+    VERIFY( !this->pptr() );\n+    VERIFY( !this->epptr() );\n     return test;\n   }\n "}, {"sha": "cbf17820f388ea87ea14c56591b0590932f436bf", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/sgetc/char/1.cc", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsgetc%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsgetc%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsgetc%2Fchar%2F1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,7 @@\n // 1999-10-11 bkoz\n \n-// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,\n+// 2007, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -40,12 +41,12 @@ class testbuf : public std::streambuf\n   check_pointers()\n   { \n     bool test __attribute__((unused)) = true;\n-    VERIFY( this->eback() == NULL );\n-    VERIFY( this->gptr() == NULL );\n-    VERIFY( this->egptr() == NULL );\n-    VERIFY( this->pbase() == NULL );\n-    VERIFY( this->pptr() == NULL );\n-    VERIFY( this->epptr() == NULL );\n+    VERIFY( !this->eback() );\n+    VERIFY( !this->gptr() );\n+    VERIFY( !this->egptr() );\n+    VERIFY( !this->pbase() );\n+    VERIFY( !this->pptr() );\n+    VERIFY( !this->epptr() );\n     return test;\n   }\n "}, {"sha": "0c5c63f337d26d663425ad31a3d76ddc9362a1cb", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/sgetc/wchar_t/1.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsgetc%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsgetc%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsgetc%2Fwchar_t%2F1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // 1999-10-11 bkoz\n \n-// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2009\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -40,12 +40,12 @@ class testbuf : public std::wstreambuf\n   check_pointers()\n   { \n     bool test __attribute__((unused)) = true;\n-    VERIFY( this->eback() == NULL );\n-    VERIFY( this->gptr() == NULL );\n-    VERIFY( this->egptr() == NULL );\n-    VERIFY( this->pbase() == NULL );\n-    VERIFY( this->pptr() == NULL );\n-    VERIFY( this->epptr() == NULL );\n+    VERIFY( !this->eback() );\n+    VERIFY( !this->gptr() );\n+    VERIFY( !this->egptr() );\n+    VERIFY( !this->pbase() );\n+    VERIFY( !this->pptr() );\n+    VERIFY( !this->epptr() );\n     return test;\n   }\n "}, {"sha": "d1530b18f3fbca464979cd80034cc4f9ebe222d9", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/sgetn/char/1.cc", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsgetn%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsgetn%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsgetn%2Fchar%2F1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,7 @@\n // 1999-10-11 bkoz\n \n-// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,\n+// 2007, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -40,12 +41,12 @@ class testbuf : public std::streambuf\n   check_pointers()\n   { \n     bool test __attribute__((unused)) = true;\n-    VERIFY( this->eback() == NULL );\n-    VERIFY( this->gptr() == NULL );\n-    VERIFY( this->egptr() == NULL );\n-    VERIFY( this->pbase() == NULL );\n-    VERIFY( this->pptr() == NULL );\n-    VERIFY( this->epptr() == NULL );\n+    VERIFY( !this->eback() );\n+    VERIFY( !this->gptr() );\n+    VERIFY( !this->egptr() );\n+    VERIFY( !this->pbase() );\n+    VERIFY( !this->pptr() );\n+    VERIFY( !this->epptr() );\n     return test;\n   }\n "}, {"sha": "66b4af5d3e663de47d03163d7d2e6080a994af86", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/sgetn/wchar_t/1.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsgetn%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsgetn%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsgetn%2Fwchar_t%2F1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // 1999-10-11 bkoz\n \n-// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2009\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -40,12 +40,12 @@ class testbuf : public std::wstreambuf\n   check_pointers()\n   { \n     bool test __attribute__((unused)) = true;\n-    VERIFY( this->eback() == NULL );\n-    VERIFY( this->gptr() == NULL );\n-    VERIFY( this->egptr() == NULL );\n-    VERIFY( this->pbase() == NULL );\n-    VERIFY( this->pptr() == NULL );\n-    VERIFY( this->epptr() == NULL );\n+    VERIFY( !this->eback() );\n+    VERIFY( !this->gptr() );\n+    VERIFY( !this->egptr() );\n+    VERIFY( !this->pbase() );\n+    VERIFY( !this->pptr() );\n+    VERIFY( !this->epptr() );\n     return test;\n   }\n "}, {"sha": "440d82b5abe747e496e0315c36f6eb3c26e7fcd8", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/sputc/char/1057.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputc%2Fchar%2F1057.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputc%2Fchar%2F1057.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputc%2Fchar%2F1057.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // 1999-10-11 bkoz\n \n-// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2009\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -32,7 +32,7 @@ class nullsetpbuf : public std::streambuf\n   nullsetpbuf()\n   {\n     setp(foo, foo + 64);\n-    setp(NULL, NULL);\n+    setp(0, 0);\n   }\n };\n "}, {"sha": "5e7166fdd3d71b96c3c6ec4423cbaf4edc4cfc3d", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/sputc/wchar_t/1057.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputc%2Fwchar_t%2F1057.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputc%2Fwchar_t%2F1057.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputc%2Fwchar_t%2F1057.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // 1999-10-11 bkoz\n \n-// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2009\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -32,7 +32,7 @@ class nullsetpbuf : public std::wstreambuf\n   nullsetpbuf()\n   {\n     setp(foo, foo + 64);\n-    setp(NULL, NULL);\n+    setp(0, 0);\n   }\n };\n "}, {"sha": "2874b0eea4eb33202454df40cf0062e5b7b5899b", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/sputn/char/1.cc", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputn%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputn%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputn%2Fchar%2F1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,7 @@\n // 1999-10-11 bkoz\n \n-// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,\n+// 2007, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -40,12 +41,12 @@ class testbuf : public std::streambuf\n   check_pointers()\n   { \n     bool test __attribute__((unused)) = true;\n-    VERIFY( this->eback() == NULL );\n-    VERIFY( this->gptr() == NULL );\n-    VERIFY( this->egptr() == NULL );\n-    VERIFY( this->pbase() == NULL );\n-    VERIFY( this->pptr() == NULL );\n-    VERIFY( this->epptr() == NULL );\n+    VERIFY( !this->eback() );\n+    VERIFY( !this->gptr() );\n+    VERIFY( !this->egptr() );\n+    VERIFY( !this->pbase() );\n+    VERIFY( !this->pptr() );\n+    VERIFY( !this->epptr() );\n     return test;\n   }\n "}, {"sha": "dda78bde45717bcf0c420fe028ae3a1f091f984a", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/sputn/char/1057.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputn%2Fchar%2F1057.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputn%2Fchar%2F1057.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputn%2Fchar%2F1057.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // 1999-10-11 bkoz\n \n-// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2009\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -32,7 +32,7 @@ class nullsetpbuf : public std::streambuf\n   nullsetpbuf()\n   {\n     setp(foo, foo + 64);\n-    setp(NULL, NULL);\n+    setp(0, 0);\n   }\n };\n "}, {"sha": "09b263b6c7b9a13ce8608d5298d55472358e376e", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/sputn/wchar_t/1.cc", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputn%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputn%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputn%2Fwchar_t%2F1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,7 @@\n // 1999-10-11 bkoz\n \n-// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,\n+// 2007, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -41,12 +42,12 @@ class testbuf : public std::wstreambuf\n   check_pointers()\n   { \n     bool test __attribute__((unused)) = true;\n-    VERIFY( this->eback() == NULL );\n-    VERIFY( this->gptr() == NULL );\n-    VERIFY( this->egptr() == NULL );\n-    VERIFY( this->pbase() == NULL );\n-    VERIFY( this->pptr() == NULL );\n-    VERIFY( this->epptr() == NULL );\n+    VERIFY( !this->eback() );\n+    VERIFY( !this->gptr() );\n+    VERIFY( !this->egptr() );\n+    VERIFY( !this->pbase() );\n+    VERIFY( !this->pptr() );\n+    VERIFY( !this->epptr() );\n     return test;\n   }\n "}, {"sha": "9b148bab93f34e92a035f775f00b6be2a092d0c4", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/sputn/wchar_t/1057.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputn%2Fwchar_t%2F1057.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputn%2Fwchar_t%2F1057.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputn%2Fwchar_t%2F1057.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // 1999-10-11 bkoz\n \n-// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2009\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -32,7 +32,7 @@ class nullsetpbuf : public std::wstreambuf\n   nullsetpbuf()\n   {\n     setp(foo, foo + 64);\n-    setp(NULL, NULL);\n+    setp(0, 0);\n   }\n };\n "}, {"sha": "f88f28e39a1cf13e600af3c04be7f6490031b4b8", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/sputc/char/1057.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputc%2Fchar%2F1057.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputc%2Fchar%2F1057.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputc%2Fchar%2F1057.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // 1999-10-11 bkoz\n \n-// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2009\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -32,7 +32,7 @@ class nullsetpbuf : public std::stringbuf\n   nullsetpbuf()\n   {\n     setp(foo, foo + 64);\n-    setp(NULL, NULL);\n+    setp(0, 0);\n   }\n };\n "}, {"sha": "ae07ebf30ed8dd74c16e0c272b47234279c0c4ae", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/sputc/wchar_t/1057.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputc%2Fwchar_t%2F1057.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputc%2Fwchar_t%2F1057.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputc%2Fwchar_t%2F1057.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // 1999-10-11 bkoz\n \n-// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2009\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -32,7 +32,7 @@ class nullsetpbuf : public std::wstringbuf\n   nullsetpbuf()\n   {\n     setp(foo, foo + 64);\n-    setp(NULL, NULL);\n+    setp(0, 0);\n   }\n };\n "}, {"sha": "c51f47a8d3406bbf16492d9704366df0a0b9b6b8", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/sputn/char/1057.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputn%2Fchar%2F1057.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputn%2Fchar%2F1057.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputn%2Fchar%2F1057.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // 1999-10-11 bkoz\n \n-// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2009\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -32,7 +32,7 @@ class nullsetpbuf : public std::stringbuf\n   nullsetpbuf()\n   {\n     setp(foo, foo + 64);\n-    setp(NULL, NULL);\n+    setp(0, 0);\n   }\n };\n "}, {"sha": "99f7a550993cae3b10dd1ae0dbe3db83fcbefdb6", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/sputn/wchar_t/1057.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputn%2Fwchar_t%2F1057.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputn%2Fwchar_t%2F1057.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputn%2Fwchar_t%2F1057.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // 1999-10-11 bkoz\n \n-// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2009\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -32,7 +32,7 @@ class nullsetpbuf : public std::wstringbuf\n   nullsetpbuf()\n   {\n     setp(foo, foo + 64);\n-    setp(NULL, NULL);\n+    setp(0, 0);\n   }\n };\n "}, {"sha": "eebebc20e3023dd2f250a012f11cdc9271ef7c3d", "filename": "libstdc++-v3/testsuite/27_io/objects/char/10.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F10.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F10.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F10.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // 2003-05-01  Petur Runolfsson  <peturr02@ru.is>\n \n-// Copyright (C) 2003, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,7 +32,7 @@ void test10()\n   const char* name = \"filebuf_virtuals-1.txt\";\n \n   FILE* ret = freopen(name, \"r\", stdin);\n-  VERIFY( ret != NULL );\n+  VERIFY( ret );\n \n   streampos p1 = cin.tellg();\n   VERIFY( p1 != streampos(-1) );"}, {"sha": "b7c0ac1df3da168b6be08050acfbccfa3a32a928", "filename": "libstdc++-v3/testsuite/27_io/objects/char/5268.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F5268.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F5268.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F5268.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // 2001-06-05 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001, 2002, 2003, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,7 +27,7 @@ void test04()\n   std::stringbuf b1;\n   std::cout.rdbuf( &b1 );\n   std::cout << \"hello\\n\";\n-  std::cout.rdbuf(NULL);\n+  std::cout.rdbuf(0);\n }\n \n int main()"}, {"sha": "1ad194cd81fcb9f1c606876754ed1cf3a8d58edf", "filename": "libstdc++-v3/testsuite/27_io/objects/char/9661-1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F9661-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F9661-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F9661-1.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -3,7 +3,7 @@\n \n // 2003-04-30  Petur Runolfsson <peturr02@ru.is>\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2009\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -58,7 +58,7 @@ bool test01()\n   if (child == 0)\n     {\n       FILE* file = fopen(name, \"r+\");\n-      VERIFY( file != NULL );\n+      VERIFY( file != 0 );\n       fputs(\"Whatever\\n\", file);\n       fflush(file);\n       s1.signal();"}, {"sha": "04571cc63edaf06ebd82083e2ed67d788906a805", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/5268.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F5268.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F5268.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F5268.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // 2003-05-01 Petur Runolfsson  <peturr02@ru.is>\n \n-// Copyright (C) 2001, 2002, 2003, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,7 +27,7 @@ void test04()\n   std::wstringbuf b1;\n   std::wcout.rdbuf( &b1 );\n   std::wcout << L\"hello\\n\";\n-  std::wcout.rdbuf(NULL);\n+  std::wcout.rdbuf(0);\n }\n \n int main()"}, {"sha": "ae2b76f248bfc7c4effcfeda34f452f4d55bf49d", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_address/cons/aggregate.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Fcons%2Faggregate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Fcons%2Faggregate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Fcons%2Faggregate.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,7 +1,7 @@\n // { dg-options \"-std=gnu++0x\" }\n // { dg-do compile }\n \n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -19,6 +19,7 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <atomic>\n+#include <cstddef>\n \n int main()\n {"}, {"sha": "b7e524a38f596874603f980b0f3ffbe4a8df3884", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_address/cons/single_value.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Fcons%2Fsingle_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Fcons%2Fsingle_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Fcons%2Fsingle_value.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -1,6 +1,6 @@\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,7 +22,7 @@\n int main()\n {\n   // Single value constructor.\n-  void* v = NULL;\n+  void* v = 0;\n   std::atomic_address a(v);\n   return 0;\n }"}, {"sha": "7e9d30b4f23b455c415717c4940b9ced9d909d3e", "filename": "libstdc++-v3/testsuite/30_threads/mutex/cons/assign_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fassign_neg.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -3,7 +3,7 @@\n // { dg-require-cstdint \"\" }\n // { dg-require-gthreads \"\" }\n \n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -33,4 +33,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 32 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 83 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 82 }"}, {"sha": "c1ef0511b8dcedf79e27e7442aac60a45cfd8b3e", "filename": "libstdc++-v3/testsuite/30_threads/mutex/cons/copy_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fcopy_neg.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -3,7 +3,7 @@\n // { dg-require-cstdint \"\" }\n // { dg-require-gthreads \"\" }\n \n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,4 +32,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 31 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 82 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 81 }"}, {"sha": "42af43939d5503fd55cd607955baf34d5f5e39e8", "filename": "libstdc++-v3/testsuite/30_threads/recursive_mutex/cons/assign_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fassign_neg.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -3,7 +3,7 @@\n // { dg-require-cstdint \"\" }\n // { dg-require-gthreads \"\" }\n \n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -33,4 +33,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 32 } \n-// { dg-error \"deleted function\" \"\" { target *-*-* } 135 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 134 }"}, {"sha": "53ff57deab8e9dee111656bc47f1203cc0a784e8", "filename": "libstdc++-v3/testsuite/30_threads/recursive_mutex/cons/copy_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fcopy_neg.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -3,7 +3,7 @@\n // { dg-require-cstdint \"\" }\n // { dg-require-gthreads \"\" }\n \n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,4 +32,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 31 } \n-// { dg-error \"deleted function\" \"\" { target *-*-* } 134 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 133 }"}, {"sha": "7fa642858824cebf789d46fc47f33c7da8799af6", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/cons/assign_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2Fassign_neg.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -3,7 +3,7 @@\n // { dg-require-cstdint \"\" }\n // { dg-require-gthreads \"\" }\n \n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -33,4 +33,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 32 } \n-// { dg-error \"deleted function\" \"\" { target *-*-* } 298 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 297 }"}, {"sha": "df1ca0bc9240659c96a9d7e3b1a32885963ced3b", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/cons/copy_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2Fcopy_neg.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -3,7 +3,7 @@\n // { dg-require-cstdint \"\" }\n // { dg-require-gthreads \"\" }\n \n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,4 +32,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 31 } \n-// { dg-error \"deleted function\" \"\" { target *-*-* } 297 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 296 }"}, {"sha": "11705794ac94c1fa364c573db2da17aeafc1873d", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fassign_neg.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -32,4 +32,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 31 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 149 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 148 }"}, {"sha": "898ad16350f0533cd4ccc33dd376ac5f7c0636a7", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fcopy_neg.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -31,5 +31,5 @@ void test01()\n }\n \n // { dg-error \"here\" \"\" { target *-*-* } 30 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 127 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 126 }\n // { dg-excess-errors \"In file included from\" }"}, {"sha": "45b2385242dbdfd1f261177ad9a7bb2ecc86014f", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/cons/assign_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc810787bb68de21538a5b3f50bf825e9382cdc/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2Fassign_neg.cc?ref=8fc810787bb68de21538a5b3f50bf825e9382cdc", "patch": "@@ -3,7 +3,7 @@\n // { dg-require-cstdint \"\" }\n // { dg-require-gthreads \"\" }\n \n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -33,4 +33,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 32 } \n-// { dg-error \"deleted function\" \"\" { target *-*-* } 193 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 192 }"}]}