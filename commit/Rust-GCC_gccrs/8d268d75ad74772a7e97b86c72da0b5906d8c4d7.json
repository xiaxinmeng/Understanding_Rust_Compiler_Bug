{"sha": "8d268d75ad74772a7e97b86c72da0b5906d8c4d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQyNjhkNzVhZDc0NzcyYTdlOTdiODZjNzJkYTBiNTkwNmQ4YzRkNw==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2020-10-01T09:08:58Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2020-10-01T10:53:36Z"}, "message": "[testsuite] Enable pr94600-{1,3}.c tests for nvptx\n\nWhen compiling test-case pr94600-1.c for nvptx, this gimple mem move:\n...\n  MEM[(volatile struct t0 *)655404B] ={v} a0[0];\n...\nis expanded into a memcpy, but when compiling pr94600-2.c instead, this similar\ngimple mem move:\n...\n  MEM[(volatile struct t0 *)655404B] ={v} a00;\n...\nis expanded into a 32-bit load/store pair.\n\nIn both cases, emit_block_move is called.\n\nIn the latter case, can_move_by_pieces (4 /* byte-size */, 32 /* bit-align */)\nis called, which returns true (because by_pieces_ninsns returns 1, which is\nsmaller than the MOVE_RATIO of 4).\n\nIn the former case, can_move_by_pieces (4 /* byte-size */, 8 /* bit-align */)\nis called, which returns false (because by_pieces_ninsns returns 4, which is\nnot smaller than the MOVE_RATIO of 4).\n\nSo the difference in code generation is explained by the alignment.  The\ndifference in alignment comes from the move sources: a0[0] vs. a00.  Both\nhave the same type with 8-bit alignment, but a00 is on stack, which based on\nthe base stack align and stack variable placement happens to result in a\n32-bit alignment.\n\nEnable test-cases pr94600-{1,3}.c for nvptx by forcing the currently 8-byte\naligned variables to have a 32-bit alignment for STRICT_ALIGNMENT targets.\n\nTested on nvptx.\n\ngcc/testsuite/ChangeLog:\n\n2020-10-01  Tom de Vries  <tdevries@suse.de>\n\n\t* gcc.dg/pr94600-1.c: Force 32-bit alignment for a0 for !non_strict_align\n\ttargets.  Remove target clauses from scan tests.\n\t* gcc.dg/pr94600-3.c: Same.", "tree": {"sha": "f383eb3e1828a358a44eae3e5c455215d2f55674", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f383eb3e1828a358a44eae3e5c455215d2f55674"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d268d75ad74772a7e97b86c72da0b5906d8c4d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d268d75ad74772a7e97b86c72da0b5906d8c4d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d268d75ad74772a7e97b86c72da0b5906d8c4d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d268d75ad74772a7e97b86c72da0b5906d8c4d7/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56da736cc6ced0f1c339744321a14ae569db8606", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56da736cc6ced0f1c339744321a14ae569db8606", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56da736cc6ced0f1c339744321a14ae569db8606"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "149e4f35dbee9dd06308347e080121a8be883276", "filename": "gcc/testsuite/gcc.dg/pr94600-1.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d268d75ad74772a7e97b86c72da0b5906d8c4d7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94600-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d268d75ad74772a7e97b86c72da0b5906d8c4d7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94600-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94600-1.c?ref=8d268d75ad74772a7e97b86c72da0b5906d8c4d7", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target size32plus } */\n /* { dg-options \"-fdump-rtl-final -O2\" } */\n+/* { dg-additional-options \"-DALIGN_VAR\" { target { ! non_strict_align } } } */\n \n /* Assignments to a whole struct of suitable size (32 bytes) must not be\n    picked apart into field accesses. */\n@@ -12,7 +13,11 @@ typedef struct {\n   unsigned int f3 : 7;\n } t0;\n \n-static t0 a0[] = {\n+static t0 a0[]\n+#ifdef ALIGN_VAR\n+__attribute__((aligned (4)))\n+#endif\n+  = {\n  { .f0 = 7, .f1 = 99, .f3 = 1, },\n  { .f0 = 7, .f1 = 251, .f3 = 1, },\n  { .f0 = 8, .f1 = 127, .f3 = 5, },\n@@ -32,5 +37,5 @@ foo(void)\n }\n \n /* The only volatile accesses should be the obvious writes.  */\n-/* { dg-final { scan-rtl-dump-times {\\(mem/v} 6 \"final\" { target { non_strict_align || pcc_bitfield_type_matters } } } } */\n-/* { dg-final { scan-rtl-dump-times {\\(set \\(mem/v} 6 \"final\" { target { non_strict_align || pcc_bitfield_type_matters } } } } */\n+/* { dg-final { scan-rtl-dump-times {\\(mem/v} 6 \"final\" } } */\n+/* { dg-final { scan-rtl-dump-times {\\(set \\(mem/v} 6 \"final\" } } */"}, {"sha": "2fce9f13cfaf2ba3f590618601e21e5f879c6218", "filename": "gcc/testsuite/gcc.dg/pr94600-3.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d268d75ad74772a7e97b86c72da0b5906d8c4d7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94600-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d268d75ad74772a7e97b86c72da0b5906d8c4d7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94600-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94600-3.c?ref=8d268d75ad74772a7e97b86c72da0b5906d8c4d7", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target size32plus } */\n /* { dg-options \"-fdump-rtl-final -O2 -fno-unroll-loops\" } */\n+/* { dg-additional-options \"-DALIGN_VAR\" { target { ! non_strict_align } } } */\n \n /* Same-address version of pr94600-1.c. */\n \n@@ -11,7 +12,11 @@ typedef struct {\n   unsigned int f3 : 7;\n } t0;\n \n-static t0 a0[] = {\n+static t0 a0[]\n+#ifdef ALIGN_VAR\n+__attribute__((aligned (4)))\n+#endif\n+  = {\n  { .f0 = 7, .f1 = 99, .f3 = 1, },\n  { .f0 = 7, .f1 = 251, .f3 = 1, },\n  { .f0 = 8, .f1 = 127, .f3 = 5, },\n@@ -31,5 +36,5 @@ foo(void)\n }\n \n /* The loop isn't unrolled. */\n-/* { dg-final { scan-rtl-dump-times {\\(mem/v} 1 \"final\" { target { non_strict_align || pcc_bitfield_type_matters } } } } */\n-/* { dg-final { scan-rtl-dump-times {\\(set \\(mem/v} 1 \"final\" { target { non_strict_align || pcc_bitfield_type_matters } } } } */\n+/* { dg-final { scan-rtl-dump-times {\\(mem/v} 1 \"final\" } } */\n+/* { dg-final { scan-rtl-dump-times {\\(set \\(mem/v} 1 \"final\" } } */"}]}