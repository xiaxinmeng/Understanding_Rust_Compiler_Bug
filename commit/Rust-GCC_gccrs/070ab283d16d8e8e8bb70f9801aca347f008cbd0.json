{"sha": "070ab283d16d8e8e8bb70f9801aca347f008cbd0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDcwYWIyODNkMTZkOGU4ZThiYjcwZjk4MDFhY2EzNDdmMDA4Y2JkMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-11T09:59:18Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-11T09:59:18Z"}, "message": "icf: Check return type of internal fn calls [PR99517]\n\nThe following testcase is miscompiled, because IPA-ICF considers the two\nfunctions identical.  They aren't, the types of the .VEC_CONVERT call\nlhs is different.  But for calls to internal functions, there is no\nfntype nor callee with a function type to compare, so all we compare\nis just the ifn, arguments and some call flags.\n\nThe following patch fixes it by checking the internal fn calls like e.g. gimple\nassignments where the type of the lhs is checked too.\n\n2021-03-11  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR ipa/99517\n\t* ipa-icf-gimple.c (func_checker::compare_gimple_call): For internal\n\tfunction calls with lhs fail if the lhs don't have compatible types.\n\n\t* gcc.target/i386/avx2-pr99517-1.c: New test.\n\t* gcc.target/i386/avx2-pr99517-2.c: New test.", "tree": {"sha": "a5c04f1c66814c685331894991a0e9676491b400", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5c04f1c66814c685331894991a0e9676491b400"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/070ab283d16d8e8e8bb70f9801aca347f008cbd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/070ab283d16d8e8e8bb70f9801aca347f008cbd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/070ab283d16d8e8e8bb70f9801aca347f008cbd0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/070ab283d16d8e8e8bb70f9801aca347f008cbd0/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa27696b798b34730f5266cac2adba9178ebc3ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa27696b798b34730f5266cac2adba9178ebc3ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa27696b798b34730f5266cac2adba9178ebc3ae"}], "stats": {"total": 55, "additions": 54, "deletions": 1}, "files": [{"sha": "edf5f0256273bb90096733c479777afa24dd5c4a", "filename": "gcc/ipa-icf-gimple.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070ab283d16d8e8e8bb70f9801aca347f008cbd0/gcc%2Fipa-icf-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070ab283d16d8e8e8bb70f9801aca347f008cbd0/gcc%2Fipa-icf-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf-gimple.c?ref=070ab283d16d8e8e8bb70f9801aca347f008cbd0", "patch": "@@ -667,7 +667,7 @@ func_checker::compare_gimple_call (gcall *s1, gcall *s2)\n   tree fntype1 = gimple_call_fntype (s1);\n   tree fntype2 = gimple_call_fntype (s2);\n \n-  /* For direct calls we verify that types are comopatible so if we matced\n+  /* For direct calls we verify that types are compatible so if we matched\n      callees, callers must match, too.  For indirect calls however verify\n      function type.  */\n   if (!gimple_call_fndecl (s1))\n@@ -703,6 +703,14 @@ func_checker::compare_gimple_call (gcall *s1, gcall *s2)\n   t1 = gimple_get_lhs (s1);\n   t2 = gimple_get_lhs (s2);\n \n+  /* For internal calls, lhs types need to be verified, as neither fntype nor\n+     callee comparisons can catch that.  */\n+  if (gimple_call_internal_p (s1)\n+      && t1\n+      && t2\n+      && !compatible_types_p (TREE_TYPE (t1), TREE_TYPE (t2)))\n+    return return_false_with_msg (\"GIMPLE internal call LHS type mismatch\");\n+\n   return compare_operand (t1, t2, get_operand_access_type (&map, t1));\n }\n "}, {"sha": "f1d7f82cde82c9940a347bf294fb1a1d47f8a7f0", "filename": "gcc/testsuite/gcc.target/i386/avx2-pr99517-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070ab283d16d8e8e8bb70f9801aca347f008cbd0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr99517-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070ab283d16d8e8e8bb70f9801aca347f008cbd0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr99517-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr99517-1.c?ref=070ab283d16d8e8e8bb70f9801aca347f008cbd0", "patch": "@@ -0,0 +1,25 @@\n+/* PR ipa/99517 */\n+/* { dg-do run { target avx2 } } */\n+/* { dg-additional-sources \"avx2-pr99517-2.c\" } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include \"avx2-check.h\"\n+\n+typedef signed char v32qi __attribute__((vector_size(32)));\n+typedef int v4si __attribute__((vector_size(16)));\n+typedef long long int v4di __attribute__((vector_size(32)));\n+typedef double v4df __attribute__((vector_size(32)));\n+extern v32qi foo (v4si);\n+extern v32qi bar (v4si);\n+\n+static void\n+avx2_test (void)\n+{\n+  v4si a = { 1, -2, 3, -4 };\n+  __asm (\"\" : \"+x\" (a));\n+  v4di b = (v4di) bar (a);\n+  v4df c = (v4df) foo (a);\n+  if (b[0] != 1 || c[0] != 1.0 || b[1] != -2 || c[1] != -2.0\n+      || b[2] != 3 || c[2] != 3.0 || b[3] != -4 || c[3] != -4.0)\n+    __builtin_abort ();\n+}"}, {"sha": "80bd39585cb1742d8c0e718852d750daecb43534", "filename": "gcc/testsuite/gcc.target/i386/avx2-pr99517-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070ab283d16d8e8e8bb70f9801aca347f008cbd0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr99517-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070ab283d16d8e8e8bb70f9801aca347f008cbd0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr99517-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr99517-2.c?ref=070ab283d16d8e8e8bb70f9801aca347f008cbd0", "patch": "@@ -0,0 +1,20 @@\n+/* PR ipa/99517 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+typedef signed char v32qi __attribute__((vector_size(32)));\n+typedef int v4si __attribute__((vector_size(16)));\n+typedef long long int v4di __attribute__((vector_size(32)));\n+typedef double v4df __attribute__((vector_size(32)));\n+\n+v32qi\n+foo (v4si x)\n+{\n+  return (v32qi) __builtin_convertvector (x, v4df);\n+}\n+\n+v32qi\n+bar (v4si x)\n+{\n+  return (v32qi) __builtin_convertvector (x, v4di);\n+}"}]}