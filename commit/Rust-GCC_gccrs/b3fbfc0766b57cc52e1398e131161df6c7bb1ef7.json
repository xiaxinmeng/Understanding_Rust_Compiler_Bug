{"sha": "b3fbfc0766b57cc52e1398e131161df6c7bb1ef7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNmYmZjMDc2NmI1N2NjNTJlMTM5OGUxMzExNjFkZjZjN2JiMWVmNw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2002-09-05T20:58:49Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2002-09-05T20:58:49Z"}, "message": "frv.c (frv_unique_section, [...]): Delete.\n\n\t* frv.c (frv_unique_section, frv_select_section,\n\tfrv_select_rtx_section): Delete.\n\t(frv_in_small_data_p): New.\n\t(TARGET_ASM_UNIQUE_SECTION, TARGET_ASM_SELECT_SECTION,\n\tTARGET_ASM_SELECT_RTX_SECTION): Delete.\n\t(TARGET_IN_SMALL_DATA_P): Define.\n\nFrom-SVN: r56864", "tree": {"sha": "d378cc443c11260f9dcb3ef77e557101195a5ee0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d378cc443c11260f9dcb3ef77e557101195a5ee0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3fbfc0766b57cc52e1398e131161df6c7bb1ef7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3fbfc0766b57cc52e1398e131161df6c7bb1ef7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3fbfc0766b57cc52e1398e131161df6c7bb1ef7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3fbfc0766b57cc52e1398e131161df6c7bb1ef7/comments", "author": null, "committer": null, "parents": [{"sha": "41e34bab133b719c014844f0d74248aa14d82394", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41e34bab133b719c014844f0d74248aa14d82394", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41e34bab133b719c014844f0d74248aa14d82394"}], "stats": {"total": 150, "additions": 22, "deletions": 128}, "files": [{"sha": "e33cd4943e02cbeb53d01b03e7d3d7c4fa94c393", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3fbfc0766b57cc52e1398e131161df6c7bb1ef7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3fbfc0766b57cc52e1398e131161df6c7bb1ef7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b3fbfc0766b57cc52e1398e131161df6c7bb1ef7", "patch": "@@ -1,3 +1,12 @@\n+2002-09-05  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* frv.c (frv_unique_section, frv_select_section,\n+\tfrv_select_rtx_section): Delete.\n+\t(frv_in_small_data_p): New.\n+\t(TARGET_ASM_UNIQUE_SECTION, TARGET_ASM_SELECT_SECTION,\n+\tTARGET_ASM_SELECT_RTX_SECTION): Delete.\n+\t(TARGET_IN_SMALL_DATA_P): Define.\n+\n 2002-09-05  Dale Johannesen  <dalej@apple.com>\n \n \t* reload1.c (reload):  Retain only those memory clobbers"}, {"sha": "4ef94e4ab50bd99aa6e16f106f5e2fbd273b9114", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 13, "deletions": 128, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3fbfc0766b57cc52e1398e131161df6c7bb1ef7/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3fbfc0766b57cc52e1398e131161df6c7bb1ef7/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=b3fbfc0766b57cc52e1398e131161df6c7bb1ef7", "patch": "@@ -276,11 +276,9 @@ static void frv_function_epilogue\t\tPARAMS ((FILE *, HOST_WIDE_INT));\n static bool frv_assemble_integer\t\tPARAMS ((rtx, unsigned, int));\n static const char * frv_strip_name_encoding\tPARAMS ((const char *));\n static void frv_encode_section_info\t\tPARAMS ((tree, int));\n-static void frv_unique_section\t\t\tPARAMS ((tree, int));\n static void frv_init_builtins\t\t\tPARAMS ((void));\n static rtx frv_expand_builtin\t\t\tPARAMS ((tree, rtx, rtx, enum machine_mode, int));\n-static void frv_select_section\t\t\tPARAMS ((tree, int, unsigned HOST_WIDE_INT));\n-static void frv_select_rtx_section\t\tPARAMS ((enum machine_mode, rtx, unsigned HOST_WIDE_INT));\n+static bool frv_in_small_data_p\t\t\tPARAMS ((tree));\n \f\n /* Initialize the GCC target structure.  */\n #undef  TARGET_ASM_FUNCTION_PROLOGUE\n@@ -293,16 +291,12 @@ static void frv_select_rtx_section\t\tPARAMS ((enum machine_mode, rtx, unsigned HO\n #define TARGET_STRIP_NAME_ENCODING frv_strip_name_encoding\n #undef  TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO frv_encode_section_info\n-#undef  TARGET_ASM_UNIQUE_SECTION\n-#define TARGET_ASM_UNIQUE_SECTION frv_unique_section\n #undef TARGET_INIT_BUILTINS\n #define TARGET_INIT_BUILTINS frv_init_builtins\n #undef TARGET_EXPAND_BUILTIN\n #define TARGET_EXPAND_BUILTIN frv_expand_builtin\n-#undef TARGET_ASM_SELECT_SECTION\n-#define TARGET_ASM_SELECT_SECTION frv_select_section\n-#undef TARGET_ASM_SELECT_RTX_SECTION\n-#define TARGET_ASM_SELECT_RTX_SECTION frv_select_rtx_section\n+#undef TARGET_IN_SMALL_DATA_P\n+#define TARGET_IN_SMALL_DATA_P frv_in_small_data_p\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -629,88 +623,6 @@ frv_optimization_options (level, size)\n     }\n }\n \n-\f\n-/* A C statement or statements to switch to the appropriate section for output\n-   of EXP.  You can assume that EXP is either a `VAR_DECL' node or a constant\n-   of some sort.  RELOC indicates whether the initial value of EXP requires\n-   link-time relocations.  Select the section by calling `text_section' or one\n-   of the alternatives for other sections.\n-\n-   Do not define this macro if you put all read-only variables and constants in\n-   the read-only data section (usually the text section).\n-\n-   Defined in svr4.h.  */\n-\n-static void\n-frv_select_section (decl, reloc, align)\n-     tree decl;\n-     int reloc;\n-     unsigned HOST_WIDE_INT align ATTRIBUTE_UNUSED;\n-{\n-  int size = int_size_in_bytes (TREE_TYPE (decl));\n-\n-  if (TREE_CODE (decl) == STRING_CST)\n-    {\n-      if (! flag_writable_strings)\n-\t readonly_data_section ();\n-      else\n-\tdata_section ();\n-    }\n-  else if (TREE_CODE (decl) == VAR_DECL)\n-    {\n-      if ((flag_pic && reloc)\n-          || !TREE_READONLY (decl)\n-          || TREE_SIDE_EFFECTS (decl)\n-          || !DECL_INITIAL (decl)\n-          || (DECL_INITIAL (decl) != error_mark_node\n-              && !TREE_CONSTANT (DECL_INITIAL (decl))))\n-        {\n-          if (SDATA_NAME_P (XSTR (XEXP (DECL_RTL (decl), 0), 0))\n-              && size > 0\n-              && size <= g_switch_value)\n-\t    sdata_section ();\n-          else\n-            data_section ();\n-        }\n-      else\n-        {\n-          if (SDATA_NAME_P (XSTR (XEXP (DECL_RTL (decl), 0), 0))\n-              && size > 0\n-              && size <= g_switch_value)\n-            sdata_section ();\n-          else\n-             readonly_data_section ();\n-        }\n-    }\n-  else\n-     readonly_data_section ();\n-}\n-\n-\f\n-/* A C statement or statements to switch to the appropriate section for output\n-   of RTX in mode MODE.  You can assume that OP is some kind of constant in\n-   RTL.  The argument MODE is redundant except in the case of a `const_int'\n-   rtx.  Select the section by calling `text_section' or one of the\n-   alternatives for other sections.\n-\n-   Do not define this macro if you put all constants in the read-only data\n-   section.\n-\n-   Defined in svr4.h.  */\n-\n-static void\n-frv_select_rtx_section (mode, op, align)\n-     enum machine_mode mode;\n-     rtx op ATTRIBUTE_UNUSED;\n-     unsigned HOST_WIDE_INT align ATTRIBUTE_UNUSED;\n-{\n-  int size = (int) GET_MODE_SIZE (mode);\n-  if (size > 0 && size <= g_switch_value)\n-    sdata_section ();\n-  else\n-    readonly_data_section ();\n-}\n-\n \f\n /* Return true if NAME (a STRING_CST node) begins with PREFIX.  */\n \n@@ -783,43 +695,6 @@ frv_encode_section_info (decl, first)\n     }\n }\n \n-static void\n-frv_unique_section (decl, reloc)\n-     tree decl;\n-     int reloc;\n-{\n-  int len;\n-  int sec;\n-  const char *name;\n-  char *string;\n-  const char *prefix;\n-  static const char *const prefixes[4][2] =\n-    {\n-      { \".text.\", \".gnu.linkonce.t.\" },\n-      { \".rodata.\", \".gnu.linkonce.r.\" },\n-      { \".data.\", \".gnu.linkonce.d.\" },\n-      { \".sdata.\", \".gnu.linkonce.s.\" }\n-    };\n-\n-  if (TREE_CODE (decl) == FUNCTION_DECL)\n-    sec = 0;\n-  else if (decl_readonly_section (decl, reloc))\n-    sec = 1;\n-  else if (SDATA_NAME_P (XSTR (XEXP (DECL_RTL (decl), 0), 0)))\n-    sec = 3;\n-  else\n-    sec = 2;\n-\n-  name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n-  name = (* targetm.strip_name_encoding) (name);\n-  prefix = prefixes[sec][DECL_ONE_ONLY (decl)];\n-  len = strlen (name) + strlen (prefix);\n-  string = alloca (len + 1);\n-\n-  sprintf (string, \"%s%s\", prefix, name);\n-\n-  DECL_SECTION_NAME (decl) = build_string (len, string);\n-}\n \f\n /* Zero or more C statements that may conditionally modify two variables\n    `fixed_regs' and `call_used_regs' (both of type `char []') after they have\n@@ -9889,3 +9764,13 @@ frv_strip_name_encoding (str)\n     str++;\n   return str;\n }\n+\n+static bool\n+frv_in_small_data_p (decl)\n+     tree decl;\n+{\n+  HOST_WIDE_INT size = int_size_in_bytes (TREE_TYPE (decl));\n+\n+  return symbol_ref_small_data_p (XEXP (DECL_RTL (decl), 0))\n+    && size > 0 && size <= g_switch_value;\n+}"}]}