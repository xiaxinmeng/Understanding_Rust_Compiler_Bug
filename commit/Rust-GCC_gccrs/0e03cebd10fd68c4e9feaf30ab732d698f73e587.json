{"sha": "0e03cebd10fd68c4e9feaf30ab732d698f73e587", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUwM2NlYmQxMGZkNjhjNGU5ZmVhZjMwYWI3MzJkNjk4ZjczZTU4Nw==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2017-04-25T12:03:19Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2017-04-25T12:03:19Z"}, "message": "[ARC] Differentiate between ARCv1 and ARCv2 'h'-reg class for CMP insns.\n\ngcc/\n2017-04-25  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* config/arc/arc.md (cmpsi_cc_insn_mixed): Use 'h' register\n\tconstraint.\n\t(cmpsi_cc_c_insn): Likewise.\n\t(cbranchsi4_scratch): Compute proper instruction length using\n\tcompact_hreg_operand.\n\t* config/arc/predicates.md (compact_hreg_operand): New predicate.\n\nFrom-SVN: r247194", "tree": {"sha": "50fa8ace1747838327c3821f058078c6665b94e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50fa8ace1747838327c3821f058078c6665b94e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e03cebd10fd68c4e9feaf30ab732d698f73e587", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e03cebd10fd68c4e9feaf30ab732d698f73e587", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e03cebd10fd68c4e9feaf30ab732d698f73e587", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e03cebd10fd68c4e9feaf30ab732d698f73e587/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bac865a217a819eb5cf90af6962904241168f167", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bac865a217a819eb5cf90af6962904241168f167", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bac865a217a819eb5cf90af6962904241168f167"}], "stats": {"total": 50, "additions": 38, "deletions": 12}, "files": [{"sha": "7fb9ee86c2816a0021a97ac32da8422120a7378e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e03cebd10fd68c4e9feaf30ab732d698f73e587/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e03cebd10fd68c4e9feaf30ab732d698f73e587/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e03cebd10fd68c4e9feaf30ab732d698f73e587", "patch": "@@ -1,3 +1,12 @@\n+2017-04-25  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc.md (cmpsi_cc_insn_mixed): Use 'h' register\n+\tconstraint.\n+\t(cmpsi_cc_c_insn): Likewise.\n+\t(cbranchsi4_scratch): Compute proper instruction length using\n+\tcompact_hreg_operand.\n+\t* config/arc/predicates.md (compact_hreg_operand): New predicate.\n+\n 2017-04-25  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/80509"}, {"sha": "802c3e90bdd87b1e9da30a3f20dcb6c1fe633da7", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e03cebd10fd68c4e9feaf30ab732d698f73e587/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e03cebd10fd68c4e9feaf30ab732d698f73e587/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=0e03cebd10fd68c4e9feaf30ab732d698f73e587", "patch": "@@ -3458,15 +3458,16 @@\n ;; modifed cc user if second, but not first operand is a compact register.\n (define_insn \"cmpsi_cc_insn_mixed\"\n   [(set (reg:CC CC_REG)\n-\t(compare:CC (match_operand:SI 0 \"register_operand\" \"Rcq#q,  h, c, c,qRcq,c\")\n-\t\t    (match_operand:SI 1 \"nonmemory_operand\"   \"cO,Cm1,cI,cL, Cal,Cal\")))]\n+\t(compare:CC (match_operand:SI 0 \"register_operand\" \"Rcq#q,Rcqq,  h, c, c,qRcq,c\")\n+\t\t    (match_operand:SI 1 \"nonmemory_operand\"   \"cO,  hO,Cm1,cI,cL, Cal,Cal\")))]\n   \"\"\n   \"cmp%? %0,%B1%&\"\n   [(set_attr \"type\" \"compare\")\n-   (set_attr \"iscompact\" \"true,true,false,false,true_limm,false\")\n-   (set_attr \"predicable\" \"no,no,no,yes,no,yes\")\n+   (set_attr \"iscompact\" \"true,true,true,false,false,true_limm,false\")\n+   (set_attr \"predicable\" \"no,no,no,no,yes,no,yes\")\n    (set_attr \"cond\" \"set\")\n-   (set_attr \"length\" \"*,*,4,4,*,8\")])\n+   (set_attr \"length\" \"*,*,*,4,4,*,8\")\n+   (set_attr \"cpu_facility\" \"av1,av2,*,*,*,*,*\")])\n \n (define_insn \"*cmpsi_cc_zn_insn\"\n   [(set (reg:CC_ZN CC_REG)\n@@ -3542,14 +3543,15 @@\n \n (define_insn \"*cmpsi_cc_c_insn\"\n   [(set (reg:CC_C CC_REG)\n-\t(compare:CC_C (match_operand:SI 0 \"register_operand\"  \"Rcqq,  h, c,Rcqq,  c\")\n-\t\t      (match_operand:SI 1 \"nonmemory_operand\"   \"cO,Cm1,cI, Cal,Cal\")))]\n+\t(compare:CC_C (match_operand:SI 0 \"register_operand\"  \"Rcqq,Rcqq,  h, c,Rcqq,  c\")\n+\t\t      (match_operand:SI 1 \"nonmemory_operand\"   \"cO,  hO,Cm1,cI, Cal,Cal\")))]\n   \"\"\n   \"cmp%? %0,%S1%&\"\n   [(set_attr \"type\" \"compare\")\n-   (set_attr \"iscompact\" \"true,true,false,true_limm,false\")\n+   (set_attr \"iscompact\" \"true,true,true,false,true_limm,false\")\n    (set_attr \"cond\" \"set\")\n-   (set_attr \"length\" \"*,*,4,*,8\")])\n+   (set_attr \"length\" \"*,*,*,4,*,8\")\n+   (set_attr \"cpu_facility\" \"av1,av2,*,*,*,*\")])\n \n ;; Next come the scc insns.\n \n@@ -4877,7 +4879,7 @@\n \t\t return \\\"br%d0%* %1, %B2, %^%l3\\\";\n        /* FALLTHRU */\n        case 6: case 10:\n-       case 12:return \\\"cmp%? %1, %B2\\\\n\\\\tb%d0%* %^%l3%&;br%d0 out of range\\\";\n+       case 12:return \\\"cmp%? %1, %B2\\\\n\\\\tb%d0%* %^%l3%& ;br%d0 out of range\\\";\n        default: fprintf (stderr, \\\"unexpected length %d\\\\n\\\", get_attr_length (insn)); fflush (stderr); gcc_unreachable ();\n      }\n    \"\n@@ -4907,13 +4909,15 @@\n \t\t    (minus (const_int 244)\n \t\t\t   (symbol_ref \"get_attr_delay_slot_length (insn)\"))))\n \t   (const_int 4)\n-\t   (match_operand:SI 1 \"compact_register_operand\" \"\")\n+\t   (and (match_operand:SI 1 \"compact_register_operand\" \"\")\n+\t\t(match_operand:SI 2 \"compact_hreg_operand\" \"\"))\n \t   (const_int 6)]\n \t  (const_int 8))]\n \t (cond [(and (ge (minus (match_dup 3) (pc)) (const_int -256))\n \t\t     (le (minus (match_dup 3) (pc)) (const_int 244)))\n \t\t(const_int 8)\n-\t\t(match_operand:SI 1 \"compact_register_operand\" \"\")\n+\t\t(and (match_operand:SI 1 \"compact_register_operand\" \"\")\n+\t\t     (match_operand:SI 2 \"compact_hreg_operand\" \"\"))\n \t\t(const_int 10)]\n \t       (const_int 12))))\n    (set (attr \"iscompact\")"}, {"sha": "f4c2a80f2be84080ad7ccc1bffee097c53a3cb78", "filename": "gcc/config/arc/predicates.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e03cebd10fd68c4e9feaf30ab732d698f73e587/gcc%2Fconfig%2Farc%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e03cebd10fd68c4e9feaf30ab732d698f73e587/gcc%2Fconfig%2Farc%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Fpredicates.md?ref=0e03cebd10fd68c4e9feaf30ab732d698f73e587", "patch": "@@ -189,6 +189,19 @@\n   }\n )\n \n+(define_predicate \"compact_hreg_operand\"\n+  (match_code \"reg, subreg\")\n+  {\n+     if ((GET_MODE (op) != mode) && (mode != VOIDmode))\n+\t return 0;\n+\n+      return (GET_CODE (op) == REG)\n+      && (REGNO (op) >= FIRST_PSEUDO_REGISTER\n+\t\t|| (TARGET_V2 && REGNO (op) <= 31 && REGNO (op) != 30)\n+\t\t|| !TARGET_V2);\n+  }\n+)\n+\n ;; Return true if OP is an acceptable memory operand for ARCompact\n ;; 16-bit store instructions\n (define_predicate \"compact_store_memory_operand\""}]}