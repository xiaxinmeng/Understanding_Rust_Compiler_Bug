{"sha": "09c239f69814c6c85f5eba1b57e50d8a9ee1acae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDljMjM5ZjY5ODE0YzZjODVmNWViYTFiNTdlNTBkOGE5ZWUxYWNhZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2005-03-15T15:46:15Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-03-15T15:46:15Z"}, "message": "s-osinte-tru64.ads, [...] (Get_Stack_Base): New function\n\n2005-03-08  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* s-osinte-tru64.ads, s-osinte-tru64.adb (Get_Stack_Base): New function\n\t(Hide_Yellow_Zone): New procedure to hide the Yellow Zone of the\n\tcalling thread.\n\t(Stack_Base_Available): New flag.\n\t(Get_Page_Size): New overloaded functions imported from C.\n\t(PROT_NONE, PROT_READ, PROT_WRITE, PROT_EXEC, PROT_ALL,\n\tPROT_ON, PROT_OFF): New constants.\n\t(mprotect): New function imported from C.\n\t(pthread_teb_t): New record type.\n\n\t* s-taprop-tru64.adb: (Enter_Task): Invoke Hide_Yellow_Zone.\n\t(Create_Task): Account for the Yellow Zone and the guard page.\n\nFrom-SVN: r96479", "tree": {"sha": "3cff2a9ec57434d950b3dfe4e92e7a0c57f3a517", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3cff2a9ec57434d950b3dfe4e92e7a0c57f3a517"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09c239f69814c6c85f5eba1b57e50d8a9ee1acae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09c239f69814c6c85f5eba1b57e50d8a9ee1acae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09c239f69814c6c85f5eba1b57e50d8a9ee1acae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09c239f69814c6c85f5eba1b57e50d8a9ee1acae/comments", "author": null, "committer": null, "parents": [{"sha": "0b6eb8e13c5aa7d890209323cdcbf511d1b4a8dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b6eb8e13c5aa7d890209323cdcbf511d1b4a8dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b6eb8e13c5aa7d890209323cdcbf511d1b4a8dc"}], "stats": {"total": 137, "additions": 121, "deletions": 16}, "files": [{"sha": "0733d8abec5fbb14b60be609a52a8990d9d36c4b", "filename": "gcc/ada/s-osinte-tru64.adb", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09c239f69814c6c85f5eba1b57e50d8a9ee1acae/gcc%2Fada%2Fs-osinte-tru64.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09c239f69814c6c85f5eba1b57e50d8a9ee1acae/gcc%2Fada%2Fs-osinte-tru64.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-tru64.adb?ref=09c239f69814c6c85f5eba1b57e50d8a9ee1acae", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1998-2002, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1998-2005, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,7 +31,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This is the DEC Unix version of this package.\n+--  This is the DEC Unix version of this package\n \n --  This package encapsulates all direct interfaces to OS services\n --  that are needed by children of System.\n@@ -45,6 +45,16 @@ with System.Machine_Code; use System.Machine_Code;\n \n package body System.OS_Interface is\n \n+   --------------------\n+   -- Get_Stack_Base --\n+   --------------------\n+\n+   function Get_Stack_Base (thread : pthread_t) return Address is\n+      pragma Unreferenced (thread);\n+   begin\n+      return Null_Address;\n+   end Get_Stack_Base;\n+\n    ------------------\n    -- pthread_init --\n    ------------------\n@@ -68,6 +78,31 @@ package body System.OS_Interface is\n       return Self;\n    end pthread_self;\n \n+   ----------------------\n+   -- Hide_Yellow_Zone --\n+   ----------------------\n+\n+   procedure Hide_Yellow_Zone is\n+      type Teb_Ptr is access all pthread_teb_t;\n+      Teb : Teb_Ptr;\n+      Res : Interfaces.C.int;\n+      pragma Unreferenced (Res);\n+\n+   begin\n+      --  Get the Thread Environment Block address\n+\n+      Asm (\"call_pal 0x9e\" & ASCII.LF & ASCII.HT &\n+           \"bis $31, $0, %0\",\n+           Outputs => Teb_Ptr'Asm_Output (\"=r\", Teb),\n+           Clobber => \"$0\");\n+\n+      --  Stick a guard page right above the Yellow Zone if it exists\n+\n+      if Teb.all.stack_yellow /= Teb.all.stack_guard then\n+         Res := mprotect (Teb.all.stack_yellow, Get_Page_Size, PROT_ON);\n+      end if;\n+   end Hide_Yellow_Zone;\n+\n    -----------------\n    -- To_Duration --\n    -----------------"}, {"sha": "27d3eeea2bb9e3f8fd15b076aa69bc8ff39ee3ca", "filename": "gcc/ada/s-osinte-tru64.ads", "status": "modified", "additions": 65, "deletions": 1, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09c239f69814c6c85f5eba1b57e50d8a9ee1acae/gcc%2Fada%2Fs-osinte-tru64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09c239f69814c6c85f5eba1b57e50d8a9ee1acae/gcc%2Fada%2Fs-osinte-tru64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-tru64.ads?ref=09c239f69814c6c85f5eba1b57e50d8a9ee1acae", "patch": "@@ -7,7 +7,7 @@\n --                                  S p e c                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---             Copyright (C) 1995-2004, Free Software Foundation, Inc.      --\n+--             Copyright (C) 1995-2005, Free Software Foundation, Inc.      --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -277,6 +277,42 @@ package System.OS_Interface is\n \n    PTHREAD_EXPLICIT_SCHED : constant := 1;\n \n+   -----------\n+   -- Stack --\n+   -----------\n+\n+   Stack_Base_Available : constant Boolean := False;\n+   --  Indicates wether the stack base is available on this target.\n+\n+   function Get_Stack_Base (thread : pthread_t) return Address;\n+   pragma Inline (Get_Stack_Base);\n+   --  returns the stack base of the specified thread.\n+   --  Only call this function when Stack_Base_Available is True.\n+\n+   function Get_Page_Size return size_t;\n+   function Get_Page_Size return Address;\n+   pragma Import (C, Get_Page_Size, \"getpagesize\");\n+   --  returns the size of a page, or 0 if this is not relevant on this\n+   --  target\n+\n+   PROT_NONE  : constant := 0;\n+   PROT_READ  : constant := 1;\n+   PROT_WRITE : constant := 2;\n+   PROT_EXEC  : constant := 4;\n+   PROT_ALL   : constant := PROT_READ + PROT_WRITE + PROT_EXEC;\n+\n+   PROT_ON    : constant := PROT_READ;\n+   PROT_OFF   : constant := PROT_ALL;\n+\n+   function mprotect (addr : Address; len : size_t; prot : int) return int;\n+   pragma Import (C, mprotect);\n+\n+   procedure Hide_Yellow_Zone;\n+   --  Every thread except the initial one features an overflow warning area\n+   --  just above the overflow guard area on the stack. They are called\n+   --  the Yellow Zone and the Red Zone respectively. This procedure hides\n+   --  the former so that the latter could be exposed to stack probing.\n+\n    ---------------------------------------\n    -- Nonstandard Thread Initialization --\n    ---------------------------------------\n@@ -490,6 +526,34 @@ private\n \n    type pthread_t is new System.Address;\n \n+   type pthread_teb_t is record\n+      reserved1     : System.Address;\n+      reserved2     : System.Address;\n+      size          : unsigned_short;\n+      version       : unsigned_char;\n+      reserved3     : unsigned_char;\n+      external      : unsigned_char;\n+      reserved4     : char_array (0 .. 1);\n+      creator       : unsigned_char;\n+      sequence      : unsigned_long;\n+      reserved5     : unsigned_long_array (0 .. 1);\n+      per_kt_area   : System.Address;\n+      stack_base    : System.Address;\n+      stack_reserve : System.Address;\n+      stack_yellow  : System.Address;\n+      stack_guard   : System.Address;\n+      stack_size    : unsigned_long;\n+      tsd_values    : System.Address;\n+      tsd_count     : unsigned_long;\n+      reserved6     : unsigned;\n+      reserved7     : unsigned;\n+      thread_flags  : unsigned;\n+      thd_errno     : int;\n+      stack_hiwater : System.Address;\n+      home_rad      : unsigned_long;\n+   end record;\n+   pragma Convention (C, pthread_teb_t);\n+\n    type pthread_cond_t is record\n       state     : unsigned;\n       valid     : unsigned;"}, {"sha": "6667899fed9d747439edd47ab5e7c248a1b4b0d9", "filename": "gcc/ada/s-taprop-tru64.adb", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09c239f69814c6c85f5eba1b57e50d8a9ee1acae/gcc%2Fada%2Fs-taprop-tru64.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09c239f69814c6c85f5eba1b57e50d8a9ee1acae/gcc%2Fada%2Fs-taprop-tru64.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-tru64.adb?ref=09c239f69814c6c85f5eba1b57e50d8a9ee1acae", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2004, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2005, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -111,7 +111,7 @@ package body System.Task_Primitives.Operations is\n    --  Key used to find the Ada Task_Id associated with a thread\n \n    Environment_Task_Id : Task_Id;\n-   --  A variable to hold Task_Id for the environment task.\n+   --  A variable to hold Task_Id for the environment task\n \n    Unblocked_Signal_Mask : aliased sigset_t;\n    --  The set of signals that should unblocked in all tasks\n@@ -126,12 +126,12 @@ package body System.Task_Primitives.Operations is\n    pragma Import (C, Dispatching_Policy, \"__gl_task_dispatching_policy\");\n \n    FIFO_Within_Priorities : constant Boolean := Dispatching_Policy = 'F';\n-   --  Indicates whether FIFO_Within_Priorities is set.\n+   --  Indicates whether FIFO_Within_Priorities is set\n \n    Curpid : pid_t;\n \n    Foreign_Task_Elaborated : aliased Boolean := True;\n-   --  Used to identified fake tasks (i.e., non-Ada Threads).\n+   --  Used to identified fake tasks (i.e., non-Ada Threads)\n \n    --------------------\n    -- Local Packages --\n@@ -141,31 +141,31 @@ package body System.Task_Primitives.Operations is\n \n       procedure Initialize (Environment_Task : Task_Id);\n       pragma Inline (Initialize);\n-      --  Initialize various data needed by this package.\n+      --  Initialize various data needed by this package\n \n       function Is_Valid_Task return Boolean;\n       pragma Inline (Is_Valid_Task);\n       --  Does executing thread have a TCB?\n \n       procedure Set (Self_Id : Task_Id);\n       pragma Inline (Set);\n-      --  Set the self id for the current task.\n+      --  Set the self id for the current task\n \n       function Self return Task_Id;\n       pragma Inline (Self);\n-      --  Return a pointer to the Ada Task Control Block of the calling task.\n+      --  Return a pointer to the Ada Task Control Block of the calling task\n \n    end Specific;\n \n    package body Specific is separate;\n-   --  The body of this package is target specific.\n+   --  The body of this package is target specific\n \n    ---------------------------------\n    -- Support for foreign threads --\n    ---------------------------------\n \n    function Register_Foreign_Thread (Thread : Thread_Id) return Task_Id;\n-   --  Allocate and Initialize a new ATCB for the current Thread.\n+   --  Allocate and initialize a new ATCB for the current Thread\n \n    function Register_Foreign_Thread\n      (Thread : Thread_Id) return Task_Id is separate;\n@@ -175,7 +175,7 @@ package body System.Task_Primitives.Operations is\n    -----------------------\n \n    procedure Abort_Handler (Sig : Signal);\n-   --  Signal handler used to implement asynchronous abortion.\n+   --  Signal handler used to implement asynchronous abort\n \n    -------------------\n    -- Abort_Handler --\n@@ -338,7 +338,7 @@ package body System.Task_Primitives.Operations is\n       Current_Prio   : System.Any_Priority;\n \n    begin\n-      --  Perform ceiling checks only when this is the locking policy in use.\n+      --  Perform ceiling checks only when this is the locking policy in use\n \n       if Locking_Policy = 'C' then\n          Self_ID := Self;\n@@ -440,7 +440,7 @@ package body System.Task_Primitives.Operations is\n                      (Self_ID.Common.LL.CV'Access, Self_ID.Common.LL.L'Access);\n       end if;\n \n-      --  EINTR is not considered a failure.\n+      --  EINTR is not considered a failure\n \n       pragma Assert (Result = 0 or else Result = EINTR);\n    end Sleep;\n@@ -689,6 +689,7 @@ package body System.Task_Primitives.Operations is\n \n    procedure Enter_Task (Self_ID : Task_Id) is\n    begin\n+      Hide_Yellow_Zone;\n       Self_ID.Common.LL.Thread := pthread_self;\n       Specific.Set (Self_ID);\n \n@@ -815,6 +816,11 @@ package body System.Task_Primitives.Operations is\n          Adjusted_Stack_Size := Interfaces.C.size_t (Stack_Size);\n       end if;\n \n+      --  Account for the Yellow Zone (2 pages) and the guard page\n+      --  right above. See Hide_Yellow_Zone for the rationale.\n+\n+      Adjusted_Stack_Size := Adjusted_Stack_Size + 3 * Get_Page_Size;\n+\n       Result := pthread_attr_init (Attributes'Access);\n       pragma Assert (Result = 0 or else Result = ENOMEM);\n \n@@ -1072,7 +1078,7 @@ package body System.Task_Primitives.Operations is\n    begin\n       Environment_Task_Id := Environment_Task;\n \n-      --  Initialize the lock used to synchronize chain of all ATCBs.\n+      --  Initialize the lock used to synchronize chain of all ATCBs\n \n       Initialize_Lock (Single_RTS_Lock'Access, RTS_Lock_Level);\n "}]}