{"sha": "d71750b7829b3ef3443c75880e439e3e145aa8a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDcxNzUwYjc4MjliM2VmMzQ0M2M3NTg4MGU0MzllM2UxNDVhYThhNw==", "commit": {"author": {"name": "Yizhe", "email": "yizhe@pku.edu.cn", "date": "2021-03-17T02:06:21Z"}, "committer": {"name": "YizhePKU", "email": "yizhe@pku.edu.cn", "date": "2021-04-02T17:10:43Z"}, "message": "Remove ArrayExpr::has_array_elems\n\nhas_array_elems() is mostly used as a nullptr check. We don't need it\nanymore.\n\nTo implement has_array_elems() correctly(i.e. return true when the array\nis zero length) would be difficult, because we may need to perform\nconstant folding first.", "tree": {"sha": "f685de849e35a359d6f5010876c56bc311a893f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f685de849e35a359d6f5010876c56bc311a893f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d71750b7829b3ef3443c75880e439e3e145aa8a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d71750b7829b3ef3443c75880e439e3e145aa8a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d71750b7829b3ef3443c75880e439e3e145aa8a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d71750b7829b3ef3443c75880e439e3e145aa8a7/comments", "author": {"login": "YizhePKU", "id": 42838469, "node_id": "MDQ6VXNlcjQyODM4NDY5", "avatar_url": "https://avatars.githubusercontent.com/u/42838469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YizhePKU", "html_url": "https://github.com/YizhePKU", "followers_url": "https://api.github.com/users/YizhePKU/followers", "following_url": "https://api.github.com/users/YizhePKU/following{/other_user}", "gists_url": "https://api.github.com/users/YizhePKU/gists{/gist_id}", "starred_url": "https://api.github.com/users/YizhePKU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YizhePKU/subscriptions", "organizations_url": "https://api.github.com/users/YizhePKU/orgs", "repos_url": "https://api.github.com/users/YizhePKU/repos", "events_url": "https://api.github.com/users/YizhePKU/events{/privacy}", "received_events_url": "https://api.github.com/users/YizhePKU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "YizhePKU", "id": 42838469, "node_id": "MDQ6VXNlcjQyODM4NDY5", "avatar_url": "https://avatars.githubusercontent.com/u/42838469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YizhePKU", "html_url": "https://github.com/YizhePKU", "followers_url": "https://api.github.com/users/YizhePKU/followers", "following_url": "https://api.github.com/users/YizhePKU/following{/other_user}", "gists_url": "https://api.github.com/users/YizhePKU/gists{/gist_id}", "starred_url": "https://api.github.com/users/YizhePKU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YizhePKU/subscriptions", "organizations_url": "https://api.github.com/users/YizhePKU/orgs", "repos_url": "https://api.github.com/users/YizhePKU/repos", "events_url": "https://api.github.com/users/YizhePKU/events{/privacy}", "received_events_url": "https://api.github.com/users/YizhePKU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a63f6d619aba46abeafe9c7544756fee00e072d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a63f6d619aba46abeafe9c7544756fee00e072d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a63f6d619aba46abeafe9c7544756fee00e072d"}], "stats": {"total": 21, "additions": 5, "deletions": 16}, "files": [{"sha": "f17d269dee703edbd55e380d9893b7415c5905c2", "filename": "gcc/rust/ast/rust-ast-full-test.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71750b7829b3ef3443c75880e439e3e145aa8a7/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71750b7829b3ef3443c75880e439e3e145aa8a7/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-test.cc?ref=d71750b7829b3ef3443c75880e439e3e145aa8a7", "patch": "@@ -2165,10 +2165,7 @@ ArrayExpr::as_string () const\n   str += append_attributes (inner_attrs, INNER);\n \n   str += \"\\n Array elems: \";\n-  if (!has_array_elems ())\n-    str += \"none\";\n-  else\n-    str += internal_elements->as_string ();\n+  str += internal_elements->as_string ();\n \n   return str;\n }"}, {"sha": "b535f8f36b166924a80118c67b486794e3e3c797", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71750b7829b3ef3443c75880e439e3e145aa8a7/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71750b7829b3ef3443c75880e439e3e145aa8a7/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=d71750b7829b3ef3443c75880e439e3e145aa8a7", "patch": "@@ -1099,9 +1099,6 @@ class ArrayExpr : public ExprWithoutBlock\n     outer_attrs = std::move (new_attrs);\n   }\n \n-  // Returns whether array expr has array elems or if it is just empty.\n-  bool has_array_elems () const { return internal_elements != nullptr; }\n-\n   // Constructor requires ArrayElems pointer\n   ArrayExpr (std::unique_ptr<ArrayElems> array_elems,\n \t     std::vector<Attribute> inner_attribs,\n@@ -1119,7 +1116,6 @@ class ArrayExpr : public ExprWithoutBlock\n       inner_attrs (other.inner_attrs), locus (other.locus),\n       marked_for_strip (other.marked_for_strip)\n   {\n-    if (other.has_array_elems ())\n       internal_elements = other.internal_elements->clone_array_elems ();\n     rust_assert (internal_elements != nullptr);\n   }\n@@ -1133,10 +1129,7 @@ class ArrayExpr : public ExprWithoutBlock\n     marked_for_strip = other.marked_for_strip;\n     outer_attrs = other.outer_attrs;\n \n-    if (other.has_array_elems ())\n-      internal_elements = other.internal_elements->clone_array_elems ();\n-    else\n-      internal_elements = nullptr;\n+    internal_elements = other.internal_elements->clone_array_elems ();\n \n     rust_assert (internal_elements != nullptr);\n     return *this;"}, {"sha": "b60f9b2c76cabb1f1a2ca4b3b0626df4f9cf3f5d", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71750b7829b3ef3443c75880e439e3e145aa8a7/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71750b7829b3ef3443c75880e439e3e145aa8a7/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=d71750b7829b3ef3443c75880e439e3e145aa8a7", "patch": "@@ -727,8 +727,7 @@ class AttrVisitor : public AST::ASTVisitor\n \n     /* assuming you can't strip away the ArrayElems type, but can strip\n      * internal expressions and whatever */\n-    if (expr.has_array_elems ())\n-      expr.get_array_elems ()->accept_vis (*this);\n+    expr.get_array_elems ()->accept_vis (*this);\n   }\n   void visit (AST::ArrayIndexExpr &expr) override\n   {\n@@ -3262,8 +3261,8 @@ MacroExpander::expand_invoc (std::unique_ptr<AST::MacroInvocation> &invoc)\n     // how would errors be signalled? null fragment? something else?\n     // what about error vs just not having stuff in rules definition yet?\n \n-    /* replace macro invocation with ast frag. actually, don't have any context here. maybe attach ast \n-     * frag to macro invocation, and then have a method above get it? Or just return the ast frag from \n+    /* replace macro invocation with ast frag. actually, don't have any context here. maybe attach ast\n+     * frag to macro invocation, and then have a method above get it? Or just return the ast frag from\n      * this method. */\n   }\n #endif"}]}