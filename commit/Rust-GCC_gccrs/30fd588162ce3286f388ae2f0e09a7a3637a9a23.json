{"sha": "30fd588162ce3286f388ae2f0e09a7a3637a9a23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBmZDU4ODE2MmNlMzI4NmYzODhhZTJmMGUwOWE3YTM2MzdhOWEyMw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-10-18T16:44:38Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-10-18T16:44:38Z"}, "message": "tree-flow.h (gimple_purge_all_dead_abnormal_call_edges): Declare.\n\n\t* tree-flow.h (gimple_purge_all_dead_abnormal_call_edges): Declare.\n\t* tree-cfg.c (gimple_purge_dead_abnormal_call_edges): Move around and\n\trewrite modelled on gimple_purge_dead_eh_edges.\n\t(gimple_purge_all_dead_abnormal_call_edges): New function.\n\t* tree-inline.c (expand_call_inline): Call gimple_purge_dead_eh_edges\n\tdirectly instead of through gimple_purge_dead_abnormal_call_edges.\n\t* tree-ssa-pre.c (need_ab_cleanup): New static variable.\n\t(eliminate): Set bit in need_ab_cleanup for the basic block if we have\n\tremoved AB side-effects from one of its statements.\n\t(init_pre): Initialize need_ab_cleanup.\n\t(fini_pre): Purge dead abnormal call edges and clean up the CFG if bits\n\tare set in need_ab_cleanup.  Free need_ab_cleanup afterward.\n\nFrom-SVN: r165646", "tree": {"sha": "2ecd4af9e1a66174ac094a1e2068124b1cca40a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ecd4af9e1a66174ac094a1e2068124b1cca40a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30fd588162ce3286f388ae2f0e09a7a3637a9a23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30fd588162ce3286f388ae2f0e09a7a3637a9a23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30fd588162ce3286f388ae2f0e09a7a3637a9a23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30fd588162ce3286f388ae2f0e09a7a3637a9a23/comments", "author": null, "committer": null, "parents": [{"sha": "84628aa83614d863abb3a6c04f14e1b9bdd8d6aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84628aa83614d863abb3a6c04f14e1b9bdd8d6aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84628aa83614d863abb3a6c04f14e1b9bdd8d6aa"}], "stats": {"total": 164, "additions": 123, "deletions": 41}, "files": [{"sha": "995c2310ccdfe09271aad66e7578869cc097d4e5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30fd588162ce3286f388ae2f0e09a7a3637a9a23/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30fd588162ce3286f388ae2f0e09a7a3637a9a23/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30fd588162ce3286f388ae2f0e09a7a3637a9a23", "patch": "@@ -1,3 +1,18 @@\n+2010-10-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree-flow.h (gimple_purge_all_dead_abnormal_call_edges): Declare.\n+\t* tree-cfg.c (gimple_purge_dead_abnormal_call_edges): Move around and\n+\trewrite modelled on gimple_purge_dead_eh_edges.\n+\t(gimple_purge_all_dead_abnormal_call_edges): New function.\n+\t* tree-inline.c (expand_call_inline): Call gimple_purge_dead_eh_edges\n+\tdirectly instead of through gimple_purge_dead_abnormal_call_edges.\n+\t* tree-ssa-pre.c (need_ab_cleanup): New static variable.\n+\t(eliminate): Set bit in need_ab_cleanup for the basic block if we have\n+\tremoved AB side-effects from one of its statements.\n+\t(init_pre): Initialize need_ab_cleanup.\n+\t(fini_pre): Purge dead abnormal call edges and clean up the CFG if bits\n+\tare set in need_ab_cleanup.  Free need_ab_cleanup afterward.\n+\n 2010-10-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/46015"}, {"sha": "ff0c2ad2bf84842168a64e71ccc5c4bed976bede", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 55, "deletions": 33, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30fd588162ce3286f388ae2f0e09a7a3637a9a23/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30fd588162ce3286f388ae2f0e09a7a3637a9a23/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=30fd588162ce3286f388ae2f0e09a7a3637a9a23", "patch": "@@ -6824,39 +6824,6 @@ gimple_flow_call_edges_add (sbitmap blocks)\n   return blocks_split;\n }\n \n-/* Purge dead abnormal call edges from basic block BB.  */\n-\n-bool\n-gimple_purge_dead_abnormal_call_edges (basic_block bb)\n-{\n-  bool changed = gimple_purge_dead_eh_edges (bb);\n-\n-  if (cfun->has_nonlocal_label)\n-    {\n-      gimple stmt = last_stmt (bb);\n-      edge_iterator ei;\n-      edge e;\n-\n-      if (!(stmt && stmt_can_make_abnormal_goto (stmt)))\n-\tfor (ei = ei_start (bb->succs); (e = ei_safe_edge (ei)); )\n-\t  {\n-\t    if (e->flags & EDGE_ABNORMAL)\n-\t      {\n-\t\tremove_edge (e);\n-\t\tchanged = true;\n-\t      }\n-\t    else\n-\t      ei_next (&ei);\n-\t  }\n-\n-      /* See gimple_purge_dead_eh_edges below.  */\n-      if (changed)\n-\tfree_dominance_info (CDI_DOMINATORS);\n-    }\n-\n-  return changed;\n-}\n-\n /* Removes edge E and all the blocks dominated by it, and updates dominance\n    information.  The IL in E->src needs to be updated separately.\n    If dominance info is not available, only the edge E is removed.*/\n@@ -7010,6 +6977,8 @@ gimple_purge_dead_eh_edges (basic_block bb)\n   return changed;\n }\n \n+/* Purge dead EH edges from basic block listed in BLOCKS.  */\n+\n bool\n gimple_purge_all_dead_eh_edges (const_bitmap blocks)\n {\n@@ -7031,6 +7000,59 @@ gimple_purge_all_dead_eh_edges (const_bitmap blocks)\n   return changed;\n }\n \n+/* Purge dead abnormal call edges from basic block BB.  */\n+\n+bool\n+gimple_purge_dead_abnormal_call_edges (basic_block bb)\n+{\n+  bool changed = false;\n+  edge e;\n+  edge_iterator ei;\n+  gimple stmt = last_stmt (bb);\n+\n+  if (!cfun->has_nonlocal_label)\n+    return false;\n+\n+  if (stmt && stmt_can_make_abnormal_goto (stmt))\n+    return false;\n+\n+  for (ei = ei_start (bb->succs); (e = ei_safe_edge (ei)); )\n+    {\n+      if (e->flags & EDGE_ABNORMAL)\n+\t{\n+\t  remove_edge_and_dominated_blocks (e);\n+\t  changed = true;\n+\t}\n+      else\n+\tei_next (&ei);\n+    }\n+\n+  return changed;\n+}\n+\n+/* Purge dead abnormal call edges from basic block listed in BLOCKS.  */\n+\n+bool\n+gimple_purge_all_dead_abnormal_call_edges (const_bitmap blocks)\n+{\n+  bool changed = false;\n+  unsigned i;\n+  bitmap_iterator bi;\n+\n+  EXECUTE_IF_SET_IN_BITMAP (blocks, 0, i, bi)\n+    {\n+      basic_block bb = BASIC_BLOCK (i);\n+\n+      /* Earlier gimple_purge_dead_abnormal_call_edges could have removed\n+\t this basic block already.  */\n+      gcc_assert (bb || changed);\n+      if (bb != NULL)\n+\tchanged |= gimple_purge_dead_abnormal_call_edges (bb);\n+    }\n+\n+  return changed;\n+}\n+\n /* This function is called whenever a new edge is created or\n    redirected.  */\n "}, {"sha": "c2702dc87b5df98cf4f0ee3159ca7bcda1e567ce", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30fd588162ce3286f388ae2f0e09a7a3637a9a23/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30fd588162ce3286f388ae2f0e09a7a3637a9a23/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=30fd588162ce3286f388ae2f0e09a7a3637a9a23", "patch": "@@ -450,9 +450,10 @@ extern void gather_blocks_in_sese_region (basic_block entry, basic_block exit,\n \t\t\t\t\t  VEC(basic_block,heap) **bbs_p);\n extern void add_phi_args_after_copy_bb (basic_block);\n extern void add_phi_args_after_copy (basic_block *, unsigned, edge);\n-extern bool gimple_purge_dead_abnormal_call_edges (basic_block);\n extern bool gimple_purge_dead_eh_edges (basic_block);\n extern bool gimple_purge_all_dead_eh_edges (const_bitmap);\n+extern bool gimple_purge_dead_abnormal_call_edges (basic_block);\n+extern bool gimple_purge_all_dead_abnormal_call_edges (const_bitmap);\n extern tree gimplify_build1 (gimple_stmt_iterator *, enum tree_code,\n \t\t\t     tree, tree);\n extern tree gimplify_build2 (gimple_stmt_iterator *, enum tree_code,"}, {"sha": "133d916b9c66e2bfcb4962fea0c3ef526452dd25", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30fd588162ce3286f388ae2f0e09a7a3637a9a23/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30fd588162ce3286f388ae2f0e09a7a3637a9a23/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=30fd588162ce3286f388ae2f0e09a7a3637a9a23", "patch": "@@ -4010,7 +4010,10 @@ expand_call_inline (basic_block bb, gimple stmt, copy_body_data *id)\n     }\n \n   if (purge_dead_abnormal_edges)\n-    gimple_purge_dead_abnormal_call_edges (return_block);\n+    {\n+      gimple_purge_dead_eh_edges (return_block);\n+      gimple_purge_dead_abnormal_call_edges (return_block);\n+    }\n \n   /* If the value of the new expression is ignored, that's OK.  We\n      don't warn about this for CALL_EXPRs, so we shouldn't warn about"}, {"sha": "d4d108d95eff1840664f9d020b56da2198bd8526", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 47, "deletions": 6, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30fd588162ce3286f388ae2f0e09a7a3637a9a23/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30fd588162ce3286f388ae2f0e09a7a3637a9a23/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=30fd588162ce3286f388ae2f0e09a7a3637a9a23", "patch": "@@ -484,10 +484,12 @@ static tree pretemp;\n static tree storetemp;\n static tree prephitemp;\n \n-/* Set of blocks with statements that have had its EH information\n-   cleaned up.  */\n+/* Set of blocks with statements that have had their EH properties changed.  */\n static bitmap need_eh_cleanup;\n \n+/* Set of blocks with statements that have had their AB properties changed.  */\n+static bitmap need_ab_cleanup;\n+\n /* The phi_translate_table caches phi translations for a given\n    expression and predecessor.  */\n \n@@ -4253,6 +4255,10 @@ eliminate (void)\n \t\t      || TREE_CODE (rhs) != SSA_NAME\n \t\t      || may_propagate_copy (rhs, sprime)))\n \t\t{\n+\t\t  bool can_make_abnormal_goto\n+\t\t    = is_gimple_call (stmt)\n+\t\t      && stmt_can_make_abnormal_goto (stmt);\n+\n \t\t  gcc_assert (sprime != rhs);\n \n \t\t  if (dump_file && (dump_flags & TDF_DETAILS))\n@@ -4281,14 +4287,24 @@ eliminate (void)\n \t\t  stmt = gsi_stmt (gsi);\n \t\t  update_stmt (stmt);\n \n-\t\t  /* If we removed EH side effects from the statement, clean\n+\t\t  /* If we removed EH side-effects from the statement, clean\n \t\t     its EH information.  */\n \t\t  if (maybe_clean_or_replace_eh_stmt (stmt, stmt))\n \t\t    {\n \t\t      bitmap_set_bit (need_eh_cleanup,\n \t\t\t\t      gimple_bb (stmt)->index);\n \t\t      if (dump_file && (dump_flags & TDF_DETAILS))\n-\t\t\tfprintf (dump_file, \"  Removed EH side effects.\\n\");\n+\t\t\tfprintf (dump_file, \"  Removed EH side-effects.\\n\");\n+\t\t    }\n+\n+\t\t  /* Likewise for AB side-effects.  */\n+\t\t  if (can_make_abnormal_goto\n+\t\t      && !stmt_can_make_abnormal_goto (stmt))\n+\t\t    {\n+\t\t      bitmap_set_bit (need_ab_cleanup,\n+\t\t\t\t      gimple_bb (stmt)->index);\n+\t\t      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t\tfprintf (dump_file, \"  Removed AB side-effects.\\n\");\n \t\t    }\n \t\t}\n \t    }\n@@ -4345,13 +4361,16 @@ eliminate (void)\n \t    }\n \t  /* Visit indirect calls and turn them into direct calls if\n \t     possible.  */\n-\t  if (gimple_code (stmt) == GIMPLE_CALL\n+\t  if (is_gimple_call (stmt)\n \t      && TREE_CODE (gimple_call_fn (stmt)) == SSA_NAME)\n \t    {\n \t      tree fn = VN_INFO (gimple_call_fn (stmt))->valnum;\n \t      if (TREE_CODE (fn) == ADDR_EXPR\n \t\t  && TREE_CODE (TREE_OPERAND (fn, 0)) == FUNCTION_DECL)\n \t\t{\n+\t\t  bool can_make_abnormal_goto\n+\t\t    = stmt_can_make_abnormal_goto (stmt);\n+\n \t\t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t\t    {\n \t\t      fprintf (dump_file, \"Replacing call target with \");\n@@ -4362,12 +4381,25 @@ eliminate (void)\n \n \t\t  gimple_call_set_fn (stmt, fn);\n \t\t  update_stmt (stmt);\n+\n+\t\t  /* If we removed EH side-effects from the statement, clean\n+\t\t     its EH information.  */\n \t\t  if (maybe_clean_or_replace_eh_stmt (stmt, stmt))\n \t\t    {\n \t\t      bitmap_set_bit (need_eh_cleanup,\n \t\t\t\t      gimple_bb (stmt)->index);\n \t\t      if (dump_file && (dump_flags & TDF_DETAILS))\n-\t\t\tfprintf (dump_file, \"  Removed EH side effects.\\n\");\n+\t\t\tfprintf (dump_file, \"  Removed EH side-effects.\\n\");\n+\t\t    }\n+\n+\t\t  /* Likewise for AB side-effects.  */\n+\t\t  if (can_make_abnormal_goto\n+\t\t      && !stmt_can_make_abnormal_goto (stmt))\n+\t\t    {\n+\t\t      bitmap_set_bit (need_ab_cleanup,\n+\t\t\t\t      gimple_bb (stmt)->index);\n+\t\t      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t\tfprintf (dump_file, \"  Removed AB side-effects.\\n\");\n \t\t    }\n \n \t\t  /* Changing an indirect call to a direct call may\n@@ -4746,6 +4778,7 @@ init_pre (bool do_fre)\n     }\n \n   need_eh_cleanup = BITMAP_ALLOC (NULL);\n+  need_ab_cleanup = BITMAP_ALLOC (NULL);\n }\n \n \n@@ -4777,6 +4810,14 @@ fini_pre (bool do_fre)\n \n   BITMAP_FREE (need_eh_cleanup);\n \n+  if (!bitmap_empty_p (need_ab_cleanup))\n+    {\n+      gimple_purge_all_dead_abnormal_call_edges (need_ab_cleanup);\n+      cleanup_tree_cfg ();\n+    }\n+\n+  BITMAP_FREE (need_ab_cleanup);\n+\n   if (!do_fre)\n     loop_optimizer_finalize ();\n }"}]}