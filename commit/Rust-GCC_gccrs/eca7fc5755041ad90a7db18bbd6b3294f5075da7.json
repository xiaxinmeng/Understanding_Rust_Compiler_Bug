{"sha": "eca7fc5755041ad90a7db18bbd6b3294f5075da7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNhN2ZjNTc1NTA0MWFkOTBhN2RiMThiYmQ2YjMyOTRmNTA3NWRhNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-10-23T18:08:56Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-10-23T18:08:56Z"}, "message": "In C++11 a trivial [cd]tor might not be callable.\n\n\t* class.c (user_provided_p): A function deleted on its declation\n\tin the class is not user-provided.\n\t(type_build_ctor_call): Also force a ctor call if we\n\tmight have a deleted or private trivial ctor.\n\t(type_build_dtor_call): New.\n\t(deduce_noexcept_on_destructors): Remove obsolete code.\n\t* cp-tree.h: Declare type_build_dtor_call.\n\t* decl.c (expand_static_init): Make sure trivial dtors are callable.\n\t(cxx_maybe_build_cleanup): Likewise.\n\t* except.c (build_throw): Likewise.\n\t* init.c (build_value_init): Handle trivial but not callable ctors.\n\t(perform_target_ctor): Make sure trivial dtor is callable.\n\t(perform_member_init): Likewise.\n\t(expand_cleanup_for_base): Likewise.\n\t(build_vec_delete_1): Likewise.\n\t(build_delete): Likewise.\n\t(push_base_cleanups): Likewise.\n\t(build_new_1): Avoid redundant error.\n\t* method.c (synthesized_method_walk): Can't ever exit early in C++11.\n\tAlways process the subobject destructor.\n\t* semantics.c (finish_compound_literal): Make sure trivial dtor is\n\tcallable.\n\t* typeck2.c (split_nonconstant_init): Likewise.\n\nFrom-SVN: r203985", "tree": {"sha": "42c2ea99646dafa555892877e4e1670084770361", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42c2ea99646dafa555892877e4e1670084770361"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eca7fc5755041ad90a7db18bbd6b3294f5075da7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eca7fc5755041ad90a7db18bbd6b3294f5075da7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eca7fc5755041ad90a7db18bbd6b3294f5075da7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eca7fc5755041ad90a7db18bbd6b3294f5075da7/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d4c579b56109284162f084bf031cd4eea1f1b036", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4c579b56109284162f084bf031cd4eea1f1b036", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4c579b56109284162f084bf031cd4eea1f1b036"}], "stats": {"total": 615, "additions": 384, "deletions": 231}, "files": [{"sha": "99269af9c6f0e6246d186256ab2bef8c1d8df3fb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=eca7fc5755041ad90a7db18bbd6b3294f5075da7", "patch": "@@ -1,3 +1,30 @@\n+2013-10-23  Jason Merrill  <jason@redhat.com>\n+\n+\tIn C++11 a trivial [cd]tor might not be callable.\n+\t* class.c (user_provided_p): A function deleted on its declation\n+\tin the class is not user-provided.\n+\t(type_build_ctor_call): Also force a ctor call if we\n+\tmight have a deleted or private trivial ctor.\n+\t(type_build_dtor_call): New.\n+\t(deduce_noexcept_on_destructors): Remove obsolete code.\n+\t* cp-tree.h: Declare type_build_dtor_call.\n+\t* decl.c (expand_static_init): Make sure trivial dtors are callable.\n+\t(cxx_maybe_build_cleanup): Likewise.\n+\t* except.c (build_throw): Likewise.\n+\t* init.c (build_value_init): Handle trivial but not callable ctors.\n+\t(perform_target_ctor): Make sure trivial dtor is callable.\n+\t(perform_member_init): Likewise.\n+\t(expand_cleanup_for_base): Likewise.\n+\t(build_vec_delete_1): Likewise.\n+\t(build_delete): Likewise.\n+\t(push_base_cleanups): Likewise.\n+\t(build_new_1): Avoid redundant error.\n+\t* method.c (synthesized_method_walk): Can't ever exit early in C++11.\n+\tAlways process the subobject destructor.\n+\t* semantics.c (finish_compound_literal): Make sure trivial dtor is\n+\tcallable.\n+\t* typeck2.c (split_nonconstant_init): Likewise.\n+\n 2013-10-23  Edward Smith-Rowland  <3dw4rd@verizon.net>\n \n \tImplement C++14 [[deprecated]] modulo [[gnu::deprecated]] bugs."}, {"sha": "cd901409e909ebe9a90d04cd9953a64475baf3d2", "filename": "gcc/cp/call.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=eca7fc5755041ad90a7db18bbd6b3294f5075da7", "patch": "@@ -9273,6 +9273,9 @@ set_up_extended_ref_temp (tree decl, tree expr, vec<tree, va_gc> **cleanups,\n \t    static_aggregates = tree_cons (NULL_TREE, var,\n \t\t\t\t\t   static_aggregates);\n \t}\n+      else\n+\t/* Check whether the dtor is callable.  */\n+\tcxx_maybe_build_cleanup (var, tf_warning_or_error);\n     }\n \n   *initp = init;"}, {"sha": "43f90d7211824de6379b862ad30b95aa86c7beae", "filename": "gcc/cp/class.c", "status": "modified", "additions": 43, "deletions": 11, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=eca7fc5755041ad90a7db18bbd6b3294f5075da7", "patch": "@@ -4674,15 +4674,8 @@ deduce_noexcept_on_destructors (tree t)\n   if (!CLASSTYPE_METHOD_VEC (t))\n     return;\n \n-  bool saved_nontrivial_dtor = TYPE_HAS_NONTRIVIAL_DESTRUCTOR (t);\n-\n-  /* Avoid early exit from synthesized_method_walk (c++/57645).  */\n-  TYPE_HAS_NONTRIVIAL_DESTRUCTOR (t) = true;\n-\n   for (tree fns = CLASSTYPE_DESTRUCTORS (t); fns; fns = OVL_NEXT (fns))\n     deduce_noexcept_on_destructor (OVL_CURRENT (fns));\n-\n-  TYPE_HAS_NONTRIVIAL_DESTRUCTOR (t) = saved_nontrivial_dtor;\n }\n \n /* Subroutine of set_one_vmethod_tm_attributes.  Search base classes\n@@ -4884,7 +4877,8 @@ user_provided_p (tree fn)\n     return true;\n   else\n     return (!DECL_ARTIFICIAL (fn)\n-\t    && !DECL_DEFAULTED_IN_CLASS_P (fn));\n+\t    && !(DECL_INITIALIZED_IN_CLASS_P (fn)\n+\t\t && (DECL_DEFAULTED_FN (fn) || DECL_DELETED_FN (fn))));\n }\n \n /* Returns true iff class T has a user-provided constructor.  */\n@@ -5149,7 +5143,7 @@ type_has_user_declared_move_assign (tree t)\n }\n \n /* Nonzero if we need to build up a constructor call when initializing an\n-   object of this class, either because it has a user-provided constructor\n+   object of this class, either because it has a user-declared constructor\n    or because it doesn't have a default constructor (so we need to give an\n    error if no initializer is provided).  Use TYPE_NEEDS_CONSTRUCTING when\n    what you care about is whether or not an object can be produced by a\n@@ -5165,8 +5159,46 @@ type_build_ctor_call (tree t)\n   if (TYPE_NEEDS_CONSTRUCTING (t))\n     return true;\n   inner = strip_array_types (t);\n-  return (CLASS_TYPE_P (inner) && !TYPE_HAS_DEFAULT_CONSTRUCTOR (inner)\n-\t  && !ANON_AGGR_TYPE_P (inner));\n+  if (!CLASS_TYPE_P (inner) || ANON_AGGR_TYPE_P (inner))\n+    return false;\n+  if (!TYPE_HAS_DEFAULT_CONSTRUCTOR (inner))\n+    return true;\n+  /* A user-declared constructor might be private, and a constructor might\n+     be trivial but deleted.  */\n+  for (tree fns = lookup_fnfields_slot (inner, complete_ctor_identifier);\n+       fns; fns = OVL_NEXT (fns))\n+    {\n+      tree fn = OVL_CURRENT (fns);\n+      if (!DECL_ARTIFICIAL (fn)\n+\t  || DECL_DELETED_FN (fn))\n+\treturn true;\n+    }\n+  return false;\n+}\n+\n+/* Like type_build_ctor_call, but for destructors.  */\n+\n+bool\n+type_build_dtor_call (tree t)\n+{\n+  tree inner;\n+  if (TYPE_HAS_NONTRIVIAL_DESTRUCTOR (t))\n+    return true;\n+  inner = strip_array_types (t);\n+  if (!CLASS_TYPE_P (inner) || ANON_AGGR_TYPE_P (inner)\n+      || !COMPLETE_TYPE_P (inner))\n+    return false;\n+  /* A user-declared destructor might be private, and a destructor might\n+     be trivial but deleted.  */\n+  for (tree fns = lookup_fnfields_slot (inner, complete_dtor_identifier);\n+       fns; fns = OVL_NEXT (fns))\n+    {\n+      tree fn = OVL_CURRENT (fns);\n+      if (!DECL_ARTIFICIAL (fn)\n+\t  || DECL_DELETED_FN (fn))\n+\treturn true;\n+    }\n+  return false;\n }\n \n /* Remove all zero-width bit-fields from T.  */"}, {"sha": "507b3897aee3fa342e9207599436cf0377ba7a8c", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=eca7fc5755041ad90a7db18bbd6b3294f5075da7", "patch": "@@ -5115,6 +5115,7 @@ extern bool type_has_move_assign\t\t(tree);\n extern bool type_has_user_declared_move_constructor (tree);\n extern bool type_has_user_declared_move_assign(tree);\n extern bool type_build_ctor_call\t\t(tree);\n+extern bool type_build_dtor_call\t\t(tree);\n extern void explain_non_literal_class\t\t(tree);\n extern void defaulted_late_check\t\t(tree);\n extern bool defaultable_fn_check\t\t(tree);"}, {"sha": "1e92f2af85e7dd1e718edb70f7826f5616ca7815", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=eca7fc5755041ad90a7db18bbd6b3294f5075da7", "patch": "@@ -6897,7 +6897,11 @@ expand_static_init (tree decl, tree init)\n   /* Some variables require no dynamic initialization.  */\n   if (!init\n       && TYPE_HAS_TRIVIAL_DESTRUCTOR (TREE_TYPE (decl)))\n-    return;\n+    {\n+      /* Make sure the destructor is callable.  */\n+      cxx_maybe_build_cleanup (decl, tf_warning_or_error);\n+      return;\n+    }\n \n   if (DECL_THREAD_LOCAL_P (decl) && DECL_GNU_TLS_P (decl)\n       && !DECL_FUNCTION_SCOPE_P (decl))\n@@ -14296,7 +14300,7 @@ cxx_maybe_build_cleanup (tree decl, tsubst_flags_t complain)\n     }\n   /* Handle ordinary C++ destructors.  */\n   type = TREE_TYPE (decl);\n-  if (TYPE_HAS_NONTRIVIAL_DESTRUCTOR (type))\n+  if (type_build_dtor_call (type))\n     {\n       int flags = LOOKUP_NORMAL|LOOKUP_DESTRUCTOR;\n       bool has_vbases = (TREE_CODE (type) == RECORD_TYPE\n@@ -14317,6 +14321,8 @@ cxx_maybe_build_cleanup (tree decl, tsubst_flags_t complain)\n \t\t\t   sfk_complete_destructor, flags, 0, complain);\n       if (call == error_mark_node)\n \tcleanup = error_mark_node;\n+      else if (TYPE_HAS_TRIVIAL_DESTRUCTOR (type))\n+\t/* Discard the call.  */;\n       else if (cleanup)\n \tcleanup = cp_build_compound_expr (cleanup, call, complain);\n       else"}, {"sha": "daac0fde7e6b2e9bc51f8956a1282cc9cac89b2e", "filename": "gcc/cp/except.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=eca7fc5755041ad90a7db18bbd6b3294f5075da7", "patch": "@@ -868,17 +868,21 @@ build_throw (tree exp)\n \n       throw_type = build_eh_type_type (prepare_eh_type (TREE_TYPE (object)));\n \n-      if (TYPE_HAS_NONTRIVIAL_DESTRUCTOR (TREE_TYPE (object)))\n+      cleanup = NULL_TREE;\n+      if (type_build_dtor_call (TREE_TYPE (object)))\n \t{\n-\t  cleanup = lookup_fnfields (TYPE_BINFO (TREE_TYPE (object)),\n+\t  tree fn = lookup_fnfields (TYPE_BINFO (TREE_TYPE (object)),\n \t\t\t\t     complete_dtor_identifier, 0);\n-\t  cleanup = BASELINK_FUNCTIONS (cleanup);\n-\t  mark_used (cleanup);\n-\t  cxx_mark_addressable (cleanup);\n-\t  /* Pretend it's a normal function.  */\n-\t  cleanup = build1 (ADDR_EXPR, cleanup_type, cleanup);\n+\t  fn = BASELINK_FUNCTIONS (fn);\n+\t  mark_used (fn);\n+\t  if (TYPE_HAS_NONTRIVIAL_DESTRUCTOR (TREE_TYPE (object)))\n+\t    {\n+\t      cxx_mark_addressable (fn);\n+\t      /* Pretend it's a normal function.  */\n+\t      cleanup = build1 (ADDR_EXPR, cleanup_type, fn);\n+\t    }\n \t}\n-      else\n+      if (cleanup == NULL_TREE)\n \tcleanup = build_int_cst (cleanup_type, 0);\n \n       /* ??? Indicate that this function call throws throw_type.  */"}, {"sha": "78ea986a0d6b97b40a7d374a20c0e6e69608b7f5", "filename": "gcc/cp/init.c", "status": "modified", "additions": 96, "deletions": 71, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=eca7fc5755041ad90a7db18bbd6b3294f5075da7", "patch": "@@ -312,60 +312,55 @@ build_value_init (tree type, tsubst_flags_t complain)\n \n      To value-initialize an object of type T means:\n \n-     - if T is a class type (clause 9) with a user-provided constructor\n-       (12.1), then the default constructor for T is called (and the\n-       initialization is ill-formed if T has no accessible default\n-       constructor);\n+     - if T is a class type (clause 9) with either no default constructor\n+       (12.1) or a default constructor that is user-provided or deleted,\n+       then then the object is default-initialized;\n \n-     - if T is a non-union class type without a user-provided constructor,\n-       then every non-static data member and base-class component of T is\n-       value-initialized;92)\n+     - if T is a (possibly cv-qualified) class type without a user-provided\n+       or deleted default constructor, then the object is zero-initialized\n+       and the semantic constraints for default-initialization are checked,\n+       and if T has a non-trivial default constructor, the object is\n+       default-initialized;\n \n      - if T is an array type, then each element is value-initialized;\n \n      - otherwise, the object is zero-initialized.\n \n      A program that calls for default-initialization or\n-     value-initialization of an entity of reference type is ill-formed.\n-\n-     92) Value-initialization for such a class object may be implemented by\n-     zero-initializing the object and then calling the default\n-     constructor.  */\n+     value-initialization of an entity of reference type is ill-formed.  */\n \n   /* The AGGR_INIT_EXPR tweaking below breaks in templates.  */\n   gcc_assert (!processing_template_decl\n \t      || (SCALAR_TYPE_P (type) || TREE_CODE (type) == ARRAY_TYPE));\n \n-  if (CLASS_TYPE_P (type))\n+  if (type_build_ctor_call (type))\n     {\n-      /* Instead of the above, only consider the user-providedness of the\n-\t default constructor itself so value-initializing a class with an\n-\t explicitly defaulted default constructor and another user-provided\n-\t constructor works properly (c++std-core-19883).  */\n-      if (type_has_user_provided_default_constructor (type)\n-\t  || (!TYPE_HAS_DEFAULT_CONSTRUCTOR (type)\n-\t      && type_has_user_provided_constructor (type)))\n-\treturn build_aggr_init_expr\n-\t  (type,\n-\t   build_special_member_call (NULL_TREE, complete_ctor_identifier,\n-\t\t\t\t      NULL, type, LOOKUP_NORMAL,\n-\t\t\t\t      complain));\n+      tree ctor = build_aggr_init_expr\n+\t(type,\n+\t build_special_member_call (NULL_TREE, complete_ctor_identifier,\n+\t\t\t\t    NULL, type, LOOKUP_NORMAL,\n+\t\t\t\t    complain));\n+      if (ctor == error_mark_node\n+\t  || type_has_user_provided_default_constructor (type))\n+\treturn ctor;\n       else if (TYPE_HAS_COMPLEX_DFLT (type))\n \t{\n \t  /* This is a class that needs constructing, but doesn't have\n \t     a user-provided constructor.  So we need to zero-initialize\n \t     the object and then call the implicitly defined ctor.\n \t     This will be handled in simplify_aggr_init_expr.  */\n-\t  tree ctor = build_special_member_call\n-\t    (NULL_TREE, complete_ctor_identifier,\n-\t     NULL, type, LOOKUP_NORMAL, complain);\n-\t  ctor = build_aggr_init_expr (type, ctor);\n-\t  if (ctor != error_mark_node)\n-\t    AGGR_INIT_ZERO_FIRST (ctor) = 1;\n+\t  AGGR_INIT_ZERO_FIRST (ctor) = 1;\n \t  return ctor;\n \t}\n     }\n-  return build_value_init_noctor (type, complain);\n+\n+  /* Discard any access checking during subobject initialization;\n+     the checks are implied by the call to the ctor which we have\n+     verified is OK (cpp0x/defaulted46.C).  */\n+  push_deferring_access_checks (dk_deferred);\n+  tree r = build_value_init_noctor (type, complain);\n+  pop_deferring_access_checks ();\n+  return r;\n }\n \n /* Like build_value_init, but don't call the constructor for TYPE.  Used\n@@ -503,14 +498,15 @@ perform_target_ctor (tree init)\n   finish_expr_stmt (build_aggr_init (decl, init,\n \t\t\t\t     LOOKUP_NORMAL|LOOKUP_DELEGATING_CONS,\n \t\t\t\t     tf_warning_or_error));\n-  if (TYPE_HAS_NONTRIVIAL_DESTRUCTOR (type))\n+  if (type_build_dtor_call (type))\n     {\n       tree expr = build_delete (type, decl, sfk_complete_destructor,\n \t\t\t\tLOOKUP_NORMAL\n \t\t\t\t|LOOKUP_NONVIRTUAL\n \t\t\t\t|LOOKUP_DESTRUCTOR,\n \t\t\t\t0, tf_warning_or_error);\n-      if (expr != error_mark_node)\n+      if (expr != error_mark_node\n+\t  && TYPE_HAS_NONTRIVIAL_DESTRUCTOR (type))\n \tfinish_eh_cleanup (expr);\n     }\n }\n@@ -732,7 +728,7 @@ perform_member_init (tree member, tree init)\n \t\t\t\t\t\ttf_warning_or_error));\n     }\n \n-  if (TYPE_HAS_NONTRIVIAL_DESTRUCTOR (type))\n+  if (type_build_dtor_call (type))\n     {\n       tree expr;\n \n@@ -744,7 +740,8 @@ perform_member_init (tree member, tree init)\n \t\t\t   LOOKUP_NONVIRTUAL|LOOKUP_DESTRUCTOR, 0,\n \t\t\t   tf_warning_or_error);\n \n-      if (expr != error_mark_node)\n+      if (expr != error_mark_node\n+\t  && TYPE_HAS_NONTRIVIAL_DESTRUCTOR (type))\n \tfinish_eh_cleanup (expr);\n     }\n }\n@@ -1192,7 +1189,7 @@ expand_cleanup_for_base (tree binfo, tree flag)\n {\n   tree expr;\n \n-  if (TYPE_HAS_TRIVIAL_DESTRUCTOR (BINFO_TYPE (binfo)))\n+  if (!type_build_dtor_call (BINFO_TYPE (binfo)))\n     return;\n \n   /* Call the destructor.  */\n@@ -1202,6 +1199,10 @@ expand_cleanup_for_base (tree binfo, tree flag)\n \t\t\t\t    binfo,\n \t\t\t\t    LOOKUP_NORMAL | LOOKUP_NONVIRTUAL,\n                                     tf_warning_or_error);\n+\n+  if (TYPE_HAS_TRIVIAL_DESTRUCTOR (BINFO_TYPE (binfo)))\n+    return;\n+\n   if (flag)\n     expr = fold_build3_loc (input_location,\n \t\t\tCOND_EXPR, void_type_node,\n@@ -2360,7 +2361,7 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n \n   is_initialized = (type_build_ctor_call (elt_type) || *init != NULL);\n \n-  if (*init == NULL)\n+  if (*init == NULL && cxx_dialect < cxx11)\n     {\n       bool maybe_uninitialized_error = false;\n       /* A program that calls for default-initialization [...] of an\n@@ -3152,8 +3153,21 @@ build_vec_delete_1 (tree base, tree maxindex, tree type,\n \n   size_exp = size_in_bytes (type);\n \n-  if (! MAYBE_CLASS_TYPE_P (type) || TYPE_HAS_TRIVIAL_DESTRUCTOR (type))\n+  if (! MAYBE_CLASS_TYPE_P (type))\n     goto no_destructor;\n+  else if (TYPE_HAS_TRIVIAL_DESTRUCTOR (type))\n+    {\n+      /* Make sure the destructor is callable.  */\n+      if (type_build_dtor_call (type))\n+\t{\n+\t  tmp = build_delete (ptype, base, sfk_complete_destructor,\n+\t\t\t      LOOKUP_NORMAL|LOOKUP_DESTRUCTOR, 1,\n+\t\t\t      complain);\n+\t  if (tmp == error_mark_node)\n+\t    return error_mark_node;\n+\t}\n+      goto no_destructor;\n+    }\n \n   /* The below is short by the cookie size.  */\n   virtual_size = size_binop (MULT_EXPR, size_exp,\n@@ -3829,30 +3843,41 @@ build_dtor_call (tree exp, special_function_kind dtor_kind, int flags,\n    flags.  See cp-tree.h for more info.  */\n \n tree\n-build_delete (tree type, tree addr, special_function_kind auto_delete,\n+build_delete (tree otype, tree addr, special_function_kind auto_delete,\n \t      int flags, int use_global_delete, tsubst_flags_t complain)\n {\n   tree expr;\n \n   if (addr == error_mark_node)\n     return error_mark_node;\n \n+  tree type = TYPE_MAIN_VARIANT (otype);\n+\n   /* Can happen when CURRENT_EXCEPTION_OBJECT gets its type\n      set to `error_mark_node' before it gets properly cleaned up.  */\n   if (type == error_mark_node)\n     return error_mark_node;\n \n-  type = TYPE_MAIN_VARIANT (type);\n+  if (TREE_CODE (type) == POINTER_TYPE)\n+    type = TYPE_MAIN_VARIANT (TREE_TYPE (type));\n \n-  addr = mark_rvalue_use (addr);\n+  if (TREE_CODE (type) == ARRAY_TYPE)\n+    {\n+      if (TYPE_DOMAIN (type) == NULL_TREE)\n+\t{\n+\t  if (complain & tf_error)\n+\t    error (\"unknown array size in delete\");\n+\t  return error_mark_node;\n+\t}\n+      return build_vec_delete (addr, array_type_nelts (type),\n+\t\t\t       auto_delete, use_global_delete, complain);\n+    }\n \n-  if (TYPE_PTR_P (type))\n+  if (TYPE_PTR_P (otype))\n     {\n       bool complete_p = true;\n \n-      type = TYPE_MAIN_VARIANT (TREE_TYPE (type));\n-      if (TREE_CODE (type) == ARRAY_TYPE)\n-\tgoto handle_array;\n+      addr = mark_rvalue_use (addr);\n \n       /* We don't want to warn about delete of void*, only other\n \t  incomplete types.  Deleting other incomplete types\n@@ -3908,19 +3933,6 @@ build_delete (tree type, tree addr, special_function_kind auto_delete,\n       /* Throw away const and volatile on target type of addr.  */\n       addr = convert_force (build_pointer_type (type), addr, 0, complain);\n     }\n-  else if (TREE_CODE (type) == ARRAY_TYPE)\n-    {\n-    handle_array:\n-\n-      if (TYPE_DOMAIN (type) == NULL_TREE)\n-\t{\n-\t  if (complain & tf_error)\n-\t    error (\"unknown array size in delete\");\n-\t  return error_mark_node;\n-\t}\n-      return build_vec_delete (addr, array_type_nelts (type),\n-\t\t\t       auto_delete, use_global_delete, complain);\n-    }\n   else\n     {\n       /* Don't check PROTECT here; leave that decision to the\n@@ -3935,10 +3947,18 @@ build_delete (tree type, tree addr, special_function_kind auto_delete,\n       addr = convert_force (build_pointer_type (type), addr, 0, complain);\n     }\n \n-  gcc_assert (MAYBE_CLASS_TYPE_P (type));\n-\n   if (TYPE_HAS_TRIVIAL_DESTRUCTOR (type))\n     {\n+      /* Make sure the destructor is callable.  */\n+      if (type_build_dtor_call (type))\n+\t{\n+\t  expr = build_dtor_call (cp_build_indirect_ref (addr, RO_NULL,\n+\t\t\t\t\t\t\t complain),\n+\t\t\t\t  sfk_complete_destructor, flags, complain);\n+\t  if (expr == error_mark_node)\n+\t    return error_mark_node;\n+\t}\n+\n       if (auto_delete != sfk_deleting_destructor)\n \treturn void_zero_node;\n \n@@ -4062,18 +4082,21 @@ push_base_cleanups (void)\n       for (vbases = CLASSTYPE_VBASECLASSES (current_class_type), i = 0;\n \t   vec_safe_iterate (vbases, i, &base_binfo); i++)\n \t{\n-\t  if (TYPE_HAS_NONTRIVIAL_DESTRUCTOR (BINFO_TYPE (base_binfo)))\n+\t  if (type_build_dtor_call (BINFO_TYPE (base_binfo)))\n \t    {\n \t      expr = build_special_member_call (current_class_ref,\n \t\t\t\t\t\tbase_dtor_identifier,\n \t\t\t\t\t\tNULL,\n \t\t\t\t\t\tbase_binfo,\n \t\t\t\t\t\t(LOOKUP_NORMAL\n \t\t\t\t\t\t | LOOKUP_NONVIRTUAL),\n-                                                tf_warning_or_error);\n-\t      expr = build3 (COND_EXPR, void_type_node, cond,\n-\t\t\t     expr, void_zero_node);\n-\t      finish_decl_cleanup (NULL_TREE, expr);\n+\t\t\t\t\t\ttf_warning_or_error);\n+\t      if (TYPE_HAS_NONTRIVIAL_DESTRUCTOR (BINFO_TYPE (base_binfo)))\n+\t\t{\n+\t\t  expr = build3 (COND_EXPR, void_type_node, cond,\n+\t\t\t\t expr, void_zero_node);\n+\t\t  finish_decl_cleanup (NULL_TREE, expr);\n+\t\t}\n \t    }\n \t}\n     }\n@@ -4082,16 +4105,17 @@ push_base_cleanups (void)\n   for (binfo = TYPE_BINFO (current_class_type), i = 0;\n        BINFO_BASE_ITERATE (binfo, i, base_binfo); i++)\n     {\n-      if (TYPE_HAS_TRIVIAL_DESTRUCTOR (BINFO_TYPE (base_binfo))\n-\t  || BINFO_VIRTUAL_P (base_binfo))\n+      if (BINFO_VIRTUAL_P (base_binfo)\n+\t  || !type_build_dtor_call (BINFO_TYPE (base_binfo)))\n \tcontinue;\n \n       expr = build_special_member_call (current_class_ref,\n \t\t\t\t\tbase_dtor_identifier,\n \t\t\t\t\tNULL, base_binfo,\n \t\t\t\t\tLOOKUP_NORMAL | LOOKUP_NONVIRTUAL,\n                                         tf_warning_or_error);\n-      finish_decl_cleanup (NULL_TREE, expr);\n+      if (TYPE_HAS_NONTRIVIAL_DESTRUCTOR (BINFO_TYPE (base_binfo)))\n+\tfinish_decl_cleanup (NULL_TREE, expr);\n     }\n \n   /* Don't automatically destroy union members.  */\n@@ -4108,7 +4132,7 @@ push_base_cleanups (void)\n \tcontinue;\n       if (ANON_UNION_TYPE_P (this_type))\n \tcontinue;\n-      if (TYPE_HAS_NONTRIVIAL_DESTRUCTOR (this_type))\n+      if (type_build_dtor_call (this_type))\n \t{\n \t  tree this_member = (build_class_member_access_expr\n \t\t\t      (current_class_ref, member,\n@@ -4119,7 +4143,8 @@ push_base_cleanups (void)\n \t\t\t       sfk_complete_destructor,\n \t\t\t       LOOKUP_NONVIRTUAL|LOOKUP_DESTRUCTOR|LOOKUP_NORMAL,\n \t\t\t       0, tf_warning_or_error);\n-\t  finish_decl_cleanup (NULL_TREE, expr);\n+\t  if (TYPE_HAS_NONTRIVIAL_DESTRUCTOR (this_type))\n+\t    finish_decl_cleanup (NULL_TREE, expr);\n \t}\n     }\n }"}, {"sha": "593a4a653e962021109bae55e0e9e1f2897e9cdd", "filename": "gcc/cp/method.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=eca7fc5755041ad90a7db18bbd6b3294f5075da7", "patch": "@@ -1265,8 +1265,9 @@ synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n      class versions and other properties of the type.  But a subobject\n      class can be trivially copyable and yet have overload resolution\n      choose a template constructor for initialization, depending on\n-     rvalueness and cv-quals.  So we can't exit early for copy/move\n-     methods in C++0x.  The same considerations apply in C++98/03, but\n+     rvalueness and cv-quals.  And furthermore, a member in a base might\n+     be trivial but deleted or otherwise not callable.  So we can't exit\n+     early in C++0x.  The same considerations apply in C++98/03, but\n      there the definition of triviality does not consider overload\n      resolution, so a constructor can be trivial even if it would otherwise\n      call a non-trivial constructor.  */\n@@ -1282,7 +1283,7 @@ synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n \t    inform (input_location, \"defaulted default constructor does \"\n \t\t    \"not initialize any non-static data member\");\n \t}\n-      if (!diag)\n+      if (!diag && cxx_dialect < cxx11)\n \treturn;\n     }\n \n@@ -1323,7 +1324,7 @@ synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n \n       process_subob_fn (rval, spec_p, trivial_p, deleted_p,\n \t\t\tconstexpr_p, diag, basetype);\n-      if (ctor_p && TYPE_HAS_NONTRIVIAL_DESTRUCTOR (basetype))\n+      if (ctor_p)\n \t{\n \t  /* In a constructor we also need to check the subobject\n \t     destructors for cleanup of partially constructed objects.  */"}, {"sha": "052746c15b79460b0283139debd4709b3e552956", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=eca7fc5755041ad90a7db18bbd6b3294f5075da7", "patch": "@@ -2521,6 +2521,10 @@ finish_compound_literal (tree type, tree compound_literal,\n       decl = pushdecl_top_level (decl);\n       DECL_NAME (decl) = make_anon_name ();\n       SET_DECL_ASSEMBLER_NAME (decl, DECL_NAME (decl));\n+      /* Make sure the destructor is callable.  */\n+      tree clean = cxx_maybe_build_cleanup (decl, complain);\n+      if (clean == error_mark_node)\n+\treturn error_mark_node;\n       return decl;\n     }\n   else"}, {"sha": "4b71a76f4d28aa74f375aa6ad0209758a71ea015", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=eca7fc5755041ad90a7db18bbd6b3294f5075da7", "patch": "@@ -640,12 +640,13 @@ split_nonconstant_init_1 (tree dest, tree init)\n \t      code = build_stmt (input_location, EXPR_STMT, code);\n \t      code = maybe_cleanup_point_expr_void (code);\n \t      add_stmt (code);\n-\t      if (!TYPE_HAS_TRIVIAL_DESTRUCTOR (inner_type))\n+\t      if (type_build_dtor_call (inner_type))\n \t\t{\n \t\t  code = (build_special_member_call\n \t\t\t  (sub, complete_dtor_identifier, NULL, inner_type,\n \t\t\t   LOOKUP_NORMAL, tf_warning_or_error));\n-\t\t  finish_eh_cleanup (code);\n+\t\t  if (!TYPE_HAS_TRIVIAL_DESTRUCTOR (inner_type))\n+\t\t    finish_eh_cleanup (code);\n \t\t}\n \n \t      num_split_elts++;"}, {"sha": "f7de07306258815b0b28e5690ce5fe09a9df57fa", "filename": "gcc/testsuite/g++.dg/cpp0x/defaulted19.C", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted19.C?ref=eca7fc5755041ad90a7db18bbd6b3294f5075da7", "patch": "@@ -1,5 +1,6 @@\n-// We allocate a cookie to help us run the destructor even if it's deleted.\n-// { dg-options -std=c++11 }\n+// We don't allocate a cookie to help us run the destructor if it's trivial,\n+// even if it's deleted.\n+// { dg-options \"-std=c++11\" }\n // { dg-do run }\n \n struct A\n@@ -17,5 +18,5 @@ void *operator new[](__SIZE_TYPE__ t)\n int main()\n {\n   A* ap = new A[5];\n-  return ap == p;\n+  return ap != p;\n }"}, {"sha": "6d2a26a818c0675537d4b49ef2f4763669be587c", "filename": "gcc/testsuite/g++.dg/cpp0x/defaulted19a.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted19a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted19a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted19a.C?ref=eca7fc5755041ad90a7db18bbd6b3294f5075da7", "patch": "@@ -0,0 +1,24 @@\n+// We allocate a cookie to help us run the destructor if it's non-trivial,\n+// even if it's deleted.\n+// { dg-options \"-std=c++0x\" }\n+// { dg-do run }\n+\n+struct B { ~B() {} };\n+struct A\n+{\n+  B b;\n+  ~A() = delete;\n+};\n+\n+void *p = 0;\n+void *operator new[](__SIZE_TYPE__ t)\n+{\n+  p = ::operator new (t);\n+  return p;\n+}\n+\n+int main()\n+{\n+  A* ap = new A[5];\n+  return ap == p;\n+}"}, {"sha": "3cef60050ac4d14a74c2ebb44411b3a2e6abf939", "filename": "gcc/testsuite/g++.dg/cpp0x/defaulted2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted2.C?ref=eca7fc5755041ad90a7db18bbd6b3294f5075da7", "patch": "@@ -62,7 +62,7 @@ int main()\n {\n   F f;\n   F f2(f);\t\t\t// { dg-error \"use\" }\n-  B* b = new const B;\t\t// { dg-error \"uninitialized const\" }\n+  const B* b = new const B;\t\t// { dg-error \"uninitialized const\" }\n   U u;\t\t\t\t// { dg-error \"deleted\" }\n }\n "}, {"sha": "d4562c95903514fbfbe15335e1b423c4067fdcb2", "filename": "gcc/testsuite/g++.dg/cpp0x/defaulted46.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted46.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted46.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted46.C?ref=eca7fc5755041ad90a7db18bbd6b3294f5075da7", "patch": "@@ -0,0 +1,17 @@\n+// { dg-require-effective-target c++11 }\n+\n+struct A\n+{\n+protected:\n+  A() = default;\n+  int i;\n+};\n+\n+struct B: A {\n+  B() = default;\n+};\n+\n+int main()\n+{\n+  B();\n+}"}, {"sha": "9f5841d17cfccc5f04bdcdd1330795d063d44924", "filename": "gcc/testsuite/g++.dg/cpp0x/implicit11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fimplicit11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fimplicit11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fimplicit11.C?ref=eca7fc5755041ad90a7db18bbd6b3294f5075da7", "patch": "@@ -12,6 +12,6 @@ struct B: A { };\t\t// { dg-error \"deleted\" }\n extern B eb;\n int main()\n {\n-  B* b1 = new B;\t\t// { dg-error \"use of deleted function\" \"\" { xfail *-*-* } }\n+  B* b1 = new B;\t\t// { dg-error \"use of deleted function\" }\n   B* b2 = new B(eb);\t\t// { dg-error \"use of deleted function\" }\n }"}, {"sha": "62c003a458c4c298460904adef062066129be462", "filename": "gcc/testsuite/g++.dg/cpp0x/sfinae21.C", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae21.C?ref=eca7fc5755041ad90a7db18bbd6b3294f5075da7", "patch": "@@ -9,6 +9,10 @@ char f(int);\n template<class>\n char (&f(...))[2];\n \n-struct ND { ND() = delete; };\n+struct ND {\n+  // Make ND() non-aggregate.\n+  virtual void f();\n+  ND() = delete;\n+};\n \n static_assert(sizeof(f<ND[1]>(0)) != 1, \"Error\");"}, {"sha": "9c8e887daccec754025c3f44f744f68b29d26e41", "filename": "gcc/testsuite/g++.dg/ext/anon-struct4.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct4.C?ref=eca7fc5755041ad90a7db18bbd6b3294f5075da7", "patch": "@@ -1,5 +1,5 @@\n // PR c++/14401\n \n-struct { struct { int& i ; } bar ; } foo ; // { dg-error \"uninitialized\" \"uninit\" }\n+struct { struct { int& i ; } bar ; } foo ; // { dg-error \"deleted|uninitialized\" \"uninit\" }\n // { dg-warning \"anonymous\" \"anon\" { target c++98 } 3 }\n-// { dg-message \"should be initialized\" \"ref-uninit\" { target *-*-* } 3 }\n+// { dg-message \"should be initialized\" \"ref-uninit\" { target c++98 } 3 }"}, {"sha": "7eb72eb833fc348971b1919a9263230d15e5a2ad", "filename": "gcc/testsuite/g++.dg/init/ctor8.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fctor8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fctor8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fctor8.C?ref=eca7fc5755041ad90a7db18bbd6b3294f5075da7", "patch": "@@ -1,9 +1,10 @@\n // PR c++/29039\n \n-typedef struct S {\n+typedef struct S {\t    // { dg-error \"reference\" \"\" { target c++11 } }\n   int &r; \n }; // { dg-warning \"'typedef' was ignored\" }\n \n+\n S f () {\n-  return S (); // { dg-error \"reference\" }\n+  return S (); // { dg-error \"reference|deleted\" }\n }"}, {"sha": "e8945dafe933448fd89e08a11f94669328e9c12d", "filename": "gcc/testsuite/g++.dg/init/pr25811.C", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr25811.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr25811.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr25811.C?ref=eca7fc5755041ad90a7db18bbd6b3294f5075da7", "patch": "@@ -1,51 +1,51 @@\n // PR c++/25811\n // { dg-do compile }\n \n-struct A1\n+struct A1\t\t// { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  int const j; // { dg-message \"should be initialized\" }\n+  int const j; // { dg-message \"should be initialized\" \"\" { target c++98 } }\n };\n \n-struct A2\n+struct A2\t\t// { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  int const volatile i; // { dg-message \"should be initialized\" }\n+  int const volatile i; // { dg-message \"should be initialized\" \"\" { target c++98 } }\n };\n \n-struct A3\n+struct A3\t\t// { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  int& ref; // { dg-message \"should be initialized\" }\n+  int& ref; // { dg-message \"should be initialized\" \"\" { target c++98 } }\n };\n \n-struct A4\n+struct A4\t\t// { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  int const& ref; // { dg-message \"should be initialized\" }\n+  int const& ref; // { dg-message \"should be initialized\" \"\" { target c++98 } }\n };\n \n-struct A5\n+struct A5\t\t// { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  int& ref; // { dg-message \"should be initialized\" }\n-  int const i; // { dg-message \"should be initialized\" }\n+  int& ref; // { dg-message \"should be initialized\" \"\" { target c++98 } }\n+  int const i; // { dg-message \"should be initialized\" \"\" { target c++98 } }\n };\n \n-template <class T> struct S1\n+template <class T> struct S1 // { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  T const i; // { dg-message \"should be initialized\" }\n+  T const i; // { dg-message \"should be initialized\" \"\" { target c++98 } }\n };\n \n-template <class T> struct S2\n+template <class T> struct S2 // { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  T const volatile i; // { dg-message \"should be initialized\" }\n+  T const volatile i; // { dg-message \"should be initialized\" \"\" { target c++98 } }\n };\n \n-template <class T> struct S3\n+template <class T> struct S3 // { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  T& ref; // { dg-message \"should be initialized\" }\n+  T& ref; // { dg-message \"should be initialized\" \"\" { target c++98 } }\n };\n \n-template <class T> struct S4\n+template <class T> struct S4 // { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  T const i; // { dg-message \"should be initialized\" }\n-  T& ref; // { dg-message \"should be initialized\" }\n+  T const i; // { dg-message \"should be initialized\" \"\" { target c++98 } }\n+  T& ref; // { dg-message \"should be initialized\" \"\" { target c++98 } }\n };\n \n struct X\n@@ -55,52 +55,52 @@ struct X\n   int const& r;\n };\n \n-struct Y11\n+struct Y11\t\t// { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  int const i; // { dg-message \"should be initialized\" }\n+  int const i; // { dg-message \"should be initialized\" \"\" { target c++98 } }\n };\n \n-struct Y1\n+struct Y1\t\t// { dg-error \"deleted\" \"\" { target c++11 } }\n {\n   Y11 a[1];\n };\n \n-struct Y22\n+struct Y22\t\t// { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  int& ref; // { dg-message \"should be initialized\" }\n+  int& ref; // { dg-message \"should be initialized\" \"\" { target c++98 } }\n };\n \n-struct Y2\n+struct Y2\t\t// { dg-error \"deleted\" \"\" { target c++11 } }\n {\n   Y22 a[1];\n };\n \n-struct Z1\n+struct Z1\t\t// { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  int const i; // { dg-message \"should be initialized\" }\n+  int const i; // { dg-message \"should be initialized\" \"\" { target c++98 } }\n };\n \n-struct Z2\n+struct Z2 // { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  int& ref; // { dg-message \"should be initialized\" }\n+  int& ref; // { dg-message \"should be initialized\" \"\" { target c++98 } }\n };\n \n-struct Z3\n+struct Z3 // { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  int const i; // { dg-message \"should be initialized\" }\n+  int const i; // { dg-message \"should be initialized\" \"\" { target c++98 } }\n };\n \n-struct Z4\n+struct Z4 // { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  int& ref; // { dg-message \"should be initialized\" }\n+  int& ref; // { dg-message \"should be initialized\" \"\" { target c++98 } }\n };\n \n struct Z5\n {\n   int i;\n };\n \n-struct Z\n+struct Z\t\t// { dg-error \"deleted\" \"\" { target c++11 } }\n {\n   Z1 z1;\n   Z2 z2;\n@@ -109,54 +109,54 @@ struct Z\n   Z5 z5;\n };\n \n-union U\n+union U // { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  int const i; // { dg-message \"should be initialized\" }\n+  int const i; // { dg-message \"should be initialized\" \"\" { target c++98 } }\n };\n \n void f1 ()\n {\n-  new A1; // { dg-error \"uninitialized const member\" }\n+  new A1; // { dg-error \"deleted|uninitialized const member\" }\n }\n \n void f2 ()\n {\n-  new A2; // { dg-error \"uninitialized const member\" }\n+  new A2; // { dg-error \"deleted|uninitialized const member\" }\n }\n \n void f3 ()\n {\n-  new A3; // { dg-error \"uninitialized reference member\" }\n+  new A3; // { dg-error \"deleted|uninitialized reference member\" }\n }\n \n void f4 ()\n {\n-  new A4; // { dg-error \"uninitialized reference member\" }\n+  new A4; // { dg-error \"deleted|uninitialized reference member\" }\n }\n \n void f5 ()\n {\n-  new A5; // { dg-error \"uninitialized reference member|uninitialized const member\" }\n+  new A5; // { dg-error \"deleted|uninitialized reference member|uninitialized const member\" }\n }\n \n void f6 ()\n {\n-  new S1<int>; // { dg-error \"uninitialized const member\" }\n+  new S1<int>; // { dg-error \"deleted|uninitialized const member\" }\n }\n \n void f7 ()\n {\n-  new S2<int>; // { dg-error \"uninitialized const member\" }\n+  new S2<int>; // { dg-error \"deleted|uninitialized const member\" }\n }\n \n void f8 ()\n {\n-  new S3<int>; // { dg-error \"uninitialized reference member\" }\n+  new S3<int>; // { dg-error \"deleted|uninitialized reference member\" }\n }\n \n void f9 ()\n {\n-  new S4<int>; // { dg-error \"uninitialized reference member|uninitialized const member\" }\n+  new S4<int>; // { dg-error \"deleted|uninitialized reference member|uninitialized const member\" }\n }\n \n void f10 ()\n@@ -166,30 +166,30 @@ void f10 ()\n \n void f11 ()\n {\n-  new A1[1]; // { dg-error \"uninitialized const member\" }\n+  new A1[1]; // { dg-error \"deleted|uninitialized const member\" }\n }\n \n void f12 ()\n {\n-  new A3[1]; // { dg-error \"uninitialized reference member\" }\n+  new A3[1]; // { dg-error \"deleted|uninitialized reference member\" }\n }\n \n void f13 ()\n {\n-  new Y1; // { dg-error \"uninitialized const member\" }\n+  new Y1; // { dg-error \"deleted|uninitialized const member\" }\n }\n \n void f14 ()\n {\n-  new Y2; // { dg-error \"uninitialized reference member\" }\n+  new Y2; // { dg-error \"deleted|uninitialized reference member\" }\n }\n \n void f15 ()\n {\n-  new Z; // { dg-error \"uninitialized reference member|uninitialized const member\" }\n+  new Z; // { dg-error \"deleted|uninitialized reference member|uninitialized const member\" }\n }\n \n void f16 ()\n {\n-  new U; // { dg-error \"uninitialized const member\" }\n+  new U; // { dg-error \"deleted|uninitialized const member\" }\n }"}, {"sha": "f868dfb91a4835724658a9e7417b59024149e04a", "filename": "gcc/testsuite/g++.dg/init/pr29043.C", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr29043.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr29043.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr29043.C?ref=eca7fc5755041ad90a7db18bbd6b3294f5075da7", "patch": "@@ -1,27 +1,27 @@\n // PR c++/29043\n // { dg-do compile }\n \n-struct S \n+struct S\t\t// { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  int const i; // { dg-message \"should be initialized\" }\n+  int const i; // { dg-message \"should be initialized\" \"\" { target c++98 } }\n };\n \n class C\n {\n public:\n-  C() {} // { dg-error \"uninitialized const member\" }   \n+  C() {} // { dg-error \"uninitialized const member|deleted\" }\n   S s;\n };\n \n-struct S2\n+struct S2\t\t// { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  int& ref; // { dg-message \"should be initialized\" }\n+  int& ref;   // { dg-message \"should be initialized\" \"\" { target c++98 } }\n };\n \n class C2\n {\n public:\n-  C2() {} // { dg-error \"uninitialized reference member\" }   \n+  C2() {} // { dg-error \"uninitialized reference member|deleted\" }\n   S2 s;\n };\n \n@@ -33,14 +33,14 @@ class C3\n   };\n };\n \n-struct S4\n+struct S4\t\t// { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  int const i; // { dg-message \"should be initialized\" }\n+  int const i; // { dg-message \"should be initialized\" \"\" { target c++98 } }\n };\n \n struct C4\n {\n-  C4() {} // { dg-error \"uninitialized const member\" }\n+  C4() {} // { dg-error \"uninitialized const member|deleted\" }\n   S4 s4[ 1 ];\n };\n "}, {"sha": "13a82210bc611efc9679e4aaef8856cb182b87d6", "filename": "gcc/testsuite/g++.dg/init/pr43719.C", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr43719.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr43719.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr43719.C?ref=eca7fc5755041ad90a7db18bbd6b3294f5075da7", "patch": "@@ -1,51 +1,51 @@\n // PR c++/43719\n // { dg-do compile }\n \n-struct A1\n+struct A1\t\t  // { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  int const j; // { dg-message \"should be initialized\" }\n+  int const j; // { dg-message \"should be initialized\" \"\" { target c++98 } }\n };\n \n-struct A2\n+struct A2\t\t  // { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  int const volatile i; // { dg-message \"should be initialized\" }\n+  int const volatile i; // { dg-message \"should be initialized\" \"\" { target c++98 } }\n };\n \n-struct A3\n+struct A3\t\t  // { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  int& ref; // { dg-message \"should be initialized\" }\n+  int& ref; // { dg-message \"should be initialized\" \"\" { target c++98 } }\n };\n \n-struct A4\n+struct A4\t\t  // { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  int const& ref; // { dg-message \"should be initialized\" }\n+  int const& ref; // { dg-message \"should be initialized\" \"\" { target c++98 } }\n };\n \n-struct A5\n+struct A5\t\t  // { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  int& ref; // { dg-message \"should be initialized\" }\n-  int const i; // { dg-message \"should be initialized\" }\n+  int& ref; // { dg-message \"should be initialized\" \"\" { target c++98 } }\n+  int const i; // { dg-message \"should be initialized\" \"\" { target c++98 } }\n };\n \n-template <class T> struct S1\n+template <class T> struct S1 // { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  T const i; // { dg-message \"should be initialized\" }\n+  T const i; // { dg-message \"should be initialized\" \"\" { target c++98 } }\n };\n \n-template <class T> struct S2\n+template <class T> struct S2 // { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  T const volatile i; // { dg-message \"should be initialized\" }\n+  T const volatile i; // { dg-message \"should be initialized\" \"\" { target c++98 } }\n };\n \n-template <class T> struct S3\n+template <class T> struct S3 // { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  T& ref; // { dg-message \"should be initialized\" }\n+  T& ref; // { dg-message \"should be initialized\" \"\" { target c++98 } }\n };\n \n-template <class T> struct S4\n+template <class T> struct S4 // { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  T const i; // { dg-message \"should be initialized\" }\n-  T& ref; // { dg-message \"should be initialized\" }\n+  T const i; // { dg-message \"should be initialized\" \"\" { target c++98 } }\n+  T& ref; // { dg-message \"should be initialized\" \"\" { target c++98 } }\n };\n \n struct X\n@@ -55,52 +55,52 @@ struct X\n   int const& r;\n };\n \n-struct Y11\n+struct Y11\t\t  // { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  int const i; // { dg-message \"should be initialized\" }\n+  int const i; // { dg-message \"should be initialized\" \"\" { target c++98 } }\n };\n \n-struct Y1\n+struct Y1\t\t  // { dg-error \"deleted\" \"\" { target c++11 } }\n {\n   Y11 a[1];\n };\n \n-struct Y22\n+struct Y22\t       // { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  int& ref; // { dg-message \"should be initialized\" }\n+  int& ref; // { dg-message \"should be initialized\" \"\" { target c++98 } }\n };\n \n-struct Y2\n+struct Y2\t\t      // { dg-error \"deleted\" \"\" { target c++11 } }\n {\n   Y22 a[1];\n };\n \n-struct Z1\n+struct Z1\t\t// { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  int const i; // { dg-message \"should be initialized\" }\n+  int const i; // { dg-message \"should be initialized\" \"\" { target c++98 } }\n };\n \n-struct Z2\n+struct Z2\t\t// { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  int& ref; // { dg-message \"should be initialized\" }\n+  int& ref; // { dg-message \"should be initialized\" \"\" { target c++98 } }\n };\n \n-struct Z3\n+struct Z3\t\t// { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  int const i; // { dg-message \"should be initialized\" }\n+  int const i; // { dg-message \"should be initialized\" \"\" { target c++98 } }\n };\n \n-struct Z4\n+struct Z4\t\t// { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  int& ref; // { dg-message \"should be initialized\" }\n+  int& ref; // { dg-message \"should be initialized\" \"\" { target c++98 } }\n };\n \n struct Z5\n {\n   int i;\n };\n \n-struct Z\n+struct Z\t\t// { dg-error \"deleted\" \"\" { target c++11 } }\n {\n   Z1 z1;\n   Z2 z2;\n@@ -109,55 +109,55 @@ struct Z\n   Z5 z5;\n };\n \n-union U\n+union U\t\t\t// { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-  int const i; // { dg-message \"should be initialized\" }\n+  int const i; // { dg-message \"should be initialized\" \"\" { target c++98 } }\n };\n \n \n void f1 ()\n {\n-  A1 a1; // { dg-error \"uninitialized const member\" }\n+  A1 a1; // { dg-error \"uninitialized const member|deleted\" }\n }\n \n void f2 ()\n {\n-  A2 a2; // { dg-error \"uninitialized const member\" }\n+  A2 a2; // { dg-error \"uninitialized const member|deleted\" }\n }\n \n void f3 ()\n {\n-  A3 a3; // { dg-error \"uninitialized reference member\" }\n+  A3 a3; // { dg-error \"uninitialized reference member|deleted\" }\n }\n \n void f4 ()\n {\n-  A4 a4; // { dg-error \"uninitialized reference member\" }\n+  A4 a4; // { dg-error \"uninitialized reference member|deleted\" }\n }\n \n void f5 ()\n {\n-  A5 a5; // { dg-error \"uninitialized reference member|uninitialized const member\" }\n+  A5 a5; // { dg-error \"uninitialized reference member|uninitialized const member|deleted\" }\n }\n \n void f6 ()\n {\n-  S1<int> s; // { dg-error \"uninitialized const member\" }\n+  S1<int> s; // { dg-error \"uninitialized const member|deleted\" }\n }\n \n void f7 ()\n {\n-  S2<int> s; // { dg-error \"uninitialized const member\" }\n+  S2<int> s; // { dg-error \"uninitialized const member|deleted\" }\n }\n \n void f8 ()\n {\n-  S3<int> s; // { dg-error \"uninitialized reference member\" }\n+  S3<int> s; // { dg-error \"uninitialized reference member|deleted\" }\n }\n \n void f9 ()\n {\n-  S4<int> s; // { dg-error \"uninitialized reference member|uninitialized const member\" }\n+  S4<int> s; // { dg-error \"uninitialized reference member|uninitialized const member|deleted\" }\n }\n \n void f10 ()\n@@ -167,31 +167,31 @@ void f10 ()\n \n void f11 ()\n {\n-  A1 a[ 1 ]; // { dg-error \"uninitialized const member\" }\n+  A1 a[ 1 ]; // { dg-error \"uninitialized const member|deleted\" }\n }\n \n void f12 ()\n {\n-  A3 a[ 1 ]; // { dg-error \"uninitialized reference member\" }\n+  A3 a[ 1 ]; // { dg-error \"uninitialized reference member|deleted\" }\n }\n \n void f13 ()\n {\n-  Y1 y1; // { dg-error \"uninitialized const member\" }\n+  Y1 y1; // { dg-error \"uninitialized const member|deleted\" }\n }\n \n void f14 ()\n {\n-  Y2 y2; // { dg-error \"uninitialized reference member\" }\n+  Y2 y2; // { dg-error \"uninitialized reference member|deleted\" }\n }\n \n void f15 ()\n {\n-  Z z; // { dg-error \"uninitialized reference member|uninitialized const member\" }\n+  Z z; // { dg-error \"uninitialized reference member|uninitialized const member|deleted\" }\n }\n \n void f16 ()\n {\n-  U u; // { dg-error \"uninitialized const member\" }\n+  U u; // { dg-error \"uninitialized const member|deleted\" }\n }\n "}, {"sha": "b4b0833dd69acd834c9d479e510bfe5586a6961b", "filename": "gcc/testsuite/g++.dg/init/pr44086.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr44086.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr44086.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr44086.C?ref=eca7fc5755041ad90a7db18bbd6b3294f5075da7", "patch": "@@ -1,15 +1,15 @@\n // PR c++/44086\n // { dg-do compile }\n \n-struct A\n+struct A\t\t// { dg-error \"uninitialized\" \"\" { target c++11 } }\n {\n-    int const i : 2; // { dg-message \"should be initialized\" }\n+    int const i : 2; // { dg-message \"should be initialized\" \"\" { target c++98 } }\n };\n \n void f()\n {\n-    A a;    // { dg-error \"uninitialized const\" }\n-    new A;  // { dg-error \"uninitialized const\" }\n-    A();\n-    new A();\n+    A a;\t\t      // { dg-error \"deleted|uninitialized const\" }\n+    new A;\t\t      // { dg-error \"deleted|uninitialized const\" }\n+    A();\t\t      // { dg-error \"deleted\" \"\" { target c++11 } }\n+    new A();\t\t      // { dg-error \"deleted\" \"\" { target c++11 } }\n }"}, {"sha": "6ac42415b4376cab478f57f2c90247e44a3c2143", "filename": "gcc/testsuite/g++.dg/init/ref14.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fref14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fref14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fref14.C?ref=eca7fc5755041ad90a7db18bbd6b3294f5075da7", "patch": "@@ -1,4 +1,6 @@\n // PR c++/33459\n+// { dg-prune-output \"uninitialized\" }\n+// { dg-prune-output \"deleted\" }\n \n union A\n {"}, {"sha": "1e4f7ae84e2eb1be5804a3a0d6a674db263903fb", "filename": "gcc/testsuite/g++.dg/init/uninitialized1.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Funinitialized1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca7fc5755041ad90a7db18bbd6b3294f5075da7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Funinitialized1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Funinitialized1.C?ref=eca7fc5755041ad90a7db18bbd6b3294f5075da7", "patch": "@@ -1,12 +1,12 @@\n // PR c++/58126\n \n-struct A {\n+struct A {\t\t// { dg-error \"uninitialized\" \"\" { target c++11 } }\n   const int value1;\n   int& value2;\n };\n \n-struct B : A { };\n+struct B : A { };\t// { dg-error \"deleted\" \"\" { target c++11 } }\n \n-A a;  // { dg-error \"uninitialized const member in 'struct A'|uninitialized reference member in 'struct A'\" }\n+A a;  // { dg-error \"deleted|uninitialized const member in 'struct A'|uninitialized reference member in 'struct A'\" }\n \n-B b;  // { dg-error \"uninitialized const member in base 'struct A' of 'struct B'|uninitialized reference member in base 'struct A' of 'struct B'\" }\n+B b;  // { dg-error \"deleted|uninitialized const member in base 'struct A' of 'struct B'|uninitialized reference member in base 'struct A' of 'struct B'\" }"}]}