{"sha": "7ee6fd6836b487a0229b69821c71b6878b529870", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VlNmZkNjgzNmI0ODdhMDIyOWI2OTgyMWM3MWI2ODc4YjUyOTg3MA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-03-12T13:04:43Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-03-12T13:04:43Z"}, "message": "tree.c (signed_or_unsigned_type_for): Use build_nonstandard_integer_type.\n\n2012-03-12  Richard Guenther  <rguenther@suse.de>\n\n\t* tree.c (signed_or_unsigned_type_for): Use\n\tbuild_nonstandard_integer_type.\n\t(signed_type_for): Adjust documentation.\n\t(unsigned_type_for): Likewise.\n\t* tree-pretty-print.c (dump_generic_node): Use standard names\n\tfor non-standard integer types if available.\n\nFrom-SVN: r185226", "tree": {"sha": "6c55d1468abe6bfcb3d90e9788f768fef21263d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c55d1468abe6bfcb3d90e9788f768fef21263d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ee6fd6836b487a0229b69821c71b6878b529870", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ee6fd6836b487a0229b69821c71b6878b529870", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ee6fd6836b487a0229b69821c71b6878b529870", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ee6fd6836b487a0229b69821c71b6878b529870/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d8aba32a0959169d00b9d89b28f6d4ccc4763be8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8aba32a0959169d00b9d89b28f6d4ccc4763be8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8aba32a0959169d00b9d89b28f6d4ccc4763be8"}], "stats": {"total": 83, "additions": 59, "deletions": 24}, "files": [{"sha": "76ec87daa6dd6c9752d4844c8ce2b75dcea90763", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ee6fd6836b487a0229b69821c71b6878b529870/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ee6fd6836b487a0229b69821c71b6878b529870/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ee6fd6836b487a0229b69821c71b6878b529870", "patch": "@@ -1,3 +1,12 @@\n+2012-03-12  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree.c (signed_or_unsigned_type_for): Use\n+\tbuild_nonstandard_integer_type.\n+\t(signed_type_for): Adjust documentation.\n+\t(unsigned_type_for): Likewise.\n+\t* tree-pretty-print.c (dump_generic_node): Use standard names\n+\tfor non-standard integer types if available.\n+\n 2012-03-12  Tristan Gingold  <gingold@adacore.com>\n \n \t* config/vms/vms.opt: Add vms-opts.h header."}, {"sha": "227999cd0d609be7577ed98e479b8a1e78b269f4", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ee6fd6836b487a0229b69821c71b6878b529870/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ee6fd6836b487a0229b69821c71b6878b529870/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=7ee6fd6836b487a0229b69821c71b6878b529870", "patch": "@@ -723,11 +723,41 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t      }\n \t    else if (TREE_CODE (node) == INTEGER_TYPE)\n \t      {\n-\t\tpp_string (buffer, (TYPE_UNSIGNED (node)\n-\t\t\t\t    ? \"<unnamed-unsigned:\"\n-\t\t\t\t    : \"<unnamed-signed:\"));\n-\t\tpp_decimal_int (buffer, TYPE_PRECISION (node));\n-\t\tpp_string (buffer, \">\");\n+\t\tif (TYPE_PRECISION (node) == CHAR_TYPE_SIZE)\n+\t\t  pp_string (buffer, (TYPE_UNSIGNED (node)\n+\t\t\t\t      ? \"unsigned char\"\n+\t\t\t\t      : \"signed char\"));\n+\t\telse if (TYPE_PRECISION (node) == SHORT_TYPE_SIZE)\n+\t\t  pp_string (buffer, (TYPE_UNSIGNED (node)\n+\t\t\t\t      ? \"unsigned short\"\n+\t\t\t\t      : \"signed short\"));\n+\t\telse if (TYPE_PRECISION (node) == INT_TYPE_SIZE)\n+\t\t  pp_string (buffer, (TYPE_UNSIGNED (node)\n+\t\t\t\t      ? \"unsigned int\"\n+\t\t\t\t      : \"signed int\"));\n+\t\telse if (TYPE_PRECISION (node) == LONG_TYPE_SIZE)\n+\t\t  pp_string (buffer, (TYPE_UNSIGNED (node)\n+\t\t\t\t      ? \"unsigned long\"\n+\t\t\t\t      : \"signed long\"));\n+\t\telse if (TYPE_PRECISION (node) == LONG_LONG_TYPE_SIZE)\n+\t\t  pp_string (buffer, (TYPE_UNSIGNED (node)\n+\t\t\t\t      ? \"unsigned long long\"\n+\t\t\t\t      : \"signed long long\"));\n+\t\telse if (TYPE_PRECISION (node) >= CHAR_TYPE_SIZE\n+\t\t\t && exact_log2 (TYPE_PRECISION (node)))\n+\t\t  {\n+\t\t    pp_string (buffer, (TYPE_UNSIGNED (node) ? \"uint\" : \"int\"));\n+\t\t    pp_decimal_int (buffer, TYPE_PRECISION (node));\n+\t\t    pp_string (buffer, \"_t\");\n+\t\t  }\n+\t\telse\n+\t\t  {\n+\t\t    pp_string (buffer, (TYPE_UNSIGNED (node)\n+\t\t\t\t\t? \"<unnamed-unsigned:\"\n+\t\t\t\t\t: \"<unnamed-signed:\"));\n+\t\t    pp_decimal_int (buffer, TYPE_PRECISION (node));\n+\t\t    pp_string (buffer, \">\");\n+\t\t  }\n \t      }\n \t    else if (TREE_CODE (node) == COMPLEX_TYPE)\n \t      {"}, {"sha": "3989a9b1b6a5b90ff88e7041a2740eabee9509af", "filename": "gcc/tree.c", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ee6fd6836b487a0229b69821c71b6878b529870/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ee6fd6836b487a0229b69821c71b6878b529870/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=7ee6fd6836b487a0229b69821c71b6878b529870", "patch": "@@ -10197,40 +10197,36 @@ widest_int_cst_value (const_tree x)\n   return val;\n }\n \n-/* If TYPE is an integral type, return an equivalent type which is\n-    unsigned iff UNSIGNEDP is true.  If TYPE is not an integral type,\n-    return TYPE itself.  */\n+/* If TYPE is an integral or pointer type, return an integer type with\n+   the same precision which is unsigned iff UNSIGNEDP is true, or itself\n+   if TYPE is already an integer type of signedness UNSIGNEDP.  */\n \n tree\n signed_or_unsigned_type_for (int unsignedp, tree type)\n {\n-  tree t = type;\n-  if (POINTER_TYPE_P (type))\n-    {\n-      /* If the pointer points to the normal address space, use the\n-\t size_type_node.  Otherwise use an appropriate size for the pointer\n-\t based on the named address space it points to.  */\n-      if (!TYPE_ADDR_SPACE (TREE_TYPE (t)))\n-\tt = size_type_node;\n-      else\n-\treturn lang_hooks.types.type_for_size (TYPE_PRECISION (t), unsignedp);\n-    }\n+  if (TREE_CODE (type) == INTEGER_TYPE && TYPE_UNSIGNED (type) == unsignedp)\n+    return type;\n \n-  if (!INTEGRAL_TYPE_P (t) || TYPE_UNSIGNED (t) == unsignedp)\n-    return t;\n+  if (!INTEGRAL_TYPE_P (type)\n+      && !POINTER_TYPE_P (type))\n+    return NULL_TREE;\n \n-  return lang_hooks.types.type_for_size (TYPE_PRECISION (t), unsignedp);\n+  return build_nonstandard_integer_type (TYPE_PRECISION (type), unsignedp);\n }\n \n-/* Returns unsigned variant of TYPE.  */\n+/* If TYPE is an integral or pointer type, return an integer type with\n+   the same precision which is unsigned, or itself if TYPE is already an\n+   unsigned integer type.  */\n \n tree\n unsigned_type_for (tree type)\n {\n   return signed_or_unsigned_type_for (1, type);\n }\n \n-/* Returns signed variant of TYPE.  */\n+/* If TYPE is an integral or pointer type, return an integer type with\n+   the same precision which is signed, or itself if TYPE is already a\n+   signed integer type.  */\n \n tree\n signed_type_for (tree type)"}]}