{"sha": "c565a1e7b774b3a578f15ca865e5eb69aebc0820", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU2NWExZTdiNzc0YjNhNTc4ZjE1Y2E4NjVlNWViNjlhZWJjMDgyMA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2008-07-18T15:48:04Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2008-07-18T15:48:04Z"}, "message": "re PR middle-end/36859 (Caller/callee mismatch for vararg on stack)\n\ngcc/\n\n2008-07-18  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR middle-end/36859\n\t* builtins.c (std_gimplify_va_arg_expr): Limit alignment to\n\tPREFERRED_STACK_BOUNDARY.\n\t* config/i386/i386.c (ix86_gimplify_va_arg): Likewise.\n\ntestsuite/\n\n2008-07-18  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR middle-end/36859\n\t* gcc.target/i386/vararg-2.c: New.\n\nFrom-SVN: r137955", "tree": {"sha": "c2c577487a8faefadd1df0441597ce049b27a9d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2c577487a8faefadd1df0441597ce049b27a9d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c565a1e7b774b3a578f15ca865e5eb69aebc0820", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c565a1e7b774b3a578f15ca865e5eb69aebc0820", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c565a1e7b774b3a578f15ca865e5eb69aebc0820", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c565a1e7b774b3a578f15ca865e5eb69aebc0820/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5ae53a2559819d1628193d5a3d9257029ebe1fe7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ae53a2559819d1628193d5a3d9257029ebe1fe7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ae53a2559819d1628193d5a3d9257029ebe1fe7"}], "stats": {"total": 76, "additions": 73, "deletions": 3}, "files": [{"sha": "3c535ef5c4fc6034b411781a782b727cbf61dc29", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c565a1e7b774b3a578f15ca865e5eb69aebc0820/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c565a1e7b774b3a578f15ca865e5eb69aebc0820/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c565a1e7b774b3a578f15ca865e5eb69aebc0820", "patch": "@@ -1,3 +1,10 @@\n+2008-07-18  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR middle-end/36859\n+\t* builtins.c (std_gimplify_va_arg_expr): Limit alignment to\n+\tPREFERRED_STACK_BOUNDARY.\n+\t* config/i386/i386.c (ix86_gimplify_va_arg): Likewise.\n+\n 2008-07-18  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR middle-end/36858"}, {"sha": "89eca002270320edc646be2c9ab309468f0ee251", "filename": "gcc/builtins.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c565a1e7b774b3a578f15ca865e5eb69aebc0820/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c565a1e7b774b3a578f15ca865e5eb69aebc0820/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=c565a1e7b774b3a578f15ca865e5eb69aebc0820", "patch": "@@ -4775,7 +4775,16 @@ std_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p, tree *post_p)\n     type = build_pointer_type (type);\n \n   align = PARM_BOUNDARY / BITS_PER_UNIT;\n-  boundary = FUNCTION_ARG_BOUNDARY (TYPE_MODE (type), type) / BITS_PER_UNIT;\n+  boundary = FUNCTION_ARG_BOUNDARY (TYPE_MODE (type), type);\n+\n+  /* When we align parameter on stack for caller, if the parameter\n+     alignment is beyond PREFERRED_STACK_BOUNDARY, it will be\n+     aligned at PREFERRED_STACK_BOUNDARY.  We will match callee\n+     here with caller.  */\n+  if (boundary > PREFERRED_STACK_BOUNDARY)\n+    boundary = PREFERRED_STACK_BOUNDARY;\n+\n+  boundary /= BITS_PER_UNIT;\n \n   /* Hoist the valist value into a temporary for the moment.  */\n   valist_tmp = get_initialized_tmp_var (valist, pre_p, NULL);"}, {"sha": "d910bd24250d1009f99b4b6ce9b9302978ae91ad", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c565a1e7b774b3a578f15ca865e5eb69aebc0820/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c565a1e7b774b3a578f15ca865e5eb69aebc0820/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c565a1e7b774b3a578f15ca865e5eb69aebc0820", "patch": "@@ -5511,6 +5511,7 @@ ix86_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n   int indirect_p = 0;\n   tree ptrtype;\n   enum machine_mode nat_mode;\n+  int arg_boundary;\n \n   /* Only 64bit target needs something special.  */\n   if (!TARGET_64BIT || is_va_list_char_pointer (TREE_TYPE (valist)))\n@@ -5709,13 +5710,21 @@ ix86_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n \n   /* ... otherwise out of the overflow area.  */\n \n+  /* When we align parameter on stack for caller, if the parameter\n+     alignment is beyond PREFERRED_STACK_BOUNDARY, it will be\n+     aligned at PREFERRED_STACK_BOUNDARY.  We will match callee\n+     here with caller.  */\n+  arg_boundary = FUNCTION_ARG_BOUNDARY (VOIDmode, type);\n+  if ((unsigned int) arg_boundary > PREFERRED_STACK_BOUNDARY)\n+     arg_boundary = PREFERRED_STACK_BOUNDARY;\n+\n   /* Care for on-stack alignment if needed.  */\n-  if (FUNCTION_ARG_BOUNDARY (VOIDmode, type) <= 64\n+  if (arg_boundary <= 64\n       || integer_zerop (TYPE_SIZE (type)))\n     t = ovf;\n  else\n     {\n-      HOST_WIDE_INT align = FUNCTION_ARG_BOUNDARY (VOIDmode, type) / 8;\n+      HOST_WIDE_INT align = arg_boundary / 8;\n       t = build2 (POINTER_PLUS_EXPR, TREE_TYPE (ovf), ovf,\n \t\t  size_int (align - 1));\n       t = fold_convert (sizetype, t);"}, {"sha": "cdf587a21ee7c3a756ff66a01b3e97f3da8f921d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c565a1e7b774b3a578f15ca865e5eb69aebc0820/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c565a1e7b774b3a578f15ca865e5eb69aebc0820/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c565a1e7b774b3a578f15ca865e5eb69aebc0820", "patch": "@@ -1,3 +1,8 @@\n+2008-07-18  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR middle-end/36859\n+\t* gcc.target/i386/vararg-2.c: New.\n+\n 2008-07-18  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR middle-end/36858"}, {"sha": "0534ac77478f7f85c18c83a99111262e2752cb9b", "filename": "gcc/testsuite/gcc.target/i386/vararg-2.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c565a1e7b774b3a578f15ca865e5eb69aebc0820/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvararg-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c565a1e7b774b3a578f15ca865e5eb69aebc0820/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvararg-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvararg-2.c?ref=c565a1e7b774b3a578f15ca865e5eb69aebc0820", "patch": "@@ -0,0 +1,40 @@\n+/* PR middle-end/36859 */\n+/* { dg-do run } */\n+/* { dg-options \"-w\" { target { lp64 } } } */\n+/* { dg-options \"-w -msse2 -mpreferred-stack-boundary=2\" { target { ilp32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include <stdarg.h>\n+#include <emmintrin.h>\n+\n+__m128\n+__attribute__((noinline))\n+test (int a, ...)\n+{\n+  __m128 x;\n+  va_list va_arglist;\n+\n+  va_start (va_arglist, a);\n+  x = va_arg (va_arglist, __m128);\n+  va_end (va_arglist);\n+  return x;\n+}\n+\n+__m128 n1 = { -283.3, -23.3, 213.4, 1119.03 };\n+\n+int\n+__attribute__((noinline))\n+foo (void)\n+{\n+  __m128 x = test (1, n1);\n+  if (__builtin_memcmp (&x, &n1, sizeof (x)) != 0)\n+    abort ();\n+  return 0;\n+}\n+\n+static void\n+__attribute__((noinline))\n+sse2_test (void)\n+{\n+  foo ();\n+}"}]}