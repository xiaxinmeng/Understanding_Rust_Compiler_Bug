{"sha": "8b1065f175b12ed568852af5a054c8592641f699", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGIxMDY1ZjE3NWIxMmVkNTY4ODUyYWY1YTA1NGM4NTkyNjQxZjY5OQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2001-01-31T11:04:33Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2001-01-31T11:04:33Z"}, "message": "fp-bit.c: Include hconfig.h\n\n* config/fp-bit.c: Include hconfig.h\n(float_to_si): Don't assume SImode is 32-bits wide.\n(float_to_usi): Likewise.\n\nFrom-SVN: r39373", "tree": {"sha": "5aaeeb779c9206aa1bc7eaf352ef209e4e2b6c82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5aaeeb779c9206aa1bc7eaf352ef209e4e2b6c82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b1065f175b12ed568852af5a054c8592641f699", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b1065f175b12ed568852af5a054c8592641f699", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b1065f175b12ed568852af5a054c8592641f699", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b1065f175b12ed568852af5a054c8592641f699/comments", "author": null, "committer": null, "parents": [{"sha": "0aca1a4fd3d3f5fbfbbbfcc8e29a3f1cbb45d56a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0aca1a4fd3d3f5fbfbbbfcc8e29a3f1cbb45d56a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0aca1a4fd3d3f5fbfbbbfcc8e29a3f1cbb45d56a"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "5024a54c551f4f2fce23be9fc11bf29c4009ec7a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b1065f175b12ed568852af5a054c8592641f699/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b1065f175b12ed568852af5a054c8592641f699/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b1065f175b12ed568852af5a054c8592641f699", "patch": "@@ -1,3 +1,9 @@\n+2001-01-31  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* config/fp-bit.c: Include hconfig.h\n+\t(float_to_si): Don't assume SImode is 32-bits wide.\n+\t(float_to_usi): Likewise.\n+\n 2001-01-31  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* c-parse.in (structsp): Pedwarn when \"enum foo\" refers to an"}, {"sha": "07d21519607f34215f66c8fb6261ba4a8af4f188", "filename": "gcc/config/fp-bit.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b1065f175b12ed568852af5a054c8592641f699/gcc%2Fconfig%2Ffp-bit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b1065f175b12ed568852af5a054c8592641f699/gcc%2Fconfig%2Ffp-bit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffp-bit.c?ref=8b1065f175b12ed568852af5a054c8592641f699", "patch": "@@ -1,8 +1,8 @@\n /* This is a software floating point library which can be used instead of\n    the floating point routines in libgcc1.c for targets without hardware\n    floating point. \n-   Copyright (C) 1994, 1995, 1996, 1997, 1998,\n-   2000 Free Software Foundation, Inc.\n+   Copyright (C) 1994, 1995, 1996, 1997, 1998, 2000, 2001\n+   Free Software Foundation, Inc.\n \n This file is free software; you can redistribute it and/or modify it\n under the terms of the GNU General Public License as published by the\n@@ -45,6 +45,7 @@ Boston, MA 02111-1307, USA.  */\n    to one copy, then compile both copies and add them to libgcc.a.  */\n \n #include \"fp-bit.h\"\n+#include \"hconfig.h\"\n \n /* The following macros can be defined to change the behaviour of this file:\n    FLOAT: Implement a `float', aka SFmode, fp library.  If this is not\n@@ -1222,7 +1223,7 @@ float_to_si (FLO_type arg_a)\n   /* it is a number, but a small one */\n   if (a.normal_exp < 0)\n     return 0;\n-  if (a.normal_exp > 30)\n+  if (a.normal_exp > 4 * BITS_PER_UNIT - 2)\n     return a.sign ? (-MAX_SI_INT)-1 : MAX_SI_INT;\n   tmp = a.fraction.ll >> ((FRACBITS + NGARDS) - a.normal_exp);\n   return a.sign ? (-tmp) : (tmp);\n@@ -1259,7 +1260,7 @@ float_to_usi (FLO_type arg_a)\n   /* it is a number, but a small one */\n   if (a.normal_exp < 0)\n     return 0;\n-  if (a.normal_exp > 31)\n+  if (a.normal_exp > 4 * BITS_PER_UNIT - 1)\n     return MAX_USI_INT;\n   else if (a.normal_exp > (FRACBITS + NGARDS))\n     return a.fraction.ll << (a.normal_exp - (FRACBITS + NGARDS));"}]}