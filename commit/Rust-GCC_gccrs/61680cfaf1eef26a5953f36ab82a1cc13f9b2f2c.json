{"sha": "61680cfaf1eef26a5953f36ab82a1cc13f9b2f2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE2ODBjZmFmMWVlZjI2YTU5NTNmMzZhYjgyYTFjYzEzZjliMmYyYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-08-25T05:19:41Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-08-25T05:19:41Z"}, "message": "c++: Fix up ptr.~PTR () handling [PR96721]\n\nThe following testcase is miscompiled, because build_trivial_dtor_call\nhandles the case when instance is a pointer by adding a clobber to what\nthe pointer points to (which is desirable e.g. for delete) rather than the\npointer itself.  That is I think always desirable behavior for references,\nbut for pointers for the pseudo dtor case it is not.\n\n2020-08-25  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/96721\n\t* cp-tree.h (build_trivial_dtor_call): Add bool argument defaulted\n\tto false.\n\t* call.c (build_trivial_dtor_call): Add NO_PTR_DEREF argument.  If\n\tinstance is a pointer and NO_PTR_DEREF is true, clobber the pointer\n\trather than what it points to.\n\t* semantics.c (finish_call_expr): Call build_trivial_dtor_call with\n\ttrue as NO_PTR_DEREF.\n\n\t* g++.dg/opt/flifetime-dse8.C: New test.", "tree": {"sha": "9f1f1aa3c1f1c81e02feef5969fc2efedad98709", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f1f1aa3c1f1c81e02feef5969fc2efedad98709"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61680cfaf1eef26a5953f36ab82a1cc13f9b2f2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61680cfaf1eef26a5953f36ab82a1cc13f9b2f2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61680cfaf1eef26a5953f36ab82a1cc13f9b2f2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61680cfaf1eef26a5953f36ab82a1cc13f9b2f2c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f2f79df19fbfaa1c4be313c2f2b5ce04646433e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f2f79df19fbfaa1c4be313c2f2b5ce04646433e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f2f79df19fbfaa1c4be313c2f2b5ce04646433e"}], "stats": {"total": 25, "additions": 20, "deletions": 5}, "files": [{"sha": "4726e57a30df2779f1e80b5ce4b3556e16a2dc2f", "filename": "gcc/cp/call.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61680cfaf1eef26a5953f36ab82a1cc13f9b2f2c/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61680cfaf1eef26a5953f36ab82a1cc13f9b2f2c/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=61680cfaf1eef26a5953f36ab82a1cc13f9b2f2c", "patch": "@@ -8430,10 +8430,12 @@ conv_binds_ref_to_prvalue (conversion *c)\n }\n \n /* Call the trivial destructor for INSTANCE, which can be either an lvalue of\n-   class type or a pointer to class type.  */\n+   class type or a pointer to class type.  If NO_PTR_DEREF is true and\n+   INSTANCE has pointer type, clobber the pointer rather than what it points\n+   to.  */\n \n tree\n-build_trivial_dtor_call (tree instance)\n+build_trivial_dtor_call (tree instance, bool no_ptr_deref)\n {\n   gcc_assert (!is_dummy_object (instance));\n \n@@ -8443,7 +8445,8 @@ build_trivial_dtor_call (tree instance)\n       return fold_convert (void_type_node, instance);\n     }\n \n-  if (INDIRECT_TYPE_P (TREE_TYPE (instance)))\n+  if (INDIRECT_TYPE_P (TREE_TYPE (instance))\n+      && (!no_ptr_deref || TYPE_REF_P (TREE_TYPE (instance))))\n     {\n       if (VOID_TYPE_P (TREE_TYPE (TREE_TYPE (instance))))\n \tgoto no_clobber;"}, {"sha": "2b7c9b9913abff9cf1efbbfc920d6ae69abfd35c", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61680cfaf1eef26a5953f36ab82a1cc13f9b2f2c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61680cfaf1eef26a5953f36ab82a1cc13f9b2f2c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=61680cfaf1eef26a5953f36ab82a1cc13f9b2f2c", "patch": "@@ -6248,7 +6248,7 @@ extern bool null_member_pointer_value_p\t\t(tree);\n extern bool sufficient_parms_p\t\t\t(const_tree);\n extern tree type_decays_to\t\t\t(tree);\n extern tree extract_call_expr\t\t\t(tree);\n-extern tree build_trivial_dtor_call\t\t(tree);\n+extern tree build_trivial_dtor_call\t\t(tree, bool = false);\n extern tree build_user_type_conversion\t\t(tree, tree, int,\n \t\t\t\t\t\t tsubst_flags_t);\n extern tree build_new_function_call\t\t(tree, vec<tree, va_gc> **,"}, {"sha": "3877a0e536a49bca581168dd53b67a8e38a34b59", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61680cfaf1eef26a5953f36ab82a1cc13f9b2f2c/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61680cfaf1eef26a5953f36ab82a1cc13f9b2f2c/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=61680cfaf1eef26a5953f36ab82a1cc13f9b2f2c", "patch": "@@ -2713,7 +2713,7 @@ finish_call_expr (tree fn, vec<tree, va_gc> **args, bool disallow_virtual,\n \t denoted by the object expression of the class member access.  */\n       tree ob = TREE_OPERAND (fn, 0);\n       if (obvalue_p (ob))\n-\tresult = build_trivial_dtor_call (ob);\n+\tresult = build_trivial_dtor_call (ob, true);\n       else\n \t/* No location to clobber.  */\n \tresult = convert_to_void (ob, ICV_STATEMENT, complain);"}, {"sha": "eeb814e03e39e9f69919e21179c0051039dfc7a0", "filename": "gcc/testsuite/g++.dg/opt/flifetime-dse8.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61680cfaf1eef26a5953f36ab82a1cc13f9b2f2c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fflifetime-dse8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61680cfaf1eef26a5953f36ab82a1cc13f9b2f2c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fflifetime-dse8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fflifetime-dse8.C?ref=61680cfaf1eef26a5953f36ab82a1cc13f9b2f2c", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/96721\n+// { dg-do run }\n+// { dg-options \"-O2 -flifetime-dse\" }\n+\n+typedef int *T;\n+\n+int\n+main ()\n+{\n+  T a = T ();\n+  a.~T ();\n+}"}]}