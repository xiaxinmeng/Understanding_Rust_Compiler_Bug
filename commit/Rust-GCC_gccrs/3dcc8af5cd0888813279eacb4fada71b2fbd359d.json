{"sha": "3dcc8af5cd0888813279eacb4fada71b2fbd359d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RjYzhhZjVjZDA4ODg4MTMyNzllYWNiNGZhZGE3MWIyZmJkMzU5ZA==", "commit": {"author": {"name": "Ilya Tocar", "email": "ilya.tocar@intel.com", "date": "2014-11-21T15:44:37Z"}, "committer": {"name": "Ilya Tocar", "email": "tocarip@gcc.gnu.org", "date": "2014-11-21T15:44:37Z"}, "message": "Add avx512vbmi instructions.\n\ngcc/\n\n\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_AVX512VBMI_SET\n\tOPTION_MASK_ISA_AVX512VBMI_UNSET): New.\n\t(ix86_handle_option): Handle OPT_mavx512vbmi.\n\t* config.gcc: Add avx512vbmiintrin.h, avx512vbmivlintrin.h.\n\t* config/i386/avx512vbmiintrin.h: New file.\n\t* config/i386/avx512vbmivlintrin.h: Ditto.\n\t* config/i386/cpuid.h (bit_AVX512VBMI): New.\n\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect avx512vbmi.\n\t* config/i386/i386-c.c (ix86_target_macros_internal): Define\n\t__AVX512VBMI__.\n\t* config/i386/i386.c (ix86_target_string): Add -mavx512vbmi.\n\t(PTA_AVX512VBMI): Define.\n\t(ix86_option_override_internal): Handle new options.\n\t(ix86_valid_target_attribute_inner_p): Add avx512vbmi,\n\t(ix86_builtins): Add IX86_BUILTIN_VPMULTISHIFTQB512,\n\tIX86_BUILTIN_VPMULTISHIFTQB256, IX86_BUILTIN_VPMULTISHIFTQB128,\n\tIX86_BUILTIN_VPERMVARQI512_MASK, IX86_BUILTIN_VPERMT2VARQI512,\n\tIX86_BUILTIN_VPERMT2VARQI512_MASKZ, IX86_BUILTIN_VPERMI2VARQI512,\n\tIX86_BUILTIN_VPERMVARQI256_MASK, IX86_BUILTIN_VPERMVARQI128_MASK,\n\tIX86_BUILTIN_VPERMT2VARQI256, IX86_BUILTIN_VPERMT2VARQI256_MASKZ,\n\tIX86_BUILTIN_VPERMT2VARQI128, IX86_BUILTIN_VPERMI2VARQI256,\n\tIX86_BUILTIN_VPERMI2VARQI128.\n\t(bdesc_special_args): Add __builtin_ia32_vpmultishiftqb512_mask,\n\t__builtin_ia32_vpmultishiftqb256_mask,\n\t__builtin_ia32_vpmultishiftqb128_mask,\n\t__builtin_ia32_permvarqi512_mask, __builtin_ia32_vpermt2varqi512_mask,\n\t__builtin_ia32_vpermt2varqi512_maskz,\n\t__builtin_ia32_vpermi2varqi512_mask, __builtin_ia32_permvarqi256_mask,\n\t__builtin_ia32_permvarqi128_mask, __builtin_ia32_vpermt2varqi256_mask,\n\t__builtin_ia32_vpermt2varqi256_maskz,\n\t__builtin_ia32_vpermt2varqi128_mask,\n\t__builtin_ia32_vpermt2varqi128_maskz,\n\t__builtin_ia32_vpermi2varqi256_mask,\n\t__builtin_ia32_vpermi2varqi128_mask.\n\t(ix86_hard_regno_mode_ok): Allow big masks for AVX512VBMI.\n\t* config/i386/i386.h (TARGET_AVX512VBMI, TARGET_AVX512VBMI_P): Define.\n\t* config/i386/i386.opt: Add mavx512vbmi.\n\t* config/i386/immintrin.h: Include avx512vbmiintrin.h,\n\tavx512vbmivlintrin.h.\n\t* config/i386/sse.md (unspec): Add UNSPEC_VPMULTISHIFT.\n\t(VI1_AVX512VL): New iterator.\n\t(<avx512>_permvar<mode><mask_name>): Use it.\n\t(<avx512>_vpermi2var<mode>3_maskz): Ditto.\n\t(<avx512>_vpermi2var<mode>3<sd_maskz_name>): Ditto.\n\t(<avx512>_vpermi2var<mode>3_mask): Ditto.\n\t(<avx512>_vpermt2var<mode>3_maskz): Ditto.\n\t(<avx512>_vpermt2var<mode>3<sd_maskz_name>): Ditto.\n\t(<avx512>_vpermt2var<mode>3_mask): Ditto.\n\t(vpmultishiftqb<mode><mask_name>): Ditto.\n\ngcc/testsuite/\n\n\t* g++.dg/other/i386-2.C: Add -mavx512vbmi.\n\t* g++.dg/other/i386-3.C: Ditto.\n\t* gcc.target/i386/avx512f-helper.h: Add avx512vbmi-check.h.\n\t* gcc.target/i386/avx512vbmi-check.h: Ditto.\n\t* gcc.target/i386/avx512vbmi-vpermb-1.c: Ditto.\n\t* gcc.target/i386/avx512vbmi-vpermb-2.c: Ditto.\n\t* gcc.target/i386/avx512vbmi-vpermi2b-1.c: Ditto.\n\t* gcc.target/i386/avx512vbmi-vpermi2b-2.c: Ditto.\n\t* gcc.target/i386/avx512vbmi-vpermt2b-1.c: Ditto.\n\t* gcc.target/i386/avx512vbmi-vpermt2b-2.c: Ditto.\n\t* gcc.target/i386/avx512vbmi-vpmultishiftqb-1.c: Ditto.\n\t* gcc.target/i386/avx512vbmi-vpmultishiftqb-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermb-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermi2b-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermt2b-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmaddhuq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmaddluq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmultishiftqb-2.c: Ditto.\n\t* gcc.target/i386/i386.exp (check_effective_target_avx512vbmi): New.\n\t* gcc.target/i386/sse-12.c: Add new options.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-14.c: Ditto.\n\t* gcc.target/i386/sse-22.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\nFrom-SVN: r217932", "tree": {"sha": "3c1817f0824954ca205db74664e56d4b9955c66c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c1817f0824954ca205db74664e56d4b9955c66c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3dcc8af5cd0888813279eacb4fada71b2fbd359d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dcc8af5cd0888813279eacb4fada71b2fbd359d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dcc8af5cd0888813279eacb4fada71b2fbd359d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dcc8af5cd0888813279eacb4fada71b2fbd359d/comments", "author": {"login": "TocarIP", "id": 16836375, "node_id": "MDQ6VXNlcjE2ODM2Mzc1", "avatar_url": "https://avatars.githubusercontent.com/u/16836375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TocarIP", "html_url": "https://github.com/TocarIP", "followers_url": "https://api.github.com/users/TocarIP/followers", "following_url": "https://api.github.com/users/TocarIP/following{/other_user}", "gists_url": "https://api.github.com/users/TocarIP/gists{/gist_id}", "starred_url": "https://api.github.com/users/TocarIP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TocarIP/subscriptions", "organizations_url": "https://api.github.com/users/TocarIP/orgs", "repos_url": "https://api.github.com/users/TocarIP/repos", "events_url": "https://api.github.com/users/TocarIP/events{/privacy}", "received_events_url": "https://api.github.com/users/TocarIP/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "de6fba39f3ad3790ba8efe47c764b5fe167155d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de6fba39f3ad3790ba8efe47c764b5fe167155d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de6fba39f3ad3790ba8efe47c764b5fe167155d3"}], "stats": {"total": 1223, "additions": 1210, "deletions": 13}, "files": [{"sha": "c6d3f4ac3f25388c2437bd656773ef493753b8af", "filename": "gcc/ChangeLog", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3dcc8af5cd0888813279eacb4fada71b2fbd359d", "patch": "@@ -1,3 +1,55 @@\n+2014-11-21  Ilya Tocar  <ilya.tocar@intel.com>\n+\n+\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_AVX512VBMI_SET\n+\tOPTION_MASK_ISA_AVX512VBMI_UNSET): New.\n+\t(ix86_handle_option): Handle OPT_mavx512vbmi.\n+\t* config.gcc: Add avx512vbmiintrin.h, avx512vbmivlintrin.h.\n+\t* config/i386/avx512vbmiintrin.h: New file.\n+\t* config/i386/avx512vbmivlintrin.h: Ditto.\n+\t* config/i386/cpuid.h (bit_AVX512VBMI): New.\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect avx512vbmi.\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Define\n+\t__AVX512VBMI__.\n+\t* config/i386/i386.c (ix86_target_string): Add -mavx512vbmi.\n+\t(PTA_AVX512VBMI): Define.\n+\t(ix86_option_override_internal): Handle new options.\n+\t(ix86_valid_target_attribute_inner_p): Add avx512vbmi,\n+\t(ix86_builtins): Add IX86_BUILTIN_VPMULTISHIFTQB512,\n+\tIX86_BUILTIN_VPMULTISHIFTQB256, IX86_BUILTIN_VPMULTISHIFTQB128,\n+\tIX86_BUILTIN_VPERMVARQI512_MASK, IX86_BUILTIN_VPERMT2VARQI512,\n+\tIX86_BUILTIN_VPERMT2VARQI512_MASKZ, IX86_BUILTIN_VPERMI2VARQI512,\n+\tIX86_BUILTIN_VPERMVARQI256_MASK, IX86_BUILTIN_VPERMVARQI128_MASK,\n+\tIX86_BUILTIN_VPERMT2VARQI256, IX86_BUILTIN_VPERMT2VARQI256_MASKZ,\n+\tIX86_BUILTIN_VPERMT2VARQI128, IX86_BUILTIN_VPERMI2VARQI256,\n+\tIX86_BUILTIN_VPERMI2VARQI128.\n+\t(bdesc_special_args): Add __builtin_ia32_vpmultishiftqb512_mask,\n+\t__builtin_ia32_vpmultishiftqb256_mask,\n+\t__builtin_ia32_vpmultishiftqb128_mask,\n+\t__builtin_ia32_permvarqi512_mask, __builtin_ia32_vpermt2varqi512_mask,\n+\t__builtin_ia32_vpermt2varqi512_maskz,\n+\t__builtin_ia32_vpermi2varqi512_mask, __builtin_ia32_permvarqi256_mask,\n+\t__builtin_ia32_permvarqi128_mask, __builtin_ia32_vpermt2varqi256_mask,\n+\t__builtin_ia32_vpermt2varqi256_maskz,\n+\t__builtin_ia32_vpermt2varqi128_mask,\n+\t__builtin_ia32_vpermt2varqi128_maskz,\n+\t__builtin_ia32_vpermi2varqi256_mask,\n+\t__builtin_ia32_vpermi2varqi128_mask.\n+\t(ix86_hard_regno_mode_ok): Allow big masks for AVX512VBMI.\n+\t* config/i386/i386.h (TARGET_AVX512VBMI, TARGET_AVX512VBMI_P): Define.\n+\t* config/i386/i386.opt: Add mavx512vbmi.\n+\t* config/i386/immintrin.h: Include avx512vbmiintrin.h,\n+\tavx512vbmivlintrin.h.\n+\t* config/i386/sse.md (unspec): Add UNSPEC_VPMULTISHIFT.\n+\t(VI1_AVX512VL): New iterator.\n+\t(<avx512>_permvar<mode><mask_name>): Use it.\n+\t(<avx512>_vpermi2var<mode>3_maskz): Ditto.\n+\t(<avx512>_vpermi2var<mode>3<sd_maskz_name>): Ditto.\n+\t(<avx512>_vpermi2var<mode>3_mask): Ditto.\n+\t(<avx512>_vpermt2var<mode>3_maskz): Ditto.\n+\t(<avx512>_vpermt2var<mode>3<sd_maskz_name>): Ditto.\n+\t(<avx512>_vpermt2var<mode>3_mask): Ditto.\n+\t(vpmultishiftqb<mode><mask_name>): Ditto.\n+\n 2014-11-21  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \tPR rtl-optimization/63952"}, {"sha": "1c4f15e53dc77b16dc486f4ae87727ad1723a2ff", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=3dcc8af5cd0888813279eacb4fada71b2fbd359d", "patch": "@@ -73,6 +73,8 @@ along with GCC; see the file COPYING3.  If not see\n   (OPTION_MASK_ISA_AVX512VL | OPTION_MASK_ISA_AVX512F_SET)\n #define OPTION_MASK_ISA_AVX512IFMA_SET \\\n   (OPTION_MASK_ISA_AVX512IFMA | OPTION_MASK_ISA_AVX512F_SET)\n+#define OPTION_MASK_ISA_AVX512VBMI_SET \\\n+  (OPTION_MASK_ISA_AVX512VBMI | OPTION_MASK_ISA_AVX512F_SET)\n #define OPTION_MASK_ISA_RTM_SET OPTION_MASK_ISA_RTM\n #define OPTION_MASK_ISA_PRFCHW_SET OPTION_MASK_ISA_PRFCHW\n #define OPTION_MASK_ISA_RDSEED_SET OPTION_MASK_ISA_RDSEED\n@@ -170,6 +172,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_AVX512BW_UNSET OPTION_MASK_ISA_AVX512BW\n #define OPTION_MASK_ISA_AVX512VL_UNSET OPTION_MASK_ISA_AVX512VL\n #define OPTION_MASK_ISA_AVX512IFMA_UNSET OPTION_MASK_ISA_AVX512IFMA\n+#define OPTION_MASK_ISA_AVX512VBMI_UNSET OPTION_MASK_ISA_AVX512VBMI\n #define OPTION_MASK_ISA_RTM_UNSET OPTION_MASK_ISA_RTM\n #define OPTION_MASK_ISA_PRFCHW_UNSET OPTION_MASK_ISA_PRFCHW\n #define OPTION_MASK_ISA_RDSEED_UNSET OPTION_MASK_ISA_RDSEED\n@@ -459,6 +462,19 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mavx512vbmi:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX512VBMI_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_AVX512VBMI_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_AVX512VBMI_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_AVX512VBMI_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_mfma:\n       if (value)\n \t{"}, {"sha": "da2a7237c9885f3a9454e879bf8bea17a3ffe4bd", "filename": "gcc/config.gcc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=3dcc8af5cd0888813279eacb4fada71b2fbd359d", "patch": "@@ -368,7 +368,8 @@ i[34567]86-*-*)\n \t\t       shaintrin.h clflushoptintrin.h xsavecintrin.h\n \t\t       xsavesintrin.h avx512dqintrin.h avx512bwintrin.h\n \t\t       avx512vlintrin.h avx512vlbwintrin.h avx512vldqintrin.h\n-\t\t       avx512ifmaintrin.h avx512ifmavlintrin.h\"\n+\t\t       avx512ifmaintrin.h avx512ifmavlintrin.h avx512vbmiintrin.h\n+\t\t       avx512vbmivlintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -388,7 +389,8 @@ x86_64-*-*)\n \t\t       shaintrin.h clflushoptintrin.h xsavecintrin.h\n \t\t       xsavesintrin.h avx512dqintrin.h avx512bwintrin.h\n \t\t       avx512vlintrin.h avx512vlbwintrin.h avx512vldqintrin.h\n-\t\t       avx512ifmaintrin.h avx512ifmavlintrin.h\"\n+\t\t       avx512ifmaintrin.h avx512ifmavlintrin.h avx512vbmiintrin.h\n+\t\t       avx512vbmivlintrin.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "c2c59cef1331002777e6664b8cbf9df5ae031ecc", "filename": "gcc/config/i386/avx512vbmiintrin.h", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Fconfig%2Fi386%2Favx512vbmiintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Fconfig%2Fi386%2Favx512vbmiintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vbmiintrin.h?ref=3dcc8af5cd0888813279eacb4fada71b2fbd359d", "patch": "@@ -0,0 +1,159 @@\n+/* Copyright (C) 2013-2014 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _IMMINTRIN_H_INCLUDED\n+#error \"Never use <avx512vbmiintrin.h> directly; include <immintrin.h> instead.\"\n+#endif\n+\n+#ifndef _AVX512VBMIINTRIN_H_INCLUDED\n+#define _AVX512VBMIINTRIN_H_INCLUDED\n+\n+#ifndef __AVX512VBMI__\n+#pragma GCC push_options\n+#pragma GCC target(\"avx512vbmi\")\n+#define __DISABLE_AVX512VBMI__\n+#endif /* __AVX512VBMI__ */\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_multishift_epi64_epi8 (__m512i __W, __mmask64 __M, __m512i __X, __m512i __Y)\n+{\n+  return (__m512i) __builtin_ia32_vpmultishiftqb512_mask ((__v64qi) __X,\n+\t\t\t\t\t\t\t  (__v64qi) __Y,\n+\t\t\t\t\t\t\t  (__v64qi) __W,\n+\t\t\t\t\t\t\t  (__mmask64) __M);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_multishift_epi64_epi8 (__mmask64 __M, __m512i __X, __m512i __Y)\n+{\n+  return (__m512i) __builtin_ia32_vpmultishiftqb512_mask ((__v64qi) __X,\n+\t\t\t\t\t\t\t  (__v64qi) __Y,\n+\t\t\t\t\t\t\t  (__v64qi)\n+\t\t\t\t\t\t\t  _mm512_setzero_si512 (),\n+\t\t\t\t\t\t\t  (__mmask64) __M);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_multishift_epi64_epi8 (__m512i __X, __m512i __Y)\n+{\n+  return (__m512i) __builtin_ia32_vpmultishiftqb512_mask ((__v64qi) __X,\n+\t\t\t\t\t\t\t  (__v64qi) __Y,\n+\t\t\t\t\t\t\t  (__v64qi)\n+\t\t\t\t\t\t\t  _mm512_undefined_si512 (),\n+\t\t\t\t\t\t\t  (__mmask64) -1);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_permutexvar_epi8 (__m512i __A, __m512i __B)\n+{\n+  return (__m512i) __builtin_ia32_permvarqi512_mask ((__v64qi) __B,\n+\t\t\t\t\t\t     (__v64qi) __A,\n+\t\t\t\t\t\t     (__v64qi)\n+\t\t\t\t\t\t     _mm512_undefined_si512 (),\n+\t\t\t\t\t\t     (__mmask64) -1);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_permutexvar_epi8 (__mmask64 __M, __m512i __A,\n+\t\t\t\t__m512i __B)\n+{\n+  return (__m512i) __builtin_ia32_permvarqi512_mask ((__v64qi) __B,\n+\t\t\t\t\t\t     (__v64qi) __A,\n+\t\t\t\t\t\t     (__v64qi)\n+\t\t\t\t\t\t     _mm512_setzero_si512(),\n+\t\t\t\t\t\t     (__mmask64) __M);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_permutexvar_epi8 (__m512i __W, __mmask64 __M, __m512i __A,\n+\t\t\t       __m512i __B)\n+{\n+  return (__m512i) __builtin_ia32_permvarqi512_mask ((__v64qi) __B,\n+\t\t\t\t\t\t     (__v64qi) __A,\n+\t\t\t\t\t\t     (__v64qi) __W,\n+\t\t\t\t\t\t     (__mmask64) __M);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_permutex2var_epi8 (__m512i __A, __m512i __I, __m512i __B)\n+{\n+  return (__m512i) __builtin_ia32_vpermt2varqi512_mask ((__v64qi) __I\n+\t\t\t\t\t\t\t/* idx */ ,\n+\t\t\t\t\t\t\t(__v64qi) __A,\n+\t\t\t\t\t\t\t(__v64qi) __B,\n+\t\t\t\t\t\t\t(__mmask64) -\n+\t\t\t\t\t\t\t1);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_permutex2var_epi8 (__m512i __A, __mmask64 __U,\n+\t\t\t\t__m512i __I, __m512i __B)\n+{\n+  return (__m512i) __builtin_ia32_vpermt2varqi512_mask ((__v64qi) __I\n+\t\t\t\t\t\t\t/* idx */ ,\n+\t\t\t\t\t\t\t(__v64qi) __A,\n+\t\t\t\t\t\t\t(__v64qi) __B,\n+\t\t\t\t\t\t\t(__mmask64)\n+\t\t\t\t\t\t\t__U);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask2_permutex2var_epi8 (__m512i __A, __m512i __I,\n+\t\t\t\t __mmask64 __U, __m512i __B)\n+{\n+  return (__m512i) __builtin_ia32_vpermi2varqi512_mask ((__v64qi) __A,\n+\t\t\t\t\t\t\t(__v64qi) __I\n+\t\t\t\t\t\t\t/* idx */ ,\n+\t\t\t\t\t\t\t(__v64qi) __B,\n+\t\t\t\t\t\t\t(__mmask64)\n+\t\t\t\t\t\t\t__U);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_permutex2var_epi8 (__mmask64 __U, __m512i __A,\n+\t\t\t\t __m512i __I, __m512i __B)\n+{\n+  return (__m512i) __builtin_ia32_vpermt2varqi512_maskz ((__v64qi) __I\n+\t\t\t\t\t\t\t /* idx */ ,\n+\t\t\t\t\t\t\t (__v64qi) __A,\n+\t\t\t\t\t\t\t (__v64qi) __B,\n+\t\t\t\t\t\t\t (__mmask64)\n+\t\t\t\t\t\t\t __U);\n+}\n+\n+#ifdef __DISABLE_AVX512VBMI__\n+#undef __DISABLE_AVX512VBMI__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_AVX512VBMI__ */\n+\n+#endif /* _AVX512VBMIINTRIN_H_INCLUDED */"}, {"sha": "b4ecdeb8d3349d801a81825e6d4abec837b0ee32", "filename": "gcc/config/i386/avx512vbmivlintrin.h", "status": "added", "additions": 275, "deletions": 0, "changes": 275, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Fconfig%2Fi386%2Favx512vbmivlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Fconfig%2Fi386%2Favx512vbmivlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vbmivlintrin.h?ref=3dcc8af5cd0888813279eacb4fada71b2fbd359d", "patch": "@@ -0,0 +1,275 @@\n+/* Copyright (C) 2013-2014 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _IMMINTRIN_H_INCLUDED\n+#error \"Never use <avx512vbmivlintrin.h> directly; include <immintrin.h> instead.\"\n+#endif\n+\n+#ifndef _AVX512VBMIVLINTRIN_H_INCLUDED\n+#define _AVX512VBMIVLINTRIN_H_INCLUDED\n+\n+#if !defined(__AVX512VL__) || !defined(__AVX512VBMI__)\n+#pragma GCC push_options\n+#pragma GCC target(\"avx512vbmi,avx512vl\")\n+#define __DISABLE_AVX512VBMIVL__\n+#endif /* __AVX512VBMIVL__ */\n+\n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_multishift_epi64_epi8 (__m256i __W, __mmask32 __M, __m256i __X, __m256i __Y)\n+{\n+  return (__m256i) __builtin_ia32_vpmultishiftqb256_mask ((__v32qi) __X,\n+\t\t\t\t\t\t\t  (__v32qi) __Y,\n+\t\t\t\t\t\t\t  (__v32qi) __W,\n+\t\t\t\t\t\t\t  (__mmask32) __M);\n+}\n+\n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_multishift_epi64_epi8 (__mmask32 __M, __m256i __X, __m256i __Y)\n+{\n+  return (__m256i) __builtin_ia32_vpmultishiftqb256_mask ((__v32qi) __X,\n+\t\t\t\t\t\t\t  (__v32qi) __Y,\n+\t\t\t\t\t\t\t  (__v32qi)\n+\t\t\t\t\t\t\t  _mm256_setzero_si256 (),\n+\t\t\t\t\t\t\t  (__mmask32) __M);\n+}\n+\n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_multishift_epi64_epi8 (__m256i __X, __m256i __Y)\n+{\n+  return (__m256i) __builtin_ia32_vpmultishiftqb256_mask ((__v32qi) __X,\n+\t\t\t\t\t\t\t  (__v32qi) __Y,\n+\t\t\t\t\t\t\t  (__v32qi)\n+\t\t\t\t\t\t\t  _mm256_undefined_si256 (),\n+\t\t\t\t\t\t\t  (__mmask32) -1);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_multishift_epi64_epi8 (__m128i __W, __mmask16 __M, __m128i __X, __m128i __Y)\n+{\n+  return (__m128i) __builtin_ia32_vpmultishiftqb128_mask ((__v16qi) __X,\n+\t\t\t\t\t\t\t  (__v16qi) __Y,\n+\t\t\t\t\t\t\t  (__v16qi) __W,\n+\t\t\t\t\t\t\t  (__mmask16) __M);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_multishift_epi64_epi8 (__mmask16 __M, __m128i __X, __m128i __Y)\n+{\n+  return (__m128i) __builtin_ia32_vpmultishiftqb128_mask ((__v16qi) __X,\n+\t\t\t\t\t\t\t  (__v16qi) __Y,\n+\t\t\t\t\t\t\t  (__v16qi)\n+\t\t\t\t\t\t\t  _mm_setzero_si128 (),\n+\t\t\t\t\t\t\t  (__mmask16) __M);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_multishift_epi64_epi8 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) __builtin_ia32_vpmultishiftqb128_mask ((__v16qi) __X,\n+\t\t\t\t\t\t\t  (__v16qi) __Y,\n+\t\t\t\t\t\t\t  (__v16qi)\n+\t\t\t\t\t\t\t  _mm_undefined_si128 (),\n+\t\t\t\t\t\t\t  (__mmask16) -1);\n+}\n+\n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_permutexvar_epi8 (__m256i __A, __m256i __B)\n+{\n+  return (__m256i) __builtin_ia32_permvarqi256_mask ((__v32qi) __B,\n+\t\t\t\t\t\t     (__v32qi) __A,\n+\t\t\t\t\t\t     (__v32qi)\n+\t\t\t\t\t\t     _mm256_undefined_si256 (),\n+\t\t\t\t\t\t     (__mmask32) -1);\n+}\n+\n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_permutexvar_epi8 (__mmask32 __M, __m256i __A,\n+\t\t\t\t__m256i __B)\n+{\n+  return (__m256i) __builtin_ia32_permvarqi256_mask ((__v32qi) __B,\n+\t\t\t\t\t\t     (__v32qi) __A,\n+\t\t\t\t\t\t     (__v32qi)\n+\t\t\t\t\t\t     _mm256_setzero_si256 (),\n+\t\t\t\t\t\t     (__mmask32) __M);\n+}\n+\n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_permutexvar_epi8 (__m256i __W, __mmask32 __M, __m256i __A,\n+\t\t\t       __m256i __B)\n+{\n+  return (__m256i) __builtin_ia32_permvarqi256_mask ((__v32qi) __B,\n+\t\t\t\t\t\t     (__v32qi) __A,\n+\t\t\t\t\t\t     (__v32qi) __W,\n+\t\t\t\t\t\t     (__mmask32) __M);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_permutexvar_epi8 (__m128i __A, __m128i __B)\n+{\n+  return (__m128i) __builtin_ia32_permvarqi128_mask ((__v16qi) __B,\n+\t\t\t\t\t\t     (__v16qi) __A,\n+\t\t\t\t\t\t     (__v16qi)\n+\t\t\t\t\t\t     _mm_undefined_si128 (),\n+\t\t\t\t\t\t     (__mmask16) -1);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_permutexvar_epi8 (__mmask16 __M, __m128i __A, __m128i __B)\n+{\n+  return (__m128i) __builtin_ia32_permvarqi128_mask ((__v16qi) __B,\n+\t\t\t\t\t\t     (__v16qi) __A,\n+\t\t\t\t\t\t     (__v16qi)\n+\t\t\t\t\t\t     _mm_setzero_si128 (),\n+\t\t\t\t\t\t     (__mmask16) __M);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_permutexvar_epi8 (__m128i __W, __mmask16 __M, __m128i __A,\n+\t\t\t    __m128i __B)\n+{\n+  return (__m128i) __builtin_ia32_permvarqi128_mask ((__v16qi) __B,\n+\t\t\t\t\t\t     (__v16qi) __A,\n+\t\t\t\t\t\t     (__v16qi) __W,\n+\t\t\t\t\t\t     (__mmask16) __M);\n+}\n+\n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_permutex2var_epi8 (__m256i __A, __m256i __I, __m256i __B)\n+{\n+  return (__m256i) __builtin_ia32_vpermt2varqi256_mask ((__v32qi) __I\n+\t\t\t\t\t\t\t/* idx */ ,\n+\t\t\t\t\t\t\t(__v32qi) __A,\n+\t\t\t\t\t\t\t(__v32qi) __B,\n+\t\t\t\t\t\t\t(__mmask32) -\n+\t\t\t\t\t\t\t1);\n+}\n+\n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_permutex2var_epi8 (__m256i __A, __mmask32 __U,\n+\t\t\t\t__m256i __I, __m256i __B)\n+{\n+  return (__m256i) __builtin_ia32_vpermt2varqi256_mask ((__v32qi) __I\n+\t\t\t\t\t\t\t/* idx */ ,\n+\t\t\t\t\t\t\t(__v32qi) __A,\n+\t\t\t\t\t\t\t(__v32qi) __B,\n+\t\t\t\t\t\t\t(__mmask32)\n+\t\t\t\t\t\t\t__U);\n+}\n+\n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask2_permutex2var_epi8 (__m256i __A, __m256i __I,\n+\t\t\t\t __mmask32 __U, __m256i __B)\n+{\n+  return (__m256i) __builtin_ia32_vpermi2varqi256_mask ((__v32qi) __A,\n+\t\t\t\t\t\t\t(__v32qi) __I\n+\t\t\t\t\t\t\t/* idx */ ,\n+\t\t\t\t\t\t\t(__v32qi) __B,\n+\t\t\t\t\t\t\t(__mmask32)\n+\t\t\t\t\t\t\t__U);\n+}\n+\n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_permutex2var_epi8 (__mmask32 __U, __m256i __A,\n+\t\t\t\t __m256i __I, __m256i __B)\n+{\n+  return (__m256i) __builtin_ia32_vpermt2varqi256_maskz ((__v32qi) __I\n+\t\t\t\t\t\t\t /* idx */ ,\n+\t\t\t\t\t\t\t (__v32qi) __A,\n+\t\t\t\t\t\t\t (__v32qi) __B,\n+\t\t\t\t\t\t\t (__mmask32)\n+\t\t\t\t\t\t\t __U);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_permutex2var_epi8 (__m128i __A, __m128i __I, __m128i __B)\n+{\n+  return (__m128i) __builtin_ia32_vpermt2varqi128_mask ((__v16qi) __I\n+\t\t\t\t\t\t\t/* idx */ ,\n+\t\t\t\t\t\t\t(__v16qi) __A,\n+\t\t\t\t\t\t\t(__v16qi) __B,\n+\t\t\t\t\t\t\t(__mmask16) -\n+\t\t\t\t\t\t\t1);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_permutex2var_epi8 (__m128i __A, __mmask16 __U, __m128i __I,\n+\t\t\t     __m128i __B)\n+{\n+  return (__m128i) __builtin_ia32_vpermt2varqi128_mask ((__v16qi) __I\n+\t\t\t\t\t\t\t/* idx */ ,\n+\t\t\t\t\t\t\t(__v16qi) __A,\n+\t\t\t\t\t\t\t(__v16qi) __B,\n+\t\t\t\t\t\t\t(__mmask16)\n+\t\t\t\t\t\t\t__U);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask2_permutex2var_epi8 (__m128i __A, __m128i __I, __mmask16 __U,\n+\t\t\t      __m128i __B)\n+{\n+  return (__m128i) __builtin_ia32_vpermi2varqi128_mask ((__v16qi) __A,\n+\t\t\t\t\t\t\t(__v16qi) __I\n+\t\t\t\t\t\t\t/* idx */ ,\n+\t\t\t\t\t\t\t(__v16qi) __B,\n+\t\t\t\t\t\t\t(__mmask16)\n+\t\t\t\t\t\t\t__U);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_permutex2var_epi8 (__mmask16 __U, __m128i __A, __m128i __I,\n+\t\t\t      __m128i __B)\n+{\n+  return (__m128i) __builtin_ia32_vpermt2varqi128_maskz ((__v16qi) __I\n+\t\t\t\t\t\t\t /* idx */ ,\n+\t\t\t\t\t\t\t (__v16qi) __A,\n+\t\t\t\t\t\t\t (__v16qi) __B,\n+\t\t\t\t\t\t\t (__mmask16)\n+\t\t\t\t\t\t\t __U);\n+}\n+\n+#ifdef __DISABLE_AVX512VBMIVL__\n+#undef __DISABLE_AVX512VBMIVL__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_AVX512VBMIVL__ */\n+\n+#endif /* _AVX512VBMIVLINTRIN_H_INCLUDED */"}, {"sha": "0efb1a4a75a3c7cf4d40d870b9e266635f32764f", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=3dcc8af5cd0888813279eacb4fada71b2fbd359d", "patch": "@@ -87,6 +87,7 @@\n \n /* %ecx */\n #define bit_PREFETCHWT1\t  (1 << 0)\n+#define bit_AVX512VBMI\t(1 << 1)\n \n /* Extended State Enumeration Sub-leaf (%eax == 13, %ecx == 1) */\n #define bit_XSAVEOPT\t(1 << 0)"}, {"sha": "72dfd04593c8c1bff9b575679db1bb0d6b1365cb", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=3dcc8af5cd0888813279eacb4fada71b2fbd359d", "patch": "@@ -412,7 +412,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   unsigned int has_avx512f = 0, has_sha = 0, has_prefetchwt1 = 0;\n   unsigned int has_clflushopt = 0, has_xsavec = 0, has_xsaves = 0;\n   unsigned int has_avx512dq = 0, has_avx512bw = 0, has_avx512vl = 0;\n-  unsigned int has_avx512ifma = 0;\n+  unsigned int has_avx512vbmi = 0, has_avx512ifma = 0;\n \n   bool arch;\n \n@@ -497,6 +497,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       has_avx512vl = ebx & bit_AVX512IFMA;\n \n       has_prefetchwt1 = ecx & bit_PREFETCHWT1;\n+      has_avx512vl = ecx & bit_AVX512VBMI;\n     }\n \n   if (max_level >= 13)\n@@ -928,6 +929,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       const char *avx512bw = has_avx512bw ? \" -mavx512bw\" : \" -mno-avx512bw\";\n       const char *avx512vl = has_avx512vl ? \" -mavx512vl\" : \" -mno-avx512vl\";\n       const char *avx512ifma = has_avx512ifma ? \" -mavx512ifma\" : \" -mno-avx512ifma\";\n+      const char *avx512vbmi = has_avx512vbmi ? \" -mavx512vbmi\" : \" -mno-avx512vbmi\";\n \n       options = concat (options, mmx, mmx3dnow, sse, sse2, sse3, ssse3,\n \t\t\tsse4a, cx16, sahf, movbe, aes, sha, pclmul,\n@@ -937,7 +939,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \t\t\tfxsr, xsave, xsaveopt, avx512f, avx512er,\n \t\t\tavx512cd, avx512pf, prefetchwt1, clflushopt,\n \t\t\txsavec, xsaves, avx512dq, avx512bw, avx512vl,\n-\t\t\tavx512ifma, NULL);\n+\t\t\tavx512ifma, avx512vbmi, NULL);\n     }\n \n done:"}, {"sha": "798eaa6ba30103a5687f30eedabe7b43d8cf141c", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=3dcc8af5cd0888813279eacb4fada71b2fbd359d", "patch": "@@ -351,6 +351,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__AVX512BW__\");\n   if (isa_flag & OPTION_MASK_ISA_AVX512VL)\n     def_or_undef (parse_in, \"__AVX512VL__\");\n+  if (isa_flag & OPTION_MASK_ISA_AVX512VBMI)\n+    def_or_undef (parse_in, \"__AVX512VBMI__\");\n   if (isa_flag & OPTION_MASK_ISA_AVX512IFMA)\n     def_or_undef (parse_in, \"__AVX512IFMA__\");\n   if (isa_flag & OPTION_MASK_ISA_FMA)"}, {"sha": "95af5fcb952ef0e892bac64a609f97812c867842", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3dcc8af5cd0888813279eacb4fada71b2fbd359d", "patch": "@@ -2619,6 +2619,7 @@ ix86_target_string (HOST_WIDE_INT isa, int flags, const char *arch,\n     { \"-mavx512bw\",\tOPTION_MASK_ISA_AVX512BW },\n     { \"-mavx512vl\",\tOPTION_MASK_ISA_AVX512VL },\n     { \"-mavx512ifma\",\tOPTION_MASK_ISA_AVX512IFMA },\n+    { \"-mavx512vbmi\",\tOPTION_MASK_ISA_AVX512VBMI },\n     { \"-msse4a\",\tOPTION_MASK_ISA_SSE4A },\n     { \"-msse4.2\",\tOPTION_MASK_ISA_SSE4_2 },\n     { \"-msse4.1\",\tOPTION_MASK_ISA_SSE4_1 },\n@@ -3155,6 +3156,7 @@ ix86_option_override_internal (bool main_args_p,\n #define PTA_AVX512BW\t\t(HOST_WIDE_INT_1 << 51)\n #define PTA_AVX512VL\t\t(HOST_WIDE_INT_1 << 52)\n #define PTA_AVX512IFMA\t\t(HOST_WIDE_INT_1 << 53)\n+#define PTA_AVX512VBMI\t\t(HOST_WIDE_INT_1 << 54)\n \n #define PTA_CORE2 \\\n   (PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3 | PTA_SSSE3 \\\n@@ -3735,6 +3737,9 @@ ix86_option_override_internal (bool main_args_p,\n         if (processor_alias_table[i].flags & PTA_MPX\n             && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_MPX))\n           opts->x_ix86_isa_flags |= OPTION_MASK_ISA_MPX;\n+\tif (processor_alias_table[i].flags & PTA_AVX512VBMI\n+\t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_AVX512VBMI))\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX512VBMI;\n \tif (processor_alias_table[i].flags & PTA_AVX512IFMA\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_AVX512IFMA))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX512IFMA;\n@@ -4660,6 +4665,7 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"clflushopt\",\tOPT_mclflushopt),\n     IX86_ATTR_ISA (\"xsavec\",\tOPT_mxsavec),\n     IX86_ATTR_ISA (\"xsaves\",\tOPT_mxsaves),\n+    IX86_ATTR_ISA (\"avx512vbmi\",\tOPT_mavx512vbmi),\n     IX86_ATTR_ISA (\"avx512ifma\",\tOPT_mavx512ifma),\n \n     /* enum options */\n@@ -30096,6 +30102,23 @@ enum ix86_builtins\n   IX86_BUILTIN_VPMADD52LUQ128_MASKZ,\n   IX86_BUILTIN_VPMADD52HUQ128_MASKZ,\n \n+  /* AVX-512VBMI */\n+  IX86_BUILTIN_VPMULTISHIFTQB512,\n+  IX86_BUILTIN_VPMULTISHIFTQB256,\n+  IX86_BUILTIN_VPMULTISHIFTQB128,\n+  IX86_BUILTIN_VPERMVARQI512_MASK,\n+  IX86_BUILTIN_VPERMT2VARQI512,\n+  IX86_BUILTIN_VPERMT2VARQI512_MASKZ,\n+  IX86_BUILTIN_VPERMI2VARQI512,\n+  IX86_BUILTIN_VPERMVARQI256_MASK,\n+  IX86_BUILTIN_VPERMVARQI128_MASK,\n+  IX86_BUILTIN_VPERMT2VARQI256,\n+  IX86_BUILTIN_VPERMT2VARQI256_MASKZ,\n+  IX86_BUILTIN_VPERMT2VARQI128,\n+  IX86_BUILTIN_VPERMT2VARQI128_MASKZ,\n+  IX86_BUILTIN_VPERMI2VARQI256,\n+  IX86_BUILTIN_VPERMI2VARQI128,\n+\n   /* SHA builtins.  */\n   IX86_BUILTIN_SHA1MSG1,\n   IX86_BUILTIN_SHA1MSG2,\n@@ -32781,6 +32804,22 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_AVX512IFMA | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpamdd52huqv2di_mask, \"__builtin_ia32_vpmadd52huq128_mask\", IX86_BUILTIN_VPMADD52HUQ128, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_V2DI_QI },\n   { OPTION_MASK_ISA_AVX512IFMA | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpamdd52huqv2di_maskz, \"__builtin_ia32_vpmadd52huq128_maskz\", IX86_BUILTIN_VPMADD52HUQ128_MASKZ, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_V2DI_QI },\n \n+  /* AVX512VBMI */\n+  { OPTION_MASK_ISA_AVX512VBMI, CODE_FOR_vpmultishiftqbv64qi_mask, \"__builtin_ia32_vpmultishiftqb512_mask\", IX86_BUILTIN_VPMULTISHIFTQB512, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI_V64QI_DI },\n+  { OPTION_MASK_ISA_AVX512VBMI | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpmultishiftqbv32qi_mask, \"__builtin_ia32_vpmultishiftqb256_mask\", IX86_BUILTIN_VPMULTISHIFTQB256, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI_V32QI_SI },\n+  { OPTION_MASK_ISA_AVX512VBMI | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpmultishiftqbv16qi_mask, \"__builtin_ia32_vpmultishiftqb128_mask\", IX86_BUILTIN_VPMULTISHIFTQB128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_V16QI_HI },\n+  { OPTION_MASK_ISA_AVX512VBMI, CODE_FOR_avx512bw_permvarv64qi_mask, \"__builtin_ia32_permvarqi512_mask\", IX86_BUILTIN_VPERMVARQI512_MASK, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI_V64QI_DI },\n+  { OPTION_MASK_ISA_AVX512VBMI, CODE_FOR_avx512bw_vpermt2varv64qi3_mask, \"__builtin_ia32_vpermt2varqi512_mask\", IX86_BUILTIN_VPERMT2VARQI512, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI_V64QI_DI },\n+  { OPTION_MASK_ISA_AVX512VBMI, CODE_FOR_avx512bw_vpermt2varv64qi3_maskz, \"__builtin_ia32_vpermt2varqi512_maskz\", IX86_BUILTIN_VPERMT2VARQI512_MASKZ, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI_V64QI_DI },\n+  { OPTION_MASK_ISA_AVX512VBMI, CODE_FOR_avx512bw_vpermi2varv64qi3_mask, \"__builtin_ia32_vpermi2varqi512_mask\", IX86_BUILTIN_VPERMI2VARQI512, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI_V64QI_DI },\n+  { OPTION_MASK_ISA_AVX512VBMI | OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_permvarv32qi_mask, \"__builtin_ia32_permvarqi256_mask\", IX86_BUILTIN_VPERMVARQI256_MASK, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI_V32QI_SI },\n+  { OPTION_MASK_ISA_AVX512VBMI | OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_permvarv16qi_mask, \"__builtin_ia32_permvarqi128_mask\", IX86_BUILTIN_VPERMVARQI128_MASK, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_V16QI_HI },\n+  { OPTION_MASK_ISA_AVX512VBMI | OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_vpermt2varv32qi3_mask, \"__builtin_ia32_vpermt2varqi256_mask\", IX86_BUILTIN_VPERMT2VARQI256, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI_V32QI_SI },\n+  { OPTION_MASK_ISA_AVX512VBMI | OPTION_MASK_ISA_AVX512VBMI | OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_vpermt2varv32qi3_maskz, \"__builtin_ia32_vpermt2varqi256_maskz\", IX86_BUILTIN_VPERMT2VARQI256_MASKZ, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI_V32QI_SI },\n+  { OPTION_MASK_ISA_AVX512VBMI | OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_vpermt2varv16qi3_mask, \"__builtin_ia32_vpermt2varqi128_mask\", IX86_BUILTIN_VPERMT2VARQI128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_V16QI_HI },\n+  { OPTION_MASK_ISA_AVX512VBMI | OPTION_MASK_ISA_AVX512VBMI | OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_vpermt2varv16qi3_maskz, \"__builtin_ia32_vpermt2varqi128_maskz\", IX86_BUILTIN_VPERMT2VARQI128_MASKZ, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_V16QI_HI },\n+  { OPTION_MASK_ISA_AVX512VBMI | OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_vpermi2varv32qi3_mask, \"__builtin_ia32_vpermi2varqi256_mask\", IX86_BUILTIN_VPERMI2VARQI256, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI_V32QI_SI },\n+  { OPTION_MASK_ISA_AVX512VBMI | OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_vpermi2varv16qi3_mask, \"__builtin_ia32_vpermi2varqi128_mask\", IX86_BUILTIN_VPERMI2VARQI128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_V16QI_HI },\n };\n \n /* Builtins with rounding support.  */\n@@ -41553,7 +41592,8 @@ ix86_hard_regno_mode_ok (int regno, machine_mode mode)\n     return VALID_FP_MODE_P (mode);\n   if (MASK_REGNO_P (regno))\n     return (VALID_MASK_REG_MODE (mode)\n-\t    || (TARGET_AVX512BW && VALID_MASK_AVX512BW_MODE (mode)));\n+\t    || ((TARGET_AVX512BW || TARGET_AVX512VBMI)\n+\t\t&& VALID_MASK_AVX512BW_MODE (mode)));\n   if (BND_REGNO_P (regno))\n     return VALID_BND_REG_MODE (mode);\n   if (SSE_REGNO_P (regno))"}, {"sha": "2596f8129539c6ea0674460afc9409d383e39b4b", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=3dcc8af5cd0888813279eacb4fada71b2fbd359d", "patch": "@@ -77,6 +77,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_AVX512BW_P(x)\tTARGET_ISA_AVX512BW_P(x)\n #define TARGET_AVX512VL\tTARGET_ISA_AVX512VL\n #define TARGET_AVX512VL_P(x)\tTARGET_ISA_AVX512VL_P(x)\n+#define TARGET_AVX512VBMI\tTARGET_ISA_AVX512VBMI\n+#define TARGET_AVX512VBMI_P(x)\tTARGET_ISA_AVX512VBMI_P(x)\n #define TARGET_AVX512IFMA\tTARGET_ISA_AVX512IFMA\n #define TARGET_AVX512IFMA_P(x)\tTARGET_ISA_AVX512IFMA_P(x)\n #define TARGET_FMA\tTARGET_ISA_FMA"}, {"sha": "f6ba8a7835bac736eb89624f62af7e0de2eaba27", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=3dcc8af5cd0888813279eacb4fada71b2fbd359d", "patch": "@@ -657,6 +657,10 @@ mavx512ifma\n Target Report Mask(ISA_AVX512IFMA) Var(ix86_isa_flags) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and AVX512F and AVX512IFMA built-in functions and code generation\n \n+mavx512vbmi\n+Target Report Mask(ISA_AVX512VBMI) Var(ix86_isa_flags) Save\n+Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and AVX512F and AVX512VBMI built-in functions and code generation\n+\n mfma\n Target Report Mask(ISA_FMA) Var(ix86_isa_flags) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX and FMA built-in functions and code generation"}, {"sha": "931ff15a7c4db9ad1638115cd9a49b9a80ecaa58", "filename": "gcc/config/i386/immintrin.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fimmintrin.h?ref=3dcc8af5cd0888813279eacb4fada71b2fbd359d", "patch": "@@ -64,6 +64,10 @@\n \n #include <avx512ifmavlintrin.h>\n \n+#include <avx512vbmiintrin.h>\n+\n+#include <avx512vbmivlintrin.h>\n+\n #include <shaintrin.h>\n \n #include <lzcntintrin.h>"}, {"sha": "ca5d720d1be5df0dc3cb14199c68376dc8399022", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=3dcc8af5cd0888813279eacb4fada71b2fbd359d", "patch": "@@ -145,6 +145,9 @@\n   ;; For AVX512IFMA support\n   UNSPEC_VPMADD52LUQ\n   UNSPEC_VPMADD52HUQ\n+\n+  ;; For AVX512VBMI support\n+  UNSPEC_VPMULTISHIFT\n ])\n \n (define_c_enum \"unspecv\" [\n@@ -179,6 +182,9 @@\n   [V64QI (V16QI \"TARGET_AVX512VL\") (V32QI \"TARGET_AVX512VL\")\n    V32HI (V16HI \"TARGET_AVX512VL\") (V8HI \"TARGET_AVX512VL\")])\n \n+(define_mode_iterator VI1_AVX512VL\n+  [V64QI (V16QI \"TARGET_AVX512VL\") (V32QI \"TARGET_AVX512VL\")])\n+\n ;; All vector modes\n (define_mode_iterator V\n   [(V32QI \"TARGET_AVX\") V16QI\n@@ -16468,6 +16474,18 @@\n    (set_attr \"prefix\" \"<mask_prefix2>\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"<avx512>_permvar<mode><mask_name>\"\n+  [(set (match_operand:VI1_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(unspec:VI1_AVX512VL\n+\t  [(match_operand:VI1_AVX512VL 1 \"nonimmediate_operand\" \"vm\")\n+\t   (match_operand:<sseintvecmode> 2 \"register_operand\" \"v\")]\n+\t  UNSPEC_VPERMVAR))]\n+  \"TARGET_AVX512VBMI && <mask_mode512bit_condition>\"\n+  \"vperm<ssemodesuffix>\\t{%1, %2, %0<mask_operand3>|%0<mask_operand3>, %2, %1}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix\" \"<mask_prefix2>\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_insn \"<avx512>_permvar<mode><mask_name>\"\n   [(set (match_operand:VI2_AVX512VL 0 \"register_operand\" \"=v\")\n \t(unspec:VI2_AVX512VL\n@@ -17010,6 +17028,20 @@\n   DONE;\n })\n \n+(define_expand \"<avx512>_vpermi2var<mode>3_maskz\"\n+  [(match_operand:VI1_AVX512VL 0 \"register_operand\")\n+   (match_operand:VI1_AVX512VL 1 \"register_operand\")\n+   (match_operand:<sseintvecmode> 2 \"register_operand\")\n+   (match_operand:VI1_AVX512VL 3 \"nonimmediate_operand\")\n+   (match_operand:<avx512fmaskmode> 4 \"register_operand\")]\n+  \"TARGET_AVX512VBMI\"\n+{\n+  emit_insn (gen_<avx512>_vpermi2var<mode>3_maskz_1 (\n+\toperands[0], operands[1], operands[2], operands[3],\n+\tCONST0_RTX (<MODE>mode), operands[4]));\n+  DONE;\n+})\n+\n (define_expand \"<avx512>_vpermi2var<mode>3_maskz\"\n   [(match_operand:VI2_AVX512VL 0 \"register_operand\" \"=v\")\n    (match_operand:VI2_AVX512VL 1 \"register_operand\" \"v\")\n@@ -17037,6 +17069,19 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"<avx512>_vpermi2var<mode>3<sd_maskz_name>\"\n+  [(set (match_operand:VI1_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(unspec:VI1_AVX512VL\n+\t  [(match_operand:VI1_AVX512VL 1 \"register_operand\" \"v\")\n+\t   (match_operand:<sseintvecmode> 2 \"register_operand\" \"0\")\n+\t   (match_operand:VI1_AVX512VL 3 \"nonimmediate_operand\" \"vm\")]\n+\t  UNSPEC_VPERMI2))]\n+  \"TARGET_AVX512VBMI\"\n+  \"vpermi2<ssemodesuffix>\\t{%3, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %3}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_insn \"<avx512>_vpermi2var<mode>3<sd_maskz_name>\"\n   [(set (match_operand:VI2_AVX512VL 0 \"register_operand\" \"=v\")\n \t(unspec:VI2_AVX512VL\n@@ -17066,6 +17111,22 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"<avx512>_vpermi2var<mode>3_mask\"\n+  [(set (match_operand:VI1_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VI1_AVX512VL\n+\t  (unspec:VI1_AVX512VL\n+\t    [(match_operand:VI1_AVX512VL 1 \"register_operand\" \"v\")\n+\t    (match_operand:<sseintvecmode> 2 \"register_operand\" \"0\")\n+\t    (match_operand:VI1_AVX512VL 3 \"nonimmediate_operand\" \"vm\")]\n+\t    UNSPEC_VPERMI2_MASK)\n+\t  (match_dup 0)\n+\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")))]\n+  \"TARGET_AVX512VBMI\"\n+  \"vpermi2<ssemodesuffix>\\t{%3, %1, %0%{%4%}|%0%{%4%}, %1, %3}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_insn \"<avx512>_vpermi2var<mode>3_mask\"\n   [(set (match_operand:VI2_AVX512VL 0 \"register_operand\" \"=v\")\n \t(vec_merge:VI2_AVX512VL\n@@ -17096,6 +17157,20 @@\n   DONE;\n })\n \n+(define_expand \"<avx512>_vpermt2var<mode>3_maskz\"\n+  [(match_operand:VI1_AVX512VL 0 \"register_operand\" \"=v\")\n+   (match_operand:<sseintvecmode> 1 \"register_operand\" \"v\")\n+   (match_operand:VI1_AVX512VL 2 \"register_operand\" \"0\")\n+   (match_operand:VI1_AVX512VL 3 \"nonimmediate_operand\" \"vm\")\n+   (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")]\n+  \"TARGET_AVX512VBMI\"\n+{\n+  emit_insn (gen_<avx512>_vpermt2var<mode>3_maskz_1 (\n+\toperands[0], operands[1], operands[2], operands[3],\n+\tCONST0_RTX (<MODE>mode), operands[4]));\n+  DONE;\n+})\n+\n (define_expand \"<avx512>_vpermt2var<mode>3_maskz\"\n   [(match_operand:VI2_AVX512VL 0 \"register_operand\" \"=v\")\n    (match_operand:<sseintvecmode> 1 \"register_operand\" \"v\")\n@@ -17123,6 +17198,19 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"<avx512>_vpermt2var<mode>3<sd_maskz_name>\"\n+  [(set (match_operand:VI1_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(unspec:VI1_AVX512VL\n+\t  [(match_operand:<sseintvecmode> 1 \"register_operand\" \"v\")\n+\t   (match_operand:VI1_AVX512VL 2 \"register_operand\" \"0\")\n+\t   (match_operand:VI1_AVX512VL 3 \"nonimmediate_operand\" \"vm\")]\n+\t  UNSPEC_VPERMT2))]\n+  \"TARGET_AVX512VBMI\"\n+  \"vpermt2<ssemodesuffix>\\t{%3, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %3}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_insn \"<avx512>_vpermt2var<mode>3<sd_maskz_name>\"\n   [(set (match_operand:VI2_AVX512VL 0 \"register_operand\" \"=v\")\n \t(unspec:VI2_AVX512VL\n@@ -17152,6 +17240,22 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"<avx512>_vpermt2var<mode>3_mask\"\n+  [(set (match_operand:VI1_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VI1_AVX512VL\n+\t  (unspec:VI1_AVX512VL\n+\t    [(match_operand:<sseintvecmode> 1 \"register_operand\" \"v\")\n+\t    (match_operand:VI1_AVX512VL 2 \"register_operand\" \"0\")\n+\t    (match_operand:VI1_AVX512VL 3 \"nonimmediate_operand\" \"vm\")]\n+\t    UNSPEC_VPERMT2)\n+\t  (match_dup 2)\n+\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")))]\n+  \"TARGET_AVX512VBMI\"\n+  \"vpermt2<ssemodesuffix>\\t{%3, %1, %0%{%4%}|%0%{%4%}, %1, %3}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_insn \"<avx512>_vpermt2var<mode>3_mask\"\n   [(set (match_operand:VI2_AVX512VL 0 \"register_operand\" \"=v\")\n \t(vec_merge:VI2_AVX512VL\n@@ -18519,3 +18623,14 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"vpmultishiftqb<mode><mask_name>\"\n+  [(set (match_operand:VI1_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(unspec:VI1_AVX512VL\n+\t  [(match_operand:VI1_AVX512VL 1 \"register_operand\" \"v\")\n+\t   (match_operand:VI1_AVX512VL 2 \"nonimmediate_operand\" \"vm\")]\n+\t  UNSPEC_VPMULTISHIFT))]\n+  \"TARGET_AVX512VBMI\"\n+  \"vpmultishiftqb\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])"}, {"sha": "912206e3a3bed60828bb8e1d83d3d9ff628b7bc8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3dcc8af5cd0888813279eacb4fada71b2fbd359d", "patch": "@@ -1,3 +1,30 @@\n+2014-11-21  Ilya Tocar  <ilya.tocar@intel.com>\n+\n+\t* g++.dg/other/i386-2.C: Add -mavx512vbmi.\n+\t* g++.dg/other/i386-3.C: Ditto.\n+\t* gcc.target/i386/avx512f-helper.h: Add avx512vbmi-check.h.\n+\t* gcc.target/i386/avx512vbmi-check.h: Ditto.\n+\t* gcc.target/i386/avx512vbmi-vpermb-1.c: Ditto.\n+\t* gcc.target/i386/avx512vbmi-vpermb-2.c: Ditto.\n+\t* gcc.target/i386/avx512vbmi-vpermi2b-1.c: Ditto.\n+\t* gcc.target/i386/avx512vbmi-vpermi2b-2.c: Ditto.\n+\t* gcc.target/i386/avx512vbmi-vpermt2b-1.c: Ditto.\n+\t* gcc.target/i386/avx512vbmi-vpermt2b-2.c: Ditto.\n+\t* gcc.target/i386/avx512vbmi-vpmultishiftqb-1.c: Ditto.\n+\t* gcc.target/i386/avx512vbmi-vpmultishiftqb-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermb-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermi2b-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermt2b-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmaddhuq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmaddluq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmultishiftqb-2.c: Ditto.\n+\t* gcc.target/i386/i386.exp (check_effective_target_avx512vbmi): New.\n+\t* gcc.target/i386/sse-12.c: Add new options.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Ditto.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\n 2014-11-21  Ilya Tocar  <ilya.tocar@intel.com>\n \n \t* g++.dg/other/i386-2.C: Add -mavx512ifma."}, {"sha": "0368d351506f441e29fda9834dde2a50c47fdb0d", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=3dcc8af5cd0888813279eacb4fada71b2fbd359d", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "3a3d5fffe592771a67a59b89cc21d3b463901f6e", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=3dcc8af5cd0888813279eacb4fada71b2fbd359d", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "e270cd20bc5f104de4888a16bba2ebcaa81e6fa5", "filename": "gcc/testsuite/gcc.target/i386/avx512f-helper.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-helper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-helper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-helper.h?ref=3dcc8af5cd0888813279eacb4fada71b2fbd359d", "patch": "@@ -22,6 +22,8 @@\n #include \"avx512vl-check.h\"\n #elif defined (AVX512IFMA)\n #include \"avx512ifma-check.h\"\n+#elif defined (AVX512VBMI)\n+#include \"avx512vbmi-check.h\"\n #endif\n \n /* Macros expansion.  */\n@@ -130,6 +132,9 @@ avx512vl_test (void) { test_256 (); test_128 (); }\n #elif defined (AVX512IFMA)\n void\n avx512ifma_test (void) { test_512 (); }\n+#elif defined (AVX512VBMI)\n+void\n+avx512vbmi_test (void) { test_512 (); }\n #endif\n \n #endif /* AVX512F_HELPER_INCLUDED */"}, {"sha": "591ff0640e1f82882320116441991b6167acbd5c", "filename": "gcc/testsuite/gcc.target/i386/avx512vbmi-check.h", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vbmi-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vbmi-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vbmi-check.h?ref=3dcc8af5cd0888813279eacb4fada71b2fbd359d", "patch": "@@ -0,0 +1,46 @@\n+#include <stdlib.h>\n+#include \"cpuid.h\"\n+#include \"m512-check.h\"\n+#include \"avx512f-os-support.h\"\n+\n+static void avx512vbmi_test (void);\n+\n+static void __attribute__ ((noinline)) do_test (void)\n+{\n+  avx512vbmi_test ();\n+}\n+\n+int\n+main ()\n+{\n+  unsigned int eax, ebx, ecx, edx;\n+\n+  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n+    return 0;\n+\n+  if ((ecx & bit_OSXSAVE) == (bit_OSXSAVE))\n+    {\n+      if (__get_cpuid_max (0, NULL) < 7)\n+\treturn 0;\n+\n+      __cpuid_count (7, 0, eax, ebx, ecx, edx);\n+\n+      if ((avx512f_os_support ()) && ((ebx & bit_AVX512VBMI) == bit_AVX512VBMI))\n+\t{\n+\t  do_test ();\n+#ifdef DEBUG\n+\t  printf (\"PASSED\\n\");\n+#endif\n+\t  return 0;\n+\t}\n+#ifdef DEBUG\n+      printf (\"SKIPPED\\n\");\n+#endif\n+    }\n+#ifdef DEBUG\n+  else\n+    printf (\"SKIPPED\\n\");\n+#endif\n+\n+  return 0;\n+}"}, {"sha": "59e568c60f4a7aec85948f1e76c3a65612f820c1", "filename": "gcc/testsuite/gcc.target/i386/avx512vbmi-vpermb-1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vbmi-vpermb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vbmi-vpermb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vbmi-vpermb-1.c?ref=3dcc8af5cd0888813279eacb4fada71b2fbd359d", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vbmi -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpermb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpermb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpermb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpermb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpermb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpermb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpermb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpermb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpermb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x1;\n+volatile __m256i x2;\n+volatile __m128i x3;\n+volatile __mmask64 m1;\n+volatile __mmask32 m2;\n+volatile __mmask16 m3;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x1 = _mm512_permutexvar_epi8 (x1, x1);\n+  x1 = _mm512_maskz_permutexvar_epi8 (m1, x1, x1);\n+  x1 = _mm512_mask_permutexvar_epi8 (x1, m1, x1, x1);\n+  x2 = _mm256_permutexvar_epi8 (x2, x2);\n+  x2 = _mm256_maskz_permutexvar_epi8 (m2, x2, x2);\n+  x2 = _mm256_mask_permutexvar_epi8 (x2, m2, x2, x2);\n+  x3 = _mm_permutexvar_epi8 (x3, x3);\n+  x3 = _mm_maskz_permutexvar_epi8 (m3, x3, x3);\n+  x3 = _mm_mask_permutexvar_epi8 (x3, m3, x3, x3);\n+}"}, {"sha": "fa22fd9e46ed7531ad440c71785673c2a2813d70", "filename": "gcc/testsuite/gcc.target/i386/avx512vbmi-vpermb-2.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vbmi-vpermb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vbmi-vpermb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vbmi-vpermb-2.c?ref=3dcc8af5cd0888813279eacb4fada71b2fbd359d", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vbmi -DAVX512VBMI\" } */\n+/* { dg-require-effective-target avx512vbmi } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (char *ind, char *src, char *res)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res[i] = src[ind[i] & (SIZE - 1)];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_b) s1, s2, res1, res2, res3;\n+  char res_ref[SIZE];\n+  MASK_TYPE mask = MASK_VALUE;\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = i * i * i;\n+      s2.a[i] = i + 20;\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_permutexvar_epi8) (s1.x, s2.x);\n+  res2.x = INTRINSIC (_mask_permutexvar_epi8) (res2.x, mask, s1.x, s2.x);\n+  res3.x = INTRINSIC (_maskz_permutexvar_epi8) (mask, s1.x, s2.x);\n+  CALC (s1.a, s2.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_b)(res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_b)(res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "f760c76ef84ec3baf7031906314068cdfed90036", "filename": "gcc/testsuite/gcc.target/i386/avx512vbmi-vpermi2b-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vbmi-vpermi2b-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vbmi-vpermi2b-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vbmi-vpermi2b-1.c?ref=3dcc8af5cd0888813279eacb4fada71b2fbd359d", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vbmi -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpermi2b\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpermi2b\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpermi2b\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x3;\n+volatile __m256i x2;\n+volatile __m128i x1;\n+volatile __m512i z;\n+volatile __m256i y;\n+volatile __m128i x;\n+volatile __mmask32 m3;\n+volatile __mmask16 m2;\n+volatile __mmask8 m1;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x3 = _mm512_mask2_permutex2var_epi8 (x3, z, m3, x3);\n+  x2 = _mm256_mask2_permutex2var_epi8 (x2, y, m2, x2);\n+  x1 = _mm_mask2_permutex2var_epi8 (x1, x, m1, x1);\n+}"}, {"sha": "694b23bcc322a2e64a47df14a71c61b343f4bf0d", "filename": "gcc/testsuite/gcc.target/i386/avx512vbmi-vpermi2b-2.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vbmi-vpermi2b-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vbmi-vpermi2b-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vbmi-vpermi2b-2.c?ref=3dcc8af5cd0888813279eacb4fada71b2fbd359d", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vbmi -DAVX512VBMI\" } */\n+/* { dg-require-effective-target avx512vbmi } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+#include \"math.h\"\n+#include \"values.h\"\n+#include \"avx512f-mask-type.h\"\n+\n+#define NUM 32\n+\n+void\n+CALC (char *dst, char *src1, char *ind, char *src2)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      unsigned long long offset = ind[i] & (SIZE - 1);\n+      unsigned long long cond = ind[i] & SIZE;\n+\n+      dst[i] = cond ? src2[offset] : src1[offset];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, j;\n+  UNION_TYPE (AVX512F_LEN, i_b) s1, s2, res, ind;\n+  char res_ref[SIZE];\n+\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      for (j = 0; j < SIZE; j++)\n+\t{\n+\t  ind.a[j] = DEFAULT_VALUE;\n+\t  s1.a[j] = i * 2 * j + 1;\n+\t  s2.a[j] = i * 2 * j;\n+\n+\t  res.a[j] = DEFAULT_VALUE;\n+\t}\n+\n+      CALC (res_ref, s1.a, ind.a, s2.a);\n+\n+      res.x =\n+\tINTRINSIC (_mask2_permutex2var_epi8) (s1.x, ind.x, mask,\n+\t\t\t\t\t       s2.x);\n+\n+      MASK_MERGE (i_b) (res_ref, mask, SIZE);\n+      if (UNION_CHECK (AVX512F_LEN, i_b) (res, res_ref))\n+\tabort ();\n+    }\n+}"}, {"sha": "2e67a546414d3e0d673c8ee048d48ef57d3bcd95", "filename": "gcc/testsuite/gcc.target/i386/avx512vbmi-vpermt2b-1.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vbmi-vpermt2b-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vbmi-vpermt2b-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vbmi-vpermt2b-1.c?ref=3dcc8af5cd0888813279eacb4fada71b2fbd359d", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vbmi -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpermt2b\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpermt2b\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" 3 } } *\n+/* { dg-final { scan-assembler-times \"vpermt2b\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpermt2b\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpermt2b\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpermt2b\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpermt2b\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpermt2b\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpermt2b\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x3;\n+volatile __m256i x2;\n+volatile __m128i x1;\n+volatile __m512i z;\n+volatile __m256i y;\n+volatile __m128i x;\n+volatile __mmask32 m3;\n+volatile __mmask16 m2;\n+volatile __mmask8 m1;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x3 = _mm512_permutex2var_epi8 (x3, z, x3);\n+  x3 = _mm512_mask_permutex2var_epi8 (x3, m3, z, x3);\n+  x3 = _mm512_maskz_permutex2var_epi8 (m3, x3, z, x3);\n+  x2 = _mm256_permutex2var_epi8 (x2, y, x2);\n+  x2 = _mm256_mask_permutex2var_epi8 (x2, m2, y, x2);\n+  x2 = _mm256_maskz_permutex2var_epi8 (m2, x2, y, x2);\n+  x1 = _mm_permutex2var_epi8 (x1, x, x1);\n+  x1 = _mm_mask_permutex2var_epi8 (x1, m1, x, x1);\n+  x1 = _mm_maskz_permutex2var_epi8 (m1, x1, x, x1);\n+}"}, {"sha": "c9f46596a1c061d1397de439c1f58bd44dbbcbbb", "filename": "gcc/testsuite/gcc.target/i386/avx512vbmi-vpermt2b-2.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vbmi-vpermt2b-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vbmi-vpermt2b-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vbmi-vpermt2b-2.c?ref=3dcc8af5cd0888813279eacb4fada71b2fbd359d", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vbmi -DAVX512VBMI\" } */\n+/* { dg-require-effective-target avx512vbmi } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+#include \"math.h\"\n+#include \"values.h\"\n+#include \"avx512f-mask-type.h\"\n+\n+#define NUM 32\n+\n+void\n+CALC (char *dst, char *src1, char *ind, char *src2)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      unsigned long long offset = ind[i] & (SIZE - 1);\n+      unsigned long long cond = ind[i] & SIZE;\n+\n+      dst[i] = cond ? src2[offset] : src1[offset];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, j;\n+  UNION_TYPE (AVX512F_LEN, i_b) s1, s2, res1, res2, res3, ind;\n+  char res_ref[SIZE];\n+\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      for (j = 0; j < SIZE; j++)\n+\t{\n+\t  ind.a[j] = i * (j << 1);\n+\t  s1.a[j] = DEFAULT_VALUE;\n+\t  s2.a[j] = 1.5 * i * 2 * j;\n+\n+\t  res1.a[j] = DEFAULT_VALUE;\n+\t  res2.a[j] = DEFAULT_VALUE;\n+\t  res3.a[j] = DEFAULT_VALUE;\n+\t}\n+\n+      CALC (res_ref, s1.a, ind.a, s2.a);\n+\n+      res1.x = INTRINSIC (_permutex2var_epi8) (s1.x, ind.x, s2.x);\n+      res2.x =\n+\tINTRINSIC (_mask_permutex2var_epi8) (s1.x, mask, ind.x, s2.x);\n+      res3.x =\n+\tINTRINSIC (_maskz_permutex2var_epi8) (mask, s1.x, ind.x,\n+\t\t\t\t\t       s2.x);\n+\n+      if (UNION_CHECK (AVX512F_LEN, i_b) (res1, res_ref))\n+\tabort ();\n+\n+      MASK_MERGE (i_b) (res_ref, mask, SIZE);\n+      if (UNION_CHECK (AVX512F_LEN, i_b) (res2, res_ref))\n+\tabort ();\n+\n+      MASK_ZERO (i_b) (res_ref, mask, SIZE);\n+      if (UNION_CHECK (AVX512F_LEN, i_b) (res3, res_ref))\n+\tabort ();\n+    }\n+}"}, {"sha": "145591ce17fb15e25ca9e9c01e892b00d899ba24", "filename": "gcc/testsuite/gcc.target/i386/avx512vbmi-vpmultishiftqb-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vbmi-vpmultishiftqb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vbmi-vpmultishiftqb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vbmi-vpmultishiftqb-1.c?ref=3dcc8af5cd0888813279eacb4fada71b2fbd359d", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vbmi -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpmultishiftqb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpmultishiftqb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmultishiftqb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmultishiftqb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpmultishiftqb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmultishiftqb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmultishiftqb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpmultishiftqb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmultishiftqb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i _x1, _y1, _z1;\n+volatile __m256i _x2, _y2, _z2;\n+volatile __m128i _x3, _y3, _z3;\n+\n+void extern\n+avx512vbmi_test (void)\n+{\n+  _x3 = _mm_multishift_epi64_epi8 (_y3, _z3);\n+  _x3 = _mm_mask_multishift_epi64_epi8 (_x3, 2, _y3, _z3);\n+  _x3 = _mm_maskz_multishift_epi64_epi8 (2, _y3, _z3);\n+  _x2 = _mm256_multishift_epi64_epi8 (_y2, _z2);\n+  _x2 = _mm256_mask_multishift_epi64_epi8 (_x2, 3, _y2, _z2);\n+  _x2 = _mm256_maskz_multishift_epi64_epi8 (3, _y2, _z2);\n+  _x1 = _mm512_multishift_epi64_epi8 (_y1, _z1);\n+  _x1 = _mm512_mask_multishift_epi64_epi8 (_x1, 3, _y1, _z1);\n+  _x1 = _mm512_maskz_multishift_epi64_epi8 (3, _y1, _z1);\n+}"}, {"sha": "936d938400bb18813817a104bb511113d79d3ba5", "filename": "gcc/testsuite/gcc.target/i386/avx512vbmi-vpmultishiftqb-2.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vbmi-vpmultishiftqb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vbmi-vpmultishiftqb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vbmi-vpmultishiftqb-2.c?ref=3dcc8af5cd0888813279eacb4fada71b2fbd359d", "patch": "@@ -0,0 +1,68 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vbmi -DAVX512VBMI\" } */\n+/* { dg-require-effective-target avx512vbmi } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (char *r, char *s1, char *s2)\n+{\n+  int i, j, k;\n+  long long a, b, ctrl;\n+\n+  for (i = 0; i < SIZE / sizeof (long long); i++)\n+    {\n+      union\n+      {\n+\tlong long x;\n+\tchar a[sizeof(long long)];\n+      } src;\n+\n+      for (j = 0; j  < sizeof (long long); j++)\n+\tsrc.a[j] = s2[i * sizeof (long long) + j];\n+      for (j = 0; j  < sizeof (long long); j++)\n+\t{\n+\t  ctrl = s1[i * sizeof (long long) + j] & ((1 << sizeof (long long)) - 1);\n+\t  r[i * sizeof (long long) + j] = 0;\n+\t  for (k = 0; k < 8; k++)\n+\t    {\n+\t       r[i * sizeof (long long) + j] |= ((src.x >> ((ctrl + k) % (sizeof (long long) * 8))) & 1) << k;\n+\t    }\n+\t}\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_b) src1, src2, dst1, dst2, dst3;\n+  char dst_ref[SIZE];\n+  int i;\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 15 + 3467 * i;\n+      src2.a[i] = 9217 + i;\n+      dst2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  CALC (dst_ref, src1.a, src2.a);\n+  dst1.x = INTRINSIC (_multishift_epi64_epi8) (src1.x, src2.x);\n+  dst2.x = INTRINSIC (_mask_multishift_epi64_epi8) (dst2.x, mask, src1.x, src2.x);\n+  dst3.x = INTRINSIC (_maskz_multishift_epi64_epi8) (mask, src1.x, src2.x);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (dst1, dst_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_b) (dst_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (dst2, dst_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_b) (dst_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (dst3, dst_ref))\n+    abort ();\n+}"}, {"sha": "377f34e1486cf3d8dc867c777d8733252f39ecbe", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpermb-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpermb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpermb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpermb-2.c?ref=3dcc8af5cd0888813279eacb4fada71b2fbd359d", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vbmi -mavx512vl -DAVX512VL\" } */\n+/* { dg-require-effective-target avx512vl } */\n+\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512vbmi-vpermb-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512vbmi-vpermb-2.c\""}, {"sha": "bd5dfc5642151ebd3d97143ee4cbd9002489cac8", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpermi2b-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpermi2b-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpermi2b-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpermi2b-2.c?ref=3dcc8af5cd0888813279eacb4fada71b2fbd359d", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vbmi -mavx512vl -DAVX512VL\" } */\n+/* { dg-require-effective-target avx512vl } */\n+\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512vbmi-vpermi2b-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512vbmi-vpermi2b-2.c\""}, {"sha": "a83eeb744c6246828273a70a955b20601f45335c", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpermt2b-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpermt2b-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpermt2b-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpermt2b-2.c?ref=3dcc8af5cd0888813279eacb4fada71b2fbd359d", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vbmi -mavx512vl -DAVX512VL\" } */\n+/* { dg-require-effective-target avx512vl } */\n+\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512vbmi-vpermt2b-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512vbmi-vpermt2b-2.c\""}, {"sha": "d215e236fe7ecd969970f7202658c2093a4e1680", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpmultishiftqb-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpmultishiftqb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpmultishiftqb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpmultishiftqb-2.c?ref=3dcc8af5cd0888813279eacb4fada71b2fbd359d", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vbmi -mavx512vl -DAVX512VL\" } */\n+/* { dg-require-effective-target avx512vl } */\n+\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512vbmi-vpmultishiftqb-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512vbmi-vpmultishiftqb-2.c\""}, {"sha": "ca5ef06790fbe781a839b3b43a6e69e378dbffad", "filename": "gcc/testsuite/gcc.target/i386/i386.exp", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp?ref=3dcc8af5cd0888813279eacb4fada71b2fbd359d", "patch": "@@ -365,6 +365,21 @@ proc check_effective_target_avx512ifma { } {\n     } \"-mavx512ifma\" ]\n }\n \n+# Return 1 if avx512vbmi instructions can be compiled.\n+proc check_effective_target_avx512vbmi { } {\n+    return [check_no_compiler_messages avx512vbmi object {\n+\ttypedef char __v64qi __attribute__ ((__vector_size__ (64)));\n+\t__v64qi\n+\t_mm512_multishift_epi64_epi8 (__v64qi __X, __v64qi __Y)\n+\t{\n+\t  return (__v64qi) __builtin_ia32_vpmultishiftqb512_mask ((__v64qi) __X,\n+\t\t\t\t\t\t\t\t (__v64qi) __Y,\n+\t\t\t\t\t\t\t\t (__v64qi) __Y,\n+\t\t\t\t\t\t\t\t -1);\n+\t}\n+    } \"-mavx512vbmi\" ]\n+}\n+\n # If a testcase doesn't have special options, use these.\n global DEFAULT_CFLAGS\n if ![info exists DEFAULT_CFLAGS] then {"}, {"sha": "a83db9213c5415787d5460a1f881abb50ecd8068", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=3dcc8af5cd0888813279eacb4fada71b2fbd359d", "patch": "@@ -3,7 +3,7 @@\n    popcntintrin.h and mm_malloc.h are usable\n    with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512ifma\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512ifma\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "f1d915704c0dc99bc73e7cf29402258d76ea0ad8", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=3dcc8af5cd0888813279eacb4fada71b2fbd359d", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512ifma\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512ifma\" } */\n \n #include <mm_malloc.h>\n "}, {"sha": "bc101093c2b7693289d2513ead97dc6ef72106cd", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=3dcc8af5cd0888813279eacb4fada71b2fbd359d", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "d54d1db66ac44cc910b502e2c6b1f9aa71b5fe91", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=3dcc8af5cd0888813279eacb4fada71b2fbd359d", "patch": "@@ -100,7 +100,7 @@\n \n \n #ifndef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512ifma\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512vbmi,avx512ifma\")\n #endif\n \n /* Following intrinsics require immediate arguments.  They\n@@ -215,7 +215,7 @@ test_4 (_mm_cmpestrz, int, __m128i, int, __m128i, int, 1)\n \n /* immintrin.h (AVX/AVX2/RDRND/FSGSBASE/F16C/RTM/AVX512F/SHA) */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma\")\n+#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma,avx512vbmi\")\n #endif\n #include <immintrin.h>\n test_1 (_cvtss_sh, unsigned short, float, 1)"}, {"sha": "e699bd38675b6c848e25a3cd5d30b5e357c5a56f", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcc8af5cd0888813279eacb4fada71b2fbd359d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=3dcc8af5cd0888813279eacb4fada71b2fbd359d", "patch": "@@ -594,7 +594,7 @@\n #define __builtin_ia32_extracti64x2_256_mask(A, E, C, D) __builtin_ia32_extracti64x2_256_mask(A, 1, C, D)\n #define __builtin_ia32_extractf64x2_256_mask(A, E, C, D) __builtin_ia32_extractf64x2_256_mask(A, 1, C, D)\n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512ifma\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma\")\n #include <wmmintrin.h>\n #include <smmintrin.h>\n #include <mm3dnow.h>"}]}