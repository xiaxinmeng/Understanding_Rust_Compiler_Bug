{"sha": "0cebb05d0b451ca7c314ba7e0a0c756e7a5d6c19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNlYmIwNWQwYjQ1MWNhN2MzMTRiYTdlMGEwYzc1NmU3YTVkNmMxOQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1992-04-10T20:04:10Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1992-04-10T20:04:10Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r719", "tree": {"sha": "b1b5025e457134ae1573563218cee162927b350a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1b5025e457134ae1573563218cee162927b350a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cebb05d0b451ca7c314ba7e0a0c756e7a5d6c19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cebb05d0b451ca7c314ba7e0a0c756e7a5d6c19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cebb05d0b451ca7c314ba7e0a0c756e7a5d6c19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cebb05d0b451ca7c314ba7e0a0c756e7a5d6c19/comments", "author": null, "committer": null, "parents": [{"sha": "371ffa39e201d1868ddaf2964f6f46d72f688166", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/371ffa39e201d1868ddaf2964f6f46d72f688166", "html_url": "https://github.com/Rust-GCC/gccrs/commit/371ffa39e201d1868ddaf2964f6f46d72f688166"}], "stats": {"total": 38, "additions": 36, "deletions": 2}, "files": [{"sha": "5d8ce773978ee6520e0916e8a786ad7ba33f00ec", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cebb05d0b451ca7c314ba7e0a0c756e7a5d6c19/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cebb05d0b451ca7c314ba7e0a0c756e7a5d6c19/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=0cebb05d0b451ca7c314ba7e0a0c756e7a5d6c19", "patch": "@@ -1951,6 +1951,7 @@ output_block_move (insn, operands, num_regs)\n   int align\t\t= INTVAL (operands[3]);\n   int num\t\t= 0;\n   int offset\t\t= 0;\n+  int use_lwl_lwr\t= FALSE;\n   int i;\n   rtx xoperands[10];\n \n@@ -2013,6 +2014,23 @@ output_block_move (insn, operands, num_regs)\n \t  bytes -= UNITS_PER_WORD;\n \t}\n \n+      else if (bytes >= UNITS_PER_WORD && TARGET_GAS)\n+\t{\n+#if BYTES_BIG_ENDIAN\n+\t  load_store[num].load     = \"lwl\\t%0,%1\\n\\tlwr\\t%0,%2\";\n+\t  load_store[num].load_nop = \"lwl\\t%0,%1\\n\\tlwr\\t%0,%2%#\";\n+\t  load_store[num].store    = \"swl\\t%0,%1\\n\\tswr\\t%0,%2\";\n+#else\n+\t  load_store[num].load     = \"lwl\\t%0,%2\\n\\tlwr\\t%0,%1\";\n+\t  load_store[num].load_nop = \"lwl\\t%0,%2\\n\\tlwr\\t%0,%1%#\";\n+\t  load_store[num].store    = \"swl\\t%0,%2\\n\\tswr\\t%0,%1\";\n+#endif\n+\t  load_store[num].mode = SImode;\n+\t  offset += UNITS_PER_WORD;\n+\t  bytes -= UNITS_PER_WORD;\n+\t  use_lwl_lwr = TRUE;\n+\t}\n+\n       else if (bytes >= UNITS_PER_WORD)\n \t{\n \t  load_store[num].load     = \"ulw\\t%0,%1\";\n@@ -2067,27 +2085,43 @@ output_block_move (insn, operands, num_regs)\n \n \t  for (i = 0; i < num; i++)\n \t    {\n+\t      int offset;\n+\n \t      if (!operands[i+4])\n \t\tabort ();\n \n \t      if (GET_MODE (operands[i+4]) != load_store[i].mode)\n \t\toperands[i+4] = gen_rtx (REG, load_store[i].mode, REGNO (operands[i+4]));\n \n+\t      offset = load_store[i].offset;\n \t      xoperands[0] = operands[i+4];\n \t      xoperands[1] = gen_rtx (MEM, load_store[i].mode,\n-\t\t\t\t      plus_constant (src_reg, load_store[i].offset));\n+\t\t\t\t      plus_constant (src_reg, offset));\n+\n+\t      if (use_lwl_lwr)\n+\t\txoperands[2] = gen_rtx (MEM, load_store[i].mode,\n+\t\t\t\t\tplus_constant (src_reg, UNITS_PER_WORD-1+offset));\n+\n \t      output_asm_insn (load_store[i].load, xoperands);\n \t    }\n \n \t  for (i = 0; i < num; i++)\n \t    {\n+\t      int offset = load_store[i].offset;\n \t      xoperands[0] = operands[i+4];\n \t      xoperands[1] = gen_rtx (MEM, load_store[i].mode,\n-\t\t\t\t      plus_constant (dest_reg, load_store[i].offset));\n+\t\t\t\t      plus_constant (dest_reg, offset));\n+\n+\n+\t      if (use_lwl_lwr)\n+\t\txoperands[2] = gen_rtx (MEM, load_store[i].mode,\n+\t\t\t\t\tplus_constant (dest_reg, UNITS_PER_WORD-1+offset));\n+\n \t      output_asm_insn (load_store[i].store, xoperands);\n \t    }\n \n \t  num = 0;\t\t/* reset load_store */\n+\t  use_lwl_lwr = FALSE;\t/* reset whether or not we used lwl/lwr */\n \t}\n     }\n "}]}