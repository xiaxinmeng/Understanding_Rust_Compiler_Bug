{"sha": "27d020cf7db55e3cc9517a8bc79e14644f54bd5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdkMDIwY2Y3ZGI1NWUzY2M5NTE3YThiYzc5ZTE0NjQ0ZjU0YmQ1YQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2017-05-22T15:36:02Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2017-05-22T15:36:02Z"}, "message": "Makefile.in: Add ipa-fnsummary.o and ipa-fnsummary.h\n\n\n\t* Makefile.in: Add ipa-fnsummary.o and ipa-fnsummary.h\n\t* auto-profile.c: Replace ipa-inline.h by ipa-fnsummary.h\n\t* cgraph.c: Likewise.\n\t* cgraphunit.c: Likewise.\n\t* gengtype.c: Likewise.\n\t* ipa-cp.c: Likewise.\n\t* ipa-devirt.c: Likewise.\n\t* ipa-icf.c: Likewise.\n\t* ipa-predicate.c: Likewise.\n\t* ipa-profile.c: Likewise.\n\t* ipa-prop.c: Likewise.\n\t* ipa-split.c: Likewise.\n\t* ipa.c: Likewise.\n\t* ipa-inline-analysis.c (inline_summaries, ipa_call_summaries,\n\tedge_predicate_pool, dump_inline_hints,\n\tinline_summary::account_size_time, redirect_to_unreachable,\n\tedge_set_predicate, set_hint_predicate,\n\tevaluate_conditions_for_known_args, evaluate_properties_for_edge,\n\tinline_summary_alloc, ipa_call_summary::reset, inline_summary::reset,\n\tinline_summary_t::remove, remap_hint_predicate_after_duplication,\n\tinline_summary_t::duplicate, ipa_call_summary_t::duplicate,\n\tipa_call_summary_t::remove, initialize_growth_caches,\n\tfree_growth_caches, dump_ipa_call_summary, dump_inline_summary,\n\tdebug_inline_summary, dump_inline_summaries, initialize_inline_failed,\n\tmark_modified, unmodified_parm_1, unmodified_parm,\n\tunmodified_parm_or_parm_agg_item, eliminated_by_inlining_prob,\n\tset_cond_stmt_execution_predicate, set_switch_stmt_execution_predicate,\n\tcompute_bb_predicates, will_be_nonconstant_expr_predicate,\n\twill_be_nonconstant_predicate, record_modified_bb_info,\n\tget_minimal_bb, record_modified, param_change_prob,\n\tphi_result_unknown_predicate, predicate_for_phi_result,\n\tarray_index_predicate, clobber_only_eh_bb_p, fp_expression_p,\n\testimate_function_body_sizes, compute_inline_parameters,\n\tcompute_inline_parameters_for_curren, pass_data_inline_parameters,\n\testimate_node_size_and_time, estimate_ipcp_clone_size_and_time,\n\tinline_update_callee_summaries, remap_edge_change_prob,\n\tremap_edge_summaries, remap_hint_predicate, inline_merge_summary,\n\tinline_update_overall_summary, inline_indirect_intraprocedural_analysis,\n\tinline_analyze_function, inline_summary_t::insert,\n\tinline_generate_summary, read_ipa_call_summary, inline_read_section,\n\tinline_read_summary, write_ipa_call_summary, inline_write_summary,\n\tinline_free_summary): Move to ipa-fnsummary.h\n\t(predicate_t): Remove.\n\t* ipa-fnsummary.c: New file.\n\t* ipa-inline.h:  Do not include sreal.h and ipa-predicate.h\n\t(enum inline_hints_vals, inline_hints, agg_position_info,\n\tINLINE_SIZE_SCALE, size_time_entry, inline_summary, inline_summary_t,\n\tinline_summaries, ipa_call_summary, ipa_call_summary_t,\n\tipa_call_summaries, debug_inline_summary, dump_inline_summaries,\n\tdump_inline_summary, dump_inline_hints, inline_generate_summary,\n\tinline_read_summary, inline_write_summary, inline_free_summary,\n\tinline_analyze_function, initialize_inline_failed,\n\tinline_merge_summary, inline_update_overall_summary,\n\tcompute_inline_parameters): Move to ipa-fnsummary.h\n\t* ipa-fnsummary.h: New file.\n\t* ipa-inline-transform.h: Include ipa-inline.h.\n\t* ipa-inline.c: LIkewise.\n\n\t* lto.c: Replace ipa-inline.h by ipa-fnsummary.h\n\t* lto-partition.c: Replace ipa-inline.h by ipa-fnsummary.h\n\nFrom-SVN: r248336", "tree": {"sha": "f02308bf85443002d40f67dc87ac9d427ff80254", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f02308bf85443002d40f67dc87ac9d427ff80254"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27d020cf7db55e3cc9517a8bc79e14644f54bd5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27d020cf7db55e3cc9517a8bc79e14644f54bd5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27d020cf7db55e3cc9517a8bc79e14644f54bd5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/comments", "author": null, "committer": null, "parents": [{"sha": "b7cb2251a32e7af51c5edf97cbf118d5c2b6dd51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7cb2251a32e7af51c5edf97cbf118d5c2b6dd51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7cb2251a32e7af51c5edf97cbf118d5c2b6dd51"}], "stats": {"total": 7714, "additions": 3952, "deletions": 3762}, "files": [{"sha": "2efcf7e96bb7155ab2ce03aeaf545b620393757b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=27d020cf7db55e3cc9517a8bc79e14644f54bd5a", "patch": "@@ -1,3 +1,63 @@\n+2017-05-22  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* Makefile.in: Add ipa-fnsummary.o and ipa-fnsummary.h\n+\t* auto-profile.c: Replace ipa-inline.h by ipa-fnsummary.h\n+\t* cgraph.c: Likewise.\n+\t* cgraphunit.c: Likewise.\n+\t* gengtype.c: Likewise.\n+\t* ipa-cp.c: Likewise.\n+\t* ipa-devirt.c: Likewise.\n+\t* ipa-icf.c: Likewise.\n+\t* ipa-predicate.c: Likewise.\n+\t* ipa-profile.c: Likewise.\n+\t* ipa-prop.c: Likewise.\n+\t* ipa-split.c: Likewise.\n+\t* ipa.c: Likewise.\n+\t* ipa-inline-analysis.c (inline_summaries, ipa_call_summaries,\n+\tedge_predicate_pool, dump_inline_hints,\n+\tinline_summary::account_size_time, redirect_to_unreachable,\n+\tedge_set_predicate, set_hint_predicate,\n+\tevaluate_conditions_for_known_args, evaluate_properties_for_edge,\n+\tinline_summary_alloc, ipa_call_summary::reset, inline_summary::reset,\n+\tinline_summary_t::remove, remap_hint_predicate_after_duplication,\n+\tinline_summary_t::duplicate, ipa_call_summary_t::duplicate,\n+\tipa_call_summary_t::remove, initialize_growth_caches,\n+\tfree_growth_caches, dump_ipa_call_summary, dump_inline_summary,\n+\tdebug_inline_summary, dump_inline_summaries, initialize_inline_failed,\n+\tmark_modified, unmodified_parm_1, unmodified_parm,\n+\tunmodified_parm_or_parm_agg_item, eliminated_by_inlining_prob,\n+\tset_cond_stmt_execution_predicate, set_switch_stmt_execution_predicate,\n+\tcompute_bb_predicates, will_be_nonconstant_expr_predicate,\n+\twill_be_nonconstant_predicate, record_modified_bb_info,\n+\tget_minimal_bb, record_modified, param_change_prob,\n+\tphi_result_unknown_predicate, predicate_for_phi_result,\n+\tarray_index_predicate, clobber_only_eh_bb_p, fp_expression_p,\n+\testimate_function_body_sizes, compute_inline_parameters,\n+\tcompute_inline_parameters_for_curren, pass_data_inline_parameters,\n+\testimate_node_size_and_time, estimate_ipcp_clone_size_and_time,\n+\tinline_update_callee_summaries, remap_edge_change_prob,\n+\tremap_edge_summaries, remap_hint_predicate, inline_merge_summary,\n+\tinline_update_overall_summary, inline_indirect_intraprocedural_analysis,\n+\tinline_analyze_function, inline_summary_t::insert,\n+\tinline_generate_summary, read_ipa_call_summary, inline_read_section,\n+\tinline_read_summary, write_ipa_call_summary, inline_write_summary,\n+\tinline_free_summary): Move to ipa-fnsummary.h\n+\t(predicate_t): Remove.\n+\t* ipa-fnsummary.c: New file.\n+\t* ipa-inline.h:  Do not include sreal.h and ipa-predicate.h\n+\t(enum inline_hints_vals, inline_hints, agg_position_info,\n+\tINLINE_SIZE_SCALE, size_time_entry, inline_summary, inline_summary_t,\n+\tinline_summaries, ipa_call_summary, ipa_call_summary_t,\n+\tipa_call_summaries, debug_inline_summary, dump_inline_summaries,\n+\tdump_inline_summary, dump_inline_hints, inline_generate_summary,\n+\tinline_read_summary, inline_write_summary, inline_free_summary,\n+\tinline_analyze_function, initialize_inline_failed,\n+\tinline_merge_summary, inline_update_overall_summary,\n+\tcompute_inline_parameters): Move to ipa-fnsummary.h\n+\t* ipa-fnsummary.h: New file.\n+\t* ipa-inline-transform.h: Include ipa-inline.h.\n+\t* ipa-inline.c: LIkewise.\n+\n 2017-05-22  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-inline.c (edge_badness): Use inlined_time instead of"}, {"sha": "6e0e55a1dbdf04a730bf89aa7ff1b5e767e15c5c", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=27d020cf7db55e3cc9517a8bc79e14644f54bd5a", "patch": "@@ -1340,6 +1340,7 @@ OBJS = \\\n \tipa-chkp.o \\\n \tipa-cp.o \\\n \tipa-devirt.o \\\n+\tipa-fnsummary.o \\\n \tipa-polymorphic-call.o \\\n \tipa-split.o \\\n \tipa-inline.o \\\n@@ -2507,7 +2508,7 @@ GTFILES = $(CPP_ID_DATA_H) $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(srcdir)/lto-streamer.h \\\n   $(srcdir)/target-globals.h \\\n   $(srcdir)/ipa-predicate.h \\\n-  $(srcdir)/ipa-inline.h \\\n+  $(srcdir)/ipa-fnsummary.h \\\n   $(srcdir)/vtable-verify.c \\\n   $(srcdir)/asan.c \\\n   $(srcdir)/ubsan.c \\"}, {"sha": "d32ef1da46fae8038d1c5f7d96aa405788c71956", "filename": "gcc/auto-profile.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Fauto-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Fauto-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fauto-profile.c?ref=27d020cf7db55e3cc9517a8bc79e14644f54bd5a", "patch": "@@ -44,6 +44,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"params.h\"\n #include \"symbol-summary.h\"\n #include \"ipa-prop.h\"\n+#include \"ipa-fnsummary.h\"\n #include \"ipa-inline.h\"\n #include \"tree-inline.h\"\n #include \"auto-profile.h\""}, {"sha": "4d04f63e68956c22ffdc46eb4ac470dee2d9d508", "filename": "gcc/cgraph.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=27d020cf7db55e3cc9517a8bc79e14644f54bd5a", "patch": "@@ -51,7 +51,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"symbol-summary.h\"\n #include \"tree-vrp.h\"\n #include \"ipa-prop.h\"\n-#include \"ipa-inline.h\"\n+#include \"ipa-fnsummary.h\"\n #include \"cfgloop.h\"\n #include \"gimple-pretty-print.h\"\n #include \"tree-dfa.h\""}, {"sha": "81dddeadbd35b6eb47858e0e99232f07b95b1604", "filename": "gcc/cgraph.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=27d020cf7db55e3cc9517a8bc79e14644f54bd5a", "patch": "@@ -2340,6 +2340,10 @@ tree ctor_for_folding (tree);\n /* In tree-chkp.c  */\n extern bool chkp_function_instrumented_p (tree fndecl);\n \n+/* In ipa-inline-analysis.c  */\n+void initialize_inline_failed (struct cgraph_edge *);\n+bool speculation_useful_p (struct cgraph_edge *e, bool anticipate_inlining);\n+\n /* Return true when the symbol is real symbol, i.e. it is not inline clone\n    or abstract function kept for debug info purposes only.  */\n inline bool"}, {"sha": "f1484b0982b722016a19dfc64f7de49f17bf12c1", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=27d020cf7db55e3cc9517a8bc79e14644f54bd5a", "patch": "@@ -194,7 +194,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ipa-prop.h\"\n #include \"gimple-pretty-print.h\"\n #include \"plugin.h\"\n-#include \"ipa-inline.h\"\n+#include \"ipa-fnsummary.h\"\n #include \"ipa-utils.h\"\n #include \"except.h\"\n #include \"cfgloop.h\""}, {"sha": "ec949a1f307d23f1c5b7d8e3a10732faf18eacb1", "filename": "gcc/gengtype.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=27d020cf7db55e3cc9517a8bc79e14644f54bd5a", "patch": "@@ -1720,7 +1720,7 @@ open_base_files (void)\n       \"tree-dfa.h\", \"tree-ssa.h\", \"reload.h\", \"cpp-id-data.h\", \"tree-chrec.h\",\n       \"except.h\", \"output.h\",  \"cfgloop.h\", \"target.h\", \"lto-streamer.h\",\n       \"target-globals.h\", \"ipa-ref.h\", \"cgraph.h\", \"symbol-summary.h\",\n-      \"ipa-prop.h\", \"ipa-inline.h\", \"dwarf2out.h\", \"omp-offload.h\", NULL\n+      \"ipa-prop.h\", \"ipa-fnsummary.h\", \"dwarf2out.h\", \"omp-offload.h\", NULL\n     };\n     const char *const *ifp;\n     outf_p gtype_desc_c;"}, {"sha": "b18d9a3ef180085c6f771b25765059aa71b2020a", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=27d020cf7db55e3cc9517a8bc79e14644f54bd5a", "patch": "@@ -119,7 +119,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pretty-print.h\"\n #include \"tree-inline.h\"\n #include \"params.h\"\n-#include \"ipa-inline.h\"\n+#include \"ipa-fnsummary.h\"\n #include \"ipa-utils.h\"\n #include \"tree-ssa-ccp.h\"\n "}, {"sha": "3140e6ede64de706522327c43af60359d39c2c5d", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=27d020cf7db55e3cc9517a8bc79e14644f54bd5a", "patch": "@@ -124,7 +124,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"symbol-summary.h\"\n #include \"tree-vrp.h\"\n #include \"ipa-prop.h\"\n-#include \"ipa-inline.h\"\n+#include \"ipa-fnsummary.h\"\n #include \"demangle.h\"\n #include \"dbgcnt.h\"\n #include \"gimple-pretty-print.h\""}, {"sha": "00b8099436746a8f11372ef0b1740c9b4ba9c775", "filename": "gcc/ipa-fnsummary.c", "status": "added", "additions": 3526, "deletions": 0, "changes": 3526, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Fipa-fnsummary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Fipa-fnsummary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-fnsummary.c?ref=27d020cf7db55e3cc9517a8bc79e14644f54bd5a"}, {"sha": "1412124f3b1cc48384b69121fac831e46e3f8935", "filename": "gcc/ipa-fnsummary.h", "status": "added", "additions": 272, "deletions": 0, "changes": 272, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Fipa-fnsummary.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Fipa-fnsummary.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-fnsummary.h?ref=27d020cf7db55e3cc9517a8bc79e14644f54bd5a", "patch": "@@ -0,0 +1,272 @@\n+/* IPA function body analysis.\n+   Copyright (C) 2003-2017 Free Software Foundation, Inc.\n+   Contributed by Jan Hubicka\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_IPA_SUMMARY_H\n+#define GCC_IPA_SUMMARY_H\n+\n+#include \"sreal.h\"\n+#include \"ipa-predicate.h\"\n+\n+\n+/* Inline hints are reasons why inline heuristics should preffer inlining given\n+   function.  They are represtented as bitmap of the following values.  */\n+enum inline_hints_vals {\n+  /* When inlining turns indirect call into a direct call,\n+     it is good idea to do so.  */\n+  INLINE_HINT_indirect_call = 1,\n+  /* Inlining may make loop iterations or loop stride known.  It is good idea\n+     to do so because it enables loop optimizatoins.  */\n+  INLINE_HINT_loop_iterations = 2,\n+  INLINE_HINT_loop_stride = 4,\n+  /* Inlining within same strongly connected component of callgraph is often\n+     a loss due to increased stack frame usage and prologue setup costs.  */\n+  INLINE_HINT_same_scc = 8,\n+  /* Inlining functions in strongly connected component is not such a great\n+     win.  */\n+  INLINE_HINT_in_scc = 16,\n+  /* If function is declared inline by user, it may be good idea to inline\n+     it.  */\n+  INLINE_HINT_declared_inline = 32,\n+  /* Programs are usually still organized for non-LTO compilation and thus\n+     if functions are in different modules, inlining may not be so important. \n+   */\n+  INLINE_HINT_cross_module = 64,\n+  /* If array indexes of loads/stores become known there may be room for\n+     further optimization.  */\n+  INLINE_HINT_array_index = 128,\n+  /* We know that the callee is hot by profile.  */\n+  INLINE_HINT_known_hot = 256\n+};\n+\n+typedef int inline_hints;\n+\n+/* Simple description of whether a memory load or a condition refers to a load\n+   from an aggregate and if so, how and where from in the aggregate.\n+   Individual fields have the same meaning like fields with the same name in\n+   struct condition.  */\n+\n+struct agg_position_info\n+{\n+  HOST_WIDE_INT offset;\n+  bool agg_contents;\n+  bool by_ref;\n+};\n+\n+/* Represnetation of function body size and time depending on the inline\n+   context.  We keep simple array of record, every containing of predicate\n+   and time/size to account.\n+\n+   We keep values scaled up, so fractional sizes can be accounted.  */\n+#define INLINE_SIZE_SCALE 2\n+struct GTY(()) size_time_entry\n+{\n+  /* Predicate for code to be executed.  */\n+  predicate exec_predicate;\n+  /* Predicate for value to be constant and optimized out in a specialized copy.\n+     When deciding on specialization this makes it possible to see how much\n+     the executed code paths will simplify.  */\n+  predicate nonconst_predicate;\n+  int size;\n+  sreal GTY((skip)) time;\n+};\n+\n+/* Function inlining information.  */\n+struct GTY(()) inline_summary\n+{\n+  /* Information about the function body itself.  */\n+\n+  /* Estimated stack frame consumption by the function.  */\n+  HOST_WIDE_INT estimated_self_stack_size;\n+  /* Size of the function body.  */\n+  int self_size;\n+  /* Minimal size increase after inlining.  */\n+  int min_size;\n+\n+  /* False when there something makes inlining impossible (such as va_arg).  */\n+  unsigned inlinable : 1;\n+  /* True when function contains cilk spawn (and thus we can not inline\n+     into it).  */\n+  unsigned contains_cilk_spawn : 1;\n+  /* True wen there is only one caller of the function before small function\n+     inlining.  */\n+  unsigned int single_caller : 1;\n+  /* True if function contains any floating point expressions.  */\n+  unsigned int fp_expressions : 1;\n+\n+  /* Information about function that will result after applying all the\n+     inline decisions present in the callgraph.  Generally kept up to\n+     date only for functions that are not inline clones. */\n+\n+  /* Estimated stack frame consumption by the function.  */\n+  HOST_WIDE_INT estimated_stack_size;\n+  /* Expected offset of the stack frame of inlined function.  */\n+  HOST_WIDE_INT stack_frame_offset;\n+  /* Estimated size of the function after inlining.  */\n+  sreal GTY((skip)) time;\n+  int size;\n+\n+  /* Conditional size/time information.  The summaries are being\n+     merged during inlining.  */\n+  conditions conds;\n+  vec<size_time_entry, va_gc> *size_time_table;\n+\n+  /* Predicate on when some loop in the function becomes to have known\n+     bounds.   */\n+  predicate * GTY((skip)) loop_iterations;\n+  /* Predicate on when some loop in the function becomes to have known\n+     stride.   */\n+  predicate * GTY((skip)) loop_stride;\n+  /* Predicate on when some array indexes become constants.  */\n+  predicate * GTY((skip)) array_index;\n+  /* Estimated growth for inlining all copies of the function before start\n+     of small functions inlining.\n+     This value will get out of date as the callers are duplicated, but\n+     using up-to-date value in the badness metric mean a lot of extra\n+     expenses.  */\n+  int growth;\n+  /* Number of SCC on the beginning of inlining process.  */\n+  int scc_no;\n+\n+  /* Keep all field empty so summary dumping works during its computation.\n+     This is useful for debugging.  */\n+  inline_summary ()\n+    : estimated_self_stack_size (0), self_size (0), min_size (0),\n+      inlinable (false), contains_cilk_spawn (false), single_caller (false),\n+      fp_expressions (false), estimated_stack_size (false),\n+      stack_frame_offset (false), time (0), size (0), conds (NULL),\n+      size_time_table (NULL), loop_iterations (NULL), loop_stride (NULL),\n+      array_index (NULL), growth (0), scc_no (0)\n+    {\n+    }\n+\n+  /* Record time and size under given predicates.  */\n+  void account_size_time (int, sreal, const predicate &, const predicate &);\n+\n+  /* Reset inline summary to empty state.  */\n+  void reset (struct cgraph_node *node);\n+};\n+\n+class GTY((user)) inline_summary_t: public function_summary <inline_summary *>\n+{\n+public:\n+  inline_summary_t (symbol_table *symtab, bool ggc):\n+    function_summary <inline_summary *> (symtab, ggc) {}\n+\n+  static inline_summary_t *create_ggc (symbol_table *symtab)\n+  {\n+    struct inline_summary_t *summary = new (ggc_alloc <inline_summary_t> ())\n+      inline_summary_t(symtab, true);\n+    summary->disable_insertion_hook ();\n+    return summary;\n+  }\n+\n+\n+  virtual void insert (cgraph_node *, inline_summary *);\n+  virtual void remove (cgraph_node *node, inline_summary *);\n+  virtual void duplicate (cgraph_node *src, cgraph_node *dst,\n+\t\t\t  inline_summary *src_data, inline_summary *dst_data);\n+};\n+\n+extern GTY(()) function_summary <inline_summary *> *inline_summaries;\n+\n+/* Information kept about callgraph edges.  */\n+struct ipa_call_summary\n+{\n+  class predicate *predicate;\n+  /* Vector indexed by parameters.  */\n+  vec<inline_param_summary> param;\n+  /* Estimated size and time of the call statement.  */\n+  int call_stmt_size;\n+  int call_stmt_time;\n+  /* Depth of loop nest, 0 means no nesting.  */\n+  unsigned int loop_depth;\n+  \n+  /* Keep all field empty so summary dumping works during its computation.\n+     This is useful for debugging.  */\n+  ipa_call_summary ()\n+    : predicate (NULL), param (vNULL), call_stmt_size (0), call_stmt_time (0),\n+      loop_depth (0)\n+    {\n+    }\n+\n+  /* Reset inline summary to empty state.  */\n+  void reset ();\n+};\n+\n+class ipa_call_summary_t: public call_summary <ipa_call_summary *>\n+{\n+public:\n+  ipa_call_summary_t (symbol_table *symtab, bool ggc):\n+    call_summary <ipa_call_summary *> (symtab, ggc) {}\n+\n+  /* Hook that is called by summary when an edge is duplicated.  */\n+  virtual void remove (cgraph_edge *cs, ipa_call_summary *);\n+  /* Hook that is called by summary when an edge is duplicated.  */\n+  virtual void duplicate (cgraph_edge *src, cgraph_edge *dst,\n+\t\t\t  ipa_call_summary *src_data,\n+\t\t\t  ipa_call_summary *dst_data);\n+};\n+\n+extern call_summary <ipa_call_summary *> *ipa_call_summaries;\n+\n+/* In ipa-fnsummary.c  */\n+void debug_inline_summary (struct cgraph_node *);\n+void dump_inline_summaries (FILE *f);\n+void dump_inline_summary (FILE *f, struct cgraph_node *node);\n+void dump_inline_hints (FILE *f, inline_hints);\n+void inline_generate_summary (void);\n+void inline_read_summary (void);\n+void inline_write_summary (void);\n+void inline_free_summary (void);\n+void inline_analyze_function (struct cgraph_node *node);\n+int estimate_size_after_inlining (struct cgraph_node *, struct cgraph_edge *);\n+void estimate_ipcp_clone_size_and_time (struct cgraph_node *,\n+\t\t\t\t\tvec<tree>,\n+\t\t\t\t\tvec<ipa_polymorphic_call_context>,\n+\t\t\t\t\tvec<ipa_agg_jump_function_p>,\n+\t\t\t\t\tint *, sreal *, sreal *,\n+\t\t\t\t        inline_hints *);\n+void inline_merge_summary (struct cgraph_edge *edge);\n+void inline_update_overall_summary (struct cgraph_node *node);\n+void compute_inline_parameters (struct cgraph_node *, bool);\n+bool inline_account_function_p (struct cgraph_node *node);\n+\n+\n+void evaluate_properties_for_edge (struct cgraph_edge *e, bool inline_p,\n+\t\t\t\t   clause_t *clause_ptr,\n+\t\t\t\t   clause_t *nonspec_clause_ptr,\n+\t\t\t\t   vec<tree> *known_vals_ptr,\n+\t\t\t\t   vec<ipa_polymorphic_call_context>\n+\t\t\t\t   *known_contexts_ptr,\n+\t\t\t\t   vec<ipa_agg_jump_function_p> *);\n+void estimate_node_size_and_time (struct cgraph_node *node,\n+\t\t\t\t  clause_t possible_truths,\n+\t\t\t\t  clause_t nonspec_possible_truths,\n+\t\t\t\t  vec<tree> known_vals,\n+\t\t\t\t  vec<ipa_polymorphic_call_context>,\n+\t\t\t\t  vec<ipa_agg_jump_function_p> known_aggs,\n+\t\t\t\t  int *ret_size, int *ret_min_size,\n+\t\t\t\t  sreal *ret_time,\n+\t\t\t\t  sreal *ret_nonspecialized_time,\n+\t\t\t\t  inline_hints *ret_hints,\n+\t\t\t\t  vec<inline_param_summary>\n+\t\t\t\t  inline_param_summary);\n+\n+#endif /* GCC_IPA_FNSUMMARY_H */"}, {"sha": "dd1645fc5a9f2df97a4cb3c6ded9ab3958201a6d", "filename": "gcc/ipa-icf.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Fipa-icf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Fipa-icf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.c?ref=27d020cf7db55e3cc9517a8bc79e14644f54bd5a", "patch": "@@ -74,7 +74,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-cfg.h\"\n #include \"symbol-summary.h\"\n #include \"ipa-prop.h\"\n-#include \"ipa-inline.h\"\n+#include \"ipa-fnsummary.h\"\n #include \"except.h\"\n #include \"attribs.h\"\n #include \"print-tree.h\""}, {"sha": "9cdf10325f1bfa366fdc3ad663fc33913c6665da", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 63, "deletions": 3526, "changes": 3589, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=27d020cf7db55e3cc9517a8bc79e14644f54bd5a"}, {"sha": "d97e80d21533a63cf02a0b5030c7551db708dd14", "filename": "gcc/ipa-inline-transform.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Fipa-inline-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Fipa-inline-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-transform.c?ref=27d020cf7db55e3cc9517a8bc79e14644f54bd5a", "patch": "@@ -41,6 +41,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"symbol-summary.h\"\n #include \"tree-vrp.h\"\n #include \"ipa-prop.h\"\n+#include \"ipa-fnsummary.h\"\n #include \"ipa-inline.h\"\n #include \"tree-inline.h\"\n "}, {"sha": "0a8e535c3a7db8a2df067e039d944a6275a5ed87", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=27d020cf7db55e3cc9517a8bc79e14644f54bd5a", "patch": "@@ -110,6 +110,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"symbol-summary.h\"\n #include \"tree-vrp.h\"\n #include \"ipa-prop.h\"\n+#include \"ipa-fnsummary.h\"\n #include \"ipa-inline.h\"\n #include \"ipa-utils.h\"\n #include \"sreal.h\""}, {"sha": "d9b861165239232eef9bc803ed7747a59851e84e", "filename": "gcc/ipa-inline.h", "status": "modified", "additions": 2, "deletions": 220, "changes": 222, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Fipa-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Fipa-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.h?ref=27d020cf7db55e3cc9517a8bc79e14644f54bd5a", "patch": "@@ -21,211 +21,6 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_IPA_INLINE_H\n #define GCC_IPA_INLINE_H\n \n-#include \"sreal.h\"\n-#include \"ipa-predicate.h\"\n-\n-\n-/* Inline hints are reasons why inline heuristics should preffer inlining given\n-   function.  They are represtented as bitmap of the following values.  */\n-enum inline_hints_vals {\n-  /* When inlining turns indirect call into a direct call,\n-     it is good idea to do so.  */\n-  INLINE_HINT_indirect_call = 1,\n-  /* Inlining may make loop iterations or loop stride known.  It is good idea\n-     to do so because it enables loop optimizatoins.  */\n-  INLINE_HINT_loop_iterations = 2,\n-  INLINE_HINT_loop_stride = 4,\n-  /* Inlining within same strongly connected component of callgraph is often\n-     a loss due to increased stack frame usage and prologue setup costs.  */\n-  INLINE_HINT_same_scc = 8,\n-  /* Inlining functions in strongly connected component is not such a great\n-     win.  */\n-  INLINE_HINT_in_scc = 16,\n-  /* If function is declared inline by user, it may be good idea to inline\n-     it.  */\n-  INLINE_HINT_declared_inline = 32,\n-  /* Programs are usually still organized for non-LTO compilation and thus\n-     if functions are in different modules, inlining may not be so important. \n-   */\n-  INLINE_HINT_cross_module = 64,\n-  /* If array indexes of loads/stores become known there may be room for\n-     further optimization.  */\n-  INLINE_HINT_array_index = 128,\n-  /* We know that the callee is hot by profile.  */\n-  INLINE_HINT_known_hot = 256\n-};\n-\n-typedef int inline_hints;\n-\n-/* Simple description of whether a memory load or a condition refers to a load\n-   from an aggregate and if so, how and where from in the aggregate.\n-   Individual fields have the same meaning like fields with the same name in\n-   struct condition.  */\n-\n-struct agg_position_info\n-{\n-  HOST_WIDE_INT offset;\n-  bool agg_contents;\n-  bool by_ref;\n-};\n-\n-/* Represnetation of function body size and time depending on the inline\n-   context.  We keep simple array of record, every containing of predicate\n-   and time/size to account.\n-\n-   We keep values scaled up, so fractional sizes can be accounted.  */\n-#define INLINE_SIZE_SCALE 2\n-struct GTY(()) size_time_entry\n-{\n-  /* Predicate for code to be executed.  */\n-  predicate exec_predicate;\n-  /* Predicate for value to be constant and optimized out in a specialized copy.\n-     When deciding on specialization this makes it possible to see how much\n-     the executed code paths will simplify.  */\n-  predicate nonconst_predicate;\n-  int size;\n-  sreal GTY((skip)) time;\n-};\n-\n-/* Function inlining information.  */\n-struct GTY(()) inline_summary\n-{\n-  /* Information about the function body itself.  */\n-\n-  /* Estimated stack frame consumption by the function.  */\n-  HOST_WIDE_INT estimated_self_stack_size;\n-  /* Size of the function body.  */\n-  int self_size;\n-  /* Minimal size increase after inlining.  */\n-  int min_size;\n-\n-  /* False when there something makes inlining impossible (such as va_arg).  */\n-  unsigned inlinable : 1;\n-  /* True when function contains cilk spawn (and thus we can not inline\n-     into it).  */\n-  unsigned contains_cilk_spawn : 1;\n-  /* True wen there is only one caller of the function before small function\n-     inlining.  */\n-  unsigned int single_caller : 1;\n-  /* True if function contains any floating point expressions.  */\n-  unsigned int fp_expressions : 1;\n-\n-  /* Information about function that will result after applying all the\n-     inline decisions present in the callgraph.  Generally kept up to\n-     date only for functions that are not inline clones. */\n-\n-  /* Estimated stack frame consumption by the function.  */\n-  HOST_WIDE_INT estimated_stack_size;\n-  /* Expected offset of the stack frame of inlined function.  */\n-  HOST_WIDE_INT stack_frame_offset;\n-  /* Estimated size of the function after inlining.  */\n-  sreal GTY((skip)) time;\n-  int size;\n-\n-  /* Conditional size/time information.  The summaries are being\n-     merged during inlining.  */\n-  conditions conds;\n-  vec<size_time_entry, va_gc> *size_time_table;\n-\n-  /* Predicate on when some loop in the function becomes to have known\n-     bounds.   */\n-  predicate * GTY((skip)) loop_iterations;\n-  /* Predicate on when some loop in the function becomes to have known\n-     stride.   */\n-  predicate * GTY((skip)) loop_stride;\n-  /* Predicate on when some array indexes become constants.  */\n-  predicate * GTY((skip)) array_index;\n-  /* Estimated growth for inlining all copies of the function before start\n-     of small functions inlining.\n-     This value will get out of date as the callers are duplicated, but\n-     using up-to-date value in the badness metric mean a lot of extra\n-     expenses.  */\n-  int growth;\n-  /* Number of SCC on the beginning of inlining process.  */\n-  int scc_no;\n-\n-  /* Keep all field empty so summary dumping works during its computation.\n-     This is useful for debugging.  */\n-  inline_summary ()\n-    : estimated_self_stack_size (0), self_size (0), min_size (0),\n-      inlinable (false), contains_cilk_spawn (false), single_caller (false),\n-      fp_expressions (false), estimated_stack_size (false),\n-      stack_frame_offset (false), time (0), size (0), conds (NULL),\n-      size_time_table (NULL), loop_iterations (NULL), loop_stride (NULL),\n-      array_index (NULL), growth (0), scc_no (0)\n-    {\n-    }\n-\n-  /* Record time and size under given predicates.  */\n-  void account_size_time (int, sreal, const predicate &, const predicate &);\n-\n-  /* Reset inline summary to empty state.  */\n-  void reset (struct cgraph_node *node);\n-};\n-\n-class GTY((user)) inline_summary_t: public function_summary <inline_summary *>\n-{\n-public:\n-  inline_summary_t (symbol_table *symtab, bool ggc):\n-    function_summary <inline_summary *> (symtab, ggc) {}\n-\n-  static inline_summary_t *create_ggc (symbol_table *symtab)\n-  {\n-    struct inline_summary_t *summary = new (ggc_alloc <inline_summary_t> ())\n-      inline_summary_t(symtab, true);\n-    summary->disable_insertion_hook ();\n-    return summary;\n-  }\n-\n-\n-  virtual void insert (cgraph_node *, inline_summary *);\n-  virtual void remove (cgraph_node *node, inline_summary *);\n-  virtual void duplicate (cgraph_node *src, cgraph_node *dst,\n-\t\t\t  inline_summary *src_data, inline_summary *dst_data);\n-};\n-\n-extern GTY(()) function_summary <inline_summary *> *inline_summaries;\n-\n-/* Information kept about callgraph edges.  */\n-struct ipa_call_summary\n-{\n-  class predicate *predicate;\n-  /* Vector indexed by parameters.  */\n-  vec<inline_param_summary> param;\n-  /* Estimated size and time of the call statement.  */\n-  int call_stmt_size;\n-  int call_stmt_time;\n-  /* Depth of loop nest, 0 means no nesting.  */\n-  unsigned int loop_depth;\n-  \n-  /* Keep all field empty so summary dumping works during its computation.\n-     This is useful for debugging.  */\n-  ipa_call_summary ()\n-    : predicate (NULL), param (vNULL), call_stmt_size (0), call_stmt_time (0),\n-      loop_depth (0)\n-    {\n-    }\n-\n-  /* Reset inline summary to empty state.  */\n-  void reset ();\n-};\n-\n-class ipa_call_summary_t: public call_summary <ipa_call_summary *>\n-{\n-public:\n-  ipa_call_summary_t (symbol_table *symtab, bool ggc):\n-    call_summary <ipa_call_summary *> (symtab, ggc) {}\n-\n-  /* Hook that is called by summary when an edge is duplicated.  */\n-  virtual void remove (cgraph_edge *cs, ipa_call_summary *);\n-  /* Hook that is called by summary when an edge is duplicated.  */\n-  virtual void duplicate (cgraph_edge *src, cgraph_edge *dst,\n-\t\t\t  ipa_call_summary *src_data,\n-\t\t\t  ipa_call_summary *dst_data);\n-};\n-\n-extern call_summary <ipa_call_summary *> *ipa_call_summaries;\n-\n /* Data we cache about callgraph edges during inlining to avoid expensive\n    re-computations during the greedy algorithm.  */\n struct edge_growth_cache_entry\n@@ -238,16 +33,6 @@ struct edge_growth_cache_entry\n extern vec<edge_growth_cache_entry> edge_growth_cache;\n \n /* In ipa-inline-analysis.c  */\n-void debug_inline_summary (struct cgraph_node *);\n-void dump_inline_summaries (FILE *f);\n-void dump_inline_summary (FILE *f, struct cgraph_node *node);\n-void dump_inline_hints (FILE *f, inline_hints);\n-void inline_generate_summary (void);\n-void inline_read_summary (void);\n-void inline_write_summary (void);\n-void inline_free_summary (void);\n-void inline_analyze_function (struct cgraph_node *node);\n-void initialize_inline_failed (struct cgraph_edge *);\n int estimate_size_after_inlining (struct cgraph_node *, struct cgraph_edge *);\n void estimate_ipcp_clone_size_and_time (struct cgraph_node *,\n \t\t\t\t\tvec<tree>,\n@@ -257,15 +42,13 @@ void estimate_ipcp_clone_size_and_time (struct cgraph_node *,\n \t\t\t\t        inline_hints *);\n int estimate_growth (struct cgraph_node *);\n bool growth_likely_positive (struct cgraph_node *, int);\n-void inline_merge_summary (struct cgraph_edge *edge);\n-void inline_update_overall_summary (struct cgraph_node *node);\n int do_estimate_edge_size (struct cgraph_edge *edge);\n sreal do_estimate_edge_time (struct cgraph_edge *edge);\n inline_hints do_estimate_edge_hints (struct cgraph_edge *edge);\n void initialize_growth_caches (void);\n void free_growth_caches (void);\n-void compute_inline_parameters (struct cgraph_node *, bool);\n-bool speculation_useful_p (struct cgraph_edge *e, bool anticipate_inlining);\n+\n+/* In ipa-inline.c  */\n unsigned int early_inliner (function *fun);\n bool inline_account_function_p (struct cgraph_node *node);\n \n@@ -280,7 +63,6 @@ void clone_inlined_nodes (struct cgraph_edge *e, bool, bool, int *,\n extern int ncalls_inlined;\n extern int nfunctions_inlined;\n \n-\n /* Return estimated size of the inline sequence of EDGE.  */\n \n static inline int"}, {"sha": "06bdac71166cd15ca0b7ecce95a8065ee4a6d963", "filename": "gcc/ipa-predicate.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Fipa-predicate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Fipa-predicate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-predicate.c?ref=27d020cf7db55e3cc9517a8bc79e14644f54bd5a", "patch": "@@ -28,7 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"symbol-summary.h\"\n #include \"alloc-pool.h\"\n #include \"ipa-prop.h\"\n-#include \"ipa-inline.h\"\n+#include \"ipa-fnsummary.h\"\n #include \"real.h\"\n #include \"fold-const.h\"\n #include \"tree-pretty-print.h\""}, {"sha": "66f5abaafe43f8e3e222888f9b153c126a5a07d2", "filename": "gcc/ipa-profile.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Fipa-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Fipa-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-profile.c?ref=27d020cf7db55e3cc9517a8bc79e14644f54bd5a", "patch": "@@ -64,7 +64,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"symbol-summary.h\"\n #include \"tree-vrp.h\"\n #include \"ipa-prop.h\"\n-#include \"ipa-inline.h\"\n+#include \"ipa-fnsummary.h\"\n \n /* Entry in the histogram.  */\n "}, {"sha": "2770d03b64f64da6e6ab2b4c05ad8970ff468f5f", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=27d020cf7db55e3cc9517a8bc79e14644f54bd5a", "patch": "@@ -45,7 +45,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-cfg.h\"\n #include \"tree-dfa.h\"\n #include \"tree-inline.h\"\n-#include \"ipa-inline.h\"\n+#include \"ipa-fnsummary.h\"\n #include \"gimple-pretty-print.h\"\n #include \"params.h\"\n #include \"ipa-utils.h\""}, {"sha": "872a5f2a155d2db9ff75ee9e63c45b70bb6d8178", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=27d020cf7db55e3cc9517a8bc79e14644f54bd5a", "patch": "@@ -102,7 +102,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-inline.h\"\n #include \"params.h\"\n #include \"gimple-pretty-print.h\"\n-#include \"ipa-inline.h\"\n+#include \"ipa-fnsummary.h\"\n #include \"cfgloop.h\"\n #include \"tree-chkp.h\"\n "}, {"sha": "355b957c20e9662e7f9ca7c829d01516630cd476", "filename": "gcc/ipa-utils.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Fipa-utils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Fipa-utils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-utils.c?ref=27d020cf7db55e3cc9517a8bc79e14644f54bd5a", "patch": "@@ -34,7 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"symbol-summary.h\"\n #include \"tree-vrp.h\"\n #include \"ipa-prop.h\"\n-#include \"ipa-inline.h\"\n+#include \"ipa-fnsummary.h\"\n \n /* Debugging function for postorder and inorder code. NOTE is a string\n    that is printed before the nodes are printed.  ORDER is an array of"}, {"sha": "944bf621e2d1948d6a4a5d701d2c811ad08ee481", "filename": "gcc/ipa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=27d020cf7db55e3cc9517a8bc79e14644f54bd5a", "patch": "@@ -34,7 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"symbol-summary.h\"\n #include \"tree-vrp.h\"\n #include \"ipa-prop.h\"\n-#include \"ipa-inline.h\"\n+#include \"ipa-fnsummary.h\"\n #include \"dbgcnt.h\"\n #include \"debug.h\"\n "}, {"sha": "9802d86916196b8cdeb679df7ccedbd3e90ba645", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=27d020cf7db55e3cc9517a8bc79e14644f54bd5a", "patch": "@@ -1,3 +1,8 @@\n+2017-05-22  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* lto.c: Replace ipa-inline.h by ipa-fnsummary.h\n+\t* lto-partition.c: Replace ipa-inline.h by ipa-fnsummary.h\n+\n 2017-05-01  Xi Ruoyao  <ryxi@stu.xidian.edu.cn>\n \n         PR c++/80038"}, {"sha": "27b5b8af4d546ead7a4ae8d1795fde28df9453a8", "filename": "gcc/lto/lto-partition.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Flto%2Flto-partition.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Flto%2Flto-partition.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-partition.c?ref=27d020cf7db55e3cc9517a8bc79e14644f54bd5a", "patch": "@@ -33,7 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"symbol-summary.h\"\n #include \"tree-vrp.h\"\n #include \"ipa-prop.h\"\n-#include \"ipa-inline.h\"\n+#include \"ipa-fnsummary.h\"\n #include \"lto-partition.h\"\n \n vec<ltrans_partition> ltrans_partitions;"}, {"sha": "f5dbbedafcf9aa397b22936c8a135f1fac0fe8df", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=27d020cf7db55e3cc9517a8bc79e14644f54bd5a", "patch": "@@ -46,7 +46,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"lto-partition.h\"\n #include \"context.h\"\n #include \"pass_manager.h\"\n-#include \"ipa-inline.h\"\n+#include \"ipa-fnsummary.h\"\n #include \"params.h\"\n #include \"ipa-utils.h\"\n #include \"gomp-constants.h\""}, {"sha": "e641a6d71928e997122c293defe79b0b3d465bd3", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d020cf7db55e3cc9517a8bc79e14644f54bd5a/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=27d020cf7db55e3cc9517a8bc79e14644f54bd5a", "patch": "@@ -101,7 +101,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"params.h\"\n #include \"dbgcnt.h\"\n #include \"tree-inline.h\"\n-#include \"ipa-inline.h\"\n+#include \"ipa-fnsummary.h\"\n #include \"ipa-utils.h\"\n #include \"builtins.h\"\n "}]}