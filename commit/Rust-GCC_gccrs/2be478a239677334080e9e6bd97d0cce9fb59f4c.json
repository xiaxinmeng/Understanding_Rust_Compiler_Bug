{"sha": "2be478a239677334080e9e6bd97d0cce9fb59f4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJlNDc4YTIzOTY3NzMzNDA4MGU5ZTZiZDk3ZDBjY2U5ZmI1OWY0Yw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2011-03-23T19:52:13Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2011-03-23T19:52:13Z"}, "message": "re PR other/48179 (Reference mismatch in documentation chapter 6)\n\n2011-03-23  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\tPR other/48179\n\tPR other/48221\n\tPR other/48234\n\t* doc/extend.texi (Alignment): Move section to match order in TOC.\n\t* doc/invoke.texi (i386 and x86-64 Windows Options): Likewise.\n\t(Warning Options): Adjust -Wno-cpp summary and remove stray backslash.\n\nFrom-SVN: r171359", "tree": {"sha": "bd1656610702b1f48ecb5c4eb2b0d38544a9d2ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd1656610702b1f48ecb5c4eb2b0d38544a9d2ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2be478a239677334080e9e6bd97d0cce9fb59f4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2be478a239677334080e9e6bd97d0cce9fb59f4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2be478a239677334080e9e6bd97d0cce9fb59f4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2be478a239677334080e9e6bd97d0cce9fb59f4c/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c617be487cd7b2d7597330a52ff3a020dc11076", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c617be487cd7b2d7597330a52ff3a020dc11076", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c617be487cd7b2d7597330a52ff3a020dc11076"}], "stats": {"total": 239, "additions": 124, "deletions": 115}, "files": [{"sha": "a7bed9093ae3ab7ebb35c8cd79dd6a45707bb048", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be478a239677334080e9e6bd97d0cce9fb59f4c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be478a239677334080e9e6bd97d0cce9fb59f4c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2be478a239677334080e9e6bd97d0cce9fb59f4c", "patch": "@@ -1,3 +1,12 @@\n+2011-03-23  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tPR other/48179\n+\tPR other/48221\n+\tPR other/48234\n+\t* doc/extend.texi (Alignment): Move section to match order in TOC.\n+\t* doc/invoke.texi (i386 and x86-64 Windows Options): Likewise.\n+\t(Warning Options): Adjust -Wno-cpp summary and remove stray backslash.\n+\n 2011-03-23  Jeff Law  <law@redhat.com>\n \n \t* cfg.c (redirect_edge_succ_nodup): Duplicate the varm map"}, {"sha": "0728b501299fdbf4947c34e0c2ab8975db12d0a1", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be478a239677334080e9e6bd97d0cce9fb59f4c/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be478a239677334080e9e6bd97d0cce9fb59f4c/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=2be478a239677334080e9e6bd97d0cce9fb59f4c", "patch": "@@ -4180,42 +4180,6 @@ machines, typically because the target assembler does not allow them.\n You can use the sequence @samp{\\e} in a string or character constant to\n stand for the ASCII character @key{ESC}.\n \n-@node Alignment\n-@section Inquiring on Alignment of Types or Variables\n-@cindex alignment\n-@cindex type alignment\n-@cindex variable alignment\n-\n-The keyword @code{__alignof__} allows you to inquire about how an object\n-is aligned, or the minimum alignment usually required by a type.  Its\n-syntax is just like @code{sizeof}.\n-\n-For example, if the target machine requires a @code{double} value to be\n-aligned on an 8-byte boundary, then @code{__alignof__ (double)} is 8.\n-This is true on many RISC machines.  On more traditional machine\n-designs, @code{__alignof__ (double)} is 4 or even 2.\n-\n-Some machines never actually require alignment; they allow reference to any\n-data type even at an odd address.  For these machines, @code{__alignof__}\n-reports the smallest alignment that GCC will give the data type, usually as\n-mandated by the target ABI.\n-\n-If the operand of @code{__alignof__} is an lvalue rather than a type,\n-its value is the required alignment for its type, taking into account\n-any minimum alignment specified with GCC's @code{__attribute__}\n-extension (@pxref{Variable Attributes}).  For example, after this\n-declaration:\n-\n-@smallexample\n-struct foo @{ int x; char y; @} foo1;\n-@end smallexample\n-\n-@noindent\n-the value of @code{__alignof__ (foo1.y)} is 1, even though its actual\n-alignment is probably 2 or 4, the same as @code{__alignof__ (int)}.\n-\n-It is an error to ask for the alignment of an incomplete type.\n-\n @node Variable Attributes\n @section Specifying Attributes of Variables\n @cindex attribute of variables\n@@ -5224,6 +5188,42 @@ allows one to declare vector data types supported by the Sony/Toshiba/IBM SPU\n Language Extensions Specification.  It is intended to support the\n @code{__vector} keyword.\n \n+@node Alignment\n+@section Inquiring on Alignment of Types or Variables\n+@cindex alignment\n+@cindex type alignment\n+@cindex variable alignment\n+\n+The keyword @code{__alignof__} allows you to inquire about how an object\n+is aligned, or the minimum alignment usually required by a type.  Its\n+syntax is just like @code{sizeof}.\n+\n+For example, if the target machine requires a @code{double} value to be\n+aligned on an 8-byte boundary, then @code{__alignof__ (double)} is 8.\n+This is true on many RISC machines.  On more traditional machine\n+designs, @code{__alignof__ (double)} is 4 or even 2.\n+\n+Some machines never actually require alignment; they allow reference to any\n+data type even at an odd address.  For these machines, @code{__alignof__}\n+reports the smallest alignment that GCC will give the data type, usually as\n+mandated by the target ABI.\n+\n+If the operand of @code{__alignof__} is an lvalue rather than a type,\n+its value is the required alignment for its type, taking into account\n+any minimum alignment specified with GCC's @code{__attribute__}\n+extension (@pxref{Variable Attributes}).  For example, after this\n+declaration:\n+\n+@smallexample\n+struct foo @{ int x; char y; @} foo1;\n+@end smallexample\n+\n+@noindent\n+the value of @code{__alignof__ (foo1.y)} is 1, even though its actual\n+alignment is probably 2 or 4, the same as @code{__alignof__ (int)}.\n+\n+It is an error to ask for the alignment of an incomplete type.\n+\n \n @node Inline\n @section An Inline Function is As Fast As a Macro"}, {"sha": "2f04bb7518deac6a4a686f7dbc6989c732d4854d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 79, "deletions": 79, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be478a239677334080e9e6bd97d0cce9fb59f4c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be478a239677334080e9e6bd97d0cce9fb59f4c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=2be478a239677334080e9e6bd97d0cce9fb59f4c", "patch": "@@ -237,7 +237,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wno-attributes -Wno-builtin-macro-redefined @gol\n -Wc++-compat -Wc++0x-compat -Wcast-align  -Wcast-qual  @gol\n -Wchar-subscripts -Wclobbered  -Wcomment @gol\n--Wconversion  -Wcoverage-mismatch  -Wcpp  -Wno-deprecated  @gol\n+-Wconversion  -Wcoverage-mismatch  -Wno-cpp  -Wno-deprecated  @gol\n -Wno-deprecated-declarations -Wdisabled-optimization  @gol\n -Wno-div-by-zero -Wdouble-promotion -Wempty-body  -Wenum-compare @gol\n -Wno-endif-labels -Werror  -Werror=* @gol\n@@ -604,6 +604,11 @@ Objective-C and Objective-C++ Dialects}.\n -m32  -m64 -mlarge-data-threshold=@var{num} @gol\n -msse2avx -mfentry -m8bit-idiv}\n \n+@emph{i386 and x86-64 Windows Options}\n+@gccoptlist{-mconsole -mcygwin -mno-cygwin -mdll @gol\n+-mnop-fun-dllimport -mthread @gol\n+-municode -mwin32 -mwindows -fno-set-stack-executable}\n+\n @emph{IA-64 Options}\n @gccoptlist{-mbig-endian  -mlittle-endian  -mgnu-as  -mgnu-ld  -mno-pic @gol\n -mvolatile-asm-stop  -mregister-names  -msdata -mno-sdata @gol\n@@ -892,11 +897,6 @@ See RS/6000 and PowerPC Options.\n @emph{x86-64 Options}\n See i386 and x86-64 Options.\n \n-@emph{i386 and x86-64 Windows Options}\n-@gccoptlist{-mconsole -mcygwin -mno-cygwin -mdll @gol\n--mnop-fun-dllimport -mthread @gol\n--municode -mwin32 -mwindows -fno-set-stack-executable}\n-\n @emph{Xstormy16 Options}\n @gccoptlist{-msim}\n \n@@ -3038,7 +3038,7 @@ Warn whenever a comment-start sequence @samp{/*} appears in a @samp{/*}\n comment, or whenever a Backslash-Newline appears in a @samp{//} comment.\n This warning is enabled by @option{-Wall}.\n \n-@item -Wno-cpp \\\n+@item -Wno-cpp\n @r{(C, Objective-C, C++, Objective-C++ and Fortran only)}\n \n Suppress warning messages emitted by @code{#warning} directives.\n@@ -12717,6 +12717,78 @@ Generate code for the large model: This model makes no assumptions\n about addresses and sizes of sections.\n @end table\n \n+@node i386 and x86-64 Windows Options\n+@subsection i386 and x86-64 Windows Options\n+@cindex i386 and x86-64 Windows Options\n+\n+These additional options are available for Windows targets:\n+\n+@table @gcctabopt\n+@item -mconsole\n+@opindex mconsole\n+This option is available for Cygwin and MinGW targets.  It\n+specifies that a console application is to be generated, by\n+instructing the linker to set the PE header subsystem type\n+required for console applications.\n+This is the default behavior for Cygwin and MinGW targets.\n+\n+@item -mdll\n+@opindex mdll\n+This option is available for Cygwin and MinGW targets.  It\n+specifies that a DLL - a dynamic link library - is to be\n+generated, enabling the selection of the required runtime\n+startup object and entry point.\n+\n+@item -mnop-fun-dllimport\n+@opindex mnop-fun-dllimport\n+This option is available for Cygwin and MinGW targets.  It\n+specifies that the dllimport attribute should be ignored.\n+\n+@item -mthread\n+@opindex mthread\n+This option is available for MinGW targets. It specifies\n+that MinGW-specific thread support is to be used.\n+\n+@item -municode\n+@opindex municode\n+This option is available for mingw-w64 targets.  It specifies\n+that the UNICODE macro is getting pre-defined and that the\n+unicode capable runtime startup code is chosen.\n+\n+@item -mwin32\n+@opindex mwin32\n+This option is available for Cygwin and MinGW targets.  It\n+specifies that the typical Windows pre-defined macros are to\n+be set in the pre-processor, but does not influence the choice\n+of runtime library/startup code.\n+\n+@item -mwindows\n+@opindex mwindows\n+This option is available for Cygwin and MinGW targets.  It\n+specifies that a GUI application is to be generated by\n+instructing the linker to set the PE header subsystem type\n+appropriately.\n+\n+@item -fno-set-stack-executable\n+@opindex fno-set-stack-executable\n+This option is available for MinGW targets. It specifies that\n+the executable flag for stack used by nested functions isn't\n+set. This is necessary for binaries running in kernel mode of\n+Windows, as there the user32 API, which is used to set executable\n+privileges, isn't available.\n+\n+@item -mpe-aligned-commons\n+@opindex mpe-aligned-commons\n+This option is available for Cygwin and MinGW targets.  It\n+specifies that the GNU extension to the PE file format that\n+permits the correct alignment of COMMON variables should be\n+used when generating code.  It will be enabled by default if\n+GCC detects that the target assembler found during configuration\n+supports the feature.\n+@end table\n+\n+See also under @ref{i386 and x86-64 Options} for standard options.\n+\n @node IA-64 Options\n @subsection IA-64 Options\n @cindex IA-64 Options\n@@ -17382,78 +17454,6 @@ is defined for compatibility with Diab.\n \n These are listed under @xref{i386 and x86-64 Options}.\n \n-@node i386 and x86-64 Windows Options\n-@subsection i386 and x86-64 Windows Options\n-@cindex i386 and x86-64 Windows Options\n-\n-These additional options are available for Windows targets:\n-\n-@table @gcctabopt\n-@item -mconsole\n-@opindex mconsole\n-This option is available for Cygwin and MinGW targets.  It\n-specifies that a console application is to be generated, by\n-instructing the linker to set the PE header subsystem type\n-required for console applications.\n-This is the default behavior for Cygwin and MinGW targets.\n-\n-@item -mdll\n-@opindex mdll\n-This option is available for Cygwin and MinGW targets.  It\n-specifies that a DLL - a dynamic link library - is to be\n-generated, enabling the selection of the required runtime\n-startup object and entry point.\n-\n-@item -mnop-fun-dllimport\n-@opindex mnop-fun-dllimport\n-This option is available for Cygwin and MinGW targets.  It\n-specifies that the dllimport attribute should be ignored.\n-\n-@item -mthread\n-@opindex mthread\n-This option is available for MinGW targets. It specifies\n-that MinGW-specific thread support is to be used.\n-\n-@item -municode\n-@opindex municode\n-This option is available for mingw-w64 targets.  It specifies\n-that the UNICODE macro is getting pre-defined and that the\n-unicode capable runtime startup code is chosen.\n-\n-@item -mwin32\n-@opindex mwin32\n-This option is available for Cygwin and MinGW targets.  It\n-specifies that the typical Windows pre-defined macros are to\n-be set in the pre-processor, but does not influence the choice\n-of runtime library/startup code.\n-\n-@item -mwindows\n-@opindex mwindows\n-This option is available for Cygwin and MinGW targets.  It\n-specifies that a GUI application is to be generated by\n-instructing the linker to set the PE header subsystem type\n-appropriately.\n-\n-@item -fno-set-stack-executable\n-@opindex fno-set-stack-executable\n-This option is available for MinGW targets. It specifies that\n-the executable flag for stack used by nested functions isn't\n-set. This is necessary for binaries running in kernel mode of\n-Windows, as there the user32 API, which is used to set executable\n-privileges, isn't available.\n-\n-@item -mpe-aligned-commons\n-@opindex mpe-aligned-commons\n-This option is available for Cygwin and MinGW targets.  It\n-specifies that the GNU extension to the PE file format that\n-permits the correct alignment of COMMON variables should be\n-used when generating code.  It will be enabled by default if\n-GCC detects that the target assembler found during configuration\n-supports the feature.\n-@end table\n-\n-See also under @ref{i386 and x86-64 Options} for standard options.\n-\n @node Xstormy16 Options\n @subsection Xstormy16 Options\n @cindex Xstormy16 Options"}]}