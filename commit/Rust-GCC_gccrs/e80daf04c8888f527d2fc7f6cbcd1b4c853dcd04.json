{"sha": "e80daf04c8888f527d2fc7f6cbcd1b4c853dcd04", "node_id": "C_kwDOANBUbNoAKGU4MGRhZjA0Yzg4ODhmNTI3ZDJmYzdmNmNiY2QxYjRjODUzZGNkMDQ", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-07-12T11:59:25Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-07-12T11:59:25Z"}, "message": "aarch64: Remove redundant builtins code\n\naarch64_builtin_vectorized_function handles some built-in functions\nthat already have equivalent internal functions.  This seems to be\nredundant now, since the target builtins that it chooses are mapped\nto the same optab patterns as the internal functions.\n\ngcc/\n\t* config/aarch64/aarch64-builtins.cc\n\t(aarch64_builtin_vectorized_function): Remove handling of\n\tfloor, ceil, trunc, round, nearbyint, sqrt, clz and ctz.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/vect_unary_1.c: New test.", "tree": {"sha": "dfc7c76d9605682be06afdad50dc5f18f224938e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfc7c76d9605682be06afdad50dc5f18f224938e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e80daf04c8888f527d2fc7f6cbcd1b4c853dcd04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e80daf04c8888f527d2fc7f6cbcd1b4c853dcd04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e80daf04c8888f527d2fc7f6cbcd1b4c853dcd04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e80daf04c8888f527d2fc7f6cbcd1b4c853dcd04/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5493ee7145a05dc32bc6d802da2f8237293012d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5493ee7145a05dc32bc6d802da2f8237293012d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5493ee7145a05dc32bc6d802da2f8237293012d3"}], "stats": {"total": 218, "additions": 186, "deletions": 32}, "files": [{"sha": "a486321e10fcdb027771011f30c467c6e3c7a5ec", "filename": "gcc/config/aarch64/aarch64-builtins.cc", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80daf04c8888f527d2fc7f6cbcd1b4c853dcd04/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80daf04c8888f527d2fc7f6cbcd1b4c853dcd04/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc?ref=e80daf04c8888f527d2fc7f6cbcd1b4c853dcd04", "patch": "@@ -2581,38 +2581,6 @@ aarch64_builtin_vectorized_function (unsigned int fn, tree type_out,\n   switch (fn)\n     {\n #undef AARCH64_CHECK_BUILTIN_MODE\n-#define AARCH64_CHECK_BUILTIN_MODE(C, N) \\\n-  (out_mode == V##C##N##Fmode && in_mode == V##C##N##Fmode)\n-    CASE_CFN_FLOOR:\n-      return AARCH64_FIND_FRINT_VARIANT (floor);\n-    CASE_CFN_CEIL:\n-      return AARCH64_FIND_FRINT_VARIANT (ceil);\n-    CASE_CFN_TRUNC:\n-      return AARCH64_FIND_FRINT_VARIANT (btrunc);\n-    CASE_CFN_ROUND:\n-      return AARCH64_FIND_FRINT_VARIANT (round);\n-    CASE_CFN_NEARBYINT:\n-      return AARCH64_FIND_FRINT_VARIANT (nearbyint);\n-    CASE_CFN_SQRT:\n-      return AARCH64_FIND_FRINT_VARIANT (sqrt);\n-#undef AARCH64_CHECK_BUILTIN_MODE\n-#define AARCH64_CHECK_BUILTIN_MODE(C, N) \\\n-  (out_mode == V##C##SImode && in_mode == V##C##N##Imode)\n-    CASE_CFN_CLZ:\n-      {\n-\tif (AARCH64_CHECK_BUILTIN_MODE (4, S))\n-\t  return aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_UNOP_clzv4si];\n-\treturn NULL_TREE;\n-      }\n-    CASE_CFN_CTZ:\n-      {\n-\tif (AARCH64_CHECK_BUILTIN_MODE (2, S))\n-\t  return aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_UNOP_ctzv2si];\n-\telse if (AARCH64_CHECK_BUILTIN_MODE (4, S))\n-\t  return aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_UNOP_ctzv4si];\n-\treturn NULL_TREE;\n-      }\n-#undef AARCH64_CHECK_BUILTIN_MODE\n #define AARCH64_CHECK_BUILTIN_MODE(C, N) \\\n   (out_mode == V##C##N##Imode && in_mode == V##C##N##Fmode)\n     CASE_CFN_IFLOOR:"}, {"sha": "8516808becffad60165473dc43e2a76860ff6a9b", "filename": "gcc/testsuite/gcc.target/aarch64/vect_unary_1.c", "status": "added", "additions": 186, "deletions": 0, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80daf04c8888f527d2fc7f6cbcd1b4c853dcd04/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_unary_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80daf04c8888f527d2fc7f6cbcd1b4c853dcd04/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_unary_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_unary_1.c?ref=e80daf04c8888f527d2fc7f6cbcd1b4c853dcd04", "patch": "@@ -0,0 +1,186 @@\n+/* { dg-options \"-O3 --save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */\n+\n+#include <stdint.h>\n+\n+#define TEST2(OUT, NAME, IN)\t\t\t\t\t\t\\\n+OUT __attribute__((vector_size(sizeof(OUT) * 2)))\t\t\t\\\n+test2_##OUT##_##NAME##_##IN (float dummy,\t\t\t\t\\\n+\t\t\t     IN __attribute__((vector_size(sizeof(IN) * 2))) y) \\\n+{\t\t\t\t\t\t\t\t\t\\\n+  OUT __attribute__((vector_size(sizeof(OUT) * 2))) x;\t\t\t\\\n+  x[0] = __builtin_##NAME (y[0]);\t\t\t\t\t\\\n+  x[1] = __builtin_##NAME (y[1]);\t\t\t\t\t\\\n+  return x;\t\t\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+\n+#define TEST4(OUT, NAME, IN)\t\t\t\t\t\t\\\n+OUT __attribute__((vector_size(16)))\t\t\t\t\t\\\n+test4_##OUT##_##NAME##_##IN (float dummy,\t\t\t\t\\\n+\t\t\t     IN __attribute__((vector_size(16))) y)\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  OUT __attribute__((vector_size(16))) x;\t\t\t\t\\\n+  x[0] = __builtin_##NAME (y[0]);\t\t\t\t\t\\\n+  x[1] = __builtin_##NAME (y[1]);\t\t\t\t\t\\\n+  x[2] = __builtin_##NAME (y[2]);\t\t\t\t\t\\\n+  x[3] = __builtin_##NAME (y[3]);\t\t\t\t\t\\\n+  return x;\t\t\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+\n+/*\n+** test2_float_truncf_float:\n+**\tfrintz\tv0.2s, v1.2s\n+**\tret\n+*/\n+TEST2 (float, truncf, float)\n+\n+/*\n+** test2_double_trunc_double:\n+**\tfrintz\tv0.2d, v1.2d\n+**\tret\n+*/\n+TEST2 (double, trunc, double)\n+\n+/*\n+** test4_float_truncf_float:\n+**\tfrintz\tv0.4s, v1.4s\n+**\tret\n+*/\n+TEST4 (float, truncf, float)\n+\n+/*\n+** test2_float_roundf_float:\n+**\tfrinta\tv0.2s, v1.2s\n+**\tret\n+*/\n+TEST2 (float, roundf, float)\n+\n+/*\n+** test2_double_round_double:\n+**\tfrinta\tv0.2d, v1.2d\n+**\tret\n+*/\n+TEST2 (double, round, double)\n+\n+/*\n+** test4_float_roundf_float:\n+**\tfrinta\tv0.4s, v1.4s\n+**\tret\n+*/\n+TEST4 (float, roundf, float)\n+\n+/*\n+** test2_float_nearbyintf_float:\n+**\tfrinti\tv0.2s, v1.2s\n+**\tret\n+*/\n+TEST2 (float, nearbyintf, float)\n+\n+/*\n+** test2_double_nearbyint_double:\n+**\tfrinti\tv0.2d, v1.2d\n+**\tret\n+*/\n+TEST2 (double, nearbyint, double)\n+\n+/*\n+** test4_float_nearbyintf_float:\n+**\tfrinti\tv0.4s, v1.4s\n+**\tret\n+*/\n+TEST4 (float, nearbyintf, float)\n+\n+/*\n+** test2_float_floorf_float:\n+**\tfrintm\tv0.2s, v1.2s\n+**\tret\n+*/\n+TEST2 (float, floorf, float)\n+\n+/*\n+** test2_double_floor_double:\n+**\tfrintm\tv0.2d, v1.2d\n+**\tret\n+*/\n+TEST2 (double, floor, double)\n+\n+/*\n+** test4_float_floorf_float:\n+**\tfrintm\tv0.4s, v1.4s\n+**\tret\n+*/\n+TEST4 (float, floorf, float)\n+\n+/*\n+** test2_float_ceilf_float:\n+**\tfrintp\tv0.2s, v1.2s\n+**\tret\n+*/\n+TEST2 (float, ceilf, float)\n+\n+/*\n+** test2_double_ceil_double:\n+**\tfrintp\tv0.2d, v1.2d\n+**\tret\n+*/\n+TEST2 (double, ceil, double)\n+\n+/*\n+** test4_float_ceilf_float:\n+**\tfrintp\tv0.4s, v1.4s\n+**\tret\n+*/\n+TEST4 (float, ceilf, float)\n+\n+/*\n+** test2_float_rintf_float:\n+**\tfrintx\tv0.2s, v1.2s\n+**\tret\n+*/\n+TEST2 (float, rintf, float)\n+\n+/*\n+** test2_double_rint_double:\n+**\tfrintx\tv0.2d, v1.2d\n+**\tret\n+*/\n+TEST2 (double, rint, double)\n+\n+/*\n+** test4_float_rintf_float:\n+**\tfrintx\tv0.4s, v1.4s\n+**\tret\n+*/\n+TEST4 (float, rintf, float)\n+\n+/*\n+** test2_int_clz_int:\n+**\tclz\tv0.2s, v1.2s\n+**\tret\n+*/\n+TEST2 (int, clz, int)\n+\n+/*\n+** test4_int_clz_int:\n+**\tclz\tv0.4s, v1.4s\n+**\tret\n+*/\n+TEST4 (int, clz, int)\n+\n+/*\n+** test2_int_ctz_int:\n+**\trev32\t(v[0-9]+).8b, v1.8b\n+**\trbit\t(v[0-9]+).8b, \\1.8b\n+**\tclz\tv0.2s, \\2.2s\n+**\tret\n+*/\n+TEST2 (int, ctz, int)\n+\n+/*\n+** test4_int_ctz_int:\n+**\trev32\t(v[0-9]+).16b, v1.16b\n+**\trbit\t(v[0-9]+).16b, \\1.16b\n+**\tclz\tv0.4s, \\2.4s\n+**\tret\n+*/\n+TEST4 (int, ctz, int)"}]}