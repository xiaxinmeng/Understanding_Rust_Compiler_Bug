{"sha": "370298f493020eeff48bc2e56463c1097ed67b1d", "node_id": "C_kwDOANBUbNoAKDM3MDI5OGY0OTMwMjBlZWZmNDhiYzJlNTY0NjNjMTA5N2VkNjdiMWQ", "commit": {"author": {"name": "Gaius Mulley", "email": "gaiusmod2@gmail.com", "date": "2023-03-13T23:03:24Z"}, "committer": {"name": "Gaius Mulley", "email": "gaiusmod2@gmail.com", "date": "2023-03-13T23:03:24Z"}, "message": "PR 109103 Modula2 Missing function internal_error_at\n\nm2expr.cc should call to internal_error_at, but that function\ndoes not exist yet.  For symmetry with the other error reporting\nfunctions, it should be added.  This patch provides this function\nand also corrects obvious bool/int parameter mismatches in\nm2options.h and m2expr.h.\n\ngcc/m2/ChangeLog:\n\n\tPR modula2/109103\n\t* gm2-compiler/M2ALU.def (PushString): New parameter issueError.\n\t* gm2-compiler/M2ALU.mod (PushString): New parameter issueError.\n\t* gm2-compiler/SymbolTable.mod (PushString): New parameter issueError.\n\t* gm2-gcc/m2decl.cc (m2decl_DetermineSizeOfConstant): Pass\n\tlocation to interpret_m2_integer.\n\t(m2decl_BuildConstLiteralNumber): New parameter issueError.\n\t* gm2-gcc/m2expr.cc (m2expr_IsTrue): Replace int with bool.\n\t(m2expr_IsFalse): Replace int with bool.\n\t(m2expr_AreConstantsEqual): Replace int with bool.\n\t(m2expr_BuildBinaryForeachWordDo): Call m2linemap_internal_error_at.\n\t(append_digit): Ditto.\n\t(m2expr_interpret_integer): Add location parameter.\n\t(append_m2_digit): Call m2linemap_internal_error_at.\n\t(m2expr_interpret_m2_integer): Add location parameter.\n\t(m2expr_GetSizeOf): Replace sizeof with SIZE in error message.\n\t* gm2-gcc/m2expr.h (m2expr_AreRealOrComplexConstantsEqual):\n\tReplace int with bool.\n\t(m2expr_AreConstantsEqual): Ditto.\n\t(m2expr_IsFalse): Ditto.\n\t(m2expr_IsTrue): Ditto.\n\t(m2expr_interpret_integer): Add location parameter.\n\t(m2expr_interpret_m2_integer): Add location parameter.\n\t* gm2-gcc/m2linemap.cc (mformat_value): New function.\n\t(expand_format): New function.\n\t(expand_message): New function.\n\t(gm2_internal_error_at): New function.\n\t(m2linemap_internal_error_at): New function.\n\t* gm2-gcc/m2linemap.h (m2linemap_internal_error_at): New function.\n\t* gm2-gcc/m2options.h (M2Options_SetISO): Replace int with bool.\n\t(M2Options_SetPIM): Ditto.\n\t(M2Options_SetPIM2): Ditto.\n\t(M2Options_SetPIM3): Ditto.\n\t(M2Options_SetPIM4): Ditto.\n\t(M2Options_SetFloatValueCheck): Ditto.\n\t(M2Options_SetWholeValueCheck): Ditto.\n\t(M2Options_GetISO): Ditto.\n\t(M2Options_GetPIM): Ditto.\n\t(M2Options_GetPIM2): Ditto.\n\t(M2Options_GetPIM3): Ditto.\n\t(M2Options_GetPIM4): Ditto.\n\t(M2Options_GetPositiveModFloor): Ditto.\n\t(M2Options_GetFloatValueCheck): Ditto.\n\t(M2Options_GetWholeValueCheck): Ditto.\n\t(M2Options_Setc): Ditto.\n\t(M2Options_Getc): Ditto.\n\t(M2Options_SetPPOnly): Ditto.\n\t(M2Options_GetPPOnly): Ditto.\n\t(M2Options_SetUselist): Ditto.\n\t(M2Options_SetAutoInit): Ditto.\n\t(M2Options_SetPositiveModFloor): Ditto.\n\t(M2Options_SetNilCheck): Ditto.\n\t(M2Options_SetWholeDiv): Ditto.\n\t(M2Options_SetIndex): Ditto.\n\t(M2Options_SetRange): Ditto.\n\t(M2Options_SetReturnCheck): Ditto.\n\t(M2Options_SetCaseCheck): Ditto.\n\t(M2Options_SetCheckAll): Ditto.\n\t(M2Options_SetExceptions): Ditto.\n\t(M2Options_SetStyle): Ditto.\n\t(M2Options_SetPedantic): Ditto.\n\t(M2Options_SetPedanticParamNames): Ditto.\n\t(M2Options_SetPedanticCast): Ditto.\n\t(M2Options_SetExtendedOpaque): Ditto.\n\t(M2Options_SetVerboseUnbounded): Ditto.\n\t(M2Options_SetXCode): Ditto.\n\t(M2Options_SetCompilerDebugging): Ditto.\n\t(M2Options_SetQuadDebugging): Ditto.\n\t(M2Options_SetDebugTraceQuad): Ditto.\n\t(M2Options_SetDebugTraceAPI): Ditto.\n\t(M2Options_SetSources): Ditto.\n\t(M2Options_SetUnboundedByReference): Ditto.\n\t(M2Options_SetDumpSystemExports): Ditto.\n\t(M2Options_SetOptimizing): Ditto.\n\t(M2Options_SetQuiet): Ditto.\n\t(M2Options_SetCC1Quiet): Ditto.\n\t(M2Options_SetCpp): Ditto.\n\t(M2Options_SetSwig): Ditto.\n\t(M2Options_SetWholeProgram): Ditto.\n\t(M2Options_SetDebugFunctionLineNumbers): Ditto.\n\t(M2Options_SetGenerateStatementNote): Ditto.\n\t(M2Options_GetCpp): Ditto.\n\t(M2Options_GetM2g): Ditto.\n\t(M2Options_SetM2g): Ditto.\n\t(M2Options_SetLowerCaseKeywords): Ditto.\n\t(M2Options_SetVerbose): Ditto.\n\t(M2Options_SetUnusedVariableChecking): Ditto.\n\t(M2Options_SetUnusedParameterChecking): Ditto.\n\t(M2Options_SetStrictTypeChecking): Ditto.\n\t(M2Options_SetWall): Ditto.\n\t(M2Options_SetSaveTemps): Ditto.\n\t(M2Options_GetSaveTemps): Ditto.\n\t(M2Options_SetScaffoldStatic): Ditto.\n\t(M2Options_SetScaffoldDynamic): Ditto.\n\t(M2Options_SetScaffoldMain): Ditto.\n\t(M2Options_SetGenModuleList): Ditto.\n\t(M2Options_SetShared): Ditto.\n\t* gm2-libs-ch/M2LINK.c: Ditto.\n\t* gm2-libs-ch/m2rts.h (M2RTS_RequestDependant): Replace\n\tconst char * with const void *.\n\t(M2RTS_RegisterModule): Ditto.\n\t(M2RTS_ConstructModules): Ditto.\n\t* gm2-gcc/m2decl.def (DetermineSizeOfConstant): New parameter\n\tissueError.\n\t* gm2-gcc/m2decl.h (DetermineSizeOfConstant): New parameter\n\tissueError.\n\ngcc/testsuite/ChangeLog:\n\n\t* gm2/pim/fail/largeconst.mod: New test.\n\nSigned-off-by: Gaius Mulley <gaiusmod2@gmail.com>", "tree": {"sha": "5c621f17aea822204f2ba717ebe7a49649848bf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c621f17aea822204f2ba717ebe7a49649848bf8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/370298f493020eeff48bc2e56463c1097ed67b1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/370298f493020eeff48bc2e56463c1097ed67b1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/370298f493020eeff48bc2e56463c1097ed67b1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/370298f493020eeff48bc2e56463c1097ed67b1d/comments", "author": null, "committer": null, "parents": [{"sha": "eb01d03f06cc36efa38ac9f80ad686d368920c41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb01d03f06cc36efa38ac9f80ad686d368920c41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb01d03f06cc36efa38ac9f80ad686d368920c41"}], "stats": {"total": 416, "additions": 286, "deletions": 130}, "files": [{"sha": "e4222114e96f561cccc79dfc8ed051acb98438c8", "filename": "gcc/m2/gm2-compiler/M2ALU.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/370298f493020eeff48bc2e56463c1097ed67b1d/gcc%2Fm2%2Fgm2-compiler%2FM2ALU.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/370298f493020eeff48bc2e56463c1097ed67b1d/gcc%2Fm2%2Fgm2-compiler%2FM2ALU.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-compiler%2FM2ALU.def?ref=370298f493020eeff48bc2e56463c1097ed67b1d", "patch": "@@ -264,7 +264,7 @@ PROCEDURE PushChar (c: CHAR) ;\n    PushString - pushes the numerical value of the string onto the stack.\n *)\n \n-PROCEDURE PushString (tokenno: CARDINAL; s: Name) ;\n+PROCEDURE PushString (tokenno: CARDINAL; s: Name; issueError: BOOLEAN) ;\n \n \n (*"}, {"sha": "324d6a71b391694670853f904fbdd18a3b2da56b", "filename": "gcc/m2/gm2-compiler/M2ALU.mod", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/370298f493020eeff48bc2e56463c1097ed67b1d/gcc%2Fm2%2Fgm2-compiler%2FM2ALU.mod", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/370298f493020eeff48bc2e56463c1097ed67b1d/gcc%2Fm2%2Fgm2-compiler%2FM2ALU.mod", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-compiler%2FM2ALU.mod?ref=370298f493020eeff48bc2e56463c1097ed67b1d", "patch": "@@ -1171,7 +1171,7 @@ END IsReal ;\n    PushString - pushes the numerical value of the string onto the stack.\n *)\n \n-PROCEDURE PushString (tokenno: CARDINAL; s: Name) ;\n+PROCEDURE PushString (tokenno: CARDINAL; s: Name; issueError: BOOLEAN) ;\n VAR\n    ch      : CHAR ;\n    a, b    : DynamicStrings.String ;\n@@ -1192,26 +1192,27 @@ BEGIN\n            b := DynamicStrings.Slice (a, 0, -1) ;\n            PushIntegerTree (BuildConstLiteralNumber (location,\n                                                      DynamicStrings.string (b),\n-                                                     16)) |\n+                                                     16, issueError)) |\n       'A': (* binary *)\n            b := DynamicStrings.Slice (a, 0, -1) ;\n            PushIntegerTree (BuildConstLiteralNumber (location,\n                                                      DynamicStrings.string (b),\n-                                                     2)) |\n+                                                     2, issueError)) |\n       'C', (* --fixme-- question:\n               should we type this as a char rather than an int? *)\n       'B': (* octal *)\n            b := DynamicStrings.Slice (a, 0, -1) ;\n            PushIntegerTree (BuildConstLiteralNumber (location,\n                                                      DynamicStrings.string (b),\n-                                                     8))\n+                                                     8, issueError))\n \n       ELSE\n          IF IsReal (a)\n          THEN\n             PushRealTree (RealToTree (KeyToCharStar (s)))\n          ELSE\n-            PushIntegerTree (BuildConstLiteralNumber (location, KeyToCharStar (s), 10))\n+            PushIntegerTree (BuildConstLiteralNumber (location, KeyToCharStar (s),\n+                                                      10, issueError))\n          END\n       END\n    ELSE"}, {"sha": "2a68636a0bc41a0357e686fb45f493562c8bb430", "filename": "gcc/m2/gm2-compiler/SymbolTable.mod", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/370298f493020eeff48bc2e56463c1097ed67b1d/gcc%2Fm2%2Fgm2-compiler%2FSymbolTable.mod", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/370298f493020eeff48bc2e56463c1097ed67b1d/gcc%2Fm2%2Fgm2-compiler%2FSymbolTable.mod", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-compiler%2FSymbolTable.mod?ref=370298f493020eeff48bc2e56463c1097ed67b1d", "patch": "@@ -4758,12 +4758,17 @@ END MakeConstant ;\n \n PROCEDURE MakeConstLit (tok: CARDINAL; constName: Name; constType: CARDINAL) : CARDINAL ;\n VAR\n-   pSym: PtrToSymbol ;\n-   Sym : CARDINAL ;\n+   pSym      : PtrToSymbol ;\n+   Sym       : CARDINAL ;\n+   issueError,\n+   overflow  : BOOLEAN ;\n BEGIN\n+   issueError := TRUE ;\n+   overflow := FALSE ;\n    IF constType=NulSym\n    THEN\n-      constType := GetConstLitType (tok, constName)\n+      constType := GetConstLitType (tok, constName, overflow, issueError) ;\n+      issueError := NOT overflow\n    END ;\n    NewSym (Sym) ;\n    pSym := GetPsym (Sym) ;\n@@ -4773,7 +4778,7 @@ BEGIN\n \n       ConstLitSym : ConstLit.name := constName ;\n                     ConstLit.Value := InitValue () ;\n-                    PushString (tok, constName) ;\n+                    PushString (tok, constName, issueError) ;\n                     PopInto (ConstLit.Value) ;\n                     ConstLit.Type := constType ;\n                     ConstLit.IsSet := FALSE ;\n@@ -6368,7 +6373,8 @@ END IsHiddenType ;\n                      depending upon their value.\n *)\n \n-PROCEDURE GetConstLitType (tok: CARDINAL; name: Name) : CARDINAL ;\n+PROCEDURE GetConstLitType (tok: CARDINAL; name: Name;\n+                           VAR overflow: BOOLEAN; issueError: BOOLEAN) : CARDINAL ;\n VAR\n    loc          : location_t ;\n    s            : String ;\n@@ -6389,16 +6395,16 @@ BEGIN\n       loc := TokenToLocation (tok) ;\n       CASE char (s, -1) OF\n \n-      'H':  DetermineSizeOfConstant (loc, string (s), 16,\n-                                     needsLong, needsUnsigned) |\n-      'B':  DetermineSizeOfConstant (loc, string (s), 8,\n-                                     needsLong, needsUnsigned) |\n-      'A':  DetermineSizeOfConstant (loc, string (s), 2,\n-                                     needsLong, needsUnsigned)\n+      'H':  overflow := DetermineSizeOfConstant (loc, string (s), 16,\n+                                                 needsLong, needsUnsigned, issueError) |\n+      'B':  overflow := DetermineSizeOfConstant (loc, string (s), 8,\n+                                                 needsLong, needsUnsigned, issueError) |\n+      'A':  overflow := DetermineSizeOfConstant (loc, string (s), 2,\n+                                                 needsLong, needsUnsigned, issueError)\n \n       ELSE\n-         DetermineSizeOfConstant (loc, string (s), 10,\n-                                  needsLong, needsUnsigned)\n+         overflow := DetermineSizeOfConstant (loc, string (s), 10,\n+                                              needsLong, needsUnsigned, issueError)\n       END ;\n       s := KillString (s) ;\n (*"}, {"sha": "a3f9c4ba0a87f12884b14bd983e55c54df67ad5c", "filename": "gcc/m2/gm2-gcc/m2decl.cc", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/370298f493020eeff48bc2e56463c1097ed67b1d/gcc%2Fm2%2Fgm2-gcc%2Fm2decl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/370298f493020eeff48bc2e56463c1097ed67b1d/gcc%2Fm2%2Fgm2-gcc%2Fm2decl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-gcc%2Fm2decl.cc?ref=370298f493020eeff48bc2e56463c1097ed67b1d", "patch": "@@ -283,35 +283,38 @@ m2decl_DeclareModuleCtor (tree decl)\n   return decl;\n }\n \n-\n /* DetermineSizeOfConstant - given, str, and, base, fill in needsLong\n    and needsUnsigned appropriately.  */\n \n-void\n+bool\n m2decl_DetermineSizeOfConstant (location_t location,\n \t\t\t\tconst char *str, unsigned int base,\n-                                bool *needsLong, bool *needsUnsigned)\n+                                bool *needsLong, bool *needsUnsigned,\n+\t\t\t\tbool issueError)\n {\n   unsigned int ulow;\n   int high;\n-  int overflow = m2expr_interpret_m2_integer (str, base, &ulow, &high,\n-\t\t\t\t\t      needsLong, needsUnsigned);\n-  if (overflow)\n+  bool overflow = m2expr_interpret_m2_integer (location,\n+\t\t\t\t\t       str, base, &ulow, &high,\n+\t\t\t\t\t       needsLong, needsUnsigned);\n+  if (overflow && issueError)\n     error_at (location, \"constant %qs is too large\", str);\n+  return overflow;\n }\n \n /* BuildConstLiteralNumber - returns a GCC TREE built from the\n    string, str.  It assumes that, str, represents a legal number in\n    Modula-2.  It always returns a positive value.  */\n \n tree\n-m2decl_BuildConstLiteralNumber (location_t location, const char *str, unsigned int base)\n+m2decl_BuildConstLiteralNumber (location_t location, const char *str,\n+\t\t\t\tunsigned int base, bool issueError)\n {\n   tree value, type;\n   unsigned HOST_WIDE_INT low;\n   HOST_WIDE_INT high;\n   HOST_WIDE_INT ival[3];\n-  bool overflow = m2expr_interpret_integer (str, base, &low, &high);\n+  bool overflow = m2expr_interpret_integer (location, str, base, &low, &high);\n   bool needLong, needUnsigned;\n \n   ival[0] = low;\n@@ -320,16 +323,17 @@ m2decl_BuildConstLiteralNumber (location_t location, const char *str, unsigned i\n \n   widest_int wval = widest_int::from_array (ival, 3);\n \n-  m2decl_DetermineSizeOfConstant (location, str, base, &needLong, &needUnsigned);\n-\n+  bool overflow_m2 = m2decl_DetermineSizeOfConstant (location, str, base,\n+\t\t\t\t\t\t     &needLong, &needUnsigned,\n+\t\t\t\t\t\t     issueError);\n   if (needUnsigned && needLong)\n     type = m2type_GetM2LongCardType ();\n   else\n     type = m2type_GetM2LongIntType ();\n \n   value = wide_int_to_tree (type, wval);\n \n-  if (overflow || m2expr_TreeOverflow (value))\n+  if (issueError && (overflow || overflow_m2 || m2expr_TreeOverflow (value)))\n     error_at (location, \"constant %qs is too large\", str);\n \n   return m2block_RememberConstant (value);"}, {"sha": "314cba56353ff2cc47017296069daa63a8bf0107", "filename": "gcc/m2/gm2-gcc/m2decl.def", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/370298f493020eeff48bc2e56463c1097ed67b1d/gcc%2Fm2%2Fgm2-gcc%2Fm2decl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/370298f493020eeff48bc2e56463c1097ed67b1d/gcc%2Fm2%2Fgm2-gcc%2Fm2decl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-gcc%2Fm2decl.def?ref=370298f493020eeff48bc2e56463c1097ed67b1d", "patch": "@@ -167,7 +167,8 @@ PROCEDURE RememberVariables (l: Tree) ;\n \n PROCEDURE DetermineSizeOfConstant (location: location_t;\n                                    str: ADDRESS; base: CARDINAL;\n-                                   VAR needsLong, needsUnsigned: BOOLEAN) ;\n+                                   VAR needsLong, needsUnsigned: BOOLEAN;\n+                                   issueError: BOOLEAN) : BOOLEAN ;\n \n \n (*\n@@ -178,7 +179,8 @@ PROCEDURE DetermineSizeOfConstant (location: location_t;\n *)\n \n PROCEDURE BuildConstLiteralNumber (location: location_t;\n-                                   str: ADDRESS; base: CARDINAL) : Tree ;\n+                                   str: ADDRESS; base: CARDINAL;\n+                                   issueError: BOOLEAN) : Tree ;\n \n \n (*"}, {"sha": "28d5a1365110114b09cba34ca593fcb970135916", "filename": "gcc/m2/gm2-gcc/m2decl.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/370298f493020eeff48bc2e56463c1097ed67b1d/gcc%2Fm2%2Fgm2-gcc%2Fm2decl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/370298f493020eeff48bc2e56463c1097ed67b1d/gcc%2Fm2%2Fgm2-gcc%2Fm2decl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-gcc%2Fm2decl.h?ref=370298f493020eeff48bc2e56463c1097ed67b1d", "patch": "@@ -49,11 +49,13 @@ EXTERN tree m2decl_BuildStringConstant (const char *string, int length);\n EXTERN tree m2decl_BuildCStringConstant (const char *string, int length);\n EXTERN tree m2decl_BuildConstLiteralNumber (location_t location,\n \t\t\t\t\t    const char *str,\n-                                            unsigned int base);\n-EXTERN void m2decl_DetermineSizeOfConstant (location_t location,\n+                                            unsigned int base,\n+\t\t\t\t\t    bool issueError);\n+EXTERN bool m2decl_DetermineSizeOfConstant (location_t location,\n \t\t\t\t\t    const char *str, unsigned int base,\n                                             bool *needsLong,\n-                                            bool *needsUnsigned);\n+                                            bool *needsUnsigned,\n+\t\t\t\t\t    bool issueError);\n EXTERN void m2decl_RememberVariables (tree l);\n \n EXTERN tree m2decl_BuildEndFunctionDeclaration ("}, {"sha": "920cbaaa9bbaae9d64734519721bc622640348f2", "filename": "gcc/m2/gm2-gcc/m2expr.cc", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/370298f493020eeff48bc2e56463c1097ed67b1d/gcc%2Fm2%2Fgm2-gcc%2Fm2expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/370298f493020eeff48bc2e56463c1097ed67b1d/gcc%2Fm2%2Fgm2-gcc%2Fm2expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-gcc%2Fm2expr.cc?ref=370298f493020eeff48bc2e56463c1097ed67b1d", "patch": "@@ -39,6 +39,7 @@ along with GNU Modula-2; see the file COPYING3.  If not see\n #include \"m2tree.h\"\n #include \"m2treelib.h\"\n #include \"m2type.h\"\n+#include \"m2linemap.h\"\n \n static void m2expr_checkRealOverflow (location_t location, enum tree_code code,\n                                       tree result);\n@@ -3504,15 +3505,15 @@ m2expr_BuildIndirect (location_t location ATTRIBUTE_UNUSED, tree target,\n \n /* IsTrue - returns true if, t, is known to be true.  */\n \n-int\n+bool\n m2expr_IsTrue (tree t)\n {\n   return (m2expr_FoldAndStrip (t) == m2type_GetBooleanTrue ());\n }\n \n /* IsFalse - returns false if, t, is known to be false.  */\n \n-int\n+bool\n m2expr_IsFalse (tree t)\n {\n   return (m2expr_FoldAndStrip (t) == m2type_GetBooleanFalse ());\n@@ -3521,7 +3522,7 @@ m2expr_IsFalse (tree t)\n /* AreConstantsEqual - maps onto tree.cc (tree_int_cst_equal).  It\n    returns true if the value of e1 is the same as e2.  */\n \n-int\n+bool\n m2expr_AreConstantsEqual (tree e1, tree e2)\n {\n   return tree_int_cst_equal (e1, e2) != 0;\n@@ -3531,7 +3532,7 @@ m2expr_AreConstantsEqual (tree e1, tree e2)\n    e2 are equal according to IEEE rules.  This does not perform bit\n    equivalence for example IEEE states that -0 == 0 and NaN != NaN.  */\n \n-int\n+bool\n m2expr_AreRealOrComplexConstantsEqual (tree e1, tree e2)\n {\n   if (TREE_CODE (e1) == COMPLEX_CST)\n@@ -3828,9 +3829,9 @@ m2expr_BuildBinaryForeachWordDo (location_t location, tree type, tree op1,\n       tree field3 = m2treelib_get_field_no (type, op3, is_op3const, fieldNo);\n \n       if (is_op1const)\n-        error_at (\n+\tm2linemap_internal_error_at (\n             location,\n-            \"internal error: not expecting operand1 to be a constant set\");\n+            \"not expecting operand1 to be a constant set\");\n \n       while (field1 != NULL && field2 != NULL && field3 != NULL)\n         {\n@@ -3855,7 +3856,8 @@ m2expr_BuildBinaryForeachWordDo (location_t location, tree type, tree op1,\n    BASE.  */\n \n static int\n-append_digit (unsigned HOST_WIDE_INT *low, HOST_WIDE_INT *high,\n+append_digit (location_t location,\n+\t      unsigned HOST_WIDE_INT *low, HOST_WIDE_INT *high,\n               unsigned int digit, unsigned int base)\n {\n   unsigned int shift;\n@@ -3881,7 +3883,8 @@ append_digit (unsigned HOST_WIDE_INT *low, HOST_WIDE_INT *high,\n \n     default:\n       shift = 3;\n-      error (\"internal error: not expecting this base value for a constant\");\n+      m2linemap_internal_error_at (location,\n+\t\t\t\t   \"not expecting this base value for a constant\");\n     }\n \n   /* Multiply by 2, 8 or 16.  Catching this overflow here means we\n@@ -3925,7 +3928,7 @@ append_digit (unsigned HOST_WIDE_INT *low, HOST_WIDE_INT *high,\n    constants.  Heavily borrowed from gcc/cppexp.cc.  */\n \n int\n-m2expr_interpret_integer (const char *str, unsigned int base,\n+m2expr_interpret_integer (location_t location, const char *str, unsigned int base,\n                           unsigned HOST_WIDE_INT *low, HOST_WIDE_INT *high)\n {\n   unsigned const char *p, *end;\n@@ -3965,7 +3968,7 @@ m2expr_interpret_integer (const char *str, unsigned int base,\n             *low = (*low) * base + c;\n           else\n             {\n-              overflow = append_digit (low, high, c, base);\n+              overflow = append_digit (location, low, high, c, base);\n               max = 0;  /* From now on we always use append_digit.  */\n             }\n         }\n@@ -3977,7 +3980,8 @@ m2expr_interpret_integer (const char *str, unsigned int base,\n    BASE.  */\n \n static int\n-append_m2_digit (unsigned int *low, int *high, unsigned int digit,\n+append_m2_digit (location_t location,\n+\t\t unsigned int *low, int *high, unsigned int digit,\n                  unsigned int base, bool *needsUnsigned)\n {\n   unsigned int shift;\n@@ -4004,7 +4008,8 @@ append_m2_digit (unsigned int *low, int *high, unsigned int digit,\n \n     default:\n       shift = 3;\n-      error (\"internal error: not expecting this base value for a constant\");\n+      m2linemap_internal_error_at (location,\n+\t\t\t\t   \"not expecting this base value for a constant\");\n     }\n \n   /* Multiply by 2, 8 or 16.  Catching this overflow here means we\n@@ -4060,7 +4065,8 @@ append_m2_digit (unsigned int *low, int *high, unsigned int digit,\n    if an overflow can be avoided by using these techniques.  */\n \n int\n-m2expr_interpret_m2_integer (const char *str, unsigned int base,\n+m2expr_interpret_m2_integer (location_t location,\n+\t\t\t     const char *str, unsigned int base,\n                              unsigned int *low, int *high,\n \t\t\t     bool *needsLong, bool *needsUnsigned)\n {\n@@ -4103,7 +4109,8 @@ m2expr_interpret_m2_integer (const char *str, unsigned int base,\n           else\n             {\n \t      *needsLong = true;\n-\t      if (append_m2_digit (low, high, c, base,\n+\t      if (append_m2_digit (location,\n+\t\t\t\t   low, high, c, base,\n \t\t\t\t   needsUnsigned))\n \t\treturn true;  /* We have overflowed so bail out.  */\n               max = 0;  /* From now on we always use append_digit.  */\n@@ -4190,7 +4197,7 @@ m2expr_GetSizeOf (location_t location, tree type)\n \n   if (!COMPLETE_TYPE_P (type))\n     {\n-      error_at (location, \"%qs applied to an incomplete type\", \"sizeof\");\n+      error_at (location, \"%qs applied to an incomplete type\", \"SIZE\");\n       return size_zero_node;\n     }\n "}, {"sha": "041dfa61c370a32142615951a9329cb3128f8e9a", "filename": "gcc/m2/gm2-gcc/m2expr.h", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/370298f493020eeff48bc2e56463c1097ed67b1d/gcc%2Fm2%2Fgm2-gcc%2Fm2expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/370298f493020eeff48bc2e56463c1097ed67b1d/gcc%2Fm2%2Fgm2-gcc%2Fm2expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-gcc%2Fm2expr.h?ref=370298f493020eeff48bc2e56463c1097ed67b1d", "patch": "@@ -47,10 +47,10 @@ EXTERN tree m2expr_BuildRe (tree op1);\n EXTERN tree m2expr_BuildAbs (location_t location, tree t);\n EXTERN tree m2expr_BuildCap (location_t location, tree t);\n EXTERN int m2expr_DetermineSign (tree e);\n-EXTERN int m2expr_AreRealOrComplexConstantsEqual (tree e1, tree e2);\n-EXTERN int m2expr_AreConstantsEqual (tree e1, tree e2);\n-EXTERN int m2expr_IsFalse (tree t);\n-EXTERN int m2expr_IsTrue (tree t);\n+EXTERN bool m2expr_AreRealOrComplexConstantsEqual (tree e1, tree e2);\n+EXTERN bool m2expr_AreConstantsEqual (tree e1, tree e2);\n+EXTERN bool m2expr_IsFalse (tree t);\n+EXTERN bool m2expr_IsTrue (tree t);\n EXTERN tree m2expr_BuildIndirect (location_t location, tree target, tree type);\n EXTERN tree m2expr_BuildComponentRef (location_t location, tree record,\n                                       tree field);\n@@ -124,10 +124,12 @@ EXTERN int m2expr_TreeOverflow (tree t);\n \n EXTERN unsigned int m2expr_StringLength (tree string);\n EXTERN tree m2expr_FoldAndStrip (tree t);\n-EXTERN int m2expr_interpret_integer (const char *str, unsigned int base,\n+EXTERN int m2expr_interpret_integer (location_t location,\n+\t\t\t\t     const char *str, unsigned int base,\n                                      unsigned HOST_WIDE_INT *low,\n                                      HOST_WIDE_INT *high);\n-EXTERN int m2expr_interpret_m2_integer (const char *str, unsigned int base,\n+EXTERN int m2expr_interpret_m2_integer (location_t location,\n+\t\t\t\t\tconst char *str, unsigned int base,\n                                         unsigned int *low, int *high,\n \t\t\t\t\tbool *needsLong, bool *needsUnsigned);\n "}, {"sha": "9955bd18175fa4ee1f583881fc3fe8980dcf981a", "filename": "gcc/m2/gm2-gcc/m2linemap.cc", "status": "modified", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/370298f493020eeff48bc2e56463c1097ed67b1d/gcc%2Fm2%2Fgm2-gcc%2Fm2linemap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/370298f493020eeff48bc2e56463c1097ed67b1d/gcc%2Fm2%2Fgm2-gcc%2Fm2linemap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-gcc%2Fm2linemap.cc?ref=370298f493020eeff48bc2e56463c1097ed67b1d", "patch": "@@ -35,6 +35,8 @@ along with GNU Modula-2; see the file COPYING3.  If not see\n #include \"m2type.h\"\n #define m2linemap_c\n #include \"m2linemap.h\"\n+#include \"m2color.h\"\n+#include <string>\n \n static int inFile = FALSE;\n \n@@ -251,6 +253,128 @@ m2linemap_internal_error (const char *message)\n   internal_error (\"%s\", message);\n }\n \n+\n+/* Code derived from rust.  */\n+\n+static std::string\n+mformat_value ()\n+{\n+  return std::string (xstrerror (errno));\n+}\n+\n+\n+static std::string\n+expand_format (const char *fmt)\n+{\n+  std::string result;\n+  for (const char *c = fmt; *c; ++c)\n+    {\n+      if (*c != '%')\n+\t{\n+\t  result += *c;\n+\t  continue;\n+\t}\n+      c++;\n+      switch (*c)\n+\t{\n+\t  case '\\0': {\n+\t    // malformed format string\n+\t    gcc_unreachable ();\n+\t  }\n+\t  case '%': {\n+\t    result += '%';\n+\t    break;\n+\t  }\n+\t  case 'm': {\n+\t    result += mformat_value ();\n+\t    break;\n+\t  }\n+\t  case '<': {\n+\t    result += m2color_open_quote ();\n+\t    break;\n+\t  }\n+\t  case '>': {\n+\t    result += m2color_close_quote ();\n+\t    break;\n+\t  }\n+\t  case 'q': {\n+\t    result += m2color_open_quote ();\n+\t    c++;\n+\t    if (*c == 'm')\n+\t      result += mformat_value ();\n+\t    else\n+\t      {\n+\t\tresult += '%';\n+\t\tresult += *c;\n+\t      }\n+\t    result += m2color_close_quote ();\n+\t    break;\n+\t  }\n+\t  default: {\n+\t    result += '%';\n+\t    result += *c;\n+\t  }\n+\t}\n+    }\n+  return result;\n+}\n+\n+static std::string\n+expand_message (const char *fmt, va_list ap)\n+{\n+  char *mbuf = 0;\n+  std::string expanded_fmt = expand_format (fmt);\n+  int nwr = vasprintf (&mbuf, expanded_fmt.c_str (), ap);\n+  if (nwr == -1)\n+    {\n+      // memory allocation failed\n+      error_at (UNKNOWN_LOCATION,\n+\t\t\"memory allocation failed in vasprintf\");\n+      gcc_assert (0);\n+    }\n+  std::string rval = std::string (mbuf);\n+  free (mbuf);\n+  return rval;\n+}\n+\n+\n+static void\n+gm2_internal_error_at (location_t location, const std::string &errmsg)\n+{\n+  expanded_location exp_loc = expand_location (location);\n+  std::string loc_str;\n+  std::string file_str;\n+\n+  if (exp_loc.file == NULL)\n+    file_str.clear ();\n+  else\n+    file_str = std::string (exp_loc.file);\n+\n+  if (! file_str.empty ())\n+    {\n+      loc_str += file_str;\n+      loc_str += ':';\n+      loc_str += std::to_string (exp_loc.line);\n+      loc_str += ':';\n+      loc_str += std::to_string (exp_loc.column);\n+    }\n+  if (loc_str.empty ())\n+    internal_error (\"%s\", errmsg.c_str ());\n+  else\n+    internal_error (\"at %s, %s\", loc_str.c_str (), errmsg.c_str ());\n+}\n+\n+\n+void\n+m2linemap_internal_error_at (location_t location, const char *fmt, ...)\n+{\n+  va_list ap;\n+\n+  va_start (ap, fmt);\n+  gm2_internal_error_at (location, expand_message (fmt, ap));\n+  va_end (ap);\n+}\n+\n /* UnknownLocation - return the predefined location representing an\n    unknown location.  */\n "}, {"sha": "44a6ff0f23052d1d175b84707fef3dc62206fe0c", "filename": "gcc/m2/gm2-gcc/m2linemap.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/370298f493020eeff48bc2e56463c1097ed67b1d/gcc%2Fm2%2Fgm2-gcc%2Fm2linemap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/370298f493020eeff48bc2e56463c1097ed67b1d/gcc%2Fm2%2Fgm2-gcc%2Fm2linemap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-gcc%2Fm2linemap.h?ref=370298f493020eeff48bc2e56463c1097ed67b1d", "patch": "@@ -59,7 +59,7 @@ EXTERN void m2linemap_ErrorAtf (location_t location, const char *message);\n EXTERN void m2linemap_WarningAtf (location_t location, const char *message);\n EXTERN void m2linemap_NoteAtf (location_t location, const char *message);\n EXTERN void m2linemap_internal_error (const char *message);\n-\n+EXTERN void m2linemap_internal_error_at (location_t location, const char *fmt, ...);\n \n EXTERN location_t UnknownLocation (void);\n EXTERN location_t BuiltinsLocation (void);"}, {"sha": "ec49faf9947ed21593c9286025599d603cc2fa9e", "filename": "gcc/m2/gm2-gcc/m2options.h", "status": "modified", "additions": 69, "deletions": 69, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/370298f493020eeff48bc2e56463c1097ed67b1d/gcc%2Fm2%2Fgm2-gcc%2Fm2options.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/370298f493020eeff48bc2e56463c1097ed67b1d/gcc%2Fm2%2Fgm2-gcc%2Fm2options.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-gcc%2Fm2options.h?ref=370298f493020eeff48bc2e56463c1097ed67b1d", "patch": "@@ -42,86 +42,86 @@ EXTERN void M2Options_SetSearchPath (const char *arg);\n EXTERN void M2Options_setdefextension (const char *arg);\n EXTERN void M2Options_setmodextension (const char *arg);\n \n-EXTERN void M2Options_SetISO (int value);\n-EXTERN void M2Options_SetPIM (int value);\n-EXTERN void M2Options_SetPIM2 (int value);\n-EXTERN void M2Options_SetPIM3 (int value);\n-EXTERN void M2Options_SetPIM4 (int value);\n-EXTERN void M2Options_SetFloatValueCheck (int value);\n-EXTERN void M2Options_SetWholeValueCheck (int value);\n+EXTERN void M2Options_SetISO (bool value);\n+EXTERN void M2Options_SetPIM (bool value);\n+EXTERN void M2Options_SetPIM2 (bool value);\n+EXTERN void M2Options_SetPIM3 (bool value);\n+EXTERN void M2Options_SetPIM4 (bool value);\n+EXTERN void M2Options_SetFloatValueCheck (bool value);\n+EXTERN void M2Options_SetWholeValueCheck (bool value);\n \n-EXTERN int M2Options_GetISO (void);\n-EXTERN int M2Options_GetPIM (void);\n-EXTERN int M2Options_GetPIM2 (void);\n-EXTERN int M2Options_GetPIM3 (void);\n-EXTERN int M2Options_GetPIM4 (void);\n-EXTERN int M2Options_GetPositiveModFloor (void);\n-EXTERN int M2Options_GetFloatValueCheck (void);\n-EXTERN int M2Options_GetWholeValueCheck (void);\n+EXTERN bool M2Options_GetISO (void);\n+EXTERN bool M2Options_GetPIM (void);\n+EXTERN bool M2Options_GetPIM2 (void);\n+EXTERN bool M2Options_GetPIM3 (void);\n+EXTERN bool M2Options_GetPIM4 (void);\n+EXTERN bool M2Options_GetPositiveModFloor (void);\n+EXTERN bool M2Options_GetFloatValueCheck (void);\n+EXTERN bool M2Options_GetWholeValueCheck (void);\n \n-EXTERN void M2Options_Setc (int value);\n-EXTERN int M2Options_Getc (void);\n-EXTERN void M2Options_SetPPOnly (int value);\n-EXTERN int M2Options_GetPPOnly (void);\n+EXTERN void M2Options_Setc (bool value);\n+EXTERN bool M2Options_Getc (void);\n+EXTERN void M2Options_SetPPOnly (bool value);\n+EXTERN bool M2Options_GetPPOnly (void);\n \n-EXTERN void M2Options_SetUselist (int value, const char *filename);\n-EXTERN void M2Options_SetAutoInit (int value);\n-EXTERN void M2Options_SetPositiveModFloor (int value);\n-EXTERN void M2Options_SetNilCheck (int value);\n-EXTERN void M2Options_SetWholeDiv (int value);\n-EXTERN void M2Options_SetIndex (int value);\n-EXTERN void M2Options_SetRange (int value);\n-EXTERN void M2Options_SetReturnCheck (int value);\n-EXTERN void M2Options_SetCaseCheck (int value);\n-EXTERN void M2Options_SetCheckAll (int value);\n-EXTERN void M2Options_SetExceptions (int value);\n-EXTERN void M2Options_SetStyle (int value);\n-EXTERN void M2Options_SetPedantic (int value);\n-EXTERN void M2Options_SetPedanticParamNames (int value);\n-EXTERN void M2Options_SetPedanticCast (int value);\n-EXTERN void M2Options_SetExtendedOpaque (int value);\n-EXTERN void M2Options_SetVerboseUnbounded (int value);\n-EXTERN void M2Options_SetXCode (int value);\n-EXTERN void M2Options_SetCompilerDebugging (int value);\n-EXTERN void M2Options_SetQuadDebugging (int value);\n-EXTERN void M2Options_SetDebugTraceQuad (int value);\n-EXTERN void M2Options_SetDebugTraceAPI (int value);\n-EXTERN void M2Options_SetSources (int value);\n-EXTERN void M2Options_SetUnboundedByReference (int value);\n-EXTERN void M2Options_SetDumpSystemExports (int value);\n-EXTERN void M2Options_SetOptimizing (int value);\n-EXTERN void M2Options_SetQuiet (int value);\n-EXTERN void M2Options_SetCC1Quiet (int value);\n-EXTERN void M2Options_SetCpp (int value);\n-EXTERN void M2Options_SetSwig (int value);\n+EXTERN void M2Options_SetUselist (bool value, const char *filename);\n+EXTERN void M2Options_SetAutoInit (bool value);\n+EXTERN void M2Options_SetPositiveModFloor (bool value);\n+EXTERN void M2Options_SetNilCheck (bool value);\n+EXTERN void M2Options_SetWholeDiv (bool value);\n+EXTERN void M2Options_SetIndex (bool value);\n+EXTERN void M2Options_SetRange (bool value);\n+EXTERN void M2Options_SetReturnCheck (bool value);\n+EXTERN void M2Options_SetCaseCheck (bool value);\n+EXTERN void M2Options_SetCheckAll (bool value);\n+EXTERN void M2Options_SetExceptions (bool value);\n+EXTERN void M2Options_SetStyle (bool value);\n+EXTERN void M2Options_SetPedantic (bool value);\n+EXTERN void M2Options_SetPedanticParamNames (bool value);\n+EXTERN void M2Options_SetPedanticCast (bool value);\n+EXTERN void M2Options_SetExtendedOpaque (bool value);\n+EXTERN void M2Options_SetVerboseUnbounded (bool value);\n+EXTERN void M2Options_SetXCode (bool value);\n+EXTERN void M2Options_SetCompilerDebugging (bool value);\n+EXTERN void M2Options_SetQuadDebugging (bool value);\n+EXTERN void M2Options_SetDebugTraceQuad (bool value);\n+EXTERN void M2Options_SetDebugTraceAPI (bool value);\n+EXTERN void M2Options_SetSources (bool value);\n+EXTERN void M2Options_SetUnboundedByReference (bool value);\n+EXTERN void M2Options_SetDumpSystemExports (bool value);\n+EXTERN void M2Options_SetOptimizing (bool value);\n+EXTERN void M2Options_SetQuiet (bool value);\n+EXTERN void M2Options_SetCC1Quiet (bool value);\n+EXTERN void M2Options_SetCpp (bool value);\n+EXTERN void M2Options_SetSwig (bool value);\n EXTERN void M2Options_SetForcedLocation (location_t location);\n EXTERN location_t M2Options_OverrideLocation (location_t location);\n EXTERN void M2Options_SetStatistics (int on);\n EXTERN void M2Options_CppProg (const char *program);\n-EXTERN void M2Options_CppArg (const char *opt, const char *arg, int joined);\n-EXTERN void M2Options_SetWholeProgram (int value);\n+EXTERN void M2Options_CppArg (const char *opt, const char *arg, bool joined);\n+EXTERN void M2Options_SetWholeProgram (bool value);\n EXTERN void M2Options_FinaliseOptions (void);\n-EXTERN void M2Options_SetDebugFunctionLineNumbers (int value);\n-EXTERN void M2Options_SetGenerateStatementNote (int value);\n-EXTERN int M2Options_GetCpp (void);\n-EXTERN int M2Options_GetM2g (void);\n-EXTERN void M2Options_SetM2g (int value);\n-EXTERN void M2Options_SetLowerCaseKeywords (int value);\n-EXTERN void M2Options_SetVerbose (int value);\n-EXTERN void M2Options_SetUnusedVariableChecking (int value);\n-EXTERN void M2Options_SetUnusedParameterChecking (int value);\n-EXTERN void M2Options_SetStrictTypeChecking (int value);\n-EXTERN void M2Options_SetWall (int value);\n-EXTERN void M2Options_SetSaveTemps (int value);\n+EXTERN void M2Options_SetDebugFunctionLineNumbers (bool value);\n+EXTERN void M2Options_SetGenerateStatementNote (bool value);\n+EXTERN bool M2Options_GetCpp (void);\n+EXTERN bool M2Options_GetM2g (void);\n+EXTERN void M2Options_SetM2g (bool value);\n+EXTERN void M2Options_SetLowerCaseKeywords (bool value);\n+EXTERN void M2Options_SetVerbose (bool value);\n+EXTERN void M2Options_SetUnusedVariableChecking (bool value);\n+EXTERN void M2Options_SetUnusedParameterChecking (bool value);\n+EXTERN void M2Options_SetStrictTypeChecking (bool value);\n+EXTERN void M2Options_SetWall (bool value);\n+EXTERN void M2Options_SetSaveTemps (bool value);\n EXTERN void M2Options_SetSaveTempsDir (const char *arg);\n EXTERN void M2Options_SetDumpDir (const char *arg);\n-EXTERN int M2Options_GetSaveTemps (void);\n-EXTERN void M2Options_SetScaffoldStatic (int value);\n-EXTERN void M2Options_SetScaffoldDynamic (int value);\n-EXTERN void M2Options_SetScaffoldMain (int value);\n+EXTERN bool M2Options_GetSaveTemps (void);\n+EXTERN void M2Options_SetScaffoldStatic (bool value);\n+EXTERN void M2Options_SetScaffoldDynamic (bool value);\n+EXTERN void M2Options_SetScaffoldMain (bool value);\n EXTERN void M2Options_SetRuntimeModuleOverride (const char *override);\n-EXTERN void M2Options_SetGenModuleList (int value, const char *filename);\n-EXTERN void M2Options_SetShared (int value);\n+EXTERN void M2Options_SetGenModuleList (bool value, const char *filename);\n+EXTERN void M2Options_SetShared (bool value);\n EXTERN void M2Options_SetB (const char *arg);\n EXTERN char *M2Options_GetB (void);\n EXTERN void M2Options_SetMD (const char *arg);"}, {"sha": "9efe6f348956790a0af9e075c1e68fc7ca07f6af", "filename": "gcc/m2/gm2-libs-ch/M2LINK.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/370298f493020eeff48bc2e56463c1097ed67b1d/gcc%2Fm2%2Fgm2-libs-ch%2FM2LINK.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/370298f493020eeff48bc2e56463c1097ed67b1d/gcc%2Fm2%2Fgm2-libs-ch%2FM2LINK.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-libs-ch%2FM2LINK.c?ref=370298f493020eeff48bc2e56463c1097ed67b1d", "patch": "@@ -28,6 +28,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"system.h\"\n #include \"ansidecl.h\"\n #include \"math.h\"\n+#include <stdbool.h>\n \n #include \"gm2-libs-host.h\"\n \n@@ -39,6 +40,6 @@ extern \"C\" {\n      initialization features of M2RTS.  */\n \n   char *M2LINK_ForcedModuleInitOrder = NULL;\n-  int M2LINK_StaticInitialization = 1;\n+  bool M2LINK_StaticInitialization = true;\n \n }"}, {"sha": "e9e4b995d2eba6be7e246364592631fcd28cf066", "filename": "gcc/m2/gm2-libs-ch/m2rts.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/370298f493020eeff48bc2e56463c1097ed67b1d/gcc%2Fm2%2Fgm2-libs-ch%2Fm2rts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/370298f493020eeff48bc2e56463c1097ed67b1d/gcc%2Fm2%2Fgm2-libs-ch%2Fm2rts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-libs-ch%2Fm2rts.h?ref=370298f493020eeff48bc2e56463c1097ed67b1d", "patch": "@@ -28,12 +28,12 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n typedef void (*proc_con) (int, char **, char **);\n typedef void (*proc_dep) (void);\n \n-extern \"C\" void M2RTS_RequestDependant (const char *modulename, const char *dependancy);\n-extern \"C\" void M2RTS_RegisterModule (const char *modulename, const char *libname,\n+extern \"C\" void M2RTS_RequestDependant (const void *modulename, const void *dependancy);\n+extern \"C\" void M2RTS_RegisterModule (const void *modulename, const void *libname,\n \t\t\t\t      proc_con init, proc_con fini, proc_dep dependencies);\n extern \"C\" void _M2_M2RTS_init (void);\n \n-extern \"C\" void M2RTS_ConstructModules (const char *,\n+extern \"C\" void M2RTS_ConstructModules (const void *,\n \t\t\t\t\tint argc, char *argv[], char *envp[]);\n extern \"C\" void M2RTS_Terminate (void);\n extern \"C\" void M2RTS_DeconstructModules (void);"}, {"sha": "fa59cf29d191be5a5619bb8d9d6b4062b12d68b8", "filename": "gcc/testsuite/gm2/pim/fail/largeconst.mod", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/370298f493020eeff48bc2e56463c1097ed67b1d/gcc%2Ftestsuite%2Fgm2%2Fpim%2Ffail%2Flargeconst.mod", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/370298f493020eeff48bc2e56463c1097ed67b1d/gcc%2Ftestsuite%2Fgm2%2Fpim%2Ffail%2Flargeconst.mod", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgm2%2Fpim%2Ffail%2Flargeconst.mod?ref=370298f493020eeff48bc2e56463c1097ed67b1d", "patch": "@@ -0,0 +1,7 @@\n+MODULE largeconst ;\n+\n+CONST\n+   foo = 12345678912345678912345679123456789123456789 ;\n+\n+BEGIN\n+END largeconst.\n\\ No newline at end of file"}]}