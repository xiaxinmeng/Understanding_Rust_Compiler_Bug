{"sha": "46fad5b72188e6627c63ce1979375deacfd7bdf6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZmYWQ1YjcyMTg4ZTY2MjdjNjNjZTE5NzkzNzVkZWFjZmQ3YmRmNg==", "commit": {"author": {"name": "Dale Johannesen", "email": "dalej@apple.com", "date": "2001-05-18T22:01:54Z"}, "committer": {"name": "Stan Shebs", "email": "shebs@gcc.gnu.org", "date": "2001-05-18T22:01:54Z"}, "message": "rs6000.c (secondary_reload_class): Fix Darwin specific misuse of r0 as a reload address.\n\n2001-05-18  Dale Johannesen  <dalej@apple.com>\n\n        * config/rs6000/rs6000.c (secondary_reload_class): Fix Darwin\n        specific misuse of r0 as a reload address.\n\nFrom-SVN: r42287", "tree": {"sha": "e4da3f83a23f5f9a7a7b437a1872a8e997a78eb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4da3f83a23f5f9a7a7b437a1872a8e997a78eb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46fad5b72188e6627c63ce1979375deacfd7bdf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46fad5b72188e6627c63ce1979375deacfd7bdf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46fad5b72188e6627c63ce1979375deacfd7bdf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46fad5b72188e6627c63ce1979375deacfd7bdf6/comments", "author": null, "committer": null, "parents": [{"sha": "eb47ec1b6974e63d97f315ca0779e75839432182", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb47ec1b6974e63d97f315ca0779e75839432182", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb47ec1b6974e63d97f315ca0779e75839432182"}], "stats": {"total": 32, "additions": 21, "deletions": 11}, "files": [{"sha": "6ff92046539fd39a4417f4e09d68911e2ac5c977", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fad5b72188e6627c63ce1979375deacfd7bdf6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fad5b72188e6627c63ce1979375deacfd7bdf6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46fad5b72188e6627c63ce1979375deacfd7bdf6", "patch": "@@ -1,3 +1,8 @@\n+2001-05-18  Dale Johannesen  <dalej@apple.com>\n+\n+\t* config/rs6000/rs6000.c (secondary_reload_class): Fix Darwin\n+\tspecific misuse of r0 as a reload address.\n+\n Fri May 18 22:42:04 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* combine.c (combine_simplify_rtx): Clear op0_mode if simplification"}, {"sha": "9376b2a97ea2963bf96d9c290f459f28ae48a7cb", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fad5b72188e6627c63ce1979375deacfd7bdf6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fad5b72188e6627c63ce1979375deacfd7bdf6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=46fad5b72188e6627c63ce1979375deacfd7bdf6", "patch": "@@ -3587,17 +3587,22 @@ secondary_reload_class (class, mode, in)\n {\n   int regno;\n \n-#if TARGET_ELF\n-  /* We can not copy a symbolic operand directly into anything other than\n-     BASE_REGS for TARGET_ELF.  So indicate that a register from BASE_REGS\n-     is needed as an intermediate register.  */\n-  if (class != BASE_REGS\n-      && (GET_CODE (in) == SYMBOL_REF\n-\t  || GET_CODE (in) == HIGH\n-\t  || GET_CODE (in) == LABEL_REF\n-\t  || GET_CODE (in) == CONST))\n-    return BASE_REGS;\n-#endif\n+  if (TARGET_ELF || (DEFAULT_ABI == ABI_DARWIN && flag_pic))\n+    {\n+      /* We cannot copy a symbolic operand directly into anything\n+         other than BASE_REGS for TARGET_ELF.  So indicate that a\n+         register from BASE_REGS is needed as an intermediate\n+         register.\n+         \n+\t On Darwin, pic addresses require a load from memory, which\n+\t needs a base register.  */\n+      if (class != BASE_REGS\n+          && (GET_CODE (in) == SYMBOL_REF\n+              || GET_CODE (in) == HIGH\n+              || GET_CODE (in) == LABEL_REF\n+              || GET_CODE (in) == CONST))\n+        return BASE_REGS;\n+    }\n \n   if (GET_CODE (in) == REG)\n     {"}]}