{"sha": "16aafa3194d4851a07cc204f56a5f0618f77e5d7", "node_id": "C_kwDOANBUbNoAKDE2YWFmYTMxOTRkNDg1MWEwN2NjMjA0ZjU2YTVmMDYxOGY3N2U1ZDc", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-07-25T16:33:48Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-07-25T16:33:48Z"}, "message": "PR target/91681: zero_extendditi2 pattern for more optimizations on x86.\n\nTechnically, PR target/91681 has already been resolved; we now recognize the\nhighpart multiplication at the tree-level, we no longer use the stack, and\nwe currently generate the same number of instructions as LLVM.  However, it\nis still possible to do better, the current x86_64 code to generate a double\nword addition of a zero extended operand, looks like:\n\n        xorl    %r11d, %r11d\n        addq    %r10, %rax\n        adcq    %r11, %rdx\n\nwhen it's possible (as LLVM does) to use an immediate constant:\n\n        addq    %r10, %rax\n        adcq    $0, %rdx\n\nThis is implemented by introducing a zero_extendditi2 pattern,\nfor zero extension from DImode to TImode on TARGET_64BIT that is\nsplit after reload.  With zero extension now visible to combine,\nwe add two new define_insn_and_split that add/subtract a zero\nextended operand in double word mode.  These apply to both 32-bit\nand 64-bit code generation, to produce adc $0 and sbb $0.\n\nOne consequence of this is that these new patterns interfere with\nthe optimization that recognizes DW:DI = (HI:SI<<32)+LO:SI as a pair\nof register moves, or more accurately the combine splitter no longer\ntriggers as we're now converting two instructions into two instructions\n(not three instructions into two instructions).  This is easily\nrepaired (and extended to handle TImode) by changing from a pair\nof define_split (that handle operand commutativity) to a set of\nfour define_insn_and_split (again to handle operand commutativity).\n\n2022-07-25  Roger Sayle  <roger@nextmovesoftware.com>\n\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog\n\tPR target/91681\n\t* config/i386/i386-expand.cc (split_double_concat): A new helper\n\tfunction for setting a double word value from two word values.\n\t* config/i386/i386-protos.h (split_double_concat): Prototype here.\n\t* config/i386/i386.md (zero_extendditi2): New define_insn_and_split.\n\t(*add<dwi>3_doubleword_zext): New define_insn_and_split.\n\t(*sub<dwi>3_doubleword_zext): New define_insn_and_split.\n\t(*concat<mode><dwi>3_1): New define_insn_and_split replacing\n\tprevious define_split for implementing DST = (HI<<32)|LO as\n\tpair of move instructions, setting lopart and hipart.\n\t(*concat<mode><dwi>3_2): Likewise.\n\t(*concat<mode><dwi>3_3): Likewise, where HI is zero_extended.\n\t(*concat<mode><dwi>3_4): Likewise, where HI is zero_extended.\n\ngcc/testsuite/ChangeLog\n\tPR target/91681\n\t* g++.target/i386/pr91681.C: New test case (from the PR).\n\t* gcc.target/i386/pr91681-1.c: New int128 test case.\n\t* gcc.target/i386/pr91681-2.c: Likewise.\n\t* gcc.target/i386/pr91681-3.c: Likewise, but for ia32.", "tree": {"sha": "c8a5ff46bdee03d29f12b03fe013129c44adec85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8a5ff46bdee03d29f12b03fe013129c44adec85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16aafa3194d4851a07cc204f56a5f0618f77e5d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16aafa3194d4851a07cc204f56a5f0618f77e5d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16aafa3194d4851a07cc204f56a5f0618f77e5d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16aafa3194d4851a07cc204f56a5f0618f77e5d7/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca1e4b26c19351077db1d8e6ff1cb97f05bca79f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca1e4b26c19351077db1d8e6ff1cb97f05bca79f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca1e4b26c19351077db1d8e6ff1cb97f05bca79f"}], "stats": {"total": 257, "additions": 233, "deletions": 24}, "files": [{"sha": "66d8f28984c85de0a441da1dc82254da0823cbc3", "filename": "gcc/config/i386/i386-expand.cc", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16aafa3194d4851a07cc204f56a5f0618f77e5d7/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16aafa3194d4851a07cc204f56a5f0618f77e5d7/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.cc?ref=16aafa3194d4851a07cc204f56a5f0618f77e5d7", "patch": "@@ -165,6 +165,46 @@ split_double_mode (machine_mode mode, rtx operands[],\n     }\n }\n \n+/* Emit the double word assignment DST = { LO, HI }.  */\n+\n+void\n+split_double_concat (machine_mode mode, rtx dst, rtx lo, rtx hi)\n+{\n+  rtx dlo, dhi;\n+  int deleted_move_count = 0;\n+  split_double_mode (mode, &dst, 1, &dlo, &dhi);\n+  if (!rtx_equal_p (dlo, hi))\n+    {\n+      if (!rtx_equal_p (dlo, lo))\n+\temit_move_insn (dlo, lo);\n+      else\n+\tdeleted_move_count++;\n+      if (!rtx_equal_p (dhi, hi))\n+\temit_move_insn (dhi, hi);\n+      else\n+\tdeleted_move_count++;\n+    }\n+  else if (!rtx_equal_p (lo, dhi))\n+    {\n+      if (!rtx_equal_p (dhi, hi))\n+\temit_move_insn (dhi, hi);\n+      else\n+\tdeleted_move_count++;\n+      if (!rtx_equal_p (dlo, lo))\n+\temit_move_insn (dlo, lo);\n+      else\n+\tdeleted_move_count++;\n+    }\n+  else if (mode == TImode)\n+    emit_insn (gen_swapdi (dlo, dhi));\n+  else\n+    emit_insn (gen_swapsi (dlo, dhi));\n+\n+  if (deleted_move_count == 2)\n+    emit_note (NOTE_INSN_DELETED);\n+}\n+\n+\n /* Generate either \"mov $0, reg\" or \"xor reg, reg\", as appropriate\n    for the target.  */\n "}, {"sha": "e27c14ff78316fe8100b0d48ac85b26913f7df85", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16aafa3194d4851a07cc204f56a5f0618f77e5d7/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16aafa3194d4851a07cc204f56a5f0618f77e5d7/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=16aafa3194d4851a07cc204f56a5f0618f77e5d7", "patch": "@@ -85,6 +85,7 @@ extern void print_reg (rtx, int, FILE*);\n extern void ix86_print_operand (FILE *, rtx, int);\n \n extern void split_double_mode (machine_mode, rtx[], int, rtx[], rtx[]);\n+extern void split_double_concat (machine_mode, rtx, rtx lo, rtx);\n \n extern const char *output_set_got (rtx, rtx);\n extern const char *output_387_binary_op (rtx_insn *, rtx*);"}, {"sha": "fab6aed5e42598cae2c211033c8b48d433961b55", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 116, "deletions": 24, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16aafa3194d4851a07cc204f56a5f0618f77e5d7/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16aafa3194d4851a07cc204f56a5f0618f77e5d7/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=16aafa3194d4851a07cc204f56a5f0618f77e5d7", "patch": "@@ -4116,6 +4116,16 @@\n \n ;; Zero extension instructions\n \n+(define_insn_and_split \"zero_extendditi2\"\n+  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=r,o\")\n+\t(zero_extend:TI (match_operand:DI 1 \"nonimmediate_operand\" \"rm,r\")))]\n+  \"TARGET_64BIT\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 3) (match_dup 1))\n+   (set (match_dup 4) (const_int 0))]\n+  \"split_double_mode (TImode, &operands[0], 1, &operands[3], &operands[4]);\")\n+\n (define_expand \"zero_extendsidi2\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\")\n \t(zero_extend:DI (match_operand:SI 1 \"nonimmediate_operand\")))])\n@@ -5814,6 +5824,31 @@\n     }\n })\n \n+(define_insn_and_split \"*add<dwi>3_doubleword_zext\"\n+  [(set (match_operand:<DWI> 0 \"nonimmediate_operand\" \"=r,o\")\n+\t(plus:<DWI>\n+\t  (zero_extend:<DWI>\n+\t    (match_operand:DWIH 2 \"nonimmediate_operand\" \"rm,r\")) \n+\t  (match_operand:<DWI> 1 \"nonimmediate_operand\" \"0,0\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"ix86_binary_operator_ok (UNKNOWN, <DWI>mode, operands)\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(parallel [(set (reg:CCC FLAGS_REG)\n+\t\t   (compare:CCC\n+\t\t     (plus:DWIH (match_dup 1) (match_dup 2))\n+\t\t     (match_dup 1)))\n+\t      (set (match_dup 0)\n+\t\t   (plus:DWIH (match_dup 1) (match_dup 2)))])\n+   (parallel [(set (match_dup 3)\n+\t\t   (plus:DWIH\n+\t\t     (plus:DWIH\n+\t\t       (ltu:DWIH (reg:CC FLAGS_REG) (const_int 0))\n+\t\t       (match_dup 4))\n+\t\t     (const_int 0)))\n+\t      (clobber (reg:CC FLAGS_REG))])]\n+ \"split_double_mode (<DWI>mode, &operands[0], 2, &operands[0], &operands[3]);\")\n+\n (define_insn \"*add<mode>_1\"\n   [(set (match_operand:SWI48 0 \"nonimmediate_operand\" \"=rm,r,r,r\")\n \t(plus:SWI48\n@@ -6962,6 +6997,29 @@\n     }\n })\n \n+(define_insn_and_split \"*sub<dwi>3_doubleword_zext\"\n+  [(set (match_operand:<DWI> 0 \"nonimmediate_operand\" \"=r,o\")\n+\t(minus:<DWI>\n+\t  (match_operand:<DWI> 1 \"nonimmediate_operand\" \"0,0\")\n+\t  (zero_extend:<DWI>\n+\t    (match_operand:DWIH 2 \"nonimmediate_operand\" \"rm,r\"))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"ix86_binary_operator_ok (UNKNOWN, <DWI>mode, operands)\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(parallel [(set (reg:CC FLAGS_REG)\n+\t\t   (compare:CC (match_dup 1) (match_dup 2)))\n+\t      (set (match_dup 0)\n+\t\t   (minus:DWIH (match_dup 1) (match_dup 2)))])\n+   (parallel [(set (match_dup 3)\n+\t\t   (minus:DWIH\n+\t\t     (minus:DWIH\n+\t\t       (match_dup 4)\n+\t\t       (ltu:DWIH (reg:CC FLAGS_REG) (const_int 0)))\n+\t\t     (const_int 0)))\n+\t      (clobber (reg:CC FLAGS_REG))])]\n+  \"split_double_mode (<DWI>mode, &operands[0], 2, &operands[0], &operands[3]);\")\n+\n (define_insn \"*sub<mode>_1\"\n   [(set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m,<r>\")\n \t(minus:SWI\n@@ -11111,34 +11169,68 @@\n \n ;; Split DST = (HI<<32)|LO early to minimize register usage.\n (define_code_iterator any_or_plus [plus ior xor])\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\")\n-\t(any_or_plus:DI\n-\t  (ashift:DI (match_operand:DI 1 \"register_operand\")\n-\t\t     (const_int 32))\n-\t  (zero_extend:DI (match_operand:SI 2 \"register_operand\"))))]\n-  \"!TARGET_64BIT\"\n-  [(set (match_dup 3) (match_dup 4))\n-   (set (match_dup 5) (match_dup 2))]\n+(define_insn_and_split \"*concat<mode><dwi>3_1\"\n+  [(set (match_operand:<DWI> 0 \"nonimmediate_operand\" \"=ro\")\n+\t(any_or_plus:<DWI>\n+\t  (ashift:<DWI> (match_operand:<DWI> 1 \"register_operand\" \"r\")\n+\t\t\t(match_operand:<DWI> 2 \"const_int_operand\"))\n+\t  (zero_extend:<DWI> (match_operand:DWIH 3 \"register_operand\" \"r\"))))]\n+  \"INTVAL (operands[2]) == <MODE_SIZE> * BITS_PER_UNIT\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(clobber (const_int 0))]\n {\n-  operands[3] = gen_highpart (SImode, operands[0]);\n-  operands[4] = gen_lowpart (SImode, operands[1]);\n-  operands[5] = gen_lowpart (SImode, operands[0]);\n+  split_double_concat (<DWI>mode, operands[0], operands[3],\n+\t\t       gen_lowpart (<MODE>mode, operands[1]));\n+  DONE;\n })\n \n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\")\n-\t(any_or_plus:DI\n-\t  (zero_extend:DI (match_operand:SI 1 \"register_operand\"))\n-\t  (ashift:DI (match_operand:DI 2 \"register_operand\")\n-\t\t     (const_int 32))))]\n-  \"!TARGET_64BIT\"\n-  [(set (match_dup 3) (match_dup 4))\n-   (set (match_dup 5) (match_dup 1))]\n+(define_insn_and_split \"*concat<mode><dwi>3_2\"\n+  [(set (match_operand:<DWI> 0 \"nonimmediate_operand\" \"=ro\")\n+\t(any_or_plus:<DWI>\n+\t  (zero_extend:<DWI> (match_operand:DWIH 1 \"register_operand\" \"r\"))\n+\t  (ashift:<DWI> (match_operand:<DWI> 2 \"register_operand\" \"r\")\n+\t\t\t(match_operand:<DWI> 3 \"const_int_operand\"))))]\n+  \"INTVAL (operands[3]) == <MODE_SIZE> * BITS_PER_UNIT\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(clobber (const_int 0))]\n+{\n+  split_double_concat (<DWI>mode, operands[0], operands[1],\n+\t\t       gen_lowpart (<MODE>mode, operands[2]));\n+  DONE;\n+})\n+\n+(define_insn_and_split \"*concat<mode><dwi>3_3\"\n+  [(set (match_operand:<DWI> 0 \"nonimmediate_operand\" \"=ro\")\n+\t(any_or_plus:<DWI>\n+\t  (ashift:<DWI>\n+\t    (zero_extend:<DWI> (match_operand:DWIH 1 \"register_operand\" \"r\"))\n+\t    (match_operand:<DWI> 2 \"const_int_operand\"))\n+\t  (zero_extend:<DWI> (match_operand:DWIH 3 \"register_operand\" \"r\"))))]\n+  \"INTVAL (operands[2]) == <MODE_SIZE> * BITS_PER_UNIT\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(clobber (const_int 0))]\n {\n-  operands[3] = gen_highpart (SImode, operands[0]);\n-  operands[4] = gen_lowpart (SImode, operands[2]);\n-  operands[5] = gen_lowpart (SImode, operands[0]);\n+  split_double_concat (<DWI>mode, operands[0], operands[3], operands[1]);\n+  DONE;\n+})\n+\n+(define_insn_and_split \"*concat<mode><dwi>3_4\"\n+  [(set (match_operand:<DWI> 0 \"nonimmediate_operand\" \"=ro\")\n+\t(any_or_plus:<DWI>\n+\t  (zero_extend:<DWI> (match_operand:DWIH 1 \"register_operand\" \"r\"))\n+\t  (ashift:<DWI>\n+\t    (zero_extend:<DWI> (match_operand:DWIH 2 \"register_operand\" \"r\"))\n+\t    (match_operand:<DWI> 3 \"const_int_operand\"))))]\n+  \"INTVAL (operands[3]) == <MODE_SIZE> * BITS_PER_UNIT\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(clobber (const_int 0))]\n+{\n+  split_double_concat (<DWI>mode, operands[0], operands[1], operands[2]);\n+  DONE;\n })\n \f\n ;; Negation instructions"}, {"sha": "0271e43ad3b23ff76a5c6274a1e72eab491fc008", "filename": "gcc/testsuite/g++.target/i386/pr91681.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16aafa3194d4851a07cc204f56a5f0618f77e5d7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr91681.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16aafa3194d4851a07cc204f56a5f0618f77e5d7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr91681.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr91681.C?ref=16aafa3194d4851a07cc204f56a5f0618f77e5d7", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2\" } */\n+\n+void multiply128x64x2_3 ( \n+    const unsigned long a, \n+    const unsigned long b, \n+    const unsigned long c, \n+    const unsigned long d, \n+    __uint128_t o[2])\n+{\n+    __uint128_t B0 = (__uint128_t) b * c;\n+    __uint128_t B2 = (__uint128_t) a * c;\n+    __uint128_t B1 = (__uint128_t) b * d;\n+    __uint128_t B3 = (__uint128_t) a * d;\n+\n+    o[0] = B2 + (B0 >> 64);\n+    o[1] = B3 + (B1 >> 64);\n+}\n+\n+/* { dg-final { scan-assembler-not \"xor\" } } */"}, {"sha": "ab83cc4b3023f9f8f699692e53d9fba4628493d1", "filename": "gcc/testsuite/gcc.target/i386/pr91681-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16aafa3194d4851a07cc204f56a5f0618f77e5d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91681-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16aafa3194d4851a07cc204f56a5f0618f77e5d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91681-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91681-1.c?ref=16aafa3194d4851a07cc204f56a5f0618f77e5d7", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2\" } */\n+unsigned __int128 m;\n+\n+unsigned __int128 foo(unsigned __int128 x, unsigned long long y)\n+{\n+    return x + y;\n+}\n+\n+void bar(unsigned __int128 x, unsigned long long y)\n+{\n+    m = x + y;\n+}\n+\n+void baz(unsigned long long y)\n+{\n+    m += y;\n+}\n+\n+/* { dg-final { scan-assembler-not \"xor\" } } */"}, {"sha": "ea52c72ed6bac14888b7862e4e62ff910b062417", "filename": "gcc/testsuite/gcc.target/i386/pr91681-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16aafa3194d4851a07cc204f56a5f0618f77e5d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91681-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16aafa3194d4851a07cc204f56a5f0618f77e5d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91681-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91681-2.c?ref=16aafa3194d4851a07cc204f56a5f0618f77e5d7", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2\" } */\n+unsigned __int128 m;\n+\n+unsigned __int128 foo(unsigned __int128 x, unsigned long long y)\n+{\n+    return x - y;\n+}\n+\n+void bar(unsigned __int128 x, unsigned long long y)\n+{\n+    m = x - y;\n+}\n+\n+void baz(unsigned long long y)\n+{\n+    m -= y;\n+}\n+\n+/* { dg-final { scan-assembler-not \"xor\" } } */"}, {"sha": "22a03c27db2b36bfd27a4898d3d22123cccb5209", "filename": "gcc/testsuite/gcc.target/i386/pr91681-3.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16aafa3194d4851a07cc204f56a5f0618f77e5d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91681-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16aafa3194d4851a07cc204f56a5f0618f77e5d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91681-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91681-3.c?ref=16aafa3194d4851a07cc204f56a5f0618f77e5d7", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2\" } */\n+\n+unsigned long long m;\n+\n+unsigned long long foo(unsigned long long x, unsigned int y)\n+{\n+    return x - y;\n+}\n+\n+void bar(unsigned long long x, unsigned int y)\n+{\n+    m = x - y;\n+}\n+\n+/* { dg-final { scan-assembler-not \"xor\" } } */"}]}