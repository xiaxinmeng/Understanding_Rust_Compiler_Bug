{"sha": "c7f1ff01a2342ffd2873528018e5c3650b791d7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdmMWZmMDFhMjM0MmZmZDI4NzM1MjgwMThlNWMzNjUwYjc5MWQ3ZQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-01-12T10:07:19Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-01-14T08:36:19Z"}, "message": "aarch64: Reimplement vmovn_high_* intrinsics using builtins\n\nThe vmovn_high* intrinsics are supposed to map to XTN2 instructions that\nnarrow their source vector and instert it into the top half of the destination vector.\nThis patch reimplements them away from inline assembly to an RTL builtin\nthat performs a vec_concat with a truncate.\n\ngcc/\n\t* config/aarch64/aarch64-simd.md (aarch64_xtn2<mode>_le):\n\tDefine.\n\t(aarch64_xtn2<mode>_be): Likewise.\n\t(aarch64_xtn2<mode>): Likewise.\n\t* config/aarch64/aarch64-simd-builtins.def (xtn2): Define\n\tbuiltins.\n\t* config/aarch64/arm_neon.h (vmovn_high_s16): Reimplement using\n\tbuiltins.\n\t(vmovn_high_s32): Likewise.\n\t(vmovn_high_s64): Likewise.\n\t(vmovn_high_u16): Likewise.\n\t(vmovn_high_u32): Likewise.\n\t(vmovn_high_u64): Likewise.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/narrow_high-intrinsics.c: Adjust\n\tscan-assembler-times for xtn2.", "tree": {"sha": "26df14b4c978d2685b68214e74c7670a2ed3d3c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26df14b4c978d2685b68214e74c7670a2ed3d3c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7f1ff01a2342ffd2873528018e5c3650b791d7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7f1ff01a2342ffd2873528018e5c3650b791d7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7f1ff01a2342ffd2873528018e5c3650b791d7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7f1ff01a2342ffd2873528018e5c3650b791d7e/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be0851b8e934dfe95881f97dcf98518f92e7508c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be0851b8e934dfe95881f97dcf98518f92e7508c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be0851b8e934dfe95881f97dcf98518f92e7508c"}], "stats": {"total": 86, "additions": 49, "deletions": 37}, "files": [{"sha": "6efc7706a41e02d947753a4cda984159b68bd39f", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f1ff01a2342ffd2873528018e5c3650b791d7e/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f1ff01a2342ffd2873528018e5c3650b791d7e/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=c7f1ff01a2342ffd2873528018e5c3650b791d7e", "patch": "@@ -315,6 +315,9 @@\n   BUILTIN_VSDQ_I (SHIFTIMM, sqshl_n, 0, ALL)\n   BUILTIN_VSDQ_I (USHIFTIMM, uqshl_n, 0, ALL)\n \n+  /* Implemented by aarch64_xtn2<mode>.  */\n+  BUILTIN_VQN (UNOP, xtn2, 0, NONE)\n+\n   /* Implemented by aarch64_reduc_plus_<mode>.  */\n   BUILTIN_VALL (UNOP, reduc_plus_scal_, 10, NONE)\n "}, {"sha": "65209686b7e17afca72aa2477aa26ea2472aef1f", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f1ff01a2342ffd2873528018e5c3650b791d7e/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f1ff01a2342ffd2873528018e5c3650b791d7e/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=c7f1ff01a2342ffd2873528018e5c3650b791d7e", "patch": "@@ -7271,6 +7271,42 @@\n   [(set_attr \"type\" \"neon_shift_imm_narrow_q\")]\n )\n \n+(define_insn \"aarch64_xtn2<mode>_le\"\n+  [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n+\t(vec_concat:<VNARROWQ2>\n+\t  (match_operand:<VNARROWQ> 1 \"register_operand\" \"0\")\n+\t  (truncate:<VNARROWQ> (match_operand:VQN 2 \"register_operand\" \"w\"))))]\n+  \"TARGET_SIMD && !BYTES_BIG_ENDIAN\"\n+  \"xtn2\\t%0.<V2ntype>, %2.<Vtype>\"\n+  [(set_attr \"type\" \"neon_shift_imm_narrow_q\")]\n+)\n+\n+(define_insn \"aarch64_xtn2<mode>_be\"\n+  [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n+\t(vec_concat:<VNARROWQ2>\n+\t  (truncate:<VNARROWQ> (match_operand:VQN 2 \"register_operand\" \"w\"))\n+\t  (match_operand:<VNARROWQ> 1 \"register_operand\" \"0\")))]\n+  \"TARGET_SIMD && BYTES_BIG_ENDIAN\"\n+  \"xtn2\\t%0.<V2ntype>, %2.<Vtype>\"\n+  [(set_attr \"type\" \"neon_shift_imm_narrow_q\")]\n+)\n+\n+(define_expand \"aarch64_xtn2<mode>\"\n+  [(match_operand:<VNARROWQ2> 0 \"register_operand\")\n+   (match_operand:<VNARROWQ> 1 \"register_operand\")\n+   (truncate:<VNARROWQ> (match_operand:VQN 2 \"register_operand\"))]\n+  \"TARGET_SIMD\"\n+  {\n+    if (BYTES_BIG_ENDIAN)\n+      emit_insn (gen_aarch64_xtn2<mode>_be (operands[0], operands[1],\n+\t\t\t\t\t     operands[2]));\n+    else\n+      emit_insn (gen_aarch64_xtn2<mode>_le (operands[0], operands[1],\n+\t\t\t\t\t     operands[2]));\n+    DONE;\n+  }\n+)\n+\n (define_insn \"aarch64_bfdot<mode>\"\n   [(set (match_operand:VDQSF 0 \"register_operand\" \"=w\")\n \t(plus:VDQSF"}, {"sha": "b2a6b58f8c92b896ade449f8f7978fe79c5a114f", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 9, "deletions": 36, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f1ff01a2342ffd2873528018e5c3650b791d7e/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f1ff01a2342ffd2873528018e5c3650b791d7e/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=c7f1ff01a2342ffd2873528018e5c3650b791d7e", "patch": "@@ -8751,72 +8751,45 @@ __extension__ extern __inline int8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovn_high_s16 (int8x8_t __a, int16x8_t __b)\n {\n-  int8x16_t __result = vcombine_s8 (__a, vcreate_s8 (__AARCH64_UINT64_C (0x0)));\n-  __asm__ (\"xtn2 %0.16b,%1.8h\"\n-           : \"+w\"(__result)\n-           : \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_xtn2v8hi (__a, __b);\n }\n \n __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovn_high_s32 (int16x4_t __a, int32x4_t __b)\n {\n-  int16x8_t __result = vcombine_s16 (__a, vcreate_s16 (__AARCH64_UINT64_C (0x0)));\n-  __asm__ (\"xtn2 %0.8h,%1.4s\"\n-           : \"+w\"(__result)\n-           : \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_xtn2v4si (__a, __b);\n }\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovn_high_s64 (int32x2_t __a, int64x2_t __b)\n {\n-  int32x4_t __result = vcombine_s32 (__a, vcreate_s32 (__AARCH64_UINT64_C (0x0)));\n-  __asm__ (\"xtn2 %0.4s,%1.2d\"\n-           : \"+w\"(__result)\n-           : \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_xtn2v2di (__a, __b);\n }\n \n __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovn_high_u16 (uint8x8_t __a, uint16x8_t __b)\n {\n-  uint8x16_t __result = vcombine_u8 (__a, vcreate_u8 (__AARCH64_UINT64_C (0x0)));\n-  __asm__ (\"xtn2 %0.16b,%1.8h\"\n-           : \"+w\"(__result)\n-           : \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return (uint8x16_t)\n+\t   __builtin_aarch64_xtn2v8hi ((int8x8_t) __a, (int16x8_t) __b);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovn_high_u32 (uint16x4_t __a, uint32x4_t __b)\n {\n-  uint16x8_t __result = vcombine_u16 (__a, vcreate_u16 (__AARCH64_UINT64_C (0x0)));\n-  __asm__ (\"xtn2 %0.8h,%1.4s\"\n-           : \"+w\"(__result)\n-           : \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return (uint16x8_t)\n+\t   __builtin_aarch64_xtn2v4si ((int16x4_t) __a, (int32x4_t) __b);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovn_high_u64 (uint32x2_t __a, uint64x2_t __b)\n {\n-  uint32x4_t __result = vcombine_u32 (__a, vcreate_u32 (__AARCH64_UINT64_C (0x0)));\n-  __asm__ (\"xtn2 %0.4s,%1.2d\"\n-           : \"+w\"(__result)\n-           : \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return (uint32x4_t)\n+\t   __builtin_aarch64_xtn2v2di ((int32x2_t) __a, (int64x2_t) __b);\n }\n \n __extension__ extern __inline int8x8_t"}, {"sha": "a2e0cb9b1008f620922d64f06acc3b66795514b0", "filename": "gcc/testsuite/gcc.target/aarch64/narrow_high-intrinsics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f1ff01a2342ffd2873528018e5c3650b791d7e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnarrow_high-intrinsics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f1ff01a2342ffd2873528018e5c3650b791d7e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnarrow_high-intrinsics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnarrow_high-intrinsics.c?ref=c7f1ff01a2342ffd2873528018e5c3650b791d7e", "patch": "@@ -122,4 +122,4 @@ ONE (vmovn_high, uint32x4_t, uint32x2_t, uint64x2_t, u64)\n /* { dg-final { scan-assembler-times \"uqxtn2 v\" 3} }  */\n /* { dg-final { scan-assembler-times \"sqxtn2 v\" 3} }  */\n /* { dg-final { scan-assembler-times \"sqxtun2 v\" 3} }  */\n-/* { dg-final { scan-assembler-times \"\\\\txtn2 v\" 6} }  */\n+/* { dg-final { scan-assembler-times \"\\\\txtn2\\\\tv\" 6} }  */"}]}