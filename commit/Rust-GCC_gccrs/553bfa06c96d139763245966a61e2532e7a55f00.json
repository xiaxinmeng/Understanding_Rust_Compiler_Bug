{"sha": "553bfa06c96d139763245966a61e2532e7a55f00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTUzYmZhMDZjOTZkMTM5NzYzMjQ1OTY2YTYxZTI1MzJlN2E1NWYwMA==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@embecosm.com", "date": "2012-11-28T16:10:18Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2012-11-28T16:10:18Z"}, "message": "epiphany.opt (mfp-iarith): New option.\n\n        * config/epiphany/epiphany.opt (mfp-iarith): New option.\n        * config/epiphany/epiphgany.md (addsi3): Check for TARGET_FP_IARITH.\n        (subsi3, iadd, isub): Rename to ..\n        (subsi3_i, iadd_i, isub_i): .. This.\n        (subsi3, iadd, isub): New define_expands.\n\n        * config/epiphany/epiphgany.md (attribute type): Add v2fp.\n        (attribute fp_mode): Test for v2fp.\n        (<float_operation:insn_opname>v2sf3_i): Change type to v2fp.\n        * config/epiphany/epiphgany-sched.md (fp_arith_nearest, fp_arith_trunc):\n        Combine to ..\n        (fp_arith): .. this. \n        (v2fp_arith): New insn reservation.\n\nFrom-SVN: r193896", "tree": {"sha": "f716ef84e40d55d2c79794f630218d491b9f364c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f716ef84e40d55d2c79794f630218d491b9f364c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/553bfa06c96d139763245966a61e2532e7a55f00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/553bfa06c96d139763245966a61e2532e7a55f00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/553bfa06c96d139763245966a61e2532e7a55f00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/553bfa06c96d139763245966a61e2532e7a55f00/comments", "author": {"login": "amylaar", "id": 1663475, "node_id": "MDQ6VXNlcjE2NjM0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1663475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amylaar", "html_url": "https://github.com/amylaar", "followers_url": "https://api.github.com/users/amylaar/followers", "following_url": "https://api.github.com/users/amylaar/following{/other_user}", "gists_url": "https://api.github.com/users/amylaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amylaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amylaar/subscriptions", "organizations_url": "https://api.github.com/users/amylaar/orgs", "repos_url": "https://api.github.com/users/amylaar/repos", "events_url": "https://api.github.com/users/amylaar/events{/privacy}", "received_events_url": "https://api.github.com/users/amylaar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e9aff0f685e9808d26f7a4509baac1ce42ff4b2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9aff0f685e9808d26f7a4509baac1ce42ff4b2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9aff0f685e9808d26f7a4509baac1ce42ff4b2c"}], "stats": {"total": 91, "additions": 72, "deletions": 19}, "files": [{"sha": "35277bc4d2b09528db9940ee1742be912a7a9054", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553bfa06c96d139763245966a61e2532e7a55f00/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553bfa06c96d139763245966a61e2532e7a55f00/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=553bfa06c96d139763245966a61e2532e7a55f00", "patch": "@@ -6,6 +6,20 @@\n \t* config/epiphany/epiphany.c (REG_OK_FOR_BASE_P): Don't force a\n \tmisaligned stack address to reg+index.\n \n+\t* config/epiphany/epiphany.opt (mfp-iarith): New option.\n+\t* config/epiphany/epiphgany.md (addsi3): Check for TARGET_FP_IARITH.\n+\t(subsi3, iadd, isub): Rename to ..\n+\t(subsi3_i, iadd_i, isub_i): .. This.\n+\t(subsi3, iadd, isub): New define_expands.\n+\n+\t* config/epiphany/epiphgany.md (attribute type): Add v2fp.\n+\t(attribute fp_mode): Test for v2fp.\n+\t(<float_operation:insn_opname>v2sf3_i): Change type to v2fp.\n+\t* config/epiphany/epiphgany-sched.md (fp_arith_nearest, fp_arith_trunc):\n+\tCombine to ..\n+\t(fp_arith): .. this. \n+\t(v2fp_arith): New insn reservation.\n+\n 2012-11-28  Oleg Raikhman  <oleg@adapteva.com>\n \n \t* config/epiphany/epiphany.h (ASM_OUTPUT_ALIGN_WITH_NOP): Define."}, {"sha": "4d425bb6f86facc9702f536a6c0bd95c1c97982f", "filename": "gcc/config/epiphany/epiphany-sched.md", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553bfa06c96d139763245966a61e2532e7a55f00/gcc%2Fconfig%2Fepiphany%2Fepiphany-sched.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553bfa06c96d139763245966a61e2532e7a55f00/gcc%2Fconfig%2Fepiphany%2Fepiphany-sched.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany-sched.md?ref=553bfa06c96d139763245966a61e2532e7a55f00", "patch": "@@ -61,7 +61,7 @@\n        (eq_attr \"length\" \"4\"))\n   \"issue,int\")\n \n-; anything but fp / fp_int has a bypass\n+; anything but fp / fp_int / v2fp has a bypass\n (define_bypass 1 \"simple_arith\" \"simple_arith,simple_arith_2,simple_arith_4,load,store,branch,call,flow\")\n \n (define_insn_reservation \"simple_arith_2\" 2\n@@ -84,7 +84,7 @@\n        (eq_attr \"type\" \"load\"))\n   \"issue,int\")\n \n-; anything but fp / fp_int has a bypass\n+; anything but fp / fp_int / v2fp has a bypass\n (define_bypass 2 \"load\" \"simple_arith,simple_arith_2,simple_arith_4,load,store,branch,call,flow\")\n \n (define_insn_reservation \"store\" 1\n@@ -119,17 +119,20 @@\n        (eq_attr \"type\" \"flow\"))\n   \"d_lock\")\n \f\n-(define_insn_reservation \"fp_arith_trunc\"  3\n+(define_insn_reservation \"fp_arith\"  5\n   (and (eq_attr \"pipe_model\" \"epiphany\")\n-       (and (eq_attr \"type\" \"fp,fp_int\")\n-\t    (eq_attr \"rounding\" \"trunc\")))\n+       (eq_attr \"type\" \"fp,fp_int\"))\n   \"issue,F0\")\n \n-(define_insn_reservation \"fp_arith_nearest\"  5\n-  (and (eq_attr \"pipe_model\" \"epiphany\")\n-       (and (eq_attr \"type\" \"fp,fp_int\")\n-\t    (eq_attr \"rounding\" \"nearest\")))\n-  \"issue,F0\")\n+(define_bypass 4 \"fp_arith\" \"store\")\n \n-(define_bypass 2 \"fp_arith_trunc\" \"store\")\n-(define_bypass 4 \"fp_arith_nearest\" \"store\")\n+; There are two main consumers for v2fp:\n+; - other v2fp operation - in that case, the latencies can dovetail to\n+;   save one cycle of latency.\n+; - 64 bit store operations - we need both registers, but OTOH the latency is\n+; one lower to start with.\n+; of the bypass saving one cyles then.\n+(define_insn_reservation \"v2fp_arith\"  5\n+  (and (eq_attr \"pipe_model\" \"epiphany\")\n+       (eq_attr \"type\" \"v2fp\"))\n+  \"issue,issue+F0,F0\")"}, {"sha": "3a05a2a46a87919ec3cee2f89c21b56725124cb9", "filename": "gcc/config/epiphany/epiphany.md", "status": "modified", "additions": 39, "deletions": 7, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553bfa06c96d139763245966a61e2532e7a55f00/gcc%2Fconfig%2Fepiphany%2Fepiphany.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553bfa06c96d139763245966a61e2532e7a55f00/gcc%2Fconfig%2Fepiphany%2Fepiphany.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.md?ref=553bfa06c96d139763245966a61e2532e7a55f00", "patch": "@@ -57,7 +57,7 @@\n ;; Insn type.  Used to default other attribute values.\n \n (define_attr \"type\"\n-  \"move,load,store,cmove,unary,compare,shift,mul,uncond_branch,branch,call,fp,fp_int,misc,sfunc,fp_sfunc,flow\"\n+  \"move,load,store,cmove,unary,compare,shift,mul,uncond_branch,branch,call,fp,fp_int,v2fp,misc,sfunc,fp_sfunc,flow\"\n   (const_string \"misc\"))\n \n ;; Length (in # bytes)\n@@ -79,7 +79,7 @@\n \t(const_string \"trunc\")))\n \n (define_attr \"fp_mode\" \"round_unknown,round_nearest,round_trunc,int,caller,none\"\n-  (cond [(eq_attr \"type\" \"fp,fp_sfunc\")\n+  (cond [(eq_attr \"type\" \"fp,v2fp,fp_sfunc\")\n \t (symbol_ref \"(enum attr_fp_mode) epiphany_normal_fp_rounding\")\n \t (eq_attr \"type\" \"call\")\n \t (symbol_ref \"(enum attr_fp_mode) epiphany_normal_fp_mode\")\n@@ -414,6 +414,8 @@\n {\n   if (reload_in_progress || reload_completed)\n     emit_insn (gen_addsi3_r (operands[0], operands[1], operands[2]));\n+  else if (TARGET_FP_IARITH && add_reg_operand (operands[2], SImode))\n+    emit_insn (gen_iadd (operands[0], operands[1], operands[2]));\n   else\n     emit_insn (gen_addsi3_i (operands[0], operands[1], operands[2]));\n   DONE;\n@@ -542,7 +544,23 @@\n \t\t\t\t(plus:SI (match_dup 0) (match_dup 1)))))]\n   \"\")\n \n-(define_insn \"subsi3\"\n+(define_expand \"subsi3\"\n+  [(set (match_operand:SI 0 \"gpr_operand\" \"\")\n+\t(plus:SI (match_operand:SI 1 \"add_reg_operand\" \"\")\n+\t\t (match_operand:SI 2 \"arith_operand\" \"\")))]\n+  \"\"\n+  \"\n+{\n+  gcc_assert (!reload_in_progress && !reload_completed);\n+\n+  if (TARGET_FP_IARITH)\n+    emit_insn (gen_isub (operands[0], operands[1], operands[2]));\n+  else\n+    emit_insn (gen_subsi3_i (operands[0], operands[1], operands[2]));\n+  DONE;\n+}\")\n+\n+(define_insn \"subsi3_i\"\n   [(set (match_operand:SI 0 \"gpr_operand\" \"=r\")\n \t(minus:SI (match_operand:SI 1 \"add_reg_operand\" \"r\")\n \t\t  (match_operand:SI 2 \"arith_operand\" \"rL\")))\n@@ -933,7 +951,7 @@\n \n       op1si = simplify_gen_subreg (SImode, operands[1], SFmode, 0);\n       emit_insn (gen_fix_truncsfsi2 (operands[0], operands[1]));\n-      emit_insn (gen_subsi3 (tmp, op1si, bit31));\n+      emit_insn (gen_subsi3_i (tmp, op1si, bit31));\n       emit_insn (gen_ashlsi3 (tmp, tmp, GEN_INT (8)));\n       emit_insn (gen_cmpsi_cc_insn (op1si, limit));\n       emit_insn (gen_movsicc (operands[0], cmp, tmp, operands[0]));\n@@ -962,7 +980,14 @@\n   DONE;\n })\n \n-(define_insn \"*iadd\"\n+(define_expand \"iadd\"\n+  [(parallel\n+     [(set (match_operand:SF 0 \"gpr_operand\" \"\")\n+\t   (plus:SI (match_operand:SF 1 \"gpr_operand\" \"\")\n+\t\t    (match_operand:SF 2 \"gpr_operand\" \"\")))\n+      (clobber (reg:CC_FP CCFP_REGNUM))])])\n+\n+(define_insn \"*iadd_i\"\n   [(match_parallel 3 \"float_operation\"\n      [(set (match_operand:SI 0 \"gpr_operand\" \"=r\")\n \t   (plus:SI (match_operand:SI 1 \"gpr_operand\" \"%r\")\n@@ -972,7 +997,14 @@\n   \"iadd %0, %1, %2\"\n   [(set_attr \"type\" \"fp_int\")])\n \n-(define_insn \"*isub\"\n+(define_expand \"isub\"\n+  [(parallel\n+     [(set (match_operand:SF 0 \"gpr_operand\" \"\")\n+\t   (minus:SI (match_operand:SF 1 \"gpr_operand\" \"\")\n+\t\t     (match_operand:SF 2 \"gpr_operand\" \"\")))\n+      (clobber (reg:CC_FP CCFP_REGNUM))])])\n+\n+(define_insn \"*isub_i\"\n   [(match_parallel 3 \"float_operation\"\n      [(set (match_operand:SI 0 \"gpr_operand\" \"=r\")\n \t   (minus:SI (match_operand:SI 1 \"gpr_operand\" \"r\")\n@@ -2309,7 +2341,7 @@\n   operands[11] = XVECEXP (operands[3], 0, XVECLEN (operands[3], 0) - 1);\n }\n   [(set_attr \"length\" \"8\")\n-   (set_attr \"type\" \"fp\")])\n+   (set_attr \"type\" \"v2fp\")])\n \n (define_expand \"mul<mode>3\"\n   [(parallel"}, {"sha": "cb3a4c764c5fecbbbe1fbe88d32e1da236b72e73", "filename": "gcc/config/epiphany/epiphany.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553bfa06c96d139763245966a61e2532e7a55f00/gcc%2Fconfig%2Fepiphany%2Fepiphany.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553bfa06c96d139763245966a61e2532e7a55f00/gcc%2Fconfig%2Fepiphany%2Fepiphany.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.opt?ref=553bfa06c96d139763245966a61e2532e7a55f00", "patch": "@@ -127,6 +127,10 @@ msplit-vecmove-early\n Target Mask(SPLIT_VECMOVE_EARLY)\n Split unaligned 8 byte vector moves before post-modify address generation.\n \n+mfp-iarith\n+Target Mask(FP_IARITH)\n+Use the floating point unit for integer add/subtract.\n+\n m1reg-\n Target RejectNegative Joined Var(epiphany_m1reg) Enum(m1reg) Init(-1)\n Set register to hold -1."}]}