{"sha": "4b7c558dd0ba4af1796c070a26cdeaf60acbad5e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI3YzU1OGRkMGJhNGFmMTc5NmMwNzBhMjZjZGVhZjYwYWNiYWQ1ZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-03-24T19:38:28Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-03-24T19:38:28Z"}, "message": "re PR c++/65498 (ICE in cxx_eval_call_expression when using __func__ inside dependent context)\n\n\tPR c++/65498\n\t* pt.c (get_mostly_instantiated_function_type): Just return the\n\ttype of the partially instantiated template in DECL_TI_TEMPLATE.\n\nFrom-SVN: r221641", "tree": {"sha": "8526d42aafd74d1e07a883f525fa94b1c78f1de1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8526d42aafd74d1e07a883f525fa94b1c78f1de1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b7c558dd0ba4af1796c070a26cdeaf60acbad5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b7c558dd0ba4af1796c070a26cdeaf60acbad5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b7c558dd0ba4af1796c070a26cdeaf60acbad5e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b7c558dd0ba4af1796c070a26cdeaf60acbad5e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e5bca5f62ed46cc290a5ed458ca808dafa8f9640", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5bca5f62ed46cc290a5ed458ca808dafa8f9640", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5bca5f62ed46cc290a5ed458ca808dafa8f9640"}], "stats": {"total": 106, "additions": 49, "deletions": 57}, "files": [{"sha": "3f948fd18e10d5ca0f3b00390521d786410cabae", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7c558dd0ba4af1796c070a26cdeaf60acbad5e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7c558dd0ba4af1796c070a26cdeaf60acbad5e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4b7c558dd0ba4af1796c070a26cdeaf60acbad5e", "patch": "@@ -1,3 +1,9 @@\n+2015-03-24  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/65498\n+\t* pt.c (get_mostly_instantiated_function_type): Just return the\n+\ttype of the partially instantiated template in DECL_TI_TEMPLATE.\n+\n 2015-03-20  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/65398"}, {"sha": "c649cad75bd61973b9daeda7dba0726b396b23d7", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 56, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7c558dd0ba4af1796c070a26cdeaf60acbad5e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7c558dd0ba4af1796c070a26cdeaf60acbad5e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4b7c558dd0ba4af1796c070a26cdeaf60acbad5e", "patch": "@@ -20748,62 +20748,8 @@ tsubst_enum (tree tag, tree newtag, tree args)\n tree\n get_mostly_instantiated_function_type (tree decl)\n {\n-  tree fn_type;\n-  tree tmpl;\n-  tree targs;\n-  tree tparms;\n-  int parm_depth;\n-\n-  tmpl = most_general_template (DECL_TI_TEMPLATE (decl));\n-  targs = DECL_TI_ARGS (decl);\n-  tparms = DECL_TEMPLATE_PARMS (tmpl);\n-  parm_depth = TMPL_PARMS_DEPTH (tparms);\n-\n-  /* There should be as many levels of arguments as there are levels\n-     of parameters.  */\n-  gcc_assert (parm_depth == TMPL_ARGS_DEPTH (targs));\n-\n-  fn_type = TREE_TYPE (tmpl);\n-\n-  if (parm_depth == 1)\n-    /* No substitution is necessary.  */\n-    ;\n-  else\n-    {\n-      int i;\n-      tree partial_args;\n-\n-      /* Replace the innermost level of the TARGS with NULL_TREEs to\n-\t let tsubst know not to substitute for those parameters.  */\n-      partial_args = make_tree_vec (TREE_VEC_LENGTH (targs));\n-      for (i = 1; i < TMPL_ARGS_DEPTH (targs); ++i)\n-\tSET_TMPL_ARGS_LEVEL (partial_args, i,\n-\t\t\t     TMPL_ARGS_LEVEL (targs, i));\n-      SET_TMPL_ARGS_LEVEL (partial_args,\n-\t\t\t   TMPL_ARGS_DEPTH (targs),\n-\t\t\t   make_tree_vec (DECL_NTPARMS (tmpl)));\n-\n-      /* Make sure that we can see identifiers, and compute access\n-\t correctly.  */\n-      push_access_scope (decl);\n-\n-      ++processing_template_decl;\n-      /* Now, do the (partial) substitution to figure out the\n-\t appropriate function type.  */\n-      fn_type = tsubst (fn_type, partial_args, tf_error, NULL_TREE);\n-      --processing_template_decl;\n-\n-      /* Substitute into the template parameters to obtain the real\n-\t innermost set of parameters.  This step is important if the\n-\t innermost set of template parameters contains value\n-\t parameters whose types depend on outer template parameters.  */\n-      TREE_VEC_LENGTH (partial_args)--;\n-      tparms = tsubst_template_parms (tparms, partial_args, tf_error);\n-\n-      pop_access_scope (decl);\n-    }\n-\n-  return fn_type;\n+  /* For a function, DECL_TI_TEMPLATE is partially instantiated.  */\n+  return TREE_TYPE (DECL_TI_TEMPLATE (decl));\n }\n \n /* Return truthvalue if we're processing a template different from"}, {"sha": "285d6c9c1301447f3bdb7f12eda71e240fdf5867", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-targ2.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7c558dd0ba4af1796c070a26cdeaf60acbad5e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-targ2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7c558dd0ba4af1796c070a26cdeaf60acbad5e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-targ2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-targ2.C?ref=4b7c558dd0ba4af1796c070a26cdeaf60acbad5e", "patch": "@@ -0,0 +1,40 @@\n+// PR c++/65498\n+// { dg-do compile { target c++11 } }\n+\n+template <typename, typename>\n+struct is_same\n+{\n+  enum { value = false };\n+  constexpr bool operator()() const noexcept { return value; }\n+};\n+\n+template <typename T>\n+struct is_same<T, T>\n+{\n+  enum { value = true };\n+  constexpr bool operator()() const noexcept { return value; }\n+};\n+\n+template <bool, typename = void>\n+struct enable_if { };\n+\n+template <typename T>\n+struct enable_if<true, T> { typedef T type; };\n+\n+struct A;\n+\n+template <typename, typename = void>\n+struct F { };\n+\n+template <typename X>\n+struct F<X, typename enable_if<is_same<X, A>{}()>::type> {\n+    template <typename MakeDependent>\n+    F(MakeDependent) {\n+        auto ICE_HERE = __func__;\n+        (void)ICE_HERE; // avoid -Wunused-variable\n+    }\n+};\n+\n+int main() {\n+    F<A>{1};\n+}"}, {"sha": "01fe3f66cf4bee53422ccebe5c759052b06c38ef", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-template13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7c558dd0ba4af1796c070a26cdeaf60acbad5e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-template13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7c558dd0ba4af1796c070a26cdeaf60acbad5e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-template13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-template13.C?ref=4b7c558dd0ba4af1796c070a26cdeaf60acbad5e", "patch": "@@ -20,5 +20,5 @@ void bar ()\n   c.foo (1);\n }\n \n-// { dg-final { scan-assembler \"_ZN8functionC1IZN1CIiE3fooIiEEvT_S_Ed_UlvE_EET_\" } }\n+// { dg-final { scan-assembler \"_ZN8functionC1IZN1CIiE3fooIiEEvT_S_Ed_UlvE_EES4_\" } }\n // { dg-final { scan-assembler-not \"_ZZN1CIiE3fooIiEEvT_8functionEd_NKUlvE_clEv\" } }"}]}