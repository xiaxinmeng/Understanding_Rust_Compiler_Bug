{"sha": "7b8acc34947f7d4a62ccad27c86b19beb3559f59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I4YWNjMzQ5NDdmN2Q0YTYyY2NhZDI3Yzg2YjE5YmViMzU1OWY1OQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2005-08-12T13:49:18Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2005-08-12T13:49:18Z"}, "message": "linux.h (TARGET_THREAD_SSP_OFFSET): Define.\n\n2005-08-12  Andreas Krebbel  <krebbel1@de.ibm.com>\n\t    Jakub Jelinek  <jakub@redhat.com>\n\n\t* config/s390/linux.h (TARGET_THREAD_SSP_OFFSET): Define.\n\t* config/s390/s390-protos.h (s390_get_thread_pointer): Prototype added.\n\t* config/s390/s390.c (print_operand): New output modifier 'G' added.\n\t(get_thread_pointer): Renamed to s390_get_thread_pointer.\n\t* config/s390/s390.md (stack_protect_set, stack_protect_test): If\n\tTARGET_THREAD_SSP_OFFSET is defined, change operands[1] to\n\t(MEM:P (PLUS:P (tp, TARGET_THREAD_SSP_OFFSET))).\n\t(UNSPEC_SP_SET, UNSPEC_SP_TEST): New constants.\n\t(\"stack_protect_set\", \"stack_protect_test\"): New expanders.\n\t(\"stack_protect_setsi\", \"stack_protect_setdi\", \"stack_protect_testsi\",\n\t\"stack_protect_testdi\"): New insn definitions.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r103034", "tree": {"sha": "91f866195d5f6ec59a988d9fde406e5b65966998", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91f866195d5f6ec59a988d9fde406e5b65966998"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b8acc34947f7d4a62ccad27c86b19beb3559f59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b8acc34947f7d4a62ccad27c86b19beb3559f59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b8acc34947f7d4a62ccad27c86b19beb3559f59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b8acc34947f7d4a62ccad27c86b19beb3559f59/comments", "author": null, "committer": null, "parents": [{"sha": "4700982dd772193e78f5d7458ef9ceb0143dd44b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4700982dd772193e78f5d7458ef9ceb0143dd44b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4700982dd772193e78f5d7458ef9ceb0143dd44b"}], "stats": {"total": 107, "additions": 100, "deletions": 7}, "files": [{"sha": "6c0fae6f6a951085ef6a6141dd553853c38ef927", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b8acc34947f7d4a62ccad27c86b19beb3559f59/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b8acc34947f7d4a62ccad27c86b19beb3559f59/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b8acc34947f7d4a62ccad27c86b19beb3559f59", "patch": "@@ -1,3 +1,18 @@\n+2005-08-12  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/s390/linux.h (TARGET_THREAD_SSP_OFFSET): Define.\n+\t* config/s390/s390-protos.h (s390_get_thread_pointer): Prototype added.\n+\t* config/s390/s390.c (print_operand): New output modifier 'G' added.\n+\t(get_thread_pointer): Renamed to s390_get_thread_pointer.\n+\t* config/s390/s390.md (stack_protect_set, stack_protect_test): If\n+\tTARGET_THREAD_SSP_OFFSET is defined, change operands[1] to\n+\t(MEM:P (PLUS:P (tp, TARGET_THREAD_SSP_OFFSET))).\n+\t(UNSPEC_SP_SET, UNSPEC_SP_TEST): New constants.\n+\t(\"stack_protect_set\", \"stack_protect_test\"): New expanders.\n+\t(\"stack_protect_setsi\", \"stack_protect_setdi\", \"stack_protect_testsi\",\n+\t\"stack_protect_testdi\"): New insn definitions.\n+\n 2005-08-12  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* config/s390/s390.md (\"*movdf_31\"): Changed constraint from P to K."}, {"sha": "4f58c734547e87689c7fb3bb3967a92a3030a767", "filename": "gcc/config/s390/linux.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b8acc34947f7d4a62ccad27c86b19beb3559f59/gcc%2Fconfig%2Fs390%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b8acc34947f7d4a62ccad27c86b19beb3559f59/gcc%2Fconfig%2Fs390%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Flinux.h?ref=7b8acc34947f7d4a62ccad27c86b19beb3559f59", "patch": "@@ -94,4 +94,10 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n \n #define MD_UNWIND_SUPPORT \"config/s390/linux-unwind.h\"\n \n+#ifdef TARGET_LIBC_PROVIDES_SSP\n+/* s390 glibc provides __stack_chk_guard in 0x14(tp),\n+   s390x glibc provides it at 0x28(tp).  */\n+#define TARGET_THREAD_SSP_OFFSET        (TARGET_64BIT ? 0x28 : 0x14)\n+#endif\n+\n #endif"}, {"sha": "c9480591b2301487eaec8b835ded201194a42e61", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b8acc34947f7d4a62ccad27c86b19beb3559f59/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b8acc34947f7d4a62ccad27c86b19beb3559f59/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=7b8acc34947f7d4a62ccad27c86b19beb3559f59", "patch": "@@ -91,6 +91,7 @@ extern void s390_initialize_trampoline (rtx, rtx, rtx);\n extern rtx s390_gen_rtx_const_DI (int, int);\n extern int s390_agen_dep_p (rtx, rtx);\n extern rtx s390_load_got (void);\n+extern rtx s390_get_thread_pointer (void);\n extern void s390_emit_tpf_eh_return (rtx);\n extern bool s390_legitimate_address_without_index_p (rtx);\n extern int s390_branch_condition_mask (rtx);"}, {"sha": "b5e1bf7f6fd92a935cd24ceb7682eb0543ce2448", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b8acc34947f7d4a62ccad27c86b19beb3559f59/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b8acc34947f7d4a62ccad27c86b19beb3559f59/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=7b8acc34947f7d4a62ccad27c86b19beb3559f59", "patch": "@@ -2832,8 +2832,8 @@ legitimize_pic_address (rtx orig, rtx reg)\n \n /* Load the thread pointer into a register.  */\n \n-static rtx\n-get_thread_pointer (void)\n+rtx\n+s390_get_thread_pointer (void)\n {\n   rtx tp = gen_reg_rtx (Pmode);\n \n@@ -2893,7 +2893,7 @@ legitimize_tls_address (rtx addr, rtx reg)\n \ttemp = gen_reg_rtx (Pmode);\n \temit_libcall_block (insn, temp, r2, new);\n \n-\tnew = gen_rtx_PLUS (Pmode, get_thread_pointer (), temp);\n+\tnew = gen_rtx_PLUS (Pmode, s390_get_thread_pointer (), temp);\n \tif (reg != 0)\n \t  {\n \t    s390_load_address (reg, new);\n@@ -2916,7 +2916,7 @@ legitimize_tls_address (rtx addr, rtx reg)\n \ttemp = gen_reg_rtx (Pmode);\n \temit_libcall_block (insn, temp, r2, new);\n \n-\tnew = gen_rtx_PLUS (Pmode, get_thread_pointer (), temp);\n+\tnew = gen_rtx_PLUS (Pmode, s390_get_thread_pointer (), temp);\n \tbase = gen_reg_rtx (Pmode);\n \ts390_load_address (base, new);\n \n@@ -3003,7 +3003,7 @@ legitimize_tls_address (rtx addr, rtx reg)\n \t    emit_insn (gen_rtx_SET (Pmode, temp, new));\n \t  }\n \n-\tnew = gen_rtx_PLUS (Pmode, get_thread_pointer (), temp);\n+\tnew = gen_rtx_PLUS (Pmode, s390_get_thread_pointer (), temp);\n \tif (reg != 0)\n \t  {\n \t    s390_load_address (reg, new);\n@@ -3018,7 +3018,7 @@ legitimize_tls_address (rtx addr, rtx reg)\n         temp = gen_reg_rtx (Pmode);\n \temit_move_insn (temp, new);\n \n-\tnew = gen_rtx_PLUS (Pmode, get_thread_pointer (), temp);\n+\tnew = gen_rtx_PLUS (Pmode, s390_get_thread_pointer (), temp);\n \tif (reg != 0)\n \t  {\n \t    s390_load_address (reg, new);\n@@ -3931,6 +3931,7 @@ print_operand_address (FILE *file, rtx addr)\n     'C': print opcode suffix for branch condition.\n     'D': print opcode suffix for inverse branch condition.\n     'J': print tls_load/tls_gdcall/tls_ldcall suffix\n+    'G': print the size of the operand in bytes.\n     'O': print only the displacement of a memory reference.\n     'R': print only the base register of a memory reference.\n     'S': print S-type memory reference (base+displacement).\n@@ -3977,6 +3978,10 @@ print_operand (FILE *file, rtx x, int code)\n \tgcc_unreachable ();\n       return;\n \n+    case 'G':\n+      fprintf (file, \"%u\", GET_MODE_SIZE (GET_MODE (x)));\n+      return;\n+\n     case 'O':\n       {\n         struct s390_address ad;"}, {"sha": "85e0b60b30de4caec5d887dd015a6969daf12c42", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 67, "deletions": 1, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b8acc34947f7d4a62ccad27c86b19beb3559f59/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b8acc34947f7d4a62ccad27c86b19beb3559f59/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=7b8acc34947f7d4a62ccad27c86b19beb3559f59", "patch": "@@ -122,7 +122,11 @@\n    (UNSPEC_TLS_LOAD\t\t512)\n \n    ; String Functions\n-   (UNSPEC_SRST\t\t600)\n+   (UNSPEC_SRST\t\t\t600)\n+   \n+   ; Stack Smashing Protector\n+   (UNSPEC_SP_SET \t\t700)\n+   (UNSPEC_SP_TEST\t\t701)\n  ])\n \n ;;\n@@ -7145,3 +7149,65 @@\n   DONE;\n })\n \n+;\n+; Stack Protector Patterns\n+;\n+\n+(define_expand \"stack_protect_set\"\n+  [(set (match_operand 0 \"memory_operand\" \"\")\n+\t(match_operand 1 \"memory_operand\" \"\"))]\n+  \"\"\n+{\n+#ifdef TARGET_THREAD_SSP_OFFSET\n+  operands[1]\n+    = gen_rtx_MEM (Pmode, gen_rtx_PLUS (Pmode, s390_get_thread_pointer (),\n+                                        GEN_INT (TARGET_THREAD_SSP_OFFSET)));\n+#endif\n+  if (TARGET_64BIT)\n+    emit_insn (gen_stack_protect_setdi (operands[0], operands[1]));\n+  else\n+    emit_insn (gen_stack_protect_setsi (operands[0], operands[1]));\n+\n+  DONE;\n+})\n+\n+(define_insn \"stack_protect_set<mode>\"\n+  [(set (match_operand:DSI 0 \"memory_operand\" \"=Q\")\n+        (unspec:DSI [(match_operand:DSI 1 \"memory_operand\" \"Q\")] UNSPEC_SP_SET))]\n+  \"\"\n+  \"mvc\\t%O0(%G0,%R0),%S1\"\n+  [(set_attr \"op_type\" \"SS\")])\n+\n+(define_expand \"stack_protect_test\"\n+  [(set (reg:CC CC_REGNUM)\n+\t(compare (match_operand 0 \"memory_operand\" \"\")\n+\t\t (match_operand 1 \"memory_operand\" \"\")))\n+   (match_operand 2 \"\" \"\")]\n+  \"\"\n+{\n+#ifdef TARGET_THREAD_SSP_OFFSET\n+  operands[1]\n+    = gen_rtx_MEM (Pmode, gen_rtx_PLUS (Pmode, s390_get_thread_pointer (),\n+                                        GEN_INT (TARGET_THREAD_SSP_OFFSET)));\n+#endif\n+  s390_compare_op0 = operands[0];\n+  s390_compare_op1 = operands[1];\n+  s390_compare_emitted = gen_rtx_REG (CCZmode, CC_REGNUM);\n+\n+  if (TARGET_64BIT)\n+    emit_insn (gen_stack_protect_testdi (operands[0], operands[1]));\n+  else\n+    emit_insn (gen_stack_protect_testsi (operands[0], operands[1]));\n+\n+  emit_jump_insn (gen_beq (operands[2]));\n+\n+  DONE;\n+})\n+\n+(define_insn \"stack_protect_test<mode>\"\n+  [(set (reg:CCZ CC_REGNUM)\n+        (unspec:CCZ [(match_operand:DSI 0 \"memory_operand\" \"Q\")\n+\t\t     (match_operand:DSI 1 \"memory_operand\" \"Q\")] UNSPEC_SP_TEST))]\n+  \"\"\n+  \"clc\\t%O0(%G0,%R0),%S1\"\n+  [(set_attr \"op_type\" \"SS\")])"}]}