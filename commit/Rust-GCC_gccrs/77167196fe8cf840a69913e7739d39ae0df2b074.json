{"sha": "77167196fe8cf840a69913e7739d39ae0df2b074", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzcxNjcxOTZmZThjZjg0MGE2OTkxM2U3NzM5ZDM5YWUwZGYyYjA3NA==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-08-20T10:12:51Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-08-20T10:12:51Z"}, "message": "Fortran: Add OpenMP's error directive\n\nFortran part to the C/C++ implementation of\ncommit r12-3040-g0d973c0a0d90a0a302e7eda1a4d9709be3c5b102\n\ngcc/fortran/ChangeLog:\n\n\t* dump-parse-tree.c (show_omp_clauses): Handle 'at', 'severity'\n\tand 'message' clauses.\n\t(show_omp_node, show_code_node): Handle EXEC_OMP_ERROR.\n\t* gfortran.h (gfc_statement): Add ST_OMP_ERROR.\n\t(gfc_omp_severity_type, gfc_omp_at_type): New.\n\t(gfc_omp_clauses): Add 'at', 'severity' and 'message' clause;\n\tuse more bitfields + ENUM_BITFIELD.\n\t(gfc_exec_op): Add EXEC_OMP_ERROR.\n\t* match.h (gfc_match_omp_error): New.\n\t* openmp.c (enum omp_mask1): Add OMP_CLAUSE_(AT,SEVERITY,MESSAGE).\n\t(gfc_match_omp_clauses): Handle new clauses.\n\t(OMP_ERROR_CLAUSES, gfc_match_omp_error): New.\n\t(resolve_omp_clauses): Resolve new clauses.\n\t(omp_code_to_statement, gfc_resolve_omp_directive): Handle\n\tEXEC_OMP_ERROR.\n\t* parse.c (decode_omp_directive, next_statement,\n\tgfc_ascii_statement): Handle 'omp error'.\n\t* resolve.c (gfc_resolve_blocks): Likewise.\n\t* st.c (gfc_free_statement): Likewise.\n\t* trans-openmp.c (gfc_trans_omp_error): Likewise.\n\t(gfc_trans_omp_directive): Likewise.\n\t* trans.c (trans_code): Likewise.\n\nlibgomp/ChangeLog:\n\n\t* testsuite/libgomp.fortran/error-1.f90: New test.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/gomp/error-1.f90: New test.\n\t* gfortran.dg/gomp/error-2.f90: New test.\n\t* gfortran.dg/gomp/error-3.f90: New test.", "tree": {"sha": "555daa4c2063adabc9c1f1241150bdffdc4b00b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/555daa4c2063adabc9c1f1241150bdffdc4b00b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77167196fe8cf840a69913e7739d39ae0df2b074", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77167196fe8cf840a69913e7739d39ae0df2b074", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77167196fe8cf840a69913e7739d39ae0df2b074", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77167196fe8cf840a69913e7739d39ae0df2b074/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d973c0a0d90a0a302e7eda1a4d9709be3c5b102", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d973c0a0d90a0a302e7eda1a4d9709be3c5b102"}], "stats": {"total": 490, "additions": 465, "deletions": 25}, "files": [{"sha": "c75a0a9d095b93ae34deca39dd23bbe8d0ea4525", "filename": "gcc/fortran/dump-parse-tree.c", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77167196fe8cf840a69913e7739d39ae0df2b074/gcc%2Ffortran%2Fdump-parse-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77167196fe8cf840a69913e7739d39ae0df2b074/gcc%2Ffortran%2Fdump-parse-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdump-parse-tree.c?ref=77167196fe8cf840a69913e7739d39ae0df2b074", "patch": "@@ -1908,6 +1908,26 @@ show_omp_clauses (gfc_omp_clauses *omp_clauses)\n       fputc (' ', dumpfile);\n       fputs (memorder, dumpfile);\n     }\n+  if (omp_clauses->at != OMP_AT_UNSET)\n+    {\n+      if (omp_clauses->at != OMP_AT_COMPILATION)\n+\tfputs (\" AT (COMPILATION)\", dumpfile);\n+      else\n+\tfputs (\" AT (EXECUTION)\", dumpfile);\n+    }\n+  if (omp_clauses->severity != OMP_SEVERITY_UNSET)\n+    {\n+      if (omp_clauses->severity != OMP_SEVERITY_FATAL)\n+\tfputs (\" SEVERITY (FATAL)\", dumpfile);\n+      else\n+\tfputs (\" SEVERITY (WARNING)\", dumpfile);\n+    }\n+  if (omp_clauses->message)\n+    {\n+      fputs (\" ERROR (\", dumpfile);\n+      show_expr (omp_clauses->message);\n+      fputc (')', dumpfile);\n+    }\n }\n \n /* Show a single OpenMP or OpenACC directive node and everything underneath it\n@@ -1950,8 +1970,9 @@ show_omp_node (int level, gfc_code *c)\n     case EXEC_OMP_DISTRIBUTE_SIMD: name = \"DISTRIBUTE SIMD\"; break;\n     case EXEC_OMP_DO: name = \"DO\"; break;\n     case EXEC_OMP_DO_SIMD: name = \"DO SIMD\"; break;\n-    case EXEC_OMP_LOOP: name = \"LOOP\"; break;\n+    case EXEC_OMP_ERROR: name = \"ERROR\"; break;\n     case EXEC_OMP_FLUSH: name = \"FLUSH\"; break;\n+    case EXEC_OMP_LOOP: name = \"LOOP\"; break;\n     case EXEC_OMP_MASKED: name = \"MASKED\"; break;\n     case EXEC_OMP_MASKED_TASKLOOP: name = \"MASKED TASKLOOP\"; break;\n     case EXEC_OMP_MASKED_TASKLOOP_SIMD: name = \"MASKED TASKLOOP SIMD\"; break;\n@@ -2045,6 +2066,7 @@ show_omp_node (int level, gfc_code *c)\n     case EXEC_OMP_DISTRIBUTE_SIMD:\n     case EXEC_OMP_DO:\n     case EXEC_OMP_DO_SIMD:\n+    case EXEC_OMP_ERROR:\n     case EXEC_OMP_LOOP:\n     case EXEC_OMP_ORDERED:\n     case EXEC_OMP_MASKED:\n@@ -2135,7 +2157,7 @@ show_omp_node (int level, gfc_code *c)\n       || c->op == EXEC_OACC_ENTER_DATA || c->op == EXEC_OACC_EXIT_DATA\n       || c->op == EXEC_OMP_TARGET_UPDATE || c->op == EXEC_OMP_TARGET_ENTER_DATA\n       || c->op == EXEC_OMP_TARGET_EXIT_DATA || c->op == EXEC_OMP_SCAN\n-      || c->op == EXEC_OMP_DEPOBJ\n+      || c->op == EXEC_OMP_DEPOBJ || c->op == EXEC_OMP_ERROR\n       || (c->op == EXEC_OMP_ORDERED && c->block == NULL))\n     return;\n   if (c->op == EXEC_OMP_SECTIONS || c->op == EXEC_OMP_PARALLEL_SECTIONS)\n@@ -3268,6 +3290,7 @@ show_code_node (int level, gfc_code *c)\n     case EXEC_OMP_DISTRIBUTE_SIMD:\n     case EXEC_OMP_DO:\n     case EXEC_OMP_DO_SIMD:\n+    case EXEC_OMP_ERROR:\n     case EXEC_OMP_FLUSH:\n     case EXEC_OMP_LOOP:\n     case EXEC_OMP_MASKED:"}, {"sha": "4b26cb430d4318b29f616e53dcdab131e6d4db70", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 39, "deletions": 19, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77167196fe8cf840a69913e7739d39ae0df2b074/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77167196fe8cf840a69913e7739d39ae0df2b074/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=77167196fe8cf840a69913e7739d39ae0df2b074", "patch": "@@ -281,7 +281,8 @@ enum gfc_statement\n   ST_OMP_PARALLEL_MASKED_TASKLOOP_SIMD,\n   ST_OMP_END_PARALLEL_MASKED_TASKLOOP_SIMD, ST_OMP_MASKED_TASKLOOP,\n   ST_OMP_END_MASKED_TASKLOOP, ST_OMP_MASKED_TASKLOOP_SIMD,\n-  ST_OMP_END_MASKED_TASKLOOP_SIMD, ST_OMP_SCOPE, ST_OMP_END_SCOPE, ST_NONE\n+  ST_OMP_END_MASKED_TASKLOOP_SIMD, ST_OMP_SCOPE, ST_OMP_END_SCOPE,\n+  ST_OMP_ERROR, ST_NONE\n };\n \n /* Types of interfaces that we can have.  Assignment interfaces are\n@@ -776,6 +777,20 @@ enum gfc_omp_device_type\n   OMP_DEVICE_TYPE_ANY\n };\n \n+enum gfc_omp_severity_type\n+{\n+  OMP_SEVERITY_UNSET,\n+  OMP_SEVERITY_WARNING,\n+  OMP_SEVERITY_FATAL\n+};\n+\n+enum gfc_omp_at_type\n+{\n+  OMP_AT_UNSET,\n+  OMP_AT_COMPILATION,\n+  OMP_AT_EXECUTION\n+};\n+\n /* Structure and list of supported extension attributes.  */\n typedef enum\n {\n@@ -1446,26 +1461,11 @@ enum gfc_omp_bind_type\n \n typedef struct gfc_omp_clauses\n {\n+  gfc_omp_namelist *lists[OMP_LIST_NUM];\n   struct gfc_expr *if_expr;\n   struct gfc_expr *final_expr;\n   struct gfc_expr *num_threads;\n-  gfc_omp_namelist *lists[OMP_LIST_NUM];\n-  enum gfc_omp_sched_kind sched_kind;\n-  enum gfc_omp_device_type device_type;\n   struct gfc_expr *chunk_size;\n-  enum gfc_omp_default_sharing default_sharing;\n-  enum gfc_omp_defaultmap defaultmap[OMP_DEFAULTMAP_CAT_NUM];\n-  int collapse, orderedc;\n-  bool nowait, ordered, untied, mergeable;\n-  bool inbranch, notinbranch, nogroup;\n-  bool sched_simd, sched_monotonic, sched_nonmonotonic;\n-  bool simd, threads, depend_source, destroy, order_concurrent, capture;\n-  enum gfc_omp_atomic_op atomic_op;\n-  enum gfc_omp_memorder memorder;\n-  enum gfc_omp_cancel_kind cancel;\n-  enum gfc_omp_proc_bind_kind proc_bind;\n-  enum gfc_omp_depend_op depobj_update;\n-  enum gfc_omp_bind_type bind;\n   struct gfc_expr *safelen_expr;\n   struct gfc_expr *simdlen_expr;\n   struct gfc_expr *num_teams;\n@@ -1479,9 +1479,28 @@ typedef struct gfc_omp_clauses\n   struct gfc_expr *detach;\n   struct gfc_expr *depobj;\n   struct gfc_expr *if_exprs[OMP_IF_LAST];\n-  enum gfc_omp_sched_kind dist_sched_kind;\n   struct gfc_expr *dist_chunk_size;\n+  struct gfc_expr *message;\n   const char *critical_name;\n+  enum gfc_omp_default_sharing default_sharing;\n+  enum gfc_omp_atomic_op atomic_op;\n+  enum gfc_omp_defaultmap defaultmap[OMP_DEFAULTMAP_CAT_NUM];\n+  int collapse, orderedc;\n+  unsigned nowait:1, ordered:1, untied:1, mergeable:1;\n+  unsigned inbranch:1, notinbranch:1, nogroup:1;\n+  unsigned sched_simd:1, sched_monotonic:1, sched_nonmonotonic:1;\n+  unsigned simd:1, threads:1, depend_source:1, destroy:1, order_concurrent:1;\n+  unsigned capture:1;\n+  ENUM_BITFIELD (gfc_omp_sched_kind) sched_kind:3;\n+  ENUM_BITFIELD (gfc_omp_device_type) device_type:2;\n+  ENUM_BITFIELD (gfc_omp_memorder) memorder:3;\n+  ENUM_BITFIELD (gfc_omp_cancel_kind) cancel:3;\n+  ENUM_BITFIELD (gfc_omp_proc_bind_kind) proc_bind:3;\n+  ENUM_BITFIELD (gfc_omp_depend_op) depobj_update:3;\n+  ENUM_BITFIELD (gfc_omp_bind_type) bind:2;\n+  ENUM_BITFIELD (gfc_omp_at_type) at:2;\n+  ENUM_BITFIELD (gfc_omp_severity_type) severity:2;\n+  ENUM_BITFIELD (gfc_omp_sched_kind) dist_sched_kind:3;\n \n   /* OpenACC. */\n   struct gfc_expr *async_expr;\n@@ -2768,7 +2787,8 @@ enum gfc_exec_op\n   EXEC_OMP_TEAMS_LOOP, EXEC_OMP_TARGET_PARALLEL_LOOP,\n   EXEC_OMP_TARGET_TEAMS_LOOP, EXEC_OMP_MASKED, EXEC_OMP_PARALLEL_MASKED,\n   EXEC_OMP_PARALLEL_MASKED_TASKLOOP, EXEC_OMP_PARALLEL_MASKED_TASKLOOP_SIMD,\n-  EXEC_OMP_MASKED_TASKLOOP, EXEC_OMP_MASKED_TASKLOOP_SIMD, EXEC_OMP_SCOPE\n+  EXEC_OMP_MASKED_TASKLOOP, EXEC_OMP_MASKED_TASKLOOP_SIMD, EXEC_OMP_SCOPE,\n+  EXEC_OMP_ERROR\n };\n \n typedef struct gfc_code"}, {"sha": "92fd127a57f33c030d8e4bc1ed9608b473ee6e0a", "filename": "gcc/fortran/match.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77167196fe8cf840a69913e7739d39ae0df2b074/gcc%2Ffortran%2Fmatch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77167196fe8cf840a69913e7739d39ae0df2b074/gcc%2Ffortran%2Fmatch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.h?ref=77167196fe8cf840a69913e7739d39ae0df2b074", "patch": "@@ -168,6 +168,7 @@ match gfc_match_omp_distribute_simd (void);\n match gfc_match_omp_do (void);\n match gfc_match_omp_do_simd (void);\n match gfc_match_omp_loop (void);\n+match gfc_match_omp_error (void);\n match gfc_match_omp_flush (void);\n match gfc_match_omp_masked (void);\n match gfc_match_omp_masked_taskloop (void);"}, {"sha": "2380866cc3ba72a96ffe40882b34ea09257e82ef", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 122, "deletions": 2, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77167196fe8cf840a69913e7739d39ae0df2b074/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77167196fe8cf840a69913e7739d39ae0df2b074/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=77167196fe8cf840a69913e7739d39ae0df2b074", "patch": "@@ -28,6 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"constructor.h\"\n #include \"diagnostic.h\"\n #include \"gomp-constants.h\"\n+#include \"target-memory.h\"  /* For gfc_encode_character.  */\n \n /* Match an end of OpenMP directive.  End of OpenMP directive is optional\n    whitespace, followed by '\\n' or comment '!'.  */\n@@ -848,6 +849,9 @@ enum omp_mask1\n   OMP_CLAUSE_AFFINITY,  /* OpenMP 5.0.  */\n   OMP_CLAUSE_BIND,  /* OpenMP 5.0.  */\n   OMP_CLAUSE_FILTER,  /* OpenMP 5.1.  */\n+  OMP_CLAUSE_AT,  /* OpenMP 5.1.  */\n+  OMP_CLAUSE_MESSAGE,  /* OpenMP 5.1.  */\n+  OMP_CLAUSE_SEVERITY,  /* OpenMP 5.1.  */\n   OMP_CLAUSE_NOWAIT,\n   /* This must come last.  */\n   OMP_MASK1_LAST\n@@ -1293,6 +1297,7 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t\t       bool first = true, bool needs_space = true,\n \t\t       bool openacc = false)\n {\n+  bool error = false;\n   gfc_omp_clauses *c = gfc_get_omp_clauses ();\n   locus old_loc;\n   /* Determine whether we're dealing with an OpenACC directive that permits\n@@ -1392,6 +1397,22 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t\t}\n \t      continue;\n \t    }\n+\t  if ((mask & OMP_CLAUSE_AT)\n+\t      && c->at == OMP_AT_UNSET\n+\t      && gfc_match (\"at ( \") == MATCH_YES)\n+\t    {\n+\t      if (gfc_match (\"compilation )\") == MATCH_YES)\n+\t\tc->at = OMP_AT_COMPILATION;\n+\t      else if (gfc_match (\"execution )\") == MATCH_YES)\n+\t\tc->at = OMP_AT_EXECUTION;\n+\t      else\n+\t\t{\n+\t\t  gfc_error (\"Expected COMPILATION or EXECUTION in AT clause \"\n+\t\t\t     \"at %C\");\n+\t\t  goto error;\n+\t\t}\n+\t      continue;\n+\t    }\n \t  if ((mask & OMP_CLAUSE_ASYNC)\n \t      && !c->async\n \t      && gfc_match (\"async\") == MATCH_YES)\n@@ -1616,7 +1637,7 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t\t     else\n \t\t      gfc_error (\"DEFAULTMAP at %C but prior DEFAULTMAP for \"\n \t\t\t\t \"category %s\", pcategory);\n-\t\t     goto end;\n+\t\t     goto error;\n \t\t    }\n \t\t}\n \t      c->defaultmap[category] = behavior;\n@@ -2074,6 +2095,10 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t      c->mergeable = needs_space = true;\n \t      continue;\n \t    }\n+\t  if ((mask & OMP_CLAUSE_MESSAGE)\n+\t      && !c->message\n+\t      && gfc_match (\"message ( %e )\", &c->message) == MATCH_YES)\n+\t    continue;\n \t  break;\n \tcase 'n':\n \t  if ((mask & OMP_CLAUSE_NO_CREATE)\n@@ -2402,6 +2427,22 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t      c->simd = needs_space = true;\n \t      continue;\n \t    }\n+\t  if ((mask & OMP_CLAUSE_SEVERITY)\n+\t      && c->severity == OMP_SEVERITY_UNSET\n+\t      && gfc_match (\"severity ( \") == MATCH_YES)\n+\t    {\n+\t      if (gfc_match (\"fatal )\") == MATCH_YES)\n+\t\tc->severity = OMP_SEVERITY_FATAL;\n+\t      else if (gfc_match (\"warning )\") == MATCH_YES)\n+\t\tc->severity = OMP_SEVERITY_WARNING;\n+\t      else\n+\t\t{\n+\t\t  gfc_error (\"Expected FATAL or WARNING in SEVERITY clause \"\n+\t\t\t     \"at %C\");\n+\t\t  goto error;\n+\t\t}\n+\t      continue;\n+\t    }\n \t  break;\n \tcase 't':\n \t  if ((mask & OMP_CLAUSE_TASK_REDUCTION)\n@@ -2553,7 +2594,7 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n     }\n \n end:\n-  if (gfc_match_omp_eos () != MATCH_YES)\n+  if (error || gfc_match_omp_eos () != MATCH_YES)\n     {\n       if (!gfc_error_flag_test ())\n \tgfc_error (\"Failed to match clause at %C\");\n@@ -2563,6 +2604,10 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \n   *cp = c;\n   return MATCH_YES;\n+\n+error:\n+  error = true;\n+  goto end;\n }\n \n \n@@ -3208,6 +3253,9 @@ gfc_match_oacc_routine (void)\n    | OMP_CLAUSE_MEMORDER)\n #define OMP_MASKED_CLAUSES \\\n   (omp_mask (OMP_CLAUSE_FILTER))\n+#define OMP_ERROR_CLAUSES \\\n+  (omp_mask (OMP_CLAUSE_AT) | OMP_CLAUSE_MESSAGE | OMP_CLAUSE_SEVERITY)\n+\n \n \n static match\n@@ -3431,6 +3479,66 @@ gfc_match_omp_target_parallel_loop (void)\n }\n \n \n+match\n+gfc_match_omp_error (void)\n+{\n+  locus loc = gfc_current_locus;\n+  match m = match_omp (EXEC_OMP_ERROR, OMP_ERROR_CLAUSES);\n+  if (m != MATCH_YES)\n+    return m;\n+\n+  gfc_omp_clauses *c = new_st.ext.omp_clauses;\n+  if (c->severity == OMP_SEVERITY_UNSET)\n+    c->severity = OMP_SEVERITY_FATAL;\n+  if (new_st.ext.omp_clauses->at == OMP_AT_EXECUTION)\n+    return MATCH_YES;\n+  if (c->message\n+      && (!gfc_resolve_expr (c->message)\n+\t  || c->message->ts.type != BT_CHARACTER\n+\t  || c->message->ts.kind != gfc_default_character_kind\n+\t  || c->message->rank != 0))\n+    {\n+      gfc_error (\"MESSAGE clause at %L requires a scalar default-kind \"\n+\t\t   \"CHARACTER expression\",\n+\t\t &new_st.ext.omp_clauses->message->where);\n+      return MATCH_ERROR;\n+    }\n+  if (c->message && !gfc_is_constant_expr (c->message))\n+    {\n+      gfc_error (\"Constant character expression required in MESSAGE clause \"\n+\t\t \"at %L\", &new_st.ext.omp_clauses->message->where);\n+      return MATCH_ERROR;\n+    }\n+  if (c->message)\n+    {\n+      const char *msg = G_(\"$OMP ERROR encountered at %L: %s\");\n+      gcc_assert (c->message->expr_type == EXPR_CONSTANT);\n+      gfc_charlen_t slen = c->message->value.character.length;\n+      int i = gfc_validate_kind (BT_CHARACTER, gfc_default_character_kind,\n+\t\t\t\t false);\n+      size_t size = slen * gfc_character_kinds[i].bit_size / 8;\n+      unsigned char *s = XCNEWVAR (unsigned char, size + 1);\n+      gfc_encode_character (gfc_default_character_kind, slen,\n+\t\t\t    c->message->value.character.string,\n+\t\t\t    (unsigned char *) s, size);\n+      s[size] = '\\0';\n+      if (c->severity == OMP_SEVERITY_WARNING)\n+\tgfc_warning_now (0, msg, &loc, s);\n+      else\n+\tgfc_error_now (msg, &loc, s);\n+      free (s);\n+    }\n+  else\n+    {\n+      const char *msg = G_(\"$OMP ERROR encountered at %L\");\n+      if (c->severity == OMP_SEVERITY_WARNING)\n+\tgfc_warning_now (0, msg, &loc);\n+      else\n+\tgfc_error_now (msg, &loc);\n+    }\n+  return MATCH_YES;\n+}\n+\n match\n gfc_match_omp_flush (void)\n {\n@@ -6463,6 +6571,15 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n   if (omp_clauses->depend_source && code->op != EXEC_OMP_ORDERED)\n     gfc_error (\"SOURCE dependence type only allowed \"\n \t       \"on ORDERED directive at %L\", &code->loc);\n+  if (omp_clauses->message)\n+    {\n+      gfc_expr *expr = omp_clauses->message;\n+      if (!gfc_resolve_expr (expr)\n+\t  || expr->ts.kind != gfc_default_character_kind\n+\t  || expr->ts.type != BT_CHARACTER || expr->rank != 0)\n+\tgfc_error (\"MESSAGE clause at %L requires a scalar default-kind \"\n+\t\t   \"CHARACTER expression\", &expr->where);\n+    }\n   if (!openacc\n       && code\n       && omp_clauses->lists[OMP_LIST_MAP] == NULL\n@@ -7461,6 +7578,8 @@ omp_code_to_statement (gfc_code *code)\n       return ST_OMP_CANCEL;\n     case EXEC_OMP_CANCELLATION_POINT:\n       return ST_OMP_CANCELLATION_POINT;\n+    case EXEC_OMP_ERROR:\n+      return ST_OMP_ERROR;\n     case EXEC_OMP_FLUSH:\n       return ST_OMP_FLUSH;\n     case EXEC_OMP_DISTRIBUTE:\n@@ -7971,6 +8090,7 @@ gfc_resolve_omp_directive (gfc_code *code, gfc_namespace *ns)\n       resolve_omp_do (code);\n       break;\n     case EXEC_OMP_CANCEL:\n+    case EXEC_OMP_ERROR:\n     case EXEC_OMP_MASKED:\n     case EXEC_OMP_PARALLEL_WORKSHARE:\n     case EXEC_OMP_PARALLEL:"}, {"sha": "d37a0b5a697dfbc0e4a4d51ab09ea644d198d961", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77167196fe8cf840a69913e7739d39ae0df2b074/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77167196fe8cf840a69913e7739d39ae0df2b074/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=77167196fe8cf840a69913e7739d39ae0df2b074", "patch": "@@ -908,6 +908,7 @@ decode_omp_directive (void)\n       matcho (\"do\", gfc_match_omp_do, ST_OMP_DO);\n       break;\n     case 'e':\n+      matcho (\"error\", gfc_match_omp_error, ST_OMP_ERROR);\n       matcho (\"end atomic\", gfc_match_omp_eos_error, ST_OMP_END_ATOMIC);\n       matcho (\"end critical\", gfc_match_omp_end_critical, ST_OMP_END_CRITICAL);\n       matchs (\"end distribute parallel do simd\", gfc_match_omp_eos_error,\n@@ -1183,6 +1184,9 @@ decode_omp_directive (void)\n \t  prog_unit->omp_target_seen = true;\n \tbreak;\n       }\n+    case ST_OMP_ERROR:\n+      if (new_st.ext.omp_clauses->at != OMP_AT_EXECUTION)\n+\treturn ST_NONE;\n     default:\n       break;\n     }\n@@ -1654,7 +1658,7 @@ next_statement (void)\n   case ST_OMP_BARRIER: case ST_OMP_TASKWAIT: case ST_OMP_TASKYIELD: \\\n   case ST_OMP_CANCEL: case ST_OMP_CANCELLATION_POINT: case ST_OMP_DEPOBJ: \\\n   case ST_OMP_TARGET_UPDATE: case ST_OMP_TARGET_ENTER_DATA: \\\n-  case ST_OMP_TARGET_EXIT_DATA: case ST_OMP_ORDERED_DEPEND: \\\n+  case ST_OMP_TARGET_EXIT_DATA: case ST_OMP_ORDERED_DEPEND: case ST_OMP_ERROR: \\\n   case ST_ERROR_STOP: case ST_OMP_SCAN: case ST_SYNC_ALL: \\\n   case ST_SYNC_IMAGES: case ST_SYNC_MEMORY: case ST_LOCK: case ST_UNLOCK: \\\n   case ST_FORM_TEAM: case ST_CHANGE_TEAM: \\\n@@ -1716,7 +1720,6 @@ next_statement (void)\n   case ST_OMP_DECLARE_TARGET: case ST_OMP_DECLARE_REDUCTION: \\\n   case ST_OMP_REQUIRES: case ST_OACC_ROUTINE: case ST_OACC_DECLARE\n \n-\n /* Block end statements.  Errors associated with interchanging these\n    are detected in gfc_match_end().  */\n \n@@ -2544,6 +2547,9 @@ gfc_ascii_statement (gfc_statement st)\n     case ST_OMP_END_WORKSHARE:\n       p = \"!$OMP END WORKSHARE\";\n       break;\n+    case ST_OMP_ERROR:\n+      p = \"!$OMP ERROR\";\n+      break;\n     case ST_OMP_FLUSH:\n       p = \"!$OMP FLUSH\";\n       break;"}, {"sha": "5b9ba43780e54dea2ad5bf8dfe152ec2c5e90aa9", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77167196fe8cf840a69913e7739d39ae0df2b074/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77167196fe8cf840a69913e7739d39ae0df2b074/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=77167196fe8cf840a69913e7739d39ae0df2b074", "patch": "@@ -10817,6 +10817,7 @@ gfc_resolve_blocks (gfc_code *b, gfc_namespace *ns)\n \tcase EXEC_OMP_DISTRIBUTE_SIMD:\n \tcase EXEC_OMP_DO:\n \tcase EXEC_OMP_DO_SIMD:\n+\tcase EXEC_OMP_ERROR:\n \tcase EXEC_OMP_LOOP:\n \tcase EXEC_OMP_MASKED:\n \tcase EXEC_OMP_MASKED_TASKLOOP:\n@@ -12254,6 +12255,7 @@ gfc_resolve_code (gfc_code *code, gfc_namespace *ns)\n \tcase EXEC_OMP_DISTRIBUTE_SIMD:\n \tcase EXEC_OMP_DO:\n \tcase EXEC_OMP_DO_SIMD:\n+\tcase EXEC_OMP_ERROR:\n \tcase EXEC_OMP_LOOP:\n \tcase EXEC_OMP_MASTER:\n \tcase EXEC_OMP_MASTER_TASKLOOP:"}, {"sha": "6bf730c9062f1be5f88e451dee77acb09dada3c0", "filename": "gcc/fortran/st.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77167196fe8cf840a69913e7739d39ae0df2b074/gcc%2Ffortran%2Fst.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77167196fe8cf840a69913e7739d39ae0df2b074/gcc%2Ffortran%2Fst.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fst.c?ref=77167196fe8cf840a69913e7739d39ae0df2b074", "patch": "@@ -225,6 +225,7 @@ gfc_free_statement (gfc_code *p)\n     case EXEC_OMP_DISTRIBUTE_SIMD:\n     case EXEC_OMP_DO:\n     case EXEC_OMP_DO_SIMD:\n+    case EXEC_OMP_ERROR:\n     case EXEC_OMP_LOOP:\n     case EXEC_OMP_END_SINGLE:\n     case EXEC_OMP_MASKED_TASKLOOP:"}, {"sha": "91888f31cb33c30c332d46602a654992a2f9dc00", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77167196fe8cf840a69913e7739d39ae0df2b074/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77167196fe8cf840a69913e7739d39ae0df2b074/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=77167196fe8cf840a69913e7739d39ae0df2b074", "patch": "@@ -5368,6 +5368,38 @@ gfc_trans_omp_depobj (gfc_code *code)\n   return gfc_finish_block (&block);\n }\n \n+static tree\n+gfc_trans_omp_error (gfc_code *code)\n+{\n+  stmtblock_t block;\n+  gfc_se se;\n+  tree len, message;\n+  bool fatal = code->ext.omp_clauses->severity == OMP_SEVERITY_FATAL;\n+  tree fndecl = builtin_decl_explicit (fatal ? BUILT_IN_GOMP_ERROR\n+\t\t\t\t\t     : BUILT_IN_GOMP_WARNING);\n+  gfc_start_block (&block);\n+  gfc_init_se (&se, NULL );\n+  if (!code->ext.omp_clauses->message)\n+    {\n+      message = null_pointer_node;\n+      len = build_int_cst (size_type_node, 0);\n+    }\n+  else\n+    {\n+      gfc_conv_expr (&se, code->ext.omp_clauses->message);\n+      message = se.expr;\n+      if (!POINTER_TYPE_P (TREE_TYPE (message)))\n+\t/* To ensure an ARRAY_TYPE is not passed as such.  */\n+\tmessage = gfc_build_addr_expr (NULL, message);\n+      len = se.string_length;\n+    }\n+  gfc_add_block_to_block (&block, &se.pre);\n+  gfc_add_expr_to_block (&block, build_call_expr_loc (input_location, fndecl,\n+\t\t\t\t\t\t      2, message, len));\n+  gfc_add_block_to_block (&block, &se.post);\n+  return gfc_finish_block (&block);\n+}\n+\n static tree\n gfc_trans_omp_flush (gfc_code *code)\n {\n@@ -7096,6 +7128,8 @@ gfc_trans_omp_directive (gfc_code *code)\n       return gfc_trans_omp_distribute (code, NULL);\n     case EXEC_OMP_DO_SIMD:\n       return gfc_trans_omp_do_simd (code, NULL, NULL, NULL_TREE);\n+    case EXEC_OMP_ERROR:\n+      return gfc_trans_omp_error (code);\n     case EXEC_OMP_FLUSH:\n       return gfc_trans_omp_flush (code);\n     case EXEC_OMP_MASKED:"}, {"sha": "eb5682a7cda31fa1b3714e1eee484365ad5cb6f1", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77167196fe8cf840a69913e7739d39ae0df2b074/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77167196fe8cf840a69913e7739d39ae0df2b074/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=77167196fe8cf840a69913e7739d39ae0df2b074", "patch": "@@ -2155,6 +2155,7 @@ trans_code (gfc_code * code, tree cond)\n \tcase EXEC_OMP_DO:\n \tcase EXEC_OMP_DO_SIMD:\n \tcase EXEC_OMP_LOOP:\n+\tcase EXEC_OMP_ERROR:\n \tcase EXEC_OMP_FLUSH:\n \tcase EXEC_OMP_MASKED:\n \tcase EXEC_OMP_MASKED_TASKLOOP:"}, {"sha": "0ee0b4bfbcc01a6bed18b3da0e6a3a10ffb1f766", "filename": "gcc/testsuite/gfortran.dg/gomp/error-1.f90", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77167196fe8cf840a69913e7739d39ae0df2b074/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Ferror-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77167196fe8cf840a69913e7739d39ae0df2b074/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Ferror-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Ferror-1.f90?ref=77167196fe8cf840a69913e7739d39ae0df2b074", "patch": "@@ -0,0 +1,51 @@\n+! { dg-additional-options \"-ffree-line-length-none\" }\n+module m\n+!$omp error\t\t\t! { dg-error \".OMP ERROR encountered at .1.\" }\n+!$omp error at(compilation)\t! { dg-error \".OMP ERROR encountered at .1.\" }\n+!$omp error severity(fatal)\t! { dg-error \".OMP ERROR encountered at .1.\" }\n+!$omp error message(\"my msg\")\t! { dg-error \".OMP ERROR encountered at .1.: my msg\" }\n+!$omp error severity(warning)message(\"another message\")at(compilation)\t! { dg-warning \".OMP ERROR encountered at .1.: another message\" }\n+\n+type S\n+  !$omp error\t\t\t! { dg-error \".OMP ERROR encountered at .1.\" }\n+  !$omp error at(compilation)\t! { dg-error \".OMP ERROR encountered at .1.\" }\n+  !$omp error severity(fatal)\t! { dg-error \".OMP ERROR encountered at .1.\" }\n+  !$omp error message(\"42\")\t! { dg-error \".OMP ERROR encountered at .1.: 42\" }\n+  !$omp error severity(warning), message(\"foo\"), at(compilation)\t! { dg-warning \".OMP ERROR encountered at .1.: foo\" }\n+  integer s\n+end type S\n+end module m\n+\n+integer function foo (i, x)\n+  integer :: i\n+  logical :: x\n+  !$omp error\t\t\t! { dg-error \".OMP ERROR encountered at .1.\" }\n+  !$omp error at(compilation)\t! { dg-error \".OMP ERROR encountered at .1.\" }\n+  !$omp error severity(fatal)\t! { dg-error \".OMP ERROR encountered at .1.\" }\n+  !$omp error message(\"42 / 1\")\t! { dg-error \".OMP ERROR encountered at .1.: 42 / 1\" }\n+  !$omp error severity(warning) message(\"bar\") at(compilation)\t! { dg-warning \".OMP ERROR encountered at .1.: bar\" }\n+  if (x) then\n+    !$omp error\t\t\t! { dg-error \".OMP ERROR encountered at .1.\" }\n+    i = i + 1\n+  end if\n+  if (x) then\n+    ;\n+  else\n+    !$omp error at(compilation)\t! { dg-error \".OMP ERROR encountered at .1.\" }\n+    i = i + 1\n+  end if\n+  select case (.false.)\n+    !$omp error severity(fatal)\t! { dg-error \".OMP ERROR encountered at .1.\" }\n+    case default\n+      !\n+  end select\n+  do while (.false.)\n+    !$omp error message(\"42 - 1\")\t! { dg-error \".OMP ERROR encountered at .1.: 42 - 1\" }\n+    i = i + 1\n+  end do\n+  lab:\n+  !$omp error severity(warning) message(\"bar\") at(compilation)\t! { dg-warning \".OMP ERROR encountered at .1.: bar\" }\n+    i++;\n+  foo = i\n+  return\n+end"}, {"sha": "718e82cead982f4eb7042b8a36eb201c2281fc90", "filename": "gcc/testsuite/gfortran.dg/gomp/error-2.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77167196fe8cf840a69913e7739d39ae0df2b074/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Ferror-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77167196fe8cf840a69913e7739d39ae0df2b074/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Ferror-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Ferror-2.f90?ref=77167196fe8cf840a69913e7739d39ae0df2b074", "patch": "@@ -0,0 +1,15 @@\n+subroutine foo (x, msg1, msg2)\n+  integer x\n+  character(len=*) :: msg1, msg2\n+  if (x == 0) then\n+      !$omp error at(execution)\n+  else if (x == 1) then\n+      !$omp error severity (warning), at (execution)\n+  else if (x == 2) then\n+      !$omp error at ( execution ) severity (fatal) message (\"baz\")\n+  else if (x == 3) then\n+      !$omp error severity(warning) message (msg1) at(execution)\n+  else\n+      !$omp error message (msg2), at(execution), severity(fatal)\n+  end if\n+end"}, {"sha": "67948cdc52a7ded0d3caf7e9660c13e3c45b3fa3", "filename": "gcc/testsuite/gfortran.dg/gomp/error-3.f90", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77167196fe8cf840a69913e7739d39ae0df2b074/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Ferror-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77167196fe8cf840a69913e7739d39ae0df2b074/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Ferror-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Ferror-3.f90?ref=77167196fe8cf840a69913e7739d39ae0df2b074", "patch": "@@ -0,0 +1,88 @@\n+module m\n+!$omp error asdf\t\t\t! { dg-error \"Failed to match clause\" }\n+!$omp error at\t\t\t\t! { dg-error \"Failed to match clause\" }\n+!$omp error at(\t\t\t\t! { dg-error \"Expected COMPILATION or EXECUTION in AT clause at\" }\n+!$omp error at(runtime)\t\t\t! { dg-error \"Expected COMPILATION or EXECUTION in AT clause at\" }\n+!$omp error at(+\t\t\t! { dg-error \"Expected COMPILATION or EXECUTION in AT clause at\" }\n+!$omp error at(compilation\t\t! { dg-error \"Expected COMPILATION or EXECUTION in AT clause at\" }\n+!$omp error severity\t\t\t! { dg-error \"Failed to match clause\" }\n+!$omp error severity(\t\t\t! { dg-error \"Expected FATAL or WARNING in SEVERITY clause at\" }\n+!$omp error severity(error)\t\t! { dg-error \"Expected FATAL or WARNING in SEVERITY clause at\" }\n+!$omp error severity(-\t\t\t! { dg-error \"Expected FATAL or WARNING in SEVERITY clause at\" }\n+!$omp error severity(fatal\t\t! { dg-error \"Expected FATAL or WARNING in SEVERITY clause at\" }\n+!$omp error message\t\t\t! { dg-error \"Failed to match clause\" }\n+!$omp error message(\t\t\t! { dg-error \"Invalid character in name\" }\n+!$omp error message(0\t\t\t! { dg-error \"Failed to match clause\" }\n+!$omp error message(\"foo\"\t\t! { dg-error \"Failed to match clause\" }\n+\n+!$omp error at(compilation) at(compilation)\t! { dg-error \"Failed to match clause at\" }\n+!$omp error severity(fatal) severity(warning)\t! { dg-error \"Failed to match clause at\" }\n+!$omp error message(\"foo\") message(\"foo\")\t! { dg-error \"Failed to match clause at\" }\n+!$omp error message(\"foo\"),at(compilation),severity(fatal),asdf\t! { dg-error \"Failed to match clause\" }\n+\n+!$omp error at(execution)\t\t\t! { dg-error \"Unexpected !.OMP ERROR statement in MODULE\" }\n+\n+end module\n+\n+module m2\n+character(len=10) :: msg\n+!$omp error message(1)\t\t\t! { dg-error \"MESSAGE clause at .1. requires a scalar default-kind CHARACTER expression\" }\n+!$omp error message(1.2)\t\t! { dg-error \"MESSAGE clause at .1. requires a scalar default-kind CHARACTER expression\" }\n+!$omp error message(4_\"foo\")\t\t! { dg-error \"MESSAGE clause at .1. requires a scalar default-kind CHARACTER expression\" }\n+!$omp error message([\"bar\",\"bar\"])\t! { dg-error \"MESSAGE clause at .1. requires a scalar default-kind CHARACTER expression\" }\n+!$omp error message(msg)\t\t! { dg-error \"Constant character expression required in MESSAGE clause\" }\n+\n+type S\n+  !$omp error at(execution) message(\"foo\")! { dg-error \"Unexpected !.OMP ERROR statement at\" }\n+  integer s\n+end type\n+end module\n+\n+subroutine bar\n+character(len=10) :: msg\n+!$omp error at(execution) message(1)\t\t\t! { dg-error \"MESSAGE clause at .1. requires a scalar default-kind CHARACTER expression\" }\n+!$omp error at(execution) message(1.2)\t\t\t! { dg-error \"MESSAGE clause at .1. requires a scalar default-kind CHARACTER expression\" }\n+!$omp error at(execution) message(4_\"foo\")\t\t! { dg-error \"MESSAGE clause at .1. requires a scalar default-kind CHARACTER expression\" }\n+!$omp error at(execution) message([\"bar\",\"bar\"])\t! { dg-error \"MESSAGE clause at .1. requires a scalar default-kind CHARACTER expression\" }\n+!$omp error at(execution) message(msg)\t\t\t! OK\n+\n+end\n+\n+integer function foo (i, x, msg)\n+  integer :: i\n+  logical :: x\n+  character(len=*) :: msg\n+  !$omp error message(msg)\t\t! { dg-error \"Constant character expression required in MESSAGE clause\" }\n+  if (x) then\n+    !$omp error at(execution)\t\t! OK\n+  end if\n+  i = i + 1\n+  if (x) then\n+    ;\n+  else\n+    !$omp error at(execution) severity(warning)\t! OK\n+  end if\n+  i = i + 1\n+  select case (.false.)\n+    !$omp error severity(fatal) at(execution)\t! { dg-error \"Expected a CASE or END SELECT statement following SELECT CASE\" }\n+  end select\n+  do while (.false.)\n+    !$omp error at(execution)message(\"42 - 1\")\t! OK\n+    i = i + 1\n+  end do\n+99  continue\n+  !$omp error severity(warning) message(\"bar\") at(execution)\t! OK\n+    i = i + 1\n+  foo = i\n+end\n+\n+\n+subroutine foobar\n+  if (.true.) &  ! { dg-error \"Syntax error in IF-clause after\" }\n+    !$omp error at(execution)\n+\n+  continue\n+\n+  if (.true.) &  ! { dg-error \"Syntax error in IF-clause after\" }\n+    !$omp error  ! { dg-error \".OMP ERROR encountered at\" }\n+end"}, {"sha": "92c246cfcaf9a4d3482201c7993d52a0093b895e", "filename": "libgomp/testsuite/libgomp.fortran/error-1.f90", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77167196fe8cf840a69913e7739d39ae0df2b074/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ferror-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77167196fe8cf840a69913e7739d39ae0df2b074/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ferror-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ferror-1.f90?ref=77167196fe8cf840a69913e7739d39ae0df2b074", "patch": "@@ -0,0 +1,78 @@\n+! { dg-shouldfail \"error directive\" }\n+\n+module m\n+  implicit none (external, type)\n+contains\n+integer function foo (i, x)\n+  integer, value :: i, x\n+  if (x /= 0) then\n+    !$omp error severity(warning)\t! { dg-warning \".OMP ERROR encountered at .1.\" }\n+    i = i + 1\n+  end if\n+  if (x /= 0) then\n+    ! ...\n+  else\n+    !$omp error severity(warning)\t! { dg-warning \".OMP ERROR encountered at .1.\" }\n+    i = i + 2\n+  end if\n+  select case(0)\n+    !$omp error severity(warning)\t! { dg-warning \".OMP ERROR encountered at .1.\" }\n+    case default\n+      !\n+  end select\n+  do while (.false.)\n+    !$omp error message(\"42 - 1\")\tseverity (warning)  ! { dg-warning \".OMP ERROR encountered at .1.: 42 - 1\" }\n+    i = i + 4\n+  end do\n+99 continue\n+  !$omp error severity(warning) message(\"bar\") at(compilation)\t ! { dg-warning \".OMP ERROR encountered at .1.: bar\" }\n+    i = i + 8\n+  foo = i\n+end function\n+end module\n+\n+program main\n+  use m\n+  implicit none (external, type)\n+  character(len=13) :: msg\n+  character(len=:), allocatable :: msg2, msg3\n+\n+  msg = \"my message\"\n+  if (foo (5, 0) /= 15 .or. foo (7, 1) /= 16) &\n+    stop 1\n+  msg2 = \"Paris\"\n+  msg3 = \"To thine own self be true\"\n+  call bar (\"Polonius\", \"Laertes\", msg2, msg3)\n+  msg2 = \"Hello World\"\n+  !$omp error at (execution) severity (warning)\n+  !$omp error at (execution) severity (warning) message(trim(msg(4:)))\n+  !$omp error at (execution) severity (warning) message (\"Farewell\")\n+  !$omp error at (execution) severity (warning) message (msg2)\n+  !$omp error at (execution) severity (warning) message (msg(4:6))\n+  !$omp error at (execution) severity (fatal) message (msg)\n+  ! unreachable due to 'fatal'---------^\n+  !$omp error at (execution) severity (warning) message (\"foobar\")\n+contains\n+   subroutine bar(x, y, a, b)\n+     character(len=*) :: x, y\n+     character(len=:), allocatable :: a, b\n+     optional :: y, b\n+     intent(in) :: x, y, a, b\n+     !$omp error at (execution) severity (warning) message (x)\n+     !$omp error at (execution) severity (warning) message (y)\n+     !$omp error at (execution) severity (warning) message (a)\n+     !$omp error at (execution) severity (warning) message (b)\n+   end subroutine\n+end\n+\n+! { dg-output \"(\\n|\\r|\\n\\r)\" }\n+! { dg-output \"libgomp: error directive encountered: Polonius(\\n|\\r|\\n\\r)(\\n|\\r|\\n\\r)\" }\n+! { dg-output \"libgomp: error directive encountered: Laertes(\\n|\\r|\\n\\r)(\\n|\\r|\\n\\r)\" }\n+! { dg-output \"libgomp: error directive encountered: Paris(\\n|\\r|\\n\\r)(\\n|\\r|\\n\\r)\" }\n+! { dg-output \"libgomp: error directive encountered: To thine own self be true(\\n|\\r|\\n\\r)(\\n|\\r|\\n\\r)\" }\n+! { dg-output \"libgomp: error directive encountered(\\n|\\r|\\n\\r)(\\n|\\r|\\n\\r)\" }\n+! { dg-output \"libgomp: error directive encountered: message(\\n|\\r|\\n\\r)(\\n|\\r|\\n\\r)\" }\n+! { dg-output \"libgomp: error directive encountered: Farewell(\\n|\\r|\\n\\r)(\\n|\\r|\\n\\r)\" }\n+! { dg-output \"libgomp: error directive encountered: Hello World(\\n|\\r|\\n\\r)(\\n|\\r|\\n\\r)\" }\n+! { dg-output \"libgomp: error directive encountered: mes(\\n|\\r|\\n\\r)(\\n|\\r|\\n\\r)\" }\n+! { dg-output \"libgomp: fatal error: error directive encountered: my message   (\\n|\\r|\\n\\r)\" }"}]}