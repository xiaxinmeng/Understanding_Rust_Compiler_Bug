{"sha": "31ff73b5ab49b5326e27dee776f6a4306ea88333", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFmZjczYjVhYjQ5YjUzMjZlMjdkZWU3NzZmNmE0MzA2ZWE4ODMzMw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2007-03-03T17:12:28Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2007-03-03T17:12:28Z"}, "message": "c-pretty-print.c (pp_c_direct_abstract_declarator): Use fold_build2.\n\n\t* c-pretty-print.c (pp_c_direct_abstract_declarator): Use\n\tfold_build2.\n\t* config/alpha/alpha.c (alpha_fold_builtin_zapnot,\n\talpha_fold_vector_minmax): Likewise.\n\t* config/i386/i386.c (ix86_gimplify_va_arg): Likewise.\n\t* config/sparc/sparc.c (sparc_gimplify_va_arg): Likewise.\n\nFrom-SVN: r122508", "tree": {"sha": "0540469e7cb8d53e3ca88524c18fb1f8d0e98c79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0540469e7cb8d53e3ca88524c18fb1f8d0e98c79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31ff73b5ab49b5326e27dee776f6a4306ea88333", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31ff73b5ab49b5326e27dee776f6a4306ea88333", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31ff73b5ab49b5326e27dee776f6a4306ea88333", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31ff73b5ab49b5326e27dee776f6a4306ea88333/comments", "author": null, "committer": null, "parents": [{"sha": "42d53ef301752ba26a6e2d76929a8085a00c0d18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42d53ef301752ba26a6e2d76929a8085a00c0d18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42d53ef301752ba26a6e2d76929a8085a00c0d18"}], "stats": {"total": 41, "additions": 25, "deletions": 16}, "files": [{"sha": "a514011bb5647cebd8f01473cfcc636223307d85", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ff73b5ab49b5326e27dee776f6a4306ea88333/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ff73b5ab49b5326e27dee776f6a4306ea88333/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=31ff73b5ab49b5326e27dee776f6a4306ea88333", "patch": "@@ -1,3 +1,12 @@\n+2007-03-03  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* c-pretty-print.c (pp_c_direct_abstract_declarator): Use\n+\tfold_build2.\n+\t* config/alpha/alpha.c (alpha_fold_builtin_zapnot,\n+\talpha_fold_vector_minmax): Likewise.\n+\t* config/i386/i386.c (ix86_gimplify_va_arg): Likewise.\n+\t* config/sparc/sparc.c (sparc_gimplify_va_arg): Likewise.\n+\n 2007-03-02  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree-sra.c (sra_walk_fns) <ldst>: Document new restriction."}, {"sha": "2b75eecb618f66c038c90611be82ac1fa7de3c87", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ff73b5ab49b5326e27dee776f6a4306ea88333/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ff73b5ab49b5326e27dee776f6a4306ea88333/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=31ff73b5ab49b5326e27dee776f6a4306ea88333", "patch": "@@ -528,8 +528,8 @@ pp_c_direct_abstract_declarator (c_pretty_printer *pp, tree t)\n \t  if (host_integerp (maxval, 0))\n \t    pp_wide_integer (pp, tree_low_cst (maxval, 0) + 1);\n \t  else\n-\t    pp_expression (pp, fold (build2 (PLUS_EXPR, type, maxval,\n-\t\t\t\t\t     build_int_cst (type, 1))));\n+\t    pp_expression (pp, fold_build2 (PLUS_EXPR, type, maxval,\n+\t\t\t\t\t    build_int_cst (type, 1)));\n \t}\n       pp_c_right_bracket (pp);\n       pp_direct_abstract_declarator (pp, TREE_TYPE (t));"}, {"sha": "ae00e1c2ff40dba4e6fd09b0f249448009e55d42", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ff73b5ab49b5326e27dee776f6a4306ea88333/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ff73b5ab49b5326e27dee776f6a4306ea88333/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=31ff73b5ab49b5326e27dee776f6a4306ea88333", "patch": "@@ -6629,8 +6629,8 @@ alpha_fold_builtin_zapnot (tree *op, unsigned HOST_WIDE_INT opint[],\n \treturn build_int_cst (long_integer_type_node, opint[0] & mask);\n \n       if (op)\n-\treturn fold (build2 (BIT_AND_EXPR, long_integer_type_node, op[0],\n-\t\t\t     build_int_cst (long_integer_type_node, mask)));\n+\treturn fold_build2 (BIT_AND_EXPR, long_integer_type_node, op[0],\n+\t\t\t    build_int_cst (long_integer_type_node, mask));\n     }\n   else if ((op_const & 1) && opint[0] == 0)\n     return build_int_cst (long_integer_type_node, 0);\n@@ -6783,7 +6783,7 @@ alpha_fold_vector_minmax (enum tree_code code, tree op[], tree vtype)\n {\n   tree op0 = fold_convert (vtype, op[0]);\n   tree op1 = fold_convert (vtype, op[1]);\n-  tree val = fold (build2 (code, vtype, op0, op1));\n+  tree val = fold_build2 (code, vtype, op0, op1);\n   return fold_convert (long_integer_type_node, val);\n }\n "}, {"sha": "ac36887e94aba39903f0350c6cdaee485e4fec6a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ff73b5ab49b5326e27dee776f6a4306ea88333/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ff73b5ab49b5326e27dee776f6a4306ea88333/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=31ff73b5ab49b5326e27dee776f6a4306ea88333", "patch": "@@ -4859,13 +4859,13 @@ ix86_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n \t\t  src_offset = REGNO (reg) * 8;\n \t\t}\n \t      src_addr = fold_convert (addr_type, src_addr);\n-\t      src_addr = fold (build2 (PLUS_EXPR, addr_type, src_addr,\n-\t\t\t\t       size_int (src_offset)));\n+\t      src_addr = fold_build2 (PLUS_EXPR, addr_type, src_addr,\n+\t\t\t\t      size_int (src_offset));\n \t      src = build_va_arg_indirect_ref (src_addr);\n \n \t      dest_addr = fold_convert (addr_type, addr);\n-\t      dest_addr = fold (build2 (PLUS_EXPR, addr_type, dest_addr,\n-\t\t\t\t\tsize_int (INTVAL (XEXP (slot, 1)))));\n+\t      dest_addr = fold_build2 (PLUS_EXPR, addr_type, dest_addr,\n+\t\t\t\t       size_int (INTVAL (XEXP (slot, 1))));\n \t      dest = build_va_arg_indirect_ref (dest_addr);\n \n \t      t = build2 (GIMPLE_MODIFY_STMT, void_type_node, dest, src);"}, {"sha": "9b881e1176da5b94db70c534054b2770625f5ad7", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ff73b5ab49b5326e27dee776f6a4306ea88333/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ff73b5ab49b5326e27dee776f6a4306ea88333/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=31ff73b5ab49b5326e27dee776f6a4306ea88333", "patch": "@@ -5673,18 +5673,18 @@ sparc_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n   incr = valist;\n   if (align)\n     {\n-      incr = fold (build2 (PLUS_EXPR, ptr_type_node, incr,\n-\t\t\t   ssize_int (align - 1)));\n-      incr = fold (build2 (BIT_AND_EXPR, ptr_type_node, incr,\n-\t\t\t   ssize_int (-align)));\n+      incr = fold_build2 (PLUS_EXPR, ptr_type_node, incr,\n+\t\t\t  ssize_int (align - 1));\n+      incr = fold_build2 (BIT_AND_EXPR, ptr_type_node, incr,\n+\t\t\t  ssize_int (-align));\n     }\n \n   gimplify_expr (&incr, pre_p, post_p, is_gimple_val, fb_rvalue);\n   addr = incr;\n \n   if (BYTES_BIG_ENDIAN && size < rsize)\n-    addr = fold (build2 (PLUS_EXPR, ptr_type_node, incr,\n-\t\t\t ssize_int (rsize - size)));\n+    addr = fold_build2 (PLUS_EXPR, ptr_type_node, incr,\n+\t\t\tssize_int (rsize - size));\n \n   if (indirect)\n     {\n@@ -5712,7 +5712,7 @@ sparc_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n   else\n     addr = fold_convert (ptrtype, addr);\n \n-  incr = fold (build2 (PLUS_EXPR, ptr_type_node, incr, ssize_int (rsize)));\n+  incr = fold_build2 (PLUS_EXPR, ptr_type_node, incr, ssize_int (rsize));\n   incr = build2 (GIMPLE_MODIFY_STMT, ptr_type_node, valist, incr);\n   gimplify_and_add (incr, post_p);\n "}]}