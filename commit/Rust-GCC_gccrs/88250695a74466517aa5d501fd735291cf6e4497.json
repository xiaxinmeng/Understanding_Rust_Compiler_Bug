{"sha": "88250695a74466517aa5d501fd735291cf6e4497", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgyNTA2OTVhNzQ0NjY1MTdhYTVkNTAxZmQ3MzUyOTFjZjZlNDQ5Nw==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2007-04-29T11:47:11Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2007-04-29T11:47:11Z"}, "message": "regclass.c (scan_one_insn): Remove splitting of two address insns.\n\n        * regclass.c (scan_one_insn): Remove splitting of\n        two address insns.\n\nFrom-SVN: r124277", "tree": {"sha": "982bd83768558b64f9db22b812a385125678a077", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/982bd83768558b64f9db22b812a385125678a077"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88250695a74466517aa5d501fd735291cf6e4497", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88250695a74466517aa5d501fd735291cf6e4497", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88250695a74466517aa5d501fd735291cf6e4497", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88250695a74466517aa5d501fd735291cf6e4497/comments", "author": null, "committer": null, "parents": [{"sha": "e739dfac3c34d398963b47833d0c1dac50bfdb7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e739dfac3c34d398963b47833d0c1dac50bfdb7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e739dfac3c34d398963b47833d0c1dac50bfdb7a"}], "stats": {"total": 69, "additions": 6, "deletions": 63}, "files": [{"sha": "752e391131f8c030c3d45aff4b2b6e3df9bc6526", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88250695a74466517aa5d501fd735291cf6e4497/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88250695a74466517aa5d501fd735291cf6e4497/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=88250695a74466517aa5d501fd735291cf6e4497", "patch": "@@ -1,3 +1,8 @@\n+2007-04-29  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* regclass.c (scan_one_insn): Remove splitting of\n+\ttwo address insns.\n+\n 2007-04-28  Sandra Loosemore  <sandra@codesourcery.com>\n \t    Nigel Stephens  <nigel@mips.com>\n "}, {"sha": "60af8acdcac3542d92b67df5fd1d8473c5942d0f", "filename": "gcc/regclass.c", "status": "modified", "additions": 1, "deletions": 63, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88250695a74466517aa5d501fd735291cf6e4497/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88250695a74466517aa5d501fd735291cf6e4497/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=88250695a74466517aa5d501fd735291cf6e4497", "patch": "@@ -1029,7 +1029,7 @@ record_operand_costs (rtx insn, struct costs *op_costs,\n    there.  */\n \n static rtx\n-scan_one_insn (rtx insn, int pass)\n+scan_one_insn (rtx insn, int pass ATTRIBUTE_UNUSED)\n {\n   enum rtx_code pat_code;\n   rtx set, note;\n@@ -1069,68 +1069,6 @@ scan_one_insn (rtx insn, int pass)\n       return insn;\n     }\n \n-  /* Improve handling of two-address insns such as\n-     (set X (ashift CONST Y)) where CONST must be made to\n-     match X. Change it into two insns: (set X CONST)\n-     (set X (ashift X Y)).  If we left this for reloading, it\n-     would probably get three insns because X and Y might go\n-     in the same place. This prevents X and Y from receiving\n-     the same hard reg.\n-\n-     We can only do this if the modes of operands 0 and 1\n-     (which might not be the same) are tieable and we only need\n-     do this during our first pass.  */\n-\n-  if (pass == 0 && optimize\n-      && recog_data.n_operands >= 3\n-      && recog_data.constraints[1][0] == '0'\n-      && recog_data.constraints[1][1] == 0\n-      && CONSTANT_P (recog_data.operand[1])\n-      && ! rtx_equal_p (recog_data.operand[0], recog_data.operand[1])\n-      && ! rtx_equal_p (recog_data.operand[0], recog_data.operand[2])\n-      && REG_P (recog_data.operand[0])\n-      && MODES_TIEABLE_P (GET_MODE (recog_data.operand[0]),\n-\t\t\t  recog_data.operand_mode[1]))\n-    {\n-      rtx previnsn = prev_real_insn (insn);\n-      rtx dest\n-\t= gen_lowpart (recog_data.operand_mode[1],\n-\t\t       recog_data.operand[0]);\n-      rtx newinsn\n-\t= emit_insn_before (gen_move_insn (dest, recog_data.operand[1]), insn);\n-\n-      /* If this insn was the start of a basic block,\n-\t include the new insn in that block.\n-\t We need not check for code_label here;\n-\t while a basic block can start with a code_label,\n-\t INSN could not be at the beginning of that block.  */\n-      if (previnsn == 0 || JUMP_P (previnsn))\n-\t{\n-\t  basic_block b;\n-\t  FOR_EACH_BB (b)\n-\t    if (insn == BB_HEAD (b))\n-\t      BB_HEAD (b) = newinsn;\n-\t}\n-\n-      /* This makes one more setting of new insns's dest.  */\n-      REG_N_SETS (REGNO (recog_data.operand[0]))++;\n-      REG_N_REFS (REGNO (recog_data.operand[0]))++;\n-      REG_FREQ (REGNO (recog_data.operand[0])) += frequency;\n-\n-      *recog_data.operand_loc[1] = recog_data.operand[0];\n-      REG_N_REFS (REGNO (recog_data.operand[0]))++;\n-      REG_FREQ (REGNO (recog_data.operand[0])) += frequency;\n-      for (i = recog_data.n_dups - 1; i >= 0; i--)\n-\tif (recog_data.dup_num[i] == 1)\n-\t  {\n-\t    *recog_data.dup_loc[i] = recog_data.operand[0];\n-\t    REG_N_REFS (REGNO (recog_data.operand[0]))++;\n-\t    REG_FREQ (REGNO (recog_data.operand[0])) += frequency;\n-\t  }\n-\n-      return PREV_INSN (newinsn);\n-    }\n-\n   record_operand_costs (insn, op_costs, reg_pref);\n \n   /* Now add the cost for each operand to the total costs for"}]}