{"sha": "476805aea386cdaa54edbf84767ceb04e53afeac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc2ODA1YWVhMzg2Y2RhYTU0ZWRiZjg0NzY3Y2ViMDRlNTNhZmVhYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-01-26T19:52:53Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-01-26T19:52:53Z"}, "message": "re PR c++/68357 (FAIL: g++.dg/other/darwin-cfstring1.C  -std=* (internal compiler error) on x86_64-apple-darwin1(0|4|5))\n\n\tPR c++/68357\n\t* cp-gimplify.c (cp_fold): If some operand folds to error_mark_node,\n\treturn error_mark_node instead of building trees with error_mark_node\n\toperands.\n\nFrom-SVN: r232843", "tree": {"sha": "410f121ec8a03bc8d37b0b90bda3c7a5e8b5f49e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/410f121ec8a03bc8d37b0b90bda3c7a5e8b5f49e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/476805aea386cdaa54edbf84767ceb04e53afeac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/476805aea386cdaa54edbf84767ceb04e53afeac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/476805aea386cdaa54edbf84767ceb04e53afeac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/476805aea386cdaa54edbf84767ceb04e53afeac/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f1d591e8a6b82935ec9767b3da52daa89d22f7a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1d591e8a6b82935ec9767b3da52daa89d22f7a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1d591e8a6b82935ec9767b3da52daa89d22f7a1"}], "stats": {"total": 74, "additions": 65, "deletions": 9}, "files": [{"sha": "3d7824c4b8e496a490d59a9e5900804c73ce4b57", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/476805aea386cdaa54edbf84767ceb04e53afeac/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/476805aea386cdaa54edbf84767ceb04e53afeac/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=476805aea386cdaa54edbf84767ceb04e53afeac", "patch": "@@ -1,3 +1,10 @@\n+2016-01-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/68357\n+\t* cp-gimplify.c (cp_fold): If some operand folds to error_mark_node,\n+\treturn error_mark_node instead of building trees with error_mark_node\n+\toperands.\n+\n 2016-01-26  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR other/69006"}, {"sha": "ce0975baac9e96b11d90b96f19340bd8a967b443", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 58, "deletions": 9, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/476805aea386cdaa54edbf84767ceb04e53afeac/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/476805aea386cdaa54edbf84767ceb04e53afeac/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=476805aea386cdaa54edbf84767ceb04e53afeac", "patch": "@@ -1954,7 +1954,12 @@ cp_fold (tree x)\n       op0 = cp_fold_maybe_rvalue (TREE_OPERAND (x, 0), rval_ops);\n \n       if (op0 != TREE_OPERAND (x, 0))\n-        x = fold_build1_loc (loc, code, TREE_TYPE (x), op0);\n+\t{\n+\t  if (op0 == error_mark_node)\n+\t    x = error_mark_node;\n+\t  else\n+\t    x = fold_build1_loc (loc, code, TREE_TYPE (x), op0);\n+\t}\n       else\n \tx = fold (x);\n \n@@ -1986,7 +1991,12 @@ cp_fold (tree x)\n       op0 = cp_fold_maybe_rvalue (TREE_OPERAND (x, 0), rval_ops);\n \n       if (op0 != TREE_OPERAND (x, 0))\n-        x = fold_build1_loc (loc, code, TREE_TYPE (x), op0);\n+\t{\n+\t  if (op0 == error_mark_node)\n+\t    x = error_mark_node;\n+\t  else\n+\t    x = fold_build1_loc (loc, code, TREE_TYPE (x), op0);\n+\t}\n       else\n \tx = fold (x);\n \n@@ -2043,7 +2053,12 @@ cp_fold (tree x)\n       op1 = cp_fold_rvalue (TREE_OPERAND (x, 1));\n \n       if (op0 != TREE_OPERAND (x, 0) || op1 != TREE_OPERAND (x, 1))\n-\tx = fold_build2_loc (loc, code, TREE_TYPE (x), op0, op1);\n+\t{\n+\t  if (op0 == error_mark_node || op1 == error_mark_node)\n+\t    x = error_mark_node;\n+\t  else\n+\t    x = fold_build2_loc (loc, code, TREE_TYPE (x), op0, op1);\n+\t}\n       else\n \tx = fold (x);\n \n@@ -2066,7 +2081,14 @@ cp_fold (tree x)\n       if (op0 != TREE_OPERAND (x, 0)\n \t  || op1 != TREE_OPERAND (x, 1)\n \t  || op2 != TREE_OPERAND (x, 2))\n-\tx = fold_build3_loc (loc, code, TREE_TYPE (x), op0, op1, op2);\n+\t{\n+\t  if (op0 == error_mark_node\n+\t      || op1 == error_mark_node\n+\t      || op2 == error_mark_node)\n+\t    x = error_mark_node;\n+\t  else\n+\t    x = fold_build3_loc (loc, code, TREE_TYPE (x), op0, op1, op2);\n+\t}\n       else\n \tx = fold (x);\n \n@@ -2093,9 +2115,18 @@ cp_fold (tree x)\n \t  {\n \t    r = cp_fold (CALL_EXPR_ARG (x, i));\n \t    if (r != CALL_EXPR_ARG (x, i))\n-\t      changed = 1;\n+\t      {\n+\t\tif (r == error_mark_node)\n+\t\t  {\n+\t\t    x = error_mark_node;\n+\t\t    break;\n+\t\t  }\n+\t\tchanged = 1;\n+\t      }\n \t    CALL_EXPR_ARG (x, i) = r;\n \t  }\n+\tif (x == error_mark_node)\n+\t  break;\n \n \toptimize = nw;\n \tr = fold (x);\n@@ -2143,7 +2174,15 @@ cp_fold (tree x)\n \t    constructor_elt e = { p->index, op };\n \t    nelts->quick_push (e);\n \t    if (op != p->value)\n-\t      changed = true;\n+\t      {\n+\t\tif (op == error_mark_node)\n+\t\t  {\n+\t\t    x = error_mark_node;\n+\t\t    changed = false;\n+\t\t    break;\n+\t\t  }\n+\t\tchanged = true;\n+\t      }\n \t  }\n \tif (changed)\n \t  x = build_constructor (TREE_TYPE (x), nelts);\n@@ -2188,9 +2227,19 @@ cp_fold (tree x)\n       op2 = cp_fold (TREE_OPERAND (x, 2));\n       op3 = cp_fold (TREE_OPERAND (x, 3));\n \n-      if (op0 != TREE_OPERAND (x, 0) || op1 != TREE_OPERAND (x, 1)\n-\t  || op2 != TREE_OPERAND (x, 2) || op3 != TREE_OPERAND (x, 3))\n-\tx = build4_loc (loc, code, TREE_TYPE (x), op0, op1, op2, op3);\n+      if (op0 != TREE_OPERAND (x, 0)\n+\t  || op1 != TREE_OPERAND (x, 1)\n+\t  || op2 != TREE_OPERAND (x, 2)\n+\t  || op3 != TREE_OPERAND (x, 3))\n+\t{\n+\t  if (op0 == error_mark_node\n+\t      || op1 == error_mark_node\n+\t      || op2 == error_mark_node\n+\t      || op3 == error_mark_node)\n+\t    x = error_mark_node;\n+\t  else\n+\t    x = build4_loc (loc, code, TREE_TYPE (x), op0, op1, op2, op3);\n+\t}\n \n       x = fold (x);\n       break;"}]}