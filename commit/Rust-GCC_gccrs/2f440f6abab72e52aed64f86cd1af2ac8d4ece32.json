{"sha": "2f440f6abab72e52aed64f86cd1af2ac8d4ece32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY0NDBmNmFiYWI3MmU1MmFlZDY0Zjg2Y2QxYWYyYWM4ZDRlY2UzMg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2009-08-14T16:44:36Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2009-08-14T16:44:36Z"}, "message": "re PR middle-end/30789 (complex folding inexact)\n\n\tPR middle-end/30789\n\n\t* builtins.c (do_mpc_arg2): Make extern, define for any MPC\n\tversion.  Move declaration...\n\t* real.h (do_mpc_arg2): ... here.\n\t* fold-const.c (const_binop): Use MPC for complex MULT_EXPR\n\tand RDIV_EXPR.\n\ntestsuite:\n\t* gcc.dg/torture/builtin-math-7.c: New.\n\nFrom-SVN: r150760", "tree": {"sha": "d56a6176a6e43d637f2ab3512ce5fd889d048d90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d56a6176a6e43d637f2ab3512ce5fd889d048d90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f440f6abab72e52aed64f86cd1af2ac8d4ece32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f440f6abab72e52aed64f86cd1af2ac8d4ece32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f440f6abab72e52aed64f86cd1af2ac8d4ece32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f440f6abab72e52aed64f86cd1af2ac8d4ece32/comments", "author": null, "committer": null, "parents": [{"sha": "fe83055dfa93a7a68ba98042f2ffcb7d6b140154", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe83055dfa93a7a68ba98042f2ffcb7d6b140154", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe83055dfa93a7a68ba98042f2ffcb7d6b140154"}], "stats": {"total": 108, "additions": 103, "deletions": 5}, "files": [{"sha": "f9b032355310d412df1518c6a0cd3f2db440af7c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f440f6abab72e52aed64f86cd1af2ac8d4ece32/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f440f6abab72e52aed64f86cd1af2ac8d4ece32/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f440f6abab72e52aed64f86cd1af2ac8d4ece32", "patch": "@@ -1,3 +1,13 @@\n+2009-08-14  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\tPR middle-end/30789\n+\n+\t* builtins.c (do_mpc_arg2): Make extern, define for any MPC\n+\tversion.  Move declaration...\n+\t* real.h (do_mpc_arg2): ... here.\n+\t* fold-const.c (const_binop): Use MPC for complex MULT_EXPR\n+\tand RDIV_EXPR.\n+\n 2009-08-14  Rafael Avila de Espindola  <espindola@google.com>\n \n         * final.c (add_debug_prefix_map): Don't use GC memory for"}, {"sha": "025c1694e4c13e87ac5d7eaa04aec0cfcefef21b", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f440f6abab72e52aed64f86cd1af2ac8d4ece32/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f440f6abab72e52aed64f86cd1af2ac8d4ece32/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=2f440f6abab72e52aed64f86cd1af2ac8d4ece32", "patch": "@@ -60,9 +60,6 @@ along with GCC; see the file COPYING3.  If not see\n #endif\n #ifdef HAVE_mpc\n static tree do_mpc_arg1 (tree, tree, int (*)(mpc_ptr, mpc_srcptr, mpc_rnd_t));\n-#ifdef HAVE_mpc_pow\n-static tree do_mpc_arg2 (tree, tree, tree, int (*)(mpc_ptr, mpc_srcptr, mpc_srcptr, mpc_rnd_t));\n-#endif\n #endif\n \n /* Define the names of the builtin function types and codes.  */\n@@ -13824,8 +13821,8 @@ do_mpc_arg1 (tree arg, tree type, int (*func)(mpc_ptr, mpc_srcptr, mpc_rnd_t))\n    TYPE.  We assume that function FUNC returns zero if the result\n    could be calculated exactly within the requested precision.  */\n \n-#ifdef HAVE_mpc_pow\n-static tree\n+#ifdef HAVE_mpc\n+tree\n do_mpc_arg2 (tree arg0, tree arg1, tree type,\n \t     int (*func)(mpc_ptr, mpc_srcptr, mpc_srcptr, mpc_rnd_t))\n {"}, {"sha": "342e3760bdf0f524fca78ab0671c6a94c02efdda", "filename": "gcc/fold-const.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f440f6abab72e52aed64f86cd1af2ac8d4ece32/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f440f6abab72e52aed64f86cd1af2ac8d4ece32/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=2f440f6abab72e52aed64f86cd1af2ac8d4ece32", "patch": "@@ -1972,6 +1972,11 @@ const_binop (enum tree_code code, tree arg1, tree arg2, int notrunc)\n \t  break;\n \n \tcase MULT_EXPR:\n+#ifdef HAVE_mpc\n+\t  if (COMPLEX_FLOAT_TYPE_P (type))\n+\t    return do_mpc_arg2 (arg1, arg2, type, mpc_mul);\n+#endif\n+\n \t  real = const_binop (MINUS_EXPR,\n \t\t\t      const_binop (MULT_EXPR, r1, r2, notrunc),\n \t\t\t      const_binop (MULT_EXPR, i1, i2, notrunc),\n@@ -1983,6 +1988,11 @@ const_binop (enum tree_code code, tree arg1, tree arg2, int notrunc)\n \t  break;\n \n \tcase RDIV_EXPR:\n+#ifdef HAVE_mpc\n+\t  if (COMPLEX_FLOAT_TYPE_P (type))\n+\t    return do_mpc_arg2 (arg1, arg2, type, mpc_div);\n+#endif\n+\n \t  {\n \t    tree magsquared\n \t      = const_binop (PLUS_EXPR,"}, {"sha": "c93435b2524caacbb6d859a6aa89e6a62b55f47b", "filename": "gcc/real.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f440f6abab72e52aed64f86cd1af2ac8d4ece32/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f440f6abab72e52aed64f86cd1af2ac8d4ece32/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=2f440f6abab72e52aed64f86cd1af2ac8d4ece32", "patch": "@@ -26,6 +26,9 @@\n #include <mpfr.h>\n #ifdef HAVE_mpc\n #include <mpc.h>\n+# ifdef HAVE_mpc\n+extern tree do_mpc_arg2 (tree, tree, tree, int (*)(mpc_ptr, mpc_srcptr, mpc_srcptr, mpc_rnd_t));\n+# endif\n # if MPC_VERSION >= MPC_VERSION_NUM(0,6,1)\n #  define HAVE_mpc_pow\n # endif"}, {"sha": "3ee655b45cf61be827b62bd5ada80c80626caf65", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f440f6abab72e52aed64f86cd1af2ac8d4ece32/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f440f6abab72e52aed64f86cd1af2ac8d4ece32/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2f440f6abab72e52aed64f86cd1af2ac8d4ece32", "patch": "@@ -1,3 +1,7 @@\n+2009-08-14  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/torture/builtin-math-7.c: New.\n+\n 2009-08-14  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.c-torture/execute/20090814-1.c: New testcase."}, {"sha": "37be483800514ca8d4a97e0b90d91e1220d86104", "filename": "gcc/testsuite/gcc.dg/torture/builtin-math-7.c", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f440f6abab72e52aed64f86cd1af2ac8d4ece32/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-math-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f440f6abab72e52aed64f86cd1af2ac8d4ece32/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-math-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-math-7.c?ref=2f440f6abab72e52aed64f86cd1af2ac8d4ece32", "patch": "@@ -0,0 +1,74 @@\n+/* Copyright (C) 2009  Free Software Foundation.\n+\n+   Verify that folding of complex mul and div work correctly.\n+\n+   Origin: Kaveh R. Ghazi,  August 13, 2009.  */\n+\n+/* { dg-do run } */\n+/* { dg-require-effective-target mpc } */\n+\n+extern void link_error(int);\n+\n+/* Evaluate this expression at compile-time.  */\n+#define COMPILETIME_TESTIT(TYPE,X,OP,Y,RES) do { \\\n+  if ((_Complex TYPE)(X) OP (_Complex TYPE)(Y) != (_Complex TYPE)(RES)) \\\n+    link_error(__LINE__); \\\n+} while (0)\n+\n+/* Evaluate this expression at runtime.  */\n+#define RUNTIME_TESTIT(TYPE,X,OP,Y,RES) do { \\\n+  volatile _Complex TYPE foo = (_Complex TYPE)(X); \\\n+  foo OP##= (_Complex TYPE)(Y); \\\n+  if (foo != (_Complex TYPE)(RES)) __builtin_abort(); \\\n+} while (0)\n+\n+/* Evaluate this expression at compile-time and runtime.  */\n+#define TESTIT(TYPE,X,OP,Y,RES) do { \\\n+  COMPILETIME_TESTIT(TYPE,X,OP,Y,RES); \\\n+  RUNTIME_TESTIT(TYPE,X,OP,Y,RES); \\\n+} while (0)\n+\n+/* Either the real or imaginary parts should be infinity.  */\n+#define TEST_ONE_PART_INF(VAL) do { \\\n+  if (! __builtin_isinf(__real (VAL)) \\\n+      && ! __builtin_isinf(__imag (VAL))) \\\n+    __builtin_abort(); \\\n+} while (0)\n+\n+int main()\n+{\n+  /* Test some regular finite values.  */\n+  TESTIT (double, 3.+4.i, *, 2, 6+8i);\n+  TESTIT (double, 3.+4.i, /, 2, 1.5+2i);\n+  TESTIT (int, 3+4i, *, 2, 6+8i);\n+  RUNTIME_TESTIT (int, 3+4i, /, 2, 1+2i);\n+\n+  TESTIT (double, 3.+4.i, *, 2+5i, -14+23i);\n+  TESTIT (double, 3.+4.i, /, 5i, .8-.6i);\n+  TESTIT (int, 3+4i, *, 2+5i, -14+23i);\n+  RUNTIME_TESTIT (int, 30+40i, /, 5i, 8-6i);\n+\n+  /* Test that we don't overflow.  */\n+  TESTIT (double,\n+\t  (__DBL_MAX__ * 0.5 + __DBL_MAX__ * 0.5i),\n+\t  /,\n+\t  (__DBL_MAX__ * 0.25 + __DBL_MAX__ * 0.25i),\n+\t  2);\n+\n+  /* Test for accuracy.  */\n+  COMPILETIME_TESTIT (double,\n+\t\t      (1 + __DBL_EPSILON__ + 1i),\n+\t\t      *,\n+\t\t      (1 - __DBL_EPSILON__ + 1i),\n+\t\t      -4.93038065763132378382330353301741393545754021943139377981e-32+2i);\n+\n+  /* This becomes (NaN + iInf).  */\n+#define VAL1 ((_Complex double)__builtin_inf() * 1i)\n+\n+  /* Test some C99 Annex G special cases.  */\n+  TEST_ONE_PART_INF ((VAL1) * (VAL1));\n+  TEST_ONE_PART_INF ((_Complex double)1 / (_Complex double)0);\n+  TEST_ONE_PART_INF ((VAL1) / (_Complex double)1);\n+\n+  return 0;\n+}"}]}