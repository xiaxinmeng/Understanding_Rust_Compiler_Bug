{"sha": "e77d72cbc052a2462231aa1848d3e220a471d098", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc3ZDcyY2JjMDUyYTI0NjIyMzFhYTE4NDhkM2UyMjBhNDcxZDA5OA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-04-04T02:24:50Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-04-04T02:24:50Z"}, "message": "sparc.c (output_restore_regs): Prototype.\n\n\t* sparc.c (output_restore_regs): Prototype.\n\t(sparc_emit_float_lib_cmp): Constification.\n\n\t* emit-rtl.c (const_int_htab_hash, const_int_htab_eq): Likewise.\n\n\t* reload1.c (reload_cse_delete_noop_set, reload_cse_simplify):\n\tPrototype.\n\n\t* simplify-rtx.c (entry_and_rtx_equal_p): Constification.\n\t(get_value_hash, hash_rtx): Likewise.\n\n\t* ssa.c (compute_conservative_reg_partition): Prototype.\n\n\t* tree.c (mark_hash_entry): Prototype.\n\nFrom-SVN: r32896", "tree": {"sha": "843fa327c4739c577ba1794ec00c5fe4dd814da2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/843fa327c4739c577ba1794ec00c5fe4dd814da2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e77d72cbc052a2462231aa1848d3e220a471d098", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e77d72cbc052a2462231aa1848d3e220a471d098", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e77d72cbc052a2462231aa1848d3e220a471d098", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e77d72cbc052a2462231aa1848d3e220a471d098/comments", "author": null, "committer": null, "parents": [{"sha": "bad3c76d531f984716d4c585046d7f254fd88e86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bad3c76d531f984716d4c585046d7f254fd88e86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bad3c76d531f984716d4c585046d7f254fd88e86"}], "stats": {"total": 35, "additions": 28, "deletions": 7}, "files": [{"sha": "3b464a1adc6d91653d80ff9df98305eb45485838", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e77d72cbc052a2462231aa1848d3e220a471d098/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e77d72cbc052a2462231aa1848d3e220a471d098/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e77d72cbc052a2462231aa1848d3e220a471d098", "patch": "@@ -1,3 +1,20 @@\n+2000-04-03  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* sparc.c (output_restore_regs): Prototype.\n+\t(sparc_emit_float_lib_cmp): Constification.\n+\n+\t* emit-rtl.c (const_int_htab_hash, const_int_htab_eq): Likewise.\n+\n+\t* reload1.c (reload_cse_delete_noop_set, reload_cse_simplify):\n+\tPrototype.\n+\n+\t* simplify-rtx.c (entry_and_rtx_equal_p): Constification.\n+\t(get_value_hash, hash_rtx): Likewise.\n+\n+\t* ssa.c (compute_conservative_reg_partition): Prototype.\n+\n+\t* tree.c (mark_hash_entry): Prototype.\n+\n 2000-04-03  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* bb-reorder.c (verify_insn_chain): #ifdef out unless ENABLE_CHECKING."}, {"sha": "2ee24c17e572382adc11af1a76916836e5b4e0e6", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e77d72cbc052a2462231aa1848d3e220a471d098/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e77d72cbc052a2462231aa1848d3e220a471d098/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=e77d72cbc052a2462231aa1848d3e220a471d098", "patch": "@@ -155,6 +155,7 @@ static void ultra_build_types_avail PARAMS ((rtx *, int));\n static void ultra_flush_pipeline PARAMS ((void));\n static void ultra_rescan_pipeline_state PARAMS ((rtx *, int));\n static int set_extends PARAMS ((rtx, rtx));\n+static void output_restore_regs PARAMS ((FILE *, int));\n \f\n /* Option handling.  */\n \n@@ -5052,7 +5053,7 @@ sparc_emit_float_lib_cmp (x, y, comparison)\n      rtx x, y;\n      enum rtx_code comparison;\n {\n-  char *qpfunc;\n+  const char *qpfunc;\n   rtx slot0, slot1, result, tem, tem2;\n   enum machine_mode mode;\n "}, {"sha": "feead7697dc25918035dc4a87dfaeeda41033bde", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e77d72cbc052a2462231aa1848d3e220a471d098/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e77d72cbc052a2462231aa1848d3e220a471d098/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=e77d72cbc052a2462231aa1848d3e220a471d098", "patch": "@@ -191,7 +191,7 @@ static hashval_t\n const_int_htab_hash (x)\n      const void *x;\n {\n-  return (hashval_t) INTVAL ((rtx) x);\n+  return (hashval_t) INTVAL ((const struct rtx_def *) x);\n }\n \n /* Returns non-zero if the value represented by X (which is really a\n@@ -203,7 +203,7 @@ const_int_htab_eq (x, y)\n      const void *x;\n      const void *y;\n {\n-  return (INTVAL ((rtx) x) == *((HOST_WIDE_INT *) y));\n+  return (INTVAL ((const struct rtx_def *) x) == *((const HOST_WIDE_INT *) y));\n }\n \n /* Mark the hash-table element X (which is really a pointer to an"}, {"sha": "3520883f31636edc30a4b0ed9e94e65f22d05bac", "filename": "gcc/reload1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e77d72cbc052a2462231aa1848d3e220a471d098/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e77d72cbc052a2462231aa1848d3e220a471d098/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=e77d72cbc052a2462231aa1848d3e220a471d098", "patch": "@@ -451,6 +451,8 @@ static rtx gen_mode_int\t\t\tPARAMS ((enum machine_mode,\n \t\t\t\t\t\t HOST_WIDE_INT));\n static void failed_reload\t\tPARAMS ((rtx, int));\n static int set_reload_reg\t\tPARAMS ((int, int));\n+static void reload_cse_delete_noop_set\tPARAMS ((rtx, rtx));\n+static void reload_cse_simplify\t\tPARAMS ((rtx));\n extern void dump_needs\t\t\tPARAMS ((struct insn_chain *, FILE *));\n \f\n /* Initialize the reload pass once per compilation.  */"}, {"sha": "9e2674304ba4b2df048c95ba026068f278dd3f95", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e77d72cbc052a2462231aa1848d3e220a471d098/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e77d72cbc052a2462231aa1848d3e220a471d098/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=e77d72cbc052a2462231aa1848d3e220a471d098", "patch": "@@ -2141,7 +2141,7 @@ entry_and_rtx_equal_p (entry, x_arg)\n      const void *entry, *x_arg;\n {\n   struct elt_loc_list *l;\n-  cselib_val *v = (cselib_val *)entry;\n+  const cselib_val *v = (const cselib_val *)entry;\n   rtx x = (rtx)x_arg;\n \n   /* We don't guarantee that distinct rtx's have different hash values,\n@@ -2159,7 +2159,7 @@ static unsigned int\n get_value_hash (entry)\n      const void *entry;\n {\n-  cselib_val *v = (cselib_val *) entry;\n+  const cselib_val *v = (const cselib_val *) entry;\n   return v->value;\n }\n \n@@ -2543,7 +2543,7 @@ hash_rtx (x, mode, create)\n \t  }\n       else if (fmt[i] == 's')\n \t{\n-\t  unsigned char *p = (unsigned char *) XSTR (x, i);\n+\t  const unsigned char *p = (const unsigned char *) XSTR (x, i);\n \t  if (p)\n \t    while (*p)\n \t      hash += *p++;"}, {"sha": "54c36ddc7e3adafe0060f00e7f0b2670db16ef3a", "filename": "gcc/ssa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e77d72cbc052a2462231aa1848d3e220a471d098/gcc%2Fssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e77d72cbc052a2462231aa1848d3e220a471d098/gcc%2Fssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fssa.c?ref=e77d72cbc052a2462231aa1848d3e220a471d098", "patch": "@@ -121,7 +121,7 @@ static int make_regs_equivalent_over_bad_edges\n static int make_equivalent_phi_alternatives_equivalent \n   PARAMS ((int bb, partition reg_partition));\n static partition compute_conservative_reg_partition \n-  PARAMS (());\n+  PARAMS ((void));\n static int rename_equivalent_regs_in_insn \n   PARAMS ((rtx *ptr, void *data));\n static void rename_equivalent_regs "}, {"sha": "53ca207107ea0fa738cb3d0663f9114eb8f699cb", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e77d72cbc052a2462231aa1848d3e220a471d098/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e77d72cbc052a2462231aa1848d3e220a471d098/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=e77d72cbc052a2462231aa1848d3e220a471d098", "patch": "@@ -281,6 +281,7 @@ static void mark_type_hash PARAMS ((void *));\n static int type_hash_eq PARAMS ((const void*, const void*));\n static unsigned int type_hash_hash PARAMS ((const void*));\n static void print_type_hash_statistics PARAMS((void));\n+static int mark_hash_entry PARAMS((void **, void *));\n \n /* If non-null, these are language-specific helper functions for\n    unsave_expr_now.  If present, LANG_UNSAVE is called before its"}]}