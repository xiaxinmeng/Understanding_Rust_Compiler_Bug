{"sha": "dc941ea9258b24c6656ea3ecc686dc1110679f71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM5NDFlYTkyNThiMjRjNjY1NmVhM2VjYzY4NmRjMTExMDY3OWY3MQ==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2020-02-25T15:41:57Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2020-02-27T17:05:00Z"}, "message": "amdgcn: sub-dword vector min/max/shift/bit operators\n\n2020-02-27  Andrew Stubbs  <ams@codesourcery.com>\n\n\tgcc/\n\t* config/gcn/gcn-valu.md (VEC_SUBDWORD_MODE): New mode iterator.\n\t(<expander><mode>2<exec>): Change modes to VEC_ALL1REG_INT_MODE.\n\t(<expander><mode>3<exec>): Likewise.\n\t(<expander><mode>3): New.\n\t(v<expander><mode>3): New.\n\t(<expander><mode>3): New.\n\t(<expander><mode>3<exec>): Rename to ...\n\t(<expander>v64si3<exec>): ... this, and change modes to V64SI.\n\t* config/gcn/gcn.md (mnemonic): Use '%B' for not.", "tree": {"sha": "ccc401694f2ce0a621285597fb37d071bf3b8392", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccc401694f2ce0a621285597fb37d071bf3b8392"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc941ea9258b24c6656ea3ecc686dc1110679f71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc941ea9258b24c6656ea3ecc686dc1110679f71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc941ea9258b24c6656ea3ecc686dc1110679f71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc941ea9258b24c6656ea3ecc686dc1110679f71/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa307bd027d4cd3af9d9c25f3e97c64735fee12d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa307bd027d4cd3af9d9c25f3e97c64735fee12d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa307bd027d4cd3af9d9c25f3e97c64735fee12d"}], "stats": {"total": 105, "additions": 90, "deletions": 15}, "files": [{"sha": "997bed1951af2569020cc5ee6f1b3eabf30ece59", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc941ea9258b24c6656ea3ecc686dc1110679f71/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc941ea9258b24c6656ea3ecc686dc1110679f71/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc941ea9258b24c6656ea3ecc686dc1110679f71", "patch": "@@ -1,3 +1,15 @@\n+2020-02-27  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn-valu.md (VEC_SUBDWORD_MODE): New mode iterator.\n+\t(<expander><mode>2<exec>): Change modes to VEC_ALL1REG_INT_MODE.\n+\t(<expander><mode>3<exec>): Likewise.\n+\t(<expander><mode>3): New.\n+\t(v<expander><mode>3): New.\n+\t(<expander><mode>3): New.\n+\t(<expander><mode>3<exec>): Rename to ...\n+\t(<expander>v64si3<exec>): ... this, and change modes to V64SI.\n+\t* config/gcn/gcn.md (mnemonic): Use '%B' for not.\n+\n 2020-02-27  Alexandre Oliva <oliva@adacore.com>\n \n \t* config/vx-common.h (NO_DOLLAR_IN_LABEL, NO_DOT_IN_LABEL): Leave"}, {"sha": "40e864a8de7254914004c79cee5e0fbd545e04aa", "filename": "gcc/config/gcn/gcn-valu.md", "status": "modified", "additions": 77, "deletions": 14, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc941ea9258b24c6656ea3ecc686dc1110679f71/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc941ea9258b24c6656ea3ecc686dc1110679f71/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md?ref=dc941ea9258b24c6656ea3ecc686dc1110679f71", "patch": "@@ -16,6 +16,10 @@\n \n ;; {{{ Vector iterators\n \n+; Vector modes for sub-dword modes\n+(define_mode_iterator VEC_SUBDWORD_MODE\n+\t\t      [V64QI V64HI])\n+\n ; Vector modes for one vector register\n (define_mode_iterator VEC_1REG_MODE\n \t\t      [V64SI V64HF V64SF])\n@@ -1881,20 +1885,20 @@\n (define_code_iterator minmaxop [smin smax umin umax])\n \n (define_insn \"<expander><mode>2<exec>\"\n-  [(set (match_operand:VEC_1REG_INT_MODE 0 \"gcn_valu_dst_operand\"    \"=  v\")\n-\t(bitunop:VEC_1REG_INT_MODE\n-\t  (match_operand:VEC_1REG_INT_MODE 1 \"gcn_valu_src0_operand\" \"vSvB\")))]\n+  [(set (match_operand:VEC_ALL1REG_INT_MODE 0 \"gcn_valu_dst_operand\"    \"=  v\")\n+\t(bitunop:VEC_ALL1REG_INT_MODE\n+\t  (match_operand:VEC_ALL1REG_INT_MODE 1 \"gcn_valu_src0_operand\" \"vSvB\")))]\n   \"\"\n   \"v_<mnemonic>0\\t%0, %1\"\n   [(set_attr \"type\" \"vop1\")\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"<expander><mode>3<exec>\"\n-  [(set (match_operand:VEC_1REG_INT_MODE 0 \"gcn_valu_dst_operand\" \"=  v,RD\")\n-\t(bitop:VEC_1REG_INT_MODE\n-\t  (match_operand:VEC_1REG_INT_MODE 1 \"gcn_valu_src0_operand\"\n+  [(set (match_operand:VEC_ALL1REG_INT_MODE 0 \"gcn_valu_dst_operand\" \"=  v,RD\")\n+\t(bitop:VEC_ALL1REG_INT_MODE\n+\t  (match_operand:VEC_ALL1REG_INT_MODE 1 \"gcn_valu_src0_operand\"\n \t\t\t\t\t\t\t\t  \"%  v, 0\")\n-\t  (match_operand:VEC_1REG_INT_MODE 2 \"gcn_valu_src1com_operand\"\n+\t  (match_operand:VEC_ALL1REG_INT_MODE 2 \"gcn_valu_src1com_operand\"\n \t\t\t\t\t\t\t\t  \"vSvB, v\")))]\n   \"\"\n   \"@\n@@ -1967,6 +1971,27 @@\n   [(set_attr \"type\" \"vmult,ds\")\n    (set_attr \"length\" \"16,8\")])\n \n+(define_expand \"<expander><mode>3\"\n+  [(set (match_operand:VEC_SUBDWORD_MODE 0 \"register_operand\"  \"= v\")\n+\t(shiftop:VEC_SUBDWORD_MODE\n+\t  (match_operand:VEC_SUBDWORD_MODE 1 \"gcn_alu_operand\" \"  v\")\n+\t  (vec_duplicate:VEC_SUBDWORD_MODE\n+\t    (match_operand:SI 2 \"gcn_alu_operand\"\t       \"SvB\"))))]\n+  \"\"\n+  {\n+    enum {ashift, lshiftrt, ashiftrt};\n+    bool unsignedp = (<code> == lshiftrt);\n+    rtx insi1 = gen_reg_rtx (V64SImode);\n+    rtx insi2 = gen_reg_rtx (SImode);\n+    rtx outsi = gen_reg_rtx (V64SImode);\n+\n+    convert_move (insi1, operands[1], unsignedp);\n+    convert_move (insi2, operands[2], unsignedp);\n+    emit_insn (gen_<expander>v64si3 (outsi, insi1, insi2));\n+    convert_move (operands[0], outsi, unsignedp);\n+    DONE;\n+  })\n+\n (define_insn \"<expander>v64si3<exec>\"\n   [(set (match_operand:V64SI 0 \"register_operand\"  \"= v\")\n \t(shiftop:V64SI\n@@ -1978,6 +2003,26 @@\n   [(set_attr \"type\" \"vop2\")\n    (set_attr \"length\" \"8\")])\n \n+(define_expand \"v<expander><mode>3\"\n+  [(set (match_operand:VEC_SUBDWORD_MODE 0 \"register_operand\"  \"=v\")\n+\t(shiftop:VEC_SUBDWORD_MODE\n+\t  (match_operand:VEC_SUBDWORD_MODE 1 \"gcn_alu_operand\" \" v\")\n+\t  (match_operand:VEC_SUBDWORD_MODE 2 \"gcn_alu_operand\" \"vB\")))]\n+  \"\"\n+  {\n+    enum {ashift, lshiftrt, ashiftrt};\n+    bool unsignedp = (<code> == ashift || <code> == ashiftrt);\n+    rtx insi1 = gen_reg_rtx (V64SImode);\n+    rtx insi2 = gen_reg_rtx (V64SImode);\n+    rtx outsi = gen_reg_rtx (V64SImode);\n+\n+    convert_move (insi1, operands[1], unsignedp);\n+    convert_move (insi2, operands[2], unsignedp);\n+    emit_insn (gen_v<expander>v64si3 (outsi, insi1, insi2));\n+    convert_move (operands[0], outsi, unsignedp);\n+    DONE;\n+  })\n+\n (define_insn \"v<expander>v64si3<exec>\"\n   [(set (match_operand:V64SI 0 \"register_operand\"  \"=v\")\n \t(shiftop:V64SI\n@@ -1988,13 +2033,31 @@\n   [(set_attr \"type\" \"vop2\")\n    (set_attr \"length\" \"8\")])\n \n-(define_insn \"<expander><mode>3<exec>\"\n-  [(set (match_operand:VEC_1REG_INT_MODE 0 \"gcn_valu_dst_operand\" \"=  v,RD\")\n-\t(minmaxop:VEC_1REG_INT_MODE\n-\t  (match_operand:VEC_1REG_INT_MODE 1 \"gcn_valu_src0_operand\"\n-\t\t\t\t\t\t\t\t  \"%  v, 0\")\n-\t  (match_operand:VEC_1REG_INT_MODE 2 \"gcn_valu_src1com_operand\"\n-\t\t\t\t\t\t\t\t  \"vSvB, v\")))]\n+(define_expand \"<expander><mode>3\"\n+  [(set (match_operand:VEC_SUBDWORD_MODE 0 \"gcn_valu_dst_operand\")\n+\t(minmaxop:VEC_SUBDWORD_MODE\n+\t  (match_operand:VEC_SUBDWORD_MODE 1 \"gcn_valu_src0_operand\")\n+\t  (match_operand:VEC_SUBDWORD_MODE 2 \"gcn_valu_src1com_operand\")))]\n+  \"\"\n+  {\n+    enum {smin, umin, smax, umax};\n+    bool unsignedp = (<code> == umax || <code> == umin);\n+    rtx insi1 = gen_reg_rtx (V64SImode);\n+    rtx insi2 = gen_reg_rtx (V64SImode);\n+    rtx outsi = gen_reg_rtx (V64SImode);\n+\n+    convert_move (insi1, operands[1], unsignedp);\n+    convert_move (insi2, operands[2], unsignedp);\n+    emit_insn (gen_<code>v64si3 (outsi, insi1, insi2));\n+    convert_move (operands[0], outsi, unsignedp);\n+    DONE;\n+  })\n+\n+(define_insn \"<expander>v64si3<exec>\"\n+  [(set (match_operand:V64SI 0 \"gcn_valu_dst_operand\"\t    \"=  v,RD\")\n+\t(minmaxop:V64SI\n+\t  (match_operand:V64SI 1 \"gcn_valu_src0_operand\"    \"%  v, 0\")\n+\t  (match_operand:V64SI 2 \"gcn_valu_src1com_operand\" \"vSvB, v\")))]\n   \"\"\n   \"@\n    v_<mnemonic>0\\t%0, %2, %1"}, {"sha": "1bd3330f90b4fae20c5f345a20a4bdba70f71bbc", "filename": "gcc/config/gcn/gcn.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc941ea9258b24c6656ea3ecc686dc1110679f71/gcc%2Fconfig%2Fgcn%2Fgcn.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc941ea9258b24c6656ea3ecc686dc1110679f71/gcc%2Fconfig%2Fgcn%2Fgcn.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.md?ref=dc941ea9258b24c6656ea3ecc686dc1110679f71", "patch": "@@ -319,7 +319,7 @@\n    (smax \"max%i\")\n    (umin \"min%u\")\n    (umax \"max%u\")\n-   (not \"not%b\")\n+   (not \"not%B\")\n    (popcount \"bcnt_u32%b\")])\n \n (define_code_attr bare_mnemonic"}]}