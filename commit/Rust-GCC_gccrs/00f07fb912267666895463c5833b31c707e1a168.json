{"sha": "00f07fb912267666895463c5833b31c707e1a168", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBmMDdmYjkxMjI2NzY2Njg5NTQ2M2M1ODMzYjMxYzcwN2UxYTE2OA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-14T13:13:14Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-14T13:13:14Z"}, "message": "(output_constant_def): Do hashing and make label even if bytecode.\n\nFrom-SVN: r6784", "tree": {"sha": "2b63d169cd420d434b91dd28bd5cfdb8f6fd30dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b63d169cd420d434b91dd28bd5cfdb8f6fd30dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00f07fb912267666895463c5833b31c707e1a168", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00f07fb912267666895463c5833b31c707e1a168", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00f07fb912267666895463c5833b31c707e1a168", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00f07fb912267666895463c5833b31c707e1a168/comments", "author": null, "committer": null, "parents": [{"sha": "8e2b13c322771648d25066146072cdb94c02e017", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e2b13c322771648d25066146072cdb94c02e017", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e2b13c322771648d25066146072cdb94c02e017"}], "stats": {"total": 73, "additions": 34, "deletions": 39}, "files": [{"sha": "b127de345e17dcc7936b8d089d8d1d917a298adb", "filename": "gcc/varasm.c", "status": "modified", "additions": 34, "deletions": 39, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f07fb912267666895463c5833b31c707e1a168/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f07fb912267666895463c5833b31c707e1a168/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=00f07fb912267666895463c5833b31c707e1a168", "patch": "@@ -2540,38 +2540,35 @@ output_constant_def (exp)\n      to see if any of them describes EXP.  If yes, the descriptor records\n      the label number already assigned.  */\n \n-  if (!output_bytecode)\n-    {\n-      hash = const_hash (exp) % MAX_HASH_TABLE;\n+  hash = const_hash (exp) % MAX_HASH_TABLE;\n       \n-      for (desc = const_hash_table[hash]; desc; desc = desc->next)\n-\tif (compare_constant (exp, desc))\n-\t  {\n-\t    found = desc->label;\n-\t    break;\n-\t  }\n+  for (desc = const_hash_table[hash]; desc; desc = desc->next)\n+    if (compare_constant (exp, desc))\n+      {\n+\tfound = desc->label;\n+\tbreak;\n+      }\n       \n-      if (found == 0)\n-\t{\n-\t  /* No constant equal to EXP is known to have been output.\n-\t     Make a constant descriptor to enter EXP in the hash table.\n-\t     Assign the label number and record it in the descriptor for\n-\t     future calls to this function to find.  */\n-\t  \n-\t  /* Create a string containing the label name, in LABEL.  */\n-\t  ASM_GENERATE_INTERNAL_LABEL (label, \"LC\", const_labelno);\n+  if (found == 0)\n+    {\n+      /* No constant equal to EXP is known to have been output.\n+\t Make a constant descriptor to enter EXP in the hash table.\n+\t Assign the label number and record it in the descriptor for\n+\t future calls to this function to find.  */\n \t  \n-\t  desc = record_constant (exp);\n-\t  desc->next = const_hash_table[hash];\n-\t  desc->label\n-\t    = (char *) obstack_copy0 (&permanent_obstack, label, strlen (label));\n-\t  const_hash_table[hash] = desc;\n-\t}\n-      else\n-\t{\n-\t  /* Create a string containing the label name, in LABEL.  */\n-\t  ASM_GENERATE_INTERNAL_LABEL (label, \"LC\", const_labelno);\n-\t}\n+      /* Create a string containing the label name, in LABEL.  */\n+      ASM_GENERATE_INTERNAL_LABEL (label, \"LC\", const_labelno);\n+\n+      desc = record_constant (exp);\n+      desc->next = const_hash_table[hash];\n+      desc->label\n+\t= (char *) obstack_copy0 (&permanent_obstack, label, strlen (label));\n+      const_hash_table[hash] = desc;\n+    }\n+  else\n+    {\n+      /* Create a string containing the label name, in LABEL.  */\n+      ASM_GENERATE_INTERNAL_LABEL (label, \"LC\", const_labelno);\n     }\n   \n   /* We have a symbol name; construct the SYMBOL_REF and the MEM.  */\n@@ -2580,17 +2577,15 @@ output_constant_def (exp)\n   if (TREE_PERMANENT (exp))\n     end_temporary_allocation ();\n \n-  if (!output_bytecode)\n-    {\n-      def = gen_rtx (SYMBOL_REF, Pmode, desc->label);\n+  def = gen_rtx (SYMBOL_REF, Pmode, desc->label);\n       \n-      TREE_CST_RTL (exp)\n-\t= gen_rtx (MEM, TYPE_MODE (TREE_TYPE (exp)), def);\n-      RTX_UNCHANGING_P (TREE_CST_RTL (exp)) = 1;\n-      if (TREE_CODE (TREE_TYPE (exp)) == RECORD_TYPE\n-\t  || TREE_CODE (TREE_TYPE (exp)) == ARRAY_TYPE)\n-\tMEM_IN_STRUCT_P (TREE_CST_RTL (exp)) = 1;\n-    }\n+  TREE_CST_RTL (exp)\n+    = gen_rtx (MEM, TYPE_MODE (TREE_TYPE (exp)), def);\n+  RTX_UNCHANGING_P (TREE_CST_RTL (exp)) = 1;\n+  if (TREE_CODE (TREE_TYPE (exp)) == RECORD_TYPE\n+      || TREE_CODE (TREE_TYPE (exp)) == ARRAY_TYPE)\n+    MEM_IN_STRUCT_P (TREE_CST_RTL (exp)) = 1;\n+\n   pop_obstacks ();\n \n   /* Optionally set flags or add text to the name to record information"}]}