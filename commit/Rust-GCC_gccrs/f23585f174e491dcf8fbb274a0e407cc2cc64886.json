{"sha": "f23585f174e491dcf8fbb274a0e407cc2cc64886", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjIzNTg1ZjE3NGU0OTFkY2Y4ZmJiMjc0YTBlNDA3Y2MyY2M2NDg4Ng==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2007-09-26T10:42:59Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-09-26T10:42:59Z"}, "message": "exp_ch5.adb: Activate memmove type processing if debug flag d.s is set\n\n2007-09-26  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch5.adb: Activate memmove type processing if debug flag d.s is set\n\n\t* debug.adb: Add d.s flag.\n\nFrom-SVN: r128787", "tree": {"sha": "9f6affc91257fbbff74071b18fe45d81fa90834e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f6affc91257fbbff74071b18fe45d81fa90834e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f23585f174e491dcf8fbb274a0e407cc2cc64886", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f23585f174e491dcf8fbb274a0e407cc2cc64886", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f23585f174e491dcf8fbb274a0e407cc2cc64886", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f23585f174e491dcf8fbb274a0e407cc2cc64886/comments", "author": null, "committer": null, "parents": [{"sha": "fdce4bb79eb092b412c272e92435b57147312011", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdce4bb79eb092b412c272e92435b57147312011", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdce4bb79eb092b412c272e92435b57147312011"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "363cc07907cf25b3b8b61d6b701069d349656155", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f23585f174e491dcf8fbb274a0e407cc2cc64886/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f23585f174e491dcf8fbb274a0e407cc2cc64886/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=f23585f174e491dcf8fbb274a0e407cc2cc64886", "patch": "@@ -111,7 +111,7 @@ package body Debug is\n    --  d.p\n    --  d.q\n    --  d.r\n-   --  d.s\n+   --  d.s  Disable expansion of slice move, use memmove\n    --  d.t  Disable static allocation of library level dispatch tables\n    --  d.u\n    --  d.v\n@@ -514,6 +514,11 @@ package body Debug is\n    --       main source (this corresponds to a previous behavior of -gnatl and\n    --       is used for running the ACATS tests).\n \n+   --  d.s  Normally the compiler expands slice moves into loops if overlap\n+   --       might be possible. This debug flag inhibits that expansion, and\n+   --       the back end is expected to use an appropriate routine to handle\n+   --       overlap, based on Forward_OK and Backwards_OK flags.\n+\n    --  d.t  The compiler has been modified (a fairly extensive modification)\n    --       to generate static dispatch tables for library level tagged types.\n    --       This debug switch disables this modification and reverts to the"}, {"sha": "4de10742ca653572938ced045e0af0b86735cd3f", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f23585f174e491dcf8fbb274a0e407cc2cc64886/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f23585f174e491dcf8fbb274a0e407cc2cc64886/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=f23585f174e491dcf8fbb274a0e407cc2cc64886", "patch": "@@ -387,7 +387,7 @@ package body Exp_Ch5 is\n          --       File.Storage := Contents;\n          --    end Write_All;\n \n-         --  We expand to a loop in either of these two cases.\n+         --  We expand to a loop in either of these two cases\n \n          --  Question for future thought. Another potentially more efficient\n          --  approach would be to create the actual subtype, and then do an\n@@ -636,11 +636,18 @@ package body Exp_Ch5 is\n          --  gigi handle it.\n \n          if not Loop_Required then\n+\n+            --  Assume gigi can handle it if Forwards_OK is set\n+\n             if Forwards_OK (N) then\n                return;\n-            else\n-               null;\n-               --  Here is where a memmove would be appropriate ???\n+\n+            --  If Forwards_OK is not set, the back end will need something\n+            --  like memmove to handle the move. For now, this processing is\n+            --  activated using the .s debug flag (-gnatd.s).\n+\n+            elsif Debug_Flag_Dot_S then\n+               return;\n             end if;\n          end if;\n "}]}