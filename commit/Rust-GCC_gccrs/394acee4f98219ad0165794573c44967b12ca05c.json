{"sha": "394acee4f98219ad0165794573c44967b12ca05c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk0YWNlZTRmOTgyMTlhZDAxNjU3OTQ1NzNjNDQ5NjdiMTJjYTA1Yw==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2019-12-04T12:19:55Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2019-12-04T12:19:55Z"}, "message": "Fortran] PR92754 - fix an issue with resolving intrinsic functions\n\n        gcc/fortran/\n        PR fortran/92754\n        * intrinsic.c (gfc_intrinsic_func_interface): Set\n        sym's flavor, intrinsic and function attribute if\n        unset.\n\n        gcc/testsuite/\n        PR fortran/92754\n        gfortran.dg/intrinsic_9.f90: New.\n\nFrom-SVN: r278961", "tree": {"sha": "26796e5067a8a200cb09034a70da4c50fc6e69b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26796e5067a8a200cb09034a70da4c50fc6e69b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/394acee4f98219ad0165794573c44967b12ca05c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/394acee4f98219ad0165794573c44967b12ca05c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/394acee4f98219ad0165794573c44967b12ca05c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/394acee4f98219ad0165794573c44967b12ca05c/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8c3785c43d490d4f234e21c9dee6bb1bb8d1dbdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c3785c43d490d4f234e21c9dee6bb1bb8d1dbdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c3785c43d490d4f234e21c9dee6bb1bb8d1dbdf"}], "stats": {"total": 54, "additions": 44, "deletions": 10}, "files": [{"sha": "faac8fa02f5e08bbbace62a9dceea6ad28778cfd", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/394acee4f98219ad0165794573c44967b12ca05c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/394acee4f98219ad0165794573c44967b12ca05c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=394acee4f98219ad0165794573c44967b12ca05c", "patch": "@@ -1,3 +1,10 @@\n+2019-12-12  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/92754\n+\t* intrinsic.c (gfc_intrinsic_func_interface): Set\n+\tsym's flavor, intrinsic and function attribute if\n+\tunset.\n+\n 2019-12-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/92756"}, {"sha": "76b53bb7117c2d97ee87a600af76354d7b360274", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/394acee4f98219ad0165794573c44967b12ca05c/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/394acee4f98219ad0165794573c44967b12ca05c/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=394acee4f98219ad0165794573c44967b12ca05c", "patch": "@@ -4839,9 +4839,9 @@ gfc_check_intrinsic_standard (const gfc_intrinsic_sym* isym,\n match\n gfc_intrinsic_func_interface (gfc_expr *expr, int error_flag)\n {\n+  gfc_symbol *sym;\n   gfc_intrinsic_sym *isym, *specific;\n   gfc_actual_arglist *actual;\n-  const char *name;\n   int flag;\n \n   if (expr->value.function.isym != NULL)\n@@ -4857,15 +4857,15 @@ gfc_intrinsic_func_interface (gfc_expr *expr, int error_flag)\n       flag |= (actual->expr->ts.type != BT_INTEGER\n \t       && actual->expr->ts.type != BT_CHARACTER);\n \n-  name = expr->symtree->n.sym->name;\n+  sym = expr->symtree->n.sym;\n \n-  if (expr->symtree->n.sym->intmod_sym_id)\n+  if (sym->intmod_sym_id)\n     {\n-      gfc_isym_id id = gfc_isym_id_by_intmod_sym (expr->symtree->n.sym);\n+      gfc_isym_id id = gfc_isym_id_by_intmod_sym (sym);\n       isym = specific = gfc_intrinsic_function_by_id (id);\n     }\n   else\n-    isym = specific = gfc_find_function (name);\n+    isym = specific = gfc_find_function (sym->name);\n \n   if (isym == NULL)\n     {\n@@ -4879,7 +4879,7 @@ gfc_intrinsic_func_interface (gfc_expr *expr, int error_flag)\n        || isym->id == GFC_ISYM_SNGL || isym->id == GFC_ISYM_DFLOAT)\n       && gfc_init_expr_flag\n       && !gfc_notify_std (GFC_STD_F2003, \"Function %qs as initialization \"\n-\t\t\t  \"expression at %L\", name, &expr->where))\n+\t\t\t  \"expression at %L\", sym->name, &expr->where))\n     {\n       if (!error_flag)\n \tgfc_pop_suppress_errors ();\n@@ -4898,7 +4898,7 @@ gfc_intrinsic_func_interface (gfc_expr *expr, int error_flag)\n \t  && id != GFC_ISYM_TRANSFER && id != GFC_ISYM_TRIM\n \t  && !gfc_notify_std (GFC_STD_F2003, \"Transformational function %qs \"\n \t\t\t      \"at %L is invalid in an initialization \"\n-\t\t\t      \"expression\", name, &expr->where))\n+\t\t\t      \"expression\", sym->name, &expr->where))\n \t{\n \t  if (!error_flag)\n \t    gfc_pop_suppress_errors ();\n@@ -4956,9 +4956,6 @@ gfc_intrinsic_func_interface (gfc_expr *expr, int error_flag)\n \n got_specific:\n   expr->value.function.isym = specific;\n-  if (!expr->symtree->n.sym->module)\n-    gfc_intrinsic_symbol (expr->symtree->n.sym);\n-\n   if (!error_flag)\n     gfc_pop_suppress_errors ();\n \n@@ -4980,6 +4977,16 @@ gfc_intrinsic_func_interface (gfc_expr *expr, int error_flag)\n \t\t\t  \"character arguments at %L\", &expr->where))\n     return MATCH_ERROR;\n \n+  if (sym->attr.flavor == FL_UNKNOWN)\n+    {\n+      sym->attr.function = 1;\n+      sym->attr.intrinsic = 1;\n+      sym->attr.flavor = FL_PROCEDURE;\n+    }\n+\n+  if (!sym->module)\n+    gfc_intrinsic_symbol (sym);\n+\n   return MATCH_YES;\n }\n "}, {"sha": "e012bddef8c9fb04f1e47d586d65271b6ee9d142", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/394acee4f98219ad0165794573c44967b12ca05c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/394acee4f98219ad0165794573c44967b12ca05c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=394acee4f98219ad0165794573c44967b12ca05c", "patch": "@@ -1,3 +1,8 @@\n+2019-12-12  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/92754\n+\tgfortran.dg/intrinsic_9.f90: New.\n+\n 2019-12-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/92734"}, {"sha": "43959ad85dff069f0b2919857ee540dc36163e44", "filename": "gcc/testsuite/gfortran.dg/intrinsic_9.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/394acee4f98219ad0165794573c44967b12ca05c/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/394acee4f98219ad0165794573c44967b12ca05c/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_9.f90?ref=394acee4f98219ad0165794573c44967b12ca05c", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do run }\n+!\n+! PR fortran/92754\n+!\n+! Contributed by G. Steinmetz\n+!\n+\n+program p\n+   integer :: max\n+   block\n+      character :: x = max('a','b')\n+      !print *, x\n+      if (x /= 'b') stop 1\n+   end block\n+end"}]}