{"sha": "ca13100a6c969cbbca0dd75d5e8d6cf76a586cf8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ExMzEwMGE2Yzk2OWNiYmNhMGRkNzVkNWU4ZDZjZjc2YTU4NmNmOA==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2000-09-25T11:45:51Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2000-09-25T11:45:51Z"}, "message": "Change callers in config/* to match:\n\nChanges add TABs on either or both sides, covering start of line,\nup to any operand for all .*ASM.*_OP definitions.\n\nFrom-SVN: r36615", "tree": {"sha": "9646458abedc9e351803234a2c14fdcd5392f146", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9646458abedc9e351803234a2c14fdcd5392f146"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca13100a6c969cbbca0dd75d5e8d6cf76a586cf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca13100a6c969cbbca0dd75d5e8d6cf76a586cf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca13100a6c969cbbca0dd75d5e8d6cf76a586cf8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca13100a6c969cbbca0dd75d5e8d6cf76a586cf8/comments", "author": null, "committer": null, "parents": [{"sha": "e8638df010321ac9fb84265de46250b36454d217", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8638df010321ac9fb84265de46250b36454d217", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8638df010321ac9fb84265de46250b36454d217"}], "stats": {"total": 102, "additions": 51, "deletions": 51}, "files": [{"sha": "8be87a8f66bfeaee7f1df22b641e8674ba91f97d", "filename": "gcc/config/elfos.h", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca13100a6c969cbbca0dd75d5e8d6cf76a586cf8/gcc%2Fconfig%2Felfos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca13100a6c969cbbca0dd75d5e8d6cf76a586cf8/gcc%2Fconfig%2Felfos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felfos.h?ref=ca13100a6c969cbbca0dd75d5e8d6cf76a586cf8", "patch": "@@ -91,7 +91,7 @@ Boston, MA 02111-1307, USA.  */\n /* Output #ident as a .ident.  */\n \n #define ASM_OUTPUT_IDENT(FILE, NAME) \\\n-  fprintf (FILE, \"\\t%s\\t\\\"%s\\\"\\n\", IDENT_ASM_OP, NAME);\n+  fprintf (FILE, \"%s\\\"%s\\\"\\n\", IDENT_ASM_OP, NAME);\n \n /* Attach a special .ident directive to the end of the file to identify\n    the version of GCC which compiled this code.  The format of the\n@@ -104,7 +104,7 @@ Boston, MA 02111-1307, USA.  */\n   do\t\t\t\t\t\t\t\\\n     {\t\t\t\t \t\t\t\\\n       if (!flag_no_ident)\t\t\t\t\\\n-\tfprintf ((FILE), \"\\t%s\\t\\\"GCC: (GNU) %s\\\"\\n\",\t\\\n+\tfprintf ((FILE), \"%s\\\"GCC: (GNU) %s\\\"\\n\",\t\\\n \t\t IDENT_ASM_OP, version_string);\t\t\\\n     }\t\t\t\t\t\t\t\\\n   while (0)\n@@ -133,7 +133,7 @@ Boston, MA 02111-1307, USA.  */\n \n #undef  ASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(FILE, SIZE) \\\n-  fprintf (FILE, \"\\t%s\\t%u\\n\", SKIP_ASM_OP, (SIZE))\n+  fprintf (FILE, \"%s%u\\n\", SKIP_ASM_OP, (SIZE))\n \n /* This is how to output an internal numbered label where\n    PREFIX is the class of label and NUM is the number within the class.\n@@ -207,7 +207,7 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_OUTPUT_ALIGNED_COMMON(FILE, NAME, SIZE, ALIGN)\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      fprintf ((FILE), \"\\t%s\\t\", COMMON_ASM_OP);\t\t\t\\\n+      fprintf ((FILE), \"%s\", COMMON_ASM_OP);\t\t\t\t\\\n       assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n       fprintf ((FILE), \",%u,%u\\n\", (SIZE), (ALIGN) / BITS_PER_UNIT);\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n@@ -224,7 +224,7 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_OUTPUT_ALIGNED_LOCAL(FILE, NAME, SIZE, ALIGN)\t\\\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n-      fprintf ((FILE), \"\\t%s\\t\", LOCAL_ASM_OP);\t\t\t\\\n+      fprintf ((FILE), \"%s\", LOCAL_ASM_OP);\t\t\t\\\n       assemble_name ((FILE), (NAME));\t\t\t\t\\\n       fprintf ((FILE), \"\\n\");\t\t\t\t\t\\\n       ASM_OUTPUT_ALIGNED_COMMON (FILE, NAME, SIZE, ALIGN);\t\\\n@@ -311,7 +311,7 @@ const_section ()\t\t\t\t\t\t\\\n     text_section ();\t\t\t\t\t\t\\\n   else if (in_section != in_const)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"\\t%s\\n\", CONST_SECTION_ASM_OP);\t\\\n+      fprintf (asm_out_file, \"%s\\n\", CONST_SECTION_ASM_OP);\t\\\n       in_section = in_const;\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n }\n@@ -322,7 +322,7 @@ ctors_section ()\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\\\n   if (in_section != in_ctors)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"\\t%s\\n\", CTORS_SECTION_ASM_OP);\t\\\n+      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\\\n       in_section = in_ctors;\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n }\n@@ -333,7 +333,7 @@ dtors_section ()\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\\\n   if (in_section != in_dtors)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"\\t%s\\n\", DTORS_SECTION_ASM_OP);\t\\\n+      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\\\n       in_section = in_dtors;\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n }\n@@ -388,7 +388,7 @@ dtors_section ()\t\t\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       ctors_section ();\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t%s\\t \", INT_ASM_OP);\t\t\t\\\n+      fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\\\n       assemble_name (FILE, NAME);\t\t\t\t\\\n       fprintf (FILE, \"\\n\");\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n@@ -400,7 +400,7 @@ dtors_section ()\t\t\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       dtors_section ();                   \t\t\t\\\n-      fprintf (FILE, \"\\t%s\\t \", INT_ASM_OP);\t\t\t\\\n+      fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\\\n       assemble_name (FILE, NAME);              \t\t\t\\\n       fprintf (FILE, \"\\n\");\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n@@ -557,7 +557,7 @@ dtors_section ()\t\t\t\t\t\t\\\n #define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\\\n   do\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t%s\\t \", TYPE_ASM_OP);\t\t\\\n+      fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\\\n       assemble_name (FILE, NAME);\t\t\t\\\n       putc (',', FILE);\t\t\t\t\t\\\n       fprintf (FILE, TYPE_OPERAND_FMT, \"function\");\t\\\n@@ -574,7 +574,7 @@ dtors_section ()\t\t\t\t\t\t\\\n #define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\\\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t%s\\t \", TYPE_ASM_OP);\t\t\t\\\n+      fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\\\n       assemble_name (FILE, NAME);\t\t\t\t\\\n       putc (',', FILE);\t\t\t\t\t\t\\\n       fprintf (FILE, TYPE_OPERAND_FMT, \"object\");\t\t\\\n@@ -586,7 +586,7 @@ dtors_section ()\t\t\t\t\t\t\\\n \t  && (DECL) && DECL_SIZE (DECL))\t\t\t\\\n \t{\t\t\t\t\t\t\t\\\n \t  size_directive_output = 1;\t\t\t\t\\\n-\t  fprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\\\n+\t  fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\\\n \t  assemble_name (FILE, NAME);\t\t\t\t\\\n \t  putc (',', FILE);\t\t\t\t\t\\\n \t  fprintf (FILE, HOST_WIDE_INT_PRINT_DEC,\t\t\\\n@@ -616,7 +616,7 @@ dtors_section ()\t\t\t\t\t\t\\\n \t  && !size_directive_output)\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\\\n \t  size_directive_output = 1;\t\t\t\t\\\n-\t  fprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\\\n+\t  fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\\\n \t  assemble_name (FILE, name);\t\t\t\t\\\n \t  putc (',', FILE);\t\t\t\t\t\\\n \t  fprintf (FILE, HOST_WIDE_INT_PRINT_DEC,\t\t\\\n@@ -641,7 +641,7 @@ dtors_section ()\t\t\t\t\t\t\\\n \t  ASM_GENERATE_INTERNAL_LABEL (label, \"Lfe\", labelno);\t\\\n \t  ASM_OUTPUT_INTERNAL_LABEL (FILE, \"Lfe\", labelno);\t\\\n \t  \t\t\t\t\t\t\t\\\n-\t  fprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\\\n+\t  fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\\\n \t  assemble_name (FILE, (FNAME));\t\t\t\\\n \t  fprintf (FILE, \",\");\t\t\t\t\t\\\n \t  assemble_name (FILE, label);\t\t\t\t\\\n@@ -707,7 +707,7 @@ dtors_section ()\t\t\t\t\t\t\\\n \t(const unsigned char *) (STR);\t\t\t\\\n       register unsigned ch;\t\t\t\t\\\n       \t\t\t\t\t\t\t\\\n-      fprintf ((FILE), \"\\t%s\\t\\\"\", STRING_ASM_OP);\t\\\n+      fprintf ((FILE), \"%s\\\"\", STRING_ASM_OP);\t\t\\\n       \t\t\t\t\t\t\t\\\n       for (; (ch = *_limited_str); _limited_str++)\t\\\n         {\t\t\t\t\t\t\\\n@@ -778,7 +778,7 @@ dtors_section ()\t\t\t\t\t\t\\\n \t      register unsigned ch;\t\t\t\t\t\\\n       \t\t\t\t\t\t\t\t\t\\\n \t      if (bytes_in_chunk == 0)\t\t\t\t\t\\\n-\t\tfprintf ((FILE), \"\\t%s\\t\\\"\", ASCII_DATA_ASM_OP);\t\\\n+\t\tfprintf ((FILE), \"%s\\\"\", ASCII_DATA_ASM_OP);\t\t\\\n       \t\t\t\t\t\t\t\t\t\\\n \t      switch (escape = ESCAPES[ch = *_ascii_bytes])\t\t\\\n \t\t{\t\t\t\t\t\t\t\\"}, {"sha": "7e8f035d1f8e65780f37123b374408030a129fd2", "filename": "gcc/config/freebsd.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca13100a6c969cbbca0dd75d5e8d6cf76a586cf8/gcc%2Fconfig%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca13100a6c969cbbca0dd75d5e8d6cf76a586cf8/gcc%2Fconfig%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffreebsd.h?ref=ca13100a6c969cbbca0dd75d5e8d6cf76a586cf8", "patch": "@@ -109,18 +109,18 @@ Boston, MA 02111-1307, USA.  */\n /* Output #ident as a .ident.  */\n #undef ASM_OUTPUT_IDENT\n #define ASM_OUTPUT_IDENT(FILE, NAME)\t\t\t\t\t\\\n-  fprintf ((FILE), \"\\t%s\\t\\\"%s\\\"\\n\", IDENT_ASM_OP, (NAME));\n+  fprintf ((FILE), \"%s\\\"%s\\\"\\n\", IDENT_ASM_OP, (NAME));\n \n #undef ASM_IDENTIFY_LANGUAGE\n #define ASM_IDENTIFY_LANGUAGE(FILE)\t\t\t\t\t\\\n-  fprintf ((FILE), \"\\t%s \\\"GCC (%s) %s\\\"\\n\", IDENT_ASM_OP,\t\t\\\n+  fprintf ((FILE), \"%s\\\"GCC (%s) %s\\\"\\n\", IDENT_ASM_OP,\t\t\t\\\n \t   lang_identify (), version_string)\n \n #undef ASM_FILE_END\n #define ASM_FILE_END(FILE)\t\t\t\t\t\t\\\n do {\t\t\t\t \t\t\t\t\t\\\n      if (!flag_no_ident)\t\t\t\t\t\t\\\n-\tfprintf ((FILE), \"\\t%s\\t\\\"GCC: (GNU) %s\\\"\\n\",\t\t\t\\\n+\tfprintf ((FILE), \"%s\\\"GCC: (GNU) %s\\\"\\n\",\t\t\t\\\n \t\t IDENT_ASM_OP, version_string);\t\t\t\t\\\n    } while (0)\n "}, {"sha": "7769be5634339c56764e6a6c32a0ef4aacafa0ff", "filename": "gcc/config/lynx.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca13100a6c969cbbca0dd75d5e8d6cf76a586cf8/gcc%2Fconfig%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca13100a6c969cbbca0dd75d5e8d6cf76a586cf8/gcc%2Fconfig%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flynx.h?ref=ca13100a6c969cbbca0dd75d5e8d6cf76a586cf8", "patch": "@@ -150,7 +150,7 @@ do {\t\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     ctors_section ();\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t \", INT_ASM_OP);\t\t\t\t\\\n+    fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n     assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n     fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n   } while (0)\n@@ -161,7 +161,7 @@ do {\t\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     dtors_section ();                   \t\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t \", INT_ASM_OP);\t\t\t\t\\\n+    fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n     assemble_name (FILE, NAME);              \t\t\t\t\\\n     fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n   } while (0)"}, {"sha": "d8b23e02a18751c65856f2bd50228abb8d605b30", "filename": "gcc/config/netbsd.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca13100a6c969cbbca0dd75d5e8d6cf76a586cf8/gcc%2Fconfig%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca13100a6c969cbbca0dd75d5e8d6cf76a586cf8/gcc%2Fconfig%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnetbsd.h?ref=ca13100a6c969cbbca0dd75d5e8d6cf76a586cf8", "patch": "@@ -130,7 +130,7 @@\n #undef ASM_DECLARE_FUNCTION_NAME\n #define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t \", TYPE_ASM_OP);\t\t\t\t\\\n+    fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\t\\\n     assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n     putc (',', FILE);\t\t\t\t\t\t\t\\\n     fprintf (FILE, TYPE_OPERAND_FMT, \"function\");\t\t\t\\\n@@ -144,7 +144,7 @@\n #undef ASM_DECLARE_OBJECT_NAME\n #define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t \", TYPE_ASM_OP);\t\t\t\t\\\n+    fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\t\\\n     assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n     putc (',', FILE);\t\t\t\t\t\t\t\\\n     fprintf (FILE, TYPE_OPERAND_FMT, \"object\");\t\t\t\t\\\n@@ -153,7 +153,7 @@\n     if (!flag_inhibit_size_directive && DECL_SIZE (DECL))\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n \tsize_directive_output = 1;\t\t\t\t\t\\\n-\tfprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\t\t\\\n+\tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n \tassemble_name (FILE, NAME);\t\t\t\t\t\\\n \tfprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL)));\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n@@ -176,7 +176,7 @@ do {\t\t\t\t\t\t\t\t\t \\\n \t && !size_directive_output)\t\t\t\t\t \\\n        {\t\t\t\t\t\t\t\t \\\n \t size_directive_output = 1;\t\t\t\t\t \\\n-\t fprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\t \\\n+\t fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t \\\n \t assemble_name (FILE, name);\t\t\t\t\t \\\n \t fprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL))); \\\n        }\t\t\t\t\t\t\t\t \\\n@@ -194,7 +194,7 @@ do {\t\t\t\t\t\t\t\t\t \\\n \tlabelno++;\t\t\t\t\t\t\t\\\n \tASM_GENERATE_INTERNAL_LABEL (label, \"Lfe\", labelno);\t\t\\\n \tASM_OUTPUT_INTERNAL_LABEL (FILE, \"Lfe\", labelno);\t\t\\\n-\tfprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\t\t\\\n+\tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n \tassemble_name (FILE, (FNAME));\t\t\t\t\t\\\n         fprintf (FILE, \",\");\t\t\t\t\t\t\\\n \tassemble_name (FILE, label);\t\t\t\t\t\\"}, {"sha": "28deb16a3ccf973445c66faee592fee31f181085", "filename": "gcc/config/nextstep.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca13100a6c969cbbca0dd75d5e8d6cf76a586cf8/gcc%2Fconfig%2Fnextstep.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca13100a6c969cbbca0dd75d5e8d6cf76a586cf8/gcc%2Fconfig%2Fnextstep.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnextstep.h?ref=ca13100a6c969cbbca0dd75d5e8d6cf76a586cf8", "patch": "@@ -295,7 +295,7 @@ extern int handle_pragma PARAMS ((int(*)(void), void (*)(int), const char *));\n #undef\tASM_OUTPUT_ALIGN\n #define ASM_OUTPUT_ALIGN(FILE,LOG)\t\\\n   if ((LOG) != 0)\t\t\t\\\n-    fprintf (FILE, \"\\t%s %d\\n\", ALIGN_ASM_OP, (LOG))\n+    fprintf (FILE, \"%s%d\\n\", ALIGN_ASM_OP, (LOG))\n \n /* Ensure correct alignment of bss data.  */\n "}, {"sha": "87b3a60567f4a9d48940dca2e5feebf12b18dcd9", "filename": "gcc/config/openbsd.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca13100a6c969cbbca0dd75d5e8d6cf76a586cf8/gcc%2Fconfig%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca13100a6c969cbbca0dd75d5e8d6cf76a586cf8/gcc%2Fconfig%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fopenbsd.h?ref=ca13100a6c969cbbca0dd75d5e8d6cf76a586cf8", "patch": "@@ -196,7 +196,7 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_DECLARE_FUNCTION_NAME\n #define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t\", TYPE_ASM_OP);\t\t\t\t\\\n+    fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\t\\\n     assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n     fputs (\" , \", FILE);\t\t\t\t\t\t\\\n     fprintf (FILE, TYPE_OPERAND_FMT, \"function\");\t\t\t\\\n@@ -213,7 +213,7 @@ Boston, MA 02111-1307, USA.  */\n   do {\t\t\t\t\t\t\t\t\t\\\n     if (!flag_inhibit_size_directive)\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n-\tfprintf (FILE, \"\\t%s\\t\", SIZE_ASM_OP);\t\t\t\t\\\n+\tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n \tassemble_name (FILE, (FNAME));\t\t\t\t\t\\\n \tfputs (\" , . - \", FILE);\t\t\t\t\t\\\n \tassemble_name (FILE, (FNAME));\t\t\t\t\t\\\n@@ -227,7 +227,7 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_DECLARE_OBJECT_NAME\n #define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t \", TYPE_ASM_OP);\t\t\t\t\\\n+    fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\t\\\n     assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n     fputs (\" , \", FILE);\t\t\t\t\t\t\\\n     fprintf (FILE, TYPE_OPERAND_FMT, \"object\");\t\t\t\t\\\n@@ -236,7 +236,7 @@ Boston, MA 02111-1307, USA.  */\n     if (!flag_inhibit_size_directive && DECL_SIZE (DECL))\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n \tsize_directive_output = 1;\t\t\t\t\t\\\n-\tfprintf (FILE, \"\\t%s\\t\", SIZE_ASM_OP);\t\t\t\t\\\n+\tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n \tassemble_name (FILE, NAME);\t\t\t\t\t\\\n \tfprintf (FILE, \" , %d\\n\", int_size_in_bytes (TREE_TYPE (DECL)));\\\n       }\t\t\t\t\t\t\t\t\t\\\n@@ -258,7 +258,7 @@ do {\t\t\t\t\t\t\t\t\t \\\n \t && !size_directive_output)\t\t\t\t\t \\\n        {\t\t\t\t\t\t\t\t \\\n \t size_directive_output = 1;\t\t\t\t\t \\\n-\t fprintf (FILE, \"\\t%s\\t\", SIZE_ASM_OP);\t\t\t \\\n+\t fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t \\\n \t assemble_name (FILE, name);\t\t\t\t\t \\\n \t fprintf (FILE, \" , %d\\n\", int_size_in_bytes (TREE_TYPE (DECL)));\\\n        }\t\t\t\t\t\t\t\t \\"}, {"sha": "cb739fe36d6c42f3bcb4fa09562446c22c751039", "filename": "gcc/config/psos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca13100a6c969cbbca0dd75d5e8d6cf76a586cf8/gcc%2Fconfig%2Fpsos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca13100a6c969cbbca0dd75d5e8d6cf76a586cf8/gcc%2Fconfig%2Fpsos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpsos.h?ref=ca13100a6c969cbbca0dd75d5e8d6cf76a586cf8", "patch": "@@ -147,7 +147,7 @@ dtors_section ()\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     ctors_section ();\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t \", INT_ASM_OP);\t\t\t\t\\\n+    fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n     assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n     fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n   } while (0)\n@@ -158,7 +158,7 @@ dtors_section ()\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     dtors_section ();                   \t\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t \", INT_ASM_OP);\t\t\t\t\\\n+    fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n     assemble_name (FILE, NAME);              \t\t\t\t\\\n     fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n   } while (0)"}, {"sha": "2c43ef76744b2ea46658fd29037375bbbe49fd0e", "filename": "gcc/config/ptx4.h", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca13100a6c969cbbca0dd75d5e8d6cf76a586cf8/gcc%2Fconfig%2Fptx4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca13100a6c969cbbca0dd75d5e8d6cf76a586cf8/gcc%2Fconfig%2Fptx4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fptx4.h?ref=ca13100a6c969cbbca0dd75d5e8d6cf76a586cf8", "patch": "@@ -181,7 +181,7 @@ Boston, MA 02111-1307, USA.\n #define ASM_FILE_END(FILE)\t\t\t\t\t\\\n do {\t\t\t\t \t\t\t\t\\\n      if (!flag_no_ident)\t\t\t\t\t\\\n-\tfprintf ((FILE), \"\\t%s\\t\\\"GCC: (GNU) %s\\\"\\n\",\t\t\\\n+\tfprintf ((FILE), \"%s\\\"GCC: (GNU) %s\\\"\\n\",\t\t\\\n \t\t IDENT_ASM_OP, version_string);\t\t\t\\\n    } while (0)\n \n@@ -192,7 +192,7 @@ do {\t\t\t\t \t\t\t\t\\\n /* Output #ident as a .ident.  */\n \n #define ASM_OUTPUT_IDENT(FILE, NAME) \\\n-  fprintf (FILE, \"\\t%s\\t\\\"%s\\\"\\n\", IDENT_ASM_OP, NAME);\n+  fprintf (FILE, \"%s\\\"%s\\\"\\n\", IDENT_ASM_OP, NAME);\n \n /* Use periods rather than dollar signs in special g++ assembler names.  */\n \n@@ -329,7 +329,7 @@ while (0)\n \n #undef ASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(FILE,SIZE) \\\n-  fprintf (FILE, \"\\t%s\\t%u\\n\", SKIP_ASM_OP, (SIZE))\n+  fprintf (FILE, \"%s%u\\n\", SKIP_ASM_OP, (SIZE))\n \n /* The prefix to add to user-visible assembler symbols.\n \n@@ -404,7 +404,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef ASM_OUTPUT_ALIGNED_COMMON\n #define ASM_OUTPUT_ALIGNED_COMMON(FILE, NAME, SIZE, ALIGN)\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  fprintf ((FILE), \"\\t%s\\t\", COMMON_ASM_OP);\t\t\t\t\\\n+  fprintf ((FILE), \"%s\", COMMON_ASM_OP);\t\t\t\t\\\n   assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n   fprintf ((FILE), \",%u,%u\\n\", (SIZE), (ALIGN) / BITS_PER_UNIT);\t\\\n } while (0)\n@@ -419,7 +419,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef ASM_OUTPUT_ALIGNED_LOCAL\n #define ASM_OUTPUT_ALIGNED_LOCAL(FILE, NAME, SIZE, ALIGN)\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  fprintf ((FILE), \"\\t%s\\t\", LOCAL_ASM_OP);\t\t\t\t\\\n+  fprintf ((FILE), \"%s\", LOCAL_ASM_OP);\t\t\t\t\t\\\n   assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n   fprintf ((FILE), \"\\n\");\t\t\t\t\t\t\\\n   ASM_OUTPUT_ALIGNED_COMMON (FILE, NAME, SIZE, ALIGN);\t\t\t\\\n@@ -548,7 +548,7 @@ dtors_section ()\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     ctors_section ();\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t \", INT_ASM_OP);\t\t\t\t\\\n+    fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n     assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n     fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n   } while (0)\n@@ -558,7 +558,7 @@ dtors_section ()\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     dtors_section ();                   \t\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t \", INT_ASM_OP);\t\t\t\t\\\n+    fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n     assemble_name (FILE, NAME);              \t\t\t\t\\\n     fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n   } while (0)\n@@ -643,7 +643,7 @@ dtors_section ()\t\t\t\t\t\t\t\\\n \n #define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t \", TYPE_ASM_OP);\t\t\t\t\\\n+    fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\t\\\n     assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n     putc (',', FILE);\t\t\t\t\t\t\t\\\n     fprintf (FILE, TYPE_OPERAND_FMT, \"function\");\t\t\t\\\n@@ -656,7 +656,7 @@ dtors_section ()\t\t\t\t\t\t\t\\\n \n #define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t \", TYPE_ASM_OP);\t\t\t\t\\\n+    fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\t\\\n     assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n     putc (',', FILE);\t\t\t\t\t\t\t\\\n     fprintf (FILE, TYPE_OPERAND_FMT, \"object\");\t\t\t\t\\\n@@ -665,7 +665,7 @@ dtors_section ()\t\t\t\t\t\t\t\\\n     if (!flag_inhibit_size_directive && DECL_SIZE (DECL))\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n \tsize_directive_output = 1;\t\t\t\t\t\\\n-\tfprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\t\t\\\n+\tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n \tassemble_name (FILE, NAME);\t\t\t\t\t\\\n \tfprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL)));\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n@@ -687,7 +687,7 @@ do {\t\t\t\t\t\t\t\t\t \\\n \t && !size_directive_output)\t\t\t\t\t \\\n        {\t\t\t\t\t\t\t\t \\\n \t size_directive_output = 1;\t\t\t\t\t \\\n-\t fprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\t \\\n+\t fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t \\\n \t assemble_name (FILE, name);\t\t\t\t\t \\\n \t fprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL))); \\\n        }\t\t\t\t\t\t\t\t \\\n@@ -704,7 +704,7 @@ do {\t\t\t\t\t\t\t\t\t \\\n \tlabelno++;\t\t\t\t\t\t\t\\\n \tASM_GENERATE_INTERNAL_LABEL (label, \"Lfe\", labelno);\t\t\\\n \tASM_OUTPUT_INTERNAL_LABEL (FILE, \"Lfe\", labelno);\t\t\\\n-\tfprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\t\t\\\n+\tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n \tassemble_name (FILE, (FNAME));\t\t\t\t\t\\\n         fprintf (FILE, \",\");\t\t\t\t\t\t\\\n \tassemble_name (FILE, label);\t\t\t\t\t\\\n@@ -767,7 +767,7 @@ do {\t\t\t\t\t\t\t\t\t \\\n       register const unsigned char *_limited_str =\t\t\t\\\n         (const unsigned char *) (STR);\t\t\t\t\t\\\n       register unsigned ch;\t\t\t\t\t\t\\\n-      fprintf ((FILE), \"\\t%s\\t\\\"\", STRING_ASM_OP);\t\t\t\\\n+      fprintf ((FILE), \"%s\\\"\", STRING_ASM_OP);\t\t\t\t\\\n       for (; ch = *_limited_str; _limited_str++)\t\t\t\\\n         {\t\t\t\t\t\t\t\t\\\n \t  register int escape;\t\t\t\t\t\t\\\n@@ -829,7 +829,7 @@ do {\t\t\t\t\t\t\t\t\t \\\n \t      register int escape;\t\t\t\t\t\\\n \t      register unsigned ch;\t\t\t\t\t\\\n \t      if (bytes_in_chunk == 0)\t\t\t\t\t\\\n-\t\tfprintf ((FILE), \"\\t%s\\t\\\"\", ASCII_DATA_ASM_OP);\t\\\n+\t\tfprintf ((FILE), \"%s\\\"\", ASCII_DATA_ASM_OP);\t\t\\\n \t      switch (escape = ESCAPES[ch = *_ascii_bytes])\t\t\\\n \t\t{\t\t\t\t\t\t\t\\\n \t\tcase 0:\t\t\t\t\t\t\t\\"}, {"sha": "5e732af8922e52cee0ed1eea75dd4ce6d2d24f9d", "filename": "gcc/config/svr3.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca13100a6c969cbbca0dd75d5e8d6cf76a586cf8/gcc%2Fconfig%2Fsvr3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca13100a6c969cbbca0dd75d5e8d6cf76a586cf8/gcc%2Fconfig%2Fsvr3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsvr3.h?ref=ca13100a6c969cbbca0dd75d5e8d6cf76a586cf8", "patch": "@@ -266,7 +266,7 @@ init_section ()\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\\\n   if (in_section != in_init)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"\\t%s\\n\", INIT_SECTION_ASM_OP);\t\\\n+      fprintf (asm_out_file, \"%s\\n\", INIT_SECTION_ASM_OP);\t\\\n       in_section = in_init;\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n }\n@@ -277,7 +277,7 @@ fini_section ()\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\\\n   if (in_section != in_fini)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"\\t%s\\n\", FINI_SECTION_ASM_OP);\t\\\n+      fprintf (asm_out_file, \"%s\\n\", FINI_SECTION_ASM_OP);\t\\\n       in_section = in_fini;\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n }"}]}