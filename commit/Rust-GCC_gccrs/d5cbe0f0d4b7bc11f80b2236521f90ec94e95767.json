{"sha": "d5cbe0f0d4b7bc11f80b2236521f90ec94e95767", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVjYmUwZjBkNGI3YmMxMWY4MGIyMjM2NTIxZjkwZWM5NGU5NTc2Nw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-05-20T18:08:17Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-05-20T18:08:17Z"}, "message": "libstdc++: Implement missing P0896R4 changes to reverse_iterator [PR100639]\n\nThis implements the P0896R4 changes to reverse_iterator's member types\nvalue_type, difference_type and reference in C++20 mode, which fixes\ntaking the reverse_iterator of an iterator with a non-integral\ndifference_type (such as iota_view<long long>).\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/100639\n\t* include/bits/stl_iterator.h (reverse_iterator::difference_type):\n\tIn C++20 mode, define in terms of iter_difference_t as per P0896R4.\n\t(reverse_iterator::reference): Likewise, but with iter_reference_t.\n\t(reverse_iterator::value_type): Likewise, but with iter_value_t.\n\t* testsuite/std/ranges/adaptors/reverse.cc (test08): New test.\n\t* testsuite/24_iterators/reverse_iterator/100639.cc: New test.", "tree": {"sha": "07e20a44a89024d5fee62357d90a3e13590d3a10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07e20a44a89024d5fee62357d90a3e13590d3a10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5cbe0f0d4b7bc11f80b2236521f90ec94e95767", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5cbe0f0d4b7bc11f80b2236521f90ec94e95767", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5cbe0f0d4b7bc11f80b2236521f90ec94e95767", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5cbe0f0d4b7bc11f80b2236521f90ec94e95767/comments", "author": null, "committer": null, "parents": [{"sha": "a71f55c482ada2c6c31d450ac22494b547512127", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a71f55c482ada2c6c31d450ac22494b547512127", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a71f55c482ada2c6c31d450ac22494b547512127"}], "stats": {"total": 56, "additions": 53, "deletions": 3}, "files": [{"sha": "8768624b7d1b489e1acfddc705613e7f85396181", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cbe0f0d4b7bc11f80b2236521f90ec94e95767/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cbe0f0d4b7bc11f80b2236521f90ec94e95767/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=d5cbe0f0d4b7bc11f80b2236521f90ec94e95767", "patch": "@@ -149,18 +149,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     public:\n       typedef _Iterator\t\t\t\t\titerator_type;\n-      typedef typename __traits_type::difference_type\tdifference_type;\n       typedef typename __traits_type::pointer\t\tpointer;\n+#if __cplusplus <= 201703L\n+      typedef typename __traits_type::difference_type\tdifference_type;\n       typedef typename __traits_type::reference\t\treference;\n-\n-#if __cplusplus > 201703L && __cpp_lib_concepts\n+#else\n       using iterator_concept\n \t= conditional_t<random_access_iterator<_Iterator>,\n \t\t\trandom_access_iterator_tag,\n \t\t\tbidirectional_iterator_tag>;\n       using iterator_category\n \t= __detail::__clamp_iter_cat<typename __traits_type::iterator_category,\n \t\t\t\t     random_access_iterator_tag>;\n+      using value_type = iter_value_t<_Iterator>;\n+      using difference_type = iter_difference_t<_Iterator>;\n+      using reference = iter_reference_t<_Iterator>;\n #endif\n \n       /**"}, {"sha": "358d91dfef1100dd349df074500491640913f34b", "filename": "libstdc++-v3/testsuite/24_iterators/reverse_iterator/100639.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cbe0f0d4b7bc11f80b2236521f90ec94e95767/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2F100639.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cbe0f0d4b7bc11f80b2236521f90ec94e95767/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2F100639.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2F100639.cc?ref=d5cbe0f0d4b7bc11f80b2236521f90ec94e95767", "patch": "@@ -0,0 +1,37 @@\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=c++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+// PR libstdc++/100639\n+\n+#include <iterator>\n+#include <ranges>\n+\n+void\n+test01()\n+{\n+  using iter = std::ranges::iterator_t<std::ranges::iota_view<long long>>;\n+  using riter = std::reverse_iterator<iter>;\n+  static_assert(std::same_as<std::iter_reference_t<iter>,\n+\t\t\t     std::iter_reference_t<riter>>);\n+  static_assert(std::same_as<std::iter_value_t<iter>,\n+\t\t\t     std::iter_value_t<riter>>);\n+  static_assert(std::same_as<std::iter_difference_t<iter>,\n+\t\t\t     std::iter_difference_t<riter>>);\n+}"}, {"sha": "d9094a9fcf5530d1239ae9aa3c2b3a7e102876bb", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/reverse.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cbe0f0d4b7bc11f80b2236521f90ec94e95767/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Freverse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cbe0f0d4b7bc11f80b2236521f90ec94e95767/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Freverse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Freverse.cc?ref=d5cbe0f0d4b7bc11f80b2236521f90ec94e95767", "patch": "@@ -161,6 +161,15 @@ test07()\n   static_assert(!requires { 0 | reverse; });\n }\n \n+void\n+test08()\n+{\n+  // PR libstdc++/100639\n+  auto v = views::iota(1701ll, 3000ll) | views::reverse | views::take(5);\n+  for (auto x : v)\n+    ;\n+}\n+\n int\n main()\n {\n@@ -171,4 +180,5 @@ main()\n   test05();\n   test06();\n   test07();\n+  test08();\n }"}]}