{"sha": "f540a7d37187bcd200436031946655ec39af11bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU0MGE3ZDM3MTg3YmNkMjAwNDM2MDMxOTQ2NjU1ZWMzOWFmMTFiYg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-12-23T04:59:13Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-12-23T04:59:13Z"}, "message": "1750a.h (datalbl, jmplbl): Declare array size explicitly.\n\n\t* 1750a.h (datalbl, jmplbl): Declare array size explicitly.\n\t* a29k.h (a29k_debug_reg_map): Likewise.\n\t* arc.h (arc_regno_reg_class): Likewise.\n\t* c4x-protos.h (c4x_regclass_map, c4x_caller_save_map): Likewise.\n\t* convex.h (regno_reg_class, reg_class_from_letter): Likewise.\n\t* d30v.h (regno_reg_class, reg_class_from_letter): Likewise.\n\t* i386.h (regclass_map): Likewise.\n\t* m32r.h (m32r_hard_regno_mode_ok, m32r_punct_chars): Likewise.\n\t* mcore.h (regno_reg_class): Likewise.\n\t* mips.h (mips_print_operand_punct, mips_char_to_class):\n\tLikewise.\n\t* ns32k.h (regclass_map): Likewise.\n\t* pj.h (pj_debugreg_renumber_vec): Likewise.\n\t* s390.h (regclass_map): Likewise.\n\t* sh.h (regno_reg_class): Likewise.\n\t* sparc.h (sparc_regno_reg_class): Likewise.\n\n\t* hard-reg-set.h (reg_class_contents): Likewise.\n\t* machmode.h (class_narrowest_mode): Likewise.\n\nf:\n\t* bld.c (ffebld_arity_op_): Declare array size explicitly.\n\t* bld.h (ffebld_arity_op_): Likewise.\n\nFrom-SVN: r48281", "tree": {"sha": "2b5263520b85e1c5378734fe1bab030fd944e7d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b5263520b85e1c5378734fe1bab030fd944e7d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f540a7d37187bcd200436031946655ec39af11bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f540a7d37187bcd200436031946655ec39af11bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f540a7d37187bcd200436031946655ec39af11bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f540a7d37187bcd200436031946655ec39af11bb/comments", "author": null, "committer": null, "parents": [{"sha": "d5e0243aacff3f0daa4315bc3effaf0454883f62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5e0243aacff3f0daa4315bc3effaf0454883f62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5e0243aacff3f0daa4315bc3effaf0454883f62"}], "stats": {"total": 79, "additions": 53, "deletions": 26}, "files": [{"sha": "ebefea5cdc10af39834a773e3a40dcffa2a66b68", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f540a7d37187bcd200436031946655ec39af11bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f540a7d37187bcd200436031946655ec39af11bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f540a7d37187bcd200436031946655ec39af11bb", "patch": "@@ -1,3 +1,25 @@\n+2001-12-22  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* 1750a.h (datalbl, jmplbl): Declare array size explicitly.\n+\t* a29k.h (a29k_debug_reg_map): Likewise.\n+\t* arc.h (arc_regno_reg_class): Likewise.\n+\t* c4x-protos.h (c4x_regclass_map, c4x_caller_save_map): Likewise.\n+\t* convex.h (regno_reg_class, reg_class_from_letter): Likewise.\n+\t* d30v.h (regno_reg_class, reg_class_from_letter): Likewise.\n+\t* i386.h (regclass_map): Likewise.\n+\t* m32r.h (m32r_hard_regno_mode_ok, m32r_punct_chars): Likewise.\n+\t* mcore.h (regno_reg_class): Likewise.\n+\t* mips.h (mips_print_operand_punct, mips_char_to_class):\n+\tLikewise.\n+\t* ns32k.h (regclass_map): Likewise.\n+\t* pj.h (pj_debugreg_renumber_vec): Likewise.\n+\t* s390.h (regclass_map): Likewise.\n+\t* sh.h (regno_reg_class): Likewise.\n+\t* sparc.h (sparc_regno_reg_class): Likewise.\n+\n+\t* hard-reg-set.h (reg_class_contents): Likewise.\n+\t* machmode.h (class_narrowest_mode): Likewise.\n+\n 2001-12-22  David Edelsohn  <edelsohn@gnu.org>\n \n \t* loop.c (scan_loop, move_movables, count_one_set): Do not"}, {"sha": "f69f05a09e02f3f9441f865235c3cbad84844da6", "filename": "gcc/config/1750a/1750a.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f540a7d37187bcd200436031946655ec39af11bb/gcc%2Fconfig%2F1750a%2F1750a.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f540a7d37187bcd200436031946655ec39af11bb/gcc%2Fconfig%2F1750a%2F1750a.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.h?ref=f540a7d37187bcd200436031946655ec39af11bb", "patch": "@@ -62,8 +62,8 @@ enum section { Init, Normal, Konst, Static };\n #define DATALBL_ARRSIZ 256\n #define JMPLBL_ARRSIZ  256\n #ifndef __datalbl\n-extern struct datalabel_array datalbl[];\n-extern struct jumplabel_array jmplbl[];\n+extern struct datalabel_array datalbl[DATALBL_ARRSIZ];\n+extern struct jumplabel_array jmplbl[JMPLBL_ARRSIZ];\n extern int datalbl_ndx, jmplbl_ndx, label_pending, program_counter;\n extern enum section current_section;\n extern const char *const sectname[4];"}, {"sha": "d470cf131fb7c2afdc8347a06e4ba596b446e9e3", "filename": "gcc/config/a29k/a29k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f540a7d37187bcd200436031946655ec39af11bb/gcc%2Fconfig%2Fa29k%2Fa29k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f540a7d37187bcd200436031946655ec39af11bb/gcc%2Fconfig%2Fa29k%2Fa29k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.h?ref=f540a7d37187bcd200436031946655ec39af11bb", "patch": "@@ -1416,7 +1416,7 @@ literal_section ()\t\t\t\t\t\t\\\n \n /* How to renumber registers for dbx and gdb.  */\n \n-extern int a29k_debug_reg_map[];\n+extern int a29k_debug_reg_map[FIRST_PSEUDO_REGISTER];\n #define DBX_REGISTER_NUMBER(REGNO) a29k_debug_reg_map[REGNO]\n \n /* Switch into a generic section.  */"}, {"sha": "f6212d16895605a73f8d8c9371fcc3b5c7dcda4c", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f540a7d37187bcd200436031946655ec39af11bb/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f540a7d37187bcd200436031946655ec39af11bb/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=f540a7d37187bcd200436031946655ec39af11bb", "patch": "@@ -464,7 +464,7 @@ enum reg_class {\n    Return the class number of the smallest class containing\n    reg number REGNO.  This could be a conditional expression\n    or could index an array.  */\n-extern enum reg_class arc_regno_reg_class[];\n+extern enum reg_class arc_regno_reg_class[FIRST_PSEUDO_REGISTER];\n #define REGNO_REG_CLASS(REGNO) \\\n (arc_regno_reg_class[REGNO])\n \n@@ -1332,7 +1332,7 @@ arc_final_prescan_insn (INSN, OPVEC, NOPERANDS)\n \n /* A C expression which evaluates to true if CODE is a valid\n    punctuation character for use in the `PRINT_OPERAND' macro.  */\n-extern char arc_punct_chars[];\n+extern char arc_punct_chars[256];\n #define PRINT_OPERAND_PUNCT_VALID_P(CHAR) \\\n arc_punct_chars[(unsigned char) (CHAR)]\n "}, {"sha": "1cd7fce9c50a46e9d2d9bbb9a147734717d9fdc1", "filename": "gcc/config/c4x/c4x-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f540a7d37187bcd200436031946655ec39af11bb/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f540a7d37187bcd200436031946655ec39af11bb/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h?ref=f540a7d37187bcd200436031946655ec39af11bb", "patch": "@@ -287,8 +287,8 @@ extern struct rtx_def *c4x_compare_op1;\t/* Operand 1 for comparisons.  */\n #endif /* RTX_CODE */\n \n /* Smallest class containing REGNO.  */\n-extern enum reg_class c4x_regclass_map[];\n-extern enum machine_mode c4x_caller_save_map[];\n+extern enum reg_class c4x_regclass_map[FIRST_PSEUDO_REGISTER];\n+extern enum machine_mode c4x_caller_save_map[FIRST_PSEUDO_REGISTER];\n \n extern int c4x_rpts_cycles;\t        /* Max cycles for RPTS.  */\n extern int c4x_cpu_version;\t\t/* Cpu version C30/31/32/40/44.  */"}, {"sha": "1b9322040e03022b20723aa9fa69ede0b6b2400a", "filename": "gcc/config/convex/convex.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f540a7d37187bcd200436031946655ec39af11bb/gcc%2Fconfig%2Fconvex%2Fconvex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f540a7d37187bcd200436031946655ec39af11bb/gcc%2Fconfig%2Fconvex%2Fconvex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Fconvex.h?ref=f540a7d37187bcd200436031946655ec39af11bb", "patch": "@@ -1365,8 +1365,8 @@ enum reg_class {\n \n extern int target_cpu;\n extern int current_section_is_text;\n-extern enum reg_class regno_reg_class[];\n-extern enum reg_class reg_class_from_letter[];\n+extern enum reg_class regno_reg_class[FIRST_PSEUDO_REGISTER];\n+extern enum reg_class reg_class_from_letter[256];\n extern char regno_ok_for_index_p_base[];\n #define regno_ok_for_index_p (regno_ok_for_index_p_base + 1)\n "}, {"sha": "3f65511043ded206a8a2b1456f257a509543fed0", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f540a7d37187bcd200436031946655ec39af11bb/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f540a7d37187bcd200436031946655ec39af11bb/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=f540a7d37187bcd200436031946655ec39af11bb", "patch": "@@ -1503,7 +1503,7 @@ enum reg_class\n    REGNO.  In general there is more than one such class; choose a class which\n    is \"minimal\", meaning that no smaller class also contains the register.  */\n \n-extern enum reg_class regno_reg_class[];\n+extern enum reg_class regno_reg_class[FIRST_PSEUDO_REGISTER];\n #define REGNO_REG_CLASS(REGNO) regno_reg_class[ (REGNO) ]\n \n /* A macro whose definition is the name of the class to which a valid base\n@@ -1533,7 +1533,7 @@ extern enum reg_class regno_reg_class[];\n \t'V', 'X'\n \t'g', 'i', 'm', 'n', 'o', 'p', 'r', 's' */\n \n-extern enum reg_class reg_class_from_letter[];\n+extern enum reg_class reg_class_from_letter[256];\n #define REG_CLASS_FROM_LETTER(CHAR) reg_class_from_letter[(unsigned char)(CHAR)]\n \n /* A C expression which is nonzero if register number NUM is suitable for use"}, {"sha": "6f324065d2143abdd5bcf40ee97a379916f6dfe4", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f540a7d37187bcd200436031946655ec39af11bb/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f540a7d37187bcd200436031946655ec39af11bb/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=f540a7d37187bcd200436031946655ec39af11bb", "patch": "@@ -3136,7 +3136,7 @@ extern const char *ix86_branch_cost_string;\t/* values 1-5: see jump.c */\n extern int ix86_regparm;\t\t\t/* ix86_regparm_string as a number */\n extern int ix86_preferred_stack_boundary;\t/* preferred stack boundary alignment in bits */\n extern int ix86_branch_cost;\t\t\t/* values 1-5: see jump.c */\n-extern enum reg_class const regclass_map[];\t/* smalled class containing REGNO */\n+extern enum reg_class const regclass_map[FIRST_PSEUDO_REGISTER]; /* smalled class containing REGNO */\n extern struct rtx_def *ix86_compare_op0;\t/* operand 0 for comparisons */\n extern struct rtx_def *ix86_compare_op1;\t/* operand 1 for comparisons */\n \f"}, {"sha": "354a80d1ff1f8c8ffe31efe3d98eee09da1a4069", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f540a7d37187bcd200436031946655ec39af11bb/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f540a7d37187bcd200436031946655ec39af11bb/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=f540a7d37187bcd200436031946655ec39af11bb", "patch": "@@ -651,7 +651,7 @@ extern enum m32r_sdata m32r_sdata;\n ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n \n /* Value is 1 if hard register REGNO can hold a value of machine-mode MODE.  */\n-extern unsigned int m32r_hard_regno_mode_ok[];\n+extern unsigned int m32r_hard_regno_mode_ok[FIRST_PSEUDO_REGISTER];\n extern unsigned int m32r_mode_class[];\n #define HARD_REGNO_MODE_OK(REGNO, MODE) \\\n ((m32r_hard_regno_mode_ok[REGNO] & m32r_mode_class[MODE]) != 0)\n@@ -1823,7 +1823,7 @@ do {\t\t\t\t\t\t\t\\\n \n /* A C expression which evaluates to true if CODE is a valid\n    punctuation character for use in the `PRINT_OPERAND' macro.  */\n-extern char m32r_punct_chars[];\n+extern char m32r_punct_chars[256];\n #define PRINT_OPERAND_PUNCT_VALID_P(CHAR) \\\n   m32r_punct_chars[(unsigned char) (CHAR)]\n "}, {"sha": "774546110561c38277ccaed0e4552ddcd543edbc", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f540a7d37187bcd200436031946655ec39af11bb/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f540a7d37187bcd200436031946655ec39af11bb/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=f540a7d37187bcd200436031946655ec39af11bb", "patch": "@@ -530,7 +530,7 @@ enum reg_class\n    reg number REGNO.  This could be a conditional expression\n    or could index an array.  */\n \n-extern int regno_reg_class[];\n+extern int regno_reg_class[FIRST_PSEUDO_REGISTER];\n #define REGNO_REG_CLASS(REGNO) regno_reg_class[REGNO]\n \n /* When defined, the compiler allows registers explicitly used in the"}, {"sha": "96662c5ca4d544e8bc6889620fa1ab75f8f71f17", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f540a7d37187bcd200436031946655ec39af11bb/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f540a7d37187bcd200436031946655ec39af11bb/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=f540a7d37187bcd200436031946655ec39af11bb", "patch": "@@ -119,7 +119,7 @@ enum block_move_type {\n };\n \n extern char mips_reg_names[][8];\t/* register names (a0 vs. $4).  */\n-extern char mips_print_operand_punct[];\t/* print_operand punctuation chars */\n+extern char mips_print_operand_punct[256]; /* print_operand punctuation chars */\n extern const char *current_function_file; /* filename current function is in */\n extern int num_source_filenames;\t/* current .file # */\n extern int inside_function;\t\t/* != 0 if inside of a function */\n@@ -2083,7 +2083,7 @@ extern const enum reg_class mips_regno_to_class[];\n    'z'\tFP Status register\n    'b'\tAll registers */\n \n-extern enum reg_class mips_char_to_class[];\n+extern enum reg_class mips_char_to_class[256];\n \n #define REG_CLASS_FROM_LETTER(C) mips_char_to_class[(unsigned char)(C)]\n "}, {"sha": "62be8cb2f71b69c999727b83eb5022e2355cfebf", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f540a7d37187bcd200436031946655ec39af11bb/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f540a7d37187bcd200436031946655ec39af11bb/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=f540a7d37187bcd200436031946655ec39af11bb", "patch": "@@ -1407,7 +1407,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define PRINT_OPERAND_ADDRESS(FILE, ADDR) print_operand_address(FILE, ADDR)\n \n extern unsigned int ns32k_reg_class_contents[N_REG_CLASSES][1];\n-extern enum reg_class regclass_map[];\t\t/* smallest class containing REGNO */\n+extern enum reg_class regclass_map[FIRST_PSEUDO_REGISTER]; /* smallest class containing REGNO */\n \n /*\n Local variables:"}, {"sha": "49db122e373f803c6685ccfc1673125ec4a8f304", "filename": "gcc/config/pj/pj.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f540a7d37187bcd200436031946655ec39af11bb/gcc%2Fconfig%2Fpj%2Fpj.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f540a7d37187bcd200436031946655ec39af11bb/gcc%2Fconfig%2Fpj%2Fpj.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpj%2Fpj.h?ref=f540a7d37187bcd200436031946655ec39af11bb", "patch": "@@ -1253,7 +1253,7 @@ do { fputs (current_function_varargs || current_function_stdarg         \\\n #define CAN_DEBUG_WITHOUT_FP \n \n /* How to renumber registers for dbx and gdb.  */\n-extern short pj_debugreg_renumber_vec[];\n+extern short pj_debugreg_renumber_vec[FIRST_PSEUDO_REGISTER];\n \n #define DBX_REGISTER_NUMBER(REG) (pj_debugreg_renumber_vec[REG])\n "}, {"sha": "b1583399a077829f58d5b41c6832111153c3544c", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f540a7d37187bcd200436031946655ec39af11bb/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f540a7d37187bcd200436031946655ec39af11bb/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=f540a7d37187bcd200436031946655ec39af11bb", "patch": "@@ -524,7 +524,7 @@ enum reg_class\n \n #define REGNO_REG_CLASS(REGNO) (regclass_map[REGNO])\n \n-extern enum reg_class regclass_map[];\t/* smalled class containing REGNO   */\n+extern enum reg_class regclass_map[FIRST_PSEUDO_REGISTER]; /* smalled class containing REGNO   */\n \n /* The class value for index registers, and the one for base regs.  */\n "}, {"sha": "aa94109be5fa60406a3feb13a08775dd9ed59c61", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f540a7d37187bcd200436031946655ec39af11bb/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f540a7d37187bcd200436031946655ec39af11bb/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=f540a7d37187bcd200436031946655ec39af11bb", "patch": "@@ -804,7 +804,7 @@ enum reg_class\n    reg number REGNO.  This could be a conditional expression\n    or could index an array.  */\n \n-extern int regno_reg_class[];\n+extern int regno_reg_class[FIRST_PSEUDO_REGISTER];\n #define REGNO_REG_CLASS(REGNO) regno_reg_class[(REGNO)]\n \n /* When defined, the compiler allows registers explicitly used in the"}, {"sha": "0eb98cc0ebdfe747a0f2cab5281f23b7ea8c5948", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f540a7d37187bcd200436031946655ec39af11bb/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f540a7d37187bcd200436031946655ec39af11bb/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=f540a7d37187bcd200436031946655ec39af11bb", "patch": "@@ -1302,7 +1302,7 @@ enum reg_class { NO_REGS, FPCC_REGS, I64_REGS, GENERAL_REGS, FP_REGS,\n    reg number REGNO.  This could be a conditional expression\n    or could index an array.  */\n \n-extern enum reg_class sparc_regno_reg_class[];\n+extern enum reg_class sparc_regno_reg_class[FIRST_PSEUDO_REGISTER];\n \n #define REGNO_REG_CLASS(REGNO) sparc_regno_reg_class[(REGNO)]\n "}, {"sha": "313074a3dca83c65edfff7e47e0b64739bc64ee0", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f540a7d37187bcd200436031946655ec39af11bb/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f540a7d37187bcd200436031946655ec39af11bb/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=f540a7d37187bcd200436031946655ec39af11bb", "patch": "@@ -1,3 +1,8 @@\n+Sat Dec 22 16:01:51 2001  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* bld.c (ffebld_arity_op_): Declare array size explicitly.\n+\t* bld.h (ffebld_arity_op_): Likewise.\n+\n 2001-12-20  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* config-lang.in (diff_excludes): Remove."}, {"sha": "9161419bdc9ed68cd82eeb5ef33574a495a0ffbd", "filename": "gcc/f/bld.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f540a7d37187bcd200436031946655ec39af11bb/gcc%2Ff%2Fbld.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f540a7d37187bcd200436031946655ec39af11bb/gcc%2Ff%2Fbld.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fbld.c?ref=f540a7d37187bcd200436031946655ec39af11bb", "patch": "@@ -46,7 +46,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n /* Externals defined here.  */\n \n-const ffebldArity ffebld_arity_op_[]\n+const ffebldArity ffebld_arity_op_[(int) FFEBLD_op]\n =\n {\n #define FFEBLD_OP(KWD,NAME,ARITY) ARITY,"}, {"sha": "e7285e62b0103d009ab2b9378bb04a1a6fc44582", "filename": "gcc/f/bld.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f540a7d37187bcd200436031946655ec39af11bb/gcc%2Ff%2Fbld.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f540a7d37187bcd200436031946655ec39af11bb/gcc%2Ff%2Fbld.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fbld.h?ref=f540a7d37187bcd200436031946655ec39af11bb", "patch": "@@ -474,7 +474,7 @@ struct _ffebld_pool_stack_\n \n /* Global objects accessed by users of this module. */\n \n-extern const ffebldArity ffebld_arity_op_[];\n+extern const ffebldArity ffebld_arity_op_[(int) FFEBLD_op];\n extern struct _ffebld_pool_stack_ ffebld_pool_stack_;\n \n /* Declare functions with prototypes. */"}, {"sha": "db96aa9c03c74b0bb52df0a01e90ee5928cf4009", "filename": "gcc/hard-reg-set.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f540a7d37187bcd200436031946655ec39af11bb/gcc%2Fhard-reg-set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f540a7d37187bcd200436031946655ec39af11bb/gcc%2Fhard-reg-set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhard-reg-set.h?ref=f540a7d37187bcd200436031946655ec39af11bb", "patch": "@@ -452,7 +452,7 @@ extern int inv_reg_alloc_order[FIRST_PSEUDO_REGISTER];\n \n /* For each reg class, a HARD_REG_SET saying which registers are in it.  */\n \n-extern HARD_REG_SET reg_class_contents[];\n+extern HARD_REG_SET reg_class_contents[N_REG_CLASSES];\n \n /* For each reg class, number of regs it contains.  */\n "}, {"sha": "0f285e365242f2c029d5b1b793f2c10588105aa7", "filename": "gcc/machmode.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f540a7d37187bcd200436031946655ec39af11bb/gcc%2Fmachmode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f540a7d37187bcd200436031946655ec39af11bb/gcc%2Fmachmode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.h?ref=f540a7d37187bcd200436031946655ec39af11bb", "patch": "@@ -148,7 +148,7 @@ extern unsigned get_mode_alignment PARAMS ((enum machine_mode));\n \n /* For each class, get the narrowest mode in that class.  */\n \n-extern const enum machine_mode class_narrowest_mode[];\n+extern const enum machine_mode class_narrowest_mode[(int) MAX_MODE_CLASS];\n #define GET_CLASS_NARROWEST_MODE(CLASS) class_narrowest_mode[(int) (CLASS)]\n \n /* Define the integer modes whose sizes are BITS_PER_UNIT and BITS_PER_WORD"}]}