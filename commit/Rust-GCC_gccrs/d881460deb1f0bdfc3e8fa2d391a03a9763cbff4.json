{"sha": "d881460deb1f0bdfc3e8fa2d391a03a9763cbff4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg4MTQ2MGRlYjFmMGJkZmMzZThmYTJkMzkxYTAzYTk3NjNjYmZmNA==", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-08-19T19:00:45Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-08-19T19:00:45Z"}, "message": "Fortran - simplify length of substring with constant bounds\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/100950\n\t* simplify.c (substring_has_constant_len): New.\n\t(gfc_simplify_len): Handle case of substrings with constant\n\tbounds.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/100950\n\t* gfortran.dg/pr100950.f90: New test.", "tree": {"sha": "99d7aa1b245947c4775682b02b4b5a598a7b983e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99d7aa1b245947c4775682b02b4b5a598a7b983e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d881460deb1f0bdfc3e8fa2d391a03a9763cbff4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d881460deb1f0bdfc3e8fa2d391a03a9763cbff4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d881460deb1f0bdfc3e8fa2d391a03a9763cbff4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d881460deb1f0bdfc3e8fa2d391a03a9763cbff4/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77bf9f83b8e388de8bedb259991f588a7b8a7f57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77bf9f83b8e388de8bedb259991f588a7b8a7f57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77bf9f83b8e388de8bedb259991f588a7b8a7f57"}], "stats": {"total": 128, "additions": 127, "deletions": 1}, "files": [{"sha": "492867e12cb76ae3ec5b8cd027e007996baf4a74", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 74, "deletions": 1, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d881460deb1f0bdfc3e8fa2d391a03a9763cbff4/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d881460deb1f0bdfc3e8fa2d391a03a9763cbff4/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=d881460deb1f0bdfc3e8fa2d391a03a9763cbff4", "patch": "@@ -4512,6 +4512,78 @@ gfc_simplify_leadz (gfc_expr *e)\n }\n \n \n+/* Check for constant length of a substring.  */\n+\n+static bool\n+substring_has_constant_len (gfc_expr *e)\n+{\n+  gfc_ref *ref;\n+  HOST_WIDE_INT istart, iend, length;\n+  bool equal_length = false;\n+\n+  if (e->ts.type != BT_CHARACTER)\n+    return false;\n+\n+  for (ref = e->ref; ref; ref = ref->next)\n+    if (ref->type != REF_COMPONENT && ref->type != REF_ARRAY)\n+      break;\n+\n+  if (!ref\n+      || ref->type != REF_SUBSTRING\n+      || !ref->u.ss.start\n+      || ref->u.ss.start->expr_type != EXPR_CONSTANT\n+      || !ref->u.ss.end\n+      || ref->u.ss.end->expr_type != EXPR_CONSTANT\n+      || !ref->u.ss.length)\n+    return false;\n+\n+  /* For non-deferred strings the given length shall be constant.  */\n+  if (!e->ts.deferred\n+      && (!ref->u.ss.length->length\n+\t  || ref->u.ss.length->length->expr_type != EXPR_CONSTANT))\n+    return false;\n+\n+  /* Basic checks on substring starting and ending indices.  */\n+  if (!gfc_resolve_substring (ref, &equal_length))\n+    return false;\n+\n+  istart = gfc_mpz_get_hwi (ref->u.ss.start->value.integer);\n+  iend = gfc_mpz_get_hwi (ref->u.ss.end->value.integer);\n+\n+  if (istart <= iend)\n+    {\n+      if (istart < 1)\n+\t{\n+\t  gfc_error (\"Substring start index (\" HOST_WIDE_INT_PRINT_DEC\n+\t\t     \") at %L below 1\",\n+\t\t     istart, &ref->u.ss.start->where);\n+\t  return false;\n+\t}\n+\n+      /* For deferred strings use end index as proxy for length.  */\n+      if (e->ts.deferred)\n+\tlength = iend;\n+      else\n+\tlength = gfc_mpz_get_hwi (ref->u.ss.length->length->value.integer);\n+      if (iend > length)\n+\t{\n+\t  gfc_error (\"Substring end index (\" HOST_WIDE_INT_PRINT_DEC\n+\t\t     \") at %L exceeds string length\",\n+\t\t     iend, &ref->u.ss.end->where);\n+\t  return false;\n+\t}\n+      length = iend - istart + 1;\n+    }\n+  else\n+    length = 0;\n+\n+  /* Fix substring length.  */\n+  e->value.character.length = length;\n+\n+  return true;\n+}\n+\n+\n gfc_expr *\n gfc_simplify_len (gfc_expr *e, gfc_expr *kind)\n {\n@@ -4521,7 +4593,8 @@ gfc_simplify_len (gfc_expr *e, gfc_expr *kind)\n   if (k == -1)\n     return &gfc_bad_expr;\n \n-  if (e->expr_type == EXPR_CONSTANT)\n+  if (e->expr_type == EXPR_CONSTANT\n+      || substring_has_constant_len (e))\n     {\n       result = gfc_get_constant_expr (BT_INTEGER, k, &e->where);\n       mpz_set_si (result->value.integer, e->value.character.length);"}, {"sha": "cb9d126bc18b4219b4adb03f87a2d8f8c88146e1", "filename": "gcc/testsuite/gfortran.dg/pr100950.f90", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d881460deb1f0bdfc3e8fa2d391a03a9763cbff4/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr100950.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d881460deb1f0bdfc3e8fa2d391a03a9763cbff4/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr100950.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr100950.f90?ref=d881460deb1f0bdfc3e8fa2d391a03a9763cbff4", "patch": "@@ -0,0 +1,53 @@\n+! { dg-do run }\n+! { dg-additional-options \"-fdump-tree-original\" }\n+! PR fortran/100950 - ICE in output_constructor_regular_field, at varasm.c:5514\n+\n+program p\n+  character(8), parameter :: u = \"123\"\n+  character(8)            :: x = \"\", s\n+  character(2)            :: w(2) = [character(len(x(3:4))) :: 'a','b' ]\n+  character(*), parameter :: y(*) = [character(len(u(3:4))) :: 'a','b' ]\n+  character(*), parameter :: z(*) = [character(len(x(3:4))) :: 'a','b' ]\n+  character(*), parameter :: t(*) = [character(len(x( :2))) :: 'a','b' ]\n+  character(*), parameter :: v(*) = [character(len(x(7: ))) :: 'a','b' ]\n+  type t_\n+     character(len=5)              :: s\n+     character(len=8)              :: t(4)\n+     character(len=8), pointer     :: u(:)\n+     character(len=:), allocatable :: str\n+     character(len=:), allocatable :: str2(:)\n+  end type t_\n+  type(t_)                :: q, r(1)\n+  integer,      parameter :: lq = len (q%s(3:4)), lr = len (r%s(3:4))\n+  integer,      parameter :: l1 = len (q   %t(1)(3:4))\n+  integer,      parameter :: l2 = len (q   %t(:)(3:4))\n+  integer,      parameter :: l3 = len (q   %str (3:4))\n+  integer,      parameter :: l4 = len (r(:)%t(1)(3:4))\n+  integer,      parameter :: l5 = len (r(1)%t(:)(3:4))\n+  integer,      parameter :: l6 = len (r(1)%str (3:4))\n+  integer,      parameter :: l7 = len (r(1)%str2(1)(3:4))\n+  integer,      parameter :: l8 = len (r(1)%str2(:)(3:4))\n+\n+  if (len (y) /= 2) stop 1\n+  if (len (z) /= 2) stop 2\n+  if (any (w /= y)) stop 3\n+  if (len ([character(len(u(3:4))) :: 'a','b' ]) /= 2)  stop 4\n+  if (len ([character(len(x(3:4))) :: 'a','b' ]) /= 2)  stop 5\n+  if (any ([character(len(x(3:4))) :: 'a','b' ]  /= y)) stop 6\n+  write(s,*) [character(len(x(3:4))) :: 'a','b' ]\n+  if (s /= \" a b    \") stop 7\n+  if (len (t) /= 2) stop 8\n+  if (len (v) /= 2) stop 9\n+  if (lq /= 2 .or. lr /= 2) stop 10\n+  if (l1 /= 2 .or. l2 /= 2 .or. l4 /= 2 .or. l5 /= 2) stop 11\n+  if (l3 /= 2 .or. l6 /= 2 .or. l7 /= 2 .or. l8 /= 2) stop 12\n+\n+  block\n+    integer, parameter :: l9 = len (r(1)%u(:)(3:4))\n+    if (l9 /= 2) stop 13\n+  end block\n+end\n+\n+! { dg-final { scan-tree-dump-times \"_gfortran_stop_numeric\" 2 \"original\" } }\n+! { dg-final { scan-tree-dump \"_gfortran_stop_numeric \\\\(3, 0\\\\);\" \"original\" } }\n+! { dg-final { scan-tree-dump \"_gfortran_stop_numeric \\\\(7, 0\\\\);\" \"original\" } }"}]}