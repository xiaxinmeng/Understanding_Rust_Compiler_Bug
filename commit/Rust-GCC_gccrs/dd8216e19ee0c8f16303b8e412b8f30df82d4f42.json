{"sha": "dd8216e19ee0c8f16303b8e412b8f30df82d4f42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ4MjE2ZTE5ZWUwYzhmMTYzMDNiOGU0MTJiOGYzMGRmODJkNGY0Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-02-07T20:35:14Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-02-07T20:35:14Z"}, "message": "update\n\nFrom-SVN: r31836", "tree": {"sha": "d078883c51b41d49686c7b2d77df1437fefa7e95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d078883c51b41d49686c7b2d77df1437fefa7e95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd8216e19ee0c8f16303b8e412b8f30df82d4f42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd8216e19ee0c8f16303b8e412b8f30df82d4f42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd8216e19ee0c8f16303b8e412b8f30df82d4f42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd8216e19ee0c8f16303b8e412b8f30df82d4f42/comments", "author": null, "committer": null, "parents": [{"sha": "f4a4b6690e669a9ba351e6fba06cf757349a9cf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4a4b6690e669a9ba351e6fba06cf757349a9cf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4a4b6690e669a9ba351e6fba06cf757349a9cf8"}], "stats": {"total": 108, "additions": 60, "deletions": 48}, "files": [{"sha": "aacfef4b4ac1d2667ef91f98ceef354120049c50", "filename": "gcc/testsuite/g++.old-deja/g++.bob/nested1.C", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd8216e19ee0c8f16303b8e412b8f30df82d4f42/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Fnested1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd8216e19ee0c8f16303b8e412b8f30df82d4f42/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Fnested1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Fnested1.C?ref=dd8216e19ee0c8f16303b8e412b8f30df82d4f42", "patch": "@@ -1,15 +1,16 @@\n // Build don't link: \n-  class A {\n-    class B {\n-      typedef long T;\n-      int i;\n-    };\n+\n+struct A {\n+  struct B {\n+    typedef long T;\n+    int i;\n   };\n-  class C {\n-    class B {\n-      typedef float T;\n-      int i;\n-    };\n+};\n+struct C {\n+  struct B {\n+    typedef float T;\n+    int i;\n   };\n+};\n \n C::B::T a;"}, {"sha": "8e1a6df7a7b8efe350a60dee965a9534d2cfba4f", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/enum6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd8216e19ee0c8f16303b8e412b8f30df82d4f42/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd8216e19ee0c8f16303b8e412b8f30df82d4f42/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum6.C?ref=dd8216e19ee0c8f16303b8e412b8f30df82d4f42", "patch": "@@ -11,6 +11,6 @@ void h(X* p) {\n     X::E2 e2;\n     int x2 = X::a2;\n \n-    X::E1 e1;\n+    X::E1 e1;\t     // ERROR - within this context\n     int x1 = X::a1;  // ERROR - within this context\n     }"}, {"sha": "8a5de0fa2481e9f04351a464285d2db146007697", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/nest11.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd8216e19ee0c8f16303b8e412b8f30df82d4f42/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd8216e19ee0c8f16303b8e412b8f30df82d4f42/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest11.C?ref=dd8216e19ee0c8f16303b8e412b8f30df82d4f42", "patch": "@@ -6,6 +6,8 @@ class A {\n   struct B {\n     int x;\n   };\n+  struct C;\n+  friend struct C;\n   struct C {\n     int bug (A::B &y);\n   };"}, {"sha": "ed4d1836b2b118f1f6c194ecdddcf42a0fec3697", "filename": "gcc/testsuite/g++.old-deja/g++.jason/report.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd8216e19ee0c8f16303b8e412b8f30df82d4f42/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Freport.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd8216e19ee0c8f16303b8e412b8f30df82d4f42/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Freport.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Freport.C?ref=dd8216e19ee0c8f16303b8e412b8f30df82d4f42", "patch": "@@ -38,15 +38,15 @@ int foo2 (int (*a)(int) = &foo)\n }\n \n class X{\n-  class Y{};\n+  class Y{};\t\t\t// ERROR - private\n };\n \n typedef int const * bart ();\n typedef bart const * const * bar2; // ERROR - qualifiers\n \n bar2 baz (X::Y y)\n-{\n-  X::Y f;\n+{\t\t\t\t// ERROR - in this context\n+  X::Y f;\t\t\t// ERROR - in this context\n   bar2 wa [5];\n   wa[0] = baz(f);\n   undef2 (1); // ERROR - implicit declaration"}, {"sha": "d4195d24f5e10b1afb1bb6372456ba7daf87677f", "filename": "gcc/testsuite/g++.old-deja/g++.law/arm14.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd8216e19ee0c8f16303b8e412b8f30df82d4f42/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Farm14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd8216e19ee0c8f16303b8e412b8f30df82d4f42/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Farm14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Farm14.C?ref=dd8216e19ee0c8f16303b8e412b8f30df82d4f42", "patch": "@@ -18,7 +18,7 @@ void h(X* p) {\n     X::E2 e2;\n     int x2 = X::a2;\n \n-    X::E1 e1;                   // Should be rejected, but isn't.// ERROR - .* , XFAIL *-*-*\n+    X::E1 e1;                   // ERROR - within this context\n     int x1 = X::a1;             // ERROR - Should be rejected, and is.\n     }\n "}, {"sha": "e10f4cfd40ec343d2a9af131a0267486174eccdd", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p8785.C", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a4b6690e669a9ba351e6fba06cf757349a9cf8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp8785.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a4b6690e669a9ba351e6fba06cf757349a9cf8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp8785.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp8785.C?ref=f4a4b6690e669a9ba351e6fba06cf757349a9cf8", "patch": "@@ -1,25 +0,0 @@\n-// Build don't link:\n-// prms-id: 8785\n-\n-class Outer {\n-private:\n-  int x; // ERROR - private\n-public:\n-  struct Inner {\n-    int y;\n-    void f( Outer * p, int i) {\n-      p->x = i;\t\t\t// ERROR - \n-    };\n-    void f( Outer & p) {\n-      p.x = y;\t\t\t// ERROR - \n-    };\n-  };\n-};\n-\n-int main() {\n-  Outer::Inner A;\n-  Outer Thing;\n-\n-  A.f(Thing);\n-  A.f(&Thing,2);\n-}"}, {"sha": "e50f47242dc266d4c45b5219f6d070a86191c78b", "filename": "gcc/testsuite/g++.old-deja/g++.mike/pmf2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd8216e19ee0c8f16303b8e412b8f30df82d4f42/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fpmf2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd8216e19ee0c8f16303b8e412b8f30df82d4f42/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fpmf2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fpmf2.C?ref=dd8216e19ee0c8f16303b8e412b8f30df82d4f42", "patch": "@@ -8,8 +8,8 @@ public:\n };\n \n class B_table : private A_table {\n-  typedef void (B_table::* B_ti_fn) (int &item);\n public:\n+  typedef void (B_table::* B_ti_fn) (int &item);\n   B_table() { j = 0x4321;}\n   virtual void call_fn_fn1(int &item, void *pfn1);\n   void func1(int &item) { printf(\"func1(%d)\\n\",item);}"}, {"sha": "5566d35e4e44960c259dc8bbbe420a5b4f31c0a9", "filename": "gcc/testsuite/g++.old-deja/g++.other/access7.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd8216e19ee0c8f16303b8e412b8f30df82d4f42/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Faccess7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd8216e19ee0c8f16303b8e412b8f30df82d4f42/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Faccess7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Faccess7.C?ref=dd8216e19ee0c8f16303b8e412b8f30df82d4f42", "patch": "@@ -0,0 +1,33 @@\n+// Test that access control for types and statics works properly\n+// with nested types.\n+\n+// Build don't link:\n+\n+class A {\n+  static int I1;\t\t// ERROR - private\n+  struct B1 { };\t\t// ERROR - private\n+public:\n+  static int I2;\n+  struct B2 { };\n+};\n+\n+class D: public A {\n+  struct E {\n+    void f ();\n+  };\n+};\n+\n+void D::E::f ()\n+{\n+  int i = I1;\t\t\t// ERROR - within this context\n+  B1 b1;\t\t\t// ERROR - within this context\n+  i = I2;\n+  B2 b2;\n+}\n+\n+void f ()\n+{\n+  A::B1 b1;\t\t\t// ERROR - within this context\n+  new A::B1;\t\t\t// ERROR - within this context\n+  (A::B1) b1;\t\t\t// ERROR - within this context\n+}"}, {"sha": "62371fcef523c4165c43396bf47343a2d167598e", "filename": "gcc/testsuite/g++.old-deja/g++.pt/dynarray.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd8216e19ee0c8f16303b8e412b8f30df82d4f42/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fdynarray.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd8216e19ee0c8f16303b8e412b8f30df82d4f42/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fdynarray.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fdynarray.C?ref=dd8216e19ee0c8f16303b8e412b8f30df82d4f42", "patch": "@@ -1,6 +1,7 @@\n // Build don't link:\n // Special g++ Options: -ansi\n // Origin: Theo Papadopoulo <Theodore.Papadopoulo@sophia.inria.fr>\n+// Special g++ Options:\n \n inline const unsigned& f(unsigned const& a) {\n         return a;"}, {"sha": "6e3e85181fcda95ed0f41245b089cbb040e2eabb", "filename": "gcc/testsuite/g++.old-deja/g++.pt/explicit72.C", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd8216e19ee0c8f16303b8e412b8f30df82d4f42/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fexplicit72.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd8216e19ee0c8f16303b8e412b8f30df82d4f42/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fexplicit72.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fexplicit72.C?ref=dd8216e19ee0c8f16303b8e412b8f30df82d4f42", "patch": "@@ -3,13 +3,13 @@\n // Adapted by Alexandre Oliva <oliva@dcc.unicamp.br>\n // plain char, signed char and unsigned char are distinct types\n \n-template <class X, class Y> class bug {};\n-template <class X> class bug<X,char> { typedef char t; };\n-template <class X> class bug<X,unsigned char> { typedef unsigned char t; };\n-template <class X> class bug<X,signed char> { typedef signed char t; };\n-template <class X> class bug<char,X> { typedef char t; };\n-template <class X> class bug<unsigned char,X> { typedef unsigned char t; };\n-template <class X> class bug<signed char,X> { typedef signed char t; };\n+template <class X, class Y> struct bug {};\n+template <class X> struct bug<X,char> { typedef char t; };\n+template <class X> struct bug<X,unsigned char> { typedef unsigned char t; };\n+template <class X> struct bug<X,signed char> { typedef signed char t; };\n+template <class X> struct bug<char,X> { typedef char t; };\n+template <class X> struct bug<unsigned char,X> { typedef unsigned char t; };\n+template <class X> struct bug<signed char,X> { typedef signed char t; };\n \n void foo() {\n   bug<int,char>::t();"}]}