{"sha": "d4f2728ad9bd031f9a3cfcecce0a0536288bdc2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRmMjcyOGFkOWJkMDMxZjlhM2NmY2VjY2UwYTA1MzYyODhiZGMyZQ==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2007-03-18T19:47:43Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2007-03-18T19:47:43Z"}, "message": "pa.md: Add fpstore_load and store_fpload instruction types.\n\n\t* pa.md: Add fpstore_load and store_fpload instruction types.  Provide\n\treservation, bypass and anti-bypass descriptions for these instructions.\n\tUpdate move patterns.\n\t* pa.c (hppa_fpstore_bypass_p): Check for both TYPE_FPSTORE_LOAD and\n\tTYPE_FPSTORE.\n\nFrom-SVN: r123041", "tree": {"sha": "8bd74db4c19bcf254e4078fe15e231d01ebd2cf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bd74db4c19bcf254e4078fe15e231d01ebd2cf2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4f2728ad9bd031f9a3cfcecce0a0536288bdc2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4f2728ad9bd031f9a3cfcecce0a0536288bdc2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4f2728ad9bd031f9a3cfcecce0a0536288bdc2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4f2728ad9bd031f9a3cfcecce0a0536288bdc2e/comments", "author": null, "committer": null, "parents": [{"sha": "6bad4e437cc022430cb0decd9a61d9fc9e566242", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bad4e437cc022430cb0decd9a61d9fc9e566242", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bad4e437cc022430cb0decd9a61d9fc9e566242"}], "stats": {"total": 134, "additions": 99, "deletions": 35}, "files": [{"sha": "9095ea2dba1ea74ff6bd90cf4eb8b8c22bf5a216", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4f2728ad9bd031f9a3cfcecce0a0536288bdc2e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4f2728ad9bd031f9a3cfcecce0a0536288bdc2e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d4f2728ad9bd031f9a3cfcecce0a0536288bdc2e", "patch": "@@ -1,3 +1,11 @@\n+2007-03-18  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\t* pa.md: Add fpstore_load and store_fpload instruction types.  Provide\n+\treservation, bypass and anti-bypass descriptions for these instructions.\n+\tUpdate move patterns.\n+\t* pa.c (hppa_fpstore_bypass_p): Check for both TYPE_FPSTORE_LOAD and\n+\tTYPE_FPSTORE.\n+\t\n 2007-03-18  Dorit Nuzman  <dorit@il.ibm.com>\n \n \t* tree-vect-transform.c (get_initial_def_for_induction): Replace"}, {"sha": "759d1e20a9ece1c5a9d64a8494fd326714cb4be9", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4f2728ad9bd031f9a3cfcecce0a0536288bdc2e/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4f2728ad9bd031f9a3cfcecce0a0536288bdc2e/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=d4f2728ad9bd031f9a3cfcecce0a0536288bdc2e", "patch": "@@ -58,7 +58,8 @@ hppa_fpstore_bypass_p (rtx out_insn, rtx in_insn)\n   rtx set;\n \n   if (recog_memoized (in_insn) < 0\n-      || get_attr_type (in_insn) != TYPE_FPSTORE\n+      || (get_attr_type (in_insn) != TYPE_FPSTORE\n+\t  && get_attr_type (in_insn) != TYPE_FPSTORE_LOAD)\n       || recog_memoized (out_insn) < 0)\n     return 0;\n "}, {"sha": "c6c6c93586401e772cc635322002c61fdfdb019e", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 89, "deletions": 34, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4f2728ad9bd031f9a3cfcecce0a0536288bdc2e/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4f2728ad9bd031f9a3cfcecce0a0536288bdc2e/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=d4f2728ad9bd031f9a3cfcecce0a0536288bdc2e", "patch": "@@ -68,7 +68,7 @@\n ;; type \"binary\" insns have two input operands (1,2) and one output (0)\n \n (define_attr \"type\"\n-  \"move,unary,binary,shift,nullshift,compare,load,store,uncond_branch,btable_branch,branch,cbranch,fbranch,call,dyncall,fpload,fpstore,fpalu,fpcc,fpmulsgl,fpmuldbl,fpdivsgl,fpdivdbl,fpsqrtsgl,fpsqrtdbl,multi,milli,parallel_branch\"\n+  \"move,unary,binary,shift,nullshift,compare,load,store,uncond_branch,btable_branch,branch,cbranch,fbranch,call,dyncall,fpload,fpstore,fpalu,fpcc,fpmulsgl,fpmuldbl,fpdivsgl,fpdivdbl,fpsqrtsgl,fpsqrtdbl,multi,milli,parallel_branch,fpstore_load,store_fpload\"\n   (const_string \"binary\"))\n \n (define_attr \"pa_combine_type\"\n@@ -258,21 +258,31 @@\n        (eq_attr \"cpu\" \"700\"))\n   \"mem_700*3\")\n \n-(define_insn_reservation \"W11\" 1\n-  (and (eq_attr \"type\" \"!fpcc,fpalu,fpmulsgl,fpmuldbl,fpdivsgl,fpdivdbl,fpsqrtsgl,fpsqrtdbl,load,fpload,store,fpstore\")\n+(define_insn_reservation \"W11\" 5\n+  (and (eq_attr \"type\" \"fpstore_load\")\n+       (eq_attr \"cpu\" \"700\"))\n+  \"mem_700*5\")\n+\n+(define_insn_reservation \"W12\" 6\n+  (and (eq_attr \"type\" \"store_fpload\")\n+       (eq_attr \"cpu\" \"700\"))\n+  \"mem_700*6\")\n+\n+(define_insn_reservation \"W13\" 1\n+  (and (eq_attr \"type\" \"!fpcc,fpalu,fpmulsgl,fpmuldbl,fpdivsgl,fpdivdbl,fpsqrtsgl,fpsqrtdbl,load,fpload,store,fpstore,fpstore_load,store_fpload\")\n        (eq_attr \"cpu\" \"700\"))\n   \"dummy_700\")\n \n ;; We have a bypass for all computations in the FP unit which feed an\n ;; FP store as long as the sizes are the same.\n-(define_bypass 2 \"W1,W2\" \"W10\" \"hppa_fpstore_bypass_p\")\n-(define_bypass 9 \"W3\" \"W10\" \"hppa_fpstore_bypass_p\")\n-(define_bypass 11 \"W4\" \"W10\" \"hppa_fpstore_bypass_p\")\n-(define_bypass 13 \"W5\" \"W10\" \"hppa_fpstore_bypass_p\")\n-(define_bypass 17 \"W6\" \"W10\" \"hppa_fpstore_bypass_p\")\n+(define_bypass 2 \"W1,W2\" \"W10,W11\" \"hppa_fpstore_bypass_p\")\n+(define_bypass 9 \"W3\" \"W10,W11\" \"hppa_fpstore_bypass_p\")\n+(define_bypass 11 \"W4\" \"W10,W11\" \"hppa_fpstore_bypass_p\")\n+(define_bypass 13 \"W5\" \"W10,W11\" \"hppa_fpstore_bypass_p\")\n+(define_bypass 17 \"W6\" \"W10,W11\" \"hppa_fpstore_bypass_p\")\n \n ;; We have an \"anti-bypass\" for FP loads which feed an FP store.\n-(define_bypass 4 \"W8\" \"W10\" \"hppa_fpstore_bypass_p\")\n+(define_bypass 4 \"W8,W12\" \"W10,W11\" \"hppa_fpstore_bypass_p\")\n \n ;; Function units for the 7100 and 7150.  The 7100/7150 can dual-issue\n ;; floating point computations with non-floating point computations (fp loads\n@@ -344,19 +354,29 @@\n        (eq_attr \"cpu\" \"7100\"))\n   \"i_7100+mem_7100,mem_7100\")\n \n-(define_insn_reservation \"X7\" 1\n-  (and (eq_attr \"type\" \"!fpcc,fpalu,fpmulsgl,fpmuldbl,fpdivsgl,fpsqrtsgl,fpdivdbl,fpsqrtdbl,load,fpload,store,fpstore\")\n+(define_insn_reservation \"X7\" 4\n+  (and (eq_attr \"type\" \"fpstore_load\")\n+       (eq_attr \"cpu\" \"7100\"))\n+  \"i_7100+mem_7100,mem_7100*3\")\n+\n+(define_insn_reservation \"X8\" 4\n+  (and (eq_attr \"type\" \"store_fpload\")\n+       (eq_attr \"cpu\" \"7100\"))\n+  \"i_7100+mem_7100,mem_7100*3\")\n+\n+(define_insn_reservation \"X9\" 1\n+  (and (eq_attr \"type\" \"!fpcc,fpalu,fpmulsgl,fpmuldbl,fpdivsgl,fpsqrtsgl,fpdivdbl,fpsqrtdbl,load,fpload,store,fpstore,fpstore_load,store_fpload\")\n        (eq_attr \"cpu\" \"7100\"))\n   \"i_7100\")\n \n ;; We have a bypass for all computations in the FP unit which feed an\n ;; FP store as long as the sizes are the same.\n-(define_bypass 1 \"X0\" \"X6\" \"hppa_fpstore_bypass_p\")\n-(define_bypass 7 \"X1\" \"X6\" \"hppa_fpstore_bypass_p\")\n-(define_bypass 14 \"X2\" \"X6\" \"hppa_fpstore_bypass_p\")\n+(define_bypass 1 \"X0\" \"X6,X7\" \"hppa_fpstore_bypass_p\")\n+(define_bypass 7 \"X1\" \"X6,X7\" \"hppa_fpstore_bypass_p\")\n+(define_bypass 14 \"X2\" \"X6,X7\" \"hppa_fpstore_bypass_p\")\n \n ;; We have an \"anti-bypass\" for FP loads which feed an FP store.\n-(define_bypass 3 \"X4\" \"X6\" \"hppa_fpstore_bypass_p\")\n+(define_bypass 3 \"X4,X8\" \"X6,X7\" \"hppa_fpstore_bypass_p\")\n \n ;; The 7100LC has three floating-point units: ALU, MUL, and DIV.\n ;; There's no value in modeling the ALU and MUL separately though\n@@ -449,40 +469,70 @@\n        (eq_attr \"cpu\" \"7100LC\"))\n   \"i1_7100lc+mem_7100lc,mem_7100lc\")\n \n-(define_insn_reservation \"Y6\" 1\n+(define_insn_reservation \"Y6\" 4\n+  (and (eq_attr \"type\" \"fpstore_load\")\n+       (eq_attr \"cpu\" \"7100LC\"))\n+  \"i1_7100lc+mem_7100lc,mem_7100lc*3\")\n+\n+(define_insn_reservation \"Y7\" 4\n+  (and (eq_attr \"type\" \"store_fpload\")\n+       (eq_attr \"cpu\" \"7100LC\"))\n+  \"i1_7100lc+mem_7100lc,mem_7100lc*3\")\n+\n+(define_insn_reservation \"Y8\" 1\n   (and (eq_attr \"type\" \"shift,nullshift\")\n        (eq_attr \"cpu\" \"7100LC,7200,7300\"))\n   \"i1_7100lc\")\n \n-(define_insn_reservation \"Y7\" 1\n+(define_insn_reservation \"Y9\" 1\n   (and (eq_attr \"type\" \"!fpcc,fpalu,fpmulsgl,fpmuldbl,fpdivsgl,fpsqrtsgl,fpdivdbl,fpsqrtdbl,load,fpload,store,fpstore,shift,nullshift\")\n        (eq_attr \"cpu\" \"7100LC,7200,7300\"))\n   \"(i0_7100lc|i1_7100lc)\")\n \n ;; The 7200 has a store-load penalty\n-(define_insn_reservation \"Y8\" 2\n+(define_insn_reservation \"Y10\" 2\n   (and (eq_attr \"type\" \"store\")\n        (eq_attr \"cpu\" \"7200\"))\n   \"i1_7100lc,mem_7100lc\")\n \n-(define_insn_reservation \"Y9\" 2\n+(define_insn_reservation \"Y11\" 2\n   (and (eq_attr \"type\" \"fpstore\")\n        (eq_attr \"cpu\" \"7200\"))\n   \"i1_7100lc,mem_7100lc\")\n \n+(define_insn_reservation \"Y12\" 4\n+  (and (eq_attr \"type\" \"fpstore_load\")\n+       (eq_attr \"cpu\" \"7200\"))\n+  \"i1_7100lc,mem_7100lc,i1_7100lc+mem_7100lc\")\n+\n+(define_insn_reservation \"Y13\" 4\n+  (and (eq_attr \"type\" \"store_fpload\")\n+       (eq_attr \"cpu\" \"7200\"))\n+  \"i1_7100lc,mem_7100lc,i1_7100lc+mem_7100lc\")\n+\n ;; The 7300 has no penalty for store-store or store-load\n-(define_insn_reservation \"Y10\" 2\n+(define_insn_reservation \"Y14\" 2\n   (and (eq_attr \"type\" \"store\")\n        (eq_attr \"cpu\" \"7300\"))\n   \"i1_7100lc\")\n \n-(define_insn_reservation \"Y11\" 2\n+(define_insn_reservation \"Y15\" 2\n   (and (eq_attr \"type\" \"fpstore\")\n        (eq_attr \"cpu\" \"7300\"))\n   \"i1_7100lc\")\n \n+(define_insn_reservation \"Y16\" 4\n+  (and (eq_attr \"type\" \"fpstore_load\")\n+       (eq_attr \"cpu\" \"7300\"))\n+  \"i1_7100lc,i1_7100lc+mem_7100lc\")\n+\n+(define_insn_reservation \"Y17\" 4\n+  (and (eq_attr \"type\" \"store_fpload\")\n+       (eq_attr \"cpu\" \"7300\"))\n+  \"i1_7100lc,i1_7100lc+mem_7100lc\")\n+\n ;; We have an \"anti-bypass\" for FP loads which feed an FP store.\n-(define_bypass 3 \"Y3\" \"Y5,Y9,Y11\" \"hppa_fpstore_bypass_p\")\n+(define_bypass 3 \"Y3,Y7,Y13,Y17\" \"Y5,Y6,Y11,Y12,Y15,Y16\" \"hppa_fpstore_bypass_p\")\n \n ;; Scheduling for the PA8000 is somewhat different than scheduling for a\n ;; traditional architecture.\n@@ -536,18 +586,23 @@\n     (eq_attr \"cpu\" \"8000\"))\n   \"im_8000,rm_8000+store_8000\")\n \n+(define_insn_reservation \"Z2\" 0\n+  (and (eq_attr \"type\" \"fpstore_load,store_fpload\")\n+       (eq_attr \"cpu\" \"8000\"))\n+  \"im_8000,rm_8000+store_8000,im_8000,rm_8000\")\n+\n ;; We can issue and retire two non-memory operations per cycle with\n ;; a few exceptions (branches).  This group catches those we want\n ;; to assume have zero latency.\n-(define_insn_reservation \"Z2\" 0\n+(define_insn_reservation \"Z3\" 0\n   (and\n-    (eq_attr \"type\" \"!load,fpload,store,fpstore,uncond_branch,btable_branch,branch,cbranch,fbranch,call,dyncall,multi,milli,parallel_branch,fpcc,fpalu,fpmulsgl,fpmuldbl,fpsqrtsgl,fpsqrtdbl,fpdivsgl,fpdivdbl\")\n+    (eq_attr \"type\" \"!load,fpload,store,fpstore,uncond_branch,btable_branch,branch,cbranch,fbranch,call,dyncall,multi,milli,parallel_branch,fpcc,fpalu,fpmulsgl,fpmuldbl,fpsqrtsgl,fpsqrtdbl,fpdivsgl,fpdivdbl,fpstore_load,store_fpload\")\n     (eq_attr \"cpu\" \"8000\"))\n   \"inm_8000,rnm_8000\")\n \n ;; Branches use both slots in the non-memory issue and\n ;; retirement unit.\n-(define_insn_reservation \"Z3\" 0\n+(define_insn_reservation \"Z4\" 0\n   (and\n     (eq_attr \"type\" \"uncond_branch,btable_branch,branch,cbranch,fbranch,call,dyncall,multi,milli,parallel_branch\")\n     (eq_attr \"cpu\" \"8000\"))\n@@ -557,7 +612,7 @@\n ;; They can issue/retire two at a time in the non-memory\n ;; units.  We fix their latency at 2 cycles and they\n ;; are fully pipelined.\n-(define_insn_reservation \"Z4\" 1\n+(define_insn_reservation \"Z5\" 1\n  (and\n    (eq_attr \"type\" \"fpcc,fpalu,fpmulsgl,fpmuldbl\")\n    (eq_attr \"cpu\" \"8000\"))\n@@ -566,13 +621,13 @@\n ;; The fdivsqrt units are not pipelined and have a very long latency.  \n ;; To keep the DFA from exploding, we do not show all the\n ;; reservations for the divsqrt unit.\n-(define_insn_reservation \"Z5\" 17\n+(define_insn_reservation \"Z6\" 17\n  (and\n    (eq_attr \"type\" \"fpdivsgl,fpsqrtsgl\")\n    (eq_attr \"cpu\" \"8000\"))\n  \"inm_8000,fdivsqrt_8000*6,rnm_8000\")\n \n-(define_insn_reservation \"Z6\" 31\n+(define_insn_reservation \"Z7\" 31\n  (and\n    (eq_attr \"type\" \"fpdivdbl,fpsqrtdbl\")\n    (eq_attr \"cpu\" \"8000\"))\n@@ -2503,7 +2558,7 @@\n    fstw%F0 %1,%0\n    {fstws|fstw} %1,-16(%%sp)\\n\\t{ldws|ldw} -16(%%sp),%0\n    {stws|stw} %1,-16(%%sp)\\n\\t{fldws|fldw} -16(%%sp),%0\"\n-  [(set_attr \"type\" \"load,move,move,move,shift,load,store,move,move,fpalu,fpload,fpstore,move,move\")\n+  [(set_attr \"type\" \"load,move,move,move,shift,load,store,move,move,fpalu,fpload,fpstore,fpstore_load,store_fpload\")\n    (set_attr \"pa_combine_type\" \"addmove\")\n    (set_attr \"length\" \"4,4,4,4,4,4,4,4,4,4,4,4,8,8\")])\n \n@@ -3142,7 +3197,7 @@\n    fcpy,sgl %f1,%0\n    {fstws|fstw} %1,-16(%%sp)\\n\\t{ldws|ldw} -16(%%sp),%0\n    {stws|stw} %1,-16(%%sp)\\n\\t{fldws|fldw} -16(%%sp),%0\"\n-  [(set_attr \"type\" \"move,move,move,shift,load,store,move,move,move,move,move\")\n+  [(set_attr \"type\" \"move,move,move,shift,load,store,move,move,move,fpstore_load,store_fpload\")\n    (set_attr \"pa_combine_type\" \"addmove\")\n    (set_attr \"length\" \"4,4,4,4,4,4,4,4,4,8,8\")])\n \n@@ -3315,7 +3370,7 @@\n    fcpy,sgl %f1,%0\n    {fstws|fstw} %1,-16(%%sp)\\n\\t{ldws|ldw} -16(%%sp),%0\n    {stws|stw} %1,-16(%%sp)\\n\\t{fldws|fldw} -16(%%sp),%0\"\n-  [(set_attr \"type\" \"move,move,move,shift,load,store,move,move,move,move,move\")\n+  [(set_attr \"type\" \"move,move,move,shift,load,store,move,move,move,fpstore_load,store_fpload\")\n    (set_attr \"pa_combine_type\" \"addmove\")\n    (set_attr \"length\" \"4,4,4,4,4,4,4,4,4,8,8\")])\n \n@@ -4171,7 +4226,7 @@\n     return output_fp_move_double (operands);\n   return output_move_double (operands);\n }\"\n-  [(set_attr \"type\" \"fpalu,move,fpstore,store,store,fpload,load,load,move,move\")\n+  [(set_attr \"type\" \"fpalu,move,fpstore,store,store,fpload,load,load,fpstore_load,store_fpload\")\n    (set_attr \"length\" \"4,8,4,8,16,4,8,16,12,12\")])\n \n (define_insn \"\"\n@@ -4505,7 +4560,7 @@\n   return output_move_double (operands);\n }\"\n   [(set_attr \"type\"\n-    \"move,store,store,load,load,multi,fpalu,fpload,fpstore,move,move\")\n+    \"move,store,store,load,load,multi,fpalu,fpload,fpstore,fpstore_load,store_fpload\")\n    (set_attr \"length\" \"8,8,16,8,16,16,4,4,4,12,12\")])\n \n (define_insn \"\"\n@@ -4744,7 +4799,7 @@\n    stw%M0 %r1,%0\n    {fstws|fstw} %1,-16(%%sp)\\n\\t{ldws|ldw} -16(%%sp),%0\n    {stws|stw} %1,-16(%%sp)\\n\\t{fldws|fldw} -16(%%sp),%0\"\n-  [(set_attr \"type\" \"fpalu,move,fpload,load,fpstore,store,move,move\")\n+  [(set_attr \"type\" \"fpalu,move,fpload,load,fpstore,store,fpstore_load,store_fpload\")\n    (set_attr \"pa_combine_type\" \"addmove\")\n    (set_attr \"length\" \"4,4,4,4,4,4,8,8\")])\n "}]}