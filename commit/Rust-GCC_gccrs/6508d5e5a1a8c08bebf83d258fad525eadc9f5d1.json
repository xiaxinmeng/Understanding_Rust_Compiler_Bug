{"sha": "6508d5e5a1a8c08bebf83d258fad525eadc9f5d1", "node_id": "C_kwDOANBUbNoAKDY1MDhkNWU1YTFhOGMwOGJlYmY4M2QyNThmYWQ1MjVlYWRjOWY1ZDE", "commit": {"author": {"name": "Michael Collison", "email": "collison@rivosinc.com", "date": "2022-12-02T07:40:05Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-12-02T08:22:01Z"}, "message": "match.pd: rewrite select to branchless expression\n\nThis patches transforms ((x & 0x1) == 0) ? y : z <op> y -into\n(-(typeof(y))(x & 0x1) & z) <op> y, where op is a '^' or a '|'. It also\ntransforms (cond (and (x , 0x1) != 0), (z op y), y ) into (-(and (x ,\n0x1)) & z ) op y.\n\nMatching this patterns allows GCC to generate branchless code for one of\nthe functions in coremark.\n\n\t* match.pd ((x & 0x1) == 0) ? y : z <op> y\n\t-> (-(typeof(y))(x & 0x1) & z) <op> y.\n\n\t* gcc.dg/tree-ssa/branchless-cond.c: New test.", "tree": {"sha": "8799cc2dad553ed6c4f19a588ee205a416844239", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8799cc2dad553ed6c4f19a588ee205a416844239"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6508d5e5a1a8c08bebf83d258fad525eadc9f5d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6508d5e5a1a8c08bebf83d258fad525eadc9f5d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6508d5e5a1a8c08bebf83d258fad525eadc9f5d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6508d5e5a1a8c08bebf83d258fad525eadc9f5d1/comments", "author": null, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b50850c3c6f2eceb8012dcc8d3cd5ddd94fac6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b50850c3c6f2eceb8012dcc8d3cd5ddd94fac6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b50850c3c6f2eceb8012dcc8d3cd5ddd94fac6c"}], "stats": {"total": 50, "additions": 50, "deletions": 0}, "files": [{"sha": "04d4c4c054ae4a162aa8a8160cfc354b84eb9b3b", "filename": "gcc/match.pd", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6508d5e5a1a8c08bebf83d258fad525eadc9f5d1/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6508d5e5a1a8c08bebf83d258fad525eadc9f5d1/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=6508d5e5a1a8c08bebf83d258fad525eadc9f5d1", "patch": "@@ -3492,6 +3492,30 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (cond (le @0 integer_zerop@1) (negate@2 @0) integer_zerop@1)\n   (max @2 @1))\n \n+/* ((x & 0x1) == 0) ? y : z <op> y -> (-(typeof(y))(x & 0x1) & z) <op> y */\n+(for op (bit_xor bit_ior)\n+ (simplify\n+  (cond (eq zero_one_valued_p@0\n+            integer_zerop)\n+        @1\n+        (op:c @2 @1))\n+  (if (INTEGRAL_TYPE_P (type)\n+       && TYPE_PRECISION (type) > 1\n+       && (INTEGRAL_TYPE_P (TREE_TYPE (@0))))\n+       (op (bit_and (negate (convert:type @0)) @2) @1))))\n+\n+/* ((x & 0x1) == 0) ? z <op> y : y -> (-(typeof(y))(x & 0x1) & z) <op> y */\n+(for op (bit_xor bit_ior)\n+ (simplify\n+  (cond (ne zero_one_valued_p@0\n+            integer_zerop)\n+       (op:c @2 @1)\n+        @1)\n+  (if (INTEGRAL_TYPE_P (type)\n+       && TYPE_PRECISION (type) > 1\n+       && (INTEGRAL_TYPE_P (TREE_TYPE (@0))))\n+       (op (bit_and (negate (convert:type @0)) @2) @1))))\n+\n /* Simplifications of shift and rotates.  */\n \n (for rotate (lrotate rrotate)"}, {"sha": "68087ae6568300fd6b2e25cbcf726ea1ae693915", "filename": "gcc/testsuite/gcc.dg/tree-ssa/branchless-cond.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6508d5e5a1a8c08bebf83d258fad525eadc9f5d1/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbranchless-cond.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6508d5e5a1a8c08bebf83d258fad525eadc9f5d1/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbranchless-cond.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbranchless-cond.c?ref=6508d5e5a1a8c08bebf83d258fad525eadc9f5d1", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+int f1(unsigned int x, unsigned int y, unsigned int z)\n+{\n+  return ((x & 1) == 0) ? y : z ^ y;\n+}\n+\n+int f2(unsigned int x, unsigned int y, unsigned int z)\n+{\n+  return ((x & 1) != 0) ? z ^ y : y;\n+}\n+\n+int f3(unsigned int x, unsigned int y, unsigned int z)\n+{\n+  return ((x & 1) == 0) ? y : z | y;\n+}\n+\n+int f4(unsigned int x, unsigned int y, unsigned int z)\n+{\n+  return ((x & 1) != 0) ? z | y : y;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \" -\" 4 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \" & \" 8 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"if\" \"optimized\" } } */"}]}