{"sha": "b1d3a450becb7fb1648c11d4210b109d660f085d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFkM2E0NTBiZWNiN2ZiMTY0OGMxMWQ0MjEwYjEwOWQ2NjBmMDg1ZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2016-12-27T08:59:04Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-12-27T08:59:04Z"}, "message": "re PR target/78904 (zero-extracts are not effective)\n\n\tPR target/78904\n\t* config/i386/i386.md (*cmpqi_ext_1, *extvqi, *extzvqi): Use\n\tnonimmediate_operand instead of nonimmediate_x64nomem_operand.\n\t(*cmpqi_ext_3, insv<mode>_1, addqi_ext_1, *testqi_ext_1, andqi_ext_1)\n\t(*<any_or:code>qi_ext_1, *xorqi_ext_1_cc): Use general_operand\n\tinstead of general_x64nomem_operand.\n\t* config/i386/predicates.md (nonimmediate_x64nomem_operand): Remove.\n\t(general_x64nomem_operand): Ditto.\n\ntestsuite/ChangeLog:\n\n\tPR target/78904\n\t* gcc.target/i386/pr78904-2.c: New test.\n\nFrom-SVN: r243933", "tree": {"sha": "f2ec4288c38d3284d2753bd944ad5631f455549e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2ec4288c38d3284d2753bd944ad5631f455549e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1d3a450becb7fb1648c11d4210b109d660f085d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1d3a450becb7fb1648c11d4210b109d660f085d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1d3a450becb7fb1648c11d4210b109d660f085d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1d3a450becb7fb1648c11d4210b109d660f085d/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2226492f2637964d2ba1b5a2cb1354b0b0ef5b51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2226492f2637964d2ba1b5a2cb1354b0b0ef5b51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2226492f2637964d2ba1b5a2cb1354b0b0ef5b51"}], "stats": {"total": 98, "additions": 75, "deletions": 23}, "files": [{"sha": "3b0e8161ae1a57fcb004a8e1bc81a9e81c6f1930", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d3a450becb7fb1648c11d4210b109d660f085d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d3a450becb7fb1648c11d4210b109d660f085d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b1d3a450becb7fb1648c11d4210b109d660f085d", "patch": "@@ -1,3 +1,14 @@\n+2016-12-27  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/78904\n+\t* config/i386/i386.md (*cmpqi_ext_1, *extvqi, *extzvqi): Use\n+\tnonimmediate_operand instead of nonimmediate_x64nomem_operand.\n+\t(*cmpqi_ext_3, insv<mode>_1, addqi_ext_1, *testqi_ext_1, andqi_ext_1)\n+\t(*<any_or:code>qi_ext_1, *xorqi_ext_1_cc): Use general_operand\n+\tinstead of general_x64nomem_operand.\n+\t* config/i386/predicates.md (nonimmediate_x64nomem_operand): Remove.\n+\t(general_x64nomem_operand): Ditto.\n+\n 2016-12-26  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/78904"}, {"sha": "3fd85974bb5cac86707c869e7dd6aecfdf22f70b", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d3a450becb7fb1648c11d4210b109d660f085d/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d3a450becb7fb1648c11d4210b109d660f085d/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=b1d3a450becb7fb1648c11d4210b109d660f085d", "patch": "@@ -1295,7 +1295,7 @@\n (define_insn \"*cmpqi_ext_1\"\n   [(set (reg FLAGS_REG)\n \t(compare\n-\t  (match_operand:QI 0 \"nonimmediate_x64nomem_operand\" \"Q,m\")\n+\t  (match_operand:QI 0 \"nonimmediate_operand\" \"Q,m\")\n \t  (subreg:QI\n \t    (zero_extract:SI\n \t      (match_operand 1 \"ext_register_operand\" \"Q,Q\")\n@@ -1340,7 +1340,7 @@\n \t      (match_operand 0 \"ext_register_operand\" \"Q,Q\")\n \t      (const_int 8)\n \t      (const_int 8)) 0)\n-\t  (match_operand:QI 1 \"general_x64nomem_operand\" \"Qn,m\")))]\n+\t  (match_operand:QI 1 \"general_operand\" \"Qn,m\")))]\n   \"ix86_match_ccmode (insn, CCmode)\"\n   \"cmp{b}\\t{%1, %h0|%h0, %1}\"\n   [(set_attr \"isa\" \"*,nox64\")\n@@ -2781,7 +2781,7 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*extvqi\"\n-  [(set (match_operand:QI 0 \"nonimmediate_x64nomem_operand\" \"=Q,?R,m\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=Q,?R,m\")\n         (sign_extract:QI (match_operand 1 \"ext_register_operand\" \"Q,Q,Q\")\n                          (const_int 8)\n                          (const_int 8)))]\n@@ -2836,7 +2836,7 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*extzvqi\"\n-  [(set (match_operand:QI 0 \"nonimmediate_x64nomem_operand\" \"=Q,?R,m\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=Q,?R,m\")\n         (subreg:QI\n \t  (zero_extract:SI (match_operand 1 \"ext_register_operand\" \"Q,Q,Q\")\n \t\t\t   (const_int 8)\n@@ -2897,7 +2897,7 @@\n   [(set (zero_extract:SWI248 (match_operand 0 \"ext_register_operand\" \"+Q,Q\")\n \t\t\t     (const_int 8)\n \t\t\t     (const_int 8))\n-\t(match_operand:SWI248 1 \"general_x64nomem_operand\" \"Qn,m\"))]\n+\t(match_operand:SWI248 1 \"general_operand\" \"Qn,m\"))]\n   \"\"\n {\n   if (CONST_INT_P (operands[1]))\n@@ -6087,7 +6087,7 @@\n \t      (zero_extract:SI (match_operand 1 \"ext_register_operand\" \"0,0\")\n \t\t\t       (const_int 8)\n \t\t\t       (const_int 8)) 0)\n-\t    (match_operand:QI 2 \"general_x64nomem_operand\" \"Qn,m\")) 0))\n+\t    (match_operand:QI 2 \"general_operand\" \"Qn,m\")) 0))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n {\n@@ -7889,7 +7889,7 @@\n \t      (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"Q,Q\")\n \t\t\t       (const_int 8)\n \t\t\t       (const_int 8)) 0)\n-\t    (match_operand:QI 1 \"general_x64nomem_operand\" \"Qn,m\"))\n+\t    (match_operand:QI 1 \"general_operand\" \"Qn,m\"))\n \t  (const_int 0)))]\n   \"ix86_match_ccmode (insn, CCNOmode)\"\n   \"test{b}\\t{%1, %h0|%h0, %1}\"\n@@ -8417,7 +8417,7 @@\n \t      (zero_extract:SI (match_operand 1 \"ext_register_operand\" \"0,0\")\n \t\t\t       (const_int 8)\n \t\t\t       (const_int 8)) 0)\n-\t    (match_operand:QI 2 \"general_x64nomem_operand\" \"Qn,m\")) 0))\n+\t    (match_operand:QI 2 \"general_operand\" \"Qn,m\")) 0))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n   \"and{b}\\t{%2, %h0|%h0, %2}\"\n@@ -8803,7 +8803,7 @@\n \t      (zero_extract:SI (match_operand 1 \"ext_register_operand\" \"0,0\")\n \t\t\t       (const_int 8)\n \t\t\t       (const_int 8)) 0)\n-\t    (match_operand:QI 2 \"general_x64nomem_operand\" \"Qn,m\")) 0))\n+\t    (match_operand:QI 2 \"general_operand\" \"Qn,m\")) 0))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun)\"\n   \"<logic>{b}\\t{%2, %h0|%h0, %2}\"\n@@ -8913,7 +8913,7 @@\n \t      (zero_extract:SI (match_operand 1 \"ext_register_operand\" \"0,0\")\n \t\t\t       (const_int 8)\n \t\t\t       (const_int 8)) 0)\n-\t    (match_operand:QI 2 \"general_x64nomem_operand\" \"Qn,m\"))\n+\t    (match_operand:QI 2 \"general_operand\" \"Qn,m\"))\n \t  (const_int 0)))\n    (set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q,Q\")\n \t\t\t (const_int 8)"}, {"sha": "b2d847e991fbbfaf1acd54797caadc37dbad7c28", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d3a450becb7fb1648c11d4210b109d660f085d/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d3a450becb7fb1648c11d4210b109d660f085d/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=b1d3a450becb7fb1648c11d4210b109d660f085d", "patch": "@@ -100,18 +100,6 @@\n \t  && (REGNO (op) > LAST_VIRTUAL_REGISTER || QI_REGNO_P (REGNO (op))));\n })\n \n-;; Match nonimmediate operands, but exclude memory operands on 64bit targets.\n-(define_predicate \"nonimmediate_x64nomem_operand\"\n-  (if_then_else (match_test \"TARGET_64BIT\")\n-    (match_operand 0 \"register_operand\")\n-    (match_operand 0 \"nonimmediate_operand\")))\n-\n-;; Match general operands, but exclude memory operands on 64bit targets.\n-(define_predicate \"general_x64nomem_operand\"\n-  (if_then_else (match_test \"TARGET_64BIT\")\n-    (match_operand 0 \"nonmemory_operand\")\n-    (match_operand 0 \"general_operand\")))\n-\n ;; Match register operands, but include memory operands for TARGET_SSE_MATH.\n (define_predicate \"register_ssemem_operand\"\n   (if_then_else"}, {"sha": "fc9233a21bb9a921e8d1f3ba2219b80d3fb9779d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d3a450becb7fb1648c11d4210b109d660f085d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d3a450becb7fb1648c11d4210b109d660f085d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b1d3a450becb7fb1648c11d4210b109d660f085d", "patch": "@@ -1,7 +1,12 @@\n+2016-12-27  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/78904\n+\t* gcc.target/i386/pr78904-2.c: New test.\n+\n 2016-12-26  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/78904\n-\t* gcc.target/i386/pr78904.c: New test.\n+\t* gcc.target/i386/pr78904-1.c: New test.\n \n 2016-12-23  Andre Vehreschild  <vehre@gcc.gnu.org>\n "}, {"sha": "d27d7fd651d0d548e6ef5a1fcdf50345b51cd712", "filename": "gcc/testsuite/gcc.target/i386/pr78904-1.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d3a450becb7fb1648c11d4210b109d660f085d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d3a450becb7fb1648c11d4210b109d660f085d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-1.c?ref=b1d3a450becb7fb1648c11d4210b109d660f085d", "previous_filename": "gcc/testsuite/gcc.target/i386/pr78904.c"}, {"sha": "03792b0242f2a2c86ef7690620bc8f938a36abf1", "filename": "gcc/testsuite/gcc.target/i386/pr78904-2.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d3a450becb7fb1648c11d4210b109d660f085d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d3a450becb7fb1648c11d4210b109d660f085d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-2.c?ref=b1d3a450becb7fb1648c11d4210b109d660f085d", "patch": "@@ -0,0 +1,48 @@\n+/* PR target/78904 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -masm=att\" } */\n+\n+struct S1\n+{\n+  unsigned char pad1;\n+  unsigned char val;\n+  unsigned short pad2;\n+};\n+\n+extern struct S1 t;\n+\n+struct S1 test_and (struct S1 a, struct S1 b)\n+{\n+  a.val &= b.val;\n+\n+  return a;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]andb\\[^\\n\\r]*, %.h\" } } */\n+\n+struct S1 test_or (struct S1 a, struct S1 b)\n+{\n+  a.val |= b.val;\n+\n+  return a;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]orb\\[^\\n\\r]*, %.h\" } } */\n+\n+struct S1 test_xor (struct S1 a, struct S1 b)\n+{\n+  a.val ^= b.val;\n+\n+  return a;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]xorb\\[^\\n\\r]*, %.h\" } } */\n+\n+struct S1 test_add (struct S1 a, struct S1 b)\n+{\n+  a.val += t.val;\n+\n+  return a;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]addb\\[^\\n\\r]*, %.h\" } } */"}]}