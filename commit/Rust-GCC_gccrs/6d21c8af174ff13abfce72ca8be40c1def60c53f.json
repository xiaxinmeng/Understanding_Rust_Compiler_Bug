{"sha": "6d21c8af174ff13abfce72ca8be40c1def60c53f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQyMWM4YWYxNzRmZjEzYWJmY2U3MmNhOGJlNDBjMWRlZjYwYzUzZg==", "commit": {"author": {"name": "Doug Rupp", "email": "rupp@adacore.com", "date": "2008-04-09T07:29:49Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-04-09T07:29:49Z"}, "message": "decl.c (validate_size): Set minimum size for fat pointers same as access types.\n\n2008-04-09  Doug Rupp  <rupp@adacore.com>\n\n\t* decl.c (validate_size): Set minimum size for fat pointers same as\n\taccess types. Code clean ups.\n\n\t* gmem.c (xstrdup32): New macro for 32bit dup on VMS, noop otherwise\n\t(__gnat_gmem_a2l_initialize): Dup exename into 32 bit memory on VMS\n\n\t* s-auxdec-vms_64.ads, s-auxdec.ads (Short_Address_Size): New constant\n\n\t* s-crtl.ads (malloc32) New function, alias for malloc\n\t(realloc32) New function, alias for realloc\n\n\t* socket.c (__gnat_new_socket_set): Malloc fd_set in 32 bits on VMS\n\n\t* utils2.c (build_call_alloc_dealloc): Return call to short malloc if\n\tallocator size is 32 and default pointer size is 64.\n\t(find_common_type): Document assumption on t1/t2 vs lhs/rhs. Force use of\n\tlhs type if smaller, whatever the modes.\n\n\t* gigi.h (malloc32_decl): New macro definition\n\n\t* utils.c (init_gigi_decls): New malloc32_decl\n\tVarious code clean ups.\n\n\t* s-asthan-vms-alpha.adb (Process_AST.To_Address): Unchecked convert to\n\tTask_Address vice System.Address.\n\n\t* s-taspri-vms.ads: Import System.Aux_DEC\n\t(Task_Address): New subtype of System.Aux_DEC.Short_Address\n\t(Task_Address_Size): New constant size of System.Aux_DEC.Short_Address\n\n\t* s-asthan-vms-alpha.adb (Process_AST.To_Address): Unchecked convert to\n\tTask_Address vice System.Address.\n\n\t* s-inmaop-vms.adb: Import System.Task_Primitives\n\t(To_Address): Unchecked convert to Task_Address vice System.Address\n\n\t* s-taprop-vms.adb (Timed_Delay): Always set the timer even if delay\n\texpires now.\n\t(To_Task_ID) Unchecked convert from Task_Adddress vice System.Address\n\t(To_Address) Unchecked convert to Task_Address vice System.Address\n\n\t* s-tpopde-vms.adb: Remove unnecessary warning pragmas\n\n\t* g-socthi-vms.ads: Add 32bit size clauses on socket access types.\n\nFrom-SVN: r134131", "tree": {"sha": "3bed774c159dc49c2f890569006e31cfddf96381", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3bed774c159dc49c2f890569006e31cfddf96381"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d21c8af174ff13abfce72ca8be40c1def60c53f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d21c8af174ff13abfce72ca8be40c1def60c53f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d21c8af174ff13abfce72ca8be40c1def60c53f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d21c8af174ff13abfce72ca8be40c1def60c53f/comments", "author": {"login": "Cementitious", "id": 115579865, "node_id": "U_kgDOBuOb2Q", "avatar_url": "https://avatars.githubusercontent.com/u/115579865?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cementitious", "html_url": "https://github.com/Cementitious", "followers_url": "https://api.github.com/users/Cementitious/followers", "following_url": "https://api.github.com/users/Cementitious/following{/other_user}", "gists_url": "https://api.github.com/users/Cementitious/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cementitious/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cementitious/subscriptions", "organizations_url": "https://api.github.com/users/Cementitious/orgs", "repos_url": "https://api.github.com/users/Cementitious/repos", "events_url": "https://api.github.com/users/Cementitious/events{/privacy}", "received_events_url": "https://api.github.com/users/Cementitious/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bcac2b894be79264093f09938da22bf52bbeb6bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcac2b894be79264093f09938da22bf52bbeb6bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcac2b894be79264093f09938da22bf52bbeb6bb"}], "stats": {"total": 147, "additions": 117, "deletions": 30}, "files": [{"sha": "fe17591183e015ef2a7e94433469fae12869d384", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d21c8af174ff13abfce72ca8be40c1def60c53f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d21c8af174ff13abfce72ca8be40c1def60c53f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6d21c8af174ff13abfce72ca8be40c1def60c53f", "patch": "@@ -1,3 +1,50 @@\n+2008-04-09  Doug Rupp  <rupp@adacore.com>\n+\n+\t* decl.c (validate_size): Set minimum size for fat pointers same as\n+\taccess types. Code clean ups.\n+\n+\t* gmem.c (xstrdup32): New macro for 32bit dup on VMS, noop otherwise\n+\t(__gnat_gmem_a2l_initialize): Dup exename into 32 bit memory on VMS\n+\n+\t* s-auxdec-vms_64.ads, s-auxdec.ads (Short_Address_Size): New constant\n+\n+\t* s-crtl.ads (malloc32) New function, alias for malloc\n+\t(realloc32) New function, alias for realloc\n+\n+\t* socket.c (__gnat_new_socket_set): Malloc fd_set in 32 bits on VMS\n+\n+\t* utils2.c (build_call_alloc_dealloc): Return call to short malloc if\n+\tallocator size is 32 and default pointer size is 64.\n+\t(find_common_type): Document assumption on t1/t2 vs lhs/rhs. Force use of\n+\tlhs type if smaller, whatever the modes.\n+\n+\t* gigi.h (malloc32_decl): New macro definition\n+\n+\t* utils.c (init_gigi_decls): New malloc32_decl\n+\tVarious code clean ups.\n+\n+\t* s-asthan-vms-alpha.adb (Process_AST.To_Address): Unchecked convert to\n+\tTask_Address vice System.Address.\n+\n+\t* s-taspri-vms.ads: Import System.Aux_DEC\n+\t(Task_Address): New subtype of System.Aux_DEC.Short_Address\n+\t(Task_Address_Size): New constant size of System.Aux_DEC.Short_Address\n+\n+\t* s-asthan-vms-alpha.adb (Process_AST.To_Address): Unchecked convert to\n+\tTask_Address vice System.Address.\n+\n+\t* s-inmaop-vms.adb: Import System.Task_Primitives\n+\t(To_Address): Unchecked convert to Task_Address vice System.Address\n+\n+\t* s-taprop-vms.adb (Timed_Delay): Always set the timer even if delay\n+\texpires now.\n+\t(To_Task_ID) Unchecked convert from Task_Adddress vice System.Address\n+\t(To_Address) Unchecked convert to Task_Address vice System.Address\n+\n+\t* s-tpopde-vms.adb: Remove unnecessary warning pragmas\n+\n+\t* g-socthi-vms.ads: Add 32bit size clauses on socket access types.\n+\n 2008-04-08  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gigi.h (standard_datatypes): Add ADT_fdesc_type and ADT_null_fdesc."}, {"sha": "eabc9211e19611a6f12848cffc66f76d826060c8", "filename": "gcc/ada/decl.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d21c8af174ff13abfce72ca8be40c1def60c53f/gcc%2Fada%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d21c8af174ff13abfce72ca8be40c1def60c53f/gcc%2Fada%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdecl.c?ref=6d21c8af174ff13abfce72ca8be40c1def60c53f", "patch": "@@ -6852,15 +6852,13 @@ validate_size (Uint uint_size, tree gnu_type, Entity_Id gnat_object,\n     size = size_binop (PLUS_EXPR, DECL_SIZE (TYPE_FIELDS (gnu_type)), size);\n \n   /* Modify the size of the type to be that of the maximum size if it has a\n-     discriminant or the size of a thin pointer if this is a fat pointer.  */\n+     discriminant.  */\n   if (type_size && CONTAINS_PLACEHOLDER_P (type_size))\n     type_size = max_size (type_size, true);\n-  else if (TYPE_FAT_POINTER_P (gnu_type))\n-    type_size = bitsize_int (POINTER_SIZE);\n \n-  /* If this is an access type, the minimum size is that given by the smallest\n-     integral mode that's valid for pointers.  */\n-  if (TREE_CODE (gnu_type) == POINTER_TYPE)\n+  /* If this is an access type or a fat pointer, the minimum size is that given\n+     by the smallest integral mode that's valid for pointers.  */\n+  if ((TREE_CODE (gnu_type) == POINTER_TYPE) || TYPE_FAT_POINTER_P (gnu_type))\n     {\n       enum machine_mode p_mode;\n "}, {"sha": "b2af2ca020b7e3b36f02e9e127d387b907c5eb0b", "filename": "gcc/ada/g-socthi-vms.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d21c8af174ff13abfce72ca8be40c1def60c53f/gcc%2Fada%2Fg-socthi-vms.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d21c8af174ff13abfce72ca8be40c1def60c53f/gcc%2Fada%2Fg-socthi-vms.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-vms.ads?ref=6d21c8af174ff13abfce72ca8be40c1def60c53f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 2002-2007, AdaCore                     --\n+--                     Copyright (C) 2002-2008, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -151,6 +151,7 @@ package GNAT.Sockets.Thin is\n    --  Socket address\n \n    type Sockaddr_Access is access all Sockaddr;\n+   for Sockaddr_Access'Size use 32;\n    pragma Convention (C, Sockaddr_Access);\n    --  Access to socket address\n \n@@ -164,6 +165,7 @@ package GNAT.Sockets.Thin is\n    --  Internet socket address\n \n    type Sockaddr_In_Access is access all Sockaddr_In;\n+   for Sockaddr_In_Access'Size use 32;\n    pragma Convention (C, Sockaddr_In_Access);\n    --  Access to internet socket address\n \n@@ -203,6 +205,7 @@ package GNAT.Sockets.Thin is\n    --  Host entry\n \n    type Hostent_Access is access all Hostent;\n+   for Hostent_Access'Size use 32;\n    pragma Convention (C, Hostent_Access);\n    --  Access to host entry\n \n@@ -216,6 +219,7 @@ package GNAT.Sockets.Thin is\n    --  Service entry\n \n    type Servent_Access is access all Servent;\n+   for Servent_Access'Size use 32;\n    pragma Convention (C, Servent_Access);\n    --  Access to service entry\n "}, {"sha": "4ca53df753003352eb83ff403be50c9a5837f295", "filename": "gcc/ada/gigi.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d21c8af174ff13abfce72ca8be40c1def60c53f/gcc%2Fada%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d21c8af174ff13abfce72ca8be40c1def60c53f/gcc%2Fada%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgigi.h?ref=6d21c8af174ff13abfce72ca8be40c1def60c53f", "patch": "@@ -379,7 +379,11 @@ enum standard_datatypes\n   /* Null pointer for above type */\n   ADT_null_fdesc,\n \n+  /* Function declaration nodes for run-time functions for allocating memory.\n+     Ada allocators cause calls to these functions to be generated.  Malloc32\n+     is used only on 64bit systems needing to allocate 32bit memory. */\n   ADT_malloc_decl,\n+  ADT_malloc32_decl,\n \n   /* Likewise for freeing memory.  */\n   ADT_free_decl,\n@@ -413,6 +417,7 @@ extern GTY(()) tree gnat_raise_decls[(int) LAST_REASON_CODE + 1];\n #define fdesc_type_node gnat_std_decls[(int) ADT_fdesc_type]\n #define null_fdesc_node gnat_std_decls[(int) ADT_null_fdesc]\n #define malloc_decl gnat_std_decls[(int) ADT_malloc_decl]\n+#define malloc32_decl gnat_std_decls[(int) ADT_malloc32_decl]\n #define free_decl gnat_std_decls[(int) ADT_free_decl]\n #define jmpbuf_type gnat_std_decls[(int) ADT_jmpbuf_type]\n #define jmpbuf_ptr_type gnat_std_decls[(int) ADT_jmpbuf_ptr_type]"}, {"sha": "f19f77fca0b69b28897b8b10c37ff8ab548a27e8", "filename": "gcc/ada/gmem.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d21c8af174ff13abfce72ca8be40c1def60c53f/gcc%2Fada%2Fgmem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d21c8af174ff13abfce72ca8be40c1def60c53f/gcc%2Fada%2Fgmem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgmem.c?ref=6d21c8af174ff13abfce72ca8be40c1def60c53f", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *         Copyright (C) 2000-2007, Free Software Foundation, Inc.          *\n+ *         Copyright (C) 2000-2008, Free Software Foundation, Inc.          *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -50,6 +50,13 @@\n \n */\n \n+#ifdef VMS\n+#include <string.h>\n+#define xstrdup32(S)  strcpy ((__char_ptr32) _malloc32 (strlen (S) + 1), S)\n+#else\n+#define xstrdup32(S) S\n+#endif\n+\n #include <stdio.h>\n \n static FILE *gmemfile;\n@@ -141,8 +148,10 @@ long long __gnat_gmem_initialize (char *dumpname)\n void __gnat_gmem_a2l_initialize (char *exearg)\n {\n   /* Resolve the executable filename to use in later invocations of\n-     the libaddr2line symbolization service.  */\n-  exename = __gnat_locate_exec_on_path (exearg);\n+     the libaddr2line symbolization service. Ensure that on VMS\n+     exename is allocated in 32 bit memory for compatibility\n+     with libaddr2line. */\n+  exename = xstrdup32 (__gnat_locate_exec_on_path (exearg));\n }\n \n /* Read next allocation of deallocation information from the GMEM file and"}, {"sha": "16e627d43e94a529e32cf5623f86a4201bc227a6", "filename": "gcc/ada/s-asthan-vms-alpha.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d21c8af174ff13abfce72ca8be40c1def60c53f/gcc%2Fada%2Fs-asthan-vms-alpha.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d21c8af174ff13abfce72ca8be40c1def60c53f/gcc%2Fada%2Fs-asthan-vms-alpha.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-asthan-vms-alpha.adb?ref=6d21c8af174ff13abfce72ca8be40c1def60c53f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1996-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1996-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -545,16 +545,16 @@ package body System.AST_Handling is\n       --  from which we can obtain the task and entry number information.\n \n       function To_Address is new Ada.Unchecked_Conversion\n-        (ST.Task_Id, System.Address);\n+        (ST.Task_Id, System.Task_Primitives.Task_Address);\n \n    begin\n       System.Machine_Code.Asm\n-        (Template => \"addl $27,0,%0\",\n+        (Template => \"addq $27,0,%0\",\n          Outputs  => AST_Handler_Data_Ref'Asm_Output (\"=r\", Handler_Data_Ptr),\n          Volatile => True);\n \n       System.Machine_Code.Asm\n-        (Template => \"ldl $27,%0\",\n+        (Template => \"ldq $27,%0\",\n          Inputs  => Descriptor_Ref'Asm_Input\n            (\"m\", Handler_Data_Ptr.Original_Descriptor_Ref),\n          Volatile => True);"}, {"sha": "bb763667b5b212e3e3a60ed38d76b6e80a8a3324", "filename": "gcc/ada/s-auxdec-vms_64.ads", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d21c8af174ff13abfce72ca8be40c1def60c53f/gcc%2Fada%2Fs-auxdec-vms_64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d21c8af174ff13abfce72ca8be40c1def60c53f/gcc%2Fada%2Fs-auxdec-vms_64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-auxdec-vms_64.ads?ref=6d21c8af174ff13abfce72ca8be40c1def60c53f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1996-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1996-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -96,9 +96,10 @@ package System.Aux_DEC is\n    function \"or\"  (Left, Right : Largest_Integer) return Largest_Integer;\n    function \"xor\" (Left, Right : Largest_Integer) return Largest_Integer;\n \n-   Address_Zero : constant Address;\n-   No_Addr      : constant Address;\n-   Address_Size : constant := Standard'Address_Size;\n+   Address_Zero       : constant Address;\n+   No_Addr            : constant Address;\n+   Address_Size       : constant := Standard'Address_Size;\n+   Short_Address_Size : constant := 32;\n \n    function \"+\" (Left : Address; Right : Integer) return Address;\n    function \"+\" (Left : Integer; Right : Address) return Address;"}, {"sha": "7d6a45b5dbace9d85ba29ccf0506185dcb3811a0", "filename": "gcc/ada/s-inmaop-vms.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d21c8af174ff13abfce72ca8be40c1def60c53f/gcc%2Fada%2Fs-inmaop-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d21c8af174ff13abfce72ca8be40c1def60c53f/gcc%2Fada%2Fs-inmaop-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-inmaop-vms.adb?ref=6d21c8af174ff13abfce72ca8be40c1def60c53f", "patch": "@@ -38,6 +38,7 @@ with System.Aux_DEC;\n with System.Parameters;\n with System.Tasking;\n with System.Tasking.Initialization;\n+with System.Task_Primitives;\n with System.Task_Primitives.Operations;\n with System.Task_Primitives.Operations.DEC;\n \n@@ -51,7 +52,8 @@ package body System.Interrupt_Management.Operations is\n    use type unsigned_short;\n \n    function To_Address is\n-     new Ada.Unchecked_Conversion (Task_Id, System.Address);\n+     new Ada.Unchecked_Conversion\n+       (Task_Id, System.Task_Primitives.Task_Address);\n \n    package POP renames System.Task_Primitives.Operations;\n "}, {"sha": "544fa13bdeb671f9a9e94b66583d786f52c1e0df", "filename": "gcc/ada/s-taprop-vms.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d21c8af174ff13abfce72ca8be40c1def60c53f/gcc%2Fada%2Fs-taprop-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d21c8af174ff13abfce72ca8be40c1def60c53f/gcc%2Fada%2Fs-taprop-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-vms.adb?ref=6d21c8af174ff13abfce72ca8be40c1def60c53f", "patch": "@@ -131,10 +131,12 @@ package body System.Task_Primitives.Operations is\n    -----------------------\n \n    function To_Task_Id is\n-     new Ada.Unchecked_Conversion (System.Address, Task_Id);\n+     new Ada.Unchecked_Conversion\n+       (System.Task_Primitives.Task_Address, Task_Id);\n \n    function To_Address is\n-     new Ada.Unchecked_Conversion (Task_Id, System.Address);\n+     new Ada.Unchecked_Conversion\n+       (Task_Id, System.Task_Primitives.Task_Address);\n \n    function Get_Exc_Stack_Addr return Address;\n    --  Replace System.Soft_Links.Get_Exc_Stack_Addr_NT\n@@ -519,7 +521,7 @@ package body System.Task_Primitives.Operations is\n       if Time /= 0.0 or else Mode /= Relative then\n          Sleep_Time := To_OS_Time (Time, Mode);\n \n-         if Mode = Relative or else OS_Clock < Sleep_Time then\n+         if Mode = Relative or else OS_Clock <= Sleep_Time then\n             Self_ID.Common.State := Delay_Sleep;\n             Self_ID.Common.LL.AST_Pending := True;\n "}, {"sha": "e552efa56991141eba465e0b145886e0fd0415c6", "filename": "gcc/ada/s-tpopde-vms.adb", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d21c8af174ff13abfce72ca8be40c1def60c53f/gcc%2Fada%2Fs-tpopde-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d21c8af174ff13abfce72ca8be40c1def60c53f/gcc%2Fada%2Fs-tpopde-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tpopde-vms.adb?ref=6d21c8af174ff13abfce72ca8be40c1def60c53f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---          Copyright (C) 2000-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -69,17 +69,12 @@ package body System.Task_Primitives.Operations.DEC is\n    -- Local Subprograms --\n    -----------------------\n \n-   pragma Warnings (Off);\n-   --  Task_Id is 64 bits wide (but only 32 bits significant) on Integrity/VMS\n-\n    function To_Unsigned_Longword is new\n      Ada.Unchecked_Conversion (Task_Id, Unsigned_Longword);\n \n    function To_Task_Id is new\n      Ada.Unchecked_Conversion (Unsigned_Longword, Task_Id);\n \n-   pragma Warnings (On);\n-\n    function To_FAB_RAB is new\n      Ada.Unchecked_Conversion (Address, FAB_RAB_Access_Type);\n "}, {"sha": "f88ed8cdd07b4348645ff2f8bdb88d259eba62aa", "filename": "gcc/ada/socket.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d21c8af174ff13abfce72ca8be40c1def60c53f/gcc%2Fada%2Fsocket.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d21c8af174ff13abfce72ca8be40c1def60c53f/gcc%2Fada%2Fsocket.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsocket.c?ref=6d21c8af174ff13abfce72ca8be40c1def60c53f", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *          Copyright (C) 2003-2007, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 2003-2008, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -340,7 +340,12 @@ __gnat_new_socket_set (fd_set *set)\n {\n   fd_set *new;\n \n+#ifdef VMS\n+extern void *__gnat_malloc32 (__SIZE_TYPE__);\n+  new = (fd_set *) __gnat_malloc32 (sizeof (fd_set));\n+#else\n   new = (fd_set *) __gnat_malloc (sizeof (fd_set));\n+#endif\n \n   if (set)\n     memcpy (new, set, sizeof (fd_set));"}, {"sha": "01aa7522b0350fb09b3ff17ef647b1a2792d057c", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d21c8af174ff13abfce72ca8be40c1def60c53f/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d21c8af174ff13abfce72ca8be40c1def60c53f/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=6d21c8af174ff13abfce72ca8be40c1def60c53f", "patch": "@@ -584,6 +584,18 @@ init_gigi_decls (tree long_long_float_type, tree exception_type)\n \t\t\t\t     Empty);\n   DECL_IS_MALLOC (malloc_decl) = 1;\n \n+  /* malloc32 is a function declaration tree for a function to allocate\n+     32bit memory on a 64bit system. Needed only on 64bit VMS.  */\n+  malloc32_decl = create_subprog_decl (get_identifier (\"__gnat_malloc32\"),\n+\t\t\t\t     NULL_TREE,\n+\t\t\t\t     build_function_type (ptr_void_type_node,\n+\t\t\t\t\t\t\t  tree_cons (NULL_TREE,\n+\t\t\t\t\t\t\t\t     sizetype,\n+\t\t\t\t\t\t\t\t     endlink)),\n+\t\t\t\t     NULL_TREE, false, true, true, NULL,\n+\t\t\t\t     Empty);\n+  DECL_IS_MALLOC (malloc32_decl) = 1;\n+\n   /* free is a function declaration tree for a function to free memory.  */\n   free_decl\n     = create_subprog_decl (get_identifier (\"__gnat_free\"), NULL_TREE,"}, {"sha": "a380d4498bc2aca471f828f4db6fecfd7841d1ce", "filename": "gcc/ada/utils2.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d21c8af174ff13abfce72ca8be40c1def60c53f/gcc%2Fada%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d21c8af174ff13abfce72ca8be40c1def60c53f/gcc%2Fada%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils2.c?ref=6d21c8af174ff13abfce72ca8be40c1def60c53f", "patch": "@@ -1918,7 +1918,14 @@ build_call_alloc_dealloc (tree gnu_obj, tree gnu_size, unsigned align,\n     {\n       if (Nkind (gnat_node) != N_Allocator || !Comes_From_Source (gnat_node))\n         Check_No_Implicit_Heap_Alloc (gnat_node);\n-      return build_call_1_expr (malloc_decl, gnu_size);\n+\n+      /* If the allocator size is 32bits but the pointer size is 64bits then\n+\t allocate 32bit memory (sometimes necessary on 64bit VMS). Otherwise\n+\t default to standard malloc. */\n+      if (UI_To_Int (Esize (Etype (gnat_node))) == 32 && POINTER_SIZE == 64)\n+        return build_call_1_expr (malloc32_decl, gnu_size);\n+      else\n+        return build_call_1_expr (malloc_decl, gnu_size);\n     }\n }\n \f"}]}