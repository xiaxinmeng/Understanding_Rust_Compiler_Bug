{"sha": "9623736278220d48982d35fe8db9db926394030f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTYyMzczNjI3ODIyMGQ0ODk4MmQzNWZlOGRiOWRiOTI2Mzk0MDMwZg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-06-19T22:32:28Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-06-19T22:32:28Z"}, "message": "(stack_result_p): New function.\n\n(stack_reg_life_analysis): Use that.\n\nFrom-SVN: r4699", "tree": {"sha": "7e0e86f1aeea7671b832cee3d910c2c4ff11d341", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e0e86f1aeea7671b832cee3d910c2c4ff11d341"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9623736278220d48982d35fe8db9db926394030f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9623736278220d48982d35fe8db9db926394030f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9623736278220d48982d35fe8db9db926394030f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9623736278220d48982d35fe8db9db926394030f/comments", "author": null, "committer": null, "parents": [{"sha": "af0da0b8cb21be42c90b14417a87af8d45b63582", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af0da0b8cb21be42c90b14417a87af8d45b63582", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af0da0b8cb21be42c90b14417a87af8d45b63582"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "33bd2689d76260b7ad7c9cbe56bb3286160543a4", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9623736278220d48982d35fe8db9db926394030f/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9623736278220d48982d35fe8db9db926394030f/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=9623736278220d48982d35fe8db9db926394030f", "patch": "@@ -1217,6 +1217,30 @@ find_blocks (first)\n \trecord_label_references (insn, PATTERN (insn));\n     }\n }\n+\n+/* If current function returns its result in an fp stack register,\n+   return the register number.  Otherwise return -1.  */\n+\n+static int\n+stack_result_p (decl)\n+     tree decl;\n+{\n+  rtx result = DECL_RTL (DECL_RESULT (decl));\n+\n+  if (result != 0\n+      && !(GET_CODE (result) == REG\n+\t   && REGNO (result) < FIRST_PSEUDO_REGISTER))\n+    {\n+#ifdef FUNCTION_OUTGOING_VALUE\n+      result\n+        = FUNCTION_OUTGOING_VALUE (TREE_TYPE (DECL_RESULT (decl)), decl);\n+#else\n+      result = FUNCTION_VALUE (TREE_TYPE (DECL_RESULT (decl)), decl);\n+#endif\n+    }\n+\n+  return STACK_REG_P (result) ? REGNO (result) : -1;\n+}\n \f\n /* Determine the which registers are live at the start of each basic\n    block of the function whose first insn is FIRST.\n@@ -1256,11 +1280,11 @@ stack_reg_life_analysis (first)\n   struct stack_def regstack;\n \n   if (current_function_returns_real\n-      && STACK_REG_P (DECL_RTL (DECL_RESULT (current_function_decl))))\n+      && stack_result_p (current_function_decl) >= 0)\n     {\n       /* Find all RETURN insns and mark them. */\n \n-      int value_regno = REGNO (DECL_RTL (DECL_RESULT (current_function_decl)));\n+      int value_regno = stack_result_p (current_function_decl);\n \n       for (block = blocks - 1; block >= 0; block--)\n \tif (GET_CODE (block_end[block]) == JUMP_INSN"}]}