{"sha": "1d4f0f3f6097dbe3817387d4889a123ca98bf987", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ0ZjBmM2Y2MDk3ZGJlMzgxNzM4N2Q0ODg5YTEyM2NhOThiZjk4Nw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2018-03-01T22:44:54Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2018-03-01T22:44:54Z"}, "message": "re PR c++/84582 (Rejected valid C++ code since r257961)\n\n\tPR c++/84582\n\t* semantics.c (force_paren_expr): Create a PAREN_EXPR when in\n\ta template.\n\t(maybe_undo_parenthesized_ref): Unwrap PAREN_EXPR.\n\t* typeck2.c (store_init_value): Call fold_non_dependent_expr instead\n\tof instantiate_non_dependent_expr.\n\t* tree.c (lvalue_kind): Handle PAREN_EXPR like NON_DEPENDENT_EXPR.\n\n\t* g++.dg/cpp1y/auto-fn15.C: Extend testing.\n\t* g++.dg/cpp1z/static1.C: New test.\n\t* g++.dg/template/static37.C: New test.\n\nCo-Authored-By: Jason Merrill <jason@redhat.com>\n\nFrom-SVN: r258116", "tree": {"sha": "5fdb6243970f2877667faad2061c8873ed566731", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fdb6243970f2877667faad2061c8873ed566731"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d4f0f3f6097dbe3817387d4889a123ca98bf987", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d4f0f3f6097dbe3817387d4889a123ca98bf987", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d4f0f3f6097dbe3817387d4889a123ca98bf987", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d4f0f3f6097dbe3817387d4889a123ca98bf987/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "303f4850651051e7c7ae04851d993246f6110fb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/303f4850651051e7c7ae04851d993246f6110fb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/303f4850651051e7c7ae04851d993246f6110fb6"}], "stats": {"total": 74, "additions": 69, "deletions": 5}, "files": [{"sha": "d44845b57f388c4257fb4c509583beaefac19860", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d4f0f3f6097dbe3817387d4889a123ca98bf987/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d4f0f3f6097dbe3817387d4889a123ca98bf987/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1d4f0f3f6097dbe3817387d4889a123ca98bf987", "patch": "@@ -1,3 +1,14 @@\n+2018-03-01  Marek Polacek  <polacek@redhat.com>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/84582\n+\t* semantics.c (force_paren_expr): Create a PAREN_EXPR when in\n+\ta template.\n+\t(maybe_undo_parenthesized_ref): Unwrap PAREN_EXPR.\n+\t* typeck2.c (store_init_value): Call fold_non_dependent_expr instead\n+\tof instantiate_non_dependent_expr.\n+\t* tree.c (lvalue_kind): Handle PAREN_EXPR like NON_DEPENDENT_EXPR.\n+\n 2018-03-01  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/84434"}, {"sha": "1ac1d23e7610db039c4903df3bc427bac5439c3d", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d4f0f3f6097dbe3817387d4889a123ca98bf987/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d4f0f3f6097dbe3817387d4889a123ca98bf987/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=1d4f0f3f6097dbe3817387d4889a123ca98bf987", "patch": "@@ -1693,7 +1693,8 @@ force_paren_expr (tree expr)\n   if (TREE_CODE (expr) == COMPONENT_REF\n       || TREE_CODE (expr) == SCOPE_REF)\n     REF_PARENTHESIZED_P (expr) = true;\n-  else if (type_dependent_expression_p (expr))\n+  else if (type_dependent_expression_p (expr)\n+\t   || processing_template_decl)\n     expr = build1 (PAREN_EXPR, TREE_TYPE (expr), expr);\n   else if (VAR_P (expr) && DECL_HARD_REGISTER (expr))\n     /* We can't bind a hard register variable to a reference.  */;\n@@ -1724,9 +1725,10 @@ force_paren_expr (tree expr)\n tree\n maybe_undo_parenthesized_ref (tree t)\n {\n-  if (cxx_dialect >= cxx14\n-      && INDIRECT_REF_P (t)\n-      && REF_PARENTHESIZED_P (t))\n+  if (cxx_dialect < cxx14)\n+    return t;\n+\n+  if (INDIRECT_REF_P (t) && REF_PARENTHESIZED_P (t))\n     {\n       t = TREE_OPERAND (t, 0);\n       while (TREE_CODE (t) == NON_LVALUE_EXPR\n@@ -1737,6 +1739,8 @@ maybe_undo_parenthesized_ref (tree t)\n \t\t  || TREE_CODE (t) == STATIC_CAST_EXPR);\n       t = TREE_OPERAND (t, 0);\n     }\n+  else if (TREE_CODE (t) == PAREN_EXPR)\n+    t = TREE_OPERAND (t, 0);\n \n   return t;\n }"}, {"sha": "19f1c0629c9ac39ae56d8a31ebf4cb145750863d", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d4f0f3f6097dbe3817387d4889a123ca98bf987/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d4f0f3f6097dbe3817387d4889a123ca98bf987/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=1d4f0f3f6097dbe3817387d4889a123ca98bf987", "patch": "@@ -239,6 +239,7 @@ lvalue_kind (const_tree ref)\n       return lvalue_kind (BASELINK_FUNCTIONS (CONST_CAST_TREE (ref)));\n \n     case NON_DEPENDENT_EXPR:\n+    case PAREN_EXPR:\n       return lvalue_kind (TREE_OPERAND (ref, 0));\n \n     case VIEW_CONVERT_EXPR:"}, {"sha": "583c65d4d0a257a0cbcd61efe5c0ff8d1530c50c", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d4f0f3f6097dbe3817387d4889a123ca98bf987/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d4f0f3f6097dbe3817387d4889a123ca98bf987/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=1d4f0f3f6097dbe3817387d4889a123ca98bf987", "patch": "@@ -822,7 +822,7 @@ store_init_value (tree decl, tree init, vec<tree, va_gc>** cleanups, int flags)\n   if (decl_maybe_constant_var_p (decl) || TREE_STATIC (decl))\n     {\n       bool const_init;\n-      value = instantiate_non_dependent_expr (value);\n+      value = fold_non_dependent_expr (value);\n       if (DECL_DECLARED_CONSTEXPR_P (decl)\n \t  || (DECL_IN_AGGR_P (decl) && !DECL_VAR_DECLARED_INLINE_P (decl)))\n \t{"}, {"sha": "abd409e7df71b18b0d401a905a3e5c5a1f69df5b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d4f0f3f6097dbe3817387d4889a123ca98bf987/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d4f0f3f6097dbe3817387d4889a123ca98bf987/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1d4f0f3f6097dbe3817387d4889a123ca98bf987", "patch": "@@ -1,3 +1,11 @@\n+2018-03-01  Marek Polacek  <polacek@redhat.com>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/84582\n+\t* g++.dg/cpp1y/auto-fn15.C: Extend testing.\n+\t* g++.dg/cpp1z/static1.C: New test.\n+\t* g++.dg/template/static37.C: New test.\n+\n 2018-03-01  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/84434"}, {"sha": "0db428f72700c3c3004fc21dabe5398643b9d8e2", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn15.C", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d4f0f3f6097dbe3817387d4889a123ca98bf987/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d4f0f3f6097dbe3817387d4889a123ca98bf987/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn15.C?ref=1d4f0f3f6097dbe3817387d4889a123ca98bf987", "patch": "@@ -22,6 +22,8 @@ template <class T>\n decltype(auto) h5(T t) { return t.i; }\n template <class T>\n decltype(auto) h6(T t) { return (t.i); }\n+template <class T>\n+decltype(auto) h7(T t) { return (i); }\n \n int main()\n {\n@@ -48,4 +50,5 @@ int main()\n   same_type<decltype(h4()),int&>();\n   same_type<decltype(h5(a)),int>();\n   same_type<decltype(h6(a)),int&>();\n+  same_type<decltype(h7(a)),int&>();\n }"}, {"sha": "cb872997c5a07788399dda6bc5cc998edfe1b06f", "filename": "gcc/testsuite/g++.dg/cpp1z/static1.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d4f0f3f6097dbe3817387d4889a123ca98bf987/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fstatic1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d4f0f3f6097dbe3817387d4889a123ca98bf987/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fstatic1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fstatic1.C?ref=1d4f0f3f6097dbe3817387d4889a123ca98bf987", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/84582\n+// { dg-options -std=c++17 }\n+\n+class C {\n+  static inline const long b = 0;\n+  static inline const unsigned c = (b);\n+};\n+class D {\n+  static inline const long b = 0;\n+  static inline const unsigned c = b;\n+};\n+template <class> class A {\n+  static inline const long b = 0;\n+  static inline const unsigned c = (b);\n+};\n+template <class> class B {\n+  static inline const long b = 0;\n+  static inline const unsigned c = b;\n+};"}, {"sha": "90bc65d2fbc5d2bb3f7b242021af2aed187e59d2", "filename": "gcc/testsuite/g++.dg/template/static37.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d4f0f3f6097dbe3817387d4889a123ca98bf987/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic37.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d4f0f3f6097dbe3817387d4889a123ca98bf987/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic37.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic37.C?ref=1d4f0f3f6097dbe3817387d4889a123ca98bf987", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/84582\n+\n+class C {\n+  static const long b = 0;\n+  static const unsigned c = (b);\n+};\n+class D {\n+  static const long b = 0;\n+  static const unsigned c = b;\n+};\n+template <class> class A {\n+  static const long b = 0;\n+  static const unsigned c = (b);\n+};\n+template <class> class B {\n+  static const long b = 0;\n+  static const unsigned c = b;\n+};"}]}