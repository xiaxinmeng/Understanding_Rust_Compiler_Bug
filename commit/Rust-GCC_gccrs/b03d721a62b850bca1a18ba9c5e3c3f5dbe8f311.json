{"sha": "b03d721a62b850bca1a18ba9c5e3c3f5dbe8f311", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAzZDcyMWE2MmI4NTBiY2ExYTE4YmE5YzVlM2MzZjVkYmU4ZjMxMQ==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2019-02-22T10:51:35Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2019-02-22T10:51:35Z"}, "message": "[libgomp] In OpenACC testing, by default only build for the offload target that we're actually going to test\n\n... to avoid compilation overhead, and to keep simple '-foffload=[...]'\nhandling in test cases.\n\n\tlibgomp/\n\t* testsuite/libgomp.oacc-c++/c++.exp: Specify\n\t\"-foffload=$offload_target\".\n\t* testsuite/libgomp.oacc-c/c.exp: Likewise.\n\t* testsuite/libgomp.oacc-fortran/fortran.exp: Likewise.\n\t* testsuite/lib/libgomp.exp\n\t(check_effective_target_openacc_nvidia_accel_configured): Remove,\n\tas (conceptually) merged into\n\tcheck_effective_target_openacc_nvidia_accel_selected.  Adjust all\n\tusers.\n\nFrom-SVN: r269109", "tree": {"sha": "6a715285e30eab533be509816977c61e4a5f7f0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a715285e30eab533be509816977c61e4a5f7f0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b03d721a62b850bca1a18ba9c5e3c3f5dbe8f311", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b03d721a62b850bca1a18ba9c5e3c3f5dbe8f311", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b03d721a62b850bca1a18ba9c5e3c3f5dbe8f311", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b03d721a62b850bca1a18ba9c5e3c3f5dbe8f311/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0a0384b43ad3f5abb1382bbd2ad2ade5fea7ff77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a0384b43ad3f5abb1382bbd2ad2ade5fea7ff77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a0384b43ad3f5abb1382bbd2ad2ade5fea7ff77"}], "stats": {"total": 53, "additions": 33, "deletions": 20}, "files": [{"sha": "41ee3ed60c55dc15f1c2bef0560f4ebdf09388fa", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03d721a62b850bca1a18ba9c5e3c3f5dbe8f311/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03d721a62b850bca1a18ba9c5e3c3f5dbe8f311/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=b03d721a62b850bca1a18ba9c5e3c3f5dbe8f311", "patch": "@@ -1,5 +1,15 @@\n 2019-02-22  Thomas Schwinge  <thomas@codesourcery.com>\n \n+\t* testsuite/libgomp.oacc-c++/c++.exp: Specify\n+\t\"-foffload=$offload_target\".\n+\t* testsuite/libgomp.oacc-c/c.exp: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/fortran.exp: Likewise.\n+\t* testsuite/lib/libgomp.exp\n+\t(check_effective_target_openacc_nvidia_accel_configured): Remove,\n+\tas (conceptually) merged into\n+\tcheck_effective_target_openacc_nvidia_accel_selected.  Adjust all\n+\tusers.\n+\n \t* plugin/configfrag.ac: Populate and AC_SUBST offload_targets.\n \t* testsuite/libgomp-test-support.exp.in: Adjust.\n \t* testsuite/lib/libgomp.exp: Likewise.  Don't populate"}, {"sha": "14d9b5f13054eed125887db3a46155ff53a470e1", "filename": "libgomp/testsuite/lib/libgomp.exp", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03d721a62b850bca1a18ba9c5e3c3f5dbe8f311/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03d721a62b850bca1a18ba9c5e3c3f5dbe8f311/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp?ref=b03d721a62b850bca1a18ba9c5e3c3f5dbe8f311", "patch": "@@ -362,18 +362,6 @@ proc check_effective_target_offload_device_shared_as { } {\n     } ]\n }\n \n-# Return 1 if configured for 'nvptx' offloading.\n-\n-proc check_effective_target_openacc_nvidia_accel_configured { } {\n-    global offload_targets\n-    if { ![string match \"*,nvptx*,*\" \",$offload_targets,\"] } {\n-        return 0\n-    }\n-    # PR libgomp/65099: Currently, we only support offloading in 64-bit\n-    # configurations.\n-    return [is-effective-target lp64]\n-}\n-\n # Return 1 if at least one Nvidia GPU is accessible.\n \n proc check_effective_target_openacc_nvidia_accel_present { } {"}, {"sha": "dcefa792ca40a44909fe4818066d261c3458f925", "filename": "libgomp/testsuite/libgomp.oacc-c++/c++.exp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03d721a62b850bca1a18ba9c5e3c3f5dbe8f311/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03d721a62b850bca1a18ba9c5e3c3f5dbe8f311/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fc%2B%2B.exp?ref=b03d721a62b850bca1a18ba9c5e3c3f5dbe8f311", "patch": "@@ -112,6 +112,11 @@ if { $lang_test_file_found } {\n \t}\n \tset tagopt \"$tagopt -DACC_MEM_SHARED=$acc_mem_shared\"\n \n+\t# To avoid compilation overhead, and to keep simple '-foffload=[...]'\n+\t# handling in test cases, by default only build for the offload target\n+\t# that we're actually going to test.\n+\tset tagopt \"$tagopt -foffload=$offload_target\"\n+\t# Force usage of the corresponding OpenACC device type.\n \tsetenv ACC_DEVICE_TYPE $openacc_device_type\n \n \t# To get better test coverage for device-specific code that is only"}, {"sha": "fdf4eb08f8a0f44292f3620732c22e76dfca677d", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/function-not-offloaded.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03d721a62b850bca1a18ba9c5e3c3f5dbe8f311/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ffunction-not-offloaded.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03d721a62b850bca1a18ba9c5e3c3f5dbe8f311/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ffunction-not-offloaded.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ffunction-not-offloaded.c?ref=b03d721a62b850bca1a18ba9c5e3c3f5dbe8f311", "patch": "@@ -1,11 +1,11 @@\n /* { dg-do link } */\n-/* { dg-excess-errors \"lto1, mkoffload and lto-wrapper fatal errors\" { target openacc_nvidia_accel_configured } } */\n+/* { dg-excess-errors \"lto1, mkoffload and lto-wrapper fatal errors\" { target openacc_nvidia_accel_selected } } */\n \n int var;\n #pragma acc declare create (var)\n \n void __attribute__((noinline, noclone))\n-foo () /* { dg-error \"function 'foo' has been referenced in offloaded code but hasn't been marked to be included in the offloaded code\" \"\" { target openacc_nvidia_accel_configured } } */\n+foo () /* { dg-error \"function 'foo' has been referenced in offloaded code but hasn't been marked to be included in the offloaded code\" \"\" { target openacc_nvidia_accel_selected } } */\n {\n   var++;\n }"}, {"sha": "7e699f476b21b9f403f5c5eab4dcf428fb197961", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/parallel-dims.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03d721a62b850bca1a18ba9c5e3c3f5dbe8f311/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-dims.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03d721a62b850bca1a18ba9c5e3c3f5dbe8f311/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-dims.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-dims.c?ref=b03d721a62b850bca1a18ba9c5e3c3f5dbe8f311", "patch": "@@ -154,7 +154,7 @@ int main ()\n     int gangs_min, gangs_max, workers_min, workers_max, vectors_min, vectors_max;\n     gangs_min = workers_min = vectors_min = INT_MAX;\n     gangs_max = workers_max = vectors_max = INT_MIN;\n-#pragma acc parallel copy (vectors_actual) /* { dg-warning \"using vector_length \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_configured } } */ \\\n+#pragma acc parallel copy (vectors_actual) /* { dg-warning \"using vector_length \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } } */ \\\n   vector_length (VECTORS) /* { dg-warning \"'vector_length' value must be positive\" \"\" { target c++ } } */\n     {\n       /* We're actually executing with vector_length (1), just the GCC nvptx\n@@ -265,7 +265,7 @@ int main ()\n     int gangs_min, gangs_max, workers_min, workers_max, vectors_min, vectors_max;\n     gangs_min = workers_min = vectors_min = INT_MAX;\n     gangs_max = workers_max = vectors_max = INT_MIN;\n-#pragma acc parallel copy (workers_actual) /* { dg-warning \"using num_workers \\\\(32\\\\), ignoring 2097152\" \"\" { target openacc_nvidia_accel_configured } } */ \\\n+#pragma acc parallel copy (workers_actual) /* { dg-warning \"using num_workers \\\\(32\\\\), ignoring 2097152\" \"\" { target openacc_nvidia_accel_selected } } */ \\\n   num_workers (WORKERS)\n     {\n       if (acc_on_device (acc_device_host))\n@@ -350,7 +350,7 @@ int main ()\n     int gangs_min, gangs_max, workers_min, workers_max, vectors_min, vectors_max;\n     gangs_min = workers_min = vectors_min = INT_MAX;\n     gangs_max = workers_max = vectors_max = INT_MIN;\n-#pragma acc parallel copy (vectors_actual) /* { dg-warning \"using vector_length \\\\(1024\\\\), ignoring 2097152\" \"\" { target openacc_nvidia_accel_configured } } */ \\\n+#pragma acc parallel copy (vectors_actual) /* { dg-warning \"using vector_length \\\\(1024\\\\), ignoring 2097152\" \"\" { target openacc_nvidia_accel_selected } } */ \\\n   vector_length (VECTORS)\n     {\n       if (acc_on_device (acc_device_host))\n@@ -390,7 +390,7 @@ int main ()\n     int gangs_min, gangs_max, workers_min, workers_max, vectors_min, vectors_max;\n     gangs_min = workers_min = vectors_min = INT_MAX;\n     gangs_max = workers_max = vectors_max = INT_MIN;\n-#pragma acc parallel copy (vectors_actual) /* { dg-warning \"using vector_length \\\\(32\\\\), ignoring runtime setting\" \"\" { target openacc_nvidia_accel_configured } } */ \\\n+#pragma acc parallel copy (vectors_actual) /* { dg-warning \"using vector_length \\\\(32\\\\), ignoring runtime setting\" \"\" { target openacc_nvidia_accel_selected } } */ \\\n   vector_length (vectors)\n     {\n       if (acc_on_device (acc_device_host))\n@@ -437,7 +437,7 @@ int main ()\n     int gangs_min, gangs_max, workers_min, workers_max, vectors_min, vectors_max;\n     gangs_min = workers_min = vectors_min = INT_MAX;\n     gangs_max = workers_max = vectors_max = INT_MIN;\n-#pragma acc parallel copy (gangs_actual, workers_actual, vectors_actual) /* { dg-warning \"using vector_length \\\\(32\\\\), ignoring 11\" \"\" { target openacc_nvidia_accel_configured } } */ \\\n+#pragma acc parallel copy (gangs_actual, workers_actual, vectors_actual) /* { dg-warning \"using vector_length \\\\(32\\\\), ignoring 11\" \"\" { target openacc_nvidia_accel_selected } } */ \\\n   num_gangs (gangs) \\\n   num_workers (WORKERS) \\\n   vector_length (VECTORS)"}, {"sha": "2d57ad4464ab09083b29f05063ae944cd809e21a", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/vector-length-64-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03d721a62b850bca1a18ba9c5e3c3f5dbe8f311/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03d721a62b850bca1a18ba9c5e3c3f5dbe8f311/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-64-1.c?ref=b03d721a62b850bca1a18ba9c5e3c3f5dbe8f311", "patch": "@@ -4,7 +4,7 @@\n int\n main (void)\n {\n-#pragma acc parallel vector_length (64) num_workers (16) /* { dg-warning \"using num_workers \\\\(15\\\\), ignoring 16\" \"\" { target openacc_nvidia_accel_configured } } */\n+#pragma acc parallel vector_length (64) num_workers (16) /* { dg-warning \"using num_workers \\\\(15\\\\), ignoring 16\" \"\" { target openacc_nvidia_accel_selected } } */\n   {\n #pragma acc loop worker\n     for (unsigned int i = 0; i < 32; i++)"}, {"sha": "55cd40f1e99196d0986fa56d58ed71bc17e057e0", "filename": "libgomp/testsuite/libgomp.oacc-c/c.exp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03d721a62b850bca1a18ba9c5e3c3f5dbe8f311/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2Fc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03d721a62b850bca1a18ba9c5e3c3f5dbe8f311/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2Fc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2Fc.exp?ref=b03d721a62b850bca1a18ba9c5e3c3f5dbe8f311", "patch": "@@ -75,6 +75,11 @@ foreach offload_target [concat [split $offload_targets \",\"] \"disable\"] {\n     }\n     set tagopt \"$tagopt -DACC_MEM_SHARED=$acc_mem_shared\"\n \n+    # To avoid compilation overhead, and to keep simple '-foffload=[...]'\n+    # handling in test cases, by default only build for the offload target\n+    # that we're actually going to test.\n+    set tagopt \"$tagopt -foffload=$offload_target\"\n+    # Force usage of the corresponding OpenACC device type.\n     setenv ACC_DEVICE_TYPE $openacc_device_type\n \n     # To get better test coverage for device-specific code that is only"}, {"sha": "af25a22a522b424c3ff700f0fd8c1e41dedfdf4d", "filename": "libgomp/testsuite/libgomp.oacc-fortran/fortran.exp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03d721a62b850bca1a18ba9c5e3c3f5dbe8f311/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Ffortran.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03d721a62b850bca1a18ba9c5e3c3f5dbe8f311/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Ffortran.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Ffortran.exp?ref=b03d721a62b850bca1a18ba9c5e3c3f5dbe8f311", "patch": "@@ -94,6 +94,11 @@ if { $lang_test_file_found } {\n \t}\n \tset tagopt \"$tagopt -DACC_MEM_SHARED=$acc_mem_shared\"\n \n+\t# To avoid compilation overhead, and to keep simple '-foffload=[...]'\n+\t# handling in test cases, by default only build for the offload target\n+\t# that we're actually going to test.\n+\tset tagopt \"$tagopt -foffload=$offload_target\"\n+\t# Force usage of the corresponding OpenACC device type.\n \tsetenv ACC_DEVICE_TYPE $openacc_device_type\n \n \t# For Fortran we're doing torture testing, as Fortran has far more tests"}]}