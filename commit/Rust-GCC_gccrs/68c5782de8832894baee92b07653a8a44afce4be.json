{"sha": "68c5782de8832894baee92b07653a8a44afce4be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhjNTc4MmRlODgzMjg5NGJhZWU5MmIwNzY1M2E4YTQ0YWZjZTRiZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-08-04T16:46:00Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-08-04T16:46:00Z"}, "message": "* i386.c: Revert 07-30 ix86_output_main_function_alignment_hack.\n\nFrom-SVN: r44638", "tree": {"sha": "4f13b2896ed625868d7c6b79536725c64228e56b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f13b2896ed625868d7c6b79536725c64228e56b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68c5782de8832894baee92b07653a8a44afce4be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68c5782de8832894baee92b07653a8a44afce4be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68c5782de8832894baee92b07653a8a44afce4be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68c5782de8832894baee92b07653a8a44afce4be/comments", "author": null, "committer": null, "parents": [{"sha": "8bbbef343486eea56bb5c9ebf241c0872e4083b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bbbef343486eea56bb5c9ebf241c0872e4083b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bbbef343486eea56bb5c9ebf241c0872e4083b3"}], "stats": {"total": 51, "additions": 4, "deletions": 47}, "files": [{"sha": "9cd98e9767f3a9728d34db698570dab5d57545c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68c5782de8832894baee92b07653a8a44afce4be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68c5782de8832894baee92b07653a8a44afce4be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=68c5782de8832894baee92b07653a8a44afce4be", "patch": "@@ -1,3 +1,7 @@\n+2001-08-04  Richard Henderson  <rth@redhat.com>\n+\n+\t* i386.c: Revert 07-30 ix86_output_main_function_alignment_hack.\n+\n 2001-08-04  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* cpphash.h (struct cpp_reader): New member directive_line."}, {"sha": "6508625dc78e5f2f7f81e5d02568d79816314757", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68c5782de8832894baee92b07653a8a44afce4be/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68c5782de8832894baee92b07653a8a44afce4be/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=68c5782de8832894baee92b07653a8a44afce4be", "patch": "@@ -574,7 +574,6 @@ static HOST_WIDE_INT ix86_GOT_alias_set PARAMS ((void));\n static void ix86_adjust_counter PARAMS ((rtx, HOST_WIDE_INT));\n static rtx ix86_expand_aligntest PARAMS ((rtx, int));\n static void ix86_expand_strlensi_unroll_1 PARAMS ((rtx, rtx));\n-static void ix86_output_main_function_alignment_hack PARAMS ((FILE *f, int));\n \n struct ix86_address\n {\n@@ -640,10 +639,6 @@ static void sco_asm_named_section PARAMS ((const char *, unsigned int,\n \t\t\t\t\t\t\t  HOST_WIDE_INT));\n #  undef TARGET_ASM_FUNCTION_PROLOGUE\n #  define TARGET_ASM_FUNCTION_PROLOGUE ix86_osf_output_function_prologue\n-#else\n-#  undef TARGET_ASM_FUNCTION_PROLOGUE\n-#  define TARGET_ASM_FUNCTION_PROLOGUE \\\n-   ix86_output_main_function_alignment_hack\n #endif\n \n #undef TARGET_ASM_OPEN_PAREN\n@@ -10788,48 +10783,6 @@ ix86_memory_move_cost (mode, class, in)\n     }\n }\n \n-/* Most of current runtimes (Jul 2001) do not align stack properly when\n-   entering main, so emit an wrapper to align stack before the real main\n-   code is called.\n-  \n-   This can eventually go if we manage to fix the runtimes or teach gcc\n-   to dynamically align stack in main automatically.\n-\n-   Adding check to configure is probably not good idea, as binarry can move\n-   from one shared library to older.  */\n-\n-static void\n-ix86_output_main_function_alignment_hack (file, size)\n-     FILE *file;\n-     int size ATTRIBUTE_UNUSED;\n-{\n-  rtx label;\n-  char buf[256];\n-  /* Check that we see main function with maximally 8 bytes of arguments.\n-     if so, emit the hack to align stack for runtimes, where this constraint\n-     is broken.  */\n-  if (strcmp (cfun->name, \"main\"))\n-    return;\n-  if (cfun->pops_args || cfun->args_size > 12)\n-    return;\n-  if (PREFERRED_STACK_BOUNDARY <= 2)\n-    return;\n-  label = gen_label_rtx ();\n-  fprintf (file, \"\\tpushl\\t%%ebp\\n\");\n-  fprintf (file, \"\\tmovl\\t%%esp, %%ebp\\n\");\n-  fprintf (file, \"\\tandl\\t$0xfffffff0, %%esp\\n\");\n-  fprintf (file, \"\\tpushl\\t%%ebp\\n\");\n-  fprintf (file, \"\\tpushl\\t16(%%ebp)\\n\");\n-  fprintf (file, \"\\tpushl\\t12(%%ebp)\\n\");\n-  fprintf (file, \"\\tpushl\\t8(%%ebp)\\n\");\n-  fprintf (file, \"\\tcall\\t\");\n-  ASM_GENERATE_INTERNAL_LABEL (buf, \"L\", CODE_LABEL_NUMBER (label));\n-  assemble_name (file, buf);\n-  fprintf (file, \"\\n\\tleave\\n\");\n-  fprintf (file, \"\\tret\\n\");\n-  ASM_OUTPUT_INTERNAL_LABEL (file, \"L\", CODE_LABEL_NUMBER (label));\n-}\n-\n #if defined(TARGET_ELF) && defined(TARGET_COFF)\n static void\n sco_asm_named_section (name, flags, align)"}]}