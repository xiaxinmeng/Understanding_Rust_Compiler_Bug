{"sha": "d072107f2332b70700b7fbd9b27c802ff3cef1a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA3MjEwN2YyMzMyYjcwNzAwYjdmYmQ5YjI3YzgwMmZmM2NlZjFhMg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-05-29T20:14:01Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-05-29T20:14:01Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1125", "tree": {"sha": "58f1800da40cd60401172f6ceb339fe259f134c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58f1800da40cd60401172f6ceb339fe259f134c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d072107f2332b70700b7fbd9b27c802ff3cef1a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d072107f2332b70700b7fbd9b27c802ff3cef1a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d072107f2332b70700b7fbd9b27c802ff3cef1a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d072107f2332b70700b7fbd9b27c802ff3cef1a2/comments", "author": null, "committer": null, "parents": [{"sha": "f0a45d37ea0f0a85b25aef0b62899611aa8e401c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0a45d37ea0f0a85b25aef0b62899611aa8e401c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0a45d37ea0f0a85b25aef0b62899611aa8e401c"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "6ec7eee23aedcb4924b1a793fa0fb7e4325eb8b1", "filename": "gcc/config/romp/romp.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d072107f2332b70700b7fbd9b27c802ff3cef1a2/gcc%2Fconfig%2Fromp%2Fromp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d072107f2332b70700b7fbd9b27c802ff3cef1a2/gcc%2Fconfig%2Fromp%2Fromp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.h?ref=d072107f2332b70700b7fbd9b27c802ff3cef1a2", "patch": "@@ -638,8 +638,9 @@ struct rt_cargs {int gregs, fregs; };\n \n #define FUNCTION_ARG(CUM, MODE, TYPE, NAMED)\t\t\t\t\\\n   (! (NAMED) ? 0\t\t\t\t\t\t\t\\\n-  : USE_FP_REG(MODE,CUM) ? gen_rtx(REG, (MODE),(CUM.fregs) + 17)\t\\\n-  : (CUM).gregs < 4 ? gen_rtx(REG, (MODE), 2 + (CUM).gregs) : 0)\n+   : ((TYPE) != 0 && TREE_CODE (TYPE_CODE (TYPE)) != INTEGER_CST)\t\\\n+   : USE_FP_REG(MODE,CUM) ? gen_rtx(REG, (MODE),(CUM.fregs) + 17)\t\\\n+   : (CUM).gregs < 4 ? gen_rtx(REG, (MODE), 2 + (CUM).gregs) : 0)\n \n /* For an arg passed partly in registers and partly in memory,\n    this is the number of registers used."}, {"sha": "5ab7340c28d16f8dfdf29b09de506ce2e7851a67", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d072107f2332b70700b7fbd9b27c802ff3cef1a2/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d072107f2332b70700b7fbd9b27c802ff3cef1a2/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=d072107f2332b70700b7fbd9b27c802ff3cef1a2", "patch": "@@ -714,7 +714,8 @@ struct rs6000_args {int words, fregno, nargs_prototype; };\n \n #define FUNCTION_ARG(CUM, MODE, TYPE, NAMED)\t\t\t\t\\\n   (! (NAMED) ? 0\t\t\t\t\t\t\t\\\n-  : USE_FP_FOR_ARG_P (CUM, MODE, TYPE)\t\t\t\t\t\\\n+   : ((TYPE) != 0 && TREE_CODE (TYPE_CODE (TYPE)) != INTEGER_CST)\t\\\n+   : USE_FP_FOR_ARG_P (CUM, MODE, TYPE)\t\t\t\t\t\\\n    ? ((CUM).nargs_prototype > 0\t\t\t\t\t\t\\\n       ? gen_rtx (REG, MODE, (CUM).fregno)\t\t\t\t\\\n       : ((CUM).words < 8\t\t\t\t\t\t\\"}, {"sha": "c0d69720d1a9183b215b5172c6b44e13a9465e97", "filename": "gcc/explow.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d072107f2332b70700b7fbd9b27c802ff3cef1a2/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d072107f2332b70700b7fbd9b27c802ff3cef1a2/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=d072107f2332b70700b7fbd9b27c802ff3cef1a2", "patch": "@@ -751,18 +751,21 @@ emit_stack_save (save_level, psave, after)\n \tabort ();\n     }\n \n+  if (sa != 0)\n+    sa = validize_mem (sa);\n+\n   if (after)\n     {\n       rtx seq;\n \n       start_sequence ();\n-      emit_insn (fcn (validize_mem (sa), stack_pointer_rtx));\n+      emit_insn (fcn (sa, stack_pointer_rtx));\n       seq = gen_sequence ();\n       end_sequence ();\n       emit_insn_after (seq, after);\n     }\n   else\n-    emit_insn (fcn (validize_mem (sa), stack_pointer_rtx));\n+    emit_insn (fcn (sa, stack_pointer_rtx));\n }\n \n /* Restore the stack pointer for the purpose in SAVE_LEVEL.  SA is the save\n@@ -804,18 +807,21 @@ emit_stack_restore (save_level, sa, after)\n #endif\n     }\n \n+  if (sa != 0)\n+    sa = validize_mem (sa);\n+\n   if (after)\n     {\n       rtx seq;\n \n       start_sequence ();\n-      emit_insn (fcn (stack_pointer_rtx, validize_mem (sa)));\n+      emit_insn (fcn (stack_pointer_rtx, sa));\n       seq = gen_sequence ();\n       end_sequence ();\n       emit_insn_after (seq, after);\n     }\n   else\n-    emit_insn (fcn (stack_pointer_rtx, validize_mem (sa)));\n+    emit_insn (fcn (stack_pointer_rtx, sa));\n }\n \f\n /* Return an rtx representing the address of an area of memory dynamically"}]}