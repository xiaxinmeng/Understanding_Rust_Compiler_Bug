{"sha": "19c708dc8316d80ca3611106fd989b317d55b968", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTljNzA4ZGM4MzE2ZDgwY2EzNjExMTA2ZmQ5ODliMzE3ZDU1Yjk2OA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2014-09-12T07:27:10Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-09-12T07:27:10Z"}, "message": "ira.h (ira_finish_once): Delete.\n\ngcc/\n\t* ira.h (ira_finish_once): Delete.\n\t* ira-int.h (target_ira_int::~target_ira_int): Declare.\n\t(target_ira_int::free_ira_costs): Likewise.\n\t(target_ira_int::free_register_move_costs): Likewise.\n\t(ira_finish_costs_once): Delete.\n\t* ira.c (free_register_move_costs): Replace with...\n\t(target_ira_int::free_register_move_costs): ...this new function.\n\t(target_ira_int::~target_ira_int): Define.\n\t(ira_init): Call free_register_move_costs as a member function rather\n\tthan a global function.\n\t(ira_finish_once): Delete.\n\t* ira-costs.c (free_ira_costs): Replace with...\n\t(target_ira_int::free_ira_costs): ...this new function.\n\t(ira_init_costs): Call free_ira_costs as a member function rather\n\tthan a global function.\n\t(ira_finish_costs_once): Delete.\n\t* target-globals.c (target_globals::~target_globals): Call the\n\ttarget_ira_int destructor.\n\t* toplev.c: Include lra.h.\n\t(finalize): Call lra_finish_once rather than ira_finish_once.\n\nFrom-SVN: r215200", "tree": {"sha": "839e2de96e8104f4dc92dbb429fc966fdab1fdd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/839e2de96e8104f4dc92dbb429fc966fdab1fdd6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19c708dc8316d80ca3611106fd989b317d55b968", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19c708dc8316d80ca3611106fd989b317d55b968", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19c708dc8316d80ca3611106fd989b317d55b968", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19c708dc8316d80ca3611106fd989b317d55b968/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "44fc1b7b63f6d6ae9f9f618e0f6b7a40e06f08e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44fc1b7b63f6d6ae9f9f618e0f6b7a40e06f08e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44fc1b7b63f6d6ae9f9f618e0f6b7a40e06f08e3"}], "stats": {"total": 100, "additions": 59, "deletions": 41}, "files": [{"sha": "27e0b599aed3a2a0fc9b2c41451d2ed95225e50b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19c708dc8316d80ca3611106fd989b317d55b968/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19c708dc8316d80ca3611106fd989b317d55b968/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=19c708dc8316d80ca3611106fd989b317d55b968", "patch": "@@ -1,3 +1,26 @@\n+2014-09-12  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* ira.h (ira_finish_once): Delete.\n+\t* ira-int.h (target_ira_int::~target_ira_int): Declare.\n+\t(target_ira_int::free_ira_costs): Likewise.\n+\t(target_ira_int::free_register_move_costs): Likewise.\n+\t(ira_finish_costs_once): Delete.\n+\t* ira.c (free_register_move_costs): Replace with...\n+\t(target_ira_int::free_register_move_costs): ...this new function.\n+\t(target_ira_int::~target_ira_int): Define.\n+\t(ira_init): Call free_register_move_costs as a member function rather\n+\tthan a global function.\n+\t(ira_finish_once): Delete.\n+\t* ira-costs.c (free_ira_costs): Replace with...\n+\t(target_ira_int::free_ira_costs): ...this new function.\n+\t(ira_init_costs): Call free_ira_costs as a member function rather\n+\tthan a global function.\n+\t(ira_finish_costs_once): Delete.\n+\t* target-globals.c (target_globals::~target_globals): Call the\n+\ttarget_ira_int destructor.\n+\t* toplev.c: Include lra.h.\n+\t(finalize): Call lra_finish_once rather than ira_finish_once.\n+\n 2014-09-11  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* common.opt (flto-odr-type-merging): New flag."}, {"sha": "34da9a73ba3ea0cdbdb264358c898d1c7be2a347", "filename": "gcc/ira-costs.c", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19c708dc8316d80ca3611106fd989b317d55b968/gcc%2Fira-costs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19c708dc8316d80ca3611106fd989b317d55b968/gcc%2Fira-costs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-costs.c?ref=19c708dc8316d80ca3611106fd989b317d55b968", "patch": "@@ -2047,21 +2047,21 @@ ira_init_costs_once (void)\n }\n \n /* Free allocated temporary cost vectors.  */\n-static void\n-free_ira_costs (void)\n+void\n+target_ira_int::free_ira_costs ()\n {\n   int i;\n \n-  free (init_cost);\n-  init_cost = NULL;\n+  free (x_init_cost);\n+  x_init_cost = NULL;\n   for (i = 0; i < MAX_RECOG_OPERANDS; i++)\n     {\n-      free (op_costs[i]);\n-      free (this_op_costs[i]);\n-      op_costs[i] = this_op_costs[i] = NULL;\n+      free (x_op_costs[i]);\n+      free (x_this_op_costs[i]);\n+      x_op_costs[i] = x_this_op_costs[i] = NULL;\n     }\n-  free (temp_costs);\n-  temp_costs = NULL;\n+  free (x_temp_costs);\n+  x_temp_costs = NULL;\n }\n \n /* This is called each time register related information is\n@@ -2071,7 +2071,7 @@ ira_init_costs (void)\n {\n   int i;\n \n-  free_ira_costs ();\n+  this_target_ira_int->free_ira_costs ();\n   max_struct_costs_size\n     = sizeof (struct costs) + sizeof (int) * (ira_important_classes_num - 1);\n   /* Don't use ira_allocate because vectors live through several IRA\n@@ -2088,13 +2088,6 @@ ira_init_costs (void)\n   temp_costs = (struct costs *) xmalloc (max_struct_costs_size);\n }\n \n-/* Function called once at the end of compiler work.  */\n-void\n-ira_finish_costs_once (void)\n-{\n-  free_ira_costs ();\n-}\n-\n \f\n \n /* Common initialization function for ira_costs and"}, {"sha": "1db064193cd89b92512cc3aa9ac228799344ee0d", "filename": "gcc/ira-int.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19c708dc8316d80ca3611106fd989b317d55b968/gcc%2Fira-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19c708dc8316d80ca3611106fd989b317d55b968/gcc%2Fira-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-int.h?ref=19c708dc8316d80ca3611106fd989b317d55b968", "patch": "@@ -770,6 +770,11 @@ minmax_set_iter_next (minmax_set_iterator *i)\n        minmax_set_iter_next (&(ITER)))\n \f\n struct target_ira_int {\n+  ~target_ira_int ();\n+\n+  void free_ira_costs ();\n+  void free_register_move_costs ();\n+\n   /* Initialized once.  It is a maximal possible size of the allocated\n      struct costs.  */\n   int x_max_struct_costs_size;\n@@ -1025,7 +1030,6 @@ extern void ira_destroy (void);\n /* ira-costs.c */\n extern void ira_init_costs_once (void);\n extern void ira_init_costs (void);\n-extern void ira_finish_costs_once (void);\n extern void ira_costs (void);\n extern void ira_tune_allocno_costs (void);\n "}, {"sha": "dc69a9c43072d1eaf315baf417262845efd1b1fd", "filename": "gcc/ira.c", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19c708dc8316d80ca3611106fd989b317d55b968/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19c708dc8316d80ca3611106fd989b317d55b968/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=19c708dc8316d80ca3611106fd989b317d55b968", "patch": "@@ -1674,40 +1674,46 @@ ira_init_once (void)\n \n /* Free ira_max_register_move_cost, ira_may_move_in_cost and\n    ira_may_move_out_cost for each mode.  */\n-static void\n-free_register_move_costs (void)\n+void\n+target_ira_int::free_register_move_costs (void)\n {\n   int mode, i;\n \n   /* Reset move_cost and friends, making sure we only free shared\n      table entries once.  */\n   for (mode = 0; mode < MAX_MACHINE_MODE; mode++)\n-    if (ira_register_move_cost[mode])\n+    if (x_ira_register_move_cost[mode])\n       {\n \tfor (i = 0;\n-\t     i < mode && (ira_register_move_cost[i]\n-\t\t\t  != ira_register_move_cost[mode]);\n+\t     i < mode && (x_ira_register_move_cost[i]\n+\t\t\t  != x_ira_register_move_cost[mode]);\n \t     i++)\n \t  ;\n \tif (i == mode)\n \t  {\n-\t    free (ira_register_move_cost[mode]);\n-\t    free (ira_may_move_in_cost[mode]);\n-\t    free (ira_may_move_out_cost[mode]);\n+\t    free (x_ira_register_move_cost[mode]);\n+\t    free (x_ira_may_move_in_cost[mode]);\n+\t    free (x_ira_may_move_out_cost[mode]);\n \t  }\n       }\n-  memset (ira_register_move_cost, 0, sizeof ira_register_move_cost);\n-  memset (ira_may_move_in_cost, 0, sizeof ira_may_move_in_cost);\n-  memset (ira_may_move_out_cost, 0, sizeof ira_may_move_out_cost);\n+  memset (x_ira_register_move_cost, 0, sizeof x_ira_register_move_cost);\n+  memset (x_ira_may_move_in_cost, 0, sizeof x_ira_may_move_in_cost);\n+  memset (x_ira_may_move_out_cost, 0, sizeof x_ira_may_move_out_cost);\n   last_mode_for_init_move_cost = -1;\n }\n \n+target_ira_int::~target_ira_int ()\n+{\n+  free_ira_costs ();\n+  free_register_move_costs ();\n+}\n+\n /* This is called every time when register related information is\n    changed.  */\n void\n ira_init (void)\n {\n-  free_register_move_costs ();\n+  this_target_ira_int->free_register_move_costs ();\n   setup_reg_mode_hard_regset ();\n   setup_alloc_regs (flag_omit_frame_pointer != 0);\n   setup_class_subset_and_memory_move_costs ();\n@@ -1719,15 +1725,6 @@ ira_init (void)\n   ira_init_costs ();\n }\n \n-/* Function called once at the end of compiler work.  */\n-void\n-ira_finish_once (void)\n-{\n-  ira_finish_costs_once ();\n-  free_register_move_costs ();\n-  lra_finish_once ();\n-}\n-\n \f\n #define ira_prohibited_mode_move_regs_initialized_p \\\n   (this_target_ira_int->x_ira_prohibited_mode_move_regs_initialized_p)"}, {"sha": "1d1ec65a2375bdabd2a8d2e1d8a95f4a5a1d11d3", "filename": "gcc/ira.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19c708dc8316d80ca3611106fd989b317d55b968/gcc%2Fira.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19c708dc8316d80ca3611106fd989b317d55b968/gcc%2Fira.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.h?ref=19c708dc8316d80ca3611106fd989b317d55b968", "patch": "@@ -177,7 +177,6 @@ extern struct ira_reg_equiv_s *ira_reg_equiv;\n \n extern void ira_init_once (void);\n extern void ira_init (void);\n-extern void ira_finish_once (void);\n extern void ira_setup_eliminable_regset (void);\n extern rtx ira_eliminate_regs (rtx, enum machine_mode);\n extern void ira_set_pseudo_classes (bool, FILE *);"}, {"sha": "43f9f4a0bb1b3f98ad3b36be2ed0f58d8089d2cb", "filename": "gcc/target-globals.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19c708dc8316d80ca3611106fd989b317d55b968/gcc%2Ftarget-globals.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19c708dc8316d80ca3611106fd989b317d55b968/gcc%2Ftarget-globals.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-globals.c?ref=19c708dc8316d80ca3611106fd989b317d55b968", "patch": "@@ -121,6 +121,7 @@ save_target_globals_default_opts ()\n \n target_globals::~target_globals ()\n {\n+  ira_int->~target_ira_int ();\n   /* default_target_globals points to static data so shouldn't be freed.  */\n   if (this != &default_target_globals)\n     {"}, {"sha": "0e626b34b8f579057afad714c788eb4479f96d30", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19c708dc8316d80ca3611106fd989b317d55b968/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19c708dc8316d80ca3611106fd989b317d55b968/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=19c708dc8316d80ca3611106fd989b317d55b968", "patch": "@@ -55,6 +55,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"params.h\"\n #include \"reload.h\"\n #include \"ira.h\"\n+#include \"lra.h\"\n #include \"dwarf2asm.h\"\n #include \"debug.h\"\n #include \"target.h\"\n@@ -1887,7 +1888,7 @@ finalize (bool no_backend)\n \n       g->get_passes ()->finish_optimization_passes ();\n \n-      ira_finish_once ();\n+      lra_finish_once ();\n     }\n \n   if (mem_report)"}]}