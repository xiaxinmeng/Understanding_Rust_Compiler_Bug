{"sha": "fb7e6024db53e6e658bde922399e7e94930f25d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI3ZTYwMjRkYjUzZTZlNjU4YmRlOTIyMzk5ZTdlOTQ5MzBmMjVkMw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2002-10-09T17:26:27Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2002-10-09T17:26:27Z"}, "message": "conflict.c (arc_hash): Change return type to hashval_t.\n\n\t* conflict.c (arc_hash): Change return type to hashval_t.\n\t* cselib.c (get_value_hash): Likewise.\n\t* genautomata.c (automaton_decl_hash, insn_decl_hash, decl_hash,\n\tstate_hash, automata_list_hash): Likewise.\n\t* read-rtl.c (def_hash): Likewise.\n\t* tree.c (type_hash_hash): Likewise.\n\nFrom-SVN: r57987", "tree": {"sha": "8a933151f8fc4f57dc1a7423f8d9e204efb9a82e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a933151f8fc4f57dc1a7423f8d9e204efb9a82e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb7e6024db53e6e658bde922399e7e94930f25d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb7e6024db53e6e658bde922399e7e94930f25d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb7e6024db53e6e658bde922399e7e94930f25d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb7e6024db53e6e658bde922399e7e94930f25d3/comments", "author": null, "committer": null, "parents": [{"sha": "36f7e96410747bc76e93b6c9495610eec0766e9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36f7e96410747bc76e93b6c9495610eec0766e9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36f7e96410747bc76e93b6c9495610eec0766e9d"}], "stats": {"total": 45, "additions": 27, "deletions": 18}, "files": [{"sha": "f41698aebeedb8b417e80917ac2598722c13b716", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb7e6024db53e6e658bde922399e7e94930f25d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb7e6024db53e6e658bde922399e7e94930f25d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fb7e6024db53e6e658bde922399e7e94930f25d3", "patch": "@@ -1,3 +1,12 @@\n+2002-10-09  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* conflict.c (arc_hash): Change return type to hashval_t.\n+\t* cselib.c (get_value_hash): Likewise.\n+\t* genautomata.c (automaton_decl_hash, insn_decl_hash, decl_hash,\n+\tstate_hash, automata_list_hash): Likewise.\n+\t* read-rtl.c (def_hash): Likewise.\n+\t* tree.c (type_hash_hash): Likewise.\n+\n 2002-10-08  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* config/rs6000/rs6000.c (rs6000_ra_ever_killed): Call"}, {"sha": "a6d755499bbcc3c91ab10f173fbf4881ddee7acc", "filename": "gcc/conflict.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb7e6024db53e6e658bde922399e7e94930f25d3/gcc%2Fconflict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb7e6024db53e6e658bde922399e7e94930f25d3/gcc%2Fconflict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconflict.c?ref=fb7e6024db53e6e658bde922399e7e94930f25d3", "patch": "@@ -112,15 +112,15 @@ struct conflict_graph_def\n    R1 and R2.  R1 is assumed to be smaller or equal to R2.  */\n #define CONFLICT_HASH_FN(R1, R2) ((R2) * ((R2) - 1) / 2 + (R1))\n \n-static unsigned arc_hash\tPARAMS ((const void *));\n+static hashval_t arc_hash\tPARAMS ((const void *));\n static int arc_eq\t\tPARAMS ((const void *, const void *));\n static int print_conflict\tPARAMS ((int, int, void *));\n static void mark_reg\t\tPARAMS ((rtx, rtx, void *));\n \f\n /* Callback function to compute the hash value of an arc.  Uses\n    current_graph to locate the graph to which the arc belongs.  */\n \n-static unsigned\n+static hashval_t\n arc_hash (arcp)\n      const void *arcp;\n {"}, {"sha": "feffa6de6cf8f761e034aac95b4db1d52403c6ea", "filename": "gcc/cselib.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb7e6024db53e6e658bde922399e7e94930f25d3/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb7e6024db53e6e658bde922399e7e94930f25d3/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=fb7e6024db53e6e658bde922399e7e94930f25d3", "patch": "@@ -39,7 +39,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"cselib.h\"\n \n static int entry_and_rtx_equal_p\tPARAMS ((const void *, const void *));\n-static unsigned int get_value_hash\tPARAMS ((const void *));\n+static hashval_t get_value_hash\t\tPARAMS ((const void *));\n static struct elt_list *new_elt_list\tPARAMS ((struct elt_list *,\n \t\t\t\t\t\t cselib_val *));\n static struct elt_loc_list *new_elt_loc_list PARAMS ((struct elt_loc_list *,\n@@ -274,7 +274,7 @@ entry_and_rtx_equal_p (entry, x_arg)\n    hash_rtx when adding an element; this function just extracts the hash\n    value from a cselib_val structure.  */\n \n-static unsigned int\n+static hashval_t\n get_value_hash (entry)\n      const void *entry;\n {"}, {"sha": "e6b231f8c4ea9df152820f6d18ef6407d0671611", "filename": "gcc/genautomata.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb7e6024db53e6e658bde922399e7e94930f25d3/gcc%2Fgenautomata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb7e6024db53e6e658bde922399e7e94930f25d3/gcc%2Fgenautomata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenautomata.c?ref=fb7e6024db53e6e658bde922399e7e94930f25d3", "patch": "@@ -221,23 +221,23 @@ static regexp_t gen_regexp_sequence PARAMS ((char *));\n static regexp_t gen_regexp          PARAMS ((char *));\n \n static unsigned string_hash         PARAMS ((const char *));\n-static unsigned automaton_decl_hash PARAMS ((const void *));\n+static hashval_t automaton_decl_hash PARAMS ((const void *));\n static int automaton_decl_eq_p      PARAMS ((const void *,\n \t\t\t\t\t\t   const void *));\n static decl_t insert_automaton_decl       PARAMS ((decl_t));\n static decl_t find_automaton_decl         PARAMS ((char *));\n static void initiate_automaton_decl_table PARAMS ((void));\n static void finish_automaton_decl_table   PARAMS ((void));\n \n-static unsigned insn_decl_hash            PARAMS ((const void *));\n+static hashval_t insn_decl_hash           PARAMS ((const void *));\n static int insn_decl_eq_p                 PARAMS ((const void *,\n \t\t\t\t\t\t   const void *));\n static decl_t insert_insn_decl            PARAMS ((decl_t));\n static decl_t find_insn_decl              PARAMS ((char *));\n static void initiate_insn_decl_table      PARAMS ((void));\n static void finish_insn_decl_table        PARAMS ((void));\n \n-static unsigned decl_hash                 PARAMS ((const void *));\n+static hashval_t decl_hash                PARAMS ((const void *));\n static int decl_eq_p                      PARAMS ((const void *,\n \t\t\t\t\t\t   const void *));\n static decl_t insert_decl                 PARAMS ((decl_t));\n@@ -303,7 +303,7 @@ static void output_cycle_reservs       PARAMS ((FILE *, reserv_sets_t,\n static void output_reserv_sets         PARAMS ((FILE *, reserv_sets_t));\n static state_t get_free_state          PARAMS ((int, automaton_t));\n static void free_state                 PARAMS ((state_t));\n-static unsigned state_hash             PARAMS ((const void *));\n+static hashval_t state_hash            PARAMS ((const void *));\n static int state_eq_p                  PARAMS ((const void *, const void *));\n static state_t insert_state            PARAMS ((state_t));\n static void set_state_reserv           PARAMS ((state_t, int, int));\n@@ -325,7 +325,7 @@ static void finish_arcs        PARAMS ((void));\n static automata_list_el_t get_free_automata_list_el PARAMS ((void));\n static void free_automata_list_el PARAMS ((automata_list_el_t));\n static void free_automata_list PARAMS ((automata_list_el_t));\n-static unsigned automata_list_hash PARAMS ((const void *));\n+static hashval_t automata_list_hash PARAMS ((const void *));\n static int automata_list_eq_p PARAMS ((const void *, const void *));\n static void initiate_automata_lists PARAMS ((void));\n static void automata_list_start PARAMS ((void));\n@@ -2095,7 +2095,7 @@ string_hash (string)\n /* The function evaluates hash value of an automaton declaration.  The\n    function is used by abstract data `hashtab'.  The function returns\n    hash value (0..UINT_MAX) of given automaton declaration.  */\n-static unsigned\n+static hashval_t\n automaton_decl_hash (automaton_decl)\n      const void *automaton_decl;\n {\n@@ -2199,7 +2199,7 @@ finish_automaton_decl_table ()\n /* The function evaluates hash value of an insn declaration.  The\n    function is used by abstract data `hashtab'.  The function returns\n    hash value (0..UINT_MAX) of given insn declaration.  */\n-static unsigned\n+static hashval_t\n insn_decl_hash (insn_decl)\n      const void *insn_decl;\n {\n@@ -2302,7 +2302,7 @@ finish_insn_decl_table ()\n /* The function evaluates hash value of a declaration.  The function\n    is used by abstract data `hashtab'.  The function returns hash\n    value (0..UINT_MAX) of given declaration.  */\n-static unsigned\n+static hashval_t\n decl_hash (decl)\n      const void *decl;\n {\n@@ -3982,7 +3982,7 @@ free_state (state)\n    simply hash value of the corresponding reservation set.  Otherwise\n    it is formed from hash values of the component deterministic\n    states.  One more key is order number of state automaton.  */\n-static unsigned\n+static hashval_t\n state_hash (state)\n      const void *state;\n {\n@@ -4354,7 +4354,7 @@ free_automata_list (automata_list)\n }\n \n /* Hash value of AUTOMATA_LIST.  */\n-static unsigned\n+static hashval_t\n automata_list_hash (automata_list)\n      const void *automata_list;\n {"}, {"sha": "5efd5dc9a2022ffdb2b80071cb2c6b5d61d8ebf4", "filename": "gcc/read-rtl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb7e6024db53e6e658bde922399e7e94930f25d3/gcc%2Fread-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb7e6024db53e6e658bde922399e7e94930f25d3/gcc%2Fread-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl.c?ref=fb7e6024db53e6e658bde922399e7e94930f25d3", "patch": "@@ -35,7 +35,7 @@ static char *read_string\tPARAMS ((struct obstack *, FILE *, int));\n static char *read_quoted_string\tPARAMS ((struct obstack *, FILE *));\n static char *read_braced_string\tPARAMS ((struct obstack *, FILE *));\n static void read_escape\t\tPARAMS ((struct obstack *, FILE *));\n-static unsigned def_hash PARAMS ((const void *));\n+static hashval_t def_hash\tPARAMS ((const void *));\n static int def_name_eq_p PARAMS ((const void *, const void *));\n static void read_constants PARAMS ((FILE *infile, char *tmp_char));\n static void validate_const_int PARAMS ((FILE *, const char *));\n@@ -401,7 +401,7 @@ atoll (p)\n #endif\n \n /* Given a constant definition, return a hash code for its name.  */\n-static unsigned\n+static hashval_t\n def_hash (def)\n      const void *def;\n {"}, {"sha": "202b07b8eb03e0dbd486c3b0cc6053eef0489aaa", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb7e6024db53e6e658bde922399e7e94930f25d3/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb7e6024db53e6e658bde922399e7e94930f25d3/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=fb7e6024db53e6e658bde922399e7e94930f25d3", "patch": "@@ -119,7 +119,7 @@ static GTY ((if_marked (\"type_hash_marked_p\"), param_is (struct type_hash)))\n static void set_type_quals PARAMS ((tree, int));\n static void append_random_chars PARAMS ((char *));\n static int type_hash_eq PARAMS ((const void *, const void *));\n-static unsigned int type_hash_hash PARAMS ((const void *));\n+static hashval_t type_hash_hash PARAMS ((const void *));\n static void print_type_hash_statistics PARAMS((void));\n static void finish_vector_type PARAMS((tree));\n static tree make_vector PARAMS ((enum machine_mode, tree, int));\n@@ -2936,7 +2936,7 @@ type_hash_eq (va, vb)\n \n /* Return the cached hash value.  */\n \n-static unsigned int\n+static hashval_t\n type_hash_hash (item)\n      const void *item;\n {"}]}