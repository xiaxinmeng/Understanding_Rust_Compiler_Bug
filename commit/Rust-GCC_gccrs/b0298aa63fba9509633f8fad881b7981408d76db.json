{"sha": "b0298aa63fba9509633f8fad881b7981408d76db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAyOThhYTYzZmJhOTUwOTYzM2Y4ZmFkODgxYjc5ODE0MDhkNzZkYg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1997-03-04T01:16:38Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1997-03-04T01:16:38Z"}, "message": "__mips_single_float should have\nthe same effect on vararg lists as __mips_soft_float.\n\nFrom-SVN: r13688", "tree": {"sha": "5b1b579dd261f1c5c7d442092a086f842983bb16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b1b579dd261f1c5c7d442092a086f842983bb16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0298aa63fba9509633f8fad881b7981408d76db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0298aa63fba9509633f8fad881b7981408d76db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0298aa63fba9509633f8fad881b7981408d76db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0298aa63fba9509633f8fad881b7981408d76db/comments", "author": null, "committer": null, "parents": [{"sha": "9e25c9c9ef485fd6e12eedd99f7e613409a77d83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e25c9c9ef485fd6e12eedd99f7e613409a77d83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e25c9c9ef485fd6e12eedd99f7e613409a77d83"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "793d31d8faeac8cff33391a9893a4e326fb01def", "filename": "gcc/ginclude/va-mips.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0298aa63fba9509633f8fad881b7981408d76db/gcc%2Fginclude%2Fva-mips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0298aa63fba9509633f8fad881b7981408d76db/gcc%2Fginclude%2Fva-mips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fva-mips.h?ref=b0298aa63fba9509633f8fad881b7981408d76db", "patch": "@@ -13,7 +13,7 @@\n \n #ifndef __GNUC_VA_LIST\n #define __GNUC_VA_LIST\n-#if defined (__mips_eabi) && ! defined (__mips_soft_float)\n+#if defined (__mips_eabi) && ! defined (__mips_soft_float) && ! defined (__mips_single_float)\n \n typedef struct {\n   /* Pointer to FP regs.  */\n@@ -24,11 +24,11 @@ typedef struct {\n   char *__gp_regs;\n } __gnuc_va_list;\n \n-#else /* ! (defined (__mips_eabi) && ! defined (__mips_soft_float)) */\n+#else /* ! (defined (__mips_eabi) && ! defined (__mips_soft_float) && ! defined (__mips_single_float)) */\n \n typedef char * __gnuc_va_list;\n \n-#endif /* ! (defined (__mips_eabi) && ! defined (__mips_soft_float)) */\n+#endif /* ! (defined (__mips_eabi) && ! defined (__mips_soft_float) && ! defined (__mips_single_float)) */\n #endif /* not __GNUC_VA_LIST */\n \n /* If this is for internal libc use, don't define anything but\n@@ -88,7 +88,7 @@ enum {\n \n #ifdef _STDARG_H\n #if defined (__mips_eabi)\n-#ifndef __mips_soft_float\n+#if ! defined (__mips_soft_float) && ! defined (__mips_single_float)\n #ifdef __mips64\n #define va_start(__AP, __LASTARG)\t\t\t\t\t\\\n   (__AP.__gp_regs = ((char *) __builtin_next_arg (__LASTARG)\t\t\\\n@@ -107,16 +107,16 @@ enum {\n    __AP.__fp_regs = __AP.__gp_regs - __AP.__fp_left * 8,\t\t\\\n    __AP.__fp_regs = (char *) ((int) __AP.__fp_regs & -8))\n #endif /* ! defined (__mips64) */\n-#else /* defined (__mips_soft_float) */\n+#else /* ! (! defined (__mips_soft_float) && ! defined (__mips_single_float) ) */\n #define va_start(__AP, __LASTARG)\t\t\t\t\t\\\n   (__AP = ((__gnuc_va_list) __builtin_next_arg (__LASTARG)\t\t\\\n \t   - (__builtin_args_info (2) >= 8 ? 0\t\t\t\t\\\n \t      : (8 - __builtin_args_info (2)) * __va_reg_size)))\n-#endif /* defined (__mips_soft_float) */\n+#endif /* ! (! defined (__mips_soft_float) && ! defined (__mips_single_float) ) */\n #else /* ! defined (__mips_eabi) */\n #define va_start(__AP, __LASTARG) \\\n   (__AP = (__gnuc_va_list) __builtin_next_arg (__LASTARG))\n-#endif /* ! (defined (__mips_eabi) && ! defined (__mips_soft_float)) */\n+#endif /* ! (defined (__mips_eabi) && ! defined (__mips_soft_float) && ! defined (__mips_single_float)) */\n #else /* ! _STDARG_H */\n #define va_alist  __builtin_va_alist\n #ifdef __mips64\n@@ -126,7 +126,7 @@ enum {\n #define va_dcl    int __builtin_va_alist; __va_ellipsis\n #endif\n #if defined (__mips_eabi)\n-#ifndef __mips_soft_float\n+#if ! defined (__mips_soft_float) && ! defined (__mips_single_float)\n #ifdef __mips64\n #define va_start(__AP)\t\t\t\t\t\t\t\\\n   (__AP.__gp_regs = ((char *) __builtin_next_arg ()\t\t\t\\\n@@ -145,12 +145,12 @@ enum {\n    __AP.__fp_regs = __AP.__gp_regs - __AP.__fp_left * 8,\t\t\\\n    __AP.__fp_regs = (char *) ((int) __AP.__fp_regs & -8))\n #endif /* ! defined (__mips64) */\n-#else /* defined (__mips_soft_float) */\n+#else /* ! (! defined (__mips_soft_float) && ! defined (__mips_single_float)) */\n #define va_start(__AP)\t\t\t\t\t\t\t\\\n   (__AP = ((__gnuc_va_list) __builtin_next_arg ()\t\t\t\\\n \t   - (__builtin_args_info (2) >= 8 ? __va_reg_size\t\t\\\n \t      : (8 - __builtin_args_info (2)) * __va_reg_size)))\n-#endif /* defined (__mips_soft_float) */\n+#endif /* ! (! defined (__mips_soft_float) && ! defined (__mips_single_float)) */\n /* Need alternate code for _MIPS_SIM_ABI64.  */\n #elif defined(_MIPS_SIM) && (_MIPS_SIM == _MIPS_SIM_ABI64 || _MIPS_SIM == _MIPS_SIM_NABI32)\n #define va_start(__AP)\t\t\t\t\t\t\t\\\n@@ -168,7 +168,7 @@ void va_end (__gnuc_va_list);\t\t/* Defined in libgcc.a */\n \n #if defined (__mips_eabi)\n \n-#ifndef __mips_soft_float\n+#if ! defined (__mips_soft_float) && ! defined (__mips_single_float)\n #ifdef __mips64\n #define __va_next_addr(__AP, __type)\t\t\t\t\t\\\n   ((__builtin_classify_type (*(__type *) 0) == __real_type_class\t\\\n@@ -189,7 +189,7 @@ void va_end (__gnuc_va_list);\t\t/* Defined in libgcc.a */\n        : ((__AP.__gp_regs += __va_rounded_size (__type))\t\t\\\n \t  - __va_rounded_size (__type)))))\n #endif\n-#else /* defined (__mips_soft_float) */\n+#else /* ! (! defined (__mips_soft_float) && ! defined (__mips_single_float)) */\n #ifdef __mips64\n #define __va_next_addr(__AP, __type)\t\t\t\t\t\\\n   ((__AP += __va_reg_size) - __va_reg_size)\n@@ -204,7 +204,7 @@ void va_end (__gnuc_va_list);\t\t/* Defined in libgcc.a */\n     : ((__AP += __va_rounded_size (__type))\t\t\t\t\\\n        - __va_rounded_size (__type))))\n #endif\n-#endif /* defined (__mips_soft_float) */\n+#endif /* ! (! defined (__mips_soft_float) && ! defined (__mips_single_float)) */\n \n #ifdef __MIPSEB__\n #define va_arg(__AP, __type)\t\t\t\t\t\t\\"}]}