{"sha": "c2d8909517439e76a739d654661cbd15f5a344a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJkODkwOTUxNzQzOWU3NmE3MzlkNjU0NjYxY2JkMTVmNWEzNDRhMA==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2015-08-09T19:30:17Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2015-08-09T19:30:17Z"}, "message": "options.texi (EnabledBy): Document that the argument must be a Common option.\n\ngcc/ChangeLog:\n\n2015-08-09  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\t* doc/options.texi (EnabledBy): Document that the argument must be\n\ta Common option.\n\t* doc/invoke.texi (Wnull-dereference): Move after Wnonnull.\n\tNot enabled by -Wall.\n\t* optc-gen.awk: Give nicer error messages. Detect if the argument\n\tof EnabledBy is not a Common option.\n\t* common.opt (Wnull-dereference): Not enabled by -Wall.\n\t* opt-functions.awk (lang_enabled_by): Nicer error messages.\n\ngcc/c-family/ChangeLog:\n\n2015-08-09  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\t* c.opt (Wchkp): Use LangEnabledBy instead of EnabledBy.\n\nFrom-SVN: r226751", "tree": {"sha": "177b25e2ce79477e698b7aa0b558fd932dc0dc58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/177b25e2ce79477e698b7aa0b558fd932dc0dc58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2d8909517439e76a739d654661cbd15f5a344a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2d8909517439e76a739d654661cbd15f5a344a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2d8909517439e76a739d654661cbd15f5a344a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2d8909517439e76a739d654661cbd15f5a344a0/comments", "author": null, "committer": null, "parents": [{"sha": "18a2180daa88bc69ff62d1de6aaeaf2705a4fbe5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18a2180daa88bc69ff62d1de6aaeaf2705a4fbe5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18a2180daa88bc69ff62d1de6aaeaf2705a4fbe5"}], "stats": {"total": 76, "additions": 55, "deletions": 21}, "files": [{"sha": "f103d41933fec32bf3deab0cf013ecb6fe964f11", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2d8909517439e76a739d654661cbd15f5a344a0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2d8909517439e76a739d654661cbd15f5a344a0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c2d8909517439e76a739d654661cbd15f5a344a0", "patch": "@@ -1,3 +1,14 @@\n+2015-08-09  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* doc/options.texi (EnabledBy): Document that the argument must be\n+\ta Common option.\n+\t* doc/invoke.texi (Wnull-dereference): Move after Wnonnull.\n+\tNot enabled by -Wall.\n+\t* optc-gen.awk: Give nicer error messages. Detect if the argument\n+\tof EnabledBy is not a Common option.\n+\t* common.opt (Wnull-dereference): Not enabled by -Wall.\n+\t* opt-functions.awk (lang_enabled_by): Nicer error messages.\n+\n 2015-08-09  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/driver-i386.c (host_detect_local_cpu): Treat"}, {"sha": "af1f098ac5c757c69dfeb638f0d52bb2f3f0391d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2d8909517439e76a739d654661cbd15f5a344a0/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2d8909517439e76a739d654661cbd15f5a344a0/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=c2d8909517439e76a739d654661cbd15f5a344a0", "patch": "@@ -1,3 +1,7 @@\n+2015-08-09  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* c.opt (Wchkp): Use LangEnabledBy instead of EnabledBy.\n+\n 2015-08-06  Andrew Sutton  <andrew.n.sutton@gmail.com>\n \t    Braden Obrzut  <admin@maniacsvault.net>\n \t    Jason Merrill  <jason@redhat.com>"}, {"sha": "050dcb0273463fc333fb4c883aed53c23f942a94", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2d8909517439e76a739d654661cbd15f5a344a0/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2d8909517439e76a739d654661cbd15f5a344a0/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=c2d8909517439e76a739d654661cbd15f5a344a0", "patch": "@@ -335,7 +335,7 @@ C ObjC C++ ObjC++ Var(warn_char_subscripts) Warning LangEnabledBy(C ObjC C++ Obj\n Warn about subscripts whose type is \\\"char\\\"\n \n Wchkp\n-C ObjC C++ ObjC++ Var(warn_chkp) Warning EnabledBy(Wall)\n+C ObjC C++ ObjC++ Var(warn_chkp) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n Warn about memory access errors found by Pointer Bounds Checker\n \n Wclobbered"}, {"sha": "e80eadf3111ee353a7db93603b17bced4a64f3cf", "filename": "gcc/common.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2d8909517439e76a739d654661cbd15f5a344a0/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2d8909517439e76a739d654661cbd15f5a344a0/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=c2d8909517439e76a739d654661cbd15f5a344a0", "patch": "@@ -593,7 +593,7 @@ Common RejectNegative Joined UInteger Warning\n -Wlarger-than=<number>\tWarn if an object is larger than <number> bytes\n \n Wnull-dereference\n-Common Var(warn_null_dereference) Warning EnabledBy(Wall)\n+Common Var(warn_null_dereference) Warning\n Warn if dereferencing a NULL pointer may lead to erroneous or undefined behavior\n \n Wunsafe-loop-optimizations"}, {"sha": "c26cd877d6cf0776f18639c4a75517bd931abaac", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2d8909517439e76a739d654661cbd15f5a344a0/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2d8909517439e76a739d654661cbd15f5a344a0/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c2d8909517439e76a739d654661cbd15f5a344a0", "patch": "@@ -3722,6 +3722,15 @@ requiring a non-null value by the @code{nonnull} function attribute.\n @option{-Wnonnull} is included in @option{-Wall} and @option{-Wformat}.  It\n can be disabled with the @option{-Wno-nonnull} option.\n \n+@item -Wnull-dereference\n+@opindex Wnull-dereference\n+@opindex Wno-null-dereference\n+Warn if the compiler detects paths that trigger erroneous or\n+undefined behavior due to dereferencing a null pointer.  This option\n+is only active when @option{-fdelete-null-pointer-checks} is active,\n+which is enabled by optimizations in most targets.  The precision of\n+the warnings depends on the optimization options used.\n+\n @item -Winit-self @r{(C, C++, Objective-C and Objective-C++ only)}\n @opindex Winit-self\n @opindex Wno-init-self\n@@ -4158,16 +4167,6 @@ In order to get a warning about an unused function parameter, you must\n either specify @option{-Wextra -Wunused} (note that @option{-Wall} implies\n @option{-Wunused}), or separately specify @option{-Wunused-parameter}.\n \n-@item -Wnull-dereference\n-@opindex Wnull-dereference\n-@opindex Wno-null-dereference\n-Warn if the compiler detects paths that trigger erroneous or\n-undefined behavior due to dereferencing a null pointer.  This option\n-is only active when @option{-fdelete-null-pointer-checks} is active,\n-which is enabled by optimizations in most targets.  The precision of\n-the warnings depends on the optimization options used.  This option is\n-enabled by @option{-Wall}.\n-\n @item -Wuninitialized\n @opindex Wuninitialized\n @opindex Wno-uninitialized"}, {"sha": "d4cbd988180c7739a6585fb82337440d6199b881", "filename": "gcc/doc/options.texi", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2d8909517439e76a739d654661cbd15f5a344a0/gcc%2Fdoc%2Foptions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2d8909517439e76a739d654661cbd15f5a344a0/gcc%2Fdoc%2Foptions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Foptions.texi?ref=c2d8909517439e76a739d654661cbd15f5a344a0", "patch": "@@ -464,7 +464,9 @@ value of @option{-fmath-errno} for languages that do not use\n If not explicitly set, the option is set to the value of\n @option{-@var{opt}}; multiple options can be given, separated by\n @code{||}.  The third form using @code{&&} specifies that the option is\n-only set if both @var{opt} and @var{opt2} are set.\n+only set if both @var{opt} and @var{opt2} are set. The options @var{opt}\n+and @var{opt2} must have the @code{Common} property; otherwise, use\n+@code{LangEnabledBy}.\n \n @item LangEnabledBy(@var{language}, @var{opt})\n @itemx LangEnabledBy(@var{language}, @var{opt}, @var{posarg}, @var{negarg})"}, {"sha": "c05a50c0e5cc86c3c851e3d8277174072f2fcbae", "filename": "gcc/opt-functions.awk", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2d8909517439e76a739d654661cbd15f5a344a0/gcc%2Fopt-functions.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2d8909517439e76a739d654661cbd15f5a344a0/gcc%2Fopt-functions.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopt-functions.awk?ref=c2d8909517439e76a739d654661cbd15f5a344a0", "patch": "@@ -324,7 +324,7 @@ function lang_enabled_by(enabledby_langs, enabledby_name, enabledby_posarg, enab\n     } else if (enabledby_posarg == \"\" && enabledby_negarg == \"\") {\n         with_args = \"\"\n     } else {\n-        print \"#error LangEnabledBy(\"enabledby_langs\",\"enabledby_name\", \" \\\n+        print \"#error \" opts[i] \" LangEnabledBy(\"enabledby_langs\",\"enabledby_name\", \" \\\n             enabledby_posarg\", \" enabledby_negargs                  \\\n             \") with three arguments, it should have either 2 or 4\"\n     }\n@@ -333,8 +333,8 @@ function lang_enabled_by(enabledby_langs, enabledby_name, enabledby_posarg, enab\n     for (k = 1; k <= n_enabledby_array; k++) {\n         enabledby_index = opt_numbers[enabledby_array[k]];\n         if (enabledby_index == \"\") {\n-             print \"#error LangEnabledBy(\"enabledby_langs\",\"enabledby_name\", \" \\\n-                 enabledby_posarg\", \" enabledby_negargs\") has invalid ENABLEDBY_NAME\"\n+             print \"#error \" opts[i] \" LangEnabledBy(\"enabledby_langs\",\"enabledby_name\", \" \\\n+                 enabledby_posarg\", \" enabledby_negargs\"), unknown option '\" enabledby_name \"'\"\n         } else {\n             for (j = 1; j <= n_enabledby_arg_langs; j++) {\n                  lang_name = lang_sanitized_name(enabledby_arg_langs[j]);"}, {"sha": "ed40f7f8f7c88de620d64222a1c5bc5a5e2992a3", "filename": "gcc/optc-gen.awk", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2d8909517439e76a739d654661cbd15f5a344a0/gcc%2Foptc-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2d8909517439e76a739d654661cbd15f5a344a0/gcc%2Foptc-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-gen.awk?ref=c2d8909517439e76a739d654661cbd15f5a344a0", "patch": "@@ -30,7 +30,21 @@\n # Dump that array of options into a C file.\n END {\n \n-# Record first EnabledBy and LangEnabledBy uses.\n+\n+# Combine the flags of identical switches.  Switches\n+# appear many times if they are handled by many front\n+# ends, for example.\n+for (i = 0; i < n_opts; i++) {\n+    merged_flags[i] = flags[i]\n+}\n+for (i = 0; i < n_opts; i++) {\n+    while(i + 1 != n_opts && opts[i] == opts[i + 1] ) {\n+\tmerged_flags[i + 1] = merged_flags[i] \" \" merged_flags[i + 1];\n+\ti++;\n+    }\n+}\n+\n+# Record EnabledBy and LangEnabledBy uses.\n n_enabledby = 0;\n for (i = 0; i < n_langs; i++) {\n     n_enabledby_lang[i] = 0;\n@@ -48,15 +62,19 @@ for (i = 0; i < n_opts; i++) {\n         }\n         n_enabledby_names = split(enabledby_arg, enabledby_names, split_sep);\n         if (logical_and != 0 && n_enabledby_names > 2) {\n-            print \"#error EnabledBy (Wfoo && Wbar && Wbaz) not currently supported\"\n+            print \"#error \" opts[i] \" EnabledBy(Wfoo && Wbar && Wbaz) currently not supported\"\n         }\n         for (j = 1; j <= n_enabledby_names; j++) {\n             enabledby_name = enabledby_names[j];\n             enabledby_index = opt_numbers[enabledby_name];\n             if (enabledby_index == \"\") {\n-                print \"#error Enabledby: \" enabledby_name \n-            } else {\n-                condition = \"\";\n+                print \"#error \" opts[i] \" Enabledby(\" enabledby_name \"), unknown option '\" enabledby_name \"'\"\n+            } else if (!flag_set_p(\"Common\", merged_flags[enabledby_index])) {\n+\t\tprint \"#error \" opts[i] \" Enabledby(\" enabledby_name \"), '\" \\\n+\t\t    enabledby_name \"' must have flag 'Common'\"\t\t\\\n+\t\t    \" to use Enabledby(), otherwise use LangEnabledBy()\"\n+\t    } else {\n+\t\tcondition = \"\";\n                 if (logical_and != 0) {\n                     opt_var_name_1 = search_var_name(enabledby_names[1], opt_numbers, opts, flags, n_opts);\n                     opt_var_name_2 = search_var_name(enabledby_names[2], opt_numbers, opts, flags, n_opts);"}]}