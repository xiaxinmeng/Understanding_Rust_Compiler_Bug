{"sha": "5e1538c5f68abed81204a223db7bdbeef32e0711", "node_id": "C_kwDOANBUbNoAKDVlMTUzOGM1ZjY4YWJlZDgxMjA0YTIyM2RiN2JkYmVlZjMyZTA3MTE", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2022-10-19T21:55:27Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2022-10-19T21:55:27Z"}, "message": "c: C2x %wN, %wfN format checking\n\nC2x adds printf and scanf wN and wfN length modifiers (wN for\nint_leastN_t / uint_leastN_t, also usable for intN_t and uintN_t which\nare now required to be the same type as the \"least\" versions when both\nare supported; wfN for int_fastN_t / uint_fastN_t).  Add corresponding\nformat checking support for those length modifiers, for all the\nstandard integer conversion speciciers plus the recommended integer\nspecifier %B.\n\nNote that, as with the %b support, this only deals with format\nchecking, not other format handling elsewhere in the compiler (in\nparticular, it doesn't add any -Wformat-overflow support; cf. Frolov\nDaniil's patch\n<https://gcc.gnu.org/pipermail/gcc-patches/2022-September/600790.html>\nadding such support for %b and %B, which I think is still pending\nreview).  And of course library support is a separate matter for each\nlibrary implementation (I hope to add corresponding glibc support in\ndue course).\n\nNone of the tables of format conversions for kinds of formats not\nsupporting the new length modifiers are updated; they don't need\nupdating because the entries not matching some length modifier listed\nfor that kind of format can never be accessed, and the tables\ngenerally thus already only explicitly covered a sufficient initial\nsubsequence of the length modifiers, rather than listing a full 13\npossibilities before this patch or 21 after it.  %w (as used for\nHOST_WIDE_INT in GCC-internal formats) comes after the new modifiers\nin the FMT_LEN_* enumeration, but that's not a problem because the\ntables don't actually use FMT_LEN_w entries; rather, such entries get\nrewritten at runtime once GCC knows the value of HOST_WIDE_INT in the\nGCC it's compiling.\n\nBootstrapped with no regressions for x86_64-pc-linux-gnu.\n\ngcc/c-family/\n\t* c-format.h (enum format_lengths): Add FMT_LEN_w8, FMT_LEN_w16,\n\tFMT_LEN_w32, FMT_LEN_w64, FMT_LEN_wf8, FMT_LEN_wf16, FMT_LEN_wf32\n\tand FMT_LEN_wf64.\n\t(NOARGUMENTS, NOLENGTHS): Update definitions.\n\t(T_I8, T2X_I8, T_I16, T2X_I16, T_I32, T2X_I32, T_I64, T2X_I64)\n\t(T_U8, T2X_U8, T_U16, T2X_U16, T_U32, T2X_U32, T_U64, T2X_U64)\n\t(T_IF8, T2X_IF8, T_IF16, T2X_IF16, T_IF32, T2X_IF32, T_IF64)\n\t(T2X_IF64, T_UF8, T2X_UF8, T_UF16, T2X_UF16, T_UF32, T2X_UF32)\n\t(T_UF64, T2X_UF64): New macros.\n\t* c-format.cc (printf_length_specs, scanf_length_specs): Add wN\n\tand wfN length modifiers.\n\t(print_char_table, scan_char_table): Add entries using wN and wfN\n\tlength modifiers.\n\ngcc/testsuite/\n\t* gcc.dg/format/format.h (int_least8_t, int_least16_t)\n\t(int_least32_t, int_least64_t, uint_least8_t, uint_least16_t)\n\t(uint_least32_t, uint_least64_t, int_fast8_t, int_fast16_t)\n\t(int_fast32_t, int_fast64_t, uint_fast8_t, uint_fast16_t)\n\t(uint_fast32_t, uint_fast64_t): New typedefs.\n\t* gcc.dg/format/c11-printf-1.c, gcc.dg/format/c11-scanf-1.c,\n\tgcc.dg/format/c2x-printf-1.c, gcc.dg/format/c2x-scanf-1.c,\n\tgcc.dg/format/ext-9.c: Add tests using wN and wfN length\n\tmodifiers.", "tree": {"sha": "36e729f78b3571499120ea4169c3f12178d19ee2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36e729f78b3571499120ea4169c3f12178d19ee2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e1538c5f68abed81204a223db7bdbeef32e0711", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e1538c5f68abed81204a223db7bdbeef32e0711", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e1538c5f68abed81204a223db7bdbeef32e0711", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e1538c5f68abed81204a223db7bdbeef32e0711/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0068278f7e75507c1f40e7c829d7a9d6ade269c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0068278f7e75507c1f40e7c829d7a9d6ade269c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0068278f7e75507c1f40e7c829d7a9d6ade269c"}], "stats": {"total": 437, "additions": 400, "deletions": 37}, "files": [{"sha": "01adea4ff413019c5b6e6a07ab62a8f5d877587f", "filename": "gcc/c-family/c-format.cc", "status": "modified", "additions": 46, "deletions": 30, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e1538c5f68abed81204a223db7bdbeef32e0711/gcc%2Fc-family%2Fc-format.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e1538c5f68abed81204a223db7bdbeef32e0711/gcc%2Fc-family%2Fc-format.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.cc?ref=5e1538c5f68abed81204a223db7bdbeef32e0711", "patch": "@@ -488,6 +488,14 @@ static const format_length_info printf_length_specs[] =\n   { \"j\", FMT_LEN_j, STD_C99, NO_FMT, 0 },\n   { \"H\", FMT_LEN_H, STD_C2X, NO_FMT, 0 },\n   { \"D\", FMT_LEN_D, STD_C2X, \"DD\", FMT_LEN_DD, STD_C2X, 0 },\n+  { \"w8\", FMT_LEN_w8, STD_C2X, NO_FMT, 0 },\n+  { \"w16\", FMT_LEN_w16, STD_C2X, NO_FMT, 0 },\n+  { \"w32\", FMT_LEN_w32, STD_C2X, NO_FMT, 0 },\n+  { \"w64\", FMT_LEN_w64, STD_C2X, NO_FMT, 0 },\n+  { \"wf8\", FMT_LEN_wf8, STD_C2X, NO_FMT, 0 },\n+  { \"wf16\", FMT_LEN_wf16, STD_C2X, NO_FMT, 0 },\n+  { \"wf32\", FMT_LEN_wf32, STD_C2X, NO_FMT, 0 },\n+  { \"wf64\", FMT_LEN_wf64, STD_C2X, NO_FMT, 0 },\n   { NO_FMT, NO_FMT, 0 }\n };\n \n@@ -525,6 +533,14 @@ static const format_length_info scanf_length_specs[] =\n   { \"j\", FMT_LEN_j, STD_C99, NO_FMT, 0 },\n   { \"H\", FMT_LEN_H, STD_C2X, NO_FMT, 0 },\n   { \"D\", FMT_LEN_D, STD_C2X, \"DD\", FMT_LEN_DD, STD_C2X, 0 },\n+  { \"w8\", FMT_LEN_w8, STD_C2X, NO_FMT, 0 },\n+  { \"w16\", FMT_LEN_w16, STD_C2X, NO_FMT, 0 },\n+  { \"w32\", FMT_LEN_w32, STD_C2X, NO_FMT, 0 },\n+  { \"w64\", FMT_LEN_w64, STD_C2X, NO_FMT, 0 },\n+  { \"wf8\", FMT_LEN_wf8, STD_C2X, NO_FMT, 0 },\n+  { \"wf16\", FMT_LEN_wf16, STD_C2X, NO_FMT, 0 },\n+  { \"wf32\", FMT_LEN_wf32, STD_C2X, NO_FMT, 0 },\n+  { \"wf64\", FMT_LEN_wf64, STD_C2X, NO_FMT, 0 },\n   { NO_FMT, NO_FMT, 0 }\n };\n \n@@ -693,26 +709,26 @@ static const format_flag_pair strfmon_flag_pairs[] =\n static const format_char_info print_char_table[] =\n {\n   /* C89 conversion specifiers.  */\n-  { \"di\",  0, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T9L_LL,  TEX_LL,  T99_SST, T99_PD,  T99_IM,  BADLEN,  BADLEN,  BADLEN  }, \"-wp0 +'I\",  \"i\",  NULL },\n-  { \"oxX\", 0, STD_C89, { T89_UI,  T99_UC,  T89_US,  T89_UL,  T9L_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM, BADLEN,  BADLEN,  BADLEN }, \"-wp0#\",     \"i\",  NULL },\n-  { \"u\",   0, STD_C89, { T89_UI,  T99_UC,  T89_US,  T89_UL,  T9L_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM, BADLEN,  BADLEN,  BADLEN }, \"-wp0'I\",    \"i\",  NULL },\n-  { \"fgG\", 0, STD_C89, { T89_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T89_LD,  BADLEN,  BADLEN,  BADLEN,  T2X_D32, T2X_D64, T2X_D128 }, \"-wp0 +#'I\", \"\",   NULL },\n-  { \"eE\",  0, STD_C89, { T89_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T89_LD,  BADLEN,  BADLEN,  BADLEN,  T2X_D32, T2X_D64, T2X_D128 }, \"-wp0 +#I\",  \"\",   NULL },\n-  { \"c\",   0, STD_C89, { T89_I,   BADLEN,  BADLEN,  T94_WI,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"-w\",        \"\",   NULL },\n-  { \"s\",   1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"-wp\",       \"cR\", NULL },\n-  { \"p\",   1, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"-w\",        \"c\",  NULL },\n-  { \"n\",   1, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T9L_LL,  BADLEN,  T99_SST, T99_PD,  T99_IM,  BADLEN,  BADLEN,  BADLEN }, \"\",          \"W\",  NULL },\n+  { \"di\",  0, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T9L_LL,  TEX_LL,  T99_SST, T99_PD,  T99_IM,  BADLEN,  BADLEN,  BADLEN,   T2X_I8,  T2X_I16, T2X_I32, T2X_I64, T2X_IF8, T2X_IF16, T2X_IF32, T2X_IF64 }, \"-wp0 +'I\",  \"i\",  NULL },\n+  { \"oxX\", 0, STD_C89, { T89_UI,  T99_UC,  T89_US,  T89_UL,  T9L_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM, BADLEN,  BADLEN,  BADLEN,   T2X_U8,  T2X_U16, T2X_U32, T2X_U64, T2X_UF8, T2X_UF16, T2X_UF32, T2X_UF64 }, \"-wp0#\",     \"i\",  NULL },\n+  { \"u\",   0, STD_C89, { T89_UI,  T99_UC,  T89_US,  T89_UL,  T9L_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM, BADLEN,  BADLEN,  BADLEN,   T2X_U8,  T2X_U16, T2X_U32, T2X_U64, T2X_UF8, T2X_UF16, T2X_UF32, T2X_UF64 }, \"-wp0'I\",    \"i\",  NULL },\n+  { \"fgG\", 0, STD_C89, { T89_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T89_LD,  BADLEN,  BADLEN,  BADLEN,  T2X_D32, T2X_D64, T2X_D128, BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,   BADLEN,   BADLEN }, \"-wp0 +#'I\", \"\",   NULL },\n+  { \"eE\",  0, STD_C89, { T89_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T89_LD,  BADLEN,  BADLEN,  BADLEN,  T2X_D32, T2X_D64, T2X_D128, BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,   BADLEN,   BADLEN }, \"-wp0 +#I\",  \"\",   NULL },\n+  { \"c\",   0, STD_C89, { T89_I,   BADLEN,  BADLEN,  T94_WI,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,   BADLEN,   BADLEN }, \"-w\",        \"\",   NULL },\n+  { \"s\",   1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,   BADLEN,   BADLEN }, \"-wp\",       \"cR\", NULL },\n+  { \"p\",   1, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,   BADLEN,   BADLEN }, \"-w\",        \"c\",  NULL },\n+  { \"n\",   1, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T9L_LL,  BADLEN,  T99_SST, T99_PD,  T99_IM,  BADLEN,  BADLEN,  BADLEN,   T2X_I8,  T2X_I16, T2X_I32, T2X_I64, T2X_IF8, T2X_IF16, T2X_IF32, T2X_IF64 }, \"\",          \"W\",  NULL },\n   /* C99 conversion specifiers.  */\n-  { \"F\",   0, STD_C99, { T99_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN,  T2X_D32, T2X_D64, T2X_D128 }, \"-wp0 +#'I\", \"\",   NULL },\n-  { \"aA\",  0, STD_C99, { T99_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN,  T2X_D32, T2X_D64,  T2X_D128 }, \"-wp0 +#\",   \"\",   NULL },\n+  { \"F\",   0, STD_C99, { T99_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN,  T2X_D32, T2X_D64, T2X_D128, BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,   BADLEN,   BADLEN }, \"-wp0 +#'I\", \"\",   NULL },\n+  { \"aA\",  0, STD_C99, { T99_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN,  T2X_D32, T2X_D64, T2X_D128, BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,   BADLEN,   BADLEN }, \"-wp0 +#\",   \"\",   NULL },\n   /* C2X conversion specifiers.  */\n-  { \"b\",   0, STD_C2X, { T2X_UI,  T2X_UC,  T2X_US,  T2X_UL,  T2X_ULL, TEX_ULL, T2X_ST,  T2X_UPD, T2X_UIM, BADLEN,  BADLEN,  BADLEN }, \"-wp0#\",     \"i\",  NULL },\n+  { \"b\",   0, STD_C2X, { T2X_UI,  T2X_UC,  T2X_US,  T2X_UL,  T2X_ULL, TEX_ULL, T2X_ST,  T2X_UPD, T2X_UIM, BADLEN,  BADLEN,  BADLEN,   T2X_U8,  T2X_U16, T2X_U32, T2X_U64, T2X_UF8, T2X_UF16, T2X_UF32, T2X_UF64 }, \"-wp0#\",     \"i\",  NULL },\n   /* X/Open conversion specifiers.  */\n-  { \"C\",   0, STD_EXT, { TEX_WI,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"-w\",        \"\",   NULL },\n-  { \"S\",   1, STD_EXT, { TEX_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"-wp\",       \"R\",  NULL },\n+  { \"C\",   0, STD_EXT, { TEX_WI,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,   BADLEN,   BADLEN }, \"-w\",        \"\",   NULL },\n+  { \"S\",   1, STD_EXT, { TEX_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,   BADLEN,   BADLEN }, \"-wp\",       \"R\",  NULL },\n   /* GNU conversion specifiers.  */\n-  { \"m\",   0, STD_EXT, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"-wp\",       \"\",   NULL },\n-  { \"B\",   0, STD_EXT, { T2X_UI,  T2X_UC,  T2X_US,  T2X_UL,  T2X_ULL, TEX_ULL, T2X_ST,  T2X_UPD, T2X_UIM, BADLEN,  BADLEN,  BADLEN }, \"-wp0#\",     \"i\",  NULL },\n+  { \"m\",   0, STD_EXT, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,   BADLEN,   BADLEN }, \"-wp\",       \"\",   NULL },\n+  { \"B\",   0, STD_EXT, { T2X_UI,  T2X_UC,  T2X_US,  T2X_UL,  T2X_ULL, TEX_ULL, T2X_ST,  T2X_UPD, T2X_UIM, BADLEN,  BADLEN,  BADLEN,   T2X_U8,  T2X_U16, T2X_U32, T2X_U64, T2X_UF8, T2X_UF16, T2X_UF32, T2X_UF64 }, \"-wp0#\",     \"i\",  NULL },\n   { NULL,  0, STD_C89, NOLENGTHS, NULL, NULL, NULL }\n };\n \n@@ -860,23 +876,23 @@ static const format_char_info gcc_dump_printf_char_table[] =\n static const format_char_info scan_char_table[] =\n {\n   /* C89 conversion specifiers.  */\n-  { \"di\",    1, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T9L_LL,  TEX_LL,  T99_SST, T99_PD,  T99_IM,  BADLEN,  BADLEN,  BADLEN }, \"*w'I\", \"W\",   NULL },\n-  { \"u\",     1, STD_C89, { T89_UI,  T99_UC,  T89_US,  T89_UL,  T9L_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM, BADLEN,  BADLEN,  BADLEN }, \"*w'I\", \"W\",   NULL },\n-  { \"oxX\",   1, STD_C89, { T89_UI,  T99_UC,  T89_US,  T89_UL,  T9L_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM, BADLEN,  BADLEN,  BADLEN }, \"*w\",   \"W\",   NULL },\n-  { \"efgEG\", 1, STD_C89, { T89_F,   BADLEN,  BADLEN,  T89_D,   BADLEN,  T89_LD,  BADLEN,  BADLEN,  BADLEN,  T2X_D32, T2X_D64, T2X_D128 }, \"*w'\",  \"W\",   NULL },\n-  { \"c\",     1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*mw\",   \"cW\",  NULL },\n-  { \"s\",     1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*amw\",  \"cW\",  NULL },\n-  { \"[\",     1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*amw\",  \"cW[\", NULL },\n-  { \"p\",     2, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*w\",   \"W\",   NULL },\n-  { \"n\",     1, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T9L_LL,  BADLEN,  T99_SST, T99_PD,  T99_IM,  BADLEN,  BADLEN,  BADLEN }, \"\",     \"W\",   NULL },\n+  { \"di\",    1, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T9L_LL,  TEX_LL,  T99_SST, T99_PD,  T99_IM,  BADLEN,  BADLEN,  BADLEN,   T2X_I8,  T2X_I16, T2X_I32, T2X_I64, T2X_IF8, T2X_IF16, T2X_IF32, T2X_IF64 }, \"*w'I\", \"W\",   NULL },\n+  { \"u\",     1, STD_C89, { T89_UI,  T99_UC,  T89_US,  T89_UL,  T9L_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM, BADLEN,  BADLEN,  BADLEN,   T2X_U8,  T2X_U16, T2X_U32, T2X_U64, T2X_UF8, T2X_UF16, T2X_UF32, T2X_UF64 }, \"*w'I\", \"W\",   NULL },\n+  { \"oxX\",   1, STD_C89, { T89_UI,  T99_UC,  T89_US,  T89_UL,  T9L_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM, BADLEN,  BADLEN,  BADLEN,   T2X_U8,  T2X_U16, T2X_U32, T2X_U64, T2X_UF8, T2X_UF16, T2X_UF32, T2X_UF64 }, \"*w\",   \"W\",   NULL },\n+  { \"efgEG\", 1, STD_C89, { T89_F,   BADLEN,  BADLEN,  T89_D,   BADLEN,  T89_LD,  BADLEN,  BADLEN,  BADLEN,  T2X_D32, T2X_D64, T2X_D128, BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,   BADLEN,   BADLEN }, \"*w'\",  \"W\",   NULL },\n+  { \"c\",     1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,   BADLEN,   BADLEN }, \"*mw\",   \"cW\",  NULL },\n+  { \"s\",     1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,   BADLEN,   BADLEN }, \"*amw\",  \"cW\",  NULL },\n+  { \"[\",     1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,   BADLEN,   BADLEN }, \"*amw\",  \"cW[\", NULL },\n+  { \"p\",     2, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,   BADLEN,   BADLEN }, \"*w\",   \"W\",   NULL },\n+  { \"n\",     1, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T9L_LL,  BADLEN,  T99_SST, T99_PD,  T99_IM,  BADLEN,  BADLEN,  BADLEN,   T2X_I8,  T2X_I16, T2X_I32, T2X_I64, T2X_IF8, T2X_IF16, T2X_IF32, T2X_IF64 }, \"\",     \"W\",   NULL },\n   /* C99 conversion specifiers.  */\n-  { \"F\",   1, STD_C99, { T99_F,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN,  T2X_D32, T2X_D64, T2X_D128 }, \"*w'\",  \"W\",   NULL },\n-  { \"aA\",   1, STD_C99, { T99_F,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN,  T2X_D32,  T2X_D64,  T2X_D128 }, \"*w'\",  \"W\",   NULL },\n+  { \"F\",   1, STD_C99,   { T99_F,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN,  T2X_D32, T2X_D64, T2X_D128, BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,   BADLEN,   BADLEN }, \"*w'\",  \"W\",   NULL },\n+  { \"aA\",   1, STD_C99,  { T99_F,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN,  T2X_D32, T2X_D64, T2X_D128, BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,   BADLEN,   BADLEN }, \"*w'\",  \"W\",   NULL },\n   /* C2X conversion specifiers.  */\n-  { \"b\",     1, STD_C2X, { T2X_UI,  T2X_UC,  T2X_US,  T2X_UL,  T2X_ULL, TEX_ULL, T2X_ST,  T2X_UPD, T2X_UIM, BADLEN,  BADLEN,  BADLEN }, \"*w\",   \"W\",   NULL },\n+  { \"b\",     1, STD_C2X, { T2X_UI,  T2X_UC,  T2X_US,  T2X_UL,  T2X_ULL, TEX_ULL, T2X_ST,  T2X_UPD, T2X_UIM, BADLEN,  BADLEN,  BADLEN,   T2X_U8,  T2X_U16, T2X_U32, T2X_U64, T2X_UF8, T2X_UF16, T2X_UF32, T2X_UF64 }, \"*w\",   \"W\",   NULL },\n   /* X/Open conversion specifiers.  */\n-  { \"C\",     1, STD_EXT, { TEX_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*mw\",   \"W\",   NULL },\n-  { \"S\",     1, STD_EXT, { TEX_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*amw\",  \"W\",   NULL },\n+  { \"C\",     1, STD_EXT, { TEX_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,   BADLEN,   BADLEN }, \"*mw\",   \"W\",   NULL },\n+  { \"S\",     1, STD_EXT, { TEX_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,   BADLEN,   BADLEN }, \"*amw\",  \"W\",   NULL },\n   { NULL, 0, STD_C89, NOLENGTHS, NULL, NULL, NULL }\n };\n "}, {"sha": "173d3cd82d3ce4e958c4601b300b74b24407eaee", "filename": "gcc/c-family/c-format.h", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e1538c5f68abed81204a223db7bdbeef32e0711/gcc%2Fc-family%2Fc-format.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e1538c5f68abed81204a223db7bdbeef32e0711/gcc%2Fc-family%2Fc-format.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.h?ref=5e1538c5f68abed81204a223db7bdbeef32e0711", "patch": "@@ -36,6 +36,14 @@ enum format_lengths\n   FMT_LEN_H,\n   FMT_LEN_D,\n   FMT_LEN_DD,\n+  FMT_LEN_w8,\n+  FMT_LEN_w16,\n+  FMT_LEN_w32,\n+  FMT_LEN_w64,\n+  FMT_LEN_wf8,\n+  FMT_LEN_wf16,\n+  FMT_LEN_wf32,\n+  FMT_LEN_wf64,\n   FMT_LEN_w,   /* GCC's HOST_WIDE_INT.  */\n   FMT_LEN_MAX\n };\n@@ -124,9 +132,9 @@ struct format_type_detail\n \n \n /* Macros to fill out tables of these.  */\n-#define NOARGUMENTS\t{ T89_V, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN }\n+#define NOARGUMENTS\t{ T89_V, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN }\n #define BADLEN\t{ STD_C89, NULL, NULL }\n-#define NOLENGTHS\t{ BADLEN, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN }\n+#define NOLENGTHS\t{ BADLEN, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN }\n \n \n /* Structure describing a format conversion specifier (or a set of specifiers\n@@ -338,6 +346,38 @@ struct format_kind_info\n #define T2X_D64 { STD_C2X, \"_Decimal64\", T_D64 }\n #define T_D128  &dfloat128_type_node\n #define T2X_D128 { STD_C2X, \"_Decimal128\", T_D128 }\n+#define T_I8\t&int_least8_type_node\n+#define T2X_I8\t{ STD_C2X, \"int_least8_t\", T_I8 }\n+#define T_I16\t&int_least16_type_node\n+#define T2X_I16\t{ STD_C2X, \"int_least16_t\", T_I16 }\n+#define T_I32\t&int_least32_type_node\n+#define T2X_I32\t{ STD_C2X, \"int_least32_t\", T_I32 }\n+#define T_I64\t&int_least64_type_node\n+#define T2X_I64\t{ STD_C2X, \"int_least64_t\", T_I64 }\n+#define T_U8\t&uint_least8_type_node\n+#define T2X_U8\t{ STD_C2X, \"uint_least8_t\", T_U8 }\n+#define T_U16\t&uint_least16_type_node\n+#define T2X_U16\t{ STD_C2X, \"uint_least16_t\", T_U16 }\n+#define T_U32\t&uint_least32_type_node\n+#define T2X_U32\t{ STD_C2X, \"uint_least32_t\", T_U32 }\n+#define T_U64\t&uint_least64_type_node\n+#define T2X_U64\t{ STD_C2X, \"uint_least64_t\", T_U64 }\n+#define T_IF8\t&int_fast8_type_node\n+#define T2X_IF8\t{ STD_C2X, \"int_fast8_t\", T_IF8 }\n+#define T_IF16\t&int_fast16_type_node\n+#define T2X_IF16 { STD_C2X, \"int_fast16_t\", T_IF16 }\n+#define T_IF32\t&int_fast32_type_node\n+#define T2X_IF32 { STD_C2X, \"int_fast32_t\", T_IF32 }\n+#define T_IF64\t&int_fast64_type_node\n+#define T2X_IF64 { STD_C2X, \"int_fast64_t\", T_IF64 }\n+#define T_UF8\t&uint_fast8_type_node\n+#define T2X_UF8\t{ STD_C2X, \"uint_fast8_t\", T_UF8 }\n+#define T_UF16\t&uint_fast16_type_node\n+#define T2X_UF16 { STD_C2X, \"uint_fast16_t\", T_UF16 }\n+#define T_UF32\t&uint_fast32_type_node\n+#define T2X_UF32 { STD_C2X, \"uint_fast32_t\", T_UF32 }\n+#define T_UF64\t&uint_fast64_type_node\n+#define T2X_UF64 { STD_C2X, \"uint_fast64_t\", T_UF64 }\n \n /* Structure describing how format attributes such as \"printf\" are\n    interpreted as \"gnu_printf\" or \"ms_printf\" on a particular system."}, {"sha": "05d242ecf28a38fe8eb2f6d25d21ae10b29fbc2b", "filename": "gcc/testsuite/gcc.dg/format/c11-printf-1.c", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e1538c5f68abed81204a223db7bdbeef32e0711/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc11-printf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e1538c5f68abed81204a223db7bdbeef32e0711/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc11-printf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc11-printf-1.c?ref=5e1538c5f68abed81204a223db7bdbeef32e0711", "patch": "@@ -6,8 +6,33 @@\n #include \"format.h\"\n \n void\n-foo (int i)\n+foo (int i, int_least8_t i8, int_least16_t i16, int_least32_t i32,\n+     int_least64_t i64, uint_least8_t u8, uint_least16_t u16,\n+     uint_least32_t u32, uint_least64_t u64, int_fast8_t if8,\n+     int_fast16_t if16, int_fast32_t if32, int_fast64_t if64, uint_fast8_t uf8,\n+     uint_fast16_t uf16, uint_fast32_t uf32, uint_fast64_t uf64)\n {\n   printf (\"%b\", i); /* { dg-warning \"C\" } */\n   printf (\"%B\", i); /* { dg-warning \"C\" } */\n+  printf (\"%w8d\", i8); /* { dg-warning \"C\" } */\n+  printf (\"%w16d\", i16); /* { dg-warning \"C\" } */\n+  printf (\"%w32d\", i32); /* { dg-warning \"C\" } */\n+  printf (\"%w64d\", i64); /* { dg-warning \"C\" } */\n+  printf (\"%wf8d\", if8); /* { dg-warning \"C\" } */\n+  printf (\"%wf16d\", if16); /* { dg-warning \"C\" } */\n+  printf (\"%wf32d\", if32); /* { dg-warning \"C\" } */\n+  printf (\"%wf64d\", if64); /* { dg-warning \"C\" } */\n+  printf (\"%w8u\", u8); /* { dg-warning \"C\" } */\n+  printf (\"%w16u\", u16); /* { dg-warning \"C\" } */\n+  printf (\"%w32u\", u32); /* { dg-warning \"C\" } */\n+  printf (\"%w64u\", u64); /* { dg-warning \"C\" } */\n+  printf (\"%wf8u\", uf8); /* { dg-warning \"C\" } */\n+  printf (\"%wf16u\", uf16); /* { dg-warning \"C\" } */\n+  printf (\"%wf32u\", uf32); /* { dg-warning \"C\" } */\n+  printf (\"%wf64u\", uf64); /* { dg-warning \"C\" } */\n+  printf (\"%w8i\", i8); /* { dg-warning \"C\" } */\n+  printf (\"%w8o\", u8); /* { dg-warning \"C\" } */\n+  printf (\"%w8x\", u8); /* { dg-warning \"C\" } */\n+  printf (\"%w8X\", u8); /* { dg-warning \"C\" } */\n+  printf (\"%w8n\", &i8); /* { dg-warning \"C\" } */\n }"}, {"sha": "4edd2a3183f5743ddbb451144ec9317de96739b5", "filename": "gcc/testsuite/gcc.dg/format/c11-scanf-1.c", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e1538c5f68abed81204a223db7bdbeef32e0711/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc11-scanf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e1538c5f68abed81204a223db7bdbeef32e0711/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc11-scanf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc11-scanf-1.c?ref=5e1538c5f68abed81204a223db7bdbeef32e0711", "patch": "@@ -5,7 +5,33 @@\n #include \"format.h\"\n \n void\n-foo (unsigned int *uip)\n+foo (unsigned int *uip, int_least8_t *i8, int_least16_t *i16,\n+     int_least32_t *i32, int_least64_t *i64, uint_least8_t *u8,\n+     uint_least16_t *u16, uint_least32_t *u32, uint_least64_t *u64,\n+     int_fast8_t *if8, int_fast16_t *if16, int_fast32_t *if32,\n+     int_fast64_t *if64, uint_fast8_t *uf8, uint_fast16_t *uf16,\n+     uint_fast32_t *uf32, uint_fast64_t *uf64)\n {\n   scanf (\"%b\", uip); /* { dg-warning \"C\" } */\n+  scanf (\"%w8d\", i8); /* { dg-warning \"C\" } */\n+  scanf (\"%w16d\", i16); /* { dg-warning \"C\" } */\n+  scanf (\"%w32d\", i32); /* { dg-warning \"C\" } */\n+  scanf (\"%w64d\", i64); /* { dg-warning \"C\" } */\n+  scanf (\"%wf8d\", if8); /* { dg-warning \"C\" } */\n+  scanf (\"%wf16d\", if16); /* { dg-warning \"C\" } */\n+  scanf (\"%wf32d\", if32); /* { dg-warning \"C\" } */\n+  scanf (\"%wf64d\", if64); /* { dg-warning \"C\" } */\n+  scanf (\"%w8u\", u8); /* { dg-warning \"C\" } */\n+  scanf (\"%w16u\", u16); /* { dg-warning \"C\" } */\n+  scanf (\"%w32u\", u32); /* { dg-warning \"C\" } */\n+  scanf (\"%w64u\", u64); /* { dg-warning \"C\" } */\n+  scanf (\"%wf8u\", uf8); /* { dg-warning \"C\" } */\n+  scanf (\"%wf16u\", uf16); /* { dg-warning \"C\" } */\n+  scanf (\"%wf32u\", uf32); /* { dg-warning \"C\" } */\n+  scanf (\"%wf64u\", uf64); /* { dg-warning \"C\" } */\n+  scanf (\"%w8i\", i8); /* { dg-warning \"C\" } */\n+  scanf (\"%w8o\", u8); /* { dg-warning \"C\" } */\n+  scanf (\"%w8x\", u8); /* { dg-warning \"C\" } */\n+  scanf (\"%w8X\", u8); /* { dg-warning \"C\" } */\n+  scanf (\"%w8n\", i8); /* { dg-warning \"C\" } */\n }"}, {"sha": "ca43d7997e59a45de0e154b22da729965e1e113a", "filename": "gcc/testsuite/gcc.dg/format/c2x-printf-1.c", "status": "modified", "additions": 112, "deletions": 1, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e1538c5f68abed81204a223db7bdbeef32e0711/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc2x-printf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e1538c5f68abed81204a223db7bdbeef32e0711/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc2x-printf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc2x-printf-1.c?ref=5e1538c5f68abed81204a223db7bdbeef32e0711", "patch": "@@ -6,7 +6,12 @@\n \n void\n foo (unsigned int u, unsigned short us, unsigned char uc, unsigned long ul,\n-     unsigned long long ull, uintmax_t uj, size_t z, unsigned_ptrdiff_t ut)\n+     unsigned long long ull, uintmax_t uj, size_t z, unsigned_ptrdiff_t ut,\n+     int_least8_t i8, int_least16_t i16, int_least32_t i32, int_least64_t i64,\n+     uint_least8_t u8, uint_least16_t u16, uint_least32_t u32,\n+     uint_least64_t u64, int_fast8_t if8, int_fast16_t if16, int_fast32_t if32,\n+     int_fast64_t if64, uint_fast8_t uf8, uint_fast16_t uf16,\n+     uint_fast32_t uf32, uint_fast64_t uf64)\n {\n   /* Use of %b with each length modifier and other valid features.  */\n   printf (\"%b %hb %hhb %lb %llb %jb %zb %tb\\n\", u, us, uc, ul, ull, uj, z, ut);\n@@ -23,4 +28,110 @@ foo (unsigned int u, unsigned short us, unsigned char uc, unsigned long ul,\n   /* Use of 'L' and 'q' for long long is an extension.  */\n   printf (\"%Lb\", ull); /* { dg-warning \"does not support\" } */\n   printf (\"%qb\", ull); /* { dg-warning \"does not support\" } */\n+  /* Use of %wN and %wfN with each valid conversion specifier.  */\n+  printf (\"%w8d %w16d %w32d %w64d %wf8d %wf16d %wf32d %wf64d\",\n+\t  i8, i16, i32, i64, if8, if16, if32, if64);\n+  printf (\"%w8i %w16i %w32i %w64i %wf8i %wf16i %wf32i %wf64i\",\n+\t  i8, i16, i32, i64, if8, if16, if32, if64);\n+  printf (\"%w8b %w16b %w32b %w64b %wf8b %wf16b %wf32b %wf64b\",\n+\t  u8, u16, u32, u64, uf8, uf16, uf32, uf64);\n+  printf (\"%w8o %w16o %w32o %w64o %wf8o %wf16o %wf32o %wf64o\",\n+\t  u8, u16, u32, u64, uf8, uf16, uf32, uf64);\n+  printf (\"%w8u %w16u %w32u %w64u %wf8u %wf16u %wf32u %wf64u\",\n+\t  u8, u16, u32, u64, uf8, uf16, uf32, uf64);\n+  printf (\"%w8x %w16x %w32x %w64x %wf8x %wf16x %wf32x %wf64x\",\n+\t  u8, u16, u32, u64, uf8, uf16, uf32, uf64);\n+  printf (\"%w8X %w16X %w32X %w64X %wf8X %wf16X %wf32X %wf64X\",\n+\t  u8, u16, u32, u64, uf8, uf16, uf32, uf64);\n+  printf (\"%w8n %w16n %w32n %w64n %wf8n %wf16n %wf32n %wf64n\",\n+\t  &i8, &i16, &i32, &i64, &if8, &if16, &if32, &if64);\n+  /* Use of %wN and %wfN with bad conversion specifiers.  */\n+  printf (\"%w8a\", i8); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w16a\", i16); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w32a\", i32); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w64a\", i64); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf8a\", if8); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf16a\", if16); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf32a\", if32); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf64a\", if64); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w8A\", i8); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w16A\", i16); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w32A\", i32); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w64A\", i64); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf8A\", if8); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf16A\", if16); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf32A\", if32); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf64A\", if64); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w8c\", i8); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w16c\", i16); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w32c\", i32); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w64c\", i64); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf8c\", if8); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf16c\", if16); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf32c\", if32); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf64c\", if64); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w8e\", i8); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w16e\", i16); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w32e\", i32); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w64e\", i64); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf8e\", if8); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf16e\", if16); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf32e\", if32); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf64e\", if64); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w8E\", i8); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w16E\", i16); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w32E\", i32); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w64E\", i64); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf8E\", if8); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf16E\", if16); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf32E\", if32); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf64E\", if64); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w8f\", i8); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w16f\", i16); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w32f\", i32); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w64f\", i64); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf8f\", if8); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf16f\", if16); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf32f\", if32); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf64f\", if64); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w8F\", i8); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w16F\", i16); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w32F\", i32); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w64F\", i64); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf8F\", if8); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf16F\", if16); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf32F\", if32); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf64F\", if64); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w8g\", i8); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w16g\", i16); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w32g\", i32); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w64g\", i64); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf8g\", if8); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf16g\", if16); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf32g\", if32); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf64g\", if64); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w8G\", i8); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w16G\", i16); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w32G\", i32); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w64G\", i64); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf8G\", if8); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf16G\", if16); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf32G\", if32); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf64G\", if64); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w8p\", i8); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w16p\", i16); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w32p\", i32); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w64p\", i64); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf8p\", if8); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf16p\", if16); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf32p\", if32); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf64p\", if64); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w8s\", i8); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w16s\", i16); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w32s\", i32); /* { dg-warning \"length modifier\" } */\n+  printf (\"%w64s\", i64); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf8s\", if8); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf16s\", if16); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf32s\", if32); /* { dg-warning \"length modifier\" } */\n+  printf (\"%wf64s\", if64); /* { dg-warning \"length modifier\" } */\n }"}, {"sha": "88fab12fbbb2e78ecd19b573e1fdd516734a6df4", "filename": "gcc/testsuite/gcc.dg/format/c2x-scanf-1.c", "status": "modified", "additions": 120, "deletions": 1, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e1538c5f68abed81204a223db7bdbeef32e0711/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc2x-scanf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e1538c5f68abed81204a223db7bdbeef32e0711/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc2x-scanf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc2x-scanf-1.c?ref=5e1538c5f68abed81204a223db7bdbeef32e0711", "patch": "@@ -7,11 +7,130 @@\n void\n foo (unsigned int *uip, unsigned short int *uhp, unsigned char *uhhp,\n      unsigned long int *ulp, unsigned long long *ullp, uintmax_t *ujp,\n-     size_t *zp, unsigned_ptrdiff_t *utp)\n+     size_t *zp, unsigned_ptrdiff_t *utp, int_least8_t *i8, int_least16_t *i16,\n+     int_least32_t *i32, int_least64_t *i64, uint_least8_t *u8,\n+     uint_least16_t *u16, uint_least32_t *u32, uint_least64_t *u64,\n+     int_fast8_t *if8, int_fast16_t *if16, int_fast32_t *if32,\n+     int_fast64_t *if64, uint_fast8_t *uf8, uint_fast16_t *uf16,\n+     uint_fast32_t *uf32, uint_fast64_t *uf64)\n {\n   scanf (\"%*b\");\n   scanf (\"%2b\", uip);\n   scanf (\"%hb%hhb%lb%llb%jb%zb%tb\", uhp, uhhp, ulp, ullp, ujp, zp, utp);\n   scanf (\"%Lb\", ullp); /* { dg-warning \"does not support\" } */\n   scanf (\"%qb\", ullp); /* { dg-warning \"does not support\" } */\n+  /* Use of %wN and %wfN with each valid conversion specifier.  */\n+  scanf (\"%w8d %w16d %w32d %w64d %wf8d %wf16d %wf32d %wf64d\",\n+\t i8, i16, i32, i64, if8, if16, if32, if64);\n+  scanf (\"%w8i %w16i %w32i %w64i %wf8i %wf16i %wf32i %wf64i\",\n+\t i8, i16, i32, i64, if8, if16, if32, if64);\n+  scanf (\"%w8b %w16b %w32b %w64b %wf8b %wf16b %wf32b %wf64b\",\n+\t u8, u16, u32, u64, uf8, uf16, uf32, uf64);\n+  scanf (\"%w8o %w16o %w32o %w64o %wf8o %wf16o %wf32o %wf64o\",\n+\t u8, u16, u32, u64, uf8, uf16, uf32, uf64);\n+  scanf (\"%w8u %w16u %w32u %w64u %wf8u %wf16u %wf32u %wf64u\",\n+\t u8, u16, u32, u64, uf8, uf16, uf32, uf64);\n+  scanf (\"%w8x %w16x %w32x %w64x %wf8x %wf16x %wf32x %wf64x\",\n+\t u8, u16, u32, u64, uf8, uf16, uf32, uf64);\n+  scanf (\"%w8X %w16X %w32X %w64X %wf8X %wf16X %wf32X %wf64X\",\n+\t u8, u16, u32, u64, uf8, uf16, uf32, uf64);\n+  scanf (\"%w8n %w16n %w32n %w64n %wf8n %wf16n %wf32n %wf64n\",\n+\t i8, i16, i32, i64, if8, if16, if32, if64);\n+  /* Use of %wN and %wfN with bad conversion specifiers.  */\n+  scanf (\"%w8a\", i8); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w16a\", i16); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w32a\", i32); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w64a\", i64); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf8a\", if8); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf16a\", if16); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf32a\", if32); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf64a\", if64); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w8A\", i8); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w16A\", i16); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w32A\", i32); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w64A\", i64); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf8A\", if8); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf16A\", if16); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf32A\", if32); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf64A\", if64); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w8c\", i8); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w16c\", i16); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w32c\", i32); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w64c\", i64); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf8c\", if8); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf16c\", if16); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf32c\", if32); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf64c\", if64); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w8e\", i8); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w16e\", i16); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w32e\", i32); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w64e\", i64); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf8e\", if8); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf16e\", if16); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf32e\", if32); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf64e\", if64); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w8E\", i8); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w16E\", i16); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w32E\", i32); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w64E\", i64); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf8E\", if8); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf16E\", if16); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf32E\", if32); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf64E\", if64); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w8f\", i8); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w16f\", i16); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w32f\", i32); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w64f\", i64); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf8f\", if8); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf16f\", if16); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf32f\", if32); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf64f\", if64); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w8F\", i8); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w16F\", i16); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w32F\", i32); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w64F\", i64); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf8F\", if8); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf16F\", if16); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf32F\", if32); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf64F\", if64); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w8g\", i8); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w16g\", i16); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w32g\", i32); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w64g\", i64); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf8g\", if8); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf16g\", if16); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf32g\", if32); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf64g\", if64); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w8G\", i8); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w16G\", i16); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w32G\", i32); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w64G\", i64); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf8G\", if8); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf16G\", if16); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf32G\", if32); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf64G\", if64); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w8p\", i8); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w16p\", i16); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w32p\", i32); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w64p\", i64); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf8p\", if8); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf16p\", if16); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf32p\", if32); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf64p\", if64); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w8s\", i8); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w16s\", i16); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w32s\", i32); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w64s\", i64); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf8s\", if8); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf16s\", if16); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf32s\", if32); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf64s\", if64); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w8[abc]\", i8); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w16[abc]\", i16); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w32[abc]\", i32); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%w64[abc]\", i64); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf8[abc]\", if8); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf16[abc]\", if16); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf32[abc]\", if32); /* { dg-warning \"length modifier\" } */\n+  scanf (\"%wf64[abc]\", if64); /* { dg-warning \"length modifier\" } */\n }"}, {"sha": "0aeb365e767e11f0e2fb6e9f6f60ce9847f1a478", "filename": "gcc/testsuite/gcc.dg/format/ext-9.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e1538c5f68abed81204a223db7bdbeef32e0711/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e1538c5f68abed81204a223db7bdbeef32e0711/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-9.c?ref=5e1538c5f68abed81204a223db7bdbeef32e0711", "patch": "@@ -8,7 +8,12 @@\n void\n foo (u_quad_t uq, unsigned int u, unsigned short us, unsigned char uc,\n      unsigned long ul, unsigned long long ull, uintmax_t uj, size_t z,\n-     unsigned_ptrdiff_t ut)\n+     unsigned_ptrdiff_t ut, int_least8_t i8, int_least16_t i16,\n+     int_least32_t i32, int_least64_t i64, uint_least8_t u8,\n+     uint_least16_t u16, uint_least32_t u32, uint_least64_t u64,\n+     int_fast8_t if8, int_fast16_t if16, int_fast32_t if32, int_fast64_t if64,\n+     uint_fast8_t uf8, uint_fast16_t uf16, uint_fast32_t uf32,\n+     uint_fast64_t uf64)\n {\n   /* Deprecated length modifiers with %b and %B.  */\n   printf (\"%qb%qB\", uq, uq);\n@@ -26,4 +31,7 @@ foo (u_quad_t uq, unsigned int u, unsigned short us, unsigned char uc,\n   /* Flags ignored in certain combinations.  */\n   printf (\"%-08B\\n\", u); /* { dg-warning \"ignored\" } */\n   printf (\"%08.5B\\n\", u); /* { dg-warning \"ignored\" } */\n+  /* Use of %wN and %wfN with %B.  */\n+  printf (\"%w8B %w16B %w32B %w64B %wf8B %wf16B %wf32B %wf64B\",\n+\t  u8, u16, u32, u64, uf8, uf16, uf32, uf64);\n }"}, {"sha": "2863e7e982764a3ba62aaf4b44e285067fd529bc", "filename": "gcc/testsuite/gcc.dg/format/format.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e1538c5f68abed81204a223db7bdbeef32e0711/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fformat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e1538c5f68abed81204a223db7bdbeef32e0711/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fformat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fformat.h?ref=5e1538c5f68abed81204a223db7bdbeef32e0711", "patch": "@@ -77,6 +77,24 @@ typedef ullong u_quad_t;\n __extension__ typedef __INTMAX_TYPE__ intmax_t;\n __extension__ typedef __UINTMAX_TYPE__ uintmax_t;\n \n+__extension__ typedef __INT_LEAST8_TYPE__ int_least8_t;\n+__extension__ typedef __INT_LEAST16_TYPE__ int_least16_t;\n+__extension__ typedef __INT_LEAST32_TYPE__ int_least32_t;\n+__extension__ typedef __INT_LEAST64_TYPE__ int_least64_t;\n+__extension__ typedef __UINT_LEAST8_TYPE__ uint_least8_t;\n+__extension__ typedef __UINT_LEAST16_TYPE__ uint_least16_t;\n+__extension__ typedef __UINT_LEAST32_TYPE__ uint_least32_t;\n+__extension__ typedef __UINT_LEAST64_TYPE__ uint_least64_t;\n+\n+__extension__ typedef __INT_FAST8_TYPE__ int_fast8_t;\n+__extension__ typedef __INT_FAST16_TYPE__ int_fast16_t;\n+__extension__ typedef __INT_FAST32_TYPE__ int_fast32_t;\n+__extension__ typedef __INT_FAST64_TYPE__ int_fast64_t;\n+__extension__ typedef __UINT_FAST8_TYPE__ uint_fast8_t;\n+__extension__ typedef __UINT_FAST16_TYPE__ uint_fast16_t;\n+__extension__ typedef __UINT_FAST32_TYPE__ uint_fast32_t;\n+__extension__ typedef __UINT_FAST64_TYPE__ uint_fast64_t;\n+\n #if __STDC_VERSION__ < 199901L && !defined(restrict)\n #define restrict /* \"restrict\" not in old C standard.  */\n #endif"}]}