{"sha": "5a6c626710ad2ac4baa2dba02fac0750177e3305", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE2YzYyNjcxMGFkMmFjNGJhYTJkYmEwMmZhYzA3NTAxNzdlMzMwNQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-08-26T20:08:25Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-08-26T20:09:20Z"}, "message": "[i386] Call force_reg unconditionally.\n\nThere is no point to check RTXes before calling force_reg,\nforce_reg checks for REG RTX by itself.\n\n2021-08-26  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/\n\t* config/i386/i386.md (*btr<mode>_1): Call force_reg unconditionally.\n\t(conditional moves with memory inputs splitters): Ditto.\n\t* config/i386/sse.md (one_cmpl<mode>2): Simplify.", "tree": {"sha": "96f76144c4d69acd14f46c7085a8615b69c58c97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96f76144c4d69acd14f46c7085a8615b69c58c97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a6c626710ad2ac4baa2dba02fac0750177e3305", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a6c626710ad2ac4baa2dba02fac0750177e3305", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a6c626710ad2ac4baa2dba02fac0750177e3305", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a6c626710ad2ac4baa2dba02fac0750177e3305/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "352d5e85a7060cd0e069d81c61b22ca3d16ffc49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/352d5e85a7060cd0e069d81c61b22ca3d16ffc49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/352d5e85a7060cd0e069d81c61b22ca3d16ffc49"}], "stats": {"total": 21, "additions": 8, "deletions": 13}, "files": [{"sha": "528116dfe2d44d7f14cd03d603a68b21874961b3", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a6c626710ad2ac4baa2dba02fac0750177e3305/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a6c626710ad2ac4baa2dba02fac0750177e3305/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=5a6c626710ad2ac4baa2dba02fac0750177e3305", "patch": "@@ -12728,8 +12728,7 @@\n       (clobber (reg:CC FLAGS_REG))])]\n {\n   operands[0] = lowpart_subreg (SImode, operands[0], <MODE>mode);\n-  if (MEM_P (operands[1]))\n-    operands[1] = force_reg (<MODE>mode, operands[1]);\n+  operands[1] = force_reg (<MODE>mode, operands[1]);\n   operands[1] = lowpart_subreg (SImode, operands[1], <MODE>mode);\n })\n \n@@ -19352,10 +19351,8 @@\n   [(set (match_dup 0)\n \t(if_then_else:SWI248 (match_dup 1) (match_dup 2) (match_dup 3)))]\n {\n-  if (MEM_P (operands[2]))\n-    operands[2] = force_reg (<MODE>mode, operands[2]);\n-  if (MEM_P (operands[3]))\n-    operands[3] = force_reg (<MODE>mode, operands[3]);\n+  operands[2] = force_reg (<MODE>mode, operands[2]);\n+  operands[3] = force_reg (<MODE>mode, operands[3]);\n })\n \n (define_insn \"*movqicc_noc\"\n@@ -19603,10 +19600,8 @@\n   [(set (match_dup 0)\n \t(if_then_else:MODEF (match_dup 1) (match_dup 2) (match_dup 3)))]\n {\n-  if (MEM_P (operands[2]))\n-    operands[2] = force_reg (<MODE>mode, operands[2]);\n-  if (MEM_P (operands[3]))\n-    operands[3] = force_reg (<MODE>mode, operands[3]);\n+  operands[2] = force_reg (<MODE>mode, operands[2]);\n+  operands[3] = force_reg (<MODE>mode, operands[3]);\n })\n \n ;; Don't do conditional moves with memory inputs"}, {"sha": "0ca322996ce790bf9483479e07f6fa38e8f4a417", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a6c626710ad2ac4baa2dba02fac0750177e3305/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a6c626710ad2ac4baa2dba02fac0750177e3305/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=5a6c626710ad2ac4baa2dba02fac0750177e3305", "patch": "@@ -14318,10 +14318,10 @@\n \t\t(match_dup 2)))]\n   \"TARGET_SSE\"\n {\n+  operands[2] = CONSTM1_RTX (<MODE>mode);\n+\n   if (!TARGET_AVX512F)\n-    operands[2] = force_reg (<MODE>mode, CONSTM1_RTX (<MODE>mode));\n-  else\n-    operands[2] = CONSTM1_RTX (<MODE>mode);\n+    operands[2] = force_reg (<MODE>mode, operands[2]);\n })\n \n (define_insn \"<mask_codefor>one_cmpl<mode>2<mask_name>\""}]}