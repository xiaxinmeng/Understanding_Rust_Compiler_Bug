{"sha": "e14e932bbb0a5b7d09f51233a1c64a64d945f677", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE0ZTkzMmJiYjBhNWI3ZDA5ZjUxMjMzYTFjNjRhNjRkOTQ1ZjY3Nw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-10-10T09:29:11Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-10-10T09:29:11Z"}, "message": "stl_algobase.h (swap): Move...\n\n2007-10-10  Paolo Carlini  <pcarlini@suse.de>\n\t    Chris Fairles  <chris.fairles@gmail.com>\n\n\t* include/bits/stl_algobase.h (swap): Move...\n\t* include/bits/stl_move.h: ... here.\n\t* include/bits/stl_pair.h (pair<>::pair(_U1&&, _U2&&),\n\tpair<>::pair(pair<>&&), pair<>::operator=(pair<>&&),\n\tpair<>::swap(pair&&), swap(&, &), swap(&&, &), swap(&, &&),\n\tmake_pair(_T1&&, _T2&&)): Add.\n\t* testsuite/20_util/pair/swap.cc: Add.\n\nCo-Authored-By: Chris Fairles <chris.fairles@gmail.com>\n\nFrom-SVN: r129198", "tree": {"sha": "0a91e0f97f80555176e2bf75fb62eeccdd4a589c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a91e0f97f80555176e2bf75fb62eeccdd4a589c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e14e932bbb0a5b7d09f51233a1c64a64d945f677", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e14e932bbb0a5b7d09f51233a1c64a64d945f677", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e14e932bbb0a5b7d09f51233a1c64a64d945f677", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e14e932bbb0a5b7d09f51233a1c64a64d945f677/comments", "author": null, "committer": null, "parents": [{"sha": "b79677426df313503d57f00d97b41dad0da8617c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b79677426df313503d57f00d97b41dad0da8617c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b79677426df313503d57f00d97b41dad0da8617c"}], "stats": {"total": 191, "additions": 163, "deletions": 28}, "files": [{"sha": "44afe2e44878a239fddea3b885da83e0f619dd57", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e14e932bbb0a5b7d09f51233a1c64a64d945f677/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e14e932bbb0a5b7d09f51233a1c64a64d945f677/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e14e932bbb0a5b7d09f51233a1c64a64d945f677", "patch": "@@ -1,3 +1,14 @@\n+2007-10-10  Paolo Carlini  <pcarlini@suse.de>\n+\t    Chris Fairles  <chris.fairles@gmail.com>\n+\n+\t* include/bits/stl_algobase.h (swap): Move...\n+\t* include/bits/stl_move.h: ... here.\n+\t* include/bits/stl_pair.h (pair<>::pair(_U1&&, _U2&&),\n+\tpair<>::pair(pair<>&&), pair<>::operator=(pair<>&&),\n+\tpair<>::swap(pair&&), swap(&, &), swap(&&, &), swap(&, &&),\n+\tmake_pair(_T1&&, _T2&&)): Add.\n+\t* testsuite/20_util/pair/swap.cc: Add.\n+\n 2007-10-09  Wolfgang Bangerth  <bangerth@dealii.org>\n \n \tPR libstdc++/33485 continued."}, {"sha": "c641df513a6d0a1204dd5678324bb2d286130178", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e14e932bbb0a5b7d09f51233a1c64a64d945f677/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e14e932bbb0a5b7d09f51233a1c64a64d945f677/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=e14e932bbb0a5b7d09f51233a1c64a64d945f677", "patch": "@@ -73,31 +73,10 @@\n #include <bits/stl_iterator.h>\n #include <bits/concept_check.h>\n #include <debug/debug.h>\n-#include <bits/stl_move.h> // For _GLIBCXX_MOVE\n+#include <bits/stl_move.h> // For std::swap and _GLIBCXX_MOVE\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n-  /**\n-   *  @brief Swaps two values.\n-   *  @param  a  A thing of arbitrary type.\n-   *  @param  b  Another thing of arbitrary type.\n-   *  @return   Nothing.\n-   *\n-   *  This is the simple classic generic implementation.  It will work on\n-   *  any type which has a copy constructor and an assignment operator.\n-  */\n-  template<typename _Tp>\n-    inline void\n-    swap(_Tp& __a, _Tp& __b)\n-    {\n-      // concept requirements\n-      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)\n-\n-      _Tp __tmp = _GLIBCXX_MOVE(__a);\n-      __a = _GLIBCXX_MOVE(__b);\n-      __b = _GLIBCXX_MOVE(__tmp);\n-    }\n-\n   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a\n   // nutshell, we are partially implementing the resolution of DR 187,\n   // when it's safe, i.e., the value_types are equal."}, {"sha": "f8e10620a0d323adb0122db52d3ec5fff05be00d", "filename": "libstdc++-v3/include/bits/stl_move.h", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e14e932bbb0a5b7d09f51233a1c64a64d945f677/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_move.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e14e932bbb0a5b7d09f51233a1c64a64d945f677/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_move.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_move.h?ref=e14e932bbb0a5b7d09f51233a1c64a64d945f677", "patch": "@@ -1,4 +1,4 @@\n-// Move, forward and identity implementation for C++0x -*- C++ -*-\n+// Move, forward and identity for C++0x + swap -*- C++ -*-\n \n // Copyright (C) 2007 Free Software Foundation, Inc.\n //\n@@ -35,6 +35,9 @@\n #ifndef _STL_MOVE_H\n #define _STL_MOVE_H 1\n \n+#include <bits/c++config.h>\n+#include <bits/concept_check.h>\n+\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n #include <type_traits>\n \n@@ -64,4 +67,26 @@ _GLIBCXX_END_NAMESPACE\n #define _GLIBCXX_MOVE(_Tp) _Tp\n #endif\n \n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  /**\n+   *  @brief Swaps two values.\n+   *  @param  a  A thing of arbitrary type.\n+   *  @param  b  Another thing of arbitrary type.\n+   *  @return   Nothing.\n+  */\n+  template<typename _Tp>\n+    inline void\n+    swap(_Tp& __a, _Tp& __b)\n+    {\n+      // concept requirements\n+      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)\n+\n+      _Tp __tmp = _GLIBCXX_MOVE(__a);\n+      __a = _GLIBCXX_MOVE(__b);\n+      __b = _GLIBCXX_MOVE(__tmp);\n+    }\n+\n+_GLIBCXX_END_NAMESPACE\n+\n #endif /* _STL_MOVE_H */"}, {"sha": "7163b62205f7851ac26ebea8eb9d7076e3d5cd5a", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 66, "deletions": 5, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e14e932bbb0a5b7d09f51233a1c64a64d945f677/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e14e932bbb0a5b7d09f51233a1c64a64d945f677/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=e14e932bbb0a5b7d09f51233a1c64a64d945f677", "patch": "@@ -62,7 +62,8 @@\n #ifndef _STL_PAIR_H\n #define _STL_PAIR_H 1\n \n-#include <bits/stl_move.h>\n+#include <bits/stl_move.h> // for std::move / std::forward, std::decay, and\n+                           // std::swap\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n@@ -87,15 +88,28 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       pair(const _T1& __a, const _T2& __b)\n       : first(__a), second(__b) { }\n \n-      /** There is also a templated copy ctor for the @c pair class itself.  */\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n       template<class _U1, class _U2>\n-        pair(const pair<_U1, _U2>& __p)\n-\t: first(__p.first), second(__p.second) { }\n+        pair(_U1&& __x, _U2&& __y)\n+\t: first(std::forward<_U1>(__x)),\n+\t  second(std::forward<_U2>(__y)) { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n       pair(pair&& __p)\n       : first(std::move(__p.first)),\n \tsecond(std::move(__p.second)) { }\n+#endif\n+\n+      /** There is also a templated copy ctor for the @c pair class itself.  */\n+      template<class _U1, class _U2>\n+        pair(const pair<_U1, _U2>& __p)\n+\t: first(__p.first),\n+\t  second(__p.second) { }\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<class _U1, class _U2>\n+        pair(pair<_U1, _U2>&& __p)\n+\t: first(std::move(__p.first)),\n+\t  second(std::move(__p.second)) { }\n \n       pair&\n       operator=(pair&& __p)\n@@ -104,6 +118,23 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \tsecond = std::move(__p.second);\n \treturn *this;\n       }\n+\n+      template<class _U1, class _U2>\n+        pair&\n+        operator=(pair<_U1, _U2>&& __p)\n+\t{\n+\t  first = std::move(__p.first);\n+\t  second = std::move(__p.second);\n+\t  return *this;\n+\t}\n+\n+      void\n+      swap(pair&& __p)\n+      {\n+\tusing std::swap;\n+\tswap(first, __p.first);\n+\tswap(second, __p.second);\t\n+      }\n #endif\n     };\n \n@@ -144,6 +175,24 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)\n     { return !(__x < __y); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  /// See std::pair::swap().\n+  template<class _T1, class _T2>\n+    inline void\n+    swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)\n+    { __x.swap(__y); }\n+\n+  template<class _T1, class _T2>\n+    inline void\n+    swap(pair<_T1, _T2>&& __x, pair<_T1, _T2>& __y)\n+    { __x.swap(__y); }\n+\n+  template<class _T1, class _T2>\n+    inline void\n+    swap(pair<_T1, _T2>& __x, pair<_T1, _T2>&& __y)\n+    { __x.swap(__y); }\n+#endif\n+\n   /**\n    *  @brief A convenience wrapper for creating a pair from two objects.\n    *  @param  x  The first object.\n@@ -156,10 +205,22 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    */\n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // 181.  make_pair() unintended behavior\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n   template<class _T1, class _T2>\n     inline pair<_T1, _T2>\n     make_pair(_T1 __x, _T2 __y)\n     { return pair<_T1, _T2>(__x, __y); }\n+#else\n+  template<class _T1, class _T2>\n+    inline pair<typename std::decay<_T1>::type,\n+\t\ttypename std::decay<_T2>::type>\n+    make_pair(_T1&& __x, _T2&& __y)\n+    {\n+      return pair<typename std::decay<_T1>::type,\n+\t          typename std::decay<_T2>::type>(std::forward<_T1>(__x),\n+\t\t\t\t\t\t  std::forward<_T2>(__y));\n+    }\n+#endif\n \n _GLIBCXX_END_NAMESPACE\n "}, {"sha": "e045097b4a25af0836a5a1c16c33fe8e20f22b50", "filename": "libstdc++-v3/testsuite/20_util/pair/swap.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e14e932bbb0a5b7d09f51233a1c64a64d945f677/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e14e932bbb0a5b7d09f51233a1c64a64d945f677/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fswap.cc?ref=e14e932bbb0a5b7d09f51233a1c64a64d945f677", "patch": "@@ -0,0 +1,59 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <utility>\n+#include <testsuite_allocator.h>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef __gnu_test::uneq_allocator<double> ua_type;\n+  ua_type one(1), two(2);\n+\n+  std::pair<ua_type, int> p1(one, 1), p2(two, 2);\n+\n+  p1.swap(p2);\n+  VERIFY( p1.first.get_personality() == 2 );\n+  VERIFY( p1.second == 2 );\n+  VERIFY( p2.first.get_personality() == 1 );\n+  VERIFY( p2.second == 1 );\n+\n+  swap(p1, p2);\n+  VERIFY( p2.first.get_personality() == 2 );\n+  VERIFY( p2.second == 2 );\n+  VERIFY( p1.first.get_personality() == 1 );\n+  VERIFY( p1.second == 1 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}