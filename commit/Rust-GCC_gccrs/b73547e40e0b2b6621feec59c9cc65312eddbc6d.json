{"sha": "b73547e40e0b2b6621feec59c9cc65312eddbc6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjczNTQ3ZTQwZTBiMmI2NjIxZmVlYzU5YzljYzY1MzEyZWRkYmM2ZA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-02-24T17:14:16Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-02-24T17:14:16Z"}, "message": "PR c++/93804 - exempt extern C headers from -Wredundant-tags\n\ngcc/cp/ChangeLog:\n\n\tPR c++/93804\n\t* parser.c (cp_parser_check_class_key): Avoid issuing -Wredundant-tags\n\tin shared C/C++ code in headers.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/93804\n\t* g++.dg/warn/Wredundant-tags-4.C: New test.\n\t* g++.dg/warn/Wredundant-tags-5.C: New test.\n\t* g++.dg/warn/Wredundant-tags-5.h: New test.", "tree": {"sha": "7413d2624f1b28fb895787b1e9cc8ce08a3f462e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7413d2624f1b28fb895787b1e9cc8ce08a3f462e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b73547e40e0b2b6621feec59c9cc65312eddbc6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b73547e40e0b2b6621feec59c9cc65312eddbc6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b73547e40e0b2b6621feec59c9cc65312eddbc6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b73547e40e0b2b6621feec59c9cc65312eddbc6d/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "004f2c07b6d3fa543f0fe86c55a7b3c227de2bb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/004f2c07b6d3fa543f0fe86c55a7b3c227de2bb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/004f2c07b6d3fa543f0fe86c55a7b3c227de2bb6"}], "stats": {"total": 408, "additions": 396, "deletions": 12}, "files": [{"sha": "9c212d9b0a42861a6399aad12f3a2dc12ff1f41d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b73547e40e0b2b6621feec59c9cc65312eddbc6d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b73547e40e0b2b6621feec59c9cc65312eddbc6d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b73547e40e0b2b6621feec59c9cc65312eddbc6d", "patch": "@@ -1,3 +1,9 @@\n+2020-02-24  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/93804\n+\t* parser.c (cp_parser_check_class_key): Avoid issuing -Wredundant-tags\n+\tin shared C/C++ code in headers.\n+\n 2020-02-24  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/93869 - ICE with -Wmismatched-tags."}, {"sha": "8e52fef70bd16c8374d7dc5d1c3134a23dae21a2", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 52, "deletions": 12, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b73547e40e0b2b6621feec59c9cc65312eddbc6d/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b73547e40e0b2b6621feec59c9cc65312eddbc6d/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=b73547e40e0b2b6621feec59c9cc65312eddbc6d", "patch": "@@ -30837,15 +30837,31 @@ cp_parser_maybe_warn_enum_key (cp_parser *parser, location_t key_loc,\n   /* The enum-key is redundant for uses of the TYPE that are not\n      declarations and for which name lookup returns just the type\n      itself.  */\n-  if (decl == type_decl)\n-    {\n-      gcc_rich_location richloc (key_loc);\n-      richloc.add_fixit_remove (key_loc);\n-      warning_at (&richloc, OPT_Wredundant_tags,\n-\t\t  \"redundant enum-key %<enum%s%> in reference to %q#T\",\n-\t\t  (scoped_key == RID_CLASS ? \" class\"\n-\t\t   : scoped_key == RID_STRUCT ? \" struct\" : \"\"), type);\n+  if (decl != type_decl)\n+    return;\n+\n+  if (scoped_key != RID_CLASS\n+      && scoped_key != RID_STRUCT\n+      && current_lang_name != lang_name_cplusplus\n+      && current_namespace == global_namespace)\n+    {\n+      /* Avoid issuing the diagnostic for apparently redundant (unscoped)\n+\t enum tag in shared C/C++ code in files (such as headers) included\n+\t in the main source file.  */\n+      const line_map_ordinary *map = NULL;\n+      linemap_resolve_location (line_table, key_loc,\n+\t\t\t\tLRK_MACRO_DEFINITION_LOCATION,\n+\t\t\t\t&map);\n+      if (!MAIN_FILE_P (map))\n+\treturn;\n     }\n+\n+  gcc_rich_location richloc (key_loc);\n+  richloc.add_fixit_remove (key_loc);\n+  warning_at (&richloc, OPT_Wredundant_tags,\n+\t      \"redundant enum-key %<enum%s%> in reference to %q#T\",\n+\t      (scoped_key == RID_CLASS ? \" class\"\n+\t       : scoped_key == RID_STRUCT ? \" struct\" : \"\"), type);\n }\n \n /* Describes the set of declarations of a struct, class, or class template\n@@ -31005,6 +31021,13 @@ cp_parser_check_class_key (cp_parser *parser, location_t key_loc,\n       && class_key != union_type)\n     return;\n \n+  /* Only consider the true class-keys below and ignore typename_type,\n+     etc. that are not C++ class-keys.  */\n+  if (class_key != class_type\n+      && class_key != record_type\n+      && class_key != union_type)\n+    return;\n+\n   tree type_decl = TYPE_MAIN_DECL (type);\n   tree name = DECL_NAME (type_decl);\n   /* Look up the NAME to see if it unambiguously refers to the TYPE\n@@ -31017,15 +31040,32 @@ cp_parser_check_class_key (cp_parser *parser, location_t key_loc,\n      neither definitions of it nor declarations, and for which name\n      lookup returns just the type itself.  */\n   bool key_redundant = !def_p && !decl_p && decl == type_decl;\n+\n+  if (key_redundant\n+      && class_key != class_type\n+      && current_lang_name != lang_name_cplusplus\n+      && current_namespace == global_namespace)\n+    {\n+      /* Avoid issuing the diagnostic for apparently redundant struct\n+\t and union class-keys in shared C/C++ code in files (such as\n+\t headers) included in the main source file.  */\n+      const line_map_ordinary *map = NULL;\n+      linemap_resolve_location (line_table, key_loc,\n+\t\t\t\tLRK_MACRO_DEFINITION_LOCATION,\n+\t\t\t\t&map);\n+      if (!MAIN_FILE_P (map))\n+\tkey_redundant = false;\n+    }\n+\n   if (key_redundant)\n     {\n       gcc_rich_location richloc (key_loc);\n       richloc.add_fixit_remove (key_loc);\n       warning_at (&richloc, OPT_Wredundant_tags,\n-\t\t\"redundant class-key %qs in reference to %q#T\",\n-\t\tclass_key == union_type ? \"union\"\n-\t\t: class_key == record_type ? \"struct\" : \"class\",\n-\t\ttype);\n+\t\t  \"redundant class-key %qs in reference to %q#T\",\n+\t\t  class_key == union_type ? \"union\"\n+\t\t  : class_key == record_type ? \"struct\" : \"class\",\n+\t\t  type);\n     }\n \n   if (seen_as_union || !warn_mismatched_tags)"}, {"sha": "fae86eb501e907e91c6d6b87b571e741119e7097", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b73547e40e0b2b6621feec59c9cc65312eddbc6d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b73547e40e0b2b6621feec59c9cc65312eddbc6d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b73547e40e0b2b6621feec59c9cc65312eddbc6d", "patch": "@@ -1,3 +1,10 @@\n+2020-02-24  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/93804\n+\t* g++.dg/warn/Wredundant-tags-4.C: New test.\n+\t* g++.dg/warn/Wredundant-tags-5.C: New test.\n+\t* g++.dg/warn/Wredundant-tags-5.h: New test.\n+\n 2020-02-24  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc.dg/analyzer/analyzer-verbosity-2a.c: New test."}, {"sha": "c56153aaf71458523a7775bfeeec5976ccf97ecf", "filename": "gcc/testsuite/g++.dg/warn/Wredundant-tags-4.C", "status": "added", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b73547e40e0b2b6621feec59c9cc65312eddbc6d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWredundant-tags-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b73547e40e0b2b6621feec59c9cc65312eddbc6d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWredundant-tags-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWredundant-tags-4.C?ref=b73547e40e0b2b6621feec59c9cc65312eddbc6d", "patch": "@@ -0,0 +1,142 @@\n+/* PR c++/93804 - exempt extern \"C\" headers from -Wredundant-tags\n+   Verify that -Wredundant-tags is not issued for redundant class-key\n+   in extern \"C\" references in a header file.\n+   { dg-do compile }\n+   { dg-options \"-Wredundant-tags -ftrack-macro-expansion=0\" }  */\n+\n+# 1 \"Wredundant-tags-4.C\"\n+# 1 \"Wredundant-tags-4.h\" 1\n+# line 10\n+\n+#if __cplusplus >= 201103L\n+#  define enum_struct   enum struct\n+#else\n+#  define enum_struct   class\n+#endif\n+\n+extern \"C\" {\n+\n+  class C1 { };\n+  enum E1 { };\n+  enum_struct ES1 { };\n+  struct S1 { enum E1 e1; };\n+  union U1 { enum E1 e1; struct S1 s1; };\n+\n+  /* The warning should be issued for the class-key class even in\n+     an extern \"C\" block.  */\n+  void f0 (class C1);                   // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+  void f1 (enum E1);                    // { dg-bogus \"\\\\\\[-Wredundant-tags\" }\n+\n+  /* Ditto for a scoped enum.  */\n+  void f2 (enum_struct ES1);            // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+                                        // { dg-warning \"must not use the 'struct' keyword\" \"enum struct\" { target { c++11 } } .-1 }\n+\n+  void f3 (struct S1);                  // { dg-bogus \"\\\\\\[-Wredundant-tags\" }\n+  void f4 (union U1);                   // { dg-bogus \"\\\\\\[-Wredundant-tags\" }\n+\n+  inline int\n+  finline1 (class C1)                   // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+  { return sizeof (class C1); }         // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+\n+  inline int\n+  finline2 (enum E1)                    // { dg-bogus \"\\\\\\[-Wredundant-tags\" }\n+  { return sizeof (enum E1); }          // { dg-bogus \"\\\\\\[-Wredundant-tags\" }\n+\n+  inline int\n+  finline3 (enum_struct ES1)            // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+  { return sizeof (ES1); }\n+\n+  inline int\n+  finline4 (struct S1)                  // { dg-bogus \"\\\\\\[-Wredundant-tags\" }\n+  { return sizeof (struct S1); }\n+\n+  inline int\n+  finline5 (union U1)                   // { dg-bogus \"\\\\\\[-Wredundant-tags\" }\n+  { return sizeof (union U1); }\n+\n+  extern class C1 c1;                   // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+  extern enum E1 e1;                    // { dg-bogus \"\\\\\\[-Wredundant-tags\" }\n+  extern enum_struct ES1 es1;           // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+  extern struct S1 s1;                  // { dg-bogus \"\\\\\\[-Wredundant-tags\" }\n+  extern union U1 u1;                   // { dg-bogus \"\\\\\\[-Wredundant-tags\" }\n+\n+  namespace N1 {\n+  /* Verify that -Wredundant-tags is issued in a namespace enclosed\n+     in an extern \"C\" block.  (Such code cannot be shared with C.)  */\n+  extern class C1 n1c1;                 // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+  extern enum E1 n1e1;                  // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+  extern enum_struct ES1 n1es1;         // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+  extern struct S1 n1s1;                // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+  extern union U1 n1u1;                 // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+  }\n+}   // extern \"C\"\n+\n+\n+extern \"C++\" {\n+\n+  class C2 { };\n+  enum E2 { };\n+  enum_struct ES2 { };\n+  struct S2 {\n+    enum E2 e21;                        // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+    E2 e22;\n+    enum_struct ES2 es21;               // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+    ES2 es22;\n+  };\n+  union U2 { };\n+\n+  void f5 (class C2);                   // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+  void f6 (enum E2);                    // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+  void f7 (enum_struct ES2);            // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+  void f8 (struct S2);                  // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+  void f9 (union U2);                   // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+\n+  extern class C2 c2;                   // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+  extern enum E2 e2;                    // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+  extern enum_struct ES2 es2;           // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+  extern struct S2 s2;                  // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+  extern union U2 u2;                   // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+}   // extern \"C++\"\n+\n+\n+namespace N {\n+\n+class C3 { };\n+enum E3 { };\n+enum_struct ES3 { };\n+struct S3 { };\n+union U3 { };\n+\n+void f10 (class C3);                    // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+void f11 (enum E3);                     // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+void f12 (enum_struct ES3);             // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+void f13 (struct S3);                   // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+void f14 (union U3);                    // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+\n+extern class C3 c3;                     // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+extern enum E3 e3;                      // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+extern enum_struct ES3 es3;             // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+extern struct S3 s3;                    // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+extern union U3 u3;                     // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+\n+extern \"C\" {\n+\n+  /* Verify that -Wredundant-tags is issued in an extern \"C\" block\n+     enclosed within a namespace.  (Such code cannot be shared with\n+     C.)  */\n+  class C4 { };\n+  enum E4 { };\n+  enum_struct ES4 { };\n+  struct S4 { };\n+  union U4 { };\n+\n+  extern class C4 c4;                   // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+  extern enum E4 e4;                    // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+  extern enum_struct ES4 es4;           // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+  extern struct S4 s4;                  // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+  extern union U4 u4;                   // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+}\n+\n+}   // namespace N\n+\n+// { dg-prune-output \"must not use the 'struct' keyword\" }"}, {"sha": "a3676d8d0706dd4829336d2345b8a46ed23859ba", "filename": "gcc/testsuite/g++.dg/warn/Wredundant-tags-5.C", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b73547e40e0b2b6621feec59c9cc65312eddbc6d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWredundant-tags-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b73547e40e0b2b6621feec59c9cc65312eddbc6d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWredundant-tags-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWredundant-tags-5.C?ref=b73547e40e0b2b6621feec59c9cc65312eddbc6d", "patch": "@@ -0,0 +1,109 @@\n+// PR c++/93804 - exempt extern \"C\" headers from -Wredundant-tags\n+// Verify that -Wredundant-tags is issued even for redundant class-key\n+// in references in the main source file to extern \"C\" classes defined\n+// in headers.\n+// { dg-do compile }\n+// { dg-options \"-Wredundant-tags -ftrack-macro-expansion=0\" }\n+\n+#include \"Wredundant-tags-5.h\"\n+\n+extern \"C\" {\n+\n+  class C1                    // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+  fc1 (C1)\n+  {\n+    return C1 ();\n+  }\n+\n+  EC1\n+  fce1 (enum_class EC1)       // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+  {\n+    return EC1 ();\n+  }\n+\n+  E1\n+  fe1 (E1)\n+  {\n+    return (enum E1)0;        // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+  }\n+\n+  struct S1                   // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+  fs1 (S1)\n+  {\n+    return S1 ();\n+  }\n+\n+  U1\n+  fu1 (union U1)              // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+  {\n+    return U1 ();\n+  }\n+\n+}   // extern \"C\"\n+\n+\n+extern \"C++\" {\n+\n+  class C2                    // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+  fc2 (C2)\n+  {\n+    return C2 ();\n+  }\n+\n+  EC2\n+  fce2 (enum_class EC2)       // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+  {\n+    return EC2 ();\n+  }\n+\n+  E2\n+  fe2 (E2)\n+  {\n+    return (enum E2)0;        // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+  }\n+\n+  struct S2                   // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+  fs2 (S2)\n+  {\n+    return S2 ();\n+  }\n+\n+  U2\n+  fu2 (union U2)              // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+  {\n+    return U2 ();\n+  }\n+\n+}   // extern \"C++\"\n+\n+\n+class C3                      // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+fc3 (C3)\n+{\n+  return C3 ();\n+}\n+\n+EC3\n+fce3 (enum_class EC3)         // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+{\n+  return EC3 ();\n+}\n+\n+E3 fe3 (E3)\n+{\n+  return (enum E3)0;          // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+}\n+\n+struct S3                      // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+fs3 (S3)\n+{\n+  return S3 ();\n+}\n+\n+U3\n+fu3 (union U3)                // { dg-warning \"\\\\\\[-Wredundant-tags\" }\n+{\n+  return U3 ();\n+}\n+\n+// { dg-prune-output \"must not use the 'class' keyword\" }"}, {"sha": "c72aee6e01febe072d4c0b8c120ef35a1302a261", "filename": "gcc/testsuite/g++.dg/warn/Wredundant-tags-5.h", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b73547e40e0b2b6621feec59c9cc65312eddbc6d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWredundant-tags-5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b73547e40e0b2b6621feec59c9cc65312eddbc6d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWredundant-tags-5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWredundant-tags-5.h?ref=b73547e40e0b2b6621feec59c9cc65312eddbc6d", "patch": "@@ -0,0 +1,80 @@\n+#ifndef WREDUNDANT_TAGS_H\n+#define WREDUNDANT_TAGS_H\n+\n+#if __cplusplus >= 201103L\n+# define enum_class   enum class\n+#else\n+# define enum_class   class\n+#endif\n+\n+extern \"C\" {\n+\n+  class C1 { };\n+  enum_class EC1 { };\n+  enum E1 { };\n+  struct S1 { };\n+  union U1 { };\n+\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wredundant-tags\"\n+  class C1 fc1 (class C1);          // -Wredundant-tags\n+  enum_class EC1 fce1 (enum_class EC1);\n+#pragma GCC diagnostic pop\n+\n+  enum E1 fe1 (enum E1);\n+  struct S1 fs1 (struct S1);\n+  union U1 fu1 (union U1);\n+\n+  C1 fc1 (C1);\n+  EC1 fce1 (EC1);\n+  E1 fe1 (E1);\n+  S1 fs1 (S1);\n+  U1 fu1 (U1);\n+}\n+\n+\n+extern \"C++\" {\n+\n+  class C2 { };\n+  enum_class EC2 { };\n+  enum E2 { };\n+  struct S2 { };\n+  union U2 { };\n+\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wredundant-tags\"\n+  class C2 fc2 (class C2);                // -Wredundant-tags\n+  enum_class EC2 fce2 (enum_class EC2);   // -Wredundant-tags\n+  struct S2 fs2 (struct S2);              // -Wredundant-tags\n+  union U2 fu2 (union U2);                // -Wredundant-tags\n+#pragma GCC diagnostic pop\n+\n+  C2 fc2 (C2);\n+  EC2 fce2 (EC2);\n+  E2 fe2 (E2);\n+  S2 fs2 (S2);\n+  U2 fu2 (U2);\n+}\n+\n+\n+class C3 { };\n+enum_class EC3 { };\n+enum E3 { };\n+struct S3 { };\n+union U3 { };\n+\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wredundant-tags\"\n+class C3 fc3 (class C3);                  // -Wredundant-tags\n+enum_class EC3 fce3 (enum_class EC3);     // -Wredundant-tags\n+struct S3 fs3 (struct S3);                // -Wredundant-tags\n+union U3 fu3 (union U3);                  // -Wredundant-tags\n+#pragma GCC diagnostic pop\n+\n+C3 fc3 (C3);\n+EC3 fce3 (EC3);\n+E3 fe3 (E3);\n+S3 fs3 (S3);\n+U3 fu3 (U3);\n+\n+#endif   // WREDUNDANT_TAGS_H"}]}