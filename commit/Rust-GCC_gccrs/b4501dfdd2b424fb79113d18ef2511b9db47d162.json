{"sha": "b4501dfdd2b424fb79113d18ef2511b9db47d162", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ1MDFkZmRkMmI0MjRmYjc5MTEzZDE4ZWYyNTExYjlkYjQ3ZDE2Mg==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2007-04-15T01:53:43Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2007-04-15T01:53:43Z"}, "message": "open.c (test_endfile): Revert changes for 31052, restoring this function.\n\n2007-04-14  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\t* io/open.c (test_endfile): Revert changes for 31052, restoring this\n\tfunction.\n\nFrom-SVN: r123842", "tree": {"sha": "36af4e0cbb1f0d8e076f231c0d95fdfaa9a90049", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36af4e0cbb1f0d8e076f231c0d95fdfaa9a90049"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4501dfdd2b424fb79113d18ef2511b9db47d162", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4501dfdd2b424fb79113d18ef2511b9db47d162", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4501dfdd2b424fb79113d18ef2511b9db47d162", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4501dfdd2b424fb79113d18ef2511b9db47d162/comments", "author": null, "committer": null, "parents": [{"sha": "65a333394f7ea2bc72b48aff8fa72e92f750d838", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65a333394f7ea2bc72b48aff8fa72e92f750d838", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65a333394f7ea2bc72b48aff8fa72e92f750d838"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "153a442a22acacdee873f73ead3788c9e4a5610d", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4501dfdd2b424fb79113d18ef2511b9db47d162/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4501dfdd2b424fb79113d18ef2511b9db47d162/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=b4501dfdd2b424fb79113d18ef2511b9db47d162", "patch": "@@ -1,9 +1,14 @@\n+2007-04-14  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\t* io/open.c (test_endfile): Revert changes for 31052, restoring this\n+\tfunction. \n+\n 2007-04-14  Steve Ellcey  <sje@cup.hp.com>\n \n \t* Makefile.am: Add -I .. to ACLOCAL_AMFLAGS.  Add libgfortran_la_LINK.\n \t* Makefile.in: Regenerate.\n \n-2007-04-11  Kai Tietz   <kai.tietz@onevision.com>\n+2007-04-11  Kai Tietz  <kai.tietz@onevision.com>\n \n         * configure: Regenerate.\n "}, {"sha": "55c376939e89200254c8589c229da28079cc509a", "filename": "libgfortran/io/open.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4501dfdd2b424fb79113d18ef2511b9db47d162/libgfortran%2Fio%2Fopen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4501dfdd2b424fb79113d18ef2511b9db47d162/libgfortran%2Fio%2Fopen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fopen.c?ref=b4501dfdd2b424fb79113d18ef2511b9db47d162", "patch": "@@ -109,6 +109,20 @@ static const st_option convert_opt[] =\n   { NULL, 0}\n };\n \n+\n+/* Given a unit, test to see if the file is positioned at the terminal\n+   point, and if so, change state from NO_ENDFILE flag to AT_ENDFILE.\n+   This prevents us from changing the state from AFTER_ENDFILE to\n+   AT_ENDFILE.  */\n+\n+static void\n+test_endfile (gfc_unit * u)\n+{\n+  if (u->endfile == NO_ENDFILE && file_length (u->s) == file_position (u->s))\n+    u->endfile = AT_ENDFILE;\n+}\n+\n+\n /* Change the modes of a file, those that are allowed * to be\n    changed.  */\n \n@@ -195,6 +209,8 @@ edit_modes (st_parameter_open *opp, gfc_unit * u, unit_flags * flags)\n \n       u->current_record = 0;\n       u->last_record = 0;\n+\n+      test_endfile (u);\n       break;\n \n     case POSITION_APPEND:\n@@ -472,6 +488,13 @@ new_unit (st_parameter_open *opp, gfc_unit *u, unit_flags * flags)\n   memmove (u->file, opp->file, opp->file_len);\n   u->file_len = opp->file_len;\n \n+  /* Curiously, the standard requires that the\n+     position specifier be ignored for new files so a newly connected\n+     file starts out at the initial point.  We still need to figure\n+     out if the file is at the end or not.  */\n+\n+  test_endfile (u);\n+\n   if (flags->status == STATUS_SCRATCH && opp->file != NULL)\n     free_mem (opp->file);\n   return u;"}]}